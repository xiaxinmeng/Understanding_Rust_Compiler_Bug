{"sha": "b453c95fd3fa689a6d70e8878848e5d6531e9ac5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjQ1M2M5NWZkM2ZhNjg5YTZkNzBlODg3ODg0OGU1ZDY1MzFlOWFjNQ==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@apple.com", "date": "2004-05-30T00:49:06Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2004-05-30T00:49:06Z"}, "message": "Index: libcpp/ChangeLog\n2004-05-29  Geoffrey Keating  <geoffk@apple.com>\n\n\t* symtab.c (ht_create): Set entries_owned.\n\t(ht_destroy): Honour entries_owned.\n\t(ht_expand): Likewise.\n\t(ht_load): New.\n\nIndex: libcpp/include/ChangeLog\n2004-05-29  Geoffrey Keating  <geoffk@apple.com>\n\n\t* symtab.h (struct ht): New field 'entries_owned'\n\t(ht_load): New prototype.\n\nIndex: gcc/ChangeLog\n2004-05-29  Geoffrey Keating  <geoffk@apple.com>\n\n\t* gengtype-yacc.y: Add NESTED_PTR token.\n\t(option): Record `nested_ptr' option.\n\t* gengtype-lex.l: Handle `nested_ptr' keyword.\n\t* gengtype.c (walk_type): Process `nested_ptr' option.\n\t* gengtype.h (struct nested_ptr_data): New.\n\t* doc/gty.texi (GTY Options): Document `nested_ptr' option.\n\t* stringpool.c (struct string_pool_data): Make 'entries' point to\n\tht_identifier instead of tree.\n\t(gt_pch_save_stringpool): Don't adjust pointers.\n\t(gt_pch_restore_stringpool): Call ht_load.\n\nFrom-SVN: r82438", "tree": {"sha": "53fb5889181940508762ddb472618440e4b6aca6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/53fb5889181940508762ddb472618440e4b6aca6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b453c95fd3fa689a6d70e8878848e5d6531e9ac5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b453c95fd3fa689a6d70e8878848e5d6531e9ac5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b453c95fd3fa689a6d70e8878848e5d6531e9ac5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b453c95fd3fa689a6d70e8878848e5d6531e9ac5/comments", "author": {"login": "geoffk01", "id": 31905243, "node_id": "MDQ6VXNlcjMxOTA1MjQz", "avatar_url": "https://avatars.githubusercontent.com/u/31905243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geoffk01", "html_url": "https://github.com/geoffk01", "followers_url": "https://api.github.com/users/geoffk01/followers", "following_url": "https://api.github.com/users/geoffk01/following{/other_user}", "gists_url": "https://api.github.com/users/geoffk01/gists{/gist_id}", "starred_url": "https://api.github.com/users/geoffk01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geoffk01/subscriptions", "organizations_url": "https://api.github.com/users/geoffk01/orgs", "repos_url": "https://api.github.com/users/geoffk01/repos", "events_url": "https://api.github.com/users/geoffk01/events{/privacy}", "received_events_url": "https://api.github.com/users/geoffk01/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "666e5d7b945c77f3bd9f3fdf00bf75f3a02e3499", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/666e5d7b945c77f3bd9f3fdf00bf75f3a02e3499", "html_url": "https://github.com/Rust-GCC/gccrs/commit/666e5d7b945c77f3bd9f3fdf00bf75f3a02e3499"}], "stats": {"total": 187, "additions": 149, "deletions": 38}, "files": [{"sha": "00d557730bacbede3f45672cc9c485161979133e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b453c95fd3fa689a6d70e8878848e5d6531e9ac5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b453c95fd3fa689a6d70e8878848e5d6531e9ac5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b453c95fd3fa689a6d70e8878848e5d6531e9ac5", "patch": "@@ -1,3 +1,16 @@\n+2004-05-29  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* gengtype-yacc.y: Add NESTED_PTR token.\n+\t(option): Record `nested_ptr' option.\n+\t* gengtype-lex.l: Handle `nested_ptr' keyword.\n+\t* gengtype.c (walk_type): Process `nested_ptr' option.\n+\t* gengtype.h (struct nested_ptr_data): New.\n+\t* doc/gty.texi (GTY Options): Document `nested_ptr' option.\n+\t* stringpool.c (struct string_pool_data): Make 'entries' point to\n+\tht_identifier instead of tree.\n+\t(gt_pch_save_stringpool): Don't adjust pointers.\n+\t(gt_pch_restore_stringpool): Call ht_load.\n+\n 2004-05-29  Jason Merrill  <jason@redhat.com>\n \n \t* gimplify.c (gimplify_expr): Don't build a statement list"}, {"sha": "c375e24042da059661b121193f876e99e57ac4a2", "filename": "gcc/doc/gty.texi", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b453c95fd3fa689a6d70e8878848e5d6531e9ac5/gcc%2Fdoc%2Fgty.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b453c95fd3fa689a6d70e8878848e5d6531e9ac5/gcc%2Fdoc%2Fgty.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgty.texi?ref=b453c95fd3fa689a6d70e8878848e5d6531e9ac5", "patch": "@@ -291,6 +291,19 @@ this field is always @code{NULL}.  This is used to avoid requiring\n backends to define certain optional structures.  It doesn't work with\n language frontends.\n \n+@findex nested_ptr\n+@item nested_ptr (@var{type}, \"@var{to expression}\", \"@var{from expression}\")\n+\n+The type machinery expects all pointers to point to the start of an\n+object.  Sometimes for abstraction purposes it's convenient to have\n+a pointer which points inside an object.  So long as it's possible to\n+convert the original object to and from the pointer, such pointers\n+can still be used.  @var{type} is the type of the original object,\n+the @var{to expression} returns the pointer given the original object,\n+and the @var{from expression} returns the original object given\n+the pointer.  The pointer will be available using the @code{%h}\n+escape.\n+\n @findex chain_next\n @findex chain_prev\n @item chain_next (\"@var{expression}\")"}, {"sha": "d7fa27ff3bcf631a28c56ada5410a0a0f1542b54", "filename": "gcc/gengtype-lex.l", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b453c95fd3fa689a6d70e8878848e5d6531e9ac5/gcc%2Fgengtype-lex.l", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b453c95fd3fa689a6d70e8878848e5d6531e9ac5/gcc%2Fgengtype-lex.l", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype-lex.l?ref=b453c95fd3fa689a6d70e8878848e5d6531e9ac5", "patch": "@@ -1,6 +1,6 @@\n /* -*- indented-text -*- */\n /* Process source files and output type information.\n-   Copyright (C) 2002, 2003 Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2003, 2004 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -235,6 +235,7 @@ ITYPE\t{IWORD}({WS}{IWORD})*\n \"struct\"/[^[:alnum:]_]\t\t{ return STRUCT; }\n \"enum\"/[^[:alnum:]_]\t\t{ return ENUM; }\n \"ptr_alias\"/[^[:alnum:]_]\t{ return ALIAS; }\n+\"nested_ptr\"/[^[:alnum:]_]\t{ return NESTED_PTR; }\n [0-9]+\t\t\t\t{ return NUM; }\n \"param\"[0-9]*\"_is\"/[^[:alnum:]_]\t\t{ \n   yylval.s = xmemdup (yytext, yyleng, yyleng+1);"}, {"sha": "2e7b6a7057514ed4382613974b750d0c1c630079", "filename": "gcc/gengtype-yacc.y", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b453c95fd3fa689a6d70e8878848e5d6531e9ac5/gcc%2Fgengtype-yacc.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b453c95fd3fa689a6d70e8878848e5d6531e9ac5/gcc%2Fgengtype-yacc.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype-yacc.y?ref=b453c95fd3fa689a6d70e8878848e5d6531e9ac5", "patch": "@@ -1,6 +1,6 @@\n /* -*- indented-text -*- */\n /* Process source files and output type information.\n-   Copyright (C) 2002 Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2004 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -44,6 +44,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n %token STRUCT\n %token ENUM\n %token ALIAS\n+%token NESTED_PTR\n %token <s>PARAM_IS\n %token NUM\n %token PERCENTPERCENT \"%%\"\n@@ -279,6 +280,13 @@ option:   ID\n             { $$ = create_option ($1, (void *)$3); }\n \t| type_option '(' type ')'\n \t    { $$ = create_option ($1, adjust_field_type ($3, NULL)); }\n+\t| NESTED_PTR '(' type ',' stringseq ',' stringseq ')'\n+\t    {\n+\t      struct nested_ptr_data d =\n+\t        { adjust_field_type ($3, NULL), $5, $7 };\n+\t      $$ = create_option (\"nested_ptr\",\n+\t\t\t\t  xmemdup (&d, sizeof (d), sizeof (d)));\n+\t    }\n \t;\n \n optionseq: option"}, {"sha": "804ef70320a1900f176cdd89e025113b1c3348b3", "filename": "gcc/gengtype.c", "status": "modified", "additions": 45, "deletions": 1, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b453c95fd3fa689a6d70e8878848e5d6531e9ac5/gcc%2Fgengtype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b453c95fd3fa689a6d70e8878848e5d6531e9ac5/gcc%2Fgengtype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.c?ref=b453c95fd3fa689a6d70e8878848e5d6531e9ac5", "patch": "@@ -1509,6 +1509,7 @@ walk_type (type_p t, struct walk_type_data *d)\n   int use_param_num = -1;\n   int use_params_p = 0;\n   options_p oo;\n+  const struct nested_ptr_data *nested_ptr_d = NULL;\n \n   d->needs_cast_p = 0;\n   for (oo = d->opt; oo; oo = oo->next)\n@@ -1523,6 +1524,8 @@ walk_type (type_p t, struct walk_type_data *d)\n       use_params_p = 1;\n     else if (strcmp (oo->name, \"desc\") == 0)\n       desc = (const char *)oo->info;\n+    else if (strcmp (oo->name, \"nested_ptr\") == 0)\n+      nested_ptr_d = (const struct nested_ptr_data *)oo->info ;\n     else if (strcmp (oo->name, \"dot\") == 0)\n       ;\n     else if (strcmp (oo->name, \"tag\") == 0)\n@@ -1623,7 +1626,48 @@ walk_type (type_p t, struct walk_type_data *d)\n \t\tbreak;\n \t      }\n \n-\t    d->process_field (t->u.p, d);\n+\t    if (nested_ptr_d)\n+\t      {\n+\t\tconst char *oldprevval2 = d->prev_val[2];\n+\n+\t\tif (! UNION_OR_STRUCT_P (nested_ptr_d->type))\n+\t\t  {\n+\t\t    error_at_line (d->line,\n+\t\t\t\t   \"field `%s' has invalid \"\n+\t\t\t\t   \"option `nested_ptr'\\n\",\n+\t\t\t\t   d->val);\n+\t\t    return;\n+\t\t  }\n+\n+\t\td->prev_val[2] = d->val;\n+\t\toprintf (d->of, \"%*s{\\n\", d->indent, \"\");\n+\t\td->indent += 2;\n+\t\td->val = xasprintf (\"x%d\", d->counter++);\n+\t\toprintf (d->of, \"%*s%s %s * %s =\\n\", d->indent, \"\",\n+\t\t\t (nested_ptr_d->type->kind == TYPE_UNION \n+\t\t\t  ? \"union\" : \"struct\"), \n+\t\t\t nested_ptr_d->type->u.s.tag, d->val);\n+\t\toprintf (d->of, \"%*s\", d->indent + 2, \"\");\n+\t\toutput_escaped_param (d, nested_ptr_d->convert_from,\n+\t\t\t\t      \"nested_ptr\");\n+\t\toprintf (d->of, \";\\n\");\n+\n+\t\td->process_field (nested_ptr_d->type, d);\n+\n+\t\toprintf (d->of, \"%*s%s = \", d->indent, \"\",\n+\t\t\t d->prev_val[2]);\n+\t\td->prev_val[2] = d->val;\n+\t\toutput_escaped_param (d, nested_ptr_d->convert_to,\n+\t\t\t\t      \"nested_ptr\");\n+\t\toprintf (d->of, \";\\n\");\n+\n+\t\td->indent -= 2;\n+\t\toprintf (d->of, \"%*s}\\n\", d->indent, \"\");\n+\t\td->val = d->prev_val[2];\n+\t\td->prev_val[2] = oldprevval2;\n+\t      }\n+\t    else\n+\t      d->process_field (t->u.p, d);\n \t  }\n \telse\n \t  {"}, {"sha": "bf3c5624ced69483fd7f8e9320f63c17ea874b03", "filename": "gcc/gengtype.h", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b453c95fd3fa689a6d70e8878848e5d6531e9ac5/gcc%2Fgengtype.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b453c95fd3fa689a6d70e8878848e5d6531e9ac5/gcc%2Fgengtype.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.h?ref=b453c95fd3fa689a6d70e8878848e5d6531e9ac5", "patch": "@@ -37,17 +37,24 @@ enum typekind {\n   TYPE_PARAM_STRUCT\n };\n \n+typedef struct pair *pair_p;\n+typedef struct type *type_p;\n+typedef unsigned lang_bitmap;\n+\n+/* Option data for the 'nested_ptr' option.  */\n+struct nested_ptr_data {\n+  type_p type;\n+  const char *convert_to;\n+  const char *convert_from;\n+};    \n+\n /* A way to pass data through to the output end.  */\n typedef struct options {\n   struct options *next;\n   const char *name;\n   const void *info;\n } *options_p;\n \n-typedef struct pair *pair_p;\n-typedef struct type *type_p;\n-typedef unsigned lang_bitmap;\n-\n /* A name and a type.  */\n struct pair {\n   pair_p next;"}, {"sha": "d17f31decdde9da68c8505ec76f16e8311312b43", "filename": "gcc/stringpool.c", "status": "modified", "additions": 15, "deletions": 27, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b453c95fd3fa689a6d70e8878848e5d6531e9ac5/gcc%2Fstringpool.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b453c95fd3fa689a6d70e8878848e5d6531e9ac5/gcc%2Fstringpool.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstringpool.c?ref=b453c95fd3fa689a6d70e8878848e5d6531e9ac5", "patch": "@@ -1,5 +1,5 @@\n /* String pool for GCC.\n-   Copyright (C) 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+   Copyright (C) 2000, 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -201,7 +201,11 @@ gt_pch_n_S (const void *x)\n \n struct string_pool_data GTY(())\n {\n-  tree * GTY((length (\"%h.nslots\"))) entries;\n+  struct ht_identifier * * \n+    GTY((length (\"%h.nslots\"),\n+\t nested_ptr (union tree_node, \"%h ? GCC_IDENT_TO_HT_IDENT (%h) : NULL\",\n+\t\t     \"%h ? HT_IDENT_TO_GCC_IDENT (%h) : NULL\")))\n+    entries;\n   unsigned int nslots;\n   unsigned int nelements;\n };\n@@ -237,25 +241,20 @@ ht_copy_and_clear (cpp_reader *r ATTRIBUTE_UNUSED, hashnode hp, const void *ht2_\n \n static struct ht *saved_ident_hash;\n \n-/* The hash table contains pointers to the cpp_hashnode inside the\n-   lang_identifier.  The PCH machinery can't handle pointers that refer\n-   to the inside of an object, so to save the hash table for PCH the\n-   pointers are adjusted and stored in the variable SPD.  */\n+/* Prepare the stringpool to be written (by clearing all the cpp parts\n+   of each entry) and place the data to be saved in SPD.  Save the\n+   current state in SAVED_IDENT_HASH so that gt_pch_fixup_stringpool\n+   can restore it.  */\n \n void\n gt_pch_save_stringpool (void)\n {\n-  unsigned int i;\n-\n   spd = ggc_alloc (sizeof (*spd));\n   spd->nslots = ident_hash->nslots;\n   spd->nelements = ident_hash->nelements;\n-  spd->entries = ggc_alloc (sizeof (tree *) * spd->nslots);\n-  for (i = 0; i < spd->nslots; i++)\n-    if (ident_hash->entries[i] != NULL)\n-      spd->entries[i] = HT_IDENT_TO_GCC_IDENT (ident_hash->entries[i]);\n-    else\n-      spd->entries[i] = NULL;\n+  spd->entries = ggc_alloc (sizeof (spd->entries[0]) * spd->nslots);\n+  memcpy (spd->entries, ident_hash->entries,\n+\t  spd->nslots * sizeof (spd->entries[0]));\n \n   saved_ident_hash = ht_create (14);\n   saved_ident_hash->alloc_node = alloc_node;\n@@ -274,23 +273,12 @@ gt_pch_fixup_stringpool (void)\n }\n \n /* A PCH file has been restored, which loaded SPD; fill the real hash table\n-   with adjusted pointers from SPD.  */\n+   from SPD.  */\n \n void\n gt_pch_restore_stringpool (void)\n {\n-  unsigned int i;\n-\n-  ident_hash->nslots = spd->nslots;\n-  ident_hash->nelements = spd->nelements;\n-  ident_hash->entries = xrealloc (ident_hash->entries,\n-\t\t\t\t  sizeof (hashnode) * spd->nslots);\n-  for (i = 0; i < spd->nslots; i++)\n-    if (spd->entries[i] != NULL)\n-      ident_hash->entries[i] = GCC_IDENT_TO_HT_IDENT (spd->entries[i]);\n-    else\n-      ident_hash->entries[i] = NULL;\n-\n+  ht_load (ident_hash, spd->entries, spd->nslots, spd->nelements, false);\n   spd = NULL;\n }\n "}, {"sha": "71a449504b047fc1293bc39b5eb9dac1d25f726c", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b453c95fd3fa689a6d70e8878848e5d6531e9ac5/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b453c95fd3fa689a6d70e8878848e5d6531e9ac5/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=b453c95fd3fa689a6d70e8878848e5d6531e9ac5", "patch": "@@ -1,3 +1,10 @@\n+2004-05-29  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* symtab.c (ht_create): Set entries_owned.\n+\t(ht_destroy): Honour entries_owned.\n+\t(ht_expand): Likewise.\n+\t(ht_load): New.\n+\n 2004-05-26  Paolo Bonzini  <bonzini@gnu.org>\n \n \tPR bootstrap/15651"}, {"sha": "a2f4bc5e3ef3c9e3f052c3d14469df8d4c5a78ad", "filename": "libcpp/include/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b453c95fd3fa689a6d70e8878848e5d6531e9ac5/libcpp%2Finclude%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b453c95fd3fa689a6d70e8878848e5d6531e9ac5/libcpp%2Finclude%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2FChangeLog?ref=b453c95fd3fa689a6d70e8878848e5d6531e9ac5", "patch": "@@ -1,3 +1,8 @@\n+2004-05-29  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* symtab.h (struct ht): New field 'entries_owned'\n+\t(ht_load): New prototype.\n+\n 2004-05-23  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* cpplib.h: Moved from gcc.  Change header guard name."}, {"sha": "85e285b419fe351aa5f9680e67c2f90160223065", "filename": "libcpp/include/symtab.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b453c95fd3fa689a6d70e8878848e5d6531e9ac5/libcpp%2Finclude%2Fsymtab.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b453c95fd3fa689a6d70e8878848e5d6531e9ac5/libcpp%2Finclude%2Fsymtab.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fsymtab.h?ref=b453c95fd3fa689a6d70e8878848e5d6531e9ac5", "patch": "@@ -1,5 +1,5 @@\n /* Hash tables.\n-   Copyright (C) 2000, 2001, 2003 Free Software Foundation, Inc.\n+   Copyright (C) 2000, 2001, 2003, 2004 Free Software Foundation, Inc.\n \n This program is free software; you can redistribute it and/or modify it\n under the terms of the GNU General Public License as published by the\n@@ -58,6 +58,9 @@ struct ht\n   /* Table usage statistics.  */\n   unsigned int searches;\n   unsigned int collisions;\n+\n+  /* Should 'entries' be freed when it is no longer needed?  */\n+  bool entries_owned;\n };\n \n /* Initialize the hashtable with 2 ^ order entries.  */\n@@ -75,6 +78,10 @@ extern hashnode ht_lookup (hash_table *, const unsigned char *,\n typedef int (*ht_cb) (struct cpp_reader *, hashnode, const void *);\n extern void ht_forall (hash_table *, ht_cb, const void *);\n \n+/* Restore the hash table.  */\n+extern void ht_load (hash_table *ht, hashnode *entries,\n+\t\t     unsigned int nslots, unsigned int nelements, bool own);\n+\n /* Dump allocation statistics to stderr.  */\n extern void ht_dump_statistics (hash_table *);\n "}, {"sha": "c80dfa25cc0e661e3baa7682183cec70b637a8eb", "filename": "libcpp/symtab.c", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b453c95fd3fa689a6d70e8878848e5d6531e9ac5/libcpp%2Fsymtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b453c95fd3fa689a6d70e8878848e5d6531e9ac5/libcpp%2Fsymtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fsymtab.c?ref=b453c95fd3fa689a6d70e8878848e5d6531e9ac5", "patch": "@@ -1,5 +1,5 @@\n /* Hash tables.\n-   Copyright (C) 2000, 2001, 2003 Free Software Foundation, Inc.\n+   Copyright (C) 2000, 2001, 2003, 2004 Free Software Foundation, Inc.\n \n This program is free software; you can redistribute it and/or modify it\n under the terms of the GNU General Public License as published by the\n@@ -68,6 +68,7 @@ ht_create (unsigned int order)\n   obstack_alignment_mask (&table->stack) = 0;\n \n   table->entries = xcalloc (nslots, sizeof (hashnode));\n+  table->entries_owned = true;\n   table->nslots = nslots;\n   return table;\n }\n@@ -78,7 +79,8 @@ void\n ht_destroy (hash_table *table)\n {\n   obstack_free (&table->stack, NULL);\n-  free (table->entries);\n+  if (table->entries_owned)\n+    free (table->entries);\n   free (table);\n }\n \n@@ -199,7 +201,9 @@ ht_expand (hash_table *table)\n       }\n   while (++p < limit);\n \n-  free (table->entries);\n+  if (table->entries_owned)\n+    free (table->entries);\n+  table->entries_owned = true;\n   table->entries = nentries;\n   table->nslots = size;\n }\n@@ -222,6 +226,20 @@ ht_forall (hash_table *table, ht_cb cb, const void *v)\n   while (++p < limit);\n }\n \n+/* Restore the hash table.  */\n+void\n+ht_load (hash_table *ht, hashnode *entries,\n+\t unsigned int nslots, unsigned int nelements,\n+\t bool own)\n+{\n+  if (ht->entries_owned)\n+    free (ht->entries);\n+  ht->entries = entries;\n+  ht->nslots = nslots;\n+  ht->nelements = nelements;\n+  ht->entries_owned = own;\n+}\n+\n /* Dump allocation statistics to stderr.  */\n \n void"}]}