{"sha": "9ff3e2368d86c1bf7d1e8876a14e58c0d6617ffe", "node_id": "C_kwDOANBUbNoAKDlmZjNlMjM2OGQ4NmMxYmY3ZDFlODg3NmExNGU1OGMwZDY2MTdmZmU", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-01-25T19:10:46Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-01-26T14:43:43Z"}, "message": "analyzer: fix missing uninit warning on args to stdio builtins [PR104224]\n\nWe were failing to check for uninitialized arguments to stdio builtins,\nsuch as when passing local \"go\" to the call to \"printf\" in \"main\" in\nthe testcase.\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/104224\n\t* region-model.cc (region_model::check_call_args): New.\n\t(region_model::on_call_pre): Call it when ignoring stdio builtins.\n\t* region-model.h (region_model::check_call_args): New decl\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/104224\n\t* gcc.dg/analyzer/pr104224.c: New test.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "90324c572a9807d18792fae1ee9d8029aa875206", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90324c572a9807d18792fae1ee9d8029aa875206"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ff3e2368d86c1bf7d1e8876a14e58c0d6617ffe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ff3e2368d86c1bf7d1e8876a14e58c0d6617ffe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ff3e2368d86c1bf7d1e8876a14e58c0d6617ffe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ff3e2368d86c1bf7d1e8876a14e58c0d6617ffe/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e966a508e03fe28bfca65a1e60e579fa90355ea6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e966a508e03fe28bfca65a1e60e579fa90355ea6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e966a508e03fe28bfca65a1e60e579fa90355ea6"}], "stats": {"total": 119, "additions": 119, "deletions": 0}, "files": [{"sha": "a559bc84eb06f667cafb16b0d52338e6b5d3af48", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ff3e2368d86c1bf7d1e8876a14e58c0d6617ffe/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ff3e2368d86c1bf7d1e8876a14e58c0d6617ffe/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=9ff3e2368d86c1bf7d1e8876a14e58c0d6617ffe", "patch": "@@ -1044,6 +1044,16 @@ region_model::on_stmt_pre (const gimple *stmt,\n     }\n }\n \n+/* Ensure that all arguments at the call described by CD are checked\n+   for poisoned values, by calling get_rvalue on each argument.  */\n+\n+void\n+region_model::check_call_args (const call_details &cd) const\n+{\n+  for (unsigned arg_idx = 0; arg_idx < cd.num_args (); arg_idx++)\n+    cd.get_arg_svalue (arg_idx);\n+}\n+\n /* Update this model for the CALL stmt, using CTXT to report any\n    diagnostics - the first half.\n \n@@ -1173,6 +1183,7 @@ region_model::on_call_pre (const gcall *call, region_model_context *ctxt,\n \t    /* These stdio builtins have external effects that are out\n \t       of scope for the analyzer: we only want to model the effects\n \t       on the return value.  */\n+\t    check_call_args (cd);\n \t    break;\n \t  }\n       else if (is_named_call_p (callee_fndecl, \"malloc\", call, 1))"}, {"sha": "40958842bce9921ccb4491dd0ea54de6a0874e3e", "filename": "gcc/analyzer/region-model.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ff3e2368d86c1bf7d1e8876a14e58c0d6617ffe/gcc%2Fanalyzer%2Fregion-model.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ff3e2368d86c1bf7d1e8876a14e58c0d6617ffe/gcc%2Fanalyzer%2Fregion-model.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.h?ref=9ff3e2368d86c1bf7d1e8876a14e58c0d6617ffe", "patch": "@@ -832,6 +832,8 @@ class region_model\n   void check_region_for_read (const region *src_reg,\n \t\t\t      region_model_context *ctxt) const;\n \n+  void check_call_args (const call_details &cd) const;\n+\n   /* Storing this here to avoid passing it around everywhere.  */\n   region_model_manager *const m_mgr;\n "}, {"sha": "8f69d72befae3c21d2cb71038a434070ff951c9f", "filename": "gcc/testsuite/gcc.dg/analyzer/pr104224.c", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ff3e2368d86c1bf7d1e8876a14e58c0d6617ffe/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr104224.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ff3e2368d86c1bf7d1e8876a14e58c0d6617ffe/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr104224.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr104224.c?ref=9ff3e2368d86c1bf7d1e8876a14e58c0d6617ffe", "patch": "@@ -0,0 +1,106 @@\n+#include <stdio.h>\n+\n+struct test {\n+        int one;\n+        int two;\n+};\n+\n+void func2(const struct test *t)\n+{\n+        if (t->one == 0)\n+                printf(\"init func2\\n\");\n+\n+        if (t->two == 0)  /* { dg-warning \"uninitialized\" } */\n+                printf(\"uninit func2\\n\");\n+}\n+\n+void func1(struct test *t)\n+{\n+        t->one = 1;\n+        func2(t);\n+}\n+\n+int func3(int num)\n+{\n+        if (num)\n+                return num;\n+        else\n+                return 0;\n+}\n+\n+void func4(int *a, int max)\n+{\n+        int i;\n+        // skip the first\n+        for (i=1; i<max; i++)\n+                a[i] = 0;\n+}\n+\n+void func5(const int *a, int max)\n+{\n+        /* a[0] is uninitialized, but the rest of the array is initialized.  */\n+        int i;\n+        for (i=0; i<max; i++) {\n+                if (a[i]) /* { dg-warning \"uninitialized\" \"\" { xfail *-*-* } } */\n+                        printf(\"func5: %d\\n\", i);\n+        }\n+}\n+\n+int func6(const int *num)\n+{\n+        if (*num)  /* { dg-warning \"uninitialized\" } */\n+                return *num;  /* { dg-warning \"uninitialized\" } */\n+        else\n+                return 0;\n+}\n+\n+int j;\n+int func7(void)\n+{\n+        return j;  /* { dg-bogus \"uninitialized\" } */\n+}\n+\n+void func8(const int *a, int max)\n+{\n+        int i;\n+        for (i=0; i<max; i++) {\n+                if (a[i]) /* { dg-warning \"uninitialized\" } */\n+                        printf(\"func8: %d\\n\", i);\n+        }\n+}\n+\n+enum {RED, AMBER, GREEN, BLACK};\n+\n+int main(void)\n+{\n+        struct test t;\n+        int num;\n+        int arry[10];\n+        int arry_2[10];\n+        int go;\n+        int color = BLACK;\n+\n+        func1(&t);\n+        func3(num);  /* { dg-warning \"use of uninitialized value 'num'\" } */\n+        func4(arry, 10);\n+        func5(arry, 10);\n+        func6(&num);\n+\n+        printf(\"num: %d\\n\", num);  /* { dg-warning \"use of uninitialized value 'num'\" } */\n+        printf(\"func7: %d\\n\", func7());\n+        func8(arry_2, 10);\n+\n+        switch (color) {\n+        case RED:\n+        case AMBER:\n+                go = 0;\n+                break;\n+        case GREEN:\n+                go = 1;\n+                break;\n+        }\n+\n+        printf(\"go :%d\\n\", go); /* { dg-warning \"use of uninitialized value 'go'\" } */\n+\n+        return 0;\n+}"}]}