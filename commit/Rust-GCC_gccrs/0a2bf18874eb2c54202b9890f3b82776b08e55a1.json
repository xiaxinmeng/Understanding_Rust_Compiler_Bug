{"sha": "0a2bf18874eb2c54202b9890f3b82776b08e55a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGEyYmYxODg3NGViMmM1NDIwMmI5ODkwZjNiODI3NzZiMDhlNTVhMQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-07-14T10:02:10Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-07-14T10:02:10Z"}, "message": "Improve doxygen comments for allocators in containers\n\n\tPR libstdc++/70716\n\t* include/bits/forward_list.h (forward_list): Update doxygen comments\n\tto reflect allocator propagation semantics. Remove ambiguous\n\tstatements about data being lost.\n\t* include/bits/stl_deque.h (deque): Likewise.\n\t* include/bits/stl_list.h (list): Likewise.\n\t* include/bits/stl_map.h (map): Likewise.\n\t* include/bits/stl_multimap.h (multimap): Likewise.\n\t* include/bits/stl_multiset.h (multiset): Likewise.\n\t* include/bits/stl_set.h (set): Likewise.\n\t* include/bits/stl_vector.h (vector): Likewise.\n\t* include/bits/unordered_map.h (unordered_map, unordered_multimap):\n\tLikewise.\n\t* include/bits/unordered_set.h (unordered_set, unordered_multiset):\n\tLikewise.\n\nFrom-SVN: r238332", "tree": {"sha": "1bc2ba891dbef0a2c5498fbcc9d713738a63240e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1bc2ba891dbef0a2c5498fbcc9d713738a63240e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a2bf18874eb2c54202b9890f3b82776b08e55a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a2bf18874eb2c54202b9890f3b82776b08e55a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a2bf18874eb2c54202b9890f3b82776b08e55a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a2bf18874eb2c54202b9890f3b82776b08e55a1/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94c32c00f1c5fdc097cb9c2f891423d5ab2c5326", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94c32c00f1c5fdc097cb9c2f891423d5ab2c5326", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94c32c00f1c5fdc097cb9c2f891423d5ab2c5326"}], "stats": {"total": 182, "additions": 117, "deletions": 65}, "files": [{"sha": "491e0d81a432f6da2594a20598f72ea1227ae247", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a2bf18874eb2c54202b9890f3b82776b08e55a1/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a2bf18874eb2c54202b9890f3b82776b08e55a1/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0a2bf18874eb2c54202b9890f3b82776b08e55a1", "patch": "@@ -1,3 +1,21 @@\n+2016-07-14  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/70716\n+\t* include/bits/forward_list.h (forward_list): Update doxygen comments\n+\tto reflect allocator propagation semantics. Remove ambiguous\n+\tstatements about data being lost.\n+\t* include/bits/stl_deque.h (deque): Likewise.\n+\t* include/bits/stl_list.h (list): Likewise.\n+\t* include/bits/stl_map.h (map): Likewise.\n+\t* include/bits/stl_multimap.h (multimap): Likewise.\n+\t* include/bits/stl_multiset.h (multiset): Likewise.\n+\t* include/bits/stl_set.h (set): Likewise.\n+\t* include/bits/stl_vector.h (vector): Likewise.\n+\t* include/bits/unordered_map.h (unordered_map, unordered_multimap):\n+\tLikewise.\n+\t* include/bits/unordered_set.h (unordered_set, unordered_multiset):\n+\tLikewise.\n+\n 2016-07-14  Ville Voutilainen  <ville.voutilainen@gmail.com>\n \n \tImplement P0032R3, Homogeneous interface for variant, any and optional,"}, {"sha": "39615094131386a539072c2d94b3e09364752efc", "filename": "libstdc++-v3/include/bits/forward_list.h", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a2bf18874eb2c54202b9890f3b82776b08e55a1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a2bf18874eb2c54202b9890f3b82776b08e55a1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h?ref=0a2bf18874eb2c54202b9890f3b82776b08e55a1", "patch": "@@ -566,8 +566,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  @param  __list  A %forward_list of identical element and allocator\n        *                types.\n        *\n-       *  All the elements of @a __list are copied, but unlike the copy\n-       *  constructor, the allocator object is not copied.\n+       *  All the elements of @a __list are copied.\n+       *\n+       *  Whether the allocator is copied depends on the allocator traits.\n        */\n       forward_list&\n       operator=(const forward_list& __list);\n@@ -579,7 +580,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *\n        *  The contents of @a __list are moved into this %forward_list\n        *  (without copying, if the allocators permit it).\n-       *  @a __list is a valid, but unspecified %forward_list\n+       *\n+       *  Afterwards @a __list is a valid, but unspecified %forward_list\n+       *\n+       *  Whether the allocator is moved depends on the allocator traits.\n        */\n       forward_list&\n       operator=(forward_list&& __list)\n@@ -617,7 +621,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *\n        *  Note that the assignment completely changes the %forward_list and\n        *  that the number of elements of the resulting %forward_list is the\n-       *  same as the number of elements assigned.  Old data is lost.\n+       *  same as the number of elements assigned.\n        */\n       template<typename _InputIterator,\n \t       typename = std::_RequireInputIter<_InputIterator>>\n@@ -636,7 +640,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  This function fills a %forward_list with @a __n copies of the\n        *  given value.  Note that the assignment completely changes the\n        *  %forward_list, and that the resulting %forward_list has __n\n-       *  elements.  Old data is lost.\n+       *  elements.\n        */\n       void\n       assign(size_type __n, const _Tp& __val)\n@@ -991,6 +995,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  time.  Note that the global std::swap() function is\n        *  specialized such that std::swap(l1,l2) will feed to this\n        *  function.\n+       *\n+       *  Whether the allocators are swapped depends on the allocator traits.\n        */\n       void\n       swap(forward_list& __list) noexcept"}, {"sha": "7192f65a1c0312d58c89414f0c88f2c2cb48baf9", "filename": "libstdc++-v3/include/bits/stl_deque.h", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a2bf18874eb2c54202b9890f3b82776b08e55a1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a2bf18874eb2c54202b9890f3b82776b08e55a1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h?ref=0a2bf18874eb2c54202b9890f3b82776b08e55a1", "patch": "@@ -939,8 +939,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  @brief  %Deque copy constructor.\n        *  @param  __x  A %deque of identical element and allocator types.\n        *\n-       *  The newly-created %deque uses a copy of the allocation object used\n-       *  by @a __x.\n+       *  The newly-created %deque uses a copy of the allocator object used\n+       *  by @a __x (unless the allocator traits dictate a different object).\n        */\n       deque(const deque& __x)\n       : _Base(_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()),\n@@ -1046,8 +1046,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  @brief  %Deque assignment operator.\n        *  @param  __x  A %deque of identical element and allocator types.\n        *\n-       *  All the elements of @a x are copied, but unlike the copy constructor,\n-       *  the allocator object is not copied.\n+       *  All the elements of @a x are copied.\n+       *\n+       *  The newly-created %deque uses a copy of the allocator object used\n+       *  by @a __x (unless the allocator traits dictate a different object).\n        */\n       deque&\n       operator=(const deque& __x);\n@@ -1078,7 +1080,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *\n        *  Note that the assignment completely changes the %deque and that the\n        *  resulting %deque's size is the same as the number of elements\n-       *  assigned.  Old data may be lost.\n+       *  assigned.\n        */\n       deque&\n       operator=(initializer_list<value_type> __l)\n@@ -1097,7 +1099,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  This function fills a %deque with @a n copies of the given\n        *  value.  Note that the assignment completely changes the\n        *  %deque and that the resulting %deque's size is the same as\n-       *  the number of elements assigned.  Old data may be lost.\n+       *  the number of elements assigned.\n        */\n       void\n       assign(size_type __n, const value_type& __val)\n@@ -1113,7 +1115,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *\n        *  Note that the assignment completely changes the %deque and that the\n        *  resulting %deque's size is the same as the number of elements\n-       *  assigned.  Old data may be lost.\n+       *  assigned.\n        */\n #if __cplusplus >= 201103L\n       template<typename _InputIterator,\n@@ -1141,7 +1143,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *\n        *  Note that the assignment completely changes the %deque and that the\n        *  resulting %deque's size is the same as the number of elements\n-       *  assigned.  Old data may be lost.\n+       *  assigned.\n        */\n       void\n       assign(initializer_list<value_type> __l)\n@@ -1803,6 +1805,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  (Four pointers, so it should be quite fast.)\n        *  Note that the global std::swap() function is specialized such that\n        *  std::swap(d1,d2) will feed to this function.\n+       *\n+       *  Whether the allocators are swapped depends on the allocator traits.\n        */\n       void\n       swap(deque& __x) _GLIBCXX_NOEXCEPT"}, {"sha": "40e2d1862c4d20685ad634ca30adde86abbaa2b3", "filename": "libstdc++-v3/include/bits/stl_list.h", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a2bf18874eb2c54202b9890f3b82776b08e55a1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a2bf18874eb2c54202b9890f3b82776b08e55a1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h?ref=0a2bf18874eb2c54202b9890f3b82776b08e55a1", "patch": "@@ -643,7 +643,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @param  __x  A %list of identical element and allocator types.\n        *\n        *  The newly-created %list uses a copy of the allocation object used\n-       *  by @a __x.\n+       *  by @a __x (unless the allocator traits dictate a different object).\n        */\n       list(const list& __x)\n       : _Base(_Node_alloc_traits::\n@@ -718,20 +718,24 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \t}\n #endif\n \n+#if __cplusplus >= 201103L\n       /**\n        *  No explicit dtor needed as the _Base dtor takes care of\n        *  things.  The _Base dtor only erases the elements, and note\n        *  that if the elements themselves are pointers, the pointed-to\n        *  memory is not touched in any way.  Managing the pointer is\n        *  the user's responsibility.\n        */\n+      ~list() = default;\n+#endif\n \n       /**\n        *  @brief  %List assignment operator.\n        *  @param  __x  A %list of identical element and allocator types.\n        *\n-       *  All the elements of @a __x are copied, but unlike the copy\n-       *  constructor, the allocator object is not copied.\n+       *  All the elements of @a __x are copied.\n+       *\n+       *  Whether the allocator is copied depends on the allocator traits.\n        */\n       list&\n       operator=(const list& __x);\n@@ -742,7 +746,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @param  __x  A %list of identical element and allocator types.\n        *\n        *  The contents of @a __x are moved into this %list (without copying).\n-       *  @a __x is a valid, but unspecified %list\n+       *\n+       *  Afterwards @a __x is a valid, but unspecified %list\n+       *\n+       *  Whether the allocator is moved depends on the allocator traits.\n        */\n       list&\n       operator=(list&& __x)\n@@ -778,7 +785,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  This function fills a %list with @a __n copies of the given\n        *  value.  Note that the assignment completely changes the %list\n        *  and that the resulting %list's size is the same as the number\n-       *  of elements assigned.  Old data may be lost.\n+       *  of elements assigned.\n        */\n       void\n       assign(size_type __n, const value_type& __val)\n@@ -794,7 +801,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *\n        *  Note that the assignment completely changes the %list and\n        *  that the resulting %list's size is the same as the number of\n-       *  elements assigned.  Old data may be lost.\n+       *  elements assigned.\n        */\n #if __cplusplus >= 201103L\n       template<typename _InputIterator,\n@@ -1348,6 +1355,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  time.  Note that the global std::swap() function is\n        *  specialized such that std::swap(l1,l2) will feed to this\n        *  function.\n+       *\n+       *  Whether the allocators are swapped depends on the allocator traits.\n        */\n       void\n       swap(list& __x) _GLIBCXX_NOEXCEPT"}, {"sha": "29bade7298bc08e8f71bbd6c071791ff0c97fd38", "filename": "libstdc++-v3/include/bits/stl_map.h", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a2bf18874eb2c54202b9890f3b82776b08e55a1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a2bf18874eb2c54202b9890f3b82776b08e55a1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h?ref=0a2bf18874eb2c54202b9890f3b82776b08e55a1", "patch": "@@ -179,8 +179,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  @brief  %Map copy constructor.\n        *  @param  __x  A %map of identical element and allocator types.\n        *\n-       *  The newly-created %map uses a copy of the allocation object\n-       *  used by @a __x.\n+       *  The newly-created %map uses a copy of the allocator object used\n+       *  by @a __x (unless the allocator traits dictate a different object).\n        */\n       map(const map& __x)\n       : _M_t(__x._M_t) { }\n@@ -289,8 +289,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  @brief  %Map assignment operator.\n        *  @param  __x  A %map of identical element and allocator types.\n        *\n-       *  All the elements of @a __x are copied, but unlike the copy\n-       *  constructor, the allocator object is not copied.\n+       *  All the elements of @a __x are copied.\n+       *\n+       *  Whether the allocator is copied depends on the allocator traits.\n        */\n       map&\n       operator=(const map& __x)\n@@ -313,7 +314,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *\n        *  Note that the assignment completely changes the %map and\n        *  that the resulting %map's size is the same as the number\n-       *  of elements assigned.  Old data may be lost.\n+       *  of elements assigned.\n        */\n       map&\n       operator=(initializer_list<value_type> __l)\n@@ -1027,6 +1028,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  stateless and empty), so it should be quite fast.)  Note\n        *  that the global std::swap() function is specialized such\n        *  that std::swap(m1,m2) will feed to this function.\n+       *\n+       *  Whether the allocators are swapped depends on the allocator traits.\n        */\n       void\n       swap(map& __x)"}, {"sha": "0bb379fed5f9a3a223e2d9bd79be38b92e74d06b", "filename": "libstdc++-v3/include/bits/stl_multimap.h", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a2bf18874eb2c54202b9890f3b82776b08e55a1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a2bf18874eb2c54202b9890f3b82776b08e55a1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h?ref=0a2bf18874eb2c54202b9890f3b82776b08e55a1", "patch": "@@ -177,8 +177,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  @brief  %Multimap copy constructor.\n        *  @param  __x  A %multimap of identical element and allocator types.\n        *\n-       *  The newly-created %multimap uses a copy of the allocation object\n-       *  used by @a __x.\n+       *  The newly-created %multimap uses a copy of the allocator object used\n+       *  by @a __x (unless the allocator traits dictate a different object).\n        */\n       multimap(const multimap& __x)\n       : _M_t(__x._M_t) { }\n@@ -284,8 +284,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  @brief  %Multimap assignment operator.\n        *  @param  __x  A %multimap of identical element and allocator types.\n        *\n-       *  All the elements of @a __x are copied, but unlike the copy\n-       *  constructor, the allocator object is not copied.\n+       *  All the elements of @a __x are copied.\n+       *\n+       *  Whether the allocator is copied depends on the allocator traits.\n        */\n       multimap&\n       operator=(const multimap& __x)\n@@ -308,7 +309,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *\n        *  Note that the assignment completely changes the %multimap and\n        *  that the resulting %multimap's size is the same as the number\n-       *  of elements assigned.  Old data may be lost.\n+       *  of elements assigned.\n        */\n       multimap&\n       operator=(initializer_list<value_type> __l)\n@@ -701,6 +702,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  should be quite fast.)\n        *  Note that the global std::swap() function is specialized such that\n        *  std::swap(m1,m2) will feed to this function.\n+       *\n+       *  Whether the allocators are swapped depends on the allocator traits.\n        */\n       void\n       swap(multimap& __x)"}, {"sha": "13b253c64c5cc2ac18df29d74a69384b04016847", "filename": "libstdc++-v3/include/bits/stl_multiset.h", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a2bf18874eb2c54202b9890f3b82776b08e55a1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a2bf18874eb2c54202b9890f3b82776b08e55a1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h?ref=0a2bf18874eb2c54202b9890f3b82776b08e55a1", "patch": "@@ -189,8 +189,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  @brief  %Multiset copy constructor.\n        *  @param  __x  A %multiset of identical element and allocator types.\n        *\n-       *  The newly-created %multiset uses a copy of the allocation object used\n-       *  by @a __x.\n+       *  The newly-created %multiset uses a copy of the allocator object used\n+       *  by @a __x (unless the allocator traits dictate a different object).\n        */\n       multiset(const multiset& __x)\n       : _M_t(__x._M_t) { }\n@@ -255,8 +255,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  @brief  %Multiset assignment operator.\n        *  @param  __x  A %multiset of identical element and allocator types.\n        *\n-       *  All the elements of @a __x are copied, but unlike the copy\n-       *  constructor, the allocator object is not copied.\n+       *  All the elements of @a __x are copied.\n+       *\n+       *  Whether the allocator is copied depends on the allocator traits.\n        */\n       multiset&\n       operator=(const multiset& __x)\n@@ -279,7 +280,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *\n        *  Note that the assignment completely changes the %multiset and\n        *  that the resulting %multiset's size is the same as the number\n-       *  of elements assigned.  Old data may be lost.\n+       *  of elements assigned.\n        */\n       multiset&\n       operator=(initializer_list<value_type> __l)\n@@ -403,6 +404,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  be quite fast.)\n        *  Note that the global std::swap() function is specialized such that\n        *  std::swap(s1,s2) will feed to this function.\n+       *\n+       *  Whether the allocators are swapped depends on the allocator traits.\n        */\n       void\n       swap(multiset& __x)"}, {"sha": "c104310f121ca4e1fa214ddabd273b3b02dedbce", "filename": "libstdc++-v3/include/bits/stl_set.h", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a2bf18874eb2c54202b9890f3b82776b08e55a1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a2bf18874eb2c54202b9890f3b82776b08e55a1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h?ref=0a2bf18874eb2c54202b9890f3b82776b08e55a1", "patch": "@@ -193,8 +193,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  @brief  %Set copy constructor.\n        *  @param  __x  A %set of identical element and allocator types.\n        *\n-       *  The newly-created %set uses a copy of the allocation object used\n-       *  by @a __x.\n+       *  The newly-created %set uses a copy of the allocator object used\n+       *  by @a __x (unless the allocator traits dictate a different object).\n        */\n       set(const set& __x)\n       : _M_t(__x._M_t) { }\n@@ -259,8 +259,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  @brief  %Set assignment operator.\n        *  @param  __x  A %set of identical element and allocator types.\n        *\n-       *  All the elements of @a __x are copied, but unlike the copy\n-       *  constructor, the allocator object is not copied.\n+       *  All the elements of @a __x are copied.\n+       *\n+       *  Whether the allocator is copied depends on the allocator traits.\n        */\n       set&\n       operator=(const set& __x)\n@@ -283,7 +284,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *\n        *  Note that the assignment completely changes the %set and\n        *  that the resulting %set's size is the same as the number\n-       *  of elements assigned.  Old data may be lost.\n+       *  of elements assigned.\n        */\n       set&\n       operator=(initializer_list<value_type> __l)\n@@ -407,6 +408,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  stateless and empty), so it should be quite fast.)  Note\n        *  that the global std::swap() function is specialized such\n        *  that std::swap(s1,s2) will feed to this function.\n+       *\n+       *  Whether the allocators are swapped depends on the allocator traits.\n        */\n       void\n       swap(set& __x)"}, {"sha": "9a05dd54f7d69539068646651b398b7e4010451c", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a2bf18874eb2c54202b9890f3b82776b08e55a1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a2bf18874eb2c54202b9890f3b82776b08e55a1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=0a2bf18874eb2c54202b9890f3b82776b08e55a1", "patch": "@@ -314,10 +314,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  @brief  %Vector copy constructor.\n        *  @param  __x  A %vector of identical element and allocator types.\n        *\n-       *  The newly-created %vector uses a copy of the allocation\n-       *  object used by @a __x.  All the elements of @a __x are copied,\n-       *  but any extra memory in\n-       *  @a __x (for fast expansion) will not be copied.\n+       *  All the elements of @a __x are copied, but any unused capacity in\n+       *  @a __x  will not be copied\n+       *  (i.e. capacity() == size() in the new %vector).\n+       *\n+       *  The newly-created %vector uses a copy of the allocator object used\n+       *  by @a __x (unless the allocator traits dictate a different object).\n        */\n       vector(const vector& __x)\n       : _Base(__x.size(),\n@@ -434,9 +436,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  @brief  %Vector assignment operator.\n        *  @param  __x  A %vector of identical element and allocator types.\n        *\n-       *  All the elements of @a __x are copied, but any extra memory in\n-       *  @a __x (for fast expansion) will not be copied.  Unlike the\n-       *  copy constructor, the allocator object is not copied.\n+       *  All the elements of @a __x are copied, but any unused capacity in\n+       *  @a __x will not be copied.\n+       *\n+       *  Whether the allocator is copied depends on the allocator traits.\n        */\n       vector&\n       operator=(const vector& __x);\n@@ -448,7 +451,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *\n        *  The contents of @a __x are moved into this %vector (without copying,\n        *  if the allocators permit it).\n-       *  @a __x is a valid, but unspecified %vector.\n+       *  Afterwards @a __x is a valid, but unspecified %vector.\n+       *\n+       *  Whether the allocator is moved depends on the allocator traits.\n        */\n       vector&\n       operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())\n@@ -469,7 +474,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *\n        *  Note that the assignment completely changes the %vector and\n        *  that the resulting %vector's size is the same as the number\n-       *  of elements assigned.  Old data may be lost.\n+       *  of elements assigned.\n        */\n       vector&\n       operator=(initializer_list<value_type> __l)\n@@ -488,7 +493,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  This function fills a %vector with @a __n copies of the given\n        *  value.  Note that the assignment completely changes the\n        *  %vector and that the resulting %vector's size is the same as\n-       *  the number of elements assigned.  Old data may be lost.\n+       *  the number of elements assigned.\n        */\n       void\n       assign(size_type __n, const value_type& __val)\n@@ -504,7 +509,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *\n        *  Note that the assignment completely changes the %vector and\n        *  that the resulting %vector's size is the same as the number\n-       *  of elements assigned.  Old data may be lost.\n+       *  of elements assigned.\n        */\n #if __cplusplus >= 201103L\n       template<typename _InputIterator,\n@@ -533,7 +538,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *\n        *  Note that the assignment completely changes the %vector and\n        *  that the resulting %vector's size is the same as the number\n-       *  of elements assigned.  Old data may be lost.\n+       *  of elements assigned.\n        */\n       void\n       assign(initializer_list<value_type> __l)\n@@ -1219,6 +1224,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  (Three pointers, so it should be quite fast.)\n        *  Note that the global std::swap() function is specialized such that\n        *  std::swap(v1,v2) will feed to this function.\n+       *\n+       *  Whether the allocators are swapped depends on the allocator traits.\n        */\n       void\n       swap(vector& __x) _GLIBCXX_NOEXCEPT"}, {"sha": "a26ee1afa99db901d7a167195a2fa773f5f8cddb", "filename": "libstdc++-v3/include/bits/unordered_map.h", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a2bf18874eb2c54202b9890f3b82776b08e55a1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a2bf18874eb2c54202b9890f3b82776b08e55a1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_map.h?ref=0a2bf18874eb2c54202b9890f3b82776b08e55a1", "patch": "@@ -274,7 +274,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *\n        *  Note that the assignment completely changes the %unordered_map and\n        *  that the resulting %unordered_map's size is the same as the number\n-       *  of elements assigned.  Old data may be lost.\n+       *  of elements assigned.\n        */\n       unordered_map&\n       operator=(initializer_list<value_type> __l)\n@@ -283,8 +283,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \treturn *this;\n       }\n \n-      ///  Returns the allocator object with which the %unordered_map was\n-      ///  constructed.\n+      ///  Returns the allocator object used by the %unordered_map.\n       allocator_type\n       get_allocator() const noexcept\n       { return _M_h.get_allocator(); }\n@@ -1258,12 +1257,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  @brief  %Unordered_multimap list assignment operator.\n        *  @param  __l  An initializer_list.\n        *\n-       *  This function fills an %unordered_multimap with copies of the elements\n-       *  in the initializer list @a __l.\n+       *  This function fills an %unordered_multimap with copies of the\n+       *  elements in the initializer list @a __l.\n        *\n        *  Note that the assignment completely changes the %unordered_multimap\n        *  and that the resulting %unordered_multimap's size is the same as the\n-       *  number of elements assigned.  Old data may be lost.\n+       *  number of elements assigned.\n        */\n       unordered_multimap&\n       operator=(initializer_list<value_type> __l)\n@@ -1272,8 +1271,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \treturn *this;\n       }\n \n-      ///  Returns the allocator object with which the %unordered_multimap was\n-      ///  constructed.\n+      ///  Returns the allocator object used by the %unordered_multimap.\n       allocator_type\n       get_allocator() const noexcept\n       { return _M_h.get_allocator(); }"}, {"sha": "1e65b5475226784e41f480d19d7c562dc7858b4c", "filename": "libstdc++-v3/include/bits/unordered_set.h", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a2bf18874eb2c54202b9890f3b82776b08e55a1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a2bf18874eb2c54202b9890f3b82776b08e55a1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_set.h?ref=0a2bf18874eb2c54202b9890f3b82776b08e55a1", "patch": "@@ -268,7 +268,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *\n        *  Note that the assignment completely changes the %unordered_set and\n        *  that the resulting %unordered_set's size is the same as the number\n-       *  of elements assigned.  Old data may be lost.\n+       *  of elements assigned.\n        */\n       unordered_set&\n       operator=(initializer_list<value_type> __l)\n@@ -277,8 +277,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \treturn *this;\n       }\n \n-      ///  Returns the allocator object with which the %unordered_set was\n-      ///  constructed.\n+      ///  Returns the allocator object used by the %unordered_set.\n       allocator_type\n       get_allocator() const noexcept\n       { return _M_h.get_allocator(); }\n@@ -942,7 +941,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *\n        *  Note that the assignment completely changes the %unordered_multiset\n        *  and that the resulting %unordered_multiset's size is the same as the\n-       *  number of elements assigned. Old data may be lost.\n+       *  number of elements assigned.\n        */\n       unordered_multiset&\n       operator=(initializer_list<value_type> __l)\n@@ -951,8 +950,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \treturn *this;\n       }\n \n-      ///  Returns the allocator object with which the %unordered_multiset was\n-      ///  constructed.\n+      ///  Returns the allocator object used by the %unordered_multiset.\n       allocator_type\n       get_allocator() const noexcept\n       { return _M_h.get_allocator(); }"}]}