{"sha": "92dd3e71f957c7818f4ce4189bd187b59af20d9b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTJkZDNlNzFmOTU3Yzc4MThmNGNlNDE4OWJkMTg3YjU5YWYyMGQ5Yg==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2021-01-28T10:18:42Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2021-01-30T15:50:57Z"}, "message": "libphobos: Synchronize libdruntime bindings with upstream druntime\n\nReviewed-on: https://github.com/dlang/druntime/pull/3348\n\ngcc/d/ChangeLog:\n\n\t* typeinfo.cc (TypeInfoVisitor::visit (TypeInfoDeclaration *)): Don't\n\tlayout m_arg1 and m_arg2 fields.\n\nlibphobos/ChangeLog:\n\n\t* Makefile.in: Regenerate.\n\t* configure: Regenerate.\n\t* libdruntime/MERGE: Merge upstream druntime e4aae28e.\n\t* libdruntime/Makefile.am (DRUNTIME_DSOURCES): Refresh module list.\n\t(DRUNTIME_DSOURCES_BIONIC): Add core/sys/bionic/err.d.\n\t(DRUNTIME_DSOURCES_DARWIN): Add core/sys/darwin/err.d,\n\tcore/sys/darwin/ifaddrs.d, core/sys/darwin/mach/nlist.d,\n\tcore/sys/darwin/mach/stab.d, and core/sys/darwin/sys/attr.d.\n\t(DRUNTIME_DSOURCES_DRAGONFLYBSD): Add core/sys/dragonflybsd/err.d.\n\t(DRUNTIME_DSOURCES_FREEBSD): Add core/sys/freebsd/err.d.\n\t(DRUNTIME_DSOURCES_LINUX): Add core/sys/linux/err.d.\n\t(DRUNTIME_DSOURCES_NETBSD): Add core/sys/netbsd/err.d.\n\t(DRUNTIME_DSOURCES_OPENBSD): Add core/sys/openbsd/err.d.\n\t(DRUNTIME_DSOURCES_POSIX): Add core/sys/posix/locale.d,\n\tcore/sys/posix/stdc/time.d, core/sys/posix/string.d, and\n\tcore/sys/posix/strings.d.\n\t(DRUNTIME_DSOURCES_SOLARIS): Add core/sys/solaris/err.d.\n\t(DRUNTIME_DSOURCES_WINDOWS): Add core/sys/windows/sdkddkver.d,\n\tand core/sys/windows/stdc/time.d\n\t* libdruntime/Makefile.in: Regenerate.\n\t* libdruntime/gcc/sections/elf_shared.d (sizeofTLS): New function.\n\t* testsuite/libphobos.thread/fiber_guard_page.d: Use\n\t__traits(getMember) to get internal fields.", "tree": {"sha": "b5f4cae41be41fe6716dc656649ca8c35b96d8c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5f4cae41be41fe6716dc656649ca8c35b96d8c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92dd3e71f957c7818f4ce4189bd187b59af20d9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92dd3e71f957c7818f4ce4189bd187b59af20d9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92dd3e71f957c7818f4ce4189bd187b59af20d9b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92dd3e71f957c7818f4ce4189bd187b59af20d9b/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "accc5ba53e0d0c660aa69f16ef32fc05e4439f1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/accc5ba53e0d0c660aa69f16ef32fc05e4439f1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/accc5ba53e0d0c660aa69f16ef32fc05e4439f1f"}], "stats": {"total": 25549, "additions": 13179, "deletions": 12370}, "files": [{"sha": "ec8539deb45402e3b06fc99f2b008230e25e1f71", "filename": "gcc/d/typeinfo.cc", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/gcc%2Fd%2Ftypeinfo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/gcc%2Fd%2Ftypeinfo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Ftypeinfo.cc?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -1013,9 +1013,6 @@ class TypeInfoVisitor : public Visitor\n \tvoid function(void*) xdtor;\n \tvoid function(void*) xpostblit;\n \tuint m_align;\n-\tversion (X86_64)\n-\t    TypeInfo m_arg1;\n-\t    TypeInfo m_arg2;\n \timmutable(void)* xgetRTInfo;  */\n \n   void visit (TypeInfoStructDeclaration *d)\n@@ -1091,19 +1088,6 @@ class TypeInfoVisitor : public Visitor\n     /* uint m_align;  */\n     this->layout_field (build_integer_cst (ti->alignsize (), d_uint_type));\n \n-    if (global.params.is64bit)\n-      {\n-\t/* TypeInfo m_arg1;  */\n-\ttree arg1type = (sd->arg1type) ? build_typeinfo (d->loc, sd->arg1type)\n-\t  : null_pointer_node;\n-\tthis->layout_field (arg1type);\n-\n-\t/* TypeInfo m_arg2;  */\n-\ttree arg2type = (sd->arg2type) ? build_typeinfo (d->loc, sd->arg2type)\n-\t  : null_pointer_node;\n-\tthis->layout_field (arg2type);\n-      }\n-\n     /* immutable(void)* xgetRTInfo;  */\n     if (sd->getRTInfo)\n       this->layout_field (build_expr (sd->getRTInfo, true));"}, {"sha": "d42248405a238427d46265bf8f24b449d98ecaa0", "filename": "libphobos/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2FMakefile.in?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -15,7 +15,7 @@\n @SET_MAKE@\n \n # Makefile for the toplevel directory of the D Standard library.\n-# Copyright (C) 2006-2020 Free Software Foundation, Inc.\n+# Copyright (C) 2006-2021 Free Software Foundation, Inc.\n #\n # GCC is free software; you can redistribute it and/or modify\n # it under the terms of the GNU General Public License as published by"}, {"sha": "c940a404be4d250c9a077368aa49b6fb4dcbefb9", "filename": "libphobos/configure", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fconfigure?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -11746,7 +11746,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11759 \"configure\"\n+#line 11749 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11852,7 +11852,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11865 \"configure\"\n+#line 11855 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H"}, {"sha": "4654e58e2d96c2c1a08414ea47acfe2256fafd33", "filename": "libphobos/libdruntime/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2FMERGE?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -1,4 +1,4 @@\n-0fe7974cf53b75db59461de2a3d6e53ce933d297\n+e4aae28e36c118f13e346a61af6c413aadd8e838\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/druntime repository."}, {"sha": "57de872862ba6da01159b6a58bedd6728773ed6a", "filename": "libphobos/libdruntime/Makefile.am", "status": "modified", "additions": 76, "deletions": 81, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2FMakefile.am?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -178,8 +178,10 @@ DRUNTIME_DSOURCES = core/atomic.d core/attribute.d core/bitop.d \\\n \tcore/stdc/tgmath.d core/stdc/time.d core/stdc/wchar_.d \\\n \tcore/stdc/wctype.d core/sync/barrier.d core/sync/condition.d \\\n \tcore/sync/config.d core/sync/exception.d core/sync/mutex.d \\\n-\tcore/sync/rwmutex.d core/sync/semaphore.d core/thread.d core/time.d \\\n-\tcore/vararg.d gc/bits.d gc/config.d gc/gcinterface.d \\\n+\tcore/sync/rwmutex.d core/sync/semaphore.d core/thread/context.d \\\n+\tcore/thread/fiber.d core/thread/osthread.d core/thread/package.d \\\n+\tcore/thread/threadbase.d core/thread/threadgroup.d core/thread/types.d \\\n+\tcore/time.d core/vararg.d gc/bits.d gc/config.d gc/gcinterface.d \\\n \tgc/impl/conservative/gc.d gc/impl/manual/gc.d gc/os.d gc/pooltable.d \\\n \tgc/proxy.d gcc/attribute.d gcc/backtrace.d gcc/builtins.d gcc/deh.d \\\n \tgcc/emutls.d gcc/gthread.d gcc/sections/android.d \\\n@@ -191,44 +193,33 @@ DRUNTIME_DSOURCES = core/atomic.d core/attribute.d core/bitop.d \\\n \trt/cast_.d rt/config.d rt/critical_.d rt/deh.d rt/dmain2.d \\\n \trt/invariant.d rt/lifetime.d rt/memory.d rt/minfo.d rt/monitor_.d \\\n \trt/obj.d rt/qsort.d rt/sections.d rt/switch_.d rt/tlsgc.d \\\n-\trt/typeinfo/ti_Acdouble.d rt/typeinfo/ti_Acfloat.d \\\n-\trt/typeinfo/ti_Acreal.d rt/typeinfo/ti_Adouble.d \\\n-\trt/typeinfo/ti_Afloat.d rt/typeinfo/ti_Ag.d rt/typeinfo/ti_Aint.d \\\n-\trt/typeinfo/ti_Along.d rt/typeinfo/ti_Areal.d rt/typeinfo/ti_Ashort.d \\\n-\trt/typeinfo/ti_C.d rt/typeinfo/ti_byte.d rt/typeinfo/ti_cdouble.d \\\n-\trt/typeinfo/ti_cent.d rt/typeinfo/ti_cfloat.d rt/typeinfo/ti_char.d \\\n-\trt/typeinfo/ti_creal.d rt/typeinfo/ti_dchar.d \\\n-\trt/typeinfo/ti_delegate.d rt/typeinfo/ti_double.d \\\n-\trt/typeinfo/ti_float.d rt/typeinfo/ti_idouble.d \\\n-\trt/typeinfo/ti_ifloat.d rt/typeinfo/ti_int.d rt/typeinfo/ti_ireal.d \\\n-\trt/typeinfo/ti_long.d rt/typeinfo/ti_n.d rt/typeinfo/ti_ptr.d \\\n-\trt/typeinfo/ti_real.d rt/typeinfo/ti_short.d rt/typeinfo/ti_ubyte.d \\\n-\trt/typeinfo/ti_ucent.d rt/typeinfo/ti_uint.d rt/typeinfo/ti_ulong.d \\\n-\trt/typeinfo/ti_ushort.d rt/typeinfo/ti_void.d rt/typeinfo/ti_wchar.d \\\n \trt/util/array.d rt/util/container/array.d rt/util/container/common.d \\\n \trt/util/container/hashtab.d rt/util/container/treap.d rt/util/random.d \\\n \trt/util/typeinfo.d rt/util/utf.d\n \n DRUNTIME_DSOURCES_STDCXX = core/stdcpp/exception.d \\\n \tcore/stdcpp/typeinfo.d\n \n-DRUNTIME_DSOURCES_BIONIC = core/sys/bionic/fcntl.d \\\n-\tcore/sys/bionic/string.d core/sys/bionic/unistd.d\n+DRUNTIME_DSOURCES_BIONIC = core/sys/bionic/err.d \\\n+\tcore/sys/bionic/fcntl.d core/sys/bionic/string.d \\\n+\tcore/sys/bionic/unistd.d\n \n DRUNTIME_DSOURCES_DARWIN = core/sys/darwin/crt_externs.d \\\n-\tcore/sys/darwin/dlfcn.d core/sys/darwin/execinfo.d \\\n+\tcore/sys/darwin/dlfcn.d core/sys/darwin/err.d \\\n+\tcore/sys/darwin/execinfo.d core/sys/darwin/ifaddrs.d \\\n \tcore/sys/darwin/mach/dyld.d core/sys/darwin/mach/getsect.d \\\n \tcore/sys/darwin/mach/kern_return.d core/sys/darwin/mach/loader.d \\\n-\tcore/sys/darwin/mach/port.d core/sys/darwin/mach/semaphore.d \\\n+\tcore/sys/darwin/mach/nlist.d core/sys/darwin/mach/port.d \\\n+\tcore/sys/darwin/mach/semaphore.d core/sys/darwin/mach/stab.d \\\n \tcore/sys/darwin/mach/thread_act.d core/sys/darwin/netinet/in_.d \\\n \tcore/sys/darwin/pthread.d core/sys/darwin/string.d \\\n-\tcore/sys/darwin/sys/cdefs.d core/sys/darwin/sys/event.d \\\n-\tcore/sys/darwin/sys/mman.d\n+\tcore/sys/darwin/sys/attr.d core/sys/darwin/sys/cdefs.d \\\n+\tcore/sys/darwin/sys/event.d core/sys/darwin/sys/mman.d\n \n DRUNTIME_DSOURCES_DRAGONFLYBSD = core/sys/dragonflybsd/dlfcn.d \\\n-\tcore/sys/dragonflybsd/execinfo.d core/sys/dragonflybsd/netinet/in_.d \\\n-\tcore/sys/dragonflybsd/pthread_np.d core/sys/dragonflybsd/string.d \\\n-\tcore/sys/dragonflybsd/sys/_bitset.d \\\n+\tcore/sys/dragonflybsd/err.d core/sys/dragonflybsd/execinfo.d \\\n+\tcore/sys/dragonflybsd/netinet/in_.d core/sys/dragonflybsd/pthread_np.d \\\n+\tcore/sys/dragonflybsd/string.d core/sys/dragonflybsd/sys/_bitset.d \\\n \tcore/sys/dragonflybsd/sys/_cpuset.d core/sys/dragonflybsd/sys/cdefs.d \\\n \tcore/sys/dragonflybsd/sys/elf.d core/sys/dragonflybsd/sys/elf32.d \\\n \tcore/sys/dragonflybsd/sys/elf64.d \\\n@@ -238,19 +229,20 @@ DRUNTIME_DSOURCES_DRAGONFLYBSD = core/sys/dragonflybsd/dlfcn.d \\\n \tcore/sys/dragonflybsd/time.d\n \n DRUNTIME_DSOURCES_FREEBSD = core/sys/freebsd/config.d \\\n-\tcore/sys/freebsd/dlfcn.d core/sys/freebsd/execinfo.d \\\n-\tcore/sys/freebsd/netinet/in_.d core/sys/freebsd/pthread_np.d \\\n-\tcore/sys/freebsd/string.d core/sys/freebsd/sys/_bitset.d \\\n-\tcore/sys/freebsd/sys/_cpuset.d core/sys/freebsd/sys/cdefs.d \\\n-\tcore/sys/freebsd/sys/elf.d core/sys/freebsd/sys/elf32.d \\\n-\tcore/sys/freebsd/sys/elf64.d core/sys/freebsd/sys/elf_common.d \\\n-\tcore/sys/freebsd/sys/event.d core/sys/freebsd/sys/link_elf.d \\\n-\tcore/sys/freebsd/sys/mman.d core/sys/freebsd/sys/mount.d \\\n-\tcore/sys/freebsd/time.d core/sys/freebsd/unistd.d\n+\tcore/sys/freebsd/dlfcn.d core/sys/freebsd/err.d \\\n+\tcore/sys/freebsd/execinfo.d core/sys/freebsd/netinet/in_.d \\\n+\tcore/sys/freebsd/pthread_np.d core/sys/freebsd/string.d \\\n+\tcore/sys/freebsd/sys/_bitset.d core/sys/freebsd/sys/_cpuset.d \\\n+\tcore/sys/freebsd/sys/cdefs.d core/sys/freebsd/sys/elf.d \\\n+\tcore/sys/freebsd/sys/elf32.d core/sys/freebsd/sys/elf64.d \\\n+\tcore/sys/freebsd/sys/elf_common.d core/sys/freebsd/sys/event.d \\\n+\tcore/sys/freebsd/sys/link_elf.d core/sys/freebsd/sys/mman.d \\\n+\tcore/sys/freebsd/sys/mount.d core/sys/freebsd/time.d \\\n+\tcore/sys/freebsd/unistd.d\n \n DRUNTIME_DSOURCES_LINUX = core/sys/linux/config.d \\\n \tcore/sys/linux/dlfcn.d core/sys/linux/elf.d core/sys/linux/epoll.d \\\n-\tcore/sys/linux/errno.d core/sys/linux/execinfo.d \\\n+\tcore/sys/linux/err.d core/sys/linux/errno.d core/sys/linux/execinfo.d \\\n \tcore/sys/linux/fcntl.d core/sys/linux/ifaddrs.d core/sys/linux/link.d \\\n \tcore/sys/linux/netinet/in_.d core/sys/linux/netinet/tcp.d \\\n \tcore/sys/linux/sched.d core/sys/linux/stdio.d core/sys/linux/string.d \\\n@@ -264,54 +256,56 @@ DRUNTIME_DSOURCES_LINUX = core/sys/linux/config.d \\\n \tcore/sys/linux/unistd.d\n \n DRUNTIME_DSOURCES_NETBSD = core/sys/netbsd/dlfcn.d \\\n-\tcore/sys/netbsd/execinfo.d core/sys/netbsd/string.d \\\n-\tcore/sys/netbsd/sys/elf.d core/sys/netbsd/sys/elf32.d \\\n-\tcore/sys/netbsd/sys/elf64.d core/sys/netbsd/sys/elf_common.d \\\n-\tcore/sys/netbsd/sys/event.d core/sys/netbsd/sys/featuretest.d \\\n-\tcore/sys/netbsd/sys/link_elf.d core/sys/netbsd/sys/mman.d \\\n-\tcore/sys/netbsd/time.d\n+\tcore/sys/netbsd/err.d core/sys/netbsd/execinfo.d \\\n+\tcore/sys/netbsd/string.d core/sys/netbsd/sys/elf.d \\\n+\tcore/sys/netbsd/sys/elf32.d core/sys/netbsd/sys/elf64.d \\\n+\tcore/sys/netbsd/sys/elf_common.d core/sys/netbsd/sys/event.d \\\n+\tcore/sys/netbsd/sys/featuretest.d core/sys/netbsd/sys/link_elf.d \\\n+\tcore/sys/netbsd/sys/mman.d core/sys/netbsd/time.d\n \n DRUNTIME_DSOURCES_OPENBSD = core/sys/openbsd/dlfcn.d \\\n-\tcore/sys/openbsd/string.d core/sys/openbsd/sys/cdefs.d \\\n-\tcore/sys/openbsd/sys/elf.d core/sys/openbsd/sys/elf32.d \\\n-\tcore/sys/openbsd/sys/elf64.d core/sys/openbsd/sys/elf_common.d \\\n-\tcore/sys/openbsd/sys/link_elf.d core/sys/openbsd/sys/mman.d \\\n-\tcore/sys/openbsd/time.d\n+\tcore/sys/openbsd/err.d core/sys/openbsd/string.d \\\n+\tcore/sys/openbsd/sys/cdefs.d core/sys/openbsd/sys/elf.d \\\n+\tcore/sys/openbsd/sys/elf32.d core/sys/openbsd/sys/elf64.d \\\n+\tcore/sys/openbsd/sys/elf_common.d core/sys/openbsd/sys/link_elf.d \\\n+\tcore/sys/openbsd/sys/mman.d core/sys/openbsd/time.d\n \n DRUNTIME_DSOURCES_POSIX = core/sys/posix/aio.d \\\n \tcore/sys/posix/arpa/inet.d core/sys/posix/config.d \\\n \tcore/sys/posix/dirent.d core/sys/posix/dlfcn.d core/sys/posix/fcntl.d \\\n \tcore/sys/posix/grp.d core/sys/posix/iconv.d core/sys/posix/inttypes.d \\\n-\tcore/sys/posix/libgen.d core/sys/posix/mqueue.d \\\n-\tcore/sys/posix/net/if_.d core/sys/posix/netdb.d \\\n-\tcore/sys/posix/netinet/in_.d core/sys/posix/netinet/tcp.d \\\n-\tcore/sys/posix/poll.d core/sys/posix/pthread.d core/sys/posix/pwd.d \\\n-\tcore/sys/posix/sched.d core/sys/posix/semaphore.d \\\n-\tcore/sys/posix/setjmp.d core/sys/posix/signal.d core/sys/posix/spawn.d \\\n-\tcore/sys/posix/stdio.d core/sys/posix/stdlib.d \\\n-\tcore/sys/posix/sys/filio.d core/sys/posix/sys/ioccom.d \\\n-\tcore/sys/posix/sys/ioctl.d core/sys/posix/sys/ipc.d \\\n-\tcore/sys/posix/sys/mman.d core/sys/posix/sys/msg.d \\\n-\tcore/sys/posix/sys/resource.d core/sys/posix/sys/select.d \\\n-\tcore/sys/posix/sys/shm.d core/sys/posix/sys/socket.d \\\n-\tcore/sys/posix/sys/stat.d core/sys/posix/sys/statvfs.d \\\n-\tcore/sys/posix/sys/time.d core/sys/posix/sys/ttycom.d \\\n-\tcore/sys/posix/sys/types.d core/sys/posix/sys/uio.d \\\n-\tcore/sys/posix/sys/un.d core/sys/posix/sys/utsname.d \\\n-\tcore/sys/posix/sys/wait.d core/sys/posix/syslog.d \\\n-\tcore/sys/posix/termios.d core/sys/posix/time.d \\\n+\tcore/sys/posix/libgen.d core/sys/posix/locale.d \\\n+\tcore/sys/posix/mqueue.d core/sys/posix/net/if_.d \\\n+\tcore/sys/posix/netdb.d core/sys/posix/netinet/in_.d \\\n+\tcore/sys/posix/netinet/tcp.d core/sys/posix/poll.d \\\n+\tcore/sys/posix/pthread.d core/sys/posix/pwd.d core/sys/posix/sched.d \\\n+\tcore/sys/posix/semaphore.d core/sys/posix/setjmp.d \\\n+\tcore/sys/posix/signal.d core/sys/posix/spawn.d \\\n+\tcore/sys/posix/stdc/time.d core/sys/posix/stdio.d \\\n+\tcore/sys/posix/stdlib.d core/sys/posix/string.d \\\n+\tcore/sys/posix/strings.d core/sys/posix/sys/filio.d \\\n+\tcore/sys/posix/sys/ioccom.d core/sys/posix/sys/ioctl.d \\\n+\tcore/sys/posix/sys/ipc.d core/sys/posix/sys/mman.d \\\n+\tcore/sys/posix/sys/msg.d core/sys/posix/sys/resource.d \\\n+\tcore/sys/posix/sys/select.d core/sys/posix/sys/shm.d \\\n+\tcore/sys/posix/sys/socket.d core/sys/posix/sys/stat.d \\\n+\tcore/sys/posix/sys/statvfs.d core/sys/posix/sys/time.d \\\n+\tcore/sys/posix/sys/ttycom.d core/sys/posix/sys/types.d \\\n+\tcore/sys/posix/sys/uio.d core/sys/posix/sys/un.d \\\n+\tcore/sys/posix/sys/utsname.d core/sys/posix/sys/wait.d \\\n+\tcore/sys/posix/syslog.d core/sys/posix/termios.d core/sys/posix/time.d \\\n \tcore/sys/posix/ucontext.d core/sys/posix/unistd.d \\\n \tcore/sys/posix/utime.d\n \n DRUNTIME_DSOURCES_SOLARIS = core/sys/solaris/dlfcn.d \\\n-\tcore/sys/solaris/elf.d core/sys/solaris/execinfo.d \\\n-\tcore/sys/solaris/libelf.d core/sys/solaris/link.d \\\n-\tcore/sys/solaris/sys/elf.d core/sys/solaris/sys/elf_386.d \\\n-\tcore/sys/solaris/sys/elf_SPARC.d core/sys/solaris/sys/elf_amd64.d \\\n-\tcore/sys/solaris/sys/elf_notes.d core/sys/solaris/sys/elftypes.d \\\n-\tcore/sys/solaris/sys/link.d core/sys/solaris/sys/priocntl.d \\\n-\tcore/sys/solaris/sys/procset.d core/sys/solaris/sys/types.d \\\n-\tcore/sys/solaris/time.d\n+\tcore/sys/solaris/elf.d core/sys/solaris/err.d \\\n+\tcore/sys/solaris/execinfo.d core/sys/solaris/libelf.d \\\n+\tcore/sys/solaris/link.d core/sys/solaris/sys/elf.d \\\n+\tcore/sys/solaris/sys/elf_386.d core/sys/solaris/sys/elf_SPARC.d \\\n+\tcore/sys/solaris/sys/elf_amd64.d core/sys/solaris/sys/elf_notes.d \\\n+\tcore/sys/solaris/sys/elftypes.d core/sys/solaris/sys/link.d \\\n+\tcore/sys/solaris/sys/priocntl.d core/sys/solaris/sys/procset.d \\\n+\tcore/sys/solaris/sys/types.d core/sys/solaris/time.d\n \n DRUNTIME_DSOURCES_WINDOWS = core/sys/windows/accctrl.d \\\n \tcore/sys/windows/aclapi.d core/sys/windows/aclui.d \\\n@@ -371,15 +365,16 @@ DRUNTIME_DSOURCES_WINDOWS = core/sys/windows/accctrl.d \\\n \tcore/sys/windows/rpcdcep.d core/sys/windows/rpcndr.d \\\n \tcore/sys/windows/rpcnsi.d core/sys/windows/rpcnsip.d \\\n \tcore/sys/windows/rpcnterr.d core/sys/windows/schannel.d \\\n-\tcore/sys/windows/secext.d core/sys/windows/security.d \\\n-\tcore/sys/windows/servprov.d core/sys/windows/setupapi.d \\\n-\tcore/sys/windows/shellapi.d core/sys/windows/shldisp.d \\\n-\tcore/sys/windows/shlguid.d core/sys/windows/shlobj.d \\\n-\tcore/sys/windows/shlwapi.d core/sys/windows/snmp.d \\\n-\tcore/sys/windows/sql.d core/sys/windows/sqlext.d \\\n-\tcore/sys/windows/sqltypes.d core/sys/windows/sqlucode.d \\\n-\tcore/sys/windows/sspi.d core/sys/windows/stacktrace.d \\\n-\tcore/sys/windows/stat.d core/sys/windows/subauth.d \\\n+\tcore/sys/windows/sdkddkver.d core/sys/windows/secext.d \\\n+\tcore/sys/windows/security.d core/sys/windows/servprov.d \\\n+\tcore/sys/windows/setupapi.d core/sys/windows/shellapi.d \\\n+\tcore/sys/windows/shldisp.d core/sys/windows/shlguid.d \\\n+\tcore/sys/windows/shlobj.d core/sys/windows/shlwapi.d \\\n+\tcore/sys/windows/snmp.d core/sys/windows/sql.d \\\n+\tcore/sys/windows/sqlext.d core/sys/windows/sqltypes.d \\\n+\tcore/sys/windows/sqlucode.d core/sys/windows/sspi.d \\\n+\tcore/sys/windows/stacktrace.d core/sys/windows/stat.d \\\n+\tcore/sys/windows/stdc/time.d core/sys/windows/subauth.d \\\n \tcore/sys/windows/threadaux.d core/sys/windows/tlhelp32.d \\\n \tcore/sys/windows/tmschema.d core/sys/windows/unknwn.d \\\n \tcore/sys/windows/uuid.d core/sys/windows/vfw.d \\"}, {"sha": "e1b0a851b67054dbb09cb7f30969e44b9e414b30", "filename": "libphobos/libdruntime/Makefile.in", "status": "modified", "additions": 191, "deletions": 202, "changes": 393, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2FMakefile.in?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -15,7 +15,7 @@\n @SET_MAKE@\n \n # Makefile for the D runtime library.\n-# Copyright (C) 2012-2020 Free Software Foundation, Inc.\n+# Copyright (C) 2012-2021 Free Software Foundation, Inc.\n #\n # GCC is free software; you can redistribute it and/or modify\n # it under the terms of the GNU General Public License as published by\n@@ -202,7 +202,10 @@ am__objects_1 = core/atomic.lo core/attribute.lo core/bitop.lo \\\n \tcore/stdc/wctype.lo core/sync/barrier.lo \\\n \tcore/sync/condition.lo core/sync/config.lo \\\n \tcore/sync/exception.lo core/sync/mutex.lo core/sync/rwmutex.lo \\\n-\tcore/sync/semaphore.lo core/thread.lo core/time.lo \\\n+\tcore/sync/semaphore.lo core/thread/context.lo \\\n+\tcore/thread/fiber.lo core/thread/osthread.lo \\\n+\tcore/thread/package.lo core/thread/threadbase.lo \\\n+\tcore/thread/threadgroup.lo core/thread/types.lo core/time.lo \\\n \tcore/vararg.lo gc/bits.lo gc/config.lo gc/gcinterface.lo \\\n \tgc/impl/conservative/gc.lo gc/impl/manual/gc.lo gc/os.lo \\\n \tgc/pooltable.lo gc/proxy.lo gcc/attribute.lo gcc/backtrace.lo \\\n@@ -217,43 +220,26 @@ am__objects_1 = core/atomic.lo core/attribute.lo core/bitop.lo \\\n \trt/config.lo rt/critical_.lo rt/deh.lo rt/dmain2.lo \\\n \trt/invariant.lo rt/lifetime.lo rt/memory.lo rt/minfo.lo \\\n \trt/monitor_.lo rt/obj.lo rt/qsort.lo rt/sections.lo \\\n-\trt/switch_.lo rt/tlsgc.lo rt/typeinfo/ti_Acdouble.lo \\\n-\trt/typeinfo/ti_Acfloat.lo rt/typeinfo/ti_Acreal.lo \\\n-\trt/typeinfo/ti_Adouble.lo rt/typeinfo/ti_Afloat.lo \\\n-\trt/typeinfo/ti_Ag.lo rt/typeinfo/ti_Aint.lo \\\n-\trt/typeinfo/ti_Along.lo rt/typeinfo/ti_Areal.lo \\\n-\trt/typeinfo/ti_Ashort.lo rt/typeinfo/ti_C.lo \\\n-\trt/typeinfo/ti_byte.lo rt/typeinfo/ti_cdouble.lo \\\n-\trt/typeinfo/ti_cent.lo rt/typeinfo/ti_cfloat.lo \\\n-\trt/typeinfo/ti_char.lo rt/typeinfo/ti_creal.lo \\\n-\trt/typeinfo/ti_dchar.lo rt/typeinfo/ti_delegate.lo \\\n-\trt/typeinfo/ti_double.lo rt/typeinfo/ti_float.lo \\\n-\trt/typeinfo/ti_idouble.lo rt/typeinfo/ti_ifloat.lo \\\n-\trt/typeinfo/ti_int.lo rt/typeinfo/ti_ireal.lo \\\n-\trt/typeinfo/ti_long.lo rt/typeinfo/ti_n.lo \\\n-\trt/typeinfo/ti_ptr.lo rt/typeinfo/ti_real.lo \\\n-\trt/typeinfo/ti_short.lo rt/typeinfo/ti_ubyte.lo \\\n-\trt/typeinfo/ti_ucent.lo rt/typeinfo/ti_uint.lo \\\n-\trt/typeinfo/ti_ulong.lo rt/typeinfo/ti_ushort.lo \\\n-\trt/typeinfo/ti_void.lo rt/typeinfo/ti_wchar.lo \\\n-\trt/util/array.lo rt/util/container/array.lo \\\n-\trt/util/container/common.lo rt/util/container/hashtab.lo \\\n-\trt/util/container/treap.lo rt/util/random.lo \\\n-\trt/util/typeinfo.lo rt/util/utf.lo\n+\trt/switch_.lo rt/tlsgc.lo rt/util/array.lo \\\n+\trt/util/container/array.lo rt/util/container/common.lo \\\n+\trt/util/container/hashtab.lo rt/util/container/treap.lo \\\n+\trt/util/random.lo rt/util/typeinfo.lo rt/util/utf.lo\n am__objects_2 = core/stdc/libgdruntime_la-errno_.lo\n am__objects_3 = core/sys/posix/aio.lo core/sys/posix/arpa/inet.lo \\\n \tcore/sys/posix/config.lo core/sys/posix/dirent.lo \\\n \tcore/sys/posix/dlfcn.lo core/sys/posix/fcntl.lo \\\n \tcore/sys/posix/grp.lo core/sys/posix/iconv.lo \\\n \tcore/sys/posix/inttypes.lo core/sys/posix/libgen.lo \\\n-\tcore/sys/posix/mqueue.lo core/sys/posix/net/if_.lo \\\n-\tcore/sys/posix/netdb.lo core/sys/posix/netinet/in_.lo \\\n-\tcore/sys/posix/netinet/tcp.lo core/sys/posix/poll.lo \\\n-\tcore/sys/posix/pthread.lo core/sys/posix/pwd.lo \\\n-\tcore/sys/posix/sched.lo core/sys/posix/semaphore.lo \\\n-\tcore/sys/posix/setjmp.lo core/sys/posix/signal.lo \\\n-\tcore/sys/posix/spawn.lo core/sys/posix/stdio.lo \\\n-\tcore/sys/posix/stdlib.lo core/sys/posix/sys/filio.lo \\\n+\tcore/sys/posix/locale.lo core/sys/posix/mqueue.lo \\\n+\tcore/sys/posix/net/if_.lo core/sys/posix/netdb.lo \\\n+\tcore/sys/posix/netinet/in_.lo core/sys/posix/netinet/tcp.lo \\\n+\tcore/sys/posix/poll.lo core/sys/posix/pthread.lo \\\n+\tcore/sys/posix/pwd.lo core/sys/posix/sched.lo \\\n+\tcore/sys/posix/semaphore.lo core/sys/posix/setjmp.lo \\\n+\tcore/sys/posix/signal.lo core/sys/posix/spawn.lo \\\n+\tcore/sys/posix/stdc/time.lo core/sys/posix/stdio.lo \\\n+\tcore/sys/posix/stdlib.lo core/sys/posix/string.lo \\\n+\tcore/sys/posix/strings.lo core/sys/posix/sys/filio.lo \\\n \tcore/sys/posix/sys/ioccom.lo core/sys/posix/sys/ioctl.lo \\\n \tcore/sys/posix/sys/ipc.lo core/sys/posix/sys/mman.lo \\\n \tcore/sys/posix/sys/msg.lo core/sys/posix/sys/resource.lo \\\n@@ -268,18 +254,21 @@ am__objects_3 = core/sys/posix/aio.lo core/sys/posix/arpa/inet.lo \\\n \tcore/sys/posix/unistd.lo core/sys/posix/utime.lo\n @DRUNTIME_OS_POSIX_TRUE@am__objects_4 = $(am__objects_3)\n am__objects_5 = core/sys/darwin/crt_externs.lo \\\n-\tcore/sys/darwin/dlfcn.lo core/sys/darwin/execinfo.lo \\\n+\tcore/sys/darwin/dlfcn.lo core/sys/darwin/err.lo \\\n+\tcore/sys/darwin/execinfo.lo core/sys/darwin/ifaddrs.lo \\\n \tcore/sys/darwin/mach/dyld.lo core/sys/darwin/mach/getsect.lo \\\n \tcore/sys/darwin/mach/kern_return.lo \\\n-\tcore/sys/darwin/mach/loader.lo core/sys/darwin/mach/port.lo \\\n-\tcore/sys/darwin/mach/semaphore.lo \\\n+\tcore/sys/darwin/mach/loader.lo core/sys/darwin/mach/nlist.lo \\\n+\tcore/sys/darwin/mach/port.lo core/sys/darwin/mach/semaphore.lo \\\n+\tcore/sys/darwin/mach/stab.lo \\\n \tcore/sys/darwin/mach/thread_act.lo \\\n \tcore/sys/darwin/netinet/in_.lo core/sys/darwin/pthread.lo \\\n-\tcore/sys/darwin/string.lo core/sys/darwin/sys/cdefs.lo \\\n-\tcore/sys/darwin/sys/event.lo core/sys/darwin/sys/mman.lo\n+\tcore/sys/darwin/string.lo core/sys/darwin/sys/attr.lo \\\n+\tcore/sys/darwin/sys/cdefs.lo core/sys/darwin/sys/event.lo \\\n+\tcore/sys/darwin/sys/mman.lo\n @DRUNTIME_OS_DARWIN_TRUE@am__objects_6 = $(am__objects_5)\n am__objects_7 = core/sys/dragonflybsd/dlfcn.lo \\\n-\tcore/sys/dragonflybsd/execinfo.lo \\\n+\tcore/sys/dragonflybsd/err.lo core/sys/dragonflybsd/execinfo.lo \\\n \tcore/sys/dragonflybsd/netinet/in_.lo \\\n \tcore/sys/dragonflybsd/pthread_np.lo \\\n \tcore/sys/dragonflybsd/string.lo \\\n@@ -296,13 +285,13 @@ am__objects_7 = core/sys/dragonflybsd/dlfcn.lo \\\n \tcore/sys/dragonflybsd/sys/socket.lo \\\n \tcore/sys/dragonflybsd/time.lo\n @DRUNTIME_OS_DRAGONFLYBSD_TRUE@am__objects_8 = $(am__objects_7)\n-am__objects_9 = core/sys/bionic/fcntl.lo core/sys/bionic/string.lo \\\n-\tcore/sys/bionic/unistd.lo\n+am__objects_9 = core/sys/bionic/err.lo core/sys/bionic/fcntl.lo \\\n+\tcore/sys/bionic/string.lo core/sys/bionic/unistd.lo\n @DRUNTIME_OS_ANDROID_TRUE@am__objects_10 = $(am__objects_9)\n am__objects_11 = core/sys/freebsd/config.lo core/sys/freebsd/dlfcn.lo \\\n-\tcore/sys/freebsd/execinfo.lo core/sys/freebsd/netinet/in_.lo \\\n-\tcore/sys/freebsd/pthread_np.lo core/sys/freebsd/string.lo \\\n-\tcore/sys/freebsd/sys/_bitset.lo \\\n+\tcore/sys/freebsd/err.lo core/sys/freebsd/execinfo.lo \\\n+\tcore/sys/freebsd/netinet/in_.lo core/sys/freebsd/pthread_np.lo \\\n+\tcore/sys/freebsd/string.lo core/sys/freebsd/sys/_bitset.lo \\\n \tcore/sys/freebsd/sys/_cpuset.lo core/sys/freebsd/sys/cdefs.lo \\\n \tcore/sys/freebsd/sys/elf.lo core/sys/freebsd/sys/elf32.lo \\\n \tcore/sys/freebsd/sys/elf64.lo \\\n@@ -311,36 +300,39 @@ am__objects_11 = core/sys/freebsd/config.lo core/sys/freebsd/dlfcn.lo \\\n \tcore/sys/freebsd/sys/mman.lo core/sys/freebsd/sys/mount.lo \\\n \tcore/sys/freebsd/time.lo core/sys/freebsd/unistd.lo\n @DRUNTIME_OS_FREEBSD_TRUE@am__objects_12 = $(am__objects_11)\n-am__objects_13 = core/sys/netbsd/dlfcn.lo core/sys/netbsd/execinfo.lo \\\n-\tcore/sys/netbsd/string.lo core/sys/netbsd/sys/elf.lo \\\n-\tcore/sys/netbsd/sys/elf32.lo core/sys/netbsd/sys/elf64.lo \\\n-\tcore/sys/netbsd/sys/elf_common.lo core/sys/netbsd/sys/event.lo \\\n+am__objects_13 = core/sys/netbsd/dlfcn.lo core/sys/netbsd/err.lo \\\n+\tcore/sys/netbsd/execinfo.lo core/sys/netbsd/string.lo \\\n+\tcore/sys/netbsd/sys/elf.lo core/sys/netbsd/sys/elf32.lo \\\n+\tcore/sys/netbsd/sys/elf64.lo core/sys/netbsd/sys/elf_common.lo \\\n+\tcore/sys/netbsd/sys/event.lo \\\n \tcore/sys/netbsd/sys/featuretest.lo \\\n \tcore/sys/netbsd/sys/link_elf.lo core/sys/netbsd/sys/mman.lo \\\n \tcore/sys/netbsd/time.lo\n @DRUNTIME_OS_NETBSD_TRUE@am__objects_14 = $(am__objects_13)\n-am__objects_15 = core/sys/openbsd/dlfcn.lo core/sys/openbsd/string.lo \\\n-\tcore/sys/openbsd/sys/cdefs.lo core/sys/openbsd/sys/elf.lo \\\n-\tcore/sys/openbsd/sys/elf32.lo core/sys/openbsd/sys/elf64.lo \\\n+am__objects_15 = core/sys/openbsd/dlfcn.lo core/sys/openbsd/err.lo \\\n+\tcore/sys/openbsd/string.lo core/sys/openbsd/sys/cdefs.lo \\\n+\tcore/sys/openbsd/sys/elf.lo core/sys/openbsd/sys/elf32.lo \\\n+\tcore/sys/openbsd/sys/elf64.lo \\\n \tcore/sys/openbsd/sys/elf_common.lo \\\n \tcore/sys/openbsd/sys/link_elf.lo core/sys/openbsd/sys/mman.lo \\\n \tcore/sys/openbsd/time.lo\n @DRUNTIME_OS_OPENBSD_TRUE@am__objects_16 = $(am__objects_15)\n am__objects_17 = core/sys/linux/config.lo core/sys/linux/dlfcn.lo \\\n \tcore/sys/linux/elf.lo core/sys/linux/epoll.lo \\\n-\tcore/sys/linux/errno.lo core/sys/linux/execinfo.lo \\\n-\tcore/sys/linux/fcntl.lo core/sys/linux/ifaddrs.lo \\\n-\tcore/sys/linux/link.lo core/sys/linux/netinet/in_.lo \\\n-\tcore/sys/linux/netinet/tcp.lo core/sys/linux/sched.lo \\\n-\tcore/sys/linux/stdio.lo core/sys/linux/string.lo \\\n-\tcore/sys/linux/sys/auxv.lo core/sys/linux/sys/eventfd.lo \\\n-\tcore/sys/linux/sys/file.lo core/sys/linux/sys/inotify.lo \\\n-\tcore/sys/linux/sys/mman.lo core/sys/linux/sys/prctl.lo \\\n-\tcore/sys/linux/sys/signalfd.lo core/sys/linux/sys/socket.lo \\\n-\tcore/sys/linux/sys/sysinfo.lo core/sys/linux/sys/time.lo \\\n-\tcore/sys/linux/sys/xattr.lo core/sys/linux/termios.lo \\\n-\tcore/sys/linux/time.lo core/sys/linux/timerfd.lo \\\n-\tcore/sys/linux/tipc.lo core/sys/linux/unistd.lo\n+\tcore/sys/linux/err.lo core/sys/linux/errno.lo \\\n+\tcore/sys/linux/execinfo.lo core/sys/linux/fcntl.lo \\\n+\tcore/sys/linux/ifaddrs.lo core/sys/linux/link.lo \\\n+\tcore/sys/linux/netinet/in_.lo core/sys/linux/netinet/tcp.lo \\\n+\tcore/sys/linux/sched.lo core/sys/linux/stdio.lo \\\n+\tcore/sys/linux/string.lo core/sys/linux/sys/auxv.lo \\\n+\tcore/sys/linux/sys/eventfd.lo core/sys/linux/sys/file.lo \\\n+\tcore/sys/linux/sys/inotify.lo core/sys/linux/sys/mman.lo \\\n+\tcore/sys/linux/sys/prctl.lo core/sys/linux/sys/signalfd.lo \\\n+\tcore/sys/linux/sys/socket.lo core/sys/linux/sys/sysinfo.lo \\\n+\tcore/sys/linux/sys/time.lo core/sys/linux/sys/xattr.lo \\\n+\tcore/sys/linux/termios.lo core/sys/linux/time.lo \\\n+\tcore/sys/linux/timerfd.lo core/sys/linux/tipc.lo \\\n+\tcore/sys/linux/unistd.lo\n @DRUNTIME_OS_LINUX_TRUE@am__objects_18 = $(am__objects_17)\n am__objects_19 = core/sys/windows/accctrl.lo \\\n \tcore/sys/windows/aclapi.lo core/sys/windows/aclui.lo \\\n@@ -400,15 +392,16 @@ am__objects_19 = core/sys/windows/accctrl.lo \\\n \tcore/sys/windows/rpcdce2.lo core/sys/windows/rpcdcep.lo \\\n \tcore/sys/windows/rpcndr.lo core/sys/windows/rpcnsi.lo \\\n \tcore/sys/windows/rpcnsip.lo core/sys/windows/rpcnterr.lo \\\n-\tcore/sys/windows/schannel.lo core/sys/windows/secext.lo \\\n-\tcore/sys/windows/security.lo core/sys/windows/servprov.lo \\\n-\tcore/sys/windows/setupapi.lo core/sys/windows/shellapi.lo \\\n-\tcore/sys/windows/shldisp.lo core/sys/windows/shlguid.lo \\\n-\tcore/sys/windows/shlobj.lo core/sys/windows/shlwapi.lo \\\n-\tcore/sys/windows/snmp.lo core/sys/windows/sql.lo \\\n-\tcore/sys/windows/sqlext.lo core/sys/windows/sqltypes.lo \\\n-\tcore/sys/windows/sqlucode.lo core/sys/windows/sspi.lo \\\n-\tcore/sys/windows/stacktrace.lo core/sys/windows/stat.lo \\\n+\tcore/sys/windows/schannel.lo core/sys/windows/sdkddkver.lo \\\n+\tcore/sys/windows/secext.lo core/sys/windows/security.lo \\\n+\tcore/sys/windows/servprov.lo core/sys/windows/setupapi.lo \\\n+\tcore/sys/windows/shellapi.lo core/sys/windows/shldisp.lo \\\n+\tcore/sys/windows/shlguid.lo core/sys/windows/shlobj.lo \\\n+\tcore/sys/windows/shlwapi.lo core/sys/windows/snmp.lo \\\n+\tcore/sys/windows/sql.lo core/sys/windows/sqlext.lo \\\n+\tcore/sys/windows/sqltypes.lo core/sys/windows/sqlucode.lo \\\n+\tcore/sys/windows/sspi.lo core/sys/windows/stacktrace.lo \\\n+\tcore/sys/windows/stat.lo core/sys/windows/stdc/time.lo \\\n \tcore/sys/windows/subauth.lo core/sys/windows/threadaux.lo \\\n \tcore/sys/windows/tlhelp32.lo core/sys/windows/tmschema.lo \\\n \tcore/sys/windows/unknwn.lo core/sys/windows/uuid.lo \\\n@@ -427,9 +420,9 @@ am__objects_19 = core/sys/windows/accctrl.lo \\\n \tcore/sys/windows/wtsapi32.lo core/sys/windows/wtypes.lo\n @DRUNTIME_OS_MINGW_TRUE@am__objects_20 = $(am__objects_19)\n am__objects_21 = core/sys/solaris/dlfcn.lo core/sys/solaris/elf.lo \\\n-\tcore/sys/solaris/execinfo.lo core/sys/solaris/libelf.lo \\\n-\tcore/sys/solaris/link.lo core/sys/solaris/sys/elf.lo \\\n-\tcore/sys/solaris/sys/elf_386.lo \\\n+\tcore/sys/solaris/err.lo core/sys/solaris/execinfo.lo \\\n+\tcore/sys/solaris/libelf.lo core/sys/solaris/link.lo \\\n+\tcore/sys/solaris/sys/elf.lo core/sys/solaris/sys/elf_386.lo \\\n \tcore/sys/solaris/sys/elf_SPARC.lo \\\n \tcore/sys/solaris/sys/elf_amd64.lo \\\n \tcore/sys/solaris/sys/elf_notes.lo \\\n@@ -803,8 +796,10 @@ DRUNTIME_DSOURCES = core/atomic.d core/attribute.d core/bitop.d \\\n \tcore/stdc/tgmath.d core/stdc/time.d core/stdc/wchar_.d \\\n \tcore/stdc/wctype.d core/sync/barrier.d core/sync/condition.d \\\n \tcore/sync/config.d core/sync/exception.d core/sync/mutex.d \\\n-\tcore/sync/rwmutex.d core/sync/semaphore.d core/thread.d core/time.d \\\n-\tcore/vararg.d gc/bits.d gc/config.d gc/gcinterface.d \\\n+\tcore/sync/rwmutex.d core/sync/semaphore.d core/thread/context.d \\\n+\tcore/thread/fiber.d core/thread/osthread.d core/thread/package.d \\\n+\tcore/thread/threadbase.d core/thread/threadgroup.d core/thread/types.d \\\n+\tcore/time.d core/vararg.d gc/bits.d gc/config.d gc/gcinterface.d \\\n \tgc/impl/conservative/gc.d gc/impl/manual/gc.d gc/os.d gc/pooltable.d \\\n \tgc/proxy.d gcc/attribute.d gcc/backtrace.d gcc/builtins.d gcc/deh.d \\\n \tgcc/emutls.d gcc/gthread.d gcc/sections/android.d \\\n@@ -816,44 +811,33 @@ DRUNTIME_DSOURCES = core/atomic.d core/attribute.d core/bitop.d \\\n \trt/cast_.d rt/config.d rt/critical_.d rt/deh.d rt/dmain2.d \\\n \trt/invariant.d rt/lifetime.d rt/memory.d rt/minfo.d rt/monitor_.d \\\n \trt/obj.d rt/qsort.d rt/sections.d rt/switch_.d rt/tlsgc.d \\\n-\trt/typeinfo/ti_Acdouble.d rt/typeinfo/ti_Acfloat.d \\\n-\trt/typeinfo/ti_Acreal.d rt/typeinfo/ti_Adouble.d \\\n-\trt/typeinfo/ti_Afloat.d rt/typeinfo/ti_Ag.d rt/typeinfo/ti_Aint.d \\\n-\trt/typeinfo/ti_Along.d rt/typeinfo/ti_Areal.d rt/typeinfo/ti_Ashort.d \\\n-\trt/typeinfo/ti_C.d rt/typeinfo/ti_byte.d rt/typeinfo/ti_cdouble.d \\\n-\trt/typeinfo/ti_cent.d rt/typeinfo/ti_cfloat.d rt/typeinfo/ti_char.d \\\n-\trt/typeinfo/ti_creal.d rt/typeinfo/ti_dchar.d \\\n-\trt/typeinfo/ti_delegate.d rt/typeinfo/ti_double.d \\\n-\trt/typeinfo/ti_float.d rt/typeinfo/ti_idouble.d \\\n-\trt/typeinfo/ti_ifloat.d rt/typeinfo/ti_int.d rt/typeinfo/ti_ireal.d \\\n-\trt/typeinfo/ti_long.d rt/typeinfo/ti_n.d rt/typeinfo/ti_ptr.d \\\n-\trt/typeinfo/ti_real.d rt/typeinfo/ti_short.d rt/typeinfo/ti_ubyte.d \\\n-\trt/typeinfo/ti_ucent.d rt/typeinfo/ti_uint.d rt/typeinfo/ti_ulong.d \\\n-\trt/typeinfo/ti_ushort.d rt/typeinfo/ti_void.d rt/typeinfo/ti_wchar.d \\\n \trt/util/array.d rt/util/container/array.d rt/util/container/common.d \\\n \trt/util/container/hashtab.d rt/util/container/treap.d rt/util/random.d \\\n \trt/util/typeinfo.d rt/util/utf.d\n \n DRUNTIME_DSOURCES_STDCXX = core/stdcpp/exception.d \\\n \tcore/stdcpp/typeinfo.d\n \n-DRUNTIME_DSOURCES_BIONIC = core/sys/bionic/fcntl.d \\\n-\tcore/sys/bionic/string.d core/sys/bionic/unistd.d\n+DRUNTIME_DSOURCES_BIONIC = core/sys/bionic/err.d \\\n+\tcore/sys/bionic/fcntl.d core/sys/bionic/string.d \\\n+\tcore/sys/bionic/unistd.d\n \n DRUNTIME_DSOURCES_DARWIN = core/sys/darwin/crt_externs.d \\\n-\tcore/sys/darwin/dlfcn.d core/sys/darwin/execinfo.d \\\n+\tcore/sys/darwin/dlfcn.d core/sys/darwin/err.d \\\n+\tcore/sys/darwin/execinfo.d core/sys/darwin/ifaddrs.d \\\n \tcore/sys/darwin/mach/dyld.d core/sys/darwin/mach/getsect.d \\\n \tcore/sys/darwin/mach/kern_return.d core/sys/darwin/mach/loader.d \\\n-\tcore/sys/darwin/mach/port.d core/sys/darwin/mach/semaphore.d \\\n+\tcore/sys/darwin/mach/nlist.d core/sys/darwin/mach/port.d \\\n+\tcore/sys/darwin/mach/semaphore.d core/sys/darwin/mach/stab.d \\\n \tcore/sys/darwin/mach/thread_act.d core/sys/darwin/netinet/in_.d \\\n \tcore/sys/darwin/pthread.d core/sys/darwin/string.d \\\n-\tcore/sys/darwin/sys/cdefs.d core/sys/darwin/sys/event.d \\\n-\tcore/sys/darwin/sys/mman.d\n+\tcore/sys/darwin/sys/attr.d core/sys/darwin/sys/cdefs.d \\\n+\tcore/sys/darwin/sys/event.d core/sys/darwin/sys/mman.d\n \n DRUNTIME_DSOURCES_DRAGONFLYBSD = core/sys/dragonflybsd/dlfcn.d \\\n-\tcore/sys/dragonflybsd/execinfo.d core/sys/dragonflybsd/netinet/in_.d \\\n-\tcore/sys/dragonflybsd/pthread_np.d core/sys/dragonflybsd/string.d \\\n-\tcore/sys/dragonflybsd/sys/_bitset.d \\\n+\tcore/sys/dragonflybsd/err.d core/sys/dragonflybsd/execinfo.d \\\n+\tcore/sys/dragonflybsd/netinet/in_.d core/sys/dragonflybsd/pthread_np.d \\\n+\tcore/sys/dragonflybsd/string.d core/sys/dragonflybsd/sys/_bitset.d \\\n \tcore/sys/dragonflybsd/sys/_cpuset.d core/sys/dragonflybsd/sys/cdefs.d \\\n \tcore/sys/dragonflybsd/sys/elf.d core/sys/dragonflybsd/sys/elf32.d \\\n \tcore/sys/dragonflybsd/sys/elf64.d \\\n@@ -863,19 +847,20 @@ DRUNTIME_DSOURCES_DRAGONFLYBSD = core/sys/dragonflybsd/dlfcn.d \\\n \tcore/sys/dragonflybsd/time.d\n \n DRUNTIME_DSOURCES_FREEBSD = core/sys/freebsd/config.d \\\n-\tcore/sys/freebsd/dlfcn.d core/sys/freebsd/execinfo.d \\\n-\tcore/sys/freebsd/netinet/in_.d core/sys/freebsd/pthread_np.d \\\n-\tcore/sys/freebsd/string.d core/sys/freebsd/sys/_bitset.d \\\n-\tcore/sys/freebsd/sys/_cpuset.d core/sys/freebsd/sys/cdefs.d \\\n-\tcore/sys/freebsd/sys/elf.d core/sys/freebsd/sys/elf32.d \\\n-\tcore/sys/freebsd/sys/elf64.d core/sys/freebsd/sys/elf_common.d \\\n-\tcore/sys/freebsd/sys/event.d core/sys/freebsd/sys/link_elf.d \\\n-\tcore/sys/freebsd/sys/mman.d core/sys/freebsd/sys/mount.d \\\n-\tcore/sys/freebsd/time.d core/sys/freebsd/unistd.d\n+\tcore/sys/freebsd/dlfcn.d core/sys/freebsd/err.d \\\n+\tcore/sys/freebsd/execinfo.d core/sys/freebsd/netinet/in_.d \\\n+\tcore/sys/freebsd/pthread_np.d core/sys/freebsd/string.d \\\n+\tcore/sys/freebsd/sys/_bitset.d core/sys/freebsd/sys/_cpuset.d \\\n+\tcore/sys/freebsd/sys/cdefs.d core/sys/freebsd/sys/elf.d \\\n+\tcore/sys/freebsd/sys/elf32.d core/sys/freebsd/sys/elf64.d \\\n+\tcore/sys/freebsd/sys/elf_common.d core/sys/freebsd/sys/event.d \\\n+\tcore/sys/freebsd/sys/link_elf.d core/sys/freebsd/sys/mman.d \\\n+\tcore/sys/freebsd/sys/mount.d core/sys/freebsd/time.d \\\n+\tcore/sys/freebsd/unistd.d\n \n DRUNTIME_DSOURCES_LINUX = core/sys/linux/config.d \\\n \tcore/sys/linux/dlfcn.d core/sys/linux/elf.d core/sys/linux/epoll.d \\\n-\tcore/sys/linux/errno.d core/sys/linux/execinfo.d \\\n+\tcore/sys/linux/err.d core/sys/linux/errno.d core/sys/linux/execinfo.d \\\n \tcore/sys/linux/fcntl.d core/sys/linux/ifaddrs.d core/sys/linux/link.d \\\n \tcore/sys/linux/netinet/in_.d core/sys/linux/netinet/tcp.d \\\n \tcore/sys/linux/sched.d core/sys/linux/stdio.d core/sys/linux/string.d \\\n@@ -889,54 +874,56 @@ DRUNTIME_DSOURCES_LINUX = core/sys/linux/config.d \\\n \tcore/sys/linux/unistd.d\n \n DRUNTIME_DSOURCES_NETBSD = core/sys/netbsd/dlfcn.d \\\n-\tcore/sys/netbsd/execinfo.d core/sys/netbsd/string.d \\\n-\tcore/sys/netbsd/sys/elf.d core/sys/netbsd/sys/elf32.d \\\n-\tcore/sys/netbsd/sys/elf64.d core/sys/netbsd/sys/elf_common.d \\\n-\tcore/sys/netbsd/sys/event.d core/sys/netbsd/sys/featuretest.d \\\n-\tcore/sys/netbsd/sys/link_elf.d core/sys/netbsd/sys/mman.d \\\n-\tcore/sys/netbsd/time.d\n+\tcore/sys/netbsd/err.d core/sys/netbsd/execinfo.d \\\n+\tcore/sys/netbsd/string.d core/sys/netbsd/sys/elf.d \\\n+\tcore/sys/netbsd/sys/elf32.d core/sys/netbsd/sys/elf64.d \\\n+\tcore/sys/netbsd/sys/elf_common.d core/sys/netbsd/sys/event.d \\\n+\tcore/sys/netbsd/sys/featuretest.d core/sys/netbsd/sys/link_elf.d \\\n+\tcore/sys/netbsd/sys/mman.d core/sys/netbsd/time.d\n \n DRUNTIME_DSOURCES_OPENBSD = core/sys/openbsd/dlfcn.d \\\n-\tcore/sys/openbsd/string.d core/sys/openbsd/sys/cdefs.d \\\n-\tcore/sys/openbsd/sys/elf.d core/sys/openbsd/sys/elf32.d \\\n-\tcore/sys/openbsd/sys/elf64.d core/sys/openbsd/sys/elf_common.d \\\n-\tcore/sys/openbsd/sys/link_elf.d core/sys/openbsd/sys/mman.d \\\n-\tcore/sys/openbsd/time.d\n+\tcore/sys/openbsd/err.d core/sys/openbsd/string.d \\\n+\tcore/sys/openbsd/sys/cdefs.d core/sys/openbsd/sys/elf.d \\\n+\tcore/sys/openbsd/sys/elf32.d core/sys/openbsd/sys/elf64.d \\\n+\tcore/sys/openbsd/sys/elf_common.d core/sys/openbsd/sys/link_elf.d \\\n+\tcore/sys/openbsd/sys/mman.d core/sys/openbsd/time.d\n \n DRUNTIME_DSOURCES_POSIX = core/sys/posix/aio.d \\\n \tcore/sys/posix/arpa/inet.d core/sys/posix/config.d \\\n \tcore/sys/posix/dirent.d core/sys/posix/dlfcn.d core/sys/posix/fcntl.d \\\n \tcore/sys/posix/grp.d core/sys/posix/iconv.d core/sys/posix/inttypes.d \\\n-\tcore/sys/posix/libgen.d core/sys/posix/mqueue.d \\\n-\tcore/sys/posix/net/if_.d core/sys/posix/netdb.d \\\n-\tcore/sys/posix/netinet/in_.d core/sys/posix/netinet/tcp.d \\\n-\tcore/sys/posix/poll.d core/sys/posix/pthread.d core/sys/posix/pwd.d \\\n-\tcore/sys/posix/sched.d core/sys/posix/semaphore.d \\\n-\tcore/sys/posix/setjmp.d core/sys/posix/signal.d core/sys/posix/spawn.d \\\n-\tcore/sys/posix/stdio.d core/sys/posix/stdlib.d \\\n-\tcore/sys/posix/sys/filio.d core/sys/posix/sys/ioccom.d \\\n-\tcore/sys/posix/sys/ioctl.d core/sys/posix/sys/ipc.d \\\n-\tcore/sys/posix/sys/mman.d core/sys/posix/sys/msg.d \\\n-\tcore/sys/posix/sys/resource.d core/sys/posix/sys/select.d \\\n-\tcore/sys/posix/sys/shm.d core/sys/posix/sys/socket.d \\\n-\tcore/sys/posix/sys/stat.d core/sys/posix/sys/statvfs.d \\\n-\tcore/sys/posix/sys/time.d core/sys/posix/sys/ttycom.d \\\n-\tcore/sys/posix/sys/types.d core/sys/posix/sys/uio.d \\\n-\tcore/sys/posix/sys/un.d core/sys/posix/sys/utsname.d \\\n-\tcore/sys/posix/sys/wait.d core/sys/posix/syslog.d \\\n-\tcore/sys/posix/termios.d core/sys/posix/time.d \\\n+\tcore/sys/posix/libgen.d core/sys/posix/locale.d \\\n+\tcore/sys/posix/mqueue.d core/sys/posix/net/if_.d \\\n+\tcore/sys/posix/netdb.d core/sys/posix/netinet/in_.d \\\n+\tcore/sys/posix/netinet/tcp.d core/sys/posix/poll.d \\\n+\tcore/sys/posix/pthread.d core/sys/posix/pwd.d core/sys/posix/sched.d \\\n+\tcore/sys/posix/semaphore.d core/sys/posix/setjmp.d \\\n+\tcore/sys/posix/signal.d core/sys/posix/spawn.d \\\n+\tcore/sys/posix/stdc/time.d core/sys/posix/stdio.d \\\n+\tcore/sys/posix/stdlib.d core/sys/posix/string.d \\\n+\tcore/sys/posix/strings.d core/sys/posix/sys/filio.d \\\n+\tcore/sys/posix/sys/ioccom.d core/sys/posix/sys/ioctl.d \\\n+\tcore/sys/posix/sys/ipc.d core/sys/posix/sys/mman.d \\\n+\tcore/sys/posix/sys/msg.d core/sys/posix/sys/resource.d \\\n+\tcore/sys/posix/sys/select.d core/sys/posix/sys/shm.d \\\n+\tcore/sys/posix/sys/socket.d core/sys/posix/sys/stat.d \\\n+\tcore/sys/posix/sys/statvfs.d core/sys/posix/sys/time.d \\\n+\tcore/sys/posix/sys/ttycom.d core/sys/posix/sys/types.d \\\n+\tcore/sys/posix/sys/uio.d core/sys/posix/sys/un.d \\\n+\tcore/sys/posix/sys/utsname.d core/sys/posix/sys/wait.d \\\n+\tcore/sys/posix/syslog.d core/sys/posix/termios.d core/sys/posix/time.d \\\n \tcore/sys/posix/ucontext.d core/sys/posix/unistd.d \\\n \tcore/sys/posix/utime.d\n \n DRUNTIME_DSOURCES_SOLARIS = core/sys/solaris/dlfcn.d \\\n-\tcore/sys/solaris/elf.d core/sys/solaris/execinfo.d \\\n-\tcore/sys/solaris/libelf.d core/sys/solaris/link.d \\\n-\tcore/sys/solaris/sys/elf.d core/sys/solaris/sys/elf_386.d \\\n-\tcore/sys/solaris/sys/elf_SPARC.d core/sys/solaris/sys/elf_amd64.d \\\n-\tcore/sys/solaris/sys/elf_notes.d core/sys/solaris/sys/elftypes.d \\\n-\tcore/sys/solaris/sys/link.d core/sys/solaris/sys/priocntl.d \\\n-\tcore/sys/solaris/sys/procset.d core/sys/solaris/sys/types.d \\\n-\tcore/sys/solaris/time.d\n+\tcore/sys/solaris/elf.d core/sys/solaris/err.d \\\n+\tcore/sys/solaris/execinfo.d core/sys/solaris/libelf.d \\\n+\tcore/sys/solaris/link.d core/sys/solaris/sys/elf.d \\\n+\tcore/sys/solaris/sys/elf_386.d core/sys/solaris/sys/elf_SPARC.d \\\n+\tcore/sys/solaris/sys/elf_amd64.d core/sys/solaris/sys/elf_notes.d \\\n+\tcore/sys/solaris/sys/elftypes.d core/sys/solaris/sys/link.d \\\n+\tcore/sys/solaris/sys/priocntl.d core/sys/solaris/sys/procset.d \\\n+\tcore/sys/solaris/sys/types.d core/sys/solaris/time.d\n \n DRUNTIME_DSOURCES_WINDOWS = core/sys/windows/accctrl.d \\\n \tcore/sys/windows/aclapi.d core/sys/windows/aclui.d \\\n@@ -996,15 +983,16 @@ DRUNTIME_DSOURCES_WINDOWS = core/sys/windows/accctrl.d \\\n \tcore/sys/windows/rpcdcep.d core/sys/windows/rpcndr.d \\\n \tcore/sys/windows/rpcnsi.d core/sys/windows/rpcnsip.d \\\n \tcore/sys/windows/rpcnterr.d core/sys/windows/schannel.d \\\n-\tcore/sys/windows/secext.d core/sys/windows/security.d \\\n-\tcore/sys/windows/servprov.d core/sys/windows/setupapi.d \\\n-\tcore/sys/windows/shellapi.d core/sys/windows/shldisp.d \\\n-\tcore/sys/windows/shlguid.d core/sys/windows/shlobj.d \\\n-\tcore/sys/windows/shlwapi.d core/sys/windows/snmp.d \\\n-\tcore/sys/windows/sql.d core/sys/windows/sqlext.d \\\n-\tcore/sys/windows/sqltypes.d core/sys/windows/sqlucode.d \\\n-\tcore/sys/windows/sspi.d core/sys/windows/stacktrace.d \\\n-\tcore/sys/windows/stat.d core/sys/windows/subauth.d \\\n+\tcore/sys/windows/sdkddkver.d core/sys/windows/secext.d \\\n+\tcore/sys/windows/security.d core/sys/windows/servprov.d \\\n+\tcore/sys/windows/setupapi.d core/sys/windows/shellapi.d \\\n+\tcore/sys/windows/shldisp.d core/sys/windows/shlguid.d \\\n+\tcore/sys/windows/shlobj.d core/sys/windows/shlwapi.d \\\n+\tcore/sys/windows/snmp.d core/sys/windows/sql.d \\\n+\tcore/sys/windows/sqlext.d core/sys/windows/sqltypes.d \\\n+\tcore/sys/windows/sqlucode.d core/sys/windows/sspi.d \\\n+\tcore/sys/windows/stacktrace.d core/sys/windows/stat.d \\\n+\tcore/sys/windows/stdc/time.d core/sys/windows/subauth.d \\\n \tcore/sys/windows/threadaux.d core/sys/windows/tlhelp32.d \\\n \tcore/sys/windows/tmschema.d core/sys/windows/unknwn.d \\\n \tcore/sys/windows/uuid.d core/sys/windows/vfw.d \\\n@@ -1162,7 +1150,16 @@ core/sync/exception.lo: core/sync/$(am__dirstamp)\n core/sync/mutex.lo: core/sync/$(am__dirstamp)\n core/sync/rwmutex.lo: core/sync/$(am__dirstamp)\n core/sync/semaphore.lo: core/sync/$(am__dirstamp)\n-core/thread.lo: core/$(am__dirstamp)\n+core/thread/$(am__dirstamp):\n+\t@$(MKDIR_P) core/thread\n+\t@: > core/thread/$(am__dirstamp)\n+core/thread/context.lo: core/thread/$(am__dirstamp)\n+core/thread/fiber.lo: core/thread/$(am__dirstamp)\n+core/thread/osthread.lo: core/thread/$(am__dirstamp)\n+core/thread/package.lo: core/thread/$(am__dirstamp)\n+core/thread/threadbase.lo: core/thread/$(am__dirstamp)\n+core/thread/threadgroup.lo: core/thread/$(am__dirstamp)\n+core/thread/types.lo: core/thread/$(am__dirstamp)\n core/time.lo: core/$(am__dirstamp)\n core/vararg.lo: core/$(am__dirstamp)\n gc/$(am__dirstamp):\n@@ -1234,46 +1231,6 @@ rt/qsort.lo: rt/$(am__dirstamp)\n rt/sections.lo: rt/$(am__dirstamp)\n rt/switch_.lo: rt/$(am__dirstamp)\n rt/tlsgc.lo: rt/$(am__dirstamp)\n-rt/typeinfo/$(am__dirstamp):\n-\t@$(MKDIR_P) rt/typeinfo\n-\t@: > rt/typeinfo/$(am__dirstamp)\n-rt/typeinfo/ti_Acdouble.lo: rt/typeinfo/$(am__dirstamp)\n-rt/typeinfo/ti_Acfloat.lo: rt/typeinfo/$(am__dirstamp)\n-rt/typeinfo/ti_Acreal.lo: rt/typeinfo/$(am__dirstamp)\n-rt/typeinfo/ti_Adouble.lo: rt/typeinfo/$(am__dirstamp)\n-rt/typeinfo/ti_Afloat.lo: rt/typeinfo/$(am__dirstamp)\n-rt/typeinfo/ti_Ag.lo: rt/typeinfo/$(am__dirstamp)\n-rt/typeinfo/ti_Aint.lo: rt/typeinfo/$(am__dirstamp)\n-rt/typeinfo/ti_Along.lo: rt/typeinfo/$(am__dirstamp)\n-rt/typeinfo/ti_Areal.lo: rt/typeinfo/$(am__dirstamp)\n-rt/typeinfo/ti_Ashort.lo: rt/typeinfo/$(am__dirstamp)\n-rt/typeinfo/ti_C.lo: rt/typeinfo/$(am__dirstamp)\n-rt/typeinfo/ti_byte.lo: rt/typeinfo/$(am__dirstamp)\n-rt/typeinfo/ti_cdouble.lo: rt/typeinfo/$(am__dirstamp)\n-rt/typeinfo/ti_cent.lo: rt/typeinfo/$(am__dirstamp)\n-rt/typeinfo/ti_cfloat.lo: rt/typeinfo/$(am__dirstamp)\n-rt/typeinfo/ti_char.lo: rt/typeinfo/$(am__dirstamp)\n-rt/typeinfo/ti_creal.lo: rt/typeinfo/$(am__dirstamp)\n-rt/typeinfo/ti_dchar.lo: rt/typeinfo/$(am__dirstamp)\n-rt/typeinfo/ti_delegate.lo: rt/typeinfo/$(am__dirstamp)\n-rt/typeinfo/ti_double.lo: rt/typeinfo/$(am__dirstamp)\n-rt/typeinfo/ti_float.lo: rt/typeinfo/$(am__dirstamp)\n-rt/typeinfo/ti_idouble.lo: rt/typeinfo/$(am__dirstamp)\n-rt/typeinfo/ti_ifloat.lo: rt/typeinfo/$(am__dirstamp)\n-rt/typeinfo/ti_int.lo: rt/typeinfo/$(am__dirstamp)\n-rt/typeinfo/ti_ireal.lo: rt/typeinfo/$(am__dirstamp)\n-rt/typeinfo/ti_long.lo: rt/typeinfo/$(am__dirstamp)\n-rt/typeinfo/ti_n.lo: rt/typeinfo/$(am__dirstamp)\n-rt/typeinfo/ti_ptr.lo: rt/typeinfo/$(am__dirstamp)\n-rt/typeinfo/ti_real.lo: rt/typeinfo/$(am__dirstamp)\n-rt/typeinfo/ti_short.lo: rt/typeinfo/$(am__dirstamp)\n-rt/typeinfo/ti_ubyte.lo: rt/typeinfo/$(am__dirstamp)\n-rt/typeinfo/ti_ucent.lo: rt/typeinfo/$(am__dirstamp)\n-rt/typeinfo/ti_uint.lo: rt/typeinfo/$(am__dirstamp)\n-rt/typeinfo/ti_ulong.lo: rt/typeinfo/$(am__dirstamp)\n-rt/typeinfo/ti_ushort.lo: rt/typeinfo/$(am__dirstamp)\n-rt/typeinfo/ti_void.lo: rt/typeinfo/$(am__dirstamp)\n-rt/typeinfo/ti_wchar.lo: rt/typeinfo/$(am__dirstamp)\n rt/util/$(am__dirstamp):\n \t@$(MKDIR_P) rt/util\n \t@: > rt/util/$(am__dirstamp)\n@@ -1305,6 +1262,7 @@ core/sys/posix/grp.lo: core/sys/posix/$(am__dirstamp)\n core/sys/posix/iconv.lo: core/sys/posix/$(am__dirstamp)\n core/sys/posix/inttypes.lo: core/sys/posix/$(am__dirstamp)\n core/sys/posix/libgen.lo: core/sys/posix/$(am__dirstamp)\n+core/sys/posix/locale.lo: core/sys/posix/$(am__dirstamp)\n core/sys/posix/mqueue.lo: core/sys/posix/$(am__dirstamp)\n core/sys/posix/net/$(am__dirstamp):\n \t@$(MKDIR_P) core/sys/posix/net\n@@ -1324,8 +1282,14 @@ core/sys/posix/semaphore.lo: core/sys/posix/$(am__dirstamp)\n core/sys/posix/setjmp.lo: core/sys/posix/$(am__dirstamp)\n core/sys/posix/signal.lo: core/sys/posix/$(am__dirstamp)\n core/sys/posix/spawn.lo: core/sys/posix/$(am__dirstamp)\n+core/sys/posix/stdc/$(am__dirstamp):\n+\t@$(MKDIR_P) core/sys/posix/stdc\n+\t@: > core/sys/posix/stdc/$(am__dirstamp)\n+core/sys/posix/stdc/time.lo: core/sys/posix/stdc/$(am__dirstamp)\n core/sys/posix/stdio.lo: core/sys/posix/$(am__dirstamp)\n core/sys/posix/stdlib.lo: core/sys/posix/$(am__dirstamp)\n+core/sys/posix/string.lo: core/sys/posix/$(am__dirstamp)\n+core/sys/posix/strings.lo: core/sys/posix/$(am__dirstamp)\n core/sys/posix/sys/$(am__dirstamp):\n \t@$(MKDIR_P) core/sys/posix/sys\n \t@: > core/sys/posix/sys/$(am__dirstamp)\n@@ -1359,7 +1323,9 @@ core/sys/darwin/$(am__dirstamp):\n \t@: > core/sys/darwin/$(am__dirstamp)\n core/sys/darwin/crt_externs.lo: core/sys/darwin/$(am__dirstamp)\n core/sys/darwin/dlfcn.lo: core/sys/darwin/$(am__dirstamp)\n+core/sys/darwin/err.lo: core/sys/darwin/$(am__dirstamp)\n core/sys/darwin/execinfo.lo: core/sys/darwin/$(am__dirstamp)\n+core/sys/darwin/ifaddrs.lo: core/sys/darwin/$(am__dirstamp)\n core/sys/darwin/mach/$(am__dirstamp):\n \t@$(MKDIR_P) core/sys/darwin/mach\n \t@: > core/sys/darwin/mach/$(am__dirstamp)\n@@ -1368,9 +1334,11 @@ core/sys/darwin/mach/getsect.lo: core/sys/darwin/mach/$(am__dirstamp)\n core/sys/darwin/mach/kern_return.lo:  \\\n \tcore/sys/darwin/mach/$(am__dirstamp)\n core/sys/darwin/mach/loader.lo: core/sys/darwin/mach/$(am__dirstamp)\n+core/sys/darwin/mach/nlist.lo: core/sys/darwin/mach/$(am__dirstamp)\n core/sys/darwin/mach/port.lo: core/sys/darwin/mach/$(am__dirstamp)\n core/sys/darwin/mach/semaphore.lo:  \\\n \tcore/sys/darwin/mach/$(am__dirstamp)\n+core/sys/darwin/mach/stab.lo: core/sys/darwin/mach/$(am__dirstamp)\n core/sys/darwin/mach/thread_act.lo:  \\\n \tcore/sys/darwin/mach/$(am__dirstamp)\n core/sys/darwin/netinet/$(am__dirstamp):\n@@ -1383,13 +1351,15 @@ core/sys/darwin/string.lo: core/sys/darwin/$(am__dirstamp)\n core/sys/darwin/sys/$(am__dirstamp):\n \t@$(MKDIR_P) core/sys/darwin/sys\n \t@: > core/sys/darwin/sys/$(am__dirstamp)\n+core/sys/darwin/sys/attr.lo: core/sys/darwin/sys/$(am__dirstamp)\n core/sys/darwin/sys/cdefs.lo: core/sys/darwin/sys/$(am__dirstamp)\n core/sys/darwin/sys/event.lo: core/sys/darwin/sys/$(am__dirstamp)\n core/sys/darwin/sys/mman.lo: core/sys/darwin/sys/$(am__dirstamp)\n core/sys/dragonflybsd/$(am__dirstamp):\n \t@$(MKDIR_P) core/sys/dragonflybsd\n \t@: > core/sys/dragonflybsd/$(am__dirstamp)\n core/sys/dragonflybsd/dlfcn.lo: core/sys/dragonflybsd/$(am__dirstamp)\n+core/sys/dragonflybsd/err.lo: core/sys/dragonflybsd/$(am__dirstamp)\n core/sys/dragonflybsd/execinfo.lo:  \\\n \tcore/sys/dragonflybsd/$(am__dirstamp)\n core/sys/dragonflybsd/netinet/$(am__dirstamp):\n@@ -1430,6 +1400,7 @@ core/sys/dragonflybsd/time.lo: core/sys/dragonflybsd/$(am__dirstamp)\n core/sys/bionic/$(am__dirstamp):\n \t@$(MKDIR_P) core/sys/bionic\n \t@: > core/sys/bionic/$(am__dirstamp)\n+core/sys/bionic/err.lo: core/sys/bionic/$(am__dirstamp)\n core/sys/bionic/fcntl.lo: core/sys/bionic/$(am__dirstamp)\n core/sys/bionic/string.lo: core/sys/bionic/$(am__dirstamp)\n core/sys/bionic/unistd.lo: core/sys/bionic/$(am__dirstamp)\n@@ -1438,6 +1409,7 @@ core/sys/freebsd/$(am__dirstamp):\n \t@: > core/sys/freebsd/$(am__dirstamp)\n core/sys/freebsd/config.lo: core/sys/freebsd/$(am__dirstamp)\n core/sys/freebsd/dlfcn.lo: core/sys/freebsd/$(am__dirstamp)\n+core/sys/freebsd/err.lo: core/sys/freebsd/$(am__dirstamp)\n core/sys/freebsd/execinfo.lo: core/sys/freebsd/$(am__dirstamp)\n core/sys/freebsd/netinet/$(am__dirstamp):\n \t@$(MKDIR_P) core/sys/freebsd/netinet\n@@ -1468,6 +1440,7 @@ core/sys/netbsd/$(am__dirstamp):\n \t@$(MKDIR_P) core/sys/netbsd\n \t@: > core/sys/netbsd/$(am__dirstamp)\n core/sys/netbsd/dlfcn.lo: core/sys/netbsd/$(am__dirstamp)\n+core/sys/netbsd/err.lo: core/sys/netbsd/$(am__dirstamp)\n core/sys/netbsd/execinfo.lo: core/sys/netbsd/$(am__dirstamp)\n core/sys/netbsd/string.lo: core/sys/netbsd/$(am__dirstamp)\n core/sys/netbsd/sys/$(am__dirstamp):\n@@ -1488,6 +1461,7 @@ core/sys/openbsd/$(am__dirstamp):\n \t@$(MKDIR_P) core/sys/openbsd\n \t@: > core/sys/openbsd/$(am__dirstamp)\n core/sys/openbsd/dlfcn.lo: core/sys/openbsd/$(am__dirstamp)\n+core/sys/openbsd/err.lo: core/sys/openbsd/$(am__dirstamp)\n core/sys/openbsd/string.lo: core/sys/openbsd/$(am__dirstamp)\n core/sys/openbsd/sys/$(am__dirstamp):\n \t@$(MKDIR_P) core/sys/openbsd/sys\n@@ -1509,6 +1483,7 @@ core/sys/linux/config.lo: core/sys/linux/$(am__dirstamp)\n core/sys/linux/dlfcn.lo: core/sys/linux/$(am__dirstamp)\n core/sys/linux/elf.lo: core/sys/linux/$(am__dirstamp)\n core/sys/linux/epoll.lo: core/sys/linux/$(am__dirstamp)\n+core/sys/linux/err.lo: core/sys/linux/$(am__dirstamp)\n core/sys/linux/errno.lo: core/sys/linux/$(am__dirstamp)\n core/sys/linux/execinfo.lo: core/sys/linux/$(am__dirstamp)\n core/sys/linux/fcntl.lo: core/sys/linux/$(am__dirstamp)\n@@ -1660,6 +1635,7 @@ core/sys/windows/rpcnsi.lo: core/sys/windows/$(am__dirstamp)\n core/sys/windows/rpcnsip.lo: core/sys/windows/$(am__dirstamp)\n core/sys/windows/rpcnterr.lo: core/sys/windows/$(am__dirstamp)\n core/sys/windows/schannel.lo: core/sys/windows/$(am__dirstamp)\n+core/sys/windows/sdkddkver.lo: core/sys/windows/$(am__dirstamp)\n core/sys/windows/secext.lo: core/sys/windows/$(am__dirstamp)\n core/sys/windows/security.lo: core/sys/windows/$(am__dirstamp)\n core/sys/windows/servprov.lo: core/sys/windows/$(am__dirstamp)\n@@ -1677,6 +1653,10 @@ core/sys/windows/sqlucode.lo: core/sys/windows/$(am__dirstamp)\n core/sys/windows/sspi.lo: core/sys/windows/$(am__dirstamp)\n core/sys/windows/stacktrace.lo: core/sys/windows/$(am__dirstamp)\n core/sys/windows/stat.lo: core/sys/windows/$(am__dirstamp)\n+core/sys/windows/stdc/$(am__dirstamp):\n+\t@$(MKDIR_P) core/sys/windows/stdc\n+\t@: > core/sys/windows/stdc/$(am__dirstamp)\n+core/sys/windows/stdc/time.lo: core/sys/windows/stdc/$(am__dirstamp)\n core/sys/windows/subauth.lo: core/sys/windows/$(am__dirstamp)\n core/sys/windows/threadaux.lo: core/sys/windows/$(am__dirstamp)\n core/sys/windows/tlhelp32.lo: core/sys/windows/$(am__dirstamp)\n@@ -1714,6 +1694,7 @@ core/sys/solaris/$(am__dirstamp):\n \t@: > core/sys/solaris/$(am__dirstamp)\n core/sys/solaris/dlfcn.lo: core/sys/solaris/$(am__dirstamp)\n core/sys/solaris/elf.lo: core/sys/solaris/$(am__dirstamp)\n+core/sys/solaris/err.lo: core/sys/solaris/$(am__dirstamp)\n core/sys/solaris/execinfo.lo: core/sys/solaris/$(am__dirstamp)\n core/sys/solaris/libelf.lo: core/sys/solaris/$(am__dirstamp)\n core/sys/solaris/link.lo: core/sys/solaris/$(am__dirstamp)\n@@ -1873,6 +1854,8 @@ mostlyclean-compile:\n \t-rm -f core/sys/posix/net/*.lo\n \t-rm -f core/sys/posix/netinet/*.$(OBJEXT)\n \t-rm -f core/sys/posix/netinet/*.lo\n+\t-rm -f core/sys/posix/stdc/*.$(OBJEXT)\n+\t-rm -f core/sys/posix/stdc/*.lo\n \t-rm -f core/sys/posix/sys/*.$(OBJEXT)\n \t-rm -f core/sys/posix/sys/*.lo\n \t-rm -f core/sys/solaris/*.$(OBJEXT)\n@@ -1881,6 +1864,10 @@ mostlyclean-compile:\n \t-rm -f core/sys/solaris/sys/*.lo\n \t-rm -f core/sys/windows/*.$(OBJEXT)\n \t-rm -f core/sys/windows/*.lo\n+\t-rm -f core/sys/windows/stdc/*.$(OBJEXT)\n+\t-rm -f core/sys/windows/stdc/*.lo\n+\t-rm -f core/thread/*.$(OBJEXT)\n+\t-rm -f core/thread/*.lo\n \t-rm -f gc/*.$(OBJEXT)\n \t-rm -f gc/*.lo\n \t-rm -f gc/impl/conservative/*.$(OBJEXT)\n@@ -1895,8 +1882,6 @@ mostlyclean-compile:\n \t-rm -f gcc/unwind/*.lo\n \t-rm -f rt/*.$(OBJEXT)\n \t-rm -f rt/*.lo\n-\t-rm -f rt/typeinfo/*.$(OBJEXT)\n-\t-rm -f rt/typeinfo/*.lo\n \t-rm -f rt/util/*.$(OBJEXT)\n \t-rm -f rt/util/*.lo\n \t-rm -f rt/util/container/*.$(OBJEXT)\n@@ -2016,18 +2001,20 @@ clean-libtool:\n \t-rm -rf core/sys/posix/arpa/.libs core/sys/posix/arpa/_libs\n \t-rm -rf core/sys/posix/net/.libs core/sys/posix/net/_libs\n \t-rm -rf core/sys/posix/netinet/.libs core/sys/posix/netinet/_libs\n+\t-rm -rf core/sys/posix/stdc/.libs core/sys/posix/stdc/_libs\n \t-rm -rf core/sys/posix/sys/.libs core/sys/posix/sys/_libs\n \t-rm -rf core/sys/solaris/.libs core/sys/solaris/_libs\n \t-rm -rf core/sys/solaris/sys/.libs core/sys/solaris/sys/_libs\n \t-rm -rf core/sys/windows/.libs core/sys/windows/_libs\n+\t-rm -rf core/sys/windows/stdc/.libs core/sys/windows/stdc/_libs\n+\t-rm -rf core/thread/.libs core/thread/_libs\n \t-rm -rf gc/.libs gc/_libs\n \t-rm -rf gc/impl/conservative/.libs gc/impl/conservative/_libs\n \t-rm -rf gc/impl/manual/.libs gc/impl/manual/_libs\n \t-rm -rf gcc/.libs gcc/_libs\n \t-rm -rf gcc/sections/.libs gcc/sections/_libs\n \t-rm -rf gcc/unwind/.libs gcc/unwind/_libs\n \t-rm -rf rt/.libs rt/_libs\n-\t-rm -rf rt/typeinfo/.libs rt/typeinfo/_libs\n \t-rm -rf rt/util/.libs rt/util/_libs\n \t-rm -rf rt/util/container/.libs rt/util/container/_libs\n install-toolexeclibDATA: $(toolexeclib_DATA)\n@@ -2170,18 +2157,20 @@ distclean-generic:\n \t-rm -f core/sys/posix/arpa/$(am__dirstamp)\n \t-rm -f core/sys/posix/net/$(am__dirstamp)\n \t-rm -f core/sys/posix/netinet/$(am__dirstamp)\n+\t-rm -f core/sys/posix/stdc/$(am__dirstamp)\n \t-rm -f core/sys/posix/sys/$(am__dirstamp)\n \t-rm -f core/sys/solaris/$(am__dirstamp)\n \t-rm -f core/sys/solaris/sys/$(am__dirstamp)\n \t-rm -f core/sys/windows/$(am__dirstamp)\n+\t-rm -f core/sys/windows/stdc/$(am__dirstamp)\n+\t-rm -f core/thread/$(am__dirstamp)\n \t-rm -f gc/$(am__dirstamp)\n \t-rm -f gc/impl/conservative/$(am__dirstamp)\n \t-rm -f gc/impl/manual/$(am__dirstamp)\n \t-rm -f gcc/$(am__dirstamp)\n \t-rm -f gcc/sections/$(am__dirstamp)\n \t-rm -f gcc/unwind/$(am__dirstamp)\n \t-rm -f rt/$(am__dirstamp)\n-\t-rm -f rt/typeinfo/$(am__dirstamp)\n \t-rm -f rt/util/$(am__dirstamp)\n \t-rm -f rt/util/container/$(am__dirstamp)\n "}, {"sha": "8ee1684d146bb6b816ff79d15593d9eb804eb621", "filename": "libphobos/libdruntime/core/internal/abort.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Finternal%2Fabort.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Finternal%2Fabort.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Finternal%2Fabort.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -4,7 +4,7 @@ module core.internal.abort;\n  * Use instead of assert(0, msg), since this does not print a message for -release compiled\n  * code, and druntime is -release compiled.\n  */\n-void abort(string msg, string filename = __FILE__, size_t line = __LINE__) @nogc nothrow @safe\n+void abort(scope string msg, scope string filename = __FILE__, size_t line = __LINE__) @nogc nothrow @safe\n {\n     import core.stdc.stdlib: c_abort = abort;\n     // use available OS system calls to print the message to stderr"}, {"sha": "d878366b3bdd66e0e30865760ce12ce4c21e57d0", "filename": "libphobos/libdruntime/core/stdc/complex.d", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fcomplex.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fcomplex.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fcomplex.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -149,14 +149,14 @@ creal   csqrtl(creal z);\n  ///\n  real   cargl(creal z);\n \n- ///\n- double cimag(cdouble z);\n- ///\n- float  cimagf(cfloat z);\n- ///\n- real   cimagl(creal z);\n+///\n+pragma(inline, true) double cimag(cdouble z) { return z.im; }\n+///\n+pragma(inline, true) float  cimagf(cfloat z) { return z.im; }\n+///\n+pragma(inline, true) real   cimagl(creal z)  { return z.im; }\n \n- ///\n+///\n cdouble conj(cdouble z);\n ///\n cfloat  conjf(cfloat z);\n@@ -170,8 +170,12 @@ cfloat  cprojf(cfloat z);\n ///\n creal   cprojl(creal z);\n \n-// double creal(cdouble z);\n+// Note: `creal` is a keyword in D and so this function is inaccessible, use `creald` instead\n+//pragma(inline, true) double creal(cdouble z) { return z.re; }\n+\n ///\n- float  crealf(cfloat z);\n- ///\n- real   creall(creal z);\n+pragma(inline, true) double creald(cdouble z) { return z.re; }\n+///\n+pragma(inline, true) float  crealf(cfloat z) { return z.re; }\n+///\n+pragma(inline, true) real   creall(creal z)  { return z.re; }"}, {"sha": "31f7d11c762dc93b8d5a9327d3c2291785034595", "filename": "libphobos/libdruntime/core/stdc/errno.d", "status": "modified", "additions": 122, "deletions": 122, "changes": 244, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Ferrno.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Ferrno.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Ferrno.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -1639,128 +1639,128 @@ else version (DragonFlyBSD)\n }\n else version (Solaris)\n {\n-    enum EPERM =  1       /** Not super-user                       */;\n-    enum ENOENT = 2       /** No such file or directory            */;\n-    enum ESRCH =  3       /** No such process                      */;\n-    enum EINTR =  4       /** interrupted system call              */;\n-    enum EIO =    5       /** I/O error                            */;\n-    enum ENXIO =  6       /** No such device or address            */;\n-    enum E2BIG =  7       /** Arg list too long                    */;\n-    enum ENOEXEC = 8       /** Exec format error                    */;\n-    enum EBADF =  9       /** Bad file number                      */;\n-    enum ECHILD = 10      /** No children                          */;\n-    enum EAGAIN = 11      /** Resource temporarily unavailable     */;\n-    enum ENOMEM = 12      /** Not enough core                      */;\n-    enum EACCES = 13      /** Permission denied                    */;\n-    enum EFAULT = 14      /** Bad address                          */;\n-    enum ENOTBLK = 15      /** Block device required                */;\n-    enum EBUSY =  16      /** Mount device busy                    */;\n-    enum EEXIST = 17      /** File exists                          */;\n-    enum EXDEV =  18      /** Cross-device link                    */;\n-    enum ENODEV = 19      /** No such device                       */;\n-    enum ENOTDIR = 20      /** Not a directory                      */;\n-    enum EISDIR = 21      /** Is a directory                       */;\n-    enum EINVAL = 22      /** Invalid argument                     */;\n-    enum ENFILE = 23      /** File table overflow                  */;\n-    enum EMFILE = 24      /** Too many open files                  */;\n-    enum ENOTTY = 25      /** Inappropriate ioctl for device       */;\n-    enum ETXTBSY = 26      /** Text file busy                       */;\n-    enum EFBIG =  27      /** File too large                       */;\n-    enum ENOSPC = 28      /** No space left on device              */;\n-    enum ESPIPE = 29      /** Illegal seek                         */;\n-    enum EROFS =  30      /** Read only file system                */;\n-    enum EMLINK = 31      /** Too many links                       */;\n-    enum EPIPE =  32      /** Broken pipe                          */;\n-    enum EDOM =   33      /** Math arg out of domain of func       */;\n-    enum ERANGE = 34      /** Math result not representable        */;\n-    enum ENOMSG = 35      /** No message of desired type           */;\n-    enum EIDRM =  36      /** Identifier removed                   */;\n-    enum ECHRNG = 37      /** Channel number out of range          */;\n-    enum EL2NSYNC = 38     /** Level 2 not synchronized             */;\n-    enum EL3HLT = 39      /** Level 3 halted                       */;\n-    enum EL3RST = 40      /** Level 3 reset                        */;\n-    enum ELNRNG = 41      /** Link number out of range             */;\n-    enum EUNATCH = 42      /** Protocol driver not attached         */;\n-    enum ENOCSI = 43      /** No CSI structure available           */;\n-    enum EL2HLT = 44      /** Level 2 halted                       */;\n-    enum EDEADLK = 45      /** Deadlock condition.                  */;\n-    enum ENOLCK = 46      /** No record locks available.           */;\n-    enum ECANCELED = 47    /** Operation canceled                   */;\n-    enum ENOTSUP = 48      /** Operation not supported              */;\n-    enum EDQUOT = 49      /** Disc quota exceeded                  */;\n-    enum EBADE =  50      /** invalid exchange                     */;\n-    enum EBADR =  51      /** invalid request descriptor           */;\n-    enum EXFULL = 52      /** exchange full                        */;\n-    enum ENOANO = 53      /** no anode                             */;\n-    enum EBADRQC = 54      /** invalid request code                 */;\n-    enum EBADSLT = 55      /** invalid slot                         */;\n-    enum EDEADLOCK = 56    /** file locking deadlock error          */;\n-    enum EBFONT = 57      /** bad font file fmt                    */;\n-    enum EOWNERDEAD =     58      /** process died with the lock */;\n-    enum ENOTRECOVERABLE = 59      /** lock is not recoverable */;\n-    enum ENOSTR = 60      /** Device not a stream                  */;\n-    enum ENODATA = 61      /** no data (for no delay io)            */;\n-    enum ETIME =  62      /** timer expired                        */;\n-    enum ENOSR =  63      /** out of streams resources             */;\n-    enum ENONET = 64      /** Machine is not on the network        */;\n-    enum ENOPKG = 65      /** Package not installed                */;\n-    enum EREMOTE = 66      /** The object is remote                 */;\n-    enum ENOLINK = 67      /** the link has been severed            */;\n-    enum EADV =   68      /** advertise error                      */;\n-    enum ESRMNT = 69      /** srmount error                        */;\n-    enum ECOMM =  70      /** Communication error on send          */;\n-    enum EPROTO = 71      /** Protocol error                       */;\n-    enum ELOCKUNMAPPED =  72      /** locked lock was unmapped */;\n-    enum ENOTACTIVE = 73   /** Facility is not active               */;\n-    enum EMULTIHOP = 74    /** multihop attempted                   */;\n-    enum EBADMSG = 77      /** trying to read unreadable message    */;\n-    enum ENAMETOOLONG = 78 /** path name is too long                */;\n-    enum EOVERFLOW = 79    /** value too large to be stored in data type */;\n-    enum ENOTUNIQ = 80     /** given log. name not unique           */;\n-    enum EBADFD =  81      /** f.d. invalid for this operation      */;\n-    enum EREMCHG = 82      /** Remote address changed               */;\n-    enum ELIBACC = 83      /** Can't access a needed shared lib.    */;\n-    enum ELIBBAD = 84      /** Accessing a corrupted shared lib.    */;\n-    enum ELIBSCN = 85      /** .lib section in a.out corrupted.     */;\n-    enum ELIBMAX = 86      /** Attempting to link in too many libs. */;\n-    enum ELIBEXEC = 87     /** Attempting to exec a shared library. */;\n-    enum EILSEQ = 88      /** Illegal byte sequence.               */;\n-    enum ENOSYS = 89      /** Unsupported file system operation    */;\n-    enum ELOOP =  90      /** Symbolic link loop                   */;\n-    enum ERESTART = 91     /** Restartable system call              */;\n-    enum ESTRPIPE = 92     /** if pipe/FIFO, don't sleep in stream head */;\n-    enum ENOTEMPTY = 93    /** directory not empty                  */;\n-    enum EUSERS = 94      /** Too many users (for UFS)             */;\n-    enum ENOTSOCK =       95      /** Socket operation on non-socket */;\n-    enum EDESTADDRREQ =   96      /** Destination address required */;\n-    enum EMSGSIZE =       97      /** Message too long */;\n-    enum EPROTOTYPE =     98      /** Protocol wrong type for socket */;\n-    enum ENOPROTOOPT =    99      /** Protocol not available */;\n-    enum EPROTONOSUPPORT = 120     /** Protocol not supported */;\n-    enum ESOCKTNOSUPPORT = 121     /** Socket type not supported */;\n-    enum EOPNOTSUPP =     122     /** Operation not supported on socket */;\n-    enum EPFNOSUPPORT =   123     /** Protocol family not supported */;\n-    enum EAFNOSUPPORT =   124     /** Address family not supported by the protocol family */;\n-    enum EADDRINUSE =     125     /** Address already in use */;\n-    enum EADDRNOTAVAIL =   126     /** Can't assign requested address */;\n-    enum ENETDOWN =       127     /** Network is down */;\n-    enum ENETUNREACH =    128     /** Network is unreachable */;\n-    enum ENETRESET =      129     /** Network dropped connection because of reset */;\n-    enum ECONNABORTED =   130     /** Software caused connection abort */;\n-    enum ECONNRESET =     131     /** Connection reset by peer */;\n-    enum ENOBUFS =        132     /** No buffer space available */;\n-    enum EISCONN =        133     /** Socket is already connected */;\n-    enum ENOTCONN =       134     /** Socket is not connected */;\n-    enum ESHUTDOWN =      143     /** Can't send after socket shutdown */;\n-    enum ETOOMANYREFS =   144     /** Too many references: can't splice */;\n-    enum ETIMEDOUT =      145     /** Connection timed out */;\n-    enum ECONNREFUSED =   146     /** Connection refused */;\n-    enum EHOSTDOWN =      147     /** Host is down */;\n-    enum EHOSTUNREACH =   148     /** No route to host */;\n-    enum EWOULDBLOCK =    EAGAIN;      /** Resource temporarily unavailable     */;\n-    enum EALREADY =       149     /** operation already in progress */;\n-    enum EINPROGRESS =    150     /** operation now in progress */;\n-    enum ESTALE =         151     /** Stale NFS file handle */;\n+    enum EPERM =  1;              ///  Not super-user\n+    enum ENOENT = 2;              ///  No such file or directory\n+    enum ESRCH =  3;              ///  No such process\n+    enum EINTR =  4;              ///  interrupted system call\n+    enum EIO =    5;              ///  I/O error\n+    enum ENXIO =  6;              ///  No such device or address\n+    enum E2BIG =  7;              ///  Arg list too long\n+    enum ENOEXEC = 8;             ///  Exec format error\n+    enum EBADF =  9;              ///  Bad file number\n+    enum ECHILD = 10;             ///  No children\n+    enum EAGAIN = 11;             ///  Resource temporarily unavailable\n+    enum ENOMEM = 12;             ///  Not enough core\n+    enum EACCES = 13;             ///  Permission denied\n+    enum EFAULT = 14;             ///  Bad address\n+    enum ENOTBLK = 15;            ///  Block device required\n+    enum EBUSY =  16;             ///  Mount device busy\n+    enum EEXIST = 17;             ///  File exists\n+    enum EXDEV =  18;             ///  Cross-device link\n+    enum ENODEV = 19;             ///  No such device\n+    enum ENOTDIR = 20;            ///  Not a directory\n+    enum EISDIR = 21;             ///  Is a directory\n+    enum EINVAL = 22;             ///  Invalid argument\n+    enum ENFILE = 23;             ///  File table overflow\n+    enum EMFILE = 24;             ///  Too many open files\n+    enum ENOTTY = 25;             ///  Inappropriate ioctl for device\n+    enum ETXTBSY = 26;            ///  Text file busy\n+    enum EFBIG =  27;             ///  File too large\n+    enum ENOSPC = 28;             ///  No space left on device\n+    enum ESPIPE = 29;             ///  Illegal seek\n+    enum EROFS =  30;             ///  Read only file system\n+    enum EMLINK = 31;             ///  Too many links\n+    enum EPIPE =  32;             ///  Broken pipe\n+    enum EDOM =   33;             ///  Math arg out of domain of func\n+    enum ERANGE = 34;             ///  Math result not representable\n+    enum ENOMSG = 35;             ///  No message of desired type\n+    enum EIDRM =  36;             ///  Identifier removed\n+    enum ECHRNG = 37;             ///  Channel number out of range\n+    enum EL2NSYNC = 38;           ///  Level 2 not synchronized\n+    enum EL3HLT = 39;             ///  Level 3 halted\n+    enum EL3RST = 40;             ///  Level 3 reset\n+    enum ELNRNG = 41;             ///  Link number out of range\n+    enum EUNATCH = 42;            ///  Protocol driver not attached\n+    enum ENOCSI = 43;             ///  No CSI structure available\n+    enum EL2HLT = 44;             ///  Level 2 halted\n+    enum EDEADLK = 45;            ///  Deadlock condition.\n+    enum ENOLCK = 46;             ///  No record locks available.\n+    enum ECANCELED = 47;          ///  Operation canceled\n+    enum ENOTSUP = 48;            ///  Operation not supported\n+    enum EDQUOT = 49;             ///  Disc quota exceeded\n+    enum EBADE =  50;             ///  invalid exchange\n+    enum EBADR =  51;             ///  invalid request descriptor\n+    enum EXFULL = 52;             ///  exchange full\n+    enum ENOANO = 53;             ///  no anode\n+    enum EBADRQC = 54;            ///  invalid request code\n+    enum EBADSLT = 55;            ///  invalid slot\n+    enum EDEADLOCK = 56;          ///  file locking deadlock error\n+    enum EBFONT = 57;             ///  bad font file fmt\n+    enum EOWNERDEAD =     58;     ///  process died with the lock\n+    enum ENOTRECOVERABLE = 59;    ///  lock is not recoverable\n+    enum ENOSTR = 60;             ///  Device not a stream\n+    enum ENODATA = 61;            ///  no data (for no delay io)\n+    enum ETIME =  62;             ///  timer expired\n+    enum ENOSR =  63;             ///  out of streams resources\n+    enum ENONET = 64;             ///  Machine is not on the network\n+    enum ENOPKG = 65;             ///  Package not installed\n+    enum EREMOTE = 66;            ///  The object is remote\n+    enum ENOLINK = 67;            ///  the link has been severed\n+    enum EADV =   68;             ///  advertise error\n+    enum ESRMNT = 69;             ///  srmount error\n+    enum ECOMM =  70;             ///  Communication error on send\n+    enum EPROTO = 71;             ///  Protocol error\n+    enum ELOCKUNMAPPED =  72;     ///  locked lock was unmapped\n+    enum ENOTACTIVE = 73;         ///  Facility is not active\n+    enum EMULTIHOP = 74;          ///  multihop attempted\n+    enum EBADMSG = 77;            ///  trying to read unreadable message\n+    enum ENAMETOOLONG = 78;       ///  path name is too long\n+    enum EOVERFLOW = 79;          ///  value too large to be stored in data type\n+    enum ENOTUNIQ = 80;           ///  given log. name not unique\n+    enum EBADFD =  81;            ///  f.d. invalid for this operation\n+    enum EREMCHG = 82;            ///  Remote address changed\n+    enum ELIBACC = 83;            ///  Can't access a needed shared lib.\n+    enum ELIBBAD = 84;            ///  Accessing a corrupted shared lib.\n+    enum ELIBSCN = 85;            ///  .lib section in a.out corrupted.\n+    enum ELIBMAX = 86;            ///  Attempting to link in too many libs.\n+    enum ELIBEXEC = 87;           ///  Attempting to exec a shared library.\n+    enum EILSEQ = 88;             ///  Illegal byte sequence.\n+    enum ENOSYS = 89;             ///  Unsupported file system operation\n+    enum ELOOP =  90;             ///  Symbolic link loop\n+    enum ERESTART = 91;           ///  Restartable system call\n+    enum ESTRPIPE = 92;           ///  if pipe/FIFO, don't sleep in stream head\n+    enum ENOTEMPTY = 93;          ///  directory not empty\n+    enum EUSERS = 94;             ///  Too many users (for UFS)\n+    enum ENOTSOCK =       95;     ///  Socket operation on non-socket\n+    enum EDESTADDRREQ =   96;     ///  Destination address required\n+    enum EMSGSIZE =       97;     ///  Message too long\n+    enum EPROTOTYPE =     98;     ///  Protocol wrong type for socket\n+    enum ENOPROTOOPT =    99;     ///  Protocol not available\n+    enum EPROTONOSUPPORT = 120;   ///  Protocol not supported\n+    enum ESOCKTNOSUPPORT = 121;   ///  Socket type not supported\n+    enum EOPNOTSUPP =     122;    ///  Operation not supported on socket\n+    enum EPFNOSUPPORT =   123;    ///  Protocol family not supported\n+    enum EAFNOSUPPORT =   124;    ///  Address family not supported by the protocol family\n+    enum EADDRINUSE =     125;    ///  Address already in use\n+    enum EADDRNOTAVAIL =   126;   ///  Can't assign requested address\n+    enum ENETDOWN =       127;    ///  Network is down\n+    enum ENETUNREACH =    128;    ///  Network is unreachable\n+    enum ENETRESET =      129;    ///  Network dropped connection because of reset\n+    enum ECONNABORTED =   130;    ///  Software caused connection abort\n+    enum ECONNRESET =     131;    ///  Connection reset by peer\n+    enum ENOBUFS =        132;    ///  No buffer space available\n+    enum EISCONN =        133;    ///  Socket is already connected\n+    enum ENOTCONN =       134;    ///  Socket is not connected\n+    enum ESHUTDOWN =      143;    ///  Can't send after socket shutdown\n+    enum ETOOMANYREFS =   144;    ///  Too many references: can't splice\n+    enum ETIMEDOUT =      145;    ///  Connection timed out\n+    enum ECONNREFUSED =   146;    ///  Connection refused\n+    enum EHOSTDOWN =      147;    ///  Host is down\n+    enum EHOSTUNREACH =   148;    ///  No route to host\n+    enum EWOULDBLOCK =    EAGAIN; ///  Resource temporarily unavailable\n+    enum EALREADY =       149;    ///  operation already in progress\n+    enum EINPROGRESS =    150;    ///  operation now in progress\n+    enum ESTALE =         151;    ///  Stale NFS file handle\n }\n else version (Haiku)\n {"}, {"sha": "3002c0226134db59a928687b4beb88d8e5be9d66", "filename": "libphobos/libdruntime/core/stdc/fenv.d", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Ffenv.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Ffenv.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Ffenv.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -149,10 +149,10 @@ version (GNUFP)\n         alias fexcept_t = uint;\n     }\n     // https://sourceware.org/git/?p=glibc.git;a=blob;f=sysdeps/sparc/fpu/bits/fenv.h\n-    else version (SPARC64)\n+    else version (SPARC_Any)\n     {\n-        alias fenv_t = ulong;\n-        alias fexcept_t = ulong;\n+        alias fenv_t = c_ulong;\n+        alias fexcept_t = c_ulong;\n     }\n     // https://sourceware.org/git/?p=glibc.git;a=blob;f=sysdeps/s390/fpu/bits/fenv.h\n     else version (IBMZ_Any)\n@@ -237,7 +237,7 @@ else version (NetBSD)\n                     uint status;        /* Status word register */\n                     uint tag;           /* Tag word register */\n                     uint[4] others;     /* EIP, Pointer Selector, etc */\n-            };\n+            }\n             _x87 x87;\n \n             uint mxcsr;                 /* Control and status register */\n@@ -256,10 +256,10 @@ else version (NetBSD)\n                     ushort tag;         /* Tag word register */\n                     ushort unused3;\n                     uint[4] others;     /* EIP, Pointer Selector, etc */\n-            };\n+            }\n             _x87 x87;\n             uint mxcsr;                 /* Control and status register */\n-        };\n+        }\n \n     }\n \n@@ -291,7 +291,7 @@ else version (DragonFlyBSD)\n                 uint status;\n                 uint tag;\n                 uint[4] others;\n-        };\n+        }\n         _x87 x87;\n \n         uint mxcsr;\n@@ -877,7 +877,7 @@ int feholdexcept(fenv_t* envp);\n ///\n int fegetexceptflag(fexcept_t* flagp, int excepts);\n ///\n-int fesetexceptflag(in fexcept_t* flagp, int excepts);\n+int fesetexceptflag(const scope fexcept_t* flagp, int excepts);\n \n ///\n int fegetround();\n@@ -887,7 +887,7 @@ int fesetround(int round);\n ///\n int fegetenv(fenv_t* envp);\n ///\n-int fesetenv(in fenv_t* envp);\n+int fesetenv(const scope fenv_t* envp);\n \n // MS define feraiseexcept() and feupdateenv() inline.\n version (CRuntime_Microsoft) // supported since MSVCRT 12 (VS 2013) only\n@@ -925,7 +925,7 @@ version (CRuntime_Microsoft) // supported since MSVCRT 12 (VS 2013) only\n     }\n \n     ///\n-    int feupdateenv()(in fenv_t* envp)\n+    int feupdateenv()(const scope fenv_t* envp)\n     {\n         int excepts = fetestexcept(FE_ALL_EXCEPT);\n         return (fesetenv(envp) != 0 || feraiseexcept(excepts) != 0 ? 1 : 0);\n@@ -936,5 +936,5 @@ else\n     ///\n     int feraiseexcept(int excepts);\n     ///\n-    int feupdateenv(in fenv_t* envp);\n+    int feupdateenv(const scope fenv_t* envp);\n }"}, {"sha": "7f30e38ab926af40c4ee775ee546151e36e4a34d", "filename": "libphobos/libdruntime/core/stdc/inttypes.d", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Finttypes.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Finttypes.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Finttypes.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -434,10 +434,10 @@ intmax_t  imaxabs(intmax_t j);\n ///\n imaxdiv_t imaxdiv(intmax_t numer, intmax_t denom);\n ///\n-intmax_t  strtoimax(in char* nptr, char** endptr, int base);\n+intmax_t  strtoimax(const scope char* nptr, char** endptr, int base);\n ///\n-uintmax_t strtoumax(in char* nptr, char** endptr, int base);\n+uintmax_t strtoumax(const scope char* nptr, char** endptr, int base);\n ///\n-intmax_t  wcstoimax(in wchar_t* nptr, wchar_t** endptr, int base);\n+intmax_t  wcstoimax(const scope wchar_t* nptr, wchar_t** endptr, int base);\n ///\n-uintmax_t wcstoumax(in wchar_t* nptr, wchar_t** endptr, int base);\n+uintmax_t wcstoumax(const scope wchar_t* nptr, wchar_t** endptr, int base);"}, {"sha": "f3f88006a1279e240b10397e38f8a0f86064e452", "filename": "libphobos/libdruntime/core/stdc/limits.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Flimits.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Flimits.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Flimits.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -23,7 +23,7 @@ else version (TVOS)\n else version (WatchOS)\n     version = Darwin;\n \n-private import core.stdc.config;\n+import core.stdc.config;\n \n extern (C):\n @trusted: // Constants only."}, {"sha": "4b8d5c82e026d82227ab12ce8bb6533c88c6fac1", "filename": "libphobos/libdruntime/core/stdc/locale.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Flocale.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Flocale.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Flocale.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -287,6 +287,6 @@ else\n }\n \n ///\n-@system char*  setlocale(int category, in char* locale);\n+@system char*  setlocale(int category, const scope char* locale);\n ///\n lconv* localeconv();"}, {"sha": "e8d1fa8e7b513679bd38027c0711db606d3cd6ea", "filename": "libphobos/libdruntime/core/stdc/math.d", "status": "modified", "additions": 122, "deletions": 169, "changes": 291, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fmath.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fmath.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fmath.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -13,7 +13,7 @@\n \n module core.stdc.math;\n \n-private import core.stdc.config;\n+import core.stdc.config;\n \n version (OSX)\n     version = Darwin;\n@@ -1037,14 +1037,25 @@ else version (Darwin)\n     // other Darwins\n     version (OSX)\n     {\n-        pure int __fpclassify(real x);\n-        pure int __isfinite(real x);\n-        pure int __isinf(real x);\n-        pure int __isnan(real x);\n-        alias __fpclassifyl = __fpclassify;\n-        alias __isfinitel = __isfinite;\n-        alias __isinfl = __isinf;\n-        alias __isnanl = __isnan;\n+        version (AArch64)\n+        {\n+            // Available in macOS ARM\n+            pure int __fpclassifyl(real x);\n+            pure int __isfinitel(real x);\n+            pure int __isinfl(real x);\n+            pure int __isnanl(real x);\n+        }\n+        else\n+        {\n+            pure int __fpclassify(real x);\n+            pure int __isfinite(real x);\n+            pure int __isinf(real x);\n+            pure int __isnan(real x);\n+            alias __fpclassifyl = __fpclassify;\n+            alias __isfinitel = __isfinite;\n+            alias __isinfl = __isinf;\n+            alias __isnanl = __isnan;\n+        }\n     }\n     else\n     {\n@@ -2028,464 +2039,406 @@ version (CRuntime_Microsoft) // fully supported since MSVCRT 12 (VS 2013) only\n     ///\n     extern(D) pure real fmal()(real x, real y, real z) { return fma(cast(double) x, cast(double) y, cast(double) z); }\n }\n-/* NOTE: freebsd < 8-CURRENT doesn't appear to support *l, but we can\n- *       approximate.\n- * A lot of them were added in 8.0-RELEASE, and so a lot of these workarounds\n- * should then be removed.\n- */\n-// NOTE: FreeBSD 8.0-RELEASE doesn't support log2* nor these *l functions:\n-//         acoshl, asinhl, atanhl, coshl, sinhl, tanhl, cbrtl, powl, expl,\n-//         expm1l, logl, log1pl, log10l, erfcl, erfl, lgammal, tgammal;\n-//       but we can approximate.\n else version (FreeBSD)\n {\n-  version (none) // < 8-CURRENT\n-  {\n-    extern (D)\n-    {\n-        real    acosl(real x) { return acos(x); }\n-        real    asinl(real x) { return asin(x); }\n-        pure real    atanl(real x) { return atan(x); }\n-        real    atan2l(real y, real x) { return atan2(y, x); }\n-        pure real    cosl(real x) { return cos(x); }\n-        pure real    sinl(real x) { return sin(x); }\n-        pure real    tanl(real x) { return tan(x); }\n-        real    exp2l(real x) { return exp2(x); }\n-        pure real    frexpl(real value, int* exp) { return frexp(value, exp); }\n-        int     ilogbl(real x) { return ilogb(x); }\n-        real    ldexpl(real x, int exp) { return ldexp(x, exp); }\n-        real    logbl(real x) { return logb(x); }\n-        //real    modfl(real value, real *iptr); // nontrivial conversion\n-        real    scalbnl(real x, int n) { return scalbn(x, n); }\n-        real    scalblnl(real x, c_long n) { return scalbln(x, n); }\n-        pure real    fabsl(real x) { return fabs(x); }\n-        real    hypotl(real x, real y) { return hypot(x, y); }\n-        real    sqrtl(real x) { return sqrt(x); }\n-        pure real    ceill(real x) { return ceil(x); }\n-        pure real    floorl(real x) { return floor(x); }\n-        pure real    nearbyintl(real x) { return nearbyint(x); }\n-        pure real    rintl(real x) { return rint(x); }\n-        c_long  lrintl(real x) { return lrint(x); }\n-        pure real    roundl(real x) { return round(x); }\n-        c_long  lroundl(real x) { return lround(x); }\n-        long    llroundl(real x) { return llround(x); }\n-        pure real    truncl(real x) { return trunc(x); }\n-        real    fmodl(real x, real y) { return fmod(x, y); }\n-        real    remainderl(real x, real y) { return remainder(x, y); }\n-        real    remquol(real x, real y, int* quo) { return remquo(x, y, quo); }\n-        pure real    copysignl(real x, real y) { return copysign(x, y); }\n-        //pure double  nan(char* tagp);\n-        //pure float   nanf(char* tagp);\n-        //pure real    nanl(char* tagp);\n-        real    nextafterl(real x, real y) { return nextafter(x, y); }\n-        real    nexttowardl(real x, real y) { return nexttoward(x, y); }\n-        real    fdiml(real x, real y) { return fdim(x, y); }\n-        pure real    fmaxl(real x, real y) { return fmax(x, y); }\n-        pure real    fminl(real x, real y) { return fmin(x, y); }\n-        pure real    fmal(real x, real y, real z) { return fma(x, y, z); }\n-    }\n-  }\n-  else\n-  {\n-    ///\n-    real    acosl(real x);\n-    ///\n-    real    asinl(real x);\n-    ///\n-    pure real    atanl(real x);\n-    ///\n-    real    atan2l(real y, real x);\n-    ///\n-    pure real    cosl(real x);\n-    ///\n-    pure real    sinl(real x);\n-    ///\n-    pure real    tanl(real x);\n-    ///\n-    real    exp2l(real x);\n-    ///\n-    pure real    frexpl(real value, int* exp);\n-    ///\n-    int     ilogbl(real x);\n-    ///\n-    real    ldexpl(real x, int exp);\n-    ///\n-    real    logbl(real x);\n-    ///\n-    pure real    modfl(real value, real *iptr);\n-    ///\n-    real    scalbnl(real x, int n);\n-    ///\n-    real    scalblnl(real x, c_long n);\n-    ///\n-    pure real    fabsl(real x);\n-    ///\n-    real    hypotl(real x, real y);\n-    ///\n-    real    sqrtl(real x);\n-    ///\n-    pure real    ceill(real x);\n-    ///\n-    pure real    floorl(real x);\n-    ///\n-    pure real    nearbyintl(real x);\n-    ///\n-    pure real    rintl(real x);\n-    ///\n-    c_long  lrintl(real x);\n-    ///\n-    pure real    roundl(real x);\n-    ///\n-    c_long  lroundl(real x);\n-    ///\n-    long    llroundl(real x);\n-    ///\n-    pure real    truncl(real x);\n-    ///\n-    real    fmodl(real x, real y);\n     ///\n-    real    remainderl(real x, real y);\n-    ///\n-    real    remquol(real x, real y, int* quo);\n-    ///\n-    pure real    copysignl(real x, real y);\n-    ///\n-    pure double  nan(char* tagp);\n-    ///\n-    pure float   nanf(char* tagp);\n-    ///\n-    pure real    nanl(char* tagp);\n-    ///\n-    real    nextafterl(real x, real y);\n-    ///\n-    real    nexttowardl(real x, real y);\n-    ///\n-    real    fdiml(real x, real y);\n-    ///\n-    pure real    fmaxl(real x, real y);\n-    ///\n-    pure real    fminl(real x, real y);\n-    ///\n-    pure real    fmal(real x, real y, real z);\n-  }\n-  ///\n     double  acos(double x);\n     ///\n     float   acosf(float x);\n+    ///\n+    real    acosl(real x); // since 8.0\n \n     ///\n     double  asin(double x);\n     ///\n     float   asinf(float x);\n+    ///\n+    real    asinl(real x); // since 8.0\n \n     ///\n     pure double  atan(double x);\n     ///\n     pure float   atanf(float x);\n+    ///\n+    pure real    atanl(real x); // since 8.0\n \n     ///\n     double  atan2(double y, double x);\n     ///\n     float   atan2f(float y, float x);\n+    ///\n+    real    atan2l(real y, real x); // since 8.0\n \n     ///\n     pure double  cos(double x);\n     ///\n     pure float   cosf(float x);\n+    ///\n+    pure real    cosl(real x); // since 8.0\n \n     ///\n     pure double  sin(double x);\n     ///\n     pure float   sinf(float x);\n+    ///\n+    pure real    sinl(real x); // since 8.0\n \n     ///\n     pure double  tan(double x);\n     ///\n     pure float   tanf(float x);\n+    ///\n+    pure real    tanl(real x); // since 8.0\n \n     ///\n     double  acosh(double x);\n     ///\n     float   acoshf(float x);\n     ///\n-    extern(D) real acoshl(real x) { return acosh(x); }\n+    real    acoshl(real x); // since 10.0\n \n     ///\n     pure double  asinh(double x);\n     ///\n     pure float   asinhf(float x);\n     ///\n-    extern(D) pure real asinhl(real x) { return asinh(x); }\n+    pure real    asinhl(real x); // since 10.0\n \n     ///\n     double  atanh(double x);\n     ///\n     float   atanhf(float x);\n     ///\n-    extern(D) real atanhl(real x) { return atanh(x); }\n+    real    atanhl(real x); // since 10.0\n \n     ///\n     double  cosh(double x);\n     ///\n     float   coshf(float x);\n     ///\n-    extern(D) real coshl(real x) { return cosh(x); }\n+    real    coshl(real x); // since 10.1\n \n     ///\n     double  sinh(double x);\n     ///\n     float   sinhf(float x);\n     ///\n-    extern(D) real sinhl(real x) { return sinh(x); }\n+    real    sinhl(real x); // since 10.1\n \n     ///\n     pure double  tanh(double x);\n     ///\n     pure float   tanhf(float x);\n     ///\n-    extern(D) pure real tanhl(real x) { return tanh(x); }\n+    pure real    tanhl(real x); // since 10.1\n \n     ///\n     double  exp(double x);\n     ///\n     float   expf(float x);\n     ///\n-    extern(D) real expl(real x) { return exp(x); }\n+    real    expl(real x); // since 10.0\n \n     ///\n     double  exp2(double x);\n     ///\n     float   exp2f(float x);\n+    ///\n+    real    exp2l(real x); // since 8.0\n \n     ///\n     double  expm1(double x);\n     ///\n     float   expm1f(float x);\n     ///\n-    extern(D) real expm1l(real x) { return expm1(x); }\n+    real    expm1l(real x); // since 10.0\n \n     ///\n     pure double  frexp(double value, int* exp);\n     ///\n     pure float   frexpf(float value, int* exp);\n+    ///\n+    pure real    frexpl(real value, int* exp); // since 6.0\n \n     ///\n     int     ilogb(double x);\n     ///\n     int     ilogbf(float x);\n+    ///\n+    int     ilogbl(real x); // since 5.4\n \n     ///\n     double  ldexp(double x, int exp);\n     ///\n     float   ldexpf(float x, int exp);\n+    ///\n+    real    ldexpl(real x, int exp); // since 6.0\n \n     ///\n     double  log(double x);\n     ///\n     float   logf(float x);\n     ///\n-    extern(D) real logl(real x) { return log(x); }\n+    real    logl(real x); // since 10.0\n \n     ///\n     double  log10(double x);\n     ///\n     float   log10f(float x);\n     ///\n-    extern(D) real log10l(real x) { return log10(x); }\n+    real    log10l(real x); // since 10.0\n \n     ///\n     double  log1p(double x);\n     ///\n     float   log1pf(float x);\n     ///\n-    extern(D) real log1pl(real x) { return log1p(x); }\n+    real    log1pl(real x); // since 10.0\n \n-    private enum real ONE_LN2 = 1 / 0x1.62e42fefa39ef358p-1L;\n     ///\n-    extern(D) double log2(double x) { return log(x) * ONE_LN2; }\n+    double log2(double x); // since 8.3\n     ///\n-    extern(D) float  log2f(float x) { return logf(x) * ONE_LN2; }\n+    float  log2f(float x); // since 8.3\n     ///\n-    extern(D) real   log2l(real x)  { return logl(x) * ONE_LN2; }\n+    real   log2l(real x); // since 10.0\n \n     ///\n     double  logb(double x);\n     ///\n     float   logbf(float x);\n+    ///\n+    real    logbl(real x); // since 8.0\n \n     ///\n     pure double  modf(double value, double* iptr);\n     ///\n     pure float   modff(float value, float* iptr);\n+    ///\n+    pure real    modfl(real value, real *iptr); // since 8.0\n \n     ///\n     double  scalbn(double x, int n);\n     ///\n     float   scalbnf(float x, int n);\n+    ///\n+    real    scalbnl(real x, int n); // since 6.0\n \n     ///\n     double  scalbln(double x, c_long n);\n     ///\n     float   scalblnf(float x, c_long n);\n+    ///\n+    real    scalblnl(real x, c_long n); // since 6.0\n \n     ///\n     pure double  cbrt(double x);\n     ///\n     pure float   cbrtf(float x);\n     ///\n-    extern(D) pure real cbrtl(real x) { return cbrt(x); }\n+    pure real    cbrtl(real x); // since 9.0\n \n     ///\n     pure double  fabs(double x);\n     ///\n     pure float   fabsf(float x);\n+    ///\n+    pure real    fabsl(real x); // since 5.3\n \n     ///\n     double  hypot(double x, double y);\n     ///\n     float   hypotf(float x, float y);\n+    ///\n+    real    hypotl(real x, real y); // since 8.0\n \n     ///\n     double  pow(double x, double y);\n     ///\n     float   powf(float x, float y);\n     ///\n-    extern(D) real powl(real x, real y) { return pow(x, y); }\n+    real    powl(real x, real y); // since 10.4\n \n     ///\n     double  sqrt(double x);\n     ///\n     float   sqrtf(float x);\n+    ///\n+    real    sqrtl(real x); // since 8.0\n \n     ///\n     pure double  erf(double x);\n     ///\n     pure float   erff(float x);\n     ///\n-    extern(D) pure real erfl(real x) { return erf(x); }\n+    pure real    erfl(real x); // since 10.1\n \n     ///\n     double  erfc(double x);\n     ///\n     float   erfcf(float x);\n     ///\n-    extern(D) real erfcl(real x) { return erfc(x); }\n+    real    erfcl(real x); // since 10.1\n \n     ///\n     double  lgamma(double x);\n     ///\n     float   lgammaf(float x);\n     ///\n-    extern(D) real lgammal(real x) { return lgamma(x); }\n+    real    lgammal(real x); // since 10.2\n \n     ///\n     double  tgamma(double x);\n     ///\n     float   tgammaf(float x);\n     ///\n-    extern(D) real tgammal(real x) { return tgamma(x); }\n+    real    tgammal(real x); // since 11.2\n \n     ///\n     pure double  ceil(double x);\n     ///\n     pure float   ceilf(float x);\n+    ///\n+    pure real    ceill(real x); // since 5.4\n \n     ///\n     pure double  floor(double x);\n     ///\n     pure float   floorf(float x);\n+    ///\n+    pure real    floorl(real x); // since 5.4\n \n     ///\n     pure double  nearbyint(double x);\n     ///\n     pure float   nearbyintf(float x);\n+    ///\n+    pure real    nearbyintl(real x); // since 8.0\n \n     ///\n     pure double  rint(double x);\n     ///\n     pure float   rintf(float x);\n+    ///\n+    pure real    rintl(real x); // since 8.0\n \n     ///\n     c_long  lrint(double x);\n     ///\n     c_long  lrintf(float x);\n+    ///\n+    c_long  lrintl(real x); // since 8.0\n \n     ///\n     long    llrint(double x);\n     ///\n     long    llrintf(float x);\n     ///\n-    extern(D) long llrintl(real x) { return llrint(x); }\n+    long    llrintl(real x); // since 8.0\n \n     ///\n     pure double  round(double x);\n     ///\n     pure float   roundf(float x);\n+    ///\n+    pure real    roundl(real x); // since 6.0\n \n     ///\n     c_long  lround(double x);\n     ///\n     c_long  lroundf(float x);\n+    ///\n+    c_long  lroundl(real x); // since 6.0\n \n     ///\n     long    llround(double x);\n     ///\n     long    llroundf(float x);\n+    ///\n+    long    llroundl(real x); // since 6.0\n \n     ///\n     pure double  trunc(double x);\n     ///\n     pure float   truncf(float x);\n+    ///\n+    pure real    truncl(real x); // since 6.0\n \n     ///\n     double  fmod(double x, double y);\n     ///\n     float   fmodf(float x, float y);\n+    ///\n+    real    fmodl(real x, real y); // since 8.0\n \n     ///\n     double  remainder(double x, double y);\n     ///\n     float   remainderf(float x, float y);\n+    ///\n+    real    remainderl(real x, real y); // since 8.0\n \n     ///\n     double  remquo(double x, double y, int* quo);\n     ///\n     float   remquof(float x, float y, int* quo);\n+    ///\n+    real    remquol(real x, real y, int* quo); // since 8.0\n \n     ///\n     pure double  copysign(double x, double y);\n     ///\n     pure float   copysignf(float x, float y);\n+    ///\n+    pure real    copysignl(real x, real y); // since 5.3\n+\n+    ///\n+    pure double  nan(const char*); // since 8.0\n+    ///\n+    pure float   nanf(const char*); // since 8.0\n+    ///\n+    pure real    nanl(const char*); // since 8.0\n \n     ///\n     double  nextafter(double x, double y);\n     ///\n     float   nextafterf(float x, float y);\n+    ///\n+    real    nextafterl(real x, real y); // since 6.0\n \n     ///\n     double  nexttoward(double x, real y);\n     ///\n     float   nexttowardf(float x, real y);\n+    ///\n+    real    nexttowardl(real x, real y); // since 6.0\n \n     ///\n     double  fdim(double x, double y);\n     ///\n     float   fdimf(float x, float y);\n+    ///\n+    real    fdiml(real x, real y); // since 5.3\n \n     ///\n     pure double  fmax(double x, double y);\n     ///\n     pure float   fmaxf(float x, float y);\n+    ///\n+    pure real    fmaxl(real x, real y); // since 5.3\n \n     ///\n     pure double  fmin(double x, double y);\n     ///\n     pure float   fminf(float x, float y);\n+    ///\n+    pure real    fminl(real x, real y); // since 5.3\n \n     ///\n     pure double  fma(double x, double y, double z);\n     ///\n     pure float   fmaf(float x, float y, float z);\n+    ///\n+    pure real    fmal(real x, real y, real z); // since 6.0\n }\n else version (NetBSD)\n {"}, {"sha": "9a67f2e8e4dcf9dfeec00fcff99b5161302dedc8", "filename": "libphobos/libdruntime/core/stdc/stdarg.d", "status": "modified", "additions": 260, "deletions": 453, "changes": 713, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fstdarg.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fstdarg.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fstdarg.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -3,525 +3,332 @@\n  *\n  * $(C_HEADER_DESCRIPTION pubs.opengroup.org/onlinepubs/009695399/basedefs/_stdarg.h.html, _stdarg.h)\n  *\n- * Copyright: Copyright Digital Mars 2000 - 2009.\n+ * Copyright: Copyright Digital Mars 2000 - 2020.\n  * License:   $(HTTP www.boost.org/LICENSE_1_0.txt, Boost License 1.0).\n  * Authors:   Walter Bright, Hauke Duden\n  * Standards: ISO/IEC 9899:1999 (E)\n  * Source: $(DRUNTIMESRC core/stdc/_stdarg.d)\n  */\n \n-/* NOTE: This file has been patched from the original DMD distribution to\n- * work with the GDC compiler.\n- */\n module core.stdc.stdarg;\n \n @system:\n-//@nogc:    // Not yet, need to make TypeInfo's member functions @nogc first\n+@nogc:\n nothrow:\n \n+version (X86_64)\n+{\n+    version (Windows) { /* different ABI */ }\n+    else version = SysV_x64;\n+}\n+\n version (GNU)\n {\n     import gcc.builtins;\n-    alias __builtin_va_list __gnuc_va_list;\n-\n-\n-    /*********************\n-     * The argument pointer type.\n-     */\n-    alias __gnuc_va_list va_list;\n-\n-\n-    /**********\n-     * Initialize ap.\n-     * parmn should be the last named parameter.\n-     */\n-    void va_start(T)(out va_list ap, ref T parmn);\n-\n+}\n+else version (SysV_x64)\n+{\n+    static import core.internal.vararg.sysv_x64;\n \n-    /************\n-     * Retrieve and return the next value that is type T.\n-     */\n-    T va_arg(T)(ref va_list ap);\n+    version (DigitalMars)\n+    {\n+        align(16) struct __va_argsave_t\n+        {\n+            size_t[6] regs;   // RDI,RSI,RDX,RCX,R8,R9\n+            real[8] fpregs;   // XMM0..XMM7\n+            __va_list va;\n+        }\n+    }\n+}\n \n+version (ARM)     version = ARM_Any;\n+version (AArch64) version = ARM_Any;\n+version (MIPS32)  version = MIPS_Any;\n+version (MIPS64)  version = MIPS_Any;\n+version (PPC)     version = PPC_Any;\n+version (PPC64)   version = PPC_Any;\n \n-    /*************\n-     * Retrieve and store through parmn the next value that is of type T.\n-     */\n-    void va_arg(T)(ref va_list ap, ref T parmn);\n+version (GNU)\n+{\n+    // Uses gcc.builtins\n+}\n+else version (ARM_Any)\n+{\n+    // Darwin uses a simpler varargs implementation\n+    version (OSX) {}\n+    else version (iOS) {}\n+    else version (TVOS) {}\n+    else version (WatchOS) {}\n+    else:\n+\n+    version (ARM)\n+    {\n+        version = AAPCS32;\n+    }\n+    else version (AArch64)\n+    {\n+        version = AAPCS64;\n+        static import core.internal.vararg.aarch64;\n+    }\n+}\n \n \n-    /***********************\n-     * End use of ap.\n-     */\n-    alias __builtin_va_end va_end;\n+T alignUp(size_t alignment = size_t.sizeof, T)(T base) pure\n+{\n+    enum mask = alignment - 1;\n+    static assert(alignment > 0 && (alignment & mask) == 0, \"alignment must be a power of 2\");\n+    auto b = cast(size_t) base;\n+    b = (b + mask) & ~mask;\n+    return cast(T) b;\n+}\n \n+unittest\n+{\n+    assert(1.alignUp == size_t.sizeof);\n+    assert(31.alignUp!16 == 32);\n+    assert(32.alignUp!16 == 32);\n+    assert(33.alignUp!16 == 48);\n+    assert((-9).alignUp!8 == -8);\n+}\n \n-    /***********************\n-     * Make a copy of ap.\n-     */\n-    alias __builtin_va_copy va_copy;\n \n-}\n-else version (X86)\n+version (BigEndian)\n {\n-    /*********************\n-     * The argument pointer type.\n-     */\n-    alias char* va_list;\n-\n-    /**********\n-     * Initialize ap.\n-     * For 32 bit code, parmn should be the last named parameter.\n-     * For 64 bit code, parmn should be __va_argsave.\n-     */\n-    void va_start(T)(out va_list ap, ref T parmn)\n+    // Adjusts a size_t-aligned pointer for types smaller than size_t.\n+    T* adjustForBigEndian(T)(T* p, size_t size) pure\n     {\n-        ap = cast(va_list)( cast(void*) &parmn + ( ( T.sizeof + int.sizeof - 1 ) & ~( int.sizeof - 1 ) ) );\n+        return size >= size_t.sizeof ? p :\n+            cast(T*) ((cast(void*) p) + (size_t.sizeof - size));\n     }\n+}\n \n-    /************\n-     * Retrieve and return the next value that is type T.\n-     * Should use the other va_arg instead, as this won't work for 64 bit code.\n-     */\n-    T va_arg(T)(ref va_list ap)\n-    {\n-        T arg = *cast(T*) ap;\n-        ap = cast(va_list)( cast(void*) ap + ( ( T.sizeof + int.sizeof - 1 ) & ~( int.sizeof - 1 ) ) );\n-        return arg;\n-    }\n \n-    /************\n-     * Retrieve and return the next value that is type T.\n-     * This is the preferred version.\n-     */\n-    void va_arg(T)(ref va_list ap, ref T parmn)\n-    {\n-        parmn = *cast(T*)ap;\n-        ap = cast(va_list)(cast(void*)ap + ((T.sizeof + int.sizeof - 1) & ~(int.sizeof - 1)));\n-    }\n+/**\n+ * The argument pointer type.\n+ */\n+version (GNU)\n+{\n+    alias va_list = __gnuc_va_list;\n+    alias __gnuc_va_list = __builtin_va_list;\n+}\n+else version (SysV_x64)\n+{\n+    alias va_list = core.internal.vararg.sysv_x64.va_list;\n+    public import core.internal.vararg.sysv_x64 : __va_list, __va_list_tag;\n+}\n+else version (AAPCS32)\n+{\n+    alias va_list = __va_list;\n \n-    /*************\n-     * Retrieve and store through parmn the next value that is of TypeInfo ti.\n-     * Used when the static type is not known.\n-     */\n-    void va_arg()(ref va_list ap, TypeInfo ti, void* parmn)\n+    // need std::__va_list for C++ mangling compatibility (AAPCS32 section 8.1.4)\n+    extern (C++, std) struct __va_list\n     {\n-        // Wait until everyone updates to get TypeInfo.talign\n-        //auto talign = ti.talign;\n-        //auto p = cast(void*)(cast(size_t)ap + talign - 1) & ~(talign - 1);\n-        auto p = ap;\n-        auto tsize = ti.tsize;\n-        ap = cast(va_list)(cast(size_t)p + ((tsize + size_t.sizeof - 1) & ~(size_t.sizeof - 1)));\n-        parmn[0..tsize] = p[0..tsize];\n+        void* __ap;\n     }\n+}\n+else version (AAPCS64)\n+{\n+    alias va_list = core.internal.vararg.aarch64.va_list;\n+}\n+else\n+{\n+    alias va_list = char*; // incl. unknown platforms\n+}\n \n-    /***********************\n-     * End use of ap.\n-     */\n-    void va_end(va_list ap)\n+\n+/**\n+ * Initialize ap.\n+ * parmn should be the last named parameter.\n+ */\n+version (GNU)\n+{\n+    void va_start(T)(out va_list ap, ref T parmn);\n+}\n+else version (LDC)\n+{\n+    pragma(LDC_va_start)\n+    void va_start(T)(out va_list ap, ref T parmn) @nogc;\n+}\n+else version (DigitalMars)\n+{\n+    version (X86)\n     {\n+        void va_start(T)(out va_list ap, ref T parmn)\n+        {\n+            ap = cast(va_list) ((cast(void*) &parmn) + T.sizeof.alignUp);\n+        }\n     }\n-\n-    ///\n-    void va_copy(out va_list dest, va_list src)\n+    else\n     {\n-        dest = src;\n+        void va_start(T)(out va_list ap, ref T parmn); // intrinsic; parmn should be __va_argsave for non-Windows x86_64 targets\n     }\n }\n-else version (Windows) // Win64\n-{   /* Win64 is characterized by all arguments fitting into a register size.\n-     * Smaller ones are padded out to register size, and larger ones are passed by\n-     * reference.\n-     */\n \n-    /*********************\n-     * The argument pointer type.\n-     */\n-    alias char* va_list;\n \n-    /**********\n-     * Initialize ap.\n-     * parmn should be the last named parameter.\n-     */\n-    void va_start(T)(out va_list ap, ref T parmn); // Compiler intrinsic\n-\n-    /************\n-     * Retrieve and return the next value that is type T.\n-     */\n-    T va_arg(T)(ref va_list ap)\n+/**\n+ * Retrieve and return the next value that is of type T.\n+ */\n+version (GNU)\n+    T va_arg(T)(ref va_list ap); // intrinsic\n+else\n+T va_arg(T)(ref va_list ap)\n+{\n+    version (X86)\n     {\n-        static if (T.sizeof > size_t.sizeof)\n-            T arg = **cast(T**)ap;\n-        else\n-            T arg = *cast(T*)ap;\n-        ap = cast(va_list)(cast(void*)ap + ((size_t.sizeof + size_t.sizeof - 1) & ~(size_t.sizeof - 1)));\n-        return arg;\n+        auto p = cast(T*) ap;\n+        ap += T.sizeof.alignUp;\n+        return *p;\n     }\n-\n-    /************\n-     * Retrieve and return the next value that is type T.\n-     * This is the preferred version.\n-     */\n-    void va_arg(T)(ref va_list ap, ref T parmn)\n+    else version (Win64)\n     {\n-        static if (T.sizeof > size_t.sizeof)\n-            parmn = **cast(T**)ap;\n+        // LDC passes slices as 2 separate 64-bit values, not as 128-bit struct\n+        version (LDC) enum isLDC = true;\n+        else          enum isLDC = false;\n+        static if (isLDC && is(T == E[], E))\n+        {\n+            auto p = cast(T*) ap;\n+            ap += T.sizeof;\n+            return *p;\n+        }\n         else\n-            parmn = *cast(T*)ap;\n-        ap = cast(va_list)(cast(void*)ap + ((size_t.sizeof + size_t.sizeof - 1) & ~(size_t.sizeof - 1)));\n-    }\n-\n-    /*************\n-     * Retrieve and store through parmn the next value that is of TypeInfo ti.\n-     * Used when the static type is not known.\n-     */\n-    void va_arg()(ref va_list ap, TypeInfo ti, void* parmn)\n-    {\n-        // Wait until everyone updates to get TypeInfo.talign\n-        //auto talign = ti.talign;\n-        //auto p = cast(void*)(cast(size_t)ap + talign - 1) & ~(talign - 1);\n-        auto p = ap;\n-        auto tsize = ti.tsize;\n-        ap = cast(va_list)(cast(size_t)p + ((size_t.sizeof + size_t.sizeof - 1) & ~(size_t.sizeof - 1)));\n-        void* q = (tsize > size_t.sizeof) ? *cast(void**)p : p;\n-        parmn[0..tsize] = q[0..tsize];\n+        {\n+            // passed indirectly by value if > 64 bits or of a size that is not a power of 2\n+            static if (T.sizeof > size_t.sizeof || (T.sizeof & (T.sizeof - 1)) != 0)\n+                auto p = *cast(T**) ap;\n+            else\n+                auto p = cast(T*) ap;\n+            ap += size_t.sizeof;\n+            return *p;\n+        }\n     }\n-\n-    /***********************\n-     * End use of ap.\n-     */\n-    void va_end(va_list ap)\n+    else version (SysV_x64)\n     {\n+        return core.internal.vararg.sysv_x64.va_arg!T(ap);\n     }\n-\n-    ///\n-    void va_copy(out va_list dest, va_list src)\n+    else version (AAPCS32)\n     {\n-        dest = src;\n+        // AAPCS32 section 6.5 B.5: type with alignment >= 8 is 8-byte aligned\n+        // instead of normal 4-byte alignment (APCS doesn't do this).\n+        if (T.alignof >= 8)\n+            ap.__ap = ap.__ap.alignUp!8;\n+        auto p = cast(T*) ap.__ap;\n+        version (BigEndian)\n+            static if (T.sizeof < size_t.sizeof)\n+                p = adjustForBigEndian(p, T.sizeof);\n+        ap.__ap += T.sizeof.alignUp;\n+        return *p;\n     }\n-}\n-else version (X86_64)\n-{\n-    // Determine if type is a vector type\n-    template isVectorType(T)\n+    else version (AAPCS64)\n     {\n-        enum isVectorType = false;\n+        return core.internal.vararg.aarch64.va_arg!T(ap);\n     }\n-\n-    template isVectorType(T : __vector(T[N]), size_t N)\n+    else version (ARM_Any)\n     {\n-        enum isVectorType = true;\n+        auto p = cast(T*) ap;\n+        version (BigEndian)\n+            static if (T.sizeof < size_t.sizeof)\n+                p = adjustForBigEndian(p, T.sizeof);\n+        ap += T.sizeof.alignUp;\n+        return *p;\n     }\n-\n-    // Layout of this struct must match __gnuc_va_list for C ABI compatibility\n-    struct __va_list_tag\n+    else version (PPC_Any)\n     {\n-        uint offset_regs = 6 * 8;            // no regs\n-        uint offset_fpregs = 6 * 8 + 8 * 16; // no fp regs\n-        void* stack_args;\n-        void* reg_args;\n+        /*\n+         * The rules are described in the 64bit PowerPC ELF ABI Supplement 1.9,\n+         * available here:\n+         * http://refspecs.linuxfoundation.org/ELF/ppc64/PPC-elf64abi-1.9.html#PARAM-PASS\n+         */\n+\n+        // Chapter 3.1.4 and 3.2.3: alignment may require the va_list pointer to first\n+        // be aligned before accessing a value\n+        if (T.alignof >= 8)\n+            ap = ap.alignUp!8;\n+        auto p = cast(T*) ap;\n+        version (BigEndian)\n+            static if (T.sizeof < size_t.sizeof)\n+                p = adjustForBigEndian(p, T.sizeof);\n+        ap += T.sizeof.alignUp;\n+        return *p;\n     }\n-    alias __va_list = __va_list_tag;\n-\n-    align(16) struct __va_argsave_t\n+    else version (MIPS_Any)\n     {\n-        size_t[6] regs;   // RDI,RSI,RDX,RCX,R8,R9\n-        real[8] fpregs;   // XMM0..XMM7\n-        __va_list va;\n+        auto p = cast(T*) ap;\n+        version (BigEndian)\n+            static if (T.sizeof < size_t.sizeof)\n+                p = adjustForBigEndian(p, T.sizeof);\n+        ap += T.sizeof.alignUp;\n+        return *p;\n     }\n+    else\n+        static assert(0, \"Unsupported platform\");\n+}\n \n-    /*\n-     * Making it an array of 1 causes va_list to be passed as a pointer in\n-     * function argument lists\n-     */\n-    alias va_list = __va_list*;\n-\n-    ///\n-    void va_start(T)(out va_list ap, ref T parmn); // Compiler intrinsic\n \n-    ///\n-    T va_arg(T)(va_list ap)\n-    {   T a;\n-        va_arg(ap, a);\n-        return a;\n-    }\n+/**\n+ * Retrieve and store in parmn the next value that is of type T.\n+ */\n+version (GNU)\n+    void va_arg(T)(ref va_list ap, ref T parmn); // intrinsic\n+else\n+void va_arg(T)(ref va_list ap, ref T parmn)\n+{\n+    parmn = va_arg!T(ap);\n+}\n \n-    ///\n-    void va_arg(T)(va_list apx, ref T parmn)\n-    {\n-        __va_list* ap = cast(__va_list*)apx;\n-        static if (is(T U == __argTypes))\n-        {\n-            static if (U.length == 0 || T.sizeof > 16 || (U[0].sizeof > 8 && !isVectorType!(U[0])))\n-            {   // Always passed in memory\n-                // The arg may have more strict alignment than the stack\n-                auto p = (cast(size_t)ap.stack_args + T.alignof - 1) & ~(T.alignof - 1);\n-                ap.stack_args = cast(void*)(p + ((T.sizeof + size_t.sizeof - 1) & ~(size_t.sizeof - 1)));\n-                parmn = *cast(T*)p;\n-            }\n-            else static if (U.length == 1)\n-            {   // Arg is passed in one register\n-                alias U[0] T1;\n-                static if (is(T1 == double) || is(T1 == float) || isVectorType!(T1))\n-                {   // Passed in XMM register\n-                    if (ap.offset_fpregs < (6 * 8 + 16 * 8))\n-                    {\n-                        parmn = *cast(T*)(ap.reg_args + ap.offset_fpregs);\n-                        ap.offset_fpregs += 16;\n-                    }\n-                    else\n-                    {\n-                        parmn = *cast(T*)ap.stack_args;\n-                        ap.stack_args += (T1.sizeof + size_t.sizeof - 1) & ~(size_t.sizeof - 1);\n-                    }\n-                }\n-                else\n-                {   // Passed in regular register\n-                    if (ap.offset_regs < 6 * 8 && T.sizeof <= 8)\n-                    {\n-                        parmn = *cast(T*)(ap.reg_args + ap.offset_regs);\n-                        ap.offset_regs += 8;\n-                    }\n-                    else\n-                    {\n-                        auto p = (cast(size_t)ap.stack_args + T.alignof - 1) & ~(T.alignof - 1);\n-                        ap.stack_args = cast(void*)(p + ((T.sizeof + size_t.sizeof - 1) & ~(size_t.sizeof - 1)));\n-                        parmn = *cast(T*)p;\n-                    }\n-                }\n-            }\n-            else static if (U.length == 2)\n-            {   // Arg is passed in two registers\n-                alias U[0] T1;\n-                alias U[1] T2;\n-                auto p = cast(void*)&parmn + 8;\n \n-                // Both must be in registers, or both on stack, hence 4 cases\n+/**\n+ * End use of ap.\n+ */\n+version (GNU)\n+{\n+    alias va_end = __builtin_va_end;\n+}\n+else version (LDC)\n+{\n+    pragma(LDC_va_end)\n+    void va_end(va_list ap);\n+}\n+else version (DigitalMars)\n+{\n+    void va_end(va_list ap) {}\n+}\n \n-                static if ((is(T1 == double) || is(T1 == float)) &&\n-                           (is(T2 == double) || is(T2 == float)))\n-                {\n-                    if (ap.offset_fpregs < (6 * 8 + 16 * 8) - 16)\n-                    {\n-                        *cast(T1*)&parmn = *cast(T1*)(ap.reg_args + ap.offset_fpregs);\n-                        *cast(T2*)p = *cast(T2*)(ap.reg_args + ap.offset_fpregs + 16);\n-                        ap.offset_fpregs += 32;\n-                    }\n-                    else\n-                    {\n-                        *cast(T1*)&parmn = *cast(T1*)ap.stack_args;\n-                        ap.stack_args += (T1.sizeof + size_t.sizeof - 1) & ~(size_t.sizeof - 1);\n-                        *cast(T2*)p = *cast(T2*)ap.stack_args;\n-                        ap.stack_args += (T2.sizeof + size_t.sizeof - 1) & ~(size_t.sizeof - 1);\n-                    }\n-                }\n-                else static if (is(T1 == double) || is(T1 == float))\n-                {\n-                    void* a = void;\n-                    if (ap.offset_fpregs < (6 * 8 + 16 * 8) &&\n-                        ap.offset_regs < 6 * 8 && T2.sizeof <= 8)\n-                    {\n-                        *cast(T1*)&parmn = *cast(T1*)(ap.reg_args + ap.offset_fpregs);\n-                        ap.offset_fpregs += 16;\n-                        a = ap.reg_args + ap.offset_regs;\n-                        ap.offset_regs += 8;\n-                    }\n-                    else\n-                    {\n-                        *cast(T1*)&parmn = *cast(T1*)ap.stack_args;\n-                        ap.stack_args += (T1.sizeof + size_t.sizeof - 1) & ~(size_t.sizeof - 1);\n-                        a = ap.stack_args;\n-                        ap.stack_args += 8;\n-                    }\n-                    // Be careful not to go past the size of the actual argument\n-                    const sz2 = T.sizeof - 8;\n-                    p[0..sz2] = a[0..sz2];\n-                }\n-                else static if (is(T2 == double) || is(T2 == float))\n-                {\n-                    if (ap.offset_regs < 6 * 8 && T1.sizeof <= 8 &&\n-                        ap.offset_fpregs < (6 * 8 + 16 * 8))\n-                    {\n-                        *cast(T1*)&parmn = *cast(T1*)(ap.reg_args + ap.offset_regs);\n-                        ap.offset_regs += 8;\n-                        *cast(T2*)p = *cast(T2*)(ap.reg_args + ap.offset_fpregs);\n-                        ap.offset_fpregs += 16;\n-                    }\n-                    else\n-                    {\n-                        *cast(T1*)&parmn = *cast(T1*)ap.stack_args;\n-                        ap.stack_args += 8;\n-                        *cast(T2*)p = *cast(T2*)ap.stack_args;\n-                        ap.stack_args += (T2.sizeof + size_t.sizeof - 1) & ~(size_t.sizeof - 1);\n-                    }\n-                }\n-                else // both in regular registers\n-                {\n-                    void* a = void;\n-                    if (ap.offset_regs < 5 * 8 && T1.sizeof <= 8 && T2.sizeof <= 8)\n-                    {\n-                        *cast(T1*)&parmn = *cast(T1*)(ap.reg_args + ap.offset_regs);\n-                        ap.offset_regs += 8;\n-                        a = ap.reg_args + ap.offset_regs;\n-                        ap.offset_regs += 8;\n-                    }\n-                    else\n-                    {\n-                        *cast(T1*)&parmn = *cast(T1*)ap.stack_args;\n-                        ap.stack_args += 8;\n-                        a = ap.stack_args;\n-                        ap.stack_args += 8;\n-                    }\n-                    // Be careful not to go past the size of the actual argument\n-                    const sz2 = T.sizeof - 8;\n-                    p[0..sz2] = a[0..sz2];\n-                }\n-            }\n-            else\n-            {\n-                static assert(false);\n-            }\n-        }\n-        else\n-        {\n-            static assert(false, \"not a valid argument type for va_arg\");\n-        }\n-    }\n \n-    ///\n-    void va_arg()(va_list apx, TypeInfo ti, void* parmn)\n+/**\n+ * Make a copy of ap.\n+ */\n+version (GNU)\n+{\n+    alias va_copy = __builtin_va_copy;\n+}\n+else version (LDC)\n+{\n+    pragma(LDC_va_copy)\n+    void va_copy(out va_list dest, va_list src);\n+}\n+else version (DigitalMars)\n+{\n+    version (SysV_x64)\n     {\n-        __va_list* ap = cast(__va_list*)apx;\n-        TypeInfo arg1, arg2;\n-        if (!ti.argTypes(arg1, arg2))\n+        void va_copy(out va_list dest, va_list src, void* storage = alloca(__va_list_tag.sizeof))\n         {\n-            bool inXMMregister(TypeInfo arg) pure nothrow @safe\n-            {\n-                return (arg.flags & 2) != 0;\n-            }\n-\n-            TypeInfo_Vector v1 = arg1 ? cast(TypeInfo_Vector)arg1 : null;\n-            if (arg1 && (arg1.tsize <= 8 || v1))\n-            {   // Arg is passed in one register\n-                auto tsize = arg1.tsize;\n-                void* p;\n-                bool stack = false;\n-                auto offset_fpregs_save = ap.offset_fpregs;\n-                auto offset_regs_save = ap.offset_regs;\n-            L1:\n-                if (inXMMregister(arg1) || v1)\n-                {   // Passed in XMM register\n-                    if (ap.offset_fpregs < (6 * 8 + 16 * 8) && !stack)\n-                    {\n-                        p = ap.reg_args + ap.offset_fpregs;\n-                        ap.offset_fpregs += 16;\n-                    }\n-                    else\n-                    {\n-                        p = ap.stack_args;\n-                        ap.stack_args += (tsize + size_t.sizeof - 1) & ~(size_t.sizeof - 1);\n-                        stack = true;\n-                    }\n-                }\n-                else\n-                {   // Passed in regular register\n-                    if (ap.offset_regs < 6 * 8 && !stack)\n-                    {\n-                        p = ap.reg_args + ap.offset_regs;\n-                        ap.offset_regs += 8;\n-                    }\n-                    else\n-                    {\n-                        p = ap.stack_args;\n-                        ap.stack_args += 8;\n-                        stack = true;\n-                    }\n-                }\n-                parmn[0..tsize] = p[0..tsize];\n-\n-                if (arg2)\n-                {\n-                    if (inXMMregister(arg2))\n-                    {   // Passed in XMM register\n-                        if (ap.offset_fpregs < (6 * 8 + 16 * 8) && !stack)\n-                        {\n-                            p = ap.reg_args + ap.offset_fpregs;\n-                            ap.offset_fpregs += 16;\n-                        }\n-                        else\n-                        {\n-                            if (!stack)\n-                            {   // arg1 is really on the stack, so rewind and redo\n-                                ap.offset_fpregs = offset_fpregs_save;\n-                                ap.offset_regs = offset_regs_save;\n-                                stack = true;\n-                                goto L1;\n-                            }\n-                            p = ap.stack_args;\n-                            ap.stack_args += (arg2.tsize + size_t.sizeof - 1) & ~(size_t.sizeof - 1);\n-                        }\n-                    }\n-                    else\n-                    {   // Passed in regular register\n-                        if (ap.offset_regs < 6 * 8 && !stack)\n-                        {\n-                            p = ap.reg_args + ap.offset_regs;\n-                            ap.offset_regs += 8;\n-                        }\n-                        else\n-                        {\n-                            if (!stack)\n-                            {   // arg1 is really on the stack, so rewind and redo\n-                                ap.offset_fpregs = offset_fpregs_save;\n-                                ap.offset_regs = offset_regs_save;\n-                                stack = true;\n-                                goto L1;\n-                            }\n-                            p = ap.stack_args;\n-                            ap.stack_args += 8;\n-                        }\n-                    }\n-                    auto sz = ti.tsize - 8;\n-                    (parmn + 8)[0..sz] = p[0..sz];\n-                }\n-            }\n-            else\n-            {   // Always passed in memory\n-                // The arg may have more strict alignment than the stack\n-                auto talign = ti.talign;\n-                auto tsize = ti.tsize;\n-                auto p = cast(void*)((cast(size_t)ap.stack_args + talign - 1) & ~(talign - 1));\n-                ap.stack_args = cast(void*)(cast(size_t)p + ((tsize + size_t.sizeof - 1) & ~(size_t.sizeof - 1)));\n-                parmn[0..tsize] = p[0..tsize];\n-            }\n+            // Instead of copying the pointers, and aliasing the source va_list,\n+            // the default argument alloca will allocate storage in the caller's\n+            // stack frame.  This is still not correct (it should be allocated in\n+            // the place where the va_list variable is declared) but most of the\n+            // time the caller's stack frame _is_ the place where the va_list is\n+            // allocated, so in most cases this will now work.\n+            dest = cast(va_list) storage;\n+            *dest = *src;\n         }\n-        else\n-        {\n-            assert(false, \"not a valid argument type for va_arg\");\n-        }\n-    }\n \n-    ///\n-    void va_end(va_list ap)\n-    {\n+        import core.stdc.stdlib : alloca;\n     }\n-\n-    import core.stdc.stdlib : alloca;\n-\n-    ///\n-    void va_copy(out va_list dest, va_list src, void* storage = alloca(__va_list_tag.sizeof))\n+    else\n     {\n-        // Instead of copying the pointers, and aliasing the source va_list,\n-        // the default argument alloca will allocate storage in the caller's\n-        // stack frame.  This is still not correct (it should be allocated in\n-        // the place where the va_list variable is declared) but most of the\n-        // time the caller's stack frame _is_ the place where the va_list is\n-        // allocated, so in most cases this will now work.\n-        dest = cast(va_list)storage;\n-        *dest = *src;\n+        void va_copy(out va_list dest, va_list src)\n+        {\n+            dest = src;\n+        }\n     }\n }\n-else\n-{\n-    static assert(false, \"Unsupported platform\");\n-}"}, {"sha": "ac71b1d09d5ef94911ea8a1145a71e4fdc6812b3", "filename": "libphobos/libdruntime/core/stdc/stdint.d", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fstdint.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fstdint.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fstdint.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -14,10 +14,10 @@\n \n module core.stdc.stdint;\n \n-private import core.stdc.config;\n-private import core.stdc.stddef; // for wchar_t\n-private import core.stdc.signal; // for sig_atomic_t\n-private import core.stdc.wchar_; // for wint_t\n+import core.stdc.config;\n+import core.stdc.stddef; // for wchar_t\n+import core.stdc.signal; // for sig_atomic_t\n+import core.stdc.wchar_; // for wint_t\n \n version (OSX)\n     version = Darwin;"}, {"sha": "00efe885289eb1cd87f227f738f1d7a0891117c8", "filename": "libphobos/libdruntime/core/stdc/stdio.d", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fstdio.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fstdio.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fstdio.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -268,7 +268,7 @@ else version (DragonFlyBSD)\n         ssize_t          s_len;         // current length of string\n         int              s_flags;       // flags\n         ssize_t          s_sect_len;    // current length of section\n-    };\n+    }\n \n     enum {\n         SBUF_FIXEDLEN   = 0x00000000,   // fixed length buffer (default)\n@@ -526,7 +526,7 @@ else version (FreeBSD)\n         int     function(void*)                 _close;\n         int     function(void*, char*, int)     _read;\n         fpos_t  function(void*, fpos_t, int)    _seek;\n-        int     function(void*, in char*, int)  _write;\n+        int     function(void*, const scope char*, int)  _write;\n \n         __sbuf          _ub;\n         ubyte*          _up;\n@@ -572,7 +572,7 @@ else version (NetBSD)\n         int     function(void*)                 _close;\n         ssize_t     function(void*, char*, size_t)     _read;\n         fpos_t  function(void*, fpos_t, int)    _seek;\n-        ssize_t     function(void*, in char*, size_t)  _write;\n+        ssize_t     function(void*, const scope char*, size_t)  _write;\n \n         __sbuf          _ub;\n         ubyte*          _up;\n@@ -1166,22 +1166,22 @@ version (MinGW)\n     // Prefer the MinGW versions over the MSVC ones, as the latter don't handle\n     // reals at all.\n     ///\n-    int __mingw_fprintf(FILE* stream, scope const char* format, ...);\n+    int __mingw_fprintf(FILE* stream, scope const char* format, scope const ...);\n     ///\n     alias __mingw_fprintf fprintf;\n \n     ///\n-    int __mingw_fscanf(FILE* stream, scope const char* format, ...);\n+    int __mingw_fscanf(FILE* stream, scope const char* format, scope ...);\n     ///\n     alias __mingw_fscanf fscanf;\n \n     ///\n-    int __mingw_sprintf(scope char* s, scope const char* format, ...);\n+    int __mingw_sprintf(scope char* s, scope const char* format, scope const ...);\n     ///\n     alias __mingw_sprintf sprintf;\n \n     ///\n-    int __mingw_sscanf(scope const char* s, scope const char* format, ...);\n+    int __mingw_sscanf(scope const char* s, scope const char* format, scope ...);\n     ///\n     alias __mingw_sscanf sscanf;\n \n@@ -1216,25 +1216,25 @@ version (MinGW)\n     alias __mingw_vscanf vscanf;\n \n     ///\n-    int __mingw_printf(scope const char* format, ...);\n+    int __mingw_printf(scope const char* format, scope const ...);\n     ///\n     alias __mingw_printf printf;\n \n     ///\n-    int __mingw_scanf(scope const char* format, ...);\n+    int __mingw_scanf(scope const char* format, scope ...);\n     ///\n     alias __mingw_scanf scanf;\n }\n else\n {\n     ///\n-    int fprintf(FILE* stream, scope const char* format, ...);\n+    int fprintf(FILE* stream, scope const char* format, scope const ...);\n     ///\n-    int fscanf(FILE* stream, scope const char* format, ...);\n+    int fscanf(FILE* stream, scope const char* format, scope ...);\n     ///\n-    int sprintf(scope char* s, scope const char* format, ...);\n+    int sprintf(scope char* s, scope const char* format, scope const ...);\n     ///\n-    int sscanf(scope const char* s, scope const char* format, ...);\n+    int sscanf(scope const char* s, scope const char* format, scope ...);\n     ///\n     int vfprintf(FILE* stream, scope const char* format, va_list arg);\n     ///\n@@ -1248,9 +1248,9 @@ else\n     ///\n     int vscanf(scope const char* format, va_list arg);\n     ///\n-    int printf(scope const char* format, ...);\n+    int printf(scope const char* format, scope const ...);\n     ///\n-    int scanf(scope const char* format, ...);\n+    int scanf(scope const char* format, scope ...);\n }\n \n // No unsafe pointer manipulation.\n@@ -1323,7 +1323,7 @@ version (CRuntime_DigitalMars)\n     pure int  fileno()(FILE* stream)   { return stream._file; }\n   }\n   ///\n-    int   _snprintf(scope char* s, size_t n, scope const char* fmt, ...);\n+    int   _snprintf(scope char* s, size_t n, scope const char* fmt, scope const ...);\n     ///\n     alias _snprintf snprintf;\n \n@@ -1351,7 +1351,7 @@ else version (CRuntime_Microsoft)\n \n   version (MinGW)\n   {\n-    int   __mingw_snprintf(scope char* s, size_t n, scope const char* fmt, ...);\n+    int   __mingw_snprintf(scope char* s, size_t n, scope const char* fmt, scope const ...);\n     ///\n     alias __mingw_snprintf _snprintf;\n     ///\n@@ -1367,9 +1367,9 @@ else version (CRuntime_Microsoft)\n   else\n   {\n     ///\n-    int _snprintf(scope char* s, size_t n, scope const char* format, ...);\n+    int _snprintf(scope char* s, size_t n, scope const char* format, scope const ...);\n     ///\n-    int  snprintf(scope char* s, size_t n, scope const char* format, ...);\n+    int  snprintf(scope char* s, size_t n, scope const char* format, scope const ...);\n \n     ///\n     int _vsnprintf(scope char* s, size_t n, scope const char* format, va_list arg);\n@@ -1410,7 +1410,7 @@ else version (CRuntime_Glibc)\n   }\n \n     ///\n-    int  snprintf(scope char* s, size_t n, scope const char* format, ...);\n+    int  snprintf(scope char* s, size_t n, scope const char* format, scope const ...);\n     ///\n     int  vsnprintf(scope char* s, size_t n, scope const char* format, va_list arg);\n }\n@@ -1432,7 +1432,7 @@ else version (Darwin)\n   }\n \n     ///\n-    int  snprintf(scope char* s, size_t n, scope const char* format, ...);\n+    int  snprintf(scope char* s, size_t n, scope const char* format, scope const ...);\n     ///\n     int  vsnprintf(scope char* s, size_t n, scope const char* format, va_list arg);\n }\n@@ -1454,7 +1454,7 @@ else version (FreeBSD)\n   }\n \n     ///\n-    int  snprintf(scope char* s, size_t n, scope const char* format, ...);\n+    int  snprintf(scope char* s, size_t n, scope const char* format, scope const ...);\n     ///\n     int  vsnprintf(scope char* s, size_t n, scope const char* format, va_list arg);\n }\n@@ -1476,9 +1476,9 @@ else version (NetBSD)\n   }\n \n     ///\n-    int  snprintf(char* s, size_t n, in char* format, ...);\n+    int  snprintf(char* s, size_t n, const scope char* format, scope const ...);\n     ///\n-    int  vsnprintf(char* s, size_t n, in char* format, va_list arg);\n+    int  vsnprintf(char* s, size_t n, const scope char* format, va_list arg);\n }\n else version (OpenBSD)\n {\n@@ -1567,7 +1567,7 @@ else version (OpenBSD)\n     }\n \n     ///\n-    int  snprintf(scope char* s, size_t n, scope const char* format, ...);\n+    int  snprintf(scope char* s, size_t n, scope const char* format, scope const ...);\n     ///\n     int  vsnprintf(scope char* s, size_t n, scope const char* format, va_list arg);\n }\n@@ -1599,8 +1599,8 @@ else version (DragonFlyBSD)\n   enum __SALC = 0x4000;\n   enum __SIGN = 0x8000;\n \n-  int  snprintf(scope char* s, size_t n, scope const char* format, ...);\n-  int  vsnprintf(scope char* s, size_t n, scope const char* format, va_list arg);\n+    int  snprintf(scope char* s, size_t n, scope const char* format, scope const ...);\n+    int  vsnprintf(scope char* s, size_t n, scope const char* format, va_list arg);\n }\n else version (Solaris)\n {\n@@ -1620,7 +1620,7 @@ else version (Solaris)\n   }\n \n     ///\n-    int  snprintf(scope char* s, size_t n, scope const char* format, ...);\n+    int  snprintf(scope char* s, size_t n, scope const char* format, scope const ...);\n     ///\n     int  vsnprintf(scope char* s, size_t n, scope const char* format, va_list arg);\n }\n@@ -1641,8 +1641,8 @@ else version (CRuntime_Bionic)\n     int  fileno(FILE*);\n   }\n \n-  ///\n-    int  snprintf(scope char* s, size_t n, scope const char* format, ...);\n+    ///\n+    int  snprintf(scope char* s, size_t n, scope const char* format, scope const ...);\n     ///\n     int  vsnprintf(scope char* s, size_t n, scope const char* format, va_list arg);\n }\n@@ -1663,7 +1663,7 @@ else version (CRuntime_Musl)\n     }\n \n     ///\n-    int snprintf(scope char* s, size_t n, scope const char* format, ...);\n+    int snprintf(scope char* s, size_t n, scope const char* format, scope const ...);\n     ///\n     int vsnprintf(scope char* s, size_t n, scope const char* format, va_list arg);\n }\n@@ -1685,7 +1685,7 @@ else version (CRuntime_UClibc)\n   }\n \n     ///\n-    int  snprintf(scope char* s, size_t n, scope const char* format, ...);\n+    int  snprintf(scope char* s, size_t n, scope const char* format, scope const ...);\n     ///\n     int  vsnprintf(scope char* s, size_t n, scope const char* format, va_list arg);\n }"}, {"sha": "7caef4c13396cb03e6257f387185b29ff5b14623", "filename": "libphobos/libdruntime/core/stdc/stdlib.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fstdlib.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fstdlib.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fstdlib.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -14,7 +14,7 @@\n \n module core.stdc.stdlib;\n \n-private import core.stdc.config;\n+import core.stdc.config;\n public import core.stdc.stddef; // for wchar_t\n \n version (OSX)"}, {"sha": "a26811ca6236c02f098e3287c10ba84d6fbfa3d7", "filename": "libphobos/libdruntime/core/stdc/string.d", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fstring.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fstring.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fstring.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -35,51 +35,35 @@ nothrow:\n @nogc:\n \n ///\n-pure void* memchr(return const void* s, int c, size_t n);\n+inout(void)* memchr(return inout void* s, int c, size_t n) pure;\n ///\n-pure int   memcmp(scope const void* s1, scope const void* s2, size_t n);\n+int   memcmp(scope const void* s1, scope const void* s2, size_t n) pure;\n ///\n-pure void* memcpy(return void* s1, scope const void* s2, size_t n);\n+void* memcpy(return void* s1, scope const void* s2, size_t n) pure;\n version (Windows)\n {\n     ///\n     int memicmp(scope const char* s1, scope const char* s2, size_t n);\n }\n ///\n-pure void* memmove(return void* s1, scope const void* s2, size_t n);\n+void* memmove(return void* s1, scope const void* s2, size_t n) pure;\n ///\n-pure void* memset(return void* s, int c, size_t n);\n+void* memset(return void* s, int c, size_t n) pure;\n \n ///\n-pure char*  strcpy(return char* s1, scope const char* s2);\n+char*  strcat(return char* s1, scope const char* s2) pure;\n ///\n-pure char*  strncpy(return char* s1, scope const char* s2, size_t n);\n+inout(char)*  strchr(return inout(char)* s, int c) pure;\n ///\n-pure char*  strcat(return char* s1, scope const char* s2);\n-///\n-pure char*  strncat(return char* s1, scope const char* s2, size_t n);\n-///\n-pure int    strcmp(scope const char* s1, scope const char* s2);\n+int    strcmp(scope const char* s1, scope const char* s2) pure;\n ///\n int    strcoll(scope const char* s1, scope const char* s2);\n ///\n-pure int    strncmp(scope const char* s1, scope const char* s2, size_t n);\n-///\n-size_t strxfrm(scope char* s1, scope const char* s2, size_t n);\n-///\n-pure inout(char)*  strchr(return inout(char)* s, int c);\n-///\n-pure size_t strcspn(scope const char* s1, scope const char* s2);\n+char*  strcpy(return char* s1, scope const char* s2) pure;\n ///\n-pure inout(char)*  strpbrk(return inout(char)* s1, scope const char* s2);\n+size_t strcspn(scope const char* s1, scope const char* s2) pure;\n ///\n-pure inout(char)*  strrchr(return inout(char)* s, int c);\n-///\n-pure size_t strspn(scope const char* s1, scope const char* s2);\n-///\n-pure inout(char)*  strstr(return inout(char)* s1, scope const char* s2);\n-///\n-char*  strtok(return char* s1, scope const char* s2);\n+char*  strdup(scope const char *s);\n ///\n char*  strerror(int errnum);\n // This `strerror_r` definition is not following the POSIX standard\n@@ -94,6 +78,22 @@ else\n     int strerror_r(int errnum, scope char* buf, size_t buflen);\n }\n ///\n-pure size_t strlen(scope const char* s);\n+size_t strlen(scope const char* s) pure;\n ///\n-char*  strdup(scope const char *s);\n+char*  strncat(return char* s1, scope const char* s2, size_t n) pure;\n+///\n+int    strncmp(scope const char* s1, scope const char* s2, size_t n) pure;\n+///\n+char*  strncpy(return char* s1, scope const char* s2, size_t n) pure;\n+///\n+inout(char)*  strpbrk(return inout(char)* s1, scope const char* s2) pure;\n+///\n+inout(char)*  strrchr(return inout(char)* s, int c) pure;\n+///\n+size_t strspn(scope const char* s1, scope const char* s2) pure;\n+///\n+inout(char)*  strstr(return inout(char)* s1, scope const char* s2) pure;\n+///\n+char*  strtok(return char* s1, scope const char* s2);\n+///\n+size_t strxfrm(scope char* s1, scope const char* s2, size_t n);"}, {"sha": "4dd1b3ccc6697a9edeb7915a9e793111ff9bc8ce", "filename": "libphobos/libdruntime/core/stdc/tgmath.d", "status": "modified", "additions": 1, "deletions": 549, "changes": 550, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Ftgmath.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Ftgmath.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Ftgmath.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -14,7 +14,7 @@\n \n module core.stdc.tgmath;\n \n-private import core.stdc.config;\n+import core.stdc.config;\n private static import core.stdc.math;\n private static import core.stdc.complex;\n \n@@ -23,554 +23,6 @@ extern (C):\n nothrow:\n @nogc:\n \n-version (FreeBSD)\n-{\n-    ///\n-    alias core.stdc.math.acos          acos;\n-    ///\n-    alias core.stdc.math.acosf         acos;\n-    ///\n-    alias core.stdc.math.acosl         acos;\n-\n-    ///\n-    alias core.stdc.complex.cacos      acos;\n-    ///\n-    alias core.stdc.complex.cacosf     acos;\n-    ///\n-    alias core.stdc.complex.cacosl     acos;\n-\n-    ///\n-    alias core.stdc.math.asin          asin;\n-    ///\n-    alias core.stdc.math.asinf         asin;\n-    ///\n-    alias core.stdc.math.asinl         asin;\n-\n-    ///\n-    alias core.stdc.complex.casin      asin;\n-    ///\n-    alias core.stdc.complex.casinf     asin;\n-    ///\n-    alias core.stdc.complex.casinl     asin;\n-\n-    ///\n-    alias core.stdc.math.atan          atan;\n-    ///\n-    alias core.stdc.math.atanf         atan;\n-    ///\n-    alias core.stdc.math.atanl         atan;\n-\n-    ///\n-    alias core.stdc.complex.catan      atan;\n-    ///\n-    alias core.stdc.complex.catanf     atan;\n-    ///\n-    alias core.stdc.complex.catanl     atan;\n-\n-    ///\n-    alias core.stdc.math.atan2         atan2;\n-    ///\n-    alias core.stdc.math.atan2f        atan2;\n-    ///\n-    alias core.stdc.math.atan2l        atan2;\n-\n-    ///\n-    alias core.stdc.math.cos           cos;\n-    ///\n-    alias core.stdc.math.cosf          cos;\n-    ///\n-    alias core.stdc.math.cosl          cos;\n-\n-    ///\n-    alias core.stdc.complex.ccos       cos;\n-    ///\n-    alias core.stdc.complex.ccosf      cos;\n-    ///\n-    alias core.stdc.complex.ccosl      cos;\n-\n-    ///\n-    alias core.stdc.math.sin           sin;\n-    ///\n-    alias core.stdc.math.sinf          sin;\n-    ///\n-    alias core.stdc.math.sinl          sin;\n-\n-    ///\n-    alias core.stdc.complex.csin       csin;\n-    ///\n-    alias core.stdc.complex.csinf      csin;\n-    ///\n-    alias core.stdc.complex.csinl      csin;\n-\n-    ///\n-    alias core.stdc.math.tan           tan;\n-    ///\n-    alias core.stdc.math.tanf          tan;\n-    ///\n-    alias core.stdc.math.tanl          tan;\n-\n-    ///\n-    alias core.stdc.complex.ctan       tan;\n-    ///\n-    alias core.stdc.complex.ctanf      tan;\n-    ///\n-    alias core.stdc.complex.ctanl      tan;\n-\n-    ///\n-    alias core.stdc.math.acosh         acosh;\n-    ///\n-    alias core.stdc.math.acoshf        acosh;\n-    ///\n-    alias core.stdc.math.acoshl        acosh;\n-\n-    ///\n-    alias core.stdc.complex.cacosh     acosh;\n-    ///\n-    alias core.stdc.complex.cacoshf    acosh;\n-    ///\n-    alias core.stdc.complex.cacoshl    acosh;\n-\n-    ///\n-    alias core.stdc.math.asinh         asinh;\n-    ///\n-    alias core.stdc.math.asinhf        asinh;\n-    ///\n-    alias core.stdc.math.asinhl        asinh;\n-\n-    ///\n-    alias core.stdc.complex.casinh     asinh;\n-    ///\n-    alias core.stdc.complex.casinhf    asinh;\n-    ///\n-    alias core.stdc.complex.casinhl    asinh;\n-\n-    ///\n-    alias core.stdc.math.atanh         atanh;\n-    ///\n-    alias core.stdc.math.atanhf        atanh;\n-    ///\n-    alias core.stdc.math.atanhl        atanh;\n-\n-    ///\n-    alias core.stdc.complex.catanh     atanh;\n-    ///\n-    alias core.stdc.complex.catanhf    atanh;\n-    ///\n-    alias core.stdc.complex.catanhl    atanh;\n-\n-    ///\n-    alias core.stdc.math.cosh          cosh;\n-    ///\n-    alias core.stdc.math.coshf         cosh;\n-    ///\n-    alias core.stdc.math.coshl         cosh;\n-\n-    ///\n-    alias core.stdc.complex.ccosh      cosh;\n-    ///\n-    alias core.stdc.complex.ccoshf     cosh;\n-    ///\n-    alias core.stdc.complex.ccoshl     cosh;\n-\n-    ///\n-    alias core.stdc.math.sinh          sinh;\n-    ///\n-    alias core.stdc.math.sinhf         sinh;\n-    ///\n-    alias core.stdc.math.sinhl         sinh;\n-\n-    ///\n-    alias core.stdc.complex.csinh      sinh;\n-    ///\n-    alias core.stdc.complex.csinhf     sinh;\n-    ///\n-    alias core.stdc.complex.csinhl     sinh;\n-\n-    ///\n-    alias core.stdc.math.tanh          tanh;\n-    ///\n-    alias core.stdc.math.tanhf         tanh;\n-    ///\n-    alias core.stdc.math.tanhl         tanh;\n-\n-    ///\n-    alias core.stdc.complex.ctanh      tanh;\n-    ///\n-    alias core.stdc.complex.ctanhf     tanh;\n-    ///\n-    alias core.stdc.complex.ctanhl     tanh;\n-\n-    ///\n-    alias core.stdc.math.exp           exp;\n-    ///\n-    alias core.stdc.math.expf          exp;\n-    ///\n-    alias core.stdc.math.expl          exp;\n-\n-    ///\n-    alias core.stdc.complex.cexp       exp;\n-    ///\n-    alias core.stdc.complex.cexpf      exp;\n-    ///\n-    alias core.stdc.complex.cexpl      exp;\n-\n-    ///\n-    alias core.stdc.math.exp2          exp2;\n-    ///\n-    alias core.stdc.math.exp2f         exp2;\n-    ///\n-    alias core.stdc.math.exp2l         exp2;\n-\n-    ///\n-    alias core.stdc.math.expm1         expm1;\n-    ///\n-    alias core.stdc.math.expm1f        expm1;\n-    ///\n-    alias core.stdc.math.expm1l        expm1;\n-\n-    ///\n-    alias core.stdc.math.frexp         frexp;\n-    ///\n-    alias core.stdc.math.frexpf        frexp;\n-    ///\n-    alias core.stdc.math.frexpl        frexp;\n-\n-    ///\n-    alias core.stdc.math.ilogb         ilogb;\n-    ///\n-    alias core.stdc.math.ilogbf        ilogb;\n-    ///\n-    alias core.stdc.math.ilogbl        ilogb;\n-\n-    ///\n-    alias core.stdc.math.ldexp         ldexp;\n-    ///\n-    alias core.stdc.math.ldexpf        ldexp;\n-    ///\n-    alias core.stdc.math.ldexpl        ldexp;\n-\n-    ///\n-    alias core.stdc.math.log           log;\n-    ///\n-    alias core.stdc.math.logf          log;\n-    ///\n-    alias core.stdc.math.logl          log;\n-\n-    ///\n-    alias core.stdc.complex.clog       log;\n-    ///\n-    alias core.stdc.complex.clogf      log;\n-    ///\n-    alias core.stdc.complex.clogl      log;\n-\n-    ///\n-    alias core.stdc.math.log10         log10;\n-    ///\n-    alias core.stdc.math.log10f        log10;\n-    ///\n-    alias core.stdc.math.log10l        log10;\n-\n-    ///\n-    alias core.stdc.math.log1p         log1p;\n-    ///\n-    alias core.stdc.math.log1pf        log1p;\n-    ///\n-    alias core.stdc.math.log1pl        log1p;\n-\n-    ///\n-    alias core.stdc.math.log2          log2;\n-    ///\n-    alias core.stdc.math.log2f         log2;\n-    ///\n-    alias core.stdc.math.log2l         log2;\n-\n-    ///\n-    alias core.stdc.math.logb          logb;\n-    ///\n-    alias core.stdc.math.logbf         logb;\n-    ///\n-    alias core.stdc.math.logbl         logb;\n-\n-    ///\n-    alias core.stdc.math.modf          modf;\n-    ///\n-    alias core.stdc.math.modff         modf;\n-//  alias core.stdc.math.modfl         modf;\n-\n-    ///\n-    alias core.stdc.math.scalbn        scalbn;\n-    ///\n-    alias core.stdc.math.scalbnf       scalbn;\n-    ///\n-    alias core.stdc.math.scalbnl       scalbn;\n-\n-    ///\n-    alias core.stdc.math.scalbln       scalbln;\n-    ///\n-    alias core.stdc.math.scalblnf      scalbln;\n-    ///\n-    alias core.stdc.math.scalblnl      scalbln;\n-\n-    ///\n-    alias core.stdc.math.cbrt          cbrt;\n-    ///\n-    alias core.stdc.math.cbrtf         cbrt;\n-    ///\n-    alias core.stdc.math.cbrtl         cbrt;\n-\n-    ///\n-    alias core.stdc.math.fabs          fabs;\n-    ///\n-    alias core.stdc.math.fabsf         fabs;\n-    ///\n-    alias core.stdc.math.fabsl         fabs;\n-\n-    ///\n-    alias core.stdc.complex.cabs       fabs;\n-    ///\n-    alias core.stdc.complex.cabsf      fabs;\n-    ///\n-    alias core.stdc.complex.cabsl      fabs;\n-\n-    ///\n-    alias core.stdc.math.hypot         hypot;\n-    ///\n-    alias core.stdc.math.hypotf        hypot;\n-    ///\n-    alias core.stdc.math.hypotl        hypot;\n-\n-    ///\n-    alias core.stdc.math.pow           pow;\n-    ///\n-    alias core.stdc.math.powf          pow;\n-    ///\n-    alias core.stdc.math.powl          pow;\n-\n-    ///\n-    alias core.stdc.complex.cpow       pow;\n-    ///\n-    alias core.stdc.complex.cpowf      pow;\n-    ///\n-    alias core.stdc.complex.cpowl      pow;\n-\n-    ///\n-    alias core.stdc.math.sqrt          sqrt;\n-    ///\n-    alias core.stdc.math.sqrtf         sqrt;\n-    ///\n-    alias core.stdc.math.sqrtl         sqrt;\n-\n-    ///\n-    alias core.stdc.complex.csqrt      sqrt;\n-    ///\n-    alias core.stdc.complex.csqrtf     sqrt;\n-    ///\n-    alias core.stdc.complex.csqrtl     sqrt;\n-\n-    ///\n-    alias core.stdc.math.erf           erf;\n-    ///\n-    alias core.stdc.math.erff          erf;\n-    ///\n-    alias core.stdc.math.erfl          erf;\n-\n-    ///\n-    alias core.stdc.math.erfc          erfc;\n-    ///\n-    alias core.stdc.math.erfcf         erfc;\n-    ///\n-    alias core.stdc.math.erfcl         erfc;\n-\n-    ///\n-    alias core.stdc.math.lgamma        lgamma;\n-    ///\n-    alias core.stdc.math.lgammaf       lgamma;\n-    ///\n-    alias core.stdc.math.lgammal       lgamma;\n-\n-    ///\n-    alias core.stdc.math.tgamma        tgamma;\n-    ///\n-    alias core.stdc.math.tgammaf       tgamma;\n-    ///\n-    alias core.stdc.math.tgammal       tgamma;\n-\n-    ///\n-    alias core.stdc.math.ceil          ceil;\n-    ///\n-    alias core.stdc.math.ceilf         ceil;\n-    ///\n-    alias core.stdc.math.ceill         ceil;\n-\n-    ///\n-    alias core.stdc.math.floor         floor;\n-    ///\n-    alias core.stdc.math.floorf        floor;\n-    ///\n-    alias core.stdc.math.floorl        floor;\n-\n-    ///\n-    alias core.stdc.math.nearbyint     nearbyint;\n-    ///\n-    alias core.stdc.math.nearbyintf    nearbyint;\n-    ///\n-    alias core.stdc.math.nearbyintl    nearbyint;\n-\n-    ///\n-    alias core.stdc.math.rint          rint;\n-    ///\n-    alias core.stdc.math.rintf         rint;\n-    ///\n-    alias core.stdc.math.rintl         rint;\n-\n-    ///\n-    alias core.stdc.math.lrint         lrint;\n-    ///\n-    alias core.stdc.math.lrintf        lrint;\n-    ///\n-    alias core.stdc.math.lrintl        lrint;\n-\n-    ///\n-    alias core.stdc.math.llrint        llrint;\n-    ///\n-    alias core.stdc.math.llrintf       llrint;\n-    ///\n-    alias core.stdc.math.llrintl       llrint;\n-\n-    ///\n-    alias core.stdc.math.round         round;\n-    ///\n-    alias core.stdc.math.roundf        round;\n-    ///\n-    alias core.stdc.math.roundl        round;\n-\n-    ///\n-    alias core.stdc.math.lround        lround;\n-    ///\n-    alias core.stdc.math.lroundf       lround;\n-    ///\n-    alias core.stdc.math.lroundl       lround;\n-\n-    ///\n-    alias core.stdc.math.llround       llround;\n-    ///\n-    alias core.stdc.math.llroundf      llround;\n-    ///\n-    alias core.stdc.math.llroundl      llround;\n-\n-    ///\n-    alias core.stdc.math.trunc         trunc;\n-    ///\n-    alias core.stdc.math.truncf        trunc;\n-    ///\n-    alias core.stdc.math.truncl        trunc;\n-\n-    ///\n-    alias core.stdc.math.fmod          fmod;\n-    ///\n-    alias core.stdc.math.fmodf         fmod;\n-    ///\n-    alias core.stdc.math.fmodl         fmod;\n-\n-    ///\n-    alias core.stdc.math.remainder     remainder;\n-    ///\n-    alias core.stdc.math.remainderf    remainder;\n-    ///\n-    alias core.stdc.math.remainderl    remainder;\n-\n-    ///\n-    alias core.stdc.math.remquo        remquo;\n-    ///\n-    alias core.stdc.math.remquof       remquo;\n-    ///\n-    alias core.stdc.math.remquol       remquo;\n-\n-    ///\n-    alias core.stdc.math.copysign      copysign;\n-    ///\n-    alias core.stdc.math.copysignf     copysign;\n-    ///\n-    alias core.stdc.math.copysignl     copysign;\n-\n-//  alias core.stdc.math.nan           nan;\n-//  alias core.stdc.math.nanf          nan;\n-//  alias core.stdc.math.nanl          nan;\n-\n-    ///\n-    alias core.stdc.math.nextafter     nextafter;\n-    ///\n-    alias core.stdc.math.nextafterf    nextafter;\n-    ///\n-    alias core.stdc.math.nextafterl    nextafter;\n-\n-    ///\n-    alias core.stdc.math.nexttoward    nexttoward;\n-    ///\n-    alias core.stdc.math.nexttowardf   nexttoward;\n-    ///\n-    alias core.stdc.math.nexttowardl   nexttoward;\n-\n-    ///\n-    alias core.stdc.math.fdim          fdim;\n-    ///\n-    alias core.stdc.math.fdimf         fdim;\n-    ///\n-    alias core.stdc.math.fdiml         fdim;\n-\n-    ///\n-    alias core.stdc.math.fmax          fmax;\n-    ///\n-    alias core.stdc.math.fmaxf         fmax;\n-    ///\n-    alias core.stdc.math.fmaxl         fmax;\n-\n-    ///\n-    alias core.stdc.math.fmin          fmin;\n-    ///\n-    alias core.stdc.math.fmin          fmin;\n-    ///\n-    alias core.stdc.math.fminl         fmin;\n-\n-    ///\n-    alias core.stdc.math.fma           fma;\n-    ///\n-    alias core.stdc.math.fmaf          fma;\n-    ///\n-    alias core.stdc.math.fmal          fma;\n-\n-    ///\n-    alias core.stdc.complex.carg       carg;\n-    ///\n-    alias core.stdc.complex.cargf      carg;\n-    ///\n-    alias core.stdc.complex.cargl      carg;\n-\n-    ///\n-    alias core.stdc.complex.cimag      cimag;\n-    ///\n-    alias core.stdc.complex.cimagf     cimag;\n-    ///\n-    alias core.stdc.complex.cimagl     cimag;\n-\n-    ///\n-    alias core.stdc.complex.conj       conj;\n-    ///\n-    alias core.stdc.complex.conjf      conj;\n-    ///\n-    alias core.stdc.complex.conjl      conj;\n-\n-    ///\n-    alias core.stdc.complex.cproj      cproj;\n-    ///\n-    alias core.stdc.complex.cprojf     cproj;\n-    ///\n-    alias core.stdc.complex.cprojl     cproj;\n-\n-//  alias core.stdc.complex.creal      creal;\n-//  alias core.stdc.complex.crealf     creal;\n-//  alias core.stdc.complex.creall     creal;\n-}\n version (NetBSD)\n {\n     ///"}, {"sha": "b19c3c7a899f83b5819b1399308b8ff2bb8d30b0", "filename": "libphobos/libdruntime/core/stdc/time.d", "status": "modified", "additions": 7, "deletions": 214, "changes": 221, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Ftime.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Ftime.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Ftime.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -15,138 +15,20 @@\n \n module core.stdc.time;\n \n-private import core.stdc.config;\n+version (Posix)\n+    public import core.sys.posix.stdc.time;\n+else version (Windows)\n+    public import core.sys.windows.stdc.time;\n+else\n+    static assert(0, \"unsupported system\");\n \n-version (OSX)\n-    version = Darwin;\n-else version (iOS)\n-    version = Darwin;\n-else version (TVOS)\n-    version = Darwin;\n-else version (WatchOS)\n-    version = Darwin;\n+import core.stdc.config;\n \n extern (C):\n @trusted: // There are only a few functions here that use unsafe C strings.\n nothrow:\n @nogc:\n \n-version (Windows)\n-{\n-    ///\n-    struct tm\n-    {\n-        int     tm_sec;     /// seconds after the minute - [0, 60]\n-        int     tm_min;     /// minutes after the hour - [0, 59]\n-        int     tm_hour;    /// hours since midnight - [0, 23]\n-        int     tm_mday;    /// day of the month - [1, 31]\n-        int     tm_mon;     /// months since January - [0, 11]\n-        int     tm_year;    /// years since 1900\n-        int     tm_wday;    /// days since Sunday - [0, 6]\n-        int     tm_yday;    /// days since January 1 - [0, 365]\n-        int     tm_isdst;   /// Daylight Saving Time flag\n-    }\n-}\n-else version (Posix)\n-{\n-    ///\n-    struct tm\n-    {\n-        int     tm_sec;     /// seconds after the minute [0-60]\n-        int     tm_min;     /// minutes after the hour [0-59]\n-        int     tm_hour;    /// hours since midnight [0-23]\n-        int     tm_mday;    /// day of the month [1-31]\n-        int     tm_mon;     /// months since January [0-11]\n-        int     tm_year;    /// years since 1900\n-        int     tm_wday;    /// days since Sunday [0-6]\n-        int     tm_yday;    /// days since January 1 [0-365]\n-        int     tm_isdst;   /// Daylight Savings Time flag\n-        c_long  tm_gmtoff;  /// offset from CUT in seconds\n-        char*   tm_zone;    /// timezone abbreviation\n-    }\n-}\n-\n-version (Posix)\n-{\n-    public import core.sys.posix.sys.types : time_t, clock_t;\n-}\n-else version (Windows)\n-{\n-    ///\n-    alias c_long time_t;\n-    ///\n-    alias c_long clock_t;\n-}\n-\n-///\n-version (Windows)\n-{\n-    enum clock_t CLOCKS_PER_SEC = 1000;\n-    clock_t clock();\n-}\n-else version (OSX)\n-{\n-    enum clock_t CLOCKS_PER_SEC = 1_000_000; // was 100 until OSX 10.4/10.5\n-    version (X86)\n-        extern (C) pragma(mangle, \"clock$UNIX2003\") clock_t clock();\n-    else\n-        clock_t clock();\n-}\n-else version (Darwin) // other Darwins (iOS, TVOS, WatchOS)\n-{\n-    enum clock_t CLOCKS_PER_SEC = 1_000_000;\n-    clock_t clock();\n-}\n-else version (FreeBSD)\n-{\n-    enum clock_t CLOCKS_PER_SEC = 128;\n-    clock_t clock();\n-}\n-else version (NetBSD)\n-{\n-    enum clock_t CLOCKS_PER_SEC = 100;\n-    clock_t clock();\n-}\n-else version (OpenBSD)\n-{\n-    enum clock_t CLOCKS_PER_SEC = 100;\n-    clock_t clock();\n-}\n-else version (DragonFlyBSD)\n-{\n-    enum clock_t CLOCKS_PER_SEC = 128;\n-    clock_t clock();\n-}\n-else version (Solaris)\n-{\n-    enum clock_t CLOCKS_PER_SEC = 1_000_000;\n-    clock_t clock();\n-}\n-else version (CRuntime_Glibc)\n-{\n-    enum clock_t CLOCKS_PER_SEC = 1_000_000;\n-    clock_t clock();\n-}\n-else version (CRuntime_Musl)\n-{\n-    enum clock_t CLOCKS_PER_SEC = 1_000_000;\n-    clock_t clock();\n-}\n-else version (CRuntime_Bionic)\n-{\n-    enum clock_t CLOCKS_PER_SEC = 1_000_000;\n-    clock_t clock();\n-}\n-else version (CRuntime_UClibc)\n-{\n-    enum clock_t CLOCKS_PER_SEC = 1_000_000;\n-    clock_t clock();\n-}\n-else\n-{\n-    static assert(0, \"unsupported system\");\n-}\n-\n ///\n pure double  difftime(time_t time1, time_t time0); // MT-Safe\n ///\n@@ -164,92 +46,3 @@ time_t  time(scope time_t* timer);\n @system tm*     localtime(const scope time_t* timer); // @system: MT-Unsafe race:tmbuf env locale\n ///\n @system size_t  strftime(scope char* s, size_t maxsize, const scope char* format, const scope tm* timeptr); // @system: MT-Safe env locale\n-\n-version (Windows)\n-{\n-    ///\n-    void  tzset();                           // non-standard\n-    ///\n-    void  _tzset();                          // non-standard\n-    ///\n-    @system char* _strdate(return scope char* s);                 // non-standard\n-    ///\n-    @system char* _strtime(return scope char* s);                 // non-standard\n-\n-    ///\n-    extern __gshared const(char)*[2] tzname; // non-standard\n-}\n-else version (Darwin)\n-{\n-    ///\n-    void tzset();                            // non-standard\n-    ///\n-    extern __gshared const(char)*[2] tzname; // non-standard\n-}\n-else version (CRuntime_Glibc)\n-{\n-    ///\n-    void tzset();                            // non-standard\n-    ///\n-    extern __gshared const(char)*[2] tzname; // non-standard\n-}\n-else version (FreeBSD)\n-{\n-    ///\n-    void tzset();                            // non-standard\n-    ///\n-    extern __gshared const(char)*[2] tzname; // non-standard\n-}\n-else version (NetBSD)\n-{\n-    ///\n-    void tzset();                            // non-standard\n-    ///\n-    extern __gshared const(char)*[2] tzname; // non-standard\n-}\n-else version (OpenBSD)\n-{\n-    ///\n-    void tzset();                            // non-standard\n-    ///\n-    extern __gshared const(char)*[2] tzname; // non-standard\n-}\n-else version (DragonFlyBSD)\n-{\n-    ///\n-    void tzset();                            // non-standard\n-    ///\n-    extern __gshared const(char)*[2] tzname; // non-standard\n-}\n-else version (Solaris)\n-{\n-    ///\n-    void tzset();\n-    ///\n-    extern __gshared const(char)*[2] tzname;\n-}\n-else version (CRuntime_Bionic)\n-{\n-    ///\n-    void tzset();\n-    ///\n-    extern __gshared const(char)*[2] tzname;\n-}\n-else version (CRuntime_Musl)\n-{\n-    ///\n-    void tzset();                            // non-standard\n-    ///\n-    extern __gshared const(char)*[2] tzname; // non-standard\n-}\n-else version (CRuntime_UClibc)\n-{\n-    ///\n-    void tzset();\n-    ///\n-    extern __gshared const(char)*[2] tzname;\n-}\n-else\n-{\n-    static assert(false, \"Unsupported platform\");\n-}"}, {"sha": "eecc8ef918ed37087523daf2c508896258a41705", "filename": "libphobos/libdruntime/core/stdc/wchar_.d", "status": "modified", "additions": 34, "deletions": 52, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fwchar_.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fwchar_.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fwchar_.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -12,14 +12,11 @@\n  * Standards: ISO/IEC 9899:1999 (E)\n  */\n \n-/* NOTE: This file has been patched from the original DMD distribution to\n- * work with the GDC compiler.\n- */\n module core.stdc.wchar_;\n \n-private import core.stdc.config;\n-private import core.stdc.stdarg; // for va_list\n-private import core.stdc.stdio;  // for FILE, not exposed per spec\n+import core.stdc.config;\n+import core.stdc.stdarg; // for va_list\n+import core.stdc.stdio;  // for FILE, not exposed per spec\n public import core.stdc.stddef;  // for wchar_t\n public import core.stdc.time;    // for tm\n public import core.stdc.stdint;  // for WCHAR_MIN, WCHAR_MAX\n@@ -131,44 +128,29 @@ alias wchar_t wint_t;\n enum wchar_t WEOF = 0xFFFF;\n \n ///\n-int fwprintf(FILE* stream, in wchar_t* format, ...);\n+int fwprintf(FILE* stream, const scope wchar_t* format, scope const ...);\n ///\n-int fwscanf(FILE* stream, in wchar_t* format, ...);\n-int swscanf(in wchar_t* s, in wchar_t* format, ...);\n+int fwscanf(FILE* stream, const scope wchar_t* format, scope ...);\n ///\n-int vfwprintf(FILE* stream, in wchar_t* format, va_list arg);\n+int swprintf(wchar_t* s, size_t n, const scope wchar_t* format, scope const ...);\n ///\n-int vfwscanf(FILE* stream, in wchar_t* format, va_list arg);\n-int vswscanf(in wchar_t* s, in wchar_t* format, va_list arg);\n+int swscanf(const scope wchar_t* s, const scope wchar_t* format, scope ...);\n ///\n-int vwprintf(in wchar_t* format, va_list arg);\n+int vfwprintf(FILE* stream, const scope wchar_t* format, va_list arg);\n ///\n-int vwscanf(in wchar_t* format, va_list arg);\n+int vfwscanf(FILE* stream, const scope wchar_t* format, va_list arg);\n ///\n-int wprintf(in wchar_t* format, ...);\n+int vswprintf(wchar_t* s, size_t n, const scope wchar_t* format, va_list arg);\n ///\n-int wscanf(in wchar_t* format, ...);\n-\n-/*\n- * Windows has 2 versions of swprintf and vswprintf.  MinGW defaults to the\n- * Microsoft signature.  Alias to match DMD/ANSI signature.\n- */\n-version (MinGW)\n-{\n-    ///\n-    int _snwprintf(wchar_t* s, size_t n, in wchar_t* format, ...);\n-    alias _snwprintf swprintf;\n-    ///\n-    int _vsnwprintf(wchar_t* s, size_t n, in wchar_t* format, va_list arg);\n-    alias _vsnwprintf vswprintf;\t\n-}\n-else\n-{\n-    ///\n-    int swprintf(wchar_t* s, size_t n, in wchar_t* format, ...);\n-    ///\n-    int vswprintf(wchar_t* s, size_t n, in wchar_t* format, va_list arg);\n-}\n+int vswscanf(const scope wchar_t* s, const scope wchar_t* format, va_list arg);\n+///\n+int vwprintf(const scope wchar_t* format, va_list arg);\n+///\n+int vwscanf(const scope wchar_t* format, va_list arg);\n+///\n+int wprintf(const scope wchar_t* format, scope const ...);\n+///\n+int wscanf(const scope wchar_t* format, scope ...);\n \n // No unsafe pointer manipulation.\n @trusted\n@@ -182,7 +164,7 @@ else\n ///\n wchar_t* fgetws(wchar_t* s, int n, FILE* stream);\n ///\n-int      fputws(in wchar_t* s, FILE* stream);\n+int      fputws(const scope wchar_t* s, FILE* stream);\n \n // No unsafe pointer manipulation.\n extern (D) @trusted\n@@ -215,19 +197,19 @@ extern (D) @trusted\n }\n \n ///\n-double  wcstod(in wchar_t* nptr, wchar_t** endptr);\n+double  wcstod(const scope wchar_t* nptr, wchar_t** endptr);\n ///\n-float   wcstof(in wchar_t* nptr, wchar_t** endptr);\n+float   wcstof(const scope wchar_t* nptr, wchar_t** endptr);\n ///\n-real    wcstold(in wchar_t* nptr, wchar_t** endptr);\n+real    wcstold(const scope wchar_t* nptr, wchar_t** endptr);\n ///\n-c_long  wcstol(in wchar_t* nptr, wchar_t** endptr, int base);\n+c_long  wcstol(const scope wchar_t* nptr, wchar_t** endptr, int base);\n ///\n-long    wcstoll(in wchar_t* nptr, wchar_t** endptr, int base);\n+long    wcstoll(const scope wchar_t* nptr, wchar_t** endptr, int base);\n ///\n-c_ulong wcstoul(in wchar_t* nptr, wchar_t** endptr, int base);\n+c_ulong wcstoul(const scope wchar_t* nptr, wchar_t** endptr, int base);\n ///\n-ulong   wcstoull(in wchar_t* nptr, wchar_t** endptr, int base);\n+ulong   wcstoull(const scope wchar_t* nptr, wchar_t** endptr, int base);\n \n ///\n pure wchar_t* wcscpy(return wchar_t* s1, scope const wchar_t* s2);\n@@ -263,7 +245,7 @@ wchar_t* wcstok(return wchar_t* s1, scope const wchar_t* s2, wchar_t** ptr);\n pure size_t wcslen(scope const wchar_t* s);\n \n ///\n-pure wchar_t* wmemchr(return const wchar_t* s, wchar_t c, size_t n);\n+pure inout(wchar_t)* wmemchr(return inout wchar_t* s, wchar_t c, size_t n);\n ///\n pure int      wmemcmp(scope const wchar_t* s1, scope const wchar_t* s2, size_t n);\n ///\n@@ -274,7 +256,7 @@ pure wchar_t* wmemmove(return wchar_t* s1, scope const wchar_t* s2, size_t n);\n pure wchar_t* wmemset(return wchar_t* s, wchar_t c, size_t n);\n \n ///\n-size_t wcsftime(wchar_t* s, size_t maxsize, in wchar_t* format, in tm* timeptr);\n+size_t wcsftime(wchar_t* s, size_t maxsize, const scope wchar_t* format, const scope tm* timeptr);\n \n version (Windows)\n {\n@@ -298,14 +280,14 @@ version (Windows)\n }\n \n ///\n-int    mbsinit(in mbstate_t* ps);\n+int    mbsinit(const scope mbstate_t* ps);\n ///\n-size_t mbrlen(in char* s, size_t n, mbstate_t* ps);\n+size_t mbrlen(const scope char* s, size_t n, mbstate_t* ps);\n ///\n-size_t mbrtowc(wchar_t* pwc, in char* s, size_t n, mbstate_t* ps);\n+size_t mbrtowc(wchar_t* pwc, const scope char* s, size_t n, mbstate_t* ps);\n ///\n size_t wcrtomb(char* s, wchar_t wc, mbstate_t* ps);\n ///\n-size_t mbsrtowcs(wchar_t* dst, in char** src, size_t len, mbstate_t* ps);\n+size_t mbsrtowcs(wchar_t* dst, const scope char** src, size_t len, mbstate_t* ps);\n ///\n-size_t wcsrtombs(char* dst, in wchar_t** src, size_t len, mbstate_t* ps);\n+size_t wcsrtombs(char* dst, const scope wchar_t** src, size_t len, mbstate_t* ps);"}, {"sha": "b37e8322dc34f40d98878dbc00b7a0e2729895ce", "filename": "libphobos/libdruntime/core/stdc/wctype.d", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fwctype.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fwctype.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fwctype.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -54,12 +54,12 @@ pure int iswxdigit(wint_t wc);\n ///\n int       iswctype(wint_t wc, wctype_t desc);\n ///\n-@system wctype_t  wctype(in char* property);\n+@system wctype_t  wctype(const scope char* property);\n ///\n pure wint_t    towlower(wint_t wc);\n ///\n pure wint_t    towupper(wint_t wc);\n ///\n wint_t    towctrans(wint_t wc, wctrans_t desc);\n ///\n-@system wctrans_t wctrans(in char* property);\n+@system wctrans_t wctrans(const scope char* property);"}, {"sha": "e2756e10c91ba3c2d93d1467ce6acc2e2bab5cd0", "filename": "libphobos/libdruntime/core/sys/bionic/err.d", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fbionic%2Ferr.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fbionic%2Ferr.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fbionic%2Ferr.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -0,0 +1,23 @@\n+/**\n+  * D header file for Bionic err.h.\n+  *\n+  * Copyright: Copyright \u00a9 2019, The D Language Foundation\n+  * License: <a href=\"http://www.boost.org/LICENSE_1_0.txt\">Boost License 1.0</a>.\n+  * Authors: Ernesto Castellotti\n+  */\n+module core.sys.bionic.err;\n+import core.stdc.stdarg : va_list;\n+\n+version (CRuntime_Bionic):\n+extern (C):\n+nothrow:\n+@nogc:\n+\n+void err(int eval, scope const char* fmt, ...);\n+void errx(int eval, scope const char* fmt, ...);\n+void warn(scope const char* fmt, ...);\n+void warnx(scope const char* fmt, ...);\n+void verr(int eval, scope const char* fmt, va_list args);\n+void verrx(int eval, scope const char* fmt, va_list args);\n+void vwarn(scope const char* fmt, va_list args);\n+void vwarnx(scope const char* fmt, va_list args);"}, {"sha": "a38d9009e9d38f25150c32485b98f25436881a58", "filename": "libphobos/libdruntime/core/sys/darwin/dlfcn.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fdarwin%2Fdlfcn.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fdarwin%2Fdlfcn.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fdarwin%2Fdlfcn.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -33,7 +33,7 @@ struct Dl_info\n     void*        dli_saddr;\n }\n \n-int dladdr(in void* addr, Dl_info* info);\n+int dladdr(const scope void* addr, Dl_info* info);\n \n enum RTLD_NOLOAD = 0x10;\n enum RTLD_NODELETE = 0x80;"}, {"sha": "d96c790f3b66e1db206a8ef57c26028cdcecb1c9", "filename": "libphobos/libdruntime/core/sys/darwin/err.d", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fdarwin%2Ferr.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fdarwin%2Ferr.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fdarwin%2Ferr.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -0,0 +1,41 @@\n+/**\n+  * D header file for Darwin err.h.\n+  *\n+  * Copyright: Copyright \u00a9 2019, The D Language Foundation\n+  * License: <a href=\"http://www.boost.org/LICENSE_1_0.txt\">Boost License 1.0</a>.\n+  * Authors: Ernesto Castellotti\n+  */\n+module core.sys.darwin.err;\n+import core.stdc.stdarg : va_list;\n+\n+version (OSX)\n+    version = Darwin;\n+else version (iOS)\n+    version = Darwin;\n+else version (TVOS)\n+    version = Darwin;\n+else version (WatchOS)\n+    version = Darwin;\n+\n+\n+version (Darwin):\n+extern (C):\n+nothrow:\n+@nogc:\n+\n+alias ExitFunction = void function(int);\n+\n+void err(int eval, scope const char* fmt, ...);\n+void errc(int eval, int code, scope const char* fmt, ...);\n+void errx(int eval, scope const char* fmt, ...);\n+void warn(scope const char* fmt, ...);\n+void warnc(int code, scope const char* fmt, ...);\n+void warnx(scope const char* fmt, ...);\n+void verr(int eval, scope const char* fmt, va_list args);\n+void verrc(int eval, int code, scope const char* fmt, va_list args);\n+void verrx(int eval, scope const char* fmt, va_list args);\n+void vwarn(scope const char* fmt, va_list args);\n+void vwarnc(int code, scope const char* fmt, va_list args);\n+void vwarnx(scope const char* fmt, va_list args);\n+void err_set_file(void* vfp);\n+void err_set_exit(ExitFunction exitf);"}, {"sha": "a2540361d0f5918c57ee2070fa79c95c7179c35f", "filename": "libphobos/libdruntime/core/sys/darwin/ifaddrs.d", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fdarwin%2Fifaddrs.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fdarwin%2Fifaddrs.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fdarwin%2Fifaddrs.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -0,0 +1,77 @@\n+/*******************************************************************************\n+\n+    Binding for Mac OSX's <ifaddr.h>, expose network interface addresses\n+\n+    The following functions are present as of Mac OSX 10.15:\n+    - getifaddrs(3):   get interface addresses\n+    - freeifaddrs(3):  deallocates the return value of `getifaddrs`\n+    - getifmaddrs(3):  get multicast group membership\n+    - freeifmaddrs(3): deallocates the return value of `getifmaddrs`\n+\n+    Copyright:  Copyright \u00a9 2020, The D Language Foundation\n+    License:    $(HTTP www.boost.org/LICENSE_1_0.txt, Boost License 1.0).\n+    Authors:    Daniel Graczer\n+\n+*******************************************************************************/\n+\n+module core.sys.darwin.ifaddrs;\n+\n+version (OSX)\n+    version = Darwin;\n+else version (iOS)\n+    version = Darwin;\n+else version (TVOS)\n+    version = Darwin;\n+else version (WatchOS)\n+    version = Darwin;\n+\n+version (Darwin):\n+extern (C):\n+nothrow:\n+@nogc:\n+@system:\n+\n+import core.sys.posix.sys.socket;\n+\n+///\n+struct ifaddrs\n+{\n+    /// Next item in the list\n+    ifaddrs* ifa_next;\n+    /// Name of the interface\n+    char* ifa_name;\n+    /// Flags from SIOCGIFFLAGS\n+    uint ifa_flags;\n+    /// Address of interface\n+    sockaddr* ifa_addr;\n+    /// Netmask of interface\n+    sockaddr* ifa_netmask;\n+    /// Point-to-point destination addresss\n+    sockaddr* if_dstaddr;\n+    /// Address specific data\n+    void* ifa_data;\n+}\n+\n+/// Returns: linked list of ifaddrs structures describing interfaces\n+int getifaddrs(ifaddrs**);\n+/// Frees the linked list returned by getifaddrs\n+void freeifaddrs(ifaddrs*);\n+\n+///\n+struct ifmaddrs\n+{\n+    /// Pointer to next struct\n+    ifmaddrs* ifma_next;\n+    /// Interface name (AF_LINK)\n+    sockaddr* ifma_name;\n+    /// Multicast address\n+    sockaddr* ifma_addr;\n+    /// Link-layer translation, if any\n+    sockaddr* ifma_lladdr;\n+}\n+\n+/// Stores a reference to a linked list of the multicast memberships\n+/// on the local machine in the memory referenced by ifmaddrs\n+int getifmaddrs(ifmaddrs**);\n+/// Frees the list allocated by getifmaddrs\n+void freeifmaddrs(ifmaddrs*);"}, {"sha": "62d1a77926240553e0570744bc57a65c39158f00", "filename": "libphobos/libdruntime/core/sys/darwin/mach/dyld.d", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fdarwin%2Fmach%2Fdyld.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fdarwin%2Fmach%2Fdyld.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fdarwin%2Fmach%2Fdyld.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -33,7 +33,7 @@ uint         _dyld_image_count();\n const(char)* _dyld_get_image_name(uint image_index);\n mach_header* _dyld_get_image_header(uint image_index);\n intptr_t     _dyld_get_image_vmaddr_slide(uint image_index);\n-void         _dyld_register_func_for_add_image(void function(in mach_header* mh, intptr_t vmaddr_slide));\n-void         _dyld_register_func_for_remove_image(void function(in mach_header* mh, intptr_t vmaddr_slide));\n+void         _dyld_register_func_for_add_image(void function(const scope mach_header* mh, intptr_t vmaddr_slide));\n+void         _dyld_register_func_for_remove_image(void function(const scope mach_header* mh, intptr_t vmaddr_slide));\n \n "}, {"sha": "fd1a8e4ea366f7de5c047c11381c5f017acbd551", "filename": "libphobos/libdruntime/core/sys/darwin/mach/getsect.d", "status": "modified", "additions": 86, "deletions": 86, "changes": 172, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fdarwin%2Fmach%2Fgetsect.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fdarwin%2Fmach%2Fgetsect.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fdarwin%2Fmach%2Fgetsect.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -44,15 +44,15 @@ version (CoreDdoc)\n      * Returns the section data of the given section in the given segment in the\n      * mach executable it is linked into.\n      *\n-     * ___\n+     * ---\n      * void main()\n      * {\n      *      import core.sys.darwin.mach.getsect;\n      *      int size;\n      *      assert(getsectdata(\"__TEXT\", \"__text\", &size));\n      *      assert(size > 0);\n      * }\n-     * ___\n+     * ---\n      *\n      * Params:\n      *  segname = the name of the segment\n@@ -63,8 +63,8 @@ version (CoreDdoc)\n      * Returns: a pointer to the section data or `null` if it doesn't exist\n      */\n     char* getsectdata(\n-        in char* segname,\n-        in char* sectname,\n+        const scope char* segname,\n+        const scope char* sectname,\n         c_ulong *size\n     );\n \n@@ -74,15 +74,15 @@ version (CoreDdoc)\n      * Returns the section data of the given section in the given segment in the\n      * given framework.\n      *\n-     * ___\n+     * ---\n      * void main()\n      * {\n      *      import core.sys.darwin.mach.getsect;\n      *      int size;\n      *      assert(getsectdatafromFramework(\"Foundation\", \"__TEXT\", \"__text\", &size));\n      *      assert(size > 0);\n      * }\n-     * ___\n+     * ---\n      *\n      * Params:\n      *  FrameworkName = the name of the framework to get the section data from\n@@ -94,9 +94,9 @@ version (CoreDdoc)\n      * Returns: a pointer to the section data or `null` if it doesn't exist\n      */\n     char* getsectdatafromFramework(\n-        in char* FrameworkName,\n-        in char* segname,\n-        in char* sectname,\n+        const scope char* FrameworkName,\n+        const scope char* segname,\n+        const scope char* sectname,\n         c_ulong* size\n     );\n \n@@ -115,13 +115,13 @@ version (CoreDdoc)\n      * Returns the section structure of the given section in the given segment\n      * in the mach executable it is linked into.\n      *\n-     * ___\n+     * ---\n      * void main()\n      * {\n      *      import core.sys.darwin.mach.getsect;\n      *      assert(getsectbyname(\"__TEXT\", \"__text\"));\n      * }\n-     * ___\n+     * ---\n      *\n      * Params:\n      *  segname = the name of the segment\n@@ -130,8 +130,8 @@ version (CoreDdoc)\n      * Returns: a pointer to the section structure or `null` if it doesn't exist\n      */\n     const(Section)* getsectbyname(\n-        in char* segname,\n-        in char* sectname\n+        const scope char* segname,\n+        const scope char* sectname\n     );\n \n     /**\n@@ -140,7 +140,7 @@ version (CoreDdoc)\n      * Returns the section data of the given section in the given segment in the\n      * image pointed to by the given mach header.\n      *\n-     * ___\n+     * ---\n      * void main()\n      * {\n      *      import core.sys.darwin.mach.getsect;\n@@ -151,7 +151,7 @@ version (CoreDdoc)\n      *      assert(getsectdata(mph, \"__TEXT\", \"__text\", &size));\n      *      assert(size > 0);\n      * }\n-     * ___\n+     * ---\n      *\n      * Params:\n      *  mhp = the mach header to get the section data from\n@@ -163,9 +163,9 @@ version (CoreDdoc)\n      * Returns: a pointer to the section data or `null` if it doesn't exist\n      */\n     ubyte* getsectiondata(\n-        in MachHeader* mhp,\n-        in char* segname,\n-        in char* sectname,\n+        const scope MachHeader* mhp,\n+        const scope char* segname,\n+        const scope char* sectname,\n         c_ulong* size\n     );\n \n@@ -175,21 +175,21 @@ version (CoreDdoc)\n      * Returns the segment structure of the given segment in the mach executable\n      * it is linked into.\n      *\n-     * ___\n+     * ---\n      * void main()\n      * {\n      *      import core.sys.darwin.mach.getsect;\n      *      assert(getsegbyname(\"__TEXT\"));\n      * }\n-     * ___\n+     * ---\n      *\n      * Params:\n      *  segname = the name of the segment\n      *\n      * Returns: a pointer to the section structure or `null` if it doesn't exist\n      */\n     const(SegmentCommand)* getsegbyname(\n-        in char* segname\n+        const scope char* segname\n     );\n \n     /**\n@@ -198,7 +198,7 @@ version (CoreDdoc)\n      * Returns the segment data of the given segment in the image pointed to by\n      * the given mach header.\n      *\n-     * ___\n+     * ---\n      * void main()\n      * {\n      *      import core.sys.darwin.mach.getsect;\n@@ -209,7 +209,7 @@ version (CoreDdoc)\n      *      assert(getsegmentdata(mph, \"__TEXT\", &size));\n      *      assert(size > 0);\n      * }\n-     * ___\n+     * ---\n      *\n      * Params:\n      *  mhp = the mach header to get the section data from\n@@ -220,8 +220,8 @@ version (CoreDdoc)\n      * Returns: a pointer to the section data or `null` if it doesn't exist\n      */\n     ubyte* getsegmentdata(\n-        in MachHeader* mhp,\n-        in char* segname,\n+        const scope MachHeader* mhp,\n+        const scope char* segname,\n         c_ulong* size\n     );\n \n@@ -236,7 +236,7 @@ version (CoreDdoc)\n      * Returns the section data of the given section in the given segment in the\n      * image pointed to by the given mach header.\n      *\n-     * ___\n+     * ---\n      * void main()\n      * {\n      *      import core.sys.darwin.mach.getsect;\n@@ -247,7 +247,7 @@ version (CoreDdoc)\n      *      assert(getsectdatafromheader(mph, \"__TEXT\", \"__text\", &size));\n      *      assert(size > 0);\n      * }\n-     * ___\n+     * ---\n      *\n      * Params:\n      *  mhp = the mach header to get the section data from\n@@ -259,17 +259,17 @@ version (CoreDdoc)\n      * Returns: a pointer to the section data or `null` if it doesn't exist\n      */\n     ubyte* getsectdatafromheader(\n-        in mach_header* mhp,\n-        in char* segname,\n-        in char* sectname,\n+        const scope mach_header* mhp,\n+        const scope char* segname,\n+        const scope char* sectname,\n         c_ulong* size\n     );\n \n     /// ditto\n     ubyte* getsectdatafromheader_64(\n-        in mach_header_64* mhp,\n-        in char* segname,\n-        in char* sectname,\n+        const scope mach_header_64* mhp,\n+        const scope char* segname,\n+        const scope char* sectname,\n         c_ulong* size\n     );\n \n@@ -280,7 +280,7 @@ version (CoreDdoc)\n      * Returns the section structure of the given section in the given segment\n      * in image pointed to by the given mach header.\n      *\n-     * ___\n+     * ---\n      * void main()\n      * {\n      *      import core.sys.darwin.mach.getsect;\n@@ -289,7 +289,7 @@ version (CoreDdoc)\n      *      auto mph = _NSGetMachExecuteHeader();\n      *      assert(getsectbynamefromheader(mph, \"__TEXT\", \"__text\"));\n      * }\n-     * ___\n+     * ---\n      *\n      * Params:\n      *  mhp = the mach header to get the section from\n@@ -299,16 +299,16 @@ version (CoreDdoc)\n      * Returns: a pointer to the section structure or `null` if it doesn't exist\n      */\n     const(section)* getsectbynamefromheader(\n-        in mach_header* mhp,\n-        in char* segname,\n-        in char* sectname\n+        const scope mach_header* mhp,\n+        const scope char* segname,\n+        const scope char* sectname\n     );\n \n     /// ditto\n     const(section_64)* getsectbynamefromheader_64(\n-        in mach_header_64* mhp,\n-        in char* segname,\n-        in char* sectname\n+        const scope mach_header_64* mhp,\n+        const scope char* segname,\n+        const scope char* sectname\n     );\n \n     /**\n@@ -326,17 +326,17 @@ version (CoreDdoc)\n      * Returns: a pointer to the section structure or `null` if it doesn't exist\n      */\n     const(section)* getsectbynamefromheaderwithswap(\n-        in mach_header* mhp,\n-        in char* segname,\n-        in char* section,\n+        const scope mach_header* mhp,\n+        const scope char* segname,\n+        const scope char* section,\n         int fSwap\n     );\n \n     /// ditto\n     const(section)* getsectbynamefromheaderwithswap_64(\n-        in mach_header_64* mhp,\n-        in char* segname,\n-        in char* section,\n+        const scope mach_header_64* mhp,\n+        const scope char* segname,\n+        const scope char* section,\n         int fSwap\n     );\n }\n@@ -357,15 +357,15 @@ public import core.sys.darwin.mach.loader;\n import core.stdc.config : c_ulong;\n \n char* getsectdata(\n-    in char* segname,\n-    in char* sectname,\n+    const scope char* segname,\n+    const scope char* sectname,\n     c_ulong *size\n );\n \n char* getsectdatafromFramework(\n-    in char* FrameworkName,\n-    in char* segname,\n-    in char* sectname,\n+    const scope char* FrameworkName,\n+    const scope char* segname,\n+    const scope char* sectname,\n     c_ulong* size\n );\n \n@@ -377,24 +377,24 @@ c_ulong get_edata();\n version (D_LP64)\n {\n     const(section_64)* getsectbyname(\n-        in char* segname,\n-        in char* sectname\n+        const scope char* segname,\n+        const scope char* sectname\n     );\n \n     ubyte* getsectiondata(\n-        in mach_header_64* mhp,\n-        in char* segname,\n-        in char* sectname,\n+        const scope mach_header_64* mhp,\n+        const scope char* segname,\n+        const scope char* sectname,\n         c_ulong* size\n     );\n \n     const(segment_command_64)* getsegbyname(\n-        in char* segname\n+        const scope char* segname\n     );\n \n     ubyte* getsegmentdata(\n-        in mach_header_64* mhp,\n-        in char* segname,\n+        const scope mach_header_64* mhp,\n+        const scope char* segname,\n         c_ulong* size\n     );\n }\n@@ -403,69 +403,69 @@ version (D_LP64)\n else\n {\n     const(section)* getsectbyname(\n-        in char* segname,\n-        in char* sectname\n+        const scope char* segname,\n+        const scope char* sectname\n     );\n \n     ubyte* getsectiondata(\n-        in mach_header* mhp,\n-        in char* segname,\n-        in char* sectname,\n+        const scope mach_header* mhp,\n+        const scope char* segname,\n+        const scope char* sectname,\n         c_ulong* size\n     );\n \n     const(segment_command)* getsegbyname(\n-        in char* segname\n+        const scope char* segname\n     );\n \n     ubyte* getsegmentdata(\n-        in mach_header* mhp,\n-        in char* segname,\n+        const scope mach_header* mhp,\n+        const scope char* segname,\n         c_ulong* size\n     );\n }\n \n // Interfaces for tools working with 32-bit Mach-O files.\n \n ubyte* getsectdatafromheader(\n-    in mach_header* mhp,\n-    in char* segname,\n-    in char* sectname,\n+    const scope mach_header* mhp,\n+    const scope char* segname,\n+    const scope char* sectname,\n     c_ulong* size\n );\n \n const(section)* getsectbynamefromheader(\n-    in mach_header* mhp,\n-    in char* segname,\n-    in char* sectname\n+    const scope mach_header* mhp,\n+    const scope char* segname,\n+    const scope char* sectname\n );\n \n const(section)* getsectbynamefromheaderwithswap(\n-    in mach_header* mhp,\n-    in char* segname,\n-    in char* section,\n+    const scope mach_header* mhp,\n+    const scope char* segname,\n+    const scope char* section,\n     int fSwap\n );\n \n // Interfaces for tools working with 64-bit Mach-O files.\n \n ubyte* getsectdatafromheader_64(\n-    in mach_header_64* mhp,\n-    in char* segname,\n-    in char* sectname,\n+    const scope mach_header_64* mhp,\n+    const scope char* segname,\n+    const scope char* sectname,\n     c_ulong* size\n );\n \n const(section_64)* getsectbynamefromheader_64(\n-    in mach_header_64* mhp,\n-    in char* segname,\n-    in char* sectname\n+    const scope mach_header_64* mhp,\n+    const scope char* segname,\n+    const scope char* sectname\n );\n \n const(section)* getsectbynamefromheaderwithswap_64(\n-    in mach_header_64* mhp,\n-    in char* segname,\n-    in char* section,\n+    const scope mach_header_64* mhp,\n+    const scope char* segname,\n+    const scope char* section,\n     int fSwap\n );\n "}, {"sha": "f46698c3b5317edf68b43bc3b2ea4f65fd6ef665", "filename": "libphobos/libdruntime/core/sys/darwin/mach/loader.d", "status": "modified", "additions": 9, "deletions": 32, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fdarwin%2Fmach%2Floader.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fdarwin%2Fmach%2Floader.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fdarwin%2Fmach%2Floader.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -2568,14 +2568,7 @@ version (CoreDdoc)\n         ulong size;\n     }\n }\n-\n-else version (OSX)\n-    version = Darwin;\n-else version (iOS)\n-    version = Darwin;\n-else version (TVOS)\n-    version = Darwin;\n-else version (WatchOS)\n+else\n     version = Darwin;\n \n version (Darwin):\n@@ -3116,12 +3109,8 @@ struct dylib_reference\n     }\n \n     @property void isym()(uint v) @safe pure nothrow @nogc\n-    in\n-    {\n-        assert(v >= 0U, \"Value is smaller than the minimum value of bitfield 'isym'\");\n-        assert(v <= 16777215U, \"Value is greater than the maximum value of bitfield 'isym'\");\n-    }\n-    body\n+    in(v >= 0U, \"Value is smaller than the minimum value of bitfield 'isym'\")\n+    in(v <= 16777215U, \"Value is greater than the maximum value of bitfield 'isym'\")\n     {\n         storage = cast(uint) ((storage & (-1 - cast(uint) 16777215U)) |\n             ((cast(uint) v << 0U) & 16777215U));\n@@ -3133,12 +3122,8 @@ struct dylib_reference\n     }\n \n     @property void flags()(uint v) pure nothrow @nogc @safe\n-    in\n-    {\n-        assert(v >= 0U, \"Value is smaller than the minimum value of bitfield 'flags'\");\n-        assert(v <= 255U, \"Value is greater than the maximum value of bitfield 'flags'\");\n-    }\n-    body\n+    in(v >= 0U, \"Value is smaller than the minimum value of bitfield 'flags'\")\n+    in(v <= 255U, \"Value is greater than the maximum value of bitfield 'flags'\")\n     {\n         storage = cast(uint) ((storage & (-1 - cast(uint) 4278190080U)) |\n             ((cast(uint) v << 24U) & 4278190080U));\n@@ -3163,12 +3148,8 @@ struct twolevel_hint\n     }\n \n     @property void isub_image()(uint v) pure nothrow @nogc @safe\n-    in\n-    {\n-        assert(v >= 0U, \"Value is smaller than the minimum value of bitfield 'isub_image'\");\n-        assert(v <= 255U, \"Value is greater than the maximum value of bitfield 'isub_image'\");\n-    }\n-    body\n+    in(v >= 0U, \"Value is smaller than the minimum value of bitfield 'isub_image'\")\n+    in(v <= 255U, \"Value is greater than the maximum value of bitfield 'isub_image'\")\n     {\n         storage = cast(uint) ((storage & (-1-cast(uint)255U)) |\n             ((cast(uint) v << 0U) & 255U));\n@@ -3180,12 +3161,8 @@ struct twolevel_hint\n     }\n \n     @property void itoc()(uint v) pure nothrow @nogc @safe\n-    in\n-    {\n-        assert(v >= 0U, \"Value is smaller than the minimum value of bitfield 'itoc'\");\n-        assert(v <= 16777215U, \"Value is greater than the maximum value of bitfield 'itoc'\");\n-    }\n-    body\n+    in(v >= 0U, \"Value is smaller than the minimum value of bitfield 'itoc'\")\n+    in(v <= 16777215U, \"Value is greater than the maximum value of bitfield 'itoc'\")\n     {\n         storage = cast(uint) ((storage & (-1-cast(uint)4294967040U)) |\n             ((cast(uint) v << 8U) & 4294967040U));"}, {"sha": "11e5ced26b76072381bce2fddd2b796fb1bcad9e", "filename": "libphobos/libdruntime/core/sys/darwin/mach/nlist.d", "status": "added", "additions": 317, "deletions": 0, "changes": 317, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fdarwin%2Fmach%2Fnlist.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fdarwin%2Fmach%2Fnlist.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fdarwin%2Fmach%2Fnlist.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -0,0 +1,317 @@\n+/**\n+ * Bindings for symbols and defines in `mach-o/nlist.h`\n+ *\n+ * This file was created based on the MacOSX 10.15 SDK.\n+ *\n+ * Copyright:\n+ * D Language Foundation 2020\n+ * Some documentation was extracted from the C headers\n+ * and is the property of Apple Inc.\n+ *\n+ * License: $(HTTP www.boost.org/LICENSE_1_0.txt, Boost License 1.0).\n+ * Authors: Mathias 'Geod24' Lang\n+ * Source: $(DRUNTIMESRC core/sys/darwin/mach/_nlist.d)\n+ */\n+module core.sys.darwin.mach.nlist;\n+\n+import core.stdc.config;\n+\n+extern(C):\n+nothrow:\n+@nogc:\n+pure:\n+\n+/**\n+ * An entry in a list of symbols for 64-bits architectures\n+ *\n+ * Said symbols can be used to describe many different type of data,\n+ * including STABS debug infos. Introduced in MacOSX 10.8 SDK.\n+ *\n+ * See_Also:\n+ * https://developer.apple.com/documentation/kernel/nlist_64\n+ */\n+struct nlist_64\n+{\n+    /// Compatibility alias, as `n_strx` is in an union in C code\n+    alias n_un = n_strx;\n+\n+    /**\n+     * Index of this symbol's name into the string table\n+     *\n+     * All names are stored as NUL-terminated strings into the string table.\n+     * For historical reason, the very first entry into the string table is `0`,\n+     * hence all non-NULL names have an index > 0.\n+     */\n+    uint n_strx;\n+\n+    /**\n+     * A bitfield that describes the type of this symbol\n+     *\n+     * In reality, this describes 4 fields:\n+     * - N_STAB (top 3 bits)\n+     * - N_PEXT (next 1 bit)\n+     * - N_TYPE (next 3 bits)\n+     * - N_EXT (last 1 bit)\n+     *\n+     * The enum values `N_STAB`, `N_PEXT`, `N_TYPE`, and `N_EXT` should be used\n+     * as masks to check which type this `nlist_64` actually is.\n+     */\n+    ubyte n_type;\n+    /// Section number (note that `0` means `NO_SECT`)\n+    ubyte n_sect;\n+    /* see <mach-o/stab.h> */\n+    ushort n_desc;\n+    /* value of this symbol (or stab offset) */\n+    ulong n_value;\n+    // Note: `n_value` *is* `uint64_t`, not `c_ulong` !\n+}\n+\n+/// Mask to use with `nlist_64.n_type` to check what the entry describes\n+enum\n+{\n+    /**\n+     * If any of these bits set, a symbolic debugging entry\n+     *\n+     * Only symbolic debugging entries have some of the N_STAB bits set and if any\n+     * of these bits are set then it is a symbolic debugging entry (a stab).  In\n+     * which case then the values of the n_type field (the entire field) are given\n+     * in <mach-o/stab.h>\n+     */\n+    N_STAB = 0xe0,\n+    /// Private external symbol bit\n+    N_PEXT = 0x10,\n+    /// Mask for the type bits\n+    N_TYPE = 0x0e,  /* mask for the type bits */\n+    /// External symbol bit, set for external symbols\n+    N_EXT  = 0x01,\n+}\n+\n+/// Values for `NTypeMask.N_TYPE` bits of the `nlist_64.n_type` field.\n+enum\n+{\n+    /// Undefined (`n_sect == NO_SECT`)\n+    N_UNDF = 0x0,\n+    /// Absolute (`n_sect == NO_SECT`)\n+    N_ABS  = 0x2,\n+    /// Defined in section number `nlist_64.n_sect`\n+    N_SECT = 0xe,\n+    /// Prebound undefined (defined in a dylib)\n+    N_PBUD = 0xc,\n+    /**\n+     * Indirect symbol\n+     *\n+     * If the type is `N_INDR` then the symbol is defined to be the same as\n+     * another symbol. In this case the `n_value` field is an index into\n+     * the string table of the other symbol's name. When the other symbol\n+     * is defined then they both take on the defined type and value.\n+     */\n+    N_INDR = 0xa,\n+}\n+\n+/**\n+ * Symbol is not in any section\n+ *\n+ * If the type is N_SECT then the n_sect field contains an ordinal of the\n+ * section the symbol is defined in.  The sections are numbered from 1 and\n+ * refer to sections in order they appear in the load commands for the file\n+ * they are in.  This means the same ordinal may very well refer to different\n+ * sections in different files.\n+ *\n+ * The n_value field for all symbol table entries (including N_STAB's) gets\n+ * updated by the link editor based on the value of it's n_sect field and where\n+ * the section n_sect references gets relocated.  If the value of the n_sect\n+ * field is NO_SECT then it's n_value field is not changed by the link editor.\n+ */\n+enum NO_SECT = 0;\n+\n+/// Maximum number of sections: 1 thru 255 inclusive\n+enum MAX_SECT = 255;\n+\n+/**\n+ * Common symbols are represented by undefined (N_UNDF) external (N_EXT) types\n+ * who's values (n_value) are non-zero.  In which case the value of the n_value\n+ * field is the size (in bytes) of the common symbol.  The n_sect field is set\n+ * to NO_SECT.  The alignment of a common symbol may be set as a power of 2\n+ * between 2^1 and 2^15 as part of the n_desc field using the macros below. If\n+ * the alignment is not set (a value of zero) then natural alignment based on\n+ * the size is used.\n+ */\n+extern(D) ubyte GET_COMM_ALIGN(uint n_desc) @safe\n+{\n+    return (((n_desc) >> 8) & 0x0f);\n+}\n+\n+/// Ditto\n+extern(D) ref ushort SET_COMM_ALIGN(return ref ushort n_desc, size_t wanted_align) @safe\n+{\n+    return n_desc = (((n_desc) & 0xf0ff) | (((wanted_align) & 0x0f) << 8));\n+}\n+\n+/**\n+ * To support the lazy binding of undefined symbols in the dynamic link-editor,\n+ * the undefined symbols in the symbol table (the nlist structures) are marked\n+ * with the indication if the undefined reference is a lazy reference or\n+ * non-lazy reference.  If both a non-lazy reference and a lazy reference is\n+ * made to the same symbol the non-lazy reference takes precedence.  A reference\n+ * is lazy only when all references to that symbol are made through a symbol\n+ * pointer in a lazy symbol pointer section.\n+ *\n+ * The implementation of marking nlist structures in the symbol table for\n+ * undefined symbols will be to use some of the bits of the n_desc field as a\n+ * reference type.  The mask REFERENCE_TYPE will be applied to the n_desc field\n+ * of an nlist structure for an undefined symbol to determine the type of\n+ * undefined reference (lazy or non-lazy).\n+ *\n+ * The constants for the REFERENCE FLAGS are propagated to the reference table\n+ * in a shared library file.  In that case the constant for a defined symbol,\n+ * REFERENCE_FLAG_DEFINED, is also used.\n+ */\n+enum\n+{\n+    /// Reference type bits of the n_desc field of undefined symbols\n+    REFERENCE_TYPE = 0x7,\n+\n+    /// types of references\n+    REFERENCE_FLAG_UNDEFINED_NON_LAZY = 0,\n+    /// Ditto\n+    REFERENCE_FLAG_UNDEFINED_LAZY     = 1,\n+    /// Ditto\n+    REFERENCE_FLAG_DEFINED            = 2,\n+    /// Ditto\n+    REFERENCE_FLAG_PRIVATE_DEFINED    = 3,\n+    /// Ditto\n+    REFERENCE_FLAG_PRIVATE_UNDEFINED_NON_LAZY = 4,\n+    /// Ditto\n+    REFERENCE_FLAG_PRIVATE_UNDEFINED_LAZY     = 5,\n+\n+    /**\n+     * To simplify stripping of objects that use are used with the dynamic link\n+     * editor, the static link editor marks the symbols defined an object that are\n+     * referenced by a dynamicly bound object (dynamic shared libraries, bundles).\n+     * With this marking strip knows not to strip these symbols.\n+     */\n+    REFERENCED_DYNAMICALLY = 0x0010,\n+}\n+\n+/**\n+ * For images created by the static link editor with the -twolevel_namespace\n+ * option in effect the flags field of the mach header is marked with\n+ * MH_TWOLEVEL.  And the binding of the undefined references of the image are\n+ * determined by the static link editor.  Which library an undefined symbol is\n+ * bound to is recorded by the static linker in the high 8 bits of the n_desc\n+ * field using the SET_LIBRARY_ORDINAL macro below.  The ordinal recorded\n+ * references the libraries listed in the Mach-O's LC_LOAD_DYLIB,\n+ * LC_LOAD_WEAK_DYLIB, LC_REEXPORT_DYLIB, LC_LOAD_UPWARD_DYLIB, and\n+ * LC_LAZY_LOAD_DYLIB, etc. load commands in the order they appear in the\n+ * headers.   The library ordinals start from 1.\n+ * For a dynamic library that is built as a two-level namespace image the\n+ * undefined references from module defined in another use the same nlist struct\n+ * an in that case SELF_LIBRARY_ORDINAL is used as the library ordinal.  For\n+ * defined symbols in all images they also must have the library ordinal set to\n+ * SELF_LIBRARY_ORDINAL.  The EXECUTABLE_ORDINAL refers to the executable\n+ * image for references from plugins that refer to the executable that loads\n+ * them.\n+ *\n+ * The DYNAMIC_LOOKUP_ORDINAL is for undefined symbols in a two-level namespace\n+ * image that are looked up by the dynamic linker with flat namespace semantics.\n+ * This ordinal was added as a feature in Mac OS X 10.3 by reducing the\n+ * value of MAX_LIBRARY_ORDINAL by one.  So it is legal for existing binaries\n+ * or binaries built with older tools to have 0xfe (254) dynamic libraries.  In\n+ * this case the ordinal value 0xfe (254) must be treated as a library ordinal\n+ * for compatibility.\n+ */\n+ubyte GET_LIBRARY_ORDINAL(uint n_desc) @safe { return ((n_desc) >> 8) & 0xff; }\n+/// Ditto\n+ref ushort SET_LIBRARY_ORDINAL(return scope ref ushort n_desc, uint ordinal) @safe\n+{\n+    return n_desc = (((n_desc) & 0x00ff) | (((ordinal) & 0xff) << 8));\n+}\n+\n+/// Ditto\n+enum\n+{\n+    SELF_LIBRARY_ORDINAL   = 0x00,\n+    MAX_LIBRARY_ORDINAL    = 0xfd,\n+    DYNAMIC_LOOKUP_ORDINAL = 0xfe,\n+    EXECUTABLE_ORDINAL     = 0xff,\n+}\n+\n+/**\n+ * The bit 0x0020 of the n_desc field is used for two non-overlapping purposes\n+ * and has two different symbolic names, N_NO_DEAD_STRIP and N_DESC_DISCARDED.\n+ */\n+enum\n+{\n+    /**\n+     * Symbol is not to be dead stripped\n+     *\n+     * The N_NO_DEAD_STRIP bit of the n_desc field only ever appears in a\n+     * relocatable .o file (MH_OBJECT filetype). And is used to indicate to the\n+     * static link editor it is never to dead strip the symbol.\n+     */\n+    N_NO_DEAD_STRIP = 0x0020,\n+\n+    /**\n+     * Symbol is discarded\n+     *\n+     * The N_DESC_DISCARDED bit of the n_desc field never appears in linked image.\n+     * But is used in very rare cases by the dynamic link editor to mark an in\n+     * memory symbol as discared and longer used for linking.\n+     */\n+    N_DESC_DISCARDED =0x0020,\n+\n+    /**\n+     * Symbol is weak referenced\n+     *\n+     * The N_WEAK_REF bit of the n_desc field indicates to the dynamic linker that\n+     * the undefined symbol is allowed to be missing and is to have the address of\n+     * zero when missing.\n+     */\n+    N_WEAK_REF = 0x0040,\n+\n+    /**\n+     * Coalesed symbol is a weak definition\n+     *\n+     * The N_WEAK_DEF bit of the n_desc field indicates to the static and dynamic\n+     * linkers that the symbol definition is weak, allowing a non-weak symbol to\n+     * also be used which causes the weak definition to be discared.  Currently this\n+     * is only supported for symbols in coalesed sections.\n+     */\n+    N_WEAK_DEF = 0x0080,\n+\n+    /**\n+     * Reference to a weak symbol\n+     *\n+     * The N_REF_TO_WEAK bit of the n_desc field indicates to the dynamic linker\n+     * that the undefined symbol should be resolved using flat namespace searching.\n+     */\n+    N_REF_TO_WEAK = 0x0080,\n+\n+    /**\n+     * Symbol is a Thumb function (ARM)\n+     *\n+     * The N_ARM_THUMB_DEF bit of the n_desc field indicates that the symbol is\n+     * a defintion of a Thumb function.\n+     */\n+    N_ARM_THUMB_DEF = 0x0008,\n+\n+    /**\n+     * The N_SYMBOL_RESOLVER bit of the n_desc field indicates that the\n+     * that the function is actually a resolver function and should\n+     * be called to get the address of the real function to use.\n+     * This bit is only available in .o files (MH_OBJECT filetype)\n+     */\n+    N_SYMBOL_RESOLVER =  0x0100,\n+\n+    /**\n+     * The N_ALT_ENTRY bit of the n_desc field indicates that the\n+     * symbol is pinned to the previous content.\n+     */\n+    N_ALT_ENTRY = 0x0200,\n+\n+    /**\n+     * The N_COLD_FUNC bit of the n_desc field indicates that the symbol is used\n+     * infrequently and the linker should order it towards the end of the section.\n+     */\n+    N_COLD_FUNC = 0x0400,\n+}"}, {"sha": "ecdb4560a68b6ee7a0c6203916f3d08bbf2f48a1", "filename": "libphobos/libdruntime/core/sys/darwin/mach/stab.d", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fdarwin%2Fmach%2Fstab.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fdarwin%2Fmach%2Fstab.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fdarwin%2Fmach%2Fstab.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -0,0 +1,90 @@\n+/**\n+ * Bindings for symbols and defines in `mach-o/stab.h`\n+ *\n+ * This file gives definitions supplementing <nlist.h> for permanent symbol\n+ * table entries of Mach-O files.  Modified from the BSD definitions.  The\n+ * modifications from the original definitions were changing what the values of\n+ * what was the n_other field (an unused field) which is now the n_sect field.\n+ * These modifications are required to support symbols in an arbitrary number of\n+ * sections not just the three sections (text, data and bss) in a BSD file.\n+ * The values of the defined constants have NOT been changed.\n+ *\n+ * These must have one of the N_STAB bits on.  The n_value fields are subject\n+ * to relocation according to the value of their n_sect field.  So for types\n+ * that refer to things in sections the n_sect field must be filled in with the\n+ * proper section ordinal.  For types that are not to have their n_value field\n+ * relocatated the n_sect field must be NO_SECT.\n+ *\n+ * This file was created based on the MacOSX 10.15 SDK.\n+ *\n+ * Copyright:\n+ * D Language Foundation 2020\n+ * Some documentation was extracted from the C headers\n+ * and is the property of Apple Inc.\n+ *\n+ * License: $(HTTP www.boost.org/LICENSE_1_0.txt, Boost License 1.0).\n+ * Authors: Mathias 'Geod24' Lang\n+ * Source: $(DRUNTIMESRC core/sys/darwin/mach/_nlist.d)\n+ */\n+module core.sys.darwin.mach.stab;\n+\n+extern(C):\n+nothrow:\n+@nogc:\n+pure:\n+\n+/**\n+ * Symbolic debugger symbols.\n+ *\n+ * The comments give the conventional use for\n+ * ```\n+ *  .stabs \"n_name\", n_type, n_sect, n_desc, n_value\n+ * ```\n+ *\n+ * where n_type is the defined constant and not listed in the comment.  Other\n+ * fields not listed are zero. n_sect is the section ordinal the entry is\n+ * refering to.\n+ */\n+enum\n+{\n+    N_GSYM  = 0x20,    /// global symbol: name,,NO_SECT,type,0\n+    N_FNAME = 0x22,    /// procedure name (f77 kludge): name,,NO_SECT,0,0\n+    N_FUN   = 0x24,    /// procedure: name,,n_sect,linenumber,address\n+    N_STSYM = 0x26,    /// static symbol: name,,n_sect,type,address\n+    N_LCSYM = 0x28,    /// .lcomm symbol: name,,n_sect,type,address\n+    N_BNSYM = 0x2e,    /// begin nsect sym: 0,,n_sect,0,address\n+    N_AST   = 0x32,    /// AST file path: name,,NO_SECT,0,0\n+    N_OPT   = 0x3c,    /// emitted with gcc2_compiled and in gcc source\n+    N_RSYM  = 0x40,    /// register sym: name,,NO_SECT,type,register\n+    N_SLINE = 0x44,    /// src line: 0,,n_sect,linenumber,address\n+    N_ENSYM = 0x4e,    /// end nsect sym: 0,,n_sect,0,address\n+    N_SSYM  = 0x60,    /// structure elt: name,,NO_SECT,type,struct_offset\n+    N_SO    = 0x64,    /// source file name: name,,n_sect,0,address\n+    /**\n+     * Object file name: name,,(see below),0,st_mtime\n+     *\n+     * Historically N_OSO set n_sect to 0.\n+     * The N_OSO n_sect may instead hold the low byte of the cpusubtype value\n+     * from the Mach-O header.\n+     */\n+    N_OSO   = 0x66,\n+    N_LSYM  = 0x80,    /// local sym: name,,NO_SECT,type,offset\n+    N_BINCL = 0x82,    /// include file beginning: name,,NO_SECT,0,sum\n+    N_SOL   = 0x84,    /// #included file name: name,,n_sect,0,address\n+    N_PARAMS = 0x86,   /// compiler parameters: name,,NO_SECT,0,0\n+    N_VERSION = 0x88,  /// compiler version: name,,NO_SECT,0,0\n+    N_OLEVEL = 0x8A,   /// compiler -O level: name,,NO_SECT,0,0\n+    N_PSYM  = 0xa0,    /// parameter: name,,NO_SECT,type,offset\n+    N_EINCL = 0xa2,    /// include file end: name,,NO_SECT,0,0\n+    N_ENTRY = 0xa4,    /// alternate entry: name,,n_sect,linenumber,address\n+    N_LBRAC = 0xc0,    /// left bracket: 0,,NO_SECT,nesting level,address\n+    N_EXCL =  0xc2,    /// deleted include file: name,,NO_SECT,0,sum\n+    N_RBRAC = 0xe0,    /// right bracket: 0,,NO_SECT,nesting level,address\n+    N_BCOMM = 0xe2,    /// begin common: name,,NO_SECT,0,0\n+    N_ECOMM = 0xe4,    /// end common: name,,n_sect,0,0\n+    N_ECOML = 0xe8,    /// end common (local name): 0,,n_sect,0,address\n+    N_LENG =  0xfe,    /// second stab entry with length information\n+\n+    // For the berkeley pascal compiler, pc(1):\n+    N_PC   = 0x30,    /// global pascal symbol: name,,NO_SECT,subtype,line\n+}"}, {"sha": "b850e3c98cfe9fec30f0afaeb4fdc246a60ceacb", "filename": "libphobos/libdruntime/core/sys/darwin/netinet/in_.d", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fdarwin%2Fnetinet%2Fin_.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fdarwin%2Fnetinet%2Fin_.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fdarwin%2Fnetinet%2Fin_.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -225,7 +225,7 @@ static if (_DARWIN_C_SOURCE)\n     {\n         in_addr  ip_dst;\n         char[40] ip_opts = 0;\n-    };\n+    }\n \n     enum IP_OPTIONS         = 1;\n     enum IP_HDRINCL         = 2;\n@@ -307,37 +307,37 @@ static if (_DARWIN_C_SOURCE)\n     {\n         in_addr imr_multiaddr;\n         in_addr imr_interface;\n-    };\n+    }\n \n     struct ip_mreqn\n     {\n         in_addr imr_multiaddr;\n         in_addr imr_address;\n         int     imr_ifindex;\n-    };\n+    }\n \n     struct ip_mreq_source\n     {\n         align(4):\n         in_addr imr_multiaddr;\n         in_addr imr_sourceaddr;\n         in_addr imr_interface;\n-    };\n+    }\n \n     struct group_req\n     {\n         align(4):\n         uint             gr_interface;\n         sockaddr_storage gr_group;\n-    };\n+    }\n \n     struct group_source_req\n     {\n         align(4):\n         uint             gsr_interface;\n         sockaddr_storage gsr_group;\n         sockaddr_storage gsr_source;\n-    };\n+    }\n \n     int setipv4sourcefilter(int, in_addr, in_addr, uint, uint, in_addr*);\n     int getipv4sourcefilter(int, in_addr, in_addr, uint*, uint*, in_addr*);\n@@ -357,7 +357,7 @@ static if (_DARWIN_C_SOURCE)\n         uint     ipi_ifindex;\n         in_addr  ipi_spec_dst;\n         in_addr  ipi_addr;\n-    };\n+    }\n \n     enum IPPROTO_MAXID = IPPROTO_AH + 1;\n \n@@ -524,13 +524,13 @@ static if (_DARWIN_C_SOURCE)\n     {\n         in6_addr ipi6_addr;\n         uint     ipi6_ifindex;\n-    };\n+    }\n \n     struct ip6_mtuinfo\n     {\n         sockaddr_in6 ip6m_addr;\n         uint         ip6m_mtu;\n-    };\n+    }\n \n     enum IPV6_PORTRANGE_DEFAULT = 0;\n     enum IPV6_PORTRANGE_HIGH    = 1;"}, {"sha": "456cde96cbd2eeb3c080351347260cd31ae8c860", "filename": "libphobos/libdruntime/core/sys/darwin/pthread.d", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fdarwin%2Fpthread.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fdarwin%2Fpthread.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fdarwin%2Fpthread.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -43,18 +43,18 @@ int pthread_rwlock_held_np(pthread_rwlock_t*);\n int pthread_rwlock_rdheld_np(pthread_rwlock_t*);\n int pthread_rwlock_wrheld_np(pthread_rwlock_t*);\n int pthread_getname_np(pthread_t, char*, size_t);\n-int pthread_setname_np(in char*);\n+int pthread_setname_np(const scope char*);\n // ^ __OSX_AVAILABLE_STARTING(__MAC_10_6, __IPHONE_3_2)\n int pthread_main_np();\n mach_port_t pthread_mach_thread_np(pthread_t);\n size_t pthread_get_stacksize_np(pthread_t);\n void* pthread_get_stackaddr_np(pthread_t);\n int pthread_cond_signal_thread_np(pthread_cond_t*, pthread_t);\n-int pthread_cond_timedwait_relative_np(pthread_cond_t*, pthread_mutex_t*, in timespec*);\n-int pthread_create_suspended_np(pthread_t*, in pthread_attr_t*, void* function(void*), void*);\n+int pthread_cond_timedwait_relative_np(pthread_cond_t*, pthread_mutex_t*, const scope timespec*);\n+int pthread_create_suspended_np(pthread_t*, const scope pthread_attr_t*, void* function(void*), void*);\n int pthread_kill(pthread_t, int);\n pthread_t pthread_from_mach_thread_np(mach_port_t);\n // ^ __OSX_AVAILABLE_STARTING(__MAC_10_5, __IPHONE_2_0)\n-int pthread_sigmask(int, in sigset_t*, sigset_t*);\n+int pthread_sigmask(int, const scope sigset_t*, sigset_t*);\n // ^ __DARWIN_ALIAS(pthread_sigmask)\n void pthread_yield_np();"}, {"sha": "cb22b380ef68cf3d9f882f867181708a253d94f7", "filename": "libphobos/libdruntime/core/sys/darwin/sys/attr.d", "status": "added", "additions": 338, "deletions": 0, "changes": 338, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fdarwin%2Fsys%2Fattr.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fdarwin%2Fsys%2Fattr.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fdarwin%2Fsys%2Fattr.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -0,0 +1,338 @@\n+/**\n+ * D header file for Darwin\n+ *\n+ * $(LINK2 https://opensource.apple.com/source/xnu/xnu-2422.115.4/bsd/sys/attr.h.auto.html, Apple sys/attr.h)\n+ */\n+module core.sys.darwin.sys.attr;\n+\n+version (OSX)\n+    version = Darwin;\n+else version (iOS)\n+    version = Darwin;\n+else version (TVOS)\n+    version = Darwin;\n+else version (WatchOS)\n+    version = Darwin;\n+\n+version (Darwin):\n+extern (C):\n+nothrow:\n+@nogc:\n+\n+import core.internal.attributes : betterC;\n+import core.sys.darwin.sys.cdefs : c_ulong;\n+import core.sys.posix.sys.time : timeval;\n+\n+// These functions aren't actually declared in attr.h but in unistd.h.\n+@system\n+{\n+    void getattrlist(scope const char* path, scope attrlist* attrList, scope void* attrBuf,\n+        size_t attrBufSize, c_ulong options);\n+\n+    void setattrlist(scope const char* path, scope attrlist* attrList, scope void* attrBuf,\n+        size_t attrBufSize, c_ulong options);\n+\n+    version (TVOS) {}\n+    else version (WatchOS) {}\n+    else\n+        int searchfs(scope const char* path, scope fssearchblock* searchBlock,\n+            scope c_ulong* numMatches, uint scriptCode, uint options, scope searchstate* state);\n+}\n+\n+enum\n+{\n+    FSOPT_NOFOLLOW                     = 0x00000001,\n+    FSOPT_NOINMEMUPDATE                = 0x00000002,\n+    FSOPT_REPORT_FULLSIZE              = 0x00000004,\n+    FSOPT_PACK_INVAL_ATTRS             = 0x00000008,\n+    FSOPT_ATTR_CMN_EXTENDED            = 0x00000020, // macOS 10.10\n+}\n+\n+enum SEARCHFS_MAX_SEARCHPARMS = 4096;\n+\n+alias uint text_encoding_t, fsobj_type_t, fsobj_tag_t, fsfile_type_t, fsvolid_t, attrgroup_t;\n+\n+struct attrlist\n+{\n+    ushort bitmapcount, reserved;\n+    attrgroup_t commonattr, volattr, dirattr, fileattr, forkattr;\n+}\n+enum ATTR_BIT_MAP_COUNT = 5;\n+\n+struct attribute_set_t\n+{\n+    attrgroup_t commonattr, volattr, dirattr, fileattr, forkattr;\n+}\n+\n+struct attrreference_t\n+{\n+    int     attr_dataoffset;\n+    uint    attr_length;\n+}\n+\n+struct diskextent\n+{\n+    uint startblock, blockcount;\n+}\n+\n+alias extentrecord = diskextent[8];\n+\n+alias vol_capabilities_set_t = uint[4];\n+\n+enum\n+{\n+    VOL_CAPABILITIES_FORMAT            = 0,\n+    VOL_CAPABILITIES_INTERFACES        = 1,\n+    VOL_CAPABILITIES_RESERVED1         = 2,\n+    VOL_CAPABILITIES_RESERVED2         = 3,\n+}\n+\n+struct vol_capabilities_attr_t\n+{\n+    vol_capabilities_set_t capabilities, valid;\n+}\n+\n+enum ATTR_MAX_BUFFER = 8192;\n+\n+enum\n+{\n+    VOL_CAP_FMT_PERSISTENTOBJECTIDS    = 0x00000001,\n+    VOL_CAP_FMT_SYMBOLICLINKS          = 0x00000002,\n+    VOL_CAP_FMT_HARDLINKS              = 0x00000004,\n+    VOL_CAP_FMT_JOURNAL                = 0x00000008,\n+    VOL_CAP_FMT_JOURNAL_ACTIVE         = 0x00000010,\n+    VOL_CAP_FMT_NO_ROOT_TIMES          = 0x00000020,\n+    VOL_CAP_FMT_SPARSE_FILES           = 0x00000040,\n+    VOL_CAP_FMT_ZERO_RUNS              = 0x00000080,\n+    VOL_CAP_FMT_CASE_SENSITIVE         = 0x00000100,\n+    VOL_CAP_FMT_CASE_PRESERVING        = 0x00000200,\n+    VOL_CAP_FMT_FAST_STATFS            = 0x00000400,\n+    VOL_CAP_FMT_2TB_FILESIZE           = 0x00000800,\n+    VOL_CAP_FMT_OPENDENYMODES          = 0x00001000,\n+    VOL_CAP_FMT_HIDDEN_FILES           = 0x00002000,\n+    VOL_CAP_FMT_PATH_FROM_ID           = 0x00004000,\n+    VOL_CAP_FMT_NO_VOLUME_SIZES        = 0x00008000,\n+    VOL_CAP_FMT_DECMPFS_COMPRESSION    = 0x00010000,\n+    VOL_CAP_FMT_64BIT_OBJECT_IDS       = 0x00020000,\n+    VOL_CAP_FMT_DIR_HARDLINKS          = 0x00040000, // macOS 10.12\n+    VOL_CAP_FMT_DOCUMENT_ID            = 0x00080000, // macOS 10.12\n+    VOL_CAP_FMT_WRITE_GENERATION_COUNT = 0x00100000, // macOS 10.12\n+    VOL_CAP_FMT_NO_IMMUTABLE_FILES     = 0x00200000, // macOS 10.12.4\n+    VOL_CAP_FMT_NO_PERMISSIONS         = 0x00400000, // macOS 10.12.4\n+    VOL_CAP_FMT_SHARED_SPACE           = 0x00800000, // macOS 10.15\n+    VOL_CAP_FMT_VOL_GROUPS             = 0x01000000, // macOS 10.15\n+}\n+\n+enum\n+{\n+    VOL_CAP_INT_SEARCHFS               = 0x00000001,\n+    VOL_CAP_INT_ATTRLIST               = 0x00000002,\n+    VOL_CAP_INT_NFSEXPORT              = 0x00000004,\n+    VOL_CAP_INT_READDIRATTR            = 0x00000008,\n+    VOL_CAP_INT_EXCHANGEDATA           = 0x00000010,\n+    VOL_CAP_INT_COPYFILE               = 0x00000020,\n+    VOL_CAP_INT_ALLOCATE               = 0x00000040,\n+    VOL_CAP_INT_VOL_RENAME             = 0x00000080,\n+    VOL_CAP_INT_ADVLOCK                = 0x00000100,\n+    VOL_CAP_INT_FLOCK                  = 0x00000200,\n+    VOL_CAP_INT_EXTENDED_SECURITY      = 0x00000400,\n+    VOL_CAP_INT_USERACCESS             = 0x00000800,\n+    VOL_CAP_INT_MANLOCK                = 0x00001000,\n+    VOL_CAP_INT_NAMEDSTREAMS           = 0x00002000,\n+    VOL_CAP_INT_EXTENDED_ATTR          = 0x00004000,\n+    VOL_CAP_INT_CLONE                  = 0x00010000, // macOS 10.12\n+    VOL_CAP_INT_SNAPSHOT               = 0x00020000, // macOS 10.12\n+    VOL_CAP_INT_RENAME_SWAP            = 0x00040000, // macOS 10.12\n+    VOL_CAP_INT_RENAME_EXCL            = 0x00080000, // macOS 10.12\n+    VOL_CAP_INT_RENAME_OPENFAIL        = 0x00100000, // macOS 10.15\n+}\n+\n+struct vol_attributes_attr_t\n+{\n+    attribute_set_t validattr, nativeattr;\n+}\n+\n+enum\n+{\n+    ATTR_CMN_NAME                      = 0x00000001,\n+    ATTR_CMN_DEVID                     = 0x00000002,\n+    ATTR_CMN_FSID                      = 0x00000004,\n+    ATTR_CMN_OBJTYPE                   = 0x00000008,\n+    ATTR_CMN_OBJTAG                    = 0x00000010,\n+    ATTR_CMN_OBJID                     = 0x00000020,\n+    ATTR_CMN_OBJPERMANENTID            = 0x00000040,\n+    ATTR_CMN_PAROBJID                  = 0x00000080,\n+    ATTR_CMN_SCRIPT                    = 0x00000100,\n+    ATTR_CMN_CRTIME                    = 0x00000200,\n+    ATTR_CMN_MODTIME                   = 0x00000400,\n+    ATTR_CMN_CHGTIME                   = 0x00000800,\n+    ATTR_CMN_ACCTIME                   = 0x00001000,\n+    ATTR_CMN_BKUPTIME                  = 0x00002000,\n+    ATTR_CMN_FNDRINFO                  = 0x00004000,\n+    ATTR_CMN_OWNERID                   = 0x00008000,\n+    ATTR_CMN_GRPID                     = 0x00010000,\n+    ATTR_CMN_ACCESSMASK                = 0x00020000,\n+    ATTR_CMN_FLAGS                     = 0x00040000,\n+\n+    ATTR_CMN_GEN_COUNT                 = 0x00080000,\n+    ATTR_CMN_DOCUMENT_ID               = 0x00100000,\n+\n+    ATTR_CMN_USERACCESS                = 0x00200000,\n+    ATTR_CMN_EXTENDED_SECURITY         = 0x00400000,\n+    ATTR_CMN_UUID                      = 0x00800000,\n+    ATTR_CMN_GRPUUID                   = 0x01000000,\n+    ATTR_CMN_FILEID                    = 0x02000000,\n+    ATTR_CMN_PARENTID                  = 0x04000000,\n+    ATTR_CMN_FULLPATH                  = 0x08000000,\n+    ATTR_CMN_ADDEDTIME                 = 0x10000000,\n+    ATTR_CMN_ERROR                     = 0x20000000, // macOS 10.10\n+    ATTR_CMN_DATA_PROTECT_FLAGS        = 0x40000000, // macOS 10.10\n+}\n+\n+enum ATTR_CMN_RETURNED_ATTRS           = 0x80000000;\n+enum ATTR_CMN_VALIDMASK                = 0xFFFFFFFF;\n+enum ATTR_CMN_SETMASK                  = 0x51C7FF00;\n+enum ATTR_CMN_VOLSETMASK               = 0x00006700;\n+\n+enum\n+{\n+    ATTR_VOL_FSTYPE                    = 0x00000001,\n+    ATTR_VOL_SIGNATURE                 = 0x00000002,\n+    ATTR_VOL_SIZE                      = 0x00000004,\n+    ATTR_VOL_SPACEFREE                 = 0x00000008,\n+    ATTR_VOL_SPACEAVAIL                = 0x00000010,\n+    ATTR_VOL_MINALLOCATION             = 0x00000020,\n+    ATTR_VOL_ALLOCATIONCLUMP           = 0x00000040,\n+    ATTR_VOL_IOBLOCKSIZE               = 0x00000080,\n+    ATTR_VOL_OBJCOUNT                  = 0x00000100,\n+    ATTR_VOL_FILECOUNT                 = 0x00000200,\n+    ATTR_VOL_DIRCOUNT                  = 0x00000400,\n+    ATTR_VOL_MAXOBJCOUNT               = 0x00000800,\n+    ATTR_VOL_MOUNTPOINT                = 0x00001000,\n+    ATTR_VOL_NAME                      = 0x00002000,\n+    ATTR_VOL_MOUNTFLAGS                = 0x00004000,\n+    ATTR_VOL_MOUNTEDDEVICE             = 0x00008000,\n+    ATTR_VOL_ENCODINGSUSED             = 0x00010000,\n+    ATTR_VOL_CAPABILITIES              = 0x00020000,\n+    ATTR_VOL_UUID                      = 0x00040000,\n+    ATTR_VOL_QUOTA_SIZE                = 0x10000000, // macOS 10.12.4\n+    ATTR_VOL_RESERVED_SIZE             = 0x20000000, // macOS 10.12.4\n+    ATTR_VOL_ATTRIBUTES                = 0x40000000,\n+    ATTR_VOL_INFO                      = 0x80000000,\n+}\n+\n+enum ATTR_VOL_VALIDMASK                = 0xF007FFFF;\n+enum ATTR_VOL_SETMASK                  = 0x80002000;\n+\n+enum\n+{\n+    ATTR_DIR_LINKCOUNT                 = 0x00000001,\n+    ATTR_DIR_ENTRYCOUNT                = 0x00000002,\n+    ATTR_DIR_MOUNTSTATUS               = 0x00000004,\n+    ATTR_DIR_ALLOCSIZE                 = 0x00000008, // macOS 10.12.4\n+    ATTR_DIR_IOBLOCKSIZE               = 0x00000010, // macOS 10.12.4\n+    ATTR_DIR_DATALENGTH                = 0x00000020, // macOS 10.12.4\n+}\n+\n+enum\n+{\n+    DIR_MNTSTATUS_MNTPOINT             = 0x00000001,\n+    DIR_MNTSTATUS_TRIGGER              = 0x00000002,\n+}\n+\n+enum ATTR_DIR_VALIDMASK                = 0x0000003f;\n+enum ATTR_DIR_SETMASK                  = 0x00000000;\n+\n+enum\n+{\n+    ATTR_FILE_LINKCOUNT                = 0x00000001,\n+    ATTR_FILE_TOTALSIZE                = 0x00000002,\n+    ATTR_FILE_ALLOCSIZE                = 0x00000004,\n+    ATTR_FILE_IOBLOCKSIZE              = 0x00000008,\n+    ATTR_FILE_DEVTYPE                  = 0x00000020,\n+    ATTR_FILE_FORKCOUNT                = 0x00000080,\n+    ATTR_FILE_FORKLIST                 = 0x00000100,\n+    ATTR_FILE_DATALENGTH               = 0x00000200,\n+    ATTR_FILE_DATAALLOCSIZE            = 0x00000400,\n+    ATTR_FILE_RSRCLENGTH               = 0x00001000,\n+    ATTR_FILE_RSRCALLOCSIZE            = 0x00002000,\n+}\n+\n+enum ATTR_FILE_VALIDMASK               = 0x000037FF;\n+enum ATTR_FILE_SETMASK                 = 0x00000020;\n+\n+enum\n+{\n+    ATTR_CMNEXT_RELPATH                = 0x00000004, // macOS 10.12.4\n+    ATTR_CMNEXT_PRIVATESIZE            = 0x00000008, // macOS 10.12.4\n+    ATTR_CMNEXT_NOFIRMLINKPATH         = 0x00000020, // macOS 10.15\n+    ATTR_CMNEXT_REALDEVID              = 0x00000040, // macOS 10.15\n+    ATTR_CMNEXT_REALFSID               = 0x00000080, // macOS 10.15\n+}\n+\n+enum ATTR_CMNEXT_VALIDMASK             = 0x000000fc;\n+enum ATTR_CMNEXT_SETMASK               = 0x00000000;\n+\n+enum ATTR_BULK_REQUIRED = ATTR_CMN_NAME | ATTR_CMN_RETURNED_ATTRS;\n+\n+enum\n+{\n+    SRCHFS_START                       = 0x00000001,\n+    SRCHFS_MATCHPARTIALNAMES           = 0x00000002,\n+    SRCHFS_MATCHDIRS                   = 0x00000004,\n+    SRCHFS_MATCHFILES                  = 0x00000008,\n+    SRCHFS_SKIPLINKS                   = 0x00000010,\n+    SRCHFS_SKIPINVISIBLE               = 0x00000020,\n+    SRCHFS_SKIPPACKAGES                = 0x00000040,\n+    SRCHFS_SKIPINAPPROPRIATE           = 0x00000080,\n+\n+    SRCHFS_NEGATEPARAMS                = 0x80000000,\n+    SRCHFS_VALIDOPTIONSMASK            = 0x800000FF,\n+}\n+\n+struct fssearchblock\n+{\n+    attrlist*        returnattrs;\n+    void*            returnbuffer;\n+    size_t           returnbuffersize;\n+    c_ulong          maxmatches;\n+    timeval          timelimit;\n+    void*            searchparams1;\n+    size_t           sizeofsearchparams1;\n+    void*            searchparams2;\n+    size_t           sizeofsearchparams2;\n+    attrlist         searchattrs;\n+}\n+\n+struct searchstate\n+{\n+    uint                        ss_union_flags;\n+    uint                        ss_union_layer;\n+    ubyte[548]                  ss_fsstate;\n+}\n+static assert(searchstate.sizeof == uint.sizeof * 2 + searchstate.ss_fsstate.sizeof,\n+    \"searchstate struct must be packed\");\n+\n+enum FST_EOF = -1;\n+\n+@betterC @nogc nothrow pure @safe unittest\n+{\n+    // Use an enum instead of `version (Darwin)` so it works with the betterc test extractor.\n+    version (OSX) enum isDarwin = true;\n+    else version (iOS) enum isDarwin = true;\n+    else version (TVOS) enum isDarwin = true;\n+    else version (WatchOS) enum isDarwin = true;\n+    else enum isDarwin = false;\n+    static if (isDarwin)\n+    {\n+        // Verify that these types don't need __initZ and so can be used in betterC.\n+        attrlist al;\n+        attribute_set_t as;\n+        attrreference_t ar;\n+        diskextent de;\n+        vol_capabilities_attr_t vca;\n+        vol_attributes_attr_t vaa;\n+        fssearchblock fsb;\n+        searchstate ss;\n+    }\n+}"}, {"sha": "1d3812fc55bedad4953fb0ceffed085d4b3d3548", "filename": "libphobos/libdruntime/core/sys/dragonflybsd/dlfcn.d", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fdragonflybsd%2Fdlfcn.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fdragonflybsd%2Fdlfcn.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fdragonflybsd%2Fdlfcn.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -50,7 +50,7 @@ struct Dl_info {\n     void            *dli_fbase;     /* Base address of shared object. */\n     const(char)     *dli_sname;     /* Name of nearest symbol. */\n     void            *dli_saddr;     /* Address of nearest symbol. */\n-};\n+}\n \n \n /*\n@@ -59,13 +59,13 @@ struct Dl_info {\n struct Dl_serpath {\n     char *          dls_name;       /* single search path entry */\n     uint            dls_flags;      /* path information */\n-};\n+}\n \n struct Dl_serinfo {\n     size_t          dls_size;       /* total buffer size */\n     uint            dls_cnt;        /* number of path entries */\n     Dl_serpath[1]   dls_serpath;    /* there may be more than one */\n-};\n+}\n \n /*-\n  * The actual type declared by this typedef is immaterial, provided that\n@@ -78,7 +78,7 @@ struct Dl_serinfo {\n  */\n struct __dlfunc_arg {\n     int     __dlfunc_dummy;\n-};\n+}\n \n alias dlfunc_t = void function(__dlfunc_arg);\n "}, {"sha": "c3693f85f5eab3a705ff024dfe326ae0e0a9e81b", "filename": "libphobos/libdruntime/core/sys/dragonflybsd/err.d", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fdragonflybsd%2Ferr.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fdragonflybsd%2Ferr.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fdragonflybsd%2Ferr.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -0,0 +1,31 @@\n+/**\n+  * D header file for DragonFlyBSD err.h.\n+  *\n+  * Copyright: Copyright \u00a9 2019, The D Language Foundation\n+  * License: <a href=\"http://www.boost.org/LICENSE_1_0.txt\">Boost License 1.0</a>.\n+  * Authors: Ernesto Castellotti\n+  */\n+module core.sys.dragonflybsd.err;\n+import core.stdc.stdarg : va_list;\n+\n+version (DragonFlyBSD):\n+extern (C):\n+nothrow:\n+@nogc:\n+\n+alias ExitFunction = void function(int);\n+\n+void err(int eval, scope const char* fmt, ...);\n+void errc(int eval, int code, scope const char* fmt, ...);\n+void errx(int eval, scope const char* fmt, ...);\n+void warn(scope const char* fmt, ...);\n+void warnc(int code, scope const char* fmt, ...);\n+void warnx(scope const char* fmt, ...);\n+void verr(int eval, scope const char* fmt, va_list args);\n+void verrc(int eval, int code, scope const char* fmt, va_list args);\n+void verrx(int eval, scope const char* fmt, va_list args);\n+void vwarn(scope const char* fmt, va_list args);\n+void vwarnc(int code, scope const char* fmt, va_list args);\n+void vwarnx(scope const char* fmt, va_list args);\n+void err_set_file(void* vfp);\n+void err_set_exit(ExitFunction exitf);"}, {"sha": "b0528167c2746c07377e49dec2cba8872a283937", "filename": "libphobos/libdruntime/core/sys/dragonflybsd/netinet/in_.d", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fdragonflybsd%2Fnetinet%2Fin_.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fdragonflybsd%2Fnetinet%2Fin_.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fdragonflybsd%2Fnetinet%2Fin_.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -264,34 +264,34 @@ struct ip_mreq\n {\n     in_addr imr_multiaddr;\n     in_addr imr_interface;\n-};\n+}\n \n struct ip_mreqn\n {\n     in_addr imr_multiaddr;\n     in_addr imr_address;\n     int     imr_ifindex;\n-};\n+}\n \n struct ip_mreq_source\n {\n     in_addr imr_multiaddr;\n     in_addr imr_sourceaddr;\n     in_addr imr_interface;\n-};\n+}\n \n struct group_req\n {\n     uint gr_interface;\n     sockaddr_storage gr_group;\n-};\n+}\n \n struct group_source_req\n {\n     uint gsr_interface;\n     sockaddr_storage gsr_group;\n     sockaddr_storage gsr_source;\n-};\n+}\n \n int setipv4sourcefilter(int, in_addr, in_addr, uint, uint, in_addr*);\n int getipv4sourcefilter(int, in_addr, in_addr, uint*, uint*, in_addr*);\n@@ -450,13 +450,13 @@ struct in6_pktinfo\n {\n     in6_addr ipi6_addr;\n     uint     ipi6_ifindex;\n-};\n+}\n \n struct ip6_mtuinfo\n {\n     sockaddr_in6 ip6m_addr;\n     uint         ip6m_mtu;\n-};\n+}\n \n enum IPV6_PORTRANGE_DEFAULT = 0;\n enum IPV6_PORTRANGE_HIGH    = 1;"}, {"sha": "5dad964057c37c451afcb1acd674e2cf28292372", "filename": "libphobos/libdruntime/core/sys/dragonflybsd/sys/link_elf.d", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fdragonflybsd%2Fsys%2Flink_elf.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fdragonflybsd%2Fsys%2Flink_elf.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fdragonflybsd%2Fsys%2Flink_elf.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -58,7 +58,7 @@ struct r_debug\n     int             r_version;\n     link_map*       r_map;\n     void function(r_debug*, link_map*) r_brk;\n-};\n+}\n \n struct dl_phdr_info\n {\n@@ -70,7 +70,7 @@ struct dl_phdr_info\n     uint64_t        dlpi_subs;\n     size_t          dlpi_tls_modid;\n     void*           dlpi_tls_data;\n-};\n+}\n \n \n private alias int function(dl_phdr_info*, size_t, void *) dl_iterate_phdr_cb;"}, {"sha": "fad91418e6d701587f5844a2fa653d09acd27696", "filename": "libphobos/libdruntime/core/sys/freebsd/dlfcn.d", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Ffreebsd%2Fdlfcn.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Ffreebsd%2Fdlfcn.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Ffreebsd%2Fdlfcn.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -54,7 +54,7 @@ static if (__BSD_VISIBLE)\n         void            *dli_fbase;     /* Base address of shared object. */\n         const(char)     *dli_sname;     /* Name of nearest symbol. */\n         void            *dli_saddr;     /* Address of nearest symbol. */\n-    };\n+    }\n \n     /*-\n      * The actual type declared by this typedef is immaterial, provided that\n@@ -67,7 +67,7 @@ static if (__BSD_VISIBLE)\n      */\n     struct __dlfunc_arg {\n         int     __dlfunc_dummy;\n-    };\n+    }\n \n     alias dlfunc_t = void function(__dlfunc_arg);\n \n@@ -77,13 +77,13 @@ static if (__BSD_VISIBLE)\n     struct Dl_serpath {\n         char *          dls_name;       /* single search path entry */\n         uint            dls_flags;      /* path information */\n-    };\n+    }\n \n     struct Dl_serinfo {\n         size_t          dls_size;       /* total buffer size */\n         uint            dls_cnt;        /* number of path entries */\n         Dl_serpath[1]   dls_serpath;    /* there may be more than one */\n-    };\n+    }\n }\n \n /* XSI functions first. */"}, {"sha": "8937e0ec70575b3954118bd56b7678050ca3a753", "filename": "libphobos/libdruntime/core/sys/freebsd/err.d", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Ffreebsd%2Ferr.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Ffreebsd%2Ferr.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Ffreebsd%2Ferr.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -0,0 +1,31 @@\n+/**\n+  * D header file for FreeBSD err.h.\n+  *\n+  * Copyright: Copyright \u00a9 2019, The D Language Foundation\n+  * License: <a href=\"http://www.boost.org/LICENSE_1_0.txt\">Boost License 1.0</a>.\n+  * Authors: Ernesto Castellotti\n+  */\n+module core.sys.freebsd.err;\n+import core.stdc.stdarg : va_list;\n+\n+version (FreeBSD):\n+extern (C):\n+nothrow:\n+@nogc:\n+\n+alias ExitFunction = void function(int);\n+\n+void err(int eval, scope const char* fmt, ...);\n+void errc(int eval, int code, scope const char* fmt, ...);\n+void errx(int eval, scope const char* fmt, ...);\n+void warn(scope const char* fmt, ...);\n+void warnc(int code, scope const char* fmt, ...);\n+void warnx(scope const char* fmt, ...);\n+void verr(int eval, scope const char* fmt, va_list args);\n+void verrc(int eval, int code, scope const char* fmt, va_list args);\n+void verrx(int eval, scope const char* fmt, va_list args);\n+void vwarn(scope const char* fmt, va_list args);\n+void vwarnc(int code, scope const char* fmt, va_list args);\n+void vwarnx(scope const char* fmt, va_list args);\n+void err_set_file(void* vfp);\n+void err_set_exit(ExitFunction exitf);"}, {"sha": "d32408458d3d78833d99298393218115f79dacea", "filename": "libphobos/libdruntime/core/sys/freebsd/execinfo.d", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Ffreebsd%2Fexecinfo.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Ffreebsd%2Fexecinfo.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Ffreebsd%2Fexecinfo.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -14,6 +14,8 @@ nothrow:\n \n version (GNU)\n     version = BacktraceExternal;\n+version (LDC)\n+    version = BacktraceExternal;\n \n version (BacktraceExternal)\n {"}, {"sha": "bce1791910201a2d70fc012761804169276b7fff", "filename": "libphobos/libdruntime/core/sys/freebsd/netinet/in_.d", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Ffreebsd%2Fnetinet%2Fin_.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Ffreebsd%2Fnetinet%2Fin_.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Ffreebsd%2Fnetinet%2Fin_.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -268,34 +268,34 @@ static if (__BSD_VISIBLE)\n     {\n         in_addr imr_multiaddr;\n         in_addr imr_interface;\n-    };\n+    }\n \n     struct ip_mreqn\n     {\n         in_addr imr_multiaddr;\n         in_addr imr_address;\n         int     imr_ifindex;\n-    };\n+    }\n \n     struct ip_mreq_source\n     {\n         in_addr imr_multiaddr;\n         in_addr imr_sourceaddr;\n         in_addr imr_interface;\n-    };\n+    }\n \n     struct group_req\n     {\n         uint gr_interface;\n         sockaddr_storage gr_group;\n-    };\n+    }\n \n     struct group_source_req\n     {\n         uint gsr_interface;\n         sockaddr_storage gsr_group;\n         sockaddr_storage gsr_source;\n-    };\n+    }\n \n     int setipv4sourcefilter(int, in_addr, in_addr, uint, uint, in_addr*);\n     int getipv4sourcefilter(int, in_addr, in_addr, uint*, uint*, in_addr*);\n@@ -463,13 +463,13 @@ static if (__POSIX_VISIBLE)\n     {\n         in6_addr ipi6_addr;\n         uint     ipi6_ifindex;\n-    };\n+    }\n \n     struct ip6_mtuinfo\n     {\n         sockaddr_in6 ip6m_addr;\n         uint         ip6m_mtu;\n-    };\n+    }\n \n     enum IPV6_PORTRANGE_DEFAULT = 0;\n     enum IPV6_PORTRANGE_HIGH    = 1;"}, {"sha": "7f5786219b7f256a88ef65908ef877f9c9bd9205", "filename": "libphobos/libdruntime/core/sys/freebsd/sys/event.d", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Ffreebsd%2Fsys%2Fevent.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Ffreebsd%2Fsys%2Fevent.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Ffreebsd%2Fsys%2Fevent.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -161,6 +161,23 @@ enum\n }\n \n int kqueue();\n-int kevent(int kq, const kevent_t *changelist, int nchanges,\n-           kevent_t *eventlist, int nevents,\n-           const timespec *timeout);\n+\n+version (GNU)\n+{\n+    int kevent(int kq, const kevent_t *changelist, int nchanges,\n+               kevent_t *eventlist, int nevents,\n+               const timespec *timeout);\n+}\n+else\n+{\n+    static if (__FreeBSD_version >= 1200000)\n+        pragma(mangle, \"kevent@@FBSD_1.5\")\n+        int kevent(int kq, const kevent_t *changelist, int nchanges,\n+                   kevent_t *eventlist, int nevents,\n+                   const timespec *timeout);\n+    else\n+        pragma(mangle, \"kevent@FBSD_1.0\")\n+        int kevent(int kq, const kevent_t *changelist, int nchanges,\n+                   kevent_t *eventlist, int nevents,\n+                   const timespec *timeout);\n+}"}, {"sha": "d743d51a7b214437b1bb735a32c8a26875109eaa", "filename": "libphobos/libdruntime/core/sys/freebsd/sys/link_elf.d", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Ffreebsd%2Fsys%2Flink_elf.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Ffreebsd%2Fsys%2Flink_elf.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Ffreebsd%2Fsys%2Flink_elf.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -56,7 +56,7 @@ struct r_debug\n     int             r_version;\n     link_map*       r_map;\n     void function(r_debug*, link_map*) r_brk;\n-};\n+}\n \n struct dl_phdr_info\n {\n@@ -68,7 +68,7 @@ struct dl_phdr_info\n     uint64_t        dlpi_subs;\n     size_t          dlpi_tls_modid;\n     void*           dlpi_tls_data;\n-};\n+}\n \n \n private alias extern(C) int function(dl_phdr_info*, size_t, void *) dl_iterate_phdr_cb;"}, {"sha": "1b0f0423001f72e88479c8731a5117a591137776", "filename": "libphobos/libdruntime/core/sys/freebsd/sys/mount.d", "status": "modified", "additions": 44, "deletions": 14, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Ffreebsd%2Fsys%2Fmount.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Ffreebsd%2Fsys%2Fmount.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Ffreebsd%2Fsys%2Fmount.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -298,17 +298,47 @@ enum uint VQ_FLAG2000 = 0x2000;\n enum uint VQ_FLAG4000 = 0x4000;\n enum uint VQ_FLAG8000 = 0x8000;\n \n-int fhopen(const fhandle_t*, int);\n-int fhstat(const fhandle_t*, stat_t*);\n-int fhstatfs(const fhandle_t*, statfs_t*);\n-int fstatfs(int, statfs_t*);\n-int getfh(const char*, fhandle_t*);\n-int getfsstat(statfs_t*, c_long, int);\n-int getmntinfo(statfs_t**, int);\n-int lgetfh(const char*, fhandle_t*);\n-int mount(const char*, const char*, int, void*);\n-//int nmount(iovec*, uint, int);\n-int statfs(const char*, statfs_t*);\n-int unmount(const char*, int);\n-\n-//int getvfsbyname(const char*, xvfsconf*);\n+version (GNU)\n+{\n+    int fhopen(const fhandle_t*, int);\n+    int fhstat(const fhandle_t*, stat_t*);\n+    int fhstatfs(const fhandle_t*, statfs_t*);\n+    int fstatfs(int, statfs_t*);\n+    int getfh(const char*, fhandle_t*);\n+    int getfsstat(statfs_t*, c_long, int);\n+    int getmntinfo(statfs_t**, int);\n+    int lgetfh(const char*, fhandle_t*);\n+    int mount(const char*, const char*, int, void*);\n+    //int nmount(iovec*, uint, int);\n+    int statfs(const char*, statfs_t*);\n+    int unmount(const char*, int);\n+    //int getvfsbyname(const char*, xvfsconf*);\n+}\n+else\n+{\n+    static if (__FreeBSD_version >= 1200000)\n+    {\n+        pragma(mangle, \"fhstat@FBSD_1.5\")     int fhstat(const fhandle_t*, stat_t*);\n+        pragma(mangle, \"fhstatfs@FBSD_1.5\")   int fhstatfs(const fhandle_t*, statfs_t*);\n+        pragma(mangle, \"fstatfs@FBSD_1.5\")    int fstatfs(int, statfs_t*);\n+        pragma(mangle, \"getfsstat@FBSD_1.5\")  int getfsstat(statfs_t*, c_long, int);\n+        pragma(mangle, \"getmntinfo@FBSD_1.5\") int getmntinfo(statfs_t**, int);\n+        pragma(mangle, \"statfs@FBSD_1.5\")     int statfs(const char*, statfs_t*);\n+    }\n+    else\n+    {\n+        pragma(mangle, \"fhstat@FBSD_1.0\")     int fhstat(const fhandle_t*, stat_t*);\n+        pragma(mangle, \"fhstatfs@FBSD_1.0\")   int fhstatfs(const fhandle_t*, statfs_t*);\n+        pragma(mangle, \"fstatfs@FBSD_1.0\")    int fstatfs(int, statfs_t*);\n+        pragma(mangle, \"getfsstat@FBSD_1.0\")  int getfsstat(statfs_t*, c_long, int);\n+        pragma(mangle, \"getmntinfo@FBSD_1.0\") int getmntinfo(statfs_t**, int);\n+        pragma(mangle, \"statfs@FBSD_1.0\")     int statfs(const char*, statfs_t*);\n+    }\n+    pragma(mangle, \"fhopen@@FBSD_1.0\")        int fhopen(const fhandle_t*, int);\n+    pragma(mangle, \"getfh@@FBSD_1.0\")         int getfh(const char*, fhandle_t*);\n+    pragma(mangle, \"lgetfh@@FBSD_1.0\")        int lgetfh(const char*, fhandle_t*);\n+    pragma(mangle, \"mount@@FBSD_1.0\")         int mount(const char*, const char*, int, void*);\n+    //int nmount(iovec*, uint, int);\n+    pragma(mangle, \"unmount@@FBSD_1.0\")       int unmount(const char*, int);\n+    //int getvfsbyname(const char*, xvfsconf*);\n+}"}, {"sha": "a815d0907fe16fdc3ecfaf3394e772911d648e84", "filename": "libphobos/libdruntime/core/sys/linux/dlfcn.d", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fdlfcn.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fdlfcn.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fdlfcn.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -9,6 +9,7 @@ version (linux):\n extern (C):\n nothrow:\n @nogc:\n+@system:\n \n version (ARM)     version = ARM_Any;\n version (AArch64) version = ARM_Any;\n@@ -236,14 +237,14 @@ static if (__USE_GNU)\n     enum LM_ID_NEWLM = -1;\n }\n \n-// void* dlopen(in char* __file, int __mode); // POSIX\n+// void* dlopen(const scope char* __file, int __mode); // POSIX\n // int dlclose(void* __handle); // POSIX\n-// void* dlsym(void* __handle, in char* __name); // POSIX\n+// void* dlsym(void* __handle, const scope char* __name); // POSIX\n \n static if (__USE_GNU)\n {\n-    void* dlmopen(Lmid_t __nsid, in char* __file, int __mode);\n-    void* dlvsym(void* __handle, in char* __name, in char* __version);\n+    void* dlmopen(Lmid_t __nsid, const scope char* __file, int __mode);\n+    void* dlvsym(void* __handle, const scope char* __name, const scope char* __version);\n }\n \n // char* dlerror(); // POSIX\n@@ -258,7 +259,7 @@ static if (__USE_GNU)\n         void* dli_saddr;\n     }\n \n-    int dladdr(in void* __address, Dl_info* __info);\n+    int dladdr(const scope void* __address, Dl_info* __info);\n     int dladdr1(void* __address, Dl_info* __info, void** __extra_info, int __flags);\n \n     enum"}, {"sha": "4d0b2273117846c059e2477e9d6f6b9e4a494f9d", "filename": "libphobos/libdruntime/core/sys/linux/elf.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Felf.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Felf.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Felf.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -9,6 +9,7 @@ version (linux):\n extern (C):\n pure:\n nothrow:\n+@system:\n \n import core.stdc.stdint;\n \n@@ -831,7 +832,6 @@ enum AT_EXECFN =       31;\n enum AT_SYSINFO =      32;\n enum AT_SYSINFO_EHDR = 33;\n \n-;\n enum AT_L1I_CACHESHAPE =       34;\n enum AT_L1D_CACHESHAPE =       35;\n enum AT_L2_CACHESHAPE =        36;"}, {"sha": "0c3aed98853b18442e4f9998896eff1c64e212cf", "filename": "libphobos/libdruntime/core/sys/linux/epoll.d", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fepoll.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fepoll.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fepoll.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -14,6 +14,7 @@ extern (C):\n @system:\n @nogc:\n nothrow:\n+@system:\n \n version (ARM)     version = ARM_Any;\n version (AArch64) version = ARM_Any;"}, {"sha": "be5378d0618d6ccd2f68b03325ae610e61a34c45", "filename": "libphobos/libdruntime/core/sys/linux/err.d", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Ferr.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Ferr.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Ferr.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -0,0 +1,24 @@\n+/**\n+  * D header file for Linux err.h.\n+  *\n+  * Copyright: Copyright \u00a9 2019, The D Language Foundation\n+  * License: <a href=\"http://www.boost.org/LICENSE_1_0.txt\">Boost License 1.0</a>.\n+  * Authors: Ernesto Castellotti\n+  */\n+module core.sys.linux.err;\n+import core.stdc.stdarg : va_list;\n+\n+version (linux):\n+extern (C):\n+nothrow:\n+@nogc:\n+@system:\n+\n+void err(int eval, scope const char* fmt, ...);\n+void errx(int eval, scope const char* fmt, ...);\n+void warn(scope const char* fmt, ...);\n+void warnx(scope const char* fmt, ...);\n+void verr(int eval, scope const char* fmt, va_list args);\n+void verrx(int eval, scope const char* fmt, va_list args);\n+void vwarn(scope const char* fmt, va_list args);\n+void vwarnx(scope const char* fmt, va_list args);"}, {"sha": "02ae151427e6d119d745964f7fe5c23b12fe57a0", "filename": "libphobos/libdruntime/core/sys/linux/errno.d", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Ferrno.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Ferrno.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Ferrno.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -8,6 +8,7 @@ module core.sys.linux.errno;\n version (linux):\n extern (C):\n nothrow:\n+@system:\n \n public import core.stdc.errno;\n import core.sys.linux.config;"}, {"sha": "4169ca36c5be452c2dc8d3972a72f6d709c80f8b", "filename": "libphobos/libdruntime/core/sys/linux/execinfo.d", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fexecinfo.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fexecinfo.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fexecinfo.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -10,6 +10,8 @@ module core.sys.linux.execinfo;\n version (linux):\n extern (C):\n nothrow:\n+@system:\n+@nogc:\n \n int backtrace(void** buffer, int size);\n char** backtrace_symbols(const(void*)* buffer, int size);"}, {"sha": "11c374530bfdf3e646ed256cb9ab139ddec6a0e1", "filename": "libphobos/libdruntime/core/sys/linux/fcntl.d", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Ffcntl.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Ffcntl.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Ffcntl.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -5,6 +5,7 @@ public import core.sys.posix.fcntl;\n version (linux):\n extern(C):\n nothrow:\n+@system:\n \n // From linux/falloc.h\n /// fallocate(2) params"}, {"sha": "5490e97aa0fd19f369006eb024a713db251f6801", "filename": "libphobos/libdruntime/core/sys/linux/ifaddrs.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fifaddrs.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fifaddrs.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fifaddrs.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -22,6 +22,7 @@ version (linux):\n extern (C):\n nothrow:\n @nogc:\n+@system:\n \n struct ifaddrs\n {\n@@ -46,7 +47,7 @@ struct ifaddrs\n \n     /// Address specific data\n     void* ifa_data;\n-};\n+}\n \n /// Returns: linked list of ifaddrs structures describing interfaces\n int getifaddrs(ifaddrs** );"}, {"sha": "b417ec8ec772cd5ca8208ff57d94a5711418db75", "filename": "libphobos/libdruntime/core/sys/linux/link.d", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Flink.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Flink.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Flink.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -8,6 +8,7 @@ module core.sys.linux.link;\n version (linux):\n extern (C):\n nothrow:\n+@system:\n \n version (ARM)     version = ARM_Any;\n version (AArch64) version = ARM_Any;"}, {"sha": "67bf6545c8f8ab4cf73ddb2289bd5230418b41f2", "filename": "libphobos/libdruntime/core/sys/linux/netinet/in_.d", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fnetinet%2Fin_.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fnetinet%2Fin_.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fnetinet%2Fin_.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -121,27 +121,27 @@ version (linux_libc)\n         {\n             in_addr imr_multiaddr;\n             in_addr imr_interface;\n-        };\n+        }\n \n         struct ip_mreq_source\n         {\n             in_addr imr_multiaddr;\n             in_addr imr_interface;\n             in_addr imr_sourceaddr;\n-        };\n+        }\n \n         struct group_req\n         {\n             uint gr_interface;\n             sockaddr_storage gr_group;\n-        };\n+        }\n \n         struct group_source_req\n         {\n             uint gsr_interface;\n             sockaddr_storage gsr_group;\n             sockaddr_storage gsr_source;\n-        };\n+        }\n \n         struct ip_msfilter\n         {\n@@ -150,7 +150,7 @@ version (linux_libc)\n             uint imsf_fmode;\n             uint imsf_numsrc;\n             in_addr[1] imsf_slist;\n-        };\n+        }\n \n         extern(D) size_t IP_MSFILTER_SIZE(int numsrc)\n         {\n@@ -164,7 +164,7 @@ version (linux_libc)\n             uint gf_fmode;\n             uint gf_numsrc;\n             sockaddr_storage[1] gf_slist;\n-        };\n+        }\n \n         extern(D) size_t GROUP_FILTER_SIZE(int numsrc) pure @safe\n         {\n@@ -186,13 +186,13 @@ version (linux_libc)\n         {\n             in6_addr ipi6_addr;\n             uint ipi6_ifindex;\n-        };\n+        }\n \n         struct ip6_mtuinfo\n         {\n             sockaddr_in6 ip6m_addr;\n             uint ip6m_mtu;\n-        };\n+        }\n \n         int inet6_opt_init(void* __extbuf, socklen_t __extlen);\n         int inet6_opt_append(void* __extbuf, socklen_t __extlen, int __offset,\n@@ -313,21 +313,21 @@ version (linux_libc)\n         {\n             in_addr ip_dst;\n             char[40] ip_opts = 0;\n-        };\n+        }\n \n         struct ip_mreqn\n         {\n             in_addr imr_multiaddr;\n             in_addr imr_address;\n             int imr_ifindex;\n-        };\n+        }\n \n         struct in_pktinfo\n         {\n             int ipi_ifindex;\n             in_addr ipi_spec_dst;\n             in_addr ipi_addr;\n-        };\n+        }\n     }\n \n     enum IPV6_ADDRFORM       = 1;"}, {"sha": "dc815a0fc3c7aabb1062d1f5ae6da9f281c5f1a2", "filename": "libphobos/libdruntime/core/sys/linux/sched.d", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fsched.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fsched.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fsched.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -17,6 +17,7 @@\n module core.sys.linux.sched;\n \n import core.bitop : popcnt;\n+import core.stdc.stdlib : malloc, free;\n import core.sys.posix.sched;\n import core.sys.posix.config;\n import core.sys.posix.sys.types;\n@@ -25,6 +26,7 @@ version (linux):\n extern (C):\n @nogc:\n nothrow:\n+@system:\n \n \n private // helpers\n@@ -49,6 +51,21 @@ private // helpers\n         return 1UL << (cpu % __NCPUBITS);\n     }\n \n+    cpu_set_t* __CPU_ALLOC(size_t count)\n+    {\n+        return cast(cpu_set_t*) malloc(__CPU_ALLOC_SIZE(count));\n+    }\n+\n+    size_t __CPU_ALLOC_SIZE(size_t count) pure\n+    {\n+        return ((count + __NCPUBITS - 1) / __NCPUBITS) * cpu_mask.sizeof;\n+    }\n+\n+    void __CPU_FREE(cpu_set_t* set)\n+    {\n+        free(cast(void*) set);\n+    }\n+\n     cpu_mask __CPU_SET_S(size_t cpu, size_t setsize, cpu_set_t* cpusetp) pure\n     {\n         if (cpu < 8 * setsize)\n@@ -87,6 +104,21 @@ struct cpu_set_t\n \n /// Access macros for 'cpu_set' (missing a lot of them)\n \n+cpu_set_t* CPU_ALLOC(size_t count)\n+{\n+    return __CPU_ALLOC(count);\n+}\n+\n+size_t CPU_ALLOC_SIZE(size_t count) pure\n+{\n+    return __CPU_ALLOC_SIZE(count);\n+}\n+\n+void CPU_FREE(cpu_set_t* set)\n+{\n+    __CPU_FREE(set);\n+}\n+\n cpu_mask CPU_SET(size_t cpu, cpu_set_t* cpusetp) pure\n {\n      return __CPU_SET_S(cpu, cpu_set_t.sizeof, cpusetp);\n@@ -102,6 +134,11 @@ int CPU_COUNT(cpu_set_t* cpusetp) pure\n     return __CPU_COUNT_S(cpu_set_t.sizeof, cpusetp);\n }\n \n+int CPU_COUNT_S(size_t setsize, cpu_set_t* cpusetp) pure\n+{\n+    return __CPU_COUNT_S(setsize, cpusetp);\n+}\n+\n /* Scheduler control functions */\n int sched_setaffinity(pid_t pid, size_t cpusetsize, cpu_set_t *mask);\n int sched_getaffinity(pid_t pid, size_t cpusetsize, cpu_set_t *mask);\n@@ -110,6 +147,12 @@ int sched_getaffinity(pid_t pid, size_t cpusetsize, cpu_set_t *mask);\n int clone(int function(void*), void* child_stack, int flags, void* arg, ...);\n int unshare(int flags) @trusted;\n \n+version (CRuntime_Glibc)\n+{\n+    /* Determine CPU on which the calling thread is running */\n+    int sched_getcpu();\n+}\n+\n enum CLONE_FILES = 0x400;\n enum CLONE_FS = 0x200;\n enum CLONE_NEWCGROUP = 0x2000000;\n@@ -122,4 +165,5 @@ enum CLONE_NEWUTS = 0x4000000;\n enum CLONE_SIGHAND = 0x800;\n enum CLONE_SYSVSEM = 0x40000;\n enum CLONE_THREAD = 0x10000;\n+enum CLONE_VFORK = 0x4000;\n enum CLONE_VM = 0x100;"}, {"sha": "ab8971b482f65b6da1c3b219615aec2b5a75e50d", "filename": "libphobos/libdruntime/core/sys/linux/stdio.d", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fstdio.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fstdio.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fstdio.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -13,6 +13,8 @@ import core.sys.linux.config : __USE_FILE_OFFSET64;\n import core.stdc.stdio : FILE;\n import core.stdc.stddef : wchar_t;\n \n+@system:\n+\n extern(C) nothrow\n {\n     alias ssize_t function(void *cookie, char *buf, size_t size) cookie_read_function_t;"}, {"sha": "1b2c8d86a4ab4e01200dc72f56c03cb0910d2c17", "filename": "libphobos/libdruntime/core/sys/linux/string.d", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fstring.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fstring.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fstring.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -14,6 +14,7 @@ version (linux):\n extern (C):\n nothrow:\n @nogc:\n+@system:\n \n static if (__USE_GNU)\n {"}, {"sha": "e0acf33fa51d5a40326b3f58305e88ab4d0b2d35", "filename": "libphobos/libdruntime/core/sys/linux/sys/inotify.d", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fsys%2Finotify.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fsys%2Finotify.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fsys%2Finotify.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -10,6 +10,7 @@ version (linux):\n extern (C):\n @system:\n nothrow:\n+@nogc:\n \n version (ARM)     version = ARM_Any;\n version (AArch64) version = ARM_Any;"}, {"sha": "20e8cf29f8d7cc89efd6feb8570e17e83c0a1a19", "filename": "libphobos/libdruntime/core/sys/linux/sys/mman.d", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fsys%2Fmman.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fsys%2Fmman.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fsys%2Fmman.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -8,6 +8,8 @@ module core.sys.linux.sys.mman;\n version (linux):\n extern (C):\n nothrow:\n+@system:\n+@nogc:\n \n version (ARM)     version = ARM_Any;\n version (AArch64) version = ARM_Any;"}, {"sha": "a7322166a204aff43690c8c2f0dbcc5e33da1cf3", "filename": "libphobos/libdruntime/core/sys/linux/sys/prctl.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fsys%2Fprctl.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fsys%2Fprctl.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fsys%2Fprctl.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -141,7 +141,7 @@ struct prctl_mm_map\n     ulong*   auxv;\n     uint     auxv_size;\n     uint     exe_fd;\n-};\n+}\n \n int prctl(int option, size_t arg2, size_t arg3, size_t arg4, size_t arg5);\n "}, {"sha": "736b1456169b4faf7b01e207385038ef2648026f", "filename": "libphobos/libdruntime/core/sys/linux/sys/signalfd.d", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fsys%2Fsignalfd.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fsys%2Fsignalfd.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fsys%2Fsignalfd.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -14,6 +14,7 @@ version (linux):\n extern (C):\n @system:\n nothrow:\n+@nogc:\n \n struct signalfd_siginfo\n {"}, {"sha": "0c9ed592c3ba35e542632cd281f3e1d8daf164af", "filename": "libphobos/libdruntime/core/sys/linux/sys/sysinfo.d", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fsys%2Fsysinfo.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fsys%2Fsysinfo.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fsys%2Fsysinfo.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -7,6 +7,7 @@\n module core.sys.linux.sys.sysinfo;\n \n version (linux) extern(C) @nogc nothrow:\n+@system:\n \n import core.sys.linux.config;\n "}, {"sha": "6ea626ed39002798b1f870b7b49436131c278223", "filename": "libphobos/libdruntime/core/sys/linux/sys/time.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fsys%2Ftime.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fsys%2Ftime.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fsys%2Ftime.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -13,7 +13,7 @@\n  */\n module core.sys.linux.sys.time;\n \n-private import core.sys.linux.config;\n+import core.sys.linux.config;\n public import core.sys.posix.sys.time;  // timeval\n \n version (linux):"}, {"sha": "2f8d3f376f90b96a1c4993d200226abb5593bef3", "filename": "libphobos/libdruntime/core/sys/linux/sys/xattr.d", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fsys%2Fxattr.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fsys%2Fxattr.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Fsys%2Fxattr.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -13,6 +13,7 @@ version (linux):\n extern (C):\n @system:\n nothrow:\n+@nogc:\n \n enum {\n     XATTR_CREATE = 1, /* set value, fail if attr already exists.  */\n@@ -52,17 +53,17 @@ enum XATTR_CAPS_SUFFIX = \"capability\";\n enum XATTR_NAME_CAPS = XATTR_SECURITY_PREFIX ~ XATTR_CAPS_SUFFIX;\n \n \n-int setxattr(in char* path, in char* name, in void* value, size_t size, int flags);\n+int setxattr(const scope char* path, const scope char* name, const scope void* value, size_t size, int flags);\n \n-int lsetxattr(in char* path, in char* name, in void* value, size_t size, int flags);\n-int fsetxattr(int fd, in char* name, in void* value, size_t size, int flags);\n-ssize_t getxattr(in char* path, in char* name, void* value, size_t size);\n-ssize_t lgetxattr(in char* path, in char* name, void* value, size_t size);\n-ssize_t fgetxattr(int fd, in char* name, void* value, size_t size);\n-ssize_t listxattr(in char* path, char* list, size_t size);\n-ssize_t llistxattr(in char* path, char* list, size_t size);\n+int lsetxattr(const scope char* path, const scope char* name, const scope void* value, size_t size, int flags);\n+int fsetxattr(int fd, const scope char* name, const scope void* value, size_t size, int flags);\n+ssize_t getxattr(const scope char* path, const scope char* name, void* value, size_t size);\n+ssize_t lgetxattr(const scope char* path, const scope char* name, void* value, size_t size);\n+ssize_t fgetxattr(int fd, const scope char* name, void* value, size_t size);\n+ssize_t listxattr(const scope char* path, char* list, size_t size);\n+ssize_t llistxattr(const scope char* path, char* list, size_t size);\n ssize_t flistxattr (int __fd, char *list, size_t size);\n-int removexattr (in char *path, in char *name);\n-int lremovexattr (in char *path, in char *name);\n-int fremovexattr (int fd, in char *name);\n+int removexattr (const scope char *path, const scope char *name);\n+int lremovexattr (const scope char *path, const scope char *name);\n+int fremovexattr (int fd, const scope char *name);\n "}, {"sha": "3246e62ec040d5220ef7b5bbda9633fbfd0ed93b", "filename": "libphobos/libdruntime/core/sys/linux/tipc.d", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Ftipc.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Ftipc.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Ftipc.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -10,6 +10,7 @@ module core.sys.linux.tipc;\n \n version (linux):\n extern (C) nothrow @nogc:\n+@system:\n \n struct tipc_portid\n {"}, {"sha": "4845746700558f904eda7cbeff7b93f9687966cb", "filename": "libphobos/libdruntime/core/sys/linux/unistd.d", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Funistd.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Funistd.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Flinux%2Funistd.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -5,6 +5,7 @@ public import core.sys.posix.unistd;\n version (linux):\n extern(C):\n nothrow:\n+@system:\n \n // Additional seek constants for sparse file handling\n // from Linux's unistd.h, stdio.h, and linux/fs.h\n@@ -18,3 +19,6 @@ enum {\n \n /// Prompt for a password without echoing it.\n char* getpass(const(char)* prompt);\n+\n+// Exit all threads in a process\n+void exit_group(int status);"}, {"sha": "dbbcc7638fdbcd53859f17712b4eac21ae654b5b", "filename": "libphobos/libdruntime/core/sys/netbsd/dlfcn.d", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fnetbsd%2Fdlfcn.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fnetbsd%2Fdlfcn.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fnetbsd%2Fdlfcn.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -55,7 +55,7 @@ static if (__BSD_VISIBLE)\n         void            *dli_fbase;     /* Base address of shared object. */\n         const(char)     *dli_sname;     /* Name of nearest symbol. */\n         void            *dli_saddr;     /* Address of nearest symbol. */\n-    };\n+    }\n \n     /*-\n      * The actual type declared by this typedef is immaterial, provided that\n@@ -68,7 +68,7 @@ static if (__BSD_VISIBLE)\n      */\n     struct __dlfunc_arg {\n         int     __dlfunc_dummy;\n-    };\n+    }\n \n     alias dlfunc_t = void function(__dlfunc_arg);\n \n@@ -78,13 +78,13 @@ static if (__BSD_VISIBLE)\n     struct Dl_serpath {\n         char *          dls_name;       /* single search path entry */\n         uint            dls_flags;      /* path information */\n-    };\n+    }\n \n     struct Dl_serinfo {\n         size_t          dls_size;       /* total buffer size */\n         uint            dls_cnt;        /* number of path entries */\n         Dl_serpath[1]   dls_serpath;    /* there may be more than one */\n-    };\n+    }\n }\n \n private template __externC(RT, P...)"}, {"sha": "44eb66adc2fc0aff04d4760fe76e839eb64acb15", "filename": "libphobos/libdruntime/core/sys/netbsd/err.d", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fnetbsd%2Ferr.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fnetbsd%2Ferr.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fnetbsd%2Ferr.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -0,0 +1,27 @@\n+/**\n+  * D header file for NetBSD err.h.\n+  *\n+  * Copyright: Copyright \u00a9 2019, The D Language Foundation\n+  * License: <a href=\"http://www.boost.org/LICENSE_1_0.txt\">Boost License 1.0</a>.\n+  * Authors: Ernesto Castellotti\n+  */\n+module core.sys.netbsd.err;\n+import core.stdc.stdarg : va_list;\n+\n+version (NetBSD):\n+extern (C):\n+nothrow:\n+@nogc:\n+\n+void err(int eval, scope const char* fmt, ...);\n+void errc(int eval, int code, scope const char* fmt, ...);\n+void errx(int eval, scope const char* fmt, ...);\n+void warn(scope const char* fmt, ...);\n+void warnc(int code, scope const char* fmt, ...);\n+void warnx(scope const char* fmt, ...);\n+void verr(int eval, scope const char* fmt, va_list args);\n+void verrc(int eval, int code, scope const char* fmt, va_list args);\n+void verrx(int eval, scope const char* fmt, va_list args);\n+void vwarn(scope const char* fmt, va_list args);\n+void vwarnc(int code, scope const char* fmt, va_list args);\n+void vwarnx(scope const char* fmt, va_list args);"}, {"sha": "4caec61adc8f9c80d144caff8bc04e14a74e6cac", "filename": "libphobos/libdruntime/core/sys/netbsd/sys/link_elf.d", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fnetbsd%2Fsys%2Flink_elf.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fnetbsd%2Fsys%2Flink_elf.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fnetbsd%2Fsys%2Flink_elf.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -50,7 +50,7 @@ struct r_debug\n     int             r_version;\n     link_map*       r_map;\n     void function(r_debug*, link_map*) r_brk;\n-};\n+}\n \n struct dl_phdr_info\n {\n@@ -62,7 +62,7 @@ struct dl_phdr_info\n     uint64_t        dlpi_subs;\n     size_t          dlpi_tls_modid;\n     void*           dlpi_tls_data;\n-};\n+}\n \n \n private alias extern(C) int function(dl_phdr_info*, size_t, void *) dl_iterate_phdr_cb;"}, {"sha": "b4676140e382251d7b22da72c1ac4f6a2739ab5b", "filename": "libphobos/libdruntime/core/sys/openbsd/err.d", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fopenbsd%2Ferr.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fopenbsd%2Ferr.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fopenbsd%2Ferr.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -0,0 +1,27 @@\n+/**\n+  * D header file for OpenBSD err.h.\n+  *\n+  * Copyright: Copyright \u00a9 2019, The D Language Foundation\n+  * License: <a href=\"http://www.boost.org/LICENSE_1_0.txt\">Boost License 1.0</a>.\n+  * Authors: Ernesto Castellotti\n+  */\n+module core.sys.openbsd.err;\n+import core.stdc.stdarg : va_list;\n+\n+version (OpenBSD):\n+extern (C):\n+nothrow:\n+@nogc:\n+\n+void err(int eval, scope const char* fmt, ...);\n+void errc(int eval, int code, scope const char* fmt, ...);\n+void errx(int eval, scope const char* fmt, ...);\n+void warn(scope const char* fmt, ...);\n+void warnc(int code, scope const char* fmt, ...);\n+void warnx(scope const char* fmt, ...);\n+void verr(int eval, scope const char* fmt, va_list args);\n+void verrc(int eval, int code, scope const char* fmt, va_list args);\n+void verrx(int eval, scope const char* fmt, va_list args);\n+void vwarn(scope const char* fmt, va_list args);\n+void vwarnc(int code, scope const char* fmt, va_list args);\n+void vwarnx(scope const char* fmt, va_list args);"}, {"sha": "f88671a31607d766721af673c23796a07e4f651d", "filename": "libphobos/libdruntime/core/sys/openbsd/sys/link_elf.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fopenbsd%2Fsys%2Flink_elf.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fopenbsd%2Fsys%2Flink_elf.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fopenbsd%2Fsys%2Flink_elf.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -55,7 +55,7 @@ struct dl_phdr_info\n     char*           dlpi_name;\n     ElfW!\"Phdr\"*    dlpi_phdr;\n     ElfW!\"Half\"     dlpi_phnum;\n-};\n+}\n \n \n private alias int function(dl_phdr_info*, size_t, void *) dl_iterate_phdr_cb;"}, {"sha": "f4e0f122d30a8078e4a778c32424765754320c02", "filename": "libphobos/libdruntime/core/sys/posix/aio.d", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Faio.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Faio.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Faio.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -8,8 +8,8 @@\n  */\n module core.sys.posix.aio;\n \n-private import core.sys.posix.signal;\n-private import core.sys.posix.sys.types;\n+import core.sys.posix.signal;\n+import core.sys.posix.sys.types;\n \n version (OSX)\n     version = Darwin;"}, {"sha": "6881142a0fbb3a48db745af48b87fa67a4c922f1", "filename": "libphobos/libdruntime/core/sys/posix/arpa/inet.d", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Farpa%2Finet.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Farpa%2Finet.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Farpa%2Finet.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -14,7 +14,7 @@\n  */\n module core.sys.posix.arpa.inet;\n \n-private import core.sys.posix.config;\n+import core.sys.posix.config;\n public import core.stdc.inttypes; // for uint32_t, uint16_t\n public import core.sys.posix.sys.socket; // for socklen_t\n \n@@ -51,11 +51,11 @@ uint16_t htons(uint16_t);\n uint32_t ntohl(uint32_t);\n uint16_t ntohs(uint16_t);\n \n-in_addr_t inet_addr(in char*);\n+in_addr_t inet_addr(const scope char*);\n char*     inet_ntoa(in_addr);\n // per spec: const char* inet_ntop(int, const void*, char*, socklen_t);\n-char*     inet_ntop(int, in void*, char*, socklen_t);\n-int       inet_pton(int, in char*, void*);\n+char*     inet_ntop(int, const scope void*, char*, socklen_t);\n+int       inet_pton(int, const scope char*, void*);\n */\n \n version (CRuntime_Glibc)\n@@ -78,10 +78,10 @@ version (CRuntime_Glibc)\n     uint16_t ntohs(uint16_t);\n     }\n \n-    in_addr_t       inet_addr(in char*);\n+    in_addr_t       inet_addr(const scope char*);\n     char*           inet_ntoa(in_addr);\n-    const(char)*    inet_ntop(int, in void*, char*, socklen_t);\n-    int             inet_pton(int, in char*, void*);\n+    const(char)*    inet_ntop(int, const scope void*, char*, socklen_t);\n+    int             inet_pton(int, const scope char*, void*);\n }\n else version (Darwin)\n {\n@@ -103,10 +103,10 @@ else version (Darwin)\n     uint16_t ntohs(uint16_t);\n     }\n \n-    in_addr_t       inet_addr(in char*);\n+    in_addr_t       inet_addr(const scope char*);\n     char*           inet_ntoa(in_addr);\n-    const(char)*    inet_ntop(int, in void*, char*, socklen_t);\n-    int             inet_pton(int, in char*, void*);\n+    const(char)*    inet_ntop(int, const scope void*, char*, socklen_t);\n+    int             inet_pton(int, const scope char*, void*);\n }\n else version (FreeBSD)\n {\n@@ -128,10 +128,10 @@ else version (FreeBSD)\n     uint16_t ntohs(uint16_t);\n     }\n \n-    in_addr_t       inet_addr(in char*);\n+    in_addr_t       inet_addr(const scope char*);\n     char*           inet_ntoa(in_addr);\n-    const(char)*    inet_ntop(int, in void*, char*, socklen_t);\n-    int             inet_pton(int, in char*, void*);\n+    const(char)*    inet_ntop(int, const scope void*, char*, socklen_t);\n+    int             inet_pton(int, const scope char*, void*);\n }\n else version (NetBSD)\n {\n@@ -153,10 +153,10 @@ else version (NetBSD)\n     uint16_t ntohs(uint16_t);\n     }\n \n-    in_addr_t       inet_addr(in char*);\n+    in_addr_t       inet_addr(const scope char*);\n     char*           inet_ntoa(in_addr);\n-    const(char)*    inet_ntop(int, in void*, char*, socklen_t);\n-    int             inet_pton(int, in char*, void*);\n+    const(char)*    inet_ntop(int, const scope void*, char*, socklen_t);\n+    int             inet_pton(int, const scope char*, void*);\n }\n else version (OpenBSD)\n {\n@@ -194,10 +194,10 @@ else version (OpenBSD)\n         uint16_t ntohs(uint16_t x) { return __swap16(x); }\n     }\n \n-    in_addr_t       inet_addr(in char*);\n+    in_addr_t       inet_addr(const scope char*);\n     char*           inet_ntoa(in_addr);\n-    const(char)*    inet_ntop(int, in void*, char*, socklen_t);\n-    int             inet_pton(int, in char*, void*);\n+    const(char)*    inet_ntop(int, const scope void*, char*, socklen_t);\n+    int             inet_pton(int, const scope char*, void*);\n }\n else version (DragonFlyBSD)\n {\n@@ -219,10 +219,10 @@ else version (DragonFlyBSD)\n     uint16_t ntohs(uint16_t);\n     }\n \n-    in_addr_t       inet_addr(in char*);\n+    in_addr_t       inet_addr(const scope char*);\n     char*           inet_ntoa(in_addr);\n-    const(char)*    inet_ntop(int, in void*, char*, socklen_t);\n-    int             inet_pton(int, in char*, void*);\n+    const(char)*    inet_ntop(int, const scope void*, char*, socklen_t);\n+    int             inet_pton(int, const scope char*, void*);\n }\n else version (Solaris)\n {\n@@ -243,10 +243,10 @@ else version (Solaris)\n     uint16_t ntohs(uint16_t);\n     }\n \n-    in_addr_t       inet_addr(in char*);\n+    in_addr_t       inet_addr(const scope char*);\n     char*           inet_ntoa(in_addr);\n-    const(char)*    inet_ntop(int, in void*, char*, socklen_t);\n-    int             inet_pton(int, in char*, void*);\n+    const(char)*    inet_ntop(int, const scope void*, char*, socklen_t);\n+    int             inet_pton(int, const scope char*, void*);\n }\n else version (CRuntime_Bionic)\n {\n@@ -283,10 +283,10 @@ else version (CRuntime_Bionic)\n         uint16_t ntohs(uint16_t x) { return __swap16(x); }\n     }\n \n-    in_addr_t       inet_addr(in char*);\n+    in_addr_t       inet_addr(const scope char*);\n     char*           inet_ntoa(in_addr);\n-    const(char)*    inet_ntop(int, in void*, char*, size_t);\n-    int             inet_pton(int, in char*, void*);\n+    const(char)*    inet_ntop(int, const scope void*, char*, size_t);\n+    int             inet_pton(int, const scope char*, void*);\n }\n else version (CRuntime_Musl)\n {\n@@ -308,10 +308,10 @@ else version (CRuntime_Musl)\n     uint16_t ntohs(uint16_t);\n     }\n \n-    in_addr_t       inet_addr(in char*);\n+    in_addr_t       inet_addr(const scope char*);\n     char*           inet_ntoa(in_addr);\n-    const(char)*    inet_ntop(int, in void*, char*, socklen_t);\n-    int             inet_pton(int, in char*, void*);\n+    const(char)*    inet_ntop(int, const scope void*, char*, socklen_t);\n+    int             inet_pton(int, const scope char*, void*);\n }\n else version (CRuntime_UClibc)\n {\n@@ -333,10 +333,10 @@ else version (CRuntime_UClibc)\n     uint16_t ntohs(uint16_t);\n     }\n \n-    in_addr_t       inet_addr(in char*);\n+    in_addr_t       inet_addr(const scope char*);\n     char*           inet_ntoa(in_addr);\n-    const(char)*    inet_ntop(int, in void*, char*, socklen_t);\n-    int             inet_pton(int, in char*, void*);\n+    const(char)*    inet_ntop(int, const scope void*, char*, socklen_t);\n+    int             inet_pton(int, const scope char*, void*);\n }\n \n //"}, {"sha": "c02debffadd192deb2313bcf1ccbec63cd62e15c", "filename": "libphobos/libdruntime/core/sys/posix/config.d", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fconfig.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fconfig.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fconfig.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -19,6 +19,7 @@ public import core.stdc.config;\n \n version (Posix):\n extern (C) nothrow @nogc:\n+@system:\n \n enum _XOPEN_SOURCE     = 600;\n enum _POSIX_SOURCE     = true;"}, {"sha": "8a2440e1fa4432e749bf7a17e9371d740d6fb1d4", "filename": "libphobos/libdruntime/core/sys/posix/dirent.d", "status": "modified", "additions": 52, "deletions": 12, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fdirent.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fdirent.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fdirent.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -15,7 +15,7 @@\n  */\n module core.sys.posix.dirent;\n \n-private import core.sys.posix.config;\n+import core.sys.posix.config;\n public import core.sys.posix.sys.types; // for ino_t\n \n version (OSX)\n@@ -31,6 +31,7 @@ version (Posix):\n extern (C):\n nothrow:\n @nogc:\n+@system:\n \n //\n // Required\n@@ -44,7 +45,7 @@ struct dirent\n }\n \n int     closedir(DIR*);\n-DIR*    opendir(in char*);\n+DIR*    opendir(const scope char*);\n dirent* readdir(DIR*);\n void    rewinddir(DIR*);\n */\n@@ -129,7 +130,12 @@ else version (Darwin)\n     // Other Darwin variants (iOS, TVOS, WatchOS) only support 64-bit inodes,\n     // no suffix needed\n     version (OSX)\n-        pragma(mangle, \"readdir$INODE64\") dirent* readdir(DIR*);\n+    {\n+        version (AArch64)\n+            dirent* readdir(DIR*);\n+        else\n+            pragma(mangle, \"readdir$INODE64\") dirent* readdir(DIR*);\n+    }\n     else\n         dirent* readdir(DIR*);\n }\n@@ -180,7 +186,17 @@ else version (FreeBSD)\n \n     alias void* DIR;\n \n-    dirent* readdir(DIR*);\n+    version (GNU)\n+    {\n+        dirent* readdir(DIR*);\n+    }\n+    else\n+    {\n+        static if (__FreeBSD_version >= 1200000)\n+            pragma(mangle, \"readdir@FBSD_1.5\") dirent* readdir(DIR*);\n+        else\n+            pragma(mangle, \"readdir@FBSD_1.0\") dirent* readdir(DIR*);\n+    }\n }\n else version (NetBSD)\n {\n@@ -434,32 +450,38 @@ else\n // in else below.\n version (OSX)\n {\n-    version (D_LP64)\n+    version (AArch64)\n+    {\n+        int     closedir(DIR*);\n+        DIR*    opendir(const scope char*);\n+        void    rewinddir(DIR*);\n+    }\n+    else version (D_LP64)\n     {\n         int closedir(DIR*);\n-        pragma(mangle, \"opendir$INODE64\")   DIR* opendir(in char*);\n+        pragma(mangle, \"opendir$INODE64\")   DIR* opendir(const scope char*);\n         pragma(mangle, \"rewinddir$INODE64\") void rewinddir(DIR*);\n     }\n     else\n     {\n         // 32-bit mangles __DARWIN_UNIX03 specific functions with $UNIX2003 to\n         // maintain backward compatibility with binaries build pre 10.5\n         pragma(mangle, \"closedir$UNIX2003\")          int closedir(DIR*);\n-        pragma(mangle, \"opendir$INODE64$UNIX2003\")   DIR* opendir(in char*);\n+        pragma(mangle, \"opendir$INODE64$UNIX2003\")   DIR* opendir(const scope char*);\n         pragma(mangle, \"rewinddir$INODE64$UNIX2003\") void rewinddir(DIR*);\n     }\n }\n else version (NetBSD)\n {\n     int     closedir(DIR*);\n-    DIR*    __opendir30(in char*);\n+    DIR*    __opendir30(const scope char*);\n     alias __opendir30 opendir;\n     void    rewinddir(DIR*);\n }\n else\n {\n     int     closedir(DIR*);\n-    DIR*    opendir(in char*);\n+    DIR*    opendir(const scope char*);\n     //dirent* readdir(DIR*);\n     void    rewinddir(DIR*);\n }\n@@ -492,7 +514,17 @@ else version (Darwin)\n }\n else version (FreeBSD)\n {\n-    int readdir_r(DIR*, dirent*, dirent**);\n+    version (GNU)\n+    {\n+        int readdir_r(DIR*, dirent*, dirent**);\n+    }\n+    else\n+    {\n+        static if (__FreeBSD_version >= 1200000)\n+            pragma(mangle, \"readdir_r@FBSD_1.5\") int readdir_r(DIR*, dirent*, dirent**);\n+        else\n+            pragma(mangle, \"readdir_r@FBSD_1.0\") int readdir_r(DIR*, dirent*, dirent**);\n+    }\n }\n else version (DragonFlyBSD)\n {\n@@ -559,8 +591,16 @@ version (CRuntime_Glibc)\n }\n else version (FreeBSD)\n {\n-    void   seekdir(DIR*, c_long);\n-    c_long telldir(DIR*);\n+    version (GNU)\n+    {\n+        void seekdir(DIR*, c_long);\n+        c_long telldir(DIR*);\n+    }\n+    else\n+    {\n+        pragma(mangle, \"seekdir@@FBSD_1.0\") void seekdir(DIR*, c_long);\n+        pragma(mangle, \"telldir@@FBSD_1.0\") c_long telldir(DIR*);\n+    }\n }\n else version (NetBSD)\n {"}, {"sha": "e97c7ea39602e6ef26496a2e4113e3070b09e6da", "filename": "libphobos/libdruntime/core/sys/posix/dlfcn.d", "status": "modified", "additions": 23, "deletions": 22, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fdlfcn.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fdlfcn.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fdlfcn.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -14,7 +14,7 @@\n  */\n module core.sys.posix.dlfcn;\n \n-private import core.sys.posix.config;\n+import core.sys.posix.config;\n \n version (OSX)\n     version = Darwin;\n@@ -45,6 +45,7 @@ version (Posix):\n extern (C):\n nothrow:\n @nogc:\n+@system:\n \n //\n // XOpen (XSI)\n@@ -57,8 +58,8 @@ RTLD_LOCAL\n \n int   dlclose(void*);\n char* dlerror();\n-void* dlopen(in char*, int);\n-void* dlsym(void*, in char*);\n+void* dlopen(const scope char*, int);\n+void* dlsym(void*, const scope char*);\n */\n \n version (CRuntime_Glibc)\n@@ -124,8 +125,8 @@ version (CRuntime_Glibc)\n \n     int   dlclose(void*);\n     char* dlerror();\n-    void* dlopen(in char*, int);\n-    void* dlsym(void*, in char*);\n+    void* dlopen(const scope char*, int);\n+    void* dlsym(void*, const scope char*);\n }\n else version (Darwin)\n {\n@@ -136,8 +137,8 @@ else version (Darwin)\n \n     int   dlclose(void*);\n     char* dlerror();\n-    void* dlopen(in char*, int);\n-    void* dlsym(void*, in char*);\n+    void* dlopen(const scope char*, int);\n+    void* dlsym(void*, const scope char*);\n     int   dladdr(void* addr, Dl_info* info);\n \n     struct Dl_info\n@@ -180,8 +181,8 @@ else version (NetBSD)\n \n     int   dlclose(void*);\n     char* dlerror();\n-    void* dlopen(in char*, int);\n-    void* dlsym(void*, in char*);\n+    void* dlopen(const scope char*, int);\n+    void* dlsym(void*, const scope char*);\n     int   dladdr(const(void)* addr, Dl_info* info);\n \n     struct Dl_info\n@@ -201,8 +202,8 @@ else version (OpenBSD)\n \n     int   dlclose(void*);\n     char* dlerror();\n-    void* dlopen(in char*, int);\n-    void* dlsym(void*, in char*);\n+    void* dlopen(const scope char*, int);\n+    void* dlsym(void*, const scope char*);\n     int   dladdr(const(void)* addr, Dl_info* info);\n \n     struct Dl_info\n@@ -222,8 +223,8 @@ else version (DragonFlyBSD)\n \n     int   dlclose(void*);\n     char* dlerror();\n-    void* dlopen(in char*, int);\n-    void* dlsym(void*, in char*);\n+    void* dlopen(const scope char*, int);\n+    void* dlsym(void*, const scope char*);\n     int   dladdr(const(void)* addr, Dl_info* info);\n \n     struct Dl_info\n@@ -243,8 +244,8 @@ else version (Solaris)\n \n     int   dlclose(void*);\n     char* dlerror();\n-    void* dlopen(in char*, int);\n-    void* dlsym(void*, in char*);\n+    void* dlopen(const scope char*, int);\n+    void* dlsym(void*, const scope char*);\n     int   dladdr(const(void)* addr, Dl_info* info);\n \n     struct Dl_info\n@@ -265,11 +266,11 @@ else version (CRuntime_Bionic)\n         RTLD_GLOBAL = 2\n     }\n \n-    int          dladdr(in void*, Dl_info*);\n+    int          dladdr(const scope void*, Dl_info*);\n     int          dlclose(void*);\n     const(char)* dlerror();\n-    void*        dlopen(in char*, int);\n-    void*        dlsym(void*, in char*);\n+    void*        dlopen(const scope char*, int);\n+    void*        dlsym(void*, const scope char*);\n \n     struct Dl_info\n     {\n@@ -291,8 +292,8 @@ else version (CRuntime_Musl)\n     }\n     int          dlclose(void*);\n     const(char)* dlerror();\n-    void*        dlopen(in char*, int);\n-    void*        dlsym(void*, in char*);\n+    void*        dlopen(const scope char*, int);\n+    void*        dlsym(void*, const scope char*);\n }\n else version (CRuntime_UClibc)\n {\n@@ -331,6 +332,6 @@ else version (CRuntime_UClibc)\n \n     int   dlclose(void*);\n     char* dlerror();\n-    void* dlopen(in char*, int);\n-    void* dlsym(void*, in char*);\n+    void* dlopen(const scope char*, int);\n+    void* dlsym(void*, const scope char*);\n }"}, {"sha": "59df921ba415a697e5276cef6ece2a9287fc6f39", "filename": "libphobos/libdruntime/core/sys/posix/fcntl.d", "status": "modified", "additions": 38, "deletions": 33, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Ffcntl.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Ffcntl.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Ffcntl.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -14,8 +14,8 @@\n  */\n module core.sys.posix.fcntl;\n \n-private import core.sys.posix.config;\n-private import core.stdc.stdint;\n+import core.sys.posix.config;\n+import core.stdc.stdint;\n public import core.sys.posix.sys.types; // for off_t, mode_t\n public import core.sys.posix.sys.stat;  // for S_IFMT, etc.\n \n@@ -49,6 +49,7 @@ extern (C):\n \n nothrow:\n @nogc:\n+@system:\n \n //\n // Required\n@@ -96,9 +97,9 @@ struct flock\n     pid_t   l_pid;\n }\n \n-int creat(in char*, mode_t);\n+int creat(const scope char*, mode_t);\n int fcntl(int, int, ...);\n-int open(in char*, int, ...);\n+int open(const scope char*, int, ...);\n */\n version (CRuntime_Glibc)\n {\n@@ -272,16 +273,16 @@ version (CRuntime_Glibc)\n \n     static if ( __USE_FILE_OFFSET64 )\n     {\n-        int   creat64(in char*, mode_t);\n+        int   creat64(const scope char*, mode_t);\n         alias creat64 creat;\n \n-        int   open64(in char*, int, ...);\n+        int   open64(const scope char*, int, ...);\n         alias open64 open;\n     }\n     else\n     {\n-        int   creat(in char*, mode_t);\n-        int   open(in char*, int, ...);\n+        int   creat(const scope char*, mode_t);\n+        int   open(const scope char*, int, ...);\n     }\n \n     enum AT_SYMLINK_NOFOLLOW = 0x100;\n@@ -331,8 +332,8 @@ else version (Darwin)\n         short   l_whence;\n     }\n \n-    int creat(in char*, mode_t);\n-    int open(in char*, int, ...);\n+    int creat(const scope char*, mode_t);\n+    int open(const scope char*, int, ...);\n }\n else version (FreeBSD)\n {\n@@ -392,8 +393,8 @@ else version (FreeBSD)\n         short   l_whence;\n     }\n \n-    int creat(in char*, mode_t);\n-    int open(in char*, int, ...);\n+    int creat(const scope char*, mode_t);\n+    int open(const scope char*, int, ...);\n \n     enum AT_SYMLINK_NOFOLLOW = 0x200;\n     enum AT_FDCWD = -100;\n@@ -457,8 +458,8 @@ else version (OpenBSD)\n         short   l_whence;\n     }\n \n-    int creat(in char*, mode_t);\n-    int open(in char*, int, ...);\n+    int creat(const scope char*, mode_t);\n+    int open(const scope char*, int, ...);\n \n     enum AT_FDCWD            = -100;\n \n@@ -517,8 +518,8 @@ else version (NetBSD)\n     }\n \n \n-    int creat(in char*, mode_t);\n-    int open(in char*, int, ...);\n+    int creat(const scope char*, mode_t);\n+    int open(const scope char*, int, ...);\n }\n else version (DragonFlyBSD)\n {\n@@ -604,8 +605,8 @@ else version (DragonFlyBSD)\n \n     alias oflock = flock;\n \n-    int creat(in char*, mode_t);\n-    int open(in char*, int, ...);\n+    int creat(const scope char*, mode_t);\n+    int open(const scope char*, int, ...);\n     //int fcntl(int, int, ...);  /*defined below*/\n     //int flock(int, int);\n }\n@@ -694,8 +695,8 @@ else version (Solaris)\n \n     version (D_LP64)\n     {\n-        int creat(in char*, mode_t);\n-        int open(in char*, int, ...);\n+        int creat(const scope char*, mode_t);\n+        int open(const scope char*, int, ...);\n \n         static if (__USE_LARGEFILE64)\n         {\n@@ -707,16 +708,16 @@ else version (Solaris)\n     {\n         static if (__USE_LARGEFILE64)\n         {\n-            int creat64(in char*, mode_t);\n+            int creat64(const scope char*, mode_t);\n             alias creat64 creat;\n \n-            int open64(in char*, int, ...);\n+            int open64(const scope char*, int, ...);\n             alias open64 open;\n         }\n         else\n         {\n-            int creat(in char*, mode_t);\n-            int open(in char*, int, ...);\n+            int creat(const scope char*, mode_t);\n+            int open(const scope char*, int, ...);\n         }\n     }\n }\n@@ -772,8 +773,8 @@ else version (CRuntime_Bionic)\n         pid_t   l_pid;\n     }\n \n-    int   creat(in char*, mode_t);\n-    int   open(in char*, int, ...);\n+    int   creat(const scope char*, mode_t);\n+    int   open(const scope char*, int, ...);\n \n     enum AT_FDCWD = -100;\n }\n@@ -925,9 +926,13 @@ else version (CRuntime_Musl)\n         pid_t   l_pid;\n     }\n     enum FD_CLOEXEC     = 1;\n-    int open(in char*, int, ...);\n+    int open(const scope char*, int, ...);\n \n     enum AT_FDCWD = -100;\n+    enum AT_SYMLINK_NOFOLLOW = 0x100;\n+    enum AT_REMOVEDIR = 0x200;\n+    enum AT_SYMLINK_FOLLOW = 0x400;\n+    enum AT_EACCESS = 0x200;\n }\n else version (CRuntime_UClibc)\n {\n@@ -1037,16 +1042,16 @@ else version (CRuntime_UClibc)\n \n     static if ( __USE_FILE_OFFSET64 )\n     {\n-        int   creat64(in char*, mode_t);\n+        int   creat64(const scope char*, mode_t);\n         alias creat64 creat;\n \n-        int   open64(in char*, int, ...);\n+        int   open64(const scope char*, int, ...);\n         alias open64 open;\n     }\n     else\n     {\n-        int   creat(in char*, mode_t);\n-        int   open(in char*, int, ...);\n+        int   creat(const scope char*, mode_t);\n+        int   open(const scope char*, int, ...);\n     }\n \n     enum AT_SYMLINK_NOFOLLOW    = 0x100;\n@@ -1057,9 +1062,9 @@ else\n     static assert(false, \"Unsupported platform\");\n }\n \n-//int creat(in char*, mode_t);\n+//int creat(const scope char*, mode_t);\n int fcntl(int, int, ...);\n-//int open(in char*, int, ...);\n+//int open(const scope char*, int, ...);\n \n // Generic Posix fallocate\n int posix_fallocate(int, off_t, off_t);"}, {"sha": "92dcf34ee31cc9a1df8f2e7091bf385a1cf7f9f7", "filename": "libphobos/libdruntime/core/sys/posix/grp.d", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fgrp.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fgrp.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fgrp.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -14,7 +14,7 @@\n  */\n module core.sys.posix.grp;\n \n-private import core.sys.posix.config;\n+import core.sys.posix.config;\n public import core.sys.posix.sys.types; // for gid_t, uid_t\n \n version (OSX)\n@@ -30,6 +30,7 @@ version (Posix):\n extern (C):\n nothrow:\n @nogc:\n+@system:\n \n //\n // Required\n@@ -43,7 +44,7 @@ struct group\n     char**  gr_mem;\n }\n \n-group* getgrnam(in char*);\n+group* getgrnam(const scope char*);\n group* getgrgid(gid_t);\n */\n \n@@ -152,63 +153,63 @@ else\n     static assert(false, \"Unsupported platform\");\n }\n \n-group* getgrnam(in char*);\n+group* getgrnam(const scope char*);\n group* getgrgid(gid_t);\n \n //\n // Thread-Safe Functions (TSF)\n //\n /*\n-int getgrnam_r(in char*, group*, char*, size_t, group**);\n+int getgrnam_r(const scope char*, group*, char*, size_t, group**);\n int getgrgid_r(gid_t, group*, char*, size_t, group**);\n */\n \n version (CRuntime_Glibc)\n {\n-    int getgrnam_r(in char*, group*, char*, size_t, group**);\n+    int getgrnam_r(const scope char*, group*, char*, size_t, group**);\n     int getgrgid_r(gid_t, group*, char*, size_t, group**);\n }\n else version (Darwin)\n {\n-    int getgrnam_r(in char*, group*, char*, size_t, group**);\n+    int getgrnam_r(const scope char*, group*, char*, size_t, group**);\n     int getgrgid_r(gid_t, group*, char*, size_t, group**);\n }\n else version (FreeBSD)\n {\n-    int getgrnam_r(in char*, group*, char*, size_t, group**);\n+    int getgrnam_r(const scope char*, group*, char*, size_t, group**);\n     int getgrgid_r(gid_t, group*, char*, size_t, group**);\n }\n else version (NetBSD)\n {\n-    int getgrnam_r(in char*, group*, char*, size_t, group**);\n+    int getgrnam_r(const scope char*, group*, char*, size_t, group**);\n     int getgrgid_r(gid_t, group*, char*, size_t, group**);\n }\n else version (OpenBSD)\n {\n-    int getgrnam_r(in char*, group*, char*, size_t, group**);\n+    int getgrnam_r(const scope char*, group*, char*, size_t, group**);\n     int getgrgid_r(gid_t, group*, char*, size_t, group**);\n }\n else version (DragonFlyBSD)\n {\n-    int getgrnam_r(in char*, group*, char*, size_t, group**);\n+    int getgrnam_r(const scope char*, group*, char*, size_t, group**);\n     int getgrgid_r(gid_t, group*, char*, size_t, group**);\n }\n else version (Solaris)\n {\n-    int getgrnam_r(in char*, group*, char*, int, group**);\n+    int getgrnam_r(const scope char*, group*, char*, int, group**);\n     int getgrgid_r(gid_t, group*, char*, int, group**);\n }\n else version (CRuntime_Bionic)\n {\n }\n else version (CRuntime_UClibc)\n {\n-    int getgrnam_r(in char*, group*, char*, size_t, group**);\n+    int getgrnam_r(const scope char*, group*, char*, size_t, group**);\n     int getgrgid_r(gid_t, group*, char*, size_t, group**);\n }\n else version (CRuntime_Musl)\n {\n-    int getgrnam_r(in char*, group*, char*, size_t, group**);\n+    int getgrnam_r(const scope char*, group*, char*, size_t, group**);\n     int getgrgid_r(gid_t, group*, char*, size_t, group**);\n }\n else"}, {"sha": "cea89870eca7e0aaa8e0a69c5d99573e7c244d58", "filename": "libphobos/libdruntime/core/sys/posix/iconv.d", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Ficonv.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Ficonv.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Ficonv.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -34,18 +34,19 @@ version (Posix):\n extern (C):\n nothrow:\n @nogc:\n+@system:\n \n \n alias void* iconv_t;\n \n /// Allocate descriptor for code conversion from codeset FROMCODE to\n /// codeset TOCODE.\n-iconv_t iconv_open (in char* tocode, in char* fromcode);\n+iconv_t iconv_open (const scope char* tocode, const scope char* fromcode);\n \n /// Convert at most *INBYTESLEFT bytes from *INBUF according to the\n /// code conversion algorithm specified by CD and place up to\n /// *OUTBYTESLEFT bytes in buffer at *OUTBUF.\n-size_t iconv (iconv_t cd, in char** inbuf,\n+size_t iconv (iconv_t cd, const scope char** inbuf,\n          size_t* inbytesleft,\n          char** outbuf,\n          size_t* outbytesleft);"}, {"sha": "4bde28f015dfe67ef6d8ecc907085d7cb767750f", "filename": "libphobos/libdruntime/core/sys/posix/inttypes.d", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Finttypes.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Finttypes.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Finttypes.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -14,27 +14,28 @@\n  */\n module core.sys.posix.inttypes;\n \n-private import core.sys.posix.config;\n+import core.sys.posix.config;\n public import core.stdc.inttypes;\n \n version (Posix):\n extern (C) nothrow @nogc:\n+@system:\n \n //\n // Required\n //\n /*\n intmax_t  imaxabs(intmax_t);\n imaxdiv_t imaxdiv(intmax_t, intmax_t);\n-intmax_t  strtoimax(in char*, char**, int);\n-uintmax_t strtoumax(in char*, char**, int);\n-intmax_t  wcstoimax(in wchar_t*, wchar_t**, int);\n-uintmax_t wcstoumax(in wchar_t*, wchar_t**, int);\n+intmax_t  strtoimax(const scope char*, char**, int);\n+uintmax_t strtoumax(const scope char*, char**, int);\n+intmax_t  wcstoimax(const scope wchar_t*, wchar_t**, int);\n+uintmax_t wcstoumax(const scope wchar_t*, wchar_t**, int);\n */\n \n intmax_t  imaxabs(intmax_t);\n imaxdiv_t imaxdiv(intmax_t, intmax_t);\n-intmax_t  strtoimax(in char*, char**, int);\n-uintmax_t strtoumax(in char*, char**, int);\n-intmax_t  wcstoimax(in wchar_t*, wchar_t**, int);\n-uintmax_t wcstoumax(in wchar_t*, wchar_t**, int);\n+intmax_t  strtoimax(const scope char*, char**, int);\n+uintmax_t strtoumax(const scope char*, char**, int);\n+intmax_t  wcstoimax(const scope wchar_t*, wchar_t**, int);\n+uintmax_t wcstoumax(const scope wchar_t*, wchar_t**, int);"}, {"sha": "b90765fcf8043876d453b26a2e7266bd95e7d99a", "filename": "libphobos/libdruntime/core/sys/posix/libgen.d", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Flibgen.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Flibgen.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Flibgen.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -15,6 +15,7 @@\n module core.sys.posix.libgen;\n \n @nogc nothrow:\n+@system:\n extern (C):\n version (Posix):\n "}, {"sha": "172e9aa583cf52373f9b6786f0419f0704695ce5", "filename": "libphobos/libdruntime/core/sys/posix/locale.d", "status": "added", "additions": 175, "deletions": 0, "changes": 175, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Flocale.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Flocale.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Flocale.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -0,0 +1,175 @@\n+/**\n+ * D header file for POSIX's <locale.h>.\n+ *\n+ * See_Also:  https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/locale.h.html\n+ * Copyright: D Language Foundation, 2019\n+ * License:   $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n+ * Authors:   Mathias 'Geod24' Lang\n+ * Standards: The Open Group Base Specifications Issue 7, 2018 edition\n+ * Source:    $(DRUNTIMESRC core/sys/posix/_locale.d)\n+ */\n+module core.sys.posix.locale;\n+\n+version (Posix):\n+extern(C):\n+@system:\n+nothrow:\n+@nogc:\n+\n+version (OSX)\n+    version = Darwin;\n+else version (iOS)\n+    version = Darwin;\n+else version (TVOS)\n+    version = Darwin;\n+else version (WatchOS)\n+    version = Darwin;\n+\n+version (Darwin)\n+    version = DarwinBSDLocale;\n+version (FreeBSD)\n+    version = DarwinBSDLocale;\n+version (NetBSD)\n+    version = DarwinBSDLocale;\n+version (DragonflyBSD)\n+    version = DarwinBSDLocale;\n+\n+///\n+struct lconv\n+{\n+    char*    currency_symbol;\n+    char*    decimal_point;\n+    char     frac_digits;\n+    char*    grouping;\n+    char*    int_curr_symbol;\n+    char     int_frac_digits;\n+    char     int_n_cs_precedes;\n+    char     int_n_sep_by_space;\n+    char     int_n_sign_posn;\n+    char     int_p_cs_precedes;\n+    char     int_p_sep_by_space;\n+    char     int_p_sign_posn;\n+    char*    mon_decimal_point;\n+    char*    mon_grouping;\n+    char*    mon_thousands_sep;\n+    char*    negative_sign;\n+    char     n_cs_precedes;\n+    char     n_sep_by_space;\n+    char     n_sign_posn;\n+    char*    positive_sign;\n+    char     p_cs_precedes;\n+    char     p_sep_by_space;\n+    char     p_sign_posn;\n+    char*    thousands_sep;\n+}\n+\n+/// Duplicate existing locale\n+locale_t duplocale(locale_t locale);\n+/// Free an allocated locale\n+void     freelocale(locale_t locale);\n+/// Natural language formatting for C\n+lconv*   localeconv();\n+/// Create a new locale\n+locale_t newlocale(int mask, const char* locale, locale_t base);\n+/// Set the C library's notion of natural language formatting style\n+char*    setlocale(int category, const char* locale);\n+/// Set the per-thread locale\n+locale_t uselocale (locale_t locale);\n+\n+version (DarwinBSDLocale)\n+{\n+    ///\n+    enum\n+    {\n+        LC_ALL      = 0,\n+        LC_COLLATE  = 1,\n+        LC_CTYPE    = 2,\n+        LC_MESSAGES = 6,\n+        LC_MONETARY = 3,\n+        LC_NUMERIC  = 4,\n+        LC_TIME     = 5,\n+    }\n+\n+    private struct _xlocale;\n+\n+    ///\n+    alias locale_t = _xlocale*;\n+\n+    version (NetBSD)\n+        enum LC_ALL_MASK = (cast(int)~0);\n+    else\n+        enum LC_ALL_MASK = (\n+            LC_COLLATE_MASK | LC_CTYPE_MASK | LC_MESSAGES_MASK |\n+            LC_MONETARY_MASK | LC_NUMERIC_MASK | LC_TIME_MASK);\n+\n+\n+    ///\n+    enum\n+    {\n+        LC_COLLATE_MASK  = (1 << 0),\n+        LC_CTYPE_MASK    = (1 << 1),\n+        LC_MESSAGES_MASK = (1 << 2),\n+        LC_MONETARY_MASK = (1 << 3),\n+        LC_NUMERIC_MASK  = (1 << 4),\n+        LC_TIME_MASK     = (1 << 5),\n+    }\n+\n+    ///\n+    enum LC_GLOBAL_LOCALE = (cast(locale_t)-1);\n+}\n+\n+version (linux)\n+{\n+    ///\n+    enum\n+    {\n+        LC_ALL      = 6,\n+        LC_COLLATE  = 3,\n+        LC_CTYPE    = 0,\n+        LC_MESSAGES = 5,\n+        LC_MONETARY = 4,\n+        LC_NUMERIC  = 1,\n+        LC_TIME     = 2,\n+\n+        // Linux-specific\n+        LC_PAPER          =  7,\n+        LC_NAME           =  8,\n+        LC_ADDRESS        =  9,\n+        LC_TELEPHONE      = 10,\n+        LC_MEASUREMENT    = 11,\n+        LC_IDENTIFICATION = 12,\n+    }\n+\n+    ///\n+    enum\n+    {\n+        LC_ALL_MASK = (LC_CTYPE_MASK | LC_NUMERIC_MASK | LC_TIME_MASK |\n+                       LC_COLLATE_MASK | LC_MONETARY_MASK | LC_MESSAGES_MASK |\n+                       LC_PAPER_MASK | LC_NAME_MASK | LC_ADDRESS_MASK |\n+                       LC_TELEPHONE_MASK | LC_MEASUREMENT_MASK |\n+                       LC_IDENTIFICATION_MASK),\n+\n+        LC_COLLATE_MASK  = (1 << LC_COLLATE),\n+        LC_CTYPE_MASK    = (1 << LC_CTYPE),\n+        LC_MESSAGES_MASK = (1 << LC_MESSAGES),\n+        LC_MONETARY_MASK = (1 << LC_MONETARY),\n+        LC_NUMERIC_MASK  = (1 << LC_NUMERIC),\n+        LC_TIME_MASK     = (1 << LC_TIME),\n+\n+        // Linux specific\n+        LC_PAPER_MASK          = (1 << LC_PAPER),\n+        LC_NAME_MASK           = (1 << LC_NAME),\n+        LC_ADDRESS_MASK        = (1 << LC_ADDRESS),\n+        LC_TELEPHONE_MASK      = (1 << LC_TELEPHONE),\n+        LC_MEASUREMENT_MASK    = (1 << LC_MEASUREMENT),\n+        LC_IDENTIFICATION_MASK = (1 << LC_IDENTIFICATION),\n+    }\n+\n+    private struct __locale_struct;\n+\n+    ///\n+    alias locale_t = __locale_struct*;\n+\n+    ///\n+    enum LC_GLOBAL_LOCALE = (cast(locale_t)-1);\n+}"}, {"sha": "3b447a1a4348dbd58c30498a1209eb8d9733f09b", "filename": "libphobos/libdruntime/core/sys/posix/mqueue.d", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fmqueue.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fmqueue.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fmqueue.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -30,6 +30,7 @@ version (Posix):\n version (CRuntime_Glibc):\n extern (C):\n @nogc nothrow:\n+@system:\n \n \n /// Message queue descriptor."}, {"sha": "3713673e4bc025b7237bc10bf50eb11cfff9125b", "filename": "libphobos/libdruntime/core/sys/posix/net/if_.d", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fnet%2Fif_.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fnet%2Fif_.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fnet%2Fif_.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -14,7 +14,7 @@\n  */\n module core.sys.posix.net.if_;\n \n-private import core.sys.posix.config;\n+import core.sys.posix.config;\n \n version (OSX)\n     version = Darwin;\n@@ -40,7 +40,7 @@ struct if_nameindex // renamed to if_nameindex_t\n \n IF_NAMESIZE\n \n-uint            if_nametoindex(in char*);\n+uint            if_nametoindex(const scope char*);\n char*           if_indextoname(uint, char*);\n if_nameindex_t* if_nameindex();\n void            if_freenameindex(if_nameindex_t*);\n@@ -56,7 +56,7 @@ version (CRuntime_Glibc)\n \n     enum IF_NAMESIZE = 16;\n \n-    uint            if_nametoindex(in char*);\n+    uint            if_nametoindex(const scope char*);\n     char*           if_indextoname(uint, char*);\n     if_nameindex_t* if_nameindex();\n     void            if_freenameindex(if_nameindex_t*);\n@@ -71,7 +71,7 @@ else version (Darwin)\n \n     enum IF_NAMESIZE = 16;\n \n-    uint            if_nametoindex(in char*);\n+    uint            if_nametoindex(const scope char*);\n     char*           if_indextoname(uint, char*);\n     if_nameindex_t* if_nameindex();\n     void            if_freenameindex(if_nameindex_t*);\n@@ -86,7 +86,7 @@ else version (FreeBSD)\n \n     enum IF_NAMESIZE = 16;\n \n-    uint            if_nametoindex(in char*);\n+    uint            if_nametoindex(const scope char*);\n     char*           if_indextoname(uint, char*);\n     if_nameindex_t* if_nameindex();\n     void            if_freenameindex(if_nameindex_t*);\n@@ -101,7 +101,7 @@ else version (NetBSD)\n \n     enum IF_NAMESIZE = 16;\n \n-    uint            if_nametoindex(in char*);\n+    uint            if_nametoindex(const scope char*);\n     char*           if_indextoname(uint, char*);\n     if_nameindex_t* if_nameindex();\n     void            if_freenameindex(if_nameindex_t*);\n@@ -116,7 +116,7 @@ else version (OpenBSD)\n \n     enum IF_NAMESIZE = 16;\n \n-    uint            if_nametoindex(in char*);\n+    uint            if_nametoindex(const scope char*);\n     char*           if_indextoname(uint, char*);\n     if_nameindex_t* if_nameindex();\n     void            if_freenameindex(if_nameindex_t*);\n@@ -131,7 +131,7 @@ else version (DragonFlyBSD)\n \n     enum IF_NAMESIZE = 16;\n \n-    uint            if_nametoindex(in char*);\n+    uint            if_nametoindex(const scope char*);\n     char*           if_indextoname(uint, char*);\n     if_nameindex_t* if_nameindex();\n     void            if_freenameindex(if_nameindex_t*);\n@@ -140,7 +140,7 @@ else version (CRuntime_Bionic)\n {\n     enum IF_NAMESIZE = 16;\n \n-    uint            if_nametoindex(in char*);\n+    uint            if_nametoindex(const scope char*);\n     char*           if_indextoname(uint, char*);\n }\n else version (CRuntime_UClibc)\n@@ -153,7 +153,7 @@ else version (CRuntime_UClibc)\n \n     enum IF_NAMESIZE = 16;\n \n-    uint            if_nametoindex(in char*);\n+    uint            if_nametoindex(const scope char*);\n     char*           if_indextoname(uint, char*);\n     if_nameindex_t* if_nameindex();\n     void            if_freenameindex(if_nameindex_t*);"}, {"sha": "bede63843d8f5b36784aae92ffc34fc098197fc3", "filename": "libphobos/libdruntime/core/sys/posix/netdb.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fnetdb.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fnetdb.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fnetdb.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -14,7 +14,7 @@\n  */\n module core.sys.posix.netdb;\n \n-private import core.sys.posix.config;\n+import core.sys.posix.config;\n public import core.stdc.inttypes;         // for uint32_t\n public import core.sys.posix.netinet.in_; // for in_port_t, in_addr_t\n public import core.sys.posix.sys.types;   // for ino_t\n@@ -33,6 +33,7 @@ version (Posix):\n extern (C):\n nothrow:\n @nogc:\n+@system:\n \n //\n // Required"}, {"sha": "a58fa850d5db50dfd62b457504523de4716a3d60", "filename": "libphobos/libdruntime/core/sys/posix/netinet/in_.d", "status": "modified", "additions": 79, "deletions": 79, "changes": 158, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fnetinet%2Fin_.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fnetinet%2Fin_.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fnetinet%2Fin_.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -14,7 +14,7 @@\n  */\n module core.sys.posix.netinet.in_;\n \n-private import core.sys.posix.config;\n+import core.sys.posix.config;\n public import core.stdc.inttypes; // for uint32_t, uint16_t, uint8_t\n public import core.sys.posix.arpa.inet;\n public import core.sys.posix.sys.socket; // for sa_family_t\n@@ -804,23 +804,23 @@ else version (FreeBSD)\n     }\n \n     // macros\n-    extern (D) int IN6_IS_ADDR_UNSPECIFIED( in in6_addr* a ) pure\n+    extern (D) int IN6_IS_ADDR_UNSPECIFIED( const scope in6_addr* a ) pure\n     {\n         return (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[0]) == 0) &&\n                (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[4]) == 0) &&\n                (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[8]) == 0) &&\n                (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[12]) == 0);\n     }\n \n-    extern (D) int IN6_IS_ADDR_LOOPBACK( in in6_addr* a ) pure\n+    extern (D) int IN6_IS_ADDR_LOOPBACK( const scope in6_addr* a ) pure\n     {\n         return (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[0]) == 0) &&\n                (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[4]) == 0) &&\n                (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[8]) == 0) &&\n                (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[12]) == ntohl(1));\n     }\n \n-    extern (D) int IN6_IS_ADDR_V4COMPAT( in in6_addr* a ) pure\n+    extern (D) int IN6_IS_ADDR_V4COMPAT( const scope in6_addr* a ) pure\n     {\n         return (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[0]) == 0) &&\n                (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[4]) == 0) &&\n@@ -829,58 +829,58 @@ else version (FreeBSD)\n                (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[12]) != ntohl(1));\n     }\n \n-    extern (D) int IN6_IS_ADDR_V4MAPPED( in in6_addr* a ) pure\n+    extern (D) int IN6_IS_ADDR_V4MAPPED( const scope in6_addr* a ) pure\n     {\n         return (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[0]) == 0) &&\n                (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[4]) == 0) &&\n                (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[8]) == ntohl(0x0000ffff));\n     }\n \n-    extern (D) int IN6_IS_ADDR_LINKLOCAL( in in6_addr* a ) pure\n+    extern (D) int IN6_IS_ADDR_LINKLOCAL( const scope in6_addr* a ) pure\n     {\n         return a.s6_addr[0] == 0xfe && (a.s6_addr[1] & 0xc0) == 0x80;\n     }\n \n-    extern (D) int IN6_IS_ADDR_SITELOCAL( in in6_addr* a ) pure\n+    extern (D) int IN6_IS_ADDR_SITELOCAL( const scope in6_addr* a ) pure\n     {\n         return a.s6_addr[0] == 0xfe && (a.s6_addr[1] & 0xc0) == 0xc0;\n     }\n \n-    extern (D) int IN6_IS_ADDR_MULTICAST( in in6_addr* a ) pure\n+    extern (D) int IN6_IS_ADDR_MULTICAST( const scope in6_addr* a ) pure\n     {\n         return a.s6_addr[0] == 0xff;\n     }\n \n-    extern (D) uint8_t __IPV6_ADDR_MC_SCOPE( in in6_addr* a ) pure\n+    extern (D) uint8_t __IPV6_ADDR_MC_SCOPE( const scope in6_addr* a ) pure\n     {\n         return a.s6_addr[1] & 0x0f;\n     }\n \n-    extern (D) int IN6_IS_ADDR_MC_NODELOCAL( in in6_addr* a ) pure\n+    extern (D) int IN6_IS_ADDR_MC_NODELOCAL( const scope in6_addr* a ) pure\n     {\n         return IN6_IS_ADDR_MULTICAST(a) &&\n                __IPV6_ADDR_MC_SCOPE(a) == __IPV6_ADDR_SCOPE_NODELOCAL;\n     }\n \n-    extern (D) int IN6_IS_ADDR_MC_LINKLOCAL( in in6_addr* a ) pure\n+    extern (D) int IN6_IS_ADDR_MC_LINKLOCAL( const scope in6_addr* a ) pure\n     {\n         return IN6_IS_ADDR_MULTICAST(a) &&\n                __IPV6_ADDR_MC_SCOPE(a) == __IPV6_ADDR_SCOPE_LINKLOCAL;\n     }\n \n-    extern (D) int IN6_IS_ADDR_MC_SITELOCAL( in in6_addr* a ) pure\n+    extern (D) int IN6_IS_ADDR_MC_SITELOCAL( const scope in6_addr* a ) pure\n     {\n         return IN6_IS_ADDR_MULTICAST(a) &&\n                __IPV6_ADDR_MC_SCOPE(a) == __IPV6_ADDR_SCOPE_SITELOCAL;\n     }\n \n-    extern (D) int IN6_IS_ADDR_MC_ORGLOCAL( in in6_addr* a ) pure\n+    extern (D) int IN6_IS_ADDR_MC_ORGLOCAL( const scope in6_addr* a ) pure\n     {\n         return IN6_IS_ADDR_MULTICAST(a) &&\n                __IPV6_ADDR_MC_SCOPE(a) == __IPV6_ADDR_SCOPE_ORGLOCAL;\n     }\n \n-    extern (D) int IN6_IS_ADDR_MC_GLOBAL( in in6_addr* a ) pure\n+    extern (D) int IN6_IS_ADDR_MC_GLOBAL( const scope in6_addr* a ) pure\n     {\n         return IN6_IS_ADDR_MULTICAST(a) &&\n                __IPV6_ADDR_MC_SCOPE(a) == __IPV6_ADDR_SCOPE_GLOBAL;\n@@ -943,23 +943,23 @@ else version (NetBSD)\n     }\n \n     // macros\n-    extern (D) int IN6_IS_ADDR_UNSPECIFIED( in in6_addr* a ) pure\n+    extern (D) int IN6_IS_ADDR_UNSPECIFIED( const scope in6_addr* a ) pure\n     {\n         return (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[0]) == 0) &&\n                (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[4]) == 0) &&\n                (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[8]) == 0) &&\n                (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[12]) == 0);\n     }\n \n-    extern (D) int IN6_IS_ADDR_LOOPBACK( in in6_addr* a ) pure\n+    extern (D) int IN6_IS_ADDR_LOOPBACK( const scope in6_addr* a ) pure\n     {\n         return (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[0]) == 0) &&\n                (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[4]) == 0) &&\n                (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[8]) == 0) &&\n                (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[12]) == ntohl(1));\n     }\n \n-    extern (D) int IN6_IS_ADDR_V4COMPAT( in in6_addr* a ) pure\n+    extern (D) int IN6_IS_ADDR_V4COMPAT( const scope in6_addr* a ) pure\n     {\n         return (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[0]) == 0) &&\n                (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[4]) == 0) &&\n@@ -968,58 +968,58 @@ else version (NetBSD)\n                (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[12]) != ntohl(1));\n     }\n \n-    extern (D) int IN6_IS_ADDR_V4MAPPED( in in6_addr* a ) pure\n+    extern (D) int IN6_IS_ADDR_V4MAPPED( const scope in6_addr* a ) pure\n     {\n         return (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[0]) == 0) &&\n                (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[4]) == 0) &&\n                (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[8]) == ntohl(0x0000ffff));\n     }\n \n-    extern (D) int IN6_IS_ADDR_LINKLOCAL( in in6_addr* a ) pure\n+    extern (D) int IN6_IS_ADDR_LINKLOCAL( const scope in6_addr* a ) pure\n     {\n         return a.s6_addr[0] == 0xfe && (a.s6_addr[1] & 0xc0) == 0x80;\n     }\n \n-    extern (D) int IN6_IS_ADDR_SITELOCAL( in in6_addr* a ) pure\n+    extern (D) int IN6_IS_ADDR_SITELOCAL( const scope in6_addr* a ) pure\n     {\n         return a.s6_addr[0] == 0xfe && (a.s6_addr[1] & 0xc0) == 0xc0;\n     }\n \n-    extern (D) int IN6_IS_ADDR_MULTICAST( in in6_addr* a ) pure\n+    extern (D) int IN6_IS_ADDR_MULTICAST( const scope in6_addr* a ) pure\n     {\n         return a.s6_addr[0] == 0xff;\n     }\n \n-    extern (D) uint8_t __IPV6_ADDR_MC_SCOPE( in in6_addr* a ) pure\n+    extern (D) uint8_t __IPV6_ADDR_MC_SCOPE( const scope in6_addr* a ) pure\n     {\n         return a.s6_addr[1] & 0x0f;\n     }\n \n-    extern (D) int IN6_IS_ADDR_MC_NODELOCAL( in in6_addr* a ) pure\n+    extern (D) int IN6_IS_ADDR_MC_NODELOCAL( const scope in6_addr* a ) pure\n     {\n         return IN6_IS_ADDR_MULTICAST(a) &&\n                __IPV6_ADDR_MC_SCOPE(a) == __IPV6_ADDR_SCOPE_NODELOCAL;\n     }\n \n-    extern (D) int IN6_IS_ADDR_MC_LINKLOCAL( in in6_addr* a ) pure\n+    extern (D) int IN6_IS_ADDR_MC_LINKLOCAL( const scope in6_addr* a ) pure\n     {\n         return IN6_IS_ADDR_MULTICAST(a) &&\n                __IPV6_ADDR_MC_SCOPE(a) == __IPV6_ADDR_SCOPE_LINKLOCAL;\n     }\n \n-    extern (D) int IN6_IS_ADDR_MC_SITELOCAL( in in6_addr* a ) pure\n+    extern (D) int IN6_IS_ADDR_MC_SITELOCAL( const scope in6_addr* a ) pure\n     {\n         return IN6_IS_ADDR_MULTICAST(a) &&\n                __IPV6_ADDR_MC_SCOPE(a) == __IPV6_ADDR_SCOPE_SITELOCAL;\n     }\n \n-    extern (D) int IN6_IS_ADDR_MC_ORGLOCAL( in in6_addr* a ) pure\n+    extern (D) int IN6_IS_ADDR_MC_ORGLOCAL( const scope in6_addr* a ) pure\n     {\n         return IN6_IS_ADDR_MULTICAST(a) &&\n                __IPV6_ADDR_MC_SCOPE(a) == __IPV6_ADDR_SCOPE_ORGLOCAL;\n     }\n \n-    extern (D) int IN6_IS_ADDR_MC_GLOBAL( in in6_addr* a ) pure\n+    extern (D) int IN6_IS_ADDR_MC_GLOBAL( const scope in6_addr* a ) pure\n     {\n         return IN6_IS_ADDR_MULTICAST(a) &&\n                __IPV6_ADDR_MC_SCOPE(a) == __IPV6_ADDR_SCOPE_GLOBAL;\n@@ -1082,23 +1082,23 @@ else version (OpenBSD)\n     }\n \n     // macros\n-    extern (D) int IN6_IS_ADDR_UNSPECIFIED( in in6_addr* a ) pure\n+    extern (D) int IN6_IS_ADDR_UNSPECIFIED( const scope in6_addr* a ) pure\n     {\n         return (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[0]) == 0) &&\n                (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[4]) == 0) &&\n                (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[8]) == 0) &&\n                (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[12]) == 0);\n     }\n \n-    extern (D) int IN6_IS_ADDR_LOOPBACK( in in6_addr* a ) pure\n+    extern (D) int IN6_IS_ADDR_LOOPBACK( const scope in6_addr* a ) pure\n     {\n         return (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[0]) == 0) &&\n                (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[4]) == 0) &&\n                (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[8]) == 0) &&\n                (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[12]) == ntohl(1));\n     }\n \n-    extern (D) int IN6_IS_ADDR_V4COMPAT( in in6_addr* a ) pure\n+    extern (D) int IN6_IS_ADDR_V4COMPAT( const scope in6_addr* a ) pure\n     {\n         return (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[0]) == 0) &&\n                (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[4]) == 0) &&\n@@ -1107,58 +1107,58 @@ else version (OpenBSD)\n                (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[12]) != ntohl(1));\n     }\n \n-    extern (D) int IN6_IS_ADDR_V4MAPPED( in in6_addr* a ) pure\n+    extern (D) int IN6_IS_ADDR_V4MAPPED( const scope in6_addr* a ) pure\n     {\n         return (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[0]) == 0) &&\n                (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[4]) == 0) &&\n                (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[8]) == ntohl(0x0000ffff));\n     }\n \n-    extern (D) int IN6_IS_ADDR_LINKLOCAL( in in6_addr* a ) pure\n+    extern (D) int IN6_IS_ADDR_LINKLOCAL( const scope in6_addr* a ) pure\n     {\n         return a.s6_addr[0] == 0xfe && (a.s6_addr[1] & 0xc0) == 0x80;\n     }\n \n-    extern (D) int IN6_IS_ADDR_SITELOCAL( in in6_addr* a ) pure\n+    extern (D) int IN6_IS_ADDR_SITELOCAL( const scope in6_addr* a ) pure\n     {\n         return a.s6_addr[0] == 0xfe && (a.s6_addr[1] & 0xc0) == 0xc0;\n     }\n \n-    extern (D) int IN6_IS_ADDR_MULTICAST( in in6_addr* a ) pure\n+    extern (D) int IN6_IS_ADDR_MULTICAST( const scope in6_addr* a ) pure\n     {\n         return a.s6_addr[0] == 0xff;\n     }\n \n-    extern (D) uint8_t __IPV6_ADDR_MC_SCOPE( in in6_addr* a ) pure\n+    extern (D) uint8_t __IPV6_ADDR_MC_SCOPE( const scope in6_addr* a ) pure\n     {\n         return a.s6_addr[1] & 0x0f;\n     }\n \n-    extern (D) int IN6_IS_ADDR_MC_NODELOCAL( in in6_addr* a ) pure\n+    extern (D) int IN6_IS_ADDR_MC_NODELOCAL( const scope in6_addr* a ) pure\n     {\n         return IN6_IS_ADDR_MULTICAST(a) &&\n                __IPV6_ADDR_MC_SCOPE(a) == __IPV6_ADDR_SCOPE_NODELOCAL;\n     }\n \n-    extern (D) int IN6_IS_ADDR_MC_LINKLOCAL( in in6_addr* a ) pure\n+    extern (D) int IN6_IS_ADDR_MC_LINKLOCAL( const scope in6_addr* a ) pure\n     {\n         return IN6_IS_ADDR_MULTICAST(a) &&\n                __IPV6_ADDR_MC_SCOPE(a) == __IPV6_ADDR_SCOPE_LINKLOCAL;\n     }\n \n-    extern (D) int IN6_IS_ADDR_MC_SITELOCAL( in in6_addr* a ) pure\n+    extern (D) int IN6_IS_ADDR_MC_SITELOCAL( const scope in6_addr* a ) pure\n     {\n         return IN6_IS_ADDR_MULTICAST(a) &&\n                __IPV6_ADDR_MC_SCOPE(a) == __IPV6_ADDR_SCOPE_SITELOCAL;\n     }\n \n-    extern (D) int IN6_IS_ADDR_MC_ORGLOCAL( in in6_addr* a ) pure\n+    extern (D) int IN6_IS_ADDR_MC_ORGLOCAL( const scope in6_addr* a ) pure\n     {\n         return IN6_IS_ADDR_MULTICAST(a) &&\n                __IPV6_ADDR_MC_SCOPE(a) == __IPV6_ADDR_SCOPE_ORGLOCAL;\n     }\n \n-    extern (D) int IN6_IS_ADDR_MC_GLOBAL( in in6_addr* a ) pure\n+    extern (D) int IN6_IS_ADDR_MC_GLOBAL( const scope in6_addr* a ) pure\n     {\n         return IN6_IS_ADDR_MULTICAST(a) &&\n                __IPV6_ADDR_MC_SCOPE(a) == __IPV6_ADDR_SCOPE_GLOBAL;\n@@ -1221,23 +1221,23 @@ else version (DragonFlyBSD)\n     }\n \n     // macros\n-    extern (D) int IN6_IS_ADDR_UNSPECIFIED( in in6_addr* a ) pure\n+    extern (D) int IN6_IS_ADDR_UNSPECIFIED( const scope in6_addr* a ) pure\n     {\n         return (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[0]) == 0) &&\n                (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[4]) == 0) &&\n                (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[8]) == 0) &&\n                (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[12]) == 0);\n     }\n \n-    extern (D) int IN6_IS_ADDR_LOOPBACK( in in6_addr* a ) pure\n+    extern (D) int IN6_IS_ADDR_LOOPBACK( const scope in6_addr* a ) pure\n     {\n         return (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[0]) == 0) &&\n                (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[4]) == 0) &&\n                (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[8]) == 0) &&\n                (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[12]) == ntohl(1));\n     }\n \n-    extern (D) int IN6_IS_ADDR_V4COMPAT( in in6_addr* a ) pure\n+    extern (D) int IN6_IS_ADDR_V4COMPAT( const scope in6_addr* a ) pure\n     {\n         return (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[0]) == 0) &&\n                (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[4]) == 0) &&\n@@ -1246,58 +1246,58 @@ else version (DragonFlyBSD)\n                (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[12]) != ntohl(1));\n     }\n \n-    extern (D) int IN6_IS_ADDR_V4MAPPED( in in6_addr* a ) pure\n+    extern (D) int IN6_IS_ADDR_V4MAPPED( const scope in6_addr* a ) pure\n     {\n         return (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[0]) == 0) &&\n                (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[4]) == 0) &&\n                (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[8]) == ntohl(0x0000ffff));\n     }\n \n-    extern (D) int IN6_IS_ADDR_LINKLOCAL( in in6_addr* a ) pure\n+    extern (D) int IN6_IS_ADDR_LINKLOCAL( const scope in6_addr* a ) pure\n     {\n         return a.s6_addr[0] == 0xfe && (a.s6_addr[1] & 0xc0) == 0x80;\n     }\n \n-    extern (D) int IN6_IS_ADDR_SITELOCAL( in in6_addr* a ) pure\n+    extern (D) int IN6_IS_ADDR_SITELOCAL( const scope in6_addr* a ) pure\n     {\n         return a.s6_addr[0] == 0xfe && (a.s6_addr[1] & 0xc0) == 0xc0;\n     }\n \n-    extern (D) int IN6_IS_ADDR_MULTICAST( in in6_addr* a ) pure\n+    extern (D) int IN6_IS_ADDR_MULTICAST( const scope in6_addr* a ) pure\n     {\n         return a.s6_addr[0] == 0xff;\n     }\n \n-    extern (D) uint8_t __IPV6_ADDR_MC_SCOPE( in in6_addr* a ) pure\n+    extern (D) uint8_t __IPV6_ADDR_MC_SCOPE( const scope in6_addr* a ) pure\n     {\n         return a.s6_addr[1] & 0x0f;\n     }\n \n-    extern (D) int IN6_IS_ADDR_MC_NODELOCAL( in in6_addr* a ) pure\n+    extern (D) int IN6_IS_ADDR_MC_NODELOCAL( const scope in6_addr* a ) pure\n     {\n         return IN6_IS_ADDR_MULTICAST(a) &&\n                __IPV6_ADDR_MC_SCOPE(a) == __IPV6_ADDR_SCOPE_NODELOCAL;\n     }\n \n-    extern (D) int IN6_IS_ADDR_MC_LINKLOCAL( in in6_addr* a ) pure\n+    extern (D) int IN6_IS_ADDR_MC_LINKLOCAL( const scope in6_addr* a ) pure\n     {\n         return IN6_IS_ADDR_MULTICAST(a) &&\n                __IPV6_ADDR_MC_SCOPE(a) == __IPV6_ADDR_SCOPE_LINKLOCAL;\n     }\n \n-    extern (D) int IN6_IS_ADDR_MC_SITELOCAL( in in6_addr* a ) pure\n+    extern (D) int IN6_IS_ADDR_MC_SITELOCAL( const scope in6_addr* a ) pure\n     {\n         return IN6_IS_ADDR_MULTICAST(a) &&\n                __IPV6_ADDR_MC_SCOPE(a) == __IPV6_ADDR_SCOPE_SITELOCAL;\n     }\n \n-    extern (D) int IN6_IS_ADDR_MC_ORGLOCAL( in in6_addr* a ) pure\n+    extern (D) int IN6_IS_ADDR_MC_ORGLOCAL( const scope in6_addr* a ) pure\n     {\n         return IN6_IS_ADDR_MULTICAST(a) &&\n                __IPV6_ADDR_MC_SCOPE(a) == __IPV6_ADDR_SCOPE_ORGLOCAL;\n     }\n \n-    extern (D) int IN6_IS_ADDR_MC_GLOBAL( in in6_addr* a ) pure\n+    extern (D) int IN6_IS_ADDR_MC_GLOBAL( const scope in6_addr* a ) pure\n     {\n         return IN6_IS_ADDR_MULTICAST(a) &&\n                __IPV6_ADDR_MC_SCOPE(a) == __IPV6_ADDR_SCOPE_GLOBAL;\n@@ -1350,67 +1350,67 @@ else version (Solaris)\n     }\n \n     // macros\n-    extern (D) int IN6_IS_ADDR_UNSPECIFIED( in in6_addr* a ) pure\n+    extern (D) int IN6_IS_ADDR_UNSPECIFIED( const scope in6_addr* a ) pure\n     {\n         return (a.s6_addr32[0] == 0) && (a.s6_addr32[1] == 0) &&\n                (a.s6_addr32[2] == 0) && (a.s6_addr32[3] == 0);\n     }\n \n-    extern (D) int IN6_IS_ADDR_LOOPBACK( in in6_addr* a ) pure\n+    extern (D) int IN6_IS_ADDR_LOOPBACK( const scope in6_addr* a ) pure\n     {\n         return (a.s6_addr32[0] == 0) && (a.s6_addr32[1] == 0) &&\n                (a.s6_addr32[2] == 0) && (a.s6_addr32[3] == ntohl(1));\n     }\n \n-    extern (D) int IN6_IS_ADDR_V4COMPAT( in in6_addr* a ) pure\n+    extern (D) int IN6_IS_ADDR_V4COMPAT( const scope in6_addr* a ) pure\n     {\n         return (a.s6_addr32[0] == 0) && (a.s6_addr32[1] == 0) &&\n                (a.s6_addr32[2] == 0) && (a.s6_addr32[3] != 0) &&\n                (a.s6_addr32[3] != ntohl(1));\n     }\n \n-    extern (D) int IN6_IS_ADDR_V4MAPPED( in in6_addr* a ) pure\n+    extern (D) int IN6_IS_ADDR_V4MAPPED( const scope in6_addr* a ) pure\n     {\n         return (a.s6_addr32[0] == 0) && (a.s6_addr32[1] == 0) &&\n                (a.s6_addr32[2] == ntohl(0x0000ffff));\n     }\n \n-    extern (D) int IN6_IS_ADDR_LINKLOCAL( in in6_addr* a ) pure\n+    extern (D) int IN6_IS_ADDR_LINKLOCAL( const scope in6_addr* a ) pure\n     {\n         return a.s6_addr8[0] == 0xfe && (a.s6_addr8[1] & 0xc0) == 0x80;\n     }\n \n-    extern (D) int IN6_IS_ADDR_SITELOCAL( in in6_addr* a ) pure\n+    extern (D) int IN6_IS_ADDR_SITELOCAL( const scope in6_addr* a ) pure\n     {\n         return a.s6_addr8[0] == 0xfe && (a.s6_addr8[1] & 0xc0) == 0xc0;\n     }\n \n-    extern (D) int IN6_IS_ADDR_MULTICAST( in in6_addr* a ) pure\n+    extern (D) int IN6_IS_ADDR_MULTICAST( const scope in6_addr* a ) pure\n     {\n         return a.s6_addr8[0] == 0xff;\n     }\n \n-    extern (D) int IN6_IS_ADDR_MC_NODELOCAL( in in6_addr* a ) pure\n+    extern (D) int IN6_IS_ADDR_MC_NODELOCAL( const scope in6_addr* a ) pure\n     {\n         return a.s6_addr8[0] == 0xff && (a.s6_addr8[1] & 0x0f) == 0x01;\n     }\n \n-    extern (D) int IN6_IS_ADDR_MC_LINKLOCAL( in in6_addr* a ) pure\n+    extern (D) int IN6_IS_ADDR_MC_LINKLOCAL( const scope in6_addr* a ) pure\n     {\n         return a.s6_addr8[0] == 0xff && (a.s6_addr8[1] & 0x0f) == 0x02;\n     }\n \n-    extern (D) int IN6_IS_ADDR_MC_SITELOCAL( in in6_addr* a ) pure\n+    extern (D) int IN6_IS_ADDR_MC_SITELOCAL( const scope in6_addr* a ) pure\n     {\n         return a.s6_addr8[0] == 0xff && (a.s6_addr8[1] & 0x0f) == 0x05;\n     }\n \n-    extern (D) int IN6_IS_ADDR_MC_ORGLOCAL( in in6_addr* a ) pure\n+    extern (D) int IN6_IS_ADDR_MC_ORGLOCAL( const scope in6_addr* a ) pure\n     {\n         return a.s6_addr8[0] == 0xff && (a.s6_addr8[1] & 0x0f) == 0x08;\n     }\n \n-    extern (D) int IN6_IS_ADDR_MC_GLOBAL( in in6_addr* a ) pure\n+    extern (D) int IN6_IS_ADDR_MC_GLOBAL( const scope in6_addr* a ) pure\n     {\n         return a.s6_addr8[0] == 0xff && (a.s6_addr8[1] & 0x0f) == 0x0e;\n     }\n@@ -1470,23 +1470,23 @@ else version (CRuntime_Bionic)\n \n     extern (D) pure\n     {\n-        bool IN6_IS_ADDR_UNSPECIFIED( in in6_addr* a )\n+        bool IN6_IS_ADDR_UNSPECIFIED( const scope in6_addr* a )\n         {\n             return (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[0]) == 0) &&\n                    (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[4]) == 0) &&\n                    (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[8]) == 0) &&\n                    (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[12]) == 0);\n         }\n \n-        bool IN6_IS_ADDR_LOOPBACK( in in6_addr* a )\n+        bool IN6_IS_ADDR_LOOPBACK( const scope in6_addr* a )\n         {\n             return (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[0]) == 0) &&\n                    (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[4]) == 0) &&\n                    (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[8]) == 0) &&\n                    (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[12]) == ntohl(1));\n         }\n \n-        bool IN6_IS_ADDR_V4COMPAT( in in6_addr* a )\n+        bool IN6_IS_ADDR_V4COMPAT( const scope in6_addr* a )\n         {\n             return (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[0]) == 0) &&\n                    (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[4]) == 0) &&\n@@ -1495,63 +1495,63 @@ else version (CRuntime_Bionic)\n                    (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[12]) != ntohl(1));\n         }\n \n-        bool IN6_IS_ADDR_V4MAPPED( in in6_addr* a )\n+        bool IN6_IS_ADDR_V4MAPPED( const scope in6_addr* a )\n         {\n             return (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[0]) == 0) &&\n                    (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[4]) == 0) &&\n                    (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[8]) == ntohl(0x0000ffff));\n         }\n \n-        bool IN6_IS_ADDR_LINKLOCAL( in in6_addr* a )\n+        bool IN6_IS_ADDR_LINKLOCAL( const scope in6_addr* a )\n         {\n             return a.s6_addr[0] == 0xfe && (a.s6_addr[1] & 0xc0) == 0x80;\n         }\n \n-        bool IN6_IS_ADDR_SITELOCAL( in in6_addr* a )\n+        bool IN6_IS_ADDR_SITELOCAL( const scope in6_addr* a )\n         {\n             return a.s6_addr[0] == 0xfe && (a.s6_addr[1] & 0xc0) == 0xc0;\n         }\n \n-        bool IN6_IS_ADDR_ULA( in in6_addr* a )\n+        bool IN6_IS_ADDR_ULA( const scope in6_addr* a )\n         {\n             return (a.s6_addr[0] & 0xfe) == 0xfc;\n         }\n \n-        bool IN6_IS_ADDR_MULTICAST( in in6_addr* a )\n+        bool IN6_IS_ADDR_MULTICAST( const scope in6_addr* a )\n         {\n             return a.s6_addr[0] == 0xff;\n         }\n \n-        uint8_t IPV6_ADDR_MC_SCOPE( in in6_addr* a )\n+        uint8_t IPV6_ADDR_MC_SCOPE( const scope in6_addr* a )\n         {\n             return a.s6_addr[1] & 0x0f;\n         }\n \n-        bool IN6_IS_ADDR_MC_NODELOCAL( in in6_addr* a )\n+        bool IN6_IS_ADDR_MC_NODELOCAL( const scope in6_addr* a )\n         {\n             return IN6_IS_ADDR_MULTICAST(a) &&\n                    IPV6_ADDR_MC_SCOPE(a) == IPV6_ADDR_SCOPE_NODELOCAL;\n         }\n \n-        bool IN6_IS_ADDR_MC_LINKLOCAL( in in6_addr* a )\n+        bool IN6_IS_ADDR_MC_LINKLOCAL( const scope in6_addr* a )\n         {\n             return IN6_IS_ADDR_MULTICAST(a) &&\n                    IPV6_ADDR_MC_SCOPE(a) == IPV6_ADDR_SCOPE_LINKLOCAL;\n         }\n \n-        bool IN6_IS_ADDR_MC_SITELOCAL( in in6_addr* a )\n+        bool IN6_IS_ADDR_MC_SITELOCAL( const scope in6_addr* a )\n         {\n             return IN6_IS_ADDR_MULTICAST(a) &&\n                    IPV6_ADDR_MC_SCOPE(a) == IPV6_ADDR_SCOPE_SITELOCAL;\n         }\n \n-        bool IN6_IS_ADDR_MC_ORGLOCAL( in in6_addr* a )\n+        bool IN6_IS_ADDR_MC_ORGLOCAL( const scope in6_addr* a )\n         {\n             return IN6_IS_ADDR_MULTICAST(a) &&\n                    IPV6_ADDR_MC_SCOPE(a) == IPV6_ADDR_SCOPE_ORGLOCAL;\n         }\n \n-        bool IN6_IS_ADDR_MC_GLOBAL( in in6_addr* a )\n+        bool IN6_IS_ADDR_MC_GLOBAL( const scope in6_addr* a )\n         {\n             return IN6_IS_ADDR_MULTICAST(a) &&\n                    IPV6_ADDR_MC_SCOPE(a) == IPV6_ADDR_SCOPE_GLOBAL;"}, {"sha": "d400d2d9a86fe2351082dabd4cfb758afbb01338", "filename": "libphobos/libdruntime/core/sys/posix/netinet/tcp.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fnetinet%2Ftcp.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fnetinet%2Ftcp.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fnetinet%2Ftcp.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -14,7 +14,7 @@\n  */\n module core.sys.posix.netinet.tcp;\n \n-private import core.sys.posix.config;\n+import core.sys.posix.config;\n \n version (OSX)\n     version = Darwin;"}, {"sha": "fdc41764a78cd0de36bb9c22333817797ae23d20", "filename": "libphobos/libdruntime/core/sys/posix/poll.d", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fpoll.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fpoll.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fpoll.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -14,7 +14,7 @@\n  */\n module core.sys.posix.poll;\n \n-private import core.sys.posix.config;\n+import core.sys.posix.config;\n \n version (OSX)\n     version = Darwin;\n@@ -29,6 +29,7 @@ version (Posix):\n extern (C):\n nothrow:\n @nogc:\n+@system:\n \n //\n // XOpen (XSI)\n@@ -91,7 +92,7 @@ else version (Darwin)\n         int     fd;\n         short   events;\n         short   revents;\n-    };\n+    }\n \n     alias uint nfds_t;\n \n@@ -127,7 +128,7 @@ else version (FreeBSD)\n         int     fd;\n         short   events;\n         short   revents;\n-    };\n+    }\n \n     enum\n     {\n@@ -161,7 +162,7 @@ else version (NetBSD)\n         int     fd;\n         short   events;\n         short   revents;\n-    };\n+    }\n \n     enum\n     {\n@@ -195,7 +196,7 @@ else version (OpenBSD)\n         int     fd;\n         short   events;\n         short   revents;\n-    };\n+    }\n \n     enum\n     {\n@@ -226,7 +227,7 @@ else version (DragonFlyBSD)\n         int     fd;\n         short   events;\n         short   revents;\n-    };\n+    }\n \n     enum\n     {"}, {"sha": "577fb71ace198388c51bb3f1305be502d18b4f7d", "filename": "libphobos/libdruntime/core/sys/posix/pthread.d", "status": "modified", "additions": 195, "deletions": 194, "changes": 389, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fpthread.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fpthread.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fpthread.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -14,7 +14,7 @@\n  */\n module core.sys.posix.pthread;\n \n-private import core.sys.posix.config;\n+import core.sys.posix.config;\n public import core.sys.posix.sys.types;\n public import core.sys.posix.sched;\n public import core.sys.posix.time;\n@@ -33,6 +33,7 @@ else version (WatchOS)\n version (Posix):\n extern (C)\n nothrow:\n+@system:\n \n //\n // Required\n@@ -55,23 +56,23 @@ PTHREAD_PROCESS_PRIVATE\n \n int pthread_atfork(void function(), void function(), void function());\n int pthread_attr_destroy(pthread_attr_t*);\n-int pthread_attr_getdetachstate(in pthread_attr_t*, int*);\n-int pthread_attr_getschedparam(in pthread_attr_t*, sched_param*);\n+int pthread_attr_getdetachstate(const scope pthread_attr_t*, int*);\n+int pthread_attr_getschedparam(const scope pthread_attr_t*, sched_param*);\n int pthread_attr_init(pthread_attr_t*);\n int pthread_attr_setdetachstate(pthread_attr_t*, int);\n-int pthread_attr_setschedparam(in pthread_attr_t*, sched_param*);\n+int pthread_attr_setschedparam(const scope pthread_attr_t*, sched_param*);\n int pthread_cancel(pthread_t);\n void pthread_cleanup_push(void function(void*), void*);\n void pthread_cleanup_pop(int);\n int pthread_cond_broadcast(pthread_cond_t*);\n int pthread_cond_destroy(pthread_cond_t*);\n-int pthread_cond_init(in pthread_cond_t*, pthread_condattr_t*);\n+int pthread_cond_init(const scope pthread_cond_t*, pthread_condattr_t*);\n int pthread_cond_signal(pthread_cond_t*);\n-int pthread_cond_timedwait(pthread_cond_t*, pthread_mutex_t*, in timespec*);\n+int pthread_cond_timedwait(pthread_cond_t*, pthread_mutex_t*, const scope timespec*);\n int pthread_cond_wait(pthread_cond_t*, pthread_mutex_t*);\n int pthread_condattr_destroy(pthread_condattr_t*);\n int pthread_condattr_init(pthread_condattr_t*);\n-int pthread_create(pthread_t*, in pthread_attr_t*, void* function(void*), void*);\n+int pthread_create(pthread_t*, const scope pthread_attr_t*, void* function(void*), void*);\n int pthread_detach(pthread_t);\n int pthread_equal(pthread_t, pthread_t);\n void pthread_exit(void*);\n@@ -88,7 +89,7 @@ int pthread_mutexattr_destroy(pthread_mutexattr_t*);\n int pthread_mutexattr_init(pthread_mutexattr_t*);\n int pthread_once(pthread_once_t*, void function());\n int pthread_rwlock_destroy(pthread_rwlock_t*);\n-int pthread_rwlock_init(pthread_rwlock_t*, in pthread_rwlockattr_t*);\n+int pthread_rwlock_init(pthread_rwlock_t*, const scope pthread_rwlockattr_t*);\n int pthread_rwlock_rdlock(pthread_rwlock_t*);\n int pthread_rwlock_tryrdlock(pthread_rwlock_t*);\n int pthread_rwlock_trywrlock(pthread_rwlock_t*);\n@@ -99,7 +100,7 @@ int pthread_rwlockattr_init(pthread_rwlockattr_t*);\n pthread_t pthread_self();\n int pthread_setcancelstate(int, int*);\n int pthread_setcanceltype(int, int*);\n-int pthread_setspecific(pthread_key_t, in void*);\n+int pthread_setspecific(pthread_key_t, const scope void*);\n void pthread_testcancel();\n */\n version (CRuntime_Glibc)\n@@ -330,7 +331,7 @@ else version (DragonFlyBSD)\n \n     enum PTHREAD_MUTEX_INITIALIZER              = null;\n     //enum PTHREAD_ONCE_INIT                      = { PTHREAD_NEEDS_INIT, NULL };\n-    enum PTHREAD_ONCE_INIT                      = pthread_once_t.init;;\n+    enum PTHREAD_ONCE_INIT                      = pthread_once_t.init;\n     enum PTHREAD_COND_INITIALIZER               = null;\n     enum PTHREAD_RWLOCK_INITIALIZER             = null;\n }\n@@ -444,11 +445,11 @@ int pthread_atfork(void function(), void function(), void function());\n @nogc {\n     int pthread_atfork(void function() @nogc, void function() @nogc, void function() @nogc);\n     int pthread_attr_destroy(pthread_attr_t*);\n-    int pthread_attr_getdetachstate(in pthread_attr_t*, int*);\n-    int pthread_attr_getschedparam(in pthread_attr_t*, sched_param*);\n+    int pthread_attr_getdetachstate(const scope pthread_attr_t*, int*);\n+    int pthread_attr_getschedparam(const scope pthread_attr_t*, sched_param*);\n     int pthread_attr_init(pthread_attr_t*);\n     int pthread_attr_setdetachstate(pthread_attr_t*, int);\n-    int pthread_attr_setschedparam(in pthread_attr_t*, sched_param*);\n+    int pthread_attr_setschedparam(const scope pthread_attr_t*, sched_param*);\n     int pthread_cancel(pthread_t);\n }\n \n@@ -716,13 +717,13 @@ else\n \n int pthread_cond_broadcast(pthread_cond_t*);\n int pthread_cond_destroy(pthread_cond_t*);\n-int pthread_cond_init(in pthread_cond_t*, pthread_condattr_t*) @trusted;\n+int pthread_cond_init(const scope pthread_cond_t*, pthread_condattr_t*) @trusted;\n int pthread_cond_signal(pthread_cond_t*);\n-int pthread_cond_timedwait(pthread_cond_t*, pthread_mutex_t*, in timespec*);\n+int pthread_cond_timedwait(pthread_cond_t*, pthread_mutex_t*, const scope timespec*);\n int pthread_cond_wait(pthread_cond_t*, pthread_mutex_t*);\n int pthread_condattr_destroy(pthread_condattr_t*);\n int pthread_condattr_init(pthread_condattr_t*);\n-int pthread_create(pthread_t*, in pthread_attr_t*, void* function(void*), void*);\n+int pthread_create(pthread_t*, const scope pthread_attr_t*, void* function(void*), void*);\n int pthread_detach(pthread_t);\n int pthread_equal(pthread_t, pthread_t);\n void pthread_exit(void*);\n@@ -742,7 +743,7 @@ int pthread_mutexattr_destroy(pthread_mutexattr_t*);\n int pthread_mutexattr_init(pthread_mutexattr_t*) @trusted;\n int pthread_once(pthread_once_t*, void function());\n int pthread_rwlock_destroy(pthread_rwlock_t*);\n-int pthread_rwlock_init(pthread_rwlock_t*, in pthread_rwlockattr_t*);\n+int pthread_rwlock_init(pthread_rwlock_t*, const scope pthread_rwlockattr_t*);\n int pthread_rwlock_rdlock(pthread_rwlock_t*);\n int pthread_rwlock_tryrdlock(pthread_rwlock_t*);\n int pthread_rwlock_trywrlock(pthread_rwlock_t*);\n@@ -753,7 +754,7 @@ int pthread_rwlockattr_init(pthread_rwlockattr_t*);\n pthread_t pthread_self();\n int pthread_setcancelstate(int, int*);\n int pthread_setcanceltype(int, int*);\n-int pthread_setspecific(pthread_key_t, in void*);\n+int pthread_setspecific(pthread_key_t, const scope void*);\n void pthread_testcancel();\n \n //\n@@ -763,10 +764,10 @@ void pthread_testcancel();\n PTHREAD_BARRIER_SERIAL_THREAD\n \n int pthread_barrier_destroy(pthread_barrier_t*);\n-int pthread_barrier_init(pthread_barrier_t*, in pthread_barrierattr_t*, uint);\n+int pthread_barrier_init(pthread_barrier_t*, const scope pthread_barrierattr_t*, uint);\n int pthread_barrier_wait(pthread_barrier_t*);\n int pthread_barrierattr_destroy(pthread_barrierattr_t*);\n-int pthread_barrierattr_getpshared(in pthread_barrierattr_t*, int*); (BAR|TSH)\n+int pthread_barrierattr_getpshared(const scope pthread_barrierattr_t*, int*); (BAR|TSH)\n int pthread_barrierattr_init(pthread_barrierattr_t*);\n int pthread_barrierattr_setpshared(pthread_barrierattr_t*, int); (BAR|TSH)\n */\n@@ -776,10 +777,10 @@ version (CRuntime_Glibc)\n     enum PTHREAD_BARRIER_SERIAL_THREAD = -1;\n \n     int pthread_barrier_destroy(pthread_barrier_t*);\n-    int pthread_barrier_init(pthread_barrier_t*, in pthread_barrierattr_t*, uint);\n+    int pthread_barrier_init(pthread_barrier_t*, const scope pthread_barrierattr_t*, uint);\n     int pthread_barrier_wait(pthread_barrier_t*);\n     int pthread_barrierattr_destroy(pthread_barrierattr_t*);\n-    int pthread_barrierattr_getpshared(in pthread_barrierattr_t*, int*);\n+    int pthread_barrierattr_getpshared(const scope pthread_barrierattr_t*, int*);\n     int pthread_barrierattr_init(pthread_barrierattr_t*);\n     int pthread_barrierattr_setpshared(pthread_barrierattr_t*, int);\n }\n@@ -788,10 +789,10 @@ else version (FreeBSD)\n     enum PTHREAD_BARRIER_SERIAL_THREAD = -1;\n \n     int pthread_barrier_destroy(pthread_barrier_t*);\n-    int pthread_barrier_init(pthread_barrier_t*, in pthread_barrierattr_t*, uint);\n+    int pthread_barrier_init(pthread_barrier_t*, const scope pthread_barrierattr_t*, uint);\n     int pthread_barrier_wait(pthread_barrier_t*);\n     int pthread_barrierattr_destroy(pthread_barrierattr_t*);\n-    int pthread_barrierattr_getpshared(in pthread_barrierattr_t*, int*);\n+    int pthread_barrierattr_getpshared(const scope pthread_barrierattr_t*, int*);\n     int pthread_barrierattr_init(pthread_barrierattr_t*);\n     int pthread_barrierattr_setpshared(pthread_barrierattr_t*, int);\n }\n@@ -803,10 +804,10 @@ else version (DragonFlyBSD)\n     enum PTHREAD_THREADS_MAX           = c_ulong.max;\n \n     int pthread_barrier_destroy(pthread_barrier_t*);\n-    int pthread_barrier_init(pthread_barrier_t*, in pthread_barrierattr_t*, uint);\n+    int pthread_barrier_init(pthread_barrier_t*, const scope pthread_barrierattr_t*, uint);\n     int pthread_barrier_wait(pthread_barrier_t*);\n     int pthread_barrierattr_destroy(pthread_barrierattr_t*);\n-    int pthread_barrierattr_getpshared(in pthread_barrierattr_t*, int*);\n+    int pthread_barrierattr_getpshared(const scope pthread_barrierattr_t*, int*);\n     int pthread_barrierattr_init(pthread_barrierattr_t*);\n     int pthread_barrierattr_setpshared(pthread_barrierattr_t*, int);\n }\n@@ -815,10 +816,10 @@ else version (NetBSD)\n     enum PTHREAD_BARRIER_SERIAL_THREAD = 1234567;\n \n     int pthread_barrier_destroy(pthread_barrier_t*);\n-    int pthread_barrier_init(pthread_barrier_t*, in pthread_barrierattr_t*, uint);\n+    int pthread_barrier_init(pthread_barrier_t*, const scope pthread_barrierattr_t*, uint);\n     int pthread_barrier_wait(pthread_barrier_t*);\n     int pthread_barrierattr_destroy(pthread_barrierattr_t*);\n-    int pthread_barrierattr_getpshared(in pthread_barrierattr_t*, int*);\n+    int pthread_barrierattr_getpshared(const scope pthread_barrierattr_t*, int*);\n     int pthread_barrierattr_init(pthread_barrierattr_t*);\n     int pthread_barrierattr_setpshared(pthread_barrierattr_t*, int);\n }\n@@ -827,10 +828,10 @@ else version (OpenBSD)\n     enum PTHREAD_BARRIER_SERIAL_THREAD = -1;\n \n     int pthread_barrier_destroy(pthread_barrier_t*);\n-    int pthread_barrier_init(pthread_barrier_t*, in pthread_barrierattr_t*, uint);\n+    int pthread_barrier_init(pthread_barrier_t*, const scope pthread_barrierattr_t*, uint);\n     int pthread_barrier_wait(pthread_barrier_t*);\n     int pthread_barrierattr_destroy(pthread_barrierattr_t*);\n-    int pthread_barrierattr_getpshared(in pthread_barrierattr_t*, int*);\n+    int pthread_barrierattr_getpshared(const scope pthread_barrierattr_t*, int*);\n     int pthread_barrierattr_init(pthread_barrierattr_t*);\n     int pthread_barrierattr_setpshared(pthread_barrierattr_t*, int);\n }\n@@ -842,10 +843,10 @@ else version (Solaris)\n     enum PTHREAD_BARRIER_SERIAL_THREAD = -2;\n \n     int pthread_barrier_destroy(pthread_barrier_t*);\n-    int pthread_barrier_init(pthread_barrier_t*, in pthread_barrierattr_t*, uint);\n+    int pthread_barrier_init(pthread_barrier_t*, const scope pthread_barrierattr_t*, uint);\n     int pthread_barrier_wait(pthread_barrier_t*);\n     int pthread_barrierattr_destroy(pthread_barrierattr_t*);\n-    int pthread_barrierattr_getpshared(in pthread_barrierattr_t*, int*);\n+    int pthread_barrierattr_getpshared(const scope pthread_barrierattr_t*, int*);\n     int pthread_barrierattr_init(pthread_barrierattr_t*);\n     int pthread_barrierattr_setpshared(pthread_barrierattr_t*, int);\n }\n@@ -857,10 +858,10 @@ else version (CRuntime_Musl)\n     enum PTHREAD_BARRIER_SERIAL_THREAD = -1;\n \n     int pthread_barrier_destroy(pthread_barrier_t*);\n-    int pthread_barrier_init(pthread_barrier_t*, in pthread_barrierattr_t*, uint);\n+    int pthread_barrier_init(pthread_barrier_t*, const scope pthread_barrierattr_t*, uint);\n     int pthread_barrier_wait(pthread_barrier_t*);\n     int pthread_barrierattr_destroy(pthread_barrierattr_t*);\n-    int pthread_barrierattr_getpshared(in pthread_barrierattr_t*, int*);\n+    int pthread_barrierattr_getpshared(const scope pthread_barrierattr_t*, int*);\n     int pthread_barrierattr_init(pthread_barrierattr_t*);\n     int pthread_barrierattr_setpshared(pthread_barrierattr_t*, int);\n }\n@@ -869,10 +870,10 @@ else version (CRuntime_UClibc)\n     enum PTHREAD_BARRIER_SERIAL_THREAD = -1;\n \n     int pthread_barrier_destroy(pthread_barrier_t*);\n-    int pthread_barrier_init(pthread_barrier_t*, in pthread_barrierattr_t*, uint);\n+    int pthread_barrier_init(pthread_barrier_t*, const scope pthread_barrierattr_t*, uint);\n     int pthread_barrier_wait(pthread_barrier_t*);\n     int pthread_barrierattr_destroy(pthread_barrierattr_t*);\n-    int pthread_barrierattr_getpshared(in pthread_barrierattr_t*, int*);\n+    int pthread_barrierattr_getpshared(const scope pthread_barrierattr_t*, int*);\n     int pthread_barrierattr_init(pthread_barrierattr_t*);\n     int pthread_barrierattr_setpshared(pthread_barrierattr_t*, int);\n }\n@@ -885,22 +886,22 @@ else\n // Clock (CS)\n //\n /*\n-int pthread_condattr_getclock(in pthread_condattr_t*, clockid_t*);\n+int pthread_condattr_getclock(const scope pthread_condattr_t*, clockid_t*);\n int pthread_condattr_setclock(pthread_condattr_t*, clockid_t);\n */\n version (CRuntime_Glibc)\n {\n-    int pthread_condattr_getclock(in pthread_condattr_t*, clockid_t*);\n+    int pthread_condattr_getclock(const scope pthread_condattr_t*, clockid_t*);\n     int pthread_condattr_setclock(pthread_condattr_t*, clockid_t);\n }\n else version (FreeBSD)\n {\n-    int pthread_condattr_getclock(in pthread_condattr_t*, clockid_t*);\n+    int pthread_condattr_getclock(const scope pthread_condattr_t*, clockid_t*);\n     int pthread_condattr_setclock(pthread_condattr_t*, clockid_t);\n }\n else version (DragonFlyBSD)\n {\n-    int pthread_condattr_getclock(in pthread_condattr_t*, clockid_t*);\n+    int pthread_condattr_getclock(const scope pthread_condattr_t*, clockid_t*);\n     int pthread_condattr_setclock(pthread_condattr_t*, clockid_t);\n }\n else version (NetBSD)\n@@ -909,28 +910,28 @@ else version (NetBSD)\n }\n else version (OpenBSD)\n {\n-    int pthread_condattr_getclock(in pthread_condattr_t*, clockid_t*);\n+    int pthread_condattr_getclock(const scope pthread_condattr_t*, clockid_t*);\n     int pthread_condattr_setclock(pthread_condattr_t*, clockid_t);\n }\n else version (Darwin)\n {\n }\n else version (Solaris)\n {\n-    int pthread_condattr_getclock(in pthread_condattr_t*, clockid_t*);\n+    int pthread_condattr_getclock(const scope pthread_condattr_t*, clockid_t*);\n     int pthread_condattr_setclock(pthread_condattr_t*, clockid_t);\n }\n else version (CRuntime_Bionic)\n {\n }\n else version (CRuntime_Musl)\n {\n-    int pthread_condattr_getclock(in pthread_condattr_t*, clockid_t*);\n+    int pthread_condattr_getclock(const scope pthread_condattr_t*, clockid_t*);\n     int pthread_condattr_setclock(pthread_condattr_t*, clockid_t);\n }\n else version (CRuntime_UClibc)\n {\n-    int pthread_condattr_getclock(in pthread_condattr_t*, clockid_t*);\n+    int pthread_condattr_getclock(const scope pthread_condattr_t*, clockid_t*);\n     int pthread_condattr_setclock(pthread_condattr_t*, clockid_t);\n }\n else\n@@ -1033,10 +1034,10 @@ PTHREAD_MUTEX_ERRORCHECK\n PTHREAD_MUTEX_NORMAL\n PTHREAD_MUTEX_RECURSIVE\n \n-int pthread_attr_getguardsize(in pthread_attr_t*, size_t*);\n+int pthread_attr_getguardsize(const scope pthread_attr_t*, size_t*);\n int pthread_attr_setguardsize(pthread_attr_t*, size_t);\n int pthread_getconcurrency();\n-int pthread_mutexattr_gettype(in pthread_mutexattr_t*, int*);\n+int pthread_mutexattr_gettype(const scope pthread_mutexattr_t*, int*);\n int pthread_mutexattr_settype(pthread_mutexattr_t*, int);\n int pthread_setconcurrency(int);\n */\n@@ -1048,10 +1049,10 @@ version (CRuntime_Glibc)\n     enum PTHREAD_MUTEX_ERRORCHECK   = 2;\n     enum PTHREAD_MUTEX_DEFAULT      = PTHREAD_MUTEX_NORMAL;\n \n-    int pthread_attr_getguardsize(in pthread_attr_t*, size_t*);\n+    int pthread_attr_getguardsize(const scope pthread_attr_t*, size_t*);\n     int pthread_attr_setguardsize(pthread_attr_t*, size_t);\n     int pthread_getconcurrency();\n-    int pthread_mutexattr_gettype(in pthread_mutexattr_t*, int*);\n+    int pthread_mutexattr_gettype(const scope pthread_mutexattr_t*, int*);\n     int pthread_mutexattr_settype(pthread_mutexattr_t*, int) @trusted;\n     int pthread_setconcurrency(int);\n }\n@@ -1062,10 +1063,10 @@ else version (Darwin)\n     enum PTHREAD_MUTEX_RECURSIVE    = 2;\n     enum PTHREAD_MUTEX_DEFAULT      = PTHREAD_MUTEX_NORMAL;\n \n-    int pthread_attr_getguardsize(in pthread_attr_t*, size_t*);\n+    int pthread_attr_getguardsize(const scope pthread_attr_t*, size_t*);\n     int pthread_attr_setguardsize(pthread_attr_t*, size_t);\n     int pthread_getconcurrency();\n-    int pthread_mutexattr_gettype(in pthread_mutexattr_t*, int*);\n+    int pthread_mutexattr_gettype(const scope pthread_mutexattr_t*, int*);\n     int pthread_mutexattr_settype(pthread_mutexattr_t*, int) @trusted;\n     int pthread_setconcurrency(int);\n }\n@@ -1081,7 +1082,7 @@ else version (FreeBSD)\n     }\n     enum PTHREAD_MUTEX_DEFAULT = PTHREAD_MUTEX_ERRORCHECK;\n \n-    int pthread_attr_getguardsize(in pthread_attr_t*, size_t*);\n+    int pthread_attr_getguardsize(const scope pthread_attr_t*, size_t*);\n     int pthread_attr_setguardsize(pthread_attr_t*, size_t);\n     int pthread_getconcurrency();\n     int pthread_mutexattr_gettype(pthread_mutexattr_t*, int*);\n@@ -1099,7 +1100,7 @@ else version (NetBSD)\n     }\n     enum PTHREAD_MUTEX_DEFAULT = PTHREAD_MUTEX_ERRORCHECK;\n \n-    int pthread_attr_getguardsize(in pthread_attr_t*, size_t*);\n+    int pthread_attr_getguardsize(const scope pthread_attr_t*, size_t*);\n     int pthread_attr_setguardsize(pthread_attr_t*, size_t);\n     int pthread_getconcurrency();\n     int pthread_mutexattr_gettype(pthread_mutexattr_t*, int*);\n@@ -1118,7 +1119,7 @@ else version (OpenBSD)\n     }\n     enum PTHREAD_MUTEX_DEFAULT = PTHREAD_MUTEX_ERRORCHECK;\n \n-    int pthread_attr_getguardsize(in pthread_attr_t*, size_t*);\n+    int pthread_attr_getguardsize(const scope pthread_attr_t*, size_t*);\n     int pthread_attr_setguardsize(pthread_attr_t*, size_t);\n     int pthread_getconcurrency();\n     int pthread_mutexattr_gettype(pthread_mutexattr_t*, int*);\n@@ -1136,7 +1137,7 @@ else version (DragonFlyBSD)\n     }\n     enum PTHREAD_MUTEX_DEFAULT = PTHREAD_MUTEX_ERRORCHECK;\n \n-    int pthread_attr_getguardsize(in pthread_attr_t*, size_t*);\n+    int pthread_attr_getguardsize(const scope pthread_attr_t*, size_t*);\n     int pthread_attr_setguardsize(pthread_attr_t*, size_t);\n     int pthread_getconcurrency();\n     int pthread_mutexattr_gettype(pthread_mutexattr_t*, int*);\n@@ -1154,7 +1155,7 @@ else version (Solaris)\n \n     enum PTHREAD_MUTEX_DEFAULT = PTHREAD_MUTEX_NORMAL;\n \n-    int pthread_attr_getguardsize(in pthread_attr_t*, size_t*);\n+    int pthread_attr_getguardsize(const scope pthread_attr_t*, size_t*);\n     int pthread_attr_setguardsize(pthread_attr_t*, size_t);\n     int pthread_getconcurrency();\n     int pthread_mutexattr_gettype(pthread_mutexattr_t*, int*);\n@@ -1168,9 +1169,9 @@ else version (CRuntime_Bionic)\n     enum PTHREAD_MUTEX_ERRORCHECK = 2;\n     enum PTHREAD_MUTEX_DEFAULT    = PTHREAD_MUTEX_NORMAL;\n \n-    int pthread_attr_getguardsize(in pthread_attr_t*, size_t*);\n+    int pthread_attr_getguardsize(const scope pthread_attr_t*, size_t*);\n     int pthread_attr_setguardsize(pthread_attr_t*, size_t);\n-    int pthread_mutexattr_gettype(in pthread_mutexattr_t*, int*);\n+    int pthread_mutexattr_gettype(const scope pthread_mutexattr_t*, int*);\n     int pthread_mutexattr_settype(pthread_mutexattr_t*, int) @trusted;\n }\n else version (CRuntime_Musl)\n@@ -1198,10 +1199,10 @@ else version (CRuntime_UClibc)\n       PTHREAD_MUTEX_FAST_NP = PTHREAD_MUTEX_TIMED_NP\n     }\n \n-    int pthread_attr_getguardsize(in pthread_attr_t*, size_t*);\n+    int pthread_attr_getguardsize(const scope pthread_attr_t*, size_t*);\n     int pthread_attr_setguardsize(pthread_attr_t*, size_t);\n     int pthread_getconcurrency();\n-    int pthread_mutexattr_gettype(in pthread_mutexattr_t*, int*);\n+    int pthread_mutexattr_gettype(const scope pthread_mutexattr_t*, int*);\n     int pthread_mutexattr_settype(pthread_mutexattr_t*, int) @trusted;\n     int pthread_setconcurrency(int);\n }\n@@ -1263,69 +1264,69 @@ else\n // Timeouts (TMO)\n //\n /*\n-int pthread_mutex_timedlock(pthread_mutex_t*, in timespec*);\n-int pthread_rwlock_timedrdlock(pthread_rwlock_t*, in timespec*);\n-int pthread_rwlock_timedwrlock(pthread_rwlock_t*, in timespec*);\n+int pthread_mutex_timedlock(pthread_mutex_t*, const scope timespec*);\n+int pthread_rwlock_timedrdlock(pthread_rwlock_t*, const scope timespec*);\n+int pthread_rwlock_timedwrlock(pthread_rwlock_t*, const scope timespec*);\n */\n \n version (CRuntime_Glibc)\n {\n-    int pthread_mutex_timedlock(pthread_mutex_t*, in timespec*);\n-    int pthread_rwlock_timedrdlock(pthread_rwlock_t*, in timespec*);\n-    int pthread_rwlock_timedwrlock(pthread_rwlock_t*, in timespec*);\n+    int pthread_mutex_timedlock(pthread_mutex_t*, const scope timespec*);\n+    int pthread_rwlock_timedrdlock(pthread_rwlock_t*, const scope timespec*);\n+    int pthread_rwlock_timedwrlock(pthread_rwlock_t*, const scope timespec*);\n }\n else version (Darwin)\n {\n-    int pthread_mutex_timedlock(pthread_mutex_t*, in timespec*);\n-    int pthread_rwlock_timedrdlock(pthread_rwlock_t*, in timespec*);\n-    int pthread_rwlock_timedwrlock(pthread_rwlock_t*, in timespec*);\n+    int pthread_mutex_timedlock(pthread_mutex_t*, const scope timespec*);\n+    int pthread_rwlock_timedrdlock(pthread_rwlock_t*, const scope timespec*);\n+    int pthread_rwlock_timedwrlock(pthread_rwlock_t*, const scope timespec*);\n }\n else version (FreeBSD)\n {\n-    int pthread_mutex_timedlock(pthread_mutex_t*, in timespec*);\n-    int pthread_rwlock_timedrdlock(pthread_rwlock_t*, in timespec*);\n-    int pthread_rwlock_timedwrlock(pthread_rwlock_t*, in timespec*);\n+    int pthread_mutex_timedlock(pthread_mutex_t*, const scope timespec*);\n+    int pthread_rwlock_timedrdlock(pthread_rwlock_t*, const scope timespec*);\n+    int pthread_rwlock_timedwrlock(pthread_rwlock_t*, const scope timespec*);\n }\n else version (NetBSD)\n {\n-    int pthread_mutex_timedlock(pthread_mutex_t*, in timespec*);\n-    int pthread_rwlock_timedrdlock(pthread_rwlock_t*, in timespec*);\n-    int pthread_rwlock_timedwrlock(pthread_rwlock_t*, in timespec*);\n+    int pthread_mutex_timedlock(pthread_mutex_t*, const scope timespec*);\n+    int pthread_rwlock_timedrdlock(pthread_rwlock_t*, const scope timespec*);\n+    int pthread_rwlock_timedwrlock(pthread_rwlock_t*, const scope timespec*);\n }\n else version (OpenBSD)\n {\n-    int pthread_mutex_timedlock(pthread_mutex_t*, in timespec*);\n-    int pthread_rwlock_timedrdlock(pthread_rwlock_t*, in timespec*);\n-    int pthread_rwlock_timedwrlock(pthread_rwlock_t*, in timespec*);\n+    int pthread_mutex_timedlock(pthread_mutex_t*, const scope timespec*);\n+    int pthread_rwlock_timedrdlock(pthread_rwlock_t*, const scope timespec*);\n+    int pthread_rwlock_timedwrlock(pthread_rwlock_t*, const scope timespec*);\n }\n else version (DragonFlyBSD)\n {\n-    int pthread_mutex_timedlock(pthread_mutex_t*, in timespec*);\n-    int pthread_rwlock_timedrdlock(pthread_rwlock_t*, in timespec*);\n-    int pthread_rwlock_timedwrlock(pthread_rwlock_t*, in timespec*);\n+    int pthread_mutex_timedlock(pthread_mutex_t*, const scope timespec*);\n+    int pthread_rwlock_timedrdlock(pthread_rwlock_t*, const scope timespec*);\n+    int pthread_rwlock_timedwrlock(pthread_rwlock_t*, const scope timespec*);\n }\n else version (Solaris)\n {\n-    int pthread_mutex_timedlock(pthread_mutex_t*, in timespec*);\n-    int pthread_rwlock_timedrdlock(pthread_rwlock_t*, in timespec*);\n-    int pthread_rwlock_timedwrlock(pthread_rwlock_t*, in timespec*);\n+    int pthread_mutex_timedlock(pthread_mutex_t*, const scope timespec*);\n+    int pthread_rwlock_timedrdlock(pthread_rwlock_t*, const scope timespec*);\n+    int pthread_rwlock_timedwrlock(pthread_rwlock_t*, const scope timespec*);\n }\n else version (CRuntime_Bionic)\n {\n-    int pthread_rwlock_timedrdlock(pthread_rwlock_t*, in timespec*);\n-    int pthread_rwlock_timedwrlock(pthread_rwlock_t*, in timespec*);\n+    int pthread_rwlock_timedrdlock(pthread_rwlock_t*, const scope timespec*);\n+    int pthread_rwlock_timedwrlock(pthread_rwlock_t*, const scope timespec*);\n }\n else version (CRuntime_Musl)\n {\n-    int pthread_mutex_timedlock(pthread_mutex_t*, in timespec*);\n-    int pthread_rwlock_timedrdlock(pthread_rwlock_t*, in timespec*);\n-    int pthread_rwlock_timedwrlock(pthread_rwlock_t*, in timespec*);\n+    int pthread_mutex_timedlock(pthread_mutex_t*, const scope timespec*);\n+    int pthread_rwlock_timedrdlock(pthread_rwlock_t*, const scope timespec*);\n+    int pthread_rwlock_timedwrlock(pthread_rwlock_t*, const scope timespec*);\n }\n else version (CRuntime_UClibc)\n {\n-    int pthread_mutex_timedlock(pthread_mutex_t*, in timespec*);\n-    int pthread_rwlock_timedrdlock(pthread_rwlock_t*, in timespec*);\n-    int pthread_rwlock_timedwrlock(pthread_rwlock_t*, in timespec*);\n+    int pthread_mutex_timedlock(pthread_mutex_t*, const scope timespec*);\n+    int pthread_rwlock_timedrdlock(pthread_rwlock_t*, const scope timespec*);\n+    int pthread_rwlock_timedwrlock(pthread_rwlock_t*, const scope timespec*);\n }\n else\n {\n@@ -1340,10 +1341,10 @@ PTHREAD_PRIO_INHERIT (TPI)\n PTHREAD_PRIO_NONE (TPP|TPI)\n PTHREAD_PRIO_PROTECT (TPI)\n \n-int pthread_mutex_getprioceiling(in pthread_mutex_t*, int*); (TPP)\n+int pthread_mutex_getprioceiling(const scope pthread_mutex_t*, int*); (TPP)\n int pthread_mutex_setprioceiling(pthread_mutex_t*, int, int*); (TPP)\n int pthread_mutexattr_getprioceiling(pthread_mutexattr_t*, int*); (TPP)\n-int pthread_mutexattr_getprotocol(in pthread_mutexattr_t*, int*); (TPI|TPP)\n+int pthread_mutexattr_getprotocol(const scope pthread_mutexattr_t*, int*); (TPI|TPP)\n int pthread_mutexattr_setprioceiling(pthread_mutexattr_t*, int); (TPP)\n int pthread_mutexattr_setprotocol(pthread_mutexattr_t*, int); (TPI|TPP)\n */\n@@ -1356,10 +1357,10 @@ version (Darwin)\n         PTHREAD_PRIO_PROTECT\n     }\n \n-    int pthread_mutex_getprioceiling(in pthread_mutex_t*, int*);\n+    int pthread_mutex_getprioceiling(const scope pthread_mutex_t*, int*);\n     int pthread_mutex_setprioceiling(pthread_mutex_t*, int, int*);\n-    int pthread_mutexattr_getprioceiling(in pthread_mutexattr_t*, int*);\n-    int pthread_mutexattr_getprotocol(in pthread_mutexattr_t*, int*);\n+    int pthread_mutexattr_getprioceiling(const scope pthread_mutexattr_t*, int*);\n+    int pthread_mutexattr_getprotocol(const scope pthread_mutexattr_t*, int*);\n     int pthread_mutexattr_setprioceiling(pthread_mutexattr_t*, int);\n     int pthread_mutexattr_setprotocol(pthread_mutexattr_t*, int);\n }\n@@ -1372,10 +1373,10 @@ else version (Solaris)\n         PTHREAD_PRIO_PROTECT = 0x20,\n     }\n \n-    int pthread_mutex_getprioceiling(in pthread_mutex_t*, int*);\n+    int pthread_mutex_getprioceiling(const scope pthread_mutex_t*, int*);\n     int pthread_mutex_setprioceiling(pthread_mutex_t*, int, int*);\n-    int pthread_mutexattr_getprioceiling(in pthread_mutexattr_t*, int*);\n-    int pthread_mutexattr_getprotocol(in pthread_mutexattr_t*, int*);\n+    int pthread_mutexattr_getprioceiling(const scope pthread_mutexattr_t*, int*);\n+    int pthread_mutexattr_getprotocol(const scope pthread_mutexattr_t*, int*);\n     int pthread_mutexattr_setprioceiling(pthread_mutexattr_t*, int);\n     int pthread_mutexattr_setprotocol(pthread_mutexattr_t*, int);\n }\n@@ -1387,14 +1388,14 @@ else version (Solaris)\n PTHREAD_SCOPE_PROCESS\n PTHREAD_SCOPE_SYSTEM\n \n-int pthread_attr_getinheritsched(in pthread_attr_t*, int*);\n-int pthread_attr_getschedpolicy(in pthread_attr_t*, int*);\n-int pthread_attr_getscope(in pthread_attr_t*, int*);\n+int pthread_attr_getinheritsched(const scope pthread_attr_t*, int*);\n+int pthread_attr_getschedpolicy(const scope pthread_attr_t*, int*);\n+int pthread_attr_getscope(const scope pthread_attr_t*, int*);\n int pthread_attr_setinheritsched(pthread_attr_t*, int);\n int pthread_attr_setschedpolicy(pthread_attr_t*, int);\n int pthread_attr_setscope(pthread_attr_t*, int);\n int pthread_getschedparam(pthread_t, int*, sched_param*);\n-int pthread_setschedparam(pthread_t, int, in sched_param*);\n+int pthread_setschedparam(pthread_t, int, const scope sched_param*);\n int pthread_setschedprio(pthread_t, int);\n */\n \n@@ -1406,14 +1407,14 @@ version (CRuntime_Glibc)\n         PTHREAD_SCOPE_PROCESS\n     }\n \n-    int pthread_attr_getinheritsched(in pthread_attr_t*, int*);\n-    int pthread_attr_getschedpolicy(in pthread_attr_t*, int*);\n-    int pthread_attr_getscope(in pthread_attr_t*, int*);\n+    int pthread_attr_getinheritsched(const scope pthread_attr_t*, int*);\n+    int pthread_attr_getschedpolicy(const scope pthread_attr_t*, int*);\n+    int pthread_attr_getscope(const scope pthread_attr_t*, int*);\n     int pthread_attr_setinheritsched(pthread_attr_t*, int);\n     int pthread_attr_setschedpolicy(pthread_attr_t*, int);\n     int pthread_attr_setscope(pthread_attr_t*, int);\n     int pthread_getschedparam(pthread_t, int*, sched_param*);\n-    int pthread_setschedparam(pthread_t, int, in sched_param*);\n+    int pthread_setschedparam(pthread_t, int, const scope sched_param*);\n     int pthread_setschedprio(pthread_t, int);\n }\n else version (Darwin)\n@@ -1424,14 +1425,14 @@ else version (Darwin)\n         PTHREAD_SCOPE_PROCESS   = 2\n     }\n \n-    int pthread_attr_getinheritsched(in pthread_attr_t*, int*);\n-    int pthread_attr_getschedpolicy(in pthread_attr_t*, int*);\n-    int pthread_attr_getscope(in pthread_attr_t*, int*);\n+    int pthread_attr_getinheritsched(const scope pthread_attr_t*, int*);\n+    int pthread_attr_getschedpolicy(const scope pthread_attr_t*, int*);\n+    int pthread_attr_getscope(const scope pthread_attr_t*, int*);\n     int pthread_attr_setinheritsched(pthread_attr_t*, int);\n     int pthread_attr_setschedpolicy(pthread_attr_t*, int);\n     int pthread_attr_setscope(pthread_attr_t*, int);\n     int pthread_getschedparam(pthread_t, int*, sched_param*);\n-    int pthread_setschedparam(pthread_t, int, in sched_param*);\n+    int pthread_setschedparam(pthread_t, int, const scope sched_param*);\n     // int pthread_setschedprio(pthread_t, int); // not implemented\n }\n else version (FreeBSD)\n@@ -1442,12 +1443,12 @@ else version (FreeBSD)\n         PTHREAD_SCOPE_SYSTEM    = 0x2\n     }\n \n-    int pthread_attr_getinheritsched(in pthread_attr_t*, int*);\n-    int pthread_attr_getschedpolicy(in pthread_attr_t*, int*);\n-    int pthread_attr_getscope(in pthread_attr_t*, int*);\n+    int pthread_attr_getinheritsched(const scope pthread_attr_t*, int*);\n+    int pthread_attr_getschedpolicy(const scope pthread_attr_t*, int*);\n+    int pthread_attr_getscope(const scope pthread_attr_t*, int*);\n     int pthread_attr_setinheritsched(pthread_attr_t*, int);\n     int pthread_attr_setschedpolicy(pthread_attr_t*, int);\n-    int pthread_attr_setscope(in pthread_attr_t*, int);\n+    int pthread_attr_setscope(const scope pthread_attr_t*, int);\n     int pthread_getschedparam(pthread_t, int*, sched_param*);\n     int pthread_setschedparam(pthread_t, int, sched_param*);\n     // int pthread_setschedprio(pthread_t, int); // not implemented\n@@ -1460,12 +1461,12 @@ else version (NetBSD)\n         PTHREAD_SCOPE_SYSTEM    = 0x1\n     }\n \n-    int pthread_attr_getinheritsched(in pthread_attr_t*, int*);\n-    int pthread_attr_getschedpolicy(in pthread_attr_t*, int*);\n-    int pthread_attr_getscope(in pthread_attr_t*, int*);\n+    int pthread_attr_getinheritsched(const scope pthread_attr_t*, int*);\n+    int pthread_attr_getschedpolicy(const scope pthread_attr_t*, int*);\n+    int pthread_attr_getscope(const scope pthread_attr_t*, int*);\n     int pthread_attr_setinheritsched(pthread_attr_t*, int);\n     int pthread_attr_setschedpolicy(pthread_attr_t*, int);\n-    int pthread_attr_setscope(in pthread_attr_t*, int);\n+    int pthread_attr_setscope(const scope pthread_attr_t*, int);\n     int pthread_getschedparam(pthread_t, int*, sched_param*);\n     int pthread_setschedparam(pthread_t, int, sched_param*);\n     //int pthread_setschedprio(pthread_t, int);\n@@ -1478,12 +1479,12 @@ else version (OpenBSD)\n         PTHREAD_SCOPE_SYSTEM    = 0x2\n     }\n \n-    int pthread_attr_getinheritsched(in pthread_attr_t*, int*);\n-    int pthread_attr_getschedpolicy(in pthread_attr_t*, int*);\n-    int pthread_attr_getscope(in pthread_attr_t*, int*);\n+    int pthread_attr_getinheritsched(const scope pthread_attr_t*, int*);\n+    int pthread_attr_getschedpolicy(const scope pthread_attr_t*, int*);\n+    int pthread_attr_getscope(const scope pthread_attr_t*, int*);\n     int pthread_attr_setinheritsched(pthread_attr_t*, int);\n     int pthread_attr_setschedpolicy(pthread_attr_t*, int);\n-    int pthread_attr_setscope(in pthread_attr_t*, int);\n+    int pthread_attr_setscope(const scope pthread_attr_t*, int);\n     int pthread_getschedparam(pthread_t, int*, sched_param*);\n     int pthread_setschedparam(pthread_t, int, sched_param*);\n     // int pthread_setschedprio(pthread_t, int); // not implemented\n@@ -1496,12 +1497,12 @@ else version (DragonFlyBSD)\n         PTHREAD_SCOPE_SYSTEM    = 0x2\n     }\n \n-    int pthread_attr_getinheritsched(in pthread_attr_t*, int*);\n-    int pthread_attr_getschedpolicy(in pthread_attr_t*, int*);\n-    int pthread_attr_getscope(in pthread_attr_t*, int*);\n+    int pthread_attr_getinheritsched(const scope pthread_attr_t*, int*);\n+    int pthread_attr_getschedpolicy(const scope pthread_attr_t*, int*);\n+    int pthread_attr_getscope(const scope pthread_attr_t*, int*);\n     int pthread_attr_setinheritsched(pthread_attr_t*, int);\n     int pthread_attr_setschedpolicy(pthread_attr_t*, int);\n-    int pthread_attr_setscope(in pthread_attr_t*, int);\n+    int pthread_attr_setscope(const scope pthread_attr_t*, int);\n     int pthread_getschedparam(pthread_t, int*, sched_param*);\n     int pthread_setschedparam(pthread_t, int, sched_param*);\n }\n@@ -1513,12 +1514,12 @@ else version (Solaris)\n         PTHREAD_SCOPE_SYSTEM = 1,\n     }\n \n-    int pthread_attr_getinheritsched(in pthread_attr_t*, int*);\n-    int pthread_attr_getschedpolicy(in pthread_attr_t*, int*);\n-    int pthread_attr_getscope(in pthread_attr_t*, int*);\n+    int pthread_attr_getinheritsched(const scope pthread_attr_t*, int*);\n+    int pthread_attr_getschedpolicy(const scope pthread_attr_t*, int*);\n+    int pthread_attr_getscope(const scope pthread_attr_t*, int*);\n     int pthread_attr_setinheritsched(pthread_attr_t*, int);\n     int pthread_attr_setschedpolicy(pthread_attr_t*, int);\n-    int pthread_attr_setscope(in pthread_attr_t*, int);\n+    int pthread_attr_setscope(const scope pthread_attr_t*, int);\n     int pthread_getschedparam(pthread_t, int*, sched_param*);\n     int pthread_setschedparam(pthread_t, int, sched_param*);\n     int pthread_setschedprio(pthread_t, int);\n@@ -1531,12 +1532,12 @@ else version (CRuntime_Bionic)\n         PTHREAD_SCOPE_PROCESS\n     }\n \n-    int pthread_attr_getschedpolicy(in pthread_attr_t*, int*);\n-    int pthread_attr_getscope(in pthread_attr_t*);\n+    int pthread_attr_getschedpolicy(const scope pthread_attr_t*, int*);\n+    int pthread_attr_getscope(const scope pthread_attr_t*);\n     int pthread_attr_setschedpolicy(pthread_attr_t*, int);\n     int pthread_attr_setscope(pthread_attr_t*, int);\n     int pthread_getschedparam(pthread_t, int*, sched_param*);\n-    int pthread_setschedparam(pthread_t, int, in sched_param*);\n+    int pthread_setschedparam(pthread_t, int, const scope sched_param*);\n }\n else version (CRuntime_Musl)\n {\n@@ -1547,7 +1548,7 @@ else version (CRuntime_Musl)\n     }\n \n     int pthread_getschedparam(pthread_t, int*, sched_param*);\n-    int pthread_setschedparam(pthread_t, int, in sched_param*);\n+    int pthread_setschedparam(pthread_t, int, const scope sched_param*);\n     int pthread_setschedprio(pthread_t, int);\n }\n else version (CRuntime_UClibc)\n@@ -1558,14 +1559,14 @@ else version (CRuntime_UClibc)\n         PTHREAD_SCOPE_PROCESS\n     }\n \n-    int pthread_attr_getinheritsched(in pthread_attr_t*, int*);\n-    int pthread_attr_getschedpolicy(in pthread_attr_t*, int*);\n-    int pthread_attr_getscope(in pthread_attr_t*, int*);\n+    int pthread_attr_getinheritsched(const scope pthread_attr_t*, int*);\n+    int pthread_attr_getschedpolicy(const scope pthread_attr_t*, int*);\n+    int pthread_attr_getscope(const scope pthread_attr_t*, int*);\n     int pthread_attr_setinheritsched(pthread_attr_t*, int);\n     int pthread_attr_setschedpolicy(pthread_attr_t*, int);\n     int pthread_attr_setscope(pthread_attr_t*, int);\n     int pthread_getschedparam(pthread_t, int*, sched_param*);\n-    int pthread_setschedparam(pthread_t, int, in sched_param*);\n+    int pthread_setschedparam(pthread_t, int, const scope sched_param*);\n     int pthread_setschedprio(pthread_t, int);\n }\n else\n@@ -1577,96 +1578,96 @@ else\n // Stack (TSA|TSS)\n //\n /*\n-int pthread_attr_getstack(in pthread_attr_t*, void**, size_t*); (TSA|TSS)\n-int pthread_attr_getstackaddr(in pthread_attr_t*, void**); (TSA)\n-int pthread_attr_getstacksize(in pthread_attr_t*, size_t*); (TSS)\n+int pthread_attr_getstack(const scope pthread_attr_t*, void**, size_t*); (TSA|TSS)\n+int pthread_attr_getstackaddr(const scope pthread_attr_t*, void**); (TSA)\n+int pthread_attr_getstacksize(const scope pthread_attr_t*, size_t*); (TSS)\n int pthread_attr_setstack(pthread_attr_t*, void*, size_t); (TSA|TSS)\n int pthread_attr_setstackaddr(pthread_attr_t*, void*); (TSA)\n int pthread_attr_setstacksize(pthread_attr_t*, size_t); (TSS)\n */\n \n version (CRuntime_Glibc)\n {\n-    int pthread_attr_getstack(in pthread_attr_t*, void**, size_t*);\n-    int pthread_attr_getstackaddr(in pthread_attr_t*, void**);\n-    int pthread_attr_getstacksize(in pthread_attr_t*, size_t*);\n+    int pthread_attr_getstack(const scope pthread_attr_t*, void**, size_t*);\n+    int pthread_attr_getstackaddr(const scope pthread_attr_t*, void**);\n+    int pthread_attr_getstacksize(const scope pthread_attr_t*, size_t*);\n     int pthread_attr_setstack(pthread_attr_t*, void*, size_t);\n     int pthread_attr_setstackaddr(pthread_attr_t*, void*);\n     int pthread_attr_setstacksize(pthread_attr_t*, size_t);\n }\n else version (Darwin)\n {\n-    int pthread_attr_getstack(in pthread_attr_t*, void**, size_t*);\n-    int pthread_attr_getstackaddr(in pthread_attr_t*, void**);\n-    int pthread_attr_getstacksize(in pthread_attr_t*, size_t*);\n+    int pthread_attr_getstack(const scope pthread_attr_t*, void**, size_t*);\n+    int pthread_attr_getstackaddr(const scope pthread_attr_t*, void**);\n+    int pthread_attr_getstacksize(const scope pthread_attr_t*, size_t*);\n     int pthread_attr_setstack(pthread_attr_t*, void*, size_t);\n     int pthread_attr_setstackaddr(pthread_attr_t*, void*);\n     int pthread_attr_setstacksize(pthread_attr_t*, size_t);\n }\n else version (FreeBSD)\n {\n-    int pthread_attr_getstack(in pthread_attr_t*, void**, size_t*);\n-    int pthread_attr_getstackaddr(in pthread_attr_t*, void**);\n-    int pthread_attr_getstacksize(in pthread_attr_t*, size_t*);\n+    int pthread_attr_getstack(const scope pthread_attr_t*, void**, size_t*);\n+    int pthread_attr_getstackaddr(const scope pthread_attr_t*, void**);\n+    int pthread_attr_getstacksize(const scope pthread_attr_t*, size_t*);\n     int pthread_attr_setstack(pthread_attr_t*, void*, size_t);\n     int pthread_attr_setstackaddr(pthread_attr_t*, void*);\n     int pthread_attr_setstacksize(pthread_attr_t*, size_t);\n }\n else version (NetBSD)\n {\n-    int pthread_attr_getstack(in pthread_attr_t*, void**, size_t*);\n-    int pthread_attr_getstackaddr(in pthread_attr_t*, void**);\n-    int pthread_attr_getstacksize(in pthread_attr_t*, size_t*);\n+    int pthread_attr_getstack(const scope pthread_attr_t*, void**, size_t*);\n+    int pthread_attr_getstackaddr(const scope pthread_attr_t*, void**);\n+    int pthread_attr_getstacksize(const scope pthread_attr_t*, size_t*);\n     int pthread_attr_setstack(pthread_attr_t*, void*, size_t);\n     int pthread_attr_setstackaddr(pthread_attr_t*, void*);\n     int pthread_attr_setstacksize(pthread_attr_t*, size_t);\n }\n else version (OpenBSD)\n {\n-    int pthread_attr_getstack(in pthread_attr_t*, void**, size_t*);\n-    int pthread_attr_getstackaddr(in pthread_attr_t*, void**);\n-    int pthread_attr_getstacksize(in pthread_attr_t*, size_t*);\n+    int pthread_attr_getstack(const scope pthread_attr_t*, void**, size_t*);\n+    int pthread_attr_getstackaddr(const scope pthread_attr_t*, void**);\n+    int pthread_attr_getstacksize(const scope pthread_attr_t*, size_t*);\n     int pthread_attr_setstack(pthread_attr_t*, void*, size_t);\n     int pthread_attr_setstackaddr(pthread_attr_t*, void*);\n     int pthread_attr_setstacksize(pthread_attr_t*, size_t);\n }\n else version (DragonFlyBSD)\n {\n-    int pthread_attr_getstack(in pthread_attr_t*, void**, size_t*);\n-    int pthread_attr_getstackaddr(in pthread_attr_t*, void**);\n-    int pthread_attr_getstacksize(in pthread_attr_t*, size_t*);\n+    int pthread_attr_getstack(const scope pthread_attr_t*, void**, size_t*);\n+    int pthread_attr_getstackaddr(const scope pthread_attr_t*, void**);\n+    int pthread_attr_getstacksize(const scope pthread_attr_t*, size_t*);\n     int pthread_attr_setstack(pthread_attr_t*, void*, size_t);\n     int pthread_attr_setstackaddr(pthread_attr_t*, void*);\n     int pthread_attr_setstacksize(pthread_attr_t*, size_t);\n }\n else version (Solaris)\n {\n-    int pthread_attr_getstack(in pthread_attr_t*, void**, size_t*);\n-    int pthread_attr_getstackaddr(in pthread_attr_t*, void**);\n-    int pthread_attr_getstacksize(in pthread_attr_t*, size_t*);\n+    int pthread_attr_getstack(const scope pthread_attr_t*, void**, size_t*);\n+    int pthread_attr_getstackaddr(const scope pthread_attr_t*, void**);\n+    int pthread_attr_getstacksize(const scope pthread_attr_t*, size_t*);\n     int pthread_attr_setstack(pthread_attr_t*, void*, size_t);\n     int pthread_attr_setstackaddr(pthread_attr_t*, void*);\n     int pthread_attr_setstacksize(pthread_attr_t*, size_t);\n }\n else version (CRuntime_Bionic)\n {\n-    int pthread_attr_getstack(in pthread_attr_t*, void**, size_t*);\n-    int pthread_attr_getstackaddr(in pthread_attr_t*, void**);\n-    int pthread_attr_getstacksize(in pthread_attr_t*, size_t*);\n+    int pthread_attr_getstack(const scope pthread_attr_t*, void**, size_t*);\n+    int pthread_attr_getstackaddr(const scope pthread_attr_t*, void**);\n+    int pthread_attr_getstacksize(const scope pthread_attr_t*, size_t*);\n     int pthread_attr_setstack(pthread_attr_t*, void*, size_t);\n     int pthread_attr_setstackaddr(pthread_attr_t*, void*);\n     int pthread_attr_setstacksize(pthread_attr_t*, size_t);\n }\n else version (CRuntime_Musl)\n {\n-    int pthread_attr_getstack(in pthread_attr_t*, void**, size_t*);\n+    int pthread_attr_getstack(const scope pthread_attr_t*, void**, size_t*);\n     int pthread_attr_setstacksize(pthread_attr_t*, size_t);\n }\n else version (CRuntime_UClibc)\n {\n-    int pthread_attr_getstack(in pthread_attr_t*, void**, size_t*);\n-    int pthread_attr_getstackaddr(in pthread_attr_t*, void**);\n-    int pthread_attr_getstacksize(in pthread_attr_t*, size_t*);\n+    int pthread_attr_getstack(const scope pthread_attr_t*, void**, size_t*);\n+    int pthread_attr_getstackaddr(const scope pthread_attr_t*, void**);\n+    int pthread_attr_getstacksize(const scope pthread_attr_t*, size_t*);\n     int pthread_attr_setstack(pthread_attr_t*, void*, size_t);\n     int pthread_attr_setstackaddr(pthread_attr_t*, void*);\n     int pthread_attr_setstacksize(pthread_attr_t*, size_t);\n@@ -1680,69 +1681,69 @@ else\n // Shared Synchronization (TSH)\n //\n /*\n-int pthread_condattr_getpshared(in pthread_condattr_t*, int*);\n+int pthread_condattr_getpshared(const scope pthread_condattr_t*, int*);\n int pthread_condattr_setpshared(pthread_condattr_t*, int);\n-int pthread_mutexattr_getpshared(in pthread_mutexattr_t*, int*);\n+int pthread_mutexattr_getpshared(const scope pthread_mutexattr_t*, int*);\n int pthread_mutexattr_setpshared(pthread_mutexattr_t*, int);\n-int pthread_rwlockattr_getpshared(in pthread_rwlockattr_t*, int*);\n+int pthread_rwlockattr_getpshared(const scope pthread_rwlockattr_t*, int*);\n int pthread_rwlockattr_setpshared(pthread_rwlockattr_t*, int);\n */\n \n version (CRuntime_Glibc)\n {\n-    int pthread_condattr_getpshared(in pthread_condattr_t*, int*);\n+    int pthread_condattr_getpshared(const scope pthread_condattr_t*, int*);\n     int pthread_condattr_setpshared(pthread_condattr_t*, int);\n-    int pthread_mutexattr_getpshared(in pthread_mutexattr_t*, int*);\n+    int pthread_mutexattr_getpshared(const scope pthread_mutexattr_t*, int*);\n     int pthread_mutexattr_setpshared(pthread_mutexattr_t*, int);\n-    int pthread_rwlockattr_getpshared(in pthread_rwlockattr_t*, int*);\n+    int pthread_rwlockattr_getpshared(const scope pthread_rwlockattr_t*, int*);\n     int pthread_rwlockattr_setpshared(pthread_rwlockattr_t*, int);\n }\n else version (FreeBSD)\n {\n-    int pthread_condattr_getpshared(in pthread_condattr_t*, int*);\n+    int pthread_condattr_getpshared(const scope pthread_condattr_t*, int*);\n     int pthread_condattr_setpshared(pthread_condattr_t*, int);\n-    int pthread_mutexattr_getpshared(in pthread_mutexattr_t*, int*);\n+    int pthread_mutexattr_getpshared(const scope pthread_mutexattr_t*, int*);\n     int pthread_mutexattr_setpshared(pthread_mutexattr_t*, int);\n-    int pthread_rwlockattr_getpshared(in pthread_rwlockattr_t*, int*);\n+    int pthread_rwlockattr_getpshared(const scope pthread_rwlockattr_t*, int*);\n     int pthread_rwlockattr_setpshared(pthread_rwlockattr_t*, int);\n }\n else version (NetBSD)\n {\n-    int pthread_condattr_getpshared(in pthread_condattr_t*, int*);\n+    int pthread_condattr_getpshared(const scope pthread_condattr_t*, int*);\n     int pthread_condattr_setpshared(pthread_condattr_t*, int);\n-    int pthread_mutexattr_getpshared(in pthread_mutexattr_t*, int*);\n+    int pthread_mutexattr_getpshared(const scope pthread_mutexattr_t*, int*);\n     int pthread_mutexattr_setpshared(pthread_mutexattr_t*, int);\n-    int pthread_rwlockattr_getpshared(in pthread_rwlockattr_t*, int*);\n+    int pthread_rwlockattr_getpshared(const scope pthread_rwlockattr_t*, int*);\n     int pthread_rwlockattr_setpshared(pthread_rwlockattr_t*, int);\n }\n else version (OpenBSD)\n {\n }\n else version (DragonFlyBSD)\n {\n-    int pthread_condattr_getpshared(in pthread_condattr_t*, int*);\n+    int pthread_condattr_getpshared(const scope pthread_condattr_t*, int*);\n     int pthread_condattr_setpshared(pthread_condattr_t*, int);\n-    int pthread_mutexattr_getpshared(in pthread_mutexattr_t*, int*);\n+    int pthread_mutexattr_getpshared(const scope pthread_mutexattr_t*, int*);\n     int pthread_mutexattr_setpshared(pthread_mutexattr_t*, int);\n-    int pthread_rwlockattr_getpshared(in pthread_rwlockattr_t*, int*);\n+    int pthread_rwlockattr_getpshared(const scope pthread_rwlockattr_t*, int*);\n     int pthread_rwlockattr_setpshared(pthread_rwlockattr_t*, int);\n }\n else version (Darwin)\n {\n-    int pthread_condattr_getpshared(in pthread_condattr_t*, int*);\n+    int pthread_condattr_getpshared(const scope pthread_condattr_t*, int*);\n     int pthread_condattr_setpshared(pthread_condattr_t*, int);\n-    int pthread_mutexattr_getpshared(in pthread_mutexattr_t*, int*);\n+    int pthread_mutexattr_getpshared(const scope pthread_mutexattr_t*, int*);\n     int pthread_mutexattr_setpshared(pthread_mutexattr_t*, int);\n-    int pthread_rwlockattr_getpshared(in pthread_rwlockattr_t*, int*);\n+    int pthread_rwlockattr_getpshared(const scope pthread_rwlockattr_t*, int*);\n     int pthread_rwlockattr_setpshared(pthread_rwlockattr_t*, int);\n }\n else version (Solaris)\n {\n-    int pthread_condattr_getpshared(in pthread_condattr_t*, int*);\n+    int pthread_condattr_getpshared(const scope pthread_condattr_t*, int*);\n     int pthread_condattr_setpshared(pthread_condattr_t*, int);\n-    int pthread_mutexattr_getpshared(in pthread_mutexattr_t*, int*);\n+    int pthread_mutexattr_getpshared(const scope pthread_mutexattr_t*, int*);\n     int pthread_mutexattr_setpshared(pthread_mutexattr_t*, int);\n-    int pthread_rwlockattr_getpshared(in pthread_rwlockattr_t*, int*);\n+    int pthread_rwlockattr_getpshared(const scope pthread_rwlockattr_t*, int*);\n     int pthread_rwlockattr_setpshared(pthread_rwlockattr_t*, int);\n }\n else version (CRuntime_Bionic)\n@@ -1765,11 +1766,11 @@ else version (CRuntime_Musl)\n }\n else version (CRuntime_UClibc)\n {\n-    int pthread_condattr_getpshared(in pthread_condattr_t*, int*);\n+    int pthread_condattr_getpshared(const scope pthread_condattr_t*, int*);\n     int pthread_condattr_setpshared(pthread_condattr_t*, int);\n-    int pthread_mutexattr_getpshared(in pthread_mutexattr_t*, int*);\n+    int pthread_mutexattr_getpshared(const scope pthread_mutexattr_t*, int*);\n     int pthread_mutexattr_setpshared(pthread_mutexattr_t*, int);\n-    int pthread_rwlockattr_getpshared(in pthread_rwlockattr_t*, int*);\n+    int pthread_rwlockattr_getpshared(const scope pthread_rwlockattr_t*, int*);\n     int pthread_rwlockattr_setpshared(pthread_rwlockattr_t*, int);\n }\n else"}, {"sha": "e7ddda79973d8f6d2a6a4d7a4d41ed4416e97d98", "filename": "libphobos/libdruntime/core/sys/posix/pwd.d", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fpwd.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fpwd.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fpwd.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -14,7 +14,7 @@\n  */\n module core.sys.posix.pwd;\n \n-private import core.sys.posix.config;\n+import core.sys.posix.config;\n public import core.sys.posix.sys.types; // for gid_t, uid_t\n \n version (OSX)\n@@ -30,6 +30,7 @@ version (Posix):\n extern (C):\n nothrow:\n @nogc:\n+@system:\n \n //\n // Required\n@@ -44,7 +45,7 @@ struct passwd\n     char*   pw_shell;\n }\n \n-passwd* getpwnam(in char*);\n+passwd* getpwnam(const scope char*);\n passwd* getpwuid(uid_t);\n */\n \n@@ -201,47 +202,47 @@ else\n     static assert(false, \"Unsupported platform\");\n }\n \n-passwd* getpwnam(in char*);\n+passwd* getpwnam(const scope char*);\n passwd* getpwuid(uid_t);\n \n //\n // Thread-Safe Functions (TSF)\n //\n /*\n-int getpwnam_r(in char*, passwd*, char*, size_t, passwd**);\n+int getpwnam_r(const scope char*, passwd*, char*, size_t, passwd**);\n int getpwuid_r(uid_t, passwd*, char*, size_t, passwd**);\n */\n \n version (CRuntime_Glibc)\n {\n-    int getpwnam_r(in char*, passwd*, char*, size_t, passwd**);\n+    int getpwnam_r(const scope char*, passwd*, char*, size_t, passwd**);\n     int getpwuid_r(uid_t, passwd*, char*, size_t, passwd**);\n }\n else version (Darwin)\n {\n-    int getpwnam_r(in char*, passwd*, char*, size_t, passwd**);\n+    int getpwnam_r(const scope char*, passwd*, char*, size_t, passwd**);\n     int getpwuid_r(uid_t, passwd*, char*, size_t, passwd**);\n }\n else version (FreeBSD)\n {\n-    int getpwnam_r(in char*, passwd*, char*, size_t, passwd**);\n+    int getpwnam_r(const scope char*, passwd*, char*, size_t, passwd**);\n     int getpwuid_r(uid_t, passwd*, char*, size_t, passwd**);\n }\n else version (NetBSD)\n {\n-    int __getpwnam_r50(in char*, passwd*, char*, size_t, passwd**);\n+    int __getpwnam_r50(const scope char*, passwd*, char*, size_t, passwd**);\n     alias __getpwnam_r50 getpwnam_r;\n     int __getpwuid_r50(uid_t, passwd*, char*, size_t, passwd**);\n     alias __getpwuid_r50 getpwuid_r;\n }\n else version (OpenBSD)\n {\n-    int getpwnam_r(in char*, passwd*, char*, size_t, passwd**);\n+    int getpwnam_r(const scope char*, passwd*, char*, size_t, passwd**);\n     int getpwuid_r(uid_t, passwd*, char*, size_t, passwd**);\n }\n else version (DragonFlyBSD)\n {\n-    int getpwnam_r(in char*, passwd*, char*, size_t, passwd**);\n+    int getpwnam_r(const scope char*, passwd*, char*, size_t, passwd**);\n     int getpwuid_r(uid_t, passwd*, char*, size_t, passwd**);\n }\n else version (Solaris)\n@@ -250,20 +251,20 @@ else version (Solaris)\n     alias getpwuid_r = __posix_getpwuid_r;\n \n     // POSIX.1c standard version of the functions\n-    int __posix_getpwnam_r(in char*, passwd*, char*, size_t, passwd**);\n+    int __posix_getpwnam_r(const scope char*, passwd*, char*, size_t, passwd**);\n     int __posix_getpwuid_r(uid_t, passwd*, char*, size_t, passwd**);\n }\n else version (CRuntime_Bionic)\n {\n }\n else version (CRuntime_Musl)\n {\n-    int getpwnam_r(in char*, passwd*, char*, size_t, passwd**);\n+    int getpwnam_r(const scope char*, passwd*, char*, size_t, passwd**);\n     int getpwuid_r(uid_t, passwd*, char*, size_t, passwd**);\n }\n else version (CRuntime_UClibc)\n {\n-    int getpwnam_r(in char*, passwd*, char*, size_t, passwd**);\n+    int getpwnam_r(const scope char*, passwd*, char*, size_t, passwd**);\n     int getpwuid_r(uid_t, passwd*, char*, size_t, passwd**);\n }\n else"}, {"sha": "f9d286217fb52c5b49a042c52b9ff4bdc59ee100", "filename": "libphobos/libdruntime/core/sys/posix/sched.d", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsched.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsched.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsched.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -15,7 +15,7 @@\n  */\n module core.sys.posix.sched;\n \n-private import core.sys.posix.config;\n+import core.sys.posix.config;\n public import core.sys.posix.time;\n public import core.sys.posix.sys.types;\n \n@@ -32,6 +32,7 @@ version (Posix):\n extern (C):\n nothrow:\n @nogc:\n+@system:\n \n //\n // Required\n@@ -53,8 +54,8 @@ SCHED_OTHER\n \n int sched_getparam(pid_t, sched_param*);\n int sched_getscheduler(pid_t);\n-int sched_setparam(pid_t, in sched_param*);\n-int sched_setscheduler(pid_t, int, in sched_param*);\n+int sched_setparam(pid_t, const scope sched_param*);\n+int sched_setscheduler(pid_t, int, const scope sched_param*);\n */\n \n version (CRuntime_Glibc)\n@@ -189,8 +190,8 @@ else\n \n int sched_getparam(pid_t, sched_param*);\n int sched_getscheduler(pid_t);\n-int sched_setparam(pid_t, in sched_param*);\n-int sched_setscheduler(pid_t, int, in sched_param*);\n+int sched_setparam(pid_t, const scope sched_param*);\n+int sched_setscheduler(pid_t, int, const scope sched_param*);\n \n //\n // Thread (THR)"}, {"sha": "4f6f63988fff59faa379fe0ff8692c9553762a31", "filename": "libphobos/libdruntime/core/sys/posix/semaphore.d", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsemaphore.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsemaphore.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsemaphore.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -14,8 +14,8 @@\n  */\n module core.sys.posix.semaphore;\n \n-private import core.sys.posix.config;\n-private import core.sys.posix.time;\n+import core.sys.posix.config;\n+import core.sys.posix.time;\n \n version (OSX)\n     version = Darwin;\n@@ -30,6 +30,7 @@ version (Posix):\n extern (C):\n nothrow:\n @nogc:\n+@system:\n \n //\n // Required\n@@ -42,10 +43,10 @@ int sem_close(sem_t*);\n int sem_destroy(sem_t*);\n int sem_getvalue(sem_t*, int*);\n int sem_init(sem_t*, int, uint);\n-sem_t* sem_open(in char*, int, ...);\n+sem_t* sem_open(const scope char*, int, ...);\n int sem_post(sem_t*);\n int sem_trywait(sem_t*);\n-int sem_unlink(in char*);\n+int sem_unlink(const scope char*);\n int sem_wait(sem_t*);\n */\n \n@@ -169,58 +170,58 @@ int sem_close(sem_t*);\n int sem_destroy(sem_t*);\n int sem_getvalue(sem_t*, int*);\n int sem_init(sem_t*, int, uint);\n-sem_t* sem_open(in char*, int, ...);\n+sem_t* sem_open(const scope char*, int, ...);\n int sem_post(sem_t*);\n int sem_trywait(sem_t*);\n-int sem_unlink(in char*);\n+int sem_unlink(const scope char*);\n int sem_wait(sem_t*);\n \n //\n // Timeouts (TMO)\n //\n /*\n-int sem_timedwait(sem_t*, in timespec*);\n+int sem_timedwait(sem_t*, const scope timespec*);\n */\n \n version (CRuntime_Glibc)\n {\n-    int sem_timedwait(sem_t*, in timespec*);\n+    int sem_timedwait(sem_t*, const scope timespec*);\n }\n else version (Darwin)\n {\n-    int sem_timedwait(sem_t*, in timespec*);\n+    int sem_timedwait(sem_t*, const scope timespec*);\n }\n else version (FreeBSD)\n {\n-    int sem_timedwait(sem_t*, in timespec*);\n+    int sem_timedwait(sem_t*, const scope timespec*);\n }\n else version (NetBSD)\n {\n-    int sem_timedwait(sem_t*, in timespec*);\n+    int sem_timedwait(sem_t*, const scope timespec*);\n }\n else version (OpenBSD)\n {\n-    int sem_timedwait(sem_t*, in timespec*);\n+    int sem_timedwait(sem_t*, const scope timespec*);\n }\n else version (DragonFlyBSD)\n {\n-    int sem_timedwait(sem_t*, in timespec*);\n+    int sem_timedwait(sem_t*, const scope timespec*);\n }\n else version (Solaris)\n {\n-    int sem_timedwait(sem_t*, in timespec*);\n+    int sem_timedwait(sem_t*, const scope timespec*);\n }\n else version (CRuntime_Bionic)\n {\n-    int sem_timedwait(sem_t*, in timespec*);\n+    int sem_timedwait(sem_t*, const scope timespec*);\n }\n else version (CRuntime_Musl)\n {\n-    int sem_timedwait(sem_t*, in timespec*);\n+    int sem_timedwait(sem_t*, const scope timespec*);\n }\n else version (CRuntime_UClibc)\n {\n-    int sem_timedwait(sem_t*, in timespec*);\n+    int sem_timedwait(sem_t*, const scope timespec*);\n }\n else\n {"}, {"sha": "b98d321a88335e7f8a4f9b7578106062d87857b3", "filename": "libphobos/libdruntime/core/sys/posix/setjmp.d", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsetjmp.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsetjmp.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsetjmp.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -14,11 +14,12 @@\n  */\n module core.sys.posix.setjmp;\n \n-private import core.sys.posix.config;\n-private import core.sys.posix.signal; // for sigset_t\n+import core.sys.posix.config;\n+import core.sys.posix.signal; // for sigset_t\n \n version (Posix):\n extern (C) nothrow @nogc:\n+@system:\n \n version (RISCV32) version = RISCV_Any;\n version (RISCV64) version = RISCV_Any;\n@@ -151,7 +152,8 @@ version (CRuntime_Glibc)\n             c_long __pc;\n             c_long[12] __regs;\n             c_long __sp;\n-            double[12] __fpregs;\n+            static if (__traits(getTargetInfo, \"floatAbi\") == \"double\")\n+                double[12] __fpregs;\n         }\n         alias __jmp_buf = __riscv_jmp_buf[1];\n     }\n@@ -210,7 +212,7 @@ else version (FreeBSD)\n     {\n         enum _JBLEN = 31;\n         // __int128_t\n-        struct _jmp_buf { long[2][_JBLEN + 1] _jb; };\n+        struct _jmp_buf { long[2][_JBLEN + 1] _jb; }\n     }\n     else version (PPC_Any)\n     {\n@@ -362,7 +364,7 @@ else version (CRuntime_UClibc)\n                 double[8] __fpregs;\n             else\n                 double[6] __fpregs;\n-        };\n+        }\n     }\n     else\n         static assert(0, \"unimplemented\");\n@@ -422,7 +424,7 @@ else version (FreeBSD)\n     else version (AArch64)\n     {\n         // __int128_t\n-        struct _sigjmp_buf { long[2][_JBLEN + 1] _jb; };\n+        struct _sigjmp_buf { long[2][_JBLEN + 1] _jb; }\n     }\n     else version (PPC_Any)\n     {"}, {"sha": "44f45f2e0c31b4cd39de28730795b16914e0f636", "filename": "libphobos/libdruntime/core/sys/posix/signal.d", "status": "modified", "additions": 103, "deletions": 142, "changes": 245, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsignal.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsignal.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsignal.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -11,7 +11,7 @@\n \n module core.sys.posix.signal;\n \n-private import core.sys.posix.config;\n+import core.sys.posix.config;\n public import core.stdc.signal;\n public import core.sys.posix.sys.types; // for pid_t\n //public import core.sys.posix.time;      // for timespec, now defined here\n@@ -43,7 +43,8 @@ version (X86_64)  version = X86_Any;\n \n version (Posix):\n extern (C):\n-//nothrow:  // this causes Issue 12738\n+//nothrow:  // this causes http://issues.dlang.org/show_bug.cgi?id=12738 (which has been fixed)\n+//@system:\n \n //\n // Required\n@@ -150,30 +151,6 @@ version (Solaris)\n         return sig;\n     }\n }\n-else version (CRuntime_Glibc)\n-{\n-    private extern (C) nothrow @nogc\n-    {\n-        int __libc_current_sigrtmin();\n-        int __libc_current_sigrtmax();\n-    }\n-\n-    @property int SIGRTMIN() nothrow @nogc {\n-        __gshared static int sig = -1;\n-        if (sig == -1) {\n-            sig = __libc_current_sigrtmin();\n-        }\n-        return sig;\n-    }\n-\n-    @property int SIGRTMAX() nothrow @nogc {\n-        __gshared static int sig = -1;\n-        if (sig == -1) {\n-            sig = __libc_current_sigrtmax();\n-        }\n-        return sig;\n-    }\n-}\n else version (FreeBSD) {\n     // Note: it appears that FreeBSD (prior to 7) and OSX do not support realtime signals\n     // https://github.com/freebsd/freebsd/blob/e79c62ff68fc74d88cb6f479859f6fae9baa5101/sys/sys/signal.h#L117\n@@ -189,9 +166,11 @@ else version (NetBSD)\n     enum SIGRTMIN = 33;\n     enum SIGRTMAX = 63;\n }\n-else version (CRuntime_Bionic)\n+else version (linux)\n {\n-    // Switched to calling these functions since Lollipop\n+    // Note: CRuntime_Bionic switched to calling these functions\n+    // since Lollipop, and Glibc, UClib and Musl all implement them\n+    // the same way since it's part of LSB.\n     private extern (C) nothrow @nogc\n     {\n         int __libc_current_sigrtmin();\n@@ -214,24 +193,6 @@ else version (CRuntime_Bionic)\n         return sig;\n     }\n }\n-else version (CRuntime_UClibc)\n-{\n-    private extern (C) nothrow @nogc\n-    {\n-        int __libc_current_sigrtmin();\n-        int __libc_current_sigrtmax();\n-    }\n-\n-    @property int SIGRTMIN() nothrow @nogc\n-    {\n-        return __libc_current_sigrtmin();\n-    }\n-\n-    @property int SIGRTMAX() nothrow @nogc\n-    {\n-        return __libc_current_sigrtmax();\n-    }\n-}\n \n version (linux)\n {\n@@ -874,16 +835,16 @@ SI_ASYNCIO\n SI_MESGQ\n \n int kill(pid_t, int);\n-int sigaction(int, in sigaction_t*, sigaction_t*);\n+int sigaction(int, const scope sigaction_t*, sigaction_t*);\n int sigaddset(sigset_t*, int);\n int sigdelset(sigset_t*, int);\n int sigemptyset(sigset_t*);\n int sigfillset(sigset_t*);\n-int sigismember(in sigset_t*, int);\n+int sigismember(const scope sigset_t*, int);\n int sigpending(sigset_t*);\n-int sigprocmask(int, in sigset_t*, sigset_t*);\n-int sigsuspend(in sigset_t*);\n-int sigwait(in sigset_t*, int*);\n+int sigprocmask(int, const scope sigset_t*, sigset_t*);\n+int sigsuspend(const scope sigset_t*);\n+int sigwait(const scope sigset_t*, int*);\n */\n \n nothrow @nogc\n@@ -1007,16 +968,16 @@ version (CRuntime_Glibc)\n     }\n \n     int kill(pid_t, int);\n-    int sigaction(int, in sigaction_t*, sigaction_t*);\n+    int sigaction(int, const scope sigaction_t*, sigaction_t*);\n     int sigaddset(sigset_t*, int);\n     int sigdelset(sigset_t*, int);\n     int sigemptyset(sigset_t*);\n     int sigfillset(sigset_t*);\n-    int sigismember(in sigset_t*, int);\n+    int sigismember(const scope sigset_t*, int);\n     int sigpending(sigset_t*);\n-    int sigprocmask(int, in sigset_t*, sigset_t*);\n-    int sigsuspend(in sigset_t*);\n-    int sigwait(in sigset_t*, int*);\n+    int sigprocmask(int, const scope sigset_t*, sigset_t*);\n+    int sigsuspend(const scope sigset_t*);\n+    int sigwait(const scope sigset_t*, int*);\n }\n else version (Darwin)\n {\n@@ -1059,16 +1020,16 @@ else version (Darwin)\n     enum SI_MESGQ   = 0x10005;\n \n     int kill(pid_t, int);\n-    int sigaction(int, in sigaction_t*, sigaction_t*);\n+    int sigaction(int, const scope sigaction_t*, sigaction_t*);\n     int sigaddset(sigset_t*, int);\n     int sigdelset(sigset_t*, int);\n     int sigemptyset(sigset_t*);\n     int sigfillset(sigset_t*);\n-    int sigismember(in sigset_t*, int);\n+    int sigismember(const scope sigset_t*, int);\n     int sigpending(sigset_t*);\n-    int sigprocmask(int, in sigset_t*, sigset_t*);\n-    int sigsuspend(in sigset_t*);\n-    int sigwait(in sigset_t*, int*);\n+    int sigprocmask(int, const scope sigset_t*, sigset_t*);\n+    int sigsuspend(const scope sigset_t*);\n+    int sigwait(const scope sigset_t*, int*);\n }\n else version (FreeBSD)\n {\n@@ -1137,16 +1098,16 @@ else version (FreeBSD)\n     enum SI_MESGQ   = 0x10005;\n \n     int kill(pid_t, int);\n-    int sigaction(int, in sigaction_t*, sigaction_t*);\n+    int sigaction(int, const scope sigaction_t*, sigaction_t*);\n     int sigaddset(sigset_t*, int);\n     int sigdelset(sigset_t*, int);\n     int sigemptyset(sigset_t *);\n     int sigfillset(sigset_t *);\n-    int sigismember(in sigset_t*, int);\n+    int sigismember(const scope sigset_t*, int);\n     int sigpending(sigset_t *);\n-    int sigprocmask(int, in sigset_t*, sigset_t*);\n-    int sigsuspend(in sigset_t*);\n-    int sigwait(in sigset_t*, int*);\n+    int sigprocmask(int, const scope sigset_t*, sigset_t*);\n+    int sigsuspend(const scope sigset_t*);\n+    int sigwait(const scope sigset_t*, int*);\n }\n else version (NetBSD)\n {\n@@ -1223,16 +1184,16 @@ else version (NetBSD)\n     enum SI_MESGQ   = -4;\n \n     int kill(pid_t, int);\n-    int __sigaction14(int, in sigaction_t*, sigaction_t*);\n+    int __sigaction14(int, const scope sigaction_t*, sigaction_t*);\n     int __sigaddset14(sigset_t*, int);\n     int __sigdelset14(sigset_t*, int);\n     int __sigemptyset14(sigset_t *);\n     int __sigfillset14(sigset_t *);\n-    int __sigismember14(in sigset_t*, int);\n+    int __sigismember14(const scope sigset_t*, int);\n     int __sigpending14(sigset_t *);\n-    int __sigprocmask14(int, in sigset_t*, sigset_t*);\n-    int __sigsuspend14(in sigset_t*);\n-    int sigwait(in sigset_t*, int*);\n+    int __sigprocmask14(int, const scope sigset_t*, sigset_t*);\n+    int __sigsuspend14(const scope sigset_t*);\n+    int sigwait(const scope sigset_t*, int*);\n \n     alias __sigaction14 sigaction;\n     alias __sigaddset14 sigaddset;\n@@ -1309,16 +1270,16 @@ else version (OpenBSD)\n     enum SI_TIMER  = -3;\n \n     int kill(pid_t, int);\n-    int sigaction(int, in sigaction_t*, sigaction_t*);\n+    int sigaction(int, const scope sigaction_t*, sigaction_t*);\n     int sigaddset(sigset_t*, int);\n     int sigdelset(sigset_t*, int);\n     int sigemptyset(sigset_t *);\n     int sigfillset(sigset_t *);\n-    int sigismember(in sigset_t*, int);\n+    int sigismember(const scope sigset_t*, int);\n     int sigpending(sigset_t *);\n-    int sigprocmask(int, in sigset_t*, sigset_t*);\n-    int sigsuspend(in sigset_t*);\n-    int sigwait(in sigset_t*, int*);\n+    int sigprocmask(int, const scope sigset_t*, sigset_t*);\n+    int sigsuspend(const scope sigset_t*);\n+    int sigwait(const scope sigset_t*, int*);\n }\n else version (DragonFlyBSD)\n {\n@@ -1358,16 +1319,16 @@ else version (DragonFlyBSD)\n     enum SI_MESGQ     = -4;\n \n     int kill(pid_t, int);\n-    int sigaction(int, in sigaction_t*, sigaction_t*);\n+    int sigaction(int, const scope sigaction_t*, sigaction_t*);\n     int sigaddset(sigset_t*, int);\n     int sigdelset(sigset_t*, int);\n     int sigemptyset(sigset_t *);\n     int sigfillset(sigset_t *);\n-    int sigismember(in sigset_t*, int);\n+    int sigismember(const scope sigset_t*, int);\n     int sigpending(sigset_t *);\n-    int sigprocmask(int, in sigset_t*, sigset_t*);\n-    int sigsuspend(in sigset_t*);\n-    int sigwait(in sigset_t*, int*);\n+    int sigprocmask(int, const scope sigset_t*, sigset_t*);\n+    int sigsuspend(const scope sigset_t*);\n+    int sigwait(const scope sigset_t*, int*);\n }\n else version (Solaris)\n {\n@@ -1467,21 +1428,21 @@ else version (Solaris)\n     }\n \n     int kill(pid_t, int);\n-    int sigaction(int, in sigaction_t*, sigaction_t*);\n+    int sigaction(int, const scope sigaction_t*, sigaction_t*);\n     int sigaddset(sigset_t*, int);\n     int sigdelset(sigset_t*, int);\n     int sigemptyset(sigset_t*);\n     int sigfillset(sigset_t*);\n-    int sigismember(in sigset_t*, int);\n+    int sigismember(const scope sigset_t*, int);\n     int sigpending(sigset_t*);\n-    int sigprocmask(int, in sigset_t*, sigset_t*);\n-    int sigsuspend(in sigset_t*);\n-    int sigwait(in sigset_t*, int*);\n+    int sigprocmask(int, const scope sigset_t*, sigset_t*);\n+    int sigsuspend(const scope sigset_t*);\n+    int sigwait(const scope sigset_t*, int*);\n }\n else version (CRuntime_Bionic)\n {\n     public import core.sys.posix.time: timer_t;\n-    private import core.stdc.string : memset;\n+    import core.stdc.string : memset;\n \n     version (X86)\n     {\n@@ -1581,7 +1542,7 @@ else version (CRuntime_Bionic)\n     }\n \n     int kill(pid_t, int);\n-    int sigaction(int, in sigaction_t*, sigaction_t*);\n+    int sigaction(int, const scope sigaction_t*, sigaction_t*);\n \n     // These functions are defined inline in bionic.\n     int sigaddset(sigset_t* set, int signum)\n@@ -1612,9 +1573,9 @@ else version (CRuntime_Bionic)\n     }\n \n     int sigpending(sigset_t*);\n-    int sigprocmask(int, in sigset_t*, sigset_t*);\n-    int sigsuspend(in sigset_t*);\n-    int sigwait(in sigset_t*, int*);\n+    int sigprocmask(int, const scope sigset_t*, sigset_t*);\n+    int sigsuspend(const scope sigset_t*);\n+    int sigwait(const scope sigset_t*, int*);\n }\n else version (CRuntime_Musl)\n {\n@@ -1724,16 +1685,16 @@ else version (CRuntime_Musl)\n     }\n \n     int kill(pid_t, int);\n-    int sigaction(int, in sigaction_t*, sigaction_t*);\n+    int sigaction(int, const scope sigaction_t*, sigaction_t*);\n     int sigaddset(sigset_t*, int);\n     int sigdelset(sigset_t*, int);\n     int sigemptyset(sigset_t*);\n     int sigfillset(sigset_t*);\n-    int sigismember(in sigset_t*, int);\n+    int sigismember(const scope sigset_t*, int);\n     int sigpending(sigset_t*);\n-    int sigprocmask(int, in sigset_t*, sigset_t*);\n-    int sigsuspend(in sigset_t*);\n-    int sigwait(in sigset_t*, int*);\n+    int sigprocmask(int, const scope sigset_t*, sigset_t*);\n+    int sigsuspend(const scope sigset_t*);\n+    int sigwait(const scope sigset_t*, int*);\n }\n else version (CRuntime_UClibc)\n {\n@@ -1967,16 +1928,16 @@ else version (CRuntime_UClibc)\n     }\n \n     int kill(pid_t, int);\n-    int sigaction(int, in sigaction_t*, sigaction_t*);\n+    int sigaction(int, const scope sigaction_t*, sigaction_t*);\n     int sigaddset(sigset_t*, int);\n     int sigdelset(sigset_t*, int);\n     int sigemptyset(sigset_t*);\n     int sigfillset(sigset_t*);\n-    int sigismember(in sigset_t*, int);\n+    int sigismember(const scope sigset_t*, int);\n     int sigpending(sigset_t*);\n-    int sigprocmask(int, in sigset_t*, sigset_t*);\n-    int sigsuspend(in sigset_t*);\n-    int sigwait(in sigset_t*, int*);\n+    int sigprocmask(int, const scope sigset_t*, sigset_t*);\n+    int sigsuspend(const scope sigset_t*);\n+    int sigwait(const scope sigset_t*, int*);\n }\n else\n {\n@@ -2069,7 +2030,7 @@ sigfn_t bsd_signal(int sig, sigfn_t func);\n sigfn_t sigset(int sig, sigfn_t func);\n \n int killpg(pid_t, int);\n-int sigaltstack(in stack_t*, stack_t*);\n+int sigaltstack(const scope stack_t*, stack_t*);\n int sighold(int);\n int sigignore(int);\n int siginterrupt(int, int);\n@@ -2261,7 +2222,7 @@ version (CRuntime_Glibc)\n     sigfn_t2 sigset(int sig, sigfn_t2 func);\n \n     int killpg(pid_t, int);\n-    int sigaltstack(in stack_t*, stack_t*);\n+    int sigaltstack(const scope stack_t*, stack_t*);\n     int sighold(int);\n     int sigignore(int);\n     int siginterrupt(int, int);\n@@ -2371,7 +2332,7 @@ else version (Darwin)\n     sigfn_t2 sigset(int sig, sigfn_t2 func);\n \n     int killpg(pid_t, int);\n-    int sigaltstack(in stack_t*, stack_t*);\n+    int sigaltstack(const scope stack_t*, stack_t*);\n     int sighold(int);\n     int sigignore(int);\n     int siginterrupt(int, int);\n@@ -2406,7 +2367,7 @@ else version (FreeBSD)\n \n     enum MINSIGSTKSZ = 512 * 4;\n     enum SIGSTKSZ    = (MINSIGSTKSZ + 32768);\n-;\n+\n     //ucontext_t (defined in core.sys.posix.ucontext)\n     //mcontext_t (defined in core.sys.posix.ucontext)\n \n@@ -2495,7 +2456,7 @@ else version (FreeBSD)\n     sigfn_t2 sigset(int sig, sigfn_t2 func);\n \n     int killpg(pid_t, int);\n-    int sigaltstack(in stack_t*, stack_t*);\n+    int sigaltstack(const scope stack_t*, stack_t*);\n     int sighold(int);\n     int sigignore(int);\n     int siginterrupt(int, int);\n@@ -2530,7 +2491,7 @@ else version (NetBSD)\n \n     enum MINSIGSTKSZ = 8192;\n     enum SIGSTKSZ    = (MINSIGSTKSZ + 32768);\n-;\n+\n     //ucontext_t (defined in core.sys.posix.ucontext)\n     //mcontext_t (defined in core.sys.posix.ucontext)\n \n@@ -2619,7 +2580,7 @@ else version (NetBSD)\n     sigfn_t2 sigset(int sig, sigfn_t2 func);\n \n     int killpg(pid_t, int);\n-    int sigaltstack(in stack_t*, stack_t*);\n+    int sigaltstack(const scope stack_t*, stack_t*);\n     int sighold(int);\n     int sigignore(int);\n     int siginterrupt(int, int);\n@@ -2738,7 +2699,7 @@ else version (OpenBSD)\n   nothrow:\n   @nogc:\n     int killpg(pid_t, int);\n-    int sigaltstack(in stack_t*, stack_t*);\n+    int sigaltstack(const scope stack_t*, stack_t*);\n     int siginterrupt(int, int);\n     int sigpause(int);\n }\n@@ -2770,7 +2731,7 @@ else version (DragonFlyBSD)\n \n     enum MINSIGSTKSZ = 8192;\n     enum SIGSTKSZ    = (MINSIGSTKSZ + 32768);\n-;\n+\n     //ucontext_t (defined in core.sys.posix.ucontext)\n     //mcontext_t (defined in core.sys.posix.ucontext)\n \n@@ -2859,7 +2820,7 @@ else version (DragonFlyBSD)\n     sigfn_t2 sigset(int sig, sigfn_t2 func);\n \n     int killpg(pid_t, int);\n-    int sigaltstack(in stack_t*, stack_t*);\n+    int sigaltstack(const scope stack_t*, stack_t*);\n     int sighold(int);\n     int sigignore(int);\n     int siginterrupt(int, int);\n@@ -2983,7 +2944,7 @@ else version (Solaris)\n     sigfn_t2 sigset(int sig, sigfn_t2 func);\n \n     int killpg(pid_t, int);\n-    int sigaltstack(in stack_t*, stack_t*);\n+    int sigaltstack(const scope stack_t*, stack_t*);\n     int sighold(int);\n     int sigignore(int);\n     int siginterrupt(int, int);\n@@ -3088,7 +3049,7 @@ else version (CRuntime_Bionic)\n     sigfn_t2 bsd_signal(int, sigfn_t2);\n \n     int killpg(int, int);\n-    int sigaltstack(in stack_t*, stack_t*);\n+    int sigaltstack(const scope stack_t*, stack_t*);\n     int siginterrupt(int, int);\n }\n else version (CRuntime_Musl)\n@@ -3258,7 +3219,7 @@ else version (CRuntime_Musl)\n     sigfn_t2 sigset(int sig, sigfn_t2 func);\n \n     int killpg(pid_t, int);\n-    int sigaltstack(in stack_t*, stack_t*);\n+    int sigaltstack(const scope stack_t*, stack_t*);\n     int sighold(int);\n     int sigignore(int);\n     int siginterrupt(int, int);\n@@ -3440,7 +3401,7 @@ else version (CRuntime_UClibc)\n     sigfn_t2 sigset(int sig, sigfn_t2 func);\n \n     int killpg(pid_t, int);\n-    int sigaltstack(in stack_t*, stack_t*);\n+    int sigaltstack(const scope stack_t*, stack_t*);\n     int sighold(int);\n     int sigignore(int);\n     int siginterrupt(int, int);\n@@ -3543,8 +3504,8 @@ struct sigevent\n }\n \n int sigqueue(pid_t, int, in sigval);\n-int sigtimedwait(in sigset_t*, siginfo_t*, in timespec*);\n-int sigwaitinfo(in sigset_t*, siginfo_t*);\n+int sigtimedwait(const scope sigset_t*, siginfo_t*, const scope timespec*);\n+int sigwaitinfo(const scope sigset_t*, siginfo_t*);\n */\n \n nothrow:\n@@ -3583,8 +3544,8 @@ version (CRuntime_Glibc)\n     }\n \n     int sigqueue(pid_t, int, in sigval);\n-    int sigtimedwait(in sigset_t*, siginfo_t*, in timespec*);\n-    int sigwaitinfo(in sigset_t*, siginfo_t*);\n+    int sigtimedwait(const scope sigset_t*, siginfo_t*, const scope timespec*);\n+    int sigwaitinfo(const scope sigset_t*, siginfo_t*);\n }\n else version (FreeBSD)\n {\n@@ -3606,8 +3567,8 @@ else version (FreeBSD)\n     }\n \n     int sigqueue(pid_t, int, in sigval);\n-    int sigtimedwait(in sigset_t*, siginfo_t*, in timespec*);\n-    int sigwaitinfo(in sigset_t*, siginfo_t*);\n+    int sigtimedwait(const scope sigset_t*, siginfo_t*, const scope timespec*);\n+    int sigwaitinfo(const scope sigset_t*, siginfo_t*);\n }\n else version (NetBSD)\n {\n@@ -3621,8 +3582,8 @@ else version (NetBSD)\n     }\n \n     int sigqueue(pid_t, int, in sigval);\n-    int sigtimedwait(in sigset_t*, siginfo_t*, in timespec*);\n-    int sigwaitinfo(in sigset_t*, siginfo_t*);\n+    int sigtimedwait(const scope sigset_t*, siginfo_t*, const scope timespec*);\n+    int sigwaitinfo(const scope sigset_t*, siginfo_t*);\n }\n else version (OpenBSD)\n {\n@@ -3636,14 +3597,14 @@ else version (DragonFlyBSD)\n         int                       sigev_signo;\n         int                       sigev_notify_kqueue;\n         void /*pthread_attr_t*/ * sigev_notify_attributes;\n-    };\n+    }\n     union _sigval_t\n     {\n         int                       sival_int;\n         void                    * sival_ptr;\n         int                       sigval_int;\n         void                    * sigval_ptr;\n-    };\n+    }\n     struct sigevent\n     {\n         int                       sigev_notify;\n@@ -3653,8 +3614,8 @@ else version (DragonFlyBSD)\n     }\n \n     int sigqueue(pid_t, int, in sigval);\n-    int sigtimedwait(in sigset_t*, siginfo_t*, in timespec*);\n-    int sigwaitinfo(in sigset_t*, siginfo_t*);\n+    int sigtimedwait(const scope sigset_t*, siginfo_t*, const scope timespec*);\n+    int sigwaitinfo(const scope sigset_t*, siginfo_t*);\n }\n else version (Darwin)\n {\n@@ -3680,8 +3641,8 @@ else version (Solaris)\n     }\n \n     int sigqueue(pid_t, int, in sigval);\n-    int sigtimedwait(in sigset_t*, siginfo_t*, in timespec*);\n-    int sigwaitinfo(in sigset_t*, siginfo_t*);\n+    int sigtimedwait(const scope sigset_t*, siginfo_t*, const scope timespec*);\n+    int sigwaitinfo(const scope sigset_t*, siginfo_t*);\n }\n else version (CRuntime_Bionic)\n {\n@@ -3757,8 +3718,8 @@ else version (CRuntime_UClibc)\n     @property void* sigev_notify_attributes(ref sigevent _sigevent) { return  _sigevent._sigev_un._sigev_thread._attribute; }\n \n     int sigqueue(pid_t, int, in sigval);\n-    int sigtimedwait(in sigset_t*, siginfo_t*, in timespec*);\n-    int sigwaitinfo(in sigset_t*, siginfo_t*);\n+    int sigtimedwait(const scope sigset_t*, siginfo_t*, const scope timespec*);\n+    int sigwaitinfo(const scope sigset_t*, siginfo_t*);\n }\n else\n {\n@@ -3770,58 +3731,58 @@ else\n //\n /*\n int pthread_kill(pthread_t, int);\n-int pthread_sigmask(int, in sigset_t*, sigset_t*);\n+int pthread_sigmask(int, const scope sigset_t*, sigset_t*);\n */\n \n version (CRuntime_Glibc)\n {\n     int pthread_kill(pthread_t, int);\n-    int pthread_sigmask(int, in sigset_t*, sigset_t*);\n+    int pthread_sigmask(int, const scope sigset_t*, sigset_t*);\n }\n else version (Darwin)\n {\n     int pthread_kill(pthread_t, int);\n-    int pthread_sigmask(int, in sigset_t*, sigset_t*);\n+    int pthread_sigmask(int, const scope sigset_t*, sigset_t*);\n }\n else version (FreeBSD)\n {\n     int pthread_kill(pthread_t, int);\n-    int pthread_sigmask(int, in sigset_t*, sigset_t*);\n+    int pthread_sigmask(int, const scope sigset_t*, sigset_t*);\n }\n else version (NetBSD)\n {\n     int pthread_kill(pthread_t, int);\n-    int pthread_sigmask(int, in sigset_t*, sigset_t*);\n+    int pthread_sigmask(int, const scope sigset_t*, sigset_t*);\n }\n else version (OpenBSD)\n {\n     int pthread_kill(pthread_t, int);\n-    int pthread_sigmask(int, in sigset_t*, sigset_t*);\n+    int pthread_sigmask(int, const scope sigset_t*, sigset_t*);\n }\n else version (DragonFlyBSD)\n {\n     int pthread_kill(pthread_t, int);\n-    int pthread_sigmask(int, in sigset_t*, sigset_t*);\n+    int pthread_sigmask(int, const scope sigset_t*, sigset_t*);\n }\n else version (Solaris)\n {\n     int pthread_kill(pthread_t, int);\n-    int pthread_sigmask(int, in sigset_t*, sigset_t*);\n+    int pthread_sigmask(int, const scope sigset_t*, sigset_t*);\n }\n else version (CRuntime_Bionic)\n {\n     int pthread_kill(pthread_t, int);\n-    int pthread_sigmask(int, in sigset_t*, sigset_t*);\n+    int pthread_sigmask(int, const scope sigset_t*, sigset_t*);\n }\n else version (CRuntime_Musl)\n {\n     int pthread_kill(pthread_t, int);\n-    int pthread_sigmask(int, in sigset_t*, sigset_t*);\n+    int pthread_sigmask(int, const scope sigset_t*, sigset_t*);\n }\n else version (CRuntime_UClibc)\n {\n     int pthread_kill(pthread_t, int);\n-    int pthread_sigmask(int, in sigset_t*, sigset_t*);\n+    int pthread_sigmask(int, const scope sigset_t*, sigset_t*);\n     int pthread_sigqueue(pthread_t, int, sigval);\n }\n else"}, {"sha": "86b17517335f2903b51d7b2cfb7d2d3084584ae3", "filename": "libphobos/libdruntime/core/sys/posix/spawn.d", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fspawn.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fspawn.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fspawn.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -49,6 +49,7 @@ public import core.sys.posix.sched : sched_param;\n extern(C):\n @nogc:\n nothrow:\n+@system:\n \n int posix_spawn_file_actions_addclose(posix_spawn_file_actions_t*, int);\n int posix_spawn_file_actions_adddup2(posix_spawn_file_actions_t*, int, int);"}, {"sha": "89029de09a847be0cf4d0dfa1a1b6f4c1fe85d7f", "filename": "libphobos/libdruntime/core/sys/posix/stdc/time.d", "status": "added", "additions": 191, "deletions": 0, "changes": 191, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fstdc%2Ftime.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fstdc%2Ftime.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fstdc%2Ftime.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -0,0 +1,191 @@\n+/**\n+ * D header file for C99.\n+ *\n+ * $(C_HEADER_DESCRIPTION pubs.opengroup.org/onlinepubs/009695399/basedefs/_time.h.html, _time.h)\n+ *\n+ * Copyright: Copyright Sean Kelly 2005 - 2009.\n+ * License: Distributed under the\n+ *      $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost Software License 1.0).\n+ *    (See accompanying file LICENSE)\n+ * Authors:   Sean Kelly,\n+ *            Alex R\u00f8nne Petersen\n+ * Source:    $(DRUNTIMESRC core/stdc/_time.d)\n+ * Standards: ISO/IEC 9899:1999 (E)\n+ */\n+\n+module core.sys.posix.stdc.time;\n+\n+version (Posix):\n+\n+import core.stdc.config;\n+\n+version (OSX)\n+    version = Darwin;\n+else version (iOS)\n+    version = Darwin;\n+else version (TVOS)\n+    version = Darwin;\n+else version (WatchOS)\n+    version = Darwin;\n+\n+extern (C):\n+@trusted: // There are only a few functions here that use unsafe C strings.\n+nothrow:\n+@nogc:\n+\n+///\n+struct tm\n+{\n+    int     tm_sec;     /// seconds after the minute [0-60]\n+    int     tm_min;     /// minutes after the hour [0-59]\n+    int     tm_hour;    /// hours since midnight [0-23]\n+    int     tm_mday;    /// day of the month [1-31]\n+    int     tm_mon;     /// months since January [0-11]\n+    int     tm_year;    /// years since 1900\n+    int     tm_wday;    /// days since Sunday [0-6]\n+    int     tm_yday;    /// days since January 1 [0-365]\n+    int     tm_isdst;   /// Daylight Savings Time flag\n+    c_long  tm_gmtoff;  /// offset from CUT in seconds\n+    char*   tm_zone;    /// timezone abbreviation\n+}\n+\n+public import core.sys.posix.sys.types : time_t, clock_t;\n+\n+///\n+version (OSX)\n+{\n+    enum clock_t CLOCKS_PER_SEC = 1_000_000; // was 100 until OSX 10.4/10.5\n+    version (X86)\n+        extern (C) pragma(mangle, \"clock$UNIX2003\") clock_t clock();\n+    else\n+        clock_t clock();\n+}\n+else version (Darwin) // other Darwins (iOS, TVOS, WatchOS)\n+{\n+    enum clock_t CLOCKS_PER_SEC = 1_000_000;\n+    clock_t clock();\n+}\n+else version (FreeBSD)\n+{\n+    enum clock_t CLOCKS_PER_SEC = 128;\n+    clock_t clock();\n+}\n+else version (NetBSD)\n+{\n+    enum clock_t CLOCKS_PER_SEC = 100;\n+    clock_t clock();\n+}\n+else version (OpenBSD)\n+{\n+    enum clock_t CLOCKS_PER_SEC = 100;\n+    clock_t clock();\n+}\n+else version (DragonFlyBSD)\n+{\n+    enum clock_t CLOCKS_PER_SEC = 128;\n+    clock_t clock();\n+}\n+else version (Solaris)\n+{\n+    enum clock_t CLOCKS_PER_SEC = 1_000_000;\n+    clock_t clock();\n+}\n+else version (CRuntime_Glibc)\n+{\n+    enum clock_t CLOCKS_PER_SEC = 1_000_000;\n+    clock_t clock();\n+}\n+else version (CRuntime_Musl)\n+{\n+    enum clock_t CLOCKS_PER_SEC = 1_000_000;\n+    clock_t clock();\n+}\n+else version (CRuntime_Bionic)\n+{\n+    enum clock_t CLOCKS_PER_SEC = 1_000_000;\n+    clock_t clock();\n+}\n+else version (CRuntime_UClibc)\n+{\n+    enum clock_t CLOCKS_PER_SEC = 1_000_000;\n+    clock_t clock();\n+}\n+else\n+{\n+    static assert(0, \"unsupported system\");\n+}\n+\n+version (Darwin)\n+{\n+    ///\n+    void tzset();                            // non-standard\n+    ///\n+    extern __gshared const(char)*[2] tzname; // non-standard\n+}\n+else version (CRuntime_Glibc)\n+{\n+    ///\n+    void tzset();                            // non-standard\n+    ///\n+    extern __gshared const(char)*[2] tzname; // non-standard\n+}\n+else version (FreeBSD)\n+{\n+    ///\n+    void tzset();                            // non-standard\n+    ///\n+    extern __gshared const(char)*[2] tzname; // non-standard\n+}\n+else version (NetBSD)\n+{\n+    ///\n+    void tzset();                            // non-standard\n+    ///\n+    extern __gshared const(char)*[2] tzname; // non-standard\n+}\n+else version (OpenBSD)\n+{\n+    ///\n+    void tzset();                            // non-standard\n+    ///\n+    extern __gshared const(char)*[2] tzname; // non-standard\n+}\n+else version (DragonFlyBSD)\n+{\n+    ///\n+    void tzset();                            // non-standard\n+    ///\n+    extern __gshared const(char)*[2] tzname; // non-standard\n+}\n+else version (Solaris)\n+{\n+    ///\n+    void tzset();\n+    ///\n+    extern __gshared const(char)*[2] tzname;\n+}\n+else version (CRuntime_Bionic)\n+{\n+    ///\n+    void tzset();\n+    ///\n+    extern __gshared const(char)*[2] tzname;\n+}\n+else version (CRuntime_Musl)\n+{\n+    ///\n+    void tzset();                            // non-standard\n+    ///\n+    extern __gshared const(char)*[2] tzname; // non-standard\n+}\n+else version (CRuntime_UClibc)\n+{\n+    ///\n+    void tzset();\n+    ///\n+    extern __gshared const(char)*[2] tzname;\n+}\n+else\n+{\n+    static assert(false, \"Unsupported platform\");\n+}"}, {"sha": "031bcb7341feeec99add8bb10ad674f37a905ebc", "filename": "libphobos/libdruntime/core/sys/posix/stdio.d", "status": "modified", "additions": 198, "deletions": 107, "changes": 305, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fstdio.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fstdio.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fstdio.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -14,7 +14,7 @@\n  */\n module core.sys.posix.stdio;\n \n-private import core.sys.posix.config;\n+import core.sys.posix.config;\n public import core.stdc.stdio;\n public import core.sys.posix.sys.types; // for off_t\n \n@@ -32,6 +32,7 @@ extern (C):\n \n nothrow:\n @nogc:\n+@system:\n \n //\n // Required (defined in core.stdc.stdio)\n@@ -65,44 +66,44 @@ int    fflush(FILE*);\n int    fgetc(FILE*);\n int    fgetpos(FILE*, fpos_t *);\n char*  fgets(char*, int, FILE*);\n-FILE*  fopen(in char*, in char*);\n-int    fprintf(FILE*, in char*, ...);\n+FILE*  fopen(const scope char*, const scope char*);\n+int    fprintf(FILE*, const scope char*, ...);\n int    fputc(int, FILE*);\n-int    fputs(in char*, FILE*);\n+int    fputs(const scope char*, FILE*);\n size_t fread(void *, size_t, size_t, FILE*);\n-FILE*  freopen(in char*, in char*, FILE*);\n-int    fscanf(FILE*, in char*, ...);\n+FILE*  freopen(const scope char*, const scope char*, FILE*);\n+int    fscanf(FILE*, const scope char*, ...);\n int    fseek(FILE*, c_long, int);\n-int    fsetpos(FILE*, in fpos_t*);\n+int    fsetpos(FILE*, const scope fpos_t*);\n c_long ftell(FILE*);\n size_t fwrite(in void *, size_t, size_t, FILE*);\n int    getc(FILE*);\n int    getchar();\n char*  gets(char*);\n-void   perror(in char*);\n-int    printf(in char*, ...);\n+void   perror(const scope char*);\n+int    printf(const scope char*, ...);\n int    putc(int, FILE*);\n int    putchar(int);\n-int    puts(in char*);\n-int    remove(in char*);\n-int    rename(in char*, in char*);\n+int    puts(const scope char*);\n+int    remove(const scope char*);\n+int    rename(const scope char*, const scope char*);\n void   rewind(FILE*);\n-int    scanf(in char*, ...);\n+int    scanf(const scope char*, ...);\n void   setbuf(FILE*, char*);\n int    setvbuf(FILE*, char*, int, size_t);\n-int    snprintf(char*, size_t, in char*, ...);\n-int    sprintf(char*, in char*, ...);\n-int    sscanf(in char*, in char*, int ...);\n+int    snprintf(char*, size_t, const scope char*, ...);\n+int    sprintf(char*, const scope char*, ...);\n+int    sscanf(const scope char*, const scope char*, int ...);\n FILE*  tmpfile();\n char*  tmpnam(char*);\n int    ungetc(int, FILE*);\n-int    vfprintf(FILE*, in char*, va_list);\n-int    vfscanf(FILE*, in char*, va_list);\n-int    vprintf(in char*, va_list);\n-int    vscanf(in char*, va_list);\n-int    vsnprintf(char*, size_t, in char*, va_list);\n-int    vsprintf(char*, in char*, va_list);\n-int    vsscanf(in char*, in char*, va_list arg);\n+int    vfprintf(FILE*, const scope char*, va_list);\n+int    vfscanf(FILE*, const scope char*, va_list);\n+int    vprintf(const scope char*, va_list);\n+int    vscanf(const scope char*, va_list);\n+int    vsnprintf(char*, size_t, const scope char*, va_list);\n+int    vsprintf(char*, const scope char*, va_list);\n+int    vsscanf(const scope char*, const scope char*, va_list arg);\n */\n \n version (CRuntime_Glibc)\n@@ -117,15 +118,15 @@ version (CRuntime_Glibc)\n         int   fgetpos64(FILE*, fpos_t *);\n         alias fgetpos64 fgetpos;\n \n-        FILE* fopen64(in char*, in char*);\n+        FILE* fopen64(const scope char*, const scope char*);\n         alias fopen64 fopen;\n \n-        FILE* freopen64(in char*, in char*, FILE*);\n+        FILE* freopen64(const scope char*, const scope char*, FILE*);\n         alias freopen64 freopen;\n \n         int   fseek(FILE*, c_long, int);\n \n-        int   fsetpos64(FILE*, in fpos_t*);\n+        int   fsetpos64(FILE*, const scope fpos_t*);\n         alias fsetpos64 fsetpos;\n \n         FILE* tmpfile64();\n@@ -134,20 +135,20 @@ version (CRuntime_Glibc)\n     else\n     {\n         int   fgetpos(FILE*, fpos_t *);\n-        FILE* fopen(in char*, in char*);\n-        FILE* freopen(in char*, in char*, FILE*);\n+        FILE* fopen(const scope char*, const scope char*);\n+        FILE* freopen(const scope char*, const scope char*, FILE*);\n         int   fseek(FILE*, c_long, int);\n-        int   fsetpos(FILE*, in fpos_t*);\n+        int   fsetpos(FILE*, const scope fpos_t*);\n         FILE* tmpfile();\n     }\n }\n else version (CRuntime_Bionic)\n {\n     int   fgetpos(FILE*, fpos_t *);\n-    FILE* fopen(in char*, in char*);\n-    FILE* freopen(in char*, in char*, FILE*);\n+    FILE* fopen(const scope char*, const scope char*);\n+    FILE* freopen(const scope char*, const scope char*, FILE*);\n     int   fseek(FILE*, c_long, int);\n-    int   fsetpos(FILE*, in fpos_t*);\n+    int   fsetpos(FILE*, const scope fpos_t*);\n }\n else version (CRuntime_UClibc)\n {\n@@ -156,15 +157,15 @@ else version (CRuntime_UClibc)\n         int   fgetpos64(FILE*, fpos_t *);\n         alias fgetpos64 fgetpos;\n \n-        FILE* fopen64(in char*, in char*);\n+        FILE* fopen64(const scope char*, const scope char*);\n         alias fopen64 fopen;\n \n-        FILE* freopen64(in char*, in char*, FILE*);\n+        FILE* freopen64(const scope char*, const scope char*, FILE*);\n         alias freopen64 freopen;\n \n         int   fseek(FILE*, c_long, int);\n \n-        int   fsetpos64(FILE*, in fpos_t*);\n+        int   fsetpos64(FILE*, const scope fpos_t*);\n         alias fsetpos64 fsetpos;\n \n         FILE* tmpfile64();\n@@ -173,10 +174,10 @@ else version (CRuntime_UClibc)\n     else\n     {\n         int   fgetpos(FILE*, fpos_t *);\n-        FILE* fopen(in char*, in char*);\n-        FILE* freopen(in char*, in char*, FILE*);\n+        FILE* fopen(const scope char*, const scope char*);\n+        FILE* freopen(const scope char*, const scope char*, FILE*);\n         int   fseek(FILE*, c_long, int);\n-        int   fsetpos(FILE*, in fpos_t*);\n+        int   fsetpos(FILE*, const scope fpos_t*);\n         FILE* tmpfile();\n     }\n }\n@@ -187,15 +188,15 @@ else version (CRuntime_Musl)\n         int   fgetpos64(FILE*, fpos_t *);\n         alias fgetpos64 fgetpos;\n \n-        FILE* fopen64(in char*, in char*);\n+        FILE* fopen64(const scope char*, const scope char*);\n         alias fopen64 fopen;\n \n-        FILE* freopen64(in char*, in char*, FILE*);\n+        FILE* freopen64(const scope char*, const scope char*, FILE*);\n         alias freopen64 freopen;\n \n         int   fseek(FILE*, c_long, int);\n \n-        int   fsetpos64(FILE*, in fpos_t*);\n+        int   fsetpos64(FILE*, const scope fpos_t*);\n         alias fsetpos64 fsetpos;\n \n         FILE* tmpfile64();\n@@ -204,10 +205,10 @@ else version (CRuntime_Musl)\n     else\n     {\n         int   fgetpos(FILE*, fpos_t *);\n-        FILE* fopen(in char*, in char*);\n-        FILE* freopen(in char*, in char*, FILE*);\n+        FILE* fopen(const scope char*, const scope char*);\n+        FILE* freopen(const scope char*, const scope char*, FILE*);\n         int   fseek(FILE*, c_long, int);\n-        int   fsetpos(FILE*, in fpos_t*);\n+        int   fsetpos(FILE*, const scope fpos_t*);\n         FILE* tmpfile();\n     }\n }\n@@ -218,15 +219,15 @@ else version (Solaris)\n         int   fgetpos64(FILE*, fpos_t *);\n         alias fgetpos = fgetpos64;\n \n-        FILE* fopen64(in char*, in char*);\n+        FILE* fopen64(const scope char*, const scope char*);\n         alias fopen = fopen64;\n \n-        FILE* freopen64(in char*, in char*, FILE*);\n+        FILE* freopen64(const scope char*, const scope char*, FILE*);\n         alias freopen = freopen64;\n \n         int   fseek(FILE*, c_long, int);\n \n-        int   fsetpos64(FILE*, in fpos_t*);\n+        int   fsetpos64(FILE*, const scope fpos_t*);\n         alias fsetpos = fsetpos64;\n \n         FILE* tmpfile64();\n@@ -235,10 +236,10 @@ else version (Solaris)\n     else\n     {\n         int   fgetpos(FILE*, fpos_t *);\n-        FILE* fopen(in char*, in char*);\n-        FILE* freopen(in char*, in char*, FILE*);\n+        FILE* fopen(const scope char*, const scope char*);\n+        FILE* freopen(const scope char*, const scope char*, FILE*);\n         int   fseek(FILE*, c_long, int);\n-        int   fsetpos(FILE*, in fpos_t*);\n+        int   fsetpos(FILE*, const scope fpos_t*);\n         FILE* tmpfile();\n     }\n }\n@@ -249,64 +250,72 @@ else version (Solaris)\n /*\n L_ctermid\n \n-char*  ctermid(char*);\n-FILE*  fdopen(int, in char*);\n-int    fileno(FILE*);\n-int    fseeko(FILE*, off_t, int);\n-off_t  ftello(FILE*);\n-char*  gets(char*);\n-int    pclose(FILE*);\n-FILE*  popen(in char*, in char*);\n+char*   ctermid(char*);\n+FILE*   fdopen(int, const scope char*);\n+int     fileno(FILE*);\n+int     fseeko(FILE*, off_t, int);\n+off_t   ftello(FILE*);\n+ssize_t getdelim(char**, size_t*, int, FILE*);\n+ssize_t getline(char**, size_t*, FILE*);\n+char*   gets(char*);\n+int     pclose(FILE*);\n+FILE*   popen(const scope char*, const scope char*);\n */\n \n version (CRuntime_Glibc)\n {\n     enum L_ctermid = 9;\n \n-  static if ( __USE_FILE_OFFSET64 )\n-  {\n-    int   fseeko64(FILE*, off_t, int);\n-    alias fseeko64 fseeko;\n-  }\n-  else\n-  {\n-    int   fseeko(FILE*, off_t, int);\n-  }\n-\n-  static if ( __USE_FILE_OFFSET64 )\n-  {\n-    off_t ftello64(FILE*);\n-    alias ftello64 ftello;\n-  }\n-  else\n-  {\n-    off_t ftello(FILE*);\n-  }\n+    static if ( __USE_FILE_OFFSET64 )\n+    {\n+        int   fseeko64(FILE*, off_t, int);\n+        alias fseeko64 fseeko;\n+    }\n+    else\n+    {\n+        int   fseeko(FILE*, off_t, int);\n+    }\n+\n+    static if ( __USE_FILE_OFFSET64 )\n+    {\n+        off_t ftello64(FILE*);\n+        alias ftello64 ftello;\n+    }\n+    else\n+    {\n+        off_t ftello(FILE*);\n+    }\n+\n+    ssize_t getdelim(char**, size_t*, int, FILE*);\n+    ssize_t getline(char**, size_t*, FILE*);\n }\n else version (CRuntime_UClibc)\n {\n     enum L_ctermid = 9;\n     enum L_cuserid = 9;\n \n-  static if ( __USE_FILE_OFFSET64 )\n-  {\n-    int   fseeko64(FILE*, off_t, int);\n-    alias fseeko64 fseeko;\n-  }\n-  else\n-  {\n-    int   fseeko(FILE*, off_t, int);\n-  }\n-\n-  static if ( __USE_FILE_OFFSET64 )\n-  {\n-    off_t ftello64(FILE*);\n-    alias ftello64 ftello;\n-  }\n-  else\n-  {\n-    off_t ftello(FILE*);\n-  }\n+    static if ( __USE_FILE_OFFSET64 )\n+    {\n+        int   fseeko64(FILE*, off_t, int);\n+        alias fseeko64 fseeko;\n+    }\n+    else\n+    {\n+        int   fseeko(FILE*, off_t, int);\n+    }\n+\n+    static if ( __USE_FILE_OFFSET64 )\n+    {\n+        off_t ftello64(FILE*);\n+        alias ftello64 ftello;\n+    }\n+    else\n+    {\n+        off_t ftello(FILE*);\n+    }\n+\n+    ssize_t getdelim(char**, size_t*, int, FILE*);\n+    ssize_t getline(char**, size_t*, FILE*);\n }\n else version (CRuntime_Musl)\n {\n@@ -331,6 +340,91 @@ else version (CRuntime_Musl)\n     {\n         off_t ftello(FILE*);\n     }\n+\n+    ssize_t getdelim(char**, size_t*, int, FILE*);\n+    ssize_t getline(char**, size_t*, FILE*);\n+}\n+else version (CRuntime_Bionic)\n+{\n+    enum L_ctermid = 1024;\n+\n+    static if ( __USE_FILE_OFFSET64 )\n+    {\n+        int   fseeko64(FILE*, off_t, int);\n+        alias fseeko64 fseeko;\n+    }\n+    else\n+    {\n+        int   fseeko(FILE*, off_t, int);\n+    }\n+\n+    static if ( __USE_FILE_OFFSET64 )\n+    {\n+        off_t ftello64(FILE*);\n+        alias ftello64 ftello;\n+    }\n+    else\n+    {\n+        off_t ftello(FILE*);\n+    }\n+\n+    ssize_t getdelim(char**, size_t*, int, FILE*);\n+    ssize_t getline(char**, size_t*, FILE*);\n+}\n+else version (Darwin)\n+{\n+    enum L_ctermid = 1024;\n+\n+    int   fseeko(FILE*, off_t, int);\n+    off_t ftello(FILE*);\n+\n+    ssize_t getdelim(char**, size_t*, int, FILE*);\n+    ssize_t getline(char**, size_t*, FILE*);\n+}\n+else version (FreeBSD)\n+{\n+    import core.sys.freebsd.config;\n+\n+    enum L_ctermid = 1024;\n+\n+    int   fseeko(FILE*, off_t, int);\n+    off_t ftello(FILE*);\n+\n+    static if (__FreeBSD_version >= 800000)\n+    {\n+        ssize_t getdelim(char**, size_t*, int, FILE*);\n+        ssize_t getline(char**, size_t*, FILE*);\n+    }\n+}\n+else version (NetBSD)\n+{\n+    enum L_ctermid = 1024;\n+\n+    int   fseeko(FILE*, off_t, int);\n+    off_t ftello(FILE*);\n+\n+    ssize_t getdelim(char**, size_t*, int, FILE*);\n+    ssize_t getline(char**, size_t*, FILE*);\n+}\n+else version (OpenBSD)\n+{\n+    enum L_ctermid = 1024;\n+\n+    int   fseeko(FILE*, off_t, int);\n+    off_t ftello(FILE*);\n+\n+    ssize_t getdelim(char**, size_t*, int, FILE*);\n+    ssize_t getline(char**, size_t*, FILE*);\n+}\n+else version (DragonFlyBSD)\n+{\n+    enum L_ctermid = 1024;\n+\n+    int   fseeko(FILE*, off_t, int);\n+    off_t ftello(FILE*);\n+\n+    ssize_t getdelim(char**, size_t*, int, FILE*);\n+    ssize_t getline(char**, size_t*, FILE*);\n }\n else version (Solaris)\n {\n@@ -356,6 +450,9 @@ else version (Solaris)\n     {\n         off_t ftello(FILE*);\n     }\n+\n+    ssize_t getdelim(char**, size_t*, int, FILE*);\n+    ssize_t getline(char**, size_t*, FILE*);\n }\n else version (Posix)\n {\n@@ -364,13 +461,11 @@ else version (Posix)\n }\n \n char*  ctermid(char*);\n-FILE*  fdopen(int, in char*);\n+FILE*  fdopen(int, const scope char*);\n int    fileno(FILE*);\n-//int    fseeko(FILE*, off_t, int);\n-//off_t  ftello(FILE*);\n char*  gets(char*);\n int    pclose(FILE*);\n-FILE*  popen(in char*, in char*);\n+FILE*  popen(const scope char*, const scope char*);\n \n \n // memstream functions are conforming to POSIX.1-2008.  These functions are\n@@ -392,7 +487,7 @@ else version (CRuntime_Musl)\n \n version (HaveMemstream)\n {\n-    FILE*  fmemopen(in void* buf, in size_t size, in char* mode);\n+    FILE*  fmemopen(const scope void* buf, in size_t size, const scope char* mode);\n     FILE*  open_memstream(char** ptr, size_t* sizeloc);\n     version (CRuntime_UClibc) {} else\n     FILE*  open_wmemstream(wchar_t** ptr, size_t* sizeloc);\n@@ -459,10 +554,10 @@ else version (CRuntime_UClibc)\n P_tmpdir\n va_list (defined in core.stdc.stdarg)\n \n-char*  tempnam(in char*, in char*);\n+char*  tempnam(const scope char*, const scope char*);\n */\n \n-char*  tempnam(in char*, in char*);\n+char*  tempnam(const scope char*, const scope char*);\n \n version (CRuntime_Glibc)\n {\n@@ -546,7 +641,3 @@ unittest\n     assert(memcmp(ptr, testdata.ptr, testdata.length*wchar_t.sizeof) == 0);\n     assert(fclose(f) == 0);\n }\n-\n-\n-ssize_t getdelim (char** lineptr, size_t* n, int delimiter, FILE* stream);\n-ssize_t getline (char** lineptr, size_t* n, FILE* stream);"}, {"sha": "4c10d4e0ed5daa3bed980b34ad8e5997390247c8", "filename": "libphobos/libdruntime/core/sys/posix/stdlib.d", "status": "modified", "additions": 95, "deletions": 94, "changes": 189, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fstdlib.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fstdlib.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fstdlib.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -14,7 +14,7 @@\n  */\n module core.sys.posix.stdlib;\n \n-private import core.sys.posix.config;\n+import core.sys.posix.config;\n public import core.stdc.stdlib;\n public import core.sys.posix.sys.wait;\n \n@@ -31,6 +31,7 @@ version (Posix):\n extern (C):\n nothrow:\n @nogc:\n+@system:\n \n //\n // Required (defined in core.stdc.stdlib)\n@@ -51,37 +52,37 @@ void    _Exit(int);\n void    abort();\n int     abs(int);\n int     atexit(void function());\n-double  atof(in char*);\n-int     atoi(in char*);\n-c_long  atol(in char*);\n-long    atoll(in char*);\n-void*   bsearch(in void*, in void*, size_t, size_t, int function(in void*, in void*));\n+double  atof(const scope char*);\n+int     atoi(const scope char*);\n+c_long  atol(const scope char*);\n+long    atoll(const scope char*);\n+void*   bsearch(const scope void*, const scope void*, size_t, size_t, int function(const scope void*, const scope void*));\n void*   calloc(size_t, size_t);\n div_t   div(int, int);\n void    exit(int);\n void    free(void*);\n-char*   getenv(in char*);\n+char*   getenv(const scope char*);\n c_long  labs(c_long);\n ldiv_t  ldiv(c_long, c_long);\n long    llabs(long);\n lldiv_t lldiv(long, long);\n void*   malloc(size_t);\n-int     mblen(in char*, size_t);\n-size_t  mbstowcs(wchar_t*, in char*, size_t);\n-int     mbtowc(wchar_t*, in char*, size_t);\n-void    qsort(void*, size_t, size_t, int function(in void*, in void*));\n+int     mblen(const scope char*, size_t);\n+size_t  mbstowcs(wchar_t*, const scope char*, size_t);\n+int     mbtowc(wchar_t*, const scope char*, size_t);\n+void    qsort(void*, size_t, size_t, int function(const scope void*, const scope void*));\n int     rand();\n void*   realloc(void*, size_t);\n void    srand(uint);\n-double  strtod(in char*, char**);\n-float   strtof(in char*, char**);\n-c_long  strtol(in char*, char**, int);\n-real    strtold(in char*, char**);\n-long    strtoll(in char*, char**, int);\n-c_ulong strtoul(in char*, char**, int);\n-ulong   strtoull(in char*, char**, int);\n-int     system(in char*);\n-size_t  wcstombs(char*, in wchar_t*, size_t);\n+double  strtod(const scope char*, char**);\n+float   strtof(const scope char*, char**);\n+c_long  strtol(const scope char*, char**, int);\n+real    strtold(const scope char*, char**);\n+long    strtoll(const scope char*, char**, int);\n+c_ulong strtoul(const scope char*, char**, int);\n+ulong   strtoull(const scope char*, char**, int);\n+int     system(const scope char*);\n+size_t  wcstombs(char*, const scope wchar_t*, size_t);\n int     wctomb(char*, wchar_t);\n */\n \n@@ -138,75 +139,75 @@ else version (CRuntime_UClibc)\n // C Extension (CX)\n //\n /*\n-int setenv(in char*, in char*, int);\n-int unsetenv(in char*);\n+int setenv(const scope char*, const scope char*, int);\n+int unsetenv(const scope char*);\n */\n \n version (CRuntime_Glibc)\n {\n-    int setenv(in char*, in char*, int);\n-    int unsetenv(in char*);\n+    int setenv(const scope char*, const scope char*, int);\n+    int unsetenv(const scope char*);\n \n     void* valloc(size_t); // LEGACY non-standard\n }\n else version (Darwin)\n {\n-    int setenv(in char*, in char*, int);\n-    int unsetenv(in char*);\n+    int setenv(const scope char*, const scope char*, int);\n+    int unsetenv(const scope char*);\n \n     void* valloc(size_t); // LEGACY non-standard\n }\n else version (FreeBSD)\n {\n-    int setenv(in char*, in char*, int);\n-    int unsetenv(in char*);\n+    int setenv(const scope char*, const scope char*, int);\n+    int unsetenv(const scope char*);\n \n     void* valloc(size_t); // LEGACY non-standard\n }\n else version (NetBSD)\n {\n-    int setenv(in char*, in char*, int);\n-    int __unsetenv13(in char*);\n+    int setenv(const scope char*, const scope char*, int);\n+    int __unsetenv13(const scope char*);\n     alias __unsetenv13 unsetenv;\n     void* valloc(size_t); // LEGACY non-standard\n }\n else version (OpenBSD)\n {\n-    int setenv(in char*, in char*, int);\n-    int unsetenv(in char*);\n+    int setenv(const scope char*, const scope char*, int);\n+    int unsetenv(const scope char*);\n \n     void* valloc(size_t); // LEGACY non-standard\n }\n else version (DragonFlyBSD)\n {\n-    int setenv(in char*, in char*, int);\n-    int unsetenv(in char*);\n+    int setenv(const scope char*, const scope char*, int);\n+    int unsetenv(const scope char*);\n \n     void* valloc(size_t); // LEGACY non-standard\n }\n else version (CRuntime_Bionic)\n {\n-    int setenv(in char*, in char*, int);\n-    int unsetenv(in char*);\n+    int setenv(const scope char*, const scope char*, int);\n+    int unsetenv(const scope char*);\n \n     void* valloc(size_t);\n }\n else version (Solaris)\n {\n-    int setenv(in char*, in char*, int);\n-    int unsetenv(in char*);\n+    int setenv(const scope char*, const scope char*, int);\n+    int unsetenv(const scope char*);\n \n     void* valloc(size_t); // LEGACY non-standard\n }\n else version (CRuntime_Musl)\n {\n-    int setenv(in char*, in char*, int);\n-    int unsetenv(in char*);\n+    int setenv(const scope char*, const scope char*, int);\n+    int unsetenv(const scope char*);\n }\n else version (CRuntime_UClibc)\n {\n-    int setenv(in char*, in char*, int);\n-    int unsetenv(in char*);\n+    int setenv(const scope char*, const scope char*, int);\n+    int unsetenv(const scope char*);\n     void* valloc(size_t);\n }\n \n@@ -263,14 +264,14 @@ WIFSTOPPED  (defined in core.sys.posix.sys.wait)\n WSTOPSIG    (defined in core.sys.posix.sys.wait)\n WTERMSIG    (defined in core.sys.posix.sys.wait)\n \n-c_long a64l(in char*);\n+c_long a64l(const scope char*);\n double drand48();\n char*  ecvt(double, int, int *, int *); // LEGACY\n double erand48(ref ushort[3]);\n char*  fcvt(double, int, int *, int *); // LEGACY\n char*  gcvt(double, int, char*); // LEGACY\n // per spec: int getsubopt(char** char* const*, char**);\n-int    getsubopt(char**, in char**, char**);\n+int    getsubopt(char**, const scope char**, char**);\n int    grantpt(int);\n char*  initstate(uint, char*, size_t);\n c_long jrand48(ref ushort[3]);\n@@ -286,10 +287,10 @@ int    posix_openpt(int);\n char*  ptsname(int);\n int    putenv(char*);\n c_long random();\n-char*  realpath(in char*, char*);\n+char*  realpath(const scope char*, char*);\n ushort *seed48(ref ushort[3]);\n-void   setkey(in char*);\n-char*  setstate(in char*);\n+void   setkey(const scope char*);\n+char*  setstate(const scope char*);\n void   srand48(c_long);\n void   srandom(uint);\n int    unlockpt(int);\n@@ -306,13 +307,13 @@ version (CRuntime_Glibc)\n     //WSTOPSIG    (defined in core.sys.posix.sys.wait)\n     //WTERMSIG    (defined in core.sys.posix.sys.wait)\n \n-    c_long a64l(in char*);\n+    c_long a64l(const scope char*);\n     double drand48();\n     char*  ecvt(double, int, int *, int *); // LEGACY\n     double erand48(ref ushort[3]);\n     char*  fcvt(double, int, int *, int *); // LEGACY\n     char*  gcvt(double, int, char*); // LEGACY\n-    int    getsubopt(char**, in char**, char**);\n+    int    getsubopt(char**, const scope char**, char**);\n     int    grantpt(int);\n     char*  initstate(uint, char*, size_t);\n     c_long jrand48(ref ushort[3]);\n@@ -328,10 +329,10 @@ version (CRuntime_Glibc)\n     char*  ptsname(int);\n     int    putenv(char*);\n     c_long random();\n-    char*  realpath(in char*, char*);\n+    char*  realpath(const scope char*, char*);\n     ushort *seed48(ref ushort[3]);\n-    void   setkey(in char*);\n-    char*  setstate(in char*);\n+    void   setkey(const scope char*);\n+    char*  setstate(const scope char*);\n     void   srand48(c_long);\n     void   srandom(uint);\n     int    unlockpt(int);\n@@ -357,13 +358,13 @@ else version (Darwin)\n     //WSTOPSIG    (defined in core.sys.posix.sys.wait)\n     //WTERMSIG    (defined in core.sys.posix.sys.wait)\n \n-    c_long a64l(in char*);\n+    c_long a64l(const scope char*);\n     double drand48();\n     char*  ecvt(double, int, int *, int *); // LEGACY\n     double erand48(ref ushort[3]);\n     char*  fcvt(double, int, int *, int *); // LEGACY\n     char*  gcvt(double, int, char*); // LEGACY\n-    int    getsubopt(char**, in char**, char**);\n+    int    getsubopt(char**, const scope char**, char**);\n     int    grantpt(int);\n     char*  initstate(uint, char*, size_t);\n     c_long jrand48(ref ushort[3]);\n@@ -379,10 +380,10 @@ else version (Darwin)\n     char*  ptsname(int);\n     int    putenv(char*);\n     c_long random();\n-    char*  realpath(in char*, char*);\n+    char*  realpath(const scope char*, char*);\n     ushort *seed48(ref ushort[3]);\n-    void   setkey(in char*);\n-    char*  setstate(in char*);\n+    void   setkey(const scope char*);\n+    char*  setstate(const scope char*);\n     void   srand48(c_long);\n     void   srandom(uint);\n     int    unlockpt(int);\n@@ -398,13 +399,13 @@ else version (FreeBSD)\n     //WSTOPSIG    (defined in core.sys.posix.sys.wait)\n     //WTERMSIG    (defined in core.sys.posix.sys.wait)\n \n-    c_long a64l(in char*);\n+    c_long a64l(const scope char*);\n     double drand48();\n     //char*  ecvt(double, int, int *, int *); // LEGACY\n     double erand48(ref ushort[3]);\n     //char*  fcvt(double, int, int *, int *); // LEGACY\n     //char*  gcvt(double, int, char*); // LEGACY\n-    int    getsubopt(char**, in char**, char**);\n+    int    getsubopt(char**, const scope char**, char**);\n     int    grantpt(int);\n     char*  initstate(uint, char*, size_t);\n     c_long jrand48(ref ushort[3]);\n@@ -420,10 +421,10 @@ else version (FreeBSD)\n     char*  ptsname(int);\n     int    putenv(char*);\n     c_long random();\n-    char*  realpath(in char*, char*);\n+    char*  realpath(const scope char*, char*);\n     ushort *seed48(ref ushort[3]);\n-    void   setkey(in char*);\n-    char*  setstate(in char*);\n+    void   setkey(const scope char*);\n+    char*  setstate(const scope char*);\n     void   srand48(c_long);\n     void   srandom(uint);\n     int    unlockpt(int);\n@@ -439,13 +440,13 @@ else version (NetBSD)\n     //WSTOPSIG    (defined in core.sys.posix.sys.wait)\n     //WTERMSIG    (defined in core.sys.posix.sys.wait)\n \n-    c_long a64l(in char*);\n+    c_long a64l(const scope char*);\n     double drand48();\n     //char*  ecvt(double, int, int *, int *); // LEGACY\n     double erand48(ref ushort[3]);\n     //char*  fcvt(double, int, int *, int *); // LEGACY\n     //char*  gcvt(double, int, char*); // LEGACY\n-    int    getsubopt(char**, in char**, char**);\n+    int    getsubopt(char**, const scope char**, char**);\n     int    grantpt(int);\n     char*  initstate(uint, char*, size_t);\n     c_long jrand48(ref ushort[3]);\n@@ -461,10 +462,10 @@ else version (NetBSD)\n     char*  ptsname(int);\n     int    putenv(char*);\n     c_long random();\n-    char*  realpath(in char*, char*);\n+    char*  realpath(const scope char*, char*);\n     ushort *seed48(ref ushort[3]);\n-    void   setkey(in char*);\n-    char*  setstate(in char*);\n+    void   setkey(const scope char*);\n+    char*  setstate(const scope char*);\n     void   srand48(c_long);\n     void   srandom(uint);\n     int    unlockpt(int);\n@@ -480,13 +481,13 @@ else version (OpenBSD)\n     //WSTOPSIG    (defined in core.sys.posix.sys.wait)\n     //WTERMSIG    (defined in core.sys.posix.sys.wait)\n \n-    c_long a64l(in char*);\n+    c_long a64l(const scope char*);\n     double drand48();\n     //char*  ecvt(double, int, int *, int *); // LEGACY\n     double erand48(ref ushort[3]);\n     //char*  fcvt(double, int, int *, int *); // LEGACY\n     //char*  gcvt(double, int, char*); // LEGACY\n-    int    getsubopt(char**, in char**, char**);\n+    int    getsubopt(char**, const scope char**, char**);\n     int    grantpt(int);\n     char*  initstate(uint, char*, size_t);\n     c_long jrand48(ref ushort[3]);\n@@ -502,10 +503,10 @@ else version (OpenBSD)\n     char*  ptsname(int);\n     int    putenv(char*);\n     c_long random();\n-    char*  realpath(in char*, char*);\n+    char*  realpath(const scope char*, char*);\n     ushort *seed48(ref ushort[3]);\n-    // void   setkey(in char*); // not implemented\n-    char*  setstate(in char*);\n+    // void   setkey(const scope char*); // not implemented\n+    char*  setstate(const scope char*);\n     void   srand48(c_long);\n     void   srandom(uint);\n     int    unlockpt(int);\n@@ -521,13 +522,13 @@ else version (DragonFlyBSD)\n     //WSTOPSIG    (defined in core.sys.posix.sys.wait)\n     //WTERMSIG    (defined in core.sys.posix.sys.wait)\n \n-    c_long a64l(in char*);\n+    c_long a64l(const scope char*);\n     double drand48();\n     //char*  ecvt(double, int, int *, int *); // LEGACY\n     double erand48(ref ushort[3]);\n     //char*  fcvt(double, int, int *, int *); // LEGACY\n     //char*  gcvt(double, int, char*); // LEGACY\n-    int    getsubopt(char**, in char**, char**);\n+    int    getsubopt(char**, const scope char**, char**);\n     int    grantpt(int);\n     char*  initstate(uint, char*, size_t);\n     c_long jrand48(ref ushort[3]);\n@@ -543,10 +544,10 @@ else version (DragonFlyBSD)\n     char*  ptsname(int);\n     int    putenv(char*);\n     c_long random();\n-    char*  realpath(in char*, char*);\n+    char*  realpath(const scope char*, char*);\n     ushort *seed48(ref ushort[3]);\n-    void   setkey(in char*);\n-    char*  setstate(in char*);\n+    void   setkey(const scope char*);\n+    char*  setstate(const scope char*);\n     void   srand48(c_long);\n     void   srandom(uint);\n     int    unlockpt(int);\n@@ -564,23 +565,23 @@ else version (CRuntime_Bionic)\n     c_long  mrand48();\n     c_long  nrand48(ref ushort[3]);\n     char*   ptsname(int);\n-    int     putenv(in char*);\n+    int     putenv(const scope char*);\n     c_long  random() { return lrand48(); }\n-    char*   realpath(in char*, char*);\n+    char*   realpath(const scope char*, char*);\n     ushort* seed48(ref ushort[3]);\n     void    srand48(c_long);\n     void    srandom(uint s) { srand48(s); }\n     int     unlockpt(int);\n }\n else version (CRuntime_Musl)\n {\n-    c_long a64l(in char*);\n+    c_long a64l(const scope char*);\n     double drand48();\n     char*  ecvt(double, int, int *, int *); // LEGACY\n     double erand48(ref ushort[3]);\n     char*  fcvt(double, int, int *, int *); // LEGACY\n     char*  gcvt(double, int, char*); // LEGACY\n-    int    getsubopt(char**, in char**, char**);\n+    int    getsubopt(char**, const scope char**, char**);\n     int    grantpt(int);\n     char*  initstate(uint, char*, size_t);\n     c_long jrand48(ref ushort[3]);\n@@ -596,10 +597,10 @@ else version (CRuntime_Musl)\n     char*  ptsname(int);\n     int    putenv(char*);\n     c_long random();\n-    char*  realpath(in char*, char*);\n+    char*  realpath(const scope char*, char*);\n     ushort *seed48(ref ushort[3]);\n-    void   setkey(in char*);\n-    char*  setstate(in char*);\n+    void   setkey(const scope char*);\n+    char*  setstate(const scope char*);\n     void   srand48(c_long);\n     void   srandom(uint);\n     int    unlockpt(int);\n@@ -626,13 +627,13 @@ else version (Solaris)\n     //WSTOPSIG    (defined in core.sys.posix.sys.wait)\n     //WTERMSIG    (defined in core.sys.posix.sys.wait)\n \n-    c_long a64l(in char*);\n+    c_long a64l(const scope char*);\n     double drand48();\n     char*  ecvt(double, int, int *, int *); // LEGACY\n     double erand48(ref ushort[3]);\n     char*  fcvt(double, int, int *, int *); // LEGACY\n     char*  gcvt(double, int, char*); // LEGACY\n-    int    getsubopt(char**, in char**, char**);\n+    int    getsubopt(char**, const scope char**, char**);\n     int    grantpt(int);\n     char*  initstate(uint, char*, size_t);\n     c_long jrand48(ref ushort[3]);\n@@ -648,10 +649,10 @@ else version (Solaris)\n     char*  ptsname(int);\n     int    putenv(char*);\n     c_long random();\n-    char*  realpath(in char*, char*);\n+    char*  realpath(const scope char*, char*);\n     ushort *seed48(ref ushort[3]);\n-    void   setkey(in char*);\n-    char*  setstate(in char*);\n+    void   setkey(const scope char*);\n+    char*  setstate(const scope char*);\n     void   srand48(c_long);\n     void   srandom(uint);\n     int    unlockpt(int);\n@@ -675,13 +676,13 @@ else version (Solaris)\n }\n else version (CRuntime_UClibc)\n {\n-    c_long a64l(in char*);\n+    c_long a64l(const scope char*);\n     double drand48();\n     char*  ecvt(double, int, int *, int *);\n     double erand48(ref ushort[3]);\n     char*  fcvt(double, int, int *, int *);\n     char*  gcvt(double, int, char*);\n-    int    getsubopt(char**, in char**, char**);\n+    int    getsubopt(char**, const scope char**, char**);\n     int    grantpt(int);\n     char*  initstate(uint, char*, size_t);\n     c_long jrand48(ref ushort[3]);\n@@ -696,10 +697,10 @@ else version (CRuntime_UClibc)\n     char*  ptsname(int);\n     int    putenv(char*);\n     c_long random();\n-    char*  realpath(in char*, char*);\n+    char*  realpath(const scope char*, char*);\n     ushort* seed48(ref ushort[3]);\n-    void   setkey(in char*);\n-    char*  setstate(in char*);\n+    void   setkey(const scope char*);\n+    char*  setstate(const scope char*);\n     void   srand48(c_long);\n     void   srandom(uint);\n     int    unlockpt(int);"}, {"sha": "e17dfc66d33bed8d2649b1e4b829cb5791458083", "filename": "libphobos/libdruntime/core/sys/posix/string.d", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fstring.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fstring.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fstring.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -0,0 +1,52 @@\n+/**\n+ * D header file for POSIX's <string.h>.\n+ *\n+ * Note:\n+ * - The <string.h> header shall define NULL and size_t as described in <stddef.h>.\n+ *   However, D has builtin `null` and `size_t` is defined in `object`.\n+ *\n+ * See_Also:  https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/string.h.html\n+ * Copyright: D Language Foundation, 2019\n+ * License:   $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n+ * Authors:   Mathias 'Geod24' Lang\n+ * Standards: The Open Group Base Specifications Issue 7, 2018 edition\n+ * Source:    $(DRUNTIMESRC core/sys/posix/_string.d)\n+ */\n+module core.sys.posix.string;\n+\n+version (Posix):\n+extern(C):\n+@system:\n+nothrow:\n+@nogc:\n+\n+/// Exposes `locale_t` as defined in `core.sys.posix.locale` (`<locale.h>`)\n+public import core.sys.posix.locale : locale_t;\n+\n+/**\n+ * Exposes the C99 functions\n+ *\n+ * C extensions and XSI extensions are missing\n+ */\n+public import core.stdc.string;\n+\n+/// Copy string until character found\n+void*  memccpy(return void* dst, scope const void* src, int c, size_t n);\n+/// Copy string (including terminating '\\0')\n+char*  stpcpy(return char* dst, scope const char* src);\n+/// Ditto\n+char*  stpncpy(return char* dst, const char* src, size_t len);\n+/// Compare strings according to current collation\n+int    strcoll_l(scope const char* s1, scope const char* s2, locale_t locale);\n+///\n+char*  strerror_l(int, locale_t);\n+/// Save a copy of a string\n+char*  strndup(scope const char* str, size_t len);\n+/// Find length of string up to `maxlen`\n+size_t strnlen(scope const char* str, size_t maxlen);\n+/// System signal messages\n+const(char)*  strsignal(int);\n+/// Isolate sequential tokens in a null-terminated string\n+char*  strtok_r(return char* str, scope const char* sep, char** context) pure;\n+/// Transform a string under locale\n+size_t strxfrm_l(char* s1, scope const char* s2, size_t n, locale_t locale);"}, {"sha": "96fbcccaee74bea344e58e210da7c05cc1e9885f", "filename": "libphobos/libdruntime/core/sys/posix/strings.d", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fstrings.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fstrings.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fstrings.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -0,0 +1,34 @@\n+/**\n+ * D header file for POSIX's <strings.h>.\n+ *\n+ * Note: Do not mistake this module for <string.h> (singular),\n+ * available at `core.sys.posix.string`.\n+ *\n+ * See_Also:  https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/strings.h.html\n+ * Copyright: D Language Foundation, 2019\n+ * License:   $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n+ * Authors:   Mathias 'Geod24' Lang\n+ * Standards: The Open Group Base Specifications Issue 7, 2018 edition\n+ * Source:    $(DRUNTIMESRC core/sys/posix/_strings.d)\n+ */\n+module core.sys.posix.strings;\n+\n+version (Posix):\n+extern(C):\n+@system:\n+nothrow:\n+@nogc:\n+\n+///\n+public import core.sys.posix.locale : locale_t;\n+\n+/// Find first bit set in a word\n+int ffs(int i) @safe pure;\n+/// Compare two strings ignoring case\n+int strcasecmp(scope const char* s1, scope const char* s2);\n+/// Compare two strings ignoring case, with the specified locale\n+int strcasecmp_l(scope const char* s1, scope const char* s2, scope locale_t locale);\n+/// Compare two strings ignoring case, up to n characters\n+int strncasecmp(scope const char* s1, scope const char* s2, size_t n);\n+/// Compare two strings ignoring case, with the specified locale, up to n characters\n+int strncasecmp_l(scope const char* s1, const char* s2, size_t n, locale_t locale);"}, {"sha": "afb6f82d978e2c42881d2864164e0d60d14c26f6", "filename": "libphobos/libdruntime/core/sys/posix/sys/filio.d", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Ffilio.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Ffilio.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Ffilio.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -20,6 +20,7 @@ else version (WatchOS)\n version (Posix):\n \n nothrow @nogc:\n+@system:\n \n version (Darwin)\n {"}, {"sha": "4c1a820161c128b7180cb7e026a48fb50eaa5689", "filename": "libphobos/libdruntime/core/sys/posix/sys/ioccom.d", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fioccom.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fioccom.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fioccom.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -18,6 +18,7 @@ else version (WatchOS)\n version (Posix):\n \n nothrow @nogc:\n+@system:\n \n version (Darwin)\n {"}, {"sha": "0266200c8112c6beadb89fcf7501ad394ec29ae0", "filename": "libphobos/libdruntime/core/sys/posix/sys/ioctl.d", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fioctl.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fioctl.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fioctl.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -29,6 +29,7 @@ else version (WatchOS)\n version (Posix):\n \n extern (C) nothrow @nogc:\n+@system:\n \n version (CRuntime_Glibc)\n {\n@@ -213,7 +214,7 @@ version (CRuntime_Glibc)\n     enum TIOCGSID = 0x5429;\n \n     enum TCGETS2 = _IOR!termios2('T', 0x2A);\n-    enum TCSETS2 = _IOR!termios2('T', 0x2B);\n+    enum TCSETS2 = _IOW!termios2('T', 0x2B);\n     enum TCSETSW2 = _IOW!termios2('T', 0x2C);\n     enum TCSETSF2 = _IOW!termios2('T', 0x2D);\n \n@@ -624,7 +625,7 @@ else version (CRuntime_UClibc)\n     enum TIOCGSID = 0x5429;\n \n     enum TCGETS2 = _IOR!termios2('T', 0x2A);\n-    enum TCSETS2 = _IOR!termios2('T', 0x2B);\n+    enum TCSETS2 = _IOW!termios2('T', 0x2B);\n     enum TCSETSW2 = _IOW!termios2('T', 0x2C);\n     enum TCSETSF2 = _IOW!termios2('T', 0x2D);\n "}, {"sha": "d397a28ec5afb6592fd637dde7bbf5b748d2acc1", "filename": "libphobos/libdruntime/core/sys/posix/sys/ipc.d", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fipc.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fipc.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fipc.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -14,7 +14,7 @@\n  */\n module core.sys.posix.sys.ipc;\n \n-private import core.sys.posix.config;\n+import core.sys.posix.config;\n public import core.sys.posix.sys.types; // for uid_t, gid_t, mode_t, key_t\n \n version (OSX)\n@@ -28,6 +28,7 @@ else version (WatchOS)\n \n version (Posix):\n extern (C) nothrow @nogc:\n+@system:\n \n //\n // XOpen (XSI)\n@@ -52,7 +53,7 @@ IPC_RMID\n IPC_SET\n IPC_STAT\n \n-key_t ftok(in char*, int);\n+key_t ftok(const scope char*, int);\n */\n \n version (CRuntime_Glibc)\n@@ -82,7 +83,7 @@ version (CRuntime_Glibc)\n     enum IPC_SET        = 1;\n     enum IPC_STAT       = 2;\n \n-    key_t ftok(in char*, int);\n+    key_t ftok(const scope char*, int);\n }\n else version (Darwin)\n {\n@@ -122,7 +123,7 @@ else version (FreeBSD)\n     enum IPC_SET        = 1;\n     enum IPC_STAT       = 2;\n \n-    key_t ftok(in char*, int);\n+    key_t ftok(const scope char*, int);\n }\n else version (NetBSD)\n {\n@@ -147,7 +148,7 @@ else version (NetBSD)\n     enum IPC_SET        = 1;\n     enum IPC_STAT       = 2;\n \n-    key_t ftok(in char*, int);\n+    key_t ftok(const scope char*, int);\n }\n else version (OpenBSD)\n {\n@@ -172,7 +173,7 @@ else version (OpenBSD)\n     enum IPC_SET        = 1;\n     enum IPC_STAT       = 2;\n \n-    key_t ftok(in char*, int);\n+    key_t ftok(const scope char*, int);\n }\n else version (DragonFlyBSD)\n {\n@@ -197,7 +198,7 @@ else version (DragonFlyBSD)\n     enum IPC_SET        = 1;\n     enum IPC_STAT       = 2;\n \n-    key_t ftok(in char*, int);\n+    key_t ftok(const scope char*, int);\n }\n else version (CRuntime_Bionic)\n {\n@@ -240,7 +241,7 @@ else version (CRuntime_Bionic)\n     enum IPC_SET        = 1;\n     enum IPC_STAT       = 2;\n \n-    key_t ftok(in char*, int);\n+    key_t ftok(const scope char*, int);\n }\n else version (CRuntime_UClibc)\n {\n@@ -270,5 +271,5 @@ else version (CRuntime_UClibc)\n     enum IPC_STAT       = 2;\n     enum IPC_INFO       = 3;\n \n-    key_t ftok(in char*, int);\n+    key_t ftok(const scope char*, int);\n }"}, {"sha": "a74a213691cf9eb3075bc7a5d2cbab3d091949da", "filename": "libphobos/libdruntime/core/sys/posix/sys/mman.d", "status": "modified", "additions": 48, "deletions": 47, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fmman.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fmman.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fmman.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -14,7 +14,7 @@\n  */\n module core.sys.posix.sys.mman;\n \n-private import core.sys.posix.config;\n+import core.sys.posix.config;\n public import core.sys.posix.sys.types; // for off_t, mode_t\n \n version (OSX)\n@@ -45,6 +45,7 @@ version (X86_64)  version = X86_Any;\n \n version (Posix):\n extern (C) nothrow @nogc:\n+@system:\n \n //\n // Advisory Information (ADV)\n@@ -511,7 +512,7 @@ else version (CRuntime_Bionic)\n     enum MS_ASYNC       = 1;\n     enum MS_INVALIDATE  = 2;\n \n-    int msync(in void*, size_t, int);\n+    int msync(const scope void*, size_t, int);\n }\n else version (CRuntime_Musl)\n {\n@@ -694,59 +695,59 @@ else\n // Range Memory Locking (MLR)\n //\n /*\n-int mlock(in void*, size_t);\n-int munlock(in void*, size_t);\n+int mlock(const scope void*, size_t);\n+int munlock(const scope void*, size_t);\n */\n \n version (CRuntime_Glibc)\n {\n-    int mlock(in void*, size_t);\n-    int munlock(in void*, size_t);\n+    int mlock(const scope void*, size_t);\n+    int munlock(const scope void*, size_t);\n }\n else version (Darwin)\n {\n-    int mlock(in void*, size_t);\n-    int munlock(in void*, size_t);\n+    int mlock(const scope void*, size_t);\n+    int munlock(const scope void*, size_t);\n }\n else version (FreeBSD)\n {\n-    int mlock(in void*, size_t);\n-    int munlock(in void*, size_t);\n+    int mlock(const scope void*, size_t);\n+    int munlock(const scope void*, size_t);\n }\n else version (NetBSD)\n {\n-    int mlock(in void*, size_t);\n-    int munlock(in void*, size_t);\n+    int mlock(const scope void*, size_t);\n+    int munlock(const scope void*, size_t);\n }\n else version (OpenBSD)\n {\n-    int mlock(in void*, size_t);\n-    int munlock(in void*, size_t);\n+    int mlock(const scope void*, size_t);\n+    int munlock(const scope void*, size_t);\n }\n else version (DragonFlyBSD)\n {\n-    int mlock(in void*, size_t);\n-    int munlock(in void*, size_t);\n+    int mlock(const scope void*, size_t);\n+    int munlock(const scope void*, size_t);\n }\n else version (Solaris)\n {\n-    int mlock(in void*, size_t);\n-    int munlock(in void*, size_t);\n+    int mlock(const scope void*, size_t);\n+    int munlock(const scope void*, size_t);\n }\n else version (CRuntime_Bionic)\n {\n-    int mlock(in void*, size_t);\n-    int munlock(in void*, size_t);\n+    int mlock(const scope void*, size_t);\n+    int munlock(const scope void*, size_t);\n }\n else version (CRuntime_Musl)\n {\n-    int mlock(in void*, size_t);\n-    int munlock(in void*, size_t);\n+    int mlock(const scope void*, size_t);\n+    int munlock(const scope void*, size_t);\n }\n else version (CRuntime_UClibc)\n {\n-    int mlock(in void*, size_t);\n-    int munlock(in void*, size_t);\n+    int mlock(const scope void*, size_t);\n+    int munlock(const scope void*, size_t);\n }\n else\n {\n@@ -790,7 +791,7 @@ else version (Solaris)\n }\n else version (CRuntime_Bionic)\n {\n-    int mprotect(in void*, size_t, int);\n+    int mprotect(const scope void*, size_t, int);\n }\n else version (CRuntime_Musl)\n {\n@@ -809,57 +810,57 @@ else\n // Shared Memory Objects (SHM)\n //\n /*\n-int shm_open(in char*, int, mode_t);\n-int shm_unlink(in char*);\n+int shm_open(const scope char*, int, mode_t);\n+int shm_unlink(const scope char*);\n */\n \n version (CRuntime_Glibc)\n {\n-    int shm_open(in char*, int, mode_t);\n-    int shm_unlink(in char*);\n+    int shm_open(const scope char*, int, mode_t);\n+    int shm_unlink(const scope char*);\n }\n else version (Darwin)\n {\n-    int shm_open(in char*, int, mode_t);\n-    int shm_unlink(in char*);\n+    int shm_open(const scope char*, int, mode_t);\n+    int shm_unlink(const scope char*);\n }\n else version (FreeBSD)\n {\n-    int shm_open(in char*, int, mode_t);\n-    int shm_unlink(in char*);\n+    int shm_open(const scope char*, int, mode_t);\n+    int shm_unlink(const scope char*);\n }\n else version (NetBSD)\n {\n-    int shm_open(in char*, int, mode_t);\n-    int shm_unlink(in char*);\n+    int shm_open(const scope char*, int, mode_t);\n+    int shm_unlink(const scope char*);\n }\n else version (OpenBSD)\n {\n-    int shm_open(in char*, int, mode_t);\n-    int shm_unlink(in char*);\n+    int shm_open(const scope char*, int, mode_t);\n+    int shm_unlink(const scope char*);\n }\n else version (DragonFlyBSD)\n {\n-    int shm_open(in char*, int, mode_t);\n-    int shm_unlink(in char*);\n+    int shm_open(const scope char*, int, mode_t);\n+    int shm_unlink(const scope char*);\n }\n else version (Solaris)\n {\n-    int shm_open(in char*, int, mode_t);\n-    int shm_unlink(in char*);\n+    int shm_open(const scope char*, int, mode_t);\n+    int shm_unlink(const scope char*);\n }\n else version (CRuntime_Bionic)\n {\n }\n else version (CRuntime_Musl)\n {\n-    int shm_open(in char*, int, mode_t);\n-    int shm_unlink(in char*);\n+    int shm_open(const scope char*, int, mode_t);\n+    int shm_unlink(const scope char*);\n }\n else version (CRuntime_UClibc)\n {\n-    int shm_open(in char*, int, mode_t);\n-    int shm_unlink(in char*);\n+    int shm_open(const scope char*, int, mode_t);\n+    int shm_unlink(const scope char*);\n }\n else\n {\n@@ -879,7 +880,7 @@ struct posix_typed_mem_info\n     size_t posix_tmi_length;\n }\n \n-int posix_mem_offset(in void*, size_t, off_t *, size_t *, int *);\n+int posix_mem_offset(const scope void*, size_t, off_t *, size_t *, int *);\n int posix_typed_mem_get_info(int, struct posix_typed_mem_info *);\n-int posix_typed_mem_open(in char*, int, int);\n+int posix_typed_mem_open(const scope char*, int, int);\n */"}, {"sha": "4760f2e22f6f0fc134b42b37fe0af394e0e76bea", "filename": "libphobos/libdruntime/core/sys/posix/sys/msg.d", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fmsg.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fmsg.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fmsg.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -14,6 +14,7 @@ import core.stdc.config;\n version (CRuntime_Glibc):\n // Some of these may be from linux kernel headers.\n extern (C):\n+@system:\n \n version (ARM)     version = ARM_Any;\n version (AArch64) version = ARM_Any;"}, {"sha": "c5d584c580401aabc8d946af8b257cf0f9e08edf", "filename": "libphobos/libdruntime/core/sys/posix/sys/resource.d", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fresource.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fresource.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fresource.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -23,6 +23,7 @@ else version (WatchOS)\n     version = Darwin;\n \n nothrow @nogc extern(C):\n+@system:\n \n //\n // XOpen (XSI)\n@@ -528,7 +529,7 @@ else version (CRuntime_Musl)\n     enum RLIM_INFINITY = cast(c_ulong)(~0UL);\n \n     int getrlimit(int, rlimit*);\n-    int setrlimit(int, in rlimit*);\n+    int setrlimit(int, const scope rlimit*);\n     alias getrlimit getrlimit64;\n     alias setrlimit setrlimit64;\n     enum\n@@ -677,72 +678,72 @@ version (CRuntime_Glibc)\n     static if (__USE_FILE_OFFSET64)\n     {\n         int getrlimit64(int, rlimit*);\n-        int setrlimit64(int, in rlimit*);\n+        int setrlimit64(int, const scope rlimit*);\n         alias getrlimit = getrlimit64;\n         alias setrlimit = setrlimit64;\n     }\n     else\n     {\n         int getrlimit(int, rlimit*);\n-        int setrlimit(int, in rlimit*);\n+        int setrlimit(int, const scope rlimit*);\n     }\n     int getrusage(int, rusage*);\n }\n else version (CRuntime_Bionic)\n {\n     int getrlimit(int, rlimit*);\n     int getrusage(int, rusage*);\n-    int setrlimit(int, in rlimit*);\n+    int setrlimit(int, const scope rlimit*);\n }\n else version (Darwin)\n {\n     int getrlimit(int, rlimit*);\n     int getrusage(int, rusage*);\n-    int setrlimit(int, in rlimit*);\n+    int setrlimit(int, const scope rlimit*);\n }\n else version (FreeBSD)\n {\n     int getrlimit(int, rlimit*);\n     int getrusage(int, rusage*);\n-    int setrlimit(int, in rlimit*);\n+    int setrlimit(int, const scope rlimit*);\n }\n else version (NetBSD)\n {\n     int getrlimit(int, rlimit*);\n     int getrusage(int, rusage*);\n-    int setrlimit(int, in rlimit*);\n+    int setrlimit(int, const scope rlimit*);\n }\n else version (OpenBSD)\n {\n     int getrlimit(int, rlimit*);\n     int getrusage(int, rusage*);\n-    int setrlimit(int, in rlimit*);\n+    int setrlimit(int, const scope rlimit*);\n }\n else version (DragonFlyBSD)\n {\n     int getrlimit(int, rlimit*);\n     int getrusage(int, rusage*);\n-    int setrlimit(int, in rlimit*);\n+    int setrlimit(int, const scope rlimit*);\n }\n else version (Solaris)\n {\n     int getrlimit(int, rlimit*);\n     int getrusage(int, rusage*);\n-    int setrlimit(int, in rlimit*);\n+    int setrlimit(int, const scope rlimit*);\n }\n else version (CRuntime_UClibc)\n {\n     static if (__USE_FILE_OFFSET64)\n     {\n         int getrlimit64(int, rlimit*);\n-        int setrlimit64(int, in rlimit*);\n+        int setrlimit64(int, const scope rlimit*);\n         alias getrlimit = getrlimit64;\n         alias setrlimit = setrlimit64;\n     }\n     else\n     {\n         int getrlimit(int, rlimit*);\n-        int setrlimit(int, in rlimit*);\n+        int setrlimit(int, const scope rlimit*);\n     }\n     int getrusage(int, rusage*);\n }"}, {"sha": "2a659c30dc0dd5f6a4578c8537e0372c8ada6ce2", "filename": "libphobos/libdruntime/core/sys/posix/sys/select.d", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fselect.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fselect.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fselect.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -8,7 +8,7 @@\n  */\n module core.sys.posix.sys.select;\n \n-private import core.sys.posix.config;\n+import core.sys.posix.config;\n public import core.stdc.time;           // for timespec\n public import core.sys.posix.sys.time;  // for timeval\n public import core.sys.posix.sys.types; // for time_t\n@@ -27,6 +27,7 @@ else version (WatchOS)\n \n version (Posix):\n extern (C) nothrow @nogc:\n+@system:\n \n //\n // Required\n@@ -46,7 +47,7 @@ void FD_ZERO(fd_set* fdset);\n \n FD_SETSIZE\n \n-int  pselect(int, fd_set*, fd_set*, fd_set*, in timespec*, in sigset_t*);\n+int  pselect(int, fd_set*, fd_set*, fd_set*, const scope timespec*, const scope sigset_t*);\n int  select(int, fd_set*, fd_set*, fd_set*, timeval*);\n */\n \n@@ -130,7 +131,7 @@ version (CRuntime_Glibc)\n          __result; }))\n      +/\n \n-    int pselect(int, fd_set*, fd_set*, fd_set*, in timespec*, in sigset_t*);\n+    int pselect(int, fd_set*, fd_set*, fd_set*, const scope timespec*, const scope sigset_t*);\n     int select(int, fd_set*, fd_set*, fd_set*, timeval*);\n }\n else version (Darwin)\n@@ -168,7 +169,7 @@ else version (Darwin)\n         fdset.fds_bits[0 .. $] = 0;\n     }\n \n-    int pselect(int, fd_set*, fd_set*, fd_set*, in timespec*, in sigset_t*);\n+    int pselect(int, fd_set*, fd_set*, fd_set*, const scope timespec*, const scope sigset_t*);\n     int select(int, fd_set*, fd_set*, fd_set*, timeval*);\n }\n else version (FreeBSD)\n@@ -217,7 +218,7 @@ else version (FreeBSD)\n             _p.__fds_bits[--_n] = 0;\n     }\n \n-    int pselect(int, fd_set*, fd_set*, fd_set*, in timespec*, in sigset_t*);\n+    int pselect(int, fd_set*, fd_set*, fd_set*, const scope timespec*, const scope sigset_t*);\n     int select(int, fd_set*, fd_set*, fd_set*, timeval*);\n }\n else version (NetBSD)\n@@ -266,7 +267,7 @@ else version (NetBSD)\n             _p.__fds_bits[--_n] = 0;\n     }\n \n-    int pselect(int, fd_set*, fd_set*, fd_set*, in timespec*, in sigset_t*);\n+    int pselect(int, fd_set*, fd_set*, fd_set*, const scope timespec*, const scope sigset_t*);\n     int select(int, fd_set*, fd_set*, fd_set*, timeval*);\n }\n else version (OpenBSD)\n@@ -313,7 +314,7 @@ else version (OpenBSD)\n             _p.__fds_bits[--_n] = 0;\n     }\n \n-    int pselect(int, fd_set*, fd_set*, fd_set*, in timespec*, in sigset_t*);\n+    int pselect(int, fd_set*, fd_set*, fd_set*, const scope timespec*, const scope sigset_t*);\n     int select(int, fd_set*, fd_set*, fd_set*, timeval*);\n }\n else version (DragonFlyBSD)\n@@ -362,7 +363,7 @@ else version (DragonFlyBSD)\n             _p.__fds_bits[--_n] = 0;\n     }\n \n-    int pselect(int, fd_set*, fd_set*, fd_set*, in timespec*, in sigset_t*);\n+    int pselect(int, fd_set*, fd_set*, fd_set*, const scope timespec*, const scope sigset_t*);\n     int select(int, fd_set*, fd_set*, fd_set*, timeval*);\n }\n else version (Solaris)\n@@ -406,7 +407,7 @@ else version (Solaris)\n     }\n \n     int select(int, fd_set*, fd_set*, fd_set*, timeval*);\n-    int pselect(int, fd_set*, fd_set*, fd_set*, in timespec*, in sigset_t*);\n+    int pselect(int, fd_set*, fd_set*, fd_set*, const scope timespec*, const scope sigset_t*);\n }\n else version (CRuntime_Bionic)\n {\n@@ -454,7 +455,7 @@ else version (CRuntime_Bionic)\n         fdset.fds_bits[0 .. $] = 0;\n     }\n \n-    int pselect(int, fd_set*, fd_set*, fd_set*, in timespec*, in sigset_t*);\n+    int pselect(int, fd_set*, fd_set*, fd_set*, const scope timespec*, const scope sigset_t*);\n     int select(int, fd_set*, fd_set*, fd_set*, timeval*);\n }\n else version (CRuntime_Musl)\n@@ -501,7 +502,7 @@ else version (CRuntime_Musl)\n     {\n         fdset.fds_bits[0 .. $] = 0;\n     }\n-    int pselect(int, fd_set*, fd_set*, fd_set*, in timespec*, in sigset_t*);\n+    int pselect(int, fd_set*, fd_set*, fd_set*, const scope timespec*, const scope sigset_t*);\n     int select(int, fd_set*, fd_set*, fd_set*, timeval*);\n }\n else version (CRuntime_UClibc)\n@@ -549,7 +550,7 @@ else version (CRuntime_UClibc)\n         fdset.fds_bits[0 .. $] = 0;\n     }\n \n-    int pselect(int, fd_set*, fd_set*, fd_set*, in timespec*, in sigset_t*);\n+    int pselect(int, fd_set*, fd_set*, fd_set*, const scope timespec*, const scope sigset_t*);\n     int select(int, fd_set*, fd_set*, fd_set*, timeval*);\n }\n else"}, {"sha": "2e85096ba4aa06e54f151938db93913c50ec85af", "filename": "libphobos/libdruntime/core/sys/posix/sys/shm.d", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fshm.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fshm.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fshm.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -14,7 +14,7 @@\n  */\n module core.sys.posix.sys.shm;\n \n-private import core.sys.posix.config;\n+import core.sys.posix.config;\n public import core.sys.posix.sys.types; // for pid_t, time_t, key_t\n public import core.sys.posix.sys.ipc;\n \n@@ -29,6 +29,7 @@ else version (WatchOS)\n \n version (Posix):\n extern (C) nothrow @nogc:\n+@system:\n \n //\n // XOpen (XSI)\n@@ -53,9 +54,9 @@ struct shmid_ds\n     time_t      shm_ctime;\n }\n \n-void* shmat(int, in void*, int);\n+void* shmat(int, const scope void*, int);\n int   shmctl(int, int, shmid_ds*);\n-int   shmdt(in void*);\n+int   shmdt(const scope void*);\n int   shmget(key_t, size_t, int);\n */\n \n@@ -87,9 +88,9 @@ version (CRuntime_Glibc)\n         c_ulong     __unused5;\n     }\n \n-    void* shmat(int, in void*, int);\n+    void* shmat(int, const scope void*, int);\n     int   shmctl(int, int, shmid_ds*);\n-    int   shmdt(in void*);\n+    int   shmdt(const scope void*);\n     int   shmget(key_t, size_t, int);\n }\n else version (FreeBSD)\n@@ -125,9 +126,9 @@ else version (FreeBSD)\n          time_t      shm_ctime;\n     }\n \n-    void* shmat(int, in void*, int);\n+    void* shmat(int, const scope void*, int);\n     int   shmctl(int, int, shmid_ds*);\n-    int   shmdt(in void*);\n+    int   shmdt(const scope void*);\n     int   shmget(key_t, size_t, int);\n }\n else version (NetBSD)\n@@ -151,9 +152,9 @@ else version (NetBSD)\n         void*           shm_internal;\n     }\n \n-    void* shmat(int, in void*, int);\n+    void* shmat(int, const scope void*, int);\n     int   shmctl(int, int, shmid_ds*);\n-    int   shmdt(in void*);\n+    int   shmdt(const scope void*);\n     int   shmget(key_t, size_t, int);\n }\n else version (OpenBSD)\n@@ -180,9 +181,9 @@ else version (OpenBSD)\n         void*      shm_internal;\n     }\n \n-    void* shmat(int, in void*, int);\n+    void* shmat(int, const scope void*, int);\n     int   shmctl(int, int, shmid_ds*);\n-    int   shmdt(in void*);\n+    int   shmdt(const scope void*);\n     int   shmget(key_t, size_t, int);\n }\n else version (DragonFlyBSD)\n@@ -206,9 +207,9 @@ else version (DragonFlyBSD)\n          private void*  shm_internal;\n     }\n \n-    void* shmat(int, in void*, int);\n+    void* shmat(int, const scope void*, int);\n     int   shmctl(int, int, shmid_ds*);\n-    int   shmdt(in void*);\n+    int   shmdt(const scope void*);\n     int   shmget(key_t, size_t, int);\n }\n else version (Darwin)\n@@ -273,8 +274,8 @@ else version (CRuntime_UClibc)\n         c_ulong swap_successes;\n     }\n \n-    void* shmat(int, in void*, int);\n+    void* shmat(int, const scope void*, int);\n     int   shmctl(int, int, shmid_ds*);\n-    int   shmdt(in void*);\n+    int   shmdt(const scope void*);\n     int   shmget(key_t, size_t, int);\n }"}, {"sha": "430d0c0d1e3898aaf244baf6697ba2836e1992ce", "filename": "libphobos/libdruntime/core/sys/posix/sys/socket.d", "status": "modified", "additions": 71, "deletions": 70, "changes": 141, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fsocket.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fsocket.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fsocket.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -14,7 +14,7 @@\n  */\n module core.sys.posix.sys.socket;\n \n-private import core.sys.posix.config;\n+import core.sys.posix.config;\n public import core.sys.posix.sys.types; // for ssize_t\n public import core.sys.posix.sys.uio;   // for iovec\n \n@@ -45,6 +45,7 @@ version (X86_64)  version = X86_Any;\n \n version (Posix):\n extern (C) nothrow @nogc:\n+@system:\n \n //\n // Required\n@@ -138,19 +139,19 @@ SHUT_RDWR\n SHUT_WR\n \n int     accept(int, sockaddr*, socklen_t*);\n-int     bind(int, in sockaddr*, socklen_t);\n-int     connect(int, in sockaddr*, socklen_t);\n+int     bind(int, const scope sockaddr*, socklen_t);\n+int     connect(int, const scope sockaddr*, socklen_t);\n int     getpeername(int, sockaddr*, socklen_t*);\n int     getsockname(int, sockaddr*, socklen_t*);\n int     getsockopt(int, int, int, void*, socklen_t*);\n int     listen(int, int);\n ssize_t recv(int, void*, size_t, int);\n ssize_t recvfrom(int, void*, size_t, int, sockaddr*, socklen_t*);\n ssize_t recvmsg(int, msghdr*, int);\n-ssize_t send(int, in void*, size_t, int);\n-ssize_t sendmsg(int, in msghdr*, int);\n-ssize_t sendto(int, in void*, size_t, int, in sockaddr*, socklen_t);\n-int     setsockopt(int, int, int, in void*, socklen_t);\n+ssize_t send(int, const scope void*, size_t, int);\n+ssize_t sendmsg(int, const scope msghdr*, int);\n+ssize_t sendto(int, const scope void*, size_t, int, const scope sockaddr*, socklen_t);\n+int     setsockopt(int, int, int, const scope void*, socklen_t);\n int     shutdown(int, int);\n int     socket(int, int, int);\n int     sockatmark(int);\n@@ -216,7 +217,7 @@ version (CRuntime_Glibc)\n     }\n     else\n     {\n-        extern (D) inout(ubyte)*   CMSG_DATA( inout(cmsghdr)* cmsg ) pure nothrow @nogc { return cast(ubyte*)( cmsg + 1 ); }\n+        extern (D) inout(ubyte)*   CMSG_DATA( return inout(cmsghdr)* cmsg ) pure nothrow @nogc { return cast(ubyte*)( cmsg + 1 ); }\n     }\n \n     private inout(cmsghdr)* __cmsg_nxthdr(inout(msghdr)*, inout(cmsghdr)*) pure nothrow @nogc;\n@@ -571,19 +572,19 @@ version (CRuntime_Glibc)\n     }\n \n     int     accept(int, scope sockaddr*, scope socklen_t*);\n-    int     bind(int, in sockaddr*, socklen_t);\n-    int     connect(int, in sockaddr*, socklen_t);\n+    int     bind(int, const scope sockaddr*, socklen_t);\n+    int     connect(int, const scope sockaddr*, socklen_t);\n     int     getpeername(int, scope sockaddr*, scope socklen_t*);\n     int     getsockname(int, scope sockaddr*, scope socklen_t*);\n     int     getsockopt(int, int, int, scope void*, scope socklen_t*);\n     int     listen(int, int) @safe;\n     ssize_t recv(int, scope void*, size_t, int);\n     ssize_t recvfrom(int, scope void*, size_t, int, scope sockaddr*, scope socklen_t*);\n     ssize_t recvmsg(int, scope msghdr*, int);\n-    ssize_t send(int, in void*, size_t, int);\n-    ssize_t sendmsg(int, in msghdr*, int);\n-    ssize_t sendto(int, in void*, size_t, int, in sockaddr*, socklen_t);\n-    int     setsockopt(int, int, int, in void*, socklen_t);\n+    ssize_t send(int, const scope void*, size_t, int);\n+    ssize_t sendmsg(int, const scope msghdr*, int);\n+    ssize_t sendto(int, const scope void*, size_t, int, const scope sockaddr*, socklen_t);\n+    int     setsockopt(int, int, int, const scope void*, socklen_t);\n     int     shutdown(int, int) @safe;\n     int     socket(int, int, int) @safe;\n     int     sockatmark(int) @safe;\n@@ -727,19 +728,19 @@ else version (Darwin)\n     }\n \n     int     accept(int, scope sockaddr*, scope socklen_t*);\n-    int     bind(int, in sockaddr*, socklen_t);\n-    int     connect(int, in sockaddr*, socklen_t);\n+    int     bind(int, const scope sockaddr*, socklen_t);\n+    int     connect(int, const scope sockaddr*, socklen_t);\n     int     getpeername(int, scope sockaddr*, scope socklen_t*);\n     int     getsockname(int, scope sockaddr*, scope socklen_t*);\n     int     getsockopt(int, int, int, scope void*, scope socklen_t*);\n     int     listen(int, int) @safe;\n     ssize_t recv(int, scope void*, size_t, int);\n     ssize_t recvfrom(int, scope void*, size_t, int, scope sockaddr*, scope socklen_t*);\n     ssize_t recvmsg(int, scope msghdr*, int);\n-    ssize_t send(int, in void*, size_t, int);\n-    ssize_t sendmsg(int, in msghdr*, int);\n-    ssize_t sendto(int, in void*, size_t, int, in sockaddr*, socklen_t);\n-    int     setsockopt(int, int, int, in void*, socklen_t);\n+    ssize_t send(int, const scope void*, size_t, int);\n+    ssize_t sendmsg(int, const scope msghdr*, int);\n+    ssize_t sendto(int, const scope void*, size_t, int, const scope sockaddr*, socklen_t);\n+    int     setsockopt(int, int, int, const scope void*, socklen_t);\n     int     shutdown(int, int) @safe;\n     int     socket(int, int, int) @safe;\n     int     sockatmark(int) @safe;\n@@ -904,19 +905,19 @@ else version (FreeBSD)\n     }\n \n     int     accept(int, scope sockaddr*, scope socklen_t*);\n-    int     bind(int, in sockaddr*, socklen_t);\n-    int     connect(int, in sockaddr*, socklen_t);\n+    int     bind(int, const scope sockaddr*, socklen_t);\n+    int     connect(int, const scope sockaddr*, socklen_t);\n     int     getpeername(int, scope sockaddr*, scope socklen_t*);\n     int     getsockname(int, scope sockaddr*, scope socklen_t*);\n     int     getsockopt(int, int, int, scope void*, scope socklen_t*);\n     int     listen(int, int) @safe;\n     ssize_t recv(int, scope void*, size_t, int);\n     ssize_t recvfrom(int, scope void*, size_t, int, scope sockaddr*, scope socklen_t*);\n     ssize_t recvmsg(int, scope msghdr*, int);\n-    ssize_t send(int, in void*, size_t, int);\n-    ssize_t sendmsg(int, in msghdr*, int);\n-    ssize_t sendto(int, in void*, size_t, int, in sockaddr*, socklen_t);\n-    int     setsockopt(int, int, int, in void*, socklen_t);\n+    ssize_t send(int, const scope void*, size_t, int);\n+    ssize_t sendmsg(int, const scope msghdr*, int);\n+    ssize_t sendto(int, const scope void*, size_t, int, const scope sockaddr*, socklen_t);\n+    int     setsockopt(int, int, int, const scope void*, socklen_t);\n     int     shutdown(int, int) @safe;\n     int     socket(int, int, int) @safe;\n     int     sockatmark(int) @safe;\n@@ -1101,19 +1102,19 @@ else version (NetBSD)\n     }\n \n     int     accept(int, scope sockaddr*, scope socklen_t*);\n-    int     bind(int, in sockaddr*, socklen_t);\n-    int     connect(int, in sockaddr*, socklen_t);\n+    int     bind(int, const scope sockaddr*, socklen_t);\n+    int     connect(int, const scope sockaddr*, socklen_t);\n     int     getpeername(int, scope sockaddr*, scope socklen_t*);\n     int     getsockname(int, scope sockaddr*, scope socklen_t*);\n     int     getsockopt(int, int, int, scope void*, scope socklen_t*);\n     int     listen(int, int) @safe;\n     ssize_t recv(int, scope void*, size_t, int);\n     ssize_t recvfrom(int, scope void*, size_t, int, scope sockaddr*, scope socklen_t*);\n     ssize_t recvmsg(int, scope msghdr*, int);\n-    ssize_t send(int, in void*, size_t, int);\n-    ssize_t sendmsg(int, in msghdr*, int);\n-    ssize_t sendto(int, in void*, size_t, int, in sockaddr*, socklen_t);\n-    int     setsockopt(int, int, int, in void*, socklen_t);\n+    ssize_t send(int, const scope void*, size_t, int);\n+    ssize_t sendmsg(int, const scope msghdr*, int);\n+    ssize_t sendto(int, const scope void*, size_t, int, const scope sockaddr*, socklen_t);\n+    int     setsockopt(int, int, int, const scope void*, socklen_t);\n     int     shutdown(int, int) @safe;\n     int     socket(int, int, int) @safe;\n     int     sockatmark(int) @safe;\n@@ -1274,19 +1275,19 @@ else version (OpenBSD)\n     }\n \n     int     accept(int, scope sockaddr*, scope socklen_t*);\n-    int     bind(int, in sockaddr*, socklen_t);\n-    int     connect(int, in sockaddr*, socklen_t);\n+    int     bind(int, const scope sockaddr*, socklen_t);\n+    int     connect(int, const scope sockaddr*, socklen_t);\n     int     getpeername(int, scope sockaddr*, scope socklen_t*);\n     int     getsockname(int, scope sockaddr*, scope socklen_t*);\n     int     getsockopt(int, int, int, scope void*, scope socklen_t*);\n     int     listen(int, int) @safe;\n     ssize_t recv(int, scope void*, size_t, int);\n     ssize_t recvfrom(int, scope void*, size_t, int, scope sockaddr*, scope socklen_t*);\n     ssize_t recvmsg(int, scope msghdr*, int);\n-    ssize_t send(int, in void*, size_t, int);\n-    ssize_t sendmsg(int, in msghdr*, int);\n-    ssize_t sendto(int, in void*, size_t, int, in sockaddr*, socklen_t);\n-    int     setsockopt(int, int, int, in void*, socklen_t);\n+    ssize_t send(int, const scope void*, size_t, int);\n+    ssize_t sendmsg(int, const scope msghdr*, int);\n+    ssize_t sendto(int, const scope void*, size_t, int, const scope sockaddr*, socklen_t);\n+    int     setsockopt(int, int, int, const scope void*, socklen_t);\n     int     shutdown(int, int) @safe;\n     int     socket(int, int, int) @safe;\n     int     sockatmark(int) @safe;\n@@ -1446,7 +1447,7 @@ else version (DragonFlyBSD)\n             gid_t           cmcred_gid;\n             short           cmcred_ngroups;\n             gid_t[CMGROUP_MAX] cmcred_groups;\n-    };\n+    }\n \n     enum : uint\n     {\n@@ -1499,13 +1500,13 @@ else version (DragonFlyBSD)\n         int                 hdr_cnt;\n         iovec *             trailers;\n         int                 trl_cnt;\n-    };\n+    }\n */\n \n     int     accept(int, sockaddr*, socklen_t*);\n //    int     accept4(int, sockaddr*, socklen_t*, int);\n-    int     bind(int, in sockaddr*, socklen_t);\n-    int     connect(int, in sockaddr*, socklen_t);\n+    int     bind(int, const scope sockaddr*, socklen_t);\n+    int     connect(int, const scope sockaddr*, socklen_t);\n //    int     extconnect(int, int, sockaddr*, socklen_t);\n     int     getpeername(int, sockaddr*, socklen_t*);\n     int     getsockname(int, sockaddr*, socklen_t*);\n@@ -1514,11 +1515,11 @@ else version (DragonFlyBSD)\n     ssize_t recv(int, void*, size_t, int);\n     ssize_t recvfrom(int, void*, size_t, int, sockaddr*, socklen_t*);\n     ssize_t recvmsg(int, msghdr*, int);\n-    ssize_t send(int, in void*, size_t, int);\n-    ssize_t sendto(int, in void*, size_t, int, in sockaddr*, socklen_t);\n-    ssize_t sendmsg(int, in msghdr*, int);\n+    ssize_t send(int, const scope void*, size_t, int);\n+    ssize_t sendto(int, const scope void*, size_t, int, const scope sockaddr*, socklen_t);\n+    ssize_t sendmsg(int, const scope msghdr*, int);\n //    int     sendfile(int, int, off_t, size_t, sf_hdtr *, off_t *, int);\n-    int     setsockopt(int, int, int, in void*, socklen_t);\n+    int     setsockopt(int, int, int, const scope void*, socklen_t);\n     int     shutdown(int, int);\n     int     sockatmark(int);\n     int     socket(int, int, int);\n@@ -1655,19 +1656,19 @@ else version (Solaris)\n     }\n \n     int     accept(int, scope sockaddr*, scope socklen_t*);\n-    int     bind(int, in sockaddr*, socklen_t);\n-    int     connect(int, in sockaddr*, socklen_t);\n+    int     bind(int, const scope sockaddr*, socklen_t);\n+    int     connect(int, const scope sockaddr*, socklen_t);\n     int     getpeername(int, scope sockaddr*, scope socklen_t*);\n     int     getsockname(int, scope sockaddr*, scope socklen_t*);\n     int     getsockopt(int, int, int, scope void*, scope socklen_t*);\n     int     listen(int, int) @safe;\n     ssize_t recv(int, scope void*, size_t, int);\n     ssize_t recvfrom(int, scope void*, size_t, int, scope sockaddr*, scope socklen_t*);\n     ssize_t recvmsg(int, scope msghdr*, int);\n-    ssize_t send(int, in void*, size_t, int);\n-    ssize_t sendmsg(int, in msghdr*, int);\n-    ssize_t sendto(int, in void*, size_t, int, in sockaddr*, socklen_t);\n-    int     setsockopt(int, int, int, in void*, socklen_t);\n+    ssize_t send(int, const scope void*, size_t, int);\n+    ssize_t sendmsg(int, const scope msghdr*, int);\n+    ssize_t sendto(int, const scope void*, size_t, int, const scope sockaddr*, socklen_t);\n+    int     setsockopt(int, int, int, const scope void*, socklen_t);\n     int     shutdown(int, int) @safe;\n     int     socket(int, int, int) @safe;\n     int     sockatmark(int) @safe;\n@@ -1816,19 +1817,19 @@ else version (CRuntime_Bionic)\n     enum SOCK_RDM = 4;\n \n     int     accept(int, scope sockaddr*, scope socklen_t*);\n-    int     bind(int, in sockaddr*, socklen_t);\n-    int     connect(int, in sockaddr*, socklen_t);\n+    int     bind(int, const scope sockaddr*, socklen_t);\n+    int     connect(int, const scope sockaddr*, socklen_t);\n     int     getpeername(int, scope sockaddr*, scope socklen_t*);\n     int     getsockname(int, scope sockaddr*, scope socklen_t*);\n     int     getsockopt(int, int, int, scope void*, scope socklen_t*);\n     int     listen(int, int) @safe;\n     ssize_t recv(int, scope void*, size_t, int);\n     ssize_t recvfrom(int, scope void*, size_t, int, scope sockaddr*, scope socklen_t*);\n     int     recvmsg(int, scope msghdr*, int);\n-    ssize_t send(int, in void*, size_t, int);\n-    int     sendmsg(int, in msghdr*, int);\n-    ssize_t sendto(int, in void*, size_t, int, in sockaddr*, socklen_t);\n-    int     setsockopt(int, int, int, in void*, socklen_t);\n+    ssize_t send(int, const scope void*, size_t, int);\n+    int     sendmsg(int, const scope msghdr*, int);\n+    ssize_t sendto(int, const scope void*, size_t, int, const scope sockaddr*, socklen_t);\n+    int     setsockopt(int, int, int, const scope void*, socklen_t);\n     int     shutdown(int, int) @safe;\n     int     socket(int, int, int) @safe;\n     int     sockatmark(int) @safe;\n@@ -1970,19 +1971,19 @@ else version (CRuntime_Musl)\n         int msg_flags;\n     }\n     int     accept(int, sockaddr*, socklen_t*);\n-    int     bind(int, in sockaddr*, socklen_t);\n-    int     connect(int, in sockaddr*, socklen_t);\n+    int     bind(int, const scope sockaddr*, socklen_t);\n+    int     connect(int, const scope sockaddr*, socklen_t);\n     int     getpeername(int, sockaddr*, socklen_t*);\n     int     getsockname(int, sockaddr*, socklen_t*);\n     int     getsockopt(int, int, int, void*, socklen_t*);\n     int     listen(int, int);\n     ssize_t recv(int, void*, size_t, int);\n     ssize_t recvfrom(int, void*, size_t, int, sockaddr*, socklen_t*);\n     ssize_t recvmsg(int, msghdr*, int);\n-    ssize_t send(int, in void*, size_t, int);\n-    ssize_t sendmsg(int, in msghdr*, int);\n-    ssize_t sendto(int, in void*, size_t, int, in sockaddr*, socklen_t);\n-    int     setsockopt(int, int, int, in void*, socklen_t);\n+    ssize_t send(int, const scope void*, size_t, int);\n+    ssize_t sendmsg(int, const scope msghdr*, int);\n+    ssize_t sendto(int, const scope void*, size_t, int, const scope sockaddr*, socklen_t);\n+    int     setsockopt(int, int, int, const scope void*, socklen_t);\n     int     shutdown(int, int);\n     int     socket(int, int, int);\n     int     sockatmark(int);\n@@ -2167,19 +2168,19 @@ else version (CRuntime_UClibc)\n     }\n \n     int     accept(int, sockaddr*, socklen_t*);\n-    int     bind(int, in sockaddr*, socklen_t);\n-    int     connect(int, in sockaddr*, socklen_t);\n+    int     bind(int, const scope sockaddr*, socklen_t);\n+    int     connect(int, const scope sockaddr*, socklen_t);\n     int     getpeername(int, sockaddr*, socklen_t*);\n     int     getsockname(int, sockaddr*, socklen_t*);\n     int     getsockopt(int, int, int, void*, socklen_t*);\n     int     listen(int, int);\n     ssize_t recv(int, void*, size_t, int);\n     ssize_t recvfrom(int, void*, size_t, int, sockaddr*, socklen_t*);\n     ssize_t recvmsg(int, msghdr*, int);\n-    ssize_t send(int, in void*, size_t, int);\n-    ssize_t sendmsg(int, in msghdr*, int);\n-    ssize_t sendto(int, in void*, size_t, int, in sockaddr*, socklen_t);\n-    int     setsockopt(int, int, int, in void*, socklen_t);\n+    ssize_t send(int, const scope void*, size_t, int);\n+    ssize_t sendmsg(int, const scope msghdr*, int);\n+    ssize_t sendto(int, const scope void*, size_t, int, const scope sockaddr*, socklen_t);\n+    int     setsockopt(int, int, int, const scope void*, socklen_t);\n     int     shutdown(int, int);\n     int     socket(int, int, int);\n     int     sockatmark(int);"}, {"sha": "6b4d022b82572cff65e132477a9a25646b164ead", "filename": "libphobos/libdruntime/core/sys/posix/sys/stat.d", "status": "modified", "additions": 167, "deletions": 112, "changes": 279, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fstat.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fstat.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fstat.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -14,9 +14,9 @@\n  */\n module core.sys.posix.sys.stat;\n \n-private import core.sys.posix.config;\n-private import core.stdc.stdint;\n-private import core.sys.posix.time;     // for timespec\n+import core.sys.posix.config;\n+import core.stdc.stdint;\n+import core.sys.posix.time;     // for timespec\n public import core.sys.posix.sys.types; // for off_t, mode_t\n \n version (OSX)\n@@ -30,9 +30,12 @@ else version (WatchOS)\n \n version (RISCV32) version = RISCV_Any;\n version (RISCV64) version = RISCV_Any;\n+version (SPARC)   version = SPARC_Any;\n+version (SPARC64) version = SPARC_Any;\n \n version (Posix):\n extern (C) nothrow @nogc:\n+@system:\n \n //\n // Required\n@@ -80,13 +83,13 @@ S_TYPEISMQ(buf)\n S_TYPEISSEM(buf)\n S_TYPEISSHM(buf)\n \n-int    chmod(in char*, mode_t);\n+int    chmod(const scope char*, mode_t);\n int    fchmod(int, mode_t);\n int    fstat(int, stat*);\n-int    lstat(in char*, stat*);\n-int    mkdir(in char*, mode_t);\n-int    mkfifo(in char*, mode_t);\n-int    stat(in char*, stat*);\n+int    lstat(const scope char*, stat*);\n+int    mkdir(const scope char*, mode_t);\n+int    mkfifo(const scope char*, mode_t);\n+int    stat(const scope char*, stat*);\n mode_t umask(mode_t);\n  */\n \n@@ -120,11 +123,11 @@ version (CRuntime_Glibc)\n                 timespec    st_atim;\n                 timespec    st_mtim;\n                 timespec    st_ctim;\n-                extern(D)\n+                extern(D) @safe @property inout pure nothrow\n                 {\n-                    @property ref time_t st_atime() { return st_atim.tv_sec; }\n-                    @property ref time_t st_mtime() { return st_mtim.tv_sec; }\n-                    @property ref time_t st_ctime() { return st_ctim.tv_sec; }\n+                    ref inout(time_t) st_atime() return { return st_atim.tv_sec; }\n+                    ref inout(time_t) st_mtime() return { return st_mtim.tv_sec; }\n+                    ref inout(time_t) st_ctime() return { return st_ctim.tv_sec; }\n                 }\n             }\n             else\n@@ -167,11 +170,11 @@ version (CRuntime_Glibc)\n                 timespec    st_atim;\n                 timespec    st_mtim;\n                 timespec    st_ctim;\n-                extern(D)\n+                extern(D) @safe @property inout pure nothrow\n                 {\n-                    @property ref time_t st_atime() { return st_atim.tv_sec; }\n-                    @property ref time_t st_mtime() { return st_mtim.tv_sec; }\n-                    @property ref time_t st_ctime() { return st_ctim.tv_sec; }\n+                    ref inout(time_t) st_atime() return { return st_atim.tv_sec; }\n+                    ref inout(time_t) st_mtime() return { return st_mtim.tv_sec; }\n+                    ref inout(time_t) st_ctime() return { return st_ctim.tv_sec; }\n                 }\n             }\n             else\n@@ -249,11 +252,11 @@ version (CRuntime_Glibc)\n                 __timespec st_atim;\n                 __timespec st_mtim;\n                 __timespec st_ctim;\n-                extern(D)\n+                extern(D) @safe @property inout pure nothrow\n                 {\n-                    @property ref time_t st_atime() { return st_atim.tv_sec; }\n-                    @property ref time_t st_mtime() { return st_mtim.tv_sec; }\n-                    @property ref time_t st_ctime() { return st_ctim.tv_sec; }\n+                    ref inout(time_t) st_atime() return { return st_atim.tv_sec; }\n+                    ref inout(time_t) st_mtime() return { return st_mtim.tv_sec; }\n+                    ref inout(time_t) st_ctime() return { return st_ctim.tv_sec; }\n                 }\n             }\n             else\n@@ -309,11 +312,11 @@ version (CRuntime_Glibc)\n                 timespec    st_atim;\n                 timespec    st_mtim;\n                 timespec    st_ctim;\n-                extern(D)\n+                extern(D) @safe @property inout pure nothrow\n                 {\n-                    @property ref time_t st_atime() { return st_atim.tv_sec; }\n-                    @property ref time_t st_mtime() { return st_mtim.tv_sec; }\n-                    @property ref time_t st_ctime() { return st_ctim.tv_sec; }\n+                    ref inout(time_t) st_atime() return { return st_atim.tv_sec; }\n+                    ref inout(time_t) st_mtime() return { return st_mtim.tv_sec; }\n+                    ref inout(time_t) st_ctime() return { return st_ctim.tv_sec; }\n                 }\n             }\n             else\n@@ -373,11 +376,11 @@ version (CRuntime_Glibc)\n                 timespec    st_atim;\n                 timespec    st_mtim;\n                 timespec    st_ctim;\n-                extern(D)\n+                extern(D) @safe @property inout pure nothrow\n                 {\n-                    @property ref time_t st_atime() { return st_atim.tv_sec; }\n-                    @property ref time_t st_mtime() { return st_mtim.tv_sec; }\n-                    @property ref time_t st_ctime() { return st_ctim.tv_sec; }\n+                    ref inout(time_t) st_atime() return { return st_atim.tv_sec; }\n+                    ref inout(time_t) st_mtime() return { return st_mtim.tv_sec; }\n+                    ref inout(time_t) st_ctime() return { return st_ctim.tv_sec; }\n                 }\n             }\n             else\n@@ -514,11 +517,11 @@ version (CRuntime_Glibc)\n                 __timespec st_atim;\n                 __timespec st_mtim;\n                 __timespec st_ctim;\n-                extern(D)\n+                extern(D) @safe @property inout pure nothrow\n                 {\n-                    @property ref time_t st_atime() { return st_atim.tv_sec; }\n-                    @property ref time_t st_mtime() { return st_mtim.tv_sec; }\n-                    @property ref time_t st_ctime() { return st_ctim.tv_sec; }\n+                    ref inout(time_t) st_atime() return { return st_atim.tv_sec; }\n+                    ref inout(time_t) st_mtime() return { return st_mtim.tv_sec; }\n+                    ref inout(time_t) st_ctime() return { return st_ctim.tv_sec; }\n                 }\n             }\n             else\n@@ -596,11 +599,11 @@ version (CRuntime_Glibc)\n                 __timespec st_atim;\n                 __timespec st_mtim;\n                 __timespec st_ctim;\n-                extern(D)\n+                extern(D) @safe @property inout pure nothrow\n                 {\n-                    @property ref time_t st_atime() { return st_atim.tv_sec; }\n-                    @property ref time_t st_mtime() { return st_mtim.tv_sec; }\n-                    @property ref time_t st_ctime() { return st_ctim.tv_sec; }\n+                    ref inout(time_t) st_atime() return { return st_atim.tv_sec; }\n+                    ref inout(time_t) st_mtime() return { return st_mtim.tv_sec; }\n+                    ref inout(time_t) st_ctime() return { return st_ctim.tv_sec; }\n                 }\n             }\n             else\n@@ -691,11 +694,11 @@ version (CRuntime_Glibc)\n                 __timespec st_atim;\n                 __timespec st_mtim;\n                 __timespec st_ctim;\n-                extern(D)\n+                extern(D) @safe @property inout pure nothrow\n                 {\n-                    @property ref time_t st_atime() { return st_atim.tv_sec; }\n-                    @property ref time_t st_mtime() { return st_mtim.tv_sec; }\n-                    @property ref time_t st_ctime() { return st_ctim.tv_sec; }\n+                    ref inout(time_t) st_atime() return { return st_atim.tv_sec; }\n+                    ref inout(time_t) st_mtime() return { return st_mtim.tv_sec; }\n+                    ref inout(time_t) st_ctime() return { return st_ctim.tv_sec; }\n                 }\n             }\n             else\n@@ -714,7 +717,7 @@ version (CRuntime_Glibc)\n         else\n             static assert(stat_t.sizeof == 104);\n     }\n-    else version (SPARC64)\n+    else version (SPARC_Any)\n     {\n         private\n         {\n@@ -736,8 +739,15 @@ version (CRuntime_Glibc)\n         struct stat_t\n         {\n             __dev_t st_dev;\n-            ushort __pad1;\n-            __ino_t st_ino;\n+            static if (__WORDSIZE == 64 || !__USE_FILE_OFFSET64)\n+            {\n+                ushort __pad1;\n+                __ino_t st_ino;\n+            }\n+            else\n+            {\n+                __ino64_t st_ino;\n+            }\n             __mode_t st_mode;\n             __nlink_t st_nlink;\n             __uid_t st_uid;\n@@ -769,11 +779,11 @@ version (CRuntime_Glibc)\n                 __timespec st_atim;\n                 __timespec st_mtim;\n                 __timespec st_ctim;\n-                extern(D)\n+                extern(D) @safe @property inout pure nothrow\n                 {\n-                    @property ref time_t st_atime() { return st_atim.tv_sec; }\n-                    @property ref time_t st_mtime() { return st_mtim.tv_sec; }\n-                    @property ref time_t st_ctime() { return st_ctim.tv_sec; }\n+                    ref inout(time_t) st_atime() return { return st_atim.tv_sec; }\n+                    ref inout(time_t) st_mtime() return { return st_mtim.tv_sec; }\n+                    ref inout(time_t) st_ctime() return { return st_ctim.tv_sec; }\n                 }\n             }\n             else\n@@ -789,7 +799,15 @@ version (CRuntime_Glibc)\n             c_ulong __unused4;\n             c_ulong __unused5;\n         }\n-        static assert(stat_t.sizeof == 144);\n+        static if (__USE_LARGEFILE64) alias stat_t stat64_t;\n+\n+        static if (__WORDSIZE == 64)\n+            static assert(stat_t.sizeof == 144);\n+        else static if (__USE_FILE_OFFSET64)\n+            static assert(stat_t.sizeof == 104);\n+        else\n+            static assert(stat_t.sizeof == 88);\n+\n     }\n     else version (S390)\n     {\n@@ -838,11 +856,11 @@ version (CRuntime_Glibc)\n                 __timespec st_atim;\n                 __timespec st_mtim;\n                 __timespec st_ctim;\n-                extern(D)\n+                extern(D) @safe @property inout pure nothrow\n                 {\n-                    @property ref time_t st_atime() { return st_atim.tv_sec; }\n-                    @property ref time_t st_mtime() { return st_mtim.tv_sec; }\n-                    @property ref time_t st_ctime() { return st_ctim.tv_sec; }\n+                    ref inout(time_t) st_atime() return { return st_atim.tv_sec; }\n+                    ref inout(time_t) st_mtime() return { return st_mtim.tv_sec; }\n+                    ref inout(time_t) st_ctime() return { return st_ctim.tv_sec; }\n                 }\n             }\n             else\n@@ -902,11 +920,11 @@ version (CRuntime_Glibc)\n                 __timespec st_atim;\n                 __timespec st_mtim;\n                 __timespec st_ctim;\n-                extern(D)\n+                extern(D) @safe @property inout pure nothrow\n                 {\n-                    @property ref time_t st_atime() { return st_atim.tv_sec; }\n-                    @property ref time_t st_mtime() { return st_mtim.tv_sec; }\n-                    @property ref time_t st_ctime() { return st_ctim.tv_sec; }\n+                    ref inout(time_t) st_atime() return { return st_atim.tv_sec; }\n+                    ref inout(time_t) st_mtime() return { return st_mtim.tv_sec; }\n+                    ref inout(time_t) st_ctime() return { return st_ctim.tv_sec; }\n                 }\n             }\n             else\n@@ -1264,11 +1282,11 @@ else version (OpenBSD)\n         timespec  st_atim;\n         timespec  st_mtim;\n         timespec  st_ctim;\n-        extern(D)\n+        extern(D) @safe @property inout pure nothrow\n         {\n-            @property ref time_t st_atime() { return st_atim.tv_sec; }\n-            @property ref time_t st_mtime() { return st_mtim.tv_sec; }\n-            @property ref time_t st_ctime() { return st_ctim.tv_sec; }\n+            ref inout(time_t) st_atime() return { return st_atim.tv_sec; }\n+            ref inout(time_t) st_mtime() return { return st_mtim.tv_sec; }\n+            ref inout(time_t) st_ctime() return { return st_ctim.tv_sec; }\n         }\n       }\n       else\n@@ -1348,7 +1366,7 @@ else version (DragonFlyBSD)\n             int32_t   st_lspare;\n             int64_t   st_qspare1;           /* was recursive change detect */\n             int64_t   st_qspare2;\n-    };\n+    }\n \n     enum S_IRUSR    = 0x100; // octal 0000400\n     enum S_IWUSR    = 0x080; // octal 0000200\n@@ -2001,11 +2019,11 @@ else version (CRuntime_UClibc)\n                 timespec    st_atim;\n                 timespec    st_mtim;\n                 timespec    st_ctim;\n-                extern(D)\n+                extern(D) @safe @property inout pure nothrow\n                 {\n-                    @property ref time_t st_atime() { return st_atim.tv_sec; }\n-                    @property ref time_t st_mtime() { return st_mtim.tv_sec; }\n-                    @property ref time_t st_ctime() { return st_ctim.tv_sec; }\n+                    ref inout(time_t) st_atime() return { return st_atim.tv_sec; }\n+                    ref inout(time_t) st_mtime() return { return st_mtim.tv_sec; }\n+                    ref inout(time_t) st_ctime() return { return st_ctim.tv_sec; }\n                 }\n             }\n             else\n@@ -2167,13 +2185,13 @@ else\n     static assert(false, \"Unsupported platform\");\n }\n \n-int    chmod(in char*, mode_t);\n+int    chmod(const scope char*, mode_t);\n int    fchmod(int, mode_t);\n //int    fstat(int, stat_t*);\n-//int    lstat(in char*, stat_t*);\n-int    mkdir(in char*, mode_t);\n-int    mkfifo(in char*, mode_t);\n-//int    stat(in char*, stat_t*);\n+//int    lstat(const scope char*, stat_t*);\n+int    mkdir(const scope char*, mode_t);\n+int    mkfifo(const scope char*, mode_t);\n+//int    stat(const scope char*, stat_t*);\n mode_t umask(mode_t);\n \n version (CRuntime_Glibc)\n@@ -2183,26 +2201,26 @@ version (CRuntime_Glibc)\n     int   fstat64(int, stat_t*) @trusted;\n     alias fstat64 fstat;\n \n-    int   lstat64(in char*, stat_t*);\n+    int   lstat64(const scope char*, stat_t*);\n     alias lstat64 lstat;\n \n-    int   stat64(in char*, stat_t*);\n+    int   stat64(const scope char*, stat_t*);\n     alias stat64 stat;\n   }\n   else\n   {\n     int   fstat(int, stat_t*) @trusted;\n-    int   lstat(in char*, stat_t*);\n-    int   stat(in char*, stat_t*);\n+    int   lstat(const scope char*, stat_t*);\n+    int   stat(const scope char*, stat_t*);\n   }\n }\n else version (Solaris)\n {\n     version (D_LP64)\n     {\n         int fstat(int, stat_t*) @trusted;\n-        int lstat(in char*, stat_t*);\n-        int stat(in char*, stat_t*);\n+        int lstat(const scope char*, stat_t*);\n+        int stat(const scope char*, stat_t*);\n \n         static if (__USE_LARGEFILE64)\n         {\n@@ -2218,17 +2236,17 @@ else version (Solaris)\n             int   fstat64(int, stat_t*) @trusted;\n             alias fstat64 fstat;\n \n-            int   lstat64(in char*, stat_t*);\n+            int   lstat64(const scope char*, stat_t*);\n             alias lstat64 lstat;\n \n-            int   stat64(in char*, stat_t*);\n+            int   stat64(const scope char*, stat_t*);\n             alias stat64 stat;\n         }\n         else\n         {\n             int fstat(int, stat_t*) @trusted;\n-            int lstat(in char*, stat_t*);\n-            int stat(in char*, stat_t*);\n+            int lstat(const scope char*, stat_t*);\n+            int stat(const scope char*, stat_t*);\n         }\n     }\n }\n@@ -2238,55 +2256,82 @@ else version (Darwin)\n     // inode functions by appending $INODE64 to newer 64-bit inode functions.\n     version (OSX)\n     {\n-        pragma(mangle, \"fstat$INODE64\") int fstat(int, stat_t*);\n-        pragma(mangle, \"lstat$INODE64\") int lstat(in char*, stat_t*);\n-        pragma(mangle, \"stat$INODE64\")  int stat(in char*, stat_t*);\n+        version (AArch64)\n+        {\n+            int fstat(int, stat_t*);\n+            int lstat(const scope char*, stat_t*);\n+            int stat(const scope char*, stat_t*);\n+        }\n+        else\n+        {\n+            pragma(mangle, \"fstat$INODE64\") int fstat(int, stat_t*);\n+            pragma(mangle, \"lstat$INODE64\") int lstat(const scope char*, stat_t*);\n+            pragma(mangle, \"stat$INODE64\")  int stat(const scope char*, stat_t*);\n+        }\n     }\n     else\n     {\n         int fstat(int, stat_t*);\n-        int lstat(in char*, stat_t*);\n-        int stat(in char*, stat_t*);\n+        int lstat(const scope char*, stat_t*);\n+        int stat(const scope char*, stat_t*);\n     }\n }\n else version (FreeBSD)\n {\n-    int   fstat(int, stat_t*);\n-    int   lstat(in char*, stat_t*);\n-    int   stat(in char*, stat_t*);\n+    version (GNU)\n+    {\n+        int   fstat(int, stat_t*);\n+        int   lstat(const scope char*, stat_t*);\n+        int   stat(const scope char*, stat_t*);\n+    }\n+    else\n+    {\n+        static if (__FreeBSD_version >= INO64_FIRST)\n+        {\n+            pragma(mangle, \"fstat@FBSD_1.5\") int   fstat(int, stat_t*);\n+            pragma(mangle, \"lstat@FBSD_1.5\") int   lstat(const scope char*, stat_t*);\n+            pragma(mangle, \"stat@FBSD_1.5\")  int   stat(const scope char*, stat_t*);\n+        }\n+        else\n+        {\n+            pragma(mangle, \"fstat@FBSD_1.0\") int   fstat(int, stat_t*);\n+            pragma(mangle, \"lstat@FBSD_1.0\") int   lstat(const scope char*, stat_t*);\n+            pragma(mangle, \"stat@FBSD_1.0\")  int   stat(const scope char*, stat_t*);\n+        }\n+    }\n }\n else version (NetBSD)\n {\n     int   __fstat50(int, stat_t*);\n-    int   __lstat50(in char*, stat_t*);\n-    int   __stat50(in char*, stat_t*);\n+    int   __lstat50(const scope char*, stat_t*);\n+    int   __stat50(const scope char*, stat_t*);\n     alias __fstat50 fstat;\n     alias __lstat50 lstat;\n     alias __stat50 stat;\n }\n else version (OpenBSD)\n {\n     int   fstat(int, stat_t*);\n-    int   lstat(in char*, stat_t*);\n-    int   stat(in char*, stat_t*);\n+    int   lstat(const scope char*, stat_t*);\n+    int   stat(const scope char*, stat_t*);\n }\n else version (DragonFlyBSD)\n {\n     int   fstat(int, stat_t*);\n-    int   lstat(in char*, stat_t*);\n-    int   stat(in char*, stat_t*);\n+    int   lstat(const scope char*, stat_t*);\n+    int   stat(const scope char*, stat_t*);\n }\n else version (CRuntime_Bionic)\n {\n     int   fstat(int, stat_t*) @trusted;\n-    int   lstat(in char*, stat_t*);\n-    int   stat(in char*, stat_t*);\n+    int   lstat(const scope char*, stat_t*);\n+    int   stat(const scope char*, stat_t*);\n }\n else version (CRuntime_Musl)\n {\n-    int stat(in char*, stat_t*);\n+    int stat(const scope char*, stat_t*);\n     int fstat(int, stat_t*);\n-    int lstat(in char*, stat_t*);\n+    int lstat(const scope char*, stat_t*);\n \n     alias fstat fstat64;\n     alias lstat lstat64;\n@@ -2299,17 +2344,17 @@ else version (CRuntime_UClibc)\n     int   fstat64(int, stat_t*) @trusted;\n     alias fstat64 fstat;\n \n-    int   lstat64(in char*, stat_t*);\n+    int   lstat64(const scope char*, stat_t*);\n     alias lstat64 lstat;\n \n-    int   stat64(in char*, stat_t*);\n+    int   stat64(const scope char*, stat_t*);\n     alias stat64 stat;\n   }\n   else\n   {\n     int   fstat(int, stat_t*) @trusted;\n-    int   lstat(in char*, stat_t*);\n-    int   stat(in char*, stat_t*);\n+    int   lstat(const scope char*, stat_t*);\n+    int   stat(const scope char*, stat_t*);\n   }\n }\n \n@@ -2347,7 +2392,7 @@ version (CRuntime_Glibc)\n     enum S_IFLNK    = 0xA000; // octal 0120000\n     enum S_IFSOCK   = 0xC000; // octal 0140000\n \n-    int mknod(in char*, mode_t, dev_t);\n+    int mknod(const scope char*, mode_t, dev_t);\n }\n else version (Darwin)\n {\n@@ -2360,7 +2405,7 @@ else version (Darwin)\n     enum S_IFLNK    = 0xA000; // octal 0120000\n     enum S_IFSOCK   = 0xC000; // octal 0140000\n \n-    int mknod(in char*, mode_t, dev_t);\n+    int mknod(const scope char*, mode_t, dev_t);\n }\n else version (FreeBSD)\n {\n@@ -2373,7 +2418,17 @@ else version (FreeBSD)\n     enum S_IFLNK    = 0xA000; // octal 0120000\n     enum S_IFSOCK   = 0xC000; // octal 0140000\n \n-    int mknod(in char*, mode_t, dev_t);\n+    version (GNU)\n+    {\n+        int mknod(const scope char*, mode_t, dev_t);\n+    }\n+    else\n+    {\n+        static if (__FreeBSD_version >= INO64_FIRST)\n+            pragma(mangle, \"mknod@FBSD_1.5\") int mknod(const scope char*, mode_t, dev_t);\n+        else\n+            pragma(mangle, \"mknod@FBSD_1.0\") int mknod(const scope char*, mode_t, dev_t);\n+    }\n }\n else version (NetBSD)\n {\n@@ -2386,7 +2441,7 @@ else version (NetBSD)\n     enum S_IFLNK    = 0xA000; // octal 0120000\n     enum S_IFSOCK   = 0xC000; // octal 0140000\n \n-    int mknod(in char*, mode_t, dev_t);\n+    int mknod(const scope char*, mode_t, dev_t);\n }\n else version (OpenBSD)\n {\n@@ -2399,7 +2454,7 @@ else version (OpenBSD)\n     enum S_IFLNK    = 0xA000; // octal 0120000\n     enum S_IFSOCK   = 0xC000; // octal 0140000\n \n-    int mknod(in char*, mode_t, dev_t);\n+    int mknod(const scope char*, mode_t, dev_t);\n }\n else version (DragonFlyBSD)\n {\n@@ -2412,7 +2467,7 @@ else version (DragonFlyBSD)\n     enum S_IFLNK    = 0xA000; // octal 0120000\n     enum S_IFSOCK   = 0xC000; // octal 0140000\n \n-    int mknod(in char*, mode_t, dev_t);\n+    int mknod(const scope char*, mode_t, dev_t);\n }\n else version (Solaris)\n {\n@@ -2427,7 +2482,7 @@ else version (Solaris)\n     enum S_IFDOOR = 0xD000;\n     enum S_IFPORT = 0xE000;\n \n-    int mknod(in char*, mode_t, dev_t);\n+    int mknod(const scope char*, mode_t, dev_t);\n }\n else version (CRuntime_Bionic)\n {\n@@ -2440,7 +2495,7 @@ else version (CRuntime_Bionic)\n     enum S_IFLNK    = 0xA000; // octal 0120000\n     enum S_IFSOCK   = 0xC000; // octal 0140000\n \n-    int mknod(in char*, mode_t, dev_t);\n+    int mknod(const scope char*, mode_t, dev_t);\n }\n else version (CRuntime_Musl)\n {\n@@ -2455,7 +2510,7 @@ else version (CRuntime_Musl)\n         S_IFSOCK   = 0xC000, // octal 0140000\n     }\n \n-    int mknod(in char*, mode_t, dev_t);\n+    int mknod(const scope char*, mode_t, dev_t);\n }\n else version (CRuntime_UClibc)\n {\n@@ -2468,7 +2523,7 @@ else version (CRuntime_UClibc)\n     enum S_IFLNK    = 0xA000; // octal 0120000\n     enum S_IFSOCK   = 0xC000; // octal 0140000\n \n-    int mknod(in char*, mode_t, dev_t);\n+    int mknod(const scope char*, mode_t, dev_t);\n }\n else\n {"}, {"sha": "aeaf5bce3fadc041e14126b26e1ca2feafd349d8", "filename": "libphobos/libdruntime/core/sys/posix/sys/statvfs.d", "status": "modified", "additions": 31, "deletions": 4, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fstatvfs.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fstatvfs.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fstatvfs.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -8,14 +8,15 @@\n                       The Open Group Base Specifications Issue 7 IEEE Std 1003.1, 2018 Edition)\n  +/\n module core.sys.posix.sys.statvfs;\n-private import core.stdc.config;\n-private import core.sys.posix.config;\n+import core.stdc.config;\n+import core.sys.posix.config;\n public import core.sys.posix.sys.types;\n \n version (Posix):\n extern (C) :\n nothrow:\n @nogc:\n+@system:\n \n version (CRuntime_Glibc) {\n     static if (__WORDSIZE == 32)\n@@ -181,57 +182,75 @@ else version (FreeBSD)\n     enum FFlag\n     {\n         // @@@DEPRECATED_2.091@@@\n+        deprecated(\"Moved to core.sys.freebsd.sys.mount to correspond to C header file sys/mount.h\")\n         MNT_RDONLY = 1,          /* read only filesystem */\n \n         // @@@DEPRECATED_2.091@@@\n+        deprecated(\"Moved to core.sys.freebsd.sys.mount to correspond to C header file sys/mount.h\")\n         MNT_SYNCHRONOUS = 2,     /* fs written synchronously */\n \n         // @@@DEPRECATED_2.091@@@\n+        deprecated(\"Moved to core.sys.freebsd.sys.mount to correspond to C header file sys/mount.h\")\n         MNT_NOEXEC = 4,          /* can't exec from filesystem */\n \n         // @@@DEPRECATED_2.091@@@\n+        deprecated(\"Moved to core.sys.freebsd.sys.mount to correspond to C header file sys/mount.h\")\n         MNT_NOSUID  = 8,         /* don't honor setuid fs bits */\n \n         // @@@DEPRECATED_2.091@@@\n+        deprecated(\"Moved to core.sys.freebsd.sys.mount to correspond to C header file sys/mount.h\")\n         MNT_NFS4ACLS = 16,       /* enable NFS version 4 ACLs */\n \n         // @@@DEPRECATED_2.091@@@\n+        deprecated(\"Moved to core.sys.freebsd.sys.mount to correspond to C header file sys/mount.h\")\n         MNT_UNION = 32,          /* union with underlying fs */\n \n         // @@@DEPRECATED_2.091@@@\n+        deprecated(\"Moved to core.sys.freebsd.sys.mount to correspond to C header file sys/mount.h\")\n         MNT_ASYNC = 64,          /* fs written asynchronously */\n \n         // @@@DEPRECATED_2.091@@@\n+        deprecated(\"Moved to core.sys.freebsd.sys.mount to correspond to C header file sys/mount.h\")\n         MNT_SUIDDIR = 128,       /* special SUID dir handling */\n \n         // @@@DEPRECATED_2.091@@@\n+        deprecated(\"Moved to core.sys.freebsd.sys.mount to correspond to C header file sys/mount.h\")\n         MNT_SOFTDEP = 256,       /* using soft updates */\n \n         // @@@DEPRECATED_2.091@@@\n+        deprecated(\"Moved to core.sys.freebsd.sys.mount to correspond to C header file sys/mount.h\")\n         MNT_NOSYMFOLLOW = 512,   /* do not follow symlinks */\n \n         // @@@DEPRECATED_2.091@@@\n+        deprecated(\"Moved to core.sys.freebsd.sys.mount to correspond to C header file sys/mount.h\")\n         MNT_GJOURNAL = 1024,     /* GEOM journal support enabled */\n \n         // @@@DEPRECATED_2.091@@@\n+        deprecated(\"Moved to core.sys.freebsd.sys.mount to correspond to C header file sys/mount.h\")\n         MNT_MULTILABEL = 2048,   /* MAC support for objects */\n \n         // @@@DEPRECATED_2.091@@@\n+        deprecated(\"Moved to core.sys.freebsd.sys.mount to correspond to C header file sys/mount.h\")\n         MNT_ACLS = 4096,         /* ACL support enabled */\n \n         // @@@DEPRECATED_2.091@@@\n+        deprecated(\"Moved to core.sys.freebsd.sys.mount to correspond to C header file sys/mount.h\")\n         MNT_NOATIME = 8192,      /* dont update file access time */\n \n         // @@@DEPRECATED_2.091@@@\n+        deprecated(\"Moved to core.sys.freebsd.sys.mount to correspond to C header file sys/mount.h\")\n         MNT_NOCLUSTERR = 16384,  /* disable cluster read */\n \n         // @@@DEPRECATED_2.091@@@\n+        deprecated(\"Moved to core.sys.freebsd.sys.mount to correspond to C header file sys/mount.h\")\n         MNT_NOCLUSTERW = 32768,  /* disable cluster write */\n \n         // @@@DEPRECATED_2.091@@@\n+        deprecated(\"Moved to core.sys.freebsd.sys.mount to correspond to C header file sys/mount.h\")\n         MNT_SUJ = 65536,         /* using journaled soft updates */\n \n         // @@@DEPRECATED_2.091@@@\n+        deprecated(\"Moved to core.sys.freebsd.sys.mount to correspond to C header file sys/mount.h\")\n         MNT_AUTOMOUNTED = 131072 /* mounted by automountd(8) */\n     }\n \n@@ -259,8 +278,16 @@ else version (FreeBSD)\n     enum uint ST_RDONLY = 0x1;\n     enum uint ST_NOSUID = 0x2;\n \n-    int fstatvfs(int, statvfs_t*);\n-    int statvfs(const char*, statvfs_t*);\n+    version (GNU)\n+    {\n+        int fstatvfs(int, statvfs_t*);\n+        int statvfs(const char*, statvfs_t*);\n+    }\n+    else\n+    {\n+        pragma(mangle, \"fstatvfs@FBSD_1.0\") int fstatvfs(int, statvfs_t*);\n+        pragma(mangle, \"statvfs@FBSD_1.0\")  int statvfs(const char*, statvfs_t*);\n+    }\n }\n else\n {"}, {"sha": "95cf88364c7477d384fb2f7cf308f82bb0a27b1f", "filename": "libphobos/libdruntime/core/sys/posix/sys/time.d", "status": "modified", "additions": 23, "deletions": 22, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Ftime.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Ftime.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Ftime.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -14,7 +14,7 @@\n  */\n module core.sys.posix.sys.time;\n \n-private import core.sys.posix.config;\n+import core.sys.posix.config;\n public import core.sys.posix.sys.types;  // for time_t, suseconds_t\n public import core.sys.posix.sys.select; // for fd_set, FD_CLR() FD_ISSET() FD_SET() FD_ZERO() FD_SETSIZE, select()\n \n@@ -31,6 +31,7 @@ version (linux) public import core.sys.linux.sys.time;\n \n version (Posix):\n extern (C) nothrow @nogc:\n+@system:\n \n //\n // XOpen (XSI)\n@@ -55,8 +56,8 @@ ITIMER_PROF\n int getitimer(int, itimerval*);\n int gettimeofday(timeval*, void*);\n int select(int, fd_set*, fd_set*, fd_set*, timeval*); (defined in core.sys.posix.sys.signal)\n-int setitimer(int, in itimerval*, itimerval*);\n-int utimes(in char*, ref const(timeval)[2]); // LEGACY\n+int setitimer(int, const scope itimerval*, itimerval*);\n+int utimes(const scope char*, ref const(timeval)[2]); // LEGACY\n */\n \n version (CRuntime_Glibc)\n@@ -79,8 +80,8 @@ version (CRuntime_Glibc)\n \n     int getitimer(int, itimerval*);\n     int gettimeofday(timeval*, void*);\n-    int setitimer(int, in itimerval*, itimerval*);\n-    int utimes(in char*, ref const(timeval)[2]); // LEGACY\n+    int setitimer(int, const scope itimerval*, itimerval*);\n+    int utimes(const scope char*, ref const(timeval)[2]); // LEGACY\n }\n else version (CRuntime_Musl)\n {\n@@ -90,7 +91,7 @@ else version (CRuntime_Musl)\n         suseconds_t tv_usec;\n     }\n     int gettimeofday(timeval*, void*);\n-    int utimes(in char*, ref const(timeval)[2]);\n+    int utimes(const scope char*, ref const(timeval)[2]);\n }\n else version (Darwin)\n {\n@@ -115,8 +116,8 @@ else version (Darwin)\n \n     int getitimer(int, itimerval*);\n     int gettimeofday(timeval*, timezone_t*); // timezone_t* is normally void*\n-    int setitimer(int, in itimerval*, itimerval*);\n-    int utimes(in char*, ref const(timeval)[2]);\n+    int setitimer(int, const scope itimerval*, itimerval*);\n+    int utimes(const scope char*, ref const(timeval)[2]);\n }\n else version (FreeBSD)\n {\n@@ -141,8 +142,8 @@ else version (FreeBSD)\n \n     int getitimer(int, itimerval*);\n     int gettimeofday(timeval*, timezone_t*); // timezone_t* is normally void*\n-    int setitimer(int, in itimerval*, itimerval*);\n-    int utimes(in char*, ref const(timeval)[2]);\n+    int setitimer(int, const scope itimerval*, itimerval*);\n+    int utimes(const scope char*, ref const(timeval)[2]);\n }\n else version (NetBSD)\n {\n@@ -160,8 +161,8 @@ else version (NetBSD)\n \n     int getitimer(int, itimerval*);\n     int gettimeofday(timeval*, void*); // timezone_t* is normally void*\n-    int setitimer(int, in itimerval*, itimerval*);\n-    int utimes(in char*, ref const(timeval)[2]);\n+    int setitimer(int, const scope itimerval*, itimerval*);\n+    int utimes(const scope char*, ref const(timeval)[2]);\n }\n else version (OpenBSD)\n {\n@@ -186,8 +187,8 @@ else version (OpenBSD)\n \n     int getitimer(int, itimerval*);\n     int gettimeofday(timeval*, timezone_t*);\n-    int setitimer(int, in itimerval*, itimerval*);\n-    int utimes(in char*, ref const(timeval)[2]);\n+    int setitimer(int, const scope itimerval*, itimerval*);\n+    int utimes(const scope char*, ref const(timeval)[2]);\n }\n else version (DragonFlyBSD)\n {\n@@ -212,8 +213,8 @@ else version (DragonFlyBSD)\n \n     int getitimer(int, itimerval*);\n     int gettimeofday(timeval*, timezone_t*); // timezone_t* is normally void*\n-    int setitimer(int, in itimerval*, itimerval*);\n-    int utimes(in char*, ref const(timeval)[2]);\n+    int setitimer(int, const scope itimerval*, itimerval*);\n+    int utimes(const scope char*, ref const(timeval)[2]);\n }\n else version (Solaris)\n {\n@@ -231,8 +232,8 @@ else version (Solaris)\n \n     int getitimer(int, itimerval*);\n     int gettimeofday(timeval*, void*);\n-    int setitimer(int, in itimerval*, itimerval*);\n-    int utimes(in char*, ref const(timeval)[2]);\n+    int setitimer(int, const scope itimerval*, itimerval*);\n+    int utimes(const scope char*, ref const(timeval)[2]);\n }\n else version (CRuntime_Bionic)\n {\n@@ -260,8 +261,8 @@ else version (CRuntime_Bionic)\n \n     int getitimer(int, itimerval*);\n     int gettimeofday(timeval*, timezone_t*);\n-    int setitimer(int, in itimerval*, itimerval*);\n-    int utimes(in char*, ref const(timeval)[2]);\n+    int setitimer(int, const scope itimerval*, itimerval*);\n+    int utimes(const scope char*, ref const(timeval)[2]);\n }\n else version (CRuntime_UClibc)\n {\n@@ -283,8 +284,8 @@ else version (CRuntime_UClibc)\n \n     int getitimer(int, itimerval*);\n     int gettimeofday(timeval*, void*);\n-    int setitimer(int, in itimerval*, itimerval*);\n-    int utimes(in char*, ref const(timeval)[2]);\n+    int setitimer(int, const scope itimerval*, itimerval*);\n+    int utimes(const scope char*, ref const(timeval)[2]);\n }\n else\n {"}, {"sha": "1a6c11be291a8fef7a062f240ebb9f918e594c6b", "filename": "libphobos/libdruntime/core/sys/posix/sys/ttycom.d", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fttycom.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fttycom.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fttycom.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -22,6 +22,7 @@ else version (WatchOS)\n version (Posix):\n \n nothrow @nogc:\n+@system:\n \n version (Darwin)\n {"}, {"sha": "8e84ddb4c601d5d6549a78313cec04907ba10f21", "filename": "libphobos/libdruntime/core/sys/posix/sys/types.d", "status": "modified", "additions": 39, "deletions": 3, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Ftypes.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Ftypes.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Ftypes.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -15,8 +15,8 @@\n  */\n module core.sys.posix.sys.types;\n \n-private import core.sys.posix.config;\n-private import core.stdc.stdint;\n+import core.sys.posix.config;\n+import core.stdc.stdint;\n public import core.stdc.stddef;\n \n version (OSX)\n@@ -30,6 +30,7 @@ else version (WatchOS)\n \n version (Posix):\n extern (C):\n+@system:\n \n //\n // bits/typesizes.h -- underlying types for *_t.\n@@ -139,10 +140,33 @@ else version (CRuntime_Musl)\n     alias int        pid_t;\n     alias uint       uid_t;\n     alias uint       gid_t;\n+\n+    /**\n+     * Musl versions before v1.2.0 (up to v1.1.24) had different\n+     * definitions for `time_t` for 32 bits.\n+     * This was changed to always be 64 bits in v1.2.0:\n+     * https://musl.libc.org/time64.html\n+     * This change was only for 32 bits system and\n+     * didn't affect 64 bits systems\n+     *\n+     * To check previous definitions, `grep` for `time_t` in `arch/`,\n+     * and the result should be (in v1.1.24):\n+     * ---\n+     * // arch/riscv64/bits/alltypes.h.in:20:TYPEDEF long time_t;\n+     * // arch/s390x/bits/alltypes.h.in:17:TYPEDEF long time_t;\n+     * // arch/sh/bits/alltypes.h.in:21:TYPEDEF long time_t;\n+     * ---\n+     *\n+     * In order to be compatible with old versions of Musl,\n+     * one can recompile druntime with `CRuntime_Musl_Pre_Time64`.\n+     */\n     version (D_X32)\n         alias long   time_t;\n-    else\n+    else version (CRuntime_Musl_Pre_Time64)\n         alias c_long time_t;\n+    else\n+        alias long   time_t;\n+\n     alias c_long     clock_t;\n     alias c_ulong    pthread_t;\n     version (D_LP64)\n@@ -688,6 +712,18 @@ version (CRuntime_Glibc)\n         enum __SIZEOF_PTHREAD_BARRIER_T = 32;\n         enum __SIZEOF_PTHREAD_BARRIERATTR_T = 4;\n     }\n+    else version (SPARC)\n+    {\n+        enum __SIZEOF_PTHREAD_ATTR_T = 36;\n+        enum __SIZEOF_PTHREAD_MUTEX_T = 24;\n+        enum __SIZEOF_PTHREAD_MUTEXATTR_T = 4;\n+        enum __SIZEOF_PTHREAD_COND_T = 48;\n+        enum __SIZEOF_PTHREAD_CONDATTR_T = 4;\n+        enum __SIZEOF_PTHREAD_RWLOCK_T = 32;\n+        enum __SIZEOF_PTHREAD_RWLOCKATTR_T = 8;\n+        enum __SIZEOF_PTHREAD_BARRIER_T = 20;\n+        enum __SIZEOF_PTHREAD_BARRIERATTR_T = 4;\n+    }\n     else version (SPARC64)\n     {\n         enum __SIZEOF_PTHREAD_ATTR_T = 56;"}, {"sha": "2563c6df5ad01671cfd57932195697f6e79bb779", "filename": "libphobos/libdruntime/core/sys/posix/sys/uio.d", "status": "modified", "additions": 24, "deletions": 23, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fuio.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fuio.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fuio.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -14,7 +14,7 @@\n  */\n module core.sys.posix.sys.uio;\n \n-private import core.sys.posix.config;\n+import core.sys.posix.config;\n public import core.sys.posix.sys.types; // for ssize_t\n \n version (OSX)\n@@ -28,6 +28,7 @@ else version (WatchOS)\n \n version (Posix):\n extern (C) nothrow @nogc:\n+@system:\n \n //\n // Required\n@@ -42,8 +43,8 @@ struct iovec\n ssize_t // from core.sys.posix.sys.types\n size_t  // from core.sys.posix.sys.types\n \n-ssize_t readv(int, in iovec*, int);\n-ssize_t writev(int, in iovec*, int);\n+ssize_t readv(int, const scope iovec*, int);\n+ssize_t writev(int, const scope iovec*, int);\n */\n \n version (CRuntime_Glibc)\n@@ -54,8 +55,8 @@ version (CRuntime_Glibc)\n         size_t iov_len;\n     }\n \n-    ssize_t readv(int, in iovec*, int);\n-    ssize_t writev(int, in iovec*, int);\n+    ssize_t readv(int, const scope iovec*, int);\n+    ssize_t writev(int, const scope iovec*, int);\n }\n else version (Darwin)\n {\n@@ -65,8 +66,8 @@ else version (Darwin)\n         size_t iov_len;\n     }\n \n-    ssize_t readv(int, in iovec*, int);\n-    ssize_t writev(int, in iovec*, int);\n+    ssize_t readv(int, const scope iovec*, int);\n+    ssize_t writev(int, const scope iovec*, int);\n }\n else version (FreeBSD)\n {\n@@ -76,8 +77,8 @@ else version (FreeBSD)\n         size_t iov_len;\n     }\n \n-    ssize_t readv(int, in iovec*, int);\n-    ssize_t writev(int, in iovec*, int);\n+    ssize_t readv(int, const scope iovec*, int);\n+    ssize_t writev(int, const scope iovec*, int);\n }\n else version (NetBSD)\n {\n@@ -87,8 +88,8 @@ else version (NetBSD)\n         size_t iov_len;\n     }\n \n-    ssize_t readv(int, in iovec*, int);\n-    ssize_t writev(int, in iovec*, int);\n+    ssize_t readv(int, const scope iovec*, int);\n+    ssize_t writev(int, const scope iovec*, int);\n }\n else version (OpenBSD)\n {\n@@ -98,8 +99,8 @@ else version (OpenBSD)\n         size_t iov_len;\n     }\n \n-    ssize_t readv(int, in iovec*, int);\n-    ssize_t writev(int, in iovec*, int);\n+    ssize_t readv(int, const scope iovec*, int);\n+    ssize_t writev(int, const scope iovec*, int);\n }\n else version (DragonFlyBSD)\n {\n@@ -109,8 +110,8 @@ else version (DragonFlyBSD)\n         size_t iov_len;\n     }\n \n-    ssize_t readv(int, in iovec*, int);\n-    ssize_t writev(int, in iovec*, int);\n+    ssize_t readv(int, const scope iovec*, int);\n+    ssize_t writev(int, const scope iovec*, int);\n }\n else version (Solaris)\n {\n@@ -120,8 +121,8 @@ else version (Solaris)\n         size_t iov_len;\n     }\n \n-    ssize_t readv(int, in iovec*, int);\n-    ssize_t writev(int, in iovec*, int);\n+    ssize_t readv(int, const scope iovec*, int);\n+    ssize_t writev(int, const scope iovec*, int);\n }\n else version (CRuntime_Bionic)\n {\n@@ -131,8 +132,8 @@ else version (CRuntime_Bionic)\n         size_t iov_len;\n     }\n \n-    int readv(int, in iovec*, int);\n-    int writev(int, in iovec*, int);\n+    int readv(int, const scope iovec*, int);\n+    int writev(int, const scope iovec*, int);\n }\n else version (CRuntime_Musl)\n {\n@@ -142,8 +143,8 @@ else version (CRuntime_Musl)\n         size_t iov_len;\n     }\n \n-    ssize_t readv(int, in iovec*, int);\n-    ssize_t writev(int, in iovec*, int);\n+    ssize_t readv(int, const scope iovec*, int);\n+    ssize_t writev(int, const scope iovec*, int);\n }\n else version (CRuntime_UClibc)\n {\n@@ -153,8 +154,8 @@ else version (CRuntime_UClibc)\n         size_t iov_len;\n     }\n \n-    ssize_t readv(int, in iovec*, int);\n-    ssize_t writev(int, in iovec*, int);\n+    ssize_t readv(int, const scope iovec*, int);\n+    ssize_t writev(int, const scope iovec*, int);\n }\n else\n {"}, {"sha": "5030e16f25873fd51b2a04c3ddac21c6887f071f", "filename": "libphobos/libdruntime/core/sys/posix/sys/un.d", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fun.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fun.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fun.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -25,6 +25,7 @@ else version (WatchOS)\n \n version (Posix):\n extern(C):\n+@system:\n \n public import core.sys.posix.sys.socket: sa_family_t;\n "}, {"sha": "0abbf14dfe2408a6e8e3e686e96ba0e46564f3c9", "filename": "libphobos/libdruntime/core/sys/posix/sys/utsname.d", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Futsname.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Futsname.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Futsname.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -16,6 +16,7 @@ version (Posix):\n extern(C):\n nothrow:\n @nogc:\n+@system:\n \n version (CRuntime_Glibc)\n {"}, {"sha": "dada64f5e1ae98cf845c6b64d120156418291103", "filename": "libphobos/libdruntime/core/sys/posix/sys/wait.d", "status": "modified", "additions": 45, "deletions": 2, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fwait.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fwait.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fwait.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -14,7 +14,7 @@\n  */\n module core.sys.posix.sys.wait;\n \n-private import core.sys.posix.config;\n+import core.sys.posix.config;\n public import core.sys.posix.sys.types; // for id_t, pid_t\n public import core.sys.posix.signal;    // for siginfo_t (XSI)\n //public import core.sys.posix.resource; // for rusage (XSI)\n@@ -30,6 +30,7 @@ else version (WatchOS)\n \n version (Posix):\n extern (C) nothrow @nogc:\n+@system:\n \n //\n // Required\n@@ -52,6 +53,8 @@ pid_t waitpid(pid_t, int*, int);\n \n version (CRuntime_Glibc)\n {\n+    @safe pure:\n+\n     enum WNOHANG        = 1;\n     enum WUNTRACED      = 2;\n \n@@ -80,6 +83,8 @@ version (CRuntime_Glibc)\n }\n else version (Darwin)\n {\n+    @safe pure:\n+\n     enum WNOHANG        = 1;\n     enum WUNTRACED      = 2;\n \n@@ -102,6 +107,8 @@ else version (Darwin)\n }\n else version (FreeBSD)\n {\n+    @safe pure:\n+\n     enum WNOHANG        = 1;\n     enum WUNTRACED      = 2;\n \n@@ -124,6 +131,8 @@ else version (FreeBSD)\n }\n else version (NetBSD)\n {\n+    @safe pure:\n+\n     enum WNOHANG        = 1;\n     enum WUNTRACED      = 2;\n \n@@ -146,6 +155,8 @@ else version (NetBSD)\n }\n else version (OpenBSD)\n {\n+    @safe pure:\n+\n     enum WNOHANG        = 1;\n     enum WUNTRACED      = 2;\n \n@@ -169,6 +180,8 @@ else version (OpenBSD)\n }\n else version (DragonFlyBSD)\n {\n+    @safe pure:\n+\n     enum WNOHANG        = 1;\n     enum WUNTRACED      = 2;\n \n@@ -191,6 +204,8 @@ else version (DragonFlyBSD)\n }\n else version (Solaris)\n {\n+    @safe pure:\n+\n     enum WNOHANG        = 64;\n     enum WUNTRACED      = 4;\n \n@@ -204,6 +219,8 @@ else version (Solaris)\n }\n else version (CRuntime_Bionic)\n {\n+    @safe pure:\n+\n     enum WNOHANG   = 1;\n     enum WUNTRACED = 2;\n \n@@ -216,6 +233,8 @@ else version (CRuntime_Bionic)\n }\n else version (CRuntime_Musl)\n {\n+    @safe pure:\n+\n     enum WNOHANG        = 1;\n     enum WUNTRACED      = 2;\n \n@@ -229,6 +248,8 @@ else version (CRuntime_Musl)\n }\n else version (CRuntime_UClibc)\n {\n+    @safe pure:\n+\n     enum WNOHANG        = 1;\n     enum WUNTRACED      = 2;\n \n@@ -326,8 +347,30 @@ else version (FreeBSD)\n     enum WSTOPPED       = WUNTRACED;\n     enum WCONTINUED     = 4;\n     enum WNOWAIT        = 8;\n+    enum WEXITED        = 16;\n+    enum WTRAPPED       = 32;\n+\n+    enum idtype_t\n+    {\n+        P_UID,\n+        P_GID,\n+        P_SID,\n+        P_JAILID,\n+        P_PID,\n+        P_PPID,\n+        P_PGID,\n+        P_CID,\n+        P_ALL,\n+        P_LWPID,\n+        P_TASKID,\n+        P_PROJID,\n+        P_POOLID,\n+        P_CTID,\n+        P_CPUID,\n+        P_PSETID\n+    }\n \n-    // http://www.freebsd.org/projects/c99/\n+    int waitid(idtype_t, id_t, siginfo_t*, int);\n }\n else version (NetBSD)\n {"}, {"sha": "cf85664590c03431ce021f2dbd58e0ab680d6944", "filename": "libphobos/libdruntime/core/sys/posix/syslog.d", "status": "modified", "additions": 25, "deletions": 24, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsyslog.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsyslog.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsyslog.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -27,6 +27,7 @@ else version (WatchOS)\n version (Posix):\n \n extern (C) nothrow @nogc:\n+@system:\n \n version (CRuntime_Glibc)\n {\n@@ -40,7 +41,7 @@ version (CRuntime_Glibc)\n         LOG_NOTICE  = 5,   /* normal but significant condition */\n         LOG_INFO    = 6,   /* informational */\n         LOG_DEBUG   = 7,   /* debug-level messages */\n-    };\n+    }\n \n     //OPTIONS\n     enum {\n@@ -50,7 +51,7 @@ version (CRuntime_Glibc)\n         LOG_NDELAY = 0x08,  /* don't delay open */\n         LOG_NOWAIT = 0x10,  /* don't wait for console forks: DEPRECATED */\n         LOG_PERROR = 0x20,  /* log to stderr as well */\n-    };\n+    }\n \n     //FACILITY\n     enum {\n@@ -78,7 +79,7 @@ version (CRuntime_Glibc)\n         LOG_LOCAL7 = (23<<3), /* reserved for local use */\n \n         LOG_NFACILITIES = 24,  /* current number of facilities */\n-    };\n+    }\n \n     int LOG_MASK(int pri) { return 1 << pri; }        /* mask for one priority */\n     int LOG_UPTO(int pri) { return (1 << (pri+1)) - 1; }  /* all priorities through pri */\n@@ -102,7 +103,7 @@ else version (Darwin)\n         LOG_NOTICE  = 5,   /* normal but significant condition */\n         LOG_INFO    = 6,   /* informational */\n         LOG_DEBUG   = 7,   /* debug-level messages */\n-    };\n+    }\n \n     //OPTIONS\n     enum {\n@@ -111,7 +112,7 @@ else version (Darwin)\n         LOG_ODELAY = 0x04,  /* delay open until first syslog() (default) */\n         LOG_NDELAY = 0x08,  /* don't delay open */\n         LOG_NOWAIT = 0x10,  /* don't wait for console forks: DEPRECATED */\n-    };\n+    }\n \n     //FACILITY\n     enum {\n@@ -136,7 +137,7 @@ else version (Darwin)\n         LOG_LOCAL7 = (23<<3), /* reserved for local use */\n \n         LOG_NFACILITIES = 24,  /* current number of facilities */\n-    };\n+    }\n \n     int LOG_MASK(int pri) { return 1 << pri; }        /* mask for one priority */\n     int LOG_UPTO(int pri) { return (1 << (pri+1)) - 1; }  /* all priorities through pri */\n@@ -160,7 +161,7 @@ else version (FreeBSD)\n         LOG_NOTICE  = 5,   /* normal but significant condition */\n         LOG_INFO    = 6,   /* informational */\n         LOG_DEBUG   = 7,   /* debug-level messages */\n-    };\n+    }\n \n     //OPTIONS\n     enum {\n@@ -170,7 +171,7 @@ else version (FreeBSD)\n         LOG_NDELAY = 0x08,    /* don't delay open */\n         LOG_NOWAIT = 0x10,    /* don't wait for console forks: DEPRECATED */\n         LOG_PERROR = 0x20,    /* log to stderr as well */\n-    };\n+    }\n \n     //FACILITY\n     enum {\n@@ -201,7 +202,7 @@ else version (FreeBSD)\n         LOG_LOCAL7 = (23<<3), /* reserved for local use */\n \n         LOG_NFACILITIES = 24,  /* current number of facilities */\n-    };\n+    }\n \n     int LOG_MASK(int pri) { return 1 << pri; }        /* mask for one priority */\n     int LOG_UPTO(int pri) { return (1 << (pri+1)) - 1; }  /* all priorities through pri */\n@@ -225,7 +226,7 @@ else version (NetBSD)\n         LOG_NOTICE  = 5,   /* normal but significant condition */\n         LOG_INFO    = 6,   /* informational */\n         LOG_DEBUG   = 7,   /* debug-level messages */\n-    };\n+    }\n \n     //OPTIONS\n     enum {\n@@ -235,7 +236,7 @@ else version (NetBSD)\n         LOG_NDELAY = 0x08,    /* don't delay open */\n         LOG_NOWAIT = 0x10,    /* don't wait for console forks: DEPRECATED */\n         LOG_PERROR = 0x20,    /* log to stderr as well */\n-    };\n+    }\n \n     //FACILITY\n     enum {\n@@ -266,7 +267,7 @@ else version (NetBSD)\n         LOG_LOCAL7 = (23<<3), /* reserved for local use */\n \n         LOG_NFACILITIES = 24,  /* current number of facilities */\n-    };\n+    }\n \n     int LOG_MASK(int pri) { return 1 << pri; }        /* mask for one priority */\n     int LOG_UPTO(int pri) { return (1 << (pri+1)) - 1; }  /* all priorities through pri */\n@@ -355,7 +356,7 @@ else version (DragonFlyBSD)\n         LOG_NOTICE  = 5,   /* normal but significant condition */\n         LOG_INFO    = 6,   /* informational */\n         LOG_DEBUG   = 7,   /* debug-level messages */\n-    };\n+    }\n \n     //OPTIONS\n     enum {\n@@ -365,7 +366,7 @@ else version (DragonFlyBSD)\n         LOG_NDELAY = 0x08,    /* don't delay open */\n         LOG_NOWAIT = 0x10,    /* don't wait for console forks: DEPRECATED */\n         LOG_PERROR = 0x20,    /* log to stderr as well */\n-    };\n+    }\n \n     //FACILITY\n     enum {\n@@ -396,7 +397,7 @@ else version (DragonFlyBSD)\n         LOG_LOCAL7 = (23<<3), /* reserved for local use */\n \n         LOG_NFACILITIES = 24,  /* current number of facilities */\n-    };\n+    }\n \n     int LOG_MASK(int pri) { return 1 << pri; }        /* mask for one priority */\n     int LOG_UPTO(int pri) { return (1 << (pri+1)) - 1; }  /* all priorities through pri */\n@@ -420,15 +421,15 @@ else version (Solaris)\n         LOG_NOTICE  = 5,   /* normal but significant condition */\n         LOG_INFO    = 6,   /* informational */\n         LOG_DEBUG   = 7,   /* debug-level messages */\n-    };\n+    }\n \n     //OPTIONS\n     enum {\n         LOG_PID = 0x01,     /* log the pid with each message */\n         LOG_CONS   = 0x02,  /* log on the console if errors in sending */\n         LOG_NDELAY = 0x08,  /* don't delay open */\n         LOG_NOWAIT = 0x10,  /* don't wait for console forks: DEPRECATED */\n-    };\n+    }\n \n     //FACILITY\n     enum {\n@@ -456,7 +457,7 @@ else version (Solaris)\n         LOG_LOCAL7 = (23<<3), /* reserved for local use */\n \n         LOG_NFACILITIES = 24,  /* current number of facilities */\n-    };\n+    }\n \n     int LOG_MASK(int pri) { return 1 << pri; }        /* mask for one priority */\n     int LOG_UPTO(int pri) { return (1 << (pri+1)) - 1; }  /* all priorities through pri */\n@@ -478,7 +479,7 @@ else version (CRuntime_UClibc)\n         LOG_NOTICE  = 5,   /* normal but significant condition */\n         LOG_INFO    = 6,   /* informational */\n         LOG_DEBUG   = 7,   /* debug-level messages */\n-    };\n+    }\n \n     //OPTIONS\n     enum {\n@@ -488,7 +489,7 @@ else version (CRuntime_UClibc)\n         LOG_NDELAY = 0x08,  /* don't delay open */\n         LOG_NOWAIT = 0x10,  /* don't wait for console forks: DEPRECATED */\n         LOG_PERROR = 0x20,  /* log to stderr as well */\n-    };\n+    }\n \n     //FACILITY\n     enum {\n@@ -516,7 +517,7 @@ else version (CRuntime_UClibc)\n         LOG_LOCAL7 = (23<<3), /* reserved for local use */\n \n         LOG_NFACILITIES = 24,  /* current number of facilities */\n-    };\n+    }\n \n     int LOG_MASK(int pri) { return 1 << pri; }        /* mask for one priority */\n     int LOG_UPTO(int pri) { return (1 << (pri+1)) - 1; }  /* all priorities through pri */\n@@ -538,7 +539,7 @@ else version (CRuntime_Musl)\n         LOG_NOTICE  = 5,   /* normal but significant condition */\n         LOG_INFO    = 6,   /* informational */\n         LOG_DEBUG   = 7,   /* debug-level messages */\n-    };\n+    }\n \n     //OPTIONS\n     enum {\n@@ -548,7 +549,7 @@ else version (CRuntime_Musl)\n         LOG_NDELAY = 0x08,  /* don't delay open */\n         LOG_NOWAIT = 0x10,  /* don't wait for console forks: DEPRECATED */\n         LOG_PERROR = 0x20,  /* log to stderr as well */\n-    };\n+    }\n \n     //FACILITY\n     enum {\n@@ -576,7 +577,7 @@ else version (CRuntime_Musl)\n         LOG_LOCAL7 = (23<<3), /* reserved for local use */\n \n         LOG_NFACILITIES = 24,  /* current number of facilities */\n-    };\n+    }\n \n     int LOG_MASK(int pri) { return 1 << pri; }        /* mask for one priority */\n     int LOG_UPTO(int pri) { return (1 << (pri+1)) - 1; }  /* all priorities through pri */"}, {"sha": "5de678506d9daf8e7c293c9f9b480c1eb3834f40", "filename": "libphobos/libdruntime/core/sys/posix/termios.d", "status": "modified", "additions": 29, "deletions": 28, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Ftermios.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Ftermios.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Ftermios.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -14,7 +14,7 @@\n  */\n module core.sys.posix.termios;\n \n-private import core.sys.posix.config;\n+import core.sys.posix.config;\n public import core.sys.posix.sys.types; // for pid_t\n \n version (OSX)\n@@ -31,6 +31,7 @@ extern (C):\n \n nothrow:\n @nogc:\n+@system:\n \n //\n // Required\n@@ -129,16 +130,16 @@ TCION\n TCOOFF\n TCOON\n \n-speed_t cfgetispeed(in termios*);\n-speed_t cfgetospeed(in termios*);\n+speed_t cfgetispeed(const scope termios*);\n+speed_t cfgetospeed(const scope termios*);\n int     cfsetispeed(termios*, speed_t);\n int     cfsetospeed(termios*, speed_t);\n int     tcdrain(int);\n int     tcflow(int, int);\n int     tcflush(int, int);\n int     tcgetattr(int, termios*);\n int     tcsendbreak(int, int);\n-int     tcsetattr(int, int, in termios*);\n+int     tcsetattr(int, int, const scope termios*);\n */\n \n version (CRuntime_Glibc)\n@@ -239,16 +240,16 @@ version (CRuntime_Glibc)\n     enum TCOOFF     = 0;\n     enum TCOON      = 1;\n \n-    speed_t cfgetispeed(in termios*);\n-    speed_t cfgetospeed(in termios*);\n+    speed_t cfgetispeed(const scope termios*);\n+    speed_t cfgetospeed(const scope termios*);\n     int     cfsetispeed(termios*, speed_t);\n     int     cfsetospeed(termios*, speed_t);\n     int     tcdrain(int);\n     int     tcflow(int, int);\n     int     tcflush(int, int);\n     int     tcgetattr(int, termios*);\n     int     tcsendbreak(int, int);\n-    int     tcsetattr(int, int, in termios*);\n+    int     tcsetattr(int, int, const scope termios*);\n }\n else version (Darwin)\n {\n@@ -347,16 +348,16 @@ else version (Darwin)\n     enum TCOOFF     = 1;\n     enum TCOON      = 2;\n \n-    speed_t cfgetispeed(in termios*);\n-    speed_t cfgetospeed(in termios*);\n+    speed_t cfgetispeed(const scope termios*);\n+    speed_t cfgetospeed(const scope termios*);\n     int     cfsetispeed(termios*, speed_t);\n     int     cfsetospeed(termios*, speed_t);\n     int     tcdrain(int);\n     int     tcflow(int, int);\n     int     tcflush(int, int);\n     int     tcgetattr(int, termios*);\n     int     tcsendbreak(int, int);\n-    int     tcsetattr(int, int, in termios*);\n+    int     tcsetattr(int, int, const scope termios*);\n \n }\n else version (FreeBSD)\n@@ -456,16 +457,16 @@ else version (FreeBSD)\n     enum TCOOFF     = 1;\n     enum TCOON      = 2;\n \n-    speed_t cfgetispeed(in termios*);\n-    speed_t cfgetospeed(in termios*);\n+    speed_t cfgetispeed(const scope termios*);\n+    speed_t cfgetospeed(const scope termios*);\n     int     cfsetispeed(termios*, speed_t);\n     int     cfsetospeed(termios*, speed_t);\n     int     tcdrain(int);\n     int     tcflow(int, int);\n     int     tcflush(int, int);\n     int     tcgetattr(int, termios*);\n     int     tcsendbreak(int, int);\n-    int     tcsetattr(int, int, in termios*);\n+    int     tcsetattr(int, int, const scope termios*);\n }\n else version (DragonFlyBSD)\n {\n@@ -564,16 +565,16 @@ else version (DragonFlyBSD)\n     enum TCOOFF     = 1;\n     enum TCOON      = 2;\n \n-    speed_t cfgetispeed(in termios*);\n-    speed_t cfgetospeed(in termios*);\n+    speed_t cfgetispeed(const scope termios*);\n+    speed_t cfgetospeed(const scope termios*);\n     int     cfsetispeed(termios*, speed_t);\n     int     cfsetospeed(termios*, speed_t);\n     int     tcdrain(int);\n     int     tcflow(int, int);\n     int     tcflush(int, int);\n     int     tcgetattr(int, termios*);\n     int     tcsendbreak(int, int);\n-    int     tcsetattr(int, int, in termios*);\n+    int     tcsetattr(int, int, const scope termios*);\n }\n else version (NetBSD)\n {\n@@ -672,16 +673,16 @@ else version (NetBSD)\n     enum TCOOFF     = 1;\n     enum TCOON      = 2;\n \n-    speed_t cfgetispeed(in termios*);\n-    speed_t cfgetospeed(in termios*);\n+    speed_t cfgetispeed(const scope termios*);\n+    speed_t cfgetospeed(const scope termios*);\n     int     cfsetispeed(termios*, speed_t);\n     int     cfsetospeed(termios*, speed_t);\n     int     tcdrain(int);\n     int     tcflow(int, int);\n     int     tcflush(int, int);\n     int     tcgetattr(int, termios*);\n     int     tcsendbreak(int, int);\n-    int     tcsetattr(int, int, in termios*);\n+    int     tcsetattr(int, int, const scope termios*);\n }\n else version (OpenBSD)\n {\n@@ -780,16 +781,16 @@ else version (OpenBSD)\n     enum TCOOFF     = 1;\n     enum TCOON      = 2;\n \n-    speed_t cfgetispeed(in termios*);\n-    speed_t cfgetospeed(in termios*);\n+    speed_t cfgetispeed(const scope termios*);\n+    speed_t cfgetospeed(const scope termios*);\n     int     cfsetispeed(termios*, speed_t);\n     int     cfsetospeed(termios*, speed_t);\n     int     tcdrain(int);\n     int     tcflow(int, int);\n     int     tcflush(int, int);\n     int     tcgetattr(int, termios*);\n     int     tcsendbreak(int, int);\n-    int     tcsetattr(int, int, in termios*);\n+    int     tcsetattr(int, int, const scope termios*);\n }\n else version (Solaris)\n {\n@@ -913,12 +914,12 @@ else version (Solaris)\n      * POSIX termios functions\n      * These functions get mapped into ioctls.\n      */\n-    speed_t cfgetospeed(in termios*);\n+    speed_t cfgetospeed(const scope termios*);\n     int     cfsetospeed(termios*, speed_t);\n-    speed_t cfgetispeed(in termios*);\n+    speed_t cfgetispeed(const scope termios*);\n     int     cfsetispeed(termios*, speed_t);\n     int     tcgetattr(int, termios*);\n-    int     tcsetattr(int, int, in termios*);\n+    int     tcsetattr(int, int, const scope termios*);\n     int     tcsendbreak(int, int);\n     int     tcdrain(int);\n     int     tcflush(int, int);\n@@ -1028,16 +1029,16 @@ else version (CRuntime_UClibc)\n     enum TCOOFF     = 0;\n     enum TCOON      = 1;\n \n-    speed_t cfgetispeed(in termios*);\n-    speed_t cfgetospeed(in termios*);\n+    speed_t cfgetispeed(const scope termios*);\n+    speed_t cfgetospeed(const scope termios*);\n     int     cfsetispeed(termios*, speed_t);\n     int     cfsetospeed(termios*, speed_t);\n     int     tcdrain(int);\n     int     tcflow(int, int);\n     int     tcflush(int, int);\n     int     tcgetattr(int, termios*);\n     int     tcsendbreak(int, int);\n-    int     tcsetattr(int, int, in termios*);\n+    int     tcsetattr(int, int, const scope termios*);\n }\n \n //"}, {"sha": "52a6f92be0aeb84f8ead17f606d5754ccdfbc7b3", "filename": "libphobos/libdruntime/core/sys/posix/time.d", "status": "modified", "additions": 105, "deletions": 104, "changes": 209, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Ftime.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Ftime.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Ftime.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -15,7 +15,7 @@\n  */\n module core.sys.posix.time;\n \n-private import core.sys.posix.config;\n+import core.sys.posix.config;\n public import core.stdc.time;\n public import core.sys.posix.sys.types;\n public import core.sys.posix.signal; // for sigevent\n@@ -33,19 +33,20 @@ version (Posix):\n extern (C):\n nothrow:\n @nogc:\n+@system:\n \n //\n // Required (defined in core.stdc.time)\n //\n /*\n-char* asctime(in tm*);\n+char* asctime(const scope tm*);\n clock_t clock();\n-char* ctime(in time_t*);\n+char* ctime(const scope time_t*);\n double difftime(time_t, time_t);\n-tm* gmtime(in time_t*);\n-tm* localtime(in time_t*);\n+tm* gmtime(const scope time_t*);\n+tm* localtime(const scope time_t*);\n time_t mktime(tm*);\n-size_t strftime(char*, size_t, in char*, in tm*);\n+size_t strftime(char*, size_t, const scope char*, const scope tm*);\n time_t time(time_t*);\n */\n \n@@ -114,7 +115,7 @@ int clock_getcpuclockid(pid_t, clockid_t*);\n // Clock Selection (CS)\n //\n /*\n-int clock_nanosleep(clockid_t, int, in timespec*, timespec*);\n+int clock_nanosleep(clockid_t, int, const scope timespec*, timespec*);\n */\n \n //\n@@ -189,13 +190,13 @@ timer_t\n \n int clock_getres(clockid_t, timespec*);\n int clock_gettime(clockid_t, timespec*);\n-int clock_settime(clockid_t, in timespec*);\n-int nanosleep(in timespec*, timespec*);\n+int clock_settime(clockid_t, const scope timespec*);\n+int nanosleep(const scope timespec*, timespec*);\n int timer_create(clockid_t, sigevent*, timer_t*);\n int timer_delete(timer_t);\n int timer_gettime(timer_t, itimerspec*);\n int timer_getoverrun(timer_t);\n-int timer_settime(timer_t, int, in itimerspec*, itimerspec*);\n+int timer_settime(timer_t, int, const scope itimerspec*, itimerspec*);\n */\n \n version (CRuntime_Glibc)\n@@ -225,17 +226,17 @@ version (CRuntime_Glibc)\n \n     int clock_getres(clockid_t, timespec*);\n     int clock_gettime(clockid_t, timespec*);\n-    int clock_settime(clockid_t, in timespec*);\n-    int nanosleep(in timespec*, timespec*);\n+    int clock_settime(clockid_t, const scope timespec*);\n+    int nanosleep(const scope timespec*, timespec*);\n     int timer_create(clockid_t, sigevent*, timer_t*);\n     int timer_delete(timer_t);\n     int timer_gettime(timer_t, itimerspec*);\n     int timer_getoverrun(timer_t);\n-    int timer_settime(timer_t, int, in itimerspec*, itimerspec*);\n+    int timer_settime(timer_t, int, const scope itimerspec*, itimerspec*);\n }\n else version (Darwin)\n {\n-    int nanosleep(in timespec*, timespec*);\n+    int nanosleep(const scope timespec*, timespec*);\n }\n else version (FreeBSD)\n {\n@@ -264,13 +265,13 @@ else version (FreeBSD)\n \n     int clock_getres(clockid_t, timespec*);\n     int clock_gettime(clockid_t, timespec*);\n-    int clock_settime(clockid_t, in timespec*);\n-    int nanosleep(in timespec*, timespec*);\n+    int clock_settime(clockid_t, const scope timespec*);\n+    int nanosleep(const scope timespec*, timespec*);\n     int timer_create(clockid_t, sigevent*, timer_t*);\n     int timer_delete(timer_t);\n     int timer_gettime(timer_t, itimerspec*);\n     int timer_getoverrun(timer_t);\n-    int timer_settime(timer_t, int, in itimerspec*, itimerspec*);\n+    int timer_settime(timer_t, int, const scope itimerspec*, itimerspec*);\n }\n else version (DragonFlyBSD)\n {\n@@ -290,13 +291,13 @@ else version (DragonFlyBSD)\n \n     int clock_getres(clockid_t, timespec*);\n     int clock_gettime(clockid_t, timespec*);\n-    int clock_settime(clockid_t, in timespec*);\n-    int nanosleep(in timespec*, timespec*);\n+    int clock_settime(clockid_t, const scope timespec*);\n+    int nanosleep(const scope timespec*, timespec*);\n     int timer_create(clockid_t, sigevent*, timer_t*);\n     int timer_delete(timer_t);\n     int timer_gettime(timer_t, itimerspec*);\n     int timer_getoverrun(timer_t);\n-    int timer_settime(timer_t, int, in itimerspec*, itimerspec*);\n+    int timer_settime(timer_t, int, const scope itimerspec*, itimerspec*);\n }\n else version (NetBSD)\n {\n@@ -314,13 +315,13 @@ else version (NetBSD)\n \n     int clock_getres(clockid_t, timespec*);\n     int clock_gettime(clockid_t, timespec*);\n-    int clock_settime(clockid_t, in timespec*);\n-    int nanosleep(in timespec*, timespec*);\n+    int clock_settime(clockid_t, const scope timespec*);\n+    int nanosleep(const scope timespec*, timespec*);\n     int timer_create(clockid_t, sigevent*, timer_t*);\n     int timer_delete(timer_t);\n     int timer_gettime(timer_t, itimerspec*);\n     int timer_getoverrun(timer_t);\n-    int timer_settime(timer_t, int, in itimerspec*, itimerspec*);\n+    int timer_settime(timer_t, int, const scope itimerspec*, itimerspec*);\n }\n else version (OpenBSD)\n {\n@@ -338,13 +339,13 @@ else version (OpenBSD)\n \n     int clock_getres(clockid_t, timespec*);\n     int clock_gettime(clockid_t, timespec*);\n-    int clock_settime(clockid_t, in timespec*);\n-    int nanosleep(in timespec*, timespec*);\n+    int clock_settime(clockid_t, const scope timespec*);\n+    int nanosleep(const scope timespec*, timespec*);\n     int timer_create(clockid_t, sigevent*, timer_t*);\n     int timer_delete(timer_t);\n     int timer_gettime(timer_t, itimerspec*);\n     int timer_getoverrun(timer_t);\n-    int timer_settime(timer_t, int, in itimerspec*, itimerspec*);\n+    int timer_settime(timer_t, int, const scope itimerspec*, itimerspec*);\n }\n else version (Solaris)\n {\n@@ -365,16 +366,16 @@ else version (Solaris)\n \n     int clock_getres(clockid_t, timespec*);\n     int clock_gettime(clockid_t, timespec*);\n-    int clock_settime(clockid_t, in timespec*);\n-    int clock_nanosleep(clockid_t, int, in timespec*, timespec*);\n+    int clock_settime(clockid_t, const scope timespec*);\n+    int clock_nanosleep(clockid_t, int, const scope timespec*, timespec*);\n \n-    int nanosleep(in timespec*, timespec*);\n+    int nanosleep(const scope timespec*, timespec*);\n \n     int timer_create(clockid_t, sigevent*, timer_t*);\n     int timer_delete(timer_t);\n     int timer_getoverrun(timer_t);\n     int timer_gettime(timer_t, itimerspec*);\n-    int timer_settime(timer_t, int, in itimerspec*, itimerspec*);\n+    int timer_settime(timer_t, int, const scope itimerspec*, itimerspec*);\n }\n else version (CRuntime_Bionic)\n {\n@@ -396,12 +397,12 @@ else version (CRuntime_Bionic)\n \n     int clock_getres(int, timespec*);\n     int clock_gettime(int, timespec*);\n-    int nanosleep(in timespec*, timespec*);\n+    int nanosleep(const scope timespec*, timespec*);\n     int timer_create(int, sigevent*, timer_t*);\n     int timer_delete(timer_t);\n     int timer_gettime(timer_t, itimerspec*);\n     int timer_getoverrun(timer_t);\n-    int timer_settime(timer_t, int, in itimerspec*, itimerspec*);\n+    int timer_settime(timer_t, int, const scope itimerspec*, itimerspec*);\n }\n else version (CRuntime_Musl)\n {\n@@ -426,18 +427,18 @@ else version (CRuntime_Musl)\n     enum CLOCK_SGI_CYCLE = 10;\n     enum CLOCK_TAI = 11;\n \n-    int nanosleep(in timespec*, timespec*);\n+    int nanosleep(const scope timespec*, timespec*);\n \n     int clock_getres(clockid_t, timespec*);\n     int clock_gettime(clockid_t, timespec*);\n-    int clock_settime(clockid_t, in timespec*);\n-    int clock_nanosleep(clockid_t, int, in timespec*, timespec*);\n+    int clock_settime(clockid_t, const scope timespec*);\n+    int clock_nanosleep(clockid_t, int, const scope timespec*, timespec*);\n     int clock_getcpuclockid(pid_t, clockid_t *);\n \n     int timer_create(clockid_t, sigevent*, timer_t*);\n     int timer_delete(timer_t);\n     int timer_gettime(timer_t, itimerspec*);\n-    int timer_settime(timer_t, int, in itimerspec*, itimerspec*);\n+    int timer_settime(timer_t, int, const scope itimerspec*, itimerspec*);\n     int timer_getoverrun(timer_t);\n }\n else version (CRuntime_UClibc)\n@@ -459,13 +460,13 @@ else version (CRuntime_UClibc)\n \n     int clock_getres(clockid_t, timespec*);\n     int clock_gettime(clockid_t, timespec*);\n-    int clock_settime(clockid_t, in timespec*);\n-    int nanosleep(in timespec*, timespec*);\n+    int clock_settime(clockid_t, const scope timespec*);\n+    int nanosleep(const scope timespec*, timespec*);\n     int timer_create(clockid_t, sigevent*, timer_t*);\n     int timer_delete(timer_t);\n     int timer_gettime(timer_t, itimerspec*);\n     int timer_getoverrun(timer_t);\n-    int timer_settime(timer_t, int, in itimerspec*, itimerspec*);\n+    int timer_settime(timer_t, int, const scope itimerspec*, itimerspec*);\n }\n else\n {\n@@ -476,81 +477,81 @@ else\n // Thread-Safe Functions (TSF)\n //\n /*\n-char* asctime_r(in tm*, char*);\n-char* ctime_r(in time_t*, char*);\n-tm*   gmtime_r(in time_t*, tm*);\n-tm*   localtime_r(in time_t*, tm*);\n+char* asctime_r(const scope tm*, char*);\n+char* ctime_r(const scope time_t*, char*);\n+tm*   gmtime_r(const scope time_t*, tm*);\n+tm*   localtime_r(const scope time_t*, tm*);\n */\n \n version (CRuntime_Glibc)\n {\n-    char* asctime_r(in tm*, char*);\n-    char* ctime_r(in time_t*, char*);\n-    tm*   gmtime_r(in time_t*, tm*);\n-    tm*   localtime_r(in time_t*, tm*);\n+    char* asctime_r(const scope tm*, char*);\n+    char* ctime_r(const scope time_t*, char*);\n+    tm*   gmtime_r(const scope time_t*, tm*);\n+    tm*   localtime_r(const scope time_t*, tm*);\n }\n else version (Darwin)\n {\n-    char* asctime_r(in tm*, char*);\n-    char* ctime_r(in time_t*, char*);\n-    tm*   gmtime_r(in time_t*, tm*);\n-    tm*   localtime_r(in time_t*, tm*);\n+    char* asctime_r(const scope tm*, char*);\n+    char* ctime_r(const scope time_t*, char*);\n+    tm*   gmtime_r(const scope time_t*, tm*);\n+    tm*   localtime_r(const scope time_t*, tm*);\n }\n else version (FreeBSD)\n {\n-    char* asctime_r(in tm*, char*);\n-    char* ctime_r(in time_t*, char*);\n-    tm*   gmtime_r(in time_t*, tm*);\n-    tm*   localtime_r(in time_t*, tm*);\n+    char* asctime_r(const scope tm*, char*);\n+    char* ctime_r(const scope time_t*, char*);\n+    tm*   gmtime_r(const scope time_t*, tm*);\n+    tm*   localtime_r(const scope time_t*, tm*);\n }\n else version (NetBSD)\n {\n-    char* asctime_r(in tm*, char*);\n-    char* ctime_r(in time_t*, char*);\n-    tm*   gmtime_r(in time_t*, tm*);\n-    tm*   localtime_r(in time_t*, tm*);\n+    char* asctime_r(const scope tm*, char*);\n+    char* ctime_r(const scope time_t*, char*);\n+    tm*   gmtime_r(const scope time_t*, tm*);\n+    tm*   localtime_r(const scope time_t*, tm*);\n }\n else version (OpenBSD)\n {\n-    char* asctime_r(in tm*, char*);\n-    char* ctime_r(in time_t*, char*);\n-    tm*   gmtime_r(in time_t*, tm*);\n-    tm*   localtime_r(in time_t*, tm*);\n+    char* asctime_r(const scope tm*, char*);\n+    char* ctime_r(const scope time_t*, char*);\n+    tm*   gmtime_r(const scope time_t*, tm*);\n+    tm*   localtime_r(const scope time_t*, tm*);\n }\n else version (DragonFlyBSD)\n {\n-    char* asctime_r(in tm*, char*);\n-    char* ctime_r(in time_t*, char*);\n-    tm*   gmtime_r(in time_t*, tm*);\n-    tm*   localtime_r(in time_t*, tm*);\n+    char* asctime_r(const scope tm*, char*);\n+    char* ctime_r(const scope time_t*, char*);\n+    tm*   gmtime_r(const scope time_t*, tm*);\n+    tm*   localtime_r(const scope time_t*, tm*);\n }\n else version (Solaris)\n {\n-    char* asctime_r(in tm*, char*);\n-    char* ctime_r(in time_t*, char*);\n-    tm* gmtime_r(in time_t*, tm*);\n-    tm* localtime_r(in time_t*, tm*);\n+    char* asctime_r(const scope tm*, char*);\n+    char* ctime_r(const scope time_t*, char*);\n+    tm* gmtime_r(const scope time_t*, tm*);\n+    tm* localtime_r(const scope time_t*, tm*);\n }\n else version (CRuntime_Bionic)\n {\n-    char* asctime_r(in tm*, char*);\n-    char* ctime_r(in time_t*, char*);\n-    tm* gmtime_r(in time_t*, tm*);\n-    tm* localtime_r(in time_t*, tm*);\n+    char* asctime_r(const scope tm*, char*);\n+    char* ctime_r(const scope time_t*, char*);\n+    tm* gmtime_r(const scope time_t*, tm*);\n+    tm* localtime_r(const scope time_t*, tm*);\n }\n else version (CRuntime_Musl)\n {\n-    char* asctime_r(in tm*, char*);\n-    char* ctime_r(in time_t*, char*);\n-    tm*   gmtime_r(in time_t*, tm*);\n-    tm*   localtime_r(in time_t*, tm*);\n+    char* asctime_r(const scope tm*, char*);\n+    char* ctime_r(const scope time_t*, char*);\n+    tm*   gmtime_r(const scope time_t*, tm*);\n+    tm*   localtime_r(const scope time_t*, tm*);\n }\n else version (CRuntime_UClibc)\n {\n-    char* asctime_r(in tm*, char*);\n-    char* ctime_r(in time_t*, char*);\n-    tm*   gmtime_r(in time_t*, tm*);\n-    tm*   localtime_r(in time_t*, tm*);\n+    char* asctime_r(const scope tm*, char*);\n+    char* ctime_r(const scope time_t*, char*);\n+    tm*   gmtime_r(const scope time_t*, tm*);\n+    tm*   localtime_r(const scope time_t*, tm*);\n }\n else\n {\n@@ -566,77 +567,77 @@ getdate_err\n int daylight;\n int timezone;\n \n-tm* getdate(in char*);\n-char* strptime(in char*, in char*, tm*);\n+tm* getdate(const scope char*);\n+char* strptime(const scope char*, const scope char*, tm*);\n */\n \n version (CRuntime_Glibc)\n {\n     extern __gshared int    daylight;\n     extern __gshared c_long timezone;\n \n-    tm*   getdate(in char*);\n-    char* strptime(in char*, in char*, tm*);\n+    tm*   getdate(const scope char*);\n+    char* strptime(const scope char*, const scope char*, tm*);\n }\n else version (Darwin)\n {\n     extern __gshared c_long timezone;\n     extern __gshared int    daylight;\n \n-    tm*   getdate(in char*);\n-    char* strptime(in char*, in char*, tm*);\n+    tm*   getdate(const scope char*);\n+    char* strptime(const scope char*, const scope char*, tm*);\n }\n else version (FreeBSD)\n {\n-    //tm*   getdate(in char*);\n-    char* strptime(in char*, in char*, tm*);\n+    //tm*   getdate(const scope char*);\n+    char* strptime(const scope char*, const scope char*, tm*);\n }\n else version (NetBSD)\n {\n-    tm*   getdate(in char*);\n-    char* strptime(in char*, in char*, tm*);\n+    tm*   getdate(const scope char*);\n+    char* strptime(const scope char*, const scope char*, tm*);\n }\n else version (OpenBSD)\n {\n-    //tm*   getdate(in char*);\n-    char* strptime(in char*, in char*, tm*);\n+    //tm*   getdate(const scope char*);\n+    char* strptime(const scope char*, const scope char*, tm*);\n }\n else version (DragonFlyBSD)\n {\n-    //tm*   getdate(in char*);\n-    char* strptime(in char*, in char*, tm*);\n+    //tm*   getdate(const scope char*);\n+    char* strptime(const scope char*, const scope char*, tm*);\n }\n else version (Solaris)\n {\n     extern __gshared c_long timezone, altzone;\n     extern __gshared int daylight;\n \n-    tm* getdate(in char*);\n-    char* __strptime_dontzero(in char*, in char*, tm*);\n+    tm* getdate(const scope char*);\n+    char* __strptime_dontzero(const scope char*, const scope char*, tm*);\n     alias __strptime_dontzero strptime;\n }\n else version (CRuntime_Bionic)\n {\n     extern __gshared int    daylight;\n     extern __gshared c_long timezone;\n \n-    char* strptime(in char*, in char*, tm*);\n+    char* strptime(const scope char*, const scope char*, tm*);\n }\n else version (CRuntime_Musl)\n {\n     extern __gshared int daylight;\n     extern __gshared c_long timezone;\n \n-    tm*   getdate(in char*);\n-    char* strptime(in char*, in char*, tm*);\n+    tm*   getdate(const scope char*);\n+    char* strptime(const scope char*, const scope char*, tm*);\n }\n else version (CRuntime_UClibc)\n {\n     extern __gshared int    daylight;\n     extern __gshared c_long timezone;\n \n-    tm*   getdate(in char*);\n-    char* strptime(in char*, in char*, tm*);\n+    tm*   getdate(const scope char*);\n+    char* strptime(const scope char*, const scope char*, tm*);\n }\n else\n {"}, {"sha": "e38aa96d8ebaf11b0a75153642371ecd03ce933c", "filename": "libphobos/libdruntime/core/sys/posix/ucontext.d", "status": "modified", "additions": 91, "deletions": 13, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fucontext.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fucontext.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fucontext.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -14,15 +14,27 @@\n  */\n module core.sys.posix.ucontext;\n \n-private import core.sys.posix.config;\n+import core.sys.posix.config;\n public import core.sys.posix.signal; // for sigset_t, stack_t\n-private import core.stdc.stdint : uintptr_t;\n+import core.stdc.stdint : uintptr_t;\n \n version (Posix):\n extern (C):\n nothrow:\n @nogc:\n-\n+@system:\n+\n+version (OSX)\n+    version = Darwin;\n+else version (iOS)\n+    version = Darwin;\n+else version (TVOS)\n+    version = Darwin;\n+else version (WatchOS)\n+    version = Darwin;\n+\n+version (ARM)     version = ARM_Any;\n+version (AArch64) version = ARM_Any;\n version (MIPS32)  version = MIPS_Any;\n version (MIPS64)  version = MIPS_Any;\n version (PPC)     version = PPC_Any;\n@@ -648,7 +660,7 @@ version (CRuntime_Glibc)\n             mcontext_t  uc_mcontext;\n         }\n     }\n-    else version (SPARC64)\n+    else version (SPARC_Any)\n     {\n         enum MC_NGREG = 19;\n         alias mc_greg_t = c_ulong;\n@@ -909,6 +921,72 @@ else version (CRuntime_Musl)\n     else\n         static assert(0, \"unimplemented\");\n }\n+else version (Darwin)\n+{\n+    private\n+    {\n+        version (X86_64)\n+        {\n+            struct __darwin_mcontext\n+            {\n+                ulong[89] __opaque;\n+            }\n+            static assert(__darwin_mcontext.sizeof == 712);\n+        }\n+        else version (X86)\n+        {\n+            struct __darwin_mcontext\n+            {\n+                uint[150] __opaque;\n+            }\n+            static assert(__darwin_mcontext.sizeof == 600);\n+        }\n+        else version (AArch64)\n+        {\n+            struct __darwin_mcontext\n+            {\n+                align(16) ulong[102] __opaque;\n+            }\n+            static assert(__darwin_mcontext.sizeof == 816);\n+        }\n+        else version (ARM)\n+        {\n+            struct __darwin_mcontext\n+            {\n+                uint[85] __opaque;\n+            }\n+            static assert(__darwin_mcontext.sizeof == 340);\n+        }\n+        else version (PPC_Any)\n+        {\n+            struct __darwin_mcontext\n+            {\n+                version (PPC64)\n+                    ulong[129] __opaque;\n+                else\n+                    uint[258] __opaque;\n+            }\n+            static assert(__darwin_mcontext.sizeof == 1032);\n+        }\n+        else\n+            static assert(false, \"mcontext_t unimplemented for this platform.\");\n+    }\n+\n+    alias mcontext_t = __darwin_mcontext*;\n+\n+    struct ucontext\n+    {\n+        int                uc_onstack;\n+        sigset_t           uc_sigmask;\n+        stack_t            uc_stack;\n+        ucontext*          uc_link;\n+        size_t             uc_mcsize;\n+        __darwin_mcontext* uc_mcontext;\n+        __darwin_mcontext  __mcontext_data;\n+    }\n+\n+    alias ucontext_t = ucontext;\n+}\n else version (FreeBSD)\n {\n     // <machine/ucontext.h>\n@@ -1278,7 +1356,7 @@ else version (OpenBSD)\n             int     sc_trapno;\n             int     sc_err;\n             void*   sc_fpstate; // union savefpu*\n-        };\n+        }\n     }\n     else version (PPC)\n     {\n@@ -1365,7 +1443,7 @@ else version (DragonFlyBSD)\n         uint            mc_reserved;\n         uint[8]         mc_unused;\n         int[256]        mc_fpregs;\n-      };  // __attribute__((aligned(64)));\n+      }  // __attribute__((aligned(64)));\n     }\n     else\n     {\n@@ -1389,7 +1467,7 @@ else version (DragonFlyBSD)\n }\n else version (Solaris)\n {\n-    private import core.stdc.stdint;\n+    import core.stdc.stdint;\n \n     alias uint[4] upad128_t;\n \n@@ -1479,7 +1557,7 @@ else version (Solaris)\n             {\n                 uint[32]   fpu_regs;\n                 double[16] fpu_dregs;\n-            };\n+            }\n             fq    *fpu_q;\n             uint  fpu_fsr;\n             ubyte fpu_qcnt;\n@@ -1831,8 +1909,8 @@ else version (CRuntime_UClibc)\n /*\n int  getcontext(ucontext_t*);\n void makecontext(ucontext_t*, void function(), int, ...);\n-int  setcontext(in ucontext_t*);\n-int  swapcontext(ucontext_t*, in ucontext_t*);\n+int  setcontext(const scope ucontext_t*);\n+int  swapcontext(ucontext_t*, const scope ucontext_t*);\n */\n \n static if ( is( ucontext_t ) )\n@@ -1852,13 +1930,13 @@ static if ( is( ucontext_t ) )\n     else\n         void makecontext(ucontext_t*, void function(), int, ...);\n \n-    int  setcontext(in ucontext_t*);\n-    int  swapcontext(ucontext_t*, in ucontext_t*);\n+    int  setcontext(const scope ucontext_t*);\n+    int  swapcontext(ucontext_t*, const scope ucontext_t*);\n }\n \n version (Solaris)\n {\n-    int walkcontext(in ucontext_t*, int function(uintptr_t, int, void*), void*);\n+    int walkcontext(const scope ucontext_t*, int function(uintptr_t, int, void*), void*);\n     int addrtosymstr(uintptr_t, char*, int);\n     int printstack(int);\n }"}, {"sha": "a691884cb2e1f6330e083b713fade0e953792b13", "filename": "libphobos/libdruntime/core/sys/posix/unistd.d", "status": "modified", "additions": 79, "deletions": 78, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Funistd.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Funistd.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Funistd.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -14,8 +14,8 @@\n  */\n module core.sys.posix.unistd;\n \n-private import core.sys.posix.config;\n-private import core.stdc.stddef;\n+import core.sys.posix.config;\n+import core.stdc.stddef;\n public import core.sys.posix.inttypes;  // for intptr_t\n public import core.sys.posix.sys.types; // for ssize_t, uid_t, gid_t, off_t, pid_t, useconds_t\n \n@@ -32,6 +32,7 @@ version (Posix):\n extern (C):\n nothrow:\n @nogc:\n+@system:\n \n enum STDIN_FILENO  = 0;\n enum STDOUT_FILENO = 1;\n@@ -42,20 +43,20 @@ extern __gshared int     optind;\n extern __gshared int     opterr;\n extern __gshared int     optopt;\n \n-int     access(in char*, int);\n+int     access(const scope char*, int);\n uint    alarm(uint) @trusted;\n-int     chdir(in char*);\n-int     chown(in char*, uid_t, gid_t);\n+int     chdir(const scope char*);\n+int     chown(const scope char*, uid_t, gid_t);\n int     close(int) @trusted;\n size_t  confstr(int, char*, size_t);\n int     dup(int) @trusted;\n int     dup2(int, int) @trusted;\n-int     execl(in char*, in char*, ...);\n-int     execle(in char*, in char*, ...);\n-int     execlp(in char*, in char*, ...);\n-int     execv(in char*, in char**);\n-int     execve(in char*, in char**, in char**);\n-int     execvp(in char*, in char**);\n+int     execl(const scope char*, const scope char*, ...);\n+int     execle(const scope char*, const scope char*, ...);\n+int     execlp(const scope char*, const scope char*, ...);\n+int     execv(const scope char*, const scope char**);\n+int     execve(const scope char*, const scope char**, const scope char**);\n+int     execvp(const scope char*, const scope char**);\n void    _exit(int) @trusted;\n int     fchown(int, uid_t, gid_t) @trusted;\n pid_t   fork() @trusted;\n@@ -69,36 +70,36 @@ int     getgroups(int, gid_t *);\n int     gethostname(char*, size_t);\n char*   getlogin() @trusted;\n int     getlogin_r(char*, size_t);\n-int     getopt(int, in char**, in char*);\n+int     getopt(int, const scope char**, const scope char*);\n pid_t   getpgrp() @trusted;\n pid_t   getpid() @trusted;\n pid_t   getppid() @trusted;\n uid_t   getuid() @trusted;\n int     isatty(int) @trusted;\n-int     link(in char*, in char*);\n+int     link(const scope char*, const scope char*);\n //off_t   lseek(int, off_t, int);\n-c_long  pathconf(in char*, int);\n+c_long  pathconf(const scope char*, int);\n int     pause() @trusted;\n int     pipe(ref int[2]) @trusted;\n ssize_t read(int, void*, size_t);\n-ssize_t readlink(in char*, char*, size_t);\n-int     rmdir(in char*);\n+ssize_t readlink(const scope char*, char*, size_t);\n+int     rmdir(const scope char*);\n int     setegid(gid_t) @trusted;\n int     seteuid(uid_t) @trusted;\n int     setgid(gid_t) @trusted;\n-int     setgroups(size_t, in gid_t*) @trusted;\n+int     setgroups(size_t, const scope gid_t*) @trusted;\n int     setpgid(pid_t, pid_t) @trusted;\n pid_t   setsid() @trusted;\n int     setuid(uid_t) @trusted;\n uint    sleep(uint) @trusted;\n-int     symlink(in char*, in char*);\n+int     symlink(const scope char*, const scope char*);\n c_long  sysconf(int) @trusted;\n pid_t   tcgetpgrp(int) @trusted;\n int     tcsetpgrp(int, pid_t) @trusted;\n char*   ttyname(int) @trusted;\n int     ttyname_r(int, char*, size_t);\n-int     unlink(in char*);\n-ssize_t write(int, in void*, size_t);\n+int     unlink(const scope char*);\n+ssize_t write(int, const scope void*, size_t);\n \n version (CRuntime_Glibc)\n {\n@@ -2400,51 +2401,51 @@ else version (CRuntime_UClibc)\n // XOpen (XSI)\n //\n /*\n-char*      crypt(in char*, in char*);\n+char*      crypt(const scope char*, const scope char*);\n char*      ctermid(char*);\n void       encrypt(ref char[64], int);\n int        fchdir(int);\n c_long     gethostid();\n pid_t      getpgid(pid_t);\n pid_t      getsid(pid_t);\n char*      getwd(char*); // LEGACY\n-int        lchown(in char*, uid_t, gid_t);\n+int        lchown(const scope char*, uid_t, gid_t);\n int        lockf(int, int, off_t);\n int        nice(int);\n ssize_t    pread(int, void*, size_t, off_t);\n-ssize_t    pwrite(int, in void*, size_t, off_t);\n+ssize_t    pwrite(int, const scope void*, size_t, off_t);\n pid_t      setpgrp();\n int        setregid(gid_t, gid_t);\n int        setreuid(uid_t, uid_t);\n-void       swab(in void*, void*, ssize_t);\n+void       swab(const scope void*, void*, ssize_t);\n void       sync();\n-int        truncate(in char*, off_t);\n+int        truncate(const scope char*, off_t);\n useconds_t ualarm(useconds_t, useconds_t);\n int        usleep(useconds_t);\n pid_t      vfork();\n */\n \n version (CRuntime_Glibc)\n {\n-    char*      crypt(in char*, in char*);\n+    char*      crypt(const scope char*, const scope char*);\n     char*      ctermid(char*);\n     void       encrypt(ref char[64], int) @trusted;\n     int        fchdir(int) @trusted;\n     c_long     gethostid() @trusted;\n     pid_t      getpgid(pid_t) @trusted;\n     pid_t      getsid(pid_t) @trusted;\n     char*      getwd(char*); // LEGACY\n-    int        lchown(in char*, uid_t, gid_t);\n+    int        lchown(const scope char*, uid_t, gid_t);\n     //int        lockf(int, int, off_t);\n     int        nice(int) @trusted;\n     //ssize_t    pread(int, void*, size_t, off_t);\n-    //ssize_t    pwrite(int, in void*, size_t, off_t);\n+    //ssize_t    pwrite(int, const scope void*, size_t, off_t);\n     pid_t      setpgrp() @trusted;\n     int        setregid(gid_t, gid_t) @trusted;\n     int        setreuid(uid_t, uid_t) @trusted;\n-    void       swab(in void*, void*, ssize_t);\n+    void       swab(const scope void*, void*, ssize_t);\n     void       sync() @trusted;\n-    //int        truncate(in char*, off_t);\n+    //int        truncate(const scope char*, off_t);\n     useconds_t ualarm(useconds_t, useconds_t) @trusted;\n     int        usleep(useconds_t) @trusted;\n     pid_t      vfork();\n@@ -2457,18 +2458,18 @@ version (CRuntime_Glibc)\n     ssize_t    pread64(int, void*, size_t, off_t);\n     alias      pread64 pread;\n \n-    ssize_t    pwrite64(int, in void*, size_t, off_t);\n+    ssize_t    pwrite64(int, const scope void*, size_t, off_t);\n     alias      pwrite64 pwrite;\n \n-    int        truncate64(in char*, off_t);\n+    int        truncate64(const scope char*, off_t);\n     alias      truncate64 truncate;\n   }\n   else\n   {\n     int        lockf(int, int, off_t) @trusted;\n     ssize_t    pread(int, void*, size_t, off_t);\n-    ssize_t    pwrite(int, in void*, size_t, off_t);\n-    int        truncate(in char*, off_t);\n+    ssize_t    pwrite(int, const scope void*, size_t, off_t);\n+    int        truncate(const scope char*, off_t);\n   }\n }\n else version (CRuntime_Musl)\n@@ -2479,125 +2480,125 @@ else version (CRuntime_Musl)\n }\n else version (Darwin)\n {\n-    char*      crypt(in char*, in char*);\n+    char*      crypt(const scope char*, const scope char*);\n     char*      ctermid(char*);\n     void       encrypt(ref char[64], int) @trusted;\n     int        fchdir(int) @trusted;\n     c_long     gethostid() @trusted;\n     pid_t      getpgid(pid_t) @trusted;\n     pid_t      getsid(pid_t) @trusted;\n     char*      getwd(char*); // LEGACY\n-    int        lchown(in char*, uid_t, gid_t);\n+    int        lchown(const scope char*, uid_t, gid_t);\n     int        lockf(int, int, off_t) @trusted;\n     int        nice(int) @trusted;\n     ssize_t    pread(int, void*, size_t, off_t);\n-    ssize_t    pwrite(int, in void*, size_t, off_t);\n+    ssize_t    pwrite(int, const scope void*, size_t, off_t);\n     pid_t      setpgrp() @trusted;\n     int        setregid(gid_t, gid_t) @trusted;\n     int        setreuid(uid_t, uid_t) @trusted;\n-    void       swab(in void*, void*, ssize_t);\n+    void       swab(const scope void*, void*, ssize_t);\n     void       sync() @trusted;\n-    int        truncate(in char*, off_t);\n+    int        truncate(const scope char*, off_t);\n     useconds_t ualarm(useconds_t, useconds_t) @trusted;\n     int        usleep(useconds_t) @trusted;\n     pid_t      vfork();\n }\n else version (FreeBSD)\n {\n-    char*      crypt(in char*, in char*);\n+    char*      crypt(const scope char*, const scope char*);\n     //char*      ctermid(char*);\n     void       encrypt(ref char[64], int) @trusted;\n     int        fchdir(int) @trusted;\n     c_long     gethostid() @trusted;\n     int        getpgid(pid_t) @trusted;\n     int        getsid(pid_t) @trusted;\n     char*      getwd(char*); // LEGACY\n-    int        lchown(in char*, uid_t, gid_t);\n+    int        lchown(const scope char*, uid_t, gid_t);\n     int        lockf(int, int, off_t) @trusted;\n     int        nice(int) @trusted;\n     ssize_t    pread(int, void*, size_t, off_t);\n-    ssize_t    pwrite(int, in void*, size_t, off_t);\n+    ssize_t    pwrite(int, const scope void*, size_t, off_t);\n     int        setpgrp(pid_t, pid_t) @trusted;\n     int        setregid(gid_t, gid_t) @trusted;\n     int        setreuid(uid_t, uid_t) @trusted;\n-    void       swab(in void*, void*, ssize_t);\n+    void       swab(const scope void*, void*, ssize_t);\n     void       sync() @trusted;\n-    int        truncate(in char*, off_t);\n+    int        truncate(const scope char*, off_t);\n     useconds_t ualarm(useconds_t, useconds_t) @trusted;\n     int        usleep(useconds_t) @trusted;\n     pid_t      vfork();\n }\n else version (NetBSD)\n {\n-    char*      crypt(in char*, in char*);\n+    char*      crypt(const scope char*, const scope char*);\n     //char*      ctermid(char*);\n     void       encrypt(ref char[64], int) @trusted;\n     int        fchdir(int) @trusted;\n     c_long     gethostid() @trusted;\n     int        getpgid(pid_t) @trusted;\n     int        getsid(pid_t) @trusted;\n     char*      getwd(char*); // LEGACY\n-    int        lchown(in char*, uid_t, gid_t);\n+    int        lchown(const scope char*, uid_t, gid_t);\n     int        lockf(int, int, off_t) @trusted;\n     int        nice(int) @trusted;\n     ssize_t    pread(int, void*, size_t, off_t);\n-    ssize_t    pwrite(int, in void*, size_t, off_t);\n+    ssize_t    pwrite(int, const scope void*, size_t, off_t);\n     int        setpgrp(pid_t, pid_t) @trusted;\n     int        setregid(gid_t, gid_t) @trusted;\n     int        setreuid(uid_t, uid_t) @trusted;\n-    void       swab(in void*, void*, ssize_t);\n+    void       swab(const scope void*, void*, ssize_t);\n     void       sync() @trusted;\n-    int        truncate(in char*, off_t);\n+    int        truncate(const scope char*, off_t);\n     useconds_t ualarm(useconds_t, useconds_t) @trusted;\n     int        usleep(useconds_t) @trusted;\n     pid_t      vfork();\n }\n else version (OpenBSD)\n {\n-    char*      crypt(in char*, in char*);\n+    char*      crypt(const scope char*, const scope char*);\n     //char*      ctermid(char*);\n     //void       encrypt(ref char[64], int) @trusted;\n     int        fchdir(int) @trusted;\n     c_long     gethostid() @trusted;\n     pid_t      getpgid(pid_t) @trusted;\n     pid_t      getsid(pid_t) @trusted;\n     char*      getwd(char*);\n-    int        lchown(in char*, uid_t, gid_t);\n+    int        lchown(const scope char*, uid_t, gid_t);\n     int        lockf(int, int, off_t) @trusted;\n     int        nice(int) @trusted;\n     ssize_t    pread(int, void*, size_t, off_t);\n-    ssize_t    pwrite(int, in void*, size_t, off_t);\n+    ssize_t    pwrite(int, const scope void*, size_t, off_t);\n     int        setpgrp(pid_t, pid_t) @trusted;\n     int        setregid(gid_t, gid_t) @trusted;\n     int        setreuid(uid_t, uid_t) @trusted;\n-    void       swab(in void*, void*, ssize_t);\n+    void       swab(const scope void*, void*, ssize_t);\n     void       sync() @trusted;\n-    int        truncate(in char*, off_t);\n+    int        truncate(const scope char*, off_t);\n     useconds_t ualarm(useconds_t, useconds_t) @trusted;\n     int        usleep(useconds_t) @trusted;\n     pid_t      vfork();\n }\n else version (DragonFlyBSD)\n {\n-    char*      crypt(in char*, in char*);\n+    char*      crypt(const scope char*, const scope char*);\n     //char*      ctermid(char*);\n     void       encrypt(ref char[64], int) @trusted;\n     int        fchdir(int) @trusted;\n     c_long     gethostid() @trusted;\n     int        getpgid(pid_t) @trusted;\n     int        getsid(pid_t) @trusted;\n     char*      getwd(char*); // LEGACY\n-    int        lchown(in char*, uid_t, gid_t);\n+    int        lchown(const scope char*, uid_t, gid_t);\n     int        lockf(int, int, off_t) @trusted;\n     int        nice(int) @trusted;\n     ssize_t    pread(int, void*, size_t, off_t);\n-    ssize_t    pwrite(int, in void*, size_t, off_t);\n+    ssize_t    pwrite(int, const scope void*, size_t, off_t);\n     int        setpgrp(pid_t, pid_t) @trusted;\n     int        setregid(gid_t, gid_t) @trusted;\n     int        setreuid(uid_t, uid_t) @trusted;\n-    void       swab(in void*, void*, ssize_t);\n+    void       swab(const scope void*, void*, ssize_t);\n     void       sync() @trusted;\n-    int        truncate(in char*, off_t);\n+    int        truncate(const scope char*, off_t);\n     useconds_t ualarm(useconds_t, useconds_t) @trusted;\n     int        usleep(useconds_t) @trusted;\n     pid_t      vfork();\n@@ -2606,34 +2607,34 @@ else version (CRuntime_Bionic)\n {\n     int        fchdir(int) @trusted;\n     pid_t      getpgid(pid_t) @trusted;\n-    int        lchown(in char*, uid_t, gid_t);\n+    int        lchown(const scope char*, uid_t, gid_t);\n     int        nice(int) @trusted;\n     ssize_t    pread(int, void*, size_t, off_t);\n-    ssize_t    pwrite(int, in void*, size_t, off_t);\n+    ssize_t    pwrite(int, const scope void*, size_t, off_t);\n     int        setpgrp() @trusted;\n     int        setregid(gid_t, gid_t) @trusted;\n     int        setreuid(uid_t, uid_t) @trusted;\n     int        sync() @trusted;\n-    int        truncate(in char*, off_t);\n+    int        truncate(const scope char*, off_t);\n     int        usleep(c_ulong) @trusted;\n     pid_t      vfork();\n }\n else version (Solaris)\n {\n-    char*      crypt(in char*, in char*);\n+    char*      crypt(const scope char*, const scope char*);\n     char*      ctermid(char*);\n     void       encrypt(ref char[64], int);\n     int        fchdir(int);\n     c_long     gethostid();\n     pid_t      getpgid(pid_t);\n     pid_t      getsid(pid_t);\n     char*      getwd(char*); // LEGACY\n-    int        lchown(in char*, uid_t, gid_t);\n+    int        lchown(const scope char*, uid_t, gid_t);\n     int        nice(int);\n     pid_t      setpgrp();\n     int        setregid(gid_t, gid_t);\n     int        setreuid(uid_t, uid_t);\n-    void       swab(in void*, void*, ssize_t);\n+    void       swab(const scope void*, void*, ssize_t);\n     void       sync();\n     useconds_t ualarm(useconds_t, useconds_t);\n     int        usleep(useconds_t);\n@@ -2647,10 +2648,10 @@ else version (Solaris)\n         ssize_t     pread(int, void*, size_t, off_t);\n         alias       pread pread64;\n \n-        ssize_t     pwrite(int, in void*, size_t, off_t);\n+        ssize_t     pwrite(int, const scope void*, size_t, off_t);\n         alias       pwrite pwrite64;\n \n-        int         truncate(in char*, off_t);\n+        int         truncate(const scope char*, off_t);\n         alias       truncate truncate64;\n     }\n     else\n@@ -2663,37 +2664,37 @@ else version (Solaris)\n             ssize_t    pread64(int, void*, size_t, off64_t);\n             alias      pread64 pread;\n \n-            ssize_t    pwrite64(int, in void*, size_t, off_t);\n+            ssize_t    pwrite64(int, const scope void*, size_t, off_t);\n             alias      pwrite64 pwrite;\n \n-            int        truncate64(in char*, off_t);\n+            int        truncate64(const scope char*, off_t);\n             alias      truncate64 truncate;\n         }\n         else\n         {\n             int        lockf(int, int, off_t);\n             ssize_t    pread(int, void*, size_t, off_t);\n-            ssize_t    pwrite(int, in void*, size_t, off_t);\n-            int        truncate(in char*, off_t);\n+            ssize_t    pwrite(int, const scope void*, size_t, off_t);\n+            int        truncate(const scope char*, off_t);\n         }\n     }\n }\n else version (CRuntime_UClibc)\n {\n-    char*      crypt(in char*, in char*);\n+    char*      crypt(const scope char*, const scope char*);\n     char*      ctermid(char*);\n     void       encrypt(ref char[64], int) @trusted;\n     int        fchdir(int) @trusted;\n     c_long     gethostid() @trusted;\n     pid_t      getpgid(pid_t) @trusted;\n     pid_t      getsid(pid_t) @trusted;\n     char*      getwd(char*); // LEGACY\n-    int        lchown(in char*, uid_t, gid_t);\n+    int        lchown(const scope char*, uid_t, gid_t);\n     int        nice(int) @trusted;\n     pid_t      setpgrp() @trusted;\n     int        setregid(gid_t, gid_t) @trusted;\n     int        setreuid(uid_t, uid_t) @trusted;\n-    void       swab(in void*, void*, ssize_t);\n+    void       swab(const scope void*, void*, ssize_t);\n     void       sync() @trusted;\n     useconds_t ualarm(useconds_t, useconds_t) @trusted;\n     int        usleep(useconds_t) @trusted;\n@@ -2707,17 +2708,17 @@ else version (CRuntime_UClibc)\n     ssize_t    pread64(int, void*, size_t, off_t);\n     alias      pread64 pread;\n \n-    ssize_t    pwrite64(int, in void*, size_t, off_t);\n+    ssize_t    pwrite64(int, const scope void*, size_t, off_t);\n     alias      pwrite64 pwrite;\n \n-    int        truncate64(in char*, off_t);\n+    int        truncate64(const scope char*, off_t);\n     alias      truncate64 truncate;\n   }\n   else\n   {\n     int        lockf(int, int, off_t) @trusted;\n     ssize_t    pread(int, void*, size_t, off_t);\n-    ssize_t    pwrite(int, in void*, size_t, off_t);\n-    int        truncate(in char*, off_t);\n+    ssize_t    pwrite(int, const scope void*, size_t, off_t);\n+    int        truncate(const scope char*, off_t);\n   }\n }"}, {"sha": "66aea58d78f898bd42181f4295f6d34ca961bc97", "filename": "libphobos/libdruntime/core/sys/posix/utime.d", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Futime.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Futime.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Futime.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -14,7 +14,7 @@\n  */\n module core.sys.posix.utime;\n \n-private import core.sys.posix.config;\n+import core.sys.posix.config;\n public import core.sys.posix.sys.types; // for time_t\n \n version (OSX)\n@@ -30,6 +30,7 @@ version (Posix):\n extern (C):\n nothrow:\n @nogc:\n+@system:\n \n //\n // Required\n@@ -41,7 +42,7 @@ struct utimbuf\n     time_t  modtime;\n }\n \n-int utime(in char*, in utimbuf*);\n+int utime(const scope char*, const scope utimbuf*);\n */\n \n version (CRuntime_Glibc)\n@@ -52,7 +53,7 @@ version (CRuntime_Glibc)\n         time_t  modtime;\n     }\n \n-    int utime(in char*, in utimbuf*);\n+    int utime(const scope char*, const scope utimbuf*);\n }\n else version (CRuntime_Musl)\n {\n@@ -62,7 +63,7 @@ else version (CRuntime_Musl)\n         time_t  modtime;\n     }\n \n-    int utime(in char*, in utimbuf*);\n+    int utime(const scope char*, const scope utimbuf*);\n }\n else version (Darwin)\n {\n@@ -72,7 +73,7 @@ else version (Darwin)\n         time_t  modtime;\n     }\n \n-    int utime(in char*, in utimbuf*);\n+    int utime(const scope char*, const scope utimbuf*);\n }\n else version (FreeBSD)\n {\n@@ -82,7 +83,7 @@ else version (FreeBSD)\n         time_t  modtime;\n     }\n \n-    int utime(in char*, in utimbuf*);\n+    int utime(const scope char*, const scope utimbuf*);\n }\n else version (NetBSD)\n {\n@@ -92,7 +93,7 @@ else version (NetBSD)\n         time_t  modtime;\n     }\n \n-    int utime(in char*, in utimbuf*);\n+    int utime(const scope char*, const scope utimbuf*);\n }\n else version (OpenBSD)\n {\n@@ -102,7 +103,7 @@ else version (OpenBSD)\n         time_t  modtime;\n     }\n \n-    int utime(in char*, in utimbuf*);\n+    int utime(const scope char*, const scope utimbuf*);\n }\n else version (DragonFlyBSD)\n {\n@@ -112,7 +113,7 @@ else version (DragonFlyBSD)\n         time_t  modtime;\n     }\n \n-    int utime(in char*, in utimbuf*);\n+    int utime(const scope char*, const scope utimbuf*);\n }\n else version (Solaris)\n {\n@@ -122,7 +123,7 @@ else version (Solaris)\n         time_t  modtime;\n     }\n \n-    int utime(in char*, in utimbuf*);\n+    int utime(const scope char*, const scope utimbuf*);\n }\n else version (CRuntime_Bionic)\n {\n@@ -132,7 +133,7 @@ else version (CRuntime_Bionic)\n         time_t  modtime;\n     }\n \n-    int utime(in char*, in utimbuf*);\n+    int utime(const scope char*, const scope utimbuf*);\n }\n else version (CRuntime_UClibc)\n {\n@@ -142,5 +143,5 @@ else version (CRuntime_UClibc)\n         time_t  modtime;\n     }\n \n-    int utime(in char*, in utimbuf*);\n+    int utime(const scope char*, const scope utimbuf*);\n }"}, {"sha": "4f69bfdbcec4bee6a7a560d0329e268e14a7f03b", "filename": "libphobos/libdruntime/core/sys/solaris/dlfcn.d", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fsolaris%2Fdlfcn.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fsolaris%2Fdlfcn.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fsolaris%2Fdlfcn.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -39,7 +39,7 @@ enum\n \n alias c_ulong Lmid_t;\n \n-void* dlmopen(Lmid_t, in char*, int);\n+void* dlmopen(Lmid_t, const scope char*, int);\n \n enum\n {\n@@ -56,7 +56,7 @@ enum\n     RTLD_CONFSET      = 0x10000,\n }\n \n-int dldump(in char*, in char*, int);\n+int dldump(const scope char*, const scope char*, int);\n \n struct Dl_info\n {"}, {"sha": "f7876430150e1e4398a0c3399487cc7f7c00ff6c", "filename": "libphobos/libdruntime/core/sys/solaris/err.d", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fsolaris%2Ferr.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fsolaris%2Ferr.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fsolaris%2Ferr.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -0,0 +1,23 @@\n+/**\n+  * D header file for Solaris err.h.\n+  *\n+  * Copyright: Copyright \u00a9 2019, The D Language Foundation\n+  * License: <a href=\"http://www.boost.org/LICENSE_1_0.txt\">Boost License 1.0</a>.\n+  * Authors: Ernesto Castellotti\n+  */\n+module core.sys.solaris.err;\n+import core.stdc.stdarg : va_list;\n+\n+version (Solaris):\n+extern (C):\n+nothrow:\n+@nogc:\n+\n+void err(int eval, scope const char* fmt, ...);\n+void errx(int eval, scope const char* fmt, ...);\n+void warn(scope const char* fmt, ...);\n+void warnx(scope const char* fmt, ...);\n+void verr(int eval, scope const char* fmt, va_list args);\n+void verrx(int eval, scope const char* fmt, va_list args);\n+void vwarn(scope const char* fmt, va_list args);\n+void vwarnx(scope const char* fmt, va_list args);"}, {"sha": "a8d3c1f514f7866f153d6579155d5c055da4cb12", "filename": "libphobos/libdruntime/core/sys/solaris/libelf.d", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fsolaris%2Flibelf.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fsolaris%2Flibelf.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fsolaris%2Flibelf.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -131,7 +131,7 @@ int elf_getshnum(Elf*, size_t*);\n int elf_getshdrnum(Elf*, size_t*);\n int elf_getshstrndx(Elf*, size_t*);\n int elf_getshdrstrndx(Elf*, size_t*);\n-c_ulong elf_hash(in char*);\n+c_ulong elf_hash(const scope char*);\n uint elf_sys_encoding();\n long elf32_checksum(Elf*);\n Elf_Kind elf_kind(Elf*);\n@@ -149,8 +149,8 @@ char* elf_rawfile(Elf*, size_t*);\n char* elf_strptr(Elf*, size_t, size_t);\n off_t elf_update(Elf*, Elf_Cmd);\n uint elf_version(uint);\n-Elf_Data* elf32_xlatetof(Elf_Data*, in Elf_Data*, uint);\n-Elf_Data* elf32_xlatetom(Elf_Data*, in Elf_Data*, uint);\n+Elf_Data* elf32_xlatetof(Elf_Data*, const scope Elf_Data*, uint);\n+Elf_Data* elf32_xlatetom(Elf_Data*, const scope Elf_Data*, uint);\n \n version (D_LP64)\n {\n@@ -161,6 +161,6 @@ Elf64_Shdr* elf64_getshdr(Elf_Scn*);\n long elf64_checksum(Elf*);\n Elf64_Ehdr* elf64_newehdr(Elf*);\n Elf64_Phdr* elf64_newphdr(Elf*, size_t);\n-Elf_Data* elf64_xlatetof(Elf_Data*, in Elf_Data*, uint);\n-Elf_Data* elf64_xlatetom(Elf_Data*, in Elf_Data*, uint);\n-}\n\\ No newline at end of file\n+Elf_Data* elf64_xlatetof(Elf_Data*, const scope Elf_Data*, uint);\n+Elf_Data* elf64_xlatetom(Elf_Data*, const scope Elf_Data*, uint);\n+}"}, {"sha": "1459783b4a88e53176c9f6a54f6ed268e9188572", "filename": "libphobos/libdruntime/core/sys/solaris/link.d", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fsolaris%2Flink.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fsolaris%2Flink.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fsolaris%2Flink.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -18,21 +18,21 @@ import core.sys.solaris.sys.link;\n uint ld_version(uint);\n void ld_input_done(uint*);\n \n-void ld_start(in char*, in Elf32_Half, in char*);\n+void ld_start(const scope char*, const Elf32_Half, const scope char*);\n void ld_atexit(int);\n-void ld_open(in char**, in char**, int*, int, Elf**, Elf*, size_t, in Elf_Kind);\n-void ld_file(in char*, in Elf_Kind, int, Elf*);\n-void ld_input_section(in char*, Elf32_Shdr**, Elf32_Word, Elf_Data*, Elf*, uint*);\n-void ld_section(in char*, Elf32_Shdr*, Elf32_Word, Elf_Data*, Elf*);\n+void ld_open(const scope char**, const scope char**, int*, int, Elf**, Elf*, size_t, const Elf_Kind);\n+void ld_file(const scope char*, const Elf_Kind, int, Elf*);\n+void ld_input_section(const scope char*, Elf32_Shdr**, Elf32_Word, Elf_Data*, Elf*, uint*);\n+void ld_section(const scope char*, Elf32_Shdr*, Elf32_Word, Elf_Data*, Elf*);\n \n version (D_LP64)\n {\n-    void ld_start64(in char*, in Elf64_Half, in char*);\n+    void ld_start64(const scope char*, const Elf64_Half, const scope char*);\n     void ld_atexit64(int);\n-    void ld_open64(in char**, in char**, int*, int, Elf**, Elf*, size_t, in Elf_Kind);\n-    void ld_file64(in char*, in Elf_Kind, int, Elf*);\n-    void ld_input_section64(in char*, Elf64_Shdr**, Elf64_Word, Elf_Data*, Elf*, uint*);\n-    void ld_section64(in char*, Elf64_Shdr*, Elf64_Word, Elf_Data*, Elf*);\n+    void ld_open64(const scope char**, const scope char**, int*, int, Elf**, Elf*, size_t, const Elf_Kind);\n+    void ld_file64(const scope char*, const Elf_Kind, int, Elf*);\n+    void ld_input_section64(const scope char*, Elf64_Shdr**, Elf64_Word, Elf_Data*, Elf*, uint*);\n+    void ld_section64(const scope char*, Elf64_Shdr*, Elf64_Word, Elf_Data*, Elf*);\n }\n \n enum LD_SUP_VNONE    = 0;\n@@ -130,19 +130,19 @@ else\n uint la_version(uint);\n void la_activity(uintptr_t*, uint);\n void la_preinit(uintptr_t*);\n-char* la_objsearch(in char*, uintptr_t*, uint);\n+char* la_objsearch(const scope char*, uintptr_t*, uint);\n uint la_objopen(Link_map*, Lmid_t, uintptr_t*);\n uint la_objclose(uintptr_t*);\n-int la_objfilter(uintptr_t*, in char*, uintptr_t*, uint);\n+int la_objfilter(uintptr_t*, const scope char*, uintptr_t*, uint);\n \n version (D_LP64)\n {\n     uintptr_t la_amd64_pltenter(Elf64_Sym*, uint, uintptr_t*, uintptr_t*,\n-                                La_amd64_regs*, uint*, in char*);\n-    uintptr_t la_symbind64(Elf64_Sym*, uint, uintptr_t*, uintptr_t*, uint*, in char*);\n+                                La_amd64_regs*, uint*, const scope char*);\n+    uintptr_t la_symbind64(Elf64_Sym*, uint, uintptr_t*, uintptr_t*, uint*, const scope char*);\n     uintptr_t la_sparcv9_pltenter(Elf64_Sym*, uint, uintptr_t*, uintptr_t*,\n-                                  La_sparcv9_regs*, uint*, in char*);\n-    uintptr_t la_pltexit64(Elf64_Sym*, uint, uintptr_t*, uintptr_t*, uintptr_t, in char*);\n+                                  La_sparcv9_regs*, uint*, const scope char*);\n+    uintptr_t la_pltexit64(Elf64_Sym*, uint, uintptr_t*, uintptr_t*, uintptr_t, const scope char*);\n }\n else\n {\n@@ -172,7 +172,7 @@ struct dl_phdr_info\n     uint64_t           dlpi_subs;\n     size_t             dlpi_tls_modid;  // since Solaris 11.5\n     void*              dlpi_tls_data;   // since Solaris 11.5\n-};\n+}\n \n private alias extern(C) int function(dl_phdr_info*, size_t, void *) dl_iterate_phdr_cb;\n private alias extern(C) int function(dl_phdr_info*, size_t, void *) @nogc dl_iterate_phdr_cb_ngc;"}, {"sha": "81d02347598e1fd63f1268cb7134dfa107f4685f", "filename": "libphobos/libdruntime/core/sys/solaris/sys/elf_SPARC.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fsolaris%2Fsys%2Felf_SPARC.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fsolaris%2Fsys%2Felf_SPARC.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fsolaris%2Fsys%2Felf_SPARC.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -178,4 +178,4 @@ else\n     enum M_PLT_RESERVSZ = M32_PLT_RESERVSZ;\n     enum M_GOT_ENTSIZE  = M32_GOT_ENTSIZE;\n     enum M_GOT_MAXSMALL = M32_GOT_MAXSMALL;\n-}\n\\ No newline at end of file\n+}"}, {"sha": "77bc184710fcc10a903502fb59b2611ca48e400f", "filename": "libphobos/libdruntime/core/sys/windows/accctrl.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Faccctrl.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Faccctrl.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Faccctrl.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -12,7 +12,7 @@ version (Windows):\n \n version (ANSI) {} else version = Unicode;\n \n-private import core.sys.windows.basetyps, core.sys.windows.w32api, core.sys.windows.winbase, core.sys.windows.windef;\n+import core.sys.windows.basetyps, core.sys.windows.w32api, core.sys.windows.winbase, core.sys.windows.windef;\n \n // FIXME: check types and grouping of constants\n // FIXME: check Windows version support"}, {"sha": "1e75d3f52ee183e5bdfa69199678c8565506af53", "filename": "libphobos/libdruntime/core/sys/windows/aclapi.d", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Faclapi.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Faclapi.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Faclapi.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -9,6 +9,7 @@\n  */\n module core.sys.windows.aclapi;\n version (Windows):\n+@system:\n \n version (ANSI) {} else version = Unicode;\n pragma(lib, \"advapi32\");"}, {"sha": "6ae37c6a686e6f0ca6916f77b2b58ca7f5a9de21", "filename": "libphobos/libdruntime/core/sys/windows/aclui.d", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Faclui.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Faclui.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Faclui.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -9,16 +9,17 @@\n  */\n module core.sys.windows.aclui;\n version (Windows):\n+@system:\n pragma(lib, \"aclui\");\n \n-private import core.sys.windows.w32api;\n+import core.sys.windows.w32api;\n /*\n static assert (_WIN32_WINNT >= 0x500,\n     \"core.sys.windows.aclui is available only if version Windows2000, WindowsXP, Windows2003 \"\n     \"or WindowsVista is set\");\n */\n import core.sys.windows.accctrl, core.sys.windows.commctrl, core.sys.windows.objbase;\n-private import core.sys.windows.basetyps, core.sys.windows.prsht, core.sys.windows.unknwn, core.sys.windows.windef,\n+import core.sys.windows.basetyps, core.sys.windows.prsht, core.sys.windows.unknwn, core.sys.windows.windef,\n   core.sys.windows.winuser;\n \n "}, {"sha": "97983c6d74a8b3edc5027e31e3693a2f09eff017", "filename": "libphobos/libdruntime/core/sys/windows/basetsd.d", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fbasetsd.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fbasetsd.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fbasetsd.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -9,6 +9,7 @@\n  */\n module core.sys.windows.basetsd;\n version (Windows):\n+@system:\n \n /*  This template is used in these modules to declare constant pointer types,\n  *  in order to support both D 1.x and 2.x."}, {"sha": "abe312e4ddc1647edf15ddf966919d55d8a770f0", "filename": "libphobos/libdruntime/core/sys/windows/basetyps.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fbasetyps.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fbasetyps.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fbasetyps.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -8,8 +8,9 @@\n  */\n module core.sys.windows.basetyps;\n version (Windows):\n+@system:\n \n-private import core.sys.windows.windef, core.sys.windows.basetsd;\n+import core.sys.windows.windef, core.sys.windows.basetsd;\n \n align(1) struct GUID {  // size is 16\n     align(1):"}, {"sha": "8d67b881ee1c97227340e25ddf3f1105f2da40af", "filename": "libphobos/libdruntime/core/sys/windows/cguid.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fcguid.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fcguid.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fcguid.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -9,5 +9,5 @@\n module core.sys.windows.cguid;\n version (Windows):\n \n-private import core.sys.windows.basetyps;\n+import core.sys.windows.basetyps;\n "}, {"sha": "90a294343fcd19ea9b058d6c1edc881de8cf70a6", "filename": "libphobos/libdruntime/core/sys/windows/com.d", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fcom.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fcom.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fcom.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -1,5 +1,6 @@\n module core.sys.windows.com;\n version (Windows):\n+@system:\n \n pragma(lib,\"uuid\");\n "}, {"sha": "cb45ff5762ccaa2c80b8e1e53833680e961b215c", "filename": "libphobos/libdruntime/core/sys/windows/comcat.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fcomcat.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fcomcat.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fcomcat.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -9,9 +9,10 @@\n  */\n module core.sys.windows.comcat;\n version (Windows):\n+@system:\n \n import core.sys.windows.ole2;\n-private import core.sys.windows.basetyps, core.sys.windows.cguid, core.sys.windows.objbase, core.sys.windows.unknwn,\n+import core.sys.windows.basetyps, core.sys.windows.cguid, core.sys.windows.objbase, core.sys.windows.unknwn,\n   core.sys.windows.windef, core.sys.windows.wtypes;\n \n alias IEnumGUID LPENUMGUID;"}, {"sha": "f008e75ddeee8f0ea97a249a44c38707bbc16ece", "filename": "libphobos/libdruntime/core/sys/windows/commctrl.d", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fcommctrl.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fcommctrl.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fcommctrl.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -8,13 +8,14 @@\n  */\n module core.sys.windows.commctrl;\n version (Windows):\n+@system:\n \n version (ANSI) {} else version = Unicode;\n pragma(lib, \"comctl32\");\n \n-private import core.sys.windows.w32api, core.sys.windows.windef, core.sys.windows.winuser;\n-private import core.sys.windows.winbase; // for SYSTEMTIME\n-private import core.sys.windows.objfwd;  // for LPSTREAM\n+import core.sys.windows.w32api, core.sys.windows.windef, core.sys.windows.winuser;\n+import core.sys.windows.winbase; // for SYSTEMTIME\n+import core.sys.windows.objfwd;  // for LPSTREAM\n \n import core.sys.windows.prsht;\n \n@@ -3898,7 +3899,7 @@ static if (_WIN32_WINNT >= 0x600) {\n     {\n         int iItem;\n         int iGroup;\n-    };\n+    }\n     alias LVITEMINDEX* PLVITEMINDEX;\n \n     struct LVFOOTERINFO"}, {"sha": "1e8057c5f062f50193160ab61c118550e14cd333", "filename": "libphobos/libdruntime/core/sys/windows/commdlg.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fcommdlg.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fcommdlg.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fcommdlg.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -8,11 +8,12 @@\n  */\n module core.sys.windows.commdlg;\n version (Windows):\n+@system:\n \n version (ANSI) {} else version = Unicode;\n pragma(lib, \"comdlg32\");\n \n-private import core.sys.windows.w32api;\n+import core.sys.windows.w32api;\n import core.sys.windows.windef, core.sys.windows.winuser;\n import core.sys.windows.wingdi; // for LPLOGFONTA\n "}, {"sha": "b040aad3eb5f187a50ed2091638e7d1f9cb17aaf", "filename": "libphobos/libdruntime/core/sys/windows/cpl.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fcpl.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fcpl.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fcpl.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -9,10 +9,11 @@\n  */\n module core.sys.windows.cpl;\n version (Windows):\n+@system:\n \n version (ANSI) {} else version = Unicode;\n \n-private import core.sys.windows.windef, core.sys.windows.winuser;\n+import core.sys.windows.windef, core.sys.windows.winuser;\n \n enum : uint {\n     WM_CPL_LAUNCH = WM_USER + 1000,"}, {"sha": "c9452fad77c74247ca57d22ed06f29abb27ff131", "filename": "libphobos/libdruntime/core/sys/windows/cplext.d", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fcplext.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fcplext.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fcplext.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -9,6 +9,7 @@\n  */\n module core.sys.windows.cplext;\n version (Windows):\n+@system:\n \n enum : uint {\n     CPLPAGE_MOUSE_BUTTONS      = 1,"}, {"sha": "ccfc7ca4ffc203b4b5cd67c0225716499fa905c2", "filename": "libphobos/libdruntime/core/sys/windows/custcntl.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fcustcntl.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fcustcntl.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fcustcntl.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -9,10 +9,11 @@\n  */\n module core.sys.windows.custcntl;\n version (Windows):\n+@system:\n \n version (ANSI) {} else version = Unicode;\n \n-private import core.sys.windows.windef;\n+import core.sys.windows.windef;\n \n // FIXME: check type\n enum CCF_NOTEXT = 1;"}, {"sha": "8c9827034e952f3b54f1dd0f789aaaabc49cc48a", "filename": "libphobos/libdruntime/core/sys/windows/dbghelp.d", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fdbghelp.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fdbghelp.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fdbghelp.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -11,6 +11,7 @@\n \n module core.sys.windows.dbghelp;\n version (Windows):\n+@system:\n \n import core.sys.windows.winbase /+: FreeLibrary, GetProcAddress, LoadLibraryA+/;\n import core.sys.windows.windef;\n@@ -36,7 +37,7 @@ extern(System)\n     alias DWORD64      function(HANDLE hProcess, DWORD64 dwAddr) SymGetModuleBase64Func;\n     alias BOOL         function(HANDLE hProcess, DWORD64 dwAddr, IMAGEHLP_MODULEA64 *ModuleInfo) SymGetModuleInfo64Func;\n     alias BOOL         function(HANDLE hProcess, DWORD64 Address, DWORD64 *Displacement, IMAGEHLP_SYMBOLA64 *Symbol) SymGetSymFromAddr64Func;\n-    alias DWORD        function(PCTSTR DecoratedName, PTSTR UnDecoratedName, DWORD UndecoratedLength, DWORD Flags) UnDecorateSymbolNameFunc;\n+    alias DWORD        function(PCSTR DecoratedName, PSTR UnDecoratedName, DWORD UndecoratedLength, DWORD Flags) UnDecorateSymbolNameFunc;\n     alias DWORD64      function(HANDLE hProcess, HANDLE hFile, PCSTR ImageName, PCSTR ModuleName, DWORD64 BaseOfDll, DWORD SizeOfDll) SymLoadModule64Func;\n     alias BOOL         function(HANDLE HProcess, PTSTR SearchPath, DWORD SearchPathLength) SymGetSearchPathFunc;\n     alias BOOL         function(HANDLE hProcess, DWORD64 Address) SymUnloadModule64Func;\n@@ -80,6 +81,7 @@ struct DbgHelp\n             sm_inst.SymGetModuleBase64       = cast(SymGetModuleBase64Func) GetProcAddress(sm_hndl,\"SymGetModuleBase64\");\n             sm_inst.SymGetModuleInfo64       = cast(SymGetModuleInfo64Func) GetProcAddress(sm_hndl,\"SymGetModuleInfo64\");\n             sm_inst.SymGetSymFromAddr64      = cast(SymGetSymFromAddr64Func) GetProcAddress(sm_hndl,\"SymGetSymFromAddr64\");\n+            sm_inst.UnDecorateSymbolName     = cast(UnDecorateSymbolNameFunc) GetProcAddress(sm_hndl,\"UnDecorateSymbolName\");\n             sm_inst.SymLoadModule64          = cast(SymLoadModule64Func) GetProcAddress(sm_hndl,\"SymLoadModule64\");\n             sm_inst.SymGetSearchPath         = cast(SymGetSearchPathFunc) GetProcAddress(sm_hndl,\"SymGetSearchPath\");\n             sm_inst.SymUnloadModule64        = cast(SymUnloadModule64Func) GetProcAddress(sm_hndl,\"SymUnloadModule64\");\n@@ -88,8 +90,8 @@ struct DbgHelp\n             assert( sm_inst.SymInitialize && sm_inst.SymCleanup && sm_inst.StackWalk64 && sm_inst.SymGetOptions &&\n                     sm_inst.SymSetOptions && sm_inst.SymFunctionTableAccess64 && sm_inst.SymGetLineFromAddr64 &&\n                     sm_inst.SymGetModuleBase64 && sm_inst.SymGetModuleInfo64 && sm_inst.SymGetSymFromAddr64 &&\n-                    sm_inst.SymLoadModule64 && sm_inst.SymGetSearchPath && sm_inst.SymUnloadModule64 &&\n-                    sm_inst.SymRegisterCallback64 && sm_inst.ImagehlpApiVersion);\n+                    sm_inst.UnDecorateSymbolName && sm_inst.SymLoadModule64 && sm_inst.SymGetSearchPath &&\n+                    sm_inst.SymUnloadModule64 && sm_inst.SymRegisterCallback64 && sm_inst.ImagehlpApiVersion);\n \n             return &sm_inst;\n         }"}, {"sha": "64477df96ff63dbea9df43d08b55e1ab3d83b2c7", "filename": "libphobos/libdruntime/core/sys/windows/dbghelp_types.d", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fdbghelp_types.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fdbghelp_types.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fdbghelp_types.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -11,6 +11,7 @@\n \n module core.sys.windows.dbghelp_types;\n version (Windows):\n+@system:\n \n version (ANSI) {} else version = Unicode;\n "}, {"sha": "a591152cf88c5b25a828eae3c61f09e0b678f4eb", "filename": "libphobos/libdruntime/core/sys/windows/dbt.d", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fdbt.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fdbt.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fdbt.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -9,6 +9,7 @@\n  */\n module core.sys.windows.dbt;\n version (Windows):\n+@system:\n \n version (ANSI) {} else version = Unicode;\n "}, {"sha": "0e062274ccfe448341241c189563b9e64aeb2a05", "filename": "libphobos/libdruntime/core/sys/windows/dde.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fdde.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fdde.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fdde.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -9,9 +9,10 @@\n  */\n module core.sys.windows.dde;\n version (Windows):\n+@system:\n pragma(lib, \"user32\");\n \n-private import core.sys.windows.windef;\n+import core.sys.windows.windef;\n \n enum : uint {\n     WM_DDE_FIRST     = 0x03E0,"}, {"sha": "209772f6af9464b5d829c388f10bff548655c5c2", "filename": "libphobos/libdruntime/core/sys/windows/ddeml.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fddeml.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fddeml.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fddeml.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -9,11 +9,12 @@\n  */\n module core.sys.windows.ddeml;\n version (Windows):\n+@system:\n \n version (ANSI) {} else version = Unicode;\n pragma(lib, \"user32\");\n \n-private import core.sys.windows.basetsd, core.sys.windows.windef, core.sys.windows.winnt;\n+import core.sys.windows.basetsd, core.sys.windows.windef, core.sys.windows.winnt;\n \n enum : int {\n     CP_WINANSI    = 1004,"}, {"sha": "7b412c1e7612ad45cc46b67fbcacd13f422d5462", "filename": "libphobos/libdruntime/core/sys/windows/dhcpcsdk.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fdhcpcsdk.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fdhcpcsdk.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fdhcpcsdk.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -9,8 +9,9 @@\n  */\n module core.sys.windows.dhcpcsdk;\n version (Windows):\n+@system:\n \n-private import core.sys.windows.w32api, core.sys.windows.windef;\n+import core.sys.windows.w32api, core.sys.windows.windef;\n \n /*static assert (_WIN32_WINNT >= 0x500,\n \"core.sys.windows.dhcpcsdk is available only if version Windows2000, WindowsXP, Windows2003"}, {"sha": "796f02720ca19f309faeffa62935742d844c51b8", "filename": "libphobos/libdruntime/core/sys/windows/dlgs.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fdlgs.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fdlgs.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fdlgs.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -9,8 +9,9 @@\n  */\n module core.sys.windows.dlgs;\n version (Windows):\n+@system:\n \n-private import core.sys.windows.windef;\n+import core.sys.windows.windef;\n \n enum : ushort {\n     FILEOPENORD      = 1536,"}, {"sha": "9f36ac389a605b4eb5f8bf9a6c7b2fd5cf8e3de0", "filename": "libphobos/libdruntime/core/sys/windows/dll.d", "status": "modified", "additions": 108, "deletions": 13, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fdll.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fdll.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fdll.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -14,6 +14,7 @@\n  */\n module core.sys.windows.dll;\n version (Windows):\n+@system:\n \n import core.sys.windows.winbase;\n import core.sys.windows.winnt;\n@@ -68,11 +69,11 @@ extern (C) // rt.minfo\n }\n \n private:\n-version (Win32)\n-{\n struct dll_aux\n {\n     // don't let symbols leak into other modules\n+version (Win32)\n+{\n     struct LdrpTlsListEntry\n     {\n         LdrpTlsListEntry* next;\n@@ -238,6 +239,7 @@ struct dll_aux\n         // let the old array leak, in case a oncurrent thread is still relying on it\n         return true;\n     }\n+} // Win32\n \n     alias bool BOOLEAN;\n \n@@ -254,7 +256,8 @@ struct dll_aux\n         LIST_ENTRY* prev;\n     }\n \n-    // the following structures can be found here: http://undocumented.ntinternals.net/\n+    // the following structures can be found here:\n+    // https://www.geoffchappell.com/studies/windows/win32/ntdll/structs/ldr_data_table_entry.htm\n     // perhaps this should be same as LDR_DATA_TABLE_ENTRY, which is introduced with PEB_LDR_DATA\n     struct LDR_MODULE\n     {\n@@ -267,10 +270,22 @@ struct dll_aux\n         UNICODE_STRING  FullDllName;\n         UNICODE_STRING  BaseDllName;\n         ULONG           Flags;\n-        SHORT           LoadCount;\n+        SHORT           LoadCount; // obsolete after Version 6.1\n         SHORT           TlsIndex;\n         LIST_ENTRY      HashTableEntry;\n         ULONG           TimeDateStamp;\n+        PVOID           EntryPointActivationContext;\n+        PVOID           PatchInformation;\n+        LDR_DDAG_NODE  *DdagNode; // starting with Version 6.2\n+    }\n+\n+    struct LDR_DDAG_NODE\n+    {\n+        LIST_ENTRY Modules;\n+        void* ServiceTagList;  // LDR_SERVICE_TAG_RECORD\n+        ULONG LoadCount;\n+        ULONG ReferenceCount;  // Version 10: ULONG LoadWhileUnloadingCount;\n+        ULONG DependencyCount; // Version 10: ULONG LowestLink;\n     }\n \n     struct PEB_LDR_DATA\n@@ -283,7 +298,7 @@ struct dll_aux\n         LIST_ENTRY      InInitializationOrderModuleList;\n     }\n \n-    static LDR_MODULE* findLdrModule( HINSTANCE hInstance, void** peb ) nothrow\n+    static LDR_MODULE* findLdrModule( HINSTANCE hInstance, void** peb ) nothrow @nogc\n     {\n         PEB_LDR_DATA* ldrData = cast(PEB_LDR_DATA*) peb[3];\n         LIST_ENTRY* root = &ldrData.InLoadOrderModuleList;\n@@ -307,7 +322,6 @@ struct dll_aux\n         return true;\n     }\n }\n-}\n \n public:\n /* *****************************************************\n@@ -374,6 +388,78 @@ bool dll_fixTLS( HINSTANCE hInstance, void* tlsstart, void* tlsend, void* tls_ca\n     }\n }\n \n+private extern (Windows) ULONGLONG VerSetConditionMask(ULONGLONG, DWORD, BYTE) nothrow @nogc;\n+\n+private bool isWindows8OrLater() nothrow @nogc\n+{\n+    OSVERSIONINFOEXW osvi;\n+    osvi.dwOSVersionInfoSize = osvi.sizeof;\n+    DWORDLONG dwlConditionMask = VerSetConditionMask(\n+        VerSetConditionMask(\n+        VerSetConditionMask(\n+            0, VER_MAJORVERSION, VER_GREATER_EQUAL),\n+               VER_MINORVERSION, VER_GREATER_EQUAL),\n+               VER_SERVICEPACKMAJOR, VER_GREATER_EQUAL);\n+\n+    osvi.dwMajorVersion = 6;\n+    osvi.dwMinorVersion = 2;\n+    osvi.wServicePackMajor = 0;\n+\n+    return VerifyVersionInfoW(&osvi, VER_MAJORVERSION | VER_MINORVERSION | VER_SERVICEPACKMAJOR, dwlConditionMask) != FALSE;\n+}\n+\n+/* *****************************************************\n+ * Get the process reference count for the given DLL handle\n+ * Params:\n+ *   hInstance = DLL instance handle\n+ * Returns:\n+ *   the reference count for the DLL in the current process,\n+ *   -1 if the DLL is implicitely loaded with the process\n+ *   or -2 if the DLL handle is invalid\n+ */\n+int dll_getRefCount( HINSTANCE hInstance ) nothrow @nogc\n+{\n+    void** peb;\n+    version (Win64)\n+    {\n+        version (GNU_InlineAsm)\n+        {\n+            asm pure nothrow @nogc { \"movq %%gs:0x60, %0;\" : \"=r\" peb; }\n+        }\n+        else\n+        {\n+            asm pure nothrow @nogc\n+            {\n+                mov RAX, 0x60;\n+                mov RAX,GS:[RAX];\n+                mov peb, RAX;\n+            }\n+        }\n+\n+    }\n+    else version (Win32)\n+    {\n+        version (GNU_InlineAsm)\n+        {\n+            asm pure nothrow @nogc { \"movl %%fs:0x30, %0;\" : \"=r\" peb; }\n+        }\n+        else\n+        {\n+            asm pure nothrow @nogc\n+            {\n+                mov EAX,FS:[0x30];\n+                mov peb, EAX;\n+            }\n+        }\n+    }\n+    dll_aux.LDR_MODULE *ldrMod = dll_aux.findLdrModule( hInstance, peb );\n+    if ( !ldrMod )\n+        return -2; // not in module list, bail out\n+    if (isWindows8OrLater())\n+        return ldrMod.DdagNode.LoadCount;\n+    return ldrMod.LoadCount;\n+}\n+\n // fixup TLS storage, initialize runtime and attach to threads\n // to be called from DllMain with reason DLL_PROCESS_ATTACH\n bool dll_process_attach( HINSTANCE hInstance, bool attach_threads,\n@@ -393,7 +479,7 @@ bool dll_process_attach( HINSTANCE hInstance, bool attach_threads,\n     // attach to all other threads\n     return enumProcessThreads(\n         function (uint id, void* context) {\n-            if ( !thread_findByAddr( id ) )\n+            if ( !thread_findByAddr( id ) && !findLowLevelThread( id ) )\n             {\n                 // if the OS has not prepared TLS for us, don't attach to the thread\n                 if ( GetTlsDataAddress( id ) )\n@@ -424,14 +510,22 @@ bool dll_process_attach( HINSTANCE hInstance, bool attach_threads = true )\n // to be called from DllMain with reason DLL_PROCESS_DETACH\n void dll_process_detach( HINSTANCE hInstance, bool detach_threads = true )\n {\n+    // notify core.thread.joinLowLevelThread that the DLL is about to be unloaded\n+    thread_DLLProcessDetaching = true;\n+\n     // detach from all other threads\n     if ( detach_threads )\n         enumProcessThreads(\n-            function (uint id, void* context) {\n-                if ( id != GetCurrentThreadId() && thread_findByAddr( id ) )\n+            function (uint id, void* context)\n+            {\n+                if ( id != GetCurrentThreadId() )\n                 {\n-                    thread_moduleTlsDtor( id );\n-                    thread_detachByAddr( id );\n+                    if ( auto t = thread_findByAddr( id ) )\n+                    {\n+                        thread_moduleTlsDtor( id );\n+                        if ( !t.isMainThread() )\n+                            thread_detachByAddr( id );\n+                    }\n                 }\n                 return true;\n             }, null );\n@@ -450,9 +544,10 @@ bool dll_thread_attach( bool attach_thread = true, bool initTls = true )\n {\n     // if the OS has not prepared TLS for us, don't attach to the thread\n     //  (happened when running under x64 OS)\n-    if ( !GetTlsDataAddress( GetCurrentThreadId() ) )\n+    auto tid = GetCurrentThreadId();\n+    if ( !GetTlsDataAddress( tid ) )\n         return false;\n-    if ( !thread_findByAddr( GetCurrentThreadId() ) )\n+    if ( !thread_findByAddr( tid ) && !findLowLevelThread( tid ) )\n     {\n         // only attach to thread and initalize it if it is not in the thread list (so it's not created by \"new Thread\")\n         if ( attach_thread )"}, {"sha": "89d5936f5811c4e471c67f7ff6455f32cd216ef7", "filename": "libphobos/libdruntime/core/sys/windows/docobj.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fdocobj.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fdocobj.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fdocobj.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -8,8 +8,9 @@\n  */\n module core.sys.windows.docobj;\n version (Windows):\n+@system:\n \n-private import core.sys.windows.basetyps, core.sys.windows.oaidl, core.sys.windows.objidl, core.sys.windows.oleidl,\n+import core.sys.windows.basetyps, core.sys.windows.oaidl, core.sys.windows.objidl, core.sys.windows.oleidl,\n   core.sys.windows.unknwn, core.sys.windows.windef, core.sys.windows.wtypes;\n \n // FIXME: remove inherited methods from interface definitions"}, {"sha": "2b22e370ce546c8894a86afa27c8c379fd512bbf", "filename": "libphobos/libdruntime/core/sys/windows/errorrep.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Ferrorrep.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Ferrorrep.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Ferrorrep.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -9,10 +9,11 @@\n  */\n module core.sys.windows.errorrep;\n version (Windows):\n+@system:\n \n version (ANSI) {} else version = Unicode;\n \n-private import core.sys.windows.w32api, core.sys.windows.windef;\n+import core.sys.windows.w32api, core.sys.windows.windef;\n \n static assert (_WIN32_WINNT >= 0x501,\n     \"core.sys.windows.errorrep is available only if version WindowsXP, Windows2003 \""}, {"sha": "1153112b5d0fd1572d315f1792a0ba9af04d7f92", "filename": "libphobos/libdruntime/core/sys/windows/exdisp.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fexdisp.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fexdisp.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fexdisp.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -8,9 +8,10 @@\n  */\n module core.sys.windows.exdisp;\n version (Windows):\n+@system:\n \n import core.sys.windows.docobj, core.sys.windows.oaidl, core.sys.windows.ocidl;\n-private import core.sys.windows.basetyps, core.sys.windows.windef, core.sys.windows.wtypes;\n+import core.sys.windows.basetyps, core.sys.windows.windef, core.sys.windows.wtypes;\n \n \n enum BrowserNavConstants {"}, {"sha": "781d7cea74ca12e2b84ae9772df9f9d5fb0640db", "filename": "libphobos/libdruntime/core/sys/windows/httpext.d", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fhttpext.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fhttpext.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fhttpext.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -8,6 +8,7 @@\n  */\n module core.sys.windows.httpext;\n version (Windows):\n+@system:\n \n /* Comment from MinGW\n        httpext.h - Header for ISAPI extensions.\n@@ -19,9 +20,9 @@ version (Windows):\n        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n */\n \n-private import core.sys.windows.basetsd /+: DECLARE_HANDLE, HANDLE+/;\n-private import core.sys.windows.windef /+: BOOL, CHAR, DWORD, LPBYTE, LPDWORD+/;\n-private import core.sys.windows.winnt /+: LPCSTR, LPSTR, LPVOID, PVOID, VOID+/;\n+import core.sys.windows.basetsd /+: DECLARE_HANDLE, HANDLE+/;\n+import core.sys.windows.windef /+: BOOL, CHAR, DWORD, LPBYTE, LPDWORD+/;\n+import core.sys.windows.winnt /+: LPCSTR, LPSTR, LPVOID, PVOID, VOID+/;\n \n enum {\n     HSE_VERSION_MAJOR               = 2,"}, {"sha": "f9edba1425f92f73cd630486c7f0058dde89b97e", "filename": "libphobos/libdruntime/core/sys/windows/imagehlp.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fimagehlp.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fimagehlp.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fimagehlp.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -9,6 +9,7 @@\n  */\n module core.sys.windows.imagehlp;\n version (Windows):\n+@system:\n \n version (ANSI) {} else version = Unicode;\n \n@@ -18,7 +19,7 @@ version (ANSI) {} else version = Unicode;\n     as well provide it here.\n */\n \n-private import core.sys.windows.winbase, core.sys.windows.windef;\n+import core.sys.windows.winbase, core.sys.windows.windef;\n \n // FIXME: check types of constants\n "}, {"sha": "3ebab30037fbd4ae450b7f0055c9ba5c170f5e41", "filename": "libphobos/libdruntime/core/sys/windows/imm.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fimm.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fimm.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fimm.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -8,13 +8,14 @@\n  */\n module core.sys.windows.imm;\n version (Windows):\n+@system:\n \n version (ANSI) {} else version = Unicode;\n pragma(lib, \"imm32\");\n \n import core.sys.windows.windef, core.sys.windows.wingdi;\n import core.sys.windows.winuser; // for the MFS_xxx enums.\n-private import core.sys.windows.w32api;\n+import core.sys.windows.w32api;\n \n enum WM_CONVERTREQUESTEX     = 0x108;\n enum WM_IME_STARTCOMPOSITION = 0x10D;"}, {"sha": "f2f44e1497d5d29e721c6d4fa16219518e095b1d", "filename": "libphobos/libdruntime/core/sys/windows/intshcut.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fintshcut.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fintshcut.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fintshcut.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -9,10 +9,11 @@\n  */\n module core.sys.windows.intshcut;\n version (Windows):\n+@system:\n \n version (ANSI) {} else version = Unicode;\n \n-private import core.sys.windows.unknwn, core.sys.windows.windef;\n+import core.sys.windows.unknwn, core.sys.windows.windef;\n \n enum : SCODE {\n     E_FLAGS                     = 0x80041000,"}, {"sha": "b66aa26e091a34f85d4360fb7028810b8bb7e2a8", "filename": "libphobos/libdruntime/core/sys/windows/ipexport.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fipexport.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fipexport.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fipexport.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -9,8 +9,9 @@\n  */\n module core.sys.windows.ipexport;\n version (Windows):\n+@system:\n \n-private import core.sys.windows.windef;\n+import core.sys.windows.windef;\n \n enum size_t MAX_ADAPTER_NAME = 128;\n "}, {"sha": "313e40b92c7f786e0c72db30580a68891352671d", "filename": "libphobos/libdruntime/core/sys/windows/iphlpapi.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fiphlpapi.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fiphlpapi.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fiphlpapi.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -9,9 +9,10 @@\n  */\n module core.sys.windows.iphlpapi;\n version (Windows):\n+@system:\n \n import core.sys.windows.ipexport, core.sys.windows.iprtrmib, core.sys.windows.iptypes;\n-private import core.sys.windows.winbase, core.sys.windows.windef;\n+import core.sys.windows.winbase, core.sys.windows.windef;\n \n extern (Windows) {\n     DWORD AddIPAddress(IPAddr, IPMask, DWORD, PULONG, PULONG);"}, {"sha": "1d23bc12cd91db392faf57d466d3e3fd8487fbac", "filename": "libphobos/libdruntime/core/sys/windows/iprtrmib.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fiprtrmib.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fiprtrmib.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fiprtrmib.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -9,9 +9,10 @@\n  */\n module core.sys.windows.iprtrmib;\n version (Windows):\n+@system:\n \n import core.sys.windows.ipifcons;\n-private import core.sys.windows.windef;\n+import core.sys.windows.windef;\n \n // FIXME: check types of constants\n "}, {"sha": "f4f9fe80ad14eabf0b353f73f66dd9883fa5bccf", "filename": "libphobos/libdruntime/core/sys/windows/iptypes.d", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fiptypes.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fiptypes.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fiptypes.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -9,6 +9,7 @@\n  */\n module core.sys.windows.iptypes;\n version (Windows):\n+@system:\n \n import core.sys.windows.windef;\n import core.stdc.time;"}, {"sha": "61e1d1ea1438ec59fd275f722b89a4716920501e", "filename": "libphobos/libdruntime/core/sys/windows/isguids.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fisguids.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fisguids.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fisguids.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -10,7 +10,7 @@\n module core.sys.windows.isguids;\n version (Windows):\n \n-private import core.sys.windows.basetyps;\n+import core.sys.windows.basetyps;\n \n extern (C) extern const GUID\n     CLSID_InternetShortcut,"}, {"sha": "e12f629dceed96e599928a005866cb1cd0372ef3", "filename": "libphobos/libdruntime/core/sys/windows/lm.d", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flm.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flm.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flm.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -8,6 +8,8 @@\n  */\n module core.sys.windows.lm;\n version (Windows):\n+@system:\n+\n /* removed - now supporting only Win2k up\n version (WindowsVista) {\n     version = WIN32_WINNT_ONLY;"}, {"sha": "3e1370d596b4f3973f891b18d19bb90efab29fa8", "filename": "libphobos/libdruntime/core/sys/windows/lmaccess.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmaccess.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmaccess.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmaccess.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -8,6 +8,7 @@\n  */\n module core.sys.windows.lmaccess;\n version (Windows):\n+@system:\n pragma(lib, \"netapi32\");\n \n /**\n@@ -16,7 +17,7 @@ pragma(lib, \"netapi32\");\n     the Platform SDK docs, so they have been dropped from this file.\n */\n \n-private import core.sys.windows.lmcons, core.sys.windows.windef;\n+import core.sys.windows.lmcons, core.sys.windows.windef;\n \n const wchar[]\n     GROUP_SPECIALGRP_USERS  = \"USERS\","}, {"sha": "675dc896a4af680b8f9c274163e11caf2e832d44", "filename": "libphobos/libdruntime/core/sys/windows/lmalert.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmalert.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmalert.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmalert.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -8,9 +8,10 @@\n  */\n module core.sys.windows.lmalert;\n version (Windows):\n+@system:\n pragma(lib, \"netapi32\");\n \n-private import core.sys.windows.lmcons, core.sys.windows.windef;\n+import core.sys.windows.lmcons, core.sys.windows.windef;\n \n const TCHAR[]\n     ALERTER_MAILSLOT     = `\\\\.\\MAILSLOT\\Alerter`,"}, {"sha": "f78271a2062a404912f485febab09d2f97139f0c", "filename": "libphobos/libdruntime/core/sys/windows/lmapibuf.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmapibuf.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmapibuf.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmapibuf.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -10,7 +10,7 @@ module core.sys.windows.lmapibuf;\n version (Windows):\n pragma(lib, \"netapi32\");\n \n-private import core.sys.windows.lmcons, core.sys.windows.windef;\n+import core.sys.windows.lmcons, core.sys.windows.windef;\n \n extern (Windows) {\n     NET_API_STATUS NetApiBufferAllocate(DWORD, PVOID*);"}, {"sha": "1862adf36421227b83a05084cce4f7137313a39d", "filename": "libphobos/libdruntime/core/sys/windows/lmat.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmat.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmat.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmat.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -8,9 +8,10 @@\n  */\n module core.sys.windows.lmat;\n version (Windows):\n+@system:\n pragma(lib, \"netapi32\");\n \n-private import core.sys.windows.lmcons, core.sys.windows.windef;\n+import core.sys.windows.lmcons, core.sys.windows.windef;\n \n enum JOB_RUN_PERIODICALLY = 1;\n enum JOB_EXEC_ERROR       = 2;"}, {"sha": "524332af5e0eadcd846c53b165958468fac6983e", "filename": "libphobos/libdruntime/core/sys/windows/lmaudit.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmaudit.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmaudit.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmaudit.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -9,8 +9,9 @@\n // COMMENT: This file may be deprecated.\n module core.sys.windows.lmaudit;\n version (Windows):\n+@system:\n \n-private import core.sys.windows.lmcons, core.sys.windows.windef;\n+import core.sys.windows.lmcons, core.sys.windows.windef;\n \n enum LOGFLAGS_FORWARD  = 0;\n enum LOGFLAGS_BACKWARD = 1;"}, {"sha": "971d8cdd416b4ec1fbb144e2a11b072ffbe004e6", "filename": "libphobos/libdruntime/core/sys/windows/lmbrowsr.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmbrowsr.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmbrowsr.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmbrowsr.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -8,8 +8,9 @@\n  */\n module core.sys.windows.lmbrowsr;\n version (Windows):\n+@system:\n \n-private import core.sys.windows.lmcons, core.sys.windows.windef;\n+import core.sys.windows.lmcons, core.sys.windows.windef;\n \n enum BROWSER_ROLE_PDC = 1;\n enum BROWSER_ROLE_BDC = 2;"}, {"sha": "39d9e788ef12f9b4143ace3e32182489f949e313", "filename": "libphobos/libdruntime/core/sys/windows/lmchdev.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmchdev.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmchdev.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmchdev.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -8,10 +8,11 @@\n  */\n module core.sys.windows.lmchdev;\n version (Windows):\n+@system:\n \n // COMMENT: This file might be deprecated.\n \n-private import core.sys.windows.lmcons, core.sys.windows.windef;\n+import core.sys.windows.lmcons, core.sys.windows.windef;\n \n enum CHARDEVQ_NO_REQUESTS  = -1;\n enum CHARDEV_CLOSE         = 0;"}, {"sha": "6bb2472cdde74c49b5d3b629ce1516a4dabbbd53", "filename": "libphobos/libdruntime/core/sys/windows/lmconfig.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmconfig.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmconfig.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmconfig.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -8,10 +8,11 @@\n  */\n module core.sys.windows.lmconfig;\n version (Windows):\n+@system:\n \n // All functions in this file are deprecated!\n \n-private import core.sys.windows.lmcons, core.sys.windows.windef;\n+import core.sys.windows.lmcons, core.sys.windows.windef;\n \n deprecated {\n     struct CONFIG_INFO_0 {"}, {"sha": "b115cce4da3831ae411e0b36436ff6e335dc8440", "filename": "libphobos/libdruntime/core/sys/windows/lmcons.d", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmcons.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmcons.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmcons.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -8,11 +8,12 @@\n  */\n module core.sys.windows.lmcons;\n version (Windows):\n+@system:\n \n version (ANSI) {} else version = Unicode;\n \n-private import core.sys.windows.windef;\n-private import core.sys.windows.lmerr; // for NERR_BASE\n+import core.sys.windows.windef;\n+import core.sys.windows.lmerr; // for NERR_BASE\n \n const TCHAR[]\n     MESSAGE_FILENAME = \"NETMSG\","}, {"sha": "77e2378de7a45dce55fdb38ed86df7a00a2af4d2", "filename": "libphobos/libdruntime/core/sys/windows/lmerr.d", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmerr.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmerr.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmerr.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -8,6 +8,7 @@\n  */\n module core.sys.windows.lmerr;\n version (Windows):\n+@system:\n \n import core.sys.windows.winerror;\n "}, {"sha": "8e15b4df22c6f727f9ee771624c36fecb2489765", "filename": "libphobos/libdruntime/core/sys/windows/lmerrlog.d", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmerrlog.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmerrlog.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmerrlog.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -8,11 +8,12 @@\n  */\n module core.sys.windows.lmerrlog;\n version (Windows):\n+@system:\n \n // COMMENT: This appears to be only for Win16. All functions are deprecated.\n \n-private import core.sys.windows.lmcons, core.sys.windows.windef;\n-private import core.sys.windows.lmaudit; // for LPHLOG\n+import core.sys.windows.lmcons, core.sys.windows.windef;\n+import core.sys.windows.lmaudit; // for LPHLOG\n \n enum ERRLOG_BASE=3100;\n enum ERRLOG2_BASE=5700;"}, {"sha": "2a2d60ade06cb7b8c6214d237426ccb91412f28b", "filename": "libphobos/libdruntime/core/sys/windows/lmmsg.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmmsg.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmmsg.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmmsg.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -8,9 +8,10 @@\n  */\n module core.sys.windows.lmmsg;\n version (Windows):\n+@system:\n pragma(lib, \"netapi32\");\n \n-private import core.sys.windows.lmcons, core.sys.windows.windef, core.sys.windows.w32api;\n+import core.sys.windows.lmcons, core.sys.windows.windef, core.sys.windows.w32api;\n \n static assert (_WIN32_WINNT >= 0x501,\n     \"core.sys.windows.lmmsg is available only if version WindowsXP, Windows2003 \""}, {"sha": "ce7d45aa34963503a9775f5699802b4d10d0f2dc", "filename": "libphobos/libdruntime/core/sys/windows/lmremutl.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmremutl.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmremutl.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmremutl.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -8,11 +8,12 @@\n  */\n module core.sys.windows.lmremutl;\n version (Windows):\n+@system:\n pragma(lib, \"netapi32\");\n \n // D Conversion Note: DESC_CHAR is defined as TCHAR.\n \n-private import core.sys.windows.lmcons, core.sys.windows.windef;\n+import core.sys.windows.lmcons, core.sys.windows.windef;\n \n enum SUPPORTS_REMOTE_ADMIN_PROTOCOL =  2;\n enum SUPPORTS_RPC                   =  4;"}, {"sha": "02345f81105232389e61abfc7939bba36a7199ef", "filename": "libphobos/libdruntime/core/sys/windows/lmrepl.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmrepl.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmrepl.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmrepl.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -8,9 +8,10 @@\n  */\n module core.sys.windows.lmrepl;\n version (Windows):\n+@system:\n pragma(lib, \"netapi32\");\n \n-private import core.sys.windows.lmcons, core.sys.windows.windef;\n+import core.sys.windows.lmcons, core.sys.windows.windef;\n \n enum REPL_ROLE_EXPORT=1;\n enum REPL_ROLE_IMPORT=2;"}, {"sha": "83a9a84adda5247f1c2f2d7bf558051f0d267869", "filename": "libphobos/libdruntime/core/sys/windows/lmserver.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmserver.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmserver.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmserver.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -8,9 +8,10 @@\n  */\n module core.sys.windows.lmserver;\n version (Windows):\n+@system:\n \n import core.sys.windows.winsvc;\n-private import core.sys.windows.lmcons, core.sys.windows.windef;\n+import core.sys.windows.lmcons, core.sys.windows.windef;\n \n struct SERVER_INFO_100 {\n     DWORD  sv100_platform_id;"}, {"sha": "215fb781e6639a1573b69779e5c35030e9c01536", "filename": "libphobos/libdruntime/core/sys/windows/lmshare.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmshare.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmshare.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmshare.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -8,10 +8,11 @@\n  */\n module core.sys.windows.lmshare;\n version (Windows):\n+@system:\n pragma(lib, \"netapi32\");\n \n import core.sys.windows.lmcons;\n-private import core.sys.windows.w32api, core.sys.windows.windef;\n+import core.sys.windows.w32api, core.sys.windows.windef;\n \n \n enum SHARE_NETNAME_PARMNUM      = 1;"}, {"sha": "bdb1a6d3dcca000861441cc474df96ae4c3187e0", "filename": "libphobos/libdruntime/core/sys/windows/lmsname.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmsname.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmsname.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmsname.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -8,8 +8,9 @@\n  */\n module core.sys.windows.lmsname;\n version (Windows):\n+@system:\n \n-private import core.sys.windows.windef;\n+import core.sys.windows.windef;\n \n const TCHAR[]\n     SERVICE_WORKSTATION      = \"LanmanWorkstation\","}, {"sha": "0c6e622aab4575135a85b915f7df50b51c101efc", "filename": "libphobos/libdruntime/core/sys/windows/lmstats.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmstats.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmstats.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmstats.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -8,9 +8,10 @@\n  */\n module core.sys.windows.lmstats;\n version (Windows):\n+@system:\n pragma(lib, \"netapi32\");\n \n-private import core.sys.windows.lmcons, core.sys.windows.windef;\n+import core.sys.windows.lmcons, core.sys.windows.windef;\n \n enum ULONG\n     STATSOPT_CLR   = 1,"}, {"sha": "1743458007d6c3f9cb329ebab2a66d1fff919532", "filename": "libphobos/libdruntime/core/sys/windows/lmsvc.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmsvc.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmsvc.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmsvc.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -8,6 +8,7 @@\n  */\n module core.sys.windows.lmsvc;\n version (Windows):\n+@system:\n \n // FIXME: Is this file deprecated? All of the functions are only for Win16.\n /**\n@@ -16,7 +17,7 @@ version (Windows):\n */\n // TODO: 5 macros\n \n-private import core.sys.windows.lmcons, core.sys.windows.lmsname, core.sys.windows.windef;\n+import core.sys.windows.lmcons, core.sys.windows.lmsname, core.sys.windows.windef;\n \n const TCHAR[] SERVICE_DOS_ENCRYPTION = \"ENCRYPT\";\n "}, {"sha": "a9dbcd40b637cbe9206385765e4bf8c1fc35ff7b", "filename": "libphobos/libdruntime/core/sys/windows/lmuse.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmuse.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmuse.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmuse.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -8,10 +8,11 @@\n  */\n module core.sys.windows.lmuse;\n version (Windows):\n+@system:\n pragma(lib, \"netapi32\");\n \n import core.sys.windows.lmuseflg;\n-private import core.sys.windows.lmcons, core.sys.windows.windef;\n+import core.sys.windows.lmcons, core.sys.windows.windef;\n \n enum {\n     USE_LOCAL_PARMNUM = 1,"}, {"sha": "f4d85fef47b6a786458623dcc2f0e8be83cebdb3", "filename": "libphobos/libdruntime/core/sys/windows/lmwksta.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmwksta.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmwksta.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flmwksta.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -8,10 +8,11 @@\n  */\n module core.sys.windows.lmwksta;\n version (Windows):\n+@system:\n pragma(lib, \"netapi32\");\n \n import core.sys.windows.lmuseflg;\n-private import core.sys.windows.lmcons, core.sys.windows.windef;\n+import core.sys.windows.lmcons, core.sys.windows.windef;\n \n pragma(lib, \"Netapi32\");\n "}, {"sha": "32ab1410b38a0a0e1411ff848a1398dc71e10d9b", "filename": "libphobos/libdruntime/core/sys/windows/lzexpand.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flzexpand.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flzexpand.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Flzexpand.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -8,11 +8,12 @@\n  */\n module core.sys.windows.lzexpand;\n version (Windows):\n+@system:\n \n version (ANSI) {} else version = Unicode;\n pragma(lib, \"lz32\");\n \n-private import core.sys.windows.winbase, core.sys.windows.windef;\n+import core.sys.windows.winbase, core.sys.windows.windef;\n \n enum : LONG {\n     LZERROR_BADINHANDLE  = -1,"}, {"sha": "194f63bcc74516a4cd65ebc654f48c62921aea58", "filename": "libphobos/libdruntime/core/sys/windows/mapi.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fmapi.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fmapi.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fmapi.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -9,8 +9,9 @@\n  */\n module core.sys.windows.mapi;\n version (Windows):\n+@system:\n \n-private import core.sys.windows.windef;\n+import core.sys.windows.windef;\n \n // FIXME: check types and grouping of constants\n "}, {"sha": "f7367e3caa3cad9077179d097bdbce4dd9ddddb2", "filename": "libphobos/libdruntime/core/sys/windows/mciavi.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fmciavi.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fmciavi.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fmciavi.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -9,8 +9,9 @@\n  */\n module core.sys.windows.mciavi;\n version (Windows):\n+@system:\n \n-private import core.sys.windows.mmsystem;\n+import core.sys.windows.mmsystem;\n \n // FIXME: check types and grouping of constants\n "}, {"sha": "01b28ad38558e1bc2a3b7a7bdb733e9bb3d6b82c", "filename": "libphobos/libdruntime/core/sys/windows/mcx.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fmcx.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fmcx.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fmcx.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -9,8 +9,9 @@\n  */\n module core.sys.windows.mcx;\n version (Windows):\n+@system:\n \n-private import core.sys.windows.windef;\n+import core.sys.windows.windef;\n \n enum DWORD\n     DIALOPTION_BILLING  =  64,"}, {"sha": "673fba8c37e5d0027c15f06a08f0c35b19549ef7", "filename": "libphobos/libdruntime/core/sys/windows/mgmtapi.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fmgmtapi.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fmgmtapi.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fmgmtapi.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -9,9 +9,10 @@\n  */\n module core.sys.windows.mgmtapi;\n version (Windows):\n+@system:\n \n import core.sys.windows.snmp;\n-private import core.sys.windows.windef;\n+import core.sys.windows.windef;\n \n enum {\n     SNMP_MGMTAPI_TIMEOUT = 40,"}, {"sha": "9359afd0e0351b14a6969b7ed45fc8572fa59e37", "filename": "libphobos/libdruntime/core/sys/windows/mmsystem.d", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fmmsystem.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fmmsystem.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fmmsystem.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -8,6 +8,7 @@\n  */\n module core.sys.windows.mmsystem;\n version (Windows):\n+@system:\n \n version (ANSI) {} else version = Unicode;\n pragma(lib, \"winmm\");\n@@ -16,7 +17,7 @@ pragma(lib, \"winmm\");\n  *  compile-time constants, so they are implemented as templates.\n  */\n \n-private import core.sys.windows.w32api, core.sys.windows.windef, core.sys.windows.winver;\n+import core.sys.windows.w32api, core.sys.windows.windef, core.sys.windows.winver;\n \n align(1):\n \n@@ -1039,7 +1040,7 @@ struct MMTIME {\n             BYTE fps;\n             BYTE dummy;\n             BYTE[2] pad;\n-        };\n+        }\n         _smpte smpte;\n         struct _midi {\n             DWORD songptrpos;"}, {"sha": "b5d3052d7c656655a1d9b34cf5ab32f7ac0c27b4", "filename": "libphobos/libdruntime/core/sys/windows/msacm.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fmsacm.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fmsacm.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fmsacm.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -9,10 +9,11 @@\n  */\n module core.sys.windows.msacm;\n version (Windows):\n+@system:\n \n version (ANSI) {} else version = Unicode;\n \n-private import core.sys.windows.basetsd, core.sys.windows.mmsystem, core.sys.windows.windef;\n+import core.sys.windows.basetsd, core.sys.windows.mmsystem, core.sys.windows.windef;\n \n mixin DECLARE_HANDLE!(\"HACMDRIVERID\");\n mixin DECLARE_HANDLE!(\"HACMDRIVER\");"}, {"sha": "2c4410d6bf37cb42ff5e0567096dde4a01d71f26", "filename": "libphobos/libdruntime/core/sys/windows/mshtml.d", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fmshtml.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fmshtml.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fmshtml.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -8,39 +8,40 @@\n  */\n module core.sys.windows.mshtml;\n version (Windows):\n+@system:\n \n-private import core.sys.windows.basetyps, core.sys.windows.oaidl, core.sys.windows.unknwn,\n+import core.sys.windows.basetyps, core.sys.windows.oaidl, core.sys.windows.unknwn,\n   core.sys.windows.windef, core.sys.windows.wtypes;\n \n // These are used in this file, but not defined in MinGW.\n-interface IHTMLStyleSheet {};\n+interface IHTMLStyleSheet {}\n alias IHTMLStyle LPHTMLSTYLE;\n alias IHTMLStyleSheet LPHTMLSTYLESHEET;\n-interface IHTMLLocation {};\n+interface IHTMLLocation {}\n alias IHTMLLocation LPHTMLLOCATION;\n-interface IHTMLFramesCollection {};\n+interface IHTMLFramesCollection {}\n alias IHTMLFramesCollection LPHTMLFRAMESCOLLECTION;\n-interface IHTMLStyleSheetsCollection {};\n+interface IHTMLStyleSheetsCollection {}\n alias IHTMLStyleSheetsCollection LPHTMLSTYLESHEETSCOLLECTION;\n-interface IHTMLStyle {};\n-interface IHTMLFiltersCollection {};\n+interface IHTMLStyle {}\n+interface IHTMLFiltersCollection {}\n alias IHTMLFiltersCollection LPHTMLFILTERSCOLLECTION;\n interface IOmHistory : IDispatch {\n     HRESULT get_length(short* p);\n     HRESULT back(VARIANT*);\n     HRESULT forward(VARIANT*);\n     HRESULT go(VARIANT*);\n-};\n+}\n alias IOmHistory LPOMHISTORY;\n-interface IOmNavigator {};\n+interface IOmNavigator {}\n alias IOmNavigator LPOMNAVIGATOR;\n-interface IHTMLImageElementFactory {};\n+interface IHTMLImageElementFactory {}\n alias IHTMLImageElementFactory LPHTMLIMAGEELEMENTFACTORY;\n-interface IHTMLEventObj {};\n+interface IHTMLEventObj {}\n alias IHTMLEventObj LPHTMLEVENTOBJ;\n-interface IHTMLScreen {};\n+interface IHTMLScreen {}\n alias IHTMLScreen LPHTMLSCREEN;\n-interface IHTMLOptionElementFactory {};\n+interface IHTMLOptionElementFactory {}\n alias IHTMLOptionElementFactory LPHTMLOPTIONELEMENTFACTORY;\n \n interface IHTMLLinkElement : IDispatch {"}, {"sha": "cd6b63c197c3245dfda7b27943311b140383e26e", "filename": "libphobos/libdruntime/core/sys/windows/mswsock.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fmswsock.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fmswsock.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fmswsock.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -9,9 +9,10 @@\n  */\n module core.sys.windows.mswsock;\n version (Windows):\n+@system:\n \n import core.sys.windows.winbase, core.sys.windows.windef;\n-private import core.sys.windows.basetyps, core.sys.windows.w32api;\n+import core.sys.windows.basetyps, core.sys.windows.w32api;\n \n import core.sys.windows.winsock2;\n "}, {"sha": "0d250cc40af16907217584e39bb7977dc6d36b01", "filename": "libphobos/libdruntime/core/sys/windows/nb30.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fnb30.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fnb30.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fnb30.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -9,8 +9,9 @@\n  */\n module core.sys.windows.nb30;\n version (Windows):\n+@system:\n \n-private import core.sys.windows.windef;\n+import core.sys.windows.windef;\n \n enum size_t\n     NCBNAMSZ =  16,"}, {"sha": "d4692c9db8adb41b9823e1fb931024ddfa3b1bb5", "filename": "libphobos/libdruntime/core/sys/windows/nddeapi.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fnddeapi.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fnddeapi.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fnddeapi.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -9,10 +9,11 @@\n  */\n module core.sys.windows.nddeapi;\n version (Windows):\n+@system:\n \n version (ANSI) {} else version = Unicode;\n \n-private import core.sys.windows.windef;\n+import core.sys.windows.windef;\n \n // FIXME: check types and grouping of constants\n "}, {"sha": "a2e7fab02f67911a1cbb192bbf0b524e71b739ca", "filename": "libphobos/libdruntime/core/sys/windows/nspapi.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fnspapi.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fnspapi.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fnspapi.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -9,10 +9,11 @@\n  */\n module core.sys.windows.nspapi;\n version (Windows):\n+@system:\n \n version (ANSI) {} else version = Unicode;\n \n-private import core.sys.windows.basetyps, core.sys.windows.windef;\n+import core.sys.windows.basetyps, core.sys.windows.windef;\n \n // FIXME: check types of constants\n "}, {"sha": "83d668c0eebff6e346d4db50940c371c6168af2d", "filename": "libphobos/libdruntime/core/sys/windows/ntdef.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fntdef.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fntdef.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fntdef.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -9,8 +9,9 @@\n  */\n module core.sys.windows.ntdef;\n version (Windows):\n+@system:\n \n-private import core.sys.windows.basetsd, core.sys.windows.subauth, core.sys.windows.windef, core.sys.windows.winnt;\n+import core.sys.windows.basetsd, core.sys.windows.subauth, core.sys.windows.windef, core.sys.windows.winnt;\n \n enum uint\n     OBJ_INHERIT          = 0x0002,"}, {"sha": "e8aa3a7b4ca5305ab4123b4734251fa4ef8a0724", "filename": "libphobos/libdruntime/core/sys/windows/ntdll.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fntdll.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fntdll.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fntdll.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -9,8 +9,9 @@\n  */\n module core.sys.windows.ntdll;\n version (Windows):\n+@system:\n \n-private import core.sys.windows.w32api;\n+import core.sys.windows.w32api;\n \n \n enum SHUTDOWN_ACTION {"}, {"sha": "e7a55dd2f7688754753952e37a3984eb88dcef52", "filename": "libphobos/libdruntime/core/sys/windows/ntldap.d", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fntldap.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fntldap.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fntldap.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -9,6 +9,7 @@\n  */\n module core.sys.windows.ntldap;\n version (Windows):\n+@system:\n \n version (ANSI) {} else version = Unicode;\n "}, {"sha": "df9c10a3bb25cab020cc9dc7df8d27217257c8da", "filename": "libphobos/libdruntime/core/sys/windows/ntsecapi.d", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fntsecapi.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fntsecapi.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fntsecapi.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -9,6 +9,7 @@\n  */\n module core.sys.windows.ntsecapi;\n version (Windows):\n+@system:\n pragma(lib, \"advapi32\");\n \n version (ANSI) {} else version = Unicode;"}, {"sha": "8625b7ae039f48582edf6f960494b4483c3f0af3", "filename": "libphobos/libdruntime/core/sys/windows/ntsecpkg.d", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fntsecpkg.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fntsecpkg.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fntsecpkg.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -9,6 +9,7 @@\n  */\n module core.sys.windows.ntsecpkg;\n version (Windows):\n+@system:\n \n import core.sys.windows.windef, core.sys.windows.ntsecapi, core.sys.windows.security, core.sys.windows.ntdef, core.sys.windows.sspi;\n import core.sys.windows.basetyps : GUID;"}, {"sha": "51d6be904df6b93317db1b329c90cf517c82e111", "filename": "libphobos/libdruntime/core/sys/windows/oaidl.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Foaidl.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Foaidl.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Foaidl.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -8,8 +8,9 @@\n  */\n module core.sys.windows.oaidl;\n version (Windows):\n+@system:\n \n-private import core.sys.windows.basetyps, core.sys.windows.unknwn, core.sys.windows.windef, core.sys.windows.wtypes;\n+import core.sys.windows.basetyps, core.sys.windows.unknwn, core.sys.windows.windef, core.sys.windows.wtypes;\n \n enum DISPID_UNKNOWN = -1;\n enum DISPID_VALUE = 0;"}, {"sha": "961ebcc833ac15dad9ed285639351f88e8473a7c", "filename": "libphobos/libdruntime/core/sys/windows/objbase.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fobjbase.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fobjbase.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fobjbase.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -8,10 +8,11 @@\n  */\n module core.sys.windows.objbase;\n version (Windows):\n+@system:\n pragma(lib, \"ole32\");\n \n import core.sys.windows.cguid, core.sys.windows.objidl, core.sys.windows.unknwn, core.sys.windows.wtypes;\n-private import core.sys.windows.basetyps, core.sys.windows.objfwd, core.sys.windows.rpcdce, core.sys.windows.winbase,\n+import core.sys.windows.basetyps, core.sys.windows.objfwd, core.sys.windows.rpcdce, core.sys.windows.winbase,\n   core.sys.windows.windef;\n \n // DAC: Not needed for D?"}, {"sha": "76d4f4144c58861c672dbb467441cad25dbd7b76", "filename": "libphobos/libdruntime/core/sys/windows/objfwd.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fobjfwd.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fobjfwd.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fobjfwd.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -8,8 +8,9 @@\n  */\n module core.sys.windows.objfwd;\n version (Windows):\n+@system:\n \n-private import core.sys.windows.objidl;\n+import core.sys.windows.objidl;\n \n /+\n // Forward declararions are not necessary in D."}, {"sha": "5368c296c373e253c77c83b689041d9037ebd3cb", "filename": "libphobos/libdruntime/core/sys/windows/objidl.d", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fobjidl.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fobjidl.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fobjidl.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -12,15 +12,16 @@\n // # do we need the proxies that are defined in this file?\n module core.sys.windows.objidl;\n version (Windows):\n+@system:\n \n import core.sys.windows.unknwn;\n import core.sys.windows.objfwd;\n-private import core.sys.windows.windef;\n-private import core.sys.windows.basetyps;\n-private import core.sys.windows.oleidl;\n-private import core.sys.windows.wtypes;\n-private import core.sys.windows.winbase; // for FILETIME\n-private import core.sys.windows.rpcdce;\n+import core.sys.windows.windef;\n+import core.sys.windows.basetyps;\n+import core.sys.windows.oleidl;\n+import core.sys.windows.wtypes;\n+import core.sys.windows.winbase; // for FILETIME\n+import core.sys.windows.rpcdce;\n \n struct  STATSTG {\n     LPOLESTR pwcsName;"}, {"sha": "0bfd19a0fd523ea1d34a4e8a13018429e859b9b4", "filename": "libphobos/libdruntime/core/sys/windows/objsafe.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fobjsafe.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fobjsafe.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fobjsafe.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -9,8 +9,9 @@\n  */\n module core.sys.windows.objsafe;\n version (Windows):\n+@system:\n \n-private import core.sys.windows.basetyps, core.sys.windows.unknwn, core.sys.windows.windef;\n+import core.sys.windows.basetyps, core.sys.windows.unknwn, core.sys.windows.windef;\n \n enum {\n     INTERFACESAFE_FOR_UNTRUSTED_CALLER = 1,"}, {"sha": "4b090b0a005f94305b531d3eea9a02a04f346270", "filename": "libphobos/libdruntime/core/sys/windows/ocidl.d", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Focidl.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Focidl.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Focidl.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -10,12 +10,13 @@\n  */\n module core.sys.windows.ocidl;\n version (Windows):\n+@system:\n \n-private import core.sys.windows.ole2, core.sys.windows.oleidl, core.sys.windows.oaidl, core.sys.windows.objfwd,\n+import core.sys.windows.ole2, core.sys.windows.oleidl, core.sys.windows.oaidl, core.sys.windows.objfwd,\n   core.sys.windows.windef, core.sys.windows.wtypes;\n-private import core.sys.windows.objidl;  // for CLIPFORMAT\n-private import core.sys.windows.wingdi;  // for TEXTMETRICW\n-private import core.sys.windows.winuser; // for LPMSG\n+import core.sys.windows.objidl;  // for CLIPFORMAT\n+import core.sys.windows.wingdi;  // for TEXTMETRICW\n+import core.sys.windows.winuser; // for LPMSG\n \n interface IBindHost : IUnknown {}\n \n@@ -25,8 +26,8 @@ interface IServiceProvider : IUnknown{\n \n /*\n // TODO:\n-//private import core.sys.windows.servprov; // for IServiceProvider\n-// private import core.sys.windows.urlmon; // for IBindHost. This is not included in MinGW.\n+//import core.sys.windows.servprov; // for IServiceProvider\n+// import core.sys.windows.urlmon; // for IBindHost. This is not included in MinGW.\n \n // core.sys.windows.urlmon should contain:\n interface IBindHost : IUnknown"}, {"sha": "ee22bc6a86b02a262827e8478e0a176f1f5a5e13", "filename": "libphobos/libdruntime/core/sys/windows/odbcinst.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fodbcinst.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fodbcinst.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fodbcinst.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -8,11 +8,12 @@\n  */\n module core.sys.windows.odbcinst;\n version (Windows):\n+@system:\n \n version (ANSI) {} else version = Unicode;\n \n import core.sys.windows.sql;\n-private import core.sys.windows.windef;\n+import core.sys.windows.windef;\n \n /*  FIXME: The Unicode/Ansi functions situation is a mess. How do the xxxA\n  *  versions of these functions fit into the scheme?"}, {"sha": "1a49ea51cd4750b5e674e637cb323c79569950bb", "filename": "libphobos/libdruntime/core/sys/windows/ole.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fole.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fole.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fole.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -9,9 +9,10 @@\n  */\n module core.sys.windows.ole;\n version (Windows):\n+@system:\n pragma(lib, \"ole32\");\n \n-private import core.sys.windows.windef, core.sys.windows.wingdi, core.sys.windows.uuid;\n+import core.sys.windows.windef, core.sys.windows.wingdi, core.sys.windows.uuid;\n \n alias LPCSTR OLE_LPCSTR;\n "}, {"sha": "575a8eb8d611dffbf294823df66466acf043b3a9", "filename": "libphobos/libdruntime/core/sys/windows/ole2.d", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fole2.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fole2.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fole2.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -8,12 +8,13 @@\n  */\n module core.sys.windows.ole2;\n version (Windows):\n+@system:\n pragma(lib, \"ole32\");\n \n public import core.sys.windows.basetyps, core.sys.windows.objbase, core.sys.windows.oleauto, core.sys.windows.olectlid,\n   core.sys.windows.oleidl, core.sys.windows.unknwn, core.sys.windows.winerror, core.sys.windows.uuid;\n-private import core.sys.windows.objfwd, core.sys.windows.objidl, core.sys.windows.windef, core.sys.windows.wtypes;\n-private import core.sys.windows.winuser; // for LPMSG\n+import core.sys.windows.objfwd, core.sys.windows.objidl, core.sys.windows.windef, core.sys.windows.wtypes;\n+import core.sys.windows.winuser; // for LPMSG\n \n enum E_DRAW = VIEW_E_DRAW;\n "}, {"sha": "77ced02dc0b949816b585c2819cf3b376457bd12", "filename": "libphobos/libdruntime/core/sys/windows/oleacc.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Foleacc.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Foleacc.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Foleacc.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -8,11 +8,12 @@\n  */\n module core.sys.windows.oleacc;\n version (Windows):\n+@system:\n \n version (ANSI) {} else version = Unicode;\n pragma(lib, \"oleacc\");\n \n-private import core.sys.windows.basetyps, core.sys.windows.oaidl, core.sys.windows.unknwn, core.sys.windows.wtypes,\n+import core.sys.windows.basetyps, core.sys.windows.oaidl, core.sys.windows.unknwn, core.sys.windows.wtypes,\n   core.sys.windows.windef;\n \n enum {"}, {"sha": "20f34aff5a73165f1ab3573a374fca9ca5db458c", "filename": "libphobos/libdruntime/core/sys/windows/oleauto.d", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Foleauto.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Foleauto.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Foleauto.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -8,11 +8,12 @@\n  */\n module core.sys.windows.oleauto;\n version (Windows):\n+@system:\n pragma(lib, \"oleaut32\");\n \n import core.sys.windows.oaidl;\n-private import core.sys.windows.basetyps, core.sys.windows.unknwn, core.sys.windows.windef, core.sys.windows.wtypes;\n-private import core.sys.windows.winbase; // for SYSTEMTIME\n+import core.sys.windows.basetyps, core.sys.windows.unknwn, core.sys.windows.windef, core.sys.windows.wtypes;\n+import core.sys.windows.winbase; // for SYSTEMTIME\n \n align(8):\n enum STDOLE_MAJORVERNUM = 1;\n@@ -215,10 +216,10 @@ struct NUMPARSE {\n \n deprecated {  // not actually deprecated, but they aren't converted yet.\n               // (will need to reinstate CreateTypeLib as well)\n-    interface ICreateTypeInfo {};\n-    interface ICreateTypeInfo2 {};\n-    interface ICreateTypeLib {};\n-    interface ICreateTypeLib2 {};\n+    interface ICreateTypeInfo {}\n+    interface ICreateTypeInfo2 {}\n+    interface ICreateTypeLib {}\n+    interface ICreateTypeLib2 {}\n \n     alias ICreateTypeInfo LPCREATETYPEINFO;\n     alias ICreateTypeInfo2 LPCREATETYPEINFO2;"}, {"sha": "e0bc679f9290ad73dc94d07c037cafac9c164290", "filename": "libphobos/libdruntime/core/sys/windows/olectl.d", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Folectl.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Folectl.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Folectl.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -8,16 +8,17 @@\n  */\n module core.sys.windows.olectl;\n version (Windows):\n+@system:\n \n // In conversion from MinGW, the following was deleted:\n //#define FONTSIZE(n) {n##0000, 0}\n \n import core.sys.windows.ocidl, core.sys.windows.olectlid;\n-private import core.sys.windows.basetyps, core.sys.windows.oaidl, core.sys.windows.oleauto, core.sys.windows.unknwn,\n+import core.sys.windows.basetyps, core.sys.windows.oaidl, core.sys.windows.oleauto, core.sys.windows.unknwn,\n   core.sys.windows.windef, core.sys.windows.wingdi, core.sys.windows.winuser, core.sys.windows.wtypes;\n-private import core.sys.windows.ntdef;     // for NTSTATUS\n-private import core.sys.windows.objfwd;    // for LPSTREAM\n-private import core.sys.windows.winerror;  // for SCODE\n+import core.sys.windows.ntdef;     // for NTSTATUS\n+import core.sys.windows.objfwd;    // for LPSTREAM\n+import core.sys.windows.winerror;  // for SCODE\n \n \n private {"}, {"sha": "fd3ea899a2a42ce05dcd9e07779adaf055723d12", "filename": "libphobos/libdruntime/core/sys/windows/olectlid.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Folectlid.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Folectlid.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Folectlid.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -9,5 +9,5 @@\n module core.sys.windows.olectlid;\n version (Windows):\n \n-private import core.sys.windows.basetyps;\n+import core.sys.windows.basetyps;\n "}, {"sha": "e44c02901622184dd733dd1e3968a311e81ca1a4", "filename": "libphobos/libdruntime/core/sys/windows/oledlg.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Foledlg.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Foledlg.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Foledlg.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -7,12 +7,13 @@\n  * Source: $(DRUNTIMESRC src/core/sys/windows/_oledlg.d)\n  */\n module core.sys.windows.oledlg;\n+@system:\n version (Windows):\n \n version (ANSI) {} else version = Unicode;\n \n import core.sys.windows.commdlg, core.sys.windows.dlgs, core.sys.windows.ole2, core.sys.windows.prsht, core.sys.windows.shellapi;\n-private import core.sys.windows.winbase, core.sys.windows.objidl, core.sys.windows.objfwd, core.sys.windows.winnt;\n+import core.sys.windows.winbase, core.sys.windows.objidl, core.sys.windows.objfwd, core.sys.windows.winnt;\n \n // FIXME: remove inherited methods from interface definitions\n "}, {"sha": "dc0cae85de30c996cc5c8cdc993e6e078280f4a9", "filename": "libphobos/libdruntime/core/sys/windows/oleidl.d", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Foleidl.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Foleidl.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Foleidl.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -8,15 +8,16 @@\n  */\n module core.sys.windows.oleidl;\n version (Windows):\n+@system:\n \n // DAC: This is defined in ocidl !!\n // what is it doing in here?\n //alias IEnumOleUndoUnits LPENUMOLEUNDOUNITS;\n \n-private import core.sys.windows.basetyps, core.sys.windows.objidl, core.sys.windows.unknwn, core.sys.windows.windef,\n+import core.sys.windows.basetyps, core.sys.windows.objidl, core.sys.windows.unknwn, core.sys.windows.windef,\n   core.sys.windows.winuser, core.sys.windows.wtypes;\n-private import core.sys.windows.objfwd; // for LPMONIKER\n-private import core.sys.windows.wingdi; // for LPLOGPALETTE\n+import core.sys.windows.objfwd; // for LPMONIKER\n+import core.sys.windows.wingdi; // for LPLOGPALETTE\n \n enum MK_ALT = 32;\n "}, {"sha": "aec938e9b824aeeafb1a4ed8ac62d0dad3a5a178", "filename": "libphobos/libdruntime/core/sys/windows/pbt.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fpbt.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fpbt.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fpbt.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -9,8 +9,9 @@\n  */\n module core.sys.windows.pbt;\n version (Windows):\n+@system:\n \n-private import core.sys.windows.windef;\n+import core.sys.windows.windef;\n \n enum : WPARAM {\n     PBT_APMQUERYSUSPEND,"}, {"sha": "75ec73e8efed06092c78614f34d2a5d60f867b63", "filename": "libphobos/libdruntime/core/sys/windows/powrprof.d", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fpowrprof.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fpowrprof.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fpowrprof.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -9,10 +9,11 @@\n  */\n module core.sys.windows.powrprof;\n version (Windows):\n+@system:\n pragma(lib, \"powrprof\");\n \n-private import core.sys.windows.windef;\n-private import core.sys.windows.ntdef;\n+import core.sys.windows.windef;\n+import core.sys.windows.ntdef;\n \n // FIXME: look up Windows version support\n "}, {"sha": "efea4f254c43b5bd98248b5de20ea011e00ca59a", "filename": "libphobos/libdruntime/core/sys/windows/prsht.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fprsht.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fprsht.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fprsht.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -9,11 +9,12 @@\n  */\n module core.sys.windows.prsht;\n version (Windows):\n+@system:\n \n version (ANSI) {} else version = Unicode;\n pragma(lib, \"comctl32\");\n \n-private import core.sys.windows.w32api, core.sys.windows.windef, core.sys.windows.winuser;\n+import core.sys.windows.w32api, core.sys.windows.windef, core.sys.windows.winuser;\n \n enum MAXPROPPAGES = 100;\n "}, {"sha": "7e62d9fc1bd1199ca018234c9af034fa138c8a85", "filename": "libphobos/libdruntime/core/sys/windows/psapi.d", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fpsapi.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fpsapi.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fpsapi.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -13,12 +13,13 @@\n \n module core.sys.windows.psapi;\n version (Windows):\n+@system:\n \n version (ANSI) {} else version = Unicode;\n \n-private import core.sys.windows.w32api;\n-private import core.sys.windows.winbase;\n-private import core.sys.windows.windef;\n+import core.sys.windows.w32api;\n+import core.sys.windows.winbase;\n+import core.sys.windows.windef;\n \n struct MODULEINFO {\n     LPVOID lpBaseOfDll;\n@@ -83,13 +84,11 @@ alias ENUM_PAGE_FILE_INFORMATION* PENUM_PAGE_FILE_INFORMATION;\n \n /* application-defined callback function used with the EnumPageFiles()\n  * http://windowssdk.msdn.microsoft.com/library/ms682627.aspx */\n-version (Unicode) {\n-    alias BOOL function(LPVOID, PENUM_PAGE_FILE_INFORMATION, LPCWSTR)\n-      PENUM_PAGE_FILE_CALLBACK;\n-} else {\n-    alias BOOL function(LPVOID, PENUM_PAGE_FILE_INFORMATION, LPCSTR)\n-      PENUM_PAGE_FILE_CALLBACK;\n-}\n+alias BOOL function(LPVOID, PENUM_PAGE_FILE_INFORMATION, LPCWSTR)\n+    PENUM_PAGE_FILE_CALLBACKW;\n+alias BOOL function(LPVOID, PENUM_PAGE_FILE_INFORMATION, LPCSTR)\n+    PENUM_PAGE_FILE_CALLBACKA;\n+\n \n // Grouped by application, not in alphabetical order.\n extern (Windows) {\n@@ -137,11 +136,12 @@ extern (Windows) {\n \n     /* Resources Information */\n     BOOL GetPerformanceInfo(PPERFORMANCE_INFORMATION, DWORD); /* XP/Server2003/Vista/Longhorn */\n-    BOOL EnumPageFilesW(PENUM_PAGE_FILE_CALLBACK, LPVOID); /* 2000/XP/Server2003/Vista/Longhorn */\n-    BOOL EnumPageFilesA(PENUM_PAGE_FILE_CALLBACK, LPVOID); /* 2000/XP/Server2003/Vista/Longhorn */\n+    BOOL EnumPageFilesW(PENUM_PAGE_FILE_CALLBACKW, LPVOID); /* 2000/XP/Server2003/Vista/Longhorn */\n+    BOOL EnumPageFilesA(PENUM_PAGE_FILE_CALLBACKA, LPVOID); /* 2000/XP/Server2003/Vista/Longhorn */\n }\n \n version (Unicode) {\n+    alias PENUM_PAGE_FILE_CALLBACKW PENUM_PAGE_FILE_CALLBACK;\n     alias GetModuleBaseNameW GetModuleBaseName;\n     alias GetModuleFileNameExW GetModuleFileNameEx;\n     alias GetMappedFileNameW GetMappedFileName;\n@@ -150,6 +150,7 @@ version (Unicode) {\n     alias EnumPageFilesW EnumPageFiles;\n     alias GetProcessImageFileNameW GetProcessImageFileName;\n } else {\n+    alias PENUM_PAGE_FILE_CALLBACKA PENUM_PAGE_FILE_CALLBACK;\n     alias GetModuleBaseNameA GetModuleBaseName;\n     alias GetModuleFileNameExA GetModuleFileNameEx;\n     alias GetMappedFileNameA GetMappedFileName;"}, {"sha": "6c48f6bff26521d1a1d4eab6ca70b728eba18e89", "filename": "libphobos/libdruntime/core/sys/windows/rapi.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Frapi.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Frapi.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Frapi.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -9,13 +9,14 @@\n  */\n module core.sys.windows.rapi;\n version (Windows):\n+@system:\n \n /* Comment from MinGW\n    NOTE: This strictly does not belong in the Win32 API since it's\n    really part of Platform SDK.\n  */\n \n-private import core.sys.windows.winbase, core.sys.windows.windef;\n+import core.sys.windows.winbase, core.sys.windows.windef;\n \n extern (Windows):\n "}, {"sha": "1004c6b63f8e6e89fc4745fab226efb8d2f87fe2", "filename": "libphobos/libdruntime/core/sys/windows/ras.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fras.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fras.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fras.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -8,11 +8,12 @@\n  */\n module core.sys.windows.ras;\n version (Windows):\n+@system:\n \n version (ANSI) {} else version = Unicode;\n pragma(lib, \"rasapi32\");\n \n-private import core.sys.windows.basetyps, core.sys.windows.lmcons, core.sys.windows.w32api, core.sys.windows.windef;\n+import core.sys.windows.basetyps, core.sys.windows.lmcons, core.sys.windows.w32api, core.sys.windows.windef;\n \n align(4):\n "}, {"sha": "8304a0141294257c5fa980d2fd972b0d1485f977", "filename": "libphobos/libdruntime/core/sys/windows/rasdlg.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Frasdlg.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Frasdlg.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Frasdlg.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -9,11 +9,12 @@\n  */\n module core.sys.windows.rasdlg;\n version (Windows):\n+@system:\n \n version (ANSI) {} else version = Unicode;\n \n import core.sys.windows.ras;\n-private import core.sys.windows.lmcons, core.sys.windows.windef;\n+import core.sys.windows.lmcons, core.sys.windows.windef;\n \n enum {\n     RASPBDEVENT_AddEntry = 1,"}, {"sha": "43bebacd34ef6b1068162acae1ccef9a18cc1b91", "filename": "libphobos/libdruntime/core/sys/windows/raserror.d", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fraserror.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fraserror.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fraserror.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -8,6 +8,7 @@\n  */\n module core.sys.windows.raserror;\n version (Windows):\n+@system:\n \n enum {\n     SUCCESS = 0,"}, {"sha": "0eaa5b28f5b27ab38fcb42f97882acfc3e1b47d0", "filename": "libphobos/libdruntime/core/sys/windows/rassapi.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Frassapi.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Frassapi.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Frassapi.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -9,8 +9,9 @@\n  */\n module core.sys.windows.rassapi;\n version (Windows):\n+@system:\n \n-private import core.sys.windows.lmcons, core.sys.windows.windef;\n+import core.sys.windows.lmcons, core.sys.windows.windef;\n \n // FIXME: check types of constants\n "}, {"sha": "b0c49693e187c5ce1c3def0f34ada0186aaaed9b", "filename": "libphobos/libdruntime/core/sys/windows/reason.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Freason.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Freason.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Freason.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -9,8 +9,9 @@\n  */\n module core.sys.windows.reason;\n version (Windows):\n+@system:\n \n-private import core.sys.windows.w32api, core.sys.windows.windef;\n+import core.sys.windows.w32api, core.sys.windows.windef;\n \n static assert (_WIN32_WINNT >= 0x501,\n   \"core.sys.windows.reason is only available on WindowsXP and later\");"}, {"sha": "1fa1c7e0d7f80b2150b9e14d058fa7272054eba2", "filename": "libphobos/libdruntime/core/sys/windows/regstr.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fregstr.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fregstr.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fregstr.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -8,10 +8,11 @@\n  */\n module core.sys.windows.regstr;\n version (Windows):\n+@system:\n \n // TODO: fix possible conflict with shloj. Sort out NEC_98 issue.\n \n-private import core.sys.windows.windef;\n+import core.sys.windows.windef;\n \n enum REGSTR_MAX_VALUE_LENGTH = 256;\n "}, {"sha": "1abc8f3fd2ad39cf516b0dffa040af080f942dfd", "filename": "libphobos/libdruntime/core/sys/windows/richedit.d", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Frichedit.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Frichedit.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Frichedit.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -8,11 +8,12 @@\n  */\n module core.sys.windows.richedit;\n version (Windows):\n+@system:\n \n version (ANSI) {} else version = Unicode;\n \n-private import core.sys.windows.windef, core.sys.windows.winuser;\n-private import core.sys.windows.wingdi; // for LF_FACESIZE\n+import core.sys.windows.windef, core.sys.windows.winuser;\n+import core.sys.windows.wingdi; // for LF_FACESIZE\n \n align(4):\n "}, {"sha": "a4e64e83b7510d95b0813b32ef5d8485f57ce347", "filename": "libphobos/libdruntime/core/sys/windows/richole.d", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Frichole.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Frichole.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Frichole.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -8,10 +8,11 @@\n  */\n module core.sys.windows.richole;\n version (Windows):\n+@system:\n \n-private import core.sys.windows.objfwd, core.sys.windows.objidl, core.sys.windows.ole2, core.sys.windows.unknwn,\n+import core.sys.windows.objfwd, core.sys.windows.objidl, core.sys.windows.ole2, core.sys.windows.unknwn,\n   core.sys.windows.windef;\n-private import core.sys.windows.richedit; // for CHARRANGE\n+import core.sys.windows.richedit; // for CHARRANGE\n \n //align(4):\n \n@@ -83,7 +84,7 @@ interface IRichEditOle : IUnknown {\n     HRESULT ContextSensitiveHelp(BOOL);\n     HRESULT GetClipboardData(CHARRANGE*, DWORD, LPDATAOBJECT*);\n     HRESULT ImportDataObject(LPDATAOBJECT, CLIPFORMAT, HGLOBAL);\n-};\n+}\n alias IRichEditOle LPRICHEDITOLE;\n \n interface IRichEditOleCallback : IUnknown {\n@@ -97,5 +98,5 @@ interface IRichEditOleCallback : IUnknown {\n     HRESULT GetClipboardData(CHARRANGE*, DWORD, LPDATAOBJECT*);\n     HRESULT GetDragDropEffect(BOOL, DWORD, PDWORD);\n     HRESULT GetContextMenu(WORD, LPOLEOBJECT, CHARRANGE*, HMENU*);\n-};\n+}\n alias IRichEditOleCallback LPRICHEDITOLECALLBACK;"}, {"sha": "5922123439232f3757b0e67806fcd36698c66dfd", "filename": "libphobos/libdruntime/core/sys/windows/rpc.d", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Frpc.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Frpc.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Frpc.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -8,6 +8,7 @@\n  */\n module core.sys.windows.rpc;\n version (Windows):\n+@system:\n \n /* Moved to rpcdecp (duplicate definition).\n     typedef void *I_RPC_HANDLE;"}, {"sha": "cdffbcf0e5c8d3897cdee2e4aca068e06eae4145", "filename": "libphobos/libdruntime/core/sys/windows/rpcdce.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Frpcdce.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Frpcdce.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Frpcdce.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -8,6 +8,7 @@\n  */\n module core.sys.windows.rpcdce;\n version (Windows):\n+@system:\n \n version (ANSI) {} else version = Unicode;\n pragma(lib, \"Rpcrt4\");\n@@ -16,7 +17,7 @@ pragma(lib, \"Rpcrt4\");\n // replaced aliases for version (Unicode)\n \n public import core.sys.windows.rpcdcep;\n-private import core.sys.windows.basetyps, core.sys.windows.w32api, core.sys.windows.windef;\n+import core.sys.windows.basetyps, core.sys.windows.w32api, core.sys.windows.windef;\n \n // FIXME: clean up Windows version support\n "}, {"sha": "10ec910faaea12b7f7a51d2a582a0a4d60d99039", "filename": "libphobos/libdruntime/core/sys/windows/rpcdce2.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Frpcdce2.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Frpcdce2.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Frpcdce2.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -8,11 +8,12 @@\n  */\n module core.sys.windows.rpcdce2;\n version (Windows):\n+@system:\n \n version (ANSI) {} else version = Unicode;\n \n import core.sys.windows.rpcdce;\n-private import core.sys.windows.basetyps;\n+import core.sys.windows.basetyps;\n \n // FIXME: deal with RPC_UNICODE_SUPPORTED\n // FIXME: check types of constants"}, {"sha": "fe22bf8c7240549c3c22d54a236fb112805f15a1", "filename": "libphobos/libdruntime/core/sys/windows/rpcdcep.d", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Frpcdcep.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Frpcdcep.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Frpcdcep.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -8,12 +8,13 @@\n  */\n module core.sys.windows.rpcdcep;\n version (Windows):\n+@system:\n \n version (ANSI) {} else version = Unicode;\n \n-private import core.sys.windows.basetyps;\n-private import core.sys.windows.w32api;\n-private import core.sys.windows.windef;\n+import core.sys.windows.basetyps;\n+import core.sys.windows.w32api;\n+import core.sys.windows.windef;\n \n mixin DECLARE_HANDLE!(\"I_RPC_HANDLE\");\n alias long RPC_STATUS;"}, {"sha": "6720b94aa9d030b5a2a30b5ccdc60656485784ce", "filename": "libphobos/libdruntime/core/sys/windows/rpcndr.d", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Frpcndr.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Frpcndr.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Frpcndr.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -8,6 +8,7 @@\n  */\n module core.sys.windows.rpcndr;\n version (Windows):\n+@system:\n pragma(lib, \"rpcrt4\");\n \n /* Translation notes:\n@@ -19,9 +20,9 @@ pragma(lib, \"rpcrt4\");\n enum __RPCNDR_H_VERSION__= 450;\n \n import core.sys.windows.rpcnsip;\n-private import core.sys.windows.rpc, core.sys.windows.rpcdce, core.sys.windows.unknwn, core.sys.windows.windef;\n-private import core.sys.windows.objidl; // for IRpcChannelBuffer, IRpcStubBuffer\n-private import core.sys.windows.basetyps;\n+import core.sys.windows.rpc, core.sys.windows.rpcdce, core.sys.windows.unknwn, core.sys.windows.windef;\n+import core.sys.windows.objidl; // for IRpcChannelBuffer, IRpcStubBuffer\n+import core.sys.windows.basetyps;\n \n extern (Windows):\n "}, {"sha": "2ecae63aefe738ec393faa33885c04abf64f38bd", "filename": "libphobos/libdruntime/core/sys/windows/rpcnsi.d", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Frpcnsi.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Frpcnsi.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Frpcnsi.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -10,13 +10,14 @@\n  */\n module core.sys.windows.rpcnsi;\n version (Windows):\n+@system:\n \n version (ANSI) {} else version = Unicode;\n pragma(lib, \"rpcns4\");\n \n-private import core.sys.windows.basetyps, core.sys.windows.rpcdcep, core.sys.windows.rpcnsi, core.sys.windows.rpcdce,\n+import core.sys.windows.basetyps, core.sys.windows.rpcdcep, core.sys.windows.rpcnsi, core.sys.windows.rpcdce,\n   core.sys.windows.w32api;\n-private import core.sys.windows.windef;  // for HANDLE\n+import core.sys.windows.windef;  // for HANDLE\n \n mixin DECLARE_HANDLE!(\"RPC_NS_HANDLE\");\n "}, {"sha": "1c0f050df754dc59fc6464111540895bda9557dd", "filename": "libphobos/libdruntime/core/sys/windows/rpcnsip.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Frpcnsip.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Frpcnsip.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Frpcnsip.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -8,8 +8,9 @@\n  */\n module core.sys.windows.rpcnsip;\n version (Windows):\n+@system:\n \n-private import core.sys.windows.rpcdce, core.sys.windows.rpcdcep, core.sys.windows.rpcnsi;\n+import core.sys.windows.rpcdce, core.sys.windows.rpcdcep, core.sys.windows.rpcnsi;\n \n struct RPC_IMPORT_CONTEXT_P {\n     RPC_NS_HANDLE       LookupContext;"}, {"sha": "dcd63ab454f5a8cfc40be6413b3e1fc8abd440b7", "filename": "libphobos/libdruntime/core/sys/windows/rpcnterr.d", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Frpcnterr.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Frpcnterr.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Frpcnterr.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -8,6 +8,7 @@\n  */\n module core.sys.windows.rpcnterr;\n version (Windows):\n+@system:\n \n import core.sys.windows.winerror;\n "}, {"sha": "1d2fbda7ddb9364fdbdc55f57e79aff68f148cbc", "filename": "libphobos/libdruntime/core/sys/windows/schannel.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fschannel.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fschannel.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fschannel.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -9,9 +9,10 @@\n  */\n module core.sys.windows.schannel;\n version (Windows):\n+@system:\n \n import core.sys.windows.wincrypt;\n-private import core.sys.windows.windef;\n+import core.sys.windows.windef;\n \n enum DWORD SCHANNEL_CRED_VERSION = 4;\n enum SCHANNEL_SHUTDOWN           = 1;"}, {"sha": "3af3c86d2c03a270ac46aeee2cc2352fec2d27e9", "filename": "libphobos/libdruntime/core/sys/windows/sdkddkver.d", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fsdkddkver.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fsdkddkver.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fsdkddkver.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -0,0 +1,118 @@\n+/**\n+ * Windows API header module\n+ *\n+ * Translated from Windows SDK API\n+ *\n+ * License: $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n+ * Source: $(DRUNTIMESRC src/core/sys/windows/sdkddkver.d)\n+ */\n+module core.sys.windows.sdkddkver;\n+\n+version (Windows):\n+@system:\n+\n+enum _WIN32_WINNT_NT4                    = 0x0400;\n+enum _WIN32_WINNT_WIN2K                  = 0x0500;\n+enum _WIN32_WINNT_WINXP                  = 0x0501;\n+enum _WIN32_WINNT_WS03                   = 0x0502;\n+enum _WIN32_WINNT_WIN6                   = 0x0600;\n+enum _WIN32_WINNT_VISTA                  = 0x0600;\n+enum _WIN32_WINNT_WS08                   = 0x0600;\n+enum _WIN32_WINNT_LONGHORN               = 0x0600;\n+enum _WIN32_WINNT_WIN7                   = 0x0601;\n+enum _WIN32_WINNT_WIN8                   = 0x0602;\n+enum _WIN32_WINNT_WINBLUE                = 0x0603;\n+enum _WIN32_WINNT_WIN10                  = 0x0A00;\n+\n+enum _WIN32_IE_IE20                      = 0x0200;\n+enum _WIN32_IE_IE30                      = 0x0300;\n+enum _WIN32_IE_IE302                     = 0x0302;\n+enum _WIN32_IE_IE40                      = 0x0400;\n+enum _WIN32_IE_IE401                     = 0x0401;\n+enum _WIN32_IE_IE50                      = 0x0500;\n+enum _WIN32_IE_IE501                     = 0x0501;\n+enum _WIN32_IE_IE55                      = 0x0550;\n+enum _WIN32_IE_IE60                      = 0x0600;\n+enum _WIN32_IE_IE60SP1                   = 0x0601;\n+enum _WIN32_IE_IE60SP2                   = 0x0603;\n+enum _WIN32_IE_IE70                      = 0x0700;\n+enum _WIN32_IE_IE80                      = 0x0800;\n+enum _WIN32_IE_IE90                      = 0x0900;\n+enum _WIN32_IE_IE100                     = 0x0A00;\n+\n+enum _WIN32_IE_NT4                    =  _WIN32_IE_IE20;\n+enum _WIN32_IE_NT4SP1                 =  _WIN32_IE_IE20;\n+enum _WIN32_IE_NT4SP2                 =  _WIN32_IE_IE20;\n+enum _WIN32_IE_NT4SP3                 =  _WIN32_IE_IE302;\n+enum _WIN32_IE_NT4SP4                 =  _WIN32_IE_IE401;\n+enum _WIN32_IE_NT4SP5                 =  _WIN32_IE_IE401;\n+enum _WIN32_IE_NT4SP6                 =  _WIN32_IE_IE50;\n+enum _WIN32_IE_WIN98                  =  _WIN32_IE_IE401;\n+enum _WIN32_IE_WIN98SE                =  _WIN32_IE_IE50;\n+enum _WIN32_IE_WINME                  =  _WIN32_IE_IE55;\n+enum _WIN32_IE_WIN2K                  =  _WIN32_IE_IE501;\n+enum _WIN32_IE_WIN2KSP1               =  _WIN32_IE_IE501;\n+enum _WIN32_IE_WIN2KSP2               =  _WIN32_IE_IE501;\n+enum _WIN32_IE_WIN2KSP3               =  _WIN32_IE_IE501;\n+enum _WIN32_IE_WIN2KSP4               =  _WIN32_IE_IE501;\n+enum _WIN32_IE_XP                     =  _WIN32_IE_IE60;\n+enum _WIN32_IE_XPSP1                  =  _WIN32_IE_IE60SP1;\n+enum _WIN32_IE_XPSP2                  =  _WIN32_IE_IE60SP2;\n+enum _WIN32_IE_WS03                   =  0x0602;\n+enum _WIN32_IE_WS03SP1                =  _WIN32_IE_IE60SP2;\n+enum _WIN32_IE_WIN6                   =  _WIN32_IE_IE70;\n+enum _WIN32_IE_LONGHORN               =  _WIN32_IE_IE70;\n+enum _WIN32_IE_WIN7                   =  _WIN32_IE_IE80;\n+enum _WIN32_IE_WIN8                   =  _WIN32_IE_IE100;\n+enum _WIN32_IE_WINBLUE                =  _WIN32_IE_IE100;\n+\n+\n+enum NTDDI_WIN2K                         = 0x05000000;\n+enum NTDDI_WIN2KSP1                      = 0x05000100;\n+enum NTDDI_WIN2KSP2                      = 0x05000200;\n+enum NTDDI_WIN2KSP3                      = 0x05000300;\n+enum NTDDI_WIN2KSP4                      = 0x05000400;\n+\n+enum NTDDI_WINXP                         = 0x05010000;\n+enum NTDDI_WINXPSP1                      = 0x05010100;\n+enum NTDDI_WINXPSP2                      = 0x05010200;\n+enum NTDDI_WINXPSP3                      = 0x05010300;\n+enum NTDDI_WINXPSP4                      = 0x05010400;\n+\n+enum NTDDI_WS03                          = 0x05020000;\n+enum NTDDI_WS03SP1                       = 0x05020100;\n+enum NTDDI_WS03SP2                       = 0x05020200;\n+enum NTDDI_WS03SP3                       = 0x05020300;\n+enum NTDDI_WS03SP4                       = 0x05020400;\n+\n+enum NTDDI_WIN6                          = 0x06000000;\n+enum NTDDI_WIN6SP1                       = 0x06000100;\n+enum NTDDI_WIN6SP2                       = 0x06000200;\n+enum NTDDI_WIN6SP3                       = 0x06000300;\n+enum NTDDI_WIN6SP4                       = 0x06000400;\n+\n+enum NTDDI_VISTA                       = NTDDI_WIN6;\n+enum NTDDI_VISTASP1                    = NTDDI_WIN6SP1;\n+enum NTDDI_VISTASP2                    = NTDDI_WIN6SP2;\n+enum NTDDI_VISTASP3                    = NTDDI_WIN6SP3;\n+enum NTDDI_VISTASP4                    = NTDDI_WIN6SP4;\n+\n+enum NTDDI_LONGHORN                    = NTDDI_VISTA;\n+\n+enum NTDDI_WS08                        = NTDDI_WIN6SP1;\n+enum NTDDI_WS08SP2                     = NTDDI_WIN6SP2;\n+enum NTDDI_WS08SP3                     = NTDDI_WIN6SP3;\n+enum NTDDI_WS08SP4                     = NTDDI_WIN6SP4;\n+\n+enum NTDDI_WIN7                          = 0x06010000;\n+enum NTDDI_WIN8                          = 0x06020000;\n+enum NTDDI_WINBLUE                       = 0x06030000;\n+\n+enum OSVERSION_MASK      = 0xFFFF0000;\n+enum SPVERSION_MASK      = 0x0000FF00;\n+enum SUBVERSION_MASK     = 0x000000FF;\n+\n+enum _WIN32_WINNT    = 0x0603;\n+\n+enum NTDDI_VERSION   = 0x06030000;\n+enum WINVER          =  _WIN32_WINNT;"}, {"sha": "dd4ec8589a6f84cbae748b9f99a2137a2fd0a1be", "filename": "libphobos/libdruntime/core/sys/windows/secext.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fsecext.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fsecext.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fsecext.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -9,11 +9,12 @@\n // Don't include this file directly, use core.sys.windows.security instead.\n module core.sys.windows.secext;\n version (Windows):\n+@system:\n \n version (ANSI) {} else version = Unicode;\n pragma(lib, \"secur32\");\n \n-private import core.sys.windows.w32api, core.sys.windows.windef;\n+import core.sys.windows.w32api, core.sys.windows.windef;\n \n static assert (_WIN32_WINNT >= 0x501,\n   \"SecExt is only available on WindowsXP and later\");"}, {"sha": "2dc7c19497571d89a81c91b68d4fb15b4e3ce058", "filename": "libphobos/libdruntime/core/sys/windows/security.d", "status": "modified", "additions": 104, "deletions": 30, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fsecurity.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fsecurity.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fsecurity.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -3,44 +3,118 @@\n  *\n  * Translated from MinGW Windows headers\n  *\n- * Authors: Ellery Newcomer\n+ * Authors: Ellery Newcomer, John Colvin\n  * License: $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Source: $(DRUNTIMESRC src/core/sys/windows/_security.d)\n  */\n module core.sys.windows.security;\n version (Windows):\n+@system:\n \n-enum :SECURITY_STATUS{\n-    SEC_E_OK = 0,\n-    SEC_E_CERT_EXPIRED = (-2146893016),\n-    SEC_E_INCOMPLETE_MESSAGE = (-2146893032),\n-    SEC_E_INSUFFICIENT_MEMORY = (-2146893056),\n-    SEC_E_INTERNAL_ERROR = (-2146893052),\n-    SEC_E_INVALID_HANDLE = (-2146893055),\n-    SEC_E_INVALID_TOKEN = (-2146893048),\n-    SEC_E_LOGON_DENIED = (-2146893044),\n-    SEC_E_NO_AUTHENTICATING_AUTHORITY = (-2146893039),\n-    SEC_E_NO_CREDENTIALS = (-2146893042),\n-    SEC_E_TARGET_UNKNOWN = (-2146893053),\n-    SEC_E_UNSUPPORTED_FUNCTION = (-2146893054),\n-    SEC_E_UNTRUSTED_ROOT = (-2146893019),\n-    SEC_E_WRONG_PRINCIPAL = (-2146893022),\n-    SEC_E_SECPKG_NOT_FOUND = (-2146893051),\n-    SEC_E_QOP_NOT_SUPPORTED = (-2146893046),\n-    SEC_E_UNKNOWN_CREDENTIALS = (-2146893043),\n-    SEC_E_NOT_OWNER = (-2146893050),\n+enum : SECURITY_STATUS\n+{\n+    SEC_E_OK = 0x00000000,\n+    SEC_E_INSUFFICIENT_MEMORY = 0x80090300,\n+    SEC_E_INVALID_HANDLE = 0x80090301,\n+    SEC_E_UNSUPPORTED_FUNCTION = 0x80090302,\n+    SEC_E_TARGET_UNKNOWN = 0x80090303,\n+    SEC_E_INTERNAL_ERROR = 0x80090304,\n+    SEC_E_SECPKG_NOT_FOUND = 0x80090305,\n+    SEC_E_NOT_OWNER = 0x80090306,\n+    SEC_E_CANNOT_INSTALL = 0x80090307,\n+    SEC_E_INVALID_TOKEN = 0x80090308,\n+    SEC_E_CANNOT_PACK = 0x80090309,\n+    SEC_E_QOP_NOT_SUPPORTED = 0x8009030A,\n+    SEC_E_NO_IMPERSONATION = 0x8009030B,\n+    SEC_E_LOGON_DENIED = 0x8009030C,\n+    SEC_E_UNKNOWN_CREDENTIALS = 0x8009030D,\n+    SEC_E_NO_CREDENTIALS = 0x8009030E,\n+    SEC_E_MESSAGE_ALTERED = 0x8009030F,\n+    SEC_E_OUT_OF_SEQUENCE = 0x80090310,\n+    SEC_E_NO_AUTHENTICATING_AUTHORITY = 0x80090311,\n+    SEC_E_BAD_PKGID = 0x80090316,\n+    SEC_E_CONTEXT_EXPIRED = 0x80090317,\n+    SEC_E_INCOMPLETE_MESSAGE = 0x80090318,\n+    SEC_E_INCOMPLETE_CREDENTIALS = 0x80090320,\n+    SEC_E_BUFFER_TOO_SMALL = 0x80090321,\n+    SEC_E_WRONG_PRINCIPAL = 0x80090322,\n+    SEC_E_TIME_SKEW = 0x80090324,\n+    SEC_E_UNTRUSTED_ROOT = 0x80090325,\n+    SEC_E_ILLEGAL_MESSAGE = 0x80090326,\n+    SEC_E_CERT_UNKNOWN = 0x80090327,\n+    SEC_E_CERT_EXPIRED = 0x80090328,\n+    SEC_E_ENCRYPT_FAILURE = 0x80090329,\n+    SEC_E_DECRYPT_FAILURE = 0x80090330,\n+    SEC_E_ALGORITHM_MISMATCH = 0x80090331,\n+    SEC_E_SECURITY_QOS_FAILED = 0x80090332,\n+    SEC_E_UNFINISHED_CONTEXT_DELETED = 0x80090333,\n+    SEC_E_NO_TGT_REPLY = 0x80090334,\n+    SEC_E_NO_IP_ADDRESSES = 0x80090335,\n+    SEC_E_WRONG_CREDENTIAL_HANDLE = 0x80090336,\n+    SEC_E_CRYPTO_SYSTEM_INVALID = 0x80090337,\n+    SEC_E_MAX_REFERRALS_EXCEEDED = 0x80090338,\n+    SEC_E_MUST_BE_KDC = 0x80090339,\n+    SEC_E_STRONG_CRYPTO_NOT_SUPPORTED = 0x8009033A,\n+    SEC_E_TOO_MANY_PRINCIPALS = 0x8009033B,\n+    SEC_E_NO_PA_DATA = 0x8009033C,\n+    SEC_E_PKINIT_NAME_MISMATCH = 0x8009033D,\n+    SEC_E_SMARTCARD_LOGON_REQUIRED = 0x8009033E,\n+    SEC_E_SHUTDOWN_IN_PROGRESS = 0x8009033F,\n+    SEC_E_KDC_INVALID_REQUEST = 0x80090340,\n+    SEC_E_KDC_UNABLE_TO_REFER = 0x80090341,\n+    SEC_E_KDC_UNKNOWN_ETYPE = 0x80090342,\n+    SEC_E_UNSUPPORTED_PREAUTH = 0x80090343,\n+    SEC_E_DELEGATION_REQUIRED = 0x80090345,\n+    SEC_E_BAD_BINDINGS = 0x80090346,\n+    SEC_E_MULTIPLE_ACCOUNTS = 0x80090347,\n+    SEC_E_NO_KERB_KEY = 0x80090348,\n+    SEC_E_CERT_WRONG_USAGE = 0x80090349,\n+    SEC_E_DOWNGRADE_DETECTED = 0x80090350,\n+    SEC_E_SMARTCARD_CERT_REVOKED = 0x80090351,\n+    SEC_E_ISSUING_CA_UNTRUSTED = 0x80090352,\n+    SEC_E_REVOCATION_OFFLINE_C = 0x80090353,\n+    SEC_E_PKINIT_CLIENT_FAILURE = 0x80090354,\n+    SEC_E_SMARTCARD_CERT_EXPIRED = 0x80090355,\n+    SEC_E_NO_S4U_PROT_SUPPORT = 0x80090356,\n+    SEC_E_CROSSREALM_DELEGATION_FAILURE = 0x80090357,\n+    SEC_E_REVOCATION_OFFLINE_KDC = 0x80090358,\n+    SEC_E_ISSUING_CA_UNTRUSTED_KDC = 0x80090359,\n+    SEC_E_KDC_CERT_EXPIRED = 0x8009035A,\n+    SEC_E_KDC_CERT_REVOKED = 0x8009035B,\n+    SEC_E_INVALID_PARAMETER = 0x8009035D,\n+    SEC_E_DELEGATION_POLICY = 0x8009035E,\n+    SEC_E_POLICY_NLTM_ONLY = 0x8009035F,\n+    SEC_E_NO_CONTEXT = 0x80090361,\n+    SEC_E_PKU2U_CERT_FAILURE = 0x80090362,\n+    SEC_E_MUTUAL_AUTH_FAILED = 0x80090363,\n+    SEC_E_ONLY_HTTPS_ALLOWED = 0x80090365,\n+    SEC_E_APPLICATION_PROTOCOL_MISMATCH = 0x80090367,\n+    SEC_E_INVALID_UPN_NAME = 0x80090369,\n+    SEC_E_EXT_BUFFER_TOO_SMALL = 0x8009036A,\n+    SEC_E_INSUFFICIENT_BUFFERS = 0x8009036B,\n+    SEC_E_NO_SPM = SEC_E_INTERNAL_ERROR,\n+    SEC_E_NOT_SUPPORTED = SEC_E_UNSUPPORTED_FUNCTION\n }\n-enum :SECURITY_STATUS {\n-    SEC_I_RENEGOTIATE = 590625,\n-    SEC_I_COMPLETE_AND_CONTINUE = 590612,\n-    SEC_I_COMPLETE_NEEDED = 590611,\n-    SEC_I_CONTINUE_NEEDED = 590610,\n-    SEC_I_INCOMPLETE_CREDENTIALS = 590624,\n+enum : SECURITY_STATUS\n+{\n+    SEC_I_CONTINUE_NEEDED = 0x00090312,\n+    SEC_I_COMPLETE_NEEDED = 0x00090313,\n+    SEC_I_COMPLETE_AND_CONTINUE = 0x00090314,\n+    SEC_I_LOCAL_LOGON = 0x00090315,\n+    SEC_I_GENERIC_EXTENSION_RECEIVED = 0x00090316,\n+    SEC_I_CONTEXT_EXPIRED = 0x00090317,\n+    SEC_I_INCOMPLETE_CREDENTIALS = 0x00090320,\n+    SEC_I_RENEGOTIATE = 0x00090321,\n+    SEC_I_NO_LSA_CONTEXT = 0x00090323,\n+    SEC_I_SIGNATURE_NEEDED = 0x0009035C,\n+    SEC_I_NO_RENEGOTIATION = 0x00090360,\n+    SEC_I_MESSAGE_FRAGMENT = 0x00090364,\n+    SEC_I_CONTINUE_NEEDED_MESSAGE_OK = 0x00090366,\n+    SEC_I_ASYNC_CALL_PENDING = 0x00090368,\n }\n \n /* always a char */\n-alias char SEC_CHAR;\n-alias wchar SEC_WCHAR;\n-\n-alias int SECURITY_STATUS;\n+alias SEC_CHAR = char;\n+alias SEC_WCHAR = wchar;\n \n+alias SECURITY_STATUS = int;"}, {"sha": "1c061dd87469f6df3e7a2084a378896cde745d3e", "filename": "libphobos/libdruntime/core/sys/windows/servprov.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fservprov.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fservprov.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fservprov.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -8,8 +8,9 @@\n  */\n module core.sys.windows.servprov;\n version (Windows):\n+@system:\n \n-private import core.sys.windows.basetyps, core.sys.windows.unknwn, core.sys.windows.windef, core.sys.windows.wtypes;\n+import core.sys.windows.basetyps, core.sys.windows.unknwn, core.sys.windows.windef, core.sys.windows.wtypes;\n \n interface IServiceProvider : IUnknown {\n     HRESULT QueryService(REFGUID, REFIID, void**);"}, {"sha": "432ff3546427a1cd6e83bcb7275e971ba4d4209f", "filename": "libphobos/libdruntime/core/sys/windows/setupapi.d", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fsetupapi.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fsetupapi.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fsetupapi.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -9,13 +9,14 @@\n  */\n module core.sys.windows.setupapi;\n version (Windows):\n+@system:\n \n version (ANSI) {} else version = Unicode;\n pragma(lib, \"setupapi\");\n \n-private import core.sys.windows.basetyps, core.sys.windows.commctrl, core.sys.windows.prsht, core.sys.windows.w32api,\n+import core.sys.windows.basetyps, core.sys.windows.commctrl, core.sys.windows.prsht, core.sys.windows.w32api,\n   core.sys.windows.winreg, core.sys.windows.windef;\n-private import core.sys.windows.winbase; // for SYSTEMTIME\n+import core.sys.windows.winbase; // for SYSTEMTIME\n \n /*static if (_WIN32_WINNT < _WIN32_WINDOWS) {\n enum UINT _SETUPAPI_VER = _WIN32_WINNT; // SetupAPI version follows Windows NT version"}, {"sha": "2b7f1456d22f82462c0393aed0c979e57116d915", "filename": "libphobos/libdruntime/core/sys/windows/shellapi.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fshellapi.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fshellapi.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fshellapi.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -9,11 +9,12 @@\n  */\n module core.sys.windows.shellapi;\n version (Windows):\n+@system:\n \n version (ANSI) {} else version = Unicode;\n pragma(lib, \"shell32\");\n \n-private import core.sys.windows.w32api, core.sys.windows.windef, core.sys.windows.basetyps;\n+import core.sys.windows.w32api, core.sys.windows.windef, core.sys.windows.basetyps;\n \n enum : UINT {\n     ABE_LEFT,"}, {"sha": "70cf88428c76e7399fa11603ff03a8ebfae2ae2c", "filename": "libphobos/libdruntime/core/sys/windows/shldisp.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fshldisp.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fshldisp.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fshldisp.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -8,8 +8,9 @@\n  */\n module core.sys.windows.shldisp;\n version (Windows):\n+@system:\n \n-private import core.sys.windows.unknwn, core.sys.windows.windef, core.sys.windows.wtypes;\n+import core.sys.windows.unknwn, core.sys.windows.windef, core.sys.windows.wtypes;\n \n // options for IAutoComplete2\n enum DWORD ACO_AUTOSUGGEST = 0x01;"}, {"sha": "15e6138b2f4e1c9b579fa44496885e3146a9ce56", "filename": "libphobos/libdruntime/core/sys/windows/shlguid.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fshlguid.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fshlguid.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fshlguid.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -8,8 +8,9 @@\n  */\n module core.sys.windows.shlguid;\n version (Windows):\n+@system:\n \n-private import core.sys.windows.basetyps, core.sys.windows.w32api;\n+import core.sys.windows.basetyps, core.sys.windows.w32api;\n \n // FIXME: clean up Windows version support\n "}, {"sha": "5f921b3ca1ab83666992a0bc0adae97429085bb5", "filename": "libphobos/libdruntime/core/sys/windows/shlobj.d", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fshlobj.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fshlobj.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fshlobj.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -8,6 +8,7 @@\n  */\n module core.sys.windows.shlobj;\n version (Windows):\n+@system:\n \n version (ANSI) {} else version = Unicode;\n pragma(lib, \"shell32\");\n@@ -17,10 +18,10 @@ pragma(lib, \"shell32\");\n // SHGetFolderPath in shfolder.dll on W9x, NT4, also in shell32.dll on W2K\n \n import core.sys.windows.commctrl, core.sys.windows.ole2, core.sys.windows.shlguid, core.sys.windows.shellapi;\n-private import core.sys.windows.prsht, core.sys.windows.unknwn, core.sys.windows.w32api, core.sys.windows.winbase,\n+import core.sys.windows.prsht, core.sys.windows.unknwn, core.sys.windows.w32api, core.sys.windows.winbase,\n   core.sys.windows.winnt, core.sys.windows.winuser, core.sys.windows.wtypes, core.sys.windows.objfwd, core.sys.windows.objidl;\n-private import core.sys.windows.winnetwk; // for NETRESOURCE\n-private import core.sys.windows.oaidl : VARIANT;\n+import core.sys.windows.winnetwk; // for NETRESOURCE\n+import core.sys.windows.oaidl : VARIANT;\n \n \n // FIXME: clean up Windows version support\n@@ -691,7 +692,7 @@ alias IContextMenu LPCONTEXTMENU;\n \n interface IContextMenu2 : IContextMenu {\n     HRESULT HandleMenuMsg(UINT, WPARAM, LPARAM);\n-};\n+}\n alias IContextMenu2 LPCONTEXTMENU2;\n \n static if (_WIN32_IE >= 0x500) {\n@@ -770,7 +771,7 @@ alias IShellPropSheetExt LPSHELLPROPSHEETEXT;\n interface IExtractIconA : IUnknown {\n     HRESULT GetIconLocation(UINT, LPSTR, UINT, int*, PUINT);\n     HRESULT Extract(LPCSTR, UINT, HICON*, HICON*, UINT);\n-};\n+}\n alias IExtractIconA LPEXTRACTICONA;\n \n interface IExtractIconW : IUnknown {\n@@ -855,16 +856,6 @@ interface IEnumExtraSearch: IUnknown {\n alias IEnumExtraSearch LPENUMEXTRASEARCH;\n \n interface IShellFolder2 : IShellFolder {\n-    HRESULT ParseDisplayName(HWND, LPBC, LPOLESTR, PULONG, LPITEMIDLIST*, PULONG);\n-    HRESULT EnumObjects(HWND, DWORD, LPENUMIDLIST*);\n-    HRESULT BindToObject(LPCITEMIDLIST, LPBC, REFIID, PVOID*);\n-    HRESULT BindToStorage(LPCITEMIDLIST, LPBC, REFIID, PVOID*);\n-    HRESULT CompareIDs(LPARAM, LPCITEMIDLIST, LPCITEMIDLIST);\n-    HRESULT CreateViewObject(HWND, REFIID, PVOID*);\n-    HRESULT GetAttributesOf(UINT, LPCITEMIDLIST*, PULONG);\n-    HRESULT GetUIObjectOf(HWND, UINT, LPCITEMIDLIST*, REFIID, PUINT, PVOID*);\n-    HRESULT GetDisplayNameOf(LPCITEMIDLIST, DWORD, LPSTRRET);\n-    HRESULT SetNameOf(HWND, LPCITEMIDLIST, LPCOLESTR, DWORD, LPITEMIDLIST*);\n     HRESULT GetDefaultSearchGUID(GUID*);\n     HRESULT EnumSearches(IEnumExtraSearch*);\n     HRESULT GetDefaultColumn(DWORD, ULONG*, ULONG*);"}, {"sha": "8cb21ef4a4a89612d2bdfe49113796b5ba181716", "filename": "libphobos/libdruntime/core/sys/windows/shlwapi.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fshlwapi.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fshlwapi.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fshlwapi.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -8,6 +8,7 @@\n  */\n module core.sys.windows.shlwapi;\n version (Windows):\n+@system:\n \n version (ANSI) {} else version = Unicode;\n pragma(lib, \"shlwapi\");\n@@ -27,7 +28,7 @@ wnsprintf functions are not included.\n */\n \n import core.sys.windows.objbase, core.sys.windows.shlobj;\n-private import core.sys.windows.basetyps, core.sys.windows.objidl, core.sys.windows.unknwn, core.sys.windows.windef,\n+import core.sys.windows.basetyps, core.sys.windows.objidl, core.sys.windows.unknwn, core.sys.windows.windef,\n   core.sys.windows.winbase, core.sys.windows.winreg;\n \n enum DLLVER_PLATFORM_WINDOWS = 0x00000001;"}, {"sha": "ea64e0d86b58ca48d89e3e345a4d244ff9d4e384", "filename": "libphobos/libdruntime/core/sys/windows/snmp.d", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fsnmp.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fsnmp.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fsnmp.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -9,10 +9,11 @@\n  */\n module core.sys.windows.snmp;\n version (Windows):\n+@system:\n \n-private import core.sys.windows.basetsd /+: HANDLE+/;\n-private import core.sys.windows.windef /+: BOOL, BYTE, DWORD, INT, LONG, UINT, ULONG+/;\n-private import core.sys.windows.winnt /+: LPSTR, LPVOID, ULARGE_INTEGER, VOID+/;\n+import core.sys.windows.basetsd /+: HANDLE+/;\n+import core.sys.windows.windef /+: BOOL, BYTE, DWORD, INT, LONG, UINT, ULONG+/;\n+import core.sys.windows.winnt /+: LPSTR, LPVOID, ULARGE_INTEGER, VOID+/;\n \n // These are not documented on MSDN\n enum {"}, {"sha": "177a48dc0c32e0e2851d795d06f7b29226a8fad3", "filename": "libphobos/libdruntime/core/sys/windows/sql.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fsql.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fsql.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fsql.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -8,9 +8,10 @@\n  */\n module core.sys.windows.sql;\n version (Windows):\n+@system:\n \n public import core.sys.windows.sqltypes;\n-private import core.sys.windows.windef;\n+import core.sys.windows.windef;\n \n enum ODBCVER = 0x0351;\n "}, {"sha": "3acfc5aa70caf6ecf6b22859590101497be70680", "filename": "libphobos/libdruntime/core/sys/windows/sqlext.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fsqlext.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fsqlext.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fsqlext.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -8,6 +8,7 @@\n  */\n module core.sys.windows.sqlext;\n version (Windows):\n+@system:\n \n /* Conversion notes:\n    The MinGW file was a horrible mess. All of the #defines were sorted alphabetically,\n@@ -17,7 +18,7 @@ version (Windows):\n */\n \n public import core.sys.windows.sql;\n-private import core.sys.windows.windef;\n+import core.sys.windows.windef;\n \n enum SQL_SPEC_MAJOR = 3;\n enum SQL_SPEC_MINOR = 51;"}, {"sha": "aaffeb225856311ce8eb9549f2dd1ad3e03f3db0", "filename": "libphobos/libdruntime/core/sys/windows/sqltypes.d", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fsqltypes.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fsqltypes.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fsqltypes.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -8,15 +8,16 @@\n  */\n module core.sys.windows.sqltypes;\n version (Windows):\n+@system:\n \n version (ANSI) {} else version = Unicode;\n \n /* Conversion notes:\n   It's assumed that ODBC >= 0x0300.\n */\n \n-private import core.sys.windows.windef;\n-private import core.sys.windows.basetyps; // for GUID\n+import core.sys.windows.windef;\n+import core.sys.windows.basetyps; // for GUID\n \n alias byte SCHAR, SQLSCHAR;\n alias int SDWORD, SLONG, SQLINTEGER;"}, {"sha": "21f47f6f54ee96ed15c9d3c33847974b55278605", "filename": "libphobos/libdruntime/core/sys/windows/sqlucode.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fsqlucode.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fsqlucode.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fsqlucode.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -8,10 +8,11 @@\n  */\n module core.sys.windows.sqlucode;\n version (Windows):\n+@system:\n \n version (ANSI) {} else version = Unicode;\n \n-private import core.sys.windows.sqlext;\n+import core.sys.windows.sqlext;\n \n enum SQL_WCHAR        = -8;\n enum SQL_WVARCHAR     = -9;"}, {"sha": "cf41298a631ad4f74a22aa1af3d850df792d83ee", "filename": "libphobos/libdruntime/core/sys/windows/sspi.d", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fsspi.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fsspi.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fsspi.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -9,6 +9,7 @@\n  */\n module core.sys.windows.sspi;\n version (Windows):\n+@system:\n \n version (ANSI) {} else version = Unicode;\n "}, {"sha": "2922e54ebae3b0edb6470a398faac65414c1ac45", "filename": "libphobos/libdruntime/core/sys/windows/stacktrace.d", "status": "modified", "additions": 16, "deletions": 24, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fstacktrace.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fstacktrace.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fstacktrace.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -11,9 +11,9 @@\n \n module core.sys.windows.stacktrace;\n version (Windows):\n+@system:\n \n import core.demangle;\n-import core.runtime;\n import core.stdc.stdlib;\n import core.stdc.string;\n import core.sys.windows.dbghelp;\n@@ -217,11 +217,6 @@ private:\n         // do ... while so that we don't skip the first stackframe\n         do\n         {\n-            if ( stackframe.AddrPC.Offset == stackframe.AddrReturn.Offset )\n-            {\n-                debug(PRINTF) printf(\"Endless callstack\\n\");\n-                break;\n-            }\n             if (frameNum >= skip)\n             {\n                 result ~= stackframe.AddrPC.Offset;\n@@ -255,26 +250,23 @@ private:\n         char[][] trace;\n         foreach (pc; addresses)\n         {\n-            if ( pc != 0 )\n+            char[] res;\n+            if (dbghelp.SymGetSymFromAddr64(hProcess, pc, null, symbol) &&\n+                *symbol.Name.ptr)\n             {\n-                char[] res;\n-                if (dbghelp.SymGetSymFromAddr64(hProcess, pc, null, symbol) &&\n-                    *symbol.Name.ptr)\n-                {\n-                    DWORD disp;\n-                    IMAGEHLP_LINEA64 line=void;\n-                    line.SizeOfStruct = IMAGEHLP_LINEA64.sizeof;\n-\n-                    if (dbghelp.SymGetLineFromAddr64(hProcess, pc, &disp, &line))\n-                        res = formatStackFrame(cast(void*)pc, symbol.Name.ptr,\n-                                               line.FileName, line.LineNumber);\n-                    else\n-                        res = formatStackFrame(cast(void*)pc, symbol.Name.ptr);\n-                }\n+                DWORD disp;\n+                IMAGEHLP_LINEA64 line=void;\n+                line.SizeOfStruct = IMAGEHLP_LINEA64.sizeof;\n+\n+                if (dbghelp.SymGetLineFromAddr64(hProcess, pc, &disp, &line))\n+                    res = formatStackFrame(cast(void*)pc, symbol.Name.ptr,\n+                                           line.FileName, line.LineNumber);\n                 else\n-                    res = formatStackFrame(cast(void*)pc);\n-                trace ~= res;\n+                    res = formatStackFrame(cast(void*)pc, symbol.Name.ptr);\n             }\n+            else\n+                res = formatStackFrame(cast(void*)pc);\n+            trace ~= res;\n         }\n         return trace;\n     }\n@@ -307,7 +299,7 @@ private:\n     }\n \n     static char[] formatStackFrame(void* pc, char* symName,\n-                                   in char* fileName, uint lineNum)\n+                                   const scope char* fileName, uint lineNum)\n     {\n         import core.stdc.stdio : snprintf;\n         char[11] buf=void;"}, {"sha": "c9ee6ce5ca8151d64e01c6332a76c545019754e3", "filename": "libphobos/libdruntime/core/sys/windows/stat.d", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fstat.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fstat.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fstat.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -6,6 +6,7 @@ module core.sys.windows.stat;\n version (Windows):\n \n extern (C) nothrow @nogc:\n+@system:\n \n // Posix version is in core.sys.posix.sys.stat\n "}, {"sha": "97eb4bf1e11aac5e1c0c258d0ac1987ce3bbb7fa", "filename": "libphobos/libdruntime/core/sys/windows/stdc/time.d", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fstdc%2Ftime.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fstdc%2Ftime.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fstdc%2Ftime.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -0,0 +1,59 @@\n+/**\n+ * D header file for C99.\n+ *\n+ * $(C_HEADER_DESCRIPTION pubs.opengroup.org/onlinepubs/009695399/basedefs/_time.h.html, _time.h)\n+ *\n+ * Copyright: Copyright Sean Kelly 2005 - 2009.\n+ * License: Distributed under the\n+ *      $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost Software License 1.0).\n+ *    (See accompanying file LICENSE)\n+ * Authors:   Sean Kelly,\n+ *            Alex R\u00f8nne Petersen\n+ * Source:    $(DRUNTIMESRC core/stdc/_time.d)\n+ * Standards: ISO/IEC 9899:1999 (E)\n+ */\n+\n+module core.sys.windows.stdc.time;\n+\n+version (Windows):\n+\n+import core.stdc.config;\n+\n+extern (C):\n+@trusted: // There are only a few functions here that use unsafe C strings.\n+nothrow:\n+@nogc:\n+\n+///\n+struct tm\n+{\n+    int     tm_sec;     /// seconds after the minute - [0, 60]\n+    int     tm_min;     /// minutes after the hour - [0, 59]\n+    int     tm_hour;    /// hours since midnight - [0, 23]\n+    int     tm_mday;    /// day of the month - [1, 31]\n+    int     tm_mon;     /// months since January - [0, 11]\n+    int     tm_year;    /// years since 1900\n+    int     tm_wday;    /// days since Sunday - [0, 6]\n+    int     tm_yday;    /// days since January 1 - [0, 365]\n+    int     tm_isdst;   /// Daylight Saving Time flag\n+}\n+\n+///\n+alias c_long time_t;\n+///\n+alias c_long clock_t;\n+\n+enum clock_t CLOCKS_PER_SEC = 1000;\n+clock_t clock();\n+\n+///\n+void  tzset();                           // non-standard\n+///\n+void  _tzset();                          // non-standard\n+///\n+@system char* _strdate(return scope char* s);                 // non-standard\n+///\n+@system char* _strtime(return scope char* s);                 // non-standard\n+\n+///\n+extern __gshared const(char)*[2] tzname; // non-standard"}, {"sha": "42d2fa73cf8cfd25373398c5803d19b29c7bc939", "filename": "libphobos/libdruntime/core/sys/windows/subauth.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fsubauth.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fsubauth.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fsubauth.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -8,8 +8,9 @@\n  */\n module core.sys.windows.subauth;\n version (Windows):\n+@system:\n \n-private import core.sys.windows.ntdef, core.sys.windows.windef;\n+import core.sys.windows.ntdef, core.sys.windows.windef;\n \n /+\n alias LONG NTSTATUS;"}, {"sha": "fb4d1ee64ba93d783a933e5c03b423e77d78ebf0", "filename": "libphobos/libdruntime/core/sys/windows/threadaux.d", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fthreadaux.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fthreadaux.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fthreadaux.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -14,6 +14,7 @@\n  */\n module core.sys.windows.threadaux;\n version (Windows):\n+@system:\n \n import core.sys.windows.basetsd/+ : HANDLE+/;\n import core.sys.windows.winbase/+ : CloseHandle, GetCurrentThreadId, GetCurrentProcessId,"}, {"sha": "308c5a46cc140a0de2bd28970878ad23fdbd8761", "filename": "libphobos/libdruntime/core/sys/windows/tlhelp32.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Ftlhelp32.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Ftlhelp32.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Ftlhelp32.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -8,11 +8,12 @@\n  */\n module core.sys.windows.tlhelp32;\n version (Windows):\n+@system:\n pragma(lib, \"kernel32\");\n \n version (ANSI) {} else version = Unicode;\n \n-private import core.sys.windows.windef;\n+import core.sys.windows.windef;\n \n enum : uint {\n     HF32_DEFAULT = 1,"}, {"sha": "ea7863a97b6c945289ad9858d52c099b4c6aa596", "filename": "libphobos/libdruntime/core/sys/windows/tmschema.d", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Ftmschema.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Ftmschema.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Ftmschema.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -8,6 +8,7 @@\n  */\n module core.sys.windows.tmschema;\n version (Windows):\n+@system:\n \n /* BUTTON parts */\n enum {"}, {"sha": "1c3e4539f0171791059292cf4a9f374cddc4d67a", "filename": "libphobos/libdruntime/core/sys/windows/unknwn.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Funknwn.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Funknwn.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Funknwn.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -8,9 +8,10 @@\n  */\n module core.sys.windows.unknwn;\n version (Windows):\n+@system:\n \n import core.sys.windows.objfwd, core.sys.windows.windef, core.sys.windows.wtypes;\n-private import core.sys.windows.basetyps;\n+import core.sys.windows.basetyps;\n \n extern (Windows) {\n     void* MIDL_user_allocate(size_t);"}, {"sha": "7e8d4b9b7e09f933dea7617c0d9cea7fb80beae4", "filename": "libphobos/libdruntime/core/sys/windows/uuid.d", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fuuid.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fuuid.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fuuid.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -1,5 +1,6 @@\n module core.sys.windows.uuid;\n version (Windows):\n+@system:\n \n import core.sys.windows.basetyps;\n "}, {"sha": "3ffff20134735e534778821e07ed2acf4dc76ce1", "filename": "libphobos/libdruntime/core/sys/windows/vfw.d", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fvfw.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fvfw.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fvfw.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -9,6 +9,7 @@\n \n module core.sys.windows.vfw;\n version (Windows):\n+@system:\n \n version (ANSI) {} else version = Unicode;\n pragma(lib, \"vfw32\");"}, {"sha": "a392d591a4c8671b9530c9ca852f7d615c49cdfa", "filename": "libphobos/libdruntime/core/sys/windows/w32api.d", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fw32api.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fw32api.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fw32api.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -9,6 +9,7 @@\n  */\n module core.sys.windows.w32api;\n version (Windows):\n+@system:\n \n version (ANSI) {} else version = Unicode;\n \n@@ -24,7 +25,7 @@ enum __W32API_MINOR_VERSION = 17;\n  *  removed in order to simplify the bindings.\n  */\n  version (Windows10) {\n-    enum uint _WIN32_WINNT = 0x604;\n+    enum uint _WIN32_WINNT = 0xA00;\n } else version (Windows8_1) {    // also Windows2012R2\n     enum uint _WIN32_WINNT = 0x603;\n } else version (Windows8) {      // also Windows2012\n@@ -45,7 +46,9 @@ enum __W32API_MINOR_VERSION = 17;\n     enum uint _WIN32_WINNT = 0x501;\n }\n \n-version (IE10) {\n+version (IE11) {\n+    enum uint _WIN32_IE = 0xA00;\n+} else version (IE10) {\n     enum uint _WIN32_IE = 0xA00;\n } else version (IE9) {\n     enum uint _WIN32_IE = 0x900;\n@@ -61,6 +64,8 @@ version (IE10) {\n     enum uint _WIN32_IE = 0x600;\n } else version (IE56) {\n     enum uint _WIN32_IE = 0x560;\n+} else version (IE55) {\n+    enum uint _WIN32_IE = 0x550;\n } else version (IE501) {\n     enum uint _WIN32_IE = 0x501;\n } else version (IE5) {\n@@ -71,6 +76,8 @@ version (IE10) {\n     enum uint _WIN32_IE = 0x400;\n } else version (IE3) {\n     enum uint _WIN32_IE = 0x300;\n+} else static if (_WIN32_WINNT >= 0x500) {\n+    enum uint _WIN32_IE = 0x600;\n } else static if (_WIN32_WINNT >= 0x410) {\n     enum uint _WIN32_IE = 0x400;\n } else {"}, {"sha": "a9844de450bc3a13cf790fb503999f01f8e36731", "filename": "libphobos/libdruntime/core/sys/windows/winbase.d", "status": "modified", "additions": 35, "deletions": 4, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fwinbase.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fwinbase.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fwinbase.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -8,6 +8,7 @@\n  */\n module core.sys.windows.winbase;\n version (Windows):\n+@system:\n \n version (ANSI) {} else version = Unicode;\n pragma(lib, \"kernel32\");\n@@ -33,7 +34,7 @@ int wWinMain(HINSTANCE, HINSTANCE, LPWSTR, int);\n */\n \n import core.sys.windows.windef, core.sys.windows.winver;\n-private import core.sys.windows.basetyps, core.sys.windows.w32api, core.sys.windows.winnt;\n+import core.sys.windows.basetyps, core.sys.windows.w32api, core.sys.windows.winnt;\n \n // FIXME:\n //alias void va_list;\n@@ -1285,9 +1286,17 @@ struct WIN32_STREAM_ID {\n }\n alias WIN32_STREAM_ID* LPWIN32_STREAM_ID;\n \n-enum FINDEX_INFO_LEVELS {\n-    FindExInfoStandard,\n-    FindExInfoMaxInfoLevel\n+static if (_WIN32_WINNT >= 0x601) {\n+    enum FINDEX_INFO_LEVELS {\n+        FindExInfoStandard,\n+        FindExInfoBasic,\n+        FindExInfoMaxInfoLevel,\n+    }\n+} else {\n+    enum FINDEX_INFO_LEVELS {\n+        FindExInfoStandard,\n+        FindExInfoMaxInfoLevel,\n+    }\n }\n \n enum FINDEX_SEARCH_OPS {\n@@ -1581,6 +1590,14 @@ static if (_WIN32_WINNT >= 0x410) {\n     alias DWORD EXECUTION_STATE;\n }\n \n+// CreateSymbolicLink\n+static if (_WIN32_WINNT >= 0x600) {\n+    enum {\n+        SYMBOLIC_LINK_FLAG_DIRECTORY = 0x1,\n+        SYMBOLIC_LINK_FLAG_ALLOW_UNPRIVILEGED_CREATE = 0x2\n+    }\n+}\n+\n // Callbacks\n extern (Windows) {\n     alias DWORD function(LPVOID) LPTHREAD_START_ROUTINE;\n@@ -2242,6 +2259,7 @@ WINBASEAPI BOOL WINAPI SetEvent(HANDLE);\n     BOOL IsValidAcl(PACL);\n     BOOL IsValidSecurityDescriptor(PSECURITY_DESCRIPTOR);\n     BOOL IsValidSid(PSID);\n+    BOOL CreateWellKnownSid(WELL_KNOWN_SID_TYPE, PSID, PSID, PDWORD);\n     BOOL LockFileEx(HANDLE, DWORD, DWORD, DWORD, DWORD, LPOVERLAPPED);\n     BOOL LogonUserA(LPSTR, LPSTR, LPSTR, DWORD, DWORD, PHANDLE);\n     BOOL LogonUserW(LPWSTR, LPWSTR, LPWSTR, DWORD, DWORD, PHANDLE);\n@@ -2471,6 +2489,11 @@ WINBASEAPI BOOL WINAPI SetEvent(HANDLE);\n     static if (_WIN32_WINNT >= 0x510) {\n         VOID RestoreLastError(DWORD);\n     }\n+\n+    static if (_WIN32_WINNT >= 0x600) {\n+        BOOL CreateSymbolicLinkA(LPCSTR, LPCSTR, DWORD);\n+        BOOL CreateSymbolicLinkW(LPCWSTR, LPCWSTR, DWORD);\n+    }\n }\n \n // For compatibility with old core.sys.windows.windows:\n@@ -2656,6 +2679,10 @@ version (Unicode) {\n         alias GetDllDirectoryW GetDllDirectory;\n     }\n \n+    static if (_WIN32_WINNT >= 0x600) {\n+        alias CreateSymbolicLinkW CreateSymbolicLink;\n+    }\n+\n } else {\n     //alias STARTUPINFOA STARTUPINFO;\n     alias WIN32_FIND_DATAA WIN32_FIND_DATA;\n@@ -2830,6 +2857,10 @@ version (Unicode) {\n         alias SetDllDirectoryA SetDllDirectory;\n         alias SetFirmwareEnvironmentVariableA SetFirmwareEnvironmentVariable;\n     }\n+\n+    static if (_WIN32_WINNT >= 0x600) {\n+        alias CreateSymbolicLinkA CreateSymbolicLink;\n+    }\n }\n \n alias STARTUPINFO* LPSTARTUPINFO;"}, {"sha": "27189038826c22dd8046d7fb276f0324bd811906", "filename": "libphobos/libdruntime/core/sys/windows/winber.d", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fwinber.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fwinber.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fwinber.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -9,6 +9,7 @@\n  */\n module core.sys.windows.winber;\n version (Windows):\n+@system:\n \n /* Comment from MinGW\n   winber.h - Header file for the Windows LDAP Basic Encoding Rules API"}, {"sha": "67bd17e7d09cecd04b39466d93bc19177cd6dded", "filename": "libphobos/libdruntime/core/sys/windows/wincon.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fwincon.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fwincon.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fwincon.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -8,11 +8,12 @@\n  */\n module core.sys.windows.wincon;\n version (Windows):\n+@system:\n \n version (ANSI) {} else version = Unicode;\n pragma(lib, \"kernel32\");\n \n-private import core.sys.windows.w32api, core.sys.windows.windef;\n+import core.sys.windows.w32api, core.sys.windows.windef;\n \n // FIXME: clean up Windows version support\n "}, {"sha": "94951057e688167ffa0fcb803eda88db4b838b23", "filename": "libphobos/libdruntime/core/sys/windows/wincrypt.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fwincrypt.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fwincrypt.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fwincrypt.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -9,11 +9,12 @@\n  */\n module core.sys.windows.wincrypt;\n version (Windows):\n+@system:\n pragma(lib, \"advapi32\");\n \n version (ANSI) {} else version = Unicode;\n \n-private import core.sys.windows.w32api, core.sys.windows.winbase, core.sys.windows.windef;\n+import core.sys.windows.w32api, core.sys.windows.winbase, core.sys.windows.windef;\n \n /* FIXME:\n  *  Types of some constants"}, {"sha": "f79b593c518ab5f78db9cc4f89c7c2c42c9e3563", "filename": "libphobos/libdruntime/core/sys/windows/windef.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fwindef.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fwindef.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fwindef.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -9,9 +9,10 @@\n  */\n module core.sys.windows.windef;\n version (Windows):\n+@system:\n \n public import core.sys.windows.winnt;\n-private import core.sys.windows.w32api;\n+import core.sys.windows.w32api;\n \n enum size_t MAX_PATH = 260;\n "}, {"sha": "8b8c8ab35543441a182f0db48a9fe695b4572ccc", "filename": "libphobos/libdruntime/core/sys/windows/windows.d", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fwindows.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fwindows.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fwindows.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -8,6 +8,7 @@\n  */\n module core.sys.windows.windows;\n version (Windows):\n+@system:\n \n /*\n     windows.h - main header file for the Win32 API"}, {"sha": "ab987a3e81a4802b0df66b87ff24da5e759cc54a", "filename": "libphobos/libdruntime/core/sys/windows/winerror.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fwinerror.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fwinerror.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fwinerror.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -8,12 +8,13 @@\n  */\n module core.sys.windows.winerror;\n version (Windows):\n+@system:\n \n /* Comments from the Mingw header:\n  * WAIT_TIMEOUT is also defined in winbase.h\n  */\n \n-private import core.sys.windows.windef;\n+import core.sys.windows.windef;\n \n alias int SCODE; // was in core.sys.windows.wtypes.\n "}, {"sha": "4fc125c62257812648e7c4f0f719e58c0b55645b", "filename": "libphobos/libdruntime/core/sys/windows/wingdi.d", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fwingdi.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fwingdi.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fwingdi.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -8,13 +8,14 @@\n  */\n module core.sys.windows.wingdi;\n version (Windows):\n+@system:\n \n version (ANSI) {} else version = Unicode;\n pragma(lib, \"gdi32\");\n \n // FIXME: clean up Windows version support\n \n-private import core.sys.windows.w32api, core.sys.windows.windef, core.sys.windows.winver;\n+import core.sys.windows.w32api, core.sys.windows.windef, core.sys.windows.winver;\n \n // BITMAPINFOHEADER.biCompression\n enum : DWORD {\n@@ -2057,13 +2058,13 @@ struct RGBQUAD {\n     BYTE rgbGreen;\n     BYTE rgbRed;\n     BYTE rgbReserved;\n-};\n+}\n alias RGBQUAD* LPRGBQUAD;\n \n struct BITMAPINFO {\n     BITMAPINFOHEADER bmiHeader;\n     RGBQUAD[1]       bmiColors;\n-};\n+}\n alias BITMAPINFO* PBITMAPINFO, LPBITMAPINFO;\n \n alias int FXPT16DOT16;"}, {"sha": "e919635e4ed3a5b36d5db5ae797d9bca97693842", "filename": "libphobos/libdruntime/core/sys/windows/winhttp.d", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fwinhttp.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fwinhttp.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fwinhttp.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -8,6 +8,7 @@\n  */\n module core.sys.windows.winhttp;\n version (Windows):\n+@system:\n pragma(lib, \"winhttp\");\n // FIXME: Grouping of constants. Windows SDK doesn't make this entirely clear\n // FIXME: Verify WINHTTP_STATUS_CALLBACK function declaration works correctly"}, {"sha": "64b95c4c00e1c4e798201be85bda0b02ed2150ab", "filename": "libphobos/libdruntime/core/sys/windows/wininet.d", "status": "modified", "additions": 223, "deletions": 13, "changes": 236, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fwininet.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fwininet.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fwininet.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -9,6 +9,7 @@\n  */\n module core.sys.windows.wininet;\n version (Windows):\n+@system:\n \n version (ANSI) {} else version = Unicode;\n pragma(lib, \"wininet\");\n@@ -17,6 +18,11 @@ pragma(lib, \"wininet\");\n \n import core.sys.windows.winbase, core.sys.windows.windef;\n \n+// From Winineti.h\n+enum {\n+    INTERNET_FLAG_BGUPDATE         = 0x00000008,\n+}\n+\n enum {\n     INTERNET_INVALID_PORT_NUMBER =    0,\n     INTERNET_DEFAULT_FTP_PORT    =   21,\n@@ -46,8 +52,18 @@ enum : DWORD {\n }\n \n enum {\n-    INTERNET_REQFLAG_FROM_CACHE = 1,\n-    INTERNET_REQFLAG_ASYNC      = 2\n+    INTERNET_REQFLAG_FROM_CACHE           = 0x00000001,\n+    INTERNET_REQFLAG_ASYNC                = 0x00000002,\n+    INTERNET_REQFLAG_VIA_PROXY            = 0x00000004,\n+    INTERNET_REQFLAG_NO_HEADERS           = 0x00000008,\n+    INTERNET_REQFLAG_PASSIVE              = 0x00000010,\n+    INTERNET_REQFLAG_CACHE_WRITE_DISABLED = 0x00000040,\n+    INTERNET_REQFLAG_NET_TIMEOUT          = 0x00000080,\n+}\n+\n+enum {\n+    INTERNET_FLAG_IDN_DIRECT = 0x00000001,\n+    INTERNET_FLAG_IDN_PROXY  = 0x00000002\n }\n \n enum DWORD\n@@ -59,13 +75,16 @@ enum DWORD\n     INTERNET_FLAG_NO_CACHE_WRITE           = 0x04000000,\n     INTERNET_FLAG_DONT_CACHE               = INTERNET_FLAG_NO_CACHE_WRITE,\n     INTERNET_FLAG_MAKE_PERSISTENT          = 0x02000000,\n-    INTERNET_FLAG_OFFLINE                  = 0x01000000,\n+    INTERNET_FLAG_FROM_CACHE               = 0x01000000,\n+    INTERNET_FLAG_OFFLINE                  = INTERNET_FLAG_FROM_CACHE,\n     INTERNET_FLAG_SECURE                   = 0x00800000,\n     INTERNET_FLAG_KEEP_CONNECTION          = 0x00400000,\n     INTERNET_FLAG_NO_AUTO_REDIRECT         = 0x00200000,\n     INTERNET_FLAG_READ_PREFETCH            = 0x00100000,\n     INTERNET_FLAG_NO_COOKIES               = 0x00080000,\n     INTERNET_FLAG_NO_AUTH                  = 0x00040000,\n+    INTERNET_FLAG_RESTRICTED_ZONE          = 0x00020000,\n+    INTERNET_FLAG_CACHE_IF_NET_FAIL        = 0x00010000,\n     INTERNET_FLAG_IGNORE_REDIRECT_TO_HTTP  = 0x00008000,\n     INTERNET_FLAG_IGNORE_REDIRECT_TO_HTTPS = 0x00004000,\n     INTERNET_FLAG_IGNORE_CERT_DATE_INVALID = 0x00002000,\n@@ -74,14 +93,55 @@ enum DWORD\n     INTERNET_FLAG_HYPERLINK                = 0x00000400,\n     INTERNET_FLAG_NO_UI                    = 0x00000200,\n     INTERNET_FLAG_PRAGMA_NOCACHE           = 0x00000100,\n-    INTERNET_FLAG_MUST_CACHE_REQUEST       = 0x00000010,\n+    INTERNET_FLAG_CACHE_ASYNC              = 0x00000080,\n+    INTERNET_FLAG_FORMS_SUBMIT             = 0x00000040,\n+    INTERNET_FLAG_FWD_BACK                 = 0x00000020,\n+    INTERNET_FLAG_NEED_FILE                = 0x00000010,\n+    INTERNET_FLAG_MUST_CACHE_REQUEST       = INTERNET_FLAG_NEED_FILE,\n     INTERNET_FLAG_TRANSFER_ASCII           = FTP_TRANSFER_TYPE_ASCII,\n     INTERNET_FLAG_TRANSFER_BINARY          = FTP_TRANSFER_TYPE_BINARY,\n \n-    SECURITY_INTERNET_MASK                 = 0x0000F000,\n+    SECURITY_INTERNET_MASK                 = INTERNET_FLAG_IGNORE_CERT_CN_INVALID   |\n+                                             INTERNET_FLAG_IGNORE_CERT_DATE_INVALID |\n+                                             INTERNET_FLAG_IGNORE_REDIRECT_TO_HTTPS |\n+                                             INTERNET_FLAG_IGNORE_REDIRECT_TO_HTTP,\n+\n     SECURITY_SET_MASK                      = SECURITY_INTERNET_MASK,\n \n-    INTERNET_FLAGS_MASK                    = 0xFFFCFE13,\n+    INTERNET_FLAGS_MASK                    = INTERNET_FLAG_RELOAD\n+                                            | INTERNET_FLAG_RAW_DATA\n+                                            | INTERNET_FLAG_EXISTING_CONNECT\n+                                            | INTERNET_FLAG_ASYNC\n+                                            | INTERNET_FLAG_PASSIVE\n+                                            | INTERNET_FLAG_NO_CACHE_WRITE\n+                                            | INTERNET_FLAG_MAKE_PERSISTENT\n+                                            | INTERNET_FLAG_FROM_CACHE\n+                                            | INTERNET_FLAG_SECURE\n+                                            | INTERNET_FLAG_KEEP_CONNECTION\n+                                            | INTERNET_FLAG_NO_AUTO_REDIRECT\n+                                            | INTERNET_FLAG_READ_PREFETCH\n+                                            | INTERNET_FLAG_NO_COOKIES\n+                                            | INTERNET_FLAG_NO_AUTH\n+                                            | INTERNET_FLAG_CACHE_IF_NET_FAIL\n+                                            | SECURITY_INTERNET_MASK\n+                                            | INTERNET_FLAG_RESYNCHRONIZE\n+                                            | INTERNET_FLAG_HYPERLINK\n+                                            | INTERNET_FLAG_NO_UI\n+                                            | INTERNET_FLAG_PRAGMA_NOCACHE\n+                                            | INTERNET_FLAG_CACHE_ASYNC\n+                                            | INTERNET_FLAG_FORMS_SUBMIT\n+                                            | INTERNET_FLAG_NEED_FILE\n+                                            | INTERNET_FLAG_RESTRICTED_ZONE\n+                                            | INTERNET_FLAG_TRANSFER_BINARY\n+                                            | INTERNET_FLAG_TRANSFER_ASCII\n+                                            | INTERNET_FLAG_FWD_BACK\n+                                            | INTERNET_FLAG_BGUPDATE,\n+\n+    INTERNET_ERROR_MASK_INSERT_CDROM                      = 0x1,\n+    INTERNET_ERROR_MASK_COMBINED_SEC_CERT                 = 0x2,\n+    INTERNET_ERROR_MASK_NEED_MSN_SSPI_PKG                 = 0X4,\n+    INTERNET_ERROR_MASK_LOGIN_FAILURE_DISPLAY_ENTITY_BODY = 0x8,\n+\n     INTERNET_OPTIONS_MASK                  = ~INTERNET_FLAGS_MASK;\n \n enum INTERNET_NO_CALLBACK = 0;\n@@ -122,9 +182,8 @@ enum {\n     INTERNET_OPTION_CONTROL_RECEIVE_TIMEOUT  = INTERNET_OPTION_RECEIVE_TIMEOUT,\n     INTERNET_OPTION_DATA_SEND_TIMEOUT,\n     INTERNET_OPTION_DATA_RECEIVE_TIMEOUT,\n-    INTERNET_OPTION_HANDLE_TYPE,\n-    INTERNET_OPTION_CONTEXT_VALUE,\n-    INTERNET_OPTION_LISTEN_TIMEOUT,\n+    INTERNET_OPTION_HANDLE_TYPE                 = 9,\n+    INTERNET_OPTION_LISTEN_TIMEOUT              = 11,\n     INTERNET_OPTION_READ_BUFFER_SIZE,\n     INTERNET_OPTION_WRITE_BUFFER_SIZE,       // = 13\n     INTERNET_OPTION_ASYNC_ID                    = 15,\n@@ -152,9 +211,73 @@ enum {\n     INTERNET_OPTION_END_BROWSER_SESSION,\n     INTERNET_OPTION_PROXY_USERNAME,\n     INTERNET_OPTION_PROXY_PASSWORD,          // = 44\n-    INTERNET_FIRST_OPTION                       = INTERNET_OPTION_CALLBACK,\n-    // why?\n-    INTERNET_LAST_OPTION                        = INTERNET_OPTION_USER_AGENT\n+    INTERNET_OPTION_CONTEXT_VALUE          = 45,\n+    INTERNET_OPTION_CONNECT_LIMIT          = 46,\n+    INTERNET_OPTION_SECURITY_SELECT_CLIENT_CERT= 47,\n+    INTERNET_OPTION_POLICY                 = 48,\n+    INTERNET_OPTION_DISCONNECTED_TIMEOUT   = 49,\n+    INTERNET_OPTION_CONNECTED_STATE        = 50,\n+    INTERNET_OPTION_IDLE_STATE             = 51,\n+    INTERNET_OPTION_OFFLINE_SEMANTICS      = 52,\n+    INTERNET_OPTION_SECONDARY_CACHE_KEY    = 53,\n+    INTERNET_OPTION_CALLBACK_FILTER        = 54,\n+    INTERNET_OPTION_CONNECT_TIME           = 55,\n+    INTERNET_OPTION_SEND_THROUGHPUT        = 56,\n+    INTERNET_OPTION_RECEIVE_THROUGHPUT     = 57,\n+    INTERNET_OPTION_REQUEST_PRIORITY       = 58,\n+    INTERNET_OPTION_HTTP_VERSION           = 59,\n+    INTERNET_OPTION_RESET_URLCACHE_SESSION = 60,\n+    INTERNET_OPTION_ERROR_MASK             = 62,\n+    INTERNET_OPTION_FROM_CACHE_TIMEOUT     = 63,\n+    INTERNET_OPTION_BYPASS_EDITED_ENTRY    = 64,\n+    INTERNET_OPTION_HTTP_DECODING          = 65,\n+    INTERNET_OPTION_DIAGNOSTIC_SOCKET_INFO = 67,\n+    INTERNET_OPTION_CODEPAGE               = 68,\n+    INTERNET_OPTION_CACHE_TIMESTAMPS       = 69,\n+    INTERNET_OPTION_DISABLE_AUTODIAL       = 70,\n+    INTERNET_OPTION_MAX_CONNS_PER_SERVER    = 73,\n+    INTERNET_OPTION_MAX_CONNS_PER_1_0_SERVER= 74,\n+    INTERNET_OPTION_PER_CONNECTION_OPTION  = 75,\n+    INTERNET_OPTION_DIGEST_AUTH_UNLOAD            = 76,\n+    INTERNET_OPTION_IGNORE_OFFLINE          = 77,\n+    INTERNET_OPTION_IDENTITY                = 78,\n+    INTERNET_OPTION_REMOVE_IDENTITY         = 79,\n+    INTERNET_OPTION_ALTER_IDENTITY          = 80,\n+    INTERNET_OPTION_SUPPRESS_BEHAVIOR       = 81,\n+    INTERNET_OPTION_AUTODIAL_MODE           = 82,\n+    INTERNET_OPTION_AUTODIAL_CONNECTION     = 83,\n+    INTERNET_OPTION_CLIENT_CERT_CONTEXT     = 84,\n+    INTERNET_OPTION_AUTH_FLAGS              = 85,\n+    INTERNET_OPTION_COOKIES_3RD_PARTY       = 86,\n+    INTERNET_OPTION_DISABLE_PASSPORT_AUTH   = 87,\n+    INTERNET_OPTION_SEND_UTF8_SERVERNAME_TO_PROXY        = 88,\n+    INTERNET_OPTION_EXEMPT_CONNECTION_LIMIT = 89,\n+    INTERNET_OPTION_ENABLE_PASSPORT_AUTH    = 90,\n+    INTERNET_OPTION_HIBERNATE_INACTIVE_WORKER_THREADS      = 91,\n+    INTERNET_OPTION_ACTIVATE_WORKER_THREADS                = 92,\n+    INTERNET_OPTION_RESTORE_WORKER_THREAD_DEFAULTS         = 93,\n+    INTERNET_OPTION_SOCKET_SEND_BUFFER_LENGTH              = 94,\n+    INTERNET_OPTION_PROXY_SETTINGS_CHANGED                 = 95,\n+    INTERNET_OPTION_DATAFILE_EXT                           = 96,\n+    INTERNET_OPTION_CODEPAGE_PATH               = 100,\n+    INTERNET_OPTION_CODEPAGE_EXTRA              = 101,\n+    INTERNET_OPTION_IDN                         = 102,\n+    INTERNET_OPTION_MAX_CONNS_PER_PROXY         = 103,\n+    INTERNET_OPTION_SUPPRESS_SERVER_AUTH        = 104,\n+    INTERNET_OPTION_SERVER_CERT_CHAIN_CONTEXT   = 105,\n+    INTERNET_OPTION_ENABLE_REDIRECT_CACHE_READ  = 122,\n+    INTERNET_OPTION_COMPRESSED_CONTENT_LENGTH   = 147,\n+    INTERNET_OPTION_ENABLE_HTTP_PROTOCOL        = 148,\n+    INTERNET_OPTION_HTTP_PROTOCOL_USED          = 149,\n+    INTERNET_OPTION_ENCODE_EXTRA                = 155,\n+    INTERNET_OPTION_HSTS                        = 157,\n+    INTERNET_OPTION_ENTERPRISE_CONTEXT          = 159,\n+    INTERNET_OPTION_CONNECTION_FILTER           = 162,\n+    INTERNET_OPTION_REFERER_TOKEN_BINDING_HOSTNAME         = 163,\n+    INTERNET_OPTION_TOKEN_BINDING_PUBLIC_KEY    = 181,\n+    INTERNET_OPTION_COOKIES_SAME_SITE_LEVEL     = 187,\n+    INTERNET_FIRST_OPTION                  = INTERNET_OPTION_CALLBACK,\n+    INTERNET_LAST_OPTION                   = INTERNET_OPTION_COOKIES_SAME_SITE_LEVEL,\n }\n \n enum INTERNET_PRIORITY_FOREGROUND = 1000;\n@@ -641,8 +764,11 @@ enum INTERNET_SCHEME {\n     INTERNET_SCHEME_NEWS,\n     INTERNET_SCHEME_MAILTO,\n     INTERNET_SCHEME_SOCKS,\n+    INTERNET_SCHEME_JAVASCRIPT,\n+    INTERNET_SCHEME_VBSCRIPT,\n+    INTERNET_SCHEME_RES,\n     INTERNET_SCHEME_FIRST = INTERNET_SCHEME_FTP,\n-    INTERNET_SCHEME_LAST = INTERNET_SCHEME_SOCKS\n+    INTERNET_SCHEME_LAST = INTERNET_SCHEME_RES\n }\n alias INTERNET_SCHEME* LPINTERNET_SCHEME;\n \n@@ -652,6 +778,14 @@ struct INTERNET_ASYNC_RESULT {\n }\n alias INTERNET_ASYNC_RESULT* LPINTERNET_ASYNC_RESULT;\n \n+struct INTERNET_DIAGNOSTIC_SOCKET_INFO {\n+    DWORD_PTR Socket;\n+    DWORD     SourcePort;\n+    DWORD     DestPort;\n+    DWORD     Flags;\n+}\n+alias INTERNET_DIAGNOSTIC_SOCKET_INFO* LPINTERNET_DIAGNOSTIC_SOCKET_INFO;\n+\n struct INTERNET_PREFETCH_STATUS {\n     DWORD dwStatus;\n     DWORD dwSize;\n@@ -665,6 +799,74 @@ struct INTERNET_PROXY_INFO {\n }\n alias INTERNET_PROXY_INFO* LPINTERNET_PROXY_INFO;\n \n+struct INTERNET_PER_CONN_OPTIONA {\n+    DWORD   dwOption;\n+    union {\n+        DWORD    dwValue;\n+        LPSTR    pszValue;\n+        FILETIME ftValue;\n+    }\n+}\n+alias INTERNET_PER_CONN_OPTIONA* LPINTERNET_PER_CONN_OPTIONA;\n+\n+struct INTERNET_PER_CONN_OPTIONW {\n+    DWORD   dwOption;\n+    union {\n+        DWORD    dwValue;\n+        LPWSTR   pszValue;\n+        FILETIME ftValue;\n+    }\n+}\n+alias INTERNET_PER_CONN_OPTIONW* LPINTERNET_PER_CONN_OPTIONW;\n+\n+struct INTERNET_PER_CONN_OPTION_LISTA {\n+    DWORD   dwSize;\n+    LPSTR   pszConnection;\n+    DWORD   dwOptionCount;\n+    DWORD   dwOptionError;\n+    LPINTERNET_PER_CONN_OPTIONA  pOptions;\n+}\n+alias INTERNET_PER_CONN_OPTION_LISTA* LPINTERNET_PER_CONN_OPTION_LISTA;\n+\n+struct INTERNET_PER_CONN_OPTION_LISTW {\n+    DWORD   dwSize;\n+    LPWSTR  pszConnection;\n+    DWORD   dwOptionCount;\n+    DWORD   dwOptionError;\n+    LPINTERNET_PER_CONN_OPTIONW  pOptions;\n+}\n+alias INTERNET_PER_CONN_OPTION_LISTW* LPINTERNET_PER_CONN_OPTION_LISTW;\n+\n+enum {\n+    INTERNET_PER_CONN_FLAGS                        = 1,\n+    INTERNET_PER_CONN_PROXY_SERVER                 = 2,\n+    INTERNET_PER_CONN_PROXY_BYPASS                 = 3,\n+    INTERNET_PER_CONN_AUTOCONFIG_URL               = 4,\n+    INTERNET_PER_CONN_AUTODISCOVERY_FLAGS          = 5,\n+    INTERNET_PER_CONN_AUTOCONFIG_SECONDARY_URL     = 6,\n+    INTERNET_PER_CONN_AUTOCONFIG_RELOAD_DELAY_MINS = 7,\n+    INTERNET_PER_CONN_AUTOCONFIG_LAST_DETECT_TIME  = 8,\n+    INTERNET_PER_CONN_AUTOCONFIG_LAST_DETECT_URL   = 9,\n+    INTERNET_PER_CONN_FLAGS_UI                     = 10,\n+}\n+\n+enum {\n+    PROXY_TYPE_DIRECT                              = 0x00000001,\n+    PROXY_TYPE_PROXY                               = 0x00000002,\n+    PROXY_TYPE_AUTO_PROXY_URL                      = 0x00000004,\n+    PROXY_TYPE_AUTO_DETECT                         = 0x00000008,\n+}\n+\n+enum {\n+    AUTO_PROXY_FLAG_USER_SET                       = 0x00000001,\n+    AUTO_PROXY_FLAG_ALWAYS_DETECT                  = 0x00000002,\n+    AUTO_PROXY_FLAG_DETECTION_RUN                  = 0x00000004,\n+    AUTO_PROXY_FLAG_MIGRATED                       = 0x00000008,\n+    AUTO_PROXY_FLAG_DONT_CACHE_PROXY_RESULT        = 0x00000010,\n+    AUTO_PROXY_FLAG_CACHE_INIT_RUN                 = 0x00000020,\n+    AUTO_PROXY_FLAG_DETECTION_SUSPECT              = 0x00000040,\n+}\n+\n struct INTERNET_VERSION_INFO {\n     DWORD dwMajorVersion;\n     DWORD dwMinorVersion;\n@@ -1129,6 +1331,10 @@ extern (Windows) {\n }\n \n version (Unicode) {\n+    alias INTERNET_PER_CONN_OPTIONW INTERNET_PER_CONN_OPTION;\n+    alias LPINTERNET_PER_CONN_OPTIONW LPINTERNET_PER_CONN_OPTION;\n+    alias INTERNET_PER_CONN_OPTION_LISTW INTERNET_PER_CONN_OPTION_LIST;\n+    alias LPINTERNET_PER_CONN_OPTION_LISTW LPINTERNET_PER_CONN_OPTION_LIST;\n     alias URL_COMPONENTSW URL_COMPONENTS;\n     alias LPURL_COMPONENTSW LPURL_COMPONENTS;\n     alias GOPHER_FIND_DATAW GOPHER_FIND_DATA;\n@@ -1187,6 +1393,10 @@ version (Unicode) {\n     alias GetUrlCacheGroupAttributeW GetUrlCacheGroupAttribute;\n     alias SetUrlCacheGroupAttributeW SetUrlCacheGroupAttribute;\n } else {\n+    alias INTERNET_PER_CONN_OPTIONA INTERNET_PER_CONN_OPTION;\n+    alias LPINTERNET_PER_CONN_OPTIONA LPINTERNET_PER_CONN_OPTION;\n+    alias INTERNET_PER_CONN_OPTION_LISTA INTERNET_PER_CONN_OPTION_LIST;\n+    alias LPINTERNET_PER_CONN_OPTION_LISTA LPINTERNET_PER_CONN_OPTION_LIST;\n     alias URL_COMPONENTSA URL_COMPONENTS;\n     alias LPURL_COMPONENTSA LPURL_COMPONENTS;\n     alias GOPHER_FIND_DATAA GOPHER_FIND_DATA;"}, {"sha": "84d498e772fe90248f2ff2c98ac4842bba441484", "filename": "libphobos/libdruntime/core/sys/windows/winioctl.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fwinioctl.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fwinioctl.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fwinioctl.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -9,10 +9,11 @@\n  */\n module core.sys.windows.winioctl;\n version (Windows):\n+@system:\n \n // FIXME: check types of some constants\n \n-private import core.sys.windows.basetyps, core.sys.windows.windef;\n+import core.sys.windows.basetyps, core.sys.windows.windef;\n \n enum size_t\n     HIST_NO_OF_BUCKETS = 24,"}, {"sha": "78578dd51dd2708b74464ecbda11ccea01362e4a", "filename": "libphobos/libdruntime/core/sys/windows/winldap.d", "status": "modified", "additions": 107, "deletions": 106, "changes": 213, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fwinldap.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fwinldap.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fwinldap.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -9,6 +9,7 @@\n  */\n module core.sys.windows.winldap;\n version (Windows):\n+@system:\n \n version (ANSI) {} else version = Unicode;\n \n@@ -30,7 +31,7 @@ version (ANSI) {} else version = Unicode;\n */\n \n import core.sys.windows.schannel, core.sys.windows.winber;\n-private import core.sys.windows.wincrypt, core.sys.windows.windef;\n+import core.sys.windows.wincrypt, core.sys.windows.windef;\n \n //align(4):\n \n@@ -460,7 +461,7 @@ struct LDAPVLVInfo {\n  * Under Microsoft WinLDAP the function ldap_error is only stub.\n  * This macro uses LDAP structure to get error string and pass it to the user.\n  */\n-private extern (C) int printf(in char* format, ...);\n+private extern (C) int printf(const scope char* format, ...);\n int ldap_perror(LDAP* handle, char* message) {\n     return printf(\"%s: %s\\n\", message, handle.ld_error);\n }\n@@ -491,111 +492,111 @@ extern (C) {\n     ULONG ldap_controls_freeW(LDAPControlW**);\n     ULONG ldap_free_controlsA(LDAPControlA**);\n     ULONG ldap_free_controlsW(LDAPControlW**);\n-    ULONG ldap_sasl_bindA(LDAP*, PCHAR, PCHAR, BERVAL*, PLDAPControlA*,\n+    ULONG ldap_sasl_bindA(LDAP*, PCSTR, PCSTR, BERVAL*, PLDAPControlA*,\n       PLDAPControlA*, int*);\n-    ULONG ldap_sasl_bindW(LDAP*, PWCHAR, PWCHAR, BERVAL*, PLDAPControlW*,\n+    ULONG ldap_sasl_bindW(LDAP*, PCWSTR, PCWSTR, BERVAL*, PLDAPControlW*,\n       PLDAPControlW*, int*);\n-    ULONG ldap_sasl_bind_sA(LDAP*, PCHAR, PCHAR, BERVAL*, PLDAPControlA*,\n+    ULONG ldap_sasl_bind_sA(LDAP*, PCSTR, PCSTR, BERVAL*, PLDAPControlA*,\n       PLDAPControlA*, PBERVAL*);\n-    ULONG ldap_sasl_bind_sW(LDAP*, PWCHAR, PWCHAR, BERVAL*, PLDAPControlW*,\n+    ULONG ldap_sasl_bind_sW(LDAP*, PCWSTR, PCWSTR, BERVAL*, PLDAPControlW*,\n       PLDAPControlW*, PBERVAL*);\n-    ULONG ldap_simple_bindA(LDAP*, PCHAR, PCHAR);\n-    ULONG ldap_simple_bindW(LDAP*, PWCHAR, PWCHAR);\n-    ULONG ldap_simple_bind_sA(LDAP*, PCHAR, PCHAR);\n-    ULONG ldap_simple_bind_sW(LDAP*, PWCHAR, PWCHAR);\n+    ULONG ldap_simple_bindA(LDAP*, PSTR, PSTR);\n+    ULONG ldap_simple_bindW(LDAP*, PWSTR, PWSTR);\n+    ULONG ldap_simple_bind_sA(LDAP*, PSTR, PSTR);\n+    ULONG ldap_simple_bind_sW(LDAP*, PWSTR, PWSTR);\n     ULONG ldap_unbind(LDAP*);\n     ULONG ldap_unbind_s(LDAP*);\n-    ULONG ldap_search_extA(LDAP*, PCHAR, ULONG, PCHAR, PCHAR[], ULONG,\n+    ULONG ldap_search_extA(LDAP*, PCSTR, ULONG, PCSTR, PZPSTR, ULONG,\n+      PLDAPControlA*, PLDAPControlA*, ULONG, ULONG, ULONG*);\n+    ULONG ldap_search_extW(LDAP*, PCWSTR, ULONG, PCWSTR, PZPWSTR, ULONG,\n       PLDAPControlW*, PLDAPControlW*, ULONG, ULONG, ULONG*);\n-    ULONG ldap_search_extW(LDAP*, PWCHAR, ULONG, PWCHAR, PWCHAR[], ULONG,\n-      PLDAPControlW*, PLDAPControlW*, ULONG, ULONG, ULONG*);\n-    ULONG ldap_search_ext_sA(LDAP*, PCHAR, ULONG, PCHAR, PCHAR[], ULONG,\n-      PLDAPControlA*, PLDAPControlA*, LDAP_TIMEVAL*, ULONG, LDAPMessage**);\n-    ULONG ldap_search_ext_sW(LDAP*, PWCHAR, ULONG, PWCHAR, PWCHAR[], ULONG,\n-      PLDAPControlW*, PLDAPControlW*, LDAP_TIMEVAL*, ULONG, LDAPMessage**);\n-    ULONG ldap_searchA(LDAP*, PCHAR, ULONG, PCHAR, PCHAR[], ULONG);\n-    ULONG ldap_searchW(LDAP*, PWCHAR, ULONG, PWCHAR, PWCHAR[], ULONG);\n-    ULONG ldap_search_sA(LDAP*, PCHAR, ULONG, PCHAR, PCHAR[], ULONG,\n-      LDAPMessage**);\n-    ULONG ldap_search_sW(LDAP*, PWCHAR, ULONG, PWCHAR, PWCHAR[], ULONG,\n-      LDAPMessage**);\n-    ULONG ldap_search_stA(LDAP*, PCHAR, ULONG, PCHAR, PCHAR[], ULONG,\n-      LDAP_TIMEVAL*, LDAPMessage**);\n-    ULONG ldap_search_stW(LDAP*, PWCHAR, ULONG, PWCHAR, PWCHAR[], ULONG,\n-      LDAP_TIMEVAL*, LDAPMessage**);\n-    ULONG ldap_compare_extA(LDAP*, PCHAR, PCHAR, PCHAR, BerValue*,\n+    ULONG ldap_search_ext_sA(LDAP*, PCSTR, ULONG, PCSTR, PZPSTR, ULONG,\n+      PLDAPControlA*, PLDAPControlA*, LDAP_TIMEVAL*, ULONG, PLDAPMessage*);\n+    ULONG ldap_search_ext_sW(LDAP*, PCWSTR, ULONG, PCWSTR, PZPWSTR, ULONG,\n+      PLDAPControlW*, PLDAPControlW*, LDAP_TIMEVAL*, ULONG, PLDAPMessage*);\n+    ULONG ldap_searchA(LDAP*, PCSTR, ULONG, PCSTR, PZPSTR, ULONG);\n+    ULONG ldap_searchW(LDAP*, PCWSTR, ULONG, PCWSTR, PZPWSTR, ULONG);\n+    ULONG ldap_search_sA(LDAP*, PCSTR, ULONG, PCSTR, PZPSTR, ULONG,\n+      PLDAPMessage*);\n+    ULONG ldap_search_sW(LDAP*, PCWSTR, ULONG, PCWSTR, PZPWSTR, ULONG,\n+      PLDAPMessage*);\n+    ULONG ldap_search_stA(LDAP*, PCSTR, ULONG, PCSTR, PZPSTR, ULONG,\n+      LDAP_TIMEVAL*, PLDAPMessage*);\n+    ULONG ldap_search_stW(LDAP*, PCWSTR, ULONG, PCWSTR, PZPWSTR, ULONG,\n+      LDAP_TIMEVAL*, PLDAPMessage*);\n+    ULONG ldap_compare_extA(LDAP*, PCSTR, PCSTR, PCSTR, BerValue*,\n       PLDAPControlA*, PLDAPControlA*, ULONG*);\n-    ULONG ldap_compare_extW(LDAP*, PWCHAR, PWCHAR, PWCHAR, BerValue*,\n+    ULONG ldap_compare_extW(LDAP*, PCWSTR, PCWSTR, PCWSTR, BerValue*,\n       PLDAPControlW*, PLDAPControlW*, ULONG*);\n-    ULONG ldap_compare_ext_sA(LDAP*, PCHAR, PCHAR, PCHAR, BerValue*,\n+    ULONG ldap_compare_ext_sA(LDAP*, PCSTR, PCSTR, PCSTR, BerValue*,\n       PLDAPControlA*, PLDAPControlA*);\n-    ULONG ldap_compare_ext_sW(LDAP*, PWCHAR, PWCHAR, PWCHAR, BerValue*,\n+    ULONG ldap_compare_ext_sW(LDAP*, PCWSTR, PCWSTR, PCWSTR, BerValue*,\n       PLDAPControlW*, PLDAPControlW*);\n-    ULONG ldap_compareA(LDAP*, PCHAR, PCHAR, PCHAR);\n-    ULONG ldap_compareW(LDAP*, PWCHAR, PWCHAR, PWCHAR);\n-    ULONG ldap_compare_sA(LDAP*, PCHAR, PCHAR, PCHAR);\n-    ULONG ldap_compare_sW(LDAP*, PWCHAR, PWCHAR, PWCHAR);\n-    ULONG ldap_modify_extA(LDAP*, PCHAR, LDAPModA*[], PLDAPControlA*,\n+    ULONG ldap_compareA(LDAP*, PCSTR, PCSTR, PCSTR);\n+    ULONG ldap_compareW(LDAP*, PCWSTR, PCWSTR, PCWSTR);\n+    ULONG ldap_compare_sA(LDAP*, PCSTR, PCSTR, PCSTR);\n+    ULONG ldap_compare_sW(LDAP*, PCWSTR, PCWSTR, PCWSTR);\n+    ULONG ldap_modify_extA(LDAP*, PCSTR, LDAPModA**, PLDAPControlA*,\n       PLDAPControlA*, ULONG*);\n-    ULONG ldap_modify_extW(LDAP*, PWCHAR, LDAPModW*[], PLDAPControlW*,\n+    ULONG ldap_modify_extW(LDAP*, PCWSTR, LDAPModW**, PLDAPControlW*,\n       PLDAPControlW*, ULONG*);\n-    ULONG ldap_modify_ext_sA(LDAP*, PCHAR, LDAPModA*[], PLDAPControlA*,\n+    ULONG ldap_modify_ext_sA(LDAP*, PCSTR, LDAPModA**, PLDAPControlA*,\n       PLDAPControlA*);\n-    ULONG ldap_modify_ext_sW(LDAP*, PWCHAR, LDAPModW*[], PLDAPControlW*,\n+    ULONG ldap_modify_ext_sW(LDAP*, PCWSTR, LDAPModW**, PLDAPControlW*,\n       PLDAPControlW*);\n-    ULONG ldap_modifyA(LDAP*, PCHAR, LDAPModA*[]);\n-    ULONG ldap_modifyW(LDAP*, PWCHAR, LDAPModW*[]);\n-    ULONG ldap_modify_sA(LDAP*, PCHAR, LDAPModA*[]);\n-    ULONG ldap_modify_sW(LDAP*, PWCHAR, LDAPModW*[]);\n-    ULONG ldap_rename_extA(LDAP*, PCHAR, PCHAR, PCHAR, INT, PLDAPControlA*,\n+    ULONG ldap_modifyA(LDAP*, PSTR, LDAPModA**);\n+    ULONG ldap_modifyW(LDAP*, PWSTR, LDAPModW**);\n+    ULONG ldap_modify_sA(LDAP*, PSTR, LDAPModA**);\n+    ULONG ldap_modify_sW(LDAP*, PWSTR, LDAPModW**);\n+    ULONG ldap_rename_extA(LDAP*, PCSTR, PCSTR, PCSTR, INT, PLDAPControlA*,\n       PLDAPControlA*, ULONG*);\n-    ULONG ldap_rename_extW(LDAP*, PWCHAR, PWCHAR, PWCHAR, INT, PLDAPControlW*,\n+    ULONG ldap_rename_extW(LDAP*, PCWSTR, PCWSTR, PCWSTR, INT, PLDAPControlW*,\n       PLDAPControlW*, ULONG*);\n-    ULONG ldap_rename_ext_sA(LDAP*, PCHAR, PCHAR, PCHAR, INT,\n+    ULONG ldap_rename_ext_sA(LDAP*, PCSTR, PCSTR, PCSTR, INT,\n       PLDAPControlA*, PLDAPControlA*);\n-    ULONG ldap_rename_ext_sW(LDAP*, PWCHAR, PWCHAR, PWCHAR, INT,\n+    ULONG ldap_rename_ext_sW(LDAP*, PCWSTR, PCWSTR, PCWSTR, INT,\n       PLDAPControlW*, PLDAPControlW*);\n-    ULONG ldap_add_extA(LDAP*, PCHAR, LDAPModA*[], PLDAPControlA*,\n+    ULONG ldap_add_extA(LDAP*, PCSTR, LDAPModA**, PLDAPControlA*,\n       PLDAPControlA*, ULONG*);\n-    ULONG ldap_add_extW(LDAP*, PWCHAR, LDAPModW*[], PLDAPControlW*,\n+    ULONG ldap_add_extW(LDAP*, PCWSTR, LDAPModW**, PLDAPControlW*,\n       PLDAPControlW*, ULONG*);\n-    ULONG ldap_add_ext_sA(LDAP*, PCHAR, LDAPModA*[], PLDAPControlA*,\n+    ULONG ldap_add_ext_sA(LDAP*, PCSTR, LDAPModA**, PLDAPControlA*,\n       PLDAPControlA*);\n-    ULONG ldap_add_ext_sW(LDAP*, PWCHAR, LDAPModW*[], PLDAPControlW*,\n+    ULONG ldap_add_ext_sW(LDAP*, PCWSTR, LDAPModW**, PLDAPControlW*,\n       PLDAPControlW*);\n-    ULONG ldap_addA(LDAP*, PCHAR, LDAPModA*[]);\n-    ULONG ldap_addW(LDAP*, PWCHAR, LDAPModW*[]);\n-    ULONG ldap_add_sA(LDAP*, PCHAR, LDAPModA*[]);\n-    ULONG ldap_add_sW(LDAP*, PWCHAR, LDAPModW*[]);\n-    ULONG ldap_delete_extA(LDAP*, PCHAR, PLDAPControlA*, PLDAPControlA*,\n+    ULONG ldap_addA(LDAP*, PSTR, LDAPModA**);\n+    ULONG ldap_addW(LDAP*, PWSTR, LDAPModW**);\n+    ULONG ldap_add_sA(LDAP*, PSTR, LDAPModA**);\n+    ULONG ldap_add_sW(LDAP*, PWSTR, LDAPModW**);\n+    ULONG ldap_delete_extA(LDAP*, PCSTR, PLDAPControlA*, PLDAPControlA*,\n       ULONG*);\n-    ULONG ldap_delete_extW(LDAP*, PWCHAR, PLDAPControlW*, PLDAPControlW*,\n+    ULONG ldap_delete_extW(LDAP*, PCWSTR, PLDAPControlW*, PLDAPControlW*,\n       ULONG*);\n-    ULONG ldap_delete_ext_sA(LDAP*, PCHAR, PLDAPControlA*, PLDAPControlA*);\n-    ULONG ldap_delete_ext_sW(LDAP*, PWCHAR, PLDAPControlW*, PLDAPControlW*);\n-    ULONG ldap_deleteA(LDAP*, PCHAR);\n-    ULONG ldap_deleteW(LDAP*, PWCHAR);\n-    ULONG ldap_delete_sA(LDAP*, PCHAR);\n-    ULONG ldap_delete_sW(LDAP*, PWCHAR);\n-    ULONG ldap_extended_operationA(LDAP*, PCHAR, BerValue*, PLDAPControlA*,\n+    ULONG ldap_delete_ext_sA(LDAP*, PCSTR, PLDAPControlA*, PLDAPControlA*);\n+    ULONG ldap_delete_ext_sW(LDAP*, PCWSTR, PLDAPControlW*, PLDAPControlW*);\n+    ULONG ldap_deleteA(LDAP*, PCSTR);\n+    ULONG ldap_deleteW(LDAP*, PCWSTR);\n+    ULONG ldap_delete_sA(LDAP*, PCSTR);\n+    ULONG ldap_delete_sW(LDAP*, PCWSTR);\n+    ULONG ldap_extended_operationA(LDAP*, PCSTR, BerValue*, PLDAPControlA*,\n       PLDAPControlA*, ULONG*);\n-    ULONG ldap_extended_operationW(LDAP*, PWCHAR, BerValue*, PLDAPControlW*,\n+    ULONG ldap_extended_operationW(LDAP*, PCWSTR, BerValue*, PLDAPControlW*,\n       PLDAPControlW*, ULONG*);\n-    ULONG ldap_extended_operation_sA(LDAP*, PCHAR, BerValue*, PLDAPControlA*,\n+    ULONG ldap_extended_operation_sA(LDAP*, PSTR, BerValue*, PLDAPControlA*,\n       PLDAPControlA*, PCHAR*, BerValue**);\n-    ULONG ldap_extended_operation_sW(LDAP*, PWCHAR, BerValue*, PLDAPControlW*,\n+    ULONG ldap_extended_operation_sW(LDAP*, PWSTR, BerValue*, PLDAPControlW*,\n       PLDAPControlW*, PWCHAR*, BerValue**);\n     ULONG ldap_close_extended_op(LDAP*, ULONG);\n     ULONG ldap_abandon(LDAP*, ULONG);\n     ULONG ldap_result(LDAP*, ULONG, ULONG, LDAP_TIMEVAL*, LDAPMessage**);\n     ULONG ldap_msgfree(LDAPMessage*);\n-    ULONG ldap_parse_resultA(LDAP*, LDAPMessage*, ULONG*, PCHAR*, PCHAR*,\n-      PCHAR**, PLDAPControlA**, BOOLEAN);\n-    ULONG ldap_parse_resultW(LDAP*, LDAPMessage*, ULONG*, PWCHAR*, PWCHAR*,\n-      PWCHAR**, PLDAPControlW**, BOOLEAN);\n-    ULONG ldap_parse_extended_resultA(LDAP, LDAPMessage*, PCHAR*, BerValue**,\n+    ULONG ldap_parse_resultA(LDAP*, LDAPMessage*, ULONG*, PSTR*, PSTR*,\n+      PZPSTR*, PLDAPControlA**, BOOLEAN);\n+    ULONG ldap_parse_resultW(LDAP*, LDAPMessage*, ULONG*, PWSTR*, PWSTR*,\n+      PZPWSTR*, PLDAPControlW**, BOOLEAN);\n+    ULONG ldap_parse_extended_resultA(LDAP, LDAPMessage*, PSTR*, BerValue**,\n       BOOLEAN);\n-    ULONG ldap_parse_extended_resultW(LDAP, LDAPMessage*, PWCHAR*, BerValue**,\n+    ULONG ldap_parse_extended_resultW(LDAP, LDAPMessage*, PWSTR*, BerValue**,\n       BOOLEAN);\n     PCHAR ldap_err2stringA(ULONG);\n     PWCHAR ldap_err2stringW(ULONG);\n@@ -614,10 +615,10 @@ extern (C) {\n     PWCHAR ldap_next_attributeW(LDAP*, LDAPMessage*, BerElement*);\n     VOID ldap_memfreeA(PCHAR);\n     VOID ldap_memfreeW(PWCHAR);\n-    PCHAR* ldap_get_valuesA(LDAP*, LDAPMessage*, PCHAR);\n-    PWCHAR* ldap_get_valuesW(LDAP*, LDAPMessage*, PWCHAR);\n-    BerValue** ldap_get_values_lenA(LDAP*, LDAPMessage*, PCHAR);\n-    BerValue** ldap_get_values_lenW(LDAP*, LDAPMessage*, PWCHAR);\n+    PCHAR* ldap_get_valuesA(LDAP*, LDAPMessage*, PCSTR);\n+    PWCHAR* ldap_get_valuesW(LDAP*, LDAPMessage*, PCWSTR);\n+    BerValue** ldap_get_values_lenA(LDAP*, LDAPMessage*, PCSTR);\n+    BerValue** ldap_get_values_lenW(LDAP*, LDAPMessage*, PCWSTR);\n     ULONG ldap_count_valuesA(PCHAR*);\n     ULONG ldap_count_valuesW(PWCHAR*);\n     ULONG ldap_count_values_len(BerValue**);\n@@ -626,16 +627,16 @@ extern (C) {\n     ULONG ldap_value_free_len(BerValue**);\n     PCHAR ldap_get_dnA(LDAP*, LDAPMessage*);\n     PWCHAR ldap_get_dnW(LDAP*, LDAPMessage*);\n-    PCHAR ldap_explode_dnA(PCHAR, ULONG);\n-    PWCHAR ldap_explode_dnW(PWCHAR, ULONG);\n-    PCHAR ldap_dn2ufnA(PCHAR);\n-    PWCHAR ldap_dn2ufnW(PWCHAR);\n-    ULONG ldap_ufn2dnA(PCHAR, PCHAR*);\n-    ULONG ldap_ufn2dnW(PWCHAR, PWCHAR*);\n+    PCHAR ldap_explode_dnA(PCSTR, ULONG);\n+    PWCHAR ldap_explode_dnW(PCWSTR, ULONG);\n+    PCHAR ldap_dn2ufnA(PCSTR);\n+    PWCHAR ldap_dn2ufnW(PCWSTR);\n+    ULONG ldap_ufn2dnA(PCSTR, PSTR*);\n+    ULONG ldap_ufn2dnW(PCWSTR, PWSTR*);\n     ULONG ldap_parse_referenceA(LDAP*, LDAPMessage*, PCHAR**);\n     ULONG ldap_parse_referenceW(LDAP*, LDAPMessage*, PWCHAR**);\n-    ULONG ldap_check_filterA(LDAP*, PCHAR);\n-    ULONG ldap_check_filterW(LDAP*, PWCHAR);\n+    ULONG ldap_check_filterA(LDAP*, PSTR);\n+    ULONG ldap_check_filterW(LDAP*, PWSTR);\n     ULONG ldap_create_page_controlA(PLDAP, ULONG, BerValue*, UCHAR,\n       PLDAPControlA*);\n     ULONG ldap_create_page_controlW(PLDAP, ULONG, BerValue*, UCHAR,\n@@ -644,8 +645,8 @@ extern (C) {\n       PLDAPControlA*);\n     ULONG ldap_create_sort_controlW(PLDAP, PLDAPSortKeyW*, UCHAR,\n     PLDAPControlW*);\n-    INT ldap_create_vlv_controlA(LDAP*, LDAPVLVInfo*, UCHAR, LDAPControlA**);\n-    INT ldap_create_vlv_controlW(LDAP*, LDAPVLVInfo*, UCHAR, LDAPControlW**);\n+    INT ldap_create_vlv_controlA(LDAP*, LDAPVLVInfo*, UCHAR, PLDAPControlA*);\n+    INT ldap_create_vlv_controlW(LDAP*, LDAPVLVInfo*, UCHAR, PLDAPControlW*);\n     ULONG ldap_encode_sort_controlA(PLDAP, PLDAPSortKeyA*, PLDAPControlA,\n       BOOLEAN);\n     ULONG ldap_encode_sort_controlW(PLDAP, PLDAPSortKeyW*, PLDAPControlW,\n@@ -660,31 +661,31 @@ extern (C) {\n     ULONG ldap_parse_page_controlW(PLDAP, PLDAPControlW*, ULONG*, BerValue**);\n     ULONG ldap_parse_sort_controlA(PLDAP, PLDAPControlA*, ULONG*, PCHAR*);\n     ULONG ldap_parse_sort_controlW(PLDAP, PLDAPControlW*, ULONG*, PWCHAR*);\n-    INT ldap_parse_vlv_controlA(LDAP*, LDAPControlA**, uint*, uint*,\n-      BerValue**, int*);\n-    INT ldap_parse_vlv_controlW(LDAP*, LDAPControlW**, uint*, uint*,\n-      BerValue**, int*);\n-    PLDAPSearch ldap_search_init_pageA(PLDAP, PCHAR, ULONG, PCHAR, PCHAR[],\n+    INT ldap_parse_vlv_controlA(PLDAP, PLDAPControlA*, PULONG, PULONG,\n+      BerValue**, PINT);\n+    INT ldap_parse_vlv_controlW(PLDAP, PLDAPControlW*, PULONG, PULONG,\n+      BerValue**, PINT);\n+    PLDAPSearch ldap_search_init_pageA(PLDAP, PCSTR, ULONG, PCSTR, PZPSTR,\n       ULONG, PLDAPControlA*, PLDAPControlA*, ULONG, ULONG, PLDAPSortKeyA*);\n-    PLDAPSearch ldap_search_init_pageW(PLDAP, PWCHAR, ULONG, PWCHAR, PWCHAR[],\n+    PLDAPSearch ldap_search_init_pageW(PLDAP, PCWSTR, ULONG, PCWSTR, PZPWSTR,\n       ULONG, PLDAPControlW*, PLDAPControlW*, ULONG, ULONG, PLDAPSortKeyW*);\n     ULONG ldap_search_abandon_page(PLDAP, PLDAPSearch);\n     LDAP ldap_conn_from_msg(LDAP*, LDAPMessage*);\n     INT LdapUnicodeToUTF8(LPCWSTR, int, LPSTR, int);\n     INT LdapUTF8ToUnicode(LPCSTR, int, LPWSTR, int);\n-    deprecated {\n-        ULONG ldap_bindA(LDAP*, PCHAR, PCHAR, ULONG);\n-        ULONG ldap_bindW(LDAP*, PWCHAR, PWCHAR, ULONG);\n-        ULONG ldap_bind_sA(LDAP*, PCHAR, PCHAR, ULONG);\n-        ULONG ldap_bind_sW(LDAP*, PWCHAR, PWCHAR, ULONG);\n-        ULONG ldap_modrdnA(LDAP*, PCHAR, PCHAR);\n-        ULONG ldap_modrdnW(LDAP*, PWCHAR, PWCHAR);\n-        ULONG ldap_modrdn_sA(LDAP*, PCHAR, PCHAR);\n-        ULONG ldap_modrdn_sW(LDAP*, PWCHAR, PWCHAR);\n-        ULONG ldap_modrdn2A(LDAP*, PCHAR, PCHAR, INT);\n-        ULONG ldap_modrdn2W(LDAP*, PWCHAR, PWCHAR, INT);\n-        ULONG ldap_modrdn2_sA(LDAP*, PCHAR, PCHAR, INT);\n-        ULONG ldap_modrdn2_sW(LDAP*, PWCHAR, PWCHAR, INT);\n+    ULONG ldap_bindA(LDAP*, PSTR, PCHAR, ULONG);\n+    ULONG ldap_bindW(LDAP*, PWSTR, PWCHAR, ULONG);\n+    ULONG ldap_bind_sA(LDAP*, PSTR, PCHAR, ULONG);\n+    ULONG ldap_bind_sW(LDAP*, PWSTR, PWCHAR, ULONG);\n+    deprecated (\"For LDAP 3 or later, use the ldap_rename_ext or ldap_rename_ext_s functions\") {\n+        ULONG ldap_modrdnA(LDAP*, PCSTR, PCSTR);\n+        ULONG ldap_modrdnW(LDAP*, PCWSTR, PCWSTR);\n+        ULONG ldap_modrdn_sA(LDAP*, PCSTR, PCSTR);\n+        ULONG ldap_modrdn_sW(LDAP*, PCWSTR, PCWSTR);\n+        ULONG ldap_modrdn2A(LDAP*, PCSTR, PCSTR, INT);\n+        ULONG ldap_modrdn2W(LDAP*, PCWSTR, PCWSTR, INT);\n+        ULONG ldap_modrdn2_sA(LDAP*, PCSTR, PCSTR, INT);\n+        ULONG ldap_modrdn2_sW(LDAP*, PCWSTR, PCWSTR, INT);\n     }\n }\n "}, {"sha": "7601279005fa8570893279ada769aaa68f53c775", "filename": "libphobos/libdruntime/core/sys/windows/winnetwk.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fwinnetwk.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fwinnetwk.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fwinnetwk.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -9,11 +9,12 @@\n  */\n module core.sys.windows.winnetwk;\n version (Windows):\n+@system:\n \n version (ANSI) {} else version = Unicode;\n pragma(lib, \"mpr\");\n \n-private import core.sys.windows.winbase, core.sys.windows.winerror, core.sys.windows.winnt;\n+import core.sys.windows.winbase, core.sys.windows.winerror, core.sys.windows.winnt;\n \n enum : DWORD {\n     WNNC_NET_MSNET       = 0x00010000,"}, {"sha": "6483f4bcc02310c368c16274b0f637107d30adc3", "filename": "libphobos/libdruntime/core/sys/windows/winnls.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fwinnls.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fwinnls.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fwinnls.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -9,11 +9,12 @@\n  */\n module core.sys.windows.winnls;\n version (Windows):\n+@system:\n \n version (ANSI) {} else version = Unicode;\n pragma(lib, \"kernel32\");\n \n-private import core.sys.windows.basetsd, core.sys.windows.w32api, core.sys.windows.winbase, core.sys.windows.windef;\n+import core.sys.windows.basetsd, core.sys.windows.w32api, core.sys.windows.winbase, core.sys.windows.windef;\n \n alias DWORD LCTYPE, CALTYPE, CALID, LGRPID, GEOID, GEOTYPE, GEOCLASS;\n "}, {"sha": "2d9a28121e9aa9720aec24881d3592474f50cc5a", "filename": "libphobos/libdruntime/core/sys/windows/winnt.d", "status": "modified", "additions": 145, "deletions": 4, "changes": 149, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fwinnt.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fwinnt.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fwinnt.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -8,11 +8,12 @@\n  */\n module core.sys.windows.winnt;\n version (Windows):\n+@system:\n \n version (ANSI) {} else version = Unicode;\n \n public import core.sys.windows.basetsd, core.sys.windows.windef, core.sys.windows.winerror;\n-private import core.sys.windows.w32api;\n+import core.sys.windows.w32api;\n \n /* Translation Notes:\n The following macros are unneeded for D:\n@@ -2246,8 +2247,8 @@ enum LEGACY_SAVE_AREA_LENGTH = XMM_SAVE_AREA32.sizeof;\n                 M128A Xmm13;\n                 M128A Xmm14;\n                 M128A Xmm15;\n-            };\n-        };\n+            }\n+        }\n         M128A[26] VectorRegister;\n         DWORD64 VectorControl;\n         DWORD64 DebugControl;\n@@ -2397,6 +2398,7 @@ struct TOKEN_OWNER {\n     PSID Owner;\n }\n alias TOKEN_OWNER* PTOKEN_OWNER;\n+enum SECURITY_MAX_SID_SIZE = 68;\n \n struct TOKEN_PRIMARY_GROUP {\n     PSID PrimaryGroup;\n@@ -2436,6 +2438,10 @@ struct TOKEN_USER {\n }\n alias TOKEN_USER* PTOKEN_USER;\n \n+struct TOKEN_MANDATORY_LABEL {\n+    SID_AND_ATTRIBUTES Label;\n+}\n+alias PTOKEN_MANDATORY_LABEL = TOKEN_MANDATORY_LABEL*;\n alias DWORD SECURITY_INFORMATION;\n alias SECURITY_INFORMATION* PSECURITY_INFORMATION;\n alias WORD SECURITY_DESCRIPTOR_CONTROL;\n@@ -2451,6 +2457,18 @@ struct SECURITY_DESCRIPTOR {\n     PACL Dacl;\n }\n alias SECURITY_DESCRIPTOR* PSECURITY_DESCRIPTOR, PISECURITY_DESCRIPTOR;\n+enum TOKEN_ELEVATION_TYPE {\n+    TokenElevationTypeDefault = 1,\n+    TokenElevationTypeFull,\n+    TokenElevationTypeLimited\n+}\n+\n+alias PTOKEN_ELEVATION_TYPE = TOKEN_ELEVATION_TYPE*;\n+\n+struct TOKEN_ELEVATION {\n+    DWORD TokenIsElevated;\n+}\n+alias PTOKEN_ELEVATION = TOKEN_ELEVATION*;\n \n enum TOKEN_INFORMATION_CLASS {\n     TokenUser = 1,\n@@ -2469,7 +2487,32 @@ enum TOKEN_INFORMATION_CLASS {\n     TokenSessionReference,\n     TokenSandBoxInert,\n     TokenAuditPolicy,\n-    TokenOrigin\n+    TokenOrigin,\n+    TokenElevationType,\n+    TokenLinkedToken,\n+    TokenElevation,\n+    TokenHasRestrictions,\n+    TokenAccessInformation,\n+    TokenVirtualizationAllowed,\n+    TokenVirtualizationEnabled,\n+    TokenIntegrityLevel,\n+    TokenUIAccess,\n+    TokenMandatoryPolicy,\n+    TokenLogonSid,\n+    TokenIsAppContainer,\n+    TokenCapabilities,\n+    TokenAppContainerSid,\n+    TokenAppContainerNumber,\n+    TokenUserClaimAttributes,\n+    TokenDeviceClaimAttributes,\n+    TokenRestrictedUserClaimAttributes,\n+    TokenRestrictedDeviceClaimAttributes,\n+    TokenDeviceGroups,\n+    TokenRestrictedDeviceGroups,\n+    TokenSecurityAttributes,\n+    TokenIsRestricted,\n+    TokenProcessTrustLevel,\n+    MaxTokenInfoClass  // MaxTokenInfoClass should always be the last enum\n }\n \n enum SID_NAME_USE {\n@@ -2485,6 +2528,103 @@ enum SID_NAME_USE {\n }\n alias SID_NAME_USE* PSID_NAME_USE;\n \n+enum WELL_KNOWN_SID_TYPE {\n+    WinNullSid                                   = 0,\n+    WinWorldSid                                  = 1,\n+    WinLocalSid                                  = 2,\n+    WinCreatorOwnerSid                           = 3,\n+    WinCreatorGroupSid                           = 4,\n+    WinCreatorOwnerServerSid                     = 5,\n+    WinCreatorGroupServerSid                     = 6,\n+    WinNtAuthoritySid                            = 7,\n+    WinDialupSid                                 = 8,\n+    WinNetworkSid                                = 9,\n+    WinBatchSid                                  = 10,\n+    WinInteractiveSid                            = 11,\n+    WinServiceSid                                = 12,\n+    WinAnonymousSid                              = 13,\n+    WinProxySid                                  = 14,\n+    WinEnterpriseControllersSid                  = 15,\n+    WinSelfSid                                   = 16,\n+    WinAuthenticatedUserSid                      = 17,\n+    WinRestrictedCodeSid                         = 18,\n+    WinTerminalServerSid                         = 19,\n+    WinRemoteLogonIdSid                          = 20,\n+    WinLogonIdsSid                               = 21,\n+    WinLocalSystemSid                            = 22,\n+    WinLocalServiceSid                           = 23,\n+    WinNetworkServiceSid                         = 24,\n+    WinBuiltinDomainSid                          = 25,\n+    WinBuiltinAdministratorsSid                  = 26,\n+    WinBuiltinUsersSid                           = 27,\n+    WinBuiltinGuestsSid                          = 28,\n+    WinBuiltinPowerUsersSid                      = 29,\n+    WinBuiltinAccountOperatorsSid                = 30,\n+    WinBuiltinSystemOperatorsSid                 = 31,\n+    WinBuiltinPrintOperatorsSid                  = 32,\n+    WinBuiltinBackupOperatorsSid                 = 33,\n+    WinBuiltinReplicatorSid                      = 34,\n+    WinBuiltinPreWindows2000CompatibleAccessSid  = 35,\n+    WinBuiltinRemoteDesktopUsersSid              = 36,\n+    WinBuiltinNetworkConfigurationOperatorsSid   = 37,\n+    WinAccountAdministratorSid                   = 38,\n+    WinAccountGuestSid                           = 39,\n+    WinAccountKrbtgtSid                          = 40,\n+    WinAccountDomainAdminsSid                    = 41,\n+    WinAccountDomainUsersSid                     = 42,\n+    WinAccountDomainGuestsSid                    = 43,\n+    WinAccountComputersSid                       = 44,\n+    WinAccountControllersSid                     = 45,\n+    WinAccountCertAdminsSid                      = 46,\n+    WinAccountSchemaAdminsSid                    = 47,\n+    WinAccountEnterpriseAdminsSid                = 48,\n+    WinAccountPolicyAdminsSid                    = 49,\n+    WinAccountRasAndIasServersSid                = 50,\n+    WinNTLMAuthenticationSid                     = 51,\n+    WinDigestAuthenticationSid                   = 52,\n+    WinSChannelAuthenticationSid                 = 53,\n+    WinThisOrganizationSid                       = 54,\n+    WinOtherOrganizationSid                      = 55,\n+    WinBuiltinIncomingForestTrustBuildersSid     = 56,\n+    WinBuiltinPerfMonitoringUsersSid             = 57,\n+    WinBuiltinPerfLoggingUsersSid                = 58,\n+    WinBuiltinAuthorizationAccessSid             = 59,\n+    WinBuiltinTerminalServerLicenseServersSid    = 60,\n+    WinBuiltinDCOMUsersSid                       = 61,\n+    WinBuiltinIUsersSid                          = 62,\n+    WinIUserSid                                  = 63,\n+    WinBuiltinCryptoOperatorsSid                 = 64,\n+    WinUntrustedLabelSid                         = 65,\n+    WinLowLabelSid                               = 66,\n+    WinMediumLabelSid                            = 67,\n+    WinHighLabelSid                              = 68,\n+    WinSystemLabelSid                            = 69,\n+    WinWriteRestrictedCodeSid                    = 70,\n+    WinCreatorOwnerRightsSid                     = 71,\n+    WinCacheablePrincipalsGroupSid               = 72,\n+    WinNonCacheablePrincipalsGroupSid            = 73,\n+    WinEnterpriseReadonlyControllersSid          = 74,\n+    WinAccountReadonlyControllersSid             = 75,\n+    WinBuiltinEventLogReadersGroup               = 76,\n+    WinNewEnterpriseReadonlyControllersSid       = 77,\n+    WinBuiltinCertSvcDComAccessGroup             = 78,\n+    WinMediumPlusLabelSid                        = 79,\n+    WinLocalLogonSid                             = 80,\n+    WinConsoleLogonSid                           = 81,\n+    WinThisOrganizationCertificateSid            = 82,\n+    WinApplicationPackageAuthoritySid            = 83,\n+    WinBuiltinAnyPackageSid                      = 84,\n+    WinCapabilityInternetClientSid               = 85,\n+    WinCapabilityInternetClientServerSid         = 86,\n+    WinCapabilityPrivateNetworkClientServerSid   = 87,\n+    WinCapabilityPicturesLibrarySid              = 88,\n+    WinCapabilityVideosLibrarySid                = 89,\n+    WinCapabilityMusicLibrarySid                 = 90,\n+    WinCapabilityDocumentsLibrarySid             = 91,\n+    WinCapabilitySharedUserCertificatesSid       = 92,\n+    WinCapabilityEnterpriseAuthenticationSid     = 93,\n+    WinCapabilityRemovableStorageSid             = 94\n+}\n struct QUOTA_LIMITS {\n     SIZE_T PagedPoolLimit;\n     SIZE_T NonPagedPoolLimit;\n@@ -3734,6 +3874,7 @@ enum DWORD\n     ES_SYSTEM_REQUIRED  = 0x00000001,\n     ES_DISPLAY_REQUIRED = 0x00000002,\n     ES_USER_PRESENT     = 0x00000004,\n+    ES_AWAYMODE_REQUIRED = 0x00000040,\n     ES_CONTINUOUS       = 0x80000000;\n \n enum LATENCY_TIME {"}, {"sha": "367c2b095613c784209502431b3459049ab17692", "filename": "libphobos/libdruntime/core/sys/windows/winperf.d", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fwinperf.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fwinperf.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fwinperf.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -8,6 +8,7 @@\n  */\n module core.sys.windows.winperf;\n version (Windows):\n+@system:\n \n import core.sys.windows.windef;\n import core.sys.windows.winbase; // for SYSTEMTIME"}, {"sha": "078bdf7037e9da226b7075d8d3febd8c384a3feb", "filename": "libphobos/libdruntime/core/sys/windows/winreg.d", "status": "modified", "additions": 52, "deletions": 51, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fwinreg.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fwinreg.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fwinreg.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -9,11 +9,12 @@\n  */\n module core.sys.windows.winreg;\n version (Windows):\n+@system:\n \n version (ANSI) {} else version = Unicode;\n pragma(lib, \"advapi32\");\n \n-private import core.sys.windows.w32api, core.sys.windows.winbase, core.sys.windows.windef;\n+import core.sys.windows.w32api, core.sys.windows.winbase, core.sys.windows.windef;\n \n enum : HKEY { // for some reason, DMD errors if I don't give all the values explicitly\n     HKEY_CLASSES_ROOT        = cast(HKEY) 0x80000000,\n@@ -97,58 +98,58 @@ static if (_WIN32_WINNT >= 0x600) {\n }\n \n extern (Windows) nothrow @nogc {\n-    LONG RegCloseKey(in HKEY);\n+    LONG RegCloseKey(const scope HKEY);\n     LONG RegConnectRegistryA(LPCSTR, HKEY, PHKEY);\n     LONG RegConnectRegistryW(LPCWSTR, HKEY, PHKEY);\n-    LONG RegCreateKeyExA(in HKEY, LPCSTR, DWORD, LPSTR, DWORD, REGSAM,\n+    LONG RegCreateKeyExA(const scope HKEY, LPCSTR, DWORD, LPSTR, DWORD, REGSAM,\n       LPSECURITY_ATTRIBUTES, PHKEY, PDWORD);\n-    LONG RegCreateKeyExW(in HKEY, LPCWSTR, DWORD, LPWSTR, DWORD, REGSAM,\n+    LONG RegCreateKeyExW(const scope HKEY, LPCWSTR, DWORD, LPWSTR, DWORD, REGSAM,\n       LPSECURITY_ATTRIBUTES, PHKEY, PDWORD);\n-    LONG RegDeleteKeyA(in HKEY, LPCSTR);\n-    LONG RegDeleteKeyW(in HKEY, LPCWSTR);\n-    LONG RegDeleteValueA(in HKEY, LPCSTR);\n-    LONG RegDeleteValueW(in HKEY, LPCWSTR);\n-    LONG RegEnumKeyExA(in HKEY, DWORD, LPSTR, PDWORD, PDWORD, LPSTR, PDWORD,\n+    LONG RegDeleteKeyA(const scope HKEY, LPCSTR);\n+    LONG RegDeleteKeyW(const scope HKEY, LPCWSTR);\n+    LONG RegDeleteValueA(const scope HKEY, LPCSTR);\n+    LONG RegDeleteValueW(const scope HKEY, LPCWSTR);\n+    LONG RegEnumKeyExA(const scope HKEY, DWORD, LPSTR, PDWORD, PDWORD, LPSTR, PDWORD,\n       PFILETIME);\n-    LONG RegEnumKeyExW(in HKEY, DWORD, LPWSTR, PDWORD, PDWORD, LPWSTR, PDWORD,\n+    LONG RegEnumKeyExW(const scope HKEY, DWORD, LPWSTR, PDWORD, PDWORD, LPWSTR, PDWORD,\n       PFILETIME);\n-    LONG RegEnumValueA(in HKEY, DWORD, LPSTR, PDWORD, PDWORD, PDWORD, LPBYTE,\n+    LONG RegEnumValueA(const scope HKEY, DWORD, LPSTR, PDWORD, PDWORD, PDWORD, LPBYTE,\n       PDWORD);\n-    LONG RegEnumValueW(in HKEY, DWORD, LPWSTR, PDWORD, PDWORD, PDWORD, LPBYTE,\n+    LONG RegEnumValueW(const scope HKEY, DWORD, LPWSTR, PDWORD, PDWORD, PDWORD, LPBYTE,\n       PDWORD);\n-    LONG RegFlushKey(in HKEY);\n-    LONG RegLoadKeyA(in HKEY, LPCSTR, LPCSTR);\n-    LONG RegLoadKeyW(in HKEY, LPCWSTR, LPCWSTR);\n-    LONG RegOpenKeyExA(in HKEY, LPCSTR, DWORD, REGSAM, PHKEY);\n-    LONG RegOpenKeyExW(in HKEY, LPCWSTR, DWORD, REGSAM, PHKEY);\n-    LONG RegQueryInfoKeyA(in HKEY, LPSTR, PDWORD, PDWORD, PDWORD, PDWORD,\n+    LONG RegFlushKey(const scope HKEY);\n+    LONG RegLoadKeyA(const scope HKEY, LPCSTR, LPCSTR);\n+    LONG RegLoadKeyW(const scope HKEY, LPCWSTR, LPCWSTR);\n+    LONG RegOpenKeyExA(const scope HKEY, LPCSTR, DWORD, REGSAM, PHKEY);\n+    LONG RegOpenKeyExW(const scope HKEY, LPCWSTR, DWORD, REGSAM, PHKEY);\n+    LONG RegQueryInfoKeyA(const scope HKEY, LPSTR, PDWORD, PDWORD, PDWORD, PDWORD,\n       PDWORD, PDWORD, PDWORD, PDWORD, PDWORD, PFILETIME);\n-    LONG RegQueryInfoKeyW(in HKEY, LPWSTR, PDWORD, PDWORD, PDWORD, PDWORD,\n+    LONG RegQueryInfoKeyW(const scope HKEY, LPWSTR, PDWORD, PDWORD, PDWORD, PDWORD,\n       PDWORD, PDWORD, PDWORD, PDWORD, PDWORD, PFILETIME);\n-    LONG RegQueryMultipleValuesA(in HKEY, PVALENTA, DWORD, LPSTR, LPDWORD);\n-    LONG RegQueryMultipleValuesW(in HKEY, PVALENTW, DWORD, LPWSTR, LPDWORD);\n-    LONG RegQueryValueExA(in HKEY, LPCSTR, LPDWORD, LPDWORD, /*LPBYTE*/LPVOID, LPDWORD);\n-    LONG RegQueryValueExW(in HKEY, LPCWSTR, LPDWORD, LPDWORD, /*LPBYTE*/LPVOID, LPDWORD);\n-    LONG RegReplaceKeyA(in HKEY, LPCSTR, LPCSTR, LPCSTR);\n-    LONG RegReplaceKeyW(in HKEY, LPCWSTR, LPCWSTR, LPCWSTR);\n-    LONG RegSaveKeyA(in HKEY, LPCSTR, LPSECURITY_ATTRIBUTES);\n-    LONG RegSaveKeyW(in HKEY, LPCWSTR, LPSECURITY_ATTRIBUTES);\n-    LONG RegSetKeySecurity(in HKEY, SECURITY_INFORMATION, PSECURITY_DESCRIPTOR);\n-    LONG RegSetValueExA(in HKEY, LPCSTR, DWORD, DWORD, const(BYTE)*, DWORD);\n-    LONG RegSetValueExW(in HKEY, LPCWSTR, DWORD, DWORD, const(BYTE)*, DWORD);\n-    LONG RegUnLoadKeyA(in HKEY, LPCSTR);\n-    LONG RegUnLoadKeyW(in HKEY, LPCWSTR);\n-    LONG RegNotifyChangeKeyValue(in HKEY, BOOL, DWORD, HANDLE, BOOL);\n+    LONG RegQueryMultipleValuesA(const scope HKEY, PVALENTA, DWORD, LPSTR, LPDWORD);\n+    LONG RegQueryMultipleValuesW(const scope HKEY, PVALENTW, DWORD, LPWSTR, LPDWORD);\n+    LONG RegQueryValueExA(const scope HKEY, LPCSTR, LPDWORD, LPDWORD, /*LPBYTE*/LPVOID, LPDWORD);\n+    LONG RegQueryValueExW(const scope HKEY, LPCWSTR, LPDWORD, LPDWORD, /*LPBYTE*/LPVOID, LPDWORD);\n+    LONG RegReplaceKeyA(const scope HKEY, LPCSTR, LPCSTR, LPCSTR);\n+    LONG RegReplaceKeyW(const scope HKEY, LPCWSTR, LPCWSTR, LPCWSTR);\n+    LONG RegSaveKeyA(const scope HKEY, LPCSTR, LPSECURITY_ATTRIBUTES);\n+    LONG RegSaveKeyW(const scope HKEY, LPCWSTR, LPSECURITY_ATTRIBUTES);\n+    LONG RegSetKeySecurity(const scope HKEY, SECURITY_INFORMATION, PSECURITY_DESCRIPTOR);\n+    LONG RegSetValueExA(const scope HKEY, LPCSTR, DWORD, DWORD, const(BYTE)*, DWORD);\n+    LONG RegSetValueExW(const scope HKEY, LPCWSTR, DWORD, DWORD, const(BYTE)*, DWORD);\n+    LONG RegUnLoadKeyA(const scope HKEY, LPCSTR);\n+    LONG RegUnLoadKeyW(const scope HKEY, LPCWSTR);\n+    LONG RegNotifyChangeKeyValue(const scope HKEY, BOOL, DWORD, HANDLE, BOOL);\n \n     BOOL AbortSystemShutdownA(LPCSTR);\n     BOOL AbortSystemShutdownW(LPCWSTR);\n     BOOL InitiateSystemShutdownA(LPSTR, LPSTR, DWORD, BOOL, BOOL);\n     BOOL InitiateSystemShutdownW(LPWSTR, LPWSTR, DWORD, BOOL, BOOL);\n-    LONG RegGetKeySecurity(in HKEY, SECURITY_INFORMATION,\n+    LONG RegGetKeySecurity(const scope HKEY, SECURITY_INFORMATION,\n       PSECURITY_DESCRIPTOR, PDWORD);\n-    LONG RegRestoreKeyA(in HKEY, LPCSTR, DWORD);\n-    LONG RegRestoreKeyW(in HKEY, LPCWSTR, DWORD);\n-    LONG RegSetKeySecurity(in HKEY, SECURITY_INFORMATION,\n+    LONG RegRestoreKeyA(const scope HKEY, LPCSTR, DWORD);\n+    LONG RegRestoreKeyW(const scope HKEY, LPCWSTR, DWORD);\n+    LONG RegSetKeySecurity(const scope HKEY, SECURITY_INFORMATION,\n       PSECURITY_DESCRIPTOR);\n \n     static if (_WIN32_WINNT >= 0x500) {\n@@ -158,28 +159,28 @@ extern (Windows) nothrow @nogc {\n     }\n \n     static if (_WIN32_WINNT >= 0x501) {\n-        LONG RegSaveKeyExA(in HKEY, LPCSTR, LPSECURITY_ATTRIBUTES, DWORD);\n-        LONG RegSaveKeyExW(in HKEY, LPCWSTR, LPSECURITY_ATTRIBUTES, DWORD);\n+        LONG RegSaveKeyExA(const scope HKEY, LPCSTR, LPSECURITY_ATTRIBUTES, DWORD);\n+        LONG RegSaveKeyExW(const scope HKEY, LPCWSTR, LPSECURITY_ATTRIBUTES, DWORD);\n     }\n \n     static if (_WIN32_WINNT >= 0x600) {\n-        LONG RegGetValueA(in HKEY hkey, LPCSTR lpSubKey, LPCSTR lpValue,\n+        LONG RegGetValueA(const scope HKEY hkey, LPCSTR lpSubKey, LPCSTR lpValue,\n           DWORD dwFlags, LPDWORD pdwType, PVOID pvData, LPDWORD pcbData);\n-        LONG RegGetValueW(in HKEY hkey, LPCWSTR lpSubKey, LPCWSTR lpValue,\n+        LONG RegGetValueW(const scope HKEY hkey, LPCWSTR lpSubKey, LPCWSTR lpValue,\n           DWORD dwFlags, LPDWORD pdwType, PVOID pvData, LPDWORD pcbData);\n     }\n \n     //deprecated {\n-        LONG RegCreateKeyA(in HKEY, LPCSTR, PHKEY);\n-        LONG RegCreateKeyW(in HKEY, LPCWSTR, PHKEY);\n-        LONG RegEnumKeyA(in HKEY, DWORD, LPSTR, DWORD);\n-        LONG RegEnumKeyW(in HKEY, DWORD, LPWSTR, DWORD);\n-        LONG RegOpenKeyA(in HKEY, LPCSTR, PHKEY);\n-        LONG RegOpenKeyW(in HKEY, LPCWSTR, PHKEY);\n-        LONG RegQueryValueA(in HKEY, LPCSTR, LPSTR, PLONG);\n-        LONG RegQueryValueW(in HKEY, LPCWSTR, LPWSTR, PLONG);\n-        LONG RegSetValueA(in HKEY, LPCSTR, DWORD, LPCSTR, DWORD);\n-        LONG RegSetValueW(in HKEY, LPCWSTR, DWORD, LPCWSTR, DWORD);\n+        LONG RegCreateKeyA(const scope HKEY, LPCSTR, PHKEY);\n+        LONG RegCreateKeyW(const scope HKEY, LPCWSTR, PHKEY);\n+        LONG RegEnumKeyA(const scope HKEY, DWORD, LPSTR, DWORD);\n+        LONG RegEnumKeyW(const scope HKEY, DWORD, LPWSTR, DWORD);\n+        LONG RegOpenKeyA(const scope HKEY, LPCSTR, PHKEY);\n+        LONG RegOpenKeyW(const scope HKEY, LPCWSTR, PHKEY);\n+        LONG RegQueryValueA(const scope HKEY, LPCSTR, LPSTR, PLONG);\n+        LONG RegQueryValueW(const scope HKEY, LPCWSTR, LPWSTR, PLONG);\n+        LONG RegSetValueA(const scope HKEY, LPCSTR, DWORD, LPCSTR, DWORD);\n+        LONG RegSetValueW(const scope HKEY, LPCWSTR, DWORD, LPCWSTR, DWORD);\n     //}\n }\n "}, {"sha": "55a45be85bf211d9538481ed4d8933c99be906ed", "filename": "libphobos/libdruntime/core/sys/windows/winsock2.d", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fwinsock2.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fwinsock2.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fwinsock2.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -6,6 +6,7 @@\n \n module core.sys.windows.winsock2;\n version (Windows):\n+@system:\n \n pragma(lib, \"ws2_32\");\n "}, {"sha": "db5b23f6eb228089a53564a98c3c63037018c951", "filename": "libphobos/libdruntime/core/sys/windows/winspool.d", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fwinspool.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fwinspool.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fwinspool.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -8,12 +8,13 @@\n  */\n module core.sys.windows.winspool;\n version (Windows):\n+@system:\n \n version (ANSI) {} else version = Unicode;\n pragma(lib, \"winspool\");\n \n-private import core.sys.windows.w32api, core.sys.windows.windef, core.sys.windows.wingdi;\n-private import core.sys.windows.winbase; // for SYSTEMTIME\n+import core.sys.windows.w32api, core.sys.windows.windef, core.sys.windows.wingdi;\n+import core.sys.windows.winbase; // for SYSTEMTIME\n \n // FIXME: clean up Windows version support\n "}, {"sha": "44c4563aab6850172977fa11c8d4ec2657dffc68", "filename": "libphobos/libdruntime/core/sys/windows/winsvc.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fwinsvc.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fwinsvc.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fwinsvc.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -9,11 +9,12 @@\n  */\n module core.sys.windows.winsvc;\n version (Windows):\n+@system:\n \n version (ANSI) {} else version = Unicode;\n pragma(lib, \"advapi32\");\n \n-private import core.sys.windows.w32api, core.sys.windows.windef;\n+import core.sys.windows.w32api, core.sys.windows.windef;\n \n // FIXME: check Windows version support\n "}, {"sha": "07e5efaa33d08f6fceb9c0671aa50225db3c94eb", "filename": "libphobos/libdruntime/core/sys/windows/winuser.d", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fwinuser.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fwinuser.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fwinuser.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -8,6 +8,7 @@\n  */\n module core.sys.windows.winuser;\n version (Windows):\n+@system:\n \n version (ANSI) {} else version = Unicode;\n pragma(lib, \"user32\");\n@@ -22,8 +23,8 @@ pragma(lib, \"user32\");\n //#define GetWindowTask(hWnd) ((HANDLE)GetWindowThreadProcessId(hWnd, NULL))\n //#define DefHookProc(c, p, lp, h) CallNextHookEx((HHOOK)*h, c, p, lp)\n \n-private import core.sys.windows.w32api, core.sys.windows.winbase, core.sys.windows.wingdi;\n-private import core.sys.windows.windef; // for HMONITOR\n+import core.sys.windows.w32api, core.sys.windows.winbase, core.sys.windows.wingdi;\n+import core.sys.windows.windef; // for HMONITOR\n \n // FIXME: clean up Windows version support\n \n@@ -3545,7 +3546,7 @@ void POINTSTOPOINT()(out POINT p, LONG ps) {\n     p.y = HIWORD(ps);\n }\n \n-POINTS POINTTOPOINTS()(in POINT p) {\n+POINTS POINTTOPOINTS()(const POINT p) {\n     return MAKELONG(p.x, p.y);\n }\n "}, {"sha": "afe53d8f7ccf7a633748038d1971c1eeb208c4ed", "filename": "libphobos/libdruntime/core/sys/windows/winver.d", "status": "modified", "additions": 91, "deletions": 1, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fwinver.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fwinver.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fwinver.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -9,11 +9,15 @@\n  */\n module core.sys.windows.winver;\n version (Windows):\n+@system:\n+import core.sys.windows.w32api;\n+import core.sys.windows.winbase;\n+import core.sys.windows.sdkddkver;\n \n version (ANSI) {} else version = Unicode;\n pragma(lib, \"version\");\n \n-private import core.sys.windows.windef;\n+import core.sys.windows.windef;\n \n // FIXME: type weirdness\n enum {\n@@ -172,3 +176,89 @@ version (Unicode) {\n     alias VerLanguageNameA VerLanguageName;\n     alias VerQueryValueA VerQueryValue;\n }\n+\n+alias VERSIONHELPERAPI = BOOL;\n+VERSIONHELPERAPI IsWindowsVersionOrGreater(WORD wMajorVersion, WORD wMinorVersion, WORD wServicePackMajor)\n+{\n+    OSVERSIONINFOEXW osvi;\n+    const DWORDLONG dwlConditionMask = VerSetConditionMask(\n+        VerSetConditionMask(\n+            VerSetConditionMask(0, VER_MAJORVERSION, VER_GREATER_EQUAL),\n+            VER_MINORVERSION,\n+            VER_GREATER_EQUAL),\n+        VER_SERVICEPACKMAJOR, VER_GREATER_EQUAL\n+    );\n+    osvi.dwMajorVersion = wMajorVersion;\n+    osvi.dwMinorVersion = wMinorVersion;\n+    osvi.wServicePackMajor = wServicePackMajor;\n+\n+    return VerifyVersionInfoW(&osvi, VER_MAJORVERSION | VER_MINORVERSION | VER_SERVICEPACKMAJOR, dwlConditionMask) != FALSE;\n+}\n+\n+VERSIONHELPERAPI IsWindowsXPOrGreater()\n+{\n+    return IsWindowsVersionOrGreater(HIBYTE(_WIN32_WINNT_WINXP), LOBYTE(_WIN32_WINNT_WINXP), 0);\n+}\n+\n+VERSIONHELPERAPI IsWindowsXPSP1OrGreater()\n+{\n+    return IsWindowsVersionOrGreater(HIBYTE(_WIN32_WINNT_WINXP), LOBYTE(_WIN32_WINNT_WINXP), 1);\n+}\n+\n+VERSIONHELPERAPI IsWindowsXPSP2OrGreater()\n+{\n+    return IsWindowsVersionOrGreater(HIBYTE(_WIN32_WINNT_WINXP), LOBYTE(_WIN32_WINNT_WINXP), 2);\n+}\n+\n+VERSIONHELPERAPI IsWindowsXPSP3OrGreater()\n+{\n+    return IsWindowsVersionOrGreater(HIBYTE(_WIN32_WINNT_WINXP), LOBYTE(_WIN32_WINNT_WINXP), 3);\n+}\n+\n+VERSIONHELPERAPI IsWindowsVistaOrGreater()\n+{\n+    return IsWindowsVersionOrGreater(HIBYTE(_WIN32_WINNT_VISTA), LOBYTE(_WIN32_WINNT_VISTA), 0);\n+}\n+\n+VERSIONHELPERAPI IsWindowsVistaSP1OrGreater()\n+{\n+    return IsWindowsVersionOrGreater(HIBYTE(_WIN32_WINNT_VISTA), LOBYTE(_WIN32_WINNT_VISTA), 1);\n+}\n+\n+VERSIONHELPERAPI IsWindowsVistaSP2OrGreater()\n+{\n+    return IsWindowsVersionOrGreater(HIBYTE(_WIN32_WINNT_VISTA), LOBYTE(_WIN32_WINNT_VISTA), 2);\n+}\n+\n+VERSIONHELPERAPI IsWindows7OrGreater()\n+{\n+    return IsWindowsVersionOrGreater(HIBYTE(_WIN32_WINNT_WIN7), LOBYTE(_WIN32_WINNT_WIN7), 0);\n+}\n+\n+VERSIONHELPERAPI IsWindows7SP1OrGreater()\n+{\n+    return IsWindowsVersionOrGreater(HIBYTE(_WIN32_WINNT_WIN7), LOBYTE(_WIN32_WINNT_WIN7), 1);\n+}\n+\n+VERSIONHELPERAPI IsWindows8OrGreater()\n+{\n+    return IsWindowsVersionOrGreater(HIBYTE(_WIN32_WINNT_WIN8), LOBYTE(_WIN32_WINNT_WIN8), 0);\n+}\n+\n+VERSIONHELPERAPI IsWindows8Point1OrGreater()\n+{\n+    return IsWindowsVersionOrGreater(HIBYTE(_WIN32_WINNT_WINBLUE), LOBYTE(_WIN32_WINNT_WINBLUE), 0);\n+}\n+\n+VERSIONHELPERAPI IsWindows10OrGreater()\n+{\n+    return IsWindowsVersionOrGreater(HIBYTE(_WIN32_WINNT_WIN10), LOBYTE(_WIN32_WINNT_WIN10), 0);\n+}\n+\n+VERSIONHELPERAPI IsWindowsServer()\n+{\n+    OSVERSIONINFOEXW osvi = { OSVERSIONINFOEXW.sizeof, 0, 0, 0, 0, [0], 0, 0, 0, VER_NT_WORKSTATION };\n+    const DWORDLONG dwlConditionMask = VerSetConditionMask( 0, VER_PRODUCT_TYPE, VER_EQUAL );\n+\n+    return !VerifyVersionInfoW(&osvi, VER_PRODUCT_TYPE, dwlConditionMask);\n+}"}, {"sha": "643c049c25c0bbf1dc6b3159a71612d74e22a9cf", "filename": "libphobos/libdruntime/core/sys/windows/wtsapi32.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fwtsapi32.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fwtsapi32.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fwtsapi32.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -8,10 +8,11 @@\n  */\n module core.sys.windows.wtsapi32;\n version (Windows):\n+@system:\n \n version (ANSI) {} else version = Unicode;\n pragma(lib, \"wtsapi32\");\n-private import core.sys.windows.w32api;\n+import core.sys.windows.w32api;\n import core.sys.windows.windef;\n \n enum {"}, {"sha": "8af42cf71792749283e45bcddcccca7a0f44332a", "filename": "libphobos/libdruntime/core/sys/windows/wtypes.d", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fwtypes.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fwtypes.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fwindows%2Fwtypes.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b", "patch": "@@ -8,10 +8,11 @@\n  */\n module core.sys.windows.wtypes;\n version (Windows):\n+@system:\n \n import core.sys.windows.rpc, core.sys.windows.rpcndr;\n-private import core.sys.windows.windef;\n-private import core.sys.windows.uuid; // for GUID_NULL\n+import core.sys.windows.windef;\n+import core.sys.windows.uuid; // for GUID_NULL\n \n alias GUID_NULL IID_NULL, CLSID_NULL;\n \n@@ -187,7 +188,7 @@ enum VARENUM {\n     VT_ILLEGAL       = 0xffff,\n     VT_ILLEGALMASKED = 0xfff,\n     VT_TYPEMASK      = 0xfff\n-};\n+}\n \n struct BYTE_SIZEDARR {\n     uint clSize;"}, {"sha": "7506a8b3ee38c81a664a4b01dacafecd37494f08", "filename": "libphobos/libdruntime/core/thread.d", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/accc5ba53e0d0c660aa69f16ef32fc05e4439f1f/libphobos%2Flibdruntime%2Fcore%2Fthread.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/accc5ba53e0d0c660aa69f16ef32fc05e4439f1f/libphobos%2Flibdruntime%2Fcore%2Fthread.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fthread.d?ref=accc5ba53e0d0c660aa69f16ef32fc05e4439f1f"}, {"sha": "1b3c0cabbba8f5ac4336df9b0da85707d53722d0", "filename": "libphobos/libdruntime/core/thread/context.d", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fthread%2Fcontext.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fthread%2Fcontext.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fthread%2Fcontext.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b"}, {"sha": "3270f2e7094337cb7c21ea51414487461b07602d", "filename": "libphobos/libdruntime/core/thread/fiber.d", "status": "added", "additions": 2097, "deletions": 0, "changes": 2097, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fthread%2Ffiber.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fthread%2Ffiber.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fthread%2Ffiber.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b"}, {"sha": "d81e0aa0607181f8c14f5fc8796414ec1fe13efb", "filename": "libphobos/libdruntime/core/thread/osthread.d", "status": "added", "additions": 2811, "deletions": 0, "changes": 2811, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fthread%2Fosthread.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fthread%2Fosthread.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fthread%2Fosthread.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b"}, {"sha": "71b0237c1149394e9e3cf2d56b6431dd950e7b9d", "filename": "libphobos/libdruntime/core/thread/package.d", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fthread%2Fpackage.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fthread%2Fpackage.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fthread%2Fpackage.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b"}, {"sha": "c2c2333efe90cc1201a4875e85f0c355a0a4a90d", "filename": "libphobos/libdruntime/core/thread/threadbase.d", "status": "added", "additions": 1382, "deletions": 0, "changes": 1382, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fthread%2Fthreadbase.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fthread%2Fthreadbase.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fthread%2Fthreadbase.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b"}, {"sha": "d00ce05854de0e9b936c0f29969b71a7dea279c8", "filename": "libphobos/libdruntime/core/thread/threadgroup.d", "status": "added", "additions": 162, "deletions": 0, "changes": 162, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fthread%2Fthreadgroup.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fthread%2Fthreadgroup.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fthread%2Fthreadgroup.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b"}, {"sha": "e50399a59d9009498e5ad4b9478f416172a6e9fb", "filename": "libphobos/libdruntime/core/thread/types.d", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fthread%2Ftypes.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92dd3e71f957c7818f4ce4189bd187b59af20d9b/libphobos%2Flibdruntime%2Fcore%2Fthread%2Ftypes.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fthread%2Ftypes.d?ref=92dd3e71f957c7818f4ce4189bd187b59af20d9b"}]}