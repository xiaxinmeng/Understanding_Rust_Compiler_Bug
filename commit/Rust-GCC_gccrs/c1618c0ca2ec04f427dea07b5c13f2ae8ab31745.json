{"sha": "c1618c0ca2ec04f427dea07b5c13f2ae8ab31745", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzE2MThjMGNhMmVjMDRmNDI3ZGVhMDdiNWMxM2YyYWU4YWIzMTc0NQ==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2004-08-11T19:18:14Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2004-08-11T19:18:14Z"}, "message": "rs6000.h (MAX_FIXED_MODE_SIZE): Define.\n\n        * config/rs6000/rs6000.h (MAX_FIXED_MODE_SIZE): Define.\n\n        * config/rs6000/rs6000.md (mfcr rlwinm patterns): Set length to 8.\n        (mfcr rlwinm rlwinm patterns): Set length to 12.\n\nFrom-SVN: r85808", "tree": {"sha": "f44b1c9191f259d1a823b80684d7a4db78fd777e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f44b1c9191f259d1a823b80684d7a4db78fd777e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1618c0ca2ec04f427dea07b5c13f2ae8ab31745", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1618c0ca2ec04f427dea07b5c13f2ae8ab31745", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1618c0ca2ec04f427dea07b5c13f2ae8ab31745", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1618c0ca2ec04f427dea07b5c13f2ae8ab31745/comments", "author": null, "committer": null, "parents": [{"sha": "1a24f92f6ac24097a3f1873cecb08abf59d1d1d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a24f92f6ac24097a3f1873cecb08abf59d1d1d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a24f92f6ac24097a3f1873cecb08abf59d1d1d3"}], "stats": {"total": 31, "additions": 22, "deletions": 9}, "files": [{"sha": "3509bba6af5db17c659be7500e7165fdfc545d8d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1618c0ca2ec04f427dea07b5c13f2ae8ab31745/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1618c0ca2ec04f427dea07b5c13f2ae8ab31745/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c1618c0ca2ec04f427dea07b5c13f2ae8ab31745", "patch": "@@ -1,3 +1,10 @@\n+2004-08-11 David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* config/rs6000/rs6000.h (MAX_FIXED_MODE_SIZE): Define.\n+\n+\t* config/rs6000/rs6000.md (mfcr rlwinm patterns): Set length to 8.\n+\t(mfcr rlwinm rlwinm patterns): Set length to 12.\n+\n 2004-08-11  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* tree-flow-inline.h (get_def_ops, get_use_ops, get_v_may_def_ops,"}, {"sha": "4b7db3a390ee47fe091ec5b3eedb5a24f015b642", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1618c0ca2ec04f427dea07b5c13f2ae8ab31745/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1618c0ca2ec04f427dea07b5c13f2ae8ab31745/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=c1618c0ca2ec04f427dea07b5c13f2ae8ab31745", "patch": "@@ -2103,6 +2103,12 @@ do {\t\t\t\t\t\t\t\t\\\n \n /* #define FIXUNS_TRUNC_LIKE_FIX_TRUNC */\n \n+/* An integer expression for the size in bits of the largest integer machine\n+   mode that should actually be used.  */\n+\n+/* Allow pairs of registers to be used, which is the intent of the default.  */\n+#define MAX_FIXED_MODE_SIZE GET_MODE_BITSIZE (TARGET_POWERPC64 ? TImode : DImode)\n+\n /* Max number of bytes we can move from memory to memory\n    in one reasonably fast instruction.  */\n #define MOVE_MAX (! TARGET_POWERPC64 ? 4 : 8)"}, {"sha": "8cd7063b8cf8ff411e206b801714c5c86593d076", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1618c0ca2ec04f427dea07b5c13f2ae8ab31745/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1618c0ca2ec04f427dea07b5c13f2ae8ab31745/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=c1618c0ca2ec04f427dea07b5c13f2ae8ab31745", "patch": "@@ -11390,7 +11390,7 @@\n \t\t(const_string \"mfcrf\")\n \t   ]\n \t(const_string \"mfcr\")))\n-   (set_attr \"length\" \"12\")])\n+   (set_attr \"length\" \"8\")])\n \n ;; Same as above, but get the GT bit.\n (define_insn \"move_from_CR_eq_bit\"\n@@ -11399,7 +11399,7 @@\n   \"TARGET_E500\"\n   \"mfcr %0\\;{rlinm|rlwinm} %0,%0,%D1,1\"\n   [(set_attr \"type\" \"mfcr\")\n-   (set_attr \"length\" \"12\")])\n+   (set_attr \"length\" \"8\")])\n \n ;; Same as above, but get the OV/ORDERED bit.\n (define_insn \"move_from_CR_ov_bit\"\n@@ -11408,7 +11408,7 @@\n   \"TARGET_ISEL\"\n   \"mfcr %0\\;{rlinm|rlwinm} %0,%0,%t1,1\"\n   [(set_attr \"type\" \"mfcr\")\n-   (set_attr \"length\" \"12\")])\n+   (set_attr \"length\" \"8\")])\n \n (define_insn \"\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n@@ -11422,7 +11422,7 @@\n \t\t(const_string \"mfcrf\")\n \t   ]\n \t(const_string \"mfcr\")))\n-   (set_attr \"length\" \"12\")])\n+   (set_attr \"length\" \"8\")])\n \n (define_insn \"\"\n   [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n@@ -11437,7 +11437,7 @@\n    mfcr %3%Q2\\;{rlinm.|rlwinm.} %3,%3,%J1,1\n    #\"\n   [(set_attr \"type\" \"delayed_compare\")\n-   (set_attr \"length\" \"12,16\")])\n+   (set_attr \"length\" \"8,16\")])\n \n (define_split\n   [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n@@ -11483,7 +11483,7 @@\n \t\t(const_string \"mfcrf\")\n \t   ]\n \t(const_string \"mfcr\")))\n-   (set_attr \"length\" \"12\")])\n+   (set_attr \"length\" \"8\")])\n \n (define_insn \"\"\n   [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n@@ -11518,7 +11518,7 @@\n   return \\\"mfcr %4%Q2\\;{rlinm.|rlwinm.} %4,%4,%5,%6,%6\\\";\n }\"\n   [(set_attr \"type\" \"delayed_compare\")\n-   (set_attr \"length\" \"12,16\")])\n+   (set_attr \"length\" \"8,16\")])\n \n (define_split\n   [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n@@ -11555,7 +11555,7 @@\n   \"REGNO (operands[2]) != REGNO (operands[5])\"\n   \"mfcr %3\\;{rlinm|rlwinm} %0,%3,%J1,1\\;{rlinm|rlwinm} %3,%3,%J4,1\"\n   [(set_attr \"type\" \"mfcr\")\n-   (set_attr \"length\" \"20\")])\n+   (set_attr \"length\" \"12\")])\n \n (define_peephole\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n@@ -11569,7 +11569,7 @@\n   \"TARGET_POWERPC64 && REGNO (operands[2]) != REGNO (operands[5])\"\n   \"mfcr %3\\;{rlinm|rlwinm} %0,%3,%J1,1\\;{rlinm|rlwinm} %3,%3,%J4,1\"\n   [(set_attr \"type\" \"mfcr\")\n-   (set_attr \"length\" \"20\")])\n+   (set_attr \"length\" \"12\")])\n \n ;; There are some scc insns that can be done directly, without a compare.\n ;; These are faster because they don't involve the communications between"}]}