{"sha": "6bd4ce64eb48a72eca300cb52773e6101d646004", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmJkNGNlNjRlYjQ4YTcyZWNhMzAwY2I1Mjc3M2U2MTAxZDY0NjAwNA==", "commit": {"author": {"name": "Srinath Parvathaneni", "email": "srinath.parvathaneni@arm.com", "date": "2020-09-30T14:19:17Z"}, "committer": {"name": "Srinath Parvathaneni", "email": "srinath.parvathaneni@arm.com", "date": "2020-09-30T14:20:14Z"}, "message": "[GCC][PATCH] arm: Fix MVE intrinsics polymorphic variants wrongly generating __ARM_undef type (pr96795).\n\nHello,\n\nThis patch fixes (PR96795) MVE intrinsic polymorphic variants vaddq, vaddq_m, vaddq_x, vcmpeqq_m,\nvcmpeqq, vcmpgeq_m, vcmpgeq, vcmpgtq_m, vcmpgtq, vcmpleq_m, vcmpleq, vcmpltq_m, vcmpltq,\nvcmpneq_m, vcmpneq, vfmaq_m, vfmaq, vfmasq_m, vfmasq, vmaxnmavq, vmaxnmavq_p, vmaxnmvq,\nvmaxnmvq_p, vminnmavq, vminnmavq_p, vminnmvq, vminnmvq_p, vmulq_m, vmulq, vmulq_x, vsetq_lane,\nvsubq_m, vsubq and vsubq_x which are incorrectly generating __ARM_undef and mismatching the passed\nfloating point scalar arguments.\n\nBootstrapped on arm-none-linux-gnueabihf and regression tested on arm-none-eabi and found no regressions.\n\nOk for master? Ok for GCC-10 branch?\n\nRegards,\nSrinath.\n\ngcc/ChangeLog:\n\n2020-09-30  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n\n\tPR target/96795\n\t* config/arm/arm_mve.h (__ARM_mve_coerce2): Define.\n\t(__arm_vaddq): Correct the scalar argument.\n\t(__arm_vaddq_m): Likewise.\n\t(__arm_vaddq_x): Likewise.\n\t(__arm_vcmpeqq_m): Likewise.\n\t(__arm_vcmpeqq): Likewise.\n\t(__arm_vcmpgeq_m): Likewise.\n\t(__arm_vcmpgeq): Likewise.\n\t(__arm_vcmpgtq_m): Likewise.\n\t(__arm_vcmpgtq): Likewise.\n\t(__arm_vcmpleq_m): Likewise.\n\t(__arm_vcmpleq): Likewise.\n\t(__arm_vcmpltq_m): Likewise.\n\t(__arm_vcmpltq): Likewise.\n\t(__arm_vcmpneq_m): Likewise.\n\t(__arm_vcmpneq): Likewise.\n\t(__arm_vfmaq_m): Likewise.\n\t(__arm_vfmaq): Likewise.\n\t(__arm_vfmasq_m): Likewise.\n\t(__arm_vfmasq): Likewise.\n\t(__arm_vmaxnmavq): Likewise.\n\t(__arm_vmaxnmavq_p): Likewise.\n\t(__arm_vmaxnmvq): Likewise.\n\t(__arm_vmaxnmvq_p): Likewise.\n\t(__arm_vminnmavq): Likewise.\n\t(__arm_vminnmavq_p): Likewise.\n\t(__arm_vminnmvq): Likewise.\n\t(__arm_vminnmvq_p): Likewise.\n\t(__arm_vmulq_m): Likewise.\n\t(__arm_vmulq): Likewise.\n\t(__arm_vmulq_x): Likewise.\n\t(__arm_vsetq_lane): Likewise.\n\t(__arm_vsubq_m): Likewise.\n\t(__arm_vsubq): Likewise.\n\t(__arm_vsubq_x): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/96795\n\t* gcc.target/arm/mve/intrinsics/mve_fp_vaddq_n.c: New Test.\n\t* gcc.target/arm/mve/intrinsics/mve_vaddq_n.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_m_n_f16-1.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_m_n_f32-1.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_x_n_f16-1.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_x_n_f32-1.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_n_f16-1.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_n_f32-1.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_n_f16-1.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_n_f32-1.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_m_n_f16-1.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_m_n_f32-1.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_n_f16-1.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_n_f32-1.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_m_n_f16-1.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_m_n_f32-1.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_n_f16-1.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_n_f32-1.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_m_n_f16-1.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_m_n_f32-1.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_n_f16-1.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_n_f32-1.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_m_n_f16-1.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_m_n_f32-1.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_n_f16-1.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_n_f32-1.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_n_f16-1.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_n_f32-1.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_n_f16-1.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_n_f32-1.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vfmaq_m_n_f16-1.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vfmaq_m_n_f32-1.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vfmaq_n_f16-1.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vfmaq_n_f32-1.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vfmasq_m_n_f16-1.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vfmasq_m_n_f32-1.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vfmasq_n_f16-1.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vfmasq_n_f32-1.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmavq_f16-1.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmavq_f32-1.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmavq_p_f16-1.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmavq_p_f32-1.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmvq_f16-1.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmvq_f32-1.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmvq_p_f16-1.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmvq_p_f32-1.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmavq_f16-1.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmavq_f32-1.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmavq_p_f16-1.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmavq_p_f32-1.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmvq_f16-1.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmvq_f32-1.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmvq_p_f16-1.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmvq_p_f32-1.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_m_n_f16-1.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_m_n_f32-1.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_n_f16-1.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_n_f32-1.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_x_n_f16-1.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_x_n_f32-1.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsetq_lane_f16-1.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsetq_lane_f32-1.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_m_n_f16-1.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_m_n_f32-1.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_n_f16-1.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_n_f32-1.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_x_n_f16-1.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_x_n_f32-1.c: Likewise.", "tree": {"sha": "56d3cd1427108c7ea22a8d6729cbe50d2fa69df4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56d3cd1427108c7ea22a8d6729cbe50d2fa69df4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6bd4ce64eb48a72eca300cb52773e6101d646004", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bd4ce64eb48a72eca300cb52773e6101d646004", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bd4ce64eb48a72eca300cb52773e6101d646004", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bd4ce64eb48a72eca300cb52773e6101d646004/comments", "author": {"login": "sripar01", "id": 115715849, "node_id": "U_kgDOBuWvCQ", "avatar_url": "https://avatars.githubusercontent.com/u/115715849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sripar01", "html_url": "https://github.com/sripar01", "followers_url": "https://api.github.com/users/sripar01/followers", "following_url": "https://api.github.com/users/sripar01/following{/other_user}", "gists_url": "https://api.github.com/users/sripar01/gists{/gist_id}", "starred_url": "https://api.github.com/users/sripar01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sripar01/subscriptions", "organizations_url": "https://api.github.com/users/sripar01/orgs", "repos_url": "https://api.github.com/users/sripar01/repos", "events_url": "https://api.github.com/users/sripar01/events{/privacy}", "received_events_url": "https://api.github.com/users/sripar01/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sripar01", "id": 115715849, "node_id": "U_kgDOBuWvCQ", "avatar_url": "https://avatars.githubusercontent.com/u/115715849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sripar01", "html_url": "https://github.com/sripar01", "followers_url": "https://api.github.com/users/sripar01/followers", "following_url": "https://api.github.com/users/sripar01/following{/other_user}", "gists_url": "https://api.github.com/users/sripar01/gists{/gist_id}", "starred_url": "https://api.github.com/users/sripar01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sripar01/subscriptions", "organizations_url": "https://api.github.com/users/sripar01/orgs", "repos_url": "https://api.github.com/users/sripar01/repos", "events_url": "https://api.github.com/users/sripar01/events{/privacy}", "received_events_url": "https://api.github.com/users/sripar01/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97b798d80baf945ea28236eef3fa69f36626b579", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97b798d80baf945ea28236eef3fa69f36626b579", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97b798d80baf945ea28236eef3fa69f36626b579"}], "stats": {"total": 1041, "additions": 959, "deletions": 82}, "files": [{"sha": "99cff41cccbe22f5f6bfe8db513092830885976c", "filename": "gcc/config/arm/arm_mve.h", "status": "modified", "additions": 85, "deletions": 82, "changes": 167, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Fconfig%2Farm%2Farm_mve.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Fconfig%2Farm%2Farm_mve.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve.h?ref=6bd4ce64eb48a72eca300cb52773e6101d646004", "patch": "@@ -35651,6 +35651,7 @@ enum {\n \tshort: __ARM_mve_type_int_n, \\\n \tint: __ARM_mve_type_int_n, \\\n \tlong: __ARM_mve_type_int_n, \\\n+\tdouble: __ARM_mve_type_fp_n, \\\n \tlong long: __ARM_mve_type_int_n, \\\n \tunsigned char: __ARM_mve_type_int_n, \\\n \tunsigned short: __ARM_mve_type_int_n, \\\n@@ -35723,6 +35724,8 @@ extern void *__ARM_undef;\n     _Generic(param, type: param, default: *(type *)__ARM_undef)\n #define __ARM_mve_coerce1(param, type) \\\n     _Generic(param, type: param, const type: param, default: *(type *)__ARM_undef)\n+#define __ARM_mve_coerce2(param, type) \\\n+    _Generic(param, type: param, float16_t: param, float32_t: param, default: *(type *)__ARM_undef)\n \n #if (__ARM_FEATURE_MVE & 2) /* MVE Floating point.  */\n \n@@ -35939,14 +35942,14 @@ extern void *__ARM_undef;\n   int (*)[__ARM_mve_type_uint32x4_t][__ARM_mve_type_uint32x4_t]: __arm_vaddq_u32 (__ARM_mve_coerce(__p0, uint32x4_t), __ARM_mve_coerce(__p1, uint32x4_t)), \\\n   int (*)[__ARM_mve_type_float16x8_t][__ARM_mve_type_float16x8_t]: __arm_vaddq_f16 (__ARM_mve_coerce(p0, float16x8_t), __ARM_mve_coerce(p1, float16x8_t)), \\\n   int (*)[__ARM_mve_type_float32x4_t][__ARM_mve_type_float32x4_t]: __arm_vaddq_f32 (__ARM_mve_coerce(p0, float32x4_t), __ARM_mve_coerce(p1, float32x4_t)), \\\n-  int (*)[__ARM_mve_type_uint8x16_t][__ARM_mve_type_int_n]: __arm_vaddq_n_u8 (__ARM_mve_coerce(__p0, uint8x16_t), __ARM_mve_coerce(__p1, uint8_t)), \\\n-  int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_int_n]: __arm_vaddq_n_u16 (__ARM_mve_coerce(__p0, uint16x8_t), __ARM_mve_coerce(__p1, uint16_t)), \\\n-  int (*)[__ARM_mve_type_uint32x4_t][__ARM_mve_type_int_n]: __arm_vaddq_n_u32 (__ARM_mve_coerce(__p0, uint32x4_t), __ARM_mve_coerce(__p1, uint32_t)), \\\n-  int (*)[__ARM_mve_type_int8x16_t][__ARM_mve_type_int_n]: __arm_vaddq_n_s8 (__ARM_mve_coerce(__p0, int8x16_t), __ARM_mve_coerce(__p1, int8_t)), \\\n-  int (*)[__ARM_mve_type_int16x8_t][__ARM_mve_type_int_n]: __arm_vaddq_n_s16 (__ARM_mve_coerce(__p0, int16x8_t), __ARM_mve_coerce(__p1, int16_t)), \\\n-  int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int_n]: __arm_vaddq_n_s32 (__ARM_mve_coerce(__p0, int32x4_t), __ARM_mve_coerce(__p1, int32_t)), \\\n-  int (*)[__ARM_mve_type_float16x8_t][__ARM_mve_type_fp_n]: __arm_vaddq_n_f16 (__ARM_mve_coerce(__p0, float16x8_t), __ARM_mve_coerce(__p1, float16_t)), \\\n-  int (*)[__ARM_mve_type_float32x4_t][__ARM_mve_type_fp_n]: __arm_vaddq_n_f32 (__ARM_mve_coerce(__p0, float32x4_t), __ARM_mve_coerce(__p1, float32_t)));})\n+  int (*)[__ARM_mve_type_uint8x16_t][__ARM_mve_type_int_n]: __arm_vaddq_n_u8 (__ARM_mve_coerce(__p0, uint8x16_t), __ARM_mve_coerce(__p1, int)), \\\n+  int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_int_n]: __arm_vaddq_n_u16 (__ARM_mve_coerce(__p0, uint16x8_t), __ARM_mve_coerce(__p1, int)), \\\n+  int (*)[__ARM_mve_type_uint32x4_t][__ARM_mve_type_int_n]: __arm_vaddq_n_u32 (__ARM_mve_coerce(__p0, uint32x4_t), __ARM_mve_coerce(__p1, int)), \\\n+  int (*)[__ARM_mve_type_int8x16_t][__ARM_mve_type_int_n]: __arm_vaddq_n_s8 (__ARM_mve_coerce(__p0, int8x16_t), __ARM_mve_coerce(__p1, int)), \\\n+  int (*)[__ARM_mve_type_int16x8_t][__ARM_mve_type_int_n]: __arm_vaddq_n_s16 (__ARM_mve_coerce(__p0, int16x8_t), __ARM_mve_coerce(__p1, int)), \\\n+  int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int_n]: __arm_vaddq_n_s32 (__ARM_mve_coerce(__p0, int32x4_t), __ARM_mve_coerce(__p1, int)), \\\n+  int (*)[__ARM_mve_type_float16x8_t][__ARM_mve_type_fp_n]: __arm_vaddq_n_f16 (__ARM_mve_coerce(__p0, float16x8_t), __ARM_mve_coerce2(__p1, double)), \\\n+  int (*)[__ARM_mve_type_float32x4_t][__ARM_mve_type_fp_n]: __arm_vaddq_n_f32 (__ARM_mve_coerce(__p0, float32x4_t), __ARM_mve_coerce2(__p1, double)));})\n \n #define __arm_vandq(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n   __typeof(p1) __p1 = (p1); \\\n@@ -35997,8 +36000,8 @@ extern void *__ARM_undef;\n   int (*)[__ARM_mve_type_uint8x16_t][__ARM_mve_type_int_n]: __arm_vmulq_n_u8 (__ARM_mve_coerce(__p0, uint8x16_t), __ARM_mve_coerce(__p1, uint8_t)), \\\n   int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_int_n]: __arm_vmulq_n_u16 (__ARM_mve_coerce(__p0, uint16x8_t), __ARM_mve_coerce(__p1, uint16_t)), \\\n   int (*)[__ARM_mve_type_uint32x4_t][__ARM_mve_type_int_n]: __arm_vmulq_n_u32 (__ARM_mve_coerce(__p0, uint32x4_t), __ARM_mve_coerce(__p1, uint32_t)), \\\n-  int (*)[__ARM_mve_type_float16x8_t][__ARM_mve_type_fp_n]: __arm_vmulq_n_f16 (__ARM_mve_coerce(__p0, float16x8_t), __ARM_mve_coerce(__p1, float16_t)), \\\n-  int (*)[__ARM_mve_type_float32x4_t][__ARM_mve_type_fp_n]: __arm_vmulq_n_f32 (__ARM_mve_coerce(__p0, float32x4_t), __ARM_mve_coerce(__p1, float32_t)), \\\n+  int (*)[__ARM_mve_type_float16x8_t][__ARM_mve_type_fp_n]: __arm_vmulq_n_f16 (__ARM_mve_coerce(__p0, float16x8_t), __ARM_mve_coerce2(__p1, double)), \\\n+  int (*)[__ARM_mve_type_float32x4_t][__ARM_mve_type_fp_n]: __arm_vmulq_n_f32 (__ARM_mve_coerce(__p0, float32x4_t), __ARM_mve_coerce2(__p1, double)), \\\n   int (*)[__ARM_mve_type_int8x16_t][__ARM_mve_type_int8x16_t]: __arm_vmulq_s8 (__ARM_mve_coerce(__p0, int8x16_t), __ARM_mve_coerce(__p1, int8x16_t)), \\\n   int (*)[__ARM_mve_type_int16x8_t][__ARM_mve_type_int16x8_t]: __arm_vmulq_s16 (__ARM_mve_coerce(__p0, int16x8_t), __ARM_mve_coerce(__p1, int16x8_t)), \\\n   int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int32x4_t]: __arm_vmulq_s32 (__ARM_mve_coerce(__p0, int32x4_t), __ARM_mve_coerce(__p1, int32x4_t)), \\\n@@ -36029,8 +36032,8 @@ extern void *__ARM_undef;\n   int (*)[__ARM_mve_type_uint8x16_t][__ARM_mve_type_int_n]: __arm_vcmpeqq_n_u8 (__ARM_mve_coerce(__p0, uint8x16_t), __ARM_mve_coerce(__p1, uint8_t)), \\\n   int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_int_n]: __arm_vcmpeqq_n_u16 (__ARM_mve_coerce(__p0, uint16x8_t), __ARM_mve_coerce(__p1, uint16_t)), \\\n   int (*)[__ARM_mve_type_uint32x4_t][__ARM_mve_type_int_n]: __arm_vcmpeqq_n_u32 (__ARM_mve_coerce(__p0, uint32x4_t), __ARM_mve_coerce(__p1, uint32_t)), \\\n-  int (*)[__ARM_mve_type_float16x8_t][__ARM_mve_type_fp_n]: __arm_vcmpeqq_n_f16 (__ARM_mve_coerce(__p0, float16x8_t), __ARM_mve_coerce(__p1, float16_t)), \\\n-  int (*)[__ARM_mve_type_float32x4_t][__ARM_mve_type_fp_n]: __arm_vcmpeqq_n_f32 (__ARM_mve_coerce(__p0, float32x4_t), __ARM_mve_coerce(__p1, float32_t)), \\\n+  int (*)[__ARM_mve_type_float16x8_t][__ARM_mve_type_fp_n]: __arm_vcmpeqq_n_f16 (__ARM_mve_coerce(__p0, float16x8_t), __ARM_mve_coerce2(__p1, double)), \\\n+  int (*)[__ARM_mve_type_float32x4_t][__ARM_mve_type_fp_n]: __arm_vcmpeqq_n_f32 (__ARM_mve_coerce(__p0, float32x4_t), __ARM_mve_coerce2(__p1, double)), \\\n   int (*)[__ARM_mve_type_int8x16_t][__ARM_mve_type_int8x16_t]: __arm_vcmpeqq_s8 (__ARM_mve_coerce(__p0, int8x16_t), __ARM_mve_coerce(__p1, int8x16_t)), \\\n   int (*)[__ARM_mve_type_int16x8_t][__ARM_mve_type_int16x8_t]: __arm_vcmpeqq_s16 (__ARM_mve_coerce(__p0, int16x8_t), __ARM_mve_coerce(__p1, int16x8_t)), \\\n   int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int32x4_t]: __arm_vcmpeqq_s32 (__ARM_mve_coerce(__p0, int32x4_t), __ARM_mve_coerce(__p1, int32x4_t)), \\\n@@ -36069,8 +36072,8 @@ extern void *__ARM_undef;\n   int (*)[__ARM_mve_type_uint32x4_t][__ARM_mve_type_int_n]: __arm_vcmpeqq_m_n_u32 (__ARM_mve_coerce(__p0, uint32x4_t), __ARM_mve_coerce(__p1, uint32_t), p2), \\\n   int (*)[__ARM_mve_type_float16x8_t][__ARM_mve_type_float16x8_t]: __arm_vcmpeqq_m_f16 (__ARM_mve_coerce(__p0, float16x8_t), __ARM_mve_coerce(__p1, float16x8_t), p2), \\\n   int (*)[__ARM_mve_type_float32x4_t][__ARM_mve_type_float32x4_t]: __arm_vcmpeqq_m_f32 (__ARM_mve_coerce(__p0, float32x4_t), __ARM_mve_coerce(__p1, float32x4_t), p2), \\\n-  int (*)[__ARM_mve_type_float16x8_t][__ARM_mve_type_fp_n]: __arm_vcmpeqq_m_n_f16 (__ARM_mve_coerce(__p0, float16x8_t), __ARM_mve_coerce(__p1, float16_t), p2), \\\n-  int (*)[__ARM_mve_type_float32x4_t][__ARM_mve_type_fp_n]: __arm_vcmpeqq_m_n_f32 (__ARM_mve_coerce(__p0, float32x4_t), __ARM_mve_coerce(__p1, float32_t), p2));})\n+  int (*)[__ARM_mve_type_float16x8_t][__ARM_mve_type_fp_n]: __arm_vcmpeqq_m_n_f16 (__ARM_mve_coerce(__p0, float16x8_t), __ARM_mve_coerce2(__p1, double), p2), \\\n+  int (*)[__ARM_mve_type_float32x4_t][__ARM_mve_type_fp_n]: __arm_vcmpeqq_m_n_f32 (__ARM_mve_coerce(__p0, float32x4_t), __ARM_mve_coerce2(__p1, double), p2));})\n \n #define __arm_vcmpgtq(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n   __typeof(p1) __p1 = (p1); \\\n@@ -36083,8 +36086,8 @@ extern void *__ARM_undef;\n   int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int_n]: __arm_vcmpgtq_n_s32 (__ARM_mve_coerce(__p0, int32x4_t), __ARM_mve_coerce(__p1, int32_t)), \\\n   int (*)[__ARM_mve_type_float16x8_t][__ARM_mve_type_float16x8_t]: __arm_vcmpgtq_f16 (__ARM_mve_coerce(__p0, float16x8_t), __ARM_mve_coerce(__p1, float16x8_t)), \\\n   int (*)[__ARM_mve_type_float32x4_t][__ARM_mve_type_float32x4_t]: __arm_vcmpgtq_f32 (__ARM_mve_coerce(__p0, float32x4_t), __ARM_mve_coerce(__p1, float32x4_t)), \\\n-  int (*)[__ARM_mve_type_float16x8_t][__ARM_mve_type_fp_n]: __arm_vcmpgtq_n_f16 (__ARM_mve_coerce(__p0, float16x8_t), __ARM_mve_coerce(__p1, float16_t)), \\\n-  int (*)[__ARM_mve_type_float32x4_t][__ARM_mve_type_fp_n]: __arm_vcmpgtq_n_f32 (__ARM_mve_coerce(__p0, float32x4_t), __ARM_mve_coerce(__p1, float32_t)));})\n+  int (*)[__ARM_mve_type_float16x8_t][__ARM_mve_type_fp_n]: __arm_vcmpgtq_n_f16 (__ARM_mve_coerce(__p0, float16x8_t), __ARM_mve_coerce2(__p1, double)), \\\n+  int (*)[__ARM_mve_type_float32x4_t][__ARM_mve_type_fp_n]: __arm_vcmpgtq_n_f32 (__ARM_mve_coerce(__p0, float32x4_t), __ARM_mve_coerce2(__p1, double)));})\n \n #define __arm_vcmpleq(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n   __typeof(p1) __p1 = (p1); \\\n@@ -36097,8 +36100,8 @@ extern void *__ARM_undef;\n   int (*)[__ARM_mve_type_int8x16_t][__ARM_mve_type_int_n]: __arm_vcmpleq_n_s8 (__ARM_mve_coerce(__p0, int8x16_t), __ARM_mve_coerce(__p1, int8_t)), \\\n   int (*)[__ARM_mve_type_int16x8_t][__ARM_mve_type_int_n]: __arm_vcmpleq_n_s16 (__ARM_mve_coerce(__p0, int16x8_t), __ARM_mve_coerce(__p1, int16_t)), \\\n   int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int_n]: __arm_vcmpleq_n_s32 (__ARM_mve_coerce(__p0, int32x4_t), __ARM_mve_coerce(__p1, int32_t)), \\\n-  int (*)[__ARM_mve_type_float16x8_t][__ARM_mve_type_fp_n]: __arm_vcmpleq_n_f16 (__ARM_mve_coerce(__p0, float16x8_t), __ARM_mve_coerce(__p1, float16_t)), \\\n-  int (*)[__ARM_mve_type_float32x4_t][__ARM_mve_type_fp_n]: __arm_vcmpleq_n_f32 (__ARM_mve_coerce(__p0, float32x4_t), __ARM_mve_coerce(__p1, float32_t)));})\n+  int (*)[__ARM_mve_type_float16x8_t][__ARM_mve_type_fp_n]: __arm_vcmpleq_n_f16 (__ARM_mve_coerce(__p0, float16x8_t), __ARM_mve_coerce2(__p1, double)), \\\n+  int (*)[__ARM_mve_type_float32x4_t][__ARM_mve_type_fp_n]: __arm_vcmpleq_n_f32 (__ARM_mve_coerce(__p0, float32x4_t), __ARM_mve_coerce2(__p1, double)));})\n \n #define __arm_vcmpltq(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n   __typeof(p1) __p1 = (p1); \\\n@@ -36111,8 +36114,8 @@ extern void *__ARM_undef;\n   int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int_n]: __arm_vcmpltq_n_s32 (__ARM_mve_coerce(__p0, int32x4_t), __ARM_mve_coerce(__p1, int32_t)), \\\n   int (*)[__ARM_mve_type_float16x8_t][__ARM_mve_type_float16x8_t]: __arm_vcmpltq_f16 (__ARM_mve_coerce(__p0, float16x8_t), __ARM_mve_coerce(__p1, float16x8_t)), \\\n   int (*)[__ARM_mve_type_float32x4_t][__ARM_mve_type_float32x4_t]: __arm_vcmpltq_f32 (__ARM_mve_coerce(__p0, float32x4_t), __ARM_mve_coerce(__p1, float32x4_t)), \\\n-  int (*)[__ARM_mve_type_float16x8_t][__ARM_mve_type_fp_n]: __arm_vcmpltq_n_f16 (__ARM_mve_coerce(__p0, float16x8_t), __ARM_mve_coerce(__p1, float16_t)), \\\n-  int (*)[__ARM_mve_type_float32x4_t][__ARM_mve_type_fp_n]: __arm_vcmpltq_n_f32 (__ARM_mve_coerce(__p0, float32x4_t), __ARM_mve_coerce(__p1, float32_t)));})\n+  int (*)[__ARM_mve_type_float16x8_t][__ARM_mve_type_fp_n]: __arm_vcmpltq_n_f16 (__ARM_mve_coerce(__p0, float16x8_t), __ARM_mve_coerce2(__p1, double)), \\\n+  int (*)[__ARM_mve_type_float32x4_t][__ARM_mve_type_fp_n]: __arm_vcmpltq_n_f32 (__ARM_mve_coerce(__p0, float32x4_t), __ARM_mve_coerce2(__p1, double)));})\n \n #define __arm_vcmpneq(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n   __typeof(p1) __p1 = (p1); \\\n@@ -36123,8 +36126,8 @@ extern void *__ARM_undef;\n   int (*)[__ARM_mve_type_uint8x16_t][__ARM_mve_type_int_n]: __arm_vcmpneq_n_u8 (__ARM_mve_coerce(__p0, uint8x16_t), __ARM_mve_coerce(__p1, uint8_t)), \\\n   int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_int_n]: __arm_vcmpneq_n_u16 (__ARM_mve_coerce(__p0, uint16x8_t), __ARM_mve_coerce(__p1, uint16_t)), \\\n   int (*)[__ARM_mve_type_uint32x4_t][__ARM_mve_type_int_n]: __arm_vcmpneq_n_u32 (__ARM_mve_coerce(__p0, uint32x4_t), __ARM_mve_coerce(__p1, uint32_t)), \\\n-  int (*)[__ARM_mve_type_float16x8_t][__ARM_mve_type_fp_n]: __arm_vcmpneq_n_f16 (__ARM_mve_coerce(__p0, float16x8_t), __ARM_mve_coerce(__p1, float16_t)), \\\n-  int (*)[__ARM_mve_type_float32x4_t][__ARM_mve_type_fp_n]: __arm_vcmpneq_n_f32 (__ARM_mve_coerce(__p0, float32x4_t), __ARM_mve_coerce(__p1, float32_t)), \\\n+  int (*)[__ARM_mve_type_float16x8_t][__ARM_mve_type_fp_n]: __arm_vcmpneq_n_f16 (__ARM_mve_coerce(__p0, float16x8_t), __ARM_mve_coerce2(__p1, double)), \\\n+  int (*)[__ARM_mve_type_float32x4_t][__ARM_mve_type_fp_n]: __arm_vcmpneq_n_f32 (__ARM_mve_coerce(__p0, float32x4_t), __ARM_mve_coerce2(__p1, double)), \\\n   int (*)[__ARM_mve_type_int8x16_t][__ARM_mve_type_int8x16_t]: __arm_vcmpneq_s8 (__ARM_mve_coerce(__p0, int8x16_t), __ARM_mve_coerce(__p1, int8x16_t)), \\\n   int (*)[__ARM_mve_type_int16x8_t][__ARM_mve_type_int16x8_t]: __arm_vcmpneq_s16 (__ARM_mve_coerce(__p0, int16x8_t), __ARM_mve_coerce(__p1, int16x8_t)), \\\n   int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int32x4_t]: __arm_vcmpneq_s32 (__ARM_mve_coerce(__p0, int32x4_t), __ARM_mve_coerce(__p1, int32x4_t)), \\\n@@ -36179,8 +36182,8 @@ extern void *__ARM_undef;\n #define __arm_vmaxnmavq(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n   __typeof(p1) __p1 = (p1); \\\n   _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n-  int (*)[__ARM_mve_type_fp_n][__ARM_mve_type_float16x8_t]: __arm_vmaxnmavq_f16 (__ARM_mve_coerce(__p0, float16_t), __ARM_mve_coerce(__p1, float16x8_t)), \\\n-  int (*)[__ARM_mve_type_fp_n][__ARM_mve_type_float32x4_t]: __arm_vmaxnmavq_f32 (__ARM_mve_coerce(__p0, float32_t), __ARM_mve_coerce(__p1, float32x4_t)));})\n+  int (*)[__ARM_mve_type_fp_n][__ARM_mve_type_float16x8_t]: __arm_vmaxnmavq_f16 (__ARM_mve_coerce2(__p0, double), __ARM_mve_coerce(__p1, float16x8_t)), \\\n+  int (*)[__ARM_mve_type_fp_n][__ARM_mve_type_float32x4_t]: __arm_vmaxnmavq_f32 (__ARM_mve_coerce2(__p0, double), __ARM_mve_coerce(__p1, float32x4_t)));})\n \n #define __arm_vmaxnmq(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n   __typeof(p1) __p1 = (p1); \\\n@@ -36191,14 +36194,14 @@ extern void *__ARM_undef;\n #define __arm_vmaxnmvq(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n   __typeof(p1) __p1 = (p1); \\\n   _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n-  int (*)[__ARM_mve_type_fp_n][__ARM_mve_type_float16x8_t]: __arm_vmaxnmvq_f16 (__ARM_mve_coerce(__p0, float16_t), __ARM_mve_coerce(__p1, float16x8_t)), \\\n-  int (*)[__ARM_mve_type_fp_n][__ARM_mve_type_float32x4_t]: __arm_vmaxnmvq_f32 (__ARM_mve_coerce(__p0, float32_t), __ARM_mve_coerce(__p1, float32x4_t)));})\n+  int (*)[__ARM_mve_type_fp_n][__ARM_mve_type_float16x8_t]: __arm_vmaxnmvq_f16 (__ARM_mve_coerce2(__p0, double), __ARM_mve_coerce(__p1, float16x8_t)), \\\n+  int (*)[__ARM_mve_type_fp_n][__ARM_mve_type_float32x4_t]: __arm_vmaxnmvq_f32 (__ARM_mve_coerce2(__p0, double), __ARM_mve_coerce(__p1, float32x4_t)));})\n \n #define __arm_vmaxnmvq(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n   __typeof(p1) __p1 = (p1); \\\n   _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n-  int (*)[__ARM_mve_type_fp_n][__ARM_mve_type_float16x8_t]: __arm_vmaxnmvq_f16 (__ARM_mve_coerce(__p0, float16_t), __ARM_mve_coerce(__p1, float16x8_t)), \\\n-  int (*)[__ARM_mve_type_fp_n][__ARM_mve_type_float32x4_t]: __arm_vmaxnmvq_f32 (__ARM_mve_coerce(__p0, float32_t), __ARM_mve_coerce(__p1, float32x4_t)));})\n+  int (*)[__ARM_mve_type_fp_n][__ARM_mve_type_float16x8_t]: __arm_vmaxnmvq_f16 (__ARM_mve_coerce2(__p0, double), __ARM_mve_coerce(__p1, float16x8_t)), \\\n+  int (*)[__ARM_mve_type_fp_n][__ARM_mve_type_float32x4_t]: __arm_vmaxnmvq_f32 (__ARM_mve_coerce2(__p0, double), __ARM_mve_coerce(__p1, float32x4_t)));})\n \n #define __arm_vminnmaq(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n   __typeof(p1) __p1 = (p1); \\\n@@ -36209,8 +36212,8 @@ extern void *__ARM_undef;\n #define __arm_vminnmavq(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n   __typeof(p1) __p1 = (p1); \\\n   _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n-  int (*)[__ARM_mve_type_fp_n][__ARM_mve_type_float16x8_t]: __arm_vminnmavq_f16 (__ARM_mve_coerce(__p0, float16_t), __ARM_mve_coerce(__p1, float16x8_t)), \\\n-  int (*)[__ARM_mve_type_fp_n][__ARM_mve_type_float32x4_t]: __arm_vminnmavq_f32 (__ARM_mve_coerce(__p0, float32_t), __ARM_mve_coerce(__p1, float32x4_t)));})\n+  int (*)[__ARM_mve_type_fp_n][__ARM_mve_type_float16x8_t]: __arm_vminnmavq_f16 (__ARM_mve_coerce2(__p0, double), __ARM_mve_coerce(__p1, float16x8_t)), \\\n+  int (*)[__ARM_mve_type_fp_n][__ARM_mve_type_float32x4_t]: __arm_vminnmavq_f32 (__ARM_mve_coerce2(__p0, double), __ARM_mve_coerce(__p1, float32x4_t)));})\n \n #define __arm_vbrsrq(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n   _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n@@ -36232,8 +36235,8 @@ extern void *__ARM_undef;\n #define __arm_vsubq(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n   __typeof(p1) __p1 = (p1); \\\n   _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n-  int (*)[__ARM_mve_type_float16x8_t][__ARM_mve_type_fp_n]: __arm_vsubq_n_f16 (__ARM_mve_coerce(__p0, float16x8_t), __ARM_mve_coerce(__p1, float16_t)), \\\n-  int (*)[__ARM_mve_type_float32x4_t][__ARM_mve_type_fp_n]: __arm_vsubq_n_f32 (__ARM_mve_coerce(__p0, float32x4_t), __ARM_mve_coerce(__p1, float32_t)), \\\n+  int (*)[__ARM_mve_type_float16x8_t][__ARM_mve_type_fp_n]: __arm_vsubq_n_f16 (__ARM_mve_coerce(__p0, float16x8_t), __ARM_mve_coerce2(__p1, double)), \\\n+  int (*)[__ARM_mve_type_float32x4_t][__ARM_mve_type_fp_n]: __arm_vsubq_n_f32 (__ARM_mve_coerce(__p0, float32x4_t), __ARM_mve_coerce2(__p1, double)), \\\n   int (*)[__ARM_mve_type_int8x16_t][__ARM_mve_type_int_n]: __arm_vsubq_n_s8 (__ARM_mve_coerce(__p0, int8x16_t), __ARM_mve_coerce(__p1, int8_t)), \\\n   int (*)[__ARM_mve_type_int16x8_t][__ARM_mve_type_int_n]: __arm_vsubq_n_s16 (__ARM_mve_coerce(__p0, int16x8_t), __ARM_mve_coerce(__p1, int16_t)), \\\n   int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int_n]: __arm_vsubq_n_s32 (__ARM_mve_coerce(__p0, int32x4_t), __ARM_mve_coerce(__p1, int32_t)), \\\n@@ -36252,8 +36255,8 @@ extern void *__ARM_undef;\n #define __arm_vminnmvq(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n   __typeof(p1) __p1 = (p1); \\\n   _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n-  int (*)[__ARM_mve_type_fp_n][__ARM_mve_type_float16x8_t]: __arm_vminnmvq_f16 (__ARM_mve_coerce(__p0, float16_t), __ARM_mve_coerce(__p1, float16x8_t)), \\\n-  int (*)[__ARM_mve_type_fp_n][__ARM_mve_type_float32x4_t]: __arm_vminnmvq_f32 (__ARM_mve_coerce(__p0, float32_t), __ARM_mve_coerce(__p1, float32x4_t)));})\n+  int (*)[__ARM_mve_type_fp_n][__ARM_mve_type_float16x8_t]: __arm_vminnmvq_f16 (__ARM_mve_coerce2(__p0, double), __ARM_mve_coerce(__p1, float16x8_t)), \\\n+  int (*)[__ARM_mve_type_fp_n][__ARM_mve_type_float32x4_t]: __arm_vminnmvq_f32 (__ARM_mve_coerce2(__p0, double), __ARM_mve_coerce(__p1, float32x4_t)));})\n \n #define __arm_vshlq_r(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n   _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n@@ -37011,8 +37014,8 @@ extern void *__ARM_undef;\n   int (*)[__ARM_mve_type_int8x16_t][__ARM_mve_type_int_n]: __arm_vcmpgtq_m_n_s8 (__ARM_mve_coerce(__p0, int8x16_t), __ARM_mve_coerce(__p1, int8_t), p2), \\\n   int (*)[__ARM_mve_type_int16x8_t][__ARM_mve_type_int_n]: __arm_vcmpgtq_m_n_s16 (__ARM_mve_coerce(__p0, int16x8_t), __ARM_mve_coerce(__p1, int16_t), p2), \\\n   int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int_n]: __arm_vcmpgtq_m_n_s32 (__ARM_mve_coerce(__p0, int32x4_t), __ARM_mve_coerce(__p1, int32_t), p2), \\\n-  int (*)[__ARM_mve_type_float16x8_t][__ARM_mve_type_fp_n]: __arm_vcmpgtq_m_n_f16 (__ARM_mve_coerce(__p0, float16x8_t), __ARM_mve_coerce(__p1, float16_t), p2), \\\n-  int (*)[__ARM_mve_type_float32x4_t][__ARM_mve_type_fp_n]: __arm_vcmpgtq_m_n_f32 (__ARM_mve_coerce(__p0, float32x4_t), __ARM_mve_coerce(__p1, float32_t), p2), \\\n+  int (*)[__ARM_mve_type_float16x8_t][__ARM_mve_type_fp_n]: __arm_vcmpgtq_m_n_f16 (__ARM_mve_coerce(__p0, float16x8_t), __ARM_mve_coerce2(__p1, double), p2), \\\n+  int (*)[__ARM_mve_type_float32x4_t][__ARM_mve_type_fp_n]: __arm_vcmpgtq_m_n_f32 (__ARM_mve_coerce(__p0, float32x4_t), __ARM_mve_coerce2(__p1, double), p2), \\\n   int (*)[__ARM_mve_type_float16x8_t][__ARM_mve_type_float16x8_t]: __arm_vcmpgtq_m_f16 (__ARM_mve_coerce(__p0, float16x8_t), __ARM_mve_coerce(__p1, float16x8_t), p2), \\\n   int (*)[__ARM_mve_type_float32x4_t][__ARM_mve_type_float32x4_t]: __arm_vcmpgtq_m_f32 (__ARM_mve_coerce(__p0, float32x4_t), __ARM_mve_coerce(__p1, float32x4_t), p2));})\n \n@@ -37027,8 +37030,8 @@ extern void *__ARM_undef;\n   int (*)[__ARM_mve_type_int8x16_t][__ARM_mve_type_int_n]: __arm_vcmpleq_m_n_s8 (__ARM_mve_coerce(__p0, int8x16_t), __ARM_mve_coerce(__p1, int8_t), p2), \\\n   int (*)[__ARM_mve_type_int16x8_t][__ARM_mve_type_int_n]: __arm_vcmpleq_m_n_s16 (__ARM_mve_coerce(__p0, int16x8_t), __ARM_mve_coerce(__p1, int16_t), p2), \\\n   int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int_n]: __arm_vcmpleq_m_n_s32 (__ARM_mve_coerce(__p0, int32x4_t), __ARM_mve_coerce(__p1, int32_t), p2), \\\n-  int (*)[__ARM_mve_type_float16x8_t][__ARM_mve_type_fp_n]: __arm_vcmpleq_m_n_f16 (__ARM_mve_coerce(__p0, float16x8_t), __ARM_mve_coerce(__p1, float16_t), p2), \\\n-  int (*)[__ARM_mve_type_float32x4_t][__ARM_mve_type_fp_n]: __arm_vcmpleq_m_n_f32 (__ARM_mve_coerce(__p0, float32x4_t), __ARM_mve_coerce(__p1, float32_t), p2));})\n+  int (*)[__ARM_mve_type_float16x8_t][__ARM_mve_type_fp_n]: __arm_vcmpleq_m_n_f16 (__ARM_mve_coerce(__p0, float16x8_t), __ARM_mve_coerce2(__p1, double), p2), \\\n+  int (*)[__ARM_mve_type_float32x4_t][__ARM_mve_type_fp_n]: __arm_vcmpleq_m_n_f32 (__ARM_mve_coerce(__p0, float32x4_t), __ARM_mve_coerce2(__p1, double), p2));})\n \n #define __arm_vcmpltq_m(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n   __typeof(p1) __p1 = (p1); \\\n@@ -37041,8 +37044,8 @@ extern void *__ARM_undef;\n   int (*)[__ARM_mve_type_int8x16_t][__ARM_mve_type_int_n]: __arm_vcmpltq_m_n_s8 (__ARM_mve_coerce(__p0, int8x16_t), __ARM_mve_coerce(__p1, int8_t), p2), \\\n   int (*)[__ARM_mve_type_int16x8_t][__ARM_mve_type_int_n]: __arm_vcmpltq_m_n_s16 (__ARM_mve_coerce(__p0, int16x8_t), __ARM_mve_coerce(__p1, int16_t), p2), \\\n   int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int_n]: __arm_vcmpltq_m_n_s32 (__ARM_mve_coerce(__p0, int32x4_t), __ARM_mve_coerce(__p1, int32_t), p2), \\\n-  int (*)[__ARM_mve_type_float16x8_t][__ARM_mve_type_fp_n]: __arm_vcmpltq_m_n_f16 (__ARM_mve_coerce(__p0, float16x8_t), __ARM_mve_coerce(__p1, float16_t), p2), \\\n-  int (*)[__ARM_mve_type_float32x4_t][__ARM_mve_type_fp_n]: __arm_vcmpltq_m_n_f32 (__ARM_mve_coerce(__p0, float32x4_t), __ARM_mve_coerce(__p1, float32_t), p2));})\n+  int (*)[__ARM_mve_type_float16x8_t][__ARM_mve_type_fp_n]: __arm_vcmpltq_m_n_f16 (__ARM_mve_coerce(__p0, float16x8_t), __ARM_mve_coerce2(__p1, double), p2), \\\n+  int (*)[__ARM_mve_type_float32x4_t][__ARM_mve_type_fp_n]: __arm_vcmpltq_m_n_f32 (__ARM_mve_coerce(__p0, float32x4_t), __ARM_mve_coerce2(__p1, double), p2));})\n \n #define __arm_vcmpneq_m(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n   __typeof(p1) __p1 = (p1); \\\n@@ -37061,8 +37064,8 @@ extern void *__ARM_undef;\n   int (*)[__ARM_mve_type_uint8x16_t][__ARM_mve_type_int_n]: __arm_vcmpneq_m_n_u8 (__ARM_mve_coerce(__p0, uint8x16_t), __ARM_mve_coerce(__p1, uint8_t), p2), \\\n   int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_int_n]: __arm_vcmpneq_m_n_u16 (__ARM_mve_coerce(__p0, uint16x8_t), __ARM_mve_coerce(__p1, uint16_t), p2), \\\n   int (*)[__ARM_mve_type_uint32x4_t][__ARM_mve_type_int_n]: __arm_vcmpneq_m_n_u32 (__ARM_mve_coerce(__p0, uint32x4_t), __ARM_mve_coerce(__p1, uint32_t), p2), \\\n-  int (*)[__ARM_mve_type_float16x8_t][__ARM_mve_type_fp_n]: __arm_vcmpneq_m_n_f16 (__ARM_mve_coerce(__p0, float16x8_t), __ARM_mve_coerce(__p1, float16_t), p2), \\\n-  int (*)[__ARM_mve_type_float32x4_t][__ARM_mve_type_fp_n]: __arm_vcmpneq_m_n_f32 (__ARM_mve_coerce(__p0, float32x4_t), __ARM_mve_coerce(__p1, float32_t), p2));})\n+  int (*)[__ARM_mve_type_float16x8_t][__ARM_mve_type_fp_n]: __arm_vcmpneq_m_n_f16 (__ARM_mve_coerce(__p0, float16x8_t), __ARM_mve_coerce2(__p1, double), p2), \\\n+  int (*)[__ARM_mve_type_float32x4_t][__ARM_mve_type_fp_n]: __arm_vcmpneq_m_n_f32 (__ARM_mve_coerce(__p0, float32x4_t), __ARM_mve_coerce2(__p1, double), p2));})\n \n #define __arm_vcvtbq_m(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n   __typeof(p1) __p1 = (p1); \\\n@@ -37116,8 +37119,8 @@ extern void *__ARM_undef;\n   __typeof(p1) __p1 = (p1); \\\n   __typeof(p2) __p2 = (p2); \\\n   _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)][__ARM_mve_typeid(__p2)])0, \\\n-  int (*)[__ARM_mve_type_float16x8_t][__ARM_mve_type_float16x8_t][__ARM_mve_type_fp_n]: __arm_vfmaq_n_f16 (__ARM_mve_coerce(__p0, float16x8_t), __ARM_mve_coerce(__p1, float16x8_t), __ARM_mve_coerce(__p2, float16_t)), \\\n-  int (*)[__ARM_mve_type_float32x4_t][__ARM_mve_type_float32x4_t][__ARM_mve_type_fp_n]: __arm_vfmaq_n_f32 (__ARM_mve_coerce(__p0, float32x4_t), __ARM_mve_coerce(__p1, float32x4_t), __ARM_mve_coerce(__p2, float32_t)), \\\n+  int (*)[__ARM_mve_type_float16x8_t][__ARM_mve_type_float16x8_t][__ARM_mve_type_fp_n]: __arm_vfmaq_n_f16 (__ARM_mve_coerce(__p0, float16x8_t), __ARM_mve_coerce(__p1, float16x8_t), __ARM_mve_coerce2(__p2, double)), \\\n+  int (*)[__ARM_mve_type_float32x4_t][__ARM_mve_type_float32x4_t][__ARM_mve_type_fp_n]: __arm_vfmaq_n_f32 (__ARM_mve_coerce(__p0, float32x4_t), __ARM_mve_coerce(__p1, float32x4_t), __ARM_mve_coerce2(__p2, double)), \\\n   int (*)[__ARM_mve_type_float16x8_t][__ARM_mve_type_float16x8_t][__ARM_mve_type_float16x8_t]: __arm_vfmaq_f16 (__ARM_mve_coerce(__p0, float16x8_t), __ARM_mve_coerce(__p1, float16x8_t), __ARM_mve_coerce(__p2, float16x8_t)), \\\n   int (*)[__ARM_mve_type_float32x4_t][__ARM_mve_type_float32x4_t][__ARM_mve_type_float32x4_t]: __arm_vfmaq_f32 (__ARM_mve_coerce(__p0, float32x4_t), __ARM_mve_coerce(__p1, float32x4_t), __ARM_mve_coerce(__p2, float32x4_t)));})\n \n@@ -37132,8 +37135,8 @@ extern void *__ARM_undef;\n   __typeof(p1) __p1 = (p1); \\\n   __typeof(p2) __p2 = (p2); \\\n   _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)][__ARM_mve_typeid(__p2)])0, \\\n-  int (*)[__ARM_mve_type_float16x8_t][__ARM_mve_type_float16x8_t][__ARM_mve_type_fp_n]: __arm_vfmasq_n_f16 (__ARM_mve_coerce(__p0, float16x8_t), __ARM_mve_coerce(__p1, float16x8_t), __ARM_mve_coerce(__p2, float16_t)), \\\n-  int (*)[__ARM_mve_type_float32x4_t][__ARM_mve_type_float32x4_t][__ARM_mve_type_fp_n]: __arm_vfmasq_n_f32 (__ARM_mve_coerce(__p0, float32x4_t), __ARM_mve_coerce(__p1, float32x4_t), __ARM_mve_coerce(__p2, float32_t)));})\n+  int (*)[__ARM_mve_type_float16x8_t][__ARM_mve_type_float16x8_t][__ARM_mve_type_fp_n]: __arm_vfmasq_n_f16 (__ARM_mve_coerce(__p0, float16x8_t), __ARM_mve_coerce(__p1, float16x8_t), __ARM_mve_coerce2(__p2, double)), \\\n+  int (*)[__ARM_mve_type_float32x4_t][__ARM_mve_type_float32x4_t][__ARM_mve_type_fp_n]: __arm_vfmasq_n_f32 (__ARM_mve_coerce(__p0, float32x4_t), __ARM_mve_coerce(__p1, float32x4_t), __ARM_mve_coerce2(__p2, double)));})\n \n #define __arm_vmaxnmaq_m(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n   __typeof(p1) __p1 = (p1); \\\n@@ -37156,14 +37159,14 @@ extern void *__ARM_undef;\n #define __arm_vmaxnmavq_p(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n   __typeof(p1) __p1 = (p1); \\\n   _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n-  int (*)[__ARM_mve_type_fp_n][__ARM_mve_type_float16x8_t]: __arm_vmaxnmavq_p_f16 (__ARM_mve_coerce(__p0, float16_t), __ARM_mve_coerce(__p1, float16x8_t), p2), \\\n-  int (*)[__ARM_mve_type_fp_n][__ARM_mve_type_float32x4_t]: __arm_vmaxnmavq_p_f32 (__ARM_mve_coerce(__p0, float32_t), __ARM_mve_coerce(__p1, float32x4_t), p2));})\n+  int (*)[__ARM_mve_type_fp_n][__ARM_mve_type_float16x8_t]: __arm_vmaxnmavq_p_f16 (__ARM_mve_coerce2(__p0, double), __ARM_mve_coerce(__p1, float16x8_t), p2), \\\n+  int (*)[__ARM_mve_type_fp_n][__ARM_mve_type_float32x4_t]: __arm_vmaxnmavq_p_f32 (__ARM_mve_coerce2(__p0, double), __ARM_mve_coerce(__p1, float32x4_t), p2));})\n \n #define __arm_vmaxnmvq_p(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n   __typeof(p1) __p1 = (p1); \\\n   _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n-  int (*)[__ARM_mve_type_fp_n][__ARM_mve_type_float16x8_t]: __arm_vmaxnmvq_p_f16 (__ARM_mve_coerce(__p0, float16_t), __ARM_mve_coerce(__p1, float16x8_t), p2), \\\n-  int (*)[__ARM_mve_type_fp_n][__ARM_mve_type_float32x4_t]: __arm_vmaxnmvq_p_f32 (__ARM_mve_coerce(__p0, float32_t), __ARM_mve_coerce(__p1, float32x4_t), p2));})\n+  int (*)[__ARM_mve_type_fp_n][__ARM_mve_type_float16x8_t]: __arm_vmaxnmvq_p_f16 (__ARM_mve_coerce2(__p0, double), __ARM_mve_coerce(__p1, float16x8_t), p2), \\\n+  int (*)[__ARM_mve_type_fp_n][__ARM_mve_type_float32x4_t]: __arm_vmaxnmvq_p_f32 (__ARM_mve_coerce2(__p0, double), __ARM_mve_coerce(__p1, float32x4_t), p2));})\n \n #define __arm_vminnmaq_m(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n   __typeof(p1) __p1 = (p1); \\\n@@ -37174,14 +37177,14 @@ extern void *__ARM_undef;\n #define __arm_vminnmavq_p(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n   __typeof(p1) __p1 = (p1); \\\n   _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n-  int (*)[__ARM_mve_type_fp_n][__ARM_mve_type_float16x8_t]: __arm_vminnmavq_p_f16 (__ARM_mve_coerce(__p0, float16_t), __ARM_mve_coerce(__p1, float16x8_t), p2), \\\n-  int (*)[__ARM_mve_type_fp_n][__ARM_mve_type_float32x4_t]: __arm_vminnmavq_p_f32 (__ARM_mve_coerce(__p0, float32_t), __ARM_mve_coerce(__p1, float32x4_t), p2));})\n+  int (*)[__ARM_mve_type_fp_n][__ARM_mve_type_float16x8_t]: __arm_vminnmavq_p_f16 (__ARM_mve_coerce2(__p0, double), __ARM_mve_coerce(__p1, float16x8_t), p2), \\\n+  int (*)[__ARM_mve_type_fp_n][__ARM_mve_type_float32x4_t]: __arm_vminnmavq_p_f32 (__ARM_mve_coerce2(__p0, double), __ARM_mve_coerce(__p1, float32x4_t), p2));})\n \n #define __arm_vminnmvq_p(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n   __typeof(p1) __p1 = (p1); \\\n   _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n-  int (*)[__ARM_mve_type_fp_n][__ARM_mve_type_float16x8_t]: __arm_vminnmvq_p_f16 (__ARM_mve_coerce(__p0, float16_t), __ARM_mve_coerce(__p1, float16x8_t), p2), \\\n-  int (*)[__ARM_mve_type_fp_n][__ARM_mve_type_float32x4_t]: __arm_vminnmvq_p_f32 (__ARM_mve_coerce(__p0, float32_t), __ARM_mve_coerce(__p1, float32x4_t), p2));})\n+  int (*)[__ARM_mve_type_fp_n][__ARM_mve_type_float16x8_t]: __arm_vminnmvq_p_f16 (__ARM_mve_coerce2(__p0, double), __ARM_mve_coerce(__p1, float16x8_t), p2), \\\n+  int (*)[__ARM_mve_type_fp_n][__ARM_mve_type_float32x4_t]: __arm_vminnmvq_p_f32 (__ARM_mve_coerce2(__p0, double), __ARM_mve_coerce(__p1, float32x4_t), p2));})\n \n #define __arm_vrndnq_m(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n   __typeof(p1) __p1 = (p1); \\\n@@ -37248,8 +37251,8 @@ extern void *__ARM_undef;\n   int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int_n]: __arm_vcmpgeq_n_s32 (__ARM_mve_coerce(__p0, int32x4_t), __ARM_mve_coerce(__p1, int32_t)), \\\n   int (*)[__ARM_mve_type_float16x8_t][__ARM_mve_type_float16x8_t]: __arm_vcmpgeq_f16 (__ARM_mve_coerce(__p0, float16x8_t), __ARM_mve_coerce(__p1, float16x8_t)), \\\n   int (*)[__ARM_mve_type_float32x4_t][__ARM_mve_type_float32x4_t]: __arm_vcmpgeq_f32 (__ARM_mve_coerce(__p0, float32x4_t), __ARM_mve_coerce(__p1, float32x4_t)), \\\n-  int (*)[__ARM_mve_type_float16x8_t][__ARM_mve_type_fp_n]: __arm_vcmpgeq_n_f16 (__ARM_mve_coerce(__p0, float16x8_t), __ARM_mve_coerce(__p1, float16_t)), \\\n-  int (*)[__ARM_mve_type_float32x4_t][__ARM_mve_type_fp_n]: __arm_vcmpgeq_n_f32 (__ARM_mve_coerce(__p0, float32x4_t), __ARM_mve_coerce(__p1, float32_t)));})\n+  int (*)[__ARM_mve_type_float16x8_t][__ARM_mve_type_fp_n]: __arm_vcmpgeq_n_f16 (__ARM_mve_coerce(__p0, float16x8_t), __ARM_mve_coerce2(__p1, double)), \\\n+  int (*)[__ARM_mve_type_float32x4_t][__ARM_mve_type_fp_n]: __arm_vcmpgeq_n_f32 (__ARM_mve_coerce(__p0, float32x4_t), __ARM_mve_coerce2(__p1, double)));})\n \n #define __arm_vrshrnbq(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n   __typeof(p1) __p1 = (p1); \\\n@@ -37353,8 +37356,8 @@ extern void *__ARM_undef;\n   int (*)[__ARM_mve_type_int8x16_t][__ARM_mve_type_int_n]: __arm_vcmpgeq_m_n_s8 (__ARM_mve_coerce(__p0, int8x16_t), __ARM_mve_coerce(__p1, int8_t), p2), \\\n   int (*)[__ARM_mve_type_int16x8_t][__ARM_mve_type_int_n]: __arm_vcmpgeq_m_n_s16 (__ARM_mve_coerce(__p0, int16x8_t), __ARM_mve_coerce(__p1, int16_t), p2), \\\n   int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int_n]: __arm_vcmpgeq_m_n_s32 (__ARM_mve_coerce(__p0, int32x4_t), __ARM_mve_coerce(__p1, int32_t), p2), \\\n-  int (*)[__ARM_mve_type_float16x8_t][__ARM_mve_type_fp_n]: __arm_vcmpgeq_m_n_f16 (__ARM_mve_coerce(__p0, float16x8_t), __ARM_mve_coerce(__p1, float16_t), p2), \\\n-  int (*)[__ARM_mve_type_float32x4_t][__ARM_mve_type_fp_n]: __arm_vcmpgeq_m_n_f32 (__ARM_mve_coerce(__p0, float32x4_t), __ARM_mve_coerce(__p1, float32_t), p2), \\\n+  int (*)[__ARM_mve_type_float16x8_t][__ARM_mve_type_fp_n]: __arm_vcmpgeq_m_n_f16 (__ARM_mve_coerce(__p0, float16x8_t), __ARM_mve_coerce2(__p1, double), p2), \\\n+  int (*)[__ARM_mve_type_float32x4_t][__ARM_mve_type_fp_n]: __arm_vcmpgeq_m_n_f32 (__ARM_mve_coerce(__p0, float32x4_t), __ARM_mve_coerce2(__p1, double), p2), \\\n   int (*)[__ARM_mve_type_float16x8_t][__ARM_mve_type_float16x8_t]: __arm_vcmpgeq_m_f16 (__ARM_mve_coerce(__p0, float16x8_t), __ARM_mve_coerce(__p1, float16x8_t), p2), \\\n   int (*)[__ARM_mve_type_float32x4_t][__ARM_mve_type_float32x4_t]: __arm_vcmpgeq_m_f32 (__ARM_mve_coerce(__p0, float32x4_t), __ARM_mve_coerce(__p1, float32x4_t), p2));})\n \n@@ -37389,8 +37392,8 @@ extern void *__ARM_undef;\n   int (*)[__ARM_mve_type_uint8x16_t][__ARM_mve_type_uint8x16_t][__ARM_mve_type_int_n]: __arm_vaddq_m_n_u8 (__ARM_mve_coerce(__p0, uint8x16_t), __ARM_mve_coerce(__p1, uint8x16_t), __ARM_mve_coerce(__p2, int), p3), \\\n   int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_uint16x8_t][__ARM_mve_type_int_n]: __arm_vaddq_m_n_u16 (__ARM_mve_coerce(__p0, uint16x8_t), __ARM_mve_coerce(__p1, uint16x8_t), __ARM_mve_coerce(__p2, int), p3), \\\n   int (*)[__ARM_mve_type_uint32x4_t][__ARM_mve_type_uint32x4_t][__ARM_mve_type_int_n]: __arm_vaddq_m_n_u32 (__ARM_mve_coerce(__p0, uint32x4_t), __ARM_mve_coerce(__p1, uint32x4_t), __ARM_mve_coerce(__p2, int), p3), \\\n-  int (*)[__ARM_mve_type_float16x8_t][__ARM_mve_type_float16x8_t][__ARM_mve_type_fp_n]: __arm_vaddq_m_n_f16 (__ARM_mve_coerce(__p0, float16x8_t), __ARM_mve_coerce(__p1, float16x8_t), __ARM_mve_coerce(__p2, float16_t), p3), \\\n-  int (*)[__ARM_mve_type_float32x4_t][__ARM_mve_type_float32x4_t][__ARM_mve_type_fp_n]: __arm_vaddq_m_n_f32 (__ARM_mve_coerce(__p0, float32x4_t), __ARM_mve_coerce(__p1, float32x4_t), __ARM_mve_coerce(__p2, float32_t), p3));})\n+  int (*)[__ARM_mve_type_float16x8_t][__ARM_mve_type_float16x8_t][__ARM_mve_type_fp_n]: __arm_vaddq_m_n_f16 (__ARM_mve_coerce(__p0, float16x8_t), __ARM_mve_coerce(__p1, float16x8_t), __ARM_mve_coerce2(__p2, double), p3), \\\n+  int (*)[__ARM_mve_type_float32x4_t][__ARM_mve_type_float32x4_t][__ARM_mve_type_fp_n]: __arm_vaddq_m_n_f32 (__ARM_mve_coerce(__p0, float32x4_t), __ARM_mve_coerce(__p1, float32x4_t), __ARM_mve_coerce2(__p2, double), p3));})\n \n #define __arm_vandq_m(p0,p1,p2,p3) ({ __typeof(p0) __p0 = (p0); \\\n   __typeof(p1) __p1 = (p1); \\\n@@ -37531,15 +37534,15 @@ extern void *__ARM_undef;\n   _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)][__ARM_mve_typeid(__p2)])0, \\\n   int (*)[__ARM_mve_type_float16x8_t][__ARM_mve_type_float16x8_t][__ARM_mve_type_float16x8_t]: __arm_vfmaq_m_f16 (__ARM_mve_coerce(__p0, float16x8_t), __ARM_mve_coerce(__p1, float16x8_t), __ARM_mve_coerce(__p2, float16x8_t), p3), \\\n   int (*)[__ARM_mve_type_float32x4_t][__ARM_mve_type_float32x4_t][__ARM_mve_type_float32x4_t]: __arm_vfmaq_m_f32 (__ARM_mve_coerce(__p0, float32x4_t), __ARM_mve_coerce(__p1, float32x4_t), __ARM_mve_coerce(__p2, float32x4_t), p3), \\\n-  int (*)[__ARM_mve_type_float16x8_t][__ARM_mve_type_float16x8_t][__ARM_mve_type_fp_n]: __arm_vfmaq_m_n_f16 (__ARM_mve_coerce(__p0, float16x8_t), __ARM_mve_coerce(__p1, float16x8_t), __ARM_mve_coerce(__p2, float16_t), p3), \\\n-  int (*)[__ARM_mve_type_float32x4_t][__ARM_mve_type_float32x4_t][__ARM_mve_type_fp_n]: __arm_vfmaq_m_n_f32 (__ARM_mve_coerce(__p0, float32x4_t), __ARM_mve_coerce(__p1, float32x4_t), __ARM_mve_coerce(__p2, float32_t), p3));})\n+  int (*)[__ARM_mve_type_float16x8_t][__ARM_mve_type_float16x8_t][__ARM_mve_type_fp_n]: __arm_vfmaq_m_n_f16 (__ARM_mve_coerce(__p0, float16x8_t), __ARM_mve_coerce(__p1, float16x8_t), __ARM_mve_coerce2(__p2, double), p3), \\\n+  int (*)[__ARM_mve_type_float32x4_t][__ARM_mve_type_float32x4_t][__ARM_mve_type_fp_n]: __arm_vfmaq_m_n_f32 (__ARM_mve_coerce(__p0, float32x4_t), __ARM_mve_coerce(__p1, float32x4_t), __ARM_mve_coerce2(__p2, double), p3));})\n \n #define __arm_vfmasq_m(p0,p1,p2,p3) ({ __typeof(p0) __p0 = (p0); \\\n   __typeof(p1) __p1 = (p1); \\\n   __typeof(p2) __p2 = (p2); \\\n   _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)][__ARM_mve_typeid(__p2)])0, \\\n-  int (*)[__ARM_mve_type_float16x8_t][__ARM_mve_type_float16x8_t][__ARM_mve_type_fp_n]: __arm_vfmasq_m_n_f16 (__ARM_mve_coerce(__p0, float16x8_t), __ARM_mve_coerce(__p1, float16x8_t), __ARM_mve_coerce(__p2, float16_t), p3), \\\n-  int (*)[__ARM_mve_type_float32x4_t][__ARM_mve_type_float32x4_t][__ARM_mve_type_fp_n]: __arm_vfmasq_m_n_f32 (__ARM_mve_coerce(__p0, float32x4_t), __ARM_mve_coerce(__p1, float32x4_t), __ARM_mve_coerce(__p2, float32_t), p3));})\n+  int (*)[__ARM_mve_type_float16x8_t][__ARM_mve_type_float16x8_t][__ARM_mve_type_fp_n]: __arm_vfmasq_m_n_f16 (__ARM_mve_coerce(__p0, float16x8_t), __ARM_mve_coerce(__p1, float16x8_t), __ARM_mve_coerce2(__p2, double), p3), \\\n+  int (*)[__ARM_mve_type_float32x4_t][__ARM_mve_type_float32x4_t][__ARM_mve_type_fp_n]: __arm_vfmasq_m_n_f32 (__ARM_mve_coerce(__p0, float32x4_t), __ARM_mve_coerce(__p1, float32x4_t), __ARM_mve_coerce2(__p2, double), p3));})\n \n #define __arm_vfmsq_m(p0,p1,p2,p3) ({ __typeof(p0) __p0 = (p0); \\\n   __typeof(p1) __p1 = (p1); \\\n@@ -37580,8 +37583,8 @@ extern void *__ARM_undef;\n   int (*)[__ARM_mve_type_uint8x16_t][__ARM_mve_type_uint8x16_t][__ARM_mve_type_int_n]: __arm_vmulq_m_n_u8 (__ARM_mve_coerce(__p0, uint8x16_t), __ARM_mve_coerce(__p1, uint8x16_t), __ARM_mve_coerce(__p2, uint8_t), p3), \\\n   int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_uint16x8_t][__ARM_mve_type_int_n]: __arm_vmulq_m_n_u16 (__ARM_mve_coerce(__p0, uint16x8_t), __ARM_mve_coerce(__p1, uint16x8_t), __ARM_mve_coerce(__p2, uint16_t), p3), \\\n   int (*)[__ARM_mve_type_uint32x4_t][__ARM_mve_type_uint32x4_t][__ARM_mve_type_int_n]: __arm_vmulq_m_n_u32 (__ARM_mve_coerce(__p0, uint32x4_t), __ARM_mve_coerce(__p1, uint32x4_t), __ARM_mve_coerce(__p2, uint32_t), p3), \\\n-  int (*)[__ARM_mve_type_float16x8_t][__ARM_mve_type_float16x8_t][__ARM_mve_type_fp_n]: __arm_vmulq_m_n_f16 (__ARM_mve_coerce(__p0, float16x8_t), __ARM_mve_coerce(__p1, float16x8_t), __ARM_mve_coerce(__p2, float16_t), p3), \\\n-  int (*)[__ARM_mve_type_float32x4_t][__ARM_mve_type_float32x4_t][__ARM_mve_type_fp_n]: __arm_vmulq_m_n_f32 (__ARM_mve_coerce(__p0, float32x4_t), __ARM_mve_coerce(__p1, float32x4_t), __ARM_mve_coerce(__p2, float32_t), p3));})\n+  int (*)[__ARM_mve_type_float16x8_t][__ARM_mve_type_float16x8_t][__ARM_mve_type_fp_n]: __arm_vmulq_m_n_f16 (__ARM_mve_coerce(__p0, float16x8_t), __ARM_mve_coerce(__p1, float16x8_t), __ARM_mve_coerce2(__p2, double), p3), \\\n+  int (*)[__ARM_mve_type_float32x4_t][__ARM_mve_type_float32x4_t][__ARM_mve_type_fp_n]: __arm_vmulq_m_n_f32 (__ARM_mve_coerce(__p0, float32x4_t), __ARM_mve_coerce(__p1, float32x4_t), __ARM_mve_coerce2(__p2, double), p3));})\n \n #define __arm_vornq_m(p0,p1,p2,p3) ({ __typeof(p0) __p0 = (p0); \\\n   __typeof(p1) __p1 = (p1); \\\n@@ -37614,8 +37617,8 @@ extern void *__ARM_undef;\n   int (*)[__ARM_mve_type_uint8x16_t][__ARM_mve_type_uint8x16_t][__ARM_mve_type_int_n]: __arm_vsubq_m_n_u8 (__ARM_mve_coerce(__p0, uint8x16_t), __ARM_mve_coerce(__p1, uint8x16_t), __ARM_mve_coerce(__p2, uint8_t), p3), \\\n   int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_uint16x8_t][__ARM_mve_type_int_n]: __arm_vsubq_m_n_u16 (__ARM_mve_coerce(__p0, uint16x8_t), __ARM_mve_coerce(__p1, uint16x8_t), __ARM_mve_coerce(__p2, uint16_t), p3), \\\n   int (*)[__ARM_mve_type_uint32x4_t][__ARM_mve_type_uint32x4_t][__ARM_mve_type_int_n]: __arm_vsubq_m_n_u32 (__ARM_mve_coerce(__p0, uint32x4_t), __ARM_mve_coerce(__p1, uint32x4_t), __ARM_mve_coerce(__p2, uint32_t), p3), \\\n-  int (*)[__ARM_mve_type_float16x8_t][__ARM_mve_type_float16x8_t][__ARM_mve_type_fp_n]: __arm_vsubq_m_n_f16 (__ARM_mve_coerce(__p0, float16x8_t), __ARM_mve_coerce(__p1, float16x8_t), __ARM_mve_coerce(__p2, float16_t), p3), \\\n-  int (*)[__ARM_mve_type_float32x4_t][__ARM_mve_type_float32x4_t][__ARM_mve_type_fp_n]: __arm_vsubq_m_n_f32 (__ARM_mve_coerce(__p0, float32x4_t), __ARM_mve_coerce(__p1, float32x4_t), __ARM_mve_coerce(__p2, float32_t), p3));})\n+  int (*)[__ARM_mve_type_float16x8_t][__ARM_mve_type_float16x8_t][__ARM_mve_type_fp_n]: __arm_vsubq_m_n_f16 (__ARM_mve_coerce(__p0, float16x8_t), __ARM_mve_coerce(__p1, float16x8_t), __ARM_mve_coerce2(__p2, double), p3), \\\n+  int (*)[__ARM_mve_type_float32x4_t][__ARM_mve_type_float32x4_t][__ARM_mve_type_fp_n]: __arm_vsubq_m_n_f32 (__ARM_mve_coerce(__p0, float32x4_t), __ARM_mve_coerce(__p1, float32x4_t), __ARM_mve_coerce2(__p2, double), p3));})\n \n #define __arm_vorrq_m(p0,p1,p2,p3) ({ __typeof(p0) __p0 = (p0); \\\n   __typeof(p1) __p1 = (p1); \\\n@@ -38113,8 +38116,8 @@ extern void *__ARM_undef;\n   int (*)[__ARM_mve_type_uint32x4_t][__ARM_mve_type_int_n]: __arm_vaddq_x_n_u32 (__ARM_mve_coerce(__p1, uint32x4_t), __ARM_mve_coerce(__p2, uint32_t), p3), \\\n   int (*)[__ARM_mve_type_float16x8_t][__ARM_mve_type_float16x8_t]: __arm_vaddq_x_f16 (__ARM_mve_coerce(__p1, float16x8_t), __ARM_mve_coerce(__p2, float16x8_t), p3), \\\n   int (*)[__ARM_mve_type_float32x4_t][__ARM_mve_type_float32x4_t]: __arm_vaddq_x_f32 (__ARM_mve_coerce(__p1, float32x4_t), __ARM_mve_coerce(__p2, float32x4_t), p3), \\\n-  int (*)[__ARM_mve_type_float16x8_t][__ARM_mve_type_fp_n]: __arm_vaddq_x_n_f16 (__ARM_mve_coerce(__p1, float16x8_t), __ARM_mve_coerce(__p2, float16_t), p3), \\\n-  int (*)[__ARM_mve_type_float32x4_t][__ARM_mve_type_fp_n]: __arm_vaddq_x_n_f32 (__ARM_mve_coerce(__p1, float32x4_t), __ARM_mve_coerce(__p2, float32_t), p3));})\n+  int (*)[__ARM_mve_type_float16x8_t][__ARM_mve_type_fp_n]: __arm_vaddq_x_n_f16 (__ARM_mve_coerce(__p1, float16x8_t), __ARM_mve_coerce2(__p2, double), p3), \\\n+  int (*)[__ARM_mve_type_float32x4_t][__ARM_mve_type_fp_n]: __arm_vaddq_x_n_f32 (__ARM_mve_coerce(__p1, float32x4_t), __ARM_mve_coerce2(__p2, double), p3));})\n \n #define __arm_vandq_x(p1,p2,p3) ({ __typeof(p1) __p1 = (p1); \\\n   __typeof(p2) __p2 = (p2); \\\n@@ -38248,8 +38251,8 @@ extern void *__ARM_undef;\n   int (*)[__ARM_mve_type_uint32x4_t][__ARM_mve_type_int_n]: __arm_vmulq_x_n_u32 (__ARM_mve_coerce(__p1, uint32x4_t), __ARM_mve_coerce(__p2, uint32_t), p3), \\\n   int (*)[__ARM_mve_type_float16x8_t][__ARM_mve_type_float16x8_t]: __arm_vmulq_x_f16 (__ARM_mve_coerce(__p1, float16x8_t), __ARM_mve_coerce(__p2, float16x8_t), p3), \\\n   int (*)[__ARM_mve_type_float32x4_t][__ARM_mve_type_float32x4_t]: __arm_vmulq_x_f32 (__ARM_mve_coerce(__p1, float32x4_t), __ARM_mve_coerce(__p2, float32x4_t), p3), \\\n-  int (*)[__ARM_mve_type_float16x8_t][__ARM_mve_type_fp_n]: __arm_vmulq_x_n_f16 (__ARM_mve_coerce(__p1, float16x8_t), __ARM_mve_coerce(__p2, float16_t), p3), \\\n-  int (*)[__ARM_mve_type_float32x4_t][__ARM_mve_type_fp_n]: __arm_vmulq_x_n_f32 (__ARM_mve_coerce(__p1, float32x4_t), __ARM_mve_coerce(__p2, float32_t), p3));})\n+  int (*)[__ARM_mve_type_float16x8_t][__ARM_mve_type_fp_n]: __arm_vmulq_x_n_f16 (__ARM_mve_coerce(__p1, float16x8_t), __ARM_mve_coerce2(__p2, double), p3), \\\n+  int (*)[__ARM_mve_type_float32x4_t][__ARM_mve_type_fp_n]: __arm_vmulq_x_n_f32 (__ARM_mve_coerce(__p1, float32x4_t), __ARM_mve_coerce2(__p2, double), p3));})\n \n #define __arm_vnegq_x(p1,p2) ({ __typeof(p1) __p1 = (p1); \\\n   _Generic( (int (*)[__ARM_mve_typeid(__p1)])0, \\\n@@ -38337,8 +38340,8 @@ extern void *__ARM_undef;\n   _Generic( (int (*)[__ARM_mve_typeid(__p1)][__ARM_mve_typeid(__p2)])0, \\\n   int (*)[__ARM_mve_type_float16x8_t][__ARM_mve_type_float16x8_t]: __arm_vsubq_x_f16 (__ARM_mve_coerce(__p1, float16x8_t), __ARM_mve_coerce(__p2, float16x8_t), p3), \\\n   int (*)[__ARM_mve_type_float32x4_t][__ARM_mve_type_float32x4_t]: __arm_vsubq_x_f32 (__ARM_mve_coerce(__p1, float32x4_t), __ARM_mve_coerce(__p2, float32x4_t), p3), \\\n-  int (*)[__ARM_mve_type_float16x8_t][__ARM_mve_type_fp_n]: __arm_vsubq_x_n_f16 (__ARM_mve_coerce(__p1, float16x8_t), __ARM_mve_coerce(__p2, float16_t), p3), \\\n-  int (*)[__ARM_mve_type_float32x4_t][__ARM_mve_type_fp_n]: __arm_vsubq_x_n_f32 (__ARM_mve_coerce(__p1, float32x4_t), __ARM_mve_coerce(__p2, float32_t), p3));})\n+  int (*)[__ARM_mve_type_float16x8_t][__ARM_mve_type_fp_n]: __arm_vsubq_x_n_f16 (__ARM_mve_coerce(__p1, float16x8_t), __ARM_mve_coerce2(__p2, double), p3), \\\n+  int (*)[__ARM_mve_type_float32x4_t][__ARM_mve_type_fp_n]: __arm_vsubq_x_n_f32 (__ARM_mve_coerce(__p1, float32x4_t), __ARM_mve_coerce2(__p2, double), p3));})\n \n #define __arm_vcmulq_rot90_x(p1,p2,p3)  ({ __typeof(p1) __p1 = (p1); \\\n   __typeof(p2) __p2 = (p2); \\\n@@ -38370,8 +38373,8 @@ extern void *__ARM_undef;\n   int (*)[__ARM_mve_type_int_n][__ARM_mve_type_uint16x8_t]: __arm_vsetq_lane_u16 (__ARM_mve_coerce(__p0, uint16_t), __ARM_mve_coerce(__p1, uint16x8_t), p2), \\\n   int (*)[__ARM_mve_type_int_n][__ARM_mve_type_uint32x4_t]: __arm_vsetq_lane_u32 (__ARM_mve_coerce(__p0, uint32_t), __ARM_mve_coerce(__p1, uint32x4_t), p2), \\\n   int (*)[__ARM_mve_type_int_n][__ARM_mve_type_uint64x2_t]: __arm_vsetq_lane_u64 (__ARM_mve_coerce(__p0, uint64_t), __ARM_mve_coerce(__p1, uint64x2_t), p2), \\\n-  int (*)[__ARM_mve_type_fp_n][__ARM_mve_type_float16x8_t]: __arm_vsetq_lane_f16 (__ARM_mve_coerce(__p0, float16_t), __ARM_mve_coerce(__p1, float16x8_t), p2), \\\n-  int (*)[__ARM_mve_type_fp_n][__ARM_mve_type_float32x4_t]: __arm_vsetq_lane_f32 (__ARM_mve_coerce(__p0, float32_t), __ARM_mve_coerce(__p1, float32x4_t), p2));})\n+  int (*)[__ARM_mve_type_fp_n][__ARM_mve_type_float16x8_t]: __arm_vsetq_lane_f16 (__ARM_mve_coerce2(__p0, double), __ARM_mve_coerce(__p1, float16x8_t), p2), \\\n+  int (*)[__ARM_mve_type_fp_n][__ARM_mve_type_float32x4_t]: __arm_vsetq_lane_f32 (__ARM_mve_coerce2(__p0, double), __ARM_mve_coerce(__p1, float32x4_t), p2));})\n \n #else /* MVE Integer.  */\n \n@@ -38895,12 +38898,12 @@ extern void *__ARM_undef;\n   int (*)[__ARM_mve_type_uint8x16_t][__ARM_mve_type_uint8x16_t]: __arm_vaddq_u8 (__ARM_mve_coerce(__p0, uint8x16_t), __ARM_mve_coerce(__p1, uint8x16_t)), \\\n   int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_uint16x8_t]: __arm_vaddq_u16 (__ARM_mve_coerce(__p0, uint16x8_t), __ARM_mve_coerce(__p1, uint16x8_t)), \\\n   int (*)[__ARM_mve_type_uint32x4_t][__ARM_mve_type_uint32x4_t]: __arm_vaddq_u32 (__ARM_mve_coerce(__p0, uint32x4_t), __ARM_mve_coerce(__p1, uint32x4_t)), \\\n-  int (*)[__ARM_mve_type_uint8x16_t][__ARM_mve_type_int_n]: __arm_vaddq_n_u8 (__ARM_mve_coerce(__p0, uint8x16_t), __ARM_mve_coerce(__p1, uint8_t)), \\\n-  int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_int_n]: __arm_vaddq_n_u16 (__ARM_mve_coerce(__p0, uint16x8_t), __ARM_mve_coerce(__p1, uint16_t)), \\\n-  int (*)[__ARM_mve_type_uint32x4_t][__ARM_mve_type_int_n]: __arm_vaddq_n_u32 (__ARM_mve_coerce(__p0, uint32x4_t), __ARM_mve_coerce(__p1, uint32_t)), \\\n-  int (*)[__ARM_mve_type_int8x16_t][__ARM_mve_type_int_n]: __arm_vaddq_n_s8 (__ARM_mve_coerce(__p0, int8x16_t), __ARM_mve_coerce(__p1, int8_t)), \\\n-  int (*)[__ARM_mve_type_int16x8_t][__ARM_mve_type_int_n]: __arm_vaddq_n_s16 (__ARM_mve_coerce(__p0, int16x8_t), __ARM_mve_coerce(__p1, int16_t)), \\\n-  int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int_n]: __arm_vaddq_n_s32 (__ARM_mve_coerce(__p0, int32x4_t), __ARM_mve_coerce(__p1, int32_t)));})\n+  int (*)[__ARM_mve_type_uint8x16_t][__ARM_mve_type_int_n]: __arm_vaddq_n_u8 (__ARM_mve_coerce(__p0, uint8x16_t), __ARM_mve_coerce(__p1, int)), \\\n+  int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_int_n]: __arm_vaddq_n_u16 (__ARM_mve_coerce(__p0, uint16x8_t), __ARM_mve_coerce(__p1, int)), \\\n+  int (*)[__ARM_mve_type_uint32x4_t][__ARM_mve_type_int_n]: __arm_vaddq_n_u32 (__ARM_mve_coerce(__p0, uint32x4_t), __ARM_mve_coerce(__p1, int)), \\\n+  int (*)[__ARM_mve_type_int8x16_t][__ARM_mve_type_int_n]: __arm_vaddq_n_s8 (__ARM_mve_coerce(__p0, int8x16_t), __ARM_mve_coerce(__p1, int)), \\\n+  int (*)[__ARM_mve_type_int16x8_t][__ARM_mve_type_int_n]: __arm_vaddq_n_s16 (__ARM_mve_coerce(__p0, int16x8_t), __ARM_mve_coerce(__p1, int)), \\\n+  int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int_n]: __arm_vaddq_n_s32 (__ARM_mve_coerce(__p0, int32x4_t), __ARM_mve_coerce(__p1, int)));})\n \n #define __arm_vandq(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n   __typeof(p1) __p1 = (p1); \\"}, {"sha": "714fbf9bfe7daa4bbb0446a142e6ec7ef87d0a93", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_fp_vaddq_n.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_fp_vaddq_n.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_fp_vaddq_n.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_fp_vaddq_n.c?ref=6bd4ce64eb48a72eca300cb52773e6101d646004", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include <arm_mve.h>\n+int8x16_t foo (int8x16_t a, int16_t b)\n+{\n+  return vaddq (a, (b<<3));\n+}\n+int16x8_t foo1 (int16x8_t a, int16_t b)\n+{\n+  return vaddq (a, (b<<3));\n+}\n+int32x4_t foo2 (int32x4_t a, int16_t b)\n+{\n+  return vaddq (a, (b<<3));\n+}\n+uint8x16_t foo3 (uint8x16_t a, int16_t b)\n+{\n+  return vaddq (a, (b<<3));\n+}\n+uint16x8_t foo4 (uint16x8_t a, int16_t b)\n+{\n+  return vaddq (a, (b<<3));\n+}\n+uint32x4_t foo5 (uint32x4_t a, int16_t b)\n+{\n+  return vaddq (a, (b<<3));\n+}\n+float16x8_t foo6 (float16x8_t a)\n+{\n+  return vaddq (a, (float16_t)23.6);\n+}\n+float32x4_t foo7 (float32x4_t a)\n+{\n+  return vaddq (a, (float32_t)23.46);\n+}\n+float16x8_t foo8 (float16x8_t a)\n+{\n+  return vaddq (a, 23.6);\n+}\n+float32x4_t foo9 (float32x4_t a)\n+{\n+  return vaddq (a, 23.46);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "baa7fabe06165028c1a00340c29bbeeb3c3696fe", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_vaddq_n.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vaddq_n.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vaddq_n.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_vaddq_n.c?ref=6bd4ce64eb48a72eca300cb52773e6101d646004", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include <arm_mve.h>\n+int8x16_t foo (int8x16_t a, int16_t b)\n+{\n+  return vaddq (a, (b<<3));\n+}\n+int16x8_t foo1 (int16x8_t a, int16_t b)\n+{\n+  return vaddq (a, (b<<3));\n+}\n+int32x4_t foo2 (int32x4_t a, int16_t b)\n+{\n+  return vaddq (a, (b<<3));\n+}\n+uint8x16_t foo3 (uint8x16_t a, int16_t b)\n+{\n+  return vaddq (a, (b<<3));\n+}\n+uint16x8_t foo4 (uint16x8_t a, int16_t b)\n+{\n+  return vaddq (a, (b<<3));\n+}\n+uint32x4_t foo5 (uint32x4_t a, int16_t b)\n+{\n+  return vaddq (a, (b<<3));\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "8348098f9488e6c83f4abe07de0f733f72b9a479", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_m_n_f16-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_n_f16-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_n_f16-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_n_f16-1.c?ref=6bd4ce64eb48a72eca300cb52773e6101d646004", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+float16x8_t\n+foo1 (float16x8_t inactive, float16x8_t a, float16_t b, mve_pred16_t p)\n+{\n+  return vaddq_m (inactive, a, 23.23, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "c34cc98385fb4254abcff7261e0d5ee8f8407f9b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_m_n_f32-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_n_f32-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_n_f32-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_n_f32-1.c?ref=6bd4ce64eb48a72eca300cb52773e6101d646004", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+float32x4_t\n+foo1 (float32x4_t inactive, float32x4_t a, float32_t b, mve_pred16_t p)\n+{\n+  return vaddq_m (inactive, a, 23.23, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "3bb0167694711b4511b75b9f1664d6861b13cf71", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_x_n_f16-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_n_f16-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_n_f16-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_n_f16-1.c?ref=6bd4ce64eb48a72eca300cb52773e6101d646004", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+float16x8_t\n+foo1 (float16x8_t a, float16_t b, mve_pred16_t p)\n+{\n+  return vaddq_x (a, 23.23, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "66dedc7d7e527a0cbcf93cbae4b6d39b46bd3aee", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_x_n_f32-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_n_f32-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_n_f32-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_x_n_f32-1.c?ref=6bd4ce64eb48a72eca300cb52773e6101d646004", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+float32x4_t\n+foo1 (float32x4_t a, float32_t b, mve_pred16_t p)\n+{\n+  return vaddq_x (a, 23.23, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "909ca9364927f2ff29eebee2ecf681cd4dc0d20a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpeqq_m_n_f16-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_n_f16-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_n_f16-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_n_f16-1.c?ref=6bd4ce64eb48a72eca300cb52773e6101d646004", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+mve_pred16_t\n+foo1 (float16x8_t a, float16_t b, mve_pred16_t p)\n+{\n+  return vcmpeqq_m (a, 23.23, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "8f993af20af622d8115696b8304f52b4723a2fe7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpeqq_m_n_f32-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_n_f32-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_n_f32-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_n_f32-1.c?ref=6bd4ce64eb48a72eca300cb52773e6101d646004", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+mve_pred16_t\n+foo1 (float32x4_t a, float32_t b, mve_pred16_t p)\n+{\n+  return vcmpeqq_m (a, 23.23, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "223cffc17e548c72885d245ae89e606fe41e9739", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpeqq_n_f16-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_n_f16-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_n_f16-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_n_f16-1.c?ref=6bd4ce64eb48a72eca300cb52773e6101d646004", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+mve_pred16_t\n+foo1 (float16x8_t a, float16_t b)\n+{\n+  return vcmpeqq (a, 23.23);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "81669bd7c6026f9dbbe182f107690401f3e8446f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpeqq_n_f32-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_n_f32-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_n_f32-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_n_f32-1.c?ref=6bd4ce64eb48a72eca300cb52773e6101d646004", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+mve_pred16_t\n+foo1 (float32x4_t a, float32_t b)\n+{\n+  return vcmpeqq (a, 23.23);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "4a4e4b34fde2e37fb24233b220470668e4e7c35f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgeq_m_n_f16-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_m_n_f16-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_m_n_f16-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_m_n_f16-1.c?ref=6bd4ce64eb48a72eca300cb52773e6101d646004", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+mve_pred16_t\n+foo1 (float16x8_t a, float16_t b, mve_pred16_t p)\n+{\n+  return vcmpgeq_m (a, 23.23, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "c406a63aae255124b58b4db94798b8f49fd6b106", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgeq_m_n_f32-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_m_n_f32-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_m_n_f32-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_m_n_f32-1.c?ref=6bd4ce64eb48a72eca300cb52773e6101d646004", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+mve_pred16_t\n+foo1 (float32x4_t a, float32_t b, mve_pred16_t p)\n+{\n+  return vcmpgeq_m (a, 23.23, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "a65ed4421a8a6381469f763b940323805e9ee6d8", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgeq_n_f16-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_n_f16-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_n_f16-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_n_f16-1.c?ref=6bd4ce64eb48a72eca300cb52773e6101d646004", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+mve_pred16_t\n+foo1 (float16x8_t a, float16_t b)\n+{\n+  return vcmpgeq (a, 23.23);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "2e2fc0170eb73dceeb56c6f998f3e06527a3daad", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgeq_n_f32-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_n_f32-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_n_f32-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_n_f32-1.c?ref=6bd4ce64eb48a72eca300cb52773e6101d646004", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+mve_pred16_t\n+foo1 (float32x4_t a, float32_t b)\n+{\n+  return vcmpgeq (a, 23.23);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "08c91a72e05cd77d60202d4f5d1132c9e50e2361", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgtq_m_n_f16-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_m_n_f16-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_m_n_f16-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_m_n_f16-1.c?ref=6bd4ce64eb48a72eca300cb52773e6101d646004", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+mve_pred16_t\n+foo1 (float16x8_t a, float16_t b, mve_pred16_t p)\n+{\n+  return vcmpgtq_m (a, 23.23, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "0b74482211d72111f0c33f66d17e715ed6d690fb", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgtq_m_n_f32-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_m_n_f32-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_m_n_f32-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_m_n_f32-1.c?ref=6bd4ce64eb48a72eca300cb52773e6101d646004", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+mve_pred16_t\n+foo1 (float32x4_t a, float32_t b, mve_pred16_t p)\n+{\n+  return vcmpgtq_m (a, 23.23, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "3b2faeaf64ff6a4613229d3fdafed04daf64212d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgtq_n_f16-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_n_f16-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_n_f16-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_n_f16-1.c?ref=6bd4ce64eb48a72eca300cb52773e6101d646004", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+mve_pred16_t\n+foo1 (float16x8_t a, float16_t b)\n+{\n+  return vcmpgtq (a, 23.23);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "16862e0209c8bca6e8687a005dbbfa219758ebf1", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgtq_n_f32-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_n_f32-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_n_f32-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_n_f32-1.c?ref=6bd4ce64eb48a72eca300cb52773e6101d646004", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+mve_pred16_t\n+foo1 (float32x4_t a, float32_t b)\n+{\n+  return vcmpgtq (a, 23.23);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "50e53bdac47f56b0dda6870c9427a3f81bac8367", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpleq_m_n_f16-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_m_n_f16-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_m_n_f16-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_m_n_f16-1.c?ref=6bd4ce64eb48a72eca300cb52773e6101d646004", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+mve_pred16_t\n+foo1 (float16x8_t a, float16_t b, mve_pred16_t p)\n+{\n+  return vcmpleq_m (a, 23.23, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "b16da273a91a80acf51f0e9b08b486881f08078d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpleq_m_n_f32-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_m_n_f32-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_m_n_f32-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_m_n_f32-1.c?ref=6bd4ce64eb48a72eca300cb52773e6101d646004", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+mve_pred16_t\n+foo1 (float32x4_t a, float32_t b, mve_pred16_t p)\n+{\n+  return vcmpleq_m (a, 23.23, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "4a4b97312b0486834ebb0034278befb8eea148e7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpleq_n_f16-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_n_f16-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_n_f16-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_n_f16-1.c?ref=6bd4ce64eb48a72eca300cb52773e6101d646004", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+mve_pred16_t\n+foo1 (float16x8_t a, float16_t b)\n+{\n+  return vcmpleq (a, 23.23);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "8d8f105193339d973e0b0e1a9be45b30a71e48b4", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpleq_n_f32-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_n_f32-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_n_f32-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_n_f32-1.c?ref=6bd4ce64eb48a72eca300cb52773e6101d646004", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+mve_pred16_t\n+foo1 (float32x4_t a, float32_t b)\n+{\n+  return vcmpleq (a, 23.23);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "62ab53fb2efd65744cf09d5a0fb4a7af4cea9515", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpltq_m_n_f16-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_m_n_f16-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_m_n_f16-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_m_n_f16-1.c?ref=6bd4ce64eb48a72eca300cb52773e6101d646004", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+mve_pred16_t\n+foo1 (float16x8_t a, float16_t b, mve_pred16_t p)\n+{\n+  return vcmpltq_m (a, 23.23, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "55886fccff151bd032c74d26cad8bd7b9ec73408", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpltq_m_n_f32-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_m_n_f32-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_m_n_f32-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_m_n_f32-1.c?ref=6bd4ce64eb48a72eca300cb52773e6101d646004", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+mve_pred16_t\n+foo1 (float32x4_t a, float32_t b, mve_pred16_t p)\n+{\n+  return vcmpltq_m (a, 23.23, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "cd95daea48c9316898266acb77c1b739c22136da", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpltq_n_f16-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_n_f16-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_n_f16-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_n_f16-1.c?ref=6bd4ce64eb48a72eca300cb52773e6101d646004", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+mve_pred16_t\n+foo1 (float16x8_t a, float16_t b)\n+{\n+  return vcmpltq (a, 23.23);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "db76687d53e4597001418477a986a3b1e12ac419", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpltq_n_f32-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_n_f32-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_n_f32-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_n_f32-1.c?ref=6bd4ce64eb48a72eca300cb52773e6101d646004", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+mve_pred16_t\n+foo1 (float32x4_t a, float32_t b)\n+{\n+  return vcmpltq (a, 23.23);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "30618e8710138b134803ce2d2a48972b0b604da5", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpneq_m_n_f16-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_n_f16-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_n_f16-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_n_f16-1.c?ref=6bd4ce64eb48a72eca300cb52773e6101d646004", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+mve_pred16_t\n+foo1 (float16x8_t a, float16_t b, mve_pred16_t p)\n+{\n+  return vcmpneq_m (a, 23.23, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "4ecfda6d75c8e5ebdfc8a13dc2731e0f0a9fba41", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpneq_m_n_f32-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_n_f32-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_n_f32-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_n_f32-1.c?ref=6bd4ce64eb48a72eca300cb52773e6101d646004", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+mve_pred16_t\n+foo1 (float32x4_t a, float32_t b, mve_pred16_t p)\n+{\n+  return vcmpneq_m (a, 23.23, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "75a0090fcdc02049d064dd5156488def73b59483", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpneq_n_f16-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_n_f16-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_n_f16-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_n_f16-1.c?ref=6bd4ce64eb48a72eca300cb52773e6101d646004", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+mve_pred16_t\n+foo1 (float16x8_t a, float16_t b)\n+{\n+  return vcmpneq (a, 23.23);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "11ae14cff56c3d1d7d1e34c359c43e082691f9d6", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpneq_n_f32-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_n_f32-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_n_f32-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_n_f32-1.c?ref=6bd4ce64eb48a72eca300cb52773e6101d646004", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+mve_pred16_t\n+foo1 (float32x4_t a, float32_t b)\n+{\n+  return vcmpneq (a, 23.23);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "e47ae6d8e3bfec09772004162b2accc53640947e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vfmaq_m_n_f16-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmaq_m_n_f16-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmaq_m_n_f16-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmaq_m_n_f16-1.c?ref=6bd4ce64eb48a72eca300cb52773e6101d646004", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+float16x8_t\n+foo1 (float16x8_t a, float16x8_t b, float16_t c, mve_pred16_t p)\n+{\n+  return vfmaq_m (a, b, 23.23, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "78c39f0b2c9901413eb3f52d2a85e2a882b3c9e2", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vfmaq_m_n_f32-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmaq_m_n_f32-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmaq_m_n_f32-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmaq_m_n_f32-1.c?ref=6bd4ce64eb48a72eca300cb52773e6101d646004", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+float32x4_t\n+foo1 (float32x4_t a, float32x4_t b, float32_t c, mve_pred16_t p)\n+{\n+  return vfmaq_m (a, b, 23.23, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "f7867f2c0c375ee39633914e77231333f984fd7c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vfmaq_n_f16-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmaq_n_f16-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmaq_n_f16-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmaq_n_f16-1.c?ref=6bd4ce64eb48a72eca300cb52773e6101d646004", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+float16x8_t\n+foo1 (float16x8_t a, float16x8_t b, float16_t c)\n+{\n+  return vfmaq (a, b, 23.23);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "f0bc45bfed99b9bc7c5ffc1976274734973d5f57", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vfmaq_n_f32-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmaq_n_f32-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmaq_n_f32-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmaq_n_f32-1.c?ref=6bd4ce64eb48a72eca300cb52773e6101d646004", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+float32x4_t\n+foo1 (float32x4_t a, float32x4_t b, float32_t c)\n+{\n+  return vfmaq (a, b, 23.23);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "4750e108b6de5f4c642930155cc73ab45bcf5d83", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vfmasq_m_n_f16-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmasq_m_n_f16-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmasq_m_n_f16-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmasq_m_n_f16-1.c?ref=6bd4ce64eb48a72eca300cb52773e6101d646004", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+float16x8_t\n+foo1 (float16x8_t a, float16x8_t b, float16_t c, mve_pred16_t p)\n+{\n+  return vfmasq_m (a, b, 23.23, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "4a379711386aa88e89c91588f1be8876b8376fc9", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vfmasq_m_n_f32-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmasq_m_n_f32-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmasq_m_n_f32-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmasq_m_n_f32-1.c?ref=6bd4ce64eb48a72eca300cb52773e6101d646004", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+float32x4_t\n+foo1 (float32x4_t a, float32x4_t b, float32_t c, mve_pred16_t p)\n+{\n+  return vfmasq_m (a, b, 23.23, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "db824512b2bbaf4dfe72adcc38933a3c5cfae9f3", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vfmasq_n_f16-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmasq_n_f16-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmasq_n_f16-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmasq_n_f16-1.c?ref=6bd4ce64eb48a72eca300cb52773e6101d646004", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+float16x8_t\n+foo1 (float16x8_t a, float16x8_t b, float16_t c)\n+{\n+  return vfmasq (a, b, 23.23);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "12b1410c008150161a2b8671362618a5df98dabe", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vfmasq_n_f32-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmasq_n_f32-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmasq_n_f32-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmasq_n_f32-1.c?ref=6bd4ce64eb48a72eca300cb52773e6101d646004", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+float32x4_t\n+foo1 (float32x4_t a, float32x4_t b, float32_t c)\n+{\n+  return vfmasq (a, b, 23.23);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "7c2349d1ee4cf6e00050f2e9c4956996baaf76b0", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxnmavq_f16-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmavq_f16-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmavq_f16-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmavq_f16-1.c?ref=6bd4ce64eb48a72eca300cb52773e6101d646004", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+float16_t\n+foo1 (float16_t a, float16x8_t b)\n+{\n+  return vmaxnmavq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "0deef79487a66a87425dbbe5ecf823e4176736aa", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxnmavq_f32-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmavq_f32-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmavq_f32-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmavq_f32-1.c?ref=6bd4ce64eb48a72eca300cb52773e6101d646004", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+float32_t\n+foo1 (float32_t a, float32x4_t b)\n+{\n+  return vmaxnmavq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "56a7ac001f942d4e4afb9176956bc500488c5212", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxnmavq_p_f16-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmavq_p_f16-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmavq_p_f16-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmavq_p_f16-1.c?ref=6bd4ce64eb48a72eca300cb52773e6101d646004", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+float16_t\n+foo1 (float16_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vmaxnmavq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "36c10a9063379b0a6a42e843e2780fc2e72cee7b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxnmavq_p_f32-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmavq_p_f32-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmavq_p_f32-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmavq_p_f32-1.c?ref=6bd4ce64eb48a72eca300cb52773e6101d646004", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+float32_t\n+foo1 (float32_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vmaxnmavq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "f60641f5de064faac15ecf5634c87145db76da2a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxnmvq_f16-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmvq_f16-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmvq_f16-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmvq_f16-1.c?ref=6bd4ce64eb48a72eca300cb52773e6101d646004", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+float16_t\n+foo1 (float16_t a, float16x8_t b)\n+{\n+  return vmaxnmvq (23.35, b);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "f8c9f44ac788a1e278d822da237536dad6e05ba7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxnmvq_f32-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmvq_f32-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmvq_f32-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmvq_f32-1.c?ref=6bd4ce64eb48a72eca300cb52773e6101d646004", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+float32_t\n+foo1 (float32_t a, float32x4_t b)\n+{\n+  return vmaxnmvq (34.56, b);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "96820ecab911d0340427d1cdd516000f988989ce", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxnmvq_p_f16-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmvq_p_f16-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmvq_p_f16-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmvq_p_f16-1.c?ref=6bd4ce64eb48a72eca300cb52773e6101d646004", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+float16_t\n+foo1 (float16_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vmaxnmvq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "826ee8f900a79b350fc9d2f030d94ddc5ff2fc92", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxnmvq_p_f32-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmvq_p_f32-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmvq_p_f32-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmvq_p_f32-1.c?ref=6bd4ce64eb48a72eca300cb52773e6101d646004", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+float32_t\n+foo1 (float32_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vmaxnmvq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "37d5136edcaf9662e478ae4a33267d7b4b02dfd4", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminnmavq_f16-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmavq_f16-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmavq_f16-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmavq_f16-1.c?ref=6bd4ce64eb48a72eca300cb52773e6101d646004", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+float16_t\n+foo1 (float16_t a, float16x8_t b)\n+{\n+  return vminnmavq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "78978d050544132b6eaf7fef90345380dabc7fb1", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminnmavq_f32-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmavq_f32-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmavq_f32-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmavq_f32-1.c?ref=6bd4ce64eb48a72eca300cb52773e6101d646004", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+float32_t\n+foo1 (float32_t a, float32x4_t b)\n+{\n+  return vminnmavq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "7170b747a402e6f77d3b89c1b853c09b74eb514a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminnmavq_p_f16-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmavq_p_f16-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmavq_p_f16-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmavq_p_f16-1.c?ref=6bd4ce64eb48a72eca300cb52773e6101d646004", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+float16_t\n+foo1 (float16_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vminnmavq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "0955905385200484d740b417c072f8bb9e0f16f8", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminnmavq_p_f32-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmavq_p_f32-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmavq_p_f32-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmavq_p_f32-1.c?ref=6bd4ce64eb48a72eca300cb52773e6101d646004", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+float32_t\n+foo1 (float32_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vminnmavq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "132d1a123f862f2a72254e31f8bd3a8608d81f9b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminnmvq_f16-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmvq_f16-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmvq_f16-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmvq_f16-1.c?ref=6bd4ce64eb48a72eca300cb52773e6101d646004", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+float16_t\n+foo1 (float16_t a, float16x8_t b)\n+{\n+  return vminnmvq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "74909075b090c72f1ac4315f8816993c37cebf10", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminnmvq_f32-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmvq_f32-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmvq_f32-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmvq_f32-1.c?ref=6bd4ce64eb48a72eca300cb52773e6101d646004", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+float32_t\n+foo1 (float32_t a, float32x4_t b)\n+{\n+  return vminnmvq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "c88c3b74a50dd3d6ac422bb762bf2db2154356cb", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminnmvq_p_f16-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmvq_p_f16-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmvq_p_f16-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmvq_p_f16-1.c?ref=6bd4ce64eb48a72eca300cb52773e6101d646004", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+float16_t\n+foo1 (float16_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vminnmvq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "e4db972fc70c5bfad9b7cc5df568ab488a1fa46a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminnmvq_p_f32-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmvq_p_f32-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmvq_p_f32-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmvq_p_f32-1.c?ref=6bd4ce64eb48a72eca300cb52773e6101d646004", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+float32_t\n+foo1 (float32_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vminnmvq_p (a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "c8222c5c7b969d6a03c10e06c3bbb9177eb96ce1", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulq_m_n_f16-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_m_n_f16-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_m_n_f16-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_m_n_f16-1.c?ref=6bd4ce64eb48a72eca300cb52773e6101d646004", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+float16x8_t\n+foo1 (float16x8_t inactive, float16x8_t a, float16_t b, mve_pred16_t p)\n+{\n+  return vmulq_m (inactive, a, 23.23, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "2fae3a7f8fa9d234a75e3db05caf53a29fbdb3c2", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulq_m_n_f32-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_m_n_f32-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_m_n_f32-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_m_n_f32-1.c?ref=6bd4ce64eb48a72eca300cb52773e6101d646004", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+float32x4_t\n+foo1 (float32x4_t inactive, float32x4_t a, float32_t b, mve_pred16_t p)\n+{\n+  return vmulq_m (inactive, a, 23.23, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "cef311d981da913c8d10cfae577dab5b9e3e4223", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulq_n_f16-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_n_f16-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_n_f16-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_n_f16-1.c?ref=6bd4ce64eb48a72eca300cb52773e6101d646004", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+float16x8_t\n+foo1 (float16x8_t a, float16_t b)\n+{\n+  return vmulq (a, 23.23);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "d6d4b9a0a7c7eac00b8abc0dcc5f298edf54edda", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulq_n_f32-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_n_f32-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_n_f32-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_n_f32-1.c?ref=6bd4ce64eb48a72eca300cb52773e6101d646004", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+float32x4_t\n+foo1 (float32x4_t a, float32_t b)\n+{\n+  return vmulq (a, 23.23);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "ea4cab03490e0a99fb9cf973bca9c569ffa49b92", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulq_x_n_f16-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_x_n_f16-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_x_n_f16-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_x_n_f16-1.c?ref=6bd4ce64eb48a72eca300cb52773e6101d646004", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+float16x8_t\n+foo1 (float16x8_t a, float16_t b, mve_pred16_t p)\n+{\n+  return vmulq_x (a, 23.23, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "a7a54c7c92cfcbda9d4520a5369d03e3917a52bf", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulq_x_n_f32-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_x_n_f32-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_x_n_f32-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_x_n_f32-1.c?ref=6bd4ce64eb48a72eca300cb52773e6101d646004", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+float32x4_t\n+foo1 (float32x4_t a, float32_t b, mve_pred16_t p)\n+{\n+  return vmulq_x (a, 23.23, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "608dd30788efa4447550a4ddc6af512c80fe83b0", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vsetq_lane_f16-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsetq_lane_f16-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsetq_lane_f16-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsetq_lane_f16-1.c?ref=6bd4ce64eb48a72eca300cb52773e6101d646004", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-skip-if \"Incompatible float ABI\" { *-*-* } { \"-mfloat-abi=soft\" } {\"\"} } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+float16x8_t\n+foo (float16_t a, float16x8_t b)\n+{\n+  return vsetq_lane (23.26, b, 0);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "c5f5db7f28df57df9d1b91b4cce6497853df5273", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vsetq_lane_f32-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsetq_lane_f32-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsetq_lane_f32-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsetq_lane_f32-1.c?ref=6bd4ce64eb48a72eca300cb52773e6101d646004", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-skip-if \"Incompatible float ABI\" { *-*-* } { \"-mfloat-abi=soft\" } {\"\"} } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+float32x4_t\n+foo (float32_t a, float32x4_t b)\n+{\n+    return vsetq_lane (23.34, b, 0);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "f3e19613e7efdff553ec62ed8412eec2e3c0fc98", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vsubq_m_n_f16-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsubq_m_n_f16-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsubq_m_n_f16-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsubq_m_n_f16-1.c?ref=6bd4ce64eb48a72eca300cb52773e6101d646004", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+float16x8_t\n+foo1 (float16x8_t inactive, float16x8_t a, float16_t b, mve_pred16_t p)\n+{\n+  return vsubq_m (inactive, a, 23.23, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "4b5cd90c9eda73a9fdd0ebc7e95a544e532de9f8", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vsubq_m_n_f32-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsubq_m_n_f32-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsubq_m_n_f32-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsubq_m_n_f32-1.c?ref=6bd4ce64eb48a72eca300cb52773e6101d646004", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+float32x4_t\n+foo1 (float32x4_t inactive, float32x4_t a, float32_t b, mve_pred16_t p)\n+{\n+  return vsubq_m (inactive, a, 23.23, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "f8832546f54361e31f88e0def5e1ab12dcb5b89e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vsubq_n_f16-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsubq_n_f16-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsubq_n_f16-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsubq_n_f16-1.c?ref=6bd4ce64eb48a72eca300cb52773e6101d646004", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+float16x8_t\n+foo1 (float16x8_t a, float16_t b)\n+{\n+  return vsubq (a, 23.23);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "88d9675540dfd4eb42f4da7267695a014425834b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vsubq_n_f32-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsubq_n_f32-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsubq_n_f32-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsubq_n_f32-1.c?ref=6bd4ce64eb48a72eca300cb52773e6101d646004", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+float32x4_t\n+foo1 (float32x4_t a, float32_t b)\n+{\n+  return vsubq (a, 23.23);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "b3a67bb43eb77f5710446701ab49139070a2c9cf", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vsubq_x_n_f16-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsubq_x_n_f16-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsubq_x_n_f16-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsubq_x_n_f16-1.c?ref=6bd4ce64eb48a72eca300cb52773e6101d646004", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+float16x8_t\n+foo (float16x8_t a, float16_t b, mve_pred16_t p)\n+{\n+    return vsubq_x_n_f16 (a, 23.23, p);\n+}\n+\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}, {"sha": "dcb2425397bb2a5a13090f9cb9fd4e8822ae1ad6", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vsubq_x_n_f32-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsubq_x_n_f32-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd4ce64eb48a72eca300cb52773e6101d646004/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsubq_x_n_f32-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsubq_x_n_f32-1.c?ref=6bd4ce64eb48a72eca300cb52773e6101d646004", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+float32x4_t\n+foo (float32x4_t a, float32_t b, mve_pred16_t p)\n+{\n+    return vsubq_x_n_f32 (a, 23.23, p);\n+}\n+\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */"}]}