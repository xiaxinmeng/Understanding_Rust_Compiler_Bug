{"sha": "f4abade9fe297572fefc4484ac5f0c723c0c29df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjRhYmFkZTlmZTI5NzU3MmZlZmM0NDg0YWM1ZjBjNzIzYzBjMjlkZg==", "commit": {"author": {"name": "Giovanni Bajo", "email": "giovannibajo@gcc.gnu.org", "date": "2004-01-29T04:23:37Z"}, "committer": {"name": "Giovanni Bajo", "email": "giovannibajo@gcc.gnu.org", "date": "2004-01-29T04:23:37Z"}, "message": "parser.c (cp_parser_template_id): Parse tentatively `[:' after a template name as it was `<::' (digraph typo).\n\n\t* parser.c (cp_parser_template_id): Parse tentatively `[:' after a\n\ttemplate name as it was `<::' (digraph typo).\n\t(cp_parser_nth_token_starts_template_argument_list_p): New function.\n\t(cp_parser_id_expression): Use it.\n\t(cp_parser_nested_name_specifier_opt): Likewise.\n\t(cp_parser_template_name): Likewise.\n\t(cp_parser_class_name): Likewise.\n\t(cp_lexer_get_preprocessor_token): Use c_lex_with_flags.\n\nFrom-SVN: r76845", "tree": {"sha": "93c7e64317cfb596c406d2a37ca8a432c8bd2d10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/93c7e64317cfb596c406d2a37ca8a432c8bd2d10"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f4abade9fe297572fefc4484ac5f0c723c0c29df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4abade9fe297572fefc4484ac5f0c723c0c29df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4abade9fe297572fefc4484ac5f0c723c0c29df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4abade9fe297572fefc4484ac5f0c723c0c29df/comments", "author": {"login": "rasky", "id": 1014109, "node_id": "MDQ6VXNlcjEwMTQxMDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1014109?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rasky", "html_url": "https://github.com/rasky", "followers_url": "https://api.github.com/users/rasky/followers", "following_url": "https://api.github.com/users/rasky/following{/other_user}", "gists_url": "https://api.github.com/users/rasky/gists{/gist_id}", "starred_url": "https://api.github.com/users/rasky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rasky/subscriptions", "organizations_url": "https://api.github.com/users/rasky/orgs", "repos_url": "https://api.github.com/users/rasky/repos", "events_url": "https://api.github.com/users/rasky/events{/privacy}", "received_events_url": "https://api.github.com/users/rasky/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rasky", "id": 1014109, "node_id": "MDQ6VXNlcjEwMTQxMDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1014109?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rasky", "html_url": "https://github.com/rasky", "followers_url": "https://api.github.com/users/rasky/followers", "following_url": "https://api.github.com/users/rasky/following{/other_user}", "gists_url": "https://api.github.com/users/rasky/gists{/gist_id}", "starred_url": "https://api.github.com/users/rasky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rasky/subscriptions", "organizations_url": "https://api.github.com/users/rasky/orgs", "repos_url": "https://api.github.com/users/rasky/repos", "events_url": "https://api.github.com/users/rasky/events{/privacy}", "received_events_url": "https://api.github.com/users/rasky/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7625e73d5799718ee9cda40a17896a3335e76d6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7625e73d5799718ee9cda40a17896a3335e76d6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7625e73d5799718ee9cda40a17896a3335e76d6f"}], "stats": {"total": 117, "additions": 103, "deletions": 14}, "files": [{"sha": "6ce445c806ca7177ae41aad23ff63ecd8c5b0d85", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4abade9fe297572fefc4484ac5f0c723c0c29df/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4abade9fe297572fefc4484ac5f0c723c0c29df/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f4abade9fe297572fefc4484ac5f0c723c0c29df", "patch": "@@ -1,3 +1,14 @@\n+2004-01-28  Giovanni Bajo  <giovannibajo@gcc.gnu.org>\n+\n+\t* parser.c (cp_parser_template_id): Parse tentatively `[:' after a \n+\ttemplate name as it was `<::' (digraph typo).\n+\t(cp_parser_nth_token_starts_template_argument_list_p): New function.\n+\t(cp_parser_id_expression): Use it.\n+\t(cp_parser_nested_name_specifier_opt): Likewise.\n+\t(cp_parser_template_name): Likewise.\n+\t(cp_parser_class_name): Likewise.\n+\t(cp_lexer_get_preprocessor_token): Use c_lex_with_flags.\n+\n 2004-01-28  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/13791"}, {"sha": "49648199af35f8b14f183ead6824432157935c05", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 92, "deletions": 14, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4abade9fe297572fefc4484ac5f0c723c0c29df/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4abade9fe297572fefc4484ac5f0c723c0c29df/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=f4abade9fe297572fefc4484ac5f0c723c0c29df", "patch": "@@ -72,6 +72,8 @@ typedef struct cp_token GTY (())\n   /* If this token is a keyword, this value indicates which keyword.\n      Otherwise, this value is RID_MAX.  */\n   ENUM_BITFIELD (rid) keyword : 8;\n+  /* Token flags.  */\n+  unsigned char flags;\n   /* The value associated with this token, if any.  */\n   tree value;\n   /* The location at which this token was found.  */\n@@ -597,7 +599,7 @@ cp_lexer_get_preprocessor_token (cp_lexer *lexer ATTRIBUTE_UNUSED ,\n   while (!done)\n     {\n       /* Get a new token from the preprocessor.  */\n-      token->type = c_lex (&token->value);\n+      token->type = c_lex_with_flags (&token->value, &token->flags);\n       /* Issue messages about tokens we cannot process.  */\n       switch (token->type)\n \t{\n@@ -1681,6 +1683,8 @@ static bool cp_parser_next_token_starts_class_definition_p\n   (cp_parser *);\n static bool cp_parser_next_token_ends_template_argument_p\n   (cp_parser *);\n+static bool cp_parser_nth_token_starts_template_argument_list_p\n+  (cp_parser *, size_t);\n static enum tag_types cp_parser_token_is_class_key\n   (cp_token *);\n static void cp_parser_check_class_key\n@@ -2741,7 +2745,8 @@ cp_parser_id_expression (cp_parser *parser,\n \t we can avoid the template-id case.  This is an optimization\n \t for this common case.  */\n       if (token->type == CPP_NAME \n-\t  && cp_lexer_peek_nth_token (parser->lexer, 2)->type != CPP_LESS)\n+\t  && !cp_parser_nth_token_starts_template_argument_list_p \n+\t       (parser, 2))\n \treturn cp_parser_identifier (parser);\n \n       cp_parser_parse_tentatively (parser);\n@@ -3113,7 +3118,9 @@ cp_parser_nested_name_specifier_opt (cp_parser *parser,\n \t     template-id), nor a `::', then we are not looking at a\n \t     nested-name-specifier.  */\n \t  token = cp_lexer_peek_nth_token (parser->lexer, 2);\n-\t  if (token->type != CPP_LESS && token->type != CPP_SCOPE)\n+\t  if (token->type != CPP_SCOPE\n+\t      && !cp_parser_nth_token_starts_template_argument_list_p\n+\t\t  (parser, 2))\n \t    break;\n \t}\n \n@@ -7769,7 +7776,7 @@ cp_parser_template_id (cp_parser *parser,\n   tree template_id;\n   ptrdiff_t start_of_id;\n   tree access_check = NULL_TREE;\n-  cp_token *next_token;\n+  cp_token *next_token, *next_token_2;\n   bool is_identifier;\n \n   /* If the next token corresponds to a template-id, there is no need\n@@ -7794,7 +7801,8 @@ cp_parser_template_id (cp_parser *parser,\n      finding a template-id.  */\n   if ((next_token->type != CPP_NAME && next_token->keyword != RID_OPERATOR)\n       || (next_token->type == CPP_NAME\n-\t  && cp_lexer_peek_nth_token (parser->lexer, 2)->type != CPP_LESS))\n+\t  && !cp_parser_nth_token_starts_template_argument_list_p \n+\t       (parser, 2)))\n     {\n       cp_parser_error (parser, \"expected template-id\");\n       return error_mark_node;\n@@ -7826,15 +7834,60 @@ cp_parser_template_id (cp_parser *parser,\n       return template;\n     }\n \n-  /* Look for the `<' that starts the template-argument-list.  */\n-  if (!cp_parser_require (parser, CPP_LESS, \"`<'\"))\n+  /* If we find the sequence `[:' after a template-name, it's probably \n+     a digraph-typo for `< ::'. Substitute the tokens and check if we can\n+     parse correctly the argument list.  */\n+  next_token = cp_lexer_peek_nth_token (parser->lexer, 1);\n+  next_token_2 = cp_lexer_peek_nth_token (parser->lexer, 2);\n+  if (next_token->type == CPP_OPEN_SQUARE \n+      && next_token->flags & DIGRAPH\n+      && next_token_2->type == CPP_COLON \n+      && !(next_token_2->flags & PREV_WHITE))\n     {\n-      pop_deferring_access_checks ();\n-      return error_mark_node;\n+      cp_parser_parse_tentatively (parser);\n+      /* Change `:' into `::'.  */\n+      next_token_2->type = CPP_SCOPE;\n+      /* Consume the first token (CPP_OPEN_SQUARE - which we pretend it is\n+         CPP_LESS.  */\n+      cp_lexer_consume_token (parser->lexer);\n+      /* Parse the arguments.  */\n+      arguments = cp_parser_enclosed_template_argument_list (parser);\n+      if (!cp_parser_parse_definitely (parser))\n+\t{\n+\t  /* If we couldn't parse an argument list, then we revert our changes\n+\t     and return simply an error. Maybe this is not a template-id\n+\t     after all.  */\n+\t  next_token_2->type = CPP_COLON;\n+\t  cp_parser_error (parser, \"expected `<'\");\n+\t  pop_deferring_access_checks ();\n+\t  return error_mark_node;\n+\t}\n+      /* Otherwise, emit an error about the invalid digraph, but continue\n+         parsing because we got our argument list.  */\n+      pedwarn (\"`<::' cannot begin a template-argument list\");\n+      inform (\"`<:' is an alternate spelling for `['. Insert whitespace \"\n+\t      \"between `<' and `::'\");\n+      if (!flag_permissive)\n+\t{\n+\t  static bool hint;\n+\t  if (!hint)\n+\t    {\n+\t      inform (\"(if you use `-fpermissive' G++ will accept your code)\");\n+\t      hint = true;\n+\t    }\n+\t}\n+    }\n+  else\n+    {\n+      /* Look for the `<' that starts the template-argument-list.  */\n+      if (!cp_parser_require (parser, CPP_LESS, \"`<'\"))\n+\t{\n+\t  pop_deferring_access_checks ();\n+\t  return error_mark_node;\n+\t}\n+      /* Parse the arguments.  */\n+      arguments = cp_parser_enclosed_template_argument_list (parser);\n     }\n-\n-  /* Parse the arguments.  */\n-  arguments = cp_parser_enclosed_template_argument_list (parser);\n \n   /* Build a representation of the specialization.  */\n   if (TREE_CODE (template) == IDENTIFIER_NODE)\n@@ -7974,7 +8027,7 @@ cp_parser_template_name (cp_parser* parser,\n      -- but we do not if there is no `<'.  */\n \n   if (processing_template_decl\n-      && cp_lexer_next_token_is (parser->lexer, CPP_LESS))\n+      && cp_parser_nth_token_starts_template_argument_list_p (parser, 1))\n     {\n       /* In a declaration, in a dependent context, we pretend that the\n \t \"template\" keyword was present in order to improve error\n@@ -11496,7 +11549,7 @@ cp_parser_class_name (cp_parser *parser,\n   /* Handle the common case (an identifier, but not a template-id)\n      efficiently.  */\n   if (token->type == CPP_NAME \n-      && cp_lexer_peek_nth_token (parser->lexer, 2)->type != CPP_LESS)\n+      && !cp_parser_nth_token_starts_template_argument_list_p (parser, 2))\n     {\n       tree identifier;\n \n@@ -14847,6 +14900,31 @@ cp_parser_next_token_ends_template_argument_p (cp_parser *parser)\n   return (token->type == CPP_COMMA || token->type == CPP_GREATER \n \t  || token->type == CPP_RSHIFT);\n }\n+\n+/* Returns TRUE iff the n-th token is a \">\", or the n-th is a \"[\" and the\n+   (n+1)-th is a \":\" (which is a possible digraph typo for \"< ::\").  */\n+\n+static bool\n+cp_parser_nth_token_starts_template_argument_list_p (cp_parser * parser, \n+\t\t\t\t\t\t     size_t n)\n+{\n+  cp_token *token;\n+\n+  token = cp_lexer_peek_nth_token (parser->lexer, n);\n+  if (token->type == CPP_LESS)\n+    return true;\n+  /* Check for the sequence `<::' in the original code. It would be lexed as\n+     `[:', where `[' is a digraph, and there is no whitespace before\n+     `:'.  */\n+  if (token->type == CPP_OPEN_SQUARE && token->flags & DIGRAPH)\n+    {\n+      cp_token *token2;\n+      token2 = cp_lexer_peek_nth_token (parser->lexer, n+1);\n+      if (token2->type == CPP_COLON && !(token2->flags & PREV_WHITE))\n+\treturn true;\n+    }\n+  return false;\n+}\n  \n /* Returns the kind of tag indicated by TOKEN, if it is a class-key,\n    or none_type otherwise.  */"}]}