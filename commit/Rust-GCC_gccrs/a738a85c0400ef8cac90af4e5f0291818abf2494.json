{"sha": "a738a85c0400ef8cac90af4e5f0291818abf2494", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTczOGE4NWMwNDAwZWY4Y2FjOTBhZjRlNWYwMjkxODE4YWJmMjQ5NA==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2001-01-11T17:11:28Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2001-01-11T17:11:28Z"}, "message": "Makefile.in (check-gcc//%, [...]): Support parallel testing of multilibs.\n\n* Makefile.in (check-gcc//%, check-g++//%, check-g77//%,\ncheck-objc//%): Support parallel testing of multilibs.\n(TESTSUITEDIR): Set to testsuite by default, but override for\nparallel testing.\n(check-gcc, check-g++, check-g77, check-objc): Enter\n$(TESTSUITEDIR).\n\nFrom-SVN: r38909", "tree": {"sha": "c3e87d5c559c94e98246fc7524bc6b306e41d75b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3e87d5c559c94e98246fc7524bc6b306e41d75b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a738a85c0400ef8cac90af4e5f0291818abf2494", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a738a85c0400ef8cac90af4e5f0291818abf2494", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a738a85c0400ef8cac90af4e5f0291818abf2494", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a738a85c0400ef8cac90af4e5f0291818abf2494/comments", "author": null, "committer": null, "parents": [{"sha": "fb6754f0963d3a6571d07d3189eedcf92985219c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb6754f0963d3a6571d07d3189eedcf92985219c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb6754f0963d3a6571d07d3189eedcf92985219c"}], "stats": {"total": 56, "additions": 39, "deletions": 17}, "files": [{"sha": "186c339454a593e80ea27ee54303b98e1648b65b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a738a85c0400ef8cac90af4e5f0291818abf2494/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a738a85c0400ef8cac90af4e5f0291818abf2494/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a738a85c0400ef8cac90af4e5f0291818abf2494", "patch": "@@ -1,3 +1,12 @@\n+2001-01-11  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* Makefile.in (check-gcc//%, check-g++//%, check-g77//%,\n+\tcheck-objc//%): Support parallel testing of multilibs.\n+\t(TESTSUITEDIR): Set to testsuite by default, but override for\n+\tparallel testing.\n+\t(check-gcc, check-g++, check-g77, check-objc): Enter\n+\t$(TESTSUITEDIR).\n+\n 2001-01-11  Bernd Schmidt  <bernds@redhat.com>\n \n \t* alias.c (throughout): Use REGNO, rather than ORIGINAL_REGNO."}, {"sha": "fc128797ee03ee7782413cf39f61d111e9ba68f2", "filename": "gcc/Makefile.in", "status": "modified", "additions": 30, "deletions": 17, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a738a85c0400ef8cac90af4e5f0291818abf2494/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a738a85c0400ef8cac90af4e5f0291818abf2494/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=a738a85c0400ef8cac90af4e5f0291818abf2494", "patch": "@@ -2730,49 +2730,62 @@ CHECK_TARGETS = check-gcc check-g++ check-g77 check-objc @CHECK_PO@\n \n check: $(CHECK_TARGETS)\n \n-testsuite/site.exp: site.exp\n-\tif [ -d testsuite ]; then \\\n-\t  true; \\\n-\telse \\\n-\t  mkdir testsuite; \\\n-\tfi\n-\trm -rf testsuite/site.exp\n-\tcp site.exp testsuite/site.exp\n-\n-check-g++: testsuite/site.exp\n+PAR_CHECK_TARGETS = $(CHECK_TARGETS:check-%=check/%)\n+\n+# The idea is to parallelize testing of multilibs, for example:\n+#   make -j3 check/gcc/sh-hms-sim/{-m1,-m2,-m3,-m3e,-m4}/{,-nofpu}\n+# will run 3 concurrent sessions of check-gcc, eventually testing\n+# all 10 combinations.  GNU make is required, as is a shell that expands\n+# alternations within braces.\n+$(PAR_CHECK_TARGETS:=/%): site.exp\n+\ttarget=`echo \"$@\" | sed 's,/,-,;s,/.*,,'`; \\\n+\tvariant=`echo \"$@\" | sed 's,/,-,;s,^[^/]*/,,'`; \\\n+\tvardots=`echo \"$$variant\" | sed 's,/,.,g'`; \\\n+\t$(MAKE) TESTSUITEDIR=\"testsuite.$$vardots\" \\\n+\t  RUNTESTFLAGS=\"--target_board=$$variant $(RUNTESTFLAGS)\" \\\n+\t  \"$$target\"\n+\n+TESTSUITEDIR = testsuite\n+\n+$(TESTSUITEDIR)/site.exp: site.exp\n+\ttest -d $(TESTSUITEDIR) || mkdir $(TESTSUITEDIR)\n+\t-rm -f $@\n+\tsed '/set tmpdir/ s|testsuite|$(TESTSUITEDIR)|' < site.exp > $@\n+\n+check-g++: $(TESTSUITEDIR)/site.exp\n \t-(rootme=`pwd`; export rootme; \\\n \tsrcdir=`cd ${srcdir}; pwd` ; export srcdir ; \\\n-\tcd testsuite; \\\n+\tcd $(TESTSUITEDIR); \\\n \tEXPECT=${EXPECT} ; export EXPECT ; \\\n \tif [ -f $${rootme}/../expect/expect ] ; then  \\\n \t   TCL_LIBRARY=`cd .. ; cd ${srcdir}/../tcl/library ; pwd` ; \\\n \t    export TCL_LIBRARY ; fi ; \\\n \t$(RUNTEST) --tool g++ $(RUNTESTFLAGS))\n \n-check-gcc: testsuite/site.exp\n+check-gcc: $(TESTSUITEDIR)/site.exp\n \t-(rootme=`pwd`; export rootme; \\\n \tsrcdir=`cd ${srcdir}; pwd` ; export srcdir ; \\\n-\tcd testsuite; \\\n+\tcd $(TESTSUITEDIR); \\\n \tEXPECT=${EXPECT} ; export EXPECT ; \\\n \tif [ -f $${rootme}/../expect/expect ] ; then  \\\n \t   TCL_LIBRARY=`cd .. ; cd ${srcdir}/../tcl/library ; pwd` ; \\\n \t   export TCL_LIBRARY ; fi ; \\\n \t$(RUNTEST) --tool gcc $(RUNTESTFLAGS))\n \n-check-g77: testsuite/site.exp\n+check-g77: $(TESTSUITEDIR)/site.exp\n \t-(rootme=`pwd`; export rootme; \\\n \tsrcdir=`cd ${srcdir}; pwd` ; export srcdir ; \\\n-\tcd testsuite; \\\n+\tcd $(TESTSUITEDIR); \\\n \tEXPECT=${EXPECT} ; export EXPECT ; \\\n \tif [ -f $${rootme}/../expect/expect ] ; then  \\\n \t   TCL_LIBRARY=`cd .. ; cd ${srcdir}/../tcl/library ; pwd` ; \\\n \t   export TCL_LIBRARY ; fi ; \\\n \t$(RUNTEST) --tool g77 $(RUNTESTFLAGS))\n \n-check-objc: testsuite/site.exp\n+check-objc: $(TESTSUITEDIR)/site.exp\n \t-(rootme=`pwd`; export rootme; \\\n \tsrcdir=`cd ${srcdir}; pwd` ; export srcdir ; \\\n-\tcd testsuite; \\\n+\tcd $(TESTSUITEDIR); \\\n \tEXPECT=${EXPECT} ; export EXPECT ; \\\n \tif [ -f $${rootme}/../expect/expect ] ; then  \\\n \t   TCL_LIBRARY=`cd .. ; cd ${srcdir}/../tcl/library ; pwd` ; \\"}]}