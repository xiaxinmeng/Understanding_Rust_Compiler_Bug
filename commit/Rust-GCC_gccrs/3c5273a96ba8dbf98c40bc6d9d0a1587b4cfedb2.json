{"sha": "3c5273a96ba8dbf98c40bc6d9d0a1587b4cfedb2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2M1MjczYTk2YmE4ZGJmOThjNDBiYzZkOWQwYTE1ODdiNGNmZWRiMg==", "commit": {"author": {"name": "Kai Tietz", "email": "kai.tietz@onevision.com", "date": "2010-07-28T18:00:09Z"}, "committer": {"name": "Kai Tietz", "email": "ktietz@gcc.gnu.org", "date": "2010-07-28T18:00:09Z"}, "message": "i386.h (MCOUNT_NAME_BEFORE_PROLOGUE): New.\n\n2010-07-28  Kai Tietz  <kai.tietz@onevision.com>\n\n        * config/i386/i386.h (MCOUNT_NAME_BEFORE_PROLOGUE): New.\n        * config/i386/i386.c (ix86_profile_before_prologue): New.\n        (override_options): Add special handling for -mfentry.\n        (ix86_function_regparm): Likewise.\n        (ix86_function_sseregparm): Likewise.\n        (ix86_frame_pointer_required): Likewise.\n        (ix86_expand_prologue): Check for ms_hook_prologue.\n        (x86_function_profiler): Adjust mcount output.\n        (TARGET_PROFILE_BEFORE_PROLOGUE): Define hook.\n        * config/i386/i386.opt (mfentry): New.\n        * doc/invoke.texi (mfentry): Add documentation.\n        * doc/tm.texi: Regenerated..\n        * doc/tm.texi.in (TARGET_PROFILE_BEFORE_PROLOGUE): New.\n        * final.c (final_start_function): Replace macro\n        PROFILE_BEFORE_PROLOGUE by target hook.\n        * function.c (thread_prologue_and_epilogue_insns): Likewise.\n        * target.def (profile_before_prologue): New hook.\n        * targhooks.c (default_profile_before_prologue): New.\n        * targhooks.h (default_profile_before_prologue): New.\n\nFrom-SVN: r162651", "tree": {"sha": "e9456c08db3a11dbe46b002ed8ff55b4f9ebee25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e9456c08db3a11dbe46b002ed8ff55b4f9ebee25"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c5273a96ba8dbf98c40bc6d9d0a1587b4cfedb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c5273a96ba8dbf98c40bc6d9d0a1587b4cfedb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c5273a96ba8dbf98c40bc6d9d0a1587b4cfedb2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c5273a96ba8dbf98c40bc6d9d0a1587b4cfedb2/comments", "author": null, "committer": null, "parents": [{"sha": "c9d75a48c4ea63ab27ccdb40f993236289b243f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9d75a48c4ea63ab27ccdb40f993236289b243f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9d75a48c4ea63ab27ccdb40f993236289b243f2"}], "stats": {"total": 134, "additions": 115, "deletions": 19}, "files": [{"sha": "d5f931dca594d9e5851fcda0360a96a645933a43", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c5273a96ba8dbf98c40bc6d9d0a1587b4cfedb2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c5273a96ba8dbf98c40bc6d9d0a1587b4cfedb2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3c5273a96ba8dbf98c40bc6d9d0a1587b4cfedb2", "patch": "@@ -1,3 +1,25 @@\n+2010-07-28  Kai Tietz  <kai.tietz@onevision.com>\n+\n+\t* config/i386/i386.h (MCOUNT_NAME_BEFORE_PROLOGUE): New.\n+\t* config/i386/i386.c (ix86_profile_before_prologue): New.\n+\t(override_options): Add special handling for -mfentry.\n+\t(ix86_function_regparm): Likewise.\n+\t(ix86_function_sseregparm): Likewise.\n+\t(ix86_frame_pointer_required): Likewise.\n+\t(ix86_expand_prologue): Check for ms_hook_prologue.\n+\t(x86_function_profiler): Adjust mcount output.\n+\t(TARGET_PROFILE_BEFORE_PROLOGUE): Define hook.\n+\t* config/i386/i386.opt (mfentry): New.\n+\t* doc/invoke.texi (mfentry): Add documentation.\n+\t* doc/tm.texi: Regenerated..\n+\t* doc/tm.texi.in (TARGET_PROFILE_BEFORE_PROLOGUE): New.\n+\t* final.c (final_start_function): Replace macro\n+\tPROFILE_BEFORE_PROLOGUE by target hook.\n+\t* function.c (thread_prologue_and_epilogue_insns): Likewise.\n+\t* target.def (profile_before_prologue): New hook.\n+\t* targhooks.c (default_profile_before_prologue): New.\n+\t* targhooks.h (default_profile_before_prologue): New.\n+\n 2010-07-28  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/45105"}, {"sha": "ff6f4b80972b87b2bd953b9bee5788c9031ba674", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 46, "deletions": 9, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c5273a96ba8dbf98c40bc6d9d0a1587b4cfedb2/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c5273a96ba8dbf98c40bc6d9d0a1587b4cfedb2/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=3c5273a96ba8dbf98c40bc6d9d0a1587b4cfedb2", "patch": "@@ -2768,6 +2768,15 @@ software_prefetching_beneficial_p (void)\n     }\n }\n \n+/* Return true, if profiling code should be emitted before\n+   prologue. Otherwise it returns false.\n+   Note: For x86 with \"hotfix\" it is sorried.  */\n+static bool\n+ix86_profile_before_prologue (void)\n+{\n+  return flag_fentry != 0;\n+}\n+\n /* Function that is callable from the debugger to print the current\n    options.  */\n void\n@@ -3671,6 +3680,21 @@ override_options (bool main_args_p)\n     target_flags |= MASK_CLD & ~target_flags_explicit;\n #endif\n \n+  if (!TARGET_64BIT && flag_pic)\n+    {\n+      if (flag_fentry > 0)\n+        sorry (\"-mfentry isn't supported for 32-bit in combination with -fpic\");\n+      flag_fentry = 0;\n+    }\n+  if (flag_fentry < 0)\n+   {\n+#if defined(PROFILE_BEFORE_PROLOGUE)\n+     flag_fentry = 1;\n+#else\n+     flag_fentry = 0;\n+#endif\n+   }\n+\n   /* Save the initial options in case the user does function specific options */\n   if (main_args_p)\n     target_option_default_node = target_option_current_node\n@@ -4832,7 +4856,7 @@ ix86_function_regparm (const_tree type, const_tree decl)\n   if (decl\n       && TREE_CODE (decl) == FUNCTION_DECL\n       && optimize\n-      && !profile_flag)\n+      && !(profile_flag && !flag_fentry))\n     {\n       /* FIXME: remove this CONST_CAST when cgraph.[ch] is constified.  */\n       struct cgraph_local_info *i = cgraph_local_info (CONST_CAST_TREE (decl));\n@@ -4904,7 +4928,8 @@ ix86_function_sseregparm (const_tree type, const_tree decl, bool warn)\n \n   /* For local functions, pass up to SSE_REGPARM_MAX SFmode\n      (and DFmode for SSE2) arguments in SSE registers.  */\n-  if (decl && TARGET_SSE_MATH && optimize && !profile_flag)\n+  if (decl && TARGET_SSE_MATH && optimize\n+      && !(profile_flag && !flag_fentry))\n     {\n       /* FIXME: remove this CONST_CAST when cgraph.[ch] is constified.  */\n       struct cgraph_local_info *i = cgraph_local_info (CONST_CAST_TREE(decl));\n@@ -7874,7 +7899,7 @@ ix86_frame_pointer_required (void)\n \t  || ix86_current_function_calls_tls_descriptor))\n     return true;\n \n-  if (crtl->profile)\n+  if (crtl->profile && !flag_fentry)\n     return true;\n \n   return false;\n@@ -8142,7 +8167,8 @@ gen_push (rtx arg)\n static unsigned int\n ix86_select_alt_pic_regnum (void)\n {\n-  if (current_function_is_leaf && !crtl->profile\n+  if (current_function_is_leaf\n+      && !crtl->profile\n       && !ix86_current_function_calls_tls_descriptor)\n     {\n       int i, drap;\n@@ -9190,6 +9216,11 @@ ix86_expand_prologue (void)\n     {\n       rtx push, mov;\n \n+      /* Check if profiling is active and we shall use profiling before\n+         prologue variant. If so sorry.  */\n+      if (crtl->profile && flag_fentry != 0)\n+        sorry (\"ms_hook_prologue attribute isn't compatible with -mfentry for 32-bit\");\n+\n       /* Make sure the function starts with\n \t 8b ff     movl.s %edi,%edi (emited by ix86_asm_output_function_label)\n \t 55        push   %ebp\n@@ -9479,7 +9510,7 @@ ix86_expand_prologue (void)\n      when mcount needs it.  Blockage to avoid call movement across mcount\n      call is emitted in generic code after the NOTE_INSN_PROLOGUE_END\n      note.  */\n-  if (crtl->profile && pic_reg_used)\n+  if (crtl->profile && !flag_fentry && pic_reg_used)\n     emit_insn (gen_prologue_use (pic_offset_table_rtx));\n \n   if (crtl->drap_reg && !crtl->stack_realign_needed)\n@@ -27287,32 +27318,35 @@ x86_field_alignment (tree field, int computed)\n void\n x86_function_profiler (FILE *file, int labelno ATTRIBUTE_UNUSED)\n {\n+  const char *mcount_name = (flag_fentry ? MCOUNT_NAME_BEFORE_PROLOGUE\n+\t\t\t\t\t : MCOUNT_NAME);\n+\n   if (TARGET_64BIT)\n     {\n #ifndef NO_PROFILE_COUNTERS\n       fprintf (file, \"\\tleaq\\t%sP%d(%%rip),%%r11\\n\", LPREFIX, labelno);\n #endif\n \n       if (DEFAULT_ABI == SYSV_ABI && flag_pic)\n-\tfputs (\"\\tcall\\t*\" MCOUNT_NAME \"@GOTPCREL(%rip)\\n\", file);\n+\tfprintf (file, \"\\tcall\\t*%s@GOTPCREL(%%rip)\\n\", mcount_name);\n       else\n-\tfputs (\"\\tcall\\t\" MCOUNT_NAME \"\\n\", file);\n+\tfprintf (file, \"\\tcall\\t%s\\n\", mcount_name);\n     }\n   else if (flag_pic)\n     {\n #ifndef NO_PROFILE_COUNTERS\n       fprintf (file, \"\\tleal\\t%sP%d@GOTOFF(%%ebx),%%\" PROFILE_COUNT_REGISTER \"\\n\",\n \t       LPREFIX, labelno);\n #endif\n-      fputs (\"\\tcall\\t*\" MCOUNT_NAME \"@GOT(%ebx)\\n\", file);\n+      fprintf (file, \"\\tcall\\t*%s@GOT(%%ebx)\\n\", mcount_name);\n     }\n   else\n     {\n #ifndef NO_PROFILE_COUNTERS\n       fprintf (file, \"\\tmovl\\t$%sP%d,%%\" PROFILE_COUNT_REGISTER \"\\n\",\n \t       LPREFIX, labelno);\n #endif\n-      fputs (\"\\tcall\\t\" MCOUNT_NAME \"\\n\", file);\n+      fprintf (file, \"\\tcall\\t%s\\n\", mcount_name);\n     }\n }\n \n@@ -31360,6 +31394,9 @@ ix86_enum_va_list (int idx, const char **pname, tree *ptree)\n #define TARGET_ASM_ALIGNED_DI_OP ASM_QUAD\n #endif\n \n+#undef TARGET_PROFILE_BEFORE_PROLOGUE\n+#define TARGET_PROFILE_BEFORE_PROLOGUE ix86_profile_before_prologue\n+\n #undef TARGET_ASM_UNALIGNED_HI_OP\n #define TARGET_ASM_UNALIGNED_HI_OP TARGET_ASM_ALIGNED_HI_OP\n #undef TARGET_ASM_UNALIGNED_SI_OP"}, {"sha": "fe093cfa7c96fe3dd65122f575a3e6253b82c2a7", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c5273a96ba8dbf98c40bc6d9d0a1587b4cfedb2/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c5273a96ba8dbf98c40bc6d9d0a1587b4cfedb2/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=3c5273a96ba8dbf98c40bc6d9d0a1587b4cfedb2", "patch": "@@ -1607,6 +1607,8 @@ typedef struct ix86_args {\n \n #define MCOUNT_NAME \"_mcount\"\n \n+#define MCOUNT_NAME_BEFORE_PROLOGUE \"__fentry__\"\n+\n #define PROFILE_COUNT_REGISTER \"edx\"\n \n /* EXIT_IGNORE_STACK should be nonzero if, when returning from a function,"}, {"sha": "236082da49285e392fef22a657a6746bbd6b70c2", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c5273a96ba8dbf98c40bc6d9d0a1587b4cfedb2/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c5273a96ba8dbf98c40bc6d9d0a1587b4cfedb2/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=3c5273a96ba8dbf98c40bc6d9d0a1587b4cfedb2", "patch": "@@ -375,3 +375,7 @@ Support RDRND built-in functions and code generation\n mf16c\n Target Report Mask(ISA_F16C) Var(ix86_isa_flags) VarExists Save\n Support F16C built-in functions and code generation\n+\n+mfentry\n+Target Report Var(flag_fentry) Init(-1)\n+Emit profiling counter call at function entry before prologue."}, {"sha": "c9f7664514c4d7c8d83a9f6da0517d43555a6d9b", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c5273a96ba8dbf98c40bc6d9d0a1587b4cfedb2/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c5273a96ba8dbf98c40bc6d9d0a1587b4cfedb2/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=3c5273a96ba8dbf98c40bc6d9d0a1587b4cfedb2", "patch": "@@ -601,7 +601,7 @@ Objective-C and Objective-C++ Dialects}.\n -momit-leaf-frame-pointer  -mno-red-zone -mno-tls-direct-seg-refs @gol\n -mcmodel=@var{code-model} -mabi=@var{name} @gol\n -m32  -m64 -mlarge-data-threshold=@var{num} @gol\n--msse2avx}\n+-msse2avx -mfentry}\n \n @emph{IA-64 Options}\n @gccoptlist{-mbig-endian  -mlittle-endian  -mgnu-as  -mgnu-ld  -mno-pic @gol\n@@ -12492,6 +12492,14 @@ For systems that use GNU libc, the default is on.\n @opindex msse2avx\n Specify that the assembler should encode SSE instructions with VEX\n prefix.  The option @option{-mavx} turns this on by default.\n+\n+@item -mfentry\n+@itemx -mno-fentry\n+@opindex mfentry\n+If profiling is active @option{-pg} put the profiling\n+counter call before prologue.\n+Note: On x86 architectures the attribute @code{ms_hook_prologue}\n+isn't possible at the moment for @option{-mfentry} and @option{-pg}.\n @end table\n \n These @samp{-m} switches are supported in addition to the above"}, {"sha": "d59c55f054cf822841ee5cea088dd2e4fba7ea9b", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c5273a96ba8dbf98c40bc6d9d0a1587b4cfedb2/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c5273a96ba8dbf98c40bc6d9d0a1587b4cfedb2/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=3c5273a96ba8dbf98c40bc6d9d0a1587b4cfedb2", "patch": "@@ -7076,6 +7076,13 @@ Contains the value true if the target places read-only\n ``small data'' into a separate section.  The default value is false.\n @end deftypevr\n \n+@deftypefn {Target Hook} bool TARGET_PROFILE_BEFORE_PROLOGUE (void)\n+It returns true if target wants profile code emitted before prologue.\n+\n+The default version of this hook use the target macro\n+@code{PROFILE_BEFORE_PROLOGUE}.\n+@end deftypefn\n+\n @deftypefn {Target Hook} bool TARGET_BINDS_LOCAL_P (const_tree @var{exp})\n Returns true if @var{exp} names an object for which name resolution\n rules must resolve to the current ``module'' (dynamic shared library"}, {"sha": "1b00ebcda7b3dcef7fa5e80907c8112f9e10e3a9", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c5273a96ba8dbf98c40bc6d9d0a1587b4cfedb2/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c5273a96ba8dbf98c40bc6d9d0a1587b4cfedb2/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=3c5273a96ba8dbf98c40bc6d9d0a1587b4cfedb2", "patch": "@@ -7076,6 +7076,8 @@ Contains the value true if the target places read-only\n ``small data'' into a separate section.  The default value is false.\n @end deftypevr\n \n+@hook TARGET_PROFILE_BEFORE_PROLOGUE\n+\n @hook TARGET_BINDS_LOCAL_P\n Returns true if @var{exp} names an object for which name resolution\n rules must resolve to the current ``module'' (dynamic shared library"}, {"sha": "c35ed7b75a570bc567c0ff3f56293c307b57744d", "filename": "gcc/final.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c5273a96ba8dbf98c40bc6d9d0a1587b4cfedb2/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c5273a96ba8dbf98c40bc6d9d0a1587b4cfedb2/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=3c5273a96ba8dbf98c40bc6d9d0a1587b4cfedb2", "patch": "@@ -1546,10 +1546,8 @@ final_start_function (rtx first ATTRIBUTE_UNUSED, FILE *file,\n \n   /* The Sun386i and perhaps other machines don't work right\n      if the profiling code comes after the prologue.  */\n-#ifdef PROFILE_BEFORE_PROLOGUE\n-  if (crtl->profile)\n+  if (targetm.profile_before_prologue () && crtl->profile)\n     profile_function (file);\n-#endif /* PROFILE_BEFORE_PROLOGUE */\n \n #if defined (DWARF2_UNWIND_INFO) && defined (HAVE_prologue)\n   if (dwarf2out_do_frame ())\n@@ -1591,10 +1589,8 @@ final_start_function (rtx first ATTRIBUTE_UNUSED, FILE *file,\n static void\n profile_after_prologue (FILE *file ATTRIBUTE_UNUSED)\n {\n-#ifndef PROFILE_BEFORE_PROLOGUE\n-  if (crtl->profile)\n+  if (!targetm.profile_before_prologue () && crtl->profile)\n     profile_function (file);\n-#endif /* not PROFILE_BEFORE_PROLOGUE */\n }\n \n static void"}, {"sha": "e89a5c9b78d15694551865ec0ef8ad2c732a599b", "filename": "gcc/function.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c5273a96ba8dbf98c40bc6d9d0a1587b4cfedb2/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c5273a96ba8dbf98c40bc6d9d0a1587b4cfedb2/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=3c5273a96ba8dbf98c40bc6d9d0a1587b4cfedb2", "patch": "@@ -5183,13 +5183,11 @@ thread_prologue_and_epilogue_insns (void)\n       record_insns (seq, NULL, &prologue_insn_hash);\n       emit_note (NOTE_INSN_PROLOGUE_END);\n \n-#ifndef PROFILE_BEFORE_PROLOGUE\n       /* Ensure that instructions are not moved into the prologue when\n \t profiling is on.  The call to the profiling routine can be\n \t emitted within the live range of a call-clobbered register.  */\n-      if (crtl->profile)\n+      if (!targetm.profile_before_prologue () && crtl->profile)\n         emit_insn (gen_blockage ());\n-#endif\n \n       seq = get_insns ();\n       end_sequence ();"}, {"sha": "10013e643d32fcf2081e592ae9e3a442d464e3c2", "filename": "gcc/target.def", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c5273a96ba8dbf98c40bc6d9d0a1587b4cfedb2/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c5273a96ba8dbf98c40bc6d9d0a1587b4cfedb2/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=3c5273a96ba8dbf98c40bc6d9d0a1587b4cfedb2", "patch": "@@ -1229,6 +1229,15 @@ DEFHOOK\n  bool, (const_tree exp),\n  default_binds_local_p)\n \n+/* Check if profiling code is before or after prologue.  */\n+DEFHOOK\n+(profile_before_prologue,\n+ \"It returns true if target wants profile code emitted before prologue.\\n\\n\\\n+The default version of this hook use the target macro\\n\\\n+@code{PROFILE_BEFORE_PROLOGUE}.\",\n+ bool, (void),\n+ default_profile_before_prologue)\n+\n /* Modify and return the identifier of a DECL's external name,\n    originally identified by ID, as required by the target,\n    (eg, append @nn to windows32 stdcall function names)."}, {"sha": "553d0bc9aef64920d5ecf96fe908036dfc417427", "filename": "gcc/targhooks.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c5273a96ba8dbf98c40bc6d9d0a1587b4cfedb2/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c5273a96ba8dbf98c40bc6d9d0a1587b4cfedb2/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=3c5273a96ba8dbf98c40bc6d9d0a1587b4cfedb2", "patch": "@@ -1197,4 +1197,14 @@ default_register_move_cost (enum machine_mode mode ATTRIBUTE_UNUSED,\n #endif\n }\n \n+bool\n+default_profile_before_prologue (void)\n+{\n+#ifdef PROFILE_BEFORE_PROLOGUE\n+  return true;\n+#else\n+  return false;\n+#endif\n+}\n+\n #include \"gt-targhooks.h\""}, {"sha": "198bcc79eafff5f8f8f5f95e335f8e0fa09e8261", "filename": "gcc/targhooks.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c5273a96ba8dbf98c40bc6d9d0a1587b4cfedb2/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c5273a96ba8dbf98c40bc6d9d0a1587b4cfedb2/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=3c5273a96ba8dbf98c40bc6d9d0a1587b4cfedb2", "patch": "@@ -150,3 +150,4 @@ extern int default_memory_move_cost (enum machine_mode, reg_class_t, bool);\n extern int default_register_move_cost (enum machine_mode, reg_class_t,\n \t\t\t\t       reg_class_t);\n \n+extern bool default_profile_before_prologue (void);"}]}