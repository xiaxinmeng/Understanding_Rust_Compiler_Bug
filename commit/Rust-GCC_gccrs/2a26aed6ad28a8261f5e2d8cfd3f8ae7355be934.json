{"sha": "2a26aed6ad28a8261f5e2d8cfd3f8ae7355be934", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmEyNmFlZDZhZDI4YTgyNjFmNWUyZDhjZmQzZjhhZTczNTViZTkzNA==", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2019-02-14T17:17:20Z"}, "committer": {"name": "Tamar Christina", "email": "tnfchris@gcc.gnu.org", "date": "2019-02-14T17:17:20Z"}, "message": "Arm: Add HF modes to ANY iterators \n\nThe iterator ANY64 are used in various general split patterns and is supposed\nto contain all 64 bit modes.\n\nFor some reason the pattern has HI but not HF.  This adds HF so that general\n64 bit splits are generated for these modes as well.  These are required\nby various split patterns that expect them to be there.\n\ngcc/ChangeLog:\n\n\tPR target/88850\n\t* config/arm/iterators.md (ANY64): Add V4HF.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/88850\n\t* gcc.target/arm/pr88850-2.c: New test.\n\t* lib/target-supports.exp\n\t(check_effective_target_arm_neon_softfp_fp16_ok_nocache,\n\tcheck_effective_target_arm_neon_softfp_fp16_ok,\n\tadd_options_for_arm_neon_softfp_fp16): New.\n\nFrom-SVN: r268884", "tree": {"sha": "019d8312f886fc614ad63a49bb7b1de4a363db8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/019d8312f886fc614ad63a49bb7b1de4a363db8e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a26aed6ad28a8261f5e2d8cfd3f8ae7355be934", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a26aed6ad28a8261f5e2d8cfd3f8ae7355be934", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a26aed6ad28a8261f5e2d8cfd3f8ae7355be934", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a26aed6ad28a8261f5e2d8cfd3f8ae7355be934/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bb2a18a3a8736069af6d03965e77aaa89c6a1eed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb2a18a3a8736069af6d03965e77aaa89c6a1eed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb2a18a3a8736069af6d03965e77aaa89c6a1eed"}], "stats": {"total": 82, "additions": 80, "deletions": 2}, "files": [{"sha": "727e37ee69f58f609d3cb5dcafb5a7bfb780a675", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a26aed6ad28a8261f5e2d8cfd3f8ae7355be934/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a26aed6ad28a8261f5e2d8cfd3f8ae7355be934/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2a26aed6ad28a8261f5e2d8cfd3f8ae7355be934", "patch": "@@ -1,3 +1,8 @@\n+2019-02-14  Tamar Christina  <tamar.christina@arm.com>\n+\n+\tPR target/88850\n+\t* config/arm/iterators.md (ANY64): Add V4HF.\n+\n 2019-02-14  Martin Liska  <mliska@suse.cz>\n \n \tPR rtl-optimization/89242"}, {"sha": "eb07c5b90c1b1905d35d7b480bdbe7d7a45ab7ba", "filename": "gcc/config/arm/iterators.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a26aed6ad28a8261f5e2d8cfd3f8ae7355be934/gcc%2Fconfig%2Farm%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a26aed6ad28a8261f5e2d8cfd3f8ae7355be934/gcc%2Fconfig%2Farm%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fiterators.md?ref=2a26aed6ad28a8261f5e2d8cfd3f8ae7355be934", "patch": "@@ -24,9 +24,9 @@\n ;;----------------------------------------------------------------------------\n \n ;; A list of modes that are exactly 64 bits in size. This is used to expand\n-;; some splits that are the same for all modes when operating on ARM \n+;; some splits that are the same for all modes when operating on ARM\n ;; registers.\n-(define_mode_iterator ANY64 [DI DF V8QI V4HI V2SI V2SF])\n+(define_mode_iterator ANY64 [DI DF V8QI V4HI V4HF V2SI V2SF])\n \n (define_mode_iterator ANY128 [V2DI V2DF V16QI V8HI V4SI V4SF])\n "}, {"sha": "4d2a2363183923a35d74e2efe9d929cd6e9d18c5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a26aed6ad28a8261f5e2d8cfd3f8ae7355be934/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a26aed6ad28a8261f5e2d8cfd3f8ae7355be934/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2a26aed6ad28a8261f5e2d8cfd3f8ae7355be934", "patch": "@@ -1,3 +1,12 @@\n+2019-02-14  Tamar Christina  <tamar.christina@arm.com>\n+\n+\tPR target/88850\n+\t* gcc.target/arm/pr88850-2.c: New test.\n+\t* lib/target-supports.exp\n+\t(check_effective_target_arm_neon_softfp_fp16_ok_nocache,\n+\tcheck_effective_target_arm_neon_softfp_fp16_ok,\n+\tadd_options_for_arm_neon_softfp_fp16): New.\n+\n 2019-02-14  Matthew Malcomson  <matthew.malcomson@arm.com>\n \n \t* gcc.dg/rtl/arm/ldrd-peepholes.c: Restrict testcase."}, {"sha": "7a1aec55dc70625bd6306e8d6bf094e11afe81bc", "filename": "gcc/testsuite/gcc.target/arm/pr88850-2.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a26aed6ad28a8261f5e2d8cfd3f8ae7355be934/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr88850-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a26aed6ad28a8261f5e2d8cfd3f8ae7355be934/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr88850-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr88850-2.c?ref=2a26aed6ad28a8261f5e2d8cfd3f8ae7355be934", "patch": "@@ -0,0 +1,18 @@\n+/* PR target/88850.  */\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-O2 -march=armv7-a -fdump-rtl-final\" } */\n+/* { dg-add-options arm_neon_softfp_fp16 } */\n+/* { dg-require-effective-target arm_neon_softfp_fp16_ok } */\n+\n+#include <arm_neon.h>\n+\n+extern void c (int, float16x4_t);\n+\n+void a (float16x4_t b)\n+{\n+  c (0, b);\n+}\n+\n+\n+/* Check that these 64-bit moves are done in SI.  */\n+/* { dg-final { scan-rtl-dump \"_movsi_vfp\" \"final\" } } */"}, {"sha": "a56796393a56d44921e82bcdd530d1d13a92ac42", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a26aed6ad28a8261f5e2d8cfd3f8ae7355be934/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a26aed6ad28a8261f5e2d8cfd3f8ae7355be934/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=2a26aed6ad28a8261f5e2d8cfd3f8ae7355be934", "patch": "@@ -3785,6 +3785,44 @@ proc check_effective_target_arm_neon_fp16_ok { } {\n \t\tcheck_effective_target_arm_neon_fp16_ok_nocache]\n }\n \n+# Return 1 if this is an ARM target supporting -mfpu=neon-fp16\n+# and -mfloat-abi=softfp together.  Some multilibs may be\n+# incompatible with these options.  Also set et_arm_neon_softfp_fp16_flags to\n+# the best options to add.\n+\n+proc check_effective_target_arm_neon_softfp_fp16_ok_nocache { } {\n+    global et_arm_neon_softfp_fp16_flags\n+    global et_arm_neon_flags\n+    set et_arm_neon_softfp_fp16_flags \"\"\n+    if { [check_effective_target_arm32]\n+\t && [check_effective_target_arm_neon_ok] } {\n+\tforeach flags {\"-mfpu=neon-fp16 -mfloat-abi=softfp\"\n+\t\t       \"-mfloat-abi=softfp -mfp16-format=ieee\"\n+\t\t       \"-mfpu=neon-fp16 -mfloat-abi=softfp -mfp16-format=ieee\"} {\n+\t    if { [check_no_compiler_messages_nocache arm_neon_softfp_fp16_ok object {\n+\t\t#include \"arm_neon.h\"\n+\t\tfloat16x4_t\n+\t\tfoo (float32x4_t arg)\n+\t\t{\n+                  return vcvt_f16_f32 (arg);\n+\t\t}\n+\t    } \"$et_arm_neon_flags $flags\"] } {\n+\t\tset et_arm_neon_softfp_fp16_flags [concat $et_arm_neon_flags $flags]\n+\t\treturn 1\n+\t    }\n+\t}\n+    }\n+\n+    return 0\n+}\n+\n+proc check_effective_target_arm_neon_softfp_fp16_ok { } {\n+    return [check_cached_effective_target arm_neon_softfp_fp16_ok \\\n+\t\tcheck_effective_target_arm_neon_softfp_fp16_ok_nocache]\n+}\n+\n+\n+\n proc check_effective_target_arm_neon_fp16_hw { } {\n     if {! [check_effective_target_arm_neon_fp16_ok] } {\n \treturn 0\n@@ -3808,6 +3846,14 @@ proc add_options_for_arm_neon_fp16 { flags } {\n     return \"$flags $et_arm_neon_fp16_flags\"\n }\n \n+proc add_options_for_arm_neon_softfp_fp16 { flags } {\n+    if { ! [check_effective_target_arm_neon_softfp_fp16_ok] } {\n+\treturn \"$flags\"\n+    }\n+    global et_arm_neon_softfp_fp16_flags\n+    return \"$flags $et_arm_neon_softfp_fp16_flags\"\n+}\n+\n # Return 1 if this is an ARM target supporting the FP16 alternative\n # format.  Some multilibs may be incompatible with the options needed.  Also\n # set et_arm_neon_fp16_flags to the best options to add."}]}