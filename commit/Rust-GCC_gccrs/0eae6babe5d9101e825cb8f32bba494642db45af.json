{"sha": "0eae6babe5d9101e825cb8f32bba494642db45af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGVhZTZiYWJlNWQ5MTAxZTgyNWNiOGYzMmJiYTQ5NDY0MmRiNDVhZg==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2008-07-17T13:23:32Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2008-07-17T13:23:32Z"}, "message": "ipa-cp.c (ipcp_print_all_lattices): New variable info...\n\n2008-07-17  Martin Jambor  <mjambor@suse.cz>\n\n\t* ipa-cp.c (ipcp_print_all_lattices): New variable info, check\n\tthat nodes are relevant by examining the node->analyzed flag.\n\t(ipcp_init_stage): Check which nodes are relevant, assert that the\n\trelevant ones are also required.\n\t(ipcp_propagate_stage): Check on the side arrays are properly\n\tallocated.\n\t(ipcp_print_all_jump_functions): Make sure not to touch any node\n\tthat is not analyzed or an edge that does not have a corresponding\n\tentry in the on-the-side vectors.\n\t(ipcp_function_scale_print): Likewise.\n\t(ipcp_update_callgraph): Check that the node is relevant.\n\t(ipcp_insert_stage): Check that the node is relevant.  Check there is\n\tan info for every node and edge.\n\t* ipa-prop.c (ipa_init_func_list): Check the nodes are relevant.\n\t(ipa_print_all_tree_maps): Likewise and a new variable info.\n\t(ipa_print_all_params_modified): Likewise.\n\t* ipa-prop.h (ipa_edge_args_info_available_for_edge_p): New function.\n\nFrom-SVN: r137921", "tree": {"sha": "fbd54fb05da1736f1ad2c36f9e38e2f0ad726075", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fbd54fb05da1736f1ad2c36f9e38e2f0ad726075"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0eae6babe5d9101e825cb8f32bba494642db45af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0eae6babe5d9101e825cb8f32bba494642db45af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0eae6babe5d9101e825cb8f32bba494642db45af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0eae6babe5d9101e825cb8f32bba494642db45af/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "19327a1a0b6f859225cb386717394fa18a85ee63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19327a1a0b6f859225cb386717394fa18a85ee63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19327a1a0b6f859225cb386717394fa18a85ee63"}], "stats": {"total": 91, "additions": 80, "deletions": 11}, "files": [{"sha": "53e1131037d934f81154a6e5630999e2edc6eb83", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0eae6babe5d9101e825cb8f32bba494642db45af/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0eae6babe5d9101e825cb8f32bba494642db45af/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0eae6babe5d9101e825cb8f32bba494642db45af", "patch": "@@ -1,3 +1,23 @@\n+2008-07-17  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* ipa-cp.c (ipcp_print_all_lattices): New variable info, check\n+\tthat nodes are relevant by examining the node->analyzed flag.\n+\t(ipcp_init_stage): Check which nodes are relevant, assert that the\n+\trelevant ones are also required.\n+\t(ipcp_propagate_stage): Check on the side arrays are properly\n+\tallocated.\n+\t(ipcp_print_all_jump_functions): Make sure not to touch any node\n+\tthat is not analyzed or an edge that does not have a corresponding\n+\tentry in the on-the-side vectors.\n+\t(ipcp_function_scale_print): Likewise.\n+\t(ipcp_update_callgraph): Check that the node is relevant.\n+\t(ipcp_insert_stage): Check that the node is relevant.  Check there is\n+\tan info for every node and edge.\n+\t* ipa-prop.c (ipa_init_func_list): Check the nodes are relevant.\n+\t(ipa_print_all_tree_maps): Likewise and a new variable info.\n+\t(ipa_print_all_params_modified): Likewise.\n+\t* ipa-prop.h (ipa_edge_args_info_available_for_edge_p): New function.\n+\n 2008-07-17  Roman Zippel <zippel@linux-m68k.org>\n \n \tPR target/25343"}, {"sha": "505f17d101c83cfe7c7d18910dd1b5bddd8f6a36", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 33, "deletions": 8, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0eae6babe5d9101e825cb8f32bba494642db45af/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0eae6babe5d9101e825cb8f32bba494642db45af/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=0eae6babe5d9101e825cb8f32bba494642db45af", "patch": "@@ -293,7 +293,11 @@ ipcp_print_all_lattices (FILE * f)\n   fprintf (f, \"\\nLATTICE PRINT\\n\");\n   for (node = cgraph_nodes; node; node = node->next)\n     {\n-      struct ipa_node_params *info = IPA_NODE_REF (node);\n+      struct ipa_node_params *info;\n+\n+      if (!node->analyzed)\n+\tcontinue;\n+      info = IPA_NODE_REF (node);\n       fprintf (f, \"Printing lattices %s:\\n\", cgraph_node_name (node));\n       count = ipa_get_param_count (info);\n       for (i = 0; i < count; i++)\n@@ -413,6 +417,11 @@ ipcp_init_stage (void)\n \n   for (node = cgraph_nodes; node; node = node->next)\n     {\n+      if (!node->analyzed)\n+\tcontinue;\n+      /* Unreachable nodes should have been eliminated before ipcp.  */\n+      gcc_assert (node->needed || node->reachable);\n+\n       ipa_count_formal_params (node);\n       ipa_create_param_decls_array (node);\n       ipcp_initialize_node_lattices (node);\n@@ -421,9 +430,13 @@ ipcp_init_stage (void)\n     }\n   for (node = cgraph_nodes; node; node = node->next)\n     {\n+      if (!node->analyzed)\n+\tcontinue;\n       /* building jump functions  */\n       for (cs = node->callees; cs; cs = cs->next_callee)\n \t{\n+\t  if (!cs->callee->analyzed)\n+\t    continue;\n \t  ipa_count_arguments (cs);\n \t  if (ipa_get_cs_argument_count (IPA_EDGE_REF (cs))\n \t      != ipa_get_param_count (IPA_NODE_REF (cs->callee)))\n@@ -480,6 +493,8 @@ ipcp_propagate_stage (void)\n   struct ipa_func_list *wl;\n   int count;\n \n+  ipa_check_create_node_params ();\n+  ipa_check_create_edge_args ();\n   /* Initialize worklist to contain all functions.  */\n   wl = ipa_init_func_list ();\n   while (wl)\n@@ -550,12 +565,16 @@ ipcp_print_all_jump_functions (FILE * f)\n   fprintf (f, \"\\nCALLSITE PARAM PRINT\\n\");\n   for (node = cgraph_nodes; node; node = node->next)\n     {\n+      if (!node->analyzed)\n+\tcontinue;\n+\n       for (cs = node->callees; cs; cs = cs->next_callee)\n \t{\n \t  fprintf (f, \"callsite  %s \", cgraph_node_name (node));\n \t  fprintf (f, \"-> %s :: \\n\", cgraph_node_name (cs->callee));\n \n-\t  if (ipa_is_called_with_var_arguments (IPA_NODE_REF (cs->callee)))\n+\t  if (!ipa_edge_args_info_available_for_edge_p (cs)\n+\t      || ipa_is_called_with_var_arguments (IPA_NODE_REF (cs->callee)))\n \t    continue;\n \n \t  count = ipa_get_cs_argument_count (IPA_EDGE_REF (cs));\n@@ -592,6 +611,8 @@ ipcp_function_scale_print (FILE * f)\n \n   for (node = cgraph_nodes; node; node = node->next)\n     {\n+      if (!node->analyzed)\n+\tcontinue;\n       fprintf (f, \"printing scale for %s: \", cgraph_node_name (node));\n       fprintf (f, \"value is  \" HOST_WIDE_INT_PRINT_DEC\n \t       \"  \\n\", (HOST_WIDE_INT) ipcp_get_node_scale (node));\n@@ -820,7 +841,7 @@ ipcp_update_callgraph (void)\n   for (node = cgraph_nodes; node; node = node->next)\n     {\n       /* want to fix only original nodes  */\n-      if (ipcp_node_is_clone (node))\n+      if (!node->analyzed || ipcp_node_is_clone (node))\n \tcontinue;\n       for (cs = node->callees; cs; cs = cs->next_callee)\n \tif (ipcp_node_is_clone (cs->callee))\n@@ -906,13 +927,17 @@ ipcp_insert_stage (void)\n   tree parm_tree;\n   struct ipa_replace_map *replace_param;\n \n+  ipa_check_create_node_params ();\n+  ipa_check_create_edge_args ();\n+\n   for (node = cgraph_nodes; node; node = node->next)\n     {\n-      struct ipa_node_params *info = IPA_NODE_REF (node);\n-      /* Propagation of the constant is forbidden in \n-         certain conditions.  */\n-      if (!node->analyzed || ipcp_node_not_modifiable_p (node)\n-\t  || ipa_is_called_with_var_arguments (info))\n+      struct ipa_node_params *info;\n+      /* Propagation of the constant is forbidden in certain conditions.  */\n+      if (!node->analyzed || ipcp_node_not_modifiable_p (node))\n+\t  continue;\n+      info = IPA_NODE_REF (node);\n+      if (ipa_is_called_with_var_arguments (info))\n \tcontinue;\n       const_param = 0;\n       count = ipa_get_param_count (info);"}, {"sha": "ff833d77f23bba4b0b2f0b70f9128d5810d37b87", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0eae6babe5d9101e825cb8f32bba494642db45af/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0eae6babe5d9101e825cb8f32bba494642db45af/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=0eae6babe5d9101e825cb8f32bba494642db45af", "patch": "@@ -53,7 +53,13 @@ ipa_init_func_list (void)\n \n   wl = NULL;\n   for (node = cgraph_nodes; node; node = node->next)\n-    ipa_push_func_to_list (&wl, node);\n+    if (node->analyzed)\n+      {\n+\t/* Unreachable nodes should have been eliminated before ipcp and\n+\t   inlining.  */\n+\tgcc_assert (node->needed || node->reachable);\n+\tipa_push_func_to_list (&wl, node);\n+      }\n \n   return wl;\n }\n@@ -521,7 +527,11 @@ ipa_print_all_tree_maps (FILE * f)\n   fprintf (f, \"\\nPARAM TREE MAP PRINT\\n\");\n   for (node = cgraph_nodes; node; node = node->next)\n     {\n-      struct ipa_node_params *info = IPA_NODE_REF (node);\n+      struct ipa_node_params *info;\n+\n+      if (!node->analyzed)\n+\tcontinue;\n+      info = IPA_NODE_REF (node);\n       fprintf (f, \"function  %s Trees :: \\n\", cgraph_node_name (node));\n       count = ipa_get_param_count (info);\n       for (i = 0; i < count; i++)\n@@ -547,7 +557,11 @@ ipa_print_all_params_modified (FILE * f)\n   fprintf (f, \"\\nMODIFY PRINT\\n\");\n   for (node = cgraph_nodes; node; node = node->next)\n     {\n-      struct ipa_node_params *info = IPA_NODE_REF (node);\n+      struct ipa_node_params *info;\n+\n+      if (!node->analyzed)\n+\tcontinue;\n+      info = IPA_NODE_REF (node);\n       fprintf (f, \"function  %s :: \\n\", cgraph_node_name (node));\n       count = ipa_get_param_count (info);\n       for (i = 0; i < count; i++)"}, {"sha": "2dd83326018ad075139d33c5457742c7538f3d69", "filename": "gcc/ipa-prop.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0eae6babe5d9101e825cb8f32bba494642db45af/gcc%2Fipa-prop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0eae6babe5d9101e825cb8f32bba494642db45af/gcc%2Fipa-prop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.h?ref=0eae6babe5d9101e825cb8f32bba494642db45af", "patch": "@@ -287,6 +287,16 @@ ipa_check_create_edge_args (void)\n \t\t\t   cgraph_edge_max_uid + 1);\n }\n \n+/* Returns true if the array of edge infos is large enough to accomodate an\n+   info for EDGE.  The main purpose of this function is that debug dumping\n+   function can check info availability without causing reallocations.  */\n+static inline bool\n+ipa_edge_args_info_available_for_edge_p (struct cgraph_edge *edge)\n+{\n+  return ((unsigned) edge->uid < VEC_length (ipa_edge_args_t,\n+\t\t\t\t\t     ipa_edge_args_vector));\n+}\n+\n /* A function list element.  It is used to create a temporary worklist used in\n    the propagation stage of IPCP. (can be used for more IPA optimizations)  */\n struct ipa_func_list"}]}