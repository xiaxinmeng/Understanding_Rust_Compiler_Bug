{"sha": "f71307783a96ca77b876c1ee0e8f3c6a33bc9a6a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjcxMzA3NzgzYTk2Y2E3N2I4NzZjMWVlMGU4ZjNjNmEzM2JjOWE2YQ==", "commit": {"author": {"name": "Douglas B Rupp", "email": "rupp@gnat.com", "date": "2001-12-05T12:48:34Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2001-12-05T12:48:34Z"}, "message": "* config/alpha/alpha.c (alpha_va_start): Update VMS case.\n\nFrom-SVN: r47670", "tree": {"sha": "710acd215d431fe513ca449e9c0eb32412e58535", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/710acd215d431fe513ca449e9c0eb32412e58535"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f71307783a96ca77b876c1ee0e8f3c6a33bc9a6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f71307783a96ca77b876c1ee0e8f3c6a33bc9a6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f71307783a96ca77b876c1ee0e8f3c6a33bc9a6a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f71307783a96ca77b876c1ee0e8f3c6a33bc9a6a/comments", "author": null, "committer": null, "parents": [{"sha": "4ee43206b1a8daec35f41514f4f3a4bcca0c5c6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ee43206b1a8daec35f41514f4f3a4bcca0c5c6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ee43206b1a8daec35f41514f4f3a4bcca0c5c6e"}], "stats": {"total": 51, "additions": 34, "deletions": 17}, "files": [{"sha": "a43bbb78de029a5fc432d9465f3f0bf673f78d2b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f71307783a96ca77b876c1ee0e8f3c6a33bc9a6a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f71307783a96ca77b876c1ee0e8f3c6a33bc9a6a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f71307783a96ca77b876c1ee0e8f3c6a33bc9a6a", "patch": "@@ -1,3 +1,7 @@\n+Wed Dec  5 07:41:13 2001  Douglas B. Rupp  <rupp@gnat.com>\n+\n+\t* config/alpha/alpha.c (alpha_va_start): Update VMS case.\n+\n Wed Dec  5 07:27:42 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \t\t\t  Douglas B. Rupp  <rupp@gnat.com>\n \t"}, {"sha": "d0c8b210f80e745a082da82f8c0cf72a018c9622", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 30, "deletions": 17, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f71307783a96ca77b876c1ee0e8f3c6a33bc9a6a/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f71307783a96ca77b876c1ee0e8f3c6a33bc9a6a/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=f71307783a96ca77b876c1ee0e8f3c6a33bc9a6a", "patch": "@@ -5482,7 +5482,7 @@ alpha_va_start (stdarg_p, valist, nextarg)\n   if (TREE_CODE (TREE_TYPE (valist)) == ERROR_MARK)\n     return;\n \n-  if (TARGET_ABI_OPEN_VMS || TARGET_ABI_UNICOSMK)\n+  if (TARGET_ABI_UNICOSMK)\n     std_expand_builtin_va_start (stdarg_p, valist, nextarg);\n \n   /* For Unix, SETUP_INCOMING_VARARGS moves the starting address base\n@@ -5495,28 +5495,41 @@ alpha_va_start (stdarg_p, valist, nextarg)\n      in argsize above, but which are not actually stored on the stack.  */\n \n   if (NUM_ARGS <= 5 + stdarg_p)\n-    offset = 6 * UNITS_PER_WORD;\n+    offset = TARGET_ABI_OPEN_VMS ? UNITS_PER_WORD : 6 * UNITS_PER_WORD;\n   else\n     offset = -6 * UNITS_PER_WORD;\n \n-  base_field = TYPE_FIELDS (TREE_TYPE (valist));\n-  offset_field = TREE_CHAIN (base_field);\n+  if (TARGET_ABI_OPEN_VMS)\n+    {\n+      nextarg = plus_constant (nextarg, offset);\n+      nextarg = plus_constant (nextarg, NUM_ARGS * UNITS_PER_WORD);\n+      t = build (MODIFY_EXPR, TREE_TYPE (valist), valist,\n+\t\t make_tree (ptr_type_node, nextarg));\n+      TREE_SIDE_EFFECTS (t) = 1;\n \n-  base_field = build (COMPONENT_REF, TREE_TYPE (base_field),\n-\t\t      valist, base_field);\n-  offset_field = build (COMPONENT_REF, TREE_TYPE (offset_field),\n-\t\t\tvalist, offset_field);\n+      expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n+    }\n+  else\n+    {\n+      base_field = TYPE_FIELDS (TREE_TYPE (valist));\n+      offset_field = TREE_CHAIN (base_field);\n \n-  t = make_tree (ptr_type_node, virtual_incoming_args_rtx);\n-  t = build (PLUS_EXPR, ptr_type_node, t, build_int_2 (offset, 0));\n-  t = build (MODIFY_EXPR, TREE_TYPE (base_field), base_field, t);\n-  TREE_SIDE_EFFECTS (t) = 1;\n-  expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n+      base_field = build (COMPONENT_REF, TREE_TYPE (base_field),\n+\t\t\t  valist, base_field);\n+      offset_field = build (COMPONENT_REF, TREE_TYPE (offset_field),\n+\t\t\t    valist, offset_field);\n \n-  t = build_int_2 (NUM_ARGS*UNITS_PER_WORD, 0);\n-  t = build (MODIFY_EXPR, TREE_TYPE (offset_field), offset_field, t);\n-  TREE_SIDE_EFFECTS (t) = 1;\n-  expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n+      t = make_tree (ptr_type_node, virtual_incoming_args_rtx);\n+      t = build (PLUS_EXPR, ptr_type_node, t, build_int_2 (offset, 0));\n+      t = build (MODIFY_EXPR, TREE_TYPE (base_field), base_field, t);\n+      TREE_SIDE_EFFECTS (t) = 1;\n+      expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n+\n+      t = build_int_2 (NUM_ARGS * UNITS_PER_WORD, 0);\n+      t = build (MODIFY_EXPR, TREE_TYPE (offset_field), offset_field, t);\n+      TREE_SIDE_EFFECTS (t) = 1;\n+      expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n+    }\n }\n \n rtx"}]}