{"sha": "d6fb62465635d67a420285c361d74b41c556e9dc", "node_id": "C_kwDOANBUbNoAKGQ2ZmI2MjQ2NTYzNWQ2N2E0MjAyODVjMzYxZDc0YjQxYzU1NmU5ZGM", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-04-30T12:44:16Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-04-30T12:46:41Z"}, "message": "Add new as_name interface for Dynamic types\n\nThe Gimple names of our dyn trait objects were looking like:\n\n  const struct dyn [HIR Trait: FnLike->[C: 0 Nid: 31 Hid: 38 Lid: 13] [(FN call ), ]<Self, &isize, &isize>] & const f\n\nThis is a horrible name but useful for debugging this patch fixes this so\nwe have a seperate naming for generating the type. So now it looks like:\n\n  const struct dyn [FnLike<Self, &isize, &isize>] & const f", "tree": {"sha": "c6b1d4c9dd48499d0350aa7945bace15494ba93e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c6b1d4c9dd48499d0350aa7945bace15494ba93e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d6fb62465635d67a420285c361d74b41c556e9dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6fb62465635d67a420285c361d74b41c556e9dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6fb62465635d67a420285c361d74b41c556e9dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6fb62465635d67a420285c361d74b41c556e9dc/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f38bf60c3ac7f039db5ff5c7c0587325097892c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f38bf60c3ac7f039db5ff5c7c0587325097892c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f38bf60c3ac7f039db5ff5c7c0587325097892c8"}], "stats": {"total": 27, "additions": 25, "deletions": 2}, "files": [{"sha": "7a1562ab5442d8081d700fa7fc1a2346f9df6f5a", "filename": "gcc/rust/typecheck/rust-tyty-bounds.cc", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6fb62465635d67a420285c361d74b41c556e9dc/gcc%2Frust%2Ftypecheck%2Frust-tyty-bounds.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6fb62465635d67a420285c361d74b41c556e9dc/gcc%2Frust%2Ftypecheck%2Frust-tyty-bounds.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-bounds.cc?ref=d6fb62465635d67a420285c361d74b41c556e9dc", "patch": "@@ -215,6 +215,12 @@ TypeBoundPredicate::as_string () const\n   return get ()->as_string () + subst_as_string ();\n }\n \n+std::string\n+TypeBoundPredicate::as_name () const\n+{\n+  return get ()->get_name () + subst_as_string ();\n+}\n+\n const Resolver::TraitReference *\n TypeBoundPredicate::get () const\n {\n@@ -432,6 +438,20 @@ TypeBoundsMappings::bounds_as_string () const\n   return \"bounds:[\" + raw_bounds_as_string () + \"]\";\n }\n \n+std::string\n+TypeBoundsMappings::raw_bounds_as_name () const\n+{\n+  std::string buf;\n+  for (size_t i = 0; i < specified_bounds.size (); i++)\n+    {\n+      const TypeBoundPredicate &b = specified_bounds.at (i);\n+      bool has_next = (i + 1) < specified_bounds.size ();\n+      buf += b.as_name () + (has_next ? \" + \" : \"\");\n+    }\n+\n+  return buf;\n+}\n+\n void\n TypeBoundsMappings::add_bound (TypeBoundPredicate predicate)\n {"}, {"sha": "fcbf9986d7d59b53a368f6a9877cc18b3e46be40", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6fb62465635d67a420285c361d74b41c556e9dc/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6fb62465635d67a420285c361d74b41c556e9dc/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=d6fb62465635d67a420285c361d74b41c556e9dc", "patch": "@@ -2867,8 +2867,7 @@ DynamicObjectType::clone () const\n std::string\n DynamicObjectType::get_name () const\n {\n-  std::string bounds = \"[\" + raw_bounds_as_string () + \"]\";\n-  return \"dyn \" + bounds;\n+  return \"dyn [\" + raw_bounds_as_name () + \"]\";\n }\n \n bool"}, {"sha": "b00237c1c27685c2bd99f03ce422c2f98ef3c540", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6fb62465635d67a420285c361d74b41c556e9dc/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6fb62465635d67a420285c361d74b41c556e9dc/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=d6fb62465635d67a420285c361d74b41c556e9dc", "patch": "@@ -124,6 +124,8 @@ class TypeBoundsMappings\n \n   std::string bounds_as_string () const;\n \n+  std::string raw_bounds_as_name () const;\n+\n protected:\n   void add_bound (TypeBoundPredicate predicate);\n \n@@ -1019,6 +1021,8 @@ class TypeBoundPredicate : public SubstitutionRef\n \n   std::string as_string () const;\n \n+  std::string as_name () const;\n+\n   const Resolver::TraitReference *get () const;\n \n   Location get_locus () const { return locus; }"}]}