{"sha": "aec24341d0aac1ca57031d066503c420fb850023", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWVjMjQzNDFkMGFhYzFjYTU3MDMxZDA2NjUwM2M0MjBmYjg1MDAyMw==", "commit": {"author": {"name": "Nick Alcock", "email": "nick.alcock@oracle.com", "date": "2020-06-23T16:03:03Z"}, "committer": {"name": "Jose E. Marchesi", "email": "jose.marchesi@oracle.com", "date": "2020-06-23T16:39:38Z"}, "message": "libiberty, include: add bsearch_r\n\nlibctf wants a bsearch that takes a void * arg pointer to avoid a\nnonportable use of __thread.\n\nbsearch_r is required, not optional, at this point because as far as I\ncan see this obvious-sounding function is not implemented by anyone's\nlibc.  We can easily move it to AC_LIBOBJ later if it proves necessary\nto do so.\n\ninclude/\n\t* libiberty.h (bsearch_r): New.\nlibiberty/\n\t* bsearch_r.c: New file.\n\t* Makefile.in (CFILES): Add bsearch_r.c.\n\t(REQUIRED_OFILES): Add bsearch_r.o.\n\t* functions.texi: Regenerate.", "tree": {"sha": "4eeb94bd058b421c5708e22f2b53eafc65a3c004", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4eeb94bd058b421c5708e22f2b53eafc65a3c004"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aec24341d0aac1ca57031d066503c420fb850023", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aec24341d0aac1ca57031d066503c420fb850023", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aec24341d0aac1ca57031d066503c420fb850023", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aec24341d0aac1ca57031d066503c420fb850023/comments", "author": {"login": "nickalcock", "id": 6503005, "node_id": "MDQ6VXNlcjY1MDMwMDU=", "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickalcock", "html_url": "https://github.com/nickalcock", "followers_url": "https://api.github.com/users/nickalcock/followers", "following_url": "https://api.github.com/users/nickalcock/following{/other_user}", "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions", "organizations_url": "https://api.github.com/users/nickalcock/orgs", "repos_url": "https://api.github.com/users/nickalcock/repos", "events_url": "https://api.github.com/users/nickalcock/events{/privacy}", "received_events_url": "https://api.github.com/users/nickalcock/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jemarch", "id": 7061875, "node_id": "MDQ6VXNlcjcwNjE4NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/7061875?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jemarch", "html_url": "https://github.com/jemarch", "followers_url": "https://api.github.com/users/jemarch/followers", "following_url": "https://api.github.com/users/jemarch/following{/other_user}", "gists_url": "https://api.github.com/users/jemarch/gists{/gist_id}", "starred_url": "https://api.github.com/users/jemarch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jemarch/subscriptions", "organizations_url": "https://api.github.com/users/jemarch/orgs", "repos_url": "https://api.github.com/users/jemarch/repos", "events_url": "https://api.github.com/users/jemarch/events{/privacy}", "received_events_url": "https://api.github.com/users/jemarch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "855bb998c937d4b1c86a394daea8844fe87eb387", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/855bb998c937d4b1c86a394daea8844fe87eb387", "html_url": "https://github.com/Rust-GCC/gccrs/commit/855bb998c937d4b1c86a394daea8844fe87eb387"}], "stats": {"total": 133, "additions": 130, "deletions": 3}, "files": [{"sha": "0bb5b81d4acb9732d926c8f7563628b42fbd313d", "filename": "include/libiberty.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aec24341d0aac1ca57031d066503c420fb850023/include%2Flibiberty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aec24341d0aac1ca57031d066503c420fb850023/include%2Flibiberty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Flibiberty.h?ref=aec24341d0aac1ca57031d066503c420fb850023", "patch": "@@ -641,6 +641,13 @@ extern int pexecute (const char *, char * const *, const char *,\n \n extern int pwait (int, int *, int);\n \n+/* Like bsearch, but takes and passes on an argument like qsort_r.  */\n+\n+extern void *bsearch_r (register const void *, const void *,\n+\t\t\tsize_t, register size_t,\n+\t\t\tregister int (*)(const void *, const void *, void *),\n+\t\t\tvoid *);\n+\n #if defined(HAVE_DECL_ASPRINTF) && !HAVE_DECL_ASPRINTF\n /* Like sprintf but provides a pointer to malloc'd storage, which must\n    be freed by the caller.  */"}, {"sha": "895f701bcd09579e8cb7258a044a5d02b06a4a52", "filename": "libiberty/Makefile.in", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aec24341d0aac1ca57031d066503c420fb850023/libiberty%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aec24341d0aac1ca57031d066503c420fb850023/libiberty%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FMakefile.in?ref=aec24341d0aac1ca57031d066503c420fb850023", "patch": "@@ -124,7 +124,7 @@ COMPILE.c = $(CC) -c @DEFS@ $(CFLAGS) $(CPPFLAGS) -I. -I$(INCDIR) \\\n # CONFIGURED_OFILES and funcs in configure.ac.  Also run \"make maint-deps\"\n # to build the new rules.\n CFILES = alloca.c argv.c asprintf.c atexit.c\t\t\t\t\\\n-\tbasename.c bcmp.c bcopy.c bsearch.c bzero.c\t\t\t\\\n+\tbasename.c bcmp.c bcopy.c bsearch.c bsearch_r.c bzero.c\t\t\\\n \tcalloc.c choose-temp.c clock.c concat.c cp-demangle.c\t\t\\\n \t cp-demint.c cplus-dem.c crc32.c\t\t\t\t\\\n \td-demangle.c dwarfnames.c dyn-string.c\t\t\t\t\\\n@@ -168,6 +168,7 @@ REQUIRED_OFILES =\t\t\t\t\t\t\t\\\n \t./regex.$(objext) ./cplus-dem.$(objext) ./cp-demangle.$(objext) \\\n \t./md5.$(objext) ./sha1.$(objext) ./alloca.$(objext)\t\t\\\n \t./argv.$(objext)\t\t\t\t\t\t\\\n+\t./bsearch_r.$(objext)\t\t\t\t\t\t\\\n \t./choose-temp.$(objext) ./concat.$(objext)\t\t\t\\\n \t./cp-demint.$(objext) ./crc32.$(objext) ./d-demangle.$(objext)\t\\\n \t./dwarfnames.$(objext) ./dyn-string.$(objext)\t\t\t\\\n@@ -601,6 +602,15 @@ $(CONFIGURED_OFILES): stamp-picdir stamp-noasandir\n \telse true; fi\n \t$(COMPILE.c) $(srcdir)/bsearch.c $(OUTPUT_OPTION)\n \n+./bsearch_r.$(objext): $(srcdir)/bsearch_r.c config.h $(INCDIR)/ansidecl.h\n+\tif [ x\"$(PICFLAG)\" != x ]; then \\\n+\t  $(COMPILE.c) $(PICFLAG) $(srcdir)/bsearch_r.c -o pic/$@; \\\n+\telse true; fi\n+\tif [ x\"$(NOASANFLAG)\" != x ]; then \\\n+\t  $(COMPILE.c) $(PICFLAG) $(NOASANFLAG) $(srcdir)/bsearch_r.c -o noasan/$@; \\\n+\telse true; fi\n+\t$(COMPILE.c) $(srcdir)/bsearch_r.c $(OUTPUT_OPTION)\n+\n ./bzero.$(objext): $(srcdir)/bzero.c\n \tif [ x\"$(PICFLAG)\" != x ]; then \\\n \t  $(COMPILE.c) $(PICFLAG) $(srcdir)/bzero.c -o pic/$@; \\"}, {"sha": "79ebae9b0bee3af4694b86451101e4fcd61ae950", "filename": "libiberty/bsearch_r.c", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aec24341d0aac1ca57031d066503c420fb850023/libiberty%2Fbsearch_r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aec24341d0aac1ca57031d066503c420fb850023/libiberty%2Fbsearch_r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fbsearch_r.c?ref=aec24341d0aac1ca57031d066503c420fb850023", "patch": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright (c) 1990 Regents of the University of California.\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in the\n+ *    documentation and/or other materials provided with the distribution.\n+ * 3. [rescinded 22 July 1999]\n+ * 4. Neither the name of the University nor the names of its contributors\n+ *    may be used to endorse or promote products derived from this software\n+ *    without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE\n+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\n+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\n+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ */\n+\n+/*\n+\n+@deftypefn Supplemental void* bsearch_r (const void *@var{key}, @\n+  const void *@var{base}, size_t @var{nmemb}, size_t @var{size}, @\n+  int (*@var{compar})(const void *, const void *, void *), void *@var{arg})\n+\n+Performs a search over an array of @var{nmemb} elements pointed to by\n+@var{base} for a member that matches the object pointed to by @var{key}.\n+The size of each member is specified by @var{size}.  The array contents\n+should be sorted in ascending order according to the @var{compar}\n+comparison function.  This routine should take three arguments: the first\n+two point to the @var{key} and to an array member, and the last is passed\n+down unchanged from @code{bsearch_r}'s last argument.  It should return an\n+integer less than, equal to, or greater than zero if the @var{key} object\n+is respectively less than, matching, or greater than the array member.\n+\n+@end deftypefn\n+\n+*/\n+\n+#include \"config.h\"\n+#include \"ansidecl.h\"\n+#include <sys/types.h>\t\t/* size_t */\n+#include <stdio.h>\n+\n+/*\n+ * Perform a binary search.\n+ *\n+ * The code below is a bit sneaky.  After a comparison fails, we\n+ * divide the work in half by moving either left or right. If lim\n+ * is odd, moving left simply involves halving lim: e.g., when lim\n+ * is 5 we look at item 2, so we change lim to 2 so that we will\n+ * look at items 0 & 1.  If lim is even, the same applies.  If lim\n+ * is odd, moving right again involes halving lim, this time moving\n+ * the base up one item past p: e.g., when lim is 5 we change base\n+ * to item 3 and make lim 2 so that we will look at items 3 and 4.\n+ * If lim is even, however, we have to shrink it by one before\n+ * halving: e.g., when lim is 4, we still looked at item 2, so we\n+ * have to make lim 3, then halve, obtaining 1, so that we will only\n+ * look at item 3.\n+ */\n+void *\n+bsearch_r (register const void *key, const void *base0,\n+\t   size_t nmemb, register size_t size,\n+\t   register int (*compar)(const void *, const void *, void *),\n+\t   void *arg)\n+{\n+\tregister const char *base = (const char *) base0;\n+\tregister int lim, cmp;\n+\tregister const void *p;\n+\n+\tfor (lim = nmemb; lim != 0; lim >>= 1) {\n+\t\tp = base + (lim >> 1) * size;\n+\t\tcmp = (*compar)(key, p, arg);\n+\t\tif (cmp == 0)\n+\t\t\treturn (void *)p;\n+\t\tif (cmp > 0) {\t/* key > p: move right */\n+\t\t\tbase = (const char *)p + size;\n+\t\t\tlim--;\n+\t\t} /* else move left */\n+\t}\n+\treturn (NULL);\n+}"}, {"sha": "e4d74b5822058a76754efa384e693ab7e6a66f2c", "filename": "libiberty/functions.texi", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aec24341d0aac1ca57031d066503c420fb850023/libiberty%2Ffunctions.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aec24341d0aac1ca57031d066503c420fb850023/libiberty%2Ffunctions.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ffunctions.texi?ref=aec24341d0aac1ca57031d066503c420fb850023", "patch": "@@ -84,6 +84,23 @@ is respectively less than, matching, or greater than the array member.\n \n @end deftypefn\n \n+@c bsearch_r.c:33\n+@deftypefn Supplemental void* bsearch_r (const void *@var{key}, @\n+  const void *@var{base}, size_t @var{nmemb}, size_t @var{size}, @\n+  int (*@var{compar})(const void *, const void *, void *), void *@var{arg})\n+\n+Performs a search over an array of @var{nmemb} elements pointed to by\n+@var{base} for a member that matches the object pointed to by @var{key}.\n+The size of each member is specified by @var{size}.  The array contents\n+should be sorted in ascending order according to the @var{compar}\n+comparison function.  This routine should take three arguments: the first\n+two point to the @var{key} and to an array member, and the last is passed\n+down unchanged from @code{bsearch_r}'s last argument.  It should return an\n+integer less than, equal to, or greater than zero if the @var{key} object\n+is respectively less than, matching, or greater than the array member.\n+\n+@end deftypefn\n+\n @c argv.c:138\n @deftypefn Extension char** buildargv (char *@var{sp})\n \n@@ -175,7 +192,7 @@ Concatenate zero or more of strings and return the result in freshly\n \n @end deftypefn\n \n-@c argv.c:487\n+@c argv.c:495\n @deftypefn Extension int countargv (char * const *@var{argv})\n \n Return the number of elements in @var{argv}.\n@@ -240,7 +257,7 @@ symbolic name or message.\n \n @end deftypefn\n \n-@c argv.c:344\n+@c argv.c:352\n @deftypefn Extension void expandargv (int *@var{argcp}, char ***@var{argvp})\n \n The @var{argcp} and @code{argvp} arguments are pointers to the usual"}]}