{"sha": "83668368607ac70dcce466a54673bbf88d0ab2da", "node_id": "C_kwDOANBUbNoAKDgzNjY4MzY4NjA3YWM3MGRjY2U0NjZhNTQ2NzNiYmY4OGQwYWIyZGE", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-09-25T07:28:10Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-09-27T15:39:51Z"}, "message": "Minor cleanups to solver.\n\nThese are some minor cleanups and renames that surfaced after the\nhybrid_threader work.\n\ngcc/ChangeLog:\n\n\t* gimple-range-path.cc\n\t(path_range_query::precompute_ranges_in_block): Rename to...\n\t(path_range_query::compute_ranges_in_block): ...this.\n\t(path_range_query::precompute_ranges): Rename to...\n\t(path_range_query::compute_ranges): ...this.\n\t(path_range_query::precompute_relations): Rename to...\n\t(path_range_query::compute_relations): ...this.\n\t(path_range_query::precompute_phi_relations): Rename to...\n\t(path_range_query::compute_phi_relations): ...this.\n\t* gimple-range-path.h: Rename precompute* to compute*.\n\t* tree-ssa-threadbackward.c\n\t(back_threader::find_taken_edge_switch): Same.\n\t(back_threader::find_taken_edge_cond): Same.\n\t* tree-ssa-threadedge.c\n\t(hybrid_jt_simplifier::compute_ranges_from_state): Same.\n\t(hybrid_jt_state::register_equivs_stmt): Inline...\n\t* tree-ssa-threadedge.h: ...here.", "tree": {"sha": "c59355ccb738454003ba6293f2954d54e6e5b31d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c59355ccb738454003ba6293f2954d54e6e5b31d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/83668368607ac70dcce466a54673bbf88d0ab2da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83668368607ac70dcce466a54673bbf88d0ab2da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83668368607ac70dcce466a54673bbf88d0ab2da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83668368607ac70dcce466a54673bbf88d0ab2da/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ef1e524fd87a679f5da06116029c66a84daac80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ef1e524fd87a679f5da06116029c66a84daac80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ef1e524fd87a679f5da06116029c66a84daac80"}], "stats": {"total": 61, "additions": 27, "deletions": 34}, "files": [{"sha": "71e04e4deba11f64fb6480f985d1112cfe109b03", "filename": "gcc/gimple-range-path.cc", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83668368607ac70dcce466a54673bbf88d0ab2da/gcc%2Fgimple-range-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83668368607ac70dcce466a54673bbf88d0ab2da/gcc%2Fgimple-range-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-path.cc?ref=83668368607ac70dcce466a54673bbf88d0ab2da", "patch": "@@ -293,11 +293,11 @@ path_range_query::range_defined_in_block (irange &r, tree name, basic_block bb)\n   return true;\n }\n \n-// Precompute ranges defined in the current block, or ranges\n-// that are exported on an edge to the next block.\n+// Compute ranges defined in the current block, or exported to the\n+// next block.\n \n void\n-path_range_query::precompute_ranges_in_block (basic_block bb)\n+path_range_query::compute_ranges_in_block (basic_block bb)\n {\n   bitmap_iterator bi;\n   int_range_max r, cached_range;\n@@ -452,14 +452,14 @@ path_range_query::add_copies_to_imports ()\n     }\n }\n \n-// Precompute the ranges for IMPORTS along PATH.\n+// Compute the ranges for IMPORTS along PATH.\n //\n // IMPORTS are the set of SSA names, any of which could potentially\n // change the value of the final conditional in PATH.\n \n void\n-path_range_query::precompute_ranges (const vec<basic_block> &path,\n-\t\t\t\t     const bitmap_head *imports)\n+path_range_query::compute_ranges (const vec<basic_block> &path,\n+\t\t\t\t  const bitmap_head *imports)\n {\n   if (DEBUG_SOLVER)\n     fprintf (dump_file, \"\\n*********** path_range_query ******************\\n\");\n@@ -472,12 +472,12 @@ path_range_query::precompute_ranges (const vec<basic_block> &path,\n     {\n       add_copies_to_imports ();\n       m_oracle->reset_path ();\n-      precompute_relations (path);\n+      compute_relations (path);\n     }\n \n   if (DEBUG_SOLVER)\n     {\n-      fprintf (dump_file, \"\\npath_range_query: precompute_ranges for path: \");\n+      fprintf (dump_file, \"\\npath_range_query: compute_ranges for path: \");\n       for (unsigned i = path.length (); i > 0; --i)\n \t{\n \t  basic_block bb = path[i - 1];\n@@ -504,7 +504,7 @@ path_range_query::precompute_ranges (const vec<basic_block> &path,\n \t      bitmap_set_bit (m_imports, SSA_NAME_VERSION (name));\n \t}\n \n-      precompute_ranges_in_block (bb);\n+      compute_ranges_in_block (bb);\n       adjust_for_non_null_uses (bb);\n \n       if (at_exit ())\n@@ -611,12 +611,12 @@ path_range_query::range_of_stmt (irange &r, gimple *stmt, tree)\n   return true;\n }\n \n-// Precompute relations on a path.  This involves two parts: relations\n+// Compute relations on a path.  This involves two parts: relations\n // along the conditionals joining a path, and relations determined by\n // examining PHIs.\n \n void\n-path_range_query::precompute_relations (const vec<basic_block> &path)\n+path_range_query::compute_relations (const vec<basic_block> &path)\n {\n   if (!dom_info_available_p (CDI_DOMINATORS))\n     return;\n@@ -628,7 +628,7 @@ path_range_query::precompute_relations (const vec<basic_block> &path)\n       basic_block bb = path[i - 1];\n       gimple *stmt = last_stmt (bb);\n \n-      precompute_phi_relations (bb, prev);\n+      compute_phi_relations (bb, prev);\n \n       // Compute relations in outgoing edges along the path.  Skip the\n       // final conditional which we don't know yet.\n@@ -656,14 +656,14 @@ path_range_query::precompute_relations (const vec<basic_block> &path)\n     }\n }\n \n-// Precompute relations for each PHI in BB.  For example:\n+// Compute relations for each PHI in BB.  For example:\n //\n //   x_5 = PHI<y_9(5),...>\n //\n // If the path flows through BB5, we can register that x_5 == y_9.\n \n void\n-path_range_query::precompute_phi_relations (basic_block bb, basic_block prev)\n+path_range_query::compute_phi_relations (basic_block bb, basic_block prev)\n {\n   if (prev == NULL)\n     return;"}, {"sha": "cf49c6dc086337e15c7a4a2ac86f6fe851f0222b", "filename": "gcc/gimple-range-path.h", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83668368607ac70dcce466a54673bbf88d0ab2da/gcc%2Fgimple-range-path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83668368607ac70dcce466a54673bbf88d0ab2da/gcc%2Fgimple-range-path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-path.h?ref=83668368607ac70dcce466a54673bbf88d0ab2da", "patch": "@@ -26,9 +26,6 @@ along with GCC; see the file COPYING3.  If not see\n // will calculate the range of an SSA or STMT as if the BBs in the\n // path would have been executed in order.\n //\n-// Only SSA names passed in IMPORTS are precomputed, and can be\n-// queried.\n-//\n // Note that the blocks are in reverse order, thus the exit block is\n // path[0].\n \n@@ -37,8 +34,7 @@ class path_range_query : public range_query\n public:\n   path_range_query (class gimple_ranger &ranger, bool resolve);\n   virtual ~path_range_query ();\n-  void precompute_ranges (const vec<basic_block> &path,\n-\t\t\t  const bitmap_head *imports);\n+  void compute_ranges (const vec<basic_block> &, const bitmap_head *imports);\n   bool range_of_expr (irange &r, tree name, gimple * = NULL) override;\n   bool range_of_stmt (irange &r, gimple *, tree name = NULL) override;\n   bool unreachable_path_p ();\n@@ -56,13 +52,13 @@ class path_range_query : public range_query\n   bool get_cache (irange &r, tree name);\n   void clear_cache (tree name);\n \n-  // Methods to precompute ranges for the given path.\n+  // Methods to compute ranges for the given path.\n   bool range_defined_in_block (irange &, tree name, basic_block bb);\n-  void precompute_ranges_in_block (basic_block bb);\n+  void compute_ranges_in_block (basic_block bb);\n   void adjust_for_non_null_uses (basic_block bb);\n   void ssa_range_in_phi (irange &r, gphi *phi);\n-  void precompute_relations (const vec<basic_block> &);\n-  void precompute_phi_relations (basic_block bb, basic_block prev);\n+  void compute_relations (const vec<basic_block> &);\n+  void compute_phi_relations (basic_block bb, basic_block prev);\n   void add_copies_to_imports ();\n   bool add_to_imports (tree name, bitmap imports);\n "}, {"sha": "e6819fe148ca53dffa813c97d4eefef5dc197986", "filename": "gcc/tree-ssa-threadbackward.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83668368607ac70dcce466a54673bbf88d0ab2da/gcc%2Ftree-ssa-threadbackward.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83668368607ac70dcce466a54673bbf88d0ab2da/gcc%2Ftree-ssa-threadbackward.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadbackward.c?ref=83668368607ac70dcce466a54673bbf88d0ab2da", "patch": "@@ -192,7 +192,7 @@ back_threader::find_taken_edge_switch (const vec<basic_block> &path,\n   tree name = gimple_switch_index (sw);\n   int_range_max r;\n \n-  m_solver.precompute_ranges (path, m_imports);\n+  m_solver.compute_ranges (path, m_imports);\n   m_solver.range_of_expr (r, name, sw);\n \n   if (r.undefined_p ())\n@@ -216,7 +216,7 @@ back_threader::find_taken_edge_cond (const vec<basic_block> &path,\n {\n   int_range_max r;\n \n-  m_solver.precompute_ranges (path, m_imports);\n+  m_solver.compute_ranges (path, m_imports);\n   m_solver.range_of_stmt (r, cond);\n \n   if (m_solver.unreachable_path_p ())"}, {"sha": "0b59cb4845c303b8907407fd4c5f4328ca3c141b", "filename": "gcc/tree-ssa-threadedge.c", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83668368607ac70dcce466a54673bbf88d0ab2da/gcc%2Ftree-ssa-threadedge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83668368607ac70dcce466a54673bbf88d0ab2da/gcc%2Ftree-ssa-threadedge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadedge.c?ref=83668368607ac70dcce466a54673bbf88d0ab2da", "patch": "@@ -1402,12 +1402,6 @@ jt_state::register_equivs_stmt (gimple *stmt, basic_block bb,\n // Hybrid threader implementation.\n \n \n-void\n-hybrid_jt_state::register_equivs_stmt (gimple *, basic_block, jt_simplifier *)\n-{\n-  // Ranger has no need to simplify anything to improve equivalences.\n-}\n-\n hybrid_jt_simplifier::hybrid_jt_simplifier (gimple_ranger *r,\n \t\t\t\t\t    path_range_query *q)\n {\n@@ -1466,5 +1460,5 @@ hybrid_jt_simplifier::compute_ranges_from_state (gimple *stmt, jt_state *state)\n \t    bitmap_set_bit (imports, SSA_NAME_VERSION (op));\n \t}\n     }\n-  m_query->precompute_ranges (m_path, imports);\n+  m_query->compute_ranges (m_path, imports);\n }"}, {"sha": "c46a5c6c489ceacb3f8f060446713c510542deaf", "filename": "gcc/tree-ssa-threadedge.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83668368607ac70dcce466a54673bbf88d0ab2da/gcc%2Ftree-ssa-threadedge.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83668368607ac70dcce466a54673bbf88d0ab2da/gcc%2Ftree-ssa-threadedge.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadedge.h?ref=83668368607ac70dcce466a54673bbf88d0ab2da", "patch": "@@ -56,16 +56,19 @@ class jt_simplifier\n class hybrid_jt_state : public jt_state\n {\n private:\n-  void register_equivs_stmt (gimple *, basic_block, jt_simplifier *) override;\n+  void register_equivs_stmt (gimple *, basic_block, jt_simplifier *) override\n+  {\n+    // Ranger has no need to simplify anything.\n+  }\n };\n \n class hybrid_jt_simplifier : public jt_simplifier\n {\n public:\n   hybrid_jt_simplifier (class gimple_ranger *r, class path_range_query *q);\n+  tree simplify (gimple *stmt, gimple *, basic_block, jt_state *) override;\n \n private:\n-  tree simplify (gimple *stmt, gimple *, basic_block, jt_state *) override;\n   void compute_ranges_from_state (gimple *stmt, jt_state *);\n \n   gimple_ranger *m_ranger;"}]}