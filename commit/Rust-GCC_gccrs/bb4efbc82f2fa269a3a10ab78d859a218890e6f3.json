{"sha": "bb4efbc82f2fa269a3a10ab78d859a218890e6f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmI0ZWZiYzgyZjJmYTI2OWEzYTEwYWI3OGQ4NTlhMjE4ODkwZTZmMw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-02-22T13:13:00Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-02-22T13:13:00Z"}, "message": "(output_move_dconst): New function.\n\n(global_symbolic_reference_mentioned_p): New function.\n(print_operand_address): Allow pc-relative mode not only\nfor {LABEL, SYMBOL}_REF but for CONST too. If compiling PIC,\ntransform \"symbol+const(Rx)\" to \"const(symbol(sb))[Rx:b]\".\n\nFrom-SVN: r6606", "tree": {"sha": "9e9ca29b82037f603b326c3891c0ab628197d490", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e9ca29b82037f603b326c3891c0ab628197d490"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb4efbc82f2fa269a3a10ab78d859a218890e6f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb4efbc82f2fa269a3a10ab78d859a218890e6f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb4efbc82f2fa269a3a10ab78d859a218890e6f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb4efbc82f2fa269a3a10ab78d859a218890e6f3/comments", "author": null, "committer": null, "parents": [{"sha": "ea1fd45353a3cc1c82f10bce2bea900ae87d5349", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea1fd45353a3cc1c82f10bce2bea900ae87d5349", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea1fd45353a3cc1c82f10bce2bea900ae87d5349"}], "stats": {"total": 135, "additions": 130, "deletions": 5}, "files": [{"sha": "5d6035f72c1ee23895813a19fbee420bf974728c", "filename": "gcc/config/ns32k/ns32k.c", "status": "modified", "additions": 130, "deletions": 5, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb4efbc82f2fa269a3a10ab78d859a218890e6f3/gcc%2Fconfig%2Fns32k%2Fns32k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb4efbc82f2fa269a3a10ab78d859a218890e6f3/gcc%2Fconfig%2Fns32k%2Fns32k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.c?ref=bb4efbc82f2fa269a3a10ab78d859a218890e6f3", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines for assembler code output on the NS32000.\n-   Copyright (C) 1988 Free Software Foundation, Inc.\n+   Copyright (C) 1988, 1994 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -396,6 +396,38 @@ check_reg (oper, reg)\n     }\n   return 0;\n }\n+\n+/* Returns 1 if OP contains a global symbol reference */\n+\n+int\n+global_symbolic_reference_mentioned_p (op)\n+     rtx op;\n+{\n+  register char *fmt;\n+  register int i;\n+\n+  if (GET_CODE (op) == SYMBOL_REF && ! SYMBOL_REF_FLAG (op))\n+    return 1;\n+\n+  fmt = GET_RTX_FORMAT (GET_CODE (op));\n+  for (i = GET_RTX_LENGTH (GET_CODE (op)) - 1; i >= 0; i--)\n+    {\n+      if (fmt[i] == 'E')\n+\t{\n+\t  register int j;\n+\n+\t  for (j = XVECLEN (op, i) - 1; j >= 0; j--)\n+\t    if (global_symbolic_reference_mentioned_p (XVECEXP (op, i, j)))\n+\t      return 1;\n+\t}\n+      else if (fmt[i] == 'e' \n+\t       && global_symbolic_reference_mentioned_p (XEXP (op, i)))\n+\treturn 1;\n+    }\n+\n+  return 0;\n+}\n+\n \f\n /* PRINT_OPERAND is defined to call this function,\n    which is easier to debug than putting all the code in\n@@ -497,6 +529,7 @@ print_operand_address (file, addr)\n   static char scales[] = { 'b', 'w', 'd', 0, 'q', };\n   rtx offset, base, indexexp, tmp;\n   int scale;\n+  extern int flag_pic;\n \n   if (GET_CODE (addr) == PRE_DEC || GET_CODE (addr) == POST_DEC)\n     {\n@@ -560,9 +593,65 @@ print_operand_address (file, addr)\n \tcase MULT:\n \t  indexexp = tmp;\n \t  break;\n+\tcase SYMBOL_REF:\n+\t  if (flag_pic && ! CONSTANT_POOL_ADDRESS_P (tmp)\n+\t      && ! SYMBOL_REF_FLAG (tmp))\n+\t    {\n+\t      if (base)\n+\t\t{\n+\t\t  if (indexexp)\n+\t\t    abort ();\n+\t\t  indexexp = base;\n+\t\t}\n+\t      base = tmp;\n+\t      break;\n+\t    }\n \tcase CONST:\n+\t  if (flag_pic && GET_CODE (tmp) == CONST)\n+\t    {\n+\t      rtx sym, off, tmp1;\n+\t      tmp1 = XEXP (tmp,0);\n+\t      if (GET_CODE (tmp1)  != PLUS)\n+\tabort ();\n+\n+\t      sym = XEXP (tmp1,0);\n+\t      if (GET_CODE (sym) != SYMBOL_REF)\n+\t        {\n+\t          off = sym;\n+\t\t  sym = XEXP (tmp1,1);\n+\t\t}\n+\t      else\n+\t        off = XEXP (tmp1,1);\n+\t      if (GET_CODE (sym) == SYMBOL_REF)\n+\t\t{\n+\t  if (GET_CODE (off) != CONST_INT)\n+\t\t    abort ();\n+\n+\t\t  if (CONSTANT_POOL_ADDRESS_P (sym)\n+\t\t      || SYMBOL_REF_FLAG (sym))\n+\t\t    {\n+\t\t      SYMBOL_REF_FLAG (tmp) = 1;\n+\t\t    }\n+\t\t  else\n+\t\t    {\n+\t\t      if (base)\n+\t\t\t{\n+\t\t\t  if (indexexp)\n+\t\t\t    abort ();\n+\n+\t\t\t  indexexp = base;\n+\t\t\t}\n+\n+\t\t      if (offset != 0)\n+\t\t\tabort ();\n+\n+\t\t      base = sym;\n+\t\t      offset = off;\n+\t\t      break;\n+\t\t    }\n+\t\t}\n+\t    }\n \tcase CONST_INT:\n-\tcase SYMBOL_REF:\n \tcase LABEL_REF:\n \t  if (offset)\n \t    offset = gen_rtx (PLUS, SImode, tmp, offset);\n@@ -613,6 +702,14 @@ print_operand_address (file, addr)\n       case REG:\n \tfprintf (file, \"(%s)\", reg_names[REGNO (base)]);\n \tbreak;\n+      case SYMBOL_REF:\n+\t  if (! flag_pic)\n+\t    abort ();\n+\n+        fprintf (file, \"(\");\n+\toutput_addr_const (file, base);\n+\tfprintf (file, \"(sb))\");\n+        break;\n       case MEM:\n \taddr = XEXP(base,0);\n \tbase = NULL;\n@@ -673,10 +770,15 @@ print_operand_address (file, addr)\n       default:\n \tabort ();\n       }\n+#if 0\n+  else if (flag_pic && SYMBOL_REF_FLAG (offset))\n+    fprintf (file, \"(sb)\");\n+#endif\n #ifdef PC_RELATIVE\n-  else\t\t\t\t/* no base */\n-    if (GET_CODE (offset) == LABEL_REF || GET_CODE (offset) == SYMBOL_REF)\n-      fprintf (file, \"(pc)\");\n+  else if (GET_CODE (offset) == LABEL_REF\n+\t   || GET_CODE (offset) == SYMBOL_REF\n+\t   || GET_CODE (offset) == CONST)\n+    fprintf (file, \"(pc)\");\n #endif\n #ifdef BASE_REG_NEEDED\t\t/* this is defined if the assembler always\n \t\t\t   \t   needs a base register */\n@@ -760,3 +862,26 @@ output_shift_insn (operands)\n     else return \"ashd %2,%0\";\n   return \"ashd %2,%0\";\n }\n+\n+char *\n+output_move_dconst (n, s)\n+\tint n;\n+\tchar *s;\n+{\n+  static char r[32];\n+\n+  if (n > -9 && n < 8)\n+    strcpy (r, \"movqd \");\n+  else if (n > 0 && n < 256)\n+    strcpy (r, \"movzbd \");\n+  else if (n > 0 && n < 65536)\n+    strcpy (r, \"movzwd \");\n+  else if (n < 0 && n > -257)\n+    strcpy (r, \"movxbd \");\n+  else if (n < 0 && n > -65537)\n+    strcpy (r, \"movxwd \");\n+  else\n+    strcpy (r, \"movd \");\n+  strcat (r, s);\n+  return r;\n+}"}]}