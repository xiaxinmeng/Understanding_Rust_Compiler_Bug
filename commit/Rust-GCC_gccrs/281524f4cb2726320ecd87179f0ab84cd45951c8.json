{"sha": "281524f4cb2726320ecd87179f0ab84cd45951c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjgxNTI0ZjRjYjI3MjYzMjBlY2Q4NzE3OWYwYWI4NGNkNDU5NTFjOA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2002-05-08T19:24:42Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2002-05-08T19:24:42Z"}, "message": "jcf-write.c (write_classfile): Write the file to a temporary file and then rename it.\n\n\t* java/jcf-write.c (write_classfile): Write the file to a\n\ttemporary file and then rename it.\n\n\t* libjava/Makefile.am (all_java_source_files): New variable.\n\t(all_java_class_files): Likewise.\n\t.java.class: New rule.\n\t(CLEANFILES): Remove tmp-list.\n\t* libjava/Makefile.in: Regenerated.\n\nFrom-SVN: r53298", "tree": {"sha": "337247b74438baf7d95c9f73e0bfcf95f4f57cdd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/337247b74438baf7d95c9f73e0bfcf95f4f57cdd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/281524f4cb2726320ecd87179f0ab84cd45951c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/281524f4cb2726320ecd87179f0ab84cd45951c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/281524f4cb2726320ecd87179f0ab84cd45951c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/281524f4cb2726320ecd87179f0ab84cd45951c8/comments", "author": null, "committer": null, "parents": [{"sha": "a89e49c7242d5013dc8943b09723265af4dbecdf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a89e49c7242d5013dc8943b09723265af4dbecdf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a89e49c7242d5013dc8943b09723265af4dbecdf"}], "stats": {"total": 193, "additions": 73, "deletions": 120}, "files": [{"sha": "502328ebebbded30fc10b431875cf137ed217eb9", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/281524f4cb2726320ecd87179f0ab84cd45951c8/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/281524f4cb2726320ecd87179f0ab84cd45951c8/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=281524f4cb2726320ecd87179f0ab84cd45951c8", "patch": "@@ -1,3 +1,8 @@\n+2002-05-08  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* java/jcf-write.c (write_classfile): Write the file to a \n+\ttemporary file and then rename it.\n+\n 2002-05-07  Tom Tromey  <tromey@redhat.com>\n \n \t* gjavah.c (throwable_p): Use xstrdup, not strdup."}, {"sha": "62e3e09d64b3019a1598966ae7b764dbd50c5035", "filename": "gcc/java/jcf-write.c", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/281524f4cb2726320ecd87179f0ab84cd45951c8/gcc%2Fjava%2Fjcf-write.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/281524f4cb2726320ecd87179f0ab84cd45951c8/gcc%2Fjava%2Fjcf-write.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-write.c?ref=281524f4cb2726320ecd87179f0ab84cd45951c8", "patch": "@@ -3374,16 +3374,28 @@ write_classfile (clas)\n \n   if (class_file_name != NULL)\n     {\n-      FILE *stream = fopen (class_file_name, \"wb\");\n+      FILE *stream;\n+      char *temporary_file_name;\n+\n+      /* The .class file is initially written to a \".tmp\" file so that\n+\t if multiple instances of the compiler are running at once\n+\t they do not see partially formed class files. */\n+      temporary_file_name = xmalloc (strlen (class_file_name) \n+\t\t\t\t     + strlen (\".tmp\") + 1);\n+      sprintf (temporary_file_name, \"%s.tmp\", class_file_name);\n+      stream = fopen (temporary_file_name, \"wb\");\n       if (stream == NULL)\n-\tfatal_io_error (\"can't open %s for writing\", class_file_name);\n+\tfatal_io_error (\"can't open %s for writing\", temporary_file_name);\n \n       jcf_dependency_add_target (class_file_name);\n       init_jcf_state (state, work);\n       chunks = generate_classfile (clas, state);\n       write_chunks (stream, chunks);\n       if (fclose (stream))\n-\tfatal_io_error (\"error closing %s\", class_file_name);\n+\tfatal_io_error (\"error closing %s\", temporary_file_name);\n+      if (rename (temporary_file_name, class_file_name) == -1)\n+\tfatal_io_error (\"can't create %s\", class_file_name);\n+      free (temporary_file_name);\n       free (class_file_name);\n     }\n   release_jcf_state (state);"}, {"sha": "f507bd1805e78114ced2ef8b66de2e34cc52db36", "filename": "libjava/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/281524f4cb2726320ecd87179f0ab84cd45951c8/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/281524f4cb2726320ecd87179f0ab84cd45951c8/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=281524f4cb2726320ecd87179f0ab84cd45951c8", "patch": "@@ -1,3 +1,11 @@\n+2002-05-08  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* libjava/Makefile.am (all_java_source_files): New variable.\n+\t(all_java_class_files): Likewise.\n+\t.java.class: New rule.\n+\t(CLEANFILES): Remove tmp-list.\n+\t* libjava/Makefile.in: Regenerated.\n+\t\n 2002-05-09  David.Billinghurst  <David.Billinghurst@riotinto.com>\n \n \t* testsuite/lib/libjava.exp (test_libjava_from_javac):"}, {"sha": "c98b0d1b2429e84670cb91485854840d8eb69511", "filename": "libjava/Makefile.am", "status": "modified", "additions": 14, "deletions": 33, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/281524f4cb2726320ecd87179f0ab84cd45951c8/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/281524f4cb2726320ecd87179f0ab84cd45951c8/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=281524f4cb2726320ecd87179f0ab84cd45951c8", "patch": "@@ -165,45 +165,26 @@ install-exec-hook:\n \t  $(LN_S) libgcjx.la gnu-awt-xlib.la; \\\n \tfi\n \n-## Make the .class files depend on the .zip file.  This seems\n-## backwards, but is right.  This doesn't catch all the .class files,\n-## but that is ok, because the ones it fails to pick up are defined in\n-## a .java file with some other class which is caught.  Note that we\n-## only want to create headers for those files which do not have\n-## hand-maintained headers.\n-$(built_java_source_files:.java=.class): libgcj-@gcc_version@.jar\n-$(java_source_files:.java=.class): libgcj-@gcc_version@.jar\n-\n-## The .class files for X will not be included in libgcj.jar, but the\n-## rule for libgcj.jar will cause all out-of-date .class files to be\n-## built. We need this to generate headers for the nat-files.\n-$(x_java_source_files:.java=.class): libgcj-@gcc_version@.jar\n-\n-## We have the zip file depend on the java sources and not the class\n-## files, because we don't know the names of all the class files.\n-## FIXME: this method fails in a peculiar case: if libgcj.jar is\n-## up-to-date, and foo.class is removed, and bar.java is touched, then\n-## `make libgcj.jar' will not rebuilt foo.class.  That's because\n-## libgcj.jar is not out-of-date with respect to foo.java.\n-libgcj-@gcc_version@.jar: $(built_java_source_files) $(java_source_files) $(x_java_source_files)\n-## Create a list of all Java sources, without exceeding any shell limits.\n-\t@: $(shell echo Creating list of files to compile...) $(shell rm -f tmp-list || :) $(shell touch tmp-list) $(foreach source,$?,$(shell echo $(source) >> tmp-list))\n-\t@set fnord $(MAKEFLAGS); amf=$$2; fail=no; \\\n-\tjavac=\"$(JAVAC)\"; \\\n-\tcat tmp-list | (while read f; do \\\n-\t  echo $$javac $(JCFLAGS) -classpath \\'\\' -bootclasspath $(here):$(srcdir) -d $(here) $$f; \\\n-\t  $$javac $(JCFLAGS) -classpath '' -bootclasspath $(here):$(srcdir) -d $(here) $$f \\\n-\t    || case \"$$amf\" in *=*) exit 1;; *k*) fail=yes ;; *) exit 1;; esac; \\\n-\tdone; \\\n-\ttest \"$$fail\" = no)\n-\t-@rm -f tmp-list libgcj-@gcc_version@.jar\n+all_java_source_files = \\\n+    $(java_source_files) \\\n+    $(built_java_source_files) \\\n+    $(x_java_source_files)\n+\n+all_java_class_files = $(all_java_source_files:.java=.class)\n+\n+.java.class:\n+\t$(JAVAC) $(JCFLAGS) -classpath '' -bootclasspath $(here):$(srcdir) \\\n+             -d $(here) $<\n+\n+libgcj-@gcc_version@.jar: $(all_java_class_files)\n+\t-@rm -f libgcj-@gcc_version@.jar\n ## Note that we explicitly want to include directory information.\n \tfind java gnu javax org -type d -o -type f -name '*.class' | \\\n \t  sed -e '/\\/\\./d' -e '/\\/xlib/d' | \\\n \t  $(ZIP) cfM0E@ $@\n \n MOSTLYCLEANFILES = $(javao_files) $(nat_files) $(nat_headers) $(c_files) $(x_javao_files) $(x_nat_files) $(x_nat_headers)\n-CLEANFILES = tmp-list libgcj-@gcc_version@.jar\n+CLEANFILES = libgcj-@gcc_version@.jar\n \n clean-local:\n ## We just remove every .class file that was created."}, {"sha": "b269ee71ff65068f932ea1a2d0015b272fe7f863", "filename": "libjava/Makefile.in", "status": "modified", "additions": 31, "deletions": 84, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/281524f4cb2726320ecd87179f0ab84cd45951c8/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/281524f4cb2726320ecd87179f0ab84cd45951c8/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=281524f4cb2726320ecd87179f0ab84cd45951c8", "patch": "@@ -228,8 +228,16 @@ libgcjx_la_LDFLAGS = @X_PRE_LIBS@ @X_LIBS@ -lX11 @X_EXTRA_LIBS@ \\\n \n libgcjx_la_LINK = $(LIBLINK)\n \n+all_java_source_files = \\\n+    $(java_source_files) \\\n+    $(built_java_source_files) \\\n+    $(x_java_source_files)\n+\n+\n+all_java_class_files = $(all_java_source_files:.java=.class)\n+\n MOSTLYCLEANFILES = $(javao_files) $(nat_files) $(nat_headers) $(c_files) $(x_javao_files) $(x_nat_files) $(x_nat_headers)\n-CLEANFILES = tmp-list libgcj-@gcc_version@.jar\n+CLEANFILES = libgcj-@gcc_version@.jar\n \n SUFFIXES = .class .java .h\n \n@@ -1725,9 +1733,8 @@ LINK = $(LIBTOOL) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(LDFLAGS) -o $@\n DATA =  $(jar_DATA) $(toolexeclib_DATA)\n \n DIST_COMMON =  README COPYING ChangeLog Makefile.am Makefile.in NEWS \\\n-THANKS acconfig.h acinclude.m4 aclocal.m4 configure configure.in \\\n-gcj/libgcj-config.h.in gcj/stamp-h2.in include/config.h.in \\\n-include/stamp-h1.in libgcj-test.spec.in libgcj.spec.in\n+THANKS acinclude.m4 aclocal.m4 configure configure.in \\\n+libgcj-test.spec.in libgcj.spec.in\n \n \n DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) $(TEXINFOS) $(EXTRA_DIST)\n@@ -2713,53 +2720,6 @@ config.status: $(srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)\n \t$(SHELL) ./config.status --recheck\n $(srcdir)/configure: @MAINTAINER_MODE_TRUE@$(srcdir)/configure.in $(ACLOCAL_M4) $(CONFIGURE_DEPENDENCIES)\n \tcd $(srcdir) && $(AUTOCONF)\n-\n-include/config.h: include/stamp-h1\n-\t@if test ! -f $@; then \\\n-\t\trm -f include/stamp-h1; \\\n-\t\t$(MAKE) include/stamp-h1; \\\n-\telse :; fi\n-include/stamp-h1: $(srcdir)/include/config.h.in $(top_builddir)/config.status\n-\tcd $(top_builddir) \\\n-\t  && CONFIG_FILES= CONFIG_HEADERS=include/config.h \\\n-\t     $(SHELL) ./config.status\n-\t@echo timestamp > include/stamp-h1 2> /dev/null\n-$(srcdir)/include/config.h.in: @MAINTAINER_MODE_TRUE@$(srcdir)/include/stamp-h1.in\n-\t@if test ! -f $@; then \\\n-\t\trm -f $(srcdir)/include/stamp-h1.in; \\\n-\t\t$(MAKE) $(srcdir)/include/stamp-h1.in; \\\n-\telse :; fi\n-$(srcdir)/include/stamp-h1.in: $(top_srcdir)/configure.in $(ACLOCAL_M4) acconfig.h\n-\tcd $(top_srcdir) && $(AUTOHEADER)\n-\t@echo timestamp > $(srcdir)/include/stamp-h1.in 2> /dev/null\n-\n-gcj/libgcj-config.h: gcj/stamp-h2\n-\t@if test ! -f $@; then \\\n-\t\trm -f gcj/stamp-h2; \\\n-\t\t$(MAKE) gcj/stamp-h2; \\\n-\telse :; fi\n-gcj/stamp-h2: $(srcdir)/gcj/libgcj-config.h.in $(top_builddir)/config.status\n-\tcd $(top_builddir) \\\n-\t  && CONFIG_FILES= CONFIG_HEADERS=gcj/libgcj-config.h \\\n-\t     $(SHELL) ./config.status\n-\t@echo timestamp > gcj/stamp-h2 2> /dev/null\n-$(srcdir)/gcj/libgcj-config.h.in: @MAINTAINER_MODE_TRUE@$(srcdir)/gcj/stamp-h2.in\n-\t@if test ! -f $@; then \\\n-\t\trm -f $(srcdir)/gcj/stamp-h2.in; \\\n-\t\t$(MAKE) $(srcdir)/gcj/stamp-h2.in; \\\n-\telse :; fi\n-$(srcdir)/gcj/stamp-h2.in: $(top_srcdir)/configure.in $(ACLOCAL_M4) acconfig.h\n-\tcd $(top_srcdir) && $(AUTOHEADER)\n-\t@echo timestamp > $(srcdir)/gcj/stamp-h2.in 2> /dev/null\n-\n-mostlyclean-hdr:\n-\n-clean-hdr:\n-\n-distclean-hdr:\n-\t-rm -f include/config.h gcj/libgcj-config.h\n-\n-maintainer-clean-hdr:\n libgcj.spec: $(top_builddir)/config.status libgcj.spec.in\n \tcd $(top_builddir) && CONFIG_FILES=$@ CONFIG_HEADERS= $(SHELL) ./config.status\n libgcj-test.spec: $(top_builddir)/config.status libgcj-test.spec.in\n@@ -3194,32 +3154,29 @@ distclean-generic:\n \t-rm -f config.cache config.log stamp-h stamp-h[0-9]*\n \n maintainer-clean-generic:\n-mostlyclean-am:  mostlyclean-hdr mostlyclean-toolexeclibLTLIBRARIES \\\n-\t\tmostlyclean-compile mostlyclean-libtool \\\n-\t\tmostlyclean-binPROGRAMS mostlyclean-noinstPROGRAMS \\\n-\t\tmostlyclean-tags mostlyclean-depend mostlyclean-generic\n+mostlyclean-am:  mostlyclean-toolexeclibLTLIBRARIES mostlyclean-compile \\\n+\t\tmostlyclean-libtool mostlyclean-binPROGRAMS \\\n+\t\tmostlyclean-noinstPROGRAMS mostlyclean-tags \\\n+\t\tmostlyclean-depend mostlyclean-generic\n \n mostlyclean: mostlyclean-recursive\n \n-clean-am:  clean-hdr clean-toolexeclibLTLIBRARIES clean-compile \\\n-\t\tclean-libtool clean-binPROGRAMS clean-noinstPROGRAMS \\\n-\t\tclean-tags clean-depend clean-generic mostlyclean-am \\\n-\t\tclean-local\n+clean-am:  clean-toolexeclibLTLIBRARIES clean-compile clean-libtool \\\n+\t\tclean-binPROGRAMS clean-noinstPROGRAMS clean-tags \\\n+\t\tclean-depend clean-generic mostlyclean-am clean-local\n \n clean: clean-recursive\n \n-distclean-am:  distclean-hdr distclean-toolexeclibLTLIBRARIES \\\n-\t\tdistclean-compile distclean-libtool \\\n-\t\tdistclean-binPROGRAMS distclean-noinstPROGRAMS \\\n-\t\tdistclean-tags distclean-depend distclean-generic \\\n-\t\tclean-am\n+distclean-am:  distclean-toolexeclibLTLIBRARIES distclean-compile \\\n+\t\tdistclean-libtool distclean-binPROGRAMS \\\n+\t\tdistclean-noinstPROGRAMS distclean-tags \\\n+\t\tdistclean-depend distclean-generic clean-am\n \t-rm -f libtool\n \n distclean: distclean-recursive\n \t-rm -f config.status\n \n-maintainer-clean-am:  maintainer-clean-hdr \\\n-\t\tmaintainer-clean-toolexeclibLTLIBRARIES \\\n+maintainer-clean-am:  maintainer-clean-toolexeclibLTLIBRARIES \\\n \t\tmaintainer-clean-compile maintainer-clean-libtool \\\n \t\tmaintainer-clean-binPROGRAMS \\\n \t\tmaintainer-clean-noinstPROGRAMS maintainer-clean-tags \\\n@@ -3231,9 +3188,9 @@ maintainer-clean-am:  maintainer-clean-hdr \\\n maintainer-clean: maintainer-clean-recursive\n \t-rm -f config.status\n \n-.PHONY: mostlyclean-hdr distclean-hdr clean-hdr maintainer-clean-hdr \\\n-mostlyclean-toolexeclibLTLIBRARIES distclean-toolexeclibLTLIBRARIES \\\n-clean-toolexeclibLTLIBRARIES maintainer-clean-toolexeclibLTLIBRARIES \\\n+.PHONY: mostlyclean-toolexeclibLTLIBRARIES \\\n+distclean-toolexeclibLTLIBRARIES clean-toolexeclibLTLIBRARIES \\\n+maintainer-clean-toolexeclibLTLIBRARIES \\\n uninstall-toolexeclibLTLIBRARIES install-toolexeclibLTLIBRARIES \\\n mostlyclean-compile distclean-compile clean-compile \\\n maintainer-clean-compile mostlyclean-libtool distclean-libtool \\\n@@ -3266,22 +3223,12 @@ install-exec-hook:\n \t  $(LN_S) libgcjx.la gnu-awt-xlib.la; \\\n \tfi\n \n-$(built_java_source_files:.java=.class): libgcj-@gcc_version@.jar\n-$(java_source_files:.java=.class): libgcj-@gcc_version@.jar\n+.java.class:\n+\t$(JAVAC) $(JCFLAGS) -classpath '' -bootclasspath $(here):$(srcdir) \\\n+             -d $(here) $<\n \n-$(x_java_source_files:.java=.class): libgcj-@gcc_version@.jar\n-\n-libgcj-@gcc_version@.jar: $(built_java_source_files) $(java_source_files) $(x_java_source_files)\n-\t@: $(shell echo Creating list of files to compile...) $(shell rm -f tmp-list || :) $(shell touch tmp-list) $(foreach source,$?,$(shell echo $(source) >> tmp-list))\n-\t@set fnord $(MAKEFLAGS); amf=$$2; fail=no; \\\n-\tjavac=\"$(JAVAC)\"; \\\n-\tcat tmp-list | (while read f; do \\\n-\t  echo $$javac $(JCFLAGS) -classpath \\'\\' -bootclasspath $(here):$(srcdir) -d $(here) $$f; \\\n-\t  $$javac $(JCFLAGS) -classpath '' -bootclasspath $(here):$(srcdir) -d $(here) $$f \\\n-\t    || case \"$$amf\" in *=*) exit 1;; *k*) fail=yes ;; *) exit 1;; esac; \\\n-\tdone; \\\n-\ttest \"$$fail\" = no)\n-\t-@rm -f tmp-list libgcj-@gcc_version@.jar\n+libgcj-@gcc_version@.jar: $(all_java_class_files)\n+\t-@rm -f libgcj-@gcc_version@.jar\n \tfind java gnu javax org -type d -o -type f -name '*.class' | \\\n \t  sed -e '/\\/\\./d' -e '/\\/xlib/d' | \\\n \t  $(ZIP) cfM0E@ $@"}]}