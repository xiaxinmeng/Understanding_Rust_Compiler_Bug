{"sha": "ab6218f150a207398a27d1e8bbc0249ac8c03466", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWI2MjE4ZjE1MGEyMDczOThhMjdkMWU4YmJjMDI0OWFjOGMwMzQ2Ng==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2009-10-13T12:42:30Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2009-10-13T12:42:30Z"}, "message": "re PR lto/41565 (-m32 causes an ICE when the object files were compiled with 64bit)\n\n2009-10-13  Richard Guenther  <rguenther@suse.de>\n\n\tPR lto/41565\n\t* opts.c (handle_option): Split out code to handle setting\n\tthe options flag var ...\n\t(set_option): ... here.\n\t* opts.h (set_option): Declare.\n\t* lto-opts.c (register_user_option_p): Include -fexceptions\n\tand all position independent code variants.\n\t(handle_common_option): Remove.\n\t(lto_reissue_options): Use set_option.\n\nFrom-SVN: r152705", "tree": {"sha": "90f56c87befc608827ef1174d7c38c88631870a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90f56c87befc608827ef1174d7c38c88631870a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab6218f150a207398a27d1e8bbc0249ac8c03466", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab6218f150a207398a27d1e8bbc0249ac8c03466", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab6218f150a207398a27d1e8bbc0249ac8c03466", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab6218f150a207398a27d1e8bbc0249ac8c03466/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b02a92ce3e51af8fa68748816c0e7aec1ea86bc6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b02a92ce3e51af8fa68748816c0e7aec1ea86bc6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b02a92ce3e51af8fa68748816c0e7aec1ea86bc6"}], "stats": {"total": 126, "additions": 69, "deletions": 57}, "files": [{"sha": "d63029eec054b3a7c8208f74330de1f604a83567", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab6218f150a207398a27d1e8bbc0249ac8c03466/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab6218f150a207398a27d1e8bbc0249ac8c03466/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ab6218f150a207398a27d1e8bbc0249ac8c03466", "patch": "@@ -1,3 +1,15 @@\n+2009-10-13  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR lto/41565\n+\t* opts.c (handle_option): Split out code to handle setting\n+\tthe options flag var ...\n+\t(set_option): ... here.\n+\t* opts.h (set_option): Declare.\n+\t* lto-opts.c (register_user_option_p): Include -fexceptions\n+\tand all position independent code variants.\n+\t(handle_common_option): Remove.\n+\t(lto_reissue_options): Use set_option.\n+\n 2009-10-13  Martin Jambor  <mjambor@suse.cz>\n \n \tPR tree-optimization/41661"}, {"sha": "fd485b9db60e79053ce0bcc97b71370e90eb7f69", "filename": "gcc/lto-opts.c", "status": "modified", "additions": 19, "deletions": 31, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab6218f150a207398a27d1e8bbc0249ac8c03466/gcc%2Flto-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab6218f150a207398a27d1e8bbc0249ac8c03466/gcc%2Flto-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-opts.c?ref=ab6218f150a207398a27d1e8bbc0249ac8c03466", "patch": "@@ -208,10 +208,19 @@ input_string_block (struct lto_input_block *ib)\n static bool\n register_user_option_p (size_t code, int type)\n {\n-  return type == CL_TARGET\n-         || (type == CL_COMMON\n-\t     && (code == OPT_fPIC\n-\t\t || code == OPT_fcommon));\n+  if (type == CL_TARGET)\n+    return true;\n+  else if (type == CL_COMMON)\n+    {\n+      return (code == OPT_fPIC\n+\t      || code == OPT_fpic\n+\t      || code == OPT_fPIE\n+\t      || code == OPT_fpie\n+\t      || code == OPT_fcommon\n+\t      || code == OPT_fexceptions);\n+    }\n+\n+  return false;\n }\n \n /* Note command line option with the given TYPE and CODE, ARG, and VALUE.\n@@ -358,32 +367,6 @@ lto_read_file_options (struct lto_file_decl_data *file_data)\n   lto_free_section_data (file_data, LTO_section_opts, 0, data, len);\n }\n \n-/* Re-handle option with type TYPE and CODE, ARG, and VALUE.  Logic extracted\n-   from common_handle_option() in opts.c.\n-\n-   FIXME lto. This section is not complete.  If extended to handle\n-   optimization options, note that changing these after opts.c prescan may\n-   involve also adjusting other options that were defaulted from initial\n-   optimization option values.  */\n-\n-static void\n-handle_common_option (size_t code, const char *arg ATTRIBUTE_UNUSED, int value)\n-{\n-  switch (code)\n-    {\n-    case OPT_fPIC:\n-      flag_pic = !!value;\n-      break;\n-\n-    case OPT_fcommon:\n-      flag_no_common = !value;\n-      break;\n-\n-    default:\n-      gcc_unreachable ();\n-    }\n-}\n-\n /* Concatenate the user options and any file options read from an LTO IL\n    file, and reissue them as if all had just been read in from the command\n    line.  As with serialization, file options precede user options.  */\n@@ -397,10 +380,15 @@ lto_reissue_options (void)\n \n   for (i = 0; VEC_iterate (opt_t, opts, i, o); i++)\n     {\n+      const struct cl_option *option = &cl_options[o->code];\n+\n+      if (option->flag_var)\n+\tset_option (option, o->value, o->arg);\n+\n       if (o->type == CL_TARGET)\n \ttargetm.handle_option (o->code, o->arg, o->value);\n       else if (o->type == CL_COMMON)\n-\thandle_common_option (o->code, o->arg, o->value);\n+\tgcc_assert (option->flag_var);\n       else\n \tgcc_unreachable ();\n     }"}, {"sha": "51a0cb954196be8224d6dbe6f3d86beb0740adf6", "filename": "gcc/opts.c", "status": "modified", "additions": 37, "deletions": 26, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab6218f150a207398a27d1e8bbc0249ac8c03466/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab6218f150a207398a27d1e8bbc0249ac8c03466/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=ab6218f150a207398a27d1e8bbc0249ac8c03466", "patch": "@@ -610,32 +610,7 @@ handle_option (const char **argv, unsigned int lang_mask)\n     }\n \n   if (option->flag_var)\n-    switch (option->var_type)\n-      {\n-      case CLVC_BOOLEAN:\n-\t*(int *) option->flag_var = value;\n-\tbreak;\n-\n-      case CLVC_EQUAL:\n-\t*(int *) option->flag_var = (value\n-\t\t\t\t     ? option->var_value\n-\t\t\t\t     : !option->var_value);\n-\tbreak;\n-\n-      case CLVC_BIT_CLEAR:\n-      case CLVC_BIT_SET:\n-\tif ((value != 0) == (option->var_type == CLVC_BIT_SET))\n-\t  *(int *) option->flag_var |= option->var_value;\n-\telse\n-\t  *(int *) option->flag_var &= ~option->var_value;\n-\tif (option->flag_var == &target_flags)\n-\t  target_flags_explicit |= option->var_value;\n-\tbreak;\n-\n-      case CLVC_STRING:\n-\t*(const char **) option->flag_var = arg;\n-\tbreak;\n-      }\n+    set_option (option, value, arg);\n \n   if (option->flags & lang_mask)\n     {\n@@ -2349,6 +2324,42 @@ get_option_state (int option, struct cl_option_state *state)\n   return true;\n }\n \n+/* Set *OPTION according to VALUE and ARG.  */\n+\n+void\n+set_option (const struct cl_option *option, int value, const char *arg)\n+{\n+  if (!option->flag_var)\n+    return;\n+\n+  switch (option->var_type)\n+    {\n+    case CLVC_BOOLEAN:\n+\t*(int *) option->flag_var = value;\n+\tbreak;\n+\n+    case CLVC_EQUAL:\n+\t*(int *) option->flag_var = (value\n+\t\t\t\t     ? option->var_value\n+\t\t\t\t     : !option->var_value);\n+\tbreak;\n+\n+    case CLVC_BIT_CLEAR:\n+    case CLVC_BIT_SET:\n+\tif ((value != 0) == (option->var_type == CLVC_BIT_SET))\n+\t  *(int *) option->flag_var |= option->var_value;\n+\telse\n+\t  *(int *) option->flag_var &= ~option->var_value;\n+\tif (option->flag_var == &target_flags)\n+\t  target_flags_explicit |= option->var_value;\n+\tbreak;\n+\n+    case CLVC_STRING:\n+\t*(const char **) option->flag_var = arg;\n+\tbreak;\n+    }\n+}\n+\n /* Enable a warning option as an error.  This is used by -Werror= and\n    also by legacy Werror-implicit-function-declaration.  */\n "}, {"sha": "a2eef1938c75973f59f7bb4880d4bf79683a37f2", "filename": "gcc/opts.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab6218f150a207398a27d1e8bbc0249ac8c03466/gcc%2Fopts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab6218f150a207398a27d1e8bbc0249ac8c03466/gcc%2Fopts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.h?ref=ab6218f150a207398a27d1e8bbc0249ac8c03466", "patch": "@@ -103,6 +103,7 @@ extern void prune_options (int *argcp, char ***argvp);\n extern void decode_options (unsigned int argc, const char **argv);\n extern int option_enabled (int opt_idx);\n extern bool get_option_state (int, struct cl_option_state *);\n+extern void set_option (const struct cl_option *, int, const char *);\n \n extern void enable_warning_as_error (const char *arg, int value,\n \t\t\t\t     unsigned int lang_mask);"}]}