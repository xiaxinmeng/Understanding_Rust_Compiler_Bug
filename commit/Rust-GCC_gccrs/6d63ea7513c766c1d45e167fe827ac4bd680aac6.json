{"sha": "6d63ea7513c766c1d45e167fe827ac4bd680aac6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQ2M2VhNzUxM2M3NjZjMWQ0NWUxNjdmZTgyN2FjNGJkNjgwYWFjNg==", "commit": {"author": {"name": "Laurent GUERBY", "email": "laurent@guerby.net", "date": "2009-04-06T20:18:10Z"}, "committer": {"name": "Laurent Guerby", "email": "guerby@gcc.gnu.org", "date": "2009-04-06T20:18:10Z"}, "message": "gnat.exp: Handle multilib.\n\ntestsuite/\n2009-04-06  Laurent GUERBY  <laurent@guerby.net>\n\n        * lib/gnat.exp: Handle multilib.\n        \nlibada/\n2009-04-06  Laurent GUERBY  <laurent@guerby.net>\n\n        * Makefile.in (ADA_RTS_DIR): Define.\n        * Makefile.in (gnatlib-*): Link adainclude and adalib to it.\n\nFrom-SVN: r145622", "tree": {"sha": "78063b9076f90c585f15c544b3916e71303a142b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/78063b9076f90c585f15c544b3916e71303a142b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d63ea7513c766c1d45e167fe827ac4bd680aac6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d63ea7513c766c1d45e167fe827ac4bd680aac6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d63ea7513c766c1d45e167fe827ac4bd680aac6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d63ea7513c766c1d45e167fe827ac4bd680aac6/comments", "author": {"login": "guerby", "id": 6659329, "node_id": "MDQ6VXNlcjY2NTkzMjk=", "avatar_url": "https://avatars.githubusercontent.com/u/6659329?v=4", "gravatar_id": "", "url": "https://api.github.com/users/guerby", "html_url": "https://github.com/guerby", "followers_url": "https://api.github.com/users/guerby/followers", "following_url": "https://api.github.com/users/guerby/following{/other_user}", "gists_url": "https://api.github.com/users/guerby/gists{/gist_id}", "starred_url": "https://api.github.com/users/guerby/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/guerby/subscriptions", "organizations_url": "https://api.github.com/users/guerby/orgs", "repos_url": "https://api.github.com/users/guerby/repos", "events_url": "https://api.github.com/users/guerby/events{/privacy}", "received_events_url": "https://api.github.com/users/guerby/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ea0a374b2c55421c111b401ba73bd45230599c07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea0a374b2c55421c111b401ba73bd45230599c07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea0a374b2c55421c111b401ba73bd45230599c07"}], "stats": {"total": 80, "additions": 55, "deletions": 25}, "files": [{"sha": "40b0d240ee5aeed59ec637e7cd2c9777765bfa2f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d63ea7513c766c1d45e167fe827ac4bd680aac6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d63ea7513c766c1d45e167fe827ac4bd680aac6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6d63ea7513c766c1d45e167fe827ac4bd680aac6", "patch": "@@ -1,3 +1,7 @@\n+2009-04-06  Laurent GUERBY  <laurent@guerby.net>\n+\n+        * lib/gnat.exp: Handle multilib.\n+\t\n 2009-04-06  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/38863"}, {"sha": "c14899fe914961caa2f7ef0cf8e352cd2a18c01e", "filename": "gcc/testsuite/lib/gnat.exp", "status": "modified", "additions": 41, "deletions": 25, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d63ea7513c766c1d45e167fe827ac4bd680aac6/gcc%2Ftestsuite%2Flib%2Fgnat.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d63ea7513c766c1d45e167fe827ac4bd680aac6/gcc%2Ftestsuite%2Flib%2Fgnat.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgnat.exp?ref=6d63ea7513c766c1d45e167fe827ac4bd680aac6", "patch": "@@ -83,17 +83,22 @@ proc gnat_init { args } {\n     global gluefile wrap_flags\n     global gnat_initialized\n     global GNAT_UNDER_TEST\n+    global GNAT_UNDER_TEST_ORIG\n     global TOOL_EXECUTABLE\n     global gnat_libgcc_s_path\n+    global gnat_target_current\n+\n+    set gnat_target_current \"\"\n \n     if { $gnat_initialized == 1 } { return }\n \n     if ![info exists GNAT_UNDER_TEST] then {\n \tif [info exists TOOL_EXECUTABLE] {\n-\t    set GNAT_UNDER_TEST $TOOL_EXECUTABLE\n+\t    set GNAT_UNDER_TEST \"$TOOL_EXECUTABLE\"\n \t} else {\n-\t    set GNAT_UNDER_TEST [find_gnatmake]\n+\t    set GNAT_UNDER_TEST \"[local_find_gnatmake]\"\n \t}\n+        set GNAT_UNDER_TEST_ORIG \"$GNAT_UNDER_TEST\"\n     }\n \n     if ![info exists tmpdir] then {\n@@ -124,14 +129,26 @@ proc gnat_target_compile { source dest type options } {\n     global gluefile wrap_flags\n     global srcdir\n     global GNAT_UNDER_TEST\n+    global GNAT_UNDER_TEST_ORIG\n     global TOOL_OPTIONS\n     global ld_library_path\n     global gnat_libgcc_s_path\n+    global gnat_target_current\n+\n+    # If we detect a change of target we need to recompute\n+    # the appropriate RTS by calling get_multilibs.\n+    if { $gnat_target_current!=\"[current_target_name]\" } {\n+\tset gnat_target_current \"[current_target_name]\"\n+\tif [info exists TOOL_OPTIONS] {\n+\t    set gnat_rts_opt \"--RTS=[get_multilibs ${TOOL_OPTIONS}]/libada\"\n+\t} else {\n+\t    set gnat_rts_opt \"--RTS=[get_multilibs]/libada\"\n+\t}\n+        set GNAT_UNDER_TEST \"$GNAT_UNDER_TEST_ORIG $gnat_rts_opt\"\n+    }\n \n-    setenv ADA_INCLUDE_PATH \"${rootme}/ada/rts\"\n     set ld_library_path \".:${gnat_libgcc_s_path}\"\n     lappend options \"compiler=$GNAT_UNDER_TEST -q -f\"\n-    lappend options \"incdir=${rootme}/ada/rts\"\n     lappend options \"timeout=[timeout_value]\"\n \n     if { [target_info needs_status_wrapper]!=\"\" && [info exists gluefile] } {\n@@ -150,6 +167,7 @@ proc gnat_target_compile { source dest type options } {\n \n #    set sourcename [string range $source 0 [expr [string length $source] - 5]]\n #    set dest \"\"\n+\n     return [target_compile $source $dest $type $options]\n }\n \n@@ -232,29 +250,27 @@ proc prune_gnat_output { text } {\n     return $text\n }\n \n-# If this is an older version of DejaGnu (without find_gnatmake), provide one.\n-# This can be deleted after next DejaGnu release.\n-\n-if { [info procs find_gnatmake] == \"\" } {\n-    proc find_gnatmake {} {\n-\tglobal tool_root_dir\n+# find_gnatmake for some version of DejaGnu will hardcode a -I...rts/ada flag\n+# which prevent multilib from working, so define a new one.\n \n-\tif ![is_remote host] {\n-\t    set file [lookfor_file $tool_root_dir gnatmake]\n-\t    if { $file == \"\" } {\n-\t\tset file [lookfor_file $tool_root_dir gcc/gnatmake]\n-\t    }\n-\t    if { $file != \"\" } {\n-\t\tset root [file dirname $file]\n-\t\tset CC \"$file -I$root/ada/rts --GCC=$root/xgcc --GNATBIND=$root/gnatbind --GNATLINK=$root/gnatlink -cargs -B$root -largs --GCC=$root/xgcc -B$root -margs\";\n-\t    } else {\n-\t\tset CC [transform gnatmake]\n-\t    }\n-\t} else {\n-\t    set CC [transform gnatmake]\n-\t}\n-\treturn $CC\n+proc local_find_gnatmake {} {\n+    global tool_root_dir\n+    \n+    if ![is_remote host] {\n+        set file [lookfor_file $tool_root_dir gnatmake]\n+        if { $file == \"\" } {\n+    \tset file [lookfor_file $tool_root_dir gcc/gnatmake]\n+        }\n+        if { $file != \"\" } {\n+    \tset root [file dirname $file]\n+    \tset CC \"$file --GCC=$root/xgcc --GNATBIND=$root/gnatbind --GNATLINK=$root/gnatlink -cargs -B$root -largs -B$root -margs -B$root\";\n+        } else {\n+    \tset CC [transform gnatmake]\n+        }\n+    } else {\n+        set CC [transform gnatmake]\n     }\n+    return $CC\n }\n \n # If this is an older version of DejaGnu (without runtest_file_p),"}, {"sha": "a58617b1c3e90ffeef4dc4be38f6fedd321bc08c", "filename": "libada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d63ea7513c766c1d45e167fe827ac4bd680aac6/libada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d63ea7513c766c1d45e167fe827ac4bd680aac6/libada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libada%2FChangeLog?ref=6d63ea7513c766c1d45e167fe827ac4bd680aac6", "patch": "@@ -1,3 +1,8 @@\n+2009-04-06  Laurent GUERBY  <laurent@guerby.net>\n+\n+        * Makefile.in (ADA_RTS_DIR): Define.\n+        * Makefile.in (gnatlib-*): Link adainclude and adalib to it.\n+\n 2008-09-21  Laurent Guerby  <laurent@guerby.net>\n             Paolo Bonzini  <bonzini@gnu.org>\n \t"}, {"sha": "b819dfcccfdea7abd9b2b9fd1d20d1cde33cffd5", "filename": "libada/Makefile.in", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d63ea7513c766c1d45e167fe827ac4bd680aac6/libada%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d63ea7513c766c1d45e167fe827ac4bd680aac6/libada%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libada%2FMakefile.in?ref=6d63ea7513c766c1d45e167fe827ac4bd680aac6", "patch": "@@ -65,6 +65,7 @@ include $(GCC_DIR)/libgcc.mvars\n target_noncanonical:=@target_noncanonical@\n version := $(shell cat $(srcdir)/../gcc/BASE-VER)\n libsubdir := $(libdir)/gcc/$(target_noncanonical)/$(version)$(MULTISUBDIR)\n+ADA_RTS_DIR=$(GCC_DIR)/ada/rts$(subst /,_,$(MULTISUBDIR))\n \n # exeext should not be used because it's the *host* exeext.  We're building\n # a *target* library, aren't we?!?  Likewise for CC.  Still, provide bogus\n@@ -97,11 +98,15 @@ gnatlib-plain: oscons $(GCC_DIR)/ada/Makefile\n \ttest -f stamp-libada || \\\n \t$(MAKE) -C $(GCC_DIR)/ada $(LIBADA_FLAGS_TO_PASS) gnatlib \\\n \t&& touch stamp-libada\n+\t$(LN_S) $(ADA_RTS_DIR) adainclude\n+\t$(LN_S) $(ADA_RTS_DIR) adalib\n \n gnatlib-sjlj gnatlib-zcx gnatlib-shared: oscons $(GCC_DIR)/ada/Makefile\n \ttest -f stamp-libada || \\\n \t$(MAKE) -C $(GCC_DIR)/ada $(LIBADA_FLAGS_TO_PASS) $@ \\\n \t&& touch stamp-libada\n+\t$(LN_S) $(ADA_RTS_DIR) adainclude\n+\t$(LN_S) $(ADA_RTS_DIR) adalib\n \n oscons:\n \t$(MAKE) -C $(GCC_DIR) $(LIBADA_FLAGS_TO_PASS) ada/s-oscons.ads"}]}