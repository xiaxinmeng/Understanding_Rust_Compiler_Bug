{"sha": "0b274c179f478df449d66bd0707cb9aa05dcafed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGIyNzRjMTc5ZjQ3OGRmNDQ5ZDY2YmQwNzA3Y2I5YWEwNWRjYWZlZA==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2014-12-01T15:29:11Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2014-12-01T15:29:11Z"}, "message": "re PR sanitizer/63956 ([UBSAN] ICE segfault in cxx_eval_call_expression ../../gcc/cp/constexpr.c)\n\n\tPR sanitizer/63956\n\t* ubsan.c (is_ubsan_builtin_p): Check also built-in class.\ncp/\n\t* constexpr.c: Include ubsan.h.\n\t(cxx_eval_call_expression): Bail out for IFN_UBSAN_{NULL,BOUNDS}\n\tinternal functions and for ubsan builtins.\n\t* error.c: Include internal-fn.h.\n\t(dump_expr): Add printing of internal functions.\ntestsuite/\n\t* c-c++-common/ubsan/shift-5.c: Add xfails.\n\t* g++.dg/ubsan/div-by-zero-1.C: Don't use -w.  Add xfail.\n\t* g++.dg/ubsan/pr63956.C: New test.\n\nFrom-SVN: r218221", "tree": {"sha": "ab16ac18207414d807131a6cc0d31d9904341699", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab16ac18207414d807131a6cc0d31d9904341699"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b274c179f478df449d66bd0707cb9aa05dcafed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b274c179f478df449d66bd0707cb9aa05dcafed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b274c179f478df449d66bd0707cb9aa05dcafed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b274c179f478df449d66bd0707cb9aa05dcafed/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e42c407c8ad2b2bf30fdfab1f7cb6948f1949f38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e42c407c8ad2b2bf30fdfab1f7cb6948f1949f38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e42c407c8ad2b2bf30fdfab1f7cb6948f1949f38"}], "stats": {"total": 269, "additions": 252, "deletions": 17}, "files": [{"sha": "f75ecf5391e2f74ed1f5aacd9d2218acc144cec3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b274c179f478df449d66bd0707cb9aa05dcafed/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b274c179f478df449d66bd0707cb9aa05dcafed/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0b274c179f478df449d66bd0707cb9aa05dcafed", "patch": "@@ -1,3 +1,8 @@\n+2014-12-01  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR sanitizer/63956\n+\t* ubsan.c (is_ubsan_builtin_p): Check also built-in class.\n+\n 2014-12-01  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gimple.h (gimple_build_assign_stat): Remove prototype."}, {"sha": "93780c0a6a894662ee658d22a7175f5296ecac52", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b274c179f478df449d66bd0707cb9aa05dcafed/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b274c179f478df449d66bd0707cb9aa05dcafed/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0b274c179f478df449d66bd0707cb9aa05dcafed", "patch": "@@ -1,3 +1,12 @@\n+2014-12-01  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR sanitizer/63956\n+\t* constexpr.c: Include ubsan.h.\n+\t(cxx_eval_call_expression): Bail out for IFN_UBSAN_{NULL,BOUNDS}\n+\tinternal functions and for ubsan builtins.\n+\t* error.c: Include internal-fn.h.\n+\t(dump_expr): Add printing of internal functions.\n+\n 2014-12-01  Marek Polacek  <polacek@redhat.com>\n \n \t* constexpr.c (literal_type_p): Return true for void type in C++14."}, {"sha": "2184a2f300bf60f56b69695944f6b4fe243dfe92", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b274c179f478df449d66bd0707cb9aa05dcafed/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b274c179f478df449d66bd0707cb9aa05dcafed/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=0b274c179f478df449d66bd0707cb9aa05dcafed", "patch": "@@ -32,6 +32,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimplify.h\"\n #include \"builtins.h\"\n #include \"tree-inline.h\"\n+#include \"ubsan.h\"\n \n static bool verify_constant (tree, bool, bool *, bool *);\n #define VERIFY_CONSTANT(X)\t\t\t\t\t\t\\\n@@ -1152,6 +1153,19 @@ cxx_eval_call_expression (const constexpr_ctx *ctx, tree t,\n   constexpr_call *entry;\n   bool depth_ok;\n \n+  if (fun == NULL_TREE)\n+    switch (CALL_EXPR_IFN (t))\n+      {\n+      case IFN_UBSAN_NULL:\n+      case IFN_UBSAN_BOUNDS:\n+\treturn void_node;\n+      default:\n+\tif (!ctx->quiet)\n+\t  error_at (loc, \"call to internal function\");\n+\t*non_constant_p = true;\n+\treturn t;\n+      }\n+\n   if (TREE_CODE (fun) != FUNCTION_DECL)\n     {\n       /* Might be a constexpr function pointer.  */\n@@ -1172,6 +1186,10 @@ cxx_eval_call_expression (const constexpr_ctx *ctx, tree t,\n     }\n   if (DECL_CLONED_FUNCTION_P (fun))\n     fun = DECL_CLONED_FUNCTION (fun);\n+\n+  if (is_ubsan_builtin_p (fun))\n+    return void_node;\n+\n   if (is_builtin_fn (fun))\n     return cxx_eval_builtin_function_call (ctx, t,\n \t\t\t\t\t   addr, non_constant_p, overflow_p);"}, {"sha": "ff26fb91f73b29e8ecdb73544ec98247eec0c4b4", "filename": "gcc/cp/error.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b274c179f478df449d66bd0707cb9aa05dcafed/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b274c179f478df449d66bd0707cb9aa05dcafed/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=0b274c179f478df449d66bd0707cb9aa05dcafed", "patch": "@@ -33,6 +33,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-pretty-print.h\"\n #include \"c-family/c-objc.h\"\n #include \"ubsan.h\"\n+#include \"internal-fn.h\"\n \n #include <new>                    // For placement-new.\n \n@@ -2039,6 +2040,14 @@ dump_expr (cxx_pretty_printer *pp, tree t, int flags)\n \ttree fn = CALL_EXPR_FN (t);\n \tbool skipfirst = false;\n \n+\t/* Deal with internal functions.  */\n+\tif (fn == NULL_TREE)\n+\t  {\n+\t    pp_string (pp, internal_fn_name (CALL_EXPR_IFN (t)));\n+\t    dump_call_expr_args (pp, t, flags, skipfirst);\n+\t    break;\n+\t  }\n+\n \tif (TREE_CODE (fn) == ADDR_EXPR)\n \t  fn = TREE_OPERAND (fn, 0);\n "}, {"sha": "d7635f2f21a42eb9c946818a2164343b0df79992", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b274c179f478df449d66bd0707cb9aa05dcafed/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b274c179f478df449d66bd0707cb9aa05dcafed/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0b274c179f478df449d66bd0707cb9aa05dcafed", "patch": "@@ -1,3 +1,10 @@\n+2014-12-01  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR sanitizer/63956\n+\t* c-c++-common/ubsan/shift-5.c: Add xfails.\n+\t* g++.dg/ubsan/div-by-zero-1.C: Don't use -w.  Add xfail.\n+\t* g++.dg/ubsan/pr63956.C: New test.\n+\n 2014-12-01  Marek Polacek  <polacek@redhat.com>\n \n \t* g++.dg/cpp0x/constexpr-function2.C: Limit dg-error to C++11."}, {"sha": "9e85042b059e1d97bdaf5ddde148232b474a4b7c", "filename": "gcc/testsuite/c-c++-common/ubsan/shift-5.c", "status": "modified", "additions": 24, "deletions": 14, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b274c179f478df449d66bd0707cb9aa05dcafed/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fshift-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b274c179f478df449d66bd0707cb9aa05dcafed/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fshift-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fshift-5.c?ref=0b274c179f478df449d66bd0707cb9aa05dcafed", "patch": "@@ -2,31 +2,41 @@\n /* { dg-options \"-fsanitize=shift -w\" } */\n /* { dg-shouldfail \"ubsan\" } */\n \n-int x;\n int\n-foo (void)\n+foo (int x)\n {\n   /* None of the following should pass.  */\n   switch (x)\n     {\n     case 1 >> -1:\n-/* { dg-error \"case label does not reduce to an integer constant\" \"\" {target c } 12 } */\n-/* { dg-error \"is not a constant expression\" \"\" { target c++ } 12 } */\n+/* { dg-error \"case label does not reduce to an integer constant\" \"\" { target c } 11 } */\n+/* { dg-error \"is not a constant expression\" \"\" { xfail { *-*-* } } 11 } */\n     case -1 >> -1:\n-/* { dg-error \"case label does not reduce to an integer constant\" \"\" {target c } 15 } */\n-/* { dg-error \"is not a constant expression\" \"\" { target c++ } 15 } */\n+/* { dg-error \"case label does not reduce to an integer constant\" \"\" { target c } 14 } */\n+/* { dg-error \"is not a constant expression\" \"\" { xfail { *-*-* } } 14 } */\n     case 1 << -1:\n-/* { dg-error \"case label does not reduce to an integer constant\" \"\" {target c } 18 } */\n-/* { dg-error \"is not a constant expression\" \"\" { target c++ } 18 } */\n+/* { dg-error \"case label does not reduce to an integer constant\" \"\" { target c } 17 } */\n+/* { dg-error \"is not a constant expression\" \"\" { xfail { *-*-* } } 17 } */\n     case -1 << -1:\n-/* { dg-error \"case label does not reduce to an integer constant\" \"\" {target c } 21 } */\n-/* { dg-error \"is not a constant expression\" \"\" { target c++ } 21 } */\n+/* { dg-error \"case label does not reduce to an integer constant\" \"\" { target c } 20 } */\n+/* { dg-error \"is not a constant expression\" \"\" { xfail { *-*-* } } 20 } */\n+      return 1;\n+    }\n+  return 0;\n+}\n+\n+int\n+bar (int x)\n+{\n+  /* None of the following should pass.  */\n+  switch (x)\n+    {\n     case -1 >> 200:\n-/* { dg-error \"case label does not reduce to an integer constant\" \"\" {target c } 24 } */\n-/* { dg-error \"is not a constant expression\" \"\" { target c++ } 24 } */\n+/* { dg-error \"case label does not reduce to an integer constant\" \"\" { target c } 34 } */\n+/* { dg-error \"is not a constant expression\" \"\" { xfail { *-*-* } } 34 } */\n     case 1 << 200:\n-/* { dg-error \"case label does not reduce to an integer constant\" \"\" {target c } 27 } */\n-/* { dg-error \"is not a constant expression\" \"\" { target c++ } 27 } */\n+/* { dg-error \"case label does not reduce to an integer constant\" \"\" { target c } 37 } */\n+/* { dg-error \"is not a constant expression\" \"\" { xfail { *-*-* } } 37 } */\n       return 1;\n     }\n   return 0;"}, {"sha": "946f2e615f5675e84130ffe81340429ddd856049", "filename": "gcc/testsuite/g++.dg/ubsan/div-by-zero-1.C", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b274c179f478df449d66bd0707cb9aa05dcafed/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fdiv-by-zero-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b274c179f478df449d66bd0707cb9aa05dcafed/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fdiv-by-zero-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fdiv-by-zero-1.C?ref=0b274c179f478df449d66bd0707cb9aa05dcafed", "patch": "@@ -1,10 +1,14 @@\n /* { dg-do compile } */\n-/* { dg-options \"-fsanitize=integer-divide-by-zero -w\" } */\n+/* { dg-options \"-fsanitize=integer-divide-by-zero\" } */\n+\n+/* TODO: We expect an error on the invalid case here, because that\n+   must be a constant-expression.  This will be fixed when we have\n+   proper delayed folding.  */\n \n void\n foo (int i)\n {\n   switch (i)\n-  case 0 * (1 / 0): /* { dg-error \"is not a constant expression\" } */\n-    ;\n+  case 0 * (1 / 0): /* { dg-warning \"division by zero\" } */\n+    ;  /* { dg-error \"division by zero\" \"\" { xfail *-*-* } 10 } */\n }"}, {"sha": "adfb55f679711a0d064cead5f51bc518b861fcf4", "filename": "gcc/testsuite/g++.dg/ubsan/pr63956.C", "status": "added", "additions": 172, "deletions": 0, "changes": 172, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b274c179f478df449d66bd0707cb9aa05dcafed/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr63956.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b274c179f478df449d66bd0707cb9aa05dcafed/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr63956.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr63956.C?ref=0b274c179f478df449d66bd0707cb9aa05dcafed", "patch": "@@ -0,0 +1,172 @@\n+// PR sanitizer/63956\n+// { dg-do compile }\n+// { dg-options \"-std=c++14 -fsanitize=undefined,float-divide-by-zero,float-cast-overflow\" }\n+\n+#define SA(X) static_assert((X),#X)\n+#define INT_MIN (-__INT_MAX__ - 1)\n+\n+constexpr int\n+fn1 (int a, int b)\n+{\n+  if (b != 2)\n+    a <<= b;\n+  return a;\n+}\n+\n+constexpr int i1 = fn1 (5, 3);\n+constexpr int i2 = fn1 (5, -2);\n+constexpr int i3 = fn1 (5, sizeof (int) * __CHAR_BIT__);\n+constexpr int i4 = fn1 (5, 256);\n+constexpr int i5 = fn1 (5, 2);\n+constexpr int i6 = fn1 (-2, 4);\n+constexpr int i7 = fn1 (0, 2);\n+\n+SA (i1 == 40);\n+SA (i5 == 5);\n+SA (i7 == 0);\n+\n+constexpr int\n+fn2 (int a, int b)\n+{\n+  if (b != 2)\n+    a >>= b;\n+  return a;\n+}\n+\n+constexpr int j1 = fn2 (4, 1);\n+constexpr int j2 = fn2 (4, -1);\n+constexpr int j3 = fn2 (10, sizeof (int) * __CHAR_BIT__);\n+constexpr int j4 = fn2 (1, 256);\n+constexpr int j5 = fn2 (5, 2);\n+constexpr int j6 = fn2 (-2, 4);\n+constexpr int j7 = fn2 (0, 4);\n+\n+SA (j1 == 2);\n+SA (j5 == 5);\n+SA (j7 == 0);\n+\n+constexpr int\n+fn3 (int a, int b)\n+{\n+  if (b != 2)\n+    a = a / b;\n+  return a;\n+}\n+\n+constexpr int k1 = fn3 (8, 4);\n+constexpr int k2 = fn3 (7, 0); // { dg-error \"is not a constant expression\" }\n+constexpr int k3 = fn3 (INT_MIN, -1); // { dg-error \"overflow in constant expression\" }\n+\n+SA (k1 == 2);\n+\n+constexpr float\n+fn4 (float a, float b)\n+{\n+  if (b != 2.0)\n+    a = a / b;\n+  return a;\n+}\n+\n+constexpr float l1 = fn4 (5.0, 3.0);\n+constexpr float l2 = fn4 (7.0, 0.0); // { dg-error \"is not a constant expression\" }\n+\n+constexpr int\n+fn5 (const int *a, int b)\n+{\n+  if (b != 2)\n+    b = a[b];\n+  return b;\n+}\n+\n+constexpr int m1[4] = { 1, 2, 3, 4 };\n+constexpr int m2 = fn5 (m1, 3);\n+constexpr int m3 = fn5 (m1, 4); // { dg-error \"array subscript out of bound\" }\n+\n+constexpr int\n+fn6 (const int &a, int b)\n+{\n+  if (b != 2)\n+    b = a;\n+  return b;\n+}\n+\n+constexpr int\n+fn7 (const int *a, int b)\n+{\n+  if (b != 3)\n+    return fn6 (*a, b);\n+  return 7;\n+}\n+\n+constexpr int n1 = 7;\n+constexpr int n2 = fn7 (&n1, 5);\n+constexpr int n3 = fn7 ((const int *) 0, 8); // { dg-error \"is not a constant expression\" }\n+\n+constexpr int\n+fn8 (int i)\n+{\n+  constexpr int g[10] = { };\n+  return g[i];\n+}\n+\n+constexpr int o1 = fn8 (9);\n+constexpr int o2 = fn8 (10); // { dg-error \"array subscript out of bound\" }\n+\n+constexpr int\n+fn9 (int a, int b)\n+{\n+  if (b != 0)\n+    return a + b;\n+  return a;\n+}\n+\n+constexpr int p1 = fn9 (42, 7);\n+constexpr int p2 = fn9 (__INT_MAX__, 1); // { dg-error \"overflow in constant expression\" }\n+constexpr int p3 = fn9 (__INT_MAX__, -1);\n+constexpr int p4 = fn9 (INT_MIN, 1);\n+constexpr int p5 = fn9 (INT_MIN, -1); // { dg-error \"overflow in constant expression\" }\n+\n+SA (p1 == 49);\n+SA (p3 == __INT_MAX__ - 1);\n+SA (p4 == INT_MIN + 1);\n+\n+constexpr int\n+fn10 (int a, int b)\n+{\n+  if (b != 0)\n+    return a * b;\n+  return a;\n+}\n+\n+constexpr int q1 = fn10 (10, 10);\n+constexpr int q2 = fn10 (__INT_MAX__, 2); // { dg-error \"overflow in constant expression\" }\n+constexpr int q3 = fn10 (INT_MIN, 2); // { dg-error \"overflow in constant expression\" }\n+constexpr int q4 = fn10 (-1, -1);\n+\n+SA (q1 == 100);\n+SA (q4 == 1);\n+\n+constexpr int\n+fn11 (double d)\n+{\n+  int i = d;\n+  if (i != 0)\n+    return i;\n+  return i * 2;\n+}\n+\n+constexpr int r1 = fn11 (3.4);\n+constexpr int r2 = fn11 (__builtin_inf ()); // { dg-error \"overflow in constant expression\" }\n+\n+constexpr int\n+fn12 (int i)\n+{\n+  if (i == 42)\n+    __builtin_unreachable (); // { dg-error \"is not a constant expression\" }\n+  return i + 10;\n+}\n+\n+constexpr int s1 = fn12 (1);\n+constexpr int s2 = fn12 (42);\n+\n+SA (s1 == 11);"}, {"sha": "cff0982eac7eb200c10c83c2246ee9bdfa75c80f", "filename": "gcc/ubsan.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b274c179f478df449d66bd0707cb9aa05dcafed/gcc%2Fubsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b274c179f478df449d66bd0707cb9aa05dcafed/gcc%2Fubsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fubsan.c?ref=0b274c179f478df449d66bd0707cb9aa05dcafed", "patch": "@@ -653,6 +653,7 @@ bool\n is_ubsan_builtin_p (tree t)\n {\n   return TREE_CODE (t) == FUNCTION_DECL\n+\t && DECL_BUILT_IN_CLASS (t) == BUILT_IN_NORMAL\n \t && strncmp (IDENTIFIER_POINTER (DECL_NAME (t)),\n \t\t     \"__builtin___ubsan_\", 18) == 0;\n }"}]}