{"sha": "3a248f7cecb43333923d6b2f89a1acb4e6b3dd6e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2EyNDhmN2NlY2I0MzMzMzkyM2Q2YjJmODlhMWFjYjRlNmIzZGQ2ZQ==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2017-10-20T14:51:32Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2017-10-20T14:51:32Z"}, "message": "sinfo.ads, sinfo.adb (Alloc_For_BIP_Return): New flag to indicate that an allocator came from a b-i-p return statement.\n\n2017-10-20  Bob Duff  <duff@adacore.com>\n\n\t* sinfo.ads, sinfo.adb (Alloc_For_BIP_Return): New flag to indicate\n\tthat an allocator came from a b-i-p return statement.\n\t* exp_ch4.adb (Expand_Allocator_Expression): Avoid adjusting the return\n\tobject of a nonlimited build-in-place function call.\n\t* exp_ch6.adb (Expand_N_Extended_Return_Statement): Set the\n\tAlloc_For_BIP_Return flag on generated allocators.\n\t* sem_ch5.adb (Analyze_Assignment): Move Assert to where it can't fail.\n\tIf the N_Assignment_Statement has been transformed into something else,\n\tthen Should_Transform_BIP_Assignment won't work.\n\t* exp_ch3.adb (Expand_N_Object_Declaration): A previous revision said,\n\t\"Remove Adjust if we're building the return object of an extended\n\treturn statement in place.\" Back out that part of the change, because\n\tthe Alloc_For_BIP_Return flag is now used for that.\n\nFrom-SVN: r253940", "tree": {"sha": "b2cf43fedb32b08b3914d887a1598dbdd503a018", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2cf43fedb32b08b3914d887a1598dbdd503a018"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a248f7cecb43333923d6b2f89a1acb4e6b3dd6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a248f7cecb43333923d6b2f89a1acb4e6b3dd6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a248f7cecb43333923d6b2f89a1acb4e6b3dd6e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a248f7cecb43333923d6b2f89a1acb4e6b3dd6e/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2185b58266f1c4b0b14a32ef1585f129ae42d9db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2185b58266f1c4b0b14a32ef1585f129ae42d9db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2185b58266f1c4b0b14a32ef1585f129ae42d9db"}], "stats": {"total": 83, "additions": 67, "deletions": 16}, "files": [{"sha": "af7038eaa795916bb6febbaf02c6b18c1d435bc2", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a248f7cecb43333923d6b2f89a1acb4e6b3dd6e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a248f7cecb43333923d6b2f89a1acb4e6b3dd6e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3a248f7cecb43333923d6b2f89a1acb4e6b3dd6e", "patch": "@@ -1,3 +1,19 @@\n+2017-10-20  Bob Duff  <duff@adacore.com>\n+\n+\t* sinfo.ads, sinfo.adb (Alloc_For_BIP_Return): New flag to indicate\n+\tthat an allocator came from a b-i-p return statement.\n+\t* exp_ch4.adb (Expand_Allocator_Expression): Avoid adjusting the return\n+\tobject of a nonlimited build-in-place function call.\n+\t* exp_ch6.adb (Expand_N_Extended_Return_Statement): Set the\n+\tAlloc_For_BIP_Return flag on generated allocators.\n+\t* sem_ch5.adb (Analyze_Assignment): Move Assert to where it can't fail.\n+\tIf the N_Assignment_Statement has been transformed into something else,\n+\tthen Should_Transform_BIP_Assignment won't work.\n+\t* exp_ch3.adb (Expand_N_Object_Declaration): A previous revision said,\n+\t\"Remove Adjust if we're building the return object of an extended\n+\treturn statement in place.\" Back out that part of the change, because\n+\tthe Alloc_For_BIP_Return flag is now used for that.\n+\n 2017-10-19  Bob Duff  <duff@adacore.com>\n \n \t* exp_ch6.adb (Is_Build_In_Place_Result_Type): Fix silly bug -- \"Typ\""}, {"sha": "ea739384d697f80961a20a084012a162f6ec106a", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a248f7cecb43333923d6b2f89a1acb4e6b3dd6e/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a248f7cecb43333923d6b2f89a1acb4e6b3dd6e/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=3a248f7cecb43333923d6b2f89a1acb4e6b3dd6e", "patch": "@@ -6800,15 +6800,7 @@ package body Exp_Ch3 is\n             --  adjustment is required if we are going to rewrite the object\n             --  declaration into a renaming declaration.\n \n-            if Is_Build_In_Place_Result_Type (Typ)\n-              and then Nkind (Parent (N)) = N_Extended_Return_Statement\n-              and then\n-                not Is_Definite_Subtype (Etype (Return_Applies_To\n-                      (Return_Statement_Entity (Parent (N)))))\n-            then\n-               null;\n-\n-            elsif Needs_Finalization (Typ)\n+            if Needs_Finalization (Typ)\n               and then not Is_Limited_View (Typ)\n               and then not Rewrite_As_Renaming\n             then"}, {"sha": "7a72a366c6d024a2636f48dbbcb2c9b7dcdad65a", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a248f7cecb43333923d6b2f89a1acb4e6b3dd6e/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a248f7cecb43333923d6b2f89a1acb4e6b3dd6e/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=3a248f7cecb43333923d6b2f89a1acb4e6b3dd6e", "patch": "@@ -1069,12 +1069,15 @@ package body Exp_Ch4 is\n          --  object can be limited but not inherently limited if this allocator\n          --  came from a return statement (we're allocating the result on the\n          --  secondary stack). In that case, the object will be moved, so we do\n-         --  want to Adjust.\n+         --  want to Adjust. However, if it's a nonlimited build-in-place\n+         --  function call, Adjust is not wanted.\n \n          if Needs_Finalization (DesigT)\n            and then Needs_Finalization (T)\n            and then not Aggr_In_Place\n            and then not Is_Limited_View (T)\n+           and then not Alloc_For_BIP_Return (N)\n+           and then not Is_Build_In_Place_Function_Call (Expression (N))\n          then\n             --  An unchecked conversion is needed in the classwide case because\n             --  the designated type can be an ancestor of the subtype mark of"}, {"sha": "593a0d041ccc445f2c515448d261b23e83e6debf", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a248f7cecb43333923d6b2f89a1acb4e6b3dd6e/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a248f7cecb43333923d6b2f89a1acb4e6b3dd6e/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=3a248f7cecb43333923d6b2f89a1acb4e6b3dd6e", "patch": "@@ -5145,11 +5145,19 @@ package body Exp_Ch6 is\n                         Set_No_Initialization (Heap_Allocator);\n                      end if;\n \n+                     --  Set the flag indicating that the allocator came from\n+                     --  a build-in-place return statement, so we can avoid\n+                     --  adjusting the allocated object. Note that this flag\n+                     --  will be inherited by the copies made below.\n+\n+                     Set_Alloc_For_BIP_Return (Heap_Allocator);\n+\n                      --  The Pool_Allocator is just like the Heap_Allocator,\n                      --  except we set Storage_Pool and Procedure_To_Call so\n                      --  it will use the user-defined storage pool.\n \n                      Pool_Allocator := New_Copy_Tree (Heap_Allocator);\n+                     pragma Assert (Alloc_For_BIP_Return (Pool_Allocator));\n \n                      --  Do not generate the renaming of the build-in-place\n                      --  pool parameter on ZFP because the parameter is not\n@@ -5191,6 +5199,7 @@ package body Exp_Ch6 is\n \n                      else\n                         SS_Allocator := New_Copy_Tree (Heap_Allocator);\n+                        pragma Assert (Alloc_For_BIP_Return (SS_Allocator));\n \n                         --  The heap and pool allocators are marked as\n                         --  Comes_From_Source since they correspond to an"}, {"sha": "10002ea08c2a4ce84025af79302b7d7898bb9ba6", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a248f7cecb43333923d6b2f89a1acb4e6b3dd6e/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a248f7cecb43333923d6b2f89a1acb4e6b3dd6e/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=3a248f7cecb43333923d6b2f89a1acb4e6b3dd6e", "patch": "@@ -1090,12 +1090,14 @@ package body Sem_Ch5 is\n       --  the context of the assignment statement. Restore the expander mode\n       --  now so that assignment statement can be properly expanded.\n \n-      if Nkind (N) = N_Assignment_Statement and then Has_Target_Names (N) then\n-         Expander_Mode_Restore;\n-         Full_Analysis := Save_Full_Analysis;\n-      end if;\n+      if Nkind (N) = N_Assignment_Statement then\n+         if Has_Target_Names (N) then\n+            Expander_Mode_Restore;\n+            Full_Analysis := Save_Full_Analysis;\n+         end if;\n \n-      pragma Assert (not Should_Transform_BIP_Assignment (Typ => T1));\n+         pragma Assert (not Should_Transform_BIP_Assignment (Typ => T1));\n+      end if;\n    end Analyze_Assignment;\n \n    -----------------------------"}, {"sha": "dc4e8fb2c1a0ef2a3f0faa119e01306ac76a8a0c", "filename": "gcc/ada/sinfo.adb", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a248f7cecb43333923d6b2f89a1acb4e6b3dd6e/gcc%2Fada%2Fsinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a248f7cecb43333923d6b2f89a1acb4e6b3dd6e/gcc%2Fada%2Fsinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.adb?ref=3a248f7cecb43333923d6b2f89a1acb4e6b3dd6e", "patch": "@@ -203,6 +203,14 @@ package body Sinfo is\n       return Flag4 (N);\n    end Aliased_Present;\n \n+   function Alloc_For_BIP_Return\n+      (N : Node_Id) return Boolean is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_Allocator);\n+      return Flag1 (N);\n+   end Alloc_For_BIP_Return;\n+\n    function All_Others\n       (N : Node_Id) return Boolean is\n    begin\n@@ -3626,6 +3634,14 @@ package body Sinfo is\n       Set_Flag4 (N, Val);\n    end Set_Aliased_Present;\n \n+   procedure Set_Alloc_For_BIP_Return\n+      (N : Node_Id; Val : Boolean := True) is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_Allocator);\n+      Set_Flag1 (N, Val);\n+   end Set_Alloc_For_BIP_Return;\n+\n    procedure Set_All_Others\n       (N : Node_Id; Val : Boolean := True) is\n    begin"}, {"sha": "c0dfe73a1cdf850db15dc3ff1ef887a576fa0201", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a248f7cecb43333923d6b2f89a1acb4e6b3dd6e/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a248f7cecb43333923d6b2f89a1acb4e6b3dd6e/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=3a248f7cecb43333923d6b2f89a1acb4e6b3dd6e", "patch": "@@ -903,6 +903,10 @@ package Sinfo is\n    --    known at compile time, this field points to an N_Range node with those\n    --    bounds. Otherwise Empty.\n \n+   --  Alloc_For_BIP_Return (Flag1-Sem)\n+   --    Present in N_Allocator nodes. True if the allocator is one of those\n+   --    generated for a build-in-place return statement.\n+\n    --  All_Others (Flag11-Sem)\n    --    Present in an N_Others_Choice node. This flag is set for an others\n    --    exception where all exceptions are to be caught, even those that are\n@@ -4773,6 +4777,7 @@ package Sinfo is\n       --  Subpool_Handle_Name (Node4) (set to Empty if not present)\n       --  Storage_Pool (Node1-Sem)\n       --  Procedure_To_Call (Node2-Sem)\n+      --  Alloc_For_BIP_Return (Flag1-Sem)\n       --  Null_Exclusion_Present (Flag11)\n       --  No_Initialization (Flag13-Sem)\n       --  Is_Static_Coextension (Flag14-Sem)\n@@ -7837,7 +7842,7 @@ package Sinfo is\n \n       --  The required semantics is that the set of actions is executed in\n       --  the order in which it appears, as though they appeared by themselves\n-      --  in the enclosing list of declarations of statements. Unlike what\n+      --  in the enclosing list of declarations or statements. Unlike what\n       --  happens when using an N_Block_Statement, no new scope is introduced.\n \n       --  Note: for the time being, this is used only as a transient\n@@ -9125,6 +9130,9 @@ package Sinfo is\n    function Aliased_Present\n      (N : Node_Id) return Boolean;    -- Flag4\n \n+   function Alloc_For_BIP_Return\n+     (N : Node_Id) return Boolean;    -- Flag1\n+\n    function All_Others\n      (N : Node_Id) return Boolean;    -- Flag11\n \n@@ -10214,6 +10222,9 @@ package Sinfo is\n    procedure Set_Aliased_Present\n      (N : Node_Id; Val : Boolean := True);    -- Flag4\n \n+   procedure Set_Alloc_For_BIP_Return\n+     (N : Node_Id; Val : Boolean := True);    -- Flag1\n+\n    procedure Set_All_Others\n      (N : Node_Id; Val : Boolean := True);    -- Flag11\n \n@@ -13063,6 +13074,7 @@ package Sinfo is\n    pragma Inline (Address_Warning_Posted);\n    pragma Inline (Aggregate_Bounds);\n    pragma Inline (Aliased_Present);\n+   pragma Inline (Alloc_For_BIP_Return);\n    pragma Inline (All_Others);\n    pragma Inline (All_Present);\n    pragma Inline (Alternatives);\n@@ -13423,6 +13435,7 @@ package Sinfo is\n    pragma Inline (Set_Address_Warning_Posted);\n    pragma Inline (Set_Aggregate_Bounds);\n    pragma Inline (Set_Aliased_Present);\n+   pragma Inline (Set_Alloc_For_BIP_Return);\n    pragma Inline (Set_All_Others);\n    pragma Inline (Set_All_Present);\n    pragma Inline (Set_Alternatives);"}]}