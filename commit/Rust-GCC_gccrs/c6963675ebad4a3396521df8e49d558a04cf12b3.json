{"sha": "c6963675ebad4a3396521df8e49d558a04cf12b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzY5NjM2NzVlYmFkNGEzMzk2NTIxZGY4ZTQ5ZDU1OGEwNGNmMTJiMw==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2009-04-08T15:18:49Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2009-04-08T15:18:49Z"}, "message": "recog.c (ordered_comparison_operator): New.\n\n2009-04-08  Paolo Bonzini  <bonzini@gnu.org>\n\n        * recog.c (ordered_comparison_operator): New.\n        * gensupport.c (std_preds): Add it.\n\t* doc/md.texi (Machine-Independent Predicates): Document it.\n\nFrom-SVN: r145748", "tree": {"sha": "c22913f141a234b21391cc1fee6f3ed3aa5a1a7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c22913f141a234b21391cc1fee6f3ed3aa5a1a7e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c6963675ebad4a3396521df8e49d558a04cf12b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6963675ebad4a3396521df8e49d558a04cf12b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6963675ebad4a3396521df8e49d558a04cf12b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6963675ebad4a3396521df8e49d558a04cf12b3/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6d07ad98760362cd9615c673cf8302908ce60980", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d07ad98760362cd9615c673cf8302908ce60980", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d07ad98760362cd9615c673cf8302908ce60980"}], "stats": {"total": 45, "additions": 44, "deletions": 1}, "files": [{"sha": "7934933fb8fd3135425ff5aea2eee56ab9dbc915", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6963675ebad4a3396521df8e49d558a04cf12b3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6963675ebad4a3396521df8e49d558a04cf12b3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c6963675ebad4a3396521df8e49d558a04cf12b3", "patch": "@@ -1,3 +1,9 @@\n+2009-04-08  Paolo Bonzini  <bonzini@gnu.org>\n+\n+        * recog.c (ordered_comparison_operator): New.\n+        * gensupport.c (std_preds): Add it.\n+\t* doc/md.texi (Machine-Independent Predicates): Document it.\n+\n 2009-04-08  Jan Hubicka  <jh@suse.cz>\n \n \t* tree-eh.c (cleanup_eh): When not optimizing, do not try EH merging."}, {"sha": "25de8b113e8c5562bba2faa11181b2df94fd80f5", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6963675ebad4a3396521df8e49d558a04cf12b3/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6963675ebad4a3396521df8e49d558a04cf12b3/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=c6963675ebad4a3396521df8e49d558a04cf12b3", "patch": "@@ -860,14 +860,22 @@ valid for @var{mode}.\n @end defun\n \n @noindent\n-Finally, there is one generic operator predicate.\n+Finally, there are two generic operator predicates.\n \n @defun comparison_operator\n This predicate matches any expression which performs an arithmetic\n comparison in @var{mode}; that is, @code{COMPARISON_P} is true for the\n expression code.\n @end defun\n \n+@defun ordered_comparison_operator\n+This predicate matches any expression which performs an arithmetic\n+comparison in @var{mode} and whose expression code is valid for integer\n+modes; that is, the expression code will be one of @code{eq}, @code{ne},\n+@code{lt}, @code{ltu}, @code{le}, @code{leu}, @code{gt}, @code{gtu},\n+@code{ge}, @code{geu}.\n+@end defun\n+\n @node Defining Predicates\n @subsection Defining Machine-Specific Predicates\n @cindex defining predicates"}, {"sha": "3c94863e5fda5bbd65d990243a05b64fd2c5cd27", "filename": "gcc/gensupport.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6963675ebad4a3396521df8e49d558a04cf12b3/gcc%2Fgensupport.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6963675ebad4a3396521df8e49d558a04cf12b3/gcc%2Fgensupport.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgensupport.c?ref=c6963675ebad4a3396521df8e49d558a04cf12b3", "patch": "@@ -1367,6 +1367,9 @@ static const struct std_pred_table std_preds[] = {\n   {\"pop_operand\", false, false, {MEM}},\n   {\"memory_operand\", false, false, {SUBREG, MEM}},\n   {\"indirect_operand\", false, false, {SUBREG, MEM}},\n+  {\"ordered_comparison_operator\", false, false, {EQ, NE,\n+\t\t\t\t\t\t LE, LT, GE, GT,\n+\t\t\t\t\t\t LEU, LTU, GEU, GTU}},\n   {\"comparison_operator\", false, false, {EQ, NE,\n \t\t\t\t\t LE, LT, GE, GT,\n \t\t\t\t\t LEU, LTU, GEU, GTU,"}, {"sha": "95f6e9a0965511d0b51c0449fbb931c5e2d31a74", "filename": "gcc/recog.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6963675ebad4a3396521df8e49d558a04cf12b3/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6963675ebad4a3396521df8e49d558a04cf12b3/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=c6963675ebad4a3396521df8e49d558a04cf12b3", "patch": "@@ -1319,6 +1319,32 @@ indirect_operand (rtx op, enum machine_mode mode)\n \t  && general_operand (XEXP (op, 0), Pmode));\n }\n \n+/* Return 1 if this is an ordered comparison operator (not including\n+   ORDERED and UNORDERED).  */\n+\n+int\n+ordered_comparison_operator (rtx op, enum machine_mode mode)\n+{\n+  if (mode != VOIDmode && GET_MODE (op) != mode)\n+    return false;\n+  switch (GET_CODE (op))\n+    {\n+    case EQ:\n+    case NE:\n+    case LT:\n+    case LTU:\n+    case LE:\n+    case LEU:\n+    case GT:\n+    case GTU:\n+    case GE:\n+    case GEU:\n+      return true;\n+    default:\n+      return false;\n+    }\n+}\n+\n /* Return 1 if this is a comparison operator.  This allows the use of\n    MATCH_OPERATOR to recognize all the branch insns.  */\n "}]}