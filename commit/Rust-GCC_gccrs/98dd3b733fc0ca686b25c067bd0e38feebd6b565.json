{"sha": "98dd3b733fc0ca686b25c067bd0e38feebd6b565", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OThkZDNiNzMzZmMwY2E2ODZiMjVjMDY3YmQwZTM4ZmVlYmQ2YjU2NQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-11-10T12:24:52Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-11-10T12:24:52Z"}, "message": "re PR tree-optimization/51030 (PHI opt does not handle value-replacement with a transfer function)\n\n2011-11-10  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/51030\n\t* tree-ssa-phiopt.c (jump_function_from_stmt): New function.\n\t(value_replacement): Use it to handle trivial non-empty\n\tintermediate blocks.\n\n\t* gcc.dg/tree-ssa/phi-opt-6.c: New testcase.\n\nFrom-SVN: r181254", "tree": {"sha": "96273c7665d053d22b52f8ece8c67593e4b6f93d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/96273c7665d053d22b52f8ece8c67593e4b6f93d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/98dd3b733fc0ca686b25c067bd0e38feebd6b565", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98dd3b733fc0ca686b25c067bd0e38feebd6b565", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98dd3b733fc0ca686b25c067bd0e38feebd6b565", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98dd3b733fc0ca686b25c067bd0e38feebd6b565/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "723afc4436e1c3753b152e0a14e6de5c52b07202", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/723afc4436e1c3753b152e0a14e6de5c52b07202", "html_url": "https://github.com/Rust-GCC/gccrs/commit/723afc4436e1c3753b152e0a14e6de5c52b07202"}], "stats": {"total": 86, "additions": 84, "deletions": 2}, "files": [{"sha": "52fc3f465c95886045a099a6122a2b4d30aaafb6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98dd3b733fc0ca686b25c067bd0e38feebd6b565/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98dd3b733fc0ca686b25c067bd0e38feebd6b565/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=98dd3b733fc0ca686b25c067bd0e38feebd6b565", "patch": "@@ -1,3 +1,10 @@\n+2011-11-10  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/51030\n+\t* tree-ssa-phiopt.c (jump_function_from_stmt): New function.\n+\t(value_replacement): Use it to handle trivial non-empty\n+\tintermediate blocks.\n+\n 2011-11-10  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/51071"}, {"sha": "68a34150c9878e484ef3a1bde13d99371f7c37ec", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98dd3b733fc0ca686b25c067bd0e38feebd6b565/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98dd3b733fc0ca686b25c067bd0e38feebd6b565/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=98dd3b733fc0ca686b25c067bd0e38feebd6b565", "patch": "@@ -1,3 +1,8 @@\n+2011-11-10  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/51030\n+\t* gcc.dg/tree-ssa/phi-opt-6.c: New testcase.\n+\n 2011-11-10  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/51071"}, {"sha": "6ec7b72247f6347b89e51db9e6eac0d71a1430fe", "filename": "gcc/testsuite/gcc.dg/tree-ssa/phi-opt-6.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98dd3b733fc0ca686b25c067bd0e38feebd6b565/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi-opt-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98dd3b733fc0ca686b25c067bd0e38feebd6b565/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi-opt-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi-opt-6.c?ref=98dd3b733fc0ca686b25c067bd0e38feebd6b565", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-phiopt1\" } */\n+\n+struct C { int i; };\n+int *g(struct C *p)\n+{\n+  if (p)\n+    return &p->i;\n+  return (int *)0;\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"if\" \"phiopt1\" } } */\n+/* { dg-final { cleanup-tree-dump \"phiopt1\" } } */"}, {"sha": "b739bbc125ca57955514309395ba5c8fe8abdbf1", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 59, "deletions": 2, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98dd3b733fc0ca686b25c067bd0e38feebd6b565/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98dd3b733fc0ca686b25c067bd0e38feebd6b565/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=98dd3b733fc0ca686b25c067bd0e38feebd6b565", "patch": "@@ -591,6 +591,38 @@ conditional_replacement (basic_block cond_bb, basic_block middle_bb,\n   return true;\n }\n \n+/* Update *ARG which is defined in STMT so that it contains the\n+   computed value if that seems profitable.  Return true if the\n+   statement is made dead by that rewriting.  */\n+\n+static bool\n+jump_function_from_stmt (tree *arg, gimple stmt)\n+{\n+  enum tree_code code = gimple_assign_rhs_code (stmt);\n+  if (code == ADDR_EXPR)\n+    {\n+      /* For arg = &p->i transform it to p, if possible.  */\n+      tree rhs1 = gimple_assign_rhs1 (stmt);\n+      HOST_WIDE_INT offset;\n+      tree tem = get_addr_base_and_unit_offset (TREE_OPERAND (rhs1, 0),\n+\t\t\t\t\t\t&offset);\n+      if (tem\n+\t  && TREE_CODE (tem) == MEM_REF\n+\t  && double_int_zero_p\n+\t       (double_int_add (mem_ref_offset (tem),\n+\t\t\t\tshwi_to_double_int (offset))))\n+\t{\n+\t  *arg = TREE_OPERAND (tem, 0);\n+\t  return true;\n+\t}\n+    }\n+  /* TODO: Much like IPA-CP jump-functions we want to handle constant\n+     additions symbolically here, and we'd need to update the comparison\n+     code that compares the arg + cst tuples in our caller.  For now the\n+     code above exactly handles the VEC_BASE pattern from vec.h.  */\n+  return false;\n+}\n+\n /*  The function value_replacement does the main work of doing the value\n     replacement.  Return true if the replacement is done.  Otherwise return\n     false.\n@@ -602,6 +634,7 @@ value_replacement (basic_block cond_bb, basic_block middle_bb,\n \t\t   edge e0, edge e1, gimple phi,\n \t\t   tree arg0, tree arg1)\n {\n+  gimple_stmt_iterator gsi;\n   gimple cond;\n   edge true_edge, false_edge;\n   enum tree_code code;\n@@ -611,8 +644,32 @@ value_replacement (basic_block cond_bb, basic_block middle_bb,\n   if (HONOR_SIGNED_ZEROS (TYPE_MODE (TREE_TYPE (arg1))))\n     return false;\n \n-  if (!empty_block_p (middle_bb))\n-    return false;\n+  /* Allow a single statement in MIDDLE_BB that defines one of the PHI\n+     arguments.  */\n+  gsi = gsi_after_labels (middle_bb);\n+  if (!gsi_end_p (gsi))\n+    {\n+      if (is_gimple_debug (gsi_stmt (gsi)))\n+\tgsi_next_nondebug (&gsi);\n+      if (!gsi_end_p (gsi))\n+\t{\n+\t  gimple stmt = gsi_stmt (gsi);\n+\t  tree lhs;\n+\t  gsi_next_nondebug (&gsi);\n+\t  if (!gsi_end_p (gsi))\n+\t    return false;\n+\t  if (!is_gimple_assign (stmt))\n+\t    return false;\n+\t  /* Now try to adjust arg0 or arg1 according to the computation\n+\t     in the single statement.  */\n+\t  lhs = gimple_assign_lhs (stmt);\n+\t  if (!((lhs == arg0\n+\t\t && jump_function_from_stmt (&arg0, stmt))\n+\t\t|| (lhs == arg1\n+\t\t    && jump_function_from_stmt (&arg1, stmt))))\n+\t    return false;\n+\t}\n+    }\n \n   cond = last_stmt (cond_bb);\n   code = gimple_cond_code (cond);"}]}