{"sha": "55194b0b4161b80b20207bf893f7f0f6b60a900d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTUxOTRiMGI0MTYxYjgwYjIwMjA3YmY4OTNmN2YwZjZiNjBhOTAwZA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2009-08-08T15:32:36Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2009-08-08T15:32:36Z"}, "message": "re PR tree-optimization/40991 (ICE: at optimization -02)\n\n2009-08-08  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/40991\n\t* tree-ssa-pre.c (eliminate): Delay purging EH edges.\n\n\t* g++.dg/torture/pr40991.C: New testcase.\n\nFrom-SVN: r150580", "tree": {"sha": "e20762b87c260137c1f80eff5c8520b03fc6f9bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e20762b87c260137c1f80eff5c8520b03fc6f9bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/55194b0b4161b80b20207bf893f7f0f6b60a900d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55194b0b4161b80b20207bf893f7f0f6b60a900d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55194b0b4161b80b20207bf893f7f0f6b60a900d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55194b0b4161b80b20207bf893f7f0f6b60a900d/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9e0567dee2ee81e9da725fd82540c88a4827620c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e0567dee2ee81e9da725fd82540c88a4827620c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e0567dee2ee81e9da725fd82540c88a4827620c"}], "stats": {"total": 130, "additions": 129, "deletions": 1}, "files": [{"sha": "a33b337c77320fb8a3a5f06236e0b8dc09e1fce1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55194b0b4161b80b20207bf893f7f0f6b60a900d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55194b0b4161b80b20207bf893f7f0f6b60a900d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=55194b0b4161b80b20207bf893f7f0f6b60a900d", "patch": "@@ -1,3 +1,8 @@\n+2009-08-08  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/40991\n+\t* tree-ssa-pre.c (eliminate): Delay purging EH edges.\n+\n 2009-08-08  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* combine.c (gen_lowpart_or_truncate): Exclude CONST_INTs from"}, {"sha": "2ab2e2a917c002b89bc3fd18456b86618d20394f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55194b0b4161b80b20207bf893f7f0f6b60a900d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55194b0b4161b80b20207bf893f7f0f6b60a900d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=55194b0b4161b80b20207bf893f7f0f6b60a900d", "patch": "@@ -1,3 +1,8 @@\n+2009-08-08  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/40991\n+\t* g++.dg/torture/pr40991.C: New testcase.\n+\n 2009-08-08  Laurent GUERBY  <laurent@guerby.net>\n \n         * ada/acats/support/impdef.a: Tweak timing constants. Add"}, {"sha": "c08124024a757898739d514a1fcb40836dcda87e", "filename": "gcc/testsuite/g++.dg/torture/pr40991.C", "status": "added", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55194b0b4161b80b20207bf893f7f0f6b60a900d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr40991.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55194b0b4161b80b20207bf893f7f0f6b60a900d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr40991.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr40991.C?ref=55194b0b4161b80b20207bf893f7f0f6b60a900d", "patch": "@@ -0,0 +1,113 @@\n+/* { dg-options \"-std=gnu++0x\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+namespace std __attribute__ ((__visibility__ (\"default\"))) {\n+    using ::size_t;\n+    void __throw_bad_function_call() __attribute__((__noreturn__));\n+}\n+inline void* operator new(std::size_t, void* __p) throw() {\n+    return __p;\n+}\n+namespace std {\n+    class type_info {\n+    public:\n+\tbool operator==(const type_info& __arg) const { }\n+    };\n+    namespace tr1 {\n+\ttemplate<typename _Tp, _Tp __v> struct integral_constant { };\n+\ttypedef integral_constant<bool, true> true_type;\n+\ttemplate<typename _Res, typename... _ArgTypes>\n+\tstruct _Maybe_unary_or_binary_function { };\n+\tclass _Undefined_class;\n+\tunion _Nocopy_types {\n+\t    void (_Undefined_class::*_M_member_pointer)();\n+\t};\n+\tunion _Any_data {\n+\t    void* _M_access() {\n+\t\treturn &_M_pod_data[0];\n+\t    }\n+\t    char _M_pod_data[sizeof(_Nocopy_types)];\n+\t};\n+\tenum _Manager_operation { __get_type_info, __get_functor_ptr, __clone_functor, __destroy_functor };\n+\ttemplate<typename _Tp> struct _Simple_type_wrapper {\n+\t    _Simple_type_wrapper(_Tp __value) : __value(__value) { }\n+\t    _Tp __value;\n+\t};\n+\ttemplate<typename _Signature> class function;\n+\tclass _Function_base {\n+\tpublic:\n+\t    static const std::size_t _M_max_size = sizeof(_Nocopy_types);\n+\t    static const std::size_t _M_max_align = __alignof__(_Nocopy_types);\n+\t    template<typename _Functor> class _Base_manager {\n+\t\tstatic const bool __stored_locally = (sizeof(_Functor) <= _M_max_size && __alignof__(_Functor) <= _M_max_align && (_M_max_align % __alignof__(_Functor) == 0));\n+\t\ttypedef integral_constant<bool, __stored_locally> _Local_storage;\n+\t    public:\n+\t\tstatic bool _M_manager(_Any_data& __dest, const _Any_data& __source, _Manager_operation __op) { }\n+\t\tstatic void _M_init_functor(_Any_data& __functor, const _Functor& __f) {\n+\t\t    _M_init_functor(__functor, __f, _Local_storage());\n+\t\t}\n+\t\ttemplate<typename _Class, typename _Tp> static bool _M_not_empty_function(_Tp _Class::* const& __mp) {\n+\t\t    return __mp;\n+\t\t}\n+\t\tstatic void _M_init_functor(_Any_data& __functor, const _Functor& __f, true_type) {\n+\t\t    new (__functor._M_access()) _Functor(__f);\n+\t\t}\n+\t    };\n+\t    ~_Function_base() {\n+\t\tif (_M_manager) _M_manager(_M_functor, _M_functor, __destroy_functor);\n+\t    }\n+\t    bool _M_empty() const {\n+\t\treturn !_M_manager;\n+\t    }\n+\t    typedef bool (*_Manager_type)(_Any_data&, const _Any_data&, _Manager_operation);\n+\t    _Any_data _M_functor;\n+\t    _Manager_type _M_manager;\n+\t};\n+\ttemplate<typename _Signature, typename _Functor> class _Function_handler;\n+\ttemplate<typename _Class, typename _Member, typename _Res, typename... _ArgTypes> class _Function_handler<_Res(_ArgTypes...), _Member _Class::*> : public _Function_handler<void(_ArgTypes...), _Member _Class::*> {\n+\tpublic:\n+\t    static _Res _M_invoke(const _Any_data& __functor, _ArgTypes... __args) { }\n+\t};\n+\ttemplate<typename _Class, typename _Member, typename... _ArgTypes> class _Function_handler<void(_ArgTypes...), _Member _Class::*> : public _Function_base::_Base_manager< _Simple_type_wrapper< _Member _Class::* > > { };\n+\ttemplate<typename _Res, typename... _ArgTypes> class function<_Res(_ArgTypes...)> : public _Maybe_unary_or_binary_function<_Res, _ArgTypes...>, private _Function_base {\n+\t    typedef _Res _Signature_type(_ArgTypes...);\n+\t    struct _Useless { };\n+\tpublic:\n+\t    template<typename _Functor> function(_Functor __f, _Useless = _Useless());\n+\t    _Res operator()(_ArgTypes... __args) const;\n+\t    const type_info& target_type() const;\n+\t    typedef _Res (*_Invoker_type)(const _Any_data&, _ArgTypes...);\n+\t    _Invoker_type _M_invoker;\n+\t};\n+\ttemplate<typename _Res, typename... _ArgTypes> template<typename _Functor> function<_Res(_ArgTypes...)>:: function(_Functor __f, _Useless) : _Function_base() {\n+\t    typedef _Function_handler<_Signature_type, _Functor> _My_handler;\n+\t    if (_My_handler::_M_not_empty_function(__f)) {\n+\t\t_M_invoker = &_My_handler::_M_invoke;\n+\t\t_M_manager = &_My_handler::_M_manager;\n+\t\t_My_handler::_M_init_functor(_M_functor, __f);\n+\t    }\n+\t}\n+\ttemplate<typename _Res, typename... _ArgTypes> _Res function<_Res(_ArgTypes...)>:: operator()(_ArgTypes... __args) const {\n+\t    if (_M_empty()) {\n+\t\t__throw_bad_function_call();\n+\t    }\n+\t    return _M_invoker(_M_functor, __args...);\n+\t}\n+\ttemplate<typename _Res, typename... _ArgTypes> const type_info& function<_Res(_ArgTypes...)>:: target_type() const {\n+\t    if (_M_manager) {\n+\t\t_Any_data __typeinfo_result;\n+\t\t_M_manager(__typeinfo_result, _M_functor, __get_type_info);\n+\t    }\n+\t}\n+    }\n+}\n+struct X {\n+    int bar;\n+};\n+void test05() {\n+    using std::tr1::function;\n+    X x;\n+    function<int(X&)> frm(&X::bar);\n+    frm(x) == 17;\n+    typeid(int X::*) == frm.target_type();\n+}"}, {"sha": "7a0533e43012c71f887194fee2db9b644699fd5f", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55194b0b4161b80b20207bf893f7f0f6b60a900d/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55194b0b4161b80b20207bf893f7f0f6b60a900d/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=55194b0b4161b80b20207bf893f7f0f6b60a900d", "patch": "@@ -4233,7 +4233,12 @@ eliminate (void)\n \t\t  gimple_call_set_fn (stmt, fn);\n \t\t  update_stmt (stmt);\n \t\t  if (maybe_clean_or_replace_eh_stmt (stmt, stmt))\n-\t\t    gimple_purge_dead_eh_edges (b);\n+\t\t    {\n+\t\t      bitmap_set_bit (need_eh_cleanup,\n+\t\t\t\t      gimple_bb (stmt)->index);\n+\t\t      if (dump_file && (dump_flags & TDF_DETAILS))\n+\t\t\tfprintf (dump_file, \"  Removed EH side effects.\\n\");\n+\t\t    }\n \n \t\t  /* Changing an indirect call to a direct call may\n \t\t     have exposed different semantics.  This may"}]}