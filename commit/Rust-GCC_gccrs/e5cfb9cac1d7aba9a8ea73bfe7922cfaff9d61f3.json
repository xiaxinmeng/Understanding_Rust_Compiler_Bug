{"sha": "e5cfb9cac1d7aba9a8ea73bfe7922cfaff9d61f3", "node_id": "C_kwDOANBUbNoAKGU1Y2ZiOWNhYzFkN2FiYTlhOGVhNzNiZmU3OTIyY2ZhZmY5ZDYxZjM", "commit": {"author": {"name": "Siddhesh Poyarekar", "email": "siddhesh@gotplt.org", "date": "2022-11-04T12:42:57Z"}, "committer": {"name": "Siddhesh Poyarekar", "email": "siddhesh@gotplt.org", "date": "2022-11-22T22:54:06Z"}, "message": "tree-object-size: Support strndup and strdup\n\nUse string length of input to strdup to determine the usable size of the\nresulting object.  Avoid doing the same for strndup since there's a\nchance that the input may be too large, resulting in an unnecessary\noverhead or worse, the input may not be NULL terminated, resulting in a\ncrash where there would otherwise have been none.\n\ngcc/ChangeLog:\n\n\t* tree-object-size.cc (todo): New variable.\n\t(object_sizes_execute): Use it.\n\t(strdup_object_size): New function.\n\t(call_object_size): Use it.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/builtin-dynamic-object-size-0.c (test_strdup,\n\ttest_strndup, test_strdup_min, test_strndup_min): New tests.\n\t(main): Call them.\n\t* gcc.dg/builtin-dynamic-object-size-1.c: Silence overread\n\twarnings.\n\t* gcc.dg/builtin-dynamic-object-size-2.c: Likewise.\n\t* gcc.dg/builtin-dynamic-object-size-3.c: Likewise.\n\t* gcc.dg/builtin-dynamic-object-size-4.c: Likewise.\n\t* gcc.dg/builtin-object-size-1.c: Silence overread warnings.\n\tDeclare free, strdup and strndup.\n\t(test11): New test.\n\t(main): Call it.\n\t* gcc.dg/builtin-object-size-2.c: Silence overread warnings.\n\tDeclare free, strdup and strndup.\n\t(test9): New test.\n\t(main): Call it.\n\t* gcc.dg/builtin-object-size-3.c: Silence overread warnings.\n\tDeclare free, strdup and strndup.\n\t(test11): New test.\n\t(main): Call it.\n\t* gcc.dg/builtin-object-size-4.c: Silence overread warnings.\n\tDeclare free, strdup and strndup.\n\t(test9): New test.\n\t(main): Call it.", "tree": {"sha": "082f70249752af626fa1e104f2547d9fdd1845b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/082f70249752af626fa1e104f2547d9fdd1845b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e5cfb9cac1d7aba9a8ea73bfe7922cfaff9d61f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5cfb9cac1d7aba9a8ea73bfe7922cfaff9d61f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5cfb9cac1d7aba9a8ea73bfe7922cfaff9d61f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5cfb9cac1d7aba9a8ea73bfe7922cfaff9d61f3/comments", "author": {"login": "siddhesh", "id": 158582, "node_id": "MDQ6VXNlcjE1ODU4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/158582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/siddhesh", "html_url": "https://github.com/siddhesh", "followers_url": "https://api.github.com/users/siddhesh/followers", "following_url": "https://api.github.com/users/siddhesh/following{/other_user}", "gists_url": "https://api.github.com/users/siddhesh/gists{/gist_id}", "starred_url": "https://api.github.com/users/siddhesh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/siddhesh/subscriptions", "organizations_url": "https://api.github.com/users/siddhesh/orgs", "repos_url": "https://api.github.com/users/siddhesh/repos", "events_url": "https://api.github.com/users/siddhesh/events{/privacy}", "received_events_url": "https://api.github.com/users/siddhesh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "siddhesh", "id": 158582, "node_id": "MDQ6VXNlcjE1ODU4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/158582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/siddhesh", "html_url": "https://github.com/siddhesh", "followers_url": "https://api.github.com/users/siddhesh/followers", "following_url": "https://api.github.com/users/siddhesh/following{/other_user}", "gists_url": "https://api.github.com/users/siddhesh/gists{/gist_id}", "starred_url": "https://api.github.com/users/siddhesh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/siddhesh/subscriptions", "organizations_url": "https://api.github.com/users/siddhesh/orgs", "repos_url": "https://api.github.com/users/siddhesh/repos", "events_url": "https://api.github.com/users/siddhesh/events{/privacy}", "received_events_url": "https://api.github.com/users/siddhesh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec7c796de020cb5cd955aa5b26c92b1da49d6076", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec7c796de020cb5cd955aa5b26c92b1da49d6076", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec7c796de020cb5cd955aa5b26c92b1da49d6076"}], "stats": {"total": 510, "additions": 500, "deletions": 10}, "files": [{"sha": "4f1606a486b9d911d891bd4dc4948f763126937f", "filename": "gcc/testsuite/gcc.dg/builtin-dynamic-object-size-0.c", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5cfb9cac1d7aba9a8ea73bfe7922cfaff9d61f3/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5cfb9cac1d7aba9a8ea73bfe7922cfaff9d61f3/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-0.c?ref=e5cfb9cac1d7aba9a8ea73bfe7922cfaff9d61f3", "patch": "@@ -479,6 +479,40 @@ test_loop (int *obj, size_t sz, size_t start, size_t end, int incr)\n   return __builtin_dynamic_object_size (ptr, 0);\n }\n \n+/* strdup/strndup.  */\n+\n+size_t\n+__attribute__ ((noinline))\n+test_strdup (const char *in)\n+{\n+  char *res = __builtin_strdup (in);\n+  return __builtin_dynamic_object_size (res, 0);\n+}\n+\n+size_t\n+__attribute__ ((noinline))\n+test_strndup (const char *in, size_t bound)\n+{\n+  char *res = __builtin_strndup (in, bound);\n+  return __builtin_dynamic_object_size (res, 0);\n+}\n+\n+size_t\n+__attribute__ ((noinline))\n+test_strdup_min (const char *in)\n+{\n+  char *res = __builtin_strdup (in);\n+  return __builtin_dynamic_object_size (res, 2);\n+}\n+\n+size_t\n+__attribute__ ((noinline))\n+test_strndup_min (const char *in, size_t bound)\n+{\n+  char *res = __builtin_strndup (in, bound);\n+  return __builtin_dynamic_object_size (res, 2);\n+}\n+\n /* Other tests.  */\n \n struct TV4\n@@ -651,6 +685,15 @@ main (int argc, char **argv)\n   int *t = test_pr105736 (&val3);\n   if (__builtin_dynamic_object_size (t, 0) != -1)\n     FAIL ();\n+  const char *str = \"hello world\";\n+  if (test_strdup (str) != __builtin_strlen (str) + 1)\n+    FAIL ();\n+  if (test_strndup (str, 4) != 5)\n+    FAIL ();\n+  if (test_strdup_min (str) != __builtin_strlen (str) + 1)\n+    FAIL ();\n+  if (test_strndup_min (str, 4) != 1)\n+    FAIL ();\n \n   if (nfails > 0)\n     __builtin_abort ();"}, {"sha": "8f17c8edcafd69c0fd15d04b067e34a836399878", "filename": "gcc/testsuite/gcc.dg/builtin-dynamic-object-size-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5cfb9cac1d7aba9a8ea73bfe7922cfaff9d61f3/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5cfb9cac1d7aba9a8ea73bfe7922cfaff9d61f3/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-1.c?ref=e5cfb9cac1d7aba9a8ea73bfe7922cfaff9d61f3", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-O2\" } */\n+/* { dg-options \"-O2 -Wno-stringop-overread\" } */\n /* { dg-require-effective-target alloca } */\n \n #define __builtin_object_size __builtin_dynamic_object_size"}, {"sha": "3677782ff1ca9c974bd6023ff0f1656cbba040cc", "filename": "gcc/testsuite/gcc.dg/builtin-dynamic-object-size-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5cfb9cac1d7aba9a8ea73bfe7922cfaff9d61f3/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5cfb9cac1d7aba9a8ea73bfe7922cfaff9d61f3/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-2.c?ref=e5cfb9cac1d7aba9a8ea73bfe7922cfaff9d61f3", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-O2\" } */\n+/* { dg-options \"-O2 -Wno-stringop-overread\" } */\n /* { dg-require-effective-target alloca } */\n \n #define __builtin_object_size __builtin_dynamic_object_size"}, {"sha": "5b6987b777372dbb6f2f13e656e5773d89700eb3", "filename": "gcc/testsuite/gcc.dg/builtin-dynamic-object-size-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5cfb9cac1d7aba9a8ea73bfe7922cfaff9d61f3/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5cfb9cac1d7aba9a8ea73bfe7922cfaff9d61f3/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-3.c?ref=e5cfb9cac1d7aba9a8ea73bfe7922cfaff9d61f3", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-O2\" } */\n+/* { dg-options \"-O2 -Wno-stringop-overread\" } */\n /* { dg-require-effective-target alloca } */\n \n #define __builtin_object_size __builtin_dynamic_object_size"}, {"sha": "9d796224e96c9a7159c2851250260b348da22212", "filename": "gcc/testsuite/gcc.dg/builtin-dynamic-object-size-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5cfb9cac1d7aba9a8ea73bfe7922cfaff9d61f3/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5cfb9cac1d7aba9a8ea73bfe7922cfaff9d61f3/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-4.c?ref=e5cfb9cac1d7aba9a8ea73bfe7922cfaff9d61f3", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-O2\" } */\n+/* { dg-options \"-O2 -Wno-stringop-overread\" } */\n /* { dg-require-effective-target alloca } */\n \n #define __builtin_object_size __builtin_dynamic_object_size"}, {"sha": "c6e5b4c29f86dcfc502a0f979a3437fe22a3b80d", "filename": "gcc/testsuite/gcc.dg/builtin-object-size-1.c", "status": "modified", "additions": 93, "deletions": 1, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5cfb9cac1d7aba9a8ea73bfe7922cfaff9d61f3/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5cfb9cac1d7aba9a8ea73bfe7922cfaff9d61f3/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-1.c?ref=e5cfb9cac1d7aba9a8ea73bfe7922cfaff9d61f3", "patch": "@@ -1,16 +1,19 @@\n /* { dg-do run } */\n-/* { dg-options \"-O2\" } */\n+/* { dg-options \"-O2 -Wno-stringop-overread\" } */\n /* { dg-require-effective-target alloca } */\n \n typedef __SIZE_TYPE__ size_t;\n extern void abort (void);\n extern void exit (int);\n extern void *malloc (size_t);\n extern void *calloc (size_t, size_t);\n+extern void free (void *);\n extern void *alloca (size_t);\n extern void *memcpy (void *, const void *, size_t);\n extern void *memset (void *, int, size_t);\n extern char *strcpy (char *, const char *);\n+extern char *strdup (const char *);\n+extern char *strndup (const char *, size_t);\n \n struct A\n {\n@@ -629,6 +632,94 @@ test10 (void)\n     }\n }\n \n+/* Tests for strdup/strndup.  */\n+size_t\n+__attribute__ ((noinline))\n+test11 (void)\n+{\n+  int i = 0;\n+  const char *ptr = \"abcdefghijklmnopqrstuvwxyz\";\n+  char *res = strndup (ptr, 21);\n+  if (__builtin_object_size (res, 0) != 22)\n+    abort ();\n+\n+  free (res);\n+\n+  res = strndup (ptr, 32);\n+  if (__builtin_object_size (res, 0) != 27)\n+    abort ();\n+\n+  free (res);\n+\n+  res = strdup (ptr);\n+  if (__builtin_object_size (res, 0) != 27)\n+    abort ();\n+\n+  free (res);\n+\n+  char *ptr2 = malloc (64);\n+  strcpy (ptr2, ptr);\n+\n+  res = strndup (ptr2, 21);\n+  if (__builtin_object_size (res, 0) != 22)\n+    abort ();\n+\n+  free (res);\n+\n+  res = strndup (ptr2, 32);\n+  if (__builtin_object_size (res, 0) != 33)\n+    abort ();\n+\n+  free (res);\n+\n+  res = strndup (ptr2, 128);\n+  if (__builtin_object_size (res, 0) != 64)\n+    abort ();\n+\n+  free (res);\n+\n+  res = strdup (ptr2);\n+#ifdef __builtin_object_size\n+  if (__builtin_object_size (res, 0) != 27)\n+#else\n+  if (__builtin_object_size (res, 0) != (size_t) -1)\n+#endif\n+    abort ();\n+  free (res);\n+  free (ptr2);\n+\n+  ptr = \"abcd\\0efghijklmnopqrstuvwxyz\";\n+  res = strdup (ptr);\n+  if (__builtin_object_size (res, 0) != 5)\n+    abort ();\n+  free (res);\n+\n+  res = strndup (ptr, 24);\n+  if (__builtin_object_size (res, 0) != 5)\n+    abort ();\n+  free (res);\n+\n+  res = strndup (ptr, 2);\n+  if (__builtin_object_size (res, 0) != 3)\n+    abort ();\n+  free (res);\n+\n+  res = strdup (&ptr[4]);\n+  if (__builtin_object_size (res, 0) != 1)\n+    abort ();\n+  free (res);\n+\n+  res = strndup (&ptr[4], 4);\n+  if (__builtin_object_size (res, 0) != 1)\n+    abort ();\n+  free (res);\n+\n+  res = strndup (&ptr[4], 1);\n+  if (__builtin_object_size (res, 0) != 1)\n+    abort ();\n+  free (res);\n+}\n+\n int\n main (void)\n {\n@@ -644,5 +735,6 @@ main (void)\n   test8 ();\n   test9 (1);\n   test10 ();\n+  test11 ();\n   exit (0);\n }"}, {"sha": "639a83cfd394948881215288c5fde4df47bb6899", "filename": "gcc/testsuite/gcc.dg/builtin-object-size-2.c", "status": "modified", "additions": 93, "deletions": 1, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5cfb9cac1d7aba9a8ea73bfe7922cfaff9d61f3/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5cfb9cac1d7aba9a8ea73bfe7922cfaff9d61f3/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-2.c?ref=e5cfb9cac1d7aba9a8ea73bfe7922cfaff9d61f3", "patch": "@@ -1,16 +1,19 @@\n /* { dg-do run } */\n-/* { dg-options \"-O2\" } */\n+/* { dg-options \"-O2 -Wno-stringop-overread\" } */\n /* { dg-require-effective-target alloca } */\n \n typedef __SIZE_TYPE__ size_t;\n extern void abort (void);\n extern void exit (int);\n extern void *malloc (size_t);\n extern void *calloc (size_t, size_t);\n+extern void free (void *);\n extern void *alloca (size_t);\n extern void *memcpy (void *, const void *, size_t);\n extern void *memset (void *, int, size_t);\n extern char *strcpy (char *, const char *);\n+extern char *strdup (const char *);\n+extern char *strndup (const char *, size_t);\n \n struct A\n {\n@@ -544,6 +547,94 @@ test8 (unsigned cond)\n #endif\n }\n \n+/* Tests for strdup/strndup.  */\n+size_t\n+__attribute__ ((noinline))\n+test9 (void)\n+{\n+  const char *ptr = \"abcdefghijklmnopqrstuvwxyz\";\n+  char *res = strndup (ptr, 21);\n+  if (__builtin_object_size (res, 1) != 22)\n+    abort ();\n+\n+  free (res);\n+\n+  res = strndup (ptr, 32);\n+  if (__builtin_object_size (res, 1) != 27)\n+    abort ();\n+\n+  free (res);\n+\n+  res = strdup (ptr);\n+  if (__builtin_object_size (res, 1) != 27)\n+    abort ();\n+\n+  free (res);\n+\n+  char *ptr2 = malloc (64);\n+  strcpy (ptr2, ptr);\n+\n+  res = strndup (ptr2, 21);\n+  if (__builtin_object_size (res, 1) != 22)\n+    abort ();\n+\n+  free (res);\n+\n+  res = strndup (ptr2, 32);\n+  if (__builtin_object_size (res, 1) != 33)\n+    abort ();\n+\n+  free (res);\n+\n+  res = strndup (ptr2, 128);\n+  if (__builtin_object_size (res, 1) != 64)\n+    abort ();\n+\n+  free (res);\n+\n+  res = strdup (ptr2);\n+#ifdef __builtin_object_size\n+  if (__builtin_object_size (res, 1) != 27)\n+#else\n+  if (__builtin_object_size (res, 1) != (size_t) -1)\n+#endif\n+    abort ();\n+\n+  free (res);\n+  free (ptr2);\n+\n+  ptr = \"abcd\\0efghijklmnopqrstuvwxyz\";\n+  res = strdup (ptr);\n+  if (__builtin_object_size (res, 1) != 5)\n+    abort ();\n+  free (res);\n+\n+  res = strndup (ptr, 24);\n+  if (__builtin_object_size (res, 1) != 5)\n+    abort ();\n+  free (res);\n+\n+  res = strndup (ptr, 2);\n+  if (__builtin_object_size (res, 1) != 3)\n+    abort ();\n+  free (res);\n+\n+  res = strdup (&ptr[4]);\n+  if (__builtin_object_size (res, 1) != 1)\n+    abort ();\n+  free (res);\n+\n+  res = strndup (&ptr[4], 4);\n+  if (__builtin_object_size (res, 1) != 1)\n+    abort ();\n+  free (res);\n+\n+  res = strndup (&ptr[4], 1);\n+  if (__builtin_object_size (res, 1) != 1)\n+    abort ();\n+  free (res);\n+}\n+\n int\n main (void)\n {\n@@ -557,5 +648,6 @@ main (void)\n   test6 ();\n   test7 ();\n   test8 (1);\n+  test9 ();\n   exit (0);\n }"}, {"sha": "ff4f1747334d3cf0581d11cc869c9cd7dc1e8753", "filename": "gcc/testsuite/gcc.dg/builtin-object-size-3.c", "status": "modified", "additions": 94, "deletions": 1, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5cfb9cac1d7aba9a8ea73bfe7922cfaff9d61f3/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5cfb9cac1d7aba9a8ea73bfe7922cfaff9d61f3/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-3.c?ref=e5cfb9cac1d7aba9a8ea73bfe7922cfaff9d61f3", "patch": "@@ -1,16 +1,19 @@\n /* { dg-do run } */\n-/* { dg-options \"-O2\" } */\n+/* { dg-options \"-O2 -Wno-stringop-overread\" } */\n /* { dg-require-effective-target alloca } */\n \n typedef __SIZE_TYPE__ size_t;\n extern void abort (void);\n extern void exit (int);\n extern void *malloc (size_t);\n extern void *calloc (size_t, size_t);\n+extern void free (void *);\n extern void *alloca (size_t);\n extern void *memcpy (void *, const void *, size_t);\n extern void *memset (void *, int, size_t);\n extern char *strcpy (char *, const char *);\n+extern char *strdup (const char *);\n+extern char *strndup (const char *, size_t);\n \n struct A\n {\n@@ -636,6 +639,95 @@ test10 (void)\n     }\n }\n \n+/* Tests for strdup/strndup.  */\n+size_t\n+__attribute__ ((noinline))\n+test11 (void)\n+{\n+  const char *ptr = \"abcdefghijklmnopqrstuvwxyz\";\n+  char *res = strndup (ptr, 21);\n+  if (__builtin_object_size (res, 2) != 22)\n+    abort ();\n+\n+  free (res);\n+\n+  res = strndup (ptr, 32);\n+  if (__builtin_object_size (res, 2) != 27)\n+    abort ();\n+\n+  free (res);\n+\n+  res = strdup (ptr);\n+  if (__builtin_object_size (res, 2) != 27)\n+    abort ();\n+\n+  free (res);\n+\n+  char *ptr2 = malloc (64);\n+  strcpy (ptr2, ptr);\n+\n+  res = strndup (ptr2, 21);\n+  if (__builtin_object_size (res, 2) != 1)\n+    abort ();\n+\n+  free (res);\n+\n+  res = strndup (ptr2, 32);\n+  if (__builtin_object_size (res, 2) != 1)\n+    abort ();\n+\n+  free (res);\n+\n+  res = strndup (ptr2, 128);\n+  if (__builtin_object_size (res, 2) != 1)\n+    abort ();\n+\n+  free (res);\n+\n+  res = strdup (ptr2);\n+\n+#ifdef __builtin_object_size\n+  if (__builtin_object_size (res, 2) != 27)\n+#else\n+  if (__builtin_object_size (res, 2) != 1)\n+#endif\n+    abort ();\n+\n+  free (res);\n+  free (ptr2);\n+\n+  ptr = \"abcd\\0efghijklmnopqrstuvwxyz\";\n+  res = strdup (ptr);\n+  if (__builtin_object_size (res, 2) != 5)\n+    abort ();\n+  free (res);\n+\n+  res = strndup (ptr, 24);\n+  if (__builtin_object_size (res, 2) != 5)\n+    abort ();\n+  free (res);\n+\n+  res = strndup (ptr, 2);\n+  if (__builtin_object_size (res, 2) != 3)\n+    abort ();\n+  free (res);\n+\n+  res = strdup (&ptr[4]);\n+  if (__builtin_object_size (res, 2) != 1)\n+    abort ();\n+  free (res);\n+\n+  res = strndup (&ptr[4], 4);\n+  if (__builtin_object_size (res, 2) != 1)\n+    abort ();\n+  free (res);\n+\n+  res = strndup (&ptr[4], 1);\n+  if (__builtin_object_size (res, 2) != 1)\n+    abort ();\n+  free (res);\n+}\n+\n int\n main (void)\n {\n@@ -651,5 +743,6 @@ main (void)\n   test8 ();\n   test9 (1);\n   test10 ();\n+  test11 ();\n   exit (0);\n }"}, {"sha": "4c007c364b71a3d7247d76d0a49fd6b93a804b8e", "filename": "gcc/testsuite/gcc.dg/builtin-object-size-4.c", "status": "modified", "additions": 93, "deletions": 1, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5cfb9cac1d7aba9a8ea73bfe7922cfaff9d61f3/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5cfb9cac1d7aba9a8ea73bfe7922cfaff9d61f3/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-4.c?ref=e5cfb9cac1d7aba9a8ea73bfe7922cfaff9d61f3", "patch": "@@ -1,16 +1,19 @@\n /* { dg-do run } */\n-/* { dg-options \"-O2\" } */\n+/* { dg-options \"-O2 -Wno-stringop-overread\" } */\n /* { dg-require-effective-target alloca } */\n \n typedef __SIZE_TYPE__ size_t;\n extern void abort (void);\n extern void exit (int);\n extern void *malloc (size_t);\n extern void *calloc (size_t, size_t);\n+extern void free (void *);\n extern void *alloca (size_t);\n extern void *memcpy (void *, const void *, size_t);\n extern void *memset (void *, int, size_t);\n extern char *strcpy (char *, const char *);\n+extern char *strdup (const char *);\n+extern char *strndup (const char *, size_t);\n \n struct A\n {\n@@ -517,6 +520,94 @@ test8 (unsigned cond)\n #endif\n }\n \n+/* Tests for strdup/strndup.  */\n+size_t\n+__attribute__ ((noinline))\n+test9 (void)\n+{\n+  const char *ptr = \"abcdefghijklmnopqrstuvwxyz\";\n+  char *res = strndup (ptr, 21);\n+  if (__builtin_object_size (res, 3) != 22)\n+    abort ();\n+\n+  free (res);\n+\n+  res = strndup (ptr, 32);\n+  if (__builtin_object_size (res, 3) != 27)\n+    abort ();\n+\n+  free (res);\n+\n+  res = strdup (ptr);\n+  if (__builtin_object_size (res, 3) != 27)\n+    abort ();\n+\n+  free (res);\n+\n+  char *ptr2 = malloc (64);\n+  strcpy (ptr2, ptr);\n+\n+  res = strndup (ptr2, 21);\n+  if (__builtin_object_size (res, 3) != 1)\n+    abort ();\n+\n+  free (res);\n+\n+  res = strndup (ptr2, 32);\n+  if (__builtin_object_size (res, 3) != 1)\n+    abort ();\n+\n+  free (res);\n+\n+  res = strndup (ptr2, 128);\n+  if (__builtin_object_size (res, 3) != 1)\n+    abort ();\n+\n+  free (res);\n+\n+  res = strdup (ptr2);\n+#ifdef __builtin_object_size\n+  if (__builtin_object_size (res, 3) != 27)\n+#else\n+  if (__builtin_object_size (res, 3) != 1)\n+#endif\n+    abort ();\n+\n+  free (res);\n+  free (ptr2);\n+\n+  ptr = \"abcd\\0efghijklmnopqrstuvwxyz\";\n+  res = strdup (ptr);\n+  if (__builtin_object_size (res, 3) != 5)\n+    abort ();\n+  free (res);\n+\n+  res = strndup (ptr, 24);\n+  if (__builtin_object_size (res, 3) != 5)\n+    abort ();\n+  free (res);\n+\n+  res = strndup (ptr, 2);\n+  if (__builtin_object_size (res, 3) != 3)\n+    abort ();\n+  free (res);\n+\n+  res = strdup (&ptr[4]);\n+  if (__builtin_object_size (res, 3) != 1)\n+    abort ();\n+  free (res);\n+\n+  res = strndup (&ptr[4], 4);\n+  if (__builtin_object_size (res, 3) != 1)\n+    abort ();\n+  free (res);\n+\n+  res = strndup (&ptr[4], 1);\n+  if (__builtin_object_size (res, 3) != 1)\n+    abort ();\n+  free (res);\n+}\n+\n int\n main (void)\n {\n@@ -530,5 +621,6 @@ main (void)\n   test6 ();\n   test7 ();\n   test8 (1);\n+  test9 ();\n   exit (0);\n }"}, {"sha": "d9f25397c71c5499f0921aec975ba2c284777310", "filename": "gcc/tree-object-size.cc", "status": "modified", "additions": 80, "deletions": 2, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5cfb9cac1d7aba9a8ea73bfe7922cfaff9d61f3/gcc%2Ftree-object-size.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5cfb9cac1d7aba9a8ea73bfe7922cfaff9d61f3/gcc%2Ftree-object-size.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-object-size.cc?ref=e5cfb9cac1d7aba9a8ea73bfe7922cfaff9d61f3", "patch": "@@ -89,6 +89,10 @@ static bitmap computed[OST_END];\n /* Maximum value of offset we consider to be addition.  */\n static unsigned HOST_WIDE_INT offset_limit;\n \n+/* Tell the generic SSA updater what kind of update is needed after the pass\n+   executes.  */\n+static unsigned todo;\n+\n /* Return true if VAL represents an initial size for OBJECT_SIZE_TYPE.  */\n \n static inline bool\n@@ -787,6 +791,71 @@ alloc_object_size (const gcall *call, int object_size_type)\n   return bytes ? bytes : size_unknown (object_size_type);\n }\n \n+/* Compute __builtin_object_size for CALL, which is a call to either\n+   BUILT_IN_STRDUP or BUILT_IN_STRNDUP; IS_STRNDUP indicates which it is.\n+   OBJECT_SIZE_TYPE is the second argument from __builtin_object_size.\n+   If unknown, return size_unknown (object_size_type).  */\n+\n+static tree\n+strdup_object_size (const gcall *call, int object_size_type, bool is_strndup)\n+{\n+  tree src = gimple_call_arg (call, 0);\n+  tree sz = size_unknown (object_size_type);\n+  tree n = NULL_TREE;\n+\n+  if (is_strndup)\n+    n = fold_build2 (PLUS_EXPR, sizetype, size_one_node,\n+\t\t     gimple_call_arg (call, 1));\n+  /* For strdup, simply emit strlen (SRC) + 1 and let the optimizer fold it the\n+     way it likes.  */\n+  else\n+    {\n+      tree strlen_fn = builtin_decl_implicit (BUILT_IN_STRLEN);\n+      if (strlen_fn)\n+\t{\n+\t  sz = fold_build2 (PLUS_EXPR, sizetype, size_one_node,\n+\t\t\t    build_call_expr (strlen_fn, 1, src));\n+\t  todo = TODO_update_ssa_only_virtuals;\n+\t}\n+    }\n+\n+  /* In all other cases, return the size of SRC since the object size cannot\n+     exceed that.  We cannot do this for OST_MINIMUM unless SRC points into a\n+     string constant since otherwise the object size could go all the way down\n+     to zero.  */\n+  if (!size_valid_p (sz, object_size_type)\n+       || size_unknown_p (sz, object_size_type))\n+    {\n+      tree wholesrc = NULL_TREE;\n+      if (TREE_CODE (src) == ADDR_EXPR)\n+\twholesrc = get_base_address (TREE_OPERAND (src, 0));\n+\n+      /* If the source points within a string constant, we try to get its\n+\t length.  */\n+      if (wholesrc && TREE_CODE (wholesrc) == STRING_CST)\n+\t{\n+\t  tree len = c_strlen (src, 0);\n+\t  if (len)\n+\t    sz = fold_build2 (PLUS_EXPR, sizetype, size_one_node, len);\n+\t}\n+\n+      /* For maximum estimate, our next best guess is the object size of the\n+\t source.  */\n+      if (size_unknown_p (sz, object_size_type)\n+\t  && !(object_size_type & OST_MINIMUM))\n+\tcompute_builtin_object_size (src, object_size_type, &sz);\n+    }\n+\n+  /* String duplication allocates at least one byte, so we should never fail\n+     for OST_MINIMUM.  */\n+  if ((!size_valid_p (sz, object_size_type)\n+       || size_unknown_p (sz, object_size_type))\n+      && (object_size_type & OST_MINIMUM))\n+    sz = size_one_node;\n+\n+  /* Factor in the N.  */\n+  return n ? fold_build2 (MIN_EXPR, sizetype, n, sz) : sz;\n+}\n \n /* If object size is propagated from one of function's arguments directly\n    to its return value, return that argument for GIMPLE_CALL statement CALL.\n@@ -1233,12 +1302,19 @@ call_object_size (struct object_size_info *osi, tree ptr, gcall *call)\n {\n   int object_size_type = osi->object_size_type;\n   unsigned int varno = SSA_NAME_VERSION (ptr);\n+  tree bytes = NULL_TREE;\n \n   gcc_assert (is_gimple_call (call));\n \n   gcc_assert (!object_sizes_unknown_p (object_size_type, varno));\n   gcc_assert (osi->pass == 0);\n-  tree bytes = alloc_object_size (call, object_size_type);\n+\n+  bool is_strdup = gimple_call_builtin_p (call, BUILT_IN_STRDUP);\n+  bool is_strndup = gimple_call_builtin_p (call, BUILT_IN_STRNDUP);\n+  if (is_strdup || is_strndup)\n+    bytes = strdup_object_size (call, object_size_type, is_strndup);\n+  else\n+    bytes = alloc_object_size (call, object_size_type);\n \n   if (!size_valid_p (bytes, object_size_type))\n     bytes = size_unknown (object_size_type);\n@@ -1998,6 +2074,8 @@ dynamic_object_sizes_execute_one (gimple_stmt_iterator *i, gimple *call)\n static unsigned int\n object_sizes_execute (function *fun, bool early)\n {\n+  todo = 0;\n+\n   basic_block bb;\n   FOR_EACH_BB_FN (bb, fun)\n     {\n@@ -2094,7 +2172,7 @@ object_sizes_execute (function *fun, bool early)\n     }\n \n   fini_object_sizes ();\n-  return 0;\n+  return todo;\n }\n \n /* Simple pass to optimize all __builtin_object_size () builtins.  */"}]}