{"sha": "82eaec4ab0dd5cb17c153df8fab62f54f3a260b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODJlYWVjNGFiMGRkNWNiMTdjMTUzZGY4ZmFiNjJmNTRmM2EyNjBiNQ==", "commit": {"author": {"name": "Torbjorn Granlund", "email": "tege@gnu.org", "date": "1995-12-14T23:15:26Z"}, "committer": {"name": "Torbjorn Granlund", "email": "tege@gnu.org", "date": "1995-12-14T23:15:26Z"}, "message": "(PREDICATE_CODES): Add logic_operand.\n\n(CONST_OK_FOR_LETTER_P): Handle `M'.\n(SHIFT_COUNT_TRUNCATED): Define as 0 as appropriate.\n\nFrom-SVN: r10725", "tree": {"sha": "bb8e2ac3e7310de17e862a5b0820682963ebf0f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb8e2ac3e7310de17e862a5b0820682963ebf0f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/82eaec4ab0dd5cb17c153df8fab62f54f3a260b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82eaec4ab0dd5cb17c153df8fab62f54f3a260b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82eaec4ab0dd5cb17c153df8fab62f54f3a260b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82eaec4ab0dd5cb17c153df8fab62f54f3a260b5/comments", "author": null, "committer": null, "parents": [{"sha": "5d17176fdc420b79323f52b415cbd0e7c133e38f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d17176fdc420b79323f52b415cbd0e7c133e38f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d17176fdc420b79323f52b415cbd0e7c133e38f"}], "stats": {"total": 8, "additions": 5, "deletions": 3}, "files": [{"sha": "c66f4a801f4883b1e7098c2ba012e43ec1ab6ca7", "filename": "gcc/config/i960/i960.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82eaec4ab0dd5cb17c153df8fab62f54f3a260b5/gcc%2Fconfig%2Fi960%2Fi960.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82eaec4ab0dd5cb17c153df8fab62f54f3a260b5/gcc%2Fconfig%2Fi960%2Fi960.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.h?ref=82eaec4ab0dd5cb17c153df8fab62f54f3a260b5", "patch": "@@ -651,8 +651,9 @@ enum reg_class { NO_REGS, GLOBAL_REGS, LOCAL_REGS, LOCAL_OR_GLOBAL_REGS,\n #define CONST_OK_FOR_LETTER_P(VALUE, C)  \t\t\t\t\\\n   ((C) == 'I' ? (((unsigned) (VALUE)) <= 31)\t\t\t\t\\\n    : (C) == 'J' ? ((VALUE) == 0)\t\t\t\t\t\\\n-      : (C) == 'K' ? ((VALUE) > -32 && (VALUE) <= 0)\t\t\t\\\n-\t: 0)\n+   : (C) == 'K' ? ((VALUE) >= -31 && (VALUE) <= 0)\t\t\t\\\n+   : (C) == 'M' ? ((VALUE) >= -32 && (VALUE) <= 0)\t\t\t\\\n+   : 0)\n \n /* Similar, but for floating constants, and defining letters G and H.\n    Here VALUE is the CONST_DOUBLE rtx itself.\n@@ -1104,7 +1105,7 @@ extern struct rtx_def *legitimize_address ();\n \n /* Define this to be nonzero if shift instructions ignore all but the low-order\n    few bits. */\n-#define SHIFT_COUNT_TRUNCATED 1\n+#define SHIFT_COUNT_TRUNCATED 0\n \n /* Value is 1 if truncating an integer of INPREC bits to OUTPREC bits\n    is done just by pretending it is already truncated.  */\n@@ -1502,6 +1503,7 @@ extern enum insn_types i960_last_insn_type;\n   {\"fpmove_src_operand\", {CONST_INT, CONST_DOUBLE, CONST, SYMBOL_REF,\t\\\n \t\t\t  LABEL_REF, SUBREG, REG, MEM}},\t\t\\\n   {\"arith_operand\", {SUBREG, REG, CONST_INT}},\t\t\t\t\\\n+  {\"logic_operand\", {SUBREG, REG, CONST_INT}},\t\t\t\t\\\n   {\"fp_arith_operand\", {SUBREG, REG, CONST_DOUBLE}},\t\t\t\\\n   {\"signed_arith_operand\", {SUBREG, REG, CONST_INT}},\t\t\t\\\n   {\"literal\", {CONST_INT}},\t\t\t\t\t\t\\"}]}