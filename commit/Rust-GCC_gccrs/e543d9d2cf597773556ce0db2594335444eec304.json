{"sha": "e543d9d2cf597773556ce0db2594335444eec304", "node_id": "C_kwDOANBUbNoAKGU1NDNkOWQyY2Y1OTc3NzM1NTZjZTBkYjI1OTQzMzU0NDRlZWMzMDQ", "commit": {"author": {"name": "Sebastian Huber", "email": "sebastian.huber@embedded-brains.de", "date": "2022-03-30T19:40:55Z"}, "committer": {"name": "Sebastian Huber", "email": "sebastian.huber@embedded-brains.de", "date": "2022-04-28T18:46:49Z"}, "message": "gcov-tool: Support file input from stdin\n\ngcc/\n\n\t* gcov-io.cc (GCOV_MODE_STDIN): Define.\n\t(gcov_position): For gcov-tool, return calculated position if file is\n\tstdin.\n\t(gcov_open):  For gcov-tool, use stdin if filename is NULL.\n\t(gcov_close): For gcov-tool, do not close stdin.\n\t(gcov_read_bytes): For gcov-tool, update position if file is stdin.\n\t(gcov_sync): For gcov-tool, discard input if file is stdin.", "tree": {"sha": "9fc6ae68925de13c8ee42671d56c9efae6a9ff1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9fc6ae68925de13c8ee42671d56c9efae6a9ff1e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e543d9d2cf597773556ce0db2594335444eec304", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e543d9d2cf597773556ce0db2594335444eec304", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e543d9d2cf597773556ce0db2594335444eec304", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e543d9d2cf597773556ce0db2594335444eec304/comments", "author": {"login": "sebhub", "id": 932056, "node_id": "MDQ6VXNlcjkzMjA1Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/932056?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebhub", "html_url": "https://github.com/sebhub", "followers_url": "https://api.github.com/users/sebhub/followers", "following_url": "https://api.github.com/users/sebhub/following{/other_user}", "gists_url": "https://api.github.com/users/sebhub/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebhub/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebhub/subscriptions", "organizations_url": "https://api.github.com/users/sebhub/orgs", "repos_url": "https://api.github.com/users/sebhub/repos", "events_url": "https://api.github.com/users/sebhub/events{/privacy}", "received_events_url": "https://api.github.com/users/sebhub/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sebhub", "id": 932056, "node_id": "MDQ6VXNlcjkzMjA1Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/932056?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebhub", "html_url": "https://github.com/sebhub", "followers_url": "https://api.github.com/users/sebhub/followers", "following_url": "https://api.github.com/users/sebhub/following{/other_user}", "gists_url": "https://api.github.com/users/sebhub/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebhub/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebhub/subscriptions", "organizations_url": "https://api.github.com/users/sebhub/orgs", "repos_url": "https://api.github.com/users/sebhub/repos", "events_url": "https://api.github.com/users/sebhub/events{/privacy}", "received_events_url": "https://api.github.com/users/sebhub/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39d80300b3c769c3a7805a46ee5facc6adf1a4d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39d80300b3c769c3a7805a46ee5facc6adf1a4d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39d80300b3c769c3a7805a46ee5facc6adf1a4d0"}], "stats": {"total": 38, "additions": 38, "deletions": 0}, "files": [{"sha": "7e1fb10b612ccb29beb16abed6ce991c627e54f0", "filename": "gcc/gcov-io.cc", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e543d9d2cf597773556ce0db2594335444eec304/gcc%2Fgcov-io.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e543d9d2cf597773556ce0db2594335444eec304/gcc%2Fgcov-io.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov-io.cc?ref=e543d9d2cf597773556ce0db2594335444eec304", "patch": "@@ -35,8 +35,13 @@ struct gcov_var\n   int error;\t\t\t/* < 0 overflow, > 0 disk error.  */\n   int mode;\t\t\t/* < 0 writing, > 0 reading.  */\n   int endian;\t\t\t/* Swap endianness.  */\n+#ifdef IN_GCOV_TOOL\n+  gcov_position_t pos;\t\t/* File position for stdin support.  */\n+#endif\n } gcov_var;\n \n+#define GCOV_MODE_STDIN 2\n+\n /* Save the current position in the gcov file.  */\n /* We need to expose this function when compiling for gcov-tool.  */\n #ifndef IN_GCOV_TOOL\n@@ -45,6 +50,10 @@ static inline\n gcov_position_t\n gcov_position (void)\n {\n+#ifdef IN_GCOV_TOOL\n+  if (gcov_var.mode == GCOV_MODE_STDIN)\n+    return gcov_var.pos;\n+#endif\n   return ftell (gcov_var.file);\n }\n \n@@ -108,6 +117,16 @@ gcov_open (const char *name, int mode)\n #if !IN_LIBGCOV || defined (IN_GCOV_TOOL)\n   gcov_var.endian = 0;\n #endif\n+#ifdef IN_GCOV_TOOL\n+  gcov_var.pos = 0;\n+  if (!name)\n+    {\n+      gcov_nonruntime_assert (gcov_var.mode > 0);\n+      gcov_var.file = stdin;\n+      gcov_var.mode = GCOV_MODE_STDIN;\n+      return 1;\n+    }\n+#endif\n #if GCOV_LOCKED\n   if (mode > 0)\n     {\n@@ -190,6 +209,11 @@ gcov_open (const char *name, int mode)\n GCOV_LINKAGE int\n gcov_close (void)\n {\n+#ifdef IN_GCOV_TOOL\n+  if (gcov_var.file == stdin)\n+    gcov_var.file = 0;\n+  else\n+#endif\n   if (gcov_var.file)\n     {\n       if (fclose (gcov_var.file))\n@@ -363,6 +387,9 @@ gcov_read_bytes (void *buffer, unsigned count)\n   if (read != 1)\n     return NULL;\n \n+#ifdef IN_GCOV_TOOL\n+  gcov_var.pos += count;\n+#endif\n   return buffer;\n }\n \n@@ -499,6 +526,17 @@ gcov_sync (gcov_position_t base, gcov_unsigned_t length)\n {\n   gcov_nonruntime_assert (gcov_var.mode > 0);\n   base += length;\n+#ifdef IN_GCOV_TOOL\n+  if (gcov_var.mode == GCOV_MODE_STDIN)\n+    {\n+      while (gcov_var.pos < base)\n+\t{\n+\t  ++gcov_var.pos;\n+\t  (void)fgetc (gcov_var.file);\n+\t}\n+      return;\n+    }\n+#endif\n   fseek (gcov_var.file, base, SEEK_SET);\n }\n #endif"}]}