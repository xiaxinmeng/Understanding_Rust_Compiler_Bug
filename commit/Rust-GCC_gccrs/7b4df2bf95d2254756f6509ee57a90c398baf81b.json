{"sha": "7b4df2bf95d2254756f6509ee57a90c398baf81b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2I0ZGYyYmY5NWQyMjU0NzU2ZjY1MDllZTU3YTkwYzM5OGJhZjgxYg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2018-01-03T07:18:13Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-01-03T07:18:13Z"}, "message": "poly_int: PUSH_ROUNDING\n\nPUSH_ROUNDING is difficult to convert to a hook since there is still\na lot of conditional code based on it.  It isn't clear that a direct\nconversion with checks for null hooks is the right thing to do.\n\nRather than untangle that, this patch converts all implementations\nthat do something to out-of-line functions that have the same\ninterface as a hook would have.  This should at least help towards\nany future hook conversion.\n\n2018-01-03  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* config/cr16/cr16-protos.h (cr16_push_rounding): Declare.\n\t* config/cr16/cr16.h (PUSH_ROUNDING): Move implementation to...\n\t* config/cr16/cr16.c (cr16_push_rounding): ...this new function.\n\t* config/h8300/h8300-protos.h (h8300_push_rounding): Declare.\n\t* config/h8300/h8300.h (PUSH_ROUNDING): Move implementation to...\n\t* config/h8300/h8300.c (h8300_push_rounding): ...this new function.\n\t* config/i386/i386-protos.h (ix86_push_rounding): Declare.\n\t* config/i386/i386.h (PUSH_ROUNDING): Move implementation to...\n\t* config/i386/i386.c (ix86_push_rounding): ...this new function.\n\t* config/m32c/m32c-protos.h (m32c_push_rounding): Take and return\n\ta poly_int64.\n\t* config/m32c/m32c.c (m32c_push_rounding): Likewise.\n\t* config/m68k/m68k-protos.h (m68k_push_rounding): Declare.\n\t* config/m68k/m68k.h (PUSH_ROUNDING): Move implementation to...\n\t* config/m68k/m68k.c (m68k_push_rounding): ...this new function.\n\t* config/pdp11/pdp11-protos.h (pdp11_push_rounding): Declare.\n\t* config/pdp11/pdp11.h (PUSH_ROUNDING): Move implementation to...\n\t* config/pdp11/pdp11.c (pdp11_push_rounding): ...this new function.\n\t* config/stormy16/stormy16-protos.h (xstormy16_push_rounding): Declare.\n\t* config/stormy16/stormy16.h (PUSH_ROUNDING): Move implementation to...\n\t* config/stormy16/stormy16.c (xstormy16_push_rounding): ...this new\n\tfunction.\n\t* expr.c (emit_move_resolve_push): Treat the input and result\n\tof PUSH_ROUNDING as a poly_int64.\n\t(emit_move_complex_push, emit_single_push_insn_1): Likewise.\n\t(emit_push_insn): Likewise.\n\t* lra-eliminations.c (mark_not_eliminable): Likewise.\n\t* recog.c (push_operand): Likewise.\n\t* reload1.c (elimination_effects): Likewise.\n\t* rtlanal.c (nonzero_bits1): Likewise.\n\t* calls.c (store_one_arg): Likewise.  Require the padding to be\n\tknown at compile time.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r256155", "tree": {"sha": "c05cbaa50ad24f72ed0785372d754691a8e79a2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c05cbaa50ad24f72ed0785372d754691a8e79a2b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b4df2bf95d2254756f6509ee57a90c398baf81b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b4df2bf95d2254756f6509ee57a90c398baf81b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b4df2bf95d2254756f6509ee57a90c398baf81b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b4df2bf95d2254756f6509ee57a90c398baf81b/comments", "author": null, "committer": null, "parents": [{"sha": "a930fe51508f431a97eaeb0f546d4b26b40dbfa1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a930fe51508f431a97eaeb0f546d4b26b40dbfa1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a930fe51508f431a97eaeb0f546d4b26b40dbfa1"}], "stats": {"total": 219, "additions": 151, "deletions": 68}, "files": [{"sha": "d9428fe63c6a0f8425467db27587ef7d97ec7c48", "filename": "gcc/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b4df2bf95d2254756f6509ee57a90c398baf81b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b4df2bf95d2254756f6509ee57a90c398baf81b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7b4df2bf95d2254756f6509ee57a90c398baf81b", "patch": "@@ -1,3 +1,40 @@\n+2018-01-03  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* config/cr16/cr16-protos.h (cr16_push_rounding): Declare.\n+\t* config/cr16/cr16.h (PUSH_ROUNDING): Move implementation to...\n+\t* config/cr16/cr16.c (cr16_push_rounding): ...this new function.\n+\t* config/h8300/h8300-protos.h (h8300_push_rounding): Declare.\n+\t* config/h8300/h8300.h (PUSH_ROUNDING): Move implementation to...\n+\t* config/h8300/h8300.c (h8300_push_rounding): ...this new function.\n+\t* config/i386/i386-protos.h (ix86_push_rounding): Declare.\n+\t* config/i386/i386.h (PUSH_ROUNDING): Move implementation to...\n+\t* config/i386/i386.c (ix86_push_rounding): ...this new function.\n+\t* config/m32c/m32c-protos.h (m32c_push_rounding): Take and return\n+\ta poly_int64.\n+\t* config/m32c/m32c.c (m32c_push_rounding): Likewise.\n+\t* config/m68k/m68k-protos.h (m68k_push_rounding): Declare.\n+\t* config/m68k/m68k.h (PUSH_ROUNDING): Move implementation to...\n+\t* config/m68k/m68k.c (m68k_push_rounding): ...this new function.\n+\t* config/pdp11/pdp11-protos.h (pdp11_push_rounding): Declare.\n+\t* config/pdp11/pdp11.h (PUSH_ROUNDING): Move implementation to...\n+\t* config/pdp11/pdp11.c (pdp11_push_rounding): ...this new function.\n+\t* config/stormy16/stormy16-protos.h (xstormy16_push_rounding): Declare.\n+\t* config/stormy16/stormy16.h (PUSH_ROUNDING): Move implementation to...\n+\t* config/stormy16/stormy16.c (xstormy16_push_rounding): ...this new\n+\tfunction.\n+\t* expr.c (emit_move_resolve_push): Treat the input and result\n+\tof PUSH_ROUNDING as a poly_int64.\n+\t(emit_move_complex_push, emit_single_push_insn_1): Likewise.\n+\t(emit_push_insn): Likewise.\n+\t* lra-eliminations.c (mark_not_eliminable): Likewise.\n+\t* recog.c (push_operand): Likewise.\n+\t* reload1.c (elimination_effects): Likewise.\n+\t* rtlanal.c (nonzero_bits1): Likewise.\n+\t* calls.c (store_one_arg): Likewise.  Require the padding to be\n+\tknown at compile time.\n+\n 2018-01-03  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "404cccc91366efaaeff4e4b8848d93913da86311", "filename": "gcc/calls.c", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b4df2bf95d2254756f6509ee57a90c398baf81b/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b4df2bf95d2254756f6509ee57a90c398baf81b/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=7b4df2bf95d2254756f6509ee57a90c398baf81b", "patch": "@@ -5639,7 +5639,6 @@ store_one_arg (struct arg_data *arg, rtx argblock, int flags,\n     ;\n   else if (arg->mode != BLKmode)\n     {\n-      int size;\n       unsigned int parm_align;\n \n       /* Argument is a scalar, not entirely passed in registers.\n@@ -5652,10 +5651,8 @@ store_one_arg (struct arg_data *arg, rtx argblock, int flags,\n \t Note that in C the default argument promotions\n \t will prevent such mismatches.  */\n \n-      if (TYPE_EMPTY_P (TREE_TYPE (pval)))\n-\tsize = 0;\n-      else\n-\tsize = GET_MODE_SIZE (arg->mode);\n+      poly_int64 size = (TYPE_EMPTY_P (TREE_TYPE (pval))\n+\t\t\t ? 0 : GET_MODE_SIZE (arg->mode));\n \n       /* Compute how much space the push instruction will push.\n \t On many machines, pushing a byte will advance the stack\n@@ -5669,9 +5666,10 @@ store_one_arg (struct arg_data *arg, rtx argblock, int flags,\n \t round up to a multiple of the alignment for arguments.  */\n       if (targetm.calls.function_arg_padding (arg->mode, TREE_TYPE (pval))\n \t  != PAD_NONE)\n-\tused = (((size + PARM_BOUNDARY / BITS_PER_UNIT - 1)\n-\t\t / (PARM_BOUNDARY / BITS_PER_UNIT))\n-\t\t* (PARM_BOUNDARY / BITS_PER_UNIT));\n+\t/* At the moment we don't (need to) support ABIs for which the\n+\t   padding isn't known at compile time.  In principle it should\n+\t   be easy to add though.  */\n+\tused = force_align_up (size, PARM_BOUNDARY / BITS_PER_UNIT);\n \n       /* Compute the alignment of the pushed argument.  */\n       parm_align = arg->locate.boundary;"}, {"sha": "886669092c5ec10e517c18383930620e17cdc256", "filename": "gcc/config/cr16/cr16-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b4df2bf95d2254756f6509ee57a90c398baf81b/gcc%2Fconfig%2Fcr16%2Fcr16-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b4df2bf95d2254756f6509ee57a90c398baf81b/gcc%2Fconfig%2Fcr16%2Fcr16-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcr16%2Fcr16-protos.h?ref=7b4df2bf95d2254756f6509ee57a90c398baf81b", "patch": "@@ -94,5 +94,6 @@ extern const char *cr16_emit_logical_di (rtx *, enum rtx_code);\n /* Handling the \"interrupt\" attribute.  */\n extern int cr16_interrupt_function_p (void);\n extern bool cr16_is_data_model (enum data_model_type);\n+extern poly_int64 cr16_push_rounding (poly_int64);\n \n #endif /* Not GCC_CR16_PROTOS_H.  */ "}, {"sha": "9ea02a967ff4e3db932541b6696a251f4cf49110", "filename": "gcc/config/cr16/cr16.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b4df2bf95d2254756f6509ee57a90c398baf81b/gcc%2Fconfig%2Fcr16%2Fcr16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b4df2bf95d2254756f6509ee57a90c398baf81b/gcc%2Fconfig%2Fcr16%2Fcr16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcr16%2Fcr16.c?ref=7b4df2bf95d2254756f6509ee57a90c398baf81b", "patch": "@@ -2215,6 +2215,14 @@ cr16_emit_logical_di (rtx *operands, enum rtx_code code)\n   return \"\";\n }\n \n+/* Implement PUSH_ROUNDING.  */\n+\n+poly_int64\n+cr16_push_rounding (poly_int64 bytes)\n+{\n+  return (bytes + 1) & ~1;\n+}\n+\n /* Initialize 'targetm' variable which contains pointers to functions \n    and data relating to the target machine.  */\n "}, {"sha": "692bbaf86d5fefbd207faf4bad05a63957cfc571", "filename": "gcc/config/cr16/cr16.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b4df2bf95d2254756f6509ee57a90c398baf81b/gcc%2Fconfig%2Fcr16%2Fcr16.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b4df2bf95d2254756f6509ee57a90c398baf81b/gcc%2Fconfig%2Fcr16%2Fcr16.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcr16%2Fcr16.h?ref=7b4df2bf95d2254756f6509ee57a90c398baf81b", "patch": "@@ -381,7 +381,7 @@ enum reg_class\n \n #define PUSH_ARGS 1\n \n-#define PUSH_ROUNDING(BYTES) (((BYTES) + 1) & ~1)\n+#define PUSH_ROUNDING(BYTES) cr16_push_rounding (BYTES)\n \n #ifndef CUMULATIVE_ARGS\n struct cumulative_args"}, {"sha": "1d4a574c7b9240012ea49f31c2751b3a6d3f9d78", "filename": "gcc/config/h8300/h8300-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b4df2bf95d2254756f6509ee57a90c398baf81b/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b4df2bf95d2254756f6509ee57a90c398baf81b/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h?ref=7b4df2bf95d2254756f6509ee57a90c398baf81b", "patch": "@@ -112,5 +112,6 @@ extern bool            h8sx_mergeable_memrefs_p (rtx, rtx);\n extern bool            h8sx_emit_movmd (rtx, rtx, rtx, HOST_WIDE_INT);\n extern void            h8300_swap_into_er6 (rtx);\n extern void            h8300_swap_out_of_er6 (rtx);\n+extern poly_int64      h8300_push_rounding (poly_int64);\n \n #endif /* ! GCC_H8300_PROTOS_H */"}, {"sha": "432e23e37ff0d9a6514feb6891047486cbbff478", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b4df2bf95d2254756f6509ee57a90c398baf81b/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b4df2bf95d2254756f6509ee57a90c398baf81b/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=7b4df2bf95d2254756f6509ee57a90c398baf81b", "patch": "@@ -6044,6 +6044,21 @@ h8300_trampoline_init (rtx m_tramp, tree fndecl, rtx cxt)\n       emit_move_insn (mem, tem);\n     }\n }\n+\n+/* Implement PUSH_ROUNDING.\n+\n+   On the H8/300, @-sp really pushes a byte if you ask it to - but that's\n+   dangerous, so we claim that it always pushes a word, then we catch\n+   the mov.b rx,@-sp and turn it into a mov.w rx,@-sp on output.\n+\n+   On the H8/300H, we simplify TARGET_QUICKCALL by setting this to 4\n+   and doing a similar thing.  */\n+\n+poly_int64\n+h8300_push_rounding (poly_int64 bytes)\n+{\n+  return ((bytes + PARM_BOUNDARY / 8 - 1) & (-PARM_BOUNDARY / 8));\n+}\n \f\n /* Initialize the GCC target structure.  */\n #undef TARGET_ATTRIBUTE_TABLE"}, {"sha": "a57e7b543e5ce59a1bbe91eadeaf9031df30c287", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b4df2bf95d2254756f6509ee57a90c398baf81b/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b4df2bf95d2254756f6509ee57a90c398baf81b/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=7b4df2bf95d2254756f6509ee57a90c398baf81b", "patch": "@@ -352,18 +352,7 @@ enum reg_class {\n \n #define FRAME_GROWS_DOWNWARD 1\n \n-/* If we generate an insn to push BYTES bytes,\n-   this says how many the stack pointer really advances by.\n-\n-   On the H8/300, @-sp really pushes a byte if you ask it to - but that's\n-   dangerous, so we claim that it always pushes a word, then we catch\n-   the mov.b rx,@-sp and turn it into a mov.w rx,@-sp on output.\n-\n-   On the H8/300H, we simplify TARGET_QUICKCALL by setting this to 4\n-   and doing a similar thing.  */\n-\n-#define PUSH_ROUNDING(BYTES) \\\n-  (((BYTES) + PARM_BOUNDARY / 8 - 1) & -PARM_BOUNDARY / 8)\n+#define PUSH_ROUNDING(BYTES) h8300_push_rounding (BYTES)\n \n /* Offset of first parameter from the argument pointer register value.  */\n /* Is equal to the size of the saved fp + pc, even if an fp isn't"}, {"sha": "d1b5330c351a2bb6191a1aafbeabff5c24f41e39", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b4df2bf95d2254756f6509ee57a90c398baf81b/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b4df2bf95d2254756f6509ee57a90c398baf81b/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=7b4df2bf95d2254756f6509ee57a90c398baf81b", "patch": "@@ -323,6 +323,8 @@ extern void ix86_core2i7_init_hooks (void);\n \n extern int ix86_atom_sched_reorder (FILE *, int, rtx_insn **, int *, int);\n \n+extern poly_int64 ix86_push_rounding (poly_int64);\n+\n #ifdef RTX_CODE\n /* Target data for multipass lookahead scheduling.\n    Currently used for Core 2/i7 tuning.  */"}, {"sha": "ff058f44542a2297645d5f4d7e52361c79100f36", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b4df2bf95d2254756f6509ee57a90c398baf81b/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b4df2bf95d2254756f6509ee57a90c398baf81b/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=7b4df2bf95d2254756f6509ee57a90c398baf81b", "patch": "@@ -49964,6 +49964,19 @@ ix86_excess_precision (enum excess_precision_type type)\n   return FLT_EVAL_METHOD_UNPREDICTABLE;\n }\n \n+/* Implement PUSH_ROUNDING.  On 386, we have pushw instruction that\n+   decrements by exactly 2 no matter what the position was, there is no pushb.\n+\n+   But as CIE data alignment factor on this arch is -4 for 32bit targets\n+   and -8 for 64bit targets, we need to make sure all stack pointer adjustments\n+   are in multiple of 4 for 32bit targets and 8 for 64bit targets.  */\n+\n+poly_int64\n+ix86_push_rounding (poly_int64 bytes)\n+{\n+  return ROUND_UP (bytes, UNITS_PER_WORD);\n+}\n+\n /* Target-specific selftests.  */\n \n #if CHECKING_P"}, {"sha": "8a17c0e17c4b5b2f4a131ed8b5a8d61218cfe8fa", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b4df2bf95d2254756f6509ee57a90c398baf81b/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b4df2bf95d2254756f6509ee57a90c398baf81b/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=7b4df2bf95d2254756f6509ee57a90c398baf81b", "patch": "@@ -1547,15 +1547,7 @@ enum reg_class\n    goes at a more negative offset in the frame.  */\n #define FRAME_GROWS_DOWNWARD 1\n \n-/* If we generate an insn to push BYTES bytes, this says how many the stack\n-   pointer really advances by.  On 386, we have pushw instruction that\n-   decrements by exactly 2 no matter what the position was, there is no pushb.\n-\n-   But as CIE data alignment factor on this arch is -4 for 32bit targets\n-   and -8 for 64bit targets, we need to make sure all stack pointer adjustments\n-   are in multiple of 4 for 32bit targets and 8 for 64bit targets.  */\n-\n-#define PUSH_ROUNDING(BYTES) ROUND_UP ((BYTES), UNITS_PER_WORD)\n+#define PUSH_ROUNDING(BYTES) ix86_push_rounding (BYTES)\n \n /* If defined, the maximum amount of space required for outgoing arguments\n    will be computed and placed into the variable `crtl->outgoing_args_size'."}, {"sha": "f68d3b3185d006235f21cf8e8380c49a046a5c32", "filename": "gcc/config/m32c/m32c-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b4df2bf95d2254756f6509ee57a90c398baf81b/gcc%2Fconfig%2Fm32c%2Fm32c-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b4df2bf95d2254756f6509ee57a90c398baf81b/gcc%2Fconfig%2Fm32c%2Fm32c-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c-protos.h?ref=7b4df2bf95d2254756f6509ee57a90c398baf81b", "patch": "@@ -29,7 +29,7 @@ void m32c_init_expanders (void);\n int  m32c_initial_elimination_offset (int, int);\n void m32c_output_reg_pop (FILE *, int);\n void m32c_output_reg_push (FILE *, int);\n-unsigned int  m32c_push_rounding (int);\n+poly_int64 m32c_push_rounding (poly_int64);\n void m32c_register_pragmas (void);\n void m32c_note_pragma_address (const char *, unsigned);\n int  m32c_regno_ok_for_base_p (int);"}, {"sha": "d8f69ee8ed9fb4472a85dbd8b92e6c1dc766e745", "filename": "gcc/config/m32c/m32c.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b4df2bf95d2254756f6509ee57a90c398baf81b/gcc%2Fconfig%2Fm32c%2Fm32c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b4df2bf95d2254756f6509ee57a90c398baf81b/gcc%2Fconfig%2Fm32c%2Fm32c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c.c?ref=7b4df2bf95d2254756f6509ee57a90c398baf81b", "patch": "@@ -1290,8 +1290,8 @@ m32c_initial_elimination_offset (int from, int to)\n \n /* Implements PUSH_ROUNDING.  The R8C and M16C have byte stacks, the\n    M32C has word stacks.  */\n-unsigned int\n-m32c_push_rounding (int n)\n+poly_int64\n+m32c_push_rounding (poly_int64 n)\n {\n   if (TARGET_R8C || TARGET_M16C)\n     return n;"}, {"sha": "3c285a98fe28284bba8033393a36c00ae6a16079", "filename": "gcc/config/m68k/m68k-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b4df2bf95d2254756f6509ee57a90c398baf81b/gcc%2Fconfig%2Fm68k%2Fm68k-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b4df2bf95d2254756f6509ee57a90c398baf81b/gcc%2Fconfig%2Fm68k%2Fm68k-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k-protos.h?ref=7b4df2bf95d2254756f6509ee57a90c398baf81b", "patch": "@@ -99,3 +99,4 @@ extern void init_68881_table (void);\n extern rtx m68k_legitimize_call_address (rtx);\n extern rtx m68k_legitimize_sibcall_address (rtx);\n extern int m68k_hard_regno_rename_ok(unsigned int, unsigned int);\n+extern poly_int64 m68k_push_rounding (poly_int64);"}, {"sha": "1c6484e8fec2981de2b5cc65b58500e1fb3042d4", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b4df2bf95d2254756f6509ee57a90c398baf81b/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b4df2bf95d2254756f6509ee57a90c398baf81b/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=7b4df2bf95d2254756f6509ee57a90c398baf81b", "patch": "@@ -6610,4 +6610,15 @@ m68k_excess_precision (enum excess_precision_type type)\n   return FLT_EVAL_METHOD_UNPREDICTABLE;\n }\n \n+/* Implement PUSH_ROUNDING.  On the 680x0, sp@- in a byte insn really pushes\n+   a word.  On the ColdFire, sp@- in a byte insn pushes just a byte.  */\n+\n+poly_int64\n+m68k_push_rounding (poly_int64 bytes)\n+{\n+  if (TARGET_COLDFIRE)\n+    return bytes;\n+  return (bytes + 1) & ~1;\n+}\n+\n #include \"gt-m68k.h\""}, {"sha": "8eb898e6eba91f84119fe42732b08ac7ab8590e4", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b4df2bf95d2254756f6509ee57a90c398baf81b/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b4df2bf95d2254756f6509ee57a90c398baf81b/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=7b4df2bf95d2254756f6509ee57a90c398baf81b", "patch": "@@ -468,9 +468,7 @@ extern enum reg_class regno_reg_class[];\n #define STACK_GROWS_DOWNWARD 1\n #define FRAME_GROWS_DOWNWARD 1\n \n-/* On the 680x0, sp@- in a byte insn really pushes a word.\n-   On the ColdFire, sp@- in a byte insn pushes just a byte.  */\n-#define PUSH_ROUNDING(BYTES) (TARGET_COLDFIRE ? BYTES : ((BYTES) + 1) & ~1)\n+#define PUSH_ROUNDING(BYTES) m68k_push_rounding (BYTES)\n \n #define FIRST_PARM_OFFSET(FNDECL) 8\n "}, {"sha": "467b0d87a0a0f07a25e3956280dddaf33056579c", "filename": "gcc/config/pdp11/pdp11-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b4df2bf95d2254756f6509ee57a90c398baf81b/gcc%2Fconfig%2Fpdp11%2Fpdp11-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b4df2bf95d2254756f6509ee57a90c398baf81b/gcc%2Fconfig%2Fpdp11%2Fpdp11-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11-protos.h?ref=7b4df2bf95d2254756f6509ee57a90c398baf81b", "patch": "@@ -44,3 +44,4 @@ extern void pdp11_asm_output_var (FILE *, const char *, int, int, bool);\n extern void pdp11_expand_prologue (void);\n extern void pdp11_expand_epilogue (void);\n extern int pdp11_branch_cost (void);\n+extern poly_int64 pdp11_push_rounding (poly_int64);"}, {"sha": "1367a072b1be2851dbc08005d79589818dc2c47f", "filename": "gcc/config/pdp11/pdp11.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b4df2bf95d2254756f6509ee57a90c398baf81b/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b4df2bf95d2254756f6509ee57a90c398baf81b/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.c?ref=7b4df2bf95d2254756f6509ee57a90c398baf81b", "patch": "@@ -1977,4 +1977,13 @@ pdp11_modes_tieable_p (machine_mode, machine_mode)\n   return false;\n }\n \n+/* Implement PUSH_ROUNDING.  On the pdp11, the stack is on an even\n+   boundary.  */\n+\n+poly_int64\n+pdp11_push_rounding (poly_int64 bytes)\n+{\n+  return (bytes + 1) & ~1;\n+}\n+\n struct gcc_target targetm = TARGET_INITIALIZER;"}, {"sha": "5ccec18e91ac60a73ceb07bbaa53ab5114c8eb94", "filename": "gcc/config/pdp11/pdp11.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b4df2bf95d2254756f6509ee57a90c398baf81b/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b4df2bf95d2254756f6509ee57a90c398baf81b/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.h?ref=7b4df2bf95d2254756f6509ee57a90c398baf81b", "patch": "@@ -257,10 +257,7 @@ enum reg_class { NO_REGS, MUL_REGS, GENERAL_REGS, LOAD_FPU_REGS, NO_LOAD_FPU_REG\n */\n #define FRAME_GROWS_DOWNWARD 1\n \n-/* If we generate an insn to push BYTES bytes,\n-   this says how many the stack pointer really advances by.\n-   On the pdp11, the stack is on an even boundary */\n-#define PUSH_ROUNDING(BYTES) ((BYTES + 1) & ~1)\n+#define PUSH_ROUNDING(BYTES) pdp11_push_rounding (BYTES)\n \n /* current_first_parm_offset stores the # of registers pushed on the \n    stack */"}, {"sha": "c4ce1145c21b0098cc2a74d5311f57dea695d8ab", "filename": "gcc/config/stormy16/stormy16-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b4df2bf95d2254756f6509ee57a90c398baf81b/gcc%2Fconfig%2Fstormy16%2Fstormy16-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b4df2bf95d2254756f6509ee57a90c398baf81b/gcc%2Fconfig%2Fstormy16%2Fstormy16-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16-protos.h?ref=7b4df2bf95d2254756f6509ee57a90c398baf81b", "patch": "@@ -28,6 +28,7 @@ extern int direct_return (void);\n extern int xstormy16_interrupt_function_p (void);\n extern int xstormy16_epilogue_uses (int);\n extern void xstormy16_function_profiler (void);\n+extern poly_int64 xstormy16_push_rounding (poly_int64);\n \n #if defined (TREE_CODE)\n extern void xstormy16_asm_output_aligned_common (FILE *, tree, const char *,"}, {"sha": "002eeee8f8ceb0d94aeb014326c56e32dea0c9ef", "filename": "gcc/config/stormy16/stormy16.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b4df2bf95d2254756f6509ee57a90c398baf81b/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b4df2bf95d2254756f6509ee57a90c398baf81b/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.c?ref=7b4df2bf95d2254756f6509ee57a90c398baf81b", "patch": "@@ -2635,6 +2635,14 @@ xstormy16_modes_tieable_p (machine_mode mode1, machine_mode mode2)\n {\n   return mode1 != BImode && mode2 != BImode;\n }\n+\n+/* Implement PUSH_ROUNDING.  */\n+\n+poly_int64\n+xstormy16_push_rounding (poly_int64 bytes)\n+{\n+  return (bytes + 1) & ~1;\n+}\n \f\n #undef  TARGET_ASM_ALIGNED_HI_OP\n #define TARGET_ASM_ALIGNED_HI_OP \"\\t.hword\\t\""}, {"sha": "dfc659c2e983fc68cd245bd24ab6f04e6bd1c9f7", "filename": "gcc/config/stormy16/stormy16.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b4df2bf95d2254756f6509ee57a90c398baf81b/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b4df2bf95d2254756f6509ee57a90c398baf81b/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.h?ref=7b4df2bf95d2254756f6509ee57a90c398baf81b", "patch": "@@ -255,7 +255,7 @@ enum reg_class\n \f\n /* Passing Function Arguments on the Stack.  */\n \n-#define PUSH_ROUNDING(BYTES) (((BYTES) + 1) & ~1)\n+#define PUSH_ROUNDING(BYTES) xstormy16_push_rounding (BYTES)\n \n \f\n /* Function Arguments in Registers.  */"}, {"sha": "580ec4868c04da262534301f55e55f5f83d757fa", "filename": "gcc/expr.c", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b4df2bf95d2254756f6509ee57a90c398baf81b/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b4df2bf95d2254756f6509ee57a90c398baf81b/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=7b4df2bf95d2254756f6509ee57a90c398baf81b", "patch": "@@ -3347,10 +3347,9 @@ rtx\n emit_move_resolve_push (machine_mode mode, rtx x)\n {\n   enum rtx_code code = GET_CODE (XEXP (x, 0));\n-  HOST_WIDE_INT adjust;\n   rtx temp;\n \n-  adjust = GET_MODE_SIZE (mode);\n+  poly_int64 adjust = GET_MODE_SIZE (mode);\n #ifdef PUSH_ROUNDING\n   adjust = PUSH_ROUNDING (adjust);\n #endif\n@@ -3359,14 +3358,12 @@ emit_move_resolve_push (machine_mode mode, rtx x)\n   else if (code == PRE_MODIFY || code == POST_MODIFY)\n     {\n       rtx expr = XEXP (XEXP (x, 0), 1);\n-      HOST_WIDE_INT val;\n \n       gcc_assert (GET_CODE (expr) == PLUS || GET_CODE (expr) == MINUS);\n-      gcc_assert (CONST_INT_P (XEXP (expr, 1)));\n-      val = INTVAL (XEXP (expr, 1));\n+      poly_int64 val = rtx_to_poly_int64 (XEXP (expr, 1));\n       if (GET_CODE (expr) == MINUS)\n \tval = -val;\n-      gcc_assert (adjust == val || adjust == -val);\n+      gcc_assert (known_eq (adjust, val) || known_eq (adjust, -val));\n       adjust = val;\n     }\n \n@@ -3408,11 +3405,11 @@ emit_move_complex_push (machine_mode mode, rtx x, rtx y)\n   bool imag_first;\n \n #ifdef PUSH_ROUNDING\n-  unsigned int submodesize = GET_MODE_SIZE (submode);\n+  poly_int64 submodesize = GET_MODE_SIZE (submode);\n \n   /* In case we output to the stack, but the size is smaller than the\n      machine can push exactly, we need to use move instructions.  */\n-  if (PUSH_ROUNDING (submodesize) != submodesize)\n+  if (maybe_ne (PUSH_ROUNDING (submodesize), submodesize))\n     {\n       x = emit_move_resolve_push (mode, x);\n       return emit_move_insn (x, y);\n@@ -4132,7 +4129,7 @@ static void\n emit_single_push_insn_1 (machine_mode mode, rtx x, tree type)\n {\n   rtx dest_addr;\n-  unsigned rounded_size = PUSH_ROUNDING (GET_MODE_SIZE (mode));\n+  poly_int64 rounded_size = PUSH_ROUNDING (GET_MODE_SIZE (mode));\n   rtx dest;\n   enum insn_code icode;\n \n@@ -4147,7 +4144,7 @@ emit_single_push_insn_1 (machine_mode mode, rtx x, tree type)\n       if (maybe_expand_insn (icode, 1, ops))\n \treturn;\n     }\n-  if (GET_MODE_SIZE (mode) == rounded_size)\n+  if (known_eq (GET_MODE_SIZE (mode), rounded_size))\n     dest_addr = gen_rtx_fmt_e (STACK_PUSH_CODE, Pmode, stack_pointer_rtx);\n   /* If we are to pad downward, adjust the stack pointer first and\n      then store X into the stack location using an offset.  This is\n@@ -4375,9 +4372,9 @@ emit_push_insn (rtx x, machine_mode mode, tree type, rtx size,\n \t     and such small pushes do rounding that causes trouble.  */\n \t  && ((!targetm.slow_unaligned_access (word_mode, align))\n \t      || align >= BIGGEST_ALIGNMENT\n-\t      || (PUSH_ROUNDING (align / BITS_PER_UNIT)\n-\t\t  == (align / BITS_PER_UNIT)))\n-\t  && (HOST_WIDE_INT) PUSH_ROUNDING (INTVAL (size)) == INTVAL (size))\n+\t      || known_eq (PUSH_ROUNDING (align / BITS_PER_UNIT),\n+\t\t\t   align / BITS_PER_UNIT))\n+\t  && known_eq (PUSH_ROUNDING (INTVAL (size)), INTVAL (size)))\n \t{\n \t  /* Push padding now if padding above and stack grows down,\n \t     or if padding below and stack grows up."}, {"sha": "a4437809431eb38f906f9b04458ffc0511c33bc6", "filename": "gcc/lra-eliminations.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b4df2bf95d2254756f6509ee57a90c398baf81b/gcc%2Flra-eliminations.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b4df2bf95d2254756f6509ee57a90c398baf81b/gcc%2Flra-eliminations.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-eliminations.c?ref=7b4df2bf95d2254756f6509ee57a90c398baf81b", "patch": "@@ -748,7 +748,7 @@ mark_not_eliminable (rtx x, machine_mode mem_mode)\n \t\t  && XEXP (x, 0) == XEXP (XEXP (x, 1), 0)\n \t\t  && poly_int_rtx_p (XEXP (XEXP (x, 1), 1), &offset))))\n \t{\n-\t  int size = GET_MODE_SIZE (mem_mode);\n+\t  poly_int64 size = GET_MODE_SIZE (mem_mode);\n \t  \n #ifdef PUSH_ROUNDING\n \t  /* If more bytes than MEM_MODE are pushed, account for"}, {"sha": "43e8781099f5b6b739e6299c8cceb20cc888a2a1", "filename": "gcc/recog.c", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b4df2bf95d2254756f6509ee57a90c398baf81b/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b4df2bf95d2254756f6509ee57a90c398baf81b/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=7b4df2bf95d2254756f6509ee57a90c398baf81b", "patch": "@@ -1258,33 +1258,35 @@ nonmemory_operand (rtx op, machine_mode mode)\n int\n push_operand (rtx op, machine_mode mode)\n {\n-  unsigned int rounded_size = GET_MODE_SIZE (mode);\n-\n-#ifdef PUSH_ROUNDING\n-  rounded_size = PUSH_ROUNDING (rounded_size);\n-#endif\n-\n   if (!MEM_P (op))\n     return 0;\n \n   if (mode != VOIDmode && GET_MODE (op) != mode)\n     return 0;\n \n+  poly_int64 rounded_size = GET_MODE_SIZE (mode);\n+\n+#ifdef PUSH_ROUNDING\n+  rounded_size = PUSH_ROUNDING (MACRO_INT (rounded_size));\n+#endif\n+\n   op = XEXP (op, 0);\n \n-  if (rounded_size == GET_MODE_SIZE (mode))\n+  if (known_eq (rounded_size, GET_MODE_SIZE (mode)))\n     {\n       if (GET_CODE (op) != STACK_PUSH_CODE)\n \treturn 0;\n     }\n   else\n     {\n+      poly_int64 offset;\n       if (GET_CODE (op) != PRE_MODIFY\n \t  || GET_CODE (XEXP (op, 1)) != PLUS\n \t  || XEXP (XEXP (op, 1), 0) != XEXP (op, 0)\n-\t  || !CONST_INT_P (XEXP (XEXP (op, 1), 1))\n-\t  || INTVAL (XEXP (XEXP (op, 1), 1))\n-\t     != ((STACK_GROWS_DOWNWARD ? -1 : 1) * (int) rounded_size))\n+\t  || !poly_int_rtx_p (XEXP (XEXP (op, 1), 1), &offset)\n+\t  || (STACK_GROWS_DOWNWARD\n+\t      ? maybe_ne (offset, -rounded_size)\n+\t      : maybe_ne (offset, rounded_size)))\n \treturn 0;\n     }\n "}, {"sha": "a1dcf421878a7690ad7483de9c1dc2afa51def11", "filename": "gcc/reload1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b4df2bf95d2254756f6509ee57a90c398baf81b/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b4df2bf95d2254756f6509ee57a90c398baf81b/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=7b4df2bf95d2254756f6509ee57a90c398baf81b", "patch": "@@ -2996,7 +2996,7 @@ elimination_effects (rtx x, machine_mode mem_mode)\n       for (ep = reg_eliminate; ep < &reg_eliminate[NUM_ELIMINABLE_REGS]; ep++)\n \tif (ep->to_rtx == XEXP (x, 0))\n \t  {\n-\t    int size = GET_MODE_SIZE (mem_mode);\n+\t    poly_int64 size = GET_MODE_SIZE (mem_mode);\n \n \t    /* If more bytes than MEM_MODE are pushed, account for them.  */\n #ifdef PUSH_ROUNDING"}, {"sha": "62350972e2b570b362f7e94cbb6c0ab56f3debda", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b4df2bf95d2254756f6509ee57a90c398baf81b/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b4df2bf95d2254756f6509ee57a90c398baf81b/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=7b4df2bf95d2254756f6509ee57a90c398baf81b", "patch": "@@ -4518,8 +4518,10 @@ nonzero_bits1 (const_rtx x, scalar_int_mode mode, const_rtx known_x,\n \t     stack to be momentarily aligned only to that amount,\n \t     so we pick the least alignment.  */\n \t  if (x == stack_pointer_rtx && PUSH_ARGS)\n-\t    alignment = MIN ((unsigned HOST_WIDE_INT) PUSH_ROUNDING (1),\n-\t\t\t     alignment);\n+\t    {\n+\t      poly_uint64 rounded_1 = PUSH_ROUNDING (poly_int64 (1));\n+\t      alignment = MIN (known_alignment (rounded_1), alignment);\n+\t    }\n #endif\n \n \t  nonzero &= ~(alignment - 1);"}]}