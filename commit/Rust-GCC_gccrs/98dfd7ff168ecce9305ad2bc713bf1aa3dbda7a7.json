{"sha": "98dfd7ff168ecce9305ad2bc713bf1aa3dbda7a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OThkZmQ3ZmYxNjhlY2NlOTMwNWFkMmJjNzEzYmYxYWEzZGJkYTdhNw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-01-21T21:58:09Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-01-21T21:58:09Z"}, "message": "runtime: Make builtin print exactly match gc builtin print.\n\nFrom-SVN: r183378", "tree": {"sha": "f00c47026446ae7a59a02e381565d670a46b73ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f00c47026446ae7a59a02e381565d670a46b73ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/98dfd7ff168ecce9305ad2bc713bf1aa3dbda7a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98dfd7ff168ecce9305ad2bc713bf1aa3dbda7a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98dfd7ff168ecce9305ad2bc713bf1aa3dbda7a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98dfd7ff168ecce9305ad2bc713bf1aa3dbda7a7/comments", "author": null, "committer": null, "parents": [{"sha": "f6392e8fff3dace6f4500f99315f27c26ffe70b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6392e8fff3dace6f4500f99315f27c26ffe70b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6392e8fff3dace6f4500f99315f27c26ffe70b9"}], "stats": {"total": 97, "additions": 87, "deletions": 10}, "files": [{"sha": "e4981c042dff97c5a315b780eb760eaed1b8e451", "filename": "libgo/runtime/go-print.c", "status": "modified", "additions": 87, "deletions": 10, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98dfd7ff168ecce9305ad2bc713bf1aa3dbda7a7/libgo%2Fruntime%2Fgo-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98dfd7ff168ecce9305ad2bc713bf1aa3dbda7a7/libgo%2Fruntime%2Fgo-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-print.c?ref=98dfd7ff168ecce9305ad2bc713bf1aa3dbda7a7", "patch": "@@ -4,6 +4,7 @@\n    Use of this source code is governed by a BSD-style\n    license that can be found in the LICENSE file.  */\n \n+#include <math.h>\n #include <stdint.h>\n #include <stdio.h>\n \n@@ -46,20 +47,95 @@ __go_print_int64 (int64_t val)\n }\n \n void\n-__go_print_double (double val)\n+__go_print_double (double v)\n {\n-  fprintf (stderr, \"%.24g\", val);\n+  char buf[20];\n+  int e, s, i, n;\n+  double h;\n+\n+  if (isnan (v))\n+    {\n+      fputs (\"NaN\", stderr);\n+      return;\n+    }\n+  if (isinf (v))\n+    {\n+      putc (v < 0 ? '-' : '+', stderr);\n+      fputs (\"Inf\", stderr);\n+      return;\n+    }\n+\n+  /* The number of digits printed.  */\n+  n = 7;\n+  /* The exponent.  */\n+  e = 0;\n+  /* The sign.  */\n+  s = 0;\n+  if (v != 0)\n+    {\n+      if (v < 0)\n+\t{\n+\t  v = -v;\n+\t  s = 1;\n+\t}\n+\n+      /* Normalize.  */\n+      while (v >= 10)\n+\t{\n+\t  ++e;\n+\t  v /= 10;\n+\t}\n+      while (v < 1)\n+\t{\n+\t  --e;\n+\t  v *= 10;\n+\t}\n+\n+      /* Round.  */\n+      h = 5;\n+      for (i = 0; i < n; ++i)\n+\th /= 10;\n+\n+      v += h;\n+      if (v >= 10)\n+\t{\n+\t  ++e;\n+\t  v /= 10;\n+\t}\n+    }\n+\n+  /* The format is +d.dddd+edd.  */\n+  buf[0] = s ? '-' : '+';\n+  for (i = 0; i < n; ++i)\n+    {\n+      int d;\n+\n+      d = v;\n+      buf[i + 2] = d + '0';\n+      v -= d;\n+      v *= 10;\n+    }\n+  buf[1] = buf[2];\n+  buf[2] = '.';\n+\n+  buf[n + 2] = 'e';\n+  buf[n + 3] = e < 0 ? '-' : '+';\n+  if (e < 0)\n+    e = - e;\n+  buf[n + 4] = e / 100 + '0';\n+  buf[n + 5] = (e / 10) % 10 + '0';\n+  buf[n + 6] = e % 10 + '0';\n+  buf[n + 7] = '\\0';\n+  fputs (buf, stderr);\n }\n \n void\n __go_print_complex (__complex double val)\n {\n-  fprintf (stderr, \"(%.24g%s%.24gi)\",\n-\t  __builtin_creal (val),\n-\t  (__builtin_cimag (val) >= 0 || __builtin_isnan (__builtin_cimag(val))\n-\t   ? \"+\"\n-\t   : \"\"),\n-\t  __builtin_cimag (val));\n+  putc ('(', stderr);\n+  __go_print_double (__builtin_creal (val));\n+  __go_print_double (__builtin_cimag (val));\n+  fputs (\"i)\", stderr);\n }\n \n void\n@@ -71,7 +147,7 @@ __go_print_bool (_Bool val)\n void\n __go_print_pointer (void *val)\n {\n-  fprintf (stderr, \"%p\", val);\n+  fprintf (stderr, \"0x%lx\", (unsigned long) (uintptr_t) val);\n }\n \n void\n@@ -89,5 +165,6 @@ __go_print_interface (struct __go_interface i)\n void\n __go_print_slice (struct __go_open_array val)\n {\n-  fprintf (stderr, \"[%d/%d]%p\", val.__count, val.__capacity, val.__values);\n+  fprintf (stderr, \"[%d/%d]\", val.__count, val.__capacity);\n+  __go_print_pointer (val.__values);\n }"}]}