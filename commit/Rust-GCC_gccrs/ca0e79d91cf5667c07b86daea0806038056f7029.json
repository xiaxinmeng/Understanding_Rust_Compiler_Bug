{"sha": "ca0e79d91cf5667c07b86daea0806038056f7029", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2EwZTc5ZDkxY2Y1NjY3YzA3Yjg2ZGFlYTA4MDYwMzgwNTZmNzAyOQ==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@bigpond.net.au", "date": "2006-03-31T01:25:35Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2006-03-31T01:25:35Z"}, "message": "re PR target/26459 (gcc fails to build on powerpc e500-double targets)\n\n\tPR target/26459\n\t* config/rs6000/rs6000.h (CANNOT_CHANGE_MODE_CLASS): Limit 2003-12-08\n\tchange to FLOAT_REGS.\n\nFrom-SVN: r112561", "tree": {"sha": "d37937aae1f538de9f6a1b3926e4a2b8402425d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d37937aae1f538de9f6a1b3926e4a2b8402425d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca0e79d91cf5667c07b86daea0806038056f7029", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca0e79d91cf5667c07b86daea0806038056f7029", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca0e79d91cf5667c07b86daea0806038056f7029", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca0e79d91cf5667c07b86daea0806038056f7029/comments", "author": null, "committer": null, "parents": [{"sha": "264364930785b7f8a6cce1dcbe375f7010ce1e9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/264364930785b7f8a6cce1dcbe375f7010ce1e9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/264364930785b7f8a6cce1dcbe375f7010ce1e9b"}], "stats": {"total": 33, "additions": 17, "deletions": 16}, "files": [{"sha": "706f5921d5f1b220587a1fa559926a0edeea6ffe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca0e79d91cf5667c07b86daea0806038056f7029/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca0e79d91cf5667c07b86daea0806038056f7029/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ca0e79d91cf5667c07b86daea0806038056f7029", "patch": "@@ -1,5 +1,9 @@\n 2006-03-31  Alan Modra  <amodra@bigpond.net.au>\n \n+\tPR target/26459\n+\t* config/rs6000/rs6000.h (CANNOT_CHANGE_MODE_CLASS): Limit 2003-12-08\n+\tchange to FLOAT_REGS.\n+\n \t* config/rs6000/rs6000.c (rs6000_explicit_options): Add ieee.\n \t(rs6000_override_options): Use it.\n \t(rs6000_handle_option): Set it.  Set rs6000_explicit_options.abi"}, {"sha": "75ff4a66cd6c4f32a9b6652382bcf31ca6d97ec6", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca0e79d91cf5667c07b86daea0806038056f7029/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca0e79d91cf5667c07b86daea0806038056f7029/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=ca0e79d91cf5667c07b86daea0806038056f7029", "patch": "@@ -1112,22 +1112,19 @@ enum reg_class\n   ? 1                                                                   \\\n   : ((GET_MODE_SIZE (MODE) + UNITS_PER_WORD - 1) / UNITS_PER_WORD))\n \n-\n-/* Return a class of registers that cannot change FROM mode to TO mode.  */\n-\n-#define CANNOT_CHANGE_MODE_CLASS(FROM, TO, CLASS)\t\t\t  \\\n-  (!TARGET_IEEEQUAD\t\t\t\t\t\t\t  \\\n-   && GET_MODE_SIZE (FROM) >= 8 && GET_MODE_SIZE (TO) >= 8\t\t  \\\n-   ? 0\t\t\t\t\t\t\t\t\t  \\\n-   : GET_MODE_SIZE (FROM) != GET_MODE_SIZE (TO)\t\t\t\t  \\\n-   ? reg_classes_intersect_p (FLOAT_REGS, CLASS)\t\t\t  \\\n-   : (TARGET_E500_DOUBLE && (((TO) == DFmode) + ((FROM) == DFmode)) == 1) \\\n-   ? reg_classes_intersect_p (GENERAL_REGS, CLASS)\t\t\t  \\\n-   : (TARGET_E500_DOUBLE && (((TO) == DImode) + ((FROM) == DImode)) == 1) \\\n-   ? reg_classes_intersect_p (GENERAL_REGS, CLASS)\t\t\t  \\\n-   : (TARGET_SPE && (SPE_VECTOR_MODE (FROM) + SPE_VECTOR_MODE (TO)) == 1) \\\n-   ? reg_classes_intersect_p (GENERAL_REGS, CLASS)\t\t\t  \\\n-   : 0)\n+/* Return nonzero if for CLASS a mode change from FROM to TO is invalid.  */\n+\n+#define CANNOT_CHANGE_MODE_CLASS(FROM, TO, CLASS)\t\t\t\\\n+  (GET_MODE_SIZE (FROM) != GET_MODE_SIZE (TO)\t\t\t\t\\\n+   ? ((GET_MODE_SIZE (FROM) < 8 || GET_MODE_SIZE (TO) < 8\t\t\\\n+       || TARGET_IEEEQUAD)\t\t\t\t\t\t\\\n+      && reg_classes_intersect_p (FLOAT_REGS, CLASS))\t\t\t\\\n+   : (((TARGET_E500_DOUBLE\t\t\t\t\t\t\\\n+\t&& ((((TO) == DFmode) + ((FROM) == DFmode)) == 1\t\t\\\n+\t    || (((TO) == DImode) + ((FROM) == DImode)) == 1))\t\t\\\n+       || (TARGET_SPE\t\t\t\t\t\t\t\\\n+\t   && (SPE_VECTOR_MODE (FROM) + SPE_VECTOR_MODE (TO)) == 1))\t\\\n+      && reg_classes_intersect_p (GENERAL_REGS, CLASS)))\n \n /* Stack layout; function entry, exit and calling.  */\n "}]}