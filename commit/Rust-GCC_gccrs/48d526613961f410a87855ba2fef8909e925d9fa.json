{"sha": "48d526613961f410a87855ba2fef8909e925d9fa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDhkNTI2NjEzOTYxZjQxMGE4Nzg1NWJhMmZlZjg5MDllOTI1ZDlmYQ==", "commit": {"author": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2020-05-26T19:19:19Z"}, "committer": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2020-05-26T19:19:19Z"}, "message": "PR fortran/95089 - ICE in gfc_get_derived_type, at fortran/trans-types.c:2843\n\nFor long module name, derive type and component name, the\ngenerated name-mangled symbol did not fit into a buffer when\ncoarrays were enabled.  Provide sufficiently large temporary.\n\n2020-05-26  Harald Anlauf  <anlauf@gmx.de>\n\ngcc/fortran/\n\tPR fortran/95089\n\t* trans-types.c (gfc_get_derived_type): Enlarge temporary to hold\n\tmangled name \"_caf_symbol\".\n\ngcc/testsuite/\n\tPR fortran/95089\n\t* gfortran.dg/pr95089.f90: New test.", "tree": {"sha": "7f9e28487c8e1609f8cb723919b6403b47056ecd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f9e28487c8e1609f8cb723919b6403b47056ecd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/48d526613961f410a87855ba2fef8909e925d9fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48d526613961f410a87855ba2fef8909e925d9fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48d526613961f410a87855ba2fef8909e925d9fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48d526613961f410a87855ba2fef8909e925d9fa/comments", "author": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f0cb44e9b1da3676879b73728b31d421a8b1178", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f0cb44e9b1da3676879b73728b31d421a8b1178", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f0cb44e9b1da3676879b73728b31d421a8b1178"}], "stats": {"total": 16, "additions": 14, "deletions": 2}, "files": [{"sha": "998448125056f8ead373f603150086341c70dcbf", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48d526613961f410a87855ba2fef8909e925d9fa/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48d526613961f410a87855ba2fef8909e925d9fa/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=48d526613961f410a87855ba2fef8909e925d9fa", "patch": "@@ -2836,9 +2836,10 @@ gfc_get_derived_type (gfc_symbol * derived, int codimen)\n \t  && (c->attr.allocatable || c->attr.pointer)\n \t  && !derived->attr.is_class)\n \t{\n-\t  char caf_name[GFC_MAX_SYMBOL_LEN];\n+\t  /* Provide sufficient space to hold \"_caf_symbol\".  */\n+\t  char caf_name[GFC_MAX_SYMBOL_LEN + 6];\n \t  gfc_component *token;\n-\t  snprintf (caf_name, GFC_MAX_SYMBOL_LEN, \"_caf_%s\", c->name);\n+\t  snprintf (caf_name, sizeof (caf_name), \"_caf_%s\", c->name);\n \t  token = gfc_find_component (derived, caf_name, true, true, NULL);\n \t  gcc_assert (token);\n \t  c->caf_token = token->backend_decl;"}, {"sha": "1cd20f0ccc5324a38ef23e058b23a14c35410dec", "filename": "gcc/testsuite/gfortran.dg/pr95089.f90", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48d526613961f410a87855ba2fef8909e925d9fa/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr95089.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48d526613961f410a87855ba2fef8909e925d9fa/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr95089.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr95089.f90?ref=48d526613961f410a87855ba2fef8909e925d9fa", "patch": "@@ -0,0 +1,11 @@\n+! { dg-do compile }\n+! { dg-options \"-fcoarray=lib\" }\n+!\n+! PR fortran/95089 - ICE in gfc_get_derived_type, at fortran/trans-types.c:2843\n+\n+module m23456789012345678901234567890123456789012345678901234567890123\n+  type t23456789012345678901234567890123456789012345678901234567890123\n+     type (t23456789012345678901234567890123456789012345678901234567890123), &\n+          pointer :: z23456789012345678901234567890123456789012345678901234567890123\n+  end type t23456789012345678901234567890123456789012345678901234567890123\n+end"}]}