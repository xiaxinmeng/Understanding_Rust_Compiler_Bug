{"sha": "bba975d4304c06ed1e7d0b20c00e0ff3f9cd98c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmJhOTc1ZDQzMDRjMDZlZDFlN2QwYjIwYzAwZTBmZjNmOWNkOThjNQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1999-03-29T15:53:32Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1999-03-29T15:53:32Z"}, "message": "* invoke.texi (Invoking G++, C++ Dialect Options): Update.\n\nFrom-SVN: r26059", "tree": {"sha": "5aa48f1ce98563b05a77b2c4207e87c664db6917", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5aa48f1ce98563b05a77b2c4207e87c664db6917"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bba975d4304c06ed1e7d0b20c00e0ff3f9cd98c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bba975d4304c06ed1e7d0b20c00e0ff3f9cd98c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bba975d4304c06ed1e7d0b20c00e0ff3f9cd98c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bba975d4304c06ed1e7d0b20c00e0ff3f9cd98c5/comments", "author": null, "committer": null, "parents": [{"sha": "b68e8bdd8cedf358ba149e2b62e6d060031b29d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b68e8bdd8cedf358ba149e2b62e6d060031b29d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b68e8bdd8cedf358ba149e2b62e6d060031b29d4"}], "stats": {"total": 234, "additions": 127, "deletions": 107}, "files": [{"sha": "1045c8bb7321a45711ef29b8c43c407709d207c7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bba975d4304c06ed1e7d0b20c00e0ff3f9cd98c5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bba975d4304c06ed1e7d0b20c00e0ff3f9cd98c5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bba975d4304c06ed1e7d0b20c00e0ff3f9cd98c5", "patch": "@@ -1,3 +1,7 @@\n+Mon Mar 29 15:48:39 1999  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* invoke.texi (Invoking G++, C++ Dialect Options): Update.\n+\n Mon Mar 29 15:05:39 1999  Richard Henderson  <rth@cygnus.com>\n \n \t* except.c (start_dynamic_handler): Force jmp_buf address to "}, {"sha": "433694062d5369060dd4effe0bd30236b70f15a3", "filename": "gcc/invoke.texi", "status": "modified", "additions": 123, "deletions": 107, "changes": 230, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bba975d4304c06ed1e7d0b20c00e0ff3f9cd98c5/gcc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bba975d4304c06ed1e7d0b20c00e0ff3f9cd98c5/gcc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finvoke.texi?ref=bba975d4304c06ed1e7d0b20c00e0ff3f9cd98c5", "patch": "@@ -109,7 +109,9 @@ in the following sections.\n -fno-implement-inlines -fname-mangling-version-@var{n}  -fno-default-inline  \n -foperator-names  -fno-optional-diags  -frepo  -fstrict-prototype\n -fsquangle  -ftemplate-depth-@var{n}  -fthis-is-variable  -fvtable-thunks\n--nostdinc++\n+-nostdinc++  -Wctor-dtor-privacy  -Weffc++  -Wno-non-template-friend \n+-Wnon-virtual-dtor  -Wold-style-cast  -Woverloaded-virtual  \n+-Wno-pmf-conversions  -Wreorder  -Wsign-promo  -Wsynth\n @end smallexample\n \n @item Warning Options\n@@ -125,10 +127,9 @@ in the following sections.\n -Wlarger-than-@var{len}  -Wlong-long\n -Wmain  -Wmissing-declarations  -Wmissing-noreturn\n -Wmissing-prototypes  -Wmultichar  -Wnested-externs  -Wno-import  \n--Wno-non-template-friend -Wold-style-cast  -Woverloaded-virtual  \n--Wparentheses -Wpointer-arith  -Wredundant-decls  -Wreorder  \n+-Wparentheses -Wpointer-arith  -Wredundant-decls\n -Wreturn-type -Wshadow  -Wsign-compare  -Wstrict-prototypes  \n--Wswitch -Wsynth  -Wtraditional  \n+-Wswitch  -Wtraditional  \n -Wtrigraphs -Wundef  -Wuninitialized  -Wunused  -Wwrite-strings\n -Wunknown-pragmas\n @end smallexample\n@@ -583,10 +584,11 @@ be displayed.\n @cindex suffixes for C++ source\n @cindex C++ source file suffixes\n C++ source files conventionally use one of the suffixes @samp{.C},\n-@samp{.cc}, @samp{cpp}, or @samp{.cxx}; preprocessed C++ files use the\n-suffix @samp{.ii}.  GNU CC recognizes files with these names and\n-compiles them as C++ programs even if you call the compiler the same way\n-as for compiling C programs (usually with the name @code{gcc}).\n+@samp{.cc}, @samp{.cpp}, @samp{.c++}, @samp{.cp}, or @samp{.cxx};\n+preprocessed C++ files use the suffix @samp{.ii}.  GNU CC recognizes\n+files with these names and compiles them as C++ programs even if you\n+call the compiler the same way as for compiling C programs (usually with\n+the name @code{gcc}).\n \n @findex g++\n @findex c++\n@@ -596,17 +598,7 @@ circumstances, you might want to compile programs from standard input,\n or otherwise without a suffix that flags them as C++ programs.\n @code{g++} is a program that calls GNU CC with the default language\n set to C++, and automatically specifies linking against the C++\n-library.\n-@cindex @code{g++ 1.@var{xx}}\n-@cindex @code{g++}, separate compiler\n-@cindex @code{g++} older version\n-@footnote{Prior to release 2 of the compiler,\n-there was a separate @code{g++} compiler.  That version was based on GNU\n-CC, but not integrated with it.  Versions of @code{g++} with a\n-@samp{1.@var{xx}} version number---for example, @code{g++} version 1.37\n-or 1.42---are much less reliable than the versions integrated with GCC\n-2.  Moreover, combining G++ @samp{1.@var{xx}} with a version 2 GCC will\n-simply not work.} On many systems, the script @code{g++} is also\n+library.  On many systems, the script @code{g++} is also\n installed with the name @code{c++}.\n \n @cindex invoking @code{g++}\n@@ -1055,9 +1047,14 @@ Like all options that change the ABI, all C++ code, @emph{including\n libgcc} must be built with the same setting of this option.\n \n @item -fno-implicit-templates\n-Never emit code for templates which are instantiated implicitly (i.e. by\n-use); only emit code for explicit instantiations.  @xref{Template\n-Instantiation}, for more information.\n+Never emit code for non-inline templates which are instantiated\n+implicitly (i.e. by use); only emit code for explicit instantiations.\n+@xref{Template Instantiation}, for more information.\n+\n+@item -fno-implicit-inline-templates\n+Don't emit code for implicit instantiations of inline templates, either.\n+The default is to handle inlines differently so that compiles with and\n+without optimization will need the same set of explicit instantiations.\n \n @item -finit-priority\n Support @samp{__attribute__ ((init_priority (n)))} for controlling the\n@@ -1080,6 +1077,9 @@ given this declaration:\n template <class T, class U> void foo(T t);\n @end example\n \n+Like all options that change the ABI, all C++ code, @emph{including\n+libgcc} must be built with the same setting of this option.\n+\n @item -foperator-names\n Recognize the operator name keywords @code{and}, @code{bitand},\n @code{bitor}, @code{compl}, @code{not}, @code{or} and @code{xor} as\n@@ -1088,8 +1088,8 @@ synonyms for the symbols they refer to.  @samp{-ansi} implies\n \n @item -fno-optional-diags\n Disable diagnostics that the standard says a compiler does not need to\n-issue.  Currently, this means the diagnostic for a name having multiple \n-meanings within a class.\n+issue.  Currently, the only such diagnostic issued by g++ is the one for\n+a name having multiple meanings within a class.\n \n @item -fpermissive\n Downgrade messages about nonconformant code from errors to warnings.  By\n@@ -1181,15 +1181,106 @@ Do not assume @samp{inline} for functions defined inside a class scope.\n functions will have linkage like inline functions; they just won't be\n inlined by default.\n \n-@item -Wno-non-template-friend\n-@xref{Warning Options,,Options to Request or Suppress Warnings}.\n-@item -Wold-style-cast\n-@itemx -Woverloaded-virtual\n-Warnings that apply only to C++ programs.  @xref{Warning\n-Options,,Options to Request or Suppress Warnings}.\n+@item -Wctor-dtor-privacy (C++ only)\n+Warn when a class seems unusable, because all the constructors or\n+destructors in a class are private and the class has no friends or\n+public static member functions.\n+\n+@item -Wnon-virtual-dtor (C++ only)\n+Warn when a class declares a non-virtual destructor that should probably\n+be virtual, because it looks like the class will be used polymorphically.\n+\n+@item -Wreorder (C++ only)\n+@cindex reordering, warning\n+@cindex warning for reordering of member initializers\n+Warn when the order of member initializers given in the code does not\n+match the order in which they must be executed.  For instance:\n+\n+@smallexample\n+struct A @{\n+  int i;\n+  int j;\n+  A(): j (0), i (1) @{ @}\n+@};\n+@end smallexample\n+\n+Here the compiler will warn that the member initializers for @samp{i}\n+and @samp{j} will be rearranged to match the declaration order of the\n+members.\n+@end table\n+\n+The following @samp{-W@dots{}} options are not affected by @samp{-Wall}.\n+\n+@table @code\n+@item -Weffc++ (C++ only)\n+Warn about violations of various style guidelines from Scott Meyers'\n+@cite{Effective C++} books.  If you use this option, you should be aware\n+that the standard library headers do not obey all of these guidelines;\n+you can use @samp{grep -v} to filter out those warnings.\n+\n+@item -Wno-non-template-friend (C++ only)\n+Disable warnings when non-templatized friend functions are declared\n+within a template. With the advent of explicit template specification\n+support in g++, if the name of the friend is an unqualified-id (ie,\n+@samp{friend foo(int)}), the C++ language specification demands that the\n+friend declare or define an ordinary, nontemplate function. (Section\n+14.5.3). Before g++ implemented explicit specification, unqualified-ids\n+could be interpreted as a particular specialization of a templatized\n+function. Because this non-conforming behavior is no longer the default\n+behavior for g++, @samp{-Wnon-template-friend} allows the compiler to\n+check existing code for potential trouble spots, and is on by default.\n+This new compiler behavior can also be turned off with the flag\n+@samp{-fguiding-decls}, which activates the older, non-specification\n+compiler code, or with @samp{-Wno-non-template-friend} which keeps the\n+conformant compiler code but disables the helpful warning.\n+\n+@item -Wold-style-cast (C++ only)\n+Warn if an old-style (C-style) cast is used within a C++ program.  The\n+new-style casts (@samp{static_cast}, @samp{reinterpret_cast}, and\n+@samp{const_cast}) are less vulnerable to unintended effects.\n+\n+@item -Woverloaded-virtual (C++ only)\n+@cindex overloaded virtual fn, warning\n+@cindex warning for overloaded virtual fn\n+Warn when a derived class function declaration may be an error in\n+defining a virtual function.  In a derived class, the\n+definitions of virtual functions must match the type signature of a\n+virtual function declared in the base class.  With this option, the\n+compiler warns when you define a function with the same name as a\n+virtual function, but with a type signature that does not match any\n+declarations from the base class.\n+\n+@item -Wno-pmf-conversions (C++ only)\n+Disable the diagnostic for converting a bound pointer to member function\n+to a plain pointer.\n+\n+@item -Wsign-promo (C++ only)\n+Warn when overload resolution chooses a promotion from unsigned or\n+enumeral type to a signed type over a conversion to an unsigned type of\n+the same size.  Previous versions of g++ would try to preserve\n+unsignedness, but the standard mandates the current behavior.\n+\n+@item -Wsynth (C++ only)\n+@cindex warning for synthesized methods\n+@cindex synthesized methods, warning\n+Warn when g++'s synthesis behavior does not match that of cfront.  For\n+instance:\n+\n+@smallexample\n+struct A @{\n+  operator int ();\n+  A& operator = (int);\n+@};\n+\n+main ()\n+@{\n+  A a,b;\n+  a = b;\n+@}\n+@end smallexample\n \n-@item -Weffc++\n-Warn about violation of some style rules from Effective C++ by Scott Myers.\n+In this example, g++ will synthesize a default @samp{A& operator =\n+(const A&);}, while cfront will use the user-defined @samp{operator =}.\n @end table\n \n @node Warning Options\n@@ -1423,29 +1514,6 @@ Some spurious warnings can be avoided if you declare all the functions\n you use that never return as @code{noreturn}.  @xref{Function\n Attributes}.\n \n-@item -Wreorder (C++ only)\n-@cindex reordering, warning\n-@cindex warning for reordering of member initializers\n-Warn when the order of member initializers given in the code does not\n-match the order in which they must be executed.  For instance:\n-\n-@smallexample\n-struct A @{\n-  int i;\n-  int j;\n-  A(): j (0), i (1) @{ @}\n-@};\n-@end smallexample\n-\n-Here the compiler will warn that the member initializers for @samp{i}\n-and @samp{j} will be rearranged to match the declaration order of the\n-members.\n-\n-@item -Wtemplate-debugging\n-@cindex template debugging\n-When using templates in a C++ program, warn if debugging is not yet\n-fully available (C++ only).\n-\n @item -Wunknown-pragmas\n @cindex warning for unknown pragmas\n @cindex unknown pragmas, warning\n@@ -1676,62 +1744,10 @@ cases where multiple declaration is valid and changes nothing.\n @item -Wnested-externs\n Warn if an @code{extern} declaration is encountered within an function.\n \n-@item -Wno-non-template-friend\n-Disable warnings when non-templatized friend functions are declared\n-within a template. With the advent of explicit template specification\n-support in g++, if the name of the friend is an unqualified-id (ie,\n-@samp{friend foo(int)}), the C++ language specification demands that the\n-friend declare or define an ordinary, nontemplate function. (Section\n-14.5.3). Before g++ implemented explicit specification, unqualified-ids\n-could be interpreted as a particular specialization of a templatized\n-function. Because this non-conforming behavior is no longer the default\n-behavior for g++, @samp{-Wnon-template-friend} allows the compiler to\n-check existing code for potential trouble spots, and is on by default.\n-This new compiler behavior can also be turned off with the flag\n-@samp{-fguiding-decls}, which activates the older, non-specification\n-compiler code, or with @samp{-Wno-non-template-friend} which keeps the\n-conformant compiler code but disables the helpful warning.\n-\n @item -Winline\n Warn if a function can not be inlined, and either it was declared as inline,\n or else the @samp{-finline-functions} option was given.\n \n-@item -Wold-style-cast\n-Warn if an old-style (C-style) cast is used within a program.\n-\n-@item -Woverloaded-virtual\n-@cindex overloaded virtual fn, warning\n-@cindex warning for overloaded virtual fn\n-Warn when a derived class function declaration may be an error in\n-defining a virtual function (C++ only).  In a derived class, the\n-definitions of virtual functions must match the type signature of a\n-virtual function declared in the base class.  With this option, the\n-compiler warns when you define a function with the same name as a\n-virtual function, but with a type signature that does not match any\n-declarations from the base class.\n-\n-@item -Wsynth (C++ only)\n-@cindex warning for synthesized methods\n-@cindex synthesized methods, warning\n-Warn when g++'s synthesis behavior does not match that of cfront.  For\n-instance:\n-\n-@smallexample\n-struct A @{\n-  operator int ();\n-  A& operator = (int);\n-@};\n-\n-main ()\n-@{\n-  A a,b;\n-  a = b;\n-@}\n-@end smallexample\n-\n-In this example, g++ will synthesize a default @samp{A& operator =\n-(const A&);}, while cfront will use the user-defined @samp{operator =}.\n-\n @item -Wlong-long\n Warn if @samp{long long} type is used.  This is default.  To inhibit\n the warning messages, use @samp{-Wno-long-long}.  Flags"}]}