{"sha": "af287697443400b33dbfd2297bdcf63121e7bc86", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWYyODc2OTc0NDM0MDBiMzNkYmZkMjI5N2JkY2Y2MzEyMWU3YmM4Ng==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2004-08-31T20:29:28Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2004-08-31T20:29:28Z"}, "message": "hooks.c (hook_bool_void_true): New function.\n\n\t* hooks.c (hook_bool_void_true): New function.\n\t* hooks.h (hook_bool_void_true): Declare.\n\t* target-def.h (TARGET_CXX): Add\n\tTARGET_CXX_KEY_METHOD_MAY_BE_INLINE.\n\t* target.h (struct cxx): Add key_method_may_be_inline.\n\t* config/arm/arm.c (arm_cxx_key_method_may_be_inline): New\n\tfunction.\n\t(TARGET_CXX_KEY_METHOD_MAY_BE_INLINE): New macro.\n\t* config/arm/bpabi.h: Use __THUMB_INTERWORK__ instead of\n\t__THUMB_INTERWORK.\n\n \t* class.c (key_method): Rename to ...\n\t(determine_key_method): ... this.\n\t(finish_struct_1): Adjust accordingly.\n\t* cp-tree.h (key_method): Declare.\n\t* decl2.c (maybe_emit_vtables): Determine the key method here if\n\tit has not already been done.\n\n\t* g++.dg/abi/key1.C: New test.\n\nFrom-SVN: r86843", "tree": {"sha": "ee8a8ed7c7cd3d552d036001e3c45b585e180905", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee8a8ed7c7cd3d552d036001e3c45b585e180905"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af287697443400b33dbfd2297bdcf63121e7bc86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af287697443400b33dbfd2297bdcf63121e7bc86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af287697443400b33dbfd2297bdcf63121e7bc86", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af287697443400b33dbfd2297bdcf63121e7bc86/comments", "author": null, "committer": null, "parents": [{"sha": "678584fc80fc69fbd3c4f5f15d484ed6006f41be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/678584fc80fc69fbd3c4f5f15d484ed6006f41be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/678584fc80fc69fbd3c4f5f15d484ed6006f41be"}], "stats": {"total": 123, "additions": 113, "deletions": 10}, "files": [{"sha": "af60798b7c6ae60ad38b05f5d30cbc6271f9bc35", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af287697443400b33dbfd2297bdcf63121e7bc86/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af287697443400b33dbfd2297bdcf63121e7bc86/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=af287697443400b33dbfd2297bdcf63121e7bc86", "patch": "@@ -1,3 +1,16 @@\n+2004-08-31  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* hooks.c (hook_bool_void_true): New function.\n+\t* hooks.h (hook_bool_void_true): Declare.\n+\t* target-def.h (TARGET_CXX): Add\n+\tTARGET_CXX_KEY_METHOD_MAY_BE_INLINE.\n+\t* target.h (struct cxx): Add key_method_may_be_inline.\n+\t* config/arm/arm.c (arm_cxx_key_method_may_be_inline): New\n+\tfunction.\n+\t(TARGET_CXX_KEY_METHOD_MAY_BE_INLINE): New macro.\n+\t* config/arm/bpabi.h: Use __THUMB_INTERWORK__ instead of\n+\t__THUMB_INTERWORK.\n+\t\n 2004-08-31  Denis Chertykov  <denisc@overta.ru>\n \n \tPR target/15417"}, {"sha": "0a0fdfd4ff52fa9933494c354a83f5e11859e18e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af287697443400b33dbfd2297bdcf63121e7bc86/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af287697443400b33dbfd2297bdcf63121e7bc86/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=af287697443400b33dbfd2297bdcf63121e7bc86", "patch": "@@ -1,3 +1,12 @@\n+2004-08-31  Mark Mitchell  <mark@codesourcery.com>\n+\n+ \t* class.c (key_method): Rename to ...\n+\t(determine_key_method): ... this.\n+\t(finish_struct_1): Adjust accordingly.\n+\t* cp-tree.h (key_method): Declare.\n+\t* decl2.c (maybe_emit_vtables): Determine the key method here if\n+\tit has not already been done.\n+\n 2004-08-31  Ziemowit Laski  <zlaski@apple.com>\n \n \t* Make-lang.in (CXX_AND_OBJCXX_OBJS): Add cp/cp-objcp-common.o."}, {"sha": "84c758788880a0f5a4e5955b8be403d3c5d21c6c", "filename": "gcc/cp/class.c", "status": "modified", "additions": 24, "deletions": 8, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af287697443400b33dbfd2297bdcf63121e7bc86/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af287697443400b33dbfd2297bdcf63121e7bc86/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=af287697443400b33dbfd2297bdcf63121e7bc86", "patch": "@@ -4886,28 +4886,35 @@ layout_class_type (tree t, tree *virtuals_p)\n   splay_tree_delete (empty_base_offsets);\n }\n \n-/* Returns the virtual function with which the vtable for TYPE is\n-   emitted, or NULL_TREE if that heuristic is not applicable to TYPE.  */\n+/* Determine the \"key method\" for the class type indicated by TYPE,\n+   and set CLASSTYPE_KEY_METHOD accordingly.  */\n \n-static tree\n-key_method (tree type)\n+void\n+determine_key_method (tree type)\n {\n   tree method;\n \n   if (TYPE_FOR_JAVA (type)\n       || processing_template_decl\n       || CLASSTYPE_TEMPLATE_INSTANTIATION (type)\n       || CLASSTYPE_INTERFACE_KNOWN (type))\n-    return NULL_TREE;\n+    return;\n \n+  /* The key method is the first non-pure virtual function that is not\n+     inline at the point of class definition.  On some targets the\n+     key function may not be inline; those targets should not call\n+     this function until the end of the translation unit.  */\n   for (method = TYPE_METHODS (type); method != NULL_TREE;\n        method = TREE_CHAIN (method))\n     if (DECL_VINDEX (method) != NULL_TREE\n \t&& ! DECL_DECLARED_INLINE_P (method)\n \t&& ! DECL_PURE_VIRTUAL_P (method))\n-      return method;\n+      {\n+\tCLASSTYPE_KEY_METHOD (type) = method;\n+\tbreak;\n+      }\n \n-  return NULL_TREE;\n+  return;\n }\n \n /* Perform processing required when the definition of T (a class type)\n@@ -4950,7 +4957,16 @@ finish_struct_1 (tree t)\n   /* Find the key method.  */\n   if (TYPE_CONTAINS_VPTR_P (t))\n     {\n-      CLASSTYPE_KEY_METHOD (t) = key_method (t);\n+      /* The Itanium C++ ABI permits the key method to be chosen when\n+\t the class is defined -- even though the key method so\n+\t selected may later turn out to be an inline function.  On\n+\t some systems (such as ARM Symbian OS) the key method cannot\n+\t be determined until the end of the translation unit.  On such\n+\t systems, we leave CLASSTYPE_KEY_METHOD set to NULL, which\n+\t will cause the class to be added to KEYED_CLASSES.  Then, in\n+\t finish_file we will determine the key method.  */\n+      if (targetm.cxx.key_method_may_be_inline ())\n+\tdetermine_key_method (t);\n \n       /* If a polymorphic class has no key method, we may emit the vtable\n \t in every translation unit where the class definition appears.  */"}, {"sha": "a6db55320235ec5a38242760a2d2e8aef6b50a88", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af287697443400b33dbfd2297bdcf63121e7bc86/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af287697443400b33dbfd2297bdcf63121e7bc86/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=af287697443400b33dbfd2297bdcf63121e7bc86", "patch": "@@ -3673,6 +3673,7 @@ extern void debug_class\t\t\t\t(tree);\n extern void debug_thunks \t\t\t(tree);\n extern tree cp_fold_obj_type_ref\t\t(tree, tree);\n extern void set_linkage_according_to_type       (tree, tree);\n+extern void determine_key_method                (tree);\n \n /* in cvt.c */\n extern tree convert_to_reference (tree, tree, int, int, tree);"}, {"sha": "d02180a44aff5fac6913268c3394a5a52913ee08", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af287697443400b33dbfd2297bdcf63121e7bc86/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af287697443400b33dbfd2297bdcf63121e7bc86/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=af287697443400b33dbfd2297bdcf63121e7bc86", "patch": "@@ -1559,6 +1559,12 @@ maybe_emit_vtables (tree ctype)\n   if (TREE_TYPE (primary_vtbl) == void_type_node)\n     return false;\n \n+  /* On some targets, we cannot determine the key method until the end\n+     of the translation unit -- which is when this function is\n+     called.  */\n+  if (!targetm.cxx.key_method_may_be_inline ())\n+    determine_key_method (ctype);\n+\n   /* See if any of the vtables are needed.  */\n   for (vtbl = CLASSTYPE_VTABLES (ctype); vtbl; vtbl = TREE_CHAIN (vtbl))\n     {"}, {"sha": "d1e59cf424a91220a32ee44c4e1d8e2256b3df8c", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af287697443400b33dbfd2297bdcf63121e7bc86/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af287697443400b33dbfd2297bdcf63121e7bc86/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=af287697443400b33dbfd2297bdcf63121e7bc86", "patch": "@@ -8528,6 +8528,16 @@ the address of the object created/destroyed.  The default is to return\n @code{false}.\n @end deftypefn\n \n+@deftypefn {Target Hook} bool TARGET_CXX_KEY_METHOD_MAY_BE_INLINE (void)\n+This hook returns true if the key method for a class (i.e., the method\n+which, if defined in the current translation unit, causes the virtual\n+table to be emitted) may be an inline function.  Under the standard\n+Itanium C++ ABI the key method may be an inline function so long as\n+the function is not declared inline in the class definition.  Under\n+some variants of the ABI, an inline function can never be the key\n+method.  The default is to return @code{true}.\n+@end deftypefn\n+\n @node Misc\n @section Miscellaneous Parameters\n @cindex parameters, miscellaneous"}, {"sha": "6c17a5f4fc7e0f5c260b7e48dd2dd3788518b49e", "filename": "gcc/hooks.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af287697443400b33dbfd2297bdcf63121e7bc86/gcc%2Fhooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af287697443400b33dbfd2297bdcf63121e7bc86/gcc%2Fhooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.c?ref=af287697443400b33dbfd2297bdcf63121e7bc86", "patch": "@@ -41,7 +41,14 @@ hook_bool_void_false (void)\n   return false;\n }\n \n-/* The same, but formally returning NO_REGS.  */\n+/* Generic hook that takes no arguments and returns true.  */\n+bool\n+hook_bool_void_true (void)\n+{\n+  return true;\n+}\n+\n+/* Generic hook that takes no arguments and returns NO_REGS. */\n int\n hook_int_void_no_regs (void)\n {"}, {"sha": "8eef06f3bca729cfdfdd6922061c9c6b2cdcdb16", "filename": "gcc/hooks.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af287697443400b33dbfd2297bdcf63121e7bc86/gcc%2Fhooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af287697443400b33dbfd2297bdcf63121e7bc86/gcc%2Fhooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.h?ref=af287697443400b33dbfd2297bdcf63121e7bc86", "patch": "@@ -25,6 +25,7 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n #include \"machmode.h\"\n \n extern bool hook_bool_void_false (void);\n+extern bool hook_bool_void_true (void);\n extern bool hook_bool_bool_false (bool);\n extern bool hook_bool_mode_false (enum machine_mode);\n extern bool hook_bool_tree_false (tree);"}, {"sha": "e49d05584ed2e4a8f1d616838965bc6a2950f55f", "filename": "gcc/target-def.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af287697443400b33dbfd2297bdcf63121e7bc86/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af287697443400b33dbfd2297bdcf63121e7bc86/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=af287697443400b33dbfd2297bdcf63121e7bc86", "patch": "@@ -437,14 +437,19 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n #define TARGET_CXX_CDTOR_RETURNS_THIS hook_bool_void_false\n #endif\n \n+#ifndef TARGET_CXX_KEY_METHOD_MAY_BE_INLINE\n+#define TARGET_CXX_KEY_METHOD_MAY_BE_INLINE hook_bool_void_true\n+#endif\n+\n #define TARGET_CXX\t\t\\\n   {\t\t\t\t\\\n     TARGET_CXX_GUARD_TYPE,\t\\\n     TARGET_CXX_GUARD_MASK_BIT,\t\\\n     TARGET_CXX_GET_COOKIE_SIZE,\t\\\n     TARGET_CXX_COOKIE_HAS_SIZE,\t\\\n     TARGET_CXX_IMPORT_EXPORT_CLASS,\t\\\n-    TARGET_CXX_CDTOR_RETURNS_THIS\t\\\n+    TARGET_CXX_CDTOR_RETURNS_THIS,\t\\\n+    TARGET_CXX_KEY_METHOD_MAY_BE_INLINE \\\n   }\n \n /* The whole shebang.  */"}, {"sha": "57b38cf25f460de32e51a0083fbc9a4de796094a", "filename": "gcc/target.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af287697443400b33dbfd2297bdcf63121e7bc86/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af287697443400b33dbfd2297bdcf63121e7bc86/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=af287697443400b33dbfd2297bdcf63121e7bc86", "patch": "@@ -516,6 +516,11 @@ struct gcc_target\n     int (*import_export_class) (tree, int);\n     /* Returns true if constructors and destructors return \"this\".  */\n     bool (*cdtor_returns_this) (void);\n+    /* Returns true if the key method for a class can be an inline\n+       function, so long as it is not declared inline in the class\n+       itself.  Returning true is the behavior required by the Itanium\n+       C++ ABI.  */\n+    bool (*key_method_may_be_inline) (void);\n   } cxx;\n \n   /* Leave the boolean fields at the end.  */"}, {"sha": "5e8be36c6367203b0f181becd131f68260f33251", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af287697443400b33dbfd2297bdcf63121e7bc86/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af287697443400b33dbfd2297bdcf63121e7bc86/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=af287697443400b33dbfd2297bdcf63121e7bc86", "patch": "@@ -1,3 +1,7 @@\n+2004-08-31  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* g++.dg/abi/key1.C: New test.\n+\n 2004-08-31  Richard Henderson  <rth@redhat.com>\n \n \t* g++.dg/other/offsetof1.C: Include cstddef, use non-builtin"}, {"sha": "6c038092641daa9de73f514f3bdebd6c5525dc17", "filename": "gcc/testsuite/g++.dg/abi/key1.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af287697443400b33dbfd2297bdcf63121e7bc86/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fkey1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af287697443400b33dbfd2297bdcf63121e7bc86/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fkey1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fkey1.C?ref=af287697443400b33dbfd2297bdcf63121e7bc86", "patch": "@@ -0,0 +1,26 @@\n+// On ARM EABI platforms, key methods may never be inline.\n+// { dg-do compile { target arm*-*-eabi* arm*-*-symbianelf* } }\n+// { dg-final { scan-assembler-not _ZTV1S } }\n+// { dg-final { scan-assembler-not _ZTV1T } }\n+// { dg-final { scan-assembler _ZTV1U } }\n+\n+struct S {\n+  virtual void f();\n+};\n+\n+inline void S::f() {}\n+\n+struct T {\n+  virtual void g();\n+  virtual void h();\n+};\n+\n+inline void T::g() {}\n+\n+struct U {\n+  virtual void i();\n+  virtual void j();\n+};\n+\n+inline void U::i() {}\n+void U::j () {}"}]}