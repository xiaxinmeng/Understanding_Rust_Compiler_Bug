{"sha": "a97cf8f9a381ee26b80c5ccd874deeed3218e79a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTk3Y2Y4ZjlhMzgxZWUyNmI4MGM1Y2NkODc0ZGVlZWQzMjE4ZTc5YQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2017-07-31T13:11:59Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2017-07-31T13:11:59Z"}, "message": "re PR target/25967 (Add attribute naked for x86)\n\n\tPR target/25967\n\t* config/i386/i386.c (ix86_allocate_stack_slots_for_args):\n\tNew function.\n\t(TARGET_ALLOCATE_STACK_SLOTS_FOR_ARGS): Define.\n\ntestsuite/ChangeLog:\n\n\tPR target/25967\n\t* gcc.target/i386/naked-3.c (dg-options): Use -O0.\n\t(naked): Add attribute regparm(1) for x86_32 targets.\n\tAdd integer argument.  Remove global \"data\" variable.\n\t(main): Pass integer argument to naked function.\n\t* gcc.target/i386/naked-4.c: New test.\n\nFrom-SVN: r250742", "tree": {"sha": "70c98e8a400dcedb86e778e1a4e84ecb22b7632e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/70c98e8a400dcedb86e778e1a4e84ecb22b7632e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a97cf8f9a381ee26b80c5ccd874deeed3218e79a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a97cf8f9a381ee26b80c5ccd874deeed3218e79a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a97cf8f9a381ee26b80c5ccd874deeed3218e79a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a97cf8f9a381ee26b80c5ccd874deeed3218e79a/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9c04bba3664904c7f84fd61b4306ec8db8b67c81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c04bba3664904c7f84fd61b4306ec8db8b67c81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c04bba3664904c7f84fd61b4306ec8db8b67c81"}], "stats": {"total": 54, "additions": 48, "deletions": 6}, "files": [{"sha": "27130e89b8f08d6c87e8bed40fdcef888b0b5b61", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a97cf8f9a381ee26b80c5ccd874deeed3218e79a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a97cf8f9a381ee26b80c5ccd874deeed3218e79a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a97cf8f9a381ee26b80c5ccd874deeed3218e79a", "patch": "@@ -1,3 +1,10 @@\n+2017-07-31  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/25967\n+\t* config/i386/i386.c (ix86_allocate_stack_slots_for_args):\n+\tNew function.\n+\t(TARGET_ALLOCATE_STACK_SLOTS_FOR_ARGS): Define.\n+\n 2017-07-31  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n \n \t* config.gcc: Add z14."}, {"sha": "29a6dc3af2b7c165efc77a12743a16da9d5d636a", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a97cf8f9a381ee26b80c5ccd874deeed3218e79a/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a97cf8f9a381ee26b80c5ccd874deeed3218e79a/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=a97cf8f9a381ee26b80c5ccd874deeed3218e79a", "patch": "@@ -31675,6 +31675,13 @@ ix86_trampoline_init (rtx m_tramp, tree fndecl, rtx chain_value)\n #endif\n }\n \n+static bool\n+ix86_allocate_stack_slots_for_args (void)\n+{\n+  /* Naked functions should not allocate stack slots for arguments.  */\n+  return !ix86_function_naked (current_function_decl);\n+}\n+\n static bool\n ix86_warn_func_return (tree decl)\n {\n@@ -52727,6 +52734,8 @@ ix86_run_selftests (void)\n #define TARGET_SETUP_INCOMING_VARARGS ix86_setup_incoming_varargs\n #undef TARGET_MUST_PASS_IN_STACK\n #define TARGET_MUST_PASS_IN_STACK ix86_must_pass_in_stack\n+#undef TARGET_ALLOCATE_STACK_SLOTS_FOR_ARGS\n+#define TARGET_ALLOCATE_STACK_SLOTS_FOR_ARGS ix86_allocate_stack_slots_for_args\n #undef TARGET_FUNCTION_ARG_ADVANCE\n #define TARGET_FUNCTION_ARG_ADVANCE ix86_function_arg_advance\n #undef TARGET_FUNCTION_ARG"}, {"sha": "7edb3a304812c6c334fdd9fceb9ac23b4046c489", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a97cf8f9a381ee26b80c5ccd874deeed3218e79a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a97cf8f9a381ee26b80c5ccd874deeed3218e79a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a97cf8f9a381ee26b80c5ccd874deeed3218e79a", "patch": "@@ -1,3 +1,12 @@\n+2017-07-31  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/25967\n+\t* gcc.target/i386/naked-3.c (dg-options): Use -O0.\n+\t(naked): Add attribute regparm(1) for x86_32 targets.\n+\tAdd integer argument.  Remove global \"data\" variable.\n+\t(main): Pass integer argument to naked function.\n+\t* gcc.target/i386/naked-4.c: New test.\n+\n 2017-07-31  Jan Hubicka <hubicka@ucw.cz>\n \t    Martin Liska  <mliska@suse.cz>\n "}, {"sha": "b3a17f635ee11153495641de243c80132c89cfee", "filename": "gcc/testsuite/gcc.target/i386/naked-3.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a97cf8f9a381ee26b80c5ccd874deeed3218e79a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fnaked-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a97cf8f9a381ee26b80c5ccd874deeed3218e79a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fnaked-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fnaked-3.c?ref=a97cf8f9a381ee26b80c5ccd874deeed3218e79a", "patch": "@@ -1,17 +1,18 @@\n /* { dg-do run { target *-*-linux* *-*-gnu* } } */\n-/* { dg-options \"-O2\" } */\n+/* { dg-options \"-O0\" } */\n \n #include <unistd.h>\n #include <signal.h>\n #include <stdlib.h>\n \n-int data;\n-\n /* Verify that naked function traps at the end.  */\n \n void\n __attribute__((naked, noinline, noclone))\n-naked (void)\n+#ifdef __i386__\n+__attribute__((regparm(1)))\n+#endif\n+naked (int data)\n {\n   if (data == 0x12345678)\n     return;\n@@ -32,8 +33,7 @@ int main ()\n   s.sa_flags = 0;\n   sigaction (SIGILL, &s, NULL);\n \n-  data = 0x12345678;\n-  naked ();\n+  naked (0x12345678);\n \n   abort ();\n }"}, {"sha": "07b32424f5f4c9465fcbaff7fd688512165fed81", "filename": "gcc/testsuite/gcc.target/i386/naked-4.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a97cf8f9a381ee26b80c5ccd874deeed3218e79a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fnaked-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a97cf8f9a381ee26b80c5ccd874deeed3218e79a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fnaked-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fnaked-4.c?ref=a97cf8f9a381ee26b80c5ccd874deeed3218e79a", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O0\" } */\n+/* { dg-additional-options \"-mregparm=3\" { target ia32 } } */\n+\n+/* Verify that __attribute__((naked)) produces a naked function \n+   that does not allocate stack slots for args.  */\n+extern void bar (int);\n+\n+int\n+__attribute__((naked))\n+foo (int a, int b, int c)\n+{\n+  bar (c);\n+  asm volatile (\"ret\" :: \"a\" (b));\n+}\n+\n+/* { dg-final { scan-assembler-not \"%\\[re\\]bp\" } } */"}]}