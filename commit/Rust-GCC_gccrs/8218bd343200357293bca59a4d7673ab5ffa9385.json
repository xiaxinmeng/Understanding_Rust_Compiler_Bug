{"sha": "8218bd343200357293bca59a4d7673ab5ffa9385", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODIxOGJkMzQzMjAwMzU3MjkzYmNhNTlhNGQ3NjczYWI1ZmZhOTM4NQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2003-01-06T21:32:17Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2003-01-06T21:32:17Z"}, "message": "re PR c++/9189 ([New parser] Order of default argument processing and function body compilation)\n\n\tPR c++/9189\n\t* parser.c (cp_parser): Remove default_arg_types.  Update\n\tdocumentation for unparsed_functions_queues.\n\t(cp_parser_late_parsing_default_args): Take a FUNCTION_DECL as the\n\tparameter.\n\t(cp_parser_new): Don't set parser->default_arg_types.\n\t(cp_parser_function_definition): Adjust usage of\n\tunparsed_funtions_queues.\n\t(cp_parser_class_specifier): Don't mess with\n\tparser->default_arg_types.  Handle default argument processing in\n\ta separate phase from function body processing.\n\t(cp_parser_template_declaration_after_export): Adjust usage of\n\tunparsed_functions_queues.\n\t(cp_parser_late_parsing_for_member): Do not handle default\n\targuments.\n\n\tPR c++/9189\n\t* g++.dg/parse/defarg3.C: New test.\n\nFrom-SVN: r60956", "tree": {"sha": "bab0d0d9d1d1b658dddf4aebbea275c799fc2f10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bab0d0d9d1d1b658dddf4aebbea275c799fc2f10"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8218bd343200357293bca59a4d7673ab5ffa9385", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8218bd343200357293bca59a4d7673ab5ffa9385", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8218bd343200357293bca59a4d7673ab5ffa9385", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8218bd343200357293bca59a4d7673ab5ffa9385/comments", "author": null, "committer": null, "parents": [{"sha": "1c26d8fd84049ea0c57a9d5aba38bc2c0e552ebb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c26d8fd84049ea0c57a9d5aba38bc2c0e552ebb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c26d8fd84049ea0c57a9d5aba38bc2c0e552ebb"}], "stats": {"total": 117, "additions": 71, "deletions": 46}, "files": [{"sha": "70bc9ee33de6c00be6268e37133b70e577f594c0", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8218bd343200357293bca59a4d7673ab5ffa9385/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8218bd343200357293bca59a4d7673ab5ffa9385/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8218bd343200357293bca59a4d7673ab5ffa9385", "patch": "@@ -1,3 +1,21 @@\n+2003-01-06  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/9189\n+\t* parser.c (cp_parser): Remove default_arg_types.  Update\n+\tdocumentation for unparsed_functions_queues.\n+\t(cp_parser_late_parsing_default_args): Take a FUNCTION_DECL as the\n+\tparameter.\n+\t(cp_parser_new): Don't set parser->default_arg_types.\n+\t(cp_parser_function_definition): Adjust usage of\n+\tunparsed_funtions_queues.\n+\t(cp_parser_class_specifier): Don't mess with\n+\tparser->default_arg_types.  Handle default argument processing in\n+\ta separate phase from function body processing.\n+\t(cp_parser_template_declaration_after_export): Adjust usage of\n+\tunparsed_functions_queues.\n+\t(cp_parser_late_parsing_for_member): Do not handle default\n+\targuments.\n+\n 2003-01-06  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR c++/9109"}, {"sha": "e9b41e4a0178338f3c70e1ddeab2225c7902a5e4", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 43, "deletions": 46, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8218bd343200357293bca59a4d7673ab5ffa9385/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8218bd343200357293bca59a4d7673ab5ffa9385/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=8218bd343200357293bca59a4d7673ab5ffa9385", "patch": "@@ -1330,22 +1330,16 @@ typedef struct cp_parser GTY(())\n      issued as an error message if a type is defined.  */\n   const char *type_definition_forbidden_message;\n \n-  /* List of FUNCTION_TYPEs which contain unprocessed DEFAULT_ARGs\n-     during class parsing, and are not FUNCTION_DECLs.  G++ has an\n-     awkward extension allowing default args on pointers to functions\n-     etc.  */\n-  tree default_arg_types;\n-\n   /* A TREE_LIST of queues of functions whose bodies have been lexed,\n      but may not have been parsed.  These functions are friends of\n      members defined within a class-specification; they are not\n      procssed until the class is complete.  The active queue is at the\n      front of the list.\n \n      Within each queue, functions appear in the reverse order that\n-     they appeared in the source.  The TREE_PURPOSE of each node is\n-     the class in which the function was defined or declared; the\n-     TREE_VALUE is the FUNCTION_DECL itself.  */\n+     they appeared in the source.  Each TREE_VALUE is a\n+     FUNCTION_DECL of TEMPLATE_DECL corresponding to a member\n+     function.  */\n   tree unparsed_functions_queues;\n \n   /* The number of classes whose definitions are currently in\n@@ -1731,7 +1725,7 @@ static tree cp_parser_functional_cast\n static void cp_parser_late_parsing_for_member\n   PARAMS ((cp_parser *, tree));\n static void cp_parser_late_parsing_default_args\n-  (cp_parser *, tree, tree);\n+  (cp_parser *, tree);\n static tree cp_parser_sizeof_operand\n   PARAMS ((cp_parser *, enum rid));\n static bool cp_parser_declares_only_class_p\n@@ -2504,9 +2498,6 @@ cp_parser_new ()\n   /* We are not processing a declarator.  */\n   parser->in_declarator_p = false;\n \n-  /* There are no default args to process.  */\n-  parser->default_arg_types = NULL;\n-\n   /* The unparsed function queue is empty.  */\n   parser->unparsed_functions_queues = build_tree_list (NULL_TREE, NULL_TREE);\n \n@@ -11243,7 +11234,7 @@ cp_parser_function_definition (parser, friend_p)\n \n       /* Add FN to the queue of functions to be parsed later.  */\n       TREE_VALUE (parser->unparsed_functions_queues)\n-\t= tree_cons (current_class_type, fn, \n+\t= tree_cons (NULL_TREE, fn, \n \t\t     TREE_VALUE (parser->unparsed_functions_queues));\n \n       return fn;\n@@ -11695,29 +11686,44 @@ cp_parser_class_specifier (parser)\n   if (--parser->num_classes_being_defined == 0) \n     {\n       tree last_scope = NULL_TREE;\n+      tree queue_entry;\n+      tree fn;\n \n-      /* Process non FUNCTION_DECL related DEFAULT_ARGs.  */\n-      for (parser->default_arg_types = nreverse (parser->default_arg_types);\n-\t   parser->default_arg_types;\n-\t   parser->default_arg_types = TREE_CHAIN (parser->default_arg_types))\n-\tcp_parser_late_parsing_default_args\n-\t  (parser, TREE_PURPOSE (parser->default_arg_types), NULL_TREE);\n-      \n       /* Reverse the queue, so that we process it in the order the\n \t functions were declared.  */\n       TREE_VALUE (parser->unparsed_functions_queues)\n \t= nreverse (TREE_VALUE (parser->unparsed_functions_queues));\n-      /* Loop through all of the functions.  */\n+      /* In a first pass, parse default arguments to the functions.\n+\t Then, in a second pass, parse the bodies of the functions.\n+\t This two-phased approach handles cases like:\n+\t \n+\t    struct S { \n+              void f() { g(); } \n+              void g(int i = 3);\n+            };\n+\n+         */\n+      for (queue_entry = TREE_VALUE (parser->unparsed_functions_queues);\n+\t   queue_entry;\n+\t   queue_entry = TREE_CHAIN (queue_entry))\n+\t{\n+\t  fn = TREE_VALUE (queue_entry);\n+\t  if (DECL_FUNCTION_TEMPLATE_P (fn))\n+\t    fn = DECL_TEMPLATE_RESULT (fn);\n+\t  /* Make sure that any template parameters are in scope.  */\n+\t  maybe_begin_member_template_processing (fn);\n+\t  /* If there are default arguments that have not yet been processed,\n+\t     take care of them now.  */\n+\t  cp_parser_late_parsing_default_args (parser, fn);\n+\t  /* Remove any template parameters from the symbol table.  */\n+\t  maybe_end_member_template_processing ();\n+\t}\n+      /* Now parse the body of the functions.  */\n       while (TREE_VALUE (parser->unparsed_functions_queues))\n \n \t{\n-\t  tree fn;\n-\t  tree fn_scope;\n-\t  tree queue_entry;\n-\n \t  /* Figure out which function we need to process.  */\n \t  queue_entry = TREE_VALUE (parser->unparsed_functions_queues);\n-\t  fn_scope = TREE_PURPOSE (queue_entry);\n \t  fn = TREE_VALUE (queue_entry);\n \n \t  /* Parse the function.  */\n@@ -12448,7 +12454,7 @@ cp_parser_member_declaration (parser)\n \t\t there might be default arguments that need handling.)  */\n \t      if (TREE_CODE (decl) == FUNCTION_DECL)\n \t\tTREE_VALUE (parser->unparsed_functions_queues)\n-\t\t  = tree_cons (current_class_type, decl, \n+\t\t  = tree_cons (NULL_TREE, decl, \n \t\t\t       TREE_VALUE (parser->unparsed_functions_queues));\n \t    }\n \t}\n@@ -14238,7 +14244,7 @@ cp_parser_template_declaration_after_export (parser, member_p)\n       && (TREE_CODE (decl) == FUNCTION_DECL\n \t  || DECL_FUNCTION_TEMPLATE_P (decl)))\n     TREE_VALUE (parser->unparsed_functions_queues)\n-      = tree_cons (current_class_type, decl, \n+      = tree_cons (NULL_TREE, decl, \n \t\t   TREE_VALUE (parser->unparsed_functions_queues));\n }\n \n@@ -14384,13 +14390,6 @@ cp_parser_late_parsing_for_member (parser, member_function)\n   /* Make sure that any template parameters are in scope.  */\n   maybe_begin_member_template_processing (member_function);\n \n-  /* If there are default arguments that have not yet been processed,\n-     take care of them now.  */\n-  cp_parser_late_parsing_default_args (parser, TREE_TYPE (member_function),\n-\t\t\t\t       DECL_FUNCTION_MEMBER_P (member_function)\n-\t\t\t\t       ? DECL_CONTEXT (member_function)\n-\t\t\t\t       : NULL_TREE);\n-\n   /* If the body of the function has not yet been parsed, parse it\n      now.  */\n   if (DECL_PENDING_INLINE_P (member_function))\n@@ -14444,20 +14443,18 @@ cp_parser_late_parsing_for_member (parser, member_function)\n     = TREE_CHAIN (parser->unparsed_functions_queues);\n }\n \n-/* TYPE is a FUNCTION_TYPE or METHOD_TYPE which contains a parameter\n-   with an unparsed DEFAULT_ARG.  If non-NULL, SCOPE is the class in\n-   whose context name lookups in the default argument should occur.\n-   Parse the default args now.  */\n+/* FN is a FUNCTION_DECL which may contains a parameter with an\n+   unparsed DEFAULT_ARG.  Parse the default args now.  */\n \n static void\n-cp_parser_late_parsing_default_args (cp_parser *parser, tree type, tree scope)\n+cp_parser_late_parsing_default_args (cp_parser *parser, tree fn)\n {\n   cp_lexer *saved_lexer;\n   cp_token_cache *tokens;\n   bool saved_local_variables_forbidden_p;\n   tree parameters;\n-  \n-  for (parameters = TYPE_ARG_TYPES (type);\n+\n+  for (parameters = TYPE_ARG_TYPES (TREE_TYPE (fn));\n        parameters;\n        parameters = TREE_CHAIN (parameters))\n     {\n@@ -14481,10 +14478,10 @@ cp_parser_late_parsing_default_args (cp_parser *parser, tree type, tree scope)\n       saved_local_variables_forbidden_p = parser->local_variables_forbidden_p;\n       parser->local_variables_forbidden_p = true;\n        /* Parse the assignment-expression.  */\n-      if (scope)\n-\tpush_nested_class (scope, 1);\n+      if (DECL_CONTEXT (fn))\n+\tpush_nested_class (DECL_CONTEXT (fn), 1);\n       TREE_PURPOSE (parameters) = cp_parser_assignment_expression (parser);\n-      if (scope)\n+      if (DECL_CONTEXT (fn))\n \tpop_nested_class ();\n \n        /* Restore saved state.  */"}, {"sha": "2c8bb11ee5fb4d953a17f7f45db5b62a317caac9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8218bd343200357293bca59a4d7673ab5ffa9385/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8218bd343200357293bca59a4d7673ab5ffa9385/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8218bd343200357293bca59a4d7673ab5ffa9385", "patch": "@@ -1,3 +1,8 @@\n+2003-01-06  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/9189\n+\t* g++.dg/parse/defarg3.C: New test.\n+\n 2003-01-06  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* g++.dg/parse/ambig1.C: New test."}, {"sha": "5c81c69e6793fc5278ec589b601a512e85011af2", "filename": "gcc/testsuite/g++.dg/parse/defarg3.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8218bd343200357293bca59a4d7673ab5ffa9385/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fdefarg3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8218bd343200357293bca59a4d7673ab5ffa9385/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fdefarg3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fdefarg3.C?ref=8218bd343200357293bca59a4d7673ab5ffa9385", "patch": "@@ -0,0 +1,5 @@\n+struct A {\n+    enum { value = 10 };\n+    A() { f(); }\n+    static int f(int i=value);\n+};"}]}