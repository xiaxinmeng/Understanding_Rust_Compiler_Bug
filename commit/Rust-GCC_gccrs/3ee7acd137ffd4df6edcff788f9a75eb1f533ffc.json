{"sha": "3ee7acd137ffd4df6edcff788f9a75eb1f533ffc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2VlN2FjZDEzN2ZmZDRkZjZlZGNmZjc4OGY5YTc1ZWIxZjUzM2ZmYw==", "commit": {"author": {"name": "Bryce McKinlay", "email": "mckinlay@redhat.com", "date": "2004-07-10T02:38:55Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2004-07-10T02:38:55Z"}, "message": "java.util.Calendar.java (cache): New private static field.\n\n2004-07-09  Bryce McKinlay  <mckinlay@redhat.com>\n\n\t* java.util.Calendar.java (cache): New private static field. Cached\n\tmappings of locales->calendar classes.\n\t(ctorArgTypes): New private static field. Singleton argument for\n\tcalendar class constructor lookup.\n\t(getInstance): Cache Locale->Calendar class mappings using HashMap.\n\tOptimize by bypassing reflection instantiation for the\n\tGregorianCalendar case.\n\nFrom-SVN: r84438", "tree": {"sha": "a21213186246ae4988b6aedc426b713636af538b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a21213186246ae4988b6aedc426b713636af538b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ee7acd137ffd4df6edcff788f9a75eb1f533ffc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ee7acd137ffd4df6edcff788f9a75eb1f533ffc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ee7acd137ffd4df6edcff788f9a75eb1f533ffc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ee7acd137ffd4df6edcff788f9a75eb1f533ffc/comments", "author": null, "committer": null, "parents": [{"sha": "284d6a1fc39e6c7bcfca33d3f67a69547c646207", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/284d6a1fc39e6c7bcfca33d3f67a69547c646207", "html_url": "https://github.com/Rust-GCC/gccrs/commit/284d6a1fc39e6c7bcfca33d3f67a69547c646207"}], "stats": {"total": 83, "additions": 66, "deletions": 17}, "files": [{"sha": "5e2492069c9168f61d55165fcd5dfb08c035c2de", "filename": "libjava/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ee7acd137ffd4df6edcff788f9a75eb1f533ffc/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ee7acd137ffd4df6edcff788f9a75eb1f533ffc/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=3ee7acd137ffd4df6edcff788f9a75eb1f533ffc", "patch": "@@ -1,3 +1,13 @@\n+2004-07-09  Bryce McKinlay  <mckinlay@redhat.com>\n+\n+\t* java.util.Calendar.java (cache): New private static field. Cached\n+\tmappings of locales->calendar classes.\n+\t(ctorArgTypes): New private static field. Singleton argument for\n+\tcalendar class constructor lookup.\n+\t(getInstance): Cache Locale->Calendar class mappings using HashMap.\n+\tOptimize by bypassing reflection instantiation for the \n+\tGregorianCalendar case.\n+\n 2004-07-09  Bryce McKinlay  <mckinlay@redhat.com>\n \n \t* java/util/Calendar.java: Use getSystemClassLoader as argument for"}, {"sha": "b7ffb3381064711c0f7784931478d6fb42c8fc2c", "filename": "libjava/java/util/Calendar.java", "status": "modified", "additions": 56, "deletions": 17, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ee7acd137ffd4df6edcff788f9a75eb1f533ffc/libjava%2Fjava%2Futil%2FCalendar.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ee7acd137ffd4df6edcff788f9a75eb1f533ffc/libjava%2Fjava%2Futil%2FCalendar.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FCalendar.java?ref=3ee7acd137ffd4df6edcff788f9a75eb1f533ffc", "patch": "@@ -437,6 +437,16 @@ public static synchronized Calendar getInstance(Locale locale)\n     return getInstance(TimeZone.getDefault(), locale);\n   }\n \n+  /** \n+   * Cache of locale->calendar-class mappings. This avoids having to do a ResourceBundle\n+   * lookup for every getInstance call.  \n+   */\n+  private static HashMap cache = new HashMap();\n+\n+  /** Preset argument types for calendar-class constructor lookup.  */\n+  private static Class[] ctorArgTypes\n+    = new Class[] {TimeZone.class, Locale.class};\n+\n   /**\n    * Creates a calendar representing the actual time, using the given\n    * time zone and locale.\n@@ -445,29 +455,58 @@ public static synchronized Calendar getInstance(Locale locale)\n    */\n   public static synchronized Calendar getInstance(TimeZone zone, Locale locale)\n   {\n-    String calendarClassName = null;\n-    ResourceBundle rb = getBundle(locale);\n-    calendarClassName = rb.getString(\"calendarClass\");\n-    if (calendarClassName != null)\n+    Class calendarClass = (Class) cache.get(locale);\n+    Throwable exception = null;\n+\n+    try\n       {\n-\ttry\n+\tif (calendarClass == null)\n \t  {\n-\t    Class calendarClass = Class.forName(calendarClassName);\n-\t    if (Calendar.class.isAssignableFrom(calendarClass))\n+\t    ResourceBundle rb = getBundle(locale);\n+\t    String calendarClassName = rb.getString(\"calendarClass\");\n+\n+\t    if (calendarClassName != null)\n \t      {\n-\t\treturn (Calendar) calendarClass.getConstructor(\n-\t\t  new Class[] { TimeZone.class, Locale.class}\n-\t\t).newInstance(new Object[] {zone, locale} );\n+\t\tcalendarClass = Class.forName(calendarClassName);\n+\t\tif (Calendar.class.isAssignableFrom(calendarClass))\n+\t\t  cache.put(locale, calendarClass);\n \t      }\n \t  }\n-\tcatch (ClassNotFoundException ex) {}\n-\tcatch (IllegalAccessException ex) {}\n-\tcatch (NoSuchMethodException ex) {}\n-\tcatch (InstantiationException ex) {}\n-\tcatch (InvocationTargetException ex) {}\n-\t// XXX should we ignore these errors or throw an exception ?\n+\n+        // GregorianCalendar is by far the most common case. Optimize by \n+\t// avoiding reflection.\n+\tif (calendarClass == GregorianCalendar.class)\n+\t  return new GregorianCalendar(zone, locale);\n+\n+\tif (Calendar.class.isAssignableFrom(calendarClass))\n+\t  {\n+\t    Constructor ctor = calendarClass.getConstructor(ctorArgTypes);\n+\t    return (Calendar) ctor.newInstance(new Object[] {zone, locale});\n+\t  }\n+      }\n+    catch (ClassNotFoundException ex)\n+      {\n+\texception = ex;\n+      }\n+    catch (IllegalAccessException ex)\n+      {\n+\texception = ex;\n+      }\n+    catch (NoSuchMethodException ex)\n+      {\n+\texception = ex;\n+      }\n+    catch (InstantiationException ex)\n+      {\n+\texception = ex;\n+      }\n+    catch (InvocationTargetException ex)\n+      {\n+\texception = ex;\n       }\n-    return new GregorianCalendar(zone, locale);\n+    \n+    throw new RuntimeException(\"Error instantiating calendar for locale \" +\n+\t\t\t       locale, exception);\n   }\n \n   /**"}]}