{"sha": "3fe54645374b1d7992555e97d906a5ba281d3c54", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2ZlNTQ2NDUzNzRiMWQ3OTkyNTU1ZTk3ZDkwNmE1YmEyODFkM2M1NA==", "commit": {"author": {"name": "Robin Dapp", "email": "rdapp@linux.ibm.com", "date": "2021-06-15T07:06:15Z"}, "committer": {"name": "Robin Dapp", "email": "rdapp@linux.ibm.com", "date": "2021-06-15T07:38:23Z"}, "message": "testsuite: Fix Wattributes test cases for s390 and add new tests.\n\nThere are several FAILs because we have an s390-specific check for a\nwarning which is not necessary anymore.  Remove it.\n\nAdd a new test case that expects a warning about conflicting function\nalignment.  This would fail on s390 before but most likely on other\ntargets as well so it can be a target-independent test.\n\nAlso, add a test to verify that we do not emit a note when specifying\nconflicting alignment for the same declaration.  Need to explicitly\nhandle every dg-note because handling one disables dg-note pruning.\n\ngcc/testsuite/ChangeLog:\n\n\t* c-c++-common/Wattributes.c: Remove s390-specific check and add\n\tnew tests.\n\t* gcc.dg/Wattributes-6.c: Likewise.", "tree": {"sha": "ef81ea07acf19b2e4abbac8fa89b661b2bf73aa3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef81ea07acf19b2e4abbac8fa89b661b2bf73aa3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3fe54645374b1d7992555e97d906a5ba281d3c54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fe54645374b1d7992555e97d906a5ba281d3c54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fe54645374b1d7992555e97d906a5ba281d3c54", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fe54645374b1d7992555e97d906a5ba281d3c54/comments", "author": {"login": "rdapp-ibm", "id": 80318053, "node_id": "MDQ6VXNlcjgwMzE4MDUz", "avatar_url": "https://avatars.githubusercontent.com/u/80318053?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rdapp-ibm", "html_url": "https://github.com/rdapp-ibm", "followers_url": "https://api.github.com/users/rdapp-ibm/followers", "following_url": "https://api.github.com/users/rdapp-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/rdapp-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rdapp-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rdapp-ibm/subscriptions", "organizations_url": "https://api.github.com/users/rdapp-ibm/orgs", "repos_url": "https://api.github.com/users/rdapp-ibm/repos", "events_url": "https://api.github.com/users/rdapp-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/rdapp-ibm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rdapp-ibm", "id": 80318053, "node_id": "MDQ6VXNlcjgwMzE4MDUz", "avatar_url": "https://avatars.githubusercontent.com/u/80318053?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rdapp-ibm", "html_url": "https://github.com/rdapp-ibm", "followers_url": "https://api.github.com/users/rdapp-ibm/followers", "following_url": "https://api.github.com/users/rdapp-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/rdapp-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rdapp-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rdapp-ibm/subscriptions", "organizations_url": "https://api.github.com/users/rdapp-ibm/orgs", "repos_url": "https://api.github.com/users/rdapp-ibm/repos", "events_url": "https://api.github.com/users/rdapp-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/rdapp-ibm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba2eef033e59d80fde35d0cc3acf4d82f7706e60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba2eef033e59d80fde35d0cc3acf4d82f7706e60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba2eef033e59d80fde35d0cc3acf4d82f7706e60"}], "stats": {"total": 72, "additions": 62, "deletions": 10}, "files": [{"sha": "978f3f938e97d35e5fab2e3ba038b1ec545d6211", "filename": "gcc/testsuite/c-c++-common/Wattributes.c", "status": "modified", "additions": 31, "deletions": 5, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fe54645374b1d7992555e97d906a5ba281d3c54/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWattributes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fe54645374b1d7992555e97d906a5ba281d3c54/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWattributes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWattributes.c?ref=3fe54645374b1d7992555e97d906a5ba281d3c54", "patch": "@@ -97,6 +97,8 @@ fnoinline1 (void);       /* { dg-message \"previous declaration here\" } */\n /* Verify a warning for always_inline conflict.  */\n void ATTR ((always_inline))\n fnoinline1 (void) { }    /* { dg-warning \"ignoring attribute .always_inline. because it conflicts with attribute .noinline.\" } */\n+\t\t\t /* { dg-note\t \"previous declaration here\" \"\" { target *-*-* } .-1 } */\n+\t\t\t /* { dg-note\t \"previous definition\" \"\" { target *-*-* } .-2 } */\n \n /* Verify a warning for gnu_inline conflict.  */\n inline void ATTR ((gnu_inline))\n@@ -364,13 +366,15 @@ inline int ATTR ((cold))\n finline_cold_noreturn (int);\n \n inline int ATTR ((noreturn))\n-finline_cold_noreturn (int);\n+finline_cold_noreturn (int);\t/* { dg-note\t\"previous declaration here\" } */\n \n inline int ATTR ((noinline))\n finline_cold_noreturn (int);    /* { dg-warning \"ignoring attribute .noinline. because it conflicts with attribute .always_inline.\" } */\n+\t\t\t\t/* { dg-note\t\"previous declaration here\" \"\" { target *-*-* } .-1 } */\n \n inline int ATTR ((hot))\n finline_cold_noreturn (int);    /* { dg-warning \"ignoring attribute .hot. because it conflicts with attribute .cold.\" } */\n+\t\t\t\t/* { dg-note\t\"previous declaration here\" \"\" { target *-*-* } .-1 } */\n \n inline int ATTR ((warn_unused_result))\n finline_cold_noreturn (int);    /* { dg-warning \"ignoring attribute .warn_unused_result. because it conflicts with attribute .noreturn.\" } */\n@@ -389,23 +393,25 @@ finline_cold_noreturn (int i) { (void)&i; __builtin_abort (); }\n    and some on distinct declarations.  */\n \n inline int ATTR ((always_inline, hot))\n-finline_hot_noret_align (int);\n+finline_hot_noret_align (int);\t/* { dg-note\t\"previous declaration here\" } */\n \n inline int ATTR ((noreturn, noinline))\n finline_hot_noret_align (int);  /* { dg-warning \"ignoring attribute .noinline. because it conflicts with attribute .always_inline.\" } */\n+\t\t\t\t/* { dg-note\t\"previous declaration here\" \"\" { target *-*-* } .-1 } */\n \n inline int ATTR ((cold, aligned (8)))\n finline_hot_noret_align (int);  /* { dg-warning \"ignoring attribute .cold. because it conflicts with attribute .hot.\" } */\n+\t\t\t\t/* { dg-note\t\"previous declaration here\" \"\" { target *-*-* } .-1 } */\n \n inline int ATTR ((warn_unused_result))\n finline_hot_noret_align (int);  /* { dg-warning \"ignoring attribute .warn_unused_result. because it conflicts with attribute .noreturn.\" } */\n+\t\t\t\t/* { dg-note\t\"previous declaration here\" \"\" { target *-*-* } .-1 } */\n \n inline int ATTR ((aligned (4)))\n-  finline_hot_noret_align (int);  /* { dg-warning \"ignoring attribute .aligned \\\\(4\\\\). because it conflicts with attribute .aligned \\\\(8\\\\).\" \"\" { target { ! { hppa*64*-*-* s390*-*-* } } } } */\n-/* { dg-error \"alignment for '.*finline_hot_noret_align.*' must be at least 8\" \"\" { target s390*-*-* } .-1 } */\n+  finline_hot_noret_align (int);  /* { dg-warning \"ignoring attribute .aligned \\\\(4\\\\). because it conflicts with attribute .aligned \\\\(8\\\\).\" \"\" { target { ! { hppa*64*-*-* } } } } */\n \n inline int ATTR ((aligned (8)))\n-finline_hot_noret_align (int);\n+finline_hot_noret_align (int);  /* { dg-note\t\"previous declaration here\" } */\n \n inline int ATTR ((const))\n finline_hot_noret_align (int);  /* { dg-warning \"ignoring attribute .const. because it conflicts with attribute .noreturn.\" } */\n@@ -416,6 +422,26 @@ inline int ATTR ((noreturn))\n finline_hot_noret_align (int i) { (void)&i; __builtin_abort (); }\n \n \n+/* Expect a warning about conflicting alignment but without\n+   other declarations inbetween.  */\n+inline int ATTR ((aligned (32)))\n+finline_align (int);\t        /* { dg-note\t\"previous declaration here\" } */\n+\n+inline int ATTR ((aligned (4)))\n+finline_align (int);  /* { dg-warning \"ignoring attribute .aligned \\\\(4\\\\). because it conflicts with attribute .aligned \\\\(32\\\\).\" \"\" } */\n+\n+inline int ATTR ((noreturn))\n+finline_align (int i) { (void)&i; __builtin_abort (); }\n+\n+\n+/* Expect no note that would refer to the same declaration.  */\n+inline int ATTR ((aligned (32), aligned (4)))\n+finline_double_align (int); /* { dg-warning \"ignoring attribute .aligned \\\\(4\\\\). because it conflicts with attribute .aligned \\\\(32\\\\).\" } */\n+\n+inline int ATTR ((noreturn))\n+finline_double_align (int i) { (void)&i; __builtin_abort (); }\n+\n+\n /* Exercise variable attributes.  */\n \n extern int ATTR ((common))"}, {"sha": "978f3f938e97d35e5fab2e3ba038b1ec545d6211", "filename": "gcc/testsuite/gcc.dg/Wattributes-6.c", "status": "modified", "additions": 31, "deletions": 5, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fe54645374b1d7992555e97d906a5ba281d3c54/gcc%2Ftestsuite%2Fgcc.dg%2FWattributes-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fe54645374b1d7992555e97d906a5ba281d3c54/gcc%2Ftestsuite%2Fgcc.dg%2FWattributes-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWattributes-6.c?ref=3fe54645374b1d7992555e97d906a5ba281d3c54", "patch": "@@ -97,6 +97,8 @@ fnoinline1 (void);       /* { dg-message \"previous declaration here\" } */\n /* Verify a warning for always_inline conflict.  */\n void ATTR ((always_inline))\n fnoinline1 (void) { }    /* { dg-warning \"ignoring attribute .always_inline. because it conflicts with attribute .noinline.\" } */\n+\t\t\t /* { dg-note\t \"previous declaration here\" \"\" { target *-*-* } .-1 } */\n+\t\t\t /* { dg-note\t \"previous definition\" \"\" { target *-*-* } .-2 } */\n \n /* Verify a warning for gnu_inline conflict.  */\n inline void ATTR ((gnu_inline))\n@@ -364,13 +366,15 @@ inline int ATTR ((cold))\n finline_cold_noreturn (int);\n \n inline int ATTR ((noreturn))\n-finline_cold_noreturn (int);\n+finline_cold_noreturn (int);\t/* { dg-note\t\"previous declaration here\" } */\n \n inline int ATTR ((noinline))\n finline_cold_noreturn (int);    /* { dg-warning \"ignoring attribute .noinline. because it conflicts with attribute .always_inline.\" } */\n+\t\t\t\t/* { dg-note\t\"previous declaration here\" \"\" { target *-*-* } .-1 } */\n \n inline int ATTR ((hot))\n finline_cold_noreturn (int);    /* { dg-warning \"ignoring attribute .hot. because it conflicts with attribute .cold.\" } */\n+\t\t\t\t/* { dg-note\t\"previous declaration here\" \"\" { target *-*-* } .-1 } */\n \n inline int ATTR ((warn_unused_result))\n finline_cold_noreturn (int);    /* { dg-warning \"ignoring attribute .warn_unused_result. because it conflicts with attribute .noreturn.\" } */\n@@ -389,23 +393,25 @@ finline_cold_noreturn (int i) { (void)&i; __builtin_abort (); }\n    and some on distinct declarations.  */\n \n inline int ATTR ((always_inline, hot))\n-finline_hot_noret_align (int);\n+finline_hot_noret_align (int);\t/* { dg-note\t\"previous declaration here\" } */\n \n inline int ATTR ((noreturn, noinline))\n finline_hot_noret_align (int);  /* { dg-warning \"ignoring attribute .noinline. because it conflicts with attribute .always_inline.\" } */\n+\t\t\t\t/* { dg-note\t\"previous declaration here\" \"\" { target *-*-* } .-1 } */\n \n inline int ATTR ((cold, aligned (8)))\n finline_hot_noret_align (int);  /* { dg-warning \"ignoring attribute .cold. because it conflicts with attribute .hot.\" } */\n+\t\t\t\t/* { dg-note\t\"previous declaration here\" \"\" { target *-*-* } .-1 } */\n \n inline int ATTR ((warn_unused_result))\n finline_hot_noret_align (int);  /* { dg-warning \"ignoring attribute .warn_unused_result. because it conflicts with attribute .noreturn.\" } */\n+\t\t\t\t/* { dg-note\t\"previous declaration here\" \"\" { target *-*-* } .-1 } */\n \n inline int ATTR ((aligned (4)))\n-  finline_hot_noret_align (int);  /* { dg-warning \"ignoring attribute .aligned \\\\(4\\\\). because it conflicts with attribute .aligned \\\\(8\\\\).\" \"\" { target { ! { hppa*64*-*-* s390*-*-* } } } } */\n-/* { dg-error \"alignment for 'finline_hot_noret_align' must be at least 8\" \"\" { target s390*-*-* } .-1 } */\n+  finline_hot_noret_align (int);  /* { dg-warning \"ignoring attribute .aligned \\\\(4\\\\). because it conflicts with attribute .aligned \\\\(8\\\\).\" \"\" { target { ! { hppa*64*-*-* } } } } */\n \n inline int ATTR ((aligned (8)))\n-finline_hot_noret_align (int);\n+finline_hot_noret_align (int);  /* { dg-note\t\"previous declaration here\" } */\n \n inline int ATTR ((const))\n finline_hot_noret_align (int);  /* { dg-warning \"ignoring attribute .const. because it conflicts with attribute .noreturn.\" } */\n@@ -416,6 +422,26 @@ inline int ATTR ((noreturn))\n finline_hot_noret_align (int i) { (void)&i; __builtin_abort (); }\n \n \n+/* Expect a warning about conflicting alignment but without\n+   other declarations inbetween.  */\n+inline int ATTR ((aligned (32)))\n+finline_align (int);\t        /* { dg-note\t\"previous declaration here\" } */\n+\n+inline int ATTR ((aligned (4)))\n+finline_align (int);  /* { dg-warning \"ignoring attribute .aligned \\\\(4\\\\). because it conflicts with attribute .aligned \\\\(32\\\\).\" \"\" } */\n+\n+inline int ATTR ((noreturn))\n+finline_align (int i) { (void)&i; __builtin_abort (); }\n+\n+\n+/* Expect no note that would refer to the same declaration.  */\n+inline int ATTR ((aligned (32), aligned (4)))\n+finline_double_align (int); /* { dg-warning \"ignoring attribute .aligned \\\\(4\\\\). because it conflicts with attribute .aligned \\\\(32\\\\).\" } */\n+\n+inline int ATTR ((noreturn))\n+finline_double_align (int i) { (void)&i; __builtin_abort (); }\n+\n+\n /* Exercise variable attributes.  */\n \n extern int ATTR ((common))"}]}