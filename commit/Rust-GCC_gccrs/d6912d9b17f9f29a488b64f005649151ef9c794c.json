{"sha": "d6912d9b17f9f29a488b64f005649151ef9c794c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDY5MTJkOWIxN2Y5ZjI5YTQ4OGI2NGYwMDU2NDkxNTFlZjljNzk0Yw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-11-02T18:28:52Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-11-02T18:34:31Z"}, "message": "c++: Fixup some vardecls and whitespace\n\nMove some var decls to their initializers.  Correct some whitespace.\n\n\tgcc/cp/\n\t* decl.c (start_decl_1): Refactor declarations.  Fixup some\n\twhitespace.\n\t(lookup_and_check_tag): Fixup some whitespace.", "tree": {"sha": "3798c5828f72712f6e2126fbef33fa1954bc9b76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3798c5828f72712f6e2126fbef33fa1954bc9b76"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d6912d9b17f9f29a488b64f005649151ef9c794c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6912d9b17f9f29a488b64f005649151ef9c794c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6912d9b17f9f29a488b64f005649151ef9c794c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6912d9b17f9f29a488b64f005649151ef9c794c/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9757d793f800a9ea1e35977b7e9e68d6f293e857", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9757d793f800a9ea1e35977b7e9e68d6f293e857", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9757d793f800a9ea1e35977b7e9e68d6f293e857"}], "stats": {"total": 23, "additions": 10, "deletions": 13}, "files": [{"sha": "114e8d0cb011f988e5d1870fdfaeaf11a0b0eeed", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6912d9b17f9f29a488b64f005649151ef9c794c/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6912d9b17f9f29a488b64f005649151ef9c794c/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=d6912d9b17f9f29a488b64f005649151ef9c794c", "patch": "@@ -138,7 +138,7 @@ static location_t smallest_type_location (const cp_decl_specifier_seq*);\n tree cp_global_trees[CPTI_MAX];\n \n /* A list of objects which have constructors or destructors\n-   which reside in the global scope.  The decl is stored in\n+   which reside in namespace scope.  The decl is stored in\n    the TREE_VALUE slot and the initializer is stored\n    in the TREE_PURPOSE slot.  */\n tree static_aggregates;\n@@ -5458,20 +5458,17 @@ start_decl (const cp_declarator *declarator,\n void\n start_decl_1 (tree decl, bool initialized)\n {\n-  tree type;\n-  bool complete_p;\n-  bool aggregate_definition_p;\n-\n-  gcc_assert (!processing_template_decl);\n+  gcc_checking_assert (!processing_template_decl);\n \n   if (error_operand_p (decl))\n     return;\n \n-  gcc_assert (VAR_P (decl));\n+  gcc_checking_assert (VAR_P (decl));\n \n-  type = TREE_TYPE (decl);\n-  complete_p = COMPLETE_TYPE_P (type);\n-  aggregate_definition_p = MAYBE_CLASS_TYPE_P (type) && !DECL_EXTERNAL (decl);\n+  tree type = TREE_TYPE (decl);\n+  bool complete_p = COMPLETE_TYPE_P (type);\n+  bool aggregate_definition_p\n+    = MAYBE_CLASS_TYPE_P (type) && !DECL_EXTERNAL (decl);\n \n   /* If an explicit initializer is present, or if this is a definition\n      of an aggregate, then we need a complete type at this point.\n@@ -5496,6 +5493,7 @@ start_decl_1 (tree decl, bool initialized)\n \t\t\t\t   : TCTX_STATIC_STORAGE);\n       verify_type_context (input_location, context, TREE_TYPE (decl));\n     }\n+\n   if (initialized)\n     /* Is it valid for this decl to have an initializer at all?  */\n     {\n@@ -14877,7 +14875,6 @@ lookup_and_check_tag (enum tag_types tag_code, tree name,\n   else\n     decl = lookup_elaborated_type (name, how);\n \n-\n   if (!decl)\n     /* We found nothing.  */\n     return NULL_TREE;\n@@ -14898,8 +14895,8 @@ lookup_and_check_tag (enum tag_types tag_code, tree name,\n   if (TREE_CODE (decl) != TYPE_DECL)\n     /* Found not-a-type.  */\n     return NULL_TREE;\n-\n-    /* Look for invalid nested type:\n+  \n+  /* Look for invalid nested type:\n      class C {\n      class C {};\n      };  */"}]}