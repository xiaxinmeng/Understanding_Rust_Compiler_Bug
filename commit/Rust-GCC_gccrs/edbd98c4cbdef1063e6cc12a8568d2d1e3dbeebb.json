{"sha": "edbd98c4cbdef1063e6cc12a8568d2d1e3dbeebb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWRiZDk4YzRjYmRlZjEwNjNlNmNjMTJhODU2OGQyZDFlM2RiZWViYg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-02-19T14:40:26Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-02-19T14:40:26Z"}, "message": "[multiple changes]\n\n2014-02-19  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch3.adb, style.adb, sem_prag.adb, sem_ch13.adb: Minor reformatting\n\t* a-sequio.adb: Remove useless pragma Extensions_Allowed (no\n\tlonger needed).\n\n2014-02-19  Claire Dross  <dross@adacore.com>\n\n\t* a-cfdlli.ads, a-cfhase.ads, a-cforma.ads, a-cfhama.ads,\n\ta-cforse.ads, a-cofove.ads: Add Iterable aspect to formal containers.\n\nFrom-SVN: r207900", "tree": {"sha": "485a9fb3db67b459864c3a394d0f406abb061712", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/485a9fb3db67b459864c3a394d0f406abb061712"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/edbd98c4cbdef1063e6cc12a8568d2d1e3dbeebb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edbd98c4cbdef1063e6cc12a8568d2d1e3dbeebb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/edbd98c4cbdef1063e6cc12a8568d2d1e3dbeebb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edbd98c4cbdef1063e6cc12a8568d2d1e3dbeebb/comments", "author": null, "committer": null, "parents": [{"sha": "fd9710dc68bedffca930e64e0fc76149b03a18af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd9710dc68bedffca930e64e0fc76149b03a18af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd9710dc68bedffca930e64e0fc76149b03a18af"}], "stats": {"total": 85, "additions": 57, "deletions": 28}, "files": [{"sha": "c25c5a5286462a74f5a10e5eec882b3ed56c5a48", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edbd98c4cbdef1063e6cc12a8568d2d1e3dbeebb/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edbd98c4cbdef1063e6cc12a8568d2d1e3dbeebb/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=edbd98c4cbdef1063e6cc12a8568d2d1e3dbeebb", "patch": "@@ -1,3 +1,14 @@\n+2014-02-19  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch3.adb, style.adb, sem_prag.adb, sem_ch13.adb: Minor reformatting\n+\t* a-sequio.adb: Remove useless pragma Extensions_Allowed (no\n+\tlonger needed).\n+\n+2014-02-19  Claire Dross  <dross@adacore.com>\n+\n+\t* a-cfdlli.ads, a-cfhase.ads, a-cforma.ads, a-cfhama.ads,\n+\ta-cforse.ads, a-cofove.ads: Add Iterable aspect to formal containers.\n+\n 2014-02-19  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* sem_ch3.adb (Analyze_Declarations): Analyze"}, {"sha": "7b19f1dd2e31388b298643265218160299d398df", "filename": "gcc/ada/a-cfdlli.ads", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edbd98c4cbdef1063e6cc12a8568d2d1e3dbeebb/gcc%2Fada%2Fa-cfdlli.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edbd98c4cbdef1063e6cc12a8568d2d1e3dbeebb/gcc%2Fada%2Fa-cfdlli.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cfdlli.ads?ref=edbd98c4cbdef1063e6cc12a8568d2d1e3dbeebb", "patch": "@@ -63,7 +63,11 @@ package Ada.Containers.Formal_Doubly_Linked_Lists is\n    pragma Annotate (GNATprove, External_Axiomatization);\n    pragma Pure;\n \n-   type List (Capacity : Count_Type) is private;\n+   type List (Capacity : Count_Type) is private with\n+     Iterable => (First       => First,\n+                  Next        => Next,\n+                  Has_Element => Has_Element,\n+                  Element     => Element);\n    pragma Preelaborable_Initialization (List);\n \n    type Cursor is private;"}, {"sha": "16a950524228c7d8a4406bc6f0e9b275abb39873", "filename": "gcc/ada/a-cfhama.ads", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edbd98c4cbdef1063e6cc12a8568d2d1e3dbeebb/gcc%2Fada%2Fa-cfhama.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edbd98c4cbdef1063e6cc12a8568d2d1e3dbeebb/gcc%2Fada%2Fa-cfhama.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cfhama.ads?ref=edbd98c4cbdef1063e6cc12a8568d2d1e3dbeebb", "patch": "@@ -67,7 +67,11 @@ package Ada.Containers.Formal_Hashed_Maps is\n    pragma Annotate (GNATprove, External_Axiomatization);\n    pragma Pure;\n \n-   type Map (Capacity : Count_Type; Modulus : Hash_Type) is private;\n+   type Map (Capacity : Count_Type; Modulus : Hash_Type) is private with\n+     Iterable => (First       => First,\n+                  Next        => Next,\n+                  Has_Element => Has_Element,\n+                  Element     => Element);\n    pragma Preelaborable_Initialization (Map);\n \n    type Cursor is private;"}, {"sha": "fc02e04403d2fe6f4f88acb2424c27bfb688cba5", "filename": "gcc/ada/a-cfhase.ads", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edbd98c4cbdef1063e6cc12a8568d2d1e3dbeebb/gcc%2Fada%2Fa-cfhase.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edbd98c4cbdef1063e6cc12a8568d2d1e3dbeebb/gcc%2Fada%2Fa-cfhase.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cfhase.ads?ref=edbd98c4cbdef1063e6cc12a8568d2d1e3dbeebb", "patch": "@@ -69,7 +69,11 @@ package Ada.Containers.Formal_Hashed_Sets is\n    pragma Annotate (GNATprove, External_Axiomatization);\n    pragma Pure;\n \n-   type Set (Capacity : Count_Type; Modulus : Hash_Type) is private;\n+   type Set (Capacity : Count_Type; Modulus : Hash_Type) is private with\n+     Iterable => (First       => First,\n+                  Next        => Next,\n+                  Has_Element => Has_Element,\n+                  Element     => Element);\n    pragma Preelaborable_Initialization (Set);\n \n    type Cursor is private;"}, {"sha": "08dabf5541f7db5c2627bfe4ec5a3e1d6e9b662b", "filename": "gcc/ada/a-cforma.ads", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edbd98c4cbdef1063e6cc12a8568d2d1e3dbeebb/gcc%2Fada%2Fa-cforma.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edbd98c4cbdef1063e6cc12a8568d2d1e3dbeebb/gcc%2Fada%2Fa-cforma.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cforma.ads?ref=edbd98c4cbdef1063e6cc12a8568d2d1e3dbeebb", "patch": "@@ -70,7 +70,11 @@ package Ada.Containers.Formal_Ordered_Maps is\n \n    function Equivalent_Keys (Left, Right : Key_Type) return Boolean;\n \n-   type Map (Capacity : Count_Type) is private;\n+   type Map (Capacity : Count_Type) is private with\n+     Iterable => (First       => First,\n+                  Next        => Next,\n+                  Has_Element => Has_Element,\n+                  Element     => Element);\n    pragma Preelaborable_Initialization (Map);\n \n    type Cursor is private;"}, {"sha": "bc69c1b1bf6ec63c45235c3816f7a9df7677ff4f", "filename": "gcc/ada/a-cforse.ads", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edbd98c4cbdef1063e6cc12a8568d2d1e3dbeebb/gcc%2Fada%2Fa-cforse.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edbd98c4cbdef1063e6cc12a8568d2d1e3dbeebb/gcc%2Fada%2Fa-cforse.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cforse.ads?ref=edbd98c4cbdef1063e6cc12a8568d2d1e3dbeebb", "patch": "@@ -68,7 +68,11 @@ package Ada.Containers.Formal_Ordered_Sets is\n \n    function Equivalent_Elements (Left, Right : Element_Type) return Boolean;\n \n-   type Set (Capacity : Count_Type) is private;\n+   type Set (Capacity : Count_Type) is private with\n+     Iterable => (First       => First,\n+                  Next        => Next,\n+                  Has_Element => Has_Element,\n+                  Element     => Element);\n    pragma Preelaborable_Initialization (Set);\n \n    type Cursor is private;"}, {"sha": "17a3522d0263d691cb7b9688aaffa2712ba64f40", "filename": "gcc/ada/a-cofove.ads", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edbd98c4cbdef1063e6cc12a8568d2d1e3dbeebb/gcc%2Fada%2Fa-cofove.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edbd98c4cbdef1063e6cc12a8568d2d1e3dbeebb/gcc%2Fada%2Fa-cofove.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cofove.ads?ref=edbd98c4cbdef1063e6cc12a8568d2d1e3dbeebb", "patch": "@@ -75,7 +75,11 @@ package Ada.Containers.Formal_Vectors is\n    subtype Capacity_Range is\n      Count_Type range 0 .. Count_Type (Index_Type'Last - Index_Type'First + 1);\n \n-   type Vector (Capacity : Capacity_Range) is private;\n+   type Vector (Capacity : Capacity_Range) is private with\n+     Iterable => (First       => First,\n+                  Next        => Next,\n+                  Has_Element => Has_Element,\n+                  Element     => Element);\n \n    type Cursor is private;\n    pragma Preelaborable_Initialization (Cursor);"}, {"sha": "31e5d757ea3ddb13d21f0cddd5c2cf7d08301b45", "filename": "gcc/ada/a-sequio.adb", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edbd98c4cbdef1063e6cc12a8568d2d1e3dbeebb/gcc%2Fada%2Fa-sequio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edbd98c4cbdef1063e6cc12a8568d2d1e3dbeebb/gcc%2Fada%2Fa-sequio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-sequio.adb?ref=edbd98c4cbdef1063e6cc12a8568d2d1e3dbeebb", "patch": "@@ -202,15 +202,10 @@ package body Ada.Sequential_IO is\n          --  buffer if Item is constrained, to check that the discriminants\n          --  are correct.\n \n-         pragma Extensions_Allowed (On);\n-         --  Needed to allow Constrained reference here\n-\n-         if Element_Type'Has_Discriminants\n-           and then Item'Constrained\n-         then\n+         if Element_Type'Has_Discriminants and then Item'Constrained then\n             declare\n                RsizS : constant SSE.Storage_Offset :=\n-                 SSE.Storage_Offset (Rsiz - 1);\n+                         SSE.Storage_Offset (Rsiz - 1);\n \n                type SA is new SSE.Storage_Array (0 .. RsizS);\n "}, {"sha": "70cf819cbc213199c1041b792565f0b63c6ebd87", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edbd98c4cbdef1063e6cc12a8568d2d1e3dbeebb/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edbd98c4cbdef1063e6cc12a8568d2d1e3dbeebb/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=edbd98c4cbdef1063e6cc12a8568d2d1e3dbeebb", "patch": "@@ -130,7 +130,7 @@ package body Sem_Ch13 is\n \n    function Get_Cursor_Type\n      (Aspect : Node_Id;\n-       Typ   : Entity_Id) return Entity_Id;\n+      Typ    : Entity_Id) return Entity_Id;\n    --  Find Cursor type in scope of Typ, by locating primitive operation First.\n    --  For use in resolving the other primitive operations of an Iterable type.\n \n@@ -9770,15 +9770,15 @@ package body Sem_Ch13 is\n       Cursor   : Entity_Id;\n \n    begin\n-      --  If error already detected, return.\n+      --  If error already detected, return\n \n       if Error_Posted (Aspect) then\n          return Any_Type;\n       end if;\n \n-      --  The cursor type for an Iterable aspect is the return type of\n-      --  a non-overloaded First primitive operation. Locate association\n-      --  for First.\n+      --  The cursor type for an Iterable aspect is the return type of a\n+      --  non-overloaded First primitive operation. Locate association for\n+      --  First.\n \n       Assoc := First (Component_Associations (Expression (Aspect)));\n       First_Op  := Any_Id;\n@@ -9798,7 +9798,7 @@ package body Sem_Ch13 is\n \n       Cursor := Any_Type;\n \n-      --  Locate function with desired name and profile in scope of type.\n+      --  Locate function with desired name and profile in scope of type\n \n       Func := First_Entity (Scope (Typ));\n       while Present (Func) loop\n@@ -9810,7 +9810,7 @@ package body Sem_Ch13 is\n          then\n             if Cursor /= Any_Type then\n                Error_Msg_N\n-                  (\"Operation First for iterable type must be unique\", Aspect);\n+                 (\"Operation First for iterable type must be unique\", Aspect);\n                return Any_Type;\n \n             else\n@@ -9825,7 +9825,7 @@ package body Sem_Ch13 is\n \n       if Cursor = Any_Type then\n          Error_Msg_N\n-            (\"No legal primitive operation First for Iterable type\", Aspect);\n+           (\"No legal primitive operation First for Iterable type\", Aspect);\n       end if;\n \n       return Cursor;\n@@ -11524,7 +11524,7 @@ package body Sem_Ch13 is\n       Element_Id     : Entity_Id;\n \n    begin\n-      --  If previous error aspect is unusable.\n+      --  If previous error aspect is unusable\n \n       if Cursor = Any_Type then\n          return;"}, {"sha": "664a1da7d458ec595f3cce8104d8e5c98b7a3fa4", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edbd98c4cbdef1063e6cc12a8568d2d1e3dbeebb/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edbd98c4cbdef1063e6cc12a8568d2d1e3dbeebb/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=edbd98c4cbdef1063e6cc12a8568d2d1e3dbeebb", "patch": "@@ -9398,7 +9398,7 @@ package body Sem_Ch3 is\n                Error_Msg_Name_1 := Impl_Kind;\n                Error_Msg_N\n                 (\"overriding operation& must have synchronization%\",\n-                   Subp_Alias);\n+                 Subp_Alias);\n             end if;\n \n          --  If primitive has Optional synchronization, overriding operation\n@@ -9410,7 +9410,7 @@ package body Sem_Ch3 is\n                Error_Msg_Name_1 := Impl_Kind;\n                Error_Msg_N\n                 (\"overriding operation& must have syncrhonization%\",\n-                   Subp_Alias);\n+                 Subp_Alias);\n          end if;\n       end Check_Pragma_Implemented;\n "}, {"sha": "21514bfcbd026608e09f8dd2e34990536a4b7e21", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edbd98c4cbdef1063e6cc12a8568d2d1e3dbeebb/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edbd98c4cbdef1063e6cc12a8568d2d1e3dbeebb/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=edbd98c4cbdef1063e6cc12a8568d2d1e3dbeebb", "patch": "@@ -4651,8 +4651,7 @@ package body Sem_Prag is\n                         Check_Grouping (Statements (HSS));\n                      end if;\n \n-                  --  The first pragma of the first topmost grouping has been\n-                  --  found.\n+                  --  First pragma of the first topmost grouping has been found\n \n                   elsif Is_Loop_Pragma (Stmt) then\n \n@@ -4755,6 +4754,7 @@ package body Sem_Prag is\n \n          procedure Placement_Error (Constr : Node_Id) is\n             LA : constant String := \" with Loop_Entry\";\n+\n          begin\n             if Prag_Id = Pragma_Assert then\n                Error_Msg_String (1 .. LA'Length) := LA;"}, {"sha": "d3f2d2c99ccecfa229bf565aa64bbea72ffde863", "filename": "gcc/ada/style.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edbd98c4cbdef1063e6cc12a8568d2d1e3dbeebb/gcc%2Fada%2Fstyle.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edbd98c4cbdef1063e6cc12a8568d2d1e3dbeebb/gcc%2Fada%2Fstyle.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fstyle.adb?ref=edbd98c4cbdef1063e6cc12a8568d2d1e3dbeebb", "patch": "@@ -260,8 +260,8 @@ package body Style is\n \n    procedure Missing_Overriding (N : Node_Id; E : Entity_Id) is\n       Nod : Node_Id;\n-   begin\n \n+   begin\n       --  Perform the check on source subprograms and on subprogram instances,\n       --  because these can be primitives of untagged types. Note that such\n       --  indicators were introduced in Ada 2005.\n@@ -278,7 +278,6 @@ package body Style is\n            and then Is_Generic_Instance (E)\n          then\n             Nod := Next (Parent (Parent (List_Containing (N))));\n-\n          else\n             Nod := N;\n          end if;"}]}