{"sha": "9444692807a1129fd562281e911c550472434219", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQ0NDY5MjgwN2ExMTI5ZmQ1NjIyODFlOTExYzU1MDQ3MjQzNDIxOQ==", "commit": {"author": {"name": "Vladimir Makarov", "email": "vmakarov@redhat.com", "date": "2015-04-04T14:35:59Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "2015-04-04T14:35:59Z"}, "message": "re PR target/65647 (GCC won't stop when compile for armv6-m)\n\n2015-04-04  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR target/65647\n\t* lra-int.h (LRA_MAX_REMATERIALIZATION_PASSES): New.  Add its\n\tvalue checking.\n\t(lra_rematerialization_iter): New.\n\t* lra.c (lra): Initialize lra_rematerialization_iter.\n\tStop updating lra_constraint_new_regno_start after switching of\n\tinheritance and rematerialization.\n\t* lra-remat.c (lra_rematerialization_iter): New.\n\t(lra_remat): Add printing pass iteration.  Do rematerialization\n\tonly first LRA_MAX_REMATERIALIZATION_PASSES iterations.\n\n2015-04-04  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR target/65647\n\t* gcc.target/arm/pr65647.c: New.\n\nFrom-SVN: r221867", "tree": {"sha": "cc574b4eb2853d00fe21a06d5c86561ed8401c46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc574b4eb2853d00fe21a06d5c86561ed8401c46"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9444692807a1129fd562281e911c550472434219", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9444692807a1129fd562281e911c550472434219", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9444692807a1129fd562281e911c550472434219", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9444692807a1129fd562281e911c550472434219/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "30c5a937e19ac28dbb6d023516af9c1b902614aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30c5a937e19ac28dbb6d023516af9c1b902614aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30c5a937e19ac28dbb6d023516af9c1b902614aa"}], "stats": {"total": 103, "additions": 102, "deletions": 1}, "files": [{"sha": "e67aae8582ea2e8f09ec1421875190d160ca9095", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9444692807a1129fd562281e911c550472434219/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9444692807a1129fd562281e911c550472434219/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9444692807a1129fd562281e911c550472434219", "patch": "@@ -1,3 +1,16 @@\n+2015-04-04  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR target/65647\n+\t* lra-int.h (LRA_MAX_REMATERIALIZATION_PASSES): New.  Add its\n+\tvalue checking.\n+\t(lra_rematerialization_iter): New.\n+\t* lra.c (lra): Initialize lra_rematerialization_iter.\n+\tStop updating lra_constraint_new_regno_start after switching of\n+\tinheritance and rematerialization.\n+\t* lra-remat.c (lra_rematerialization_iter): New.\n+\t(lra_remat): Add printing pass iteration.  Do rematerialization\n+\tonly first LRA_MAX_REMATERIALIZATION_PASSES iterations.\n+\n 2015-04-04  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/64909"}, {"sha": "c6b147e6f781d190308cbdcee2302fefeece4e94", "filename": "gcc/lra-int.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9444692807a1129fd562281e911c550472434219/gcc%2Flra-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9444692807a1129fd562281e911c550472434219/gcc%2Flra-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-int.h?ref=9444692807a1129fd562281e911c550472434219", "patch": "@@ -271,6 +271,14 @@ typedef struct lra_insn_recog_data *lra_insn_recog_data_t;\n #error wrong LRA_MAX_INHERITANCE_PASSES value\n #endif\n \n+/* Analogous macro to the above one but for rematerialization.  */\n+#define LRA_MAX_REMATERIALIZATION_PASSES 2\n+\n+#if LRA_MAX_REMATERIALIZATION_PASSES <= 0 \\\n+    || LRA_MAX_REMATERIALIZATION_PASSES >= LRA_MAX_ASSIGNMENT_ITERATION_NUMBER - 8\n+#error wrong LRA_MAX_REMATERIALIZATION_PASSES value\n+#endif\n+\n /* lra.c: */\n \n extern FILE *lra_dump_file;\n@@ -392,6 +400,7 @@ extern void lra_final_code_change (void);\n \n /* lra-remat.c:  */\n \n+extern int lra_rematerialization_iter;\n extern bool lra_remat (void);\n \n /* lra-elimination.c: */"}, {"sha": "36ea79282deb462892edbcf8f2e67f75ed8858d0", "filename": "gcc/lra-remat.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9444692807a1129fd562281e911c550472434219/gcc%2Flra-remat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9444692807a1129fd562281e911c550472434219/gcc%2Flra-remat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-remat.c?ref=9444692807a1129fd562281e911c550472434219", "patch": "@@ -1259,6 +1259,9 @@ do_remat (void)\n \n \f\n \n+/* Current number of rematerialization iteration.  */\n+int lra_rematerialization_iter;\n+\n /* Entry point of the rematerialization sub-pass.  Return true if we\n    did any rematerialization.  */\n bool\n@@ -1270,6 +1273,13 @@ lra_remat (void)\n \n   if (! flag_lra_remat)\n     return false;\n+  lra_rematerialization_iter++;\n+  if (lra_rematerialization_iter > LRA_MAX_REMATERIALIZATION_PASSES)\n+    return false;\n+  if (lra_dump_file != NULL)\n+    fprintf (lra_dump_file,\n+\t     \"\\n******** Rematerialization #%d: ********\\n\\n\",\n+\t     lra_rematerialization_iter);\n   timevar_push (TV_LRA_REMAT);\n   insn_to_cand = XCNEWVEC (cand_t, get_max_uid ());\n   regno_cands = XCNEWVEC (cand_t, max_regno);"}, {"sha": "a29266e7ecc09c672013fb8a2a8114faf599b2a5", "filename": "gcc/lra.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9444692807a1129fd562281e911c550472434219/gcc%2Flra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9444692807a1129fd562281e911c550472434219/gcc%2Flra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra.c?ref=9444692807a1129fd562281e911c550472434219", "patch": "@@ -2260,6 +2260,7 @@ lra (FILE *f)\n   lra_live_range_iter = lra_coalesce_iter = lra_constraint_iter = 0;\n   lra_assignment_iter = lra_assignment_iter_after_spill = 0;\n   lra_inheritance_iter = lra_undo_inheritance_iter = 0;\n+  lra_rematerialization_iter = 0;\n \n   setup_reg_spill_flag ();\n \n@@ -2405,7 +2406,12 @@ lra (FILE *f)\n       /* Assignment of stack slots changes elimination offsets for\n \t some eliminations.  So update the offsets here.  */\n       lra_eliminate (false, false);\n-      lra_constraint_new_regno_start = max_reg_num ();\n+      /* After switching off inheritance and rematerialization passes,\n+\t don't forget reload pseudos after spilling sub-pass to avoid\n+\t LRA cycling in some complicated cases.  */\n+      if (lra_inheritance_iter <= LRA_MAX_INHERITANCE_PASSES\n+\t  || lra_rematerialization_iter <= LRA_MAX_REMATERIALIZATION_PASSES)\n+\tlra_constraint_new_regno_start = max_reg_num ();\n       lra_assignment_iter_after_spill = 0;\n     }\n   restore_scratches ();"}, {"sha": "bb7d971c96eacaf2fb5f395d80090f4276746b4e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9444692807a1129fd562281e911c550472434219/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9444692807a1129fd562281e911c550472434219/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9444692807a1129fd562281e911c550472434219", "patch": "@@ -1,3 +1,8 @@\n+2015-04-04  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR target/65647\n+\t* gcc.target/arm/pr65647.c: New.\n+\n 2015-04-03  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR ipa/65655"}, {"sha": "686eb587ae3fef79d5ec6e524b952c861d850303", "filename": "gcc/testsuite/gcc.target/arm/pr65647.c", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9444692807a1129fd562281e911c550472434219/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr65647.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9444692807a1129fd562281e911c550472434219/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr65647.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr65647.c?ref=9444692807a1129fd562281e911c550472434219", "patch": "@@ -0,0 +1,58 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=armv6-m -mthumb -O3 -w\" } */\n+\n+a, b, c, e, g = &e, h, i = 7, l = 1, m, n, o, q = &m, r, s = &r, u, w = 9, x,\n+  y = 6, z, t6 = 7, t8, t9 = 1, t11 = 5, t12 = &t8, t13 = 3, t15,\n+  t16 = &t15;\n+struct {\n+  long long f3;\n+    char f4\n+} p = {3}\n+\n+    ,\n+  t = {4};\n+\n+struct S1 {\n+  long long f0;\n+  short f1;\n+    long long f2\n+} d;\n+long long f = 4073709551613, t7 = 8, t14 = 4073709551610;\n+j[];\n+k = j;\n+v = &d;\n+*t10 = j;\n+struct S1 fn1();\n+struct S1 fn2() {\n+  signed char t1;\n+  struct S1 t2;\n+  long t3 = x;\n+  short t4 = h;\n+  short *t5 = &l;\n+  fn1(t2, w, 1, o);\n+  if (u) {\n+    l = q;\n+    t1 = a < b ?: b;\n+    z = c >= 2 || t1 << c;\n+  }\n+  *t5 = t4 &= t3;\n+  fn3(y);\n+}\n+\n+fn4() {\n+  t6 = t.f3;\n+  fn5(k, t7);\n+}\n+\n+struct S1 fn1() {\n+  f = 0;\n+  for (; i;)\n+    ;\n+  t11 = 0;\n+  t13 = *t10 = t14 || n;\n+  t9 = t12;\n+  for (; p.f4;)\n+    s = t16 <= fn6();\n+  if (g)\n+    v = 0;\n+}"}]}