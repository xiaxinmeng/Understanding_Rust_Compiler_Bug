{"sha": "493efd37cdfae36cc289d78ae81ce72d52fc4510", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDkzZWZkMzdjZGZhZTM2Y2MyODlkNzhhZTgxY2U3MmQ1MmZjNDUxMA==", "commit": {"author": {"name": "Toon Moene", "email": "toon@moene.indiv.nluug.nl", "date": "2001-07-18T05:26:38Z"}, "committer": {"name": "Toon Moene", "email": "toon@gcc.gnu.org", "date": "2001-07-18T05:26:38Z"}, "message": "combine.c (combine_simplify_rtx): DIV can be treated associatively for floats if...\n\n2001-07-18  Toon Moene  <toon@moene.indiv.nluug.nl>\n\n\t* combine.c (combine_simplify_rtx): DIV can be treated\n\tassociatively for floats if unsafe math optimisations are enabled.\n\nFrom-SVN: r44097", "tree": {"sha": "52785302a0f2c7c6c298e0451dbc15c422e5d962", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52785302a0f2c7c6c298e0451dbc15c422e5d962"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/493efd37cdfae36cc289d78ae81ce72d52fc4510", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/493efd37cdfae36cc289d78ae81ce72d52fc4510", "html_url": "https://github.com/Rust-GCC/gccrs/commit/493efd37cdfae36cc289d78ae81ce72d52fc4510", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/493efd37cdfae36cc289d78ae81ce72d52fc4510/comments", "author": null, "committer": null, "parents": [{"sha": "a7c07f1ef066dd8817eb2da0c66f60aef5fb3e84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7c07f1ef066dd8817eb2da0c66f60aef5fb3e84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7c07f1ef066dd8817eb2da0c66f60aef5fb3e84"}], "stats": {"total": 12, "additions": 8, "deletions": 4}, "files": [{"sha": "8beb99b68e3c3e98542c15a74ac1788571719f5e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/493efd37cdfae36cc289d78ae81ce72d52fc4510/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/493efd37cdfae36cc289d78ae81ce72d52fc4510/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=493efd37cdfae36cc289d78ae81ce72d52fc4510", "patch": "@@ -1,3 +1,8 @@\n+2001-07-18  Toon Moene  <toon@moene.indiv.nluug.nl>\n+\n+\t* combine.c (combine_simplify_rtx): DIV can be treated\n+\tassociatively for floats if unsafe math optimisations are enabled.\n+\n 2001-07-17  Richard Henderson  <rth@redhat.com>\n \n \t* reload.c (push_secondary_reload): Accept empty-string for ALL_REGS."}, {"sha": "b22dd9bb41b26c7c3026d2c7032719f8c6024d39", "filename": "gcc/combine.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/493efd37cdfae36cc289d78ae81ce72d52fc4510/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/493efd37cdfae36cc289d78ae81ce72d52fc4510/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=493efd37cdfae36cc289d78ae81ce72d52fc4510", "patch": "@@ -3722,10 +3722,10 @@ combine_simplify_rtx (x, op0_mode, last, in_dest)\n   /* If CODE is an associative operation not otherwise handled, see if we\n      can associate some operands.  This can win if they are constants or\n      if they are logically related (i.e. (a & b) & a).  */\n-  if ((code == PLUS || code == MINUS\n-       || code == MULT || code == AND || code == IOR || code == XOR\n+  if ((code == PLUS || code == MINUS || code == MULT || code == DIV\n+       || code == AND || code == IOR || code == XOR\n        || code == SMAX || code == SMIN || code == UMAX || code == UMIN)\n-      && (INTEGRAL_MODE_P (mode)\n+      && ((INTEGRAL_MODE_P (mode) && code != DIV)\n \t  || (flag_unsafe_math_optimizations && FLOAT_MODE_P (mode))))\n     {\n       if (GET_CODE (XEXP (x, 0)) == code)\n@@ -3745,7 +3745,6 @@ combine_simplify_rtx (x, op0_mode, last, in_dest)\n \t    }\n \t  inner = simplify_binary_operation (code == MINUS ? PLUS\n \t\t\t\t\t     : code == DIV ? MULT\n-\t\t\t\t\t     : code == UDIV ? MULT\n \t\t\t\t\t     : code,\n \t\t\t\t\t     mode, inner_op0, inner_op1);\n "}]}