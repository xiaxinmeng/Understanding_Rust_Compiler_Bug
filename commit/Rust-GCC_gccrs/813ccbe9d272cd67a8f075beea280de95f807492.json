{"sha": "813ccbe9d272cd67a8f075beea280de95f807492", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODEzY2NiZTlkMjcyY2Q2N2E4ZjA3NWJlZWEyODBkZTk1ZjgwNzQ5Mg==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-08-05T09:51:48Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-08-10T01:26:21Z"}, "message": "Support cond_ashr/lshr/ashl for vector integer modes under AVX512.\n\ngcc/ChangeLog:\n\n\t* config/i386/sse.md (cond_<insn><mode>): New expander.\n\t(VI248_AVX512VLBW): New mode iterator.\n\t* config/i386/predicates.md\n\t(nonimmediate_or_const_vec_dup_operand): New predicate.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/cond_op_shift_d-1.c: New test.\n\t* gcc.target/i386/cond_op_shift_d-2.c: New test.\n\t* gcc.target/i386/cond_op_shift_q-1.c: New test.\n\t* gcc.target/i386/cond_op_shift_q-2.c: New test.\n\t* gcc.target/i386/cond_op_shift_ud-1.c: New test.\n\t* gcc.target/i386/cond_op_shift_ud-2.c: New test.\n\t* gcc.target/i386/cond_op_shift_uq-1.c: New test.\n\t* gcc.target/i386/cond_op_shift_uq-2.c: New test.\n\t* gcc.target/i386/cond_op_shift_uw-1.c: New test.\n\t* gcc.target/i386/cond_op_shift_uw-2.c: New test.\n\t* gcc.target/i386/cond_op_shift_w-1.c: New test.\n\t* gcc.target/i386/cond_op_shift_w-2.c: New test.", "tree": {"sha": "349e852a5b090e07b07b02654b586ced5b5597af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/349e852a5b090e07b07b02654b586ced5b5597af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/813ccbe9d272cd67a8f075beea280de95f807492", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/813ccbe9d272cd67a8f075beea280de95f807492", "html_url": "https://github.com/Rust-GCC/gccrs/commit/813ccbe9d272cd67a8f075beea280de95f807492", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/813ccbe9d272cd67a8f075beea280de95f807492/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "377681505fb192876e277697e29d201e528d484a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/377681505fb192876e277697e29d201e528d484a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/377681505fb192876e277697e29d201e528d484a"}], "stats": {"total": 272, "additions": 272, "deletions": 0}, "files": [{"sha": "129205ac3a7f41e19a101649f5c52a57e3cdfa8d", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/813ccbe9d272cd67a8f075beea280de95f807492/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/813ccbe9d272cd67a8f075beea280de95f807492/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=813ccbe9d272cd67a8f075beea280de95f807492", "patch": "@@ -1161,6 +1161,10 @@\n   (ior (match_operand 0 \"nonimmediate_operand\")\n        (match_code \"const_vector\")))\n \n+(define_predicate \"nonimmediate_or_const_vec_dup_operand\"\n+  (ior (match_operand 0 \"nonimmediate_operand\")\n+       (match_test \"const_vec_duplicate_p (op)\")))\n+\n ;; Return true when OP is either register operand, or any\n ;; CONST_VECTOR.\n (define_predicate \"reg_or_const_vector_operand\""}, {"sha": "45b1ec2add4d251ff1e45e887d0c431daa74ce89", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/813ccbe9d272cd67a8f075beea280de95f807492/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/813ccbe9d272cd67a8f075beea280de95f807492/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=813ccbe9d272cd67a8f075beea280de95f807492", "patch": "@@ -506,6 +506,13 @@\n    (V4DI \"TARGET_AVX512VL\") (V8HI \"TARGET_AVX512VL\")\n    (V4SI \"TARGET_AVX512VL\") (V2DI \"TARGET_AVX512VL\")])\n \n+(define_mode_iterator VI248_AVX512VLBW\n+  [(V32HI \"TARGET_AVX512BW\")\n+   (V16HI \"TARGET_AVX512VL && TARGET_AVX512BW\")\n+   (V8HI \"TARGET_AVX512VL && TARGET_AVX512BW\")\n+   V16SI (V8SI \"TARGET_AVX512VL\") (V4SI \"TARGET_AVX512VL\")\n+   V8DI (V4DI \"TARGET_AVX512VL\") (V2DI \"TARGET_AVX512VL\")])\n+\n (define_mode_iterator VI48_AVX2\n   [(V8SI \"TARGET_AVX2\") V4SI\n    (V4DI \"TARGET_AVX2\") V2DI])\n@@ -22786,6 +22793,35 @@\n   DONE;\n })\n \n+(define_expand \"cond_<insn><mode>\"\n+  [(set (match_operand:VI248_AVX512VLBW 0 \"register_operand\")\n+\t(vec_merge:VI248_AVX512VLBW\n+\t  (any_shift:VI248_AVX512VLBW\n+\t    (match_operand:VI248_AVX512VLBW 2 \"register_operand\")\n+\t    (match_operand:VI248_AVX512VLBW 3 \"nonimmediate_or_const_vec_dup_operand\"))\n+\t  (match_operand:VI248_AVX512VLBW 4 \"nonimm_or_0_operand\")\n+\t  (match_operand:<avx512fmaskmode> 1 \"register_operand\")))]\n+  \"TARGET_AVX512F\"\n+{\n+  if (const_vec_duplicate_p (operands[3]))\n+    {\n+      operands[3] = unwrap_const_vec_duplicate (operands[3]);\n+      operands[3] = lowpart_subreg (DImode, operands[3], <ssescalarmode>mode);\n+      emit_insn (gen_<insn><mode>3_mask (operands[0],\n+\t\t\t\t\t operands[2],\n+\t\t\t\t\t operands[3],\n+\t\t\t\t\t operands[4],\n+\t\t\t\t\t operands[1]));\n+    }\n+  else\n+    emit_insn (gen_<avx2_avx512>_<insn>v<mode>_mask (operands[0],\n+\t\t\t\t\t\t     operands[2],\n+\t\t\t\t\t\t     operands[3],\n+\t\t\t\t\t\t     operands[4],\n+\t\t\t\t\t\t     operands[1]));\n+  DONE;\n+})\n+\n (define_insn \"<avx2_avx512>_ashrv<mode><mask_name>\"\n   [(set (match_operand:VI48_AVX512F_AVX512VL 0 \"register_operand\" \"=v\")\n \t(ashiftrt:VI48_AVX512F_AVX512VL"}, {"sha": "af047b6ed9529eeab6e6d6185f221ba403439f6c", "filename": "gcc/testsuite/gcc.target/i386/cond_op_shift_d-1.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/813ccbe9d272cd67a8f075beea280de95f807492/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_shift_d-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/813ccbe9d272cd67a8f075beea280de95f807492/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_shift_d-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_shift_d-1.c?ref=813ccbe9d272cd67a8f075beea280de95f807492", "patch": "@@ -0,0 +1,56 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=skylake-avx512 -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \".COND_SHR\" 2 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \".COND_SHL\" 2 \"optimized\" } } */\n+/* { dg-final { scan-assembler-times \"vpsrad\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vpslld\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vpsravd\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vpsllvd\"  1 } } */\n+\n+\n+typedef short int16;\n+typedef unsigned short uint16;\n+typedef int int32;\n+typedef unsigned int uint32;\n+typedef long long int64;\n+typedef unsigned long long uint64;\n+\n+#ifndef NUM\n+#define NUM 800\n+#endif\n+#ifndef TYPE\n+#define TYPE int\n+#endif\n+\n+TYPE a[NUM], b[NUM], c[NUM], d[NUM], e[NUM], j[NUM];\n+#define MIN(X,Y) ((X) < (Y) ? (X) : (Y))\n+#define MAX(X,Y) ((X) < (Y) ? (Y) : (X))\n+\n+#define BINC(OPNAME, OP)\t\t\t\\\n+  void\t\t\t\t\t\t\\\n+  __attribute__ ((noipa,optimize (\"O3\")))\t\\\n+  foo_##OPNAME##_const ()\t\t\t\\\n+  {\t\t\t\t\t\t\\\n+    for (int i = 0; i != NUM; i++)\t\t\\\n+      if (b[i] < c[i])\t\t\t\t\\\n+\ta[i] = d[i] OP 3;\t\t\t\\\n+      else\t\t\t\t\t\\\n+\ta[i] = MAX(d[i], e[i]);\t\t\\\n+  }\n+\n+#define BINV(OPNAME, OP)\t\t\t\\\n+  void\t\t\t\t\t\t\\\n+  __attribute__ ((noipa,optimize (\"O3\")))\t\\\n+  foo_##OPNAME##_variable ()\t\t\t\\\n+  {\t\t\t\t\t\t\\\n+    for (int i = 0; i != NUM; i++)\t\t\\\n+      if (b[i] < c[i])\t\t\t\t\\\n+\ta[i] = d[i] OP e[i];\t\t\t\\\n+      else\t\t\t\t\t\\\n+\ta[i] = MAX(d[i], e[i]);\t\t\\\n+  }\n+\n+BINC (shl, <<);\n+BINC (shr, >>);\n+BINV (shl, <<);\n+BINV (shr, >>);"}, {"sha": "449e5b44be2301f6917797e41f40c0158625356e", "filename": "gcc/testsuite/gcc.target/i386/cond_op_shift_d-2.c", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/813ccbe9d272cd67a8f075beea280de95f807492/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_shift_d-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/813ccbe9d272cd67a8f075beea280de95f807492/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_shift_d-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_shift_d-2.c?ref=813ccbe9d272cd67a8f075beea280de95f807492", "patch": "@@ -0,0 +1,102 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512vl -mprefer-vector-width=256\" } */\n+/* { dg-require-effective-target avx512vl } */\n+\n+#define AVX512VL\n+#ifndef CHECK\n+#define CHECK \"avx512f-helper.h\"\n+#endif\n+\n+#include CHECK\n+\n+#include \"cond_op_shift_d-1.c\"\n+\n+#define BINO2C(OPNAME, OP)\t\t\t\\\n+  void\t\t\t\t\t\t\\\n+  __attribute__ ((noipa,optimize (\"O2\")))\t\\\n+  foo_o2_##OPNAME##_const ()\t\t\t\\\n+  {\t\t\t\t\t\t\\\n+    for (int i = 0; i != NUM; i++)\t\t\\\n+      if (b[i] < c[i])\t\t\t\t\\\n+\tj[i] = d[i] OP 3;\t\t\t\\\n+      else\t\t\t\t\t\\\n+\tj[i] = MAX(d[i], e[i]);\t\t\t\\\n+  }\n+\n+#define BINO2V(OPNAME, OP)\t\t\t\\\n+  void\t\t\t\t\t\t\\\n+  __attribute__ ((noipa,optimize (\"O2\")))\t\\\n+  foo_o2_##OPNAME##_variable ()\t\t\t\\\n+  {\t\t\t\t\t\t\\\n+    for (int i = 0; i != NUM; i++)\t\t\\\n+      if (b[i] < c[i])\t\t\t\t\\\n+\tj[i] = d[i] OP e[i];\t\t\t\\\n+      else\t\t\t\t\t\\\n+\tj[i] = MAX(d[i], e[i]);\t\t\t\\\n+  }\n+\n+BINO2C (shl, <<);\n+BINO2C (shr, >>);\n+BINO2V (shl, <<);\n+BINO2V (shr, >>);\n+\n+static void\n+test_256 (void)\n+{\n+  int sign = -1;\n+  for (int i = 0; i != NUM; i++)\n+    {\n+      a[i] = 0;\n+      d[i] = i * 2;\n+      e[i] = (i * i * 3 - i * 9 + 6)%8;\n+      b[i] = i * 83;\n+      c[i] = b[i] + sign;\n+      sign *= -1;\n+      j[i] = 1;\n+    }\n+  foo_shl_const ();\n+  foo_o2_shl_const ();\n+  for (int i = 0; i != NUM; i++)\n+    {\n+      if (a[i] != j[i])\n+\tabort ();\n+      a[i] = 0;\n+      b[i] = 1;\n+    }\n+\n+  foo_shr_const ();\n+  foo_o2_shr_const ();\n+  for (int i = 0; i != NUM; i++)\n+    {\n+      if (a[i] != j[i])\n+  \tabort ();\n+      a[i] = 0;\n+      j[i] = 1;\n+    }\n+\n+  foo_shl_variable ();\n+  foo_o2_shl_variable ();\n+  for (int i = 0; i != NUM; i++)\n+    {\n+      if (a[i] != j[i])\n+\tabort ();\n+      a[i] = 0;\n+      b[i] = 1;\n+    }\n+\n+  foo_shr_variable ();\n+  foo_o2_shr_variable ();\n+  for (int i = 0; i != NUM; i++)\n+    {\n+      if (a[i] != j[i])\n+  \tabort ();\n+      a[i] = 0;\n+      j[i] = 1;\n+    }\n+}\n+\n+static void\n+test_128 ()\n+{\n+  \n+}"}, {"sha": "1b981b57497d0ed68909aaf4bbbbfee16dac0bdf", "filename": "gcc/testsuite/gcc.target/i386/cond_op_shift_q-1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/813ccbe9d272cd67a8f075beea280de95f807492/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_shift_q-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/813ccbe9d272cd67a8f075beea280de95f807492/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_shift_q-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_shift_q-1.c?ref=813ccbe9d272cd67a8f075beea280de95f807492", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=skylake-avx512 -fdump-tree-optimized -DTYPE=int64\" } */\n+/* { dg-final { scan-tree-dump-times \".COND_SHR\" 2 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \".COND_SHL\" 2 \"optimized\" } } */\n+/* { dg-final { scan-assembler-times \"vpsravq\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vpsllvq\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vpsravq\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vpsllvq\"  1 } } */\n+\n+\n+#include \"cond_op_shift_d-1.c\""}, {"sha": "94f1d71cbc9de1799ab8902d9e9143480f6ca5d8", "filename": "gcc/testsuite/gcc.target/i386/cond_op_shift_q-2.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/813ccbe9d272cd67a8f075beea280de95f807492/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_shift_q-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/813ccbe9d272cd67a8f075beea280de95f807492/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_shift_q-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_shift_q-2.c?ref=813ccbe9d272cd67a8f075beea280de95f807492", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512vl -mprefer-vector-width=256 -DTYPE=int64\" } */\n+/* { dg-require-effective-target avx512vl } */\n+\n+#include \"cond_op_shift_d-2.c\""}, {"sha": "eea0f6720c6a2222807afcb17102fe3d867c3c80", "filename": "gcc/testsuite/gcc.target/i386/cond_op_shift_ud-1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/813ccbe9d272cd67a8f075beea280de95f807492/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_shift_ud-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/813ccbe9d272cd67a8f075beea280de95f807492/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_shift_ud-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_shift_ud-1.c?ref=813ccbe9d272cd67a8f075beea280de95f807492", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=skylake-avx512 -fdump-tree-optimized -DTYPE=uint32\" } */\n+/* { dg-final { scan-tree-dump-times \".COND_SHR\" 2 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \".COND_SHL\" 2 \"optimized\" } } */\n+/* { dg-final { scan-assembler-times \"vpsrlvd\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vpsllvd\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vpsrlvd\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vpsllvd\"  1 } } */\n+\n+#include \"cond_op_shift_d-1.c\""}, {"sha": "b18c568b26b3b93606a136b093cc4e5bf4660c5e", "filename": "gcc/testsuite/gcc.target/i386/cond_op_shift_ud-2.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/813ccbe9d272cd67a8f075beea280de95f807492/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_shift_ud-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/813ccbe9d272cd67a8f075beea280de95f807492/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_shift_ud-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_shift_ud-2.c?ref=813ccbe9d272cd67a8f075beea280de95f807492", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512vl -mprefer-vector-width=256 -DTYPE=uint32\" } */\n+/* { dg-require-effective-target avx512vl } */\n+\n+#include \"cond_op_shift_d-2.c\""}, {"sha": "77a03886d06ce7210a5dcbbc1df10c2d8e039529", "filename": "gcc/testsuite/gcc.target/i386/cond_op_shift_uq-1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/813ccbe9d272cd67a8f075beea280de95f807492/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_shift_uq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/813ccbe9d272cd67a8f075beea280de95f807492/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_shift_uq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_shift_uq-1.c?ref=813ccbe9d272cd67a8f075beea280de95f807492", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=skylake-avx512 -fdump-tree-optimized -DTYPE=uint64\" } */\n+/* { dg-final { scan-tree-dump-times \".COND_SHR\" 2 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \".COND_SHL\" 2 \"optimized\" } } */\n+/* { dg-final { scan-assembler-times \"vpsrlq\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vpsllq\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vpsrlq\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vpsllq\"  1 } } */\n+\n+#include \"cond_op_shift_d-1.c\""}, {"sha": "a9e0acf9ab2b7906d84fc6486da7d3c862e5832c", "filename": "gcc/testsuite/gcc.target/i386/cond_op_shift_uq-2.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/813ccbe9d272cd67a8f075beea280de95f807492/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_shift_uq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/813ccbe9d272cd67a8f075beea280de95f807492/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_shift_uq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_shift_uq-2.c?ref=813ccbe9d272cd67a8f075beea280de95f807492", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512vl -mprefer-vector-width=256 -DTYPE=uint64\" } */\n+/* { dg-require-effective-target avx512vl } */\n+\n+#include \"cond_op_shift_d-2.c\""}, {"sha": "b84cdd89e3e9e3886be29650d1616ecdfd1182a4", "filename": "gcc/testsuite/gcc.target/i386/cond_op_shift_uw-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/813ccbe9d272cd67a8f075beea280de95f807492/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_shift_uw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/813ccbe9d272cd67a8f075beea280de95f807492/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_shift_uw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_shift_uw-1.c?ref=813ccbe9d272cd67a8f075beea280de95f807492", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=skylake-avx512 -fdump-tree-optimized -DTYPE=uint16\" } */\n+/* { dg-final { scan-tree-dump-times \".COND_SHR\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \".COND_SHL\" 1 \"optimized\" } } */\n+/* { dg-final { scan-assembler-times \"vpsrlw\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vpsllw\"  1 } } */\n+\n+#include \"cond_op_shift_d-1.c\""}, {"sha": "cfdece9f95bc0e83bb3898db80e7da18fb23c6bb", "filename": "gcc/testsuite/gcc.target/i386/cond_op_shift_uw-2.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/813ccbe9d272cd67a8f075beea280de95f807492/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_shift_uw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/813ccbe9d272cd67a8f075beea280de95f807492/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_shift_uw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_shift_uw-2.c?ref=813ccbe9d272cd67a8f075beea280de95f807492", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512vl -mavx512bw -mprefer-vector-width=256 -DTYPE=uint16\" } */\n+/* { dg-require-effective-target avx512vl } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"cond_op_shift_d-2.c\""}, {"sha": "54c854f2f378a10330e7cb857a2e8d1fe52494f9", "filename": "gcc/testsuite/gcc.target/i386/cond_op_shift_w-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/813ccbe9d272cd67a8f075beea280de95f807492/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_shift_w-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/813ccbe9d272cd67a8f075beea280de95f807492/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_shift_w-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_shift_w-1.c?ref=813ccbe9d272cd67a8f075beea280de95f807492", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=skylake-avx512 -fdump-tree-optimized -DTYPE=int16\" } */\n+/* { dg-final { scan-tree-dump-times \".COND_SHR\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \".COND_SHL\" 1 \"optimized\" } } */\n+/* { dg-final { scan-assembler-times \"vpsraw\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vpsllw\"  1 } } */\n+\n+#include \"cond_op_shift_d-1.c\""}, {"sha": "577682657dc236886adfafa4d7bffe436d08ad83", "filename": "gcc/testsuite/gcc.target/i386/cond_op_shift_w-2.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/813ccbe9d272cd67a8f075beea280de95f807492/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_shift_w-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/813ccbe9d272cd67a8f075beea280de95f807492/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_shift_w-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcond_op_shift_w-2.c?ref=813ccbe9d272cd67a8f075beea280de95f807492", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512vl -mavx512bw -mprefer-vector-width=256 -DTYPE=int16\" } */\n+/* { dg-require-effective-target avx512vl } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"cond_op_shift_d-2.c\""}]}