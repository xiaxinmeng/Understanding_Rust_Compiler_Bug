{"sha": "ebccab778e3265f39cae0b3bd45288f20b9d813d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWJjY2FiNzc4ZTMyNjVmMzljYWUwYjNiZDQ1Mjg4ZjIwYjlkODEzZA==", "commit": {"author": {"name": "Pascal Obry", "email": "obry@adacore.com", "date": "2005-06-16T08:43:17Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-06-16T08:43:17Z"}, "message": "mdll.adb (Get_Dll_Name): New routine that returns the DLL name given the library name.\n\n2005-06-14  Pascal Obry  <obry@adacore.com>\n\n\t* mdll.adb (Get_Dll_Name): New routine that returns the DLL name given\n\tthe library name.\n\nFrom-SVN: r101048", "tree": {"sha": "338bb407c6d2aafb3f4b0f334d9d7e792902119b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/338bb407c6d2aafb3f4b0f334d9d7e792902119b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ebccab778e3265f39cae0b3bd45288f20b9d813d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebccab778e3265f39cae0b3bd45288f20b9d813d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebccab778e3265f39cae0b3bd45288f20b9d813d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebccab778e3265f39cae0b3bd45288f20b9d813d/comments", "author": {"login": "TurboGit", "id": 467069, "node_id": "MDQ6VXNlcjQ2NzA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/467069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TurboGit", "html_url": "https://github.com/TurboGit", "followers_url": "https://api.github.com/users/TurboGit/followers", "following_url": "https://api.github.com/users/TurboGit/following{/other_user}", "gists_url": "https://api.github.com/users/TurboGit/gists{/gist_id}", "starred_url": "https://api.github.com/users/TurboGit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TurboGit/subscriptions", "organizations_url": "https://api.github.com/users/TurboGit/orgs", "repos_url": "https://api.github.com/users/TurboGit/repos", "events_url": "https://api.github.com/users/TurboGit/events{/privacy}", "received_events_url": "https://api.github.com/users/TurboGit/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "844e7daa7eb2e155e6e491d096165847f47a7020", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/844e7daa7eb2e155e6e491d096165847f47a7020", "html_url": "https://github.com/Rust-GCC/gccrs/commit/844e7daa7eb2e155e6e491d096165847f47a7020"}], "stats": {"total": 108, "additions": 66, "deletions": 42}, "files": [{"sha": "c6d09924ab7c89750ba03af4e395fd85aaf889ef", "filename": "gcc/ada/mdll.adb", "status": "modified", "additions": 66, "deletions": 42, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebccab778e3265f39cae0b3bd45288f20b9d813d/gcc%2Fada%2Fmdll.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebccab778e3265f39cae0b3bd45288f20b9d813d/gcc%2Fada%2Fmdll.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmdll.adb?ref=ebccab778e3265f39cae0b3bd45288f20b9d813d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2004 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2005 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -38,6 +38,10 @@ package body MDLL is\n    use Ada;\n    use GNAT;\n \n+   function Get_Dll_Name (Lib_Filename : String) return String;\n+   --  Returns <Lib_Filename> if it contains a file extension otherwise it\n+   --  returns <Lib_Filename>.dll.\n+\n    ---------------------------\n    -- Build_Dynamic_Library --\n    ---------------------------\n@@ -63,7 +67,7 @@ package body MDLL is\n       Def_File : aliased constant String := Def_Filename;\n       Jnk_File : aliased          String := Base_Filename & \".jnk\";\n       Bas_File : aliased constant String := Base_Filename & \".base\";\n-      Dll_File : aliased          String := Base_Filename & \".dll\";\n+      Dll_File : aliased          String := Get_Dll_Name (Lib_Filename);\n       Exp_File : aliased          String := Base_Filename & \".exp\";\n       Lib_File : aliased constant String := \"lib\" & Base_Filename & \".a\";\n \n@@ -75,34 +79,36 @@ package body MDLL is\n \n       L_Afiles : Argument_List := Afiles;\n       --  Local afiles list. This list can be reordered to ensure that the\n-      --  binder ali file is not the first entry in this list.\n+      --  binder ALI file is not the first entry in this list.\n \n       All_Options : constant Argument_List := Options & Largs_Options;\n \n       procedure Build_Reloc_DLL;\n-      --  Build a relocatable DLL with only objects file specified.\n-      --  this use the well known 5 steps build. (see GNAT User's Guide).\n+      --  Build a relocatable DLL with only objects file specified. This uses\n+      --  the well known five step build (see GNAT User's Guide).\n \n       procedure Ada_Build_Reloc_DLL;\n-      --  Build a relocatable DLL with Ada code.\n-      --  this use the well known 5 steps build. (see GNAT User's Guide).\n+      --  Build a relocatable DLL with Ada code. This uses the well known five\n+      --  step build (see GNAT User's Guide).\n \n       procedure Build_Non_Reloc_DLL;\n-      --  Build a non relocatable DLL containing no Ada code.\n+      --  Build a non relocatable DLL containing no Ada code\n \n       procedure Ada_Build_Non_Reloc_DLL;\n-      --  Build a non relocatable DLL with Ada code.\n+      --  Build a non relocatable DLL with Ada code\n \n       ---------------------\n       -- Build_Reloc_DLL --\n       ---------------------\n \n       procedure Build_Reloc_DLL is\n+\n+         Objects_Exp_File : constant OS_Lib.Argument_List :=\n+                              Exp_File'Unchecked_Access & Ofiles;\n          --  Objects plus the export table (.exp) file\n-         Objects_Exp_File : constant OS_Lib.Argument_List\n-           := Exp_File'Unchecked_Access & Ofiles;\n \n          Success : Boolean;\n+\n       begin\n          if not Quiet then\n             Text_IO.Put_Line (\"building relocatable DLL...\");\n@@ -115,22 +121,22 @@ package body MDLL is\n             end if;\n          end if;\n \n-         --  1) Build base file with objects files.\n+         --  1) Build base file with objects files\n \n          Utl.Gcc (Output_File => Jnk_File,\n                   Files       => Ofiles,\n                   Options     => All_Options,\n                   Base_File   => Bas_File,\n                   Build_Lib   => True);\n \n-         --  2) Build exp from base file.\n+         --  2) Build exp from base file\n \n          Utl.Dlltool (Def_File, Dll_File, Lib_File,\n                       Base_File    => Bas_File,\n                       Exp_Table    => Exp_File,\n                       Build_Import => False);\n \n-         --  3) Build base file with exp file and objects files.\n+         --  3) Build base file with exp file and objects files\n \n          Utl.Gcc (Output_File => Jnk_File,\n                   Files       => Objects_Exp_File,\n@@ -150,6 +156,7 @@ package body MDLL is\n          declare\n             Params : OS_Lib.Argument_List :=\n                        Adr_Opt'Unchecked_Access & All_Options;\n+\n          begin\n             if Map_File then\n                Params := Map_Opt'Unchecked_Access & Params;\n@@ -180,6 +187,7 @@ package body MDLL is\n \n       procedure Ada_Build_Reloc_DLL is\n          Success : Boolean;\n+\n       begin\n          if not Quiet then\n             Text_IO.Put_Line (\"Building relocatable DLL...\");\n@@ -192,7 +200,7 @@ package body MDLL is\n             end if;\n          end if;\n \n-         --  1) Build base file with objects files.\n+         --  1) Build base file with objects files\n \n          Utl.Gnatbind (L_Afiles, Options & Bargs_Options);\n \n@@ -208,14 +216,14 @@ package body MDLL is\n             Utl.Gnatlink (L_Afiles (L_Afiles'Last).all, Params);\n          end;\n \n-         --  2) Build exp from base file.\n+         --  2) Build exp from base file\n \n          Utl.Dlltool (Def_File, Dll_File, Lib_File,\n                       Base_File    => Bas_File,\n                       Exp_Table    => Exp_File,\n                       Build_Import => False);\n \n-         --  3) Build base file with exp file and objects files.\n+         --  3) Build base file with exp file and objects files\n \n          Utl.Gnatbind (L_Afiles, Options & Bargs_Options);\n \n@@ -278,6 +286,7 @@ package body MDLL is\n \n       procedure Build_Non_Reloc_DLL is\n          Success : Boolean;\n+\n       begin\n          if not Quiet then\n             Text_IO.Put_Line (\"building non relocatable DLL...\");\n@@ -291,7 +300,7 @@ package body MDLL is\n             end if;\n          end if;\n \n-         --  Build exp table and the lib .a file.\n+         --  Build exp table and the lib .a file\n \n          Utl.Dlltool (Def_File, Dll_File, Lib_File,\n                       Exp_Table    => Exp_File,\n@@ -325,10 +334,11 @@ package body MDLL is\n       -- Ada_Build_Non_Reloc_DLL --\n       -----------------------------\n \n-      --  Build a non relocatable DLL with Ada code.\n+      --  Build a non relocatable DLL with Ada code\n \n       procedure Ada_Build_Non_Reloc_DLL is\n          Success : Boolean;\n+\n       begin\n          if not Quiet then\n             Text_IO.Put_Line (\"building non relocatable DLL...\");\n@@ -342,7 +352,7 @@ package body MDLL is\n             end if;\n          end if;\n \n-         --  Build exp table and the lib .a file.\n+         --  Build exp table and the lib .a file\n \n          Utl.Dlltool (Def_File, Dll_File, Lib_File,\n                       Exp_Table    => Exp_File,\n@@ -378,9 +388,9 @@ package body MDLL is\n       end Ada_Build_Non_Reloc_DLL;\n \n    begin\n-      --  On Windows the binder file must not be in the first position\n-      --  in the list. This is due to the way DLL's are built on Windows.\n-      --  We swap the first ali with the last one if it is the case.\n+      --  On Windows the binder file must not be in the first position in the\n+      --  list. This is due to the way DLL's are built on Windows. We swap the\n+      --  first ali with the last one if it is the case.\n \n       if L_Afiles'Length > 1 then\n          declare\n@@ -422,43 +432,57 @@ package body MDLL is\n       Def_Filename : String)\n    is\n \n-      procedure Build_Import_Library (Def_Base_Filename : String);\n-      --  Build an import library.\n-      --  this is to build only a .a library to link against a DLL.\n-\n-      Base_Filename : constant String := MDLL.Fil.Ext_To (Lib_Filename);\n+      procedure Build_Import_Library (Lib_Filename : String);\n+      --  Build an import library. This is to build only a .a library to link\n+      --  against a DLL.\n \n       --------------------------\n       -- Build_Import_Library --\n       --------------------------\n \n-      procedure Build_Import_Library (Def_Base_Filename : String) is\n-         Def_File : String renames Def_Filename;\n-         Dll_File : constant String := Def_Base_Filename & \".dll\";\n-         Lib_File : constant String := \"lib\" & Base_Filename & \".a\";\n+      procedure Build_Import_Library (Lib_Filename : String) is\n+         Def_File      : String renames Def_Filename;\n+         Dll_File      : constant String := Get_Dll_Name (Lib_Filename);\n+         Base_Filename : constant String := MDLL.Fil.Ext_To (Lib_Filename);\n+         Lib_File      : constant String := \"lib\" & Base_Filename & \".a\";\n \n       begin\n          if not Quiet then\n             Text_IO.Put_Line (\"Building import library...\");\n-            Text_IO.Put_Line (\"make \" & Lib_File &\n-                              \" to use dynamic library \" & Dll_File);\n+            Text_IO.Put_Line\n+              (\"make \" & Lib_File & \" to use dynamic library \" & Dll_File);\n          end if;\n \n-         Utl.Dlltool (Def_File, Dll_File, Lib_File,\n-                      Build_Import => True);\n+         Utl.Dlltool\n+           (Def_File, Dll_File, Lib_File, Build_Import => True);\n       end Build_Import_Library;\n \n+   --  Start of processing for Build_Import_Library\n+\n    begin\n-      --  If the library has the form lib<name>.a then the def file should\n-      --  be <name>.def and the DLL to link against <name>.dll\n-      --  this is a Windows convention and we try as much as possible to\n-      --  follow the platform convention.\n+      --  If the library has the form lib<name>.a then the def file should be\n+      --  <name>.def and the DLL to link against <name>.dll. This is a Windows\n+      --  convention and we try as much as possible to follow the platform\n+      --  convention.\n \n       if Lib_Filename'Length > 3 and then Lib_Filename (1 .. 3) = \"lib\" then\n-         Build_Import_Library (Base_Filename (4 .. Base_Filename'Last));\n+         Build_Import_Library (Lib_Filename (4 .. Lib_Filename'Last));\n       else\n-         Build_Import_Library (Base_Filename);\n+         Build_Import_Library (Lib_Filename);\n       end if;\n    end Build_Import_Library;\n \n+   ------------------\n+   -- Get_Dll_Name --\n+   ------------------\n+\n+   function Get_Dll_Name (Lib_Filename : in String) return String is\n+   begin\n+      if MDLL.Fil.Get_Ext (Lib_Filename) = \"\" then\n+         return Lib_Filename & \".dll\";\n+      else\n+         return Lib_Filename;\n+      end if;\n+   end Get_Dll_Name;\n+\n end MDLL;"}]}