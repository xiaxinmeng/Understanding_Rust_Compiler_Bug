{"sha": "54200abb68aed1ddf147251fcbe402549482d499", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTQyMDBhYmI2OGFlZDFkZGYxNDcyNTFmY2JlNDAyNTQ5NDgyZDQ5OQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2006-12-13T09:57:56Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2006-12-13T09:57:56Z"}, "message": "re PR fortran/30115 (allocate() interface pessimizes aliasing)\n\n2006-12-13  Richard Guenther  <rguenther@suse.de>\n\n\tPR fortran/30115\n\t* runtime/memory.c (allocate_size): Change interface to\n\tvoid *()(size_t, GFC_INTEGER_4 *).\n\t(allocate): Likewise.\n\t(allocate64): Likewise.\n\t(allocate_array): Change interface to\n\tvoid *()(void *, size_t, GFC_INTEGER_4 *).\n\t(allocate64_array): Likewise.\n\t(deallocate): Change interface to\n\tvoid ()(void *, GFC_INTEGER_4 *).\n\n\t* trans-array.c (gfc_array_allocate): Adjust for changed\n\tlibrary interface.\n\t(gfc_array_deallocate): Likewise.\n\t(gfc_trans_dealloc_allocated): Likewise.\n\t* trans-stmt.c (gfc_trans_allocate): Likewise.\n\t(gfc_trans_deallocate): Likewise.\n\t* trans-decl.c (gfc_build_builtin_function_decls): Adjust\n\tfunction declarations to match the library changes.  Mark\n\tallocation functions with DECL_IS_MALLOC.\n\nFrom-SVN: r119822", "tree": {"sha": "7999ad0c5cf8c4027a341ed6f21ea1817f74f26f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7999ad0c5cf8c4027a341ed6f21ea1817f74f26f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/54200abb68aed1ddf147251fcbe402549482d499", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54200abb68aed1ddf147251fcbe402549482d499", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54200abb68aed1ddf147251fcbe402549482d499", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54200abb68aed1ddf147251fcbe402549482d499/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "691eb42f298517910cad955f90ebee321766dcf3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/691eb42f298517910cad955f90ebee321766dcf3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/691eb42f298517910cad955f90ebee321766dcf3"}], "stats": {"total": 206, "additions": 108, "deletions": 98}, "files": [{"sha": "fdc054ecfc4271dc661e77c3f397d32b0140e0c4", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54200abb68aed1ddf147251fcbe402549482d499/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54200abb68aed1ddf147251fcbe402549482d499/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=54200abb68aed1ddf147251fcbe402549482d499", "patch": "@@ -1,3 +1,16 @@\n+2006-12-13  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR fortran/30115\n+\t* trans-array.c (gfc_array_allocate): Adjust for changed\n+\tlibrary interface.\n+\t(gfc_array_deallocate): Likewise.\n+\t(gfc_trans_dealloc_allocated): Likewise.\n+\t* trans-stmt.c (gfc_trans_allocate): Likewise.\n+\t(gfc_trans_deallocate): Likewise.\n+\t* trans-decl.c (gfc_build_builtin_function_decls): Adjust\n+\tfunction declarations to match the library changes.  Mark\n+\tallocation functions with DECL_IS_MALLOC.\n+\n 2006-12-12  Tobias Schl\ufffd\ufffdter  <tobias.schlueter@physik.uni-muenchen.de>\n \n \t* trans-expr.c (gfc_conv_substring): Check for empty substring."}, {"sha": "b65ec748f47ad4e87a1cb406bbef6162e80b5955", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54200abb68aed1ddf147251fcbe402549482d499/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54200abb68aed1ddf147251fcbe402549482d499/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=54200abb68aed1ddf147251fcbe402549482d499", "patch": "@@ -3355,8 +3355,8 @@ gfc_array_allocate (gfc_se * se, gfc_expr * expr, tree pstat)\n \t\t\t      lower, upper, &se->pre);\n \n   /* Allocate memory to store the data.  */\n-  tmp = gfc_conv_descriptor_data_addr (se->expr);\n-  pointer = gfc_evaluate_now (tmp, &se->pre);\n+  pointer = gfc_conv_descriptor_data_get (se->expr);\n+  STRIP_NOPS (pointer);\n \n   if (TYPE_PRECISION (gfc_array_index_type) == 32)\n     {\n@@ -3375,10 +3375,14 @@ gfc_array_allocate (gfc_se * se, gfc_expr * expr, tree pstat)\n   else\n     gcc_unreachable ();\n \n-  tmp = gfc_chainon_list (NULL_TREE, pointer);\n+  tmp = NULL_TREE;\n+  /* The allocate_array variants take the old pointer as first argument.  */\n+  if (allocatable_array)\n+    tmp = gfc_chainon_list (tmp, pointer);\n   tmp = gfc_chainon_list (tmp, size);\n   tmp = gfc_chainon_list (tmp, pstat);\n   tmp = build_function_call_expr (allocate, tmp);\n+  tmp = build2 (MODIFY_EXPR, void_type_node, pointer, tmp);\n   gfc_add_expr_to_block (&se->pre, tmp);\n \n   tmp = gfc_conv_descriptor_offset (se->expr);\n@@ -3409,15 +3413,20 @@ gfc_array_deallocate (tree descriptor, tree pstat)\n \n   gfc_start_block (&block);\n   /* Get a pointer to the data.  */\n-  tmp = gfc_conv_descriptor_data_addr (descriptor);\n-  var = gfc_evaluate_now (tmp, &block);\n+  var = gfc_conv_descriptor_data_get (descriptor);\n+  STRIP_NOPS (var);\n \n   /* Parameter is the address of the data component.  */\n   tmp = gfc_chainon_list (NULL_TREE, var);\n   tmp = gfc_chainon_list (tmp, pstat);\n   tmp = build_function_call_expr (gfor_fndecl_deallocate, tmp);\n   gfc_add_expr_to_block (&block, tmp);\n \n+  /* Zero the data pointer.  */\n+  tmp = build2 (MODIFY_EXPR, void_type_node,\n+                var, build_int_cst (TREE_TYPE (var), 0));\n+  gfc_add_expr_to_block (&block, tmp);\n+\n   return gfc_finish_block (&block);\n }\n \n@@ -4690,8 +4699,8 @@ gfc_trans_dealloc_allocated (tree descriptor)\n \n   gfc_start_block (&block);\n \n-  tmp = gfc_conv_descriptor_data_addr (descriptor);\n-  var = gfc_evaluate_now (tmp, &block);\n+  var = gfc_conv_descriptor_data_get (descriptor);\n+  STRIP_NOPS (var);\n   tmp = gfc_create_var (gfc_array_index_type, NULL);\n   ptr = build_fold_addr_expr (tmp);\n \n@@ -4702,6 +4711,12 @@ gfc_trans_dealloc_allocated (tree descriptor)\n   tmp = gfc_chainon_list (tmp, ptr);\n   tmp = build_function_call_expr (gfor_fndecl_deallocate, tmp);\n   gfc_add_expr_to_block (&block, tmp);\n+\n+  /* Zero the data pointer.  */\n+  tmp = build2 (MODIFY_EXPR, void_type_node,\n+\t\tvar, build_int_cst (TREE_TYPE (var), 0));\n+  gfc_add_expr_to_block (&block, tmp);\n+\n   return gfc_finish_block (&block);\n }\n "}, {"sha": "815b15e101659922266b14cb0b642121816a555b", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54200abb68aed1ddf147251fcbe402549482d499/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54200abb68aed1ddf147251fcbe402549482d499/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=54200abb68aed1ddf147251fcbe402549482d499", "patch": "@@ -2304,27 +2304,31 @@ gfc_build_builtin_function_decls (void)\n \n   gfor_fndecl_allocate =\n     gfc_build_library_function_decl (get_identifier (PREFIX(\"allocate\")),\n-\t\t\t\t     void_type_node, 2, ppvoid_type_node,\n-\t\t\t\t     gfc_int4_type_node);\n+\t\t\t\t     pvoid_type_node, 2,\n+\t\t\t\t     gfc_int4_type_node, gfc_pint4_type_node);\n+  DECL_IS_MALLOC (gfor_fndecl_allocate) = 1;\n \n   gfor_fndecl_allocate64 =\n     gfc_build_library_function_decl (get_identifier (PREFIX(\"allocate64\")),\n-\t\t\t\t     void_type_node, 2, ppvoid_type_node,\n-\t\t\t\t     gfc_int8_type_node);\n+\t\t\t\t     pvoid_type_node, 2,\n+\t\t\t\t     gfc_int8_type_node, gfc_pint4_type_node);\n+  DECL_IS_MALLOC (gfor_fndecl_allocate64) = 1;\n \n   gfor_fndecl_allocate_array =\n     gfc_build_library_function_decl (get_identifier (PREFIX(\"allocate_array\")),\n-\t\t\t\t     void_type_node, 2, ppvoid_type_node,\n-\t\t\t\t     gfc_int4_type_node);\n+\t\t\t\t     pvoid_type_node, 3, pvoid_type_node,\n+\t\t\t\t     gfc_int4_type_node, gfc_pint4_type_node);\n+  DECL_IS_MALLOC (gfor_fndecl_allocate_array) = 1;\n \n   gfor_fndecl_allocate64_array =\n     gfc_build_library_function_decl (get_identifier (PREFIX(\"allocate64_array\")),\n-\t\t\t\t     void_type_node, 2, ppvoid_type_node,\n-\t\t\t\t     gfc_int8_type_node);\n+\t\t\t\t     pvoid_type_node, 3, pvoid_type_node,\n+\t\t\t\t     gfc_int8_type_node, gfc_pint4_type_node);\n+  DECL_IS_MALLOC (gfor_fndecl_allocate64_array) = 1;\n \n   gfor_fndecl_deallocate =\n     gfc_build_library_function_decl (get_identifier (PREFIX(\"deallocate\")),\n-\t\t\t\t     void_type_node, 2, ppvoid_type_node,\n+\t\t\t\t     void_type_node, 2, pvoid_type_node,\n \t\t\t\t     gfc_pint4_type_node);\n \n   gfor_fndecl_stop_numeric ="}, {"sha": "df853ec264b6620f8eca6f4ca21f591346e2eacb", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54200abb68aed1ddf147251fcbe402549482d499/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54200abb68aed1ddf147251fcbe402549482d499/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=54200abb68aed1ddf147251fcbe402549482d499", "patch": "@@ -3571,21 +3571,15 @@ gfc_trans_allocate (gfc_code * code)\n       if (!gfc_array_allocate (&se, expr, pstat))\n \t{\n \t  /* A scalar or derived type.  */\n-\t  tree val;\n-\n-\t  val = gfc_create_var (ppvoid_type_node, \"ptr\");\n-\t  tmp = gfc_build_addr_expr (ppvoid_type_node, se.expr);\n-\t  gfc_add_modify_expr (&se.pre, val, tmp);\n-\n \t  tmp = TYPE_SIZE_UNIT (TREE_TYPE (TREE_TYPE (se.expr)));\n \n \t  if (expr->ts.type == BT_CHARACTER && tmp == NULL_TREE)\n \t    tmp = se.string_length;\n \n-\t  parm = gfc_chainon_list (NULL_TREE, val);\n-\t  parm = gfc_chainon_list (parm, tmp);\n+\t  parm = gfc_chainon_list (NULL_TREE, tmp);\n \t  parm = gfc_chainon_list (parm, pstat);\n \t  tmp = build_function_call_expr (gfor_fndecl_allocate, parm);\n+\t  tmp = build2 (MODIFY_EXPR, void_type_node, se.expr, tmp);\n \t  gfc_add_expr_to_block (&se.pre, tmp);\n \n \t  if (code->expr)\n@@ -3650,7 +3644,7 @@ gfc_trans_deallocate (gfc_code * code)\n   gfc_se se;\n   gfc_alloc *al;\n   gfc_expr *expr;\n-  tree apstat, astat, parm, pstat, stat, tmp, type, var;\n+  tree apstat, astat, parm, pstat, stat, tmp;\n   stmtblock_t block;\n \n   gfc_start_block (&block);\n@@ -3713,14 +3707,13 @@ gfc_trans_deallocate (gfc_code * code)\n \ttmp = gfc_array_deallocate (se.expr, pstat);\n       else\n \t{\n-\t  type = build_pointer_type (TREE_TYPE (se.expr));\n-\t  var = gfc_create_var (type, \"ptr\");\n-\t  tmp = gfc_build_addr_expr (type, se.expr);\n-\t  gfc_add_modify_expr (&se.pre, var, tmp);\n-\n-\t  parm = gfc_chainon_list (NULL_TREE, var);\n+\t  parm = gfc_chainon_list (NULL_TREE, se.expr);\n \t  parm = gfc_chainon_list (parm, pstat);\n \t  tmp = build_function_call_expr (gfor_fndecl_deallocate, parm);\n+\t  gfc_add_expr_to_block (&se.pre, tmp);\n+\n+\t  tmp = build2 (MODIFY_EXPR, void_type_node,\n+\t\t\tse.expr, build_int_cst (TREE_TYPE (se.expr), 0));\n \t}\n \n       gfc_add_expr_to_block (&se.pre, tmp);"}, {"sha": "d80cf70f170650fe3529518d53e6b699c83bef2f", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54200abb68aed1ddf147251fcbe402549482d499/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54200abb68aed1ddf147251fcbe402549482d499/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=54200abb68aed1ddf147251fcbe402549482d499", "patch": "@@ -1,3 +1,16 @@\n+2006-12-13  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR fortran/30115\n+\t* runtime/memory.c (allocate_size): Change interface to\n+\tvoid *()(size_t, GFC_INTEGER_4 *).\n+\t(allocate): Likewise.\n+\t(allocate64): Likewise.\n+\t(allocate_array): Change interface to\n+\tvoid *()(void *, size_t, GFC_INTEGER_4 *).\n+\t(allocate64_array): Likewise.\n+\t(deallocate): Change interface to\n+\tvoid ()(void *, GFC_INTEGER_4 *).\n+\n 2006-12-06  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n \n \tPR libfortran/29810"}, {"sha": "b38d062669f84107f332680b5399b67b134a4ee6", "filename": "libgfortran/runtime/memory.c", "status": "modified", "additions": 39, "deletions": 67, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54200abb68aed1ddf147251fcbe402549482d499/libgfortran%2Fruntime%2Fmemory.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54200abb68aed1ddf147251fcbe402549482d499/libgfortran%2Fruntime%2Fmemory.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fmemory.c?ref=54200abb68aed1ddf147251fcbe402549482d499", "patch": "@@ -174,149 +174,121 @@ internal_realloc64 (void *mem, GFC_INTEGER_8 size)\n /* User-allocate, one call for each member of the alloc-list of an\n    ALLOCATE statement. */\n \n-static void\n-allocate_size (void **mem, size_t size, GFC_INTEGER_4 * stat)\n+static void *\n+allocate_size (size_t size, GFC_INTEGER_4 * stat)\n {\n   void *newmem;\n \n-  if (!mem)\n-    runtime_error (\"Internal: NULL mem pointer in ALLOCATE.\");\n-\n   newmem = malloc (size ? size : 1);\n   if (!newmem)\n     {\n       if (stat)\n \t{\n \t  *stat = 1;\n-\t  return;\n+\t  return newmem;\n \t}\n       else\n \truntime_error (\"ALLOCATE: Out of memory.\");\n     }\n \n-  (*mem) = newmem;\n-\n   if (stat)\n     *stat = 0;\n+\n+  return newmem;\n }\n \n-extern void allocate (void **, GFC_INTEGER_4, GFC_INTEGER_4 *);\n+extern void *allocate (GFC_INTEGER_4, GFC_INTEGER_4 *);\n export_proto(allocate);\n \n-void\n-allocate (void **mem, GFC_INTEGER_4 size, GFC_INTEGER_4 * stat)\n+void *\n+allocate (GFC_INTEGER_4 size, GFC_INTEGER_4 * stat)\n {\n   if (size < 0)\n-    {\n-      runtime_error (\"Attempt to allocate negative amount of memory.  \"\n-\t\t     \"Possible integer overflow\");\n-      abort ();\n-    }\n+    runtime_error (\"Attempt to allocate negative amount of memory.  \"\n+\t\t   \"Possible integer overflow\");\n \n-  allocate_size (mem, (size_t) size, stat);\n+  return allocate_size ((size_t) size, stat);\n }\n \n-extern void allocate64 (void **, GFC_INTEGER_8, GFC_INTEGER_4 *);\n+extern void *allocate64 (GFC_INTEGER_8, GFC_INTEGER_4 *);\n export_proto(allocate64);\n \n-void\n-allocate64 (void **mem, GFC_INTEGER_8 size, GFC_INTEGER_4 * stat)\n+void *\n+allocate64 (GFC_INTEGER_8 size, GFC_INTEGER_4 * stat)\n {\n   if (size < 0)\n-    {\n-      runtime_error\n-\t(\"ALLOCATE64: Attempt to allocate negative amount of memory. \"\n-\t \"Possible integer overflow\");\n-      abort ();\n-    }\n+    runtime_error (\"ALLOCATE64: Attempt to allocate negative amount of \"\n+\t\t   \"memory. Possible integer overflow\");\n \n-  allocate_size (mem, (size_t) size, stat);\n+  return allocate_size ((size_t) size, stat);\n }\n \n /* Function to call in an ALLOCATE statement when the argument is an\n    allocatable array.  If the array is currently allocated, it is\n    an error to allocate it again.  32-bit version.  */\n \n-extern void allocate_array (void **, GFC_INTEGER_4, GFC_INTEGER_4 *);\n+extern void *allocate_array (void *, GFC_INTEGER_4, GFC_INTEGER_4 *);\n export_proto(allocate_array);\n \n-void\n-allocate_array (void **mem, GFC_INTEGER_4 size, GFC_INTEGER_4 * stat)\n+void *\n+allocate_array (void *mem, GFC_INTEGER_4 size, GFC_INTEGER_4 * stat)\n {\n-  if (*mem == NULL)\n-    {\n-      allocate (mem, size, stat);\n-      return;\n-    }\n+  if (mem == NULL)\n+    return allocate (size, stat);\n   if (stat)\n     {\n-      free (*mem);\n-      allocate (mem, size, stat);\n+      free (mem);\n+      mem = allocate (size, stat);\n       *stat = ERROR_ALLOCATION;\n-      return;\n+      return mem;\n     }\n-  else\n-    runtime_error (\"Attempting to allocate already allocated array.\");\n \n-  return;\n+  runtime_error (\"Attempting to allocate already allocated array.\");\n }\n \n /* Function to call in an ALLOCATE statement when the argument is an\n    allocatable array.  If the array is currently allocated, it is\n    an error to allocate it again.  64-bit version.  */\n \n-extern void allocate64_array (void **, GFC_INTEGER_8, GFC_INTEGER_4 *);\n+extern void *allocate64_array (void *, GFC_INTEGER_8, GFC_INTEGER_4 *);\n export_proto(allocate64_array);\n \n-void\n-allocate64_array (void **mem, GFC_INTEGER_8 size, GFC_INTEGER_4 * stat)\n+void *\n+allocate64_array (void *mem, GFC_INTEGER_8 size, GFC_INTEGER_4 * stat)\n {\n-  if (*mem == NULL)\n-    {\n-      allocate64 (mem, size, stat);\n-      return;\n-    }\n+  if (mem == NULL)\n+    return allocate64 (size, stat);\n   if (stat)\n     {\n-      free (*mem);\n-      allocate (mem, size, stat);\n+      free (mem);\n+      mem = allocate (size, stat);\n       *stat = ERROR_ALLOCATION;\n-      return;\n+      return mem;\n     }\n-  else\n-    runtime_error (\"Attempting to allocate already allocated array.\");\n \n-  return;\n+  runtime_error (\"Attempting to allocate already allocated array.\");\n }\n \n /* User-deallocate; pointer is NULLified. */\n \n-extern void deallocate (void **, GFC_INTEGER_4 *);\n+extern void deallocate (void *, GFC_INTEGER_4 *);\n export_proto(deallocate);\n \n void\n-deallocate (void **mem, GFC_INTEGER_4 * stat)\n+deallocate (void *mem, GFC_INTEGER_4 * stat)\n {\n   if (!mem)\n-    runtime_error (\"Internal: NULL mem pointer in DEALLOCATE.\");\n-\n-  if (!*mem)\n     {\n       if (stat)\n \t{\n \t  *stat = 1;\n \t  return;\n \t}\n       else\n-\t{\n-\t  runtime_error\n-\t    (\"Internal: Attempt to DEALLOCATE unallocated memory.\");\n-\t  abort ();\n-\t}\n+\truntime_error (\"Internal: Attempt to DEALLOCATE unallocated memory.\");\n     }\n \n-  free (*mem);\n-  *mem = NULL;\n+  free (mem);\n \n   if (stat)\n     *stat = 0;"}]}