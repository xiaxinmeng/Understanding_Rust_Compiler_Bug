{"sha": "970dcd567449ec510477a043bbff70a0b960bd7f", "node_id": "C_kwDOANBUbNoAKDk3MGRjZDU2NzQ0OWVjNTEwNDc3YTA0M2JiZmY3MGEwYjk2MGJkN2Y", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-11-08T12:24:02Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-11-08T12:24:02Z"}, "message": "cdce: Fix up get_no_error_domain for new f{16,32,64,128} builtins [PR107547]\n\nI've missed that this function needs to handle all the builtins that\nare handled in can_test_argument_range.\nThe following patch does that.  For many of the builtins (like acos, or\nlog) it is the same range regardless of the floating point type, but for\nsome (cosh, sinh, exp{,m1,2}) it is different for each format,\nso I had to compute those ranges.\n\nNote, seems the existing ranges were in some cases (e.g. for exp2)\nthe smallest in absolute value which results infinite result, in others\nthe largest which still results in finite result (but consistently so\nfor the IEEE single vs. double).  I've followed that for IEEE half and\nquad cases too, just am not sure why it was like that.  I think\nget_domain with true, false is open interval rather than closed\nand the comments indicate that too, conservatively that is certainly\ncorrect.\n\nOT, with frange, perhaps we could DCE the calls unconditionally if\nfrange can prove we are in the domain range.\n\n2022-11-08  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/107547\n\t* tree-call-cdce.cc (get_no_error_domain): Handle CASE_FLT_FN_FLOATN_NX\n\tof BUILT_IN_{ACOS,ASIN,ACOSH,ATANH,LOG,LOG2,LOG10,LOG1P}.  Handle\n\tBUILT_IN_{COSH,SINH,EXP,EXPM1,EXP2}F{16,32,64,128}.\n\n\t* gcc.dg/pr107547.c: New test.", "tree": {"sha": "0390f4d18ba4eda430651c23c9546fe7ad6620f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0390f4d18ba4eda430651c23c9546fe7ad6620f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/970dcd567449ec510477a043bbff70a0b960bd7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/970dcd567449ec510477a043bbff70a0b960bd7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/970dcd567449ec510477a043bbff70a0b960bd7f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/970dcd567449ec510477a043bbff70a0b960bd7f/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa271afb58423014e2feef9f15c1a87428e64ddc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa271afb58423014e2feef9f15c1a87428e64ddc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa271afb58423014e2feef9f15c1a87428e64ddc"}], "stats": {"total": 86, "additions": 86, "deletions": 0}, "files": [{"sha": "c6992c8674b7672c581164af1b24b99e23be702d", "filename": "gcc/testsuite/gcc.dg/pr107547.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/970dcd567449ec510477a043bbff70a0b960bd7f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr107547.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/970dcd567449ec510477a043bbff70a0b960bd7f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr107547.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr107547.c?ref=970dcd567449ec510477a043bbff70a0b960bd7f", "patch": "@@ -0,0 +1,40 @@\n+/* PR tree-optimization/107547 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+int x;\n+\n+void\n+foo (void)\n+{\n+#define TEST(...) \\\n+  __builtin_acos##__VA_ARGS__ (x);\t\\\n+  __builtin_asin##__VA_ARGS__ (x);\t\\\n+  __builtin_acosh##__VA_ARGS__ (x);\t\\\n+  __builtin_atanh##__VA_ARGS__ (x);\t\\\n+  __builtin_cosh##__VA_ARGS__ (x);\t\\\n+  __builtin_sinh##__VA_ARGS__ (x);\t\\\n+  __builtin_log##__VA_ARGS__ (x);\t\\\n+  __builtin_log2##__VA_ARGS__ (x);\t\\\n+  __builtin_log10##__VA_ARGS__ (x);\t\\\n+  __builtin_log1p##__VA_ARGS__ (x);\t\\\n+  __builtin_exp##__VA_ARGS__ (x);\t\\\n+  __builtin_expm1##__VA_ARGS__ (x);\t\\\n+  __builtin_exp2##__VA_ARGS__ (x);\t\\\n+  __builtin_sqrt##__VA_ARGS__ (x)\n+  TEST (f);\n+  TEST ();\n+  TEST (l);\n+#ifdef __FLT16_MAX__\n+  TEST (f16);\n+#endif\n+#ifdef __FLT32_MAX__\n+  TEST (f32);\n+#endif\n+#ifdef __FLT64_MAX__\n+  TEST (f64);\n+#endif\n+#ifdef __FLT128_MAX__\n+  TEST (f128);\n+#endif\n+}"}, {"sha": "1a74eefb8e43194c05889956856327214233b633", "filename": "gcc/tree-call-cdce.cc", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/970dcd567449ec510477a043bbff70a0b960bd7f/gcc%2Ftree-call-cdce.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/970dcd567449ec510477a043bbff70a0b960bd7f/gcc%2Ftree-call-cdce.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-call-cdce.cc?ref=970dcd567449ec510477a043bbff70a0b960bd7f", "patch": "@@ -693,61 +693,107 @@ get_no_error_domain (enum built_in_function fnc)\n     {\n     /* Trig functions: return [-1, +1]  */\n     CASE_FLT_FN (BUILT_IN_ACOS):\n+    CASE_FLT_FN_FLOATN_NX (BUILT_IN_ACOS):\n     CASE_FLT_FN (BUILT_IN_ASIN):\n+    CASE_FLT_FN_FLOATN_NX (BUILT_IN_ASIN):\n       return get_domain (-1, true, true,\n                          1, true, true);\n     /* Hyperbolic functions.  */\n     CASE_FLT_FN (BUILT_IN_ACOSH):\n+    CASE_FLT_FN_FLOATN_NX (BUILT_IN_ACOSH):\n       /* acosh: [1, +inf)  */\n       return get_domain (1, true, true,\n                          1, false, false);\n     CASE_FLT_FN (BUILT_IN_ATANH):\n+    CASE_FLT_FN_FLOATN_NX (BUILT_IN_ATANH):\n       /* atanh: (-1, +1)  */\n       return get_domain (-1, true, false,\n                          1, true, false);\n+    case BUILT_IN_COSHF16:\n+    case BUILT_IN_SINHF16:\n+      /* coshf16: (-11, +11)  */\n+      return get_domain (-11, true, false,\n+\t\t\t 11, true, false);\n     case BUILT_IN_COSHF:\n     case BUILT_IN_SINHF:\n+    case BUILT_IN_COSHF32:\n+    case BUILT_IN_SINHF32:\n       /* coshf: (-89, +89)  */\n       return get_domain (-89, true, false,\n                          89, true, false);\n     case BUILT_IN_COSH:\n     case BUILT_IN_SINH:\n     case BUILT_IN_COSHL:\n     case BUILT_IN_SINHL:\n+    case BUILT_IN_COSHF64:\n+    case BUILT_IN_SINHF64:\n       /* cosh: (-710, +710)  */\n       return get_domain (-710, true, false,\n                          710, true, false);\n+    case BUILT_IN_COSHF128:\n+    case BUILT_IN_SINHF128:\n+      /* coshf128: (-11357, +11357)  */\n+      return get_domain (-11357, true, false,\n+\t\t\t 11357, true, false);\n     /* Log functions: (0, +inf)  */\n     CASE_FLT_FN (BUILT_IN_LOG):\n+    CASE_FLT_FN_FLOATN_NX (BUILT_IN_LOG):\n     CASE_FLT_FN (BUILT_IN_LOG2):\n+    CASE_FLT_FN_FLOATN_NX (BUILT_IN_LOG2):\n     CASE_FLT_FN (BUILT_IN_LOG10):\n+    CASE_FLT_FN_FLOATN_NX (BUILT_IN_LOG10):\n       return get_domain (0, true, false,\n                          0, false, false);\n     CASE_FLT_FN (BUILT_IN_LOG1P):\n+    CASE_FLT_FN_FLOATN_NX (BUILT_IN_LOG1P):\n       return get_domain (-1, true, false,\n                          0, false, false);\n     /* Exp functions.  */\n+    case BUILT_IN_EXPF16:\n+    case BUILT_IN_EXPM1F16:\n+      /* expf: (-inf, 11)  */\n+      return get_domain (-1, false, false,\n+\t\t\t 11, true, false);\n     case BUILT_IN_EXPF:\n     case BUILT_IN_EXPM1F:\n+    case BUILT_IN_EXPF32:\n+    case BUILT_IN_EXPM1F32:\n       /* expf: (-inf, 88)  */\n       return get_domain (-1, false, false,\n                          88, true, false);\n     case BUILT_IN_EXP:\n     case BUILT_IN_EXPM1:\n     case BUILT_IN_EXPL:\n     case BUILT_IN_EXPM1L:\n+    case BUILT_IN_EXPF64:\n+    case BUILT_IN_EXPM1F64:\n       /* exp: (-inf, 709)  */\n       return get_domain (-1, false, false,\n                          709, true, false);\n+    case BUILT_IN_EXPF128:\n+    case BUILT_IN_EXPM1F128:\n+      /* expf128: (-inf, 11356)  */\n+      return get_domain (-1, false, false,\n+\t\t\t 11356, true, false);\n+    case BUILT_IN_EXP2F16:\n+      /* exp2f16: (-inf, 16)  */\n+      return get_domain (-1, false, false,\n+\t\t\t 16, true, false);\n     case BUILT_IN_EXP2F:\n+    case BUILT_IN_EXP2F32:\n       /* exp2f: (-inf, 128)  */\n       return get_domain (-1, false, false,\n                          128, true, false);\n     case BUILT_IN_EXP2:\n     case BUILT_IN_EXP2L:\n+    case BUILT_IN_EXP2F64:\n       /* exp2: (-inf, 1024)  */\n       return get_domain (-1, false, false,\n                          1024, true, false);\n+    case BUILT_IN_EXP2F128:\n+      /* exp2f128: (-inf, 16384)  */\n+      return get_domain (-1, false, false,\n+\t\t\t 16384, true, false);\n     case BUILT_IN_EXP10F:\n     case BUILT_IN_POW10F:\n       /* exp10f: (-inf, 38)  */"}]}