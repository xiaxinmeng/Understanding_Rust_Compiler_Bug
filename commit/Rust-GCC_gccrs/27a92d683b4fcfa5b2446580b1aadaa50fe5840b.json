{"sha": "27a92d683b4fcfa5b2446580b1aadaa50fe5840b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjdhOTJkNjgzYjRmY2ZhNWIyNDQ2NTgwYjFhYWRhYTUwZmU1ODQwYg==", "commit": {"author": {"name": "Shashank Bapat", "email": "shashankbapat@yahoo.com", "date": "2004-09-25T19:04:34Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@gcc.gnu.org", "date": "2004-09-25T19:04:34Z"}, "message": "RE.java (initialize): Add RETokenLookAhead support.\n\n2004-09-25  Shashank Bapat  <shashankbapat@yahoo.com>\n            Mark Wielaard  <mark@klomp.org>\n\n       * gnu/regexp/RE.java (initialize): Add RETokenLookAhead support.\n       * gnu/regexp/RETokenLookAhead.java: New file.\n\n       * Makefile.am (ordinary_java_source_files): Add RETokenLookAhead.java.\n       * Makefile.in: Regenerated.\n\nCo-Authored-By: Mark Wielaard <mark@klomp.org>\n\nFrom-SVN: r88106", "tree": {"sha": "ffc01befdc137abc39092adb9c561cb9a1c78bd9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ffc01befdc137abc39092adb9c561cb9a1c78bd9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27a92d683b4fcfa5b2446580b1aadaa50fe5840b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27a92d683b4fcfa5b2446580b1aadaa50fe5840b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27a92d683b4fcfa5b2446580b1aadaa50fe5840b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27a92d683b4fcfa5b2446580b1aadaa50fe5840b/comments", "author": null, "committer": null, "parents": [{"sha": "75d17889dff3b4cd5e31430c6c9769c18a210efe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75d17889dff3b4cd5e31430c6c9769c18a210efe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75d17889dff3b4cd5e31430c6c9769c18a210efe"}], "stats": {"total": 144, "additions": 134, "deletions": 10}, "files": [{"sha": "64ac4ce8a02c7465dcf4ad08e16c33d2b8dcb16a", "filename": "libjava/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a92d683b4fcfa5b2446580b1aadaa50fe5840b/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a92d683b4fcfa5b2446580b1aadaa50fe5840b/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=27a92d683b4fcfa5b2446580b1aadaa50fe5840b", "patch": "@@ -1,3 +1,12 @@\n+2004-09-25  Shashank Bapat  <shashankbapat@yahoo.com>\n+            Mark Wielaard  <mark@klomp.org>\n+\n+\t* gnu/regexp/RE.java (initialize): Add RETokenLookAhead support.\n+\t* gnu/regexp/RETokenLookAhead.java: New file.\n+\n+\t* Makefile.am (ordinary_java_source_files): Add RETokenLookAhead.java.\n+\t* Makefile.in: Regenerated.\n+\n 2004-09-25  Michael Koch  <konqueror@gmx.de>\n \n \t* java/io/ObjectStreamField.java:"}, {"sha": "b126ab2c2560c9564866f811bb0693f4949796b2", "filename": "libjava/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a92d683b4fcfa5b2446580b1aadaa50fe5840b/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a92d683b4fcfa5b2446580b1aadaa50fe5840b/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=27a92d683b4fcfa5b2446580b1aadaa50fe5840b", "patch": "@@ -2692,6 +2692,7 @@ gnu/regexp/RETokenBackRef.java \\\n gnu/regexp/RETokenChar.java \\\n gnu/regexp/RETokenEnd.java \\\n gnu/regexp/RETokenEndSub.java \\\n+gnu/regexp/RETokenLookAhead.java \\\n gnu/regexp/RETokenOneOf.java \\\n gnu/regexp/RETokenPOSIX.java \\\n gnu/regexp/RETokenRange.java \\"}, {"sha": "083bf097ce2f87f04215feec2b7e84d0a9dfab23", "filename": "libjava/Makefile.in", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a92d683b4fcfa5b2446580b1aadaa50fe5840b/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a92d683b4fcfa5b2446580b1aadaa50fe5840b/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=27a92d683b4fcfa5b2446580b1aadaa50fe5840b", "patch": "@@ -802,9 +802,9 @@ am__libgcj_la_SOURCES_DIST = prims.cc jni.cc exception.cc resolve.cc \\\n \tgnu/regexp/REToken.java gnu/regexp/RETokenAny.java \\\n \tgnu/regexp/RETokenBackRef.java gnu/regexp/RETokenChar.java \\\n \tgnu/regexp/RETokenEnd.java gnu/regexp/RETokenEndSub.java \\\n-\tgnu/regexp/RETokenOneOf.java gnu/regexp/RETokenPOSIX.java \\\n-\tgnu/regexp/RETokenRange.java gnu/regexp/RETokenRepeated.java \\\n-\tgnu/regexp/RETokenStart.java \\\n+\tgnu/regexp/RETokenLookAhead.java gnu/regexp/RETokenOneOf.java \\\n+\tgnu/regexp/RETokenPOSIX.java gnu/regexp/RETokenRange.java \\\n+\tgnu/regexp/RETokenRepeated.java gnu/regexp/RETokenStart.java \\\n \tgnu/regexp/RETokenWordBoundary.java \\\n \tgnu/regexp/UncheckedRE.java gnu/java/security/Engine.java \\\n \tgnu/java/security/OID.java \\\n@@ -3699,12 +3699,12 @@ am__objects_14 = $(am__objects_9) gnu/classpath/ServiceFactory.lo \\\n \tgnu/regexp/RESyntax.lo gnu/regexp/REToken.lo \\\n \tgnu/regexp/RETokenAny.lo gnu/regexp/RETokenBackRef.lo \\\n \tgnu/regexp/RETokenChar.lo gnu/regexp/RETokenEnd.lo \\\n-\tgnu/regexp/RETokenEndSub.lo gnu/regexp/RETokenOneOf.lo \\\n-\tgnu/regexp/RETokenPOSIX.lo gnu/regexp/RETokenRange.lo \\\n-\tgnu/regexp/RETokenRepeated.lo gnu/regexp/RETokenStart.lo \\\n-\tgnu/regexp/RETokenWordBoundary.lo gnu/regexp/UncheckedRE.lo \\\n-\tgnu/java/security/Engine.lo gnu/java/security/OID.lo \\\n-\tgnu/java/security/der/BitString.lo \\\n+\tgnu/regexp/RETokenEndSub.lo gnu/regexp/RETokenLookAhead.lo \\\n+\tgnu/regexp/RETokenOneOf.lo gnu/regexp/RETokenPOSIX.lo \\\n+\tgnu/regexp/RETokenRange.lo gnu/regexp/RETokenRepeated.lo \\\n+\tgnu/regexp/RETokenStart.lo gnu/regexp/RETokenWordBoundary.lo \\\n+\tgnu/regexp/UncheckedRE.lo gnu/java/security/Engine.lo \\\n+\tgnu/java/security/OID.lo gnu/java/security/der/BitString.lo \\\n \tgnu/java/security/der/DER.lo \\\n \tgnu/java/security/der/DEREncodingException.lo \\\n \tgnu/java/security/der/DERReader.lo \\\n@@ -6497,6 +6497,7 @@ gnu/regexp/RETokenBackRef.java \\\n gnu/regexp/RETokenChar.java \\\n gnu/regexp/RETokenEnd.java \\\n gnu/regexp/RETokenEndSub.java \\\n+gnu/regexp/RETokenLookAhead.java \\\n gnu/regexp/RETokenOneOf.java \\\n gnu/regexp/RETokenPOSIX.java \\\n gnu/regexp/RETokenRange.java \\\n@@ -9310,6 +9311,8 @@ gnu/regexp/RETokenEnd.lo: gnu/regexp/$(am__dirstamp) \\\n \tgnu/regexp/$(DEPDIR)/$(am__dirstamp)\n gnu/regexp/RETokenEndSub.lo: gnu/regexp/$(am__dirstamp) \\\n \tgnu/regexp/$(DEPDIR)/$(am__dirstamp)\n+gnu/regexp/RETokenLookAhead.lo: gnu/regexp/$(am__dirstamp) \\\n+\tgnu/regexp/$(DEPDIR)/$(am__dirstamp)\n gnu/regexp/RETokenOneOf.lo: gnu/regexp/$(am__dirstamp) \\\n \tgnu/regexp/$(DEPDIR)/$(am__dirstamp)\n gnu/regexp/RETokenPOSIX.lo: gnu/regexp/$(am__dirstamp) \\\n@@ -15000,6 +15003,8 @@ mostlyclean-compile:\n \t-rm -f gnu/regexp/RETokenEnd.lo\n \t-rm -f gnu/regexp/RETokenEndSub.$(OBJEXT)\n \t-rm -f gnu/regexp/RETokenEndSub.lo\n+\t-rm -f gnu/regexp/RETokenLookAhead.$(OBJEXT)\n+\t-rm -f gnu/regexp/RETokenLookAhead.lo\n \t-rm -f gnu/regexp/RETokenOneOf.$(OBJEXT)\n \t-rm -f gnu/regexp/RETokenOneOf.lo\n \t-rm -f gnu/regexp/RETokenPOSIX.$(OBJEXT)\n@@ -19465,6 +19470,7 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@gnu/regexp/$(DEPDIR)/RETokenChar.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@gnu/regexp/$(DEPDIR)/RETokenEnd.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@gnu/regexp/$(DEPDIR)/RETokenEndSub.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gnu/regexp/$(DEPDIR)/RETokenLookAhead.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@gnu/regexp/$(DEPDIR)/RETokenOneOf.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@gnu/regexp/$(DEPDIR)/RETokenPOSIX.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@gnu/regexp/$(DEPDIR)/RETokenRange.Plo@am__quote@"}, {"sha": "d782975e9aff5223138ab2c424ce040ebeab8d2d", "filename": "libjava/gnu/regexp/RE.java", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a92d683b4fcfa5b2446580b1aadaa50fe5840b/libjava%2Fgnu%2Fregexp%2FRE.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a92d683b4fcfa5b2446580b1aadaa50fe5840b/libjava%2Fgnu%2Fregexp%2FRE.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fregexp%2FRE.java?ref=27a92d683b4fcfa5b2446580b1aadaa50fe5840b", "patch": "@@ -492,8 +492,25 @@ else if (\"nrt\".indexOf(pattern[index]) != -1) {\n       else if ((unit.ch == '(') && (syntax.get(RESyntax.RE_NO_BK_PARENS) ^ unit.bk)) {\n \tboolean pure = false;\n \tboolean comment = false;\n+        boolean lookAhead = false;\n+        boolean negativelh = false;\n \tif ((index+1 < pLength) && (pattern[index] == '?')) {\n \t  switch (pattern[index+1]) {\n+          case '!':\n+            if (syntax.get(RESyntax.RE_LOOKAHEAD)) {\n+              pure = true;\n+              negativelh = true;\n+              lookAhead = true;\n+              index += 2;\n+            }\n+            break;\n+          case '=':\n+            if (syntax.get(RESyntax.RE_LOOKAHEAD)) {\n+              pure = true;\n+              lookAhead = true;\n+              index += 2;\n+            }\n+            break;\n \t  case ':':\n \t    if (syntax.get(RESyntax.RE_PURE_GROUPING)) {\n \t      pure = true;\n@@ -539,10 +556,14 @@ else if (unit.ch == ')' && (syntax.get(RESyntax.RE_NO_BK_PARENS) ^ unit.bk))\n \t    numSubs++;\n \t  }\n \n-\t  int useIndex = (pure) ? 0 : nextSub + numSubs;\n+\t  int useIndex = (pure || lookAhead) ? 0 : nextSub + numSubs;\n \t  currentToken = new RE(String.valueOf(pattern,index,endIndex-index).toCharArray(),cflags,syntax,useIndex,nextSub + numSubs);\n \t  numSubs += ((RE) currentToken).getNumSubs();\n \n+          if (lookAhead) {\n+\t      currentToken = new RETokenLookAhead(currentToken,negativelh);\n+\t  }\n+\n \t  index = nextIndex;\n \t} // not a comment\n       } // subexpression"}, {"sha": "650bb351b1073319ac50ea349dc69cdb51552112", "filename": "libjava/gnu/regexp/RETokenLookAhead.java", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a92d683b4fcfa5b2446580b1aadaa50fe5840b/libjava%2Fgnu%2Fregexp%2FRETokenLookAhead.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a92d683b4fcfa5b2446580b1aadaa50fe5840b/libjava%2Fgnu%2Fregexp%2FRETokenLookAhead.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fregexp%2FRETokenLookAhead.java?ref=27a92d683b4fcfa5b2446580b1aadaa50fe5840b", "patch": "@@ -0,0 +1,87 @@\n+/* gnu/regexp/RETokenLookAhead.java\n+   Copyright (C) 1998-2001, 2004 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.regexp;\n+\n+/**\n+ * @since gnu.regexp 1.1.3\n+ * @author Shashank Bapat\n+ */\n+final class RETokenLookAhead extends REToken\n+{\n+  REToken re;\n+  boolean negative;\n+\n+  RETokenLookAhead(REToken re, boolean negative) throws REException {\n+    super(0);\n+    this.re = re;\n+    this.negative = negative;\n+  }\n+\n+  boolean match(CharIndexed input, REMatch mymatch)\n+  {\n+    REMatch trymatch = (REMatch)mymatch.clone();\n+    REMatch trymatch1 = (REMatch)mymatch.clone();\n+    REMatch newMatch = null;\n+    if (re.match(input, trymatch)) {\n+      if (negative) return false;\n+      if (next(input, trymatch1))\n+        newMatch = trymatch1;\n+    }\n+\n+    if (newMatch != null) {\n+      if (negative) return false;\n+      //else\n+      mymatch.assignFrom(newMatch);\n+      return true;\n+    }\n+    else { // no match\n+      if (negative)\n+        return next(input, mymatch);\n+      //else\n+      return false;\n+    }\n+  }\n+\n+    void dump(StringBuffer os) {\n+\tos.append(\"(?\");\n+\tos.append(negative ? '!' : '=');\n+\tre.dumpAll(os);\n+\tos.append(')');\n+    }\n+}\n+"}]}