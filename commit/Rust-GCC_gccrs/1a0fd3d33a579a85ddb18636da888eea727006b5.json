{"sha": "1a0fd3d33a579a85ddb18636da888eea727006b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWEwZmQzZDMzYTU3OWE4NWRkYjE4NjM2ZGE4ODhlZWE3MjcwMDZiNQ==", "commit": {"author": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2012-03-26T15:16:05Z"}, "committer": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2012-03-26T15:16:05Z"}, "message": "Combined get_mem and internal_malloc_size.\n\n2012-03-26  Janne Blomqvist  <jb@gcc.gnu.org>\n\n\t* runtime/memory.c (get_mem): Rename to xmalloc, check for zero\n\tsize.\n\t(internal_malloc_size): Remove.\n\t* libgfortran.h (get_mem): Rename to xmalloc.\n\t(internal_malloc_size): Remove prototype.\n\t* Makefile.am (i_iall_c): Fix dependency.\n\t(i_iany_c): Likewise.\n\t(i_iparity_c): Likewise.\n\t(i_norm2_c): Likewise.\n\t(i_parity_c): Likewise.\n\t* Makefile.in: Regenerated.\n\t* m4/parity.m4: Fix typo in comment.\n\t* generated/all_l1.c: Regenerated.\n\t* generated/all_l16.c: Regenerated.\n\t* generated/all_l2.c: Regenerated.\n\t* generated/all_l4.c: Regenerated.\n\t* generated/all_l8.c: Regenerated.\n\t* generated/any_l1.c: Regenerated.\n\t* generated/any_l16.c: Regenerated.\n\t* generated/any_l2.c: Regenerated.\n\t* generated/any_l4.c: Regenerated.\n\t* generated/any_l8.c: Regenerated.\n\t* generated/bessel_r10.c: Regenerated.\n\t* generated/bessel_r16.c: Regenerated.\n\t* generated/bessel_r4.c: Regenerated.\n\t* generated/bessel_r8.c: Regenerated.\n\t* generated/count_16_l.c: Regenerated.\n\t* generated/count_1_l.c: Regenerated.\n\t* generated/count_2_l.c: Regenerated.\n\t* generated/count_4_l.c: Regenerated.\n\t* generated/count_8_l.c: Regenerated.\n\t* generated/cshift1_16.c: Regenerated.\n\t* generated/cshift1_4.c: Regenerated.\n\t* generated/cshift1_8.c: Regenerated.\n\t* generated/eoshift1_16.c: Regenerated.\n\t* generated/eoshift1_4.c: Regenerated.\n\t* generated/eoshift1_8.c: Regenerated.\n\t* generated/eoshift3_16.c: Regenerated.\n\t* generated/eoshift3_4.c: Regenerated.\n\t* generated/eoshift3_8.c: Regenerated.\n\t* generated/iall_i1.c: Regenerated.\n\t* generated/iall_i16.c: Regenerated.\n\t* generated/iall_i2.c: Regenerated.\n\t* generated/iall_i4.c: Regenerated.\n\t* generated/iall_i8.c: Regenerated.\n\t* generated/iany_i1.c: Regenerated.\n\t* generated/iany_i16.c: Regenerated.\n\t* generated/iany_i2.c: Regenerated.\n\t* generated/iany_i4.c: Regenerated.\n\t* generated/iany_i8.c: Regenerated.\n\t* generated/in_pack_c10.c: Regenerated.\n\t* generated/in_pack_c16.c: Regenerated.\n\t* generated/in_pack_c4.c: Regenerated.\n\t* generated/in_pack_c8.c: Regenerated.\n\t* generated/in_pack_i1.c: Regenerated.\n\t* generated/in_pack_i16.c: Regenerated.\n\t* generated/in_pack_i2.c: Regenerated.\n\t* generated/in_pack_i4.c: Regenerated.\n\t* generated/in_pack_i8.c: Regenerated.\n\t* generated/in_pack_r10.c: Regenerated.\n\t* generated/in_pack_r16.c: Regenerated.\n\t* generated/in_pack_r4.c: Regenerated.\n\t* generated/in_pack_r8.c: Regenerated.\n\t* generated/iparity_i1.c: Regenerated.\n\t* generated/iparity_i16.c: Regenerated.\n\t* generated/iparity_i2.c: Regenerated.\n\t* generated/iparity_i4.c: Regenerated.\n\t* generated/iparity_i8.c: Regenerated.\n\t* generated/matmul_c10.c: Regenerated.\n\t* generated/matmul_c16.c: Regenerated.\n\t* generated/matmul_c4.c: Regenerated.\n\t* generated/matmul_c8.c: Regenerated.\n\t* generated/matmul_i1.c: Regenerated.\n\t* generated/matmul_i16.c: Regenerated.\n\t* generated/matmul_i2.c: Regenerated.\n\t* generated/matmul_i4.c: Regenerated.\n\t* generated/matmul_i8.c: Regenerated.\n\t* generated/matmul_l16.c: Regenerated.\n\t* generated/matmul_l4.c: Regenerated.\n\t* generated/matmul_l8.c: Regenerated.\n\t* generated/matmul_r10.c: Regenerated.\n\t* generated/matmul_r16.c: Regenerated.\n\t* generated/matmul_r4.c: Regenerated.\n\t* generated/matmul_r8.c: Regenerated.\n\t* generated/maxloc0_16_i1.c: Regenerated.\n\t* generated/maxloc0_16_i16.c: Regenerated.\n\t* generated/maxloc0_16_i2.c: Regenerated.\n\t* generated/maxloc0_16_i4.c: Regenerated.\n\t* generated/maxloc0_16_i8.c: Regenerated.\n\t* generated/maxloc0_16_r10.c: Regenerated.\n\t* generated/maxloc0_16_r16.c: Regenerated.\n\t* generated/maxloc0_16_r4.c: Regenerated.\n\t* generated/maxloc0_16_r8.c: Regenerated.\n\t* generated/maxloc0_4_i1.c: Regenerated.\n\t* generated/maxloc0_4_i16.c: Regenerated.\n\t* generated/maxloc0_4_i2.c: Regenerated.\n\t* generated/maxloc0_4_i4.c: Regenerated.\n\t* generated/maxloc0_4_i8.c: Regenerated.\n\t* generated/maxloc0_4_r10.c: Regenerated.\n\t* generated/maxloc0_4_r16.c: Regenerated.\n\t* generated/maxloc0_4_r4.c: Regenerated.\n\t* generated/maxloc0_4_r8.c: Regenerated.\n\t* generated/maxloc0_8_i1.c: Regenerated.\n\t* generated/maxloc0_8_i16.c: Regenerated.\n\t* generated/maxloc0_8_i2.c: Regenerated.\n\t* generated/maxloc0_8_i4.c: Regenerated.\n\t* generated/maxloc0_8_i8.c: Regenerated.\n\t* generated/maxloc0_8_r10.c: Regenerated.\n\t* generated/maxloc0_8_r16.c: Regenerated.\n\t* generated/maxloc0_8_r4.c: Regenerated.\n\t* generated/maxloc0_8_r8.c: Regenerated.\n\t* generated/maxloc1_16_i1.c: Regenerated.\n\t* generated/maxloc1_16_i16.c: Regenerated.\n\t* generated/maxloc1_16_i2.c: Regenerated.\n\t* generated/maxloc1_16_i4.c: Regenerated.\n\t* generated/maxloc1_16_i8.c: Regenerated.\n\t* generated/maxloc1_16_r10.c: Regenerated.\n\t* generated/maxloc1_16_r16.c: Regenerated.\n\t* generated/maxloc1_16_r4.c: Regenerated.\n\t* generated/maxloc1_16_r8.c: Regenerated.\n\t* generated/maxloc1_4_i1.c: Regenerated.\n\t* generated/maxloc1_4_i16.c: Regenerated.\n\t* generated/maxloc1_4_i2.c: Regenerated.\n\t* generated/maxloc1_4_i4.c: Regenerated.\n\t* generated/maxloc1_4_i8.c: Regenerated.\n\t* generated/maxloc1_4_r10.c: Regenerated.\n\t* generated/maxloc1_4_r16.c: Regenerated.\n\t* generated/maxloc1_4_r4.c: Regenerated.\n\t* generated/maxloc1_4_r8.c: Regenerated.\n\t* generated/maxloc1_8_i1.c: Regenerated.\n\t* generated/maxloc1_8_i16.c: Regenerated.\n\t* generated/maxloc1_8_i2.c: Regenerated.\n\t* generated/maxloc1_8_i4.c: Regenerated.\n\t* generated/maxloc1_8_i8.c: Regenerated.\n\t* generated/maxloc1_8_r10.c: Regenerated.\n\t* generated/maxloc1_8_r16.c: Regenerated.\n\t* generated/maxloc1_8_r4.c: Regenerated.\n\t* generated/maxloc1_8_r8.c: Regenerated.\n\t* generated/maxval_i1.c: Regenerated.\n\t* generated/maxval_i16.c: Regenerated.\n\t* generated/maxval_i2.c: Regenerated.\n\t* generated/maxval_i4.c: Regenerated.\n\t* generated/maxval_i8.c: Regenerated.\n\t* generated/maxval_r10.c: Regenerated.\n\t* generated/maxval_r16.c: Regenerated.\n\t* generated/maxval_r4.c: Regenerated.\n\t* generated/maxval_r8.c: Regenerated.\n\t* generated/minloc0_16_i1.c: Regenerated.\n\t* generated/minloc0_16_i16.c: Regenerated.\n\t* generated/minloc0_16_i2.c: Regenerated.\n\t* generated/minloc0_16_i4.c: Regenerated.\n\t* generated/minloc0_16_i8.c: Regenerated.\n\t* generated/minloc0_16_r10.c: Regenerated.\n\t* generated/minloc0_16_r16.c: Regenerated.\n\t* generated/minloc0_16_r4.c: Regenerated.\n\t* generated/minloc0_16_r8.c: Regenerated.\n\t* generated/minloc0_4_i1.c: Regenerated.\n\t* generated/minloc0_4_i16.c: Regenerated.\n\t* generated/minloc0_4_i2.c: Regenerated.\n\t* generated/minloc0_4_i4.c: Regenerated.\n\t* generated/minloc0_4_i8.c: Regenerated.\n\t* generated/minloc0_4_r10.c: Regenerated.\n\t* generated/minloc0_4_r16.c: Regenerated.\n\t* generated/minloc0_4_r4.c: Regenerated.\n\t* generated/minloc0_4_r8.c: Regenerated.\n\t* generated/minloc0_8_i1.c: Regenerated.\n\t* generated/minloc0_8_i16.c: Regenerated.\n\t* generated/minloc0_8_i2.c: Regenerated.\n\t* generated/minloc0_8_i4.c: Regenerated.\n\t* generated/minloc0_8_i8.c: Regenerated.\n\t* generated/minloc0_8_r10.c: Regenerated.\n\t* generated/minloc0_8_r16.c: Regenerated.\n\t* generated/minloc0_8_r4.c: Regenerated.\n\t* generated/minloc0_8_r8.c: Regenerated.\n\t* generated/minloc1_16_i1.c: Regenerated.\n\t* generated/minloc1_16_i16.c: Regenerated.\n\t* generated/minloc1_16_i2.c: Regenerated.\n\t* generated/minloc1_16_i4.c: Regenerated.\n\t* generated/minloc1_16_i8.c: Regenerated.\n\t* generated/minloc1_16_r10.c: Regenerated.\n\t* generated/minloc1_16_r16.c: Regenerated.\n\t* generated/minloc1_16_r4.c: Regenerated.\n\t* generated/minloc1_16_r8.c: Regenerated.\n\t* generated/minloc1_4_i1.c: Regenerated.\n\t* generated/minloc1_4_i16.c: Regenerated.\n\t* generated/minloc1_4_i2.c: Regenerated.\n\t* generated/minloc1_4_i4.c: Regenerated.\n\t* generated/minloc1_4_i8.c: Regenerated.\n\t* generated/minloc1_4_r10.c: Regenerated.\n\t* generated/minloc1_4_r16.c: Regenerated.\n\t* generated/minloc1_4_r4.c: Regenerated.\n\t* generated/minloc1_4_r8.c: Regenerated.\n\t* generated/minloc1_8_i1.c: Regenerated.\n\t* generated/minloc1_8_i16.c: Regenerated.\n\t* generated/minloc1_8_i2.c: Regenerated.\n\t* generated/minloc1_8_i4.c: Regenerated.\n\t* generated/minloc1_8_i8.c: Regenerated.\n\t* generated/minloc1_8_r10.c: Regenerated.\n\t* generated/minloc1_8_r16.c: Regenerated.\n\t* generated/minloc1_8_r4.c: Regenerated.\n\t* generated/minloc1_8_r8.c: Regenerated.\n\t* generated/minval_i1.c: Regenerated.\n\t* generated/minval_i16.c: Regenerated.\n\t* generated/minval_i2.c: Regenerated.\n\t* generated/minval_i4.c: Regenerated.\n\t* generated/minval_i8.c: Regenerated.\n\t* generated/minval_r10.c: Regenerated.\n\t* generated/minval_r16.c: Regenerated.\n\t* generated/minval_r4.c: Regenerated.\n\t* generated/minval_r8.c: Regenerated.\n\t* generated/norm2_r10.c: Regenerated.\n\t* generated/norm2_r16.c: Regenerated.\n\t* generated/norm2_r4.c: Regenerated.\n\t* generated/norm2_r8.c: Regenerated.\n\t* generated/pack_c10.c: Regenerated.\n\t* generated/pack_c16.c: Regenerated.\n\t* generated/pack_c4.c: Regenerated.\n\t* generated/pack_c8.c: Regenerated.\n\t* generated/pack_i1.c: Regenerated.\n\t* generated/pack_i16.c: Regenerated.\n\t* generated/pack_i2.c: Regenerated.\n\t* generated/pack_i4.c: Regenerated.\n\t* generated/pack_i8.c: Regenerated.\n\t* generated/pack_r10.c: Regenerated.\n\t* generated/pack_r16.c: Regenerated.\n\t* generated/pack_r4.c: Regenerated.\n\t* generated/pack_r8.c: Regenerated.\n\t* generated/parity_l1.c: Regenerated.\n\t* generated/parity_l16.c: Regenerated.\n\t* generated/parity_l2.c: Regenerated.\n\t* generated/parity_l4.c: Regenerated.\n\t* generated/parity_l8.c: Regenerated.\n\t* generated/product_c10.c: Regenerated.\n\t* generated/product_c16.c: Regenerated.\n\t* generated/product_c4.c: Regenerated.\n\t* generated/product_c8.c: Regenerated.\n\t* generated/product_i1.c: Regenerated.\n\t* generated/product_i16.c: Regenerated.\n\t* generated/product_i2.c: Regenerated.\n\t* generated/product_i4.c: Regenerated.\n\t* generated/product_i8.c: Regenerated.\n\t* generated/product_r10.c: Regenerated.\n\t* generated/product_r16.c: Regenerated.\n\t* generated/product_r4.c: Regenerated.\n\t* generated/product_r8.c: Regenerated.\n\t* generated/reshape_c10.c: Regenerated.\n\t* generated/reshape_c16.c: Regenerated.\n\t* generated/reshape_c4.c: Regenerated.\n\t* generated/reshape_c8.c: Regenerated.\n\t* generated/reshape_i16.c: Regenerated.\n\t* generated/reshape_i4.c: Regenerated.\n\t* generated/reshape_i8.c: Regenerated.\n\t* generated/reshape_r10.c: Regenerated.\n\t* generated/reshape_r16.c: Regenerated.\n\t* generated/reshape_r4.c: Regenerated.\n\t* generated/reshape_r8.c: Regenerated.\n\t* generated/shape_i16.c: Regenerated.\n\t* generated/shape_i4.c: Regenerated.\n\t* generated/shape_i8.c: Regenerated.\n\t* generated/spread_c10.c: Regenerated.\n\t* generated/spread_c16.c: Regenerated.\n\t* generated/spread_c4.c: Regenerated.\n\t* generated/spread_c8.c: Regenerated.\n\t* generated/spread_i1.c: Regenerated.\n\t* generated/spread_i16.c: Regenerated.\n\t* generated/spread_i2.c: Regenerated.\n\t* generated/spread_i4.c: Regenerated.\n\t* generated/spread_i8.c: Regenerated.\n\t* generated/spread_r10.c: Regenerated.\n\t* generated/spread_r16.c: Regenerated.\n\t* generated/spread_r4.c: Regenerated.\n\t* generated/spread_r8.c: Regenerated.\n\t* generated/sum_c10.c: Regenerated.\n\t* generated/sum_c16.c: Regenerated.\n\t* generated/sum_c4.c: Regenerated.\n\t* generated/sum_c8.c: Regenerated.\n\t* generated/sum_i1.c: Regenerated.\n\t* generated/sum_i16.c: Regenerated.\n\t* generated/sum_i2.c: Regenerated.\n\t* generated/sum_i4.c: Regenerated.\n\t* generated/sum_i8.c: Regenerated.\n\t* generated/sum_r10.c: Regenerated.\n\t* generated/sum_r16.c: Regenerated.\n\t* generated/sum_r4.c: Regenerated.\n\t* generated/sum_r8.c: Regenerated.\n\t* generated/transpose_c10.c: Regenerated.\n\t* generated/transpose_c16.c: Regenerated.\n\t* generated/transpose_c4.c: Regenerated.\n\t* generated/transpose_c8.c: Regenerated.\n\t* generated/transpose_i16.c: Regenerated.\n\t* generated/transpose_i4.c: Regenerated.\n\t* generated/transpose_i8.c: Regenerated.\n\t* generated/transpose_r10.c: Regenerated.\n\t* generated/transpose_r16.c: Regenerated.\n\t* generated/transpose_r4.c: Regenerated.\n\t* generated/transpose_r8.c: Regenerated.\n\t* generated/unpack_c10.c: Regenerated.\n\t* generated/unpack_c16.c: Regenerated.\n\t* generated/unpack_c4.c: Regenerated.\n\t* generated/unpack_c8.c: Regenerated.\n\t* generated/unpack_i1.c: Regenerated.\n\t* generated/unpack_i16.c: Regenerated.\n\t* generated/unpack_i2.c: Regenerated.\n\t* generated/unpack_i4.c: Regenerated.\n\t* generated/unpack_i8.c: Regenerated.\n\t* generated/unpack_r10.c: Regenerated.\n\t* generated/unpack_r16.c: Regenerated.\n\t* generated/unpack_r4.c: Regenerated.\n\t* generated/unpack_r8.c: Regenerated.\n\t* intrinsics/cshift0.c: Use xmalloc.\n\t* intrinsics/ctime.c: Likewise.\n\t* intrinsics/date_and_time.c: Likewise.\n\t* intrinsics/eoshift0.c: Likewise.\n\t* intrinsics/eoshift2.c: Likewise.\n\t* intrinsics/getlog.c: Likewise.\n\t* intrinsics/pack_generic.c: Likewise.\n\t* intrinsics/reshape_generic.c: Likewise.\n\t* intrinsics/spread_generic.c: Likewise.\n\t* intrinsics/string_intrinsics_inc.c: Likewise.\n\t* intrinsics/transpose_generic.c: Likewise.\n\t* intrinsics/unpack_generic.c: Likewise.\n\t* io/fbuf.c: Likewise.\n\t* io/format.c: Likewise.\n\t* io/intrinsics.c: Likewise.\n\t* io/list_read.c: Likewise.\n\t* io/open.c: Likewise.\n\t* io/transfer.c: Likewise.\n\t* io/unit.c: Likewise.\n\t* io/unix.c: Likewise.\n\t* io/write.c: Likewise.\n\t* m4/bessel.m4: Likewise.\n\t* m4/cshift1.m4: Likewise.\n\t* m4/eoshift1.m4: Likewise.\n\t* m4/eoshift3.m4: Likewise.\n\t* m4/iforeach.m4: Likewise.\n\t* m4/ifunction.m4: Likewise.\n\t* m4/ifunction_logical.m4: Likewise.\n\t* m4/in_pack.m4: Likewise.\n\t* m4/matmul.m4: Likewise.\n\t* m4/matmull.m4: Likewise.\n\t* m4/pack.m4: Likewise.\n\t* m4/reshape.m4: Likewise.\n\t* m4/shape.m4: Likewise.\n\t* m4/spread.m4: Likewise.\n\t* m4/transpose.m4: Likewise.\n\t* m4/unpack.m4: Likewise.\n\t* runtime/convert_char.c: Likewise.\n\t* runtime/environ.c: Likewise.\n\t* runtime/in_pack_generic.c: Likewise.\n\nFrom-SVN: r185806", "tree": {"sha": "6d0ac832a885839a9d6244bf04d8a71dd215ac91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d0ac832a885839a9d6244bf04d8a71dd215ac91"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a0fd3d33a579a85ddb18636da888eea727006b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a0fd3d33a579a85ddb18636da888eea727006b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a0fd3d33a579a85ddb18636da888eea727006b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a0fd3d33a579a85ddb18636da888eea727006b5/comments", "author": null, "committer": null, "parents": [{"sha": "ad5d161a7599cf9db900d69f78daa58b6f49b21d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad5d161a7599cf9db900d69f78daa58b6f49b21d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad5d161a7599cf9db900d69f78daa58b6f49b21d"}], "stats": {"total": 2004, "additions": 1170, "deletions": 834}, "files": [{"sha": "e4a6b1e91fbab63254a9e4c40e71fbef9c1aa631", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 352, "deletions": 0, "changes": 352, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -1,3 +1,355 @@\n+2012-03-26  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\t* runtime/memory.c (get_mem): Rename to xmalloc, check for zero\n+\tsize.\n+\t(internal_malloc_size): Remove.\n+\t* libgfortran.h (get_mem): Rename to xmalloc.\n+\t(internal_malloc_size): Remove prototype.\n+\t* Makefile.am (i_iall_c): Fix dependency.\n+\t(i_iany_c): Likewise.\n+\t(i_iparity_c): Likewise.\n+\t(i_norm2_c): Likewise.\n+\t(i_parity_c): Likewise.\n+\t* Makefile.in: Regenerated.\n+\t* m4/parity.m4: Fix typo in comment.\n+\t* generated/all_l1.c: Regenerated.\n+\t* generated/all_l16.c: Regenerated.\n+\t* generated/all_l2.c: Regenerated.\n+\t* generated/all_l4.c: Regenerated.\n+\t* generated/all_l8.c: Regenerated.\n+\t* generated/any_l1.c: Regenerated.\n+\t* generated/any_l16.c: Regenerated.\n+\t* generated/any_l2.c: Regenerated.\n+\t* generated/any_l4.c: Regenerated.\n+\t* generated/any_l8.c: Regenerated.\n+\t* generated/bessel_r10.c: Regenerated.\n+\t* generated/bessel_r16.c: Regenerated.\n+\t* generated/bessel_r4.c: Regenerated.\n+\t* generated/bessel_r8.c: Regenerated.\n+\t* generated/count_16_l.c: Regenerated.\n+\t* generated/count_1_l.c: Regenerated.\n+\t* generated/count_2_l.c: Regenerated.\n+\t* generated/count_4_l.c: Regenerated.\n+\t* generated/count_8_l.c: Regenerated.\n+\t* generated/cshift1_16.c: Regenerated.\n+\t* generated/cshift1_4.c: Regenerated.\n+\t* generated/cshift1_8.c: Regenerated.\n+\t* generated/eoshift1_16.c: Regenerated.\n+\t* generated/eoshift1_4.c: Regenerated.\n+\t* generated/eoshift1_8.c: Regenerated.\n+\t* generated/eoshift3_16.c: Regenerated.\n+\t* generated/eoshift3_4.c: Regenerated.\n+\t* generated/eoshift3_8.c: Regenerated.\n+\t* generated/iall_i1.c: Regenerated.\n+\t* generated/iall_i16.c: Regenerated.\n+\t* generated/iall_i2.c: Regenerated.\n+\t* generated/iall_i4.c: Regenerated.\n+\t* generated/iall_i8.c: Regenerated.\n+\t* generated/iany_i1.c: Regenerated.\n+\t* generated/iany_i16.c: Regenerated.\n+\t* generated/iany_i2.c: Regenerated.\n+\t* generated/iany_i4.c: Regenerated.\n+\t* generated/iany_i8.c: Regenerated.\n+\t* generated/in_pack_c10.c: Regenerated.\n+\t* generated/in_pack_c16.c: Regenerated.\n+\t* generated/in_pack_c4.c: Regenerated.\n+\t* generated/in_pack_c8.c: Regenerated.\n+\t* generated/in_pack_i1.c: Regenerated.\n+\t* generated/in_pack_i16.c: Regenerated.\n+\t* generated/in_pack_i2.c: Regenerated.\n+\t* generated/in_pack_i4.c: Regenerated.\n+\t* generated/in_pack_i8.c: Regenerated.\n+\t* generated/in_pack_r10.c: Regenerated.\n+\t* generated/in_pack_r16.c: Regenerated.\n+\t* generated/in_pack_r4.c: Regenerated.\n+\t* generated/in_pack_r8.c: Regenerated.\n+\t* generated/iparity_i1.c: Regenerated.\n+\t* generated/iparity_i16.c: Regenerated.\n+\t* generated/iparity_i2.c: Regenerated.\n+\t* generated/iparity_i4.c: Regenerated.\n+\t* generated/iparity_i8.c: Regenerated.\n+\t* generated/matmul_c10.c: Regenerated.\n+\t* generated/matmul_c16.c: Regenerated.\n+\t* generated/matmul_c4.c: Regenerated.\n+\t* generated/matmul_c8.c: Regenerated.\n+\t* generated/matmul_i1.c: Regenerated.\n+\t* generated/matmul_i16.c: Regenerated.\n+\t* generated/matmul_i2.c: Regenerated.\n+\t* generated/matmul_i4.c: Regenerated.\n+\t* generated/matmul_i8.c: Regenerated.\n+\t* generated/matmul_l16.c: Regenerated.\n+\t* generated/matmul_l4.c: Regenerated.\n+\t* generated/matmul_l8.c: Regenerated.\n+\t* generated/matmul_r10.c: Regenerated.\n+\t* generated/matmul_r16.c: Regenerated.\n+\t* generated/matmul_r4.c: Regenerated.\n+\t* generated/matmul_r8.c: Regenerated.\n+\t* generated/maxloc0_16_i1.c: Regenerated.\n+\t* generated/maxloc0_16_i16.c: Regenerated.\n+\t* generated/maxloc0_16_i2.c: Regenerated.\n+\t* generated/maxloc0_16_i4.c: Regenerated.\n+\t* generated/maxloc0_16_i8.c: Regenerated.\n+\t* generated/maxloc0_16_r10.c: Regenerated.\n+\t* generated/maxloc0_16_r16.c: Regenerated.\n+\t* generated/maxloc0_16_r4.c: Regenerated.\n+\t* generated/maxloc0_16_r8.c: Regenerated.\n+\t* generated/maxloc0_4_i1.c: Regenerated.\n+\t* generated/maxloc0_4_i16.c: Regenerated.\n+\t* generated/maxloc0_4_i2.c: Regenerated.\n+\t* generated/maxloc0_4_i4.c: Regenerated.\n+\t* generated/maxloc0_4_i8.c: Regenerated.\n+\t* generated/maxloc0_4_r10.c: Regenerated.\n+\t* generated/maxloc0_4_r16.c: Regenerated.\n+\t* generated/maxloc0_4_r4.c: Regenerated.\n+\t* generated/maxloc0_4_r8.c: Regenerated.\n+\t* generated/maxloc0_8_i1.c: Regenerated.\n+\t* generated/maxloc0_8_i16.c: Regenerated.\n+\t* generated/maxloc0_8_i2.c: Regenerated.\n+\t* generated/maxloc0_8_i4.c: Regenerated.\n+\t* generated/maxloc0_8_i8.c: Regenerated.\n+\t* generated/maxloc0_8_r10.c: Regenerated.\n+\t* generated/maxloc0_8_r16.c: Regenerated.\n+\t* generated/maxloc0_8_r4.c: Regenerated.\n+\t* generated/maxloc0_8_r8.c: Regenerated.\n+\t* generated/maxloc1_16_i1.c: Regenerated.\n+\t* generated/maxloc1_16_i16.c: Regenerated.\n+\t* generated/maxloc1_16_i2.c: Regenerated.\n+\t* generated/maxloc1_16_i4.c: Regenerated.\n+\t* generated/maxloc1_16_i8.c: Regenerated.\n+\t* generated/maxloc1_16_r10.c: Regenerated.\n+\t* generated/maxloc1_16_r16.c: Regenerated.\n+\t* generated/maxloc1_16_r4.c: Regenerated.\n+\t* generated/maxloc1_16_r8.c: Regenerated.\n+\t* generated/maxloc1_4_i1.c: Regenerated.\n+\t* generated/maxloc1_4_i16.c: Regenerated.\n+\t* generated/maxloc1_4_i2.c: Regenerated.\n+\t* generated/maxloc1_4_i4.c: Regenerated.\n+\t* generated/maxloc1_4_i8.c: Regenerated.\n+\t* generated/maxloc1_4_r10.c: Regenerated.\n+\t* generated/maxloc1_4_r16.c: Regenerated.\n+\t* generated/maxloc1_4_r4.c: Regenerated.\n+\t* generated/maxloc1_4_r8.c: Regenerated.\n+\t* generated/maxloc1_8_i1.c: Regenerated.\n+\t* generated/maxloc1_8_i16.c: Regenerated.\n+\t* generated/maxloc1_8_i2.c: Regenerated.\n+\t* generated/maxloc1_8_i4.c: Regenerated.\n+\t* generated/maxloc1_8_i8.c: Regenerated.\n+\t* generated/maxloc1_8_r10.c: Regenerated.\n+\t* generated/maxloc1_8_r16.c: Regenerated.\n+\t* generated/maxloc1_8_r4.c: Regenerated.\n+\t* generated/maxloc1_8_r8.c: Regenerated.\n+\t* generated/maxval_i1.c: Regenerated.\n+\t* generated/maxval_i16.c: Regenerated.\n+\t* generated/maxval_i2.c: Regenerated.\n+\t* generated/maxval_i4.c: Regenerated.\n+\t* generated/maxval_i8.c: Regenerated.\n+\t* generated/maxval_r10.c: Regenerated.\n+\t* generated/maxval_r16.c: Regenerated.\n+\t* generated/maxval_r4.c: Regenerated.\n+\t* generated/maxval_r8.c: Regenerated.\n+\t* generated/minloc0_16_i1.c: Regenerated.\n+\t* generated/minloc0_16_i16.c: Regenerated.\n+\t* generated/minloc0_16_i2.c: Regenerated.\n+\t* generated/minloc0_16_i4.c: Regenerated.\n+\t* generated/minloc0_16_i8.c: Regenerated.\n+\t* generated/minloc0_16_r10.c: Regenerated.\n+\t* generated/minloc0_16_r16.c: Regenerated.\n+\t* generated/minloc0_16_r4.c: Regenerated.\n+\t* generated/minloc0_16_r8.c: Regenerated.\n+\t* generated/minloc0_4_i1.c: Regenerated.\n+\t* generated/minloc0_4_i16.c: Regenerated.\n+\t* generated/minloc0_4_i2.c: Regenerated.\n+\t* generated/minloc0_4_i4.c: Regenerated.\n+\t* generated/minloc0_4_i8.c: Regenerated.\n+\t* generated/minloc0_4_r10.c: Regenerated.\n+\t* generated/minloc0_4_r16.c: Regenerated.\n+\t* generated/minloc0_4_r4.c: Regenerated.\n+\t* generated/minloc0_4_r8.c: Regenerated.\n+\t* generated/minloc0_8_i1.c: Regenerated.\n+\t* generated/minloc0_8_i16.c: Regenerated.\n+\t* generated/minloc0_8_i2.c: Regenerated.\n+\t* generated/minloc0_8_i4.c: Regenerated.\n+\t* generated/minloc0_8_i8.c: Regenerated.\n+\t* generated/minloc0_8_r10.c: Regenerated.\n+\t* generated/minloc0_8_r16.c: Regenerated.\n+\t* generated/minloc0_8_r4.c: Regenerated.\n+\t* generated/minloc0_8_r8.c: Regenerated.\n+\t* generated/minloc1_16_i1.c: Regenerated.\n+\t* generated/minloc1_16_i16.c: Regenerated.\n+\t* generated/minloc1_16_i2.c: Regenerated.\n+\t* generated/minloc1_16_i4.c: Regenerated.\n+\t* generated/minloc1_16_i8.c: Regenerated.\n+\t* generated/minloc1_16_r10.c: Regenerated.\n+\t* generated/minloc1_16_r16.c: Regenerated.\n+\t* generated/minloc1_16_r4.c: Regenerated.\n+\t* generated/minloc1_16_r8.c: Regenerated.\n+\t* generated/minloc1_4_i1.c: Regenerated.\n+\t* generated/minloc1_4_i16.c: Regenerated.\n+\t* generated/minloc1_4_i2.c: Regenerated.\n+\t* generated/minloc1_4_i4.c: Regenerated.\n+\t* generated/minloc1_4_i8.c: Regenerated.\n+\t* generated/minloc1_4_r10.c: Regenerated.\n+\t* generated/minloc1_4_r16.c: Regenerated.\n+\t* generated/minloc1_4_r4.c: Regenerated.\n+\t* generated/minloc1_4_r8.c: Regenerated.\n+\t* generated/minloc1_8_i1.c: Regenerated.\n+\t* generated/minloc1_8_i16.c: Regenerated.\n+\t* generated/minloc1_8_i2.c: Regenerated.\n+\t* generated/minloc1_8_i4.c: Regenerated.\n+\t* generated/minloc1_8_i8.c: Regenerated.\n+\t* generated/minloc1_8_r10.c: Regenerated.\n+\t* generated/minloc1_8_r16.c: Regenerated.\n+\t* generated/minloc1_8_r4.c: Regenerated.\n+\t* generated/minloc1_8_r8.c: Regenerated.\n+\t* generated/minval_i1.c: Regenerated.\n+\t* generated/minval_i16.c: Regenerated.\n+\t* generated/minval_i2.c: Regenerated.\n+\t* generated/minval_i4.c: Regenerated.\n+\t* generated/minval_i8.c: Regenerated.\n+\t* generated/minval_r10.c: Regenerated.\n+\t* generated/minval_r16.c: Regenerated.\n+\t* generated/minval_r4.c: Regenerated.\n+\t* generated/minval_r8.c: Regenerated.\n+\t* generated/norm2_r10.c: Regenerated.\n+\t* generated/norm2_r16.c: Regenerated.\n+\t* generated/norm2_r4.c: Regenerated.\n+\t* generated/norm2_r8.c: Regenerated.\n+\t* generated/pack_c10.c: Regenerated.\n+\t* generated/pack_c16.c: Regenerated.\n+\t* generated/pack_c4.c: Regenerated.\n+\t* generated/pack_c8.c: Regenerated.\n+\t* generated/pack_i1.c: Regenerated.\n+\t* generated/pack_i16.c: Regenerated.\n+\t* generated/pack_i2.c: Regenerated.\n+\t* generated/pack_i4.c: Regenerated.\n+\t* generated/pack_i8.c: Regenerated.\n+\t* generated/pack_r10.c: Regenerated.\n+\t* generated/pack_r16.c: Regenerated.\n+\t* generated/pack_r4.c: Regenerated.\n+\t* generated/pack_r8.c: Regenerated.\n+\t* generated/parity_l1.c: Regenerated.\n+\t* generated/parity_l16.c: Regenerated.\n+\t* generated/parity_l2.c: Regenerated.\n+\t* generated/parity_l4.c: Regenerated.\n+\t* generated/parity_l8.c: Regenerated.\n+\t* generated/product_c10.c: Regenerated.\n+\t* generated/product_c16.c: Regenerated.\n+\t* generated/product_c4.c: Regenerated.\n+\t* generated/product_c8.c: Regenerated.\n+\t* generated/product_i1.c: Regenerated.\n+\t* generated/product_i16.c: Regenerated.\n+\t* generated/product_i2.c: Regenerated.\n+\t* generated/product_i4.c: Regenerated.\n+\t* generated/product_i8.c: Regenerated.\n+\t* generated/product_r10.c: Regenerated.\n+\t* generated/product_r16.c: Regenerated.\n+\t* generated/product_r4.c: Regenerated.\n+\t* generated/product_r8.c: Regenerated.\n+\t* generated/reshape_c10.c: Regenerated.\n+\t* generated/reshape_c16.c: Regenerated.\n+\t* generated/reshape_c4.c: Regenerated.\n+\t* generated/reshape_c8.c: Regenerated.\n+\t* generated/reshape_i16.c: Regenerated.\n+\t* generated/reshape_i4.c: Regenerated.\n+\t* generated/reshape_i8.c: Regenerated.\n+\t* generated/reshape_r10.c: Regenerated.\n+\t* generated/reshape_r16.c: Regenerated.\n+\t* generated/reshape_r4.c: Regenerated.\n+\t* generated/reshape_r8.c: Regenerated.\n+\t* generated/shape_i16.c: Regenerated.\n+\t* generated/shape_i4.c: Regenerated.\n+\t* generated/shape_i8.c: Regenerated.\n+\t* generated/spread_c10.c: Regenerated.\n+\t* generated/spread_c16.c: Regenerated.\n+\t* generated/spread_c4.c: Regenerated.\n+\t* generated/spread_c8.c: Regenerated.\n+\t* generated/spread_i1.c: Regenerated.\n+\t* generated/spread_i16.c: Regenerated.\n+\t* generated/spread_i2.c: Regenerated.\n+\t* generated/spread_i4.c: Regenerated.\n+\t* generated/spread_i8.c: Regenerated.\n+\t* generated/spread_r10.c: Regenerated.\n+\t* generated/spread_r16.c: Regenerated.\n+\t* generated/spread_r4.c: Regenerated.\n+\t* generated/spread_r8.c: Regenerated.\n+\t* generated/sum_c10.c: Regenerated.\n+\t* generated/sum_c16.c: Regenerated.\n+\t* generated/sum_c4.c: Regenerated.\n+\t* generated/sum_c8.c: Regenerated.\n+\t* generated/sum_i1.c: Regenerated.\n+\t* generated/sum_i16.c: Regenerated.\n+\t* generated/sum_i2.c: Regenerated.\n+\t* generated/sum_i4.c: Regenerated.\n+\t* generated/sum_i8.c: Regenerated.\n+\t* generated/sum_r10.c: Regenerated.\n+\t* generated/sum_r16.c: Regenerated.\n+\t* generated/sum_r4.c: Regenerated.\n+\t* generated/sum_r8.c: Regenerated.\n+\t* generated/transpose_c10.c: Regenerated.\n+\t* generated/transpose_c16.c: Regenerated.\n+\t* generated/transpose_c4.c: Regenerated.\n+\t* generated/transpose_c8.c: Regenerated.\n+\t* generated/transpose_i16.c: Regenerated.\n+\t* generated/transpose_i4.c: Regenerated.\n+\t* generated/transpose_i8.c: Regenerated.\n+\t* generated/transpose_r10.c: Regenerated.\n+\t* generated/transpose_r16.c: Regenerated.\n+\t* generated/transpose_r4.c: Regenerated.\n+\t* generated/transpose_r8.c: Regenerated.\n+\t* generated/unpack_c10.c: Regenerated.\n+\t* generated/unpack_c16.c: Regenerated.\n+\t* generated/unpack_c4.c: Regenerated.\n+\t* generated/unpack_c8.c: Regenerated.\n+\t* generated/unpack_i1.c: Regenerated.\n+\t* generated/unpack_i16.c: Regenerated.\n+\t* generated/unpack_i2.c: Regenerated.\n+\t* generated/unpack_i4.c: Regenerated.\n+\t* generated/unpack_i8.c: Regenerated.\n+\t* generated/unpack_r10.c: Regenerated.\n+\t* generated/unpack_r16.c: Regenerated.\n+\t* generated/unpack_r4.c: Regenerated.\n+\t* generated/unpack_r8.c: Regenerated.\n+\t* intrinsics/cshift0.c: Use xmalloc.\n+\t* intrinsics/ctime.c: Likewise.\n+\t* intrinsics/date_and_time.c: Likewise.\n+\t* intrinsics/eoshift0.c: Likewise.\n+\t* intrinsics/eoshift2.c: Likewise.\n+\t* intrinsics/getlog.c: Likewise.\n+\t* intrinsics/pack_generic.c: Likewise.\n+\t* intrinsics/reshape_generic.c: Likewise.\n+\t* intrinsics/spread_generic.c: Likewise.\n+\t* intrinsics/string_intrinsics_inc.c: Likewise.\n+\t* intrinsics/transpose_generic.c: Likewise.\n+\t* intrinsics/unpack_generic.c: Likewise.\n+\t* io/fbuf.c: Likewise.\n+\t* io/format.c: Likewise.\n+\t* io/intrinsics.c: Likewise.\n+\t* io/list_read.c: Likewise.\n+\t* io/open.c: Likewise.\n+\t* io/transfer.c: Likewise.\n+\t* io/unit.c: Likewise.\n+\t* io/unix.c: Likewise.\n+\t* io/write.c: Likewise.\n+\t* m4/bessel.m4: Likewise.\n+\t* m4/cshift1.m4: Likewise.\n+\t* m4/eoshift1.m4: Likewise.\n+\t* m4/eoshift3.m4: Likewise.\n+\t* m4/iforeach.m4: Likewise.\n+\t* m4/ifunction.m4: Likewise.\n+\t* m4/ifunction_logical.m4: Likewise.\n+\t* m4/in_pack.m4: Likewise.\n+\t* m4/matmul.m4: Likewise.\n+\t* m4/matmull.m4: Likewise.\n+\t* m4/pack.m4: Likewise.\n+\t* m4/reshape.m4: Likewise.\n+\t* m4/shape.m4: Likewise.\n+\t* m4/spread.m4: Likewise.\n+\t* m4/transpose.m4: Likewise.\n+\t* m4/unpack.m4: Likewise.\n+\t* runtime/convert_char.c: Likewise.\n+\t* runtime/environ.c: Likewise.\n+\t* runtime/in_pack_generic.c: Likewise.\n+\n 2012-03-26  Tristan Gingold  <gingold@adacore.com>\n \n \t* configure.ac: Use GCC_CHECK_MATH_FUNC for math functions."}, {"sha": "abc23cd1eda0db69f8aeb19e16114c35aa1af1c5", "filename": "libgfortran/Makefile.am", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.am?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -887,13 +887,13 @@ $(i_any_c): m4/any.m4 $(I_M4_DEPS2)\n $(i_count_c): m4/count.m4 $(I_M4_DEPS2)\n \t$(M4) -Dfile=$@ -I$(srcdir)/m4 count.m4 > $@\n \n-$(i_iall_c): m4/iall.m4 $(I_M4_DEPS)\n+$(i_iall_c): m4/iall.m4 $(I_M4_DEPS1)\n \t$(M4) -Dfile=$@ -I$(srcdir)/m4 iall.m4 > $@\n \n-$(i_iany_c): m4/iany.m4 $(I_M4_DEPS)\n+$(i_iany_c): m4/iany.m4 $(I_M4_DEPS1)\n \t$(M4) -Dfile=$@ -I$(srcdir)/m4 iany.m4 > $@\n \n-$(i_iparity_c): m4/iparity.m4 $(I_M4_DEPS)\n+$(i_iparity_c): m4/iparity.m4 $(I_M4_DEPS1)\n \t$(M4) -Dfile=$@ -I$(srcdir)/m4 iparity.m4 > $@\n \n $(i_maxloc0_c): m4/maxloc0.m4 $(I_M4_DEPS0)\n@@ -926,10 +926,10 @@ $(i_matmul_c): m4/matmul.m4 $(I_M4_DEPS)\n $(i_matmull_c): m4/matmull.m4 $(I_M4_DEPS)\n \t$(M4) -Dfile=$@ -I$(srcdir)/m4 matmull.m4 > $@\n \n-$(i_norm2_c): m4/norm2.m4 $(I_M4_DEPS)\n+$(i_norm2_c): m4/norm2.m4 $(I_M4_DEPS1)\n \t$(M4) -Dfile=$@ -I$(srcdir)/m4 norm2.m4 > $@\n \n-$(i_parity_c): m4/parity.m4 $(I_M4_DEPS)\n+$(i_parity_c): m4/parity.m4 $(I_M4_DEPS1)\n \t$(M4) -Dfile=$@ -I$(srcdir)/m4 parity.m4 > $@\n \n $(i_transpose_c): m4/transpose.m4 $(I_M4_DEPS)"}, {"sha": "aa23e85e37b06a3a5309efa7df32d5e96517df54", "filename": "libgfortran/Makefile.in", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.in?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -5936,13 +5936,13 @@ fpu-target.h: $(srcdir)/$(FPU_HOST_HEADER)\n @MAINTAINER_MODE_TRUE@$(i_count_c): m4/count.m4 $(I_M4_DEPS2)\n @MAINTAINER_MODE_TRUE@\t$(M4) -Dfile=$@ -I$(srcdir)/m4 count.m4 > $@\n \n-@MAINTAINER_MODE_TRUE@$(i_iall_c): m4/iall.m4 $(I_M4_DEPS)\n+@MAINTAINER_MODE_TRUE@$(i_iall_c): m4/iall.m4 $(I_M4_DEPS1)\n @MAINTAINER_MODE_TRUE@\t$(M4) -Dfile=$@ -I$(srcdir)/m4 iall.m4 > $@\n \n-@MAINTAINER_MODE_TRUE@$(i_iany_c): m4/iany.m4 $(I_M4_DEPS)\n+@MAINTAINER_MODE_TRUE@$(i_iany_c): m4/iany.m4 $(I_M4_DEPS1)\n @MAINTAINER_MODE_TRUE@\t$(M4) -Dfile=$@ -I$(srcdir)/m4 iany.m4 > $@\n \n-@MAINTAINER_MODE_TRUE@$(i_iparity_c): m4/iparity.m4 $(I_M4_DEPS)\n+@MAINTAINER_MODE_TRUE@$(i_iparity_c): m4/iparity.m4 $(I_M4_DEPS1)\n @MAINTAINER_MODE_TRUE@\t$(M4) -Dfile=$@ -I$(srcdir)/m4 iparity.m4 > $@\n \n @MAINTAINER_MODE_TRUE@$(i_maxloc0_c): m4/maxloc0.m4 $(I_M4_DEPS0)\n@@ -5975,10 +5975,10 @@ fpu-target.h: $(srcdir)/$(FPU_HOST_HEADER)\n @MAINTAINER_MODE_TRUE@$(i_matmull_c): m4/matmull.m4 $(I_M4_DEPS)\n @MAINTAINER_MODE_TRUE@\t$(M4) -Dfile=$@ -I$(srcdir)/m4 matmull.m4 > $@\n \n-@MAINTAINER_MODE_TRUE@$(i_norm2_c): m4/norm2.m4 $(I_M4_DEPS)\n+@MAINTAINER_MODE_TRUE@$(i_norm2_c): m4/norm2.m4 $(I_M4_DEPS1)\n @MAINTAINER_MODE_TRUE@\t$(M4) -Dfile=$@ -I$(srcdir)/m4 norm2.m4 > $@\n \n-@MAINTAINER_MODE_TRUE@$(i_parity_c): m4/parity.m4 $(I_M4_DEPS)\n+@MAINTAINER_MODE_TRUE@$(i_parity_c): m4/parity.m4 $(I_M4_DEPS1)\n @MAINTAINER_MODE_TRUE@\t$(M4) -Dfile=$@ -I$(srcdir)/m4 parity.m4 > $@\n \n @MAINTAINER_MODE_TRUE@$(i_transpose_c): m4/transpose.m4 $(I_M4_DEPS)"}, {"sha": "81020f7b331ee9700f3027843c709dca171db5b8", "filename": "libgfortran/generated/all_l1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fall_l1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fall_l1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fall_l1.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -111,7 +111,7 @@ all_l1 (gfc_array_l1 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "520de21e7d7314c8e98e7e0c746080de22f79966", "filename": "libgfortran/generated/all_l16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fall_l16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fall_l16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fall_l16.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -111,7 +111,7 @@ all_l16 (gfc_array_l16 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "8e5170807c6af40441646b39fe40d2a34bb0b379", "filename": "libgfortran/generated/all_l2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fall_l2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fall_l2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fall_l2.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -111,7 +111,7 @@ all_l2 (gfc_array_l2 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "f78987c70f34c25f489165f4cb914dc5d9729146", "filename": "libgfortran/generated/all_l4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fall_l4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fall_l4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fall_l4.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -111,7 +111,7 @@ all_l4 (gfc_array_l4 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "57becda58c343f3624d396677e8387ac506631bf", "filename": "libgfortran/generated/all_l8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fall_l8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fall_l8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fall_l8.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -111,7 +111,7 @@ all_l8 (gfc_array_l8 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "eca125fb2565d84a99ee0a9765a71fa954948485", "filename": "libgfortran/generated/any_l1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fany_l1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fany_l1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fany_l1.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -111,7 +111,7 @@ any_l1 (gfc_array_l1 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "2c65db6b7a529802bc77f0ef5041232b118655d7", "filename": "libgfortran/generated/any_l16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fany_l16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fany_l16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fany_l16.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -111,7 +111,7 @@ any_l16 (gfc_array_l16 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "64ed5bb6499707a5aefa6e4af4c4a17f56b8e3ea", "filename": "libgfortran/generated/any_l2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fany_l2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fany_l2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fany_l2.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -111,7 +111,7 @@ any_l2 (gfc_array_l2 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "4cad8c88a5c93fe06433297e2584849e11e687c8", "filename": "libgfortran/generated/any_l4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fany_l4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fany_l4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fany_l4.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -111,7 +111,7 @@ any_l4 (gfc_array_l4 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "55ffaf1e162aa3bdf4546ba56317c63b7749ea6c", "filename": "libgfortran/generated/any_l8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fany_l8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fany_l8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fany_l8.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -111,7 +111,7 @@ any_l8 (gfc_array_l8 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "6a3a139fdb7a173a8be1abf22110501f63271eb6", "filename": "libgfortran/generated/bessel_r10.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fbessel_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fbessel_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fbessel_r10.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -55,7 +55,7 @@ bessel_jn_r10 (gfc_array_r10 * const restrict ret, int n1, int n2, GFC_REAL_10 x\n     {\n       size_t size = n2 < n1 ? 0 : n2-n1+1; \n       GFC_DIMENSION_SET(ret->dim[0], 0, size-1, 1);\n-      ret->base_addr = internal_malloc_size (sizeof (GFC_REAL_10) * size);\n+      ret->base_addr = xmalloc (sizeof (GFC_REAL_10) * size);\n       ret->offset = 0;\n     }\n \n@@ -122,7 +122,7 @@ bessel_yn_r10 (gfc_array_r10 * const restrict ret, int n1, int n2,\n     {\n       size_t size = n2 < n1 ? 0 : n2-n1+1; \n       GFC_DIMENSION_SET(ret->dim[0], 0, size-1, 1);\n-      ret->base_addr = internal_malloc_size (sizeof (GFC_REAL_10) * size);\n+      ret->base_addr = xmalloc (sizeof (GFC_REAL_10) * size);\n       ret->offset = 0;\n     }\n "}, {"sha": "c1aa5e25570eee3e17316093f50836ccd3f64284", "filename": "libgfortran/generated/bessel_r16.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fbessel_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fbessel_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fbessel_r16.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -59,7 +59,7 @@ bessel_jn_r16 (gfc_array_r16 * const restrict ret, int n1, int n2, GFC_REAL_16 x\n     {\n       size_t size = n2 < n1 ? 0 : n2-n1+1; \n       GFC_DIMENSION_SET(ret->dim[0], 0, size-1, 1);\n-      ret->base_addr = internal_malloc_size (sizeof (GFC_REAL_16) * size);\n+      ret->base_addr = xmalloc (sizeof (GFC_REAL_16) * size);\n       ret->offset = 0;\n     }\n \n@@ -126,7 +126,7 @@ bessel_yn_r16 (gfc_array_r16 * const restrict ret, int n1, int n2,\n     {\n       size_t size = n2 < n1 ? 0 : n2-n1+1; \n       GFC_DIMENSION_SET(ret->dim[0], 0, size-1, 1);\n-      ret->base_addr = internal_malloc_size (sizeof (GFC_REAL_16) * size);\n+      ret->base_addr = xmalloc (sizeof (GFC_REAL_16) * size);\n       ret->offset = 0;\n     }\n "}, {"sha": "0f7c4cc423396403432b7b1582d9c02e50f76b01", "filename": "libgfortran/generated/bessel_r4.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fbessel_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fbessel_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fbessel_r4.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -55,7 +55,7 @@ bessel_jn_r4 (gfc_array_r4 * const restrict ret, int n1, int n2, GFC_REAL_4 x)\n     {\n       size_t size = n2 < n1 ? 0 : n2-n1+1; \n       GFC_DIMENSION_SET(ret->dim[0], 0, size-1, 1);\n-      ret->base_addr = internal_malloc_size (sizeof (GFC_REAL_4) * size);\n+      ret->base_addr = xmalloc (sizeof (GFC_REAL_4) * size);\n       ret->offset = 0;\n     }\n \n@@ -122,7 +122,7 @@ bessel_yn_r4 (gfc_array_r4 * const restrict ret, int n1, int n2,\n     {\n       size_t size = n2 < n1 ? 0 : n2-n1+1; \n       GFC_DIMENSION_SET(ret->dim[0], 0, size-1, 1);\n-      ret->base_addr = internal_malloc_size (sizeof (GFC_REAL_4) * size);\n+      ret->base_addr = xmalloc (sizeof (GFC_REAL_4) * size);\n       ret->offset = 0;\n     }\n "}, {"sha": "cc61300057ae3204119ee0a4c163f55ecc41ce7f", "filename": "libgfortran/generated/bessel_r8.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fbessel_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fbessel_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fbessel_r8.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -55,7 +55,7 @@ bessel_jn_r8 (gfc_array_r8 * const restrict ret, int n1, int n2, GFC_REAL_8 x)\n     {\n       size_t size = n2 < n1 ? 0 : n2-n1+1; \n       GFC_DIMENSION_SET(ret->dim[0], 0, size-1, 1);\n-      ret->base_addr = internal_malloc_size (sizeof (GFC_REAL_8) * size);\n+      ret->base_addr = xmalloc (sizeof (GFC_REAL_8) * size);\n       ret->offset = 0;\n     }\n \n@@ -122,7 +122,7 @@ bessel_yn_r8 (gfc_array_r8 * const restrict ret, int n1, int n2,\n     {\n       size_t size = n2 < n1 ? 0 : n2-n1+1; \n       GFC_DIMENSION_SET(ret->dim[0], 0, size-1, 1);\n-      ret->base_addr = internal_malloc_size (sizeof (GFC_REAL_8) * size);\n+      ret->base_addr = xmalloc (sizeof (GFC_REAL_8) * size);\n       ret->offset = 0;\n     }\n "}, {"sha": "ad5af4fb5a613daebbef563f2b30509f7e8db01a", "filename": "libgfortran/generated/count_16_l.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fcount_16_l.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fcount_16_l.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fcount_16_l.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -111,7 +111,7 @@ count_16_l (gfc_array_i16 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "92ef8191dcb47590cfd6e0758bc5662f4b0bcf4d", "filename": "libgfortran/generated/count_1_l.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fcount_1_l.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fcount_1_l.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fcount_1_l.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -111,7 +111,7 @@ count_1_l (gfc_array_i1 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "503a07d4cefdd89dd730d4e56283d6a00774a7ae", "filename": "libgfortran/generated/count_2_l.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fcount_2_l.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fcount_2_l.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fcount_2_l.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -111,7 +111,7 @@ count_2_l (gfc_array_i2 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "380c0058e112ff1e8f127c886f0f0286a654c1ac", "filename": "libgfortran/generated/count_4_l.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fcount_4_l.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fcount_4_l.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fcount_4_l.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -111,7 +111,7 @@ count_4_l (gfc_array_i4 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "16c7cf3aa0e017c1839c7bf12eb712cf79b72059", "filename": "libgfortran/generated/count_8_l.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fcount_8_l.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fcount_8_l.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fcount_8_l.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -111,7 +111,7 @@ count_8_l (gfc_array_i8 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "22d1b29d0fa7ac616e9ebf1b62854eeb4b4494d4", "filename": "libgfortran/generated/cshift1_16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fcshift1_16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fcshift1_16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fcshift1_16.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -80,7 +80,7 @@ cshift1 (gfc_array_char * const restrict ret,\n     {\n       int i;\n \n-      ret->base_addr = internal_malloc_size (size * arraysize);\n+      ret->base_addr = xmalloc (size * arraysize);\n       ret->offset = 0;\n       ret->dtype = array->dtype;\n       for (i = 0; i < GFC_DESCRIPTOR_RANK (array); i++)"}, {"sha": "a0f3ab60050d856576b0843c63dbfc6318f98e36", "filename": "libgfortran/generated/cshift1_4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fcshift1_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fcshift1_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fcshift1_4.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -80,7 +80,7 @@ cshift1 (gfc_array_char * const restrict ret,\n     {\n       int i;\n \n-      ret->base_addr = internal_malloc_size (size * arraysize);\n+      ret->base_addr = xmalloc (size * arraysize);\n       ret->offset = 0;\n       ret->dtype = array->dtype;\n       for (i = 0; i < GFC_DESCRIPTOR_RANK (array); i++)"}, {"sha": "ceb74091a8928ce46cd98f0c2092840f695c4f28", "filename": "libgfortran/generated/cshift1_8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fcshift1_8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fcshift1_8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fcshift1_8.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -80,7 +80,7 @@ cshift1 (gfc_array_char * const restrict ret,\n     {\n       int i;\n \n-      ret->base_addr = internal_malloc_size (size * arraysize);\n+      ret->base_addr = xmalloc (size * arraysize);\n       ret->offset = 0;\n       ret->dtype = array->dtype;\n       for (i = 0; i < GFC_DESCRIPTOR_RANK (array); i++)"}, {"sha": "e3096288b0eeacaf17860d3579a9bdf46b0c8ca6", "filename": "libgfortran/generated/eoshift1_16.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Feoshift1_16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Feoshift1_16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Feoshift1_16.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -105,8 +105,8 @@ eoshift1 (gfc_array_char * const restrict ret,\n \t  GFC_DIMENSION_SET(ret->dim[i], 0, ub, str);\n \n         }\n-      /* internal_malloc_size allocates a single byte for zero size.  */\n-      ret->base_addr = internal_malloc_size (size * arraysize);\n+      /* xmalloc allocates a single byte for zero size.  */\n+      ret->base_addr = xmalloc (size * arraysize);\n \n     }\n   else if (unlikely (compile_options.bounds_check))"}, {"sha": "451a6af1d650c387f09582c169d6724b66181704", "filename": "libgfortran/generated/eoshift1_4.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Feoshift1_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Feoshift1_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Feoshift1_4.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -105,8 +105,8 @@ eoshift1 (gfc_array_char * const restrict ret,\n \t  GFC_DIMENSION_SET(ret->dim[i], 0, ub, str);\n \n         }\n-      /* internal_malloc_size allocates a single byte for zero size.  */\n-      ret->base_addr = internal_malloc_size (size * arraysize);\n+      /* xmalloc allocates a single byte for zero size.  */\n+      ret->base_addr = xmalloc (size * arraysize);\n \n     }\n   else if (unlikely (compile_options.bounds_check))"}, {"sha": "1f056b36b98900ee1bb37776af74325ca7c7c916", "filename": "libgfortran/generated/eoshift1_8.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Feoshift1_8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Feoshift1_8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Feoshift1_8.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -105,8 +105,8 @@ eoshift1 (gfc_array_char * const restrict ret,\n \t  GFC_DIMENSION_SET(ret->dim[i], 0, ub, str);\n \n         }\n-      /* internal_malloc_size allocates a single byte for zero size.  */\n-      ret->base_addr = internal_malloc_size (size * arraysize);\n+      /* xmalloc allocates a single byte for zero size.  */\n+      ret->base_addr = xmalloc (size * arraysize);\n \n     }\n   else if (unlikely (compile_options.bounds_check))"}, {"sha": "5384a720de79499b627c66a4a256836a6169ea88", "filename": "libgfortran/generated/eoshift3_16.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Feoshift3_16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Feoshift3_16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Feoshift3_16.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -89,7 +89,7 @@ eoshift3 (gfc_array_char * const restrict ret,\n     {\n       int i;\n \n-      ret->base_addr = internal_malloc_size (size * arraysize);\n+      ret->base_addr = xmalloc (size * arraysize);\n       ret->offset = 0;\n       ret->dtype = array->dtype;\n       for (i = 0; i < GFC_DESCRIPTOR_RANK (array); i++)\n@@ -107,8 +107,8 @@ eoshift3 (gfc_array_char * const restrict ret,\n \t  GFC_DIMENSION_SET(ret->dim[i], 0, ub, str);\n \n         }\n-      /* internal_malloc_size allocates a single byte for zero size.  */\n-      ret->base_addr = internal_malloc_size (size * arraysize);\n+      /* xmalloc allocates a single byte for zero size.  */\n+      ret->base_addr = xmalloc (size * arraysize);\n \n     }\n   else if (unlikely (compile_options.bounds_check))"}, {"sha": "6618516818a564329351d568dbe580c16eed2d21", "filename": "libgfortran/generated/eoshift3_4.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Feoshift3_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Feoshift3_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Feoshift3_4.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -89,7 +89,7 @@ eoshift3 (gfc_array_char * const restrict ret,\n     {\n       int i;\n \n-      ret->base_addr = internal_malloc_size (size * arraysize);\n+      ret->base_addr = xmalloc (size * arraysize);\n       ret->offset = 0;\n       ret->dtype = array->dtype;\n       for (i = 0; i < GFC_DESCRIPTOR_RANK (array); i++)\n@@ -107,8 +107,8 @@ eoshift3 (gfc_array_char * const restrict ret,\n \t  GFC_DIMENSION_SET(ret->dim[i], 0, ub, str);\n \n         }\n-      /* internal_malloc_size allocates a single byte for zero size.  */\n-      ret->base_addr = internal_malloc_size (size * arraysize);\n+      /* xmalloc allocates a single byte for zero size.  */\n+      ret->base_addr = xmalloc (size * arraysize);\n \n     }\n   else if (unlikely (compile_options.bounds_check))"}, {"sha": "a90d87fcabf175a1dfee2924f5710e9d2559dee6", "filename": "libgfortran/generated/eoshift3_8.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Feoshift3_8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Feoshift3_8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Feoshift3_8.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -89,7 +89,7 @@ eoshift3 (gfc_array_char * const restrict ret,\n     {\n       int i;\n \n-      ret->base_addr = internal_malloc_size (size * arraysize);\n+      ret->base_addr = xmalloc (size * arraysize);\n       ret->offset = 0;\n       ret->dtype = array->dtype;\n       for (i = 0; i < GFC_DESCRIPTOR_RANK (array); i++)\n@@ -107,8 +107,8 @@ eoshift3 (gfc_array_char * const restrict ret,\n \t  GFC_DIMENSION_SET(ret->dim[i], 0, ub, str);\n \n         }\n-      /* internal_malloc_size allocates a single byte for zero size.  */\n-      ret->base_addr = internal_malloc_size (size * arraysize);\n+      /* xmalloc allocates a single byte for zero size.  */\n+      ret->base_addr = xmalloc (size * arraysize);\n \n     }\n   else if (unlikely (compile_options.bounds_check))"}, {"sha": "dbe0fa74d70d31fbb0e75d995df23d13d7885ef4", "filename": "libgfortran/generated/iall_i1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fiall_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fiall_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fiall_i1.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -100,7 +100,7 @@ iall_i1 (gfc_array_i1 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_1) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -285,7 +285,7 @@ miall_i1 (gfc_array_i1 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -445,7 +445,7 @@ siall_i1 (gfc_array_i1 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "02e61fdc4a650e7a21c61d265311999b67a80637", "filename": "libgfortran/generated/iall_i16.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fiall_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fiall_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fiall_i16.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -100,7 +100,7 @@ iall_i16 (gfc_array_i16 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_16) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -285,7 +285,7 @@ miall_i16 (gfc_array_i16 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -445,7 +445,7 @@ siall_i16 (gfc_array_i16 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "e9c181c53091ac9b0a98316c43d4904f188ae57f", "filename": "libgfortran/generated/iall_i2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fiall_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fiall_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fiall_i2.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -100,7 +100,7 @@ iall_i2 (gfc_array_i2 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_2) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -285,7 +285,7 @@ miall_i2 (gfc_array_i2 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -445,7 +445,7 @@ siall_i2 (gfc_array_i2 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "8cd3b3e9acf6a839b4d4b92e2cc2ebfc61d4bc33", "filename": "libgfortran/generated/iall_i4.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fiall_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fiall_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fiall_i4.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -100,7 +100,7 @@ iall_i4 (gfc_array_i4 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_4) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -285,7 +285,7 @@ miall_i4 (gfc_array_i4 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -445,7 +445,7 @@ siall_i4 (gfc_array_i4 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "8e2bb1ad46d69cf97753a839656fadc462d63d47", "filename": "libgfortran/generated/iall_i8.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fiall_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fiall_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fiall_i8.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -100,7 +100,7 @@ iall_i8 (gfc_array_i8 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_8) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -285,7 +285,7 @@ miall_i8 (gfc_array_i8 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -445,7 +445,7 @@ siall_i8 (gfc_array_i8 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "52b6f923fecf02b0f6cad03367d7c9d380066d08", "filename": "libgfortran/generated/iany_i1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fiany_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fiany_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fiany_i1.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -100,7 +100,7 @@ iany_i1 (gfc_array_i1 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_1) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -285,7 +285,7 @@ miany_i1 (gfc_array_i1 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -445,7 +445,7 @@ siany_i1 (gfc_array_i1 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "9194aa5731563cc9fdf2ddb981704515f4d0e2c6", "filename": "libgfortran/generated/iany_i16.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fiany_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fiany_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fiany_i16.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -100,7 +100,7 @@ iany_i16 (gfc_array_i16 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_16) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -285,7 +285,7 @@ miany_i16 (gfc_array_i16 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -445,7 +445,7 @@ siany_i16 (gfc_array_i16 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "dcad9910490f33d105451f0bbbda63daae220302", "filename": "libgfortran/generated/iany_i2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fiany_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fiany_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fiany_i2.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -100,7 +100,7 @@ iany_i2 (gfc_array_i2 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_2) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -285,7 +285,7 @@ miany_i2 (gfc_array_i2 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -445,7 +445,7 @@ siany_i2 (gfc_array_i2 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "46a5d83062ef8f1df41ea8d2d7467be7e1e2247d", "filename": "libgfortran/generated/iany_i4.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fiany_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fiany_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fiany_i4.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -100,7 +100,7 @@ iany_i4 (gfc_array_i4 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_4) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -285,7 +285,7 @@ miany_i4 (gfc_array_i4 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -445,7 +445,7 @@ siany_i4 (gfc_array_i4 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "f0a2e904dd9a9b52389f9694b5be5b93214fea59", "filename": "libgfortran/generated/iany_i8.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fiany_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fiany_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fiany_i8.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -100,7 +100,7 @@ iany_i8 (gfc_array_i8 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_8) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -285,7 +285,7 @@ miany_i8 (gfc_array_i8 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -445,7 +445,7 @@ siany_i8 (gfc_array_i8 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "2279690764c731ec075838793777b80d9c220027", "filename": "libgfortran/generated/in_pack_c10.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fin_pack_c10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fin_pack_c10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fin_pack_c10.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -76,7 +76,7 @@ internal_pack_c10 (gfc_array_c10 * source)\n     return source->base_addr;\n \n   /* Allocate storage for the destination.  */\n-  destptr = (GFC_COMPLEX_10 *)internal_malloc_size (ssize * sizeof (GFC_COMPLEX_10));\n+  destptr = (GFC_COMPLEX_10 *)xmalloc (ssize * sizeof (GFC_COMPLEX_10));\n   dest = destptr;\n   src = source->base_addr;\n   stride0 = stride[0];"}, {"sha": "bc40163591cb2dede9920694c1a61d2de85e98ca", "filename": "libgfortran/generated/in_pack_c16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fin_pack_c16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fin_pack_c16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fin_pack_c16.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -76,7 +76,7 @@ internal_pack_c16 (gfc_array_c16 * source)\n     return source->base_addr;\n \n   /* Allocate storage for the destination.  */\n-  destptr = (GFC_COMPLEX_16 *)internal_malloc_size (ssize * sizeof (GFC_COMPLEX_16));\n+  destptr = (GFC_COMPLEX_16 *)xmalloc (ssize * sizeof (GFC_COMPLEX_16));\n   dest = destptr;\n   src = source->base_addr;\n   stride0 = stride[0];"}, {"sha": "532c2deb48fe725d2c0e14c3e306f946f70fe549", "filename": "libgfortran/generated/in_pack_c4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fin_pack_c4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fin_pack_c4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fin_pack_c4.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -76,7 +76,7 @@ internal_pack_c4 (gfc_array_c4 * source)\n     return source->base_addr;\n \n   /* Allocate storage for the destination.  */\n-  destptr = (GFC_COMPLEX_4 *)internal_malloc_size (ssize * sizeof (GFC_COMPLEX_4));\n+  destptr = (GFC_COMPLEX_4 *)xmalloc (ssize * sizeof (GFC_COMPLEX_4));\n   dest = destptr;\n   src = source->base_addr;\n   stride0 = stride[0];"}, {"sha": "b8e9ee4333dadefab70726ae8c373cd8729ae1a5", "filename": "libgfortran/generated/in_pack_c8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fin_pack_c8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fin_pack_c8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fin_pack_c8.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -76,7 +76,7 @@ internal_pack_c8 (gfc_array_c8 * source)\n     return source->base_addr;\n \n   /* Allocate storage for the destination.  */\n-  destptr = (GFC_COMPLEX_8 *)internal_malloc_size (ssize * sizeof (GFC_COMPLEX_8));\n+  destptr = (GFC_COMPLEX_8 *)xmalloc (ssize * sizeof (GFC_COMPLEX_8));\n   dest = destptr;\n   src = source->base_addr;\n   stride0 = stride[0];"}, {"sha": "d4449bb6904d450e547ab22d93c8fa1779b745d0", "filename": "libgfortran/generated/in_pack_i1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fin_pack_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fin_pack_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fin_pack_i1.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -76,7 +76,7 @@ internal_pack_1 (gfc_array_i1 * source)\n     return source->base_addr;\n \n   /* Allocate storage for the destination.  */\n-  destptr = (GFC_INTEGER_1 *)internal_malloc_size (ssize * sizeof (GFC_INTEGER_1));\n+  destptr = (GFC_INTEGER_1 *)xmalloc (ssize * sizeof (GFC_INTEGER_1));\n   dest = destptr;\n   src = source->base_addr;\n   stride0 = stride[0];"}, {"sha": "9a6b5e8b16292f0044eb0e1faf8bb3b89e5e3259", "filename": "libgfortran/generated/in_pack_i16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fin_pack_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fin_pack_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fin_pack_i16.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -76,7 +76,7 @@ internal_pack_16 (gfc_array_i16 * source)\n     return source->base_addr;\n \n   /* Allocate storage for the destination.  */\n-  destptr = (GFC_INTEGER_16 *)internal_malloc_size (ssize * sizeof (GFC_INTEGER_16));\n+  destptr = (GFC_INTEGER_16 *)xmalloc (ssize * sizeof (GFC_INTEGER_16));\n   dest = destptr;\n   src = source->base_addr;\n   stride0 = stride[0];"}, {"sha": "fb87ea716ef932800b6f986efee874662aff3a8a", "filename": "libgfortran/generated/in_pack_i2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fin_pack_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fin_pack_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fin_pack_i2.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -76,7 +76,7 @@ internal_pack_2 (gfc_array_i2 * source)\n     return source->base_addr;\n \n   /* Allocate storage for the destination.  */\n-  destptr = (GFC_INTEGER_2 *)internal_malloc_size (ssize * sizeof (GFC_INTEGER_2));\n+  destptr = (GFC_INTEGER_2 *)xmalloc (ssize * sizeof (GFC_INTEGER_2));\n   dest = destptr;\n   src = source->base_addr;\n   stride0 = stride[0];"}, {"sha": "44b339769f929517239b87ba37a3e88307ec4365", "filename": "libgfortran/generated/in_pack_i4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fin_pack_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fin_pack_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fin_pack_i4.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -76,7 +76,7 @@ internal_pack_4 (gfc_array_i4 * source)\n     return source->base_addr;\n \n   /* Allocate storage for the destination.  */\n-  destptr = (GFC_INTEGER_4 *)internal_malloc_size (ssize * sizeof (GFC_INTEGER_4));\n+  destptr = (GFC_INTEGER_4 *)xmalloc (ssize * sizeof (GFC_INTEGER_4));\n   dest = destptr;\n   src = source->base_addr;\n   stride0 = stride[0];"}, {"sha": "f0d6dd13e236a82c7dbe5602b51246e85fbf7d59", "filename": "libgfortran/generated/in_pack_i8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fin_pack_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fin_pack_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fin_pack_i8.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -76,7 +76,7 @@ internal_pack_8 (gfc_array_i8 * source)\n     return source->base_addr;\n \n   /* Allocate storage for the destination.  */\n-  destptr = (GFC_INTEGER_8 *)internal_malloc_size (ssize * sizeof (GFC_INTEGER_8));\n+  destptr = (GFC_INTEGER_8 *)xmalloc (ssize * sizeof (GFC_INTEGER_8));\n   dest = destptr;\n   src = source->base_addr;\n   stride0 = stride[0];"}, {"sha": "417fc4d9637552abe8b27f2ad9e3a65a20dd84c9", "filename": "libgfortran/generated/in_pack_r10.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fin_pack_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fin_pack_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fin_pack_r10.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -76,7 +76,7 @@ internal_pack_r10 (gfc_array_r10 * source)\n     return source->base_addr;\n \n   /* Allocate storage for the destination.  */\n-  destptr = (GFC_REAL_10 *)internal_malloc_size (ssize * sizeof (GFC_REAL_10));\n+  destptr = (GFC_REAL_10 *)xmalloc (ssize * sizeof (GFC_REAL_10));\n   dest = destptr;\n   src = source->base_addr;\n   stride0 = stride[0];"}, {"sha": "d815b2f6a8a12225bb385db406ccbfcc833094b4", "filename": "libgfortran/generated/in_pack_r16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fin_pack_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fin_pack_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fin_pack_r16.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -76,7 +76,7 @@ internal_pack_r16 (gfc_array_r16 * source)\n     return source->base_addr;\n \n   /* Allocate storage for the destination.  */\n-  destptr = (GFC_REAL_16 *)internal_malloc_size (ssize * sizeof (GFC_REAL_16));\n+  destptr = (GFC_REAL_16 *)xmalloc (ssize * sizeof (GFC_REAL_16));\n   dest = destptr;\n   src = source->base_addr;\n   stride0 = stride[0];"}, {"sha": "f8d99900de393491bdb500d5a0c57f469134e820", "filename": "libgfortran/generated/in_pack_r4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fin_pack_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fin_pack_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fin_pack_r4.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -76,7 +76,7 @@ internal_pack_r4 (gfc_array_r4 * source)\n     return source->base_addr;\n \n   /* Allocate storage for the destination.  */\n-  destptr = (GFC_REAL_4 *)internal_malloc_size (ssize * sizeof (GFC_REAL_4));\n+  destptr = (GFC_REAL_4 *)xmalloc (ssize * sizeof (GFC_REAL_4));\n   dest = destptr;\n   src = source->base_addr;\n   stride0 = stride[0];"}, {"sha": "be13b82ad1402994bf908a3d6eab432b25c1b5aa", "filename": "libgfortran/generated/in_pack_r8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fin_pack_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fin_pack_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fin_pack_r8.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -76,7 +76,7 @@ internal_pack_r8 (gfc_array_r8 * source)\n     return source->base_addr;\n \n   /* Allocate storage for the destination.  */\n-  destptr = (GFC_REAL_8 *)internal_malloc_size (ssize * sizeof (GFC_REAL_8));\n+  destptr = (GFC_REAL_8 *)xmalloc (ssize * sizeof (GFC_REAL_8));\n   dest = destptr;\n   src = source->base_addr;\n   stride0 = stride[0];"}, {"sha": "00eb4bcac9f82fda35b8f001295931b73aeb7494", "filename": "libgfortran/generated/iparity_i1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fiparity_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fiparity_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fiparity_i1.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -100,7 +100,7 @@ iparity_i1 (gfc_array_i1 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_1) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -285,7 +285,7 @@ miparity_i1 (gfc_array_i1 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -445,7 +445,7 @@ siparity_i1 (gfc_array_i1 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "6caad71db79b0e3ded9b6c22dbf04832ccf5684e", "filename": "libgfortran/generated/iparity_i16.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fiparity_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fiparity_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fiparity_i16.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -100,7 +100,7 @@ iparity_i16 (gfc_array_i16 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_16) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -285,7 +285,7 @@ miparity_i16 (gfc_array_i16 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -445,7 +445,7 @@ siparity_i16 (gfc_array_i16 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "c44f908035adf8c8383b21b5d465806da2341b2e", "filename": "libgfortran/generated/iparity_i2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fiparity_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fiparity_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fiparity_i2.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -100,7 +100,7 @@ iparity_i2 (gfc_array_i2 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_2) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -285,7 +285,7 @@ miparity_i2 (gfc_array_i2 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -445,7 +445,7 @@ siparity_i2 (gfc_array_i2 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "a7f76c8268d800d675b602adc9468922fce5cb0b", "filename": "libgfortran/generated/iparity_i4.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fiparity_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fiparity_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fiparity_i4.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -100,7 +100,7 @@ iparity_i4 (gfc_array_i4 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_4) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -285,7 +285,7 @@ miparity_i4 (gfc_array_i4 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -445,7 +445,7 @@ siparity_i4 (gfc_array_i4 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "e93389df0fef95e130b49c2425df84104426c164", "filename": "libgfortran/generated/iparity_i8.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fiparity_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fiparity_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fiparity_i8.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -100,7 +100,7 @@ iparity_i8 (gfc_array_i8 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_8) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -285,7 +285,7 @@ miparity_i8 (gfc_array_i8 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -445,7 +445,7 @@ siparity_i8 (gfc_array_i8 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "ffd3be62f97dc2059558ddcc1744774f527331fd", "filename": "libgfortran/generated/matmul_c10.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmatmul_c10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmatmul_c10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_c10.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -124,7 +124,7 @@ matmul_c10 (gfc_array_c10 * const restrict retarray,\n         }\n \n       retarray->base_addr\n-\t= internal_malloc_size (sizeof (GFC_COMPLEX_10) * size0 ((array_t *) retarray));\n+\t= xmalloc (sizeof (GFC_COMPLEX_10) * size0 ((array_t *) retarray));\n       retarray->offset = 0;\n     }\n     else if (unlikely (compile_options.bounds_check))"}, {"sha": "98799f52271b83f69fc24b96ff10866ace595525", "filename": "libgfortran/generated/matmul_c16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmatmul_c16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmatmul_c16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_c16.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -124,7 +124,7 @@ matmul_c16 (gfc_array_c16 * const restrict retarray,\n         }\n \n       retarray->base_addr\n-\t= internal_malloc_size (sizeof (GFC_COMPLEX_16) * size0 ((array_t *) retarray));\n+\t= xmalloc (sizeof (GFC_COMPLEX_16) * size0 ((array_t *) retarray));\n       retarray->offset = 0;\n     }\n     else if (unlikely (compile_options.bounds_check))"}, {"sha": "d5855db3060ae2a49ee1140ac6ee3f0b882db1c8", "filename": "libgfortran/generated/matmul_c4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmatmul_c4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmatmul_c4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_c4.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -124,7 +124,7 @@ matmul_c4 (gfc_array_c4 * const restrict retarray,\n         }\n \n       retarray->base_addr\n-\t= internal_malloc_size (sizeof (GFC_COMPLEX_4) * size0 ((array_t *) retarray));\n+\t= xmalloc (sizeof (GFC_COMPLEX_4) * size0 ((array_t *) retarray));\n       retarray->offset = 0;\n     }\n     else if (unlikely (compile_options.bounds_check))"}, {"sha": "97b63474eda8ce616089b71dfe3ec3f9e8ca3cb6", "filename": "libgfortran/generated/matmul_c8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmatmul_c8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmatmul_c8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_c8.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -124,7 +124,7 @@ matmul_c8 (gfc_array_c8 * const restrict retarray,\n         }\n \n       retarray->base_addr\n-\t= internal_malloc_size (sizeof (GFC_COMPLEX_8) * size0 ((array_t *) retarray));\n+\t= xmalloc (sizeof (GFC_COMPLEX_8) * size0 ((array_t *) retarray));\n       retarray->offset = 0;\n     }\n     else if (unlikely (compile_options.bounds_check))"}, {"sha": "61ddd9882f7a5ea8556bb62274c52433deb3fc9d", "filename": "libgfortran/generated/matmul_i1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmatmul_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmatmul_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_i1.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -124,7 +124,7 @@ matmul_i1 (gfc_array_i1 * const restrict retarray,\n         }\n \n       retarray->base_addr\n-\t= internal_malloc_size (sizeof (GFC_INTEGER_1) * size0 ((array_t *) retarray));\n+\t= xmalloc (sizeof (GFC_INTEGER_1) * size0 ((array_t *) retarray));\n       retarray->offset = 0;\n     }\n     else if (unlikely (compile_options.bounds_check))"}, {"sha": "01d1b85638fddb77c098415f0238977ca7a9077b", "filename": "libgfortran/generated/matmul_i16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmatmul_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmatmul_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_i16.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -124,7 +124,7 @@ matmul_i16 (gfc_array_i16 * const restrict retarray,\n         }\n \n       retarray->base_addr\n-\t= internal_malloc_size (sizeof (GFC_INTEGER_16) * size0 ((array_t *) retarray));\n+\t= xmalloc (sizeof (GFC_INTEGER_16) * size0 ((array_t *) retarray));\n       retarray->offset = 0;\n     }\n     else if (unlikely (compile_options.bounds_check))"}, {"sha": "2b6b99b735547f70d68ed897f294be489fcd83da", "filename": "libgfortran/generated/matmul_i2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmatmul_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmatmul_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_i2.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -124,7 +124,7 @@ matmul_i2 (gfc_array_i2 * const restrict retarray,\n         }\n \n       retarray->base_addr\n-\t= internal_malloc_size (sizeof (GFC_INTEGER_2) * size0 ((array_t *) retarray));\n+\t= xmalloc (sizeof (GFC_INTEGER_2) * size0 ((array_t *) retarray));\n       retarray->offset = 0;\n     }\n     else if (unlikely (compile_options.bounds_check))"}, {"sha": "536c773efdc4e0207fc57893c47bce33daf7c13b", "filename": "libgfortran/generated/matmul_i4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmatmul_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmatmul_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_i4.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -124,7 +124,7 @@ matmul_i4 (gfc_array_i4 * const restrict retarray,\n         }\n \n       retarray->base_addr\n-\t= internal_malloc_size (sizeof (GFC_INTEGER_4) * size0 ((array_t *) retarray));\n+\t= xmalloc (sizeof (GFC_INTEGER_4) * size0 ((array_t *) retarray));\n       retarray->offset = 0;\n     }\n     else if (unlikely (compile_options.bounds_check))"}, {"sha": "777c991ad6887c683d75fbe4d31f538fbec75b11", "filename": "libgfortran/generated/matmul_i8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmatmul_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmatmul_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_i8.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -124,7 +124,7 @@ matmul_i8 (gfc_array_i8 * const restrict retarray,\n         }\n \n       retarray->base_addr\n-\t= internal_malloc_size (sizeof (GFC_INTEGER_8) * size0 ((array_t *) retarray));\n+\t= xmalloc (sizeof (GFC_INTEGER_8) * size0 ((array_t *) retarray));\n       retarray->offset = 0;\n     }\n     else if (unlikely (compile_options.bounds_check))"}, {"sha": "ffb6d4c1865f52a764d0d9f6c1fe4af66b51e0e8", "filename": "libgfortran/generated/matmul_l16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmatmul_l16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmatmul_l16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_l16.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -88,7 +88,7 @@ matmul_l16 (gfc_array_l16 * const restrict retarray,\n         }\n           \n       retarray->base_addr\n-\t= internal_malloc_size (sizeof (GFC_LOGICAL_16) * size0 ((array_t *) retarray));\n+\t= xmalloc (sizeof (GFC_LOGICAL_16) * size0 ((array_t *) retarray));\n       retarray->offset = 0;\n     }\n     else if (unlikely (compile_options.bounds_check))"}, {"sha": "e73ff6910aeac7e9cad36886eac13a14325396f3", "filename": "libgfortran/generated/matmul_l4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmatmul_l4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmatmul_l4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_l4.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -88,7 +88,7 @@ matmul_l4 (gfc_array_l4 * const restrict retarray,\n         }\n           \n       retarray->base_addr\n-\t= internal_malloc_size (sizeof (GFC_LOGICAL_4) * size0 ((array_t *) retarray));\n+\t= xmalloc (sizeof (GFC_LOGICAL_4) * size0 ((array_t *) retarray));\n       retarray->offset = 0;\n     }\n     else if (unlikely (compile_options.bounds_check))"}, {"sha": "ba18cbacf4b73b896ed0ae9be5dba96218a8b6e7", "filename": "libgfortran/generated/matmul_l8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmatmul_l8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmatmul_l8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_l8.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -88,7 +88,7 @@ matmul_l8 (gfc_array_l8 * const restrict retarray,\n         }\n           \n       retarray->base_addr\n-\t= internal_malloc_size (sizeof (GFC_LOGICAL_8) * size0 ((array_t *) retarray));\n+\t= xmalloc (sizeof (GFC_LOGICAL_8) * size0 ((array_t *) retarray));\n       retarray->offset = 0;\n     }\n     else if (unlikely (compile_options.bounds_check))"}, {"sha": "dbe49eafcf16e18c60599e208e6c2914e8e3c84c", "filename": "libgfortran/generated/matmul_r10.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmatmul_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmatmul_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_r10.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -124,7 +124,7 @@ matmul_r10 (gfc_array_r10 * const restrict retarray,\n         }\n \n       retarray->base_addr\n-\t= internal_malloc_size (sizeof (GFC_REAL_10) * size0 ((array_t *) retarray));\n+\t= xmalloc (sizeof (GFC_REAL_10) * size0 ((array_t *) retarray));\n       retarray->offset = 0;\n     }\n     else if (unlikely (compile_options.bounds_check))"}, {"sha": "6798c7bf45149d6ab4471daec53913ac6431f850", "filename": "libgfortran/generated/matmul_r16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmatmul_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmatmul_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_r16.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -124,7 +124,7 @@ matmul_r16 (gfc_array_r16 * const restrict retarray,\n         }\n \n       retarray->base_addr\n-\t= internal_malloc_size (sizeof (GFC_REAL_16) * size0 ((array_t *) retarray));\n+\t= xmalloc (sizeof (GFC_REAL_16) * size0 ((array_t *) retarray));\n       retarray->offset = 0;\n     }\n     else if (unlikely (compile_options.bounds_check))"}, {"sha": "606c22554708aa9e3f894a3d369e55717bc35cce", "filename": "libgfortran/generated/matmul_r4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmatmul_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmatmul_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_r4.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -124,7 +124,7 @@ matmul_r4 (gfc_array_r4 * const restrict retarray,\n         }\n \n       retarray->base_addr\n-\t= internal_malloc_size (sizeof (GFC_REAL_4) * size0 ((array_t *) retarray));\n+\t= xmalloc (sizeof (GFC_REAL_4) * size0 ((array_t *) retarray));\n       retarray->offset = 0;\n     }\n     else if (unlikely (compile_options.bounds_check))"}, {"sha": "4733912d24598f1e7c7eccef77c7f80e30e11aa3", "filename": "libgfortran/generated/matmul_r8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmatmul_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmatmul_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_r8.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -124,7 +124,7 @@ matmul_r8 (gfc_array_r8 * const restrict retarray,\n         }\n \n       retarray->base_addr\n-\t= internal_malloc_size (sizeof (GFC_REAL_8) * size0 ((array_t *) retarray));\n+\t= xmalloc (sizeof (GFC_REAL_8) * size0 ((array_t *) retarray));\n       retarray->offset = 0;\n     }\n     else if (unlikely (compile_options.bounds_check))"}, {"sha": "0de65a885c5b9bd5df25acf8f796c8d598fc09f3", "filename": "libgfortran/generated/maxloc0_16_i1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc0_16_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc0_16_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_16_i1.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -58,7 +58,7 @@ maxloc0_16_i1 (gfc_array_i16 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_16) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_16) * rank);\n     }\n   else\n     {\n@@ -199,7 +199,7 @@ mmaxloc0_16_i1 (gfc_array_i16 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank - 1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_16) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_16) * rank);\n     }\n   else\n     {\n@@ -367,7 +367,7 @@ smaxloc0_16_i1 (gfc_array_i16 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_16) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_16) * rank);\n     }\n   else if (unlikely (compile_options.bounds_check))\n     {"}, {"sha": "be8c469f9ed0ec7a7a2b5b360f3944c8ba69f133", "filename": "libgfortran/generated/maxloc0_16_i16.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc0_16_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc0_16_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_16_i16.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -58,7 +58,7 @@ maxloc0_16_i16 (gfc_array_i16 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_16) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_16) * rank);\n     }\n   else\n     {\n@@ -199,7 +199,7 @@ mmaxloc0_16_i16 (gfc_array_i16 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank - 1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_16) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_16) * rank);\n     }\n   else\n     {\n@@ -367,7 +367,7 @@ smaxloc0_16_i16 (gfc_array_i16 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_16) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_16) * rank);\n     }\n   else if (unlikely (compile_options.bounds_check))\n     {"}, {"sha": "9852dcc92c697cc64e181442481e643edc84842f", "filename": "libgfortran/generated/maxloc0_16_i2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc0_16_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc0_16_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_16_i2.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -58,7 +58,7 @@ maxloc0_16_i2 (gfc_array_i16 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_16) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_16) * rank);\n     }\n   else\n     {\n@@ -199,7 +199,7 @@ mmaxloc0_16_i2 (gfc_array_i16 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank - 1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_16) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_16) * rank);\n     }\n   else\n     {\n@@ -367,7 +367,7 @@ smaxloc0_16_i2 (gfc_array_i16 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_16) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_16) * rank);\n     }\n   else if (unlikely (compile_options.bounds_check))\n     {"}, {"sha": "0f2973b07312af1abc045e0a3f5c51ec0c795015", "filename": "libgfortran/generated/maxloc0_16_i4.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc0_16_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc0_16_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_16_i4.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -58,7 +58,7 @@ maxloc0_16_i4 (gfc_array_i16 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_16) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_16) * rank);\n     }\n   else\n     {\n@@ -199,7 +199,7 @@ mmaxloc0_16_i4 (gfc_array_i16 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank - 1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_16) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_16) * rank);\n     }\n   else\n     {\n@@ -367,7 +367,7 @@ smaxloc0_16_i4 (gfc_array_i16 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_16) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_16) * rank);\n     }\n   else if (unlikely (compile_options.bounds_check))\n     {"}, {"sha": "fd79bf057ced1b375f33a1fee6583afccf3d07b9", "filename": "libgfortran/generated/maxloc0_16_i8.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc0_16_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc0_16_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_16_i8.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -58,7 +58,7 @@ maxloc0_16_i8 (gfc_array_i16 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_16) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_16) * rank);\n     }\n   else\n     {\n@@ -199,7 +199,7 @@ mmaxloc0_16_i8 (gfc_array_i16 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank - 1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_16) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_16) * rank);\n     }\n   else\n     {\n@@ -367,7 +367,7 @@ smaxloc0_16_i8 (gfc_array_i16 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_16) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_16) * rank);\n     }\n   else if (unlikely (compile_options.bounds_check))\n     {"}, {"sha": "beb0fb37f3eb2bd3cac0e77441de921ca9b9107a", "filename": "libgfortran/generated/maxloc0_16_r10.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc0_16_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc0_16_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_16_r10.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -58,7 +58,7 @@ maxloc0_16_r10 (gfc_array_i16 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_16) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_16) * rank);\n     }\n   else\n     {\n@@ -199,7 +199,7 @@ mmaxloc0_16_r10 (gfc_array_i16 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank - 1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_16) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_16) * rank);\n     }\n   else\n     {\n@@ -367,7 +367,7 @@ smaxloc0_16_r10 (gfc_array_i16 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_16) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_16) * rank);\n     }\n   else if (unlikely (compile_options.bounds_check))\n     {"}, {"sha": "52790c70808f414c71b32158ad924156898f6f8e", "filename": "libgfortran/generated/maxloc0_16_r16.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc0_16_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc0_16_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_16_r16.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -58,7 +58,7 @@ maxloc0_16_r16 (gfc_array_i16 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_16) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_16) * rank);\n     }\n   else\n     {\n@@ -199,7 +199,7 @@ mmaxloc0_16_r16 (gfc_array_i16 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank - 1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_16) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_16) * rank);\n     }\n   else\n     {\n@@ -367,7 +367,7 @@ smaxloc0_16_r16 (gfc_array_i16 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_16) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_16) * rank);\n     }\n   else if (unlikely (compile_options.bounds_check))\n     {"}, {"sha": "eefb8a280f1ea349744bbc45e3202fe37891892b", "filename": "libgfortran/generated/maxloc0_16_r4.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc0_16_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc0_16_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_16_r4.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -58,7 +58,7 @@ maxloc0_16_r4 (gfc_array_i16 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_16) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_16) * rank);\n     }\n   else\n     {\n@@ -199,7 +199,7 @@ mmaxloc0_16_r4 (gfc_array_i16 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank - 1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_16) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_16) * rank);\n     }\n   else\n     {\n@@ -367,7 +367,7 @@ smaxloc0_16_r4 (gfc_array_i16 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_16) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_16) * rank);\n     }\n   else if (unlikely (compile_options.bounds_check))\n     {"}, {"sha": "f536ac8bbed60281879250af47b7f140ffec6409", "filename": "libgfortran/generated/maxloc0_16_r8.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc0_16_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc0_16_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_16_r8.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -58,7 +58,7 @@ maxloc0_16_r8 (gfc_array_i16 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_16) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_16) * rank);\n     }\n   else\n     {\n@@ -199,7 +199,7 @@ mmaxloc0_16_r8 (gfc_array_i16 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank - 1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_16) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_16) * rank);\n     }\n   else\n     {\n@@ -367,7 +367,7 @@ smaxloc0_16_r8 (gfc_array_i16 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_16) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_16) * rank);\n     }\n   else if (unlikely (compile_options.bounds_check))\n     {"}, {"sha": "31506d41be82a9c200634b7b22e089561807d312", "filename": "libgfortran/generated/maxloc0_4_i1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc0_4_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc0_4_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_4_i1.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -58,7 +58,7 @@ maxloc0_4_i1 (gfc_array_i4 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_4) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_4) * rank);\n     }\n   else\n     {\n@@ -199,7 +199,7 @@ mmaxloc0_4_i1 (gfc_array_i4 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank - 1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_4) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_4) * rank);\n     }\n   else\n     {\n@@ -367,7 +367,7 @@ smaxloc0_4_i1 (gfc_array_i4 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_4) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_4) * rank);\n     }\n   else if (unlikely (compile_options.bounds_check))\n     {"}, {"sha": "e7728753a0985ca480c3c16661ffd642d6b179cf", "filename": "libgfortran/generated/maxloc0_4_i16.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc0_4_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc0_4_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_4_i16.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -58,7 +58,7 @@ maxloc0_4_i16 (gfc_array_i4 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_4) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_4) * rank);\n     }\n   else\n     {\n@@ -199,7 +199,7 @@ mmaxloc0_4_i16 (gfc_array_i4 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank - 1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_4) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_4) * rank);\n     }\n   else\n     {\n@@ -367,7 +367,7 @@ smaxloc0_4_i16 (gfc_array_i4 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_4) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_4) * rank);\n     }\n   else if (unlikely (compile_options.bounds_check))\n     {"}, {"sha": "cc5a57afc43b3810e1dee461cb3efa16c915330e", "filename": "libgfortran/generated/maxloc0_4_i2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc0_4_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc0_4_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_4_i2.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -58,7 +58,7 @@ maxloc0_4_i2 (gfc_array_i4 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_4) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_4) * rank);\n     }\n   else\n     {\n@@ -199,7 +199,7 @@ mmaxloc0_4_i2 (gfc_array_i4 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank - 1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_4) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_4) * rank);\n     }\n   else\n     {\n@@ -367,7 +367,7 @@ smaxloc0_4_i2 (gfc_array_i4 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_4) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_4) * rank);\n     }\n   else if (unlikely (compile_options.bounds_check))\n     {"}, {"sha": "2d407ef265c6d037a2bab48601df98fdb571679b", "filename": "libgfortran/generated/maxloc0_4_i4.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc0_4_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc0_4_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_4_i4.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -58,7 +58,7 @@ maxloc0_4_i4 (gfc_array_i4 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_4) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_4) * rank);\n     }\n   else\n     {\n@@ -199,7 +199,7 @@ mmaxloc0_4_i4 (gfc_array_i4 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank - 1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_4) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_4) * rank);\n     }\n   else\n     {\n@@ -367,7 +367,7 @@ smaxloc0_4_i4 (gfc_array_i4 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_4) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_4) * rank);\n     }\n   else if (unlikely (compile_options.bounds_check))\n     {"}, {"sha": "3d3599612345f68ddc2bbb388be3402c686f0794", "filename": "libgfortran/generated/maxloc0_4_i8.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc0_4_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc0_4_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_4_i8.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -58,7 +58,7 @@ maxloc0_4_i8 (gfc_array_i4 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_4) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_4) * rank);\n     }\n   else\n     {\n@@ -199,7 +199,7 @@ mmaxloc0_4_i8 (gfc_array_i4 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank - 1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_4) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_4) * rank);\n     }\n   else\n     {\n@@ -367,7 +367,7 @@ smaxloc0_4_i8 (gfc_array_i4 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_4) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_4) * rank);\n     }\n   else if (unlikely (compile_options.bounds_check))\n     {"}, {"sha": "200257a6448a1e9f5642ba6cd8ae1432901a533e", "filename": "libgfortran/generated/maxloc0_4_r10.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc0_4_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc0_4_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_4_r10.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -58,7 +58,7 @@ maxloc0_4_r10 (gfc_array_i4 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_4) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_4) * rank);\n     }\n   else\n     {\n@@ -199,7 +199,7 @@ mmaxloc0_4_r10 (gfc_array_i4 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank - 1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_4) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_4) * rank);\n     }\n   else\n     {\n@@ -367,7 +367,7 @@ smaxloc0_4_r10 (gfc_array_i4 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_4) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_4) * rank);\n     }\n   else if (unlikely (compile_options.bounds_check))\n     {"}, {"sha": "f878e67d7878d5713f44887c0f5b4b1af3f335b7", "filename": "libgfortran/generated/maxloc0_4_r16.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc0_4_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc0_4_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_4_r16.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -58,7 +58,7 @@ maxloc0_4_r16 (gfc_array_i4 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_4) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_4) * rank);\n     }\n   else\n     {\n@@ -199,7 +199,7 @@ mmaxloc0_4_r16 (gfc_array_i4 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank - 1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_4) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_4) * rank);\n     }\n   else\n     {\n@@ -367,7 +367,7 @@ smaxloc0_4_r16 (gfc_array_i4 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_4) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_4) * rank);\n     }\n   else if (unlikely (compile_options.bounds_check))\n     {"}, {"sha": "923ee4bf1d8523722c2e6e59942190b7c5cd4772", "filename": "libgfortran/generated/maxloc0_4_r4.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc0_4_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc0_4_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_4_r4.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -58,7 +58,7 @@ maxloc0_4_r4 (gfc_array_i4 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_4) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_4) * rank);\n     }\n   else\n     {\n@@ -199,7 +199,7 @@ mmaxloc0_4_r4 (gfc_array_i4 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank - 1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_4) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_4) * rank);\n     }\n   else\n     {\n@@ -367,7 +367,7 @@ smaxloc0_4_r4 (gfc_array_i4 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_4) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_4) * rank);\n     }\n   else if (unlikely (compile_options.bounds_check))\n     {"}, {"sha": "77f97dbca09cb662ad56ed0054987d8140dbcc4e", "filename": "libgfortran/generated/maxloc0_4_r8.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc0_4_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc0_4_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_4_r8.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -58,7 +58,7 @@ maxloc0_4_r8 (gfc_array_i4 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_4) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_4) * rank);\n     }\n   else\n     {\n@@ -199,7 +199,7 @@ mmaxloc0_4_r8 (gfc_array_i4 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank - 1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_4) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_4) * rank);\n     }\n   else\n     {\n@@ -367,7 +367,7 @@ smaxloc0_4_r8 (gfc_array_i4 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_4) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_4) * rank);\n     }\n   else if (unlikely (compile_options.bounds_check))\n     {"}, {"sha": "4a51134b91a4ee0241d7c22fe239a39ad13b0e66", "filename": "libgfortran/generated/maxloc0_8_i1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc0_8_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc0_8_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_8_i1.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -58,7 +58,7 @@ maxloc0_8_i1 (gfc_array_i8 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_8) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_8) * rank);\n     }\n   else\n     {\n@@ -199,7 +199,7 @@ mmaxloc0_8_i1 (gfc_array_i8 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank - 1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_8) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_8) * rank);\n     }\n   else\n     {\n@@ -367,7 +367,7 @@ smaxloc0_8_i1 (gfc_array_i8 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_8) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_8) * rank);\n     }\n   else if (unlikely (compile_options.bounds_check))\n     {"}, {"sha": "a9783e8ab6e160ca8ea497d68722e61c835df15a", "filename": "libgfortran/generated/maxloc0_8_i16.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc0_8_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc0_8_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_8_i16.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -58,7 +58,7 @@ maxloc0_8_i16 (gfc_array_i8 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_8) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_8) * rank);\n     }\n   else\n     {\n@@ -199,7 +199,7 @@ mmaxloc0_8_i16 (gfc_array_i8 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank - 1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_8) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_8) * rank);\n     }\n   else\n     {\n@@ -367,7 +367,7 @@ smaxloc0_8_i16 (gfc_array_i8 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_8) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_8) * rank);\n     }\n   else if (unlikely (compile_options.bounds_check))\n     {"}, {"sha": "9e329fae5b35e2fbbfcec8ae72ef85e98aa25efe", "filename": "libgfortran/generated/maxloc0_8_i2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc0_8_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc0_8_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_8_i2.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -58,7 +58,7 @@ maxloc0_8_i2 (gfc_array_i8 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_8) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_8) * rank);\n     }\n   else\n     {\n@@ -199,7 +199,7 @@ mmaxloc0_8_i2 (gfc_array_i8 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank - 1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_8) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_8) * rank);\n     }\n   else\n     {\n@@ -367,7 +367,7 @@ smaxloc0_8_i2 (gfc_array_i8 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_8) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_8) * rank);\n     }\n   else if (unlikely (compile_options.bounds_check))\n     {"}, {"sha": "6aea6bb58169b41f60488003bc4ed380673b6823", "filename": "libgfortran/generated/maxloc0_8_i4.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc0_8_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc0_8_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_8_i4.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -58,7 +58,7 @@ maxloc0_8_i4 (gfc_array_i8 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_8) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_8) * rank);\n     }\n   else\n     {\n@@ -199,7 +199,7 @@ mmaxloc0_8_i4 (gfc_array_i8 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank - 1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_8) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_8) * rank);\n     }\n   else\n     {\n@@ -367,7 +367,7 @@ smaxloc0_8_i4 (gfc_array_i8 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_8) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_8) * rank);\n     }\n   else if (unlikely (compile_options.bounds_check))\n     {"}, {"sha": "1e5b1687b5c04d8d3e0c77ee97910ad489505cbb", "filename": "libgfortran/generated/maxloc0_8_i8.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc0_8_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc0_8_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_8_i8.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -58,7 +58,7 @@ maxloc0_8_i8 (gfc_array_i8 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_8) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_8) * rank);\n     }\n   else\n     {\n@@ -199,7 +199,7 @@ mmaxloc0_8_i8 (gfc_array_i8 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank - 1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_8) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_8) * rank);\n     }\n   else\n     {\n@@ -367,7 +367,7 @@ smaxloc0_8_i8 (gfc_array_i8 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_8) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_8) * rank);\n     }\n   else if (unlikely (compile_options.bounds_check))\n     {"}, {"sha": "0bb567405bae3f39c735798564a7734c758be9bd", "filename": "libgfortran/generated/maxloc0_8_r10.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc0_8_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc0_8_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_8_r10.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -58,7 +58,7 @@ maxloc0_8_r10 (gfc_array_i8 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_8) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_8) * rank);\n     }\n   else\n     {\n@@ -199,7 +199,7 @@ mmaxloc0_8_r10 (gfc_array_i8 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank - 1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_8) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_8) * rank);\n     }\n   else\n     {\n@@ -367,7 +367,7 @@ smaxloc0_8_r10 (gfc_array_i8 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_8) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_8) * rank);\n     }\n   else if (unlikely (compile_options.bounds_check))\n     {"}, {"sha": "e80946ef8b0681737fbb6af4df8403e3c9173bf1", "filename": "libgfortran/generated/maxloc0_8_r16.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc0_8_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc0_8_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_8_r16.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -58,7 +58,7 @@ maxloc0_8_r16 (gfc_array_i8 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_8) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_8) * rank);\n     }\n   else\n     {\n@@ -199,7 +199,7 @@ mmaxloc0_8_r16 (gfc_array_i8 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank - 1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_8) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_8) * rank);\n     }\n   else\n     {\n@@ -367,7 +367,7 @@ smaxloc0_8_r16 (gfc_array_i8 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_8) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_8) * rank);\n     }\n   else if (unlikely (compile_options.bounds_check))\n     {"}, {"sha": "5ac8b423728b6b6f200f25f51eac49df6c5471ce", "filename": "libgfortran/generated/maxloc0_8_r4.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc0_8_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc0_8_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_8_r4.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -58,7 +58,7 @@ maxloc0_8_r4 (gfc_array_i8 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_8) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_8) * rank);\n     }\n   else\n     {\n@@ -199,7 +199,7 @@ mmaxloc0_8_r4 (gfc_array_i8 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank - 1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_8) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_8) * rank);\n     }\n   else\n     {\n@@ -367,7 +367,7 @@ smaxloc0_8_r4 (gfc_array_i8 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_8) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_8) * rank);\n     }\n   else if (unlikely (compile_options.bounds_check))\n     {"}, {"sha": "f510bdd15945065e24c2f80936297f6130eb2364", "filename": "libgfortran/generated/maxloc0_8_r8.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc0_8_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc0_8_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_8_r8.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -58,7 +58,7 @@ maxloc0_8_r8 (gfc_array_i8 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_8) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_8) * rank);\n     }\n   else\n     {\n@@ -199,7 +199,7 @@ mmaxloc0_8_r8 (gfc_array_i8 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank - 1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_8) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_8) * rank);\n     }\n   else\n     {\n@@ -367,7 +367,7 @@ smaxloc0_8_r8 (gfc_array_i8 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_8) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_8) * rank);\n     }\n   else if (unlikely (compile_options.bounds_check))\n     {"}, {"sha": "e2eb8e0a7b0fcb690e6b69e654d0d9330ad5b78a", "filename": "libgfortran/generated/maxloc1_16_i1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc1_16_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc1_16_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_16_i1.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -101,7 +101,7 @@ maxloc1_16_i1 (gfc_array_i16 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_16) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -307,7 +307,7 @@ mmaxloc1_16_i1 (gfc_array_i16 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -500,7 +500,7 @@ smaxloc1_16_i1 (gfc_array_i16 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "9b3563f9677d54c03a31a9d773540abe405f2b64", "filename": "libgfortran/generated/maxloc1_16_i16.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc1_16_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc1_16_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_16_i16.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -101,7 +101,7 @@ maxloc1_16_i16 (gfc_array_i16 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_16) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -307,7 +307,7 @@ mmaxloc1_16_i16 (gfc_array_i16 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -500,7 +500,7 @@ smaxloc1_16_i16 (gfc_array_i16 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "0278e99dc8b7bb81db1481f22b1fcbb058ddc97d", "filename": "libgfortran/generated/maxloc1_16_i2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc1_16_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc1_16_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_16_i2.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -101,7 +101,7 @@ maxloc1_16_i2 (gfc_array_i16 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_16) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -307,7 +307,7 @@ mmaxloc1_16_i2 (gfc_array_i16 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -500,7 +500,7 @@ smaxloc1_16_i2 (gfc_array_i16 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "9751c2afec28011fc5229079d9791d7513f752cd", "filename": "libgfortran/generated/maxloc1_16_i4.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc1_16_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc1_16_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_16_i4.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -101,7 +101,7 @@ maxloc1_16_i4 (gfc_array_i16 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_16) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -307,7 +307,7 @@ mmaxloc1_16_i4 (gfc_array_i16 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -500,7 +500,7 @@ smaxloc1_16_i4 (gfc_array_i16 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "e9140e5f86834283de274e104ff30d86f0e7ee4f", "filename": "libgfortran/generated/maxloc1_16_i8.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc1_16_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc1_16_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_16_i8.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -101,7 +101,7 @@ maxloc1_16_i8 (gfc_array_i16 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_16) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -307,7 +307,7 @@ mmaxloc1_16_i8 (gfc_array_i16 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -500,7 +500,7 @@ smaxloc1_16_i8 (gfc_array_i16 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "f88d254b29573e948aa6e027be0ee79623cc9cb0", "filename": "libgfortran/generated/maxloc1_16_r10.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc1_16_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc1_16_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_16_r10.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -101,7 +101,7 @@ maxloc1_16_r10 (gfc_array_i16 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_16) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -307,7 +307,7 @@ mmaxloc1_16_r10 (gfc_array_i16 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -500,7 +500,7 @@ smaxloc1_16_r10 (gfc_array_i16 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "b1188a2c795edc50fe2a9fd934ca53dde849ffaf", "filename": "libgfortran/generated/maxloc1_16_r16.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc1_16_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc1_16_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_16_r16.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -101,7 +101,7 @@ maxloc1_16_r16 (gfc_array_i16 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_16) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -307,7 +307,7 @@ mmaxloc1_16_r16 (gfc_array_i16 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -500,7 +500,7 @@ smaxloc1_16_r16 (gfc_array_i16 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "70611027985fd7ce2ad53fd24d773b4a2e98349b", "filename": "libgfortran/generated/maxloc1_16_r4.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc1_16_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc1_16_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_16_r4.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -101,7 +101,7 @@ maxloc1_16_r4 (gfc_array_i16 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_16) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -307,7 +307,7 @@ mmaxloc1_16_r4 (gfc_array_i16 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -500,7 +500,7 @@ smaxloc1_16_r4 (gfc_array_i16 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "5d4d9c27c9f84e616ca2a7c97bd8d73e9f33910a", "filename": "libgfortran/generated/maxloc1_16_r8.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc1_16_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc1_16_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_16_r8.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -101,7 +101,7 @@ maxloc1_16_r8 (gfc_array_i16 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_16) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -307,7 +307,7 @@ mmaxloc1_16_r8 (gfc_array_i16 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -500,7 +500,7 @@ smaxloc1_16_r8 (gfc_array_i16 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "0ee6ed5489874cfaec964db42a7e3d0870ebabe7", "filename": "libgfortran/generated/maxloc1_4_i1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc1_4_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc1_4_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_4_i1.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -101,7 +101,7 @@ maxloc1_4_i1 (gfc_array_i4 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_4) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -307,7 +307,7 @@ mmaxloc1_4_i1 (gfc_array_i4 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -500,7 +500,7 @@ smaxloc1_4_i1 (gfc_array_i4 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "c79f0ca07176a9ff752c2ae4882ec4d3f2b8fce7", "filename": "libgfortran/generated/maxloc1_4_i16.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc1_4_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc1_4_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_4_i16.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -101,7 +101,7 @@ maxloc1_4_i16 (gfc_array_i4 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_4) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -307,7 +307,7 @@ mmaxloc1_4_i16 (gfc_array_i4 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -500,7 +500,7 @@ smaxloc1_4_i16 (gfc_array_i4 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "4eff28acb147fa6a1465f0523f690f74bfac6fb2", "filename": "libgfortran/generated/maxloc1_4_i2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc1_4_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc1_4_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_4_i2.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -101,7 +101,7 @@ maxloc1_4_i2 (gfc_array_i4 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_4) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -307,7 +307,7 @@ mmaxloc1_4_i2 (gfc_array_i4 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -500,7 +500,7 @@ smaxloc1_4_i2 (gfc_array_i4 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "7c8f5e6e534c01c0386a2400a07bf88c91d74bf0", "filename": "libgfortran/generated/maxloc1_4_i4.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc1_4_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc1_4_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_4_i4.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -101,7 +101,7 @@ maxloc1_4_i4 (gfc_array_i4 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_4) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -307,7 +307,7 @@ mmaxloc1_4_i4 (gfc_array_i4 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -500,7 +500,7 @@ smaxloc1_4_i4 (gfc_array_i4 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "ae63e1b1b38d0404d2859a46387aafedc266767c", "filename": "libgfortran/generated/maxloc1_4_i8.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc1_4_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc1_4_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_4_i8.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -101,7 +101,7 @@ maxloc1_4_i8 (gfc_array_i4 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_4) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -307,7 +307,7 @@ mmaxloc1_4_i8 (gfc_array_i4 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -500,7 +500,7 @@ smaxloc1_4_i8 (gfc_array_i4 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "afd935b39ab9179802f6a7a0a3da9f267efb8e9a", "filename": "libgfortran/generated/maxloc1_4_r10.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc1_4_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc1_4_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_4_r10.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -101,7 +101,7 @@ maxloc1_4_r10 (gfc_array_i4 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_4) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -307,7 +307,7 @@ mmaxloc1_4_r10 (gfc_array_i4 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -500,7 +500,7 @@ smaxloc1_4_r10 (gfc_array_i4 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "fdd481722345846f782e346c51a10811b901d38a", "filename": "libgfortran/generated/maxloc1_4_r16.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc1_4_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc1_4_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_4_r16.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -101,7 +101,7 @@ maxloc1_4_r16 (gfc_array_i4 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_4) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -307,7 +307,7 @@ mmaxloc1_4_r16 (gfc_array_i4 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -500,7 +500,7 @@ smaxloc1_4_r16 (gfc_array_i4 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "8360dfcdbca081618bba6c0748951ca8671ff73e", "filename": "libgfortran/generated/maxloc1_4_r4.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc1_4_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc1_4_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_4_r4.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -101,7 +101,7 @@ maxloc1_4_r4 (gfc_array_i4 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_4) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -307,7 +307,7 @@ mmaxloc1_4_r4 (gfc_array_i4 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -500,7 +500,7 @@ smaxloc1_4_r4 (gfc_array_i4 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "96f36511dc0c592eb1031acded5883401221cf3c", "filename": "libgfortran/generated/maxloc1_4_r8.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc1_4_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc1_4_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_4_r8.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -101,7 +101,7 @@ maxloc1_4_r8 (gfc_array_i4 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_4) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -307,7 +307,7 @@ mmaxloc1_4_r8 (gfc_array_i4 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -500,7 +500,7 @@ smaxloc1_4_r8 (gfc_array_i4 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "a591171894225b034ec2bd1e2c3deb3f9e1c66b1", "filename": "libgfortran/generated/maxloc1_8_i1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc1_8_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc1_8_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_8_i1.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -101,7 +101,7 @@ maxloc1_8_i1 (gfc_array_i8 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_8) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -307,7 +307,7 @@ mmaxloc1_8_i1 (gfc_array_i8 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -500,7 +500,7 @@ smaxloc1_8_i1 (gfc_array_i8 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "30b946ae36be1f9ddddc17366063df7ebfc38cdd", "filename": "libgfortran/generated/maxloc1_8_i16.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc1_8_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc1_8_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_8_i16.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -101,7 +101,7 @@ maxloc1_8_i16 (gfc_array_i8 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_8) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -307,7 +307,7 @@ mmaxloc1_8_i16 (gfc_array_i8 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -500,7 +500,7 @@ smaxloc1_8_i16 (gfc_array_i8 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "af32584ccf855ea476c06b4e1bed66e9843bec4c", "filename": "libgfortran/generated/maxloc1_8_i2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc1_8_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc1_8_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_8_i2.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -101,7 +101,7 @@ maxloc1_8_i2 (gfc_array_i8 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_8) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -307,7 +307,7 @@ mmaxloc1_8_i2 (gfc_array_i8 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -500,7 +500,7 @@ smaxloc1_8_i2 (gfc_array_i8 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "dc63f1e71a29783ac125baf8d66a4cb880434e18", "filename": "libgfortran/generated/maxloc1_8_i4.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc1_8_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc1_8_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_8_i4.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -101,7 +101,7 @@ maxloc1_8_i4 (gfc_array_i8 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_8) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -307,7 +307,7 @@ mmaxloc1_8_i4 (gfc_array_i8 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -500,7 +500,7 @@ smaxloc1_8_i4 (gfc_array_i8 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "c50965edae4d307c6cc14aeda6aacd5cd3ae8883", "filename": "libgfortran/generated/maxloc1_8_i8.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc1_8_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc1_8_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_8_i8.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -101,7 +101,7 @@ maxloc1_8_i8 (gfc_array_i8 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_8) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -307,7 +307,7 @@ mmaxloc1_8_i8 (gfc_array_i8 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -500,7 +500,7 @@ smaxloc1_8_i8 (gfc_array_i8 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "c088686b5648397384fbf6f924b97f9a662eac56", "filename": "libgfortran/generated/maxloc1_8_r10.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc1_8_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc1_8_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_8_r10.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -101,7 +101,7 @@ maxloc1_8_r10 (gfc_array_i8 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_8) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -307,7 +307,7 @@ mmaxloc1_8_r10 (gfc_array_i8 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -500,7 +500,7 @@ smaxloc1_8_r10 (gfc_array_i8 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "35f68071ca39dd3c1fe1c0d2966ae721ff8e42eb", "filename": "libgfortran/generated/maxloc1_8_r16.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc1_8_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc1_8_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_8_r16.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -101,7 +101,7 @@ maxloc1_8_r16 (gfc_array_i8 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_8) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -307,7 +307,7 @@ mmaxloc1_8_r16 (gfc_array_i8 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -500,7 +500,7 @@ smaxloc1_8_r16 (gfc_array_i8 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "5d84bd077e050b0c80e2ef36bc70210a37e8a17c", "filename": "libgfortran/generated/maxloc1_8_r4.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc1_8_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc1_8_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_8_r4.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -101,7 +101,7 @@ maxloc1_8_r4 (gfc_array_i8 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_8) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -307,7 +307,7 @@ mmaxloc1_8_r4 (gfc_array_i8 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -500,7 +500,7 @@ smaxloc1_8_r4 (gfc_array_i8 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "e1e80d3298d73ecd35cec1af4f82a1fc87f54c09", "filename": "libgfortran/generated/maxloc1_8_r8.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc1_8_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxloc1_8_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_8_r8.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -101,7 +101,7 @@ maxloc1_8_r8 (gfc_array_i8 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_8) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -307,7 +307,7 @@ mmaxloc1_8_r8 (gfc_array_i8 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -500,7 +500,7 @@ smaxloc1_8_r8 (gfc_array_i8 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "a94eecae000efde90de60fea5c0796a4f6925abe", "filename": "libgfortran/generated/maxval_i1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxval_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxval_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxval_i1.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -100,7 +100,7 @@ maxval_i1 (gfc_array_i1 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_1) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -299,7 +299,7 @@ mmaxval_i1 (gfc_array_i1 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -487,7 +487,7 @@ smaxval_i1 (gfc_array_i1 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "94059cb1a0288f7708a8de8dfd03ee6e9debf25f", "filename": "libgfortran/generated/maxval_i16.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxval_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxval_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxval_i16.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -100,7 +100,7 @@ maxval_i16 (gfc_array_i16 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_16) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -299,7 +299,7 @@ mmaxval_i16 (gfc_array_i16 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -487,7 +487,7 @@ smaxval_i16 (gfc_array_i16 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "eb3d767e31a2a487d48d1341e7da2056fd3faeb2", "filename": "libgfortran/generated/maxval_i2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxval_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxval_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxval_i2.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -100,7 +100,7 @@ maxval_i2 (gfc_array_i2 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_2) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -299,7 +299,7 @@ mmaxval_i2 (gfc_array_i2 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -487,7 +487,7 @@ smaxval_i2 (gfc_array_i2 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "ef9e6c91826b31697e9ae8838f658c2e4ba78d16", "filename": "libgfortran/generated/maxval_i4.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxval_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxval_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxval_i4.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -100,7 +100,7 @@ maxval_i4 (gfc_array_i4 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_4) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -299,7 +299,7 @@ mmaxval_i4 (gfc_array_i4 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -487,7 +487,7 @@ smaxval_i4 (gfc_array_i4 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "a6cd6829a3f6397b2f267ad0188cdd506a0cd22a", "filename": "libgfortran/generated/maxval_i8.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxval_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxval_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxval_i8.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -100,7 +100,7 @@ maxval_i8 (gfc_array_i8 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_8) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -299,7 +299,7 @@ mmaxval_i8 (gfc_array_i8 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -487,7 +487,7 @@ smaxval_i8 (gfc_array_i8 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "1be75f1fe2f3723bd99cf9f11963a3f0a3412d14", "filename": "libgfortran/generated/maxval_r10.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxval_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxval_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxval_r10.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -100,7 +100,7 @@ maxval_r10 (gfc_array_r10 * const restrict retarray,\n       alloc_size = sizeof (GFC_REAL_10) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -299,7 +299,7 @@ mmaxval_r10 (gfc_array_r10 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -487,7 +487,7 @@ smaxval_r10 (gfc_array_r10 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "059896daf6bcb0fe3d3cc2a748b9e6eccd49c89c", "filename": "libgfortran/generated/maxval_r16.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxval_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxval_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxval_r16.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -100,7 +100,7 @@ maxval_r16 (gfc_array_r16 * const restrict retarray,\n       alloc_size = sizeof (GFC_REAL_16) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -299,7 +299,7 @@ mmaxval_r16 (gfc_array_r16 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -487,7 +487,7 @@ smaxval_r16 (gfc_array_r16 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "f306f181f52719e984f783283ba208e391d6a400", "filename": "libgfortran/generated/maxval_r4.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxval_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxval_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxval_r4.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -100,7 +100,7 @@ maxval_r4 (gfc_array_r4 * const restrict retarray,\n       alloc_size = sizeof (GFC_REAL_4) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -299,7 +299,7 @@ mmaxval_r4 (gfc_array_r4 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -487,7 +487,7 @@ smaxval_r4 (gfc_array_r4 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "ca70ca5a9e5c8e0728874b7a6ff42de03865c4c4", "filename": "libgfortran/generated/maxval_r8.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxval_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fmaxval_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxval_r8.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -100,7 +100,7 @@ maxval_r8 (gfc_array_r8 * const restrict retarray,\n       alloc_size = sizeof (GFC_REAL_8) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -299,7 +299,7 @@ mmaxval_r8 (gfc_array_r8 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -487,7 +487,7 @@ smaxval_r8 (gfc_array_r8 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "4b7b11973337f4be60ab9494797331b07d04af34", "filename": "libgfortran/generated/minloc0_16_i1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc0_16_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc0_16_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_16_i1.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -58,7 +58,7 @@ minloc0_16_i1 (gfc_array_i16 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_16) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_16) * rank);\n     }\n   else\n     {\n@@ -199,7 +199,7 @@ mminloc0_16_i1 (gfc_array_i16 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank - 1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_16) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_16) * rank);\n     }\n   else\n     {\n@@ -367,7 +367,7 @@ sminloc0_16_i1 (gfc_array_i16 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_16) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_16) * rank);\n     }\n   else if (unlikely (compile_options.bounds_check))\n     {"}, {"sha": "cd056c73c8f2b4a9d3ef7e65206ba2b7d6e2d081", "filename": "libgfortran/generated/minloc0_16_i16.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc0_16_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc0_16_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_16_i16.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -58,7 +58,7 @@ minloc0_16_i16 (gfc_array_i16 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_16) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_16) * rank);\n     }\n   else\n     {\n@@ -199,7 +199,7 @@ mminloc0_16_i16 (gfc_array_i16 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank - 1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_16) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_16) * rank);\n     }\n   else\n     {\n@@ -367,7 +367,7 @@ sminloc0_16_i16 (gfc_array_i16 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_16) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_16) * rank);\n     }\n   else if (unlikely (compile_options.bounds_check))\n     {"}, {"sha": "157018f6d71c5b67c71c7373696d6ee0a45a22c3", "filename": "libgfortran/generated/minloc0_16_i2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc0_16_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc0_16_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_16_i2.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -58,7 +58,7 @@ minloc0_16_i2 (gfc_array_i16 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_16) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_16) * rank);\n     }\n   else\n     {\n@@ -199,7 +199,7 @@ mminloc0_16_i2 (gfc_array_i16 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank - 1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_16) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_16) * rank);\n     }\n   else\n     {\n@@ -367,7 +367,7 @@ sminloc0_16_i2 (gfc_array_i16 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_16) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_16) * rank);\n     }\n   else if (unlikely (compile_options.bounds_check))\n     {"}, {"sha": "ef0fc0868a574aebaf8e77ac15f21a5d0e5de956", "filename": "libgfortran/generated/minloc0_16_i4.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc0_16_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc0_16_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_16_i4.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -58,7 +58,7 @@ minloc0_16_i4 (gfc_array_i16 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_16) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_16) * rank);\n     }\n   else\n     {\n@@ -199,7 +199,7 @@ mminloc0_16_i4 (gfc_array_i16 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank - 1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_16) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_16) * rank);\n     }\n   else\n     {\n@@ -367,7 +367,7 @@ sminloc0_16_i4 (gfc_array_i16 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_16) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_16) * rank);\n     }\n   else if (unlikely (compile_options.bounds_check))\n     {"}, {"sha": "0742e9a553cbe29fc441aa2aa45ef506c8737206", "filename": "libgfortran/generated/minloc0_16_i8.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc0_16_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc0_16_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_16_i8.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -58,7 +58,7 @@ minloc0_16_i8 (gfc_array_i16 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_16) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_16) * rank);\n     }\n   else\n     {\n@@ -199,7 +199,7 @@ mminloc0_16_i8 (gfc_array_i16 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank - 1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_16) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_16) * rank);\n     }\n   else\n     {\n@@ -367,7 +367,7 @@ sminloc0_16_i8 (gfc_array_i16 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_16) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_16) * rank);\n     }\n   else if (unlikely (compile_options.bounds_check))\n     {"}, {"sha": "8bd602af3dcb769adc8671a7a7c502773eb9bf88", "filename": "libgfortran/generated/minloc0_16_r10.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc0_16_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc0_16_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_16_r10.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -58,7 +58,7 @@ minloc0_16_r10 (gfc_array_i16 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_16) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_16) * rank);\n     }\n   else\n     {\n@@ -199,7 +199,7 @@ mminloc0_16_r10 (gfc_array_i16 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank - 1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_16) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_16) * rank);\n     }\n   else\n     {\n@@ -367,7 +367,7 @@ sminloc0_16_r10 (gfc_array_i16 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_16) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_16) * rank);\n     }\n   else if (unlikely (compile_options.bounds_check))\n     {"}, {"sha": "93bb9755a880a61b4639af298150981fb02575ca", "filename": "libgfortran/generated/minloc0_16_r16.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc0_16_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc0_16_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_16_r16.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -58,7 +58,7 @@ minloc0_16_r16 (gfc_array_i16 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_16) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_16) * rank);\n     }\n   else\n     {\n@@ -199,7 +199,7 @@ mminloc0_16_r16 (gfc_array_i16 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank - 1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_16) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_16) * rank);\n     }\n   else\n     {\n@@ -367,7 +367,7 @@ sminloc0_16_r16 (gfc_array_i16 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_16) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_16) * rank);\n     }\n   else if (unlikely (compile_options.bounds_check))\n     {"}, {"sha": "ab6797369971582b8965c0344faa461d85050d0c", "filename": "libgfortran/generated/minloc0_16_r4.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc0_16_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc0_16_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_16_r4.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -58,7 +58,7 @@ minloc0_16_r4 (gfc_array_i16 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_16) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_16) * rank);\n     }\n   else\n     {\n@@ -199,7 +199,7 @@ mminloc0_16_r4 (gfc_array_i16 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank - 1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_16) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_16) * rank);\n     }\n   else\n     {\n@@ -367,7 +367,7 @@ sminloc0_16_r4 (gfc_array_i16 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_16) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_16) * rank);\n     }\n   else if (unlikely (compile_options.bounds_check))\n     {"}, {"sha": "bfa623df1ca058950000c7c5aec7be204e90ee5c", "filename": "libgfortran/generated/minloc0_16_r8.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc0_16_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc0_16_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_16_r8.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -58,7 +58,7 @@ minloc0_16_r8 (gfc_array_i16 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_16) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_16) * rank);\n     }\n   else\n     {\n@@ -199,7 +199,7 @@ mminloc0_16_r8 (gfc_array_i16 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank - 1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_16) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_16) * rank);\n     }\n   else\n     {\n@@ -367,7 +367,7 @@ sminloc0_16_r8 (gfc_array_i16 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_16) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_16) * rank);\n     }\n   else if (unlikely (compile_options.bounds_check))\n     {"}, {"sha": "23f0f490034309260e4d80374aa96726e3e9df26", "filename": "libgfortran/generated/minloc0_4_i1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc0_4_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc0_4_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_4_i1.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -58,7 +58,7 @@ minloc0_4_i1 (gfc_array_i4 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_4) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_4) * rank);\n     }\n   else\n     {\n@@ -199,7 +199,7 @@ mminloc0_4_i1 (gfc_array_i4 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank - 1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_4) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_4) * rank);\n     }\n   else\n     {\n@@ -367,7 +367,7 @@ sminloc0_4_i1 (gfc_array_i4 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_4) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_4) * rank);\n     }\n   else if (unlikely (compile_options.bounds_check))\n     {"}, {"sha": "abeb209ac53e12eb04746cd4d47718cc41535834", "filename": "libgfortran/generated/minloc0_4_i16.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc0_4_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc0_4_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_4_i16.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -58,7 +58,7 @@ minloc0_4_i16 (gfc_array_i4 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_4) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_4) * rank);\n     }\n   else\n     {\n@@ -199,7 +199,7 @@ mminloc0_4_i16 (gfc_array_i4 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank - 1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_4) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_4) * rank);\n     }\n   else\n     {\n@@ -367,7 +367,7 @@ sminloc0_4_i16 (gfc_array_i4 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_4) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_4) * rank);\n     }\n   else if (unlikely (compile_options.bounds_check))\n     {"}, {"sha": "9ebf23a8d9443d568d49a9351e191952c35944af", "filename": "libgfortran/generated/minloc0_4_i2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc0_4_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc0_4_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_4_i2.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -58,7 +58,7 @@ minloc0_4_i2 (gfc_array_i4 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_4) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_4) * rank);\n     }\n   else\n     {\n@@ -199,7 +199,7 @@ mminloc0_4_i2 (gfc_array_i4 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank - 1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_4) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_4) * rank);\n     }\n   else\n     {\n@@ -367,7 +367,7 @@ sminloc0_4_i2 (gfc_array_i4 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_4) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_4) * rank);\n     }\n   else if (unlikely (compile_options.bounds_check))\n     {"}, {"sha": "bd813f28c8e6c4ca2457af056deef42e467da77e", "filename": "libgfortran/generated/minloc0_4_i4.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc0_4_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc0_4_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_4_i4.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -58,7 +58,7 @@ minloc0_4_i4 (gfc_array_i4 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_4) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_4) * rank);\n     }\n   else\n     {\n@@ -199,7 +199,7 @@ mminloc0_4_i4 (gfc_array_i4 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank - 1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_4) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_4) * rank);\n     }\n   else\n     {\n@@ -367,7 +367,7 @@ sminloc0_4_i4 (gfc_array_i4 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_4) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_4) * rank);\n     }\n   else if (unlikely (compile_options.bounds_check))\n     {"}, {"sha": "b42c8bc4c953bbc49d28b86d8d823a6d8d01adda", "filename": "libgfortran/generated/minloc0_4_i8.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc0_4_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc0_4_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_4_i8.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -58,7 +58,7 @@ minloc0_4_i8 (gfc_array_i4 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_4) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_4) * rank);\n     }\n   else\n     {\n@@ -199,7 +199,7 @@ mminloc0_4_i8 (gfc_array_i4 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank - 1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_4) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_4) * rank);\n     }\n   else\n     {\n@@ -367,7 +367,7 @@ sminloc0_4_i8 (gfc_array_i4 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_4) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_4) * rank);\n     }\n   else if (unlikely (compile_options.bounds_check))\n     {"}, {"sha": "21a0ccff0cfe5164e486a64ac783e59fa8bd941b", "filename": "libgfortran/generated/minloc0_4_r10.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc0_4_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc0_4_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_4_r10.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -58,7 +58,7 @@ minloc0_4_r10 (gfc_array_i4 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_4) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_4) * rank);\n     }\n   else\n     {\n@@ -199,7 +199,7 @@ mminloc0_4_r10 (gfc_array_i4 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank - 1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_4) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_4) * rank);\n     }\n   else\n     {\n@@ -367,7 +367,7 @@ sminloc0_4_r10 (gfc_array_i4 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_4) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_4) * rank);\n     }\n   else if (unlikely (compile_options.bounds_check))\n     {"}, {"sha": "dcee2c2fa0d20f5c24254ef342585ae26964755d", "filename": "libgfortran/generated/minloc0_4_r16.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc0_4_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc0_4_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_4_r16.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -58,7 +58,7 @@ minloc0_4_r16 (gfc_array_i4 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_4) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_4) * rank);\n     }\n   else\n     {\n@@ -199,7 +199,7 @@ mminloc0_4_r16 (gfc_array_i4 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank - 1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_4) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_4) * rank);\n     }\n   else\n     {\n@@ -367,7 +367,7 @@ sminloc0_4_r16 (gfc_array_i4 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_4) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_4) * rank);\n     }\n   else if (unlikely (compile_options.bounds_check))\n     {"}, {"sha": "2e60f8bad274fdd5523c59c96a6965dba9a52482", "filename": "libgfortran/generated/minloc0_4_r4.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc0_4_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc0_4_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_4_r4.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -58,7 +58,7 @@ minloc0_4_r4 (gfc_array_i4 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_4) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_4) * rank);\n     }\n   else\n     {\n@@ -199,7 +199,7 @@ mminloc0_4_r4 (gfc_array_i4 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank - 1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_4) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_4) * rank);\n     }\n   else\n     {\n@@ -367,7 +367,7 @@ sminloc0_4_r4 (gfc_array_i4 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_4) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_4) * rank);\n     }\n   else if (unlikely (compile_options.bounds_check))\n     {"}, {"sha": "6da89bfbeee71d00b32a4148f56cd741390b491b", "filename": "libgfortran/generated/minloc0_4_r8.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc0_4_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc0_4_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_4_r8.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -58,7 +58,7 @@ minloc0_4_r8 (gfc_array_i4 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_4) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_4) * rank);\n     }\n   else\n     {\n@@ -199,7 +199,7 @@ mminloc0_4_r8 (gfc_array_i4 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank - 1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_4) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_4) * rank);\n     }\n   else\n     {\n@@ -367,7 +367,7 @@ sminloc0_4_r8 (gfc_array_i4 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_4) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_4) * rank);\n     }\n   else if (unlikely (compile_options.bounds_check))\n     {"}, {"sha": "8291e87b6f092fa532058e7c9388b6b83652b5e2", "filename": "libgfortran/generated/minloc0_8_i1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc0_8_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc0_8_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_8_i1.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -58,7 +58,7 @@ minloc0_8_i1 (gfc_array_i8 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_8) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_8) * rank);\n     }\n   else\n     {\n@@ -199,7 +199,7 @@ mminloc0_8_i1 (gfc_array_i8 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank - 1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_8) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_8) * rank);\n     }\n   else\n     {\n@@ -367,7 +367,7 @@ sminloc0_8_i1 (gfc_array_i8 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_8) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_8) * rank);\n     }\n   else if (unlikely (compile_options.bounds_check))\n     {"}, {"sha": "5306cd528bd8ac4215ef192455b44e7c775fb7fb", "filename": "libgfortran/generated/minloc0_8_i16.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc0_8_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc0_8_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_8_i16.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -58,7 +58,7 @@ minloc0_8_i16 (gfc_array_i8 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_8) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_8) * rank);\n     }\n   else\n     {\n@@ -199,7 +199,7 @@ mminloc0_8_i16 (gfc_array_i8 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank - 1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_8) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_8) * rank);\n     }\n   else\n     {\n@@ -367,7 +367,7 @@ sminloc0_8_i16 (gfc_array_i8 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_8) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_8) * rank);\n     }\n   else if (unlikely (compile_options.bounds_check))\n     {"}, {"sha": "5a9b40a8dc50afa4fc68082f8b3a20445ced720e", "filename": "libgfortran/generated/minloc0_8_i2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc0_8_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc0_8_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_8_i2.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -58,7 +58,7 @@ minloc0_8_i2 (gfc_array_i8 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_8) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_8) * rank);\n     }\n   else\n     {\n@@ -199,7 +199,7 @@ mminloc0_8_i2 (gfc_array_i8 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank - 1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_8) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_8) * rank);\n     }\n   else\n     {\n@@ -367,7 +367,7 @@ sminloc0_8_i2 (gfc_array_i8 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_8) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_8) * rank);\n     }\n   else if (unlikely (compile_options.bounds_check))\n     {"}, {"sha": "629b0b77dbcffb3a6b607ff04dc4fd452fd72a62", "filename": "libgfortran/generated/minloc0_8_i4.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc0_8_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc0_8_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_8_i4.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -58,7 +58,7 @@ minloc0_8_i4 (gfc_array_i8 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_8) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_8) * rank);\n     }\n   else\n     {\n@@ -199,7 +199,7 @@ mminloc0_8_i4 (gfc_array_i8 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank - 1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_8) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_8) * rank);\n     }\n   else\n     {\n@@ -367,7 +367,7 @@ sminloc0_8_i4 (gfc_array_i8 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_8) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_8) * rank);\n     }\n   else if (unlikely (compile_options.bounds_check))\n     {"}, {"sha": "ccd445edc77d4ed9b2bbb4d921c32c5228ac5111", "filename": "libgfortran/generated/minloc0_8_i8.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc0_8_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc0_8_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_8_i8.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -58,7 +58,7 @@ minloc0_8_i8 (gfc_array_i8 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_8) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_8) * rank);\n     }\n   else\n     {\n@@ -199,7 +199,7 @@ mminloc0_8_i8 (gfc_array_i8 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank - 1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_8) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_8) * rank);\n     }\n   else\n     {\n@@ -367,7 +367,7 @@ sminloc0_8_i8 (gfc_array_i8 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_8) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_8) * rank);\n     }\n   else if (unlikely (compile_options.bounds_check))\n     {"}, {"sha": "090bdff69ab8c1bdd5844ac2af83a1f810a53066", "filename": "libgfortran/generated/minloc0_8_r10.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc0_8_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc0_8_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_8_r10.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -58,7 +58,7 @@ minloc0_8_r10 (gfc_array_i8 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_8) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_8) * rank);\n     }\n   else\n     {\n@@ -199,7 +199,7 @@ mminloc0_8_r10 (gfc_array_i8 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank - 1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_8) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_8) * rank);\n     }\n   else\n     {\n@@ -367,7 +367,7 @@ sminloc0_8_r10 (gfc_array_i8 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_8) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_8) * rank);\n     }\n   else if (unlikely (compile_options.bounds_check))\n     {"}, {"sha": "26744c8ca5e699e2a9e73165cb7d77a0a322dd09", "filename": "libgfortran/generated/minloc0_8_r16.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc0_8_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc0_8_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_8_r16.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -58,7 +58,7 @@ minloc0_8_r16 (gfc_array_i8 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_8) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_8) * rank);\n     }\n   else\n     {\n@@ -199,7 +199,7 @@ mminloc0_8_r16 (gfc_array_i8 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank - 1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_8) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_8) * rank);\n     }\n   else\n     {\n@@ -367,7 +367,7 @@ sminloc0_8_r16 (gfc_array_i8 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_8) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_8) * rank);\n     }\n   else if (unlikely (compile_options.bounds_check))\n     {"}, {"sha": "f1c829aafe953500133b98745f13d85bdd8bc7ea", "filename": "libgfortran/generated/minloc0_8_r4.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc0_8_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc0_8_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_8_r4.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -58,7 +58,7 @@ minloc0_8_r4 (gfc_array_i8 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_8) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_8) * rank);\n     }\n   else\n     {\n@@ -199,7 +199,7 @@ mminloc0_8_r4 (gfc_array_i8 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank - 1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_8) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_8) * rank);\n     }\n   else\n     {\n@@ -367,7 +367,7 @@ sminloc0_8_r4 (gfc_array_i8 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_8) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_8) * rank);\n     }\n   else if (unlikely (compile_options.bounds_check))\n     {"}, {"sha": "fe122a1a6a49868aa30e422cb8549dbe8bf7c760", "filename": "libgfortran/generated/minloc0_8_r8.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc0_8_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc0_8_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_8_r8.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -58,7 +58,7 @@ minloc0_8_r8 (gfc_array_i8 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_8) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_8) * rank);\n     }\n   else\n     {\n@@ -199,7 +199,7 @@ mminloc0_8_r8 (gfc_array_i8 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank - 1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_8) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_8) * rank);\n     }\n   else\n     {\n@@ -367,7 +367,7 @@ sminloc0_8_r8 (gfc_array_i8 * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype = (retarray->dtype & ~GFC_DTYPE_RANK_MASK) | 1;\n       retarray->offset = 0;\n-      retarray->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_8) * rank);\n+      retarray->base_addr = xmalloc (sizeof (GFC_INTEGER_8) * rank);\n     }\n   else if (unlikely (compile_options.bounds_check))\n     {"}, {"sha": "949fa434c1e9148a36d26ce4f8d7e124923be8fa", "filename": "libgfortran/generated/minloc1_16_i1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc1_16_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc1_16_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_16_i1.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -101,7 +101,7 @@ minloc1_16_i1 (gfc_array_i16 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_16) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -307,7 +307,7 @@ mminloc1_16_i1 (gfc_array_i16 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -500,7 +500,7 @@ sminloc1_16_i1 (gfc_array_i16 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "b5a1681836552c3cbb5a6cf041f3783440e128b5", "filename": "libgfortran/generated/minloc1_16_i16.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc1_16_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc1_16_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_16_i16.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -101,7 +101,7 @@ minloc1_16_i16 (gfc_array_i16 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_16) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -307,7 +307,7 @@ mminloc1_16_i16 (gfc_array_i16 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -500,7 +500,7 @@ sminloc1_16_i16 (gfc_array_i16 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "887907995d70543c54fa21311a8e809596242a39", "filename": "libgfortran/generated/minloc1_16_i2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc1_16_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc1_16_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_16_i2.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -101,7 +101,7 @@ minloc1_16_i2 (gfc_array_i16 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_16) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -307,7 +307,7 @@ mminloc1_16_i2 (gfc_array_i16 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -500,7 +500,7 @@ sminloc1_16_i2 (gfc_array_i16 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "6a5553fd405041102585ba3ab5a07002b1ede950", "filename": "libgfortran/generated/minloc1_16_i4.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc1_16_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc1_16_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_16_i4.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -101,7 +101,7 @@ minloc1_16_i4 (gfc_array_i16 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_16) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -307,7 +307,7 @@ mminloc1_16_i4 (gfc_array_i16 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -500,7 +500,7 @@ sminloc1_16_i4 (gfc_array_i16 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "04be9c60b95bc5de265014447a327508cc349618", "filename": "libgfortran/generated/minloc1_16_i8.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc1_16_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc1_16_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_16_i8.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -101,7 +101,7 @@ minloc1_16_i8 (gfc_array_i16 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_16) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -307,7 +307,7 @@ mminloc1_16_i8 (gfc_array_i16 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -500,7 +500,7 @@ sminloc1_16_i8 (gfc_array_i16 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "a66feda39d5a1772005a204140ae15af6264ad4b", "filename": "libgfortran/generated/minloc1_16_r10.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc1_16_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc1_16_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_16_r10.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -101,7 +101,7 @@ minloc1_16_r10 (gfc_array_i16 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_16) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -307,7 +307,7 @@ mminloc1_16_r10 (gfc_array_i16 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -500,7 +500,7 @@ sminloc1_16_r10 (gfc_array_i16 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "2e75ecf46d2f072f6d43d1749229b40db2383b20", "filename": "libgfortran/generated/minloc1_16_r16.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc1_16_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc1_16_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_16_r16.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -101,7 +101,7 @@ minloc1_16_r16 (gfc_array_i16 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_16) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -307,7 +307,7 @@ mminloc1_16_r16 (gfc_array_i16 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -500,7 +500,7 @@ sminloc1_16_r16 (gfc_array_i16 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "b8e9337e8e29f26fc0dcd7db135e811a6ba2011b", "filename": "libgfortran/generated/minloc1_16_r4.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc1_16_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc1_16_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_16_r4.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -101,7 +101,7 @@ minloc1_16_r4 (gfc_array_i16 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_16) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -307,7 +307,7 @@ mminloc1_16_r4 (gfc_array_i16 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -500,7 +500,7 @@ sminloc1_16_r4 (gfc_array_i16 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "42519eb3380afa9f0481db37e99c4fa2fe8f51a6", "filename": "libgfortran/generated/minloc1_16_r8.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc1_16_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc1_16_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_16_r8.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -101,7 +101,7 @@ minloc1_16_r8 (gfc_array_i16 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_16) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -307,7 +307,7 @@ mminloc1_16_r8 (gfc_array_i16 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -500,7 +500,7 @@ sminloc1_16_r8 (gfc_array_i16 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "07f0dceb55ea4d158e55b45b5801b1c4cbfcb4e8", "filename": "libgfortran/generated/minloc1_4_i1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc1_4_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc1_4_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_4_i1.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -101,7 +101,7 @@ minloc1_4_i1 (gfc_array_i4 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_4) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -307,7 +307,7 @@ mminloc1_4_i1 (gfc_array_i4 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -500,7 +500,7 @@ sminloc1_4_i1 (gfc_array_i4 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "0c2041115d5125b7daece559a47959eff3da7e53", "filename": "libgfortran/generated/minloc1_4_i16.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc1_4_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc1_4_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_4_i16.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -101,7 +101,7 @@ minloc1_4_i16 (gfc_array_i4 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_4) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -307,7 +307,7 @@ mminloc1_4_i16 (gfc_array_i4 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -500,7 +500,7 @@ sminloc1_4_i16 (gfc_array_i4 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "389b1dbddfdb3837680d41cee2008a9406f3bd33", "filename": "libgfortran/generated/minloc1_4_i2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc1_4_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc1_4_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_4_i2.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -101,7 +101,7 @@ minloc1_4_i2 (gfc_array_i4 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_4) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -307,7 +307,7 @@ mminloc1_4_i2 (gfc_array_i4 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -500,7 +500,7 @@ sminloc1_4_i2 (gfc_array_i4 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "5d66fe9afcbfac6e403979d580f6b6d7e3827529", "filename": "libgfortran/generated/minloc1_4_i4.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc1_4_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc1_4_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_4_i4.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -101,7 +101,7 @@ minloc1_4_i4 (gfc_array_i4 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_4) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -307,7 +307,7 @@ mminloc1_4_i4 (gfc_array_i4 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -500,7 +500,7 @@ sminloc1_4_i4 (gfc_array_i4 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "28cd536fa4a3b52b8b7bc0505a5ff9e57ad19a8e", "filename": "libgfortran/generated/minloc1_4_i8.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc1_4_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc1_4_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_4_i8.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -101,7 +101,7 @@ minloc1_4_i8 (gfc_array_i4 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_4) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -307,7 +307,7 @@ mminloc1_4_i8 (gfc_array_i4 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -500,7 +500,7 @@ sminloc1_4_i8 (gfc_array_i4 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "39196711e322aa1474528b32dc000afb9cae2829", "filename": "libgfortran/generated/minloc1_4_r10.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc1_4_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc1_4_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_4_r10.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -101,7 +101,7 @@ minloc1_4_r10 (gfc_array_i4 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_4) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -307,7 +307,7 @@ mminloc1_4_r10 (gfc_array_i4 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -500,7 +500,7 @@ sminloc1_4_r10 (gfc_array_i4 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "f7966123128b27fb1f03c0edb4c38aba95a46366", "filename": "libgfortran/generated/minloc1_4_r16.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc1_4_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc1_4_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_4_r16.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -101,7 +101,7 @@ minloc1_4_r16 (gfc_array_i4 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_4) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -307,7 +307,7 @@ mminloc1_4_r16 (gfc_array_i4 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -500,7 +500,7 @@ sminloc1_4_r16 (gfc_array_i4 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "7f34b91381346158481211b93decb7cd21744633", "filename": "libgfortran/generated/minloc1_4_r4.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc1_4_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc1_4_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_4_r4.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -101,7 +101,7 @@ minloc1_4_r4 (gfc_array_i4 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_4) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -307,7 +307,7 @@ mminloc1_4_r4 (gfc_array_i4 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -500,7 +500,7 @@ sminloc1_4_r4 (gfc_array_i4 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "21bb4cbcc776a31be9dfe79f6b98f568abb45507", "filename": "libgfortran/generated/minloc1_4_r8.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc1_4_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc1_4_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_4_r8.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -101,7 +101,7 @@ minloc1_4_r8 (gfc_array_i4 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_4) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -307,7 +307,7 @@ mminloc1_4_r8 (gfc_array_i4 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -500,7 +500,7 @@ sminloc1_4_r8 (gfc_array_i4 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "81d6f8e42e14bae1dfe0302c5d0c59c1575be723", "filename": "libgfortran/generated/minloc1_8_i1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc1_8_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc1_8_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_8_i1.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -101,7 +101,7 @@ minloc1_8_i1 (gfc_array_i8 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_8) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -307,7 +307,7 @@ mminloc1_8_i1 (gfc_array_i8 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -500,7 +500,7 @@ sminloc1_8_i1 (gfc_array_i8 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "0a41d1700620d9f53492f52485ee401c8f4fb71c", "filename": "libgfortran/generated/minloc1_8_i16.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc1_8_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc1_8_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_8_i16.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -101,7 +101,7 @@ minloc1_8_i16 (gfc_array_i8 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_8) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -307,7 +307,7 @@ mminloc1_8_i16 (gfc_array_i8 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -500,7 +500,7 @@ sminloc1_8_i16 (gfc_array_i8 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "b0dac3e0404cd0e0128f6077d06dceee05d14bd1", "filename": "libgfortran/generated/minloc1_8_i2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc1_8_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc1_8_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_8_i2.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -101,7 +101,7 @@ minloc1_8_i2 (gfc_array_i8 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_8) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -307,7 +307,7 @@ mminloc1_8_i2 (gfc_array_i8 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -500,7 +500,7 @@ sminloc1_8_i2 (gfc_array_i8 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "c8b42cac5e21e5a20198dd78e6f1abe4ca181177", "filename": "libgfortran/generated/minloc1_8_i4.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc1_8_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc1_8_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_8_i4.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -101,7 +101,7 @@ minloc1_8_i4 (gfc_array_i8 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_8) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -307,7 +307,7 @@ mminloc1_8_i4 (gfc_array_i8 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -500,7 +500,7 @@ sminloc1_8_i4 (gfc_array_i8 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "186fe5ceacf15e121e0c2899b98b568a4bcaa16d", "filename": "libgfortran/generated/minloc1_8_i8.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc1_8_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc1_8_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_8_i8.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -101,7 +101,7 @@ minloc1_8_i8 (gfc_array_i8 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_8) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -307,7 +307,7 @@ mminloc1_8_i8 (gfc_array_i8 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -500,7 +500,7 @@ sminloc1_8_i8 (gfc_array_i8 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "582f88e1034c5d8ae219c34d3306ee47410fedca", "filename": "libgfortran/generated/minloc1_8_r10.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc1_8_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc1_8_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_8_r10.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -101,7 +101,7 @@ minloc1_8_r10 (gfc_array_i8 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_8) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -307,7 +307,7 @@ mminloc1_8_r10 (gfc_array_i8 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -500,7 +500,7 @@ sminloc1_8_r10 (gfc_array_i8 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "0471c2750fb4cc735906a22b73bcc6b9af1422e5", "filename": "libgfortran/generated/minloc1_8_r16.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc1_8_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc1_8_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_8_r16.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -101,7 +101,7 @@ minloc1_8_r16 (gfc_array_i8 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_8) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -307,7 +307,7 @@ mminloc1_8_r16 (gfc_array_i8 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -500,7 +500,7 @@ sminloc1_8_r16 (gfc_array_i8 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "b144115c0bcbb605c6dd3acde9b2ca5406b1c936", "filename": "libgfortran/generated/minloc1_8_r4.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc1_8_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc1_8_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_8_r4.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -101,7 +101,7 @@ minloc1_8_r4 (gfc_array_i8 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_8) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -307,7 +307,7 @@ mminloc1_8_r4 (gfc_array_i8 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -500,7 +500,7 @@ sminloc1_8_r4 (gfc_array_i8 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "81916e2890a07d58e23facc032a980ba6098b2bb", "filename": "libgfortran/generated/minloc1_8_r8.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc1_8_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminloc1_8_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_8_r8.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -101,7 +101,7 @@ minloc1_8_r8 (gfc_array_i8 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_8) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -307,7 +307,7 @@ mminloc1_8_r8 (gfc_array_i8 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -500,7 +500,7 @@ sminloc1_8_r8 (gfc_array_i8 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "e2abc9587f0442df12c21d246b13dcf587a555fa", "filename": "libgfortran/generated/minval_i1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminval_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminval_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminval_i1.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -100,7 +100,7 @@ minval_i1 (gfc_array_i1 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_1) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -299,7 +299,7 @@ mminval_i1 (gfc_array_i1 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -487,7 +487,7 @@ sminval_i1 (gfc_array_i1 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "f2c72e3e9de333e8f36d4002a56ec0b52ee937c8", "filename": "libgfortran/generated/minval_i16.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminval_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminval_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminval_i16.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -100,7 +100,7 @@ minval_i16 (gfc_array_i16 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_16) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -299,7 +299,7 @@ mminval_i16 (gfc_array_i16 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -487,7 +487,7 @@ sminval_i16 (gfc_array_i16 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "b87a0722744e39c584723d920edc02ecbd1f2dad", "filename": "libgfortran/generated/minval_i2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminval_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminval_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminval_i2.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -100,7 +100,7 @@ minval_i2 (gfc_array_i2 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_2) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -299,7 +299,7 @@ mminval_i2 (gfc_array_i2 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -487,7 +487,7 @@ sminval_i2 (gfc_array_i2 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "20766fa62b161570c50f15bb19a255f0cf73ad0c", "filename": "libgfortran/generated/minval_i4.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminval_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminval_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminval_i4.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -100,7 +100,7 @@ minval_i4 (gfc_array_i4 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_4) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -299,7 +299,7 @@ mminval_i4 (gfc_array_i4 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -487,7 +487,7 @@ sminval_i4 (gfc_array_i4 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "73e3d9bba8f110ae34141f5e38bf063a09f94eb8", "filename": "libgfortran/generated/minval_i8.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminval_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminval_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminval_i8.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -100,7 +100,7 @@ minval_i8 (gfc_array_i8 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_8) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -299,7 +299,7 @@ mminval_i8 (gfc_array_i8 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -487,7 +487,7 @@ sminval_i8 (gfc_array_i8 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "72134fe7013180f3a050a2c9bda69ac1bfe465b8", "filename": "libgfortran/generated/minval_r10.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminval_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminval_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminval_r10.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -100,7 +100,7 @@ minval_r10 (gfc_array_r10 * const restrict retarray,\n       alloc_size = sizeof (GFC_REAL_10) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -299,7 +299,7 @@ mminval_r10 (gfc_array_r10 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -487,7 +487,7 @@ sminval_r10 (gfc_array_r10 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "47c703ccc8596936166d3596b8be3a9afc367b2e", "filename": "libgfortran/generated/minval_r16.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminval_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminval_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminval_r16.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -100,7 +100,7 @@ minval_r16 (gfc_array_r16 * const restrict retarray,\n       alloc_size = sizeof (GFC_REAL_16) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -299,7 +299,7 @@ mminval_r16 (gfc_array_r16 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -487,7 +487,7 @@ sminval_r16 (gfc_array_r16 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "58c8854a537f63772b84a6fe45cbe03e04fc64b3", "filename": "libgfortran/generated/minval_r4.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminval_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminval_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminval_r4.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -100,7 +100,7 @@ minval_r4 (gfc_array_r4 * const restrict retarray,\n       alloc_size = sizeof (GFC_REAL_4) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -299,7 +299,7 @@ mminval_r4 (gfc_array_r4 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -487,7 +487,7 @@ sminval_r4 (gfc_array_r4 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "c8426bd905a7b18b8d24a9063f88199a719d82d9", "filename": "libgfortran/generated/minval_r8.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminval_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fminval_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminval_r8.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -100,7 +100,7 @@ minval_r8 (gfc_array_r8 * const restrict retarray,\n       alloc_size = sizeof (GFC_REAL_8) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -299,7 +299,7 @@ mminval_r8 (gfc_array_r8 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -487,7 +487,7 @@ sminval_r8 (gfc_array_r8 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "19356fdeea07b29786c1b5bc8225481e34bd266f", "filename": "libgfortran/generated/norm2_r10.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fnorm2_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fnorm2_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fnorm2_r10.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -104,7 +104,7 @@ norm2_r10 (gfc_array_r10 * const restrict retarray,\n       alloc_size = sizeof (GFC_REAL_10) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */"}, {"sha": "fda5a205559025f6533a611de352ef9c6179e367", "filename": "libgfortran/generated/norm2_r16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fnorm2_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fnorm2_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fnorm2_r16.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -108,7 +108,7 @@ norm2_r16 (gfc_array_r16 * const restrict retarray,\n       alloc_size = sizeof (GFC_REAL_16) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */"}, {"sha": "a4cfba45bb41be53474a2406dbe0f521d039edee", "filename": "libgfortran/generated/norm2_r4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fnorm2_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fnorm2_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fnorm2_r4.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -104,7 +104,7 @@ norm2_r4 (gfc_array_r4 * const restrict retarray,\n       alloc_size = sizeof (GFC_REAL_4) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */"}, {"sha": "9031b7a4699449c7bee4ca19966cae8ebad5d0ec", "filename": "libgfortran/generated/norm2_r8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fnorm2_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fnorm2_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fnorm2_r8.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -104,7 +104,7 @@ norm2_r8 (gfc_array_r8 * const restrict retarray,\n       alloc_size = sizeof (GFC_REAL_8) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */"}, {"sha": "9c3b0a20d22e11fd02f6e17b460cfc2670554eb0", "filename": "libgfortran/generated/pack_c10.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fpack_c10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fpack_c10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fpack_c10.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -168,8 +168,8 @@ pack_c10 (gfc_array_c10 *ret, const gfc_array_c10 *array,\n \n \t  ret->offset = 0;\n \n-\t  /* internal_malloc_size allocates a single byte for zero size.  */\n-\t  ret->base_addr = internal_malloc_size (sizeof (GFC_COMPLEX_10) * total);\n+\t  /* xmalloc allocates a single byte for zero size.  */\n+\t  ret->base_addr = xmalloc (sizeof (GFC_COMPLEX_10) * total);\n \n \t  if (total == 0)\n \t    return;"}, {"sha": "84340e0ea652ff545449fc3ec3b689a8187f31c4", "filename": "libgfortran/generated/pack_c16.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fpack_c16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fpack_c16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fpack_c16.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -168,8 +168,8 @@ pack_c16 (gfc_array_c16 *ret, const gfc_array_c16 *array,\n \n \t  ret->offset = 0;\n \n-\t  /* internal_malloc_size allocates a single byte for zero size.  */\n-\t  ret->base_addr = internal_malloc_size (sizeof (GFC_COMPLEX_16) * total);\n+\t  /* xmalloc allocates a single byte for zero size.  */\n+\t  ret->base_addr = xmalloc (sizeof (GFC_COMPLEX_16) * total);\n \n \t  if (total == 0)\n \t    return;"}, {"sha": "3ba1e4b5001db965f9f808574f6510e04df5e4a6", "filename": "libgfortran/generated/pack_c4.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fpack_c4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fpack_c4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fpack_c4.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -168,8 +168,8 @@ pack_c4 (gfc_array_c4 *ret, const gfc_array_c4 *array,\n \n \t  ret->offset = 0;\n \n-\t  /* internal_malloc_size allocates a single byte for zero size.  */\n-\t  ret->base_addr = internal_malloc_size (sizeof (GFC_COMPLEX_4) * total);\n+\t  /* xmalloc allocates a single byte for zero size.  */\n+\t  ret->base_addr = xmalloc (sizeof (GFC_COMPLEX_4) * total);\n \n \t  if (total == 0)\n \t    return;"}, {"sha": "11a8e44f093c390a909adf6e471c137dac81f989", "filename": "libgfortran/generated/pack_c8.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fpack_c8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fpack_c8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fpack_c8.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -168,8 +168,8 @@ pack_c8 (gfc_array_c8 *ret, const gfc_array_c8 *array,\n \n \t  ret->offset = 0;\n \n-\t  /* internal_malloc_size allocates a single byte for zero size.  */\n-\t  ret->base_addr = internal_malloc_size (sizeof (GFC_COMPLEX_8) * total);\n+\t  /* xmalloc allocates a single byte for zero size.  */\n+\t  ret->base_addr = xmalloc (sizeof (GFC_COMPLEX_8) * total);\n \n \t  if (total == 0)\n \t    return;"}, {"sha": "05b8ae5e35c971873b1b2706b5f47db0b3f29cd9", "filename": "libgfortran/generated/pack_i1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fpack_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fpack_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fpack_i1.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -168,8 +168,8 @@ pack_i1 (gfc_array_i1 *ret, const gfc_array_i1 *array,\n \n \t  ret->offset = 0;\n \n-\t  /* internal_malloc_size allocates a single byte for zero size.  */\n-\t  ret->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_1) * total);\n+\t  /* xmalloc allocates a single byte for zero size.  */\n+\t  ret->base_addr = xmalloc (sizeof (GFC_INTEGER_1) * total);\n \n \t  if (total == 0)\n \t    return;"}, {"sha": "8ce8125eca9eeeffb62b333248af06acdb4041c1", "filename": "libgfortran/generated/pack_i16.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fpack_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fpack_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fpack_i16.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -168,8 +168,8 @@ pack_i16 (gfc_array_i16 *ret, const gfc_array_i16 *array,\n \n \t  ret->offset = 0;\n \n-\t  /* internal_malloc_size allocates a single byte for zero size.  */\n-\t  ret->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_16) * total);\n+\t  /* xmalloc allocates a single byte for zero size.  */\n+\t  ret->base_addr = xmalloc (sizeof (GFC_INTEGER_16) * total);\n \n \t  if (total == 0)\n \t    return;"}, {"sha": "fc24cc6133333f88b160b0b726a44d959c88c54a", "filename": "libgfortran/generated/pack_i2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fpack_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fpack_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fpack_i2.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -168,8 +168,8 @@ pack_i2 (gfc_array_i2 *ret, const gfc_array_i2 *array,\n \n \t  ret->offset = 0;\n \n-\t  /* internal_malloc_size allocates a single byte for zero size.  */\n-\t  ret->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_2) * total);\n+\t  /* xmalloc allocates a single byte for zero size.  */\n+\t  ret->base_addr = xmalloc (sizeof (GFC_INTEGER_2) * total);\n \n \t  if (total == 0)\n \t    return;"}, {"sha": "13d343d93b7d4501f80d09d49a91b59725a5d6bf", "filename": "libgfortran/generated/pack_i4.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fpack_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fpack_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fpack_i4.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -168,8 +168,8 @@ pack_i4 (gfc_array_i4 *ret, const gfc_array_i4 *array,\n \n \t  ret->offset = 0;\n \n-\t  /* internal_malloc_size allocates a single byte for zero size.  */\n-\t  ret->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_4) * total);\n+\t  /* xmalloc allocates a single byte for zero size.  */\n+\t  ret->base_addr = xmalloc (sizeof (GFC_INTEGER_4) * total);\n \n \t  if (total == 0)\n \t    return;"}, {"sha": "e79a43892a1e1aeca83750b859d3648f94b1c49f", "filename": "libgfortran/generated/pack_i8.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fpack_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fpack_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fpack_i8.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -168,8 +168,8 @@ pack_i8 (gfc_array_i8 *ret, const gfc_array_i8 *array,\n \n \t  ret->offset = 0;\n \n-\t  /* internal_malloc_size allocates a single byte for zero size.  */\n-\t  ret->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_8) * total);\n+\t  /* xmalloc allocates a single byte for zero size.  */\n+\t  ret->base_addr = xmalloc (sizeof (GFC_INTEGER_8) * total);\n \n \t  if (total == 0)\n \t    return;"}, {"sha": "38cce4c4085df9894c61075ab01b633ea61ed1e8", "filename": "libgfortran/generated/pack_r10.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fpack_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fpack_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fpack_r10.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -168,8 +168,8 @@ pack_r10 (gfc_array_r10 *ret, const gfc_array_r10 *array,\n \n \t  ret->offset = 0;\n \n-\t  /* internal_malloc_size allocates a single byte for zero size.  */\n-\t  ret->base_addr = internal_malloc_size (sizeof (GFC_REAL_10) * total);\n+\t  /* xmalloc allocates a single byte for zero size.  */\n+\t  ret->base_addr = xmalloc (sizeof (GFC_REAL_10) * total);\n \n \t  if (total == 0)\n \t    return;"}, {"sha": "c6576d5a20e14f2cc12b6dc47fe8fd475c4bf4b9", "filename": "libgfortran/generated/pack_r16.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fpack_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fpack_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fpack_r16.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -168,8 +168,8 @@ pack_r16 (gfc_array_r16 *ret, const gfc_array_r16 *array,\n \n \t  ret->offset = 0;\n \n-\t  /* internal_malloc_size allocates a single byte for zero size.  */\n-\t  ret->base_addr = internal_malloc_size (sizeof (GFC_REAL_16) * total);\n+\t  /* xmalloc allocates a single byte for zero size.  */\n+\t  ret->base_addr = xmalloc (sizeof (GFC_REAL_16) * total);\n \n \t  if (total == 0)\n \t    return;"}, {"sha": "29e6d4bbd1500b46fdcb2e8db9003ff65ba0bc2a", "filename": "libgfortran/generated/pack_r4.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fpack_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fpack_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fpack_r4.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -168,8 +168,8 @@ pack_r4 (gfc_array_r4 *ret, const gfc_array_r4 *array,\n \n \t  ret->offset = 0;\n \n-\t  /* internal_malloc_size allocates a single byte for zero size.  */\n-\t  ret->base_addr = internal_malloc_size (sizeof (GFC_REAL_4) * total);\n+\t  /* xmalloc allocates a single byte for zero size.  */\n+\t  ret->base_addr = xmalloc (sizeof (GFC_REAL_4) * total);\n \n \t  if (total == 0)\n \t    return;"}, {"sha": "0de8a970bc0991996dfaa5dccbefd16d814a41cb", "filename": "libgfortran/generated/pack_r8.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fpack_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fpack_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fpack_r8.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -168,8 +168,8 @@ pack_r8 (gfc_array_r8 *ret, const gfc_array_r8 *array,\n \n \t  ret->offset = 0;\n \n-\t  /* internal_malloc_size allocates a single byte for zero size.  */\n-\t  ret->base_addr = internal_malloc_size (sizeof (GFC_REAL_8) * total);\n+\t  /* xmalloc allocates a single byte for zero size.  */\n+\t  ret->base_addr = xmalloc (sizeof (GFC_REAL_8) * total);\n \n \t  if (total == 0)\n \t    return;"}, {"sha": "d14b0539e224918c4c1f4306165e7865c006ed91", "filename": "libgfortran/generated/parity_l1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fparity_l1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fparity_l1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fparity_l1.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -1,5 +1,5 @@\n-/* Implementation of the NORM2 intrinsic\n-   Copyright 2010 Free Software Foundation, Inc.\n+/* Implementation of the PARITY intrinsic\n+   Copyright 2010, 2012 Free Software Foundation, Inc.\n    Contributed by Tobias Burnus  <burnus@net-b.de>\n \n This file is part of the GNU Fortran runtime library (libgfortran).\n@@ -101,7 +101,7 @@ parity_l1 (gfc_array_l1 * const restrict retarray,\n       alloc_size = sizeof (GFC_LOGICAL_1) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */"}, {"sha": "1f5e1684c87985e7ff1441bf3b6e0eb26216ff4b", "filename": "libgfortran/generated/parity_l16.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fparity_l16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fparity_l16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fparity_l16.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -1,5 +1,5 @@\n-/* Implementation of the NORM2 intrinsic\n-   Copyright 2010 Free Software Foundation, Inc.\n+/* Implementation of the PARITY intrinsic\n+   Copyright 2010, 2012 Free Software Foundation, Inc.\n    Contributed by Tobias Burnus  <burnus@net-b.de>\n \n This file is part of the GNU Fortran runtime library (libgfortran).\n@@ -101,7 +101,7 @@ parity_l16 (gfc_array_l16 * const restrict retarray,\n       alloc_size = sizeof (GFC_LOGICAL_16) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */"}, {"sha": "f72b4597fb7035825353dc4c260a0fe3b0fd4470", "filename": "libgfortran/generated/parity_l2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fparity_l2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fparity_l2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fparity_l2.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -1,5 +1,5 @@\n-/* Implementation of the NORM2 intrinsic\n-   Copyright 2010 Free Software Foundation, Inc.\n+/* Implementation of the PARITY intrinsic\n+   Copyright 2010, 2012 Free Software Foundation, Inc.\n    Contributed by Tobias Burnus  <burnus@net-b.de>\n \n This file is part of the GNU Fortran runtime library (libgfortran).\n@@ -101,7 +101,7 @@ parity_l2 (gfc_array_l2 * const restrict retarray,\n       alloc_size = sizeof (GFC_LOGICAL_2) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */"}, {"sha": "c498225952d2323827a3583d32905fa800b23245", "filename": "libgfortran/generated/parity_l4.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fparity_l4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fparity_l4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fparity_l4.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -1,5 +1,5 @@\n-/* Implementation of the NORM2 intrinsic\n-   Copyright 2010 Free Software Foundation, Inc.\n+/* Implementation of the PARITY intrinsic\n+   Copyright 2010, 2012 Free Software Foundation, Inc.\n    Contributed by Tobias Burnus  <burnus@net-b.de>\n \n This file is part of the GNU Fortran runtime library (libgfortran).\n@@ -101,7 +101,7 @@ parity_l4 (gfc_array_l4 * const restrict retarray,\n       alloc_size = sizeof (GFC_LOGICAL_4) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */"}, {"sha": "950910122542ac39719e35b8c68d572d5d8b5b68", "filename": "libgfortran/generated/parity_l8.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fparity_l8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fparity_l8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fparity_l8.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -1,5 +1,5 @@\n-/* Implementation of the NORM2 intrinsic\n-   Copyright 2010 Free Software Foundation, Inc.\n+/* Implementation of the PARITY intrinsic\n+   Copyright 2010, 2012 Free Software Foundation, Inc.\n    Contributed by Tobias Burnus  <burnus@net-b.de>\n \n This file is part of the GNU Fortran runtime library (libgfortran).\n@@ -101,7 +101,7 @@ parity_l8 (gfc_array_l8 * const restrict retarray,\n       alloc_size = sizeof (GFC_LOGICAL_8) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */"}, {"sha": "379f3892be6e1d2075095c94da3f3dbbe204c35a", "filename": "libgfortran/generated/product_c10.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fproduct_c10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fproduct_c10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_c10.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -100,7 +100,7 @@ product_c10 (gfc_array_c10 * const restrict retarray,\n       alloc_size = sizeof (GFC_COMPLEX_10) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -285,7 +285,7 @@ mproduct_c10 (gfc_array_c10 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -445,7 +445,7 @@ sproduct_c10 (gfc_array_c10 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "2e91c5e9cdd6862ddc587534006ef36db7973ea7", "filename": "libgfortran/generated/product_c16.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fproduct_c16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fproduct_c16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_c16.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -100,7 +100,7 @@ product_c16 (gfc_array_c16 * const restrict retarray,\n       alloc_size = sizeof (GFC_COMPLEX_16) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -285,7 +285,7 @@ mproduct_c16 (gfc_array_c16 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -445,7 +445,7 @@ sproduct_c16 (gfc_array_c16 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "c1a9534cb41f5598c6f089528afe3ce23b0ef66f", "filename": "libgfortran/generated/product_c4.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fproduct_c4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fproduct_c4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_c4.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -100,7 +100,7 @@ product_c4 (gfc_array_c4 * const restrict retarray,\n       alloc_size = sizeof (GFC_COMPLEX_4) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -285,7 +285,7 @@ mproduct_c4 (gfc_array_c4 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -445,7 +445,7 @@ sproduct_c4 (gfc_array_c4 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "80a6ac62789865bd8c85f3ee6649e538bac8819b", "filename": "libgfortran/generated/product_c8.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fproduct_c8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fproduct_c8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_c8.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -100,7 +100,7 @@ product_c8 (gfc_array_c8 * const restrict retarray,\n       alloc_size = sizeof (GFC_COMPLEX_8) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -285,7 +285,7 @@ mproduct_c8 (gfc_array_c8 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -445,7 +445,7 @@ sproduct_c8 (gfc_array_c8 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "ff8e76a7b07594d1c17d4d2dbd39a8a0fa6f82f1", "filename": "libgfortran/generated/product_i1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fproduct_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fproduct_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_i1.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -100,7 +100,7 @@ product_i1 (gfc_array_i1 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_1) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -285,7 +285,7 @@ mproduct_i1 (gfc_array_i1 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -445,7 +445,7 @@ sproduct_i1 (gfc_array_i1 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "652e766b5080361d8756903435387a9d3897ff3f", "filename": "libgfortran/generated/product_i16.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fproduct_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fproduct_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_i16.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -100,7 +100,7 @@ product_i16 (gfc_array_i16 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_16) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -285,7 +285,7 @@ mproduct_i16 (gfc_array_i16 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -445,7 +445,7 @@ sproduct_i16 (gfc_array_i16 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "1063d6acf9841593e43230f7318fe97c1424f1ee", "filename": "libgfortran/generated/product_i2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fproduct_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fproduct_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_i2.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -100,7 +100,7 @@ product_i2 (gfc_array_i2 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_2) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -285,7 +285,7 @@ mproduct_i2 (gfc_array_i2 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -445,7 +445,7 @@ sproduct_i2 (gfc_array_i2 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "97eab9e4766b26930dabb4484c68c019f5043652", "filename": "libgfortran/generated/product_i4.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fproduct_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fproduct_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_i4.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -100,7 +100,7 @@ product_i4 (gfc_array_i4 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_4) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -285,7 +285,7 @@ mproduct_i4 (gfc_array_i4 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -445,7 +445,7 @@ sproduct_i4 (gfc_array_i4 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "89454971dd8cff5e407394454f60191ea6c58911", "filename": "libgfortran/generated/product_i8.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fproduct_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fproduct_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_i8.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -100,7 +100,7 @@ product_i8 (gfc_array_i8 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_8) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -285,7 +285,7 @@ mproduct_i8 (gfc_array_i8 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -445,7 +445,7 @@ sproduct_i8 (gfc_array_i8 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "4259f7acb0cf3490c1a88a0cde61d4d1fa407ea4", "filename": "libgfortran/generated/product_r10.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fproduct_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fproduct_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_r10.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -100,7 +100,7 @@ product_r10 (gfc_array_r10 * const restrict retarray,\n       alloc_size = sizeof (GFC_REAL_10) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -285,7 +285,7 @@ mproduct_r10 (gfc_array_r10 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -445,7 +445,7 @@ sproduct_r10 (gfc_array_r10 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "e4ec5b27268141ee237b76c3986cf3091750627d", "filename": "libgfortran/generated/product_r16.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fproduct_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fproduct_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_r16.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -100,7 +100,7 @@ product_r16 (gfc_array_r16 * const restrict retarray,\n       alloc_size = sizeof (GFC_REAL_16) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -285,7 +285,7 @@ mproduct_r16 (gfc_array_r16 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -445,7 +445,7 @@ sproduct_r16 (gfc_array_r16 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "dc3fe513e9004c556a43e96057ae9881e8375a6d", "filename": "libgfortran/generated/product_r4.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fproduct_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fproduct_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_r4.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -100,7 +100,7 @@ product_r4 (gfc_array_r4 * const restrict retarray,\n       alloc_size = sizeof (GFC_REAL_4) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -285,7 +285,7 @@ mproduct_r4 (gfc_array_r4 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -445,7 +445,7 @@ sproduct_r4 (gfc_array_r4 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "5e03477710cbabed90fa2837cf63883392e47383", "filename": "libgfortran/generated/product_r8.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fproduct_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fproduct_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_r8.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -100,7 +100,7 @@ product_r8 (gfc_array_r8 * const restrict retarray,\n       alloc_size = sizeof (GFC_REAL_8) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -285,7 +285,7 @@ mproduct_r8 (gfc_array_r8 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -445,7 +445,7 @@ sproduct_r8 (gfc_array_r8 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "bb0b67e93ef2f619605d29821a63e33fb34cbd90", "filename": "libgfortran/generated/reshape_c10.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Freshape_c10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Freshape_c10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Freshape_c10.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -115,7 +115,7 @@ reshape_c10 (gfc_array_c10 * const restrict ret,\n       else\n         alloc_size = rs * sizeof (GFC_COMPLEX_10);\n \n-      ret->base_addr = internal_malloc_size (alloc_size);\n+      ret->base_addr = xmalloc (alloc_size);\n       ret->dtype = (source->dtype & ~GFC_DTYPE_RANK_MASK) | rdim;\n     }\n "}, {"sha": "7fcc97c18706fe64bdabb299d0d56aa1fe043a53", "filename": "libgfortran/generated/reshape_c16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Freshape_c16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Freshape_c16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Freshape_c16.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -115,7 +115,7 @@ reshape_c16 (gfc_array_c16 * const restrict ret,\n       else\n         alloc_size = rs * sizeof (GFC_COMPLEX_16);\n \n-      ret->base_addr = internal_malloc_size (alloc_size);\n+      ret->base_addr = xmalloc (alloc_size);\n       ret->dtype = (source->dtype & ~GFC_DTYPE_RANK_MASK) | rdim;\n     }\n "}, {"sha": "9362bbad2381e9de7e29d8a85304977a86515709", "filename": "libgfortran/generated/reshape_c4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Freshape_c4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Freshape_c4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Freshape_c4.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -115,7 +115,7 @@ reshape_c4 (gfc_array_c4 * const restrict ret,\n       else\n         alloc_size = rs * sizeof (GFC_COMPLEX_4);\n \n-      ret->base_addr = internal_malloc_size (alloc_size);\n+      ret->base_addr = xmalloc (alloc_size);\n       ret->dtype = (source->dtype & ~GFC_DTYPE_RANK_MASK) | rdim;\n     }\n "}, {"sha": "cb34899e09baf9e0e64335115ff143afb0718b6d", "filename": "libgfortran/generated/reshape_c8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Freshape_c8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Freshape_c8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Freshape_c8.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -115,7 +115,7 @@ reshape_c8 (gfc_array_c8 * const restrict ret,\n       else\n         alloc_size = rs * sizeof (GFC_COMPLEX_8);\n \n-      ret->base_addr = internal_malloc_size (alloc_size);\n+      ret->base_addr = xmalloc (alloc_size);\n       ret->dtype = (source->dtype & ~GFC_DTYPE_RANK_MASK) | rdim;\n     }\n "}, {"sha": "7a2cef4a73369dc37a1a8c80cf2f4c46c22044d0", "filename": "libgfortran/generated/reshape_i16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Freshape_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Freshape_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Freshape_i16.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -115,7 +115,7 @@ reshape_16 (gfc_array_i16 * const restrict ret,\n       else\n         alloc_size = rs * sizeof (GFC_INTEGER_16);\n \n-      ret->base_addr = internal_malloc_size (alloc_size);\n+      ret->base_addr = xmalloc (alloc_size);\n       ret->dtype = (source->dtype & ~GFC_DTYPE_RANK_MASK) | rdim;\n     }\n "}, {"sha": "6fa7b2f819d272cc10575d696a342c0e6633d5b9", "filename": "libgfortran/generated/reshape_i4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Freshape_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Freshape_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Freshape_i4.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -115,7 +115,7 @@ reshape_4 (gfc_array_i4 * const restrict ret,\n       else\n         alloc_size = rs * sizeof (GFC_INTEGER_4);\n \n-      ret->base_addr = internal_malloc_size (alloc_size);\n+      ret->base_addr = xmalloc (alloc_size);\n       ret->dtype = (source->dtype & ~GFC_DTYPE_RANK_MASK) | rdim;\n     }\n "}, {"sha": "a97c94673274a3c66fe490cb01b591b06cbe2805", "filename": "libgfortran/generated/reshape_i8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Freshape_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Freshape_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Freshape_i8.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -115,7 +115,7 @@ reshape_8 (gfc_array_i8 * const restrict ret,\n       else\n         alloc_size = rs * sizeof (GFC_INTEGER_8);\n \n-      ret->base_addr = internal_malloc_size (alloc_size);\n+      ret->base_addr = xmalloc (alloc_size);\n       ret->dtype = (source->dtype & ~GFC_DTYPE_RANK_MASK) | rdim;\n     }\n "}, {"sha": "47e4bbd3b36a632302ef1349940ea484a6eb1568", "filename": "libgfortran/generated/reshape_r10.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Freshape_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Freshape_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Freshape_r10.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -115,7 +115,7 @@ reshape_r10 (gfc_array_r10 * const restrict ret,\n       else\n         alloc_size = rs * sizeof (GFC_REAL_10);\n \n-      ret->base_addr = internal_malloc_size (alloc_size);\n+      ret->base_addr = xmalloc (alloc_size);\n       ret->dtype = (source->dtype & ~GFC_DTYPE_RANK_MASK) | rdim;\n     }\n "}, {"sha": "e5919482548a90f3facba4cfdaa01361149c1090", "filename": "libgfortran/generated/reshape_r16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Freshape_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Freshape_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Freshape_r16.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -115,7 +115,7 @@ reshape_r16 (gfc_array_r16 * const restrict ret,\n       else\n         alloc_size = rs * sizeof (GFC_REAL_16);\n \n-      ret->base_addr = internal_malloc_size (alloc_size);\n+      ret->base_addr = xmalloc (alloc_size);\n       ret->dtype = (source->dtype & ~GFC_DTYPE_RANK_MASK) | rdim;\n     }\n "}, {"sha": "9eece42a67119304a107cefe50fdb567fd96253c", "filename": "libgfortran/generated/reshape_r4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Freshape_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Freshape_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Freshape_r4.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -115,7 +115,7 @@ reshape_r4 (gfc_array_r4 * const restrict ret,\n       else\n         alloc_size = rs * sizeof (GFC_REAL_4);\n \n-      ret->base_addr = internal_malloc_size (alloc_size);\n+      ret->base_addr = xmalloc (alloc_size);\n       ret->dtype = (source->dtype & ~GFC_DTYPE_RANK_MASK) | rdim;\n     }\n "}, {"sha": "22cb72959c9812493b4e360a9c254dcf11cbbb27", "filename": "libgfortran/generated/reshape_r8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Freshape_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Freshape_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Freshape_r8.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -115,7 +115,7 @@ reshape_r8 (gfc_array_r8 * const restrict ret,\n       else\n         alloc_size = rs * sizeof (GFC_REAL_8);\n \n-      ret->base_addr = internal_malloc_size (alloc_size);\n+      ret->base_addr = xmalloc (alloc_size);\n       ret->dtype = (source->dtype & ~GFC_DTYPE_RANK_MASK) | rdim;\n     }\n "}, {"sha": "496f03dee7fadc40a084d2f3f87b3b7e1ab35c97", "filename": "libgfortran/generated/shape_i16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fshape_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fshape_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fshape_i16.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -49,7 +49,7 @@ shape_16 (gfc_array_i16 * const restrict ret,\n     {\n       GFC_DIMENSION_SET(ret->dim[0], 0, rank - 1, 1);\n       ret->offset = 0;\n-      ret->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_16) * rank);\n+      ret->base_addr = xmalloc (sizeof (GFC_INTEGER_16) * rank);\n     }\n \n   stride = GFC_DESCRIPTOR_STRIDE(ret,0);"}, {"sha": "e012ec0e8455058f30a35d62473e106c32e1c05b", "filename": "libgfortran/generated/shape_i4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fshape_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fshape_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fshape_i4.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -49,7 +49,7 @@ shape_4 (gfc_array_i4 * const restrict ret,\n     {\n       GFC_DIMENSION_SET(ret->dim[0], 0, rank - 1, 1);\n       ret->offset = 0;\n-      ret->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_4) * rank);\n+      ret->base_addr = xmalloc (sizeof (GFC_INTEGER_4) * rank);\n     }\n \n   stride = GFC_DESCRIPTOR_STRIDE(ret,0);"}, {"sha": "01eefc16618ac6987f9fc7dbdc16570dc7a16906", "filename": "libgfortran/generated/shape_i8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fshape_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fshape_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fshape_i8.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -49,7 +49,7 @@ shape_8 (gfc_array_i8 * const restrict ret,\n     {\n       GFC_DIMENSION_SET(ret->dim[0], 0, rank - 1, 1);\n       ret->offset = 0;\n-      ret->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_8) * rank);\n+      ret->base_addr = xmalloc (sizeof (GFC_INTEGER_8) * rank);\n     }\n \n   stride = GFC_DESCRIPTOR_STRIDE(ret,0);"}, {"sha": "ac3dc2c1b56cca114f74328cd194b62d33fd4706", "filename": "libgfortran/generated/spread_c10.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fspread_c10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fspread_c10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fspread_c10.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -101,8 +101,8 @@ spread_c10 (gfc_array_c10 *ret, const gfc_array_c10 *source,\n \t}\n       ret->offset = 0;\n \n-      /* internal_malloc_size allocates a single byte for zero size.  */\n-      ret->base_addr = internal_malloc_size (rs * sizeof(GFC_COMPLEX_10));\n+      /* xmalloc allocates a single byte for zero size.  */\n+      ret->base_addr = xmalloc (rs * sizeof(GFC_COMPLEX_10));\n       if (rs <= 0)\n         return;\n     }\n@@ -244,7 +244,7 @@ spread_scalar_c10 (gfc_array_c10 *ret, const GFC_COMPLEX_10 *source,\n \n   if (ret->base_addr == NULL)\n     {\n-      ret->base_addr = internal_malloc_size (ncopies * sizeof (GFC_COMPLEX_10));\n+      ret->base_addr = xmalloc (ncopies * sizeof (GFC_COMPLEX_10));\n       ret->offset = 0;\n       GFC_DIMENSION_SET(ret->dim[0], 0, ncopies - 1, 1);\n     }"}, {"sha": "e7aff077f2b739d532f82f0ec618887fc2ce25d3", "filename": "libgfortran/generated/spread_c16.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fspread_c16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fspread_c16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fspread_c16.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -101,8 +101,8 @@ spread_c16 (gfc_array_c16 *ret, const gfc_array_c16 *source,\n \t}\n       ret->offset = 0;\n \n-      /* internal_malloc_size allocates a single byte for zero size.  */\n-      ret->base_addr = internal_malloc_size (rs * sizeof(GFC_COMPLEX_16));\n+      /* xmalloc allocates a single byte for zero size.  */\n+      ret->base_addr = xmalloc (rs * sizeof(GFC_COMPLEX_16));\n       if (rs <= 0)\n         return;\n     }\n@@ -244,7 +244,7 @@ spread_scalar_c16 (gfc_array_c16 *ret, const GFC_COMPLEX_16 *source,\n \n   if (ret->base_addr == NULL)\n     {\n-      ret->base_addr = internal_malloc_size (ncopies * sizeof (GFC_COMPLEX_16));\n+      ret->base_addr = xmalloc (ncopies * sizeof (GFC_COMPLEX_16));\n       ret->offset = 0;\n       GFC_DIMENSION_SET(ret->dim[0], 0, ncopies - 1, 1);\n     }"}, {"sha": "d75d315ff9882571b871c5ae19051282f8e6487f", "filename": "libgfortran/generated/spread_c4.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fspread_c4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fspread_c4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fspread_c4.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -101,8 +101,8 @@ spread_c4 (gfc_array_c4 *ret, const gfc_array_c4 *source,\n \t}\n       ret->offset = 0;\n \n-      /* internal_malloc_size allocates a single byte for zero size.  */\n-      ret->base_addr = internal_malloc_size (rs * sizeof(GFC_COMPLEX_4));\n+      /* xmalloc allocates a single byte for zero size.  */\n+      ret->base_addr = xmalloc (rs * sizeof(GFC_COMPLEX_4));\n       if (rs <= 0)\n         return;\n     }\n@@ -244,7 +244,7 @@ spread_scalar_c4 (gfc_array_c4 *ret, const GFC_COMPLEX_4 *source,\n \n   if (ret->base_addr == NULL)\n     {\n-      ret->base_addr = internal_malloc_size (ncopies * sizeof (GFC_COMPLEX_4));\n+      ret->base_addr = xmalloc (ncopies * sizeof (GFC_COMPLEX_4));\n       ret->offset = 0;\n       GFC_DIMENSION_SET(ret->dim[0], 0, ncopies - 1, 1);\n     }"}, {"sha": "1786d1dde5b7d5aeef41fba44fe0fde39f10d2b3", "filename": "libgfortran/generated/spread_c8.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fspread_c8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fspread_c8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fspread_c8.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -101,8 +101,8 @@ spread_c8 (gfc_array_c8 *ret, const gfc_array_c8 *source,\n \t}\n       ret->offset = 0;\n \n-      /* internal_malloc_size allocates a single byte for zero size.  */\n-      ret->base_addr = internal_malloc_size (rs * sizeof(GFC_COMPLEX_8));\n+      /* xmalloc allocates a single byte for zero size.  */\n+      ret->base_addr = xmalloc (rs * sizeof(GFC_COMPLEX_8));\n       if (rs <= 0)\n         return;\n     }\n@@ -244,7 +244,7 @@ spread_scalar_c8 (gfc_array_c8 *ret, const GFC_COMPLEX_8 *source,\n \n   if (ret->base_addr == NULL)\n     {\n-      ret->base_addr = internal_malloc_size (ncopies * sizeof (GFC_COMPLEX_8));\n+      ret->base_addr = xmalloc (ncopies * sizeof (GFC_COMPLEX_8));\n       ret->offset = 0;\n       GFC_DIMENSION_SET(ret->dim[0], 0, ncopies - 1, 1);\n     }"}, {"sha": "ea18032deaa2574d4b4abf91fd0d58aa195c042f", "filename": "libgfortran/generated/spread_i1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fspread_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fspread_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fspread_i1.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -101,8 +101,8 @@ spread_i1 (gfc_array_i1 *ret, const gfc_array_i1 *source,\n \t}\n       ret->offset = 0;\n \n-      /* internal_malloc_size allocates a single byte for zero size.  */\n-      ret->base_addr = internal_malloc_size (rs * sizeof(GFC_INTEGER_1));\n+      /* xmalloc allocates a single byte for zero size.  */\n+      ret->base_addr = xmalloc (rs * sizeof(GFC_INTEGER_1));\n       if (rs <= 0)\n         return;\n     }\n@@ -244,7 +244,7 @@ spread_scalar_i1 (gfc_array_i1 *ret, const GFC_INTEGER_1 *source,\n \n   if (ret->base_addr == NULL)\n     {\n-      ret->base_addr = internal_malloc_size (ncopies * sizeof (GFC_INTEGER_1));\n+      ret->base_addr = xmalloc (ncopies * sizeof (GFC_INTEGER_1));\n       ret->offset = 0;\n       GFC_DIMENSION_SET(ret->dim[0], 0, ncopies - 1, 1);\n     }"}, {"sha": "76512d3a934780f3f0acf80cd1ddbf1eec01be27", "filename": "libgfortran/generated/spread_i16.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fspread_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fspread_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fspread_i16.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -101,8 +101,8 @@ spread_i16 (gfc_array_i16 *ret, const gfc_array_i16 *source,\n \t}\n       ret->offset = 0;\n \n-      /* internal_malloc_size allocates a single byte for zero size.  */\n-      ret->base_addr = internal_malloc_size (rs * sizeof(GFC_INTEGER_16));\n+      /* xmalloc allocates a single byte for zero size.  */\n+      ret->base_addr = xmalloc (rs * sizeof(GFC_INTEGER_16));\n       if (rs <= 0)\n         return;\n     }\n@@ -244,7 +244,7 @@ spread_scalar_i16 (gfc_array_i16 *ret, const GFC_INTEGER_16 *source,\n \n   if (ret->base_addr == NULL)\n     {\n-      ret->base_addr = internal_malloc_size (ncopies * sizeof (GFC_INTEGER_16));\n+      ret->base_addr = xmalloc (ncopies * sizeof (GFC_INTEGER_16));\n       ret->offset = 0;\n       GFC_DIMENSION_SET(ret->dim[0], 0, ncopies - 1, 1);\n     }"}, {"sha": "b81784b2770745a568629156e27f67eb4dc0f31a", "filename": "libgfortran/generated/spread_i2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fspread_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fspread_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fspread_i2.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -101,8 +101,8 @@ spread_i2 (gfc_array_i2 *ret, const gfc_array_i2 *source,\n \t}\n       ret->offset = 0;\n \n-      /* internal_malloc_size allocates a single byte for zero size.  */\n-      ret->base_addr = internal_malloc_size (rs * sizeof(GFC_INTEGER_2));\n+      /* xmalloc allocates a single byte for zero size.  */\n+      ret->base_addr = xmalloc (rs * sizeof(GFC_INTEGER_2));\n       if (rs <= 0)\n         return;\n     }\n@@ -244,7 +244,7 @@ spread_scalar_i2 (gfc_array_i2 *ret, const GFC_INTEGER_2 *source,\n \n   if (ret->base_addr == NULL)\n     {\n-      ret->base_addr = internal_malloc_size (ncopies * sizeof (GFC_INTEGER_2));\n+      ret->base_addr = xmalloc (ncopies * sizeof (GFC_INTEGER_2));\n       ret->offset = 0;\n       GFC_DIMENSION_SET(ret->dim[0], 0, ncopies - 1, 1);\n     }"}, {"sha": "3a4f946807773bbd6164bad0581f5ed35790df90", "filename": "libgfortran/generated/spread_i4.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fspread_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fspread_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fspread_i4.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -101,8 +101,8 @@ spread_i4 (gfc_array_i4 *ret, const gfc_array_i4 *source,\n \t}\n       ret->offset = 0;\n \n-      /* internal_malloc_size allocates a single byte for zero size.  */\n-      ret->base_addr = internal_malloc_size (rs * sizeof(GFC_INTEGER_4));\n+      /* xmalloc allocates a single byte for zero size.  */\n+      ret->base_addr = xmalloc (rs * sizeof(GFC_INTEGER_4));\n       if (rs <= 0)\n         return;\n     }\n@@ -244,7 +244,7 @@ spread_scalar_i4 (gfc_array_i4 *ret, const GFC_INTEGER_4 *source,\n \n   if (ret->base_addr == NULL)\n     {\n-      ret->base_addr = internal_malloc_size (ncopies * sizeof (GFC_INTEGER_4));\n+      ret->base_addr = xmalloc (ncopies * sizeof (GFC_INTEGER_4));\n       ret->offset = 0;\n       GFC_DIMENSION_SET(ret->dim[0], 0, ncopies - 1, 1);\n     }"}, {"sha": "c55013c96f74403080e335e6b4968a058ed19552", "filename": "libgfortran/generated/spread_i8.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fspread_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fspread_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fspread_i8.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -101,8 +101,8 @@ spread_i8 (gfc_array_i8 *ret, const gfc_array_i8 *source,\n \t}\n       ret->offset = 0;\n \n-      /* internal_malloc_size allocates a single byte for zero size.  */\n-      ret->base_addr = internal_malloc_size (rs * sizeof(GFC_INTEGER_8));\n+      /* xmalloc allocates a single byte for zero size.  */\n+      ret->base_addr = xmalloc (rs * sizeof(GFC_INTEGER_8));\n       if (rs <= 0)\n         return;\n     }\n@@ -244,7 +244,7 @@ spread_scalar_i8 (gfc_array_i8 *ret, const GFC_INTEGER_8 *source,\n \n   if (ret->base_addr == NULL)\n     {\n-      ret->base_addr = internal_malloc_size (ncopies * sizeof (GFC_INTEGER_8));\n+      ret->base_addr = xmalloc (ncopies * sizeof (GFC_INTEGER_8));\n       ret->offset = 0;\n       GFC_DIMENSION_SET(ret->dim[0], 0, ncopies - 1, 1);\n     }"}, {"sha": "76c1d1608bb338f4ff06b8dda566c5bceccf2a5f", "filename": "libgfortran/generated/spread_r10.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fspread_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fspread_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fspread_r10.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -101,8 +101,8 @@ spread_r10 (gfc_array_r10 *ret, const gfc_array_r10 *source,\n \t}\n       ret->offset = 0;\n \n-      /* internal_malloc_size allocates a single byte for zero size.  */\n-      ret->base_addr = internal_malloc_size (rs * sizeof(GFC_REAL_10));\n+      /* xmalloc allocates a single byte for zero size.  */\n+      ret->base_addr = xmalloc (rs * sizeof(GFC_REAL_10));\n       if (rs <= 0)\n         return;\n     }\n@@ -244,7 +244,7 @@ spread_scalar_r10 (gfc_array_r10 *ret, const GFC_REAL_10 *source,\n \n   if (ret->base_addr == NULL)\n     {\n-      ret->base_addr = internal_malloc_size (ncopies * sizeof (GFC_REAL_10));\n+      ret->base_addr = xmalloc (ncopies * sizeof (GFC_REAL_10));\n       ret->offset = 0;\n       GFC_DIMENSION_SET(ret->dim[0], 0, ncopies - 1, 1);\n     }"}, {"sha": "163262d9a54f380a71db6fa0d53b79256c77cc94", "filename": "libgfortran/generated/spread_r16.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fspread_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fspread_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fspread_r16.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -101,8 +101,8 @@ spread_r16 (gfc_array_r16 *ret, const gfc_array_r16 *source,\n \t}\n       ret->offset = 0;\n \n-      /* internal_malloc_size allocates a single byte for zero size.  */\n-      ret->base_addr = internal_malloc_size (rs * sizeof(GFC_REAL_16));\n+      /* xmalloc allocates a single byte for zero size.  */\n+      ret->base_addr = xmalloc (rs * sizeof(GFC_REAL_16));\n       if (rs <= 0)\n         return;\n     }\n@@ -244,7 +244,7 @@ spread_scalar_r16 (gfc_array_r16 *ret, const GFC_REAL_16 *source,\n \n   if (ret->base_addr == NULL)\n     {\n-      ret->base_addr = internal_malloc_size (ncopies * sizeof (GFC_REAL_16));\n+      ret->base_addr = xmalloc (ncopies * sizeof (GFC_REAL_16));\n       ret->offset = 0;\n       GFC_DIMENSION_SET(ret->dim[0], 0, ncopies - 1, 1);\n     }"}, {"sha": "12f46d57f7ce41a58a464949515d2f72cf308ae6", "filename": "libgfortran/generated/spread_r4.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fspread_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fspread_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fspread_r4.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -101,8 +101,8 @@ spread_r4 (gfc_array_r4 *ret, const gfc_array_r4 *source,\n \t}\n       ret->offset = 0;\n \n-      /* internal_malloc_size allocates a single byte for zero size.  */\n-      ret->base_addr = internal_malloc_size (rs * sizeof(GFC_REAL_4));\n+      /* xmalloc allocates a single byte for zero size.  */\n+      ret->base_addr = xmalloc (rs * sizeof(GFC_REAL_4));\n       if (rs <= 0)\n         return;\n     }\n@@ -244,7 +244,7 @@ spread_scalar_r4 (gfc_array_r4 *ret, const GFC_REAL_4 *source,\n \n   if (ret->base_addr == NULL)\n     {\n-      ret->base_addr = internal_malloc_size (ncopies * sizeof (GFC_REAL_4));\n+      ret->base_addr = xmalloc (ncopies * sizeof (GFC_REAL_4));\n       ret->offset = 0;\n       GFC_DIMENSION_SET(ret->dim[0], 0, ncopies - 1, 1);\n     }"}, {"sha": "138b47d52cd1d1455131c2ae7f906837bdbc55dc", "filename": "libgfortran/generated/spread_r8.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fspread_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fspread_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fspread_r8.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -101,8 +101,8 @@ spread_r8 (gfc_array_r8 *ret, const gfc_array_r8 *source,\n \t}\n       ret->offset = 0;\n \n-      /* internal_malloc_size allocates a single byte for zero size.  */\n-      ret->base_addr = internal_malloc_size (rs * sizeof(GFC_REAL_8));\n+      /* xmalloc allocates a single byte for zero size.  */\n+      ret->base_addr = xmalloc (rs * sizeof(GFC_REAL_8));\n       if (rs <= 0)\n         return;\n     }\n@@ -244,7 +244,7 @@ spread_scalar_r8 (gfc_array_r8 *ret, const GFC_REAL_8 *source,\n \n   if (ret->base_addr == NULL)\n     {\n-      ret->base_addr = internal_malloc_size (ncopies * sizeof (GFC_REAL_8));\n+      ret->base_addr = xmalloc (ncopies * sizeof (GFC_REAL_8));\n       ret->offset = 0;\n       GFC_DIMENSION_SET(ret->dim[0], 0, ncopies - 1, 1);\n     }"}, {"sha": "50567b3a27045649b34f376e36a29efe4655983b", "filename": "libgfortran/generated/sum_c10.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fsum_c10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fsum_c10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_c10.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -100,7 +100,7 @@ sum_c10 (gfc_array_c10 * const restrict retarray,\n       alloc_size = sizeof (GFC_COMPLEX_10) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -285,7 +285,7 @@ msum_c10 (gfc_array_c10 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -445,7 +445,7 @@ ssum_c10 (gfc_array_c10 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "285b4449e775578e5f4b022b44eeea97d061c8ad", "filename": "libgfortran/generated/sum_c16.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fsum_c16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fsum_c16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_c16.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -100,7 +100,7 @@ sum_c16 (gfc_array_c16 * const restrict retarray,\n       alloc_size = sizeof (GFC_COMPLEX_16) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -285,7 +285,7 @@ msum_c16 (gfc_array_c16 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -445,7 +445,7 @@ ssum_c16 (gfc_array_c16 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "bdaa1adc7275c4f3d1fc068062ecb6bcc4bedb5a", "filename": "libgfortran/generated/sum_c4.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fsum_c4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fsum_c4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_c4.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -100,7 +100,7 @@ sum_c4 (gfc_array_c4 * const restrict retarray,\n       alloc_size = sizeof (GFC_COMPLEX_4) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -285,7 +285,7 @@ msum_c4 (gfc_array_c4 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -445,7 +445,7 @@ ssum_c4 (gfc_array_c4 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "e7a4a45aa03c45e76307e826aa678c6bdbe28917", "filename": "libgfortran/generated/sum_c8.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fsum_c8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fsum_c8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_c8.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -100,7 +100,7 @@ sum_c8 (gfc_array_c8 * const restrict retarray,\n       alloc_size = sizeof (GFC_COMPLEX_8) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -285,7 +285,7 @@ msum_c8 (gfc_array_c8 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -445,7 +445,7 @@ ssum_c8 (gfc_array_c8 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "7b03bd0596598863cdd11ba905882673a7161e18", "filename": "libgfortran/generated/sum_i1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fsum_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fsum_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_i1.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -100,7 +100,7 @@ sum_i1 (gfc_array_i1 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_1) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -285,7 +285,7 @@ msum_i1 (gfc_array_i1 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -445,7 +445,7 @@ ssum_i1 (gfc_array_i1 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "71bf01a209c232d34a7546c44781fcc67ff56eab", "filename": "libgfortran/generated/sum_i16.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fsum_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fsum_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_i16.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -100,7 +100,7 @@ sum_i16 (gfc_array_i16 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_16) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -285,7 +285,7 @@ msum_i16 (gfc_array_i16 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -445,7 +445,7 @@ ssum_i16 (gfc_array_i16 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "1d82782bef14dd5067558bc8ebcffd83c4f9fd84", "filename": "libgfortran/generated/sum_i2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fsum_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fsum_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_i2.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -100,7 +100,7 @@ sum_i2 (gfc_array_i2 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_2) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -285,7 +285,7 @@ msum_i2 (gfc_array_i2 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -445,7 +445,7 @@ ssum_i2 (gfc_array_i2 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "3e29bfa498a8c73f2e6589698cd0fa3fd17ca676", "filename": "libgfortran/generated/sum_i4.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fsum_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fsum_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_i4.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -100,7 +100,7 @@ sum_i4 (gfc_array_i4 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_4) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -285,7 +285,7 @@ msum_i4 (gfc_array_i4 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -445,7 +445,7 @@ ssum_i4 (gfc_array_i4 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "05767bc59c736157d1399d0c155c14aed9a0b7f7", "filename": "libgfortran/generated/sum_i8.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fsum_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fsum_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_i8.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -100,7 +100,7 @@ sum_i8 (gfc_array_i8 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_8) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -285,7 +285,7 @@ msum_i8 (gfc_array_i8 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -445,7 +445,7 @@ ssum_i8 (gfc_array_i8 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "16ff425a617bbd376cb0cd0e7116d697973ab2e3", "filename": "libgfortran/generated/sum_r10.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fsum_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fsum_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_r10.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -100,7 +100,7 @@ sum_r10 (gfc_array_r10 * const restrict retarray,\n       alloc_size = sizeof (GFC_REAL_10) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -285,7 +285,7 @@ msum_r10 (gfc_array_r10 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -445,7 +445,7 @@ ssum_r10 (gfc_array_r10 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "3b2d8a60729b7ed6b4db12a751d3b73eb75c2cea", "filename": "libgfortran/generated/sum_r16.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fsum_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fsum_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_r16.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -100,7 +100,7 @@ sum_r16 (gfc_array_r16 * const restrict retarray,\n       alloc_size = sizeof (GFC_REAL_16) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -285,7 +285,7 @@ msum_r16 (gfc_array_r16 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -445,7 +445,7 @@ ssum_r16 (gfc_array_r16 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "5136dae2c80da64e5e591ce38ede95b4bbbcb006", "filename": "libgfortran/generated/sum_r4.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fsum_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fsum_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_r4.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -100,7 +100,7 @@ sum_r4 (gfc_array_r4 * const restrict retarray,\n       alloc_size = sizeof (GFC_REAL_4) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -285,7 +285,7 @@ msum_r4 (gfc_array_r4 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -445,7 +445,7 @@ ssum_r4 (gfc_array_r4 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "8634637434dac35ef44da02d62bd6313ab936db9", "filename": "libgfortran/generated/sum_r8.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fsum_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Fsum_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_r8.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -100,7 +100,7 @@ sum_r8 (gfc_array_r8 * const restrict retarray,\n       alloc_size = sizeof (GFC_REAL_8) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n-      retarray->base_addr = internal_malloc_size (alloc_size);\n+      retarray->base_addr = xmalloc (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -285,7 +285,7 @@ msum_r8 (gfc_array_r8 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n \n     }\n   else\n@@ -445,7 +445,7 @@ ssum_r8 (gfc_array_r8 * const restrict retarray,\n \t  return;\n \t}\n       else\n-\tretarray->base_addr = internal_malloc_size (alloc_size);\n+\tretarray->base_addr = xmalloc (alloc_size);\n     }\n   else\n     {"}, {"sha": "9402936f3cff5b6113fd83c9ba8f7014abb8b80f", "filename": "libgfortran/generated/transpose_c10.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Ftranspose_c10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Ftranspose_c10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Ftranspose_c10.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -60,7 +60,7 @@ transpose_c10 (gfc_array_c10 * const restrict ret,\n       GFC_DIMENSION_SET(ret->dim[1], 0, GFC_DESCRIPTOR_EXTENT(source,0) - 1,\n \t\t\tGFC_DESCRIPTOR_EXTENT(source, 1));\n \n-      ret->base_addr = internal_malloc_size (sizeof (GFC_COMPLEX_10) * size0 ((array_t *) ret));\n+      ret->base_addr = xmalloc (sizeof (GFC_COMPLEX_10) * size0 ((array_t *) ret));\n       ret->offset = 0;\n     } else if (unlikely (compile_options.bounds_check))\n     {"}, {"sha": "86e865c71f47ce14d2e4af1f4342f1de583a60fc", "filename": "libgfortran/generated/transpose_c16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Ftranspose_c16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Ftranspose_c16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Ftranspose_c16.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -60,7 +60,7 @@ transpose_c16 (gfc_array_c16 * const restrict ret,\n       GFC_DIMENSION_SET(ret->dim[1], 0, GFC_DESCRIPTOR_EXTENT(source,0) - 1,\n \t\t\tGFC_DESCRIPTOR_EXTENT(source, 1));\n \n-      ret->base_addr = internal_malloc_size (sizeof (GFC_COMPLEX_16) * size0 ((array_t *) ret));\n+      ret->base_addr = xmalloc (sizeof (GFC_COMPLEX_16) * size0 ((array_t *) ret));\n       ret->offset = 0;\n     } else if (unlikely (compile_options.bounds_check))\n     {"}, {"sha": "5819ab1633575877e39f9be4f417d4e879de1d5f", "filename": "libgfortran/generated/transpose_c4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Ftranspose_c4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Ftranspose_c4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Ftranspose_c4.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -60,7 +60,7 @@ transpose_c4 (gfc_array_c4 * const restrict ret,\n       GFC_DIMENSION_SET(ret->dim[1], 0, GFC_DESCRIPTOR_EXTENT(source,0) - 1,\n \t\t\tGFC_DESCRIPTOR_EXTENT(source, 1));\n \n-      ret->base_addr = internal_malloc_size (sizeof (GFC_COMPLEX_4) * size0 ((array_t *) ret));\n+      ret->base_addr = xmalloc (sizeof (GFC_COMPLEX_4) * size0 ((array_t *) ret));\n       ret->offset = 0;\n     } else if (unlikely (compile_options.bounds_check))\n     {"}, {"sha": "171d6500789130de62c08bd8bdd0824c22e8f037", "filename": "libgfortran/generated/transpose_c8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Ftranspose_c8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Ftranspose_c8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Ftranspose_c8.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -60,7 +60,7 @@ transpose_c8 (gfc_array_c8 * const restrict ret,\n       GFC_DIMENSION_SET(ret->dim[1], 0, GFC_DESCRIPTOR_EXTENT(source,0) - 1,\n \t\t\tGFC_DESCRIPTOR_EXTENT(source, 1));\n \n-      ret->base_addr = internal_malloc_size (sizeof (GFC_COMPLEX_8) * size0 ((array_t *) ret));\n+      ret->base_addr = xmalloc (sizeof (GFC_COMPLEX_8) * size0 ((array_t *) ret));\n       ret->offset = 0;\n     } else if (unlikely (compile_options.bounds_check))\n     {"}, {"sha": "22dd5f60c79afe283eb0151ddc2bfda1739d53a5", "filename": "libgfortran/generated/transpose_i16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Ftranspose_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Ftranspose_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Ftranspose_i16.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -60,7 +60,7 @@ transpose_i16 (gfc_array_i16 * const restrict ret,\n       GFC_DIMENSION_SET(ret->dim[1], 0, GFC_DESCRIPTOR_EXTENT(source,0) - 1,\n \t\t\tGFC_DESCRIPTOR_EXTENT(source, 1));\n \n-      ret->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_16) * size0 ((array_t *) ret));\n+      ret->base_addr = xmalloc (sizeof (GFC_INTEGER_16) * size0 ((array_t *) ret));\n       ret->offset = 0;\n     } else if (unlikely (compile_options.bounds_check))\n     {"}, {"sha": "a554a966fd19d04a3f7e4ca439e9d4a4fe105227", "filename": "libgfortran/generated/transpose_i4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Ftranspose_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Ftranspose_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Ftranspose_i4.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -60,7 +60,7 @@ transpose_i4 (gfc_array_i4 * const restrict ret,\n       GFC_DIMENSION_SET(ret->dim[1], 0, GFC_DESCRIPTOR_EXTENT(source,0) - 1,\n \t\t\tGFC_DESCRIPTOR_EXTENT(source, 1));\n \n-      ret->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_4) * size0 ((array_t *) ret));\n+      ret->base_addr = xmalloc (sizeof (GFC_INTEGER_4) * size0 ((array_t *) ret));\n       ret->offset = 0;\n     } else if (unlikely (compile_options.bounds_check))\n     {"}, {"sha": "54606bab53794adbcefcd4826072df3a4e06f016", "filename": "libgfortran/generated/transpose_i8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Ftranspose_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Ftranspose_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Ftranspose_i8.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -60,7 +60,7 @@ transpose_i8 (gfc_array_i8 * const restrict ret,\n       GFC_DIMENSION_SET(ret->dim[1], 0, GFC_DESCRIPTOR_EXTENT(source,0) - 1,\n \t\t\tGFC_DESCRIPTOR_EXTENT(source, 1));\n \n-      ret->base_addr = internal_malloc_size (sizeof (GFC_INTEGER_8) * size0 ((array_t *) ret));\n+      ret->base_addr = xmalloc (sizeof (GFC_INTEGER_8) * size0 ((array_t *) ret));\n       ret->offset = 0;\n     } else if (unlikely (compile_options.bounds_check))\n     {"}, {"sha": "53e0cc359be66357ea731afbc8d0abe593d1aa92", "filename": "libgfortran/generated/transpose_r10.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Ftranspose_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Ftranspose_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Ftranspose_r10.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -60,7 +60,7 @@ transpose_r10 (gfc_array_r10 * const restrict ret,\n       GFC_DIMENSION_SET(ret->dim[1], 0, GFC_DESCRIPTOR_EXTENT(source,0) - 1,\n \t\t\tGFC_DESCRIPTOR_EXTENT(source, 1));\n \n-      ret->base_addr = internal_malloc_size (sizeof (GFC_REAL_10) * size0 ((array_t *) ret));\n+      ret->base_addr = xmalloc (sizeof (GFC_REAL_10) * size0 ((array_t *) ret));\n       ret->offset = 0;\n     } else if (unlikely (compile_options.bounds_check))\n     {"}, {"sha": "7cf22ab778416438272a3fdf7a24bcd483821cde", "filename": "libgfortran/generated/transpose_r16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Ftranspose_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Ftranspose_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Ftranspose_r16.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -60,7 +60,7 @@ transpose_r16 (gfc_array_r16 * const restrict ret,\n       GFC_DIMENSION_SET(ret->dim[1], 0, GFC_DESCRIPTOR_EXTENT(source,0) - 1,\n \t\t\tGFC_DESCRIPTOR_EXTENT(source, 1));\n \n-      ret->base_addr = internal_malloc_size (sizeof (GFC_REAL_16) * size0 ((array_t *) ret));\n+      ret->base_addr = xmalloc (sizeof (GFC_REAL_16) * size0 ((array_t *) ret));\n       ret->offset = 0;\n     } else if (unlikely (compile_options.bounds_check))\n     {"}, {"sha": "b14bad33293e0570dc769f2e7894a11b81903d58", "filename": "libgfortran/generated/transpose_r4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Ftranspose_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Ftranspose_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Ftranspose_r4.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -60,7 +60,7 @@ transpose_r4 (gfc_array_r4 * const restrict ret,\n       GFC_DIMENSION_SET(ret->dim[1], 0, GFC_DESCRIPTOR_EXTENT(source,0) - 1,\n \t\t\tGFC_DESCRIPTOR_EXTENT(source, 1));\n \n-      ret->base_addr = internal_malloc_size (sizeof (GFC_REAL_4) * size0 ((array_t *) ret));\n+      ret->base_addr = xmalloc (sizeof (GFC_REAL_4) * size0 ((array_t *) ret));\n       ret->offset = 0;\n     } else if (unlikely (compile_options.bounds_check))\n     {"}, {"sha": "95bed284fe083da9568179283b0daaa191613c99", "filename": "libgfortran/generated/transpose_r8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Ftranspose_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Ftranspose_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Ftranspose_r8.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -60,7 +60,7 @@ transpose_r8 (gfc_array_r8 * const restrict ret,\n       GFC_DIMENSION_SET(ret->dim[1], 0, GFC_DESCRIPTOR_EXTENT(source,0) - 1,\n \t\t\tGFC_DESCRIPTOR_EXTENT(source, 1));\n \n-      ret->base_addr = internal_malloc_size (sizeof (GFC_REAL_8) * size0 ((array_t *) ret));\n+      ret->base_addr = xmalloc (sizeof (GFC_REAL_8) * size0 ((array_t *) ret));\n       ret->offset = 0;\n     } else if (unlikely (compile_options.bounds_check))\n     {"}, {"sha": "879d3092d55853ecca4ca01991beedd3b5133223", "filename": "libgfortran/generated/unpack_c10.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Funpack_c10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Funpack_c10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Funpack_c10.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -99,7 +99,7 @@ unpack0_c10 (gfc_array_c10 *ret, const gfc_array_c10 *vector,\n \t  rs *= extent[n];\n \t}\n       ret->offset = 0;\n-      ret->base_addr = internal_malloc_size (rs * sizeof (GFC_COMPLEX_10));\n+      ret->base_addr = xmalloc (rs * sizeof (GFC_COMPLEX_10));\n     }\n   else\n     {\n@@ -244,7 +244,7 @@ unpack1_c10 (gfc_array_c10 *ret, const gfc_array_c10 *vector,\n \t  rs *= extent[n];\n \t}\n       ret->offset = 0;\n-      ret->base_addr = internal_malloc_size (rs * sizeof (GFC_COMPLEX_10));\n+      ret->base_addr = xmalloc (rs * sizeof (GFC_COMPLEX_10));\n     }\n   else\n     {"}, {"sha": "6b8eee5eed6301d745af6ad97e846f0e715449e8", "filename": "libgfortran/generated/unpack_c16.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Funpack_c16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Funpack_c16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Funpack_c16.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -99,7 +99,7 @@ unpack0_c16 (gfc_array_c16 *ret, const gfc_array_c16 *vector,\n \t  rs *= extent[n];\n \t}\n       ret->offset = 0;\n-      ret->base_addr = internal_malloc_size (rs * sizeof (GFC_COMPLEX_16));\n+      ret->base_addr = xmalloc (rs * sizeof (GFC_COMPLEX_16));\n     }\n   else\n     {\n@@ -244,7 +244,7 @@ unpack1_c16 (gfc_array_c16 *ret, const gfc_array_c16 *vector,\n \t  rs *= extent[n];\n \t}\n       ret->offset = 0;\n-      ret->base_addr = internal_malloc_size (rs * sizeof (GFC_COMPLEX_16));\n+      ret->base_addr = xmalloc (rs * sizeof (GFC_COMPLEX_16));\n     }\n   else\n     {"}, {"sha": "f40fa959ce77241389bf5df15e5aa990a99b1b1c", "filename": "libgfortran/generated/unpack_c4.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Funpack_c4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Funpack_c4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Funpack_c4.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -99,7 +99,7 @@ unpack0_c4 (gfc_array_c4 *ret, const gfc_array_c4 *vector,\n \t  rs *= extent[n];\n \t}\n       ret->offset = 0;\n-      ret->base_addr = internal_malloc_size (rs * sizeof (GFC_COMPLEX_4));\n+      ret->base_addr = xmalloc (rs * sizeof (GFC_COMPLEX_4));\n     }\n   else\n     {\n@@ -244,7 +244,7 @@ unpack1_c4 (gfc_array_c4 *ret, const gfc_array_c4 *vector,\n \t  rs *= extent[n];\n \t}\n       ret->offset = 0;\n-      ret->base_addr = internal_malloc_size (rs * sizeof (GFC_COMPLEX_4));\n+      ret->base_addr = xmalloc (rs * sizeof (GFC_COMPLEX_4));\n     }\n   else\n     {"}, {"sha": "6b7c5e1f6a69ffe252cbbb02c6923798e0532256", "filename": "libgfortran/generated/unpack_c8.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Funpack_c8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Funpack_c8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Funpack_c8.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -99,7 +99,7 @@ unpack0_c8 (gfc_array_c8 *ret, const gfc_array_c8 *vector,\n \t  rs *= extent[n];\n \t}\n       ret->offset = 0;\n-      ret->base_addr = internal_malloc_size (rs * sizeof (GFC_COMPLEX_8));\n+      ret->base_addr = xmalloc (rs * sizeof (GFC_COMPLEX_8));\n     }\n   else\n     {\n@@ -244,7 +244,7 @@ unpack1_c8 (gfc_array_c8 *ret, const gfc_array_c8 *vector,\n \t  rs *= extent[n];\n \t}\n       ret->offset = 0;\n-      ret->base_addr = internal_malloc_size (rs * sizeof (GFC_COMPLEX_8));\n+      ret->base_addr = xmalloc (rs * sizeof (GFC_COMPLEX_8));\n     }\n   else\n     {"}, {"sha": "0d5ec8ef292f85990a8bc86fb0f0edbdcbd28ec0", "filename": "libgfortran/generated/unpack_i1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Funpack_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Funpack_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Funpack_i1.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -99,7 +99,7 @@ unpack0_i1 (gfc_array_i1 *ret, const gfc_array_i1 *vector,\n \t  rs *= extent[n];\n \t}\n       ret->offset = 0;\n-      ret->base_addr = internal_malloc_size (rs * sizeof (GFC_INTEGER_1));\n+      ret->base_addr = xmalloc (rs * sizeof (GFC_INTEGER_1));\n     }\n   else\n     {\n@@ -244,7 +244,7 @@ unpack1_i1 (gfc_array_i1 *ret, const gfc_array_i1 *vector,\n \t  rs *= extent[n];\n \t}\n       ret->offset = 0;\n-      ret->base_addr = internal_malloc_size (rs * sizeof (GFC_INTEGER_1));\n+      ret->base_addr = xmalloc (rs * sizeof (GFC_INTEGER_1));\n     }\n   else\n     {"}, {"sha": "1e030e66b5cead777377971903e40da551530f54", "filename": "libgfortran/generated/unpack_i16.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Funpack_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Funpack_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Funpack_i16.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -99,7 +99,7 @@ unpack0_i16 (gfc_array_i16 *ret, const gfc_array_i16 *vector,\n \t  rs *= extent[n];\n \t}\n       ret->offset = 0;\n-      ret->base_addr = internal_malloc_size (rs * sizeof (GFC_INTEGER_16));\n+      ret->base_addr = xmalloc (rs * sizeof (GFC_INTEGER_16));\n     }\n   else\n     {\n@@ -244,7 +244,7 @@ unpack1_i16 (gfc_array_i16 *ret, const gfc_array_i16 *vector,\n \t  rs *= extent[n];\n \t}\n       ret->offset = 0;\n-      ret->base_addr = internal_malloc_size (rs * sizeof (GFC_INTEGER_16));\n+      ret->base_addr = xmalloc (rs * sizeof (GFC_INTEGER_16));\n     }\n   else\n     {"}, {"sha": "ae230bf773c545586eb93b6ff3b94cb4d199f3e5", "filename": "libgfortran/generated/unpack_i2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Funpack_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Funpack_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Funpack_i2.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -99,7 +99,7 @@ unpack0_i2 (gfc_array_i2 *ret, const gfc_array_i2 *vector,\n \t  rs *= extent[n];\n \t}\n       ret->offset = 0;\n-      ret->base_addr = internal_malloc_size (rs * sizeof (GFC_INTEGER_2));\n+      ret->base_addr = xmalloc (rs * sizeof (GFC_INTEGER_2));\n     }\n   else\n     {\n@@ -244,7 +244,7 @@ unpack1_i2 (gfc_array_i2 *ret, const gfc_array_i2 *vector,\n \t  rs *= extent[n];\n \t}\n       ret->offset = 0;\n-      ret->base_addr = internal_malloc_size (rs * sizeof (GFC_INTEGER_2));\n+      ret->base_addr = xmalloc (rs * sizeof (GFC_INTEGER_2));\n     }\n   else\n     {"}, {"sha": "88915e5087749a14ce568e99a4c8874ef1692ba9", "filename": "libgfortran/generated/unpack_i4.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Funpack_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Funpack_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Funpack_i4.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -99,7 +99,7 @@ unpack0_i4 (gfc_array_i4 *ret, const gfc_array_i4 *vector,\n \t  rs *= extent[n];\n \t}\n       ret->offset = 0;\n-      ret->base_addr = internal_malloc_size (rs * sizeof (GFC_INTEGER_4));\n+      ret->base_addr = xmalloc (rs * sizeof (GFC_INTEGER_4));\n     }\n   else\n     {\n@@ -244,7 +244,7 @@ unpack1_i4 (gfc_array_i4 *ret, const gfc_array_i4 *vector,\n \t  rs *= extent[n];\n \t}\n       ret->offset = 0;\n-      ret->base_addr = internal_malloc_size (rs * sizeof (GFC_INTEGER_4));\n+      ret->base_addr = xmalloc (rs * sizeof (GFC_INTEGER_4));\n     }\n   else\n     {"}, {"sha": "793cdceb71bc5bc2f3c5e6ab7468f59ec55f0015", "filename": "libgfortran/generated/unpack_i8.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Funpack_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Funpack_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Funpack_i8.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -99,7 +99,7 @@ unpack0_i8 (gfc_array_i8 *ret, const gfc_array_i8 *vector,\n \t  rs *= extent[n];\n \t}\n       ret->offset = 0;\n-      ret->base_addr = internal_malloc_size (rs * sizeof (GFC_INTEGER_8));\n+      ret->base_addr = xmalloc (rs * sizeof (GFC_INTEGER_8));\n     }\n   else\n     {\n@@ -244,7 +244,7 @@ unpack1_i8 (gfc_array_i8 *ret, const gfc_array_i8 *vector,\n \t  rs *= extent[n];\n \t}\n       ret->offset = 0;\n-      ret->base_addr = internal_malloc_size (rs * sizeof (GFC_INTEGER_8));\n+      ret->base_addr = xmalloc (rs * sizeof (GFC_INTEGER_8));\n     }\n   else\n     {"}, {"sha": "3ba1e2a35498b32c2cdcc01cb9c6eac674e35142", "filename": "libgfortran/generated/unpack_r10.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Funpack_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Funpack_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Funpack_r10.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -99,7 +99,7 @@ unpack0_r10 (gfc_array_r10 *ret, const gfc_array_r10 *vector,\n \t  rs *= extent[n];\n \t}\n       ret->offset = 0;\n-      ret->base_addr = internal_malloc_size (rs * sizeof (GFC_REAL_10));\n+      ret->base_addr = xmalloc (rs * sizeof (GFC_REAL_10));\n     }\n   else\n     {\n@@ -244,7 +244,7 @@ unpack1_r10 (gfc_array_r10 *ret, const gfc_array_r10 *vector,\n \t  rs *= extent[n];\n \t}\n       ret->offset = 0;\n-      ret->base_addr = internal_malloc_size (rs * sizeof (GFC_REAL_10));\n+      ret->base_addr = xmalloc (rs * sizeof (GFC_REAL_10));\n     }\n   else\n     {"}, {"sha": "51d6b64d260a22873bf714e01b4a1c7c1aa26b15", "filename": "libgfortran/generated/unpack_r16.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Funpack_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Funpack_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Funpack_r16.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -99,7 +99,7 @@ unpack0_r16 (gfc_array_r16 *ret, const gfc_array_r16 *vector,\n \t  rs *= extent[n];\n \t}\n       ret->offset = 0;\n-      ret->base_addr = internal_malloc_size (rs * sizeof (GFC_REAL_16));\n+      ret->base_addr = xmalloc (rs * sizeof (GFC_REAL_16));\n     }\n   else\n     {\n@@ -244,7 +244,7 @@ unpack1_r16 (gfc_array_r16 *ret, const gfc_array_r16 *vector,\n \t  rs *= extent[n];\n \t}\n       ret->offset = 0;\n-      ret->base_addr = internal_malloc_size (rs * sizeof (GFC_REAL_16));\n+      ret->base_addr = xmalloc (rs * sizeof (GFC_REAL_16));\n     }\n   else\n     {"}, {"sha": "a187d51dcd89ee3691be55c724882ac0908f8583", "filename": "libgfortran/generated/unpack_r4.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Funpack_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Funpack_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Funpack_r4.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -99,7 +99,7 @@ unpack0_r4 (gfc_array_r4 *ret, const gfc_array_r4 *vector,\n \t  rs *= extent[n];\n \t}\n       ret->offset = 0;\n-      ret->base_addr = internal_malloc_size (rs * sizeof (GFC_REAL_4));\n+      ret->base_addr = xmalloc (rs * sizeof (GFC_REAL_4));\n     }\n   else\n     {\n@@ -244,7 +244,7 @@ unpack1_r4 (gfc_array_r4 *ret, const gfc_array_r4 *vector,\n \t  rs *= extent[n];\n \t}\n       ret->offset = 0;\n-      ret->base_addr = internal_malloc_size (rs * sizeof (GFC_REAL_4));\n+      ret->base_addr = xmalloc (rs * sizeof (GFC_REAL_4));\n     }\n   else\n     {"}, {"sha": "c6ad80a1fa1e311e1cca7811db14a66b31d7f3b5", "filename": "libgfortran/generated/unpack_r8.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Funpack_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a0fd3d33a579a85ddb18636da888eea727006b5/libgfortran%2Fgenerated%2Funpack_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Funpack_r8.c?ref=1a0fd3d33a579a85ddb18636da888eea727006b5", "patch": "@@ -99,7 +99,7 @@ unpack0_r8 (gfc_array_r8 *ret, const gfc_array_r8 *vector,\n \t  rs *= extent[n];\n \t}\n       ret->offset = 0;\n-      ret->base_addr = internal_malloc_size (rs * sizeof (GFC_REAL_8));\n+      ret->base_addr = xmalloc (rs * sizeof (GFC_REAL_8));\n     }\n   else\n     {\n@@ -244,7 +244,7 @@ unpack1_r8 (gfc_array_r8 *ret, const gfc_array_r8 *vector,\n \t  rs *= extent[n];\n \t}\n       ret->offset = 0;\n-      ret->base_addr = internal_malloc_size (rs * sizeof (GFC_REAL_8));\n+      ret->base_addr = xmalloc (rs * sizeof (GFC_REAL_8));\n     }\n   else\n     {"}]}