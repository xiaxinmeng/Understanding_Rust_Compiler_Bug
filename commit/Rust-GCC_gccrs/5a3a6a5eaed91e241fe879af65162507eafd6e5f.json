{"sha": "5a3a6a5eaed91e241fe879af65162507eafd6e5f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWEzYTZhNWVhZWQ5MWUyNDFmZTg3OWFmNjUxNjI1MDdlYWZkNmU1Zg==", "commit": {"author": {"name": "Kelvin Nilsen", "email": "kelvin@gcc.gnu.org", "date": "2016-06-30T15:59:44Z"}, "committer": {"name": "Kelvin Nilsen", "email": "kelvin@gcc.gnu.org", "date": "2016-06-30T15:59:44Z"}, "message": "altivec.md (darn_32): Change the condition to TARGET_P9_MISC instead of TARGET_MODULO.\n\ngcc/ChangeLog:\n\n2016-06-30  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n\n\t* config/rs6000/altivec.md (darn_32): Change the condition to\n\tTARGET_P9_MISC instead of TARGET_MODULO.\n\t(darn_raw): Replace TARGET_MODULO with TARGET_P9_MISC in the\n\tcondition expression.\n\t(darn): Replace TARGET_MODULO with TARGET_P9_MISC in the\n\tcondition expression.\n\t* config/rs6000/dfp.md (UNSPEC_DTSTSFI): New unspec constant.\n\t(DFP_TEST): New code iterator.\n\t(dfptstsfi_<code>_mode>): New define_expand.\n\t(*dfp_sgnfcnc_<mode>): New define_insn.\n\t* config/rs6000/rs6000-builtin.def (BU_P9_MISC_0): Move this macro\n\tdefinition next to BU_P9_MISC_1 definition and change the MASK\n\tvalue to RS6000_BTM_P9_MISC.\n\t(BU_P9_MISC_1): Change the MASK value to RS6000_BTM_P9_MISC.\n\t(BU_P9_64BIT_MISC_0): Likewise.\n\t(BU_P9_DFP_MISC_0): New macro definition.\n\t(BU_P9_DFP_MISC_1): New macro definition.\n\t(BU_P9_DFP_MISC_2): New macro definition.\n\t(BU_P9_DFP_OVERLOAD_1): New macro definition.\n\t(BU_P9_DFP_OVERLOAD_2): New macro definition.\n\t(BU_P9_DFP_OVERLOAD_3): New macro definition.\n\t(TSTSFI_LT_DD): New BU_P9_DFP_MISC_2.\n\t(TSTSFI_LT_TD): Likewise.\n\t(TSTSFI_EQ_DD): Likewise.\n\t(TSTSFI_EQ_TD): Likewise.\n\t(TSTSFI_GT_DD): Likewise.\n\t(TSTSFI_GT_TD): Likewise.\n\t(TSTSFI_OV_DD): Likewise.\n\t(TSTSFI_OV_TD): Likewise.\n\t(TSTSFI_LT): New BU_P9_DFP_OVERLOAD_2.\n\t(TSTSFI_LT_DD): Likewise.\n\t(TSTSFI_LT_TD): Likewise.\n\t(TSTSFI_EQ): Likewise.\n\t(TSTSFI_EQ_DD): Likewise.\n\t(TSTSFI_EQ_TD): Likewise.\n\t(TSTSFI_GT): Likewise.\n\t(TSTSFI_GT_DD): Likewise.\n\t(TSTSFI_GT_TD): Likewise.\n\t(TSTSFI_OV): Likewise.\n\t(TSTSFI_OV_DD): Likewise.\n\t(TSTSFI_OV_TD): Likewise.\n\t* config/rs6000/rs6000-c.c (altivec_overloaded_builtins): Add\n\toverloaded test significance functions.\n\t* config/rs6000/rs6000-cpus.def (ISA_3_0_MASKS_SERVER): Add\n\tOPTION_MASK_P9_MISC into the representation of this mask.\n\t(POWERPC_MASKS): Add OPTION_MASK_P9_MISC into the representation\n\tof this mask.\n\t* config/rs6000/rs6000.c (rs6000_builtin_mask_calculate): Set the\n\tRS6000_BTM_P9_MISC flag in the return value if TARGET_P9_MISC is\n\tnon-zero.\n\t(rs6000_expand_binop_builtin): Enforce that argument 0 of the exp\n\targument is a 6-bit unsigned literal value if the icode argument\n\trepresents a DFP test significance built-in call.\n\t(rs6000_invalid_builtin): Add support for the RS6000_BTM_P9_MISC\n\tflag used independently and in combination with the\n\tRS6000_BTM_64BIT flag.\n\t(rs6000_opt_masks): Add entry for power9-misc command-line option.\n\t(rs6000_builtin_mask_names): Add entry for power9-misc\n\tcommand-line option.\n\t* config/rs6000/rs6000.h: Redefine TARGET_P9_MISC as 0 if\n\tHAVE_AS_POWER9 is not a defined macro.  Define MASK_P9_MISC and\n\tRS6000_BTM_P9_MISC macros.\n\t* config/rs6000/rs6000.opt: Add support for the -mpower9-misc\n\toption and change the description of the -mpower9-vector option to\n\tenable only vector instructions, removing its erroneously claimed\n\tsupport for scalar instructions.\n\t* doc/extend.texi (PowerPC AltiVec Built-in Functions): Document\n\tthe ISA 3.0 digital floating point test significance built-in\n\tfunctions.\n\ngcc/testsuite/ChangeLog:\n\n2016-06-30  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n\n\t* gcc.target/powerpc/dfp/dfp.exp: New dejagnu test script.\n\t* gcc.target/powerpc/dfp/dtstsfi-0.c: New test.\n\t* gcc.target/powerpc/dfp/dtstsfi-1.c: New test.\n\t* gcc.target/powerpc/dfp/dtstsfi-10.c: New test.\n\t* gcc.target/powerpc/dfp/dtstsfi-11.c: New test.\n\t* gcc.target/powerpc/dfp/dtstsfi-12.c: New test.\n\t* gcc.target/powerpc/dfp/dtstsfi-13.c: New test.\n\t* gcc.target/powerpc/dfp/dtstsfi-14.c: New test.\n\t* gcc.target/powerpc/dfp/dtstsfi-15.c: New test.\n\t* gcc.target/powerpc/dfp/dtstsfi-16.c: New test.\n\t* gcc.target/powerpc/dfp/dtstsfi-17.c: New test.\n\t* gcc.target/powerpc/dfp/dtstsfi-18.c: New test.\n\t* gcc.target/powerpc/dfp/dtstsfi-19.c: New test.\n\t* gcc.target/powerpc/dfp/dtstsfi-2.c: New test.\n\t* gcc.target/powerpc/dfp/dtstsfi-20.c: New test.\n\t* gcc.target/powerpc/dfp/dtstsfi-21.c: New test.\n\t* gcc.target/powerpc/dfp/dtstsfi-22.c: New test.\n\t* gcc.target/powerpc/dfp/dtstsfi-23.c: New test.\n\t* gcc.target/powerpc/dfp/dtstsfi-24.c: New test.\n\t* gcc.target/powerpc/dfp/dtstsfi-25.c: New test.\n\t* gcc.target/powerpc/dfp/dtstsfi-26.c: New test.\n\t* gcc.target/powerpc/dfp/dtstsfi-27.c: New test.\n\t* gcc.target/powerpc/dfp/dtstsfi-28.c: New test.\n\t* gcc.target/powerpc/dfp/dtstsfi-29.c: New test.\n\t* gcc.target/powerpc/dfp/dtstsfi-3.c: New test.\n\t* gcc.target/powerpc/dfp/dtstsfi-30.c: New test.\n\t* gcc.target/powerpc/dfp/dtstsfi-31.c: New test.\n\t* gcc.target/powerpc/dfp/dtstsfi-32.c: New test.\n\t* gcc.target/powerpc/dfp/dtstsfi-33.c: New test.\n\t* gcc.target/powerpc/dfp/dtstsfi-34.c: New test.\n\t* gcc.target/powerpc/dfp/dtstsfi-35.c: New test.\n\t* gcc.target/powerpc/dfp/dtstsfi-36.c: New test.\n\t* gcc.target/powerpc/dfp/dtstsfi-37.c: New test.\n\t* gcc.target/powerpc/dfp/dtstsfi-38.c: New test.\n\t* gcc.target/powerpc/dfp/dtstsfi-39.c: New test.\n\t* gcc.target/powerpc/dfp/dtstsfi-4.c: New test.\n\t* gcc.target/powerpc/dfp/dtstsfi-40.c: New test.\n\t* gcc.target/powerpc/dfp/dtstsfi-41.c: New test.\n\t* gcc.target/powerpc/dfp/dtstsfi-42.c: New test.\n\t* gcc.target/powerpc/dfp/dtstsfi-43.c: New test.\n\t* gcc.target/powerpc/dfp/dtstsfi-44.c: New test.\n\t* gcc.target/powerpc/dfp/dtstsfi-45.c: New test.\n\t* gcc.target/powerpc/dfp/dtstsfi-46.c: New test.\n\t* gcc.target/powerpc/dfp/dtstsfi-47.c: New test.\n\t* gcc.target/powerpc/dfp/dtstsfi-48.c: New test.\n\t* gcc.target/powerpc/dfp/dtstsfi-49.c: New test.\n\t* gcc.target/powerpc/dfp/dtstsfi-5.c: New test.\n\t* gcc.target/powerpc/dfp/dtstsfi-50.c: New test.\n\t* gcc.target/powerpc/dfp/dtstsfi-51.c: New test.\n\t* gcc.target/powerpc/dfp/dtstsfi-52.c: New test.\n\t* gcc.target/powerpc/dfp/dtstsfi-53.c: New test.\n\t* gcc.target/powerpc/dfp/dtstsfi-54.c: New test.\n\t* gcc.target/powerpc/dfp/dtstsfi-55.c: New test.\n\t* gcc.target/powerpc/dfp/dtstsfi-56.c: New test.\n\t* gcc.target/powerpc/dfp/dtstsfi-57.c: New test.\n\t* gcc.target/powerpc/dfp/dtstsfi-58.c: New test.\n\t* gcc.target/powerpc/dfp/dtstsfi-59.c: New test.\n\t* gcc.target/powerpc/dfp/dtstsfi-6.c: New test.\n\t* gcc.target/powerpc/dfp/dtstsfi-60.c: New test.\n\t* gcc.target/powerpc/dfp/dtstsfi-61.c: New test.\n\t* gcc.target/powerpc/dfp/dtstsfi-62.c: New test.\n\t* gcc.target/powerpc/dfp/dtstsfi-63.c: New test.\n\t* gcc.target/powerpc/dfp/dtstsfi-64.c: New test.\n\t* gcc.target/powerpc/dfp/dtstsfi-65.c: New test.\n\t* gcc.target/powerpc/dfp/dtstsfi-66.c: New test.\n\t* gcc.target/powerpc/dfp/dtstsfi-67.c: New test.\n\t* gcc.target/powerpc/dfp/dtstsfi-68.c: New test.\n\t* gcc.target/powerpc/dfp/dtstsfi-69.c: New test.\n\t* gcc.target/powerpc/dfp/dtstsfi-7.c: New test.\n\t* gcc.target/powerpc/dfp/dtstsfi-70.c: New test.\n\t* gcc.target/powerpc/dfp/dtstsfi-71.c: New test.\n\t* gcc.target/powerpc/dfp/dtstsfi-72.c: New test.\n\t* gcc.target/powerpc/dfp/dtstsfi-73.c: New test.\n\t* gcc.target/powerpc/dfp/dtstsfi-74.c: New test.\n\t* gcc.target/powerpc/dfp/dtstsfi-75.c: New test.\n\t* gcc.target/powerpc/dfp/dtstsfi-76.c: New test.\n\t* gcc.target/powerpc/dfp/dtstsfi-77.c: New test.\n\t* gcc.target/powerpc/dfp/dtstsfi-78.c: New test.\n\t* gcc.target/powerpc/dfp/dtstsfi-79.c: New test.\n\t* gcc.target/powerpc/dfp/dtstsfi-8.c: New test.\n\t* gcc.target/powerpc/dfp/dtstsfi-9.c: New test.\n\nFrom-SVN: r237885", "tree": {"sha": "00439087345d587eb7b4170918beeb30c4190351", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/00439087345d587eb7b4170918beeb30c4190351"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a3a6a5eaed91e241fe879af65162507eafd6e5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a3a6a5eaed91e241fe879af65162507eafd6e5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a3a6a5eaed91e241fe879af65162507eafd6e5f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a3a6a5eaed91e241fe879af65162507eafd6e5f/comments", "author": null, "committer": null, "parents": [{"sha": "0bc2433858abb64daa41ed85994668d66cbecd71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bc2433858abb64daa41ed85994668d66cbecd71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bc2433858abb64daa41ed85994668d66cbecd71"}], "stats": {"total": 1795, "additions": 1782, "deletions": 13}, "files": [{"sha": "2b27fabe42242f03d5c1323bdbe071a3c80b85ea", "filename": "gcc/ChangeLog", "status": "modified", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -1,3 +1,75 @@\n+2016-06-30  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n+\n+\t* config/rs6000/altivec.md (darn_32): Change the condition to\n+\tTARGET_P9_MISC instead of TARGET_MODULO.\n+\t(darn_raw): Replace TARGET_MODULO with TARGET_P9_MISC in the\n+\tcondition expression.\n+\t(darn): Replace TARGET_MODULO with TARGET_P9_MISC in the\n+\tcondition expression.\n+\t* config/rs6000/dfp.md (UNSPEC_DTSTSFI): New unspec constant.\n+\t(DFP_TEST): New code iterator.\n+\t(dfptstsfi_<code>_mode>): New define_expand.\n+\t(*dfp_sgnfcnc_<mode>): New define_insn.\n+\t* config/rs6000/rs6000-builtin.def (BU_P9_MISC_0): Move this macro\n+\tdefinition next to BU_P9_MISC_1 definition and change the MASK\n+\tvalue to RS6000_BTM_P9_MISC.\n+\t(BU_P9_MISC_1): Change the MASK value to RS6000_BTM_P9_MISC.\n+\t(BU_P9_64BIT_MISC_0): Likewise.\n+\t(BU_P9_DFP_MISC_0): New macro definition.\n+\t(BU_P9_DFP_MISC_1): New macro definition.\n+\t(BU_P9_DFP_MISC_2): New macro definition.\n+\t(BU_P9_DFP_OVERLOAD_1): New macro definition.\n+\t(BU_P9_DFP_OVERLOAD_2): New macro definition.\n+\t(BU_P9_DFP_OVERLOAD_3): New macro definition.\n+\t(TSTSFI_LT_DD): New BU_P9_DFP_MISC_2.\n+\t(TSTSFI_LT_TD): Likewise.\n+\t(TSTSFI_EQ_DD): Likewise.\n+\t(TSTSFI_EQ_TD): Likewise.\n+\t(TSTSFI_GT_DD): Likewise.\n+\t(TSTSFI_GT_TD): Likewise.\n+\t(TSTSFI_OV_DD): Likewise.\n+\t(TSTSFI_OV_TD): Likewise.\n+\t(TSTSFI_LT): New BU_P9_DFP_OVERLOAD_2.\n+\t(TSTSFI_LT_DD): Likewise.\n+\t(TSTSFI_LT_TD): Likewise.\n+\t(TSTSFI_EQ): Likewise.\n+\t(TSTSFI_EQ_DD): Likewise.\n+\t(TSTSFI_EQ_TD): Likewise.\n+\t(TSTSFI_GT): Likewise.\n+\t(TSTSFI_GT_DD): Likewise.\n+\t(TSTSFI_GT_TD): Likewise.\n+\t(TSTSFI_OV): Likewise.\n+\t(TSTSFI_OV_DD): Likewise.\n+\t(TSTSFI_OV_TD): Likewise.\n+\t* config/rs6000/rs6000-c.c (altivec_overloaded_builtins): Add\n+\toverloaded test significance functions.\n+\t* config/rs6000/rs6000-cpus.def (ISA_3_0_MASKS_SERVER): Add\n+\tOPTION_MASK_P9_MISC into the representation of this mask.\n+\t(POWERPC_MASKS): Add OPTION_MASK_P9_MISC into the representation\n+\tof this mask.\n+\t* config/rs6000/rs6000.c (rs6000_builtin_mask_calculate): Set the\n+\tRS6000_BTM_P9_MISC flag in the return value if TARGET_P9_MISC is\n+\tnon-zero.\n+\t(rs6000_expand_binop_builtin): Enforce that argument 0 of the exp\n+\targument is a 6-bit unsigned literal value if the icode argument\n+\trepresents a DFP test significance built-in call.\n+\t(rs6000_invalid_builtin): Add support for the RS6000_BTM_P9_MISC\n+\tflag used independently and in combination with the\n+\tRS6000_BTM_64BIT flag.\n+\t(rs6000_opt_masks): Add entry for power9-misc command-line option.\n+\t(rs6000_builtin_mask_names): Add entry for power9-misc\n+\tcommand-line option.\n+\t* config/rs6000/rs6000.h: Redefine TARGET_P9_MISC as 0 if\n+\tHAVE_AS_POWER9 is not a defined macro.  Define MASK_P9_MISC and\n+\tRS6000_BTM_P9_MISC macros.\n+\t* config/rs6000/rs6000.opt: Add support for the -mpower9-misc\n+\toption and change the description of the -mpower9-vector option to\n+\tenable only vector instructions, removing its erroneously claimed\n+\tsupport for scalar instructions.\n+\t* doc/extend.texi (PowerPC AltiVec Built-in Functions): Document\n+\tthe ISA 3.0 digital floating point test significance built-in\n+\tfunctions.\n+\n 2016-06-30  Wilco Dijkstra  <wdijkstr@arm.com>\n \n \t* config/aarch64/aarch64.c (cortexa35_tunings):"}, {"sha": "b45b86f4e7b21ac8efbb154f5efdb3a9ac2a20e1", "filename": "gcc/config/rs6000/altivec.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Fconfig%2Frs6000%2Faltivec.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Fconfig%2Frs6000%2Faltivec.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.md?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -3680,21 +3680,21 @@\n (define_insn \"darn_32\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n         (unspec:SI [(const_int 0)] UNSPEC_DARN_32))]\n-  \"TARGET_MODULO\"\n+  \"TARGET_P9_MISC\"\n   \"darn %0,0\"\n   [(set_attr \"type\" \"integer\")])\n \n (define_insn \"darn_raw\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n         (unspec:DI [(const_int 0)] UNSPEC_DARN_RAW))]\n-  \"TARGET_MODULO && TARGET_64BIT\"\n+  \"TARGET_P9_MISC && TARGET_64BIT\"\n   \"darn %0,2\"\n   [(set_attr \"type\" \"integer\")])\n \n (define_insn \"darn\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n         (unspec:DI [(const_int 0)] UNSPEC_DARN))]\n-  \"TARGET_MODULO && TARGET_64BIT\"\n+  \"TARGET_P9_MISC && TARGET_64BIT\"\n   \"darn %0,1\"\n   [(set_attr \"type\" \"integer\")])\n "}, {"sha": "e52a011e00899eda62186d156aaae09b1257fb39", "filename": "gcc/config/rs6000/dfp.md", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Fconfig%2Frs6000%2Fdfp.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Fconfig%2Frs6000%2Fdfp.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdfp.md?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -319,8 +319,11 @@\n    UNSPEC_DXEX\n    UNSPEC_DIEX\n    UNSPEC_DSCLI\n+   UNSPEC_DTSTSFI\n    UNSPEC_DSCRI])\n \n+(define_code_iterator DFP_TEST [eq lt gt unordered])\n+\n (define_mode_iterator D64_D128 [DD TD])\n \n (define_mode_attr dfp_suffix [(DD \"\")\n@@ -361,6 +364,42 @@\n   \"diex<dfp_suffix> %0,%1,%2\"\n   [(set_attr \"type\" \"dfp\")])\n \n+(define_expand \"dfptstsfi_<code>_<mode>\"\n+  [(set (match_dup 3)\n+\t(compare:CCFP\n+         (unspec:D64_D128\n+\t  [(match_operand:SI 1 \"const_int_operand\" \"n\")\n+\t   (match_operand:D64_D128 2 \"gpc_reg_operand\" \"d\")]\n+\t  UNSPEC_DTSTSFI)\n+\t (match_dup 4)))\n+   (set (match_operand:SI 0 \"register_operand\" \"\")\n+   \t(DFP_TEST:SI (match_dup 3)\n+\t\t     (const_int 0)))\n+  ]\n+  \"TARGET_P9_MISC\"\n+{\n+  operands[3] = gen_reg_rtx (CCFPmode);\n+  operands[4] = const0_rtx;\n+})\n+\n+(define_insn \"*dfp_sgnfcnc_<mode>\"\n+  [(set (match_operand:CCFP 0 \"\" \"=y\")\n+        (compare:CCFP\n+\t (unspec:D64_D128 [(match_operand:SI 1 \"const_int_operand\" \"n\")\n+\t \t           (match_operand:D64_D128 2 \"gpc_reg_operand\" \"d\")]\n+          UNSPEC_DTSTSFI)\n+\t (match_operand:SI 3 \"zero_constant\" \"j\")))]\n+  \"TARGET_P9_MISC\"\n+{\n+  /* If immediate operand is greater than 63, it will behave as if\n+     the value had been 63.  The code generator does not support\n+     immediate operand values greater than 63.  */\n+  if (!(IN_RANGE (INTVAL (operands[1]), 0, 63)))\n+    operands[1] = GEN_INT (63);\n+  return \"dtstsfi<dfp_suffix> %0,%1,%2\";\n+}\n+  [(set_attr \"type\" \"fp\")])\n+\n (define_insn \"dfp_dscli_<mode>\"\n   [(set (match_operand:D64_D128 0 \"gpc_reg_operand\" \"=d\")\n \t(unspec:D64_D128 [(match_operand:D64_D128 1 \"gpc_reg_operand\" \"d\")"}, {"sha": "fef3fd4b49661ef522222c2847c4d59c0cbcfa29", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 87, "deletions": 7, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -672,10 +672,18 @@\n /* Miscellaneous builtins for instructions added in ISA 3.0.  These\n    instructions don't require either the DFP or VSX options, just the basic\n    ISA 3.0 enablement since they operate on general purpose registers.  */\n+#define BU_P9_MISC_0(ENUM, NAME, ATTR, ICODE)                      \\\n+  RS6000_BUILTIN_0 (MISC_BUILTIN_ ## ENUM,\t\t/* ENUM */\t\\\n+\t\t    \"__builtin_\" NAME,\t\t\t/* NAME */\t\\\n+\t\t    RS6000_BTM_P9_MISC,\t\t\t/* MASK */\t\\\n+\t\t    (RS6000_BTC_ ## ATTR\t\t/* ATTR */\t\\\n+\t\t     | RS6000_BTC_SPECIAL),\t\t\t\t\\\n+\t\t    CODE_FOR_ ## ICODE)\t\t\t/* ICODE */\n+\n #define BU_P9_MISC_1(ENUM, NAME, ATTR, ICODE)\t\t\t\t\\\n   RS6000_BUILTIN_1 (MISC_BUILTIN_ ## ENUM,\t\t/* ENUM */\t\\\n \t\t    \"__builtin_\" NAME,\t\t\t/* NAME */\t\\\n-\t\t    RS6000_BTM_MODULO,\t\t\t/* MASK */\t\\\n+\t\t    RS6000_BTM_P9_MISC,\t\t\t/* MASK */\t\\\n \t\t    (RS6000_BTC_ ## ATTR\t\t/* ATTR */\t\\\n \t\t     | RS6000_BTC_UNARY),\t\t\t\t\\\n \t\t    CODE_FOR_ ## ICODE)\t\t\t/* ICODE */\n@@ -687,23 +695,65 @@\n #define BU_P9_64BIT_MISC_0(ENUM, NAME, ATTR, ICODE)\t\t\t\\\n   RS6000_BUILTIN_0 (MISC_BUILTIN_ ## ENUM,\t\t/* ENUM */\t\\\n \t\t    \"__builtin_\" NAME,\t\t\t/* NAME */\t\\\n-\t\t    RS6000_BTM_MODULO                                   \\\n+\t\t    RS6000_BTM_P9_MISC\t\t\t\t\t\\\n                      | RS6000_BTM_64BIT,\t\t/* MASK */\t\\\n \t\t    (RS6000_BTC_ ## ATTR\t\t/* ATTR */\t\\\n \t\t     | RS6000_BTC_SPECIAL),\t\t\t\t\\\n \t\t    CODE_FOR_ ## ICODE)\t\t\t/* ICODE */\n \n-/* Miscellaneous builtins for instructions added in ISA 3.0.  These\n-   instructions don't require either the DFP or VSX options, just the basic\n-   ISA 3.0 enablement since they operate on general purpose registers.  */\n-#define BU_P9_MISC_0(ENUM, NAME, ATTR, ICODE)                      \\\n+/* Miscellaneous builtins for decimal floating point instructions\n+   added in ISA 3.0.  These instructions don't require the VSX\n+   options, just the basic ISA 3.0 enablement since they operate on\n+   general purpose registers.  */\n+#define BU_P9_DFP_MISC_0(ENUM, NAME, ATTR, ICODE)\t\t\t\\\n   RS6000_BUILTIN_0 (MISC_BUILTIN_ ## ENUM,\t\t/* ENUM */\t\\\n \t\t    \"__builtin_\" NAME,\t\t\t/* NAME */\t\\\n-\t\t    RS6000_BTM_MODULO,\t\t\t/* MASK */\t\\\n+\t\t    RS6000_BTM_P9_MISC,\t\t\t/* MASK */\t\\\n \t\t    (RS6000_BTC_ ## ATTR\t\t/* ATTR */\t\\\n \t\t     | RS6000_BTC_SPECIAL),\t\t\t\t\\\n \t\t    CODE_FOR_ ## ICODE)\t\t\t/* ICODE */\n \n+#define BU_P9_DFP_MISC_1(ENUM, NAME, ATTR, ICODE)\t\t\t\\\n+  RS6000_BUILTIN_1 (MISC_BUILTIN_ ## ENUM,\t\t/* ENUM */\t\\\n+\t\t    \"__builtin_\" NAME,\t\t\t/* NAME */\t\\\n+\t\t    RS6000_BTM_P9_MISC,\t\t\t/* MASK */\t\\\n+\t\t    (RS6000_BTC_ ## ATTR\t\t/* ATTR */\t\\\n+\t\t     | RS6000_BTC_SPECIAL),\t\t\t\t\\\n+\t\t    CODE_FOR_ ## ICODE)\t\t\t/* ICODE */\n+\n+#define BU_P9_DFP_MISC_2(ENUM, NAME, ATTR, ICODE)\t\t\t\\\n+  RS6000_BUILTIN_2 (MISC_BUILTIN_ ## ENUM,\t\t/* ENUM */\t\\\n+\t\t    \"__builtin_\" NAME,\t\t\t/* NAME */\t\\\n+\t\t    RS6000_BTM_P9_MISC,\t\t\t/* MASK */\t\\\n+\t\t    (RS6000_BTC_ ## ATTR\t\t/* ATTR */\t\\\n+\t\t     | RS6000_BTC_SPECIAL),\t\t\t\t\\\n+\t\t    CODE_FOR_ ## ICODE)\t\t\t/* ICODE */\n+\n+/* Decimal floating point overloaded functions added in ISA 3.0 */\n+#define BU_P9_DFP_OVERLOAD_1(ENUM, NAME)\t\t\t\t\\\n+  RS6000_BUILTIN_1 (P9_BUILTIN_DFP_ ## ENUM,\t\t/* ENUM */\t\\\n+\t\t    \"__builtin_dfp_\" NAME,\t\t/* NAME */\t\\\n+\t\t    RS6000_BTM_P9_MISC,\t\t\t/* MASK */\t\\\n+\t\t    (RS6000_BTC_OVERLOADED\t\t/* ATTR */\t\\\n+\t\t     | RS6000_BTC_UNARY),\t\t\t\t\\\n+\t\t    CODE_FOR_nothing)\t\t\t/* ICODE */\n+\n+#define BU_P9_DFP_OVERLOAD_2(ENUM, NAME)\t\t\t\t\\\n+  RS6000_BUILTIN_2 (P9_BUILTIN_DFP_ ## ENUM,\t\t/* ENUM */\t\\\n+\t\t    \"__builtin_dfp_\" NAME,\t\t/* NAME */\t\\\n+\t\t    RS6000_BTM_P9_MISC,\t\t\t/* MASK */\t\\\n+\t\t    (RS6000_BTC_OVERLOADED\t\t/* ATTR */\t\\\n+\t\t     | RS6000_BTC_BINARY),\t\t\t\t\\\n+\t\t    CODE_FOR_nothing)\t\t\t/* ICODE */\n+\n+#define BU_P9_DFP_OVERLOAD_3(ENUM, NAME)\t\t\t\t\\\n+  RS6000_BUILTIN_3 (P9_BUILTIN_DFP_ ## ENUM,\t\t/* ENUM */\t\\\n+\t\t    \"__builtin_dfp_\" NAME,\t\t/* NAME */\t\\\n+\t\t    RS6000_BTM_P9_MISC,\t\t\t/* MASK */\t\\\n+\t\t    (RS6000_BTC_OVERLOADED\t\t/* ATTR */\t\\\n+\t\t     | RS6000_BTC_TERNARY),\t\t\t\t\\\n+\t\t    CODE_FOR_nothing)\t\t\t/* ICODE */\n+\n /* ISA 3.0 (power9) vector convenience macros.  */\n /* For the instructions that are encoded as altivec instructions use\n    __builtin_altivec_ as the builtin name.  */\n@@ -1810,6 +1860,36 @@ BU_LDBL128_2 (UNPACK_TF,\t\"unpack_longdouble\",\tCONST,\tunpacktf)\n BU_P7_MISC_2 (PACK_V1TI,\t\"pack_vector_int128\",\tCONST,\tpackv1ti)\n BU_P7_MISC_2 (UNPACK_V1TI,\t\"unpack_vector_int128\",\tCONST,\tunpackv1ti)\n \n+/* 2 argument DFP (Decimal Floating Point) functions added in ISA 3.0.  */\n+BU_P9_DFP_MISC_2 (TSTSFI_LT_DD, \"dtstsfi_lt_dd\", CONST, dfptstsfi_lt_dd)\n+BU_P9_DFP_MISC_2 (TSTSFI_LT_TD, \"dtstsfi_lt_td\", CONST, dfptstsfi_lt_td)\n+\n+BU_P9_DFP_MISC_2 (TSTSFI_EQ_DD, \"dtstsfi_eq_dd\", CONST, dfptstsfi_eq_dd)\n+BU_P9_DFP_MISC_2 (TSTSFI_EQ_TD, \"dtstsfi_eq_td\", CONST, dfptstsfi_eq_td)\n+\n+BU_P9_DFP_MISC_2 (TSTSFI_GT_DD, \"dtstsfi_gt_dd\", CONST, dfptstsfi_gt_dd)\n+BU_P9_DFP_MISC_2 (TSTSFI_GT_TD, \"dtstsfi_gt_td\", CONST, dfptstsfi_gt_td)\n+\n+BU_P9_DFP_MISC_2 (TSTSFI_OV_DD, \"dtstsfi_ov_dd\", CONST, dfptstsfi_unordered_dd)\n+BU_P9_DFP_MISC_2 (TSTSFI_OV_TD, \"dtstsfi_ov_td\", CONST, dfptstsfi_unordered_td)\n+\n+/* 2 argument overloaded DFP functions added in ISA 3.0.  */\n+BU_P9_DFP_OVERLOAD_2 (TSTSFI_LT,\t\"dtstsfi_lt\")\n+BU_P9_DFP_OVERLOAD_2 (TSTSFI_LT_DD,\t\"dtstsfi_lt_dd\")\n+BU_P9_DFP_OVERLOAD_2 (TSTSFI_LT_TD,\t\"dtstsfi_lt_td\")\n+\n+BU_P9_DFP_OVERLOAD_2 (TSTSFI_EQ,\t\"dtstsfi_eq\")\n+BU_P9_DFP_OVERLOAD_2 (TSTSFI_EQ_DD,\t\"dtstsfi_eq_dd\")\n+BU_P9_DFP_OVERLOAD_2 (TSTSFI_EQ_TD,\t\"dtstsfi_eq_td\")\n+\n+BU_P9_DFP_OVERLOAD_2 (TSTSFI_GT,\t\"dtstsfi_gt\")\n+BU_P9_DFP_OVERLOAD_2 (TSTSFI_GT_DD,\t\"dtstsfi_gt_dd\")\n+BU_P9_DFP_OVERLOAD_2 (TSTSFI_GT_TD,\t\"dtstsfi_gt_td\")\n+\n+BU_P9_DFP_OVERLOAD_2 (TSTSFI_OV,\t\"dtstsfi_ov\")\n+BU_P9_DFP_OVERLOAD_2 (TSTSFI_OV_DD,\t\"dtstsfi_ov_dd\")\n+BU_P9_DFP_OVERLOAD_2 (TSTSFI_OV_TD,\t\"dtstsfi_ov_td\")\n+\n /* 1 argument vector functions added in ISA 3.0 (power9).  */\n BU_P9V_AV_1 (VCTZB,\t\t\"vctzb\",\t\tCONST,  ctzv16qi2)\n BU_P9V_AV_1 (VCTZH,\t\t\"vctzh\",\t\tCONST,  ctzv8hi2)"}, {"sha": "4500668ed9f5868302a545fbb3fc884ebcdce5d2", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -4203,6 +4203,46 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n   { P8V_BUILTIN_VEC_VCLZD, P8V_BUILTIN_VCLZD,\n     RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, 0, 0 },\n \n+  { P9_BUILTIN_DFP_TSTSFI_LT, MISC_BUILTIN_TSTSFI_LT_TD,\n+    RS6000_BTI_INTSI, RS6000_BTI_UINTSI, RS6000_BTI_dfloat128, 0 },\n+  { P9_BUILTIN_DFP_TSTSFI_LT, MISC_BUILTIN_TSTSFI_LT_DD,\n+    RS6000_BTI_INTSI, RS6000_BTI_UINTSI, RS6000_BTI_dfloat64, 0 },\n+\n+  { P9_BUILTIN_DFP_TSTSFI_LT_TD, MISC_BUILTIN_TSTSFI_LT_TD,\n+    RS6000_BTI_INTSI, RS6000_BTI_UINTSI, RS6000_BTI_dfloat128, 0 },\n+  { P9_BUILTIN_DFP_TSTSFI_LT_DD, MISC_BUILTIN_TSTSFI_LT_DD,\n+    RS6000_BTI_INTSI, RS6000_BTI_UINTSI, RS6000_BTI_dfloat64, 0 },\n+\n+  { P9_BUILTIN_DFP_TSTSFI_EQ, MISC_BUILTIN_TSTSFI_EQ_TD,\n+    RS6000_BTI_INTSI, RS6000_BTI_UINTSI, RS6000_BTI_dfloat128, 0 },\n+  { P9_BUILTIN_DFP_TSTSFI_EQ, MISC_BUILTIN_TSTSFI_EQ_DD,\n+    RS6000_BTI_INTSI, RS6000_BTI_UINTSI, RS6000_BTI_dfloat64, 0 },\n+\n+  { P9_BUILTIN_DFP_TSTSFI_EQ_TD, MISC_BUILTIN_TSTSFI_EQ_TD,\n+    RS6000_BTI_INTSI, RS6000_BTI_UINTSI, RS6000_BTI_dfloat128, 0 },\n+  { P9_BUILTIN_DFP_TSTSFI_EQ_DD, MISC_BUILTIN_TSTSFI_EQ_DD,\n+    RS6000_BTI_INTSI, RS6000_BTI_UINTSI, RS6000_BTI_dfloat64, 0 },\n+\n+  { P9_BUILTIN_DFP_TSTSFI_GT, MISC_BUILTIN_TSTSFI_GT_TD,\n+    RS6000_BTI_INTSI, RS6000_BTI_UINTSI, RS6000_BTI_dfloat128, 0 },\n+  { P9_BUILTIN_DFP_TSTSFI_GT, MISC_BUILTIN_TSTSFI_GT_DD,\n+    RS6000_BTI_INTSI, RS6000_BTI_UINTSI, RS6000_BTI_dfloat64, 0 },\n+\n+  { P9_BUILTIN_DFP_TSTSFI_GT_TD, MISC_BUILTIN_TSTSFI_GT_TD,\n+    RS6000_BTI_INTSI, RS6000_BTI_UINTSI, RS6000_BTI_dfloat128, 0 },\n+  { P9_BUILTIN_DFP_TSTSFI_GT_DD, MISC_BUILTIN_TSTSFI_GT_DD,\n+    RS6000_BTI_INTSI, RS6000_BTI_UINTSI, RS6000_BTI_dfloat64, 0 },\n+\n+  { P9_BUILTIN_DFP_TSTSFI_OV, MISC_BUILTIN_TSTSFI_OV_TD,\n+    RS6000_BTI_INTSI, RS6000_BTI_UINTSI, RS6000_BTI_dfloat128, 0 },\n+  { P9_BUILTIN_DFP_TSTSFI_OV, MISC_BUILTIN_TSTSFI_OV_DD,\n+    RS6000_BTI_INTSI, RS6000_BTI_UINTSI, RS6000_BTI_dfloat64, 0 },\n+\n+  { P9_BUILTIN_DFP_TSTSFI_OV_TD, MISC_BUILTIN_TSTSFI_OV_TD,\n+    RS6000_BTI_INTSI, RS6000_BTI_UINTSI, RS6000_BTI_dfloat128, 0 },\n+  { P9_BUILTIN_DFP_TSTSFI_OV_DD, MISC_BUILTIN_TSTSFI_OV_DD,\n+    RS6000_BTI_INTSI, RS6000_BTI_UINTSI, RS6000_BTI_dfloat64, 0 },\n+\n   { P9V_BUILTIN_VEC_VCTZ, P9V_BUILTIN_VCTZB,\n     RS6000_BTI_V16QI, RS6000_BTI_V16QI, 0, 0 },\n   { P9V_BUILTIN_VEC_VCTZ, P9V_BUILTIN_VCTZB,"}, {"sha": "7c67b6f2c8e279ba70aceaf247786a2ffe7d3da9", "filename": "gcc/config/rs6000/rs6000-cpus.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -69,6 +69,7 @@\n \t\t\t\t | OPTION_MASK_P9_FUSION\t\t\\\n \t\t\t\t | OPTION_MASK_P9_DFORM_SCALAR\t\t\\\n \t\t\t\t | OPTION_MASK_P9_DFORM_VECTOR\t\t\\\n+\t\t\t\t | OPTION_MASK_P9_MISC\t\t\t\\\n \t\t\t\t | OPTION_MASK_P9_VECTOR)\n \n #define POWERPC_7400_MASK\t(OPTION_MASK_PPC_GFXOPT | OPTION_MASK_ALTIVEC)\n@@ -108,6 +109,7 @@\n \t\t\t\t | OPTION_MASK_P9_DFORM_VECTOR\t\t\\\n \t\t\t\t | OPTION_MASK_P9_FUSION\t\t\\\n \t\t\t\t | OPTION_MASK_P9_MINMAX\t\t\\\n+\t\t\t\t | OPTION_MASK_P9_MISC\t\t\t\\\n \t\t\t\t | OPTION_MASK_P9_VECTOR\t\t\\\n \t\t\t\t | OPTION_MASK_POPCNTB\t\t\t\\\n \t\t\t\t | OPTION_MASK_POPCNTD\t\t\t\\"}, {"sha": "a34f28755dde7b4a5552d25b1ceafa54b4a05d8a", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -3680,6 +3680,7 @@ rs6000_builtin_mask_calculate (void)\n \t  | ((rs6000_cpu == PROCESSOR_CELL) ? RS6000_BTM_CELL      : 0)\n \t  | ((TARGET_P8_VECTOR)\t\t    ? RS6000_BTM_P8_VECTOR : 0)\n \t  | ((TARGET_P9_VECTOR)\t\t    ? RS6000_BTM_P9_VECTOR : 0)\n+\t  | ((TARGET_P9_MISC)\t\t    ? RS6000_BTM_P9_MISC   : 0)\n \t  | ((TARGET_MODULO)\t\t    ? RS6000_BTM_MODULO    : 0)\n \t  | ((TARGET_64BIT)\t\t    ? RS6000_BTM_64BIT     : 0)\n \t  | ((TARGET_CRYPTO)\t\t    ? RS6000_BTM_CRYPTO\t   : 0)\n@@ -13380,6 +13381,24 @@ rs6000_expand_binop_builtin (enum insn_code icode, tree exp, rtx target)\n \t  return const0_rtx;\n \t}\n     }\n+  else if (icode == CODE_FOR_dfptstsfi_eq_dd\n+      || icode == CODE_FOR_dfptstsfi_lt_dd\n+      || icode == CODE_FOR_dfptstsfi_gt_dd\n+      || icode == CODE_FOR_dfptstsfi_unordered_dd\n+      || icode == CODE_FOR_dfptstsfi_eq_td\n+      || icode == CODE_FOR_dfptstsfi_lt_td\n+      || icode == CODE_FOR_dfptstsfi_gt_td\n+      || icode == CODE_FOR_dfptstsfi_unordered_td)\n+    {\n+      /* Only allow 6-bit unsigned literals.  */\n+      STRIP_NOPS (arg0);\n+      if (TREE_CODE (arg0) != INTEGER_CST\n+\t  || !IN_RANGE (TREE_INT_CST_LOW (arg0), 0, 63))\n+\t{\n+\t  error (\"argument 1 must be a 6-bit unsigned literal\");\n+\t  return CONST0_RTX (tmode);\n+\t}\n+    }\n \n   if (target == 0\n       || GET_MODE (target) != tmode\n@@ -15486,6 +15505,12 @@ rs6000_invalid_builtin (enum rs6000_builtins fncode)\n     error (\"Builtin function %s requires the -mpower8-vector option\", name);\n   else if ((fnmask & RS6000_BTM_P9_VECTOR) != 0)\n     error (\"Builtin function %s requires the -mpower9-vector option\", name);\n+  else if ((fnmask & (RS6000_BTM_P9_MISC | RS6000_BTM_64BIT))\n+\t   == (RS6000_BTM_P9_MISC | RS6000_BTM_64BIT))\n+    error (\"Builtin function %s requires the -mpower9-misc and\"\n+\t   \" -m64 options\", name);\n+  else if ((fnmask & RS6000_BTM_P9_MISC) == RS6000_BTM_P9_MISC)\n+    error (\"Builtin function %s requires the -mpower9-misc option\", name);\n   else if ((fnmask & (RS6000_BTM_HARD_FLOAT | RS6000_BTM_LDBL128))\n \t   == (RS6000_BTM_HARD_FLOAT | RS6000_BTM_LDBL128))\n     error (\"Builtin function %s requires the -mhard-float and\"\n@@ -35825,6 +35850,7 @@ static struct rs6000_opt_mask const rs6000_opt_masks[] =\n   { \"power9-dform-vector\",\tOPTION_MASK_P9_DFORM_VECTOR,\tfalse, true  },\n   { \"power9-fusion\",\t\tOPTION_MASK_P9_FUSION,\t\tfalse, true  },\n   { \"power9-minmax\",\t\tOPTION_MASK_P9_MINMAX,\t\tfalse, true  },\n+  { \"power9-misc\",\t\tOPTION_MASK_P9_MISC,\t\tfalse, true  },\n   { \"power9-vector\",\t\tOPTION_MASK_P9_VECTOR,\t\tfalse, true  },\n   { \"powerpc-gfxopt\",\t\tOPTION_MASK_PPC_GFXOPT,\t\tfalse, true  },\n   { \"powerpc-gpopt\",\t\tOPTION_MASK_PPC_GPOPT,\t\tfalse, true  },\n@@ -35881,6 +35907,7 @@ static struct rs6000_opt_mask const rs6000_builtin_mask_names[] =\n   { \"cell\",\t\t RS6000_BTM_CELL,\tfalse, false },\n   { \"power8-vector\",\t RS6000_BTM_P8_VECTOR,\tfalse, false },\n   { \"power9-vector\",\t RS6000_BTM_P9_VECTOR,\tfalse, false },\n+  { \"power9-misc\",\t RS6000_BTM_P9_MISC,\tfalse, false },\n   { \"crypto\",\t\t RS6000_BTM_CRYPTO,\tfalse, false },\n   { \"htm\",\t\t RS6000_BTM_HTM,\tfalse, false },\n   { \"hard-dfp\",\t\t RS6000_BTM_DFP,\tfalse, false },"}, {"sha": "a6e80d7c8971508ed47d62c5e762b30c49c033e8", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -314,12 +314,14 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n #undef  TARGET_P9_MINMAX\n #undef  TARGET_P9_DFORM_SCALAR\n #undef  TARGET_P9_DFORM_VECTOR\n+#undef  TARGET_P9_MISC\n #define TARGET_FLOAT128_HW 0\n #define TARGET_MODULO 0\n #define TARGET_P9_VECTOR 0\n #define TARGET_P9_MINMAX 0\n #define TARGET_P9_DFORM_SCALAR 0\n #define TARGET_P9_DFORM_VECTOR 0\n+#define TARGET_P9_MISC 0\n #endif\n \n /* Define TARGET_LWSYNC_INSTRUCTION if the assembler knows about lwsync.  If\n@@ -648,6 +650,7 @@ extern int rs6000_vector_align[];\n #define MASK_NO_UPDATE\t\t\tOPTION_MASK_NO_UPDATE\n #define MASK_P8_VECTOR\t\t\tOPTION_MASK_P8_VECTOR\n #define MASK_P9_VECTOR\t\t\tOPTION_MASK_P9_VECTOR\n+#define MASK_P9_MISC\t\t\tOPTION_MASK_P9_MISC\n #define MASK_POPCNTB\t\t\tOPTION_MASK_POPCNTB\n #define MASK_POPCNTD\t\t\tOPTION_MASK_POPCNTD\n #define MASK_PPC_GFXOPT\t\t\tOPTION_MASK_PPC_GFXOPT\n@@ -2698,6 +2701,7 @@ extern int frame_pointer_needed;\n #define RS6000_BTM_VSX\t\tMASK_VSX\t/* VSX (vector/scalar).  */\n #define RS6000_BTM_P8_VECTOR\tMASK_P8_VECTOR\t/* ISA 2.07 vector.  */\n #define RS6000_BTM_P9_VECTOR\tMASK_P9_VECTOR\t/* ISA 3.0 vector.  */\n+#define RS6000_BTM_P9_MISC\tMASK_P9_MISC\t/* ISA 3.0 misc. non-vector */\n #define RS6000_BTM_CRYPTO\tMASK_CRYPTO\t/* crypto funcs.  */\n #define RS6000_BTM_HTM\t\tMASK_HTM\t/* hardware TM funcs.  */\n #define RS6000_BTM_SPE\t\tMASK_STRING\t/* E500 */\n@@ -2718,6 +2722,7 @@ extern int frame_pointer_needed;\n \t\t\t\t | RS6000_BTM_VSX\t\t\t\\\n \t\t\t\t | RS6000_BTM_P8_VECTOR\t\t\t\\\n \t\t\t\t | RS6000_BTM_P9_VECTOR\t\t\t\\\n+\t\t\t\t | RS6000_BTM_P9_MISC\t\t\t\\\n \t\t\t\t | RS6000_BTM_MODULO                    \\\n \t\t\t\t | RS6000_BTM_CRYPTO\t\t\t\\\n \t\t\t\t | RS6000_BTM_FRE\t\t\t\\"}, {"sha": "4f67473c7d6ab613b81f815e6d637815bbfd512c", "filename": "gcc/config/rs6000/rs6000.opt", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.opt?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -609,9 +609,13 @@ mpower9-fusion\n Target Report Mask(P9_FUSION) Var(rs6000_isa_flags)\n Fuse certain operations together for better performance on power9.\n \n+mpower9-misc\n+Target Undocumented Report Mask(P9_MISC) Var(rs6000_isa_flags)\n+Use/do not use certain scalar instructions added in ISA 3.0.\n+\n mpower9-vector\n Target Report Mask(P9_VECTOR) Var(rs6000_isa_flags)\n-Use/do not use vector and scalar instructions added in ISA 3.0.\n+Use/do not use vector instructions added in ISA 3.0.\n \n mpower9-dform-scalar\n Target Undocumented Mask(P9_DFORM_SCALAR) Var(rs6000_isa_flags)"}, {"sha": "5b9e6174cfa5bcfa3a58055c7610725d9ed3de2d", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 53, "deletions": 2, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -14842,12 +14842,31 @@ The @code{__builtin_divde}, @code{__builtin_divdeo},\n 64-bit environment support ISA 2.06 or later.\n \n The following built-in functions are available for the PowerPC family\n-of processors, starting with ISA 3.0 or later (@option{-mcpu=power9})\n-or with @option{-mmodulo}:\n+of processors, starting with ISA 3.0 or later (@option{-mcpu=power9}):\n @smallexample\n long long __builtin_darn (void);\n long long __builtin_darn_raw (void);\n int __builtin_darn_32 (void);\n+\n+int __builtin_dfp_dtstsfi_lt (unsigned int comparison, _Decimal64 value);\n+int __builtin_dfp_dtstsfi_lt (unsigned int comparison, _Decimal128 value);\n+int __builtin_dfp_dtstsfi_lt_dd (unsigned int comparison, _Decimal64 value);\n+int __builtin_dfp_dtstsfi_lt_td (unsigned int comparison, _Decimal128 value);\n+\n+int __builtin_dfp_dtstsfi_gt (unsigned int comparison, _Decimal64 value);\n+int __builtin_dfp_dtstsfi_gt (unsigned int comparison, _Decimal128 value);\n+int __builtin_dfp_dtstsfi_gt_dd (unsigned int comparison, _Decimal64 value);\n+int __builtin_dfp_dtstsfi_gt_td (unsigned int comparison, _Decimal128 value);\n+\n+int __builtin_dfp_dtstsfi_eq (unsigned int comparison, _Decimal64 value);\n+int __builtin_dfp_dtstsfi_eq (unsigned int comparison, _Decimal128 value);\n+int __builtin_dfp_dtstsfi_eq_dd (unsigned int comparison, _Decimal64 value);\n+int __builtin_dfp_dtstsfi_eq_td (unsigned int comparison, _Decimal128 value);\n+\n+int __builtin_dfp_dtstsfi_ov (unsigned int comparison, _Decimal64 value);\n+int __builtin_dfp_dtstsfi_ov (unsigned int comparison, _Decimal128 value);\n+int __builtin_dfp_dtstsfi_ov_dd (unsigned int comparison, _Decimal64 value);\n+int __builtin_dfp_dtstsfi_ov_td (unsigned int comparison, _Decimal128 value);\n @end smallexample\n \n The @code{__builtin_darn} and @code{__builtin_darn_raw}\n@@ -14858,6 +14877,38 @@ random number.  The @code{__builtin_darn_raw} function provides a\n 64-bit raw random number.  The @code{__builtin_darn_32} function\n provides a 32-bit random number.\n \n+The @code{__builtin_dfp_dtstsfi_lt} function returns a non-zero value\n+if and only if the number of signficant digits of its @code{value} argument\n+is less than its @code{comparison} argument.  The\n+@code{__builtin_dfp_dtstsfi_lt_dd} and\n+@code{__builtin_dfp_dtstsfi_lt_td} functions behave similarly, but\n+require that the type of the @code{value} argument be\n+@code{__Decimal64} and @code{__Decimal128} respectively.\n+\n+The @code{__builtin_dfp_dtstsfi_gt} function returns a non-zero value\n+if and only if the number of signficant digits of its @code{value} argument\n+is greater than its @code{comparison} argument.  The\n+@code{__builtin_dfp_dtstsfi_gt_dd} and\n+@code{__builtin_dfp_dtstsfi_gt_td} functions behave similarly, but\n+require that the type of the @code{value} argument be\n+@code{__Decimal64} and @code{__Decimal128} respectively.\n+\n+The @code{__builtin_dfp_dtstsfi_eq} function returns a non-zero value\n+if and only if the number of signficant digits of its @code{value} argument\n+equals its @code{comparison} argument.  The\n+@code{__builtin_dfp_dtstsfi_eq_dd} and\n+@code{__builtin_dfp_dtstsfi_eq_td} functions behave similarly, but\n+require that the type of the @code{value} argument be\n+@code{__Decimal64} and @code{__Decimal128} respectively.\n+\n+The @code{__builtin_dfp_dtstsfi_ov} function returns a non-zero value\n+if and only if its @code{value} argument has an undefined number of\n+significant digits, such as when @code{value} is an encoding of @code{NaN}.\n+The @code{__builtin_dfp_dtstsfi_ov_dd} and\n+@code{__builtin_dfp_dtstsfi_ov_td} functions behave similarly, but\n+require that the type of the @code{value} argument be\n+@code{__Decimal64} and @code{__Decimal128} respectively.\n+\n The following built-in functions are available for the PowerPC family\n of processors when hardware decimal floating point\n (@option{-mhard-dfp}) is available:"}, {"sha": "4081bd6846b96d63d2e5a43570aa91c50617d17a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -1,3 +1,87 @@\n+2016-06-30  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n+\n+\t* gcc.target/powerpc/dfp/dfp.exp: New dejagnu test script.\n+\t* gcc.target/powerpc/dfp/dtstsfi-0.c: New test.\n+\t* gcc.target/powerpc/dfp/dtstsfi-1.c: New test.\n+\t* gcc.target/powerpc/dfp/dtstsfi-10.c: New test.\n+\t* gcc.target/powerpc/dfp/dtstsfi-11.c: New test.\n+\t* gcc.target/powerpc/dfp/dtstsfi-12.c: New test.\n+\t* gcc.target/powerpc/dfp/dtstsfi-13.c: New test.\n+\t* gcc.target/powerpc/dfp/dtstsfi-14.c: New test.\n+\t* gcc.target/powerpc/dfp/dtstsfi-15.c: New test.\n+\t* gcc.target/powerpc/dfp/dtstsfi-16.c: New test.\n+\t* gcc.target/powerpc/dfp/dtstsfi-17.c: New test.\n+\t* gcc.target/powerpc/dfp/dtstsfi-18.c: New test.\n+\t* gcc.target/powerpc/dfp/dtstsfi-19.c: New test.\n+\t* gcc.target/powerpc/dfp/dtstsfi-2.c: New test.\n+\t* gcc.target/powerpc/dfp/dtstsfi-20.c: New test.\n+\t* gcc.target/powerpc/dfp/dtstsfi-21.c: New test.\n+\t* gcc.target/powerpc/dfp/dtstsfi-22.c: New test.\n+\t* gcc.target/powerpc/dfp/dtstsfi-23.c: New test.\n+\t* gcc.target/powerpc/dfp/dtstsfi-24.c: New test.\n+\t* gcc.target/powerpc/dfp/dtstsfi-25.c: New test.\n+\t* gcc.target/powerpc/dfp/dtstsfi-26.c: New test.\n+\t* gcc.target/powerpc/dfp/dtstsfi-27.c: New test.\n+\t* gcc.target/powerpc/dfp/dtstsfi-28.c: New test.\n+\t* gcc.target/powerpc/dfp/dtstsfi-29.c: New test.\n+\t* gcc.target/powerpc/dfp/dtstsfi-3.c: New test.\n+\t* gcc.target/powerpc/dfp/dtstsfi-30.c: New test.\n+\t* gcc.target/powerpc/dfp/dtstsfi-31.c: New test.\n+\t* gcc.target/powerpc/dfp/dtstsfi-32.c: New test.\n+\t* gcc.target/powerpc/dfp/dtstsfi-33.c: New test.\n+\t* gcc.target/powerpc/dfp/dtstsfi-34.c: New test.\n+\t* gcc.target/powerpc/dfp/dtstsfi-35.c: New test.\n+\t* gcc.target/powerpc/dfp/dtstsfi-36.c: New test.\n+\t* gcc.target/powerpc/dfp/dtstsfi-37.c: New test.\n+\t* gcc.target/powerpc/dfp/dtstsfi-38.c: New test.\n+\t* gcc.target/powerpc/dfp/dtstsfi-39.c: New test.\n+\t* gcc.target/powerpc/dfp/dtstsfi-4.c: New test.\n+\t* gcc.target/powerpc/dfp/dtstsfi-40.c: New test.\n+\t* gcc.target/powerpc/dfp/dtstsfi-41.c: New test.\n+\t* gcc.target/powerpc/dfp/dtstsfi-42.c: New test.\n+\t* gcc.target/powerpc/dfp/dtstsfi-43.c: New test.\n+\t* gcc.target/powerpc/dfp/dtstsfi-44.c: New test.\n+\t* gcc.target/powerpc/dfp/dtstsfi-45.c: New test.\n+\t* gcc.target/powerpc/dfp/dtstsfi-46.c: New test.\n+\t* gcc.target/powerpc/dfp/dtstsfi-47.c: New test.\n+\t* gcc.target/powerpc/dfp/dtstsfi-48.c: New test.\n+\t* gcc.target/powerpc/dfp/dtstsfi-49.c: New test.\n+\t* gcc.target/powerpc/dfp/dtstsfi-5.c: New test.\n+\t* gcc.target/powerpc/dfp/dtstsfi-50.c: New test.\n+\t* gcc.target/powerpc/dfp/dtstsfi-51.c: New test.\n+\t* gcc.target/powerpc/dfp/dtstsfi-52.c: New test.\n+\t* gcc.target/powerpc/dfp/dtstsfi-53.c: New test.\n+\t* gcc.target/powerpc/dfp/dtstsfi-54.c: New test.\n+\t* gcc.target/powerpc/dfp/dtstsfi-55.c: New test.\n+\t* gcc.target/powerpc/dfp/dtstsfi-56.c: New test.\n+\t* gcc.target/powerpc/dfp/dtstsfi-57.c: New test.\n+\t* gcc.target/powerpc/dfp/dtstsfi-58.c: New test.\n+\t* gcc.target/powerpc/dfp/dtstsfi-59.c: New test.\n+\t* gcc.target/powerpc/dfp/dtstsfi-6.c: New test.\n+\t* gcc.target/powerpc/dfp/dtstsfi-60.c: New test.\n+\t* gcc.target/powerpc/dfp/dtstsfi-61.c: New test.\n+\t* gcc.target/powerpc/dfp/dtstsfi-62.c: New test.\n+\t* gcc.target/powerpc/dfp/dtstsfi-63.c: New test.\n+\t* gcc.target/powerpc/dfp/dtstsfi-64.c: New test.\n+\t* gcc.target/powerpc/dfp/dtstsfi-65.c: New test.\n+\t* gcc.target/powerpc/dfp/dtstsfi-66.c: New test.\n+\t* gcc.target/powerpc/dfp/dtstsfi-67.c: New test.\n+\t* gcc.target/powerpc/dfp/dtstsfi-68.c: New test.\n+\t* gcc.target/powerpc/dfp/dtstsfi-69.c: New test.\n+\t* gcc.target/powerpc/dfp/dtstsfi-7.c: New test.\n+\t* gcc.target/powerpc/dfp/dtstsfi-70.c: New test.\n+\t* gcc.target/powerpc/dfp/dtstsfi-71.c: New test.\n+\t* gcc.target/powerpc/dfp/dtstsfi-72.c: New test.\n+\t* gcc.target/powerpc/dfp/dtstsfi-73.c: New test.\n+\t* gcc.target/powerpc/dfp/dtstsfi-74.c: New test.\n+\t* gcc.target/powerpc/dfp/dtstsfi-75.c: New test.\n+\t* gcc.target/powerpc/dfp/dtstsfi-76.c: New test.\n+\t* gcc.target/powerpc/dfp/dtstsfi-77.c: New test.\n+\t* gcc.target/powerpc/dfp/dtstsfi-78.c: New test.\n+\t* gcc.target/powerpc/dfp/dtstsfi-79.c: New test.\n+\t* gcc.target/powerpc/dfp/dtstsfi-8.c: New test.\n+\t* gcc.target/powerpc/dfp/dtstsfi-9.c: New test.\n+\n 2016-06-30  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n             James Greenhalgh  <james.greenhalgh@arm.com>\n "}, {"sha": "081946f7fbf2a1fbdd4a148b1f582ae199a19a86", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dfp.exp", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdfp.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdfp.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdfp.exp?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -0,0 +1,39 @@\n+# Copyright (C) 2014-2016 Free Software Foundation, Inc.\n+#\n+# This file is part of GCC.\n+#\n+# GCC is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3, or (at your option)\n+# any later version.\n+#\n+# GCC is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# Exit immediately if this isn't a PowerPC target.\n+if { ![istarget powerpc*-*-*] && ![istarget rs6000-*-*] } then {\n+  return\n+}\n+\n+global DEFAULT_CFLAGS\n+if ![info exists DEFAULT_CFLAGS] then {\n+  set DEFAULT_CFLAGS \" -ansi -pedantic-errors\"\n+}\n+\n+# Load support procs.\n+load_lib gcc-dg.exp\n+load_lib torture-options.exp\n+\n+# Initialize.\n+dg-init\n+\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.c*]] \"\" $DEFAULT_CFLAGS\n+\n+# All done.\n+dg-finish"}, {"sha": "29859c55986c80241573dff24b8eada28a74df9d", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-0.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-0.c?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+/* This test should succeed on both 32- and 64-bit configurations.  */\n+#include <altivec.h>\n+\n+int doTestBCDSignificance (_Decimal64 *p)\n+{\n+  _Decimal64 source = *p;\n+\n+  return __builtin_dfp_dtstsfi_lt (5, source);\n+}\n+\n+/* { dg-final { scan-assembler\t   \"dtstsfi\" } } */"}, {"sha": "d634a2acd042ab234b47e054daabd1fb5feff9ab", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-1.c?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power8\" } */\n+\n+#include <altivec.h>\n+\n+int doTestBCDSignificance (_Decimal64 *p)\n+{\n+  _Decimal64 source = *p;\n+\n+  return __builtin_dfp_dtstsfi_lt (5, source);\t/* { dg-error \"Builtin function __builtin_dtstsfi_lt_dd requires\" } */\n+}\n+"}, {"sha": "a56f19ba391716771473b622d193a6f12ee988ba", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-10.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-10.c?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+/* This test should succeed on both 32- and 64-bit configurations.  */\n+#include <altivec.h>\n+\n+int doTestBCDSignificance (_Decimal64 *p)\n+{\n+  _Decimal64 source = *p;\n+\n+  return __builtin_dfp_dtstsfi_lt_dd (5, source);\n+}\n+\n+/* { dg-final { scan-assembler\t   \"dtstsfi\" } } */"}, {"sha": "523facea156bc8045ced51eba4aec33126539b38", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-11.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-11.c?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power8\" } */\n+\n+#include <altivec.h>\n+\n+int doTestBCDSignificance (_Decimal64 *p)\n+{\n+  _Decimal64 source = *p;\n+\n+  return __builtin_dfp_dtstsfi_lt_dd (5, source);\t/* { dg-error \"Builtin function __builtin_dtstsfi_lt_dd requires\" } */\n+}\n+"}, {"sha": "e62e4bc7bbe0592a293cd4e1af92bd4049dca96f", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-12.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-12.c?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int doTestBCDSignificance (_Decimal64 *p)\n+{\n+  _Decimal64 source = *p;\n+\n+  return __builtin_dfp_dtstsfi_lt_dd (65, source);\t/* { dg-error \"argument 1 must be a 6-bit unsigned literal\" } */\n+}\n+"}, {"sha": "38bff163c02a0402d8cf89e3f09e57388e0bf5f5", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-13.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-13.c?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int doTestBCDSignificance (_Decimal64 *p)\n+{\n+  _Decimal64 source = *p;\n+\n+  if (__builtin_dfp_dtstsfi_lt_dd (63, source))\n+    return 3;\n+  else\n+    return 5;\n+}\n+\n+/* { dg-final { scan-assembler\t   \"dtstsfi\" } } */\n+"}, {"sha": "57fc81ad742600215288b410b73f998c079c6fb4", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-14.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-14.c?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int doTestBCDSignificance (_Decimal64 *p, unsigned int significance)\n+{\n+  _Decimal64 source = *p;\n+\n+  return __builtin_dfp_dtstsfi_lt_dd (significance, source);\t/* { dg-error \"argument 1 must be a 6-bit unsigned literal\" } */\n+}\n+"}, {"sha": "990461f9c53e8171afd312162fb542e53f0544fb", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-15.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-15.c?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+/* This test should succeed on both 32- and 64-bit configurations.  */\n+#include <altivec.h>\n+\n+int doTestBCDSignificance (_Decimal128 *p)\n+{\n+  _Decimal128 source = *p;\n+\n+  return __builtin_dfp_dtstsfi_lt_td (5, source);\n+}\n+\n+/* { dg-final { scan-assembler\t   \"dtstsfiq\" } } */\n+"}, {"sha": "dcd4a16635fe78b61d8722fddb6f725abacd1ba7", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-16.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-16.c?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power8\" } */\n+\n+#include <altivec.h>\n+\n+int doTestBCDSignificance (_Decimal128 *p)\n+{\n+  _Decimal128 source = *p;\n+\n+  return __builtin_dfp_dtstsfi_lt_td (5, source);\t/* { dg-error \"Builtin function __builtin_dtstsfi_lt_td requires\" } */\n+}\n+\n+"}, {"sha": "5fbf5b5cc0cae144fc2e356e51a5673a09992277", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-17.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-17.c?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int doTestBCDSignificance (_Decimal128 *p)\n+{\n+  _Decimal128 source = *p;\n+\n+  return __builtin_dfp_dtstsfi_lt_td (65, source);\t/* { dg-error \"argument 1 must be a 6-bit unsigned literal\" } */\n+}\n+\n+"}, {"sha": "675109552b4926a882683ea142a88d8554f79659", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-18.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-18.c?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int doTestBCDSignificance (_Decimal128 *p)\n+{\n+  _Decimal128 source = *p;\n+\n+  if (__builtin_dfp_dtstsfi_lt_td (63, source))\n+    return 3;\n+  else\n+    return 5;\n+}\n+\n+/* { dg-final { scan-assembler\t   \"dtstsfiq\" } } */\n+"}, {"sha": "d24eb10f7a72155aa92e174c86543e88e6442a85", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-19.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-19.c?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int doTestBCDSignificance (_Decimal128 *p, unsigned int significance)\n+{\n+  _Decimal128 source = *p;\n+\n+  return __builtin_dfp_dtstsfi_lt_td (significance, source);\t/* { dg-error \"argument 1 must be a 6-bit unsigned literal\" } */\n+}"}, {"sha": "d66ba886a92bf3f4ebfedec522ebc5697722ae45", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-2.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-2.c?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int doTestBCDSignificance (_Decimal64 *p)\n+{\n+  _Decimal64 source = *p;\n+\n+  return __builtin_dfp_dtstsfi_lt (65, source);\t/* { dg-error \"argument 1 must be a 6-bit unsigned literal\" } */\n+}\n+"}, {"sha": "e42f0debc82e1f65c06a861ed7726103ffd5dcfc", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-20.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-20.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-20.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-20.c?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+/* This test should succeed on both 32- and 64-bit configurations.  */\n+#include <altivec.h>\n+\n+int doTestBCDSignificance (_Decimal64 *p)\n+{\n+  _Decimal64 source = *p;\n+\n+  return __builtin_dfp_dtstsfi_gt (5, source);\n+}\n+\n+/* { dg-final { scan-assembler\t   \"dtstsfi\" } } */"}, {"sha": "975843c6a023040a0f82e838162e15a9a7d9cfd8", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-21.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-21.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-21.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-21.c?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power8\" } */\n+\n+#include <altivec.h>\n+\n+int doTestBCDSignificance (_Decimal64 *p)\n+{\n+  _Decimal64 source = *p;\n+\n+  return __builtin_dfp_dtstsfi_gt (5, source);\t/* { dg-error \"Builtin function __builtin_dtstsfi_gt_dd requires\" } */\n+}\n+"}, {"sha": "d6eced78f6a13cbd5f7830f75fb84916ceaf8425", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-22.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-22.c?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int doTestBCDSignificance (_Decimal64 *p)\n+{\n+  _Decimal64 source = *p;\n+\n+  return __builtin_dfp_dtstsfi_gt (65, source);\t/* { dg-error \"argument 1 must be a 6-bit unsigned literal\" } */\n+}\n+"}, {"sha": "eccca7e5d85bd022c01c730cb911b11c5dd8a7ec", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-23.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-23.c?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int doTestBCDSignificance (_Decimal64 *p)\n+{\n+  _Decimal64 source = *p;\n+\n+  if (__builtin_dfp_dtstsfi_gt (63, source))\n+    return 3;\n+  else\n+    return 5;\n+}\n+\n+/* { dg-final { scan-assembler\t   \"dtstsfi\" } } */\n+"}, {"sha": "54f1cd3d1348bb969bd861c267ab2fc5b31a27ff", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-24.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-24.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-24.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-24.c?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int doTestBCDSignificance (_Decimal64 *p, unsigned int significance)\n+{\n+  _Decimal64 source = *p;\n+\n+  return __builtin_dfp_dtstsfi_gt (significance, source);\t/* { dg-error \"argument 1 must be a 6-bit unsigned literal\" } */\n+}\n+"}, {"sha": "0c6594ecf464c4d1ab70b9f4ba9a9998f05e0689", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-25.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-25.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-25.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-25.c?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+/* This test should succeed on both 32- and 64-bit configurations.  */\n+#include <altivec.h>\n+\n+int doTestBCDSignificance (_Decimal128 *p)\n+{\n+  _Decimal128 source = *p;\n+\n+  return __builtin_dfp_dtstsfi_gt (5, source);\n+}\n+\n+/* { dg-final { scan-assembler\t   \"dtstsfiq\" } } */\n+"}, {"sha": "e30c2f4ac79661ef36e043362811545bddc64e5c", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-26.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-26.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-26.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-26.c?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power8\" } */\n+\n+#include <altivec.h>\n+\n+int doTestBCDSignificance (_Decimal128 *p)\n+{\n+  _Decimal128 source = *p;\n+\n+  return __builtin_dfp_dtstsfi_gt (5, source);\t/* { dg-error \"Builtin function __builtin_dtstsfi_gt_td requires\" } */\n+}\n+\n+"}, {"sha": "aaa0a854370c754b7dd4ce5b1fed4f8ebb6d19c2", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-27.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-27.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-27.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-27.c?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int doTestBCDSignificance (_Decimal128 *p)\n+{\n+  _Decimal128 source = *p;\n+\n+  return __builtin_dfp_dtstsfi_gt (65, source);\t/* { dg-error \"argument 1 must be a 6-bit unsigned literal\" } */\n+}\n+\n+"}, {"sha": "efec051639ae3e9c647354586756493d1f7efa74", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-28.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-28.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-28.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-28.c?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int doTestBCDSignificance (_Decimal128 *p)\n+{\n+  _Decimal128 source = *p;\n+\n+  if (__builtin_dfp_dtstsfi_gt (63, source))\n+    return 3;\n+  else\n+    return 5;\n+}\n+\n+/* { dg-final { scan-assembler\t   \"dtstsfiq\" } } */\n+"}, {"sha": "2f84bbfd36ab963289721deb56aa4608d7bee0bd", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-29.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-29.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-29.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-29.c?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int doTestBCDSignificance (_Decimal128 *p, unsigned int significance)\n+{\n+  _Decimal128 source = *p;\n+\n+  return __builtin_dfp_dtstsfi_gt (significance, source);\t/* { dg-error \"argument 1 must be a 6-bit unsigned literal\" } */\n+}"}, {"sha": "ac0380973f98d1947f3e39b6df2af1f9180212d8", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-3.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-3.c?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int doTestBCDSignificance (_Decimal64 *p)\n+{\n+  _Decimal64 source = *p;\n+\n+  if (__builtin_dfp_dtstsfi_lt (63, source))\n+    return 3;\n+  else\n+    return 5;\n+}\n+\n+/* { dg-final { scan-assembler\t   \"dtstsfi\" } } */\n+"}, {"sha": "cfa8d0d28177d30285eac0d2f3121b6c0e10fa20", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-30.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-30.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-30.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-30.c?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+/* This test should succeed on both 32- and 64-bit configurations.  */\n+#include <altivec.h>\n+\n+int doTestBCDSignificance (_Decimal64 *p)\n+{\n+  _Decimal64 source = *p;\n+\n+  return __builtin_dfp_dtstsfi_gt_dd (5, source);\n+}\n+\n+/* { dg-final { scan-assembler\t   \"dtstsfi\" } } */"}, {"sha": "a95dcb8dbb628cabfb6d6dc7f30f8eac8e50421b", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-31.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-31.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-31.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-31.c?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power8\" } */\n+\n+#include <altivec.h>\n+\n+int doTestBCDSignificance (_Decimal64 *p)\n+{\n+  _Decimal64 source = *p;\n+\n+  return __builtin_dfp_dtstsfi_gt_dd (5, source);\t/* { dg-error \"Builtin function __builtin_dtstsfi_gt_dd requires\" } */\n+}\n+"}, {"sha": "512e15745556b692e87dcd09ff879e1a3f459e3f", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-32.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-32.c?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int doTestBCDSignificance (_Decimal64 *p)\n+{\n+  _Decimal64 source = *p;\n+\n+  return __builtin_dfp_dtstsfi_gt_dd (65, source);\t/* { dg-error \"argument 1 must be a 6-bit unsigned literal\" } */\n+}\n+"}, {"sha": "f21399e9d62a85b1ee7cc51d83a8d2276fcb2b2a", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-33.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-33.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-33.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-33.c?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int doTestBCDSignificance (_Decimal64 *p)\n+{\n+  _Decimal64 source = *p;\n+\n+  if (__builtin_dfp_dtstsfi_gt_dd (63, source))\n+    return 3;\n+  else\n+    return 5;\n+}\n+\n+/* { dg-final { scan-assembler\t   \"dtstsfi\" } } */\n+"}, {"sha": "864228319755c1a7ca032edbac4b8f869a2da51c", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-34.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-34.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-34.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-34.c?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int doTestBCDSignificance (_Decimal64 *p, unsigned int significance)\n+{\n+  _Decimal64 source = *p;\n+\n+  return __builtin_dfp_dtstsfi_gt_dd (significance, source);\t/* { dg-error \"argument 1 must be a 6-bit unsigned literal\" } */\n+}\n+"}, {"sha": "5987b43897018ae4f53fa04b4943df1c578e3b35", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-35.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-35.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-35.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-35.c?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+/* This test should succeed on both 32- and 64-bit configurations.  */\n+#include <altivec.h>\n+\n+int doTestBCDSignificance (_Decimal128 *p)\n+{\n+  _Decimal128 source = *p;\n+\n+  return __builtin_dfp_dtstsfi_gt_td (5, source);\n+}\n+\n+/* { dg-final { scan-assembler\t   \"dtstsfiq\" } } */\n+"}, {"sha": "00be5389310ddf382b1f905b52c4132704e6deda", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-36.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-36.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-36.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-36.c?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power8\" } */\n+\n+#include <altivec.h>\n+\n+int doTestBCDSignificance (_Decimal128 *p)\n+{\n+  _Decimal128 source = *p;\n+\n+  return __builtin_dfp_dtstsfi_gt_td (5, source);\t/* { dg-error \"Builtin function __builtin_dtstsfi_gt_td requires\" } */\n+}\n+\n+"}, {"sha": "dcbde72a7f235e8d3ee8eb7827bdeca897685e93", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-37.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-37.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-37.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-37.c?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int doTestBCDSignificance (_Decimal128 *p)\n+{\n+  _Decimal128 source = *p;\n+\n+  return __builtin_dfp_dtstsfi_gt_td (65, source);\t/* { dg-error \"argument 1 must be a 6-bit unsigned literal\" } */\n+}\n+\n+"}, {"sha": "c892c100aa8bad2a0c9421b37d246cc61ff1c788", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-38.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-38.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-38.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-38.c?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int doTestBCDSignificance (_Decimal128 *p)\n+{\n+  _Decimal128 source = *p;\n+\n+  if (__builtin_dfp_dtstsfi_gt_td (63, source))\n+    return 3;\n+  else\n+    return 5;\n+}\n+\n+/* { dg-final { scan-assembler\t   \"dtstsfiq\" } } */\n+"}, {"sha": "d54138d8c5cc05f2bbf16f1328137414b937a04b", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-39.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-39.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-39.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-39.c?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int doTestBCDSignificance (_Decimal128 *p, unsigned int significance)\n+{\n+  _Decimal128 source = *p;\n+\n+  return __builtin_dfp_dtstsfi_gt_td (significance, source);\t/* { dg-error \"argument 1 must be a 6-bit unsigned literal\" } */\n+}"}, {"sha": "f00756aa23cc5b53781ea3c0ca6671fff64a33ab", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-4.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-4.c?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int doTestBCDSignificance (_Decimal64 *p, unsigned int significance)\n+{\n+  _Decimal64 source = *p;\n+\n+  return __builtin_dfp_dtstsfi_lt (significance, source);\t/* { dg-error \"argument 1 must be a 6-bit unsigned literal\" } */\n+}\n+"}, {"sha": "6b2ecf775d201e184435a9c78ea54beb5ebc3c3d", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-40.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-40.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-40.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-40.c?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+/* This test should succeed on both 32- and 64-bit configurations.  */\n+#include <altivec.h>\n+\n+int doTestBCDSignificance (_Decimal64 *p)\n+{\n+  _Decimal64 source = *p;\n+\n+  return __builtin_dfp_dtstsfi_eq (5, source);\n+}\n+\n+/* { dg-final { scan-assembler\t   \"dtstsfi\" } } */"}, {"sha": "c84387dc38b2f231aa1ec6fe968d00f10e271016", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-41.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-41.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-41.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-41.c?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power8\" } */\n+\n+#include <altivec.h>\n+\n+int doTestBCDSignificance (_Decimal64 *p)\n+{\n+  _Decimal64 source = *p;\n+\n+  return __builtin_dfp_dtstsfi_eq (5, source);\t/* { dg-error \"Builtin function __builtin_dtstsfi_eq_dd requires\" } */\n+}\n+"}, {"sha": "f193b415007fb3eb020f995fdb6850da43ced851", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-42.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-42.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-42.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-42.c?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int doTestBCDSignificance (_Decimal64 *p)\n+{\n+  _Decimal64 source = *p;\n+\n+  return __builtin_dfp_dtstsfi_eq (65, source);\t/* { dg-error \"argument 1 must be a 6-bit unsigned literal\" } */\n+}\n+"}, {"sha": "0de23f4f225deb16502346c0edb92d1e7b524685", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-43.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-43.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-43.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-43.c?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int doTestBCDSignificance (_Decimal64 *p)\n+{\n+  _Decimal64 source = *p;\n+\n+  if (__builtin_dfp_dtstsfi_eq (63, source))\n+    return 3;\n+  else\n+    return 5;\n+}\n+\n+/* { dg-final { scan-assembler\t   \"dtstsfi\" } } */\n+"}, {"sha": "41652c99f6fa3d1d9b233a4b89239a8094dd0938", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-44.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-44.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-44.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-44.c?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int doTestBCDSignificance (_Decimal64 *p, unsigned int significance)\n+{\n+  _Decimal64 source = *p;\n+\n+  return __builtin_dfp_dtstsfi_eq (significance, source);\t/* { dg-error \"argument 1 must be a 6-bit unsigned literal\" } */\n+}\n+"}, {"sha": "4ef2d555d438c06e8286bd83bdc4c3ac57266094", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-45.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-45.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-45.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-45.c?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+/* This test should succeed on both 32- and 64-bit configurations.  */\n+#include <altivec.h>\n+\n+int doTestBCDSignificance (_Decimal128 *p)\n+{\n+  _Decimal128 source = *p;\n+\n+  return __builtin_dfp_dtstsfi_eq (5, source);\n+}\n+\n+/* { dg-final { scan-assembler\t   \"dtstsfiq\" } } */\n+"}, {"sha": "f1d6e2de80f1ae2dfb7caa98f0110d7d28179296", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-46.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-46.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-46.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-46.c?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power8\" } */\n+\n+#include <altivec.h>\n+\n+int doTestBCDSignificance (_Decimal128 *p)\n+{\n+  _Decimal128 source = *p;\n+\n+  return __builtin_dfp_dtstsfi_eq (5, source);\t/* { dg-error \"Builtin function __builtin_dtstsfi_eq_td requires\" } */\n+}\n+\n+"}, {"sha": "c85b709f228274611ad421522c112112d1891246", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-47.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-47.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-47.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-47.c?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int doTestBCDSignificance (_Decimal128 *p)\n+{\n+  _Decimal128 source = *p;\n+\n+  return __builtin_dfp_dtstsfi_eq (65, source);\t/* { dg-error \"argument 1 must be a 6-bit unsigned literal\" } */\n+}\n+\n+"}, {"sha": "94962fcff2f5aaed8bb0f76f5ef219713421f086", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-48.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-48.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-48.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-48.c?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int doTestBCDSignificance (_Decimal128 *p)\n+{\n+  _Decimal128 source = *p;\n+\n+  if (__builtin_dfp_dtstsfi_eq (63, source))\n+    return 3;\n+  else\n+    return 5;\n+}\n+\n+/* { dg-final { scan-assembler\t   \"dtstsfiq\" } } */\n+"}, {"sha": "79190d0dde04f69a3963b3a2b83c4d9da710394f", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-49.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-49.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-49.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-49.c?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int doTestBCDSignificance (_Decimal128 *p, unsigned int significance)\n+{\n+  _Decimal128 source = *p;\n+\n+  return __builtin_dfp_dtstsfi_eq (significance, source);\t/* { dg-error \"argument 1 must be a 6-bit unsigned literal\" } */\n+}"}, {"sha": "2aadb7e7dc2103d68b7d787f48048043b9c22f96", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-5.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-5.c?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+/* This test should succeed on both 32- and 64-bit configurations.  */\n+#include <altivec.h>\n+\n+int doTestBCDSignificance (_Decimal128 *p)\n+{\n+  _Decimal128 source = *p;\n+\n+  return __builtin_dfp_dtstsfi_lt (5, source);\n+}\n+\n+/* { dg-final { scan-assembler\t   \"dtstsfiq\" } } */\n+"}, {"sha": "3d9869d39f1e60f07900a77bd0f5eece9feeed7a", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-50.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-50.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-50.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-50.c?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+/* This test should succeed on both 32- and 64-bit configurations.  */\n+#include <altivec.h>\n+\n+int doTestBCDSignificance (_Decimal64 *p)\n+{\n+  _Decimal64 source = *p;\n+\n+  return __builtin_dfp_dtstsfi_eq_dd (5, source);\n+}\n+\n+/* { dg-final { scan-assembler\t   \"dtstsfi\" } } */"}, {"sha": "58f542673de776e642e989be72e5ff8ccb318b42", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-51.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-51.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-51.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-51.c?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power8\" } */\n+\n+#include <altivec.h>\n+\n+int doTestBCDSignificance (_Decimal64 *p)\n+{\n+  _Decimal64 source = *p;\n+\n+  return __builtin_dfp_dtstsfi_eq_dd (5, source);\t/* { dg-error \"Builtin function __builtin_dtstsfi_eq_dd requires\" } */\n+}\n+"}, {"sha": "382fdc21060cf2d309201348f94b2675ca08a5fa", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-52.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-52.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-52.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-52.c?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int doTestBCDSignificance (_Decimal64 *p)\n+{\n+  _Decimal64 source = *p;\n+\n+  return __builtin_dfp_dtstsfi_eq_dd (65, source);\t/* { dg-error \"argument 1 must be a 6-bit unsigned literal\" } */\n+}\n+"}, {"sha": "067c2071b4b41612422ddf9930598c4194759fa1", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-53.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-53.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-53.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-53.c?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int doTestBCDSignificance (_Decimal64 *p)\n+{\n+  _Decimal64 source = *p;\n+\n+  if (__builtin_dfp_dtstsfi_eq_dd (63, source))\n+    return 3;\n+  else\n+    return 5;\n+}\n+\n+/* { dg-final { scan-assembler\t   \"dtstsfi\" } } */\n+"}, {"sha": "ac2c692b51f91da963779ab84e35d173072b2f77", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-54.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-54.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-54.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-54.c?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int doTestBCDSignificance (_Decimal64 *p, unsigned int significance)\n+{\n+  _Decimal64 source = *p;\n+\n+  return __builtin_dfp_dtstsfi_eq_dd (significance, source);\t/* { dg-error \"argument 1 must be a 6-bit unsigned literal\" } */\n+}\n+"}, {"sha": "cd732fbc885262fb9d7baa349861bbaaa44929bc", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-55.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-55.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-55.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-55.c?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+/* This test should succeed on both 32- and 64-bit configurations.  */\n+#include <altivec.h>\n+\n+int doTestBCDSignificance (_Decimal128 *p)\n+{\n+  _Decimal128 source = *p;\n+\n+  return __builtin_dfp_dtstsfi_eq_td (5, source);\n+}\n+\n+/* { dg-final { scan-assembler\t   \"dtstsfiq\" } } */\n+"}, {"sha": "7efb1a3d0f171403b981ff40ca994ea1fecd0de1", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-56.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-56.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-56.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-56.c?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power8\" } */\n+\n+#include <altivec.h>\n+\n+int doTestBCDSignificance (_Decimal128 *p)\n+{\n+  _Decimal128 source = *p;\n+\n+  return __builtin_dfp_dtstsfi_eq_td (5, source);\t/* { dg-error \"Builtin function __builtin_dtstsfi_eq_td requires\" } */\n+}\n+\n+"}, {"sha": "74ff7ec0d50c3d10b07657a26706c48c683ee5d1", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-57.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-57.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-57.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-57.c?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int doTestBCDSignificance (_Decimal128 *p)\n+{\n+  _Decimal128 source = *p;\n+\n+  return __builtin_dfp_dtstsfi_eq_td (65, source);\t/* { dg-error \"argument 1 must be a 6-bit unsigned literal\" } */\n+}\n+\n+"}, {"sha": "d6ee4f72a75cede727dd6546e9dc7fe9cc6c7d06", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-58.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-58.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-58.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-58.c?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int doTestBCDSignificance (_Decimal128 *p)\n+{\n+  _Decimal128 source = *p;\n+\n+  if (__builtin_dfp_dtstsfi_eq_td (63, source))\n+    return 3;\n+  else\n+    return 5;\n+}\n+\n+/* { dg-final { scan-assembler\t   \"dtstsfiq\" } } */\n+"}, {"sha": "acd2a208379972cab29d9443c8e1101e1e93fdee", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-59.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-59.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-59.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-59.c?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int doTestBCDSignificance (_Decimal128 *p, unsigned int significance)\n+{\n+  _Decimal128 source = *p;\n+\n+  return __builtin_dfp_dtstsfi_eq_td (significance, source);\t/* { dg-error \"argument 1 must be a 6-bit unsigned literal\" } */\n+}"}, {"sha": "1bddb651b0e748709cc103e1a1b2b074ea550f2f", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-6.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-6.c?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power8\" } */\n+\n+#include <altivec.h>\n+\n+int doTestBCDSignificance (_Decimal128 *p)\n+{\n+  _Decimal128 source = *p;\n+\n+  return __builtin_dfp_dtstsfi_lt (5, source);\t/* { dg-error \"Builtin function __builtin_dtstsfi_lt_td requires\" } */\n+}\n+\n+"}, {"sha": "71eab2609b9f2d60c75ac83bf9faf61417576ac8", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-60.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-60.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-60.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-60.c?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+/* This test should succeed on both 32- and 64-bit configurations.  */\n+#include <altivec.h>\n+\n+int doTestBCDSignificance (_Decimal64 *p)\n+{\n+  _Decimal64 source = *p;\n+\n+  return __builtin_dfp_dtstsfi_ov (5, source);\n+}\n+\n+/* { dg-final { scan-assembler\t   \"dtstsfi\" } } */"}, {"sha": "247c1448a70dc62ee4520b25fc146b88afbacc24", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-61.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-61.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-61.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-61.c?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power8\" } */\n+\n+#include <altivec.h>\n+\n+int doTestBCDSignificance (_Decimal64 *p)\n+{\n+  _Decimal64 source = *p;\n+\n+  return __builtin_dfp_dtstsfi_ov (5, source);\t/* { dg-error \"Builtin function __builtin_dtstsfi_ov_dd requires\" } */\n+}\n+"}, {"sha": "fbe137de7f397d5e7421b452be3688b78515885f", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-62.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-62.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-62.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-62.c?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int doTestBCDSignificance (_Decimal64 *p)\n+{\n+  _Decimal64 source = *p;\n+\n+  return __builtin_dfp_dtstsfi_ov (65, source);\t/* { dg-error \"argument 1 must be a 6-bit unsigned literal\" } */\n+}\n+"}, {"sha": "18d17f36ee31ee43c83e6af347e4d00b46dcffe9", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-63.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-63.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-63.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-63.c?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int doTestBCDSignificance (_Decimal64 *p)\n+{\n+  _Decimal64 source = *p;\n+\n+  if (__builtin_dfp_dtstsfi_ov (63, source))\n+    return 3;\n+  else\n+    return 5;\n+}\n+\n+/* { dg-final { scan-assembler\t   \"dtstsfi\" } } */\n+"}, {"sha": "6e601160ef739b5e2a183985464545e9292f8683", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-64.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-64.c?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int doTestBCDSignificance (_Decimal64 *p, unsigned int significance)\n+{\n+  _Decimal64 source = *p;\n+\n+  return __builtin_dfp_dtstsfi_ov (significance, source);\t/* { dg-error \"argument 1 must be a 6-bit unsigned literal\" } */\n+}\n+"}, {"sha": "2ad93313760bc1ee186c1459f7c102401dad937a", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-65.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-65.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-65.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-65.c?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+/* This test should succeed on both 32- and 64-bit configurations.  */\n+#include <altivec.h>\n+\n+int doTestBCDSignificance (_Decimal128 *p)\n+{\n+  _Decimal128 source = *p;\n+\n+  return __builtin_dfp_dtstsfi_ov (5, source);\n+}\n+\n+/* { dg-final { scan-assembler\t   \"dtstsfiq\" } } */\n+"}, {"sha": "69272acb47a9a06d6780aa30b0d51af423961e1a", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-66.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-66.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-66.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-66.c?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power8\" } */\n+\n+#include <altivec.h>\n+\n+int doTestBCDSignificance (_Decimal128 *p)\n+{\n+  _Decimal128 source = *p;\n+\n+  return __builtin_dfp_dtstsfi_ov (5, source);\t/* { dg-error \"Builtin function __builtin_dtstsfi_ov_td requires\" } */\n+}\n+\n+"}, {"sha": "a9ba111b82fcfef7c0e48a2b7ee62b41698199d8", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-67.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-67.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-67.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-67.c?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int doTestBCDSignificance (_Decimal128 *p)\n+{\n+  _Decimal128 source = *p;\n+\n+  return __builtin_dfp_dtstsfi_ov (65, source);\t/* { dg-error \"argument 1 must be a 6-bit unsigned literal\" } */\n+}\n+\n+"}, {"sha": "bd8040a175ae4cf74e3f2a0d9baa24d38cf06e56", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-68.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-68.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-68.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-68.c?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int doTestBCDSignificance (_Decimal128 *p)\n+{\n+  _Decimal128 source = *p;\n+\n+  if (__builtin_dfp_dtstsfi_ov (63, source))\n+    return 3;\n+  else\n+    return 5;\n+}\n+\n+/* { dg-final { scan-assembler\t   \"dtstsfiq\" } } */\n+"}, {"sha": "078f232cb4a5980910128a281dce23cfe3145799", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-69.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-69.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-69.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-69.c?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int doTestBCDSignificance (_Decimal128 *p, unsigned int significance)\n+{\n+  _Decimal128 source = *p;\n+\n+  return __builtin_dfp_dtstsfi_ov (significance, source);\t/* { dg-error \"argument 1 must be a 6-bit unsigned literal\" } */\n+}"}, {"sha": "1875741f5c4acccba67a5d853d36f4c231ca6fec", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-7.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-7.c?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int doTestBCDSignificance (_Decimal128 *p)\n+{\n+  _Decimal128 source = *p;\n+\n+  return __builtin_dfp_dtstsfi_lt (65, source);\t/* { dg-error \"argument 1 must be a 6-bit unsigned literal\" } */\n+}"}, {"sha": "f84faf8022b5585db9a1e6b9cd1a3b2a74f28733", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-70.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-70.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-70.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-70.c?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+/* This test should succeed on both 32- and 64-bit configurations.  */\n+#include <altivec.h>\n+\n+int doTestBCDSignificance (_Decimal64 *p)\n+{\n+  _Decimal64 source = *p;\n+\n+  return __builtin_dfp_dtstsfi_ov_dd (5, source);\n+}\n+\n+/* { dg-final { scan-assembler\t   \"dtstsfi\" } } */"}, {"sha": "3e512038cf3e636b27da6e7fabff683314be2a39", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-71.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-71.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-71.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-71.c?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power8\" } */\n+\n+#include <altivec.h>\n+\n+int doTestBCDSignificance (_Decimal64 *p)\n+{\n+  _Decimal64 source = *p;\n+\n+  return __builtin_dfp_dtstsfi_ov_dd (5, source);\t/* { dg-error \"Builtin function __builtin_dtstsfi_ov_dd requires\" } */\n+}\n+"}, {"sha": "044d039b464674ffc2d0daa16a4f92ca7b0468ad", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-72.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-72.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-72.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-72.c?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int doTestBCDSignificance (_Decimal64 *p)\n+{\n+  _Decimal64 source = *p;\n+\n+  return __builtin_dfp_dtstsfi_ov_dd (65, source);\t/* { dg-error \"argument 1 must be a 6-bit unsigned literal\" } */\n+}\n+"}, {"sha": "52a5d9a566472f66be7017cbc24222a22189dc15", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-73.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-73.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-73.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-73.c?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int doTestBCDSignificance (_Decimal64 *p)\n+{\n+  _Decimal64 source = *p;\n+\n+  if (__builtin_dfp_dtstsfi_ov_dd (63, source))\n+    return 3;\n+  else\n+    return 5;\n+}\n+\n+/* { dg-final { scan-assembler\t   \"dtstsfi\" } } */\n+"}, {"sha": "2dd72ee1253ad774e7086ec51166d29d4c39189d", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-74.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-74.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-74.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-74.c?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int doTestBCDSignificance (_Decimal64 *p, unsigned int significance)\n+{\n+  _Decimal64 source = *p;\n+\n+  return __builtin_dfp_dtstsfi_ov_dd (significance, source);\t/* { dg-error \"argument 1 must be a 6-bit unsigned literal\" } */\n+}\n+"}, {"sha": "6bbe73b75111088b75cc70cbe77b7cd95ec44066", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-75.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-75.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-75.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-75.c?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+/* This test should succeed on both 32- and 64-bit configurations.  */\n+#include <altivec.h>\n+\n+int doTestBCDSignificance (_Decimal128 *p)\n+{\n+  _Decimal128 source = *p;\n+\n+  return __builtin_dfp_dtstsfi_ov_td (5, source);\n+}\n+\n+/* { dg-final { scan-assembler\t   \"dtstsfiq\" } } */\n+"}, {"sha": "572897fee5585e3bac88c7f235153da2312c4d1b", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-76.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-76.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-76.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-76.c?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power8\" } */\n+\n+#include <altivec.h>\n+\n+int doTestBCDSignificance (_Decimal128 *p)\n+{\n+  _Decimal128 source = *p;\n+\n+  return __builtin_dfp_dtstsfi_ov_td (5, source);\t/* { dg-error \"Builtin function __builtin_dtstsfi_ov_td requires\" } */\n+}\n+\n+"}, {"sha": "4b725377e09f96dc02d811308cbf6734aed07b2f", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-77.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-77.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-77.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-77.c?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int doTestBCDSignificance (_Decimal128 *p)\n+{\n+  _Decimal128 source = *p;\n+\n+  return __builtin_dfp_dtstsfi_ov_td (65, source);\t/* { dg-error \"argument 1 must be a 6-bit unsigned literal\" } */\n+}\n+\n+"}, {"sha": "c302027e3becf7cbb50e470b90f81ad72a28b124", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-78.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-78.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-78.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-78.c?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int doTestBCDSignificance (_Decimal128 *p)\n+{\n+  _Decimal128 source = *p;\n+\n+  if (__builtin_dfp_dtstsfi_ov_td (63, source))\n+    return 3;\n+  else\n+    return 5;\n+}\n+\n+/* { dg-final { scan-assembler\t   \"dtstsfiq\" } } */\n+"}, {"sha": "789b3ada11ab996abd792fbd42630eab0617092f", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-79.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-79.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-79.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-79.c?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int doTestBCDSignificance (_Decimal128 *p, unsigned int significance)\n+{\n+  _Decimal128 source = *p;\n+\n+  return __builtin_dfp_dtstsfi_ov_td (significance, source);\t/* { dg-error \"argument 1 must be a 6-bit unsigned literal\" } */\n+}"}, {"sha": "d3aa64efa9722c95ec3cd26ccfd7b876a027f33c", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-8.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-8.c?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int doTestBCDSignificance (_Decimal128 *p)\n+{\n+  _Decimal128 source = *p;\n+\n+  if (__builtin_dfp_dtstsfi_lt (63, source))\n+    return 3;\n+  else\n+    return 5;\n+}\n+\n+/* { dg-final { scan-assembler\t   \"dtstsfiq\" } } */\n+"}, {"sha": "9180e3e9a013351caa616e8b5c7f780944c39fcc", "filename": "gcc/testsuite/gcc.target/powerpc/dfp/dtstsfi-9.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a3a6a5eaed91e241fe879af65162507eafd6e5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdfp%2Fdtstsfi-9.c?ref=5a3a6a5eaed91e241fe879af65162507eafd6e5f", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-skip-if \"\" { powerpc*-*-aix* } } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+int doTestBCDSignificance (_Decimal128 *p, unsigned int significance)\n+{\n+  _Decimal128 source = *p;\n+\n+  return __builtin_dfp_dtstsfi_lt (significance, source);\t/* { dg-error \"argument 1 must be a 6-bit unsigned literal\" } */\n+}"}]}