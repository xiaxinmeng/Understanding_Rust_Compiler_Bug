{"sha": "f311c3b4a64ad8752904a0261a306bf191e5fcdc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjMxMWMzYjRhNjRhZDg3NTI5MDRhMDI2MWEzMDZiZjE5MWU1ZmNkYw==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-05-19T16:23:27Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-05-19T16:23:27Z"}, "message": "hooks.h (hook_tree_tree_tree_bool_null): Rename to...\n\n\t* hooks.h (hook_tree_tree_tree_bool_null): Rename to...\n\t(hook_tree_tree_int_treep_bool_null): ...this.  Update signature.\n\t* hooks.c: Likewise.\n\t* target-def.h (TARGET_FOLD_BUILTIN): Define to\n\thook_tree_tree_int_treep_bool_null.\n\t* target.h: (struct gcc_target): Update signature of fold_builtin\n\tfield.\n\t* doc/tm.texi (TARGET_FOLD_BUILTIN): Update description and signature.\n\t* builtins.c (fold_call_expr): Pass call_expr_nargs and CALL_EXPR_ARGP\n\tinstead of the call expression.\n\t(fold_builtin_call_array): Pass n and argarray directly.\n\t(fold_call_stmt): Pass nargs and gimple_call_arg_ptr instead of\n\tconsing a list.\n\t* config/alpha/alpha.c (alpha_fold_builtin): Update signature.  Lift\n\tMAX_ARGS check out of the loop.  Delete declaration of `arity', declare\n\t`i' and use it in place of `arity'.\n\t* config/sparc/sparc.c (sparc_fold_builtin): Update signature.\n\tDereference `args' directly.\n\t* config/xtensa/xtensa (xtensa_fold_builtin): Likewise.\n\nFrom-SVN: r159585", "tree": {"sha": "f15a40f5a1f4ab9b11dec139b4555f2ba5f385f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f15a40f5a1f4ab9b11dec139b4555f2ba5f385f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f311c3b4a64ad8752904a0261a306bf191e5fcdc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f311c3b4a64ad8752904a0261a306bf191e5fcdc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f311c3b4a64ad8752904a0261a306bf191e5fcdc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f311c3b4a64ad8752904a0261a306bf191e5fcdc/comments", "author": null, "committer": null, "parents": [{"sha": "40f1bdd962209529dff65187a9407656577b31b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40f1bdd962209529dff65187a9407656577b31b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40f1bdd962209529dff65187a9407656577b31b1"}], "stats": {"total": 118, "additions": 69, "deletions": 49}, "files": [{"sha": "d9a89d7950d93543d062a91441efe5a1593d5bc5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f311c3b4a64ad8752904a0261a306bf191e5fcdc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f311c3b4a64ad8752904a0261a306bf191e5fcdc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f311c3b4a64ad8752904a0261a306bf191e5fcdc", "patch": "@@ -1,3 +1,25 @@\n+2010-05-19  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* hooks.h (hook_tree_tree_tree_bool_null): Rename to...\n+\t(hook_tree_tree_int_treep_bool_null): ...this.  Update signature.\n+\t* hooks.c: Likewise.\n+\t* target-def.h (TARGET_FOLD_BUILTIN): Define to\n+\thook_tree_tree_int_treep_bool_null.\n+\t* target.h: (struct gcc_target): Update signature of fold_builtin\n+\tfield.\n+\t* doc/tm.texi (TARGET_FOLD_BUILTIN): Update description and signature.\n+\t* builtins.c (fold_call_expr): Pass call_expr_nargs and CALL_EXPR_ARGP\n+\tinstead of the call expression.\n+\t(fold_builtin_call_array): Pass n and argarray directly.\n+\t(fold_call_stmt): Pass nargs and gimple_call_arg_ptr instead of\n+\tconsing a list.\n+\t* config/alpha/alpha.c (alpha_fold_builtin): Update signature.  Lift\n+\tMAX_ARGS check out of the loop.  Delete declaration of `arity', declare\n+\t`i' and use it in place of `arity'.\n+\t* config/sparc/sparc.c (sparc_fold_builtin): Update signature.\n+\tDereference `args' directly.\n+\t* config/xtensa/xtensa (xtensa_fold_builtin): Likewise.\n+\n 2010-05-19  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* doc/sourcebuild.texi (Effective-Target Keywords): Document"}, {"sha": "6ad95adbc00bb1cc6be1a4e4c10a2de9fad2b87d", "filename": "gcc/builtins.c", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f311c3b4a64ad8752904a0261a306bf191e5fcdc/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f311c3b4a64ad8752904a0261a306bf191e5fcdc/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=f311c3b4a64ad8752904a0261a306bf191e5fcdc", "patch": "@@ -10702,7 +10702,8 @@ fold_call_expr (location_t loc, tree exp, bool ignore)\n \treturn NULL_TREE;\n \n       if (DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_MD)\n-        return targetm.fold_builtin (fndecl, exp, ignore);\n+        return targetm.fold_builtin (fndecl, call_expr_nargs (exp),\n+\t\t\t\t     CALL_EXPR_ARGP (exp), ignore);\n       else\n \t{\n \t  if (nargs <= MAX_ARGS_TO_FOLD_BUILTIN)\n@@ -10766,7 +10767,6 @@ fold_builtin_call_array (location_t loc, tree type,\n \t\t\t tree *argarray)\n {\n   tree ret = NULL_TREE;\n-  int i;\n    tree exp;\n \n   if (TREE_CODE (fn) == ADDR_EXPR)\n@@ -10790,12 +10790,10 @@ fold_builtin_call_array (location_t loc, tree type,\n \t  return build_call_array_loc (loc, type, fn, n, argarray);\n         if (DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_MD)\n           {\n-            tree arglist = NULL_TREE;\n-\t    for (i = n - 1; i >= 0; i--)\n-\t      arglist = tree_cons (NULL_TREE, argarray[i], arglist);\n-            ret = targetm.fold_builtin (fndecl, arglist, false);\n-            if (ret)\n-              return ret;\n+\t    ret = targetm.fold_builtin (fndecl, n, argarray, false);\n+\t    if (ret)\n+\t      return ret;\n+\n \t    return build_call_array_loc (loc, type, fn, n, argarray);\n           }\n         else if (n <= MAX_ARGS_TO_FOLD_BUILTIN)\n@@ -13698,14 +13696,10 @@ fold_call_stmt (gimple stmt, bool ignore)\n \n       if (avoid_folding_inline_builtin (fndecl))\n \treturn NULL_TREE;\n-      /* FIXME: Don't use a list in this interface.  */\n       if (DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_MD)\n         {\n-          tree arglist = NULL_TREE;\n-          int i;\n-          for (i = nargs - 1; i >= 0; i--)\n-            arglist = tree_cons (NULL_TREE, gimple_call_arg (stmt, i), arglist);\n-\t  return targetm.fold_builtin (fndecl, arglist, ignore);\n+\t  return targetm.fold_builtin (fndecl, nargs,\n+\t\t\t\t       gimple_call_arg_ptr (stmt, 0), ignore);\n         }\n       else\n \t{"}, {"sha": "2cc173f589a0d9b50f21bf15853605714451cae8", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f311c3b4a64ad8752904a0261a306bf191e5fcdc/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f311c3b4a64ad8752904a0261a306bf191e5fcdc/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=f311c3b4a64ad8752904a0261a306bf191e5fcdc", "patch": "@@ -7138,26 +7138,27 @@ alpha_fold_builtin_ctpop (unsigned HOST_WIDE_INT opint[], long op_const)\n /* Fold one of our builtin functions.  */\n \n static tree\n-alpha_fold_builtin (tree fndecl, tree call, bool ignore ATTRIBUTE_UNUSED)\n+alpha_fold_builtin (tree fndecl, int n_args, tree *op,\n+\t\t    bool ignore ATTRIBUTE_UNUSED)\n {\n-  tree *op = CALL_EXPR_ARGP (call);\n   unsigned HOST_WIDE_INT opint[MAX_ARGS];\n   long op_const = 0;\n-  int arity;\n+  int i;\n \n-  for (i = 0; i < call_expr_nargs (call); i++)\n+  if (n_args >= MAX_ARGS)\n+    return NULL;\n+\n+  for (i = 0; i < n_args; i++)\n     {\n-      tree arg = CALL_EXPR_ARG (call, i);\n+      tree arg = op[i];\n       if (arg == error_mark_node)\n \treturn NULL;\n-      if (arity >= MAX_ARGS)\n-\treturn NULL;\n \n-      opint[arity] = 0;\n+      opint[i] = 0;\n       if (TREE_CODE (arg) == INTEGER_CST)\n \t{\n-          op_const |= 1L << arity;\n-\t  opint[arity] = int_cst_value (arg);\n+          op_const |= 1L << i;\n+\t  opint[i] = int_cst_value (arg);\n \t}\n     }\n "}, {"sha": "9f9e20beb10cff8a4556e0e3f39fb28828332201", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f311c3b4a64ad8752904a0261a306bf191e5fcdc/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f311c3b4a64ad8752904a0261a306bf191e5fcdc/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=f311c3b4a64ad8752904a0261a306bf191e5fcdc", "patch": "@@ -386,7 +386,7 @@ static void sparc_init_libfuncs (void);\n static void sparc_init_builtins (void);\n static void sparc_vis_init_builtins (void);\n static rtx sparc_expand_builtin (tree, rtx, rtx, enum machine_mode, int);\n-static tree sparc_fold_builtin (tree, tree, bool);\n+static tree sparc_fold_builtin (tree, int, tree *, bool);\n static int sparc_vis_mul8x16 (int, int);\n static tree sparc_handle_vis_mul8x16 (int, tree, tree, tree);\n static void sparc_output_mi_thunk (FILE *, tree, HOST_WIDE_INT,\n@@ -8372,7 +8372,8 @@ sparc_handle_vis_mul8x16 (int fncode, tree inner_type, tree elts0, tree elts1)\n    function could not be folded.  */\n \n static tree\n-sparc_fold_builtin (tree fndecl, tree call, bool ignore)\n+sparc_fold_builtin (tree fndecl, int n_args ATTRIBUTE_UNUSED,\n+\t\t    tree *args, bool ignore)\n {\n   tree arg0, arg1, arg2;\n   tree rtype = TREE_TYPE (TREE_TYPE (fndecl));\n@@ -8386,7 +8387,7 @@ sparc_fold_builtin (tree fndecl, tree call, bool ignore)\n   switch (icode)\n     {\n     case CODE_FOR_fexpand_vis:\n-      arg0 = CALL_EXPR_ARG (call, 0);\n+      arg0 = args[0];\n       STRIP_NOPS (arg0);\n \n       if (TREE_CODE (arg0) == VECTOR_CST)\n@@ -8409,8 +8410,8 @@ sparc_fold_builtin (tree fndecl, tree call, bool ignore)\n     case CODE_FOR_fmul8x16_vis:\n     case CODE_FOR_fmul8x16au_vis:\n     case CODE_FOR_fmul8x16al_vis:\n-      arg0 = CALL_EXPR_ARG (call, 0);\n-      arg1 = CALL_EXPR_ARG (call, 1);\n+      arg0 = args[0];\n+      arg1 = args[1];\n       STRIP_NOPS (arg0);\n       STRIP_NOPS (arg1);\n \n@@ -8427,8 +8428,8 @@ sparc_fold_builtin (tree fndecl, tree call, bool ignore)\n       break;\n \n     case CODE_FOR_fpmerge_vis:\n-      arg0 = CALL_EXPR_ARG (call, 0);\n-      arg1 = CALL_EXPR_ARG (call, 1);\n+      arg0 = args[0];\n+      arg1 = args[1];\n       STRIP_NOPS (arg0);\n       STRIP_NOPS (arg1);\n \n@@ -8450,9 +8451,9 @@ sparc_fold_builtin (tree fndecl, tree call, bool ignore)\n       break;\n \n     case CODE_FOR_pdist_vis:\n-      arg0 = CALL_EXPR_ARG (call, 0);\n-      arg1 = CALL_EXPR_ARG (call, 1);\n-      arg2 = CALL_EXPR_ARG (call, 2);\n+      arg0 = args[0];\n+      arg1 = args[1];\n+      arg2 = args[2];\n       STRIP_NOPS (arg0);\n       STRIP_NOPS (arg1);\n       STRIP_NOPS (arg2);"}, {"sha": "97b941d5021dc7f518df49c63f574d8461b8a4b8", "filename": "gcc/config/xtensa/xtensa.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f311c3b4a64ad8752904a0261a306bf191e5fcdc/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f311c3b4a64ad8752904a0261a306bf191e5fcdc/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.c?ref=f311c3b4a64ad8752904a0261a306bf191e5fcdc", "patch": "@@ -142,7 +142,7 @@ static tree xtensa_gimplify_va_arg_expr (tree, tree, gimple_seq *,\n \t\t\t\t\t gimple_seq *);\n static rtx xtensa_function_value (const_tree, const_tree, bool);\n static void xtensa_init_builtins (void);\n-static tree xtensa_fold_builtin (tree, tree, bool);\n+static tree xtensa_fold_builtin (tree, int, tree *, bool);\n static rtx xtensa_expand_builtin (tree, rtx, rtx, enum machine_mode, int);\n static void xtensa_va_start (tree, rtx);\n static bool xtensa_frame_pointer_required (void);\n@@ -3000,16 +3000,17 @@ xtensa_init_builtins (void)\n \n \n static tree\n-xtensa_fold_builtin (tree fndecl, tree call, bool ignore ATTRIBUTE_UNUSED)\n+xtensa_fold_builtin (tree fndecl, int n_args ATTRIBUTE_UNUSED, tree *args,\n+\t\t     bool ignore ATTRIBUTE_UNUSED)\n {\n   unsigned int fcode = DECL_FUNCTION_CODE (fndecl);\n   tree arg0, arg1;\n \n   switch (fcode)\n     {\n     case XTENSA_BUILTIN_UMULSIDI3:\n-      arg0 = CALL_EXPR_ARG (call, 0);\n-      arg1 = CALL_EXPR_ARG (call, 1);\n+      arg0 = args[0];\n+      arg1 = args[1];\n       if ((TREE_CODE (arg0) == INTEGER_CST && TREE_CODE (arg1) == INTEGER_CST)\n \t  || TARGET_MUL32_HIGH)\n \treturn fold_build2 (MULT_EXPR, unsigned_intDI_type_node,"}, {"sha": "80e28a34b90d67208e9210e6532f95696bd0d9c1", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f311c3b4a64ad8752904a0261a306bf191e5fcdc/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f311c3b4a64ad8752904a0261a306bf191e5fcdc/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=f311c3b4a64ad8752904a0261a306bf191e5fcdc", "patch": "@@ -10784,14 +10784,14 @@ another @code{CALL_EXPR}.\n @var{arglist} really has type @samp{VEC(tree,gc)*}\n @end deftypefn\n \n-@deftypefn {Target Hook} tree TARGET_FOLD_BUILTIN (tree @var{fndecl}, tree @var{call}, bool @var{ignore})\n+@deftypefn {Target Hook} tree TARGET_FOLD_BUILTIN (tree @var{fndecl}, int @var{n_args}, tree *@var{argp}, bool @var{ignore})\n \n Fold a call to a machine specific built-in function that was set up by\n @samp{TARGET_INIT_BUILTINS}.  @var{fndecl} is the declaration of the\n-built-in function.  @var{call} is the @code{CALL_EXPR} representing\n-the call.  The result is another tree containing a\n-simplified expression for the call's result.  If @var{ignore} is true\n-the value will be ignored.\n+built-in function.  @var{n_args} is the number of arguments passed to\n+the function; the arguments themselves are pointed to by @var{argp}.\n+The result is another tree containing a simplified expression for the\n+call's result.  If @var{ignore} is true the value will be ignored.\n @end deftypefn\n \n @deftypefn {Target Hook} {const char *} TARGET_INVALID_WITHIN_DOLOOP (const_rtx @var{insn})"}, {"sha": "97e1064608820334e3425c0c11ea52ad98c63aad", "filename": "gcc/hooks.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f311c3b4a64ad8752904a0261a306bf191e5fcdc/gcc%2Fhooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f311c3b4a64ad8752904a0261a306bf191e5fcdc/gcc%2Fhooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.c?ref=f311c3b4a64ad8752904a0261a306bf191e5fcdc", "patch": "@@ -299,9 +299,10 @@ hook_constcharptr_const_tree_null (const_tree t ATTRIBUTE_UNUSED)\n }\n \n tree\n-hook_tree_tree_tree_bool_null (tree t0 ATTRIBUTE_UNUSED,\n-\t\t\t       tree t1 ATTRIBUTE_UNUSED,\n-\t\t\t       bool ignore ATTRIBUTE_UNUSED)\n+hook_tree_tree_int_treep_bool_null (tree t0 ATTRIBUTE_UNUSED,\n+\t\t\t\t    int i ATTRIBUTE_UNUSED,\n+\t\t\t\t    tree *p ATTRIBUTE_UNUSED,\n+\t\t\t\t    bool ignore ATTRIBUTE_UNUSED)\n {\n   return NULL;\n }"}, {"sha": "50280628ab8278e0760768be90aec98e64d3c5ce", "filename": "gcc/hooks.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f311c3b4a64ad8752904a0261a306bf191e5fcdc/gcc%2Fhooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f311c3b4a64ad8752904a0261a306bf191e5fcdc/gcc%2Fhooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.h?ref=f311c3b4a64ad8752904a0261a306bf191e5fcdc", "patch": "@@ -71,7 +71,7 @@ extern tree hook_tree_const_tree_null (const_tree);\n extern tree hook_tree_tree_tree_null (tree, tree);\n extern tree hook_tree_tree_tree_tree_null (tree, tree, tree);\n extern tree hook_tree_tree_tree_tree_3rd_identity (tree, tree, tree);\n-extern tree hook_tree_tree_tree_bool_null (tree, tree, bool);\n+extern tree hook_tree_tree_int_treep_bool_null (tree, int, tree *, bool);\n \n extern unsigned hook_uint_uint_constcharptrptr_0 (unsigned, const char **);\n "}, {"sha": "09da722b8d9a217e7badea9d1e6832c25e527ad2", "filename": "gcc/target-def.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f311c3b4a64ad8752904a0261a306bf191e5fcdc/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f311c3b4a64ad8752904a0261a306bf191e5fcdc/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=f311c3b4a64ad8752904a0261a306bf191e5fcdc", "patch": "@@ -456,7 +456,7 @@\n #define TARGET_INIT_BUILTINS hook_void_void\n #define TARGET_EXPAND_BUILTIN default_expand_builtin\n #define TARGET_RESOLVE_OVERLOADED_BUILTIN NULL\n-#define TARGET_FOLD_BUILTIN hook_tree_tree_tree_bool_null\n+#define TARGET_FOLD_BUILTIN hook_tree_tree_int_treep_bool_null\n #define TARGET_BUILTIN_DECL NULL\n \n /* In tree-ssa-math-opts.c  */"}, {"sha": "744790061a2f381fbdd1a1a041b30a10e898b4d2", "filename": "gcc/target.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f311c3b4a64ad8752904a0261a306bf191e5fcdc/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f311c3b4a64ad8752904a0261a306bf191e5fcdc/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=f311c3b4a64ad8752904a0261a306bf191e5fcdc", "patch": "@@ -616,7 +616,7 @@ struct gcc_target\n       \t\t\t\t      tree decl, void *params);\n \n   /* Fold a target-specific builtin.  */\n-  tree (* fold_builtin) (tree fndecl, tree arglist, bool ignore);\n+  tree (* fold_builtin) (tree fndecl, int nargs, tree *argp, bool ignore);\n \n   /* Returns a code for a target-specific builtin that implements\n      reciprocal of the function, or NULL_TREE if not available.  */"}]}