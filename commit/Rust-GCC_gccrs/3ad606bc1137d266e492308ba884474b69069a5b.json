{"sha": "3ad606bc1137d266e492308ba884474b69069a5b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2FkNjA2YmMxMTM3ZDI2NmU0OTIzMDhiYTg4NDQ3NGI2OTA2OWE1Yg==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2009-04-22T07:49:46Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2009-04-22T07:49:46Z"}, "message": "defaults.h (GO_IF_MODE_DEPENDENT_ADDRESS): Provide empty default.\n\n2009-04-22  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* defaults.h (GO_IF_MODE_DEPENDENT_ADDRESS): Provide empty default.\n\t* config/frv/frv.h (GO_IF_MODE_DEPENDENT_ADDRESS): Delete.\n\t* config/s390/s390.h (GO_IF_MODE_DEPENDENT_ADDRESS): Delete.\n\t* config/m32c/m32c.h (GO_IF_MODE_DEPENDENT_ADDRESS): Delete.\n\t* config/spu/spu.h (GO_IF_MODE_DEPENDENT_ADDRESS): Delete.\n\t* config/i386/i386.h (GO_IF_MODE_DEPENDENT_ADDRESS): Delete.\n\t* config/sh/sh.h (GO_IF_MODE_DEPENDENT_ADDRESS): Delete.\n\t* config/pdp11/pdp11.h (GO_IF_MODE_DEPENDENT_ADDRESS): Delete.\n\t* config/avr/avr.h (GO_IF_MODE_DEPENDENT_ADDRESS): Delete.\n\t* config/crx/crx.h (GO_IF_MODE_DEPENDENT_ADDRESS): Delete.\n\t* config/fr30/fr30.h (GO_IF_MODE_DEPENDENT_ADDRESS): Delete.\n\t* config/m68hc11/m68hc11.h (GO_IF_MODE_DEPENDENT_ADDRESS): Delete.\n\t* config/cris/cris.h (GO_IF_MODE_DEPENDENT_ADDRESS): Delete.\n\t* config/iq2000/iq2000.h (GO_IF_MODE_DEPENDENT_ADDRESS): Delete.\n\t* config/mn10300/mn10300.h (GO_IF_MODE_DEPENDENT_ADDRESS): Delete.\n\t* config/ia64/ia64.h (GO_IF_MODE_DEPENDENT_ADDRESS): Delete.\n\t* config/m68k/m68k.h (GO_IF_MODE_DEPENDENT_ADDRESS): Delete.\n\t* config/picochip/picochip.h (GO_IF_MODE_DEPENDENT_ADDRESS): Delete.\n\t* config/arc/arc.h (GO_IF_MODE_DEPENDENT_ADDRESS): Delete.\n\t* config/mcore/mcore.h (GO_IF_MODE_DEPENDENT_ADDRESS): Delete.\n\t* config/score/score.h (GO_IF_MODE_DEPENDENT_ADDRESS): Delete.\n\t* config/arm/arm.h (GO_IF_MODE_DEPENDENT_ADDRESS): Delete.\n\t* config/pa/pa.h (GO_IF_MODE_DEPENDENT_ADDRESS): Delete.\n\t* config/mips/mips.h (GO_IF_MODE_DEPENDENT_ADDRESS): Delete.\n\t* config/v850/v850.h (GO_IF_MODE_DEPENDENT_ADDRESS): Delete.\n\t* config/mmix/mmix.h (GO_IF_MODE_DEPENDENT_ADDRESS): Delete.\n\t* config/bfin/bfin.h (GO_IF_MODE_DEPENDENT_ADDRESS): Delete.\n\nFrom-SVN: r146548", "tree": {"sha": "eb12496de46f92352e8b8c74350d247eeda7d4f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb12496de46f92352e8b8c74350d247eeda7d4f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ad606bc1137d266e492308ba884474b69069a5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ad606bc1137d266e492308ba884474b69069a5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ad606bc1137d266e492308ba884474b69069a5b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ad606bc1137d266e492308ba884474b69069a5b/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0fb2335d4ccfbc928951ddeba5ead045a1dff172", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fb2335d4ccfbc928951ddeba5ead045a1dff172", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fb2335d4ccfbc928951ddeba5ead045a1dff172"}], "stats": {"total": 205, "additions": 41, "deletions": 164}, "files": [{"sha": "20b67e244b3fe81bc522fcf5efbad1a24d3c6f74", "filename": "gcc/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ad606bc1137d266e492308ba884474b69069a5b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ad606bc1137d266e492308ba884474b69069a5b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3ad606bc1137d266e492308ba884474b69069a5b", "patch": "@@ -1,3 +1,37 @@\n+2009-04-22  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* defaults.h (GO_IF_MODE_DEPENDENT_ADDRESS): Provide empty default.\n+\t* config/frv/frv.h (GO_IF_MODE_DEPENDENT_ADDRESS): Delete.\n+\t* config/s390/s390.h (GO_IF_MODE_DEPENDENT_ADDRESS): Delete.\n+\t* config/m32c/m32c.h (GO_IF_MODE_DEPENDENT_ADDRESS): Delete.\n+\t* config/spu/spu.h (GO_IF_MODE_DEPENDENT_ADDRESS): Delete.\n+\t* config/i386/i386.h (GO_IF_MODE_DEPENDENT_ADDRESS): Delete.\n+\t* config/sh/sh.h (GO_IF_MODE_DEPENDENT_ADDRESS): Delete.\n+\t* config/pdp11/pdp11.h (GO_IF_MODE_DEPENDENT_ADDRESS): Delete.\n+\t* config/avr/avr.h (GO_IF_MODE_DEPENDENT_ADDRESS): Delete.\n+\t* config/crx/crx.h (GO_IF_MODE_DEPENDENT_ADDRESS): Delete.\n+\t* config/fr30/fr30.h (GO_IF_MODE_DEPENDENT_ADDRESS): Delete.\n+\t* config/m68hc11/m68hc11.h (GO_IF_MODE_DEPENDENT_ADDRESS): Delete.\n+\t* config/cris/cris.h (GO_IF_MODE_DEPENDENT_ADDRESS): Delete.\n+\t* config/iq2000/iq2000.h (GO_IF_MODE_DEPENDENT_ADDRESS): Delete.\n+\t* config/mn10300/mn10300.h (GO_IF_MODE_DEPENDENT_ADDRESS): Delete.\n+\t* config/ia64/ia64.h (GO_IF_MODE_DEPENDENT_ADDRESS): Delete.\n+\t* config/m68k/m68k.h (GO_IF_MODE_DEPENDENT_ADDRESS): Delete.\n+\t* config/picochip/picochip.h (GO_IF_MODE_DEPENDENT_ADDRESS): Delete.\n+\t* config/arc/arc.h (GO_IF_MODE_DEPENDENT_ADDRESS): Delete.\n+\t* config/mcore/mcore.h (GO_IF_MODE_DEPENDENT_ADDRESS): Delete.\n+\t* config/score/score.h (GO_IF_MODE_DEPENDENT_ADDRESS): Delete.\n+\t* config/arm/arm.h (GO_IF_MODE_DEPENDENT_ADDRESS): Delete.\n+\t* config/pa/pa.h (GO_IF_MODE_DEPENDENT_ADDRESS): Delete.\n+\t* config/mips/mips.h (GO_IF_MODE_DEPENDENT_ADDRESS): Delete.\n+\t* config/v850/v850.h (GO_IF_MODE_DEPENDENT_ADDRESS): Delete.\n+\t* config/mmix/mmix.h (GO_IF_MODE_DEPENDENT_ADDRESS): Delete.\n+\t* config/bfin/bfin.h (GO_IF_MODE_DEPENDENT_ADDRESS): Delete.\n+\n+2009-04-22  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* config/sparc/sparc.h (POINTER_SIZE): Clarify comment.\n+\n 2009-04-22  Laurynas Biveinis  <laurynas.biveinis@gmail.com>\n \n \t* cfghooks.c (tidy_fallthru_edges): Remove find_basic_blocks"}, {"sha": "db6829bc560491e90dcd035562d6a4c7201e848e", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ad606bc1137d266e492308ba884474b69069a5b/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ad606bc1137d266e492308ba884474b69069a5b/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=3ad606bc1137d266e492308ba884474b69069a5b", "patch": "@@ -795,10 +795,6 @@ do { \\\n       && RTX_OK_FOR_BASE_P (XEXP ((X), 0)))\t\t\\\n     goto ADDR;\t\t\t\t\t\t\\\n }\n-\n-/* Go to LABEL if ADDR (a legitimate address expression)\n-   has an effect that depends on the machine mode it is used for.  */\n-#define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR, LABEL)\n \f\n /* Given a comparison code (EQ, NE, etc.) and the first operand of a COMPARE,\n    return the mode to be used for the comparison.  */"}, {"sha": "59ab1660478a1bd72cd0231cbd3099013963f194", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ad606bc1137d266e492308ba884474b69069a5b/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ad606bc1137d266e492308ba884474b69069a5b/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=3ad606bc1137d266e492308ba884474b69069a5b", "patch": "@@ -2234,19 +2234,6 @@ do {\t\t\t\t\t\t\t\\\n     goto WIN;\t\t\t\t\t\t\\\n } while (0)\n \n-/* Go to LABEL if ADDR (a legitimate address expression)\n-   has an effect that depends on the machine mode it is used for.  */\n-#define ARM_GO_IF_MODE_DEPENDENT_ADDRESS(ADDR, LABEL)  \t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (   GET_CODE (ADDR) == PRE_DEC || GET_CODE (ADDR) == POST_DEC\t\\\n-      || GET_CODE (ADDR) == PRE_INC || GET_CODE (ADDR) == POST_INC)\t\\\n-    goto LABEL;\t\t\t\t\t\t\t\t\\\n-}\n-\n-/* Nothing helpful to do for the Thumb */\n-#define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR, LABEL)\t\\\n-  if (TARGET_32BIT)\t\t\t\t\t\\\n-    ARM_GO_IF_MODE_DEPENDENT_ADDRESS (ADDR, LABEL)\n \f\n \n /* Specify the machine mode that this machine uses"}, {"sha": "cfcb5818fdcf2d9b2102f9033d025050d733489c", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ad606bc1137d266e492308ba884474b69069a5b/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ad606bc1137d266e492308ba884474b69069a5b/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=3ad606bc1137d266e492308ba884474b69069a5b", "patch": "@@ -494,8 +494,6 @@ do {\t\t\t\t\t\t\t\t\t    \\\n     }\t\t\t\t\t\t\t\t\t    \\\n } while(0)\n \n-#define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR,LABEL)\n-\n #define LEGITIMATE_CONSTANT_P(X) 1\n \n #define REGISTER_MOVE_COST(MODE, FROM, TO) ((FROM) == STACK_REG ? 6 \\"}, {"sha": "c4f6771d619f74aea5e22a8958f96802fb137ef2", "filename": "gcc/config/bfin/bfin.h", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ad606bc1137d266e492308ba884474b69069a5b/gcc%2Fconfig%2Fbfin%2Fbfin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ad606bc1137d266e492308ba884474b69069a5b/gcc%2Fconfig%2Fbfin%2Fbfin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.h?ref=3ad606bc1137d266e492308ba884474b69069a5b", "patch": "@@ -986,23 +986,6 @@ do {\t\t\t\t\t       \\\n  || GET_CODE (X) == LABEL_REF\t\t\t\t\t\t\\\n  || (GET_CODE (X) == CONST && symbolic_reference_mentioned_p (X)))\n \n-/*\n-     A C statement or compound statement with a conditional `goto\n-     LABEL;' executed if memory address X (an RTX) can have different\n-     meanings depending on the machine mode of the memory reference it\n-     is used for or if the address is valid for some modes but not\n-     others.\n-\n-     Autoincrement and autodecrement addresses typically have\n-     mode-dependent effects because the amount of the increment or\n-     decrement is the size of the operand being addressed.  Some\n-     machines have other mode-dependent addresses.  Many RISC machines\n-     have no mode-dependent addresses.\n-\n-     You may assume that ADDR is a valid address for the machine.\n-*/\n-#define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR,LABEL)\n-\n #define NOTICE_UPDATE_CC(EXPR, INSN) 0\n \n /* Value is 1 if truncating an integer of INPREC bits to OUTPREC bits"}, {"sha": "352be5578189b4dfe7b5218fa506907541d42de2", "filename": "gcc/config/cris/cris.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ad606bc1137d266e492308ba884474b69069a5b/gcc%2Fconfig%2Fcris%2Fcris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ad606bc1137d266e492308ba884474b69069a5b/gcc%2Fconfig%2Fcris%2Fcris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.h?ref=3ad606bc1137d266e492308ba884474b69069a5b", "patch": "@@ -1208,11 +1208,6 @@ struct cum_args {int regs;};\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n \n-/* In CRIS, only the postincrement address mode depends thus,\n-   since the increment depends on the size of the operand.  This is now\n-   treated generically within recog.c.  */\n-#define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR, LABEL)\n-\n #define LEGITIMATE_CONSTANT_P(X) 1\n \n "}, {"sha": "69065f3795b0437b93cceb4bf06aaefafd17ff59", "filename": "gcc/config/crx/crx.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ad606bc1137d266e492308ba884474b69069a5b/gcc%2Fconfig%2Fcrx%2Fcrx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ad606bc1137d266e492308ba884474b69069a5b/gcc%2Fconfig%2Fcrx%2Fcrx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcrx%2Fcrx.h?ref=3ad606bc1137d266e492308ba884474b69069a5b", "patch": "@@ -418,8 +418,6 @@ struct cumulative_args\n }\n #endif /* REG_OK_STRICT */\n \n-#define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR, LABEL)\n-\n #define LEGITIMATE_CONSTANT_P(X)  1\n \n /*****************************************************************************/"}, {"sha": "c1e8e0a9723aee4f3b2c8eb03091542fdcd8faca", "filename": "gcc/config/fr30/fr30.h", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ad606bc1137d266e492308ba884474b69069a5b/gcc%2Fconfig%2Ffr30%2Ffr30.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ad606bc1137d266e492308ba884474b69069a5b/gcc%2Fconfig%2Ffr30%2Ffr30.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.h?ref=3ad606bc1137d266e492308ba884474b69069a5b", "patch": "@@ -909,19 +909,6 @@ do\t\t\t\t\t\t\t\t\t\t\\\n    will reload one or both registers only if neither labeling works.  */\n #define REG_OK_FOR_INDEX_P(X) REG_OK_FOR_BASE_P (X)\n \n-/* A C statement or compound statement with a conditional `goto LABEL;'\n-   executed if memory address X (an RTX) can have different meanings depending\n-   on the machine mode of the memory reference it is used for or if the address\n-   is valid for some modes but not others.\n-\n-   Autoincrement and autodecrement addresses typically have mode-dependent\n-   effects because the amount of the increment or decrement is the size of the\n-   operand being addressed.  Some machines have other mode-dependent addresses.\n-   Many RISC machines have no mode-dependent addresses.\n-\n-   You may assume that ADDR is a valid address for the machine.  */\n-#define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR, LABEL)\n-\n /* A C expression that is nonzero if X is a legitimate constant for an\n    immediate operand on the target machine.  You can assume that X satisfies\n    `CONSTANT_P', so you need not check this.  In fact, `1' is a suitable"}, {"sha": "f96bbc001ee9033ec08c6fedc54cc19252d565b2", "filename": "gcc/config/frv/frv.h", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ad606bc1137d266e492308ba884474b69069a5b/gcc%2Fconfig%2Ffrv%2Ffrv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ad606bc1137d266e492308ba884474b69069a5b/gcc%2Fconfig%2Ffrv%2Ffrv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.h?ref=3ad606bc1137d266e492308ba884474b69069a5b", "patch": "@@ -2132,19 +2132,6 @@ do {\t\t\t\t\t\t\t\\\n \n #define FIND_BASE_TERM frv_find_base_term\n \n-/* A C statement or compound statement with a conditional `goto LABEL;'\n-   executed if memory address X (an RTX) can have different meanings depending\n-   on the machine mode of the memory reference it is used for or if the address\n-   is valid for some modes but not others.\n-\n-   Autoincrement and autodecrement addresses typically have mode-dependent\n-   effects because the amount of the increment or decrement is the size of the\n-   operand being addressed.  Some machines have other mode-dependent addresses.\n-   Many RISC machines have no mode-dependent addresses.\n-\n-   You may assume that ADDR is a valid address for the machine.  */\n-#define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR, LABEL)\n-\n /* A C expression that is nonzero if X is a legitimate constant for an\n    immediate operand on the target machine.  You can assume that X satisfies\n    `CONSTANT_P', so you need not check this.  In fact, `1' is a suitable"}, {"sha": "8979d5b81437561859f73668101a4c7cde1720bd", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ad606bc1137d266e492308ba884474b69069a5b/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ad606bc1137d266e492308ba884474b69069a5b/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=3ad606bc1137d266e492308ba884474b69069a5b", "patch": "@@ -1888,13 +1888,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n   (GET_CODE (X) == SYMBOL_REF\t\t\t\t\t\t\\\n    || GET_CODE (X) == LABEL_REF\t\t\t\t\t\t\\\n    || (GET_CODE (X) == CONST && symbolic_reference_mentioned_p (X)))\n-\n-/* Go to LABEL if ADDR (a legitimate address expression)\n-   has an effect that depends on the machine mode it is used for.\n-   On the 80386, only postdecrement and postincrement address depend thus\n-   (the amount of decrement or increment being the length of the operand).\n-   These are now caught in recog.c.  */\n-#define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR, LABEL)\n \f\n /* Max number of args passed in registers.  If this is more than 3, we will\n    have problems with ebx (register #4), since it is a caller save register and"}, {"sha": "217aaa5805300111d918b47ebd756dcb7d5e8e10", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ad606bc1137d266e492308ba884474b69069a5b/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ad606bc1137d266e492308ba884474b69069a5b/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=3ad606bc1137d266e492308ba884474b69069a5b", "patch": "@@ -1344,13 +1344,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n #define REG_OK_FOR_INDEX_P(X) REG_OK_FOR_BASE_P (X)\n \n-/* A C statement or compound statement with a conditional `goto LABEL;'\n-   executed if memory address X (an RTX) can have different meanings depending\n-   on the machine mode of the memory reference it is used for or if the address\n-   is valid for some modes but not others.  */\n-\n-#define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR, LABEL)\n-\n /* A C expression that is nonzero if X is a legitimate constant for an\n    immediate operand on the target machine.  */\n "}, {"sha": "916e4060a5ee8268148380009f49ff8bbfded79c", "filename": "gcc/config/iq2000/iq2000.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ad606bc1137d266e492308ba884474b69069a5b/gcc%2Fconfig%2Fiq2000%2Fiq2000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ad606bc1137d266e492308ba884474b69069a5b/gcc%2Fconfig%2Fiq2000%2Fiq2000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.h?ref=3ad606bc1137d266e492308ba884474b69069a5b", "patch": "@@ -612,8 +612,6 @@ typedef struct iq2000_args\n     GO_PRINTF (\"LEGITIMIZE_ADDRESS could not fix.\\n\");\t\t\t\\\n }\n \n-#define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR,LABEL) {}\n-\n #define LEGITIMATE_CONSTANT_P(X) (1)\n \n \f"}, {"sha": "e9bc711f684e212813241b6f1808f33cb780590f", "filename": "gcc/config/m32c/m32c.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ad606bc1137d266e492308ba884474b69069a5b/gcc%2Fconfig%2Fm32c%2Fm32c.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ad606bc1137d266e492308ba884474b69069a5b/gcc%2Fconfig%2Fm32c%2Fm32c.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c.h?ref=3ad606bc1137d266e492308ba884474b69069a5b", "patch": "@@ -595,8 +595,6 @@ typedef struct m32c_cumulative_args\n \tif (m32c_legitimize_reload_address(&(X),MODE,OPNUM,TYPE,IND_LEVELS)) \\\n \t  goto WIN;\n \n-#define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR,LABEL)\n-\n #define LEGITIMATE_CONSTANT_P(X) m32c_legitimate_constant_p (X)\n \n /* Condition Code Status */"}, {"sha": "ee28bb73eaa4bf1d53058cfd5301ec62fcb83bb5", "filename": "gcc/config/m68hc11/m68hc11.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ad606bc1137d266e492308ba884474b69069a5b/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ad606bc1137d266e492308ba884474b69069a5b/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h?ref=3ad606bc1137d266e492308ba884474b69069a5b", "patch": "@@ -1233,10 +1233,6 @@ extern unsigned char m68hc11_reg_valid_for_index[FIRST_PSEUDO_REGISTER];\n     }                                                           \\\n }\n \n-/* Go to LABEL if ADDR (a legitimate address expression)\n-   has an effect that depends on the machine mode it is used for.  */\n-#define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR,LABEL)\n-\n /* Nonzero if the constant value X is a legitimate general operand.\n    It is given that X satisfies CONSTANT_P or is a CONST_DOUBLE.  */\n "}, {"sha": "bb28e887aa9ec5edf014a96a97e05a188e77dd87", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ad606bc1137d266e492308ba884474b69069a5b/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ad606bc1137d266e492308ba884474b69069a5b/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=3ad606bc1137d266e492308ba884474b69069a5b", "patch": "@@ -816,11 +816,6 @@ __transfer_from_trampoline ()\t\t\t\t\t\\\n \t      && GET_CODE (XEXP (X, 1)) == REG)\t\t\t\t\\\n \t    X = force_operand (X, 0);\t\t\t\t\t\\\n \t  goto WIN; }}}\n-\n-/* On the 68000, only predecrement and postincrement address depend thus\n-   (the amount of decrement or increment being the length of the operand).\n-   These are now treated generically in recog.c.  */\n-#define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR,LABEL)\n \f\n #define CASE_VECTOR_MODE HImode\n #define CASE_VECTOR_PC_RELATIVE 1"}, {"sha": "224491ab05cff14c2480713e6b74f6d7493f29e6", "filename": "gcc/config/mcore/mcore.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ad606bc1137d266e492308ba884474b69069a5b/gcc%2Fconfig%2Fmcore%2Fmcore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ad606bc1137d266e492308ba884474b69069a5b/gcc%2Fconfig%2Fmcore%2Fmcore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.h?ref=3ad606bc1137d266e492308ba884474b69069a5b", "patch": "@@ -786,10 +786,6 @@ extern const enum reg_class reg_class_from_letter[];\n \tGO_IF_LEGITIMATE_INDEX (MODE, REGNO (xop1), xop0, LABEL); \\\n     }\t\t\t\t\t\t\t\t  \\\n }\t\t\t\t\t\t\t\t   \n-\t\t\t\t\t\t\t\t   \n-/* Go to LABEL if ADDR (a legitimate address expression)\n-   has an effect that depends on the machine mode it is used for.  */\n-#define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR,LABEL)\n \n /* Specify the machine mode that this machine uses\n    for the index in the tablejump instruction.  */"}, {"sha": "7e3d57e7300884df346a76ffc458a9eceb847a2b", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ad606bc1137d266e492308ba884474b69069a5b/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ad606bc1137d266e492308ba884474b69069a5b/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=3ad606bc1137d266e492308ba884474b69069a5b", "patch": "@@ -2525,21 +2525,6 @@ typedef struct mips_args {\n   } while (0)\n \n \n-/* A C statement or compound statement with a conditional `goto\n-   LABEL;' executed if memory address X (an RTX) can have different\n-   meanings depending on the machine mode of the memory reference it\n-   is used for.\n-\n-   Autoincrement and autodecrement addresses typically have\n-   mode-dependent effects because the amount of the increment or\n-   decrement is the size of the operand being addressed.  Some\n-   machines have other mode-dependent addresses.  Many RISC machines\n-   have no mode-dependent addresses.\n-\n-   You may assume that ADDR is a valid address for the machine.  */\n-\n-#define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR,LABEL) {}\n-\n /* This handles the magic '..CURRENT_FUNCTION' symbol, which means\n    'the start of the function that this code is output in'.  */\n "}, {"sha": "c479c465014c300af1731edbd978c9aaf97e6891", "filename": "gcc/config/mmix/mmix.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ad606bc1137d266e492308ba884474b69069a5b/gcc%2Fconfig%2Fmmix%2Fmmix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ad606bc1137d266e492308ba884474b69069a5b/gcc%2Fconfig%2Fmmix%2Fmmix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.h?ref=3ad606bc1137d266e492308ba884474b69069a5b", "patch": "@@ -710,8 +710,6 @@ typedef struct { int regs; int lib; } CUMULATIVE_ARGS;\n \n #define REG_OK_FOR_INDEX_P(X) REG_OK_FOR_BASE_P (X)\n \n-#define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR, LABEL)\n-\n #define LEGITIMATE_CONSTANT_P(X) \\\n  mmix_legitimate_constant_p (X)\n "}, {"sha": "7bd7f33d4bdefa55bbadfa12ff98336de44a8c21", "filename": "gcc/config/mn10300/mn10300.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ad606bc1137d266e492308ba884474b69069a5b/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ad606bc1137d266e492308ba884474b69069a5b/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.h?ref=3ad606bc1137d266e492308ba884474b69069a5b", "patch": "@@ -713,11 +713,6 @@ while (0)\n   if ((X) != orig_x && memory_address_p (MODE, X)) \\\n     goto WIN; }\n \n-/* Go to LABEL if ADDR (a legitimate address expression)\n-   has an effect that depends on the machine mode it is used for.  */\n-\n-#define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR,LABEL)\n-\n /* Nonzero if the constant value X is a legitimate general operand.\n    It is given that X satisfies CONSTANT_P or is a CONST_DOUBLE.  */\n "}, {"sha": "c1d589dc36bd065b74d763b37b5451de5bba1e9d", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ad606bc1137d266e492308ba884474b69069a5b/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ad606bc1137d266e492308ba884474b69069a5b/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=3ad606bc1137d266e492308ba884474b69069a5b", "patch": "@@ -1441,11 +1441,6 @@ do { \t\t\t\t\t\t\t\t\t\\\n   (X) = hppa_legitimize_address (X, OLDX, MODE);\t\\\n   if ((X) != orig_x && memory_address_p (MODE, X)) \\\n     goto WIN; }\n-\n-/* Go to LABEL if ADDR (a legitimate address expression)\n-   has an effect that depends on the machine mode it is used for.  */\n-\n-#define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR,LABEL)\n \f\n #define TARGET_ASM_SELECT_SECTION  pa_select_section\n "}, {"sha": "285b0e9cd6b5dc6718dc337cf673affd10c4598e", "filename": "gcc/config/pdp11/pdp11.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ad606bc1137d266e492308ba884474b69069a5b/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ad606bc1137d266e492308ba884474b69069a5b/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.h?ref=3ad606bc1137d266e492308ba884474b69069a5b", "patch": "@@ -754,14 +754,6 @@ extern int may_call_alloca;\n   fail: ;\t\t\t\t\t\t\t\t\\\n }\n \n-\f\n-/* Go to LABEL if ADDR (a legitimate address expression)\n-   has an effect that depends on the machine mode it is used for.\n-   On the pdp this is for predec/postinc, and this is now treated\n-   generically in recog.c.  */\n-\n-#define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR,LABEL)\n-\n \f\n /* Specify the machine mode that this machine uses\n    for the index in the tablejump instruction.  */"}, {"sha": "24613d634d79d68cb6028111ffc273da68bc936b", "filename": "gcc/config/picochip/picochip.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ad606bc1137d266e492308ba884474b69069a5b/gcc%2Fconfig%2Fpicochip%2Fpicochip.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ad606bc1137d266e492308ba884474b69069a5b/gcc%2Fconfig%2Fpicochip%2Fpicochip.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpicochip%2Fpicochip.h?ref=3ad606bc1137d266e492308ba884474b69069a5b", "patch": "@@ -535,9 +535,6 @@ extern const enum reg_class picochip_regno_reg_class[FIRST_PSEUDO_REGISTER];\n #define LEGITIMIZE_RELOAD_ADDRESS(X,MODE,OPNUM,TYPE,IND_LEVELS,WIN)\t     \\\n if (picochip_symbol_offset(X)) { X = gen_rtx_CONST(MODE, X); }\n \n-/* There are no mode dependent addresses.  */\n-#define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR,LABEL) do {} while (0)\n-\n /* Nonzero if the constant rtx X is a legitimate general operand.  X\n    satisfies CONSTANT_P.  */\n "}, {"sha": "c9eb60248fe04bf8c2c89daeac754d9977f5f09e", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ad606bc1137d266e492308ba884474b69069a5b/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ad606bc1137d266e492308ba884474b69069a5b/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=3ad606bc1137d266e492308ba884474b69069a5b", "patch": "@@ -748,9 +748,6 @@ legitimate_address_p.  The constraint letter defined here must not be\n used in insn definitions or inline assemblies.  */\n #define TARGET_MEM_CONSTRAINT 'e'\n \n-/* S/390 has no mode dependent addresses.  */\n-#define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR, LABEL)\n-\n /* GO_IF_LEGITIMATE_ADDRESS recognizes an RTL expression that is a\n    valid memory address for an instruction.\n    The MODE argument is the machine mode for the MEM expression"}, {"sha": "d2dd7405febae1005912dedbb6544aef36319097", "filename": "gcc/config/score/score.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ad606bc1137d266e492308ba884474b69069a5b/gcc%2Fconfig%2Fscore%2Fscore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ad606bc1137d266e492308ba884474b69069a5b/gcc%2Fconfig%2Fscore%2Fscore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fscore%2Fscore.h?ref=3ad606bc1137d266e492308ba884474b69069a5b", "patch": "@@ -784,10 +784,6 @@ typedef struct score_args\n       goto WIN;                                  \\\n   } while (0)\n \n-/* Go to LABEL if ADDR (a legitimate address expression)\n-   has an effect that depends on the machine mode it is used for.  */\n-#define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR, LABEL)       {}\n-\n #define LEGITIMATE_CONSTANT_P(X)        1\n \n /* Condition Code Status.  */"}, {"sha": "0fa6d37b84e22800492da4998b8fbf99e772aa53", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ad606bc1137d266e492308ba884474b69069a5b/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ad606bc1137d266e492308ba884474b69069a5b/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=3ad606bc1137d266e492308ba884474b69069a5b", "patch": "@@ -2592,18 +2592,6 @@ struct sh_args {\n       goto WIN;\t\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n }\n-\n-/* Go to LABEL if ADDR (a legitimate address expression)\n-   has an effect that depends on the machine mode it is used for.\n-\n-   ??? Strictly speaking, we should also include all indexed addressing,\n-   because the index scale factor is the length of the operand.\n-   However, the impact of GO_IF_MODE_DEPENDENT_ADDRESS would be to\n-   high if we did that.  So we rely on reload to fix things up.\n-\n-   Auto-increment addressing is now treated in recog.c.  */\n-\n-#define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR,LABEL)\n \f\n /* Specify the machine mode that this machine uses\n    for the index in the tablejump instruction.  */"}, {"sha": "ae84aac2775206b9ad0cca157c510d6a485276ef", "filename": "gcc/config/spu/spu.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ad606bc1137d266e492308ba884474b69069a5b/gcc%2Fconfig%2Fspu%2Fspu.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ad606bc1137d266e492308ba884474b69069a5b/gcc%2Fconfig%2Fspu%2Fspu.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.h?ref=3ad606bc1137d266e492308ba884474b69069a5b", "patch": "@@ -438,8 +438,6 @@ targetm.resolve_overloaded_builtin = spu_resolve_overloaded_builtin;\t\\\n        }\t\t\t\t\t\t\t\\\n   }\n \n-#define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR,LABEL)\n-\n #define LEGITIMATE_CONSTANT_P(X) spu_legitimate_constant_p(X)\n \n \f"}, {"sha": "79c293ab629232ae1e3bbb960fac0f62d48db1ce", "filename": "gcc/config/v850/v850.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ad606bc1137d266e492308ba884474b69069a5b/gcc%2Fconfig%2Fv850%2Fv850.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ad606bc1137d266e492308ba884474b69069a5b/gcc%2Fconfig%2Fv850%2Fv850.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.h?ref=3ad606bc1137d266e492308ba884474b69069a5b", "patch": "@@ -829,11 +829,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n } while (0)\n \n \f\n-/* Go to LABEL if ADDR (a legitimate address expression)\n-   has an effect that depends on the machine mode it is used for.  */\n-\n-#define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR,LABEL)  {}\n-\n /* Nonzero if the constant value X is a legitimate general operand.\n    It is given that X satisfies CONSTANT_P or is a CONST_DOUBLE.  */\n "}, {"sha": "53ba930fff2de85bfa6fe7eff89b7e326b7e3116", "filename": "gcc/defaults.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ad606bc1137d266e492308ba884474b69069a5b/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ad606bc1137d266e492308ba884474b69069a5b/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=3ad606bc1137d266e492308ba884474b69069a5b", "patch": "@@ -962,4 +962,11 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define ATTRIBUTE_ALIGNED_VALUE BIGGEST_ALIGNMENT\n #endif\n \n+/* Many ports have no mode-dependent addresses (except possibly autoincrement\n+   and autodecrement addresses, which are handled by target-independent code\n+   in recog.c).  */\n+#ifndef GO_IF_MODE_DEPENDENT_ADDRESS\n+#define GO_IF_MODE_DEPENDENT_ADDRESS(X, WIN)\n+#endif\n+\n #endif  /* ! GCC_DEFAULTS_H */"}]}