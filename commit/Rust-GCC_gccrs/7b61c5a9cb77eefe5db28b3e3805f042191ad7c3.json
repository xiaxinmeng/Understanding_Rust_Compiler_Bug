{"sha": "7b61c5a9cb77eefe5db28b3e3805f042191ad7c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2I2MWM1YTljYjc3ZWVmZTVkYjI4YjNlMzgwNWYwNDIxOTFhZDdjMw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2013-06-27T09:51:21Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2013-06-27T09:51:21Z"}, "message": "stl_deque.h (deque<>::insert(iterator, const value_type&), [...]): Adjust C++11 signatures to take a const_iterator.\n\n2013-06-27  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/stl_deque.h (deque<>::insert(iterator,\n\tconst value_type&), deque<>::insert(iterator, value_type&&),\n\tdeque<>::emplace(iterator, _Args&&...)): Adjust C++11 signatures to\n\ttake a const_iterator.\n\t(deque<>::erase): Simplify.\n\t* include/bits/stl_list.h: Likewise.\n\t(_List_iterator<>::_M_const_cast): Add.\n\t* include/bits/stl_vector.h: Likewise.\n\t* include/bits/stl_bvector.h: Likewise.\n\t(_Bit_iterator::_M_const_cast): Add.\n\t* include/bits/deque.tcc: Adjust definitions.\n\t* include/bits/list.tcc: Likewise.\n\t* include/bits/vector.tcc: Likewise.\n\t* include/bits/stl_iterator.h (__normal_iterator<>::_M_const_cast):\n\tDefine trivial version in C++98 mode.\n\t* include/ext/vstring.h (__versa_string<>::insert(iterator, _CharT),\n\t__versa_string<>::replace(iterator, iterator, const __versa_string&),\n\t__versa_string<>::replace(iterator, iterator, const _CharT*,\n\tsize_type), __versa_string<>::replace(iterator, iterator,\n\tconst _CharT*), __versa_string<>::replace(iterator, iterator,\n\tsize_type, _CharT)): Adjust C++11 signatures to take a pair of\n\tconst_iterators.\n\t* include/debug/deque: Adjust.\n\t* include/debug/list: Likewise.\n\t* include/debug/vector: Likewise.\n\t* include/profile/deque: Likewise.\n\t* include/profile/list: Likewise.\n\t* include/profile/vector: Likewise.\n\t(vector<>::emplace): Add.\n\t* testsuite/util/exception/safety.h: Update.\n\t* testsuite/23_containers/deque/modifiers/emplace/const_iterator.cc:\n\tNew.\n\t* testsuite/23_containers/deque/modifiers/insert/const_iterator.cc:\n\tLikewise.\n\t* testsuite/23_containers/list/modifiers/emplace/const_iterator.cc:\n\tLikewise.\n\t* testsuite/23_containers/list/modifiers/insert/const_iterator.cc:\n\tLikewise.\n\t* testsuite/23_containers/vector/bool/modifiers/insert/\n\tconst_iterator.cc: Likewise.\n\t* testsuite/23_containers/vector/modifiers/emplace/const_iterator.cc:\n\tLikewise.\n\t* testsuite/23_containers/vector/modifiers/insert/const_iterator.cc:\n\tLikewise.\n\t* testsuite/ext/vstring/modifiers/insert/char/const_iterator.cc:\n\tLikewise.\n\t* testsuite/ext/vstring/modifiers/insert/wchar_t/const_iterator.cc:\n\tLikewise.\n\t* testsuite/ext/vstring/modifiers/replace/char/const_iterator.cc:\n\tLikewise.\n\t* testsuite/ext/vstring/modifiers/replace/wchar_t/const_iterator.cc:\n\tLikewise.\n\n\t* testsuite/ext/vstring/modifiers/char/54577.cc: Move to testsuite/\n\text/vstring/modifiers/erase/char/.\n\t* testsuite/ext/vstring/modifiers/wchar_t/54577.cc: Move to testsuite/\n\text/vstring/modifiers/wchar_t/.\n\t* testsuite/ext/vstring/modifiers/char/pop_back.cc: Move to testsuite/\n\text/vstring/modifiers/pop_back/char/.\n\t* testsuite/ext/vstring/modifiers/wchar_t/pop_back.cc: Move to\n\ttestsuite/ext/vstring/modifiers/pop_back/wchar_t/.\n\n\t* testsuite/23_containers/deque/requirements/dr438/assign_neg.cc:\n\tAdjust dg-error line number.\n\t* testsuite/23_containers/deque/requirements/dr438/\n\tconstructor_1_neg.cc: Likewise.\n\t* testsuite/23_containers/deque/requirements/dr438/\n\tconstructor_2_neg.cc: Likewise.\n\t* testsuite/23_containers/deque/requirements/dr438/insert_neg.cc:\n\tLikewise.\n\t* testsuite/23_containers/list/requirements/dr438/assign_neg.cc:\n\tLikewise.\n\t* testsuite/23_containers/list/requirements/dr438/\n\tconstructor_1_neg.cc: Likewise.\n\t* testsuite/23_containers/list/requirements/dr438/\n\tconstructor_2_neg.cc: Likewise.\n\t* testsuite/23_containers/list/requirements/dr438/insert_neg.cc:\n\tLikewise.\n\t* testsuite/23_containers/vector/requirements/dr438/assign_neg.cc:\n\tLikewise.\n\t* testsuite/23_containers/vector/requirements/dr438/\n\tconstructor_1_neg.cc: Likewise.\n\t* testsuite/23_containers/vector/requirements/dr438/\n\tconstructor_2_neg.cc: Likewise.\n\t* testsuite/23_containers/vector/requirements/dr438/insert_neg.cc:\n\tLikewise.\n\nFrom-SVN: r200458", "tree": {"sha": "34f47ec02fbda70b1690f99110cc522ce6e593a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/34f47ec02fbda70b1690f99110cc522ce6e593a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/comments", "author": null, "committer": null, "parents": [{"sha": "5a3fe9b6077ab7fbc9dc200dc9621dabf939c7a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a3fe9b6077ab7fbc9dc200dc9621dabf939c7a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a3fe9b6077ab7fbc9dc200dc9621dabf939c7a9"}], "stats": {"total": 794, "additions": 623, "deletions": 171}, "files": [{"sha": "682b016f73c2e2940239094f05c2010c0a12d3a0", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7b61c5a9cb77eefe5db28b3e3805f042191ad7c3", "patch": "@@ -1,3 +1,92 @@\n+2013-06-27  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/stl_deque.h (deque<>::insert(iterator,\n+\tconst value_type&), deque<>::insert(iterator, value_type&&),\n+\tdeque<>::emplace(iterator, _Args&&...)): Adjust C++11 signatures to\n+\ttake a const_iterator.\n+\t(deque<>::erase): Simplify.\n+\t* include/bits/stl_list.h: Likewise.\n+\t(_List_iterator<>::_M_const_cast): Add.\n+\t* include/bits/stl_vector.h: Likewise.\n+\t* include/bits/stl_bvector.h: Likewise.\n+\t(_Bit_iterator::_M_const_cast): Add.\n+\t* include/bits/deque.tcc: Adjust definitions.\n+\t* include/bits/list.tcc: Likewise.\n+\t* include/bits/vector.tcc: Likewise.\n+\t* include/bits/stl_iterator.h (__normal_iterator<>::_M_const_cast):\n+\tDefine trivial version in C++98 mode.\n+\t* include/ext/vstring.h (__versa_string<>::insert(iterator, _CharT),\n+\t__versa_string<>::replace(iterator, iterator, const __versa_string&),\n+\t__versa_string<>::replace(iterator, iterator, const _CharT*,\n+\tsize_type), __versa_string<>::replace(iterator, iterator,\n+\tconst _CharT*), __versa_string<>::replace(iterator, iterator,\n+\tsize_type, _CharT)): Adjust C++11 signatures to take a pair of\n+\tconst_iterators.\n+\t* include/debug/deque: Adjust.\n+\t* include/debug/list: Likewise.\n+\t* include/debug/vector: Likewise.\n+\t* include/profile/deque: Likewise.\n+\t* include/profile/list: Likewise.\n+\t* include/profile/vector: Likewise.\n+\t(vector<>::emplace): Add.\n+\t* testsuite/util/exception/safety.h: Update.\n+\t* testsuite/23_containers/deque/modifiers/emplace/const_iterator.cc:\n+\tNew.\n+\t* testsuite/23_containers/deque/modifiers/insert/const_iterator.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/list/modifiers/emplace/const_iterator.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/list/modifiers/insert/const_iterator.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/vector/bool/modifiers/insert/\n+\tconst_iterator.cc: Likewise.\n+\t* testsuite/23_containers/vector/modifiers/emplace/const_iterator.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/vector/modifiers/insert/const_iterator.cc:\n+\tLikewise.\n+\t* testsuite/ext/vstring/modifiers/insert/char/const_iterator.cc:\n+\tLikewise.\n+\t* testsuite/ext/vstring/modifiers/insert/wchar_t/const_iterator.cc:\n+\tLikewise.\n+\t* testsuite/ext/vstring/modifiers/replace/char/const_iterator.cc:\n+\tLikewise.\n+\t* testsuite/ext/vstring/modifiers/replace/wchar_t/const_iterator.cc:\n+\tLikewise.\n+\n+\t* testsuite/ext/vstring/modifiers/char/54577.cc: Move to testsuite/\n+\text/vstring/modifiers/erase/char/.\n+\t* testsuite/ext/vstring/modifiers/wchar_t/54577.cc: Move to testsuite/\n+\text/vstring/modifiers/wchar_t/.\n+\t* testsuite/ext/vstring/modifiers/char/pop_back.cc: Move to testsuite/\n+\text/vstring/modifiers/pop_back/char/.\n+\t* testsuite/ext/vstring/modifiers/wchar_t/pop_back.cc: Move to\n+\ttestsuite/ext/vstring/modifiers/pop_back/wchar_t/.\n+\n+\t* testsuite/23_containers/deque/requirements/dr438/assign_neg.cc:\n+\tAdjust dg-error line number.\n+\t* testsuite/23_containers/deque/requirements/dr438/\n+\tconstructor_1_neg.cc: Likewise.\n+\t* testsuite/23_containers/deque/requirements/dr438/\n+\tconstructor_2_neg.cc: Likewise.\n+\t* testsuite/23_containers/deque/requirements/dr438/insert_neg.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/list/requirements/dr438/assign_neg.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/list/requirements/dr438/\n+\tconstructor_1_neg.cc: Likewise.\n+\t* testsuite/23_containers/list/requirements/dr438/\n+\tconstructor_2_neg.cc: Likewise.\n+\t* testsuite/23_containers/list/requirements/dr438/insert_neg.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/vector/requirements/dr438/assign_neg.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/vector/requirements/dr438/\n+\tconstructor_1_neg.cc: Likewise.\n+\t* testsuite/23_containers/vector/requirements/dr438/\n+\tconstructor_2_neg.cc: Likewise.\n+\t* testsuite/23_containers/vector/requirements/dr438/insert_neg.cc:\n+\tLikewise.\n+\n 2013-06-25  Ed Smith-Rowland  <3dw4rd@verizon.net>\n \n \tStatus page for C++2014 library features"}, {"sha": "9c33ad9b0dda528ba5cd978ec3cecbb72b95ed9c", "filename": "libstdc++-v3/include/bits/deque.tcc", "status": "modified", "additions": 28, "deletions": 23, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc?ref=7b61c5a9cb77eefe5db28b3e3805f042191ad7c3", "patch": "@@ -143,33 +143,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       }\n #endif\n \n-  template <typename _Tp, typename _Alloc>\n-    typename deque<_Tp, _Alloc>::iterator\n-    deque<_Tp, _Alloc>::\n-    insert(iterator __position, const value_type& __x)\n-    {\n-      if (__position._M_cur == this->_M_impl._M_start._M_cur)\n-\t{\n-\t  push_front(__x);\n-\t  return this->_M_impl._M_start;\n-\t}\n-      else if (__position._M_cur == this->_M_impl._M_finish._M_cur)\n-\t{\n-\t  push_back(__x);\n-\t  iterator __tmp = this->_M_impl._M_finish;\n-\t  --__tmp;\n-\t  return __tmp;\n-\t}\n-      else\n-        return _M_insert_aux(__position, __x);\n-    }\n-\n #if __cplusplus >= 201103L\n   template<typename _Tp, typename _Alloc>\n     template<typename... _Args>\n       typename deque<_Tp, _Alloc>::iterator\n       deque<_Tp, _Alloc>::\n-      emplace(iterator __position, _Args&&... __args)\n+      emplace(const_iterator __position, _Args&&... __args)\n       {\n \tif (__position._M_cur == this->_M_impl._M_start._M_cur)\n \t  {\n@@ -184,10 +163,36 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t    return __tmp;\n \t  }\n \telse\n-\t  return _M_insert_aux(__position, std::forward<_Args>(__args)...);\n+\t  return _M_insert_aux(__position._M_const_cast(),\n+\t\t\t       std::forward<_Args>(__args)...);\n       }\n #endif\n \n+  template <typename _Tp, typename _Alloc>\n+    typename deque<_Tp, _Alloc>::iterator\n+    deque<_Tp, _Alloc>::\n+#if __cplusplus >= 201103L\n+    insert(const_iterator __position, const value_type& __x)\n+#else\n+    insert(iterator __position, const value_type& __x)\n+#endif\n+    {\n+      if (__position._M_cur == this->_M_impl._M_start._M_cur)\n+\t{\n+\t  push_front(__x);\n+\t  return this->_M_impl._M_start;\n+\t}\n+      else if (__position._M_cur == this->_M_impl._M_finish._M_cur)\n+\t{\n+\t  push_back(__x);\n+\t  iterator __tmp = this->_M_impl._M_finish;\n+\t  --__tmp;\n+\t  return __tmp;\n+\t}\n+      else\n+\treturn _M_insert_aux(__position._M_const_cast(), __x);\n+   }\n+\n   template <typename _Tp, typename _Alloc>\n     typename deque<_Tp, _Alloc>::iterator\n     deque<_Tp, _Alloc>::"}, {"sha": "4f82e35c921d0602adf74b2b9748b2e2cfba16a2", "filename": "libstdc++-v3/include/bits/list.tcc", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc?ref=7b61c5a9cb77eefe5db28b3e3805f042191ad7c3", "patch": "@@ -85,21 +85,25 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     template<typename... _Args>\n       typename list<_Tp, _Alloc>::iterator\n       list<_Tp, _Alloc>::\n-      emplace(iterator __position, _Args&&... __args)\n+      emplace(const_iterator __position, _Args&&... __args)\n       {\n \t_Node* __tmp = _M_create_node(std::forward<_Args>(__args)...);\n-\t__tmp->_M_hook(__position._M_node);\n+\t__tmp->_M_hook(__position._M_const_cast()._M_node);\n \treturn iterator(__tmp);\n       }\n #endif\n \n   template<typename _Tp, typename _Alloc>\n     typename list<_Tp, _Alloc>::iterator\n     list<_Tp, _Alloc>::\n+#if __cplusplus >= 201103L\n+    insert(const_iterator __position, const value_type& __x)\n+#else\n     insert(iterator __position, const value_type& __x)\n+#endif\n     {\n       _Node* __tmp = _M_create_node(__x);\n-      __tmp->_M_hook(__position._M_node);\n+      __tmp->_M_hook(__position._M_const_cast()._M_node);\n       return iterator(__tmp);\n     }\n \n@@ -113,11 +117,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n #endif\n     {\n       iterator __ret = iterator(__position._M_node->_M_next);\n-#if __cplusplus >= 201103L\n       _M_erase(__position._M_const_cast());\n-#else\n-      _M_erase(__position);\n-#endif\n       return __ret;\n     }\n "}, {"sha": "489d819f06fc1907036e243c8713c97dc2261044", "filename": "libstdc++-v3/include/bits/stl_bvector.h", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h?ref=7b61c5a9cb77eefe5db28b3e3805f042191ad7c3", "patch": "@@ -222,6 +222,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     _Bit_iterator(_Bit_type * __x, unsigned int __y)\n     : _Bit_iterator_base(__x, __y) { }\n \n+    iterator\n+    _M_const_cast() const\n+    { return *this; }\n+\n     reference\n     operator*() const\n     { return reference(_M_p, 1UL << _M_offset); }\n@@ -859,14 +863,18 @@ template<typename _Alloc>\n     }\n \n     iterator\n+#if __cplusplus >= 201103L\n+    insert(const_iterator __position, const bool& __x = bool())\n+#else\n     insert(iterator __position, const bool& __x = bool())\n+#endif\n     {\n       const difference_type __n = __position - begin();\n       if (this->_M_impl._M_finish._M_p != this->_M_impl._M_end_of_storage\n \t  && __position == end())\n         *this->_M_impl._M_finish++ = __x;\n       else\n-        _M_insert_aux(__position, __x);\n+        _M_insert_aux(__position._M_const_cast(), __x);\n       return begin() + __n;\n     }\n \n@@ -904,20 +912,18 @@ template<typename _Alloc>\n     iterator\n #if __cplusplus >= 201103L\n     erase(const_iterator __position)\n-    { return _M_erase(__position._M_const_cast()); }\n #else\n     erase(iterator __position)\n-    { return _M_erase(__position); }\n #endif\n+    { return _M_erase(__position._M_const_cast()); }\n \n     iterator\n #if __cplusplus >= 201103L\n     erase(const_iterator __first, const_iterator __last)\n-    { return _M_erase(__first._M_const_cast(), __last._M_const_cast()); }\n #else\n     erase(iterator __first, iterator __last)\n-    { return _M_erase(__first, __last); }\n #endif\n+    { return _M_erase(__first._M_const_cast(), __last._M_const_cast()); }\n \n     void\n     resize(size_type __new_size, bool __x = bool())"}, {"sha": "a03ba256b53a15a47f5f4dfde110de61eb42030d", "filename": "libstdc++-v3/include/bits/stl_deque.h", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h?ref=7b61c5a9cb77eefe5db28b3e3805f042191ad7c3", "patch": "@@ -1458,7 +1458,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n #if __cplusplus >= 201103L\n       /**\n        *  @brief  Inserts an object in %deque before specified iterator.\n-       *  @param  __position  An iterator into the %deque.\n+       *  @param  __position  A const_iterator into the %deque.\n        *  @param  __args  Arguments.\n        *  @return  An iterator that points to the inserted data.\n        *\n@@ -1467,9 +1467,20 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        */\n       template<typename... _Args>\n         iterator\n-        emplace(iterator __position, _Args&&... __args);\n-#endif\n+        emplace(const_iterator __position, _Args&&... __args);\n \n+      /**\n+       *  @brief  Inserts given value into %deque before specified iterator.\n+       *  @param  __position  A const_iterator into the %deque.\n+       *  @param  __x  Data to be inserted.\n+       *  @return  An iterator that points to the inserted data.\n+       *\n+       *  This function will insert a copy of the given value before the\n+       *  specified location.\n+       */\n+      iterator\n+      insert(const_iterator __position, const value_type& __x);\n+#else\n       /**\n        *  @brief  Inserts given value into %deque before specified iterator.\n        *  @param  __position  An iterator into the %deque.\n@@ -1481,19 +1492,20 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        */\n       iterator\n       insert(iterator __position, const value_type& __x);\n+#endif\n \n #if __cplusplus >= 201103L\n       /**\n        *  @brief  Inserts given rvalue into %deque before specified iterator.\n-       *  @param  __position  An iterator into the %deque.\n+       *  @param  __position  A const_iterator into the %deque.\n        *  @param  __x  Data to be inserted.\n        *  @return  An iterator that points to the inserted data.\n        *\n        *  This function will insert a copy of the given rvalue before the\n        *  specified location.\n        */\n       iterator\n-      insert(iterator __position, value_type&& __x)\n+      insert(const_iterator __position, value_type&& __x)\n       { return emplace(__position, std::move(__x)); }\n \n       /**\n@@ -1568,11 +1580,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       iterator\n #if __cplusplus >= 201103L\n       erase(const_iterator __position)\n-      { return _M_erase(__position._M_const_cast()); }\n #else\n       erase(iterator __position)\n-      { return _M_erase(__position); }\n #endif\n+      { return _M_erase(__position._M_const_cast()); }\n \n       /**\n        *  @brief  Remove a range of elements.\n@@ -1593,11 +1604,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       iterator\n #if __cplusplus >= 201103L\n       erase(const_iterator __first, const_iterator __last)\n-      { return _M_erase(__first._M_const_cast(), __last._M_const_cast()); }\n #else\n       erase(iterator __first, iterator __last)\n-      { return _M_erase(__first, __last); }\n #endif\n+      { return _M_erase(__first._M_const_cast(), __last._M_const_cast()); }\n \n       /**\n        *  @brief  Swaps data with another %deque."}, {"sha": "9952c2c92d6bbe25563e3cfa3d938278417cbd99", "filename": "libstdc++-v3/include/bits/stl_iterator.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h?ref=7b61c5a9cb77eefe5db28b3e3805f042191ad7c3", "patch": "@@ -734,19 +734,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t      _Container>::__type>& __i)\n         : _M_current(__i.base()) { }\n \n+#if __cplusplus >= 201103L\n       __normal_iterator<typename _Container::pointer, _Container>\n       _M_const_cast() const\n       {\n-#if __cplusplus >= 201103L\n \tusing _PTraits = std::pointer_traits<typename _Container::pointer>;\n \treturn __normal_iterator<typename _Container::pointer, _Container>\n \t  (_PTraits::pointer_to(const_cast<typename _PTraits::element_type&>\n \t\t\t\t(*_M_current)));\n+      }\n #else\n-        return __normal_iterator<typename _Container::pointer, _Container>\n-\t  (const_cast<typename _Container::pointer>(_M_current));\n+      __normal_iterator\n+      _M_const_cast() const\n+      { return *this; }\n #endif\n-      }\n \n       // Forward iterator requirements\n       reference"}, {"sha": "7c3eb159abaf67b89476762e5f8cb92b886f40fc", "filename": "libstdc++-v3/include/bits/stl_list.h", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h?ref=7b61c5a9cb77eefe5db28b3e3805f042191ad7c3", "patch": "@@ -140,6 +140,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       _List_iterator(__detail::_List_node_base* __x)\n       : _M_node(__x) { }\n \n+      _Self\n+      _M_const_cast() const\n+      { return *this; }\n+\n       // Must downcast from _List_node_base to _List_node to get to _M_data.\n       reference\n       operator*() const\n@@ -1060,9 +1064,22 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        */\n       template<typename... _Args>\n         iterator\n-        emplace(iterator __position, _Args&&... __args);\n-#endif\n+        emplace(const_iterator __position, _Args&&... __args);\n \n+      /**\n+       *  @brief  Inserts given value into %list before specified iterator.\n+       *  @param  __position  A const_iterator into the %list.\n+       *  @param  __x  Data to be inserted.\n+       *  @return  An iterator that points to the inserted data.\n+       *\n+       *  This function will insert a copy of the given value before\n+       *  the specified location.  Due to the nature of a %list this\n+       *  operation can be done in constant time, and does not\n+       *  invalidate iterators and references.\n+       */\n+      iterator\n+      insert(const_iterator __position, const value_type& __x);\n+#else\n       /**\n        *  @brief  Inserts given value into %list before specified iterator.\n        *  @param  __position  An iterator into the %list.\n@@ -1076,11 +1093,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        */\n       iterator\n       insert(iterator __position, const value_type& __x);\n+#endif\n \n #if __cplusplus >= 201103L\n       /**\n        *  @brief  Inserts given rvalue into %list before specified iterator.\n-       *  @param  __position  An iterator into the %list.\n+       *  @param  __position  A const_iterator into the %list.\n        *  @param  __x  Data to be inserted.\n        *  @return  An iterator that points to the inserted data.\n        *\n@@ -1090,7 +1108,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  invalidate iterators and references.\n         */\n       iterator\n-      insert(iterator __position, value_type&& __x)\n+      insert(const_iterator __position, value_type&& __x)\n       { return emplace(__position, std::move(__x)); }\n \n       /**\n@@ -1206,11 +1224,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       {\n \twhile (__first != __last)\n \t  __first = erase(__first);\n-#if __cplusplus >= 201103L\n \treturn __last._M_const_cast();\n-#else\n-\treturn __last;\n-#endif\n       }\n \n       /**"}, {"sha": "a403b4f83bb33d366493fc67f42b8a3bd28ef478", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=7b61c5a9cb77eefe5db28b3e3805f042191ad7c3", "patch": "@@ -943,7 +943,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n #if __cplusplus >= 201103L\n       /**\n        *  @brief  Inserts an object in %vector before specified iterator.\n-       *  @param  __position  An iterator into the %vector.\n+       *  @param  __position  A const_iterator into the %vector.\n        *  @param  __args  Arguments.\n        *  @return  An iterator that points to the inserted data.\n        *\n@@ -955,9 +955,22 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        */\n       template<typename... _Args>\n         iterator\n-        emplace(iterator __position, _Args&&... __args);\n-#endif\n+        emplace(const_iterator __position, _Args&&... __args);\n \n+      /**\n+       *  @brief  Inserts given value into %vector before specified iterator.\n+       *  @param  __position  A const_iterator into the %vector.\n+       *  @param  __x  Data to be inserted.\n+       *  @return  An iterator that points to the inserted data.\n+       *\n+       *  This function will insert a copy of the given value before\n+       *  the specified location.  Note that this kind of operation\n+       *  could be expensive for a %vector and if it is frequently\n+       *  used the user should consider using std::list.\n+       */\n+      iterator\n+      insert(const_iterator __position, const value_type& __x);\n+#else\n       /**\n        *  @brief  Inserts given value into %vector before specified iterator.\n        *  @param  __position  An iterator into the %vector.\n@@ -971,11 +984,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        */\n       iterator\n       insert(iterator __position, const value_type& __x);\n+#endif\n \n #if __cplusplus >= 201103L\n       /**\n        *  @brief  Inserts given rvalue into %vector before specified iterator.\n-       *  @param  __position  An iterator into the %vector.\n+       *  @param  __position  A const_iterator into the %vector.\n        *  @param  __x  Data to be inserted.\n        *  @return  An iterator that points to the inserted data.\n        *\n@@ -985,7 +999,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  used the user should consider using std::list.\n        */\n       iterator\n-      insert(iterator __position, value_type&& __x)\n+      insert(const_iterator __position, value_type&& __x)\n       { return emplace(__position, std::move(__x)); }\n \n       /**\n@@ -1074,11 +1088,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       iterator\n #if __cplusplus >= 201103L\n       erase(const_iterator __position)\n-      { return _M_erase(__position._M_const_cast()); }\n #else\n       erase(iterator __position)\n-      { return _M_erase(__position); }\n #endif\n+      { return _M_erase(__position._M_const_cast()); }\n \n       /**\n        *  @brief  Remove a range of elements.\n@@ -1101,11 +1114,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       iterator\n #if __cplusplus >= 201103L\n       erase(const_iterator __first, const_iterator __last)\n-      { return _M_erase(__first._M_const_cast(), __last._M_const_cast()); }\n #else\n       erase(iterator __first, iterator __last)\n-      { return _M_erase(__first, __last); }\n #endif\n+      { return _M_erase(__first._M_const_cast(), __last._M_const_cast()); }\n \n       /**\n        *  @brief  Swaps data with another %vector.\n@@ -1119,7 +1131,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       void\n       swap(vector& __x)\n #if __cplusplus >= 201103L\n-\t\t\tnoexcept(_Alloc_traits::_S_nothrow_swap())\n+      noexcept(_Alloc_traits::_S_nothrow_swap())\n #endif\n       {\n \tthis->_M_impl._M_swap_data(__x._M_impl);"}, {"sha": "8e22d10a26e5a36e04a114cc5ebc5b9c45f18d7c", "filename": "libstdc++-v3/include/bits/vector.tcc", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc?ref=7b61c5a9cb77eefe5db28b3e3805f042191ad7c3", "patch": "@@ -105,7 +105,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n   template<typename _Tp, typename _Alloc>\n     typename vector<_Tp, _Alloc>::iterator\n     vector<_Tp, _Alloc>::\n+#if __cplusplus >= 201103L\n+    insert(const_iterator __position, const value_type& __x)\n+#else\n     insert(iterator __position, const value_type& __x)\n+#endif\n     {\n       const size_type __n = __position - begin();\n       if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage\n@@ -120,11 +124,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t  if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)\n \t    {\n \t      _Tp __x_copy = __x;\n-\t      _M_insert_aux(__position, std::move(__x_copy));\n+\t      _M_insert_aux(__position._M_const_cast(), std::move(__x_copy));\n \t    }\n \t  else\n #endif\n-\t    _M_insert_aux(__position, __x);\n+\t    _M_insert_aux(__position._M_const_cast(), __x);\n \t}\n       return iterator(this->_M_impl._M_start + __n);\n     }\n@@ -292,7 +296,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     template<typename... _Args>\n       typename vector<_Tp, _Alloc>::iterator\n       vector<_Tp, _Alloc>::\n-      emplace(iterator __position, _Args&&... __args)\n+      emplace(const_iterator __position, _Args&&... __args)\n       {\n \tconst size_type __n = __position - begin();\n \tif (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage\n@@ -303,7 +307,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t    ++this->_M_impl._M_finish;\n \t  }\n \telse\n-\t  _M_insert_aux(__position, std::forward<_Args>(__args)...);\n+\t  _M_insert_aux(__position._M_const_cast(),\n+\t\t\tstd::forward<_Args>(__args)...);\n \treturn iterator(this->_M_impl._M_start + __n);\n       }\n "}, {"sha": "638bf1cd3ca1e07accfa59ce07529e2f2d8e436d", "filename": "libstdc++-v3/include/debug/deque", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque?ref=7b61c5a9cb77eefe5db28b3e3805f042191ad7c3", "patch": "@@ -383,7 +383,7 @@ namespace __debug\n \n       template<typename... _Args>\n         iterator\n-        emplace(iterator __position, _Args&&... __args)\n+        emplace(const_iterator __position, _Args&&... __args)\n \t{\n \t  __glibcxx_check_insert(__position);\n \t  _Base_iterator __res = _Base::emplace(__position.base(),\n@@ -394,7 +394,11 @@ namespace __debug\n #endif\n \n       iterator\n+#if __cplusplus >= 201103L\n+      insert(const_iterator __position, const _Tp& __x)\n+#else\n       insert(iterator __position, const _Tp& __x)\n+#endif\n       {\n \t__glibcxx_check_insert(__position);\n \t_Base_iterator __res = _Base::insert(__position.base(), __x);\n@@ -404,7 +408,7 @@ namespace __debug\n \n #if __cplusplus >= 201103L\n       iterator\n-      insert(iterator __position, _Tp&& __x)\n+      insert(const_iterator __position, _Tp&& __x)\n       { return emplace(__position, std::move(__x)); }\n \n       void"}, {"sha": "c175de01f23a87a3808eca217cd6470ab8763d2c", "filename": "libstdc++-v3/include/debug/list", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist?ref=7b61c5a9cb77eefe5db28b3e3805f042191ad7c3", "patch": "@@ -379,24 +379,28 @@ namespace __debug\n #if __cplusplus >= 201103L\n       template<typename... _Args>\n         iterator\n-        emplace(iterator __position, _Args&&... __args)\n+        emplace(const_iterator __position, _Args&&... __args)\n \t{\n \t  __glibcxx_check_insert(__position);\n \t  return iterator(_Base::emplace(__position.base(),\n \t\t\t\t\tstd::forward<_Args>(__args)...), this);\n \t}\n #endif\n \n-      iterator\n-      insert(iterator __position, const _Tp& __x)\n-      {\n-\t__glibcxx_check_insert(__position);\n-\treturn iterator(_Base::insert(__position.base(), __x), this);\n-      }\n+     iterator\n+#if __cplusplus >= 201103L\n+     insert(const_iterator __position, const _Tp& __x)\n+#else\n+     insert(iterator __position, const _Tp& __x)\n+#endif\n+     {\n+       __glibcxx_check_insert(__position);\n+       return iterator(_Base::insert(__position.base(), __x), this);\n+     }\n \n #if __cplusplus >= 201103L\n       iterator\n-      insert(iterator __position, _Tp&& __x)\n+      insert(const_iterator __position, _Tp&& __x)\n       { return emplace(__position, std::move(__x)); }\n \n       void"}, {"sha": "f55dc67ede019e1ddb1256de63bda98dc38d9f36", "filename": "libstdc++-v3/include/debug/vector", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector?ref=7b61c5a9cb77eefe5db28b3e3805f042191ad7c3", "patch": "@@ -429,7 +429,7 @@ namespace __debug\n #if __cplusplus >= 201103L\n       template<typename... _Args>\n         iterator\n-        emplace(iterator __position, _Args&&... __args)\n+        emplace(const_iterator __position, _Args&&... __args)\n \t{\n \t  __glibcxx_check_insert(__position);\n \t  bool __realloc = _M_requires_reallocation(this->size() + 1);\n@@ -446,7 +446,11 @@ namespace __debug\n #endif\n \n       iterator\n+#if __cplusplus >= 201103L\n+      insert(const_iterator __position, const _Tp& __x)\n+#else\n       insert(iterator __position, const _Tp& __x)\n+#endif\n       {\n \t__glibcxx_check_insert(__position);\n \tbool __realloc = _M_requires_reallocation(this->size() + 1);\n@@ -464,7 +468,7 @@ namespace __debug\n       template<typename _Up = _Tp>\n         typename __gnu_cxx::__enable_if<!std::__are_same<_Up, bool>::__value,\n \t\t\t\t\titerator>::__type\n-        insert(iterator __position, _Tp&& __x)\n+        insert(const_iterator __position, _Tp&& __x)\n         { return emplace(__position, std::move(__x)); }\n \n       void"}, {"sha": "c78f2146a13d576f95063e3453cc73ff0dcbcbb7", "filename": "libstdc++-v3/include/ext/vstring.h", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h?ref=7b61c5a9cb77eefe5db28b3e3805f042191ad7c3", "patch": "@@ -1087,7 +1087,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  change if an error is thrown.\n       */\n       iterator\n-      insert(iterator __p, _CharT __c)\n+#if __cplusplus >= 201103L\n+      insert(const_iterator __p, _CharT __c)\n+#else\n+      insert(iterator __p, _CharT __c)\t\n+#endif\n       {\n \t_GLIBCXX_DEBUG_PEDASSERT(__p >= _M_ibegin() && __p <= _M_iend());\n \tconst size_type __pos = __p - _M_ibegin();\n@@ -1313,7 +1317,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  the string doesn't change if an error is thrown.\n       */\n       __versa_string&\n+#if __cplusplus >= 201103L\n+      replace(const_iterator __i1, const_iterator __i2,\n+\t      const __versa_string& __str)\n+#else\n       replace(iterator __i1, iterator __i2, const __versa_string& __str)\n+#endif\n       { return this->replace(__i1, __i2, __str._M_data(), __str.size()); }\n \n       /**\n@@ -1331,7 +1340,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  value of the string doesn't change if an error is thrown.\n       */\n       __versa_string&\n+#if __cplusplus >= 201103L\n+      replace(const_iterator __i1, const_iterator __i2,\n+\t      const _CharT* __s, size_type __n)\n+#else\n       replace(iterator __i1, iterator __i2, const _CharT* __s, size_type __n)\n+#endif\n       {\n \t_GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2\n \t\t\t\t && __i2 <= _M_iend());\n@@ -1352,7 +1366,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  the string doesn't change if an error is thrown.\n       */\n       __versa_string&\n-      replace(iterator __i1, iterator __i2, const _CharT* __s)\n+#if __cplusplus >= 201103L\n+      replace(const_iterator __i1, const_iterator __i2, const _CharT* __s)\n+#else\n+      replace(iterator __i1, iterator __i2, const _CharT* __s)\t\n+#endif\n       {\n \t__glibcxx_requires_string(__s);\n \treturn this->replace(__i1, __i2, __s, traits_type::length(__s));\n@@ -1373,7 +1391,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  the string doesn't change if an error is thrown.\n       */\n       __versa_string&\n+#if __cplusplus >= 201103L\n+      replace(const_iterator __i1, const_iterator __i2, size_type __n,\n+\t      _CharT __c)\n+#else\n       replace(iterator __i1, iterator __i2, size_type __n, _CharT __c)\n+#endif\n       {\n \t_GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2\n \t\t\t\t && __i2 <= _M_iend());"}, {"sha": "0ec98386baefcb0c5d41e18ab88f990077f3dee7", "filename": "libstdc++-v3/include/profile/deque", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fdeque", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fdeque", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fdeque?ref=7b61c5a9cb77eefe5db28b3e3805f042191ad7c3", "patch": "@@ -320,7 +320,7 @@ namespace __profile\n \n       template<typename... _Args>\n         iterator\n-        emplace(iterator __position, _Args&&... __args)\n+        emplace(const_iterator __position, _Args&&... __args)\n \t{\n \t  typename _Base::iterator __res = _Base::emplace(__position,\n \t\t\t\t\t    std::forward<_Args>(__args)...);\n@@ -329,15 +329,19 @@ namespace __profile\n #endif\n \n       iterator\n+#if __cplusplus >= 201103L\n+      insert(const_iterator __position, const _Tp& __x)\n+#else\n       insert(iterator __position, const _Tp& __x)\n+#endif\n       {\n \ttypename _Base::iterator __res = _Base::insert(__position, __x);\n \treturn iterator(__res);\n       }\n \n #if __cplusplus >= 201103L\n       iterator\n-      insert(iterator __position, _Tp&& __x)\n+      insert(const_iterator __position, _Tp&& __x)\n       { return emplace(__position, std::move(__x)); }\n \n       void"}, {"sha": "3a68bf7493a62b32ad3331be1d272cafe9f70eed", "filename": "libstdc++-v3/include/profile/list", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Flist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Flist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Flist?ref=7b61c5a9cb77eefe5db28b3e3805f042191ad7c3", "patch": "@@ -335,7 +335,7 @@ template<typename _Tp, typename _Allocator = std::allocator<_Tp> >\n #if __cplusplus >= 201103L\n       template<typename... _Args>\n         iterator\n-        emplace(iterator __position, _Args&&... __args)\n+        emplace(const_iterator __position, _Args&&... __args)\n \t{\n \t  return iterator(_Base::emplace(__position.base(),\n                                          std::forward<_Args>(__args)...),\n@@ -344,16 +344,20 @@ template<typename _Tp, typename _Allocator = std::allocator<_Tp> >\n #endif\n \n       iterator\n+#if __cplusplus >= 201103L\n+      insert(const_iterator __position, const _Tp& __x)\n+#else\n       insert(iterator __position, const _Tp& __x)\n+#endif\n       {\n         _M_profile_insert(this, __position, size());\n         return iterator(_Base::insert(__position.base(), __x), this);\n       }\n \n #if __cplusplus >= 201103L\n       iterator\n-      insert(iterator __position, _Tp&& __x)\n-      { \n+      insert(const_iterator __position, _Tp&& __x)\n+      {\n         _M_profile_insert(this, __position, size());\n         return iterator(_Base::emplace(__position.base(), std::move(__x)),\n                         this); \n@@ -606,11 +610,12 @@ template<typename _Tp, typename _Allocator = std::allocator<_Tp> >\n       }\n \n     private:\n-      size_type _M_profile_insert(void* obj, iterator __pos, size_type __size)\n+      size_type\n+      _M_profile_insert(void* obj, const_iterator __pos, size_type __size)\n       {\n         size_type __shift = 0;\n-        typename _Base::iterator __it = __pos.base();\n-        for ( ; __it!=_Base::end(); __it++)\n+        typename _Base::const_iterator __it = __pos.base();\n+        for (; __it != _Base::end(); ++__it)\n           __shift++;\n         __profcxx_list_rewind(this);\n         __profcxx_list_operation(this);"}, {"sha": "de058d0d8142f69e2c45b4915530de70463efaaf", "filename": "libstdc++-v3/include/profile/vector", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fvector?ref=7b61c5a9cb77eefe5db28b3e3805f042191ad7c3", "patch": "@@ -352,7 +352,11 @@ namespace __profile\n #endif\n \n       iterator\n+#if __cplusplus >= 201103L\n+      insert(const_iterator __position, const _Tp& __x)\n+#else\n       insert(iterator __position, const _Tp& __x)\n+#endif\n       {\n         __profcxx_vector_insert(this, __position.base() - _Base::begin(),\n                                 this->size());\n@@ -364,7 +368,7 @@ namespace __profile\n \n #if __cplusplus >= 201103L\n       iterator\n-      insert(iterator __position, _Tp&& __x)\n+      insert(const_iterator __position, _Tp&& __x)\n       {\n         __profcxx_vector_insert(this, __position.base() - _Base::begin(),\n                                 this->size());\n@@ -374,6 +378,16 @@ namespace __profile\n \treturn iterator(__res, this);\n       }\n \n+      template<typename... _Args>\n+        iterator\n+        emplace(const_iterator __position, _Args&&... __args)\n+        {\n+\t  typename _Base::iterator __res\n+\t    = _Base::emplace(__position.base(),\n+\t\t\t     std::forward<_Args>(__args)...);\n+\t  return iterator(__res, this);\n+\t}\n+\n       void\n       insert(iterator __position, initializer_list<value_type> __l)\n       { this->insert(__position, __l.begin(), __l.end()); }\n@@ -423,7 +437,6 @@ namespace __profile\n         _M_profile_resize(this, __old_size, this->capacity());\n       }\n \n-\n       iterator\n #if __cplusplus >= 201103L\n       erase(const_iterator __position)"}, {"sha": "d4898b3d202aea230c2e6f816b51279e546b6bb8", "filename": "libstdc++-v3/testsuite/23_containers/deque/modifiers/emplace/const_iterator.cc", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fmodifiers%2Femplace%2Fconst_iterator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fmodifiers%2Femplace%2Fconst_iterator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fmodifiers%2Femplace%2Fconst_iterator.cc?ref=7b61c5a9cb77eefe5db28b3e3805f042191ad7c3", "patch": "@@ -0,0 +1,27 @@\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <deque>\n+\n+void test01()\n+{\n+  std::deque<int> d1;\n+  d1.emplace(d1.cbegin(), 1);\n+}"}, {"sha": "915aa688a91e2bb4040c302b035027c68c16e93f", "filename": "libstdc++-v3/testsuite/23_containers/deque/modifiers/insert/const_iterator.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fmodifiers%2Finsert%2Fconst_iterator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fmodifiers%2Finsert%2Fconst_iterator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fmodifiers%2Finsert%2Fconst_iterator.cc?ref=7b61c5a9cb77eefe5db28b3e3805f042191ad7c3", "patch": "@@ -0,0 +1,29 @@\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <deque>\n+\n+void test01()\n+{\n+  std::deque<int> d1;\n+  int n = 0;\n+  d1.insert(d1.cbegin(), n);\n+  d1.insert(d1.cbegin(), 1);\n+}"}, {"sha": "9788b4d952d980debe3104894723908d5f5df972", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/dr438/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fassign_neg.cc?ref=7b61c5a9cb77eefe5db28b3e3805f042191ad7c3", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1714 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1724 }\n \n #include <deque>\n "}, {"sha": "a85b5c3f9f8fa872b8f38bf96aa2d0f62bb4a473", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/dr438/constructor_1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc?ref=7b61c5a9cb77eefe5db28b3e3805f042191ad7c3", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1647 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1657 }\n \n #include <deque>\n "}, {"sha": "162bdf0bf95af104d295054850c5ae0b9c6da930", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/dr438/constructor_2_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc?ref=7b61c5a9cb77eefe5db28b3e3805f042191ad7c3", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1647 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1657 }\n \n #include <deque>\n #include <utility>"}, {"sha": "7e8356fd7632f9bb47d38a190ee5f76bb1c7135c", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/dr438/insert_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Finsert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Finsert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Finsert_neg.cc?ref=7b61c5a9cb77eefe5db28b3e3805f042191ad7c3", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1798 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1808 }\n \n #include <deque>\n "}, {"sha": "d5aef75d61ea72c00acc9472787c3e03abab5093", "filename": "libstdc++-v3/testsuite/23_containers/list/modifiers/emplace/const_iterator.cc", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2Femplace%2Fconst_iterator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2Femplace%2Fconst_iterator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2Femplace%2Fconst_iterator.cc?ref=7b61c5a9cb77eefe5db28b3e3805f042191ad7c3", "patch": "@@ -0,0 +1,27 @@\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <list>\n+\n+void test01()\n+{\n+  std::list<int> l1;\n+  l1.emplace(l1.cbegin(), 1);\n+}"}, {"sha": "156bc0a58cb7c3f088df3d121f2b2b390abdc68e", "filename": "libstdc++-v3/testsuite/23_containers/list/modifiers/insert/const_iterator.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2Finsert%2Fconst_iterator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2Finsert%2Fconst_iterator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2Finsert%2Fconst_iterator.cc?ref=7b61c5a9cb77eefe5db28b3e3805f042191ad7c3", "patch": "@@ -0,0 +1,29 @@\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <list>\n+\n+void test01()\n+{\n+  std::list<int> l1;\n+  int n = 0;\n+  l1.insert(l1.cbegin(), n);\n+  l1.insert(l1.cbegin(), 1);\n+}"}, {"sha": "218b862e34868b4de3915b2eed2c96840eb6cbbb", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fassign_neg.cc?ref=7b61c5a9cb77eefe5db28b3e3805f042191ad7c3", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1545 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1559 }\n \n #include <list>\n "}, {"sha": "3f0b74939b1f39e6fd5a65b2d4ffe9dc111afeaa", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/constructor_1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc?ref=7b61c5a9cb77eefe5db28b3e3805f042191ad7c3", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1497 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1511 }\n \n #include <list>\n "}, {"sha": "b861f46fde2601af8a59cabe5d96e78cd7ec5c5f", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/constructor_2_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc?ref=7b61c5a9cb77eefe5db28b3e3805f042191ad7c3", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1497 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1511 }\n \n #include <list>\n #include <utility>"}, {"sha": "fd38c0b36d611c13cffb2accf7e0716edc578aa3", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/insert_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Finsert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Finsert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Finsert_neg.cc?ref=7b61c5a9cb77eefe5db28b3e3805f042191ad7c3", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1497 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1511 }\n \n #include <list>\n "}, {"sha": "b8993d84342190116c3a99244a1616979e60f404", "filename": "libstdc++-v3/testsuite/23_containers/vector/bool/modifiers/insert/const_iterator.cc", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Fmodifiers%2Finsert%2Fconst_iterator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Fmodifiers%2Finsert%2Fconst_iterator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Fmodifiers%2Finsert%2Fconst_iterator.cc?ref=7b61c5a9cb77eefe5db28b3e3805f042191ad7c3", "patch": "@@ -0,0 +1,27 @@\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <vector>\n+\n+void test01()\n+{\n+  std::vector<bool> vb1;\n+  vb1.insert(vb1.cbegin(), true);\n+}"}, {"sha": "8e2a194ac179a11edb6e48d229d506c20da390d6", "filename": "libstdc++-v3/testsuite/23_containers/vector/modifiers/emplace/const_iterator.cc", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fmodifiers%2Femplace%2Fconst_iterator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fmodifiers%2Femplace%2Fconst_iterator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fmodifiers%2Femplace%2Fconst_iterator.cc?ref=7b61c5a9cb77eefe5db28b3e3805f042191ad7c3", "patch": "@@ -0,0 +1,27 @@\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <vector>\n+\n+void test01()\n+{\n+  std::vector<int> v1;\n+  v1.emplace(v1.cbegin(), 1);\n+}"}, {"sha": "5e5ef9e37398ed128f8b3c8d2399c33fe9577996", "filename": "libstdc++-v3/testsuite/23_containers/vector/modifiers/insert/const_iterator.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fmodifiers%2Finsert%2Fconst_iterator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fmodifiers%2Finsert%2Fconst_iterator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fmodifiers%2Finsert%2Fconst_iterator.cc?ref=7b61c5a9cb77eefe5db28b3e3805f042191ad7c3", "patch": "@@ -0,0 +1,29 @@\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <vector>\n+\n+void test01()\n+{\n+  std::vector<int> v1;\n+  int n = 0;\n+  v1.insert(v1.cbegin(), n);\n+  v1.insert(v1.cbegin(), 1);\n+}"}, {"sha": "e94346772821cbbb0c2bd6a7df0712dc8e3aee74", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fassign_neg.cc?ref=7b61c5a9cb77eefe5db28b3e3805f042191ad7c3", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1252 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1264 }\n \n #include <vector>\n "}, {"sha": "ba14bcef2addc5e67a56b19f87faa69f291c9d10", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/constructor_1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc?ref=7b61c5a9cb77eefe5db28b3e3805f042191ad7c3", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1178 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1190 }\n \n #include <vector>\n "}, {"sha": "c9ac43782c4f4b97052331798cc9b8c51b645e9d", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/constructor_2_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc?ref=7b61c5a9cb77eefe5db28b3e3805f042191ad7c3", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1178 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1190 }\n \n #include <vector>\n #include <utility>"}, {"sha": "343edc2c7f3a4b92fa02e307e6251a6ee81d1855", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/insert_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Finsert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Finsert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Finsert_neg.cc?ref=7b61c5a9cb77eefe5db28b3e3805f042191ad7c3", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1293 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1305 }\n \n #include <vector>\n "}, {"sha": "979828bb10e3bb296bcafc82609ce3b227501384", "filename": "libstdc++-v3/testsuite/ext/vstring/modifiers/erase/char/54577.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fmodifiers%2Ferase%2Fchar%2F54577.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fmodifiers%2Ferase%2Fchar%2F54577.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fmodifiers%2Ferase%2Fchar%2F54577.cc?ref=7b61c5a9cb77eefe5db28b3e3805f042191ad7c3", "previous_filename": "libstdc++-v3/testsuite/ext/vstring/modifiers/char/54577.cc"}, {"sha": "f514099972b6fe0bff2bd4e0582fe32494cbf22b", "filename": "libstdc++-v3/testsuite/ext/vstring/modifiers/erase/wchar_t/54577.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fmodifiers%2Ferase%2Fwchar_t%2F54577.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fmodifiers%2Ferase%2Fwchar_t%2F54577.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fmodifiers%2Ferase%2Fwchar_t%2F54577.cc?ref=7b61c5a9cb77eefe5db28b3e3805f042191ad7c3", "previous_filename": "libstdc++-v3/testsuite/ext/vstring/modifiers/wchar_t/54577.cc"}, {"sha": "223ab66ab7d685852a4eec615492d5aae351cf4c", "filename": "libstdc++-v3/testsuite/ext/vstring/modifiers/insert/char/const_iterator.cc", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fmodifiers%2Finsert%2Fchar%2Fconst_iterator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fmodifiers%2Finsert%2Fchar%2Fconst_iterator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fmodifiers%2Finsert%2Fchar%2Fconst_iterator.cc?ref=7b61c5a9cb77eefe5db28b3e3805f042191ad7c3", "patch": "@@ -0,0 +1,27 @@\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <ext/vstring.h>\n+\n+void test01() \n+{\n+  __gnu_cxx::__vstring vs1;\n+  vs1.insert(vs1.cbegin(), '1');\n+}"}, {"sha": "57fee54fdc46c3cafdd13f464283a2207e561683", "filename": "libstdc++-v3/testsuite/ext/vstring/modifiers/insert/wchar_t/const_iterator.cc", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fmodifiers%2Finsert%2Fwchar_t%2Fconst_iterator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fmodifiers%2Finsert%2Fwchar_t%2Fconst_iterator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fmodifiers%2Finsert%2Fwchar_t%2Fconst_iterator.cc?ref=7b61c5a9cb77eefe5db28b3e3805f042191ad7c3", "patch": "@@ -0,0 +1,27 @@\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <ext/vstring.h>\n+\n+void test01() \n+{\n+  __gnu_cxx::__wvstring wvs1;\n+  wvs1.insert(wvs1.cbegin(), L'1');\n+}"}, {"sha": "cec1d226079a845774182cdb9ae37fc89d606acd", "filename": "libstdc++-v3/testsuite/ext/vstring/modifiers/pop_back/char/1.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fmodifiers%2Fpop_back%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fmodifiers%2Fpop_back%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fmodifiers%2Fpop_back%2Fchar%2F1.cc?ref=7b61c5a9cb77eefe5db28b3e3805f042191ad7c3", "previous_filename": "libstdc++-v3/testsuite/ext/vstring/modifiers/char/pop_back.cc"}, {"sha": "ee8de53a9150ec100d634ffdf1765dcbe5f8f6ba", "filename": "libstdc++-v3/testsuite/ext/vstring/modifiers/pop_back/wchar_t/1.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fmodifiers%2Fpop_back%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fmodifiers%2Fpop_back%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fmodifiers%2Fpop_back%2Fwchar_t%2F1.cc?ref=7b61c5a9cb77eefe5db28b3e3805f042191ad7c3", "previous_filename": "libstdc++-v3/testsuite/ext/vstring/modifiers/wchar_t/pop_back.cc"}, {"sha": "0838443db77c3c496908c1241eec30555d473d48", "filename": "libstdc++-v3/testsuite/ext/vstring/modifiers/replace/char/const_iterator.cc", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fmodifiers%2Freplace%2Fchar%2Fconst_iterator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fmodifiers%2Freplace%2Fchar%2Fconst_iterator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fmodifiers%2Freplace%2Fchar%2Fconst_iterator.cc?ref=7b61c5a9cb77eefe5db28b3e3805f042191ad7c3", "patch": "@@ -0,0 +1,30 @@\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <ext/vstring.h>\n+\n+void test01() \n+{\n+  __gnu_cxx::__vstring vs1;\n+  vs1.replace(vs1.cbegin(), vs1.cend(), vs1);\n+  vs1.replace(vs1.cbegin(), vs1.cend(), \"1\", 1);\n+  vs1.replace(vs1.cbegin(), vs1.cend(), \"2\");\n+  vs1.replace(vs1.cbegin(), vs1.cend(), 1, '3');\n+}"}, {"sha": "a909c9ca5a4f752ba0b61536dff686b9d0c4c148", "filename": "libstdc++-v3/testsuite/ext/vstring/modifiers/replace/wchar_t/const_iterator.cc", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fmodifiers%2Freplace%2Fwchar_t%2Fconst_iterator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fmodifiers%2Freplace%2Fwchar_t%2Fconst_iterator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fmodifiers%2Freplace%2Fwchar_t%2Fconst_iterator.cc?ref=7b61c5a9cb77eefe5db28b3e3805f042191ad7c3", "patch": "@@ -0,0 +1,30 @@\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <ext/vstring.h>\n+\n+void test01() \n+{\n+  __gnu_cxx::__wvstring wvs1;\n+  wvs1.replace(wvs1.cbegin(), wvs1.cend(), wvs1);\n+  wvs1.replace(wvs1.cbegin(), wvs1.cend(), L\"1\", 1);\n+  wvs1.replace(wvs1.cbegin(), wvs1.cend(), L\"2\");\n+  wvs1.replace(wvs1.cbegin(), wvs1.cend(), 1, L'3');\n+}"}, {"sha": "5ba9b13ce375069a0406137598d14f39c13a2ef1", "filename": "libstdc++-v3/testsuite/util/exception/safety.h", "status": "modified", "additions": 9, "deletions": 65, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fexception%2Fsafety.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b61c5a9cb77eefe5db28b3e3805f042191ad7c3/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fexception%2Fsafety.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fexception%2Fsafety.h?ref=7b61c5a9cb77eefe5db28b3e3805f042191ad7c3", "patch": "@@ -265,7 +265,7 @@ namespace __gnu_test\n \t: _F_erase_point(&_Tp::erase), _F_erase_range(&_Tp::erase) { }\n       };\n \n-    // Specializations, old C++03 signatures.\n+    // Specialization, old C++03 signature.\n     template<typename _Tp1, typename _Tp2, typename _Tp3>\n       struct erase_base<std::basic_string<_Tp1, _Tp2, _Tp3>>\n       {\n@@ -280,24 +280,6 @@ namespace __gnu_test\n \t  _F_erase_range(&container_type::erase) { }\n       };\n \n-    template<typename _Tp1, typename _Tp2, typename _Tp3,\n-\t     template <typename, typename, typename> class _Tp4>\n-      struct erase_base<__gnu_cxx::__versa_string<_Tp1, _Tp2, _Tp3, _Tp4>>\n-      {\n-\ttypedef __gnu_cxx::__versa_string<_Tp1, _Tp2, _Tp3, _Tp4>\n-\t                                                container_type;\n-\ttypedef typename container_type::iterator \titerator;\n-\ttypedef typename container_type::const_iterator const_iterator;\n-\n-\titerator (container_type::* _F_erase_point)(const_iterator);\n-\titerator (container_type::* _F_erase_range)(const_iterator,\n-\t\t\t\t\t\t    const_iterator);\n-\n-\terase_base()\n-\t: _F_erase_point(&container_type::erase),\n-\t  _F_erase_range(&container_type::erase) { }\n-      };\n-\n     // Specialization, as forward_list has erase_after.\n     template<typename _Tp1, typename _Tp2>\n       struct erase_base<std::forward_list<_Tp1, _Tp2>>\n@@ -698,47 +680,7 @@ namespace __gnu_test\n \tinsert_base() : _F_insert_point(&_Tp::insert) { }\n       };\n \n-    // Specializations, old C++03 signatures.\n-    template<typename _Tp1, typename _Tp2>\n-      struct insert_base<std::deque<_Tp1, _Tp2>>\n-      {\n-\ttypedef std::deque<_Tp1, _Tp2> \t                container_type;\n-\ttypedef typename container_type::iterator \titerator;\n-\ttypedef typename container_type::value_type \tvalue_type;\n-\n-\titerator (container_type::* _F_insert_point)(iterator,\n-\t\t\t\t\t\t     const value_type&);\n-\n-\tinsert_base() : _F_insert_point(&container_type::insert) { }\n-      };\n-\n-    template<typename _Tp1, typename _Tp2>\n-      struct insert_base<std::list<_Tp1, _Tp2>>\n-      {\n-\ttypedef std::list<_Tp1, _Tp2>    \t        container_type;\n-\ttypedef typename container_type::iterator \titerator;\n-\ttypedef typename container_type::value_type \tvalue_type;\n-\n-\titerator (container_type::* _F_insert_point)(iterator,\n-\t\t\t\t\t\t     const value_type&);\n-\n-\tinsert_base() : _F_insert_point(&container_type::insert) { }\n-      };\n-\n-    template<typename _Tp1, typename _Tp2>\n-      struct insert_base<std::vector<_Tp1, _Tp2>>\n-      {\n-\ttypedef std::vector<_Tp1, _Tp2> \t        container_type;\n-\ttypedef typename container_type::iterator \titerator;\n-\ttypedef typename container_type::value_type \tvalue_type;\n-\n-\titerator (container_type::* _F_insert_point)(iterator,\n-\t\t\t\t\t\t     const value_type&);\n-\n-\tinsert_base() : _F_insert_point(&container_type::insert) { }\n-      };\n-\n-    // Specialization, as string insertion has a different signature.\n+    // Specialization, old C++03 signature.\n     template<typename _Tp1, typename _Tp2, typename _Tp3>\n       struct insert_base<std::basic_string<_Tp1, _Tp2, _Tp3>>\n       {\n@@ -751,17 +693,19 @@ namespace __gnu_test\n \tinsert_base() : _F_insert_point(&container_type::insert) { }\n       };\n \n-    // Likewise for __versa_string.\n+    // Specialization, by value.\n     template<typename _Tp1, typename _Tp2, typename _Tp3,\n \t     template <typename, typename, typename> class _Tp4>\n       struct insert_base<__gnu_cxx::__versa_string<_Tp1, _Tp2, _Tp3, _Tp4>>\n       {\n \ttypedef __gnu_cxx::__versa_string<_Tp1, _Tp2, _Tp3, _Tp4>\n-\t                                                container_type;\n-\ttypedef typename container_type::iterator \titerator;\n-\ttypedef typename container_type::value_type \tvalue_type;\n+                                                        container_type;\n+\ttypedef typename container_type::iterator       iterator;\n+\ttypedef typename container_type::const_iterator const_iterator;\n+\ttypedef typename container_type::value_type     value_type;\n \n-\titerator (container_type::* _F_insert_point)(iterator, value_type);\n+\titerator (container_type::* _F_insert_point)(const_iterator,\n+\t\t\t\t\t\t     value_type);\n \n \tinsert_base() : _F_insert_point(&container_type::insert) { }\n       };"}]}