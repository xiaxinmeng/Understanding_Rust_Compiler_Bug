{"sha": "ed17ad5ea1cb302951f582ae8edd1afc9c014302", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQxN2FkNWVhMWNiMzAyOTUxZjU4MmFlOGVkZDFhZmM5YzAxNDMwMg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-03-26T16:08:35Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-03-26T16:08:35Z"}, "message": "aarch64: Detect scalar extending loads\n\nIf the scalar code does an integer load followed by an integer\nextension, we've tended to cost that as two separate operations,\neven though the extension is probably going to be free in practice.\nThis patch treats the extension as having zero cost, like we already\ndo for extending SVE loads.\n\nLike with previous patches, this one only becomes active if\na CPU selects use_new_vector_costs.  It should therefore have\na very low impact on other CPUs.\n\ngcc/\n\t* config/aarch64/aarch64.c (aarch64_detect_scalar_stmt_subtype):\n\tNew function.\n\t(aarch64_add_stmt_cost): Call it.", "tree": {"sha": "90d197312848ad2e5c486366b558faa4a850b79f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90d197312848ad2e5c486366b558faa4a850b79f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed17ad5ea1cb302951f582ae8edd1afc9c014302", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed17ad5ea1cb302951f582ae8edd1afc9c014302", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed17ad5ea1cb302951f582ae8edd1afc9c014302", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed17ad5ea1cb302951f582ae8edd1afc9c014302/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b924b0d7c0218956dbc2ce0ca2740e8923c2c4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b924b0d7c0218956dbc2ce0ca2740e8923c2c4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b924b0d7c0218956dbc2ce0ca2740e8923c2c4a"}], "stats": {"total": 31, "additions": 27, "deletions": 4}, "files": [{"sha": "e2d92f0c1367804678d49117845ca7e8ef00226a", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 27, "deletions": 4, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed17ad5ea1cb302951f582ae8edd1afc9c014302/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed17ad5ea1cb302951f582ae8edd1afc9c014302/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=ed17ad5ea1cb302951f582ae8edd1afc9c014302", "patch": "@@ -14492,6 +14492,23 @@ aarch64_sve_in_loop_reduction_latency (vec_info *vinfo,\n   return 0;\n }\n \n+/* STMT_COST is the cost calculated by aarch64_builtin_vectorization_cost\n+   for STMT_INFO, which has cost kind KIND.  If this is a scalar operation,\n+   try to subdivide the target-independent categorization provided by KIND\n+   to get a more accurate cost.  */\n+static unsigned int\n+aarch64_detect_scalar_stmt_subtype (vec_info *vinfo, vect_cost_for_stmt kind,\n+\t\t\t\t    stmt_vec_info stmt_info,\n+\t\t\t\t    unsigned int stmt_cost)\n+{\n+  /* Detect an extension of a loaded value.  In general, we'll be able to fuse\n+     the extension with the load.  */\n+  if (kind == scalar_stmt && aarch64_extending_load_p (vinfo, stmt_info))\n+    return 0;\n+\n+  return stmt_cost;\n+}\n+\n /* STMT_COST is the cost calculated by aarch64_builtin_vectorization_cost\n    for the vectorized form of STMT_INFO, which has cost kind KIND and which\n    when vectorized would operate on vector type VECTYPE.  Try to subdivide\n@@ -14702,10 +14719,16 @@ aarch64_add_stmt_cost (class vec_info *vinfo, void *data, int count,\n \n       /* Try to get a more accurate cost by looking at STMT_INFO instead\n \t of just looking at KIND.  */\n-      if (stmt_info && vectype && aarch64_use_new_vector_costs_p ())\n-\tstmt_cost = aarch64_detect_vector_stmt_subtype (vinfo, kind,\n-\t\t\t\t\t\t\tstmt_info, vectype,\n-\t\t\t\t\t\t\twhere, stmt_cost);\n+      if (stmt_info && aarch64_use_new_vector_costs_p ())\n+\t{\n+\t  stmt_cost = aarch64_detect_scalar_stmt_subtype\n+\t    (vinfo, kind, stmt_info, stmt_cost);\n+\n+\t  if (vectype && costs->vec_flags)\n+\t    stmt_cost = aarch64_detect_vector_stmt_subtype (vinfo, kind,\n+\t\t\t\t\t\t\t    stmt_info, vectype,\n+\t\t\t\t\t\t\t    where, stmt_cost);\n+\t}\n \n       /* Do any SVE-specific adjustments to the cost.  */\n       if (stmt_info && vectype && aarch64_sve_mode_p (TYPE_MODE (vectype)))"}]}