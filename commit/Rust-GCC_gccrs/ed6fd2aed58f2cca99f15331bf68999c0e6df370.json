{"sha": "ed6fd2aed58f2cca99f15331bf68999c0e6df370", "node_id": "C_kwDOANBUbNoAKGVkNmZkMmFlZDU4ZjJjY2E5OWYxNTMzMWJmNjg5OTljMGU2ZGYzNzA", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-06-04T11:21:51Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-06-04T11:21:51Z"}, "message": "PR middle-end/95126: Expand small const structs as immediate constants.\n\nThis patch resolves PR middle-end/95126 which is a code quality regression,\nby teaching the RTL expander to emit small const structs/unions as integer\nimmediate constants.\n\nThe motivating example from the bugzilla PR is:\n\nstruct small{ short a,b; signed char c; };\nextern int func(struct small X);\nvoid call_func(void)\n{\n    static struct small const s = { 1, 2, 0 };\n    func(s);\n}\n\nwhich on x86_64 is currently compiled to:\n\ncall_func:\n        movzwl  s.0+2(%rip), %eax\n        movzwl  s.0(%rip), %edx\n        movzwl  s.0+4(%rip), %edi\n        salq    $16, %rax\n        orq     %rdx, %rax\n        salq    $32, %rdi\n        orq     %rax, %rdi\n        jmp     func\n\nbut with this patch is now optimized to:\n\ncall_func:\n        movl    $131073, %edi\n        jmp     func\n\n2022-06-04  Roger Sayle  <roger@nextmovesoftware.com>\n\ngcc/ChangeLog\n\tPR middle-end/95126\n\t* calls.cc (load_register_parameters): When loading a suitable\n\timmediate_const_ctor_p VAR_DECL into a single word_mode register,\n\tconstruct it directly in a pseudo rather than read it (by parts)\n\tfrom memory.\n\t* expr.cc (int_expr_size): Make tree argument a const_tree.\n\t(immediate_const_ctor_p): Helper predicate.  Return true for\n\tsimple constructors that may be materialized in a register.\n\t(expand_expr_real_1) [VAR_DECL]: When expanding a constant\n\tVAR_DECL with a suitable immediate_const_ctor_p constructor\n\tuse store_constructor to materialize it directly in a pseudo.\n\t* expr.h (immediate_const_ctor_p): Prototype here.\n\t* varasm.cc (initializer_constant_valid_for_bitfield_p): Change\n\tVALUE argument from tree to const_tree.\n\t* varasm.h (initializer_constant_valid_for_bitfield_p): Update\n\tprototype.\n\ngcc/testsuite/ChangeLog\n\tPR middle-end/95126\n\t* gcc.target/i386/pr95126-m32-1.c: New test case.\n\t* gcc.target/i386/pr95126-m32-2.c: New test case.\n\t* gcc.target/i386/pr95126-m32-3.c: New test case.\n\t* gcc.target/i386/pr95126-m32-4.c: New test case.\n\t* gcc.target/i386/pr95126-m64-1.c: New test case.\n\t* gcc.target/i386/pr95126-m64-2.c: New test case.\n\t* gcc.target/i386/pr95126-m64-3.c: New test case.\n\t* gcc.target/i386/pr95126-m64-4.c: New test case.", "tree": {"sha": "f45d2ecac85e6636ee9ec5ce1ecbe7b3fc771e5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f45d2ecac85e6636ee9ec5ce1ecbe7b3fc771e5c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed6fd2aed58f2cca99f15331bf68999c0e6df370", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed6fd2aed58f2cca99f15331bf68999c0e6df370", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed6fd2aed58f2cca99f15331bf68999c0e6df370", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed6fd2aed58f2cca99f15331bf68999c0e6df370/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53718316afa45eb0d1c236fbbf2fc0959b08510f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53718316afa45eb0d1c236fbbf2fc0959b08510f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53718316afa45eb0d1c236fbbf2fc0959b08510f"}], "stats": {"total": 204, "additions": 197, "deletions": 7}, "files": [{"sha": "a4336c10a8815751920dd30c0bc88f91b7e41c5c", "filename": "gcc/calls.cc", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed6fd2aed58f2cca99f15331bf68999c0e6df370/gcc%2Fcalls.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed6fd2aed58f2cca99f15331bf68999c0e6df370/gcc%2Fcalls.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.cc?ref=ed6fd2aed58f2cca99f15331bf68999c0e6df370", "patch": "@@ -2095,7 +2095,8 @@ load_register_parameters (struct arg_data *args, int num_actuals,\n \t  poly_int64 size = 0;\n \t  HOST_WIDE_INT const_size = 0;\n \t  rtx_insn *before_arg = get_last_insn ();\n-\t  tree type = TREE_TYPE (args[i].tree_value);\n+\t  tree tree_value = args[i].tree_value;\n+\t  tree type = TREE_TYPE (tree_value);\n \t  if (RECORD_OR_UNION_TYPE_P (type) && TYPE_TRANSPARENT_AGGR (type))\n \t    type = TREE_TYPE (first_field (type));\n \t  /* Set non-negative if we must move a word at a time, even if\n@@ -2172,6 +2173,24 @@ load_register_parameters (struct arg_data *args, int num_actuals,\n \t      emit_move_insn (gen_rtx_REG (word_mode, REGNO (reg) + j),\n \t\t\t      args[i].aligned_regs[j]);\n \n+\t  /* If we need a single register and the source is a constant\n+\t     VAR_DECL with a simple constructor, expand that constructor\n+\t     via a pseudo rather than read from (possibly misaligned)\n+\t     memory.  PR middle-end/95126.  */\n+\t  else if (nregs == 1\n+\t\t   && partial == 0\n+\t\t   && !args[i].pass_on_stack\n+\t\t   && VAR_P (tree_value)\n+\t\t   && TREE_READONLY (tree_value)\n+\t\t   && !TREE_SIDE_EFFECTS (tree_value)\n+\t\t   && immediate_const_ctor_p (DECL_INITIAL (tree_value)))\n+\t    {\n+\t      rtx target = gen_reg_rtx (word_mode);\n+\t      rtx x = expand_expr (DECL_INITIAL (tree_value),\n+\t\t\t\t   target, word_mode, EXPAND_NORMAL);\n+\t      reg = gen_rtx_REG (word_mode, REGNO (reg));\n+\t      emit_move_insn (reg, x);\n+\t    }\n \t  else if (partial == 0 || args[i].pass_on_stack)\n \t    {\n \t      /* SIZE and CONST_SIZE are 0 for partial arguments and"}, {"sha": "fb062dc847577ec9dc2c951330f4cfadcc869325", "filename": "gcc/expr.cc", "status": "modified", "additions": 52, "deletions": 3, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed6fd2aed58f2cca99f15331bf68999c0e6df370/gcc%2Fexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed6fd2aed58f2cca99f15331bf68999c0e6df370/gcc%2Fexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.cc?ref=ed6fd2aed58f2cca99f15331bf68999c0e6df370", "patch": "@@ -100,7 +100,7 @@ static void do_tablejump (rtx, machine_mode, rtx, rtx, rtx,\n \t\t\t  profile_probability);\n static rtx const_vector_from_tree (tree);\n static tree tree_expr_size (const_tree);\n-static HOST_WIDE_INT int_expr_size (tree);\n+static HOST_WIDE_INT int_expr_size (const_tree);\n static void convert_mode_scalar (rtx, rtx, int);\n \n \f\n@@ -4867,7 +4867,22 @@ emit_push_insn (rtx x, machine_mode mode, tree type, rtx size,\n \t\t    return false;\n \t\t}\n \t    }\n-\t  emit_block_move (target, xinner, size, BLOCK_OP_CALL_PARM);\n+\n+\t  /* If source is a constant VAR_DECL with a simple constructor,\n+             store the constructor to the stack instead of moving it.  */\n+\t  const_tree decl;\n+\t  if (partial == 0\n+\t      && MEM_P (xinner)\n+\t      && SYMBOL_REF_P (XEXP (xinner, 0))\n+\t      && (decl = SYMBOL_REF_DECL (XEXP (xinner, 0))) != NULL_TREE\n+\t      && VAR_P (decl)\n+\t      && TREE_READONLY (decl)\n+\t      && !TREE_SIDE_EFFECTS (decl)\n+\t      && immediate_const_ctor_p (DECL_INITIAL (decl), 2))\n+\t    store_constructor (DECL_INITIAL (decl), target, 0,\n+\t\t\t       int_expr_size (DECL_INITIAL (decl)), false);\n+\t  else\n+\t    emit_block_move (target, xinner, size, BLOCK_OP_CALL_PARM);\n \t}\n     }\n   else if (partial > 0)\n@@ -6576,6 +6591,25 @@ categorize_ctor_elements (const_tree ctor, HOST_WIDE_INT *p_nz_elts,\n \t\t\t\t     p_init_elts, p_complete);\n }\n \n+/* Return true if constructor CTOR is simple enough to be materialized\n+   in an integer mode register.  Limit the size to WORDS words, which\n+   is 1 by default.  */\n+\n+bool\n+immediate_const_ctor_p (const_tree ctor, unsigned int words)\n+{\n+  /* Allow function to be called with a VAR_DECL's DECL_INITIAL.  */\n+  if (!ctor || TREE_CODE (ctor) != CONSTRUCTOR)\n+    return false;\n+\n+  return TREE_CONSTANT (ctor)\n+\t && !TREE_ADDRESSABLE (ctor)\n+\t && CONSTRUCTOR_NELTS (ctor)\n+\t && TREE_CODE (TREE_TYPE (ctor)) != ARRAY_TYPE\n+\t && int_expr_size (ctor) <= words * UNITS_PER_WORD\n+\t && initializer_constant_valid_for_bitfield_p (ctor);\n+}\n+\n /* TYPE is initialized by a constructor with NUM_ELTS elements, the last\n    of which had type LAST_TYPE.  Each element was itself a complete\n    initializer, in the sense that every meaningful byte was explicitly\n@@ -10567,6 +10601,21 @@ expand_expr_real_1 (tree exp, rtx target, machine_mode tmode,\n \t  if (temp)\n \t    return temp;\n \t}\n+      /* Expand const VAR_DECLs with CONSTRUCTOR initializers that\n+\t have scalar integer modes to a reg via store_constructor.  */\n+      if (TREE_READONLY (exp)\n+\t  && !TREE_SIDE_EFFECTS (exp)\n+\t  && (modifier == EXPAND_NORMAL || modifier == EXPAND_STACK_PARM)\n+\t  && immediate_const_ctor_p (DECL_INITIAL (exp))\n+\t  && SCALAR_INT_MODE_P (TYPE_MODE (TREE_TYPE (exp)))\n+\t  && crtl->emit.regno_pointer_align_length\n+\t  && !target)\n+\t{\n+\t  target = gen_reg_rtx (TYPE_MODE (TREE_TYPE (exp)));\n+\t  store_constructor (DECL_INITIAL (exp), target, 0,\n+\t\t\t     int_expr_size (DECL_INITIAL (exp)), false);\n+\t  return target;\n+\t}\n       /* ... fall through ...  */\n \n     case PARM_DECL:\n@@ -13161,7 +13210,7 @@ expr_size (tree exp)\n    if the size can vary or is larger than an integer.  */\n \n static HOST_WIDE_INT\n-int_expr_size (tree exp)\n+int_expr_size (const_tree exp)\n {\n   tree size;\n "}, {"sha": "d777c284abef70f25e6f55d81053096045162979", "filename": "gcc/expr.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed6fd2aed58f2cca99f15331bf68999c0e6df370/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed6fd2aed58f2cca99f15331bf68999c0e6df370/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=ed6fd2aed58f2cca99f15331bf68999c0e6df370", "patch": "@@ -338,6 +338,7 @@ extern unsigned HOST_WIDE_INT highest_pow2_factor (const_tree);\n extern bool categorize_ctor_elements (const_tree, HOST_WIDE_INT *,\n \t\t\t\t      HOST_WIDE_INT *, HOST_WIDE_INT *,\n \t\t\t\t      bool *);\n+extern bool immediate_const_ctor_p (const_tree, unsigned int words = 1);\n \n extern void expand_operands (tree, tree, rtx, rtx*, rtx*,\n \t\t\t     enum expand_modifier);"}, {"sha": "1d6acd66df66e8ffb05549088c6f70d7d3d40261", "filename": "gcc/testsuite/gcc.target/i386/pr95126-m32-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed6fd2aed58f2cca99f15331bf68999c0e6df370/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95126-m32-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed6fd2aed58f2cca99f15331bf68999c0e6df370/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95126-m32-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95126-m32-1.c?ref=ed6fd2aed58f2cca99f15331bf68999c0e6df370", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile { target { ia32 } } } */\n+/* { dg-options \"-O2\" } */\n+\n+struct small{ short a,b; signed char c; };\n+\n+void call_func(void)\n+{\n+    extern int func(struct small X);\n+    static struct small const s = { 1,2,0 };\n+    func(s);\n+}\n+\n+/* { dg-final { scan-assembler \"movl\\[ \\\\t]*\\\\\\$\" } } */\n+/* { dg-final { scan-assembler \"movb\\[ \\\\t]*\\\\\\$0, \" } } */\n+/* { dg-final { scan-assembler-not \"movzwl\" } } */\n+"}, {"sha": "b46be9d112bc9c1ebf9f51f42383fe84f16a4876", "filename": "gcc/testsuite/gcc.target/i386/pr95126-m32-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed6fd2aed58f2cca99f15331bf68999c0e6df370/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95126-m32-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed6fd2aed58f2cca99f15331bf68999c0e6df370/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95126-m32-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95126-m32-2.c?ref=ed6fd2aed58f2cca99f15331bf68999c0e6df370", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile { target { ia32 } } } */\n+/* { dg-options \"-O2\" } */\n+\n+struct small{ short a,b; signed char c; };\n+static const struct small s = { 1,2,0 };\n+extern int func(struct small X);\n+\n+void call_func(void)\n+{\n+  func(s);\n+}\n+\n+/* { dg-final { scan-assembler \"movl\\[ \\\\t]*\\\\\\$\" } } */\n+/* { dg-final { scan-assembler \"movb\\[ \\\\t]*\\\\\\$0, \" } } */\n+/* { dg-final { scan-assembler-not \"movzwl\" } } */\n+"}, {"sha": "cc2fe9480093b054fb0d0fa6705253bb9f852ca0", "filename": "gcc/testsuite/gcc.target/i386/pr95126-m32-3.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed6fd2aed58f2cca99f15331bf68999c0e6df370/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95126-m32-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed6fd2aed58f2cca99f15331bf68999c0e6df370/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95126-m32-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95126-m32-3.c?ref=ed6fd2aed58f2cca99f15331bf68999c0e6df370", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile { target { ia32 } } } */\n+/* { dg-options \"-O2\" } */\n+\n+struct small{ short a; };\n+\n+void call_func(void)\n+{\n+    extern int func(struct small X);\n+    static struct small const s = { 2 };\n+    func(s);\n+}\n+\n+/* { dg-final { scan-assembler \"pushl\\[ \\\\t]*\\\\\\$2\" } } */\n+/* { dg-final { scan-assembler-not \"movzwl\" } } */\n+"}, {"sha": "e82933525450c5c1fe913cb207fb2b822da4816d", "filename": "gcc/testsuite/gcc.target/i386/pr95126-m32-4.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed6fd2aed58f2cca99f15331bf68999c0e6df370/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95126-m32-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed6fd2aed58f2cca99f15331bf68999c0e6df370/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95126-m32-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95126-m32-4.c?ref=ed6fd2aed58f2cca99f15331bf68999c0e6df370", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile { target { ia32 } } } */\n+/* { dg-options \"-O2\" } */\n+\n+struct small{ short a,b; };\n+\n+void call_func(void)\n+{\n+    extern int func(struct small X);\n+    static struct small const s = { 1,2 };\n+    func(s);\n+}\n+\n+/* { dg-final { scan-assembler \"pushl\\[ \\\\t]*\\\\\\$131073\" } } */"}, {"sha": "d5c6dded54de19f9c7e7d3d88176275e194accea", "filename": "gcc/testsuite/gcc.target/i386/pr95126-m64-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed6fd2aed58f2cca99f15331bf68999c0e6df370/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95126-m64-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed6fd2aed58f2cca99f15331bf68999c0e6df370/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95126-m64-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95126-m64-1.c?ref=ed6fd2aed58f2cca99f15331bf68999c0e6df370", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2\" } */\n+\n+struct small{ short a,b; signed char c; };\n+\n+void call_func(void)\n+{\n+    extern int func(struct small X);\n+    static struct small const s = { 1,2,0 };\n+    func(s);\n+}\n+\n+/* { dg-final { scan-assembler \"movl\\[ \\\\t]*\\\\\\$131073, \" } } */\n+/* { dg-final { scan-assembler-not \"movzwl\" } } */\n+/* { dg-final { scan-assembler-not \"salq\" } } */\n+/* { dg-final { scan-assembler-not \"orq\" } } */\n+"}, {"sha": "0230ffc55c2a4694287fd3bcdedc69a0ab7fadae", "filename": "gcc/testsuite/gcc.target/i386/pr95126-m64-2.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed6fd2aed58f2cca99f15331bf68999c0e6df370/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95126-m64-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed6fd2aed58f2cca99f15331bf68999c0e6df370/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95126-m64-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95126-m64-2.c?ref=ed6fd2aed58f2cca99f15331bf68999c0e6df370", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2\" } */\n+\n+struct small{ short a,b; signed char c; };\n+static const struct small s = { 1,2,0 };\n+extern int func(struct small X);\n+\n+void call_func(void)\n+{\n+  func(s);\n+}\n+\n+/* { dg-final { scan-assembler \"movl\\[ \\\\t]*\\\\\\$131073, \" } } */\n+/* { dg-final { scan-assembler-not \"movzwl\" } } */\n+/* { dg-final { scan-assembler-not \"salq\" } } */\n+/* { dg-final { scan-assembler-not \"orq\" } } */\n+"}, {"sha": "25afe3a13856a5db0d18c20ee493de02ed837927", "filename": "gcc/testsuite/gcc.target/i386/pr95126-m64-3.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed6fd2aed58f2cca99f15331bf68999c0e6df370/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95126-m64-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed6fd2aed58f2cca99f15331bf68999c0e6df370/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95126-m64-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95126-m64-3.c?ref=ed6fd2aed58f2cca99f15331bf68999c0e6df370", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2\" } */\n+\n+struct small{ short a; };\n+\n+void call_func(void)\n+{\n+    extern int func(struct small X);\n+    static struct small const s = { 2 };\n+    func(s);\n+}\n+\n+/* { dg-final { scan-assembler \"movl\\[ \\\\t]*\\\\\\$2, \" } } */\n+/* { dg-final { scan-assembler-not \"movzwl\" } } */"}, {"sha": "71c7908fc895b6e36996936f845ca96559d2ddfa", "filename": "gcc/testsuite/gcc.target/i386/pr95126-m64-4.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed6fd2aed58f2cca99f15331bf68999c0e6df370/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95126-m64-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed6fd2aed58f2cca99f15331bf68999c0e6df370/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95126-m64-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95126-m64-4.c?ref=ed6fd2aed58f2cca99f15331bf68999c0e6df370", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2\" } */\n+\n+struct small{ short a,b; };\n+\n+void call_func(void)\n+{\n+    extern int func(struct small X);\n+    static struct small const s = { 1,2 };\n+    func(s);\n+}\n+\n+/* { dg-final { scan-assembler \"movl\\[ \\\\t]*\\\\\\$131073, \" } } */"}, {"sha": "826a9caa6ae068bc1b63f38c10d5085bf0969cb8", "filename": "gcc/varasm.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed6fd2aed58f2cca99f15331bf68999c0e6df370/gcc%2Fvarasm.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed6fd2aed58f2cca99f15331bf68999c0e6df370/gcc%2Fvarasm.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.cc?ref=ed6fd2aed58f2cca99f15331bf68999c0e6df370", "patch": "@@ -5069,7 +5069,7 @@ initializer_constant_valid_p (tree value, tree endtype, bool reverse)\n    an element of a \"constant\" initializer.  */\n \n bool\n-initializer_constant_valid_for_bitfield_p (tree value)\n+initializer_constant_valid_for_bitfield_p (const_tree value)\n {\n   /* For bitfields we support integer constants or possibly nested aggregates\n      of such.  */\n@@ -5078,7 +5078,7 @@ initializer_constant_valid_for_bitfield_p (tree value)\n     case CONSTRUCTOR:\n       {\n \tunsigned HOST_WIDE_INT idx;\n-\ttree elt;\n+\tconst_tree elt;\n \n \tFOR_EACH_CONSTRUCTOR_VALUE (CONSTRUCTOR_ELTS (value), idx, elt)\n \t  if (!initializer_constant_valid_for_bitfield_p (elt))"}, {"sha": "acbd9fab7f6f4905ab009c275b540f84a66236a4", "filename": "gcc/varasm.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed6fd2aed58f2cca99f15331bf68999c0e6df370/gcc%2Fvarasm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed6fd2aed58f2cca99f15331bf68999c0e6df370/gcc%2Fvarasm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.h?ref=ed6fd2aed58f2cca99f15331bf68999c0e6df370", "patch": "@@ -65,7 +65,7 @@ extern tree initializer_constant_valid_p (tree, tree, bool = false);\n /* Return true if VALUE is a valid constant-valued expression\n    for use in initializing a static bit-field; one that can be\n    an element of a \"constant\" initializer.  */\n-extern bool initializer_constant_valid_for_bitfield_p (tree);\n+extern bool initializer_constant_valid_for_bitfield_p (const_tree);\n \n /* Whether a constructor CTOR is a valid static constant initializer if all\n    its elements are.  This used to be internal to initializer_constant_valid_p"}]}