{"sha": "940da3246db50a1c1fde531ba1457e6bef61b3f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQwZGEzMjQ2ZGI1MGExYzFmZGU1MzFiYTE0NTdlNmJlZjYxYjNmOQ==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1998-11-24T23:15:19Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-11-24T23:15:19Z"}, "message": "cse.c (fold_rtx): Make autoincrement addressing mode tests be runtime selectable.\n\n        * cse.c (fold_rtx): Make autoincrement addressing mode tests be\n        runtime selectable.\n        * expr.c (move_by_pieces): Similarly.\n        (move_by_pieces_1, clear_by_pieces, clear_by_pieces_1): Similarly.\n        * flow.c (find_auto_inc): Similarly.\n        (try_pre_increment): Similarly.\n        * loop.c (strength_reduce): Similarly.\n        * regclass.c (auto_inc_dec_reg_p): Similarly.\n        * regmove.c (try_auto_increment): Similarly.\n        (fixup_match_1): Similarly.\n        * rtl.h (HAVE_PRE_INCREMENT): Define if not already defined.\n        (HAVE_PRE_DECREMENT): Similarly.\n        (HAVE_POST_INCREMENT, HAVE_POST_DECREMENT): Similarly.\n        sponding changes to all target header files.\n\nFrom-SVN: r23837", "tree": {"sha": "488e0bd31e47424105f777ed841d306134aabbfd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/488e0bd31e47424105f777ed841d306134aabbfd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/940da3246db50a1c1fde531ba1457e6bef61b3f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/940da3246db50a1c1fde531ba1457e6bef61b3f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/940da3246db50a1c1fde531ba1457e6bef61b3f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/940da3246db50a1c1fde531ba1457e6bef61b3f9/comments", "author": null, "committer": null, "parents": [{"sha": "83f660b7585eed3232073f360075fd93a2c66468", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83f660b7585eed3232073f360075fd93a2c66468", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83f660b7585eed3232073f360075fd93a2c66468"}], "stats": {"total": 459, "additions": 220, "deletions": 239}, "files": [{"sha": "389fbd602eb331e4d86ae2eeab8c65858d1f7237", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/940da3246db50a1c1fde531ba1457e6bef61b3f9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/940da3246db50a1c1fde531ba1457e6bef61b3f9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=940da3246db50a1c1fde531ba1457e6bef61b3f9", "patch": "@@ -1,3 +1,20 @@\n+Wed Nov 25 00:07:11 1998  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* cse.c (fold_rtx): Make autoincrement addressing mode tests be\n+\truntime selectable.\n+\t* expr.c (move_by_pieces): Similarly.\n+\t(move_by_pieces_1, clear_by_pieces, clear_by_pieces_1): Similarly.\n+\t* flow.c (find_auto_inc): Similarly.\n+\t(try_pre_increment): Similarly.\n+\t* loop.c (strength_reduce): Similarly.\n+\t* regclass.c (auto_inc_dec_reg_p): Similarly.\n+\t* regmove.c (try_auto_increment): Similarly.\n+\t(fixup_match_1): Similarly.\n+\t* rtl.h (HAVE_PRE_INCREMENT): Define if not already defined.\n+\t(HAVE_PRE_DECREMENT): Similarly.\n+\t(HAVE_POST_INCREMENT, HAVE_POST_DECREMENT): Similarly.\n+\tsponding changes to all target header files.\n+\n Tue Nov 24 20:24:59 1998  Jim Wilson  <wilson@cygnus.com>\n \n \t* configure.in (m68020-*-elf*, m68k-*-elf*): New targets."}, {"sha": "8c5607af47141b171cc90b90a055e4c6209583da", "filename": "gcc/config/1750a/1750a.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/940da3246db50a1c1fde531ba1457e6bef61b3f9/gcc%2Fconfig%2F1750a%2F1750a.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/940da3246db50a1c1fde531ba1457e6bef61b3f9/gcc%2Fconfig%2F1750a%2F1750a.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2F1750a%2F1750a.h?ref=940da3246db50a1c1fde531ba1457e6bef61b3f9", "patch": "@@ -707,10 +707,10 @@ enum reg_class { NO_REGS, R2, R0_1, INDEX_REGS, BASE_REGS, ALL_REGS, LIM_REG_CLA\n \n /* 1750 doesn't have a lot of auto-incr./decr. - just for the stack ptr. */\n \n-/* #define HAVE_POST_INCREMENT  just for R15 (stack pointer) */\n-/* #define HAVE_POST_DECREMENT */\n-/* #define HAVE_PRE_DECREMENT   just for R15 (stack pointer) */\n-/* #define HAVE_PRE_INCREMENT */\n+/* #define HAVE_POST_INCREMENT 0 just for R15 (stack pointer) */\n+/* #define HAVE_POST_DECREMENT 0 */\n+/* #define HAVE_PRE_DECREMENT 0  just for R15 (stack pointer) */\n+/* #define HAVE_PRE_INCREMENT 0 */\n \n /* Macros to check register numbers against specific register classes.  */\n "}, {"sha": "a6c8941f07b0d7b80e1f19dcc23f4d5b3fef7cb5", "filename": "gcc/config/a29k/a29k.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/940da3246db50a1c1fde531ba1457e6bef61b3f9/gcc%2Fconfig%2Fa29k%2Fa29k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/940da3246db50a1c1fde531ba1457e6bef61b3f9/gcc%2Fconfig%2Fa29k%2Fa29k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fa29k%2Fa29k.h?ref=940da3246db50a1c1fde531ba1457e6bef61b3f9", "patch": "@@ -1067,11 +1067,11 @@ extern char *a29k_function_name;\n \f\n /* Addressing modes, and classification of registers for them.  */\n \n-/* #define HAVE_POST_INCREMENT */\n-/* #define HAVE_POST_DECREMENT */\n+/* #define HAVE_POST_INCREMENT 0 */\n+/* #define HAVE_POST_DECREMENT 0 */\n \n-/* #define HAVE_PRE_DECREMENT */\n-/* #define HAVE_PRE_INCREMENT */\n+/* #define HAVE_PRE_DECREMENT 0 */\n+/* #define HAVE_PRE_INCREMENT 0 */\n \n /* Macros to check register numbers against specific register classes.  */\n "}, {"sha": "5490289c2c944fe461fedb81ecc65efa8ed82662", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/940da3246db50a1c1fde531ba1457e6bef61b3f9/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/940da3246db50a1c1fde531ba1457e6bef61b3f9/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=940da3246db50a1c1fde531ba1457e6bef61b3f9", "patch": "@@ -1316,11 +1316,11 @@ extern void alpha_init_expanders ();\n \f\n /* Addressing modes, and classification of registers for them.  */\n \n-/* #define HAVE_POST_INCREMENT */\n-/* #define HAVE_POST_DECREMENT */\n+/* #define HAVE_POST_INCREMENT 0 */\n+/* #define HAVE_POST_DECREMENT 0 */\n \n-/* #define HAVE_PRE_DECREMENT */\n-/* #define HAVE_PRE_INCREMENT */\n+/* #define HAVE_PRE_DECREMENT 0 */\n+/* #define HAVE_PRE_INCREMENT 0 */\n \n /* Macros to check register numbers against specific register classes.  */\n "}, {"sha": "49d9fe2edd2683953fa216324e4235354670f1dd", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/940da3246db50a1c1fde531ba1457e6bef61b3f9/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/940da3246db50a1c1fde531ba1457e6bef61b3f9/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=940da3246db50a1c1fde531ba1457e6bef61b3f9", "patch": "@@ -927,8 +927,8 @@ do { \\\n #define MAX_REGS_PER_ADDRESS 1\n \n /* We have pre inc/dec (load/store with update).  */\n-#define HAVE_PRE_INCREMENT\n-#define HAVE_PRE_DECREMENT\n+#define HAVE_PRE_INCREMENT 1\n+#define HAVE_PRE_DECREMENT 1\n \n /* Recognize any constant value that is a valid address.  */\n #define CONSTANT_ADDRESS_P(X) \\"}, {"sha": "9715453317d4c16fd450f53d1ef924b219b0b8a4", "filename": "gcc/config/c4x/c4x.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/940da3246db50a1c1fde531ba1457e6bef61b3f9/gcc%2Fconfig%2Fc4x%2Fc4x.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/940da3246db50a1c1fde531ba1457e6bef61b3f9/gcc%2Fconfig%2Fc4x%2Fc4x.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.h?ref=940da3246db50a1c1fde531ba1457e6bef61b3f9", "patch": "@@ -1519,14 +1519,14 @@ extern struct rtx_def *c4x_gen_compare_reg ();\n \n /* Addressing Modes  */\n \n-#define HAVE_POST_INCREMENT\n-#define HAVE_PRE_INCREMENT\n-#define HAVE_POST_DECREMENT\n-#define HAVE_PRE_DECREMENT\n-#define HAVE_PRE_MODIFY_REG\n-#define HAVE_POST_MODIFY_REG\n-#define HAVE_PRE_MODIFY_DISP\n-#define HAVE_POST_MODIFY_DISP\n+#define HAVE_POST_INCREMENT 1\n+#define HAVE_PRE_INCREMENT 1\n+#define HAVE_POST_DECREMENT 1\n+#define HAVE_PRE_DECREMENT 1\n+#define HAVE_PRE_MODIFY_REG 1\n+#define HAVE_POST_MODIFY_REG 1\n+#define HAVE_PRE_MODIFY_DISP 1\n+#define HAVE_POST_MODIFY_DISP 1\n \n /* What about LABEL_REF?  */\n #define CONSTANT_ADDRESS_P(X) (GET_CODE (X) == SYMBOL_REF)"}, {"sha": "666e96d1061714372b2d2f5db86c71b96053c63a", "filename": "gcc/config/clipper/clipper.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/940da3246db50a1c1fde531ba1457e6bef61b3f9/gcc%2Fconfig%2Fclipper%2Fclipper.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/940da3246db50a1c1fde531ba1457e6bef61b3f9/gcc%2Fconfig%2Fclipper%2Fclipper.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fclipper%2Fclipper.h?ref=940da3246db50a1c1fde531ba1457e6bef61b3f9", "patch": "@@ -639,9 +639,9 @@ do\t\t\t\t\t\t\t\t\t      \\\n \f\n /* Addressing modes, and classification of registers for them.  */\n \n-/* #define HAVE_POST_DECREMENT */\n+/* #define HAVE_POST_DECREMENT 0 */\n \n-/* #define HAVE_PRE_INCREMENT */\n+/* #define HAVE_PRE_INCREMENT 0 */\n \n /* Macros to check register numbers against specific register classes.  */\n "}, {"sha": "f455f961c4aa81fe73489c2d550576c5d85b9bf2", "filename": "gcc/config/convex/convex.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/940da3246db50a1c1fde531ba1457e6bef61b3f9/gcc%2Fconfig%2Fconvex%2Fconvex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/940da3246db50a1c1fde531ba1457e6bef61b3f9/gcc%2Fconfig%2Fconvex%2Fconvex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fconvex%2Fconvex.h?ref=940da3246db50a1c1fde531ba1457e6bef61b3f9", "patch": "@@ -892,11 +892,11 @@ enum reg_class {\n \f\n /* Addressing modes, and classification of registers for them.  */\n \n-/* #define HAVE_POST_INCREMENT */\n-/* #define HAVE_POST_DECREMENT */\n+/* #define HAVE_POST_INCREMENT 0 */\n+/* #define HAVE_POST_DECREMENT 0 */\n \n-/* #define HAVE_PRE_DECREMENT */\n-/* #define HAVE_PRE_INCREMENT */\n+/* #define HAVE_PRE_DECREMENT 0 */\n+/* #define HAVE_PRE_INCREMENT 0 */\n \n /* Macros to check register numbers against specific register classes.  */\n "}, {"sha": "f71ed371c6e15a56efa55b42666812ed288b31d5", "filename": "gcc/config/dsp16xx/dsp16xx.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/940da3246db50a1c1fde531ba1457e6bef61b3f9/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/940da3246db50a1c1fde531ba1457e6bef61b3f9/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h?ref=940da3246db50a1c1fde531ba1457e6bef61b3f9", "patch": "@@ -1299,11 +1299,11 @@ extern struct dsp16xx_frame_info current_frame_info;\n /* ADDRESSING MODES */\n \n /* The 1610 has post-increment and decrement, but no pre-modify */\n-#define HAVE_POST_INCREMENT\n-#define HAVE_POST_DECREMENT\n+#define HAVE_POST_INCREMENT 1\n+#define HAVE_POST_DECREMENT 1\n \n-/* #define HAVE_PRE_DECREMENT */\n-/* #define HAVE_PRE_INCREMENT */\n+/* #define HAVE_PRE_DECREMENT 0 */\n+/* #define HAVE_PRE_INCREMENT 0 */\n \n /* Recognize any constant value that is a valid address.  */\n #define CONSTANT_ADDRESS_P(X)  CONSTANT_P (X)"}, {"sha": "6e8da32d91b9f26188a714c85152f7814649473b", "filename": "gcc/config/elxsi/elxsi.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/940da3246db50a1c1fde531ba1457e6bef61b3f9/gcc%2Fconfig%2Felxsi%2Felxsi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/940da3246db50a1c1fde531ba1457e6bef61b3f9/gcc%2Fconfig%2Felxsi%2Felxsi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Felxsi%2Felxsi.h?ref=940da3246db50a1c1fde531ba1457e6bef61b3f9", "patch": "@@ -499,11 +499,11 @@ enum reg_class { NO_REGS, GENERAL_REGS, ALL_REGS, LIM_REG_CLASSES };\n \f\n /* Addressing modes, and classification of registers for them.  */\n \n-/* #define HAVE_POST_INCREMENT */\n-/* #define HAVE_POST_DECREMENT */\n+/* #define HAVE_POST_INCREMENT 0 */\n+/* #define HAVE_POST_DECREMENT 0 */\n \n-/* #define HAVE_PRE_DECREMENT */\n-/* #define HAVE_PRE_INCREMENT */\n+/* #define HAVE_PRE_DECREMENT 0 */\n+/* #define HAVE_PRE_INCREMENT 0 */\n \n /* Macros to check register numbers against specific register classes.  */\n "}, {"sha": "651d13d0a69d501108eb96e14a7567b6acae3f30", "filename": "gcc/config/fx80/fx80.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/940da3246db50a1c1fde531ba1457e6bef61b3f9/gcc%2Fconfig%2Ffx80%2Ffx80.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/940da3246db50a1c1fde531ba1457e6bef61b3f9/gcc%2Fconfig%2Ffx80%2Ffx80.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffx80%2Ffx80.h?ref=940da3246db50a1c1fde531ba1457e6bef61b3f9", "patch": "@@ -607,11 +607,11 @@ extern enum reg_class regno_reg_class[];\n \f\n /* Addressing modes, and classification of registers for them.  */\n \n-#define HAVE_POST_INCREMENT\n-/* #define HAVE_POST_DECREMENT */\n+#define HAVE_POST_INCREMENT 1\n+/* #define HAVE_POST_DECREMENT 0 */\n \n-#define HAVE_PRE_DECREMENT\n-/* #define HAVE_PRE_INCREMENT */\n+#define HAVE_PRE_DECREMENT 1\n+/* #define HAVE_PRE_INCREMENT 0 */\n \n /* Macros to check register numbers against specific register classes.  */\n "}, {"sha": "789ca8439824aef7343770c4879fe8022500f0ee", "filename": "gcc/config/gmicro/gmicro.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/940da3246db50a1c1fde531ba1457e6bef61b3f9/gcc%2Fconfig%2Fgmicro%2Fgmicro.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/940da3246db50a1c1fde531ba1457e6bef61b3f9/gcc%2Fconfig%2Fgmicro%2Fgmicro.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgmicro%2Fgmicro.h?ref=940da3246db50a1c1fde531ba1457e6bef61b3f9", "patch": "@@ -863,11 +863,11 @@ extern enum reg_class regno_reg_class[];\n \f\n /* Addressing modes, and classification of registers for them.  */\n \n-/* #define HAVE_POST_INCREMENT */\n-/* #define HAVE_POST_DECREMENT */\n+/* #define HAVE_POST_INCREMENT 0 */\n+/* #define HAVE_POST_DECREMENT 0 */\n \n-/* #define HAVE_PRE_DECREMENT */\n-/* #define HAVE_PRE_INCREMENT */\n+/* #define HAVE_PRE_DECREMENT 0 */\n+/* #define HAVE_PRE_INCREMENT 0 */\n \n /* Macros to check register numbers against specific register classes.  */\n "}, {"sha": "8f617aedecf43e6ebe7d14bc94b4af9b73e31557", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/940da3246db50a1c1fde531ba1457e6bef61b3f9/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/940da3246db50a1c1fde531ba1457e6bef61b3f9/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=940da3246db50a1c1fde531ba1457e6bef61b3f9", "patch": "@@ -721,11 +721,11 @@ struct rtx_def *function_arg();\n \f\n /* Addressing modes, and classification of registers for them.  */\n \n-#define HAVE_POST_INCREMENT\n-/*#define HAVE_POST_DECREMENT */\n+#define HAVE_POST_INCREMENT 1\n+/*#define HAVE_POST_DECREMENT 0 */\n \n-#define HAVE_PRE_DECREMENT\n-/*#define HAVE_PRE_INCREMENT */\n+#define HAVE_PRE_DECREMENT 1\n+/*#define HAVE_PRE_INCREMENT 0 */\n \n /* Macros to check register numbers against specific register classes.  */\n "}, {"sha": "22675eb1ffc0b66c9c2f358da7f8160dfa7b2f1a", "filename": "gcc/config/i370/i370.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/940da3246db50a1c1fde531ba1457e6bef61b3f9/gcc%2Fconfig%2Fi370%2Fi370.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/940da3246db50a1c1fde531ba1457e6bef61b3f9/gcc%2Fconfig%2Fi370%2Fi370.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi370%2Fi370.h?ref=940da3246db50a1c1fde531ba1457e6bef61b3f9", "patch": "@@ -612,11 +612,11 @@ enum reg_class\n \n /* Addressing modes, and classification of registers for them.  */\n \n-/* #define HAVE_POST_INCREMENT */\n-/* #define HAVE_POST_DECREMENT */\n+/* #define HAVE_POST_INCREMENT 0 */\n+/* #define HAVE_POST_DECREMENT 0 */\n \n-/* #define HAVE_PRE_DECREMENT */\n-/* #define HAVE_PRE_INCREMENT */\n+/* #define HAVE_PRE_DECREMENT 0 */\n+/* #define HAVE_PRE_INCREMENT 0 */\n \n /* These assume that REGNO is a hard or pseudo reg number.  They give\n    nonzero only if REGNO is a hard reg of the suitable class or a pseudo"}, {"sha": "9e1150b0be380f17d0f9c84e7ec2633d20abda50", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/940da3246db50a1c1fde531ba1457e6bef61b3f9/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/940da3246db50a1c1fde531ba1457e6bef61b3f9/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=940da3246db50a1c1fde531ba1457e6bef61b3f9", "patch": "@@ -1606,11 +1606,11 @@ do {\t\t\t\t\t\t\\\n \f\n /* Addressing modes, and classification of registers for them.  */\n \n-/* #define HAVE_POST_INCREMENT */\n-/* #define HAVE_POST_DECREMENT */\n+/* #define HAVE_POST_INCREMENT 0 */\n+/* #define HAVE_POST_DECREMENT 0 */\n \n-/* #define HAVE_PRE_DECREMENT */\n-/* #define HAVE_PRE_INCREMENT */\n+/* #define HAVE_PRE_DECREMENT 0 */\n+/* #define HAVE_PRE_INCREMENT 0 */\n \n /* Macros to check register numbers against specific register classes.  */\n "}, {"sha": "d6b29110eea2e65d9a606c09c58f12c16226de71", "filename": "gcc/config/i860/i860.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/940da3246db50a1c1fde531ba1457e6bef61b3f9/gcc%2Fconfig%2Fi860%2Fi860.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/940da3246db50a1c1fde531ba1457e6bef61b3f9/gcc%2Fconfig%2Fi860%2Fi860.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fi860.h?ref=940da3246db50a1c1fde531ba1457e6bef61b3f9", "patch": "@@ -656,11 +656,11 @@ struct cumulative_args { int ints, floats; };\n \f\n /* Addressing modes, and classification of registers for them.  */\n \n-/* #define HAVE_POST_INCREMENT */\n-/* #define HAVE_POST_DECREMENT */\n+/* #define HAVE_POST_INCREMENT 0 */\n+/* #define HAVE_POST_DECREMENT 0 */\n \n-/* #define HAVE_PRE_DECREMENT */\n-/* #define HAVE_PRE_INCREMENT */\n+/* #define HAVE_PRE_DECREMENT 0 */\n+/* #define HAVE_PRE_INCREMENT 0 */\n \n /* Macros to check register numbers against specific register classes.  */\n "}, {"sha": "31102e50601becfffc116018f754b2394ab6dd1e", "filename": "gcc/config/i960/i960.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/940da3246db50a1c1fde531ba1457e6bef61b3f9/gcc%2Fconfig%2Fi960%2Fi960.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/940da3246db50a1c1fde531ba1457e6bef61b3f9/gcc%2Fconfig%2Fi960%2Fi960.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.h?ref=940da3246db50a1c1fde531ba1457e6bef61b3f9", "patch": "@@ -924,11 +924,11 @@ extern struct rtx_def *i960_function_arg ();\n \f\n /* Addressing modes, and classification of registers for them.  */\n \n-/* #define HAVE_POST_INCREMENT */\n-/* #define HAVE_POST_DECREMENT */\n+/* #define HAVE_POST_INCREMENT 0 */\n+/* #define HAVE_POST_DECREMENT 0 */\n \n-/* #define HAVE_PRE_DECREMENT */\n-/* #define HAVE_PRE_INCREMENT */\n+/* #define HAVE_PRE_DECREMENT 0 */\n+/* #define HAVE_PRE_INCREMENT 0 */\n \n /* Macros to check register numbers against specific register classes.  */\n "}, {"sha": "425b83cb20b88d228db18dd931a7a356c3af4792", "filename": "gcc/config/m32r/m32r.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/940da3246db50a1c1fde531ba1457e6bef61b3f9/gcc%2Fconfig%2Fm32r%2Fm32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/940da3246db50a1c1fde531ba1457e6bef61b3f9/gcc%2Fconfig%2Fm32r%2Fm32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.h?ref=940da3246db50a1c1fde531ba1457e6bef61b3f9", "patch": "@@ -1126,9 +1126,9 @@ do { \\\n /* We have post-inc load and pre-dec,pre-inc store,\n    but only for 4 byte vals.  */\n #if 0\n-#define HAVE_PRE_DECREMENT\n-#define HAVE_PRE_INCREMENT\n-#define HAVE_POST_INCREMENT\n+#define HAVE_PRE_DECREMENT 1\n+#define HAVE_PRE_INCREMENT 1\n+#define HAVE_POST_INCREMENT 1\n #endif\n \n /* Recognize any constant value that is a valid address.  */"}, {"sha": "3db12e641e0e9a70aa75a86522992cb0608c36e8", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/940da3246db50a1c1fde531ba1457e6bef61b3f9/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/940da3246db50a1c1fde531ba1457e6bef61b3f9/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=940da3246db50a1c1fde531ba1457e6bef61b3f9", "patch": "@@ -1281,11 +1281,11 @@ __transfer_from_trampoline ()\t\t\t\t\t\\\n \f\n /* Addressing modes, and classification of registers for them.  */\n \n-#define HAVE_POST_INCREMENT\n-/* #define HAVE_POST_DECREMENT */\n+#define HAVE_POST_INCREMENT 1\n+/* #define HAVE_POST_DECREMENT 0 */\n \n-#define HAVE_PRE_DECREMENT\n-/* #define HAVE_PRE_INCREMENT */\n+#define HAVE_PRE_DECREMENT 1\n+/* #define HAVE_PRE_INCREMENT 0 */\n \n /* Macros to check register numbers against specific register classes.  */\n "}, {"sha": "66d218bc82bc646af5ee9514151bb97544dcbf24", "filename": "gcc/config/m88k/m88k.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/940da3246db50a1c1fde531ba1457e6bef61b3f9/gcc%2Fconfig%2Fm88k%2Fm88k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/940da3246db50a1c1fde531ba1457e6bef61b3f9/gcc%2Fconfig%2Fm88k%2Fm88k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.h?ref=940da3246db50a1c1fde531ba1457e6bef61b3f9", "patch": "@@ -1259,11 +1259,11 @@ enum reg_class { NO_REGS, AP_REG, XRF_REGS, GENERAL_REGS, AGRF_REGS,\n \n #define SELECT_CC_MODE(OP,X,Y) CCmode\n \n-/* #define HAVE_POST_INCREMENT */\n-/* #define HAVE_POST_DECREMENT */\n+/* #define HAVE_POST_INCREMENT 0 */\n+/* #define HAVE_POST_DECREMENT 0 */\n \n-/* #define HAVE_PRE_DECREMENT */\n-/* #define HAVE_PRE_INCREMENT */\n+/* #define HAVE_PRE_DECREMENT 0 */\n+/* #define HAVE_PRE_INCREMENT 0 */\n \n /* Recognize any constant value that is a valid address.\n    When PIC, we do not accept an address that would require a scratch reg"}, {"sha": "f36398a8862080144b7c185771897b7ff3c522c8", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/940da3246db50a1c1fde531ba1457e6bef61b3f9/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/940da3246db50a1c1fde531ba1457e6bef61b3f9/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=940da3246db50a1c1fde531ba1457e6bef61b3f9", "patch": "@@ -2634,11 +2634,11 @@ typedef struct mips_args {\n \f\n /* Addressing modes, and classification of registers for them.  */\n \n-/* #define HAVE_POST_INCREMENT */\n-/* #define HAVE_POST_DECREMENT */\n+/* #define HAVE_POST_INCREMENT 0 */\n+/* #define HAVE_POST_DECREMENT 0 */\n \n-/* #define HAVE_PRE_DECREMENT */\n-/* #define HAVE_PRE_INCREMENT */\n+/* #define HAVE_PRE_DECREMENT 0 */\n+/* #define HAVE_PRE_INCREMENT 0 */\n \n /* These assume that REGNO is a hard or pseudo reg number.\n    They give nonzero only if REGNO is a hard reg of the suitable class"}, {"sha": "d2e81d1f70e2048326c662e092f3e29e99e2db9c", "filename": "gcc/config/ns32k/ns32k.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/940da3246db50a1c1fde531ba1457e6bef61b3f9/gcc%2Fconfig%2Fns32k%2Fns32k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/940da3246db50a1c1fde531ba1457e6bef61b3f9/gcc%2Fconfig%2Fns32k%2Fns32k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.h?ref=940da3246db50a1c1fde531ba1457e6bef61b3f9", "patch": "@@ -808,11 +808,11 @@ __transfer_from_trampoline ()\t\t\\\n \f\n /* Addressing modes, and classification of registers for them.  */\n \n-/* #define HAVE_POST_INCREMENT */\n-/* #define HAVE_POST_DECREMENT */\n+/* #define HAVE_POST_INCREMENT 0 */\n+/* #define HAVE_POST_DECREMENT 0 */\n \n-/* #define HAVE_PRE_DECREMENT */\n-/* #define HAVE_PRE_INCREMENT */\n+/* #define HAVE_PRE_DECREMENT 0 */\n+/* #define HAVE_PRE_INCREMENT 0 */\n \n /* Macros to check register numbers against specific register classes.  */\n "}, {"sha": "7d31381791b1802e899fdcd8c874efcce3150013", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/940da3246db50a1c1fde531ba1457e6bef61b3f9/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/940da3246db50a1c1fde531ba1457e6bef61b3f9/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=940da3246db50a1c1fde531ba1457e6bef61b3f9", "patch": "@@ -1368,11 +1368,11 @@ extern struct rtx_def *hppa_builtin_saveregs ();\n \f\n /* Addressing modes, and classification of registers for them.  */\n \n-#define HAVE_POST_INCREMENT\n-#define HAVE_POST_DECREMENT\n+#define HAVE_POST_INCREMENT 1\n+#define HAVE_POST_DECREMENT 1\n \n-#define HAVE_PRE_DECREMENT\n-#define HAVE_PRE_INCREMENT\n+#define HAVE_PRE_DECREMENT 1\n+#define HAVE_PRE_INCREMENT 1\n \n /* Macros to check register numbers against specific register classes.  */\n "}, {"sha": "a6281971f3e307bd5d14cee10b9cda5cdc18d5fb", "filename": "gcc/config/pdp11/pdp11.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/940da3246db50a1c1fde531ba1457e6bef61b3f9/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/940da3246db50a1c1fde531ba1457e6bef61b3f9/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.h?ref=940da3246db50a1c1fde531ba1457e6bef61b3f9", "patch": "@@ -687,11 +687,11 @@ extern int current_function_pretend_args_size;\n \f\n /* Addressing modes, and classification of registers for them.  */\n \n-#define HAVE_POST_INCREMENT\n-/* #define HAVE_POST_DECREMENT */\n+#define HAVE_POST_INCREMENT 1\n+/* #define HAVE_POST_DECREMENT 0 */\n \n-#define HAVE_PRE_DECREMENT\n-/* #define HAVE_PRE_INCREMENT */\n+#define HAVE_PRE_DECREMENT 1\n+/* #define HAVE_PRE_INCREMENT 0 */\n \n /* Macros to check register numbers against specific register classes.  */\n "}, {"sha": "e5ffcb8361de4070a5b712a3d67e481db769ebd5", "filename": "gcc/config/pyr/pyr.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/940da3246db50a1c1fde531ba1457e6bef61b3f9/gcc%2Fconfig%2Fpyr%2Fpyr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/940da3246db50a1c1fde531ba1457e6bef61b3f9/gcc%2Fconfig%2Fpyr%2Fpyr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpyr%2Fpyr.h?ref=940da3246db50a1c1fde531ba1457e6bef61b3f9", "patch": "@@ -803,11 +803,11 @@ extern int current_function_calls_alloca;\n \f\n /*** Addressing modes, and classification of registers for them.  ***/\n \n-/* #define HAVE_POST_INCREMENT */\t/* pyramid has none of these */\n-/* #define HAVE_POST_DECREMENT */\n+/* #define HAVE_POST_INCREMENT 0 */\t/* pyramid has none of these */\n+/* #define HAVE_POST_DECREMENT 0 */\n \n-/* #define HAVE_PRE_DECREMENT */\n-/* #define HAVE_PRE_INCREMENT */\n+/* #define HAVE_PRE_DECREMENT 0 */\n+/* #define HAVE_PRE_INCREMENT 0 */\n \n /* Macros to check register numbers against specific register classes.  */\n "}, {"sha": "82a0186a66ca892ee3aefbb539388b81291a22ef", "filename": "gcc/config/romp/romp.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/940da3246db50a1c1fde531ba1457e6bef61b3f9/gcc%2Fconfig%2Fromp%2Fromp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/940da3246db50a1c1fde531ba1457e6bef61b3f9/gcc%2Fconfig%2Fromp%2Fromp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fromp%2Fromp.h?ref=940da3246db50a1c1fde531ba1457e6bef61b3f9", "patch": "@@ -905,11 +905,11 @@ struct rt_cargs {int gregs, fregs; };\n \f\n /* Addressing modes, and classification of registers for them.  */\n \n-/* #define HAVE_POST_INCREMENT */\n-/* #define HAVE_POST_DECREMENT */\n+/* #define HAVE_POST_INCREMENT 0 */\n+/* #define HAVE_POST_DECREMENT 0 */\n \n-/* #define HAVE_PRE_DECREMENT */\n-/* #define HAVE_PRE_INCREMENT */\n+/* #define HAVE_PRE_DECREMENT 0 */\n+/* #define HAVE_PRE_INCREMENT 0 */\n \n /* Macros to check register numbers against specific register classes.  */\n "}, {"sha": "e5e699141758458c4c3f35365392fac05535dcc3", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/940da3246db50a1c1fde531ba1457e6bef61b3f9/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/940da3246db50a1c1fde531ba1457e6bef61b3f9/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=940da3246db50a1c1fde531ba1457e6bef61b3f9", "patch": "@@ -1755,11 +1755,11 @@ typedef struct rs6000_args\n \f\n /* Addressing modes, and classification of registers for them.  */\n \n-/* #define HAVE_POST_INCREMENT */\n-/* #define HAVE_POST_DECREMENT */\n+/* #define HAVE_POST_INCREMENT 0 */\n+/* #define HAVE_POST_DECREMENT 0 */\n \n-#define HAVE_PRE_DECREMENT\n-#define HAVE_PRE_INCREMENT\n+#define HAVE_PRE_DECREMENT 1\n+#define HAVE_PRE_INCREMENT 1\n \n /* Macros to check register numbers against specific register classes.  */\n "}, {"sha": "852a93f19f1e8882efaaac82dc0179902e19dc70", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/940da3246db50a1c1fde531ba1457e6bef61b3f9/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/940da3246db50a1c1fde531ba1457e6bef61b3f9/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=940da3246db50a1c1fde531ba1457e6bef61b3f9", "patch": "@@ -2271,11 +2271,11 @@ extern struct rtx_def *sparc_builtin_saveregs ();\n \f\n /* Addressing modes, and classification of registers for them.  */\n \n-/* #define HAVE_POST_INCREMENT */\n-/* #define HAVE_POST_DECREMENT */\n+/* #define HAVE_POST_INCREMENT 0 */\n+/* #define HAVE_POST_DECREMENT 0 */\n \n-/* #define HAVE_PRE_DECREMENT */\n-/* #define HAVE_PRE_INCREMENT */\n+/* #define HAVE_PRE_DECREMENT 0 */\n+/* #define HAVE_PRE_INCREMENT 0 */\n \n /* Macros to check register numbers against specific register classes.  */\n "}, {"sha": "e6d058a4491380203a1d7aed7b0322b824273a6a", "filename": "gcc/config/spur/spur.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/940da3246db50a1c1fde531ba1457e6bef61b3f9/gcc%2Fconfig%2Fspur%2Fspur.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/940da3246db50a1c1fde531ba1457e6bef61b3f9/gcc%2Fconfig%2Fspur%2Fspur.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspur%2Fspur.h?ref=940da3246db50a1c1fde531ba1457e6bef61b3f9", "patch": "@@ -586,11 +586,11 @@ extern int current_function_pretend_args_size;\n \f\n /* Addressing modes, and classification of registers for them.  */\n \n-/* #define HAVE_POST_INCREMENT */\n-/* #define HAVE_POST_DECREMENT */\n+/* #define HAVE_POST_INCREMENT 0 */\n+/* #define HAVE_POST_DECREMENT 0 */\n \n-/* #define HAVE_PRE_DECREMENT */\n-/* #define HAVE_PRE_INCREMENT */\n+/* #define HAVE_PRE_DECREMENT 0 */\n+/* #define HAVE_PRE_INCREMENT 0 */\n \n /* Macros to check register numbers against specific register classes.  */\n "}, {"sha": "ad8fb7cc476397513acd0cb8d5e0876c5d0e9a52", "filename": "gcc/config/vax/vax.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/940da3246db50a1c1fde531ba1457e6bef61b3f9/gcc%2Fconfig%2Fvax%2Fvax.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/940da3246db50a1c1fde531ba1457e6bef61b3f9/gcc%2Fconfig%2Fvax%2Fvax.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.h?ref=940da3246db50a1c1fde531ba1457e6bef61b3f9", "patch": "@@ -579,11 +579,11 @@ gen_rtx (PLUS, Pmode, frame, GEN_INT (12))\n \f\n /* Addressing modes, and classification of registers for them.  */\n \n-#define HAVE_POST_INCREMENT\n-/* #define HAVE_POST_DECREMENT */\n+#define HAVE_POST_INCREMENT 1\n+/* #define HAVE_POST_DECREMENT 0 */\n \n-#define HAVE_PRE_DECREMENT\n-/* #define HAVE_PRE_INCREMENT */\n+#define HAVE_PRE_DECREMENT 1\n+/* #define HAVE_PRE_INCREMENT 0 */\n \n /* Macros to check register numbers against specific register classes.  */\n "}, {"sha": "0859ec1cdda5f4e176b5f569f88926d8a689c4f7", "filename": "gcc/config/we32k/we32k.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/940da3246db50a1c1fde531ba1457e6bef61b3f9/gcc%2Fconfig%2Fwe32k%2Fwe32k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/940da3246db50a1c1fde531ba1457e6bef61b3f9/gcc%2Fconfig%2Fwe32k%2Fwe32k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fwe32k%2Fwe32k.h?ref=940da3246db50a1c1fde531ba1457e6bef61b3f9", "patch": "@@ -509,11 +509,11 @@ enum reg_class { NO_REGS, GENERAL_REGS,\n \f\n /* Addressing modes, and classification of registers for them.  */\n \n-/* #define HAVE_POST_INCREMENT */\n-/* #define HAVE_POST_DECREMENT */\n+/* #define HAVE_POST_INCREMENT 0 */\n+/* #define HAVE_POST_DECREMENT 0 */\n \n-/* #define HAVE_PRE_DECREMENT */\n-/* #define HAVE_PRE_INCREMENT */\n+/* #define HAVE_PRE_DECREMENT 0 */\n+/* #define HAVE_PRE_INCREMENT 0 */\n \n /* Macros to check register numbers against specific register classes.  */\n "}, {"sha": "7b81de47e4e8b335b722fe77b35f1259dd0541ed", "filename": "gcc/cse.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/940da3246db50a1c1fde531ba1457e6bef61b3f9/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/940da3246db50a1c1fde531ba1457e6bef61b3f9/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=940da3246db50a1c1fde531ba1457e6bef61b3f9", "patch": "@@ -5760,14 +5760,14 @@ fold_rtx (x, insn)\n \t\t identical powers of two with post decrement.  */\n \n \t      if (code == PLUS && INTVAL (const_arg1) == INTVAL (inner_const)\n-\t\t  && (0\n-#if defined(HAVE_PRE_INCREMENT) || defined(HAVE_POST_INCREMENT)\n-\t\t      || exact_log2 (INTVAL (const_arg1)) >= 0\n-#endif\n-#if defined(HAVE_PRE_DECREMENT) || defined(HAVE_POST_DECREMENT)\n-\t\t      || exact_log2 (- INTVAL (const_arg1)) >= 0\n-#endif\n-\t\t  ))\n+\t\t  && ((HAVE_PRE_INCREMENT\n+\t\t\t  && exact_log2 (INTVAL (const_arg1)) >= 0)\n+\t\t      || (HAVE_POST_INCREMENT\n+\t\t\t  && exact_log2 (INTVAL (const_arg1)) >= 0)\n+\t\t      || (HAVE_PRE_DECREMENT\n+\t\t\t  && exact_log2 (- INTVAL (const_arg1)) >= 0)\n+\t\t      || (HAVE_POST_DECREMENT\n+\t\t\t  && exact_log2 (- INTVAL (const_arg1)) >= 0)))\n \t\tbreak;\n \n \t      /* Compute the code used to compose the constants.  For example,"}, {"sha": "534fac638a7537315559d9fa09b8c2cfba2509b2", "filename": "gcc/expr.c", "status": "modified", "additions": 12, "deletions": 32, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/940da3246db50a1c1fde531ba1457e6bef61b3f9/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/940da3246db50a1c1fde531ba1457e6bef61b3f9/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=940da3246db50a1c1fde531ba1457e6bef61b3f9", "patch": "@@ -1442,40 +1442,32 @@ move_by_pieces (to, from, len, align)\n   if (!(data.autinc_from && data.autinc_to)\n       && move_by_pieces_ninsns (len, align) > 2)\n     {\n-#ifdef HAVE_PRE_DECREMENT\n-      if (data.reverse && ! data.autinc_from)\n+      if (HAVE_PRE_DECREMENT && data.reverse && ! data.autinc_from)\n \t{\n \t  data.from_addr = copy_addr_to_reg (plus_constant (from_addr, len));\n \t  data.autinc_from = 1;\n \t  data.explicit_inc_from = -1;\n \t}\n-#endif\n-#ifdef HAVE_POST_INCREMENT\n-      if (! data.autinc_from)\n+      if (HAVE_POST_INCREMENT && ! data.autinc_from)\n \t{\n \t  data.from_addr = copy_addr_to_reg (from_addr);\n \t  data.autinc_from = 1;\n \t  data.explicit_inc_from = 1;\n \t}\n-#endif\n       if (!data.autinc_from && CONSTANT_P (from_addr))\n \tdata.from_addr = copy_addr_to_reg (from_addr);\n-#ifdef HAVE_PRE_DECREMENT\n-      if (data.reverse && ! data.autinc_to)\n+      if (HAVE_PRE_DECREMENT && data.reverse && ! data.autinc_to)\n \t{\n \t  data.to_addr = copy_addr_to_reg (plus_constant (to_addr, len));\n \t  data.autinc_to = 1;\n \t  data.explicit_inc_to = -1;\n \t}\n-#endif\n-#ifdef HAVE_POST_INCREMENT\n-      if (! data.reverse && ! data.autinc_to)\n+      if (HAVE_POST_INCREMENT && ! data.reverse && ! data.autinc_to)\n \t{\n \t  data.to_addr = copy_addr_to_reg (to_addr);\n \t  data.autinc_to = 1;\n \t  data.explicit_inc_to = 1;\n \t}\n-#endif\n       if (!data.autinc_to && CONSTANT_P (to_addr))\n \tdata.to_addr = copy_addr_to_reg (to_addr);\n     }\n@@ -1586,20 +1578,16 @@ move_by_pieces_1 (genfun, mode, data)\n \t\t\t\t\t\t      data->offset))));\n       MEM_IN_STRUCT_P (from1) = data->from_struct;\n \n-#ifdef HAVE_PRE_DECREMENT\n-      if (data->explicit_inc_to < 0)\n+      if (HAVE_PRE_DECREMENT && data->explicit_inc_to < 0)\n \temit_insn (gen_add2_insn (data->to_addr, GEN_INT (-size)));\n-      if (data->explicit_inc_from < 0)\n+      if (HAVE_PRE_DECREMENT && data->explicit_inc_from < 0)\n \temit_insn (gen_add2_insn (data->from_addr, GEN_INT (-size)));\n-#endif\n \n       emit_insn ((*genfun) (to1, from1));\n-#ifdef HAVE_POST_INCREMENT\n-      if (data->explicit_inc_to > 0)\n+      if (HAVE_POST_INCREMENT && data->explicit_inc_to > 0)\n \temit_insn (gen_add2_insn (data->to_addr, GEN_INT (size)));\n-      if (data->explicit_inc_from > 0)\n+      if (HAVE_POST_INCREMENT && data->explicit_inc_from > 0)\n \temit_insn (gen_add2_insn (data->from_addr, GEN_INT (size)));\n-#endif\n \n       if (! data->reverse) data->offset += size;\n \n@@ -2267,22 +2255,18 @@ clear_by_pieces (to, len, align)\n   if (!data.autinc_to\n       && move_by_pieces_ninsns (len, align) > 2)\n     {\n-#ifdef HAVE_PRE_DECREMENT\n-      if (data.reverse && ! data.autinc_to)\n+      if (HAVE_PRE_DECREMENT && data.reverse && ! data.autinc_to)\n \t{\n \t  data.to_addr = copy_addr_to_reg (plus_constant (to_addr, len));\n \t  data.autinc_to = 1;\n \t  data.explicit_inc_to = -1;\n \t}\n-#endif\n-#ifdef HAVE_POST_INCREMENT\n-      if (! data.reverse && ! data.autinc_to)\n+      if (HAVE_POST_INCREMENT && ! data.reverse && ! data.autinc_to)\n \t{\n \t  data.to_addr = copy_addr_to_reg (to_addr);\n \t  data.autinc_to = 1;\n \t  data.explicit_inc_to = 1;\n \t}\n-#endif\n       if (!data.autinc_to && CONSTANT_P (to_addr))\n \tdata.to_addr = copy_addr_to_reg (to_addr);\n     }\n@@ -2345,16 +2329,12 @@ clear_by_pieces_1 (genfun, mode, data)\n \t\t\t\t\t\t\tdata->offset))));\n       MEM_IN_STRUCT_P (to1) = data->to_struct;\n \n-#ifdef HAVE_PRE_DECREMENT\n-      if (data->explicit_inc_to < 0)\n+      if (HAVE_PRE_DECREMENT && data->explicit_inc_to < 0)\n \temit_insn (gen_add2_insn (data->to_addr, GEN_INT (-size)));\n-#endif\n \n       emit_insn ((*genfun) (to1, const0_rtx));\n-#ifdef HAVE_POST_INCREMENT\n-      if (data->explicit_inc_to > 0)\n+      if (HAVE_POST_INCREMENT && data->explicit_inc_to > 0)\n \temit_insn (gen_add2_insn (data->to_addr, GEN_INT (size)));\n-#endif\n \n       if (! data->reverse) data->offset += size;\n "}, {"sha": "510c011677f504eecc72bd5567c126886649564f", "filename": "gcc/flow.c", "status": "modified", "additions": 12, "deletions": 26, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/940da3246db50a1c1fde531ba1457e6bef61b3f9/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/940da3246db50a1c1fde531ba1457e6bef61b3f9/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=940da3246db50a1c1fde531ba1457e6bef61b3f9", "patch": "@@ -2444,20 +2444,14 @@ find_auto_inc (needed, x, insn)\n \t  && (y = SET_SRC (set), GET_CODE (y) == PLUS)\n \t  && XEXP (y, 0) == addr\n \t  && GET_CODE (XEXP (y, 1)) == CONST_INT\n-\t  && (0\n-#ifdef HAVE_POST_INCREMENT\n-\t      || (INTVAL (XEXP (y, 1)) == size && offset == 0)\n-#endif\n-#ifdef HAVE_POST_DECREMENT\n-\t      || (INTVAL (XEXP (y, 1)) == - size && offset == 0)\n-#endif\n-#ifdef HAVE_PRE_INCREMENT\n-\t      || (INTVAL (XEXP (y, 1)) == size && offset == size)\n-#endif\n-#ifdef HAVE_PRE_DECREMENT\n-\t      || (INTVAL (XEXP (y, 1)) == - size && offset == - size)\n-#endif\n-\t      )\n+\t  && ((HAVE_POST_INCREMENT\n+\t       && (INTVAL (XEXP (y, 1)) == size && offset == 0))\n+\t      || (HAVE_POST_DECREMENT\n+\t\t  && (INTVAL (XEXP (y, 1)) == - size && offset == 0))\n+\t      || (HAVE_PRE_INCREMENT\n+\t\t  && (INTVAL (XEXP (y, 1)) == size && offset == size))\n+\t      || (HAVE_PRE_DECREMENT\n+\t\t  && (INTVAL (XEXP (y, 1)) == - size && offset == - size)))\n \t  /* Make sure this reg appears only once in this insn.  */\n \t  && (use = find_use_as_address (PATTERN (insn), addr, offset),\n \t      use != 0 && use != (rtx) 1))\n@@ -3021,23 +3015,15 @@ try_pre_increment (insn, reg, amount)\n \n   /* From the sign of increment, see which possibilities are conceivable\n      on this target machine.  */\n-#ifdef HAVE_PRE_INCREMENT\n-  if (amount > 0)\n+  if (HAVE_PRE_INCREMENT && amount > 0)\n     pre_ok = 1;\n-#endif\n-#ifdef HAVE_POST_INCREMENT\n-  if (amount > 0)\n+  if (HAVE_POST_INCREMENT && amount > 0)\n     post_ok = 1;\n-#endif\n \n-#ifdef HAVE_PRE_DECREMENT\n-  if (amount < 0)\n+  if (HAVE_PRE_DECREMENT && amount < 0)\n     pre_ok = 1;\n-#endif\n-#ifdef HAVE_POST_DECREMENT\n-  if (amount < 0)\n+  if (HAVE_POST_DECREMENT && amount < 0)\n     post_ok = 1;\n-#endif\n \n   if (! (pre_ok || post_ok))\n     return 0;"}, {"sha": "b664e388047a8922e42106b0e2585de38dd66c56", "filename": "gcc/loop.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/940da3246db50a1c1fde531ba1457e6bef61b3f9/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/940da3246db50a1c1fde531ba1457e6bef61b3f9/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=940da3246db50a1c1fde531ba1457e6bef61b3f9", "patch": "@@ -4168,14 +4168,18 @@ strength_reduce (scan_start, end, loop_top, insn_count,\n \t  if (v->giv_type == DEST_ADDR\n \t      && GET_CODE (v->mult_val) == CONST_INT)\n \t    {\n-#if defined (HAVE_POST_INCREMENT) || defined (HAVE_PRE_INCREMENT)\n-\t      if (INTVAL (v->mult_val) == GET_MODE_SIZE (v->mem_mode))\n+\t      if (HAVE_POST_INCREMENT\n+\t\t  && INTVAL (v->mult_val) == GET_MODE_SIZE (v->mem_mode))\n \t\tbenefit += add_cost * bl->biv_count;\n-#endif\n-#if defined (HAVE_POST_DECREMENT) || defined (HAVE_PRE_DECREMENT)\n-\t      if (-INTVAL (v->mult_val) == GET_MODE_SIZE (v->mem_mode))\n+\t      else if (HAVE_PRE_INCREMENT\n+\t\t       && INTVAL (v->mult_val) == GET_MODE_SIZE (v->mem_mode))\n+\t\tbenefit += add_cost * bl->biv_count;\n+\t      else if (HAVE_POST_DECREMENT\n+\t\t       && -INTVAL (v->mult_val) == GET_MODE_SIZE (v->mem_mode))\n+\t\tbenefit += add_cost * bl->biv_count;\n+\t      else if (HAVE_PRE_DECREMENT\n+\t\t       && -INTVAL (v->mult_val) == GET_MODE_SIZE (v->mem_mode))\n \t\tbenefit += add_cost * bl->biv_count;\n-#endif\n \t    }\n #endif\n "}, {"sha": "1c249ea05291043a041157aeb25fa1aec5ebbc55", "filename": "gcc/regclass.c", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/940da3246db50a1c1fde531ba1457e6bef61b3f9/gcc%2Fregclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/940da3246db50a1c1fde531ba1457e6bef61b3f9/gcc%2Fregclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregclass.c?ref=940da3246db50a1c1fde531ba1457e6bef61b3f9", "patch": "@@ -1770,25 +1770,21 @@ auto_inc_dec_reg_p (reg, mode)\n      rtx reg;\n      enum machine_mode mode;\n {\n-#ifdef HAVE_POST_INCREMENT\n-  if (memory_address_p (mode, gen_rtx_POST_INC (Pmode, reg)))\n+  if (HAVE_POST_INCREMENT\n+      && memory_address_p (mode, gen_rtx_POST_INC (Pmode, reg)))\n     return 1;\n-#endif\n \n-#ifdef HAVE_POST_DECREMENT\n-  if (memory_address_p (mode, gen_rtx_POST_DEC (Pmode, reg)))\n+  if (HAVE_POST_DECREMENT\n+      && memory_address_p (mode, gen_rtx_POST_DEC (Pmode, reg)))\n     return 1;\n-#endif\n \n-#ifdef HAVE_PRE_INCREMENT\n-  if (memory_address_p (mode, gen_rtx_PRE_INC (Pmode, reg)))\n+  if (HAVE_PRE_INCREMENT\n+      && memory_address_p (mode, gen_rtx_PRE_INC (Pmode, reg)))\n     return 1;\n-#endif\n \n-#ifdef HAVE_PRE_DECREMENT\n-  if (memory_address_p (mode, gen_rtx_PRE_DEC (Pmode, reg)))\n+  if (HAVE_PRE_DECREMENT\n+      && memory_address_p (mode, gen_rtx_PRE_DEC (Pmode, reg)))\n     return 1;\n-#endif\n \n   return 0;\n }"}, {"sha": "937241a5db2f2a0cecdf6411a392e6c47f575a30", "filename": "gcc/regmove.c", "status": "modified", "additions": 17, "deletions": 35, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/940da3246db50a1c1fde531ba1457e6bef61b3f9/gcc%2Fregmove.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/940da3246db50a1c1fde531ba1457e6bef61b3f9/gcc%2Fregmove.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregmove.c?ref=940da3246db50a1c1fde531ba1457e6bef61b3f9", "patch": "@@ -52,9 +52,7 @@ struct match {\n   int early_clobber[MAX_RECOG_OPERANDS];\n };\n \n-#ifdef AUTO_INC_DEC\n static int try_auto_increment PROTO((rtx, rtx, rtx, rtx, HOST_WIDE_INT, int));\n-#endif\n static int find_matches PROTO((rtx, struct match *));\n static int fixup_match_1 PROTO((rtx, rtx, rtx, rtx, rtx, int, int, int, FILE *))\n ;\n@@ -93,7 +91,6 @@ gen_add3_insn (r0, r1, c)\n   return (GEN_FCN (icode) (r0, r1, c));\n }\n \n-#ifdef AUTO_INC_DEC\n \n /* INC_INSN is an instruction that adds INCREMENT to REG.\n    Try to fold INC_INSN as a post/pre in/decrement into INSN.\n@@ -117,18 +114,14 @@ try_auto_increment (insn, inc_insn, inc_insn_set, reg, increment, pre)\n \t{\n \t  int size = GET_MODE_SIZE (GET_MODE (use));\n \t  if (0\n-#ifdef HAVE_POST_INCREMENT\n-\t      || (pre == 0 && (inc_code = POST_INC, increment == size))\n-#endif\n-#ifdef HAVE_PRE_INCREMENT\n-\t      || (pre == 1 && (inc_code = PRE_INC, increment == size))\n-#endif\n-#ifdef HAVE_POST_DECREMENT\n-\t      || (pre == 0 && (inc_code = POST_DEC, increment == -size))\n-#endif\n-#ifdef HAVE_PRE_DECREMENT\n-\t      || (pre == 1 && (inc_code = PRE_DEC, increment == -size))\n-#endif\n+\t      || (HAVE_POST_INCREMENT\n+\t\t  && pre == 0 && (inc_code = POST_INC, increment == size))\n+\t      || (HAVE_PRE_INCREMENT\n+\t\t  && pre == 1 && (inc_code = PRE_INC, increment == size))\n+\t      || (HAVE_POST_DECREMENT\n+\t\t  && pre == 0 && (inc_code = POST_DEC, increment == -size))\n+\t      || (HAVE_PRE_DECREMENT\n+\t\t  && pre == 1 && (inc_code = PRE_DEC, increment == -size))\n \t  )\n \t    {\n \t      if (inc_insn_set)\n@@ -156,7 +149,6 @@ try_auto_increment (insn, inc_insn, inc_insn_set, reg, increment, pre)\n     }\n   return 0;\n }\n-#endif  /* AUTO_INC_DEC */\n \n static int *regno_src_regno;\n \n@@ -1725,11 +1717,10 @@ fixup_match_1 (insn, set, src, src_subreg, dst, backward, operand_number,\n   if (code == MINUS)\n     {\n       post_inc = emit_insn_after (copy_rtx (PATTERN (insn)), p);\n-#if defined (HAVE_PRE_INCREMENT) || defined (HAVE_PRE_DECREMENT)\n-      if (search_end\n+      if ((HAVE_PRE_INCREMENT || HAVE_PRE_DECREMENT)\n+\t  && search_end\n \t  && try_auto_increment (search_end, post_inc, 0, src, newconst, 1))\n \tpost_inc = 0;\n-#endif\n       validate_change (insn, &XEXP (SET_SRC (set), 1), GEN_INT (insn_const), 0);\n       REG_N_SETS (REGNO (src))++;\n       REG_N_REFS (REGNO (src)) += true_loop_depth;\n@@ -1834,31 +1825,23 @@ fixup_match_1 (insn, set, src, src_subreg, dst, backward, operand_number,\n      else in the next two conditionally included code blocks.  */\n   if (0)\n     {;}\n-#if defined (HAVE_PRE_INCREMENT) || defined (HAVE_PRE_DECREMENT)\n-  else if ((code == PLUS || code == MINUS) && insn_const\n+  else if ((HAVE_PRE_INCREMENT || HAVE_PRE_DECREMENT)\n+\t   && (code == PLUS || code == MINUS) && insn_const\n \t   && try_auto_increment (p, insn, 0, src, insn_const, 1))\n     insn = p;\n-#endif\n-#if defined (HAVE_POST_INCREMENT) || defined (HAVE_POST_DECREMENT)\n-  else if (post_inc\n+  else if ((HAVE_POST_INCREMENT || HAVE_POST_DECREMENT)\n+\t   && post_inc\n \t   && try_auto_increment (p, post_inc, post_inc_set, src, newconst, 0))\n     post_inc = 0;\n-#endif\n-#if defined (HAVE_PRE_INCREMENT) || defined (HAVE_PRE_DECREMENT)\n   /* If post_inc still prevails, try to find an\n      insn where it can be used as a pre-in/decrement.\n      If code is MINUS, this was already tried.  */\n   if (post_inc && code == PLUS\n   /* Check that newconst is likely to be usable\n      in a pre-in/decrement before starting the search.  */\n-      && (0\n-#if defined (HAVE_PRE_INCREMENT)\n-\t  || (newconst > 0 && newconst <= MOVE_MAX)\n-#endif\n-#if defined (HAVE_PRE_DECREMENT)\n-\t  || (newconst < 0 && newconst >= -MOVE_MAX)\n-#endif\n-\t ) && exact_log2 (newconst))\n+      && ((HAVE_PRE_INCREMENT && newconst > 0 && newconst <= MOVE_MAX)\n+\t  || (HAVE_PRE_DECREMENT && newconst < 0 && newconst >= -MOVE_MAX))\n+      && exact_log2 (newconst))\n     {\n       rtx q, inc_dest;\n \n@@ -1895,7 +1878,6 @@ fixup_match_1 (insn, set, src, src_subreg, dst, backward, operand_number,\n \t    }\n \t}\n     }\n-#endif /* defined (HAVE_PRE_INCREMENT) || defined (HAVE_PRE_DECREMENT) */\n   /* Move the death note for DST to INSN if it is used\n      there.  */\n   if (reg_overlap_mentioned_p (dst, PATTERN (insn)))"}, {"sha": "6c47f2f9a1ccf6b61ab8c05e1e438d4715672320", "filename": "gcc/rtl.h", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/940da3246db50a1c1fde531ba1457e6bef61b3f9/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/940da3246db50a1c1fde531ba1457e6bef61b3f9/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=940da3246db50a1c1fde531ba1457e6bef61b3f9", "patch": "@@ -699,6 +699,22 @@ extern char *note_insn_name[];\n #define AUTO_INC_DEC\n #endif\n \n+#ifndef HAVE_PRE_INCREMENT\n+#define HAVE_PRE_INCREMENT 0\n+#endif\n+\n+#ifndef HAVE_PRE_DECREMENT\n+#define HAVE_PRE_DECREMENT 0\n+#endif\n+\n+#ifndef HAVE_POST_INCREMENT\n+#define HAVE_POST_INCREMENT 0\n+#endif\n+\n+#ifndef HAVE_POST_DECREMENT\n+#define HAVE_POST_DECREMENT 0\n+#endif\n+\n /* Accessors for RANGE_INFO.  */\n /* For RANGE_{START,END} notes return the RANGE_START note.  */\n #define RANGE_INFO_NOTE_START(INSN) (XEXP (INSN, 0))"}, {"sha": "be5ccc9a1faac0444be555e3c6941b9990021b4f", "filename": "gcc/tm.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/940da3246db50a1c1fde531ba1457e6bef61b3f9/gcc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/940da3246db50a1c1fde531ba1457e6bef61b3f9/gcc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftm.texi?ref=940da3246db50a1c1fde531ba1457e6bef61b3f9", "patch": "@@ -4156,7 +4156,7 @@ This is about addressing modes.\n @table @code\n @findex HAVE_POST_INCREMENT\n @item HAVE_POST_INCREMENT\n-Define this macro if the machine supports post-increment addressing.\n+A C expression that is nonzero the machine supports post-increment addressing.\n \n @findex HAVE_PRE_INCREMENT\n @findex HAVE_POST_DECREMENT"}]}