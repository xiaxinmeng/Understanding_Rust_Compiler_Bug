{"sha": "ad4f3f5d4eb21c886b168a092cc7e5860e3b3119", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQ0ZjNmNWQ0ZWIyMWM4ODZiMTY4YTA5MmNjN2U1ODYwZTNiMzExOQ==", "commit": {"author": {"name": "Yury Gribov", "email": "tetra2005@gmail.com", "date": "2018-05-23T07:40:43Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2018-05-23T07:40:43Z"}, "message": "re PR tree-optimization/85822 (Maybe wrong code in VRP since r249150)\n\nPR tree-optimization/85822\n\nFrom-SVN: r260566", "tree": {"sha": "4d4faf458c5f0a9360d69a79fa3a4e41b6beae2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d4faf458c5f0a9360d69a79fa3a4e41b6beae2b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad4f3f5d4eb21c886b168a092cc7e5860e3b3119", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad4f3f5d4eb21c886b168a092cc7e5860e3b3119", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad4f3f5d4eb21c886b168a092cc7e5860e3b3119", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad4f3f5d4eb21c886b168a092cc7e5860e3b3119/comments", "author": {"login": "yugr", "id": 1101391, "node_id": "MDQ6VXNlcjExMDEzOTE=", "avatar_url": "https://avatars.githubusercontent.com/u/1101391?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yugr", "html_url": "https://github.com/yugr", "followers_url": "https://api.github.com/users/yugr/followers", "following_url": "https://api.github.com/users/yugr/following{/other_user}", "gists_url": "https://api.github.com/users/yugr/gists{/gist_id}", "starred_url": "https://api.github.com/users/yugr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yugr/subscriptions", "organizations_url": "https://api.github.com/users/yugr/orgs", "repos_url": "https://api.github.com/users/yugr/repos", "events_url": "https://api.github.com/users/yugr/events{/privacy}", "received_events_url": "https://api.github.com/users/yugr/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b72feab889cd7925fab59771269638fcc88bc195", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b72feab889cd7925fab59771269638fcc88bc195", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b72feab889cd7925fab59771269638fcc88bc195"}], "stats": {"total": 49, "additions": 44, "deletions": 5}, "files": [{"sha": "202b658d872b6391fd9bdae0c33ad255211405e8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad4f3f5d4eb21c886b168a092cc7e5860e3b3119/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad4f3f5d4eb21c886b168a092cc7e5860e3b3119/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ad4f3f5d4eb21c886b168a092cc7e5860e3b3119", "patch": "@@ -1,3 +1,9 @@\n+2018-05-23  Yury Gribov  <tetra2005@gmail.com>\n+\n+\tPR tree-optimization/85822\n+\t* tree-vrp.c (is_masked_range_test): Fix handling of negative\n+\tconstants.\n+\n 2018-05-23  Richard Biener  <rguenther@suse.de>\n \n \t* tree-ssa-sccvn.c (vn_reference_lookup_3): Handle arbitrary"}, {"sha": "075f845977fdad6d45768c950524bebec4a2018f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad4f3f5d4eb21c886b168a092cc7e5860e3b3119/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad4f3f5d4eb21c886b168a092cc7e5860e3b3119/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ad4f3f5d4eb21c886b168a092cc7e5860e3b3119", "patch": "@@ -1,3 +1,8 @@\n+2018-05-23  Yury Gribov  <tetra2005@gmail.com>\n+\n+\tPR tree-optimization/85822\n+\t* c-c++-common/pr85822.c: New test.\n+\n 2018-05-23  Richard Biener  <rguenther@suse.de>\n \n \t* gcc.dg/tree-ssa/ssa-fre-65.c: New testcase."}, {"sha": "3b09188ab47c3206b52427f581d6d1922521e42e", "filename": "gcc/testsuite/c-c++-common/pr85822.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad4f3f5d4eb21c886b168a092cc7e5860e3b3119/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr85822.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad4f3f5d4eb21c886b168a092cc7e5860e3b3119/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr85822.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr85822.c?ref=ad4f3f5d4eb21c886b168a092cc7e5860e3b3119", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-options \"-O2\" } */\n+/* { dg-do run } */\n+\n+static const long long int TagTypeNumber = 0xffff000000000000ll;\n+\n+long long int x;\n+\n+void foo(void)\n+{\n+  x = TagTypeNumber + 1;\n+}\n+\n+int main(int argc, char **argv)\n+{\n+  if (argc > 0)\n+    foo ();\n+\n+  if ((x & TagTypeNumber) == TagTypeNumber)\n+  {\n+    unsigned y = (unsigned)x;\n+    __builtin_printf (\"v: %u\\n\", y);\n+    if (y != 1)\n+      __builtin_abort ();\n+  }\n+\n+  return 0;\n+}"}, {"sha": "6c482dd3e46f58ab4492d24cafaa280dbb7b9b02", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad4f3f5d4eb21c886b168a092cc7e5860e3b3119/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad4f3f5d4eb21c886b168a092cc7e5860e3b3119/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=ad4f3f5d4eb21c886b168a092cc7e5860e3b3119", "patch": "@@ -3844,10 +3844,10 @@ register_edge_assert_for_1 (tree op, enum tree_code code,\n    Such comparison can yield assertions like\n      X >= XX...X00...0\n      X <= XX...X11...1\n-   in case of COND_OP being NE_EXPR or\n+   in case of COND_OP being EQ_EXPR or\n      X < XX...X00...0\n      X > XX...X11...1\n-   in case of EQ_EXPR.  */\n+   in case of NE_EXPR.  */\n \n static bool\n is_masked_range_test (tree name, tree valt, enum tree_code cond_code,\n@@ -3867,6 +3867,10 @@ is_masked_range_test (tree name, tree valt, enum tree_code cond_code,\n \n   wi::tree_to_wide_ref mask = wi::to_wide (maskt);\n   wide_int inv_mask = ~mask;\n+  /* Must have been removed by now so don't bother optimizing.  */\n+  if (mask == 0 || inv_mask == 0)\n+    return false;\n+\n   /* Assume VALT is INTEGER_CST.  */\n   wi::tree_to_wide_ref val = wi::to_wide (valt);\n \n@@ -3907,9 +3911,6 @@ is_masked_range_test (tree name, tree valt, enum tree_code cond_code,\n   *low = wide_int_to_tree (type, val);\n   *high = wide_int_to_tree (type, val | inv_mask);\n \n-  if (wi::neg_p (val, TYPE_SIGN (type)))\n-    std::swap (*low, *high);\n-\n   return true;\n }\n "}]}