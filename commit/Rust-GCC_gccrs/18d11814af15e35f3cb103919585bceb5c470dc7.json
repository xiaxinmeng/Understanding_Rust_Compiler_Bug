{"sha": "18d11814af15e35f3cb103919585bceb5c470dc7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MThkMTE4MTRhZjE1ZTM1ZjNjYjEwMzkxOTU4NWJjZWI1YzQ3MGRjNw==", "commit": {"author": {"name": "Alan Lawrence", "email": "alan.lawrence@arm.com", "date": "2014-11-14T17:20:40Z"}, "committer": {"name": "Alan Lawrence", "email": "alalaw01@gcc.gnu.org", "date": "2014-11-14T17:20:40Z"}, "message": "[Vectorizer] Tidy up vect_create_epilog / use_scalar_result\n\n\t* tree-vect-loop.c (vect_create_epilog_for_reduction): Move code for\n\t'if (extract_scalar_result)' to the only place that it is true.\n\nFrom-SVN: r217580", "tree": {"sha": "7db8c7ede2c9504c71888e1c759e6c694ae291c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7db8c7ede2c9504c71888e1c759e6c694ae291c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/18d11814af15e35f3cb103919585bceb5c470dc7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18d11814af15e35f3cb103919585bceb5c470dc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18d11814af15e35f3cb103919585bceb5c470dc7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18d11814af15e35f3cb103919585bceb5c470dc7/comments", "author": null, "committer": null, "parents": [{"sha": "b1bf6c522f1631e6094465996ddd19a5d9c7941f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1bf6c522f1631e6094465996ddd19a5d9c7941f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1bf6c522f1631e6094465996ddd19a5d9c7941f"}], "stats": {"total": 45, "additions": 21, "deletions": 24}, "files": [{"sha": "48366abe76becec36f91f1f6ef0b1e77bde514f7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18d11814af15e35f3cb103919585bceb5c470dc7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18d11814af15e35f3cb103919585bceb5c470dc7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=18d11814af15e35f3cb103919585bceb5c470dc7", "patch": "@@ -1,3 +1,8 @@\n+2014-11-14  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\t* tree-vect-loop.c (vect_create_epilog_for_reduction): Move code for\n+\t'if (extract_scalar_result)' to the only place that it is true.\n+\n 2014-11-14  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config.gcc (default_gnu_indirect_function): Set to yes"}, {"sha": "70405d86f3493a1ddf320c21e8e9857f6015d566", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 16, "deletions": 24, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18d11814af15e35f3cb103919585bceb5c470dc7/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18d11814af15e35f3cb103919585bceb5c470dc7/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=18d11814af15e35f3cb103919585bceb5c470dc7", "patch": "@@ -3914,7 +3914,6 @@ vect_create_epilog_for_reduction (vec<tree> vect_defs, gimple stmt,\n   tree orig_name, scalar_result;\n   imm_use_iterator imm_iter, phi_imm_iter;\n   use_operand_p use_p, phi_use_p;\n-  bool extract_scalar_result = false;\n   gimple use_stmt, orig_stmt, reduction_phi = NULL;\n   bool nested_in_vect_loop = false;\n   auto_vec<gimple> new_phis;\n@@ -4281,6 +4280,8 @@ vect_create_epilog_for_reduction (vec<tree> vect_defs, gimple stmt,\n                   Create:  va = vop <va, va'>\n                 }  */\n \n+          tree rhs;\n+\n           if (dump_enabled_p ())\n             dump_printf_loc (MSG_NOTE, vect_location,\n \t\t\t     \"Reduce using vector shifts\\n\");\n@@ -4307,7 +4308,20 @@ vect_create_epilog_for_reduction (vec<tree> vect_defs, gimple stmt,\n               gsi_insert_before (&exit_gsi, epilog_stmt, GSI_SAME_STMT);\n             }\n \n-          extract_scalar_result = true;\n+\t  /* 2.4  Extract the final scalar result.  Create:\n+\t     s_out3 = extract_field <v_out2, bitpos>  */\n+\n+\t  if (dump_enabled_p ())\n+\t    dump_printf_loc (MSG_NOTE, vect_location,\n+\t\t\t     \"extract scalar result\\n\");\n+\n+\t  rhs = build3 (BIT_FIELD_REF, scalar_type, new_temp,\n+\t\t\tbitsize, bitsize_zero_node);\n+\t  epilog_stmt = gimple_build_assign (new_scalar_dest, rhs);\n+\t  new_temp = make_ssa_name (new_scalar_dest, epilog_stmt);\n+\t  gimple_assign_set_lhs (epilog_stmt, new_temp);\n+\t  gsi_insert_before (&exit_gsi, epilog_stmt, GSI_SAME_STMT);\n+\t  scalar_results.safe_push (new_temp);\n         }\n       else\n         {\n@@ -4401,30 +4415,8 @@ vect_create_epilog_for_reduction (vec<tree> vect_defs, gimple stmt,\n           else\n             /* Not SLP - we have one scalar to keep in SCALAR_RESULTS.  */\n             scalar_results.safe_push (new_temp);\n-\n-          extract_scalar_result = false;\n         }\n     }\n-\n-  /* 2.4  Extract the final scalar result.  Create:\n-          s_out3 = extract_field <v_out2, bitpos>  */\n-\n-  if (extract_scalar_result)\n-    {\n-      tree rhs;\n-\n-      if (dump_enabled_p ())\n-        dump_printf_loc (MSG_NOTE, vect_location,\n-\t\t\t \"extract scalar result\\n\");\n-\n-      rhs = build3 (BIT_FIELD_REF, scalar_type,\n-\t\t    new_temp, bitsize, bitsize_zero_node);\n-      epilog_stmt = gimple_build_assign (new_scalar_dest, rhs);\n-      new_temp = make_ssa_name (new_scalar_dest, epilog_stmt);\n-      gimple_assign_set_lhs (epilog_stmt, new_temp);\n-      gsi_insert_before (&exit_gsi, epilog_stmt, GSI_SAME_STMT);\n-      scalar_results.safe_push (new_temp);\n-    }\n   \n vect_finalize_reduction:\n "}]}