{"sha": "0791ac186bdddf4c52a59ee240ad9c3c9d7f197a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDc5MWFjMTg2YmRkZGY0YzUyYTU5ZWUyNDBhZDljM2M5ZDdmMTk3YQ==", "commit": {"author": {"name": "Michael Clark", "email": "michaeljclark@mac.com", "date": "2017-11-05T00:42:54Z"}, "committer": {"name": "Palmer Dabbelt", "email": "palmer@gcc.gnu.org", "date": "2017-11-05T00:42:54Z"}, "message": "RISC-V: Emit \"i\" suffix for instructions with immediate operands\n\nThis changes makes GCC asm output use instruction names that are\nconsistent with the RISC-V ISA manual.  The assembler accepts\nimmediate-operand instructions without the \"i\" suffix, so this all\nworked before, it's just a bit cleaner to match the ISA manual more\nclosely.\n\ngcc/ChangeLog\n\n2017-10-03  Michael Clark  <michaeljclark@mac.com>\n\n        * config/riscv/riscv.c (riscv_print_operand): Add a 'i' format.\n        config/riscv/riscv.md (addsi3): Use 'i' for immediates.\n        (adddi3): Likewise.\n        (*addsi3_extended): Likewise.\n        (*addsi3_extended2): Likewise.\n        (<optab>si3): Likewise.\n        (<optab>di3): Likewise.\n        (<optab><mode>3): Likewise.\n        (<*optabe>si3_internal): Likewise.\n        (zero_extendqi<SUPERQI:mode>2): Likewise.\n        (*add<mode>hi3): Likewise.\n        (*xor<mode>hi3): Likewise.\n        (<optab>di3): Likewise.\n        (*<optab>si3_extend): Likewise.\n        (*sge<u>_<X:mode><GPR:mode>): Likewise.\n        (*slt<u>_<X:mode><GPR:mode>): Likewise.\n        (*sle<u>_<X:mode><GPR:mode>): Likewise.\n\nFrom-SVN: r254418", "tree": {"sha": "d291ddd95c47c7d5f65f50af1fbfdc22676d3b1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d291ddd95c47c7d5f65f50af1fbfdc22676d3b1f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0791ac186bdddf4c52a59ee240ad9c3c9d7f197a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0791ac186bdddf4c52a59ee240ad9c3c9d7f197a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0791ac186bdddf4c52a59ee240ad9c3c9d7f197a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0791ac186bdddf4c52a59ee240ad9c3c9d7f197a/comments", "author": {"login": "michaeljclark", "id": 358119, "node_id": "MDQ6VXNlcjM1ODExOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/358119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaeljclark", "html_url": "https://github.com/michaeljclark", "followers_url": "https://api.github.com/users/michaeljclark/followers", "following_url": "https://api.github.com/users/michaeljclark/following{/other_user}", "gists_url": "https://api.github.com/users/michaeljclark/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaeljclark/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaeljclark/subscriptions", "organizations_url": "https://api.github.com/users/michaeljclark/orgs", "repos_url": "https://api.github.com/users/michaeljclark/repos", "events_url": "https://api.github.com/users/michaeljclark/events{/privacy}", "received_events_url": "https://api.github.com/users/michaeljclark/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "caf1c1cd1253a847644744e3d6df3f98051ef024", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/caf1c1cd1253a847644744e3d6df3f98051ef024", "html_url": "https://github.com/Rust-GCC/gccrs/commit/caf1c1cd1253a847644744e3d6df3f98051ef024"}], "stats": {"total": 64, "additions": 45, "deletions": 19}, "files": [{"sha": "5bc835140d161a992a49bf3e174885e68c8f2cd5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0791ac186bdddf4c52a59ee240ad9c3c9d7f197a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0791ac186bdddf4c52a59ee240ad9c3c9d7f197a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0791ac186bdddf4c52a59ee240ad9c3c9d7f197a", "patch": "@@ -1,3 +1,23 @@\n+2017-11-04  Michael Clark  <michaeljclark@mac.com>\n+\n+\t* config/riscv/riscv.c (riscv_print_operand): Add a 'i' format.\n+\tconfig/riscv/riscv.md (addsi3): Use 'i' for immediates.\n+\t(adddi3): Likewise.\n+\t(*addsi3_extended): Likewise.\n+\t(*addsi3_extended2): Likewise.\n+\t(<optab>si3): Likewise.\n+\t(<optab>di3): Likewise.\n+\t(<optab><mode>3): Likewise.\n+\t(<*optabe>si3_internal): Likewise.\n+\t(zero_extendqi<SUPERQI:mode>2): Likewise.\n+\t(*add<mode>hi3): Likewise.\n+\t(*xor<mode>hi3): Likewise.\n+\t(<optab>di3): Likewise.\n+\t(*<optab>si3_extend): Likewise.\n+\t(*sge<u>_<X:mode><GPR:mode>): Likewise.\n+\t(*slt<u>_<X:mode><GPR:mode>): Likewise.\n+\t(*sle<u>_<X:mode><GPR:mode>): Likewise.\n+\n 2017-11-04  Andrew Waterman  <andrew@sifive.com>\n \n \t* config/riscv/riscv.c (riscv_option_override): Conditionally set"}, {"sha": "4a16a75fbafa4bc1c625eae81c2621e90c13ead7", "filename": "gcc/config/riscv/riscv.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0791ac186bdddf4c52a59ee240ad9c3c9d7f197a/gcc%2Fconfig%2Friscv%2Friscv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0791ac186bdddf4c52a59ee240ad9c3c9d7f197a/gcc%2Fconfig%2Friscv%2Friscv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.c?ref=0791ac186bdddf4c52a59ee240ad9c3c9d7f197a", "patch": "@@ -2733,7 +2733,8 @@ riscv_memmodel_needs_release_fence (enum memmodel model)\n    'C'\tPrint the integer branch condition for comparison OP.\n    'A'\tPrint the atomic operation suffix for memory model OP.\n    'F'\tPrint a FENCE if the memory model requires a release.\n-   'z'\tPrint x0 if OP is zero, otherwise print OP normally.  */\n+   'z'\tPrint x0 if OP is zero, otherwise print OP normally.\n+   'i'\tPrint i if the operand is not a register.  */\n \n static void\n riscv_print_operand (FILE *file, rtx op, int letter)\n@@ -2768,6 +2769,11 @@ riscv_print_operand (FILE *file, rtx op, int letter)\n \tfputs (\"fence iorw,ow; \", file);\n       break;\n \n+    case 'i':\n+      if (code != REG)\n+        fputs (\"i\", file);\n+      break;\n+\n     default:\n       switch (code)\n \t{"}, {"sha": "53e1db97db7d7e4b358d7383980e290cdbaa368b", "filename": "gcc/config/riscv/riscv.md", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0791ac186bdddf4c52a59ee240ad9c3c9d7f197a/gcc%2Fconfig%2Friscv%2Friscv.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0791ac186bdddf4c52a59ee240ad9c3c9d7f197a/gcc%2Fconfig%2Friscv%2Friscv.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.md?ref=0791ac186bdddf4c52a59ee240ad9c3c9d7f197a", "patch": "@@ -414,7 +414,7 @@\n \t(plus:SI (match_operand:SI 1 \"register_operand\" \" r,r\")\n \t\t (match_operand:SI 2 \"arith_operand\"    \" r,I\")))]\n   \"\"\n-  { return TARGET_64BIT ? \"addw\\t%0,%1,%2\" : \"add\\t%0,%1,%2\"; }\n+  { return TARGET_64BIT ? \"add%i2w\\t%0,%1,%2\" : \"add%i2\\t%0,%1,%2\"; }\n   [(set_attr \"type\" \"arith\")\n    (set_attr \"mode\" \"SI\")])\n \n@@ -423,7 +423,7 @@\n \t(plus:DI (match_operand:DI 1 \"register_operand\" \" r,r\")\n \t\t (match_operand:DI 2 \"arith_operand\"    \" r,I\")))]\n   \"TARGET_64BIT\"\n-  \"add\\t%0,%1,%2\"\n+  \"add%i2\\t%0,%1,%2\"\n   [(set_attr \"type\" \"arith\")\n    (set_attr \"mode\" \"DI\")])\n \n@@ -433,7 +433,7 @@\n \t     (plus:SI (match_operand:SI 1 \"register_operand\" \" r,r\")\n \t\t      (match_operand:SI 2 \"arith_operand\"    \" r,I\"))))]\n   \"TARGET_64BIT\"\n-  \"addw\\t%0,%1,%2\"\n+  \"add%i2w\\t%0,%1,%2\"\n   [(set_attr \"type\" \"arith\")\n    (set_attr \"mode\" \"SI\")])\n \n@@ -444,7 +444,7 @@\n \t\t\t      (match_operand:DI 2 \"arith_operand\"    \" r,I\"))\n \t\t     0)))]\n   \"TARGET_64BIT\"\n-  \"addw\\t%0,%1,%2\"\n+  \"add%i2w\\t%0,%1,%2\"\n   [(set_attr \"type\" \"arith\")\n    (set_attr \"mode\" \"SI\")])\n \n@@ -705,7 +705,7 @@\n \t(any_div:SI (match_operand:SI 1 \"register_operand\" \" r\")\n \t\t    (match_operand:SI 2 \"register_operand\" \" r\")))]\n   \"TARGET_DIV\"\n-  { return TARGET_64BIT ? \"<insn>w\\t%0,%1,%2\" : \"<insn>\\t%0,%1,%2\"; }\n+  { return TARGET_64BIT ? \"<insn>%i2w\\t%0,%1,%2\" : \"<insn>%i2\\t%0,%1,%2\"; }\n   [(set_attr \"type\" \"idiv\")\n    (set_attr \"mode\" \"SI\")])\n \n@@ -714,7 +714,7 @@\n \t(any_div:DI (match_operand:DI 1 \"register_operand\" \" r\")\n \t\t    (match_operand:DI 2 \"register_operand\" \" r\")))]\n   \"TARGET_DIV && TARGET_64BIT\"\n-  \"<insn>\\t%0,%1,%2\"\n+  \"<insn>%i2\\t%0,%1,%2\"\n   [(set_attr \"type\" \"idiv\")\n    (set_attr \"mode\" \"DI\")])\n \n@@ -724,7 +724,7 @@\n \t    (any_div:SI (match_operand:SI 1 \"register_operand\" \" r\")\n \t\t\t(match_operand:SI 2 \"register_operand\" \" r\"))))]\n   \"TARGET_DIV && TARGET_64BIT\"\n-  \"<insn>w\\t%0,%1,%2\"\n+  \"<insn>%i2w\\t%0,%1,%2\"\n   [(set_attr \"type\" \"idiv\")\n    (set_attr \"mode\" \"DI\")])\n \n@@ -928,7 +928,7 @@\n \t(any_bitwise:X (match_operand:X 1 \"register_operand\" \"%r,r\")\n \t\t       (match_operand:X 2 \"arith_operand\"    \" r,I\")))]\n   \"\"\n-  \"<insn>\\t%0,%1,%2\"\n+  \"<insn>%i2\\t%0,%1,%2\"\n   [(set_attr \"type\" \"logical\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n@@ -937,7 +937,7 @@\n \t(any_bitwise:SI (match_operand:SI 1 \"register_operand\" \"%r,r\")\n \t\t\t(match_operand:SI 2 \"arith_operand\"    \" r,I\")))]\n   \"TARGET_64BIT\"\n-  \"<insn>\\t%0,%1,%2\"\n+  \"<insn>%i2\\t%0,%1,%2\"\n   [(set_attr \"type\" \"logical\")\n    (set_attr \"mode\" \"SI\")])\n \n@@ -1025,7 +1025,7 @@\n \t    (match_operand:QI 1 \"nonimmediate_operand\" \" r,m\")))]\n   \"\"\n   \"@\n-   and\\t%0,%1,0xff\n+   andi\\t%0,%1,0xff\n    lbu\\t%0,%1\"\n   [(set_attr \"move_type\" \"andi,load\")\n    (set_attr \"mode\" \"<SUPERQI:MODE>\")])\n@@ -1318,7 +1318,7 @@\n \t(plus:HI (match_operand:HISI 1 \"register_operand\" \" r,r\")\n \t\t (match_operand:HISI 2 \"arith_operand\"    \" r,I\")))]\n   \"\"\n-  { return TARGET_64BIT ? \"addw\\t%0,%1,%2\" : \"add\\t%0,%1,%2\"; }\n+  { return TARGET_64BIT ? \"add%i2w\\t%0,%1,%2\" : \"add%i2\\t%0,%1,%2\"; }\n   [(set_attr \"type\" \"arith\")\n    (set_attr \"mode\" \"HI\")])\n \n@@ -1327,7 +1327,7 @@\n \t(xor:HI (match_operand:HISI 1 \"register_operand\" \" r,r\")\n \t\t(match_operand:HISI 2 \"arith_operand\"    \" r,I\")))]\n   \"\"\n-  \"xor\\t%0,%1,%2\"\n+  \"xor%i2\\t%0,%1,%2\"\n   [(set_attr \"type\" \"logical\")\n    (set_attr \"mode\" \"HI\")])\n \n@@ -1475,7 +1475,7 @@\n     operands[2] = GEN_INT (INTVAL (operands[2])\n \t\t\t   & (GET_MODE_BITSIZE (SImode) - 1));\n \n-  return TARGET_64BIT ? \"<insn>w\\t%0,%1,%2\" : \"<insn>\\t%0,%1,%2\";\n+  return TARGET_64BIT ? \"<insn>%i2w\\t%0,%1,%2\" : \"<insn>%i2\\t%0,%1,%2\";\n }\n   [(set_attr \"type\" \"shift\")\n    (set_attr \"mode\" \"SI\")])\n@@ -1491,7 +1491,7 @@\n     operands[2] = GEN_INT (INTVAL (operands[2])\n \t\t\t   & (GET_MODE_BITSIZE (DImode) - 1));\n \n-  return \"<insn>\\t%0,%1,%2\";\n+  return \"<insn>%i2\\t%0,%1,%2\";\n }\n   [(set_attr \"type\" \"shift\")\n    (set_attr \"mode\" \"DI\")])\n@@ -1506,7 +1506,7 @@\n   if (GET_CODE (operands[2]) == CONST_INT)\n     operands[2] = GEN_INT (INTVAL (operands[2]) & 0x1f);\n \n-  return \"<insn>w\\t%0,%1,%2\";\n+  return \"<insn>%i2w\\t%0,%1,%2\";\n }\n   [(set_attr \"type\" \"shift\")\n    (set_attr \"mode\" \"SI\")])\n@@ -1725,7 +1725,7 @@\n \t(any_ge:GPR (match_operand:X 1 \"register_operand\" \" r\")\n \t\t    (const_int 1)))]\n   \"\"\n-  \"slt<u>\\t%0,zero,%1\"\n+  \"slt%i2<u>\\t%0,zero,%1\"\n   [(set_attr \"type\" \"slt\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n@@ -1734,7 +1734,7 @@\n \t(any_lt:GPR (match_operand:X 1 \"register_operand\" \"  r\")\n \t\t    (match_operand:X 2 \"arith_operand\"    \" rI\")))]\n   \"\"\n-  \"slt<u>\\t%0,%1,%2\"\n+  \"slt%i2<u>\\t%0,%1,%2\"\n   [(set_attr \"type\" \"slt\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n@@ -1745,7 +1745,7 @@\n   \"\"\n {\n   operands[2] = GEN_INT (INTVAL (operands[2]) + 1);\n-  return \"slt<u>\\t%0,%1,%2\";\n+  return \"slt%i2<u>\\t%0,%1,%2\";\n }\n   [(set_attr \"type\" \"slt\")\n    (set_attr \"mode\" \"<MODE>\")])"}]}