{"sha": "d97633ef656271d68473d65267902dfe0b0956d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDk3NjMzZWY2NTYyNzFkNjg0NzNkNjUyNjc5MDJkZmUwYjA5NTZkNA==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2016-04-12T11:02:32Z"}, "committer": {"name": "Thomas Schwinge", "email": "tschwinge@gcc.gnu.org", "date": "2016-04-12T11:02:32Z"}, "message": "Merge libgomp.oacc-c-c++-common/loop-reduction-*.c into libgomp.oacc-c-c++-common/reduction-7.c\n\n\tlibgomp/\n\t* testsuite/libgomp.oacc-c-c++-common/loop-reduction-gang-np-1.c:\n\tMerge this file, and...\n\t* testsuite/libgomp.oacc-c-c++-common/loop-reduction-gv-np-1.c:\n\t... this file, and...\n\t* testsuite/libgomp.oacc-c-c++-common/loop-reduction-gw-np-1.c:\n\t... this file, and...\n\t* testsuite/libgomp.oacc-c-c++-common/loop-reduction-gwv-np-1.c:\n\t... this file, and...\n\t* testsuite/libgomp.oacc-c-c++-common/loop-reduction-gwv-np-2.c:\n\t... this file, and...\n\t* testsuite/libgomp.oacc-c-c++-common/loop-reduction-gwv-np-3.c:\n\t... this file, and...\n\t* testsuite/libgomp.oacc-c-c++-common/loop-reduction-gwv-np-4.c:\n\t... this file, and...\n\t* testsuite/libgomp.oacc-c-c++-common/loop-reduction-vector-p-1.c:\n\t... this file, and...\n\t* testsuite/libgomp.oacc-c-c++-common/loop-reduction-vector-p-2.c:\n\t... this file, and...\n\t* testsuite/libgomp.oacc-c-c++-common/loop-reduction-worker-p-1.c:\n\t... this file, and...\n\t* testsuite/libgomp.oacc-c-c++-common/loop-reduction-wv-p-1.c:\n\t... this file, and...\n\t* testsuite/libgomp.oacc-c-c++-common/loop-reduction-wv-p-2.c:\n\t... this file, and...\n\t* testsuite/libgomp.oacc-c-c++-common/loop-reduction-wv-p-3.c:\n\t... this file into...\n\t* testsuite/libgomp.oacc-c-c++-common/reduction-7.c: ... this\n\tfile.\n\nFrom-SVN: r234899", "tree": {"sha": "3393e08ba599fadedb1ac88fc1156c593ed6591f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3393e08ba599fadedb1ac88fc1156c593ed6591f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d97633ef656271d68473d65267902dfe0b0956d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d97633ef656271d68473d65267902dfe0b0956d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d97633ef656271d68473d65267902dfe0b0956d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d97633ef656271d68473d65267902dfe0b0956d4/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "27f9add31b0f005b0b90bf5d357dd0f7b664b664", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27f9add31b0f005b0b90bf5d357dd0f7b664b664", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27f9add31b0f005b0b90bf5d357dd0f7b664b664"}], "stats": {"total": 886, "additions": 380, "deletions": 506}, "files": [{"sha": "1716ba071d5dfa73b82030742d54b68007f875ae", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d97633ef656271d68473d65267902dfe0b0956d4/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d97633ef656271d68473d65267902dfe0b0956d4/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=d97633ef656271d68473d65267902dfe0b0956d4", "patch": "@@ -1,5 +1,34 @@\n 2016-04-12  Thomas Schwinge  <thomas@codesourcery.com>\n \n+\t* testsuite/libgomp.oacc-c-c++-common/loop-reduction-gang-np-1.c:\n+\tMerge this file, and...\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-reduction-gv-np-1.c:\n+\t... this file, and...\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-reduction-gw-np-1.c:\n+\t... this file, and...\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-reduction-gwv-np-1.c:\n+\t... this file, and...\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-reduction-gwv-np-2.c:\n+\t... this file, and...\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-reduction-gwv-np-3.c:\n+\t... this file, and...\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-reduction-gwv-np-4.c:\n+\t... this file, and...\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-reduction-vector-p-1.c:\n+\t... this file, and...\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-reduction-vector-p-2.c:\n+\t... this file, and...\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-reduction-worker-p-1.c:\n+\t... this file, and...\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-reduction-wv-p-1.c:\n+\t... this file, and...\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-reduction-wv-p-2.c:\n+\t... this file, and...\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-reduction-wv-p-3.c:\n+\t... this file into...\n+\t* testsuite/libgomp.oacc-c-c++-common/reduction-7.c: ... this\n+\tfile.\n+\n \t* testsuite/libgomp.oacc-c-c++-common/par-loop-comb-reduction-2.c:\n \tMake failure observable.\n "}, {"sha": "55ab3c96334ce95a4924cec5f29a366a9767f6b7", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-reduction-gang-np-1.c", "status": "removed", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27f9add31b0f005b0b90bf5d357dd0f7b664b664/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-reduction-gang-np-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27f9add31b0f005b0b90bf5d357dd0f7b664b664/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-reduction-gang-np-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-reduction-gang-np-1.c?ref=27f9add31b0f005b0b90bf5d357dd0f7b664b664", "patch": "@@ -1,45 +0,0 @@\n-/* { dg-additional-options \"-w\" } */\n-\n-#include <assert.h>\n-\n-/* Test of reduction on loop directive (gangs, non-private reduction\n-   variable).  */\n-\n-int\n-main (int argc, char *argv[])\n-{\n-  int i, arr[1024], res = 0, hres = 0;\n-\n-  for (i = 0; i < 1024; i++)\n-    arr[i] = i;\n-\n-  #pragma acc parallel num_gangs(32) num_workers(32) vector_length(32) \\\n-\t\t       copy(res)\n-  {\n-    #pragma acc loop gang reduction(+:res)\n-    for (i = 0; i < 1024; i++)\n-      res += arr[i];\n-  }\n-\n-  for (i = 0; i < 1024; i++)\n-    hres += arr[i];\n-\n-  assert (res == hres);\n-\n-  res = hres = 1;\n-\n-  #pragma acc parallel num_gangs(32) num_workers(32) vector_length(32) \\\n-\t\t       copy(res)\n-  {\n-    #pragma acc loop gang reduction(*:res)\n-    for (i = 0; i < 12; i++)\n-      res *= arr[i];\n-  }\n-\n-  for (i = 0; i < 12; i++)\n-    hres *= arr[i];\n-\n-  assert (res == hres);\n-\n-  return 0;\n-}"}, {"sha": "d4341e9c2cf19f5b3175eafef1b04041e82812ff", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-reduction-gv-np-1.c", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27f9add31b0f005b0b90bf5d357dd0f7b664b664/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-reduction-gv-np-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27f9add31b0f005b0b90bf5d357dd0f7b664b664/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-reduction-gv-np-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-reduction-gv-np-1.c?ref=27f9add31b0f005b0b90bf5d357dd0f7b664b664", "patch": "@@ -1,30 +0,0 @@\n-/* { dg-additional-options \"-w\" } */\n-\n-#include <assert.h>\n-\n-/* Test of reduction on loop directive (gangs and vectors, non-private\n-   reduction variable).  */\n-\n-int\n-main (int argc, char *argv[])\n-{\n-  int i, arr[1024], res = 0, hres = 0;\n-\n-  for (i = 0; i < 1024; i++)\n-    arr[i] = i;\n-\n-  #pragma acc parallel num_gangs(32) num_workers(32) vector_length(32) \\\n-\t\t       copy(res)\n-  {\n-    #pragma acc loop gang vector reduction(+:res)\n-    for (i = 0; i < 1024; i++)\n-      res += arr[i];\n-  }\n-\n-  for (i = 0; i < 1024; i++)\n-    hres += arr[i];\n-\n-  assert (res == hres);\n-\n-  return 0;\n-}"}, {"sha": "2e5668b134e8eb3dbef232759b5e9ddd614014a1", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-reduction-gw-np-1.c", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27f9add31b0f005b0b90bf5d357dd0f7b664b664/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-reduction-gw-np-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27f9add31b0f005b0b90bf5d357dd0f7b664b664/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-reduction-gw-np-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-reduction-gw-np-1.c?ref=27f9add31b0f005b0b90bf5d357dd0f7b664b664", "patch": "@@ -1,30 +0,0 @@\n-/* { dg-additional-options \"-w\" } */\n-\n-#include <assert.h>\n-\n-/* Test of reduction on loop directive (gangs and workers, non-private\n-   reduction variable).  */\n-\n-int\n-main (int argc, char *argv[])\n-{\n-  int i, arr[1024], res = 0, hres = 0;\n-\n-  for (i = 0; i < 1024; i++)\n-    arr[i] = i;\n-\n-  #pragma acc parallel num_gangs(32) num_workers(32) vector_length(32) \\\n-\t\t       copy(res)\n-  {\n-    #pragma acc loop gang worker reduction(+:res)\n-    for (i = 0; i < 1024; i++)\n-      res += arr[i];\n-  }\n-\n-  for (i = 0; i < 1024; i++)\n-    hres += arr[i];\n-\n-  assert (res == hres);\n-\n-  return 0;\n-}"}, {"sha": "d61037388138ae0c5acb85dd2364da0d410df508", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-reduction-gwv-np-1.c", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27f9add31b0f005b0b90bf5d357dd0f7b664b664/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-reduction-gwv-np-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27f9add31b0f005b0b90bf5d357dd0f7b664b664/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-reduction-gwv-np-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-reduction-gwv-np-1.c?ref=27f9add31b0f005b0b90bf5d357dd0f7b664b664", "patch": "@@ -1,28 +0,0 @@\n-#include <assert.h>\n-\n-/* Test of reduction on loop directive (gangs, workers and vectors, non-private\n-   reduction variable).  */\n-\n-int\n-main (int argc, char *argv[])\n-{\n-  int i, arr[1024], res = 0, hres = 0;\n-\n-  for (i = 0; i < 1024; i++)\n-    arr[i] = i;\n-\n-  #pragma acc parallel num_gangs(32) num_workers(32) vector_length(32) \\\n-\t\t       copy(res)\n-  {\n-    #pragma acc loop gang worker vector reduction(+:res)\n-    for (i = 0; i < 1024; i++)\n-      res += arr[i];\n-  }\n-\n-  for (i = 0; i < 1024; i++)\n-    hres += arr[i];\n-\n-  assert (res == hres);\n-\n-  return 0;\n-}"}, {"sha": "ea5c151af3ca49ffcf9a7b4691fa6353699216e2", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-reduction-gwv-np-2.c", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27f9add31b0f005b0b90bf5d357dd0f7b664b664/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-reduction-gwv-np-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27f9add31b0f005b0b90bf5d357dd0f7b664b664/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-reduction-gwv-np-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-reduction-gwv-np-2.c?ref=27f9add31b0f005b0b90bf5d357dd0f7b664b664", "patch": "@@ -1,34 +0,0 @@\n-#include <assert.h>\n-\n-/* Test of reduction on loop directive (gangs, workers and vectors, non-private\n-   reduction variable: separate gang and worker/vector loops).  */\n-\n-int\n-main (int argc, char *argv[])\n-{\n-  int i, j, arr[32768], res = 0, hres = 0;\n-\n-  for (i = 0; i < 32768; i++)\n-    arr[i] = i;\n-\n-  #pragma acc parallel num_gangs(32) num_workers(32) vector_length(32) \\\n-\t\t       copy(res)\n-  {\n-    #pragma acc loop gang reduction(+:res)\n-    for (j = 0; j < 32; j++)\n-      {\n-        #pragma acc loop worker vector reduction(+:res)\n-        for (i = 0; i < 1024; i++)\n-\t  res += arr[j * 1024 + i];\n-      }\n-    /* \"res\" is non-private, and is not available until after the parallel\n-       region.  */\n-  }\n-\n-  for (i = 0; i < 32768; i++)\n-    hres += arr[i];\n-\n-  assert (res == hres);\n-\n-  return 0;\n-}"}, {"sha": "0056f3ce10eecf432ea189594e6a5693a34555f9", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-reduction-gwv-np-3.c", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27f9add31b0f005b0b90bf5d357dd0f7b664b664/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-reduction-gwv-np-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27f9add31b0f005b0b90bf5d357dd0f7b664b664/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-reduction-gwv-np-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-reduction-gwv-np-3.c?ref=27f9add31b0f005b0b90bf5d357dd0f7b664b664", "patch": "@@ -1,33 +0,0 @@\n-#include <assert.h>\n-\n-/* Test of reduction on loop directive (gangs, workers and vectors, non-private\n-   reduction variable: separate gang and worker/vector loops).  */\n-\n-int\n-main (int argc, char *argv[])\n-{\n-  int i, j;\n-  double arr[32768], res = 0, hres = 0;\n-\n-  for (i = 0; i < 32768; i++)\n-    arr[i] = i;\n-\n-  #pragma acc parallel num_gangs(32) num_workers(32) vector_length(32) \\\n-\t\t       copyin(arr) copy(res)\n-  {\n-    #pragma acc loop gang reduction(+:res)\n-    for (j = 0; j < 32; j++)\n-      {\n-        #pragma acc loop worker vector reduction(+:res)\n-        for (i = 0; i < 1024; i++)\n-\t  res += arr[j * 1024 + i];\n-      }\n-  }\n-\n-  for (i = 0; i < 32768; i++)\n-    hres += arr[i];\n-\n-  assert (res == hres);\n-\n-  return 0;\n-}"}, {"sha": "e69d0ec04c7646da63485af43fffb7ec2cde515e", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-reduction-gwv-np-4.c", "status": "removed", "additions": 0, "deletions": 55, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27f9add31b0f005b0b90bf5d357dd0f7b664b664/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-reduction-gwv-np-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27f9add31b0f005b0b90bf5d357dd0f7b664b664/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-reduction-gwv-np-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-reduction-gwv-np-4.c?ref=27f9add31b0f005b0b90bf5d357dd0f7b664b664", "patch": "@@ -1,55 +0,0 @@\n-#include <assert.h>\n-\n-/* Test of reduction on loop directive (gangs, workers and vectors, multiple\n-   non-private reduction variables, float type).  */\n-\n-int\n-main (int argc, char *argv[])\n-{\n-  int i, j;\n-  float arr[32768];\n-  float res = 0, mres = 0, hres = 0, hmres = 0;\n-\n-  for (i = 0; i < 32768; i++)\n-    arr[i] = i;\n-\n-  #pragma acc parallel num_gangs(32) num_workers(32) vector_length(32) \\\n-\t\t       copy(res, mres)\n-  {\n-    #pragma acc loop gang reduction(+:res) reduction(max:mres)\n-    for (j = 0; j < 32; j++)\n-      {\n-\t#pragma acc loop worker vector reduction(+:res) reduction(max:mres)\n-\tfor (i = 0; i < 1024; i++)\n-\t  {\n-\t    res += arr[j * 1024 + i];\n-\t    if (arr[j * 1024 + i] > mres)\n-\t      mres = arr[j * 1024 + i];\n-\t  }\n-\n-\t#pragma acc loop worker vector reduction(+:res) reduction(max:mres)\n-\tfor (i = 0; i < 1024; i++)\n-\t  {\n-\t    res += arr[j * 1024 + (1023 - i)];\n-\t    if (arr[j * 1024 + (1023 - i)] > mres)\n-\t      mres = arr[j * 1024 + (1023 - i)];\n-\t  }\n-      }\n-  }\n-\n-  for (j = 0; j < 32; j++)\n-    for (i = 0; i < 1024; i++)\n-      {\n-        hres += arr[j * 1024 + i];\n-\thres += arr[j * 1024 + (1023 - i)];\n-\tif (arr[j * 1024 + i] > hmres)\n-\t  hmres = arr[j * 1024 + i];\n-\tif (arr[j * 1024 + (1023 - i)] > hmres)\n-\t  hmres = arr[j * 1024 + (1023 - i)];\n-      }\n-\n-  assert (res == hres);\n-  assert (mres == hmres);\n-\n-  return 0;\n-}"}, {"sha": "31e4366f88b954e6189044705dd71ba9e7a56eee", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-reduction-vector-p-1.c", "status": "removed", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27f9add31b0f005b0b90bf5d357dd0f7b664b664/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-reduction-vector-p-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27f9add31b0f005b0b90bf5d357dd0f7b664b664/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-reduction-vector-p-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-reduction-vector-p-1.c?ref=27f9add31b0f005b0b90bf5d357dd0f7b664b664", "patch": "@@ -1,43 +0,0 @@\n-/* { dg-additional-options \"-w\" } */\n-\n-#include <assert.h>\n-\n-/* Test of reduction on loop directive (vectors, private reduction\n-   variable).  */\n-\n-int\n-main (int argc, char *argv[])\n-{\n-  int i, j, arr[1024], out[32], res = 0, hres = 0;\n-\n-  for (i = 0; i < 1024; i++)\n-    arr[i] = i;\n-\n-  #pragma acc parallel num_gangs(32) num_workers(32) vector_length(32) \\\n-\t\t       private(res) copyout(out)\n-  {\n-    #pragma acc loop gang\n-    for (j = 0; j < 32; j++)\n-      {\n-        res = 0;\n-\n-\t#pragma acc loop vector reduction(+:res)\n-\tfor (i = 0; i < 32; i++)\n-\t  res += arr[j * 32 + i];\n-\n-\tout[j] = res;\n-      }\n-  }\n-\n-  for (j = 0; j < 32; j++)\n-    {\n-      hres = 0;\n-\n-      for (i = 0; i < 32; i++)\n-\thres += arr[j * 32 + i];\n-\n-      assert (out[j] == hres);\n-    }\n-\n-  return 0;\n-}"}, {"sha": "15f0053e5bc0043a0a818f150b2957711411209e", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-reduction-vector-p-2.c", "status": "removed", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27f9add31b0f005b0b90bf5d357dd0f7b664b664/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-reduction-vector-p-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27f9add31b0f005b0b90bf5d357dd0f7b664b664/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-reduction-vector-p-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-reduction-vector-p-2.c?ref=27f9add31b0f005b0b90bf5d357dd0f7b664b664", "patch": "@@ -1,41 +0,0 @@\n-#include <assert.h>\n-\n-/* Test of reduction on loop directive (vector reduction in\n-   gang-partitioned/worker-partitioned mode, private reduction variable).  */\n-\n-int\n-main (int argc, char *argv[])\n-{\n-  int i, j, k;\n-  double ina[1024], inb[1024], out[1024], acc;\n-\n-  for (j = 0; j < 32; j++)\n-    for (i = 0; i < 32; i++)\n-      {\n-        ina[j * 32 + i] = (i == j) ? 2.0 : 0.0;\n-\tinb[j * 32 + i] = (double) (i + j);\n-      }\n-\n-  #pragma acc parallel num_gangs(32) num_workers(32) vector_length(32) \\\n-\t\t       private(acc) copyin(ina, inb) copyout(out)\n-  {\n-    #pragma acc loop gang worker\n-    for (k = 0; k < 32; k++)\n-      for (j = 0; j < 32; j++)\n-        {\n-\t  acc = 0;\n-\n-\t  #pragma acc loop vector reduction(+:acc)\n-\t  for (i = 0; i < 32; i++)\n-\t    acc += ina[k * 32 + i] * inb[i * 32 + j];\n-\n-\t  out[k * 32 + j] = acc;\n-\t}\n-  }\n-\n-  for (j = 0; j < 32; j++)\n-    for (i = 0; i < 32; i++)\n-      assert (out[j * 32 + i] == (i + j) * 2);\n-\n-  return 0;\n-}"}, {"sha": "4a925036a5b51403de942b30ce96af7b268dee78", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-reduction-worker-p-1.c", "status": "removed", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27f9add31b0f005b0b90bf5d357dd0f7b664b664/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-reduction-worker-p-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27f9add31b0f005b0b90bf5d357dd0f7b664b664/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-reduction-worker-p-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-reduction-worker-p-1.c?ref=27f9add31b0f005b0b90bf5d357dd0f7b664b664", "patch": "@@ -1,43 +0,0 @@\n-/* { dg-additional-options \"-w\" } */\n-\n-#include <assert.h>\n-\n-/* Test of reduction on loop directive (workers, private reduction\n-   variable).  */\n-\n-int\n-main (int argc, char *argv[])\n-{\n-  int i, j, arr[1024], out[32], res = 0, hres = 0;\n-\n-  for (i = 0; i < 1024; i++)\n-    arr[i] = i;\n-\n-  #pragma acc parallel num_gangs(32) num_workers(32) vector_length(32) \\\n-\t\t       private(res) copyout(out)\n-  {\n-    #pragma acc loop gang\n-    for (j = 0; j < 32; j++)\n-      {\n-        res = 0;\n-\n-\t#pragma acc loop worker reduction(+:res)\n-\tfor (i = 0; i < 32; i++)\n-\t  res += arr[j * 32 + i];\n-\n-\tout[j] = res;\n-      }\n-  }\n-\n-  for (j = 0; j < 32; j++)\n-    {\n-      hres = 0;\n-\n-      for (i = 0; i < 32; i++)\n-\thres += arr[j * 32 + i];\n-\n-      assert (out[j] == hres);\n-    }\n-\n-  return 0;\n-}"}, {"sha": "1bfb284cb3bf32d607eef47d2cac74aa0049e7fe", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-reduction-wv-p-1.c", "status": "removed", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27f9add31b0f005b0b90bf5d357dd0f7b664b664/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-reduction-wv-p-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27f9add31b0f005b0b90bf5d357dd0f7b664b664/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-reduction-wv-p-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-reduction-wv-p-1.c?ref=27f9add31b0f005b0b90bf5d357dd0f7b664b664", "patch": "@@ -1,41 +0,0 @@\n-#include <assert.h>\n-\n-/* Test of reduction on loop directive (workers and vectors, private reduction\n-   variable).  */\n-\n-int\n-main (int argc, char *argv[])\n-{\n-  int i, j, arr[1024], out[32], res = 0, hres = 0;\n-\n-  for (i = 0; i < 1024; i++)\n-    arr[i] = i;\n-\n-  #pragma acc parallel num_gangs(32) num_workers(32) vector_length(32) \\\n-\t\t       private(res) copyout(out)\n-  {\n-    #pragma acc loop gang\n-    for (j = 0; j < 32; j++)\n-      {\n-        res = 0;\n-\n-\t#pragma acc loop worker vector reduction(+:res)\n-\tfor (i = 0; i < 32; i++)\n-\t  res += arr[j * 32 + i];\n-\n-\tout[j] = res;\n-      }\n-  }\n-\n-  for (j = 0; j < 32; j++)\n-    {\n-      hres = 0;\n-\n-      for (i = 0; i < 32; i++)\n-\thres += arr[j * 32 + i];\n-\n-      assert (out[j] == hres);\n-    }\n-\n-  return 0;\n-}"}, {"sha": "93ab78f106a56250562251e5201d1dd6fcb7f63b", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-reduction-wv-p-2.c", "status": "removed", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27f9add31b0f005b0b90bf5d357dd0f7b664b664/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-reduction-wv-p-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27f9add31b0f005b0b90bf5d357dd0f7b664b664/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-reduction-wv-p-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-reduction-wv-p-2.c?ref=27f9add31b0f005b0b90bf5d357dd0f7b664b664", "patch": "@@ -1,45 +0,0 @@\n-#include <assert.h>\n-\n-/* Test of reduction on loop directive (workers and vectors, private reduction\n-   variable).  */\n-\n-int\n-main (int argc, char *argv[])\n-{\n-  int i, j, arr[32768], out[32], res = 0, hres = 0;\n-\n-  for (i = 0; i < 32768; i++)\n-    arr[i] = i;\n-\n-  #pragma acc parallel num_gangs(32) num_workers(32) vector_length(32) \\\n-\t\t       private(res) copyout(out)\n-  {\n-    #pragma acc loop gang\n-    for (j = 0; j < 32; j++)\n-      {\n-        res = j;\n-\n-\t#pragma acc loop worker reduction(+:res)\n-\tfor (i = 0; i < 1024; i++)\n-\t  res += arr[j * 1024 + i];\n-\n-\t#pragma acc loop vector reduction(+:res)\n-\tfor (i = 1023; i >= 0; i--)\n-\t  res += arr[j * 1024 + i];\n-\n-\tout[j] = res;\n-      }\n-  }\n-\n-  for (j = 0; j < 32; j++)\n-    {\n-      hres = j;\n-\n-      for (i = 0; i < 1024; i++)\n-\thres += arr[j * 1024 + i] * 2;\n-\n-      assert (out[j] == hres);\n-    }\n-\n-  return 0;\n-}"}, {"sha": "298e25c87d28b523b50b62ca7f660582dac04f5b", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-reduction-wv-p-3.c", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27f9add31b0f005b0b90bf5d357dd0f7b664b664/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-reduction-wv-p-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27f9add31b0f005b0b90bf5d357dd0f7b664b664/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-reduction-wv-p-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-reduction-wv-p-3.c?ref=27f9add31b0f005b0b90bf5d357dd0f7b664b664", "patch": "@@ -1,38 +0,0 @@\n-#include <assert.h>\n-\n-/* Test of reduction on loop directive (workers and vectors, private reduction\n-   variable: gang-redundant mode).  */\n-\n-int\n-main (int argc, char *argv[])\n-{\n-  int i, arr[1024], out[32], res = 0, hres = 0;\n-\n-  for (i = 0; i < 1024; i++)\n-    arr[i] = i ^ 33;\n-\n-  #pragma acc parallel num_gangs(32) num_workers(32) vector_length(32) \\\n-\t\t       private(res) copyin(arr) copyout(out)\n-  {\n-    /* Private variables aren't initialized by default in openacc.  */\n-    res = 0;\n-\n-    /* \"res\" should be available at the end of the following loop (and should\n-       have the same value redundantly in each gang).  */\n-    #pragma acc loop worker vector reduction(+:res)\n-    for (i = 0; i < 1024; i++)\n-      res += arr[i];\n-\n-    #pragma acc loop gang (static: 1)\n-    for (i = 0; i < 32; i++)\n-      out[i] = res;\n-  }\n-\n-  for (i = 0; i < 1024; i++)\n-    hres += arr[i];\n-\n-  for (i = 0; i < 32; i++)\n-    assert (out[i] == hres);\n-\n-  return 0;\n-}"}, {"sha": "76c33e4470d748f03583c765f08d3902f0d1f7c2", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/reduction-7.c", "status": "modified", "additions": 351, "deletions": 0, "changes": 351, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d97633ef656271d68473d65267902dfe0b0956d4/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Freduction-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d97633ef656271d68473d65267902dfe0b0956d4/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Freduction-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Freduction-7.c?ref=d97633ef656271d68473d65267902dfe0b0956d4", "patch": "@@ -118,12 +118,363 @@ void gwv_np_1()\n }\n \n \n+/* Test of reduction on loop directive (gangs, workers and vectors, non-private\n+   reduction variable: separate gang and worker/vector loops).  */\n+\n+void gwv_np_2()\n+{\n+  int i, j, arr[32768], res = 0, hres = 0;\n+\n+  for (i = 0; i < 32768; i++)\n+    arr[i] = i;\n+\n+  #pragma acc parallel num_gangs(32) num_workers(32) vector_length(32) \\\n+\t\t       copy(res)\n+  {\n+    #pragma acc loop gang reduction(+:res)\n+    for (j = 0; j < 32; j++)\n+      {\n+        #pragma acc loop worker vector reduction(+:res)\n+        for (i = 0; i < 1024; i++)\n+\t  res += arr[j * 1024 + i];\n+      }\n+    /* \"res\" is non-private, and is not available until after the parallel\n+       region.  */\n+  }\n+\n+  for (i = 0; i < 32768; i++)\n+    hres += arr[i];\n+\n+  assert (res == hres);\n+}\n+\n+\n+/* Test of reduction on loop directive (gangs, workers and vectors, non-private\n+   reduction variable: separate gang and worker/vector loops).  */\n+\n+void gwv_np_3()\n+{\n+  int i, j;\n+  double arr[32768], res = 0, hres = 0;\n+\n+  for (i = 0; i < 32768; i++)\n+    arr[i] = i;\n+\n+  #pragma acc parallel num_gangs(32) num_workers(32) vector_length(32) \\\n+\t\t       copyin(arr) copy(res)\n+  {\n+    #pragma acc loop gang reduction(+:res)\n+    for (j = 0; j < 32; j++)\n+      {\n+        #pragma acc loop worker vector reduction(+:res)\n+        for (i = 0; i < 1024; i++)\n+\t  res += arr[j * 1024 + i];\n+      }\n+  }\n+\n+  for (i = 0; i < 32768; i++)\n+    hres += arr[i];\n+\n+  assert (res == hres);\n+}\n+\n+\n+/* Test of reduction on loop directive (gangs, workers and vectors, multiple\n+   non-private reduction variables, float type).  */\n+\n+void gwv_np_4()\n+{\n+  int i, j;\n+  float arr[32768];\n+  float res = 0, mres = 0, hres = 0, hmres = 0;\n+\n+  for (i = 0; i < 32768; i++)\n+    arr[i] = i;\n+\n+  #pragma acc parallel num_gangs(32) num_workers(32) vector_length(32) \\\n+\t\t       copy(res, mres)\n+  {\n+    #pragma acc loop gang reduction(+:res) reduction(max:mres)\n+    for (j = 0; j < 32; j++)\n+      {\n+\t#pragma acc loop worker vector reduction(+:res) reduction(max:mres)\n+\tfor (i = 0; i < 1024; i++)\n+\t  {\n+\t    res += arr[j * 1024 + i];\n+\t    if (arr[j * 1024 + i] > mres)\n+\t      mres = arr[j * 1024 + i];\n+\t  }\n+\n+\t#pragma acc loop worker vector reduction(+:res) reduction(max:mres)\n+\tfor (i = 0; i < 1024; i++)\n+\t  {\n+\t    res += arr[j * 1024 + (1023 - i)];\n+\t    if (arr[j * 1024 + (1023 - i)] > mres)\n+\t      mres = arr[j * 1024 + (1023 - i)];\n+\t  }\n+      }\n+  }\n+\n+  for (j = 0; j < 32; j++)\n+    for (i = 0; i < 1024; i++)\n+      {\n+        hres += arr[j * 1024 + i];\n+\thres += arr[j * 1024 + (1023 - i)];\n+\tif (arr[j * 1024 + i] > hmres)\n+\t  hmres = arr[j * 1024 + i];\n+\tif (arr[j * 1024 + (1023 - i)] > hmres)\n+\t  hmres = arr[j * 1024 + (1023 - i)];\n+      }\n+\n+  assert (res == hres);\n+  assert (mres == hmres);\n+}\n+\n+\n+/* Test of reduction on loop directive (vectors, private reduction\n+   variable).  */\n+\n+void v_p_1()\n+{\n+  int i, j, arr[1024], out[32], res = 0, hres = 0;\n+\n+  for (i = 0; i < 1024; i++)\n+    arr[i] = i;\n+\n+  #pragma acc parallel num_gangs(32) num_workers(32) vector_length(32) \\\n+\t\t       private(res) copyout(out)\n+  {\n+    #pragma acc loop gang\n+    for (j = 0; j < 32; j++)\n+      {\n+        res = 0;\n+\n+\t#pragma acc loop vector reduction(+:res)\n+\tfor (i = 0; i < 32; i++)\n+\t  res += arr[j * 32 + i];\n+\n+\tout[j] = res;\n+      }\n+  }\n+\n+  for (j = 0; j < 32; j++)\n+    {\n+      hres = 0;\n+\n+      for (i = 0; i < 32; i++)\n+\thres += arr[j * 32 + i];\n+\n+      assert (out[j] == hres);\n+    }\n+}\n+\n+\n+/* Test of reduction on loop directive (vector reduction in\n+   gang-partitioned/worker-partitioned mode, private reduction variable).  */\n+\n+void v_p_2()\n+{\n+  int i, j, k;\n+  double ina[1024], inb[1024], out[1024], acc;\n+\n+  for (j = 0; j < 32; j++)\n+    for (i = 0; i < 32; i++)\n+      {\n+        ina[j * 32 + i] = (i == j) ? 2.0 : 0.0;\n+\tinb[j * 32 + i] = (double) (i + j);\n+      }\n+\n+  #pragma acc parallel num_gangs(32) num_workers(32) vector_length(32) \\\n+\t\t       private(acc) copyin(ina, inb) copyout(out)\n+  {\n+    #pragma acc loop gang worker\n+    for (k = 0; k < 32; k++)\n+      for (j = 0; j < 32; j++)\n+        {\n+\t  acc = 0;\n+\n+\t  #pragma acc loop vector reduction(+:acc)\n+\t  for (i = 0; i < 32; i++)\n+\t    acc += ina[k * 32 + i] * inb[i * 32 + j];\n+\n+\t  out[k * 32 + j] = acc;\n+\t}\n+  }\n+\n+  for (j = 0; j < 32; j++)\n+    for (i = 0; i < 32; i++)\n+      assert (out[j * 32 + i] == (i + j) * 2);\n+}\n+\n+\n+/* Test of reduction on loop directive (workers, private reduction\n+   variable).  */\n+\n+void w_p_1()\n+{\n+  int i, j, arr[1024], out[32], res = 0, hres = 0;\n+\n+  for (i = 0; i < 1024; i++)\n+    arr[i] = i;\n+\n+  #pragma acc parallel num_gangs(32) num_workers(32) vector_length(32) \\\n+\t\t       private(res) copyout(out)\n+  {\n+    #pragma acc loop gang\n+    for (j = 0; j < 32; j++)\n+      {\n+        res = 0;\n+\n+\t#pragma acc loop worker reduction(+:res)\n+\tfor (i = 0; i < 32; i++)\n+\t  res += arr[j * 32 + i];\n+\n+\tout[j] = res;\n+      }\n+  }\n+\n+  for (j = 0; j < 32; j++)\n+    {\n+      hres = 0;\n+\n+      for (i = 0; i < 32; i++)\n+\thres += arr[j * 32 + i];\n+\n+      assert (out[j] == hres);\n+    }\n+}\n+\n+\n+/* Test of reduction on loop directive (workers and vectors, private reduction\n+   variable).  */\n+\n+void wv_p_1()\n+{\n+  int i, j, arr[1024], out[32], res = 0, hres = 0;\n+\n+  for (i = 0; i < 1024; i++)\n+    arr[i] = i;\n+\n+  #pragma acc parallel num_gangs(32) num_workers(32) vector_length(32) \\\n+\t\t       private(res) copyout(out)\n+  {\n+    #pragma acc loop gang\n+    for (j = 0; j < 32; j++)\n+      {\n+        res = 0;\n+\n+\t#pragma acc loop worker vector reduction(+:res)\n+\tfor (i = 0; i < 32; i++)\n+\t  res += arr[j * 32 + i];\n+\n+\tout[j] = res;\n+      }\n+  }\n+\n+  for (j = 0; j < 32; j++)\n+    {\n+      hres = 0;\n+\n+      for (i = 0; i < 32; i++)\n+\thres += arr[j * 32 + i];\n+\n+      assert (out[j] == hres);\n+    }\n+}\n+\n+\n+/* Test of reduction on loop directive (workers and vectors, private reduction\n+   variable).  */\n+\n+void wv_p_2()\n+{\n+  int i, j, arr[32768], out[32], res = 0, hres = 0;\n+\n+  for (i = 0; i < 32768; i++)\n+    arr[i] = i;\n+\n+  #pragma acc parallel num_gangs(32) num_workers(32) vector_length(32) \\\n+\t\t       private(res) copyout(out)\n+  {\n+    #pragma acc loop gang\n+    for (j = 0; j < 32; j++)\n+      {\n+        res = j;\n+\n+\t#pragma acc loop worker reduction(+:res)\n+\tfor (i = 0; i < 1024; i++)\n+\t  res += arr[j * 1024 + i];\n+\n+\t#pragma acc loop vector reduction(+:res)\n+\tfor (i = 1023; i >= 0; i--)\n+\t  res += arr[j * 1024 + i];\n+\n+\tout[j] = res;\n+      }\n+  }\n+\n+  for (j = 0; j < 32; j++)\n+    {\n+      hres = j;\n+\n+      for (i = 0; i < 1024; i++)\n+\thres += arr[j * 1024 + i] * 2;\n+\n+      assert (out[j] == hres);\n+    }\n+}\n+\n+\n+/* Test of reduction on loop directive (workers and vectors, private reduction\n+   variable: gang-redundant mode).  */\n+\n+void wv_p_3()\n+{\n+  int i, arr[1024], out[32], res = 0, hres = 0;\n+\n+  for (i = 0; i < 1024; i++)\n+    arr[i] = i ^ 33;\n+\n+  #pragma acc parallel num_gangs(32) num_workers(32) vector_length(32) \\\n+\t\t       private(res) copyin(arr) copyout(out)\n+  {\n+    /* Private variables aren't initialized by default in openacc.  */\n+    res = 0;\n+\n+    /* \"res\" should be available at the end of the following loop (and should\n+       have the same value redundantly in each gang).  */\n+    #pragma acc loop worker vector reduction(+:res)\n+    for (i = 0; i < 1024; i++)\n+      res += arr[i];\n+\n+    #pragma acc loop gang (static: 1)\n+    for (i = 0; i < 32; i++)\n+      out[i] = res;\n+  }\n+\n+  for (i = 0; i < 1024; i++)\n+    hres += arr[i];\n+\n+  for (i = 0; i < 32; i++)\n+    assert (out[i] == hres);\n+}\n+\n+\n int main()\n {\n   g_np_1();\n   gv_np_1();\n   gw_np_1();\n   gwv_np_1();\n+  gwv_np_2();\n+  gwv_np_3();\n+  gwv_np_4();\n+  v_p_1();\n+  v_p_2();\n+  w_p_1();\n+  wv_p_1();\n+  wv_p_2();\n+  wv_p_3();\n \n   return 0;\n }"}]}