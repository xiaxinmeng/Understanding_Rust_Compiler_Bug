{"sha": "07eced4de9ec21ac4b988fc6420efb4a020887a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDdlY2VkNGRlOWVjMjFhYzRiOTg4ZmM2NDIwZWZiNGEwMjA4ODdhMg==", "commit": {"author": {"name": "Torbjorn Granlund", "email": "tege@gnu.org", "date": "1994-03-30T06:48:43Z"}, "committer": {"name": "Torbjorn Granlund", "email": "tege@gnu.org", "date": "1994-03-30T06:48:43Z"}, "message": "(output_move_double): Use `%.' where appropriate.\n\nFrom-SVN: r6917", "tree": {"sha": "7066eb1474d0292bdfdf6925517aef4107683351", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7066eb1474d0292bdfdf6925517aef4107683351"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07eced4de9ec21ac4b988fc6420efb4a020887a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07eced4de9ec21ac4b988fc6420efb4a020887a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07eced4de9ec21ac4b988fc6420efb4a020887a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07eced4de9ec21ac4b988fc6420efb4a020887a2/comments", "author": null, "committer": null, "parents": [{"sha": "8f53028050057ba2f443c2baedb1b1702b496e30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f53028050057ba2f443c2baedb1b1702b496e30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f53028050057ba2f443c2baedb1b1702b496e30"}], "stats": {"total": 56, "additions": 20, "deletions": 36}, "files": [{"sha": "735b459f558f00d8dae698db01714218adeb9edf", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 20, "deletions": 36, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07eced4de9ec21ac4b988fc6420efb4a020887a2/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07eced4de9ec21ac4b988fc6420efb4a020887a2/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=07eced4de9ec21ac4b988fc6420efb4a020887a2", "patch": "@@ -143,19 +143,11 @@ output_function_prologue (stream, size)\n       /* Adding negative number is faster on the 68040.  */\n       if (fsize + 4 < 0x8000)\n \t{\n-#ifdef MOTOROLA\n-\t  asm_fprintf (stream, \"\\tadd.w %0I%d,%Rsp\\n\", - (fsize + 4));\n-#else\n-\t  asm_fprintf (stream, \"\\taddw %0I%d,%Rsp\\n\", - (fsize + 4));\n-#endif\n+\t  asm_fprintf (stream, \"\\tadd%.w %0I%d,%Rsp\\n\", - (fsize + 4));\n \t}\n       else\n \t{\n-#ifdef MOTOROLA\n-\t  asm_fprintf (stream, \"\\tadd.l %0I%d,%Rsp\\n\", - (fsize + 4));\n-#else\n-\t  asm_fprintf (stream, \"\\taddl %0I%d,%Rsp\\n\", - (fsize + 4));\n-#endif\n+\t  asm_fprintf (stream, \"\\tadd%.l %0I%d,%Rsp\\n\", - (fsize + 4));\n \t}\n     }\n #ifdef SUPPORT_SUN_FPA\n@@ -509,19 +501,11 @@ output_function_epilogue (stream, size)\n     {\n       if (fsize + 4 < 0x8000)\n \t{\n-#ifdef MOTOROLA\n-\t  asm_fprintf (stream, \"\\tadd.w %0I%d,%Rsp\\n\", fsize + 4);\n-#else\n-\t  asm_fprintf (stream, \"\\taddw %0I%d,%Rsp\\n\", fsize + 4);\n-#endif\n+\t  asm_fprintf (stream, \"\\tadd%.w %0I%d,%Rsp\\n\", fsize + 4);\n \t}\n       else\n \t{\n-#ifdef MOTOROLA\n-\t  asm_fprintf (stream, \"\\tadd.l %0I%d,%Rsp\\n\", fsize + 4);\n-#else\n-\t  asm_fprintf (stream, \"\\taddl %0I%d,%Rsp\\n\", fsize + 4);\n-#endif\n+\t  asm_fprintf (stream, \"\\tadd%.l %0I%d,%Rsp\\n\", fsize + 4);\n \t}\n     }\n   if (current_function_pops_args)\n@@ -1162,34 +1146,34 @@ output_move_double (operands)\n       if (addreg0)\n \t{\n \t  if (size == 12)\n-\t    output_asm_insn (\"addql %#8,%0\", &addreg0);\n+\t    output_asm_insn (\"addq%.l %#8,%0\", &addreg0);\n \t  else\n-\t    output_asm_insn (\"addql %#4,%0\", &addreg0);\n+\t    output_asm_insn (\"addq%.l %#4,%0\", &addreg0);\n \t}\n       if (addreg1)\n \t{\n \t  if (size == 12)\n-\t    output_asm_insn (\"addql %#8,%0\", &addreg1);\n+\t    output_asm_insn (\"addq%.l %#8,%0\", &addreg1);\n \t  else\n-\t    output_asm_insn (\"addql %#4,%0\", &addreg1);\n+\t    output_asm_insn (\"addq%.l %#4,%0\", &addreg1);\n \t}\n \n       /* Do that word.  */\n       output_asm_insn (singlemove_string (latehalf), latehalf);\n \n       /* Undo the adds we just did.  */\n       if (addreg0)\n-\toutput_asm_insn (\"subql %#4,%0\", &addreg0);\n+\toutput_asm_insn (\"subq%.l %#4,%0\", &addreg0);\n       if (addreg1)\n-\toutput_asm_insn (\"subql %#4,%0\", &addreg1);\n+\toutput_asm_insn (\"subq%.l %#4,%0\", &addreg1);\n \n       if (size == 12)\n \t{\n \t  output_asm_insn (singlemove_string (middlehalf), middlehalf);\n \t  if (addreg0)\n-\t    output_asm_insn (\"subql %#4,%0\", &addreg0);\n+\t    output_asm_insn (\"subq%.l %#4,%0\", &addreg0);\n \t  if (addreg1)\n-\t    output_asm_insn (\"subql %#4,%0\", &addreg1);\n+\t    output_asm_insn (\"subq%.l %#4,%0\", &addreg1);\n \t}\n \n       /* Do low-numbered word.  */\n@@ -1204,18 +1188,18 @@ output_move_double (operands)\n   if (size == 12)\n     {\n       if (addreg0)\n-\toutput_asm_insn (\"addql %#4,%0\", &addreg0);\n+\toutput_asm_insn (\"addq%.l %#4,%0\", &addreg0);\n       if (addreg1)\n-\toutput_asm_insn (\"addql %#4,%0\", &addreg1);\n+\toutput_asm_insn (\"addq%.l %#4,%0\", &addreg1);\n \n       output_asm_insn (singlemove_string (middlehalf), middlehalf);\n     }\n \n   /* Make any unoffsettable addresses point at high-numbered word.  */\n   if (addreg0)\n-    output_asm_insn (\"addql %#4,%0\", &addreg0);\n+    output_asm_insn (\"addq%.l %#4,%0\", &addreg0);\n   if (addreg1)\n-    output_asm_insn (\"addql %#4,%0\", &addreg1);\n+    output_asm_insn (\"addq%.l %#4,%0\", &addreg1);\n \n   /* Do that word.  */\n   output_asm_insn (singlemove_string (latehalf), latehalf);\n@@ -1224,16 +1208,16 @@ output_move_double (operands)\n   if (addreg0)\n     {\n       if (size == 12)\n-        output_asm_insn (\"subql %#8,%0\", &addreg0);\n+        output_asm_insn (\"subq%.l %#8,%0\", &addreg0);\n       else\n-        output_asm_insn (\"subql %#4,%0\", &addreg0);\n+        output_asm_insn (\"subq%.l %#4,%0\", &addreg0);\n     }\n   if (addreg1)\n     {\n       if (size == 12)\n-        output_asm_insn (\"subql %#8,%0\", &addreg1);\n+        output_asm_insn (\"subq%.l %#8,%0\", &addreg1);\n       else\n-        output_asm_insn (\"subql %#4,%0\", &addreg1);\n+        output_asm_insn (\"subq%.l %#4,%0\", &addreg1);\n     }\n \n   return \"\";"}]}