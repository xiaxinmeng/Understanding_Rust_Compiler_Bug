{"sha": "abc5231831d8356f563e89ab3f2e93bd98eaac57", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWJjNTIzMTgzMWQ4MzU2ZjU2M2U4OWFiM2YyZTkzYmQ5OGVhYWM1Nw==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2015-10-20T17:18:24Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2015-10-20T17:18:24Z"}, "message": "[AArch64] Add support for 64-bit vector-mode ldp/stp\n\n\t* config/aarch64/aarch64.c (aarch64_mode_valid_for_sched_fusion_p):\n\tNew function.\n\t(fusion_load_store): Use it.\n\t* config/aarch64/aarch64-ldpstp.md: Add new peephole2s for\n\tldp and stp in VD modes.\n\t* config/aarch64/aarch64-simd.md (load_pair<mode>, VD): New pattern.\n\t(store_pair<mode>, VD): Likewise.\n\n\t* gcc.target/aarch64/stp_vec_64_1.c: New test.\n\t* gcc.target/aarch64/ldp_vec_64_1.c: Likewise.\n\nFrom-SVN: r229094", "tree": {"sha": "50316c8eb7d794add1ffd73710e6f6f159686ec2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/50316c8eb7d794add1ffd73710e6f6f159686ec2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/abc5231831d8356f563e89ab3f2e93bd98eaac57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abc5231831d8356f563e89ab3f2e93bd98eaac57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abc5231831d8356f563e89ab3f2e93bd98eaac57", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abc5231831d8356f563e89ab3f2e93bd98eaac57/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "361efe0562a2feeddaf15037d6f231f622b2118b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/361efe0562a2feeddaf15037d6f231f622b2118b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/361efe0562a2feeddaf15037d6f231f622b2118b"}], "stats": {"total": 137, "additions": 135, "deletions": 2}, "files": [{"sha": "65ef0afce421d2439bf884c0aff53baf33c960b3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc5231831d8356f563e89ab3f2e93bd98eaac57/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc5231831d8356f563e89ab3f2e93bd98eaac57/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=abc5231831d8356f563e89ab3f2e93bd98eaac57", "patch": "@@ -1,3 +1,13 @@\n+2015-10-20  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_mode_valid_for_sched_fusion_p):\n+\tNew function.\n+\t(fusion_load_store): Use it.\n+\t* config/aarch64/aarch64-ldpstp.md: Add new peephole2s for\n+\tldp and stp in VD modes.\n+\t* config/aarch64/aarch64-simd.md (load_pair<mode>, VD): New pattern.\n+\t(store_pair<mode>, VD): Likewise.\n+\n 2015-10-20  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR rtl-optimization/67609"}, {"sha": "458829ce51d7fef912c839b229abbfc802d9fc7a", "filename": "gcc/config/aarch64/aarch64-ldpstp.md", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc5231831d8356f563e89ab3f2e93bd98eaac57/gcc%2Fconfig%2Faarch64%2Faarch64-ldpstp.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc5231831d8356f563e89ab3f2e93bd98eaac57/gcc%2Fconfig%2Faarch64%2Faarch64-ldpstp.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-ldpstp.md?ref=abc5231831d8356f563e89ab3f2e93bd98eaac57", "patch": "@@ -98,6 +98,47 @@\n     }\n })\n \n+(define_peephole2\n+  [(set (match_operand:VD 0 \"register_operand\" \"\")\n+\t(match_operand:VD 1 \"aarch64_mem_pair_operand\" \"\"))\n+   (set (match_operand:VD 2 \"register_operand\" \"\")\n+\t(match_operand:VD 3 \"memory_operand\" \"\"))]\n+  \"aarch64_operands_ok_for_ldpstp (operands, true, <MODE>mode)\"\n+  [(parallel [(set (match_dup 0) (match_dup 1))\n+\t      (set (match_dup 2) (match_dup 3))])]\n+{\n+  rtx base, offset_1, offset_2;\n+\n+  extract_base_offset_in_addr (operands[1], &base, &offset_1);\n+  extract_base_offset_in_addr (operands[3], &base, &offset_2);\n+  if (INTVAL (offset_1) > INTVAL (offset_2))\n+    {\n+      std::swap (operands[0], operands[2]);\n+      std::swap (operands[1], operands[3]);\n+    }\n+})\n+\n+(define_peephole2\n+  [(set (match_operand:VD 0 \"aarch64_mem_pair_operand\" \"\")\n+\t(match_operand:VD 1 \"register_operand\" \"\"))\n+   (set (match_operand:VD 2 \"memory_operand\" \"\")\n+\t(match_operand:VD 3 \"register_operand\" \"\"))]\n+  \"TARGET_SIMD && aarch64_operands_ok_for_ldpstp (operands, false, <MODE>mode)\"\n+  [(parallel [(set (match_dup 0) (match_dup 1))\n+\t      (set (match_dup 2) (match_dup 3))])]\n+{\n+  rtx base, offset_1, offset_2;\n+\n+  extract_base_offset_in_addr (operands[0], &base, &offset_1);\n+  extract_base_offset_in_addr (operands[2], &base, &offset_2);\n+  if (INTVAL (offset_1) > INTVAL (offset_2))\n+    {\n+      std::swap (operands[0], operands[2]);\n+      std::swap (operands[1], operands[3]);\n+    }\n+})\n+\n+\n ;; Handle sign/zero extended consecutive load/store.\n \n (define_peephole2"}, {"sha": "65a2b6fad64f9210e10c45da7089dfca24e69e71", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc5231831d8356f563e89ab3f2e93bd98eaac57/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc5231831d8356f563e89ab3f2e93bd98eaac57/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=abc5231831d8356f563e89ab3f2e93bd98eaac57", "patch": "@@ -153,6 +153,34 @@\n    (set_attr \"length\" \"4,4,4,8,8,8,4\")]\n )\n \n+(define_insn \"load_pair<mode>\"\n+  [(set (match_operand:VD 0 \"register_operand\" \"=w\")\n+\t(match_operand:VD 1 \"aarch64_mem_pair_operand\" \"Ump\"))\n+   (set (match_operand:VD 2 \"register_operand\" \"=w\")\n+\t(match_operand:VD 3 \"memory_operand\" \"m\"))]\n+  \"TARGET_SIMD\n+   && rtx_equal_p (XEXP (operands[3], 0),\n+\t\t   plus_constant (Pmode,\n+\t\t\t\t  XEXP (operands[1], 0),\n+\t\t\t\t  GET_MODE_SIZE (<MODE>mode)))\"\n+  \"ldp\\\\t%d0, %d2, %1\"\n+  [(set_attr \"type\" \"neon_ldp\")]\n+)\n+\n+(define_insn \"store_pair<mode>\"\n+  [(set (match_operand:VD 0 \"aarch64_mem_pair_operand\" \"=Ump\")\n+\t(match_operand:VD 1 \"register_operand\" \"w\"))\n+   (set (match_operand:VD 2 \"memory_operand\" \"=m\")\n+\t(match_operand:VD 3 \"register_operand\" \"w\"))]\n+  \"TARGET_SIMD\n+   && rtx_equal_p (XEXP (operands[2], 0),\n+\t\t   plus_constant (Pmode,\n+\t\t\t\t  XEXP (operands[0], 0),\n+\t\t\t\t  GET_MODE_SIZE (<MODE>mode)))\"\n+  \"stp\\\\t%d1, %d3, %0\"\n+  [(set_attr \"type\" \"neon_stp\")]\n+)\n+\n (define_split\n   [(set (match_operand:VQ 0 \"register_operand\" \"\")\n       (match_operand:VQ 1 \"register_operand\" \"\"))]"}, {"sha": "47404e95ea7b1dc9a56e9ccc5a63393d544b0695", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc5231831d8356f563e89ab3f2e93bd98eaac57/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc5231831d8356f563e89ab3f2e93bd98eaac57/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=abc5231831d8356f563e89ab3f2e93bd98eaac57", "patch": "@@ -3468,6 +3468,18 @@ offset_12bit_unsigned_scaled_p (machine_mode mode, HOST_WIDE_INT offset)\n \t  && offset % GET_MODE_SIZE (mode) == 0);\n }\n \n+/* Return true if MODE is one of the modes for which we\n+   support LDP/STP operations.  */\n+\n+static bool\n+aarch64_mode_valid_for_sched_fusion_p (machine_mode mode)\n+{\n+  return mode == SImode || mode == DImode\n+\t || mode == SFmode || mode == DFmode\n+\t || (aarch64_vector_mode_supported_p (mode)\n+\t     && GET_MODE_SIZE (mode) == 8);\n+}\n+\n /* Return true if X is a valid address for machine mode MODE.  If it is,\n    fill in INFO appropriately.  STRICT_P is true if REG_OK_STRICT is in\n    effect.  OUTER_CODE is PARALLEL for a load/store pair.  */\n@@ -12813,8 +12825,9 @@ fusion_load_store (rtx_insn *insn, rtx *base, rtx *offset)\n   src = SET_SRC (x);\n   dest = SET_DEST (x);\n \n-  if (GET_MODE (dest) != SImode && GET_MODE (dest) != DImode\n-      && GET_MODE (dest) != SFmode && GET_MODE (dest) != DFmode)\n+  machine_mode dest_mode = GET_MODE (dest);\n+\n+  if (!aarch64_mode_valid_for_sched_fusion_p (dest_mode))\n     return SCHED_FUSION_NONE;\n \n   if (GET_CODE (src) == SIGN_EXTEND)"}, {"sha": "924d5dab9fbbd675731bddeb57de4885952bc764", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc5231831d8356f563e89ab3f2e93bd98eaac57/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc5231831d8356f563e89ab3f2e93bd98eaac57/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=abc5231831d8356f563e89ab3f2e93bd98eaac57", "patch": "@@ -1,3 +1,8 @@\n+2015-10-20  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/aarch64/stp_vec_64_1.c: New test.\n+\t* gcc.target/aarch64/ldp_vec_64_1.c: Likewise.\n+\n 2015-10-20  Alan Lawrence  <alan.lawrence@arm.com>\n \n \t* lib/target-supports.exp (check_effective_target_vect64): Add AArch64."}, {"sha": "62213f321d408b616aaa36dbbc8668a657cf682a", "filename": "gcc/testsuite/gcc.target/aarch64/ldp_vec_64_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc5231831d8356f563e89ab3f2e93bd98eaac57/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fldp_vec_64_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc5231831d8356f563e89ab3f2e93bd98eaac57/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fldp_vec_64_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fldp_vec_64_1.c?ref=abc5231831d8356f563e89ab3f2e93bd98eaac57", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Ofast\" } */\n+\n+typedef int int32x2_t __attribute__ ((__vector_size__ ((8))));\n+\n+void\n+foo (int32x2_t *foo, int32x2_t *bar)\n+{\n+  int i = 0;\n+  int32x2_t val = { 3, 2 };\n+\n+  for (i = 0; i < 1024; i+=2)\n+    foo[i] = bar[i] + bar[i + 1];\n+}\n+\n+/* { dg-final { scan-assembler \"ldp\\td\\[0-9\\]+, d\\[0-9\\]\" } } */"}, {"sha": "11e757a245d2ac5e58df1a8ff731535a6d8591ae", "filename": "gcc/testsuite/gcc.target/aarch64/stp_vec_64_1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abc5231831d8356f563e89ab3f2e93bd98eaac57/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fstp_vec_64_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abc5231831d8356f563e89ab3f2e93bd98eaac57/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fstp_vec_64_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fstp_vec_64_1.c?ref=abc5231831d8356f563e89ab3f2e93bd98eaac57", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Ofast\" } */\n+\n+\n+typedef int int32x2_t __attribute__ ((__vector_size__ ((8))));\n+\n+void\n+bar (int32x2_t *foo)\n+{\n+  int i = 0;\n+  int32x2_t val = { 3, 2 };\n+\n+  for (i = 0; i < 256; i+=2)\n+    {\n+      foo[i] = val;\n+      foo[i+1] = val;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler \"stp\\td\\[0-9\\]+, d\\[0-9\\]\" } } */"}]}