{"sha": "f57aa9503ff170ff6c8549718bd736f6c8168bab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjU3YWE5NTAzZmYxNzBmZjZjODU0OTcxOGJkNzM2ZjZjODE2OGJhYg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-02-10T21:44:40Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-02-10T21:44:40Z"}, "message": "i386: Fix -mavx -mno-mavx2 ICE with VEC_COND_EXPR [PR93637]\n\nAs mentioned in the PR, for -mavx -mno-avx2 the backend does support\nvcondv4div4df and vcondv8siv8sf optabs (while generally 32-byte vectors\naren't much supported in that case, it is performed using\nvandps/vandnps/vorps).  The problem is that after the last generic vector\nlowering (where the VEC_COND_EXPR still compares two V4DF vectors and\nhas two V4DI last operands and V4DI result and so is considered ok) fre4\nfolds the condition into constant, at which point the middle-end during\nexpansion will try vcond_mask_optab and fall back to trying to expand it\nas the constant vector < 0 vcondv4div4di, but neither of them is supported\nfor -mavx -mno-avx2 and thus we ICE.\n\nSo, the options I see is either what the following patch does, also support\nvcond_mask_v4div4di and vcond_mask_v4siv4si already for TARGET_AVX, or\nrequire for vcondv4div4df and vcondv8siv8sf TARGET_AVX2 rather than current\nTARGET_AVX.\n\n2020-02-10  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/93637\n\t* config/i386/sse.md (VI_256_AVX2): New mode iterator.\n\t(vcond_mask_<mode><sseintvecmodelower>): Use it instead of VI_256.\n\tChange condition from TARGET_AVX2 to TARGET_AVX.\n\n\t* gcc.target/i386/avx-pr93637.c: New test.", "tree": {"sha": "32c89edb90d99d0437a1214b3cf0db01f12bba28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/32c89edb90d99d0437a1214b3cf0db01f12bba28"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f57aa9503ff170ff6c8549718bd736f6c8168bab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f57aa9503ff170ff6c8549718bd736f6c8168bab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f57aa9503ff170ff6c8549718bd736f6c8168bab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f57aa9503ff170ff6c8549718bd736f6c8168bab/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41a9e940c7014f117738a9a59b31833047a1083d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41a9e940c7014f117738a9a59b31833047a1083d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41a9e940c7014f117738a9a59b31833047a1083d"}], "stats": {"total": 45, "additions": 40, "deletions": 5}, "files": [{"sha": "9f44b6fd9f8a7f835a9c876e5f4f201217ec193f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f57aa9503ff170ff6c8549718bd736f6c8168bab/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f57aa9503ff170ff6c8549718bd736f6c8168bab/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f57aa9503ff170ff6c8549718bd736f6c8168bab", "patch": "@@ -1,3 +1,10 @@\n+2020-02-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/93637\n+\t* config/i386/sse.md (VI_256_AVX2): New mode iterator.\n+\t(vcond_mask_<mode><sseintvecmodelower>): Use it instead of VI_256.\n+\tChange condition from TARGET_AVX2 to TARGET_AVX.\n+\n 2020-02-10  Iain Sandoe  <iain@sandoe.co.uk>\n \n \tPR other/93641"}, {"sha": "902ea318999b6c37c948e942de4991d2de53e4d5", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f57aa9503ff170ff6c8549718bd736f6c8168bab/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f57aa9503ff170ff6c8549718bd736f6c8168bab/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=f57aa9503ff170ff6c8549718bd736f6c8168bab", "patch": "@@ -3430,13 +3430,19 @@\n \t  (match_operand:<avx512fmaskmode> 3 \"register_operand\")))]\n   \"TARGET_AVX512BW\")\n \n+;; As vcondv4div4df and vcondv8siv8sf are enabled already with TARGET_AVX,\n+;; and their condition can be folded late into a constant, we need to\n+;; support vcond_mask_v4div4di and vcond_mask_v8siv8si for TARGET_AVX.\n+(define_mode_iterator VI_256_AVX2 [(V32QI \"TARGET_AVX2\") (V16HI \"TARGET_AVX2\")\n+\t\t\t\t   V8SI V4DI])\n+\n (define_expand \"vcond_mask_<mode><sseintvecmodelower>\"\n-  [(set (match_operand:VI_256 0 \"register_operand\")\n-\t(vec_merge:VI_256\n-\t  (match_operand:VI_256 1 \"nonimmediate_operand\")\n-\t  (match_operand:VI_256 2 \"nonimm_or_0_operand\")\n+  [(set (match_operand:VI_256_AVX2 0 \"register_operand\")\n+\t(vec_merge:VI_256_AVX2\n+\t  (match_operand:VI_256_AVX2 1 \"nonimmediate_operand\")\n+\t  (match_operand:VI_256_AVX2 2 \"nonimm_or_0_operand\")\n \t  (match_operand:<sseintvecmode> 3 \"register_operand\")))]\n-  \"TARGET_AVX2\"\n+  \"TARGET_AVX\"\n {\n   ix86_expand_sse_movcc (operands[0], operands[3],\n \t\t\t operands[1], operands[2]);"}, {"sha": "d6d011293834965256c832d8b82f093a64e5e70f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f57aa9503ff170ff6c8549718bd736f6c8168bab/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f57aa9503ff170ff6c8549718bd736f6c8168bab/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f57aa9503ff170ff6c8549718bd736f6c8168bab", "patch": "@@ -1,3 +1,8 @@\n+2020-02-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/93637\n+\t* gcc.target/i386/avx-pr93637.c: New test.\n+\n 2020-02-10  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/93405"}, {"sha": "9e7a0a7c9c1ad0995facb06d7348bbcfdd31d003", "filename": "gcc/testsuite/gcc.target/i386/avx-pr93637.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f57aa9503ff170ff6c8549718bd736f6c8168bab/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-pr93637.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f57aa9503ff170ff6c8549718bd736f6c8168bab/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-pr93637.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-pr93637.c?ref=f57aa9503ff170ff6c8549718bd736f6c8168bab", "patch": "@@ -0,0 +1,17 @@\n+/* PR target/93637 */\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx -mno-avx2 -O3 --param sccvn-max-alias-queries-per-access=3\" } */\n+\n+double\n+foo (void)\n+{\n+  int i;\n+  double r = 7.0;\n+  double a[] = { 0.0, 0.0, -0.0, 0.0, 0.0, -0.0, 1.0, 0.0, 0.0, -0.0, 1.0, 0.0, 1.0, 1.0 };\n+\n+  for (i = 0; i < sizeof (a) / sizeof (a[0]); ++i)\n+    if (a[i] == 0.0)\n+      r = a[i];\n+\n+  return r;\n+}"}]}