{"sha": "2db9b7cd422b63fe0a87218128cc0939b439859e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmRiOWI3Y2Q0MjJiNjNmZTBhODcyMTgxMjhjYzA5MzliNDM5ODU5ZQ==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2017-06-23T09:05:47Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2017-06-23T09:05:47Z"}, "message": "Refactor fileptr_type_node handling\n\n2017-06-23  Marc Glisse  <marc.glisse@inria.fr>\n\ngcc/\n\t* tree.h (builtin_structptr_type): New type.\n\t(builtin_structptr_types): Declare new array.\n\t* tree.c (builtin_structptr_types): New array.\n\t(free_lang_data, build_common_tree_nodes): Use it.\n\ngcc/c-family/\n\t* c-common.c (c_common_nodes_and_builtins): Use builtin_structptr_types.\n\ngcc/cp/\n\t* decl.c (duplicate_decls): Use builtin_structptr_types.\n\ngcc/lto/\n\t* lto-lang.c (lto_init): Use builtin_structptr_types.\n\nFrom-SVN: r249585", "tree": {"sha": "8874bb67d61acd34ac953c902f78942ea9e4d604", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8874bb67d61acd34ac953c902f78942ea9e4d604"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2db9b7cd422b63fe0a87218128cc0939b439859e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2db9b7cd422b63fe0a87218128cc0939b439859e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2db9b7cd422b63fe0a87218128cc0939b439859e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2db9b7cd422b63fe0a87218128cc0939b439859e/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "70fdc808941016567f8e55caea593324b15df230", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70fdc808941016567f8e55caea593324b15df230", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70fdc808941016567f8e55caea593324b15df230"}], "stats": {"total": 156, "additions": 97, "deletions": 59}, "files": [{"sha": "4f750a63dd1d46cf4407cba104d114d68af0e9d9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2db9b7cd422b63fe0a87218128cc0939b439859e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2db9b7cd422b63fe0a87218128cc0939b439859e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2db9b7cd422b63fe0a87218128cc0939b439859e", "patch": "@@ -1,3 +1,10 @@\n+2017-06-23  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* tree.h (builtin_structptr_type): New type.\n+\t(builtin_structptr_types): Declare new array.\n+\t* tree.c (builtin_structptr_types): New array.\n+\t(free_lang_data, build_common_tree_nodes): Use it.\n+\n 2017-06-23  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR c++/81187"}, {"sha": "a61bb56ee80555d886107e4a56ef156eb7c0b7a0", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2db9b7cd422b63fe0a87218128cc0939b439859e/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2db9b7cd422b63fe0a87218128cc0939b439859e/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=2db9b7cd422b63fe0a87218128cc0939b439859e", "patch": "@@ -1,3 +1,7 @@\n+2017-06-23  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* c-common.c (c_common_nodes_and_builtins): Use builtin_structptr_types.\n+\n 2017-06-15  Martin Sebor  <msebor@redhat.com>\n \n \tPR c++/80560"}, {"sha": "f6a9d05c3da2ec9de6b4730a55d838f98e31a6df", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2db9b7cd422b63fe0a87218128cc0939b439859e/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2db9b7cd422b63fe0a87218128cc0939b439859e/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=2db9b7cd422b63fe0a87218128cc0939b439859e", "patch": "@@ -4181,10 +4181,14 @@ c_common_nodes_and_builtins (void)\n   if (c_dialect_cxx ())\n     {\n       /* For C++, make fileptr_type_node a distinct void * type until\n-\t FILE type is defined.  */\n-      fileptr_type_node = build_variant_type_copy (ptr_type_node);\n-      /* Likewise for const struct tm*.  */\n-      const_tm_ptr_type_node = build_variant_type_copy (const_ptr_type_node);\n+\t FILE type is defined.  Likewise for const struct tm*.  */\n+      for (unsigned i = 0;\n+\t   i < sizeof (builtin_structptr_types)\n+\t       / sizeof (builtin_structptr_type);\n+\t   ++i)\n+\tbuiltin_structptr_types[i].node =\n+\t  build_variant_type_copy (builtin_structptr_types[i].base);\n+\n     }\n \n   record_builtin_type (RID_VOID, NULL, void_type_node);"}, {"sha": "92f478a0b487d895185f7aecf4609169b402d252", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2db9b7cd422b63fe0a87218128cc0939b439859e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2db9b7cd422b63fe0a87218128cc0939b439859e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2db9b7cd422b63fe0a87218128cc0939b439859e", "patch": "@@ -1,3 +1,7 @@\n+2017-06-23  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* decl.c (duplicate_decls): Use builtin_structptr_types.\n+\n 2017-06-22  Nathan Sidwell  <nathan@acm.org>\n \n \tReorder IDENTIFIER flags"}, {"sha": "0361357a14e0457042febae5da972e24f7242712", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 32, "deletions": 44, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2db9b7cd422b63fe0a87218128cc0939b439859e/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2db9b7cd422b63fe0a87218128cc0939b439859e/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=2db9b7cd422b63fe0a87218128cc0939b439859e", "patch": "@@ -1470,53 +1470,41 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t\t   t2 = TYPE_ARG_TYPES (TREE_TYPE (olddecl));\n \t\t   t1 || t2;\n \t\t   t1 = TREE_CHAIN (t1), t2 = TREE_CHAIN (t2))\n-\t\tif (!t1 || !t2)\n-\t\t  break;\n-\t        /* Deal with fileptr_type_node.  FILE type is not known\n-\t\t   at the time we create the builtins.  */\n-\t\telse if (TREE_VALUE (t2) == fileptr_type_node)\n-\t\t  {\n-\t\t    tree t = TREE_VALUE (t1);\n-\n-\t\t    if (TYPE_PTR_P (t)\n-\t\t\t&& TYPE_IDENTIFIER (TREE_TYPE (t))\n-\t\t\t   == get_identifier (\"FILE\")\n-\t\t\t&& compparms (TREE_CHAIN (t1), TREE_CHAIN (t2)))\n+\t\t{\n+\t\t  if (!t1 || !t2)\n+\t\t    break;\n+\t\t  /* FILE, tm types are not known at the time\n+\t\t     we create the builtins.  */\n+\t\t  for (unsigned i = 0;\n+\t\t       i < sizeof (builtin_structptr_types)\n+\t\t\t   / sizeof (builtin_structptr_type);\n+\t\t       ++i)\n+\t\t    if (TREE_VALUE (t2) == builtin_structptr_types[i].node)\n \t\t      {\n-\t\t\ttree oldargs = TYPE_ARG_TYPES (TREE_TYPE (olddecl));\n-\n-\t\t\tTYPE_ARG_TYPES (TREE_TYPE (olddecl))\n-\t\t\t  = TYPE_ARG_TYPES (TREE_TYPE (newdecl));\n-\t\t\ttypes_match = decls_match (newdecl, olddecl);\n-\t\t\tif (types_match)\n-\t\t\t  return duplicate_decls (newdecl, olddecl,\n-\t\t\t\t\t\t  newdecl_is_friend);\n-\t\t\tTYPE_ARG_TYPES (TREE_TYPE (olddecl)) = oldargs;\n-\t\t      }\n-\t\t  }\n-\t\t/* Likewise for const struct tm*.  */\n-\t\telse if (TREE_VALUE (t2) == const_tm_ptr_type_node)\n-\t\t  {\n-\t\t    tree t = TREE_VALUE (t1);\n+\t\t\ttree t = TREE_VALUE (t1);\n \n-\t\t    if (TYPE_PTR_P (t)\n-\t\t\t&& TYPE_IDENTIFIER (TREE_TYPE (t))\n-\t\t\t   == get_identifier (\"tm\")\n-\t\t\t&& compparms (TREE_CHAIN (t1), TREE_CHAIN (t2)))\n-\t\t      {\n-\t\t\ttree oldargs = TYPE_ARG_TYPES (TREE_TYPE (olddecl));\n-\n-\t\t\tTYPE_ARG_TYPES (TREE_TYPE (olddecl))\n-\t\t\t  = TYPE_ARG_TYPES (TREE_TYPE (newdecl));\n-\t\t\ttypes_match = decls_match (newdecl, olddecl);\n-\t\t\tif (types_match)\n-\t\t\t  return duplicate_decls (newdecl, olddecl,\n-\t\t\t\t\t\t  newdecl_is_friend);\n-\t\t\tTYPE_ARG_TYPES (TREE_TYPE (olddecl)) = oldargs;\n+\t\t\tif (TYPE_PTR_P (t)\n+\t\t\t    && TYPE_IDENTIFIER (TREE_TYPE (t))\n+\t\t\t    == get_identifier (builtin_structptr_types[i].str)\n+\t\t\t    && compparms (TREE_CHAIN (t1), TREE_CHAIN (t2)))\n+\t\t\t  {\n+\t\t\t    tree oldargs = TYPE_ARG_TYPES (TREE_TYPE (olddecl));\n+\n+\t\t\t    TYPE_ARG_TYPES (TREE_TYPE (olddecl))\n+\t\t\t      = TYPE_ARG_TYPES (TREE_TYPE (newdecl));\n+\t\t\t    types_match = decls_match (newdecl, olddecl);\n+\t\t\t    if (types_match)\n+\t\t\t      return duplicate_decls (newdecl, olddecl,\n+\t\t\t\t\t\t      newdecl_is_friend);\n+\t\t\t    TYPE_ARG_TYPES (TREE_TYPE (olddecl)) = oldargs;\n+\t\t\t  }\n+\t\t\tgoto next_arg;\n \t\t      }\n-\t\t  }\n-\t\telse if (! same_type_p (TREE_VALUE (t1), TREE_VALUE (t2)))\n-\t\t  break;\n+\n+\t\t  if (! same_type_p (TREE_VALUE (t1), TREE_VALUE (t2)))\n+\t\t    break;\n+next_arg:;\n+\t\t}\n \n \t      warning_at (DECL_SOURCE_LOCATION (newdecl),\n \t\t\t  OPT_Wbuiltin_declaration_mismatch,"}, {"sha": "41f034372d94cd6efba2b0592a937cef71895844", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2db9b7cd422b63fe0a87218128cc0939b439859e/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2db9b7cd422b63fe0a87218128cc0939b439859e/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=2db9b7cd422b63fe0a87218128cc0939b439859e", "patch": "@@ -1,3 +1,7 @@\n+2017-06-23  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* lto-lang.c (lto_init): Use builtin_structptr_types.\n+\n 2017-06-15  Jan Hubicka  <hubicka@ucw.cz>\n \t    Thomas Preud'homme  <thomas.preudhomme@arm.com>\n "}, {"sha": "58935172b2c5e1b94a1de71ccdb76fbe4a2c28c0", "filename": "gcc/lto/lto-lang.c", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2db9b7cd422b63fe0a87218128cc0939b439859e/gcc%2Flto%2Flto-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2db9b7cd422b63fe0a87218128cc0939b439859e/gcc%2Flto%2Flto-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-lang.c?ref=2db9b7cd422b63fe0a87218128cc0939b439859e", "patch": "@@ -1220,13 +1220,17 @@ lto_init (void)\n   /* In the C++ front-end, fileptr_type_node is defined as a variant\n      copy of ptr_type_node, rather than ptr_node itself.  The\n      distinction should only be relevant to the front-end, so we\n-     always use the C definition here in lto1.  */\n-  gcc_assert (fileptr_type_node == ptr_type_node);\n-  gcc_assert (TYPE_MAIN_VARIANT (fileptr_type_node) == ptr_type_node);\n-  /* Likewise for const struct tm*.  */\n-  gcc_assert (const_tm_ptr_type_node == const_ptr_type_node);\n-  gcc_assert (TYPE_MAIN_VARIANT (const_tm_ptr_type_node)\n-\t      == const_ptr_type_node);\n+     always use the C definition here in lto1.\n+     Likewise for const struct tm*.  */\n+  for (unsigned i = 0;\n+       i < sizeof (builtin_structptr_types) / sizeof (builtin_structptr_type);\n+       ++i)\n+    {\n+      gcc_assert (builtin_structptr_types[i].node\n+\t\t  == builtin_structptr_types[i].base);\n+      gcc_assert (TYPE_MAIN_VARIANT (builtin_structptr_types[i].node)\n+\t\t  == builtin_structptr_types[i].base);\n+    }\n \n   lto_build_c_type_nodes ();\n   gcc_assert (va_list_type_node);"}, {"sha": "13c6c90ba9817500ac671507e3e8095dda5c897f", "filename": "gcc/tree.c", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2db9b7cd422b63fe0a87218128cc0939b439859e/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2db9b7cd422b63fe0a87218128cc0939b439859e/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=2db9b7cd422b63fe0a87218128cc0939b439859e", "patch": "@@ -5983,8 +5983,10 @@ free_lang_data (void)\n   free_lang_data_in_cgraph ();\n \n   /* Create gimple variants for common types.  */\n-  fileptr_type_node = ptr_type_node;\n-  const_tm_ptr_type_node = const_ptr_type_node;\n+  for (unsigned i = 0;\n+       i < sizeof (builtin_structptr_types) / sizeof (builtin_structptr_type);\n+       ++i)\n+    builtin_structptr_types[i].node = builtin_structptr_types[i].base;\n \n   /* Reset some langhooks.  Do not reset types_compatible_p, it may\n      still be used indirectly via the get_alias_set langhook.  */\n@@ -10449,8 +10451,10 @@ build_common_tree_nodes (bool signed_char)\n   ptr_type_node = build_pointer_type (void_type_node);\n   const_ptr_type_node\n     = build_pointer_type (build_type_variant (void_type_node, 1, 0));\n-  fileptr_type_node = ptr_type_node;\n-  const_tm_ptr_type_node = const_ptr_type_node;\n+  for (unsigned i = 0;\n+       i < sizeof (builtin_structptr_types) / sizeof (builtin_structptr_type);\n+       ++i)\n+    builtin_structptr_types[i].node = builtin_structptr_types[i].base;\n \n   pointer_sized_int_node = build_nonstandard_integer_type (POINTER_SIZE, 1);\n \n@@ -14544,6 +14548,16 @@ get_nonnull_args (const_tree fntype)\n   return argmap;\n }\n \n+/* List of pointer types used to declare builtins before we have seen their\n+   real declaration.\n+\n+   Keep the size up to date in tree.h !  */\n+const builtin_structptr_type builtin_structptr_types[2] = \n+{\n+  { fileptr_type_node, ptr_type_node, \"FILE\" },\n+  { const_tm_ptr_type_node, const_ptr_type_node, \"tm\" }\n+};\n+\n #if CHECKING_P\n \n namespace selftest {"}, {"sha": "7a4f5d64f19082992a1dcf58820e5bba8644781e", "filename": "gcc/tree.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2db9b7cd422b63fe0a87218128cc0939b439859e/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2db9b7cd422b63fe0a87218128cc0939b439859e/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=2db9b7cd422b63fe0a87218128cc0939b439859e", "patch": "@@ -5523,4 +5523,13 @@ desired_pro_or_demotion_p (const_tree to_type, const_tree from_type)\n   return to_type_precision <= TYPE_PRECISION (from_type);\n }\n \n+/* Pointer type used to declare builtins before we have seen its real\n+   declaration.  */\n+struct builtin_structptr_type\n+{\n+  tree& node;\n+  tree& base;\n+  const char *str;\n+};\n+extern const builtin_structptr_type builtin_structptr_types[2];\n #endif  /* GCC_TREE_H  */"}]}