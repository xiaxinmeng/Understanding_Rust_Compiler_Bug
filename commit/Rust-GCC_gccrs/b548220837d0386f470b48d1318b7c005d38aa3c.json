{"sha": "b548220837d0386f470b48d1318b7c005d38aa3c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjU0ODIyMDgzN2QwMzg2ZjQ3MGI0OGQxMzE4YjdjMDA1ZDM4YWEzYw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-05-03T20:34:31Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-05-03T20:34:31Z"}, "message": "ifcvt.c (noce_try_store_flag, [...]): Insert new code before JUMP, not EARLIEST.\n\n        * ifcvt.c (noce_try_store_flag, noce_try_store_flag_constants,\n        noce_try_store_flag_inc, noce_try_store_flag_mask, noce_try_cmove,\n        noce_try_cmove_arith, noce_try_minmax, noce_try_abs): Insert new\n        code before JUMP, not EARLIEST.\n\nFrom-SVN: r53123", "tree": {"sha": "892b45fd16cf2c42639551c3f8013562fae34414", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/892b45fd16cf2c42639551c3f8013562fae34414"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b548220837d0386f470b48d1318b7c005d38aa3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b548220837d0386f470b48d1318b7c005d38aa3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b548220837d0386f470b48d1318b7c005d38aa3c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b548220837d0386f470b48d1318b7c005d38aa3c/comments", "author": null, "committer": null, "parents": [{"sha": "ba2e86d69defc0b4d0e63cd2c202110f194b8720", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba2e86d69defc0b4d0e63cd2c202110f194b8720", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba2e86d69defc0b4d0e63cd2c202110f194b8720"}], "stats": {"total": 63, "additions": 51, "deletions": 12}, "files": [{"sha": "6e53aa4d951bd1e1b76ca9f726c59bec26b795f5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548220837d0386f470b48d1318b7c005d38aa3c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548220837d0386f470b48d1318b7c005d38aa3c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b548220837d0386f470b48d1318b7c005d38aa3c", "patch": "@@ -1,3 +1,11 @@\n+2002-05-03  Richard Henderson  <rth@redhat.com>\n+\n+\tPR opt/6534\n+\t* ifcvt.c (noce_try_store_flag, noce_try_store_flag_constants,\n+\tnoce_try_store_flag_inc, noce_try_store_flag_mask, noce_try_cmove,\n+\tnoce_try_cmove_arith, noce_try_minmax, noce_try_abs): Insert new\n+\tcode before JUMP, not EARLIEST.\n+\n 2002-05-03  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* c-format.c (check_format_info_main): Don't check for presence of\n@@ -147,10 +155,10 @@ Thu May  2 19:50:04 CEST 2002  Jan Hubicka  <jh@suse.cz>\n \n 2002-05-02  Aldy Hernandez  <aldyh@redhat.com>\n \n-        * gcc.dg/altivec-8.c: New.\n+\t* gcc.dg/altivec-8.c: New.\n \n-        * config/rs6000/rs6000.c (rs6000_legitimate_address): Disallow\n-        PRE_INC and PRE_DEC for altivec modes.\n+\t* config/rs6000/rs6000.c (rs6000_legitimate_address): Disallow\n+\tPRE_INC and PRE_DEC for altivec modes.\n \n 2002-05-01  Bruce Korb  <bkorb@gnu.org>\n "}, {"sha": "e8c2b5f89b94a7eb46b224f6419c884c364ffed0", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548220837d0386f470b48d1318b7c005d38aa3c/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548220837d0386f470b48d1318b7c005d38aa3c/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=b548220837d0386f470b48d1318b7c005d38aa3c", "patch": "@@ -620,7 +620,7 @@ noce_try_store_flag (if_info)\n \n       seq = get_insns ();\n       end_sequence ();\n-      emit_insns_before (seq, if_info->cond_earliest);\n+      emit_insns_before (seq, if_info->jump);\n \n       return TRUE;\n     }\n@@ -755,7 +755,7 @@ noce_try_store_flag_constants (if_info)\n       if (seq_contains_jump (seq))\n \treturn FALSE;\n \n-      emit_insns_before (seq, if_info->cond_earliest);\n+      emit_insns_before (seq, if_info->jump);\n \n       return TRUE;\n     }\n@@ -815,7 +815,7 @@ noce_try_store_flag_inc (if_info)\n \t  if (seq_contains_jump (seq))\n \t    return FALSE;\n \n-\t  emit_insns_before (seq, if_info->cond_earliest);\n+\t  emit_insns_before (seq, if_info->jump);\n \n \t  return TRUE;\n \t}\n@@ -867,7 +867,7 @@ noce_try_store_flag_mask (if_info)\n \t  if (seq_contains_jump (seq))\n \t    return FALSE;\n \n-\t  emit_insns_before (seq, if_info->cond_earliest);\n+\t  emit_insns_before (seq, if_info->jump);\n \n \t  return TRUE;\n \t}\n@@ -962,7 +962,7 @@ noce_try_cmove (if_info)\n \n \t  seq = get_insns ();\n \t  end_sequence ();\n-\t  emit_insns_before (seq, if_info->cond_earliest);\n+\t  emit_insns_before (seq, if_info->jump);\n \t  return TRUE;\n \t}\n       else\n@@ -1124,7 +1124,7 @@ noce_try_cmove_arith (if_info)\n \n   tmp = get_insns ();\n   end_sequence ();\n-  emit_insns_before (tmp, if_info->cond_earliest);\n+  emit_insns_before (tmp, if_info->jump);\n   return TRUE;\n \n  end_seq_and_fail:\n@@ -1376,7 +1376,7 @@ noce_try_minmax (if_info)\n   if (seq_contains_jump (seq))\n     return FALSE;\n \n-  emit_insns_before (seq, earliest);\n+  emit_insns_before (seq, if_info->jump);\n   if_info->cond = cond;\n   if_info->cond_earliest = earliest;\n \n@@ -1494,7 +1494,7 @@ noce_try_abs (if_info)\n   if (seq_contains_jump (seq))\n     return FALSE;\n \n-  emit_insns_before (seq, earliest);\n+  emit_insns_before (seq, if_info->jump);\n   if_info->cond = cond;\n   if_info->cond_earliest = earliest;\n \n@@ -1753,7 +1753,7 @@ noce_process_if_block (test_bb, then_bb, else_bb, join_bb)\n   if (insn_b && else_bb)\n     delete_insn (insn_b);\n \n-  /* The new insns will have been inserted before cond_earliest.  We should\n+  /* The new insns will have been inserted just before the jump.  We should\n      be able to remove the jump with impunity, but the condition itself may\n      have been modified by gcse to be shared across basic blocks.  */\n   delete_insn (jump);"}, {"sha": "6d45ca09af02071cbf0f7990f3df086607a69efb", "filename": "gcc/testsuite/gcc.c-torture/execute/20020503-1.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548220837d0386f470b48d1318b7c005d38aa3c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20020503-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548220837d0386f470b48d1318b7c005d38aa3c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20020503-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20020503-1.c?ref=b548220837d0386f470b48d1318b7c005d38aa3c", "patch": "@@ -0,0 +1,31 @@\n+/* PR 6534 */\n+/* GCSE unified the two i<0 tests, but if-conversion to ui=abs(i) \n+   insertted the code at the wrong place corrupting the i<0 test.  */\n+\n+void abort (void);\n+static char *\n+inttostr (long i, char buf[128])\n+{\n+  unsigned long ui = i;\n+  char *p = buf + 127;\n+  *p = '\\0';\n+  if (i < 0)\n+    ui = -ui;\n+  do\n+    *--p = '0' + ui % 10;\n+  while ((ui /= 10) != 0);\n+  if (i < 0)\n+    *--p = '-';\n+  return p;\n+}\n+\n+int\n+main ()\n+{\n+  char buf[128], *p;\n+\n+  p = inttostr (-1, buf);\n+  if (*p != '-')\n+    abort ();\n+  return 0;\n+}"}]}