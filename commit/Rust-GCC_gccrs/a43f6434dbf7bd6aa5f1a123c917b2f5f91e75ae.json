{"sha": "a43f6434dbf7bd6aa5f1a123c917b2f5f91e75ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTQzZjY0MzRkYmY3YmQ2YWE1ZjFhMTIzYzkxN2IyZjVmOTFlNzVhZQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-08-01T14:37:00Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-08-01T14:37:00Z"}, "message": "[multiple changes]\n\n2014-08-01  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch8.adb, opt.ads Minor comment updates.\n\n2014-08-01  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_intr.adb (Expand_Unc_Deallocation): Request a renaming\n\tfrom the side effects removal machinery.\n\t* exp_util.adb (Duplicate_Subexpr): Add formal parameter\n\tRenaming_Req. Update the nested call to Remove_Side_Effects.\n\t(Duplicate_Subexpr_No_Checks): Add formal parameter\n\tRenaming_Req. Update the nested call to Remove_Side_Effects.\n\t(Duplicate_Subexpr_Move_Checks): Add formal parameter\n\tRenaming_Req. Update the nested call to Remove_Side_Effects.\n\t(Remove_Side_Effects): Add formal parameter Renaming_Req. Generate\n\tan object renaming declaration when the caller requests it.\n\t* exp_util.ads (Duplicate_Subexpr): Add formal\n\tparameter Renaming_Req. Update comment on usage.\n\t(Duplicate_Subexpr_No_Checks): Add formal parameter Renaming_Req.\n\t(Duplicate_Subexpr_Move_Checks): Add formal parameter\n\tRenaming_Req.\n\nFrom-SVN: r213480", "tree": {"sha": "dfe0e0bf035c4c94c1fdec3041497cf35897adc4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dfe0e0bf035c4c94c1fdec3041497cf35897adc4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a43f6434dbf7bd6aa5f1a123c917b2f5f91e75ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a43f6434dbf7bd6aa5f1a123c917b2f5f91e75ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a43f6434dbf7bd6aa5f1a123c917b2f5f91e75ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a43f6434dbf7bd6aa5f1a123c917b2f5f91e75ae/comments", "author": null, "committer": null, "parents": [{"sha": "bdc193bad16766de82346ac6191a49e0771662c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdc193bad16766de82346ac6191a49e0771662c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdc193bad16766de82346ac6191a49e0771662c6"}], "stats": {"total": 155, "additions": 111, "deletions": 44}, "files": [{"sha": "c490774ba23e0bb259eb529b81395905cc13c05a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a43f6434dbf7bd6aa5f1a123c917b2f5f91e75ae/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a43f6434dbf7bd6aa5f1a123c917b2f5f91e75ae/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a43f6434dbf7bd6aa5f1a123c917b2f5f91e75ae", "patch": "@@ -1,3 +1,25 @@\n+2014-08-01  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch8.adb, opt.ads Minor comment updates.\n+\n+2014-08-01  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_intr.adb (Expand_Unc_Deallocation): Request a renaming\n+\tfrom the side effects removal machinery.\n+\t* exp_util.adb (Duplicate_Subexpr): Add formal parameter\n+\tRenaming_Req. Update the nested call to Remove_Side_Effects.\n+\t(Duplicate_Subexpr_No_Checks): Add formal parameter\n+\tRenaming_Req. Update the nested call to Remove_Side_Effects.\n+\t(Duplicate_Subexpr_Move_Checks): Add formal parameter\n+\tRenaming_Req. Update the nested call to Remove_Side_Effects.\n+\t(Remove_Side_Effects): Add formal parameter Renaming_Req. Generate\n+\tan object renaming declaration when the caller requests it.\n+\t* exp_util.ads (Duplicate_Subexpr): Add formal\n+\tparameter Renaming_Req. Update comment on usage.\n+\t(Duplicate_Subexpr_No_Checks): Add formal parameter Renaming_Req.\n+\t(Duplicate_Subexpr_Move_Checks): Add formal parameter\n+\tRenaming_Req.\n+\n 2014-08-01  Bob Duff  <duff@adacore.com>\n \n \t* gnat_ugn.texi: Minor updates."}, {"sha": "465c8b2f91daadbacedabaac43dbf9d54afbdf5d", "filename": "gcc/ada/exp_intr.adb", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a43f6434dbf7bd6aa5f1a123c917b2f5f91e75ae/gcc%2Fada%2Fexp_intr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a43f6434dbf7bd6aa5f1a123c917b2f5f91e75ae/gcc%2Fada%2Fexp_intr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_intr.adb?ref=a43f6434dbf7bd6aa5f1a123c917b2f5f91e75ae", "patch": "@@ -1106,9 +1106,11 @@ package body Exp_Intr is\n          end if;\n       end if;\n \n-      --  Normal processing for non-controlled types\n+      --  Normal processing for non-controlled types. The argument to free is\n+      --  a renaming rather than a constant to ensure that the original context\n+      --  is always set to null after the deallocation takes place.\n \n-      Free_Arg := Duplicate_Subexpr_No_Checks (Arg);\n+      Free_Arg  := Duplicate_Subexpr_No_Checks (Arg, Renaming_Req => True);\n       Free_Node := Make_Free_Statement (Loc, Empty);\n       Append_To (Stmts, Free_Node);\n       Set_Storage_Pool (Free_Node, Pool);"}, {"sha": "64523f2e4c6f18e38bc2d1f10d2558676a7a243c", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 38, "deletions": 16, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a43f6434dbf7bd6aa5f1a123c917b2f5f91e75ae/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a43f6434dbf7bd6aa5f1a123c917b2f5f91e75ae/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=a43f6434dbf7bd6aa5f1a123c917b2f5f91e75ae", "patch": "@@ -1791,11 +1791,12 @@ package body Exp_Util is\n    -----------------------\n \n    function Duplicate_Subexpr\n-     (Exp      : Node_Id;\n-      Name_Req : Boolean := False) return Node_Id\n+     (Exp          : Node_Id;\n+      Name_Req     : Boolean := False;\n+      Renaming_Req : Boolean := False) return Node_Id\n    is\n    begin\n-      Remove_Side_Effects (Exp, Name_Req);\n+      Remove_Side_Effects (Exp, Name_Req, Renaming_Req);\n       return New_Copy_Tree (Exp);\n    end Duplicate_Subexpr;\n \n@@ -1804,12 +1805,14 @@ package body Exp_Util is\n    ---------------------------------\n \n    function Duplicate_Subexpr_No_Checks\n-     (Exp      : Node_Id;\n-      Name_Req : Boolean := False) return Node_Id\n+     (Exp          : Node_Id;\n+      Name_Req     : Boolean := False;\n+      Renaming_Req : Boolean := False) return Node_Id\n    is\n       New_Exp : Node_Id;\n+\n    begin\n-      Remove_Side_Effects (Exp, Name_Req);\n+      Remove_Side_Effects (Exp, Name_Req, Renaming_Req);\n       New_Exp := New_Copy_Tree (Exp);\n       Remove_Checks (New_Exp);\n       return New_Exp;\n@@ -1820,12 +1823,14 @@ package body Exp_Util is\n    -----------------------------------\n \n    function Duplicate_Subexpr_Move_Checks\n-     (Exp      : Node_Id;\n-      Name_Req : Boolean := False) return Node_Id\n+     (Exp          : Node_Id;\n+      Name_Req     : Boolean := False;\n+      Renaming_Req : Boolean := False) return Node_Id\n    is\n       New_Exp : Node_Id;\n+\n    begin\n-      Remove_Side_Effects (Exp, Name_Req);\n+      Remove_Side_Effects (Exp, Name_Req, Renaming_Req);\n       New_Exp := New_Copy_Tree (Exp);\n       Remove_Checks (Exp);\n       return New_Exp;\n@@ -7101,6 +7106,7 @@ package body Exp_Util is\n    procedure Remove_Side_Effects\n      (Exp          : Node_Id;\n       Name_Req     : Boolean := False;\n+      Renaming_Req : Boolean := False;\n       Variable_Ref : Boolean := False)\n    is\n       Loc          : constant Source_Ptr      := Sloc (Exp);\n@@ -7186,14 +7192,30 @@ package body Exp_Util is\n             Set_Analyzed (Prefix (Exp), False);\n          end if;\n \n-         E :=\n-           Make_Object_Declaration (Loc,\n-             Defining_Identifier => Def_Id,\n-             Object_Definition   => New_Occurrence_Of (Exp_Type, Loc),\n-             Constant_Present    => True,\n-             Expression          => Relocate_Node (Exp));\n+         --  Generate:\n+         --    Rnn : Exp_Type renames Expr;\n+\n+         if Renaming_Req then\n+            E :=\n+              Make_Object_Renaming_Declaration (Loc,\n+                Defining_Identifier => Def_Id,\n+                Subtype_Mark        => New_Occurrence_Of (Exp_Type, Loc),\n+                Name                => Relocate_Node (Exp));\n+\n+         --  Generate:\n+         --    Rnn : constant Exp_Type := Expr;\n+\n+         else\n+            E :=\n+              Make_Object_Declaration (Loc,\n+                Defining_Identifier => Def_Id,\n+                Object_Definition   => New_Occurrence_Of (Exp_Type, Loc),\n+                Constant_Present    => True,\n+                Expression          => Relocate_Node (Exp));\n+\n+            Set_Assignment_OK (E);\n+         end if;\n \n-         Set_Assignment_OK (E);\n          Insert_Action (Exp, E);\n \n       --  If the expression has the form v.all then we can just capture the"}, {"sha": "a62ca9f101e4ac5439c59fb2b192f177ec2d64e9", "filename": "gcc/ada/exp_util.ads", "status": "modified", "additions": 26, "deletions": 13, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a43f6434dbf7bd6aa5f1a123c917b2f5f91e75ae/gcc%2Fada%2Fexp_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a43f6434dbf7bd6aa5f1a123c917b2f5f91e75ae/gcc%2Fada%2Fexp_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.ads?ref=a43f6434dbf7bd6aa5f1a123c917b2f5f91e75ae", "patch": "@@ -330,8 +330,9 @@ package Exp_Util is\n    --  be the earliest point at which they are used.\n \n    function Duplicate_Subexpr\n-     (Exp      : Node_Id;\n-      Name_Req : Boolean := False) return Node_Id;\n+     (Exp          : Node_Id;\n+      Name_Req     : Boolean := False;\n+      Renaming_Req : Boolean := False) return Node_Id;\n    --  Given the node for a subexpression, this function makes a logical copy\n    --  of the subexpression, and returns it. This is intended for use when the\n    --  expansion of an expression needs to repeat part of it. For example,\n@@ -343,26 +344,35 @@ package Exp_Util is\n    --  expression and the returned result then become references to this saved\n    --  value. Exp must be analyzed on entry. On return, Exp is analyzed, but\n    --  the caller is responsible for analyzing the returned copy after it is\n-   --  attached to the tree. The Name_Req flag is set to ensure that the result\n-   --  is suitable for use in a context requiring name (e.g. the prefix of an\n-   --  attribute reference).\n+   --  attached to the tree.\n+   --\n+   --  The Name_Req flag is set to ensure that the result is suitable for use\n+   --  in a context requiring a name (for example, the prefix of an attribute\n+   --  reference) (can't this just be a qualification in Ada 2012???).\n+   --\n+   --  The Renaming_Req flag is set to produce an object renaming declaration\n+   --  rather than an object declaration. This is valid only if the expression\n+   --  Exp designates a renamable object. This is used for example in the case\n+   --  of an unchecked deallocation, to make sure the object gets set to null.\n    --\n    --  Note that if there are any run time checks in Exp, these same checks\n    --  will be duplicated in the returned duplicated expression. The two\n    --  following functions allow this behavior to be modified.\n \n    function Duplicate_Subexpr_No_Checks\n-     (Exp      : Node_Id;\n-      Name_Req : Boolean := False) return Node_Id;\n+     (Exp          : Node_Id;\n+      Name_Req     : Boolean := False;\n+      Renaming_Req : Boolean := False) return Node_Id;\n    --  Identical in effect to Duplicate_Subexpr, except that Remove_Checks\n    --  is called on the result, so that the duplicated expression does not\n    --  include checks. This is appropriate for use when Exp, the original\n    --  expression is unconditionally elaborated before the duplicated\n    --  expression, so that there is no need to repeat any checks.\n \n    function Duplicate_Subexpr_Move_Checks\n-     (Exp      : Node_Id;\n-      Name_Req : Boolean := False) return Node_Id;\n+     (Exp          : Node_Id;\n+      Name_Req     : Boolean := False;\n+      Renaming_Req : Boolean := False) return Node_Id;\n    --  Identical in effect to Duplicate_Subexpr, except that Remove_Checks is\n    --  called on Exp after the duplication is complete, so that the original\n    --  expression does not include checks. In this case the result returned\n@@ -808,6 +818,7 @@ package Exp_Util is\n    procedure Remove_Side_Effects\n      (Exp          : Node_Id;\n       Name_Req     : Boolean := False;\n+      Renaming_Req : Boolean := False;\n       Variable_Ref : Boolean := False);\n    --  Given the node for a subexpression, this function replaces the node if\n    --  necessary by an equivalent subexpression that is guaranteed to be side\n@@ -816,10 +827,12 @@ package Exp_Util is\n    --  to which Exp is attached. Exp must be analyzed and resolved before the\n    --  call and is analyzed and resolved on return. Name_Req may only be set to\n    --  True if Exp has the form of a name, and the effect is to guarantee that\n-   --  any replacement maintains the form of name. If Variable_Ref is set to\n-   --  TRUE, a variable is considered as side effect (used in implementing\n-   --  Force_Evaluation). Note: after call to Remove_Side_Effects, it is\n-   --  safe to call New_Copy_Tree to obtain a copy of the resulting expression.\n+   --  any replacement maintains the form of name. If Renaming_Req is set to\n+   --  TRUE, the routine produces an object renaming reclaration capturing the\n+   --  expression. If Variable_Ref is set to TRUE, a variable is considered as\n+   --  side effect (used in implementing Force_Evaluation). Note: after call to\n+   --  Remove_Side_Effects, it is safe to call New_Copy_Tree to obtain a copy\n+   --  of the resulting expression.\n \n    function Represented_As_Scalar (T : Entity_Id) return Boolean;\n    --  Returns True iff the implementation of this type in code generation"}, {"sha": "f056f3985d163db4860f6a5cc1b76ecf3390f445", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a43f6434dbf7bd6aa5f1a123c917b2f5f91e75ae/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a43f6434dbf7bd6aa5f1a123c917b2f5f91e75ae/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=a43f6434dbf7bd6aa5f1a123c917b2f5f91e75ae", "patch": "@@ -2097,7 +2097,12 @@ package Opt is\n    --  GNAT\n    --  True if compiling in GNAT system mode (-gnatg switch)\n \n-   --  Setting this switch has the following effects\n+   --  Setting this switch has the following effects on the language that is\n+   --  accepted. Note that several of the following have the effect of changing\n+   --  an error to a warning. But warnings are usually treated as fatal errors\n+   --  in -gnatg mode, so to actually take advantage of such a change, it is\n+   --  necessary to add an explicit pragma Warnings (Off) in the source and\n+   --  this requires clear documentation of why this is necessary.\n \n    --    The identifier character set is set to 'n' (7-bit ASCII)\n \n@@ -2141,13 +2146,11 @@ package Opt is\n \n    --    Returning objects of limited types is allowed\n \n-   --    All entities are considered known to Known_But_Invisible\n-\n    --    Non-static call in preelaborated unit give a warning, not an error\n \n    --    Warnings on possible elaboration errors are suppressed\n \n-   --    Warning about packing being ignored is suppressed\n+   --    Warnings about packing being ignored are suppressed\n \n    --    Warnings in internal units are not suppressed (they normally are)\n "}, {"sha": "4a5bafcbc8cb1d8b535bad0f1f008296baeba78d", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a43f6434dbf7bd6aa5f1a123c917b2f5f91e75ae/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a43f6434dbf7bd6aa5f1a123c917b2f5f91e75ae/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=a43f6434dbf7bd6aa5f1a123c917b2f5f91e75ae", "patch": "@@ -4462,14 +4462,14 @@ package body Sem_Ch8 is\n       --  for that processing\n \n       function Known_But_Invisible (E : Entity_Id) return Boolean;\n-      --  This function determines whether the entity E (which is not\n-      --  visible) can reasonably be considered to be known to the writer\n-      --  of the reference. This is a heuristic test, used only for the\n-      --  purposes of figuring out whether we prefer to complain that an\n-      --  entity is undefined or invisible (and identify the declaration\n-      --  of the invisible entity in the latter case). The point here is\n-      --  that we don't want to complain that something is invisible and\n-      --  then point to something entirely mysterious to the writer.\n+      --  This function determines whether a reference to the entity E, which\n+      --  is not visible, can reasonably be considered to be known to the\n+      --  writer of the reference. This is a heuristic test, used only for\n+      --  the purposes of figuring out whether we prefer to complain that an\n+      --  entity is undefined or invisible (and identify the declaration of\n+      --  the invisible entity in the latter case). The point here is that we\n+      --  don't want to complain that something is invisible and then point to\n+      --  something entirely mysterious to the writer.\n \n       procedure Nvis_Messages;\n       --  Called if there are no visible entries for N, but there is at least\n@@ -4608,7 +4608,12 @@ package body Sem_Ch8 is\n          elsif not Comes_From_Source (E) then\n             return False;\n \n-         --  In gnat internal mode, we consider all entities known\n+         --  In gnat internal mode, we consider all entities known. The\n+         --  historical reason behind this discrepancy is not known??? But the\n+         --  only effect is to modify the error message given, so it is not\n+         --  critical. Since it only affects the exact wording of error\n+         --  messages in illegal programs, we do not mention this as an\n+         --  effect of -gnatg, since it is not a language modification.\n \n          elsif GNAT_Mode then\n             return True;"}]}