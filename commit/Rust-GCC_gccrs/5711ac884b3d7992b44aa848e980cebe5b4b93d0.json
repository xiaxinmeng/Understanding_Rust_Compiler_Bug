{"sha": "5711ac884b3d7992b44aa848e980cebe5b4b93d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTcxMWFjODg0YjNkNzk5MmI0NGFhODQ4ZTk4MGNlYmU1YjRiOTNkMA==", "commit": {"author": {"name": "Naveen H.S", "email": "Naveen.Hurugalawadi@caviumnetworks.com", "date": "2015-11-12T05:34:54Z"}, "committer": {"name": "Naveen H.S", "email": "naveenh@gcc.gnu.org", "date": "2015-11-12T05:34:54Z"}, "message": "fold-const.c (fold_binary_loc): Move Convert A/B/C to A/(B*C) to match.pd.\n\n2015-11-12  Naveen H.S  <Naveen.Hurugalawadi@caviumnetworks.com>\n\n\t* fold-const.c (fold_binary_loc) : Move Convert A/B/C to A/(B*C)\n\tto match.pd.\n\tMove Convert A/(B/C) to (A/B)*C to match.pd.\n\tMove Convert C1/(X*C2) into (C1/C2)/X to match.pd.\n\tMove Optimize (X & (-A)) / A where A is a power of 2, to\n\tX >> log2(A) to match.pd.\n\n\t* match.pd (rdiv (rdiv:s @0 @1) @2): New simplifier.\n\t(rdiv @0 (rdiv:s @1 @2)): New simplifier.\n\t(div (convert? (bit_and @0 INTEGER_CST@1)) INTEGER_CST@2):\n\tNew simplifier.\n\t(rdiv REAL_CST@0 (mult @1 REAL_CST@2)): New simplifier.\n\nFrom-SVN: r230204", "tree": {"sha": "6d95b42299d95761df6ad4dfed0acf92443db35e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d95b42299d95761df6ad4dfed0acf92443db35e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5711ac884b3d7992b44aa848e980cebe5b4b93d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5711ac884b3d7992b44aa848e980cebe5b4b93d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5711ac884b3d7992b44aa848e980cebe5b4b93d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5711ac884b3d7992b44aa848e980cebe5b4b93d0/comments", "author": null, "committer": null, "parents": [{"sha": "ab68f865629684815e987810a3842ce98b1122c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab68f865629684815e987810a3842ce98b1122c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab68f865629684815e987810a3842ce98b1122c3"}], "stats": {"total": 91, "additions": 46, "deletions": 45}, "files": [{"sha": "5c0d9f67ad8f6ad6376f6f47381db343c329eace", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5711ac884b3d7992b44aa848e980cebe5b4b93d0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5711ac884b3d7992b44aa848e980cebe5b4b93d0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5711ac884b3d7992b44aa848e980cebe5b4b93d0", "patch": "@@ -1,3 +1,18 @@\n+2015-11-12  Naveen H.S  <Naveen.Hurugalawadi@caviumnetworks.com>\n+\n+\t* fold-const.c (fold_binary_loc) : Move Convert A/B/C to A/(B*C)\n+\tto match.pd.\n+\tMove Convert A/(B/C) to (A/B)*C to match.pd.\n+\tMove Convert C1/(X*C2) into (C1/C2)/X to match.pd.\n+\tMove Optimize (X & (-A)) / A where A is a power of 2, to\n+\tX >> log2(A) to match.pd.\n+       \n+\t* match.pd (rdiv (rdiv:s @0 @1) @2): New simplifier.\n+\t(rdiv @0 (rdiv:s @1 @2)): New simplifier.\n+\t(div (convert? (bit_and @0 INTEGER_CST@1)) INTEGER_CST@2):\n+\tNew simplifier.\n+\t(rdiv REAL_CST@0 (mult @1 REAL_CST@2)): New simplifier.\n+\n 2015-11-12  Charles Baylis  <charles.baylis@linaro.org>\n \n \t* config/arm/neon.md: (neon_vld2_lane<mode>): Remove unused max"}, {"sha": "9114dec074adaacccffae8c44751d1a4fd05a498", "filename": "gcc/fold-const.c", "status": "modified", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5711ac884b3d7992b44aa848e980cebe5b4b93d0/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5711ac884b3d7992b44aa848e980cebe5b4b93d0/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=5711ac884b3d7992b44aa848e980cebe5b4b93d0", "patch": "@@ -10195,54 +10195,9 @@ fold_binary_loc (location_t loc,\n \treturn fold_build2_loc (loc, RDIV_EXPR, type,\n \t\t\t    negate_expr (arg0),\n \t\t\t    TREE_OPERAND (arg1, 0));\n-\n-      /* Convert A/B/C to A/(B*C).  */\n-      if (flag_reciprocal_math\n-\t  && TREE_CODE (arg0) == RDIV_EXPR)\n-\treturn fold_build2_loc (loc, RDIV_EXPR, type, TREE_OPERAND (arg0, 0),\n-\t\t\t    fold_build2_loc (loc, MULT_EXPR, type,\n-\t\t\t\t\t TREE_OPERAND (arg0, 1), arg1));\n-\n-      /* Convert A/(B/C) to (A/B)*C.  */\n-      if (flag_reciprocal_math\n-\t  && TREE_CODE (arg1) == RDIV_EXPR)\n-\treturn fold_build2_loc (loc, MULT_EXPR, type,\n-\t\t\t    fold_build2_loc (loc, RDIV_EXPR, type, arg0,\n-\t\t\t\t\t TREE_OPERAND (arg1, 0)),\n-\t\t\t    TREE_OPERAND (arg1, 1));\n-\n-      /* Convert C1/(X*C2) into (C1/C2)/X.  */\n-      if (flag_reciprocal_math\n-\t  && TREE_CODE (arg1) == MULT_EXPR\n-\t  && TREE_CODE (arg0) == REAL_CST\n-\t  && TREE_CODE (TREE_OPERAND (arg1, 1)) == REAL_CST)\n-\t{\n-\t  tree tem = const_binop (RDIV_EXPR, arg0,\n-\t\t\t\t  TREE_OPERAND (arg1, 1));\n-\t  if (tem)\n-\t    return fold_build2_loc (loc, RDIV_EXPR, type, tem,\n-\t\t\t\tTREE_OPERAND (arg1, 0));\n-\t}\n-\n       return NULL_TREE;\n \n     case TRUNC_DIV_EXPR:\n-      /* Optimize (X & (-A)) / A where A is a power of 2,\n-\t to X >> log2(A) */\n-      if (TREE_CODE (arg0) == BIT_AND_EXPR\n-\t  && !TYPE_UNSIGNED (type) && TREE_CODE (arg1) == INTEGER_CST\n-\t  && integer_pow2p (arg1) && tree_int_cst_sgn (arg1) > 0)\n-\t{\n-\t  tree sum = fold_binary_loc (loc, PLUS_EXPR, TREE_TYPE (arg1),\n-\t\t\t\t      arg1, TREE_OPERAND (arg0, 1));\n-\t  if (sum && integer_zerop (sum)) {\n-\t    tree pow2 = build_int_cst (integer_type_node,\n-\t\t\t\t       wi::exact_log2 (arg1));\n-\t    return fold_build2_loc (loc, RSHIFT_EXPR, type,\n-\t\t\t\t    TREE_OPERAND (arg0, 0), pow2);\n-\t  }\n-\t}\n-\n       /* Fall through */\n       \n     case FLOOR_DIV_EXPR:"}, {"sha": "d552bebdafebd07642e5f4d4178e1e6146567a68", "filename": "gcc/match.pd", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5711ac884b3d7992b44aa848e980cebe5b4b93d0/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5711ac884b3d7992b44aa848e980cebe5b4b93d0/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=5711ac884b3d7992b44aa848e980cebe5b4b93d0", "patch": "@@ -247,6 +247,28 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n  (if (!HONOR_SNANS (type))\n   (negate @0)))\n \n+(if (flag_reciprocal_math)\n+ /* Convert (A/B)/C to A/(B*C)  */\n+ (simplify\n+  (rdiv (rdiv:s @0 @1) @2)\n+   (rdiv @0 (mult @1 @2)))\n+\n+ /* Convert A/(B/C) to (A/B)*C  */\n+ (simplify\n+  (rdiv @0 (rdiv:s @1 @2))\n+   (mult (rdiv @0 @1) @2)))\n+\n+/* Optimize (X & (-A)) / A where A is a power of 2, to X >> log2(A) */\n+(for div (trunc_div ceil_div floor_div round_div exact_div)\n+ (simplify\n+  (div (convert? (bit_and @0 INTEGER_CST@1)) INTEGER_CST@2)\n+  (if (integer_pow2p (@2)\n+       && tree_int_cst_sgn (@2) > 0\n+       && wi::add (@2, @1) == 0\n+       && tree_nop_conversion_p (type, TREE_TYPE (@0)))\n+   (rshift (convert @0) { build_int_cst (integer_type_node,\n+\t\t\t\t\t wi::exact_log2 (@2)); }))))\n+\n /* If ARG1 is a constant, we can convert this to a multiply by the\n    reciprocal.  This does not have the same rounding properties,\n    so only do this if -freciprocal-math.  We can actually\n@@ -464,6 +486,15 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n     (if (tem)\n      (rdiv { tem; } @1)))))\n \n+/* Convert C1/(X*C2) into (C1/C2)/X  */\n+(simplify\n+ (rdiv REAL_CST@0 (mult @1 REAL_CST@2))\n+  (if (flag_reciprocal_math)\n+   (with\n+    { tree tem = const_binop (RDIV_EXPR, type, @0, @2); }\n+    (if (tem)\n+     (rdiv { tem; } @1)))))\n+\n /* Simplify ~X & X as zero.  */\n (simplify\n  (bit_and:c (convert? @0) (convert? (bit_not @0)))"}]}