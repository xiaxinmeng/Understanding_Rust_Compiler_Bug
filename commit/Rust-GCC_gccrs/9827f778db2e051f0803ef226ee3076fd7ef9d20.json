{"sha": "9827f778db2e051f0803ef226ee3076fd7ef9d20", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTgyN2Y3NzhkYjJlMDUxZjA4MDNlZjIyNmVlMzA3NmZkN2VmOWQyMA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-11-27T22:09:10Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-11-27T22:09:10Z"}, "message": "unroll.c (loop_iterations): Move last change ...\n\n        * unroll.c (loop_iterations): Move last change ...\n        * doloop.c (doloop_modify_runtime): ... here.\n\nFrom-SVN: r47387", "tree": {"sha": "dff365973b7e8ce8692d894aee674e1c1466698c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dff365973b7e8ce8692d894aee674e1c1466698c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9827f778db2e051f0803ef226ee3076fd7ef9d20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9827f778db2e051f0803ef226ee3076fd7ef9d20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9827f778db2e051f0803ef226ee3076fd7ef9d20", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9827f778db2e051f0803ef226ee3076fd7ef9d20/comments", "author": null, "committer": null, "parents": [{"sha": "ec3fba5614d0ac97acf5a60164a4fdc0ad21791f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec3fba5614d0ac97acf5a60164a4fdc0ad21791f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec3fba5614d0ac97acf5a60164a4fdc0ad21791f"}], "stats": {"total": 80, "additions": 45, "deletions": 35}, "files": [{"sha": "577c2a393bf150e7a129e3f914bc148d41246242", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9827f778db2e051f0803ef226ee3076fd7ef9d20/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9827f778db2e051f0803ef226ee3076fd7ef9d20/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9827f778db2e051f0803ef226ee3076fd7ef9d20", "patch": "@@ -1,3 +1,8 @@\n+2001-11-17  Richard Henderson  <rth@redhat.com>\n+\n+\t* unroll.c (loop_iterations): Move last change ...\n+\t* doloop.c (doloop_modify_runtime): ... here.\n+\n 2001-11-17  Corey Minyard  <minyard@acm.org>\n \t    Richard Henderson  <rth@redhat.com>\n "}, {"sha": "be232d63e6c85fcf6f93f7e23fc61ba436d7a5c2", "filename": "gcc/doloop.c", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9827f778db2e051f0803ef226ee3076fd7ef9d20/gcc%2Fdoloop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9827f778db2e051f0803ef226ee3076fd7ef9d20/gcc%2Fdoloop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoloop.c?ref=9827f778db2e051f0803ef226ee3076fd7ef9d20", "patch": "@@ -596,6 +596,46 @@ doloop_modify_runtime (loop, iterations_max,\n \t\t\t      copy_rtx (neg_inc ? final_value : initial_value),\n \t\t\t      NULL_RTX, unsigned_p, OPTAB_LIB_WIDEN);\n \n+  /* Some code transformations can result in code akin to\n+\n+\t  tmp = i + 1;\n+\t  ...\n+\t  goto scan_start;\n+\ttop:\n+\t  tmp = tmp + 1;\n+\tscan_start:\n+\t  i = tmp;\n+\t  if (i < n) goto top;\n+\n+     We'll have already detected this form of loop in scan_loop,\n+     and set loop->top and loop->scan_start appropriately.\n+\n+     In this situation, we skip the increment the first time through\n+     the loop, which results in an incorrect estimate of the number\n+     of iterations.  Adjust the difference to compensate.  */\n+  /* ??? Logically, it would seem this belongs in loop_iterations.\n+     However, this causes regressions e.g. on x86 execute/20011008-3.c,\n+     so I do not believe we've properly characterized the exact nature\n+     of the problem.  In the meantime, this fixes execute/20011126-2.c\n+     on ia64 and some Ada front end miscompilation on ppc.  */\n+\n+  if (loop->scan_start)\n+    {\n+      struct loop_ivs *ivs = LOOP_IVS (loop);\n+      struct iv_class *bl\n+\t= REG_IV_CLASS (ivs, REGNO (loop_info->iteration_var));\n+\n+      if (INSN_LUID (bl->biv->insn) < INSN_LUID (loop->scan_start))\n+\t{\n+\t  if (loop_dump_stream)\n+\t    fprintf (loop_dump_stream,\n+\t         \"Doloop: Basic induction var skips initial incr.\\n\");\n+\n+\t  diff = expand_simple_binop (mode, PLUS, diff, increment, diff,\n+\t\t\t\t      unsigned_p, OPTAB_LIB_WIDEN);\n+\t}\n+    }\n+\n   if (abs_inc * loop_info->unroll_number != 1)\n     {\n       int shift_count;"}, {"sha": "4b7dd974925a7fead07be02b46cc7cd2bb17fa1a", "filename": "gcc/unroll.c", "status": "modified", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9827f778db2e051f0803ef226ee3076fd7ef9d20/gcc%2Funroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9827f778db2e051f0803ef226ee3076fd7ef9d20/gcc%2Funroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funroll.c?ref=9827f778db2e051f0803ef226ee3076fd7ef9d20", "patch": "@@ -3706,41 +3706,6 @@ loop_iterations (loop)\n   if (initial_value == 0)\n     return 0;\n \n-  /* Some code transformations can result in code akin to\n-\n-\t  tmp = i + 1;\n-\t  ...\n-\t  goto scan_start;\n-\ttop:\n-\t  tmp = tmp + 1;\n-\tscan_start:\n-\t  i = tmp;\n-\t  if (i < n) goto top;\n-\n-     We'll have already detected this form of loop in scan_loop,\n-     and set loop->top and loop->scan_start appropriately.\n-\n-     In this situation, we skip the increment the first time through\n-     the loop, which results in an incorrect estimate of the number\n-     of iterations.  Adjust the initial value to compensate.  */\n-\n-  if (loop->scan_start && loop->cont\n-      && INSN_LUID (loop->scan_start) < INSN_LUID (loop->cont)\n-      && INSN_LUID (bl->biv->insn) < INSN_LUID (loop->scan_start))\n-    {\n-      if (loop_dump_stream)\n-\tfprintf (loop_dump_stream,\n-\t         \"Loop iterations: Basic induction var skips initial incr.\\n\");\n-      if (GET_CODE (increment) != CONST_INT)\n-\t{\n-\t  if (loop_dump_stream)\n-\t    fprintf (loop_dump_stream,\n-\t\t     \"Loop iterations: Can't adjust with non-constant incr.\\n\");\n-\t  return 0;\n-\t}\n-      initial_value = plus_constant (initial_value, -INTVAL (increment));\n-    }\n-\n   unsigned_p = 0;\n   off_by_one = 0;\n   switch (comparison_code)"}]}