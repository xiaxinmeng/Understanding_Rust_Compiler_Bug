{"sha": "02d8ab3e4e2f3d9dc12157a98c976d6698e71e29", "node_id": "C_kwDOANBUbNoAKDAyZDhhYjNlNGUyZjNkOWRjMTIxNTdhOThjOTc2ZDY2OThlNzFlMjk", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2023-02-16T22:41:24Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2023-02-20T14:17:12Z"}, "message": "c++: ICE with redundant capture [PR108829]\n\nHere we crash in is_capture_proxy:\n\n  /* Location wrappers should be stripped or otherwise handled by the\n     caller before using this predicate.  */\n  gcc_checking_assert (!location_wrapper_p (decl));\n\nWe only crash with the redundant capture:\n\n  int abyPage = [=, abyPage] { ... }\n\nbecause prune_lambda_captures is only called when there was a default\ncapture, and with [=] only abyPage won't be in LAMBDA_EXPR_CAPTURE_LIST.\n\nThe problem is that LAMBDA_CAPTURE_EXPLICIT_P wasn't propagated\ncorrectly and so var_to_maybe_prune proceeded where it shouldn't.\n\nCo-Authored by: Patrick Palka <ppalka@redhat.com>\n\n\tPR c++/108829\n\ngcc/cp/ChangeLog:\n\n\t* pt.cc (prepend_one_capture): Set LAMBDA_CAPTURE_EXPLICIT_P.\n\t(tsubst_lambda_expr): Pass LAMBDA_CAPTURE_EXPLICIT_P to\n\tprepend_one_capture.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp0x/lambda/lambda-108829-2.C: New test.\n\t* g++.dg/cpp0x/lambda/lambda-108829.C: New test.", "tree": {"sha": "aab79f1511482abb51b2e431eafed5bcdde86a1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aab79f1511482abb51b2e431eafed5bcdde86a1e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/02d8ab3e4e2f3d9dc12157a98c976d6698e71e29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02d8ab3e4e2f3d9dc12157a98c976d6698e71e29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02d8ab3e4e2f3d9dc12157a98c976d6698e71e29", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02d8ab3e4e2f3d9dc12157a98c976d6698e71e29/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63471c5008819bbf6ec32a6f4d8701fe57b96fa9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63471c5008819bbf6ec32a6f4d8701fe57b96fa9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63471c5008819bbf6ec32a6f4d8701fe57b96fa9"}], "stats": {"total": 31, "additions": 28, "deletions": 3}, "files": [{"sha": "1a071e95004dcf818fe7372e5771cdc06144cf29", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02d8ab3e4e2f3d9dc12157a98c976d6698e71e29/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02d8ab3e4e2f3d9dc12157a98c976d6698e71e29/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=02d8ab3e4e2f3d9dc12157a98c976d6698e71e29", "patch": "@@ -19870,10 +19870,11 @@ tsubst_non_call_postfix_expression (tree t, tree args,\n \n /* Subroutine of tsubst_lambda_expr: add the FIELD/INIT capture pair to the\n    LAMBDA_EXPR_CAPTURE_LIST passed in LIST.  Do deduction for a previously\n-   dependent init-capture.  */\n+   dependent init-capture.  EXPLICIT_P is true if the original list had\n+   explicit captures.  */\n \n static void\n-prepend_one_capture (tree field, tree init, tree &list,\n+prepend_one_capture (tree field, tree init, tree &list, bool explicit_p,\n \t\t     tsubst_flags_t complain)\n {\n   if (tree auto_node = type_uses_auto (TREE_TYPE (field)))\n@@ -19893,6 +19894,7 @@ prepend_one_capture (tree field, tree init, tree &list,\n       cp_apply_type_quals_to_decl (cp_type_quals (type), field);\n     }\n   list = tree_cons (field, init, list);\n+  LAMBDA_CAPTURE_EXPLICIT_P (list) = explicit_p;\n }\n \n /* T is a LAMBDA_EXPR.  Generate a new LAMBDA_EXPR for the current\n@@ -19982,12 +19984,13 @@ tsubst_lambda_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t    prepend_one_capture (TREE_VEC_ELT (field, i),\n \t\t\t\t TREE_VEC_ELT (init, i),\n \t\t\t\t LAMBDA_EXPR_CAPTURE_LIST (r),\n+\t\t\t\t LAMBDA_CAPTURE_EXPLICIT_P (cap),\n \t\t\t\t complain);\n \t}\n       else\n \t{\n \t  prepend_one_capture (field, init, LAMBDA_EXPR_CAPTURE_LIST (r),\n-\t\t\t       complain);\n+\t\t\t       LAMBDA_CAPTURE_EXPLICIT_P (cap), complain);\n \n \t  if (id_equal (DECL_NAME (field), \"__this\"))\n \t    LAMBDA_EXPR_THIS_CAPTURE (r) = field;"}, {"sha": "4e24470514d0aa33116a25256b4f274997b7951b", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-108829-2.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02d8ab3e4e2f3d9dc12157a98c976d6698e71e29/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-108829-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02d8ab3e4e2f3d9dc12157a98c976d6698e71e29/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-108829-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-108829-2.C?ref=02d8ab3e4e2f3d9dc12157a98c976d6698e71e29", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/108829\n+// { dg-do compile { target c++11 } }\n+\n+template<int, class... Ts>\n+void f(Ts... ts) {\n+  constexpr int IDX_PAGE_SIZE = 4096;\n+  int abyPage = [=, ts...] { return IDX_PAGE_SIZE; }();  // { dg-error \"redundant\" }\n+}\n+void h() {\n+  f<1>(0, 1);\n+}"}, {"sha": "e621a0d14d06a79604e24faa4e0e105ec95be32e", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-108829.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02d8ab3e4e2f3d9dc12157a98c976d6698e71e29/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-108829.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02d8ab3e4e2f3d9dc12157a98c976d6698e71e29/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-108829.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-108829.C?ref=02d8ab3e4e2f3d9dc12157a98c976d6698e71e29", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/108829\n+// { dg-do compile { target c++11 } }\n+\n+template <int>\n+void f(void) {\n+  constexpr int IDX_PAGE_SIZE = 4096;\n+  int abyPage = [=, abyPage] { return IDX_PAGE_SIZE; }(); // { dg-error \"redundant\" }\n+}\n+void h() {\n+  f<1>();\n+}"}]}