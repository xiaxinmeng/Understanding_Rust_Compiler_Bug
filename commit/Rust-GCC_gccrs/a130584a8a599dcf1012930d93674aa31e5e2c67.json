{"sha": "a130584a8a599dcf1012930d93674aa31e5e2c67", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTEzMDU4NGE4YTU5OWRjZjEwMTI5MzBkOTM2NzRhYTMxZTVlMmM2Nw==", "commit": {"author": {"name": "Sebastian Pop", "email": "sebastian.pop@amd.com", "date": "2011-02-05T01:39:20Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2011-02-05T01:39:20Z"}, "message": "Fix PR46194: fix the computation of distance vectors.\n\n2011-02-04  Sebastian Pop  <sebastian.pop@amd.com>\n\n\tPR tree-optimization/46194\n\t* tree-data-ref.c (analyze_miv_subscript): Remove comment.\n\t(build_classic_dist_vector_1): Do not represent classic distance\n\tvectors when the access functions are variating in different loops.\n\n\t* gcc.dg/autopar/pr46194.c: New.\n\nFrom-SVN: r169847", "tree": {"sha": "0eff927ab618b60dcc1968581ea3e2ef79b0a9eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0eff927ab618b60dcc1968581ea3e2ef79b0a9eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a130584a8a599dcf1012930d93674aa31e5e2c67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a130584a8a599dcf1012930d93674aa31e5e2c67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a130584a8a599dcf1012930d93674aa31e5e2c67", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a130584a8a599dcf1012930d93674aa31e5e2c67/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a44b6422a324ad45dc9e84295e90ac79129afbeb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a44b6422a324ad45dc9e84295e90ac79129afbeb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a44b6422a324ad45dc9e84295e90ac79129afbeb"}], "stats": {"total": 66, "additions": 42, "deletions": 24}, "files": [{"sha": "39baf065e5e10610eea6855221d6545e8da8e784", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a130584a8a599dcf1012930d93674aa31e5e2c67/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a130584a8a599dcf1012930d93674aa31e5e2c67/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a130584a8a599dcf1012930d93674aa31e5e2c67", "patch": "@@ -1,3 +1,10 @@\n+2011-02-04  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\tPR tree-optimization/46194\n+\t* tree-data-ref.c (analyze_miv_subscript): Remove comment.\n+\t(build_classic_dist_vector_1): Do not represent classic distance\n+\tvectors when the access functions are variating in different loops.\n+\n 2011-02-04  Joseph Myers  <joseph@codesourcery.com>\n \n \t* config/mips/iris6.opt: New."}, {"sha": "226fa605572928ca0ef52c3cad0427e4ab3751f7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a130584a8a599dcf1012930d93674aa31e5e2c67/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a130584a8a599dcf1012930d93674aa31e5e2c67/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a130584a8a599dcf1012930d93674aa31e5e2c67", "patch": "@@ -1,3 +1,8 @@\n+2011-02-04  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\tPR tree-optimization/46194\n+\t* gcc.dg/autopar/pr46194.c: New.\n+\n 2011-02-04  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR tree-optimization/43695"}, {"sha": "574d6e6722c075056b6b2f30f51a4ba789adc863", "filename": "gcc/testsuite/gcc.dg/autopar/pr46194.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a130584a8a599dcf1012930d93674aa31e5e2c67/gcc%2Ftestsuite%2Fgcc.dg%2Fautopar%2Fpr46194.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a130584a8a599dcf1012930d93674aa31e5e2c67/gcc%2Ftestsuite%2Fgcc.dg%2Fautopar%2Fpr46194.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fautopar%2Fpr46194.c?ref=a130584a8a599dcf1012930d93674aa31e5e2c67", "patch": "@@ -0,0 +1,24 @@\n+/* PR tree-optimization/46194 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O -ftree-parallelize-loops=2 -fdump-tree-parloops-details\" } */\n+\n+#define N 1000\n+int a[N];\n+\n+int foo (void)\n+{\n+  int j;\n+  int i;\n+\n+  /* This is not blocked as it is not profitable.  */\n+  for (i = 0; i < N; i++)\n+    for (j = 0; j < N; j++)\n+      a[j] = a[i] + 1;\n+\n+  return a[0];\n+}\n+\n+/* This loop cannot be parallelized due to a dependence.  */\n+\n+/* { dg-final { scan-tree-dump-times \"SUCCESS: may be parallelized\" 0 \"parloops\" } } */\n+/* { dg-final { cleanup-tree-dump \"parloops\" } } */"}, {"sha": "54cb46c9464db191ff719f4af02e01f6e6897180", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 6, "deletions": 24, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a130584a8a599dcf1012930d93674aa31e5e2c67/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a130584a8a599dcf1012930d93674aa31e5e2c67/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=a130584a8a599dcf1012930d93674aa31e5e2c67", "patch": "@@ -2681,14 +2681,6 @@ analyze_miv_subscript (tree chrec_a,\n \t\t       tree *last_conflicts,\n \t\t       struct loop *loop_nest)\n {\n-  /* FIXME:  This is a MIV subscript, not yet handled.\n-     Example: (A[{1, +, 1}_1] vs. A[{1, +, 1}_2]) that comes from\n-     (A[i] vs. A[j]).\n-\n-     In the SIV test we had to solve a Diophantine equation with two\n-     variables.  In the MIV case we have to solve a Diophantine\n-     equation with 2*n variables (if the subscript uses n IVs).\n-  */\n   tree type, difference;\n \n   dependence_stats.num_miv++;\n@@ -2960,29 +2952,19 @@ build_classic_dist_vector_1 (struct data_dependence_relation *ddr,\n \t  && TREE_CODE (access_fn_b) == POLYNOMIAL_CHREC)\n \t{\n \t  int dist, index;\n-\t  int index_a = index_in_loop_nest (CHREC_VARIABLE (access_fn_a),\n-\t\t\t\t\t    DDR_LOOP_NEST (ddr));\n-\t  int index_b = index_in_loop_nest (CHREC_VARIABLE (access_fn_b),\n-\t\t\t\t\t    DDR_LOOP_NEST (ddr));\n-\n-\t  /* The dependence is carried by the outermost loop.  Example:\n-\t     | loop_1\n-\t     |   A[{4, +, 1}_1]\n-\t     |   loop_2\n-\t     |     A[{5, +, 1}_2]\n-\t     |   endloop_2\n-\t     | endloop_1\n-\t     In this case, the dependence is carried by loop_1.  */\n-\t  index = index_a < index_b ? index_a : index_b;\n-\t  *index_carry = MIN (index, *index_carry);\n+\t  int var_a = CHREC_VARIABLE (access_fn_a);\n+\t  int var_b = CHREC_VARIABLE (access_fn_b);\n \n-\t  if (chrec_contains_undetermined (SUB_DISTANCE (subscript)))\n+\t  if (var_a != var_b\n+\t      || chrec_contains_undetermined (SUB_DISTANCE (subscript)))\n \t    {\n \t      non_affine_dependence_relation (ddr);\n \t      return false;\n \t    }\n \n \t  dist = int_cst_value (SUB_DISTANCE (subscript));\n+\t  index = index_in_loop_nest (var_a, DDR_LOOP_NEST (ddr));\n+\t  *index_carry = MIN (index, *index_carry);\n \n \t  /* This is the subscript coupling test.  If we have already\n \t     recorded a distance for this loop (a distance coming from"}]}