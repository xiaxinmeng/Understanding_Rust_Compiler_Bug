{"sha": "b5a28d803116ee10c88e0f762fdc427974b9b4fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjVhMjhkODAzMTE2ZWUxMGM4OGUwZjc2MmZkYzQyNzk3NGI5YjRmZA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-03-18T15:31:35Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-03-18T15:31:35Z"}, "message": "PR c++/70147 - handle primary virtual bases\n\n\t* class.c (vptr_via_virtual_p): New.\n\t(most_primary_binfo): Factor out of build_rtti_vtbl_entries.\n\t* cp-ubsan.c (cp_ubsan_dfs_initialize_vtbl_ptrs): Don't clear\n\ta vptr from any virtual base in a not-in-charge 'structor.\n\nFrom-SVN: r234335", "tree": {"sha": "3ddc03dbda1ee4d2d03b3baf2c409380bbc15d4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ddc03dbda1ee4d2d03b3baf2c409380bbc15d4e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b5a28d803116ee10c88e0f762fdc427974b9b4fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5a28d803116ee10c88e0f762fdc427974b9b4fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5a28d803116ee10c88e0f762fdc427974b9b4fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5a28d803116ee10c88e0f762fdc427974b9b4fd/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bf08acdaa570ae61e86b92660ddee07d20948919", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf08acdaa570ae61e86b92660ddee07d20948919", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf08acdaa570ae61e86b92660ddee07d20948919"}], "stats": {"total": 148, "additions": 131, "deletions": 17}, "files": [{"sha": "9e1dbbb29df02b948407437b51e641828a9dd801", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5a28d803116ee10c88e0f762fdc427974b9b4fd/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5a28d803116ee10c88e0f762fdc427974b9b4fd/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b5a28d803116ee10c88e0f762fdc427974b9b4fd", "patch": "@@ -1,5 +1,11 @@\n 2016-03-18  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/70147\n+\t* class.c (vptr_via_virtual_p): New.\n+\t(most_primary_binfo): Factor out of build_rtti_vtbl_entries.\n+\t* cp-ubsan.c (cp_ubsan_dfs_initialize_vtbl_ptrs): Don't clear\n+\ta vptr from any virtual base in a not-in-charge 'structor.\n+\n \t* decl.c (build_clobber_this): Factor out of\n \tstart_preparsed_function and begin_destructor_body.  Handle\n \tvirtual bases better."}, {"sha": "98cbab5a00f119e94b32cbdaf1ae8a47a31d887e", "filename": "gcc/cp/class.c", "status": "modified", "additions": 35, "deletions": 11, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5a28d803116ee10c88e0f762fdc427974b9b4fd/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5a28d803116ee10c88e0f762fdc427974b9b4fd/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=b5a28d803116ee10c88e0f762fdc427974b9b4fd", "patch": "@@ -8490,6 +8490,40 @@ get_primary_binfo (tree binfo)\n   return copied_binfo (primary_base, binfo);\n }\n \n+/* As above, but iterate until we reach the binfo that actually provides the\n+   vptr for BINFO.  */\n+\n+static tree\n+most_primary_binfo (tree binfo)\n+{\n+  tree b = binfo;\n+  while (CLASSTYPE_HAS_PRIMARY_BASE_P (BINFO_TYPE (b))\n+\t && !BINFO_LOST_PRIMARY_P (b))\n+    {\n+      tree primary_base = get_primary_binfo (b);\n+      gcc_assert (BINFO_PRIMARY_P (primary_base)\n+\t\t  && BINFO_INHERITANCE_CHAIN (primary_base) == b);\n+      b = primary_base;\n+    }\n+  return b;\n+}\n+\n+/* Returns true if BINFO gets its vptr from a virtual base of the most derived\n+   type.  Note that the virtual inheritance might be above or below BINFO in\n+   the hierarchy.  */\n+\n+bool\n+vptr_via_virtual_p (tree binfo)\n+{\n+  if (TYPE_P (binfo))\n+    binfo = TYPE_BINFO (binfo);\n+  tree primary = most_primary_binfo (binfo);\n+  /* Don't limit binfo_via_virtual, we want to return true when BINFO itself is\n+     a morally virtual base.  */\n+  tree virt = binfo_via_virtual (primary, NULL_TREE);\n+  return virt != NULL_TREE;\n+}\n+\n /* If INDENTED_P is zero, indent to INDENT. Return nonzero.  */\n \n static int\n@@ -9777,17 +9811,7 @@ build_rtti_vtbl_entries (tree binfo, vtbl_init_data* vid)\n \n   /* To find the complete object, we will first convert to our most\n      primary base, and then add the offset in the vtbl to that value.  */\n-  b = binfo;\n-  while (CLASSTYPE_HAS_PRIMARY_BASE_P (BINFO_TYPE (b))\n-\t && !BINFO_LOST_PRIMARY_P (b))\n-    {\n-      tree primary_base;\n-\n-      primary_base = get_primary_binfo (b);\n-      gcc_assert (BINFO_PRIMARY_P (primary_base)\n-\t\t  && BINFO_INHERITANCE_CHAIN (primary_base) == b);\n-      b = primary_base;\n-    }\n+  b = most_primary_binfo (binfo);\n   offset = size_diffop_loc (input_location,\n \t\t\tBINFO_OFFSET (vid->rtti_binfo), BINFO_OFFSET (b));\n "}, {"sha": "6462d8a35dbf56d8fc158cfd422877619ebc60af", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5a28d803116ee10c88e0f762fdc427974b9b4fd/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5a28d803116ee10c88e0f762fdc427974b9b4fd/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=b5a28d803116ee10c88e0f762fdc427974b9b4fd", "patch": "@@ -5677,6 +5677,7 @@ extern void invalidate_class_lookup_cache\t(void);\n extern void maybe_note_name_used_in_class\t(tree, tree);\n extern void note_name_declared_in_class\t\t(tree, tree);\n extern tree get_vtbl_decl_for_binfo\t\t(tree);\n+extern bool vptr_via_virtual_p\t\t\t(tree);\n extern void debug_class\t\t\t\t(tree);\n extern void debug_thunks\t\t\t(tree);\n extern void set_linkage_according_to_type\t(tree, tree);"}, {"sha": "be24a5ca5c8cf650c34ed20f3314254436e3e7da", "filename": "gcc/cp/cp-ubsan.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5a28d803116ee10c88e0f762fdc427974b9b4fd/gcc%2Fcp%2Fcp-ubsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5a28d803116ee10c88e0f762fdc427974b9b4fd/gcc%2Fcp%2Fcp-ubsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-ubsan.c?ref=b5a28d803116ee10c88e0f762fdc427974b9b4fd", "patch": "@@ -283,7 +283,7 @@ cp_ubsan_dfs_initialize_vtbl_ptrs (tree binfo, void *data)\n   if (!TYPE_CONTAINS_VPTR_P (BINFO_TYPE (binfo)))\n     return dfs_skip_bases;\n \n-  if (!BINFO_PRIMARY_P (binfo) || BINFO_VIRTUAL_P (binfo))\n+  if (!BINFO_PRIMARY_P (binfo))\n     {\n       tree base_ptr = TREE_VALUE ((tree) data);\n \n@@ -301,11 +301,10 @@ cp_ubsan_dfs_initialize_vtbl_ptrs (tree binfo, void *data)\n       tree vtbl = build_zero_cst (TREE_TYPE (vtbl_ptr));\n       tree stmt = cp_build_modify_expr (vtbl_ptr, NOP_EXPR, vtbl,\n \t\t\t\t\ttf_warning_or_error);\n-      if (BINFO_VIRTUAL_P (binfo))\n-\tstmt = build3 (COND_EXPR, void_type_node,\n-\t\t       build2 (NE_EXPR, boolean_type_node,\n-\t\t\t       current_in_charge_parm, integer_zero_node),\n-\t\t       stmt, void_node);\n+      if (vptr_via_virtual_p (binfo))\n+\t/* If this vptr comes from a virtual base of the complete object, only\n+\t   clear it if we're in charge of virtual bases.  */\n+\tstmt = build_if_in_charge (stmt);\n       finish_expr_stmt (stmt);\n     }\n "}, {"sha": "4516b1e325653b490e1e0da02b6e10fa4fe4b2a1", "filename": "gcc/testsuite/g++.dg/ubsan/vptr-11.C", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5a28d803116ee10c88e0f762fdc427974b9b4fd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fvptr-11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5a28d803116ee10c88e0f762fdc427974b9b4fd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fvptr-11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fvptr-11.C?ref=b5a28d803116ee10c88e0f762fdc427974b9b4fd", "patch": "@@ -0,0 +1,84 @@\n+// PR c++/70147\n+// { dg-do run }\n+// { dg-options \"-fsanitize=vptr -fno-sanitize-recover=vptr\" }\n+\n+static int ac, ad, bc, bd, cc, cd, dc, dd;\n+struct A\n+{\n+  A ()\n+  {\n+    ac++;\n+  }\n+  virtual void f ()\n+  {\n+  }\n+  __attribute__ ((noinline)) ~ A ();\n+};\n+\n+struct D\n+{\n+  __attribute__ ((noinline)) D (int);\n+  ~D ()\n+  {\n+    dd++;\n+  }\n+};\n+struct B: virtual A, D\n+{\n+  B ():D (1)\n+  {\n+    bc++;\n+  }\n+  virtual void f ()\n+  {\n+  }\n+  ~B ()\n+  {\n+    bd++;\n+  }\n+};\n+\n+struct C: B, virtual A\n+{\n+  C ()\n+  {\n+    cc++;\n+  }\n+  ~C ()\n+  {\n+    cd++;\n+  }\n+};\n+\n+D::D (int x)\n+{\n+  if (x)\n+    throw 1;\n+  dc++;\n+}\n+\n+__attribute__ ((noinline, noclone))\n+void foo (A * p)\n+{\n+  p->f ();\n+}\n+\n+A::~A ()\n+{\n+  foo (this);\n+  ad++;\n+}\n+\n+int\n+main ()\n+{\n+  try\n+    {\n+      C c;\n+    }\n+  catch ( ...)\n+    {\n+    }\n+  if (ac != 1 || ad != 1 || bc || bd || cc || cd || dc || dd)\n+    __builtin_abort ();\n+}"}]}