{"sha": "cc1e5b9ab37880e07285b4a23add86954f1cf0b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2MxZTViOWFiMzc4ODBlMDcyODViNGEyM2FkZDg2OTU0ZjFjZjBiMw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1998-02-11T22:26:23Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-02-11T22:26:23Z"}, "message": "Makefile.in (WARN_CFLAGS): New variable.\n\n\t* Makefile.in (WARN_CFLAGS): New variable.\n\t(bootstrap, bootstrap2, bootstrap3, bootstrap4): Use it.\n\nFrom-SVN: r17862", "tree": {"sha": "100220fdc5e069c76bb91bf79fbc9227cc51c468", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/100220fdc5e069c76bb91bf79fbc9227cc51c468"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc1e5b9ab37880e07285b4a23add86954f1cf0b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc1e5b9ab37880e07285b4a23add86954f1cf0b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc1e5b9ab37880e07285b4a23add86954f1cf0b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc1e5b9ab37880e07285b4a23add86954f1cf0b3/comments", "author": null, "committer": null, "parents": [{"sha": "53949fac1db143ca5b24bb6a2acc28d8afa44e6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53949fac1db143ca5b24bb6a2acc28d8afa44e6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53949fac1db143ca5b24bb6a2acc28d8afa44e6f"}], "stats": {"total": 22, "additions": 16, "deletions": 6}, "files": [{"sha": "283653b8515a0707ce9221d96162e6db6b18cd5c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc1e5b9ab37880e07285b4a23add86954f1cf0b3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc1e5b9ab37880e07285b4a23add86954f1cf0b3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cc1e5b9ab37880e07285b4a23add86954f1cf0b3", "patch": "@@ -1,3 +1,8 @@\n+Wed Feb 11 11:43:34 1998  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* Makefile.in (WARN_CFLAGS): New variable.\n+\t(bootstrap, bootstrap2, bootstrap3, bootstrap4): Use it.\n+\n 1998-02-11  Mark Mitchell  <mmitchell@usa.net>\n \n \t* config/i386/i386.c (reg_mentioned_in_mem): Don't abort when"}, {"sha": "38b6479b6e4542f7763b96ab3a66bb4f87a8ca42", "filename": "gcc/Makefile.in", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc1e5b9ab37880e07285b4a23add86954f1cf0b3/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc1e5b9ab37880e07285b4a23add86954f1cf0b3/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=cc1e5b9ab37880e07285b4a23add86954f1cf0b3", "patch": "@@ -53,12 +53,17 @@ ALLOCA_FINISH = true\n # CFLAGS is for the user to override to, e.g., do a bootstrap with -O2.\n # BOOT_CFLAGS is the value of CFLAGS to pass\n # to the stage2 and stage3 compilations\n+# WARN_CFLAGS are the warning flags to pass to stage2 and stage3.  It is\n+# separate from BOOT_CFLAGS because people tend to override optimization\n+# flags and we'd like them to still have warnings turned on.  They are free\n+# to explicitly turn warnings off if they wish.\n # XCFLAGS is used for most compilations but not when using the GCC just built.\n # TCFLAGS is used for compilations with the GCC just built.\n XCFLAGS =\n TCFLAGS =\n CFLAGS = -g\n BOOT_CFLAGS = -O2 $(CFLAGS)\n+WARN_CFLAGS = -W -Wall\n # These exists to be overridden by the x-* and t-* files, respectively.\n X_CFLAGS =\n T_CFLAGS =\n@@ -2597,21 +2602,21 @@ bootstrap bootstrap-lean: force\n # To prevent `make install' from compiling alloca.o and then relinking cc1\n # because alloca.o is newer, we permit these recursive makes to compile\n # alloca.o.  Then cc1 is newer, so it won't have to be relinked.\n-\t$(MAKE) CC=\"stage1/xgcc -Bstage1/\" CFLAGS=\"$(BOOT_CFLAGS)\" LDFLAGS=\"$(BOOT_LDFLAGS)\" libdir=$(libdir) STAGE_PREFIX=stage1/ LANGUAGES=\"$(LANGUAGES)\"\n+\t$(MAKE) CC=\"stage1/xgcc -Bstage1/\" CFLAGS=\"$(WARN_CFLAGS) $(BOOT_CFLAGS)\" LDFLAGS=\"$(BOOT_LDFLAGS)\" libdir=$(libdir) STAGE_PREFIX=stage1/ LANGUAGES=\"$(LANGUAGES)\"\n \t$(MAKE) stage2\n \t-if test $@ = bootstrap-lean; then rm -rf stage1; else true; fi\n-\t$(MAKE) CC=\"stage2/xgcc -Bstage2/\" CFLAGS=\"$(BOOT_CFLAGS)\" LDFLAGS=\"$(BOOT_LDFLAGS)\" libdir=$(libdir) STAGE_PREFIX=stage2/ LANGUAGES=\"$(LANGUAGES)\"\n+\t$(MAKE) CC=\"stage2/xgcc -Bstage2/\" CFLAGS=\"$(WARN_CFLAGS) $(BOOT_CFLAGS)\" LDFLAGS=\"$(BOOT_LDFLAGS)\" libdir=$(libdir) STAGE_PREFIX=stage2/ LANGUAGES=\"$(LANGUAGES)\"\n \n bootstrap2: force\n-\t$(MAKE) CC=\"stage1/xgcc -Bstage1/\" CFLAGS=\"$(BOOT_CFLAGS)\" LDFLAGS=\"$(BOOT_LDFLAGS)\" libdir=$(libdir) STAGE_PREFIX=stage1/ LANGUAGES=\"$(LANGUAGES)\"\n+\t$(MAKE) CC=\"stage1/xgcc -Bstage1/\" CFLAGS=\"$(WARN_CFLAGS) $(BOOT_CFLAGS)\" LDFLAGS=\"$(BOOT_LDFLAGS)\" libdir=$(libdir) STAGE_PREFIX=stage1/ LANGUAGES=\"$(LANGUAGES)\"\n \t$(MAKE) stage2\n-\t$(MAKE) CC=\"stage2/xgcc -Bstage2/\" CFLAGS=\"$(BOOT_CFLAGS)\" LDFLAGS=\"$(BOOT_LDFLAGS)\" libdir=$(libdir) STAGE_PREFIX=stage2/ LANGUAGES=\"$(LANGUAGES)\"\n+\t$(MAKE) CC=\"stage2/xgcc -Bstage2/\" CFLAGS=\"$(WARN_CFLAGS) $(BOOT_CFLAGS)\" LDFLAGS=\"$(BOOT_LDFLAGS)\" libdir=$(libdir) STAGE_PREFIX=stage2/ LANGUAGES=\"$(LANGUAGES)\"\n \n bootstrap3: force\n-\t$(MAKE) CC=\"stage2/xgcc -Bstage2/\" CFLAGS=\"$(BOOT_CFLAGS)\" LDFLAGS=\"$(BOOT_LDFLAGS)\" libdir=$(libdir) STAGE_PREFIX=stage2/ LANGUAGES=\"$(LANGUAGES)\"\n+\t$(MAKE) CC=\"stage2/xgcc -Bstage2/\" CFLAGS=\"$(WARN_CFLAGS) $(BOOT_CFLAGS)\" LDFLAGS=\"$(BOOT_LDFLAGS)\" libdir=$(libdir) STAGE_PREFIX=stage2/ LANGUAGES=\"$(LANGUAGES)\"\n \n bootstrap4: force\n-\t$(MAKE) CC=\"stage3/xgcc -Bstage3/\" CFLAGS=\"$(BOOT_CFLAGS)\" LDFLAGS=\"$(BOOT_LDFLAGS)\" libdir=$(libdir) STAGE_PREFIX=stage3/ LANGUAGES=\"$(LANGUAGES)\"\n+\t$(MAKE) CC=\"stage3/xgcc -Bstage3/\" CFLAGS=\"$(WARN_CFLAGS) $(BOOT_CFLAGS)\" LDFLAGS=\"$(BOOT_LDFLAGS)\" libdir=$(libdir) STAGE_PREFIX=stage3/ LANGUAGES=\"$(LANGUAGES)\"\n \n # Compare the object files in the current directory with those in the\n # stage2 directory."}]}