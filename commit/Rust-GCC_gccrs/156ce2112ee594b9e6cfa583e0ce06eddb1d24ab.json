{"sha": "156ce2112ee594b9e6cfa583e0ce06eddb1d24ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTU2Y2UyMTEyZWU1OTRiOWU2Y2ZhNTgzZTBjZTA2ZWRkYjFkMjRhYg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "2000-10-07T01:46:42Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-10-07T01:46:42Z"}, "message": "cp-tree.h (struct cp_language_function): Remove x_result_rtx.\n\n        * cp/cp-tree.h (struct cp_language_function): Remove x_result_rtx.\n        (original_result_rtx): Remove.\n        * cp/decl.c (save_function_data): Don't clear x_result_rtx.\n        (mark_lang_function): Don't mark it either.\n        * cp/expr.c (fixup_result_decl): Remove.\n        * cp/semantics.c (genrtl_named_return_value): Frob the return decl\n        before calling emit_local_var.\n        (genrtl_finish_function): Don't call fixup_result_decl.\n        Always emit the jump to return_label.\n\nFrom-SVN: r36770", "tree": {"sha": "fabcd5b6995d0d6c41b61d70163013e003cf0645", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fabcd5b6995d0d6c41b61d70163013e003cf0645"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/156ce2112ee594b9e6cfa583e0ce06eddb1d24ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/156ce2112ee594b9e6cfa583e0ce06eddb1d24ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/156ce2112ee594b9e6cfa583e0ce06eddb1d24ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/156ce2112ee594b9e6cfa583e0ce06eddb1d24ab/comments", "author": null, "committer": null, "parents": [{"sha": "3e4eac3fe9f4b590e6c95356c3fcb7b08630acf2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e4eac3fe9f4b590e6c95356c3fcb7b08630acf2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e4eac3fe9f4b590e6c95356c3fcb7b08630acf2"}], "stats": {"total": 74, "additions": 17, "deletions": 57}, "files": [{"sha": "e7fdacea4027a9e66eddc46eed1ebd31499c501e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/156ce2112ee594b9e6cfa583e0ce06eddb1d24ab/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/156ce2112ee594b9e6cfa583e0ce06eddb1d24ab/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=156ce2112ee594b9e6cfa583e0ce06eddb1d24ab", "patch": "@@ -1,3 +1,15 @@\n+2000-10-06  Richard Henderson  <rth@cygnus.com>\n+\n+\t* cp-tree.h (struct cp_language_function): Remove x_result_rtx.\n+\t(original_result_rtx): Remove.\n+\t* decl.c (save_function_data): Don't clear x_result_rtx.\n+\t(mark_lang_function): Don't mark it either.\n+\t* expr.c (fixup_result_decl): Remove.\n+\t* semantics.c (genrtl_named_return_value): Frob the return decl\n+\tbefore calling emit_local_var.\n+\t(genrtl_finish_function): Don't call fixup_result_decl.\n+\tAlways emit the jump to return_label.\n+\n 2000-10-06  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* pt.c (lookup_template_class): Set current access for enum."}, {"sha": "1a6c51848170628e0da2738c3e87b5a0ebf49a8c", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/156ce2112ee594b9e6cfa583e0ce06eddb1d24ab/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/156ce2112ee594b9e6cfa583e0ce06eddb1d24ab/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=156ce2112ee594b9e6cfa583e0ce06eddb1d24ab", "patch": "@@ -882,8 +882,6 @@ struct cp_language_function\n \n   tree *x_vcalls_possible_p;\n \n-  struct rtx_def *x_result_rtx;\n-\n   int returns_value;\n   int returns_null;\n   int in_function_try_handler;\n@@ -963,13 +961,6 @@ struct cp_language_function\n \n #define doing_semantic_analysis_p() (!expanding_p)\n \n-/* If original DECL_RESULT of current function was a register,\n-   but due to being an addressable named return value, would up\n-   on the stack, this variable holds the named return value's\n-   original location.  */\n-\n-#define original_result_rtx cp_function_chain->x_result_rtx\n-\n #define in_function_try_handler cp_function_chain->in_function_try_handler\n \n /* Nonzero if __FUNCTION__ and its ilk have been declared in this\n@@ -4042,7 +4033,6 @@ extern void check_handlers\t\t\tPARAMS ((tree));\n \n /* in expr.c */\n extern void init_cplus_expand\t\t\tPARAMS ((void));\n-extern void fixup_result_decl\t\t\tPARAMS ((tree, struct rtx_def *));\n extern int extract_init\t\t\t\tPARAMS ((tree, tree));\n extern tree cplus_expand_constant               PARAMS ((tree));\n "}, {"sha": "82ebc36af0ed4672bb6e6633f3b1675bebf065fe", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/156ce2112ee594b9e6cfa583e0ce06eddb1d24ab/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/156ce2112ee594b9e6cfa583e0ce06eddb1d24ab/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=156ce2112ee594b9e6cfa583e0ce06eddb1d24ab", "patch": "@@ -13992,7 +13992,6 @@ save_function_data (decl)\n   /* Clear out the bits we don't need.  */\n   f->base.x_stmt_tree.x_last_stmt = NULL_TREE;\n   f->base.x_stmt_tree.x_last_expr_type = NULL_TREE;\n-  f->x_result_rtx = NULL_RTX;\n   f->x_named_label_uses = NULL;\n   f->bindings = NULL;\n \n@@ -14631,8 +14630,6 @@ mark_lang_function (p)\n   ggc_mark_tree (p->x_current_class_ref);\n   ggc_mark_tree (p->x_eh_spec_try_block);\n \n-  ggc_mark_rtx (p->x_result_rtx);\n-\n   mark_named_label_lists (&p->x_named_labels, &p->x_named_label_uses);\n   mark_binding_level (&p->bindings);\n }"}, {"sha": "918e54dbb0f5a93ed21433114484df765d6bc5e5", "filename": "gcc/cp/expr.c", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/156ce2112ee594b9e6cfa583e0ce06eddb1d24ab/gcc%2Fcp%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/156ce2112ee594b9e6cfa583e0ce06eddb1d24ab/gcc%2Fcp%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexpr.c?ref=156ce2112ee594b9e6cfa583e0ce06eddb1d24ab", "patch": "@@ -148,36 +148,6 @@ init_cplus_expand ()\n   lang_expand_constant = cplus_expand_constant;\n }\n \n-/* If DECL had its rtl moved from where callers expect it\n-   to be, fix it up.  RESULT is the nominal rtl for the RESULT_DECL,\n-   which may be a pseudo instead of a hard register.  */\n-\n-void\n-fixup_result_decl (decl, result)\n-     tree decl;\n-     rtx result;\n-{\n-  if (REG_P (result))\n-    {\n-      if (REGNO (result) >= FIRST_PSEUDO_REGISTER)\n-\t{\n-\t  rtx real_decl_result;\n-\n-#ifdef FUNCTION_OUTGOING_VALUE\n-\t  real_decl_result\n-\t    = FUNCTION_OUTGOING_VALUE (TREE_TYPE (decl), current_function_decl);\n-#else\n-\t  real_decl_result\n-\t    = FUNCTION_VALUE (TREE_TYPE (decl), current_function_decl);\n-#endif\n-\t  REG_FUNCTION_VALUE_P (real_decl_result) = 1;\n-\t  result = real_decl_result;\n-\t}\n-      store_expr (decl, result, 0);\n-      emit_insn (gen_rtx (USE, VOIDmode, result));\n-    }\n-}\n-\n int\n extract_init (decl, init)\n      tree decl ATTRIBUTE_UNUSED, init ATTRIBUTE_UNUSED;"}, {"sha": "28c0f35b0754390e7ef5e8bd9f09818ecd3af564", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/156ce2112ee594b9e6cfa583e0ce06eddb1d24ab/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/156ce2112ee594b9e6cfa583e0ce06eddb1d24ab/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=156ce2112ee594b9e6cfa583e0ce06eddb1d24ab", "patch": "@@ -975,28 +975,25 @@ finish_decl_cleanup (decl, cleanup)\n static void\n genrtl_named_return_value ()\n {\n-  tree decl;\n-\n-  decl = DECL_RESULT (current_function_decl);\n-\n-  emit_local_var (decl);\n+  tree decl = DECL_RESULT (current_function_decl);\n \n   /* If this named return value comes in a register, put it in a\n      pseudo-register.  */\n   if (DECL_REGISTER (decl))\n     {\n-      original_result_rtx = DECL_RTL (decl);\n       /* Note that the mode of the old DECL_RTL may be wider than the\n \t mode of DECL_RESULT, depending on the calling conventions for\n \t the processor.  For example, on the Alpha, a 32-bit integer\n \t is returned in a DImode register -- the DECL_RESULT has\n \t SImode but the DECL_RTL for the DECL_RESULT has DImode.  So,\n \t here, we use the mode the back-end has already assigned for\n \t the return value.  */\n-      DECL_RTL (decl) = gen_reg_rtx (GET_MODE (original_result_rtx));\n+      DECL_RTL (decl) = gen_reg_rtx (GET_MODE (DECL_RTL (decl)));\n       if (TREE_ADDRESSABLE (decl))\n \tput_var_into_stack (decl);\n     }\n+\n+  emit_local_var (decl);\n }\n \n /* Bind a name and initialization to the return value of\n@@ -2602,15 +2599,9 @@ genrtl_finish_function (fn)\n       emit_label (cleanup_label);\n     }\n \n-  /* Get return value into register if that's where it's supposed to\n-     be.  */\n-  if (original_result_rtx)\n-    fixup_result_decl (DECL_RESULT (fn), original_result_rtx);\n-\n   /* Finish building code that will trigger warnings if users forget\n      to make their functions return values.  */\n-  if (no_return_label || cleanup_label)\n-    emit_jump (return_label);\n+  emit_jump (return_label);\n   if (no_return_label)\n     {\n       /* We don't need to call `expand_*_return' here because we don't"}]}