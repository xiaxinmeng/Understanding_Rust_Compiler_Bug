{"sha": "81def1b74bed71f407513a39908cbb9257b1e0d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODFkZWYxYjc0YmVkNzFmNDA3NTEzYTM5OTA4Y2JiOTI1N2IxZTBkMw==", "commit": {"author": {"name": "Daniel Berlin", "email": "dberlin@dberlin.org", "date": "2005-05-25T18:53:25Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2005-05-25T18:53:25Z"}, "message": "re PR tree-optimization/21705 (FRE does not eliminate a redundant pure call.)\n\n2005-05-25  Daniel Berlin  <dberlin@dberlin.org>\n\n\tFix PR tree-optimization/21705\n\n\t* tree-ssa-pre.c (in_fre): New static variable.\n\t(create_value_expr_from): Recursively value number reference ops\n\tin argument lists.\n\t(can_value_number_call): Temporary restrict only exists for\n\tPRE, not FRE.\n\nFrom-SVN: r100156", "tree": {"sha": "61933f045e45ea3006481c301eadbce38c98ef24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/61933f045e45ea3006481c301eadbce38c98ef24"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/81def1b74bed71f407513a39908cbb9257b1e0d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81def1b74bed71f407513a39908cbb9257b1e0d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81def1b74bed71f407513a39908cbb9257b1e0d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81def1b74bed71f407513a39908cbb9257b1e0d3/comments", "author": {"login": "dberlin", "id": 324715, "node_id": "MDQ6VXNlcjMyNDcxNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/324715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dberlin", "html_url": "https://github.com/dberlin", "followers_url": "https://api.github.com/users/dberlin/followers", "following_url": "https://api.github.com/users/dberlin/following{/other_user}", "gists_url": "https://api.github.com/users/dberlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/dberlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dberlin/subscriptions", "organizations_url": "https://api.github.com/users/dberlin/orgs", "repos_url": "https://api.github.com/users/dberlin/repos", "events_url": "https://api.github.com/users/dberlin/events{/privacy}", "received_events_url": "https://api.github.com/users/dberlin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "14d63fb68e2f60dbb0146ad1618c173a0f2c3078", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14d63fb68e2f60dbb0146ad1618c173a0f2c3078", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14d63fb68e2f60dbb0146ad1618c173a0f2c3078"}], "stats": {"total": 55, "additions": 49, "deletions": 6}, "files": [{"sha": "175726d89687cfb15d4809ade8d806e419593734", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81def1b74bed71f407513a39908cbb9257b1e0d3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81def1b74bed71f407513a39908cbb9257b1e0d3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=81def1b74bed71f407513a39908cbb9257b1e0d3", "patch": "@@ -1,3 +1,13 @@\n+2005-05-25  Daniel Berlin  <dberlin@dberlin.org>\n+\n+\tFix PR tree-optimization/21705\n+\t\n+\t* tree-ssa-pre.c (in_fre): New static variable.\n+\t(create_value_expr_from): Recursively value number reference ops\n+\tin argument lists.\n+\t(can_value_number_call): Temporary restrict only exists for\n+\tPRE, not FRE.\n+\n 2005-05-25  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* tree-into-ssa.c (rewrite_into_ssa, update_ssa): Replace"}, {"sha": "9ead438cc262ac64978f5bfa29d702d825188544", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-pre-14.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81def1b74bed71f407513a39908cbb9257b1e0d3/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-pre-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81def1b74bed71f407513a39908cbb9257b1e0d3/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-pre-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-pre-14.c?ref=81def1b74bed71f407513a39908cbb9257b1e0d3", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */ \n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+extern unsigned int strlen (const char *) __attribute__ ((__pure__));\n+\n+void\n+foo (const char *str)\n+{\n+  unsigned int a = strlen (str);\n+  unsigned int b = strlen (str);\n+  if (a != b)\n+    link_error ();\n+}\n+/* { dg-final { scan-tree-dump-times \"link_error\" 0 \"optimized\"} } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "c0b8e4535d9194685f1d816ec9b22f11a2d074f6", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 25, "deletions": 6, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81def1b74bed71f407513a39908cbb9257b1e0d3/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81def1b74bed71f407513a39908cbb9257b1e0d3/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=81def1b74bed71f407513a39908cbb9257b1e0d3", "patch": "@@ -178,6 +178,8 @@ Boston, MA 02111-1307, USA.  */\n    useful only for debugging, since we don't do identity lookups.  */\n \n \n+static bool in_fre = false;\n+\n /* A value set element.  Basically a single linked list of\n    expressions/values.  */\n typedef struct value_set_node\n@@ -2030,17 +2032,32 @@ create_value_expr_from (tree expr, basic_block block, tree stmt)\n \n   if (code == TREE_LIST)\n     {\n+      tree op = NULL_TREE;\n       tree temp = NULL_TREE;\n       if (TREE_CHAIN (vexpr))\n \ttemp = create_value_expr_from (TREE_CHAIN (vexpr), block, stmt);      \n       TREE_CHAIN (vexpr) = temp ? temp : TREE_CHAIN (vexpr);\n       \n+\n+      /* Recursively value-numberize reference ops.  */\n+      if (REFERENCE_CLASS_P (TREE_VALUE (vexpr)))\n+\t{\n+\t  tree tempop;\n+\t  op = TREE_VALUE (vexpr);\n+\t  tempop = create_value_expr_from (op, block, stmt);\n+\t  op = tempop ? tempop : op;\n+\t  \n+\t  TREE_VALUE (vexpr)  = vn_lookup_or_add (op, stmt);\n+\t}\n+      else\n+\t{\n+\t  op = TREE_VALUE (vexpr);\n+\t  TREE_VALUE (vexpr) = vn_lookup_or_add (TREE_VALUE (vexpr), NULL);\n+\t}\n       /* This is the equivalent of inserting op into EXP_GEN like we\n \t do below */\n-      if (!is_undefined_value (TREE_VALUE (vexpr)))\n-\tvalue_insert_into_set (EXP_GEN (block), TREE_VALUE (vexpr));      \n-\t  \n-      TREE_VALUE (vexpr) = vn_lookup_or_add (TREE_VALUE (vexpr), NULL);\n+      if (!is_undefined_value (op))\n+\tvalue_insert_into_set (EXP_GEN (block), op);\n \n       return vexpr;\n     }\n@@ -2108,8 +2125,8 @@ can_value_number_call (tree stmt)\n   tree call = get_call_expr_in (stmt);\n \n   /* This is a temporary restriction until we translate vuses through\n-     phi nodes.  */\n-  if (!ZERO_SSA_OPERANDS (stmt, SSA_OP_ALL_VIRTUALS))\n+     phi nodes.  This is only needed for PRE, of course.  */\n+  if (!in_fre && !ZERO_SSA_OPERANDS (stmt, SSA_OP_ALL_VIRTUALS))\n     return false;  \n   if (call_expr_flags (call)  & (ECF_PURE | ECF_CONST))\n     return true;\n@@ -2454,6 +2471,8 @@ static void\n init_pre (bool do_fre)\n {\n   basic_block bb;\n+  \n+  in_fre = do_fre;\n \n   inserted_exprs = NULL;\n   vn_init ();"}]}