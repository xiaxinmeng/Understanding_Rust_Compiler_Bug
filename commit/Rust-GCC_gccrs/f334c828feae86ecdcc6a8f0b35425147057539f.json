{"sha": "f334c828feae86ecdcc6a8f0b35425147057539f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjMzNGM4MjhmZWFlODZlY2RjYzZhOGYwYjM1NDI1MTQ3MDU3NTM5Zg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-09-30T07:06:16Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-09-30T07:06:16Z"}, "message": "re PR tree-optimization/77399 (Poor code generation for vector casts and loads)\n\n2016-09-30  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/77399\n\t* tree-ssa-forwprop.c (simplify_vector_constructor): Handle\n\tfloat <-> int conversions.\n\n\t* gcc.dg/tree-ssa/forwprop-35.c: New testcase.\n\nFrom-SVN: r240646", "tree": {"sha": "3a47b0fd6b35fd56851119c0b5aa8db1773b406a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a47b0fd6b35fd56851119c0b5aa8db1773b406a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f334c828feae86ecdcc6a8f0b35425147057539f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f334c828feae86ecdcc6a8f0b35425147057539f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f334c828feae86ecdcc6a8f0b35425147057539f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f334c828feae86ecdcc6a8f0b35425147057539f/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "76e3ec9ca98e93fa1de2806b4de46de513a2da7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76e3ec9ca98e93fa1de2806b4de46de513a2da7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76e3ec9ca98e93fa1de2806b4de46de513a2da7d"}], "stats": {"total": 82, "additions": 78, "deletions": 4}, "files": [{"sha": "d0a4199be3bf6c8f4192c3c8128765c98b19c3ff", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f334c828feae86ecdcc6a8f0b35425147057539f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f334c828feae86ecdcc6a8f0b35425147057539f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f334c828feae86ecdcc6a8f0b35425147057539f", "patch": "@@ -1,3 +1,9 @@\n+2016-09-30  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/77399\n+\t* tree-ssa-forwprop.c (simplify_vector_constructor): Handle\n+\tfloat <-> int conversions.\n+\n 2016-09-30  Alan Modra  <amodra@gmail.com>\n \n \t* config/rs6000/rs6000.c (rs6000_opt_vars): Revert last change."}, {"sha": "7ea99619546582513ca516389be37c68776afc58", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f334c828feae86ecdcc6a8f0b35425147057539f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f334c828feae86ecdcc6a8f0b35425147057539f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f334c828feae86ecdcc6a8f0b35425147057539f", "patch": "@@ -1,3 +1,8 @@\n+2016-09-30  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/77399\n+\t* gcc.dg/tree-ssa/forwprop-35.c: New testcase.\n+\n 2016-09-29  Sandra Loosemore  <sandra@codesourcery.com>\n \n \t* c-c++-common/pr27336.c: Make dependency on "}, {"sha": "24a1ad9c76765cd625c9ad8ce5166dd8a283a05d", "filename": "gcc/testsuite/gcc.dg/tree-ssa/forwprop-35.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f334c828feae86ecdcc6a8f0b35425147057539f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-35.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f334c828feae86ecdcc6a8f0b35425147057539f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-35.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-35.c?ref=f334c828feae86ecdcc6a8f0b35425147057539f", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-cddce1\" } */\n+\n+typedef int v4si __attribute__((vector_size(16)));\n+typedef float v4sf __attribute__((vector_size(16)));\n+\n+v4sf vec_cast(v4si f)\n+{\n+  return (v4sf){f[0], f[1], f[2], f[3]};\n+}\n+\n+v4sf vec_cast_perm(v4si f)\n+{\n+  return (v4sf){f[1], f[1], f[2], f[3]};\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"VEC_PERM_EXPR\" 1 \"cddce1\" } } */\n+/* { dg-final { scan-tree-dump-times \"\\\\\\(v4sf\\\\\\) \" 2 \"cddce1\" } } */"}, {"sha": "cd066ef0587c3ec9c210c1453b92f97d81eeae74", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 49, "deletions": 4, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f334c828feae86ecdcc6a8f0b35425147057539f/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f334c828feae86ecdcc6a8f0b35425147057539f/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=f334c828feae86ecdcc6a8f0b35425147057539f", "patch": "@@ -1953,7 +1953,7 @@ simplify_vector_constructor (gimple_stmt_iterator *gsi)\n   gimple *def_stmt;\n   tree op, op2, orig, type, elem_type;\n   unsigned elem_size, nelts, i;\n-  enum tree_code code;\n+  enum tree_code code, conv_code;\n   constructor_elt *elt;\n   unsigned char *sel;\n   bool maybe_ident;\n@@ -1970,6 +1970,7 @@ simplify_vector_constructor (gimple_stmt_iterator *gsi)\n \n   sel = XALLOCAVEC (unsigned char, nelts);\n   orig = NULL;\n+  conv_code = ERROR_MARK;\n   maybe_ident = true;\n   FOR_EACH_VEC_SAFE_ELT (CONSTRUCTOR_ELTS (op), i, elt)\n     {\n@@ -1984,6 +1985,26 @@ simplify_vector_constructor (gimple_stmt_iterator *gsi)\n       if (!def_stmt)\n \treturn false;\n       code = gimple_assign_rhs_code (def_stmt);\n+      if (code == FLOAT_EXPR\n+\t  || code == FIX_TRUNC_EXPR)\n+\t{\n+\t  op1 = gimple_assign_rhs1 (def_stmt);\n+\t  if (conv_code == ERROR_MARK)\n+\t    {\n+\t      if (GET_MODE_SIZE (TYPE_MODE (TREE_TYPE (elt->value)))\n+\t\t  != GET_MODE_SIZE (TYPE_MODE (TREE_TYPE (op1))))\n+\t\treturn false;\n+\t      conv_code = code;\n+\t    }\n+\t  else if (conv_code != code)\n+\t    return false;\n+\t  if (TREE_CODE (op1) != SSA_NAME)\n+\t    return false;\n+\t  def_stmt = SSA_NAME_DEF_STMT (op1);\n+\t  if (! is_gimple_assign (def_stmt))\n+\t    return false;\n+\t  code = gimple_assign_rhs_code (def_stmt);\n+\t}\n       if (code != BIT_FIELD_REF)\n \treturn false;\n       op1 = gimple_assign_rhs1 (def_stmt);\n@@ -1997,7 +2018,9 @@ simplify_vector_constructor (gimple_stmt_iterator *gsi)\n \t{\n \t  if (TREE_CODE (ref) != SSA_NAME)\n \t    return false;\n-\t  if (!useless_type_conversion_p (type, TREE_TYPE (ref)))\n+\t  if (! VECTOR_TYPE_P (TREE_TYPE (ref))\n+\t      || ! useless_type_conversion_p (TREE_TYPE (op1),\n+\t\t\t\t\t      TREE_TYPE (TREE_TYPE (ref))))\n \t    return false;\n \t  orig = ref;\n \t}\n@@ -2009,8 +2032,19 @@ simplify_vector_constructor (gimple_stmt_iterator *gsi)\n   if (i < nelts)\n     return false;\n \n+  if (! VECTOR_TYPE_P (TREE_TYPE (orig))\n+      || (TYPE_VECTOR_SUBPARTS (type)\n+\t  != TYPE_VECTOR_SUBPARTS (TREE_TYPE (orig))))\n+    return false;\n+\n   if (maybe_ident)\n-    gimple_assign_set_rhs_from_tree (gsi, orig);\n+    {\n+      if (conv_code == ERROR_MARK)\n+\tgimple_assign_set_rhs_from_tree (gsi, orig);\n+      else\n+\tgimple_assign_set_rhs_with_ops (gsi, conv_code, orig,\n+\t\t\t\t\tNULL_TREE, NULL_TREE);\n+    }\n   else\n     {\n       tree mask_type, *mask_elts;\n@@ -2028,7 +2062,18 @@ simplify_vector_constructor (gimple_stmt_iterator *gsi)\n       for (i = 0; i < nelts; i++)\n \tmask_elts[i] = build_int_cst (TREE_TYPE (mask_type), sel[i]);\n       op2 = build_vector (mask_type, mask_elts);\n-      gimple_assign_set_rhs_with_ops (gsi, VEC_PERM_EXPR, orig, orig, op2);\n+      if (conv_code == ERROR_MARK)\n+\tgimple_assign_set_rhs_with_ops (gsi, VEC_PERM_EXPR, orig, orig, op2);\n+      else\n+\t{\n+\t  gimple *perm\n+\t    = gimple_build_assign (make_ssa_name (TREE_TYPE (orig)),\n+\t\t\t\t   VEC_PERM_EXPR, orig, orig, op2);\n+\t  orig = gimple_assign_lhs (perm);\n+\t  gsi_insert_before (gsi, perm, GSI_SAME_STMT);\n+\t  gimple_assign_set_rhs_with_ops (gsi, conv_code, orig,\n+\t\t\t\t\t  NULL_TREE, NULL_TREE);\n+\t}\n     }\n   update_stmt (gsi_stmt (*gsi));\n   return true;"}]}