{"sha": "a44acfb9c00e1a7dc5285f2f67cc1a6db7348607", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTQ0YWNmYjljMDBlMWE3ZGM1Mjg1ZjJmNjdjYzFhNmRiNzM0ODYwNw==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2008-05-01T16:13:23Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2008-05-01T16:13:23Z"}, "message": "re PR target/36095 (__builtin_ia32_crc32di shouldn't defined in 32bit)\n\n2008-05-01  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR target/36095\n\t* config/i386/i386.c (bdesc_crc32): Removed.\n\t(ix86_expand_crc32): Likewise.\n\t(ix86_builtin_type): Replace V2DI2TI_FTYPE_V2DI2TI_INT with\n\tV2DI2TI_FTYPE_V2DI_INT, V2DI2TI_FTYPE_V2DI2TI_V2DI2TI_INT with\n\tV2DI2TI_FTYPE_V2DI_V2DI_INT.  Add UINT64_FTYPE_UINT64_UINT64,\n\tUINT_FTYPE_UINT_UINT, UINT_FTYPE_UINT_USHORT and\n\tUINT_FTYPE_UINT_UCHAR.\n\t(bdesc_args): Updated. Add crc32 builtins.\n\t(ix86_init_mmx_sse_builtins): Updated.\n\t(ix86_expand_args_builtin): Updated to support subreg.\n\n\t* doc/extend.texi: Correct __builtin_ia32_crc32di.\n\nFrom-SVN: r134861", "tree": {"sha": "1fa6645dc3481f2ca5420ecd11759586c53f7b34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1fa6645dc3481f2ca5420ecd11759586c53f7b34"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a44acfb9c00e1a7dc5285f2f67cc1a6db7348607", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a44acfb9c00e1a7dc5285f2f67cc1a6db7348607", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a44acfb9c00e1a7dc5285f2f67cc1a6db7348607", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a44acfb9c00e1a7dc5285f2f67cc1a6db7348607/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "17653c00b9d77f94272588e58400de197005b3a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17653c00b9d77f94272588e58400de197005b3a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17653c00b9d77f94272588e58400de197005b3a6"}], "stats": {"total": 186, "additions": 79, "deletions": 107}, "files": [{"sha": "6cd0adec5e464530f1cf567d6d846d3b7d434066", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a44acfb9c00e1a7dc5285f2f67cc1a6db7348607/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a44acfb9c00e1a7dc5285f2f67cc1a6db7348607/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a44acfb9c00e1a7dc5285f2f67cc1a6db7348607", "patch": "@@ -1,3 +1,19 @@\n+2008-05-01  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/36095\n+\t* config/i386/i386.c (bdesc_crc32): Removed.\n+\t(ix86_expand_crc32): Likewise.\n+\t(ix86_builtin_type): Replace V2DI2TI_FTYPE_V2DI2TI_INT with\n+\tV2DI2TI_FTYPE_V2DI_INT, V2DI2TI_FTYPE_V2DI2TI_V2DI2TI_INT with\n+\tV2DI2TI_FTYPE_V2DI_V2DI_INT.  Add UINT64_FTYPE_UINT64_UINT64,\n+\tUINT_FTYPE_UINT_UINT, UINT_FTYPE_UINT_USHORT and\n+\tUINT_FTYPE_UINT_UCHAR.\n+\t(bdesc_args): Updated. Add crc32 builtins.\n+\t(ix86_init_mmx_sse_builtins): Updated.\n+\t(ix86_expand_args_builtin): Updated to support subreg.\n+\n+\t* doc/extend.texi: Correct __builtin_ia32_crc32di.\n+\n 2008-05-01  Jan Hubicka  <jh@suse.cz>\n \n \t* tree-pass.h (opt_pass): Add IPA_PASS."}, {"sha": "e50fb08ae3c83874ab96b8c37f46d5ecb4475519", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 62, "deletions": 106, "changes": 168, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a44acfb9c00e1a7dc5285f2f67cc1a6db7348607/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a44acfb9c00e1a7dc5285f2f67cc1a6db7348607/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=a44acfb9c00e1a7dc5285f2f67cc1a6db7348607", "patch": "@@ -17984,15 +17984,6 @@ static const struct builtin_description bdesc_pcmpistr[] =\n   { OPTION_MASK_ISA_SSE4_2, CODE_FOR_sse4_2_pcmpistr, \"__builtin_ia32_pcmpistriz128\", IX86_BUILTIN_PCMPISTRZ128, UNKNOWN, (int) CCZmode },\n };\n \n-static const struct builtin_description bdesc_crc32[] =\n-{\n-  /* SSE4.2 */\n-  { OPTION_MASK_ISA_SSE4_2 | OPTION_MASK_ISA_64BIT, CODE_FOR_sse4_2_crc32qi, 0, IX86_BUILTIN_CRC32QI, UNKNOWN, 0 },\n-  { OPTION_MASK_ISA_SSE4_2, CODE_FOR_sse4_2_crc32hi, 0, IX86_BUILTIN_CRC32HI, UNKNOWN, 0 },\n-  { OPTION_MASK_ISA_SSE4_2, CODE_FOR_sse4_2_crc32si, 0, IX86_BUILTIN_CRC32SI, UNKNOWN, 0 },\n-  { OPTION_MASK_ISA_SSE4_2, CODE_FOR_sse4_2_crc32di, 0, IX86_BUILTIN_CRC32DI, UNKNOWN, 0 },\n-};\n-\n /* Builtin types */\n enum ix86_builtin_type\n {\n@@ -18081,12 +18072,16 @@ enum ix86_builtin_type\n   V1DI_FTYPE_V8QI_V8QI,\n   V1DI_FTYPE_V2SI_V2SI,\n   V1DI_FTYPE_V1DI_SI_COUNT,\n+  UINT64_FTYPE_UINT64_UINT64,\n+  UINT_FTYPE_UINT_UINT,\n+  UINT_FTYPE_UINT_USHORT,\n+  UINT_FTYPE_UINT_UCHAR,\n   V8HI_FTYPE_V8HI_INT,\n   V4SI_FTYPE_V4SI_INT,\n   V4HI_FTYPE_V4HI_INT,\n   V4SF_FTYPE_V4SF_INT,\n   V2DI_FTYPE_V2DI_INT,\n-  V2DI2TI_FTYPE_V2DI2TI_INT,\n+  V2DI2TI_FTYPE_V2DI_INT,\n   V2DF_FTYPE_V2DF_INT,\n   V16QI_FTYPE_V16QI_V16QI_V16QI,\n   V4SF_FTYPE_V4SF_V4SF_V4SF,\n@@ -18096,7 +18091,7 @@ enum ix86_builtin_type\n   V4SI_FTYPE_V4SI_V4SI_INT,\n   V4SF_FTYPE_V4SF_V4SF_INT,\n   V2DI_FTYPE_V2DI_V2DI_INT,\n-  V2DI2TI_FTYPE_V2DI2TI_V2DI2TI_INT,\n+  V2DI2TI_FTYPE_V2DI_V2DI_INT,\n   V2DF_FTYPE_V2DF_V2DF_INT,\n   V2DI_FTYPE_V2DI_UINT_UINT,\n   V2DI_FTYPE_V2DI_V2DI_UINT_UINT,\n@@ -18426,15 +18421,15 @@ static const struct builtin_description bdesc_args[] =\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_cvtsd2ss, \"__builtin_ia32_cvtsd2ss\", IX86_BUILTIN_CVTSD2SS, UNKNOWN, (int) V4SF_FTYPE_V4SF_V2DF },\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_cvtss2sd, \"__builtin_ia32_cvtss2sd\", IX86_BUILTIN_CVTSS2SD, UNKNOWN, (int) V2DF_FTYPE_V2DF_V4SF },\n \n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_ashlti3, \"__builtin_ia32_pslldqi128\", IX86_BUILTIN_PSLLDQI128, UNKNOWN, (int) V2DI2TI_FTYPE_V2DI2TI_INT },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_ashlti3, \"__builtin_ia32_pslldqi128\", IX86_BUILTIN_PSLLDQI128, UNKNOWN, (int) V2DI2TI_FTYPE_V2DI_INT },\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_ashlv8hi3, \"__builtin_ia32_psllwi128\", IX86_BUILTIN_PSLLWI128, UNKNOWN, (int) V8HI_FTYPE_V8HI_SI_COUNT },\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_ashlv4si3, \"__builtin_ia32_pslldi128\", IX86_BUILTIN_PSLLDI128, UNKNOWN, (int) V4SI_FTYPE_V4SI_SI_COUNT },\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_ashlv2di3, \"__builtin_ia32_psllqi128\", IX86_BUILTIN_PSLLQI128, UNKNOWN, (int) V2DI_FTYPE_V2DI_SI_COUNT },\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_ashlv8hi3, \"__builtin_ia32_psllw128\", IX86_BUILTIN_PSLLW128, UNKNOWN, (int) V8HI_FTYPE_V8HI_V8HI_COUNT },\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_ashlv4si3, \"__builtin_ia32_pslld128\", IX86_BUILTIN_PSLLD128, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI_COUNT },\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_ashlv2di3, \"__builtin_ia32_psllq128\", IX86_BUILTIN_PSLLQ128, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI_COUNT },\n \n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_lshrti3, \"__builtin_ia32_psrldqi128\", IX86_BUILTIN_PSRLDQI128, UNKNOWN, (int) V2DI2TI_FTYPE_V2DI2TI_INT },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_lshrti3, \"__builtin_ia32_psrldqi128\", IX86_BUILTIN_PSRLDQI128, UNKNOWN, (int) V2DI2TI_FTYPE_V2DI_INT },\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_lshrv8hi3, \"__builtin_ia32_psrlwi128\", IX86_BUILTIN_PSRLWI128, UNKNOWN, (int) V8HI_FTYPE_V8HI_SI_COUNT },\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_lshrv4si3, \"__builtin_ia32_psrldi128\", IX86_BUILTIN_PSRLDI128, UNKNOWN, (int) V4SI_FTYPE_V4SI_SI_COUNT },\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_lshrv2di3, \"__builtin_ia32_psrlqi128\", IX86_BUILTIN_PSRLQI128, UNKNOWN, (int) V2DI_FTYPE_V2DI_SI_COUNT },\n@@ -18496,7 +18491,7 @@ static const struct builtin_description bdesc_args[] =\n   { OPTION_MASK_ISA_SSSE3, CODE_FOR_ssse3_psignv2si3, \"__builtin_ia32_psignd\", IX86_BUILTIN_PSIGND, UNKNOWN, (int) V2SI_FTYPE_V2SI_V2SI },\n \n   /* SSSE3.  */\n-  { OPTION_MASK_ISA_SSSE3, CODE_FOR_ssse3_palignrti, \"__builtin_ia32_palignr128\", IX86_BUILTIN_PALIGNR128, UNKNOWN, (int) V2DI2TI_FTYPE_V2DI2TI_V2DI2TI_INT },\n+  { OPTION_MASK_ISA_SSSE3, CODE_FOR_ssse3_palignrti, \"__builtin_ia32_palignr128\", IX86_BUILTIN_PALIGNR128, UNKNOWN, (int) V2DI2TI_FTYPE_V2DI_V2DI_INT },\n   { OPTION_MASK_ISA_SSSE3, CODE_FOR_ssse3_palignrdi, \"__builtin_ia32_palignr\", IX86_BUILTIN_PALIGNR, UNKNOWN, (int) DI_FTYPE_DI_DI_INT },\n \n   /* SSE4.1 */\n@@ -18546,6 +18541,10 @@ static const struct builtin_description bdesc_args[] =\n \n   /* SSE4.2 */\n   { OPTION_MASK_ISA_SSE4_2, CODE_FOR_sse4_2_gtv2di3, \"__builtin_ia32_pcmpgtq\", IX86_BUILTIN_PCMPGTQ, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI },\n+  { OPTION_MASK_ISA_SSE4_2, CODE_FOR_sse4_2_crc32qi, \"__builtin_ia32_crc32qi\", IX86_BUILTIN_CRC32QI, UNKNOWN, (int) UINT_FTYPE_UINT_UCHAR },\n+  { OPTION_MASK_ISA_SSE4_2, CODE_FOR_sse4_2_crc32hi, \"__builtin_ia32_crc32hi\", IX86_BUILTIN_CRC32HI, UNKNOWN, (int) UINT_FTYPE_UINT_USHORT },\n+  { OPTION_MASK_ISA_SSE4_2, CODE_FOR_sse4_2_crc32si, \"__builtin_ia32_crc32si\", IX86_BUILTIN_CRC32SI, UNKNOWN, (int) UINT_FTYPE_UINT_UINT },\n+  { OPTION_MASK_ISA_SSE4_2 | OPTION_MASK_ISA_64BIT, CODE_FOR_sse4_2_crc32di, \"__builtin_ia32_crc32di\", IX86_BUILTIN_CRC32DI, UNKNOWN, (int) UINT64_FTYPE_UINT64_UINT64 },\n \n   /* SSE4A */\n   { OPTION_MASK_ISA_SSE4A, CODE_FOR_sse4a_extrqi, \"__builtin_ia32_extrqi\", IX86_BUILTIN_EXTRQI, UNKNOWN, (int) V2DI_FTYPE_V2DI_UINT_UINT },\n@@ -19340,6 +19339,26 @@ ix86_init_mmx_sse_builtins (void)\n     = build_function_type_list (V4HI_type_node,\n \t\t\t\tV8QI_type_node, V8QI_type_node,\n \t\t\t\tNULL_TREE);\n+  tree unsigned_ftype_unsigned_uchar\n+    = build_function_type_list (unsigned_type_node,\n+\t\t\t\tunsigned_type_node,\n+\t\t\t\tunsigned_char_type_node,\n+\t\t\t\tNULL_TREE);\n+  tree unsigned_ftype_unsigned_ushort\n+    = build_function_type_list (unsigned_type_node,\n+\t\t\t\tunsigned_type_node,\n+\t\t\t\tshort_unsigned_type_node,\n+\t\t\t\tNULL_TREE);\n+  tree unsigned_ftype_unsigned_unsigned\n+    = build_function_type_list (unsigned_type_node,\n+\t\t\t\tunsigned_type_node,\n+\t\t\t\tunsigned_type_node,\n+\t\t\t\tNULL_TREE);\n+  tree uint64_ftype_uint64_uint64\n+    = build_function_type_list (long_long_unsigned_type_node,\n+\t\t\t\tlong_long_unsigned_type_node,\n+\t\t\t\tlong_long_unsigned_type_node,\n+\t\t\t\tNULL_TREE);\n \n   tree ftype;\n \n@@ -19626,6 +19645,18 @@ ix86_init_mmx_sse_builtins (void)\n \tcase V1DI_FTYPE_V1DI_SI_COUNT:\n \t  type = v1di_ftype_v1di_int;\n \t  break;\n+\tcase UINT64_FTYPE_UINT64_UINT64:\n+\t  type = uint64_ftype_uint64_uint64;\n+\t  break;\n+\tcase UINT_FTYPE_UINT_UINT:\n+\t  type = unsigned_ftype_unsigned_unsigned;\n+\t  break;\n+\tcase UINT_FTYPE_UINT_USHORT:\n+\t  type = unsigned_ftype_unsigned_ushort;\n+\t  break;\n+\tcase UINT_FTYPE_UINT_UCHAR:\n+\t  type = unsigned_ftype_unsigned_uchar;\n+\t  break;\n \tcase V8HI_FTYPE_V8HI_INT:\n \t  type = v8hi_ftype_v8hi_int;\n \t  break;\n@@ -19639,7 +19670,7 @@ ix86_init_mmx_sse_builtins (void)\n \t  type = v4sf_ftype_v4sf_int;\n \t  break;\n \tcase V2DI_FTYPE_V2DI_INT:\n-\tcase V2DI2TI_FTYPE_V2DI2TI_INT:\n+\tcase V2DI2TI_FTYPE_V2DI_INT:\n \t  type = v2di_ftype_v2di_int;\n \t  break;\n \tcase V2DF_FTYPE_V2DF_INT:\n@@ -19667,7 +19698,7 @@ ix86_init_mmx_sse_builtins (void)\n \t  type = v4sf_ftype_v4sf_v4sf_int;\n \t  break;\n \tcase V2DI_FTYPE_V2DI_V2DI_INT:\n-\tcase V2DI2TI_FTYPE_V2DI2TI_V2DI2TI_INT:\n+\tcase V2DI2TI_FTYPE_V2DI_V2DI_INT:\n \t  type = v2di_ftype_v2di_v2di_int;\n \t  break;\n \tcase V2DF_FTYPE_V2DF_V2DF_INT:\n@@ -19786,28 +19817,6 @@ ix86_init_mmx_sse_builtins (void)\n   /* SSE4.1. */\n   def_builtin (OPTION_MASK_ISA_SSE4_1, \"__builtin_ia32_movntdqa\", v2di_ftype_pv2di, IX86_BUILTIN_MOVNTDQA);\n \n-  /* SSE4.2. */\n-  ftype = build_function_type_list (unsigned_type_node,\n-\t\t\t\t    unsigned_type_node,\n-\t\t\t\t    unsigned_char_type_node,\n-\t\t\t\t    NULL_TREE);\n-  def_builtin_const (OPTION_MASK_ISA_SSE4_2, \"__builtin_ia32_crc32qi\", ftype, IX86_BUILTIN_CRC32QI);\n-  ftype = build_function_type_list (unsigned_type_node,\n-\t\t\t\t    unsigned_type_node,\n-\t\t\t\t    short_unsigned_type_node,\n-\t\t\t\t    NULL_TREE);\n-  def_builtin_const (OPTION_MASK_ISA_SSE4_2, \"__builtin_ia32_crc32hi\", ftype, IX86_BUILTIN_CRC32HI);\n-  ftype = build_function_type_list (unsigned_type_node,\n-\t\t\t\t    unsigned_type_node,\n-\t\t\t\t    unsigned_type_node,\n-\t\t\t\t    NULL_TREE);\n-  def_builtin_const (OPTION_MASK_ISA_SSE4_2, \"__builtin_ia32_crc32si\", ftype, IX86_BUILTIN_CRC32SI);\n-  ftype = build_function_type_list (long_long_unsigned_type_node,\n-\t\t\t\t    long_long_unsigned_type_node,\n-\t\t\t\t    long_long_unsigned_type_node,\n-\t\t\t\t    NULL_TREE);\n-  def_builtin_const (OPTION_MASK_ISA_SSE4_2, \"__builtin_ia32_crc32di\", ftype, IX86_BUILTIN_CRC32DI);\n-\n   /* AES */\n   if (TARGET_AES)\n     {\n@@ -19998,41 +20007,6 @@ safe_vector_operand (rtx x, enum machine_mode mode)\n   return x;\n }\n \n-/* Subroutine of ix86_expand_builtin to take care of crc32 insns.  */\n-\n-static rtx\n-ix86_expand_crc32 (enum insn_code icode, tree exp, rtx target)\n-{\n-  rtx pat;\n-  tree arg0 = CALL_EXPR_ARG (exp, 0);\n-  tree arg1 = CALL_EXPR_ARG (exp, 1);\n-  rtx op0 = expand_normal (arg0);\n-  rtx op1 = expand_normal (arg1);\n-  enum machine_mode tmode = insn_data[icode].operand[0].mode;\n-  enum machine_mode mode0 = insn_data[icode].operand[1].mode;\n-  enum machine_mode mode1 = insn_data[icode].operand[2].mode;\n-\n-  if (optimize\n-      || !target\n-      || GET_MODE (target) != tmode\n-      || ! (*insn_data[icode].operand[0].predicate) (target, tmode))\n-    target = gen_reg_rtx (tmode);\n-\n-  if (!(*insn_data[icode].operand[1].predicate) (op0, mode0))\n-    op0 = copy_to_mode_reg (mode0, op0);\n-  if (!(*insn_data[icode].operand[2].predicate) (op1, mode1))\n-    {\n-      op1 = copy_to_reg (op1);\n-      op1 = simplify_gen_subreg (mode1, op1, GET_MODE (op1), 0);\n-    }\n-\n-  pat = GEN_FCN (icode) (target, op0, op1);\n-  if (! pat)\n-    return 0;\n-  emit_insn (pat);\n-  return target;\n-}\n-\n /* Subroutine of ix86_expand_builtin to take care of binop insns.  */\n \n static rtx\n@@ -20439,12 +20413,9 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n   enum insn_code icode = d->icode;\n   const struct insn_data *insn_p = &insn_data[icode];\n   enum machine_mode tmode = insn_p->operand[0].mode;\n-  enum machine_mode cmode;\n+  enum machine_mode rmode = VOIDmode;\n   bool swap = false;\n   enum rtx_code comparison = d->comparison;\n-  enum { none, ti } convert;\n-\n-  convert = none;\n \n   switch ((enum ix86_builtin_type) d->flag)\n     {\n@@ -20545,9 +20516,15 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n       nargs = 2;\n       last_arg_count = true;\n       break;\n-    case V2DI2TI_FTYPE_V2DI2TI_INT:\n+    case UINT64_FTYPE_UINT64_UINT64:\n+    case UINT_FTYPE_UINT_UINT:\n+    case UINT_FTYPE_UINT_USHORT:\n+    case UINT_FTYPE_UINT_UCHAR:\n       nargs = 2;\n-      convert = ti;\n+      break;\n+    case V2DI2TI_FTYPE_V2DI_INT:\n+      nargs = 2;\n+      rmode = V2DImode;\n       nargs_constant = 1;\n       break;\n     case V8HI_FTYPE_V8HI_INT:\n@@ -20573,9 +20550,9 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n       nargs = 3;\n       nargs_constant = 1;\n       break;\n-    case V2DI2TI_FTYPE_V2DI2TI_V2DI2TI_INT:\n+    case V2DI2TI_FTYPE_V2DI_V2DI_INT:\n       nargs = 3;\n-      convert = ti;\n+      rmode = V2DImode;\n       nargs_constant = 1;\n       break;\n     case V2DI_FTYPE_V2DI_UINT_UINT:\n@@ -20602,18 +20579,7 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n       return ix86_expand_sse_compare (d, exp, target, swap);\n     }\n \n-  switch (convert)\n-    {\n-    case ti:\n-      gcc_assert (tmode == TImode);\n-      cmode = V2DImode;\n-      break;\n-    case none:\n-      cmode = VOIDmode;\n-      break;\n-    }\n-\n-  if (cmode == VOIDmode)\n+  if (rmode == VOIDmode || rmode == tmode)\n     {\n       if (optimize\n \t  || target == 0\n@@ -20624,8 +20590,8 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n     }\n   else\n     {\n-      target = gen_reg_rtx (cmode);\n-      real_target = simplify_gen_subreg (tmode, target, cmode, 0);\n+      target = gen_reg_rtx (rmode);\n+      real_target = simplify_gen_subreg (tmode, target, rmode, 0);\n     }\n \n   for (i = 0; i < nargs; i++)\n@@ -20692,19 +20658,13 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n \t  if (memory_operand (op, mode))\n \t    num_memory++;\n \n-\t  if (cmode == VOIDmode)\n+\t  if (GET_MODE (op) == mode || GET_MODE (op) == VOIDmode)\n \t    {\n-\t      gcc_assert (GET_MODE (op) == mode\n-\t\t\t  || GET_MODE (op) == VOIDmode);\n-\n \t      if (optimize || !match || num_memory > 1)\n \t\top = copy_to_mode_reg (mode, op);\n \t    }\n \t  else\n \t    {\n-\t      gcc_assert (GET_MODE (op) == cmode\n-\t\t\t  && mode == tmode);\n-\n \t      op = copy_to_reg (op);\n \t      op = simplify_gen_subreg (mode, op, GET_MODE (op), 0);\n \t    }\n@@ -21444,10 +21404,6 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n     if (d->code == fcode)\n       return ix86_expand_sse_ptest (d, exp, target);\n \n-  for (i = 0, d = bdesc_crc32; i < ARRAY_SIZE (bdesc_crc32); i++, d++)\n-    if (d->code == fcode)\n-      return ix86_expand_crc32 (d->icode, exp, target);\n-\n   for (i = 0, d = bdesc_pcmpestr;\n        i < ARRAY_SIZE (bdesc_pcmpestr);\n        i++, d++)"}, {"sha": "1d25795d0866c8c8e1777459480ddd5f257a9b04", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a44acfb9c00e1a7dc5285f2f67cc1a6db7348607/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a44acfb9c00e1a7dc5285f2f67cc1a6db7348607/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=a44acfb9c00e1a7dc5285f2f67cc1a6db7348607", "patch": "@@ -7997,7 +7997,7 @@ Generates the @code{crc32b} machine instruction.\n Generates the @code{crc32w} machine instruction.\n @item unsigned int __builtin_ia32_crc32si (unsigned int, unsigned int)\n Generates the @code{crc32l} machine instruction.\n-@item unsigned long long __builtin_ia32_crc32di (unsigned int, unsigned long long)\n+@item unsigned long long __builtin_ia32_crc32di (unsigned long long, unsigned long long)\n @end table\n \n The following built-in functions are changed to generate new SSE4.2"}]}