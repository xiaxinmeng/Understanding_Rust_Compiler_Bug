{"sha": "9f8d1e5ca55ca37137adf9d89dda0080238b1baf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWY4ZDFlNWNhNTVjYTM3MTM3YWRmOWQ4OWRkYTAwODAyMzhiMWJhZg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-10-13T10:32:13Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-10-13T10:32:13Z"}, "message": "[multiple changes]\n\n2011-10-13  Sergey Rybin  <rybin@adacore.com>\n\n\t* gnat_ugn.texi, vms_data.ads: Add an option to control enumeration\n\tliteral casing.\n\n2011-10-13  Nicolas Roche  <roche@adacore.com>\n\n\t* gnatlink.adb: Ensure that -mrtp is passed when\n\truntime name ends with 'rtp'.\n\n2011-10-13  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_prag.adb (Analyze_Pragma, case Unchecked_Union): an\n\tunchecked union type can be limited.\n\n2011-10-13  Olivier Hainque  <hainque@adacore.com>\n\n\t* init.c (__gnat_error_handler) <VxWorks version>: Add comments on\n\tthe use of the signal trampoline for PPC in the sjlj case as well.\n\tAdd legitimate casts, preventing compile time warnings on the\n\t(sighandler *) profile.\n\n2011-10-13  Yannick Moy  <moy@adacore.com>\n\n\t* sem_aggr.adb (Resolve_Aggr_Expr): Always perform semantic\n\tanalysis in Alfa mode.\n\n2011-10-13  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch3.adb (OK_For_Limited_Init_In_05): Conditional and case\n\texpressions are legal limited return values if each one of their\n\tdependent expressions are legal.\n\n2011-10-13  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch6.adb (Analyze_Procedure_Call_Statement): In Ada 2012 mode,\n\tif the prefix of the call is a qualified expression, rewrite as\n\ta code statement.\n\t* sem_ch13.adb (Analyze_Code_Statement): In Ada 2012 mode, the\n\tcode statement is legal if it is a rewriting of a procedure call.\n\n2011-10-13  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_aggr.adb (Flatten): If a component association has a box,\n\tassume that aggregate is not static.\n\t(Safe_Aggregate): If a component association in a non-limited\n\taggregate has a box, assume that it cannot be expanded in place.\n\n2011-10-13  Vincent Celier  <celier@adacore.com>\n\n\t* prj-conf.adb (Get_Or_Create_Configuration_File): Call\n\tProcess_Project_Tree_Phase_1 with Packages_To_Check.\n\t(Process_Project_And_Apply_Config): Ditto\n\t* prj-part.ads, prj-part.adb, prj-pars.ads, prj-pars.adb (Parse):\n\tRemove default for argument Packages_To_Check.\n\t* prj-proc.adb (Recursive_Process): New argument\n\tPackages_To_Check.\n\t(Process): Ditto.\n\t(Process_Project_Tree_Phase_1): Ditto.\n\t(Recursive_Project.Process_Aggregated_Projects): Call\n\tPrj.Part.Parse and Process_Project_Tree_Phase_1 with\n\tPackages_To_Check.\n\t* prj-proc.ads (Process): New argument Packages_To_Check\n\t(Process_Project_Tree_Phase_1): Ditto\n\nFrom-SVN: r179902", "tree": {"sha": "f7b58b4cae33ed6726612c0bde2cd261451d1d52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f7b58b4cae33ed6726612c0bde2cd261451d1d52"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f8d1e5ca55ca37137adf9d89dda0080238b1baf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f8d1e5ca55ca37137adf9d89dda0080238b1baf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f8d1e5ca55ca37137adf9d89dda0080238b1baf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f8d1e5ca55ca37137adf9d89dda0080238b1baf/comments", "author": null, "committer": null, "parents": [{"sha": "c28f4b5c26988486a94093dadfb551a6520c2520", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c28f4b5c26988486a94093dadfb551a6520c2520", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c28f4b5c26988486a94093dadfb551a6520c2520"}], "stats": {"total": 200, "additions": 188, "deletions": 12}, "files": [{"sha": "003158f5cbdb91b5b2d303ba0fc0f8511875ad56", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f8d1e5ca55ca37137adf9d89dda0080238b1baf/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f8d1e5ca55ca37137adf9d89dda0080238b1baf/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=9f8d1e5ca55ca37137adf9d89dda0080238b1baf", "patch": "@@ -1,3 +1,68 @@\n+2011-10-13  Sergey Rybin  <rybin@adacore.com>\n+\n+\t* gnat_ugn.texi, vms_data.ads: Add an option to control enumeration\n+\tliteral casing.\n+\n+2011-10-13  Nicolas Roche  <roche@adacore.com>\n+\n+\t* gnatlink.adb: Ensure that -mrtp is passed when\n+\truntime name ends with 'rtp'.\n+\n+2011-10-13  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Pragma, case Unchecked_Union): an\n+\tunchecked union type can be limited.\n+\n+2011-10-13  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* init.c (__gnat_error_handler) <VxWorks version>: Add comments on\n+\tthe use of the signal trampoline for PPC in the sjlj case as well.\n+\tAdd legitimate casts, preventing compile time warnings on the\n+\t(sighandler *) profile.\n+\n+2011-10-13  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_aggr.adb (Resolve_Aggr_Expr): Always perform semantic\n+\tanalysis in Alfa mode.\n+\n+2011-10-13  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch3.adb (OK_For_Limited_Init_In_05): Conditional and case\n+\texpressions are legal limited return values if each one of their\n+\tdependent expressions are legal.\n+\n+2011-10-13  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch6.adb (Analyze_Procedure_Call_Statement): In Ada 2012 mode,\n+\tif the prefix of the call is a qualified expression, rewrite as\n+\ta code statement.\n+\t* sem_ch13.adb (Analyze_Code_Statement): In Ada 2012 mode, the\n+\tcode statement is legal if it is a rewriting of a procedure call.\n+\n+2011-10-13  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_aggr.adb (Flatten): If a component association has a box,\n+\tassume that aggregate is not static.\n+\t(Safe_Aggregate): If a component association in a non-limited\n+\taggregate has a box, assume that it cannot be expanded in place.\n+\n+2011-10-13  Vincent Celier  <celier@adacore.com>\n+\n+\t* prj-conf.adb (Get_Or_Create_Configuration_File): Call\n+\tProcess_Project_Tree_Phase_1 with Packages_To_Check.\n+\t(Process_Project_And_Apply_Config): Ditto\n+\t* prj-part.ads, prj-part.adb, prj-pars.ads, prj-pars.adb (Parse):\n+\tRemove default for argument Packages_To_Check.\n+\t* prj-proc.adb (Recursive_Process): New argument\n+\tPackages_To_Check.\n+\t(Process): Ditto.\n+\t(Process_Project_Tree_Phase_1): Ditto.\n+\t(Recursive_Project.Process_Aggregated_Projects): Call\n+\tPrj.Part.Parse and Process_Project_Tree_Phase_1 with\n+\tPackages_To_Check.\n+\t* prj-proc.ads (Process): New argument Packages_To_Check\n+\t(Process_Project_Tree_Phase_1): Ditto\n+\n 2011-10-13  Arnaud Charlet  <charlet@adacore.com>\n \n \t* gcc-interface/Makefile.in: Fix typo."}, {"sha": "b48b2281b3db136631caf923576cfe8109d5585c", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f8d1e5ca55ca37137adf9d89dda0080238b1baf/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f8d1e5ca55ca37137adf9d89dda0080238b1baf/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=9f8d1e5ca55ca37137adf9d89dda0080238b1baf", "patch": "@@ -3398,6 +3398,15 @@ package body Exp_Aggr is\n             begin\n                Assoc := First (Component_Associations (N));\n                while Present (Assoc) loop\n+\n+                  --  If this is a box association, flattening is in general\n+                  --  not possible because at this point we cannot tell if the\n+                  --  default is static or even exists.\n+\n+                  if Box_Present (Assoc) then\n+                     return False;\n+                  end if;\n+\n                   Choice := First (Choices (Assoc));\n \n                   while Present (Choice) loop\n@@ -4148,6 +4157,12 @@ package body Exp_Aggr is\n                         return False;\n                      end if;\n \n+                  --  If association has a box, no way to determine yet\n+                  --  whether default can be assigned in place.\n+\n+                  elsif Box_Present (Expr) then\n+                     return False;\n+\n                   elsif not Safe_Component (Expression (Expr)) then\n                      return False;\n                   end if;"}, {"sha": "d7e7a7d8d1a19feb968c17eed7c54a4d66a1bbd0", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f8d1e5ca55ca37137adf9d89dda0080238b1baf/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f8d1e5ca55ca37137adf9d89dda0080238b1baf/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=9f8d1e5ca55ca37137adf9d89dda0080238b1baf", "patch": "@@ -13002,6 +13002,23 @@ Names are in lower case\n @item ^-nM^/NAME_CASING=MIXED_CASE^\n Names are in mixed case\n \n+@cindex @option{^-ne@var{x}^/ENUM_CASING^} (@command{gnatpp})\n+@item ^-neD^/ENUM_CASING=AS_DECLARED^\n+Enumeration literal casing for defining occurrences are as they appear in the\n+source file. Overrides ^-n^/NAME_CASING^ casing setting.\n+\n+@item ^-neU^/ENUM_CASING=UPPER_CASE^\n+Enumeration literals are in upper case.  Overrides ^-n^/NAME_CASING^ casing\n+setting.\n+\n+@item ^-neL^/ENUM_CASING=LOWER_CASE^\n+Enumeration literals are in lower case. Overrides ^-n^/NAME_CASING^ casing\n+setting.\n+\n+@item ^-neM^/ENUM_CASING=MIXED_CASE^\n+Enumeration literals are in mixed case. Overrides ^-n^/NAME_CASING^ casing\n+setting.\n+\n @cindex @option{^-p@var{x}^/PRAGMA_CASING^} (@command{gnatpp})\n @item ^-pL^/PRAGMA_CASING=LOWER_CASE^\n Pragma names are lower case"}, {"sha": "de9d491f2bddf753ec6e35c68cc10027d4064385", "filename": "gcc/ada/gnatlink.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f8d1e5ca55ca37137adf9d89dda0080238b1baf/gcc%2Fada%2Fgnatlink.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f8d1e5ca55ca37137adf9d89dda0080238b1baf/gcc%2Fada%2Fgnatlink.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatlink.adb?ref=9f8d1e5ca55ca37137adf9d89dda0080238b1baf", "patch": "@@ -1614,7 +1614,9 @@ begin\n                      --  Pass -mrtp to the linker if --RTS=rtp was passed\n \n                      if Arg'Length > 8\n-                       and then Arg (Arg'First + 6 .. Arg'First + 8) = \"rtp\"\n+                       and then\n+                         (Arg (Arg'First + 6 .. Arg'First + 8) = \"rtp\"\n+                          or else Arg (Arg'Last - 2 .. Arg'Last) = \"rtp\")\n                      then\n                         Linker_Options.Increment_Last;\n                         Linker_Options.Table (Linker_Options.Last) :="}, {"sha": "7eee3bf19b49c346d9f7aa436ba734908527857f", "filename": "gcc/ada/init.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f8d1e5ca55ca37137adf9d89dda0080238b1baf/gcc%2Fada%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f8d1e5ca55ca37137adf9d89dda0080238b1baf/gcc%2Fada%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finit.c?ref=9f8d1e5ca55ca37137adf9d89dda0080238b1baf", "patch": "@@ -2015,12 +2015,17 @@ __gnat_error_handler (int sig, void *si, struct sigcontext *sc)\n   sigprocmask (SIG_SETMASK, &mask, NULL);\n \n #if defined (__PPC__)\n-  /* We process signals through a Call Frame Info trampoline, voiding\n-     the need for myriads of fallback_frame_state variants.  */\n+  /* On PowerPC, we process signals through a Call Frame Info trampoline,\n+     voiding the need for myriads of fallback_frame_state variants in the\n+     ZCX runtime.  We have no simple way to distinguish ZCX from SJLJ here,\n+     so we do this for SJLJ as well even though this is not necessary.\n+     This only incurs a few extra instructions and a tiny amount of extra\n+     stack usage.  */\n \n   #include \"sigtramp.h\"\n \n-  __gnat_sigtramp (sig, si, sc, &__gnat_map_signal);\n+  __gnat_sigtramp (sig, (void *)si, (void *)sc,\n+\t\t   (sighandler_t *)&__gnat_map_signal);\n \n #else\n   __gnat_map_signal (sig, si, sc);"}, {"sha": "011a444cf0d74ba231e0b802d72a67b705d2e24b", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f8d1e5ca55ca37137adf9d89dda0080238b1baf/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f8d1e5ca55ca37137adf9d89dda0080238b1baf/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=9f8d1e5ca55ca37137adf9d89dda0080238b1baf", "patch": "@@ -1675,8 +1675,12 @@ package body Sem_Aggr is\n             --  unless the expression covers a single component, or the\n             --  expander is inactive.\n \n+            --  In Alfa mode, expressions that can perform side-effects will be\n+            --  recognized by the gnat2why back-end, and the whole subprogram\n+            --  will be ignored. So semantic analysis can be performed safely.\n+\n             if Single_Elmt\n-              or else not Expander_Active\n+              or else not Full_Expander_Active\n               or else In_Spec_Expression\n             then\n                Analyze_And_Resolve (Expr, Component_Typ);"}, {"sha": "02c9325a298db630f27e2548b712054bd6e5080c", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f8d1e5ca55ca37137adf9d89dda0080238b1baf/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f8d1e5ca55ca37137adf9d89dda0080238b1baf/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=9f8d1e5ca55ca37137adf9d89dda0080238b1baf", "patch": "@@ -3364,11 +3364,19 @@ package body Sem_Ch13 is\n \n          --  No statements other than code statements, pragmas, and labels.\n          --  Again we allow certain internally generated statements.\n+         --  In Ada 2012, qualified expressions are names, and the code\n+         --  statement is initially parsed as a procedure call.\n \n          Stmt := First (Statements (HSS));\n          while Present (Stmt) loop\n             StmtO := Original_Node (Stmt);\n-            if Comes_From_Source (StmtO)\n+\n+            if Ada_Version >= Ada_2012\n+              and then Nkind (StmtO) = N_Procedure_Call_Statement\n+            then\n+               null;\n+\n+            elsif Comes_From_Source (StmtO)\n               and then not Nkind_In (StmtO, N_Pragma,\n                                             N_Label,\n                                             N_Code_Statement)"}, {"sha": "918763d64c2393128253c7499cac1b45c78c38f6", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f8d1e5ca55ca37137adf9d89dda0080238b1baf/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f8d1e5ca55ca37137adf9d89dda0080238b1baf/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=9f8d1e5ca55ca37137adf9d89dda0080238b1baf", "patch": "@@ -16889,6 +16889,38 @@ package body Sem_Ch3 is\n          when N_Attribute_Reference =>\n             return Attribute_Name (Original_Node (Exp)) = Name_Input;\n \n+         --  For a conditional expression, all dependent expressions must be\n+         --  legal constructs.\n+\n+         when N_Conditional_Expression =>\n+            declare\n+               Then_Expr : constant Node_Id :=\n+                 Next\n+                   (First (Expressions (Original_Node (Exp))));\n+               Else_Expr : constant Node_Id := Next (Then_Expr);\n+\n+            begin\n+               return OK_For_Limited_Init_In_05 (Typ, Then_Expr)\n+                 and then OK_For_Limited_Init_In_05 (Typ, Else_Expr);\n+            end;\n+\n+         when N_Case_Expression =>\n+            declare\n+               Alt : Node_Id;\n+\n+            begin\n+               Alt := First (Alternatives (Original_Node (Exp)));\n+               while Present (Alt) loop\n+                  if not OK_For_Limited_Init_In_05 (Typ, Expression (Alt)) then\n+                     return False;\n+                  end if;\n+\n+                  Next (Alt);\n+               end loop;\n+\n+               return True;\n+            end;\n+\n          when others =>\n             return False;\n       end case;"}, {"sha": "3c5e3f834feacebcb04fc23ec8ef141b8b90fbd9", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f8d1e5ca55ca37137adf9d89dda0080238b1baf/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f8d1e5ca55ca37137adf9d89dda0080238b1baf/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=9f8d1e5ca55ca37137adf9d89dda0080238b1baf", "patch": "@@ -1340,6 +1340,15 @@ package body Sem_Ch6 is\n          Analyze (P);\n          Analyze_Call_And_Resolve;\n \n+      --  In Ada 2012. a qualified expression is a name, but it cannot be a\n+      --  procedure name, so the construct can only be a qualified expression.\n+\n+      elsif Nkind (P) = N_Qualified_Expression\n+        and then Ada_Version >= Ada_2012\n+      then\n+         Rewrite (N, Make_Code_Statement (Loc, Expression => P));\n+         Analyze (N);\n+\n       --  Anything else is an error\n \n       else"}, {"sha": "9a55bf8e15767d4519afdca11d180f8f3bd97a7c", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f8d1e5ca55ca37137adf9d89dda0080238b1baf/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f8d1e5ca55ca37137adf9d89dda0080238b1baf/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=9f8d1e5ca55ca37137adf9d89dda0080238b1baf", "patch": "@@ -13762,12 +13762,6 @@ package body Sem_Prag is\n                Error_Msg_N (\"Unchecked_Union must not be tagged\", Typ);\n                return;\n \n-            elsif Is_Limited_Type (Typ) then\n-               Error_Msg_N\n-                 (\"Unchecked_Union must not be limited record type\", Typ);\n-               Explain_Limited_Type (Typ, Typ);\n-               return;\n-\n             else\n                if not Has_Discriminants (Typ) then\n                   Error_Msg_N"}, {"sha": "bfda0a73c56cba14177e50df7649bf3fa46eeec2", "filename": "gcc/ada/vms_data.ads", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f8d1e5ca55ca37137adf9d89dda0080238b1baf/gcc%2Fada%2Fvms_data.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f8d1e5ca55ca37137adf9d89dda0080238b1baf/gcc%2Fada%2Fvms_data.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fvms_data.ads?ref=9f8d1e5ca55ca37137adf9d89dda0080238b1baf", "patch": "@@ -6119,6 +6119,30 @@ package VMS_Data is\n    --   See 'HELP GNAT COMPILE /WIDE_CHARACTER_ENCODING' for an explanation\n    --   about the different character encoding methods.\n \n+   S_Pretty_Enums     : aliased constant S := \"/ENUM_CASING=\"              &\n+                                              \"AS_DECLARED \"               &\n+                                                 \"-neD \"                   &\n+                                              \"LOWER_CASE \"                &\n+                                                 \"-neL \"                   &\n+                                              \"UPPER_CASE \"                &\n+                                                 \"-neU \"                   &\n+                                              \"MIXED_CASE \"                &\n+                                                 \"-neM\";\n+   --        /ENUM_CASING=name-option\n+   --\n+   --   Specify the casing of enumeration literals. If not specified, the\n+   --   casing of enumeration literals is defined by the NAME_CASING option.\n+   --   'name-option' may be one of:\n+   --\n+   --      AS_DECLARED       Literals casing for defining occurrences are\n+   --                        as they appear in the source file.\n+   --\n+   --      LOWER_CASE        Literals are in lower case.\n+   --\n+   --      UPPER_CASE        Literals are in upper case.\n+   --\n+   --      MIXED_CASE        Literals are in mixed case.\n+\n    S_Pretty_Files     : aliased constant S := \"/FILES=@\"                   &\n                                                  \"-files=@\";\n    --      /FILES=filename\n@@ -6369,6 +6393,7 @@ package VMS_Data is\n                         S_Pretty_Eol              'Access,\n                         S_Pretty_Ext              'Access,\n                         S_Pretty_Encoding         'Access,\n+                        S_Pretty_Enums            'Access,\n                         S_Pretty_Files            'Access,\n                         S_Pretty_Follow           'Access,\n                         S_Pretty_Forced           'Access,"}]}