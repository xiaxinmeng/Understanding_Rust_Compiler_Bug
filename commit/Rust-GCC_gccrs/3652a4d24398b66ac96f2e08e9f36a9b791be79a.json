{"sha": "3652a4d24398b66ac96f2e08e9f36a9b791be79a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzY1MmE0ZDI0Mzk4YjY2YWM5NmYyZTA4ZTlmMzZhOWI3OTFiZTc5YQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2017-10-10T17:47:35Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2017-10-10T17:47:35Z"}, "message": "x86-tune.def (X86_TUNE_AVOID_FALSE_DEP_FOR_BMI, [...]): Move to right spot in the file.\n\n\n\t* x86-tune.def (X86_TUNE_AVOID_FALSE_DEP_FOR_BMI, X86_TUNE_ADJUST_UNROLL,\n\tX86_TUNE_ONE_IF_CONV_INSN): Move to right spot in the file.\n\nFrom-SVN: r253598", "tree": {"sha": "61291ced3ba71bb3be8ef4d0bcbf6056f3e01d11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/61291ced3ba71bb3be8ef4d0bcbf6056f3e01d11"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3652a4d24398b66ac96f2e08e9f36a9b791be79a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3652a4d24398b66ac96f2e08e9f36a9b791be79a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3652a4d24398b66ac96f2e08e9f36a9b791be79a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3652a4d24398b66ac96f2e08e9f36a9b791be79a/comments", "author": null, "committer": null, "parents": [{"sha": "f1e2a004031aa61ee6b8cef293c81942053953f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1e2a004031aa61ee6b8cef293c81942053953f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1e2a004031aa61ee6b8cef293c81942053953f4"}], "stats": {"total": 38, "additions": 22, "deletions": 16}, "files": [{"sha": "41d3baf863e7630468e9a91d7b5c9f444607522e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3652a4d24398b66ac96f2e08e9f36a9b791be79a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3652a4d24398b66ac96f2e08e9f36a9b791be79a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3652a4d24398b66ac96f2e08e9f36a9b791be79a", "patch": "@@ -1,3 +1,8 @@\n+2017-10-10  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* x86-tune.def (X86_TUNE_AVOID_FALSE_DEP_FOR_BMI, X86_TUNE_ADJUST_UNROLL,\n+\tX86_TUNE_ONE_IF_CONV_INSN): Move to right spot in the file.\n+\n 2017-10-10  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* wide-int.h (wide_int_ref_storage): Make host_dependent_precision\n@@ -359,6 +364,7 @@\n \n \t* builtins.def (BUILT_IN_SETJMP): Revert latest change.\n \n+2017-10-08  Jan Hubicka  <hubicka@ucw.cz>\n 2017-10-08  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* i386.c (ix86_expand_set_or_movmem): Disable 512bit loops for targets"}, {"sha": "9d01761eff9aa1718fbf613f6563ab141753e23f", "filename": "gcc/config/i386/x86-tune.def", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3652a4d24398b66ac96f2e08e9f36a9b791be79a/gcc%2Fconfig%2Fi386%2Fx86-tune.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3652a4d24398b66ac96f2e08e9f36a9b791be79a/gcc%2Fconfig%2Fi386%2Fx86-tune.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86-tune.def?ref=3652a4d24398b66ac96f2e08e9f36a9b791be79a", "patch": "@@ -284,6 +284,22 @@ DEF_TUNE (X86_TUNE_USE_BT, \"use_bt\",\n           m_CORE_ALL | m_BONNELL | m_SILVERMONT | m_KNL | m_KNM | m_INTEL\n \t  | m_LAKEMONT | m_AMD_MULTIPLE | m_GENERIC)\n \n+/* X86_TUNE_AVOID_FALSE_DEP_FOR_BMI: Avoid false dependency\n+   for bit-manipulation instructions.  */\n+DEF_TUNE (X86_TUNE_AVOID_FALSE_DEP_FOR_BMI, \"avoid_false_dep_for_bmi\",\n+\t  m_SANDYBRIDGE | m_HASWELL | m_GENERIC)\n+\n+/* X86_TUNE_ADJUST_UNROLL: This enables adjusting the unroll factor based\n+   on hardware capabilities. Bdver3 hardware has a loop buffer which makes\n+   unrolling small loop less important. For, such architectures we adjust\n+   the unroll factor so that the unrolled loop fits the loop buffer.  */\n+DEF_TUNE (X86_TUNE_ADJUST_UNROLL, \"adjust_unroll_factor\", m_BDVER3 | m_BDVER4)\n+\n+/* X86_TUNE_ONE_IF_CONV_INSNS: Restrict a number of cmov insns in\n+   if-converted sequence to one.  */\n+DEF_TUNE (X86_TUNE_ONE_IF_CONV_INSN, \"one_if_conv_insn\",\n+\t  m_SILVERMONT | m_KNL | m_KNM | m_INTEL | m_CORE_ALL | m_GENERIC)\n+\n /*****************************************************************************/\n /* 387 instruction selection tuning                                          */\n /*****************************************************************************/\n@@ -503,11 +519,6 @@ DEF_TUNE (X86_TUNE_NOT_VECTORMODE, \"not_vectormode\", m_K6)\n DEF_TUNE (X86_TUNE_AVOID_VECTOR_DECODE, \"avoid_vector_decode\",\n           m_K8)\n \n-/* X86_TUNE_AVOID_FALSE_DEP_FOR_BMI: Avoid false dependency\n-   for bit-manipulation instructions.  */\n-DEF_TUNE (X86_TUNE_AVOID_FALSE_DEP_FOR_BMI, \"avoid_false_dep_for_bmi\",\n-\t  m_SANDYBRIDGE | m_HASWELL | m_GENERIC)\n-\n /*****************************************************************************/\n /* This never worked well before.                                            */\n /*****************************************************************************/\n@@ -525,14 +536,3 @@ DEF_TUNE (X86_TUNE_QIMODE_MATH, \"qimode_math\", ~0U)\n    arithmetic to 32bit via PROMOTE_MODE macro.  This code generation scheme\n    is usually used for RISC targets.  */\n DEF_TUNE (X86_TUNE_PROMOTE_QI_REGS, \"promote_qi_regs\", 0U)\n-\n-/* X86_TUNE_ADJUST_UNROLL: This enables adjusting the unroll factor based\n-   on hardware capabilities. Bdver3 hardware has a loop buffer which makes\n-   unrolling small loop less important. For, such architectures we adjust\n-   the unroll factor so that the unrolled loop fits the loop buffer.  */\n-DEF_TUNE (X86_TUNE_ADJUST_UNROLL, \"adjust_unroll_factor\", m_BDVER3 | m_BDVER4)\n-\n-/* X86_TUNE_ONE_IF_CONV_INSNS: Restrict a number of cmov insns in\n-   if-converted sequence to one.  */\n-DEF_TUNE (X86_TUNE_ONE_IF_CONV_INSN, \"one_if_conv_insn\",\n-\t  m_SILVERMONT | m_KNL | m_KNM | m_INTEL | m_CORE_ALL | m_GENERIC)"}]}