{"sha": "50399bb138e173f05ad6677b4cd3975c1d9df984", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTAzOTliYjEzOGUxNzNmMDVhZDY2NzdiNGNkMzk3NWMxZDlkZjk4NA==", "commit": {"author": {"name": "Alan Lawrence", "email": "alan.lawrence@arm.com", "date": "2015-08-20T12:38:20Z"}, "committer": {"name": "Alan Lawrence", "email": "alalaw01@gcc.gnu.org", "date": "2015-08-20T12:38:20Z"}, "message": "[ARM] Hide existing float16 intrinsics unless we have a scalar __fp16 type\n\ngcc/:\n\n\t* config/arm/arm-builtins.c (arm_init_simd_builtin_types): Move\n\tinitialization of HFmode scalar type (float16_t) to...\n\t(arm_init_fp16_builtins): ... Here. Combine with __fp16 initialization\n\tcode.\n\n\t(arm_init_builtins): Call arm_init_fp16_builtins earlier and always.\n\n\t* config/arm/arm_neon.h (vcvt_f16_f32, vcvt_f32_f16): Condition on\n\thaving an -mfp16-format.\n\ngcc/testsuite/:\n\n\t* lib/target-supports.exp\n\t(check_effective_target_arm_neon_fp16_ok_nocache): Add flag variants\n\twith -mfp16-format=ieee.\n\nFrom-SVN: r227033", "tree": {"sha": "dec34ee333b5671793a861a5b17b11e84b71ceb5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dec34ee333b5671793a861a5b17b11e84b71ceb5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/50399bb138e173f05ad6677b4cd3975c1d9df984", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50399bb138e173f05ad6677b4cd3975c1d9df984", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50399bb138e173f05ad6677b4cd3975c1d9df984", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50399bb138e173f05ad6677b4cd3975c1d9df984/comments", "author": null, "committer": null, "parents": [{"sha": "30aa6349e193c1164ab0fba1de332053c2d2ed51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30aa6349e193c1164ab0fba1de332053c2d2ed51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30aa6349e193c1164ab0fba1de332053c2d2ed51"}], "stats": {"total": 60, "additions": 43, "deletions": 17}, "files": [{"sha": "be061308a562ba7aa1caba82444b4d61a1b3e5ce", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50399bb138e173f05ad6677b4cd3975c1d9df984/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50399bb138e173f05ad6677b4cd3975c1d9df984/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=50399bb138e173f05ad6677b4cd3975c1d9df984", "patch": "@@ -1,3 +1,15 @@\n+2015-08-20  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\t* config/arm/arm-builtins.c (arm_init_simd_builtin_types): Move\n+\tinitialization of HFmode scalar type (float16_t) to...\n+\t(arm_init_fp16_builtins): ... Here. Combine with __fp16 initialization\n+\tcode.\n+\n+\t(arm_init_builtins): Call arm_init_fp16_builtins earlier and always.\n+\n+\t* config/arm/arm_neon.h (vcvt_f16_f32, vcvt_f32_f16): Condition on\n+\thaving an -mfp16-format.\n+\n 2015-08-20  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/i386/predicates.md (vector_all_ones_operand): Use"}, {"sha": "599769f4979880fe0f40b3a5adebc1d9433a4f40", "filename": "gcc/config/arm/arm-builtins.c", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50399bb138e173f05ad6677b4cd3975c1d9df984/gcc%2Fconfig%2Farm%2Farm-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50399bb138e173f05ad6677b4cd3975c1d9df984/gcc%2Fconfig%2Farm%2Farm-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-builtins.c?ref=50399bb138e173f05ad6677b4cd3975c1d9df984", "patch": "@@ -769,13 +769,6 @@ arm_init_simd_builtin_types (void)\n   int nelts = sizeof (arm_simd_types) / sizeof (arm_simd_types[0]);\n   tree tdecl;\n \n-  /* Initialize the HFmode scalar type.  */\n-  arm_simd_floatHF_type_node = make_node (REAL_TYPE);\n-  TYPE_PRECISION (arm_simd_floatHF_type_node) = GET_MODE_PRECISION (HFmode);\n-  layout_type (arm_simd_floatHF_type_node);\n-  (*lang_hooks.types.register_builtin_type) (arm_simd_floatHF_type_node,\n-\t\t\t\t\t     \"__builtin_neon_hf\");\n-\n   /* Poly types are a world of their own.  In order to maintain legacy\n      ABI, they get initialized using the old interface, and don't get\n      an entry in our mangling table, consequently, they get default\n@@ -823,6 +816,8 @@ arm_init_simd_builtin_types (void)\n      mangling.  */\n \n   /* Continue with standard types.  */\n+  /* The __builtin_simd{64,128}_float16 types are kept private unless\n+     we have a scalar __fp16 type.  */\n   arm_simd_types[Float16x4_t].eltype = arm_simd_floatHF_type_node;\n   arm_simd_types[Float32x2_t].eltype = float_type_node;\n   arm_simd_types[Float32x4_t].eltype = float_type_node;\n@@ -1702,10 +1697,12 @@ arm_init_iwmmxt_builtins (void)\n static void\n arm_init_fp16_builtins (void)\n {\n-  tree fp16_type = make_node (REAL_TYPE);\n-  TYPE_PRECISION (fp16_type) = 16;\n-  layout_type (fp16_type);\n-  (*lang_hooks.types.register_builtin_type) (fp16_type, \"__fp16\");\n+  arm_simd_floatHF_type_node = make_node (REAL_TYPE);\n+  TYPE_PRECISION (arm_simd_floatHF_type_node) = GET_MODE_PRECISION (HFmode);\n+  layout_type (arm_simd_floatHF_type_node);\n+  if (arm_fp16_format)\n+    (*lang_hooks.types.register_builtin_type) (arm_simd_floatHF_type_node,\n+\t\t\t\t\t       \"__fp16\");\n }\n \n static void\n@@ -1750,12 +1747,13 @@ arm_init_builtins (void)\n   if (TARGET_REALLY_IWMMXT)\n     arm_init_iwmmxt_builtins ();\n \n+  /* This creates the arm_simd_floatHF_type_node so must come before\n+     arm_init_neon_builtins which uses it.  */\n+  arm_init_fp16_builtins ();\n+\n   if (TARGET_NEON)\n     arm_init_neon_builtins ();\n \n-  if (arm_fp16_format)\n-    arm_init_fp16_builtins ();\n-\n   if (TARGET_CRC32)\n     arm_init_crc32_builtins ();\n "}, {"sha": "2b30be61a46a0c906478c599a005c27cd467dfa6", "filename": "gcc/config/arm/arm_neon.h", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50399bb138e173f05ad6677b4cd3975c1d9df984/gcc%2Fconfig%2Farm%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50399bb138e173f05ad6677b4cd3975c1d9df984/gcc%2Fconfig%2Farm%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_neon.h?ref=50399bb138e173f05ad6677b4cd3975c1d9df984", "patch": "@@ -41,7 +41,9 @@ typedef __simd64_int8_t int8x8_t;\n typedef __simd64_int16_t int16x4_t;\n typedef __simd64_int32_t int32x2_t;\n typedef __builtin_neon_di int64x1_t;\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n typedef __simd64_float16_t float16x4_t;\n+#endif\n typedef __simd64_float32_t float32x2_t;\n typedef __simd64_poly8_t poly8x8_t;\n typedef __simd64_poly16_t poly16x4_t;\n@@ -6220,21 +6222,25 @@ vcvtq_u32_f32 (float32x4_t __a)\n }\n \n #if ((__ARM_FP & 0x2) != 0)\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n __extension__ static __inline float16x4_t __attribute__ ((__always_inline__))\n vcvt_f16_f32 (float32x4_t __a)\n {\n   return (float16x4_t)__builtin_neon_vcvtv4hfv4sf (__a);\n }\n-\n #endif\n+#endif\n+\n #if ((__ARM_FP & 0x2) != 0)\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n __extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n vcvt_f32_f16 (float16x4_t __a)\n {\n   return (float32x4_t)__builtin_neon_vcvtv4sfv4hf (__a);\n }\n-\n #endif\n+#endif\n+\n __extension__ static __inline int32x2_t __attribute__ ((__always_inline__))\n vcvt_n_s32_f32 (float32x2_t __a, const int __b)\n {"}, {"sha": "eed9f5b39550699dce497626366c72cba2a89d24", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50399bb138e173f05ad6677b4cd3975c1d9df984/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50399bb138e173f05ad6677b4cd3975c1d9df984/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=50399bb138e173f05ad6677b4cd3975c1d9df984", "patch": "@@ -1,3 +1,9 @@\n+2015-08-20  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\t* lib/target-supports.exp\n+\t(check_effective_target_arm_neon_fp16_ok_nocache): Add flag variants\n+\twith -mfp16-format=ieee.\n+\n 2015-08-20  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/67065"}, {"sha": "ef192111c435ccbae857457b42729a32e94a9f26", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50399bb138e173f05ad6677b4cd3975c1d9df984/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50399bb138e173f05ad6677b4cd3975c1d9df984/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=50399bb138e173f05ad6677b4cd3975c1d9df984", "patch": "@@ -2714,7 +2714,11 @@ proc check_effective_target_arm_neon_fp16_ok_nocache { } {\n     set et_arm_neon_fp16_flags \"\"\n     if { [check_effective_target_arm32] } {\n \tforeach flags {\"\" \"-mfloat-abi=softfp\" \"-mfpu=neon-fp16\"\n-\t               \"-mfpu=neon-fp16 -mfloat-abi=softfp\"} {\n+\t\t       \"-mfpu=neon-fp16 -mfloat-abi=softfp\"\n+\t\t       \"-mfp16-format=ieee\"\n+\t\t       \"-mfloat-abi=softfp -mfp16-format=ieee\"\n+\t\t       \"-mfpu=neon-fp16 -mfp16-format=ieee\"\n+\t\t       \"-mfpu=neon-fp16 -mfloat-abi=softfp -mfp16-format=ieee\"} {\n \t    if { [check_no_compiler_messages_nocache arm_neon_fp_16_ok object {\n \t\t#include \"arm_neon.h\"\n \t\tfloat16x4_t"}]}