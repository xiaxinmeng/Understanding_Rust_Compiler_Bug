{"sha": "9ace5d4dab2ab39072b0f07089621a823580f27c", "node_id": "C_kwDOANBUbNoAKDlhY2U1ZDRkYWIyYWIzOTA3MmIwZjA3MDg5NjIxYTgyMzU4MGYyN2M", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-04-26T04:19:40Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-04-26T20:12:08Z"}, "message": "c++: pack init-capture of unresolved overload [PR102629]\n\nHere we were failing to diagnose that the initializer for the capture pack\nis an unresolved overload.  It turns out that the reason we didn't recognize\nthe deduction failure in do_auto_deduction was that the individual 'auto' in\nthe expansion of the capture pack was still marked as a parameter pack, so\nwe were deducing it to an empty pack instead of failing.\n\n\tPR c++/102629\n\ngcc/cp/ChangeLog:\n\n\t* pt.cc (gen_elem_of_pack_expansion_instantiation): Clear\n\tTEMPLATE_TYPE_PARAMETER_PACK on auto.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp2a/lambda-pack-init7.C: New test.", "tree": {"sha": "29717405566f8b37e0082d4d25203d4384bae88d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/29717405566f8b37e0082d4d25203d4384bae88d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ace5d4dab2ab39072b0f07089621a823580f27c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ace5d4dab2ab39072b0f07089621a823580f27c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ace5d4dab2ab39072b0f07089621a823580f27c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ace5d4dab2ab39072b0f07089621a823580f27c/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2579d6124d2f1ecf77c6c599f65cebbf29d00fd1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2579d6124d2f1ecf77c6c599f65cebbf29d00fd1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2579d6124d2f1ecf77c6c599f65cebbf29d00fd1"}], "stats": {"total": 26, "additions": 25, "deletions": 1}, "files": [{"sha": "3cf1d7af8d2d75bbf862ff527570e27b923a1550", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ace5d4dab2ab39072b0f07089621a823580f27c/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ace5d4dab2ab39072b0f07089621a823580f27c/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=9ace5d4dab2ab39072b0f07089621a823580f27c", "patch": "@@ -12682,7 +12682,13 @@ gen_elem_of_pack_expansion_instantiation (tree pattern,\n     t = tsubst_expr (pattern, args, complain, in_decl,\n \t\t     /*integral_constant_expression_p=*/false);\n   else\n-    t = tsubst (pattern, args, complain, in_decl);\n+    {\n+      t = tsubst (pattern, args, complain, in_decl);\n+      if (is_auto (t) && !ith_elem_is_expansion)\n+\t/* When expanding the fake auto... pack expansion from add_capture, we\n+\t   need to mark that the expansion is no longer a pack.  */\n+\tTEMPLATE_TYPE_PARAMETER_PACK (t) = false;\n+    }\n \n   /*  If the Ith argument pack element is a pack expansion, then\n       the Ith element resulting from the substituting is going to"}, {"sha": "f3c3899e97a130c574ffb65fae385ccf53217569", "filename": "gcc/testsuite/g++.dg/cpp2a/lambda-pack-init7.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ace5d4dab2ab39072b0f07089621a823580f27c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-pack-init7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ace5d4dab2ab39072b0f07089621a823580f27c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-pack-init7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-pack-init7.C?ref=9ace5d4dab2ab39072b0f07089621a823580f27c", "patch": "@@ -0,0 +1,18 @@\n+// PR c++/102629\n+// { dg-do compile { target c++20 } }\n+\n+template <class T> T&& forward(T&);\n+template <class T> T&& forward(T&&);\n+\n+struct S {};\n+\n+template <typename... Args>\n+void foo(Args&&... args) {\n+  [...args = forward<Args> /*(args)*/] { // { dg-error \"\" }\n+    [](auto...) { } (forward<Args>(args)...);\n+  };\n+}\n+\n+void bar( ) {\n+  foo(S{});\n+}"}]}