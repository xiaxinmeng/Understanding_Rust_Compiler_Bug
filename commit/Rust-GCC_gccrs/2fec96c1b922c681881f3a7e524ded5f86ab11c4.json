{"sha": "2fec96c1b922c681881f3a7e524ded5f86ab11c4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmZlYzk2YzFiOTIyYzY4MTg4MWYzYTdlNTI0ZGVkNWY4NmFiMTFjNA==", "commit": {"author": {"name": "Andrew Pinski", "email": "pinskia@physics.uc.edu", "date": "2004-05-28T20:32:20Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2004-05-28T20:32:20Z"}, "message": "c-common.c (c_estimate_num_insns_1): Kill.\n\n2004-05-28  Andrew Pinski  <pinskia@physics.uc.edu>\n\n        * c-common.c (c_estimate_num_insns_1): Kill.\n        (c_estimate_num_insns): Kill.\n        * c-common.h (c_estimate_num_insns): Kill.\n\nFrom-SVN: r82377", "tree": {"sha": "63d46dcc027fefc4d9f02fc56df43d11defc4c12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/63d46dcc027fefc4d9f02fc56df43d11defc4c12"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2fec96c1b922c681881f3a7e524ded5f86ab11c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fec96c1b922c681881f3a7e524ded5f86ab11c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fec96c1b922c681881f3a7e524ded5f86ab11c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fec96c1b922c681881f3a7e524ded5f86ab11c4/comments", "author": null, "committer": null, "parents": [{"sha": "45863ba3631b41587cc34ea3f7621bf191f4eb9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45863ba3631b41587cc34ea3f7621bf191f4eb9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45863ba3631b41587cc34ea3f7621bf191f4eb9f"}], "stats": {"total": 140, "additions": 9, "deletions": 131}, "files": [{"sha": "4f7f078579d96cd628f52085ce0ba93e8eb8ab3d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fec96c1b922c681881f3a7e524ded5f86ab11c4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fec96c1b922c681881f3a7e524ded5f86ab11c4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2fec96c1b922c681881f3a7e524ded5f86ab11c4", "patch": "@@ -1,10 +1,14 @@\n 2004-05-28  Andrew Pinski  <pinskia@physics.uc.edu>\n \n-        * gthr-posix.h: Check for _POSIX_PRIORITY_SCHEDULING\n-        when checking for _POSIX_THREAD_PRIORITY_SCHEDULING.\n-        Remove comment about not checking for\n-        _POSIX_PRIORITY_SCHEDULING.\n-        * gthr-posix.c: Likewise.\n+\t* c-common.c (c_estimate_num_insns_1): Kill.\n+\t(c_estimate_num_insns): Kill.\n+\t* c-common.h (c_estimate_num_insns): Kill.\n+\n+\t* gthr-posix.h: Check for _POSIX_PRIORITY_SCHEDULING\n+\twhen checking for _POSIX_THREAD_PRIORITY_SCHEDULING.\n+\tRemove comment about not checking for\n+\t_POSIX_PRIORITY_SCHEDULING.\n+\t* gthr-posix.c: Likewise.\n \n 2004-05-28  Paolo Bonzini  <bonzini@gnu.org>\n \t    Roger Sayle  <roger@eyesopen.com>"}, {"sha": "4aa17e622dc226cb964db2fa3f04bc8a7b784c82", "filename": "gcc/c-common.c", "status": "modified", "additions": 0, "deletions": 125, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fec96c1b922c681881f3a7e524ded5f86ab11c4/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fec96c1b922c681881f3a7e524ded5f86ab11c4/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=2fec96c1b922c681881f3a7e524ded5f86ab11c4", "patch": "@@ -5758,131 +5758,6 @@ resort_sorted_fields (void *obj,\n \t resort_field_decl_cmp);\n }\n \n-/* Used by estimate_num_insns.  Estimate number of instructions seen\n-   by given statement.  */\n-static tree\n-c_estimate_num_insns_1 (tree *tp, int *walk_subtrees, void *data)\n-{\n-  int *count = data;\n-  tree x = *tp;\n-\n-  if (TYPE_P (x) || DECL_P (x))\n-    {\n-      *walk_subtrees = 0;\n-      return NULL;\n-    }\n-  /* Assume that constants and references counts nothing.  These should\n-     be majorized by amount of operations among them we count later\n-     and are common target of CSE and similar optimizations.  */\n-  if (TREE_CODE_CLASS (TREE_CODE (x)) == 'c'\n-      || TREE_CODE_CLASS (TREE_CODE (x)) == 'r')\n-    return NULL;\n-  switch (TREE_CODE (x))\n-    { \n-    /* Recognize assignments of large structures and constructors of\n-       big arrays.  */\n-    case MODIFY_EXPR:\n-    case CONSTRUCTOR:\n-      {\n-\tHOST_WIDE_INT size;\n-\n-\tsize = int_size_in_bytes (TREE_TYPE (x));\n-\n-\tif (size < 0 || size > MOVE_MAX_PIECES * MOVE_RATIO)\n-\t  *count += 10;\n-\telse\n-\t  *count += ((size + MOVE_MAX_PIECES - 1) / MOVE_MAX_PIECES);\n-      }\n-      break;\n-    case CALL_EXPR:\n-      {\n-\ttree decl = get_callee_fndecl (x);\n-\n-\tif (decl && DECL_BUILT_IN (decl))\n-\t  switch (DECL_FUNCTION_CODE (decl))\n-\t    {\n-\t    case BUILT_IN_CONSTANT_P:\n-\t      *walk_subtrees = 0;\n-\t      return NULL_TREE;\n-\t    case BUILT_IN_EXPECT:\n-\t      return NULL_TREE;\n-\t    default:\n-\t      break;\n-\t    }\n-\t*count += 10;\n-\tbreak;\n-      }\n-    /* Few special cases of expensive operations.  This is useful\n-       to avoid inlining on functions having too many of these.  */\n-    case TRUNC_DIV_EXPR:\n-    case CEIL_DIV_EXPR:\n-    case FLOOR_DIV_EXPR:\n-    case ROUND_DIV_EXPR:\n-    case TRUNC_MOD_EXPR:\n-    case CEIL_MOD_EXPR:\n-    case FLOOR_MOD_EXPR:\n-    case ROUND_MOD_EXPR:\n-    case RDIV_EXPR:\n-      *count += 10;\n-      break;\n-    /* Various containers that will produce no code themselves.  */\n-    case INIT_EXPR:\n-    case TARGET_EXPR:\n-    case BIND_EXPR:\n-    case BLOCK:\n-    case TREE_LIST:\n-    case TREE_VEC:\n-    case IDENTIFIER_NODE:\n-    case PLACEHOLDER_EXPR:\n-    case WITH_CLEANUP_EXPR:\n-    case CLEANUP_POINT_EXPR:\n-    case NOP_EXPR:\n-    case VIEW_CONVERT_EXPR:\n-    case SAVE_EXPR:\n-    case UNSAVE_EXPR:\n-    case COMPLEX_EXPR:\n-    case REALPART_EXPR:\n-    case IMAGPART_EXPR:\n-    case TRY_CATCH_EXPR:\n-    case TRY_FINALLY_EXPR:\n-    case LABEL_EXPR:\n-    case EXIT_EXPR:\n-    case LABELED_BLOCK_EXPR:\n-    case EXIT_BLOCK_EXPR:\n-\n-    case EXPR_STMT:\n-    case COMPOUND_STMT:\n-    case RETURN_STMT:\n-    case LABEL_STMT:\n-    case SCOPE_STMT:\n-    case CASE_LABEL:\n-    case STMT_EXPR:\n-    case CLEANUP_STMT:\n-\n-    case SIZEOF_EXPR:\n-    case ARROW_EXPR:\n-    case ALIGNOF_EXPR:\n-      break;\n-    case DECL_STMT:\n-      /* Do not account static initializers.  */\n-      if (TREE_STATIC (TREE_OPERAND (x, 0)))\n-\t*walk_subtrees = 0;\n-      break;\n-    default:\n-      (*count)++;\n-    }\n-  return NULL;\n-}\n-\n-/*  Estimate number of instructions that will be created by expanding the body.  */\n-int\n-c_estimate_num_insns (tree decl)\n-{\n-  int num = 0;\n-  walk_tree_without_duplicates (&DECL_SAVED_TREE (decl), c_estimate_num_insns_1, &num);\n-  return num;\n-}\n-\n /* Issue the error given by MSGID, indicating that it occurred before\n    TOKEN, which had the associated VALUE.  */\n "}, {"sha": "a9a0c0e45a629fc938007f9e2246699894c8e249", "filename": "gcc/c-common.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fec96c1b922c681881f3a7e524ded5f86ab11c4/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fec96c1b922c681881f3a7e524ded5f86ab11c4/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=2fec96c1b922c681881f3a7e524ded5f86ab11c4", "patch": "@@ -1221,7 +1221,6 @@ extern void c_common_no_more_pch (void);\n extern void builtin_define_with_value (const char *, const char *, int);\n extern void c_stddef_cpp_builtins (void);\n extern void fe_file_change (const struct line_map *);\n-extern int c_estimate_num_insns (tree decl);\n extern void c_parse_error (const char *, enum cpp_ttype, tree);\n \n /* The following have been moved here from c-tree.h, since they're needed"}]}