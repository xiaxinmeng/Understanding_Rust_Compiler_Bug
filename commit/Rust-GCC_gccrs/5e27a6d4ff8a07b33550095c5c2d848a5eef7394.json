{"sha": "5e27a6d4ff8a07b33550095c5c2d848a5eef7394", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWUyN2E2ZDRmZjhhMDdiMzM1NTAwOTVjNWMyZDg0OGE1ZWVmNzM5NA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-07-20T12:58:28Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-07-20T12:58:28Z"}, "message": "re PR target/49780 ([x32] internal compiler error: in create_mem_ref, at tree-ssa-address.c:806)\n\n\tPR target/49780\n\t* config/i386/predicates.md (no_seg_addres_operand): No more special.\n\t* config/i386/i386.c (ix86_decompose_address): Allow only subregs\n\tof DImode hard registers in base.\n\t(ix86_legitimate_address_p): Allow SImode and DImode base and index\n\tregisters.\n\nFrom-SVN: r176506", "tree": {"sha": "6b28364ed1389c1736ddfe62eddb340973aee9fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b28364ed1389c1736ddfe62eddb340973aee9fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e27a6d4ff8a07b33550095c5c2d848a5eef7394", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e27a6d4ff8a07b33550095c5c2d848a5eef7394", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e27a6d4ff8a07b33550095c5c2d848a5eef7394", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e27a6d4ff8a07b33550095c5c2d848a5eef7394/comments", "author": null, "committer": null, "parents": [{"sha": "74d8fa44465f96c843fbf4e470b2483c8c5e8988", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74d8fa44465f96c843fbf4e470b2483c8c5e8988", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74d8fa44465f96c843fbf4e470b2483c8c5e8988"}], "stats": {"total": 34, "additions": 24, "deletions": 10}, "files": [{"sha": "4f8934a0e30265c397ec692415ae79b08f48f643", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e27a6d4ff8a07b33550095c5c2d848a5eef7394/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e27a6d4ff8a07b33550095c5c2d848a5eef7394/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5e27a6d4ff8a07b33550095c5c2d848a5eef7394", "patch": "@@ -1,7 +1,15 @@\n+2011-07-20  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/49780\n+\t* config/i386/predicates.md (no_seg_addres_operand): No more special.\n+\t* config/i386/i386.c (ix86_decompose_address): Allow only subregs\n+\tof DImode hard registers in base.\n+\t(ix86_legitimate_address_p): Allow SImode and DImode base and index\n+\tregisters.\n+\n 2011-07-20  Richard Guenther  <rguenther@suse.de>\n \n-\t* tree-ssa-structalias.c (new_var_info): Allocate oldsolution\n-\tlazily.\n+\t* tree-ssa-structalias.c (new_var_info): Allocate oldsolution lazily.\n \t(unify_nodes): Deal with that.\n \t(solve_graph): Likewise.\n \n@@ -91,8 +99,8 @@\n \t(GNU_USER_LINK_EMULATION32, GNU_USER_LINK_EMULATION64)\n \t(GNU_USER_LINK_EMULATIONN32): New macros.\n \n-\t* config.gcc (mips64*-*-linux* | mipsisa64*-*-linux* |\n-\tmips-*-linux*): Use the new headers.\n+\t* config.gcc (mips64*-*-linux* | mipsisa64*-*-linux* | mips-*-linux*):\n+\tUse the new headers.\n \n 2011-07-19  Richard Sandiford  <rdsandiford@googlemail.com>\n "}, {"sha": "22f756b47fd4b10b7a6b35320534dc67efaf6af7", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e27a6d4ff8a07b33550095c5c2d848a5eef7394/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e27a6d4ff8a07b33550095c5c2d848a5eef7394/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=5e27a6d4ff8a07b33550095c5c2d848a5eef7394", "patch": "@@ -11085,8 +11085,16 @@ ix86_decompose_address (rtx addr, struct ix86_address *out)\n   int retval = 1;\n   enum ix86_address_seg seg = SEG_DEFAULT;\n \n-  if (REG_P (addr) || GET_CODE (addr) == SUBREG)\n+  if (REG_P (addr))\n     base = addr;\n+  else if (GET_CODE (addr) == SUBREG)\n+    {\n+      /* Allow only subregs of DImode hard regs.  */\n+      if (register_no_elim_operand (SUBREG_REG (addr), DImode))\n+\tbase = addr;\n+      else\n+\treturn 0;\n+    }\n   else if (GET_CODE (addr) == PLUS)\n     {\n       rtx addends[4], op;\n@@ -11643,8 +11651,7 @@ ix86_legitimate_address_p (enum machine_mode mode ATTRIBUTE_UNUSED,\n \t/* Base is not a register.  */\n \treturn false;\n \n-      if (GET_MODE (base) != Pmode)\n-\t/* Base is not in Pmode.  */\n+      if (GET_MODE (base) != SImode && GET_MODE (base) != DImode)\n \treturn false;\n \n       if ((strict && ! REG_OK_FOR_BASE_STRICT_P (reg))\n@@ -11672,8 +11679,7 @@ ix86_legitimate_address_p (enum machine_mode mode ATTRIBUTE_UNUSED,\n \t/* Index is not a register.  */\n \treturn false;\n \n-      if (GET_MODE (index) != Pmode)\n-\t/* Index is not in Pmode.  */\n+      if (GET_MODE (index) != SImode && GET_MODE (index) != DImode)\n \treturn false;\n \n       if ((strict && ! REG_OK_FOR_INDEX_STRICT_P (reg))"}, {"sha": "fd935053f479addc723fe842a550239987cf5540", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e27a6d4ff8a07b33550095c5c2d848a5eef7394/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e27a6d4ff8a07b33550095c5c2d848a5eef7394/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=5e27a6d4ff8a07b33550095c5c2d848a5eef7394", "patch": "@@ -796,7 +796,7 @@\n \n ;; Return true if op if a valid address, and does not contain\n ;; a segment override.\n-(define_special_predicate \"no_seg_address_operand\"\n+(define_predicate \"no_seg_address_operand\"\n   (match_operand 0 \"address_operand\")\n {\n   struct ix86_address parts;"}]}