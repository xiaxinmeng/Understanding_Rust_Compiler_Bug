{"sha": "afa451b311dec27476941e6f307d04450d28ab88", "node_id": "C_kwDOANBUbNoAKGFmYTQ1MWIzMTFkZWMyNzQ3Njk0MWU2ZjMwN2QwNDQ1MGQyOGFiODg", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-03-21T12:40:20Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-03-21T12:40:20Z"}, "message": "Add initial support for unsized method resolution\n\nIn order to support slices, we end up with an operator overload call of:\n\n```\nimpl<T, I> Index<I> for [T]\nwhere\n    I: SliceIndex<[T]>,\n{\n    type Output = I::Output;\n\n    fn index(&self, index: I) -> &I::Output {\n        index.index(self)\n    }\n}\n```\n\nSo this means the self in this case is an array[T,capacity] and the index parameter is of type Range<usize>. In order to actually call this method\nwhich has a self parameter of [T] we need to be able to 'unsize' the array\ninto a slice.\n\nAddresses #849", "tree": {"sha": "7b7687f8ecd77c56213f13347f0c1491902cd26a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b7687f8ecd77c56213f13347f0c1491902cd26a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/afa451b311dec27476941e6f307d04450d28ab88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afa451b311dec27476941e6f307d04450d28ab88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/afa451b311dec27476941e6f307d04450d28ab88", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afa451b311dec27476941e6f307d04450d28ab88/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1bb9a29688ab4ddfec7f8d36ca2cee63c5f258d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bb9a29688ab4ddfec7f8d36ca2cee63c5f258d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1bb9a29688ab4ddfec7f8d36ca2cee63c5f258d2"}], "stats": {"total": 82, "additions": 82, "deletions": 0}, "files": [{"sha": "c7f7f406ebd614136d15ad4df7227be83ba08f22", "filename": "gcc/rust/backend/rust-compile-base.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afa451b311dec27476941e6f307d04450d28ab88/gcc%2Frust%2Fbackend%2Frust-compile-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afa451b311dec27476941e6f307d04450d28ab88/gcc%2Frust%2Fbackend%2Frust-compile-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-base.h?ref=afa451b311dec27476941e6f307d04450d28ab88", "patch": "@@ -72,6 +72,9 @@ class HIRCompileBase\n   tree resolve_indirection_adjustment (Resolver::Adjustment &adjustment,\n \t\t\t\t       tree expression, Location locus);\n \n+  tree resolve_unsized_adjustment (Resolver::Adjustment &adjustment,\n+\t\t\t\t   tree expression, Location locus);\n+\n   static void setup_attributes_on_fndecl (\n     tree fndecl, bool is_main_entry_point, HIR::Visibility &visibility,\n     const HIR::FunctionQualifiers &qualifiers, const AST::AttrVec &attrs);"}, {"sha": "74ab6a468a82f2e85951ddec3863c6f92c9a87b4", "filename": "gcc/rust/backend/rust-compile-expr.cc", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afa451b311dec27476941e6f307d04450d28ab88/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afa451b311dec27476941e6f307d04450d28ab88/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc?ref=afa451b311dec27476941e6f307d04450d28ab88", "patch": "@@ -1204,6 +1204,10 @@ HIRCompileBase::resolve_adjustements (\n \tcase Resolver::Adjustment::AdjustmentType::INDIRECTION:\n \t  e = resolve_indirection_adjustment (adjustment, e, locus);\n \t  break;\n+\n+\tcase Resolver::Adjustment::AdjustmentType::UNSIZE:\n+\t  e = resolve_unsized_adjustment (adjustment, e, locus);\n+\t  break;\n \t}\n     }\n \n@@ -1257,6 +1261,32 @@ HIRCompileBase::resolve_indirection_adjustment (\n \t\t\t\t\t\t   locus);\n }\n \n+tree\n+HIRCompileBase::resolve_unsized_adjustment (Resolver::Adjustment &adjustment,\n+\t\t\t\t\t    tree expression, Location locus)\n+{\n+  // assumes this is an array\n+  tree expr_type = TREE_TYPE (expression);\n+  rust_assert (TREE_CODE (expr_type) == ARRAY_TYPE);\n+\n+  // takes an array and returns a fat-pointer so this becomes a constructor\n+  // expression\n+  rust_assert (adjustment.get_expected ()->get_kind ()\n+\t       == TyTy::TypeKind::SLICE);\n+  tree fat_pointer\n+    = TyTyResolveCompile::compile (ctx, adjustment.get_expected ());\n+\n+  // make a constructor for this\n+  tree data = address_expression (expression, locus);\n+\n+  // fetch the size from the domain\n+  tree domain = TYPE_DOMAIN (expr_type);\n+  tree size = TYPE_MAX_VALUE (domain);\n+\n+  return ctx->get_backend ()->constructor_expression (fat_pointer, false,\n+\t\t\t\t\t\t      {data, size}, -1, locus);\n+}\n+\n void\n CompileExpr::visit (HIR::IdentifierExpr &expr)\n {"}, {"sha": "67c19084df929b52de0689ec9259c2d97f633862", "filename": "gcc/rust/typecheck/rust-autoderef.cc", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afa451b311dec27476941e6f307d04450d28ab88/gcc%2Frust%2Ftypecheck%2Frust-autoderef.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afa451b311dec27476941e6f307d04450d28ab88/gcc%2Frust%2Ftypecheck%2Frust-autoderef.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-autoderef.cc?ref=afa451b311dec27476941e6f307d04450d28ab88", "patch": "@@ -98,6 +98,27 @@ Adjuster::try_raw_deref_type (const TyTy::BaseType *ty)\n   return Adjustment (Adjustment::AdjustmentType::INDIRECTION, infered);\n }\n \n+Adjustment\n+Adjuster::try_unsize_type (const TyTy::BaseType *ty)\n+{\n+  bool is_valid_type = ty->get_kind () == TyTy::TypeKind::ARRAY;\n+  if (!is_valid_type)\n+    return Adjustment::get_error ();\n+\n+  auto mappings = Analysis::Mappings::get ();\n+  auto context = TypeCheckContext::get ();\n+\n+  const auto ref_base = static_cast<const TyTy::ArrayType *> (ty);\n+  auto slice_elem = ref_base->get_element_type ();\n+\n+  auto slice\n+    = new TyTy::SliceType (mappings->get_next_hir_id (), ty->get_ident ().locus,\n+\t\t\t   TyTy::TyVar (slice_elem->get_ref ()));\n+  context->insert_implicit_type (slice);\n+\n+  return Adjustment (Adjustment::AdjustmentType::INDIRECTION, slice);\n+}\n+\n static bool\n resolve_operator_overload_fn (\n   Analysis::RustLangItem::ItemType lang_item_type, const TyTy::BaseType *ty,"}, {"sha": "369744e3b8c32db0a494537e58656d94febb26a3", "filename": "gcc/rust/typecheck/rust-autoderef.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afa451b311dec27476941e6f307d04450d28ab88/gcc%2Frust%2Ftypecheck%2Frust-autoderef.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afa451b311dec27476941e6f307d04450d28ab88/gcc%2Frust%2Ftypecheck%2Frust-autoderef.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-autoderef.h?ref=afa451b311dec27476941e6f307d04450d28ab88", "patch": "@@ -36,6 +36,7 @@ class Adjustment\n     DEREF,\n     DEREF_MUT,\n     INDIRECTION,\n+    UNSIZE,\n   };\n \n   // ctor for all adjustments except derefs\n@@ -78,6 +79,8 @@ class Adjustment\n \treturn \"DEREF_MUT\";\n       case AdjustmentType::INDIRECTION:\n \treturn \"INDIRECTION\";\n+      case AdjustmentType::UNSIZE:\n+\treturn \"UNSIZE\";\n       }\n     gcc_unreachable ();\n     return \"\";\n@@ -135,6 +138,8 @@ class Adjuster\n \n   static Adjustment try_raw_deref_type (const TyTy::BaseType *ty);\n \n+  static Adjustment try_unsize_type (const TyTy::BaseType *ty);\n+\n private:\n   const TyTy::BaseType *base;\n };"}, {"sha": "ce7c4e1028c3aa3ea574e52db47e9b615940f24f", "filename": "gcc/rust/typecheck/rust-hir-dot-operator.cc", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afa451b311dec27476941e6f307d04450d28ab88/gcc%2Frust%2Ftypecheck%2Frust-hir-dot-operator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afa451b311dec27476941e6f307d04450d28ab88/gcc%2Frust%2Ftypecheck%2Frust-hir-dot-operator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-dot-operator.cc?ref=afa451b311dec27476941e6f307d04450d28ab88", "patch": "@@ -40,6 +40,21 @@ MethodResolver::Probe (const TyTy::BaseType *receiver,\n       if (autoderef_flag)\n \treturn MethodCandidate::get_error ();\n \n+      // try unsize\n+      Adjustment unsize = Adjuster::try_unsize_type (r);\n+      if (!unsize.is_error ())\n+\t{\n+\t  adjustments.push_back (unsize);\n+\t  auto unsize_r = unsize.get_expected ();\n+\t  auto res = Try (unsize_r, segment_name, adjustments);\n+\t  if (!res.is_error ())\n+\t    {\n+\t      return res;\n+\t    }\n+\n+\t  adjustments.pop_back ();\n+\t}\n+\n       Adjustment deref\n \t= Adjuster::try_deref_type (r, Analysis::RustLangItem::ItemType::DEREF);\n       if (!deref.is_error ())"}, {"sha": "e63ef9fa26b35fa799715c061c8dbca85aec0355", "filename": "gcc/rust/typecheck/rust-hir-type-check.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afa451b311dec27476941e6f307d04450d28ab88/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afa451b311dec27476941e6f307d04450d28ab88/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.h?ref=afa451b311dec27476941e6f307d04450d28ab88", "patch": "@@ -103,6 +103,7 @@ class TypeCheckContext\n \n   void insert_type (const Analysis::NodeMapping &mappings,\n \t\t    TyTy::BaseType *type);\n+  void insert_implicit_type (TyTy::BaseType *type);\n   bool lookup_type (HirId id, TyTy::BaseType **type);\n \n   void insert_implicit_type (HirId id, TyTy::BaseType *type);"}, {"sha": "434809c1e0853b9f2009f565d36434e7ed8db9f7", "filename": "gcc/rust/typecheck/rust-tyctx.cc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afa451b311dec27476941e6f307d04450d28ab88/gcc%2Frust%2Ftypecheck%2Frust-tyctx.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afa451b311dec27476941e6f307d04450d28ab88/gcc%2Frust%2Ftypecheck%2Frust-tyctx.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyctx.cc?ref=afa451b311dec27476941e6f307d04450d28ab88", "patch": "@@ -83,6 +83,13 @@ TypeCheckContext::insert_type (const Analysis::NodeMapping &mappings,\n   resolved[id] = type;\n }\n \n+void\n+TypeCheckContext::insert_implicit_type (TyTy::BaseType *type)\n+{\n+  rust_assert (type != nullptr);\n+  resolved[type->get_ref ()] = type;\n+}\n+\n void\n TypeCheckContext::insert_implicit_type (HirId id, TyTy::BaseType *type)\n {"}]}