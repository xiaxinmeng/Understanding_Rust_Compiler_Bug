{"sha": "eb6eb3b79aac8efe003861859e52d8e1680b120f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWI2ZWIzYjc5YWFjOGVmZTAwMzg2MTg1OWU1MmQ4ZTE2ODBiMTIwZg==", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2020-05-26T10:19:01Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-07-10T09:16:16Z"}, "message": "[Ada] Fix failing assertions related to volatile objects\n\ngcc/ada/\n\n\t* sem_ch3.adb (Process_Discriminants): Set Ekind of the\n\tprocessed discriminant entity before passing to\n\tIs_Effectively_Volatile, which was crashing on a failed\n\tassertion.\n\t* sem_prag.adb (Analyze_External_Property_In_Decl_Part): Prevent\n\tcall to No_Caching_Enabled with entities other than variables,\n\twhich was crashing on a failed assertion.\n\t(Analyze_Pragma): Style cleanups.\n\t* sem_util.adb (Is_Effectively_Volatile): Enforce comment with\n\tan assertion; prevent call to No_Caching_Enabled with entities\n\tother than variables.\n\t(Is_Effectively_Volatile_Object): Only call\n\tIs_Effectively_Volatile on objects, not on types.\n\t(No_Caching_Enabled): Enforce comment with an assertion.", "tree": {"sha": "7d8338c0b72ca586a49ee6d69cc3be717261d5c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d8338c0b72ca586a49ee6d69cc3be717261d5c9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb6eb3b79aac8efe003861859e52d8e1680b120f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb6eb3b79aac8efe003861859e52d8e1680b120f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb6eb3b79aac8efe003861859e52d8e1680b120f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb6eb3b79aac8efe003861859e52d8e1680b120f/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c24633fbbb88d0032008ab012e2e3204b9405ec4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c24633fbbb88d0032008ab012e2e3204b9405ec4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c24633fbbb88d0032008ab012e2e3204b9405ec4"}], "stats": {"total": 23, "additions": 15, "deletions": 8}, "files": [{"sha": "74946d3708b72b68c61b6d38cfc7c0fcc8840326", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb6eb3b79aac8efe003861859e52d8e1680b120f/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb6eb3b79aac8efe003861859e52d8e1680b120f/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=eb6eb3b79aac8efe003861859e52d8e1680b120f", "patch": "@@ -19977,6 +19977,7 @@ package body Sem_Ch3 is\n          end if;\n \n          Set_Etype (Defining_Identifier (Discr), Discr_Type);\n+         Set_Ekind (Defining_Identifier (Discr), E_Discriminant);\n \n          --  If a discriminant specification includes the assignment compound\n          --  delimiter followed by an expression, the expression is the default\n@@ -20035,7 +20036,7 @@ package body Sem_Ch3 is\n                  (Defining_Identifier (Discr), Expression (Discr));\n             end if;\n \n-            --  In gnatc or gnatprove mode, make sure set Do_Range_Check flag\n+            --  In gnatc or GNATprove mode, make sure set Do_Range_Check flag\n             --  gets set unless we can be sure that no range check is required.\n \n             if not Expander_Active\n@@ -20175,7 +20176,6 @@ package body Sem_Ch3 is\n       Discr_Number := Uint_1;\n       while Present (Discr) loop\n          Id := Defining_Identifier (Discr);\n-         Set_Ekind (Id, E_Discriminant);\n          Init_Component_Location (Id);\n          Init_Esize (Id);\n          Set_Discriminant_Number (Id, Discr_Number);"}, {"sha": "24053d54cc823ab1fb375a4c3d75fcf9ac9bf53b", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb6eb3b79aac8efe003861859e52d8e1680b120f/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb6eb3b79aac8efe003861859e52d8e1680b120f/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=eb6eb3b79aac8efe003861859e52d8e1680b120f", "patch": "@@ -2122,7 +2122,9 @@ package body Sem_Prag is\n       if Prag_Id /= Pragma_No_Caching\n         and then not Is_Effectively_Volatile (Obj_Id)\n       then\n-         if No_Caching_Enabled (Obj_Id) then\n+         if Ekind (Obj_Id) = E_Variable\n+           and then No_Caching_Enabled (Obj_Id)\n+         then\n             SPARK_Msg_N\n               (\"illegal combination of external property % and property \"\n                & \"\"\"No_Caching\"\" (SPARK RM 7.1.2(6))\", N);\n@@ -13363,7 +13365,7 @@ package body Sem_Prag is\n             --  respective root types.\n \n             if Nkind (Obj_Or_Type_Decl) /= N_Object_Declaration then\n-               if (Prag_Id = Pragma_No_Caching)\n+               if Prag_Id = Pragma_No_Caching\n                   or not Nkind_In (Original_Node (Obj_Or_Type_Decl),\n                                    N_Full_Type_Declaration,\n                                    N_Private_Type_Declaration,\n@@ -13383,7 +13385,8 @@ package body Sem_Prag is\n             --  will be done at the end of the declarative region that\n             --  contains the pragma.\n \n-            if Ekind (Obj_Or_Type_Id) = E_Variable or Is_Type (Obj_Or_Type_Id)\n+            if Ekind (Obj_Or_Type_Id) = E_Variable\n+              or else Is_Type (Obj_Or_Type_Id)\n             then\n \n                --  In the case of a type, pragma is a type-related"}, {"sha": "b88f6f7fb3c50afd0e406cc3f987963d18149a0d", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb6eb3b79aac8efe003861859e52d8e1680b120f/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb6eb3b79aac8efe003861859e52d8e1680b120f/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=eb6eb3b79aac8efe003861859e52d8e1680b120f", "patch": "@@ -15651,12 +15651,14 @@ package body Sem_Util is\n \n       --  Otherwise Id denotes an object\n \n-      else\n+      else pragma Assert (Is_Object (Id));\n          --  A volatile object for which No_Caching is enabled is not\n          --  effectively volatile.\n \n          return\n-           (Is_Volatile (Id) and then not No_Caching_Enabled (Id))\n+           (Is_Volatile (Id)\n+            and then not\n+              (Ekind (Id) = E_Variable and then No_Caching_Enabled (Id)))\n              or else Has_Volatile_Components (Id)\n              or else Is_Effectively_Volatile (Etype (Id));\n       end if;\n@@ -15669,7 +15671,8 @@ package body Sem_Util is\n    function Is_Effectively_Volatile_Object (N : Node_Id) return Boolean is\n    begin\n       if Is_Entity_Name (N) then\n-         return Is_Effectively_Volatile (Entity (N));\n+         return Is_Object (Entity (N))\n+           and then Is_Effectively_Volatile (Entity (N));\n \n       elsif Nkind (N) = N_Indexed_Component then\n          return Is_Effectively_Volatile_Object (Prefix (N));\n@@ -23289,6 +23292,7 @@ package body Sem_Util is\n    ------------------------\n \n    function No_Caching_Enabled (Id : Entity_Id) return Boolean is\n+      pragma Assert (Ekind (Id) = E_Variable);\n       Prag : constant Node_Id := Get_Pragma (Id, Pragma_No_Caching);\n       Arg1 : Node_Id;\n "}]}