{"sha": "cac5fbfc9443cc62bcfba0d46a01982a3e0963b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2FjNWZiZmM5NDQzY2M2MmJjZmJhMGQ0NmEwMTk4MmEzZTA5NjNiNg==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@gcc.gnu.org", "date": "2008-03-21T11:43:54Z"}, "committer": {"name": "Olivier Hainque", "email": "hainque@gcc.gnu.org", "date": "2008-03-21T11:43:54Z"}, "message": "trans.c (addressable_p): Accept COND_EXPR when both arms are addressable.\n\n2008-03-21  Olivier Hainque  <hainque@adacore.com>\n            Ed Schonberg  <schonberg@adacore.com>\n\n\t* trans.c (addressable_p): Accept COND_EXPR when both arms\n\tare addressable.\n\t(gnat_gimplify_expr): Let the gimplifier handle &COND_EXPR.\n\t(call_to_gnu): Do not use name reference in the error message\n\tfor a misaligned by_reference_parameter. The actual may be a\n\tgeneral expression.\n\nFrom-SVN: r133418", "tree": {"sha": "f6a0294358b8d0e64044a1c2a326713f05634584", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6a0294358b8d0e64044a1c2a326713f05634584"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cac5fbfc9443cc62bcfba0d46a01982a3e0963b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cac5fbfc9443cc62bcfba0d46a01982a3e0963b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cac5fbfc9443cc62bcfba0d46a01982a3e0963b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cac5fbfc9443cc62bcfba0d46a01982a3e0963b6/comments", "author": null, "committer": null, "parents": [{"sha": "4a49c70b858351daecd43cac4bbe5d7f6e4e70e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a49c70b858351daecd43cac4bbe5d7f6e4e70e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a49c70b858351daecd43cac4bbe5d7f6e4e70e4"}], "stats": {"total": 15, "additions": 14, "deletions": 1}, "files": [{"sha": "534a056cc694a0c9edc3af03449e564671296e22", "filename": "gcc/ada/trans.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cac5fbfc9443cc62bcfba0d46a01982a3e0963b6/gcc%2Fada%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cac5fbfc9443cc62bcfba0d46a01982a3e0963b6/gcc%2Fada%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftrans.c?ref=cac5fbfc9443cc62bcfba0d46a01982a3e0963b6", "patch": "@@ -2117,7 +2117,7 @@ call_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, tree gnu_target)\n \t  /* If the type is by_reference, a copy is not allowed.  */\n \t  if (Is_By_Reference_Type (Etype (gnat_formal)))\n \t    post_error\n-\t      (\"misaligned & cannot be passed by reference\", gnat_actual);\n+\t      (\"misaligned actual cannot be passed by reference\", gnat_actual);\n \n \t  /* For users of Starlet we issue a warning because the\n \t     interface apparently assumes that by-ref parameters\n@@ -5286,6 +5286,13 @@ gnat_gimplify_expr (tree *expr_p, tree *pre_p, tree *post_p ATTRIBUTE_UNUSED)\n \t  TREE_READONLY (op) = 0;\n \t}\n \n+      /* We let the gimplifier process &COND_EXPR and expect it to yield the\n+\t address of the selected operand when it is addressable.  Besides, we\n+\t also expect addressable_p to only let COND_EXPRs where both arms are\n+\t addressable reach here.  */\n+      else if (TREE_CODE (op) == COND_EXPR)\n+\t;\n+\n       /* Otherwise, if we are taking the address of something that is neither\n \t reference, declaration, or constant, make a variable for the operand\n \t here and then take its address.  If we don't do it this way, we may\n@@ -6117,6 +6124,12 @@ addressable_p (tree gnu_expr, tree gnu_type)\n     case CALL_EXPR:\n       return true;\n \n+    case COND_EXPR:\n+      /* We accept &COND_EXPR as soon as both operands are addressable and\n+\t expect the outcome to be the address of the selected operand.  */\n+      return (addressable_p (TREE_OPERAND (gnu_expr, 1), NULL_TREE)\n+\t      && addressable_p (TREE_OPERAND (gnu_expr, 2), NULL_TREE));\n+\n     case COMPONENT_REF:\n       return (!DECL_BIT_FIELD (TREE_OPERAND (gnu_expr, 1))\n \t      && (!STRICT_ALIGNMENT"}]}