{"sha": "e1089c7a5caebffb0986d87435d2bfaf6bb55d89", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTEwODljN2E1Y2FlYmZmYjA5ODZkODc0MzVkMmJmYWY2YmI1NWQ4OQ==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2014-07-24T17:12:45Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2014-07-24T17:12:45Z"}, "message": "rs6000.c (rs6000_function_arg_boundary): In the AIX and ELFv2 ABI...\n\ngcc/\n\n\t* config/rs6000/rs6000.c (rs6000_function_arg_boundary): In the AIX\n\tand ELFv2 ABI, do not use the \"mode == BLKmode\" check to test for\n\taggregate types.  Instead, *all* aggregate types, except for single-\n\telement or homogeneous float/vector aggregates, are quadword-aligned\n\tif required by their type alignment.  Issue -Wpsabi note when a type\n\tis now treated differently than before.\n\ngcc/testsuite/\n\n\t* gcc.target/powerpc/ppc64-abi-warn-2.c: New test.\n\nFrom-SVN: r213016", "tree": {"sha": "e86a439386e107b23e13426ef34eeb7a7aa96180", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e86a439386e107b23e13426ef34eeb7a7aa96180"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e1089c7a5caebffb0986d87435d2bfaf6bb55d89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1089c7a5caebffb0986d87435d2bfaf6bb55d89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1089c7a5caebffb0986d87435d2bfaf6bb55d89", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1089c7a5caebffb0986d87435d2bfaf6bb55d89/comments", "author": null, "committer": null, "parents": [{"sha": "ff46d64d829740dee098b0181d60db1231d90c09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff46d64d829740dee098b0181d60db1231d90c09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff46d64d829740dee098b0181d60db1231d90c09"}], "stats": {"total": 72, "additions": 65, "deletions": 7}, "files": [{"sha": "5436866a48da8d79575e260d15332d4c403b694d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1089c7a5caebffb0986d87435d2bfaf6bb55d89/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1089c7a5caebffb0986d87435d2bfaf6bb55d89/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e1089c7a5caebffb0986d87435d2bfaf6bb55d89", "patch": "@@ -1,3 +1,12 @@\n+2014-07-24  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_function_arg_boundary): In the AIX\n+\tand ELFv2 ABI, do not use the \"mode == BLKmode\" check to test for\n+\taggregate types.  Instead, *all* aggregate types, except for single-\n+\telement or homogeneous float/vector aggregates, are quadword-aligned\n+\tif required by their type alignment.  Issue -Wpsabi note when a type\n+\tis now treated differently than before.\n+\n 2014-07-24  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n \n \t* config/rs6000/rs6000.c (rs6000_function_arg): If a float argument"}, {"sha": "49d50a6874cbc183e5a1974d62d788af2fd96e61", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 41, "deletions": 7, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1089c7a5caebffb0986d87435d2bfaf6bb55d89/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1089c7a5caebffb0986d87435d2bfaf6bb55d89/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=e1089c7a5caebffb0986d87435d2bfaf6bb55d89", "patch": "@@ -9184,14 +9184,48 @@ rs6000_function_arg_boundary (enum machine_mode mode, const_tree type)\n \t   || (type && TREE_CODE (type) == VECTOR_TYPE\n \t       && int_size_in_bytes (type) >= 16))\n     return 128;\n-  else if (((TARGET_MACHO && rs6000_darwin64_abi)\n-\t    || DEFAULT_ABI == ABI_ELFv2\n-            || (DEFAULT_ABI == ABI_AIX && !rs6000_compat_align_parm))\n- \t   && mode == BLKmode\n-\t   && type && TYPE_ALIGN (type) > 64)\n+\n+  /* Aggregate types that need > 8 byte alignment are quadword-aligned\n+     in the parameter area in the ELFv2 ABI, and in the AIX ABI unless\n+     -mcompat-align-parm is used.  */\n+  if (((DEFAULT_ABI == ABI_AIX && !rs6000_compat_align_parm)\n+       || DEFAULT_ABI == ABI_ELFv2)\n+      && type && TYPE_ALIGN (type) > 64)\n+    {\n+      /* \"Aggregate\" means any AGGREGATE_TYPE except for single-element\n+         or homogeneous float/vector aggregates here.  We already handled\n+         vector aggregates above, but still need to check for float here. */\n+      bool aggregate_p = (AGGREGATE_TYPE_P (type)\n+\t\t\t  && !SCALAR_FLOAT_MODE_P (elt_mode));\n+\n+      /* We used to check for BLKmode instead of the above aggregate type\n+\t check.  Warn when this results in any difference to the ABI.  */\n+      if (aggregate_p != (mode == BLKmode))\n+\t{\n+\t  static bool warned;\n+\t  if (!warned && warn_psabi)\n+\t    {\n+\t      warned = true;\n+\t      inform (input_location,\n+\t\t      \"the ABI of passing aggregates with %d-byte alignment\"\n+\t\t      \" has changed in GCC 4.10\",\n+\t\t      (int) TYPE_ALIGN (type) / BITS_PER_UNIT);\n+\t    }\n+\t}\n+\n+      if (aggregate_p)\n+\treturn 128;\n+    }\n+\n+  /* Similar for the Darwin64 ABI.  Note that for historical reasons we\n+     implement the \"aggregate type\" check as a BLKmode check here; this\n+     means certain aggregate types are in fact not aligned.  */\n+  if (TARGET_MACHO && rs6000_darwin64_abi\n+      && mode == BLKmode\n+      && type && TYPE_ALIGN (type) > 64)\n     return 128;\n-  else\n-    return PARM_BOUNDARY;\n+\n+  return PARM_BOUNDARY;\n }\n \n /* The offset in words to the start of the parameter save area.  */"}, {"sha": "bf929fa924ee759af3cad818ee6cdd9832acad00", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1089c7a5caebffb0986d87435d2bfaf6bb55d89/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1089c7a5caebffb0986d87435d2bfaf6bb55d89/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e1089c7a5caebffb0986d87435d2bfaf6bb55d89", "patch": "@@ -1,3 +1,7 @@\n+2014-07-24  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n+\n+\t* gcc.target/powerpc/ppc64-abi-warn-2.c: New test.\n+\n 2014-07-24  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n \n \t* gcc.target/powerpc/ppc64-abi-warn-1.c: New test."}, {"sha": "fdbeddfcbba5efb6c529994a0bafde9b049e46a3", "filename": "gcc/testsuite/gcc.target/powerpc/ppc64-abi-warn-2.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1089c7a5caebffb0986d87435d2bfaf6bb55d89/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc64-abi-warn-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1089c7a5caebffb0986d87435d2bfaf6bb55d89/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc64-abi-warn-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc64-abi-warn-2.c?ref=e1089c7a5caebffb0986d87435d2bfaf6bb55d89", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile { target { powerpc*-*-linux* && lp64 } } } */\n+\n+struct test\n+  {\n+    long a __attribute__((aligned (16)));\n+  };\n+\n+void test (struct test a) /* { dg-message \"note: the ABI of passing aggregates with 16-byte alignment has changed\" } */\n+{\n+}\n+"}]}