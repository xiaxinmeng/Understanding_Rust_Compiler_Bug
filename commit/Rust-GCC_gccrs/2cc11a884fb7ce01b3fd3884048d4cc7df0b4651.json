{"sha": "2cc11a884fb7ce01b3fd3884048d4cc7df0b4651", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmNjMTFhODg0ZmI3Y2UwMWIzZmQzODg0MDQ4ZDRjYzdkZjBiNDY1MQ==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2011-11-25T15:00:39Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2011-11-25T15:00:39Z"}, "message": "avr.c (print_operand): Support code = 'i' for CONST_INT.\n\n\t* config/avr/avr.c (print_operand): Support code = 'i' for CONST_INT.\n\nFrom-SVN: r181722", "tree": {"sha": "5ee3ab6fb2628b0dc0e9e205e419cb00d56fd3f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ee3ab6fb2628b0dc0e9e205e419cb00d56fd3f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2cc11a884fb7ce01b3fd3884048d4cc7df0b4651", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cc11a884fb7ce01b3fd3884048d4cc7df0b4651", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2cc11a884fb7ce01b3fd3884048d4cc7df0b4651", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cc11a884fb7ce01b3fd3884048d4cc7df0b4651/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c1e7e423a9072db79fb1ce5d99d4355ae3ed258", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c1e7e423a9072db79fb1ce5d99d4355ae3ed258", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c1e7e423a9072db79fb1ce5d99d4355ae3ed258"}], "stats": {"total": 57, "additions": 37, "deletions": 20}, "files": [{"sha": "fc0394d4a36c0f6b0cb410b8c7f117edcb3a4bd5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc11a884fb7ce01b3fd3884048d4cc7df0b4651/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc11a884fb7ce01b3fd3884048d4cc7df0b4651/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2cc11a884fb7ce01b3fd3884048d4cc7df0b4651", "patch": "@@ -1,3 +1,7 @@\n+2011-11-25  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\t* config/avr/avr.c (print_operand): Support code = 'i' for CONST_INT.\n+\n 2011-11-24  Andrew MacLeod  <amacleod@redhat.com>\n \n \tPR other/51011"}, {"sha": "9fd8b8ef935031a8c433d60ab0176125ba488ca6", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 31, "deletions": 18, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc11a884fb7ce01b3fd3884048d4cc7df0b4651/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc11a884fb7ce01b3fd3884048d4cc7df0b4651/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=2cc11a884fb7ce01b3fd3884048d4cc7df0b4651", "patch": "@@ -1822,9 +1822,32 @@ print_operand (FILE *file, rtx x, int code)\n       else\n \tfprintf (file, reg_names[true_regnum (x) + abcd]);\n     }\n-  else if (GET_CODE (x) == CONST_INT)\n-    fprintf (file, HOST_WIDE_INT_PRINT_DEC, INTVAL (x) + abcd);\n-  else if (GET_CODE (x) == MEM)\n+  else if (CONST_INT_P (x))\n+    {\n+      HOST_WIDE_INT ival = INTVAL (x);\n+        \n+      if ('i' != code)\n+        fprintf (file, HOST_WIDE_INT_PRINT_DEC, ival + abcd);\n+      else if (low_io_address_operand (x, VOIDmode)\n+               || high_io_address_operand (x, VOIDmode))\n+        {\n+          switch (ival)\n+            {\n+            case RAMPZ_ADDR: fprintf (file, \"__RAMPZ__\"); break;\n+            case SREG_ADDR: fprintf (file, \"__SREG__\"); break;\n+            case SP_ADDR:   fprintf (file, \"__SP_L__\"); break;\n+            case SP_ADDR+1: fprintf (file, \"__SP_H__\"); break;\n+              \n+            default:\n+              fprintf (file, HOST_WIDE_INT_PRINT_HEX,\n+                       ival - avr_current_arch->sfr_offset);\n+              break;\n+            }\n+        }\n+      else\n+        fatal_insn (\"bad address, not an I/O address:\", x);\n+    }\n+  else if (MEM_P (x))\n     {\n       rtx addr = XEXP (x, 0);\n       \n@@ -1844,21 +1867,7 @@ print_operand (FILE *file, rtx x, int code)\n \t}\n       else if (code == 'i')\n         {\n-          if (!io_address_operand (addr, GET_MODE (x)))\n-            fatal_insn (\"bad address, not an I/O address:\", addr);\n-          \n-          switch (INTVAL (addr))\n-            {\n-            case RAMPZ_ADDR: fprintf (file, \"__RAMPZ__\"); break;\n-            case SREG_ADDR: fprintf (file, \"__SREG__\"); break;\n-            case SP_ADDR:   fprintf (file, \"__SP_L__\"); break;\n-            case SP_ADDR+1: fprintf (file, \"__SP_H__\"); break;\n-              \n-            default:\n-              fprintf (file, HOST_WIDE_INT_PRINT_HEX,\n-                       UINTVAL (addr) - avr_current_arch->sfr_offset);\n-              break;\n-            }\n+          print_operand (file, addr, 'i');\n         }\n       else if (code == 'o')\n \t{\n@@ -1889,6 +1898,10 @@ print_operand (FILE *file, rtx x, int code)\n       else\n \tprint_operand_address (file, addr);\n     }\n+  else if (code == 'i')\n+    {\n+      fatal_insn (\"bad address, not an I/O address:\", x);\n+    }\n   else if (code == 'x')\n     {\n       /* Constant progmem address - like used in jmp or call */"}, {"sha": "d59488ea1b51d256f786a0f2b495042d3003c844", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc11a884fb7ce01b3fd3884048d4cc7df0b4651/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc11a884fb7ce01b3fd3884048d4cc7df0b4651/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=2cc11a884fb7ce01b3fd3884048d4cc7df0b4651", "patch": "@@ -28,8 +28,8 @@\n ;;  j  Branch condition.\n ;;  k  Reverse branch condition.\n ;;..m..Constant Direct Data memory address.\n-;;  i  Print the SFR address quivalent of a CONST_INT RAM address.\n-;;     The resulting addres is suitable to be used in IN/OUT.\n+;;  i  Print the SFR address quivalent of a CONST_INT or a CONST_INT\n+;;     RAM address.  The resulting addres is suitable to be used in IN/OUT.\n ;;  o  Displacement for (mem (plus (reg) (const_int))) operands.\n ;;  p  POST_INC or PRE_DEC address as a pointer (X, Y, Z)\n ;;  r  POST_INC or PRE_DEC address as a register (r26, r28, r30)"}]}