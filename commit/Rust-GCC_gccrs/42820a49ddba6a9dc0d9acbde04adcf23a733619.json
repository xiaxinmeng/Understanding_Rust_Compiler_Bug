{"sha": "42820a49ddba6a9dc0d9acbde04adcf23a733619", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDI4MjBhNDlkZGJhNmE5ZGMwZDlhY2JkZTA0YWRjZjIzYTczMzYxOQ==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@cygnus.com", "date": "1998-09-28T14:40:27Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1998-09-28T14:40:27Z"}, "message": "Make ASM_OUTPUT_MI_THUNK ELF only for now and always use jump\n\nFrom-SVN: r22628", "tree": {"sha": "f923a870eb19bce1384711091b10259d07d65eb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f923a870eb19bce1384711091b10259d07d65eb7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/42820a49ddba6a9dc0d9acbde04adcf23a733619", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42820a49ddba6a9dc0d9acbde04adcf23a733619", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42820a49ddba6a9dc0d9acbde04adcf23a733619", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42820a49ddba6a9dc0d9acbde04adcf23a733619/comments", "author": null, "committer": null, "parents": [{"sha": "8ff0c1af0ec1bcfb70b82e8dbd2aaddb1da2ea7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ff0c1af0ec1bcfb70b82e8dbd2aaddb1da2ea7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ff0c1af0ec1bcfb70b82e8dbd2aaddb1da2ea7c"}], "stats": {"total": 34, "additions": 28, "deletions": 6}, "files": [{"sha": "d452b4df5b82f75648a275d127d47915afdfb52f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42820a49ddba6a9dc0d9acbde04adcf23a733619/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42820a49ddba6a9dc0d9acbde04adcf23a733619/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=42820a49ddba6a9dc0d9acbde04adcf23a733619", "patch": "@@ -1,3 +1,8 @@\n+Mon Sep 28 17:34:35 1998  Michael Meissner  <meissner@cygnus.com>\n+\n+\t* rs6000.h (ASM_OUTPUT_MI_THUNK): Only define on ELF systems.\n+\t* rs6000.c (output_mi_thunk): Always use a raw jump for now.\n+\n Mon Sep 28 14:24:03 1998  Mark Mitchell  <mark@markmitchell.com>\n \n \t* tree.h (TYPE_BINFO): Document."}, {"sha": "f4f47ed2ea838eb131b9d3bfde7ea5d3b0cd5022", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42820a49ddba6a9dc0d9acbde04adcf23a733619/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42820a49ddba6a9dc0d9acbde04adcf23a733619/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=42820a49ddba6a9dc0d9acbde04adcf23a733619", "patch": "@@ -4557,6 +4557,15 @@ output_mi_thunk (file, thunk_fndecl, delta, function)\n      Otherwise, load up its address and jump to it.  */\n \n   fname = XSTR (XEXP (DECL_RTL (function), 0), 0);\n+#if 1\n+  /* For now, just emit a branch always, until we can figure out better when we\n+     need to load the address into the count register and emit the slower bctr\n+     instruction.  */\n+  fprintf (file, \"\\tb %s\", prefix);\n+  assemble_name (file, fname);\n+  fprintf (file, \"\\n\");\n+\n+#else\n   if (TREE_ASM_WRITTEN (function)\n       && !lookup_attribute (\"longcall\", TYPE_ATTRIBUTES (TREE_TYPE (function))))\n     {\n@@ -4620,6 +4629,8 @@ output_mi_thunk (file, thunk_fndecl, delta, function)\n \t      asm_fprintf (file, \"\\t{l|lwz} %s,\", r0);\n \t      assemble_name (file, fname);\n \t      asm_fprintf (file, \"@got(%s)\\n\", r12);\n+\t      asm_fprintf (file, \"\\tmtctr %s\\n\", r0);\n+\t      asm_fprintf (file, \"\\tbctr\\n\");\n \t    }\n #if TARGET_ELF\n \t  else if (flag_pic > 1 || TARGET_RELOCATABLE)\n@@ -4635,29 +4646,33 @@ output_mi_thunk (file, thunk_fndecl, delta, function)\n \t      asm_fprintf (file, \"(%s)\\n\", r12);\n \t      asm_fprintf (file, \"\\t{l|lwz} %s,4(%s)\\n\", r12, sp);\n \t      asm_fprintf (file, \"\\tmtlr %s\\n\", r12);\n+\t      asm_fprintf (file, \"\\tmtctr %s\\n\", r0);\n+\t      asm_fprintf (file, \"\\tbctr\\n\");\n \t      asm_fprintf (file, \"%s\\n\", MINIMAL_TOC_SECTION_ASM_OP);\n \t      assemble_name (file, buf);\n \t      fputs (\" = .-.LCTOC1\\n\", file);\n \t      fputs (\"\\t.long \", file);\n \t      assemble_name (file, fname);\n \t      fputs (\"\\n\\t.previous\\n\", file);\n \t    }\n-#endif\n+#endif\t/* TARGET_ELF */\n+\n \t  else\n \t    {\n-\t      asm_fprintf (file, \"\\t{liu|lis} %s,\", r0);\n+\t      asm_fprintf (file, \"\\t{liu|lis} %s,\", r12);\n \t      assemble_name (file, fname);\n \t      asm_fprintf (file, \"@ha\\n\");\n-\t      asm_fprintf (file, \"\\t{cal|la} %s,\", r0);\n+\t      asm_fprintf (file, \"\\t{cal|la} %s,\", r12);\n \t      assemble_name (file, fname);\n-\t      asm_fprintf (file, \"@l(%s)\\n\", r0);\n+\t      asm_fprintf (file, \"@l(%s)\\n\", r12);\n+\t      asm_fprintf (file, \"\\tmtctr %s\\n\", r12);\n+\t      asm_fprintf (file, \"\\tbctr\\n\");\n \t    }\n \n-\t  asm_fprintf (file, \"\\tmtctr %s\\n\", r0);\n-\t  asm_fprintf (file, \"\\tbctr\\n\");\n \t  break;\n \t}\n     }\n+#endif\t/* #if 0 out code to use bctr for far away jumps */\n }\n \n \f"}, {"sha": "1ceef9571c681d3270d151a782833959c1eb8bbe", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42820a49ddba6a9dc0d9acbde04adcf23a733619/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42820a49ddba6a9dc0d9acbde04adcf23a733619/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=42820a49ddba6a9dc0d9acbde04adcf23a733619", "patch": "@@ -1617,8 +1617,10 @@ typedef struct rs6000_args\n    frontend will generate a less efficient heavyweight thunk that calls\n    FUNCTION instead of jumping to it.  The generic approach does not support\n    varargs.  */\n+#if TARGET_ELF\n #define ASM_OUTPUT_MI_THUNK(FILE, THUNK_FNDECL, DELTA, FUNCTION) \\\n   output_mi_thunk (FILE, THUNK_FNDECL, DELTA, FUNCTION)\n+#endif\n \f\n /* TRAMPOLINE_TEMPLATE deleted */\n "}]}