{"sha": "d3a193e36cdf55fbff3bd0f244bc36bc09871ee1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDNhMTkzZTM2Y2RmNTVmYmZmM2JkMGYyNDRiYzM2YmMwOTg3MWVlMQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2002-04-16T00:45:36Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2002-04-16T00:45:36Z"}, "message": "re PR libstdc++/4164 (33 Memory Leak when using iostream)\n\n\n2002-04-15  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tPR libstdc++/4164\n\tValgrind fixes.\n\t* config/io/basic_file_stdio.cc (__basic_file::~__basic_file):\n\tCall close.\n\t(__basic_file::close): Call fflush. Correct return if fclose ok.\n\t(__basic_file::is_open): Make const.\n\tChange __c_file_type to __c_file.\n\t* config/io/basic_file_stdio.h: Change __c_file_type to __c_file.\n\t(__basic_file::is_open): Make const.\n\t* config/io/c_io_stdio.h: Change __c_file_type to __c_file.\n\t* include/std/std_fstream.h (filebuf::_M_allocate_file): Remove.\n\t(filebuf::_M_unbuf): Add.\n\t(filebuf::_M_file): Change to non-pointer.\n\t(filebuf::_M_allocate_pback_buffer): Remove.\n\t* include/bits/fstream.tcc (filebuf::_M_allocate_file): Remove.\n\t(filebuf::_M_allocate_internal_buffer): Use _M_unbuf.\n\tChange initialization list for _M_file change.\n\t(filebuf::_M_allocate_pback_buffer): Remove.\n\tChange _M_file usage to reflect non-pointer data member.\n\n\t* config/locale/generic/c_locale.cc\n\t(locale::facet::_S_create_c_locale): Add parameter.\n\t* config/locale/generic/collate_members.cc: Change\n\t_M_compare_helper to _M_compare.\n\tChange _M_transform_helper to _M_transform.\n\t* config/locale/generic/monetary_members.cc: Changeup data types.\n\tAdd dtors.\n\t* config/locale/generic/numeric_members.cc: Add dtors.\n\t* config/locale/generic/time_members.cc: Add dtors.\n\t* config/locale/gnu/c_locale.cc: Add parameter.\n\t* config/locale/gnu/collate_members.cc:Change\n\t_M_compare_helper to _M_compare.\n\tChange _M_transform_helper to _M_transform.\n\t* config/locale/gnu/ctype_members.cc: Better error checking.\n\t* config/os/gnu-linux/bits/ctype_noninline.h: Better error checking.\n\t* config/locale/gnu/messages_members.cc: Tweak comment.\n\t* config/locale/gnu/monetary_members.cc: Change data types.\n\tAdd dtors.\n\t* config/locale/gnu/numeric_members.cc: Add dtors, better error\n\tchecking.\n\t* config/locale/gnu/time_members.cc: Same.\n\t* config/locale/ieee_1003.1-2001/c_locale.cc\n\t(locale::facet::_S_create_c_locale): Add parameter.\n\t* config/locale/ieee_1003.1-2001/c_locale.h: Correct typedef.\n\t* config/locale/ieee_1003.1-2001/codecvt_specializations.h: Remove\n\tbogus ctor.\n\n\t* include/bits/locale_facets.h (moneypunct): Use string literals.\n\tDon't define dtor.\n\t(numpunct): Same.\n\t(__timepunct): Same.\n\t(locale::_Impl::_M_facets): Change from vector to array.\n\t(locale::_Impl::_M_names): Change from array of strings to array\n\tof string literals.\n\t(locale::facet::_S_create_c_locale): Add parameter.\n\t(locale::locale::_S_num_facets): Move to...\n\t(locale::_Impl::_M_facets_size): Here.\n\t* include/bits/locale_facets.tcc: Fixups for _M_facets, _M_name\n\tchanges.\n\t* include/bits/localefwd.h: (locale::id::_M_id): Add member function.\n\t(locale::_Impl::_Impl(facet**, size_t, bool)): Add.\n\t(locale::_Impl::_Impl(string, size_t)): Change to\n\t(locale::_Impl::_Impl(const char*, size_t)): This.\n\n\t* include/bits/streambuf.tcc (streambuf::_S_pback_size): Define.\n\t* include/std/std_streambuf.h (streambuf::_M_pback_size): Change to\n\t(streambuf::_S_pback_size): This.\n\n\t* src/globals.cc: Add pre-allocations for \"C\" facets.\n\t* src/locale-inst.cc: Remove vector instantiations.\n\t* src/locale.cc: Remove vector include. Fixups for _M_names,\n\t_M_facets changes.\n\t* src/localename.cc: Same.\n\n\t* include/bits/stl_vector.h: Fix odd formatting.\n\n\t* include/bits/basic_string.tcc: Tweak comment.\n\n\t* libsupc++/new: Make sure parameters are uglified.\n\t* libsupc++/typeinfo: Same.\n\n\t* testsuite/22_locale/num_get_members_char.cc: Fixup.\n\t* testsuite/22_locale/num_get_members_wchar_t.cc: Same.\n\t* testsuite/27_io/filebuf_members.cc: Same.\n\nFrom-SVN: r52345", "tree": {"sha": "b099d8807cf3e64edeb22eeaae55f91bee6e0c39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b099d8807cf3e64edeb22eeaae55f91bee6e0c39"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d3a193e36cdf55fbff3bd0f244bc36bc09871ee1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3a193e36cdf55fbff3bd0f244bc36bc09871ee1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3a193e36cdf55fbff3bd0f244bc36bc09871ee1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3a193e36cdf55fbff3bd0f244bc36bc09871ee1/comments", "author": null, "committer": null, "parents": [{"sha": "629111c7320f72d55769c15453aa75cc96877c04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/629111c7320f72d55769c15453aa75cc96877c04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/629111c7320f72d55769c15453aa75cc96877c04"}], "stats": {"total": 1470, "additions": 915, "deletions": 555}, "files": [{"sha": "0bf364cb16c294290efdc26d993091a4fb28c7c3", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3a193e36cdf55fbff3bd0f244bc36bc09871ee1/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3a193e36cdf55fbff3bd0f244bc36bc09871ee1/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d3a193e36cdf55fbff3bd0f244bc36bc09871ee1", "patch": "@@ -1,3 +1,90 @@\n+2002-04-15  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tPR libstdc++/4164\n+\tValgrind fixes.\n+\t* config/io/basic_file_stdio.cc (__basic_file::~__basic_file):\n+\tCall close.\n+\t(__basic_file::close): Call fflush. Correct return if fclose ok. \n+\t(__basic_file::is_open): Make const.\n+\tChange __c_file_type to __c_file.\n+\t* config/io/basic_file_stdio.h: Change __c_file_type to __c_file.\n+\t(__basic_file::is_open): Make const.\t\n+\t* config/io/c_io_stdio.h: Change __c_file_type to __c_file.\n+\t* include/std/std_fstream.h (filebuf::_M_allocate_file): Remove.\n+\t(filebuf::_M_unbuf): Add.\n+\t(filebuf::_M_file): Change to non-pointer.\n+\t(filebuf::_M_allocate_pback_buffer): Remove.\n+\t* include/bits/fstream.tcc (filebuf::_M_allocate_file): Remove.\n+\t(filebuf::_M_allocate_internal_buffer): Use _M_unbuf.\n+\tChange initialization list for _M_file change.\n+\t(filebuf::_M_allocate_pback_buffer): Remove.\n+\tChange _M_file usage to reflect non-pointer data member.\n+\t\n+\t* config/locale/generic/c_locale.cc\n+\t(locale::facet::_S_create_c_locale): Add parameter.\n+\t* config/locale/generic/collate_members.cc: Change\n+\t_M_compare_helper to _M_compare.\n+\tChange _M_transform_helper to _M_transform.\n+\t* config/locale/generic/monetary_members.cc: Changeup data types.\n+\tAdd dtors.\n+\t* config/locale/generic/numeric_members.cc: Add dtors.\n+\t* config/locale/generic/time_members.cc: Add dtors.\n+\t* config/locale/gnu/c_locale.cc: Add parameter.\n+\t* config/locale/gnu/collate_members.cc:Change\n+\t_M_compare_helper to _M_compare.\n+\tChange _M_transform_helper to _M_transform.\n+\t* config/locale/gnu/ctype_members.cc: Better error checking.\n+\t* config/os/gnu-linux/bits/ctype_noninline.h: Better error checking.\n+\t* config/locale/gnu/messages_members.cc: Tweak comment.\n+\t* config/locale/gnu/monetary_members.cc: Change data types.\n+\tAdd dtors.\n+\t* config/locale/gnu/numeric_members.cc: Add dtors, better error\n+\tchecking.\n+\t* config/locale/gnu/time_members.cc: Same.\n+\t* config/locale/ieee_1003.1-2001/c_locale.cc\n+\t(locale::facet::_S_create_c_locale): Add parameter.\n+\t* config/locale/ieee_1003.1-2001/c_locale.h: Correct typedef.\n+\t* config/locale/ieee_1003.1-2001/codecvt_specializations.h: Remove\n+\tbogus ctor.\n+\t\n+\t* include/bits/locale_facets.h (moneypunct): Use string literals.\n+\tDon't define dtor.\n+\t(numpunct): Same.\n+\t(__timepunct): Same.\n+\t(locale::_Impl::_M_facets): Change from vector to array.\n+\t(locale::_Impl::_M_names): Change from array of strings to array\n+\tof string literals.\n+\t(locale::facet::_S_create_c_locale): Add parameter.\n+\t(locale::locale::_S_num_facets): Move to...\n+\t(locale::_Impl::_M_facets_size): Here.\n+\t* include/bits/locale_facets.tcc: Fixups for _M_facets, _M_name\n+\tchanges.\n+\t* include/bits/localefwd.h: (locale::id::_M_id): Add member function.\n+\t(locale::_Impl::_Impl(facet**, size_t, bool)): Add.\n+\t(locale::_Impl::_Impl(string, size_t)): Change to\n+\t(locale::_Impl::_Impl(const char*, size_t)): This.\n+\t\n+\t* include/bits/streambuf.tcc (streambuf::_S_pback_size): Define.\n+\t* include/std/std_streambuf.h (streambuf::_M_pback_size): Change to\n+\t(streambuf::_S_pback_size): This.\n+\n+\t* src/globals.cc: Add pre-allocations for \"C\" facets.\n+\t* src/locale-inst.cc: Remove vector instantiations.\n+\t* src/locale.cc: Remove vector include. Fixups for _M_names,\n+\t_M_facets changes.\n+\t* src/localename.cc: Same.\n+\n+\t* include/bits/stl_vector.h: Fix odd formatting.\n+\t\n+\t* include/bits/basic_string.tcc: Tweak comment.\n+\n+\t* libsupc++/new: Make sure parameters are uglified.\n+\t* libsupc++/typeinfo: Same.\n+\t\t\n+\t* testsuite/22_locale/num_get_members_char.cc: Fixup.\n+\t* testsuite/22_locale/num_get_members_wchar_t.cc: Same.\n+\t* testsuite/27_io/filebuf_members.cc: Same.\n+\n 2002-04-12  Steve Ellcey  <sje@cup.hp.com>\n \n \t* gcc/libstdc++-v3/config/os/hpux/bits/os_defines.h"}, {"sha": "eaebdf25ad9eb6c7c9a82a225e33835188b1496c", "filename": "libstdc++-v3/config/io/basic_file_stdio.cc", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3a193e36cdf55fbff3bd0f244bc36bc09871ee1/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3a193e36cdf55fbff3bd0f244bc36bc09871ee1/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.cc?ref=d3a193e36cdf55fbff3bd0f244bc36bc09871ee1", "patch": "@@ -40,13 +40,7 @@ namespace std\n   : _M_cfile(NULL), _M_cfile_created(false) { }\n \n   __basic_file<char>::~__basic_file()\n-  {\n-    if (this->is_open())\n-      {\n-\tfflush(_M_cfile);\n-\tthis->close();\n-      }\n-  }\n+  { this->close(); }\n       \n   void \n   __basic_file<char>::_M_open_mode(ios_base::openmode __mode, int&, int&, \n@@ -75,7 +69,7 @@ namespace std\n   }\n   \n   __basic_file<char>*\n-  __basic_file<char>::sys_open(__c_file_type* __file, ios_base::openmode) \n+  __basic_file<char>::sys_open(__c_file* __file, ios_base::openmode) \n   {\n     __basic_file* __ret = NULL;\n     if (!this->is_open() && __file)\n@@ -116,7 +110,7 @@ namespace std\n   }\n   \n   bool \n-  __basic_file<char>::is_open() { return _M_cfile != 0; }\n+  __basic_file<char>::is_open() const { return _M_cfile != 0; }\n   \n   int \n   __basic_file<char>::fd() { return fileno(_M_cfile) ; }\n@@ -125,8 +119,15 @@ namespace std\n   __basic_file<char>::close()\n   { \n     __basic_file* __retval = static_cast<__basic_file*>(NULL);\n-    if (_M_cfile_created && fclose(_M_cfile))\n-      __retval = this;\n+    if (this->is_open())\n+      {\n+\tfflush(_M_cfile);\n+\tif ((_M_cfile_created && fclose(_M_cfile) == 0) || !_M_cfile_created)\n+\t  {\n+\t    _M_cfile = 0;\n+\t    __retval = this;\n+\t  }\n+      }\n     return __retval;\n   }\n  "}, {"sha": "ca81d6d168f879399772c7666579388f9d6a0287", "filename": "libstdc++-v3/config/io/basic_file_stdio.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3a193e36cdf55fbff3bd0f244bc36bc09871ee1/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3a193e36cdf55fbff3bd0f244bc36bc09871ee1/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.h?ref=d3a193e36cdf55fbff3bd0f244bc36bc09871ee1", "patch": "@@ -55,7 +55,7 @@ namespace std\n     class __basic_file<char>\n     {\n       // Underlying data source/sink.\n-      __c_file_type* \t_M_cfile;\n+      __c_file* \t_M_cfile;\n       // True iff we opened _M_cfile, and thus must close it ourselves.\n       bool \t\t_M_cfile_created;\n \n@@ -70,7 +70,7 @@ namespace std\n       open(const char* __name, ios_base::openmode __mode, int __prot = 0664);\n \n       __basic_file*\n-      sys_open(__c_file_type* __file, ios_base::openmode __mode);\n+      sys_open(__c_file* __file, ios_base::openmode __mode);\n \n       char\n       sys_getc();\n@@ -82,7 +82,7 @@ namespace std\n       close(); \n \n       bool \n-      is_open();\n+      is_open() const;\n \n       int \n       fd();"}, {"sha": "0d11d14d3f93dac4d09833874df8d91fa7e5b401", "filename": "libstdc++-v3/config/io/c_io_stdio.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3a193e36cdf55fbff3bd0f244bc36bc09871ee1/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fc_io_stdio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3a193e36cdf55fbff3bd0f244bc36bc09871ee1/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fc_io_stdio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fc_io_stdio.h?ref=d3a193e36cdf55fbff3bd0f244bc36bc09871ee1", "patch": "@@ -49,7 +49,7 @@ namespace std\n   typedef __gthread_mutex_t __c_lock;\n \n // for basic_file.h\n-  typedef FILE __c_file_type;\n+  typedef FILE __c_file;\n \n // for ios_base.h\n   struct __ios_flags"}, {"sha": "8ede46ec2dd171eeb518066cbe39d8f85df0ef0b", "filename": "libstdc++-v3/config/locale/generic/c_locale.cc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3a193e36cdf55fbff3bd0f244bc36bc09871ee1/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3a193e36cdf55fbff3bd0f244bc36bc09871ee1/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.cc?ref=d3a193e36cdf55fbff3bd0f244bc36bc09871ee1", "patch": "@@ -206,12 +206,13 @@ namespace std\n     }\n \n   void\n-  locale::facet::_S_create_c_locale(__c_locale& __cloc, const char*)\n+  locale::facet::_S_create_c_locale(__c_locale& __cloc, const char*, \n+\t\t\t\t    __c_locale)\n   { __cloc = NULL; }\n \n   void\n-  locale::facet::_S_destroy_c_locale(__c_locale&)\n-  { }\n+  locale::facet::_S_destroy_c_locale(__c_locale& __cloc)\n+  { __cloc = NULL; }\n \n   __c_locale\n   locale::facet::_S_clone_c_locale(__c_locale&)"}, {"sha": "93767d93e3bbe7f918af0dca6803cc7b88fff1fc", "filename": "libstdc++-v3/config/locale/generic/collate_members.cc", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3a193e36cdf55fbff3bd0f244bc36bc09871ee1/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fcollate_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3a193e36cdf55fbff3bd0f244bc36bc09871ee1/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fcollate_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fcollate_members.cc?ref=d3a193e36cdf55fbff3bd0f244bc36bc09871ee1", "patch": "@@ -1,6 +1,6 @@\n // std::collate implementation details, generic version -*- C++ -*-\n \n-// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -41,33 +41,32 @@ namespace std\n   // be put there instead of here.\n   template<>\n     int \n-    collate<char>::_M_compare_helper(const char* __one, \n-\t\t\t\t     const char* __two) const\n+    collate<char>::_M_compare(const char* __one, const char* __two) const\n     { \n       int __cmp = strcoll(__one, __two);\n       return (__cmp >> (8 * sizeof (int) - 2)) | (__cmp != 0);\n     }\n   \n   template<>\n     size_t\n-    collate<char>::_M_transform_helper(char* __to, const char* __from, \n-\t\t\t\t       size_t __n) const\n+    collate<char>::_M_transform(char* __to, const char* __from, \n+\t\t\t\tsize_t __n) const\n     { return strxfrm(__to, __from, __n); }\n \n #ifdef _GLIBCPP_USE_WCHAR_T\n   template<>\n     int \n-    collate<wchar_t>::_M_compare_helper(const wchar_t* __one, \n-\t\t\t\t\tconst wchar_t* __two) const\n+    collate<wchar_t>::_M_compare(const wchar_t* __one, \n+\t\t\t\t const wchar_t* __two) const\n     {\n       int __cmp = wcscoll(__one, __two);\n       return (__cmp >> (8 * sizeof (int) - 2)) | (__cmp != 0);\n     }\n   \n   template<>\n     size_t\n-    collate<wchar_t>::_M_transform_helper(wchar_t* __to, const wchar_t* __from,\n-\t\t\t\t\t  size_t __n) const\n+    collate<wchar_t>::_M_transform(wchar_t* __to, const wchar_t* __from,\n+\t\t\t\t   size_t __n) const\n     { return wcsxfrm(__to, __from, __n); }\n #endif\n }"}, {"sha": "7c2e13b62df939d2bba3664d74d92169f635212e", "filename": "libstdc++-v3/config/locale/generic/monetary_members.cc", "status": "modified", "additions": 29, "deletions": 13, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3a193e36cdf55fbff3bd0f244bc36bc09871ee1/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fmonetary_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3a193e36cdf55fbff3bd0f244bc36bc09871ee1/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fmonetary_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fmonetary_members.cc?ref=d3a193e36cdf55fbff3bd0f244bc36bc09871ee1", "patch": "@@ -1,6 +1,6 @@\n // std::moneypunct implementation details, generic version -*- C++ -*-\n \n-// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -51,9 +51,9 @@ namespace std\n       _M_decimal_point = '.';\n       _M_thousands_sep = ',';\n       _M_grouping = \"\";\n-      _M_curr_symbol = string_type();\n-      _M_positive_sign = string_type();\n-      _M_negative_sign = string_type();\n+      _M_curr_symbol = \"\";\n+      _M_positive_sign = \"\";\n+      _M_negative_sign = \"\";\n       _M_frac_digits = 0;\n       _M_pos_format = money_base::_S_default_pattern;\n       _M_neg_format = money_base::_S_default_pattern;\n@@ -67,14 +67,22 @@ namespace std\n       _M_decimal_point = '.';\n       _M_thousands_sep = ',';\n       _M_grouping = \"\";\n-      _M_curr_symbol = string_type();\n-      _M_positive_sign = string_type();\n-      _M_negative_sign = string_type();\n+      _M_curr_symbol = \"\";\n+      _M_positive_sign = \"\";\n+      _M_negative_sign = \"\";\n       _M_frac_digits = 0;\n       _M_pos_format = money_base::_S_default_pattern;\n       _M_neg_format = money_base::_S_default_pattern;\n     }\n \n+  template<> \n+    moneypunct<char, true>::~moneypunct()\n+    { }\n+\n+  template<> \n+    moneypunct<char, false>::~moneypunct()\n+    { }\n+\n #ifdef _GLIBCPP_USE_WCHAR_T\n   template<> \n     void\n@@ -84,9 +92,9 @@ namespace std\n       _M_decimal_point = L'.';\n       _M_thousands_sep = L',';\n       _M_grouping = \"\";\n-      _M_curr_symbol = string_type();\n-      _M_positive_sign = string_type();\n-      _M_negative_sign = string_type();\n+      _M_curr_symbol = L\"\";\n+      _M_positive_sign = L\"\";\n+      _M_negative_sign = L\"\";\n       _M_frac_digits = 0;\n       _M_pos_format = money_base::_S_default_pattern;\n       _M_neg_format = money_base::_S_default_pattern;\n@@ -100,12 +108,20 @@ namespace std\n       _M_decimal_point = L'.';\n       _M_thousands_sep = L',';\n       _M_grouping = \"\";\n-      _M_curr_symbol = string_type();\n-      _M_positive_sign = string_type();\n-      _M_negative_sign = string_type();\n+      _M_curr_symbol = L\"\";\n+      _M_positive_sign = L\"\";\n+      _M_negative_sign = L\"\";\n       _M_frac_digits = 0;\n       _M_pos_format = money_base::_S_default_pattern;\n       _M_neg_format = money_base::_S_default_pattern;\n     }\n+\n+  template<> \n+    moneypunct<wchar_t, true>::~moneypunct()\n+    { }\n+\n+  template<> \n+    moneypunct<wchar_t, false>::~moneypunct()\n+    { }\n #endif\n }"}, {"sha": "f942e0415b069ac85e6193e69566c40c6da1cf02", "filename": "libstdc++-v3/config/locale/generic/numeric_members.cc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3a193e36cdf55fbff3bd0f244bc36bc09871ee1/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fnumeric_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3a193e36cdf55fbff3bd0f244bc36bc09871ee1/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fnumeric_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fnumeric_members.cc?ref=d3a193e36cdf55fbff3bd0f244bc36bc09871ee1", "patch": "@@ -48,6 +48,10 @@ namespace std\n       _M_truename = \"true\";\n       _M_falsename = \"false\";\n     }\n+\n+  template<> \n+    numpunct<char>::~numpunct()\n+    { }\n       \n #ifdef _GLIBCPP_USE_WCHAR_T\n   template<> \n@@ -61,5 +65,9 @@ namespace std\n       _M_truename = L\"true\";\n       _M_falsename = L\"false\";\n     }\n+\n+  template<> \n+    numpunct<wchar_t>::~numpunct()\n+    { }\n #endif\n }"}, {"sha": "16a4998cead9b33f4d1faca655e5a929484d8601", "filename": "libstdc++-v3/config/locale/generic/time_members.cc", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3a193e36cdf55fbff3bd0f244bc36bc09871ee1/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Ftime_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3a193e36cdf55fbff3bd0f244bc36bc09871ee1/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Ftime_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Ftime_members.cc?ref=d3a193e36cdf55fbff3bd0f244bc36bc09871ee1", "patch": "@@ -38,11 +38,18 @@\n \n namespace std\n {\n+  template<>\n+    __timepunct<char>::~__timepunct()\n+    {\n+      if (_M_c_locale_timepunct != _S_c_locale)\n+\t_S_destroy_c_locale(_M_c_locale_timepunct); \n+    }\n+\n   template<>\n     void\n     __timepunct<char>::\n-    _M_put_helper(char* __s, size_t __maxlen, const char* __format, \n-\t\t  const tm* __tm) const\n+    _M_put(char* __s, size_t __maxlen, const char* __format, \n+\t   const tm* __tm) const\n     {\n       const char* __old = setlocale(LC_ALL, _M_name_timepunct);\n       strftime(__s, __maxlen, __format, __tm);\n@@ -112,11 +119,18 @@ namespace std\n     }\n \n #ifdef _GLIBCPP_USE_WCHAR_T\n+  template<>\n+    __timepunct<wchar_t>::~__timepunct()\n+    {\n+      if (_M_c_locale_timepunct != _S_c_locale)\n+\t_S_destroy_c_locale(_M_c_locale_timepunct); \n+    }\n+\n   template<>\n     void\n     __timepunct<wchar_t>::\n-    _M_put_helper(wchar_t* __s, size_t __maxlen, const wchar_t* __format, \n-\t\t  const tm* __tm) const\n+    _M_put(wchar_t* __s, size_t __maxlen, const wchar_t* __format, \n+\t   const tm* __tm) const\n     {\n       const char* __old = setlocale(LC_ALL, _M_name_timepunct);\n       wcsftime(__s, __maxlen, __format, __tm);"}, {"sha": "60ec54d76dbd23a8b4946b3b2c0b83225cc12621", "filename": "libstdc++-v3/config/locale/gnu/c_locale.cc", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3a193e36cdf55fbff3bd0f244bc36bc09871ee1/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3a193e36cdf55fbff3bd0f244bc36bc09871ee1/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.cc?ref=d3a193e36cdf55fbff3bd0f244bc36bc09871ee1", "patch": "@@ -164,13 +164,10 @@ namespace std\n     }\n \n   void\n-  locale::facet::_S_create_c_locale(__c_locale& __cloc, const char* __s)\n+  locale::facet::_S_create_c_locale(__c_locale& __cloc, const char* __s, \n+\t\t\t\t    __c_locale __old)\n   {\n-    // XXX\n-    // Perhaps locale::categories could be made equivalent to LC_*_MASK ?\n-    // _M_c_locale = __newlocale(1 << LC_ALL, __s, 0);\n-    // _M_c_locale = __newlocale(locale::all, __s, 0);\n-    __cloc = __newlocale(1 << LC_ALL, __s, 0);\n+    __cloc = __newlocale(1 << LC_ALL, __s, __old);\n     if (!__cloc)\n       {\n \t// This named locale is not supported by the underlying OS."}, {"sha": "3b55f6985c6d28a4df824bdd11c37cd894e6832d", "filename": "libstdc++-v3/config/locale/gnu/collate_members.cc", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3a193e36cdf55fbff3bd0f244bc36bc09871ee1/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fcollate_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3a193e36cdf55fbff3bd0f244bc36bc09871ee1/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fcollate_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fcollate_members.cc?ref=d3a193e36cdf55fbff3bd0f244bc36bc09871ee1", "patch": "@@ -41,33 +41,32 @@ namespace std\n   // be put there instead of here.\n   template<>\n     int \n-    collate<char>::_M_compare_helper(const char* __one, \n-\t\t\t\t     const char* __two) const\n+    collate<char>::_M_compare(const char* __one, const char* __two) const\n     { \n       int __cmp = __strcoll_l(__one, __two, _M_c_locale_collate);\n       return (__cmp >> (8 * sizeof (int) - 2)) | (__cmp != 0);\n     }\n   \n   template<>\n     size_t\n-    collate<char>::_M_transform_helper(char* __to, const char* __from, \n-\t\t\t\t       size_t __n) const \n+    collate<char>::_M_transform(char* __to, const char* __from, \n+\t\t\t\tsize_t __n) const \n     { return __strxfrm_l(__to, __from, __n, _M_c_locale_collate); }\n \n #ifdef _GLIBCPP_USE_WCHAR_T\n   template<>\n     int \n-    collate<wchar_t>::_M_compare_helper(const wchar_t* __one, \n-\t\t\t\t\tconst wchar_t* __two) const\n+    collate<wchar_t>::_M_compare(const wchar_t* __one, \n+\t\t\t\t const wchar_t* __two) const\n     {\n       int __cmp = __wcscoll_l(__one, __two, _M_c_locale_collate);\n       return (__cmp >> (8 * sizeof (int) - 2)) | (__cmp != 0);\n     }\n   \n   template<>\n     size_t\n-    collate<wchar_t>::_M_transform_helper(wchar_t* __to, const wchar_t* __from,\n-\t\t\t\t\t  size_t __n) const\n+    collate<wchar_t>::_M_transform(wchar_t* __to, const wchar_t* __from,\n+\t\t\t\t   size_t __n) const\n     { return __wcsxfrm_l(__to, __from, __n, _M_c_locale_collate); }\n #endif\n }"}, {"sha": "090738bf5b614072144df22d2768df953e6924e9", "filename": "libstdc++-v3/config/locale/gnu/ctype_members.cc", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3a193e36cdf55fbff3bd0f244bc36bc09871ee1/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fctype_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3a193e36cdf55fbff3bd0f244bc36bc09871ee1/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fctype_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fctype_members.cc?ref=d3a193e36cdf55fbff3bd0f244bc36bc09871ee1", "patch": "@@ -1,6 +1,6 @@\n // std::ctype implementation details, GNU version -*- C++ -*-\n \n-// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -43,7 +43,7 @@ namespace std\n     ctype_byname<char>::ctype_byname(const char* __s, size_t __refs)\n     : ctype<char>(0, false, __refs) \n     { \t\n-      if (_M_c_locale_ctype)\n+      if (_M_c_locale_ctype != _S_c_locale)\n \t_S_destroy_c_locale(_M_c_locale_ctype);\n       _S_create_c_locale(_M_c_locale_ctype, __s); \n       _M_toupper = _M_c_locale_ctype->__ctype_toupper;\n@@ -130,8 +130,10 @@ namespace std\n   bool\n   ctype<wchar_t>::\n   do_is(mask __m, char_type __c) const\n-  { return static_cast<bool>(__iswctype_l(__c, _M_convert_to_wmask(__m), \n-\t\t\t\t\t  _M_c_locale_ctype)); }\n+  { \n+    return static_cast<bool>(__iswctype_l(__c, _M_convert_to_wmask(__m), \n+\t\t\t\t\t  _M_c_locale_ctype)); \n+  }\n   \n   const wchar_t* \n   ctype<wchar_t>::"}, {"sha": "f2020032fc2649a99080d463f5f32344b3b1fced", "filename": "libstdc++-v3/config/locale/gnu/messages_members.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3a193e36cdf55fbff3bd0f244bc36bc09871ee1/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmessages_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3a193e36cdf55fbff3bd0f244bc36bc09871ee1/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmessages_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmessages_members.cc?ref=d3a193e36cdf55fbff3bd0f244bc36bc09871ee1", "patch": "@@ -37,7 +37,7 @@\n \n namespace std\n {\n-  // Specializations\n+  // Specializations.\n   template<>\n     string\n     messages<char>::do_get(catalog, int, int, const string& __dfault) const"}, {"sha": "bf9b50cbb951e8021edbb0b05bbd8a460a56da06", "filename": "libstdc++-v3/config/locale/gnu/monetary_members.cc", "status": "modified", "additions": 116, "deletions": 76, "changes": 192, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3a193e36cdf55fbff3bd0f244bc36bc09871ee1/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmonetary_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3a193e36cdf55fbff3bd0f244bc36bc09871ee1/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmonetary_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmonetary_members.cc?ref=d3a193e36cdf55fbff3bd0f244bc36bc09871ee1", "patch": "@@ -1,6 +1,6 @@\n // std::moneypunct implementation details, GNU version -*- C++ -*-\n \n-// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -218,15 +218,15 @@ namespace std\n     void\n     moneypunct<char, true>::_M_initialize_moneypunct(__c_locale __cloc)\n     {\n-      if (!__cloc)\n+      if (__cloc == _S_c_locale)\n \t{\n \t  // \"C\" locale\n \t  _M_decimal_point = '.';\n \t  _M_thousands_sep = ',';\n \t  _M_grouping = \"\";\n-\t  _M_curr_symbol = string_type();\n-\t  _M_positive_sign = string_type();\n-\t  _M_negative_sign = string_type();\n+\t  _M_curr_symbol = \"\";\n+\t  _M_positive_sign = \"\";\n+\t  _M_negative_sign = \"\";\n \t  _M_frac_digits = 0;\n \t  _M_pos_format = money_base::_S_default_pattern;\n \t  _M_neg_format = money_base::_S_default_pattern;\n@@ -238,7 +238,12 @@ namespace std\n \t  _M_thousands_sep = *(__nl_langinfo_l(__MON_THOUSANDS_SEP, __cloc));\n \t  _M_grouping = __nl_langinfo_l(__MON_GROUPING, __cloc);\n \t  _M_positive_sign = __nl_langinfo_l(__POSITIVE_SIGN, __cloc);\n-\t  _M_negative_sign = __nl_langinfo_l(__NEGATIVE_SIGN, __cloc);\n+\n+\t  char __nposn = *(__nl_langinfo_l(__INT_N_SIGN_POSN, __cloc));\n+\t  if (!__nposn)\n+\t    _M_negative_sign = \"()\";\n+\t  else\n+\t    _M_negative_sign = __nl_langinfo_l(__NEGATIVE_SIGN, __cloc);\n \n \t  // _Intl == true\n \t  _M_curr_symbol = __nl_langinfo_l(__INT_CURR_SYMBOL, __cloc);\n@@ -249,9 +254,6 @@ namespace std\n \t  _M_pos_format = _S_construct_pattern(__pprecedes, __pspace, __pposn);\n \t  char __nprecedes = *(__nl_langinfo_l(__INT_N_CS_PRECEDES, __cloc));\n \t  char __nspace = *(__nl_langinfo_l(__INT_N_SEP_BY_SPACE, __cloc));\n-\t  char __nposn = *(__nl_langinfo_l(__INT_N_SIGN_POSN, __cloc));\n-\t  if (!__nposn)\n-\t    _M_negative_sign = \"()\";\n \t  _M_neg_format = _S_construct_pattern(__nprecedes, __nspace, __nposn);\n \t}\n     }\n@@ -260,15 +262,15 @@ namespace std\n     void\n     moneypunct<char, false>::_M_initialize_moneypunct(__c_locale __cloc)\n     {\n-      if (!__cloc)\n+      if (__cloc == _S_c_locale)\n \t{\n \t  // \"C\" locale\n \t  _M_decimal_point = '.';\n \t  _M_thousands_sep = ',';\n \t  _M_grouping = \"\";\n-\t  _M_curr_symbol = string_type();\n-\t  _M_positive_sign = string_type();\n-\t  _M_negative_sign = string_type();\n+\t  _M_curr_symbol = \"\";\n+\t  _M_positive_sign = \"\";\n+\t  _M_negative_sign = \"\";\n \t  _M_frac_digits = 0;\n \t  _M_pos_format = money_base::_S_default_pattern;\n \t  _M_neg_format = money_base::_S_default_pattern;\n@@ -280,7 +282,12 @@ namespace std\n \t  _M_thousands_sep = *(__nl_langinfo_l(__MON_THOUSANDS_SEP, __cloc));\n \t  _M_grouping = __nl_langinfo_l(__MON_GROUPING, __cloc);\n \t  _M_positive_sign = __nl_langinfo_l(__POSITIVE_SIGN, __cloc);\n-\t  _M_negative_sign = __nl_langinfo_l(__NEGATIVE_SIGN, __cloc);\n+\n+\t  char __nposn = *(__nl_langinfo_l(__N_SIGN_POSN, __cloc));\n+\t  if (!__nposn)\n+\t    _M_negative_sign = \"()\";\n+\t  else\n+\t    _M_negative_sign = __nl_langinfo_l(__NEGATIVE_SIGN, __cloc);\n \n \t  // _Intl == false\n \t  _M_curr_symbol = __nl_langinfo_l(__CURRENCY_SYMBOL, __cloc);\n@@ -291,27 +298,32 @@ namespace std\n \t  _M_pos_format = _S_construct_pattern(__pprecedes, __pspace, __pposn);\n \t  char __nprecedes = *(__nl_langinfo_l(__N_CS_PRECEDES, __cloc));\n \t  char __nspace = *(__nl_langinfo_l(__N_SEP_BY_SPACE, __cloc));\n-\t  char __nposn = *(__nl_langinfo_l(__N_SIGN_POSN, __cloc));\n-\t  if (!__nposn)\n-\t    _M_negative_sign = \"()\";\n \t  _M_neg_format = _S_construct_pattern(__nprecedes, __nspace, __nposn);\n \t}\n     }\n \n+  template<> \n+    moneypunct<char, true>::~moneypunct()\n+    { }\n+\n+  template<> \n+    moneypunct<char, false>::~moneypunct()\n+    { }\n+\n #ifdef _GLIBCPP_USE_WCHAR_T\n   template<> \n     void\n     moneypunct<wchar_t, true>::_M_initialize_moneypunct(__c_locale __cloc)\n     {\n-      if (!__cloc)\n+      if (__cloc == _S_c_locale)\n \t{\n \t  // \"C\" locale\n \t  _M_decimal_point = L'.';\n \t  _M_thousands_sep = L',';\n \t  _M_grouping = \"\";\n-\t  _M_curr_symbol = string_type();\n-\t  _M_positive_sign = string_type();\n-\t  _M_negative_sign = string_type();\n+\t  _M_curr_symbol = L\"\";\n+\t  _M_positive_sign = L\"\";\n+\t  _M_negative_sign = L\"\";\n \t  _M_frac_digits = 0;\n \t  _M_pos_format = money_base::_S_default_pattern;\n \t  _M_neg_format = money_base::_S_default_pattern;\n@@ -325,45 +337,51 @@ namespace std\n \t  _M_grouping = __nl_langinfo_l(GROUPING, __cloc);\n \n \t  mbstate_t __state;\n-\t  const char* __cs;\n-\t  string __cpossign = __nl_langinfo_l(__POSITIVE_SIGN, __cloc);\n-\t  string __cnegsign = __nl_langinfo_l(__NEGATIVE_SIGN, __cloc);\n-\t  string __ccurr = __nl_langinfo_l(__INT_CURR_SYMBOL, __cloc);\n-\t  string::size_type __len = max(__cpossign.size(), __cnegsign.size());\n-\t  __len = max(__len, __ccurr.size()) + 1;\n-\t  wchar_t* __ws = static_cast<wchar_t*>(__builtin_alloca(sizeof(wchar_t) * __len));\n+\t  size_t __len;\n+\t  const char* __cpossign = __nl_langinfo_l(__POSITIVE_SIGN, __cloc);\n+\t  const char* __cnegsign = __nl_langinfo_l(__NEGATIVE_SIGN, __cloc);\n+\t  const char* __ccurr = __nl_langinfo_l(__INT_CURR_SYMBOL, __cloc);\n \n \t  // NB: Should swich to __cloc's ctype info first.\n-\t  if (__cpossign.size())\n+\t  __len = strlen(__cpossign);\n+\t  if (__len)\n \t    {\n+\t      ++__len;\n \t      memset(&__state, 0, sizeof(mbstate_t));\n-\t      __cs = __cpossign.c_str();\n-\t      mbsrtowcs(__ws, &__cs, __cpossign.size() + 1, &__state);\n-\t      _M_positive_sign = string_type(__ws);\n+\t      wchar_t* __wcs = new wchar_t[__len];\n+\t      mbsrtowcs(__wcs, &__cpossign, __len, &__state);\n+\t      _M_positive_sign = __wcs;\n \t    }\n \t  else\n-\t    _M_positive_sign = string_type();\n+\t    _M_positive_sign = L\"\";\n \n-\t  if (__cnegsign.size())\n+\t  char __nposn = *(__nl_langinfo_l(__INT_N_SIGN_POSN, __cloc));\n+\t  __len = strlen(__cnegsign);\n+\t  if (!__nposn)\n+\t    _M_negative_sign = L\"()\";\n+\t  else if (__len)\n \t    { \n+\t      ++__len;\n \t      memset(&__state, 0, sizeof(mbstate_t));\n-\t      __cs = __cnegsign.c_str();\n-\t      mbsrtowcs(__ws, &__cs, __cnegsign.size() + 1, &__state);\n-\t      _M_negative_sign = string_type(__ws);\n+\t      wchar_t* __wcs = new wchar_t[__len];\n+\t      mbsrtowcs(__wcs, &__cnegsign, __len, &__state);\n+\t      _M_negative_sign = __wcs;\n \t    }\n \t  else\n-\t    _M_negative_sign = string_type();\n+\t    _M_negative_sign = L\"\";\n \n \t  // _Intl == true.\n-\t  if (__ccurr.size())\n+\t  __len = strlen(__ccurr);\n+\t  if (__len)\n \t    {\n+\t      ++__len;\n \t      memset(&__state, 0, sizeof(mbstate_t));\n-\t      __cs = __ccurr.c_str();\n-\t      mbsrtowcs(__ws, &__cs, __ccurr.size() + 1, &__state);\n-\t      _M_curr_symbol = string_type(__ws);\n+\t      wchar_t* __wcs = new wchar_t[__len];\n+\t      mbsrtowcs(__wcs, &__ccurr, __len, &__state);\n+\t      _M_curr_symbol = __wcs;\n \t    }\n \t  else\n-\t    _M_curr_symbol = string_type();\n+\t    _M_curr_symbol = L\"\";\n \n \t  _M_frac_digits = *(__nl_langinfo_l(__INT_FRAC_DIGITS, __cloc));\n \t  char __pprecedes = *(__nl_langinfo_l(__INT_P_CS_PRECEDES, __cloc));\n@@ -372,9 +390,6 @@ namespace std\n \t  _M_pos_format = _S_construct_pattern(__pprecedes, __pspace, __pposn);\n \t  char __nprecedes = *(__nl_langinfo_l(__INT_N_CS_PRECEDES, __cloc));\n \t  char __nspace = *(__nl_langinfo_l(__INT_N_SEP_BY_SPACE, __cloc));\n-\t  char __nposn = *(__nl_langinfo_l(__INT_N_SIGN_POSN, __cloc));\n-\t  if (!__nposn)\n-\t    _M_negative_sign = L\"()\";\n \t  _M_neg_format = _S_construct_pattern(__nprecedes, __nspace, __nposn);\n \t}\n     }\n@@ -383,15 +398,15 @@ namespace std\n     void\n     moneypunct<wchar_t, false>::_M_initialize_moneypunct(__c_locale __cloc)\n     {\n-      if (!__cloc)\n+      if (__cloc == _S_c_locale)\n \t{\n \t  // \"C\" locale\n \t  _M_decimal_point = L'.';\n \t  _M_thousands_sep = L',';\n \t  _M_grouping = \"\";\n-\t  _M_curr_symbol = string_type();\n-\t  _M_positive_sign = string_type();\n-\t  _M_negative_sign = string_type();\n+\t  _M_curr_symbol = L\"\";\n+\t  _M_positive_sign = L\"\";\n+\t  _M_negative_sign = L\"\";\n \t  _M_frac_digits = 0;\n \t  _M_pos_format = money_base::_S_default_pattern;\n \t  _M_neg_format = money_base::_S_default_pattern;\n@@ -404,45 +419,51 @@ namespace std\n \t  _M_grouping = __nl_langinfo_l(GROUPING, __cloc);\n \n \t  mbstate_t __state;\n-\t  const char* __cs;\n-\t  string __cpossign = __nl_langinfo_l(__POSITIVE_SIGN, __cloc);\n-\t  string __cnegsign = __nl_langinfo_l(__NEGATIVE_SIGN, __cloc);\n-\t  string __ccurr = __nl_langinfo_l(__CURRENCY_SYMBOL, __cloc);\n-\t  string::size_type __len = max(__cpossign.size(), __cnegsign.size());\n-\t  __len = max(__len, __ccurr.size()) + 1;\n-\t  wchar_t* __ws = static_cast<wchar_t*>(__builtin_alloca(sizeof(wchar_t) * __len));\n+\t  size_t __len;\n+\t  const char* __cpossign = __nl_langinfo_l(__POSITIVE_SIGN, __cloc);\n+\t  const char* __cnegsign = __nl_langinfo_l(__NEGATIVE_SIGN, __cloc);\n+\t  const char* __ccurr = __nl_langinfo_l(__CURRENCY_SYMBOL, __cloc);\n \n \t  // NB: Should swich to __cloc's ctype info first.\n-\t  if (__cpossign.size())\n+\t  __len = strlen(__cpossign);\n+\t  if (__len)\n \t    {\n+\t      ++__len;\n \t      memset(&__state, 0, sizeof(mbstate_t));\n-\t      __cs = __cpossign.c_str();\n-\t      mbsrtowcs(__ws, &__cs, __cpossign.size() + 1, &__state);\n-\t      _M_positive_sign = string_type(__ws);\n+\t      wchar_t* __wcs = new wchar_t[__len];\n+\t      mbsrtowcs(__wcs, &__cpossign, __len, &__state);\n+\t      _M_positive_sign = __wcs;\n \t    }\n \t  else\n-\t    _M_positive_sign = string_type();\n+\t    _M_positive_sign = L\"\";\n \n-\t  if (__cnegsign.size())\n+\t  char __nposn = *(__nl_langinfo_l(__N_SIGN_POSN, __cloc));\n+\t  __len = strlen(__cnegsign);\n+\t  if (!__nposn)\n+\t    _M_negative_sign = L\"()\";\n+\t  else if (__len)\n \t    { \n+\t      ++__len;\n \t      memset(&__state, 0, sizeof(mbstate_t));\n-\t      __cs = __cnegsign.c_str();\n-\t      mbsrtowcs(__ws, &__cs, __cnegsign.size() + 1, &__state);\n-\t      _M_negative_sign = string_type(__ws);\n+\t      wchar_t* __wcs = new wchar_t[__len];\n+\t      mbsrtowcs(__wcs, &__cnegsign, __len, &__state);\n+\t      _M_negative_sign = __wcs;\n \t    }\n \t  else\n-\t    _M_negative_sign = string_type();\n+\t    _M_negative_sign = L\"\";\n \n-\t  // _Intl == false.\n-\t  if (__ccurr.size())\n+\t  // _Intl == true.\n+\t  __len = strlen(__ccurr);\n+\t  if (__len)\n \t    {\n+\t      ++__len;\n \t      memset(&__state, 0, sizeof(mbstate_t));\n-\t      __cs = __ccurr.c_str();\n-\t      mbsrtowcs(__ws, &__cs, __ccurr.size() + 1, &__state);\n-\t      _M_curr_symbol = string_type(__ws);\n+\t      wchar_t* __wcs = new wchar_t[__len];\n+\t      mbsrtowcs(__wcs, &__ccurr, __len, &__state);\n+\t      _M_curr_symbol = __wcs;\n \t    }\n \t  else\n-\t    _M_curr_symbol = string_type();\n+\t    _M_curr_symbol = L\"\";\n \n \t  _M_frac_digits = *(__nl_langinfo_l(__FRAC_DIGITS, __cloc));\n \t  char __pprecedes = *(__nl_langinfo_l(__P_CS_PRECEDES, __cloc));\n@@ -451,11 +472,30 @@ namespace std\n \t  _M_pos_format = _S_construct_pattern(__pprecedes, __pspace, __pposn);\n \t  char __nprecedes = *(__nl_langinfo_l(__N_CS_PRECEDES, __cloc));\n \t  char __nspace = *(__nl_langinfo_l(__N_SEP_BY_SPACE, __cloc));\n-\t  char __nposn = *(__nl_langinfo_l(__N_SIGN_POSN, __cloc));\n-\t  if (!__nposn)\n-\t    _M_negative_sign = L\"()\";\n \t  _M_neg_format = _S_construct_pattern(__nprecedes, __nspace, __nposn);\n \t}\n     }\n+\n+  template<> \n+    moneypunct<wchar_t, true>::~moneypunct()\n+    {\n+      if (wcslen(_M_positive_sign))\n+\tdelete [] _M_positive_sign;\n+      if (wcslen(_M_negative_sign) && (wcscmp(_M_negative_sign, L\"()\") != 0))\n+\tdelete [] _M_negative_sign;\n+      if (wcslen(_M_curr_symbol))\n+\tdelete [] _M_curr_symbol;\n+    }\n+\n+  template<> \n+    moneypunct<wchar_t, false>::~moneypunct()\n+    {\n+      if (wcslen(_M_positive_sign))\n+\tdelete [] _M_positive_sign;\n+      if (wcslen(_M_negative_sign) && (wcscmp(_M_negative_sign, L\"()\") != 0))\n+\tdelete [] _M_negative_sign;\n+      if (wcslen(_M_curr_symbol))\n+\tdelete [] _M_curr_symbol;\n+    }\n #endif\n }"}, {"sha": "4806435a50fb6df0cb8941c8ee8181f006ae18f0", "filename": "libstdc++-v3/config/locale/gnu/numeric_members.cc", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3a193e36cdf55fbff3bd0f244bc36bc09871ee1/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fnumeric_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3a193e36cdf55fbff3bd0f244bc36bc09871ee1/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fnumeric_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fnumeric_members.cc?ref=d3a193e36cdf55fbff3bd0f244bc36bc09871ee1", "patch": "@@ -41,7 +41,7 @@ namespace std\n     void\n     numpunct<char>::_M_initialize_numpunct(__c_locale __cloc)\n     {\n-      if (!__cloc)\n+      if (__cloc == _S_c_locale)\n \t{\n \t  // \"C\" locale\n \t  _M_decimal_point = '.';\n@@ -65,13 +65,17 @@ namespace std\n       // _M_falsename = __nl_langinfo_l(NOSTR, __cloc);\n       _M_falsename = \"false\";\n     }\n-      \n+ \n+  template<> \n+    numpunct<char>::~numpunct()\n+    { }\n+   \n #ifdef _GLIBCPP_USE_WCHAR_T\n   template<> \n     void\n     numpunct<wchar_t>::_M_initialize_numpunct(__c_locale __cloc)\n     {\n-      if (!__cloc)\n+      if (__cloc == _S_c_locale)\n \t{\n \t  // \"C\" locale\n \t  _M_decimal_point = L'.';\n@@ -94,5 +98,9 @@ namespace std\n       // _M_falsename = __nl_langinfo_l(NOSTR, __cloc);\n       _M_falsename = L\"false\";\n     }\n-#endif\n+\n+  template<> \n+    numpunct<wchar_t>::~numpunct()\n+    { }\n+ #endif\n }"}, {"sha": "665ea0245be4b685f11b0774ad923bfb828b139c", "filename": "libstdc++-v3/config/locale/gnu/time_members.cc", "status": "modified", "additions": 22, "deletions": 14, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3a193e36cdf55fbff3bd0f244bc36bc09871ee1/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Ftime_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3a193e36cdf55fbff3bd0f244bc36bc09871ee1/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Ftime_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Ftime_members.cc?ref=d3a193e36cdf55fbff3bd0f244bc36bc09871ee1", "patch": "@@ -38,17 +38,21 @@\n \n namespace std\n {\n+  template<>\n+    __timepunct<char>::~__timepunct()\n+    {\n+      if (_M_c_locale_timepunct != _S_c_locale)\n+\t_S_destroy_c_locale(_M_c_locale_timepunct); \n+    }\n+\n   template<>\n     void\n     __timepunct<char>::\n-    _M_put_helper(char* __s, size_t __maxlen, const char* __format, \n-\t\t  const tm* __tm) const\n+    _M_put(char* __s, size_t __maxlen, const char* __format, \n+\t   const tm* __tm) const\n     {\n #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n-      if (_M_c_locale_timepunct)\n-\t__strftime_l(__s, __maxlen, _M_c_locale_timepunct, __format, __tm);\n-      else\n-\tstrftime(__s, __maxlen, __format, __tm);\n+      __strftime_l(__s, __maxlen, _M_c_locale_timepunct, __format, __tm);\n #else\n       const char* __old = setlocale(LC_ALL, _M_name_timepunct);\n       strftime(__s, __maxlen, __format, __tm);\n@@ -60,7 +64,7 @@ namespace std\n     void\n     __timepunct<char>::_M_initialize_timepunct(__c_locale __cloc)\n     {\n-      if (!__cloc)\n+      if (__cloc == _S_c_locale)\n \t{\n \t  // \"C\" locale\n \t  _M_date_format = \"%m/%d/%y\";\n@@ -182,17 +186,21 @@ namespace std\n     }\n \n #ifdef _GLIBCPP_USE_WCHAR_T\n+  template<>\n+    __timepunct<wchar_t>::~__timepunct()\n+    {\n+      if (_M_c_locale_timepunct != _S_c_locale)\n+\t_S_destroy_c_locale(_M_c_locale_timepunct); \n+    }\n+\n   template<>\n     void\n     __timepunct<wchar_t>::\n-    _M_put_helper(wchar_t* __s, size_t __maxlen, const wchar_t* __format, \n-\t\t  const tm* __tm) const\n+    _M_put(wchar_t* __s, size_t __maxlen, const wchar_t* __format, \n+\t   const tm* __tm) const\n     {\n #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n-      if (_M_c_locale_timepunct)\n-\t__wcsftime_l(__s, __maxlen, _M_c_locale_timepunct, __format, __tm);\n-      else\n-\twcsftime(__s, __maxlen, __format, __tm);\n+      __wcsftime_l(__s, __maxlen, _M_c_locale_timepunct, __format, __tm);\n #else\n       const char* __old = setlocale(LC_ALL, _M_name_timepunct);\n       wcsftime(__s, __maxlen, __format, __tm);\n@@ -204,7 +212,7 @@ namespace std\n     void\n     __timepunct<wchar_t>::_M_initialize_timepunct(__c_locale __cloc)\n     {\n-      if (!__cloc)\n+      if (__cloc == _S_c_locale)\n \t{\n \t  // \"C\" locale\n \t  _M_date_format = L\"%m/%d/%y\";"}, {"sha": "0a89aeea034fbd00e40334c74a0d92e59550985c", "filename": "libstdc++-v3/config/locale/ieee_1003.1-2001/c_locale.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3a193e36cdf55fbff3bd0f244bc36bc09871ee1/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fieee_1003.1-2001%2Fc_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3a193e36cdf55fbff3bd0f244bc36bc09871ee1/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fieee_1003.1-2001%2Fc_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fieee_1003.1-2001%2Fc_locale.cc?ref=d3a193e36cdf55fbff3bd0f244bc36bc09871ee1", "patch": "@@ -1,6 +1,6 @@\n // Wrapper for underlying C-language localization -*- C++ -*-\n \n-// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -38,7 +38,7 @@\n namespace std \n {\n   void\n-  locale::facet::_S_create_c_locale(__c_locale&, const char*)\n+  locale::facet::_S_create_c_locale(__c_locale&, const char*, __c_locale*)\n   { }\n \n   void"}, {"sha": "4c68f2758ea262a1ab93a7478dfe1f8e2b778dce", "filename": "libstdc++-v3/config/locale/ieee_1003.1-2001/c_locale.h", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3a193e36cdf55fbff3bd0f244bc36bc09871ee1/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fieee_1003.1-2001%2Fc_locale.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3a193e36cdf55fbff3bd0f244bc36bc09871ee1/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fieee_1003.1-2001%2Fc_locale.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fieee_1003.1-2001%2Fc_locale.h?ref=d3a193e36cdf55fbff3bd0f244bc36bc09871ee1", "patch": "@@ -1,6 +1,6 @@\n // Wrapper for underlying C-language localization -*- C++ -*-\n \n-// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -40,10 +40,5 @@\n \n namespace std\n {\n-  typedef __locale_t\t\t__c_locale;\n+  typedef int*\t\t\t__c_locale;\n }\n-\n-\n-\n-\n-"}, {"sha": "139e6c9ca352f787263bbe5c7db20783c6ad9295", "filename": "libstdc++-v3/config/locale/ieee_1003.1-2001/codecvt_specializations.h", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3a193e36cdf55fbff3bd0f244bc36bc09871ee1/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fieee_1003.1-2001%2Fcodecvt_specializations.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3a193e36cdf55fbff3bd0f244bc36bc09871ee1/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fieee_1003.1-2001%2Fcodecvt_specializations.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fieee_1003.1-2001%2Fcodecvt_specializations.h?ref=d3a193e36cdf55fbff3bd0f244bc36bc09871ee1", "patch": "@@ -39,10 +39,6 @@\n   // Define this here to codecvt.cc can have _S_max_size definition.\n #define _GLIBCPP_USE___ENC_TRAITS 1\n \n-#if _GLIBCPP_USE_SHADOW_HEADERS\n-  using _C_legacy::CODESET;\n-#endif\n-\n   // Extension to use icov for dealing with character encodings,\n   // including conversions and comparisons between various character\n   // sets.  This object encapsulates data that may need to be shared between\n@@ -83,23 +79,6 @@\n       memset(_M_ext_enc, 0, _S_max_size);\n     }\n \n-    explicit __enc_traits(const locale& __loc)\n-    : _M_in_desc(0), _M_out_desc(0), _M_ext_bom(0), _M_int_bom(0)\n-    {\n-      // __intc_end = whatever we are using internally, which is\n-      // UCS4 (linux, solaris) \n-      // UCS2 == UNICODE  (microsoft, java, aix, whatever...)\n-      // XXX Currently don't know how to get this data from target system...\n-      strcpy(_M_int_enc, \"UCS4\");\n-\n-      // __extc_end = external codeset in current locale\n-      // XXX There has got to be a better way to do this.\n-      __c_locale __cloc;\n-      locale::facet::_S_create_c_locale(__cloc, __loc.name().c_str());\n-      strcpy(_M_ext_enc, __nl_langinfo_l(CODESET, __cloc));\n-      locale::facet::_S_destroy_c_locale(__cloc);\n-    }\n-\n     explicit __enc_traits(const char* __int, const char* __ext, \n \t\t\t  int __ibom = 0, int __ebom = 0)\n     : _M_in_desc(0), _M_out_desc(0), _M_ext_bom(0), _M_int_bom(0)"}, {"sha": "ee70ab46c3b94af44eb2912bab950df03d489bb6", "filename": "libstdc++-v3/config/os/gnu-linux/bits/ctype_noninline.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3a193e36cdf55fbff3bd0f244bc36bc09871ee1/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fbits%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3a193e36cdf55fbff3bd0f244bc36bc09871ee1/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fbits%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fbits%2Fctype_noninline.h?ref=d3a193e36cdf55fbff3bd0f244bc36bc09871ee1", "patch": "@@ -60,14 +60,14 @@\n   : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n   _M_toupper(__ctype_toupper), _M_tolower(__ctype_tolower),\n   _M_table(__table ? __table : classic_table())\n-  { _M_c_locale_ctype = NULL; }\n+  { _M_c_locale_ctype = _S_c_locale; }\n #endif\n \n   ctype<char>::ctype(const mask* __table, bool __del, size_t __refs) : \n   __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n   _M_toupper(__ctype_toupper), _M_tolower(__ctype_tolower),\n   _M_table(__table ? __table : classic_table())\n-  { _M_c_locale_ctype = NULL; }\n+  { _M_c_locale_ctype = _S_c_locale; }\n \n   char\n   ctype<char>::do_toupper(char __c) const"}, {"sha": "3f4b5fb73cac7e8480a707c99987938889bde48f", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3a193e36cdf55fbff3bd0f244bc36bc09871ee1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3a193e36cdf55fbff3bd0f244bc36bc09871ee1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=d3a193e36cdf55fbff3bd0f244bc36bc09871ee1", "patch": "@@ -443,7 +443,7 @@ namespace std\n       void* __place = _Raw_bytes_alloc(__alloc).allocate(__size);\n       _Rep *__p = new (__place) _Rep;\n       __p->_M_capacity = __capacity;\n-      __p->_M_set_sharable();  // one reference\n+      __p->_M_set_sharable();  // One reference.\n       __p->_M_length = 0;\n       return __p;\n     }"}, {"sha": "fb2f87672acc43afeca587c8c47df282a24b99ed", "filename": "libstdc++-v3/include/bits/fstream.tcc", "status": "modified", "additions": 44, "deletions": 83, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3a193e36cdf55fbff3bd0f244bc36bc09871ee1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3a193e36cdf55fbff3bd0f244bc36bc09871ee1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc?ref=d3a193e36cdf55fbff3bd0f244bc36bc09871ee1", "patch": "@@ -39,24 +39,6 @@\n \n namespace std\n {\n-  template<typename _CharT, typename _Traits>\n-    void\n-    basic_filebuf<_CharT, _Traits>::\n-    _M_allocate_file()\n-    {\n-      if (!_M_file)\n-\t{\n-\t  _M_buf_unified = true; // Tie input to output for basic_filebuf.\n-\t  try \n-\t    { _M_file = new __file_type(&_M_lock); }\n-\t  catch(...) \n-\t    {\n-\t      delete _M_file;\n-\t      __throw_exception_again;\n-\t    }\n-\t}\n-    }\n-\n   template<typename _CharT, typename _Traits>\n     void\n     basic_filebuf<_CharT, _Traits>::\n@@ -66,14 +48,19 @@ namespace std\n \t{\n \t  _M_buf_size = _M_buf_size_opt;\n \n-\t  // Allocate internal buffer.\n-\t  try { _M_buf = new char_type[_M_buf_size]; }\n-\t  catch(...) \n+\t  if (_M_buf_size != 1)\n \t    {\n-\t      delete [] _M_buf;\n-\t      __throw_exception_again;\n+\t      // Allocate internal buffer.\n+\t      try { _M_buf = new char_type[_M_buf_size]; }\n+\t      catch(...) \n+\t\t{\n+\t\t  delete [] _M_buf;\n+\t\t  __throw_exception_again;\n+\t\t}\n+\t      _M_buf_allocated = true;\n \t    }\n-\t  _M_buf_allocated = true;\n+\t  else\n+\t    _M_buf = _M_unbuf;\n \t}\n     }\n \n@@ -91,43 +78,34 @@ namespace std\n \t  this->setg(NULL, NULL, NULL);\n \t  this->setp(NULL, NULL);\n \t}\n-    }\n-\n- template<typename _CharT, typename _Traits>\n-    void\n-    basic_filebuf<_CharT, _Traits>::\n-    _M_allocate_pback_buffer()\n-    {\n-      if (!_M_pback && _M_pback_size)\n+      else\n \t{\n-\t  // Allocate pback buffer.\n-\t  try \n-\t    { _M_pback = new char_type[_M_pback_size]; }\n-\t  catch(...) \n+\t  if (_M_buf == _M_unbuf)\n \t    {\n-\t      delete [] _M_pback;\n-\t      __throw_exception_again;\n+\t      _M_buf = NULL;\n+\t      this->setg(NULL, NULL, NULL);\n+\t      this->setp(NULL, NULL);\n \t    }\n \t}\n     }\n \n   template<typename _CharT, typename _Traits>\n     basic_filebuf<_CharT, _Traits>::\n     basic_filebuf() \n-    : __streambuf_type(), _M_file(NULL), _M_state_cur(__state_type()), \n+    : __streambuf_type(), _M_file(&_M_lock), _M_state_cur(__state_type()), \n     _M_state_beg(__state_type()), _M_buf_allocated(false), \n     _M_last_overflowed(false)\n-    { }\n+    { _M_buf_unified = true; }\n \n   template<typename _CharT, typename _Traits>\n     basic_filebuf<_CharT, _Traits>::\n-    basic_filebuf(__c_file_type* __f, ios_base::openmode __mode, int_type __s)\n-    : __streambuf_type(),  _M_file(NULL), _M_state_cur(__state_type()), \n+    basic_filebuf(__c_file* __f, ios_base::openmode __mode, int_type __s)\n+    : __streambuf_type(),  _M_file(&_M_lock), _M_state_cur(__state_type()), \n     _M_state_beg(__state_type()), _M_buf_allocated(false), \n     _M_last_overflowed(false)\n     {\n-      _M_allocate_file();\n-      _M_file->sys_open(__f, __mode);\n+      _M_buf_unified = true; \n+      _M_file.sys_open(__f, __mode);\n       if (this->is_open())\n \t{\n \t  _M_mode = __mode;\n@@ -137,15 +115,14 @@ namespace std\n \t      _M_allocate_internal_buffer();\n \t      _M_set_indeterminate();\n \t    }\n-\t  _M_allocate_pback_buffer();\n \t}\n     }\n \n   template<typename _CharT, typename _Traits>\n     int\n     basic_filebuf<_CharT, _Traits>::\n     fd()\n-    { return _M_file->fd(); }\n+    { return _M_file.fd(); }\n \n   template<typename _CharT, typename _Traits>\n     typename basic_filebuf<_CharT, _Traits>::__filebuf_type* \n@@ -155,12 +132,10 @@ namespace std\n       __filebuf_type *__ret = NULL;\n       if (!this->is_open())\n \t{\n-\t  _M_allocate_file();\n-\t  _M_file->open(__s, __mode);\n+\t  _M_file.open(__s, __mode);\n \t  if (this->is_open())\n \t    {\n \t      _M_allocate_internal_buffer();\n-\t      _M_allocate_pback_buffer();\n \t      _M_mode = __mode;\n \t      \n \t      // For time being, set both (in/out) sets  of pointers.\n@@ -190,13 +165,7 @@ namespace std\n \t  // NB: Do this here so that re-opened filebufs will be cool...\n \t  _M_mode = ios_base::openmode(0);\n \t  _M_destroy_internal_buffer();\n-\t  \n \t  _M_pback_destroy();\n-\t  if (_M_pback)\n-\t    {\n-\t      delete [] _M_pback;\n-\t      _M_pback = NULL;\n-\t    }\n \t  \n #if 0\n \t  // XXX not done\n@@ -206,16 +175,11 @@ namespace std\n \t      _M_really_overflow(__eof);\n \t    }\n #endif\n-\t  __ret = this;\n-\t}\n \n-      // Can actually allocate this file as part of an open and never\n-      // have it be opened.....\n-      if (_M_file)\n-\t{\n-\t  delete _M_file;\n-\t  _M_file = NULL;\n+\t  if (_M_file.close())\n+\t    __ret = this;\n \t}\n+\n       _M_last_overflowed = false;\t\n       return __ret;\n     }\n@@ -270,11 +234,11 @@ namespace std\n \t\t_M_really_overflow();\n #if _GLIBCPP_AVOID_FSEEK\n \t      else if ((_M_in_cur - _M_in_beg) == 1)\n-\t\t_M_file->sys_getc();\n+\t\t_M_file.sys_getc();\n #endif\n \t      else \n-\t\t_M_file->seekoff(_M_in_cur - _M_in_beg, \n-\t\t\t\t ios_base::cur, ios_base::in);\n+\t\t_M_file.seekoff(_M_in_cur - _M_in_beg, \n+\t\t\t\tios_base::cur, ios_base::in);\n \t    }\n \n \t  if (__testinit || __testget)\n@@ -286,14 +250,14 @@ namespace std\n \t      streamsize __ilen = 0;\n \t      if (__cvt.always_noconv())\n \t\t{\n-\t\t  __elen = _M_file->xsgetn(reinterpret_cast<char*>(_M_in_beg), \n-\t\t\t\t\t   _M_buf_size);\n+\t\t  __elen = _M_file.xsgetn(reinterpret_cast<char*>(_M_in_beg), \n+\t\t\t\t\t  _M_buf_size);\n \t\t  __ilen = __elen;\n \t\t}\n \t      else\n \t\t{\n \t\t  char* __buf = static_cast<char*>(__builtin_alloca(_M_buf_size));\n-\t\t  __elen = _M_file->xsgetn(__buf, _M_buf_size);\n+\t\t  __elen = _M_file.xsgetn(__buf, _M_buf_size);\n \n \t\t  const char* __eend;\n \t\t  char_type* __iend;\n@@ -306,7 +270,7 @@ namespace std\n \t\t    {\n \t\t      // Unwind.\n \t\t      __ilen = 0;\n-\t\t      _M_file->seekoff(-__elen, ios_base::cur, ios_base::in);\n+\t\t      _M_file.seekoff(-__elen, ios_base::cur, ios_base::in);\n \t\t    }\n \t\t}\n \n@@ -318,11 +282,11 @@ namespace std\n \t\t  __ret = traits_type::to_int_type(*_M_in_cur);\n #if _GLIBCPP_AVOID_FSEEK\n \t\t  if (__elen == 1)\n-\t\t    _M_file->sys_ungetc(*_M_in_cur);\n+\t\t    _M_file.sys_ungetc(*_M_in_cur);\n \t\t  else\n \t\t    {\n #endif\n-\t\t      _M_file->seekoff(-__elen, ios_base::cur, ios_base::in);\n+\t\t      _M_file.seekoff(-__elen, ios_base::cur, ios_base::in);\n #if _GLIBCPP_AVOID_FSEEK\n \t\t    }\n #endif\n@@ -437,7 +401,7 @@ namespace std\n       \n       if (__cvt.always_noconv() && __ilen)\n \t{\n-\t  __elen += _M_file->xsputn(reinterpret_cast<char*>(__ibuf), __ilen);\n+\t  __elen += _M_file.xsputn(reinterpret_cast<char*>(__ibuf), __ilen);\n \t  __plen += __ilen;\n \t}\n       else\n@@ -461,7 +425,7 @@ namespace std\n \t  \n \t  if (__blen)\n \t    {\n-\t      __elen += _M_file->xsputn(__buf, __blen);\n+\t      __elen += _M_file.xsputn(__buf, __blen);\n \t      __plen += __blen;\n \t    }\n \n@@ -478,7 +442,7 @@ namespace std\n \t\t__rlen = 0;\n \t      if (__rlen)\n \t\t{\n-\t\t  __elen += _M_file->xsputn(__buf, __rlen);\n+\t\t  __elen += _M_file.xsputn(__buf, __rlen);\n \t\t  __plen += __rlen;\n \t\t}\n \t    }\n@@ -492,7 +456,7 @@ namespace std\n     {\n       int_type __ret = traits_type::eof();\n       bool __testput = _M_out_cur && _M_out_beg < _M_out_end;\n-      bool __testunbuffered = _M_file && !_M_buf_size;\n+      bool __testunbuffered = _M_file.is_open() && !_M_buf_size;\n \n       if (__testput || __testunbuffered)\n \t{\n@@ -516,7 +480,7 @@ namespace std\n \t  // Last, sync internal and external buffers.\n \t  // NB: Need this so that external byte sequence reflects\n \t  // internal buffer plus pending sequence.\n-\t  if (__elen == __plen && !_M_file->sync())\n+\t  if (__elen == __plen && !_M_file.sync())\n \t    {\n \t      _M_set_indeterminate();\n \t      __ret = traits_type::not_eof(__c);\n@@ -546,9 +510,6 @@ namespace std\n \t  _M_buf = __s;\n \t  _M_buf_size_opt = _M_buf_size = __n;\n \t  _M_set_indeterminate();\n-\t  \n-\t// Step 3: Make sure a pback buffer is allocated.\n-\t  _M_allocate_pback_buffer();\n \t}\n       _M_last_overflowed = false;\t\n       return this; \n@@ -594,14 +555,14 @@ namespace std\n \t      else if (__testget && __way == ios_base::cur)\n \t\t__computed_off += _M_in_cur - _M_in_beg;\n \t  \n-\t      __ret = _M_file->seekoff(__computed_off, __way, __mode);\n+\t      __ret = _M_file.seekoff(__computed_off, __way, __mode);\n \t      _M_set_indeterminate();\n \t    }\n \t  // NB: Need to do this in case _M_file in indeterminate\n-\t  // state, ie _M_file->_offset == -1\n+\t  // state, ie _M_file._offset == -1\n \t  else\n \t    {\n-\t      __ret = _M_file->seekoff(__off, ios_base::cur, __mode);\n+\t      __ret = _M_file.seekoff(__off, ios_base::cur, __mode);\n \t      __ret += max(_M_out_cur, _M_in_cur) - _M_buf;\n \t    }\n \t}"}, {"sha": "d63eb5dd2d5f8d1f5d310b51f7b79704b3ce6caa", "filename": "libstdc++-v3/include/bits/locale_facets.h", "status": "modified", "additions": 79, "deletions": 48, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3a193e36cdf55fbff3bd0f244bc36bc09871ee1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3a193e36cdf55fbff3bd0f244bc36bc09871ee1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h?ref=d3a193e36cdf55fbff3bd0f244bc36bc09871ee1", "patch": "@@ -43,13 +43,18 @@\n #pragma GCC system_header\n \n #include <ctime>\t// For struct tm\n-#ifdef _GLIBCPP_USE_WCHAR_T\n-# include <cwctype>\t// For wctype_t\n-#endif \n+#include <cwctype>\t// For wctype_t\n #include <ios>\t\t// For ios_base\n \n namespace std\n {\n+  // NB: Don't instantiate required wchar_t facets if no wchar_t support.\n+#ifdef _GLIBCPP_USE_WCHAR_T\n+# define  _GLIBCPP_NUM_FACETS 28\n+#else\n+# define  _GLIBCPP_NUM_FACETS 14\n+#endif\n+\n   // 22.2.1.1  Template class ctype\n   // Include host and configuration specific ctype enums for ctype_base.\n   #include <bits/ctype_base.h>\n@@ -169,11 +174,11 @@ namespace std\n       typedef _CharT \t\t  \tchar_type;\n       typedef typename ctype::mask \tmask;\n \n+      static locale::id \t       \tid;\n+\n       explicit \n       ctype(size_t __refs = 0) : __ctype_abstract_base<_CharT>(__refs) { }\n \n-      static locale::id \t       \tid;\n-\n    protected:\n       virtual \n       ~ctype();\n@@ -458,9 +463,9 @@ namespace std\n     private:\n       char_type \t\t\t_M_decimal_point;\n       char_type \t\t\t_M_thousands_sep;\n-      string \t\t\t\t_M_grouping;\n-      string_type \t\t\t_M_truename;\n-      string_type \t\t\t_M_falsename;\n+      const char* \t\t\t_M_grouping;\n+      const char_type* \t\t\t_M_truename;\n+      const char_type*\t\t\t_M_falsename;\n \n     public:\n       explicit \n@@ -493,7 +498,7 @@ namespace std\n \n     protected:\n       virtual \n-      ~numpunct() { }\n+      ~numpunct();\n \n       virtual char_type    \n       do_decimal_point() const\n@@ -517,17 +522,23 @@ namespace std\n \n       // For use at construction time only.\n       void \n-      _M_initialize_numpunct(__c_locale __cloc = NULL);\n+      _M_initialize_numpunct(__c_locale __cloc = _S_c_locale);\n     };\n \n   template<typename _CharT>\n     locale::id numpunct<_CharT>::id;\n \n+  template<> \n+    numpunct<char>::~numpunct();\n+\n   template<> \n     void\n     numpunct<char>::_M_initialize_numpunct(__c_locale __cloc);\n \n #ifdef _GLIBCPP_USE_WCHAR_T\n+  template<> \n+    numpunct<wchar_t>::~numpunct();\n+\n   template<> \n     void\n     numpunct<wchar_t>::_M_initialize_numpunct(__c_locale __cloc);\n@@ -813,7 +824,7 @@ namespace std\n       explicit \n       collate(size_t __refs = 0)\n       : locale::facet(__refs)\n-      { _M_c_locale_collate = _S_clone_c_locale(_S_c_locale); }\n+      { _M_c_locale_collate = _S_c_locale; }\n \n       // Non-standard.\n       explicit \n@@ -836,15 +847,18 @@ namespace std\n       \n       // Used to abstract out _CharT bits in virtual member functions, below.\n       int\n-      _M_compare_helper(const _CharT*, const _CharT*) const;\n+      _M_compare(const _CharT*, const _CharT*) const;\n \n       size_t\n-      _M_transform_helper(_CharT*, const _CharT*, size_t) const;\n+      _M_transform(_CharT*, const _CharT*, size_t) const;\n \n   protected:\n       virtual\n       ~collate() \n-      { _S_destroy_c_locale(_M_c_locale_collate); }\n+      {\n+\tif (_M_c_locale_collate != _S_c_locale)\n+\t  _S_destroy_c_locale(_M_c_locale_collate); \n+      }\n \n       virtual int  \n       do_compare(const _CharT* __lo1, const _CharT* __hi1,\n@@ -863,21 +877,20 @@ namespace std\n   // Specializations.\n   template<>\n     int \n-    collate<char>::_M_compare_helper(const char*, const char*) const;\n+    collate<char>::_M_compare(const char*, const char*) const;\n \n   template<>\n     size_t\n-    collate<char>::_M_transform_helper(char*, const char*, size_t) const;\n+    collate<char>::_M_transform(char*, const char*, size_t) const;\n \n #ifdef _GLIBCPP_USE_WCHAR_T\n   template<>\n     int \n-    collate<wchar_t>::_M_compare_helper(const wchar_t*, const wchar_t*) const;\n+    collate<wchar_t>::_M_compare(const wchar_t*, const wchar_t*) const;\n \n   template<>\n     size_t\n-    collate<wchar_t>::_M_transform_helper(wchar_t*, const wchar_t*,\n-\t\t\t\t\t  size_t) const;\n+    collate<wchar_t>::_M_transform(wchar_t*, const wchar_t*, size_t) const;\n #endif\n \n   template<typename _CharT>\n@@ -891,7 +904,8 @@ namespace std\n       collate_byname(const char* __s, size_t __refs = 0)\n       : collate<_CharT>(__refs) \n       { \n-\t_S_destroy_c_locale(_M_c_locale_collate);\n+\tif (_M_c_locale_collate != _S_c_locale)\n+\t  _S_destroy_c_locale(_M_c_locale_collate);\n \t_S_create_c_locale(_M_c_locale_collate, __s); \n       }\n \n@@ -991,8 +1005,8 @@ namespace std\n       { _M_initialize_timepunct(__cloc); }\n \n       void\n-      _M_put_helper(_CharT* __s, size_t __maxlen, const _CharT* __format, \n-\t\t    const tm* __tm) const;\n+      _M_put(_CharT* __s, size_t __maxlen, const _CharT* __format, \n+\t     const tm* __tm) const;\n \n       void\n       _M_date_formats(const _CharT** __date) const\n@@ -1085,21 +1099,20 @@ namespace std\n \n     protected:\n       virtual \n-      ~__timepunct()\n-      {\n-\tif (_M_c_locale_timepunct)\n-\t  _S_destroy_c_locale(_M_c_locale_timepunct); \n-      }\n+      ~__timepunct();\n \n       // For use at construction time only.\n       void \n-      _M_initialize_timepunct(__c_locale __cloc = NULL);\n+      _M_initialize_timepunct(__c_locale __cloc = _S_c_locale);\n     };\n \n   template<typename _CharT>\n     locale::id __timepunct<_CharT>::id;\n \n   // Specializations.\n+  template<>\n+    __timepunct<char>::~__timepunct();\n+\n   template<> \n     const char*\n     __timepunct<char>::_S_timezones[14];\n@@ -1110,10 +1123,12 @@ namespace std\n \n   template<>\n     void\n-    __timepunct<char>::_M_put_helper(char*, size_t, const char*, \n-\t\t\t\t     const tm*) const;\n+    __timepunct<char>::_M_put(char*, size_t, const char*, const tm*) const;\n \n #ifdef _GLIBCPP_USE_WCHAR_T\n+  template<>\n+    __timepunct<wchar_t>::~__timepunct();\n+\n   template<> \n     const wchar_t*\n     __timepunct<wchar_t>::_S_timezones[14];\n@@ -1124,8 +1139,8 @@ namespace std\n \n   template<>\n     void\n-    __timepunct<wchar_t>::_M_put_helper(wchar_t*, size_t, const wchar_t*, \n-\t\t\t\t\tconst tm*) const;\n+    __timepunct<wchar_t>::_M_put(wchar_t*, size_t, const wchar_t*, \n+\t\t\t\t const tm*) const;\n #endif\n \n   // Generic.\n@@ -1322,19 +1337,19 @@ namespace std\n       typedef _CharT \t\t\tchar_type;\n       typedef basic_string<_CharT> \tstring_type;\n \n-      static const bool intl = _Intl;\n-      static locale::id id;\n+      static const bool \t\tintl = _Intl;\n+      static locale::id \t\tid;\n \n     private:\n-      char_type \t_M_decimal_point;\n-      char_type \t_M_thousands_sep;\n-      string \t\t_M_grouping;\n-      string_type \t_M_curr_symbol;\n-      string_type \t_M_positive_sign;\n-      string_type \t_M_negative_sign;\n-      int \t\t_M_frac_digits;\n-      pattern \t\t_M_pos_format;\n-      pattern \t\t_M_neg_format;\n+      const char* \t\t\t_M_grouping;\n+      char_type \t\t\t_M_decimal_point;\n+      char_type \t\t\t_M_thousands_sep;\n+      const char_type* \t\t\t_M_curr_symbol;\n+      const char_type*\t\t\t_M_positive_sign;\n+      const char_type*\t\t\t_M_negative_sign;\n+      int \t\t\t\t_M_frac_digits;\n+      pattern \t\t\t\t_M_pos_format;\n+      pattern \t\t\t\t_M_neg_format;\n \n     public:\n       explicit \n@@ -1383,7 +1398,7 @@ namespace std\n \n     protected:\n       virtual \n-      ~moneypunct() { }\n+      ~moneypunct();\n \n       virtual char_type\n       do_decimal_point() const\n@@ -1423,7 +1438,7 @@ namespace std\n \n       // For use at construction time only.\n        void \n-       _M_initialize_moneypunct(__c_locale __cloc = NULL);\n+       _M_initialize_moneypunct(__c_locale __cloc = _S_c_locale);\n     };\n \n   template<typename _CharT, bool _Intl>\n@@ -1432,6 +1447,12 @@ namespace std\n   template<typename _CharT, bool _Intl>\n     const bool moneypunct<_CharT, _Intl>::intl;\n \n+  template<>\n+    moneypunct<char, true>::~moneypunct();\n+\n+  template<>\n+    moneypunct<char, false>::~moneypunct();\n+\n   template<> \n     void\n     moneypunct<char, true>::_M_initialize_moneypunct(__c_locale __cloc);\n@@ -1441,6 +1462,12 @@ namespace std\n     moneypunct<char, false>::_M_initialize_moneypunct(__c_locale __cloc);\n \n #ifdef _GLIBCPP_USE_WCHAR_T\n+  template<>\n+    moneypunct<wchar_t, true>::~moneypunct();\n+\n+  template<>\n+    moneypunct<wchar_t, false>::~moneypunct();\n+\n   template<> \n     void\n     moneypunct<wchar_t, true>::_M_initialize_moneypunct(__c_locale __cloc);\n@@ -1586,7 +1613,7 @@ namespace std\n       explicit \n       messages(size_t __refs = 0) \n       : locale::facet(__refs), _M_name_messages(\"C\")\n-      { _M_c_locale_messages = _S_clone_c_locale(_S_c_locale); }\n+      { _M_c_locale_messages = _S_c_locale; }\n \n       // Non-standard.\n       explicit \n@@ -1616,7 +1643,10 @@ namespace std\n     protected:\n       virtual \n       ~messages()\n-       { _S_destroy_c_locale(_M_c_locale_messages); }\n+       { \n+\t if (_M_c_locale_messages != _S_c_locale)\n+\t   _S_destroy_c_locale(_M_c_locale_messages); \n+       }\n \n       virtual catalog \n       do_open(const basic_string<char>&, const locale&) const;\n@@ -1699,7 +1729,8 @@ namespace std\n       : messages<_CharT>(__refs) \n       { \n \t_M_name_messages = __s;\n-\t_S_destroy_c_locale(_M_c_locale_messages);\n+\tif (_M_c_locale_messages != _S_c_locale)\n+\t  _S_destroy_c_locale(_M_c_locale_messages);\n \t_S_create_c_locale(_M_c_locale_messages, __s); \n       }\n "}, {"sha": "d362c33f87fbcf0cfd097259d86d55942ade82f9", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 54, "deletions": 51, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3a193e36cdf55fbff3bd0f244bc36bc09871ee1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3a193e36cdf55fbff3bd0f244bc36bc09871ee1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=d3a193e36cdf55fbff3bd0f244bc36bc09871ee1", "patch": "@@ -70,21 +70,20 @@ namespace std\n     const _Facet&\n     use_facet(const locale& __loc)\n     {\n-      size_t __i = _Facet::id._M_index;\n-      locale::_Impl::__vec_facet& __facet = __loc._M_impl->_M_facets;\n-      const locale::facet* __fp = __facet[__i]; \n-      if (__fp == 0 || __i >= __facet.size())\n+      size_t __i = _Facet::id._M_id();\n+      locale::facet** __facets = __loc._M_impl->_M_facets;\n+      if (!(__i < __loc._M_impl->_M_facets_size && __facets[__i]))\n         __throw_bad_cast();\n-      return static_cast<const _Facet&>(*__fp);\n+      return static_cast<const _Facet&>(*__facets[__i]);\n     }\n \n   template<typename _Facet>\n     bool\n     has_facet(const locale& __loc) throw()\n     {\n-      size_t __i = _Facet::id._M_index;\n-      locale::_Impl::__vec_facet& __facet = __loc._M_impl->_M_facets;\n-      return (__i < __facet.size() && __facet[__i] != 0);\n+      size_t __i = _Facet::id._M_id();\n+      locale::facet** __facets = __loc._M_impl->_M_facets;\n+      return (__i < __loc._M_impl->_M_facets_size && __facets[__i]);\n     }\n \n \n@@ -395,19 +394,21 @@ namespace std\n       // Parse bool values as alphanumeric\n       else\n         {\n+\t  typedef basic_string<_CharT> __string_type;\n           locale __loc = __io.getloc();\n \t  const numpunct<_CharT>& __np = use_facet<numpunct<_CharT> >(__loc); \n-          const char_type* __true = __np.truename().c_str();\n-          const char_type* __false = __np.falsename().c_str();\n-\n-          const size_t __truen =  __np.truename().size() - 1;\n-          const size_t __falsen =  __np.falsename().size() - 1;\n+\t  const __string_type __true = __np.truename();\n+\t  const __string_type __false = __np.falsename();\n+          const char_type* __trues = __true.c_str();\n+          const char_type* __falses = __false.c_str();\n+          const size_t __truen =  __true.size() - 1;\n+          const size_t __falsen =  __false.size() - 1;\n \n           for (size_t __n = 0; __beg != __end; ++__n)\n             {\n               char_type __c = *__beg++;\n-              bool __testf = __n <= __falsen ? __c == __false[__n] : false;\n-              bool __testt = __n <= __truen ? __c == __true[__n] : false;\n+              bool __testf = __n <= __falsen ? __c == __falses[__n] : false;\n+              bool __testt = __n <= __truen ? __c == __trues[__n] : false;\n               if (!(__testf || __testt))\n                 {\n                   __err |= ios_base::failbit;\n@@ -628,7 +629,8 @@ namespace std\n \n \tconst bool __fp = _S_format_float(__io, __fbuf, __mod, __prec);\n \tif (__fp)\n-\t  __len = __convert_from_v(__cs, __cs_size, __fbuf, __v, _S_c_locale, __prec);\n+\t  __len = __convert_from_v(__cs, __cs_size, __fbuf, __v, \n+\t\t\t\t   _S_c_locale, __prec);\n \telse\n \t  __len = __convert_from_v(__cs, __cs_size, __fbuf, __v, _S_c_locale);\n \n@@ -638,9 +640,11 @@ namespace std\n \t    __cs_size = __len + 1; \n \t    __cs = static_cast<char*>(__builtin_alloca(__cs_size));\n \t    if (__fp)\n-\t      __len = __convert_from_v(__cs, __cs_size, __fbuf, __v, _S_c_locale, __prec);\n+\t      __len = __convert_from_v(__cs, __cs_size, __fbuf, __v, \n+\t\t\t\t       _S_c_locale, __prec);\n \t    else\n-\t      __len = __convert_from_v(__cs, __cs_size, __fbuf, __v, _S_c_locale);\n+\t      __len = __convert_from_v(__cs, __cs_size, __fbuf, __v, \n+\t\t\t\t       _S_c_locale);\n \t  }\n #else\n \t// Consider the possibility of long ios_base::fixed outputs\n@@ -679,13 +683,15 @@ namespace std\n \t// First try a buffer perhaps big enough.\n \tint __cs_size = 64;\n \tchar* __cs = static_cast<char*>(__builtin_alloca(__cs_size));\n-\tint __len = __convert_from_v(__cs, __cs_size, __fbuf, __v, _S_c_locale);\n+\tint __len = __convert_from_v(__cs, __cs_size, __fbuf, __v, \n+\t\t\t\t     _S_c_locale);\n \t// If the buffer was not large enough, try again with the correct size.\n \tif (__len >= __cs_size)\n \t  {\n \t    __cs_size = __len + 1;\n \t    __cs = static_cast<char*>(__builtin_alloca(__cs_size));\n-\t    __len = __convert_from_v(__cs, __cs_size, __fbuf, __v, _S_c_locale);\n+\t    __len = __convert_from_v(__cs, __cs_size, __fbuf, __v, \n+\t\t\t\t     _S_c_locale);\n \t  }\n #else\n \t// Leave room for \"+/-,\" \"0x,\" and commas. This size is\n@@ -791,7 +797,8 @@ namespace std\n \t\t*(__ws2 + 1) = *(__ws + 1);\n \t      }\n \t  _CharT* __p;\n-\t  __p = __add_grouping(__ws2 + __off, __np.thousands_sep(), __grouping.c_str(),\n+\t  __p = __add_grouping(__ws2 + __off, __np.thousands_sep(), \n+\t\t\t       __grouping.c_str(),\n \t\t\t       __grouping.c_str() + __grouping.size(),\n \t\t\t       __ws + __off, __ws + __len);\n \t  __len = __p - __ws2;\n@@ -842,21 +849,15 @@ namespace std\n         }\n       else\n         {\n+\t  typedef basic_string<_CharT> __string_type;\n           locale __loc = __io.getloc();\n \t  const numpunct<_CharT>& __np = use_facet<numpunct<_CharT> >(__loc); \n-          const char_type* __ws;\n-          int __len;\n+\t  __string_type __name;\n           if (__v)\n-            {\n-              __ws = __np.truename().c_str();\n-              __len = __np.truename().size();\n-            }\n+\t    __name = __np.truename();\n           else\n-            {\n-              __ws = __np.falsename().c_str();\n-              __len = __np.falsename().size();\n-            }\n-\t  __s = _M_insert(__s, __io, __fill, __ws, __len); \n+\t    __name = __np.falsename();\n+\t  __s = _M_insert(__s, __io, __fill, __name.c_str(), __name.size()); \n \t}\n       return __s;\n     }\n@@ -999,15 +1000,16 @@ namespace std\n \t  switch (__which)\n \t\t{\n \t\tcase money_base::symbol:\n-\t\t  if (__io.flags() & ios_base::showbase\n-\t\t      || __i < 2\n-\t\t      || (__i == 2 && static_cast<part>(__p.field[3]) != money_base::none)\n-\t\t      || __sign.size() > 1)\n+\t\t  if (__io.flags() & ios_base::showbase \n+\t\t      || __i < 2 || __sign.size() > 1\n+\t\t      || ((static_cast<part>(__p.field[3]) != money_base::none)\n+\t\t\t  && __i == 2)) \n \t\t    {\n-\t\t      // According to 22.2.6.1.2.2, symbol is required if\n-\t\t      // (__io.flags() & ios_base::showbase), otherwise is optional\n-\t\t      // and consumed only if other characters are needed to complete\n-\t\t      // the format.\n+\t\t      // According to 22.2.6.1.2.2, symbol is required\n+\t\t      // if (__io.flags() & ios_base::showbase),\n+\t\t      // otherwise is optional and consumed only if\n+\t\t      // other characters are needed to complete the\n+\t\t      // format.\n \t\t      const string_type __symbol = __intl ? __mpt.curr_symbol()\n \t\t\t\t\t\t    \t : __mpf.curr_symbol();\n \t\t      size_type __len = __symbol.size();\n@@ -1018,7 +1020,8 @@ namespace std\n \t\t\t  __c = *(++__beg);\n \t\t\t  ++__j;\n \t\t\t}\n-\t\t      // When (__io.flags() & ios_base::showbase) symbol is required.\n+\t\t      // When (__io.flags() & ios_base::showbase)\n+\t\t      // symbol is required.\n \t\t      if (__j != __len && (__io.flags() & ios_base::showbase))\n \t\t\t__testvalid = false;\n \t\t    }\n@@ -1152,13 +1155,15 @@ namespace std\n       // First try a buffer perhaps big enough.\n       int __cs_size = 64;\n       char* __cs = static_cast<char*>(__builtin_alloca(__cs_size));\n-      int __len = __convert_from_v(__cs, __cs_size, \"%.01Lf\", __units, _S_c_locale);\n+      int __len = __convert_from_v(__cs, __cs_size, \"%.01Lf\", __units, \n+\t\t\t\t   _S_c_locale);\n       // If the buffer was not large enough, try again with the correct size.\n       if (__len >= __cs_size)\n \t{\n \t  __cs_size = __len + 1;\n \t  __cs = static_cast<char*>(__builtin_alloca(__cs_size));\n-\t  __len = __convert_from_v(__cs, __cs_size, \"%.01Lf\", __units, _S_c_locale);\n+\t  __len = __convert_from_v(__cs, __cs_size, \"%.01Lf\", __units, \n+\t\t\t\t   _S_c_locale);\n \t}\n #else\n       // max_exponent10 + 1 for the integer part, + 4 for sign, decimal point,\n@@ -1871,7 +1876,7 @@ namespace std\n \t  __fmt[3] = char_type();\n \t}\n \n-      __tp._M_put_helper(__res, __maxlen, __fmt, __tm);\n+      __tp._M_put(__res, __maxlen, __fmt, __tm);\n \n       // Write resulting, fully-formatted string to output iterator.\n       size_t __len = char_traits<char_type>::length(__res);\n@@ -1884,13 +1889,13 @@ namespace std\n   // Generic version does nothing.\n   template<typename _CharT>\n     int\n-    collate<_CharT>::_M_compare_helper(const _CharT*, const _CharT*) const\n+    collate<_CharT>::_M_compare(const _CharT*, const _CharT*) const\n     { return 0; }\n \n   // Generic version does nothing.\n   template<typename _CharT>\n     size_t\n-    collate<_CharT>::_M_transform_helper(_CharT*, const _CharT*, size_t) const\n+    collate<_CharT>::_M_transform(_CharT*, const _CharT*, size_t) const\n     { return 0; }\n \n   template<typename _CharT>\n@@ -1901,7 +1906,7 @@ namespace std\n     { \n       const string_type __one(__lo1, __hi1);\n       const string_type __two(__lo2, __hi2);\n-      return _M_compare_helper(__one.c_str(), __two.c_str());\n+      return _M_compare(__one.c_str(), __two.c_str());\n     }\n \n  template<typename _CharT>\n@@ -1913,13 +1918,13 @@ namespace std\n       // First try a buffer perhaps big enough.\n       _CharT* __c =\n \tstatic_cast<_CharT*>(__builtin_alloca(sizeof(_CharT) * __len));\n-      size_t __res = _M_transform_helper(__c, __lo, __len);\n+      size_t __res = _M_transform(__c, __lo, __len);\n       // If the buffer was not large enough, try again with the correct size.\n       if (__res >= __len)\n \t{\n \t  __c =\n \t    static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT) * (__res + 1)));\n-\t  _M_transform_helper(__c, __lo, __res + 1);\n+\t  _M_transform(__c, __lo, __res + 1);\n \t}\n       return string_type(__c);\n     }\n@@ -2138,8 +2143,6 @@ namespace std\n   // Inhibit implicit instantiations for required instantiations,\n   // which are defined via explicit instantiations elsewhere.  \n   // NB: This syntax is a GNU extension.\n-  extern template class vector<locale::facet*>;\n-\n   extern template class moneypunct<char, false>;\n   extern template class moneypunct<char, true>;\n   extern template class moneypunct_byname<char, false>;"}, {"sha": "c6daeb690146ef2f1c1354c422cf636362df8f18", "filename": "libstdc++-v3/include/bits/localefwd.h", "status": "modified", "additions": 31, "deletions": 25, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3a193e36cdf55fbff3bd0f244bc36bc09871ee1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3a193e36cdf55fbff3bd0f244bc36bc09871ee1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h?ref=d3a193e36cdf55fbff3bd0f244bc36bc09871ee1", "patch": "@@ -47,20 +47,11 @@\n #include <climits>\t\t// For CHAR_BIT\n #include <cctype>\t\t// For isspace, etc.\n #include <string> \t\t// For string.\n-#include <vector>\t\t// For vector.\n #include <bits/functexcept.h>\n-\n #include <bits/atomicity.h>\n \n namespace std\n {\n-  // NB: Don't instantiate required wchar_t facets if no wchar_t support.\n-#ifdef _GLIBCPP_USE_WCHAR_T\n-# define  _GLIBCPP_NUM_FACETS 28\n-#else\n-# define  _GLIBCPP_NUM_FACETS 14\n-#endif\n-\n   // 22.1.1 Locale\n   class locale;\n \n@@ -225,7 +216,7 @@ namespace std\n     locale(const locale& __other) throw();\n \n     explicit  \n-    locale(const char* __std_name);\n+    locale(const char* __s);\n \n     locale(const locale& __base, const char* __s, category __cat);\n \n@@ -277,7 +268,6 @@ namespace std\n     static _Impl* \t_S_global;  \n \n     static const size_t\t_S_num_categories = 6;\n-    static const size_t _S_num_facets = _GLIBCPP_NUM_FACETS;\n \n     explicit \n     locale(_Impl*) throw();\n@@ -301,9 +291,6 @@ namespace std\n   class locale::_Impl\n   {\n   public:\n-    // Types.\n-    typedef vector<facet*, allocator<facet*> > \t__vec_facet;\n-\n     // Friends.\n     friend class locale;\n     friend class locale::facet;\n@@ -319,8 +306,9 @@ namespace std\n   private:\n     // Data Members.\n     _Atomic_word\t\t\t_M_references;\n-    __vec_facet \t\t\t_M_facets;\n-    string \t\t\t\t_M_names[_S_num_categories];\n+    facet** \t\t\t\t_M_facets;\n+    size_t \t\t\t\t_M_facets_size;\n+    const char* \t\t\t_M_names[_S_num_categories];\n     static const locale::id* const \t_S_id_ctype[];\n     static const locale::id* const \t_S_id_numeric[];\n     static const locale::id* const \t_S_id_collate[];\n@@ -346,15 +334,22 @@ namespace std\n     }\n \n     _Impl(const _Impl&, size_t);\n-    _Impl(string __name, size_t);\n+    _Impl(const char*, size_t);\n+    _Impl(facet**, size_t, bool);\n+\n    ~_Impl() throw();\n \n+    _Impl(const _Impl&);  // Not defined.\n+\n+    void \n+    operator=(const _Impl&);  // Not defined.\n+\n     inline bool\n     _M_check_same_name()\n     {\n       bool __ret = true;\n-      for (size_t i = 0; i < _S_num_categories - 1; ++i)\n-\t__ret &= _M_names[i] == _M_names[i + 1];\n+      for (size_t i = 0; __ret && i < _S_num_categories - 1; ++i)\n+\t__ret &= (strcmp(_M_names[i], _M_names[i + 1]) == 0);\n       return __ret;\n     }\n \n@@ -388,11 +383,10 @@ namespace std\n   // 22.1.1.1.2  Class locale::facet\n   class locale::facet\n   {\n+  private:\n     friend class locale;\n     friend class locale::_Impl;\n-    friend class __enc_traits;\n \n-  private:\n     _Atomic_word _M_references;\n \n   protected:\n@@ -407,7 +401,8 @@ namespace std\n     ~facet();\n \n     static void\n-    _S_create_c_locale(__c_locale& __cloc, const char* __s);\n+    _S_create_c_locale(__c_locale& __cloc, const char* __s, \n+\t\t       __c_locale __old = 0);\n \n     static __c_locale\n     _S_clone_c_locale(__c_locale& __cloc);\n@@ -447,18 +442,29 @@ namespace std\n     // function (even an inline) would be undefined.\n     mutable size_t \t\t_M_index;\n \n-    // Last id number assigned\n+    // Last id number assigned.\n     static _Atomic_word \t_S_highwater;   \n \n     void \n-    operator=(const id&);  // not defined\n+    operator=(const id&);  // Not defined.\n \n-    id(const id&);  // not defined\n+    id(const id&);  // Not defined.\n \n   public:\n     // NB: This class is always a static data member, and thus can be\n     // counted on to be zero-initialized.\n     id();\n+\n+    size_t\n+    _M_id() const\n+    {\n+      if (!_M_index)\n+\t{\n+\t  __exchange_and_add(&_S_highwater, 1);\n+\t  _M_index = _S_highwater;\n+\t}\n+      return _M_index - 1;\n+    }\n   };\n \n   template<typename _Facet>"}, {"sha": "b30ea09a1f81e2d265c459e1c5be7f0a14130c0d", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3a193e36cdf55fbff3bd0f244bc36bc09871ee1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3a193e36cdf55fbff3bd0f244bc36bc09871ee1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=d3a193e36cdf55fbff3bd0f244bc36bc09871ee1", "patch": "@@ -422,32 +422,34 @@ class vector : protected _Vector_base<_Tp, _Alloc>\n \n   template<class _InputIterator>\n     void\n-\tassign(_InputIterator __first, _InputIterator __last)\n-\t{\n+    assign(_InputIterator __first, _InputIterator __last)\n+    {\n       typedef typename _Is_integer<_InputIterator>::_Integral _Integral;\n       _M_assign_dispatch(__first, __last, _Integral());\n     }\n \n   template<class _Integer>\n     void\n-\t_M_assign_dispatch(_Integer __n, _Integer __val, __true_type)\n-    { _M_fill_assign((size_type) __n, (_Tp) __val); }\n+     _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)\n+     { _M_fill_assign((size_type) __n, (_Tp) __val); }\n \n   template<class _InputIter>\n     void\n-\t_M_assign_dispatch(_InputIter __first, _InputIter __last, __false_type)\n+    _M_assign_dispatch(_InputIter __first, _InputIter __last, __false_type)\n     {\n-\t  typedef typename iterator_traits<_InputIter>::iterator_category _IterCategory;\n-\t  _M_assign_aux(__first, __last, _IterCategory());\n-\t}\n+      typedef typename iterator_traits<_InputIter>::iterator_category _IterCategory;\n+      _M_assign_aux(__first, __last, _IterCategory());\n+    }\n \n   template <class _InputIterator>\n-  void _M_assign_aux(_InputIterator __first, _InputIterator __last,\n-                     input_iterator_tag);\n+    void \n+    _M_assign_aux(_InputIterator __first, _InputIterator __last,\n+\t\t  input_iterator_tag);\n \n   template <class _ForwardIterator>\n-  void _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,\n-                     forward_iterator_tag);\n+    void \n+    _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,\n+\t\t  forward_iterator_tag);\n \n   /**\n    *  Returns a read/write reference to the data at the first element of the"}, {"sha": "607800e19e01c54f5532c799ea91c497b067ed03", "filename": "libstdc++-v3/include/bits/streambuf.tcc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3a193e36cdf55fbff3bd0f244bc36bc09871ee1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3a193e36cdf55fbff3bd0f244bc36bc09871ee1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf.tcc?ref=d3a193e36cdf55fbff3bd0f244bc36bc09871ee1", "patch": "@@ -39,6 +39,10 @@\n \n namespace std \n {\n+  template<typename _CharT, typename _Traits>\n+    const typename basic_streambuf<_CharT, _Traits>::int_type\n+    basic_streambuf<_CharT, _Traits>::_S_pback_size;\n+\n   template<typename _CharT, typename _Traits>\n     typename basic_streambuf<_CharT, _Traits>::int_type\n     basic_streambuf<_CharT, _Traits>::"}, {"sha": "4db259438aad88d4c02431fecec6c4a848326a47", "filename": "libstdc++-v3/include/std/std_fstream.h", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3a193e36cdf55fbff3bd0f244bc36bc09871ee1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3a193e36cdf55fbff3bd0f244bc36bc09871ee1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h?ref=d3a193e36cdf55fbff3bd0f244bc36bc09871ee1", "patch": "@@ -74,18 +74,21 @@ namespace std\n \n     protected:\n       // Data Members:\n+      // MT lock inherited from libio or other low-level io library.\n+      __c_lock          \t_M_lock;\n+\n       // External buffer.\n-      __file_type* \t\t_M_file;\n+      __file_type \t\t_M_file;\n \n       // Current and beginning state type for codecvt.\n       __state_type\t\t_M_state_cur;\n       __state_type \t\t_M_state_beg;\n \n-      // MT lock inherited from libio or other low-level io library.\n-      __c_lock          \t_M_lock;\n-\n       // Set iff _M_buf is allocated memory from _M_allocate_internal_buffer..\n       bool\t\t\t_M_buf_allocated;\n+      \n+      // Stack-based buffer for unbuffered input.\n+      char_type\t\t\t_M_unbuf[4];\n \n       // XXX Needed?\n       bool\t\t\t_M_last_overflowed;\n@@ -95,7 +98,7 @@ namespace std\n       basic_filebuf();\n \n       // Non-standard ctor:\n-      basic_filebuf(__c_file_type* __f, ios_base::openmode __mode,\n+      basic_filebuf(__c_file* __f, ios_base::openmode __mode,\n \t\t    int_type __s = static_cast<int_type>(BUFSIZ));\n \n       // Non-standard member:\n@@ -111,7 +114,7 @@ namespace std\n \n       // Members:\n       bool\n-      is_open() const { return _M_file ? _M_file->is_open() : false; }\n+      is_open() const { return _M_file.is_open(); }\n \n       __filebuf_type*\n       open(const char* __s, ios_base::openmode __mode);\n@@ -126,13 +129,6 @@ namespace std\n       void\n       _M_destroy_internal_buffer();\n \n-      void\n-      _M_allocate_pback_buffer();\n-\n-      // Create __file_type object and initialize it properly.\n-      void\n-      _M_allocate_file();\n-\n       // Overridden virtual functions:\n       virtual streamsize\n       showmanyc();\n@@ -191,16 +187,16 @@ namespace std\n \n \t// Make sure that the internal buffer resyncs its idea of\n \t// the file position with the external file.\n-\tif (__testput && !_M_file->sync())\n+\tif (__testput && !_M_file.sync())\n \t  {\n \t    // Need to restore current position. This interpreted as\n \t    // the position of the external byte sequence (_M_file)\n \t    // plus the offset in the current internal buffer\n \t    // (_M_out_beg - _M_out_cur)\n-\t    streamoff __cur = _M_file->seekoff(0, ios_base::cur);\n+\t    streamoff __cur = _M_file.seekoff(0, ios_base::cur);\n \t    off_type __off = _M_out_cur - _M_out_beg;\n \t    _M_really_overflow();\n-\t    _M_file->seekpos(__cur + __off);\n+\t    _M_file.seekpos(__cur + __off);\n \t  }\n \t_M_last_overflowed = false;\n \treturn 0;"}, {"sha": "53e1e08b23193ac09335a51fe5fc00a3d09dd7ab", "filename": "libstdc++-v3/include/std/std_streambuf.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3a193e36cdf55fbff3bd0f244bc36bc09871ee1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3a193e36cdf55fbff3bd0f244bc36bc09871ee1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h?ref=d3a193e36cdf55fbff3bd0f244bc36bc09871ee1", "patch": "@@ -126,8 +126,8 @@ namespace std\n       // requirements. The only basic_streambuf member function that\n       // needs access to these data members is in_avail...\n       // NB: pbacks of over one character are not currently supported.\n-      int_type    \t\t_M_pback_size; \n-      char_type*\t\t_M_pback; \n+      static const int_type    \t_S_pback_size = 1; \n+      char_type\t\t\t_M_pback[_S_pback_size]; \n       char_type*\t\t_M_pback_cur_save;\n       char_type*\t\t_M_pback_end_save;\n       bool\t\t\t_M_pback_init; \n@@ -141,7 +141,7 @@ namespace std\n \tif (!_M_pback_init)\n \t  {\n \t    int_type __dist = _M_in_end - _M_in_cur;\n-\t    int_type __len = min(_M_pback_size, __dist);\n+\t    int_type __len = min(_S_pback_size, __dist);\n \t    traits_type::copy(_M_pback, _M_in_cur, __len);\n \t    _M_pback_cur_save = _M_in_cur;\n \t    _M_pback_end_save = _M_in_end;\n@@ -388,8 +388,8 @@ namespace std\n       _M_buf_size_opt(static_cast<int_type>(BUFSIZ)), _M_buf_unified(false), \n       _M_in_beg(0), _M_in_cur(0), _M_in_end(0), _M_out_beg(0), _M_out_cur(0), \n       _M_out_end(0), _M_mode(ios_base::openmode(0)), _M_buf_locale(locale()), \n-      _M_buf_locale_init(false), _M_pback_size(1), _M_pback(NULL), \n-      _M_pback_cur_save(NULL), _M_pback_end_save(NULL), _M_pback_init(false)\n+      _M_buf_locale_init(false), _M_pback_cur_save(0), _M_pback_end_save(0), \n+      _M_pback_init(false)\n       { }\n \n       // Get area:"}, {"sha": "afa603a786d70b288156960e0458e97565523f07", "filename": "libstdc++-v3/libsupc++/new", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3a193e36cdf55fbff3bd0f244bc36bc09871ee1/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3a193e36cdf55fbff3bd0f244bc36bc09871ee1/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew?ref=d3a193e36cdf55fbff3bd0f244bc36bc09871ee1", "patch": "@@ -76,18 +76,18 @@ namespace std\n  *  Placement new and delete signatures (take a memory address argument,\n  *  does nothing) may not be replaced by a user's program.\n */\n-void *operator new(std::size_t) throw (std::bad_alloc);\n-void *operator new[](std::size_t) throw (std::bad_alloc);\n-void operator delete(void *) throw();\n-void operator delete[](void *) throw();\n-void *operator new(std::size_t, const std::nothrow_t&) throw();\n-void *operator new[](std::size_t, const std::nothrow_t&) throw();\n-void operator delete(void *, const std::nothrow_t&) throw();\n-void operator delete[](void *, const std::nothrow_t&) throw();\n+void* operator new(std::size_t) throw (std::bad_alloc);\n+void* operator new[](std::size_t) throw (std::bad_alloc);\n+void operator delete(void*) throw();\n+void operator delete[](void*) throw();\n+void* operator new(std::size_t, const std::nothrow_t&) throw();\n+void* operator new[](std::size_t, const std::nothrow_t&) throw();\n+void operator delete(void*, const std::nothrow_t&) throw();\n+void operator delete[](void*, const std::nothrow_t&) throw();\n \n // Default placement versions of operator new.\n-inline void *operator new(std::size_t, void *place) throw() { return place; }\n-inline void *operator new[](std::size_t, void *place) throw() { return place; }\n+inline void* operator new(std::size_t, void* __p) throw() { return __p; }\n+inline void* operator new[](std::size_t, void* __p) throw() { return __p; }\n //@}\n } // extern \"C++\"\n "}, {"sha": "480dc4a21a1810a1ea1f94a8c821986050e4b8a9", "filename": "libstdc++-v3/libsupc++/typeinfo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3a193e36cdf55fbff3bd0f244bc36bc09871ee1/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftypeinfo", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3a193e36cdf55fbff3bd0f244bc36bc09871ee1/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftypeinfo", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftypeinfo?ref=d3a193e36cdf55fbff3bd0f244bc36bc09871ee1", "patch": "@@ -85,7 +85,7 @@ namespace std\n     { return __name; }\n \n #if !__GXX_MERGED_TYPEINFO_NAMES\n-    bool before(const type_info& arg) const;\n+    bool before(const type_info& __arg) const;\n     // In old abi, or when weak symbols are not supported, there can\n     // be multiple instances of a type_info object for one\n     // type. Uniqueness must use the _name value, not object address."}, {"sha": "cf9087f9e08e3fd048c5ee7addd0f2fece52b8ed", "filename": "libstdc++-v3/src/globals.cc", "status": "modified", "additions": 117, "deletions": 5, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3a193e36cdf55fbff3bd0f244bc36bc09871ee1/libstdc%2B%2B-v3%2Fsrc%2Fglobals.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3a193e36cdf55fbff3bd0f244bc36bc09871ee1/libstdc%2B%2B-v3%2Fsrc%2Fglobals.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fglobals.cc?ref=d3a193e36cdf55fbff3bd0f244bc36bc09871ee1", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -30,6 +30,7 @@\n #include <fstream>\n #include <istream>\n #include <ostream>\n+#include <locale>\n \n // On AIX, and perhaps other systems, library initialization order is\n // not guaranteed.  For example, the static initializers for the main\n@@ -45,14 +46,125 @@\n namespace std \n {\n   // Standard \"C\" locale.\n+  typedef char fake_locale[sizeof(locale)]\n+  __attribute__ ((aligned(__alignof__(locale))));\n+  fake_locale c_locale;\n+\n   typedef char fake_locale_Impl[sizeof(locale::_Impl)]\n   __attribute__ ((aligned(__alignof__(locale::_Impl))));\n-  fake_locale_Impl locale_impl_c;\n+  fake_locale_Impl c_locale_impl;\n+  \n+  typedef char fake_facet_vec[sizeof(locale::facet*)]\n+  __attribute__ ((aligned(__alignof__(locale::facet*))));\n+  fake_facet_vec facet_vec[_GLIBCPP_NUM_FACETS];\n \n-  typedef char fake_locale[sizeof(locale)]\n-  __attribute__ ((aligned(__alignof__(locale))));\n-  fake_locale locale_c;\n+  typedef char fake_ctype_c[sizeof(std::ctype<char>)]\n+  __attribute__ ((aligned(__alignof__(std::ctype<char>))));\n+  fake_ctype_c ctype_c;\n+\n+  typedef char fake_collate_c[sizeof(std::collate<char>)]\n+  __attribute__ ((aligned(__alignof__(std::collate<char>))));\n+  fake_collate_c collate_c;\n+\n+  typedef char fake_numpunct_c[sizeof(numpunct<char>)]\n+  __attribute__ ((aligned(__alignof__(numpunct<char>))));\n+  fake_numpunct_c numpunct_c;\n+\n+  typedef char fake_num_get_c[sizeof(num_get<char>)]\n+  __attribute__ ((aligned(__alignof__(num_get<char>))));\n+  fake_num_get_c num_get_c;\n+\n+  typedef char fake_num_put_c[sizeof(num_put<char>)]\n+  __attribute__ ((aligned(__alignof__(num_put<char>))));\n+  fake_num_put_c num_put_c;\n+\n+  typedef char fake_codecvt_c[sizeof(codecvt<char, char, mbstate_t>)]\n+  __attribute__ ((aligned(__alignof__(codecvt<char, char, mbstate_t>))));\n+  fake_codecvt_c codecvt_c;\n+\n+  typedef char fake_moneypunct_c[sizeof(moneypunct<char, true>)]\n+  __attribute__ ((aligned(__alignof__(moneypunct<char, true>))));\n+  fake_moneypunct_c moneypunct_tc;\n+  fake_moneypunct_c moneypunct_fc;\n+\n+  typedef char fake_money_get_c[sizeof(money_get<char>)]\n+  __attribute__ ((aligned(__alignof__(money_get<char>))));\n+  fake_money_get_c money_get_c;\n   \n+  typedef char fake_money_put_c[sizeof(money_put<char>)]\n+  __attribute__ ((aligned(__alignof__(money_put<char>))));\n+  fake_money_put_c money_put_c;\n+\n+  typedef char fake_timepunct_c[sizeof(__timepunct<char>)]\n+  __attribute__ ((aligned(__alignof__(__timepunct<char>))));\n+  fake_timepunct_c timepunct_c;\n+\n+  typedef char fake_time_get_c[sizeof(time_get<char>)]\n+  __attribute__ ((aligned(__alignof__(time_get<char>))));\n+  fake_time_get_c time_get_c;\n+\n+  typedef char fake_time_put_c[sizeof(time_put<char>)]\n+  __attribute__ ((aligned(__alignof__(time_put<char>))));\n+  fake_time_put_c time_put_c;\n+\n+  typedef char fake_messages_c[sizeof(messages<char>)]\n+  __attribute__ ((aligned(__alignof__(messages<char>))));\n+  fake_messages_c messages_c;\n+\n+#ifdef  _GLIBCPP_USE_WCHAR_T\n+  typedef char fake_wtype_w[sizeof(std::ctype<wchar_t>)]\n+  __attribute__ ((aligned(__alignof__(std::ctype<wchar_t>))));\n+  fake_wtype_w ctype_w;\n+\n+  typedef char fake_wollate_w[sizeof(std::collate<wchar_t>)]\n+  __attribute__ ((aligned(__alignof__(std::collate<wchar_t>))));\n+  fake_wollate_w collate_w;\n+\n+  typedef char fake_numpunct_w[sizeof(numpunct<wchar_t>)]\n+  __attribute__ ((aligned(__alignof__(numpunct<wchar_t>))));\n+  fake_numpunct_w numpunct_w;\n+\n+  typedef char fake_num_get_w[sizeof(num_get<wchar_t>)]\n+  __attribute__ ((aligned(__alignof__(num_get<wchar_t>))));\n+  fake_num_get_w num_get_w;\n+\n+  typedef char fake_num_put_w[sizeof(num_put<wchar_t>)]\n+  __attribute__ ((aligned(__alignof__(num_put<wchar_t>))));\n+  fake_num_put_w num_put_w;\n+\n+  typedef char fake_wodecvt_w[sizeof(codecvt<wchar_t, char, mbstate_t>)]\n+  __attribute__ ((aligned(__alignof__(codecvt<wchar_t, char, mbstate_t>))));\n+  fake_wodecvt_w codecvt_w;\n+\n+  typedef char fake_moneypunct_w[sizeof(moneypunct<wchar_t, true>)]\n+  __attribute__ ((aligned(__alignof__(moneypunct<wchar_t, true>))));\n+  fake_moneypunct_w moneypunct_tw;\n+  fake_moneypunct_w moneypunct_fw;\n+\n+  typedef char fake_money_get_w[sizeof(money_get<wchar_t>)]\n+  __attribute__ ((aligned(__alignof__(money_get<wchar_t>))));\n+  fake_money_get_w money_get_w;\n+  \n+  typedef char fake_money_put_w[sizeof(money_put<wchar_t>)]\n+  __attribute__ ((aligned(__alignof__(money_put<wchar_t>))));\n+  fake_money_put_w money_put_w;\n+\n+  typedef char fake_timepunct_w[sizeof(__timepunct<wchar_t>)]\n+  __attribute__ ((aligned(__alignof__(__timepunct<wchar_t>))));\n+  fake_timepunct_w timepunct_w;\n+\n+  typedef char fake_time_get_w[sizeof(time_get<wchar_t>)]\n+  __attribute__ ((aligned(__alignof__(time_get<wchar_t>))));\n+  fake_time_get_w time_get_w;\n+\n+  typedef char fake_time_put_w[sizeof(time_put<wchar_t>)]\n+  __attribute__ ((aligned(__alignof__(time_put<wchar_t>))));\n+  fake_time_put_w time_put_w;\n+\n+  typedef char fake_messages_w[sizeof(messages<wchar_t>)]\n+  __attribute__ ((aligned(__alignof__(messages<wchar_t>))));\n+  fake_messages_w messages_w;\n+#endif\n \n   // Standard stream objects.\n   typedef char fake_istream[sizeof(istream)]"}, {"sha": "7ac147f9fa000912e844e7bb4d95c4e0d3df7467", "filename": "libstdc++-v3/src/locale-inst.cc", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3a193e36cdf55fbff3bd0f244bc36bc09871ee1/libstdc%2B%2B-v3%2Fsrc%2Flocale-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3a193e36cdf55fbff3bd0f244bc36bc09871ee1/libstdc%2B%2B-v3%2Fsrc%2Flocale-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale-inst.cc?ref=d3a193e36cdf55fbff3bd0f244bc36bc09871ee1", "patch": "@@ -410,13 +410,6 @@ namespace std\n     has_facet<messages<wchar_t> >(const locale&);\n #endif\n \n-  // iterator\n-  typedef vector<locale::facet*> vec_pfacet;\n-  template class vector<locale::facet*>;\n-  template class __normal_iterator<locale::facet**, vector<locale::facet*> >;\n-  template class __normal_iterator<locale::facet* const*,\n-                                   vector<locale::facet*> >;\n-\n   // locale\n   template\n     char*\n@@ -484,20 +477,4 @@ namespace std\n     int\n     __convert_from_v(char*, const int, const char*, unsigned long long, \n \t\t     const __c_locale&, int);\n-\n-  template \n-    locale::facet** \n-    fill_n<locale::facet**, size_t, locale::facet*>\n-    (locale::facet**, size_t, locale::facet* const&);\n-\n-  template\n-    __normal_iterator<locale::facet**, vector<locale::facet*> >\n-    fill_n(__normal_iterator<locale::facet**, vector<locale::facet*> >,\n-\t   size_t, locale::facet* const&);\n-\n-  template\n-    void\n-    fill(__normal_iterator<locale::facet**, vector<locale::facet*> >,\n-         __normal_iterator<locale::facet**, vector<locale::facet*> >,\n-         locale::facet* const&);\n } // namespace std"}, {"sha": "54693cb2059d1403dff7b3ea257d1f47959260b1", "filename": "libstdc++-v3/src/locale.cc", "status": "modified", "additions": 34, "deletions": 25, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3a193e36cdf55fbff3bd0f244bc36bc09871ee1/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3a193e36cdf55fbff3bd0f244bc36bc09871ee1/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc?ref=d3a193e36cdf55fbff3bd0f244bc36bc09871ee1", "patch": "@@ -30,23 +30,20 @@\n #include <cstring>\n #include <cassert>\n #include <cctype>\n+#include <cwctype>     // For towupper, etc.\n #include <limits>\n #include <exception>\n #include <locale>\n #include <istream>\n #include <ostream>\n-#include <vector>\n-#ifdef _GLIBCPP_USE_WCHAR_T  \n-# include <cwctype>     // for towupper, etc.\n-#endif\n-\n #include <bits/atomicity.h>\n \n namespace std \n {\n   // Defined in globals.cc.\n-  extern locale::_Impl locale_impl_c;\n-  extern locale locale_c;\n+  extern locale \t\tc_locale;\n+  extern locale::_Impl \t\tc_locale_impl;\n+  extern locale::facet**\tfacet_vec;\n \n   // Definitions for static const data members of locale.\n   const locale::category \tlocale::none;\n@@ -61,7 +58,6 @@ namespace std\n   locale::_Impl* \t\tlocale::_S_classic;\n   locale::_Impl* \t\tlocale::_S_global; \n   const size_t \t\t\tlocale::_S_num_categories;\n-  const size_t \t\t\tlocale::_S_num_facets;\n \n   // Definitions for locale::id of standard facets that are specialized.\n   locale::id ctype<char>::id;\n@@ -159,8 +155,8 @@ namespace std\n     locale::_Impl::_S_id_ctype,\n     locale::_Impl::_S_id_numeric,\n     locale::_Impl::_S_id_collate,\n-    locale::_Impl::_S_id_time,\n     locale::_Impl::_S_id_monetary,\n+    locale::_Impl::_S_id_time,\n     locale::_Impl::_S_id_messages,\n     0\n   };\n@@ -230,8 +226,7 @@ namespace std\n   locale::operator==(const locale& __rhs) const throw()\n   {\n     string __name = this->name();\n-    return (_M_impl == __rhs._M_impl \n-\t    || (__name != \"*\" && __name == __rhs.name()));\n+    return (_M_impl == __rhs._M_impl || (__name != \"*\" && __name == __rhs.name()));\n   }\n \n   const locale&\n@@ -251,7 +246,8 @@ namespace std\n     _Impl* __old = _S_global;\n     __other._M_impl->_M_add_reference();\n     _S_global = __other._M_impl; \n-    if (_S_global->_M_check_same_name() && _S_global->_M_names[0] != \"*\")\n+    if (_S_global->_M_check_same_name() \n+\t&& (strcmp(_S_global->_M_names[0], \"*\") != 0))\n       setlocale(LC_ALL, __other.name().c_str());\n \n     // Reference count sanity check: one reference removed for the\n@@ -265,23 +261,26 @@ namespace std\n   string\n   locale::name() const\n   {\n-    string __ret;\n     // Need some kind of separator character. This one was pretty much\n     // arbitrarily chosen as to not conflict with glibc locales: the\n     // exact formatting is not set in stone.\n     const char __separator = '|';\n \n+    string __ret;\n     if (_M_impl->_M_check_same_name())\n       __ret = _M_impl->_M_names[0];\n     else\n       {\n \tfor (size_t i = 0; i < _S_num_categories; ++i)\n-\t  __ret += __separator + _M_impl->_M_names[i];\n+\t  {\n+\t    __ret += __separator;\n+\t    __ret += _M_impl->_M_names[i];\n+\t  }\n       }\n     return __ret;\n   }\n \n-  locale const&\n+  const locale&\n   locale::classic()\n   {\n     static _STL_mutex_lock __lock __STL_MUTEX_INITIALIZER;\n@@ -293,9 +292,13 @@ namespace std\n \t  {\n \t    // 26 Standard facets, 2 references.\n \t    // One reference for _M_classic, one for _M_global\n-\t    _S_classic = new (&locale_impl_c) _Impl(\"C\", 2);\n+\t    facet** f = new(&facet_vec) facet*[_GLIBCPP_NUM_FACETS];\n+\t    for (size_t __i = 0; __i < _GLIBCPP_NUM_FACETS; ++__i)\n+\t      f[__i] = 0;\n+\n+\t    _S_classic = new (&c_locale_impl) _Impl(f, 2, true);\n \t    _S_global = _S_classic; \t    \n-\t    new (&locale_c) locale(_S_classic);\n+\t    new (&c_locale) locale(_S_classic);\n \t  }\n \tcatch(...) \n \t  {\n@@ -307,7 +310,7 @@ namespace std\n \t    __throw_exception_again;\n \t  }\n       }\n-    return locale_c;\n+    return c_locale;\n   }\n \n   locale::category\n@@ -382,7 +385,8 @@ namespace std\n       }\n   }\n   \n-  locale::id::id() { }\n+  locale::id::id() \n+  { }\n \n   // Definitions for static const data members of ctype_base.\n   const ctype_base::mask ctype_base::space;\n@@ -404,7 +408,7 @@ namespace std\n \n   ctype<char>::~ctype()\n   { \n-    if (_M_c_locale_ctype)\n+    if (_M_c_locale_ctype != _S_c_locale)\n       _S_destroy_c_locale(_M_c_locale_ctype);\n     if (_M_del) \n       delete[] this->table(); \n@@ -453,20 +457,24 @@ namespace std\n #ifdef _GLIBCPP_USE_WCHAR_T\n   ctype<wchar_t>::ctype(size_t __refs) \n   : __ctype_abstract_base<wchar_t>(__refs)\n-  { _M_c_locale_ctype = _S_clone_c_locale(_S_c_locale); }\n+  { _M_c_locale_ctype = _S_c_locale; }\n \n   ctype<wchar_t>::ctype(__c_locale __cloc, size_t __refs) \n   : __ctype_abstract_base<wchar_t>(__refs) \n   { _M_c_locale_ctype = _S_clone_c_locale(__cloc); }\n \n   ctype<wchar_t>::~ctype() \n-  { _S_destroy_c_locale(_M_c_locale_ctype); }\n+  { \n+    if (_M_c_locale_ctype != _S_c_locale)\n+      _S_destroy_c_locale(_M_c_locale_ctype); \n+  }\n \n   template<>\n     ctype_byname<wchar_t>::ctype_byname(const char* __s, size_t __refs)\n     : ctype<wchar_t>(__refs) \n     { \t\n-      _S_destroy_c_locale(_M_c_locale_ctype);\n+      if (_M_c_locale_ctype != _S_c_locale)\n+\t_S_destroy_c_locale(_M_c_locale_ctype);\n       _S_create_c_locale(_M_c_locale_ctype, __s); \n     }\n #endif\n@@ -498,7 +506,7 @@ namespace std\n     const ctype<char>&\n     use_facet<ctype<char> >(const locale& __loc)\n     {\n-      size_t __i = ctype<char>::id._M_index;\n+      size_t __i = ctype<char>::id._M_id();\n       const locale::_Impl* __tmp = __loc._M_impl;\n       return static_cast<const ctype<char>&>(*(__tmp->_M_facets[__i]));\n     }\n@@ -508,7 +516,7 @@ namespace std\n     const ctype<wchar_t>&\n     use_facet<ctype<wchar_t> >(const locale& __loc)\n     {\n-      size_t __i = ctype<wchar_t>::id._M_index;\n+      size_t __i = ctype<wchar_t>::id._M_id();\n       const locale::_Impl* __tmp = __loc._M_impl;\n       return static_cast<const ctype<wchar_t>&>(*(__tmp->_M_facets[__i]));\n     }\n@@ -576,3 +584,4 @@ namespace std\n     *__fptr = '\\0';\n   }\n } // namespace std\n+"}, {"sha": "1b40e0c3db666ed4498c98c059ee9cf1c6ee3448", "filename": "libstdc++-v3/src/localename.cc", "status": "modified", "additions": 160, "deletions": 57, "changes": 217, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3a193e36cdf55fbff3bd0f244bc36bc09871ee1/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3a193e36cdf55fbff3bd0f244bc36bc09871ee1/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc?ref=d3a193e36cdf55fbff3bd0f244bc36bc09871ee1", "patch": "@@ -29,98 +29,186 @@\n #include <clocale>\n #include <cstring>\n #include <locale>\n-#include <vector>\n \n namespace std\n {\n+  // Defined in globals.cc.\n+  extern std::ctype<char>\t\t\tctype_c;\n+  extern std::collate<char> \t\t\tcollate_c;\n+  extern numpunct<char> \t\t\tnumpunct_c;\n+  extern num_get<char> \t\t\t\tnum_get_c;\n+  extern num_put<char> \t\t\t\tnum_put_c;\n+  extern codecvt<char, char, mbstate_t>\t\tcodecvt_c;\n+  extern moneypunct<char, false> \t\tmoneypunct_fc;\n+  extern moneypunct<char, true> \t\tmoneypunct_tc;\n+  extern money_get<char> \t\t\tmoney_get_c;\n+  extern money_put<char> \t\t\tmoney_put_c;\n+  extern __timepunct<char> \t\t\ttimepunct_c;\n+  extern time_get<char> \t\t\ttime_get_c;\n+  extern time_put<char> \t\t\ttime_put_c;\n+  extern std::messages<char> \t\t\tmessages_c;\n+#ifdef  _GLIBCPP_USE_WCHAR_T\n+  extern std::ctype<wchar_t>\t\t\tctype_w;\n+  extern std::collate<wchar_t> \t\t\tcollate_w;\n+  extern numpunct<wchar_t> \t\t\tnumpunct_w;\n+  extern num_get<wchar_t> \t\t\tnum_get_w;\n+  extern num_put<wchar_t> \t\t\tnum_put_w;\n+  extern codecvt<wchar_t, char, mbstate_t>\tcodecvt_w;\n+  extern moneypunct<wchar_t, false> \t\tmoneypunct_fw;\n+  extern moneypunct<wchar_t, true> \t\tmoneypunct_tw;\n+  extern money_get<wchar_t> \t\t\tmoney_get_w;\n+  extern money_put<wchar_t> \t\t\tmoney_put_w;\n+  extern __timepunct<wchar_t> \t\t\ttimepunct_w;\n+  extern time_get<wchar_t> \t\t\ttime_get_w;\n+  extern time_put<wchar_t> \t\t\ttime_put_w;\n+  extern std::messages<wchar_t> \t\tmessages_w;\n+#endif\n+\n   locale::_Impl::\n   ~_Impl() throw()\n   {\n-    __vec_facet::iterator __it = _M_facets.begin();\n-    __vec_facet::iterator __end = _M_facets.end();\n-    for (; __it != __end; ++__it)\n-      if (*__it)\n-\t(*__it)->_M_remove_reference();\n+    for (size_t __i = 0; __i < _M_facets_size; ++__i)\n+      if (_M_facets[__i])\n+\t_M_facets[__i]->_M_remove_reference();\n+    delete [] _M_facets;\n   }\n \n   // Clone existing _Impl object.\n   locale::_Impl::\n   _Impl(const _Impl& __imp, size_t __refs)\n-  : _M_references(__refs) // XXX\n+  : _M_references(__refs), _M_facets_size(__imp._M_facets_size) // XXX\n   {\n-    _M_facets = __imp._M_facets;\n+    try\n+      { \n+\t_M_facets = new facet*[_M_facets_size]; \n+\tfor (size_t __i = 0; __i < _M_facets_size; ++__i)\n+\t  _M_facets[__i] = 0;\n+      }\n+    catch(...) \n+      {\n+\tdelete [] _M_facets;\n+\t__throw_exception_again;\n+      }\n+    for (size_t __i = 0; __i < _M_facets_size; ++__i)\n+      {\n+\t_M_facets[__i] = __imp._M_facets[__i];\n+\tif (_M_facets[__i])\n+\t  _M_facets[__i]->_M_add_reference();\n+      }\n     for (size_t __i = 0; __i < _S_num_categories; ++__i)\n       _M_names[__i] = __imp._M_names[__i];\n-\n-    __vec_facet::iterator __it = _M_facets.begin();\n-    __vec_facet::iterator __end = _M_facets.end();\n-    for (; __it != __end; ++__it)\n-      if (*__it)\n-\t(*__it)->_M_add_reference();\n   }\n \n-  // Construct named _Impl, including the standard \"C\" locale.\n+  // Construct named _Impl.\n   locale::_Impl::\n-  _Impl(string __str, size_t __refs)\n-  : _M_references(__refs)\n+  _Impl(const char* __s, size_t __refs) \n+  : _M_references(__refs), _M_facets_size(_GLIBCPP_NUM_FACETS) // XXX\n   {\n-    // Initialize the underlying locale model, which also checks to\n-    // see if the given name is valid.\n+    // Initialize the underlying locale model, which also checks\n+    // to see if the given name is valid.\n     __c_locale __cloc;\n-    locale::facet::_S_create_c_locale(__cloc, __str.c_str());\n+    locale::facet::_S_create_c_locale(__cloc, __s);\n \n-    // This is needed as presently \"C\" locales != required data in\n-    // __timepunct, numpunct, and moneypunct.\n-    __c_locale __cloc_c = NULL;\n-    if (__str != \"C\" && __str != \"POSIX\")\n-      __cloc_c = __cloc;\n-\n-    _M_facets = __vec_facet(_S_num_facets, NULL);\n+    try\n+      { \n+\t_M_facets = new facet*[_M_facets_size]; \n+\tfor (size_t __i = 0; __i < _M_facets_size; ++__i)\n+\t  _M_facets[__i] = 0;\n+      }\n+    catch(...) \n+      {\n+\tdelete [] _M_facets;\n+\t__throw_exception_again;\n+      }\n \n     // Name all the categories.\n     for (size_t i = 0; i < _S_num_categories; ++i)\n-      _M_names[i] = __str;\n+      _M_names[i] = __s;\n \n     // Construct all standard facets and add them to _M_facets.\n-    _M_init_facet(new std::collate<char>(__cloc));\n     _M_init_facet(new std::ctype<char>(__cloc));\n     _M_init_facet(new codecvt<char, char, mbstate_t>);\n-    _M_init_facet(new moneypunct<char, false>(__cloc_c));\n-    _M_init_facet(new moneypunct<char, true>(__cloc_c));\n-    _M_init_facet(new money_get<char>);\n-    _M_init_facet(new money_put<char>);\n-    _M_init_facet(new numpunct<char>(__cloc_c));\n+    _M_init_facet(new numpunct<char>(__cloc));\n     _M_init_facet(new num_get<char>);\n     _M_init_facet(new num_put<char>);\n-    _M_init_facet(new __timepunct<char>(__cloc_c, __str.c_str()));\n+    _M_init_facet(new std::collate<char>(__cloc));\n+    _M_init_facet(new moneypunct<char, false>(__cloc));\n+    _M_init_facet(new moneypunct<char, true>(__cloc));\n+    _M_init_facet(new money_get<char>);\n+    _M_init_facet(new money_put<char>);\n+    _M_init_facet(new __timepunct<char>(__cloc, __s));\n     _M_init_facet(new time_get<char>);\n     _M_init_facet(new time_put<char>);\n-    _M_init_facet(new std::messages<char>(__cloc, __str.c_str()));\n-    \n+    _M_init_facet(new std::messages<char>(__cloc, __s));\n+\t\n #ifdef  _GLIBCPP_USE_WCHAR_T\n-    _M_init_facet(new std::collate<wchar_t>(__cloc));\n     _M_init_facet(new std::ctype<wchar_t>(__cloc));\n     _M_init_facet(new codecvt<wchar_t, char, mbstate_t>);\n-    _M_init_facet(new moneypunct<wchar_t, false>(__cloc_c));\n-    _M_init_facet(new moneypunct<wchar_t, true>(__cloc_c));\n-    _M_init_facet(new money_get<wchar_t>);\n-    _M_init_facet(new money_put<wchar_t>);\n-    _M_init_facet(new numpunct<wchar_t>(__cloc_c));\n+    _M_init_facet(new numpunct<wchar_t>(__cloc));\n     _M_init_facet(new num_get<wchar_t>);\n     _M_init_facet(new num_put<wchar_t>);\n-    _M_init_facet(new __timepunct<wchar_t>(__cloc_c, __str.c_str()));\n+    _M_init_facet(new std::collate<wchar_t>(__cloc));\n+    _M_init_facet(new moneypunct<wchar_t, false>(__cloc));\n+    _M_init_facet(new moneypunct<wchar_t, true>(__cloc));\n+    _M_init_facet(new money_get<wchar_t>);\n+    _M_init_facet(new money_put<wchar_t>);\n+    _M_init_facet(new __timepunct<wchar_t>(__cloc, __s));\n     _M_init_facet(new time_get<wchar_t>);\n     _M_init_facet(new time_put<wchar_t>);\n-    _M_init_facet(new std::messages<wchar_t>(__cloc, __str.c_str()));\n+    _M_init_facet(new std::messages<wchar_t>(__cloc, __s));\n #endif\t  \n     locale::facet::_S_destroy_c_locale(__cloc);\n   }\n+\n+  // Construct \"C\" _Impl.\n+  locale::_Impl::\n+  _Impl(facet** __f, size_t __refs, bool) \n+  : _M_references(__refs), _M_facets(__f), _M_facets_size(_GLIBCPP_NUM_FACETS)\n+  {\n+    // Name all the categories.\n+    for (size_t i = 0; i < _S_num_categories; ++i)\n+      _M_names[i] = \"C\";\n+\n+    // This is needed as presently the C++ version of \"C\" locales\n+    // != data in the underlying locale model for __timepunct,\n+    // numpunct, and moneypunct. Also, the \"C\" locales must be\n+    // constructed in a way such that they are pre-allocated.\n+    _M_init_facet(new (&ctype_c) std::ctype<char>);\n+    _M_init_facet(new (&codecvt_c) codecvt<char, char, mbstate_t>);\n+    _M_init_facet(new (&numpunct_c) numpunct<char>);\n+    _M_init_facet(new (&num_get_c) num_get<char>);\n+    _M_init_facet(new (&num_put_c) num_put<char>);\n+    _M_init_facet(new (&collate_c) std::collate<char>);\n+    _M_init_facet(new (&moneypunct_fc) moneypunct<char, false>);\n+    _M_init_facet(new (&moneypunct_tc) moneypunct<char, true>);\n+    _M_init_facet(new (&money_get_c) money_get<char>);\n+    _M_init_facet(new (&money_put_c) money_put<char>);\n+    _M_init_facet(new (&timepunct_c) __timepunct<char>);\n+    _M_init_facet(new (&time_get_c) time_get<char>);\n+    _M_init_facet(new (&time_put_c) time_put<char>);\n+    _M_init_facet(new (&messages_c) std::messages<char>);\t\n+#ifdef  _GLIBCPP_USE_WCHAR_T\n+    _M_init_facet(new (&ctype_w) std::ctype<wchar_t>);\n+    _M_init_facet(new (&codecvt_w) codecvt<wchar_t, char, mbstate_t>);\n+    _M_init_facet(new (&numpunct_w) numpunct<wchar_t>);\n+    _M_init_facet(new (&num_get_w) num_get<wchar_t>);\n+    _M_init_facet(new (&num_put_w) num_put<wchar_t>);\n+    _M_init_facet(new (&collate_w) std::collate<wchar_t>);\n+    _M_init_facet(new (&moneypunct_fw) moneypunct<wchar_t, false>);\n+    _M_init_facet(new (&moneypunct_tw) moneypunct<wchar_t, true>);\n+    _M_init_facet(new (&money_get_w) money_get<wchar_t>);\n+    _M_init_facet(new (&money_put_w) money_put<wchar_t>);\n+    _M_init_facet(new (&timepunct_w) __timepunct<wchar_t>);\n+    _M_init_facet(new (&time_get_w) time_get<wchar_t>);\n+    _M_init_facet(new (&time_put_w) time_put<wchar_t>);\n+    _M_init_facet(new (&messages_w) std::messages<wchar_t>);\n+#endif\t  \n+  }\n   \n   void\n   locale::_Impl::\n   _M_replace_categories(const _Impl* __imp, category __cat)\n   {\n-    const string __none(\"*\");\n     category __mask;\n     for (unsigned int __ix = 0; __ix < _S_num_categories; ++__ix)\n       {\n@@ -130,7 +218,8 @@ namespace std\n \t    // Need to replace entry in _M_facets with other locale's info.\n \t    _M_replace_category(__imp, _S_facet_categories[__ix]);\n \t    // If both have names, go ahead and mangle.\n-\t    if (_M_names[__ix] != __none && __imp->_M_names[__ix] != __none)\n+\t    if (strcmp(_M_names[__ix], \"*\") != 0 \n+\t\t&& strcmp(__imp->_M_names[__ix], \"*\") != 0)\n \t      _M_names[__ix] = __imp->_M_names[__ix];\n \t  }\n       }\n@@ -148,11 +237,9 @@ namespace std\n   locale::_Impl::\n   _M_replace_facet(const _Impl* __imp, const locale::id* __idp)\n   {\n-    size_t __index = __idp->_M_index;\n-    if (__index == 0 || __imp->_M_facets.size() <= __index \n-\t|| __imp->_M_facets[__index] == 0)\n+    size_t __index = __idp->_M_id();\n+    if ((__index > (__imp->_M_facets_size - 1)) || !__imp->_M_facets[__index])\n       __throw_runtime_error(\"no locale facet\");\n-\t\n     _M_install_facet(__idp, __imp->_M_facets[__index]); \n   }\n \n@@ -162,12 +249,28 @@ namespace std\n   {\n     if (__fp)\n       {\n-\tsize_t& __index = __idp->_M_index;\n-\tif (!__index)\n-\t  __index = 1 + __exchange_and_add(&locale::id::_S_highwater, 1);\n-\t\n-\tif (__index >= _M_facets.size())\n-\t  _M_facets.resize(__index + 1, 0);  // might throw\n+\tsize_t __index = __idp->_M_id();\n+\tif (__index > _M_facets_size - 1)\n+\t  {\n+\t    facet** __old = _M_facets;\n+\t    facet** __new;\n+\t    const size_t __new_size = __index + 4;\n+\t    try\n+\t      { __new = new facet*[__new_size]; }\n+\t    catch(...) \n+\t      {\n+\t\tdelete [] __new;\n+\t\t__throw_exception_again;\n+\t      }\n+\t    for (size_t __i = 0; __i < _M_facets_size; ++__i)\n+\t      __new[__i] = _M_facets[__i];\n+\t    for (size_t __i2 = _M_facets_size; __i2 < __new_size; ++__i2)\n+\t      __new[__i2] = 0;\n+\n+\t    _M_facets_size = __new_size;\n+\t    _M_facets = __new;\n+\t    delete [] __old;\n+\t  }\n \n \tfacet*& __fpr = _M_facets[__index];\n \tif (__fpr)"}, {"sha": "7bf1e6956e79b04867ec7f02ebc53b81c229499f", "filename": "libstdc++-v3/testsuite/22_locale/num_get_members_char.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3a193e36cdf55fbff3bd0f244bc36bc09871ee1/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get_members_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3a193e36cdf55fbff3bd0f244bc36bc09871ee1/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get_members_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get_members_char.cc?ref=d3a193e36cdf55fbff3bd0f244bc36bc09871ee1", "patch": "@@ -394,7 +394,8 @@ void test04()\n void test05()\n {\n   using namespace std;\n- \n+  bool test = true;\n+\n   double d = 0.0;\n \n   istringstream iss;"}, {"sha": "2efbe5c5affed270d5a083c44d2fd00498ea3893", "filename": "libstdc++-v3/testsuite/22_locale/num_get_members_wchar_t.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3a193e36cdf55fbff3bd0f244bc36bc09871ee1/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get_members_wchar_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3a193e36cdf55fbff3bd0f244bc36bc09871ee1/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get_members_wchar_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get_members_wchar_t.cc?ref=d3a193e36cdf55fbff3bd0f244bc36bc09871ee1", "patch": "@@ -396,7 +396,8 @@ void test04()\n void test05()\n {\n   using namespace std;\n- \n+  bool test = true;\n+\n   double d = 0.0;\n \n   wistringstream iss;"}, {"sha": "f8153c42e39a5232510ffb3f3281a7d5e6ca84b0", "filename": "libstdc++-v3/testsuite/27_io/filebuf_members.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3a193e36cdf55fbff3bd0f244bc36bc09871ee1/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilebuf_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3a193e36cdf55fbff3bd0f244bc36bc09871ee1/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilebuf_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilebuf_members.cc?ref=d3a193e36cdf55fbff3bd0f244bc36bc09871ee1", "patch": "@@ -185,9 +185,9 @@ void test_05()\n   scratch_file.close();\n \n   scratch_file.open(\"SCRATCH\", std::ios::in);\n+  if (!scratch_file)\n+    VERIFY( false );\n   scratch_file.close();\n-\n-  VERIFY(scratch_file);\n }\n \n int"}]}