{"sha": "4038d0fb1f156f136ea94f8fa17f91150da9cbbd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDAzOGQwZmIxZjE1NmYxMzZlYTk0ZjhmYTE3ZjkxMTUwZGE5Y2JiZA==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2012-12-22T17:27:03Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2012-12-22T17:27:03Z"}, "message": "re PR fortran/55763 (Issues with some simpler CLASS(*) programs)\n\n2012-12-21  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/55763\n        * module.c (mio_component): Don't skip _hash's initializer.\n        * resolve.c (resolve_select_type): Add an assert.\n        * trans-expr.c (gfc_conv_procedure_call): Handle\n        INTENT(OUT) for UNLIMIT_POLY.\n\n2012-12-21  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/55763\n        * gfortran.dg/unlimited_polymorphic_6.f90: New.\n\nFrom-SVN: r194696", "tree": {"sha": "3e9fad862f952a753852e5104f37ce2f18774e5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e9fad862f952a753852e5104f37ce2f18774e5f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4038d0fb1f156f136ea94f8fa17f91150da9cbbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4038d0fb1f156f136ea94f8fa17f91150da9cbbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4038d0fb1f156f136ea94f8fa17f91150da9cbbd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4038d0fb1f156f136ea94f8fa17f91150da9cbbd/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "409a5e7eb4cca107037fafa4a7eea92603edb83d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/409a5e7eb4cca107037fafa4a7eea92603edb83d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/409a5e7eb4cca107037fafa4a7eea92603edb83d"}], "stats": {"total": 64, "additions": 61, "deletions": 3}, "files": [{"sha": "4a84e1d011d5de8a86aa72f67ea0f9cccf41e037", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4038d0fb1f156f136ea94f8fa17f91150da9cbbd/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4038d0fb1f156f136ea94f8fa17f91150da9cbbd/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=4038d0fb1f156f136ea94f8fa17f91150da9cbbd", "patch": "@@ -1,3 +1,11 @@\n+2012-12-22  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/55763\n+\t* module.c (mio_component): Don't skip _hash's initializer.\n+\t* resolve.c (resolve_select_type): Add an assert.\n+\t* trans-expr.c (gfc_conv_procedure_call): Handle\n+\tINTENT(OUT) for UNLIMIT_POLY.\n+\n 2012-12-21  Richard Biener  <rguenther@suse.de>\n \n \tPR bootstrap/54659"}, {"sha": "a797f24c3f44067817c18831ccc6e5f5986b504b", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4038d0fb1f156f136ea94f8fa17f91150da9cbbd/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4038d0fb1f156f136ea94f8fa17f91150da9cbbd/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=4038d0fb1f156f136ea94f8fa17f91150da9cbbd", "patch": "@@ -2603,7 +2603,8 @@ mio_component (gfc_component *c, int vtype)\n     c->attr.class_ok = 1;\n   c->attr.access = MIO_NAME (gfc_access) (c->attr.access, access_types); \n \n-  if (!vtype || strcmp (c->name, \"_final\") == 0)\n+  if (!vtype || strcmp (c->name, \"_final\") == 0\n+      || strcmp (c->name, \"_hash\") == 0)\n     mio_expr (&c->initializer);\n \n   if (c->attr.proc_pointer)"}, {"sha": "77d3dc5d9a07bd6aca4fa6658b3cf31a0878c422", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4038d0fb1f156f136ea94f8fa17f91150da9cbbd/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4038d0fb1f156f136ea94f8fa17f91150da9cbbd/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=4038d0fb1f156f136ea94f8fa17f91150da9cbbd", "patch": "@@ -8484,7 +8484,7 @@ resolve_select_type (gfc_code *code, gfc_namespace *old_ns)\n \t  gfc_expr *e;\n \n \t  ivtab = gfc_find_intrinsic_vtab (&c->ts);\n-\t  gcc_assert (ivtab);\n+\t  gcc_assert (ivtab && CLASS_DATA (ivtab)->initializer);\n \t  e = CLASS_DATA (ivtab)->initializer;\n \t  c->low = c->high = gfc_copy_expr (e);\n \t}"}, {"sha": "452f2bcf9748e5695716e2262cecd017dcaf14cb", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4038d0fb1f156f136ea94f8fa17f91150da9cbbd/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4038d0fb1f156f136ea94f8fa17f91150da9cbbd/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=4038d0fb1f156f136ea94f8fa17f91150da9cbbd", "patch": "@@ -4302,7 +4302,14 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n \t\t\t\t\t     null_pointer_node);\n \t\t      gfc_add_expr_to_block (&block, tmp);\n \n-\t\t      if (fsym->ts.type == BT_CLASS)\n+\t\t      if (fsym->ts.type == BT_CLASS && UNLIMITED_POLY (fsym))\n+\t\t\t{\n+\t\t\t  gfc_add_modify (&block, ptr,\n+\t\t\t\t\t  fold_convert (TREE_TYPE (ptr),\n+\t\t\t\t\t\t\tnull_pointer_node));\n+\t\t\t  gfc_add_expr_to_block (&block, tmp);\n+\t\t\t}\n+\t\t      else if (fsym->ts.type == BT_CLASS)\n \t\t\t{\n \t\t\t  gfc_symbol *vtab;\n \t\t\t  vtab = gfc_find_derived_vtab (fsym->ts.u.derived);"}, {"sha": "0f3d89f9af2cfc4a4e166b96bd52252bd4a7d221", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4038d0fb1f156f136ea94f8fa17f91150da9cbbd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4038d0fb1f156f136ea94f8fa17f91150da9cbbd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4038d0fb1f156f136ea94f8fa17f91150da9cbbd", "patch": "@@ -1,3 +1,8 @@\n+2012-12-22  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/55763\n+\t* gfortran.dg/unlimited_polymorphic_6.f90: New.\n+\n 2012-12-21  Martin Jambor  <mjambor@suse.cz>\n \n \tPR tree-optimization/55355"}, {"sha": "a64f4e393e248eeea470cb7a70e2ba3865402d2e", "filename": "gcc/testsuite/gfortran.dg/unlimited_polymorphic_6.f90", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4038d0fb1f156f136ea94f8fa17f91150da9cbbd/gcc%2Ftestsuite%2Fgfortran.dg%2Funlimited_polymorphic_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4038d0fb1f156f136ea94f8fa17f91150da9cbbd/gcc%2Ftestsuite%2Fgfortran.dg%2Funlimited_polymorphic_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Funlimited_polymorphic_6.f90?ref=4038d0fb1f156f136ea94f8fa17f91150da9cbbd", "patch": "@@ -0,0 +1,37 @@\n+! { dg-do run }\n+!\n+! PR fortran/55763\n+!\n+! Contributed by Reinhold Bader\n+!\n+module mod_alloc_scalar_01\n+contains\n+  subroutine construct(this)\n+    class(*), allocatable, intent(out) :: this\n+    integer :: this_i\n+    this_i = 4\n+    allocate(this, source=this_i)\n+  end subroutine\n+end module\n+\n+program alloc_scalar_01\n+  use mod_alloc_scalar_01\n+  implicit none\n+  class(*), allocatable :: mystuff\n+\n+  call construct(mystuff)\n+  call construct(mystuff)\n+\n+  select type(mystuff)\n+  type is (integer)\n+    if (mystuff == 4) then\n+!      write(*,*) 'OK'\n+    else \n+      call abort()\n+!     write(*,*) 'FAIL 1'\n+    end if\n+  class default\n+    call abort()\n+!    write(*,*) 'FAIL 2'\n+  end select\n+end program"}]}