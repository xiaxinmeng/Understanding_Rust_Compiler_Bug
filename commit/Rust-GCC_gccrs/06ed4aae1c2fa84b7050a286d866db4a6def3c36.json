{"sha": "06ed4aae1c2fa84b7050a286d866db4a6def3c36", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDZlZDRhYWUxYzJmYTg0YjcwNTBhMjg2ZDg2NmRiNGE2ZGVmM2MzNg==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-06-28T11:29:11Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-06-28T12:52:25Z"}, "message": "coroutines: Handle namespaces while scanning local vars [PR95711].\n\nWe need to skip past namespace decls when scanning the bind\nexpression var lists checking for local vars.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/95711\n\t* coroutines.cc (register_local_var_uses): Skip past\n\tnamespace decls.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/95711\n\t* g++.dg/coroutines/pr95711.C: New test.", "tree": {"sha": "b0bd54a66653be4d04b3733d3d2060395930f197", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0bd54a66653be4d04b3733d3d2060395930f197"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/06ed4aae1c2fa84b7050a286d866db4a6def3c36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06ed4aae1c2fa84b7050a286d866db4a6def3c36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06ed4aae1c2fa84b7050a286d866db4a6def3c36", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06ed4aae1c2fa84b7050a286d866db4a6def3c36/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3a8f66a83f8c94f6fbb0233cefba8032f2e4876", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3a8f66a83f8c94f6fbb0233cefba8032f2e4876", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3a8f66a83f8c94f6fbb0233cefba8032f2e4876"}], "stats": {"total": 82, "additions": 81, "deletions": 1}, "files": [{"sha": "54f9cb3b4e4576bcf7dde64115f88fa0396db639", "filename": "gcc/cp/coroutines.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06ed4aae1c2fa84b7050a286d866db4a6def3c36/gcc%2Fcp%2Fcoroutines.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06ed4aae1c2fa84b7050a286d866db4a6def3c36/gcc%2Fcp%2Fcoroutines.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcoroutines.cc?ref=06ed4aae1c2fa84b7050a286d866db4a6def3c36", "patch": "@@ -3563,7 +3563,8 @@ register_local_var_uses (tree *stmt, int *do_subtree, void *d)\n \t  local_var.field_idx = local_var.field_id = NULL_TREE;\n \n \t  /* Make sure that we only present vars to the tests below.  */\n-\t  if (TREE_CODE (lvar) == TYPE_DECL)\n+\t  if (TREE_CODE (lvar) == TYPE_DECL\n+\t      || TREE_CODE (lvar) == NAMESPACE_DECL)\n \t    continue;\n \n \t  /* We don't move static vars into the frame. */"}, {"sha": "f6aedb16ebd79782d0fb110d75e0965aebac5e50", "filename": "gcc/testsuite/g++.dg/coroutines/pr95711.C", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06ed4aae1c2fa84b7050a286d866db4a6def3c36/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr95711.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06ed4aae1c2fa84b7050a286d866db4a6def3c36/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr95711.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr95711.C?ref=06ed4aae1c2fa84b7050a286d866db4a6def3c36", "patch": "@@ -0,0 +1,79 @@\n+//  { dg-do run }\n+\n+#if __has_include(<coroutine>)\n+#include <coroutine>\n+#else\n+#include <experimental/coroutine>\n+namespace std {\n+    using namespace std::experimental;\n+}\n+#endif\n+#include <cstdlib>\n+\n+template <typename T>\n+struct generator{\n+    struct promise_type;\n+    using coro_handle = std::coroutine_handle<promise_type>;\n+\n+    struct promise_type{\n+        std::suspend_always yield_value (T value){\n+            value_ = value;\n+            return {};\n+        }\n+        std::suspend_always initial_suspend (){\n+            return {};\n+        }\n+        std::suspend_always final_suspend (){\n+            return {};\n+        }\n+\n+        std::suspend_never return_void()\n+        {\n+            return {};\n+        }\n+        generator get_return_object () {\n+            return {coro_handle::from_promise(*this)};\n+        }\n+        void unhandled_exception () {\n+            return;\n+        }\n+        T value_;\n+    };\n+    coro_handle handle;\n+    generator(coro_handle h)\n+        :handle(h)\n+    {}\n+    ~generator(){\n+        if(handle)\n+            handle.destroy();\n+    }\n+\n+    bool resume(){\n+        if(not handle.done())\n+            handle.resume();\n+        return not handle.done();\n+    };\n+\n+    T get () {\n+        return handle.promise().value_;\n+    }\n+};\n+namespace A\n+{\n+}\n+\n+generator<int>\n+parse()\n+{\n+    namespace B = A;\n+    co_yield 1;\n+}\n+\n+int main()\n+{\n+    auto gen = parse();\n+    gen.handle.resume (); /* init suspend. */\n+    if (gen.get() != 1)\n+      abort ();\n+  return 0;\n+}"}]}