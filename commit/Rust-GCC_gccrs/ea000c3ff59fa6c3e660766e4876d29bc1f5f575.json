{"sha": "ea000c3ff59fa6c3e660766e4876d29bc1f5f575", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWEwMDBjM2ZmNTlmYTZjM2U2NjA3NjZlNDg3NmQyOWJjMWY1ZjU3NQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2016-10-17T22:15:02Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2016-10-17T22:15:02Z"}, "message": "expmed.c (expand_shift_1): Add MAY_FAIL parameter and do not assert that the result is non-zero if it is true.\n\n\t* expmed.c (expand_shift_1): Add MAY_FAIL parameter and do not assert\n\tthat the result is non-zero if it is true.\n\t(maybe_expand_shift): New wrapper around expand_shift_1.\n\t(emit_store_flag): Call maybe_expand_shift in lieu of expand_shift.\n\nFrom-SVN: r241282", "tree": {"sha": "3de01aa3cab124e106c14bbb7e456b34f0b96a5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3de01aa3cab124e106c14bbb7e456b34f0b96a5b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea000c3ff59fa6c3e660766e4876d29bc1f5f575", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea000c3ff59fa6c3e660766e4876d29bc1f5f575", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea000c3ff59fa6c3e660766e4876d29bc1f5f575", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea000c3ff59fa6c3e660766e4876d29bc1f5f575/comments", "author": null, "committer": null, "parents": [{"sha": "a929f2662ef33c06ad5b41f2a3df0c0833bbc405", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a929f2662ef33c06ad5b41f2a3df0c0833bbc405", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a929f2662ef33c06ad5b41f2a3df0c0833bbc405"}], "stats": {"total": 42, "additions": 31, "deletions": 11}, "files": [{"sha": "338ae80c1b40e3c70c395f8ba5d1d2709c587af8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea000c3ff59fa6c3e660766e4876d29bc1f5f575/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea000c3ff59fa6c3e660766e4876d29bc1f5f575/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ea000c3ff59fa6c3e660766e4876d29bc1f5f575", "patch": "@@ -1,3 +1,10 @@\n+2016-10-17  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* expmed.c (expand_shift_1): Add MAY_FAIL parameter and do not assert\n+\tthat the result is non-zero if it is true.\n+\t(maybe_expand_shift): New wrapper around expand_shift_1.\n+\t(emit_store_flag): Call maybe_expand_shift in lieu of expand_shift.\n+\n 2016-10-17  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \tPR tree-optimization/77916"}, {"sha": "69109db0ebd447e5adb898491f24ab8206ce1982", "filename": "gcc/expmed.c", "status": "modified", "additions": 24, "deletions": 11, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea000c3ff59fa6c3e660766e4876d29bc1f5f575/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea000c3ff59fa6c3e660766e4876d29bc1f5f575/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=ea000c3ff59fa6c3e660766e4876d29bc1f5f575", "patch": "@@ -2248,11 +2248,13 @@ expand_dec (rtx target, rtx dec)\n    and AMOUNT the rtx for the amount to shift by.\n    Store the result in the rtx TARGET, if that is convenient.\n    If UNSIGNEDP is nonzero, do a logical shift; otherwise, arithmetic.\n-   Return the rtx for where the value is.  */\n+   Return the rtx for where the value is.\n+   If that cannot be done, abort the compilation unless MAY_FAIL is true,\n+   in which case 0 is returned.  */\n \n static rtx\n expand_shift_1 (enum tree_code code, machine_mode mode, rtx shifted,\n-\t\trtx amount, rtx target, int unsignedp)\n+\t\trtx amount, rtx target, int unsignedp, bool may_fail = false)\n {\n   rtx op1, temp = 0;\n   int left = (code == LSHIFT_EXPR || code == LROTATE_EXPR);\n@@ -2449,7 +2451,7 @@ expand_shift_1 (enum tree_code code, machine_mode mode, rtx shifted,\n \t define_expand for lshrsi3 was added to vax.md.  */\n     }\n \n-  gcc_assert (temp);\n+  gcc_assert (temp != NULL_RTX || may_fail);\n   return temp;\n }\n \n@@ -2468,6 +2470,16 @@ expand_shift (enum tree_code code, machine_mode mode, rtx shifted,\n \t\t\t shifted, GEN_INT (amount), target, unsignedp);\n }\n \n+/* Likewise, but return 0 if that cannot be done.  */\n+\n+static rtx\n+maybe_expand_shift (enum tree_code code, machine_mode mode, rtx shifted,\n+\t\t    int amount, rtx target, int unsignedp)\n+{\n+  return expand_shift_1 (code, mode,\n+\t\t\t shifted, GEN_INT (amount), target, unsignedp, true);\n+}\n+\n /* Output a shift instruction for expression code CODE,\n    with SHIFTED being the rtx for the value to shift,\n    and AMOUNT the tree for the amount to shift by.\n@@ -5754,11 +5766,12 @@ emit_store_flag (rtx target, enum rtx_code code, rtx op0, rtx op1,\n       if (rtx_equal_p (subtarget, op0))\n \tsubtarget = 0;\n \n-      tem = expand_shift (RSHIFT_EXPR, mode, op0,\n-\t\t\t  GET_MODE_BITSIZE (mode) - 1,\n-\t\t\t  subtarget, 0);\n-      tem = expand_binop (mode, sub_optab, tem, op0, subtarget, 0,\n-\t\t\t  OPTAB_WIDEN);\n+      tem = maybe_expand_shift (RSHIFT_EXPR, mode, op0,\n+\t\t\t\tGET_MODE_BITSIZE (mode) - 1,\n+\t\t\t\tsubtarget, 0);\n+      if (tem)\n+\ttem = expand_binop (mode, sub_optab, tem, op0, subtarget, 0,\n+\t\t\t    OPTAB_WIDEN);\n     }\n \n   if (code == EQ || code == NE)\n@@ -5820,9 +5833,9 @@ emit_store_flag (rtx target, enum rtx_code code, rtx op0, rtx op1,\n     }\n \n   if (tem && normalizep)\n-    tem = expand_shift (RSHIFT_EXPR, mode, tem,\n-\t\t\tGET_MODE_BITSIZE (mode) - 1,\n-\t\t\tsubtarget, normalizep == 1);\n+    tem = maybe_expand_shift (RSHIFT_EXPR, mode, tem,\n+\t\t\t      GET_MODE_BITSIZE (mode) - 1,\n+\t\t\t      subtarget, normalizep == 1);\n \n   if (tem)\n     {"}]}