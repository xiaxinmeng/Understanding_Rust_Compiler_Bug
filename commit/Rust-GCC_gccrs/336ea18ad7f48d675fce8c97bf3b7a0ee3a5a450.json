{"sha": "336ea18ad7f48d675fce8c97bf3b7a0ee3a5a450", "node_id": "C_kwDOANBUbNoAKDMzNmVhMThhZDdmNDhkNjc1ZmNlOGM5N2JmM2I3YTBlZTNhNWE0NTA", "commit": {"author": {"name": "Sebastian Huber", "email": "sebastian.huber@embedded-brains.de", "date": "2022-03-23T09:20:56Z"}, "committer": {"name": "Sebastian Huber", "email": "sebastian.huber@embedded-brains.de", "date": "2022-04-28T18:46:48Z"}, "message": "gcov-tool: Allow merging of empty profile lists\n\nThe gcov_profile_merge() already had code to deal with profile information\nwhich had no counterpart to merge with.  For profile information from files\nwith no associated counterpart, the profile information is simply used as is\nwith the weighting transformation applied.  Make sure that gcov_profile_merge()\nworks with an empty target profile list.  Return the merged profile list.\n\ngcc/\n\t* gcov-tool.cc (gcov_profile_merge): Adjust return type.\n\t(profile_merge): Allow merging of directories which contain no profile\n\tfiles.\n\nlibgcc/\n\t* libgcov-util.c (gcov_profile_merge): Return the list of merged\n\tprofiles.  Accept empty target and source profile lists.", "tree": {"sha": "37913244bca7c139f0d7d0196150a578cdd1d6dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37913244bca7c139f0d7d0196150a578cdd1d6dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/336ea18ad7f48d675fce8c97bf3b7a0ee3a5a450", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/336ea18ad7f48d675fce8c97bf3b7a0ee3a5a450", "html_url": "https://github.com/Rust-GCC/gccrs/commit/336ea18ad7f48d675fce8c97bf3b7a0ee3a5a450", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/336ea18ad7f48d675fce8c97bf3b7a0ee3a5a450/comments", "author": {"login": "sebhub", "id": 932056, "node_id": "MDQ6VXNlcjkzMjA1Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/932056?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebhub", "html_url": "https://github.com/sebhub", "followers_url": "https://api.github.com/users/sebhub/followers", "following_url": "https://api.github.com/users/sebhub/following{/other_user}", "gists_url": "https://api.github.com/users/sebhub/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebhub/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebhub/subscriptions", "organizations_url": "https://api.github.com/users/sebhub/orgs", "repos_url": "https://api.github.com/users/sebhub/repos", "events_url": "https://api.github.com/users/sebhub/events{/privacy}", "received_events_url": "https://api.github.com/users/sebhub/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sebhub", "id": 932056, "node_id": "MDQ6VXNlcjkzMjA1Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/932056?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebhub", "html_url": "https://github.com/sebhub", "followers_url": "https://api.github.com/users/sebhub/followers", "following_url": "https://api.github.com/users/sebhub/following{/other_user}", "gists_url": "https://api.github.com/users/sebhub/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebhub/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebhub/subscriptions", "organizations_url": "https://api.github.com/users/sebhub/orgs", "repos_url": "https://api.github.com/users/sebhub/repos", "events_url": "https://api.github.com/users/sebhub/events{/privacy}", "received_events_url": "https://api.github.com/users/sebhub/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00c4405cd7f6a144d0a439e4d848d246920e6ff3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00c4405cd7f6a144d0a439e4d848d246920e6ff3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00c4405cd7f6a144d0a439e4d848d246920e6ff3"}], "stats": {"total": 46, "additions": 21, "deletions": 25}, "files": [{"sha": "2e4083a664d0366ae85e6ece613c2beac08698c5", "filename": "gcc/gcov-tool.cc", "status": "modified", "additions": 10, "deletions": 17, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/336ea18ad7f48d675fce8c97bf3b7a0ee3a5a450/gcc%2Fgcov-tool.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/336ea18ad7f48d675fce8c97bf3b7a0ee3a5a450/gcc%2Fgcov-tool.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov-tool.cc?ref=336ea18ad7f48d675fce8c97bf3b7a0ee3a5a450", "patch": "@@ -40,7 +40,8 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #endif\n #include <getopt.h>\n \n-extern int gcov_profile_merge (struct gcov_info*, struct gcov_info*, int, int);\n+extern struct gcov_info *gcov_profile_merge (struct gcov_info*,\n+\t\t\t\t\t     struct gcov_info*, int, int);\n extern int gcov_profile_overlap (struct gcov_info*, struct gcov_info*);\n extern int gcov_profile_normalize (struct gcov_info*, gcov_type);\n extern int gcov_profile_scale (struct gcov_info*, float, int, int);\n@@ -141,26 +142,18 @@ profile_merge (const char *d1, const char *d2, const char *out, int w1, int w2)\n {\n   struct gcov_info *d1_profile;\n   struct gcov_info *d2_profile;\n-  int ret;\n+  struct gcov_info *merged_profile;\n \n   d1_profile = gcov_read_profile_dir (d1, 0);\n-  if (!d1_profile)\n-    return 1;\n-\n-  if (d2)\n-    {\n-      d2_profile = gcov_read_profile_dir (d2, 0);\n-      if (!d2_profile)\n-        return 1;\n+  d2_profile = gcov_read_profile_dir (d2, 0);\n \n-      /* The actual merge: we overwrite to d1_profile.  */\n-      ret = gcov_profile_merge (d1_profile, d2_profile, w1, w2);\n+  /* The actual merge: we overwrite to d1_profile.  */\n+  merged_profile = gcov_profile_merge (d1_profile, d2_profile, w1, w2);\n \n-      if (ret)\n-        return ret;\n-    }\n-\n-  gcov_output_files (out, d1_profile);\n+  if (merged_profile)\n+    gcov_output_files (out, merged_profile);\n+  else if (verbose)\n+    fnotice (stdout, \"no profile files were merged\\n\");\n \n   return 0;\n }"}, {"sha": "100f1b19f1a2050dcc03ec1a9d77ecca871bf2e7", "filename": "libgcc/libgcov-util.c", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/336ea18ad7f48d675fce8c97bf3b7a0ee3a5a450/libgcc%2Flibgcov-util.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/336ea18ad7f48d675fce8c97bf3b7a0ee3a5a450/libgcc%2Flibgcov-util.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Flibgcov-util.c?ref=336ea18ad7f48d675fce8c97bf3b7a0ee3a5a450", "patch": "@@ -674,16 +674,16 @@ find_match_gcov_info (struct gcov_info **array, int size,\n }\n \n /* Merge the list of gcov_info objects from SRC_PROFILE to TGT_PROFILE.\n-   Return 0 on success: without mismatch.\n-   Reutrn 1 on error.  */\n+   Return the list of merged gcov_info objects.  Return NULL if the list is\n+   empty.  */\n \n-int\n+struct gcov_info *\n gcov_profile_merge (struct gcov_info *tgt_profile, struct gcov_info *src_profile,\n                     int w1, int w2)\n {\n   struct gcov_info *gi_ptr;\n   struct gcov_info **tgt_infos;\n-  struct gcov_info *tgt_tail;\n+  struct gcov_info **tgt_tail;\n   struct gcov_info **in_src_not_tgt;\n   unsigned tgt_cnt = 0, src_cnt = 0;\n   unsigned unmatch_info_cnt = 0;\n@@ -703,7 +703,10 @@ gcov_profile_merge (struct gcov_info *tgt_profile, struct gcov_info *src_profile\n   for (gi_ptr = tgt_profile, i = 0; gi_ptr; gi_ptr = gi_ptr->next, i++)\n     tgt_infos[i] = gi_ptr;\n \n-  tgt_tail = tgt_infos[tgt_cnt - 1];\n+  if (tgt_cnt)\n+     tgt_tail = &tgt_infos[tgt_cnt - 1]->next;\n+  else\n+     tgt_tail = &tgt_profile;\n \n   /* First pass on tgt_profile, we multiply w1 to all counters.  */\n   if (w1 > 1)\n@@ -732,14 +735,14 @@ gcov_profile_merge (struct gcov_info *tgt_profile, struct gcov_info *src_profile\n       gi_ptr = in_src_not_tgt[i];\n       gcov_merge (gi_ptr, gi_ptr, w2 - 1);\n       gi_ptr->next = NULL;\n-      tgt_tail->next = gi_ptr;\n-      tgt_tail = gi_ptr;\n+      *tgt_tail = gi_ptr;\n+      tgt_tail = &gi_ptr->next;\n     }\n \n   free (in_src_not_tgt);\n   free (tgt_infos);\n \n-  return 0;\n+  return tgt_profile;\n }\n \n typedef gcov_type (*counter_op_fn) (gcov_type, void*, void*);"}]}