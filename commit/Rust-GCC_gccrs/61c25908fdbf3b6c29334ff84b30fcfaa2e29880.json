{"sha": "61c25908fdbf3b6c29334ff84b30fcfaa2e29880", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjFjMjU5MDhmZGJmM2I2YzI5MzM0ZmY4NGIzMGZjZmFhMmUyOTg4MA==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2006-06-24T12:47:48Z"}, "committer": {"name": "Olivier Hainque", "email": "hainque@gcc.gnu.org", "date": "2006-06-24T12:47:48Z"}, "message": "gimplify.c (gimplify_scalar_mode_aggregate_compare): New function.\n\n\t* gimplify.c (gimplify_scalar_mode_aggregate_compare): New function.\n\t(gimplify_expr): Use it for tcc_comparison of operands of non BLKmode\n\taggregate types.\n\n\t* tree-ssa-loop-im.c (for_each_index): Handle ARRAY_RANGE_REF as\n\tARRAY_REF, so have the callback called for the low bound expression.\n\n\t* gnat.dg/scalar_mode_agg_compare_loop.adb: New test.\n\t* gnat.dg/scalar_mode_agg_compare.adb: New test.\n\nFrom-SVN: r114963", "tree": {"sha": "b0b48b70fe5bdb5192ddb541aa32d97ef613a126", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0b48b70fe5bdb5192ddb541aa32d97ef613a126"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61c25908fdbf3b6c29334ff84b30fcfaa2e29880", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61c25908fdbf3b6c29334ff84b30fcfaa2e29880", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61c25908fdbf3b6c29334ff84b30fcfaa2e29880", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61c25908fdbf3b6c29334ff84b30fcfaa2e29880/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7606c786fd0d802f142f18e0cfbb643ad79cc8ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7606c786fd0d802f142f18e0cfbb643ad79cc8ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7606c786fd0d802f142f18e0cfbb643ad79cc8ec"}], "stats": {"total": 114, "additions": 103, "deletions": 11}, "files": [{"sha": "fdfe042e81a85967b4f7a85f6a1feff1d372b162", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61c25908fdbf3b6c29334ff84b30fcfaa2e29880/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61c25908fdbf3b6c29334ff84b30fcfaa2e29880/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=61c25908fdbf3b6c29334ff84b30fcfaa2e29880", "patch": "@@ -1,3 +1,14 @@\n+2006-06-24  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* gimplify.c (gimplify_scalar_mode_aggregate_compare): New function.\n+\t(gimplify_expr): Use it for tcc_comparison of operands of non BLKmode\n+\taggregate types.\n+\n+2006-06-24  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* tree-ssa-loop-im.c (for_each_index): Handle ARRAY_RANGE_REF as\n+\tARRAY_REF, so have the callback called for the low bound expression.\n+\n 2006-06-23  Janis Johnson  <janis187@us.ibm.com>\n \n \t* tree.h (DECIMAL_FLOAT_TYPE_P): New."}, {"sha": "a5e7e6686b1e4c35c2329790c836a04253b23184", "filename": "gcc/gimplify.c", "status": "modified", "additions": 43, "deletions": 10, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61c25908fdbf3b6c29334ff84b30fcfaa2e29880/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61c25908fdbf3b6c29334ff84b30fcfaa2e29880/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=61c25908fdbf3b6c29334ff84b30fcfaa2e29880", "patch": "@@ -3582,6 +3582,27 @@ gimplify_variable_sized_compare (tree *expr_p)\n   return GS_OK;\n }\n \n+/*  Gimplify a comparison between two aggregate objects of integral scalar\n+    mode as a comparison between the bitwise equivalent scalar values.  */\n+\n+static enum gimplify_status\n+gimplify_scalar_mode_aggregate_compare (tree *expr_p)\n+{\n+  tree op0 = TREE_OPERAND (*expr_p, 0);\n+  tree op1 = TREE_OPERAND (*expr_p, 1);\n+\n+  tree type = TREE_TYPE (op0);\n+  tree scalar_type = lang_hooks.types.type_for_mode (TYPE_MODE (type), 1);\n+\n+  op0 = fold_build1 (VIEW_CONVERT_EXPR, scalar_type, op0);\n+  op1 = fold_build1 (VIEW_CONVERT_EXPR, scalar_type, op1);\n+\n+  *expr_p\n+    = fold_build2 (TREE_CODE (*expr_p), TREE_TYPE (*expr_p), op0, op1);\n+\n+  return GS_OK;\n+}\n+\n /*  Gimplify TRUTH_ANDIF_EXPR and TRUTH_ORIF_EXPR expressions.  EXPR_P\n     points to the expression to gimplify.\n \n@@ -5687,16 +5708,28 @@ gimplify_expr (tree *expr_p, tree *pre_p, tree *post_p,\n \t  switch (TREE_CODE_CLASS (TREE_CODE (*expr_p)))\n \t    {\n \t    case tcc_comparison:\n-\t      /* If this is a comparison of objects of aggregate type,\n-\t     \t handle it specially (by converting to a call to\n-\t     \t memcmp).  It would be nice to only have to do this\n-\t     \t for variable-sized objects, but then we'd have to\n-\t     \t allow the same nest of reference nodes we allow for\n-\t     \t MODIFY_EXPR and that's too complex.  */\n-\t      if (!AGGREGATE_TYPE_P (TREE_TYPE (TREE_OPERAND (*expr_p, 1))))\n-\t\tgoto expr_2;\n-\t      ret = gimplify_variable_sized_compare (expr_p);\n-\t      break;\n+\t      /* Handle comparison of objects of non scalar mode aggregates\n+\t     \t with a call to memcmp.  It would be nice to only have to do\n+\t     \t this for variable-sized objects, but then we'd have to allow\n+\t     \t the same nest of reference nodes we allow for MODIFY_EXPR and\n+\t     \t that's too complex.\n+\n+\t\t Compare scalar mode aggregates as scalar mode values.  Using\n+\t\t memcmp for them would be very inefficient at best, and is\n+\t\t plain wrong if bitfields are involved.  */\n+\n+\t      {\n+\t\ttree type = TREE_TYPE (TREE_OPERAND (*expr_p, 1));\n+\n+\t\tif (!AGGREGATE_TYPE_P (type))\n+\t\t  goto expr_2;\n+\t\telse if (TYPE_MODE (type) != BLKmode)\n+\t\t  ret = gimplify_scalar_mode_aggregate_compare (expr_p);\n+\t\telse\n+\t\t  ret = gimplify_variable_sized_compare (expr_p);\n+\n+\t\tbreak;\n+\t\t}\n \n \t    /* If *EXPR_P does not need to be special-cased, handle it\n \t       according to its class.  */"}, {"sha": "1c8e7c412b67d429c052eb484e1aac26a0d5ab9f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61c25908fdbf3b6c29334ff84b30fcfaa2e29880/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61c25908fdbf3b6c29334ff84b30fcfaa2e29880/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=61c25908fdbf3b6c29334ff84b30fcfaa2e29880", "patch": "@@ -1,3 +1,8 @@\n+2006-06-24  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* gnat.dg/scalar_mode_agg_compare_loop.adb: New test.\n+\t* gnat.dg/scalar_mode_agg_compare.adb: New test.\n+\t\n 2006-06-23  Janis Johnson  <janis187@us.ibm.com>\n \n \t* gcc.dg/dfp/usual-arith-conv-bad.c: New test."}, {"sha": "ff373464282b6918ca2833deceb6518a5a943d5d", "filename": "gcc/testsuite/gnat.dg/scalar_mode_agg_compare.adb", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61c25908fdbf3b6c29334ff84b30fcfaa2e29880/gcc%2Ftestsuite%2Fgnat.dg%2Fscalar_mode_agg_compare.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61c25908fdbf3b6c29334ff84b30fcfaa2e29880/gcc%2Ftestsuite%2Fgnat.dg%2Fscalar_mode_agg_compare.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fscalar_mode_agg_compare.adb?ref=61c25908fdbf3b6c29334ff84b30fcfaa2e29880", "patch": "@@ -0,0 +1,25 @@\n+-- { dg-do run }\n+\n+procedure Scalar_Mode_Agg_Compare is\n+\n+   type Point is record\n+      Mapped : Boolean;\n+      Tag    : String (1 .. 2);  -- HImode\n+   end record;\n+   pragma Pack (Point);          -- Tag possibly at bitpos 1\n+\n+   function My_Point return Point is\n+   begin\n+      return (Mapped => True, Tag => \"XX\");\n+   end;\n+\n+   A, B : Point := My_Point;\n+begin\n+   -- The comparison below should find the two Tag fields equal and not\n+   -- attempt to take their address, which might not be byte aligned.\n+\n+   if A.Tag /= B.Tag then\n+      raise Program_Error;\n+   end if;\n+end;\n+"}, {"sha": "9bafb4d29bbfe6e702663ab915c6046bc3cbc033", "filename": "gcc/testsuite/gnat.dg/scalar_mode_agg_compare_loop.adb", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61c25908fdbf3b6c29334ff84b30fcfaa2e29880/gcc%2Ftestsuite%2Fgnat.dg%2Fscalar_mode_agg_compare_loop.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61c25908fdbf3b6c29334ff84b30fcfaa2e29880/gcc%2Ftestsuite%2Fgnat.dg%2Fscalar_mode_agg_compare_loop.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fscalar_mode_agg_compare_loop.adb?ref=61c25908fdbf3b6c29334ff84b30fcfaa2e29880", "patch": "@@ -0,0 +1,18 @@\n+\n+-- { dg-do compile }\n+-- { dg-options \"-O2 -gnatp\" }\n+\n+function Scalar_Mode_Agg_Compare_Loop return Boolean is\n+   S : constant String (1 .. 4) := \"ABCD\";\n+   F : constant Natural := S'First;\n+   L : constant Natural := S'Last;\n+begin\n+   for J in F .. L - 1 loop\n+      if S (F .. F) = \"X\" or (J <= L - 2 and S (J .. J + 1) = \"YY\") then\n+         return True;\n+      end if;\n+   end loop;\n+\n+   return False;\n+end;\n+"}, {"sha": "db9f42f698794f4df855a4a691cbb764c6144397", "filename": "gcc/tree-ssa-loop-im.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61c25908fdbf3b6c29334ff84b30fcfaa2e29880/gcc%2Ftree-ssa-loop-im.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61c25908fdbf3b6c29334ff84b30fcfaa2e29880/gcc%2Ftree-ssa-loop-im.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-im.c?ref=61c25908fdbf3b6c29334ff84b30fcfaa2e29880", "patch": "@@ -174,7 +174,6 @@ for_each_index (tree *addr_p, bool (*cbck) (tree, tree *, void *), void *data)\n \n \tcase BIT_FIELD_REF:\n \tcase VIEW_CONVERT_EXPR:\n-\tcase ARRAY_RANGE_REF:\n \tcase REALPART_EXPR:\n \tcase IMAGPART_EXPR:\n \t  nxt = &TREE_OPERAND (*addr_p, 0);\n@@ -192,6 +191,7 @@ for_each_index (tree *addr_p, bool (*cbck) (tree, tree *, void *), void *data)\n \t  break;\n \n \tcase ARRAY_REF:\n+\tcase ARRAY_RANGE_REF:\n \t  nxt = &TREE_OPERAND (*addr_p, 0);\n \t  if (!cbck (*addr_p, &TREE_OPERAND (*addr_p, 1), data))\n \t    return false;"}]}