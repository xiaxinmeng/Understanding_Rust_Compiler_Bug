{"sha": "667c8e33270e267c764202021c350ef2d5d861e7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjY3YzhlMzMyNzBlMjY3Yzc2NDIwMjAyMWMzNTBlZjJkNWQ4NjFlNw==", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@adacore.com", "date": "2021-01-26T00:45:58Z"}, "committer": {"name": "Alexandre Oliva", "email": "oliva@gnu.org", "date": "2021-01-26T00:45:58Z"}, "message": "skip asan-poisoning of discarded vars\n\nGNAT may create temporaries to hold return values of function calls.\nIf such a temporary is created as part of a dynamic initializer of a\nvariable in a unit other than the one being compiled, the initializer\nis dropped, including the temporary and its binding block.\n\nDon't issue asan mark calls for such variables, they are gone.\n\n\nfor  gcc/ChangeLog\n\n\t* gimplify.c (gimplify_decl_expr): Skip asan marking calls for\n\ttemporaries not seen in binding block, and not about to be\n\tadded as gimple variables.\n\nfor  gcc/testsuite/ChangeLog\n\n\t* gnat.dg/asan1.adb: New test.\n\t* gnat.dg/asan1_pkg.ads: New additional source.", "tree": {"sha": "9911d7823455842fe04e5055e45d1a7139e6e9f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9911d7823455842fe04e5055e45d1a7139e6e9f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/667c8e33270e267c764202021c350ef2d5d861e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/667c8e33270e267c764202021c350ef2d5d861e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/667c8e33270e267c764202021c350ef2d5d861e7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/667c8e33270e267c764202021c350ef2d5d861e7/comments", "author": null, "committer": null, "parents": [{"sha": "161e4c08624e2ff9f0db8f8c6ac201af6277b6aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/161e4c08624e2ff9f0db8f8c6ac201af6277b6aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/161e4c08624e2ff9f0db8f8c6ac201af6277b6aa"}], "stats": {"total": 32, "additions": 31, "deletions": 1}, "files": [{"sha": "95d55bb8ba4c78d8c3e42062923c6065f1731fcf", "filename": "gcc/gimplify.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/667c8e33270e267c764202021c350ef2d5d861e7/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/667c8e33270e267c764202021c350ef2d5d861e7/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=667c8e33270e267c764202021c350ef2d5d861e7", "patch": "@@ -1795,7 +1795,13 @@ gimplify_decl_expr (tree *stmt_p, gimple_seq *seq_p)\n \t  && !DECL_HAS_VALUE_EXPR_P (decl)\n \t  && DECL_ALIGN (decl) <= MAX_SUPPORTED_STACK_ALIGNMENT\n \t  && dbg_cnt (asan_use_after_scope)\n-\t  && !gimplify_omp_ctxp)\n+\t  && !gimplify_omp_ctxp\n+\t  /* GNAT introduces temporaries to hold return values of calls in\n+\t     initializers of variables defined in other units, so the\n+\t     declaration of the variable is discarded completely.  We do not\n+\t     want to issue poison calls for such dropped variables.  */\n+\t  && (DECL_SEEN_IN_BIND_EXPR_P (decl)\n+\t      || (DECL_ARTIFICIAL (decl) && DECL_NAME (decl) == NULL_TREE)))\n \t{\n \t  asan_poisoned_variables->add (decl);\n \t  asan_poison_variable (decl, false, seq_p);"}, {"sha": "a4bc59a9a21431bd7e376cea096bb252a2171af9", "filename": "gcc/testsuite/gnat.dg/asan1.adb", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/667c8e33270e267c764202021c350ef2d5d861e7/gcc%2Ftestsuite%2Fgnat.dg%2Fasan1.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/667c8e33270e267c764202021c350ef2d5d861e7/gcc%2Ftestsuite%2Fgnat.dg%2Fasan1.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fasan1.adb?ref=667c8e33270e267c764202021c350ef2d5d861e7", "patch": "@@ -0,0 +1,15 @@\n+--  { dg-do compile }\n+--  { dg-additional-sources asan1_pkg.ads }\n+--  { dg-options \"-fsanitize=address\" }\n+--  { dg-skip-if \"\" no_fsanitize_address }\n+\n+with Asan1_Pkg;\n+\n+procedure Asan1 is\n+   use Asan1_Pkg;\n+\n+   X, Y : E;\n+begin\n+   X := C (N);\n+   Y := V;\n+end Asan1;"}, {"sha": "fbbc1c5e7f5bdcb3f7993a50c048138f3b691bfc", "filename": "gcc/testsuite/gnat.dg/asan1_pkg.ads", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/667c8e33270e267c764202021c350ef2d5d861e7/gcc%2Ftestsuite%2Fgnat.dg%2Fasan1_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/667c8e33270e267c764202021c350ef2d5d861e7/gcc%2Ftestsuite%2Fgnat.dg%2Fasan1_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fasan1_pkg.ads?ref=667c8e33270e267c764202021c350ef2d5d861e7", "patch": "@@ -0,0 +1,9 @@\n+package Asan1_Pkg is\n+   subtype E is Integer;\n+   type T is array (1..32) of E;\n+\n+   function N return T;\n+   function C (P : T) return E;\n+\n+   V : constant E := C (N);\n+end Asan1_Pkg;"}]}