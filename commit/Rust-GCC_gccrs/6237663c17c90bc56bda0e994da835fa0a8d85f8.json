{"sha": "6237663c17c90bc56bda0e994da835fa0a8d85f8", "node_id": "C_kwDOANBUbNoAKDYyMzc2NjNjMTdjOTBiYzU2YmRhMGU5OTRkYTgzNWZhMGE4ZDg1Zjg", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-10-18T00:17:40Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-10-18T00:17:40Z"}, "message": "Daily bump.", "tree": {"sha": "25a23c9bae40496470a5978556db3eca83087b15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25a23c9bae40496470a5978556db3eca83087b15"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6237663c17c90bc56bda0e994da835fa0a8d85f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6237663c17c90bc56bda0e994da835fa0a8d85f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6237663c17c90bc56bda0e994da835fa0a8d85f8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6237663c17c90bc56bda0e994da835fa0a8d85f8/comments", "author": null, "committer": null, "parents": [{"sha": "4374c424a60777a7658050f0aeb1dcc9af915647", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4374c424a60777a7658050f0aeb1dcc9af915647", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4374c424a60777a7658050f0aeb1dcc9af915647"}], "stats": {"total": 328, "additions": 327, "deletions": 1}, "files": [{"sha": "8c0ce0aa2cf4c3133656942a7e7c2e4b2b6dd10b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 179, "deletions": 0, "changes": 179, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6237663c17c90bc56bda0e994da835fa0a8d85f8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6237663c17c90bc56bda0e994da835fa0a8d85f8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6237663c17c90bc56bda0e994da835fa0a8d85f8", "patch": "@@ -1,3 +1,182 @@\n+2022-10-17  Jeff Law  <jeffreyalaw@gmail.com>\n+\n+\tPR target/101697\n+\t* config/h8300/combiner.md: Replace '<' preincment constraint with\n+\tZA/Z1..ZH/Z7 combinations.\n+\t* config/h8300/movepush.md: Similarly\n+\n+2022-10-17  Jeff Law  <jeffreyalaw@gmail.com>\n+\n+\t* config/h8300/constraints.md (Za..Zh): New constraints for\n+\tautoinc addresses using a specific register.\n+\t* config/h8300/h8300.cc (pre_incdec_with_reg): New function.\n+\t* config/h8300/h8300-protos.h (pre_incdec_with_reg): Add prototype.\n+\n+2022-10-17  Jeff Law  <jlaw@ventanamicro.com>\n+\n+\t* config/i386/cet.c: Remove accidental commit.\n+\t* config/i386/driver-mingw32.c: Likewise.\n+\t* config/i386/i386-builtins.c: Likewise.\n+\t* config/i386/i386-d.c:  Likewise.\n+\t* config/i386/i386-expand.c: Likewise.\n+\t* config/i386/i386-features.c: Likewise.\n+\t* config/i386/i386-options.c: Likewise.\n+\t* config/i386/t-cet: Likewise.\n+\t* config/i386/x86-tune-sched-atom.c: Likewise.\n+\t* config/i386/x86-tune-sched-bd.c: Likewise.\n+\t* config/i386/x86-tune-sched-core.c: Likewise.\n+\t* config/i386/x86-tune-sched.c: Likewise.\n+\n+2022-10-17  Jeff Law  <jeffreyalaw@gmail.com>\n+\n+\t* common/config/h8300/h8300-common.cc (h8300_option_optimization_table):\n+\tEnable redundant extension elimination at -O2 and above.\n+\t* config/i386/cet.c: New file.\n+\t* config/i386/driver-mingw32.c: New file.\n+\t* config/i386/i386-builtins.c: New file.\n+\t* config/i386/i386-d.c: New file.\n+\t* config/i386/i386-expand.c: New file.\n+\t* config/i386/i386-features.c: New file.\n+\t* config/i386/i386-options.c: New file.\n+\t* config/i386/t-cet: New file.\n+\t* config/i386/x86-tune-sched-atom.c: New file.\n+\t* config/i386/x86-tune-sched-bd.c: New file.\n+\t* config/i386/x86-tune-sched-core.c: New file.\n+\t* config/i386/x86-tune-sched.c: New file.\n+\n+2022-10-17  Jeff Law  <jeffreyalaw@gmail.com>\n+\n+\t* config/h8300/extensions.md (CCZN setting zero extended load): Add\n+\tmissing splitter.\n+\n+2022-10-17  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/107293\n+\t* tree-ssa-dom.cc\n+\t(dom_opt_dom_walker::set_global_ranges_from_unreachable_edges):\n+\tCheck that condition post-dominates the definition point.\n+\n+2022-10-17  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/107286\n+\t* value-range.cc (range_tests_floats): Do not test for -Inf when\n+\tflag_finite_math_only.\n+\n+2022-10-17  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gimple-range-fold.cc (fold_using_range::range_of_range_op):\n+\tProvide relation_trio class.\n+\t* gimple-range-gori.cc (gori_compute::refine_using_relation):\n+\tProvide relation_trio class.\n+\t(gori_compute::refine_using_relation): Ditto.\n+\t(gori_compute::compute_operand1_range): Provide lhs_op2 and\n+\top1_op2 relations via relation_trio class.\n+\t(gori_compute::compute_operand2_range): Ditto.\n+\t* gimple-range-op.cc (gimple_range_op_handler::calc_op1): Use\n+\trelation_trio instead of relation_kind.\n+\t(gimple_range_op_handler::calc_op2): Ditto.\n+\t(*::fold_range): Ditto.\n+\t* gimple-range-op.h (gimple_range_op::calc_op1): Adjust prototypes.\n+\t(gimple_range_op::calc_op2): Adjust prototypes.\n+\t* range-op-float.cc (*::fold_range): Use relation_trio instead of\n+\trelation_kind.\n+\t(*::op1_range): Ditto.\n+\t(*::op2_range): Ditto.\n+\t* range-op.cc (*::fold_range): Use relation_trio instead of\n+\trelation_kind.\n+\t(*::op1_range): Ditto.\n+\t(*::op2_range): Ditto.\n+\t* range-op.h (class range_operator): Adjust prototypes.\n+\t(class range_operator_float): Ditto.\n+\t(class range_op_handler): Adjust prototypes.\n+\t(relop_early_resolve): Pickup op1_op2 relation from relation_trio.\n+\t* value-relation.cc (VREL_LAST): Adjust use to be one past the end of\n+\tthe enum.\n+\t(relation_oracle::validate_relation): Use relation_trio in call\n+\tto fold_range.\n+\t* value-relation.h (enum relation_kind_t): Add VREL_LAST as\n+\tfinal element.\n+\t(class relation_trio): New.\n+\t(TRIO_VARYING, TRIO_SHIFT, TRIO_MASK): New.\n+\n+2022-10-17  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* range-op-float.cc (foperator_not_equal::op1_range): Check for\n+\tVREL_EQ after singleton.\n+\t(foperator_unordered::op1_range): Set VARYING before calling\n+\tclear_nan().\n+\t(foperator_ordered::op1_range): Set rather than clear NAN if both\n+\toperands are the same.\n+\n+2022-10-17  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* value-relation.cc (value_relation::dump): Change message.\n+\t* value-relation.h (value_relation::set_relation): If op1 is the\n+\tsame as op2 do not create a relation.\n+\n+2022-10-17  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* config/gcn/gcn.cc (VnMODE): Use 'case E_QImode:' instead of\n+\t'case QImode:', etc.\n+\n+2022-10-17  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* gimple-expr.cc (mark_addressable_2): Tag as 'static'.\n+\n+2022-10-17  Richard Biener  <rguenther@suse.de>\n+\t    Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\tPR tree-optimization/99409\n+\tPR tree-optimization/99394\n+\t* tree-vectorizer.h (vect_def_type::vect_first_order_recurrence): Add.\n+\t(stmt_vec_info_type::recurr_info_type): Likewise.\n+\t(vectorizable_recurr): New function.\n+\t* tree-vect-loop.cc (vect_phi_first_order_recurrence_p): New\n+\tfunction.\n+\t(vect_analyze_scalar_cycles_1): Look for first order\n+\trecurrences.\n+\t(vect_analyze_loop_operations): Handle them.\n+\t(vect_transform_loop): Likewise.\n+\t(vectorizable_recurr): New function.\n+\t(maybe_set_vectorized_backedge_value): Handle the backedge value\n+\tsetting in the first order recurrence PHI and the permutes.\n+\t* tree-vect-stmts.cc (vect_analyze_stmt): Handle first order\n+\trecurrences.\n+\t(vect_transform_stmt): Likewise.\n+\t(vect_is_simple_use): Likewise.\n+\t(vect_is_simple_use): Likewise.\n+\t* tree-vect-slp.cc (vect_get_and_check_slp_defs): Likewise.\n+\t(vect_build_slp_tree_2): Likewise.\n+\t(vect_schedule_scc): Handle the backedge value setting in the\n+\tfirst order recurrence PHI and the permutes.\n+\n+2022-10-17  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* config/riscv/t-riscv: Change Tab into 2 space.\n+\n+2022-10-17  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* config/riscv/riscv-vector-builtins.cc (mangle_builtin_type): Move down the function.\n+\n+2022-10-17  Arsen Arsenovic  <arsen@aarsen.me>\n+\n+\t* config.gcc: --target=*-elf --without-{newlib,headers} should\n+\tprovide stdint.h.\n+\n+2022-10-17  Hu, Lin1  <lin1.hu@intel.com>\n+\n+\t* common/config/i386/cpuinfo.h:\n+\t(get_intel_cpu): Handle Meteorlake.\n+\t* common/config/i386/i386-common.cc:\n+\t(processor_alias_table): Add Meteorlake.\n+\n+2022-10-17  Haochen Jiang  <haochen.jiang@intel.com>\n+\n+\t* common/config/i386/cpuinfo.h:\n+\t(get_intel_cpu): Handle Raptorlake.\n+\t* common/config/i386/i386-common.cc:\n+\t(processor_alias_table): Add Raptorlake.\n+\n 2022-10-16  Jeff Law  <jeffreyalaw@gmail.com>\n \n \t* config/h8300/constraints.md (Z0..Z7): New register"}, {"sha": "e1b70eb75bfda5ea317bd88263f1887df25dc3d8", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6237663c17c90bc56bda0e994da835fa0a8d85f8/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6237663c17c90bc56bda0e994da835fa0a8d85f8/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=6237663c17c90bc56bda0e994da835fa0a8d85f8", "patch": "@@ -1 +1 @@\n-20221017\n+20221018"}, {"sha": "19f923a4fec4b96462d33d4d94dd02f296c380e3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6237663c17c90bc56bda0e994da835fa0a8d85f8/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6237663c17c90bc56bda0e994da835fa0a8d85f8/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6237663c17c90bc56bda0e994da835fa0a8d85f8", "patch": "@@ -1,3 +1,10 @@\n+2022-10-17  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/101449\n+\t* module.cc (trees_out::write_function_def): Stream the\n+\tparms and result of the constexpr_fundef entry.\n+\t(trees_in::read_function_def): Likewise.\n+\n 2022-10-14  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/106304"}, {"sha": "80f12c6e1443474005b1f6ad306bd142c02dfdd8", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6237663c17c90bc56bda0e994da835fa0a8d85f8/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6237663c17c90bc56bda0e994da835fa0a8d85f8/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=6237663c17c90bc56bda0e994da835fa0a8d85f8", "patch": "@@ -1,3 +1,51 @@\n+2022-10-17  Steve Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/104330\n+\t* simplify.cc (gfc_simplify_image_index): Do not dereference NULL\n+\tpointer.\n+\n+2022-10-17  Harald Anlauf  <anlauf@gmx.de>\n+\t    Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\tPR fortran/93483\n+\tPR fortran/107216\n+\tPR fortran/107219\n+\t* arith.cc (reduce_unary): Handled expressions are EXP_CONSTANT and\n+\tEXPR_ARRAY.  Do not attempt to reduce otherwise.\n+\t(reduce_binary_ac): Likewise.\n+\t(reduce_binary_ca): Likewise.\n+\t(reduce_binary_aa): Moved check for EXP_CONSTANT and EXPR_ARRAY\n+\tfrom here ...\n+\t(reduce_binary): ... to here.\n+\t(eval_intrinsic): Catch failed reductions.\n+\t* gfortran.h (GFC_INTRINSIC_OPS): New enum ARITH_NOT_REDUCED to keep\n+\ttrack of expressions that were not reduced by the arithmetic evaluation\n+\tcode.\n+\n+2022-10-17  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/107272\n+\t* arith.cc (gfc_arith_not): Operand must be of type BT_LOGICAL.\n+\t(gfc_arith_and): Likewise.\n+\t(gfc_arith_or): Likewise.\n+\t(gfc_arith_eqv): Likewise.\n+\t(gfc_arith_neqv): Likewise.\n+\t(gfc_arith_eq): Compare consistency of types of operands.\n+\t(gfc_arith_ne): Likewise.\n+\t(gfc_arith_gt): Likewise.\n+\t(gfc_arith_ge): Likewise.\n+\t(gfc_arith_lt): Likewise.\n+\t(gfc_arith_le): Likewise.\n+\n+2022-10-17  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/107266\n+\t* trans-expr.cc (gfc_conv_string_parameter): Use passed\n+\ttype to honor character kind.\n+\t* trans-types.cc (gfc_sym_type): Honor character kind.\n+\t* trans-decl.cc (gfc_conv_cfi_to_gfc): Fix handling kind=4\n+\tcharacter strings.\n+\n 2022-10-14  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/100971"}, {"sha": "7aa621e35d40eb5ef1ac683c87522ed16137e43d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6237663c17c90bc56bda0e994da835fa0a8d85f8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6237663c17c90bc56bda0e994da835fa0a8d85f8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6237663c17c90bc56bda0e994da835fa0a8d85f8", "patch": "@@ -1,3 +1,65 @@\n+2022-10-17  Steve Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/104330\n+\t* gfortran.dg/pr104330.f90: New test.\n+\n+2022-10-17  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/107293\n+\t* gcc.dg/tree-ssa/pr107293.c: New test.\n+\n+2022-10-17  Harald Anlauf  <anlauf@gmx.de>\n+\t    Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\tPR fortran/93483\n+\tPR fortran/107216\n+\tPR fortran/107219\n+\t* gfortran.dg/array_constructor_56.f90: New test.\n+\t* gfortran.dg/array_constructor_57.f90: New test.\n+\n+2022-10-17  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/107272\n+\t* gfortran.dg/pr107272.f90: New test.\n+\n+2022-10-17  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/107266\n+\t* gfortran.dg/char4_decl.f90: New test.\n+\t* gfortran.dg/char4_decl-2.f90: New test.\n+\n+2022-10-17  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/101449\n+\t* g++.dg/modules/cexpr-3_a.C: New test.\n+\t* g++.dg/modules/cexpr-3_b.C: New test.\n+\n+2022-10-17  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/105820\n+\t* g++.dg/tree-ssa/pr105820.c: New test.\n+\n+2022-10-17  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gcc.dg/tree-ssa/vrp-float-3a.c: New.\n+\t* gcc.dg/tree-ssa/vrp-float-4a.c: New.\n+\t* gcc.dg/tree-ssa/vrp-float-5a.c: New.\n+\n+2022-10-17  Richard Biener  <rguenther@suse.de>\n+\t    Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\tPR tree-optimization/99409\n+\tPR tree-optimization/99394\n+\t* gcc.dg/vect/vect-recurr-1.c: New testcase.\n+\t* gcc.dg/vect/vect-recurr-2.c: Likewise.\n+\t* gcc.dg/vect/vect-recurr-3.c: Likewise.\n+\t* gcc.dg/vect/vect-recurr-4.c: Likewise.\n+\t* gcc.dg/vect/vect-recurr-5.c: Likewise.\n+\t* gcc.dg/vect/vect-recurr-6.c: Likewise.\n+\t* gcc.dg/vect/tsvc/vect-tsvc-s252.c: Un-XFAIL.\n+\t* gcc.dg/vect/tsvc/vect-tsvc-s254.c: Likewise.\n+\t* gcc.dg/vect/tsvc/vect-tsvc-s291.c: Likewise.\n+\n 2022-10-14  Joseph Myers  <joseph@codesourcery.com>\n \n \t* gcc.dg/cpp/c2x-ucnid-1-utf8.c, gcc.dg/cpp/c2x-ucnid-1.c: New"}, {"sha": "ba2bedb14c270992c6adeb38827f44a6544a2385", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6237663c17c90bc56bda0e994da835fa0a8d85f8/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6237663c17c90bc56bda0e994da835fa0a8d85f8/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=6237663c17c90bc56bda0e994da835fa0a8d85f8", "patch": "@@ -1,3 +1,20 @@\n+2022-10-17  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\t* unwind-generic.h (_Unwind_Frames_Increment): Add the EXC\n+\targument.\n+\t* unwind.inc (_Unwind_RaiseException_Phase2): Pass EXC to\n+\t_Unwind_Frames_Increment.\n+\t(_Unwind_ForcedUnwind_Phase2): Likewise.\n+\t* config/i386/shadow-stack-unwind.h (_Unwind_Frames_Increment):\n+\tTake the EXC argument.  Return _URC_FATAL_PHASE2_ERROR if the\n+\treturn address on normal stack doesn't match the return address\n+\ton shadow stack.\n+\n+2022-10-17  Florian Weimer  <fweimer@redhat.com>\n+\n+\t* unwind-dw2.h (struct frame_state_reg_info): Move cfa_how member\n+\tand reduce its size.\n+\n 2022-10-14  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/i386/t-softfp (softfp_extensions): Add bfsf."}, {"sha": "d7d8b4e713d1d7e4c7c7d54590ae80ae79157ba8", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6237663c17c90bc56bda0e994da835fa0a8d85f8/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6237663c17c90bc56bda0e994da835fa0a8d85f8/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=6237663c17c90bc56bda0e994da835fa0a8d85f8", "patch": "@@ -1,3 +1,8 @@\n+2022-10-17  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* testsuite/libgomp.c/reverse-offload-sm30.c: Fix nvptx-specific\n+\t'-foffload-options' syntax.\n+\n 2022-10-13  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* testsuite/libgomp.fortran/task-7.f90: New test."}, {"sha": "804a8ac6149ff3af8a37e011f62d06d49d7b9dde", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6237663c17c90bc56bda0e994da835fa0a8d85f8/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6237663c17c90bc56bda0e994da835fa0a8d85f8/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6237663c17c90bc56bda0e994da835fa0a8d85f8", "patch": "@@ -1,3 +1,11 @@\n+2022-10-17  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/charconv (__cpp_lib_constexpr_charconv): Define to\n+\tcorrect value.\n+\t* include/std/version (__cpp_lib_constexpr_charconv): Likewise.\n+\t* testsuite/20_util/to_chars/constexpr.cc: Check correct value.\n+\t* testsuite/20_util/to_chars/version.cc: Likewise.\n+\n 2022-10-15  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* src/c++11/debug.cc (print_raw): Move inside #if block."}]}