{"sha": "0f2da02b2373078e96bb44fe83f5b7fd303414a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGYyZGEwMmIyMzczMDc4ZTk2YmI0NGZlODNmNWI3ZmQzMDM0MTRhNg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-12-08T12:59:09Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-12-08T13:07:30Z"}, "message": "c++: Add module includes\n\n\tgcc/cp/\n\t* Make-lang.in (MODULE_VERSION): Define.\n\t* module.cc: Add includes.", "tree": {"sha": "1a0e01d672f1668ac720a28a2aa95647d3af6519", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a0e01d672f1668ac720a28a2aa95647d3af6519"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f2da02b2373078e96bb44fe83f5b7fd303414a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f2da02b2373078e96bb44fe83f5b7fd303414a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f2da02b2373078e96bb44fe83f5b7fd303414a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f2da02b2373078e96bb44fe83f5b7fd303414a6/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a789a9e2dfcb6de4ce12b6035c954f346914f53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a789a9e2dfcb6de4ce12b6035c954f346914f53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a789a9e2dfcb6de4ce12b6035c954f346914f53"}], "stats": {"total": 56, "additions": 55, "deletions": 1}, "files": [{"sha": "d7dc0dec2b815b4a64aea21f4b2dbd524b96baf5", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f2da02b2373078e96bb44fe83f5b7fd303414a6/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f2da02b2373078e96bb44fe83f5b7fd303414a6/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=0f2da02b2373078e96bb44fe83f5b7fd303414a6", "patch": "@@ -57,6 +57,15 @@ CFLAGS-cp/g++spec.o += $(DRIVER_DEFINES)\n CFLAGS-cp/module.o += -DHOST_MACHINE=\\\"$(host)\\\" \\\n \t-DTARGET_MACHINE=\\\"$(target)\\\"\n \n+ifeq ($(DEVPHASE_c),experimental)\n+# Some date's don't grok 'r', if so, simply use today's\n+# date (don't bootstrap at midnight).\n+MODULE_VERSION := $(shell date -r $(srcdir)/cp/module.cc '+%y%m%d-%H%M' \\\n+  2>/dev/null || date '+%y%m%d-0000' 2>/dev/null || echo 0)\n+\n+CFLAGS-cp/module.o += -DMODULE_VERSION='($(subst -,,$(MODULE_VERSION))U)'\n+endif\n+\n # Create the compiler driver for g++.\n GXX_OBJS = $(GCC_OBJS) cp/g++spec.o\n xg++$(exeext): $(GXX_OBJS) $(EXTRA_GCC_OBJS) libcommon-target.a $(LIBDEPS)"}, {"sha": "f250d6c18197978daaeb4d47a6fa3605cccce20d", "filename": "gcc/cp/module.cc", "status": "modified", "additions": 46, "deletions": 1, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f2da02b2373078e96bb44fe83f5b7fd303414a6/gcc%2Fcp%2Fmodule.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f2da02b2373078e96bb44fe83f5b7fd303414a6/gcc%2Fcp%2Fmodule.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmodule.cc?ref=0f2da02b2373078e96bb44fe83f5b7fd303414a6", "patch": "@@ -18,4 +18,49 @@ You should have received a copy of the GNU General Public License\n along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n-/* This file intentionally left empty.  */\n+/* This file intentionally left empty of all but barest minium.  */\n+\n+/* In expermental (trunk) sources, MODULE_VERSION is a #define passed\n+   in from the Makefile.  It records the modification date of the\n+   source directory -- that's the only way to stay sane.  In release\n+   sources, we (plan to) use the compiler's major.minor versioning.\n+   While the format might not change between at minor versions, it\n+   seems simplest to tie the two together.  There's no concept of\n+   inter-version compatibility.  */\n+#define IS_EXPERIMENTAL(V) ((V) >= (1U << 20))\n+#define MODULE_MAJOR(V) ((V) / 10000)\n+#define MODULE_MINOR(V) ((V) % 10000)\n+#define EXPERIMENT(A,B) (IS_EXPERIMENTAL (MODULE_VERSION) ? (A) : (B))\n+#ifndef MODULE_VERSION\n+#error \"Shtopp! What are you doing? This is not ready yet.\"\n+#include \"bversion.h\"\n+#define MODULE_VERSION (BUILDING_GCC_MAJOR * 10000U + BUILDING_GCC_MINOR)\n+#elif !IS_EXPERIMENTAL (MODULE_VERSION)\n+#error \"This is not the version I was looking for.\"\n+#endif\n+\n+#define _DEFAULT_SOURCE 1 /* To get TZ field of struct tm, if available.  */\n+#include \"config.h\"\n+\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"cp-tree.h\"\n+#include \"timevar.h\"\n+#include \"stringpool.h\"\n+#include \"dumpfile.h\"\n+#include \"bitmap.h\"\n+#include \"cgraph.h\"\n+#include \"tree-iterator.h\"\n+#include \"cpplib.h\"\n+#include \"mkdeps.h\"\n+#include \"incpath.h\"\n+#include \"libiberty.h\"\n+#include \"stor-layout.h\"\n+#include \"version.h\"\n+#include \"tree-diagnostic.h\"\n+#include \"toplev.h\"\n+#include \"opts.h\"\n+#include \"attribs.h\"\n+#include \"intl.h\"\n+#include \"langhooks.h\"\n+"}]}