{"sha": "58082ff61616ea33c317d9e9058dd8e644d04274", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTgwODJmZjYxNjE2ZWEzM2MzMTdkOWU5MDU4ZGQ4ZTY0NGQwNDI3NA==", "commit": {"author": {"name": "Pat Haugen", "email": "pthaugen@us.ibm.com", "date": "2010-11-04T20:25:27Z"}, "committer": {"name": "Pat Haugen", "email": "pthaugen@gcc.gnu.org", "date": "2010-11-04T20:25:27Z"}, "message": "final.c (compute_alignments): Compute/free loop info all the time.\n\n\t* final.c (compute_alignments): Compute/free loop info all the time.\n\t* config/rs6000/rs6000.h (LOOP_ALIGN): Define.\n\t* config/rs6000/rs6000-protos.h (rs6000_loop_align): Declare.\n\t* config/rs6000/t-rs6000 (rs6000.o): Add cfgloop.h.\n\t* config/rs6000/rs6000.c (cfgloop.h): Include.\n\t(can_override_loop_align): New.\n\t(rs6000_option_override_internal): Set it.\n\t(TARGET_ASM_LOOP_ALIGN_MAX_SKIP): Define target hook.\n\t(rs6000_loop_align): New function.\n\t(rs6000_loop_align_max_skip): Likewise.\n\n\t* gcc.target/powerpc/loop_align.c: New.\n\nFrom-SVN: r166329", "tree": {"sha": "748c90db605a751d3b25783b502e36deeaa2f00c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/748c90db605a751d3b25783b502e36deeaa2f00c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58082ff61616ea33c317d9e9058dd8e644d04274", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58082ff61616ea33c317d9e9058dd8e644d04274", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58082ff61616ea33c317d9e9058dd8e644d04274", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58082ff61616ea33c317d9e9058dd8e644d04274/comments", "author": null, "committer": null, "parents": [{"sha": "8f7d7498c7988c3f51966db84fb20be4687f86ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f7d7498c7988c3f51966db84fb20be4687f86ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f7d7498c7988c3f51966db84fb20be4687f86ff"}], "stats": {"total": 87, "additions": 79, "deletions": 8}, "files": [{"sha": "cf794dbd83b815ad7a750519a725f9034a1fc11d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58082ff61616ea33c317d9e9058dd8e644d04274/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58082ff61616ea33c317d9e9058dd8e644d04274/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=58082ff61616ea33c317d9e9058dd8e644d04274", "patch": "@@ -1,3 +1,16 @@\n+2010-11-04  Pat Haugen  <pthaugen@us.ibm.com>\n+\n+\t* final.c (compute_alignments): Compute/free loop info all the time.\n+\t* config/rs6000/rs6000.h (LOOP_ALIGN): Define.\n+\t* config/rs6000/rs6000-protos.h (rs6000_loop_align): Declare.\n+\t* config/rs6000/t-rs6000 (rs6000.o): Add cfgloop.h.\n+\t* config/rs6000/rs6000.c (cfgloop.h): Include.\n+\t(can_override_loop_align): New.\n+\t(rs6000_option_override_internal): Set it.\n+\t(TARGET_ASM_LOOP_ALIGN_MAX_SKIP): Define target hook.\n+\t(rs6000_loop_align): New function.\n+\t(rs6000_loop_align_max_skip): Likewise.\n+\n 2010-11-04  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n \n \tPR driver/45703"}, {"sha": "937f95bfa5f099d7ad5e3e7cf70e2d7c11e85d6a", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58082ff61616ea33c317d9e9058dd8e644d04274/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58082ff61616ea33c317d9e9058dd8e644d04274/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=58082ff61616ea33c317d9e9058dd8e644d04274", "patch": "@@ -131,6 +131,7 @@ extern rtx rs6000_machopic_legitimize_pic_address (rtx, enum machine_mode,\n extern rtx rs6000_address_for_fpconvert (rtx);\n extern rtx rs6000_allocate_stack_temp (enum machine_mode, bool, bool);\n extern void rs6000_expand_convert_si_to_sfdf (rtx, rtx, bool);\n+extern int rs6000_loop_align (rtx);\n #endif /* RTX_CODE */\n \n #ifdef TREE_CODE"}, {"sha": "854f6d00f8837fd47f96a2b501a78bdd1346b314", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 44, "deletions": 1, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58082ff61616ea33c317d9e9058dd8e644d04274/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58082ff61616ea33c317d9e9058dd8e644d04274/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=58082ff61616ea33c317d9e9058dd8e644d04274", "patch": "@@ -51,6 +51,7 @@\n #include \"langhooks.h\"\n #include \"reload.h\"\n #include \"cfglayout.h\"\n+#include \"cfgloop.h\"\n #include \"sched-int.h\"\n #include \"gimple.h\"\n #include \"tree-flow.h\"\n@@ -156,6 +157,9 @@ static GTY(()) bool rs6000_sched_groups;\n /* Align branch targets.  */\n static GTY(()) bool rs6000_align_branch_targets;\n \n+/* Non-zero to allow overriding loop alignment. */\n+static int can_override_loop_align = 0;\n+\n /* Support for -msched-costly-dep option.  */\n const char *rs6000_sched_costly_dep_str;\n enum rs6000_dependence_cost rs6000_sched_costly_dep;\n@@ -1140,6 +1144,7 @@ static void rs6000_option_override (void);\n static void rs6000_option_init_struct (struct gcc_options *);\n static void rs6000_option_default_params (void);\n static bool rs6000_handle_option (size_t, const char *, int);\n+static int rs6000_loop_align_max_skip (rtx);\n static void rs6000_parse_tls_size_option (void);\n static void rs6000_parse_yes_no_option (const char *, const char *, int *);\n static int first_altivec_reg_to_save (void);\n@@ -1607,6 +1612,9 @@ static const struct default_options rs6000_option_optimization_table[] =\n #undef TARGET_HANDLE_OPTION\n #define TARGET_HANDLE_OPTION rs6000_handle_option\n \n+#undef TARGET_ASM_LOOP_ALIGN_MAX_SKIP\n+#define TARGET_ASM_LOOP_ALIGN_MAX_SKIP rs6000_loop_align_max_skip\n+\n #undef TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE rs6000_option_override\n \n@@ -3026,7 +3034,10 @@ rs6000_option_override_internal (const char *default_cpu)\n \t  if (align_jumps <= 0)\n \t    align_jumps = 16;\n \t  if (align_loops <= 0)\n-\t    align_loops = 16;\n+\t    {\n+\t      can_override_loop_align = 1;\n+\t      align_loops = 16;\n+\t    }\n \t}\n       if (align_jumps_max_skip <= 0)\n \talign_jumps_max_skip = 15;\n@@ -3271,6 +3282,38 @@ rs6000_builtin_mask_for_load (void)\n     return 0;\n }\n \n+/* Implement LOOP_ALIGN. */\n+int\n+rs6000_loop_align (rtx label)\n+{\n+  basic_block bb;\n+  int ninsns;\n+\n+  /* Don't override loop alignment if -falign-loops was specified. */\n+  if (!can_override_loop_align)\n+    return align_loops_log;\n+\n+  bb = BLOCK_FOR_INSN (label);\n+  ninsns = num_loop_insns(bb->loop_father);\n+\n+  /* Align small loops to 32 bytes to fit in an icache sector, otherwise return default. */\n+  if (ninsns > 4 && ninsns <= 8\n+      && (rs6000_cpu == PROCESSOR_POWER4\n+\t  || rs6000_cpu == PROCESSOR_POWER5\n+\t  || rs6000_cpu == PROCESSOR_POWER6\n+\t  || rs6000_cpu == PROCESSOR_POWER7))\n+    return 5;\n+  else\n+    return align_loops_log;\n+}\n+\n+/* Implement TARGET_LOOP_ALIGN_MAX_SKIP. */\n+static int\n+rs6000_loop_align_max_skip (rtx label)\n+{\n+  return (1 << rs6000_loop_align (label)) - 1;\n+}\n+\n /* Implement targetm.vectorize.builtin_conversion.\n    Returns a decl of a function that implements conversion of an integer vector\n    into a floating-point vector, or vice-versa.  DEST_TYPE is the"}, {"sha": "e68936c16c48a919ae847d4d9d381e035103397f", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58082ff61616ea33c317d9e9058dd8e644d04274/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58082ff61616ea33c317d9e9058dd8e644d04274/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=58082ff61616ea33c317d9e9058dd8e644d04274", "patch": "@@ -2385,6 +2385,9 @@ extern char rs6000_reg_names[][8];\t/* register names (0 vs. %r0).  */\n   if ((LOG) != 0)\t\t\t\\\n     fprintf (FILE, \"\\t.align %d\\n\", (LOG))\n \n+/* How to align the given loop. */\n+#define LOOP_ALIGN(LABEL)  rs6000_loop_align(LABEL)\n+\n /* Pick up the return address upon entry to a procedure. Used for\n    dwarf2 unwind information.  This also enables the table driven\n    mechanism.  */"}, {"sha": "79ab4f517964415b1db7e8064dc0e75a4a67545f", "filename": "gcc/config/rs6000/t-rs6000", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58082ff61616ea33c317d9e9058dd8e644d04274/gcc%2Fconfig%2Frs6000%2Ft-rs6000", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58082ff61616ea33c317d9e9058dd8e644d04274/gcc%2Fconfig%2Frs6000%2Ft-rs6000", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ft-rs6000?ref=58082ff61616ea33c317d9e9058dd8e644d04274", "patch": "@@ -27,7 +27,7 @@ rs6000.o: $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n   $(OBSTACK_H) $(TREE_H) $(EXPR_H) $(OPTABS_H) except.h function.h \\\n   output.h $(BASIC_BLOCK_H) $(INTEGRATE_H) toplev.h $(GGC_H) $(HASHTAB_H) \\\n   $(TM_P_H) $(TARGET_H) $(TARGET_DEF_H) langhooks.h reload.h gt-rs6000.h \\\n-  cfglayout.h\n+  cfglayout.h cfgloop.h\n \n rs6000-c.o: $(srcdir)/config/rs6000/rs6000-c.c \\\n     $(srcdir)/config/rs6000/rs6000-protos.h \\"}, {"sha": "060a24532c5d35b992d20d8850ff12ab337eecf6", "filename": "gcc/final.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58082ff61616ea33c317d9e9058dd8e644d04274/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58082ff61616ea33c317d9e9058dd8e644d04274/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=58082ff61616ea33c317d9e9058dd8e644d04274", "patch": "@@ -715,8 +715,8 @@ compute_alignments (void)\n     {\n       dump_flow_info (dump_file, TDF_DETAILS);\n       flow_loops_dump (dump_file, NULL, 1);\n-      loop_optimizer_init (AVOID_CFG_MODIFICATIONS);\n     }\n+  loop_optimizer_init (AVOID_CFG_MODIFICATIONS);\n   FOR_EACH_BB (bb)\n     if (bb->frequency > freq_max)\n       freq_max = bb->frequency;\n@@ -808,11 +808,8 @@ compute_alignments (void)\n       LABEL_TO_MAX_SKIP (label) = max_skip;\n     }\n \n-  if (dump_file)\n-    {\n-      loop_optimizer_finalize ();\n-      free_dominance_info (CDI_DOMINATORS);\n-    }\n+  loop_optimizer_finalize ();\n+  free_dominance_info (CDI_DOMINATORS);\n   return 0;\n }\n "}, {"sha": "766163452ac2cdf04ade1dcdffa59c67b7653bd7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58082ff61616ea33c317d9e9058dd8e644d04274/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58082ff61616ea33c317d9e9058dd8e644d04274/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=58082ff61616ea33c317d9e9058dd8e644d04274", "patch": "@@ -1,3 +1,7 @@\n+2010-11-04  Pat Haugen  <pthaugen@us.ibm.com>\n+\n+\t* gcc.target/powerpc/loop_align.c: New.\n+\n 2010-11-04  Iain Sandoe  <iains@gcc.gnu.org>\n \n \t* gcc.target/powerpc/ppc64-abi-1.c: Skip for Darwin."}, {"sha": "489380f2fc765e017827cb8533c0748b21535f3e", "filename": "gcc/testsuite/gcc.target/powerpc/loop_align.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58082ff61616ea33c317d9e9058dd8e644d04274/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Floop_align.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58082ff61616ea33c317d9e9058dd8e644d04274/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Floop_align.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Floop_align.c?ref=58082ff61616ea33c317d9e9058dd8e644d04274", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n+/* { dg-options \"-O2 -mcpu=power7 -falign-functions=16\" } */\n+/* { dg-final { scan-assembler \".p2align 5,,31\" } } */\n+\n+void f(double *a, double *b, double *c, int n) {\n+  int i;\n+  for (i=0; i < n; i++)\n+    a[i] = b[i] + c[i];\n+}"}]}