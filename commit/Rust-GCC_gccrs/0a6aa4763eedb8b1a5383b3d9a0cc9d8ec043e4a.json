{"sha": "0a6aa4763eedb8b1a5383b3d9a0cc9d8ec043e4a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGE2YWE0NzYzZWVkYjhiMWE1MzgzYjNkOWEwY2M5ZDhlYzA0M2U0YQ==", "commit": {"author": {"name": "Zhenqiang Chen", "email": "zhenqiang.chen@arm.com", "date": "2014-12-12T05:51:19Z"}, "committer": {"name": "Zhenqiang Chen", "email": "zqchen@gcc.gnu.org", "date": "2014-12-12T05:51:19Z"}, "message": "re PR rtl-optimization/63917 (r217646 caused many failures)\n\n2014-12-12  Zhenqiang Chen  <zhenqiang.chen@arm.com>\n\n\tPR rtl-optimization/63917\n\t* ifcvt.c (cc_in_cond): New function.\n\t(end_ifcvt_sequence): Make sure new generated insns do not clobber CC.\n\t(noce_process_if_block, check_cond_move_block): Check CC references.\n\ntestsuite/ChangeLog:\n2014-12-12  Zhenqiang Chen  <zhenqiang.chen@arm.com>\n\n\t* gcc.dg/pr64007.c: New test.\n\nFrom-SVN: r218658", "tree": {"sha": "d2258ae3f54efa0239da9d1d2ef4d9f2385d2c2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d2258ae3f54efa0239da9d1d2ef4d9f2385d2c2e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a6aa4763eedb8b1a5383b3d9a0cc9d8ec043e4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a6aa4763eedb8b1a5383b3d9a0cc9d8ec043e4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a6aa4763eedb8b1a5383b3d9a0cc9d8ec043e4a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a6aa4763eedb8b1a5383b3d9a0cc9d8ec043e4a/comments", "author": null, "committer": null, "parents": [{"sha": "e8c8ffa90081e97f664e73f58518a95f695aaca3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8c8ffa90081e97f664e73f58518a95f695aaca3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8c8ffa90081e97f664e73f58518a95f695aaca3"}], "stats": {"total": 91, "additions": 90, "deletions": 1}, "files": [{"sha": "d9a4bded7c5ccbbd3b65ed283dbb1ed891627320", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a6aa4763eedb8b1a5383b3d9a0cc9d8ec043e4a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a6aa4763eedb8b1a5383b3d9a0cc9d8ec043e4a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0a6aa4763eedb8b1a5383b3d9a0cc9d8ec043e4a", "patch": "@@ -1,3 +1,10 @@\n+2014-12-12  Zhenqiang Chen  <zhenqiang.chen@arm.com>\n+\n+\tPR rtl-optimization/63917\n+\t* ifcvt.c (cc_in_cond): New function.\n+\t(end_ifcvt_sequence): Make sure new generated insns do not clobber CC.\n+\t(noce_process_if_block, check_cond_move_block): Check CC references.\n+\n 2014-12-11  Andrew Pinski  <apinski@cavium.com>\n \n \t* config/aarch64/aarch64-protos.h (tune_params): Add align field."}, {"sha": "f0159c18a88b5233a82112e73d50647adc816c71", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a6aa4763eedb8b1a5383b3d9a0cc9d8ec043e4a/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a6aa4763eedb8b1a5383b3d9a0cc9d8ec043e4a/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=0a6aa4763eedb8b1a5383b3d9a0cc9d8ec043e4a", "patch": "@@ -1016,6 +1016,18 @@ noce_emit_move_insn (rtx x, rtx y)\n \t\t   0, 0, outmode, y);\n }\n \n+/* Return the CC reg if it is used in COND.  */\n+\n+static rtx\n+cc_in_cond (rtx cond)\n+{\n+  if (HAVE_cbranchcc4 && cond\n+      && GET_MODE_CLASS (GET_MODE (XEXP (cond, 0))) == MODE_CC)\n+    return XEXP (cond, 0);\n+\n+  return NULL_RTX;\n+}\n+\n /* Return sequence of instructions generated by if conversion.  This\n    function calls end_sequence() to end the current stream, ensures\n    that are instructions are unshared, recognizable non-jump insns.\n@@ -1026,6 +1038,7 @@ end_ifcvt_sequence (struct noce_if_info *if_info)\n {\n   rtx_insn *insn;\n   rtx_insn *seq = get_insns ();\n+  rtx cc = cc_in_cond (if_info->cond);\n \n   set_used_flags (if_info->x);\n   set_used_flags (if_info->cond);\n@@ -1040,7 +1053,9 @@ end_ifcvt_sequence (struct noce_if_info *if_info)\n      allows proper placement of required clobbers.  */\n   for (insn = seq; insn; insn = NEXT_INSN (insn))\n     if (JUMP_P (insn)\n-\t|| recog_memoized (insn) == -1)\n+\t|| recog_memoized (insn) == -1\n+\t   /* Make sure new generated code does not clobber CC.  */\n+\t|| (cc && set_of (cc, insn)))\n       return NULL;\n \n   return seq;\n@@ -2544,6 +2559,7 @@ noce_process_if_block (struct noce_if_info *if_info)\n   rtx_insn *insn_a, *insn_b;\n   rtx set_a, set_b;\n   rtx orig_x, x, a, b;\n+  rtx cc;\n \n   /* We're looking for patterns of the form\n \n@@ -2655,6 +2671,13 @@ noce_process_if_block (struct noce_if_info *if_info)\n   if_info->a = a;\n   if_info->b = b;\n \n+  /* Skip it if the instruction to be moved might clobber CC.  */\n+  cc = cc_in_cond (cond);\n+  if (cc\n+      && (set_of (cc, insn_a)\n+\t  || (insn_b && set_of (cc, insn_b))))\n+    return FALSE;\n+\n   /* Try optimizations in some approximation of a useful order.  */\n   /* ??? Should first look to see if X is live incoming at all.  If it\n      isn't, we don't need anything but an unconditional set.  */\n@@ -2811,6 +2834,7 @@ check_cond_move_block (basic_block bb,\n \t\t       rtx cond)\n {\n   rtx_insn *insn;\n+  rtx cc = cc_in_cond (cond);\n \n    /* We can only handle simple jumps at the end of the basic block.\n       It is almost impossible to update the CFG otherwise.  */\n@@ -2868,6 +2892,10 @@ check_cond_move_block (basic_block bb,\n \t  && modified_between_p (src, insn, NEXT_INSN (BB_END (bb))))\n \treturn FALSE;\n \n+      /* Skip it if the instruction to be moved might clobber CC.  */\n+      if (cc && set_of (cc, insn))\n+\treturn FALSE;\n+\n       vals->put (dest, src);\n \n       regs->safe_push (dest);"}, {"sha": "fc4869fe2552270212ac135f8c08aa0f506b31cf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a6aa4763eedb8b1a5383b3d9a0cc9d8ec043e4a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a6aa4763eedb8b1a5383b3d9a0cc9d8ec043e4a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0a6aa4763eedb8b1a5383b3d9a0cc9d8ec043e4a", "patch": "@@ -1,3 +1,7 @@\n+2014-12-12  Zhenqiang Chen  <zhenqiang.chen@arm.com>\n+\n+\t* gcc.dg/pr64007.c: New test.\n+\n 2014-12-12  Bin Cheng  <bin.cheng@arm.com>\n \n \t* gcc.target/aarch64/ldp_stp_2.c: Make test less vulnerable."}, {"sha": "cb0e50f6cb8dd155eb6535f3a881fed6c4f94507", "filename": "gcc/testsuite/gcc.dg/pr64007.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a6aa4763eedb8b1a5383b3d9a0cc9d8ec043e4a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr64007.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a6aa4763eedb8b1a5383b3d9a0cc9d8ec043e4a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr64007.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr64007.c?ref=0a6aa4763eedb8b1a5383b3d9a0cc9d8ec043e4a", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-options \" -O3 \" } */\n+/* { dg-do run } */\n+\n+#include <assert.h>\n+\n+int d, i;\n+\n+struct S\n+{\n+  int f0;\n+} *b, c, e, h, **g = &b;\n+\n+static struct S *f = &e;\n+\n+int\n+fn1 (int p)\n+{\n+  int a = 0;\n+  return a || p < 0 || p >= 2 || 1 >> p;\n+}\n+\n+int\n+main ()\n+{\n+  int k = 1, l, *m = &c.f0;\n+\n+  for (;;)\n+    {\n+      l = fn1 (i);\n+      *m = k && i;\n+      if (l)\n+\t{\n+\t  int n[1] = {0};\n+\t}\n+      break;\n+    }\n+\n+  *g = &h;\n+\n+  assert (b);\n+\n+  if (d)\n+    (*m)--;\n+  d = (f != 0) | (i >= 0);\n+\n+  if (c.f0 != 0)\n+    __builtin_abort ();\n+\n+  return 0;\n+}"}]}