{"sha": "3ec1a7379f92411a4a311aaa347dfb14d2e23815", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2VjMWE3Mzc5ZjkyNDExYTRhMzExYWFhMzQ3ZGZiMTRkMmUyMzgxNQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2007-12-20T14:40:33Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2007-12-20T14:40:33Z"}, "message": "re PR c++/34459 (incorrect code when compiled with optimization (-O1))\n\n\tPR c++/34459\n\t* tree-ssa-dse.c (dse_optimize_stmt): Don't eliminate store if\n\tUSE_STMT not only stores into the same object as STMT, but might\n\tread it too.\n\n\t* gcc.c-torture/execute/20071219-1.c: New test.\n\nFrom-SVN: r131101", "tree": {"sha": "5990689e70d0a0e74d6934d8c11527dd589c94c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5990689e70d0a0e74d6934d8c11527dd589c94c9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ec1a7379f92411a4a311aaa347dfb14d2e23815", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ec1a7379f92411a4a311aaa347dfb14d2e23815", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ec1a7379f92411a4a311aaa347dfb14d2e23815", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ec1a7379f92411a4a311aaa347dfb14d2e23815/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "667e20459d82a01e61fc590781c53fd2c136ef96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/667e20459d82a01e61fc590781c53fd2c136ef96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/667e20459d82a01e61fc590781c53fd2c136ef96"}], "stats": {"total": 103, "additions": 103, "deletions": 0}, "files": [{"sha": "33922e02906785e6743022faefcb9970aba74aa3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ec1a7379f92411a4a311aaa347dfb14d2e23815/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ec1a7379f92411a4a311aaa347dfb14d2e23815/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3ec1a7379f92411a4a311aaa347dfb14d2e23815", "patch": "@@ -1,3 +1,10 @@\n+2007-12-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/34459\n+\t* tree-ssa-dse.c (dse_optimize_stmt): Don't eliminate store if\n+\tUSE_STMT not only stores into the same object as STMT, but might\n+\tread it too.\n+\n 2007-12-19  Sebastian Pop  <sebastian.pop@amd.com>\n \n \tPR tree-optimization/34413"}, {"sha": "e9364ec22b2c845e603fed1922fa06a29244b4c4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ec1a7379f92411a4a311aaa347dfb14d2e23815/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ec1a7379f92411a4a311aaa347dfb14d2e23815/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3ec1a7379f92411a4a311aaa347dfb14d2e23815", "patch": "@@ -1,3 +1,8 @@\n+2007-12-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/34459\n+\t* gcc.c-torture/execute/20071219-1.c: New test.\n+\n 2007-12-20  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/34530"}, {"sha": "4152711a304e1fd2b068c9aa6151c1259f2ada46", "filename": "gcc/testsuite/gcc.c-torture/execute/20071219-1.c", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ec1a7379f92411a4a311aaa347dfb14d2e23815/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20071219-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ec1a7379f92411a4a311aaa347dfb14d2e23815/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20071219-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20071219-1.c?ref=3ec1a7379f92411a4a311aaa347dfb14d2e23815", "patch": "@@ -0,0 +1,71 @@\n+/* PR c++/34459 */\n+\n+extern void abort (void);\n+extern void *memset (void *s, int c, __SIZE_TYPE__ n);\n+\n+struct S\n+{\n+  char s[25];\n+};\n+\n+struct S *p;\n+\n+void __attribute__((noinline))\n+foo (struct S *x, int set)\n+{\n+  int i;\n+  for (i = 0; i < sizeof (x->s); ++i)\n+    if (x->s[i] != 0)\n+      abort ();\n+    else if (set)\n+      x->s[i] = set;\n+  p = x;\n+}\n+\n+void __attribute__((noinline))\n+test1 (void)\n+{\n+  struct S a;\n+  memset (&a.s, '\\0', sizeof (a.s));\n+  foo (&a, 0);\n+  struct S b = a;\n+  foo (&b, 1);\n+  b = a;\n+  b = b;\n+  foo (&b, 0);\n+}\n+\n+void __attribute__((noinline))\n+test2 (void)\n+{\n+  struct S a;\n+  memset (&a.s, '\\0', sizeof (a.s));\n+  foo (&a, 0);\n+  struct S b = a;\n+  foo (&b, 1);\n+  b = a;\n+  b = *p;\n+  foo (&b, 0);\n+}\n+\n+void __attribute__((noinline))\n+test3 (void)\n+{\n+  struct S a;\n+  memset (&a.s, '\\0', sizeof (a.s));\n+  foo (&a, 0);\n+  struct S b = a;\n+  foo (&b, 1);\n+  *p = a;\n+  *p = b;\n+  foo (&b, 0);\n+}\n+\n+int\n+main (void)\n+{\n+  test1 ();\n+  test2 ();\n+  test3 ();\n+  return 0;\n+}"}, {"sha": "3e0f04be1245dba638db06918192ea5e7b0f8a4f", "filename": "gcc/tree-ssa-dse.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ec1a7379f92411a4a311aaa347dfb14d2e23815/gcc%2Ftree-ssa-dse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ec1a7379f92411a4a311aaa347dfb14d2e23815/gcc%2Ftree-ssa-dse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dse.c?ref=3ec1a7379f92411a4a311aaa347dfb14d2e23815", "patch": "@@ -470,6 +470,26 @@ dse_optimize_stmt (struct dom_walk_data *walk_data,\n \t  vuse_vec_p vv;\n \t  tree stmt_lhs;\n \n+\t  if (LOADED_SYMS (use_stmt))\n+\t    {\n+\t      tree use_base\n+\t\t= get_base_address (GIMPLE_STMT_OPERAND (use_stmt, 0));\n+\t      /* If use_stmt is or might be a nop assignment, e.g. for\n+\t\t struct { ... } S a, b, *p; ...\n+\t\t b = a; b = b;\n+\t\t or\n+\t\t b = a; b = *p; where p might be &b, then USE_STMT\n+\t\t acts as a use as well as definition, so store in STMT\n+\t\t is not dead.  */\n+\t      if (TREE_CODE (use_base) == VAR_DECL\n+\t\t  && bitmap_bit_p (LOADED_SYMS (use_stmt),\n+\t\t\t\t   DECL_UID (use_base)))\n+\t\t{\n+\t\t  record_voperand_set (dse_gd->stores, &bd->stores, ann->uid);\n+\t\t  return;\n+\t\t}\n+\t    }\n+\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n             {\n               fprintf (dump_file, \"  Deleted dead store '\");"}]}