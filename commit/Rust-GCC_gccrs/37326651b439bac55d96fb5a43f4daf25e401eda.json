{"sha": "37326651b439bac55d96fb5a43f4daf25e401eda", "node_id": "C_kwDOANBUbNoAKDM3MzI2NjUxYjQzOWJhYzU1ZDk2ZmI1YTQzZjRkYWYyNWU0MDFlZGE", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-11-13T21:59:31Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-11-15T07:50:45Z"}, "message": "c++: check constexpr constructor body\n\nThe implicit constexpr patch revealed that our checks for constexpr\nconstructors that could possibly produce a constant value (which\notherwise are IFNDR) was failing to look at most of the function body.\nFixing that required some library tweaks.\n\ngcc/cp/ChangeLog:\n\n\t* constexpr.c (maybe_save_constexpr_fundef): Also check whether the\n\tbody of a constructor is potentially constant.\n\nlibstdc++-v3/ChangeLog:\n\n\t* src/c++17/memory_resource.cc: Add missing constexpr.\n\t* include/experimental/internet: Only mark copy constructor\n\tas constexpr with __cpp_constexpr_dynamic_alloc.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp1y/constexpr-89285-2.C: Expect error.\n\t* g++.dg/cpp1y/constexpr-89285.C: Adjust error.", "tree": {"sha": "e3fb0cf171f0a7c86f00f6e6f065af106eb32fbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3fb0cf171f0a7c86f00f6e6f065af106eb32fbd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/37326651b439bac55d96fb5a43f4daf25e401eda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37326651b439bac55d96fb5a43f4daf25e401eda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37326651b439bac55d96fb5a43f4daf25e401eda", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37326651b439bac55d96fb5a43f4daf25e401eda/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "daa9c6b015a33fa98af0ee7cd6919120248ab5f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/daa9c6b015a33fa98af0ee7cd6919120248ab5f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/daa9c6b015a33fa98af0ee7cd6919120248ab5f9"}], "stats": {"total": 35, "additions": 25, "deletions": 10}, "files": [{"sha": "c92db5d413c2d4d350f4c4f0ca24f82d52268dc0", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37326651b439bac55d96fb5a43f4daf25e401eda/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37326651b439bac55d96fb5a43f4daf25e401eda/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=37326651b439bac55d96fb5a43f4daf25e401eda", "patch": "@@ -870,7 +870,9 @@ maybe_save_constexpr_fundef (tree fun)\n       || (DECL_CLONED_FUNCTION_P (fun) && !DECL_DELETING_DESTRUCTOR_P (fun)))\n     return;\n \n-  if (!is_valid_constexpr_fn (fun, !DECL_GENERATED_P (fun)))\n+  bool complain = !DECL_GENERATED_P (fun);\n+\n+  if (!is_valid_constexpr_fn (fun, complain))\n     return;\n \n   tree massaged = massage_constexpr_body (fun, DECL_SAVED_TREE (fun));\n@@ -883,15 +885,26 @@ maybe_save_constexpr_fundef (tree fun)\n     }\n \n   bool potential = potential_rvalue_constant_expression (massaged);\n-  if (!potential && !DECL_GENERATED_P (fun))\n+  if (!potential && complain)\n     require_potential_rvalue_constant_expression (massaged);\n \n-  if (DECL_CONSTRUCTOR_P (fun)\n-      && cx_check_missing_mem_inits (DECL_CONTEXT (fun),\n-\t\t\t\t     massaged, !DECL_GENERATED_P (fun)))\n-    potential = false;\n+  if (DECL_CONSTRUCTOR_P (fun) && potential)\n+    {\n+      if (cx_check_missing_mem_inits (DECL_CONTEXT (fun),\n+\t\t\t\t      massaged, complain))\n+\tpotential = false;\n+      else if (cxx_dialect > cxx11)\n+\t{\n+\t  /* What we got from massage_constexpr_body is pretty much just the\n+\t     ctor-initializer, also check the body.  */\n+\t  massaged = DECL_SAVED_TREE (fun);\n+\t  potential = potential_rvalue_constant_expression (massaged);\n+\t  if (!potential && complain)\n+\t    require_potential_rvalue_constant_expression (massaged);\n+\t}\n+    }\n \n-  if (!potential && !DECL_GENERATED_P (fun))\n+  if (!potential && complain)\n     return;\n \n   constexpr_fundef entry = {fun, NULL_TREE, NULL_TREE, NULL_TREE};"}, {"sha": "ea44daa849e0dc7a70df43537ea198df6e2eef15", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-89285-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37326651b439bac55d96fb5a43f4daf25e401eda/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-89285-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37326651b439bac55d96fb5a43f4daf25e401eda/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-89285-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-89285-2.C?ref=37326651b439bac55d96fb5a43f4daf25e401eda", "patch": "@@ -10,7 +10,7 @@ struct B {\n     int *c = &x->a;\n     while (*c)\n       c = reinterpret_cast<int *>((reinterpret_cast<char *>(c) + *c));\n-    *c = reinterpret_cast<char *>(this) - reinterpret_cast<char *>(c);\n+    *c = reinterpret_cast<char *>(this) - reinterpret_cast<char *>(c); // { dg-error \"reinterpret_cast\" }\n   }\n };\n struct C : A {"}, {"sha": "26aab9b6a50a88a6ef71aca342fd6da26c07fc2e", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-89285.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37326651b439bac55d96fb5a43f4daf25e401eda/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-89285.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37326651b439bac55d96fb5a43f4daf25e401eda/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-89285.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-89285.C?ref=37326651b439bac55d96fb5a43f4daf25e401eda", "patch": "@@ -17,4 +17,4 @@ struct C : A {\n   B bar {this};\n };\n \n-constexpr C foo {};\t// { dg-message \"expansion of\" }\n+constexpr C foo {};\t\t// { dg-message \"\" }"}, {"sha": "95b8cdc99637fb8712617056fafb1bee6c817a92", "filename": "libstdc++-v3/include/experimental/internet", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37326651b439bac55d96fb5a43f4daf25e401eda/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Finternet", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37326651b439bac55d96fb5a43f4daf25e401eda/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Finternet", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Finternet?ref=37326651b439bac55d96fb5a43f4daf25e401eda", "patch": "@@ -460,7 +460,9 @@ namespace ip\n     // constructors:\n     constexpr address() noexcept : _M_v4(), _M_is_v4(true) { }\n \n+#if __cpp_constexpr_dynamic_alloc\n     constexpr\n+#endif\n     address(const address& __a) noexcept : _M_uninit(), _M_is_v4(__a._M_is_v4)\n     {\n       if (_M_is_v4)"}, {"sha": "9fc3bb754c1e6399a9ab8865a500982cfe706c02", "filename": "libstdc++-v3/src/c++17/memory_resource.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37326651b439bac55d96fb5a43f4daf25e401eda/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Fmemory_resource.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37326651b439bac55d96fb5a43f4daf25e401eda/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Fmemory_resource.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Fmemory_resource.cc?ref=37326651b439bac55d96fb5a43f4daf25e401eda", "patch": "@@ -603,7 +603,7 @@ namespace pmr\n     void* pointer = nullptr;\n     aligned_size<min> _M_size;\n \n-    size_t size() const noexcept\n+    constexpr size_t size() const noexcept\n     {\n       if (_M_size.value == size_t(-1)) [[unlikely]]\n \treturn size_t(-1);"}]}