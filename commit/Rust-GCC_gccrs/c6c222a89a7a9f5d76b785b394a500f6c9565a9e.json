{"sha": "c6c222a89a7a9f5d76b785b394a500f6c9565a9e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzZjMjIyYTg5YTdhOWY1ZDc2Yjc4NWIzOTRhNTAwZjZjOTU2NWE5ZQ==", "commit": {"author": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2001-07-09T19:37:01Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2001-07-09T19:37:01Z"}, "message": "explanations.html: New file.\n\n2001-07-09  Phil Edwards  <pme@sources.redhat.com>\n\n\t* docs/html/explanations.html:  New file.\n\t* docs/html/configopts.html:  Link to it to provide more notes\n\ton cstdio.  Minor markup and spacing fixes.\n\t* docs/html/27_io/howto.html:  Talk about sync_with_stdio.\n\nFrom-SVN: r43868", "tree": {"sha": "7170ee8bed9c0f886e5fbeb1698f610635ab4707", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7170ee8bed9c0f886e5fbeb1698f610635ab4707"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c6c222a89a7a9f5d76b785b394a500f6c9565a9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6c222a89a7a9f5d76b785b394a500f6c9565a9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6c222a89a7a9f5d76b785b394a500f6c9565a9e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6c222a89a7a9f5d76b785b394a500f6c9565a9e/comments", "author": null, "committer": null, "parents": [{"sha": "2b2c8b3e193c0af836177bc680c947488cacd4cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b2c8b3e193c0af836177bc680c947488cacd4cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b2c8b3e193c0af836177bc680c947488cacd4cd"}], "stats": {"total": 222, "additions": 177, "deletions": 45}, "files": [{"sha": "0f51b444c037ba2525f729eb61c77d3d0d0e5d85", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6c222a89a7a9f5d76b785b394a500f6c9565a9e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6c222a89a7a9f5d76b785b394a500f6c9565a9e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c6c222a89a7a9f5d76b785b394a500f6c9565a9e", "patch": "@@ -1,3 +1,10 @@\n+2001-07-09  Phil Edwards  <pme@sources.redhat.com>\n+\n+\t* docs/html/explanations.html:  New file.\n+\t* docs/html/configopts.html:  Link to it to provide more notes\n+\ton cstdio.  Minor markup and spacing fixes.\n+\t* docs/html/27_io/howto.html:  Talk about sync_with_stdio.\n+\n 2001-07-09  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n \n \t* include/bits/valarray_meta.h (_Expr::operator+): Use qualified id"}, {"sha": "abb4c698aafa314ce78efdab493db205460e48af", "filename": "libstdc++-v3/docs/html/27_io/howto.html", "status": "modified", "additions": 55, "deletions": 3, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6c222a89a7a9f5d76b785b394a500f6c9565a9e/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F27_io%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6c222a89a7a9f5d76b785b394a500f6c9565a9e/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F27_io%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F27_io%2Fhowto.html?ref=c6c222a89a7a9f5d76b785b394a500f6c9565a9e", "patch": "@@ -8,7 +8,7 @@\n    <META NAME=\"GENERATOR\" CONTENT=\"vi and eight fingers\">\n    <TITLE>libstdc++-v3 HOWTO:  Chapter 27</TITLE>\n <LINK REL=StyleSheet HREF=\"../lib3styles.css\">\n-<!-- $Id: howto.html,v 1.4 2001/04/03 00:26:56 pme Exp $ -->\n+<!-- $Id: howto.html,v 1.5 2001/05/30 21:55:03 pme Exp $ -->\n </HEAD>\n <BODY>\n \n@@ -29,6 +29,7 @@ <H1>Contents</H1>\n    <LI><A HREF=\"#5\">What is this &lt;sstream&gt;/stringstreams thing?</A>\n    <LI><A HREF=\"#6\">Deriving a stream buffer</A>\n    <LI><A HREF=\"#7\">More on binary I/O</A>\n+   <LI><A HREF=\"#8\">Pathetic performance?  Ditch C.</A>\n </UL>\n \n <HR>\n@@ -400,14 +401,65 @@ <H2><A NAME=\"7\">More on binary I/O</A></H2>\n       a portable binary format.\n    </P>\n \n+<HR>\n+<H2><A NAME=\"8\">Pathetic performance?  Ditch C.</A></H2>\n+   <P>It sounds like a flame on C, but it isn't.  Really.  Calm down.\n+      I'm just saying it to get your attention.\n+   </P>\n+   <P>Because the C++ library includes the C library, both C-style and\n+      C++-style I/O have to work at the same time.  For example:\n+      <PRE>\n+     #include &lt;iostream&gt;\n+     #include &lt;cstdio&gt;\n+\n+     std::cout &lt;&lt; &quot;Hel&quot;;\n+     std::printf (&quot;lo, worl&quot;);\n+     std::cout &lt;&lt; &quot;d!\\n&quot;;\n+      </PRE>\n+      This must do what you think it does.\n+   </P>\n+   <P>Alert members of the audience will immediately notice that buffering\n+      is going to make a hash of the output unless special steps are taken.\n+   </P>\n+   <P>The special steps taken by libstdc++, at least for version 3.0,\n+      involve doing very little buffering for the standard streams, leaving\n+      most of the buffering to the underlying C library.  (This kind of\n+      thing is <A HREF=\"../explanations.html#cstdio\">tricky to get right</A>.)\n+      The upside is that correctness is insured.  The downside is that\n+      writing through <TT>cout</TT> can quite easily lead to awful\n+      performance when the C++ I/O library is layered on top of the C I/O\n+      library (as it is for 3.0 by default).  Some patches are in the\n+      works which should improve the situation for 3.1.\n+   </P>\n+   <P>However, the C and C++ standard streams only need to be kept in sync\n+      when both libraries' facilities are in use.  If your program only uses\n+      C++ I/O, then there's no need to sync with the C streams.  The right\n+      thing to do in this case is to call\n+      <PRE>\n+     #include <EM>any of the I/O headers such as ios, iostream, etc</EM>\n+\n+     std::sync_with_stdio(false);\n+      </PRE>\n+   </P>\n+   <P>You must do this before performing any I/O via the C++ stream objects.\n+      Once you call this, the C++ streams will operate independantly of the\n+      (unused) C streams.  For GCC 3.0, this means that <TT>cout</TT> and\n+      company will become fully buffered on their own.\n+   </P>\n+   <P>Note, by the way, that the synchronization requirement only applies to\n+      the standard streams (cin, cout, cerr, clog, and thier wide-character\n+      counterparts).  File stream objects that you create yourself have no\n+      such requirement and are fully buffered.\n+   </P>\n+\n \n <!-- ####################################################### -->\n \n-<HR>\n+<HR><BR><BR><BR><BR><BR><BR><BR><BR>\n <P CLASS=\"fineprint\"><EM>\n Comments and suggestions are welcome, and may be sent to\n <A HREF=\"mailto:libstdc++@gcc.gnu.org\">the mailing list</A>.\n-<BR> $Id: howto.html,v 1.4 2001/04/03 00:26:56 pme Exp $\n+<BR> $Id: howto.html,v 1.5 2001/05/30 21:55:03 pme Exp $\n </EM></P>\n \n "}, {"sha": "513e546019a8d93c2629f0eb24e38b897fe3b9f7", "filename": "libstdc++-v3/docs/html/configopts.html", "status": "modified", "additions": 41, "deletions": 42, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6c222a89a7a9f5d76b785b394a500f6c9565a9e/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fconfigopts.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6c222a89a7a9f5d76b785b394a500f6c9565a9e/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fconfigopts.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fconfigopts.html?ref=c6c222a89a7a9f5d76b785b394a500f6c9565a9e", "patch": "@@ -7,7 +7,7 @@\n    <META NAME=\"GENERATOR\" CONTENT=\"vi and eight fingers\">\n    <TITLE>libstdc++-v3 configure options</TITLE>\n <LINK REL=StyleSheet HREF=\"lib3styles.css\">\n-<!-- $Id: configopts.html,v 1.9 2001/04/06 01:47:11 bkoz Exp $ -->\n+<!-- $Id: configopts.html,v 1.10 2001/04/20 08:59:25 bkoz Exp $ -->\n </HEAD>\n <BODY>\n \n@@ -66,56 +66,55 @@ <H1 CLASS=\"centered\"><A NAME=\"top\">Interesting <TT>configure</TT>\n         I/O package (from\n         <A HREF=\"http://sources.redhat.com/glibc/\">glibc</A>, the\n         GNU C library), or 'stdio' to use a generic &quot;C&quot;\n-        abstraction.  The default is 'stdio'.\n+        abstraction.  The default is 'stdio'.  A longer explanation\n+        is <A HREF=\"explanations.html#cstdio\">here</A>.\n      </P>\n \n- <DT><TT>--enable-sjlj-exceptions </TT> \n- <DD><P> Forces old, short-jump/long-jump exception handling model. If\n- at all possible, the new, frame unwinding exception handling routines\n- should be used instead, as they significantly reduce both runtime\n- memory usage and executable size.\n+ <DT><TT>--enable-sjlj-exceptions  </TT>\n+ <DD><P>Forces old, short-jump/long-jump exception handling model.  If\n+        at all possible, the new, frame unwinding exception handling routines\n+        should be used instead, as they significantly reduce both runtime\n+        memory usage and executable size.\n      </P>\n \n-\n  <DT><TT>--enable-clocale  </TT>\n  <DD><P>This is an abbreviated form of <TT>'--enable-clocale=generic'</TT>\n         (described next).\n      </P>\n \n- <DT><TT>--enable-clocale=MODEL </TT> <DD><P>Select a target-specific\n- underlying locale package. The choices are 'gnu' to specify an X/Open\n- (IEEE Std. 1003.1-200x) model based on langinfo/iconv (from <A\n- HREF=\"http://sources.redhat.com/glibc/\">glibc</A>, the GNU C\n- library), or 'generic' to use a generic &quot;C&quot; abstraction\n- which consists of &quot;C&quot; locale info.  The default is\n- 'generic'.\n+ <DT><TT>--enable-clocale=MODEL  </TT>\n+ <DD><P>Select a target-specific underlying locale package.  The choices\n+        are 'gnu' to specify an X/Open (IEEE Std. 1003.1-200x) model based\n+        on langinfo/iconv (from\n+        <A HREF=\"http://sources.redhat.com/glibc/\">glibc</A>, the GNU C\n+        library), or 'generic' to use a generic &quot;C&quot; abstraction\n+        which consists of &quot;C&quot; locale info.  The default is 'generic'.\n      </P>\n \n  <DT><TT>--enable-c99  </TT>\n  <DD><P>The &quot;long long&quot; type was introduced in C99, along\n- \twith bunches of other functions for wide characters, and math\n- \tclassification macros, etc. If enabled, all C99 functions not\n- \tspecified by the C++ standard will be put into namespace c99,\n- \tand then all names in the c99 namespace will be injected into\n- \tnamespace std, so that C99 functions can be used \"as if\" they\n- \twere in the C++ standard (as they will eventually be in some\n- \tfuture revision of the standard, without a doubt.) By default,\n- \tC99 support is on, assuming the configure probes find all the\n- \tnecessary functions and bits necessary.\n+        with bunches of other functions for wide characters, and math\n+        classification macros, etc.  If enabled, all C99 functions not\n+        specified by the C++ standard will be put into <TT>namespace\n+        c99</TT>, and then all names in the c99 namespace will be injected\n+        into namespace std, so that C99 functions can be used &quot;as\n+        if&quot; they were in the C++ standard (as they will eventually\n+        be in some future revision of the standard, without a doubt).\n+        By default, C99 support is on, assuming the configure probes find\n+        all the necessary functions and bits necessary.\n     </P>\n \n  <DT><TT>--enable-long-long  </TT>\n  <DD><P>The &quot;long long&quot; type was introduced in C99.  It is\n         provided as a GNU extension to C++98 in g++.  This flag builds\n-        support for &quot;long long&quot; into the library\n-        (specialized templates and the like for iostreams). This\n-        option is on by default: if enabled, users will have to either\n-        use the new-style &quot;C&quot; headers by default (ie cmath\n-        not math.h) or add appropriate compile-time flags to all\n-        compile lines to allow &quot;C&quot; visibility of this\n-        feature (on GNU/Linux, the flag is -D_ISOC99_SOURCE, which is\n-        added automatically via CPLUSPLUS_CPP_SPEC's addition of\n-        _GNU_SOURCE).\n+        support for &quot;long long&quot; into the library (specialized\n+        templates and the like for iostreams).  This option is on by default:\n+        if enabled, users will have to either use the new-style &quot;C&quot;\n+        headers by default (i.e., &lt;cmath&gt; not &lt;math.h&gt;)\n+        or add appropriate compile-time flags to all compile lines to\n+        allow &quot;C&quot; visibility of this feature (on GNU/Linux,\n+        the flag is -D_ISOC99_SOURCE, which is added automatically via\n+        CPLUSPLUS_CPP_SPEC's addition of _GNU_SOURCE).\n      </P>\n \n  <DT><TT>--enable-cheaders=OPTION  </TT>\n@@ -148,14 +147,14 @@ <H1 CLASS=\"centered\"><A NAME=\"top\">Interesting <TT>configure</TT>\n \n  <DT><TT>--enable-version-specific-runtime-libs  </TT>\n  <DD><P>Specify that run-time libraries should be installed in the\n-       compiler-specific subdirectory (i.e.,\n-       <TT>$(libdir)/gcc-lib/$(target_alias)/$(gcc_version)</TT>)\n-       instead of <TT>$(libdir)</TT>.  This option is useful if you\n-       intend to use several versions of gcc in parallel.  In addition,\n-       libstdc++'s include files will be installed in\n-       <TT>$(libdir)/gcc-lib/$(target_alias)/$(gcc_version)/include/g++</TT>,\n-       unless you also specify\n-       <TT>--with-gxx-include-dir=_dirname_</TT> during configuration.\n+        compiler-specific subdirectory (i.e.,\n+        <TT>${libdir}/gcc-lib/${target_alias}/${gcc_version}</TT>)\n+        instead of <TT>${libdir}</TT>.  This option is useful if you\n+        intend to use several versions of gcc in parallel.  In addition,\n+        libstdc++'s include files will be installed in\n+        <TT>${libdir}/gcc-lib/${target_alias}/${gcc_version}/include/g++</TT>,\n+        unless you also specify\n+       <TT>--with-gxx-include-dir=<EM>dirname</EM></TT> during configuration.\n      </P>\n \n  <DT><TT>--with-gxx-include-dir=&lt;include-files dir&gt;</TT>\n@@ -212,7 +211,7 @@ <H1 CLASS=\"centered\"><A NAME=\"top\">Interesting <TT>configure</TT>\n \n <HR>\n <P CLASS=\"fineprint\"><EM>\n-$Id: configopts.html,v 1.9 2001/04/06 01:47:11 bkoz Exp $\n+$Id: configopts.html,v 1.10 2001/04/20 08:59:25 bkoz Exp $\n </EM></P>\n \n "}, {"sha": "eb88000ffc9aef4c15e457c2327f6df3be74c8db", "filename": "libstdc++-v3/docs/html/explanations.html", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6c222a89a7a9f5d76b785b394a500f6c9565a9e/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fexplanations.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6c222a89a7a9f5d76b785b394a500f6c9565a9e/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fexplanations.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fexplanations.html?ref=c6c222a89a7a9f5d76b785b394a500f6c9565a9e", "patch": "@@ -0,0 +1,74 @@\n+<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\">\n+<HTML>\n+<HEAD>\n+   <META NAME=\"AUTHOR\" CONTENT=\"pme@sources.redhat.com (Phil Edwards)\">\n+   <META NAME=\"KEYWORDS\" CONTENT=\"libstdc++, libstdc++-v3, GCC, g++\">\n+   <META NAME=\"DESCRIPTION\" CONTENT=\"Explanatory notes about libstdc++-v3.\">\n+   <META NAME=\"GENERATOR\" CONTENT=\"vi and eight fingers\">\n+   <TITLE>Explanatory notes about libstdc++-v3 design</TITLE>\n+<LINK REL=StyleSheet HREF=\"lib3styles.css\">\n+<!-- $Id: configopts.html,v 1.10 2001/04/20 08:59:25 bkoz Exp $ -->\n+</HEAD>\n+<BODY>\n+\n+<H1 CLASS=\"centered\"><A NAME=\"top\">Explanatory notes about libstdc++-v3\n+design</A></H1>\n+\n+<P>The latest version of this document is always available at\n+   <A HREF=\"http://gcc.gnu.org/onlinedocs/libstdc++/explanations.html\">\n+   http://gcc.gnu.org/onlinedocs/libstdc++/explanations.html</A>.\n+</P>\n+\n+<P>To the <A HREF=\"http://gcc.gnu.org/libstdc++/\">libstdc++-v3 homepage</A>.\n+\n+\n+<!-- ####################################################### -->\n+<HR>\n+<A NAME=\"cstdio\"><H3>&quot;I/O packages&quot;, <TT>--enable-cstdio</TT></H3></A>\n+<P>In addition to all the nifty things which C++ can do for I/O, its library\n+   also includes all of the I/O capabilites of C.  Making them work together\n+   can be a challenge, not only\n+   <A HREF=\"27_io/howto.html#8\">for the programmer</A> but for the\n+   implementors as well.\n+</P>\n+<P>There are two ways to do a C++ library:  the cool way, and the easy way.\n+   More specifically, the cool-but-easy-to-get-wrong way, and the\n+   easy-to-guarantee-correct-behavior way.  For 3.0, the easy way is used.\n+</P>\n+<P>Choosing 'stdio' is the easy way.  It builds a C++ library which forwards\n+   all operations to the C library.  Many of the C++ I/O functions are\n+   specified in the standard 'as if' they called a certain C function; the\n+   easiest way to get it correct is to actually call that function.  The\n+   disadvantage is that the C++ code will run slower (fortunately, the layer\n+   is thin).\n+</P>\n+<P>Choosing 'libio' is the cool way; it allows C++ and C to share some\n+   buffers.  It's disabled because of tricky synchronization issues.  Other\n+   cool ways (various methods of sharing resources between C and C++\n+   facilities, instead of layering) are possible.  This approach can speed\n+   up I/O significantly.\n+</P>\n+<P>Other packages are possible.  For a new package, a header must be\n+   written to provide types like streamsize (usually just a typedef), as\n+   well as some internal types like<TT> __c_file_type </TT> and\n+   <TT> __c_lock </TT> (for the stdio case, these are FILE (as in\n+   &quot;FILE*&quot;) and a simple POSIX mutex, respectively).  An\n+   interface class called <TT> __basic_file </TT> must also be filled in;\n+   as an example, for the stdio case, these member functions are all\n+   inline calles to fread, fwrite, etc.\n+</P>\n+<P>Return <A HREF=\"#top\">to the top of the page</A> or\n+   <A HREF=\"http://gcc.gnu.org/libstdc++/\">to the homepage</A>.\n+</P>\n+\n+\n+<!-- ####################################################### -->\n+\n+<HR>\n+<P CLASS=\"fineprint\"><EM>\n+$Id$\n+</EM></P>\n+\n+\n+</BODY>\n+</HTML>"}]}