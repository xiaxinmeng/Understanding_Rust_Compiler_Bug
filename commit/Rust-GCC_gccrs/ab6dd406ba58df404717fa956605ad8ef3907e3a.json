{"sha": "ab6dd406ba58df404717fa956605ad8ef3907e3a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWI2ZGQ0MDZiYTU4ZGY0MDQ3MTdmYTk1NjYwNWFkOGVmMzkwN2UzYQ==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2011-11-30T04:44:13Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2011-11-30T04:44:13Z"}, "message": "re PR libgomp/51298 (libgomp team_barrier locking failures)\n\n\tPR libgomp/51298\n\t* config/linux/bar.h: Use atomic rather than sync builtins.\n\t* config/linux/bar.c: Likewise.  Add missing acquire\n\tsynchronisation on generation field.\n\t* task.c (gomp_barrier_handle_tasks): Regain lock so as to not\n\tdouble unlock.\n\nFrom-SVN: r181833", "tree": {"sha": "e4a5194d50d93bce1bed4e9d8b3ca217c3d12b9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e4a5194d50d93bce1bed4e9d8b3ca217c3d12b9e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab6dd406ba58df404717fa956605ad8ef3907e3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab6dd406ba58df404717fa956605ad8ef3907e3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab6dd406ba58df404717fa956605ad8ef3907e3a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab6dd406ba58df404717fa956605ad8ef3907e3a/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b40c885f183cb7d0b0970494220370699f93c2ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b40c885f183cb7d0b0970494220370699f93c2ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b40c885f183cb7d0b0970494220370699f93c2ae"}], "stats": {"total": 55, "additions": 35, "deletions": 20}, "files": [{"sha": "f6278b771591b516b94c6602238a7688e43bd5cc", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab6dd406ba58df404717fa956605ad8ef3907e3a/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab6dd406ba58df404717fa956605ad8ef3907e3a/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=ab6dd406ba58df404717fa956605ad8ef3907e3a", "patch": "@@ -1,3 +1,12 @@\n+2011-11-30  Alan Modra  <amodra@gmail.com>\n+\n+\tPR libgomp/51298\n+\t* config/linux/bar.h: Use atomic rather than sync builtins.\n+\t* config/linux/bar.c: Likewise.  Add missing acquire\n+\tsynchronisation on generation field.\n+\t* task.c (gomp_barrier_handle_tasks): Regain lock so as to not\n+\tdouble unlock.\n+\n 2011-11-30  Alan Modra  <amodra@gmail.com>\n \n \t* ordered.c (gomp_ordered_sync): Add MEMMODEL_ACQ_REL fence."}, {"sha": "223a2aec432579f833e3f09499cab745ff2b89ea", "filename": "libgomp/config/linux/bar.c", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab6dd406ba58df404717fa956605ad8ef3907e3a/libgomp%2Fconfig%2Flinux%2Fbar.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab6dd406ba58df404717fa956605ad8ef3907e3a/libgomp%2Fconfig%2Flinux%2Fbar.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfig%2Flinux%2Fbar.c?ref=ab6dd406ba58df404717fa956605ad8ef3907e3a", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2005, 2008, 2009 Free Software Foundation, Inc.\n+/* Copyright (C) 2005, 2008, 2009, 2011 Free Software Foundation, Inc.\n    Contributed by Richard Henderson <rth@redhat.com>.\n \n    This file is part of the GNU OpenMP Library (libgomp).\n@@ -37,17 +37,15 @@ gomp_barrier_wait_end (gomp_barrier_t *bar, gomp_barrier_state_t state)\n     {\n       /* Next time we'll be awaiting TOTAL threads again.  */\n       bar->awaited = bar->total;\n-      atomic_write_barrier ();\n-      bar->generation += 4;\n+      __atomic_store_n (&bar->generation, bar->generation + 4,\n+\t\t\tMEMMODEL_RELEASE);\n       futex_wake ((int *) &bar->generation, INT_MAX);\n     }\n   else\n     {\n-      unsigned int generation = state;\n-\n       do\n-\tdo_wait ((int *) &bar->generation, generation);\n-      while (bar->generation == generation);\n+\tdo_wait ((int *) &bar->generation, state);\n+      while (__atomic_load_n (&bar->generation, MEMMODEL_ACQUIRE) == state);\n     }\n }\n \n@@ -81,23 +79,23 @@ gomp_team_barrier_wake (gomp_barrier_t *bar, int count)\n void\n gomp_team_barrier_wait_end (gomp_barrier_t *bar, gomp_barrier_state_t state)\n {\n-  unsigned int generation;\n+  unsigned int generation, gen;\n \n   if (__builtin_expect ((state & 1) != 0, 0))\n     {\n       /* Next time we'll be awaiting TOTAL threads again.  */\n       struct gomp_thread *thr = gomp_thread ();\n       struct gomp_team *team = thr->ts.team;\n+\n       bar->awaited = bar->total;\n-      atomic_write_barrier ();\n       if (__builtin_expect (team->task_count, 0))\n \t{\n \t  gomp_barrier_handle_tasks (state);\n \t  state &= ~1;\n \t}\n       else\n \t{\n-\t  bar->generation = state + 3;\n+\t  __atomic_store_n (&bar->generation, state + 3, MEMMODEL_RELEASE);\n \t  futex_wake ((int *) &bar->generation, INT_MAX);\n \t  return;\n \t}\n@@ -107,12 +105,16 @@ gomp_team_barrier_wait_end (gomp_barrier_t *bar, gomp_barrier_state_t state)\n   do\n     {\n       do_wait ((int *) &bar->generation, generation);\n-      if (__builtin_expect (bar->generation & 1, 0))\n-\tgomp_barrier_handle_tasks (state);\n-      if ((bar->generation & 2))\n+      gen = __atomic_load_n (&bar->generation, MEMMODEL_ACQUIRE);\n+      if (__builtin_expect (gen & 1, 0))\n+\t{\n+\t  gomp_barrier_handle_tasks (state);\n+\t  gen = __atomic_load_n (&bar->generation, MEMMODEL_ACQUIRE);\n+\t}\n+      if ((gen & 2) != 0)\n \tgeneration |= 2;\n     }\n-  while (bar->generation != state + 4);\n+  while (gen != state + 4);\n }\n \n void"}, {"sha": "58bd40d698964b458d022136012ac3d5c42f7485", "filename": "libgomp/config/linux/bar.h", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab6dd406ba58df404717fa956605ad8ef3907e3a/libgomp%2Fconfig%2Flinux%2Fbar.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab6dd406ba58df404717fa956605ad8ef3907e3a/libgomp%2Fconfig%2Flinux%2Fbar.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfig%2Flinux%2Fbar.h?ref=ab6dd406ba58df404717fa956605ad8ef3907e3a", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2005, 2008, 2009 Free Software Foundation, Inc.\n+/* Copyright (C) 2005, 2008, 2009, 2011 Free Software Foundation, Inc.\n    Contributed by Richard Henderson <rth@redhat.com>.\n \n    This file is part of the GNU OpenMP Library (libgomp).\n@@ -50,7 +50,7 @@ static inline void gomp_barrier_init (gomp_barrier_t *bar, unsigned count)\n \n static inline void gomp_barrier_reinit (gomp_barrier_t *bar, unsigned count)\n {\n-  __sync_fetch_and_add (&bar->awaited, count - bar->total);\n+  __atomic_add_fetch (&bar->awaited, count - bar->total, MEMMODEL_ACQ_REL);\n   bar->total = count;\n }\n \n@@ -69,10 +69,13 @@ extern void gomp_team_barrier_wake (gomp_barrier_t *, int);\n static inline gomp_barrier_state_t\n gomp_barrier_wait_start (gomp_barrier_t *bar)\n {\n-  unsigned int ret = bar->generation & ~3;\n-  /* Do we need any barrier here or is __sync_add_and_fetch acting\n-     as the needed LoadLoad barrier already?  */\n-  ret += __sync_add_and_fetch (&bar->awaited, -1) == 0;\n+  unsigned int ret = __atomic_load_n (&bar->generation, MEMMODEL_ACQUIRE) & ~3;\n+  /* A memory barrier is needed before exiting from the various forms\n+     of gomp_barrier_wait, to satisfy OpenMP API version 3.1 section\n+     2.8.6 flush Construct, which says there is an implicit flush during\n+     a barrier region.  This is a convenient place to add the barrier,\n+     so we use MEMMODEL_ACQ_REL here rather than MEMMODEL_ACQUIRE.  */\n+  ret += __atomic_add_fetch (&bar->awaited, -1, MEMMODEL_ACQ_REL) == 0;\n   return ret;\n }\n "}, {"sha": "d3d72663f35c0762a2f4c0557240350eb08c9dd5", "filename": "libgomp/task.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab6dd406ba58df404717fa956605ad8ef3907e3a/libgomp%2Ftask.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab6dd406ba58df404717fa956605ad8ef3907e3a/libgomp%2Ftask.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftask.c?ref=ab6dd406ba58df404717fa956605ad8ef3907e3a", "patch": "@@ -273,6 +273,7 @@ gomp_barrier_handle_tasks (gomp_barrier_state_t state)\n \t      gomp_team_barrier_done (&team->barrier, state);\n \t      gomp_mutex_unlock (&team->task_lock);\n \t      gomp_team_barrier_wake (&team->barrier, 0);\n+\t      gomp_mutex_lock (&team->task_lock);\n \t    }\n \t}\n     }"}]}