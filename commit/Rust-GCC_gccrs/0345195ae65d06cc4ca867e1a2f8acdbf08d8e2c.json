{"sha": "0345195ae65d06cc4ca867e1a2f8acdbf08d8e2c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDM0NTE5NWFlNjVkMDZjYzRjYTg2N2UxYTJmOGFjZGJmMDhkOGUyYw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2000-10-20T17:28:28Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2000-10-20T17:28:28Z"}, "message": "combine.c (struct undo): Change int to unsigned int.\n\n\t* combine.c (struct undo): Change int to unsigned int.\n\t(do_SUBST_INT): Args are unsigned int.\n\t(make_extraction, force_to_mode): Use proper type when forming mask.\n\t(make_field_assignment): Likewise.\n\nFrom-SVN: r36967", "tree": {"sha": "99532c95724ffbb3c88566a1b5fd9ee02282331b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/99532c95724ffbb3c88566a1b5fd9ee02282331b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0345195ae65d06cc4ca867e1a2f8acdbf08d8e2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0345195ae65d06cc4ca867e1a2f8acdbf08d8e2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0345195ae65d06cc4ca867e1a2f8acdbf08d8e2c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0345195ae65d06cc4ca867e1a2f8acdbf08d8e2c/comments", "author": null, "committer": null, "parents": [{"sha": "113062306dc09739ae46dd22274423320213bc7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/113062306dc09739ae46dd22274423320213bc7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/113062306dc09739ae46dd22274423320213bc7a"}], "stats": {"total": 31, "additions": 21, "deletions": 10}, "files": [{"sha": "06f53bc0f3dd29bc83676c82607e0a30315112a8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0345195ae65d06cc4ca867e1a2f8acdbf08d8e2c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0345195ae65d06cc4ca867e1a2f8acdbf08d8e2c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0345195ae65d06cc4ca867e1a2f8acdbf08d8e2c", "patch": "@@ -1,3 +1,10 @@\n+Fri Oct 20 13:33:16 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* combine.c (struct undo): Change int to unsigned int.\n+\t(do_SUBST_INT): Args are unsigned int.\n+\t(make_extraction, force_to_mode): Use proper type when forming mask.\n+\t(make_field_assignment): Likewise.\n+\n 2000-10-20  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* c-common.c (check_format_info_recurse): Extract string constant"}, {"sha": "f381c142f64f08f20afd4d83ca4f0d31888da9b4", "filename": "gcc/combine.c", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0345195ae65d06cc4ca867e1a2f8acdbf08d8e2c/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0345195ae65d06cc4ca867e1a2f8acdbf08d8e2c/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=0345195ae65d06cc4ca867e1a2f8acdbf08d8e2c", "patch": "@@ -330,8 +330,8 @@ struct undo\n {\n   struct undo *next;\n   int is_int;\n-  union {rtx r; int i;} old_contents;\n-  union {rtx *r; int *i;} where;\n+  union {rtx r; unsigned int i;} old_contents;\n+  union {rtx *r; unsigned int *i;} where;\n };\n \n /* Record a bunch of changes to be undone, up to MAX_UNDO of them.\n@@ -361,7 +361,8 @@ static struct undobuf undobuf;\n static int n_occurrences;\n \n static void do_SUBST\t\t\tPARAMS ((rtx *, rtx));\n-static void do_SUBST_INT\t\tPARAMS ((int *, int));\n+static void do_SUBST_INT\t\tPARAMS ((unsigned int *,\n+\t\t\t\t\t\t unsigned int));\n static void init_reg_last_arrays\tPARAMS ((void));\n static void setup_incoming_promotions   PARAMS ((void));\n static void set_nonzero_bits_and_sign_copies  PARAMS ((rtx, rtx, void *));\n@@ -468,10 +469,10 @@ do_SUBST (into, newval)\n \n static void\n do_SUBST_INT (into, newval)\n-     int *into, newval;\n+     unsigned int *into, newval;\n {\n   struct undo *buf;\n-  int oldval = *into;\n+  unsigned int oldval = *into;\n \n   if (oldval == newval)\n     return;\n@@ -6014,7 +6015,7 @@ make_extraction (mode, inner, pos, pos_rtx, len,\n       else\n \tnew = force_to_mode (inner, tmode,\n \t\t\t     len >= HOST_BITS_PER_WIDE_INT\n-\t\t\t     ? ~(HOST_WIDE_INT) 0\n+\t\t\t     ? ~(unsigned HOST_WIDE_INT) 0\n \t\t\t     : ((unsigned HOST_WIDE_INT) 1 << len) - 1,\n \t\t\t     NULL_RTX, 0);\n \n@@ -6235,7 +6236,7 @@ make_extraction (mode, inner, pos, pos_rtx, len,\n       inner = force_to_mode (inner, wanted_inner_mode,\n \t\t\t     pos_rtx\n \t\t\t     || len + orig_pos >= HOST_BITS_PER_WIDE_INT\n-\t\t\t     ? ~(HOST_WIDE_INT) 0\n+\t\t\t     ? ~(unsigned HOST_WIDE_INT) 0\n \t\t\t     : ((((unsigned HOST_WIDE_INT) 1 << len) - 1)\n \t\t\t\t<< orig_pos),\n \t\t\t     NULL_RTX, 0);\n@@ -6902,7 +6903,9 @@ force_to_mode (x, mode, mask, reg, just_select)\n       /* If X is (minus C Y) where C's least set bit is larger than any bit\n \t in the mask, then we may replace with (neg Y).  */\n       if (GET_CODE (XEXP (x, 0)) == CONST_INT\n-\t  && (INTVAL (XEXP (x, 0)) & -INTVAL (XEXP (x, 0))) > mask)\n+\t  && (((unsigned HOST_WIDE_INT) (INTVAL (XEXP (x, 0))\n+\t\t\t\t\t& -INTVAL (XEXP (x, 0))))\n+\t      > mask))\n \t{\n \t  x = gen_unary (NEG, GET_MODE (x), GET_MODE (x), XEXP (x, 1));\n \t  return force_to_mode (x, mode, mask, reg, next_select);\n@@ -6911,7 +6914,8 @@ force_to_mode (x, mode, mask, reg, just_select)\n       /* Similarly, if C contains every bit in the mask, then we may\n \t replace with (not Y).  */\n       if (GET_CODE (XEXP (x, 0)) == CONST_INT\n-\t  && (INTVAL (XEXP (x, 0)) | mask) == INTVAL (XEXP (x, 0)))\n+\t  && ((INTVAL (XEXP (x, 0)) | (HOST_WIDE_INT) mask)\n+\t      == INTVAL (XEXP (x, 0))))\n \t{\n \t  x = gen_unary (NOT, GET_MODE (x), GET_MODE (x), XEXP (x, 1));\n \t  return force_to_mode (x, mode, mask, reg, next_select);\n@@ -7693,7 +7697,7 @@ make_field_assignment (x)\n \t\t\t\t\t     GET_MODE (src), other, pos),\n \t\t       mode,\n \t\t       GET_MODE_BITSIZE (mode) >= HOST_BITS_PER_WIDE_INT\n-\t\t       ? ~(HOST_WIDE_INT) 0\n+\t\t       ? ~(unsigned HOST_WIDE_INT) 0\n \t\t       : ((unsigned HOST_WIDE_INT) 1 << len) - 1,\n \t\t       dest, 0);\n "}]}