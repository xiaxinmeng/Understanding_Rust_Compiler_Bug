{"sha": "c688a8b0d72f822e1bb6541bd97814ee6e88614a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzY4OGE4YjBkNzJmODIyZTFiYjY1NDFiZDk3ODE0ZWU2ZTg4NjE0YQ==", "commit": {"author": {"name": "Kai Tietz", "email": "kai.tietz@onevision.com", "date": "2010-04-09T08:52:54Z"}, "committer": {"name": "Kai Tietz", "email": "ktietz@gcc.gnu.org", "date": "2010-04-09T08:52:54Z"}, "message": "pr35504.C: Add check for thiscall.\n\n2010-04-09  Kai Tietz  <kai.tietz@onevision.com>\n\n        * g++.dg/other/pr35504.C: Add check for thiscall.\n        * g++.dg/torture/stackalign/eh-thiscall-1.C: New.\n        * gcc.dg/torture/stackalign/thiscall-1.c: New.\n\nFrom-SVN: r158153", "tree": {"sha": "eee5a99c8a459485d28fa8a9e4d06bc745fe431c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eee5a99c8a459485d28fa8a9e4d06bc745fe431c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c688a8b0d72f822e1bb6541bd97814ee6e88614a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c688a8b0d72f822e1bb6541bd97814ee6e88614a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c688a8b0d72f822e1bb6541bd97814ee6e88614a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c688a8b0d72f822e1bb6541bd97814ee6e88614a/comments", "author": null, "committer": null, "parents": [{"sha": "dc8d273907ba88cf11180a2fdf79f086feeb44f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc8d273907ba88cf11180a2fdf79f086feeb44f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc8d273907ba88cf11180a2fdf79f086feeb44f6"}], "stats": {"total": 92, "additions": 92, "deletions": 0}, "files": [{"sha": "09aa4cc63ecfe0f5b8acd9984c11cf6cdf27d6c1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c688a8b0d72f822e1bb6541bd97814ee6e88614a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c688a8b0d72f822e1bb6541bd97814ee6e88614a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c688a8b0d72f822e1bb6541bd97814ee6e88614a", "patch": "@@ -1,3 +1,9 @@\n+2010-04-09  Kai Tietz  <kai.tietz@onevision.com>\n+\n+\t* g++.dg/other/pr35504.C: Add check for thiscall.\n+\t* g++.dg/torture/stackalign/eh-thiscall-1.C: New.\n+\t* gcc.dg/torture/stackalign/thiscall-1.c: New.\n+\t\n 2010-04-09  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \tPR c++/28584"}, {"sha": "58422f24a1494bc258124d86c715e9ee0d63c416", "filename": "gcc/testsuite/g++.dg/other/pr35504.C", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c688a8b0d72f822e1bb6541bd97814ee6e88614a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr35504.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c688a8b0d72f822e1bb6541bd97814ee6e88614a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr35504.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr35504.C?ref=c688a8b0d72f822e1bb6541bd97814ee6e88614a", "patch": "@@ -8,6 +8,7 @@\n #define ATTR5 __attribute__((__stdcall__))\n #define ATTR6 __attribute__((__cdecl__))\n #define ATTR7\n+#define ATTR8 __attribute__((__thiscall__))\n \n extern \"C\" void abort (void);\n \n@@ -69,6 +70,11 @@ public:\n   {\n     return ret;\n   }\n+\n+  virtual ATTR8 struct long_struct method8 ()\n+  {\n+    return ret;\n+  }\n };\n \n class c3:c1, public c2\n@@ -126,6 +132,11 @@ public:\n   {\n     return check_this (7);\n   }\n+\n+  virtual ATTR8 struct long_struct method8 ()\n+  {\n+    return check_this (7);\n+  }\n };\n \n class c3 c3_instance;\n@@ -142,6 +153,7 @@ main ()\n   c2_ptr->method5 ();\n   c2_ptr->method6 ();\n   c2_ptr->method7 ();\n+  c2_ptr->method8 ();\n \n   return 0;\n }"}, {"sha": "de9bed55c1e8c0bf54280d8a0caa5ad6d40dd8df", "filename": "gcc/testsuite/g++.dg/torture/stackalign/eh-thiscall-1.C", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c688a8b0d72f822e1bb6541bd97814ee6e88614a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Feh-thiscall-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c688a8b0d72f822e1bb6541bd97814ee6e88614a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Feh-thiscall-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Feh-thiscall-1.C?ref=c688a8b0d72f822e1bb6541bd97814ee6e88614a", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do run { target { { i?86-*-* x86_64-*-* } && ilp32 } } } */\n+\n+#include \"check.h\"\n+\n+#ifndef ALIGNMENT\n+#define ALIGNMENT\t64\n+#endif\n+\n+typedef int aligned __attribute__((aligned(ALIGNMENT)));\n+\n+int global;\n+\n+class Base {};\n+\n+struct A : virtual public Base\n+{\n+  A() {}\n+};\n+\n+struct B {};\n+\n+__attribute__ ((thiscall))\n+void\n+foo (int j, int k, int m, int n, int o) throw (B,A)\n+{\n+  aligned i;\n+\n+  if (check_int (&i,  __alignof__(i)) != i)\n+    abort ();\n+\n+  if (i != 20 || j != 1 || k != 2 || m != 3 || n != 4 || o != 5)\n+    abort ();\n+\n+  throw A();\n+}\n+\n+int\n+main()\n+{\n+  try { foo (1, 2, 3, 4, 5); }\n+  catch (A& a) { }\n+  return 0;\n+}"}, {"sha": "6f22e07e371c4d103868bd029aa25a46590873d0", "filename": "gcc/testsuite/gcc.dg/torture/stackalign/thiscall-1.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c688a8b0d72f822e1bb6541bd97814ee6e88614a/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fthiscall-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c688a8b0d72f822e1bb6541bd97814ee6e88614a/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fthiscall-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fthiscall-1.c?ref=c688a8b0d72f822e1bb6541bd97814ee6e88614a", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do run { target { { i?86-*-* x86_64-*-* } && ilp32 } } } */\n+\n+#include \"check.h\"\n+\n+#ifndef ALIGNMENT\n+#define ALIGNMENT\t64\n+#endif\n+\n+typedef int aligned __attribute__((aligned(ALIGNMENT)));\n+\n+int global;\n+\n+__attribute__ ((thiscall))\n+void\n+foo (int j, int k, int m, int n, int o)\n+{\n+  aligned i;\n+\n+  if (check_int (&i,  __alignof__(i)) != i)\n+    abort ();\n+\n+  if (i != 20 || j != 1 || k != 2 || m != 3 || n != 4 || o != 5)\n+    abort ();\n+}\n+\n+int\n+main()\n+{\n+  foo (1, 2, 3, 4, 5);\n+  return 0;\n+}"}]}