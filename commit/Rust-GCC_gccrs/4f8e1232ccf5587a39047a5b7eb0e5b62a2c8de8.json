{"sha": "4f8e1232ccf5587a39047a5b7eb0e5b62a2c8de8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGY4ZTEyMzJjY2Y1NTg3YTM5MDQ3YTViN2ViMGU1YjYyYTJjOGRlOA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2001-09-04T21:04:59Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2001-09-04T21:04:59Z"}, "message": "decl.c (duplicate_decls): Remove code deadling with DECL_SAVED_INSNS.\n\n\t* decl.c (duplicate_decls): Remove code deadling with\n\tDECL_SAVED_INSNS.\n\t* decl2.c (finish_file): Likewise.\n\t* pt.c (instantiate_decl): Likewise.\n\t* semantics.c (expand_body): Don't defer local functions if\n\tthey wouldn't be deferred for some other reason.  Don't\n\tgenerate RTL for functions that will not be emitted.\n\t(genrtl_start_function): Remove code deadling with\n\tDECL_SAVED_INSNS.\n\t(genrtl_finish_function): Likewise.\n\nFrom-SVN: r45386", "tree": {"sha": "a4ded5c3fd5087e85a069d5f73b70ecc6a7a4999", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a4ded5c3fd5087e85a069d5f73b70ecc6a7a4999"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f8e1232ccf5587a39047a5b7eb0e5b62a2c8de8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f8e1232ccf5587a39047a5b7eb0e5b62a2c8de8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f8e1232ccf5587a39047a5b7eb0e5b62a2c8de8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f8e1232ccf5587a39047a5b7eb0e5b62a2c8de8/comments", "author": null, "committer": null, "parents": [{"sha": "93913281032a15d53d388055a8c1c52c87b1edf3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93913281032a15d53d388055a8c1c52c87b1edf3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93913281032a15d53d388055a8c1c52c87b1edf3"}], "stats": {"total": 93, "additions": 47, "deletions": 46}, "files": [{"sha": "4efd48db8aeb86bd519248bb795225cb7c6f1ee6", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f8e1232ccf5587a39047a5b7eb0e5b62a2c8de8/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f8e1232ccf5587a39047a5b7eb0e5b62a2c8de8/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4f8e1232ccf5587a39047a5b7eb0e5b62a2c8de8", "patch": "@@ -1,3 +1,16 @@\n+2001-09-04  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* decl.c (duplicate_decls): Remove code deadling with\n+\tDECL_SAVED_INSNS.\n+\t* decl2.c (finish_file): Likewise.\n+\t* pt.c (instantiate_decl): Likewise.\n+\t* semantics.c (expand_body): Don't defer local functions if\n+\tthey wouldn't be deferred for some other reason.  Don't\n+\tgenerate RTL for functions that will not be emitted.\n+\t(genrtl_start_function): Remove code deadling with\n+\tDECL_SAVED_INSNS.\n+\t(genrtl_finish_function): Likewise.\n+\n 2001-09-04  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR c++/4203"}, {"sha": "9020bb32188ec0604e7123255e77d29b2e3f5474", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f8e1232ccf5587a39047a5b7eb0e5b62a2c8de8/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f8e1232ccf5587a39047a5b7eb0e5b62a2c8de8/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=4f8e1232ccf5587a39047a5b7eb0e5b62a2c8de8", "patch": "@@ -3676,10 +3676,6 @@ duplicate_decls (newdecl, olddecl)\n \t    DECL_NUM_STMTS (newdecl) = DECL_NUM_STMTS (olddecl);\n \n \t  DECL_RESULT (newdecl) = DECL_RESULT (olddecl);\n-\t  if ((DECL_SAVED_INSNS (newdecl) = DECL_SAVED_INSNS (olddecl)))\n-\t    /* Previously saved insns go together with\n-\t       the function's previous definition.  */\n-\t    DECL_INITIAL (newdecl) = DECL_INITIAL (olddecl);\n \t  /* Don't clear out the arguments if we're redefining a function.  */\n \t  if (DECL_ARGUMENTS (olddecl))\n \t    DECL_ARGUMENTS (newdecl) = DECL_ARGUMENTS (olddecl);"}, {"sha": "749b8b5cb9f986c4243c024077e7e3c4ba5e539f", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f8e1232ccf5587a39047a5b7eb0e5b62a2c8de8/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f8e1232ccf5587a39047a5b7eb0e5b62a2c8de8/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=4f8e1232ccf5587a39047a5b7eb0e5b62a2c8de8", "patch": "@@ -3517,7 +3517,6 @@ finish_file ()\n \t  if (!DECL_EXTERNAL (decl)\n \t      && DECL_NEEDED_P (decl)\n \t      && DECL_SAVED_TREE (decl)\n-\t      && !DECL_SAVED_INSNS (decl)\n \t      && !TREE_ASM_WRITTEN (decl))\n \t    {\n \t      int saved_not_really_extern;"}, {"sha": "36e6cb504f7f695d3b50667878b1c2c52926c3be", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f8e1232ccf5587a39047a5b7eb0e5b62a2c8de8/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f8e1232ccf5587a39047a5b7eb0e5b62a2c8de8/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=4f8e1232ccf5587a39047a5b7eb0e5b62a2c8de8", "patch": "@@ -9881,7 +9881,8 @@ instantiate_decl (d, defer_ok)\n   /* Reject all external templates except inline functions.  */\n   else if (DECL_INTERFACE_KNOWN (d)\n \t   && ! DECL_NOT_REALLY_EXTERN (d)\n-\t   && ! (TREE_CODE (d) == FUNCTION_DECL && DECL_INLINE (d)))\n+\t   && ! (TREE_CODE (d) == FUNCTION_DECL \n+\t\t && DECL_INLINE (d)))\n     goto out;\n   /* Defer all other templates, unless we have been explicitly\n      forbidden from doing so.  We restore the source position here"}, {"sha": "6564f8e41695b64cd7265ef28edade9f8a889ac4", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 32, "deletions": 40, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f8e1232ccf5587a39047a5b7eb0e5b62a2c8de8/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f8e1232ccf5587a39047a5b7eb0e5b62a2c8de8/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=4f8e1232ccf5587a39047a5b7eb0e5b62a2c8de8", "patch": "@@ -2443,12 +2443,10 @@ expand_body (fn)\n      to decide whether to write it out or not.  */\n   if (/* We have to generate RTL if it's not an inline function.  */\n       (DECL_INLINE (fn) || DECL_COMDAT (fn))\n-      /* Or if we have to keep all inline functions anyhow.  */\n+      /* Or if we have to emit code for inline functions anyhow.  */\n       && !flag_keep_inline_functions\n       /* Or if we actually have a reference to the function.  */\n-      && !DECL_NEEDED_P (fn)\n-      /* Or if this is a nested function.  */\n-      && !decl_function_context (fn))\n+      && !DECL_NEEDED_P (fn))\n     {\n       /* Set DECL_EXTERNAL so that assemble_external will be called as\n \t necessary.  We'll clear it again in finish_file.  */\n@@ -2470,6 +2468,14 @@ expand_body (fn)\n   if (DECL_DECLARED_INLINE_P (fn))\n     import_export_decl (fn);\n \n+  /* If FN is external, then there's no point in generating RTL for\n+     it.  This situation can arise with an inline function under\n+     `-fexternal-tempaltes'; we instantiate the function, even though\n+     we're not planning on emitting it, in case we get a chance to\n+     inline it.  */\n+  if (DECL_EXTERNAL (fn))\n+    return;\n+\n   /* Emit any thunks that should be emitted at the same time as FN.  */\n   emit_associated_thunks (fn);\n \n@@ -2610,9 +2616,6 @@ genrtl_start_function (fn)\n \n   /* Create a binding level for the parameters.  */\n   expand_start_bindings (2);\n-  /* Clear out any previously saved instructions for this function, in\n-     case it was defined more than once.  */\n-  DECL_SAVED_INSNS (fn) = NULL;\n   /* Go through the PARM_DECLs for this function to see if any need\n      cleanups.  */\n   for (parm = DECL_ARGUMENTS (fn); parm; parm = TREE_CHAIN (parm))\n@@ -2643,6 +2646,7 @@ genrtl_finish_function (fn)\n      tree fn;\n {\n   tree no_return_label = NULL_TREE;\n+  tree t;\n \n #if 0\n   if (write_symbols != NO_DEBUG)\n@@ -2753,16 +2757,6 @@ genrtl_finish_function (fn)\n   if (function_depth > 1)\n     ggc_pop_context ();\n \n-  if (DECL_SAVED_INSNS (fn) && ! TREE_ASM_WRITTEN (fn))\n-    {\n-      /* Set DECL_EXTERNAL so that assemble_external will be called as\n-\t necessary.  We'll clear it again in finish_file.  */\n-      if (! DECL_EXTERNAL (fn))\n-\tDECL_NOT_REALLY_EXTERN (fn) = 1;\n-      DECL_EXTERNAL (fn) = 1;\n-      defer_fn (fn);\n-    }\n-\n #if 0\n   /* Keep this code around in case we later want to control debug info\n      based on whether a type is \"used\".  (jason 1999-11-11) */\n@@ -2785,32 +2779,30 @@ genrtl_finish_function (fn)\n \n   --function_depth;\n \n-  /* If we don't need the RTL for this function anymore, stop pointing\n-     to it.  That's especially important for LABEL_DECLs, since you\n-     can reach all the instructions in the function from the\n-     CODE_LABEL stored in the DECL_RTL for the LABEL_DECL.  */\n-  if (!DECL_SAVED_INSNS (fn))\n-    {\n-      tree t;\n-\n-      /* Walk the BLOCK-tree, clearing DECL_RTL for LABEL_DECLs and\n-\t non-static local variables.  */\n-      walk_tree_without_duplicates (&DECL_SAVED_TREE (fn),\n-\t\t\t\t    clear_decl_rtl,\n-\t\t\t\t    NULL);\n+  /* In C++, we should never be saving RTL for the function.  */\n+  my_friendly_assert (!DECL_SAVED_INSNS (fn), 20010903);\n \n-      /* Clear out the RTL for the arguments.  */\n-      for (t = DECL_ARGUMENTS (fn); t; t = TREE_CHAIN (t))\n-\t{\n-\t  SET_DECL_RTL (t, NULL_RTX);\n-\t  DECL_INCOMING_RTL (t) = NULL_RTX;\n-\t}\n+  /* Since we don't need the RTL for this function anymore, stop\n+     pointing to it.  That's especially important for LABEL_DECLs,\n+     since you can reach all the instructions in the function from the\n+     CODE_LABEL stored in the DECL_RTL for the LABEL_DECL.  Walk the\n+     BLOCK-tree, clearing DECL_RTL for LABEL_DECLs and non-static\n+     local variables.  */\n+  walk_tree_without_duplicates (&DECL_SAVED_TREE (fn),\n+\t\t\t\tclear_decl_rtl,\n+\t\t\t\tNULL);\n \n-      if (!(flag_inline_trees && DECL_INLINE (fn)))\n-\t/* DECL_INITIAL must remain nonzero so we know this was an\n-\t   actual function definition.  */\n-\tDECL_INITIAL (fn) = error_mark_node;\n+  /* Clear out the RTL for the arguments.  */\n+  for (t = DECL_ARGUMENTS (fn); t; t = TREE_CHAIN (t))\n+    {\n+      SET_DECL_RTL (t, NULL_RTX);\n+      DECL_INCOMING_RTL (t) = NULL_RTX;\n     }\n+\n+  if (!(flag_inline_trees && DECL_INLINE (fn)))\n+    /* DECL_INITIAL must remain nonzero so we know this was an\n+       actual function definition.  */\n+    DECL_INITIAL (fn) = error_mark_node;\n   \n   /* Let the error reporting routines know that we're outside a\n      function.  For a nested function, this value is used in"}]}