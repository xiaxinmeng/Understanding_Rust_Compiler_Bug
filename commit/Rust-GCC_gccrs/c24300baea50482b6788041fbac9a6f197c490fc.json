{"sha": "c24300baea50482b6788041fbac9a6f197c490fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzI0MzAwYmFlYTUwNDgyYjY3ODgwNDFmYmFjOWE2ZjE5N2M0OTBmYw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2018-10-09T23:37:19Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2018-10-09T23:37:19Z"}, "message": "Cleanup of libcpp diagnostic callbacks\n\nThis patch renames the \"error\" callback within libcpp\nto \"diagnostic\", and uses the pair of enums in cpplib.h, rather\nthan passing two different kinds of \"int\" around.\n\ngcc/c-family/ChangeLog:\n\t* c-common.c (c_option_controlling_cpp_error): Rename to...\n\t(c_option_controlling_cpp_diagnostic): ...this, and convert\n\t\"reason\" from int to enum.\n\t(c_cpp_error): Rename to...\n\t(c_cpp_diagnostic): ...this, converting level and reason to enums.\n\t* c-common.h (c_cpp_error): Rename to...\n\t(c_cpp_diagnostic): ...this, converting level and reason to enums.\n\t* c-opts.c (c_common_init_options): Update for renaming.\n\ngcc/fortran/ChangeLog:\n\t* cpp.c (gfc_cpp_init_0): Update for renamings.\n\t(cb_cpp_error): Rename to...\n\t(cb_cpp_diagnostic): ...this, converting level and reason to\n\tenums.\n\ngcc/ChangeLog:\n\t* genmatch.c (error_cb): Rename to...\n\t(diagnostic_cb): ...this, converting int params to enums.\n\t(fatal_at): Update for renaming.\n\t(warning_at): Likewise.\n\t(main): Likewise.\n\t* input.c (selftest::ebcdic_execution_charset::apply):\n\tUpdate for renaming of...\n\t(selftest::ebcdic_execution_charset::on_error): ...this, renaming\n\tto...\n\t(selftest::ebcdic_execution_charset::on_diagnostic): ...this,\n\tconverting level and reason to enums.\n\t(class selftest::lexer_error_sink): Rename to...\n\t(class selftest::lexer_test_options): ...this, renaming field\n\t\"m_errors\" to \"m_diagnostics\".\n\t(selftest::lexer_test_options::apply): Update for renaming of...\n\t(selftest::lexer_test_options::on_error): ...this, renaming to...\n\t(selftest::lexer_test_options::on_diagnostic): ...this\n\tconverting level and reason to enums.\n\t(selftest::test_lexer_string_locations_raw_string_unterminated):\n\tUpdate for renamings.\n\t* opth-gen.awk (struct cpp_reason_option_codes_t): Use enum for\n\t\"reason\".\n\nlibcpp/ChangeLog:\n\t* charset.c (noop_error_cb): Rename to...\n\t(noop_diagnostic_cb): ...this, converting params to enums.\n\t(cpp_interpret_string_ranges): Update for renaming and enums.\n\t* directives.c (check_eol_1): Convert reason to enum.\n\t(do_diagnostic): Convert code and reason to enum.\n\t(do_error): Use CPP_W_NONE rather than 0.\n\t(do_pragma_dependency): Likewise.\n\t* errors.c (cpp_diagnostic_at): Convert level and reason to enums.\n\tUpdate for renaming.\n\t(cpp_diagnostic): Convert level and reason to enums.\n\t(cpp_error): Convert level to enum.\n\t(cpp_warning): Convert reason to enums.\n\t(cpp_pedwarning): Likewise.\n\t(cpp_warning_syshdr): Likewise.\n\t(cpp_diagnostic_with_line): Convert level and reason to enums.\n\tUpdate for renaming.\n\t(cpp_error_with_line): Convert level to enum.\n\t(cpp_warning_with_line): Convert reason to enums.\n\t(cpp_pedwarning_with_line): Likewise.\n\t(cpp_warning_with_line_syshdr): Likewise.\n\t(cpp_error_at): Convert level to enum.\n\t(cpp_errno): Likewise.\n\t(cpp_errno_filename): Likewise.\n\t* include/cpplib.h (enum cpp_diagnostic_level): Name this enum,\n\tand move to before struct cpp_callbacks.\n\t(enum cpp_warning_reason): Likewise.\n\t(cpp_callbacks::diagnostic): Convert params from int to enums.\n\t(cpp_error): Convert int param to enum cpp_diagnostic_level.\n\t(cpp_warning): Convert int param to enum cpp_warning_reason.\n\t(cpp_pedwarning): Likewise.\n\t(cpp_warning_syshdr): Likewise.\n\t(cpp_errno): Convert int param to enum cpp_diagnostic_level.\n\t(cpp_errno_filename): Likewise.\n\t(cpp_error_with_line): Likewise.\n\t(cpp_warning_with_line): Convert int param to enum\n\tcpp_warning_reason.\n\t(cpp_pedwarning_with_line): Likewise.\n\t(cpp_warning_with_line_syshdr): Likewise.\n\t(cpp_error_at): Convert int param to enum cpp_diagnostic_level.\n\t* macro.c (create_iso_definition): Convert int to enum.\n\t(_cpp_create_definition): Likewise.\n\nFrom-SVN: r264999", "tree": {"sha": "d3e437990f8267770cb8b4857529ff0c2c7ab49e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d3e437990f8267770cb8b4857529ff0c2c7ab49e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c24300baea50482b6788041fbac9a6f197c490fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c24300baea50482b6788041fbac9a6f197c490fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c24300baea50482b6788041fbac9a6f197c490fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c24300baea50482b6788041fbac9a6f197c490fc/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5abdb369eb2f38272bb8ee2ea0488194942c7cff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5abdb369eb2f38272bb8ee2ea0488194942c7cff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5abdb369eb2f38272bb8ee2ea0488194942c7cff"}], "stats": {"total": 467, "additions": 294, "deletions": 173}, "files": [{"sha": "7260dd7ae65c9c69e2703f1ec886404edbd32cea", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c24300baea50482b6788041fbac9a6f197c490fc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c24300baea50482b6788041fbac9a6f197c490fc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c24300baea50482b6788041fbac9a6f197c490fc", "patch": "@@ -1,3 +1,28 @@\n+2018-10-09  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* genmatch.c (error_cb): Rename to...\n+\t(diagnostic_cb): ...this, converting int params to enums.\n+\t(fatal_at): Update for renaming.\n+\t(warning_at): Likewise.\n+\t(main): Likewise.\n+\t* input.c (selftest::ebcdic_execution_charset::apply):\n+\tUpdate for renaming of...\n+\t(selftest::ebcdic_execution_charset::on_error): ...this, renaming\n+\tto...\n+\t(selftest::ebcdic_execution_charset::on_diagnostic): ...this,\n+\tconverting level and reason to enums.\n+\t(class selftest::lexer_error_sink): Rename to...\n+\t(class selftest::lexer_test_options): ...this, renaming field\n+\t\"m_errors\" to \"m_diagnostics\".\n+\t(selftest::lexer_test_options::apply): Update for renaming of...\n+\t(selftest::lexer_test_options::on_error): ...this, renaming to...\n+\t(selftest::lexer_test_options::on_diagnostic): ...this\n+\tconverting level and reason to enums.\n+\t(selftest::test_lexer_string_locations_raw_string_unterminated):\n+\tUpdate for renamings.\n+\t* opth-gen.awk (struct cpp_reason_option_codes_t): Use enum for\n+\t\"reason\".\n+\n 2018-10-09  Paul A. Clarke  <pc@us.ibm.com>\n \n \t* config.gcc (powerpc*-*-*): Add pmmintrin.h to extra_headers."}, {"sha": "8e8005db5f7cccff3d4f8dd60d624cd8e5bd7e26", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c24300baea50482b6788041fbac9a6f197c490fc/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c24300baea50482b6788041fbac9a6f197c490fc/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=c24300baea50482b6788041fbac9a6f197c490fc", "patch": "@@ -1,3 +1,14 @@\n+2018-10-09  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* c-common.c (c_option_controlling_cpp_error): Rename to...\n+\t(c_option_controlling_cpp_diagnostic): ...this, and convert\n+\t\"reason\" from int to enum.\n+\t(c_cpp_error): Rename to...\n+\t(c_cpp_diagnostic): ...this, converting level and reason to enums.\n+\t* c-common.h (c_cpp_error): Rename to...\n+\t(c_cpp_diagnostic): ...this, converting level and reason to enums.\n+\t* c-opts.c (c_common_init_options): Update for renaming.\n+\n 2018-10-08  Richard Sandiford  <richard.sandiford@arm.com>\n \n \tPR c/87286"}, {"sha": "2e64a6b71ac18b62f56342bc27521c237da8bb82", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c24300baea50482b6788041fbac9a6f197c490fc/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c24300baea50482b6788041fbac9a6f197c490fc/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=c24300baea50482b6788041fbac9a6f197c490fc", "patch": "@@ -6068,7 +6068,7 @@ c_parse_error (const char *gmsgid, enum cpp_ttype token_type,\n    message, or 0 if none.  */\n \n static int\n-c_option_controlling_cpp_error (int reason)\n+c_option_controlling_cpp_diagnostic (enum cpp_warning_reason reason)\n {\n   const struct cpp_reason_option_codes_t *entry;\n \n@@ -6080,7 +6080,7 @@ c_option_controlling_cpp_error (int reason)\n   return 0;\n }\n \n-/* Callback from cpp_error for PFILE to print diagnostics from the\n+/* Callback from cpp_diagnostic for PFILE to print diagnostics from the\n    preprocessor.  The diagnostic is of type LEVEL, with REASON set\n    to the reason code if LEVEL is represents a warning, at location\n    RICHLOC unless this is after lexing and the compiler's location\n@@ -6089,9 +6089,11 @@ c_option_controlling_cpp_error (int reason)\n    otherwise.  */\n \n bool\n-c_cpp_error (cpp_reader *pfile ATTRIBUTE_UNUSED, int level, int reason,\n-\t     rich_location *richloc,\n-\t     const char *msg, va_list *ap)\n+c_cpp_diagnostic (cpp_reader *pfile ATTRIBUTE_UNUSED,\n+\t\t  enum cpp_diagnostic_level level,\n+\t\t  enum cpp_warning_reason reason,\n+\t\t  rich_location *richloc,\n+\t\t  const char *msg, va_list *ap)\n {\n   diagnostic_info diagnostic;\n   diagnostic_t dlevel;\n@@ -6134,8 +6136,9 @@ c_cpp_error (cpp_reader *pfile ATTRIBUTE_UNUSED, int level, int reason,\n     richloc->set_range (0, input_location, SHOW_RANGE_WITH_CARET);\n   diagnostic_set_info_translated (&diagnostic, msg, ap,\n \t\t\t\t  richloc, dlevel);\n-  diagnostic_override_option_index (&diagnostic,\n-                                    c_option_controlling_cpp_error (reason));\n+  diagnostic_override_option_index\n+    (&diagnostic,\n+     c_option_controlling_cpp_diagnostic (reason));\n   ret = diagnostic_report_diagnostic (global_dc, &diagnostic);\n   if (level == CPP_DL_WARNING_SYSHDR)\n     global_dc->dc_warn_system_headers = save_warn_system_headers;"}, {"sha": "70b152f459e781cb928f0559d4dc37a8d3c346fc", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c24300baea50482b6788041fbac9a6f197c490fc/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c24300baea50482b6788041fbac9a6f197c490fc/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=c24300baea50482b6788041fbac9a6f197c490fc", "patch": "@@ -1000,8 +1000,9 @@ extern void init_c_lex (void);\n \n extern void c_cpp_builtins (cpp_reader *);\n extern void c_cpp_builtins_optimize_pragma (cpp_reader *, tree, tree);\n-extern bool c_cpp_error (cpp_reader *, int, int, rich_location *,\n-\t\t\t const char *, va_list *)\n+extern bool c_cpp_diagnostic (cpp_reader *, enum cpp_diagnostic_level,\n+\t\t\t      enum cpp_warning_reason, rich_location *,\n+\t\t\t      const char *, va_list *)\n      ATTRIBUTE_GCC_DIAG(5,0);\n extern int c_common_has_attribute (cpp_reader *);\n "}, {"sha": "10cb53b2513a57c882dce552cd3dbe6f818c5796", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c24300baea50482b6788041fbac9a6f197c490fc/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c24300baea50482b6788041fbac9a6f197c490fc/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=c24300baea50482b6788041fbac9a6f197c490fc", "patch": "@@ -224,7 +224,7 @@ c_common_init_options (unsigned int decoded_options_count,\n   parse_in = cpp_create_reader (c_dialect_cxx () ? CLK_GNUCXX: CLK_GNUC89,\n \t\t\t\tident_hash, line_table);\n   cb = cpp_get_callbacks (parse_in);\n-  cb->error = c_cpp_error;\n+  cb->diagnostic = c_cpp_diagnostic;\n \n   cpp_opts = cpp_get_options (parse_in);\n   cpp_opts->dollars_in_ident = DOLLARS_IN_IDENTIFIERS;"}, {"sha": "0a7e5f5b76106c7ebab734ff23c63d07ae4513c1", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c24300baea50482b6788041fbac9a6f197c490fc/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c24300baea50482b6788041fbac9a6f197c490fc/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=c24300baea50482b6788041fbac9a6f197c490fc", "patch": "@@ -1,3 +1,10 @@\n+2018-10-09  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* cpp.c (gfc_cpp_init_0): Update for renamings.\n+\t(cb_cpp_error): Rename to...\n+\t(cb_cpp_diagnostic): ...this, converting level and reason to\n+\tenums.\n+\n 2018-10-09  Tobias Burnus <burnus@net-b.de>\n \n \tPR fortran/83522"}, {"sha": "3091eeb17f4d126f6db07bd18e288f539fd04dd6", "filename": "gcc/fortran/cpp.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c24300baea50482b6788041fbac9a6f197c490fc/gcc%2Ffortran%2Fcpp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c24300baea50482b6788041fbac9a6f197c490fc/gcc%2Ffortran%2Fcpp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcpp.c?ref=c24300baea50482b6788041fbac9a6f197c490fc", "patch": "@@ -142,8 +142,9 @@ static void cb_include (cpp_reader *, source_location, const unsigned char *,\n static void cb_ident (cpp_reader *, source_location, const cpp_string *);\n static void cb_used_define (cpp_reader *, source_location, cpp_hashnode *);\n static void cb_used_undef (cpp_reader *, source_location, cpp_hashnode *);\n-static bool cb_cpp_error (cpp_reader *, int, int, rich_location *,\n-\t\t\t  const char *, va_list *)\n+static bool cb_cpp_diagnostic (cpp_reader *, enum cpp_diagnostic_level,\n+\t\t\t       enum cpp_warning_reason, rich_location *,\n+\t\t\t       const char *, va_list *)\n      ATTRIBUTE_GCC_DIAG(5,0);\n void pp_dir_change (cpp_reader *, const char *);\n \n@@ -504,7 +505,7 @@ gfc_cpp_init_0 (void)\n   cb->line_change = cb_line_change;\n   cb->ident = cb_ident;\n   cb->def_pragma = cb_def_pragma;\n-  cb->error = cb_cpp_error;\n+  cb->diagnostic = cb_cpp_diagnostic;\n \n   if (gfc_cpp_option.dump_includes)\n     cb->include = cb_include;\n@@ -1020,9 +1021,11 @@ cb_used_define (cpp_reader *pfile, source_location line ATTRIBUTE_UNUSED,\n    Returns true if a diagnostic was emitted, false otherwise.  */\n \n static bool\n-cb_cpp_error (cpp_reader *pfile ATTRIBUTE_UNUSED, int level, int reason,\n-\t      rich_location *richloc,\n-\t      const char *msg, va_list *ap)\n+cb_cpp_diagnostic (cpp_reader *pfile ATTRIBUTE_UNUSED,\n+\t\t   enum cpp_diagnostic_level level,\n+\t\t   enum cpp_warning_reason reason,\n+\t\t   rich_location *richloc,\n+\t\t   const char *msg, va_list *ap)\n {\n   diagnostic_info diagnostic;\n   diagnostic_t dlevel;"}, {"sha": "62a876dc3dab2c2a1911d1041937cc4d8643b534", "filename": "gcc/genmatch.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c24300baea50482b6788041fbac9a6f197c490fc/gcc%2Fgenmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c24300baea50482b6788041fbac9a6f197c490fc/gcc%2Fgenmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmatch.c?ref=c24300baea50482b6788041fbac9a6f197c490fc", "patch": "@@ -73,8 +73,9 @@ static bool\n #if GCC_VERSION >= 4001\n __attribute__((format (printf, 5, 0)))\n #endif\n-error_cb (cpp_reader *, int errtype, int, rich_location *richloc,\n-\t  const char *msg, va_list *ap)\n+diagnostic_cb (cpp_reader *, enum cpp_diagnostic_level errtype,\n+\t       enum cpp_warning_reason, rich_location *richloc,\n+\t       const char *msg, va_list *ap)\n {\n   const line_map_ordinary *map;\n   source_location location = richloc->get_loc ();\n@@ -122,7 +123,7 @@ fatal_at (const cpp_token *tk, const char *msg, ...)\n   rich_location richloc (line_table, tk->src_loc);\n   va_list ap;\n   va_start (ap, msg);\n-  error_cb (NULL, CPP_DL_FATAL, 0, &richloc, msg, &ap);\n+  diagnostic_cb (NULL, CPP_DL_FATAL, CPP_W_NONE, &richloc, msg, &ap);\n   va_end (ap);\n }\n \n@@ -135,7 +136,7 @@ fatal_at (source_location loc, const char *msg, ...)\n   rich_location richloc (line_table, loc);\n   va_list ap;\n   va_start (ap, msg);\n-  error_cb (NULL, CPP_DL_FATAL, 0, &richloc, msg, &ap);\n+  diagnostic_cb (NULL, CPP_DL_FATAL, CPP_W_NONE, &richloc, msg, &ap);\n   va_end (ap);\n }\n \n@@ -148,7 +149,7 @@ warning_at (const cpp_token *tk, const char *msg, ...)\n   rich_location richloc (line_table, tk->src_loc);\n   va_list ap;\n   va_start (ap, msg);\n-  error_cb (NULL, CPP_DL_WARNING, 0, &richloc, msg, &ap);\n+  diagnostic_cb (NULL, CPP_DL_WARNING, CPP_W_NONE, &richloc, msg, &ap);\n   va_end (ap);\n }\n \n@@ -161,7 +162,7 @@ warning_at (source_location loc, const char *msg, ...)\n   rich_location richloc (line_table, loc);\n   va_list ap;\n   va_start (ap, msg);\n-  error_cb (NULL, CPP_DL_WARNING, 0, &richloc, msg, &ap);\n+  diagnostic_cb (NULL, CPP_DL_WARNING, CPP_W_NONE, &richloc, msg, &ap);\n   va_end (ap);\n }\n \n@@ -5071,7 +5072,7 @@ main (int argc, char **argv)\n \n   r = cpp_create_reader (CLK_GNUC99, NULL, line_table);\n   cpp_callbacks *cb = cpp_get_callbacks (r);\n-  cb->error = error_cb;\n+  cb->diagnostic = diagnostic_cb;\n \n   /* Add the build directory to the #include \"\" search path.  */\n   cpp_dir *dir = XCNEW (cpp_dir);"}, {"sha": "eeeb11ecc0ab262f480c3dd54e85eb0105a190b3", "filename": "gcc/input.c", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c24300baea50482b6788041fbac9a6f197c490fc/gcc%2Finput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c24300baea50482b6788041fbac9a6f197c490fc/gcc%2Finput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finput.c?ref=c24300baea50482b6788041fbac9a6f197c490fc", "patch": "@@ -2116,14 +2116,14 @@ class ebcdic_execution_charset : public lexer_test_options\n     cpp_opts->narrow_charset = \"IBM1047\";\n \n     cpp_callbacks *callbacks = cpp_get_callbacks (test.m_parser);\n-    callbacks->error = on_error;\n+    callbacks->diagnostic = on_diagnostic;\n   }\n \n-  static bool on_error (cpp_reader *pfile ATTRIBUTE_UNUSED,\n-\t\t\tint level ATTRIBUTE_UNUSED,\n-\t\t\tint reason ATTRIBUTE_UNUSED,\n-\t\t\trich_location *richloc ATTRIBUTE_UNUSED,\n-\t\t\tconst char *msgid, va_list *ap ATTRIBUTE_UNUSED)\n+  static bool on_diagnostic (cpp_reader *pfile ATTRIBUTE_UNUSED,\n+\t\t\t     enum cpp_diagnostic_level level ATTRIBUTE_UNUSED,\n+\t\t\t     enum cpp_warning_reason reason ATTRIBUTE_UNUSED,\n+\t\t\t     rich_location *richloc ATTRIBUTE_UNUSED,\n+\t\t\t     const char *msgid, va_list *ap ATTRIBUTE_UNUSED)\n     ATTRIBUTE_FPTR_PRINTF(5,0)\n   {\n     gcc_assert (s_singleton);\n@@ -2153,53 +2153,53 @@ class ebcdic_execution_charset : public lexer_test_options\n \n ebcdic_execution_charset *ebcdic_execution_charset::s_singleton;\n \n-/* A lexer_test_options subclass that records a list of error\n+/* A lexer_test_options subclass that records a list of diagnostic\n    messages emitted by the lexer.  */\n \n-class lexer_error_sink : public lexer_test_options\n+class lexer_diagnostic_sink : public lexer_test_options\n {\n  public:\n-  lexer_error_sink ()\n+  lexer_diagnostic_sink ()\n   {\n     gcc_assert (s_singleton == NULL);\n     s_singleton = this;\n   }\n-  ~lexer_error_sink ()\n+  ~lexer_diagnostic_sink ()\n   {\n     gcc_assert (s_singleton == this);\n     s_singleton = NULL;\n \n     int i;\n     char *str;\n-    FOR_EACH_VEC_ELT (m_errors, i, str)\n+    FOR_EACH_VEC_ELT (m_diagnostics, i, str)\n       free (str);\n   }\n \n   void apply (lexer_test &test) FINAL OVERRIDE\n   {\n     cpp_callbacks *callbacks = cpp_get_callbacks (test.m_parser);\n-    callbacks->error = on_error;\n+    callbacks->diagnostic = on_diagnostic;\n   }\n \n-  static bool on_error (cpp_reader *pfile ATTRIBUTE_UNUSED,\n-\t\t\tint level ATTRIBUTE_UNUSED,\n-\t\t\tint reason ATTRIBUTE_UNUSED,\n-\t\t\trich_location *richloc ATTRIBUTE_UNUSED,\n-\t\t\tconst char *msgid, va_list *ap)\n+  static bool on_diagnostic (cpp_reader *pfile ATTRIBUTE_UNUSED,\n+\t\t\t     enum cpp_diagnostic_level level ATTRIBUTE_UNUSED,\n+\t\t\t     enum cpp_warning_reason reason ATTRIBUTE_UNUSED,\n+\t\t\t     rich_location *richloc ATTRIBUTE_UNUSED,\n+\t\t\t     const char *msgid, va_list *ap)\n     ATTRIBUTE_FPTR_PRINTF(5,0)\n   {\n     char *msg = xvasprintf (msgid, *ap);\n-    s_singleton->m_errors.safe_push (msg);\n+    s_singleton->m_diagnostics.safe_push (msg);\n     return true;\n   }\n \n-  auto_vec<char *> m_errors;\n+  auto_vec<char *> m_diagnostics;\n \n  private:\n-  static lexer_error_sink *s_singleton;\n+  static lexer_diagnostic_sink *s_singleton;\n };\n \n-lexer_error_sink *lexer_error_sink::s_singleton;\n+lexer_diagnostic_sink *lexer_diagnostic_sink::s_singleton;\n \n /* Constructor.  Override line_table with a new instance based on CASE_,\n    and write CONTENT to a tempfile.  Create a cpp_reader, and use it to\n@@ -3413,21 +3413,21 @@ test_lexer_string_locations_raw_string_unterminated (const line_table_case &case\n {\n   const char *content = \"R\\\"ouch()ouCh\\\" /* etc */\";\n \n-  lexer_error_sink errors;\n-  lexer_test test (case_, content, &errors);\n+  lexer_diagnostic_sink diagnostics;\n+  lexer_test test (case_, content, &diagnostics);\n   test.m_implicitly_expect_EOF = false;\n \n   /* Attempt to parse the raw string.  */\n   const cpp_token *tok = test.get_token ();\n   ASSERT_EQ (tok->type, CPP_EOF);\n \n-  ASSERT_EQ (1, errors.m_errors.length ());\n+  ASSERT_EQ (1, diagnostics.m_diagnostics.length ());\n   /* We expect the message \"unterminated raw string\"\n      in the \"cpplib\" translation domain.\n      It's not clear that dgettext is available on all supported hosts,\n      so this assertion is commented-out for now.\n        ASSERT_STREQ (dgettext (\"cpplib\", \"unterminated raw string\"),\n-                     errors.m_errors[0]);\n+                     diagnostics.m_diagnostics[0]);\n   */\n }\n "}, {"sha": "de2d29f225a5125902a6a9c64091d8a1a809ee1c", "filename": "gcc/opth-gen.awk", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c24300baea50482b6788041fbac9a6f197c490fc/gcc%2Fopth-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c24300baea50482b6788041fbac9a6f197c490fc/gcc%2Fopth-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopth-gen.awk?ref=c24300baea50482b6788041fbac9a6f197c490fc", "patch": "@@ -503,8 +503,10 @@ print \"/* Mapping from cpp message reasons to the options that enable them.  */\"\n print \"#include <cpplib.h>\"\n print \"struct cpp_reason_option_codes_t\"\n print \"{\"\n-print \"  const int reason;\t\t/* cpplib message reason.  */\"\n-print \"  const int option_code;\t/* gcc option that controls this message.  */\"\n+print \"  /* cpplib message reason.  */\"\n+print \"  const enum cpp_warning_reason reason;\"\n+print \"  /* gcc option that controls this message.  */\"\n+print \"  const int option_code;\"\n print \"};\"\n print \"\"\n print \"static const struct cpp_reason_option_codes_t cpp_reason_option_codes[] = {\""}, {"sha": "66811015aa980989ae8b0abee5777c8b43c81ce9", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c24300baea50482b6788041fbac9a6f197c490fc/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c24300baea50482b6788041fbac9a6f197c490fc/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=c24300baea50482b6788041fbac9a6f197c490fc", "patch": "@@ -1,3 +1,47 @@\n+2018-10-09  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* charset.c (noop_error_cb): Rename to...\n+\t(noop_diagnostic_cb): ...this, converting params to enums.\n+\t(cpp_interpret_string_ranges): Update for renaming and enums.\n+\t* directives.c (check_eol_1): Convert reason to enum.\n+\t(do_diagnostic): Convert code and reason to enum.\n+\t(do_error): Use CPP_W_NONE rather than 0.\n+\t(do_pragma_dependency): Likewise.\n+\t* errors.c (cpp_diagnostic_at): Convert level and reason to enums.\n+\tUpdate for renaming.\n+\t(cpp_diagnostic): Convert level and reason to enums.\n+\t(cpp_error): Convert level to enum.\n+\t(cpp_warning): Convert reason to enums.\n+\t(cpp_pedwarning): Likewise.\n+\t(cpp_warning_syshdr): Likewise.\n+\t(cpp_diagnostic_with_line): Convert level and reason to enums.\n+\tUpdate for renaming.\n+\t(cpp_error_with_line): Convert level to enum.\n+\t(cpp_warning_with_line): Convert reason to enums.\n+\t(cpp_pedwarning_with_line): Likewise.\n+\t(cpp_warning_with_line_syshdr): Likewise.\n+\t(cpp_error_at): Convert level to enum.\n+\t(cpp_errno): Likewise.\n+\t(cpp_errno_filename): Likewise.\n+\t* include/cpplib.h (enum cpp_diagnostic_level): Name this enum,\n+\tand move to before struct cpp_callbacks.\n+\t(enum cpp_warning_reason): Likewise.\n+\t(cpp_callbacks::diagnostic): Convert params from int to enums.\n+\t(cpp_error): Convert int param to enum cpp_diagnostic_level.\n+\t(cpp_warning): Convert int param to enum cpp_warning_reason.\n+\t(cpp_pedwarning): Likewise.\n+\t(cpp_warning_syshdr): Likewise.\n+\t(cpp_errno): Convert int param to enum cpp_diagnostic_level.\n+\t(cpp_errno_filename): Likewise.\n+\t(cpp_error_with_line): Likewise.\n+\t(cpp_warning_with_line): Convert int param to enum\n+\tcpp_warning_reason.\n+\t(cpp_pedwarning_with_line): Likewise.\n+\t(cpp_warning_with_line_syshdr): Likewise.\n+\t(cpp_error_at): Convert int param to enum cpp_diagnostic_level.\n+\t* macro.c (create_iso_definition): Convert int to enum.\n+\t(_cpp_create_definition): Likewise.\n+\n 2018-09-17  David Malcolm  <dmalcolm@redhat.com>\n \n \t* include/line-map.h (range_label::get_text): Add param"}, {"sha": "36c57a6a04673b65cd85888d1bd354bdd7bfff6e", "filename": "libcpp/charset.c", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c24300baea50482b6788041fbac9a6f197c490fc/libcpp%2Fcharset.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c24300baea50482b6788041fbac9a6f197c490fc/libcpp%2Fcharset.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fcharset.c?ref=c24300baea50482b6788041fbac9a6f197c490fc", "patch": "@@ -1693,13 +1693,14 @@ cpp_interpret_string (cpp_reader *pfile, const cpp_string *from, size_t count,\n   return cpp_interpret_string_1 (pfile, from, count, to, type, NULL, NULL);\n }\n \n-/* A \"do nothing\" error-handling callback for use by\n+/* A \"do nothing\" diagnostic-handling callback for use by\n    cpp_interpret_string_ranges, so that it can temporarily suppress\n-   error-handling.  */\n+   diagnostic-handling.  */\n \n static bool\n-noop_error_cb (cpp_reader *, int, int, rich_location *,\n-\t       const char *, va_list *)\n+noop_diagnostic_cb (cpp_reader *, enum cpp_diagnostic_level,\n+\t\t    enum cpp_warning_reason, rich_location *,\n+\t\t    const char *, va_list *)\n {\n   /* no-op.  */\n   return true;\n@@ -1737,25 +1738,26 @@ cpp_interpret_string_ranges (cpp_reader *pfile, const cpp_string *from,\n     return \"execution character set != source character set\";\n \n   /* For on-demand strings we have already lexed the strings, so there\n-     should be no errors.  However, if we have bogus source location\n+     should be no diagnostics.  However, if we have bogus source location\n      data (or stringified macro arguments), the attempt to lex the\n-     strings could fail with an error.  Temporarily install an\n-     error-handler to catch the error, so that it can lead to this call\n+     strings could fail with an diagnostic.  Temporarily install an\n+     diagnostic-handler to catch the diagnostic, so that it can lead to this call\n      failing, rather than being emitted as a user-visible diagnostic.\n-     If an error does occur, we should see it via the return value of\n+     If an diagnostic does occur, we should see it via the return value of\n      cpp_interpret_string_1.  */\n-  bool (*saved_error_handler) (cpp_reader *, int, int, rich_location *,\n-\t\t\t       const char *, va_list *)\n+  bool (*saved_diagnostic_handler) (cpp_reader *, enum cpp_diagnostic_level,\n+\t\t\t\t    enum cpp_warning_reason, rich_location *,\n+\t\t\t\t    const char *, va_list *)\n     ATTRIBUTE_FPTR_PRINTF(5,0);\n \n-  saved_error_handler = pfile->cb.error;\n-  pfile->cb.error = noop_error_cb;\n+  saved_diagnostic_handler = pfile->cb.diagnostic;\n+  pfile->cb.diagnostic = noop_diagnostic_cb;\n \n   bool result = cpp_interpret_string_1 (pfile, from, count, NULL, type,\n \t\t\t\t\tloc_readers, out);\n \n-  /* Restore the saved error-handler.  */\n-  pfile->cb.error = saved_error_handler;\n+  /* Restore the saved diagnostic-handler.  */\n+  pfile->cb.diagnostic = saved_diagnostic_handler;\n \n   if (!result)\n     return \"cpp_interpret_string_1 failed\";"}, {"sha": "9793e6b65b13cce1fc5cadcb484500276125d429", "filename": "libcpp/directives.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c24300baea50482b6788041fbac9a6f197c490fc/libcpp%2Fdirectives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c24300baea50482b6788041fbac9a6f197c490fc/libcpp%2Fdirectives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fdirectives.c?ref=c24300baea50482b6788041fbac9a6f197c490fc", "patch": "@@ -102,7 +102,8 @@ static const char *parse_include (cpp_reader *, int *, const cpp_token ***,\n static void push_conditional (cpp_reader *, int, int, const cpp_hashnode *);\n static unsigned int read_flag (cpp_reader *, unsigned int);\n static bool strtolinenum (const uchar *, size_t, linenum_type *, bool *);\n-static void do_diagnostic (cpp_reader *, int, int, int);\n+static void do_diagnostic (cpp_reader *, enum cpp_diagnostic_level code,\n+\t\t\t   enum cpp_warning_reason reason, int);\n static cpp_hashnode *lex_macro_node (cpp_reader *, bool);\n static int undefine_macros (cpp_reader *, cpp_hashnode *, void *);\n static void do_include_common (cpp_reader *, enum include_type);\n@@ -227,7 +228,7 @@ skip_rest_of_line (cpp_reader *pfile)\n /* Helper function for check_oel.  */\n \n static void\n-check_eol_1 (cpp_reader *pfile, bool expand, int reason)\n+check_eol_1 (cpp_reader *pfile, bool expand, enum cpp_warning_reason reason)\n {\n   if (! SEEN_EOL () && (expand\n \t\t\t? cpp_get_token (pfile)\n@@ -1140,7 +1141,8 @@ _cpp_do_file_change (cpp_reader *pfile, enum lc_reason reason,\n /* Report a warning or error detected by the program we are\n    processing.  Use the directive's tokens in the error message.  */\n static void\n-do_diagnostic (cpp_reader *pfile, int code, int reason, int print_dir)\n+do_diagnostic (cpp_reader *pfile, enum cpp_diagnostic_level code,\n+\t       enum cpp_warning_reason reason, int print_dir)\n {\n   const unsigned char *dir_name;\n   unsigned char *line;\n@@ -1166,7 +1168,7 @@ do_diagnostic (cpp_reader *pfile, int code, int reason, int print_dir)\n static void\n do_error (cpp_reader *pfile)\n {\n-  do_diagnostic (pfile, CPP_DL_ERROR, 0, 1);\n+  do_diagnostic (pfile, CPP_DL_ERROR, CPP_W_NONE, 1);\n }\n \n static void\n@@ -1720,7 +1722,7 @@ do_pragma_dependency (cpp_reader *pfile)\n       if (cpp_get_token (pfile)->type != CPP_EOF)\n \t{\n \t  _cpp_backup_tokens (pfile, 1);\n-\t  do_diagnostic (pfile, CPP_DL_WARNING, 0, 0);\n+\t  do_diagnostic (pfile, CPP_DL_WARNING, CPP_W_NONE, 0);\n \t}\n     }\n "}, {"sha": "2268fc49f0d78fcd9421e247107b07473ceaf02b", "filename": "libcpp/errors.c", "status": "modified", "additions": 37, "deletions": 29, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c24300baea50482b6788041fbac9a6f197c490fc/libcpp%2Ferrors.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c24300baea50482b6788041fbac9a6f197c490fc/libcpp%2Ferrors.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Ferrors.c?ref=c24300baea50482b6788041fbac9a6f197c490fc", "patch": "@@ -31,15 +31,15 @@ along with this program; see the file COPYING3.  If not see\n \n ATTRIBUTE_FPTR_PRINTF(5,0)\n static bool\n-cpp_diagnostic_at (cpp_reader * pfile, int level, int reason,\n-\t\t   rich_location *richloc,\n+cpp_diagnostic_at (cpp_reader * pfile, enum cpp_diagnostic_level level,\n+\t\t   enum cpp_warning_reason reason, rich_location *richloc,\n \t\t   const char *msgid, va_list *ap)\n {\n   bool ret;\n \n-  if (!pfile->cb.error)\n+  if (!pfile->cb.diagnostic)\n     abort ();\n-  ret = pfile->cb.error (pfile, level, reason, richloc, _(msgid), ap);\n+  ret = pfile->cb.diagnostic (pfile, level, reason, richloc, _(msgid), ap);\n \n   return ret;\n }\n@@ -48,8 +48,9 @@ cpp_diagnostic_at (cpp_reader * pfile, int level, int reason,\n \n ATTRIBUTE_FPTR_PRINTF(4,0)\n static bool\n-cpp_diagnostic (cpp_reader * pfile, int level, int reason,\n-                const char *msgid, va_list *ap)\n+cpp_diagnostic (cpp_reader * pfile, enum cpp_diagnostic_level level,\n+\t\tenum cpp_warning_reason reason,\n+\t\tconst char *msgid, va_list *ap)\n {\n   source_location src_loc;\n \n@@ -77,7 +78,8 @@ cpp_diagnostic (cpp_reader * pfile, int level, int reason,\n /* Print a warning or error, depending on the value of LEVEL.  */\n \n bool\n-cpp_error (cpp_reader * pfile, int level, const char *msgid, ...)\n+cpp_error (cpp_reader * pfile, enum cpp_diagnostic_level level,\n+\t   const char *msgid, ...)\n {\n   va_list ap;\n   bool ret;\n@@ -93,7 +95,8 @@ cpp_error (cpp_reader * pfile, int level, const char *msgid, ...)\n /* Print a warning.  The warning reason may be given in REASON.  */\n \n bool\n-cpp_warning (cpp_reader * pfile, int reason, const char *msgid, ...)\n+cpp_warning (cpp_reader * pfile, enum cpp_warning_reason reason,\n+\t     const char *msgid, ...)\n {\n   va_list ap;\n   bool ret;\n@@ -109,7 +112,8 @@ cpp_warning (cpp_reader * pfile, int reason, const char *msgid, ...)\n /* Print a pedantic warning.  The warning reason may be given in REASON.  */\n \n bool\n-cpp_pedwarning (cpp_reader * pfile, int reason, const char *msgid, ...)\n+cpp_pedwarning (cpp_reader * pfile, enum cpp_warning_reason reason,\n+\t\tconst char *msgid, ...)\n {\n   va_list ap;\n   bool ret;\n@@ -126,7 +130,8 @@ cpp_pedwarning (cpp_reader * pfile, int reason, const char *msgid, ...)\n    given in REASON.  */\n \n bool\n-cpp_warning_syshdr (cpp_reader * pfile, int reason, const char *msgid, ...)\n+cpp_warning_syshdr (cpp_reader * pfile, enum cpp_warning_reason reason,\n+\t\t    const char *msgid, ...)\n {\n   va_list ap;\n   bool ret;\n@@ -143,26 +148,27 @@ cpp_warning_syshdr (cpp_reader * pfile, int reason, const char *msgid, ...)\n \n ATTRIBUTE_FPTR_PRINTF(6,0)\n static bool\n-cpp_diagnostic_with_line (cpp_reader * pfile, int level, int reason,\n-\t\t          source_location src_loc, unsigned int column,\n-\t\t          const char *msgid, va_list *ap)\n+cpp_diagnostic_with_line (cpp_reader * pfile, enum cpp_diagnostic_level level,\n+\t\t\t  enum cpp_warning_reason reason,\n+\t\t\t  source_location src_loc, unsigned int column,\n+\t\t\t  const char *msgid, va_list *ap)\n {\n   bool ret;\n   \n-  if (!pfile->cb.error)\n+  if (!pfile->cb.diagnostic)\n     abort ();\n   rich_location richloc (pfile->line_table, src_loc);\n   if (column)\n     richloc.override_column (column);\n-  ret = pfile->cb.error (pfile, level, reason, &richloc, _(msgid), ap);\n+  ret = pfile->cb.diagnostic (pfile, level, reason, &richloc, _(msgid), ap);\n \n   return ret;\n }\n \n /* Print a warning or error, depending on the value of LEVEL.  */\n \n bool\n-cpp_error_with_line (cpp_reader *pfile, int level,\n+cpp_error_with_line (cpp_reader *pfile, enum cpp_diagnostic_level level,\n \t\t     source_location src_loc, unsigned int column,\n \t\t     const char *msgid, ...)\n {\n@@ -181,7 +187,7 @@ cpp_error_with_line (cpp_reader *pfile, int level,\n /* Print a warning.  The warning reason may be given in REASON.  */\n \n bool\n-cpp_warning_with_line (cpp_reader *pfile, int reason,\n+cpp_warning_with_line (cpp_reader *pfile, enum cpp_warning_reason reason,\n \t\t       source_location src_loc, unsigned int column,\n \t\t       const char *msgid, ...)\n {\n@@ -200,9 +206,9 @@ cpp_warning_with_line (cpp_reader *pfile, int reason,\n /* Print a pedantic warning.  The warning reason may be given in REASON.  */\n \n bool\n-cpp_pedwarning_with_line (cpp_reader *pfile, int reason,\n-\t\t          source_location src_loc, unsigned int column,\n-\t\t          const char *msgid, ...)\n+cpp_pedwarning_with_line (cpp_reader *pfile, enum cpp_warning_reason reason,\n+\t\t\t  source_location src_loc, unsigned int column,\n+\t\t\t  const char *msgid, ...)\n {\n   va_list ap;\n   bool ret;\n@@ -220,9 +226,9 @@ cpp_pedwarning_with_line (cpp_reader *pfile, int reason,\n    given in REASON.  */\n \n bool\n-cpp_warning_with_line_syshdr (cpp_reader *pfile, int reason,\n-\t\t              source_location src_loc, unsigned int column,\n-\t\t              const char *msgid, ...)\n+cpp_warning_with_line_syshdr (cpp_reader *pfile, enum cpp_warning_reason reason,\n+\t\t\t      source_location src_loc, unsigned int column,\n+\t\t\t      const char *msgid, ...)\n {\n   va_list ap;\n   bool ret;\n@@ -240,8 +246,8 @@ cpp_warning_with_line_syshdr (cpp_reader *pfile, int reason,\n    a column override.  */\n \n bool\n-cpp_error_at (cpp_reader * pfile, int level, source_location src_loc,\n-\t      const char *msgid, ...)\n+cpp_error_at (cpp_reader * pfile, enum cpp_diagnostic_level level,\n+\t      source_location src_loc, const char *msgid, ...)\n {\n   va_list ap;\n   bool ret;\n@@ -260,8 +266,8 @@ cpp_error_at (cpp_reader * pfile, int level, source_location src_loc,\n    a column override.  */\n \n bool\n-cpp_error_at (cpp_reader * pfile, int level, rich_location *richloc,\n-\t      const char *msgid, ...)\n+cpp_error_at (cpp_reader * pfile, enum cpp_diagnostic_level level,\n+\t      rich_location *richloc, const char *msgid, ...)\n {\n   va_list ap;\n   bool ret;\n@@ -279,7 +285,8 @@ cpp_error_at (cpp_reader * pfile, int level, rich_location *richloc,\n    information from errno.  */\n \n bool\n-cpp_errno (cpp_reader *pfile, int level, const char *msgid)\n+cpp_errno (cpp_reader *pfile, enum cpp_diagnostic_level level,\n+\t   const char *msgid)\n {\n   return cpp_error (pfile, level, \"%s: %s\", _(msgid), xstrerror (errno));\n }\n@@ -289,7 +296,8 @@ cpp_errno (cpp_reader *pfile, int level, const char *msgid)\n    that is not localized, but \"\" is replaced with localized \"stdout\".  */\n \n bool\n-cpp_errno_filename (cpp_reader *pfile, int level, const char *filename,\n+cpp_errno_filename (cpp_reader *pfile, enum cpp_diagnostic_level level,\n+\t\t    const char *filename,\n \t\t    source_location loc)\n {\n   if (filename[0] == '\\0')"}, {"sha": "797cfb92e78c251887afd6eba778378d82474d59", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 85, "deletions": 73, "changes": 158, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c24300baea50482b6788041fbac9a6f197c490fc/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c24300baea50482b6788041fbac9a6f197c490fc/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=c24300baea50482b6788041fbac9a6f197c490fc", "patch": "@@ -549,6 +549,59 @@ struct cpp_options\n   bool canonical_system_headers;\n };\n \n+/* Diagnostic levels.  To get a diagnostic without associating a\n+   position in the translation unit with it, use cpp_error_with_line\n+   with a line number of zero.  */\n+\n+enum cpp_diagnostic_level {\n+  /* Warning, an error with -Werror.  */\n+  CPP_DL_WARNING = 0,\n+  /* Same as CPP_DL_WARNING, except it is not suppressed in system headers.  */\n+  CPP_DL_WARNING_SYSHDR,\n+  /* Warning, an error with -pedantic-errors or -Werror.  */\n+  CPP_DL_PEDWARN,\n+  /* An error.  */\n+  CPP_DL_ERROR,\n+  /* An internal consistency check failed.  Prints \"internal error: \",\n+     otherwise the same as CPP_DL_ERROR.  */\n+  CPP_DL_ICE,\n+  /* An informative note following a warning.  */\n+  CPP_DL_NOTE,\n+  /* A fatal error.  */\n+  CPP_DL_FATAL\n+};\n+\n+/* Warning reason codes. Use a reason code of CPP_W_NONE for unclassified\n+   warnings and diagnostics that are not warnings.  */\n+\n+enum cpp_warning_reason {\n+  CPP_W_NONE = 0,\n+  CPP_W_DEPRECATED,\n+  CPP_W_COMMENTS,\n+  CPP_W_MISSING_INCLUDE_DIRS,\n+  CPP_W_TRIGRAPHS,\n+  CPP_W_MULTICHAR,\n+  CPP_W_TRADITIONAL,\n+  CPP_W_LONG_LONG,\n+  CPP_W_ENDIF_LABELS,\n+  CPP_W_NUM_SIGN_CHANGE,\n+  CPP_W_VARIADIC_MACROS,\n+  CPP_W_BUILTIN_MACRO_REDEFINED,\n+  CPP_W_DOLLARS,\n+  CPP_W_UNDEF,\n+  CPP_W_UNUSED_MACROS,\n+  CPP_W_CXX_OPERATOR_NAMES,\n+  CPP_W_NORMALIZE,\n+  CPP_W_INVALID_PCH,\n+  CPP_W_WARNING_DIRECTIVE,\n+  CPP_W_LITERAL_SUFFIX,\n+  CPP_W_DATE_TIME,\n+  CPP_W_PEDANTIC,\n+  CPP_W_C90_C99_COMPAT,\n+  CPP_W_CXX11_COMPAT,\n+  CPP_W_EXPANSION_TO_DEFINED\n+};\n+\n /* Callback for header lookup for HEADER, which is the name of a\n    source file.  It is used as a method of last resort to find headers\n    that are not otherwise found during the normal include processing.\n@@ -586,8 +639,11 @@ struct cpp_callbacks\n \n   /* Called to emit a diagnostic.  This callback receives the\n      translated message.  */\n-  bool (*error) (cpp_reader *, int, int, rich_location *,\n-\t\t const char *, va_list *)\n+  bool (*diagnostic) (cpp_reader *,\n+\t\t      enum cpp_diagnostic_level,\n+\t\t      enum cpp_warning_reason,\n+\t\t      rich_location *,\n+\t\t      const char *, va_list *)\n        ATTRIBUTE_FPTR_PRINTF(5,0);\n \n   /* Callbacks for when a macro is expanded, or tested (whether\n@@ -1084,99 +1140,55 @@ extern cpp_num cpp_interpret_integer (cpp_reader *, const cpp_token *,\n    others assumed clear, to fill out a cpp_num structure.  */\n cpp_num cpp_num_sign_extend (cpp_num, size_t);\n \n-/* Diagnostic levels.  To get a diagnostic without associating a\n-   position in the translation unit with it, use cpp_error_with_line\n-   with a line number of zero.  */\n-\n-enum {\n-  /* Warning, an error with -Werror.  */\n-  CPP_DL_WARNING = 0,\n-  /* Same as CPP_DL_WARNING, except it is not suppressed in system headers.  */\n-  CPP_DL_WARNING_SYSHDR,\n-  /* Warning, an error with -pedantic-errors or -Werror.  */\n-  CPP_DL_PEDWARN,\n-  /* An error.  */\n-  CPP_DL_ERROR,\n-  /* An internal consistency check failed.  Prints \"internal error: \",\n-     otherwise the same as CPP_DL_ERROR.  */\n-  CPP_DL_ICE,\n-  /* An informative note following a warning.  */\n-  CPP_DL_NOTE,\n-  /* A fatal error.  */\n-  CPP_DL_FATAL\n-};\n-\n-/* Warning reason codes. Use a reason code of zero for unclassified warnings\n-   and errors that are not warnings.  */\n-enum {\n-  CPP_W_NONE = 0,\n-  CPP_W_DEPRECATED,\n-  CPP_W_COMMENTS,\n-  CPP_W_MISSING_INCLUDE_DIRS,\n-  CPP_W_TRIGRAPHS,\n-  CPP_W_MULTICHAR,\n-  CPP_W_TRADITIONAL,\n-  CPP_W_LONG_LONG,\n-  CPP_W_ENDIF_LABELS,\n-  CPP_W_NUM_SIGN_CHANGE,\n-  CPP_W_VARIADIC_MACROS,\n-  CPP_W_BUILTIN_MACRO_REDEFINED,\n-  CPP_W_DOLLARS,\n-  CPP_W_UNDEF,\n-  CPP_W_UNUSED_MACROS,\n-  CPP_W_CXX_OPERATOR_NAMES,\n-  CPP_W_NORMALIZE,\n-  CPP_W_INVALID_PCH,\n-  CPP_W_WARNING_DIRECTIVE,\n-  CPP_W_LITERAL_SUFFIX,\n-  CPP_W_DATE_TIME,\n-  CPP_W_PEDANTIC,\n-  CPP_W_C90_C99_COMPAT,\n-  CPP_W_CXX11_COMPAT,\n-  CPP_W_EXPANSION_TO_DEFINED\n-};\n-\n /* Output a diagnostic of some kind.  */\n-extern bool cpp_error (cpp_reader *, int, const char *msgid, ...)\n+extern bool cpp_error (cpp_reader *, enum cpp_diagnostic_level,\n+\t\t       const char *msgid, ...)\n   ATTRIBUTE_PRINTF_3;\n-extern bool cpp_warning (cpp_reader *, int, const char *msgid, ...)\n+extern bool cpp_warning (cpp_reader *, enum cpp_warning_reason,\n+\t\t\t const char *msgid, ...)\n   ATTRIBUTE_PRINTF_3;\n-extern bool cpp_pedwarning (cpp_reader *, int, const char *msgid, ...)\n+extern bool cpp_pedwarning (cpp_reader *, enum cpp_warning_reason,\n+\t\t\t    const char *msgid, ...)\n   ATTRIBUTE_PRINTF_3;\n-extern bool cpp_warning_syshdr (cpp_reader *, int, const char *msgid, ...)\n+extern bool cpp_warning_syshdr (cpp_reader *, enum cpp_warning_reason reason,\n+\t\t\t\tconst char *msgid, ...)\n   ATTRIBUTE_PRINTF_3;\n \n /* Output a diagnostic with \"MSGID: \" preceding the\n    error string of errno.  No location is printed.  */\n-extern bool cpp_errno (cpp_reader *, int, const char *msgid);\n+extern bool cpp_errno (cpp_reader *, enum cpp_diagnostic_level,\n+\t\t       const char *msgid);\n /* Similarly, but with \"FILENAME: \" instead of \"MSGID: \", where\n    the filename is not localized.  */\n-extern bool cpp_errno_filename (cpp_reader *, int, const char *filename,\n-\t\t\t\tsource_location loc);\n+extern bool cpp_errno_filename (cpp_reader *, enum cpp_diagnostic_level,\n+\t\t\t\tconst char *filename, source_location loc);\n \n /* Same as cpp_error, except additionally specifies a position as a\n    (translation unit) physical line and physical column.  If the line is\n    zero, then no location is printed.  */\n-extern bool cpp_error_with_line (cpp_reader *, int, source_location,\n-                                 unsigned, const char *msgid, ...)\n+extern bool cpp_error_with_line (cpp_reader *, enum cpp_diagnostic_level,\n+\t\t\t\t source_location, unsigned,\n+\t\t\t\t const char *msgid, ...)\n   ATTRIBUTE_PRINTF_5;\n-extern bool cpp_warning_with_line (cpp_reader *, int, source_location,\n-                                   unsigned, const char *msgid, ...)\n+extern bool cpp_warning_with_line (cpp_reader *, enum cpp_warning_reason,\n+\t\t\t\t   source_location, unsigned,\n+\t\t\t\t   const char *msgid, ...)\n   ATTRIBUTE_PRINTF_5;\n-extern bool cpp_pedwarning_with_line (cpp_reader *, int, source_location,\n-                                      unsigned, const char *msgid, ...)\n+extern bool cpp_pedwarning_with_line (cpp_reader *, enum cpp_warning_reason,\n+\t\t\t\t      source_location, unsigned,\n+\t\t\t\t      const char *msgid, ...)\n   ATTRIBUTE_PRINTF_5;\n-extern bool cpp_warning_with_line_syshdr (cpp_reader *, int, source_location,\n-                                          unsigned, const char *msgid, ...)\n+extern bool cpp_warning_with_line_syshdr (cpp_reader *, enum cpp_warning_reason,\n+\t\t\t\t\t  source_location, unsigned,\n+\t\t\t\t\t  const char *msgid, ...)\n   ATTRIBUTE_PRINTF_5;\n \n-extern bool cpp_error_at (cpp_reader * pfile, int level,\n+extern bool cpp_error_at (cpp_reader * pfile, enum cpp_diagnostic_level,\n \t\t\t  source_location src_loc, const char *msgid, ...)\n   ATTRIBUTE_PRINTF_4;\n \n-extern bool cpp_error_at (cpp_reader * pfile, int level,\n-\t\t\t  rich_location *richloc, const char *msgid,\n-\t\t\t  ...)\n+extern bool cpp_error_at (cpp_reader * pfile, enum cpp_diagnostic_level,\n+\t\t\t  rich_location *richloc, const char *msgid, ...)\n   ATTRIBUTE_PRINTF_4;\n \n /* In lex.c */"}, {"sha": "073816dd221593d49470269f66277205ee78468c", "filename": "libcpp/macro.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c24300baea50482b6788041fbac9a6f197c490fc/libcpp%2Fmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c24300baea50482b6788041fbac9a6f197c490fc/libcpp%2Fmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fmacro.c?ref=c24300baea50482b6788041fbac9a6f197c490fc", "patch": "@@ -3297,7 +3297,7 @@ create_iso_definition (cpp_reader *pfile)\n \t\t   : N_(\"ISO C99 requires whitespace after the macro name\"));\n       else\n \t{\n-\t  int warntype = CPP_DL_WARNING;\n+\t  enum cpp_diagnostic_level warntype = CPP_DL_WARNING;\n \t  switch (token->type)\n \t    {\n \t    case CPP_ATSIGN:\n@@ -3512,7 +3512,7 @@ _cpp_create_definition (cpp_reader *pfile, cpp_hashnode *node)\n \n       if (warn_of_redefinition (pfile, node, macro))\n \t{\n-          const int reason\n+          const enum cpp_warning_reason reason\n \t    = (cpp_builtin_macro_p (node) && !(node->flags & NODE_WARN))\n \t    ? CPP_W_BUILTIN_MACRO_REDEFINED : CPP_W_NONE;\n "}]}