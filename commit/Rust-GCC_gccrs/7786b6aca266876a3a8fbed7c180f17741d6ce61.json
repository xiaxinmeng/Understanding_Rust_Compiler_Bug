{"sha": "7786b6aca266876a3a8fbed7c180f17741d6ce61", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzc4NmI2YWNhMjY2ODc2YTNhOGZiZWQ3YzE4MGYxNzc0MWQ2Y2U2MQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-10-31T17:14:29Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-10-31T17:14:29Z"}, "message": "dwarf2out.c (dwarf_op): Renamed to ...\n\n\t* dwarf2out.c (dwarf_op): Renamed to ...\n\t(dwarf_OP): ... this.\n\t(convert_descriptor_to_mode, scompare_loc_descriptor,\n\tminmax_loc_descriptor, typed_binop, mem_loc_descriptor,\n\timplicit_ptr_descriptor, optimize_one_addr_into_implicit_ptr): Adjust\n\tcallers.\n\t(dwarf_AT, dwarf_TAG): New functions.\n\t(check_die): Disallow DW_AT_call_all_calls next to\n\tDW_AT_GNU_all_call_sites.\n\t(gen_call_site_die): Use dwarf_TAG and dwarf_AT with DWARF 5 tag\n\tand attributes instead of the corresponding GNU tag and attributes.\n\t(gen_subprogram_die): Likewise.  Emit call site information even\n\tfor -gdwarf-5 -gstrict-dwarf.  Replace DW_AT_GNU_defaulted with\n\tDW_AT_defaulted in comment.\n\t(resolve_addr): Handle DW_AT_call_origin attribute on\n\tDW_TAG_call_site DIE like DW_AT_abstract_origin on\n\tDW_TAG_GNU_call_site DIE.\n\nFrom-SVN: r241713", "tree": {"sha": "bc027a18e6f5ccc1fcebb07fb864ee72d0c5da95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc027a18e6f5ccc1fcebb07fb864ee72d0c5da95"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7786b6aca266876a3a8fbed7c180f17741d6ce61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7786b6aca266876a3a8fbed7c180f17741d6ce61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7786b6aca266876a3a8fbed7c180f17741d6ce61", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7786b6aca266876a3a8fbed7c180f17741d6ce61/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "23157abc1c0c29b975dc311a7d66a32cd5a3864f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23157abc1c0c29b975dc311a7d66a32cd5a3864f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23157abc1c0c29b975dc311a7d66a32cd5a3864f"}], "stats": {"total": 201, "additions": 155, "deletions": 46}, "files": [{"sha": "b6c04b1419a1b7b2335fa7d5582bf2e403841b2a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7786b6aca266876a3a8fbed7c180f17741d6ce61/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7786b6aca266876a3a8fbed7c180f17741d6ce61/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7786b6aca266876a3a8fbed7c180f17741d6ce61", "patch": "@@ -1,5 +1,23 @@\n 2016-10-31  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* dwarf2out.c (dwarf_op): Renamed to ...\n+\t(dwarf_OP): ... this.\n+\t(convert_descriptor_to_mode, scompare_loc_descriptor,\n+\tminmax_loc_descriptor, typed_binop, mem_loc_descriptor,\n+\timplicit_ptr_descriptor, optimize_one_addr_into_implicit_ptr): Adjust\n+\tcallers.\n+\t(dwarf_AT, dwarf_TAG): New functions.\n+\t(check_die): Disallow DW_AT_call_all_calls next to\n+\tDW_AT_GNU_all_call_sites.\n+\t(gen_call_site_die): Use dwarf_TAG and dwarf_AT with DWARF 5 tag\n+\tand attributes instead of the corresponding GNU tag and attributes.\n+\t(gen_subprogram_die): Likewise.  Emit call site information even\n+\tfor -gdwarf-5 -gstrict-dwarf.  Replace DW_AT_GNU_defaulted with\n+\tDW_AT_defaulted in comment.\n+\t(resolve_addr): Handle DW_AT_call_origin attribute on\n+\tDW_TAG_call_site DIE like DW_AT_abstract_origin on\n+\tDW_TAG_GNU_call_site DIE.\n+\n \t* dwarf2out.c (dwarf_op): New function.\n \t(size_of_loc_descr): Handle DW_OP_{implicit_pointer,entry_value},\n \tDW_OP_{const,regval,deref}_type and DW_OP_{convert,reinterpret}."}, {"sha": "8c646a0c2db9eee09f701bb14ab48a57ecfdd00c", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 137, "deletions": 46, "changes": 183, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7786b6aca266876a3a8fbed7c180f17741d6ce61/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7786b6aca266876a3a8fbed7c180f17741d6ce61/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=7786b6aca266876a3a8fbed7c180f17741d6ce61", "patch": "@@ -1520,7 +1520,7 @@ loc_list_plus_const (dw_loc_list_ref list_head, HOST_WIDE_INT offset)\n /* Utility inline function for construction of ops that were GNU extension\n    before DWARF 5.  */\n static inline enum dwarf_location_atom\n-dwarf_op (enum dwarf_location_atom op)\n+dwarf_OP (enum dwarf_location_atom op)\n {\n   switch (op)\n     {\n@@ -1565,6 +1565,90 @@ dwarf_op (enum dwarf_location_atom op)\n   return op;\n }\n \n+/* Similarly for attributes.  */\n+static inline enum dwarf_attribute\n+dwarf_AT (enum dwarf_attribute at)\n+{\n+  switch (at)\n+    {\n+    case DW_AT_call_return_pc:\n+      if (dwarf_version < 5)\n+\treturn DW_AT_low_pc;\n+      break;\n+\n+    case DW_AT_call_tail_call:\n+      if (dwarf_version < 5)\n+\treturn DW_AT_GNU_tail_call;\n+      break;\n+\n+    case DW_AT_call_origin:\n+      if (dwarf_version < 5)\n+\treturn DW_AT_abstract_origin;\n+      break;\n+\n+    case DW_AT_call_target:\n+      if (dwarf_version < 5)\n+\treturn DW_AT_GNU_call_site_target;\n+      break;\n+\n+    case DW_AT_call_target_clobbered:\n+      if (dwarf_version < 5)\n+\treturn DW_AT_GNU_call_site_target_clobbered;\n+      break;\n+\n+    case DW_AT_call_parameter:\n+      if (dwarf_version < 5)\n+\treturn DW_AT_abstract_origin;\n+      break;\n+\n+    case DW_AT_call_value:\n+      if (dwarf_version < 5)\n+\treturn DW_AT_GNU_call_site_value;\n+      break;\n+\n+    case DW_AT_call_data_value:\n+      if (dwarf_version < 5)\n+\treturn DW_AT_GNU_call_site_data_value;\n+      break;\n+\n+    case DW_AT_call_all_calls:\n+      if (dwarf_version < 5)\n+\treturn DW_AT_GNU_all_call_sites;\n+      break;\n+\n+    case DW_AT_call_all_tail_calls:\n+      if (dwarf_version < 5)\n+\treturn DW_AT_GNU_all_tail_call_sites;\n+      break;\n+\n+    default:\n+      break;\n+    }\n+  return at;\n+}\n+\n+/* And similarly for tags.  */\n+static inline enum dwarf_tag\n+dwarf_TAG (enum dwarf_tag tag)\n+{\n+  switch (tag)\n+    {\n+    case DW_TAG_call_site:\n+      if (dwarf_version < 5)\n+\treturn DW_TAG_GNU_call_site;\n+      break;\n+\n+    case DW_TAG_call_site_parameter:\n+      if (dwarf_version < 5)\n+\treturn DW_TAG_GNU_call_site_parameter;\n+      break;\n+\n+    default:\n+      break;\n+    }\n+  return tag;\n+}\n+\n static unsigned long int get_base_type_offset (dw_die_ref);\n \n /* Return the size of a location descriptor.  */\n@@ -5978,6 +6062,7 @@ check_die (dw_die_ref die)\n \t\t    && a->dw_attr != DW_AT_high_pc\n \t\t    && a->dw_attr != DW_AT_location\n \t\t    && a->dw_attr != DW_AT_frame_base\n+\t\t    && a->dw_attr != DW_AT_call_all_calls\n \t\t    && a->dw_attr != DW_AT_GNU_all_call_sites);\n     }\n }\n@@ -12884,13 +12969,13 @@ convert_descriptor_to_mode (machine_mode mode, dw_loc_descr_ref op)\n \n   if (GET_MODE_SIZE (mode) <= DWARF2_ADDR_SIZE)\n     {\n-      add_loc_descr (&op, new_loc_descr (dwarf_op (DW_OP_convert), 0, 0));\n+      add_loc_descr (&op, new_loc_descr (dwarf_OP (DW_OP_convert), 0, 0));\n       return op;\n     }\n   type_die = base_type_for_mode (outer_mode, 1);\n   if (type_die == NULL)\n     return NULL;\n-  cvt = new_loc_descr (dwarf_op (DW_OP_convert), 0, 0);\n+  cvt = new_loc_descr (dwarf_OP (DW_OP_convert), 0, 0);\n   cvt->dw_loc_oprnd1.val_class = dw_val_class_die_ref;\n   cvt->dw_loc_oprnd1.v.val_die_ref.die = type_die;\n   cvt->dw_loc_oprnd1.v.val_die_ref.external = 0;\n@@ -12955,12 +13040,12 @@ scompare_loc_descriptor (enum dwarf_location_atom op, rtx rtl,\n \n       if (type_die == NULL)\n \treturn NULL;\n-      cvt = new_loc_descr (dwarf_op (DW_OP_convert), 0, 0);\n+      cvt = new_loc_descr (dwarf_OP (DW_OP_convert), 0, 0);\n       cvt->dw_loc_oprnd1.val_class = dw_val_class_die_ref;\n       cvt->dw_loc_oprnd1.v.val_die_ref.die = type_die;\n       cvt->dw_loc_oprnd1.v.val_die_ref.external = 0;\n       add_loc_descr (&op0, cvt);\n-      cvt = new_loc_descr (dwarf_op (DW_OP_convert), 0, 0);\n+      cvt = new_loc_descr (dwarf_OP (DW_OP_convert), 0, 0);\n       cvt->dw_loc_oprnd1.val_class = dw_val_class_die_ref;\n       cvt->dw_loc_oprnd1.v.val_die_ref.die = type_die;\n       cvt->dw_loc_oprnd1.v.val_die_ref.external = 0;\n@@ -13158,12 +13243,12 @@ minmax_loc_descriptor (rtx rtl, machine_mode mode,\n       dw_loc_descr_ref cvt;\n       if (type_die == NULL)\n \treturn NULL;\n-      cvt = new_loc_descr (dwarf_op (DW_OP_convert), 0, 0);\n+      cvt = new_loc_descr (dwarf_OP (DW_OP_convert), 0, 0);\n       cvt->dw_loc_oprnd1.val_class = dw_val_class_die_ref;\n       cvt->dw_loc_oprnd1.v.val_die_ref.die = type_die;\n       cvt->dw_loc_oprnd1.v.val_die_ref.external = 0;\n       add_loc_descr (&op0, cvt);\n-      cvt = new_loc_descr (dwarf_op (DW_OP_convert), 0, 0);\n+      cvt = new_loc_descr (dwarf_OP (DW_OP_convert), 0, 0);\n       cvt->dw_loc_oprnd1.val_class = dw_val_class_die_ref;\n       cvt->dw_loc_oprnd1.v.val_die_ref.die = type_die;\n       cvt->dw_loc_oprnd1.v.val_die_ref.external = 0;\n@@ -13209,12 +13294,12 @@ typed_binop (enum dwarf_location_atom op, rtx rtl, dw_die_ref type_die,\n \t\t\t    VAR_INIT_STATUS_INITIALIZED);\n   if (op0 == NULL || op1 == NULL)\n     return NULL;\n-  cvt = new_loc_descr (dwarf_op (DW_OP_convert), 0, 0);\n+  cvt = new_loc_descr (dwarf_OP (DW_OP_convert), 0, 0);\n   cvt->dw_loc_oprnd1.val_class = dw_val_class_die_ref;\n   cvt->dw_loc_oprnd1.v.val_die_ref.die = type_die;\n   cvt->dw_loc_oprnd1.v.val_die_ref.external = 0;\n   add_loc_descr (&op0, cvt);\n-  cvt = new_loc_descr (dwarf_op (DW_OP_convert), 0, 0);\n+  cvt = new_loc_descr (dwarf_OP (DW_OP_convert), 0, 0);\n   cvt->dw_loc_oprnd1.val_class = dw_val_class_die_ref;\n   cvt->dw_loc_oprnd1.v.val_die_ref.die = type_die;\n   cvt->dw_loc_oprnd1.v.val_die_ref.external = 0;\n@@ -13708,9 +13793,9 @@ mem_loc_descriptor (rtx rtl, machine_mode mode,\n \t    }\n \t  if (GET_MODE_SIZE (mode)\n \t      != GET_MODE_SIZE (GET_MODE (inner)))\n-\t    cvt = new_loc_descr (dwarf_op (DW_OP_convert), 0, 0);\n+\t    cvt = new_loc_descr (dwarf_OP (DW_OP_convert), 0, 0);\n \t  else\n-\t    cvt = new_loc_descr (dwarf_op (DW_OP_reinterpret), 0, 0);\n+\t    cvt = new_loc_descr (dwarf_OP (DW_OP_reinterpret), 0, 0);\n \t  cvt->dw_loc_oprnd1.val_class = dw_val_class_die_ref;\n \t  cvt->dw_loc_oprnd1.v.val_die_ref.die = type_die;\n \t  cvt->dw_loc_oprnd1.v.val_die_ref.external = 0;\n@@ -13719,7 +13804,7 @@ mem_loc_descriptor (rtx rtl, machine_mode mode,\n \t      && GET_MODE_SIZE (mode) <= DWARF2_ADDR_SIZE)\n \t    {\n \t      /* Convert it to untyped afterwards.  */\n-\t      cvt = new_loc_descr (dwarf_op (DW_OP_convert), 0, 0);\n+\t      cvt = new_loc_descr (dwarf_OP (DW_OP_convert), 0, 0);\n \t      add_loc_descr (&mem_loc_result, cvt);\n \t    }\n \t}\n@@ -13749,7 +13834,7 @@ mem_loc_descriptor (rtx rtl, machine_mode mode,\n \t  dbx_regnum = dbx_reg_number (rtl);\n \t  if (dbx_regnum == IGNORED_DWARF_REGNUM)\n \t    break;\n-\t  mem_loc_result = new_loc_descr (dwarf_op (DW_OP_regval_type),\n+\t  mem_loc_result = new_loc_descr (dwarf_OP (DW_OP_regval_type),\n \t\t\t\t\t  dbx_regnum, 0);\n \t  mem_loc_result->dw_loc_oprnd2.val_class = dw_val_class_die_ref;\n \t  mem_loc_result->dw_loc_oprnd2.v.val_die_ref.die = type_die;\n@@ -13834,12 +13919,12 @@ mem_loc_descriptor (rtx rtl, machine_mode mode,\n \t  if (type_die2 == NULL)\n \t    break;\n \t  mem_loc_result = op0;\n-\t  cvt = new_loc_descr (dwarf_op (DW_OP_convert), 0, 0);\n+\t  cvt = new_loc_descr (dwarf_OP (DW_OP_convert), 0, 0);\n \t  cvt->dw_loc_oprnd1.val_class = dw_val_class_die_ref;\n \t  cvt->dw_loc_oprnd1.v.val_die_ref.die = type_die1;\n \t  cvt->dw_loc_oprnd1.v.val_die_ref.external = 0;\n \t  add_loc_descr (&mem_loc_result, cvt);\n-\t  cvt = new_loc_descr (dwarf_op (DW_OP_convert), 0, 0);\n+\t  cvt = new_loc_descr (dwarf_OP (DW_OP_convert), 0, 0);\n \t  cvt->dw_loc_oprnd1.val_class = dw_val_class_die_ref;\n \t  cvt->dw_loc_oprnd1.v.val_die_ref.die = type_die2;\n \t  cvt->dw_loc_oprnd1.v.val_die_ref.external = 0;\n@@ -13877,7 +13962,7 @@ mem_loc_descriptor (rtx rtl, machine_mode mode,\n \t\t= base_type_for_mode (mode, SCALAR_INT_MODE_P (mode));\n \t      if (type_die == NULL)\n \t\treturn NULL;\n-\t      deref = new_loc_descr (dwarf_op (DW_OP_deref_type),\n+\t      deref = new_loc_descr (dwarf_OP (DW_OP_deref_type),\n \t\t\t\t     GET_MODE_SIZE (mode), 0);\n \t      deref->dw_loc_oprnd2.val_class = dw_val_class_die_ref;\n \t      deref->dw_loc_oprnd2.v.val_die_ref.die = type_die;\n@@ -13977,7 +14062,7 @@ mem_loc_descriptor (rtx rtl, machine_mode mode,\n \tgcc_unreachable ();\n       if (op0 == NULL)\n \treturn NULL;\n-      mem_loc_result = new_loc_descr (dwarf_op (DW_OP_entry_value), 0, 0);\n+      mem_loc_result = new_loc_descr (dwarf_OP (DW_OP_entry_value), 0, 0);\n       mem_loc_result->dw_loc_oprnd1.val_class = dw_val_class_loc;\n       mem_loc_result->dw_loc_oprnd1.v.val_loc = op0;\n       break;\n@@ -14221,14 +14306,14 @@ mem_loc_descriptor (rtx rtl, machine_mode mode,\n \t\t < (unsigned long) 1 + 1 + 1 + GET_MODE_SIZE (mode))\n \t    {\n \t      mem_loc_result = int_loc_descriptor (INTVAL (rtl));\n-\t      op0 = new_loc_descr (dwarf_op (DW_OP_convert), 0, 0);\n+\t      op0 = new_loc_descr (dwarf_OP (DW_OP_convert), 0, 0);\n \t      op0->dw_loc_oprnd1.val_class = dw_val_class_die_ref;\n \t      op0->dw_loc_oprnd1.v.val_die_ref.die = type_die;\n \t      op0->dw_loc_oprnd1.v.val_die_ref.external = 0;\n \t      add_loc_descr (&mem_loc_result, op0);\n \t      return mem_loc_result;\n \t    }\n-\t  mem_loc_result = new_loc_descr (dwarf_op (DW_OP_const_type), 0,\n+\t  mem_loc_result = new_loc_descr (dwarf_OP (DW_OP_const_type), 0,\n \t\t\t\t\t  INTVAL (rtl));\n \t  mem_loc_result->dw_loc_oprnd1.val_class = dw_val_class_die_ref;\n \t  mem_loc_result->dw_loc_oprnd1.v.val_die_ref.die = type_die;\n@@ -14265,7 +14350,7 @@ mem_loc_descriptor (rtx rtl, machine_mode mode,\n \t  type_die = base_type_for_mode (mode, SCALAR_INT_MODE_P (mode));\n \t  if (type_die == NULL)\n \t    return NULL;\n-\t  mem_loc_result = new_loc_descr (dwarf_op (DW_OP_const_type), 0, 0);\n+\t  mem_loc_result = new_loc_descr (dwarf_OP (DW_OP_const_type), 0, 0);\n \t  mem_loc_result->dw_loc_oprnd1.val_class = dw_val_class_die_ref;\n \t  mem_loc_result->dw_loc_oprnd1.v.val_die_ref.die = type_die;\n \t  mem_loc_result->dw_loc_oprnd1.v.val_die_ref.external = 0;\n@@ -14300,7 +14385,7 @@ mem_loc_descriptor (rtx rtl, machine_mode mode,\n \t  type_die = base_type_for_mode (mode, SCALAR_INT_MODE_P (mode));\n \t  if (type_die == NULL)\n \t    return NULL;\n-\t  mem_loc_result = new_loc_descr (dwarf_op (DW_OP_const_type), 0, 0);\n+\t  mem_loc_result = new_loc_descr (dwarf_OP (DW_OP_const_type), 0, 0);\n \t  mem_loc_result->dw_loc_oprnd1.val_class = dw_val_class_die_ref;\n \t  mem_loc_result->dw_loc_oprnd1.v.val_die_ref.die = type_die;\n \t  mem_loc_result->dw_loc_oprnd1.v.val_die_ref.external = 0;\n@@ -14454,7 +14539,7 @@ mem_loc_descriptor (rtx rtl, machine_mode mode,\n \t\t\t\t\t     GET_CODE (rtl) == UNSIGNED_FLOAT);\n \t      if (type_die == NULL)\n \t\tbreak;\n-\t      cvt = new_loc_descr (dwarf_op (DW_OP_convert), 0, 0);\n+\t      cvt = new_loc_descr (dwarf_OP (DW_OP_convert), 0, 0);\n \t      cvt->dw_loc_oprnd1.val_class = dw_val_class_die_ref;\n \t      cvt->dw_loc_oprnd1.v.val_die_ref.die = type_die;\n \t      cvt->dw_loc_oprnd1.v.val_die_ref.external = 0;\n@@ -14463,7 +14548,7 @@ mem_loc_descriptor (rtx rtl, machine_mode mode,\n \t  type_die = base_type_for_mode (mode, GET_CODE (rtl) == UNSIGNED_FIX);\n \t  if (type_die == NULL)\n \t    break;\n-\t  cvt = new_loc_descr (dwarf_op (DW_OP_convert), 0, 0);\n+\t  cvt = new_loc_descr (dwarf_OP (DW_OP_convert), 0, 0);\n \t  cvt->dw_loc_oprnd1.val_class = dw_val_class_die_ref;\n \t  cvt->dw_loc_oprnd1.v.val_die_ref.die = type_die;\n \t  cvt->dw_loc_oprnd1.v.val_die_ref.external = 0;\n@@ -14640,7 +14725,7 @@ implicit_ptr_descriptor (rtx rtl, HOST_WIDE_INT offset)\n \t      || TREE_CODE (DEBUG_IMPLICIT_PTR_DECL (rtl)) == PARM_DECL\n \t      || TREE_CODE (DEBUG_IMPLICIT_PTR_DECL (rtl)) == RESULT_DECL);\n   ref = lookup_decl_die (DEBUG_IMPLICIT_PTR_DECL (rtl));\n-  ret = new_loc_descr (dwarf_op (DW_OP_implicit_pointer), 0, offset);\n+  ret = new_loc_descr (dwarf_OP (DW_OP_implicit_pointer), 0, offset);\n   ret->dw_loc_oprnd2.val_class = dw_val_class_const;\n   if (ref)\n     {\n@@ -20635,7 +20720,7 @@ premark_types_used_by_global_vars (void)\n       ->traverse<void *, premark_types_used_by_global_vars_helper> (NULL);\n }\n \n-/* Generate a DW_TAG_GNU_call_site DIE in function DECL under SUBR_DIE\n+/* Generate a DW_TAG_call_site DIE in function DECL under SUBR_DIE\n    for CA_LOC call arg loc node.  */\n \n static dw_die_ref\n@@ -20656,17 +20741,18 @@ gen_call_site_die (tree decl, dw_die_ref subr_die,\n     }\n   if (stmt_die == NULL)\n     stmt_die = subr_die;\n-  die = new_die (DW_TAG_GNU_call_site, stmt_die, NULL_TREE);\n-  add_AT_lbl_id (die, DW_AT_low_pc, ca_loc->label);\n+  die = new_die (dwarf_TAG (DW_TAG_call_site), stmt_die, NULL_TREE);\n+  add_AT_lbl_id (die, dwarf_AT (DW_AT_call_return_pc), ca_loc->label);\n   if (ca_loc->tail_call_p)\n-    add_AT_flag (die, DW_AT_GNU_tail_call, 1);\n+    add_AT_flag (die, dwarf_AT (DW_AT_call_tail_call), 1);\n   if (ca_loc->symbol_ref)\n     {\n       dw_die_ref tdie = lookup_decl_die (SYMBOL_REF_DECL (ca_loc->symbol_ref));\n       if (tdie)\n-\tadd_AT_die_ref (die, DW_AT_abstract_origin, tdie);\n+\tadd_AT_die_ref (die, dwarf_AT (DW_AT_call_origin), tdie);\n       else\n-        add_AT_addr (die, DW_AT_abstract_origin, ca_loc->symbol_ref, false);\n+\tadd_AT_addr (die, dwarf_AT (DW_AT_call_origin), ca_loc->symbol_ref,\n+\t\t     false);\n     }\n   return die;\n }\n@@ -20963,7 +21049,7 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n \t    add_AT_flag (subr_die, DW_AT_deleted, 1);\n \n \t  /* If this is a C++11 defaulted special function member then\n-\t     generate a DW_AT_GNU_defaulted attribute.  */\n+\t     generate a DW_AT_defaulted attribute.  */\n \t  if (dwarf_version >= 5 || !dwarf_strict)\n \t    {\n \t      int defaulted\n@@ -21332,7 +21418,7 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n \t location info.  */\n       decls_for_scope (outer_scope, subr_die);\n \n-      if (call_arg_locations && !dwarf_strict)\n+      if (call_arg_locations && (!dwarf_strict || dwarf_version >= 5))\n \t{\n \t  struct call_arg_loc_node *ca_loc;\n \t  for (ca_loc = call_arg_locations; ca_loc; ca_loc = ca_loc->next)\n@@ -21368,7 +21454,7 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n \t\t    continue;\n \t\t  /* Get dynamic information about call target only if we\n \t\t     have no static information: we cannot generate both\n-\t\t     DW_AT_abstract_origin and DW_AT_GNU_call_site_target\n+\t\t     DW_AT_call_origin and DW_AT_call_target\n \t\t     attributes.  */\n \t\t  if (ca_loc->symbol_ref == NULL_RTX)\n \t\t    {\n@@ -21418,13 +21504,14 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n \t\t    continue;\n \t\t  if (die == NULL)\n \t\t    die = gen_call_site_die (decl, subr_die, ca_loc);\n-\t\t  cdie = new_die (DW_TAG_GNU_call_site_parameter, die,\n+\t\t  cdie = new_die (dwarf_TAG (DW_TAG_call_site_parameter), die,\n \t\t\t\t  NULL_TREE);\n \t\t  if (reg != NULL)\n \t\t    add_AT_loc (cdie, DW_AT_location, reg);\n \t\t  else if (tdie != NULL)\n-\t\t    add_AT_die_ref (cdie, DW_AT_abstract_origin, tdie);\n-\t\t  add_AT_loc (cdie, DW_AT_GNU_call_site_value, val);\n+\t\t    add_AT_die_ref (cdie, dwarf_AT (DW_AT_call_parameter),\n+\t\t\t\t    tdie);\n+\t\t  add_AT_loc (cdie, dwarf_AT (DW_AT_call_value), val);\n \t\t  if (next_arg != XEXP (arg, 1))\n \t\t    {\n \t\t      mode = GET_MODE (XEXP (XEXP (XEXP (arg, 1), 0), 1));\n@@ -21435,7 +21522,8 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n \t\t\t\t\t\tmode, VOIDmode,\n \t\t\t\t\t\tVAR_INIT_STATUS_INITIALIZED);\n \t\t      if (val != NULL)\n-\t\t\tadd_AT_loc (cdie, DW_AT_GNU_call_site_data_value, val);\n+\t\t\tadd_AT_loc (cdie, dwarf_AT (DW_AT_call_data_value),\n+\t\t\t\t    val);\n \t\t    }\n \t\t}\n \t      if (die == NULL\n@@ -21452,7 +21540,7 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n \t\t\t\t\t       VOIDmode,\n \t\t\t\t\t       VAR_INIT_STATUS_INITIALIZED);\n \t\t  if (tval)\n-\t\t    add_AT_loc (die, DW_AT_GNU_call_site_target, tval);\n+\t\t    add_AT_loc (die, dwarf_AT (DW_AT_call_target), tval);\n \t\t  else if (tlocc != NULL_RTX)\n \t\t    {\n \t\t      tval = mem_loc_descriptor (tlocc,\n@@ -21461,7 +21549,8 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n \t\t\t\t\t\t VOIDmode,\n \t\t\t\t\t\t VAR_INIT_STATUS_INITIALIZED);\n \t\t      if (tval)\n-\t\t\tadd_AT_loc (die, DW_AT_GNU_call_site_target_clobbered,\n+\t\t\tadd_AT_loc (die,\n+\t\t\t\t    dwarf_AT (DW_AT_call_target_clobbered),\n \t\t\t\t    tval);\n \t\t    }\n \t\t}\n@@ -21477,13 +21566,13 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n       call_arg_loc_last = NULL;\n       if (tail_call_site_count >= 0\n \t  && tail_call_site_count == tail_call_site_note_count\n-\t  && !dwarf_strict)\n+\t  && (!dwarf_strict || dwarf_version >= 5))\n \t{\n \t  if (call_site_count >= 0\n \t      && call_site_count == call_site_note_count)\n-\t    add_AT_flag (subr_die, DW_AT_GNU_all_call_sites, 1);\n+\t    add_AT_flag (subr_die, dwarf_AT (DW_AT_call_all_calls), 1);\n \t  else\n-\t    add_AT_flag (subr_die, DW_AT_GNU_all_tail_call_sites, 1);\n+\t    add_AT_flag (subr_die, dwarf_AT (DW_AT_call_all_tail_calls), 1);\n \t}\n       call_site_count = -1;\n       tail_call_site_count = -1;\n@@ -27010,7 +27099,7 @@ optimize_one_addr_into_implicit_ptr (dw_loc_descr_ref loc)\n \t  if (ref && (get_AT (ref, DW_AT_location)\n \t\t      || get_AT (ref, DW_AT_const_value)))\n \t    {\n-\t      loc->dw_loc_opc = dwarf_op (DW_OP_implicit_pointer);\n+\t      loc->dw_loc_opc = dwarf_OP (DW_OP_implicit_pointer);\n \t      loc->dw_loc_oprnd1.val_class = dw_val_class_die_ref;\n \t      loc->dw_loc_oprnd1.val_entry = NULL;\n \t      loc->dw_loc_oprnd1.v.val_die_ref.die = ref;\n@@ -27233,7 +27322,7 @@ optimize_location_into_implicit_ptr (dw_die_ref die, tree decl)\n \t  || (!get_AT (ref, DW_AT_location)\n \t      && !get_AT (ref, DW_AT_const_value)))\n \treturn;\n-      l = new_loc_descr (dwarf_op (DW_OP_implicit_pointer), 0, offset);\n+      l = new_loc_descr (dwarf_OP (DW_OP_implicit_pointer), 0, offset);\n       l->dw_loc_oprnd1.val_class = dw_val_class_die_ref;\n       l->dw_loc_oprnd1.v.val_die_ref.die = ref;\n       l->dw_loc_oprnd1.v.val_die_ref.external = 0;\n@@ -27561,8 +27650,10 @@ resolve_addr (dw_die_ref die)\n \t    remove_AT (die, a->dw_attr);\n \t    ix--;\n \t  }\n-\tif (die->die_tag == DW_TAG_GNU_call_site\n-\t    && a->dw_attr == DW_AT_abstract_origin)\n+\tif ((die->die_tag == DW_TAG_call_site\n+\t     && a->dw_attr == DW_AT_call_origin)\n+\t    || (die->die_tag == DW_TAG_GNU_call_site\n+\t\t&& a->dw_attr == DW_AT_abstract_origin))\n \t  {\n \t    tree tdecl = SYMBOL_REF_DECL (a->dw_attr_val.v.val_addr);\n \t    dw_die_ref tdie = lookup_decl_die (tdecl);"}]}