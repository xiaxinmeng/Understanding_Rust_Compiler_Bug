{"sha": "b304ad476c745f8b62607de0f35f042dfa5bc46d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjMwNGFkNDc2Yzc0NWY4YjYyNjA3ZGUwZjM1ZjA0MmRmYTViYzQ2ZA==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1994-04-18T15:19:57Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1994-04-18T15:19:57Z"}, "message": "reorg.c (redirect_with_delay_list_safe_p): New function, similar to redirect_with_delay_slots_safe_p.\n\n        * reorg.c (redirect_with_delay_list_safe_p): New function,\n        similar to redirect_with_delay_slots_safe_p.\n        (fill_slots_from_thread): Do not redirect a jump if doing\n        so would invalidate the delay list for the jump.\n\nFrom-SVN: r7063", "tree": {"sha": "c3fc7fae356660e5fa0305f6752b2ec7f7afed69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3fc7fae356660e5fa0305f6752b2ec7f7afed69"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b304ad476c745f8b62607de0f35f042dfa5bc46d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b304ad476c745f8b62607de0f35f042dfa5bc46d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b304ad476c745f8b62607de0f35f042dfa5bc46d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b304ad476c745f8b62607de0f35f042dfa5bc46d/comments", "author": null, "committer": null, "parents": [{"sha": "76f8010e840c8a0ad2d06ff98464637a5363eda6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76f8010e840c8a0ad2d06ff98464637a5363eda6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76f8010e840c8a0ad2d06ff98464637a5363eda6"}], "stats": {"total": 40, "additions": 39, "deletions": 1}, "files": [{"sha": "3f6a992e67231c83a34827848f29717146f14b72", "filename": "gcc/reorg.c", "status": "modified", "additions": 39, "deletions": 1, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b304ad476c745f8b62607de0f35f042dfa5bc46d/gcc%2Freorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b304ad476c745f8b62607de0f35f042dfa5bc46d/gcc%2Freorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freorg.c?ref=b304ad476c745f8b62607de0f35f042dfa5bc46d", "patch": "@@ -259,6 +259,8 @@ static rtx fill_slots_from_thread PROTO((rtx, rtx, rtx, rtx, int, int,\n static void fill_eager_delay_slots PROTO((rtx));\n static void relax_delay_slots\tPROTO((rtx));\n static void make_return_insns\tPROTO((rtx));\n+static int redirect_with_delay_slots_safe_p PROTO ((rtx, rtx, rtx));\n+static int redirect_with_delay_list_safe_p PROTO ((rtx, rtx, rtx));\n \f\n /* Given X, some rtl, and RES, a pointer to a `struct resource', mark\n    which resources are references by the insn.  If INCLUDE_CALLED_ROUTINE\n@@ -1494,6 +1496,39 @@ redirect_with_delay_slots_safe_p (jump, newlabel, seq)\n   return (i == XVECLEN (pat, 0));\n }\n \n+/* Return non-zero if redirecting JUMP to NEWLABEL does not invalidate\n+   any insns we wish to place in the delay slot of JUMP.  */\n+\n+static int\n+redirect_with_delay_list_safe_p (jump, newlabel, delay_list)\n+     rtx jump, newlabel, delay_list;\n+{\n+  int flags, i;\n+  rtx li;\n+\n+  /* Make sure all the insns in DELAY_LIST would still be\n+     valid after threading the jump.  If they are still\n+     valid, then return non-zero.  */\n+\n+  flags = get_jump_flags (jump, newlabel);\n+  for (li = delay_list, i = 0; li; li = XEXP (li, 1), i++)\n+    if (! (\n+#ifdef ANNUL_IFFALSE_SLOTS\n+\t   (INSN_ANNULLED_BRANCH_P (jump)\n+\t    && INSN_FROM_TARGET_P (XEXP (li, 0)))\n+\t   ? eligible_for_annul_false (jump, i - 1, XEXP (li, 0), flags) :\n+#endif\n+#ifdef ANNUL_IFTRUE_SLOTS\n+\t   (INSN_ANNULLED_BRANCH_P (jump)\n+\t    && ! INSN_FROM_TARGET_P (XEXP (li, 0)))\n+\t   ? eligible_for_annul_true (jump, i - 1, XEXP (li, 0), flags) :\n+#endif\n+\t   eligible_for_delay (jump, i - 1, XEXP (li, 0), flags)))\n+      break;\n+\n+  return (li == NULL);\n+}\n+\n \f\n /* INSN branches to an insn whose pattern SEQ is a SEQUENCE.  Given that\n    the condition tested by INSN is CONDITION and the resources shown in\n@@ -3462,7 +3497,10 @@ fill_slots_from_thread (insn, condition, thread, opposite_thread, likely,\n \n       if (new_thread && GET_CODE (new_thread) == JUMP_INSN\n \t  && (simplejump_p (new_thread)\n-\t      || GET_CODE (PATTERN (new_thread)) == RETURN))\n+\t      || GET_CODE (PATTERN (new_thread)) == RETURN)\n+\t  && redirect_with_delay_list_safe_p (insn,\n+\t\t\t\t\t      JUMP_LABEL (new_thread),\n+\t\t\t\t\t      delay_list))\n \tnew_thread = follow_jumps (JUMP_LABEL (new_thread));\n \n       if (new_thread == 0)"}]}