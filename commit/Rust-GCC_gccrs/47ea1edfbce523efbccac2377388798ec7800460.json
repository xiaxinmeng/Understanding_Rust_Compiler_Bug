{"sha": "47ea1edfbce523efbccac2377388798ec7800460", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDdlYTFlZGZiY2U1MjNlZmJjY2FjMjM3NzM4ODc5OGVjNzgwMDQ2MA==", "commit": {"author": {"name": "Dave Korn", "email": "dave.korn.cygwin@gmail.com", "date": "2011-01-26T01:41:23Z"}, "committer": {"name": "Dave Korn", "email": "davek@gcc.gnu.org", "date": "2011-01-26T01:41:23Z"}, "message": "c.opt (-fkeep-inline-dllexport): New switch.\n\ngcc/c-family/ChangeLog:\n\n\t* c.opt (-fkeep-inline-dllexport): New switch.\n\ngcc/ChangeLog:\n\n\t* tree.c (handle_dll_attribute): Handle it.\n\t* doc/extend.texi (@item dllexport): Mention it.\n\t* doc/invoke.texi (@item -fno-keep-inline-dllexport): Document it.\n\ngcc/cp/ChangeLog:\n\n\t* semantics.c (expand_or_defer_fn_1): Handle it.\n\t* decl2.c (decl_needed_p): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/dll-9a.c: New test file.\n\t* gcc.dg/dll-11.c: Likewise.\n\t* gcc.dg/dll-12.c: Likewise.\n\t* gcc.dg/dll-12a.c: Likewise.\n\t* gcc.dg/dll-11a.c: Likewise.\n\t* gcc.dg/dll-9.c: Likewise.\n\t* gcc.dg/dll-10.c: Likewise.\n\t* gcc.dg/dll-10a.c: Likewise.\n\t* g++.dg/ext/dllexport4a.cc: Likewise.\n\t* g++.dg/ext/dllexport4.C: Likewise.\n\t* g++.dg/ext/dllexport5.C: Likewise.\n\t* g++.dg/ext/dllexport5a.cc: Likewise.\n\nFrom-SVN: r169268", "tree": {"sha": "7791b2c5afa7301952887cfb93c353a67dacb1ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7791b2c5afa7301952887cfb93c353a67dacb1ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47ea1edfbce523efbccac2377388798ec7800460", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47ea1edfbce523efbccac2377388798ec7800460", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47ea1edfbce523efbccac2377388798ec7800460", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47ea1edfbce523efbccac2377388798ec7800460/comments", "author": {"login": "davek-cygwin", "id": 530057, "node_id": "MDQ6VXNlcjUzMDA1Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/530057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davek-cygwin", "html_url": "https://github.com/davek-cygwin", "followers_url": "https://api.github.com/users/davek-cygwin/followers", "following_url": "https://api.github.com/users/davek-cygwin/following{/other_user}", "gists_url": "https://api.github.com/users/davek-cygwin/gists{/gist_id}", "starred_url": "https://api.github.com/users/davek-cygwin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davek-cygwin/subscriptions", "organizations_url": "https://api.github.com/users/davek-cygwin/orgs", "repos_url": "https://api.github.com/users/davek-cygwin/repos", "events_url": "https://api.github.com/users/davek-cygwin/events{/privacy}", "received_events_url": "https://api.github.com/users/davek-cygwin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "744f0946bcbf7be92a725383d41c31673849efa9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/744f0946bcbf7be92a725383d41c31673849efa9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/744f0946bcbf7be92a725383d41c31673849efa9"}], "stats": {"total": 519, "additions": 506, "deletions": 13}, "files": [{"sha": "b5a4141202dfea28279097c7c97b66d27929ff5a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ea1edfbce523efbccac2377388798ec7800460/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ea1edfbce523efbccac2377388798ec7800460/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=47ea1edfbce523efbccac2377388798ec7800460", "patch": "@@ -1,3 +1,9 @@\n+2011-01-26  Dave Korn  <dave.korn.cygwin@gmail.com>\n+\n+\t* tree.c (handle_dll_attribute): Handle it.\n+\t* doc/extend.texi (@item dllexport): Mention it.\n+\t* doc/invoke.texi (@item -fno-keep-inline-dllexport): Document it.\n+\n 2011-01-25  Ian Lance Taylor  <iant@google.com>\n \n \tPR tree-optimization/26854"}, {"sha": "f9efc213fde05e096edbdda1f53a4e7336ff7c08", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ea1edfbce523efbccac2377388798ec7800460/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ea1edfbce523efbccac2377388798ec7800460/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=47ea1edfbce523efbccac2377388798ec7800460", "patch": "@@ -1,3 +1,7 @@\n+2011-01-26  Dave Korn  <dave.korn.cygwin@gmail.com>\n+\n+\t* c.opt (-fkeep-inline-dllexport): New switch.\n+\n 2011-01-12  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/32511"}, {"sha": "b0d9e5bed89f771ebdc8fc9f1dcd6944dcdc2a96", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ea1edfbce523efbccac2377388798ec7800460/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ea1edfbce523efbccac2377388798ec7800460/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=47ea1edfbce523efbccac2377388798ec7800460", "patch": "@@ -1,6 +1,6 @@\n ; Options for the C, ObjC, C++ and ObjC++ front ends.\n-; Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n-; Free Software Foundation, Inc.\n+; Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n+; 2011 Free Software Foundation, Inc.\n ;\n ; This file is part of GCC.\n ;\n@@ -814,6 +814,10 @@ ffriend-injection\n C++ ObjC++ Var(flag_friend_injection)\n Inject friend functions into enclosing namespace\n \n+fkeep-inline-dllexport\n+C C++ ObjC ObjC++ Var(flag_keep_inline_dllexport) Init(1) Report Condition(TARGET_DLLIMPORT_DECL_ATTRIBUTES)\n+Don't emit dllexported inline functions unless needed\n+\n flabels-ok\n C++ ObjC++ Ignore Warn(switch %qs is no longer supported)\n "}, {"sha": "d6113a2146af879d264fb30cbbe991350343d95f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ea1edfbce523efbccac2377388798ec7800460/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ea1edfbce523efbccac2377388798ec7800460/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=47ea1edfbce523efbccac2377388798ec7800460", "patch": "@@ -1,3 +1,8 @@\n+2011-01-26  Dave Korn  <dave.korn.cygwin@gmail.com>\n+\n+\t* semantics.c (expand_or_defer_fn_1): Handle it.\n+\t* decl2.c (decl_needed_p): Likewise.\n+\n 2011-01-21  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/47041"}, {"sha": "a4b7dfa9bee4ddcdeaf2dace18c06c641f160077", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ea1edfbce523efbccac2377388798ec7800460/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ea1edfbce523efbccac2377388798ec7800460/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=47ea1edfbce523efbccac2377388798ec7800460", "patch": "@@ -1,7 +1,7 @@\n /* Process declarations and variables for C++ compiler.\n    Copyright (C) 1988, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010\n-   Free Software Foundation, Inc.\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010,\n+   2011 Free Software Foundation, Inc.\n    Hacked by Michael Tiemann (tiemann@cygnus.com)\n \n This file is part of GCC.\n@@ -1781,7 +1781,8 @@ decl_needed_p (tree decl)\n       return true;\n   /* Functions marked \"dllexport\" must be emitted so that they are\n      visible to other DLLs.  */\n-  if (lookup_attribute (\"dllexport\", DECL_ATTRIBUTES (decl)))\n+  if (flag_keep_inline_dllexport\n+      && lookup_attribute (\"dllexport\", DECL_ATTRIBUTES (decl)))\n     return true;\n   /* Otherwise, DECL does not need to be emitted -- yet.  A subsequent\n      reference to DECL might cause it to be emitted later.  */"}, {"sha": "ea8a7ae8669db93bf1c102e5bac1bea1b2b90b59", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ea1edfbce523efbccac2377388798ec7800460/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ea1edfbce523efbccac2377388798ec7800460/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=47ea1edfbce523efbccac2377388798ec7800460", "patch": "@@ -3482,7 +3482,8 @@ expand_or_defer_fn_1 (tree fn)\n       if ((flag_keep_inline_functions\n \t   && DECL_DECLARED_INLINE_P (fn)\n \t   && !DECL_REALLY_EXTERN (fn))\n-\t  || lookup_attribute (\"dllexport\", DECL_ATTRIBUTES (fn)))\n+\t  || (flag_keep_inline_dllexport\n+\t      && lookup_attribute (\"dllexport\", DECL_ATTRIBUTES (fn))))\n \tmark_needed (fn);\n     }\n "}, {"sha": "5a2b2684d90689e0b27e70ad40c5628da7e918e6", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ea1edfbce523efbccac2377388798ec7800460/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ea1edfbce523efbccac2377388798ec7800460/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=47ea1edfbce523efbccac2377388798ec7800460", "patch": "@@ -1,5 +1,5 @@\n @c Copyright (C) 1988, 1989, 1992, 1993, 1994, 1996, 1998, 1999, 2000, 2001,\n-@c 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+@c 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n @c Free Software Foundation, Inc.\n \n @c This is part of the GCC manual.\n@@ -2213,9 +2213,14 @@ On systems that support the @code{visibility} attribute, this\n attribute also implies ``default'' visibility.  It is an error to\n explicitly specify any other visibility.\n \n-Currently, the @code{dllexport} attribute is ignored for inlined\n-functions, unless the @option{-fkeep-inline-functions} flag has been\n-used.  The attribute is also ignored for undefined symbols.\n+In previous versions of GCC, the @code{dllexport} attribute was ignored \n+for inlined functions, unless the @option{-fkeep-inline-functions} flag\n+had been used.  The default behaviour now is to emit all dllexported\n+inline functions; however, this can cause object file-size bloat, in\n+which case the old behaviour can be restored by using\n+@option{-fno-keep-inline-dllexport}.\n+\n+The attribute is also ignored for undefined symbols.\n \n When applied to C++ classes, the attribute marks defined non-inlined\n member functions and static data members as exports.  Static consts"}, {"sha": "d2ff7b609a9291925ce4a67e54ee8da8d9859fa7", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ea1edfbce523efbccac2377388798ec7800460/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ea1edfbce523efbccac2377388798ec7800460/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=47ea1edfbce523efbccac2377388798ec7800460", "patch": "@@ -6149,6 +6149,13 @@ abstract measurement of function's size.  In no way does it represent a count\n of assembly instructions and as such its exact meaning might change from one\n release to an another.\n \n+@item -fno-keep-inline-dllexport\n+@opindex -fno-keep-inline-dllexport\n+This is a more fine-grained version of @option{-fkeep-inline-functions},\n+which applies only to functions that are declared using the @code{dllexport}\n+attribute or declspec (@xref{Function Attributes,,Declaring Attributes of\n+Functions}.)\n+\n @item -fkeep-inline-functions\n @opindex fkeep-inline-functions\n In C, emit @code{static} functions that are declared @code{inline}"}, {"sha": "74409eee9e87f76024ceaa93e20e094cfb38dd8c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ea1edfbce523efbccac2377388798ec7800460/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ea1edfbce523efbccac2377388798ec7800460/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=47ea1edfbce523efbccac2377388798ec7800460", "patch": "@@ -1,3 +1,18 @@\n+2011-01-26  Dave Korn  <dave.korn.cygwin@gmail.com>\n+\n+\t* gcc.dg/dll-9a.c: New test file.\n+\t* gcc.dg/dll-11.c: Likewise.\n+\t* gcc.dg/dll-12.c: Likewise.\n+\t* gcc.dg/dll-12a.c: Likewise.\n+\t* gcc.dg/dll-11a.c: Likewise.\n+\t* gcc.dg/dll-9.c: Likewise.\n+\t* gcc.dg/dll-10.c: Likewise.\n+\t* gcc.dg/dll-10a.c: Likewise.\n+\t* g++.dg/ext/dllexport4a.cc: Likewise.\n+\t* g++.dg/ext/dllexport4.C: Likewise.\n+\t* g++.dg/ext/dllexport5.C: Likewise.\n+\t* g++.dg/ext/dllexport5a.cc: Likewise.\n+\n 2011-01-25  Sebastian Pop  <sebastian.pop@amd.com>\n \n \tPR tree-optimization/46970"}, {"sha": "81c57c3fbca64ba12b3172a018ef89694a430581", "filename": "gcc/testsuite/g++.dg/ext/dllexport4.C", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ea1edfbce523efbccac2377388798ec7800460/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fdllexport4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ea1edfbce523efbccac2377388798ec7800460/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fdllexport4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fdllexport4.C?ref=47ea1edfbce523efbccac2377388798ec7800460", "patch": "@@ -0,0 +1,54 @@\n+// { dg-do link }\n+// { dg-require-dll \"\" }\n+// { dg-additional-sources \"dllexport4a.cc\" }\n+// { dg-options \"-O2 -fno-keep-inline-dllexport\" }\n+// { dg-prune-output .*undefined.* }\n+// { dg-xfail-if \"link failure expected\" { *-*-* } }\n+\n+/* Test that inline functions declared \"dllexport\" appear in object files,\n+   even if they are not called - except when -fno-keep-inline-dllexport.\n+\n+   This behavior is required by the ARM C++ ABI:\n+\n+     Exporting a function that can be inlined should force the\n+     creation and export of an out-of-line copy of it.\n+\n+   and should presumably also apply.\n+\n+   Visual Studio 2005 also honors that rule.  */\n+\n+__declspec(dllexport) inline void i1() {}\n+\n+__declspec(dllexport) extern inline void e1() {}\n+\n+/* It is invalid to declare the function inline after its definition.  */\n+#if 0\n+__declspec(dllexport) void i2() {}\n+inline void i2();\n+\n+__declspec(dllexport) extern void e2() {}\n+inline void e2();\n+#endif\n+\n+__declspec(dllexport) inline void i3() {}\n+void i3();\n+\n+__declspec(dllexport) inline void e3() {}\n+extern void e3();\n+\n+__declspec(dllexport) void i4();\n+inline void i4() {};\n+\n+__declspec(dllexport) extern void e4();\n+inline void e4() {};\n+\n+__declspec(dllexport) inline void i5();\n+void i5() {};\n+\n+__declspec(dllexport) inline void e5();\n+extern void e5() {};\n+\n+/* Make sure that just declaring the function -- without defining it\n+   -- does not cause errors.  */\n+__declspec(dllexport) inline void i6();\n+__declspec(dllexport) extern inline void e6();"}, {"sha": "80caf32174299fa71c5d8d9ecf2de7f7b4ca9b8b", "filename": "gcc/testsuite/g++.dg/ext/dllexport4a.cc", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ea1edfbce523efbccac2377388798ec7800460/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fdllexport4a.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ea1edfbce523efbccac2377388798ec7800460/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fdllexport4a.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fdllexport4a.cc?ref=47ea1edfbce523efbccac2377388798ec7800460", "patch": "@@ -0,0 +1,21 @@\n+extern void i1();\n+extern void i3();\n+extern void i4();\n+extern void i5();\n+\n+extern void e1();\n+extern void e3();\n+extern void e4();\n+extern void e5();\n+\n+int main () {\n+  i1();\n+  i3();\n+  i4();\n+  i5();\n+\n+  e1();\n+  e3();\n+  e4();\n+  e5();\n+}"}, {"sha": "8b27807315eca5adfe9e844908a3d245165dde5d", "filename": "gcc/testsuite/g++.dg/ext/dllexport5.C", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ea1edfbce523efbccac2377388798ec7800460/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fdllexport5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ea1edfbce523efbccac2377388798ec7800460/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fdllexport5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fdllexport5.C?ref=47ea1edfbce523efbccac2377388798ec7800460", "patch": "@@ -0,0 +1,52 @@\n+// { dg-do link }\n+// { dg-require-dll \"\" }\n+// { dg-additional-sources \"dllexport5a.cc\" }\n+// { dg-options \"-O2 -fkeep-inline-dllexport\" }\n+\n+/* Test that inline functions declared \"dllexport\" appear in object files,\n+   even if they are not called, when -fkeep-inline-dllexport is supplied.\n+\n+   This behavior is required by the ARM C++ ABI:\n+\n+     Exporting a function that can be inlined should force the\n+     creation and export of an out-of-line copy of it.\n+\n+   and should presumably also apply.\n+\n+   Visual Studio 2005 also honors that rule.  */\n+\n+__declspec(dllexport) inline void i1() {}\n+\n+__declspec(dllexport) extern inline void e1() {}\n+\n+/* It is invalid to declare the function inline after its definition.  */\n+#if 0\n+__declspec(dllexport) void i2() {}\n+inline void i2();\n+\n+__declspec(dllexport) extern void e2() {}\n+inline void e2();\n+#endif\n+\n+__declspec(dllexport) inline void i3() {}\n+void i3();\n+\n+__declspec(dllexport) inline void e3() {}\n+extern void e3();\n+\n+__declspec(dllexport) void i4();\n+inline void i4() {};\n+\n+__declspec(dllexport) extern void e4();\n+inline void e4() {};\n+\n+__declspec(dllexport) inline void i5();\n+void i5() {};\n+\n+__declspec(dllexport) inline void e5();\n+extern void e5() {};\n+\n+/* Make sure that just declaring the function -- without defining it\n+   -- does not cause errors.  */\n+__declspec(dllexport) inline void i6();\n+__declspec(dllexport) extern inline void e6();"}, {"sha": "80caf32174299fa71c5d8d9ecf2de7f7b4ca9b8b", "filename": "gcc/testsuite/g++.dg/ext/dllexport5a.cc", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ea1edfbce523efbccac2377388798ec7800460/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fdllexport5a.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ea1edfbce523efbccac2377388798ec7800460/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fdllexport5a.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fdllexport5a.cc?ref=47ea1edfbce523efbccac2377388798ec7800460", "patch": "@@ -0,0 +1,21 @@\n+extern void i1();\n+extern void i3();\n+extern void i4();\n+extern void i5();\n+\n+extern void e1();\n+extern void e3();\n+extern void e4();\n+extern void e5();\n+\n+int main () {\n+  i1();\n+  i3();\n+  i4();\n+  i5();\n+\n+  e1();\n+  e3();\n+  e4();\n+  e5();\n+}"}, {"sha": "2f0c6ce31a58ac40fb0ae0a831ae54db1c7ced5f", "filename": "gcc/testsuite/gcc.dg/dll-10.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ea1edfbce523efbccac2377388798ec7800460/gcc%2Ftestsuite%2Fgcc.dg%2Fdll-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ea1edfbce523efbccac2377388798ec7800460/gcc%2Ftestsuite%2Fgcc.dg%2Fdll-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdll-10.c?ref=47ea1edfbce523efbccac2377388798ec7800460", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do link } */\n+/* { dg-require-dll \"\" } */\n+/* { dg-additional-sources \"dll-10a.c\" } */\n+/* { dg-options \"-w -O2 -std=gnu99 -fno-keep-inline-dllexport\" } */\n+/* { dg-prune-output .*undefined.* } */\n+/* { dg-xfail-if \"link failure expected\" { *-*-* } } */\n+\n+/* Test that inline functions declared \"dllexport\" appear in object files,\n+   even if they are not called - except when -fno-keep-inline-dllexport.\n+\n+   This behavior is required by the ARM C++ ABI:\n+\n+     Exporting a function that can be inlined should force the\n+     creation and export of an out-of-line copy of it.\n+\n+   and should presumably also apply.\n+\n+   Visual Studio 2005 also honors that rule.  */\n+\n+__declspec(dllexport) inline void i1() {}\n+\n+__declspec(dllexport) extern inline void e1() {}\n+\n+/* It is invalid to declare the function inline after its definition.  */\n+#if 0\n+__declspec(dllexport) void i2() {}\n+inline void i2();\n+\n+__declspec(dllexport) extern void e2() {}\n+inline void e2();\n+#endif\n+\n+__declspec(dllexport) inline void i3() {}\n+void i3();\n+\n+__declspec(dllexport) inline void e3() {}\n+extern void e3();\n+\n+__declspec(dllexport) void i4();\n+inline void i4() {};\n+\n+__declspec(dllexport) extern void e4();\n+inline void e4() {};\n+\n+__declspec(dllexport) inline void i5();\n+void i5() {};\n+\n+__declspec(dllexport) inline void e5();\n+extern void e5() {};\n+\n+/* Make sure that just declaring the function -- without defining it\n+   -- does not cause errors.  */\n+__declspec(dllexport) inline void i6();\n+__declspec(dllexport) extern inline void e6();"}, {"sha": "80caf32174299fa71c5d8d9ecf2de7f7b4ca9b8b", "filename": "gcc/testsuite/gcc.dg/dll-10a.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ea1edfbce523efbccac2377388798ec7800460/gcc%2Ftestsuite%2Fgcc.dg%2Fdll-10a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ea1edfbce523efbccac2377388798ec7800460/gcc%2Ftestsuite%2Fgcc.dg%2Fdll-10a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdll-10a.c?ref=47ea1edfbce523efbccac2377388798ec7800460", "patch": "@@ -0,0 +1,21 @@\n+extern void i1();\n+extern void i3();\n+extern void i4();\n+extern void i5();\n+\n+extern void e1();\n+extern void e3();\n+extern void e4();\n+extern void e5();\n+\n+int main () {\n+  i1();\n+  i3();\n+  i4();\n+  i5();\n+\n+  e1();\n+  e3();\n+  e4();\n+  e5();\n+}"}, {"sha": "5fa2e6f19f58ff93f72a0f3bc9424e8197d3bd10", "filename": "gcc/testsuite/gcc.dg/dll-11.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ea1edfbce523efbccac2377388798ec7800460/gcc%2Ftestsuite%2Fgcc.dg%2Fdll-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ea1edfbce523efbccac2377388798ec7800460/gcc%2Ftestsuite%2Fgcc.dg%2Fdll-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdll-11.c?ref=47ea1edfbce523efbccac2377388798ec7800460", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do link } */\n+/* { dg-require-dll \"\" } */\n+/* { dg-additional-sources \"dll-11a.c\" } */\n+/* { dg-options \"-w -O2 -std=gnu89 -fkeep-inline-dllexport\" } */\n+\n+/* Test that inline functions declared \"dllexport\" appear in object files,\n+   even if they are not called, when -fkeep-inline-dllexport is supplied.\n+\n+   This behavior is required by the ARM C++ ABI:\n+\n+     Exporting a function that can be inlined should force the\n+     creation and export of an out-of-line copy of it.\n+\n+   and should presumably also apply.\n+\n+   Visual Studio 2005 also honors that rule.  */\n+\n+__declspec(dllexport) inline void i1() {}\n+\n+__declspec(dllexport) extern inline void e1() {}\n+\n+/* It is invalid to declare the function inline after its definition.  */\n+#if 0\n+__declspec(dllexport) void i2() {}\n+inline void i2();\n+\n+__declspec(dllexport) extern void e2() {}\n+inline void e2();\n+#endif\n+\n+__declspec(dllexport) inline void i3() {}\n+void i3();\n+\n+__declspec(dllexport) inline void e3() {}\n+extern void e3();\n+\n+__declspec(dllexport) void i4();\n+inline void i4() {};\n+\n+__declspec(dllexport) extern void e4();\n+inline void e4() {};\n+\n+__declspec(dllexport) inline void i5();\n+void i5() {};\n+\n+__declspec(dllexport) inline void e5();\n+extern void e5() {};\n+\n+/* Make sure that just declaring the function -- without defining it\n+   -- does not cause errors.  */\n+__declspec(dllexport) inline void i6();\n+__declspec(dllexport) extern inline void e6();"}, {"sha": "80caf32174299fa71c5d8d9ecf2de7f7b4ca9b8b", "filename": "gcc/testsuite/gcc.dg/dll-11a.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ea1edfbce523efbccac2377388798ec7800460/gcc%2Ftestsuite%2Fgcc.dg%2Fdll-11a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ea1edfbce523efbccac2377388798ec7800460/gcc%2Ftestsuite%2Fgcc.dg%2Fdll-11a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdll-11a.c?ref=47ea1edfbce523efbccac2377388798ec7800460", "patch": "@@ -0,0 +1,21 @@\n+extern void i1();\n+extern void i3();\n+extern void i4();\n+extern void i5();\n+\n+extern void e1();\n+extern void e3();\n+extern void e4();\n+extern void e5();\n+\n+int main () {\n+  i1();\n+  i3();\n+  i4();\n+  i5();\n+\n+  e1();\n+  e3();\n+  e4();\n+  e5();\n+}"}, {"sha": "4f8829964a7f33132681a94623efc1993ed96de9", "filename": "gcc/testsuite/gcc.dg/dll-12.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ea1edfbce523efbccac2377388798ec7800460/gcc%2Ftestsuite%2Fgcc.dg%2Fdll-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ea1edfbce523efbccac2377388798ec7800460/gcc%2Ftestsuite%2Fgcc.dg%2Fdll-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdll-12.c?ref=47ea1edfbce523efbccac2377388798ec7800460", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do link } */\n+/* { dg-require-dll \"\" } */\n+/* { dg-additional-sources \"dll-12a.c\" } */\n+/* { dg-options \"-w -O2 -std=gnu99 -fkeep-inline-dllexport\" } */\n+\n+/* Test that inline functions declared \"dllexport\" appear in object files,\n+   even if they are not called, when -fkeep-inline-dllexport is supplied.\n+\n+   This behavior is required by the ARM C++ ABI:\n+\n+     Exporting a function that can be inlined should force the\n+     creation and export of an out-of-line copy of it.\n+\n+   and should presumably also apply.\n+\n+   Visual Studio 2005 also honors that rule.  */\n+\n+__declspec(dllexport) inline void i1() {}\n+\n+__declspec(dllexport) extern inline void e1() {}\n+\n+/* It is invalid to declare the function inline after its definition.  */\n+#if 0\n+__declspec(dllexport) void i2() {}\n+inline void i2();\n+\n+__declspec(dllexport) extern void e2() {}\n+inline void e2();\n+#endif\n+\n+__declspec(dllexport) inline void i3() {}\n+void i3();\n+\n+__declspec(dllexport) inline void e3() {}\n+extern void e3();\n+\n+__declspec(dllexport) void i4();\n+inline void i4() {};\n+\n+__declspec(dllexport) extern void e4();\n+inline void e4() {};\n+\n+__declspec(dllexport) inline void i5();\n+void i5() {};\n+\n+__declspec(dllexport) inline void e5();\n+extern void e5() {};\n+\n+/* Make sure that just declaring the function -- without defining it\n+   -- does not cause errors.  */\n+__declspec(dllexport) inline void i6();\n+__declspec(dllexport) extern inline void e6();"}, {"sha": "80caf32174299fa71c5d8d9ecf2de7f7b4ca9b8b", "filename": "gcc/testsuite/gcc.dg/dll-12a.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ea1edfbce523efbccac2377388798ec7800460/gcc%2Ftestsuite%2Fgcc.dg%2Fdll-12a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ea1edfbce523efbccac2377388798ec7800460/gcc%2Ftestsuite%2Fgcc.dg%2Fdll-12a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdll-12a.c?ref=47ea1edfbce523efbccac2377388798ec7800460", "patch": "@@ -0,0 +1,21 @@\n+extern void i1();\n+extern void i3();\n+extern void i4();\n+extern void i5();\n+\n+extern void e1();\n+extern void e3();\n+extern void e4();\n+extern void e5();\n+\n+int main () {\n+  i1();\n+  i3();\n+  i4();\n+  i5();\n+\n+  e1();\n+  e3();\n+  e4();\n+  e5();\n+}"}, {"sha": "ae641d29d6cb61e59b81770a2c101567e680a2cc", "filename": "gcc/testsuite/gcc.dg/dll-9.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ea1edfbce523efbccac2377388798ec7800460/gcc%2Ftestsuite%2Fgcc.dg%2Fdll-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ea1edfbce523efbccac2377388798ec7800460/gcc%2Ftestsuite%2Fgcc.dg%2Fdll-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdll-9.c?ref=47ea1edfbce523efbccac2377388798ec7800460", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do link } */\n+/* { dg-require-dll \"\" } */\n+/* { dg-additional-sources \"dll-9a.c\" } */\n+/* { dg-options \"-w -O2 -std=gnu89 -fno-keep-inline-dllexport\" } */\n+/* { dg-prune-output .*undefined.* } */\n+/* { dg-xfail-if \"link failure expected\" { *-*-* } } */\n+\n+/* Test that inline functions declared \"dllexport\" appear in object files,\n+   even if they are not called - except when -fno-keep-inline-dllexport.\n+\n+   This behavior is required by the ARM C++ ABI:\n+\n+     Exporting a function that can be inlined should force the\n+     creation and export of an out-of-line copy of it.\n+\n+   and should presumably also apply.\n+\n+   Visual Studio 2005 also honors that rule.  */\n+\n+__declspec(dllexport) inline void i1() {}\n+\n+__declspec(dllexport) extern inline void e1() {}\n+\n+/* It is invalid to declare the function inline after its definition.  */\n+#if 0\n+__declspec(dllexport) void i2() {}\n+inline void i2();\n+\n+__declspec(dllexport) extern void e2() {}\n+inline void e2();\n+#endif\n+\n+__declspec(dllexport) inline void i3() {}\n+void i3();\n+\n+__declspec(dllexport) inline void e3() {}\n+extern void e3();\n+\n+__declspec(dllexport) void i4();\n+inline void i4() {};\n+\n+__declspec(dllexport) extern void e4();\n+inline void e4() {};\n+\n+__declspec(dllexport) inline void i5();\n+void i5() {};\n+\n+__declspec(dllexport) inline void e5();\n+extern void e5() {};\n+\n+/* Make sure that just declaring the function -- without defining it\n+   -- does not cause errors.  */\n+__declspec(dllexport) inline void i6();\n+__declspec(dllexport) extern inline void e6();"}, {"sha": "80caf32174299fa71c5d8d9ecf2de7f7b4ca9b8b", "filename": "gcc/testsuite/gcc.dg/dll-9a.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ea1edfbce523efbccac2377388798ec7800460/gcc%2Ftestsuite%2Fgcc.dg%2Fdll-9a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ea1edfbce523efbccac2377388798ec7800460/gcc%2Ftestsuite%2Fgcc.dg%2Fdll-9a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdll-9a.c?ref=47ea1edfbce523efbccac2377388798ec7800460", "patch": "@@ -0,0 +1,21 @@\n+extern void i1();\n+extern void i3();\n+extern void i4();\n+extern void i5();\n+\n+extern void e1();\n+extern void e3();\n+extern void e4();\n+extern void e5();\n+\n+int main () {\n+  i1();\n+  i3();\n+  i4();\n+  i5();\n+\n+  e1();\n+  e3();\n+  e4();\n+  e5();\n+}"}, {"sha": "f1f80053775dbd03463998bc93ecc540e52b19f3", "filename": "gcc/tree.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ea1edfbce523efbccac2377388798ec7800460/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ea1edfbce523efbccac2377388798ec7800460/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=47ea1edfbce523efbccac2377388798ec7800460", "patch": "@@ -1,7 +1,7 @@\n /* Language-independent node constructors for parse phase of GNU compiler.\n    Copyright (C) 1987, 1988, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n-   Free Software Foundation, Inc.\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n+   2011 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -5509,7 +5509,8 @@ handle_dll_attribute (tree * pnode, tree name, tree args, int flags,\n         DECL_DLLIMPORT_P (node) = 1;\n     }\n   else if (TREE_CODE (node) == FUNCTION_DECL\n-\t   && DECL_DECLARED_INLINE_P (node))\n+\t   && DECL_DECLARED_INLINE_P (node)\n+\t   && flag_keep_inline_dllexport)\n     /* An exported function, even if inline, must be emitted.  */\n     DECL_EXTERNAL (node) = 0;\n "}]}