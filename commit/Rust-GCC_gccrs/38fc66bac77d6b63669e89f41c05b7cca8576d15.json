{"sha": "38fc66bac77d6b63669e89f41c05b7cca8576d15", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzhmYzY2YmFjNzdkNmI2MzY2OWU4OWY0MWMwNWI3Y2NhODU3NmQxNQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@libertysurf.fr", "date": "2005-05-25T07:04:04Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2005-05-25T07:04:04Z"}, "message": "re PR target/21412 (ICE loading TLS address)\n\n\tPR target/21412\n\t* config/sparc/sparc.h (SPARC_SYMBOL_REF_TLS_P): New macro\n\t* config/sparc/sparc-protos.h (tls_symbolic_operand): Delete.\n\t(sparc_tls_referenced_p): New prototype.\n\t* config/sparc/sparc.c (tls_symbolic_operand): Delete.\n\t(sparc_expand_move): Look for TLS addresses with constant offsets.\n\t(legitimate_constant_p): Use SPARC_SYMBOL_REF_TLS_P instead of\n\ttls_symbolic_operand.\n\t(legitimate_pic_operand_p): Likewise.\n\t(legitimate_address_p): Likewise.\n\t(legitimize_address): Likewise.\n\t(sparc_tls_symbol_ref_1): New function.\n\t(sparc_tls_referenced_p): New function.\n\t* config/sparc/predicates.md (tgd_symbolic_operand): Use\n\tSYMBOL_REF_TLS_MODEL instead of tls_symbolic_operand.\n\t(tld_symbolic_operand): Likewise.\n\t(tie_symbolic_operand): Likewise.\n\t(tle_symbolic_operand): Likewise.\n\nFrom-SVN: r100137", "tree": {"sha": "484e1f45bb64046a2af02ae5b5edc1eb51ecbfca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/484e1f45bb64046a2af02ae5b5edc1eb51ecbfca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/38fc66bac77d6b63669e89f41c05b7cca8576d15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38fc66bac77d6b63669e89f41c05b7cca8576d15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38fc66bac77d6b63669e89f41c05b7cca8576d15", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38fc66bac77d6b63669e89f41c05b7cca8576d15/comments", "author": {"login": "ebotcazou", "id": 48091907, "node_id": "MDQ6VXNlcjQ4MDkxOTA3", "avatar_url": "https://avatars.githubusercontent.com/u/48091907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebotcazou", "html_url": "https://github.com/ebotcazou", "followers_url": "https://api.github.com/users/ebotcazou/followers", "following_url": "https://api.github.com/users/ebotcazou/following{/other_user}", "gists_url": "https://api.github.com/users/ebotcazou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebotcazou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebotcazou/subscriptions", "organizations_url": "https://api.github.com/users/ebotcazou/orgs", "repos_url": "https://api.github.com/users/ebotcazou/repos", "events_url": "https://api.github.com/users/ebotcazou/events{/privacy}", "received_events_url": "https://api.github.com/users/ebotcazou/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5c498b10af2cf068e55361f7b2915c799f2508d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c498b10af2cf068e55361f7b2915c799f2508d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c498b10af2cf068e55361f7b2915c799f2508d3"}], "stats": {"total": 104, "additions": 79, "deletions": 25}, "files": [{"sha": "d6aa061f637e78a65dc15dd5fb666191be556107", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38fc66bac77d6b63669e89f41c05b7cca8576d15/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38fc66bac77d6b63669e89f41c05b7cca8576d15/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=38fc66bac77d6b63669e89f41c05b7cca8576d15", "patch": "@@ -1,3 +1,24 @@\n+2005-05-25  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\tPR target/21412\n+\t* config/sparc/sparc.h (SPARC_SYMBOL_REF_TLS_P): New macro\n+\t* config/sparc/sparc-protos.h (tls_symbolic_operand): Delete.\n+\t(sparc_tls_referenced_p): New prototype.\n+\t* config/sparc/sparc.c (tls_symbolic_operand): Delete.\n+\t(sparc_expand_move): Look for TLS addresses with constant offsets.\n+\t(legitimate_constant_p): Use SPARC_SYMBOL_REF_TLS_P instead of\n+\ttls_symbolic_operand.\n+\t(legitimate_pic_operand_p): Likewise.\n+\t(legitimate_address_p): Likewise.\n+\t(legitimize_address): Likewise.\n+\t(sparc_tls_symbol_ref_1): New function.\n+\t(sparc_tls_referenced_p): New function.\n+\t* config/sparc/predicates.md (tgd_symbolic_operand): Use\n+\tSYMBOL_REF_TLS_MODEL instead of tls_symbolic_operand.\n+\t(tld_symbolic_operand): Likewise.\n+\t(tie_symbolic_operand): Likewise.\n+\t(tle_symbolic_operand): Likewise.\n+\n 2005-05-24  DJ Delorie  <dj@redhat.com>\n \t\n \t* common.opt (-Wattributes): New.  Default true."}, {"sha": "a0e9b04fad3ae836a46d406d675d6d6cc5552b12", "filename": "gcc/config/sparc/predicates.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38fc66bac77d6b63669e89f41c05b7cca8576d15/gcc%2Fconfig%2Fsparc%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38fc66bac77d6b63669e89f41c05b7cca8576d15/gcc%2Fconfig%2Fsparc%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fpredicates.md?ref=38fc66bac77d6b63669e89f41c05b7cca8576d15", "patch": "@@ -120,22 +120,22 @@\n ;; Return true if OP is a symbolic operand for the TLS Global Dynamic model.\n (define_predicate \"tgd_symbolic_operand\"\n   (and (match_code \"symbol_ref\")\n-       (match_test \"tls_symbolic_operand (op) == TLS_MODEL_GLOBAL_DYNAMIC\")))\n+       (match_test \"SYMBOL_REF_TLS_MODEL (op) == TLS_MODEL_GLOBAL_DYNAMIC\")))\n \n ;; Return true if OP is a symbolic operand for the TLS Local Dynamic model.\n (define_predicate \"tld_symbolic_operand\"\n   (and (match_code \"symbol_ref\")\n-       (match_test \"tls_symbolic_operand (op) == TLS_MODEL_LOCAL_DYNAMIC\")))\n+       (match_test \"SYMBOL_REF_TLS_MODEL (op) == TLS_MODEL_LOCAL_DYNAMIC\")))\n \n ;; Return true if OP is a symbolic operand for the TLS Initial Exec model.\n (define_predicate \"tie_symbolic_operand\"\n   (and (match_code \"symbol_ref\")\n-       (match_test \"tls_symbolic_operand (op) == TLS_MODEL_INITIAL_EXEC\")))\n+       (match_test \"SYMBOL_REF_TLS_MODEL (op) == TLS_MODEL_INITIAL_EXEC\")))\n \n ;; Return true if OP is a symbolic operand for the TLS Local Exec model.\n (define_predicate \"tle_symbolic_operand\"\n   (and (match_code \"symbol_ref\")\n-       (match_test \"tls_symbolic_operand (op) == TLS_MODEL_LOCAL_EXEC\")))\n+       (match_test \"SYMBOL_REF_TLS_MODEL (op) == TLS_MODEL_LOCAL_EXEC\")))\n \n ;; Return true if the operand is an argument used in generating PIC references\n ;; in either the medium/low or embedded medium/anywhere code models on V9."}, {"sha": "9c1e3721b72aee016d3e4d4781269f82c87aad83", "filename": "gcc/config/sparc/sparc-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38fc66bac77d6b63669e89f41c05b7cca8576d15/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38fc66bac77d6b63669e89f41c05b7cca8576d15/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h?ref=38fc66bac77d6b63669e89f41c05b7cca8576d15", "patch": "@@ -94,7 +94,6 @@ extern int arith_4096_operand (rtx, enum machine_mode);\n extern int zero_operand (rtx, enum machine_mode);\n extern int fp_zero_operand (rtx, enum machine_mode);\n extern int reg_or_0_operand (rtx, enum machine_mode);\n-extern int tls_symbolic_operand (rtx);\n extern int empty_delay_slot (rtx);\n extern int eligible_for_return_delay (rtx);\n extern int eligible_for_sibcall_delay (rtx);\n@@ -103,6 +102,7 @@ extern int emit_move_sequence (rtx, enum machine_mode);\n extern int fp_sethi_p (rtx);\n extern int fp_mov_p (rtx);\n extern int fp_high_losum_p (rtx);\n+extern bool sparc_tls_referenced_p (rtx);\n extern int mem_min_alignment (rtx, int);\n extern int pic_address_needs_scratch (rtx);\n extern int reg_unused_after (rtx, rtx);"}, {"sha": "1958f3f39826818c1fa7754be9fd054fcf5d51b3", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 50, "deletions": 20, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38fc66bac77d6b63669e89f41c05b7cca8576d15/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38fc66bac77d6b63669e89f41c05b7cca8576d15/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=38fc66bac77d6b63669e89f41c05b7cca8576d15", "patch": "@@ -864,17 +864,6 @@ fp_high_losum_p (rtx op)\n   return 0;\n }\n \n-/* If OP is a SYMBOL_REF of a thread-local symbol, return its TLS mode,\n-   otherwise return 0.  */\n-\n-int\n-tls_symbolic_operand (rtx op)\n-{\n-  if (GET_CODE (op) != SYMBOL_REF)\n-    return 0;\n-  return SYMBOL_REF_TLS_MODEL (op);\n-}\n-\n /* Expand a move instruction.  Return true if all work is done.  */\n \n bool\n@@ -895,9 +884,31 @@ sparc_expand_move (enum machine_mode mode, rtx *operands)\n     }\n \n   /* Fixup TLS cases.  */\n-  if (tls_symbolic_operand (operands [1]))\n-    operands[1] = legitimize_tls_address (operands[1]);\n+  if (TARGET_HAVE_TLS\n+      && CONSTANT_P (operands[1])\n+      && GET_CODE (operands[1]) != HIGH\n+      && sparc_tls_referenced_p (operands [1]))\n+    {\n+      rtx sym = operands[1];\n+      rtx addend = NULL;\n \n+      if (GET_CODE (sym) == CONST && GET_CODE (XEXP (sym, 0)) == PLUS)\n+\t{\n+\t  addend = XEXP (XEXP (sym, 0), 1);\n+\t  sym = XEXP (XEXP (sym, 0), 0);\n+\t}\n+\n+      gcc_assert (SPARC_SYMBOL_REF_TLS_P (sym));\n+\n+      sym = legitimize_tls_address (sym);\n+      if (addend)\n+\t{\n+\t  sym = gen_rtx_PLUS (mode, sym, addend);\n+\t  sym = force_operand (sym, operands[0]);\n+\t}\n+      operands[1] = sym;\n+    }\n+ \n   /* Fixup PIC cases.  */\n   if (flag_pic && CONSTANT_P (operands[1]))\n     {\n@@ -2725,7 +2736,7 @@ legitimate_constant_p (rtx x)\n       /* Offsets of TLS symbols are never valid.\n \t Discourage CSE from creating them.  */\n       if (GET_CODE (inner) == PLUS\n-\t  && tls_symbolic_operand (XEXP (inner, 0)))\n+\t  && SPARC_SYMBOL_REF_TLS_P (XEXP (inner, 0)))\n \treturn false;\n       break;\n \n@@ -2792,10 +2803,10 @@ legitimate_pic_operand_p (rtx x)\n {\n   if (pic_address_needs_scratch (x))\n     return false;\n-  if (tls_symbolic_operand (x)\n+  if (SPARC_SYMBOL_REF_TLS_P (x)\n       || (GET_CODE (x) == CONST\n \t  && GET_CODE (XEXP (x, 0)) == PLUS\n-\t  && tls_symbolic_operand (XEXP (XEXP (x, 0), 0))))\n+\t  && SPARC_SYMBOL_REF_TLS_P (XEXP (XEXP (x, 0), 0))))\n     return false;\n   return true;\n }\n@@ -2833,7 +2844,7 @@ legitimate_address_p (enum machine_mode mode, rtx addr, int strict)\n \t   && GET_CODE (rs2) != SUBREG\n \t   && GET_CODE (rs2) != LO_SUM\n \t   && GET_CODE (rs2) != MEM\n-\t   && !tls_symbolic_operand (rs2)\n+\t   && ! SPARC_SYMBOL_REF_TLS_P (rs2)\n \t   && (! symbolic_operand (rs2, VOIDmode) || mode == Pmode)\n \t   && (GET_CODE (rs2) != CONST_INT || SMALL_INT (rs2)))\n \t  || ((REG_P (rs1)\n@@ -2873,7 +2884,7 @@ legitimate_address_p (enum machine_mode mode, rtx addr, int strict)\n \t  rs2 = NULL;\n \t  imm1 = XEXP (rs1, 1);\n \t  rs1 = XEXP (rs1, 0);\n-\t  if (! CONSTANT_P (imm1) || tls_symbolic_operand (rs1))\n+\t  if (! CONSTANT_P (imm1) || SPARC_SYMBOL_REF_TLS_P (rs1))\n \t    return 0;\n \t}\n     }\n@@ -2882,7 +2893,7 @@ legitimate_address_p (enum machine_mode mode, rtx addr, int strict)\n       rs1 = XEXP (addr, 0);\n       imm1 = XEXP (addr, 1);\n \n-      if (! CONSTANT_P (imm1) || tls_symbolic_operand (rs1))\n+      if (! CONSTANT_P (imm1) || SPARC_SYMBOL_REF_TLS_P (rs1))\n \treturn 0;\n \n       /* We can't allow TFmode in 32-bit mode, because an offset greater\n@@ -2931,6 +2942,7 @@ legitimate_address_p (enum machine_mode mode, rtx addr, int strict)\n /* Construct the SYMBOL_REF for the tls_get_offset function.  */\n \n static GTY(()) rtx sparc_tls_symbol;\n+\n static rtx\n sparc_tls_get_addr (void)\n {\n@@ -2957,6 +2969,24 @@ sparc_tls_got (void)\n   return temp;\n }\n \n+/* Return 1 if *X is a thread-local symbol.  */\n+\n+static int\n+sparc_tls_symbol_ref_1 (rtx *x, void *data ATTRIBUTE_UNUSED)\n+{\n+  return SPARC_SYMBOL_REF_TLS_P (*x);\n+}\n+\n+/* Return 1 if X contains a thread-local symbol.  */\n+\n+bool\n+sparc_tls_referenced_p (rtx x)\n+{\n+  if (!TARGET_HAVE_TLS)\n+    return false;\n+\n+  return for_each_rtx (&x, &sparc_tls_symbol_ref_1, 0);\n+}\n \n /* ADDR contains a thread-local SYMBOL_REF.  Generate code to compute\n    this (thread-local) address.  */\n@@ -3219,7 +3249,7 @@ legitimize_address (rtx x, rtx oldx ATTRIBUTE_UNUSED, enum machine_mode mode)\n   if (x != orig_x && legitimate_address_p (mode, x, FALSE))\n     return x;\n \n-  if (tls_symbolic_operand (x))\n+  if (SPARC_SYMBOL_REF_TLS_P (x))\n     x = legitimize_tls_address (x);\n   else if (flag_pic)\n     x = legitimize_pic_address (x, mode, 0);"}, {"sha": "9fcee1273856674c0d407c71fba4ba072cbc335d", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38fc66bac77d6b63669e89f41c05b7cca8576d15/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38fc66bac77d6b63669e89f41c05b7cca8576d15/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=38fc66bac77d6b63669e89f41c05b7cca8576d15", "patch": "@@ -2358,6 +2358,9 @@ extern int sparc_indent_opcode;\n   sparc_output_dwarf_dtprel (FILE, SIZE, X)\n #endif\n \n+#define SPARC_SYMBOL_REF_TLS_P(RTX) \\\n+  (GET_CODE (RTX) == SYMBOL_REF && SYMBOL_REF_TLS_MODEL (RTX) != 0)\n+\n #define PRINT_OPERAND_PUNCT_VALID_P(CHAR) \\\n   ((CHAR) == '#' || (CHAR) == '*' || (CHAR) == '('\t\t\\\n    || (CHAR) == ')' || (CHAR) == '_' || (CHAR) == '&')"}]}