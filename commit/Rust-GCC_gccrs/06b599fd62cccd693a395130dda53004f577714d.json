{"sha": "06b599fd62cccd693a395130dda53004f577714d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDZiNTk5ZmQ2MmNjY2Q2OTNhMzk1MTMwZGRhNTMwMDRmNTc3NzE0ZA==", "commit": {"author": {"name": "Yannick Moy", "email": "moy@adacore.com", "date": "2013-04-24T14:14:27Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-04-24T14:14:27Z"}, "message": "adabkend.adb, [...]: Everything with name 'Alfa' renamed in 'SPARK'.\n\n2013-04-24  Yannick Moy  <moy@adacore.com>\n\n\t* adabkend.adb, ali-util.adb, ali.adb, debug.adb,\n\terrout.adb, errout.ads, erroutc.adb, exp_ch3.adb, exp_ch4.adb,\n\texp_ch6.adb, exp_ch7.adb, exp_dbug.adb, exp_util.adb,\n\texpander.adb, freeze.adb, gnat1drv.adb, lib-writ.adb,\n\tlib-writ.ads, lib-xref.adb, lib-xref.ads, opt.adb, opt.ads,\n\trestrict.adb, sem_aggr.adb, sem_attr.adb, sem_ch3.adb,\n\tsem_ch4.adb, sem_ch5.adb, sem_ch6.adb, sem_eval.adb, sem_prag.adb,\n\tsem_res.adb, sem_util.adb: Everything with name\n\t'Alfa' renamed in 'SPARK'. Update comments.\n\tRenaming of units with name 'Alfa', renamed with 'SPARK' instead.\n\t* exp_alfa.adb: renamed exp_spark.adb.\n\t* exp_alfa.ads: renamed exp_spark.ads.\n\t* get_alfa.adb: renamed get_spark_xrefs.adb.\n\t* get_alfa.ads: renamed get_spark_xrefs.ads.\n\t* lib-xref-alfa.adb: renamed lib-xref-spark_specific.adb.\n\t* put_alfa.adb: renamed put_spark_xrefs.adb.\n\t* put_alfa.ads: renamed put_spark_xrefs.ads.\n\t* alfa.adb: renamed spark_xrefs.adb.\n\t* alfa.ads: renamed spark_xrefs.ads.\n\t* alfa_test.adb: renamed spark_xrefs_test.adb.\n\nFrom-SVN: r198234", "tree": {"sha": "f76313f71e189c416d9d38234de0200ea66161d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f76313f71e189c416d9d38234de0200ea66161d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/06b599fd62cccd693a395130dda53004f577714d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06b599fd62cccd693a395130dda53004f577714d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06b599fd62cccd693a395130dda53004f577714d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06b599fd62cccd693a395130dda53004f577714d/comments", "author": {"login": "yannickmoy", "id": 859440, "node_id": "MDQ6VXNlcjg1OTQ0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/859440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yannickmoy", "html_url": "https://github.com/yannickmoy", "followers_url": "https://api.github.com/users/yannickmoy/followers", "following_url": "https://api.github.com/users/yannickmoy/following{/other_user}", "gists_url": "https://api.github.com/users/yannickmoy/gists{/gist_id}", "starred_url": "https://api.github.com/users/yannickmoy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yannickmoy/subscriptions", "organizations_url": "https://api.github.com/users/yannickmoy/orgs", "repos_url": "https://api.github.com/users/yannickmoy/repos", "events_url": "https://api.github.com/users/yannickmoy/events{/privacy}", "received_events_url": "https://api.github.com/users/yannickmoy/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "97c116dccd8c8839c3da8fc6b2c3664368dfa55b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97c116dccd8c8839c3da8fc6b2c3664368dfa55b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97c116dccd8c8839c3da8fc6b2c3664368dfa55b"}], "stats": {"total": 3861, "additions": 1934, "deletions": 1927}, "files": [{"sha": "4f8e025dd497d15c40c99e4ef153b4b1fc408c0b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=06b599fd62cccd693a395130dda53004f577714d", "patch": "@@ -1,3 +1,27 @@\n+2013-04-24  Yannick Moy  <moy@adacore.com>\n+\n+\t* adabkend.adb, ali-util.adb, ali.adb, debug.adb,\n+\terrout.adb, errout.ads, erroutc.adb, exp_ch3.adb, exp_ch4.adb,\n+\texp_ch6.adb, exp_ch7.adb, exp_dbug.adb, exp_util.adb,\n+\texpander.adb, freeze.adb, gnat1drv.adb, lib-writ.adb,\n+\tlib-writ.ads, lib-xref.adb, lib-xref.ads, opt.adb, opt.ads,\n+\trestrict.adb, sem_aggr.adb, sem_attr.adb, sem_ch3.adb,\n+\tsem_ch4.adb, sem_ch5.adb, sem_ch6.adb, sem_eval.adb, sem_prag.adb,\n+\tsem_res.adb, sem_util.adb: Everything with name\n+\t'Alfa' renamed in 'SPARK'. Update comments.\n+\tRenaming of units with name 'Alfa', renamed with 'SPARK' instead.\n+\t* exp_alfa.adb: renamed exp_spark.adb.\n+\t* exp_alfa.ads: renamed exp_spark.ads.\n+\t* get_alfa.adb: renamed get_spark_xrefs.adb.\n+\t* get_alfa.ads: renamed get_spark_xrefs.ads.\n+\t* lib-xref-alfa.adb: renamed lib-xref-spark_specific.adb.\n+\t* put_alfa.adb: renamed put_spark_xrefs.adb.\n+\t* put_alfa.ads: renamed put_spark_xrefs.ads.\n+\t* alfa.adb: renamed spark_xrefs.adb.\n+\t* alfa.ads: renamed spark_xrefs.ads.\n+\t* alfa_test.adb: renamed spark_xrefs_test.adb.\n+\t* gcc-interface/Make-lang.in: Update dependencies.\n+\n 2013-04-24  Robert Dewar  <dewar@adacore.com>\n \n \t* gnat_rm.texi: Document pragma Assume."}, {"sha": "4a77920a2d6069c03cdb38654f111fd48315aa6c", "filename": "gcc/ada/adabkend.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Fadabkend.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Fadabkend.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadabkend.adb?ref=06b599fd62cccd693a395130dda53004f577714d", "patch": "@@ -235,12 +235,12 @@ package body Adabkend is\n                if Is_Switch (Argv) then\n                   Fail (\"Object file name missing after -gnatO\");\n \n-               --  In Alfa_Mode, such an object file is never written, and the\n+               --  In SPARK_Mode, such an object file is never written, and the\n                --  call to Set_Output_Object_File_Name may fail (e.g. when the\n                --  object file name does not have the expected suffix). So we\n-               --  skip that call when Alfa_Mode is set.\n+               --  skip that call when SPARK_Mode is set.\n \n-               elsif Alfa_Mode then\n+               elsif SPARK_Mode then\n                   Output_File_Name_Seen := True;\n \n                else"}, {"sha": "92380f8eb354980a23859b4830a005f27689f00d", "filename": "gcc/ada/ali-util.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Fali-util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Fali-util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fali-util.adb?ref=06b599fd62cccd693a395130dda53004f577714d", "patch": "@@ -278,7 +278,7 @@ package body ALI.Util is\n                   --  generated, so No_Object=True is not considered an error.\n \n                   elsif ALIs.Table (Idread).No_Object\n-                    and then not Alfa_Mode\n+                    and then not SPARK_Mode\n                     and then not Ignore_Errors\n                   then\n                      Error_Msg_File_1 := Withs.Table (W).Sfile;"}, {"sha": "6c2f8187a925ccfa094fdde7e7a5f8dd4accaab7", "filename": "gcc/ada/ali.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Fali.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Fali.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fali.adb?ref=06b599fd62cccd693a395130dda53004f577714d", "patch": "@@ -57,7 +57,7 @@ package body ALI is\n       'Y'    => True,   -- limited_with\n       'Z'    => True,   -- implicit with from instantiation\n       'C'    => True,   -- SCO information\n-      'F'    => True,   -- Alfa information\n+      'F'    => True,   -- SPARK cross-reference information\n       others => False);\n \n    --------------------\n@@ -2670,7 +2670,7 @@ package body ALI is\n       --  Here after dealing with xref sections\n \n       --  Ignore remaining lines, which belong to an additional section of the\n-      --  ALI file not considered here (like SCO or Alfa).\n+      --  ALI file not considered here (like SCO or SPARK information).\n \n       Check_Unknown_Line;\n "}, {"sha": "6b2caca64242b13478389b7705df73482ff294a9", "filename": "gcc/ada/debug.adb", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Fdebug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Fdebug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug.adb?ref=06b599fd62cccd693a395130dda53004f577714d", "patch": "@@ -121,14 +121,14 @@ package body Debug is\n    --  d.A  Read/write Aspect_Specifications hash table to tree\n    --  d.B\n    --  d.C  Generate concatenation call, do not generate inline code\n-   --  d.D  Strict Alfa mode\n-   --  d.E  Force Alfa mode for gnat2why\n-   --  d.F  Alfa mode\n+   --  d.D  SPARK strict mode\n+   --  d.E  Force SPARK mode for gnat2why\n+   --  d.F  SPARK mode\n    --  d.G  Frame condition mode for gnat2why\n    --  d.H  Standard package only mode for gnat2why\n    --  d.I  Do not ignore enum representation clauses in CodePeer mode\n    --  d.J  Disable parallel SCIL generation mode\n-   --  d.K  Alfa detection only mode for gnat2why\n+   --  d.K  SPARK detection only mode for gnat2why\n    --  d.L  Depend on back end for limited types in if and case expressions\n    --  d.M  Relaxed RM semantics\n    --  d.N  Add node to all entities\n@@ -594,17 +594,17 @@ package body Debug is\n    --  d.C  Generate call to System.Concat_n.Str_Concat_n routines in cases\n    --       where we would normally generate inline concatenation code.\n \n-   --  d.D  Strict Alfa mode. Interpret compiler permissions as strictly as\n-   --       possible in Alfa mode.\n+   --  d.D  SPARK strict mode. Interpret compiler permissions as strictly as\n+   --       possible in SPARK mode.\n \n-   --  d.E  Force Alfa mode for gnat2why. In this mode, errors are issued for\n-   --       all violations of Alfa in user code, and warnings are issued for\n+   --  d.E  Force SPARK mode for gnat2why. In this mode, errors are issued for\n+   --       all violations of SPARK in user code, and warnings are issued for\n    --       constructs not yet implemented in gnat2why.\n \n-   --  d.F  Alfa mode. Generate AST in a form suitable for formal verification,\n-   --       as well as additional cross reference information in ALI files to\n-   --       compute effects of subprograms. Note that ALI files are only\n-   --       written when option d.G is also given.\n+   --  d.F  SPARK mode. Generate AST in a form suitable for formal\n+   --       verification, as well as additional cross reference information in\n+   --       ALI files to compute effects of subprograms. Note that ALI files\n+   --       are only written when option d.G is also given.\n \n    --  d.G  Frame condition mode for gnat2why. In this mode, gnat2why will not\n    --       generate Why code. Instead, it generates ALI files with an extra\n@@ -624,8 +624,8 @@ package body Debug is\n    --       done in parallel to speed processing. This switch disables this\n    --       behavior.\n \n-   --  d.K  Alfa detection only mode for gnat2why. In this mode, gnat2why\n-   --       will only generate the .alfa file, but no Why code.\n+   --  d.K  SPARK detection only mode for gnat2why. In this mode, gnat2why\n+   --       does not generate Why code.\n \n    --  d.L  Normally the front end generates special expansion for conditional\n    --       expressions of a limited type. This debug flag removes this special"}, {"sha": "b8d044e3d341feaaf18f24086b3c2c1406bbb5c6", "filename": "gcc/ada/errout.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Ferrout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Ferrout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.adb?ref=06b599fd62cccd693a395130dda53004f577714d", "patch": "@@ -2920,10 +2920,10 @@ package body Errout is\n \n       elsif Msg = \"size for& too small, minimum allowed is ^\" then\n \n-         --  Suppress \"size too small\" errors in CodePeer mode and Alfa mode,\n+         --  Suppress \"size too small\" errors in CodePeer mode and SPARK mode,\n          --  since pragma Pack is also ignored in these configurations.\n \n-         if CodePeer_Mode or Alfa_Mode then\n+         if CodePeer_Mode or SPARK_Mode then\n             return True;\n \n          --  When a size is wrong for a frozen type there is no explicit size"}, {"sha": "4b30a0663a0ac91c58175cce0987b40eafe8f43f", "filename": "gcc/ada/errout.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Ferrout.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Ferrout.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.ads?ref=06b599fd62cccd693a395130dda53004f577714d", "patch": "@@ -507,8 +507,8 @@ package Errout is\n    --  Note: a special exception is that RM is never treated as a keyword\n    --  but instead is copied literally into the message, this avoids the\n    --  need for writing 'R'M for all reference manual quotes. A similar\n-   --  exception is applied to the occurrence of the string Alfa used in\n-   --  error messages about the Alfa subset of Ada.\n+   --  exception is applied to the occurrence of the string SPARK used in\n+   --  error messages about the SPARK subset of Ada.\n \n    --  In the case of names, the default mode for the error text processor\n    --  is to surround the name by quotation marks automatically. The case"}, {"sha": "a0da2304bc43fc2e80e03c05896684b80fc1edfd", "filename": "gcc/ada/erroutc.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Ferroutc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Ferroutc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferroutc.adb?ref=06b599fd62cccd693a395130dda53004f577714d", "patch": "@@ -986,12 +986,12 @@ package body Erroutc is\n       if Name_Len = 2 and then Name_Buffer (1 .. 2) = \"RM\" then\n          Set_Msg_Name_Buffer;\n \n-      --  We make a similar exception for Alfa\n+      --  We make a similar exception for SPARK\n \n-      elsif Name_Len = 4 and then Name_Buffer (1 .. 4) = \"Alfa\" then\n+      elsif Name_Len = 5 and then Name_Buffer (1 .. 5) = \"SPARK\" then\n          Set_Msg_Name_Buffer;\n \n-      --  Neither RM nor Alfa: case appropriately and add surrounding quotes\n+      --  Neither RM nor SPARK: case appropriately and add surrounding quotes\n \n       else\n          Set_Casing (Keyword_Casing (Flag_Source), All_Lower_Case);"}, {"sha": "760676238cec63cbfc8fe959807c1b6fd4f33cbe", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=06b599fd62cccd693a395130dda53004f577714d", "patch": "@@ -6131,10 +6131,10 @@ package body Exp_Ch3 is\n       elsif CodePeer_Mode then\n          return;\n \n-      --  Do not create TSS routine Finalize_Address when compiling in Alfa\n+      --  Do not create TSS routine Finalize_Address when compiling in SPARK\n       --  mode because it is not necessary and results in useless expansion.\n \n-      elsif Alfa_Mode then\n+      elsif SPARK_Mode then\n          return;\n       end if;\n \n@@ -6883,9 +6883,9 @@ package body Exp_Ch3 is\n             --  created. If Def_Id is limited, Stream_Input and Stream_Read\n             --  may produce build-in-place allocations and for those the\n             --  expander needs Finalize_Address. Do not create the body of\n-            --  Finalize_Address in Alfa mode since it is not needed.\n+            --  Finalize_Address in SPARK mode since it is not needed.\n \n-            if not Alfa_Mode then\n+            if not SPARK_Mode then\n                Make_Finalize_Address_Body (Def_Id);\n             end if;\n "}, {"sha": "22cbe79ee1ea2fed95ed1949bc7eff000240b566", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=06b599fd62cccd693a395130dda53004f577714d", "patch": "@@ -1240,14 +1240,14 @@ package body Exp_Ch4 is\n             --    * .NET/JVM - these targets do not support address arithmetic\n             --    and unchecked conversion, key elements of Finalize_Address.\n \n-            --    * Alfa mode - the call is useless and results in unwanted\n+            --    * SPARK mode - the call is useless and results in unwanted\n             --    expansion.\n \n             --    * CodePeer mode - TSS primitive Finalize_Address is not\n             --    created in this mode.\n \n             if VM_Target = No_VM\n-              and then not Alfa_Mode\n+              and then not SPARK_Mode\n               and then not CodePeer_Mode\n               and then Present (Finalization_Master (PtrT))\n               and then Present (Temp_Decl)\n@@ -4255,10 +4255,10 @@ package body Exp_Ch4 is\n \n          --  The finalization master must be inserted and analyzed as part of\n          --  the current semantic unit. This form of expansion is not carried\n-         --  out in Alfa mode because it is useless. Note that the master is\n+         --  out in SPARK mode because it is useless. Note that the master is\n          --  updated when analysis changes current units.\n \n-         if not Alfa_Mode then\n+         if not SPARK_Mode then\n             if Present (Rel_Typ) then\n                Set_Finalization_Master (PtrT, Finalization_Master (Rel_Typ));\n             else\n@@ -4790,13 +4790,13 @@ package body Exp_Ch4 is\n \n                      --  Do not generate this call in the following cases:\n                      --\n-                     --    * Alfa mode - the call is useless and results in\n+                     --    * SPARK mode - the call is useless and results in\n                      --    unwanted expansion.\n                      --\n                      --    * CodePeer mode - TSS primitive Finalize_Address is\n                      --    not created in this mode.\n \n-                     elsif not (Alfa_Mode or CodePeer_Mode) then\n+                     elsif not (SPARK_Mode or CodePeer_Mode) then\n                         Insert_Action (N,\n                           Make_Set_Finalize_Address_Call\n                             (Loc     => Loc,\n@@ -7557,7 +7557,7 @@ package body Exp_Ch4 is\n \n       --  CodePeer and GNATprove want to see the unexpanded N_Op_Expon node\n \n-      if CodePeer_Mode or Alfa_Mode then\n+      if CodePeer_Mode or SPARK_Mode then\n          return;\n       end if;\n "}, {"sha": "3e33ed8a018b9cbe691fb571048b71970a772ebd", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=06b599fd62cccd693a395130dda53004f577714d", "patch": "@@ -8092,11 +8092,11 @@ package body Exp_Ch6 is\n          return False;\n \n       else\n-         --  In Alfa mode, build-in-place calls are not expanded, so that we\n+         --  In SPARK mode, build-in-place calls are not expanded, so that we\n          --  may end up with a call that is neither resolved to an entity, nor\n          --  an indirect call.\n \n-         if Alfa_Mode then\n+         if SPARK_Mode then\n             return False;\n \n          elsif Is_Entity_Name (Name (Exp_Node)) then\n@@ -8563,12 +8563,12 @@ package body Exp_Ch6 is\n          then\n             null;\n \n-         --  Do not generate the call to Set_Finalize_Address in Alfa mode\n+         --  Do not generate the call to Set_Finalize_Address in SPARK mode\n          --  because it is not necessary and results in unwanted expansion.\n          --  This expansion is also not carried out in CodePeer mode because\n          --  Finalize_Address is never built.\n \n-         elsif not Alfa_Mode\n+         elsif not SPARK_Mode\n            and then not CodePeer_Mode\n          then\n             Insert_Action (Allocator,"}, {"sha": "fdaf213ff863a24788579c1f841afa34564723b9", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=06b599fd62cccd693a395130dda53004f577714d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -929,10 +929,10 @@ package body Exp_Ch7 is\n       then\n          return;\n \n-      --  Do not create finalization masters in Alfa mode because they result\n+      --  Do not create finalization masters in SPARK mode because they result\n       --  in unwanted expansion.\n \n-      elsif Alfa_Mode then\n+      elsif SPARK_Mode then\n          return;\n       end if;\n \n@@ -2805,10 +2805,10 @@ package body Exp_Ch7 is\n    begin\n       Fin_Id := Empty;\n \n-      --  Do not perform this expansion in Alfa mode because it is not\n+      --  Do not perform this expansion in SPARK mode because it is not\n       --  necessary.\n \n-      if Alfa_Mode then\n+      if SPARK_Mode then\n          return;\n       end if;\n \n@@ -2967,10 +2967,10 @@ package body Exp_Ch7 is\n       HSS : Node_Id;\n \n    begin\n-      --  Do not perform this expansion in Alfa mode because we do not create\n+      --  Do not perform this expansion in SPARK mode because we do not create\n       --  finalizers in the first place.\n \n-      if Alfa_Mode then\n+      if SPARK_Mode then\n          return;\n       end if;\n \n@@ -3653,7 +3653,7 @@ package body Exp_Ch7 is\n       --  this node and enclosed expression are not expanded, so do not apply\n       --  any transformations here.\n \n-      elsif Alfa_Mode\n+      elsif SPARK_Mode\n         and then Nkind (Wrap_Node) = N_Pragma\n         and then Get_Pragma_Id (Wrap_Node) = Pragma_Check\n       then"}, {"sha": "cc5ff4fc8fb7f496c4a80b3e4231948d415b51d1", "filename": "gcc/ada/exp_dbug.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Fexp_dbug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Fexp_dbug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_dbug.adb?ref=06b599fd62cccd693a395130dda53004f577714d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1996-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1996-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1315,7 +1315,7 @@ package body Exp_Dbug is\n       --  name as being qualified, as Qualify_Entity_Name may be called more\n       --  than once on the same entity.\n \n-      elsif Alfa_Mode then\n+      elsif SPARK_Mode then\n          if Has_Homonym (Ent) then\n             Get_Name_String (Chars (Ent));\n             Append_Homonym_Number (Ent);"}, {"sha": "cd32353a51db93ca5d3ef25c382b03ce2fe4ec57", "filename": "gcc/ada/exp_spark.adb", "status": "renamed", "additions": 52, "deletions": 52, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Fexp_spark.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Fexp_spark.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_spark.adb?ref=06b599fd62cccd693a395130dda53004f577714d", "patch": "@@ -2,11 +2,11 @@\n --                                                                          --\n --                         GNAT COMPILER COMPONENTS                         --\n --                                                                          --\n---                             E X P _ A L F A                              --\n+--                            E X P _ S P A R K                             --\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -40,46 +40,46 @@ with Snames;   use Snames;\n with Stand;    use Stand;\n with Tbuild;   use Tbuild;\n \n-package body Exp_Alfa is\n+package body Exp_SPARK is\n \n    -----------------------\n    -- Local Subprograms --\n    -----------------------\n \n-   procedure Expand_Alfa_Call (N : Node_Id);\n+   procedure Expand_SPARK_Call (N : Node_Id);\n    --  This procedure contains common processing for function and procedure\n    --  calls:\n    --    * expansion of actuals to introduce necessary temporaries\n    --    * replacement of renaming by subprogram renamed\n \n-   procedure Expand_Alfa_N_Attribute_Reference (N : Node_Id);\n+   procedure Expand_SPARK_N_Attribute_Reference (N : Node_Id);\n    --  Expand attributes 'Old and 'Result only\n \n-   procedure Expand_Alfa_N_In (N : Node_Id);\n+   procedure Expand_SPARK_N_In (N : Node_Id);\n    --  Expand set membership into individual ones\n \n-   procedure Expand_Alfa_N_Object_Renaming_Declaration (N : Node_Id);\n+   procedure Expand_SPARK_N_Object_Renaming_Declaration (N : Node_Id);\n    --  Perform name evaluation for a renamed object\n \n-   procedure Expand_Alfa_N_Simple_Return_Statement (N : Node_Id);\n+   procedure Expand_SPARK_N_Simple_Return_Statement (N : Node_Id);\n    --  Insert conversion on function return if necessary\n \n-   procedure Expand_Alfa_Simple_Function_Return (N : Node_Id);\n+   procedure Expand_SPARK_Simple_Function_Return (N : Node_Id);\n    --  Expand simple return from function\n \n    procedure Expand_Potential_Renaming (N : Node_Id);\n    --  N denotes a N_Identifier or N_Expanded_Name. If N references a renaming,\n    --  replace N with the renamed object.\n \n-   -----------------\n-   -- Expand_Alfa --\n-   -----------------\n+   ------------------\n+   -- Expand_SPARK --\n+   ------------------\n \n-   procedure Expand_Alfa (N : Node_Id) is\n+   procedure Expand_SPARK (N : Node_Id) is\n    begin\n       case Nkind (N) is\n          when N_Attribute_Reference =>\n-            Expand_Alfa_N_Attribute_Reference (N);\n+            Expand_SPARK_N_Attribute_Reference (N);\n \n          --  Qualification of entity names in formal verification mode\n          --  is limited to the addition of a suffix for homonyms (see\n@@ -96,14 +96,14 @@ package body Exp_Alfa is\n             Qualify_Entity_Names (N);\n \n          when N_Subprogram_Call     =>\n-            Expand_Alfa_Call (N);\n+            Expand_SPARK_Call (N);\n \n          when N_Expanded_Name |\n               N_Identifier    =>\n             Expand_Potential_Renaming (N);\n \n          when N_In =>\n-            Expand_Alfa_N_In (N);\n+            Expand_SPARK_N_In (N);\n \n          --  A NOT IN B gets transformed to NOT (A IN B). This is the same\n          --  expansion used in the normal case, so shared the code.\n@@ -112,23 +112,23 @@ package body Exp_Alfa is\n             Expand_N_Not_In (N);\n \n          when N_Object_Renaming_Declaration =>\n-            Expand_Alfa_N_Object_Renaming_Declaration (N);\n+            Expand_SPARK_N_Object_Renaming_Declaration (N);\n \n          when N_Simple_Return_Statement =>\n-            Expand_Alfa_N_Simple_Return_Statement (N);\n+            Expand_SPARK_N_Simple_Return_Statement (N);\n \n-         --  In Alfa mode, no other constructs require expansion\n+         --  In SPARK mode, no other constructs require expansion\n \n          when others =>\n             null;\n       end case;\n-   end Expand_Alfa;\n+   end Expand_SPARK;\n \n-   ----------------------\n-   -- Expand_Alfa_Call --\n-   ----------------------\n+   -----------------------\n+   -- Expand_SPARK_Call --\n+   -----------------------\n \n-   procedure Expand_Alfa_Call (N : Node_Id) is\n+   procedure Expand_SPARK_Call (N : Node_Id) is\n       Call_Node   : constant Node_Id := N;\n       Parent_Subp : Entity_Id;\n       Subp        : Entity_Id;\n@@ -184,13 +184,13 @@ package body Exp_Alfa is\n \n          Set_Entity (Name (Call_Node), Parent_Subp);\n       end if;\n-   end Expand_Alfa_Call;\n+   end Expand_SPARK_Call;\n \n-   ---------------------------------------\n-   -- Expand_Alfa_N_Attribute_Reference --\n-   ---------------------------------------\n+   ----------------------------------------\n+   -- Expand_SPARK_N_Attribute_Reference --\n+   ----------------------------------------\n \n-   procedure Expand_Alfa_N_Attribute_Reference (N : Node_Id) is\n+   procedure Expand_SPARK_N_Attribute_Reference (N : Node_Id) is\n       Id : constant Attribute_Id := Get_Attribute_Id (Attribute_Name (N));\n \n    begin\n@@ -202,35 +202,35 @@ package body Exp_Alfa is\n          when others =>\n             null;\n       end case;\n-   end Expand_Alfa_N_Attribute_Reference;\n+   end Expand_SPARK_N_Attribute_Reference;\n \n-   ----------------------\n-   -- Expand_Alfa_N_In --\n-   ----------------------\n+   -----------------------\n+   -- Expand_SPARK_N_In --\n+   -----------------------\n \n-   procedure Expand_Alfa_N_In (N : Node_Id) is\n+   procedure Expand_SPARK_N_In (N : Node_Id) is\n    begin\n       if Present (Alternatives (N)) then\n          Expand_Set_Membership (N);\n       end if;\n-   end Expand_Alfa_N_In;\n+   end Expand_SPARK_N_In;\n \n-   -----------------------------------------------\n-   -- Expand_Alfa_N_Object_Renaming_Declaration --\n-   -----------------------------------------------\n+   ------------------------------------------------\n+   -- Expand_SPARK_N_Object_Renaming_Declaration --\n+   ------------------------------------------------\n \n-   procedure Expand_Alfa_N_Object_Renaming_Declaration (N : Node_Id) is\n+   procedure Expand_SPARK_N_Object_Renaming_Declaration (N : Node_Id) is\n    begin\n       --  Unconditionally remove all side effects from the name\n \n       Evaluate_Name (Name (N));\n-   end Expand_Alfa_N_Object_Renaming_Declaration;\n+   end Expand_SPARK_N_Object_Renaming_Declaration;\n \n-   -------------------------------------------\n-   -- Expand_Alfa_N_Simple_Return_Statement --\n-   -------------------------------------------\n+   --------------------------------------------\n+   -- Expand_SPARK_N_Simple_Return_Statement --\n+   --------------------------------------------\n \n-   procedure Expand_Alfa_N_Simple_Return_Statement (N : Node_Id) is\n+   procedure Expand_SPARK_N_Simple_Return_Statement (N : Node_Id) is\n    begin\n       --  Defend against previous errors (i.e. the return statement calls a\n       --  function that is not available in configurable runtime).\n@@ -247,7 +247,7 @@ package body Exp_Alfa is\n \n          when E_Function          |\n               E_Generic_Function  =>\n-            Expand_Alfa_Simple_Function_Return (N);\n+            Expand_SPARK_Simple_Function_Return (N);\n \n          when E_Procedure         |\n               E_Generic_Procedure |\n@@ -263,13 +263,13 @@ package body Exp_Alfa is\n    exception\n       when RE_Not_Available =>\n          return;\n-   end Expand_Alfa_N_Simple_Return_Statement;\n+   end Expand_SPARK_N_Simple_Return_Statement;\n \n-   ----------------------------------------\n-   -- Expand_Alfa_Simple_Function_Return --\n-   ----------------------------------------\n+   -----------------------------------------\n+   -- Expand_SPARK_Simple_Function_Return --\n+   -----------------------------------------\n \n-   procedure Expand_Alfa_Simple_Function_Return (N : Node_Id) is\n+   procedure Expand_SPARK_Simple_Function_Return (N : Node_Id) is\n       Scope_Id : constant Entity_Id :=\n                    Return_Applies_To (Return_Statement_Entity (N));\n       --  The function we are returning from\n@@ -298,7 +298,7 @@ package body Exp_Alfa is\n \n          Analyze_And_Resolve (Exp, R_Type);\n       end if;\n-   end Expand_Alfa_Simple_Function_Return;\n+   end Expand_SPARK_Simple_Function_Return;\n \n    -------------------------------\n    -- Expand_Potential_Renaming --\n@@ -318,4 +318,4 @@ package body Exp_Alfa is\n       end if;\n    end Expand_Potential_Renaming;\n \n-end Exp_Alfa;\n+end Exp_SPARK;", "previous_filename": "gcc/ada/exp_alfa.adb"}, {"sha": "726b69ac0141c89c430cab7eeb55ec92d6ff5eb3", "filename": "gcc/ada/exp_spark.ads", "status": "renamed", "additions": 22, "deletions": 21, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Fexp_spark.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Fexp_spark.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_spark.ads?ref=06b599fd62cccd693a395130dda53004f577714d", "patch": "@@ -2,11 +2,11 @@\n --                                                                          --\n --                         GNAT COMPILER COMPONENTS                         --\n --                                                                          --\n---                             E X P _ A L F A                              --\n+--                            E X P _ S P A R K                             --\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2011-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2011-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -24,13 +24,13 @@\n ------------------------------------------------------------------------------\n \n --  This package implements a light expansion which is used in formal\n---  verification mode (Alfa_Mode = True). Instead of a complete expansion\n---  of nodes for code generation, this Alfa expansion targets generation\n+--  verification mode (SPARK_Mode = True). Instead of a complete expansion\n+--  of nodes for code generation, this SPARK expansion targets generation\n --  of intermediate code for formal verification.\n \n---  Expand_Alfa is called directly by Expander.Expand.\n+--  Expand_SPARK is called directly by Expander.Expand.\n \n---  Alfa expansion has three main objectives:\n+--  SPARK expansion has three main objectives:\n \n --    1. Perform limited expansion to explicit some Ada rules and constructs\n --       (translate 'Old and 'Result, replace renamings by renamed, insert\n@@ -44,9 +44,9 @@\n --       formally, as typically done in the full expansion for high-level\n --       constructs (tasking, dispatching)\n \n---  To fulfill objective 1, Expand_Alfa selectively expands some constructs.\n+--  To fulfill objective 1, Expand_SPARK selectively expands some constructs.\n \n---  To fulfill objective 2, the tree after Alfa expansion should be fully\n+--  To fulfill objective 2, the tree after SPARK expansion should be fully\n --  analyzed semantically. In particular, all expression must have their proper\n --  type, and semantic links should be set between tree nodes (partial to full\n --  view, etc.) Some kinds of nodes should be either absent, or can be ignored\n@@ -56,21 +56,22 @@\n --      N_Expression_Function:         absent (rewitten)\n --      N_Expression_With_Actions:     absent (not generated)\n \n---  Alfa cross-references are generated from the regular cross-references (used\n---  for browsing and code understanding) and additional references collected\n---  during semantic analysis, in particular on all dereferences. These Alfa\n---  cross-references are output in a separate section of ALI files, as\n---  described in alfa.adb. They are the basis for the computation of data\n---  dependences in the formal verification backend. This implies that all\n---  cross-references should be generated in this mode, even those that would\n---  not make sense from a user point-of-view, and that cross-references that do\n---  not lead to data dependences for subprograms can be safely ignored.\n+--  SPARK cross-references are generated from the regular cross-references\n+--  (used for browsing and code understanding) and additional references\n+--  collected during semantic analysis, in particular on all\n+--  dereferences. These SPARK cross-references are output in a separate section\n+--  of ALI files, as described in spark_xrefs.adb. They are the basis for the\n+--  computation of data dependences in the formal verification backend. This\n+--  implies that all cross-references should be generated in this mode, even\n+--  those that would not make sense from a user point-of-view, and that\n+--  cross-references that do not lead to data dependences for subprograms can\n+--  be safely ignored.\n \n --  To support the formal verification of units parameterized by data, the\n --  value of deferred constants should not be considered as a compile-time\n --  constant at program locations where the full view is not visible.\n \n---  To fulfill objective 3, Expand_Alfa does not expand features that are not\n+--  To fulfill objective 3, Expand_SPARK does not expand features that are not\n --  formally analyzed (tasking), or for which formal analysis relies on the\n --  source level representation (dispatching, aspects, pragmas). However, these\n --  should be semantically analyzed, which sometimes requires the insertion of\n@@ -79,8 +80,8 @@\n \n with Types; use Types;\n \n-package Exp_Alfa is\n+package Exp_SPARK is\n \n-   procedure Expand_Alfa (N : Node_Id);\n+   procedure Expand_SPARK (N : Node_Id);\n \n-end Exp_Alfa;\n+end Exp_SPARK;", "previous_filename": "gcc/ada/exp_alfa.ads"}, {"sha": "df4d170cf19b28ace38f6e84d014b90838cf0eab", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=06b599fd62cccd693a395130dda53004f577714d", "patch": "@@ -560,10 +560,10 @@ package body Exp_Util is\n    --  Start of processing for Build_Allocate_Deallocate_Proc\n \n    begin\n-      --  Do not perform this expansion in Alfa mode because it is not\n+      --  Do not perform this expansion in SPARK mode because it is not\n       --  necessary.\n \n-      if Alfa_Mode then\n+      if SPARK_Mode then\n          return;\n       end if;\n \n@@ -6986,10 +6986,13 @@ package body Exp_Util is\n       --  Otherwise we generate a reference to the value\n \n       else\n-         --  An expression which is in Alfa mode is considered side effect free\n-         --  if the resulting value is captured by a variable or a constant.\n+         --  An expression which is in SPARK mode is considered side effect\n+         --  free if the resulting value is captured by a variable or a\n+         --  constant.\n \n-         if Alfa_Mode and then Nkind (Parent (Exp)) = N_Object_Declaration then\n+         if SPARK_Mode\n+           and then Nkind (Parent (Exp)) = N_Object_Declaration\n+         then\n             goto Leave;\n          end if;\n \n@@ -7029,11 +7032,11 @@ package body Exp_Util is\n \n          --  The regular expansion of functions with side effects involves the\n          --  generation of an access type to capture the return value found on\n-         --  the secondary stack. Since Alfa (and why) cannot process access\n+         --  the secondary stack. Since SPARK (and why) cannot process access\n          --  types, use a different approach which ignores the secondary stack\n          --  and \"copies\" the returned object.\n \n-         if Alfa_Mode then\n+         if SPARK_Mode then\n             Res := New_Reference_To (Def_Id, Loc);\n             Ref_Type := Exp_Type;\n \n@@ -7067,10 +7070,10 @@ package body Exp_Util is\n          else\n             E := Relocate_Node (E);\n \n-            --  Do not generate a 'reference in Alfa mode since the access type\n-            --  is not created in the first place.\n+            --  Do not generate a 'reference in SPARK mode since the access\n+            --  type is not created in the first place.\n \n-            if Alfa_Mode then\n+            if SPARK_Mode then\n                New_Exp := E;\n \n             --  Otherwise generate reference, marking the value as non-null"}, {"sha": "a037dd3790c52f255757c5da29e31fcf49dc5c9c", "filename": "gcc/ada/expander.adb", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Fexpander.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Fexpander.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexpander.adb?ref=06b599fd62cccd693a395130dda53004f577714d", "patch": "@@ -23,29 +23,29 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-with Atree;    use Atree;\n-with Debug_A;  use Debug_A;\n-with Exp_Aggr; use Exp_Aggr;\n-with Exp_Alfa; use Exp_Alfa;\n-with Exp_Attr; use Exp_Attr;\n-with Exp_Ch2;  use Exp_Ch2;\n-with Exp_Ch3;  use Exp_Ch3;\n-with Exp_Ch4;  use Exp_Ch4;\n-with Exp_Ch5;  use Exp_Ch5;\n-with Exp_Ch6;  use Exp_Ch6;\n-with Exp_Ch7;  use Exp_Ch7;\n-with Exp_Ch8;  use Exp_Ch8;\n-with Exp_Ch9;  use Exp_Ch9;\n-with Exp_Ch11; use Exp_Ch11;\n-with Exp_Ch12; use Exp_Ch12;\n-with Exp_Ch13; use Exp_Ch13;\n-with Exp_Prag; use Exp_Prag;\n-with Opt;      use Opt;\n-with Rtsfind;  use Rtsfind;\n-with Sem;      use Sem;\n-with Sem_Ch8;  use Sem_Ch8;\n-with Sem_Util; use Sem_Util;\n-with Sinfo;    use Sinfo;\n+with Atree;     use Atree;\n+with Debug_A;   use Debug_A;\n+with Exp_Aggr;  use Exp_Aggr;\n+with Exp_SPARK; use Exp_SPARK;\n+with Exp_Attr;  use Exp_Attr;\n+with Exp_Ch2;   use Exp_Ch2;\n+with Exp_Ch3;   use Exp_Ch3;\n+with Exp_Ch4;   use Exp_Ch4;\n+with Exp_Ch5;   use Exp_Ch5;\n+with Exp_Ch6;   use Exp_Ch6;\n+with Exp_Ch7;   use Exp_Ch7;\n+with Exp_Ch8;   use Exp_Ch8;\n+with Exp_Ch9;   use Exp_Ch9;\n+with Exp_Ch11;  use Exp_Ch11;\n+with Exp_Ch12;  use Exp_Ch12;\n+with Exp_Ch13;  use Exp_Ch13;\n+with Exp_Prag;  use Exp_Prag;\n+with Opt;       use Opt;\n+with Rtsfind;   use Rtsfind;\n+with Sem;       use Sem;\n+with Sem_Ch8;   use Sem_Ch8;\n+with Sem_Util;  use Sem_Util;\n+with Sinfo;     use Sinfo;\n with Table;\n \n package body Expander is\n@@ -127,13 +127,13 @@ package body Expander is\n          Debug_A_Entry (\"expanding  \", N);\n \n          begin\n-            --  In Alfa mode we only need a very limited subset of the usual\n-            --  expansions. This limited subset is implemented in Expand_Alfa.\n+            --  In SPARK mode we only need a very limited subset of the usual\n+            --  expansions. This limited subset is implemented in Expand_SPARK.\n \n-            if Alfa_Mode then\n-               Expand_Alfa (N);\n+            if SPARK_Mode then\n+               Expand_SPARK (N);\n \n-            --  Here for normal non-Alfa mode\n+            --  Here for normal non-SPARK mode\n \n             else\n                --  Processing depends on node kind. For full details on the"}, {"sha": "88a8f6df656045e9d62872080bf1d0b535ef237d", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=06b599fd62cccd693a395130dda53004f577714d", "patch": "@@ -2584,13 +2584,13 @@ package body Freeze is\n \n            and then RM_Size (Rec) >= Scalar_Component_Total_RM_Size\n \n-           --  Never do implicit packing in CodePeer or Alfa modes since\n+           --  Never do implicit packing in CodePeer or SPARK modes since\n            --  we don't do any packing in these modes, since this generates\n            --  over-complex code that confuses static analysis, and in\n            --  general, neither CodePeer not GNATprove care about the\n            --  internal representation of objects.\n \n-           and then not (CodePeer_Mode or Alfa_Mode)\n+           and then not (CodePeer_Mode or SPARK_Mode)\n          then\n             --  If implicit packing enabled, do it\n \n@@ -3442,7 +3442,7 @@ package body Freeze is\n                     and then not Is_Limited_Composite (E)\n                     and then not Is_Packed (Root_Type (E))\n                     and then not Has_Component_Size_Clause (Root_Type (E))\n-                    and then not (CodePeer_Mode or Alfa_Mode)\n+                    and then not (CodePeer_Mode or SPARK_Mode)\n                   then\n                      Get_Index_Bounds (First_Index (E), Lo, Hi);\n "}, {"sha": "e9ac76f681739b6272ec37b6228f65467dda9e43", "filename": "gcc/ada/gcc-interface/Make-lang.in", "status": "modified", "additions": 1286, "deletions": 1328, "changes": 2614, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMake-lang.in?ref=06b599fd62cccd693a395130dda53004f577714d"}, {"sha": "92964b313799c017dc72951354591ca3b01f3c30", "filename": "gcc/ada/get_spark_xrefs.adb", "status": "renamed", "additions": 32, "deletions": 31, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Fget_spark_xrefs.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Fget_spark_xrefs.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fget_spark_xrefs.adb?ref=06b599fd62cccd693a395130dda53004f577714d", "patch": "@@ -2,11 +2,11 @@\n --                                                                          --\n --                         GNAT COMPILER COMPONENTS                         --\n --                                                                          --\n---                             G E T _ A L F A                              --\n+--                       G E T _ S P A R K _ X R E F S                      --\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2011-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2011-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -23,12 +23,12 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-with Alfa;  use Alfa;\n-with Types; use Types;\n+with SPARK_Xrefs; use SPARK_Xrefs;\n+with Types;       use Types;\n \n with Ada.IO_Exceptions; use Ada.IO_Exceptions;\n \n-procedure Get_Alfa is\n+procedure Get_SPARK_Xrefs is\n    C : Character;\n \n    use ASCII;\n@@ -41,10 +41,10 @@ procedure Get_Alfa is\n    --  Scope number for the current scope entity\n \n    Cur_File_Idx : File_Index;\n-   --  Index in Alfa_File_Table of the current file\n+   --  Index in SPARK_File_Table of the current file\n \n    Cur_Scope_Idx : Scope_Index;\n-   --  Index in Alfa_Scope_Table of the current scope\n+   --  Index in SPARK_Scope_Table of the current scope\n \n    Name_Str : String (1 .. 32768);\n    Name_Len : Natural := 0;\n@@ -196,17 +196,17 @@ procedure Get_Alfa is\n       end loop;\n    end Skip_Spaces;\n \n---  Start of processing for Get_Alfa\n+--  Start of processing for Get_SPARK_Xrefs\n \n begin\n-   Initialize_Alfa_Tables;\n+   Initialize_SPARK_Tables;\n \n    Cur_File      := 0;\n    Cur_Scope     := 0;\n    Cur_File_Idx  := 1;\n    Cur_Scope_Idx := 0;\n \n-   --  Loop through lines of Alfa information\n+   --  Loop through lines of SPARK cross-reference information\n \n    while Nextc = 'F' loop\n       Skipc;\n@@ -215,7 +215,7 @@ begin\n \n       --  Make sure first line is a File line\n \n-      if Alfa_File_Table.Last = 0 and then C /= 'D' then\n+      if SPARK_File_Table.Last = 0 and then C /= 'D' then\n          raise Data_Error;\n       end if;\n \n@@ -229,9 +229,9 @@ begin\n \n             --  Complete previous entry if any\n \n-            if Alfa_File_Table.Last /= 0 then\n-               Alfa_File_Table.Table (Alfa_File_Table.Last).To_Scope :=\n-                 Alfa_Scope_Table.Last;\n+            if SPARK_File_Table.Last /= 0 then\n+               SPARK_File_Table.Table (SPARK_File_Table.Last).To_Scope :=\n+                 SPARK_Scope_Table.Last;\n             end if;\n \n             --  Scan out dependency number and file name\n@@ -259,11 +259,11 @@ begin\n \n             --  Make new File table entry (will fill in To_Scope later)\n \n-            Alfa_File_Table.Append (\n+            SPARK_File_Table.Append (\n               (File_Name      => File_Name,\n                Unit_File_Name => Unit_File_Name,\n                File_Num       => Cur_File,\n-               From_Scope     => Alfa_Scope_Table.Last + 1,\n+               From_Scope     => SPARK_Scope_Table.Last + 1,\n                To_Scope       => 0));\n \n             --  Initialize counter for scopes\n@@ -320,7 +320,7 @@ begin\n                --  To_Xref later). Initial range (From_Xref .. To_Xref) is\n                --  empty for scopes without entities.\n \n-               Alfa_Scope_Table.Append (\n+               SPARK_Scope_Table.Append (\n                  (Scope_Entity   => Empty,\n                   Scope_Name     => new String'(Name_Str (1 .. Name_Len)),\n                   File_Num       => Cur_File,\n@@ -352,7 +352,7 @@ begin\n             --  Update component From_Xref of current file if first reference\n             --  in this file.\n \n-            while Alfa_File_Table.Table (Cur_File_Idx).File_Num /= Cur_File\n+            while SPARK_File_Table.Table (Cur_File_Idx).File_Num /= Cur_File\n             loop\n                Cur_File_Idx := Cur_File_Idx + 1;\n             end loop;\n@@ -368,21 +368,22 @@ begin\n             --  Update component To_Xref of previous scope\n \n             if Cur_Scope_Idx /= 0 then\n-               Alfa_Scope_Table.Table (Cur_Scope_Idx).To_Xref :=\n-                 Alfa_Xref_Table.Last;\n+               SPARK_Scope_Table.Table (Cur_Scope_Idx).To_Xref :=\n+                 SPARK_Xref_Table.Last;\n             end if;\n \n             --  Update component From_Xref of current scope\n \n-            Cur_Scope_Idx := Alfa_File_Table.Table (Cur_File_Idx).From_Scope;\n+            Cur_Scope_Idx := SPARK_File_Table.Table (Cur_File_Idx).From_Scope;\n \n-            while Alfa_Scope_Table.Table (Cur_Scope_Idx).Scope_Num /= Cur_Scope\n+            while SPARK_Scope_Table.Table (Cur_Scope_Idx).Scope_Num /=\n+              Cur_Scope\n             loop\n                Cur_Scope_Idx := Cur_Scope_Idx + 1;\n             end loop;\n \n-            Alfa_Scope_Table.Table (Cur_Scope_Idx).From_Xref :=\n-              Alfa_Xref_Table.Last + 1;\n+            SPARK_Scope_Table.Table (Cur_Scope_Idx).From_Xref :=\n+              SPARK_Xref_Table.Last + 1;\n \n          --  Cross reference entry\n \n@@ -457,7 +458,7 @@ begin\n                               Rtype = 'm' or else\n                               Rtype = 's');\n \n-                           Alfa_Xref_Table.Append (\n+                           SPARK_Xref_Table.Append (\n                              (Entity_Name => XR_Entity,\n                               Entity_Line => XR_Entity_Line,\n                               Etype       => XR_Entity_Typ,\n@@ -473,7 +474,7 @@ begin\n                end loop;\n             end;\n \n-         --  No other Alfa lines are possible\n+         --  No other SPARK lines are possible\n \n          when others =>\n             raise Data_Error;\n@@ -488,12 +489,12 @@ begin\n \n    --  Here with all Xrefs stored, complete last entries in File/Scope tables\n \n-   if Alfa_File_Table.Last /= 0 then\n-      Alfa_File_Table.Table (Alfa_File_Table.Last).To_Scope :=\n-        Alfa_Scope_Table.Last;\n+   if SPARK_File_Table.Last /= 0 then\n+      SPARK_File_Table.Table (SPARK_File_Table.Last).To_Scope :=\n+        SPARK_Scope_Table.Last;\n    end if;\n \n    if Cur_Scope_Idx /= 0 then\n-      Alfa_Scope_Table.Table (Cur_Scope_Idx).To_Xref := Alfa_Xref_Table.Last;\n+      SPARK_Scope_Table.Table (Cur_Scope_Idx).To_Xref := SPARK_Xref_Table.Last;\n    end if;\n-end Get_Alfa;\n+end Get_SPARK_Xrefs;", "previous_filename": "gcc/ada/get_alfa.adb"}, {"sha": "22af7edccc20fe67dfbf259a5e028655bd723abd", "filename": "gcc/ada/get_spark_xrefs.ads", "status": "renamed", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Fget_spark_xrefs.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Fget_spark_xrefs.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fget_spark_xrefs.ads?ref=06b599fd62cccd693a395130dda53004f577714d", "patch": "@@ -2,11 +2,11 @@\n --                                                                          --\n --                         GNAT COMPILER COMPONENTS                         --\n --                                                                          --\n---                             G E T _ A L F A                              --\n+--                       G E T _ S P A R K _ X R E F S                      --\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---             Copyright (C) 2011, Free Software Foundation, Inc.           --\n+--          Copyright (C) 2011-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -23,8 +23,9 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  This package contains the function used to read Alfa information from an\n---  ALI file and populate the tables defined in package Alfa with the result.\n+--  This package contains the function used to read SPARK cross-reference\n+--  information from an ALI file and populate the tables defined in package\n+--  SPARK_Xrefs with the result.\n \n generic\n    --  These subprograms provide access to the ALI file. Locating, opening and\n@@ -46,12 +47,13 @@ generic\n    --  and position to the next character, which will be returned by the next\n    --  call to Getc or Nextc.\n \n-procedure Get_Alfa;\n---  Load Alfa information from ALI file text format into internal Alfa tables\n---  (Alfa.Alfa_Xref_Table, Alfa.Alfa_Scope_Table and Alfa.Alfa_File_Table). On\n---  entry the input file is positioned to the initial 'F' of the first Alfa\n+procedure Get_SPARK_Xrefs;\n+--  Load SPARK cross-reference information from ALI file text format into\n+--  internal SPARK tables (SPARK_Xrefs.SPARK_Xref_Table,\n+--  SPARK_Xrefs.SPARK_Scope_Table and SPARK_Xrefs.SPARK_File_Table). On entry\n+--  the input file is positioned to the initial 'F' of the first SPARK specific\n --  line in the ALI file. On return, the file is positioned either to the end\n---  of file, or to the first character of the line following the Alfa\n+--  of file, or to the first character of the line following the SPARK specific\n --  information (which will never start with an 'F').\n --\n --  If a format error is detected in the input, then an exception is raised", "previous_filename": "gcc/ada/get_alfa.ads"}, {"sha": "4f1dde72f34017b09ec4914c6af9e13cf7e88300", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=06b599fd62cccd693a395130dda53004f577714d", "patch": "@@ -292,20 +292,20 @@ procedure Gnat1drv is\n          Formal_Extensions := True;\n       end if;\n \n-      --  Enable Alfa_Mode when using -gnatd.F switch\n+      --  Enable SPARK_Mode when using -gnatd.F switch\n \n       if Debug_Flag_Dot_FF then\n-         Alfa_Mode := True;\n+         SPARK_Mode := True;\n       end if;\n \n-      --  Alfa_Mode is also activated by default in the gnat2why executable\n+      --  SPARK_Mode is also activated by default in the gnat2why executable\n \n-      if Alfa_Mode then\n+      if SPARK_Mode then\n \n          --  Set strict standard interpretation of compiler permissions\n \n          if Debug_Flag_Dot_DD then\n-            Strict_Alfa_Mode := True;\n+            SPARK_Strict_Mode := True;\n          end if;\n \n          --  Distinguish between the two modes of gnat2why: frame condition\n@@ -334,7 +334,7 @@ procedure Gnat1drv is\n \n          --  Enable some restrictions systematically to simplify the generated\n          --  code (and ease analysis). Note that restriction checks are also\n-         --  disabled in Alfa mode, see Restrict.Check_Restriction, and user\n+         --  disabled in SPARK mode, see Restrict.Check_Restriction, and user\n          --  specified Restrictions pragmas are ignored, see\n          --  Sem_Prag.Process_Restrictions_Or_Restriction_Warnings.\n \n@@ -346,7 +346,7 @@ procedure Gnat1drv is\n          --  points at which potential checks are required semantically). We\n          --  don't want the expansion associated with these checks, but that\n          --  happens anyway because this expansion is simply not done in the\n-         --  Alfa version of the expander.\n+         --  SPARK version of the expander.\n \n          --  Turn off dynamic elaboration checks: generates inconsistencies in\n          --  trees between specs compiled as part of a main unit or as part of\n@@ -378,7 +378,7 @@ procedure Gnat1drv is\n          Polling_Required := False;\n \n          --  Set operating mode to Generate_Code, but full front-end expansion\n-         --  is not desirable in Alfa mode, so a light expansion is performed\n+         --  is not desirable in SPARK mode, so a light expansion is performed\n          --  instead.\n \n          Operating_Mode := Generate_Code;\n@@ -405,7 +405,7 @@ procedure Gnat1drv is\n          Assertions_Enabled := True;\n \n          --  Turn off style check options since we are not interested in any\n-         --  front-end warnings when we are getting Alfa output.\n+         --  front-end warnings when we are getting SPARK output.\n \n          Reset_Style_Check_Options;\n \n@@ -415,13 +415,13 @@ procedure Gnat1drv is\n          Warning_Mode := Suppress;\n \n          --  Suppress the generation of name tables for enumerations, which are\n-         --  not needed for formal verification, and fall outside the Alfa\n+         --  not needed for formal verification, and fall outside the SPARK\n          --  subset (use of pointers).\n \n          Global_Discard_Names := True;\n \n          --  Suppress the expansion of tagged types and dispatching calls,\n-         --  which lead to the generation of non-Alfa code (use of pointers),\n+         --  which lead to the generation of non-SPARK code (use of pointers),\n          --  which is more complex to formally verify than the original source.\n \n          Tagged_Type_Expansion := False;\n@@ -495,7 +495,7 @@ procedure Gnat1drv is\n \n       --  Set proper status for overflow check mechanism\n \n-      --  If already set (by -gnato or above in Alfa or CodePeer mode) then we\n+      --  If already set (by -gnato or above in SPARK or CodePeer mode) then we\n       --  have nothing to do.\n \n       if Opt.Suppress_Options.Overflow_Mode_General /= Not_Set then\n@@ -1062,12 +1062,12 @@ begin\n       elsif CodePeer_Mode then\n          Back_End_Mode := Generate_Object;\n \n-      --  It is not an error to analyze in Alfa mode a spec which requires a\n+      --  It is not an error to analyze in SPARK mode a spec which requires a\n       --  body, when the body is not available. During frame condition\n       --  generation, the corresponding ALI file is generated. During\n       --  translation to Why, Why code is generated for the spec.\n \n-      elsif Alfa_Mode then\n+      elsif SPARK_Mode then\n          if Frame_Condition_Mode then\n             Back_End_Mode := Declarations_Only;\n          else"}, {"sha": "e786f473add61909a3f0182d61ab307b068afc8b", "filename": "gcc/ada/lib-writ.adb", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Flib-writ.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Flib-writ.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-writ.adb?ref=06b599fd62cccd693a395130dda53004f577714d", "patch": "@@ -33,7 +33,6 @@ with Fname;    use Fname;\n with Fname.UF; use Fname.UF;\n with Lib.Util; use Lib.Util;\n with Lib.Xref; use Lib.Xref;\n-               use Lib.Xref.Alfa;\n with Nlists;   use Nlists;\n with Gnatvsn;  use Gnatvsn;\n with Opt;      use Opt;\n@@ -816,11 +815,11 @@ package body Lib.Writ is\n                      Nkind (Unit (Cunit)) in N_Generic_Renaming_Declaration)\n                     and then Generic_May_Lack_ALI (Fname))\n \n-              --  In Alfa mode, always generate the dependencies on ALI\n+              --  In SPARK mode, always generate the dependencies on ALI\n               --  files, which are required to compute frame conditions\n               --  of subprograms.\n \n-              or else Alfa_Mode\n+              or else SPARK_Mode\n             then\n                Write_Info_Tab (25);\n \n@@ -1433,11 +1432,12 @@ package body Lib.Writ is\n          SCO_Output;\n       end if;\n \n-      --  Output Alfa information if needed\n+      --  Output SPARK cross-reference information if needed\n \n-      if Opt.Xref_Active and then Alfa_Mode then\n-         Collect_Alfa (Sdep_Table => Sdep_Table, Num_Sdep => Num_Sdep);\n-         Output_Alfa;\n+      if Opt.Xref_Active and then SPARK_Mode then\n+         SPARK_Specific.Collect_SPARK_Xrefs (Sdep_Table => Sdep_Table,\n+                                             Num_Sdep   => Num_Sdep);\n+         SPARK_Specific.Output_SPARK_Xrefs;\n       end if;\n \n       --  Output final blank line and we are done. This final blank line is"}, {"sha": "b631b2aa43a191f2a22857a9db2efd871589cf09", "filename": "gcc/ada/lib-writ.ads", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Flib-writ.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Flib-writ.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-writ.ads?ref=06b599fd62cccd693a395130dda53004f577714d", "patch": "@@ -811,12 +811,13 @@ package Lib.Writ is\n    --  reference data. See the spec of Par_SCO in file par_sco.ads for full\n    --  details of the format.\n \n-   ----------------------\n-   -- Alfa Information --\n-   ----------------------\n+   ---------------------------------------\n+   -- SPARK Cross-Reference Information --\n+   ---------------------------------------\n \n-   --  The Alfa information follows the SCO information. See the spec of Alfa\n-   --  in file alfa.ads for full details of the format.\n+   --  The SPARK cross-reference information follows the SCO information. See\n+   --  the spec of SPARK_Xrefs in file spark_xrefs.ads for full details of the\n+   --  format.\n \n    ----------------------\n    -- Global Variables --"}, {"sha": "78413137b0f33d245b15dfac522ca1314956c7fd", "filename": "gcc/ada/lib-xref-spark_specific.adb", "status": "renamed", "additions": 129, "deletions": 126, "changes": 255, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Flib-xref-spark_specific.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Flib-xref-spark_specific.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref-spark_specific.adb?ref=06b599fd62cccd693a395130dda53004f577714d", "patch": "@@ -2,11 +2,11 @@\n --                                                                          --\n --                         GNAT COMPILER COMPONENTS                         --\n --                                                                          --\n---                        L I B . X R E F . A L F A                         --\n+--              L I B . X R E F . S P A R K _ S P E C I F I C               --\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2011-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2011-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -23,23 +23,23 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-with Alfa;     use Alfa;\n-with Einfo;    use Einfo;\n-with Nmake;    use Nmake;\n-with Put_Alfa;\n+with SPARK_Xrefs;     use SPARK_Xrefs;\n+with Einfo;           use Einfo;\n+with Nmake;           use Nmake;\n+with Put_SPARK_Xrefs;\n \n with GNAT.HTable;\n \n separate (Lib.Xref)\n-package body Alfa is\n+package body SPARK_Specific is\n \n    ---------------------\n    -- Local Constants --\n    ---------------------\n \n-   --  Table of Alfa_Entities, True for each entity kind used in Alfa\n+   --  Table of SPARK_Entities, True for each entity kind used in SPARK\n \n-   Alfa_Entities : constant array (Entity_Kind) of Boolean :=\n+   SPARK_Entities : constant array (Entity_Kind) of Boolean :=\n      (E_Constant         => True,\n       E_Function         => True,\n       E_In_Out_Parameter => True,\n@@ -51,9 +51,9 @@ package body Alfa is\n       E_Variable         => True,\n       others             => False);\n \n-   --  True for each reference type used in Alfa\n+   --  True for each reference type used in SPARK\n \n-   Alfa_References : constant array (Character) of Boolean :=\n+   SPARK_References : constant array (Character) of Boolean :=\n      ('m' => True,\n       'r' => True,\n       's' => True,\n@@ -79,28 +79,28 @@ package body Alfa is\n    --  Table of cross-references for reads and writes through explicit\n    --  dereferences, that are output as reads/writes to the special variable\n    --  \"Heap\". These references are added to the regular references when\n-   --  computing Alfa cross-references.\n+   --  computing SPARK cross-references.\n \n    -----------------------\n    -- Local Subprograms --\n    -----------------------\n \n-   procedure Add_Alfa_File (Ubody, Uspec : Unit_Number_Type; Dspec : Nat);\n-   --  Add file and corresponding scopes for unit to the tables Alfa_File_Table\n-   --  and Alfa_Scope_Table. When two units are present for the same\n-   --  compilation unit, as it happens for library-level instantiations of\n-   --  generics, then Ubody /= Uspec, and all scopes are added to the same\n-   --  Alfa file. Otherwise Ubody = Uspec.\n+   procedure Add_SPARK_File (Ubody, Uspec : Unit_Number_Type; Dspec : Nat);\n+   --  Add file and corresponding scopes for unit to the tables\n+   --  SPARK_File_Table and SPARK_Scope_Table. When two units are present for\n+   --  the same compilation unit, as it happens for library-level\n+   --  instantiations of generics, then Ubody /= Uspec, and all scopes are\n+   --  added to the same SPARK file. Otherwise Ubody = Uspec.\n \n-   procedure Add_Alfa_Scope (N : Node_Id);\n-   --  Add scope N to the table Alfa_Scope_Table\n+   procedure Add_SPARK_Scope (N : Node_Id);\n+   --  Add scope N to the table SPARK_Scope_Table\n \n-   procedure Add_Alfa_Xrefs;\n-   --  Filter table Xrefs to add all references used in Alfa to the table\n-   --  Alfa_Xref_Table.\n+   procedure Add_SPARK_Xrefs;\n+   --  Filter table Xrefs to add all references used in SPARK to the table\n+   --  SPARK_Xref_Table.\n \n-   procedure Detect_And_Add_Alfa_Scope (N : Node_Id);\n-   --  Call Add_Alfa_Scope on scopes\n+   procedure Detect_And_Add_SPARK_Scope (N : Node_Id);\n+   --  Call Add_SPARK_Scope on scopes\n \n    function Entity_Hash (E : Entity_Id) return Entity_Hashed_Range;\n    --  Hash function for hash table\n@@ -127,11 +127,11 @@ package body Alfa is\n       Inside_Stubs : Boolean);\n    --  Traverse corresponding construct, calling Process on all declarations\n \n-   -------------------\n-   -- Add_Alfa_File --\n-   -------------------\n+   --------------------\n+   -- Add_SPARK_File --\n+   --------------------\n \n-   procedure Add_Alfa_File (Ubody, Uspec : Unit_Number_Type; Dspec : Nat) is\n+   procedure Add_SPARK_File (Ubody, Uspec : Unit_Number_Type; Dspec : Nat) is\n       File : constant Source_File_Index := Source_Index (Uspec);\n       From : Scope_Index;\n \n@@ -146,27 +146,27 @@ package body Alfa is\n          return;\n       end if;\n \n-      From := Alfa_Scope_Table.Last + 1;\n+      From := SPARK_Scope_Table.Last + 1;\n \n       --  Unit might not have an associated compilation unit, as seen in code\n       --  filling Sdep_Table in Write_ALI.\n \n       if Present (Cunit (Ubody)) then\n          Traverse_Compilation_Unit\n            (CU           => Cunit (Ubody),\n-            Process      => Detect_And_Add_Alfa_Scope'Access,\n+            Process      => Detect_And_Add_SPARK_Scope'Access,\n             Inside_Stubs => False);\n       end if;\n \n       --  When two units are present for the same compilation unit, as it\n       --  happens for library-level instantiations of generics, then add all\n-      --  scopes to the same Alfa file.\n+      --  scopes to the same SPARK file.\n \n       if Ubody /= Uspec then\n          if Present (Cunit (Uspec)) then\n             Traverse_Compilation_Unit\n               (CU           => Cunit (Uspec),\n-               Process      => Detect_And_Add_Alfa_Scope'Access,\n+               Process      => Detect_And_Add_SPARK_Scope'Access,\n                Inside_Stubs => False);\n          end if;\n       end if;\n@@ -177,9 +177,9 @@ package body Alfa is\n          Scope_Id : Int;\n       begin\n          Scope_Id := 1;\n-         for Index in From .. Alfa_Scope_Table.Last loop\n+         for Index in From .. SPARK_Scope_Table.Last loop\n             declare\n-               S : Alfa_Scope_Record renames Alfa_Scope_Table.Table (Index);\n+               S : SPARK_Scope_Record renames SPARK_Scope_Table.Table (Index);\n             begin\n                S.Scope_Num := Scope_Id;\n                S.File_Num  := Dspec;\n@@ -195,18 +195,18 @@ package body Alfa is\n \n       begin\n          Scope_Id := From;\n-         for Index in From .. Alfa_Scope_Table.Last loop\n+         for Index in From .. SPARK_Scope_Table.Last loop\n             declare\n-               S : Alfa_Scope_Record renames Alfa_Scope_Table.Table (Index);\n+               S : SPARK_Scope_Record renames SPARK_Scope_Table.Table (Index);\n             begin\n                if S.Scope_Num /= 0 then\n-                  Alfa_Scope_Table.Table (Scope_Id) := S;\n+                  SPARK_Scope_Table.Table (Scope_Id) := S;\n                   Scope_Id := Scope_Id + 1;\n                end if;\n             end;\n          end loop;\n \n-         Alfa_Scope_Table.Set_Last (Scope_Id - 1);\n+         SPARK_Scope_Table.Set_Last (Scope_Id - 1);\n       end;\n \n       --  Make entry for new file in file table\n@@ -225,19 +225,19 @@ package body Alfa is\n          Unit_File_Name := new String'(Name_Buffer (1 .. Name_Len));\n       end if;\n \n-      Alfa_File_Table.Append (\n+      SPARK_File_Table.Append (\n         (File_Name      => File_Name,\n          Unit_File_Name => Unit_File_Name,\n          File_Num       => Dspec,\n          From_Scope     => From,\n-         To_Scope       => Alfa_Scope_Table.Last));\n-   end Add_Alfa_File;\n+         To_Scope       => SPARK_Scope_Table.Last));\n+   end Add_SPARK_File;\n \n-   --------------------\n-   -- Add_Alfa_Scope --\n-   --------------------\n+   ---------------------\n+   -- Add_SPARK_Scope --\n+   ---------------------\n \n-   procedure Add_Alfa_Scope (N : Node_Id) is\n+   procedure Add_SPARK_Scope (N : Node_Id) is\n       E   : constant Entity_Id  := Defining_Entity (N);\n       Loc : constant Source_Ptr := Sloc (E);\n       Typ : Character;\n@@ -294,7 +294,7 @@ package body Alfa is\n       --  File_Num and Scope_Num are filled later. From_Xref and To_Xref are\n       --  filled even later, but are initialized to represent an empty range.\n \n-      Alfa_Scope_Table.Append (\n+      SPARK_Scope_Table.Append (\n         (Scope_Name     => new String'(Unique_Name (E)),\n          File_Num       => 0,\n          Scope_Num      => 0,\n@@ -306,37 +306,37 @@ package body Alfa is\n          From_Xref      => 1,\n          To_Xref        => 0,\n          Scope_Entity   => E));\n-   end Add_Alfa_Scope;\n+   end Add_SPARK_Scope;\n \n-   --------------------\n-   -- Add_Alfa_Xrefs --\n-   --------------------\n+   ---------------------\n+   -- Add_SPARK_Xrefs --\n+   ---------------------\n \n-   procedure Add_Alfa_Xrefs is\n+   procedure Add_SPARK_Xrefs is\n       function Entity_Of_Scope (S : Scope_Index) return Entity_Id;\n       --  Return the entity which maps to the input scope index\n \n       function Get_Entity_Type (E : Entity_Id) return Character;\n       --  Return a character representing the type of entity\n \n-      function Is_Alfa_Reference\n+      function Is_SPARK_Reference\n         (E   : Entity_Id;\n          Typ : Character) return Boolean;\n-      --  Return whether entity reference E meets Alfa requirements. Typ is the\n-      --  reference type.\n+      --  Return whether entity reference E meets SPARK requirements. Typ is\n+      --  the reference type.\n \n-      function Is_Alfa_Scope (E : Entity_Id) return Boolean;\n+      function Is_SPARK_Scope (E : Entity_Id) return Boolean;\n       --  Return whether the entity or reference scope meets requirements for\n-      --  being an Alfa scope.\n+      --  being an SPARK scope.\n \n       function Is_Future_Scope_Entity\n         (E : Entity_Id;\n          S : Scope_Index) return Boolean;\n-      --  Check whether entity E is in Alfa_Scope_Table at index S or higher\n+      --  Check whether entity E is in SPARK_Scope_Table at index S or higher\n \n       function Is_Global_Constant (E : Entity_Id) return Boolean;\n       --  Return True if E is a global constant for which we should ignore\n-      --  reads in Alfa.\n+      --  reads in SPARK.\n \n       function Lt (Op1 : Natural; Op2 : Natural) return Boolean;\n       --  Comparison function for Sort call\n@@ -375,7 +375,7 @@ package body Alfa is\n          Hash       => Entity_Hash,\n          Equal      => \"=\");\n       --  Package used to build a correspondance between entities and scope\n-      --  numbers used in Alfa cross references.\n+      --  numbers used in SPARK cross references.\n \n       Nrefs : Nat := Xrefs.Last;\n       --  Number of references in table. This value may get reset (reduced)\n@@ -398,7 +398,7 @@ package body Alfa is\n \n       function Entity_Of_Scope (S : Scope_Index) return Entity_Id is\n       begin\n-         return Alfa_Scope_Table.Table (S).Scope_Entity;\n+         return SPARK_Scope_Table.Table (S).Scope_Entity;\n       end Entity_Of_Scope;\n \n       ---------------------\n@@ -424,11 +424,11 @@ package body Alfa is\n          return Scopes.Get (N).Num;\n       end Get_Scope_Num;\n \n-      -----------------------\n-      -- Is_Alfa_Reference --\n-      -----------------------\n+      ------------------------\n+      -- Is_SPARK_Reference --\n+      ------------------------\n \n-      function Is_Alfa_Reference\n+      function Is_SPARK_Reference\n         (E   : Entity_Id;\n          Typ : Character) return Boolean\n       is\n@@ -440,15 +440,15 @@ package body Alfa is\n          if Ekind (E) in Overloadable_Kind then\n             return Typ = 's';\n \n-         --  References to constant objects are not considered in Alfa section,\n-         --  as these will be translated as constants in the intermediate\n-         --  language for formal verification, and should therefore never\n-         --  appear in frame conditions.\n+         --  References to constant objects are not considered in SPARK\n+         --  section, as these will be translated as constants in the\n+         --  intermediate language for formal verification, and should\n+         --  therefore never appear in frame conditions.\n \n          elsif Is_Constant_Object (E) then\n             return False;\n \n-         --  Objects of Task type or protected type are not Alfa references\n+         --  Objects of Task type or protected type are not SPARK references\n \n          elsif Present (Etype (E))\n            and then Ekind (Etype (E)) in Concurrent_Kind\n@@ -461,19 +461,19 @@ package body Alfa is\n          else\n             return Typ = 'r' or else Typ = 'm';\n          end if;\n-      end Is_Alfa_Reference;\n+      end Is_SPARK_Reference;\n \n-      -------------------\n-      -- Is_Alfa_Scope --\n-      -------------------\n+      --------------------\n+      -- Is_SPARK_Scope --\n+      --------------------\n \n-      function Is_Alfa_Scope (E : Entity_Id) return Boolean is\n+      function Is_SPARK_Scope (E : Entity_Id) return Boolean is\n       begin\n          return Present (E)\n            and then not Is_Generic_Unit (E)\n            and then Renamed_Entity (E) = Empty\n            and then Get_Scope_Num (E) /= No_Scope;\n-      end Is_Alfa_Scope;\n+      end Is_SPARK_Scope;\n \n       ----------------------------\n       -- Is_Future_Scope_Entity --\n@@ -484,7 +484,7 @@ package body Alfa is\n          S : Scope_Index) return Boolean\n       is\n          function Is_Past_Scope_Entity return Boolean;\n-         --  Check whether entity E is in Alfa_Scope_Table at index strictly\n+         --  Check whether entity E is in SPARK_Scope_Table at index strictly\n          --  lower than S.\n \n          --------------------------\n@@ -493,11 +493,11 @@ package body Alfa is\n \n          function Is_Past_Scope_Entity return Boolean is\n          begin\n-            for Index in Alfa_Scope_Table.First .. S - 1 loop\n-               if Alfa_Scope_Table.Table (Index).Scope_Entity = E then\n+            for Index in SPARK_Scope_Table.First .. S - 1 loop\n+               if SPARK_Scope_Table.Table (Index).Scope_Entity = E then\n                   declare\n-                     Dummy : constant Alfa_Scope_Record :=\n-                               Alfa_Scope_Table.Table (Index);\n+                     Dummy : constant SPARK_Scope_Record :=\n+                               SPARK_Scope_Table.Table (Index);\n                      pragma Unreferenced (Dummy);\n                   begin\n                      return True;\n@@ -511,8 +511,8 @@ package body Alfa is\n       --  Start of processing for Is_Future_Scope_Entity\n \n       begin\n-         for Index in S .. Alfa_Scope_Table.Last loop\n-            if Alfa_Scope_Table.Table (Index).Scope_Entity = E then\n+         for Index in S .. SPARK_Scope_Table.Last loop\n+            if SPARK_Scope_Table.Table (Index).Scope_Entity = E then\n                return True;\n             end if;\n          end loop;\n@@ -663,8 +663,8 @@ package body Alfa is\n          To   : Xref_Index)\n       is\n       begin\n-         Alfa_Scope_Table.Table (S).From_Xref := From;\n-         Alfa_Scope_Table.Table (S).To_Xref := To;\n+         SPARK_Scope_Table.Table (S).From_Xref := From;\n+         SPARK_Scope_Table.Table (S).To_Xref := To;\n       end Update_Scope_Range;\n \n       --  Local variables\n@@ -679,12 +679,12 @@ package body Alfa is\n       Ref_Name   : String_Ptr;\n       Scope_Id   : Scope_Index;\n \n-   --  Start of processing for Add_Alfa_Xrefs\n+   --  Start of processing for Add_SPARK_Xrefs\n \n    begin\n-      for Index in Alfa_Scope_Table.First .. Alfa_Scope_Table.Last loop\n+      for Index in SPARK_Scope_Table.First .. SPARK_Scope_Table.Last loop\n          declare\n-            S : Alfa_Scope_Record renames Alfa_Scope_Table.Table (Index);\n+            S : SPARK_Scope_Record renames SPARK_Scope_Table.Table (Index);\n          begin\n             Set_Scope_Num (S.Scope_Entity, S.Scope_Num);\n          end;\n@@ -710,7 +710,7 @@ package body Alfa is\n          Xrefs.Table (Index).Def := Sloc (Xrefs.Table (Index).Key.Ent);\n       end loop;\n \n-      --  Eliminate entries not appropriate for Alfa. Done prior to sorting\n+      --  Eliminate entries not appropriate for SPARK. Done prior to sorting\n       --  cross-references, as it discards useless references which do not have\n       --  a proper format for the comparison function (like no location).\n \n@@ -722,12 +722,12 @@ package body Alfa is\n             Ref : Xref_Key renames Xrefs.Table (Rnums (Index)).Key;\n \n          begin\n-            if Alfa_Entities (Ekind (Ref.Ent))\n-              and then Alfa_References (Ref.Typ)\n-              and then Is_Alfa_Scope (Ref.Ent_Scope)\n-              and then Is_Alfa_Scope (Ref.Ref_Scope)\n+            if SPARK_Entities (Ekind (Ref.Ent))\n+              and then SPARK_References (Ref.Typ)\n+              and then Is_SPARK_Scope (Ref.Ent_Scope)\n+              and then Is_SPARK_Scope (Ref.Ref_Scope)\n               and then not Is_Global_Constant (Ref.Ent)\n-              and then Is_Alfa_Reference (Ref.Ent, Ref.Typ)\n+              and then Is_SPARK_Reference (Ref.Ent, Ref.Typ)\n \n               --  Discard references from unknown scopes, e.g. generic scopes\n \n@@ -791,7 +791,7 @@ package body Alfa is\n \n       --  The two steps have eliminated all references, nothing to do\n \n-      if Alfa_Scope_Table.Last = 0 then\n+      if SPARK_Scope_Table.Last = 0 then\n          return;\n       end if;\n \n@@ -808,7 +808,7 @@ package body Alfa is\n \n          begin\n             --  If this assertion fails, the scope which we are looking for is\n-            --  not in Alfa scope table, which reveals either a problem in the\n+            --  not in SPARK scope table, which reveals either a problem in the\n             --  construction of the scope table, or an erroneous scope for the\n             --  current cross-reference.\n \n@@ -822,14 +822,14 @@ package body Alfa is\n                Update_Scope_Range\n                  (S    => Scope_Id,\n                   From => From_Index,\n-                  To   => Alfa_Xref_Table.Last);\n+                  To   => SPARK_Xref_Table.Last);\n \n-               From_Index := Alfa_Xref_Table.Last + 1;\n+               From_Index := SPARK_Xref_Table.Last + 1;\n             end if;\n \n             while Ref.Ent_Scope /= Entity_Of_Scope (Scope_Id) loop\n                Scope_Id := Scope_Id + 1;\n-               pragma Assert (Scope_Id <= Alfa_Scope_Table.Last);\n+               pragma Assert (Scope_Id <= SPARK_Scope_Table.Last);\n             end loop;\n \n             if Ref.Ent /= Ref_Id then\n@@ -844,7 +844,7 @@ package body Alfa is\n                Col  := Int (Get_Column_Number (Ref_Entry.Def));\n             end if;\n \n-            Alfa_Xref_Table.Append (\n+            SPARK_Xref_Table.Append (\n               (Entity_Name => Ref_Name,\n                Entity_Line => Line,\n                Etype       => Get_Entity_Type (Ref.Ent),\n@@ -862,14 +862,17 @@ package body Alfa is\n       Update_Scope_Range\n         (S    => Scope_Id,\n          From => From_Index,\n-         To   => Alfa_Xref_Table.Last);\n-   end Add_Alfa_Xrefs;\n+         To   => SPARK_Xref_Table.Last);\n+   end Add_SPARK_Xrefs;\n \n-   ------------------\n-   -- Collect_Alfa --\n-   ------------------\n+   -------------------------\n+   -- Collect_SPARK_Xrefs --\n+   -------------------------\n \n-   procedure Collect_Alfa (Sdep_Table : Unit_Ref_Table; Num_Sdep : Nat) is\n+   procedure Collect_SPARK_Xrefs\n+     (Sdep_Table : Unit_Ref_Table;\n+      Num_Sdep   : Nat)\n+   is\n       D1 : Nat;\n       D2 : Nat;\n \n@@ -878,17 +881,17 @@ package body Alfa is\n \n       pragma Assert (Xrefs.Last /= 0);\n \n-      Initialize_Alfa_Tables;\n+      Initialize_SPARK_Tables;\n \n-      --  Generate file and scope Alfa information\n+      --  Generate file and scope SPARK cross-reference information\n \n       D1 := 1;\n       while D1 <= Num_Sdep loop\n \n          --  In rare cases, when treating the library-level instantiation of a\n          --  generic, two consecutive units refer to the same compilation unit\n          --  node and entity. In that case, treat them as a single unit for the\n-         --  sake of Alfa cross references by passing to Add_Alfa_File.\n+         --  sake of SPARK cross references by passing to Add_SPARK_File.\n \n          if D1 < Num_Sdep\n            and then Cunit_Entity (Sdep_Table (D1)) =\n@@ -899,7 +902,7 @@ package body Alfa is\n             D2 := D1;\n          end if;\n \n-         Add_Alfa_File\n+         Add_SPARK_File\n            (Ubody => Sdep_Table (D1),\n             Uspec => Sdep_Table (D2),\n             Dspec => D2);\n@@ -921,19 +924,19 @@ package body Alfa is\n       begin\n          --  Fill in the hash-table\n \n-         for S in Alfa_Scope_Table.First .. Alfa_Scope_Table.Last loop\n+         for S in SPARK_Scope_Table.First .. SPARK_Scope_Table.Last loop\n             declare\n-               Srec : Alfa_Scope_Record renames Alfa_Scope_Table.Table (S);\n+               Srec : SPARK_Scope_Record renames SPARK_Scope_Table.Table (S);\n             begin\n                Entity_Hash_Table.Set (Srec.Scope_Entity, S);\n             end;\n          end loop;\n \n          --  Use the hash-table to locate spec entities\n \n-         for S in Alfa_Scope_Table.First .. Alfa_Scope_Table.Last loop\n+         for S in SPARK_Scope_Table.First .. SPARK_Scope_Table.Last loop\n             declare\n-               Srec : Alfa_Scope_Record renames Alfa_Scope_Table.Table (S);\n+               Srec : SPARK_Scope_Record renames SPARK_Scope_Table.Table (S);\n \n                Spec_Entity : constant Entity_Id :=\n                                Unique_Entity (Srec.Scope_Entity);\n@@ -947,34 +950,34 @@ package body Alfa is\n                  and then Spec_Scope /= 0\n                then\n                   Srec.Spec_File_Num :=\n-                    Alfa_Scope_Table.Table (Spec_Scope).File_Num;\n+                    SPARK_Scope_Table.Table (Spec_Scope).File_Num;\n                   Srec.Spec_Scope_Num :=\n-                    Alfa_Scope_Table.Table (Spec_Scope).Scope_Num;\n+                    SPARK_Scope_Table.Table (Spec_Scope).Scope_Num;\n                end if;\n             end;\n          end loop;\n       end;\n \n-      --  Generate cross reference Alfa information\n+      --  Generate SPARK cross-reference information\n \n-      Add_Alfa_Xrefs;\n-   end Collect_Alfa;\n+      Add_SPARK_Xrefs;\n+   end Collect_SPARK_Xrefs;\n \n-   -------------------------------\n-   -- Detect_And_Add_Alfa_Scope --\n-   -------------------------------\n+   --------------------------------\n+   -- Detect_And_Add_SPARK_Scope --\n+   --------------------------------\n \n-   procedure Detect_And_Add_Alfa_Scope (N : Node_Id) is\n+   procedure Detect_And_Add_SPARK_Scope (N : Node_Id) is\n    begin\n       if Nkind_In (N, N_Subprogram_Declaration,\n                       N_Subprogram_Body,\n                       N_Subprogram_Body_Stub,\n                       N_Package_Declaration,\n                       N_Package_Body)\n       then\n-         Add_Alfa_Scope (N);\n+         Add_SPARK_Scope (N);\n       end if;\n-   end Detect_And_Add_Alfa_Scope;\n+   end Detect_And_Add_SPARK_Scope;\n \n    -------------------------------------\n    -- Enclosing_Subprogram_Or_Package --\n@@ -1432,4 +1435,4 @@ package body Alfa is\n         (Handled_Statement_Sequence (N), Process, Inside_Stubs);\n    end Traverse_Subprogram_Body;\n \n-end Alfa;\n+end SPARK_Specific;", "previous_filename": "gcc/ada/lib-xref-alfa.adb"}, {"sha": "8825f066f4ec59ba079a037de7fff3b1069730c1", "filename": "gcc/ada/lib-xref.adb", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Flib-xref.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Flib-xref.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref.adb?ref=06b599fd62cccd693a395130dda53004f577714d", "patch": "@@ -79,7 +79,7 @@ package body Lib.Xref is\n       --  Unit number corresponding to Loc. Value is undefined and not\n       --  referenced if Loc is set to No_Location.\n \n-      --  The following components are only used for Alfa cross-references\n+      --  The following components are only used for SPARK cross-references\n \n       Ref_Scope : Entity_Id;\n       --  Entity of the closest subprogram or package enclosing the reference\n@@ -151,11 +151,11 @@ package body Lib.Xref is\n      Hash       => Hash,\n      Equal      => Equal);\n \n-   ----------------------\n-   -- Alfa Information --\n-   ----------------------\n+   -----------------------------\n+   -- SPARK Xrefs Information --\n+   -----------------------------\n \n-   package body Alfa is separate;\n+   package body SPARK_Specific is separate;\n \n    ------------------------\n    --  Local Subprograms --\n@@ -632,10 +632,10 @@ package body Lib.Xref is\n            or else (Typ = 'b' and then Is_Generic_Instance (E))\n \n             --  Allow the generation of references to reads, writes and calls\n-            --  in Alfa mode when the related context comes from an instance.\n+            --  in SPARK mode when the related context comes from an instance.\n \n            or else\n-             (Alfa_Mode\n+             (SPARK_Mode\n                 and then In_Extended_Main_Code_Unit (N)\n                 and then (Typ = 'm' or else Typ = 'r' or else Typ = 's'))\n          then\n@@ -885,12 +885,12 @@ package body Lib.Xref is\n \n          --  Ignore references from within an instance. The only exceptions to\n          --  this are default subprograms, for which we generate an implicit\n-         --  reference and compilations in Alfa_Mode.\n+         --  reference and compilations in SPARK mode.\n \n          and then\n            (Instantiation_Location (Sloc (N)) = No_Location\n              or else Typ = 'i'\n-             or else Alfa_Mode)\n+             or else SPARK_Mode)\n \n         --  Ignore dummy references\n \n@@ -973,11 +973,11 @@ package body Lib.Xref is\n             return;\n          end if;\n \n-         --  In Alfa mode, consider the underlying entity renamed instead of\n+         --  In SPARK mode, consider the underlying entity renamed instead of\n          --  the renaming, which is needed to compute a valid set of effects\n          --  (reads, writes) for the enclosing subprogram.\n \n-         if Alfa_Mode then\n+         if SPARK_Mode then\n             Ent := Get_Through_Renamings (Ent);\n \n             --  If no enclosing object, then it could be a reference to any\n@@ -987,10 +987,10 @@ package body Lib.Xref is\n \n             if No (Ent) then\n                if Actual_Typ = 'w' then\n-                  Alfa.Generate_Dereference (Nod, 'r');\n-                  Alfa.Generate_Dereference (Nod, 'w');\n+                  SPARK_Specific.Generate_Dereference (Nod, 'r');\n+                  SPARK_Specific.Generate_Dereference (Nod, 'w');\n                else\n-                  Alfa.Generate_Dereference (Nod, 'r');\n+                  SPARK_Specific.Generate_Dereference (Nod, 'r');\n                end if;\n \n                return;\n@@ -1006,14 +1006,14 @@ package body Lib.Xref is\n             Actual_Typ := 'P';\n          end if;\n \n-         if Alfa_Mode then\n+         if SPARK_Mode then\n             Ref := Sloc (Nod);\n             Def := Sloc (Ent);\n \n-            Ref_Scope := Alfa.Enclosing_Subprogram_Or_Package (Nod);\n-            Ent_Scope := Alfa.Enclosing_Subprogram_Or_Package (Ent);\n+            Ref_Scope := SPARK_Specific.Enclosing_Subprogram_Or_Package (Nod);\n+            Ent_Scope := SPARK_Specific.Enclosing_Subprogram_Or_Package (Ent);\n \n-            --  Since we are reaching through renamings in Alfa mode, we may\n+            --  Since we are reaching through renamings in SPARK mode, we may\n             --  end up with standard constants. Ignore those.\n \n             if Sloc (Ent_Scope) <= Standard_Location"}, {"sha": "cfb43d8b1dc59fb5a7e6d1b39ac6346ad8d07d5a", "filename": "gcc/ada/lib-xref.ads", "status": "modified", "additions": 21, "deletions": 19, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Flib-xref.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Flib-xref.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref.ads?ref=06b599fd62cccd693a395130dda53004f577714d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1998-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1998-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -26,9 +26,9 @@\n --  This package contains for collecting and outputting cross-reference\n --  information.\n \n-with Einfo;    use Einfo;\n-with Lib.Util; use Lib.Util;\n-with Put_Alfa;\n+with Einfo;           use Einfo;\n+with Lib.Util;        use Lib.Util;\n+with Put_SPARK_Xrefs;\n \n package Lib.Xref is\n \n@@ -599,14 +599,14 @@ package Lib.Xref is\n    --  Export at line 4, that its body is exported to C, and that the link name\n    --  as given in the pragma is \"here\".\n \n-   ----------------------\n-   -- Alfa Information --\n-   ----------------------\n+   -----------------------------\n+   -- SPARK Xrefs Information --\n+   -----------------------------\n \n-   --  This package defines procedures for collecting Alfa information and\n-   --  printing in ALI files.\n+   --  This package defines procedures for collecting SPARK cross-reference\n+   --  information and printing in ALI files.\n \n-   package Alfa is\n+   package SPARK_Specific is\n \n       function Enclosing_Subprogram_Or_Package (N : Node_Id) return Entity_Id;\n       --  Return the closest enclosing subprogram of package\n@@ -631,17 +631,19 @@ package Lib.Xref is\n       --  Call Process on all declarations through all compilation units.\n       --  Generic declarations are ignored.\n \n-      procedure Collect_Alfa (Sdep_Table : Unit_Ref_Table; Num_Sdep : Nat);\n-      --  Collect Alfa information from library units (for files and scopes)\n-      --  and from cross-references. Fill in the tables in library package\n-      --  called Alfa.\n+      procedure Collect_SPARK_Xrefs\n+        (Sdep_Table : Unit_Ref_Table;\n+         Num_Sdep   : Nat);\n+      --  Collect SPARK cross-reference information from library units (for\n+      --  files and scopes) and from shared cross-references. Fill in the\n+      --  tables in library package called SPARK_Xrefs.\n \n-      procedure Output_Alfa is new Put_Alfa;\n-      --  Output Alfa information to the ALI files, based on the information\n-      --  collected in the tables in library package called Alfa, and using\n-      --  routines in Lib.Util.\n+      procedure Output_SPARK_Xrefs is new Put_SPARK_Xrefs;\n+      --  Output SPARK cross-reference information to the ALI files, based on\n+      --  the information collected in the tables in library package called\n+      --  SPARK_Xrefs, and using routines in Lib.Util.\n \n-   end Alfa;\n+   end SPARK_Specific;\n \n    -----------------\n    -- Subprograms --"}, {"sha": "1fc43cc203e299e4d79ed9611b60d46da1d4527a", "filename": "gcc/ada/opt.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Fopt.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Fopt.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.adb?ref=06b599fd62cccd693a395130dda53004f577714d", "patch": "@@ -44,7 +44,7 @@ package body Opt is\n \n    function Full_Expander_Active return Boolean is\n    begin\n-      return Expander_Active and not Alfa_Mode;\n+      return Expander_Active and not SPARK_Mode;\n    end Full_Expander_Active;\n \n    ----------------------------------"}, {"sha": "06853648fd6a97a2be556ffc883dbd784ba749d9", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=06b599fd62cccd693a395130dda53004f577714d", "patch": "@@ -1929,7 +1929,7 @@ package Opt is\n    --  really seems wrong for Errout to depend on Expander.\n    --\n    --  Note: for many purposes, it is more appropriate to test the flag\n-   --  Full_Expander_Active, which also checks that Alfa mode is not active.\n+   --  Full_Expander_Active, which also checks that SPARK mode is not active.\n \n    Static_Dispatch_Tables : Boolean := True;\n    --  This flag indicates if the backend supports generation of statically\n@@ -1983,19 +1983,21 @@ package Opt is\n    -- Modes for Formal Verification --\n    -----------------------------------\n \n-   Alfa_Mode : Boolean := False;\n+   SPARK_Mode : Boolean := False;\n    --  Specific compiling mode targeting formal verification through the\n    --  generation of Why code for those parts of the input code that belong to\n-   --  the Alfa subset of Ada. Set True by the gnat2why executable or by use\n-   --  of the -gnatd.F debug switch.\n+   --  the SPARK 2014 subset of Ada. Set True by the gnat2why executable or by\n+   --  use of the -gnatd.F debug switch. Note that this is completely separate\n+   --  from the SPARK restriction defined in GNAT to detect violations of a\n+   --  subset of SPARK 2005 rules.\n \n    Frame_Condition_Mode : Boolean := False;\n-   --  Specific mode to be used in combination with Alfa_Mode. If set to\n+   --  Specific mode to be used in combination with SPARK_Mode. If set to\n    --  true, ALI files containing the frame conditions (global effects) are\n    --  generated, and Why files are *not* generated. If not true, Why files\n    --  are generated. Set by debug flag -gnatd.G.\n \n-   Strict_Alfa_Mode : Boolean := False;\n+   SPARK_Strict_Mode : Boolean := False;\n    --  Interpret compiler permissions as strictly as possible. E.g. base ranges\n    --  for integers are limited to the strict minimum with this option. Set by\n    --  debug flag -gnatd.D.\n@@ -2007,12 +2009,12 @@ package Opt is\n \n    function Full_Expander_Active return Boolean;\n    pragma Inline (Full_Expander_Active);\n-   --  Returns the value of (Expander_Active and not Alfa_Mode). This \"flag\"\n+   --  Returns the value of (Expander_Active and not SPARK_Mode). This \"flag\"\n    --  indicates that expansion is fully active, that is, not in the reduced\n-   --  mode for Alfa (True) or that expansion is either deactivated, or active\n-   --  in the reduced mode for Alfa (False). For more information on full\n+   --  mode for SPARK (True) or that expansion is either deactivated, or active\n+   --  in the reduced mode for SPARK (False). For more information on full\n    --  expansion, see package Expander. For more information on reduced\n-   --  Alfa expansion, see package Exp_Alfa.\n+   --  SPARK expansion, see package Exp_SPARK.\n \n private\n "}, {"sha": "f200e21327075351e2d475cf52e2eeddcd7a685a", "filename": "gcc/ada/put_spark_xrefs.adb", "status": "renamed", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Fput_spark_xrefs.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Fput_spark_xrefs.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fput_spark_xrefs.adb?ref=06b599fd62cccd693a395130dda53004f577714d", "patch": "@@ -2,11 +2,11 @@\n --                                                                          --\n --                         GNAT COMPILER COMPONENTS                         --\n --                                                                          --\n---                             P U T _ A L F A                              --\n+--                       P U T _ S P A R K _ X R E F S                      --\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2011-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2011-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -23,15 +23,15 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-with Alfa; use Alfa;\n+with SPARK_Xrefs; use SPARK_Xrefs;\n \n-procedure Put_Alfa is\n+procedure Put_SPARK_Xrefs is\n begin\n-   --  Loop through entries in Alfa_File_Table\n+   --  Loop through entries in SPARK_File_Table\n \n-   for J in 1 .. Alfa_File_Table.Last loop\n+   for J in 1 .. SPARK_File_Table.Last loop\n       declare\n-         F     : Alfa_File_Record renames Alfa_File_Table.Table (J);\n+         F     : SPARK_File_Record renames SPARK_File_Table.Table (J);\n          Start : Scope_Index;\n          Stop  : Scope_Index;\n \n@@ -71,7 +71,7 @@ begin\n             pragma Assert (Start <= Stop);\n \n             declare\n-               S : Alfa_Scope_Record renames Alfa_Scope_Table.Table (Start);\n+               S : SPARK_Scope_Record renames SPARK_Scope_Table.Table (Start);\n \n             begin\n                Write_Info_Initiate ('F');\n@@ -109,11 +109,11 @@ begin\n       end;\n    end loop;\n \n-   --  Loop through entries in Alfa_File_Table\n+   --  Loop through entries in SPARK_File_Table\n \n-   for J in 1 .. Alfa_File_Table.Last loop\n+   for J in 1 .. SPARK_File_Table.Last loop\n       declare\n-         F           : Alfa_File_Record renames Alfa_File_Table.Table (J);\n+         F           : SPARK_File_Record renames SPARK_File_Table.Table (J);\n          Start       : Scope_Index;\n          Stop        : Scope_Index;\n          File        : Nat;\n@@ -132,7 +132,7 @@ begin\n             pragma Assert (Start <= Stop);\n \n             Output_One_Scope : declare\n-               S : Alfa_Scope_Record renames Alfa_Scope_Table.Table (Start);\n+               S : SPARK_Scope_Record renames SPARK_Scope_Table.Table (Start);\n \n                XStart : Xref_Index;\n                XStop  : Xref_Index;\n@@ -177,8 +177,8 @@ begin\n                   pragma Assert (XStart <= XStop);\n \n                   Output_One_Xref : declare\n-                     R : Alfa_Xref_Record renames\n-                           Alfa_Xref_Table.Table (XStart);\n+                     R : SPARK_Xref_Record renames\n+                           SPARK_Xref_Table.Table (XStart);\n \n                   begin\n                      if R.Entity_Line /= Entity_Line\n@@ -240,4 +240,4 @@ begin\n          end loop;\n       end;\n    end loop;\n-end Put_Alfa;\n+end Put_SPARK_Xrefs;", "previous_filename": "gcc/ada/put_alfa.adb"}, {"sha": "fa0b81c068bcff23bd0adc8768d85d6a6375b709", "filename": "gcc/ada/put_spark_xrefs.ads", "status": "renamed", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Fput_spark_xrefs.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Fput_spark_xrefs.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fput_spark_xrefs.ads?ref=06b599fd62cccd693a395130dda53004f577714d", "patch": "@@ -2,11 +2,11 @@\n --                                                                          --\n --                         GNAT COMPILER COMPONENTS                         --\n --                                                                          --\n---                             P U T _ A L F A                              --\n+--                       P U T _ S P A R K _ X R E F S                      --\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---             Copyright (C) 2011, Free Software Foundation, Inc.           --\n+--          Copyright (C) 2011-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -23,10 +23,11 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  This package contains the function used to read Alfa information from the\n---  internal tables defined in package Alfa, and output text information for\n---  the ALI file. The interface allows control over the destination of the\n---  output, so that this routine can also be used for debugging purposes.\n+--  This package contains the function used to read SPARK cross-reference\n+--  information from the internal tables defined in package SPARK_Xrefs, and\n+--  output text information for the ALI file. The interface allows control over\n+--  the destination of the output, so that this routine can also be used for\n+--  debugging purposes.\n \n with Types; use Types;\n \n@@ -52,7 +53,7 @@ generic\n    with procedure Write_Info_Terminate is <>;\n    --  Terminate current info line and output lines built in Info_Buffer\n \n-procedure Put_Alfa;\n---  Read information from Alfa tables (Alfa.Alfa_Xref_Table,\n---  Alfa.Alfa_Scope_Table and Alfa.Alfa_File_Table) and output corresponding\n---  information in ALI format using the Write_Info procedures.\n+procedure Put_SPARK_Xrefs;\n+--  Read information from SPARK tables (SPARK_Xrefs.SPARK_Xref_Table,\n+--  SPARK_Xrefs.SPARK_Scope_Table and SPARK_Xrefs.SPARK_File_Table) and output\n+--  corresponding information in ALI format using the Write_Info procedures.", "previous_filename": "gcc/ada/put_alfa.ads"}, {"sha": "2e5d2beb753985ed08999d3692f3903e88de05ed", "filename": "gcc/ada/restrict.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Frestrict.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Frestrict.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frestrict.adb?ref=06b599fd62cccd693a395130dda53004f577714d", "patch": "@@ -564,12 +564,12 @@ package body Restrict is\n    begin\n       Msg_Issued := False;\n \n-      --  In CodePeer and Alfa mode, we do not want to check for any\n+      --  In CodePeer and SPARK mode, we do not want to check for any\n       --  restriction, or set additional restrictions other than those already\n       --  set in gnat1drv.adb so that we have consistency between each\n       --  compilation.\n \n-      if CodePeer_Mode or Alfa_Mode then\n+      if CodePeer_Mode or SPARK_Mode then\n          return;\n       end if;\n "}, {"sha": "9d7d7b7e4b1e1fde770a04e3551462c530f8c6cd", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=06b599fd62cccd693a395130dda53004f577714d", "patch": "@@ -1678,9 +1678,10 @@ package body Sem_Aggr is\n             --  unless the expression covers a single component, or the\n             --  expander is inactive.\n \n-            --  In Alfa mode, expressions that can perform side-effects will be\n-            --  recognized by the gnat2why back-end, and the whole subprogram\n-            --  will be ignored. So semantic analysis can be performed safely.\n+            --  In SPARK mode, expressions that can perform side-effects will\n+            --  be recognized by the gnat2why back-end, and the whole\n+            --  subprogram will be ignored. So semantic analysis can be\n+            --  performed safely.\n \n             if Single_Elmt\n               or else not Full_Expander_Active"}, {"sha": "e5a5b05118aea8233b2f2e62ff66ab34db576e15", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=06b599fd62cccd693a395130dda53004f577714d", "patch": "@@ -4379,13 +4379,13 @@ package body Sem_Attr is\n          --  enclosing subprogram. This is properly an expansion activity\n          --  but it has to be performed now to prevent out-of-order issues.\n \n-         --  This expansion is both harmful and not needed in Alfa mode, since\n+         --  This expansion is both harmful and not needed in SPARK mode, since\n          --  the formal verification backend relies on the types of nodes\n          --  (hence is not robust w.r.t. a change to base type here), and does\n          --  not suffer from the out-of-order issue described above. Thus, this\n-         --  expansion is skipped in Alfa mode.\n+         --  expansion is skipped in SPARK mode.\n \n-         if not Is_Entity_Name (P) and then not Alfa_Mode then\n+         if not Is_Entity_Name (P) and then not SPARK_Mode then\n             P_Type := Base_Type (P_Type);\n             Set_Etype (N, P_Type);\n             Set_Etype (P, P_Type);"}, {"sha": "da964c06672ffce4d1479707eedca4495df22e2a", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=06b599fd62cccd693a395130dda53004f577714d", "patch": "@@ -9833,10 +9833,10 @@ package body Sem_Ch3 is\n \n                --  The side effect removal machinery may generate illegal Ada\n                --  code to avoid the usage of access types and 'reference in\n-               --  Alfa mode. Since this is legal code with respect to theorem\n+               --  SPARK mode. Since this is legal code with respect to theorem\n                --  proving, do not emit the error.\n \n-               if Alfa_Mode\n+               if SPARK_Mode\n                  and then Nkind (Exp) = N_Function_Call\n                  and then Nkind (Parent (Exp)) = N_Object_Declaration\n                  and then not Comes_From_Source\n@@ -11974,7 +11974,7 @@ package body Sem_Ch3 is\n          --  which must not be reevaluated.\n \n          --  The forced evaluation removes side effects from expressions,\n-         --  which should occur also in Alfa mode. Otherwise, we end up with\n+         --  which should occur also in SPARK mode. Otherwise, we end up with\n          --  unexpected insertions of actions at places where this is not\n          --  supposed to occur, e.g. on default parameters of a call.\n \n@@ -18610,9 +18610,9 @@ package body Sem_Ch3 is\n             --  duplication of the expression without forcing evaluation.\n \n             --  The forced evaluation removes side effects from expressions,\n-            --  which should occur also in Alfa mode. Otherwise, we end up with\n-            --  unexpected insertions of actions at places where this is not\n-            --  supposed to occur, e.g. on default parameters of a call.\n+            --  which should occur also in SPARK mode. Otherwise, we end up\n+            --  with unexpected insertions of actions at places where this is\n+            --  not supposed to occur, e.g. on default parameters of a call.\n \n             if Expander_Active then\n                Force_Evaluation (Lo);\n@@ -18725,7 +18725,7 @@ package body Sem_Ch3 is\n       --  Case of other than an explicit N_Range node\n \n       --  The forced evaluation removes side effects from expressions, which\n-      --  should occur also in Alfa mode. Otherwise, we end up with unexpected\n+      --  should occur also in SPARK mode. Otherwise, we end up with unexpected\n       --  insertions of actions at places where this is not supposed to occur,\n       --  e.g. on default parameters of a call.\n \n@@ -20169,7 +20169,7 @@ package body Sem_Ch3 is\n       --  subtype range. Keep Size, RM_Size and First_Rep_Item info, which\n       --  should not be relied upon in formal verification.\n \n-      if Strict_Alfa_Mode then\n+      if SPARK_Strict_Mode then\n          declare\n             Sym_Hi_Val : Uint;\n             Sym_Lo_Val : Uint;"}, {"sha": "e78ce33bff1b7c1a7b8b54348f375e35de1f5224", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=06b599fd62cccd693a395130dda53004f577714d", "patch": "@@ -1801,8 +1801,8 @@ package body Sem_Ch4 is\n       --  In formal verification mode, keep track of all reads and writes\n       --  through explicit dereferences.\n \n-      if Alfa_Mode then\n-         Alfa.Generate_Dereference (N);\n+      if SPARK_Mode then\n+         SPARK_Specific.Generate_Dereference (N);\n       end if;\n \n       Analyze (P);\n@@ -4484,10 +4484,10 @@ package body Sem_Ch4 is\n                      --  Emit appropriate message. Gigi will replace the\n                      --  node subsequently with the appropriate Raise.\n \n-                     --  In Alfa mode, this is made into an error to simplify\n+                     --  In SPARK mode, this is made into an error to simplify\n                      --  the processing of the formal verification backend.\n \n-                     if Alfa_Mode then\n+                     if SPARK_Mode then\n                         Apply_Compile_Time_Constraint_Error\n                           (N, \"component not present in }\",\n                            CE_Discriminant_Check_Failed,"}, {"sha": "fbeffd84f787b8e468949fb0dbe1aadf2c5a6628", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=06b599fd62cccd693a395130dda53004f577714d", "patch": "@@ -1664,10 +1664,10 @@ package body Sem_Ch5 is\n         and then (Nkind (Parent (N)) /= N_Quantified_Expression\n                    or else Operating_Mode = Check_Semantics)\n \n-        --  Do not perform this expansion in Alfa mode, since the formal\n+        --  Do not perform this expansion in SPARK mode, since the formal\n         --  verification directly deals with the source form of the iterator.\n \n-        and then not Alfa_Mode\n+        and then not SPARK_Mode\n       then\n          declare\n             Id   : constant Entity_Id := Make_Temporary (Loc, 'R', Iter_Name);\n@@ -2682,7 +2682,7 @@ package body Sem_Ch5 is\n       --  types the actual subtype of the components will only be determined\n       --  when the cursor declaration is analyzed.\n \n-      --  If the expander is not active, or in Alfa mode, then we want to\n+      --  If the expander is not active, or in SPARK mode, then we want to\n       --  analyze the loop body now even in the Ada 2012 iterator case, since\n       --  the rewriting will not be done. Insert the loop variable in the\n       --  current scope, if not done when analysing the iteration scheme."}, {"sha": "ce865bb5927b5573dd710b481c301a262421b2d4", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=06b599fd62cccd693a395130dda53004f577714d", "patch": "@@ -1147,7 +1147,7 @@ package body Sem_Ch6 is\n          --  than inserted in the code, in order to facilitate a distinct\n          --  treatment for them.\n \n-         if not Alfa_Mode then\n+         if not SPARK_Mode then\n             Process_PPCs (N, Gen_Id, Body_Id);\n          end if;\n \n@@ -3090,7 +3090,7 @@ package body Sem_Ch6 is\n       --  than inserted in the code, in order to facilitate a distinct\n       --  treatment for them.\n \n-      if not Alfa_Mode then\n+      if not SPARK_Mode then\n          Process_PPCs (N, Spec_Id, Body_Id);\n       end if;\n "}, {"sha": "94ce100a7c5a2aa4bfbb6a3dbb4cc2474a79f902", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=06b599fd62cccd693a395130dda53004f577714d", "patch": "@@ -1353,13 +1353,13 @@ package body Sem_Eval is\n             if Ekind (E) = E_Enumeration_Literal then\n                return True;\n \n-            --  In Alfa mode, the value of deferred constants should be ignored\n-            --  outside the scope of their full view. This allows parameterized\n-            --  formal verification, in which a deferred constant value if not\n-            --  known from client units.\n+            --  In SPARK mode, the value of deferred constants should be\n+            --  ignored outside the scope of their full view. This allows\n+            --  parameterized formal verification, in which a deferred constant\n+            --  value if not known from client units.\n \n             elsif Ekind (E) = E_Constant\n-              and then not (Alfa_Mode\n+              and then not (SPARK_Mode\n                              and then Present (Full_View (E))\n                              and then not In_Open_Scopes (Scope (E)))\n             then"}, {"sha": "f6ee33219e47c51b83bca6e2ebcd6f6a56df7107", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=06b599fd62cccd693a395130dda53004f577714d", "patch": "@@ -3664,7 +3664,7 @@ package body Sem_Prag is\n             --  In formal verification mode, analyze pragma expression for\n             --  correctness, as it is not expanded later.\n \n-            if Alfa_Mode then\n+            if SPARK_Mode then\n                Analyze_PPC_In_Decl_Part\n                  (N, Defining_Entity (Unit (Parent (Parent (N)))));\n             end if;\n@@ -7389,11 +7389,11 @@ package body Sem_Prag is\n       --  Start of processing for Process_Suppress_Unsuppress\n \n       begin\n-         --  Ignore pragma Suppress/Unsuppress in CodePeer and Alfa modes on\n+         --  Ignore pragma Suppress/Unsuppress in CodePeer and SPARK modes on\n          --  user code: we want to generate checks for analysis purposes, as\n          --  set respectively by -gnatC and -gnatd.F\n \n-         if (CodePeer_Mode or Alfa_Mode) and then Comes_From_Source (N) then\n+         if (CodePeer_Mode or SPARK_Mode) and then Comes_From_Source (N) then\n             return;\n          end if;\n \n@@ -12602,11 +12602,11 @@ package body Sem_Prag is\n             Check_Restriction (No_Initialize_Scalars, N);\n \n             --  Initialize_Scalars creates false positives in CodePeer, and\n-            --  incorrect negative results in Alfa mode, so ignore this pragma\n+            --  incorrect negative results in SPARK mode, so ignore this pragma\n             --  in these modes.\n \n             if not Restriction_Active (No_Initialize_Scalars)\n-              and then not (CodePeer_Mode or Alfa_Mode)\n+              and then not (CodePeer_Mode or SPARK_Mode)\n             then\n                Init_Or_Norm_Scalars := True;\n                Initialize_Scalars := True;\n@@ -12637,10 +12637,10 @@ package body Sem_Prag is\n          when Pragma_Inline_Always =>\n             GNAT_Pragma;\n \n-            --  Pragma always active unless in CodePeer or Alfa mode, since\n+            --  Pragma always active unless in CodePeer or SPARK mode, since\n             --  this causes walk order issues.\n \n-            if not (CodePeer_Mode or Alfa_Mode) then\n+            if not (CodePeer_Mode or SPARK_Mode) then\n                Process_Inline (Enabled);\n             end if;\n \n@@ -14305,10 +14305,10 @@ package body Sem_Prag is\n             Check_Valid_Configuration_Pragma;\n \n             --  Normalize_Scalars creates false positives in CodePeer, and\n-            --  incorrect negative results in Alfa mode, so ignore this pragma\n+            --  incorrect negative results in SPARK mode, so ignore this pragma\n             --  in these modes.\n \n-            if not (CodePeer_Mode or Alfa_Mode) then\n+            if not (CodePeer_Mode or SPARK_Mode) then\n                Normalize_Scalars := True;\n                Init_Or_Norm_Scalars := True;\n             end if;\n@@ -14760,7 +14760,7 @@ package body Sem_Prag is\n                   --  complex front-end expansions related to pragma Pack,\n                   --  so disable handling of pragma Pack in these cases.\n \n-                  if CodePeer_Mode or Alfa_Mode then\n+                  if CodePeer_Mode or SPARK_Mode then\n                      null;\n \n                   --  Don't attempt any packing for VM targets. We possibly"}, {"sha": "6674d1fd8498dc7bbca0332fbc09969f5fb51355", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=06b599fd62cccd693a395130dda53004f577714d", "patch": "@@ -1666,16 +1666,16 @@ package body Sem_Res is\n       --  and reexpanded later on. We will also have more information at that\n       --  point for possible suppression of individual checks.\n \n-      --  However, in Alfa mode, most expansion is suppressed, and this\n-      --  later reanalysis and reexpansion may not occur. Alfa mode does\n+      --  However, in SPARK mode, most expansion is suppressed, and this\n+      --  later reanalysis and reexpansion may not occur. SPARK mode does\n       --  require the setting of checking flags for proof purposes, so we\n-      --  do the Alfa preanalysis without suppressing checks.\n+      --  do the SPARK preanalysis without suppressing checks.\n \n-      --  This special handling for Alfa mode is required for example in the\n+      --  This special handling for SPARK mode is required for example in the\n       --  case of Ada 2012 constructs such as quantified expressions, which are\n       --  expanded in two separate steps.\n \n-      if Alfa_Mode then\n+      if SPARK_Mode then\n          Analyze_And_Resolve (N, T);\n       else\n          Analyze_And_Resolve (N, T, Suppress => All_Checks);\n@@ -4162,12 +4162,12 @@ package body Sem_Res is\n \n             --  If it is a named association, treat the selector_name as a\n             --  proper identifier, and mark the corresponding entity. Ignore\n-            --  this reference in Alfa mode, as it refers to an entity not in\n+            --  this reference in SPARK mode, as it refers to an entity not in\n             --  scope at the point of reference, so the reference should be\n             --  ignored for computing effects of subprograms.\n \n             if Nkind (Parent (A)) = N_Parameter_Association\n-              and then not Alfa_Mode\n+              and then not SPARK_Mode\n             then\n                Set_Entity (Selector_Name (Parent (A)), F);\n                Generate_Reference (F, Selector_Name (Parent (A)));"}, {"sha": "aca6ac2ede9fc9c884cfa2de7156f230bffe68fe", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=06b599fd62cccd693a395130dda53004f577714d", "patch": "@@ -12030,8 +12030,8 @@ package body Sem_Util is\n                --  In formal verification mode, keep track of all reads and\n                --  writes through explicit dereferences.\n \n-               if Alfa_Mode then\n-                  Alfa.Generate_Dereference (N, 'm');\n+               if SPARK_Mode then\n+                  SPARK_Specific.Generate_Dereference (N, 'm');\n                end if;\n \n                if Nkind (P) = N_Selected_Component\n@@ -12127,7 +12127,7 @@ package body Sem_Util is\n                --  source. This excludes, for example, calls to a dispatching\n                --  assignment operation when the left-hand side is tagged.\n \n-               if Modification_Comes_From_Source or else Alfa_Mode then\n+               if Modification_Comes_From_Source or else SPARK_Mode then\n                   Generate_Reference (Ent, Exp, 'm');\n \n                   --  If the target of the assignment is the bound variable"}, {"sha": "8049c7ee534cfe4d3151e6ec7d211a47f40f382c", "filename": "gcc/ada/spark_xrefs.adb", "status": "renamed", "additions": 39, "deletions": 39, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Fspark_xrefs.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Fspark_xrefs.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fspark_xrefs.adb?ref=06b599fd62cccd693a395130dda53004f577714d", "patch": "@@ -2,11 +2,11 @@\n --                                                                          --\n --                         GNAT COMPILER COMPONENTS                         --\n --                                                                          --\n---                                 A L F A                                  --\n+--                           S P A R K _ X R E F S                          --\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---             Copyright (C) 2011, Free Software Foundation, Inc.           --\n+--          Copyright (C) 2011-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -23,25 +23,25 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-with Output;   use Output;\n-with Put_Alfa;\n+with Output;          use Output;\n+with Put_SPARK_Xrefs;\n \n-package body Alfa is\n+package body SPARK_Xrefs is\n \n-   -----------\n-   -- dalfa --\n-   -----------\n+   ------------\n+   -- dspark --\n+   ------------\n \n-   procedure dalfa is\n+   procedure dspark is\n    begin\n-      --  Dump Alfa file table\n+      --  Dump SPARK cross-reference file table\n \n-      Write_Line (\"Alfa File Table\");\n-      Write_Line (\"---------------\");\n+      Write_Line (\"SPARK Xrefs File Table\");\n+      Write_Line (\"----------------------\");\n \n-      for Index in 1 .. Alfa_File_Table.Last loop\n+      for Index in 1 .. SPARK_File_Table.Last loop\n          declare\n-            AFR : Alfa_File_Record renames Alfa_File_Table.Table (Index);\n+            AFR : SPARK_File_Record renames SPARK_File_Table.Table (Index);\n \n          begin\n             Write_Str (\"  \");\n@@ -63,15 +63,15 @@ package body Alfa is\n          end;\n       end loop;\n \n-      --  Dump Alfa scope table\n+      --  Dump SPARK cross-reference scope table\n \n       Write_Eol;\n-      Write_Line (\"Alfa Scope Table\");\n-      Write_Line (\"----------------\");\n+      Write_Line (\"SPARK Xrefs Scope Table\");\n+      Write_Line (\"-----------------------\");\n \n-      for Index in 1 .. Alfa_Scope_Table.Last loop\n+      for Index in 1 .. SPARK_Scope_Table.Last loop\n          declare\n-            ASR : Alfa_Scope_Record renames Alfa_Scope_Table.Table (Index);\n+            ASR : SPARK_Scope_Record renames SPARK_Scope_Table.Table (Index);\n \n          begin\n             Write_Str (\"  \");\n@@ -103,15 +103,15 @@ package body Alfa is\n          end;\n       end loop;\n \n-      --  Dump Alfa cross-reference table\n+      --  Dump SPARK cross-reference table\n \n       Write_Eol;\n-      Write_Line (\"Alfa Xref Table\");\n-      Write_Line (\"---------------\");\n+      Write_Line (\"SPARK Xref Table\");\n+      Write_Line (\"----------------\");\n \n-      for Index in 1 .. Alfa_Xref_Table.Last loop\n+      for Index in 1 .. SPARK_Xref_Table.Last loop\n          declare\n-            AXR : Alfa_Xref_Record renames Alfa_Xref_Table.Table (Index);\n+            AXR : SPARK_Xref_Record renames SPARK_Xref_Table.Table (Index);\n \n          begin\n             Write_Str  (\"  \");\n@@ -140,24 +140,24 @@ package body Alfa is\n             Write_Eol;\n          end;\n       end loop;\n-   end dalfa;\n+   end dspark;\n \n    ----------------\n    -- Initialize --\n    ----------------\n \n-   procedure Initialize_Alfa_Tables is\n+   procedure Initialize_SPARK_Tables is\n    begin\n-      Alfa_File_Table.Init;\n-      Alfa_Scope_Table.Init;\n-      Alfa_Xref_Table.Init;\n-   end Initialize_Alfa_Tables;\n+      SPARK_File_Table.Init;\n+      SPARK_Scope_Table.Init;\n+      SPARK_Xref_Table.Init;\n+   end Initialize_SPARK_Tables;\n \n-   -----------\n-   -- palfa --\n-   -----------\n+   ------------\n+   -- pspark --\n+   ------------\n \n-   procedure palfa is\n+   procedure pspark is\n \n       procedure Write_Info_Char (C : Character) renames Write_Char;\n       --  Write one character;\n@@ -192,12 +192,12 @@ package body Alfa is\n          Write_Int (N);\n       end Write_Info_Nat;\n \n-      procedure Debug_Put_Alfa is new Put_Alfa;\n+      procedure Debug_Put_SPARK_Xrefs is new Put_SPARK_Xrefs;\n \n-   --  Start of processing for palfa\n+   --  Start of processing for pspark\n \n    begin\n-      Debug_Put_Alfa;\n-   end palfa;\n+      Debug_Put_SPARK_Xrefs;\n+   end pspark;\n \n-end Alfa;\n+end SPARK_Xrefs;", "previous_filename": "gcc/ada/alfa.adb"}, {"sha": "2b0a708295436184c43c1123ac4abd1e58d4e183", "filename": "gcc/ada/spark_xrefs.ads", "status": "renamed", "additions": 51, "deletions": 47, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Fspark_xrefs.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Fspark_xrefs.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fspark_xrefs.ads?ref=06b599fd62cccd693a395130dda53004f577714d", "patch": "@@ -2,11 +2,11 @@\n --                                                                          --\n --                         GNAT COMPILER COMPONENTS                         --\n --                                                                          --\n---                                 A L F A                                  --\n+--                           S P A R K _ X R E F S                          --\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2011-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2011-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -23,42 +23,45 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  This package defines tables used to store information needed for the Alfa\n---  mode. It is used by procedures in Lib.Xref.Alfa to build the Alfa\n---  information before writing it out to the ALI file, and by Get_Alfa/Put_Alfa\n---  to read and write the text form that is used in the ALI file.\n+--  This package defines tables used to store information needed for the SPARK\n+--  mode. It is used by procedures in Lib.Xref.SPARK_Specific to build the\n+--  SPARK specific cross-references information before writing it out to the\n+--  ALI file, and by Get_SPARK_Xrefs/Put_SPARK_Xrefs to read and write the text\n+--  form that is used in the ALI file.\n \n with Types;      use Types;\n with GNAT.Table;\n \n-package Alfa is\n+package SPARK_Xrefs is\n \n-   --  Alfa information can exist in one of two forms. In the ALI file, it is\n-   --  represented using a text format that is described in this specification.\n-   --  Internally it is stored using three tables Alfa_Xref_Table,\n-   --  Alfa_Scope_Table and Alfa_File_Table, which are also defined in this\n-   --  unit.\n+   --  SPARK cross-reference information can exist in one of two forms. In the\n+   --  ALI file, it is represented using a text format that is described in\n+   --  this specification.  Internally it is stored using three tables\n+   --  SPARK_Xref_Table, SPARK_Scope_Table and SPARK_File_Table, which are also\n+   --  defined in this unit.\n \n-   --  Lib.Xref.Alfa is part of the compiler. It extracts Alfa information from\n-   --  the complete set of cross-references generated during compilation.\n+   --  Lib.Xref.SPARK_Specific is part of the compiler. It extracts SPARK\n+   --  cross-reference information from the complete set of cross-references\n+   --  generated during compilation.\n \n-   --  Get_Alfa reads the text lines in ALI format and populates the internal\n-   --  tables with corresponding information.\n+   --  Get_SPARK_Xrefs reads the text lines in ALI format and populates the\n+   --  internal tables with corresponding information.\n \n-   --  Put_Alfa reads the internal tables and generates text lines in the ALI\n-   --  format.\n+   --  Put_SPARK_Xrefs reads the internal tables and generates text lines in\n+   --  the ALI format.\n \n-   ---------------------\n-   -- Alfa ALI Format --\n-   ---------------------\n+   ----------------------------\n+   -- SPARK Xrefs ALI Format --\n+   ----------------------------\n \n-   --  Alfa information is generated on a unit-by-unit basis in the ALI file,\n-   --  using lines that start with the identifying character F (\"Formal\").\n-   --  These lines are generated if one of the -gnatd.E (SPARK generation mode)\n-   --  or gnatd.F (Why generation mode) switches is set.\n+   --  SPARK cross-reference information is generated on a unit-by-unit basis\n+   --  in the ALI file, using lines that start with the identifying character F\n+   --  (\"Formal\").  These lines are generated if -gnatd.E or -gnatd.F (Why\n+   --  generation mode) switches are set.\n \n-   --  The Alfa information follows the cross-reference information, so it\n-   --  needs not be read by tools like gnatbind, gnatmake etc.\n+   --  The SPARK cross-reference information comes after the shared\n+   --  cross-reference information, so it needs not be read by tools like\n+   --  gnatbind, gnatmake etc.\n \n    --  -------------------\n    --  -- Scope Section --\n@@ -86,8 +89,9 @@ package Alfa is\n \n    --      Note: the filename is redundant in that it could be deduced from the\n    --      corresponding D line, but it is convenient at least for human\n-   --      reading of the Alfa information, and means that the Alfa information\n-   --      can stand on its own without needing other parts of the ALI file.\n+   --      reading of the SPARK cross-reference information, and means that\n+   --      the SPARK cross-reference information can stand on its own without\n+   --      needing other parts of the ALI file.\n \n    --      The optional unit filename is given only for subunits.\n \n@@ -187,13 +191,13 @@ package Alfa is\n    -- Xref Table --\n    ----------------\n \n-   --  The following table records Alfa cross-references\n+   --  The following table records SPARK cross-references\n \n    type Xref_Index is new Int;\n    --  Used to index values in this table. Values start at 1 and are assigned\n    --  sequentially as entries are constructed.\n \n-   type Alfa_Xref_Record is record\n+   type SPARK_Xref_Record is record\n       Entity_Name : String_Ptr;\n       --  Pointer to entity name in ALI file\n \n@@ -233,8 +237,8 @@ package Alfa is\n       --  Column number for the reference\n    end record;\n \n-   package Alfa_Xref_Table is new GNAT.Table (\n-     Table_Component_Type => Alfa_Xref_Record,\n+   package SPARK_Xref_Table is new GNAT.Table (\n+     Table_Component_Type => SPARK_Xref_Record,\n      Table_Index_Type     => Xref_Index,\n      Table_Low_Bound      => 1,\n      Table_Initial        => 2000,\n@@ -251,7 +255,7 @@ package Alfa is\n    --  Used to index values in this table. Values start at 1 and are assigned\n    --  sequentially as entries are constructed.\n \n-   type Alfa_Scope_Record is record\n+   type SPARK_Scope_Record is record\n       Scope_Name : String_Ptr;\n       --  Pointer to scope name in ALI file\n \n@@ -294,8 +298,8 @@ package Alfa is\n       --  Entity (subprogram or package) for the scope\n    end record;\n \n-   package Alfa_Scope_Table is new GNAT.Table (\n-     Table_Component_Type => Alfa_Scope_Record,\n+   package SPARK_Scope_Table is new GNAT.Table (\n+     Table_Component_Type => SPARK_Scope_Record,\n      Table_Index_Type     => Scope_Index,\n      Table_Low_Bound      => 1,\n      Table_Initial        => 200,\n@@ -312,7 +316,7 @@ package Alfa is\n    --  Used to index values in this table. Values start at 1 and are assigned\n    --  sequentially as entries are constructed.\n \n-   type Alfa_File_Record is record\n+   type SPARK_File_Record is record\n       File_Name : String_Ptr;\n       --  Pointer to file name in ALI file\n \n@@ -330,8 +334,8 @@ package Alfa is\n       --  Ending index in Scope table for this unit\n    end record;\n \n-   package Alfa_File_Table is new GNAT.Table (\n-     Table_Component_Type => Alfa_File_Record,\n+   package SPARK_File_Table is new GNAT.Table (\n+     Table_Component_Type => SPARK_File_Record,\n      Table_Index_Type     => File_Index,\n      Table_Low_Bound      => 1,\n      Table_Initial        => 20,\n@@ -349,15 +353,15 @@ package Alfa is\n    -- Subprograms --\n    -----------------\n \n-   procedure Initialize_Alfa_Tables;\n+   procedure Initialize_SPARK_Tables;\n    --  Reset tables for a new compilation\n \n-   procedure dalfa;\n-   --  Debug routine to dump internal Alfa tables. This is a raw format dump\n-   --  showing exactly what the tables contain.\n+   procedure dspark;\n+   --  Debug routine to dump internal SPARK cross-reference tables. This is a\n+   --  raw format dump showing exactly what the tables contain.\n \n-   procedure palfa;\n-   --  Debugging procedure to output contents of Alfa binary tables in the\n-   --  format in which they appear in an ALI file.\n+   procedure pspark;\n+   --  Debugging procedure to output contents of SPARK cross-reference binary\n+   --  tables in the format in which they appear in an ALI file.\n \n-end Alfa;\n+end SPARK_Xrefs;", "previous_filename": "gcc/ada/alfa.ads"}, {"sha": "6ad4de2c158e1d0acae52cff0108cdb8cf308460", "filename": "gcc/ada/spark_xrefs_test.adb", "status": "renamed", "additions": 36, "deletions": 32, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Fspark_xrefs_test.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06b599fd62cccd693a395130dda53004f577714d/gcc%2Fada%2Fspark_xrefs_test.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fspark_xrefs_test.adb?ref=06b599fd62cccd693a395130dda53004f577714d", "patch": "@@ -2,11 +2,11 @@\n --                                                                          --\n --                          GNAT SYSTEM UTILITIES                           --\n --                                                                          --\n---                            A L F A _ T E S T                             --\n+--                     S P A R K _ X R E F S _ T E S T                      --\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---            Copyright (C) 2011, Free Software Foundation, Inc.            --\n+--          Copyright (C) 2011-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -23,33 +23,34 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  This utility program is used to test proper operation of the Get_Alfa and\n---  Put_Alfa units. To run it, compile any source file with switch -gnatd.E or\n---  -gnatd.F to get an ALI file file.ALI containing Alfa information. Then run\n---  this utility using:\n+--  This utility program is used to test proper operation of the\n+--  Get_SPARK_Xrefs and Put_SPARK_Xrefs units. To run it, compile any source\n+--  file with switch -gnatd.E or -gnatd.F to get an ALI file file.ALI\n+--  containing SPARK information. Then run this utility using:\n \n---     Alfa_Test file.ali\n+--     spark_xrefs_test file.ali\n \n---  This test will read the Alfa information from the ALI file, and use\n---  Get_Alfa to store this in binary form in the internal tables in Alfa. Then\n---  Put_Alfa is used to write the information from these tables back into text\n---  form. This output is compared with the original Alfa information in the ALI\n---  file and the two should be identical. If not an error message is output.\n+--  This test will read the SPARK cross-reference information from the ALI\n+--  file, and use Get_SPARK_Xrefs to store this in binary form in the internal\n+--  tables in SPARK_Xrefs. Then Put_SPARK_Xrefs is used to write the\n+--  information from these tables back into text form. This output is compared\n+--  with the original SPARK cross-reference information in the ALI file and the\n+--  two should be identical. If not an error message is output.\n \n-with Get_Alfa;\n-with Put_Alfa;\n+with Get_SPARK_Xrefs;\n+with Put_SPARK_Xrefs;\n \n-with Alfa;  use Alfa;\n-with Types; use Types;\n+with SPARK_Xrefs;           use SPARK_Xrefs;\n+with Types;                 use Types;\n \n with Ada.Command_Line;      use Ada.Command_Line;\n with Ada.Streams;           use Ada.Streams;\n with Ada.Streams.Stream_IO; use Ada.Streams.Stream_IO;\n with Ada.Text_IO;\n \n-with GNAT.OS_Lib; use GNAT.OS_Lib;\n+with GNAT.OS_Lib;           use GNAT.OS_Lib;\n \n-procedure Alfa_Test is\n+procedure SPARK_Xrefs_Test is\n    Infile    : File_Type;\n    Name1     : String_Access;\n    Outfile_1 : File_Type;\n@@ -67,7 +68,7 @@ procedure Alfa_Test is\n \n begin\n    if Argument_Count /= 1 then\n-      Ada.Text_IO.Put_Line (\"Usage: alfa_test FILE.ali\");\n+      Ada.Text_IO.Put_Line (\"Usage: spark_xrefs_test FILE.ali\");\n       raise Stop;\n    end if;\n \n@@ -143,8 +144,9 @@ begin\n          end if;\n       end Put_Char;\n \n-      --  Subprograms used by Get_Alfa (these also copy the output to Outfile_1\n-      --  for later comparison with the output generated by Put_Alfa).\n+      --  Subprograms used by Get_SPARK_Xrefs (these also copy the output to\n+      --  Outfile_1 for later comparison with the output generated by\n+      --  Put_SPARK_Xrefs).\n \n       function  Getc  return Character;\n       function  Nextc return Character;\n@@ -190,7 +192,8 @@ begin\n          C := Getc;\n       end Skipc;\n \n-      --  Subprograms used by Put_Alfa, which write information to Outfile_2\n+      --  Subprograms used by Put_SPARK_Xrefs, which write information to\n+      --  Outfile_2.\n \n       function Write_Info_Col return Positive;\n       procedure Write_Info_Char (C : Character);\n@@ -247,10 +250,10 @@ begin\n          Write_Info_Char (LF);\n       end Write_Info_Terminate;\n \n-      --  Local instantiations of Put_Alfa and Get_Alfa\n+      --  Local instantiations of Put_SPARK_Xrefs and Get_SPARK_Xrefs\n \n-      procedure Get_Alfa_Info is new Get_Alfa;\n-      procedure Put_Alfa_Info is new Put_Alfa;\n+      procedure Get_SPARK_Xrefs_Info is new Get_SPARK_Xrefs;\n+      procedure Put_SPARK_Xrefs_Info is new Put_SPARK_Xrefs;\n \n    --  Start of processing for Process\n \n@@ -277,15 +280,16 @@ begin\n \n       Set_Index (Infile, Index (Infile) - 1);\n \n-      --  Read Alfa information to internal Alfa tables, also copying Alfa info\n-      --  to Outfile_1.\n+      --  Read SPARK cross-reference information to internal SPARK tables, also\n+      --  copying SPARK xrefs info to Outfile_1.\n \n-      Initialize_Alfa_Tables;\n-      Get_Alfa_Info;\n+      Initialize_SPARK_Tables;\n+      Get_SPARK_Xrefs_Info;\n \n-      --  Write Alfa information from internal Alfa tables to Outfile_2\n+      --  Write SPARK cross-reference information from internal SPARK tables to\n+      --  Outfile_2.\n \n-      Put_Alfa_Info;\n+      Put_SPARK_Xrefs_Info;\n \n       --  Junk blank line (see comment at end of Lib.Writ)\n \n@@ -314,4 +318,4 @@ begin\n exception\n    when Stop =>\n       null;\n-end Alfa_Test;\n+end SPARK_Xrefs_Test;", "previous_filename": "gcc/ada/alfa_test.adb"}]}