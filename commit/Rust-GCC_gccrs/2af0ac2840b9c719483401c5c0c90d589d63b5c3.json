{"sha": "2af0ac2840b9c719483401c5c0c90d589d63b5c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmFmMGFjMjg0MGI5YzcxOTQ4MzQwMWM1YzBjOTBkNTg5ZDYzYjVjMw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-10-26T08:34:46Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-10-26T08:34:46Z"}, "message": "tree.h (BLOCK_TYPE_TAGS): Remove.\n\n\t* tree.h (BLOCK_TYPE_TAGS): Remove.\n\t(BLOCK_END_NOTE): Likewise.\n\t(BLOCK_LIVE_RANGE_FLAG): Likewise.\n\t(BLOCK_LIVE_RANGE_START): Likewise.\n\t(BLOCK_LIVE_RANGE_END): Likewise.\n\t(tree_block): Remove live_range_flag, live_range_var_flag, and\n\ttype_tags.  Remove end_note, live_range_start, and live_range_end.\n\t(remember_end_note): Remove prototype.\n\t* tree.c (build_block): Don't set BLOCK_TYPE_TAGS.\n\t* c-decl.c (poplevel): Don't set BLOCK_TYPE_TAGS or call\n\tremember_end_note.\n\t* ggc-common.c (ggc_mark_tree_children): Don't mark\n\tBLOCK_TYPE_TAGS or BLOCK_END_NOTE.\n\t* integrate.c (adjust_copied_decl_tree): Remove.\n\t* print-tree.c (print_node): Don't print BLOCK_TYPE_TAGS.\n\t* stmt.c (last_block_end_note): Remove.\n\t(init_stmt): Don't add a GC root for it.\n\t(expand_fixup): Don't set it.\n\t(remember_end_note): Remove.\n\t(expand_end_bindings): Don't set last_block_end_note.\n\n\t* ch-tree.h (remember_end_note): Remove prototype.\n\t* decl.c (poplevel): Don't call remember_end_note.\n\n\t* decl.c (poplevel): Don't set BLOCK_TYPE_TAGS.  Don't call\n\tremember_end_note.\n\n\t* com.c (poplevel): Don't call remember_end_note.\n\n\t* decl.c (poplevel): Don't set BLOCK_TYPE_TAGS or call\n\tremember_end_note.\n\nFrom-SVN: r30188", "tree": {"sha": "db6b933a6722ed9333f4f346ff709a8b93827c41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db6b933a6722ed9333f4f346ff709a8b93827c41"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2af0ac2840b9c719483401c5c0c90d589d63b5c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2af0ac2840b9c719483401c5c0c90d589d63b5c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2af0ac2840b9c719483401c5c0c90d589d63b5c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2af0ac2840b9c719483401c5c0c90d589d63b5c3/comments", "author": null, "committer": null, "parents": [{"sha": "ce7cbc76392ccc554f93f96be61152ae0e5f8dea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce7cbc76392ccc554f93f96be61152ae0e5f8dea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce7cbc76392ccc554f93f96be61152ae0e5f8dea"}], "stats": {"total": 134, "additions": 45, "deletions": 89}, "files": [{"sha": "294124828050e546b6fe769eaaca43d72b7c74c0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2af0ac2840b9c719483401c5c0c90d589d63b5c3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2af0ac2840b9c719483401c5c0c90d589d63b5c3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2af0ac2840b9c719483401c5c0c90d589d63b5c3", "patch": "@@ -1,3 +1,26 @@\n+Tue Oct 26 01:27:32 1999  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* tree.h (BLOCK_TYPE_TAGS): Remove.\n+\t(BLOCK_END_NOTE): Likewise.\n+\t(BLOCK_LIVE_RANGE_FLAG): Likewise.\n+\t(BLOCK_LIVE_RANGE_START): Likewise.\n+\t(BLOCK_LIVE_RANGE_END): Likewise.\n+\t(tree_block): Remove live_range_flag, live_range_var_flag, and\n+\ttype_tags.  Remove end_note, live_range_start, and live_range_end.\n+\t(remember_end_note): Remove prototype.\n+\t* tree.c (build_block): Don't set BLOCK_TYPE_TAGS.\n+\t* c-decl.c (poplevel): Don't set BLOCK_TYPE_TAGS or call\n+\tremember_end_note.\n+\t* ggc-common.c (ggc_mark_tree_children): Don't mark\n+\tBLOCK_TYPE_TAGS or BLOCK_END_NOTE.\n+\t* integrate.c (adjust_copied_decl_tree): Remove.\n+\t* print-tree.c (print_node): Don't print BLOCK_TYPE_TAGS.\n+\t* stmt.c (last_block_end_note): Remove.\n+\t(init_stmt): Don't add a GC root for it.\n+\t(expand_fixup): Don't set it.\n+\t(remember_end_note): Remove.\n+\t(expand_end_bindings): Don't set last_block_end_note.\n+\n Tue Oct 26 00:41:54 1999  Bernd Schmidt  <bernds@cygnus.co.uk>\n \n \t* reload1.c (reload_reg_free_for_value_p): Show"}, {"sha": "e64f0a7505800e955d9262839431916437d8f833", "filename": "gcc/c-decl.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2af0ac2840b9c719483401c5c0c90d589d63b5c3/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2af0ac2840b9c719483401c5c0c90d589d63b5c3/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=2af0ac2840b9c719483401c5c0c90d589d63b5c3", "patch": "@@ -1055,9 +1055,7 @@ poplevel (keep, reverse, functionbody)\n   if (block != 0)\n     {\n       BLOCK_VARS (block) = decls;\n-      BLOCK_TYPE_TAGS (block) = tags;\n       BLOCK_SUBBLOCKS (block) = subblocks;\n-      remember_end_note (block);\n     }\n \n   /* In each subblock, record that this is its superior.  */"}, {"sha": "5343848fb7e4ded0ca1e87e52c6b02426e8f35fb", "filename": "gcc/ch/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2af0ac2840b9c719483401c5c0c90d589d63b5c3/gcc%2Fch%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2af0ac2840b9c719483401c5c0c90d589d63b5c3/gcc%2Fch%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2FChangeLog?ref=2af0ac2840b9c719483401c5c0c90d589d63b5c3", "patch": "@@ -1,3 +1,8 @@\n+1999-10-26  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* ch-tree.h (remember_end_note): Remove prototype.\n+\t* decl.c (poplevel): Don't call remember_end_note.\n+\n Fri Sep 24 10:48:10 1999  Bernd Schmidt  <bernds@cygnus.co.uk>\n \n \t* ch-tree.h (builtin_function): Don't declare."}, {"sha": "effa886e9122cd0f89d41213f8431ff1ecc6f785", "filename": "gcc/ch/ch-tree.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2af0ac2840b9c719483401c5c0c90d589d63b5c3/gcc%2Fch%2Fch-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2af0ac2840b9c719483401c5c0c90d589d63b5c3/gcc%2Fch%2Fch-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Fch-tree.h?ref=2af0ac2840b9c719483401c5c0c90d589d63b5c3", "patch": "@@ -1120,9 +1120,6 @@ extern void push_function_context               PROTO((void));\n /* in integrate.c */\n extern void output_inline_function              PROTO((tree));\n \n-/* in stmt.c */\n-extern void remember_end_note                   PROTO((tree));\n-\n /* in toplev.c */\n extern void announce_function                   PROTO((tree));\n extern int  floor_log2_wide                     PROTO((unsigned HOST_WIDE_INT));"}, {"sha": "01cf6c48188636b11fa82136c84201aa64cceb4e", "filename": "gcc/ch/decl.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2af0ac2840b9c719483401c5c0c90d589d63b5c3/gcc%2Fch%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2af0ac2840b9c719483401c5c0c90d589d63b5c3/gcc%2Fch%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Fdecl.c?ref=2af0ac2840b9c719483401c5c0c90d589d63b5c3", "patch": "@@ -2940,7 +2940,6 @@ poplevel (keep, reverse, functionbody)\n \t    }\n \n \t  BLOCK_SUBBLOCKS (block) = subblocks;\n-\t  remember_end_note (block);\n \t}\n \n       /* In each subblock, record that this is its superior.  */"}, {"sha": "4f383787f41deed662c89e0bdcf87dca9667a5bf", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2af0ac2840b9c719483401c5c0c90d589d63b5c3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2af0ac2840b9c719483401c5c0c90d589d63b5c3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2af0ac2840b9c719483401c5c0c90d589d63b5c3", "patch": "@@ -1,3 +1,8 @@\n+1999-10-26  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* decl.c (poplevel): Don't set BLOCK_TYPE_TAGS.  Don't call\n+\tremember_end_note.\n+\n 1999-10-24  Mark Mitchell  <mark@codesourcery.com>\n \n \t* decl.c (push_overloaded_decl_1): Use pushdecl."}, {"sha": "329c9f944543201e6ee5b6ea3b89c33cbf9345a6", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2af0ac2840b9c719483401c5c0c90d589d63b5c3/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2af0ac2840b9c719483401c5c0c90d589d63b5c3/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=2af0ac2840b9c719483401c5c0c90d589d63b5c3", "patch": "@@ -1233,30 +1233,22 @@ poplevel (keep, reverse, functionbody)\n \t{\n \t  if (decls || tags || subblocks)\n \t    {\n-\t      if (BLOCK_VARS (block) || BLOCK_TYPE_TAGS (block))\n+\t      if (BLOCK_VARS (block))\n \t\twarning (\"internal compiler error: debugging info corrupted\");\n \n \t      BLOCK_VARS (block) = decls;\n-\t      BLOCK_TYPE_TAGS (block) = tags;\n \n \t      /* We can have previous subblocks and new subblocks when\n \t\t doing fixup_gotos with complex cleanups.  We chain the new\n \t\t subblocks onto the end of any pre-existing subblocks.  */\n \t      BLOCK_SUBBLOCKS (block) = chainon (BLOCK_SUBBLOCKS (block),\n \t\t\t\t\t\t subblocks);\n \t    }\n-\t  /* If we created the block earlier on, and we are just\n-\t     diddling it now, then it already should have a proper\n-\t     BLOCK_END_NOTE value associated with it.  */\n \t}\n       else\n \t{\n \t  BLOCK_VARS (block) = decls;\n-\t  BLOCK_TYPE_TAGS (block) = tags;\n \t  BLOCK_SUBBLOCKS (block) = subblocks;\n-\t  /* Otherwise, for a new block, install a new BLOCK_END_NOTE\n-\t     value.  */ \n-\t  remember_end_note (block);\n \t}\n     }\n "}, {"sha": "f676c45546a166134175268979cf5343b424957f", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2af0ac2840b9c719483401c5c0c90d589d63b5c3/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2af0ac2840b9c719483401c5c0c90d589d63b5c3/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=2af0ac2840b9c719483401c5c0c90d589d63b5c3", "patch": "@@ -1,3 +1,7 @@\n+Tue Oct 26 01:32:19 1999  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* com.c (poplevel): Don't call remember_end_note.\n+\n Fri Oct 15 15:18:12 1999  Greg McGary  <gkm@gnu.org>\n \n \t* top.h (ffe_is_subscript_check_): Remove extern decl."}, {"sha": "522bd24b8e79b288c3b19310a5087e8f303d0206", "filename": "gcc/f/com.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2af0ac2840b9c719483401c5c0c90d589d63b5c3/gcc%2Ff%2Fcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2af0ac2840b9c719483401c5c0c90d589d63b5c3/gcc%2Ff%2Fcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.c?ref=2af0ac2840b9c719483401c5c0c90d589d63b5c3", "patch": "@@ -15112,7 +15112,6 @@ poplevel (keep, reverse, functionbody)\n     {\n       BLOCK_VARS (block) = decls;\n       BLOCK_SUBBLOCKS (block) = subblocks;\n-      remember_end_note (block);\n     }\n \n   /* In each subblock, record that this is its superior.  */"}, {"sha": "2d8631dbd8beefaa1da4d2d196ac986799d87890", "filename": "gcc/ggc-common.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2af0ac2840b9c719483401c5c0c90d589d63b5c3/gcc%2Fggc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2af0ac2840b9c719483401c5c0c90d589d63b5c3/gcc%2Fggc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-common.c?ref=2af0ac2840b9c719483401c5c0c90d589d63b5c3", "patch": "@@ -389,11 +389,9 @@ ggc_mark_tree_children (t)\n \n     case 'b': /* A lexical block.  */\n       ggc_mark_tree (BLOCK_VARS (t));\n-      ggc_mark_tree (BLOCK_TYPE_TAGS (t));\n       ggc_mark_tree (BLOCK_SUBBLOCKS (t));\n       ggc_mark_tree (BLOCK_SUPERCONTEXT (t));\n       ggc_mark_tree (BLOCK_ABSTRACT_ORIGIN (t));\n-      ggc_mark_rtx (BLOCK_END_NOTE (t));\n       break;\n \n     case 'c': /* A constant.  */"}, {"sha": "2bfbecf7f1822eb4cf380a0ef265b2ad0611983a", "filename": "gcc/integrate.c", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2af0ac2840b9c719483401c5c0c90d589d63b5c3/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2af0ac2840b9c719483401c5c0c90d589d63b5c3/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=2af0ac2840b9c719483401c5c0c90d589d63b5c3", "patch": "@@ -63,7 +63,6 @@ extern struct obstack *function_maybepermanent_obstack;\n #endif\n \f\n static rtvec initialize_for_inline\tPROTO((tree));\n-static void adjust_copied_decl_tree\tPROTO((tree));\n static void note_modified_parmregs\tPROTO((rtx, rtx));\n static void integrate_parm_decls\tPROTO((tree, struct inline_remap *,\n \t\t\t\t\t       rtvec));\n@@ -292,30 +291,6 @@ initialize_for_inline (fndecl)\n   return arg_vector;\n }\n \n-/* Adjust the BLOCK_END_NOTE pointers in a given copied DECL tree so that\n-   they all point to the new (copied) rtxs.  */\n-\n-static void\n-adjust_copied_decl_tree (block)\n-     register tree block;\n-{\n-  register tree subblock;\n-  register rtx original_end;\n-\n-  original_end = BLOCK_END_NOTE (block);\n-  if (original_end)\n-    {\n-      BLOCK_END_NOTE (block) = (rtx) NOTE_SOURCE_FILE (original_end);\n-      NOTE_SOURCE_FILE (original_end) = 0;\n-    }\n-\n-  /* Process all subblocks.  */\n-  for (subblock = BLOCK_SUBBLOCKS (block);\n-       subblock;\n-       subblock = TREE_CHAIN (subblock))\n-    adjust_copied_decl_tree (subblock);\n-}\n-\n /* Copy NODE (as with copy_node).  NODE must be a DECL.  Set the\n    DECL_ABSTRACT_ORIGIN for the new accordinly.  */\n "}, {"sha": "e52d7e4ee6807883912141908382c0df831fd5c8", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2af0ac2840b9c719483401c5c0c90d589d63b5c3/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2af0ac2840b9c719483401c5c0c90d589d63b5c3/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=2af0ac2840b9c719483401c5c0c90d589d63b5c3", "patch": "@@ -1,3 +1,8 @@\n+1999-10-26  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* decl.c (poplevel): Don't set BLOCK_TYPE_TAGS or call\n+\tremember_end_note.\n+\n 1999-10-21  Tom Tromey  <tromey@cygnus.com>\n \n \t* jvgenmain.c (main): _Jv_Compiler_Properties now an extern; set"}, {"sha": "ab22211bde41daf2bee8ddf38b4214746b923ff3", "filename": "gcc/java/decl.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2af0ac2840b9c719483401c5c0c90d589d63b5c3/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2af0ac2840b9c719483401c5c0c90d589d63b5c3/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=2af0ac2840b9c719483401c5c0c90d589d63b5c3", "patch": "@@ -1192,9 +1192,7 @@ poplevel (keep, reverse, functionbody)\n   if (block != 0)\n     {\n       BLOCK_VARS (block) = decls;\n-      BLOCK_TYPE_TAGS (block) = NULL_TREE;\n       BLOCK_SUBBLOCKS (block) = subblocks;\n-      remember_end_note (block);\n     }\n \n   /* In each subblock, record that this is its superior.  */"}, {"sha": "4b82b89be3fb803446dbe028925ca4710f0d6442", "filename": "gcc/print-tree.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2af0ac2840b9c719483401c5c0c90d589d63b5c3/gcc%2Fprint-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2af0ac2840b9c719483401c5c0c90d589d63b5c3/gcc%2Fprint-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-tree.c?ref=2af0ac2840b9c719483401c5c0c90d589d63b5c3", "patch": "@@ -528,7 +528,6 @@ print_node (file, prefix, node, indent)\n \n     case 'b':\n       print_node (file, \"vars\", BLOCK_VARS (node), indent + 4);\n-      print_node (file, \"tags\", BLOCK_TYPE_TAGS (node), indent + 4);\n       print_node (file, \"supercontext\", BLOCK_SUPERCONTEXT (node), indent + 4);\n       print_node (file, \"subblocks\", BLOCK_SUBBLOCKS (node), indent + 4);\n       print_node (file, \"chain\", BLOCK_CHAIN (node), indent + 4);"}, {"sha": "53fc1ed09faa474d59b64a237df56ecffadd2e7a", "filename": "gcc/stmt.c", "status": "modified", "additions": 2, "deletions": 21, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2af0ac2840b9c719483401c5c0c90d589d63b5c3/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2af0ac2840b9c719483401c5c0c90d589d63b5c3/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=2af0ac2840b9c719483401c5c0c90d589d63b5c3", "patch": "@@ -64,12 +64,6 @@ struct obstack stmt_obstack;\n #define CASE_VECTOR_PC_RELATIVE 0\n #endif\n \n-/* Each time we expand the end of a binding contour (in `expand_end_bindings')\n-   and we emit a new NOTE_INSN_BLOCK_END note, we save a pointer to it here.\n-   This is used by the `remember_end_note' function to record the endpoint\n-   of each generated block in its associated BLOCK node.  */\n-\n-static rtx last_block_end_note;\n \f\n /* Functions and data structures for expanding case statements.  */\n \n@@ -598,7 +592,6 @@ init_stmt ()\n   int i;\n \n   gcc_obstack_init (&stmt_obstack);\n-  ggc_add_rtx_root (&last_block_end_note, 1);\n \n   for (i = 0; i < 10; i++)\n     {\n@@ -1046,7 +1039,7 @@ expand_fixup (tree_label, rtl_label, last_insn)\n         start_sequence ();\n         start = emit_note (NULL_PTR, NOTE_INSN_BLOCK_BEG);\n \tfixup->before_jump = emit_note (NULL_PTR, NOTE_INSN_DELETED);\n-        last_block_end_note = emit_note (NULL_PTR, NOTE_INSN_BLOCK_END);\n+\temit_note (NULL_PTR, NOTE_INSN_BLOCK_END);\n         fixup->context = block;\n         end_sequence ();\n         emit_insns_after (start, original_before_jump);\n@@ -3345,18 +3338,6 @@ is_eh_region ()\n \t  && block_stack->data.block.exception_region);\n }\n \n-/* Given a pointer to a BLOCK node, save a pointer to the most recently\n-   generated NOTE_INSN_BLOCK_END in the BLOCK_END_NOTE field of the given\n-   BLOCK node.  */\n-\n-void\n-remember_end_note (block)\n-     register tree block;\n-{\n-  BLOCK_END_NOTE (block) = last_block_end_note;\n-  last_block_end_note = NULL_RTX;\n-}\n-\n /* Emit a handler label for a nonlocal goto handler.\n    Also emit code to store the handler label in SLOT before BEFORE_INSN.  */\n \n@@ -3676,7 +3657,7 @@ expand_end_bindings (vars, mark_ends, dont_jump_in)\n      just going out of scope, so they are in scope for their cleanups.  */\n \n   if (mark_ends)\n-    last_block_end_note = emit_note (NULL_PTR, NOTE_INSN_BLOCK_END);\n+    emit_note (NULL_PTR, NOTE_INSN_BLOCK_END);\n   else\n     /* Get rid of the beginning-mark if we don't make an end-mark.  */\n     NOTE_LINE_NUMBER (thisblock->data.block.first_insn) = NOTE_INSN_DELETED;"}, {"sha": "7d01d7cca277579c8af6eca862b38eb3e16a98b0", "filename": "gcc/tree.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2af0ac2840b9c719483401c5c0c90d589d63b5c3/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2af0ac2840b9c719483401c5c0c90d589d63b5c3/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=2af0ac2840b9c719483401c5c0c90d589d63b5c3", "patch": "@@ -3299,7 +3299,6 @@ build_block (vars, tags, subblocks, supercontext, chain)\n {\n   register tree block = make_node (BLOCK);\n   BLOCK_VARS (block) = vars;\n-  BLOCK_TYPE_TAGS (block) = tags;\n   BLOCK_SUBBLOCKS (block) = subblocks;\n   BLOCK_SUPERCONTEXT (block) = supercontext;\n   BLOCK_CHAIN (block) = chain;"}, {"sha": "85cf3bbe31acc8baaccf0bee1dbbf90dd0578ccf", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2af0ac2840b9c719483401c5c0c90d589d63b5c3/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2af0ac2840b9c719483401c5c0c90d589d63b5c3/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=2af0ac2840b9c719483401c5c0c90d589d63b5c3", "patch": "@@ -751,27 +751,13 @@ struct tree_exp\n \f\n /* In a BLOCK node.  */\n #define BLOCK_VARS(NODE) (BLOCK_CHECK (NODE)->block.vars)\n-#define BLOCK_TYPE_TAGS(NODE) (BLOCK_CHECK (NODE)->block.type_tags)\n #define BLOCK_SUBBLOCKS(NODE) (BLOCK_CHECK (NODE)->block.subblocks)\n #define BLOCK_SUPERCONTEXT(NODE) (BLOCK_CHECK (NODE)->block.supercontext)\n /* Note: when changing this, make sure to find the places\n    that use chainon or nreverse.  */\n #define BLOCK_CHAIN(NODE) TREE_CHAIN (NODE)\n #define BLOCK_ABSTRACT_ORIGIN(NODE) (BLOCK_CHECK (NODE)->block.abstract_origin)\n #define BLOCK_ABSTRACT(NODE) (BLOCK_CHECK (NODE)->block.abstract_flag)\n-#define BLOCK_END_NOTE(NODE) (BLOCK_CHECK (NODE)->block.end_note)\n-/* Nonzero means that this block has separate live range regions */\n-#define BLOCK_LIVE_RANGE_FLAG(NOTE) (BLOCK_CHECK (NOTE)->block.live_range_flag)\n-\n-/* Nonzero means that this block has a variable declared in it\n-   that is split into separate live ranges.  */\n-#define BLOCK_LIVE_RANGE_VAR_FLAG(NOTE) (BLOCK_CHECK (NOTE)->block.live_range_var_flag)\n-\n-/* Index for marking the start of the block for live ranges.  */\n-#define BLOCK_LIVE_RANGE_START(NOTE) (BLOCK_CHECK (NOTE)->block.live_range_start)\n-\n-/* Index for marking the end of the block for live ranges.  */\n-#define BLOCK_LIVE_RANGE_END(NOTE) (BLOCK_CHECK (NOTE)->block.live_range_end)\n \n /* Nonzero means that this block is prepared to handle exceptions\n    listed in the BLOCK_VARS slot.  */\n@@ -783,17 +769,11 @@ struct tree_block\n \n   unsigned handler_block_flag : 1;\n   unsigned abstract_flag : 1;\n-  unsigned live_range_flag : 1;\n-  unsigned live_range_var_flag : 1;\n \n   union tree_node *vars;\n-  union tree_node *type_tags;\n   union tree_node *subblocks;\n   union tree_node *supercontext;\n   union tree_node *abstract_origin;\n-  struct rtx_def *end_note;\n-  int live_range_start;\n-  int live_range_end;\n };\n \f\n /* Define fields and accessors for nodes representing data types.  */\n@@ -2439,7 +2419,6 @@ extern void expand_asm_operands\t\tPROTO ((tree, tree, tree, tree, int,\n extern int any_pending_cleanups\t\tPROTO ((int));\n extern void init_stmt\t\t\tPROTO ((void));\n extern void init_stmt_for_function\tPROTO ((void));\n-extern void remember_end_note\t\tPROTO ((tree));\n extern int drop_through_at_end_p\tPROTO ((void));\n extern void expand_start_target_temps\tPROTO ((void));\n extern void expand_end_target_temps\tPROTO ((void));"}]}