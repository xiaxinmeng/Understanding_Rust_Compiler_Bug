{"sha": "684aaf29c03351ad615ef8dd3ff52e1e312704c2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njg0YWFmMjljMDMzNTFhZDYxNWVmOGRkM2ZmNTJlMWUzMTI3MDRjMg==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "dvorakz@suse.cz", "date": "2005-05-17T20:28:30Z"}, "committer": {"name": "Zdenek Dvorak", "email": "rakdver@gcc.gnu.org", "date": "2005-05-17T20:28:30Z"}, "message": "timevar.def (TV_SCEV_CONST): New timevar.\n\n\t* timevar.def (TV_SCEV_CONST): New timevar.\n\t* tree-optimize.c (init_tree_optimization_passes): Add\n\tpass_scev_cprop.\n\t* tree-pass.h (pass_scev_cprop): Declare.\n\t* tree-scalar-evolution.c (scev_const_prop): New function.\n\t* tree-scalar-evolution.h (scev_const_prop): Declare.\n\t* tree-ssa-loop.c (gate_scev_const_prop, pass_scev_cprop):\n\tNew.\n\t* tree-cfg.c (replace_uses_by): Export.\n\t* tree-flow.h (replace_uses_by): Declare.\n\nFrom-SVN: r99860", "tree": {"sha": "67bc73975832051c0cb714b9f0601f6188091223", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/67bc73975832051c0cb714b9f0601f6188091223"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/684aaf29c03351ad615ef8dd3ff52e1e312704c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/684aaf29c03351ad615ef8dd3ff52e1e312704c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/684aaf29c03351ad615ef8dd3ff52e1e312704c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/684aaf29c03351ad615ef8dd3ff52e1e312704c2/comments", "author": null, "committer": null, "parents": [{"sha": "7dc5e63544e434b07f0fcc0737a4caa371e5457b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dc5e63544e434b07f0fcc0737a4caa371e5457b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7dc5e63544e434b07f0fcc0737a4caa371e5457b"}], "stats": {"total": 114, "additions": 113, "deletions": 1}, "files": [{"sha": "4d9766b4dba653430f8f9fa8267e963cfef5856e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/684aaf29c03351ad615ef8dd3ff52e1e312704c2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/684aaf29c03351ad615ef8dd3ff52e1e312704c2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=684aaf29c03351ad615ef8dd3ff52e1e312704c2", "patch": "@@ -1,3 +1,16 @@\n+2005-05-17  Zdenek Dvorak  <dvorakz@suse.cz>\n+\n+\t* timevar.def (TV_SCEV_CONST): New timevar.\n+\t* tree-optimize.c (init_tree_optimization_passes): Add\n+\tpass_scev_cprop.\n+\t* tree-pass.h (pass_scev_cprop): Declare.\n+\t* tree-scalar-evolution.c (scev_const_prop): New function.\n+\t* tree-scalar-evolution.h (scev_const_prop): Declare.\n+\t* tree-ssa-loop.c (gate_scev_const_prop, pass_scev_cprop):\n+\tNew.\n+\t* tree-cfg.c (replace_uses_by): Export.\n+\t* tree-flow.h (replace_uses_by): Declare.\n+\n 2005-05-17  Mike Stump  <mrs@apple.com>\n \n \tYet more Objective-C++..."}, {"sha": "f6f099f0b88b0ae030554037b78183a6c25b69c1", "filename": "gcc/timevar.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/684aaf29c03351ad615ef8dd3ff52e1e312704c2/gcc%2Ftimevar.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/684aaf29c03351ad615ef8dd3ff52e1e312704c2/gcc%2Ftimevar.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftimevar.def?ref=684aaf29c03351ad615ef8dd3ff52e1e312704c2", "patch": "@@ -95,6 +95,7 @@ DEFTIMEVAR (TV_TREE_LOOP\t     , \"tree loop optimization\")\n DEFTIMEVAR (TV_TREE_LOOP_BOUNDS\t     , \"tree loop bounds\")\n DEFTIMEVAR (TV_LIM                   , \"loop invariant motion\")\n DEFTIMEVAR (TV_TREE_LOOP_IVCANON     , \"tree canonical iv\")\n+DEFTIMEVAR (TV_SCEV_CONST            , \"scev constant prop\")\n DEFTIMEVAR (TV_TREE_LOOP_UNSWITCH    , \"tree loop unswitching\")\n DEFTIMEVAR (TV_COMPLETE_UNROLL       , \"complete unrolling\")\n DEFTIMEVAR (TV_TREE_VECTORIZATION    , \"tree vectorization\")"}, {"sha": "c1419827e1fbb1ed0b1b81305d8305940543d2ab", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/684aaf29c03351ad615ef8dd3ff52e1e312704c2/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/684aaf29c03351ad615ef8dd3ff52e1e312704c2/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=684aaf29c03351ad615ef8dd3ff52e1e312704c2", "patch": "@@ -1323,7 +1323,7 @@ tree_can_merge_blocks_p (basic_block a, basic_block b)\n \n /* Replaces all uses of NAME by VAL.  */\n \n-static void\n+void\n replace_uses_by (tree name, tree val)\n {\n   imm_use_iterator imm_iter;"}, {"sha": "3fc5d98ab49307d682142b3f927461071348d14b", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/684aaf29c03351ad615ef8dd3ff52e1e312704c2/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/684aaf29c03351ad615ef8dd3ff52e1e312704c2/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=684aaf29c03351ad615ef8dd3ff52e1e312704c2", "patch": "@@ -543,6 +543,7 @@ extern tree gimplify_build3 (block_stmt_iterator *, enum tree_code,\n \t\t\t     tree, tree, tree, tree);\n extern void init_empty_tree_cfg (void);\n extern void fold_cond_expr_cond (void);\n+extern void replace_uses_by (tree, tree);\n \n /* In tree-pretty-print.c.  */\n extern void dump_generic_bb (FILE *, basic_block, int, int);"}, {"sha": "6dba7bd0f83a9bebfdff93116908102580470c2d", "filename": "gcc/tree-optimize.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/684aaf29c03351ad615ef8dd3ff52e1e312704c2/gcc%2Ftree-optimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/684aaf29c03351ad615ef8dd3ff52e1e312704c2/gcc%2Ftree-optimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-optimize.c?ref=684aaf29c03351ad615ef8dd3ff52e1e312704c2", "patch": "@@ -472,6 +472,7 @@ init_tree_optimization_passes (void)\n   NEXT_PASS (pass_copy_prop);\n   NEXT_PASS (pass_lim);\n   NEXT_PASS (pass_unswitch);\n+  NEXT_PASS (pass_scev_cprop);\n   NEXT_PASS (pass_record_bounds);\n   NEXT_PASS (pass_linear_transform);\n   NEXT_PASS (pass_iv_canon);"}, {"sha": "e2446344142c608411490e712630740dc5e9a637", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/684aaf29c03351ad615ef8dd3ff52e1e312704c2/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/684aaf29c03351ad615ef8dd3ff52e1e312704c2/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=684aaf29c03351ad615ef8dd3ff52e1e312704c2", "patch": "@@ -173,6 +173,7 @@ extern struct tree_opt_pass pass_loop_init;\n extern struct tree_opt_pass pass_lim;\n extern struct tree_opt_pass pass_unswitch;\n extern struct tree_opt_pass pass_iv_canon;\n+extern struct tree_opt_pass pass_scev_cprop;\n extern struct tree_opt_pass pass_record_bounds;\n extern struct tree_opt_pass pass_if_conversion;\n extern struct tree_opt_pass pass_vectorize;"}, {"sha": "4ff50e618904a99b65c58ef2532931dc3c3855d3", "filename": "gcc/tree-scalar-evolution.c", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/684aaf29c03351ad615ef8dd3ff52e1e312704c2/gcc%2Ftree-scalar-evolution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/684aaf29c03351ad615ef8dd3ff52e1e312704c2/gcc%2Ftree-scalar-evolution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.c?ref=684aaf29c03351ad615ef8dd3ff52e1e312704c2", "patch": "@@ -2627,3 +2627,72 @@ scev_finalize (void)\n   BITMAP_FREE (already_instantiated);\n }\n \n+/* Replace ssa names for that scev can prove they are constant by the\n+   appropriate constants.  Most importantly, this takes care of final\n+   value replacement.\n+   \n+   We only consider SSA names defined by phi nodes; rest is left to the\n+   ordinary constant propagation pass.  */\n+\n+void\n+scev_const_prop (void)\n+{\n+  basic_block bb;\n+  tree name, phi, type, ev;\n+  struct loop *loop;\n+  bitmap ssa_names_to_remove = NULL;\n+\n+  if (!current_loops)\n+    return;\n+\n+  FOR_EACH_BB (bb)\n+    {\n+      loop = bb->loop_father;\n+\n+      for (phi = phi_nodes (bb); phi; phi = PHI_CHAIN (phi))\n+\t{\n+\t  name = PHI_RESULT (phi);\n+\n+\t  if (!is_gimple_reg (name))\n+\t    continue;\n+\n+\t  type = TREE_TYPE (name);\n+\n+\t  if (!POINTER_TYPE_P (type)\n+\t      && !INTEGRAL_TYPE_P (type))\n+\t    continue;\n+\n+\t  ev = resolve_mixers (loop, analyze_scalar_evolution (loop, name));\n+\t  if (!is_gimple_min_invariant (ev)\n+\t      || !may_propagate_copy (name, ev))\n+\t    continue;\n+\n+\t  /* Replace the uses of the name.  */\n+\t  replace_uses_by (name, ev);\n+\n+\t  if (!ssa_names_to_remove)\n+\t    ssa_names_to_remove = BITMAP_ALLOC (NULL);\n+\t  bitmap_set_bit (ssa_names_to_remove, SSA_NAME_VERSION (name));\n+\t}\n+    }\n+\n+  /* Remove the ssa names that were replaced by constants.  We do not remove them\n+     directly in the previous cycle, since this invalidates scev cache.  */\n+  if (ssa_names_to_remove)\n+    {\n+      bitmap_iterator bi;\n+      unsigned i;\n+\n+      EXECUTE_IF_SET_IN_BITMAP (ssa_names_to_remove, 0, i, bi)\n+\t{\n+\t  name = ssa_name (i);\n+\t  phi = SSA_NAME_DEF_STMT (name);\n+\n+\t  gcc_assert (TREE_CODE (phi) == PHI_NODE);\n+\t  remove_phi_node (phi, NULL);\n+\t}\n+\n+      BITMAP_FREE (ssa_names_to_remove);\n+      scev_reset ();\n+    }\n+}"}, {"sha": "cfb3a39ae58c04c9f6af008a0d5d4828451bce51", "filename": "gcc/tree-scalar-evolution.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/684aaf29c03351ad615ef8dd3ff52e1e312704c2/gcc%2Ftree-scalar-evolution.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/684aaf29c03351ad615ef8dd3ff52e1e312704c2/gcc%2Ftree-scalar-evolution.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.h?ref=684aaf29c03351ad615ef8dd3ff52e1e312704c2", "patch": "@@ -33,5 +33,6 @@ extern tree instantiate_parameters (struct loop *, tree);\n extern void gather_stats_on_scev_database (void);\n extern void scev_analysis (void);\n extern bool simple_iv (struct loop *, tree, tree, tree *, tree *, bool);\n+void scev_const_prop (void);\n \n #endif  /* GCC_TREE_SCALAR_EVOLUTION_H  */"}, {"sha": "9e38e9199d0fc4a15d9cc370361a8e460b3f991a", "filename": "gcc/tree-ssa-loop.c", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/684aaf29c03351ad615ef8dd3ff52e1e312704c2/gcc%2Ftree-ssa-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/684aaf29c03351ad615ef8dd3ff52e1e312704c2/gcc%2Ftree-ssa-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop.c?ref=684aaf29c03351ad615ef8dd3ff52e1e312704c2", "patch": "@@ -286,6 +286,31 @@ struct tree_opt_pass pass_iv_canon =\n   0\t\t\t\t\t/* letter */\n };\n \n+/* Propagation of constants using scev.  */\n+\n+static bool\n+gate_scev_const_prop (void)\n+{\n+  return true;\n+}\n+\n+struct tree_opt_pass pass_scev_cprop =\n+{\n+  \"sccp\",\t\t\t\t/* name */\n+  gate_scev_const_prop,\t\t\t/* gate */\n+  scev_const_prop,\t       \t\t/* execute */\n+  NULL,\t\t\t\t\t/* sub */\n+  NULL,\t\t\t\t\t/* next */\n+  0,\t\t\t\t\t/* static_pass_number */\n+  TV_SCEV_CONST,\t  \t\t/* tv_id */\n+  PROP_cfg | PROP_ssa,\t\t\t/* properties_required */\n+  0,\t\t\t\t\t/* properties_provided */\n+  0,\t\t\t\t\t/* properties_destroyed */\n+  0,\t\t\t\t\t/* todo_flags_start */\n+  TODO_dump_func,\t\t\t/* todo_flags_finish */\n+  0\t\t\t\t\t/* letter */\n+};\n+\n /* Record bounds on numbers of iterations of loops.  */\n \n static void"}]}