{"sha": "fc3a3580dad5f061d1ac645ddb8b0c78889d10a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmMzYTM1ODBkYWQ1ZjA2MWQxYWM2NDVkZGI4YjBjNzg4ODlkMTBhOA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-10-12T12:33:50Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-10-12T12:33:50Z"}, "message": "[multiple changes]\n\n2016-10-12  Jerome Lambourg  <lambourg@adacore.com>\n\n\t* init.c: Make sure to call finit on x86_64-vx7 to reinitialize\n\tthe FPU unit.\n\n2016-10-12  Arnaud Charlet  <charlet@adacore.com>\n\n\t* lib-load.adb (Load_Unit): Generate an error message even when\n\tError_Node is null.\n\n2016-10-12  Ed Schonberg  <schonberg@adacore.com>\n\n\t* lib-writ.adb (Write_ALI): Disable optimization related to transitive\n\tlimited_with clauses for now.\n\n2016-10-12  Javier Miranda  <miranda@adacore.com>\n\n\t* sem_attr.adb (Analyze_Attribute_Old_Result): Generating C\n\tcode handle 'old located in inlined _postconditions procedures.\n\t(Analyze_Attribute [Attribute_Result]): Handle 'result when\n\trewriting the attribute as a reference to the formal parameter\n\t_Result of inlined _postconditions procedures.\n\n2016-10-12  Tristan Gingold  <gingold@adacore.com>\n\n\t* s-rident.ads (Profile_Info): Remove\n\tMax_Protected_Entries restriction from GNAT_Extended_Ravenscar\n\t* sem_ch9.adb (Analyze_Protected_Type_Declaration):\n\tNot a controlled type on restricted runtimes.\n\n2016-10-12  Gary Dismukes  <dismukes@adacore.com>\n\n\t* sem_ch3.adb (Derive_Subprogram): Add test\n\tfor Is_Controlled of Parent_Type when determining whether an\n\tinherited subprogram with one of the special names Initialize,\n\tAdjust, or Finalize should be derived with its normal name even\n\twhen inherited as a private operation (which would normally\n\tresult in the inherited operation having a special \"hidden\" name).\n\n2016-10-12  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_res.adb (Resolve_Call): If a function call returns a\n\tlimited view of a type replace it with the non-limited view,\n\twhich must be available when compiling call.  This was already\n\tdone elsewhere for non-overloaded calls, but needs to be done\n\tafter resolution if function name is overloaded.\n\n2016-10-12  Javier Miranda  <miranda@adacore.com>\n\n\t* a-tags.adb (IW_Membership [private]): new overloaded\n\tsubprogram that factorizes the code needed to check if a\n\tgiven type implements an interface type.\n\t(IW_Membership\n\t[public]): invoke the new internal IW_Membership function.\n\t(Is_Descendant_At_Same_Level): Fix this routine to implement RM\n\t3.9 (12.3/3)\n\nFrom-SVN: r241036", "tree": {"sha": "fede0c12c626ebdcfb62006d351e6274b14a2242", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fede0c12c626ebdcfb62006d351e6274b14a2242"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc3a3580dad5f061d1ac645ddb8b0c78889d10a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc3a3580dad5f061d1ac645ddb8b0c78889d10a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc3a3580dad5f061d1ac645ddb8b0c78889d10a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc3a3580dad5f061d1ac645ddb8b0c78889d10a8/comments", "author": null, "committer": null, "parents": [{"sha": "7504523eca9e01f30629b7bc22da57546ccd488d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7504523eca9e01f30629b7bc22da57546ccd488d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7504523eca9e01f30629b7bc22da57546ccd488d"}], "stats": {"total": 234, "additions": 179, "deletions": 55}, "files": [{"sha": "fd49a21e1e183a9ffdde47ec9b3d3ddbd6766310", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc3a3580dad5f061d1ac645ddb8b0c78889d10a8/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc3a3580dad5f061d1ac645ddb8b0c78889d10a8/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=fc3a3580dad5f061d1ac645ddb8b0c78889d10a8", "patch": "@@ -1,3 +1,60 @@\n+2016-10-12  Jerome Lambourg  <lambourg@adacore.com>\n+\n+\t* init.c: Make sure to call finit on x86_64-vx7 to reinitialize\n+\tthe FPU unit.\n+\n+2016-10-12  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* lib-load.adb (Load_Unit): Generate an error message even when\n+\tError_Node is null.\n+\n+2016-10-12  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* lib-writ.adb (Write_ALI): Disable optimization related to transitive\n+\tlimited_with clauses for now.\n+\n+2016-10-12  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_attr.adb (Analyze_Attribute_Old_Result): Generating C\n+\tcode handle 'old located in inlined _postconditions procedures.\n+\t(Analyze_Attribute [Attribute_Result]): Handle 'result when\n+\trewriting the attribute as a reference to the formal parameter\n+\t_Result of inlined _postconditions procedures.\n+\n+2016-10-12  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* s-rident.ads (Profile_Info): Remove\n+\tMax_Protected_Entries restriction from GNAT_Extended_Ravenscar\n+\t* sem_ch9.adb (Analyze_Protected_Type_Declaration):\n+\tNot a controlled type on restricted runtimes.\n+\n+2016-10-12  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_ch3.adb (Derive_Subprogram): Add test\n+\tfor Is_Controlled of Parent_Type when determining whether an\n+\tinherited subprogram with one of the special names Initialize,\n+\tAdjust, or Finalize should be derived with its normal name even\n+\twhen inherited as a private operation (which would normally\n+\tresult in the inherited operation having a special \"hidden\" name).\n+\n+2016-10-12  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Call): If a function call returns a\n+\tlimited view of a type replace it with the non-limited view,\n+\twhich must be available when compiling call.  This was already\n+\tdone elsewhere for non-overloaded calls, but needs to be done\n+\tafter resolution if function name is overloaded.\n+\n+2016-10-12  Javier Miranda  <miranda@adacore.com>\n+\n+\t* a-tags.adb (IW_Membership [private]): new overloaded\n+\tsubprogram that factorizes the code needed to check if a\n+\tgiven type implements an interface type.\n+\t(IW_Membership\n+\t[public]): invoke the new internal IW_Membership function.\n+\t(Is_Descendant_At_Same_Level): Fix this routine to implement RM\n+\t3.9 (12.3/3)\n+\n 2016-10-12  Tristan Gingold  <gingold@adacore.com>\n \n \t* exp_ch9.adb (Expand_N_Delay_Relative_Statement): Add support"}, {"sha": "07c2139851ccc8c6d58736a1a6728bfa6057341f", "filename": "gcc/ada/a-tags.adb", "status": "modified", "additions": 62, "deletions": 32, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc3a3580dad5f061d1ac645ddb8b0c78889d10a8/gcc%2Fada%2Fa-tags.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc3a3580dad5f061d1ac645ddb8b0c78889d10a8/gcc%2Fada%2Fa-tags.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-tags.adb?ref=fc3a3580dad5f061d1ac645ddb8b0c78889d10a8", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -61,6 +61,13 @@ package body Ada.Tags is\n    --  table.  This is Inline_Always since it is called from other Inline_\n    --  Always subprograms where we want no out of line code to be generated.\n \n+   function IW_Membership\n+     (Descendant_TSD : Type_Specific_Data_Ptr;\n+      T              : Tag) return Boolean;\n+   --  Subsidiary function of IW_Membership and CW_Membership which factorizes\n+   --  the functionality needed to check if a given descendant implements an\n+   --  interface tag T.\n+\n    function Length (Str : Cstring_Ptr) return Natural;\n    --  Length of string represented by the given pointer (treating the string\n    --  as a C-style string, which is Nul terminated). See comment in body\n@@ -431,27 +438,14 @@ package body Ada.Tags is\n    -- IW_Membership --\n    -------------------\n \n-   --  Canonical implementation of Classwide Membership corresponding to:\n-\n-   --     Obj in Iface'Class\n-\n-   --  Each dispatch table contains a table with the tags of all the\n-   --  implemented interfaces.\n-\n-   --  Obj is in Iface'Class if Iface'Tag is found in the table of interfaces\n-   --  that are contained in the dispatch table referenced by Obj'Tag.\n-\n-   function IW_Membership (This : System.Address; T : Tag) return Boolean is\n+   function IW_Membership\n+     (Descendant_TSD : Type_Specific_Data_Ptr;\n+      T              : Tag) return Boolean\n+   is\n       Iface_Table : Interface_Data_Ptr;\n-      Obj_Base    : System.Address;\n-      Obj_DT      : Dispatch_Table_Ptr;\n-      Obj_TSD     : Type_Specific_Data_Ptr;\n \n    begin\n-      Obj_Base    := Base_Address (This);\n-      Obj_DT      := DT (To_Tag_Ptr (Obj_Base).all);\n-      Obj_TSD     := To_Type_Specific_Data_Ptr (Obj_DT.TSD);\n-      Iface_Table := Obj_TSD.Interfaces_Table;\n+      Iface_Table := Descendant_TSD.Interfaces_Table;\n \n       if Iface_Table /= null then\n          for Id in 1 .. Iface_Table.Nb_Ifaces loop\n@@ -464,15 +458,42 @@ package body Ada.Tags is\n       --  Look for the tag in the ancestor tags table. This is required for:\n       --     Iface_CW in Typ'Class\n \n-      for Id in 0 .. Obj_TSD.Idepth loop\n-         if Obj_TSD.Tags_Table (Id) = T then\n+      for Id in 0 .. Descendant_TSD.Idepth loop\n+         if Descendant_TSD.Tags_Table (Id) = T then\n             return True;\n          end if;\n       end loop;\n \n       return False;\n    end IW_Membership;\n \n+   -------------------\n+   -- IW_Membership --\n+   -------------------\n+\n+   --  Canonical implementation of Classwide Membership corresponding to:\n+\n+   --     Obj in Iface'Class\n+\n+   --  Each dispatch table contains a table with the tags of all the\n+   --  implemented interfaces.\n+\n+   --  Obj is in Iface'Class if Iface'Tag is found in the table of interfaces\n+   --  that are contained in the dispatch table referenced by Obj'Tag.\n+\n+   function IW_Membership (This : System.Address; T : Tag) return Boolean is\n+      Obj_Base : System.Address;\n+      Obj_DT   : Dispatch_Table_Ptr;\n+      Obj_TSD  : Type_Specific_Data_Ptr;\n+\n+   begin\n+      Obj_Base := Base_Address (This);\n+      Obj_DT   := DT (To_Tag_Ptr (Obj_Base).all);\n+      Obj_TSD  := To_Type_Specific_Data_Ptr (Obj_DT.TSD);\n+\n+      return IW_Membership (Obj_TSD, T);\n+   end IW_Membership;\n+\n    -------------------\n    -- Expanded_Name --\n    -------------------\n@@ -721,18 +742,27 @@ package body Ada.Tags is\n      (Descendant : Tag;\n       Ancestor   : Tag) return Boolean\n    is\n-      D_TSD_Ptr : constant Addr_Ptr :=\n-        To_Addr_Ptr (To_Address (Descendant) - DT_Typeinfo_Ptr_Size);\n-      A_TSD_Ptr : constant Addr_Ptr :=\n-        To_Addr_Ptr (To_Address (Ancestor) - DT_Typeinfo_Ptr_Size);\n-      D_TSD     : constant Type_Specific_Data_Ptr :=\n-        To_Type_Specific_Data_Ptr (D_TSD_Ptr.all);\n-      A_TSD     : constant Type_Specific_Data_Ptr :=\n-        To_Type_Specific_Data_Ptr (A_TSD_Ptr.all);\n-\n    begin\n-      return CW_Membership (Descendant, Ancestor)\n-        and then D_TSD.Access_Level = A_TSD.Access_Level;\n+      if Descendant = Ancestor then\n+         return True;\n+\n+      else\n+         declare\n+            D_TSD_Ptr : constant Addr_Ptr :=\n+              To_Addr_Ptr (To_Address (Descendant) - DT_Typeinfo_Ptr_Size);\n+            A_TSD_Ptr : constant Addr_Ptr :=\n+              To_Addr_Ptr (To_Address (Ancestor) - DT_Typeinfo_Ptr_Size);\n+            D_TSD     : constant Type_Specific_Data_Ptr :=\n+              To_Type_Specific_Data_Ptr (D_TSD_Ptr.all);\n+            A_TSD     : constant Type_Specific_Data_Ptr :=\n+              To_Type_Specific_Data_Ptr (A_TSD_Ptr.all);\n+         begin\n+            return D_TSD.Access_Level = A_TSD.Access_Level\n+              and then (CW_Membership (Descendant, Ancestor)\n+                          or else\n+                        IW_Membership (D_TSD, Ancestor));\n+         end;\n+      end if;\n    end Is_Descendant_At_Same_Level;\n \n    ------------"}, {"sha": "e180f3cfb09c0277c46df66d076302a57eb29a86", "filename": "gcc/ada/init.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc3a3580dad5f061d1ac645ddb8b0c78889d10a8/gcc%2Fada%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc3a3580dad5f061d1ac645ddb8b0c78889d10a8/gcc%2Fada%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finit.c?ref=fc3a3580dad5f061d1ac645ddb8b0c78889d10a8", "patch": "@@ -2138,9 +2138,9 @@ __gnat_init_float (void)\n #endif\n #endif\n \n-#if defined (__i386__) && !defined (VTHREADS)\n+#if (defined (__i386__) || defined (__x86_64__)) && !defined (VTHREADS)\n   /* This is used to properly initialize the FPU on an x86 for each\n-     process thread. Is this needed for x86_64 ???  */\n+     process thread. */\n   asm (\"finit\");\n #endif\n "}, {"sha": "c66fd7264d2537ddcfab08e7beaf9cba223b4a3c", "filename": "gcc/ada/lib-load.adb", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc3a3580dad5f061d1ac645ddb8b0c78889d10a8/gcc%2Fada%2Flib-load.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc3a3580dad5f061d1ac645ddb8b0c78889d10a8/gcc%2Fada%2Flib-load.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-load.adb?ref=fc3a3580dad5f061d1ac645ddb8b0c78889d10a8", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -784,7 +784,7 @@ package body Lib.Load is\n \n             --  Generate message if unit required\n \n-            if Required and then Present (Error_Node) then\n+            if Required then\n                if Is_Predefined_File_Name (Fname) then\n \n                   --  This is a predefined library unit which is not present\n@@ -799,7 +799,9 @@ package body Lib.Load is\n                   --  the message about the restriction violation is generated,\n                   --  if needed.\n \n-                  Check_Restricted_Unit (Load_Name, Error_Node);\n+                  if Present (Error_Node) then\n+                     Check_Restricted_Unit (Load_Name, Error_Node);\n+                  end if;\n \n                   Error_Msg_Unit_1 := Uname_Actual;\n                   Error_Msg -- CODEFIX"}, {"sha": "b78e3eb3855283e818de0bbfda2aa87e4b41e58e", "filename": "gcc/ada/lib-writ.adb", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc3a3580dad5f061d1ac645ddb8b0c78889d10a8/gcc%2Fada%2Flib-writ.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc3a3580dad5f061d1ac645ddb8b0c78889d10a8/gcc%2Fada%2Flib-writ.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-writ.adb?ref=fc3a3580dad5f061d1ac645ddb8b0c78889d10a8", "patch": "@@ -1440,9 +1440,21 @@ package body Lib.Writ is\n             --  in the context of the parent, and their file table entries are\n             --  not properly decorated, they are recognized syntactically.\n \n-            if Present (Cunit_Entity (Unum))\n+            --  This optimization is disabled when inline is active, because\n+            --  inline may propose some bodies for inlining, and decide later\n+            --  that they may lead to circularities, in which case they are\n+            --  also left unanalyzed in the file table. There is no simple way\n+            --  to distinguish between the two kinds of unanalyzed entries,\n+            --  so simplest is to skip this step.\n+\n+            --  Actually, this optimization is always disabled, because it\n+            --  breaks gnatfind.\n+\n+            if False -- ???\n+              and then Present (Cunit_Entity (Unum))\n               and then Ekind (Cunit_Entity (Unum)) = E_Void\n               and then Nkind (Unit (Cunit (Unum))) /= N_Subunit\n+              and then not Inline_Active\n             then\n                goto Next_Unit;\n             end if;"}, {"sha": "8f552ba900117b92b227e26586a80d8c596eca31", "filename": "gcc/ada/s-rident.ads", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc3a3580dad5f061d1ac645ddb8b0c78889d10a8/gcc%2Fada%2Fs-rident.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc3a3580dad5f061d1ac645ddb8b0c78889d10a8/gcc%2Fada%2Fs-rident.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-rident.ads?ref=fc3a3580dad5f061d1ac645ddb8b0c78889d10a8", "patch": "@@ -563,7 +563,6 @@ package System.Rident is\n                            No_Task_Hierarchy               => True,\n                            No_Terminate_Alternatives       => True,\n                            Max_Asynchronous_Select_Nesting => True,\n-                           Max_Protected_Entries           => True,\n                            Max_Select_Alternatives         => True,\n                            Max_Task_Entries                => True,\n \n@@ -584,7 +583,6 @@ package System.Rident is\n \n                         Value =>\n                           (Max_Asynchronous_Select_Nesting => 0,\n-                           Max_Protected_Entries           => 1,\n                            Max_Select_Alternatives         => 0,\n                            Max_Task_Entries                => 0,\n                            others                          => 0)));"}, {"sha": "cd7691f213687d0f3a56c1a5d7b8e1eef53b8167", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 26, "deletions": 12, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc3a3580dad5f061d1ac645ddb8b0c78889d10a8/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc3a3580dad5f061d1ac645ddb8b0c78889d10a8/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=fc3a3580dad5f061d1ac645ddb8b0c78889d10a8", "patch": "@@ -1358,13 +1358,23 @@ package body Sem_Attr is\n          --  appear on a subprogram renaming, when the renamed entity is an\n          --  attribute reference.\n \n-         if not Nkind_In (Subp_Decl, N_Abstract_Subprogram_Declaration,\n-                                     N_Entry_Declaration,\n-                                     N_Generic_Subprogram_Declaration,\n-                                     N_Subprogram_Body,\n-                                     N_Subprogram_Body_Stub,\n-                                     N_Subprogram_Declaration,\n-                                     N_Subprogram_Renaming_Declaration)\n+         --  Generating C code the internally built nested _postcondition\n+         --  subprograms are inlined; after expanded, inlined aspects are\n+         --  located in the internal block generated by the frontend.\n+\n+         if Nkind (Subp_Decl) = N_Block_Statement\n+           and then Modify_Tree_For_C\n+           and then In_Inlined_Body\n+         then\n+            null;\n+\n+         elsif not Nkind_In (Subp_Decl, N_Abstract_Subprogram_Declaration,\n+                                        N_Entry_Declaration,\n+                                        N_Generic_Subprogram_Declaration,\n+                                        N_Subprogram_Body,\n+                                        N_Subprogram_Body_Stub,\n+                                        N_Subprogram_Declaration,\n+                                        N_Subprogram_Renaming_Declaration)\n          then\n             return;\n          end if;\n@@ -5276,6 +5286,9 @@ package body Sem_Attr is\n \n          --  Local variables\n \n+         In_Inlined_C_Postcondition : constant Boolean :=\n+           Modify_Tree_For_C and then In_Inlined_Body;\n+\n          Legal   : Boolean;\n          Pref_Id : Entity_Id;\n          Spec_Id : Entity_Id;\n@@ -5309,10 +5322,7 @@ package body Sem_Attr is\n          --  The exception to this rule is when generating C since in this case\n          --  postconditions are inlined.\n \n-         if No (Spec_Id)\n-           and then Modify_Tree_For_C\n-           and then In_Inlined_Body\n-         then\n+         if No (Spec_Id) and then In_Inlined_C_Postcondition then\n             Spec_Id := Entity (P);\n \n          elsif not Legal then\n@@ -5325,7 +5335,11 @@ package body Sem_Attr is\n          --  Instead, rewrite the attribute as a reference to formal parameter\n          --  _Result of the _Postconditions procedure.\n \n-         if Chars (Spec_Id) = Name_uPostconditions then\n+         if Chars (Spec_Id) = Name_uPostconditions\n+           or else\n+             (In_Inlined_C_Postcondition\n+                and then Nkind (Parent (Spec_Id)) = N_Block_Statement)\n+         then\n             Rewrite (N, Make_Identifier (Loc, Name_uResult));\n \n             --  The type of formal parameter _Result is that of the function"}, {"sha": "2bd90717435aac37a796389c321ba50c3b8a52f4", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc3a3580dad5f061d1ac645ddb8b0c78889d10a8/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc3a3580dad5f061d1ac645ddb8b0c78889d10a8/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=fc3a3580dad5f061d1ac645ddb8b0c78889d10a8", "patch": "@@ -14757,9 +14757,10 @@ package body Sem_Ch3 is\n         or else Is_Internal (Parent_Subp)\n         or else Is_Private_Overriding\n         or else Is_Internal_Name (Chars (Parent_Subp))\n-        or else Nam_In (Chars (Parent_Subp), Name_Initialize,\n-                                             Name_Adjust,\n-                                             Name_Finalize)\n+        or else (Is_Controlled (Parent_Type)\n+                  and then Nam_In (Chars (Parent_Subp), Name_Initialize,\n+                                                        Name_Adjust,\n+                                                        Name_Finalize))\n       then\n          Set_Derived_Name;\n "}, {"sha": "7ccf38bdb336998aafe5cc221e2175b804ad0539", "filename": "gcc/ada/sem_ch9.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc3a3580dad5f061d1ac645ddb8b0c78889d10a8/gcc%2Fada%2Fsem_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc3a3580dad5f061d1ac645ddb8b0c78889d10a8/gcc%2Fada%2Fsem_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch9.adb?ref=fc3a3580dad5f061d1ac645ddb8b0c78889d10a8", "patch": "@@ -2090,6 +2090,7 @@ package body Sem_Ch9 is\n \n       if (Abort_Allowed or else Restriction_Active (No_Entry_Queue) = False\n            or else Number_Entries (T) > 1)\n+        and then not Restricted_Profile\n         and then\n           (Has_Entries (T)\n             or else Has_Interrupt_Handler (T)"}, {"sha": "47a6725705191d61ecdbc593f7eed0bdd2d7a486", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc3a3580dad5f061d1ac645ddb8b0c78889d10a8/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc3a3580dad5f061d1ac645ddb8b0c78889d10a8/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=fc3a3580dad5f061d1ac645ddb8b0c78889d10a8", "patch": "@@ -6034,6 +6034,15 @@ package body Sem_Res is\n          end;\n \n       else\n+         --  If the function returns the limited view of type, the call must\n+         --  appear in a context in which the non-limited view is available.\n+         --  As is done in Try_Object_Operation, use the available view to\n+         --  prevent back-end confusion.\n+\n+         if From_Limited_With (Etype (Nam)) then\n+            Set_Etype (Nam, Available_View (Etype (Nam)));\n+         end if;\n+\n          Set_Etype (N, Etype (Nam));\n       end if;\n "}]}