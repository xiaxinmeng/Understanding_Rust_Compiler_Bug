{"sha": "7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2E5YmY5YTRlMGZkYmY5NmFjOTg4ZTE0OTk0MWUyNGYxM2U5N2I4ZA==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2010-07-27T09:59:51Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2010-07-27T09:59:51Z"}, "message": "langhooks-def.h (lhd_init_options, [...]): New.\n\n\t* langhooks-def.h (lhd_init_options, LANG_HOOKS_OPTION_LANG_MASK,\n\tLANG_HOOKS_COMPLAIN_WRONG_LANG_P): New.\n\t(LANG_HOOKS_INIT_OPTIONS): Update default definition.\n\t(LANG_HOOKS_INITIALIZER): Add new hooks.\n\t* langhooks.c (lhd_init_options, lhd_complain_wrong_lang_p): New.\n\t* langhooks.h (struct lang_hooks): Add new hooks option_lang_mask\n\tand complain_wrong_lang_p.  Update init_options prototype.\n\t* c-objc-common.c (c_initialize_diagnostics): First call\n\tc_common_initialize_diagnostics.\n\t* c-objc-common.h (LANG_HOOKS_OPTION_LANG_MASK,\n\tLANG_HOOKS_COMPLAIN_WRONG_LANG_P): Define.\n\t* coretypes.h (struct cl_option, struct cl_decoded_option):\n\tDeclare.\n\t* hooks.c (hook_uint_uint_constcharptrptr_0): Remove.\n\t(hook_uint_void_0): New.\n\t* hooks.h (hook_uint_uint_constcharptrptr_0): Remove.\n\t(hook_uint_void_0): New.\n\t* opts-common.c (decode_cmdline_option,\n\tdecode_cmdline_options_to_array): Also fill in canonical_option\n\tfield.\n\t* opts.c (complain_wrong_lang): Use langhook to determine whether\n\tto complain instead of special-casing LTO.\n\t(decode_options): Separate lang_mask determination with\n\toption_lang_mask hook from call of init_options hook.\n\t* opts.h (struct cl_decoded_option): Add canonical_option.\n\nada:\n\t* gcc-interface/misc.c (gnat_option_lang_mask): New.\n\t(gnat_init_options): Update prototype.  Reconstruct argv array\n\tfrom decoded options.\n\nc-family:\n\t* c-common.h (c_common_option_lang_mask,\n\tc_common_initialize_diagnostics, c_common_complain_wrong_lang_p):\n\tNew.\n\t(c_common_init_options): Update prototype.\n\t* c-opts.c (c_common_option_lang_mask): New.\n\t(c_common_initialize_diagnostics): Split out of\n\tc_common_init_options.\n\t(accept_all_c_family_options, c_common_complain_wrong_lang_p):\n\tNew.\n\t(c_common_init_options): Update prototype.  Use decoded options in\n\tsearch for -lang-asm.\n\ncp:\n\t* cp-objcp-common.c (cxx_initialize_diagnostics): First call\n\tc_common_initialize_diagnostics.\n\t* cp-objcp-common.h (LANG_HOOKS_OPTION_LANG_MASK,\n\tLANG_HOOKS_COMPLAIN_WRONG_LANG_P): Define.\n\nfortran:\n\t* cpp.c (gfc_cpp_init_options): Update prototype.  Use number of\n\tdecoded options in allocating deferred_opt.\n\t* cpp.h (gfc_cpp_init_options): Update prototype.\n\t* f95-lang.c (LANG_HOOKS_OPTION_LANG_MASK): Define.\n\t* gfortran.h (gfc_option_lang_mask): New.\n\t(gfc_init_options): Update prototype.\n\t* options.c (gfc_option_lang_mask): New.\n\t(gfc_init_options): Update prototype.  Pass new arguments to\n\tgfc_cpp_init_options.\n\njava:\n\t* lang.c (java_option_lang_mask): New.\n\t(java_init_options): Update prototype.\n\t(LANG_HOOKS_OPTION_LANG_MASK): Define.\n\nlto:\n\t* lto-lang.c (lto_option_lang_mask, lto_complain_wrong_lang_p):\n\tNew.\n\t(lto_init_options): Update prototype.\n\t(LANG_HOOKS_OPTION_LANG_MASK, LANG_HOOKS_COMPLAIN_WRONG_LANG_P):\n\tDefine.\n\nFrom-SVN: r162560", "tree": {"sha": "cb22bfd268b7388c3f8e1f2942cb855aada62993", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb22bfd268b7388c3f8e1f2942cb855aada62993"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42694189bdade115459859e898e0b78d1cdb033c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42694189bdade115459859e898e0b78d1cdb033c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42694189bdade115459859e898e0b78d1cdb033c"}], "stats": {"total": 394, "additions": 318, "deletions": 76}, "files": [{"sha": "62a2f184c2de63e35d703baa05966c4f8740fe87", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d", "patch": "@@ -1,3 +1,31 @@\n+2010-07-27  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* langhooks-def.h (lhd_init_options, LANG_HOOKS_OPTION_LANG_MASK,\n+\tLANG_HOOKS_COMPLAIN_WRONG_LANG_P): New.\n+\t(LANG_HOOKS_INIT_OPTIONS): Update default definition.\n+\t(LANG_HOOKS_INITIALIZER): Add new hooks.\n+\t* langhooks.c (lhd_init_options, lhd_complain_wrong_lang_p): New.\n+\t* langhooks.h (struct lang_hooks): Add new hooks option_lang_mask\n+\tand complain_wrong_lang_p.  Update init_options prototype.\n+\t* c-objc-common.c (c_initialize_diagnostics): First call\n+\tc_common_initialize_diagnostics.\n+\t* c-objc-common.h (LANG_HOOKS_OPTION_LANG_MASK,\n+\tLANG_HOOKS_COMPLAIN_WRONG_LANG_P): Define.\n+\t* coretypes.h (struct cl_option, struct cl_decoded_option):\n+\tDeclare.\n+\t* hooks.c (hook_uint_uint_constcharptrptr_0): Remove.\n+\t(hook_uint_void_0): New.\n+\t* hooks.h (hook_uint_uint_constcharptrptr_0): Remove.\n+\t(hook_uint_void_0): New.\n+\t* opts-common.c (decode_cmdline_option,\n+\tdecode_cmdline_options_to_array): Also fill in canonical_option\n+\tfield.\n+\t* opts.c (complain_wrong_lang): Use langhook to determine whether\n+\tto complain instead of special-casing LTO.\n+\t(decode_options): Separate lang_mask determination with\n+\toption_lang_mask hook from call of init_options hook.\n+\t* opts.h (struct cl_decoded_option): Add canonical_option.\n+\n 2010-07-27  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/45083"}, {"sha": "a8506db93ed515a2048da7354893b01ce0a1b4a8", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d", "patch": "@@ -1,3 +1,9 @@\n+2010-07-27  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc-interface/misc.c (gnat_option_lang_mask): New.\n+\t(gnat_init_options): Update prototype.  Reconstruct argv array\n+\tfrom decoded options.\n+\n 2010-07-23  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interfaces/utils.c (update_pointer_to): In the unconstrained"}, {"sha": "43ed1571f4abc2c51871d8333b700f0a18f3ea70", "filename": "gcc/ada/gcc-interface/misc.c", "status": "modified", "additions": 35, "deletions": 10, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fmisc.c?ref=7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d", "patch": "@@ -61,7 +61,9 @@\n #include \"gigi.h\"\n \n static bool gnat_init\t\t\t(void);\n-static unsigned int gnat_init_options\t(unsigned int, const char **);\n+static unsigned int gnat_option_lang_mask (void);\n+static void gnat_init_options\t\t(unsigned int,\n+\t\t\t\t\t struct cl_decoded_option *);\n static int gnat_handle_option\t\t(size_t, const char *, int, int);\n static bool gnat_post_options\t\t(const char **);\n static alias_set_type gnat_get_alias_set (tree);\n@@ -85,6 +87,8 @@ static tree gnat_eh_personality\t\t(void);\n #define LANG_HOOKS_IDENTIFIER_SIZE\tsizeof (struct tree_identifier)\n #undef  LANG_HOOKS_INIT\n #define LANG_HOOKS_INIT\t\t\tgnat_init\n+#undef  LANG_HOOKS_OPTION_LANG_MASK\n+#define LANG_HOOKS_OPTION_LANG_MASK\tgnat_option_lang_mask\n #undef  LANG_HOOKS_INIT_OPTIONS\n #define LANG_HOOKS_INIT_OPTIONS\t\tgnat_init_options\n #undef  LANG_HOOKS_HANDLE_OPTION\n@@ -249,22 +253,43 @@ gnat_handle_option (size_t scode, const char *arg, int value,\n   return 1;\n }\n \n-/* Initialize for option processing.  */\n+/* Return language mask for option processing.  */\n \n static unsigned int\n-gnat_init_options (unsigned int argc, const char **argv)\n+gnat_option_lang_mask (void)\n {\n-  gnat_argv = (char **) xmalloc (sizeof (argv[0]));\n-  gnat_argv[0] = xstrdup (argv[0]);     /* name of the command */\n-  gnat_argc = 1;\n+  return CL_Ada;\n+}\n+\n+/* Initialize for option processing.  */\n+\n+static void\n+gnat_init_options (unsigned int decoded_options_count,\n+\t\t   struct cl_decoded_option *decoded_options)\n+{\n+  /* Reconstruct an argv array for use of back_end.adb.\n+\n+     ??? back_end.adb should not rely on this; instead, it should work\n+     with decoded options without such reparsing, to ensure\n+     consistency in how options are decoded.  */\n+  unsigned int i;\n+\n+  save_argv = XNEWVEC (const char *, 2 * decoded_options_count + 1);\n+  save_argc = 0;\n+  for (i = 0; i < decoded_options_count; i++)\n+    {\n+      save_argv[save_argc++] = decoded_options[i].canonical_option[0];\n+      if (decoded_options[i].canonical_option[1] != NULL)\n+\tsave_argv[save_argc++] = decoded_options[i].canonical_option[1];\n+    }\n+  save_argv[save_argc] = NULL;\n \n-  save_argc = argc;\n-  save_argv = argv;\n+  gnat_argv = (char **) xmalloc (sizeof (save_argv[0]));\n+  gnat_argv[0] = xstrdup (save_argv[0]);     /* name of the command */\n+  gnat_argc = 1;\n \n   /* Uninitialized really means uninitialized in Ada.  */\n   flag_zero_initialized_in_bss = 0;\n-\n-  return CL_Ada;\n }\n \n /* Post-switch processing.  */"}, {"sha": "7007582bb9d198da4bb89063b9f74230d6a92dcc", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d", "patch": "@@ -1,3 +1,17 @@\n+2010-07-27  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-common.h (c_common_option_lang_mask,\n+\tc_common_initialize_diagnostics, c_common_complain_wrong_lang_p):\n+\tNew.\n+\t(c_common_init_options): Update prototype.\n+\t* c-opts.c (c_common_option_lang_mask): New.\n+\t(c_common_initialize_diagnostics): Split out of\n+\tc_common_init_options.\n+\t(accept_all_c_family_options, c_common_complain_wrong_lang_p):\n+\tNew.\n+\t(c_common_init_options): Update prototype.  Use decoded options in\n+\tsearch for -lang-asm.\n+\n 2010-07-15  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* c-common.c: Carefully replace TREE_CHAIN with DECL_CHAIN."}, {"sha": "df9cf759a5a767be14c549dd586bc20b78ed80a8", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d", "patch": "@@ -1,6 +1,6 @@\n /* Definitions for c-common.c.\n    Copyright (C) 1987, 1993, 1994, 1995, 1997, 1998,\n-   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -724,7 +724,12 @@ extern void set_compound_literal_name (tree decl);\n \n extern tree build_va_arg (location_t, tree, tree);\n \n-extern unsigned int c_common_init_options (unsigned int, const char **);\n+struct diagnostic_context;\n+\n+extern unsigned int c_common_option_lang_mask (void);\n+extern void c_common_initialize_diagnostics (struct diagnostic_context *);\n+extern bool c_common_complain_wrong_lang_p (const struct cl_option *);\n+extern void c_common_init_options (unsigned int, struct cl_decoded_option *);\n extern bool c_common_post_options (const char **);\n extern bool c_common_init (void);\n extern void c_common_finish (void);"}, {"sha": "ab22cf993b80ad76d94aca520653734c5c9b7a60", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 40, "deletions": 15, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d", "patch": "@@ -281,14 +281,19 @@ warning_as_error_callback (int option_index)\n     }\n }\n \n-/* Common initialization before parsing options.  */\n+/* Return language mask for option parsing.  */\n unsigned int\n-c_common_init_options (unsigned int argc, const char **argv)\n+c_common_option_lang_mask (void)\n {\n   static const unsigned int lang_flags[] = {CL_C, CL_ObjC, CL_CXX, CL_ObjCXX};\n-  unsigned int i, result;\n-  struct cpp_callbacks *cb;\n \n+  return lang_flags[c_language];\n+}\n+\n+/* Common diagnostics initialization.  */\n+void\n+c_common_initialize_diagnostics (diagnostic_context *context)\n+{\n   /* Register callback for warnings enabled by -Werror=.  */\n   register_warning_as_error_callback (warning_as_error_callback);\n \n@@ -298,13 +303,37 @@ c_common_init_options (unsigned int argc, const char **argv)\n     {\n       /* By default wrap lines at 80 characters.  Is getenv\n \t (\"COLUMNS\") preferable?  */\n-      diagnostic_line_cutoff (global_dc) = 80;\n+      diagnostic_line_cutoff (context) = 80;\n       /* By default, emit location information once for every\n \t diagnostic message.  */\n-      diagnostic_prefixing_rule (global_dc) = DIAGNOSTICS_SHOW_PREFIX_ONCE;\n+      diagnostic_prefixing_rule (context) = DIAGNOSTICS_SHOW_PREFIX_ONCE;\n     }\n \n-  global_dc->opt_permissive = OPT_fpermissive;\n+  context->opt_permissive = OPT_fpermissive;\n+}\n+\n+/* Whether options from all C-family languages should be accepted\n+   quietly.  */\n+static bool accept_all_c_family_options = false;\n+\n+/* Return whether to complain about a wrong-language option.  */\n+bool\n+c_common_complain_wrong_lang_p (const struct cl_option *option)\n+{\n+  if (accept_all_c_family_options\n+      && (option->flags & c_family_lang_mask))\n+    return false;\n+\n+  return true;\n+}\n+\n+/* Common initialization before calling option handlers.  */\n+void\n+c_common_init_options (unsigned int decoded_options_count,\n+\t\t       struct cl_decoded_option *decoded_options)\n+{\n+  unsigned int i;\n+  struct cpp_callbacks *cb;\n \n   parse_in = cpp_create_reader (c_dialect_cxx () ? CLK_GNUCXX: CLK_GNUC89,\n \t\t\t\tident_hash, line_table);\n@@ -327,23 +356,19 @@ c_common_init_options (unsigned int argc, const char **argv)\n   /* By default, C99-like requirements for complex multiply and divide.  */\n   flag_complex_method = 2;\n \n-  deferred_opts = XNEWVEC (struct deferred_opt, argc);\n-\n-  result = lang_flags[c_language];\n+  deferred_opts = XNEWVEC (struct deferred_opt, decoded_options_count);\n \n   if (c_language == clk_c)\n     {\n       /* If preprocessing assembly language, accept any of the C-family\n \t front end options since the driver may pass them through.  */\n-      for (i = 1; i < argc; i++)\n-\tif (! strcmp (argv[i], \"-lang-asm\"))\n+      for (i = 1; i < decoded_options_count; i++)\n+\tif (decoded_options[i].opt_index == OPT_lang_asm)\n \t  {\n-\t    result |= CL_C | CL_ObjC | CL_CXX | CL_ObjCXX;\n+\t    accept_all_c_family_options = true;\n \t    break;\n \t  }\n     }\n-\n-  return result;\n }\n \n /* Handle switch SCODE with argument ARG.  VALUE is true, unless no-"}, {"sha": "9351cd5a53996c044b703b65a79b8f029be32be9", "filename": "gcc/c-objc-common.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d/gcc%2Fc-objc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d/gcc%2Fc-objc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-objc-common.c?ref=7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d", "patch": "@@ -184,8 +184,13 @@ has_c_linkage (const_tree decl ATTRIBUTE_UNUSED)\n void\n c_initialize_diagnostics (diagnostic_context *context)\n {\n-  pretty_printer *base = context->printer;\n-  c_pretty_printer *pp = XNEW (c_pretty_printer);\n+  pretty_printer *base;\n+  c_pretty_printer *pp;\n+\n+  c_common_initialize_diagnostics (context);\n+\n+  base = context->printer;\n+  pp = XNEW (c_pretty_printer);\n   memcpy (pp_base (pp), base, sizeof (pretty_printer));\n   pp_c_pretty_printer_init (pp);\n   context->printer = (pretty_printer *) pp;"}, {"sha": "c2b5ffab86ace00414c4f299a9f4d511fced1478", "filename": "gcc/c-objc-common.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d/gcc%2Fc-objc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d/gcc%2Fc-objc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-objc-common.h?ref=7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d", "patch": "@@ -1,5 +1,6 @@\n /* Language hooks common to C and ObjC front ends.\n-   Copyright (C) 2004, 2005, 2007, 2008 Free Software Foundation, Inc.\n+   Copyright (C) 2004, 2005, 2007, 2008, 2009, 2010\n+   Free Software Foundation, Inc.\n    Contributed by Ziemowit Laski  <zlaski@apple.com>\n \n This file is part of GCC.\n@@ -28,6 +29,10 @@ along with GCC; see the file COPYING3.  If not see\n #define LANG_HOOKS_IDENTIFIER_SIZE C_SIZEOF_STRUCT_LANG_IDENTIFIER\n #undef LANG_HOOKS_FINISH\n #define LANG_HOOKS_FINISH c_common_finish\n+#undef LANG_HOOKS_OPTION_LANG_MASK\n+#define LANG_HOOKS_OPTION_LANG_MASK c_common_option_lang_mask\n+#undef LANG_HOOKS_COMPLAIN_WRONG_LANG_P\n+#define LANG_HOOKS_COMPLAIN_WRONG_LANG_P c_common_complain_wrong_lang_p\n #undef LANG_HOOKS_INIT_OPTIONS\n #define LANG_HOOKS_INIT_OPTIONS c_common_init_options\n #undef LANG_HOOKS_INITIALIZE_DIAGNOSTICS"}, {"sha": "25539c3d543f538e6abe9081250ca0d2cd83bb6c", "filename": "gcc/coretypes.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d/gcc%2Fcoretypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d/gcc%2Fcoretypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoretypes.h?ref=7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d", "patch": "@@ -1,5 +1,6 @@\n /* GCC core type declarations.\n-   Copyright (C) 2002, 2004, 2007, 2008, 2009 Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2004, 2007, 2008, 2009, 2010\n+   Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -65,6 +66,8 @@ union section;\n typedef union section section;\n struct cl_target_option;\n struct cl_optimization;\n+struct cl_option;\n+struct cl_decoded_option;\n struct gimple_seq_d;\n typedef struct gimple_seq_d *gimple_seq;\n typedef const struct gimple_seq_d *const_gimple_seq;"}, {"sha": "7829c5b9a7b7bf28f3fd638e103390092a1cf055", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d", "patch": "@@ -1,3 +1,10 @@\n+2010-07-27  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* cp-objcp-common.c (cxx_initialize_diagnostics): First call\n+\tc_common_initialize_diagnostics.\n+\t* cp-objcp-common.h (LANG_HOOKS_OPTION_LANG_MASK,\n+\tLANG_HOOKS_COMPLAIN_WRONG_LANG_P): Define.\n+\n 2010-07-21  Jason Merrill  <jason@redhat.com>\n \n \t* tree.c (cp_tree_equal): Fix CONSTRUCTOR handling."}, {"sha": "0fdb87a4cc4c47d5f41949b660eedae1678ab321", "filename": "gcc/cp/cp-objcp-common.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d/gcc%2Fcp%2Fcp-objcp-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d/gcc%2Fcp%2Fcp-objcp-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.c?ref=7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d", "patch": "@@ -129,8 +129,13 @@ cp_var_mod_type_p (tree type, tree fn)\n void\n cxx_initialize_diagnostics (diagnostic_context *context)\n {\n-  pretty_printer *base = context->printer;\n-  cxx_pretty_printer *pp = XNEW (cxx_pretty_printer);\n+  pretty_printer *base;\n+  cxx_pretty_printer *pp;\n+\n+  c_common_initialize_diagnostics (context);\n+\n+  base = context->printer;\n+  pp = XNEW (cxx_pretty_printer);\n   memcpy (pp_base (pp), base, sizeof (pretty_printer));\n   pp_cxx_pretty_printer_init (pp);\n   context->printer = (pretty_printer *) pp;"}, {"sha": "5e26b335ca50ec356dfcfabdabeb69d3170a06cf", "filename": "gcc/cp/cp-objcp-common.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d/gcc%2Fcp%2Fcp-objcp-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d/gcc%2Fcp%2Fcp-objcp-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.h?ref=7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d", "patch": "@@ -1,5 +1,6 @@\n /* Language hooks common to C++ and ObjC++ front ends.\n-   Copyright (C) 2004, 2005, 2007, 2008, 2009 Free Software Foundation, Inc.\n+   Copyright (C) 2004, 2005, 2007, 2008, 2009, 2010\n+   Free Software Foundation, Inc.\n    Contributed by Ziemowit Laski  <zlaski@apple.com>\n \n This file is part of GCC.\n@@ -40,6 +41,10 @@ extern bool cp_function_decl_explicit_p (tree decl);\n #define LANG_HOOKS_FINISH cxx_finish\n #undef LANG_HOOKS_CLEAR_BINDING_STACK\n #define LANG_HOOKS_CLEAR_BINDING_STACK pop_everything\n+#undef LANG_HOOKS_OPTION_LANG_MASK\n+#define LANG_HOOKS_OPTION_LANG_MASK c_common_option_lang_mask\n+#undef LANG_HOOKS_COMPLAIN_WRONG_LANG_P\n+#define LANG_HOOKS_COMPLAIN_WRONG_LANG_P c_common_complain_wrong_lang_p\n #undef LANG_HOOKS_INIT_OPTIONS\n #define LANG_HOOKS_INIT_OPTIONS c_common_init_options\n #undef LANG_HOOKS_INITIALIZE_DIAGNOSTICS"}, {"sha": "dcff2b2f4e192b2edba141865e45d84f15cb57e6", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d", "patch": "@@ -1,3 +1,15 @@\n+2010-07-27  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* cpp.c (gfc_cpp_init_options): Update prototype.  Use number of\n+\tdecoded options in allocating deferred_opt.\n+\t* cpp.h (gfc_cpp_init_options): Update prototype.\n+\t* f95-lang.c (LANG_HOOKS_OPTION_LANG_MASK): Define.\n+\t* gfortran.h (gfc_option_lang_mask): New.\n+\t(gfc_init_options): Update prototype.\n+\t* options.c (gfc_option_lang_mask): New.\n+\t(gfc_init_options): Update prototype.  Pass new arguments to\n+\tgfc_cpp_init_options.\n+\n 2010-07-26  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/40873"}, {"sha": "b98d83f1b483803d16605c75c8c3c0d55c67b51a", "filename": "gcc/fortran/cpp.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d/gcc%2Ffortran%2Fcpp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d/gcc%2Ffortran%2Fcpp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcpp.c?ref=7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d", "patch": "@@ -304,8 +304,8 @@ gfc_cpp_temporary_file (void)\n }\n \n void\n-gfc_cpp_init_options (unsigned int argc,\n-\t\t      const char **argv ATTRIBUTE_UNUSED)\n+gfc_cpp_init_options (unsigned int decoded_options_count,\n+\t\t      struct cl_decoded_option *decoded_options ATTRIBUTE_UNUSED)\n {\n   /* Do not create any objects from libcpp here. If no\n      preprocessing is requested, this would be wasted\n@@ -337,7 +337,8 @@ gfc_cpp_init_options (unsigned int argc,\n   gfc_cpp_option.prefix = NULL;\n   gfc_cpp_option.sysroot = NULL;\n \n-  gfc_cpp_option.deferred_opt = XNEWVEC (gfc_cpp_deferred_opt_t, argc);\n+  gfc_cpp_option.deferred_opt = XNEWVEC (gfc_cpp_deferred_opt_t,\n+\t\t\t\t\t decoded_options_count);\n   gfc_cpp_option.deferred_opt_count = 0;\n }\n "}, {"sha": "fa4383aefeb0f4224a2b8e85bb50aa7cff6df79c", "filename": "gcc/fortran/cpp.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d/gcc%2Ffortran%2Fcpp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d/gcc%2Ffortran%2Fcpp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcpp.h?ref=7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2008 Free Software Foundation, Inc.\n+/* Copyright (C) 2008, 2010 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -36,7 +36,8 @@ const char *gfc_cpp_temporary_file (void);\n void gfc_cpp_init_0 (void);\n void gfc_cpp_init (void);\n \n-void gfc_cpp_init_options (unsigned int argc, const char **argv);\n+void gfc_cpp_init_options (unsigned int decoded_options_count,\n+\t\t\t   struct cl_decoded_option *decoded_options);\n \n int gfc_cpp_handle_option(size_t scode, const char *arg, int value);\n "}, {"sha": "70548bf2b256ebc16f62b14deabce1aa3f2ae162", "filename": "gcc/fortran/f95-lang.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d/gcc%2Ffortran%2Ff95-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d/gcc%2Ffortran%2Ff95-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ff95-lang.c?ref=7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d", "patch": "@@ -101,6 +101,7 @@ static void gfc_init_ts (void);\n #undef LANG_HOOKS_INIT\n #undef LANG_HOOKS_FINISH\n #undef LANG_HOOKS_WRITE_GLOBALS\n+#undef LANG_HOOKS_OPTION_LANG_MASK\n #undef LANG_HOOKS_INIT_OPTIONS\n #undef LANG_HOOKS_HANDLE_OPTION\n #undef LANG_HOOKS_POST_OPTIONS\n@@ -130,6 +131,7 @@ static void gfc_init_ts (void);\n #define LANG_HOOKS_INIT                 gfc_init\n #define LANG_HOOKS_FINISH               gfc_finish\n #define LANG_HOOKS_WRITE_GLOBALS\tgfc_write_global_declarations\n+#define LANG_HOOKS_OPTION_LANG_MASK\tgfc_option_lang_mask\n #define LANG_HOOKS_INIT_OPTIONS         gfc_init_options\n #define LANG_HOOKS_HANDLE_OPTION        gfc_handle_option\n #define LANG_HOOKS_POST_OPTIONS\t\tgfc_post_options"}, {"sha": "f082d5e5974305df8c46bd5b773289c37892494b", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d", "patch": "@@ -2355,7 +2355,9 @@ void gfc_done_2 (void);\n int get_c_kind (const char *, CInteropKind_t *);\n \n /* options.c */\n-unsigned int gfc_init_options (unsigned int, const char **);\n+unsigned int gfc_option_lang_mask (void);\n+void gfc_init_options (unsigned int,\n+\t\t       struct cl_decoded_option *);\n int gfc_handle_option (size_t, const char *, int, int);\n bool gfc_post_options (const char **);\n "}, {"sha": "337802e35a7805fca64e446d8b794da5856ca416", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d", "patch": "@@ -53,11 +53,21 @@ set_default_std_flags (void)\n }\n \n \n+/* Return language mask for Fortran options.  */\n+\n+unsigned int\n+gfc_option_lang_mask (void)\n+{\n+  return CL_Fortran;\n+}\n+\n+\n /* Get ready for options handling. Keep in sync with\n    libgfortran/runtime/compile_options.c (init_compile_options). */\n \n-unsigned int\n-gfc_init_options (unsigned int argc, const char **argv)\n+void\n+gfc_init_options (unsigned int decoded_options_count,\n+\t\t  struct cl_decoded_option *decoded_options)\n {\n   gfc_source_file = NULL;\n   gfc_option.module_dir = NULL;\n@@ -143,9 +153,7 @@ gfc_init_options (unsigned int argc, const char **argv)\n   flag_short_enums = targetm.default_short_enums ();\n \n   /* Initialize cpp-related options.  */\n-  gfc_cpp_init_options(argc, argv);\n-\n-  return CL_Fortran;\n+  gfc_cpp_init_options (decoded_options_count, decoded_options);\n }\n \n "}, {"sha": "355509ad7b9db29c80fa2bfdbd60db74f4f723ab", "filename": "gcc/hooks.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d/gcc%2Fhooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d/gcc%2Fhooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.c?ref=7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d", "patch": "@@ -1,5 +1,5 @@\n /* General-purpose hooks.\n-   Copyright (C) 2002, 2003, 2004, 2005, 2007, 2008, 2009\n+   Copyright (C) 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010\n    Free Software Foundation, Inc.\n \n    This program is free software; you can redistribute it and/or modify it\n@@ -176,8 +176,7 @@ hook_int_size_t_constcharptr_int_0 (size_t a ATTRIBUTE_UNUSED,\n }\n \n unsigned int\n-hook_uint_uint_constcharptrptr_0 (unsigned int a ATTRIBUTE_UNUSED,\n-\t\t\t\t  const char **b ATTRIBUTE_UNUSED)\n+hook_uint_void_0 (void)\n {\n   return 0;\n }"}, {"sha": "db1da30398d98c5201f62edbbfc290315ded1020", "filename": "gcc/hooks.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d/gcc%2Fhooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d/gcc%2Fhooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.h?ref=7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d", "patch": "@@ -1,5 +1,5 @@\n /* General-purpose hooks.\n-   Copyright (C) 2002, 2003, 2004, 2005, 2007, 2008, 2009\n+   Copyright (C) 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010\n    Free Software Foundation, Inc.\n \n    This program is free software; you can redistribute it and/or modify it\n@@ -73,7 +73,7 @@ extern tree hook_tree_tree_tree_tree_null (tree, tree, tree);\n extern tree hook_tree_tree_tree_tree_3rd_identity (tree, tree, tree);\n extern tree hook_tree_tree_int_treep_bool_null (tree, int, tree *, bool);\n \n-extern unsigned hook_uint_uint_constcharptrptr_0 (unsigned, const char **);\n+extern unsigned hook_uint_void_0 (void);\n \n extern bool default_can_output_mi_thunk_no_vcall (const_tree, HOST_WIDE_INT,\n \t\t\t\t\t\t  HOST_WIDE_INT, const_tree);"}, {"sha": "47c5e0f133226604816a1ca2bd502116177bafc5", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d", "patch": "@@ -1,3 +1,9 @@\n+2010-07-27  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* lang.c (java_option_lang_mask): New.\n+\t(java_init_options): Update prototype.\n+\t(LANG_HOOKS_OPTION_LANG_MASK): Define.\n+\n 2010-07-15  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* java-tree.h: Carefully replace TREE_CHAIN with DECL_CHAIN."}, {"sha": "c084cb88a7cc46c8cdbec7eae1e0b352a5b46313", "filename": "gcc/java/lang.c", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d", "patch": "@@ -46,7 +46,8 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n \n static bool java_init (void);\n static void java_finish (void);\n-static unsigned int java_init_options (unsigned int, const char **);\n+static unsigned int java_option_lang_mask (void);\n+static void java_init_options (unsigned int, struct cl_decoded_option *);\n static bool java_post_options (const char **);\n \n static int java_handle_option (size_t scode, const char *arg, int value, int kind);\n@@ -121,6 +122,8 @@ struct GTY(()) language_function {\n #define LANG_HOOKS_INIT java_init\n #undef LANG_HOOKS_FINISH\n #define LANG_HOOKS_FINISH java_finish\n+#undef LANG_HOOKS_OPTION_LANG_MASK\n+#define LANG_HOOKS_OPTION_LANG_MASK java_option_lang_mask\n #undef LANG_HOOKS_INIT_OPTIONS\n #define LANG_HOOKS_INIT_OPTIONS java_init_options\n #undef LANG_HOOKS_HANDLE_OPTION\n@@ -525,8 +528,14 @@ lang_init_source (int level)\n }\n \n static unsigned int\n-java_init_options (unsigned int argc ATTRIBUTE_UNUSED,\n-\t\t   const char **argv ATTRIBUTE_UNUSED)\n+java_option_lang_mask (void)\n+{\n+  return CL_Java;\n+}\n+\n+static void\n+java_init_options (unsigned int decoded_options_count ATTRIBUTE_UNUSED,\n+\t\t   struct cl_decoded_option *decoded_options ATTRIBUTE_UNUSED)\n {\n   flag_bounds_check = 1;\n   flag_exceptions = 1;\n@@ -542,8 +551,6 @@ java_init_options (unsigned int argc ATTRIBUTE_UNUSED,\n   flag_evaluation_order = 1;\n \n   jcf_path_init ();\n-\n-  return CL_Java;\n }\n \n /* Post-switch processing.  */"}, {"sha": "504fdad59204b3cf82eb814a85d516ff3f727cf7", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d", "patch": "@@ -1,5 +1,5 @@\n /* Default macros to initialize the lang_hooks data structure.\n-   Copyright 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n+   Copyright 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n    Free Software Foundation, Inc.\n    Contributed by Alexandre Oliva  <aoliva@redhat.com>\n \n@@ -66,6 +66,9 @@ extern tree lhd_builtin_function (tree);\n \n /* Declarations of default tree inlining hooks.  */\n extern void lhd_initialize_diagnostics (struct diagnostic_context *);\n+extern void lhd_init_options (unsigned int,\n+\t\t\t      struct cl_decoded_option *);\n+extern bool lhd_complain_wrong_lang_p (const struct cl_option *);\n extern tree lhd_callgraph_analyze_expr (tree *, int *);\n \n \n@@ -82,8 +85,10 @@ extern void lhd_omp_firstprivatize_type_sizes (struct gimplify_omp_ctx *,\n #define LANG_HOOKS_INIT\t\t\thook_bool_void_false\n #define LANG_HOOKS_FINISH\t\tlhd_do_nothing\n #define LANG_HOOKS_PARSE_FILE\t\tlhd_do_nothing_i\n-#define LANG_HOOKS_INIT_OPTIONS\t\thook_uint_uint_constcharptrptr_0\n+#define LANG_HOOKS_OPTION_LANG_MASK\thook_uint_void_0\n+#define LANG_HOOKS_INIT_OPTIONS\t\tlhd_init_options\n #define LANG_HOOKS_INITIALIZE_DIAGNOSTICS lhd_initialize_diagnostics\n+#define LANG_HOOKS_COMPLAIN_WRONG_LANG_P lhd_complain_wrong_lang_p\n #define LANG_HOOKS_HANDLE_OPTION\thook_int_size_t_constcharptr_int_0\n #define LANG_HOOKS_MISSING_ARGUMENT\thook_bool_constcharptr_size_t_false\n #define LANG_HOOKS_POST_OPTIONS\t\tlhd_post_options\n@@ -258,8 +263,10 @@ extern void lhd_end_section (void);\n   LANG_HOOKS_IDENTIFIER_SIZE, \\\n   LANG_HOOKS_FREE_LANG_DATA, \\\n   LANG_HOOKS_TREE_SIZE, \\\n+  LANG_HOOKS_OPTION_LANG_MASK, \\\n   LANG_HOOKS_INIT_OPTIONS, \\\n   LANG_HOOKS_INITIALIZE_DIAGNOSTICS, \\\n+  LANG_HOOKS_COMPLAIN_WRONG_LANG_P, \\\n   LANG_HOOKS_HANDLE_OPTION, \\\n   LANG_HOOKS_MISSING_ARGUMENT, \\\n   LANG_HOOKS_POST_OPTIONS, \\"}, {"sha": "1becd557c8a3efb6c54138d1c201bf25bff1dc7e", "filename": "gcc/langhooks.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d", "patch": "@@ -337,6 +337,20 @@ lhd_initialize_diagnostics (struct diagnostic_context *ctx ATTRIBUTE_UNUSED)\n {\n }\n \n+/* Called to perform language-specific options initialization.  */\n+void\n+lhd_init_options (unsigned int decoded_options_count ATTRIBUTE_UNUSED,\n+\t\t  struct cl_decoded_option *decoded_options ATTRIBUTE_UNUSED)\n+{\n+}\n+\n+/* By default, always complain about options for the wrong language.  */\n+bool\n+lhd_complain_wrong_lang_p (const struct cl_option *option ATTRIBUTE_UNUSED)\n+{\n+  return true;\n+}\n+\n /* The default function to print out name of current function that caused\n    an error.  */\n void"}, {"sha": "4702d143daadf6838ec63a839632c2da622a67be", "filename": "gcc/langhooks.h", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d", "patch": "@@ -1,5 +1,5 @@\n /* The lang_hooks data structure.\n-   Copyright 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n+   Copyright 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -269,15 +269,24 @@ struct lang_hooks\n      on unrecognized codes.  */\n   size_t (*tree_size) (enum tree_code);\n \n-  /* The first callback made to the front end, for simple\n-     initialization needed before any calls to handle_option.  Return\n-     the language mask to filter the switch array with.  */\n-  unsigned int (*init_options) (unsigned int argc, const char **argv);\n+  /* Return the language mask used for converting argv into a sequence\n+     of options.  */\n+  unsigned int (*option_lang_mask) (void);\n+\n+  /* After the initialize_diagnostics hook is called, do any simple\n+     initialization needed before any calls to handle_option.  */\n+  void (*init_options) (unsigned int decoded_options_count,\n+\t\t\tstruct cl_decoded_option *decoded_options);\n \n   /* Callback used to perform language-specific initialization for the\n      global diagnostic context structure.  */\n   void (*initialize_diagnostics) (struct diagnostic_context *);\n \n+  /* Return true if a warning should be given about option OPTION,\n+     which is for the wrong language, false if it should be quietly\n+     ignored.  */\n+  bool (*complain_wrong_lang_p) (const struct cl_option *option);\n+\n   /* Handle the switch CODE, which has real type enum opt_code from\n      options.h.  If the switch takes an argument, it is passed in ARG\n      which points to permanent storage.  The handler is responsible for"}, {"sha": "28b594977e4adfd4a2cc8ed2d5b81abde042edc5", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d", "patch": "@@ -1,3 +1,11 @@\n+2010-07-27  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* lto-lang.c (lto_option_lang_mask, lto_complain_wrong_lang_p):\n+\tNew.\n+\t(lto_init_options): Update prototype.\n+\t(LANG_HOOKS_OPTION_LANG_MASK, LANG_HOOKS_COMPLAIN_WRONG_LANG_P):\n+\tDefine.\n+\n 2010-07-10   Andi Kleen <ak@linux.intel.com>\n \n \tPR lto/44992"}, {"sha": "0915ac0ad409437257d3065e221ad30df59722c8", "filename": "gcc/lto/lto-lang.c", "status": "modified", "additions": 26, "deletions": 4, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d/gcc%2Flto%2Flto-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d/gcc%2Flto%2Flto-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-lang.c?ref=7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d", "patch": "@@ -595,16 +595,34 @@ static GTY(()) tree registered_builtin_fndecls;\n /* Language hooks.  */\n \n static unsigned int\n-lto_init_options (unsigned int argc ATTRIBUTE_UNUSED,\n-\t\t  const char **argv ATTRIBUTE_UNUSED)\n+lto_option_lang_mask (void)\n+{\n+  return CL_LTO;\n+}\n+\n+static bool\n+lto_complain_wrong_lang_p (const struct cl_option *option ATTRIBUTE_UNUSED)\n+{\n+  /* The LTO front end inherits all the options from the first front\n+     end that was used.  However, not all the original front end\n+     options make sense in LTO.\n+\n+     A real solution would be to filter this in collect2, but collect2\n+     does not have access to all the option attributes to know what to\n+     filter.  So, in lto1 we silently accept inherited flags and do\n+     nothing about it.  */\n+  return false;\n+}\n+\n+static void\n+lto_init_options (unsigned int decoded_options_count ATTRIBUTE_UNUSED,\n+\t\t  struct cl_decoded_option *decoded_options ATTRIBUTE_UNUSED)\n {\n   /* By default, C99-like requirements for complex multiply and divide.\n      ???  Until the complex method is encoded in the IL this is the only\n      safe choice.  This will pessimize Fortran code with LTO unless\n      people specify a complex method manually or use -ffast-math.  */\n   flag_complex_method = 2;\n-\n-  return CL_LTO;\n }\n \n /* Handle command-line option SCODE.  If the option takes an argument, it is\n@@ -1116,6 +1134,10 @@ static void lto_init_ts (void)\n \n #undef LANG_HOOKS_NAME\n #define LANG_HOOKS_NAME \"GNU GIMPLE\"\n+#undef LANG_HOOKS_OPTION_LANG_MASK\n+#define LANG_HOOKS_OPTION_LANG_MASK lto_option_lang_mask\n+#undef LANG_HOOKS_COMPLAIN_WRONG_LANG_P\n+#define LANG_HOOKS_COMPLAIN_WRONG_LANG_P lto_complain_wrong_lang_p\n #undef LANG_HOOKS_INIT_OPTIONS\n #define LANG_HOOKS_INIT_OPTIONS lto_init_options\n #undef LANG_HOOKS_HANDLE_OPTION"}, {"sha": "6b24b37ce5d19a906ceb2ab04869b076989feb93", "filename": "gcc/opts-common.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d/gcc%2Fopts-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d/gcc%2Fopts-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts-common.c?ref=7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d", "patch": "@@ -245,10 +245,14 @@ decode_cmdline_option (const char **argv, unsigned int lang_mask,\n     {\n     case 1:\n       decoded->orig_option_with_args_text = argv[0];\n+      decoded->canonical_option[0] = argv[0];\n+      decoded->canonical_option[1] = NULL;\n       break;\n     case 2:\n       decoded->orig_option_with_args_text = concat (argv[0], \" \",\n \t\t\t\t\t\t    argv[1], NULL);\n+      decoded->canonical_option[0] = argv[0];\n+      decoded->canonical_option[1] = argv[1];\n       break;\n     default:\n       gcc_unreachable ();\n@@ -279,6 +283,8 @@ decode_cmdline_options_to_array (unsigned int argc, const char **argv,\n   opt_array[0].opt_index = OPT_SPECIAL_program_name;\n   opt_array[0].arg = argv[0];\n   opt_array[0].orig_option_with_args_text = argv[0];\n+  opt_array[0].canonical_option[0] = argv[0];\n+  opt_array[0].canonical_option[1] = NULL;\n   opt_array[0].value = 1;\n   opt_array[0].errors = 0;\n   num_decoded_options = 1;\n@@ -293,6 +299,8 @@ decode_cmdline_options_to_array (unsigned int argc, const char **argv,\n \t  opt_array[num_decoded_options].opt_index = OPT_SPECIAL_input_file;\n \t  opt_array[num_decoded_options].arg = opt;\n \t  opt_array[num_decoded_options].orig_option_with_args_text = opt;\n+\t  opt_array[num_decoded_options].canonical_option[0] = opt;\n+\t  opt_array[num_decoded_options].canonical_option[1] = NULL;\n \t  opt_array[num_decoded_options].value = 1;\n \t  opt_array[num_decoded_options].errors = 0;\n \t  num_decoded_options++;"}, {"sha": "2016ed4d44116ea0a12bc3cd53cfb069c7a3a2af", "filename": "gcc/opts.c", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d", "patch": "@@ -416,15 +416,7 @@ complain_wrong_lang (const char *text, const struct cl_option *option,\n {\n   char *ok_langs, *bad_lang;\n \n-  /* The LTO front end inherits all the options from the first front\n-     end that was used.  However, not all the original front end\n-     options make sense in LTO.\n-\n-     A real solution would be to filter this in collect2, but collect2\n-     does not have access to all the option attributes to know what to\n-     filter.  So, in lto1 we silently accept inherited flags and do\n-     nothing about it.  */\n-  if (lang_mask & CL_LTO)\n+  if (!lang_hooks.complain_wrong_lang_p (option))\n     return;\n \n   ok_langs = write_langs (option->flags);\n@@ -715,7 +707,7 @@ decode_options (unsigned int argc, const char **argv,\n   if (first_time_p)\n     {\n       /* Perform language-specific options initialization.  */\n-      initial_lang_mask = lang_mask = lang_hooks.init_options (argc, argv);\n+      initial_lang_mask = lang_mask = lang_hooks.option_lang_mask ();\n \n       lang_hooks.initialize_diagnostics (global_dc);\n \n@@ -732,6 +724,9 @@ decode_options (unsigned int argc, const char **argv,\n \n   decode_cmdline_options_to_array (argc, argv, lang_mask,\n \t\t\t\t   decoded_options, decoded_options_count);\n+  if (first_time_p)\n+    /* Perform language-specific options initialization.  */\n+    lang_hooks.init_options (*decoded_options_count, *decoded_options);\n \n   /* Scan to see what optimization level has been specified.  That will\n      determine the default value of many flags.  */"}, {"sha": "fbc86b1c36ea518fca967e182e11bb79db79a209", "filename": "gcc/opts.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d/gcc%2Fopts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d/gcc%2Fopts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.h?ref=7a9bf9a4e0fdbf96ac988e149941e24f13e97b8d", "patch": "@@ -117,6 +117,14 @@ struct cl_decoded_option\n      -frecord-gcc-switches.  */\n   const char *orig_option_with_args_text;\n \n+  /* The canonical form of the option and its argument, for when it is\n+     necessary to reconstruct argv elements (in particular, for\n+     processing specs and passing options to subprocesses from the\n+     driver).  The first element of this array is non-NULL; the second\n+     is NULL if the canonical form uses only one argv element,\n+     non-NULL otherwise.  */\n+  const char *canonical_option[2];\n+\n   /* For a boolean option, 1 for the true case and 0 for the \"no-\"\n      case.  For an unsigned integer option, the value of the\n      argument.  1 in all other cases.  */"}]}