{"sha": "7dd2f19b2fadf4edb3a7277563b5b1ee59f8723c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2RkMmYxOWIyZmFkZjRlZGIzYTcyNzc1NjNiNWIxZWU1OWY4NzIzYw==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2005-06-01T06:58:41Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2005-06-01T06:58:41Z"}, "message": "sh.c (multcosts): Check sh_multcost rather than sh_multcost_str.\n\n\t* config/sh/sh.c (multcosts): Check sh_multcost rather than\n\tsh_multcost_str.\n\t(sh_register_move_cost): Likewise sh_gettrcost and sh_gettrcost_str.\n\t(sh_multcost_str, sh_gettrcost_str, sh_div_str, sh_divsi3_libfunc)\n\t(cut2_workaround_str): Delete.\n\t* config/sh/sh.h (SUBTARGET_OPTIONS, TARGET_OPTIONS)\n\t(TARGET_SH5_CUT2_WORKAROUND, sh_multcost_str, sh_gettrcost_str)\n\t(sh_div_str, sh_divsi3_libfunc, cut2_workaround_str): Delete.\n\t* config/sh/sh.opt (mcut2-workaround, mdiv=, mdivsi3_libfunc=)\n\t(mgettrcost=, multcost=): New options.\n\nFrom-SVN: r100431", "tree": {"sha": "d20a11e04f4e271a377feed29e374c2deede32f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d20a11e04f4e271a377feed29e374c2deede32f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7dd2f19b2fadf4edb3a7277563b5b1ee59f8723c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dd2f19b2fadf4edb3a7277563b5b1ee59f8723c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7dd2f19b2fadf4edb3a7277563b5b1ee59f8723c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dd2f19b2fadf4edb3a7277563b5b1ee59f8723c/comments", "author": null, "committer": null, "parents": [{"sha": "5c60a0172d9cce62e61afd5d851106775a1a48e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c60a0172d9cce62e61afd5d851106775a1a48e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c60a0172d9cce62e61afd5d851106775a1a48e6"}], "stats": {"total": 72, "additions": 37, "deletions": 35}, "files": [{"sha": "4caea635b7ffb877a1e95343e2c63a4ac6617899", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dd2f19b2fadf4edb3a7277563b5b1ee59f8723c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dd2f19b2fadf4edb3a7277563b5b1ee59f8723c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7dd2f19b2fadf4edb3a7277563b5b1ee59f8723c", "patch": "@@ -1,3 +1,16 @@\n+2005-06-01  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* config/sh/sh.c (multcosts): Check sh_multcost rather than\n+\tsh_multcost_str.\n+\t(sh_register_move_cost): Likewise sh_gettrcost and sh_gettrcost_str.\n+\t(sh_multcost_str, sh_gettrcost_str, sh_div_str, sh_divsi3_libfunc)\n+\t(cut2_workaround_str): Delete.\n+\t* config/sh/sh.h (SUBTARGET_OPTIONS, TARGET_OPTIONS)\n+\t(TARGET_SH5_CUT2_WORKAROUND, sh_multcost_str, sh_gettrcost_str)\n+\t(sh_div_str, sh_divsi3_libfunc, cut2_workaround_str): Delete.\n+\t* config/sh/sh.opt (mcut2-workaround, mdiv=, mdivsi3_libfunc=)\n+\t(mgettrcost=, multcost=): New options.\n+\n 2005-06-01  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* opts.h (cl_option_state): New structure."}, {"sha": "e686645e496f74bf302444dafe07fbcd70c3745b", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dd2f19b2fadf4edb3a7277563b5b1ee59f8723c/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dd2f19b2fadf4edb3a7277563b5b1ee59f8723c/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=7dd2f19b2fadf4edb3a7277563b5b1ee59f8723c", "patch": "@@ -1965,8 +1965,8 @@ addsubcosts (rtx x)\n static inline int\n multcosts (rtx x ATTRIBUTE_UNUSED)\n {\n-  if (*sh_multcost_str)\n-    return atoi (sh_multcost_str);\n+  if (sh_multcost >= 0)\n+    return sh_multcost;\n   if (TARGET_SHMEDIA)\n     /* ??? We have a mul insn, but it has a latency of three, and doesn't\n        accept constants.  Ideally, we would use a cost of one or two and\n@@ -10069,8 +10069,8 @@ sh_register_move_cost (enum machine_mode mode,\n   if (TARGET_SHMEDIA\n       && ((srcclass) == TARGET_REGS || (srcclass) == SIBCALL_REGS))\n     {\n-      if (*sh_gettrcost_str)\n-\treturn atoi (sh_gettrcost_str);\n+      if (sh_gettrcost >= 0)\n+\treturn sh_gettrcost;\n       else if (!TARGET_PT_FIXED)\n \treturn 100;\n     }\n@@ -11233,11 +11233,6 @@ shmedia_prepare_call_address (rtx fnaddr, int is_sibcall)\n   return fnaddr;\n }\n \n-const char *sh_multcost_str = \"\";\n-const char *sh_gettrcost_str = \"\";\n-const char *sh_div_str = \"\";\n-const char *sh_divsi3_libfunc = \"\";\n-const char *cut2_workaround_str = \"\";\n enum sh_divide_strategy_e sh_div_strategy = SH_DIV_STRATEGY_DEFAULT;\n \n /* This defines the storage for the variable part of a -mboard= option."}, {"sha": "a6652dfa72a463bf70e12ca0c2f583b36b20033c", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dd2f19b2fadf4edb3a7277563b5b1ee59f8723c/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dd2f19b2fadf4edb3a7277563b5b1ee59f8723c/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=7dd2f19b2fadf4edb3a7277563b5b1ee59f8723c", "patch": "@@ -334,26 +334,6 @@ do { \\\n #define TARGET_DEFAULT \\\n   (TARGET_CPU_DEFAULT | TARGET_ENDIAN_DEFAULT | TARGET_OPT_DEFAULT)\n \n-#ifndef SUBTARGET_OPTIONS\n-#define SUBTARGET_OPTIONS\n-#endif\n-\n-#define TARGET_OPTIONS \\\n-{ { \"ultcost=\", &sh_multcost_str, \\\n-    N_(\"Cost to assume for a multiply insn\"), 0 }, \\\n-  { \"gettrcost=\", &sh_gettrcost_str, \\\n-    N_(\"Cost to assume for gettr insn\"), 0 }, \\\n-  { \"div=\", &sh_div_str, \\\n-    N_(\"division strategy, one of: call, call2, fp, inv, inv:minlat, inv20u, inv20l, inv:call, inv:call2, inv:fp\"), 0 }, \\\n-  { \"divsi3_libfunc=\", &sh_divsi3_libfunc, \\\n-    N_(\"Specify name for 32 bit signed division function\"), 0 }, \\\n-  { \"cut2-workaround\", &cut2_workaround_str, \\\n-    N_(\"Enable SH5 cut2 workaround\"), \"\\1\" }, \\\n-  SUBTARGET_OPTIONS \\\n-}\n-\n-#define TARGET_SH5_CUT2_WORKAROUND (*cut2_workaround_str)\n-\n #ifndef SH_MULTILIB_CPU_DEFAULT\n #define SH_MULTILIB_CPU_DEFAULT \"m1\"\n #endif\n@@ -3460,12 +3440,6 @@ extern struct rtx_def *sp_switch;\n \n #define SIMULTANEOUS_PREFETCHES 2\n \n-extern const char *sh_multcost_str;\n-extern const char *sh_gettrcost_str;\n-extern const char *sh_div_str;\n-extern const char *sh_divsi3_libfunc;\n-extern const char *cut2_workaround_str;\n-\n /* FIXME: middle-end support for highpart optimizations is missing.  */\n #define high_life_started reload_in_progress\n "}, {"sha": "553a5576eb04bf6b3c617f27bc4054ec8159f860", "filename": "gcc/config/sh/sh.opt", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dd2f19b2fadf4edb3a7277563b5b1ee59f8723c/gcc%2Fconfig%2Fsh%2Fsh.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dd2f19b2fadf4edb3a7277563b5b1ee59f8723c/gcc%2Fconfig%2Fsh%2Fsh.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.opt?ref=7dd2f19b2fadf4edb3a7277563b5b1ee59f8723c", "patch": "@@ -148,13 +148,29 @@ mbigtable\n Target Report RejectNegative Mask(BIGTABLE)\n Generate 32-bit offsets in switch tables\n \n+mcut2-workaround\n+Target RejectNegative Var(TARGET_SH5_CUT2_WORKAROUND)\n+Enable SH5 cut2 workaround\n+\n mdalign\n Target Report RejectNegative Mask(ALIGN_DOUBLE)\n Align doubles at 64-bit boundaries\n \n+mdiv=\n+Target RejectNegative Joined Var(sh_div_str) Init(\"\")\n+Division strategy, one of: call, call2, fp, inv, inv:minlat, inv20u, inv20l, inv:call, inv:call2, inv:fp\n+\n+mdivsi3_libfunc=\n+Target RejectNegative Joined Var(sh_divsi3_libfunc) Init(\"\")\n+Specify name for 32 bit signed division function\n+\n mfmovd\n Target RejectNegative Mask(FMOVD) Undocumented\n \n+mgettrcost=\n+Target RejectNegative Joined UInteger Var(sh_gettrcost) Init(-1)\n+Cost to assume for gettr insn\n+\n mhitachi\n Target Report RejectNegative Mask(HITACHI)\n Follow Renesas (formerly Hitachi) / SuperH calling conventions\n@@ -209,6 +225,10 @@ mspace\n Target Report RejectNegative Mask(SMALLCODE)\n Deprecated. Use -Os instead\n \n+multcost=\n+Target RejectNegative Joined UInteger Var(sh_multcost) Init(-1)\n+Cost to assume for a multiply insn\n+\n musermode\n Target Report RejectNegative Mask(USERMODE)\n Generate library function call to invalidate instruction cache entries after fixing trampoline"}]}