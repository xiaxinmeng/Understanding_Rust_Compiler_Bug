{"sha": "f7ebc6a8c20e4f92d249f639dfce9389f5f60fbc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjdlYmM2YThjMjBlNGY5MmQyNDlmNjM5ZGZjZTkzODlmNWY2MGZiYw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2009-04-19T13:02:14Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2009-04-19T13:02:14Z"}, "message": "trans.c (gigi): Make the special IA-64 descriptor type a builtin type and give it a name.\n\n\t* gcc-interface/trans.c (gigi): Make the special IA-64 descriptor type\n\ta builtin type and give it a name.\n\nFrom-SVN: r146347", "tree": {"sha": "af3ab20cf890bc88d2f1521027ff0da606e956b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af3ab20cf890bc88d2f1521027ff0da606e956b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f7ebc6a8c20e4f92d249f639dfce9389f5f60fbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7ebc6a8c20e4f92d249f639dfce9389f5f60fbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7ebc6a8c20e4f92d249f639dfce9389f5f60fbc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7ebc6a8c20e4f92d249f639dfce9389f5f60fbc/comments", "author": null, "committer": null, "parents": [{"sha": "743e3e4c8c6387b763c6a20e2e577a8df5308b76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/743e3e4c8c6387b763c6a20e2e577a8df5308b76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/743e3e4c8c6387b763c6a20e2e577a8df5308b76"}], "stats": {"total": 42, "additions": 24, "deletions": 18}, "files": [{"sha": "6d5ef8efd905a6687da5a3db09c425e222d9b549", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7ebc6a8c20e4f92d249f639dfce9389f5f60fbc/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7ebc6a8c20e4f92d249f639dfce9389f5f60fbc/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f7ebc6a8c20e4f92d249f639dfce9389f5f60fbc", "patch": "@@ -1,3 +1,8 @@\n+2009-04-19  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.c (gigi): Make the special IA-64 descriptor type\n+\ta builtin type and give it a name.\n+\n 2009-04-17  Diego Novillo  <dnovillo@google.com>\n \n \t* gcc-interface/misc.c (gnat_expand_expr): Remove."}, {"sha": "83d32a68de2f6dbaf01729e8df1b3ab506e87d22", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7ebc6a8c20e4f92d249f639dfce9389f5f60fbc/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7ebc6a8c20e4f92d249f639dfce9389f5f60fbc/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=f7ebc6a8c20e4f92d249f639dfce9389f5f60fbc", "patch": "@@ -544,21 +544,6 @@ gigi (Node_Id gnat_root, int max_gnat_node, int number_name,\n     = build_qualified_type (TREE_TYPE (raise_nodefer_decl),\n \t\t\t    TYPE_QUAL_VOLATILE);\n \n-  long_long_float_type\n-    = gnat_to_gnu_entity (Base_Type (standard_long_long_float), NULL_TREE, 0);\n-\n-  if (TREE_CODE (TREE_TYPE (long_long_float_type)) == INTEGER_TYPE)\n-    {\n-      /* In this case, the builtin floating point types are VAX float,\n-\t so make up a type for use.  */\n-      longest_float_type_node = make_node (REAL_TYPE);\n-      TYPE_PRECISION (longest_float_type_node) = LONG_DOUBLE_TYPE_SIZE;\n-      layout_type (longest_float_type_node);\n-      record_builtin_type (\"longest float type\", longest_float_type_node);\n-    }\n-  else\n-    longest_float_type_node = TREE_TYPE (long_long_float_type);\n-\n   /* Build the special descriptor type and its null node if needed.  */\n   if (TARGET_VTABLE_USES_DESCRIPTORS)\n     {\n@@ -577,10 +562,26 @@ gigi (Node_Id gnat_root, int max_gnat_node, int number_name,\n \t  null_list = tree_cons (field, null_node, null_list);\n \t}\n \n-      finish_record_type (fdesc_type_node, nreverse (field_list), 0, false);\n+      finish_record_type (fdesc_type_node, nreverse (field_list), 0, true);\n+      record_builtin_type (\"descriptor\", fdesc_type_node);\n       null_fdesc_node = gnat_build_constructor (fdesc_type_node, null_list);\n     }\n \n+  long_long_float_type\n+    = gnat_to_gnu_entity (Base_Type (standard_long_long_float), NULL_TREE, 0);\n+\n+  if (TREE_CODE (TREE_TYPE (long_long_float_type)) == INTEGER_TYPE)\n+    {\n+      /* In this case, the builtin floating point types are VAX float,\n+\t so make up a type for use.  */\n+      longest_float_type_node = make_node (REAL_TYPE);\n+      TYPE_PRECISION (longest_float_type_node) = LONG_DOUBLE_TYPE_SIZE;\n+      layout_type (longest_float_type_node);\n+      record_builtin_type (\"longest float type\", longest_float_type_node);\n+    }\n+  else\n+    longest_float_type_node = TREE_TYPE (long_long_float_type);\n+\n   /* Dummy objects to materialize \"others\" and \"all others\" in the exception\n      tables.  These are exported by a-exexpr.adb, so see this unit for the\n      types to use.  */\n@@ -6316,7 +6317,7 @@ build_binary_op_trapv (enum tree_code code, tree gnu_type, tree left,\n       int needed_precision = precision * 2;\n \n       if (code == MULT_EXPR && precision == 64)\n-\t{ \n+\t{\n \t  tree int_64 = gnat_type_for_size (64, 0);\n \n \t  return convert (gnu_type, build_call_2_expr (mulv64_decl,\n@@ -6325,7 +6326,7 @@ build_binary_op_trapv (enum tree_code code, tree gnu_type, tree left,\n \t}\n \n       else if (needed_precision <= BITS_PER_WORD\n-\t       || (code == MULT_EXPR \n+\t       || (code == MULT_EXPR\n \t\t   && needed_precision <= LONG_LONG_TYPE_SIZE))\n \t{\n \t  tree wide_type = gnat_type_for_size (needed_precision, 0);"}]}