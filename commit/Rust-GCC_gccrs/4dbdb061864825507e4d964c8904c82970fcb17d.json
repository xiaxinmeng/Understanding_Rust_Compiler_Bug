{"sha": "4dbdb061864825507e4d964c8904c82970fcb17d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGRiZGIwNjE4NjQ4MjU1MDdlNGQ5NjRjODkwNGM4Mjk3MGZjYjE3ZA==", "commit": {"author": {"name": "James E Wilson", "email": "wilson@specifixinc.com", "date": "2005-08-01T22:25:52Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2005-08-01T22:25:52Z"}, "message": "Add long_call attribute to mips port.\n\n* config/mips/mips.c (mips_encode_section_info, mips_attribute_table,\nTARGET_ENCODE_SECTION_INFO, TARGET_ATTRIBUTE_TABLE): New.\n* config/mips/mips.h (SYMBOL_FLAG_LONG_CALL, SYMBOL_REF_LONG_CALL_P):\nNew.\n* config/mips/predicates.md (const_call_insn_operand): Add check for\nSYMBOL_REF_LONG_CALL_P.\n* doc/extend.texi (long_call): Document the new attribute.\n\nFrom-SVN: r102646", "tree": {"sha": "1b2f7b954419c82bc60f7e34da9c6744ffb94baf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b2f7b954419c82bc60f7e34da9c6744ffb94baf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4dbdb061864825507e4d964c8904c82970fcb17d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4dbdb061864825507e4d964c8904c82970fcb17d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4dbdb061864825507e4d964c8904c82970fcb17d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4dbdb061864825507e4d964c8904c82970fcb17d/comments", "author": null, "committer": null, "parents": [{"sha": "9e254451d2c54ff1fc1c9f1de87110566808af35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e254451d2c54ff1fc1c9f1de87110566808af35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e254451d2c54ff1fc1c9f1de87110566808af35"}], "stats": {"total": 59, "additions": 57, "deletions": 2}, "files": [{"sha": "bc765ffe59a637c293b2999cbcd05823a53f4601", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dbdb061864825507e4d964c8904c82970fcb17d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dbdb061864825507e4d964c8904c82970fcb17d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4dbdb061864825507e4d964c8904c82970fcb17d", "patch": "@@ -1,3 +1,13 @@\n+2005-08-01  James E Wilson  <wilson@specifix.com>\n+\n+\t* config/mips/mips.c (mips_encode_section_info, mips_attribute_table,\n+\tTARGET_ENCODE_SECTION_INFO, TARGET_ATTRIBUTE_TABLE): New.\n+\t* config/mips/mips.h (SYMBOL_FLAG_LONG_CALL, SYMBOL_REF_LONG_CALL_P):\n+\tNew.\n+\t* config/mips/predicates.md (const_call_insn_operand): Add check for\n+\tSYMBOL_REF_LONG_CALL_P.\n+\t* doc/extend.texi (long_call): Document the new attribute.\n+\n 2005-08-01  Ian Lance Taylor  <ian@airs.com>\n \t    Richard Henderson  <rth@redhat.com>\n "}, {"sha": "8ae0f7e5148a1f1777ffa0bddf89e7375db68368", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dbdb061864825507e4d964c8904c82970fcb17d/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dbdb061864825507e4d964c8904c82970fcb17d/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=4dbdb061864825507e4d964c8904c82970fcb17d", "patch": "@@ -406,6 +406,7 @@ static rtx mips_expand_builtin_compare (enum mips_builtin_type,\n \t\t\t\t\tenum insn_code, enum mips_fp_condition,\n \t\t\t\t\trtx, tree);\n static rtx mips_expand_builtin_bposge (enum mips_builtin_type, rtx);\n+static void mips_encode_section_info (tree, rtx, int);\n \n /* Structure to be filled in by compute_frame_size with register\n    save masks, and offsets for the current function.  */\n@@ -689,6 +690,13 @@ const enum reg_class mips_regno_to_class[] =\n \n /* Map register constraint character to register class.  */\n enum reg_class mips_char_to_class[256];\n+\n+/* Table of machine dependent attributes.  */\n+const struct attribute_spec mips_attribute_table[] =\n+{\n+  { \"long_call\",   0, 0, false, true,  true,  NULL },\n+  { NULL,\t   0, 0, false, false, false, NULL }\n+};\n \f\n /* A table describing all the processors gcc knows about.  Names are\n    matched in the order listed.  The first mention of an ISA level is\n@@ -1146,6 +1154,12 @@ static struct mips_rtx_cost_data const mips_rtx_cost_data[PROCESSOR_MAX] =\n #undef TARGET_CANNOT_FORCE_CONST_MEM\n #define TARGET_CANNOT_FORCE_CONST_MEM mips_cannot_force_const_mem\n \n+#undef TARGET_ENCODE_SECTION_INFO\n+#define TARGET_ENCODE_SECTION_INFO mips_encode_section_info\n+\n+#undef TARGET_ATTRIBUTE_TABLE\n+#define TARGET_ATTRIBUTE_TABLE mips_attribute_table\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Classify symbol X, which must be a SYMBOL_REF or a LABEL_REF.  */\n@@ -10719,4 +10733,20 @@ mips_expand_builtin_bposge (enum mips_builtin_type builtin_type, rtx target)\n   return target;\n }\n \f\n+/* Set SYMBOL_REF_FLAGS for the SYMBOL_REF inside RTL, which belongs to DECL.\n+   FIRST is true if this is the first time handling this decl.  */\n+\n+static void\n+mips_encode_section_info (tree decl, rtx rtl, int first)\n+{\n+  default_encode_section_info (decl, rtl, first);\n+\n+  if (TREE_CODE (decl) == FUNCTION_DECL\n+      && lookup_attribute (\"long_call\", TYPE_ATTRIBUTES (TREE_TYPE (decl))))\n+    {\n+      rtx symbol = XEXP (rtl, 0);\n+      SYMBOL_REF_FLAGS (symbol) |= SYMBOL_FLAG_LONG_CALL;\n+    }\n+}\n+\f\n #include \"gt-mips.h\""}, {"sha": "5fd3adf3e8a5fd193fcb45a0e2a647c834c9ab4e", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dbdb061864825507e4d964c8904c82970fcb17d/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dbdb061864825507e4d964c8904c82970fcb17d/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=4dbdb061864825507e4d964c8904c82970fcb17d", "patch": "@@ -2301,6 +2301,11 @@ typedef struct mips_args {\n   else\t\t\t\t\t\t\t\t\t\\\n     asm_fprintf ((FILE), \"%U%s\", (NAME))\n \f\n+/* Flag to mark a function decl symbol that requires a long call.  */\n+#define SYMBOL_FLAG_LONG_CALL\t(SYMBOL_FLAG_MACH_DEP << 0)\n+#define SYMBOL_REF_LONG_CALL_P(X)\t\t\t\t\t\\\n+  ((SYMBOL_REF_FLAGS (X) & SYMBOL_FLAG_LONG_CALL) != 0)\n+\n /* Specify the machine mode that this machine uses\n    for the index in the tablejump instruction.\n    ??? Using HImode in mips16 mode can cause overflow.  */"}, {"sha": "a96e01721495d56e4cb040ad3733cf2469bc6351", "filename": "gcc/config/mips/predicates.md", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dbdb061864825507e4d964c8904c82970fcb17d/gcc%2Fconfig%2Fmips%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dbdb061864825507e4d964c8904c82970fcb17d/gcc%2Fconfig%2Fmips%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fpredicates.md?ref=4dbdb061864825507e4d964c8904c82970fcb17d", "patch": "@@ -103,8 +103,10 @@\n   switch (symbol_type)\n     {\n     case SYMBOL_GENERAL:\n-      /* If -mlong-calls, force all calls to use register addressing.  */\n-      return !TARGET_LONG_CALLS;\n+      /* If -mlong-calls, force all calls to use register addressing.  Also,\n+\t if this function has the long_call attribute, we must use register\n+\t addressing.  */\n+      return !TARGET_LONG_CALLS && !SYMBOL_REF_LONG_CALL_P (op);\n \n     case SYMBOL_GOT_GLOBAL:\n       /* Without explicit relocs, there is no special syntax for"}, {"sha": "225f5a32e5be1cae38d804d07bf34451d465acbb", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dbdb061864825507e4d964c8904c82970fcb17d/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dbdb061864825507e4d964c8904c82970fcb17d/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=4dbdb061864825507e4d964c8904c82970fcb17d", "patch": "@@ -1942,6 +1942,14 @@ both the @option{-mlongcall} switch and, on the RS/6000 and PowerPC, the\n @xref{RS/6000 and PowerPC Options}, for more information on whether long\n calls are necessary.\n \n+@item long_call\n+@cindex indirect calls on MIPS\n+This attribute specifies how a particular function is called on MIPS@.\n+The attribute overrides the @option{-mlong-calls} (@pxref{MIPS Options})\n+command line switch.  This attribute causes the compiler to always call\n+the function by first loading its address into a register, and then using\n+the contents of that register.\n+\n @item malloc\n @cindex @code{malloc} attribute\n The @code{malloc} attribute is used to tell the compiler that a function"}]}