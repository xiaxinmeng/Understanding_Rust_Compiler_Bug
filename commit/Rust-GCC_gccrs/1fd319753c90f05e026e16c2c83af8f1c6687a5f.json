{"sha": "1fd319753c90f05e026e16c2c83af8f1c6687a5f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWZkMzE5NzUzYzkwZjA1ZTAyNmUxNmMyYzgzYWY4ZjFjNjY4N2E1Zg==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2018-11-19T17:58:00Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2018-11-19T17:58:00Z"}, "message": "Disable unrolling for loops vectorised with non-constant VF\n\nThis is an alternative to https://gcc.gnu.org/ml/gcc-patches/2018-11/msg00694.html\nAs richi suggested, this disables unrolling of loops vectorised with variable-length SVE\nin the vectoriser itself through the loop->unroll member.\n\nIt took me a few tries to get it right, as it needs to be set to '1' to disable unrolling,\nthe rationale for that mechanism is described in the comment in cfgloop.h.\n\n\t* tree-vect-loop.c (vect_transform_loop): Disable further unrolling\n\tof the loop if vf is non-constant.\n\n\t* gcc.target/aarch64/sve/unroll-1.c: New test.\n\nFrom-SVN: r266281", "tree": {"sha": "ab4289df64afcccb0a32340e0dcde7d83a62d344", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab4289df64afcccb0a32340e0dcde7d83a62d344"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1fd319753c90f05e026e16c2c83af8f1c6687a5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fd319753c90f05e026e16c2c83af8f1c6687a5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fd319753c90f05e026e16c2c83af8f1c6687a5f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fd319753c90f05e026e16c2c83af8f1c6687a5f/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c95c552804da90c830941111706e623106a7728a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c95c552804da90c830941111706e623106a7728a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c95c552804da90c830941111706e623106a7728a"}], "stats": {"total": 31, "additions": 31, "deletions": 0}, "files": [{"sha": "99968490f63ef1e45981d07c8c7ed5e2bb87c9f9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fd319753c90f05e026e16c2c83af8f1c6687a5f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fd319753c90f05e026e16c2c83af8f1c6687a5f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1fd319753c90f05e026e16c2c83af8f1c6687a5f", "patch": "@@ -1,3 +1,8 @@\n+2018-11-19  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* tree-vect-loop.c (vect_transform_loop): Disable further unrolling\n+\tof the loop if vf is non-constant.\n+\n 2018-11-19  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR tree-optimization/87025"}, {"sha": "ba1c5d68aa0fc4ab2c6e6b42cfe10e47661215dc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fd319753c90f05e026e16c2c83af8f1c6687a5f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fd319753c90f05e026e16c2c83af8f1c6687a5f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1fd319753c90f05e026e16c2c83af8f1c6687a5f", "patch": "@@ -1,3 +1,7 @@\n+2018-11-19  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/aarch64/sve/unroll-1.c: New test.\n+\n 2018-11-19  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR tree-optimization/87025"}, {"sha": "d4353009e2145ec59b3ac74a8fc0a4a16e441581", "filename": "gcc/testsuite/gcc.target/aarch64/sve/unroll-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fd319753c90f05e026e16c2c83af8f1c6687a5f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Funroll-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fd319753c90f05e026e16c2c83af8f1c6687a5f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Funroll-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Funroll-1.c?ref=1fd319753c90f05e026e16c2c83af8f1c6687a5f", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3\" } */\n+\n+/* Check that simple loop is not fully unrolled.  */\n+\n+void\n+fully_peel_me (double *x)\n+{\n+  for (int i = 0; i < 5; i++)\n+    x[i] = x[i] * 2;\n+}\n+\n+/* { dg-final { scan-assembler-times {b..\\t\\.L.\\n} 1 } } */"}, {"sha": "07a22d787c409283a5262d4cdd710fb9aa9083c2", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fd319753c90f05e026e16c2c83af8f1c6687a5f/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fd319753c90f05e026e16c2c83af8f1c6687a5f/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=1fd319753c90f05e026e16c2c83af8f1c6687a5f", "patch": "@@ -8515,6 +8515,15 @@ vect_transform_loop (loop_vec_info loop_vinfo)\n \t}\n     }\n \n+  /* Loops vectorized with a variable factor won't benefit from\n+     unrolling/peeling.  */\n+  if (!vf.is_constant ())\n+    {\n+      loop->unroll = 1;\n+      if (dump_enabled_p ())\n+\tdump_printf_loc (MSG_NOTE, vect_location, \"Disabling unrolling due to\"\n+\t\t\t \" variable-length vectorization factor\\n\");\n+    }\n   /* Free SLP instances here because otherwise stmt reference counting\n      won't work.  */\n   slp_instance instance;"}]}