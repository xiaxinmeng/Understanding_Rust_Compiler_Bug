{"sha": "52607f7ea8d62d0d6abdbc1288da70e75944865c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTI2MDdmN2VhOGQ2MmQwZDZhYmRiYzEyODhkYTcwZTc1OTQ0ODY1Yw==", "commit": {"author": {"name": "Will Schmidt", "email": "will_schmidt@vnet.ibm.com", "date": "2017-06-23T14:40:26Z"}, "committer": {"name": "Will Schmidt", "email": "willschm@gcc.gnu.org", "date": "2017-06-23T14:40:26Z"}, "message": "rs6000.c: Add include of ssa-propagate.h for update_call_from_tree().\n\n[gcc]\n\n2017-06-23  Will Schmidt  <will_schmidt@vnet.ibm.com>\n\n\t* config/rs6000/rs6000.c: Add include of ssa-propagate.h for\n\tupdate_call_from_tree().  (rs6000_gimple_fold_builtin): Add\n\thandling for early expansion of vector shifts (sl,sr,sra,rl).\n\t(builtin_function_type): Add vector shift right instructions\n\tto the unsigned argument list.\n\n[gcc/testsuite]\n\n2017-06-23  Will Schmidt  <will_schmidt@vnet.ibm.com>\n\n\t* gcc.target/powerpc/fold-vec-shift-char.c: New.\n\t* gcc.target/powerpc/fold-vec-shift-int.c: New.\n\t* gcc.target/powerpc/fold-vec-shift-longlong.c: New.\n\t* gcc.target/powerpc/fold-vec-shift-short.c: New.\n\t* gcc.target/powerpc/fold-vec-shift-left.c: New.\n\t* gcc.target/powerpc/fold-vec-shift-left-fwrapv.c: New.\n\t* gcc.target/powerpc/fold-vec-shift-left-longlong-fwrapv.c: New.\n\t* gcc.target/powerpc/fold-vec-shift-left-longlong.c: New.\n\nFrom-SVN: r249591", "tree": {"sha": "3d9fbb6110f9d75f52d32108f31fb59256d6a01d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d9fbb6110f9d75f52d32108f31fb59256d6a01d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/52607f7ea8d62d0d6abdbc1288da70e75944865c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52607f7ea8d62d0d6abdbc1288da70e75944865c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52607f7ea8d62d0d6abdbc1288da70e75944865c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52607f7ea8d62d0d6abdbc1288da70e75944865c/comments", "author": {"login": "willschm", "id": 44359, "node_id": "MDQ6VXNlcjQ0MzU5", "avatar_url": "https://avatars.githubusercontent.com/u/44359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willschm", "html_url": "https://github.com/willschm", "followers_url": "https://api.github.com/users/willschm/followers", "following_url": "https://api.github.com/users/willschm/following{/other_user}", "gists_url": "https://api.github.com/users/willschm/gists{/gist_id}", "starred_url": "https://api.github.com/users/willschm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willschm/subscriptions", "organizations_url": "https://api.github.com/users/willschm/orgs", "repos_url": "https://api.github.com/users/willschm/repos", "events_url": "https://api.github.com/users/willschm/events{/privacy}", "received_events_url": "https://api.github.com/users/willschm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "54357b3b84538e0f26b6501fd91bb98170995ff5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54357b3b84538e0f26b6501fd91bb98170995ff5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54357b3b84538e0f26b6501fd91bb98170995ff5"}], "stats": {"total": 489, "additions": 489, "deletions": 0}, "files": [{"sha": "327d809a87c59b66e6e10b1e73c8e70b66dbdc52", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52607f7ea8d62d0d6abdbc1288da70e75944865c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52607f7ea8d62d0d6abdbc1288da70e75944865c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=52607f7ea8d62d0d6abdbc1288da70e75944865c", "patch": "@@ -1,3 +1,11 @@\n+2017-06-23  Will Schmidt  <will_schmidt@vnet.ibm.com>\n+\n+\t* config/rs6000/rs6000.c: Add include of ssa-propagate.h for\n+\tupdate_call_from_tree().  (rs6000_gimple_fold_builtin): Add\n+\thandling for early expansion of vector shifts (sl,sr,sra,rl).\n+\t(builtin_function_type): Add vector shift right instructions\n+\tto the unsigned argument list.\n+\n 2017-06-23  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \trtl-optimizatoin/79286"}, {"sha": "7a38dea0319d875c1786b3b7fb2465e1ea75ff0a", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52607f7ea8d62d0d6abdbc1288da70e75944865c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52607f7ea8d62d0d6abdbc1288da70e75944865c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=52607f7ea8d62d0d6abdbc1288da70e75944865c", "patch": "@@ -77,6 +77,7 @@\n #endif\n #include \"case-cfn-macros.h\"\n #include \"ppc-auxv.h\"\n+#include \"tree-ssa-propagate.h\"\n \n /* This file should be included last.  */\n #include \"target-def.h\"\n@@ -16571,6 +16572,76 @@ rs6000_gimple_fold_builtin (gimple_stmt_iterator *gsi)\n \tgsi_replace (gsi, g, true);\n \treturn true;\n       }\n+    /* Flavors of vec_rotate_left.  */\n+    case ALTIVEC_BUILTIN_VRLB:\n+    case ALTIVEC_BUILTIN_VRLH:\n+    case ALTIVEC_BUILTIN_VRLW:\n+    case P8V_BUILTIN_VRLD:\n+      {\n+\targ0 = gimple_call_arg (stmt, 0);\n+\targ1 = gimple_call_arg (stmt, 1);\n+\tlhs = gimple_call_lhs (stmt);\n+\tgimple *g = gimple_build_assign (lhs, LROTATE_EXPR, arg0, arg1);\n+\tgimple_set_location (g, gimple_location (stmt));\n+\tgsi_replace (gsi, g, true);\n+\treturn true;\n+      }\n+  /* Flavors of vector shift right algebraic.\n+     vec_sra{b,h,w} -> vsra{b,h,w}.  */\n+    case ALTIVEC_BUILTIN_VSRAB:\n+    case ALTIVEC_BUILTIN_VSRAH:\n+    case ALTIVEC_BUILTIN_VSRAW:\n+    case P8V_BUILTIN_VSRAD:\n+      {\n+\targ0 = gimple_call_arg (stmt, 0);\n+\targ1 = gimple_call_arg (stmt, 1);\n+\tlhs = gimple_call_lhs (stmt);\n+\tgimple *g = gimple_build_assign (lhs, RSHIFT_EXPR, arg0, arg1);\n+\tgimple_set_location (g, gimple_location (stmt));\n+\tgsi_replace (gsi, g, true);\n+\treturn true;\n+      }\n+   /* Flavors of vector shift left.\n+      builtin_altivec_vsl{b,h,w} -> vsl{b,h,w}.  */\n+    case ALTIVEC_BUILTIN_VSLB:\n+    case ALTIVEC_BUILTIN_VSLH:\n+    case ALTIVEC_BUILTIN_VSLW:\n+    case P8V_BUILTIN_VSLD:\n+      {\n+\targ0 = gimple_call_arg (stmt, 0);\n+\tif (INTEGRAL_TYPE_P (TREE_TYPE (TREE_TYPE (arg0)))\n+\t    && !TYPE_OVERFLOW_WRAPS (TREE_TYPE (TREE_TYPE (arg0))))\n+\t      return false;\n+\targ1 = gimple_call_arg (stmt, 1);\n+\tlhs = gimple_call_lhs (stmt);\n+\tgimple *g = gimple_build_assign (lhs, LSHIFT_EXPR, arg0, arg1);\n+\tgimple_set_location (g, gimple_location (stmt));\n+\tgsi_replace (gsi, g, true);\n+\treturn true;\n+      }\n+    /* Flavors of vector shift right.  */\n+    case ALTIVEC_BUILTIN_VSRB:\n+    case ALTIVEC_BUILTIN_VSRH:\n+    case ALTIVEC_BUILTIN_VSRW:\n+    case P8V_BUILTIN_VSRD:\n+      {\n+\targ0 = gimple_call_arg (stmt, 0);\n+\targ1 = gimple_call_arg (stmt, 1);\n+\tlhs = gimple_call_lhs (stmt);\n+\tgimple_seq stmts = NULL;\n+\t/* Convert arg0 to unsigned.  */\n+\ttree arg0_unsigned\n+\t   = gimple_build (&stmts, VIEW_CONVERT_EXPR,\n+\t\t\t   unsigned_type_for (TREE_TYPE (arg0)), arg0);\n+\ttree res\n+\t   = gimple_build (&stmts, RSHIFT_EXPR,\n+\t\t\t   TREE_TYPE (arg0_unsigned), arg0_unsigned, arg1);\n+\t/* Convert result back to the lhs type.  */\n+\tres = gimple_build (&stmts, VIEW_CONVERT_EXPR, TREE_TYPE (lhs), res);\n+\tgsi_insert_seq_before (gsi, stmts, GSI_SAME_STMT);\n+\tupdate_call_from_tree (gsi, res);\n+\treturn true;\n+      }\n     default:\n       break;\n     }\n@@ -18072,6 +18143,14 @@ builtin_function_type (machine_mode mode_ret, machine_mode mode_arg0,\n       h.uns_p[2] = 1;\n       break;\n \n+\t/* unsigned second arguments (vector shift right).  */\n+    case ALTIVEC_BUILTIN_VSRB:\n+    case ALTIVEC_BUILTIN_VSRH:\n+    case ALTIVEC_BUILTIN_VSRW:\n+    case P8V_BUILTIN_VSRD:\n+      h.uns_p[2] = 1;\n+      break;\n+\n     default:\n       break;\n     }"}, {"sha": "4e2defd7ab4f81a989527660839980642fefb4ae", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52607f7ea8d62d0d6abdbc1288da70e75944865c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52607f7ea8d62d0d6abdbc1288da70e75944865c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=52607f7ea8d62d0d6abdbc1288da70e75944865c", "patch": "@@ -1,3 +1,14 @@\n+2017-06-23  Will Schmidt  <will_schmidt@vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/fold-vec-shift-char.c: New.\n+\t* gcc.target/powerpc/fold-vec-shift-int.c: New.\n+\t* gcc.target/powerpc/fold-vec-shift-longlong.c: New.\n+\t* gcc.target/powerpc/fold-vec-shift-short.c: New.\n+\t* gcc.target/powerpc/fold-vec-shift-left.c: New.\n+\t* gcc.target/powerpc/fold-vec-shift-left-fwrapv.c: New.\n+\t* gcc.target/powerpc/fold-vec-shift-left-longlong-fwrapv.c: New.\n+\t* gcc.target/powerpc/fold-vec-shift-left-longlong.c: New.\n+\n 2017-06-23  James Cowgill  <James.Cowgill@imgtec.com>\n \n \t* go.test/go-test.exp (go-set-goarch): Update MIPS architecture"}, {"sha": "ebe91e7bfcdfa0d0afd66b1745c6ca54127a8b22", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-shift-char.c", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52607f7ea8d62d0d6abdbc1288da70e75944865c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-shift-char.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52607f7ea8d62d0d6abdbc1288da70e75944865c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-shift-char.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-shift-char.c?ref=52607f7ea8d62d0d6abdbc1288da70e75944865c", "patch": "@@ -0,0 +1,66 @@\n+/* Verify that overloaded built-ins for vec_sl with char\n+   inputs produce the right results.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-maltivec -O2\" } */\n+\n+#include <altivec.h>\n+\n+//# vec_sl  - shift left\n+//# vec_sr  - shift right\n+//# vec_sra - shift right algebraic\n+//# vec_rl  - rotate left\n+\n+vector signed char\n+testsl_signed (vector signed char x, vector unsigned char y)\n+{\n+  return vec_sl (x, y);\n+}\n+\n+vector unsigned char\n+testsl_unsigned (vector unsigned char x, vector unsigned char y)\n+{\n+  return vec_sl (x, y);\n+}\n+\n+vector signed char\n+testsr_signed (vector signed char x, vector unsigned char y)\n+{\n+  return vec_sr (x, y);\n+}\n+\n+vector unsigned char\n+testsr_unsigned (vector unsigned char x, vector unsigned char y)\n+{\n+  return vec_sr (x, y);\n+}\n+\n+vector signed char\n+testsra_signed (vector signed char x, vector unsigned char y)\n+{\n+  return vec_sra (x, y);\n+}\n+\n+vector unsigned char\n+testsra_unsigned (vector unsigned char x, vector unsigned char y)\n+{\n+  return vec_sra (x, y);\n+}\n+\n+vector signed char\n+testrl_signed (vector signed char x, vector unsigned char y)\n+{\n+  return vec_rl (x, y);\n+}\n+\n+vector unsigned char\n+testrl_unsigned (vector unsigned char x, vector unsigned char y)\n+{\n+  return vec_rl (x, y);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vslb\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vsrb\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vsrab\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vrlb\" 2 } } */"}, {"sha": "e9c5fe1ad33aae498d0c533cd284b03fb279a9eb", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-shift-int.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52607f7ea8d62d0d6abdbc1288da70e75944865c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-shift-int.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52607f7ea8d62d0d6abdbc1288da70e75944865c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-shift-int.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-shift-int.c?ref=52607f7ea8d62d0d6abdbc1288da70e75944865c", "patch": "@@ -0,0 +1,61 @@\n+/* Verify that overloaded built-ins for vec_sl with int\n+   inputs produce the right results.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-maltivec -O2\" } */\n+\n+#include <altivec.h>\n+\n+vector signed int\n+testsl_signed (vector signed int x, vector unsigned int y)\n+{\n+  return vec_sl (x, y);\n+}\n+\n+vector unsigned int\n+testsl_unsigned (vector unsigned int x, vector unsigned int y)\n+{\n+  return vec_sl (x, y);\n+}\n+\n+vector signed int\n+testsr_signed (vector signed int x, vector unsigned int y)\n+{\n+  return vec_sr (x, y);\n+}\n+\n+vector unsigned int\n+testsr_unsigned (vector unsigned int x, vector unsigned int y)\n+{\n+  return vec_sr (x, y);\n+}\n+\n+vector signed int\n+testsra_signed (vector signed int x, vector unsigned int y)\n+{\n+  return vec_sra (x, y);\n+}\n+\n+vector unsigned int\n+testsra_unsigned (vector unsigned int x, vector unsigned int y)\n+{\n+  return vec_sra (x, y);\n+}\n+\n+vector signed int\n+testrl_signed (vector signed int x, vector unsigned int y)\n+{\n+  return vec_rl (x, y);\n+}\n+\n+vector unsigned int\n+testrl_unsigned (vector unsigned int x, vector unsigned int y)\n+{\n+  return vec_rl (x, y);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vslw\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vsrw\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vsraw\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vrlw\" 2 } } */"}, {"sha": "34264807b8985852f8e51ad6ebf4b3fc16a2ad28", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-shift-left-fwrapv.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52607f7ea8d62d0d6abdbc1288da70e75944865c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-shift-left-fwrapv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52607f7ea8d62d0d6abdbc1288da70e75944865c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-shift-left-fwrapv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-shift-left-fwrapv.c?ref=52607f7ea8d62d0d6abdbc1288da70e75944865c", "patch": "@@ -0,0 +1,48 @@\n+/* Verify that overloaded built-ins for vec_sl produce the right results.  */\n+/* This test covers the shift left tests with the -fwrapv option. */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-maltivec -O2 -fwrapv\" } */\n+\n+#include <altivec.h>\n+\n+vector signed char\n+testsl_signed_char (vector signed char x, vector unsigned char y)\n+{\n+  return vec_sl (x, y);\n+}\n+\n+vector unsigned char\n+testsl_unsigned_char (vector unsigned char x, vector unsigned char y)\n+{\n+  return vec_sl (x, y);\n+}\n+\n+vector signed short\n+testsl_signed_short (vector signed short x, vector unsigned short y)\n+{\n+  return vec_sl (x, y);\n+}\n+\n+vector unsigned short\n+testsl_unsigned_short (vector unsigned short x, vector unsigned short y)\n+{\n+  return vec_sl (x, y);\n+}\n+\n+vector signed int\n+testsl_signed_int (vector signed int x, vector unsigned int y)\n+{\n+  return vec_sl (x, y);\n+}\n+\n+vector unsigned int\n+testsl_unsigned_int (vector unsigned int x, vector unsigned int y)\n+{\n+  return vec_sl (x, y);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vslb\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vslh\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vslw\" 2 } } */"}, {"sha": "b7766835ecda8fc9ba4ce90b7fc10be4cf4b4501", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-shift-left-longlong-fwrapv.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52607f7ea8d62d0d6abdbc1288da70e75944865c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-shift-left-longlong-fwrapv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52607f7ea8d62d0d6abdbc1288da70e75944865c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-shift-left-longlong-fwrapv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-shift-left-longlong-fwrapv.c?ref=52607f7ea8d62d0d6abdbc1288da70e75944865c", "patch": "@@ -0,0 +1,22 @@\n+/* Verify that overloaded built-ins for vec_sl produce the right results.  */\n+/* This test covers the shift left tests with the -fwrapv option. */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-maltivec -O2 -mpower8-vector -fwrapv\" } */\n+\n+#include <altivec.h>\n+\n+vector signed long long\n+testsl_signed_longlong (vector signed long long x, vector unsigned long long y)\n+{\n+  return vec_sl (x, y);\n+}\n+\n+vector unsigned long long\n+testsl_unsigned_longlong (vector unsigned long long x, vector unsigned long long y)\n+{\n+  return vec_sl (x, y);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vsld\" 2 } } */"}, {"sha": "f040486bf56d795ee7df2bf5ef2cb7e7186c908d", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-shift-left-longlong.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52607f7ea8d62d0d6abdbc1288da70e75944865c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-shift-left-longlong.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52607f7ea8d62d0d6abdbc1288da70e75944865c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-shift-left-longlong.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-shift-left-longlong.c?ref=52607f7ea8d62d0d6abdbc1288da70e75944865c", "patch": "@@ -0,0 +1,22 @@\n+/* cross section of shift tests specific for shift-left.\n+ * This is a counterpart to the fold-vec-shift-left-frwapv test.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-maltivec -mpower8-vector -O2\" } */\n+\n+#include <altivec.h>\n+\n+vector signed long long\n+testsl_signed_longlong (vector signed long long x, vector unsigned long long y)\n+{\n+  return vec_sl (x, y);\n+}\n+\n+vector unsigned long long\n+testsl_unsigned_longlong (vector unsigned long long x, vector unsigned long long y)\n+{\n+  return vec_sl (x, y);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vsld\" 2 } } */"}, {"sha": "36f92b431a4a4b0d45c66fa88e0a50a94f52cb50", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-shift-left.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52607f7ea8d62d0d6abdbc1288da70e75944865c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-shift-left.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52607f7ea8d62d0d6abdbc1288da70e75944865c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-shift-left.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-shift-left.c?ref=52607f7ea8d62d0d6abdbc1288da70e75944865c", "patch": "@@ -0,0 +1,48 @@\n+/* cross section of shift tests specific for shift-left.\n+ * This is a counterpart to the fold-vec-shift-left-frwapv test.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-maltivec -O2\" } */\n+\n+#include <altivec.h>\n+\n+vector signed char\n+testsl_signed_char (vector signed char x, vector unsigned char y)\n+{\n+  return vec_sl (x, y);\n+}\n+\n+vector unsigned char\n+testsl_unsigned_char (vector unsigned char x, vector unsigned char y)\n+{\n+  return vec_sl (x, y);\n+}\n+\n+vector signed short\n+testsl_signed_short (vector signed short x, vector unsigned short y)\n+{\n+  return vec_sl (x, y);\n+}\n+\n+vector unsigned short\n+testsl_unsigned_short (vector unsigned short x, vector unsigned short y)\n+{\n+  return vec_sl (x, y);\n+}\n+\n+vector signed int\n+testsl_signed_int (vector signed int x, vector unsigned int y)\n+{\n+  return vec_sl (x, y);\n+}\n+\n+vector unsigned int\n+testsl_unsigned_int (vector unsigned int x, vector unsigned int y)\n+{\n+  return vec_sl (x, y);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vslb\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vslh\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vslw\" 2 } } */"}, {"sha": "97b82cf3117142dd7fcd51cab49489fae0086f55", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-shift-longlong.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52607f7ea8d62d0d6abdbc1288da70e75944865c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-shift-longlong.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52607f7ea8d62d0d6abdbc1288da70e75944865c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-shift-longlong.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-shift-longlong.c?ref=52607f7ea8d62d0d6abdbc1288da70e75944865c", "patch": "@@ -0,0 +1,63 @@\n+/* Verify that overloaded built-ins for vec_sl with long long\n+   inputs produce the right results.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-options \"-mpower8-vector -O2\" } */\n+\n+#include <altivec.h>\n+\n+vector signed long long\n+testsl_signed (vector signed long long x, vector unsigned long long y)\n+{\n+  return vec_sl (x, y);\n+}\n+\n+vector unsigned long long\n+testsl_unsigned (vector unsigned long long x, vector unsigned long long y)\n+{\n+  return vec_sl (x, y);\n+}\n+\n+vector signed long long\n+testsr_signed (vector signed long long x, vector unsigned long long y)\n+{\n+  return vec_sr (x, y);\n+}\n+\n+vector unsigned long long\n+testsr_unsigned (vector unsigned long long x, vector unsigned long long y)\n+{\n+  return vec_sr (x, y);\n+}\n+\n+vector signed long long\n+testsra_signed (vector signed long long x, vector unsigned long long y)\n+{\n+  return vec_sra (x, y);\n+}\n+\n+/* watch for PR 79544 here (vsrd / vsrad issue) */\n+vector unsigned long long\n+testsra_unsigned (vector unsigned long long x, vector unsigned long long y)\n+{\n+  return vec_sra (x, y);\n+}\n+\n+vector signed long long\n+testrl_signed (vector signed long long x, vector unsigned long long y)\n+{\n+  return vec_rl (x, y);\n+}\n+\n+vector unsigned long long\n+testrl_unsigned (vector unsigned long long x, vector unsigned long long y)\n+{\n+  return vec_rl (x, y);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vsld\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vsrd\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vsrad\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vrld\" 2 } } */\n+"}, {"sha": "4ca7c1802a1ef20e4c27f039f3991d2774fb6874", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-shift-short.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52607f7ea8d62d0d6abdbc1288da70e75944865c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-shift-short.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52607f7ea8d62d0d6abdbc1288da70e75944865c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-shift-short.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-shift-short.c?ref=52607f7ea8d62d0d6abdbc1288da70e75944865c", "patch": "@@ -0,0 +1,61 @@\n+/* Verify that overloaded built-ins for vec_sl with short\n+   inputs produce the right results.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-maltivec -O2\" } */\n+\n+#include <altivec.h>\n+\n+vector signed short\n+testsl_signed (vector signed short x, vector unsigned short y)\n+{\n+  return vec_sl (x, y);\n+}\n+\n+vector unsigned short\n+testsl_unsigned (vector unsigned short x, vector unsigned short y)\n+{\n+  return vec_sl (x, y);\n+}\n+\n+vector signed short\n+testsr_signed (vector signed short x, vector unsigned short y)\n+{\n+  return vec_sr (x, y);\n+}\n+\n+vector unsigned short\n+testsr_unsigned (vector unsigned short x, vector unsigned short y)\n+{\n+  return vec_sr (x, y);\n+}\n+\n+vector signed short\n+testsra_signed (vector signed short x, vector unsigned short y)\n+{\n+  return vec_sra (x, y);\n+}\n+\n+vector unsigned short\n+testsra_unsigned (vector unsigned short x, vector unsigned short y)\n+{\n+  return vec_sra (x, y);\n+}\n+\n+vector signed short\n+testrl_signed (vector signed short x, vector unsigned short y)\n+{\n+  return vec_rl (x, y);\n+}\n+\n+vector unsigned short\n+testrl_unsigned (vector unsigned short x, vector unsigned short y)\n+{\n+  return vec_rl (x, y);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vslh\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vsrh\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vsrah\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vrlh\" 2 } } */"}]}