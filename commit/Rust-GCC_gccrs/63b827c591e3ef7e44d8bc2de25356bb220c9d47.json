{"sha": "63b827c591e3ef7e44d8bc2de25356bb220c9d47", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjNiODI3YzU5MWUzZWY3ZTQ0ZDhiYzJkZTI1MzU2YmIyMjBjOWQ0Nw==", "commit": {"author": {"name": "Dale Johannesen", "email": "dalej@apple.com", "date": "2002-05-16T21:30:48Z"}, "committer": {"name": "Dale Johannesen", "email": "dalej@gcc.gnu.org", "date": "2002-05-16T21:30:48Z"}, "message": "Reenable combination of hard regs unless CLASS_LIKELY_SPILLED_P.\n\nFrom-SVN: r53531", "tree": {"sha": "9dc94762e4e333bd5c5638f294288dacdb30980e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9dc94762e4e333bd5c5638f294288dacdb30980e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/63b827c591e3ef7e44d8bc2de25356bb220c9d47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63b827c591e3ef7e44d8bc2de25356bb220c9d47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63b827c591e3ef7e44d8bc2de25356bb220c9d47", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63b827c591e3ef7e44d8bc2de25356bb220c9d47/comments", "author": null, "committer": null, "parents": [{"sha": "1020e435ae07d3cda5b769c8910a494a5e2c6cc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1020e435ae07d3cda5b769c8910a494a5e2c6cc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1020e435ae07d3cda5b769c8910a494a5e2c6cc7"}], "stats": {"total": 19, "additions": 13, "deletions": 6}, "files": [{"sha": "43b6a8c6d6ec6e0a8813291f53a531ba432bb401", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63b827c591e3ef7e44d8bc2de25356bb220c9d47/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63b827c591e3ef7e44d8bc2de25356bb220c9d47/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=63b827c591e3ef7e44d8bc2de25356bb220c9d47", "patch": "@@ -1,3 +1,8 @@\n+2002-05-16  Dale Johannesen  <dalej@apple.com>\n+\n+\t* combine.c (cant_combine_insn_p):  Reenable combinations\n+\tinvolving hard regs unless CLASS_LIKELY_SPILLED_P.\n+\n 2002-05-16  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* c-common.c (cb_register_builtins): Handle more built-ins"}, {"sha": "aaf1bcf3e26b7967289d814629b0d9f268341b76", "filename": "gcc/combine.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63b827c591e3ef7e44d8bc2de25356bb220c9d47/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63b827c591e3ef7e44d8bc2de25356bb220c9d47/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=63b827c591e3ef7e44d8bc2de25356bb220c9d47", "patch": "@@ -1459,10 +1459,10 @@ cant_combine_insn_p (insn)\n   if (! INSN_P (insn))\n     return 1;\n \n-  /* Never combine loads and stores involving hard regs.  The register\n-     allocator can usually handle such reg-reg moves by tying.  If we allow\n-     the combiner to make substitutions of hard regs, we risk aborting in\n-     reload on machines that have SMALL_REGISTER_CLASSES.\n+  /* Never combine loads and stores involving hard regs that are likely\n+     to be spilled.  The register allocator can usually handle such\n+     reg-reg moves by tying.  If we allow the combiner to make \n+     substitutions of likely-spilled regs, we may abort in reload.\n      As an exception, we allow combinations involving fixed regs; these are\n      not available to the register allocator so there's no risk involved.  */\n \n@@ -1477,9 +1477,11 @@ cant_combine_insn_p (insn)\n     dest = SUBREG_REG (dest);\n   if (REG_P (src) && REG_P (dest)\n       && ((REGNO (src) < FIRST_PSEUDO_REGISTER\n-\t   && ! fixed_regs[REGNO (src)])\n+\t   && ! fixed_regs[REGNO (src)]\n+\t   && CLASS_LIKELY_SPILLED_P (REGNO_REG_CLASS (REGNO (src))))\n \t  || (REGNO (dest) < FIRST_PSEUDO_REGISTER\n-\t      && ! fixed_regs[REGNO (dest)])))\n+\t      && ! fixed_regs[REGNO (dest)]\n+\t      && CLASS_LIKELY_SPILLED_P (REGNO_REG_CLASS (REGNO (dest))))))\n     return 1;\n \n   return 0;"}]}