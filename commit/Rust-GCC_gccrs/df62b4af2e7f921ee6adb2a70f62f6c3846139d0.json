{"sha": "df62b4af2e7f921ee6adb2a70f62f6c3846139d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGY2MmI0YWYyZTdmOTIxZWU2YWRiMmE3MGY2MmY2YzM4NDYxMzlkMA==", "commit": {"author": {"name": "Ilya Tocar", "email": "ilya.tocar@intel.com", "date": "2014-02-20T06:26:38Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2014-02-20T06:26:38Z"}, "message": "avx512erintrin.h (_mm_rcp28_round_sd): Swap operands.\n\ngcc/\n\t* config/i386/avx512erintrin.h (_mm_rcp28_round_sd): Swap operands.\n\t(_mm_rcp28_round_ss): Ditto.\n\t(_mm_rsqrt28_round_sd): Ditto.\n\t(_mm_rsqrt28_round_ss): Ditto.\n\t* config/i386/avx512erintrin.h (_mm_rcp14_round_sd): Ditto.\n\t(_mm_rcp14_round_ss): Ditto.\n\t(_mm_rsqrt14_round_sd): Ditto.\n\t(_mm_rsqrt14_round_ss): Ditto.\n\t* config/i386/sse.md (rsqrt14<mode>): Put nonimmediate operand as\n\tthe first input operand, get rid of match_dup.\n\t(avx512er_exp2<mode><mask_name><round_saeonly_name>): Set type\n\tattribute to sse.\n\t(<mask_codefor>avx512er_rcp28<mode><mask_name><round_saeonly_name>):\n\tDitto.\n\t(avx512er_vmrcp28<mode><round_saeonly_name>): Put nonimmediate\n\toperand as the first input operand, set type attribute.\n\t(<mask_codefor>avx512er_rsqrt28<mode><mask_name><round_saeonly_name>):\n\tSet type attribute.\n\t(avx512er_vmrsqrt28<mode><round_saeonly_name>): Put nonimmediate\n\toperand as the first input operand, set type attribute.\n\n\ntestsuite/gcc/\n\t* gcc.target/i386/avx512er-vrcp28sd-2.c: Distinguish src1 and src2.\n\t* gcc.target/i386/avx512er-vrcp28ss-2.c: Call correct intrinsic.\n\t* gcc.target/i386/avx512er-vrsqrt28sd-2.c: Distinguish src1 and src2.\n\t* gcc.target/i386/avx512er-vrsqrt28ss-2.c: Ditto.\n\t* gcc.target/i386/avx512f-vrcp14sd-2.c: Fix reference calculation.\n\t* gcc.target/i386/avx512f-vrcp14ss-2.c: Fix reference calculation.\n\n\nCo-Authored-By: Kirill Yukhin <kirill.yukhin@intel.com>\n\nFrom-SVN: r207932", "tree": {"sha": "a5db3a8897ee4547063dd5e963c11dbe4c4b9f1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5db3a8897ee4547063dd5e963c11dbe4c4b9f1d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df62b4af2e7f921ee6adb2a70f62f6c3846139d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df62b4af2e7f921ee6adb2a70f62f6c3846139d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df62b4af2e7f921ee6adb2a70f62f6c3846139d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df62b4af2e7f921ee6adb2a70f62f6c3846139d0/comments", "author": {"login": "TocarIP", "id": 16836375, "node_id": "MDQ6VXNlcjE2ODM2Mzc1", "avatar_url": "https://avatars.githubusercontent.com/u/16836375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TocarIP", "html_url": "https://github.com/TocarIP", "followers_url": "https://api.github.com/users/TocarIP/followers", "following_url": "https://api.github.com/users/TocarIP/following{/other_user}", "gists_url": "https://api.github.com/users/TocarIP/gists{/gist_id}", "starred_url": "https://api.github.com/users/TocarIP/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TocarIP/subscriptions", "organizations_url": "https://api.github.com/users/TocarIP/orgs", "repos_url": "https://api.github.com/users/TocarIP/repos", "events_url": "https://api.github.com/users/TocarIP/events{/privacy}", "received_events_url": "https://api.github.com/users/TocarIP/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a13cfd3e9bca793f3c6efd75eb10b654c3ebd41f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a13cfd3e9bca793f3c6efd75eb10b654c3ebd41f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a13cfd3e9bca793f3c6efd75eb10b654c3ebd41f"}], "stats": {"total": 146, "additions": 94, "deletions": 52}, "files": [{"sha": "6748c0fc36a30b87995f83480352747060636bf3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df62b4af2e7f921ee6adb2a70f62f6c3846139d0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df62b4af2e7f921ee6adb2a70f62f6c3846139d0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=df62b4af2e7f921ee6adb2a70f62f6c3846139d0", "patch": "@@ -1,3 +1,27 @@\n+2014-02-20  Ilya Tocar  <ilya.tocar@intel.com>\n+            Kirill Yukhin  <kirill.yukhin@intel.com>\n+\n+\t* config/i386/avx512erintrin.h (_mm_rcp28_round_sd): Swap operands.\n+\t(_mm_rcp28_round_ss): Ditto.\n+\t(_mm_rsqrt28_round_sd): Ditto.\n+\t(_mm_rsqrt28_round_ss): Ditto.\n+\t* config/i386/avx512erintrin.h (_mm_rcp14_round_sd): Ditto.\n+\t(_mm_rcp14_round_ss): Ditto.\n+\t(_mm_rsqrt14_round_sd): Ditto.\n+\t(_mm_rsqrt14_round_ss): Ditto.\n+\t* config/i386/sse.md (rsqrt14<mode>): Put nonimmediate operand as\n+\tthe first input operand, get rid of match_dup.\n+\t(avx512er_exp2<mode><mask_name><round_saeonly_name>): Set type\n+\tattribute to sse.\n+\t(<mask_codefor>avx512er_rcp28<mode><mask_name><round_saeonly_name>):\n+\tDitto.\n+\t(avx512er_vmrcp28<mode><round_saeonly_name>): Put nonimmediate\n+\toperand as the first input operand, set type attribute.\n+\t(<mask_codefor>avx512er_rsqrt28<mode><mask_name><round_saeonly_name>):\n+\tSet type attribute.\n+\t(avx512er_vmrsqrt28<mode><round_saeonly_name>): Put nonimmediate\n+\toperand as the first input operand, set type attribute.\n+\n 2014-02-19  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \t* config/rs6000/rs6000.c (vspltis_constant): Fix most significant"}, {"sha": "f6870a5f7233998abd9a8562a217d7211093e061", "filename": "gcc/config/i386/avx512erintrin.h", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df62b4af2e7f921ee6adb2a70f62f6c3846139d0/gcc%2Fconfig%2Fi386%2Favx512erintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df62b4af2e7f921ee6adb2a70f62f6c3846139d0/gcc%2Fconfig%2Fi386%2Favx512erintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512erintrin.h?ref=df62b4af2e7f921ee6adb2a70f62f6c3846139d0", "patch": "@@ -163,17 +163,17 @@ extern __inline __m128d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_rcp28_round_sd (__m128d __A, __m128d __B, int __R)\n {\n-  return (__m128d) __builtin_ia32_rcp28sd_round ((__v2df) __A,\n-\t\t\t\t\t\t (__v2df) __B,\n+  return (__m128d) __builtin_ia32_rcp28sd_round ((__v2df) __B,\n+\t\t\t\t\t\t (__v2df) __A,\n \t\t\t\t\t\t __R);\n }\n \n extern __inline __m128\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_rcp28_round_ss (__m128 __A, __m128 __B, int __R)\n {\n-  return (__m128) __builtin_ia32_rcp28ss_round ((__v4sf) __A,\n-\t\t\t\t\t\t(__v4sf) __B,\n+  return (__m128) __builtin_ia32_rcp28ss_round ((__v4sf) __B,\n+\t\t\t\t\t\t(__v4sf) __A,\n \t\t\t\t\t\t__R);\n }\n \n@@ -237,17 +237,17 @@ extern __inline __m128d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_rsqrt28_round_sd (__m128d __A, __m128d __B, int __R)\n {\n-  return (__m128d) __builtin_ia32_rsqrt28sd_round ((__v2df) __A,\n-\t\t\t\t\t\t   (__v2df) __B,\n+  return (__m128d) __builtin_ia32_rsqrt28sd_round ((__v2df) __B,\n+\t\t\t\t\t\t   (__v2df) __A,\n \t\t\t\t\t\t   __R);\n }\n \n extern __inline __m128\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_rsqrt28_round_ss (__m128 __A, __m128 __B, int __R)\n {\n-  return (__m128) __builtin_ia32_rsqrt28ss_round ((__v4sf) __A,\n-\t\t\t\t\t\t  (__v4sf) __B,\n+  return (__m128) __builtin_ia32_rsqrt28ss_round ((__v4sf) __B,\n+\t\t\t\t\t\t  (__v4sf) __A,\n \t\t\t\t\t\t  __R);\n }\n \n@@ -375,16 +375,16 @@ _mm_rsqrt28_round_ss (__m128 __A, __m128 __B, int __R)\n     _mm512_maskz_rsqrt28_round_ps(U, A, _MM_FROUND_CUR_DIRECTION)\n \n #define _mm_rcp28_sd(A, B)\t\\\n-    __builtin_ia32_rcp28sd_round(A, B, _MM_FROUND_CUR_DIRECTION)\n+    __builtin_ia32_rcp28sd_round(B, A, _MM_FROUND_CUR_DIRECTION)\n \n #define _mm_rcp28_ss(A, B)\t\\\n-    __builtin_ia32_rcp28ss_round(A, B, _MM_FROUND_CUR_DIRECTION)\n+    __builtin_ia32_rcp28ss_round(B, A, _MM_FROUND_CUR_DIRECTION)\n \n #define _mm_rsqrt28_sd(A, B)\t\\\n-    __builtin_ia32_rsqrt28sd_round(A, B, _MM_FROUND_CUR_DIRECTION)\n+    __builtin_ia32_rsqrt28sd_round(B, A, _MM_FROUND_CUR_DIRECTION)\n \n #define _mm_rsqrt28_ss(A, B)\t\\\n-    __builtin_ia32_rsqrt28ss_round(A, B, _MM_FROUND_CUR_DIRECTION)\n+    __builtin_ia32_rsqrt28ss_round(B, A, _MM_FROUND_CUR_DIRECTION)\n \n #ifdef __DISABLE_AVX512ER__\n #undef __DISABLE_AVX512ER__"}, {"sha": "65a49c5c1f379fdd33235f5d84d719b67ae6e85d", "filename": "gcc/config/i386/avx512fintrin.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df62b4af2e7f921ee6adb2a70f62f6c3846139d0/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df62b4af2e7f921ee6adb2a70f62f6c3846139d0/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fintrin.h?ref=df62b4af2e7f921ee6adb2a70f62f6c3846139d0", "patch": "@@ -1470,16 +1470,16 @@ extern __inline __m128d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_rcp14_sd (__m128d __A, __m128d __B)\n {\n-  return (__m128d) __builtin_ia32_rcp14sd ((__v2df) __A,\n-\t\t\t\t\t   (__v2df) __B);\n+  return (__m128d) __builtin_ia32_rcp14sd ((__v2df) __B,\n+\t\t\t\t\t   (__v2df) __A);\n }\n \n extern __inline __m128\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_rcp14_ss (__m128 __A, __m128 __B)\n {\n-  return (__m128) __builtin_ia32_rcp14ss ((__v4sf) __A,\n-\t\t\t\t\t  (__v4sf) __B);\n+  return (__m128) __builtin_ia32_rcp14ss ((__v4sf) __B,\n+\t\t\t\t\t  (__v4sf) __A);\n }\n \n extern __inline __m512d\n@@ -1544,16 +1544,16 @@ extern __inline __m128d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_rsqrt14_sd (__m128d __A, __m128d __B)\n {\n-  return (__m128d) __builtin_ia32_rsqrt14sd ((__v2df) __A,\n-\t\t\t\t\t     (__v2df) __B);\n+  return (__m128d) __builtin_ia32_rsqrt14sd ((__v2df) __B,\n+\t\t\t\t\t     (__v2df) __A);\n }\n \n extern __inline __m128\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_rsqrt14_ss (__m128 __A, __m128 __B)\n {\n-  return (__m128) __builtin_ia32_rsqrt14ss ((__v4sf) __A,\n-\t\t\t\t\t    (__v4sf) __B);\n+  return (__m128) __builtin_ia32_rsqrt14ss ((__v4sf) __B,\n+\t\t\t\t\t    (__v4sf) __A);\n }\n \n #ifdef __OPTIMIZE__"}, {"sha": "487c917471690def5d4616c435d10281c5af5e28", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df62b4af2e7f921ee6adb2a70f62f6c3846139d0/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df62b4af2e7f921ee6adb2a70f62f6c3846139d0/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=df62b4af2e7f921ee6adb2a70f62f6c3846139d0", "patch": "@@ -1551,13 +1551,12 @@\n   [(set (match_operand:VF_128 0 \"register_operand\" \"=v\")\n \t(vec_merge:VF_128\n \t  (unspec:VF_128\n-\t    [(match_operand:VF_128 1 \"register_operand\" \"v\")\n-\t     (match_operand:VF_128 2 \"nonimmediate_operand\" \"vm\")]\n+\t    [(match_operand:VF_128 1 \"nonimmediate_operand\" \"vm\")]\n \t    UNSPEC_RSQRT14)\n-\t  (match_dup 1)\n+\t  (match_operand:VF_128 2 \"register_operand\" \"v\")\n \t  (const_int 1)))]\n   \"TARGET_AVX512F\"\n-  \"vrsqrt14<ssescalarmodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n+  \"vrsqrt14<ssescalarmodesuffix>\\t{%1, %2, %0|%0, %2, %1}\"\n   [(set_attr \"type\" \"sse\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<MODE>\")])\n@@ -12804,6 +12803,7 @@\n   \"TARGET_AVX512ER\"\n   \"vexp2<ssemodesuffix>\\t{<round_saeonly_mask_op2>%1, %0<mask_operand2>|%0<mask_operand2>, %1<round_saeonly_mask_op2>}\"\n   [(set_attr \"prefix\" \"evex\")\n+   (set_attr \"type\" \"sse\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"<mask_codefor>avx512er_rcp28<mode><mask_name><round_saeonly_name>\"\n@@ -12814,6 +12814,7 @@\n   \"TARGET_AVX512ER\"\n   \"vrcp28<ssemodesuffix>\\t{<round_saeonly_mask_op2>%1, %0<mask_operand2>|%0<mask_operand2>, %1<round_saeonly_mask_op2>}\"\n   [(set_attr \"prefix\" \"evex\")\n+   (set_attr \"type\" \"sse\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"avx512er_vmrcp28<mode><round_saeonly_name>\"\n@@ -12825,9 +12826,10 @@\n \t  (match_operand:VF_128 2 \"register_operand\" \"v\")\n \t  (const_int 1)))]\n   \"TARGET_AVX512ER\"\n-  \"vrcp28<ssescalarmodesuffix>\\t{<round_saeonly_op3>%2, %1, %0|%0, %1, %2<round_saeonly_op3>}\"\n+  \"vrcp28<ssescalarmodesuffix>\\t{<round_saeonly_op3>%1, %2, %0|%0, %2, %1<round_saeonly_op3>}\"\n   [(set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix\" \"evex\")\n+   (set_attr \"type\" \"sse\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"<mask_codefor>avx512er_rsqrt28<mode><mask_name><round_saeonly_name>\"\n@@ -12838,6 +12840,7 @@\n   \"TARGET_AVX512ER\"\n   \"vrsqrt28<ssemodesuffix>\\t{<round_saeonly_mask_op2>%1, %0<mask_operand2>|%0<mask_operand2>, %1<round_saeonly_mask_op2>}\"\n   [(set_attr \"prefix\" \"evex\")\n+   (set_attr \"type\" \"sse\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"avx512er_vmrsqrt28<mode><round_saeonly_name>\"\n@@ -12849,8 +12852,9 @@\n \t  (match_operand:VF_128 2 \"register_operand\" \"v\")\n \t  (const_int 1)))]\n   \"TARGET_AVX512ER\"\n-  \"vrsqrt28<ssescalarmodesuffix>\\t{<round_saeonly_op3>%2, %1, %0|%0, %1, %2<round_saeonly_op3>}\"\n+  \"vrsqrt28<ssescalarmodesuffix>\\t{<round_saeonly_op3>%1, %2, %0|%0, %2, %1<round_saeonly_op3>}\"\n   [(set_attr \"length_immediate\" \"1\")\n+   (set_attr \"type\" \"sse\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<MODE>\")])\n "}, {"sha": "5aad2d5649dfafdf33c2d4d3eddf1cd3d9a8e1df", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df62b4af2e7f921ee6adb2a70f62f6c3846139d0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df62b4af2e7f921ee6adb2a70f62f6c3846139d0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=df62b4af2e7f921ee6adb2a70f62f6c3846139d0", "patch": "@@ -1,3 +1,13 @@\n+2014-02-20  Ilya Tocar  <ilya.tocar@intel.com>\n+\t    Kirill Yukhin  <kirill.yukhin@intel.com>\n+\n+\t* gcc.target/i386/avx512er-vrcp28sd-2.c: Distinguish src1 and src2.\n+\t* gcc.target/i386/avx512er-vrcp28ss-2.c: Call correct intrinsic.\n+\t* gcc.target/i386/avx512er-vrsqrt28sd-2.c: Distinguish src1 and src2.\n+\t* gcc.target/i386/avx512er-vrsqrt28ss-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vrcp14sd-2.c: Fix reference calculation.\n+\t* gcc.target/i386/avx512f-vrcp14ss-2.c: Fix reference calculation.\n+\n 2014-02-19  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/37743"}, {"sha": "889f990acfe712dffba444c42fd0b6da9888a429", "filename": "gcc/testsuite/gcc.target/i386/avx512er-vrcp28sd-2.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df62b4af2e7f921ee6adb2a70f62f6c3846139d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrcp28sd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df62b4af2e7f921ee6adb2a70f62f6c3846139d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrcp28sd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrcp28sd-2.c?ref=df62b4af2e7f921ee6adb2a70f62f6c3846139d0", "patch": "@@ -10,19 +10,20 @@\n void static\n avx512er_test (void)\n {\n-  union128d src, res;\n+  union128d src1, src2, res;\n   double res_ref[2];\n   int i;\n   \n   for (i = 0; i < 2; i++)\n     {\n-      src.a[i] = 179.345 - 6.5645 * i;\n-      res_ref[i] = src.a[i];\n+      src1.a[i] = 179.345 - 6.5645 * i;\n+      src2.a[i] = 204179.345 + 6.5645 * i;\n+      res_ref[i] = src1.a[i];\n     }\n \n-  res_ref[0] = 1.0 / src.a[0];\n+  res_ref[0] = 1.0 / src2.a[0];\n \n-  res.x = _mm_rcp28_round_sd (src.x, src.x, _MM_FROUND_NO_EXC);\n+  res.x = _mm_rcp28_round_sd (src1.x, src2.x, _MM_FROUND_NO_EXC);\n \n   if (checkVd (res.a, res_ref, 2))\n     abort ();"}, {"sha": "3280879107e9e4a3c97af589b094cb23c323e0a0", "filename": "gcc/testsuite/gcc.target/i386/avx512er-vrcp28ss-2.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df62b4af2e7f921ee6adb2a70f62f6c3846139d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrcp28ss-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df62b4af2e7f921ee6adb2a70f62f6c3846139d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrcp28ss-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrcp28ss-2.c?ref=df62b4af2e7f921ee6adb2a70f62f6c3846139d0", "patch": "@@ -10,19 +10,20 @@\n void static\n avx512er_test (void)\n {\n-  union128 src, res;\n+  union128 src1, src2, res;\n   float res_ref[4];\n   int i;\n   \n   for (i = 0; i < 4; i++)\n     {\n-      src.a[i] = 179.345 - 6.5645 * i;\n-      res_ref[i] = src.a[i];\n+      src1.a[i] = 179.345 - 6.5645 * i;\n+      src2.a[i] = 179345.006 + 6.5645 * i;\n+      res_ref[i] = src1.a[i];\n     }\n \n-  res_ref[0] = 1.0 / src.a[0];\n+  res_ref[0] = 1.0 / src2.a[0];\n \n-  res.x = _mm_rsqrt28_round_ss (src.x, src.x, _MM_FROUND_NO_EXC);\n+  res.x = _mm_rcp28_round_ss (src1.x, src2.x, _MM_FROUND_NO_EXC);\n \n   if (checkVf (res.a, res_ref, 4))\n     abort ();"}, {"sha": "bd217e8228f3a8f2bf6bbe72c6382f4ee4aea3a4", "filename": "gcc/testsuite/gcc.target/i386/avx512er-vrsqrt28sd-2.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df62b4af2e7f921ee6adb2a70f62f6c3846139d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrsqrt28sd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df62b4af2e7f921ee6adb2a70f62f6c3846139d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrsqrt28sd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrsqrt28sd-2.c?ref=df62b4af2e7f921ee6adb2a70f62f6c3846139d0", "patch": "@@ -10,19 +10,20 @@\n void static\n avx512er_test (void)\n {\n-  union128d src, res;\n+  union128d src1, src2, res;\n   double res_ref[2];\n   int i;\n   \n   for (i = 0; i < 2; i++)\n     {\n-      src.a[i] = 179.345 - 6.5645 * i;\n-      res_ref[i] = src.a[i];\n+      src1.a[i] = 179.345 - 6.5645 * i;\n+      src2.a[i] = 45 - 6.5645 * i;\n+      res_ref[i] = src1.a[i];\n     }\n \n-  res_ref[0] = 1.0 / sqrt (src.a[0]);\n+  res_ref[0] = 1.0 / sqrt (src2.a[0]);\n \n-  res.x = _mm_rsqrt28_round_sd (src.x, src.x, _MM_FROUND_NO_EXC);\n+  res.x = _mm_rsqrt28_round_sd (src1.x, src2.x, _MM_FROUND_NO_EXC);\n \n   if (checkVd (res.a, res_ref, 2))\n     abort ();"}, {"sha": "f7bfff5a50da25860195aaf8be60385774cda7de", "filename": "gcc/testsuite/gcc.target/i386/avx512er-vrsqrt28ss-2.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df62b4af2e7f921ee6adb2a70f62f6c3846139d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrsqrt28ss-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df62b4af2e7f921ee6adb2a70f62f6c3846139d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrsqrt28ss-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrsqrt28ss-2.c?ref=df62b4af2e7f921ee6adb2a70f62f6c3846139d0", "patch": "@@ -10,19 +10,20 @@\n void static\n avx512er_test (void)\n {\n-  union128 src, res;\n+  union128 src1, src2, res;\n   float res_ref[4];\n   int i;\n   \n   for (i = 0; i < 4; i++)\n     {\n-      src.a[i] = 179.345 - 6.5645 * i;\n-      res_ref[i] = src.a[i];\n+      src1.a[i] = 179.345 - 6.5645 * i;\n+      src2.a[i] = 179221345 + 6.5645 * i;\n+      res_ref[i] = src1.a[i];\n     }\n \n-  res_ref[0] = 1.0 / sqrt (src.a[0]);\n+  res_ref[0] = 1.0 / sqrt (src2.a[0]);\n \n-  res.x = _mm_rsqrt28_round_ss (src.x, src.x, _MM_FROUND_NO_EXC);\n+  res.x = _mm_rsqrt28_round_ss (src1.x, src2.x, _MM_FROUND_NO_EXC);\n \n   if (checkVf (res.a, res_ref, 4))\n     abort ();"}, {"sha": "f94460036c04bae393b0a000ada5db66ee093aeb", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vrcp14sd-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df62b4af2e7f921ee6adb2a70f62f6c3846139d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrcp14sd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df62b4af2e7f921ee6adb2a70f62f6c3846139d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrcp14sd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrcp14sd-2.c?ref=df62b4af2e7f921ee6adb2a70f62f6c3846139d0", "patch": "@@ -8,8 +8,8 @@\n static void\n compute_vrcp14sd (double *s1, double *s2, double *r)\n {\n-  r[0] = 1.0 / s1[0];\n-  r[1] = s2[1];\n+  r[0] = 1.0 / s2[0];\n+  r[1] = s1[1];\n }\n \n static void"}, {"sha": "7aca591bfcaf5faf430491d64931b31093c27d5d", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vrcp14ss-2.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df62b4af2e7f921ee6adb2a70f62f6c3846139d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrcp14ss-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df62b4af2e7f921ee6adb2a70f62f6c3846139d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrcp14ss-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrcp14ss-2.c?ref=df62b4af2e7f921ee6adb2a70f62f6c3846139d0", "patch": "@@ -8,10 +8,10 @@\n static void\n compute_vrcp14ss (float *s1, float *s2, float *r)\n {\n-  r[0] = 1.0 / s1[0];\n-  r[1] = s2[1];\n-  r[2] = s2[2];\n-  r[3] = s2[3];\n+  r[0] = 1.0 / s2[0];\n+  r[1] = s1[1];\n+  r[2] = s1[2];\n+  r[3] = s1[3];\n }\n \n static void"}]}