{"sha": "9f17a7afd2a4fa6175e8ab1551701f38951876eb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWYxN2E3YWZkMmE0ZmE2MTc1ZThhYjE1NTE3MDFmMzg5NTE4NzZlYg==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2002-12-31T22:50:10Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2002-12-31T22:50:10Z"}, "message": "re PR libgcj/7416 (java.security startup refs \"GNU libgcj.security\")\n\n\tFix for PR libgcj/7416:\n\t* javax/naming/InitialContext.java (init): Use\n\tgnu.classpath.home.url.\n\t* java/security/Security.java: Use new properties.\n\t(loadProviders): Accept base url; use it.\n\t* java/lang/System.java: Document gnu.classpath.vm.shortname, and\n\tgnu.classpath.home.url.\n\t(gnu.classpath.home.url): Define.\n\t(gnu.classpath.vm.shortname): Likewise.\n\nFrom-SVN: r60722", "tree": {"sha": "5bd605f06794bcbdcaf0af79cbd1c90f58918ffa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5bd605f06794bcbdcaf0af79cbd1c90f58918ffa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f17a7afd2a4fa6175e8ab1551701f38951876eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f17a7afd2a4fa6175e8ab1551701f38951876eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f17a7afd2a4fa6175e8ab1551701f38951876eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f17a7afd2a4fa6175e8ab1551701f38951876eb/comments", "author": null, "committer": null, "parents": [{"sha": "3d1252a94a9780741c28e3b872577925b919ca0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d1252a94a9780741c28e3b872577925b919ca0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d1252a94a9780741c28e3b872577925b919ca0f"}], "stats": {"total": 88, "additions": 61, "deletions": 27}, "files": [{"sha": "8f58e13f938884a2a6dac7e9468b226979ce0ae7", "filename": "libjava/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f17a7afd2a4fa6175e8ab1551701f38951876eb/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f17a7afd2a4fa6175e8ab1551701f38951876eb/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=9f17a7afd2a4fa6175e8ab1551701f38951876eb", "patch": "@@ -1,3 +1,15 @@\n+2002-12-31  Tom Tromey  <tromey@redhat.com>\n+\n+\tFix for PR libgcj/7416:\n+\t* javax/naming/InitialContext.java (init): Use\n+\tgnu.classpath.home.url.\n+\t* java/security/Security.java: Use new properties.\n+\t(loadProviders): Accept base url; use it.\n+\t* java/lang/System.java: Document gnu.classpath.vm.shortname, and\n+\tgnu.classpath.home.url.\n+\t(gnu.classpath.home.url): Define.\n+\t(gnu.classpath.vm.shortname): Likewise.\n+\n 2002-12-31  Tom Tromey  <tromey@redhat.com>\n             Ranjit Mathew  <rmathew@hotmail.com>\n "}, {"sha": "ab584250749e916cd51b8f51eb8a5aeebed1aaa5", "filename": "libjava/java/lang/System.java", "status": "modified", "additions": 27, "deletions": 6, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f17a7afd2a4fa6175e8ab1551701f38951876eb/libjava%2Fjava%2Flang%2FSystem.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f17a7afd2a4fa6175e8ab1551701f38951876eb/libjava%2Fjava%2Flang%2FSystem.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FSystem.java?ref=9f17a7afd2a4fa6175e8ab1551701f38951876eb", "patch": "@@ -73,15 +73,32 @@\n       loadLibrary(\"javalang\");\n \n     Properties defaultProperties = Runtime.defaultProperties;\n-    defaultProperties.put(\"gnu.cpu.endian\",\n-                          isWordsBigEndian() ? \"big\" : \"little\");\n \n+    // Set base URL if not already set.\n+    if (defaultProperties.get(\"gnu.classpath.home.url\") == null)\n+      defaultProperties.put(\"gnu.classpath.home.url\",\n+\t\t\t    \"file://\"\n+\t\t\t    + defaultProperties.get(\"gnu.classpath.home\")\n+\t\t\t    + \"/lib\");\n+\n+    // Set short name if not already set.\n+    if (defaultProperties.get(\"gnu.classpath.vm.shortname\") == null)\n+      {\n+\tString value = defaultProperties.getProperty(\"java.vm.name\");\n+\tint index = value.lastIndexOf(' ');\n+\tif (index != -1)\n+\t  value = value.substring(index + 1);\n+\tdefaultProperties.put(\"gnu.classpath.vm.shortname\", value);\n+      }\n+\n+    defaultProperties.put(\"gnu.cpu.endian\",\n+\t\t\t  isWordsBigEndian() ? \"big\" : \"little\");\n     // XXX FIXME - Temp hack for old systems that set the wrong property\n     if (defaultProperties.get(\"java.io.tmpdir\") == null)\n       defaultProperties.put(\"java.io.tmpdir\",\n                             defaultProperties.get(\"java.tmpdir\"));\n   }\n-    \n+\n   /**\n    * Stores the current system properties. This can be modified by\n    * {@link #setProperties(Properties)}, but will never be null, because\n@@ -101,7 +118,7 @@\n    * however.\n    */\n   public static final InputStream in\n-    = new BufferedInputStream (new FileInputStream(FileDescriptor.in));\n+    = new BufferedInputStream(new FileInputStream(FileDescriptor.in));\n   /**\n    * The standard output PrintStream.  This is assigned at startup and\n    * starts its life perfectly valid. Although it is marked final, you can\n@@ -113,7 +130,7 @@\n    * you, however.\n    */\n   public static final PrintStream out\n-    = new PrintStream(new BufferedOutputStream (new FileOutputStream(FileDescriptor.out)), true);\n+    = new PrintStream(new BufferedOutputStream(new FileOutputStream(FileDescriptor.out)), true);\n   /**\n    * The standard output PrintStream.  This is assigned at startup and\n    * starts its life perfectly valid. Although it is marked final, you can\n@@ -125,7 +142,7 @@\n    * you, however.\n    */\n   public static final PrintStream err\n-    = new PrintStream(new BufferedOutputStream (new FileOutputStream(FileDescriptor.err)), true);\n+    = new PrintStream(new BufferedOutputStream(new FileOutputStream(FileDescriptor.err)), true);\n \n   /**\n    * This class is uninstantiable.\n@@ -312,6 +329,10 @@ public static native void arraycopy(Object src, int srcStart,\n    * In addition, gnu defines several other properties, where ? stands for\n    * each character in '0' through '9':\n    * <dl>\n+   * <dl> gnu.classpath.vm.shortname <dd> Succinct version of the VM name;\n+   *      used for finding property files in file system\n+   * <dl> gnu.classpath.home.url <dd> Base URL; used for finding\n+   *      property files in file system\n    * <dt> gnu.cpu.endian      <dd>big or little\n    * <dt> gnu.java.io.encoding_scheme_alias.ISO-8859-?   <dd>8859_?\n    * <dt> gnu.java.io.encoding_scheme_alias.iso-8859-?   <dd>8859_?"}, {"sha": "39d75eef00c16c1faf3bcfc6664346f809641693", "filename": "libjava/java/security/Security.java", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f17a7afd2a4fa6175e8ab1551701f38951876eb/libjava%2Fjava%2Fsecurity%2FSecurity.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f17a7afd2a4fa6175e8ab1551701f38951876eb/libjava%2Fjava%2Fsecurity%2FSecurity.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FSecurity.java?ref=9f17a7afd2a4fa6175e8ab1551701f38951876eb", "patch": "@@ -37,9 +37,10 @@\n \n package java.security;\n import java.io.File;\n-import java.io.FileInputStream;\n+import java.io.InputStream;\n import java.io.IOException;\n import java.io.FileNotFoundException;\n+import java.net.URL;\n import java.security.Provider;\n import java.util.Vector;\n import java.util.Enumeration;\n@@ -59,30 +60,26 @@ public final class Security extends Object\n \n   static\n   {\n-    loadProviders(System.getProperty(\"java.home\"),\n-\t\t  System.getProperty(\"java.vm.name\"));\n-    loadProviders(System.getProperty(\"gnu.classpath.home\"), \"classpath\");\n+    String base = System.getProperty(\"gnu.classpath.home.url\");\n+    loadProviders(base, System.getProperty(\"gnu.classpath.vm.shortname\"));\n+    loadProviders(base, \"classpath\");\n   }\n \n   // This class can't be instantiated.\n   private Security ()\n   {\n   }\n \n-  private static void loadProviders(String dir, String vendor)\n+  private static void loadProviders(String baseUrl, String vendor)\n   {\n-    if (dir == null || vendor == null)\n+    if (baseUrl == null || vendor == null)\n       return;\n \n-    String separator = System.getProperty(\"file.separator\");\n-    String secfilestr = (dir +\n-\t\t\t separator + \"lib\" +\n-\t\t\t separator + \"security\" +\n-\t\t\t separator + vendor + \".security\");\n+    String secfilestr = baseUrl + \"/security/\" + vendor + \".security\";\n \n     try\n       {\n-\tFileInputStream fin = new FileInputStream(secfilestr);\n+\tInputStream fin = new URL(secfilestr).openStream();\n \tsecprops = new Properties();\n \tsecprops.load(fin);\n "}, {"sha": "705e24ad1ebb3e332a7ad86b9be82d37706b290c", "filename": "libjava/javax/naming/InitialContext.java", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f17a7afd2a4fa6175e8ab1551701f38951876eb/libjava%2Fjavax%2Fnaming%2FInitialContext.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f17a7afd2a4fa6175e8ab1551701f38951876eb/libjava%2Fjavax%2Fnaming%2FInitialContext.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fnaming%2FInitialContext.java?ref=9f17a7afd2a4fa6175e8ab1551701f38951876eb", "patch": "@@ -1,5 +1,5 @@\n /* InitialContext.java --\n-   Copyright (C) 2000 Free Software Foundation, Inc.\n+   Copyright (C) 2000, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -126,18 +126,22 @@ protected void init (Hashtable environment)\n \t}\n       catch (IOException e) {}\n \n-      String home = System.getProperty(\"java.home\");\n+      String home = System.getProperty(\"gnu.classpath.home.url\");\n       if (home != null)\n \t{\n-\t  String fileName = home + File.separator\n-\t    + \"lib\" + File.separator + \"jndi.properties\";\n+\t  String url = home + \"/jndi.properties\";\n \t  Properties p = new Properties ();\n \t\n-\t  try {\n-\t    InputStream is = new FileInputStream (fileName);\n-\t    p.load (is);\n-\t    is.close ();\n-\t  } catch (IOException e) {}\n+\t  try\n+\t    {\n+\t      InputStream is = new URL(url).openStream();\n+\t      p.load (is);\n+\t      is.close ();\n+\t    }\n+\t  catch (IOException e)\n+\t    {\n+\t      // Ignore.\n+\t    }\n \n \t  merge (myProps, p);\n \t}"}]}