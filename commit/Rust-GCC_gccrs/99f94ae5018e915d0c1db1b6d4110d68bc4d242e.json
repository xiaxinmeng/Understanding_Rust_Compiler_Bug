{"sha": "99f94ae5018e915d0c1db1b6d4110d68bc4d242e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTlmOTRhZTUwMThlOTE1ZDBjMWRiMWI2ZDQxMTBkNjhiYzRkMjQyZQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-03-26T16:08:36Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-03-26T16:08:36Z"}, "message": "aarch64: Cost comparisons embedded in COND_EXPRs\n\nSo far the costing of COND_EXPRs hasn't distinguished between\ncases in which the condition is calculated separately or is\nbuilt into the COND_EXPR itself.  This patch adds the cost\nof any embedded comparison.\n\nLike with the previous patches, this one only becomes active if\na CPU selects use_new_vector_costs.  It should therefore have\na very low impact on other CPUs.\n\ngcc/\n\t* config/aarch64/aarch64.c (aarch64_embedded_comparison_type): New\n\tfunction.\n\t(aarch64_adjust_stmt_cost): Add the costs of embedded scalar and\n\tvector comparisons.", "tree": {"sha": "31a7f223f3c1ae9721ab60e97b6353070631b75a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/31a7f223f3c1ae9721ab60e97b6353070631b75a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/99f94ae5018e915d0c1db1b6d4110d68bc4d242e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99f94ae5018e915d0c1db1b6d4110d68bc4d242e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99f94ae5018e915d0c1db1b6d4110d68bc4d242e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99f94ae5018e915d0c1db1b6d4110d68bc4d242e/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed17ad5ea1cb302951f582ae8edd1afc9c014302", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed17ad5ea1cb302951f582ae8edd1afc9c014302", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed17ad5ea1cb302951f582ae8edd1afc9c014302"}], "stats": {"total": 33, "additions": 33, "deletions": 0}, "files": [{"sha": "e97e71b6e3d2c4205e31991d7a1258bfa66f3a2d", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99f94ae5018e915d0c1db1b6d4110d68bc4d242e/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99f94ae5018e915d0c1db1b6d4110d68bc4d242e/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=99f94ae5018e915d0c1db1b6d4110d68bc4d242e", "patch": "@@ -14392,6 +14392,21 @@ aarch64_ld234_st234_vectors (vect_cost_for_stmt kind, stmt_vec_info stmt_info)\n   return 0;\n }\n \n+/* If STMT_INFO is a COND_EXPR that includes an embedded comparison, return the\n+   scalar type of the values being compared.  Return null otherwise.  */\n+static tree\n+aarch64_embedded_comparison_type (stmt_vec_info stmt_info)\n+{\n+  if (auto *assign = dyn_cast<gassign *> (stmt_info->stmt))\n+    if (gimple_assign_rhs_code (assign) == COND_EXPR)\n+      {\n+\ttree cond = gimple_assign_rhs1 (assign);\n+\tif (COMPARISON_CLASS_P (cond))\n+\t  return TREE_TYPE (TREE_OPERAND (cond, 0));\n+      }\n+  return NULL_TREE;\n+}\n+\n /* Return true if creating multiple copies of STMT_INFO for Advanced SIMD\n    vectors would produce a series of LDP or STP operations.  KIND is the\n    kind of statement that STMT_INFO represents.  */\n@@ -14685,8 +14700,26 @@ aarch64_adjust_stmt_cost (vect_cost_for_stmt kind, stmt_vec_info stmt_info,\n \t  stmt_cost += simd_costs->ld4_st4_permute_cost;\n \t  break;\n \t}\n+\n+      if (kind == vector_stmt || kind == vec_to_scalar)\n+\tif (tree cmp_type = aarch64_embedded_comparison_type (stmt_info))\n+\t  {\n+\t    if (FLOAT_TYPE_P (cmp_type))\n+\t      stmt_cost += simd_costs->fp_stmt_cost;\n+\t    else\n+\t      stmt_cost += simd_costs->int_stmt_cost;\n+\t  }\n     }\n \n+  if (kind == scalar_stmt)\n+    if (tree cmp_type = aarch64_embedded_comparison_type (stmt_info))\n+      {\n+\tif (FLOAT_TYPE_P (cmp_type))\n+\t  stmt_cost += aarch64_tune_params.vec_costs->scalar_fp_stmt_cost;\n+\telse\n+\t  stmt_cost += aarch64_tune_params.vec_costs->scalar_int_stmt_cost;\n+      }\n+\n   return stmt_cost;\n }\n "}]}