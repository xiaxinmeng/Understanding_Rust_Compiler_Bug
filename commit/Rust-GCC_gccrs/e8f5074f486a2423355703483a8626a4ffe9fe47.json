{"sha": "e8f5074f486a2423355703483a8626a4ffe9fe47", "node_id": "C_kwDOANBUbNoAKGU4ZjUwNzRmNDg2YTI0MjMzNTU3MDM0ODNhODYyNmE0ZmZlOWZlNDc", "commit": {"author": {"name": "Claudiu Zissulescu", "email": "claziss@gmail.com", "date": "2022-10-10T07:27:12Z"}, "committer": {"name": "Claudiu Zissulescu", "email": "claziss@gmail.com", "date": "2022-10-10T07:32:47Z"}, "message": "arc: Remove Rcq constraint.\n\ngcc/\n\t* config/arc/arc.cc (arc_check_short_reg_p): New function.\n\t(arc_address_cost): Replace satisfies_constraint_Rcq with the\n\tabove new function.\n\t(arc_output_addsi): Likewise.\n\t(split_addsi): Likewise.\n\t(split_subsi): Likewise.\n\t* config/arc/arc.md (movqi_insn): Remove Rcq constraint.\n\t(movhi_insn): Likewise.\n\t(movsi_insn): Likewise.\n\t(tst_movb): Likewise.\n\t(tst): Likewise.\n\t(tst_bitfield): Likewise.\n\t(abssi2): Likewise.\n\t(addsi3_mixed): Likewise.\n\t(mulhisi3_reg): Likewise.\n\t(umulhisi3_reg): Likewise.\n\t(mulsi_600): Likewise.\n\t(mul64): Likewise.\n\t(subsi3_insn): Likewise.\n\t(bicsi3_insn): Likewise.\n\t(xorsi3): Likewise.\n\t(negsi2): Likewise.\n\t(one_cmplsi2): Likewise.\n\t(lshrsi3_insn): Likewise.\n\t(cmpsi_cc_insn_mixed): Likewise.\n\t(cmpsi_cc_zn_insn): Likewise.\n\t(btst): Likewise.\n\t(cmpsi_cc_z_insn): Likewise.\n\t(cmpsi_cc_c_insn): Likewise.\n\t(indirect_jump): Likewise.\n\t(casesi_jump): Likewise.\n\t(call_i): Likewise.\n\t(call_value_i): Likewise.\n\t(bbit): Likewise.\n\t(abssf2): Likewise.\n\t(ashlsi2_cnt1): Likewise.\n\t(lshrsi3_cnt1): Likewise.\n\t(ashrsi3_cnt1): Likewise.\n\t* config/arc/constraints.md (Rcq): Remove.\n\nSigned-off-by: Claudiu Zissulescu <claziss@gmail.com>", "tree": {"sha": "977a86509879d846f3c6948e6d95e8110d639260", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/977a86509879d846f3c6948e6d95e8110d639260"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e8f5074f486a2423355703483a8626a4ffe9fe47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8f5074f486a2423355703483a8626a4ffe9fe47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8f5074f486a2423355703483a8626a4ffe9fe47", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8f5074f486a2423355703483a8626a4ffe9fe47/comments", "author": {"login": "claziss", "id": 2761368, "node_id": "MDQ6VXNlcjI3NjEzNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2761368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claziss", "html_url": "https://github.com/claziss", "followers_url": "https://api.github.com/users/claziss/followers", "following_url": "https://api.github.com/users/claziss/following{/other_user}", "gists_url": "https://api.github.com/users/claziss/gists{/gist_id}", "starred_url": "https://api.github.com/users/claziss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claziss/subscriptions", "organizations_url": "https://api.github.com/users/claziss/orgs", "repos_url": "https://api.github.com/users/claziss/repos", "events_url": "https://api.github.com/users/claziss/events{/privacy}", "received_events_url": "https://api.github.com/users/claziss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "claziss", "id": 2761368, "node_id": "MDQ6VXNlcjI3NjEzNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2761368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claziss", "html_url": "https://github.com/claziss", "followers_url": "https://api.github.com/users/claziss/followers", "following_url": "https://api.github.com/users/claziss/following{/other_user}", "gists_url": "https://api.github.com/users/claziss/gists{/gist_id}", "starred_url": "https://api.github.com/users/claziss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claziss/subscriptions", "organizations_url": "https://api.github.com/users/claziss/orgs", "repos_url": "https://api.github.com/users/claziss/repos", "events_url": "https://api.github.com/users/claziss/events{/privacy}", "received_events_url": "https://api.github.com/users/claziss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ebbdf9c4ea62327b983de4aff96e6846cf218b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ebbdf9c4ea62327b983de4aff96e6846cf218b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ebbdf9c4ea62327b983de4aff96e6846cf218b4"}], "stats": {"total": 220, "additions": 104, "deletions": 116}, "files": [{"sha": "e6f52d87714e1dd2b69dda959e670fa5a579f759", "filename": "gcc/config/arc/arc.cc", "status": "modified", "additions": 31, "deletions": 17, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8f5074f486a2423355703483a8626a4ffe9fe47/gcc%2Fconfig%2Farc%2Farc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8f5074f486a2423355703483a8626a4ffe9fe47/gcc%2Fconfig%2Farc%2Farc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.cc?ref=e8f5074f486a2423355703483a8626a4ffe9fe47", "patch": "@@ -2474,6 +2474,20 @@ arc_setup_incoming_varargs (cumulative_args_t args_so_far,\n     }\n }\n \n+/* Return TRUE if reg is ok for short instrcutions.  */\n+\n+static bool\n+arc_check_short_reg_p (rtx op)\n+{\n+  if (!REG_P (op))\n+    return false;\n+\n+  if (IN_RANGE (REGNO (op) ^ 4, 4, 11))\n+    return true;\n+\n+  return false;\n+}\n+\n /* Cost functions.  */\n \n /* Provide the costs of an addressing mode that contains ADDR.\n@@ -2485,7 +2499,7 @@ arc_address_cost (rtx addr, machine_mode, addr_space_t, bool speed)\n   switch (GET_CODE (addr))\n     {\n     case REG :\n-      return speed || satisfies_constraint_Rcq (addr) ? 0 : 1;\n+      return speed || arc_check_short_reg_p (addr) ? 0 : 1;\n     case PRE_INC: case PRE_DEC: case POST_INC: case POST_DEC:\n     case PRE_MODIFY: case POST_MODIFY:\n       return !speed;\n@@ -2517,14 +2531,14 @@ arc_address_cost (rtx addr, machine_mode, addr_space_t, bool speed)\n \t\t    ? COSTS_N_INSNS (1)\n \t\t    : speed\n \t\t    ? 0\n-\t\t    : (satisfies_constraint_Rcq (plus0)\n+\t\t    : (arc_check_short_reg_p (plus0)\n \t\t       && satisfies_constraint_O (plus1))\n \t\t    ? 0\n \t\t    : 1);\n \t  case REG:\n \t    return (speed < 1 ? 0\n-\t\t    : (satisfies_constraint_Rcq (plus0)\n-\t\t       && satisfies_constraint_Rcq (plus1))\n+\t\t    : (arc_check_short_reg_p (plus0)\n+\t\t       && arc_check_short_reg_p (plus1))\n \t\t    ? 0 : 1);\n \t  case CONST :\n \t  case SYMBOL_REF :\n@@ -9003,8 +9017,8 @@ arc_output_addsi (rtx *operands, bool cond_p, bool output_p)\n   int intval = (REG_P (operands[2]) ? 1\n \t\t: CONST_INT_P (operands[2]) ? INTVAL (operands[2]) : 0xbadc057);\n   int neg_intval = -intval;\n-  int short_0 = satisfies_constraint_Rcq (operands[0]);\n-  int short_p = (!cond_p && short_0 && satisfies_constraint_Rcq (operands[1]));\n+  int short_0 = arc_check_short_reg_p (operands[0]);\n+  int short_p = (!cond_p && short_0 && arc_check_short_reg_p (operands[1]));\n   int ret = 0;\n \n #define REG_H_P(OP) (REG_P (OP) && ((TARGET_V2 && REGNO (OP) <= 31\t\\\n@@ -9037,7 +9051,7 @@ arc_output_addsi (rtx *operands, bool cond_p, bool output_p)\n \t patterns.  */\n       if (short_p\n \t  && ((REG_H_P (operands[2])\n-\t       && (match || satisfies_constraint_Rcq (operands[2])))\n+\t       && (match || arc_check_short_reg_p (operands[2])))\n \t      || (CONST_INT_P (operands[2])\n \t\t  && ((unsigned) intval <= (match ? 127 : 7)))))\n \tADDSI_OUTPUT1 (\"add%? %0,%1,%2 ;1\");\n@@ -9064,7 +9078,7 @@ arc_output_addsi (rtx *operands, bool cond_p, bool output_p)\n       /* Generate add_s r0,b,u6; add_s r1,b,u6 patterns.  */\n       if (TARGET_CODE_DENSITY && REG_P (operands[0]) && REG_P (operands[1])\n \t  && ((REGNO (operands[0]) == 0) || (REGNO (operands[0]) == 1))\n-\t  && satisfies_constraint_Rcq (operands[1])\n+\t  && arc_check_short_reg_p (operands[1])\n \t  && satisfies_constraint_L (operands[2]))\n \tADDSI_OUTPUT1 (\"add%? %0,%1,%2 ;6\");\n     }\n@@ -10033,7 +10047,7 @@ split_addsi (rtx *operands)\n   /* Try for two short insns first.  Lengths being equal, we prefer\n      expansions with shorter register lifetimes.  */\n   if (val > 127 && val <= 255\n-      && satisfies_constraint_Rcq (operands[0]))\n+      && arc_check_short_reg_p (operands[0]))\n     {\n       operands[3] = operands[2];\n       operands[4] = gen_rtx_PLUS (SImode, operands[0], operands[1]);\n@@ -10057,8 +10071,8 @@ split_subsi (rtx *operands)\n \n   /* Try for two short insns first.  Lengths being equal, we prefer\n      expansions with shorter register lifetimes.  */\n-  if (satisfies_constraint_Rcq (operands[0])\n-      && satisfies_constraint_Rcq (operands[2]))\n+  if (arc_check_short_reg_p (operands[0])\n+      && arc_check_short_reg_p (operands[2]))\n     {\n       if (val >= -31 && val <= 127)\n \t{\n@@ -10436,12 +10450,12 @@ arc_lra_p (void)\n   return arc_lra_flag;\n }\n \n-/* ??? Should we define TARGET_REGISTER_PRIORITY?  We might perfer to use\n-   Rcq registers, because some insn are shorter with them.  OTOH we already\n-   have separate alternatives for this purpose, and other insns don't\n-   mind, so maybe we should rather prefer the other registers?\n-   We need more data, and we can only get that if we allow people to\n-   try all options.  */\n+/* ??? Should we define TARGET_REGISTER_PRIORITY?  We might perfer to\n+   use q registers, because some insn are shorter with them.  OTOH we\n+   already have separate alternatives for this purpose, and other\n+   insns don't mind, so maybe we should rather prefer the other\n+   registers?  We need more data, and we can only get that if we allow\n+   people to try all options.  */\n static int\n arc_register_priority (int r)\n {"}, {"sha": "458d3edf716c640dad3a9410c915120f3443c40d", "filename": "gcc/config/arc/arc.md", "status": "modified", "additions": 73, "deletions": 79, "changes": 152, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8f5074f486a2423355703483a8626a4ffe9fe47/gcc%2Fconfig%2Farc%2Farc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8f5074f486a2423355703483a8626a4ffe9fe47/gcc%2Fconfig%2Farc%2Farc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.md?ref=e8f5074f486a2423355703483a8626a4ffe9fe47", "patch": "@@ -696,15 +696,13 @@ archs4x, archs4xd\"\n ; In order to allow the ccfsm machinery to do its work, the leading compact\n ; alternatives say 'canuse' - there is another alternative that will match\n ; when the condition codes are used.\n-; Rcq won't match if the condition is actually used; to avoid a spurious match\n-; via q, q is inactivated as constraint there.\n ; Likewise, the length of an alternative that might be shifted to conditional\n ; execution must reflect this, lest out-of-range branches are created.\n ; The iscompact attribute allows the epilogue expander to know for which\n ; insns it should lengthen the return insn.\n (define_insn \"*movqi_insn\"\n-  [(set (match_operand:QI 0 \"move_dest_operand\" \"=Rcq,Rcq#q,    w,Rcq#q,   h, w, w,???w,h, w,Rcq,  S,!*x,  r,r, Ucm,m,???m,  m,Usc\")\n-\t(match_operand:QI 1 \"move_src_operand\"  \"  cL,   cP,Rcq#q,    P,hCm1,cL, I,?Rac,i,?i,  T,Rcq,Usd,Ucm,m,?Rac,c,?Rac,Cm3,i\"))]\n+  [(set (match_operand:QI 0 \"move_dest_operand\" \"=q, q,r,q,   h, w, w,???w,h, w,q,S,!*x,  r,r, Ucm,m,???m,  m,Usc\")\n+\t(match_operand:QI 1 \"move_src_operand\"  \"rL,rP,q,P,hCm1,cL, I,?Rac,i,?i,T,q,Usd,Ucm,m,?Rac,c,?Rac,Cm3,i\"))]\n   \"register_operand (operands[0], QImode)\n    || register_operand (operands[1], QImode)\n    || (satisfies_constraint_Cm3 (operands[1])\n@@ -742,8 +740,8 @@ archs4x, archs4xd\"\n   \"if (prepare_move_operands (operands, HImode)) DONE;\")\n \n (define_insn \"*movhi_insn\"\n-  [(set (match_operand:HI 0 \"move_dest_operand\" \"=Rcq,Rcq#q,    w,Rcq#q,   h, w, w,???w,Rcq#q,h, w,Rcq,  S,  r,r, Ucm,m,???m,  m,VUsc\")\n-\t(match_operand:HI 1 \"move_src_operand\" \"   cL,   cP,Rcq#q,    P,hCm1,cL, I,?Rac,    i,i,?i,  T,Rcq,Ucm,m,?Rac,c,?Rac,Cm3,i\"))]\n+  [(set (match_operand:HI 0 \"move_dest_operand\" \"=q, q,r,q,   h, w, w,???w,q,h, w,q,S,  r,r, Ucm,m,???m,  m,VUsc\")\n+\t(match_operand:HI 1 \"move_src_operand\" \" rL,rP,q,P,hCm1,cL, I,?Rac,i,i,?i,T,q,Ucm,m,?Rac,c,?Rac,Cm3,i\"))]\n   \"register_operand (operands[0], HImode)\n    || register_operand (operands[1], HImode)\n    || (CONSTANT_P (operands[1])\n@@ -793,8 +791,8 @@ archs4x, archs4xd\"\n ; the iscompact attribute allows the epilogue expander to know for which\n ; insns it should lengthen the return insn.\n (define_insn_and_split \"*movsi_insn\"\t\t; 0  1 2 3    4   5 6   7   8   9  10  11  12  13  14  15  16    17      18  19  20    21   22 23  24   25 26  27  28\n-  [(set (match_operand:SI 0 \"move_dest_operand\" \"=q, q,r,q,   h, rl,r,  r,  r,  r, ?r,  r,  q,  h, rl,  q,  S,   Us<,RcqRck,!*x,  r,!*Rsd,!*Rcd,r,Ucm,  Usd,m,  m,VUsc\")\n-\t(match_operand:SI 1 \"move_src_operand\"  \"rL,rP,q,P,hCm1,rLl,I,Clo,Chi,Cbi,Cpc,Clb,Cax,Cal,Cal,Uts,Rcq,RcqRck,   Us>,Usd,Ucm,  Usd,  Ucd,m,  r,!*Rzd,r,Cm3, C32\"))]\n+  [(set (match_operand:SI 0 \"move_dest_operand\" \"=q, q,r,q,   h, rl,r,  r,  r,  r, ?r,  r,  q,  h, rl,  q,  S,   Us<,qRck,!*x,  r,!*Rsd,!*Rcd,r,Ucm,  Usd,m,  m,VUsc\")\n+\t(match_operand:SI 1 \"move_src_operand\"  \"rL,rP,q,P,hCm1,rLl,I,Clo,Chi,Cbi,Cpc,Clb,Cax,Cal,Cal,Uts,q,qRck,   Us>,Usd,Ucm,  Usd,  Ucd,m,  r,!*Rzd,r,Cm3, C32\"))]\n   \"register_operand (operands[0], SImode)\n    || register_operand (operands[1], SImode)\n    || (CONSTANT_P (operands[1])\n@@ -998,8 +996,8 @@ archs4x, archs4xd\"\n      (match_operand 0 \"cc_register\" \"\")\n      (match_operator 4 \"zn_compare_operator\"\n        [(and:SI\n-\t  (match_operand:SI 1 \"register_operand\"  \"%Rcq,Rcq, c,  c,  c,  c,Rrq,Rrq,  c\")\n-\t  (match_operand:SI 2 \"nonmemory_operand\"  \"Rcq,C0p,cI,C1p,Ccp,Chs,Cbf,Cbf,???Cal\"))\n+\t  (match_operand:SI 1 \"register_operand\"  \"%q,  q, c,  c,  c,  c,  q,  q,  c\")\n+\t  (match_operand:SI 2 \"nonmemory_operand\"  \"q,C0p,cI,C1p,Ccp,Chs,Cbf,Cbf,???Cal\"))\n \t(const_int 0)]))\n    (clobber (match_scratch:SI 3 \"=X,X,X,X,X,X,Rrq,1,c\"))]\n   \"TARGET_NPS_BITOPS\"\n@@ -1014,9 +1012,9 @@ archs4x, archs4xd\"\n      (match_operator 3 \"zn_compare_operator\"\n        [(and:SI\n \t  (match_operand:SI 1 \"register_operand\"\n-\t   \"%Rcq,Rcq, c, c, c,  c,  c,  c\")\n+\t   \"%q,  q, c, c, c,  c,  c,  c\")\n \t  (match_operand:SI 2 \"nonmemory_operand\"\n-\t   \" Rcq,C0p,cI,cL,C1p,Ccp,Chs,Cal\"))\n+\t   \" q,C0p,cI,cL,C1p,Ccp,Chs,Cal\"))\n \t(const_int 0)]))]\n   \"reload_completed\n    || !satisfies_constraint_Cbf (operands[2])\n@@ -1092,9 +1090,9 @@ archs4x, archs4xd\"\n   [(set (match_operand:CC_ZN 0 \"cc_set_register\" \"\")\n \t(match_operator 5 \"zn_compare_operator\"\n \t  [(zero_extract:SI\n-\t     (match_operand:SI 1 \"register_operand\" \"%Rcqq,c,  c,Rrq,c\")\n-\t     (match_operand:SI 2 \"const_int_operand\"    \"N,N,  n,Cbn,n\")\n-\t     (match_operand:SI 3 \"const_int_operand\"    \"n,n,C_0,Cbn,n\"))\n+\t     (match_operand:SI 1 \"register_operand\" \"%q,c,  c,Rrq,c\")\n+\t     (match_operand:SI 2 \"const_int_operand\" \"N,N,  n,Cbn,n\")\n+\t     (match_operand:SI 3 \"const_int_operand\" \"n,n,C_0,Cbn,n\"))\n \t   (const_int 0)]))\n    (clobber (match_scratch:SI 4 \"=X,X,X,Rrq,X\"))]\n   \"\"\n@@ -1678,7 +1676,7 @@ archs4x, archs4xd\"\n   \"\"\n {\n   if (rtx_equal_p (operands[1], const0_rtx) && GET_CODE (operands[3]) == NE\n-      && satisfies_constraint_Rcq (operands[0]))\n+      && IN_RANGE (REGNO (operands[0]) ^ 4, 4, 11))\n     return \"sub%?.ne %0,%0,%0\";\n   /* ??? might be good for speed on ARC600 too, *if* properly scheduled.  */\n   if ((optimize_size && (!TARGET_ARC600_FAMILY))\n@@ -1980,8 +1978,8 @@ archs4x, archs4xd\"\n ;; Absolute instructions\n \n (define_insn \"abssi2\"\n-  [(set (match_operand:SI 0 \"dest_reg_operand\" \"=Rcq#q,w,w\")\n-\t(abs:SI (match_operand:SI 1 \"nonmemory_operand\" \"Rcq#q,cL,Cal\")))]\n+  [(set (match_operand:SI 0 \"dest_reg_operand\" \"=q,w,w\")\n+\t(abs:SI (match_operand:SI 1 \"nonmemory_operand\" \"q,cL,Cal\")))]\n   \"\"\n   \"abs%? %0,%1%&\"\n   [(set_attr \"type\" \"two_cycle_core\")\n@@ -2028,10 +2026,10 @@ archs4x, archs4xd\"\n ; We avoid letting this pattern use LP_COUNT as a register by specifying\n ;  register class 'W' instead of 'w'.\n (define_insn_and_split \"*addsi3_mixed\"\n-  ;;                                                      0       1    2     3   4   5   6     7    8  9 a    b     c   d e   f   10  11  12\n-  [(set (match_operand:SI 0 \"dest_reg_operand\"          \"=Rcq#q,Rcq,   h,!*Rsd,Rcq,Rcb,Rcq, Rcqq,Rcqq, r,r,   r,    W,  W,W,  W,Rcqq,  r,  W\")\n-\t(plus:SI (match_operand:SI 1 \"register_operand\" \"%0,      c,   0, Rcqq,  0,  0,Rcb, Rcqq,   0, 0,r,   0,    c,  c,0,  0,   0,  0,  c\")\n-\t\t (match_operand:SI 2 \"nonmemory_operand\" \"cL,     0, Cm1,    L,CL2,Csp,CM4,RcqqK,  cO,rL,0,rCca,cLCmL,Cca,I,C2a, Cal,Cal,Cal\")))]\n+  ;;                                                      0  1    2     3   4   5   6  7  8  9 a    b     c   d e   f  10  11  12\n+  [(set (match_operand:SI 0 \"dest_reg_operand\"           \"=q,q,   h,!*Rsd,  q,Rcb,  q, q, q, r,r,   r,    W,  W,W,  W,  q,  r,  W\")\n+\t(plus:SI (match_operand:SI 1 \"register_operand\"  \"%0,c,   0,    q,  0,  0,Rcb, q, 0, 0,r,   0,    c,  c,0,  0,  0,  0,  c\")\n+\t\t (match_operand:SI 2 \"nonmemory_operand\" \"cL,0, Cm1,    L,CL2,Csp,CM4,qK,cO,rL,0,rCca,cLCmL,Cca,I,C2a,Cal,Cal,Cal\")))]\n   \"\"\n {\n   arc_output_addsi (operands, arc_ccfsm_cond_exec_p (), true);\n@@ -2083,9 +2081,9 @@ archs4x, archs4xd\"\n    ])\n \n (define_insn \"mulhisi3_reg\"\n-  [(set (match_operand:SI 0 \"register_operand\"                          \"=Rcqq,r,r\")\n-\t(mult:SI (sign_extend:SI (match_operand:HI 1 \"register_operand\"  \"   0,0,r\"))\n-\t\t (sign_extend:SI (match_operand:HI 2 \"nonmemory_operand\" \"Rcqq,r,r\"))))]\n+  [(set (match_operand:SI 0 \"register_operand\"                          \"=q,r,r\")\n+\t(mult:SI (sign_extend:SI (match_operand:HI 1 \"register_operand\"  \"0,0,r\"))\n+\t\t (sign_extend:SI (match_operand:HI 2 \"nonmemory_operand\" \"q,r,r\"))))]\n   \"TARGET_MPYW\"\n   \"mpyw%? %0,%1,%2\"\n   [(set_attr \"length\" \"*,4,4\")\n@@ -2123,9 +2121,9 @@ archs4x, archs4xd\"\n    ])\n \n (define_insn \"umulhisi3_reg\"\n-  [(set (match_operand:SI 0 \"register_operand\"                          \"=Rcqq, r, r\")\n-\t(mult:SI (zero_extend:SI (match_operand:HI 1 \"register_operand\" \"   %0, 0, r\"))\n-\t\t (zero_extend:SI (match_operand:HI 2 \"register_operand\" \" Rcqq, r, r\"))))]\n+  [(set (match_operand:SI 0 \"register_operand\"                          \"=q, r, r\")\n+\t(mult:SI (zero_extend:SI (match_operand:HI 1 \"register_operand\" \"%0, 0, r\"))\n+\t\t (zero_extend:SI (match_operand:HI 2 \"register_operand\"  \"q, r, r\"))))]\n   \"TARGET_MPYW\"\n   \"mpyuw%? %0,%1,%2\"\n   [(set_attr \"length\" \"*,4,4\")\n@@ -2246,8 +2244,8 @@ archs4x, archs4xd\"\n \n (define_insn \"mulsi_600\"\n   [(set (match_operand:SI 2 \"mlo_operand\" \"\")\n-\t(mult:SI (match_operand:SI 0 \"register_operand\"  \"%Rcq#q,c,c,c\")\n-\t\t (match_operand:SI 1 \"nonmemory_operand\" \"Rcq#q,cL,I,Cal\")))\n+\t(mult:SI (match_operand:SI 0 \"register_operand\" \"%q,c,c,c\")\n+\t\t (match_operand:SI 1 \"nonmemory_operand\" \"q,cL,I,Cal\")))\n    (clobber (match_operand:SI 3 \"mhi_operand\" \"\"))]\n   \"TARGET_MUL64_SET\"\n   \"mul64%?\\\\t0,%0,%1\"\n@@ -2282,8 +2280,8 @@ archs4x, archs4xd\"\n (define_insn \"mul64\"\n   [(set (reg:DI MUL64_OUT_REG)\n \t(mult:DI\n-\t (sign_extend:DI (match_operand:SI 0 \"register_operand\" \"%Rcq#q, c,c,  c\"))\n-\t (sign_extend:DI (match_operand:SI 1 \"nonmemory_operand\" \"Rcq#q,cL,L,C32\"))))]\n+\t (sign_extend:DI (match_operand:SI 0 \"register_operand\" \"%q, c,c,  c\"))\n+\t (sign_extend:DI (match_operand:SI 1 \"nonmemory_operand\" \"q,cL,L,C32\"))))]\n   \"TARGET_MUL64_SET\"\n   \"mul64%? \\t0, %0, %1%&\"\n   [(set_attr \"length\" \"*,4,4,8\")\n@@ -2895,9 +2893,9 @@ archs4x, archs4xd\"\n ; the casesi expander might generate a sub of zero, so we have to recognize it.\n ; combine should make such an insn go away.\n (define_insn_and_split \"subsi3_insn\"\n-  [(set (match_operand:SI 0 \"dest_reg_operand\"           \"=Rcqq,Rcqq,r, r,r,r,r,  r,  r,  r\")\n-\t(minus:SI (match_operand:SI 1 \"nonmemory_operand\"    \"0,Rcqq,0,rL,r,L,I,Cal,Cal,  r\")\n-\t\t  (match_operand:SI 2 \"nonmemory_operand\" \"Rcqq,Rcqq,r, 0,r,r,0,  0,  r,Cal\")))]\n+  [(set (match_operand:SI 0 \"dest_reg_operand\"           \"=q,q,r, r,r,r,r,  r,  r,  r\")\n+\t(minus:SI (match_operand:SI 1 \"nonmemory_operand\" \"0,q,0,rL,r,L,I,Cal,Cal,  r\")\n+\t\t  (match_operand:SI 2 \"nonmemory_operand\" \"q,q,r, 0,r,r,0,  0,  r,Cal\")))]\n   \"register_operand (operands[1], SImode)\n    || register_operand (operands[2], SImode)\"\n   \"@\n@@ -3282,8 +3280,8 @@ archs4x, archs4xd\"\n \n ;;bic define_insn that allows limm to be the first operand\n (define_insn \"*bicsi3_insn\"\n-   [(set (match_operand:SI 0 \"dest_reg_operand\" \"=Rcqq,r,r,r,r,r,r\")\n- \t(and:SI\t(not:SI (match_operand:SI 1 \"nonmemory_operand\" \"Rcqq,Lr,I,Cal,Lr,Cal,r\"))\n+   [(set (match_operand:SI 0 \"dest_reg_operand\" \"=q,r,r,r,r,r,r\")\n+ \t(and:SI\t(not:SI (match_operand:SI 1 \"nonmemory_operand\" \"q,Lr,I,Cal,Lr,Cal,r\"))\n  \t\t(match_operand:SI 2 \"nonmemory_operand\" \"0,0,0,0,r,r,Cal\")))]\n   \"\"\n   \"@\n@@ -3334,9 +3332,9 @@ archs4x, archs4xd\"\n    (set_attr \"cond\" \"canuse,canuse,canuse,canuse,canuse,canuse,canuse_limm,nocond,nocond,canuse_limm,nocond,canuse,nocond\")])\n \n (define_insn \"xorsi3\"\n-  [(set (match_operand:SI 0 \"dest_reg_operand\"          \"=Rcqq,Rcq, r,r,  r,r, r,  r,r,  r,  r\")\n-\t(xor:SI (match_operand:SI 1 \"register_operand\"  \"%0,   Rcq, 0,r,  0,0, r,  r,0,  0,  r\")\n-\t\t(match_operand:SI 2 \"nonmemory_operand\" \" Rcqq,  0,rL,0,C0p,I,rL,C0p,I,Cal,Cal\")))]\n+  [(set (match_operand:SI 0 \"dest_reg_operand\"         \"=q,q, r,r,  r,r, r,  r,r,  r,  r\")\n+\t(xor:SI (match_operand:SI 1 \"register_operand\" \"%0,q, 0,r,  0,0, r,  r,0,  0,  r\")\n+\t\t(match_operand:SI 2 \"nonmemory_operand\" \"q,0,rL,0,C0p,I,rL,C0p,I,Cal,Cal\")))]\n   \"\"\n   \"*\n   switch (which_alternative)\n@@ -3358,17 +3356,17 @@ archs4x, archs4xd\"\n    (set_attr \"cond\" \"canuse,canuse,canuse,canuse,canuse,canuse_limm,nocond,nocond,canuse_limm,canuse,nocond\")])\n \n (define_insn \"negsi2\"\n-  [(set (match_operand:SI 0 \"dest_reg_operand\" \"=Rcqq,Rcqq,r,r\")\n-\t(neg:SI (match_operand:SI 1 \"register_operand\" \"0,Rcqq,0,r\")))]\n+  [(set (match_operand:SI 0 \"dest_reg_operand\" \"=q,q,r,r\")\n+\t(neg:SI (match_operand:SI 1 \"register_operand\" \"0,q,0,r\")))]\n   \"\"\n   \"neg%?\\\\t%0,%1%&\"\n   [(set_attr \"type\" \"unary\")\n    (set_attr \"iscompact\" \"maybe,true,false,false\")\n    (set_attr \"predicable\" \"no,no,yes,no\")])\n \n (define_insn \"one_cmplsi2\"\n-  [(set (match_operand:SI 0 \"dest_reg_operand\" \"=Rcqq,w\")\n-\t(not:SI (match_operand:SI 1 \"register_operand\" \"Rcqq,c\")))]\n+  [(set (match_operand:SI 0 \"dest_reg_operand\" \"=q,w\")\n+\t(not:SI (match_operand:SI 1 \"register_operand\" \"q,c\")))]\n   \"\"\n   \"not%? %0,%1%&\"\n   [(set_attr \"type\" \"unary,unary\")\n@@ -3498,9 +3496,9 @@ archs4x, archs4xd\"\n    (set_attr \"cond\" \"canuse,nocond,canuse,canuse,nocond,nocond\")])\n \n (define_insn \"*lshrsi3_insn\"\n-  [(set (match_operand:SI 0 \"dest_reg_operand\"             \"=Rcq,Rcqq,Rcqq, r, r,   r\")\n-\t(lshiftrt:SI (match_operand:SI 1 \"nonmemory_operand\" \"!0,Rcqq,   0, 0, r,rCal\")\n-\t\t     (match_operand:SI 2 \"nonmemory_operand\"  \"N,  N,RcqqM,rL,rL,rCal\")))]\n+  [(set (match_operand:SI 0 \"dest_reg_operand\"               \"=q,q, q, r, r,   r\")\n+\t(lshiftrt:SI (match_operand:SI 1 \"nonmemory_operand\" \"!0,q, 0, 0, r,rCal\")\n+\t\t     (match_operand:SI 2 \"nonmemory_operand\"  \"N,N,qM,rL,rL,rCal\")))]\n   \"TARGET_BARREL_SHIFTER\n    && (register_operand (operands[1], SImode)\n        || register_operand (operands[2], SImode))\"\n@@ -3546,8 +3544,8 @@ archs4x, archs4xd\"\n ;; modifed cc user if second, but not first operand is a compact register.\n (define_insn \"cmpsi_cc_insn_mixed\"\n   [(set (reg:CC CC_REG)\n-\t(compare:CC (match_operand:SI 0 \"register_operand\" \"Rcq#q,Rcqq,  h, c, c,qRcq,c\")\n-\t\t    (match_operand:SI 1 \"nonmemory_operand\"   \"cO,  hO,Cm1,cI,cL, Cal,Cal\")))]\n+\t(compare:CC (match_operand:SI 0 \"register_operand\"   \"q, q,  h, c, c,  q,c\")\n+\t\t    (match_operand:SI 1 \"nonmemory_operand\" \"cO,hO,Cm1,cI,cL,Cal,Cal\")))]\n   \"\"\n   \"cmp%? %0,%B1%&\"\n   [(set_attr \"type\" \"compare\")\n@@ -3559,7 +3557,7 @@ archs4x, archs4xd\"\n \n (define_insn \"*cmpsi_cc_zn_insn\"\n   [(set (reg:CC_ZN CC_REG)\n-\t(compare:CC_ZN (match_operand:SI 0 \"register_operand\"  \"qRcq,c\")\n+\t(compare:CC_ZN (match_operand:SI 0 \"register_operand\"  \"q,c\")\n \t\t       (const_int 0)))]\n   \"\"\n   \"tst%? %0,%0%&\"\n@@ -3573,7 +3571,7 @@ archs4x, archs4xd\"\n (define_insn \"*btst\"\n   [(set (reg:CC_ZN CC_REG)\n \t(compare:CC_ZN\n-\t  (zero_extract:SI (match_operand:SI 0 \"register_operand\" \"Rcqq,c\")\n+\t  (zero_extract:SI (match_operand:SI 0 \"register_operand\" \"q,c\")\n \t\t\t   (const_int 1)\n \t\t\t   (match_operand:SI 1 \"nonmemory_operand\" \"L,Lc\"))\n \t  (const_int 0)))]\n@@ -3618,7 +3616,7 @@ archs4x, archs4xd\"\n \n (define_insn \"*cmpsi_cc_z_insn\"\n   [(set (reg:CC_Z CC_REG)\n-\t(compare:CC_Z (match_operand:SI 0 \"register_operand\"  \"qRcq,c\")\n+\t(compare:CC_Z (match_operand:SI 0 \"register_operand\"  \"q,c\")\n \t\t      (match_operand:SI 1 \"p2_immediate_operand\"  \"O,n\")))]\n   \"\"\n   \"@\n@@ -3631,8 +3629,8 @@ archs4x, archs4xd\"\n \n (define_insn \"*cmpsi_cc_c_insn\"\n   [(set (reg:CC_C CC_REG)\n-\t(compare:CC_C (match_operand:SI 0 \"register_operand\"  \"Rcqq,Rcqq,  h, c,Rcqq,  c\")\n-\t\t      (match_operand:SI 1 \"nonmemory_operand\"   \"cO,  hO,Cm1,cI, Cal,Cal\")))]\n+\t(compare:CC_C (match_operand:SI 0 \"register_operand\"   \"q, q,  h, c,  q,  c\")\n+\t\t      (match_operand:SI 1 \"nonmemory_operand\" \"cO,hO,Cm1,cI,Cal,Cal\")))]\n   \"\"\n   \"cmp%? %0,%1%&\"\n   [(set_attr \"type\" \"compare\")\n@@ -3944,7 +3942,7 @@ archs4x, archs4xd\"\n \t (const_int 2)))])\n \n (define_insn \"indirect_jump\"\n-  [(set (pc) (match_operand:SI 0 \"nonmemory_operand\" \"L,I,Cal,Rcqq,r\"))]\n+  [(set (pc) (match_operand:SI 0 \"nonmemory_operand\" \"L,I,Cal,q,r\"))]\n   \"\"\n   \"@\n    j%!%* %0%&\n@@ -4076,7 +4074,7 @@ archs4x, archs4xd\"\n ; Unlike the canonical tablejump, this pattern always uses a jump address,\n ; even for CASE_VECTOR_PC_RELATIVE.\n (define_insn \"casesi_jump\"\n-  [(set (pc) (match_operand:SI 0 \"register_operand\" \"Cal,Rcqq,c\"))\n+  [(set (pc) (match_operand:SI 0 \"register_operand\" \"Cal,q,c\"))\n    (use (label_ref (match_operand 1 \"\" \"\")))]\n   \"\"\n   \"j%!%* [%0]%&\"\n@@ -4106,17 +4104,15 @@ archs4x, archs4xd\"\n   }\n \")\n \n-; Rcq, which is used in alternative 0, checks for conditional execution.\n ; At instruction output time, if it doesn't match and we end up with\n ; alternative 1 (\"q\"), that means that we can't use the short form.\n (define_insn \"*call_i\"\n   [(call (mem:SI (match_operand:SI 0\n-\t\t  \"call_address_operand\" \"Rcq,q,c,Cji,Csc,Cbp,Cbr,L,I,Cal\"))\n+\t\t  \"call_address_operand\" \"q,c,Cji,Csc,Cbp,Cbr,L,I,Cal\"))\n \t (match_operand 1 \"\" \"\"))\n    (clobber (reg:SI 31))]\n   \"\"\n   \"@\n-   jl%!%* [%0]%&\n    jl%!%* [%0]%&\n    jl%!%* [%0]\n    jli_s %S0\n@@ -4126,10 +4122,10 @@ archs4x, archs4xd\"\n    jl%!%* %0\n    jl%* %0\n    jl%! %0\"\n-  [(set_attr \"type\" \"call,call,call,call_no_delay_slot,call_no_delay_slot,call,call,call,call,call_no_delay_slot\")\n-   (set_attr \"iscompact\" \"maybe,false,*,true,*,*,*,*,*,*\")\n-   (set_attr \"predicable\" \"no,no,yes,no,no,yes,no,yes,no,yes\")\n-   (set_attr \"length\" \"*,*,4,2,4,4,4,4,4,8\")])\n+  [(set_attr \"type\" \"call,call,call_no_delay_slot,call_no_delay_slot,call,call,call,call,call_no_delay_slot\")\n+   (set_attr \"iscompact\" \"maybe,*,true,*,*,*,*,*,*\")\n+   (set_attr \"predicable\" \"no,yes,no,no,yes,no,yes,no,yes\")\n+   (set_attr \"length\" \"*,4,2,4,4,4,4,4,8\")])\n \n (define_expand \"call_value\"\n   ;; operand 2 is stack_size_rtx\n@@ -4151,18 +4147,16 @@ archs4x, archs4xd\"\n       XEXP (operands[1], 0) = force_reg (Pmode, callee);\n   }\")\n \n-; Rcq, which is used in alternative 0, checks for conditional execution.\n ; At instruction output time, if it doesn't match and we end up with\n ; alternative 1 (\"q\"), that means that we can't use the short form.\n (define_insn \"*call_value_i\"\n-  [(set (match_operand 0 \"dest_reg_operand\"  \"=Rcq,q,w,  w,  w,  w,  w,w,w,  w\")\n+  [(set (match_operand 0 \"dest_reg_operand\"  \"=q,w,  w,  w,  w,  w,w,w,  w\")\n \t(call (mem:SI (match_operand:SI 1\n-\t\t       \"call_address_operand\" \"Rcq,q,c,Cji,Csc,Cbp,Cbr,L,I,Cal\"))\n+\t\t       \"call_address_operand\" \"q,c,Cji,Csc,Cbp,Cbr,L,I,Cal\"))\n \t      (match_operand 2 \"\" \"\")))\n    (clobber (reg:SI 31))]\n   \"\"\n   \"@\n-   jl%!%* [%1]%&\n    jl%!%* [%1]%&\n    jl%!%* [%1]\n    jli_s %S1\n@@ -4172,10 +4166,10 @@ archs4x, archs4xd\"\n    jl%!%* %1\n    jl%* %1\n    jl%! %1\"\n-  [(set_attr \"type\" \"call,call,call,call_no_delay_slot,call_no_delay_slot,call,call,call,call,call_no_delay_slot\")\n-   (set_attr \"iscompact\" \"maybe,false,*,true,false,*,*,*,*,*\")\n-   (set_attr \"predicable\" \"no,no,yes,no,no,yes,no,yes,no,yes\")\n-   (set_attr \"length\" \"*,*,4,2,4,4,4,4,4,8\")])\n+  [(set_attr \"type\" \"call,call,call_no_delay_slot,call_no_delay_slot,call,call,call,call,call_no_delay_slot\")\n+   (set_attr \"iscompact\" \"maybe,*,true,false,*,*,*,*,*\")\n+   (set_attr \"predicable\" \"no,yes,no,no,yes,no,yes,no,yes\")\n+   (set_attr \"length\" \"*,4,2,4,4,4,4,4,8\")])\n \n ; There is a bl_s instruction (16 bit opcode branch-and-link), but we can't\n ; use it for lack of inter-procedural branch shortening.\n@@ -4943,7 +4937,7 @@ archs4x, archs4xd\"\n   [(set (pc)\n \t(if_then_else\n \t  (match_operator 3 \"equality_comparison_operator\"\n-\t    [(zero_extract:SI (match_operand:SI 1 \"register_operand\" \"Rcqq,c\")\n+\t    [(zero_extract:SI (match_operand:SI 1 \"register_operand\"  \"q,c\")\n \t\t\t      (const_int 1)\n \t\t\t      (match_operand:SI 2 \"nonmemory_operand\" \"L,Lc\"))\n \t     (const_int 0)])\n@@ -5153,7 +5147,7 @@ archs4x, archs4xd\"\n    (set_attr \"predicable\" \"yes\")])\n \n (define_insn \"abssf2\"\n-  [(set (match_operand:SF 0 \"dest_reg_operand\"    \"=Rcq#q,r,r\")\n+  [(set (match_operand:SF 0 \"dest_reg_operand\"    \"=q,r,r\")\n \t(abs:SF (match_operand:SF 1 \"register_operand\" \"0,0,r\")))]\n   \"\"\n   \"bclr%?\\\\t%0,%1,31%&\"\n@@ -5966,8 +5960,8 @@ archs4x, archs4xd\"\n    (set_attr \"length\" \"4\")])\n \n (define_insn \"*ashlsi2_cnt1\"\n-  [(set (match_operand:SI 0 \"dest_reg_operand\"           \"=Rcqq,w\")\n-\t(ashift:SI (match_operand:SI 1 \"register_operand\" \"Rcqq,c\")\n+  [(set (match_operand:SI 0 \"dest_reg_operand\"           \"=q,w\")\n+\t(ashift:SI (match_operand:SI 1 \"register_operand\" \"q,c\")\n \t\t   (const_int 1)))]\n   \"\"\n   \"asl%? %0,%1%&\"\n@@ -5999,8 +5993,8 @@ archs4x, archs4xd\"\n    (set_attr \"predicable\" \"no\")])\n \n (define_insn \"*lshrsi3_cnt1\"\n-  [(set (match_operand:SI 0 \"dest_reg_operand\"             \"=Rcqq,w\")\n-\t(lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"Rcqq,c\")\n+  [(set (match_operand:SI 0 \"dest_reg_operand\"             \"=q,w\")\n+\t(lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"q,c\")\n \t\t     (const_int 1)))]\n   \"\"\n   \"lsr%? %0,%1%&\"\n@@ -6009,8 +6003,8 @@ archs4x, archs4xd\"\n    (set_attr \"predicable\" \"no,no\")])\n \n (define_insn \"*ashrsi3_cnt1\"\n-  [(set (match_operand:SI 0 \"dest_reg_operand\"             \"=Rcqq,w\")\n-\t(ashiftrt:SI (match_operand:SI 1 \"register_operand\" \"Rcqq,c\")\n+  [(set (match_operand:SI 0 \"dest_reg_operand\"             \"=q,w\")\n+\t(ashiftrt:SI (match_operand:SI 1 \"register_operand\" \"q,c\")\n \t\t     (const_int 1)))]\n   \"\"\n   \"asr%? %0,%1%&\""}, {"sha": "38bda1230b8df9496b8886660cf6b5f0a8a8ce64", "filename": "gcc/config/arc/constraints.md", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8f5074f486a2423355703483a8626a4ffe9fe47/gcc%2Fconfig%2Farc%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8f5074f486a2423355703483a8626a4ffe9fe47/gcc%2Fconfig%2Farc%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Fconstraints.md?ref=e8f5074f486a2423355703483a8626a4ffe9fe47", "patch": "@@ -432,26 +432,6 @@\n \t       && !arc_legitimate_pic_addr_p (op)\n \t       && !(satisfies_constraint_I (op) && optimize_size)\"))\n \n-; Note that the 'cryptic' register constraints will not make reload use the\n-; associated class to reload into, but this will not penalize reloading of any\n-; other operands, or using an alternate part of the same alternative.\n-\n-; Rcq is different in three important ways from a register class constraint:\n-; - It does not imply a register class, hence reload will not use it to drive\n-;   reloads.\n-; - It matches even when there is no register class to describe its accepted\n-;   set; not having such a set again lessens the impact on register allocation.\n-; - It won't match when the instruction is conditionalized by the ccfsm.\n-(define_constraint \"Rcq\"\n-  \"@internal\n-   Cryptic q - for short insn generation while not affecting register allocation\n-   Registers usable in ARCompact 16-bit instructions: @code{r0}-@code{r3},\n-   @code{r12}-@code{r15}\"\n-  (and (match_code \"reg\")\n-       (match_test \"TARGET_Rcq\n-\t\t    && !arc_ccfsm_cond_exec_p ()\n-\t\t    && IN_RANGE (REGNO (op) ^ 4, 4, 11)\")))\n-\n (define_constraint \"Rcb\"\n   \"@internal\n    Stack Pointer register @code{r28} - do not reload into its class\""}]}