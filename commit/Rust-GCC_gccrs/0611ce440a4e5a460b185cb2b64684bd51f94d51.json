{"sha": "0611ce440a4e5a460b185cb2b64684bd51f94d51", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDYxMWNlNDQwYTRlNWE0NjBiMTg1Y2IyYjY0Njg0YmQ1MWY5NGQ1MQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2012-11-07T00:42:19Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2012-11-07T00:42:19Z"}, "message": "re PR libstdc++/51850 (debug mode for std::array and tr1::array)\n\n2012-11-06  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/51850\n\t* include/debug/array: New, debug-mode implementation.\n\t* include/profile/array: New.\n\t* include/std/array: Adjust.\n\t* include/std/tuple: Just include <array>.\n\t* include/Makefile.am: Add.\n\t* include/Makefile.in: Regenerate.\n\t* testsuite/23_containers/array/debug/front1_neg.cc: New.\n\t* testsuite/23_containers/array/debug/\n\tsquare_brackets_operator1_neg.cc: Likewise.\n\t* testsuite/23_containers/array/debug/front2_neg.cc: Likewise.\n\t* testsuite/23_containers/array/debug/\n\tsquare_brackets_operator2_neg.cc: Likewise.\n\t* testsuite/23_containers/array/debug/back1_neg.cc: Likewise.\n\t* testsuite/23_containers/array/debug/back2_neg.cc: Likewise.\n\t* testsuite/23_containers/array/tuple_interface/get_neg.cc: Tweak\n\tto run only in normal-mode.\n\t* testsuite/23_containers/array/tuple_interface/tuple_element_neg.cc:\n\tLikewise.\n\t* testsuite/23_containers/array/tuple_interface/get_debug_neg.cc: New.\n\t* testsuite/23_containers/array/tuple_interface/\n\ttuple_element_debug_neg.cc: Likewise.\n\nFrom-SVN: r193278", "tree": {"sha": "741a30909f4921e02c019708ac9d7d15e93ecafe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/741a30909f4921e02c019708ac9d7d15e93ecafe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0611ce440a4e5a460b185cb2b64684bd51f94d51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0611ce440a4e5a460b185cb2b64684bd51f94d51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0611ce440a4e5a460b185cb2b64684bd51f94d51", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0611ce440a4e5a460b185cb2b64684bd51f94d51/comments", "author": null, "committer": null, "parents": [{"sha": "bff0e5295af23c7947f7b4804a72e86aeca0ce56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bff0e5295af23c7947f7b4804a72e86aeca0ce56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bff0e5295af23c7947f7b4804a72e86aeca0ce56"}], "stats": {"total": 938, "additions": 912, "deletions": 26}, "files": [{"sha": "184efed35253ac898ca726043a88e546b6c2537f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0611ce440a4e5a460b185cb2b64684bd51f94d51/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0611ce440a4e5a460b185cb2b64684bd51f94d51/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0611ce440a4e5a460b185cb2b64684bd51f94d51", "patch": "@@ -1,3 +1,28 @@\n+2012-11-06  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR libstdc++/51850\n+\t* include/debug/array: New, debug-mode implementation.\n+\t* include/profile/array: New.\n+\t* include/std/array: Adjust.\n+\t* include/std/tuple: Just include <array>.\n+\t* include/Makefile.am: Add.\n+\t* include/Makefile.in: Regenerate.\n+\t* testsuite/23_containers/array/debug/front1_neg.cc: New.\n+\t* testsuite/23_containers/array/debug/\n+\tsquare_brackets_operator1_neg.cc: Likewise.\n+\t* testsuite/23_containers/array/debug/front2_neg.cc: Likewise.\n+\t* testsuite/23_containers/array/debug/\n+\tsquare_brackets_operator2_neg.cc: Likewise.\n+\t* testsuite/23_containers/array/debug/back1_neg.cc: Likewise.\n+\t* testsuite/23_containers/array/debug/back2_neg.cc: Likewise.\n+\t* testsuite/23_containers/array/tuple_interface/get_neg.cc: Tweak\n+\tto run only in normal-mode.\n+\t* testsuite/23_containers/array/tuple_interface/tuple_element_neg.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/array/tuple_interface/get_debug_neg.cc: New.\n+\t* testsuite/23_containers/array/tuple_interface/\n+\ttuple_element_debug_neg.cc: Likewise.\n+\n 2012-11-06  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \t* testsuite/20_util/shared_ptr/cons/55123.cc: Remove duplicate"}, {"sha": "723fc726ad395a85941b092c5cac966eea52b46d", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0611ce440a4e5a460b185cb2b64684bd51f94d51/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0611ce440a4e5a460b185cb2b64684bd51f94d51/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=0611ce440a4e5a460b185cb2b64684bd51f94d51", "patch": "@@ -705,6 +705,7 @@ endif\n debug_srcdir = ${glibcxx_srcdir}/include/debug\n debug_builddir = ./debug\n debug_headers = \\\n+\t${debug_srcdir}/array \\\n \t${debug_srcdir}/bitset \\\n \t${debug_srcdir}/debug.h \\\n \t${debug_srcdir}/deque \\\n@@ -786,6 +787,7 @@ parallel_headers = \\\n profile_srcdir = ${glibcxx_srcdir}/include/profile\n profile_builddir = ./profile\n profile_headers = \\\n+\t${profile_srcdir}/array \\\n \t${profile_srcdir}/base.h \\\n \t${profile_srcdir}/unordered_map \\\n \t${profile_srcdir}/unordered_set \\"}, {"sha": "0b4e742d09ad667a19ae204522345628e1f1decf", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0611ce440a4e5a460b185cb2b64684bd51f94d51/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0611ce440a4e5a460b185cb2b64684bd51f94d51/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=0611ce440a4e5a460b185cb2b64684bd51f94d51", "patch": "@@ -958,6 +958,7 @@ c_compatibility_builddir = .\n debug_srcdir = ${glibcxx_srcdir}/include/debug\n debug_builddir = ./debug\n debug_headers = \\\n+\t${debug_srcdir}/array \\\n \t${debug_srcdir}/bitset \\\n \t${debug_srcdir}/debug.h \\\n \t${debug_srcdir}/deque \\\n@@ -1041,6 +1042,7 @@ parallel_headers = \\\n profile_srcdir = ${glibcxx_srcdir}/include/profile\n profile_builddir = ./profile\n profile_headers = \\\n+\t${profile_srcdir}/array \\\n \t${profile_srcdir}/base.h \\\n \t${profile_srcdir}/unordered_map \\\n \t${profile_srcdir}/unordered_set \\"}, {"sha": "1cde4e216d040e5c7c553e268a7669077ab91f4d", "filename": "libstdc++-v3/include/debug/array", "status": "added", "additions": 321, "deletions": 0, "changes": 321, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0611ce440a4e5a460b185cb2b64684bd51f94d51/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Farray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0611ce440a4e5a460b185cb2b64684bd51f94d51/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Farray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Farray?ref=0611ce440a4e5a460b185cb2b64684bd51f94d51", "patch": "@@ -0,0 +1,321 @@\n+// Debugging array implementation -*- C++ -*-\n+\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file debug/array\n+ *  This is a Standard C++ Library header.\n+ */\n+\n+#ifndef _GLIBCXX_DEBUG_ARRAY\n+#define _GLIBCXX_DEBUG_ARRAY 1\n+\n+#pragma GCC system_header\n+\n+#include <debug/safe_sequence.h>\n+\n+#ifndef _GLIBCXX_THROW_OR_ABORT\n+# if __EXCEPTIONS\n+#  define _GLIBCXX_THROW_OR_ABORT(_Exc) (throw (_Exc))\n+# else\n+#  define _GLIBCXX_THROW_OR_ABORT(_Exc) (__builtin_abort())\n+# endif\n+#endif\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+namespace __debug\n+{\n+  template<typename _Tp, std::size_t _Nm>\n+    struct array\n+    {\n+      typedef _Tp \t    \t\t\t      value_type;\n+      typedef value_type*\t\t\t      pointer;\n+      typedef const value_type*                       const_pointer;\n+      typedef value_type&                   \t      reference;\n+      typedef const value_type&             \t      const_reference;\n+      typedef value_type*                             iterator;\n+      typedef const value_type*                       const_iterator;\n+      typedef std::size_t                    \t      size_type;\n+      typedef std::ptrdiff_t                   \t      difference_type;\n+      typedef std::reverse_iterator<iterator>\t      reverse_iterator;\n+      typedef std::reverse_iterator<const_iterator>   const_reverse_iterator;\n+\n+      // Support for zero-sized arrays mandatory.\n+      typedef _GLIBCXX_STD_C::__array_traits<_Tp, _Nm> _AT_Type;\n+      typename _AT_Type::_Type                         _M_elems;\n+\n+      template<std::size_t _Size>\n+\tstruct _Array_check_subscript\n+ \t{\n+\t  std::size_t size() { return _Size; }\n+\n+\t  _Array_check_subscript(std::size_t __index)\n+\t  { __glibcxx_check_subscript(__index); }\n+        };\n+\n+      template<std::size_t _Size>\n+\tstruct _Array_check_nonempty\n+ \t{\n+\t  bool empty() { return _Size == 0; }\n+\n+\t  _Array_check_nonempty()\n+\t  { __glibcxx_check_nonempty(); }\n+        };\n+\n+      // No explicit construct/copy/destroy for aggregate type.\n+\n+      // DR 776.\n+      void\n+      fill(const value_type& __u)\n+      { std::fill_n(begin(), size(), __u); }\n+\n+      void\n+      swap(array& __other)\n+      noexcept(noexcept(swap(std::declval<_Tp&>(), std::declval<_Tp&>())))\n+      { std::swap_ranges(begin(), end(), __other.begin()); }\n+\n+      // Iterators.\n+      iterator\n+      begin() noexcept\n+      { return iterator(data()); }\n+\n+      const_iterator\n+      begin() const noexcept\n+      { return const_iterator(data()); }\n+\n+      iterator\n+      end() noexcept\n+      { return iterator(data() + _Nm); }\n+\n+      const_iterator\n+      end() const noexcept\n+      { return const_iterator(data() + _Nm); }\n+\n+      reverse_iterator \n+      rbegin() noexcept\n+      { return reverse_iterator(end()); }\n+\n+      const_reverse_iterator \n+      rbegin() const noexcept\n+      { return const_reverse_iterator(end()); }\n+\n+      reverse_iterator \n+      rend() noexcept\n+      { return reverse_iterator(begin()); }\n+\n+      const_reverse_iterator \n+      rend() const noexcept\n+      { return const_reverse_iterator(begin()); }\n+\n+      const_iterator\n+      cbegin() const noexcept\n+      { return const_iterator(data()); }\n+\n+      const_iterator\n+      cend() const noexcept\n+      { return const_iterator(data() + _Nm); }\n+\n+      const_reverse_iterator \n+      crbegin() const noexcept\n+      { return const_reverse_iterator(end()); }\n+\n+      const_reverse_iterator \n+      crend() const noexcept\n+      { return const_reverse_iterator(begin()); }\n+\n+      // Capacity.\n+      constexpr size_type \n+      size() const noexcept { return _Nm; }\n+\n+      constexpr size_type \n+      max_size() const noexcept { return _Nm; }\n+\n+      constexpr bool \n+      empty() const noexcept { return size() == 0; }\n+\n+      // Element access.\n+      reference\n+      operator[](size_type __n)\n+      {\n+\t__glibcxx_check_subscript(__n);\n+\treturn _AT_Type::_S_ref(_M_elems, __n);\n+      }\n+\n+      constexpr const_reference\n+      operator[](size_type __n) const noexcept\n+      {\n+\treturn __n < _Nm ? _AT_Type::_S_ref(_M_elems, __n)\n+\t : (_GLIBCXX_THROW_OR_ABORT (_Array_check_subscript<_Nm>(__n)),\n+\t    _AT_Type::_S_ref(_M_elems, 0));\n+      }\n+\n+      reference\n+      at(size_type __n)\n+      {\n+\tif (__n >= _Nm)\n+\t  std::__throw_out_of_range(__N(\"array::at\"));\n+\treturn _AT_Type::_S_ref(_M_elems, __n);\n+      }\n+\n+      constexpr const_reference\n+      at(size_type __n) const\n+      {\n+\t// Result of conditional expression must be an lvalue so use\n+\t// boolean ? lvalue : (throw-expr, lvalue)\n+\treturn __n < _Nm ? _AT_Type::_S_ref(_M_elems, __n)\n+\t  : (std::__throw_out_of_range(__N(\"array::at\")),\n+\t     _AT_Type::_S_ref(_M_elems, 0));\n+      }\n+\n+      reference \n+      front()\n+      {\n+\t__glibcxx_check_nonempty();\n+\treturn *begin();\n+      }\n+\n+      constexpr const_reference \n+      front() const\n+      {\n+\treturn _Nm ? _AT_Type::_S_ref(_M_elems, 0)\n+\t  : (_GLIBCXX_THROW_OR_ABORT (_Array_check_nonempty<_Nm>()),\n+\t     _AT_Type::_S_ref(_M_elems, 0));\n+      }\n+\n+      reference \n+      back()\n+      {\n+\t__glibcxx_check_nonempty();\n+\treturn _Nm ? *(end() - 1) : *end();\n+      }\n+\n+      constexpr const_reference \n+      back() const\n+      {\n+\treturn _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)\n+\t  : (_GLIBCXX_THROW_OR_ABORT (_Array_check_nonempty<_Nm>()),\n+\t     _AT_Type::_S_ref(_M_elems, 0));\n+      }\n+\n+      pointer\n+      data() noexcept\n+      { return std::__addressof(_AT_Type::_S_ref(_M_elems, 0)); }\n+\n+      const_pointer\n+      data() const noexcept\n+      { return std::__addressof(_AT_Type::_S_ref(_M_elems, 0)); }\n+    };\n+\n+  // Array comparisons.\n+  template<typename _Tp, std::size_t _Nm>\n+    inline bool \n+    operator==(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)\n+    { return std::equal(__one.begin(), __one.end(), __two.begin()); }\n+\n+  template<typename _Tp, std::size_t _Nm>\n+    inline bool\n+    operator!=(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)\n+    { return !(__one == __two); }\n+\n+  template<typename _Tp, std::size_t _Nm>\n+    inline bool\n+    operator<(const array<_Tp, _Nm>& __a, const array<_Tp, _Nm>& __b)\n+    { \n+      return std::lexicographical_compare(__a.begin(), __a.end(),\n+\t\t\t\t\t  __b.begin(), __b.end()); \n+    }\n+\n+  template<typename _Tp, std::size_t _Nm>\n+    inline bool\n+    operator>(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)\n+    { return __two < __one; }\n+\n+  template<typename _Tp, std::size_t _Nm>\n+    inline bool\n+    operator<=(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)\n+    { return !(__one > __two); }\n+\n+  template<typename _Tp, std::size_t _Nm>\n+    inline bool\n+    operator>=(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)\n+    { return !(__one < __two); }\n+\n+  // Specialized algorithms.\n+  template<typename _Tp, std::size_t _Nm>\n+    inline void\n+    swap(array<_Tp, _Nm>& __one, array<_Tp, _Nm>& __two)\n+    noexcept(noexcept(__one.swap(__two)))\n+    { __one.swap(__two); }\n+\n+  template<std::size_t _Int, typename _Tp, std::size_t _Nm>\n+    constexpr _Tp&\n+    get(array<_Tp, _Nm>& __arr) noexcept\n+    {\n+      static_assert(_Int < _Nm, \"index is out of bounds\");\n+      return _GLIBCXX_STD_C::__array_traits<_Tp, _Nm>::\n+\t_S_ref(__arr._M_elems, _Int);\n+    }\n+\n+  template<std::size_t _Int, typename _Tp, std::size_t _Nm>\n+    constexpr _Tp&&\n+    get(array<_Tp, _Nm>&& __arr) noexcept\n+    {\n+      static_assert(_Int < _Nm, \"index is out of bounds\");\n+      return std::move(get<_Int>(__arr));\n+    }\n+\n+  template<std::size_t _Int, typename _Tp, std::size_t _Nm>\n+    constexpr const _Tp&\n+    get(const array<_Tp, _Nm>& __arr) noexcept\n+    {\n+      static_assert(_Int < _Nm, \"index is out of bounds\");\n+      return _GLIBCXX_STD_C::__array_traits<_Tp, _Nm>::\n+\t_S_ref(__arr._M_elems, _Int);\n+    }\n+} // namespace __debug\n+\n+  // Tuple interface to class template array.\n+\n+  /// tuple_size\n+  template<typename _Tp> \n+    class tuple_size;\n+\n+  template<typename _Tp, std::size_t _Nm>\n+    struct tuple_size<__debug::array<_Tp, _Nm>>\n+    : public integral_constant<std::size_t, _Nm> { };\n+\n+  /// tuple_element\n+  template<std::size_t _Int, typename _Tp>\n+    class tuple_element;\n+\n+  template<std::size_t _Int, typename _Tp, std::size_t _Nm>\n+    struct tuple_element<_Int, __debug::array<_Tp, _Nm>>\n+    {\n+      static_assert(_Int < _Nm, \"index is out of bounds\");\n+      typedef _Tp type;\n+    };\n+} // namespace std\n+\n+#undef _GLIBCXX_THROW_OR_ABORT\n+\n+#endif // _GLIBCXX_DEBUG_ARRAY"}, {"sha": "895d65be0102d8c46e90d33af1595e9eb5b212aa", "filename": "libstdc++-v3/include/profile/array", "status": "added", "additions": 273, "deletions": 0, "changes": 273, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0611ce440a4e5a460b185cb2b64684bd51f94d51/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Farray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0611ce440a4e5a460b185cb2b64684bd51f94d51/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Farray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Farray?ref=0611ce440a4e5a460b185cb2b64684bd51f94d51", "patch": "@@ -0,0 +1,273 @@\n+// Profile array implementation -*- C++ -*-\n+\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file profile/array\n+ *  This is a Standard C++ Library header.\n+ */\n+\n+#ifndef _GLIBCXX_PROFILE_ARRAY\n+#define _GLIBCXX_PROFILE_ARRAY 1\n+\n+#pragma GCC system_header\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+namespace __profile\n+{\n+  template<typename _Tp, std::size_t _Nm>\n+    struct array\n+    {\n+      typedef _Tp \t    \t\t\t      value_type;\n+      typedef value_type*\t\t\t      pointer;\n+      typedef const value_type*                       const_pointer;\n+      typedef value_type&                   \t      reference;\n+      typedef const value_type&             \t      const_reference;\n+      typedef value_type*                             iterator;\n+      typedef const value_type*                       const_iterator;\n+      typedef std::size_t                    \t      size_type;\n+      typedef std::ptrdiff_t                   \t      difference_type;\n+      typedef std::reverse_iterator<iterator>\t      reverse_iterator;\n+      typedef std::reverse_iterator<const_iterator>   const_reverse_iterator;\n+\n+      // Support for zero-sized arrays mandatory.\n+      typedef _GLIBCXX_STD_C::__array_traits<_Tp, _Nm> _AT_Type;\n+      typename _AT_Type::_Type                         _M_elems;\n+\n+      // No explicit construct/copy/destroy for aggregate type.\n+\n+      // DR 776.\n+      void\n+      fill(const value_type& __u)\n+      { std::fill_n(begin(), size(), __u); }\n+\n+      void\n+      swap(array& __other)\n+      noexcept(noexcept(swap(std::declval<_Tp&>(), std::declval<_Tp&>())))\n+      { std::swap_ranges(begin(), end(), __other.begin()); }\n+\n+      // Iterators.\n+      iterator\n+      begin() noexcept\n+      { return iterator(data()); }\n+\n+      const_iterator\n+      begin() const noexcept\n+      { return const_iterator(data()); }\n+\n+      iterator\n+      end() noexcept\n+      { return iterator(data() + _Nm); }\n+\n+      const_iterator\n+      end() const noexcept\n+      { return const_iterator(data() + _Nm); }\n+\n+      reverse_iterator \n+      rbegin() noexcept\n+      { return reverse_iterator(end()); }\n+\n+      const_reverse_iterator \n+      rbegin() const noexcept\n+      { return const_reverse_iterator(end()); }\n+\n+      reverse_iterator \n+      rend() noexcept\n+      { return reverse_iterator(begin()); }\n+\n+      const_reverse_iterator \n+      rend() const noexcept\n+      { return const_reverse_iterator(begin()); }\n+\n+      const_iterator\n+      cbegin() const noexcept\n+      { return const_iterator(data()); }\n+\n+      const_iterator\n+      cend() const noexcept\n+      { return const_iterator(data() + _Nm); }\n+\n+      const_reverse_iterator \n+      crbegin() const noexcept\n+      { return const_reverse_iterator(end()); }\n+\n+      const_reverse_iterator \n+      crend() const noexcept\n+      { return const_reverse_iterator(begin()); }\n+\n+      // Capacity.\n+      constexpr size_type \n+      size() const noexcept { return _Nm; }\n+\n+      constexpr size_type \n+      max_size() const noexcept { return _Nm; }\n+\n+      constexpr bool \n+      empty() const noexcept { return size() == 0; }\n+\n+      // Element access.\n+      reference\n+      operator[](size_type __n)\n+      {\treturn _AT_Type::_S_ref(_M_elems, __n); }\n+\n+      constexpr const_reference\n+      operator[](size_type __n) const noexcept\n+      { return _AT_Type::_S_ref(_M_elems, __n); }\n+\n+      reference\n+      at(size_type __n)\n+      {\n+\tif (__n >= _Nm)\n+\t  std::__throw_out_of_range(__N(\"array::at\"));\n+\treturn _AT_Type::_S_ref(_M_elems, __n);\n+      }\n+\n+      constexpr const_reference\n+      at(size_type __n) const\n+      {\n+\t// Result of conditional expression must be an lvalue so use\n+\t// boolean ? lvalue : (throw-expr, lvalue)\n+\treturn __n < _Nm ? _AT_Type::_S_ref(_M_elems, __n)\n+\t  : (std::__throw_out_of_range(__N(\"array::at\")),\n+\t     _AT_Type::_S_ref(_M_elems, 0));\n+      }\n+\n+      reference \n+      front()\n+      { return *begin(); }\n+\n+      constexpr const_reference \n+      front() const\n+      { return _AT_Type::_S_ref(_M_elems, 0); }\n+\n+      reference \n+      back()\n+      { return _Nm ? *(end() - 1) : *end(); }\n+\n+      constexpr const_reference \n+      back() const\n+      {\n+\treturn _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)\n+ \t           : _AT_Type::_S_ref(_M_elems, 0);\t  \n+      }\n+\n+      pointer\n+      data() noexcept\n+      { return std::__addressof(_AT_Type::_S_ref(_M_elems, 0)); }\n+\n+      const_pointer\n+      data() const noexcept\n+      { return std::__addressof(_AT_Type::_S_ref(_M_elems, 0)); }\n+    };\n+\n+  // Array comparisons.\n+  template<typename _Tp, std::size_t _Nm>\n+    inline bool \n+    operator==(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)\n+    { return std::equal(__one.begin(), __one.end(), __two.begin()); }\n+\n+  template<typename _Tp, std::size_t _Nm>\n+    inline bool\n+    operator!=(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)\n+    { return !(__one == __two); }\n+\n+  template<typename _Tp, std::size_t _Nm>\n+    inline bool\n+    operator<(const array<_Tp, _Nm>& __a, const array<_Tp, _Nm>& __b)\n+    { \n+      return std::lexicographical_compare(__a.begin(), __a.end(),\n+\t\t\t\t\t  __b.begin(), __b.end()); \n+    }\n+\n+  template<typename _Tp, std::size_t _Nm>\n+    inline bool\n+    operator>(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)\n+    { return __two < __one; }\n+\n+  template<typename _Tp, std::size_t _Nm>\n+    inline bool\n+    operator<=(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)\n+    { return !(__one > __two); }\n+\n+  template<typename _Tp, std::size_t _Nm>\n+    inline bool\n+    operator>=(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)\n+    { return !(__one < __two); }\n+\n+  // Specialized algorithms.\n+  template<typename _Tp, std::size_t _Nm>\n+    inline void\n+    swap(array<_Tp, _Nm>& __one, array<_Tp, _Nm>& __two)\n+    noexcept(noexcept(__one.swap(__two)))\n+    { __one.swap(__two); }\n+\n+  template<std::size_t _Int, typename _Tp, std::size_t _Nm>\n+    constexpr _Tp&\n+    get(array<_Tp, _Nm>& __arr) noexcept\n+    {\n+      static_assert(_Int < _Nm, \"index is out of bounds\");\n+      return _GLIBCXX_STD_C::__array_traits<_Tp, _Nm>::\n+\t_S_ref(__arr._M_elems, _Int);\n+    }\n+\n+  template<std::size_t _Int, typename _Tp, std::size_t _Nm>\n+    constexpr _Tp&&\n+    get(array<_Tp, _Nm>&& __arr) noexcept\n+    {\n+      static_assert(_Int < _Nm, \"index is out of bounds\");\n+      return std::move(get<_Int>(__arr));\n+    }\n+\n+  template<std::size_t _Int, typename _Tp, std::size_t _Nm>\n+    constexpr const _Tp&\n+    get(const array<_Tp, _Nm>& __arr) noexcept\n+    {\n+      static_assert(_Int < _Nm, \"index is out of bounds\");\n+      return _GLIBCXX_STD_C::__array_traits<_Tp, _Nm>::\n+\t_S_ref(__arr._M_elems, _Int);\n+    }\n+} // namespace __profile\n+\n+  // Tuple interface to class template array.\n+\n+  /// tuple_size\n+  template<typename _Tp> \n+    class tuple_size;\n+\n+  template<typename _Tp, std::size_t _Nm>\n+    struct tuple_size<__profile::array<_Tp, _Nm>>\n+    : public integral_constant<std::size_t, _Nm> { };\n+\n+  /// tuple_element\n+  template<std::size_t _Int, typename _Tp>\n+    class tuple_element;\n+\n+  template<std::size_t _Int, typename _Tp, std::size_t _Nm>\n+    struct tuple_element<_Int, __profile::array<_Tp, _Nm>>\n+    {\n+      static_assert(_Int < _Nm, \"index is out of bounds\");\n+      typedef _Tp type;\n+    };\n+} // namespace std\n+\n+#endif // _GLIBCXX_PROFILE_ARRAY"}, {"sha": "f83baa75cccc1c45b7e0ce68025d1d6b1585926d", "filename": "libstdc++-v3/include/std/array", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0611ce440a4e5a460b185cb2b64684bd51f94d51/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0611ce440a4e5a460b185cb2b64684bd51f94d51/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray?ref=0611ce440a4e5a460b185cb2b64684bd51f94d51", "patch": "@@ -41,7 +41,7 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+_GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n   template<typename _Tp, std::size_t _Nm>\n     struct __array_traits\n@@ -93,8 +93,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef std::reverse_iterator<const_iterator>   const_reverse_iterator;\n \n       // Support for zero-sized arrays mandatory.\n-      typedef std::__array_traits<_Tp, _Nm>           _AT_Type;\n-      typename _AT_Type::_Type                        _M_elems;\n+      typedef _GLIBCXX_STD_C::__array_traits<_Tp, _Nm> _AT_Type;\n+      typename _AT_Type::_Type                         _M_elems;\n \n       // No explicit construct/copy/destroy for aggregate type.\n \n@@ -210,7 +210,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       back() const\n       { \n \treturn _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1) \n- \t           : _AT_Type::_S_ref(_M_elems, _Nm); \n+ \t           : _AT_Type::_S_ref(_M_elems, 0);\n       }\n \n       pointer\n@@ -289,7 +289,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     get(array<_Tp, _Nm>& __arr) noexcept\n     {\n       static_assert(_Int < _Nm, \"index is out of bounds\");\n-      return std::__array_traits<_Tp, _Nm>::_S_ref(__arr._M_elems, _Int);\n+      return _GLIBCXX_STD_C::__array_traits<_Tp, _Nm>::\n+\t_S_ref(__arr._M_elems, _Int);\n     }\n \n   template<std::size_t _Int, typename _Tp, std::size_t _Nm>\n@@ -305,11 +306,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     get(const array<_Tp, _Nm>& __arr) noexcept\n     {\n       static_assert(_Int < _Nm, \"index is out of bounds\");\n-      return std::__array_traits<_Tp, _Nm>::_S_ref(__arr._M_elems, _Int);\n+      return _GLIBCXX_STD_C::__array_traits<_Tp, _Nm>::\n+\t_S_ref(__arr._M_elems, _Int);\n     }\n \n-_GLIBCXX_END_NAMESPACE_VERSION\n-} // namespace\n+_GLIBCXX_END_NAMESPACE_CONTAINER\n+} // namespace std\n+\n+#ifdef _GLIBCXX_DEBUG\n+# include <debug/array>\n+#endif\n+\n+#ifdef _GLIBCXX_PROFILE\n+# include <profile/array>\n+#endif\n \n #endif // __GXX_EXPERIMENTAL_CXX0X__\n "}, {"sha": "1e3cc7ed998ebd06a835c4f4faef537a5b090211", "filename": "libstdc++-v3/include/std/tuple", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0611ce440a4e5a460b185cb2b64684bd51f94d51/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0611ce440a4e5a460b185cb2b64684bd51f94d51/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple?ref=0611ce440a4e5a460b185cb2b64684bd51f94d51", "patch": "@@ -1,7 +1,6 @@\n // <tuple> -*- C++ -*-\n \n-// Copyright (C) 2007, 2008, 2009, 2010, 2011, 2012\n-// Free Software Foundation, Inc.\n+// Copyright (C) 2007-2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -37,6 +36,7 @@\n #else\n \n #include <utility>\n+#include <array>\n #include <bits/uses_allocator.h>\n \n namespace std _GLIBCXX_VISIBILITY(default)\n@@ -862,18 +862,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     forward_as_tuple(_Elements&&... __args) noexcept\n     { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }\n \n-\n-  template<typename, std::size_t> struct array;\n-\n-  template<std::size_t _Int, typename _Tp, std::size_t _Nm>\n-    constexpr _Tp& get(array<_Tp, _Nm>&) noexcept;\n-\n-  template<std::size_t _Int, typename _Tp, std::size_t _Nm>\n-    constexpr _Tp&& get(array<_Tp, _Nm>&&) noexcept;\n-\n-  template<std::size_t _Int, typename _Tp, std::size_t _Nm>\n-    constexpr const _Tp& get(const array<_Tp, _Nm>&) noexcept;\n-\n   template<typename>\n     struct __is_tuple_like_impl : false_type\n     { };"}, {"sha": "82adca430effa5561eb004b0d1948a7b28c49dac", "filename": "libstdc++-v3/testsuite/23_containers/array/debug/back1_neg.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0611ce440a4e5a460b185cb2b64684bd51f94d51/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fdebug%2Fback1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0611ce440a4e5a460b185cb2b64684bd51f94d51/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fdebug%2Fback1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fdebug%2Fback1_neg.cc?ref=0611ce440a4e5a460b185cb2b64684bd51f94d51", "patch": "@@ -0,0 +1,34 @@\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+//\n+// { dg-do run { xfail *-*-* } }\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-require-debug-mode \"\" }\n+\n+#include <array>\n+\n+void test01()\n+{\n+  std::array<int, 0> a;\n+  a.back();\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "15b6ce81b243d24eec51a3319f30f96c177d7f00", "filename": "libstdc++-v3/testsuite/23_containers/array/debug/back2_neg.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0611ce440a4e5a460b185cb2b64684bd51f94d51/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fdebug%2Fback2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0611ce440a4e5a460b185cb2b64684bd51f94d51/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fdebug%2Fback2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fdebug%2Fback2_neg.cc?ref=0611ce440a4e5a460b185cb2b64684bd51f94d51", "patch": "@@ -0,0 +1,34 @@\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+//\n+// { dg-do run { xfail *-*-* } }\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-require-debug-mode \"\" }\n+\n+#include <array>\n+\n+void test01()\n+{\n+  constexpr std::array<int, 0> a;\n+  a.back();\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "03a11c8bc3d8ddc8e8ff691e100e337c3ffbfd84", "filename": "libstdc++-v3/testsuite/23_containers/array/debug/front1_neg.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0611ce440a4e5a460b185cb2b64684bd51f94d51/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fdebug%2Ffront1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0611ce440a4e5a460b185cb2b64684bd51f94d51/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fdebug%2Ffront1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fdebug%2Ffront1_neg.cc?ref=0611ce440a4e5a460b185cb2b64684bd51f94d51", "patch": "@@ -0,0 +1,34 @@\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+//\n+// { dg-do run { xfail *-*-* } }\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-require-debug-mode \"\" }\n+\n+#include <array>\n+\n+void test01()\n+{\n+  std::array<int, 0> a;\n+  a.front();\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "f4c104df506a8154d7852b4e92433e99b84ad847", "filename": "libstdc++-v3/testsuite/23_containers/array/debug/front2_neg.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0611ce440a4e5a460b185cb2b64684bd51f94d51/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fdebug%2Ffront2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0611ce440a4e5a460b185cb2b64684bd51f94d51/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fdebug%2Ffront2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fdebug%2Ffront2_neg.cc?ref=0611ce440a4e5a460b185cb2b64684bd51f94d51", "patch": "@@ -0,0 +1,34 @@\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+//\n+// { dg-do run { xfail *-*-* } }\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-require-debug-mode \"\" }\n+\n+#include <array>\n+\n+void test01()\n+{\n+  constexpr std::array<int, 0> a;\n+  a.front();\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "05766dba3a31cdb0d080f707d3bda200728b4875", "filename": "libstdc++-v3/testsuite/23_containers/array/debug/square_brackets_operator1_neg.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0611ce440a4e5a460b185cb2b64684bd51f94d51/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fdebug%2Fsquare_brackets_operator1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0611ce440a4e5a460b185cb2b64684bd51f94d51/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fdebug%2Fsquare_brackets_operator1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fdebug%2Fsquare_brackets_operator1_neg.cc?ref=0611ce440a4e5a460b185cb2b64684bd51f94d51", "patch": "@@ -0,0 +1,34 @@\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+//\n+// { dg-do run { xfail *-*-* } }\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-require-debug-mode \"\" }\n+\n+#include <array>\n+\n+void test01()\n+{\n+  std::array<int, 0> a;\n+  a[0];\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "823837fc44b6fcb03a88d920e5bde2f15390237b", "filename": "libstdc++-v3/testsuite/23_containers/array/debug/square_brackets_operator2_neg.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0611ce440a4e5a460b185cb2b64684bd51f94d51/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fdebug%2Fsquare_brackets_operator2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0611ce440a4e5a460b185cb2b64684bd51f94d51/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fdebug%2Fsquare_brackets_operator2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fdebug%2Fsquare_brackets_operator2_neg.cc?ref=0611ce440a4e5a460b185cb2b64684bd51f94d51", "patch": "@@ -0,0 +1,34 @@\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+//\n+// { dg-do run { xfail *-*-* } }\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-require-debug-mode \"\" }\n+\n+#include <array>\n+\n+void test01()\n+{\n+  constexpr std::array<int, 0> a;\n+  a[0];\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "a19ca728f4d9f74e10adc3f6201b72757b313ad1", "filename": "libstdc++-v3/testsuite/23_containers/array/tuple_interface/get_debug_neg.cc", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0611ce440a4e5a460b185cb2b64684bd51f94d51/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Fget_debug_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0611ce440a4e5a460b185cb2b64684bd51f94d51/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Fget_debug_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Fget_debug_neg.cc?ref=0611ce440a4e5a460b185cb2b64684bd51f94d51", "patch": "@@ -0,0 +1,33 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-require-debug-mode \"\" }\n+\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <array>\n+\n+std::array<int, 1> a{};\n+const std::array<int, 1> ca{};\n+\n+int n1 = std::get<1>(a);\n+int n2 = std::get<1>(std::move(a));\n+int n3 = std::get<1>(ca);\n+\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 274 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 283 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 291 }"}, {"sha": "5df2f0f3816b99f8f646109f2cec5d6be5202e98", "filename": "libstdc++-v3/testsuite/23_containers/array/tuple_interface/get_neg.cc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0611ce440a4e5a460b185cb2b64684bd51f94d51/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Fget_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0611ce440a4e5a460b185cb2b64684bd51f94d51/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Fget_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Fget_neg.cc?ref=0611ce440a4e5a460b185cb2b64684bd51f94d51", "patch": "@@ -1,5 +1,6 @@\n-// { dg-options \"-std=gnu++11\" }\n // { dg-do compile }\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-require-normal-mode \"\" }\n \n // Copyright (C) 2012 Free Software Foundation, Inc.\n //\n@@ -28,5 +29,5 @@ int n2 = std::get<1>(std::move(a));\n int n3 = std::get<1>(ca);\n \n // { dg-error \"static assertion failed\" \"\" { target *-*-* } 291 }\n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 299 }\n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 307 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 300 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 308 }"}, {"sha": "c5f6f653500f26ae174891f6f34b5de1fbe601b6", "filename": "libstdc++-v3/testsuite/23_containers/array/tuple_interface/tuple_element_debug_neg.cc", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0611ce440a4e5a460b185cb2b64684bd51f94d51/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Ftuple_element_debug_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0611ce440a4e5a460b185cb2b64684bd51f94d51/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Ftuple_element_debug_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Ftuple_element_debug_neg.cc?ref=0611ce440a4e5a460b185cb2b64684bd51f94d51", "patch": "@@ -0,0 +1,26 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-require-debug-mode \"\" }\n+\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <array>\n+\n+typedef std::tuple_element<1, std::array<int, 1>>::type type;\n+\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 314 }"}, {"sha": "33c6090b0c8d1c0150df85d6c2f0c9eb289c9aa3", "filename": "libstdc++-v3/testsuite/23_containers/array/tuple_interface/tuple_element_neg.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0611ce440a4e5a460b185cb2b64684bd51f94d51/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Ftuple_element_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0611ce440a4e5a460b185cb2b64684bd51f94d51/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Ftuple_element_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Ftuple_element_neg.cc?ref=0611ce440a4e5a460b185cb2b64684bd51f94d51", "patch": "@@ -1,5 +1,6 @@\n-// { dg-options \"-std=gnu++11\" }\n // { dg-do compile }\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-require-normal-mode \"\" }\n \n // Copyright (C) 2012 Free Software Foundation, Inc.\n //"}]}