{"sha": "f21edfd62d267934ad7e9475976719bc41ee7dc3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjIxZWRmZDYyZDI2NzkzNGFkN2U5NDc1OTc2NzE5YmM0MWVlN2RjMw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-12-07T00:01:01Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-12-07T00:01:01Z"}, "message": "c99_functions.c, [...]: Whitespace fixes.\n\n        * intrinsics/c99_functions.c, intrinsics/eoshift0.c,\n        intrinsics/eoshift2.c, intrinsics/exit.c, intrinsics/flush.c,\n        intrinsics/ishftc.c, intrinsics/mvbits.c, intrinsics/pack_generic.c,\n        intrinsics/random.c, intrinsics/reshape_generic.c, intrinsics/size.c,\n        intrinsics/spread_generic.c, intrinsics/stat.c,\n\tintrinsics/string_intrinsics.c, intrinsics/system_clock.c,\n        intrinsics/transpose_generic.c, intrinsics/unlink.c,\n        intrinsics/unpack_generic.c, io/backspace.c, io/format.c,\n        io/list_read.c, io/lock.c, io/open.c, io/transfer.c, io/unix.c,\n        io/write.c, runtime/environ.c, runtime/error.c,\n        runtime/in_pack_generic.c, runtime/in_unpack_generic.c, runtime/main.c,\n        runtime/memory.c, runtime/pause.c, runtime/stop.c,\n        runtime/string.c: Whitespace fixes.\n\nFrom-SVN: r91794", "tree": {"sha": "379c730c455320b1f8101e6a2c9d24435a6e33b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/379c730c455320b1f8101e6a2c9d24435a6e33b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f21edfd62d267934ad7e9475976719bc41ee7dc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f21edfd62d267934ad7e9475976719bc41ee7dc3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f21edfd62d267934ad7e9475976719bc41ee7dc3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f21edfd62d267934ad7e9475976719bc41ee7dc3/comments", "author": null, "committer": null, "parents": [{"sha": "9f91e6cc1610417926374738af0e102187723d59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f91e6cc1610417926374738af0e102187723d59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f91e6cc1610417926374738af0e102187723d59"}], "stats": {"total": 498, "additions": 156, "deletions": 342}, "files": [{"sha": "50dde4e40e0c342463443c67900826c8f7b83bde", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f21edfd62d267934ad7e9475976719bc41ee7dc3/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f21edfd62d267934ad7e9475976719bc41ee7dc3/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=f21edfd62d267934ad7e9475976719bc41ee7dc3", "patch": "@@ -1,3 +1,19 @@\n+2004-12-06  Richard Henderson  <rth@redhat.com>\n+\n+\t* intrinsics/c99_functions.c, intrinsics/eoshift0.c,\n+\tintrinsics/eoshift2.c, intrinsics/exit.c, intrinsics/flush.c,\n+\tintrinsics/ishftc.c, intrinsics/mvbits.c, intrinsics/pack_generic.c,\n+\tintrinsics/random.c, intrinsics/reshape_generic.c, intrinsics/size.c,\n+\tintrinsics/spread_generic.c, intrinsics/stat.c,\n+\tintrinsics/string_intrinsics.c, intrinsics/system_clock.c,\n+\tintrinsics/transpose_generic.c, intrinsics/unlink.c,\n+\tintrinsics/unpack_generic.c, io/backspace.c, io/format.c,\n+\tio/list_read.c, io/lock.c, io/open.c, io/transfer.c, io/unix.c,\n+\tio/write.c, runtime/environ.c, runtime/error.c,\n+\truntime/in_pack_generic.c, runtime/in_unpack_generic.c, runtime/main.c,\n+\truntime/memory.c, runtime/pause.c, runtime/stop.c,\n+\truntime/string.c: Whitespace fixes.\n+\n 2004-12-06  Richard Henderson  <rth@redhat.com>\n \n \t* Makefile.am: Generate all m4 output under $(srcdir)."}, {"sha": "617e0d57ecb44e1e72aaae2b81e3594669deba39", "filename": "libgfortran/intrinsics/c99_functions.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f21edfd62d267934ad7e9475976719bc41ee7dc3/libgfortran%2Fintrinsics%2Fc99_functions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f21edfd62d267934ad7e9475976719bc41ee7dc3/libgfortran%2Fintrinsics%2Fc99_functions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fc99_functions.c?ref=f21edfd62d267934ad7e9475976719bc41ee7dc3", "patch": "@@ -322,4 +322,3 @@ roundf(float x)\n     }\n }\n #endif\n-"}, {"sha": "2f7a0338461a5cc2adacaff0c213ed3778de34bf", "filename": "libgfortran/intrinsics/eoshift0.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f21edfd62d267934ad7e9475976719bc41ee7dc3/libgfortran%2Fintrinsics%2Feoshift0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f21edfd62d267934ad7e9475976719bc41ee7dc3/libgfortran%2Fintrinsics%2Feoshift0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Feoshift0.c?ref=f21edfd62d267934ad7e9475976719bc41ee7dc3", "patch": "@@ -204,4 +204,3 @@ __eoshift0_8 (gfc_array_char * ret, const gfc_array_char * array,\n {\n   __eoshift0 (ret, array, *pshift, pbound, pdim ? *pdim : 1);\n }\n-"}, {"sha": "c89c5c59d90610bc710a9505082fb30483bbfb6a", "filename": "libgfortran/intrinsics/eoshift2.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f21edfd62d267934ad7e9475976719bc41ee7dc3/libgfortran%2Fintrinsics%2Feoshift2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f21edfd62d267934ad7e9475976719bc41ee7dc3/libgfortran%2Fintrinsics%2Feoshift2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Feoshift2.c?ref=f21edfd62d267934ad7e9475976719bc41ee7dc3", "patch": "@@ -220,4 +220,3 @@ __eoshift2_8 (gfc_array_char * ret, const gfc_array_char * array,\n {\n   __eoshift2 (ret, array, *pshift, bound, pdim ? *pdim : 1);\n }\n-"}, {"sha": "f15d56787bf49e78752accd1f7de1cb828bf6084", "filename": "libgfortran/intrinsics/exit.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f21edfd62d267934ad7e9475976719bc41ee7dc3/libgfortran%2Fintrinsics%2Fexit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f21edfd62d267934ad7e9475976719bc41ee7dc3/libgfortran%2Fintrinsics%2Fexit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fexit.c?ref=f21edfd62d267934ad7e9475976719bc41ee7dc3", "patch": "@@ -33,7 +33,6 @@ Boston, MA 02111-1307, USA.  */\n void\n prefix(exit_i4) (GFC_INTEGER_4 * status)\n {\n-\n   if (status == NULL)\n     exit(0);\n   exit(*status);\n@@ -42,7 +41,6 @@ prefix(exit_i4) (GFC_INTEGER_4 * status)\n void\n prefix(exit_i8) (GFC_INTEGER_8 * status)\n {\n-\n   if (status == NULL)\n     exit(0);\n   exit((int) *status);"}, {"sha": "5f75195b9e4afbabaf17ee84de5a521c65fd329c", "filename": "libgfortran/intrinsics/flush.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f21edfd62d267934ad7e9475976719bc41ee7dc3/libgfortran%2Fintrinsics%2Fflush.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f21edfd62d267934ad7e9475976719bc41ee7dc3/libgfortran%2Fintrinsics%2Fflush.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fflush.c?ref=f21edfd62d267934ad7e9475976719bc41ee7dc3", "patch": "@@ -48,7 +48,6 @@ recursive_flush (gfc_unit *us)\n void\n prefix(flush_i4) (GFC_INTEGER_4 * unit)\n {\n-\n   gfc_unit *us;\n \n   /* flush all streams */"}, {"sha": "2677c3313f914bbbacfcfcd7b89a280a19415c66", "filename": "libgfortran/intrinsics/ishftc.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f21edfd62d267934ad7e9475976719bc41ee7dc3/libgfortran%2Fintrinsics%2Fishftc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f21edfd62d267934ad7e9475976719bc41ee7dc3/libgfortran%2Fintrinsics%2Fishftc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fishftc.c?ref=f21edfd62d267934ad7e9475976719bc41ee7dc3", "patch": "@@ -61,4 +61,3 @@ ishftc8 (GFC_INTEGER_8 i, GFC_INTEGER_8 shift, GFC_INTEGER_8 size)\n   bits = i & ~mask;\n   return (i & mask) | (bits >> (size - shift)) | ((i << shift) & ~mask);\n }\n-"}, {"sha": "97fdc41177cb22e874a4a207198282bba34714db", "filename": "libgfortran/intrinsics/mvbits.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f21edfd62d267934ad7e9475976719bc41ee7dc3/libgfortran%2Fintrinsics%2Fmvbits.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f21edfd62d267934ad7e9475976719bc41ee7dc3/libgfortran%2Fintrinsics%2Fmvbits.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fmvbits.c?ref=f21edfd62d267934ad7e9475976719bc41ee7dc3", "patch": "@@ -60,4 +60,3 @@ SUB_NAME (const TYPE *from, const GFC_INTEGER_4 *frompos,\n #  undef TYPE\n #  undef UTYPE\n #endif\n-"}, {"sha": "da0bc57982710142cb986cac5d200483215f6f5b", "filename": "libgfortran/intrinsics/pack_generic.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f21edfd62d267934ad7e9475976719bc41ee7dc3/libgfortran%2Fintrinsics%2Fpack_generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f21edfd62d267934ad7e9475976719bc41ee7dc3/libgfortran%2Fintrinsics%2Fpack_generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fpack_generic.c?ref=f21edfd62d267934ad7e9475976719bc41ee7dc3", "patch": "@@ -123,7 +123,6 @@ __pack (gfc_array_char * ret, const gfc_array_char * array,\n \n       if (vector != NULL) \n \t{ \n-\n \t  /* The return array will have as many\n \t     elements as there are in VECTOR.  */ \n \t  total = vector->dim[0].ubound + 1 - vector->dim[0].lbound; "}, {"sha": "2cc5d20372d84a4f925396c0991d705bc0d0dbbc", "filename": "libgfortran/intrinsics/random.c", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f21edfd62d267934ad7e9475976719bc41ee7dc3/libgfortran%2Fintrinsics%2Frandom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f21edfd62d267934ad7e9475976719bc41ee7dc3/libgfortran%2Fintrinsics%2Frandom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Frandom.c?ref=f21edfd62d267934ad7e9475976719bc41ee7dc3", "patch": "@@ -485,7 +485,6 @@ prefix(random_r8) (GFC_REAL_8 *x)\n void\n prefix(arandom_r4) (gfc_array_r4 *x)\n {\n-\n   index_type count[GFC_MAX_DIMENSIONS - 1];\n   index_type extent[GFC_MAX_DIMENSIONS - 1];\n   index_type stride[GFC_MAX_DIMENSIONS - 1];\n@@ -550,7 +549,6 @@ prefix(arandom_r4) (gfc_array_r4 *x)\n void\n prefix(arandom_r8) (gfc_array_r8 *x)\n {\n-\n   index_type count[GFC_MAX_DIMENSIONS - 1];\n   index_type extent[GFC_MAX_DIMENSIONS - 1];\n   index_type stride[GFC_MAX_DIMENSIONS - 1];\n@@ -614,10 +612,8 @@ prefix(arandom_r8) (gfc_array_r8 *x)\n    must be called with no argument or exactly one argument.  */\n \n void\n-random_seed (GFC_INTEGER_4 *size, gfc_array_i4 * put, \n-\t\t     gfc_array_i4 * get)\n+random_seed (GFC_INTEGER_4 *size, gfc_array_i4 *put, gfc_array_i4 *get)\n {\n-\n   int i;\n \n   if (size == NULL && put == NULL && get == NULL)\n@@ -670,5 +666,3 @@ random_seed (GFC_INTEGER_4 *size, gfc_array_i4 * put,\n         get->data[i * get->dim[0].stride] = (GFC_INTEGER_4) kiss_seed[i];\n     }\n }\n-\n-"}, {"sha": "5314456ca26a7f9e2d6c7fcd73ab6f3133a65349", "filename": "libgfortran/intrinsics/reshape_generic.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f21edfd62d267934ad7e9475976719bc41ee7dc3/libgfortran%2Fintrinsics%2Freshape_generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f21edfd62d267934ad7e9475976719bc41ee7dc3/libgfortran%2Fintrinsics%2Freshape_generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Freshape_generic.c?ref=f21edfd62d267934ad7e9475976719bc41ee7dc3", "patch": "@@ -228,4 +228,3 @@ __reshape (parray * ret, parray * source, shape_type * shape,\n         }\n     }\n }\n-"}, {"sha": "f83f6c0162ec962962224e81cdd9cd811256b24b", "filename": "libgfortran/intrinsics/size.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f21edfd62d267934ad7e9475976719bc41ee7dc3/libgfortran%2Fintrinsics%2Fsize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f21edfd62d267934ad7e9475976719bc41ee7dc3/libgfortran%2Fintrinsics%2Fsize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fsize.c?ref=f21edfd62d267934ad7e9475976719bc41ee7dc3", "patch": "@@ -50,4 +50,3 @@ index_type size1 (const array_t * array, index_type dim)\n     size = 0;\n   return size;\n }\n-"}, {"sha": "f65f869d3b0e74d62c59be8f73801c61e13def53", "filename": "libgfortran/intrinsics/spread_generic.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f21edfd62d267934ad7e9475976719bc41ee7dc3/libgfortran%2Fintrinsics%2Fspread_generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f21edfd62d267934ad7e9475976719bc41ee7dc3/libgfortran%2Fintrinsics%2Fspread_generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fspread_generic.c?ref=f21edfd62d267934ad7e9475976719bc41ee7dc3", "patch": "@@ -115,4 +115,3 @@ __spread (const gfc_array_char * ret, const gfc_array_char * source,\n         }\n     }\n }\n-"}, {"sha": "8f250d460f022208cd29a46b4153991661ec0099", "filename": "libgfortran/intrinsics/stat.c", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f21edfd62d267934ad7e9475976719bc41ee7dc3/libgfortran%2Fintrinsics%2Fstat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f21edfd62d267934ad7e9475976719bc41ee7dc3/libgfortran%2Fintrinsics%2Fstat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fstat.c?ref=f21edfd62d267934ad7e9475976719bc41ee7dc3", "patch": "@@ -56,7 +56,6 @@ void\n prefix(stat_i4_sub) (char * name, gfc_array_i4 * sarray,\n                      GFC_INTEGER_4 * status,  gfc_charlen_type name_len)\n {\n- \n   int val;\n   char *str;\n   struct stat sb;\n@@ -147,7 +146,6 @@ void\n prefix(stat_i8_sub) (char * name, gfc_array_i8 * sarray,\n                      GFC_INTEGER_8 * status, gfc_charlen_type name_len)\n {\n- \n   int val;\n   char *str;\n   struct stat sb;\n@@ -250,7 +248,6 @@ GFC_INTEGER_8\n prefix(stat_i8) (char * name, gfc_array_i8 * sarray,\n                  gfc_charlen_type name_len)\n {\n-\n   GFC_INTEGER_8 val;\n   prefix(stat_i8_sub) (name, sarray, &val, name_len);\n   return val;\n@@ -271,7 +268,6 @@ void\n prefix(fstat_i4_sub) (GFC_INTEGER_4 * unit, gfc_array_i4 * sarray,\n                      GFC_INTEGER_4 * status)\n {\n- \n   int val;\n   struct stat sb;\n \n@@ -355,7 +351,6 @@ void\n prefix(fstat_i8_sub) (GFC_INTEGER_8 * unit, gfc_array_i8 * sarray,\n                      GFC_INTEGER_8 * status)\n {\n- \n   int val;\n   struct stat sb;\n \n@@ -439,7 +434,6 @@ prefix(fstat_i8_sub) (GFC_INTEGER_8 * unit, gfc_array_i8 * sarray,\n GFC_INTEGER_4\n prefix(fstat_i4) (GFC_INTEGER_4 * unit, gfc_array_i4 * sarray)\n {\n-\n   GFC_INTEGER_4 val;\n   prefix(fstat_i4_sub) (unit, sarray, &val);\n   return val;\n@@ -449,7 +443,6 @@ prefix(fstat_i4) (GFC_INTEGER_4 * unit, gfc_array_i4 * sarray)\n GFC_INTEGER_8\n prefix(fstat_i8) (GFC_INTEGER_8 * unit, gfc_array_i8 * sarray)\n {\n-\n   GFC_INTEGER_8 val;\n   prefix(fstat_i8_sub) (unit, sarray, &val);\n   return val;"}, {"sha": "53d9b4e990298013edecc09cf3fe2a6b6a5e4185", "filename": "libgfortran/intrinsics/string_intrinsics.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f21edfd62d267934ad7e9475976719bc41ee7dc3/libgfortran%2Fintrinsics%2Fstring_intrinsics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f21edfd62d267934ad7e9475976719bc41ee7dc3/libgfortran%2Fintrinsics%2Fstring_intrinsics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fstring_intrinsics.c?ref=f21edfd62d267934ad7e9475976719bc41ee7dc3", "patch": "@@ -168,7 +168,8 @@ concat_string (GFC_INTEGER_4 destlen, char * dest,\n /* Return string with all trailing blanks removed.  */\n \n void\n-string_trim (GFC_INTEGER_4 * len, void ** dest, GFC_INTEGER_4 slen, const char * src)\n+string_trim (GFC_INTEGER_4 * len, void ** dest, GFC_INTEGER_4 slen,\n+\t     const char * src)\n {\n   int i;\n \n@@ -392,4 +393,3 @@ string_repeat (char * dest, GFC_INTEGER_4 slen,\n       memmove (dest + (i * slen), src, slen);\n     }\n }\n-"}, {"sha": "d11d1a99d35c9cf9771329df5e6d489327790e38", "filename": "libgfortran/intrinsics/system_clock.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f21edfd62d267934ad7e9475976719bc41ee7dc3/libgfortran%2Fintrinsics%2Fsystem_clock.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f21edfd62d267934ad7e9475976719bc41ee7dc3/libgfortran%2Fintrinsics%2Fsystem_clock.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fsystem_clock.c?ref=f21edfd62d267934ad7e9475976719bc41ee7dc3", "patch": "@@ -197,4 +197,3 @@ prefix(system_clock_8)(GFC_INTEGER_8 *count, GFC_INTEGER_8 *count_rate,\n   if (count_max != NULL)\n     *count_max = mx;\n }\n-"}, {"sha": "ad08ea7893a36e7fa53856bdc3a38ceec3bbfbc7", "filename": "libgfortran/intrinsics/transpose_generic.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f21edfd62d267934ad7e9475976719bc41ee7dc3/libgfortran%2Fintrinsics%2Ftranspose_generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f21edfd62d267934ad7e9475976719bc41ee7dc3/libgfortran%2Fintrinsics%2Ftranspose_generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Ftranspose_generic.c?ref=f21edfd62d267934ad7e9475976719bc41ee7dc3", "patch": "@@ -88,4 +88,3 @@ __transpose (gfc_array_char * ret, gfc_array_char * source)\n       rptr += rxstride - (rystride * xcount);\n     }\n }\n-"}, {"sha": "7ea2a1002a3d337934770c460ef8ded41383ba83", "filename": "libgfortran/intrinsics/unlink.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f21edfd62d267934ad7e9475976719bc41ee7dc3/libgfortran%2Fintrinsics%2Funlink.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f21edfd62d267934ad7e9475976719bc41ee7dc3/libgfortran%2Fintrinsics%2Funlink.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Funlink.c?ref=f21edfd62d267934ad7e9475976719bc41ee7dc3", "patch": "@@ -63,9 +63,7 @@ void\n prefix(unlink_i8_sub) (char * name, GFC_INTEGER_8 * status,\n \t\t               gfc_charlen_type name_len)\n {\n-\n   GFC_INTEGER_4 status4;\n-\n   prefix (unlink_i4_sub) (name, &status4, name_len);\n   if (status)\n     *status = status4;\n@@ -82,4 +80,3 @@ prefix(unlink) (char * name, gfc_charlen_type name_len)\n   prefix(unlink_i4_sub) (name, &status, name_len);\n   return status;\n }\n-"}, {"sha": "a301b58d46be35bbe1632b59b401ab199c12b440", "filename": "libgfortran/intrinsics/unpack_generic.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f21edfd62d267934ad7e9475976719bc41ee7dc3/libgfortran%2Fintrinsics%2Funpack_generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f21edfd62d267934ad7e9475976719bc41ee7dc3/libgfortran%2Fintrinsics%2Funpack_generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Funpack_generic.c?ref=f21edfd62d267934ad7e9475976719bc41ee7dc3", "patch": "@@ -82,7 +82,6 @@ __unpack1 (const gfc_array_char * ret, const gfc_array_char * vector,\n   mptr = mask->data;\n   vptr = vector->data;\n \n-\n   /* Use the same loop for both logical types. */\n   if (GFC_DESCRIPTOR_SIZE (mask) != 4)\n     {\n@@ -151,4 +150,3 @@ __unpack0 (const gfc_array_char * ret, const gfc_array_char * vector,\n   tmp.data = field;\n   __unpack1 (ret, vector, mask, &tmp);\n }\n-"}, {"sha": "eb25b108146cd935dde400f11f7bf1afaeaf8b3b", "filename": "libgfortran/io/backspace.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f21edfd62d267934ad7e9475976719bc41ee7dc3/libgfortran%2Fio%2Fbackspace.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f21edfd62d267934ad7e9475976719bc41ee7dc3/libgfortran%2Fio%2Fbackspace.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fbackspace.c?ref=f21edfd62d267934ad7e9475976719bc41ee7dc3", "patch": "@@ -71,17 +71,16 @@ formatted_backspace (void)\n     }\n   while (base != 0);\n \n-/* base is the new pointer.  Seek to it exactly */\n-\n-done:\n+  /* base is the new pointer.  Seek to it exactly */\n+ done:\n   if (sseek (current_unit->s, base) == FAILURE)\n     goto io_error;\n   current_unit->last_record--;\n   current_unit->endfile = NO_ENDFILE;\n \n   return;\n \n-io_error:\n+ io_error:\n   generate_error (ERROR_OS, NULL);\n }\n \n@@ -110,7 +109,7 @@ unformatted_backspace (void)\n   current_unit->last_record--;\n   return;\n \n-io_error:\n+ io_error:\n   generate_error (ERROR_OS, NULL);\n }\n \n@@ -156,6 +155,6 @@ st_backspace (void)\n \tunformatted_backspace ();\n     }\n \n-done:\n+ done:\n   library_end ();\n }"}, {"sha": "4083ca3b656e915ffc421535b61720fcd8455f41", "filename": "libgfortran/io/format.c", "status": "modified", "additions": 15, "deletions": 25, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f21edfd62d267934ad7e9475976719bc41ee7dc3/libgfortran%2Fio%2Fformat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f21edfd62d267934ad7e9475976719bc41ee7dc3/libgfortran%2Fio%2Fformat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fformat.c?ref=f21edfd62d267934ad7e9475976719bc41ee7dc3", "patch": "@@ -146,7 +146,6 @@ free_fnode (fnode * f)\n void\n free_fnodes (void)\n {\n-\n   if (avail - array >= FARRAY_SIZE)\n     free_fnode (&array[0]);\n \n@@ -441,9 +440,8 @@ parse_format_list (void)\n \n   head = tail = NULL;\n \n-/* Get the next format item */\n-\n-format_item:\n+  /* Get the next format item */\n+ format_item:\n   t = format_lex ();\n   switch (t)\n     {\n@@ -631,10 +629,9 @@ parse_format_list (void)\n       goto finished;\n     }\n \n-/* In this state, t must currently be a data descriptor.  Deal with\n- * things that can/must follow the descriptor */\n-\n-data_desc:\n+  /* In this state, t must currently be a data descriptor.  Deal with\n+     things that can/must follow the descriptor */\n+ data_desc:\n   switch (t)\n     {\n     case FMT_P:\n@@ -726,8 +723,7 @@ parse_format_list (void)\n \n       tail->u.real.e = -1;\n \n-/* Look for optional exponent */\n-\n+      /* Look for optional exponent */\n       t = format_lex ();\n       if (t != FMT_E)\n \tsaved_token = t;\n@@ -822,8 +818,8 @@ parse_format_list (void)\n       goto finished;\n     }\n \n-/* Between a descriptor and what comes next */\n-between_desc:\n+  /* Between a descriptor and what comes next */\n+ between_desc:\n   t = format_lex ();\n   switch (t)\n     {\n@@ -851,10 +847,9 @@ parse_format_list (void)\n       goto finished;\n     }\n \n-/* Optional comma is a weird between state where we've just finished\n- * reading a colon, slash or P descriptor. */\n-\n-optional_comma:\n+  /* Optional comma is a weird between state where we've just finished\n+     reading a colon, slash or P descriptor. */\n+ optional_comma:\n   t = format_lex ();\n   switch (t)\n     {\n@@ -871,7 +866,7 @@ parse_format_list (void)\n \n   goto format_item;\n \n-finished:\n+ finished:\n   return head;\n }\n \n@@ -935,20 +930,19 @@ format_error (fnode * f, const char *message)\n void\n parse_format (void)\n {\n-\n   format_string = ioparm.format;\n   format_string_len = ioparm.format_len;\n \n   saved_token = FMT_NONE;\n   error = NULL;\n \n-/* Initialize variables used during traversal of the tree */\n+  /* Initialize variables used during traversal of the tree */\n \n   reversion_ok = 0;\n   g.reversion_flag = 0;\n   saved_format = NULL;\n \n-/* Allocate the first format node as the root of the tree */\n+  /* Allocate the first format node as the root of the tree */\n \n   avail = array;\n \n@@ -1082,8 +1076,7 @@ next_format (void)\n     }\n \n   /* If this is a data edit descriptor, then reversion has become OK. */\n-\n-done:\n+ done:\n   t = f->format;\n \n   if (!reversion_ok &&\n@@ -1105,7 +1098,6 @@ next_format (void)\n void\n unget_format (fnode * f)\n {\n-\n   saved_format = f;\n }\n \n@@ -1248,7 +1240,6 @@ dump_format0 (fnode * f)\n static void\n dump_format1 (fnode * f)\n {\n-\n   for (; f; f = f->next)\n     dump_format1 (f);\n }\n@@ -1258,7 +1249,6 @@ dump_format1 (fnode * f)\n void\n dump_format (void)\n {\n-\n   st_printf (\"format = \");\n   dump_format0 (&array[0]);\n   st_printf (\"\\n\");"}, {"sha": "cee5c74c594434dabdea68b86970b77a44c537ff", "filename": "libgfortran/io/list_read.c", "status": "modified", "additions": 28, "deletions": 33, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f21edfd62d267934ad7e9475976719bc41ee7dc3/libgfortran%2Fio%2Flist_read.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f21edfd62d267934ad7e9475976719bc41ee7dc3/libgfortran%2Fio%2Flist_read.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Flist_read.c?ref=f21edfd62d267934ad7e9475976719bc41ee7dc3", "patch": "@@ -107,7 +107,6 @@ push_char (char c)\n static void\n free_saved (void)\n {\n-\n   if (saved_string == NULL)\n     return;\n \n@@ -165,7 +164,6 @@ next_char (void)\n static void\n unget_char (char c)\n {\n-\n   last_char = c;\n }\n \n@@ -253,7 +251,7 @@ finish_separator (void)\n {\n   char c;\n \n-restart:\n+ restart:\n   eat_spaces ();\n \n   c = next_char ();\n@@ -354,7 +352,7 @@ convert_integer (int length, int negative)\n   free_saved ();\n   return m;\n \n-overflow:\n+ overflow:\n   if (length == -1)\n     st_sprintf (message, \"Repeat count overflow in item %d of list input\",\n \t\tg.item_count);\n@@ -434,11 +432,11 @@ parse_repeat (void)\n \t}\n     }\n \n-done:\n+ done:\n   repeat_count = repeat;\n   return 0;\n \n-bad_repeat:\n+ bad_repeat:\n   st_sprintf (message, \"Bad repeat count in item %d of list input\",\n \t      g.item_count);\n \n@@ -514,7 +512,7 @@ read_logical (int length)\n \n   return;\n \n-bad_logical:\n+ bad_logical:\n   st_sprintf (message, \"Bad logical value while reading item %d\",\n \t      g.item_count);\n \n@@ -582,7 +580,7 @@ read_integer (int length)\n \t}\n     }\n \n-repeat:\n+ repeat:\n   if (convert_integer (-1, 0))\n     return;\n \n@@ -608,7 +606,7 @@ read_integer (int length)\n       break;\n     }\n \n-get_integer:\n+ get_integer:\n   if (!isdigit (c))\n     goto bad_integer;\n   push_char (c);\n@@ -630,15 +628,15 @@ read_integer (int length)\n \t}\n     }\n \n-bad_integer:\n+ bad_integer:\n   free_saved ();\n \n   st_sprintf (message, \"Bad integer for item %d in list input\", g.item_count);\n   generate_error (ERROR_READ_VALUE, message);\n \n   return;\n \n-done:\n+ done:\n   unget_char (c);\n   eat_separator ();\n \n@@ -710,7 +708,7 @@ read_character (int length)\n \t}\n     }\n \n-got_repeat:\n+ got_repeat:\n   if (convert_integer (-1, 0))\n     return;\n \n@@ -734,7 +732,7 @@ read_character (int length)\n       break;\n     }\n \n-get_string:\n+ get_string:\n   for (;;)\n     {\n       c = next_char ();\n@@ -778,10 +776,9 @@ read_character (int length)\n \t}\n     }\n \n-/* At this point, we have to have a separator, or else the string is\n-   invalid.  */\n-\n-done:\n+  /* At this point, we have to have a separator, or else the string is\n+     invalid.  */\n+ done:\n   c = next_char ();\n   if (is_separator (c))\n     {\n@@ -861,7 +858,7 @@ parse_real (void *buffer, int length)\n \t}\n     }\n \n-exp1:\n+ exp1:\n   c = next_char ();\n   if (c != '-' && c != '+')\n     push_char ('+');\n@@ -871,7 +868,7 @@ parse_real (void *buffer, int length)\n       c = next_char ();\n     }\n \n-exp2:\n+ exp2:\n   if (!isdigit (c))\n     goto bad;\n   push_char (c);\n@@ -894,7 +891,7 @@ parse_real (void *buffer, int length)\n \t}\n     }\n \n-done:\n+ done:\n   unget_char (c);\n   push_char ('\\0');\n \n@@ -903,7 +900,7 @@ parse_real (void *buffer, int length)\n \n   return m;\n \n-bad:\n+ bad:\n   free_saved ();\n   st_sprintf (message, \"Bad floating point number for item %d\", g.item_count);\n   generate_error (ERROR_READ_VALUE, message);\n@@ -966,7 +963,7 @@ read_complex (int length)\n   saved_type = BT_COMPLEX;\n   return;\n \n-bad_complex:\n+ bad_complex:\n   st_sprintf (message, \"Bad complex value in item %d of list input\",\n \t      g.item_count);\n \n@@ -1055,7 +1052,7 @@ read_real (int length)\n \t}\n     }\n \n-got_repeat:\n+ got_repeat:\n   if (convert_integer (-1, 0))\n     return;\n \n@@ -1091,7 +1088,7 @@ read_real (int length)\n \n   push_char (c);\n \n-real_loop:\n+ real_loop:\n   for (;;)\n     {\n       c = next_char ();\n@@ -1130,7 +1127,7 @@ read_real (int length)\n \t}\n     }\n \n-exp1:\n+ exp1:\n   push_char ('e');\n \n   c = next_char ();\n@@ -1142,7 +1139,7 @@ read_real (int length)\n       c = next_char ();\n     }\n \n-exp2:\n+ exp2:\n   if (!isdigit (c))\n     goto bad_real;\n   push_char (c);\n@@ -1167,7 +1164,7 @@ read_real (int length)\n \t}\n     }\n \n-done:\n+ done:\n   push_char ('\\0');\n   if (convert_real (value, saved_string, length))\n     return;\n@@ -1176,7 +1173,7 @@ read_real (int length)\n   saved_type = BT_REAL;\n   return;\n \n-bad_real:\n+ bad_real:\n   st_sprintf (message, \"Bad real number in item %d of list input\",\n \t      g.item_count);\n \n@@ -1281,7 +1278,6 @@ list_formatted_read (bt type, void *p, int len)\n       repeat_count = 1;\n     }\n \n-\n   switch (type)\n     {\n     case BT_INTEGER:\n@@ -1309,7 +1305,7 @@ list_formatted_read (bt type, void *p, int len)\n   if (ioparm.library_return != LIBRARY_OK)\n     return;\n \n-set_value:\n+ set_value:\n   switch (saved_type)\n     {\n     case BT_COMPLEX:\n@@ -1345,7 +1341,7 @@ list_formatted_read (bt type, void *p, int len)\n }\n \n void\n-init_at_eol()\n+init_at_eol(void)\n {\n   at_eol = 0;\n }\n@@ -1365,7 +1361,6 @@ finish_list_read (void)\n       return;\n     }\n \n-\n   do\n     {\n       c = next_char ();\n@@ -1440,7 +1435,7 @@ namelist_read (void)\n       return;\n     }\n \n-restart:\n+ restart:\n   c = next_char ();\n   switch (c)\n     {"}, {"sha": "8daf1aa57c3a51da63bf951333b6af2d21aba3f2", "filename": "libgfortran/io/lock.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f21edfd62d267934ad7e9475976719bc41ee7dc3/libgfortran%2Fio%2Flock.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f21edfd62d267934ad7e9475976719bc41ee7dc3/libgfortran%2Fio%2Flock.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Flock.c?ref=f21edfd62d267934ad7e9475976719bc41ee7dc3", "patch": "@@ -34,7 +34,6 @@ global_t g;\n void\n library_start (void)\n {\n-\n   if (g.in_library)\n     internal_error (\"Recursive library calls not allowed\");\n \n@@ -81,4 +80,3 @@ library_end (void)\n   memset (&ioparm, '\\0', sizeof (ioparm));\n   ioparm.library_return = t;\n }\n-"}, {"sha": "ef8aad24ecccbf351dbc798afabb524394540913", "filename": "libgfortran/io/open.c", "status": "modified", "additions": 43, "deletions": 91, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f21edfd62d267934ad7e9475976719bc41ee7dc3/libgfortran%2Fio%2Fopen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f21edfd62d267934ad7e9475976719bc41ee7dc3/libgfortran%2Fio%2Fopen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fopen.c?ref=f21edfd62d267934ad7e9475976719bc41ee7dc3", "patch": "@@ -30,106 +30,61 @@ static st_option access_opt[] = {\n   {\"sequential\", ACCESS_SEQUENTIAL},\n   {\"direct\", ACCESS_DIRECT},\n   {NULL}\n-}, action_opt[] =\n+};\n+\n+static st_option action_opt[] =\n {\n-  {\n-  \"read\", ACTION_READ}\n-  ,\n-  {\n-  \"write\", ACTION_WRITE}\n-  ,\n-  {\n-  \"readwrite\", ACTION_READWRITE}\n-  ,\n-  {\n-  NULL}\n-}\n+  { \"read\", ACTION_READ},\n+  { \"write\", ACTION_WRITE},\n+  { \"readwrite\", ACTION_READWRITE},\n+  { NULL}\n+};\n \n-, blank_opt[] =\n+static st_option blank_opt[] =\n {\n-  {\n-  \"null\", BLANK_NULL}\n-  ,\n-  {\n-  \"zero\", BLANK_ZERO}\n-  ,\n-  {\n-  NULL}\n-}\n+  { \"null\", BLANK_NULL},\n+  { \"zero\", BLANK_ZERO},\n+  { NULL}\n+};\n \n-, delim_opt[] =\n+static st_option delim_opt[] =\n {\n-  {\n-  \"none\", DELIM_NONE}\n-  ,\n-  {\n-  \"apostrophe\", DELIM_APOSTROPHE}\n-  ,\n-  {\n-  \"quote\", DELIM_QUOTE}\n-  ,\n-  {\n-  NULL}\n-}\n+  { \"none\", DELIM_NONE},\n+  { \"apostrophe\", DELIM_APOSTROPHE},\n+  { \"quote\", DELIM_QUOTE},\n+  { NULL}\n+};\n \n-, form_opt[] =\n+static st_option form_opt[] =\n {\n-  {\n-  \"formatted\", FORM_FORMATTED}\n-  ,\n-  {\n-  \"unformatted\", FORM_UNFORMATTED}\n-  ,\n-  {\n-  NULL}\n-}\n+  { \"formatted\", FORM_FORMATTED},\n+  { \"unformatted\", FORM_UNFORMATTED},\n+  { NULL}\n+};\n \n-, position_opt[] =\n+static st_option position_opt[] =\n {\n-  {\n-  \"asis\", POSITION_ASIS}\n-  ,\n-  {\n-  \"rewind\", POSITION_REWIND}\n-  ,\n-  {\n-  \"append\", POSITION_APPEND}\n-  ,\n-  {\n-  NULL}\n-}\n+  { \"asis\", POSITION_ASIS},\n+  { \"rewind\", POSITION_REWIND},\n+  { \"append\", POSITION_APPEND},\n+  { NULL}\n+};\n \n-, status_opt[] =\n+static st_option status_opt[] =\n {\n-  {\n-  \"unknown\", STATUS_UNKNOWN}\n-  ,\n-  {\n-  \"old\", STATUS_OLD}\n-  ,\n-  {\n-  \"new\", STATUS_NEW}\n-  ,\n-  {\n-  \"replace\", STATUS_REPLACE}\n-  ,\n-  {\n-  \"scratch\", STATUS_SCRATCH}\n-  ,\n-  {\n-  NULL}\n-}\n+  { \"unknown\", STATUS_UNKNOWN},\n+  { \"old\", STATUS_OLD},\n+  { \"new\", STATUS_NEW},\n+  { \"replace\", STATUS_REPLACE},\n+  { \"scratch\", STATUS_SCRATCH},\n+  { NULL}\n+};\n \n-, pad_opt[] =\n+static st_option pad_opt[] =\n {\n-  {\n-  \"yes\", PAD_YES}\n-  ,\n-  {\n-  \"no\", PAD_NO}\n-  ,\n-  {\n-  NULL}\n+  { \"yes\", PAD_YES},\n+  { \"no\", PAD_NO},\n+  { NULL}\n };\n \n \n@@ -141,7 +96,6 @@ static st_option access_opt[] = {\n void\n test_endfile (gfc_unit * u)\n {\n-\n   if (u->endfile == NO_ENDFILE && file_length (u->s) == file_position (u->s))\n     u->endfile = AT_ENDFILE;\n }\n@@ -153,7 +107,6 @@ test_endfile (gfc_unit * u)\n static void\n edit_modes (gfc_unit * u, unit_flags * flags)\n {\n-\n   /* Complain about attempts to change the unchangeable.  */\n \n   if (flags->status != STATUS_UNSPECIFIED &&\n@@ -416,7 +369,7 @@ new_unit (unit_flags * flags)\n \n   test_endfile (u);\n \n-cleanup:\n+ cleanup:\n \n   /* Free memory associated with a temporary filename.  */\n \n@@ -431,7 +384,6 @@ new_unit (unit_flags * flags)\n static void\n already_open (gfc_unit * u, unit_flags * flags)\n {\n-\n   if (ioparm.file == NULL)\n     {\n       edit_modes (u, flags);"}, {"sha": "962c0a2581feb999758b866cfe76033b8fe6e8f6", "filename": "libgfortran/io/read.c", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f21edfd62d267934ad7e9475976719bc41ee7dc3/libgfortran%2Fio%2Fread.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f21edfd62d267934ad7e9475976719bc41ee7dc3/libgfortran%2Fio%2Fread.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fread.c?ref=f21edfd62d267934ad7e9475976719bc41ee7dc3", "patch": "@@ -36,7 +36,6 @@ Boston, MA 02111-1307, USA.  */\n void\n set_integer (void *dest, int64_t value, int length)\n {\n-\n   switch (length)\n     {\n     case 8:\n@@ -95,7 +94,6 @@ max_value (int length, int signed_flag)\n int\n convert_real (void *dest, const char *buffer, int length)\n {\n-\n   errno = 0;\n \n   switch (length)\n@@ -204,7 +202,6 @@ read_a (fnode * f, char *p, int length)\n static char *\n eat_leading_spaces (int *width, char *p)\n {\n-\n   for (;;)\n     {\n       if (*width == 0 || *p != ' ')\n@@ -325,11 +322,11 @@ read_decimal (fnode * f, char *dest, int length)\n   set_integer (dest, v, length);\n   return;\n \n-bad:\n+ bad:\n   generate_error (ERROR_READ_VALUE, \"Bad value during integer read\");\n   return;\n \n-overflow:\n+ overflow:\n   generate_error (ERROR_READ_OVERFLOW,\n \t\t  \"Value overflowed during integer read\");\n   return;\n@@ -461,11 +458,11 @@ read_radix (fnode * f, char *dest, int length, int radix)\n   set_integer (dest, v, length);\n   return;\n \n-bad:\n+ bad:\n   generate_error (ERROR_READ_VALUE, \"Bad value during integer read\");\n   return;\n \n-overflow:\n+ overflow:\n   generate_error (ERROR_READ_OVERFLOW,\n \t\t  \"Value overflowed during integer read\");\n   return;\n@@ -588,20 +585,18 @@ read_f (fnode * f, char *dest, int length)\n \t}\n     }\n \n-/* No exponent has been seen, so we use the current scale factor */\n-\n+  /* No exponent has been seen, so we use the current scale factor */\n   exponent = -g.scale_factor;\n   goto done;\n \n-bad_float:\n+ bad_float:\n   generate_error (ERROR_READ_VALUE, \"Bad value during floating point read\");\n   if (buffer != scratch)\n      free_mem (buffer);\n   return;\n \n-/* At this point the start of an exponent has been found */\n-\n-exp1:\n+  /* At this point the start of an exponent has been found */\n+ exp1:\n   while (w > 0 && *p == ' ')\n     {\n       w--;\n@@ -623,11 +618,10 @@ read_f (fnode * f, char *dest, int length)\n   if (w == 0)\n     goto bad_float;\n \n-/* At this point a digit string is required.  We calculate the value\n-   of the exponent in order to take account of the scale factor and\n-   the d parameter before explict conversion takes place. */\n-\n-exp2:\n+  /* At this point a digit string is required.  We calculate the value\n+     of the exponent in order to take account of the scale factor and\n+     the d parameter before explict conversion takes place. */\n+ exp2:\n   if (!isdigit (*p))\n     goto bad_float;\n \n@@ -654,7 +648,7 @@ read_f (fnode * f, char *dest, int length)\n \n   exponent = exponent * exponent_sign;\n \n-done:\n+ done:\n   /* Use the precision specified in the format if no decimal point has been\n      seen.  */\n   if (!seen_dp)"}, {"sha": "ec5240ddf49ea20652fd7bb3c9a025cf3400f65c", "filename": "libgfortran/io/transfer.c", "status": "modified", "additions": 5, "deletions": 30, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f21edfd62d267934ad7e9475976719bc41ee7dc3/libgfortran%2Fio%2Ftransfer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f21edfd62d267934ad7e9475976719bc41ee7dc3/libgfortran%2Fio%2Ftransfer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Ftransfer.c?ref=f21edfd62d267934ad7e9475976719bc41ee7dc3", "patch": "@@ -745,24 +745,21 @@ formatted_transfer (bt type, void *p, int len)\n \n   return;\n \n-/* Come here when we need a data descriptor but don't have one.  We\n-   push the current format node back onto the input, then return and\n-   let the user program call us back with the data.  */\n-\n-need_data:\n+  /* Come here when we need a data descriptor but don't have one.  We\n+     push the current format node back onto the input, then return and\n+     let the user program call us back with the data.  */\n+ need_data:\n   unget_format (f);\n }\n \n \n-\n /* Data transfer entry points.  The type of the data entity is\n    implicit in the subroutine call.  This prevents us from having to\n    share a common enum with the compiler.  */\n \n void\n transfer_integer (void *p, int kind)\n {\n-\n   g.item_count++;\n   if (ioparm.library_return != LIBRARY_OK)\n     return;\n@@ -773,7 +770,6 @@ transfer_integer (void *p, int kind)\n void\n transfer_real (void *p, int kind)\n {\n-\n   g.item_count++;\n   if (ioparm.library_return != LIBRARY_OK)\n     return;\n@@ -784,7 +780,6 @@ transfer_real (void *p, int kind)\n void\n transfer_logical (void *p, int kind)\n {\n-\n   g.item_count++;\n   if (ioparm.library_return != LIBRARY_OK)\n     return;\n@@ -795,7 +790,6 @@ transfer_logical (void *p, int kind)\n void\n transfer_character (void *p, int len)\n {\n-\n   g.item_count++;\n   if (ioparm.library_return != LIBRARY_OK)\n     return;\n@@ -806,7 +800,6 @@ transfer_character (void *p, int len)\n void\n transfer_complex (void *p, int kind)\n {\n-\n   g.item_count++;\n   if (ioparm.library_return != LIBRARY_OK)\n     return;\n@@ -873,7 +866,6 @@ us_write (void)\n static void\n pre_position (void)\n {\n-\n   if (current_unit->current_record)\n     return;\t\t\t/* Already positioned.  */\n \n@@ -1140,9 +1132,7 @@ data_transfer_init (int read_flag)\n   /* Start the data transfer if we are doing a formatted transfer.  */\n   if (current_unit->flags.form == FORM_FORMATTED && !ioparm.list_format\n       && ioparm.namelist_name == NULL && ionml == NULL)\n-\n-     formatted_transfer (0, NULL, 0);\n-\n+    formatted_transfer (0, NULL, 0);\n }\n \n \n@@ -1198,7 +1188,6 @@ next_record_r (int done)\n \t      current_unit->bytes_left -= length;\n \t    }\n \t}\n-\n       break;\n \n     case FORMATTED_SEQUENTIAL:\n@@ -1367,7 +1356,6 @@ next_record (int done)\n static void\n finalize_transfer (void)\n {\n-\n   if ((ionml != NULL) && (ioparm.namelist_name != NULL))\n     {\n        if (ioparm.namelist_read_mode)\n@@ -1429,7 +1417,6 @@ iolength_transfer (bt type, void *dest, int len)\n static void\n iolength_transfer_init (void)\n {\n-\n   if (ioparm.iolength != NULL)\n     *ioparm.iolength = 0;\n \n@@ -1438,7 +1425,6 @@ iolength_transfer_init (void)\n   /* Set up the subroutine that will handle the transfers.  */\n \n   transfer = iolength_transfer;\n-\n }\n \n \n@@ -1451,7 +1437,6 @@ void\n st_iolength (void)\n {\n   library_start ();\n-\n   iolength_transfer_init ();\n }\n \n@@ -1467,7 +1452,6 @@ st_iolength_done (void)\n void\n st_read (void)\n {\n-\n   library_start ();\n \n   data_transfer_init (1);\n@@ -1502,15 +1486,13 @@ void\n st_read_done (void)\n {\n   finalize_transfer ();\n-\n   library_end ();\n }\n \n \n void\n st_write (void)\n {\n-\n   library_start ();\n   data_transfer_init (0);\n }\n@@ -1519,7 +1501,6 @@ st_write (void)\n void\n st_write_done (void)\n {\n-\n   finalize_transfer ();\n \n   /* Deal with endfile conditions associated with sequential files.  */\n@@ -1590,23 +1571,20 @@ void\n st_set_nml_var_int (void * var_addr, char * var_name, int var_name_len,\n \t\t    int kind)\n {\n-\n   st_set_nml_var (var_addr, var_name, var_name_len, kind, BT_INTEGER, 0);\n }\n \n void\n st_set_nml_var_float (void * var_addr, char * var_name, int var_name_len,\n \t\t      int kind)\n {\n-\n   st_set_nml_var (var_addr, var_name, var_name_len, kind, BT_REAL, 0);\n }\n \n void\n st_set_nml_var_char (void * var_addr, char * var_name, int var_name_len,\n \t\t     int kind, gfc_charlen_type string_length)\n {\n-\n   st_set_nml_var (var_addr, var_name, var_name_len, kind, BT_CHARACTER,\n \t\t  string_length);\n }\n@@ -1615,15 +1593,12 @@ void\n st_set_nml_var_complex (void * var_addr, char * var_name, int var_name_len,\n \t\t\tint kind)\n {\n-\n   st_set_nml_var (var_addr, var_name, var_name_len, kind, BT_COMPLEX, 0);\n }\n \n void\n st_set_nml_var_log (void * var_addr, char * var_name, int var_name_len,\n \t\t    int kind)\n {\n-  \n    st_set_nml_var (var_addr, var_name, var_name_len, kind, BT_LOGICAL, 0);\n }\n-"}, {"sha": "11aed70a7e8062b60eb1bf191fb82f5702466474", "filename": "libgfortran/io/unix.c", "status": "modified", "additions": 5, "deletions": 31, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f21edfd62d267934ad7e9475976719bc41ee7dc3/libgfortran%2Fio%2Funix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f21edfd62d267934ad7e9475976719bc41ee7dc3/libgfortran%2Fio%2Funix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Funix.c?ref=f21edfd62d267934ad7e9475976719bc41ee7dc3", "patch": "@@ -181,8 +181,8 @@ fix_fd (int fd)\n \n   input = output = error = 0;\n \n-/* Unix allocates the lowest descriptors first, so a loop is not\n- * required, but this order is. */\n+  /* Unix allocates the lowest descriptors first, so a loop is not\n+     required, but this order is. */\n \n   if (fd == STDIN_FILENO)\n     {\n@@ -271,7 +271,6 @@ readn (int fd, char *buffer, int len)\n const char *\n get_oserror (void)\n {\n-\n   return strerror (errno);\n }\n \n@@ -281,7 +280,6 @@ get_oserror (void)\n void\n sys_exit (int code)\n {\n-\n   exit (code);\n }\n \n@@ -295,7 +293,6 @@ sys_exit (int code)\n static try\n fd_flush (unix_stream * s)\n {\n-\n   if (s->ndirty == 0)\n     return SUCCESS;;\n \n@@ -476,7 +473,6 @@ fd_alloc_w_at (unix_stream * s, int *len, gfc_offset where)\n static try\n fd_sfree (unix_stream * s)\n {\n-\n   if (s->ndirty != 0 &&\n       (s->buffer != s->small_buffer || options.all_unbuffered ||\n        s->unbuffered))\n@@ -489,7 +485,6 @@ fd_sfree (unix_stream * s)\n static int\n fd_seek (unix_stream * s, gfc_offset offset)\n {\n-\n   s->physical_offset = s->logical_offset = offset;\n \n   return (lseek (s->fd, offset, SEEK_SET) < 0) ? FAILURE : SUCCESS;\n@@ -503,17 +498,14 @@ fd_seek (unix_stream * s, gfc_offset offset)\n static try\n fd_truncate (unix_stream * s)\n {\n-\n   if (lseek (s->fd, s->logical_offset, SEEK_SET) == -1)\n     return FAILURE;\n \n   /* non-seekable files, like terminals and fifo's fail the lseek.\n      the fd is a regular file at this point */\n \n   if (ftruncate (s->fd, s->logical_offset))\n-   {\n     return FAILURE;\n-   }\n \n   s->physical_offset = s->file_length = s->logical_offset;\n \n@@ -524,7 +516,6 @@ fd_truncate (unix_stream * s)\n static try\n fd_close (unix_stream * s)\n {\n-\n   if (fd_flush (s) == FAILURE)\n     return FAILURE;\n \n@@ -543,7 +534,6 @@ fd_close (unix_stream * s)\n static void\n fd_open (unix_stream * s)\n {\n-\n   if (isatty (s->fd))\n     s->unbuffered = 1;\n \n@@ -578,7 +568,6 @@ static int page_size, page_mask;\n static try\n mmap_flush (unix_stream * s)\n {\n-\n   if (!s->mmaped)\n     return fd_flush (s);\n \n@@ -683,7 +672,6 @@ mmap_alloc_w_at (unix_stream * s, int *len, gfc_offset where)\n static int\n mmap_seek (unix_stream * s, gfc_offset offset)\n {\n-\n   s->logical_offset = offset;\n   return SUCCESS;\n }\n@@ -707,7 +695,6 @@ mmap_close (unix_stream * s)\n static try\n mmap_sfree (unix_stream * s)\n {\n-\n   return SUCCESS;\n }\n \n@@ -810,7 +797,6 @@ mem_alloc_w_at (unix_stream * s, int *len, gfc_offset where)\n static int\n mem_seek (unix_stream * s, gfc_offset offset)\n {\n-\n   if (offset > s->file_length)\n     {\n       errno = ESPIPE;\n@@ -825,7 +811,6 @@ mem_seek (unix_stream * s, gfc_offset offset)\n static int\n mem_truncate (unix_stream * s)\n {\n-\n   return SUCCESS;\n }\n \n@@ -842,7 +827,6 @@ mem_close (unix_stream * s)\n static try\n mem_sfree (unix_stream * s)\n {\n-\n   return SUCCESS;\n }\n \n@@ -858,8 +842,8 @@ mem_sfree (unix_stream * s)\n void\n empty_internal_buffer(stream *strm)\n {\n-   unix_stream * s = (unix_stream *) strm;\n-   memset(s->buffer, ' ', s->file_length);\n+  unix_stream * s = (unix_stream *) strm;\n+  memset(s->buffer, ' ', s->file_length);\n }\n \n /* open_internal()-- Returns a stream structure from an internal file */\n@@ -925,7 +909,6 @@ fd_to_stream (int fd, int prot)\n int\n unit_to_fd(int unit)\n {\n-\n   gfc_unit *us;\n \n   us = find_unit(unit);\n@@ -943,7 +926,6 @@ unit_to_fd(int unit)\n static int\n unpack_filename (char *cstring, const char *fstring, int len)\n {\n-\n   len = fstrlen (fstring, len);\n   if (len >= PATH_MAX)\n     return 1;\n@@ -1065,7 +1047,7 @@ regular_file (unit_action action, unit_status status)\n       internal_error (\"regular_file(): Bad status\");\n     }\n \n-  // mode |= O_LARGEFILE;\n+  /* mode |= O_LARGEFILE; */\n \n   return open (path, mode,\n \t       S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH);\n@@ -1121,7 +1103,6 @@ open_external (unit_action action, unit_status status)\n stream *\n input_stream (void)\n {\n-\n   return fd_to_stream (STDIN_FILENO, PROT_READ);\n }\n \n@@ -1132,7 +1113,6 @@ input_stream (void)\n stream *\n output_stream (void)\n {\n-\n   return fd_to_stream (STDOUT_FILENO, PROT_WRITE);\n }\n \n@@ -1386,7 +1366,6 @@ inquire_formatted (const char *string, int len)\n const char *\n inquire_unformatted (const char *string, int len)\n {\n-\n   return inquire_formatted (string, len);\n }\n \n@@ -1413,7 +1392,6 @@ inquire_access (const char *string, int len, int mode)\n const char *\n inquire_read (const char *string, int len)\n {\n-\n   return inquire_access (string, len, R_OK);\n }\n \n@@ -1424,7 +1402,6 @@ inquire_read (const char *string, int len)\n const char *\n inquire_write (const char *string, int len)\n {\n-\n   return inquire_access (string, len, W_OK);\n }\n \n@@ -1435,7 +1412,6 @@ inquire_write (const char *string, int len)\n const char *\n inquire_readwrite (const char *string, int len)\n {\n-\n   return inquire_access (string, len, R_OK | W_OK);\n }\n \n@@ -1445,7 +1421,6 @@ inquire_readwrite (const char *string, int len)\n gfc_offset\n file_length (stream * s)\n {\n-\n   return ((unix_stream *) s)->file_length;\n }\n \n@@ -1455,7 +1430,6 @@ file_length (stream * s)\n gfc_offset\n file_position (stream * s)\n {\n-\n   return ((unix_stream *) s)->logical_offset;\n }\n "}, {"sha": "4d9c015dca3849a3090343cbb16fadb0d9e82bd1", "filename": "libgfortran/io/write.c", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f21edfd62d267934ad7e9475976719bc41ee7dc3/libgfortran%2Fio%2Fwrite.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f21edfd62d267934ad7e9475976719bc41ee7dc3/libgfortran%2Fio%2Fwrite.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fwrite.c?ref=f21edfd62d267934ad7e9475976719bc41ee7dc3", "patch": "@@ -780,7 +780,7 @@ write_int (fnode *f, const char *source, int len, char *(*conv) (uint64_t))\n \n   memcpy (p, q, digits);\n \n-done:\n+ done:\n   return;\n }\n \n@@ -865,7 +865,7 @@ write_decimal (fnode *f, const char *source, int len, char *(*conv) (int64_t))\n \n   memcpy (p, q, digits);\n \n-done:\n+ done:\n   return;\n }\n \n@@ -928,70 +928,61 @@ btoa (uint64_t n)\n void\n write_i (fnode * f, const char *p, int len)\n {\n-\n   write_decimal (f, p, len, (void *) itoa);\n }\n \n \n void\n write_b (fnode * f, const char *p, int len)\n {\n-\n   write_int (f, p, len, btoa);\n }\n \n \n void\n write_o (fnode * f, const char *p, int len)\n {\n-\n   write_int (f, p, len, otoa);\n }\n \n void\n write_z (fnode * f, const char *p, int len)\n {\n-\n   write_int (f, p, len, xtoa);\n }\n \n \n void\n write_d (fnode *f, const char *p, int len)\n {\n-\n   write_float (f, p, len);\n }\n \n \n void\n write_e (fnode *f, const char *p, int len)\n {\n-\n   write_float (f, p, len);\n }\n \n \n void\n write_f (fnode *f, const char *p, int len)\n {\n-\n   write_float (f, p, len);\n }\n \n \n void\n write_en (fnode *f, const char *p, int len)\n {\n-\n   write_float (f, p, len);\n }\n \n \n void\n write_es (fnode *f, const char *p, int len)\n {\n-\n   write_float (f, p, len);\n }\n \n@@ -1172,7 +1163,6 @@ write_real (const char *source, int length)\n static void\n write_complex (const char *source, int len)\n {\n-\n   if (write_char ('('))\n     return;\n   write_real (source, len);"}, {"sha": "dc6e590a10b26709af317a232f87b0b2a235b4d5", "filename": "libgfortran/runtime/environ.c", "status": "modified", "additions": 19, "deletions": 31, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f21edfd62d267934ad7e9475976719bc41ee7dc3/libgfortran%2Fruntime%2Fenviron.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f21edfd62d267934ad7e9475976719bc41ee7dc3/libgfortran%2Fruntime%2Fenviron.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fenviron.c?ref=f21edfd62d267934ad7e9475976719bc41ee7dc3", "patch": "@@ -79,7 +79,6 @@ print_spaces (int n)\n static const char *\n var_source (variable * v)\n {\n-\n   if (getenv (v->name) == NULL)\n     return \"Default\";\n \n@@ -111,7 +110,7 @@ init_integer (variable * v)\n   *v->var = atoi (p);\n   return;\n \n-set_default:\n+ set_default:\n   *v->var = v->value;\n   return;\n }\n@@ -122,7 +121,6 @@ init_integer (variable * v)\n static void\n show_integer (variable * v)\n {\n-\n   st_printf (\"%s  %d\\n\", var_source (v), *v->var);\n }\n \n@@ -164,7 +162,6 @@ init_boolean (variable * v)\n static void\n show_boolean (variable * v)\n {\n-\n   st_printf (\"%s  %s\\n\", var_source (v), *v->var ? \"Yes\" : \"No\");\n }\n \n@@ -288,7 +285,6 @@ init_sep (variable * v)\n static void\n show_sep (variable * v)\n {\n-\n   st_printf (\"%s  \\\"%s\\\"\\n\", var_source (v), options.separator);\n }\n \n@@ -330,31 +326,21 @@ static choice rounding[] = {\n   {\"DOWN\", FP_ROUND_DOWN},\n   {\"ZERO\", FP_ROUND_ZERO},\n   {NULL}\n-}, precision[] =\n+};\n+\n+static choice precision[] =\n {\n-  {\n-  \"24\", 1}\n-  ,\n-  {\n-  \"53\", 2}\n-  ,\n-  {\n-  \"64\", 0}\n-  ,\n-  {\n-  NULL}\n-}\n+  { \"24\", 1},\n+  { \"53\", 2},\n+  { \"64\", 0},\n+  { NULL}\n+};\n \n-, signal_choices[] =\n+static choice signal_choices[] =\n {\n-  {\n-  \"IGNORE\", 1}\n-  ,\n-  {\n-  \"ABORT\", 0}\n-  ,\n-  {\n-  NULL}\n+  { \"IGNORE\", 1},\n+  { \"ABORT\", 0},\n+  { NULL}\n };\n \n \n@@ -380,15 +366,14 @@ init_choice (variable * v, choice * c)\n   *v->var = c->value;\n   return;\n \n-set_default:\n+ set_default:\n   *v->var = v->value;\n }\n \n \n static void\n show_choice (variable * v, choice * c)\n {\n-\n   st_printf (\"%s  \", var_source (v));\n \n   for (; c->name; c++)\n@@ -399,7 +384,6 @@ show_choice (variable * v, choice * c)\n     st_printf (\"%s\\n\", c->name);\n   else\n     st_printf (\"(Unknown)\\n\");\n-\n }\n \n \n@@ -408,6 +392,7 @@ init_round (variable * v)\n {\n   init_choice (v, rounding);\n }\n+\n static void\n show_round (variable * v)\n {\n@@ -419,6 +404,7 @@ init_precision (variable * v)\n {\n   init_choice (v, precision);\n }\n+\n static void\n show_precision (variable * v)\n {\n@@ -430,6 +416,7 @@ init_signal (variable * v)\n {\n   init_choice (v, signal_choices);\n }\n+\n static void\n show_signal (variable * v)\n {\n@@ -615,7 +602,8 @@ show_variables (void)\n   char *p, **e;\n   variable *v;\n   int n;\n-/* TODO: print version number.  */\n+\n+  /* TODO: print version number.  */\n   st_printf (\"GNU Fortran 95 runtime library version \"\n \t     \"UNKNOWN\" \"\\n\\n\");\n "}, {"sha": "913812c9f516d34c02764d2aa382449aca5f82bb", "filename": "libgfortran/runtime/error.c", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f21edfd62d267934ad7e9475976719bc41ee7dc3/libgfortran%2Fruntime%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f21edfd62d267934ad7e9475976719bc41ee7dc3/libgfortran%2Fruntime%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Ferror.c?ref=f21edfd62d267934ad7e9475976719bc41ee7dc3", "patch": "@@ -281,7 +281,6 @@ st_sprintf (char *buffer, const char *format, ...)\n void\n show_locus (void)\n {\n-\n   if (!options.locus || filename == NULL)\n     return;\n \n@@ -300,8 +299,9 @@ recursion_check (void)\n {\n   static int magic = 0;\n \n+  /* Don't even try to print something at this point */\n   if (magic == MAGIC)\n-    sys_exit (4);\t\t/* Don't even try to print something at this point */\n+    sys_exit (4);\n \n   magic = MAGIC;\n }\n@@ -314,12 +314,9 @@ recursion_check (void)\n void\n os_error (const char *message)\n {\n-\n   recursion_check ();\n-\n   show_locus ();\n   st_printf (\"Operating system error: %s\\n%s\\n\", get_oserror (), message);\n-\n   sys_exit (1);\n }\n \n@@ -330,12 +327,9 @@ os_error (const char *message)\n void\n runtime_error (const char *message)\n {\n-\n   recursion_check ();\n-\n   show_locus ();\n   st_printf (\"Fortran runtime error: %s\\n\", message);\n-\n   sys_exit (2);\n }\n \n@@ -346,9 +340,7 @@ runtime_error (const char *message)\n void\n internal_error (const char *message)\n {\n-\n   recursion_check ();\n-\n   show_locus ();\n   st_printf (\"Internal Error: %s\\n\", message);\n   sys_exit (3);"}, {"sha": "fefac079dbd7ff7921af1a337e2dc8df3471ffb5", "filename": "libgfortran/runtime/in_pack_generic.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f21edfd62d267934ad7e9475976719bc41ee7dc3/libgfortran%2Fruntime%2Fin_pack_generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f21edfd62d267934ad7e9475976719bc41ee7dc3/libgfortran%2Fruntime%2Fin_pack_generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fin_pack_generic.c?ref=f21edfd62d267934ad7e9475976719bc41ee7dc3", "patch": "@@ -120,4 +120,3 @@ internal_pack (gfc_array_char * source)\n     }\n   return destptr;\n }\n-"}, {"sha": "d468e741ea7a58da8084e5c81f5c12a649030f98", "filename": "libgfortran/runtime/in_unpack_generic.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f21edfd62d267934ad7e9475976719bc41ee7dc3/libgfortran%2Fruntime%2Fin_unpack_generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f21edfd62d267934ad7e9475976719bc41ee7dc3/libgfortran%2Fruntime%2Fin_unpack_generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fin_unpack_generic.c?ref=f21edfd62d267934ad7e9475976719bc41ee7dc3", "patch": "@@ -117,4 +117,3 @@ internal_unpack (gfc_array_char * d, const void * s)\n         }\n     }\n }\n-"}, {"sha": "4e1f78c93c749b4af1f7ca2cfe6969c1309395af", "filename": "libgfortran/runtime/main.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f21edfd62d267934ad7e9475976719bc41ee7dc3/libgfortran%2Fruntime%2Fmain.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f21edfd62d267934ad7e9475976719bc41ee7dc3/libgfortran%2Fruntime%2Fmain.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fmain.c?ref=f21edfd62d267934ad7e9475976719bc41ee7dc3", "patch": "@@ -71,7 +71,6 @@ set_args (int argc, char **argv)\n void\n get_args (int *argc, char ***argv)\n {\n-\n   *argc = argc_save;\n   *argv = argv_save;\n }\n@@ -112,4 +111,3 @@ cleanup ()\n {\n   close_units ();\n }\n-"}, {"sha": "22808483619a80fd1f1e55786e3a54a6baad7e55", "filename": "libgfortran/runtime/memory.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f21edfd62d267934ad7e9475976719bc41ee7dc3/libgfortran%2Fruntime%2Fmemory.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f21edfd62d267934ad7e9475976719bc41ee7dc3/libgfortran%2Fruntime%2Fmemory.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fmemory.c?ref=f21edfd62d267934ad7e9475976719bc41ee7dc3", "patch": "@@ -65,7 +65,6 @@ static malloc_t mem_root;\n void\n memory_init (void)\n {\n-\n   /* The root should never be used directly, so don't set the magic.  */\n   mem_root.magic = 0;\n   mem_root.next = &mem_root;\n@@ -111,7 +110,6 @@ get_mem (size_t n)\n void\n free_mem (void *p)\n {\n-\n   free (p);\n }\n \n@@ -250,7 +248,6 @@ allocate_size (void **mem, size_t size, GFC_INTEGER_4 * stat)\n void\n allocate (void **mem, GFC_INTEGER_4 size, GFC_INTEGER_4 * stat)\n {\n-\n   if (size < 0)\n     {\n       runtime_error (\"Attempt to allocate negative amount of memory.  \"\n@@ -265,7 +262,6 @@ allocate (void **mem, GFC_INTEGER_4 size, GFC_INTEGER_4 * stat)\n void\n allocate64 (void **mem, GFC_INTEGER_8 size, GFC_INTEGER_4 * stat)\n {\n-\n   if (size < 0)\n     {\n       runtime_error\n@@ -283,7 +279,6 @@ allocate64 (void **mem, GFC_INTEGER_8 size, GFC_INTEGER_4 * stat)\n void\n deallocate (void **mem, GFC_INTEGER_4 * stat)\n {\n-\n   if (!mem)\n     runtime_error (\"Internal: NULL mem pointer in ALLOCATE.\");\n \n@@ -309,4 +304,3 @@ deallocate (void **mem, GFC_INTEGER_4 * stat)\n   if (stat)\n     *stat = 0;\n }\n-"}, {"sha": "e2d08bea6b30f5386729ceb3f643bd8bfc51c8ba", "filename": "libgfortran/runtime/pause.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f21edfd62d267934ad7e9475976719bc41ee7dc3/libgfortran%2Fruntime%2Fpause.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f21edfd62d267934ad7e9475976719bc41ee7dc3/libgfortran%2Fruntime%2Fpause.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fpause.c?ref=f21edfd62d267934ad7e9475976719bc41ee7dc3", "patch": "@@ -68,4 +68,3 @@ pause_string (char *string, GFC_INTEGER_4 len)\n \n   do_pause ();\n }\n-"}, {"sha": "ef8741aa748d5a296d191666960c7c9765e8c8c6", "filename": "libgfortran/runtime/stop.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f21edfd62d267934ad7e9475976719bc41ee7dc3/libgfortran%2Fruntime%2Fstop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f21edfd62d267934ad7e9475976719bc41ee7dc3/libgfortran%2Fruntime%2Fstop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fstop.c?ref=f21edfd62d267934ad7e9475976719bc41ee7dc3", "patch": "@@ -53,4 +53,3 @@ stop_string (const char *string, GFC_INTEGER_4 len)\n \n   sys_exit (0);\n }\n-"}, {"sha": "eade7c17a8a1add9d38540c1fbdcdfa05a1deed8", "filename": "libgfortran/runtime/string.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f21edfd62d267934ad7e9475976719bc41ee7dc3/libgfortran%2Fruntime%2Fstring.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f21edfd62d267934ad7e9475976719bc41ee7dc3/libgfortran%2Fruntime%2Fstring.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fstring.c?ref=f21edfd62d267934ad7e9475976719bc41ee7dc3", "patch": "@@ -51,7 +51,6 @@ compare0 (const char *s1, int s1_len, const char *s2)\n int\n fstrlen (const char *string, int len)\n {\n-\n   for (len--; len >= 0; len--)\n     if (string[len] != ' ')\n       break;\n@@ -60,11 +59,9 @@ fstrlen (const char *string, int len)\n }\n \n \n-\n void\n fstrcpy (char *dest, int destlen, const char *src, int srclen)\n {\n-\n   if (srclen >= destlen)\n     {\n       /* This will truncate if too long.  */\n@@ -108,7 +105,6 @@ int\n find_option (const char *s1, int s1_len, st_option * opts,\n \t     const char *error_message)\n {\n-\n   for (; opts->name; opts++)\n     if (compare0 (s1, s1_len, opts->name))\n       return opts->value;\n@@ -117,4 +113,3 @@ find_option (const char *s1, int s1_len, st_option * opts,\n \n   return -1;\n }\n-"}]}