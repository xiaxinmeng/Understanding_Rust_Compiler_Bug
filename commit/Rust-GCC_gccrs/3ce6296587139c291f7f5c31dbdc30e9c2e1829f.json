{"sha": "3ce6296587139c291f7f5c31dbdc30e9c2e1829f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2NlNjI5NjU4NzEzOWMyOTFmN2Y1YzMxZGJkYzMwZTljMmUxODI5Zg==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2009-04-18T20:02:47Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2009-04-18T20:02:47Z"}, "message": "re PR c/35210 (gcc incorrectly allows calling function returning \"const void\")\n\n\tPR c/35210\n\t* c-typeck.c (build_function_call): Check for calling a function\n\twith qualified void return types.  Call require_complete_type when\n\tgenerating a trap.\n\ntestsuite:\n\t* gcc.dg/call-diag-2.c: New test.\n\nFrom-SVN: r146324", "tree": {"sha": "a6c65f5de5128a6789a87a6fcc619e69296cae6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a6c65f5de5128a6789a87a6fcc619e69296cae6e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ce6296587139c291f7f5c31dbdc30e9c2e1829f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ce6296587139c291f7f5c31dbdc30e9c2e1829f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ce6296587139c291f7f5c31dbdc30e9c2e1829f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ce6296587139c291f7f5c31dbdc30e9c2e1829f/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2daad65eaf4b3406d04d6ba4758b120312ed0a0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2daad65eaf4b3406d04d6ba4758b120312ed0a0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2daad65eaf4b3406d04d6ba4758b120312ed0a0c"}], "stats": {"total": 46, "additions": 43, "deletions": 3}, "files": [{"sha": "e1507651c2b5e1c6f149bd2476b621c4937f76df", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ce6296587139c291f7f5c31dbdc30e9c2e1829f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ce6296587139c291f7f5c31dbdc30e9c2e1829f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3ce6296587139c291f7f5c31dbdc30e9c2e1829f", "patch": "@@ -1,3 +1,10 @@\n+2009-04-18  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR c/35210\n+\t* c-typeck.c (build_function_call): Check for calling a function\n+\twith qualified void return types.  Call require_complete_type when\n+\tgenerating a trap.\n+\n 2009-04-18  Jan Hubicka  <jh@suse.cz>\n \n \t* cgraph.c (cgraph_make_edge, dump_cgraph_node, cgraph_set_call_stmt):"}, {"sha": "001ea1a5aec394e7b2bfd67bdaee8d60fb3e0dc2", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ce6296587139c291f7f5c31dbdc30e9c2e1829f/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ce6296587139c291f7f5c31dbdc30e9c2e1829f/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=3ce6296587139c291f7f5c31dbdc30e9c2e1829f", "patch": "@@ -2498,7 +2498,12 @@ build_function_call (tree function, tree params)\n \ttrap = build2 (COMPOUND_EXPR, void_type_node, argarray[i], trap);\n \n       if (VOID_TYPE_P (return_type))\n-\treturn trap;\n+\t{\n+\t  if (TYPE_QUALS (return_type) != TYPE_UNQUALIFIED)\n+\t    pedwarn (input_location, 0,\n+\t\t     \"function with qualified void return type called\");\n+\t  return trap;\n+\t}\n       else\n \t{\n \t  tree rhs;\n@@ -2510,7 +2515,8 @@ build_function_call (tree function, tree params)\n \t  else\n \t    rhs = fold_convert (return_type, integer_zero_node);\n \n-\t  return build2 (COMPOUND_EXPR, return_type, trap, rhs);\n+\t  return require_complete_type (build2 (COMPOUND_EXPR, return_type,\n+\t\t\t\t\t\ttrap, rhs));\n \t}\n     }\n \n@@ -2543,7 +2549,12 @@ build_function_call (tree function, tree params)\n \t\t\t       function, nargs, argarray);\n \n   if (VOID_TYPE_P (TREE_TYPE (result)))\n-    return result;\n+    {\n+      if (TYPE_QUALS (TREE_TYPE (result)) != TYPE_UNQUALIFIED)\n+\tpedwarn (input_location, 0,\n+\t\t \"function with qualified void return type called\");\n+      return result;\n+    }\n   return require_complete_type (result);\n }\n \f"}, {"sha": "16197bc6e8392465ad551b66bdf31643e066172c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ce6296587139c291f7f5c31dbdc30e9c2e1829f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ce6296587139c291f7f5c31dbdc30e9c2e1829f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3ce6296587139c291f7f5c31dbdc30e9c2e1829f", "patch": "@@ -1,3 +1,8 @@\n+2009-04-18  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR c/35210\n+\t* gcc.dg/call-diag-2.c: New test.\n+\n 2009-04-18  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR preprocessor/39646"}, {"sha": "0d87e52e973ee9b9266d3b16efd1f0fdff5163fa", "filename": "gcc/testsuite/gcc.dg/call-diag-2.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ce6296587139c291f7f5c31dbdc30e9c2e1829f/gcc%2Ftestsuite%2Fgcc.dg%2Fcall-diag-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ce6296587139c291f7f5c31dbdc30e9c2e1829f/gcc%2Ftestsuite%2Fgcc.dg%2Fcall-diag-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcall-diag-2.c?ref=3ce6296587139c291f7f5c31dbdc30e9c2e1829f", "patch": "@@ -0,0 +1,17 @@\n+/* Test diagnostics for calling function returning qualified void or\n+   other incomplete type other than void.  PR 35210.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-pedantic-errors\" } */\n+\n+const void f_cv (void);\n+struct s f_s (void);\n+void f_v (void);\n+\n+void g1 (void) { f_cv (); } /* { dg-error \"qualified void\" } */\n+void g2 (void) { f_s (); } /* { dg-error \"invalid use of undefined type\" } */\n+void g3 (void) { ((const void (*) (void)) f_v) (); } /* { dg-error \"qualified void\" } */\n+/* { dg-warning \"function called through a non-compatible type\" \"cast\" { target *-*-* } 12 } */\n+/* { dg-message \"will abort\" \"abort\" { target *-*-* } 12 } */\n+void g4 (void) { ((struct s (*) (void)) f_v) (), (void) 0; } /* { dg-error \"invalid use of undefined type\" } */\n+/* { dg-warning \"function called through a non-compatible type\" \"cast\" { target *-*-* } 15 } */\n+/* { dg-message \"will abort\" \"abort\" { target *-*-* } 15 } */"}]}