{"sha": "bf08acdaa570ae61e86b92660ddee07d20948919", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmYwOGFjZGFhNTcwYWU2MWU4NmI5MjY2MGRkZWUwN2QyMDk0ODkxOQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-03-18T15:31:29Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-03-18T15:31:29Z"}, "message": "Avoid clobbering primary virtual base when not in charge.\n\n\t* decl.c (build_clobber_this): Factor out of\n\tstart_preparsed_function and begin_destructor_body.  Handle\n\tvirtual bases better.\n\nFrom-SVN: r234334", "tree": {"sha": "e7b210541a6caae5eee27054c7b5450e977bda2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e7b210541a6caae5eee27054c7b5450e977bda2a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf08acdaa570ae61e86b92660ddee07d20948919", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf08acdaa570ae61e86b92660ddee07d20948919", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf08acdaa570ae61e86b92660ddee07d20948919", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf08acdaa570ae61e86b92660ddee07d20948919/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "eb0dbdc723bee41672dbbfe2c734a65f44fc28c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb0dbdc723bee41672dbbfe2c734a65f44fc28c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb0dbdc723bee41672dbbfe2c734a65f44fc28c0"}], "stats": {"total": 68, "additions": 44, "deletions": 24}, "files": [{"sha": "0ee9f8b9d439aba472440ad9fef66654118b40ff", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf08acdaa570ae61e86b92660ddee07d20948919/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf08acdaa570ae61e86b92660ddee07d20948919/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=bf08acdaa570ae61e86b92660ddee07d20948919", "patch": "@@ -1,5 +1,9 @@\n 2016-03-18  Jason Merrill  <jason@redhat.com>\n \n+\t* decl.c (build_clobber_this): Factor out of\n+\tstart_preparsed_function and begin_destructor_body.  Handle\n+\tvirtual bases better.\n+\n \t* class.c (build_if_in_charge): Split out from build_base_path.\n \t* init.c (expand_virtual_init, expand_default_init): Use it.\n \t* call.c (build_special_member_call): Use it."}, {"sha": "5cad1413482fd378fe4476b262d7217d6b90766f", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf08acdaa570ae61e86b92660ddee07d20948919/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf08acdaa570ae61e86b92660ddee07d20948919/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=bf08acdaa570ae61e86b92660ddee07d20948919", "patch": "@@ -1988,7 +1988,7 @@ struct GTY(()) lang_type {\n #define CLASSTYPE_VBASECLASSES(NODE) (LANG_TYPE_CLASS_CHECK (NODE)->vbases)\n \n /* The type corresponding to NODE when NODE is used as a base class,\n-   i.e., NODE without virtual base classes.  */\n+   i.e., NODE without virtual base classes or tail padding.  */\n \n #define CLASSTYPE_AS_BASE(NODE) (LANG_TYPE_CLASS_CHECK (NODE)->as_base)\n "}, {"sha": "f33d2e967b93b5194f30ab19efef754a7c919494", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 39, "deletions": 23, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf08acdaa570ae61e86b92660ddee07d20948919/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf08acdaa570ae61e86b92660ddee07d20948919/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=bf08acdaa570ae61e86b92660ddee07d20948919", "patch": "@@ -13712,6 +13712,43 @@ implicit_default_ctor_p (tree fn)\n \t  && sufficient_parms_p (FUNCTION_FIRST_USER_PARMTYPE (fn)));\n }\n \n+/* Clobber the contents of *this to let the back end know that the object\n+   storage is dead when we enter the constructor or leave the destructor.  */\n+\n+static tree\n+build_clobber_this ()\n+{\n+  /* Clobbering an empty base is pointless, and harmful if its one byte\n+     TYPE_SIZE overlays real data.  */\n+  if (is_empty_class (current_class_type))\n+    return void_node;\n+\n+  /* If we have virtual bases, clobber the whole object, but only if we're in\n+     charge.  If we don't have virtual bases, clobber the as-base type so we\n+     don't mess with tail padding.  */\n+  bool vbases = CLASSTYPE_VBASECLASSES (current_class_type);\n+\n+  tree ctype = current_class_type;\n+  if (!vbases)\n+    ctype = CLASSTYPE_AS_BASE (ctype);\n+\n+  tree clobber = build_constructor (ctype, NULL);\n+  TREE_THIS_VOLATILE (clobber) = true;\n+\n+  tree thisref = current_class_ref;\n+  if (ctype != current_class_type)\n+    {\n+      thisref = build_nop (build_reference_type (ctype), current_class_ptr);\n+      thisref = convert_from_reference (thisref);\n+    }\n+\n+  tree exprstmt = build2 (MODIFY_EXPR, void_type_node, thisref, clobber);\n+  if (vbases)\n+    exprstmt = build_if_in_charge (exprstmt);\n+\n+  return exprstmt;\n+}\n+\n /* Create the FUNCTION_DECL for a function definition.\n    DECLSPECS and DECLARATOR are the parts of the declaration;\n    they describe the function's name and the type it returns,\n@@ -14127,17 +14164,7 @@ start_preparsed_function (tree decl1, tree attrs, int flags)\n \t because part of the initialization might happen before we enter the\n \t constructor, via AGGR_INIT_ZERO_FIRST (c++/68006).  */\n       && !implicit_default_ctor_p (decl1))\n-    {\n-      /* Insert a clobber to let the back end know that the object storage\n-\t is dead when we enter the constructor.  */\n-      tree btype = CLASSTYPE_AS_BASE (current_class_type);\n-      tree clobber = build_constructor (btype, NULL);\n-      TREE_THIS_VOLATILE (clobber) = true;\n-      tree bref = build_nop (build_reference_type (btype), current_class_ptr);\n-      bref = convert_from_reference (bref);\n-      tree exprstmt = build2 (MODIFY_EXPR, btype, bref, clobber);\n-      finish_expr_stmt (exprstmt);\n-    }\n+    finish_expr_stmt (build_clobber_this ());\n \n   if (!processing_template_decl\n       && DECL_CONSTRUCTOR_P (decl1)\n@@ -14357,18 +14384,7 @@ begin_destructor_body (void)\n       if (flag_lifetime_dse\n \t  /* Clobbering an empty base is harmful if it overlays real data.  */\n \t  && !is_empty_class (current_class_type))\n-\t{\n-\t  /* Insert a cleanup to let the back end know that the object is dead\n-\t     when we exit the destructor, either normally or via exception.  */\n-\t  tree btype = CLASSTYPE_AS_BASE (current_class_type);\n-\t  tree clobber = build_constructor (btype, NULL);\n-\t  TREE_THIS_VOLATILE (clobber) = true;\n-\t  tree bref = build_nop (build_reference_type (btype),\n-\t\t\t\t current_class_ptr);\n-\t  bref = convert_from_reference (bref);\n-\t  tree exprstmt = build2 (MODIFY_EXPR, btype, bref, clobber);\n-\t  finish_decl_cleanup (NULL_TREE, exprstmt);\n-\t}\n+\tfinish_decl_cleanup (NULL_TREE, build_clobber_this ());\n \n       /* And insert cleanups for our bases and members so that they\n \t will be properly destroyed if we throw.  */"}]}