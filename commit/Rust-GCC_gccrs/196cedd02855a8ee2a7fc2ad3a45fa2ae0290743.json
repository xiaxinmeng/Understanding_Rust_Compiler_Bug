{"sha": "196cedd02855a8ee2a7fc2ad3a45fa2ae0290743", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTk2Y2VkZDAyODU1YThlZTJhN2ZjMmFkM2E0NWZhMmFlMDI5MDc0Mw==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-07-05T03:31:52Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-07-05T03:31:52Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r1438", "tree": {"sha": "0994c02c075abf221497d13574266f031e6dcb29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0994c02c075abf221497d13574266f031e6dcb29"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/196cedd02855a8ee2a7fc2ad3a45fa2ae0290743", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/196cedd02855a8ee2a7fc2ad3a45fa2ae0290743", "html_url": "https://github.com/Rust-GCC/gccrs/commit/196cedd02855a8ee2a7fc2ad3a45fa2ae0290743", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/196cedd02855a8ee2a7fc2ad3a45fa2ae0290743/comments", "author": null, "committer": null, "parents": [{"sha": "a53d0bcc79ee90dbc21e76349938038e684893f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a53d0bcc79ee90dbc21e76349938038e684893f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a53d0bcc79ee90dbc21e76349938038e684893f9"}], "stats": {"total": 73, "additions": 47, "deletions": 26}, "files": [{"sha": "8da5ef94bd7c206b0e8d1d81c3febe5b480c796e", "filename": "gcc/dbxout.c", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/196cedd02855a8ee2a7fc2ad3a45fa2ae0290743/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/196cedd02855a8ee2a7fc2ad3a45fa2ae0290743/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=196cedd02855a8ee2a7fc2ad3a45fa2ae0290743", "patch": "@@ -396,7 +396,7 @@ dbxout_init (asm_file, input_file_name, syms)\n   /* Put the current working directory in an N_SO symbol.  */\n #ifndef DBX_WORKING_DIRECTORY /* Only some versions of DBX want this,\n \t\t\t\t but GDB always does.  */\n-  if (use_gdb_dbx_extensions)\n+  if (use_gnu_debug_info_extensions)\n #endif\n     {\n       if (cwd || (cwd = getpwd ()))\n@@ -552,7 +552,7 @@ dbxout_type_fields (type)\n \t  if (tem != TYPE_FIELDS (type))\n \t    CONTIN;\n \n-\t  if (use_gdb_dbx_extensions\n+\t  if (use_gnu_debug_info_extensions\n \t      && flag_minimal_debug\n \t      && TREE_CODE (tem) == FIELD_DECL\n \t      && DECL_VIRTUAL_P (tem)\n@@ -572,7 +572,7 @@ dbxout_type_fields (type)\n \t  fprintf (asmfile, \"%s:\", IDENTIFIER_POINTER (DECL_NAME (tem)));\n \t  CHARS (2 + IDENTIFIER_LENGTH (DECL_NAME (tem)));\n \n-\t  if (use_gdb_dbx_extensions\n+\t  if (use_gnu_debug_info_extensions\n \t      && (TREE_PRIVATE (tem) || TREE_PROTECTED (tem)\n \t\t  || TREE_CODE (tem) != FIELD_DECL))\n \t    {\n@@ -591,7 +591,7 @@ dbxout_type_fields (type)\n \n \t  if (TREE_CODE (tem) == VAR_DECL)\n \t    {\n-\t      if (TREE_STATIC (tem) && use_gdb_dbx_extensions)\n+\t      if (TREE_STATIC (tem) && use_gnu_debug_info_extensions)\n \t\t{\n \t\t  char *name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (tem));\n \t\t  have_used_extensions = 1;\n@@ -704,11 +704,10 @@ dbxout_type_methods (type)\n \n   type_identifier_length = IDENTIFIER_LENGTH (type_encoding);\n \n-  if (TREE_CODE (methods) == FUNCTION_DECL)\n-    fndecl = methods;\n-  else if (TREE_VEC_ELT (methods, 0) != NULL_TREE)\n+  if (TREE_VEC_ELT (methods, 0) != NULL_TREE)\n     fndecl = TREE_VEC_ELT (methods, 0);\n-  else fndecl = TREE_VEC_ELT (methods, 1);\n+  else\n+    fndecl = TREE_VEC_ELT (methods, 1);\n \n   while (fndecl)\n     {\n@@ -1013,7 +1012,7 @@ dbxout_type (type, full, show_arg_types)\n \tfprintf (asmfile, (TREE_CODE (type) == RECORD_TYPE) ? \"s%d\" : \"u%d\",\n \t\t TREE_INT_CST_LOW (tem));\n \n-\tif (use_gdb_dbx_extensions)\n+\tif (use_gnu_debug_info_extensions)\n \t  {\n \t    if (n_baseclasses)\n \t      {\n@@ -1025,7 +1024,7 @@ dbxout_type (type, full, show_arg_types)\n \tfor (i = 0; i < n_baseclasses; i++)\n \t  {\n \t    tree child = TREE_VEC_ELT (BINFO_BASETYPES (TYPE_BINFO (type)), i);\n-\t    if (use_gdb_dbx_extensions)\n+\t    if (use_gnu_debug_info_extensions)\n \t      {\n \t\thave_used_extensions = 1;\n \t\tputc (TREE_VIA_VIRTUAL (child) ? '1'\n@@ -1059,14 +1058,14 @@ dbxout_type (type, full, show_arg_types)\n \n       /* Write out the field declarations.  */\n       dbxout_type_fields (type);\n-      if (use_gdb_dbx_extensions && TYPE_METHODS (type) != NULL_TREE)\n+      if (use_gnu_debug_info_extensions && TYPE_METHODS (type) != NULL_TREE)\n \t{\n \t  have_used_extensions = 1;\n \t  dbxout_type_methods (type);\n \t}\n       putc (';', asmfile);\n \n-      if (use_gdb_dbx_extensions && TREE_CODE (type) == RECORD_TYPE\n+      if (use_gnu_debug_info_extensions && TREE_CODE (type) == RECORD_TYPE\n \t  /* Avoid the ~ if we don't really need it--it confuses dbx.  */\n \t  && TYPE_VFIELD (type))\n \t{\n@@ -1127,7 +1126,7 @@ dbxout_type (type, full, show_arg_types)\n       break;\n \n     case METHOD_TYPE:\n-      if (use_gdb_dbx_extensions)\n+      if (use_gnu_debug_info_extensions)\n \t{\n \t  have_used_extensions = 1;\n \t  putc ('#', asmfile);\n@@ -1162,7 +1161,7 @@ dbxout_type (type, full, show_arg_types)\n       break;\n \n     case OFFSET_TYPE:\n-      if (use_gdb_dbx_extensions)\n+      if (use_gnu_debug_info_extensions)\n \t{\n \t  have_used_extensions = 1;\n \t  putc ('@', asmfile);\n@@ -1181,9 +1180,9 @@ dbxout_type (type, full, show_arg_types)\n       break;\n \n     case REFERENCE_TYPE:\n-      if (use_gdb_dbx_extensions)\n+      if (use_gnu_debug_info_extensions)\n \thave_used_extensions = 1;\n-      putc (use_gdb_dbx_extensions ? '&' : '*', asmfile);\n+      putc (use_gnu_debug_info_extensions ? '&' : '*', asmfile);\n       CHARS (1);\n       dbxout_type (TREE_TYPE (type), 0, 0);\n       break;\n@@ -1380,7 +1379,7 @@ dbxout_symbol (decl, local)\n \t    if ((TREE_CODE (type) == RECORD_TYPE\n \t\t || TREE_CODE (type) == UNION_TYPE)\n \t\t&& TYPE_NAME (type) == decl\n-\t\t&& !(use_gdb_dbx_extensions && have_used_extensions)\n+\t\t&& !(use_gnu_debug_info_extensions && have_used_extensions)\n \t\t&& !TREE_ASM_WRITTEN (TYPE_NAME (type)))\n \t      {\n \t\ttree name = TYPE_NAME (type);\n@@ -1407,7 +1406,7 @@ dbxout_symbol (decl, local)\n \t\t || TREE_CODE (type) == UNION_TYPE)\n \t\t&& TYPE_NAME (type) == decl)\n \t      {\n-\t\tif (use_gdb_dbx_extensions && have_used_extensions)\n+\t\tif (use_gnu_debug_info_extensions && have_used_extensions)\n \t\t  {\n \t\t    putc ('T', asmfile);\n \t\t    TREE_ASM_WRITTEN (TYPE_NAME (type)) = 1;"}, {"sha": "2aa09f85221a7bce00f767fefe2506409f5c703f", "filename": "gcc/final.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/196cedd02855a8ee2a7fc2ad3a45fa2ae0290743/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/196cedd02855a8ee2a7fc2ad3a45fa2ae0290743/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=196cedd02855a8ee2a7fc2ad3a45fa2ae0290743", "patch": "@@ -1038,6 +1038,15 @@ final_scan_insn (insn, file, optimize, prescan, nopeepholes)\n #ifdef DWARF_DEBUGGING_INFO\n \t  if (write_symbols == DWARF_DEBUG && block_depth >= 1)\n \t    dwarfout_end_block (pending_blocks[block_depth]);\n+#endif\n+\t}\n+      else if (NOTE_LINE_NUMBER (insn) == NOTE_INSN_DELETED_LABEL\n+\t       && (debug_info_level == DINFO_LEVEL_NORMAL\n+\t\t   || debug_info_level == DINFO_LEVEL_VERBOSE))\n+\t{\n+#ifdef DWARF_DEBUGGING_INFO\n+          if (write_symbols == DWARF_DEBUG)\n+            dwarfout_label (insn);\n #endif\n \t}\n       else if (NOTE_LINE_NUMBER (insn) > 0)"}, {"sha": "f7dd22ad66d65f4bfc866463f39feb7bc42b9ba5", "filename": "gcc/jump.c", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/196cedd02855a8ee2a7fc2ad3a45fa2ae0290743/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/196cedd02855a8ee2a7fc2ad3a45fa2ae0290743/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=196cedd02855a8ee2a7fc2ad3a45fa2ae0290743", "patch": "@@ -2890,6 +2890,8 @@ delete_insn (insn)\n {\n   register rtx next = NEXT_INSN (insn);\n   register rtx prev = PREV_INSN (insn);\n+  register int was_code_label = (GET_CODE (insn) == CODE_LABEL);\n+  register int dont_really_delete = 0;\n \n   while (next && INSN_DELETED_P (next))\n     next = NEXT_INSN (next);\n@@ -2898,9 +2900,18 @@ delete_insn (insn)\n   if (INSN_DELETED_P (insn))\n     return next;\n \n-  /* Mark this insn as deleted.  */\n-\n-  INSN_DELETED_P (insn) = 1;\n+  /* Don't delete user-declared labels.  Convert them to special NOTEs\n+     instead.  */\n+  if (was_code_label && LABEL_NAME (insn) != 0)\n+    {\n+      PUT_CODE (insn, NOTE);\n+      NOTE_LINE_NUMBER (insn) = NOTE_INSN_DELETED_LABEL;\n+      NOTE_SOURCE_FILE (insn) = 0;\n+      dont_really_delete = 1;\n+    }\n+  else\n+    /* Mark this insn as deleted.  */\n+    INSN_DELETED_P (insn) = 1;\n \n   /* If this is an unconditional jump, delete it from the jump chain.  */\n   if (simplejump_p (insn))\n@@ -2917,7 +2928,7 @@ delete_insn (insn)\n \n   /* Patch out INSN (and the barrier if any) */\n \n-  if (optimize)\n+  if (optimize && ! dont_really_delete)\n     {\n       if (prev)\n \t{\n@@ -2964,7 +2975,7 @@ delete_insn (insn)\n      delete the dispatch table.  The tablejump must have gone already.\n      It isn't useful to fall through into a table.  */\n \n-  if (GET_CODE (insn) == CODE_LABEL\n+  if (was_code_label\n       && NEXT_INSN (insn) != 0\n       && GET_CODE (NEXT_INSN (insn)) == JUMP_INSN\n       && (GET_CODE (PATTERN (NEXT_INSN (insn))) == ADDR_VEC\n@@ -2973,8 +2984,7 @@ delete_insn (insn)\n \n   /* If INSN was a label, delete insns following it if now unreachable.  */\n \n-  if (GET_CODE (insn) == CODE_LABEL && prev\n-      && GET_CODE (prev) == BARRIER)\n+  if (was_code_label && prev && GET_CODE (prev) == BARRIER)\n     {\n       register RTX_CODE code;\n       while (next != 0"}, {"sha": "a145e54ab508d0b92c69446bb1d7c0cafdd56a01", "filename": "gcc/rtl.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/196cedd02855a8ee2a7fc2ad3a45fa2ae0290743/gcc%2Frtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/196cedd02855a8ee2a7fc2ad3a45fa2ae0290743/gcc%2Frtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.c?ref=196cedd02855a8ee2a7fc2ad3a45fa2ae0290743", "patch": "@@ -170,7 +170,8 @@ char *note_insn_name[] = { \"NOTE_INSN_FUNCTION_BEG\", \"NOTE_INSN_DELETED\",\n \t\t\t   \"NOTE_INSN_LOOP_BEG\", \"NOTE_INSN_LOOP_END\",\n \t\t\t   \"NOTE_INSN_FUNCTION_END\", \"NOTE_INSN_SETJMP\",\n \t\t\t   \"NOTE_INSN_LOOP_CONT\", \"NOTE_INSN_LOOP_VTOP\",\n-\t\t\t   \"NOTE_INSN_PROLOGUE_END\", \"NOTE_INSN_EPILOGUE_BEG\" };\n+\t\t\t   \"NOTE_INSN_PROLOGUE_END\", \"NOTE_INSN_EPILOGUE_BEG\",\n+\t\t\t   \"NOT_INSN_DELETED_LABEL\"};\n \n char *reg_note_name[] = { \"\", \"REG_DEAD\", \"REG_INC\", \"REG_EQUIV\", \"REG_WAS_0\",\n \t\t\t  \"REG_EQUAL\", \"REG_RETVAL\", \"REG_LIBCALL\","}, {"sha": "5756a1cab2ba0d7a60d153edeaf578775233e306", "filename": "gcc/rtl.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/196cedd02855a8ee2a7fc2ad3a45fa2ae0290743/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/196cedd02855a8ee2a7fc2ad3a45fa2ae0290743/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=196cedd02855a8ee2a7fc2ad3a45fa2ae0290743", "patch": "@@ -340,6 +340,8 @@ extern char *reg_note_name[];\n #define NOTE_INSN_PROLOGUE_END -10\n /* This marks the point immediately prior to the first epilogue insn.  */\n #define NOTE_INSN_EPILOGUE_BEG -11\n+/* Generated in place of user-declared labels when they are deleted.  */\n+#define NOTE_INSN_DELETED_LABEL -12\n /* Don't forget to change note_insn_name in rtl.c.  */\n \n #define NOTE_DECL_NAME(INSN) ((INSN)->fld[3].rtstr)"}]}