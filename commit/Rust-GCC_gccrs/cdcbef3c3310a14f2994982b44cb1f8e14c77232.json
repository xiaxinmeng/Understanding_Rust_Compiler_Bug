{"sha": "cdcbef3c3310a14f2994982b44cb1f8e14c77232", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2RjYmVmM2MzMzEwYTE0ZjI5OTQ5ODJiNDRjYjFmOGUxNGM3NzIzMg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-12-07T09:29:07Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-12-07T11:05:51Z"}, "message": "tree-optimization/98117 - fix range set by vectorization on niter IVs\n\nThis avoids the degenerate case of a TYPE_MAX_VALUE latch iteration\ncount value causing wrong range info for the vector IV.  There's\nstill the case of VF == 1 where if we don't know whether we hit the\nabove case we cannot emit a range.\n\n2020-12-07  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/98117\n\t* tree-vect-loop-manip.c (vect_gen_vector_loop_niters):\n\tProperly handle degenerate niter when setting the vector\n\tloop IV range.\n\n\t* gcc.dg/torture/pr98117.c: New testcase.", "tree": {"sha": "e35a3e2519b0b7e6a17937c430446f92c80ad6b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e35a3e2519b0b7e6a17937c430446f92c80ad6b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cdcbef3c3310a14f2994982b44cb1f8e14c77232", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdcbef3c3310a14f2994982b44cb1f8e14c77232", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cdcbef3c3310a14f2994982b44cb1f8e14c77232", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdcbef3c3310a14f2994982b44cb1f8e14c77232/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8fb01fbb0c3c6b8ec0e5a301651b0824aaf880b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8fb01fbb0c3c6b8ec0e5a301651b0824aaf880b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8fb01fbb0c3c6b8ec0e5a301651b0824aaf880b"}], "stats": {"total": 47, "additions": 41, "deletions": 6}, "files": [{"sha": "f2160257263b86f34b965bfdc83049a7161c7a6b", "filename": "gcc/testsuite/gcc.dg/torture/pr98117.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdcbef3c3310a14f2994982b44cb1f8e14c77232/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr98117.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdcbef3c3310a14f2994982b44cb1f8e14c77232/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr98117.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr98117.c?ref=cdcbef3c3310a14f2994982b44cb1f8e14c77232", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do run } */\n+/* { dg-additional-options \"-fno-tree-scev-cprop\" } */\n+\n+unsigned char c;\n+void __attribute__((noipa))\n+e()\n+{\n+  do\n+    {\n+    }\n+  while (++c);\n+}\n+int main()\n+{\n+  e();\n+  if (c != 0)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "2370b879b2100c2a21348e923ade21aaa0c63a44", "filename": "gcc/tree-vect-loop-manip.c", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdcbef3c3310a14f2994982b44cb1f8e14c77232/gcc%2Ftree-vect-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdcbef3c3310a14f2994982b44cb1f8e14c77232/gcc%2Ftree-vect-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop-manip.c?ref=cdcbef3c3310a14f2994982b44cb1f8e14c77232", "patch": "@@ -2034,13 +2034,29 @@ vect_gen_vector_loop_niters (loop_vec_info loop_vinfo, tree niters,\n       niters_vector = force_gimple_operand (niters_vector, &stmts, true, var);\n       gsi_insert_seq_on_edge_immediate (pe, stmts);\n       /* Peeling algorithm guarantees that vector loop bound is at least ONE,\n-\t we set range information to make niters analyzer's life easier.  */\n+\t we set range information to make niters analyzer's life easier.\n+\t Note the number of latch iteration value can be TYPE_MAX_VALUE so\n+\t we have to represent the vector niter TYPE_MAX_VALUE + 1 >> log_vf.  */\n       if (stmts != NULL && log_vf)\n-\tset_range_info (niters_vector, VR_RANGE,\n-\t\t\twi::to_wide (build_int_cst (type, 1)),\n-\t\t\twi::to_wide (fold_build2 (RSHIFT_EXPR, type,\n-\t\t\t\t\t\t  TYPE_MAX_VALUE (type),\n-\t\t\t\t\t\t  log_vf)));\n+\t{\n+\t  if (niters_no_overflow)\n+\t    set_range_info (niters_vector, VR_RANGE,\n+\t\t\t    wi::one (TYPE_PRECISION (type)),\n+\t\t\t    wi::rshift (wi::max_value (TYPE_PRECISION (type),\n+\t\t\t\t\t\t       TYPE_SIGN (type)),\n+\t\t\t\t\texact_log2 (const_vf),\n+\t\t\t\t\tTYPE_SIGN (type)));\n+\t  /* For VF == 1 the vector IV might also overflow so we cannot\n+\t     assert a minimum value of 1.  */\n+\t  else if (const_vf > 1)\n+\t    set_range_info (niters_vector, VR_RANGE,\n+\t\t\t    wi::one (TYPE_PRECISION (type)),\n+\t\t\t    wi::rshift (wi::max_value (TYPE_PRECISION (type),\n+\t\t\t\t\t\t       TYPE_SIGN (type))\n+\t\t\t\t\t- (const_vf - 1),\n+\t\t\t\t\texact_log2 (const_vf), TYPE_SIGN (type))\n+\t\t\t    + 1);\n+\t}\n     }\n   *niters_vector_ptr = niters_vector;\n   *step_vector_ptr = step_vector;"}]}