{"sha": "f2aa696b5b6c26aabe1fc65b2ff5b82fe6037aec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjJhYTY5NmI1YjZjMjZhYWJlMWZjNjViMmZmNWI4MmZlNjAzN2FlYw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2013-12-28T10:12:59Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2013-12-28T10:12:59Z"}, "message": "c-ada-spec.c (print_constructor): New function.\n\n\t* c-ada-spec.c (print_constructor): New function.\n\t(print_destructor): Retrieve the origin of the destructor.\n\t(print_ada_declaration): Revamp handling of constructors/destructors.\n\nFrom-SVN: r206228", "tree": {"sha": "f2b8055c71e641c23256e2f20da7cbfd5f101a59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f2b8055c71e641c23256e2f20da7cbfd5f101a59"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2aa696b5b6c26aabe1fc65b2ff5b82fe6037aec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2aa696b5b6c26aabe1fc65b2ff5b82fe6037aec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2aa696b5b6c26aabe1fc65b2ff5b82fe6037aec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2aa696b5b6c26aabe1fc65b2ff5b82fe6037aec/comments", "author": null, "committer": null, "parents": [{"sha": "2748936ad85a34cafd6aa6c861107e399109c080", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2748936ad85a34cafd6aa6c861107e399109c080", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2748936ad85a34cafd6aa6c861107e399109c080"}], "stats": {"total": 81, "additions": 47, "deletions": 34}, "files": [{"sha": "5895ed376042d190dca6c27afe45ffe8378d6a93", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2aa696b5b6c26aabe1fc65b2ff5b82fe6037aec/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2aa696b5b6c26aabe1fc65b2ff5b82fe6037aec/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=f2aa696b5b6c26aabe1fc65b2ff5b82fe6037aec", "patch": "@@ -1,3 +1,9 @@\n+2013-12-28  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* c-ada-spec.c (print_constructor): New function.\n+\t(print_destructor): Retrieve the origin of the destructor.\n+\t(print_ada_declaration): Revamp handling of constructors/destructors.\n+\n 2013-12-23  Stuart Hastings <stuart@apple.com>\n \t    Bill Maddox  <maddox@google.com>\n \t    Jason Merrill  <jason@redhat.com>"}, {"sha": "27fb9d765270f77dd7932a2af61d2417438e5a32", "filename": "gcc/c-family/c-ada-spec.c", "status": "modified", "additions": 41, "deletions": 34, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2aa696b5b6c26aabe1fc65b2ff5b82fe6037aec/gcc%2Fc-family%2Fc-ada-spec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2aa696b5b6c26aabe1fc65b2ff5b82fe6037aec/gcc%2Fc-family%2Fc-ada-spec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-ada-spec.c?ref=f2aa696b5b6c26aabe1fc65b2ff5b82fe6037aec", "patch": "@@ -2521,20 +2521,34 @@ dump_nested_types (pretty_printer *buffer, tree t, tree parent, bool forward,\n   TREE_VISITED (t) = 1;\n }\n \n+/* Dump in BUFFER constructor spec corresponding to T.  */\n+\n+static void\n+print_constructor (pretty_printer *buffer, tree t)\n+{\n+  tree decl_name = DECL_NAME (DECL_ORIGIN (t));\n+\n+  pp_string (buffer, \"New_\");\n+  pp_ada_tree_identifier (buffer, decl_name, t, false);\n+}\n+\n /* Dump in BUFFER destructor spec corresponding to T.  */\n \n static void\n print_destructor (pretty_printer *buffer, tree t)\n {\n-  const char *s = IDENTIFIER_POINTER (DECL_NAME (t));\n+  tree decl_name = DECL_NAME (DECL_ORIGIN (t));\n+  const char *s = IDENTIFIER_POINTER (decl_name);\n \n   if (*s == '_')\n-    for (s += 2; *s != ' '; s++)\n-      pp_character (buffer, *s);\n+    {\n+      for (s += 2; *s != ' '; s++)\n+\tpp_character (buffer, *s);\n+    }\n   else\n     {\n       pp_string (buffer, \"Delete_\");\n-      pp_ada_tree_identifier (buffer, DECL_NAME (t), t, false);\n+      pp_ada_tree_identifier (buffer, decl_name, t, false);\n     }\n }\n \n@@ -2785,7 +2799,7 @@ print_ada_declaration (pretty_printer *buffer, tree t, tree type, int spc)\n     }\n   else if (TREE_CODE (t) == FUNCTION_DECL)\n     {\n-      bool is_function = true, is_abstract_class = false;\n+      bool is_function, is_abstract_class = false;\n       bool is_method = TREE_CODE (TREE_TYPE (t)) == METHOD_TYPE;\n       tree decl_name = DECL_NAME (t);\n       int prev_in_function = in_function;\n@@ -2805,24 +2819,21 @@ print_ada_declaration (pretty_printer *buffer, tree t, tree type, int spc)\n \t  is_copy_constructor = cpp_check (t, IS_COPY_CONSTRUCTOR);\n \t}\n \n-      /* Skip __comp_dtor destructor which is redundant with the '~class()'\n-\t destructor.  */\n-      if (is_destructor\n-\t  && !strncmp (IDENTIFIER_POINTER (decl_name), \"__comp\", 6))\n-\treturn 0;\n-\n       /* Skip copy constructors: some are internal only, and those that are\n \t not cannot be called easily from Ada anyway.  */\n       if (is_copy_constructor)\n \treturn 0;\n \n-      /* If this function has an entry in the dispatch table, we cannot\n-\t omit it.  */\n-      if (!DECL_VINDEX (t) && *IDENTIFIER_POINTER (decl_name) == '_')\n+      if (is_constructor || is_destructor)\n \t{\n-\t  if (IDENTIFIER_POINTER (decl_name)[1] == '_')\n+\t  /* Only consider constructors/destructors for complete objects.  */\n+\t  if (strncmp (IDENTIFIER_POINTER (decl_name), \"__comp\", 6) != 0)\n \t    return 0;\n+\t}\n \n+      /* If this function has an entry in the vtable, we cannot omit it.  */\n+      else if (!DECL_VINDEX (t) && *IDENTIFIER_POINTER (decl_name) == '_')\n+\t{\n \t  INDENT (spc);\n \t  pp_string (buffer, \"--  skipped func \");\n \t  pp_string (buffer, IDENTIFIER_POINTER (decl_name));\n@@ -2832,19 +2843,22 @@ print_ada_declaration (pretty_printer *buffer, tree t, tree type, int spc)\n       if (need_indent)\n \tINDENT (spc);\n \n-      if (is_constructor)\n-\tpp_string (buffer, \"function New_\");\n-      else if (VOID_TYPE_P (TREE_TYPE (TREE_TYPE (t))))\n+      if (VOID_TYPE_P (TREE_TYPE (TREE_TYPE (t))) && !is_constructor)\n \t{\n-\t  is_function = false;\n \t  pp_string (buffer, \"procedure \");\n+\t  is_function = false;\n \t}\n       else\n-\tpp_string (buffer, \"function \");\n+\t{\n+\t  pp_string (buffer, \"function \");\n+\t  is_function = true;\n+\t}\n \n       in_function = is_function;\n \n-      if (is_destructor)\n+      if (is_constructor)\n+\tprint_constructor (buffer, t);\n+      else if (is_destructor)\n \tprint_destructor (buffer, t);\n       else\n \tdump_ada_decl_name (buffer, t, false);\n@@ -2856,16 +2870,9 @@ print_ada_declaration (pretty_printer *buffer, tree t, tree type, int spc)\n       if (is_function)\n \t{\n \t  pp_string (buffer, \" return \");\n-\n-\t  if (is_constructor)\n-\t    {\n-\t      dump_ada_decl_name (buffer, t, false);\n-\t    }\n-\t  else\n-\t    {\n-\t      dump_generic_ada_node\n-\t\t(buffer, TREE_TYPE (TREE_TYPE (t)), type, spc, false, true);\n-\t    }\n+\t  tree ret_type\n+\t    = is_constructor ? DECL_CONTEXT (t) : TREE_TYPE (TREE_TYPE (t));\n+\t  dump_generic_ada_node (buffer, ret_type, type, spc, false, true);\n \t}\n \n       if (is_constructor\n@@ -2877,7 +2884,7 @@ print_ada_declaration (pretty_printer *buffer, tree t, tree type, int spc)\n \t  for (tmp = TYPE_METHODS (type); tmp; tmp = TREE_CHAIN (tmp))\n \t    if (cpp_check (tmp, IS_ABSTRACT))\n \t      {\n-\t\tis_abstract_class = 1;\n+\t\tis_abstract_class = true;\n \t\tbreak;\n \t      }\n \t}\n@@ -2896,8 +2903,8 @@ print_ada_declaration (pretty_printer *buffer, tree t, tree type, int spc)\n \n       if (is_constructor)\n \t{\n-\t  pp_string (buffer, \"pragma CPP_Constructor (New_\");\n-\t  dump_ada_decl_name (buffer, t, false);\n+\t  pp_string (buffer, \"pragma CPP_Constructor (\");\n+\t  print_constructor (buffer, t);\n \t  pp_string (buffer, \", \\\"\");\n \t  pp_asm_name (buffer, t);\n \t  pp_string (buffer, \"\\\");\");"}]}