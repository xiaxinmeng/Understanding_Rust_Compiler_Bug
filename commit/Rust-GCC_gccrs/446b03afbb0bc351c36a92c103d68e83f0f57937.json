{"sha": "446b03afbb0bc351c36a92c103d68e83f0f57937", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQ2YjAzYWZiYjBiYzM1MWMzNmE5MmMxMDNkNjhlODNmMGY1NzkzNw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "1996-06-04T18:12:36Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "1996-06-04T18:12:36Z"}, "message": "Align code at the start loops and after unconditional branches\n\nFrom-SVN: r12154", "tree": {"sha": "6f221822b4f2a76accdf86b3ff60aa57f975e7ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f221822b4f2a76accdf86b3ff60aa57f975e7ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/446b03afbb0bc351c36a92c103d68e83f0f57937", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/446b03afbb0bc351c36a92c103d68e83f0f57937", "html_url": "https://github.com/Rust-GCC/gccrs/commit/446b03afbb0bc351c36a92c103d68e83f0f57937", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/446b03afbb0bc351c36a92c103d68e83f0f57937/comments", "author": null, "committer": null, "parents": [{"sha": "24b867d8bed5b6b49c0d371637e1021abcc08595", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24b867d8bed5b6b49c0d371637e1021abcc08595", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24b867d8bed5b6b49c0d371637e1021abcc08595"}], "stats": {"total": 46, "additions": 41, "deletions": 5}, "files": [{"sha": "1c7714b5a121cda373aa196787a75e9413be7ac0", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 41, "deletions": 5, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/446b03afbb0bc351c36a92c103d68e83f0f57937/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/446b03afbb0bc351c36a92c103d68e83f0f57937/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=446b03afbb0bc351c36a92c103d68e83f0f57937", "patch": "@@ -219,9 +219,6 @@ do {\t\t\t\t\t\t\t\t\\\n /* Allocation boundary (in *bits*) for the code of a function.\n    32 bit alignment is faster, because instructions are always fetched as a\n    pair from a longword boundary.  */\n-/* ??? Perhaps also define ASM_OUTPUT_ALIGN_CODE and/or ASM_OUTPUT_LOOP_ALIGN\n-   so as to align jump targets and/or loops to 4 byte boundaries when not\n-   optimizing for space?  */\n #define FUNCTION_BOUNDARY  (TARGET_SMALLCODE ? 16 : 32)\n \n /* Alignment of field after `int : 0' in a structure.  */\n@@ -1437,6 +1434,17 @@ do { char dstr[30];\t\t\t\t\t\\\n #define ASM_OUTPUT_BYTE(STREAM, VALUE)  \t\\\n   fprintf (STREAM, \"\\t.byte\\t%d\\n\", VALUE)  \t\\\n \n+/* Align loops and labels after unconditional branches to get faster\n+   code.  */\n+\n+#define ASM_OUTPUT_LOOP_ALIGN(FILE)\t\\\n+  if (! TARGET_SMALLCODE)\t\t\\\n+    ASM_OUTPUT_ALIGN ((FILE), 2)\n+\n+#define ASM_OUTPUT_ALIGN_CODE(FILE)\t\\\n+  if (! TARGET_SMALLCODE)\t\t\\\n+    ASM_OUTPUT_ALIGN ((FILE), (TARGET_SH3 || TARGET_SH3E) ? 4 : 2)\n+\n /* This is how to output an assembler line\n    that says to advance the location counter by SIZE bytes.  */\n \n@@ -1538,7 +1546,11 @@ extern int pragma_interrupt;\n #define MOVE_RATIO (TARGET_SMALLCODE ? 2 : 16)\n \f\n /* Instructions with unfilled delay slots take up an extra two bytes for\n-   the nop in the delay slot.  */\n+   the nop in the delay slot.  Instructions at the start of loops, or\n+   after unconditional branches, may take up extra room when they are\n+   aligned.  ??? We would get more accurate results if we did instruction\n+   alignment based on the value of INSN_CURRENT_ADDRESS; the approach used\n+   here is too conservative.  */\n \n #define ADJUST_INSN_LENGTH(X, LENGTH)\t\t\t\t\\\n   if (((GET_CODE (X) == INSN\t\t\t\t\t\\\n@@ -1550,7 +1562,31 @@ extern int pragma_interrupt;\n \t   && GET_CODE (PATTERN (X)) != ADDR_DIFF_VEC\t\t\\\n \t   && GET_CODE (PATTERN (X)) != ADDR_VEC))\t\t\\\n       && get_attr_needs_delay_slot (X) == NEEDS_DELAY_SLOT_YES)\t\\\n-   LENGTH += 2;\n+    LENGTH += 2;\t\t\t\t\t\t\\\n+  if (! TARGET_SMALLCODE)\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+       rtx aip;\t\t\t\t\t\t\t\\\n+       for (aip = PREV_INSN (X); aip; aip = PREV_INSN (aip))\t\\\n+\t {\t\t\t\t\t\t\t\\\n+\t   if (GET_CODE (aip) == BARRIER)\t\t\t\\\n+\t     {\t\t\t\t\t\t\t\\\n+\t       if (TARGET_SH3 || TARGET_SH3E)\t\t\t\\\n+\t\t LENGTH += 14;\t\t\t\t\t\\\n+\t       else\t\t\t\t\t\t\\\n+\t\t LENGTH += 2;\t\t\t\t\t\\\n+\t       break;\t\t\t\t\t\t\\\n+\t     }\t\t\t\t\t\t\t\\\n+\t   else if ((GET_CODE (aip) == NOTE\t\t\t\\\n+\t\t     && NOTE_LINE_NUMBER (aip) == NOTE_INSN_LOOP_BEG)) \\\n+\t     {\t\t\t\t\t\t\t\\\n+\t       LENGTH += 2;\t\t\t\t\t\\\n+\t       break;\t\t\t\t\t\t\\\n+\t     }\t\t\t\t\t\t\t\\\n+\t   else if (GET_CODE (aip) != NOTE\t\t\t\\\n+\t\t    && GET_CODE (aip) != CODE_LABEL)\t\t\\\n+\t     break;\t\t\t\t\t\t\\\n+\t }\t\t\t\t\t\t\t\\\n+    }\n \n /* Enable a bug fix for the shorten_branches pass.  */\n #define SHORTEN_WITH_ADJUST_INSN_LENGTH"}]}