{"sha": "3de878170d252a27d34c0e161ea2f0db2a553158", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2RlODc4MTcwZDI1MmEyN2QzNGMwZTE2MWVhMmYwZGIyYTU1MzE1OA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2004-11-26T22:02:34Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2004-11-26T22:02:34Z"}, "message": "badalloc1.C: Robustify.\n\n2004-11-26  Mark Mitchell  <mark@codesourcery.com>\n\n\t* g++.old-deja/g++.eh/badalloc1.C: Robustify.\n\nFrom-SVN: r91352", "tree": {"sha": "d43ad876e963b53ede7dfd7ba2ad6263acd465f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d43ad876e963b53ede7dfd7ba2ad6263acd465f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3de878170d252a27d34c0e161ea2f0db2a553158", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3de878170d252a27d34c0e161ea2f0db2a553158", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3de878170d252a27d34c0e161ea2f0db2a553158", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3de878170d252a27d34c0e161ea2f0db2a553158/comments", "author": null, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fcc7481f804e1add6887c3c870f53343999da53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fcc7481f804e1add6887c3c870f53343999da53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fcc7481f804e1add6887c3c870f53343999da53"}], "stats": {"total": 30, "additions": 16, "deletions": 14}, "files": [{"sha": "9973d150cd30167214f1d1face5f298c043474fd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3de878170d252a27d34c0e161ea2f0db2a553158/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3de878170d252a27d34c0e161ea2f0db2a553158/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3de878170d252a27d34c0e161ea2f0db2a553158", "patch": "@@ -1,3 +1,7 @@\n+2004-11-26  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* g++.old-deja/g++.eh/badalloc1.C: Robustify.\n+\n 2004-11-26  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* gcc.dg/sibcall-[34].c: Remove MIPS xfails."}, {"sha": "8af1a074abefc73b793dcfd4a3f9afb46c8f0100", "filename": "gcc/testsuite/g++.old-deja/g++.eh/badalloc1.C", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3de878170d252a27d34c0e161ea2f0db2a553158/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fbadalloc1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3de878170d252a27d34c0e161ea2f0db2a553158/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fbadalloc1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fbadalloc1.C?ref=3de878170d252a27d34c0e161ea2f0db2a553158", "patch": "@@ -14,10 +14,9 @@ extern \"C\" void *memcpy(void *, const void *, size_t);\n #ifdef STACK_SIZE\n const int arena_size = 256;\n #else\n-#ifdef __FreeBSD__\n-// FreeBSD with threads requires even more space at initialization time.\n-#include \"bits/c++config.h\"\n-#include \"bits/gthr.h\"\n+#if defined(__FreeBSD__) || defined(__sun__)\n+// FreeBSD with threads and Solaris with threads require even more\n+// space at initialization time.\n const int arena_size = 131072;\n #else\n const int arena_size = 32768;\n@@ -105,16 +104,15 @@ void fn_catchthrow() throw(int)\n \n int main()\n {\n-#ifdef __FreeBSD__\n-// FreeBSD with threads fails the test unless each thread primes itself.\n-  if (__gthread_active_p())\n-    {\n-      try{fn_throw();}\n-      catch(int a){}\n-    }\n-// This was added to test with well-known idiom to detect regressions here\n-// rather than always failing with -pthread.\n-#endif\n+  /* On some systems (including FreeBSD and Solaris 2.10),\n+     __cxa_get_globals will try to call \"malloc\" when threads are in\n+     use.  Therefore, we throw one exception up front so that\n+     __cxa_get_globals is all set up.  Ideally, this would not be\n+     necessary, but it is a well-known idiom, and using this technique\n+     means that we can still validate the fact that exceptions can be\n+     thrown when malloc fails.  */\n+  try{fn_throw();}\n+  catch(int a){}\n \n   fail = 1;\n "}]}