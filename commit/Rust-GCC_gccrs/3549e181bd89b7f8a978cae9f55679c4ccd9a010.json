{"sha": "3549e181bd89b7f8a978cae9f55679c4ccd9a010", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzU0OWUxODFiZDg5YjdmOGE5NzhjYWU5ZjU1Njc5YzRjY2Q5YTAxMA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-11-16T20:10:27Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-11-16T20:10:27Z"}, "message": "re PR bootstrap/72823 (r239175 causes build failure)\n\n\tPR bootstrap/72823\n\t* configure.ac (ENABLE_ASSERT_CHECKING): Define if gcc configure\n\twould define that macro.\n\t* configure: Regenerated.\n\t* config.in: Regenerated.\n\nFrom-SVN: r242510", "tree": {"sha": "ae0932391b955df1f6da8ccc17b7ac37e5461799", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae0932391b955df1f6da8ccc17b7ac37e5461799"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3549e181bd89b7f8a978cae9f55679c4ccd9a010", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3549e181bd89b7f8a978cae9f55679c4ccd9a010", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3549e181bd89b7f8a978cae9f55679c4ccd9a010", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3549e181bd89b7f8a978cae9f55679c4ccd9a010/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "350767bf22688f7645fe959370240825a3cf0421", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/350767bf22688f7645fe959370240825a3cf0421", "html_url": "https://github.com/Rust-GCC/gccrs/commit/350767bf22688f7645fe959370240825a3cf0421"}], "stats": {"total": 34, "additions": 30, "deletions": 4}, "files": [{"sha": "7690b5deba9a548d5af35490608b5892c3f56de7", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3549e181bd89b7f8a978cae9f55679c4ccd9a010/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3549e181bd89b7f8a978cae9f55679c4ccd9a010/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=3549e181bd89b7f8a978cae9f55679c4ccd9a010", "patch": "@@ -1,3 +1,11 @@\n+2016-11-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR bootstrap/72823\n+\t* configure.ac (ENABLE_ASSERT_CHECKING): Define if gcc configure\n+\twould define that macro.\n+\t* configure: Regenerated.\n+\t* config.in: Regenerated.\n+\n 2016-11-08  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* lex.c (search_line_fast): New implementation for AArch64."}, {"sha": "dd489a5f402bf0f1e9ee783414681181f9c32910", "filename": "libcpp/config.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3549e181bd89b7f8a978cae9f55679c4ccd9a010/libcpp%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3549e181bd89b7f8a978cae9f55679c4ccd9a010/libcpp%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fconfig.in?ref=3549e181bd89b7f8a978cae9f55679c4ccd9a010", "patch": "@@ -14,6 +14,9 @@\n /* Define to 1 if using `alloca.c'. */\n #undef C_ALLOCA\n \n+/* Define if you want assertions enabled. This is a cheap check. */\n+#undef ENABLE_ASSERT_CHECKING\n+\n /* Define to enable system headers canonicalization. */\n #undef ENABLE_CANONICAL_SYSTEM_HEADERS\n "}, {"sha": "12c1907ed40dfe77783ff90df7a1ac2fce4382c5", "filename": "libcpp/configure", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3549e181bd89b7f8a978cae9f55679c4ccd9a010/libcpp%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3549e181bd89b7f8a978cae9f55679c4ccd9a010/libcpp%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fconfigure?ref=3549e181bd89b7f8a978cae9f55679c4ccd9a010", "patch": "@@ -7288,9 +7288,11 @@ for check in release $ac_checking_flags\n do\n \tcase $check in\n \t# these set all the flags to specific states\n-\tyes|all) ac_checking=1 ; ac_valgrind_checking= ;;\n-\tno|none|release) ac_checking= ; ac_valgrind_checking= ;;\n+\tyes|all) ac_checking=1 ; ac_assert_checking=1 ; ac_valgrind_checking= ;;\n+\tno|none) ac_checking= ; ac_assert_checking= ; ac_valgrind_checking= ;;\n+\trelease) ac_checking= ; ac_assert_checking=1 ; ac_valgrind_checking= ;;\n \t# these enable particular checks\n+\tassert) ac_assert_checking=1 ;;\n \tmisc) ac_checking=1 ;;\n \tvalgrind) ac_valgrind_checking=1 ;;\n \t# accept\n@@ -7308,6 +7310,12 @@ else\n \n fi\n \n+if test x$ac_assert_checking != x ; then\n+\n+$as_echo \"#define ENABLE_ASSERT_CHECKING 1\" >>confdefs.h\n+\n+fi\n+\n if test x$ac_valgrind_checking != x ; then\n \n $as_echo \"#define ENABLE_VALGRIND_CHECKING 1\" >>confdefs.h"}, {"sha": "d0a59dc3e0f8adad7bfe468853f7700de48ec588", "filename": "libcpp/configure.ac", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3549e181bd89b7f8a978cae9f55679c4ccd9a010/libcpp%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3549e181bd89b7f8a978cae9f55679c4ccd9a010/libcpp%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fconfigure.ac?ref=3549e181bd89b7f8a978cae9f55679c4ccd9a010", "patch": "@@ -152,9 +152,11 @@ for check in release $ac_checking_flags\n do\n \tcase $check in\n \t# these set all the flags to specific states\n-\tyes|all) ac_checking=1 ; ac_valgrind_checking= ;;\n-\tno|none|release) ac_checking= ; ac_valgrind_checking= ;;\n+\tyes|all) ac_checking=1 ; ac_assert_checking=1 ; ac_valgrind_checking= ;;\n+\tno|none) ac_checking= ; ac_assert_checking= ; ac_valgrind_checking= ;;\n+\trelease) ac_checking= ; ac_assert_checking=1 ; ac_valgrind_checking= ;;\n \t# these enable particular checks\n+\tassert) ac_assert_checking=1 ;;\n \tmisc) ac_checking=1 ;;\n \tvalgrind) ac_valgrind_checking=1 ;;\n \t# accept\n@@ -170,6 +172,11 @@ else\n   AC_DEFINE(CHECKING_P, 0)\n fi\n \n+if test x$ac_assert_checking != x ; then\n+  AC_DEFINE(ENABLE_ASSERT_CHECKING, 1,\n+[Define if you want assertions enabled.  This is a cheap check.])\n+fi\n+\n if test x$ac_valgrind_checking != x ; then\n   AC_DEFINE(ENABLE_VALGRIND_CHECKING, 1,\n [Define if you want to workaround valgrind (a memory checker) warnings about"}]}