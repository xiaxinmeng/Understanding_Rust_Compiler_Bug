{"sha": "074b0c03eabeb8e9c8de813c81bf87a1f88fdb65", "node_id": "C_kwDOANBUbNoAKDA3NGIwYzAzZWFiZWI4ZTljOGRlODEzYzgxYmY4N2ExZjg4ZmRiNjU", "commit": {"author": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2023-01-16T08:15:39Z"}, "committer": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2023-01-16T08:15:39Z"}, "message": "rs6000: Teach rs6000_opaque_type_invalid_use_p about inline asm [PR108272]\n\nAs PR108272 shows, there are some invalid uses of MMA opaque\ntypes in inline asm statements.  This patch is to teach the\nfunction rs6000_opaque_type_invalid_use_p for inline asm,\ncheck and error any invalid use of MMA opaque types in input\nand output operands.\n\n\tPR target/108272\n\ngcc/ChangeLog:\n\n\t* config/rs6000/rs6000.cc (rs6000_opaque_type_invalid_use_p): Add the\n\tsupport for invalid uses in inline asm, factor out the checking and\n\terroring to lambda function check_and_error_invalid_use.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/powerpc/pr108272-1.c: New test.\n\t* gcc.target/powerpc/pr108272-2.c: New test.\n\t* gcc.target/powerpc/pr108272-3.c: New test.\n\t* gcc.target/powerpc/pr108272-4.c: New test.", "tree": {"sha": "e8bfc6019d77e5e275a14fbcb84b7f07adc46eb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8bfc6019d77e5e275a14fbcb84b7f07adc46eb8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/074b0c03eabeb8e9c8de813c81bf87a1f88fdb65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/074b0c03eabeb8e9c8de813c81bf87a1f88fdb65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/074b0c03eabeb8e9c8de813c81bf87a1f88fdb65", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/074b0c03eabeb8e9c8de813c81bf87a1f88fdb65/comments", "author": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc44e55e55d2efb57e995f9b8f29dec939fd7cf9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc44e55e55d2efb57e995f9b8f29dec939fd7cf9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc44e55e55d2efb57e995f9b8f29dec939fd7cf9"}], "stats": {"total": 120, "additions": 110, "deletions": 10}, "files": [{"sha": "4287a6b1a61152847c25d48c52ec8281b4e7d3ca", "filename": "gcc/config/rs6000/rs6000.cc", "status": "modified", "additions": 41, "deletions": 10, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/074b0c03eabeb8e9c8de813c81bf87a1f88fdb65/gcc%2Fconfig%2Frs6000%2Frs6000.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/074b0c03eabeb8e9c8de813c81bf87a1f88fdb65/gcc%2Fconfig%2Frs6000%2Frs6000.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.cc?ref=074b0c03eabeb8e9c8de813c81bf87a1f88fdb65", "patch": "@@ -28928,33 +28928,64 @@ constant_generates_xxspltidp (vec_const_128bit_type *vsx_const)\n    __vector_pair built-in types.  They are target specific and\n    only available when MMA is supported.  With MMA supported, it\n    simply returns true, otherwise it checks if the given gimple\n-   STMT is an assignment stmt and uses either of these two opaque\n-   types unexpectedly, if yes, it would raise an error message\n-   and returns true, otherwise it returns false.  */\n+   STMT is an assignment or asm stmt and uses either of these two\n+   opaque types unexpectedly, if yes, it would raise an error\n+   message and returns true, otherwise it returns false.  */\n \n bool\n rs6000_opaque_type_invalid_use_p (gimple *stmt)\n {\n   if (TARGET_MMA)\n     return false;\n \n+  /* If the given TYPE is one MMA opaque type, emit the corresponding\n+     error messages and return true, otherwise return false.  */\n+  auto check_and_error_invalid_use = [](tree type)\n+  {\n+    tree mv = TYPE_MAIN_VARIANT (type);\n+    if (mv == vector_quad_type_node)\n+      {\n+\terror (\"type %<__vector_quad%> requires the %qs option\", \"-mmma\");\n+\treturn true;\n+      }\n+    else if (mv == vector_pair_type_node)\n+      {\n+\terror (\"type %<__vector_pair%> requires the %qs option\", \"-mmma\");\n+\treturn true;\n+      }\n+    return false;\n+  };\n+\n   if (stmt)\n     {\n       /* The usage of MMA opaque types is very limited for now,\n-\t to check with gassign is enough so far.  */\n+\t to check with gassign and gasm is enough so far.  */\n       if (gassign *ga = dyn_cast<gassign *> (stmt))\n \t{\n \t  tree lhs = gimple_assign_lhs (ga);\n \t  tree type = TREE_TYPE (lhs);\n-\t  if (type == vector_quad_type_node)\n+\t  if (check_and_error_invalid_use (type))\n+\t    return true;\n+\t}\n+      else if (gasm *gs = dyn_cast<gasm *> (stmt))\n+\t{\n+\t  unsigned ninputs = gimple_asm_ninputs (gs);\n+\t  for (unsigned i = 0; i < ninputs; i++)\n \t    {\n-\t      error (\"type %<__vector_quad%> requires the %qs option\", \"-mmma\");\n-\t      return true;\n+\t      tree op = gimple_asm_input_op (gs, i);\n+\t      tree val = TREE_VALUE (op);\n+\t      tree type = TREE_TYPE (val);\n+\t      if (check_and_error_invalid_use (type))\n+\t\treturn true;\n \t    }\n-\t  else if (type == vector_pair_type_node)\n+\t  unsigned noutputs = gimple_asm_noutputs (gs);\n+\t  for (unsigned i = 0; i < noutputs; i++)\n \t    {\n-\t      error (\"type %<__vector_pair%> requires the %qs option\", \"-mmma\");\n-\t      return true;\n+\t      tree op = gimple_asm_output_op (gs, i);\n+\t      tree val = TREE_VALUE (op);\n+\t      tree type = TREE_TYPE (val);\n+\t      if (check_and_error_invalid_use (type))\n+\t\treturn true;\n \t    }\n \t}\n     }"}, {"sha": "b99e6a4d86d509a7434b8160acdf9edf102f3516", "filename": "gcc/testsuite/gcc.target/powerpc/pr108272-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/074b0c03eabeb8e9c8de813c81bf87a1f88fdb65/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr108272-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/074b0c03eabeb8e9c8de813c81bf87a1f88fdb65/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr108272-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr108272-1.c?ref=074b0c03eabeb8e9c8de813c81bf87a1f88fdb65", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-require-effective-target powerpc_p9modulo_ok } */\n+/* If the default cpu type is power10 or later, type __vector_quad is\n+   supported.  To keep the test point available all the time, this case\n+   specifies -mdejagnu-cpu=power9 here.  */\n+/* { dg-options \"-mdejagnu-cpu=power9\" } */\n+\n+/* Verify there is no ICE and don't check the error messages on unsupported\n+   type since they could be fragile and are not test points of this case.  */\n+\n+/* { dg-excess-errors \"pr108272-1\" } */\n+\n+void\n+foo (void)\n+{\n+  __vector_quad acc;\n+  asm(\"#...\" : \"=d\"(acc));\n+}"}, {"sha": "51b2100d0f191dde3d17339fb8caf0b1c8030e10", "filename": "gcc/testsuite/gcc.target/powerpc/pr108272-2.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/074b0c03eabeb8e9c8de813c81bf87a1f88fdb65/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr108272-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/074b0c03eabeb8e9c8de813c81bf87a1f88fdb65/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr108272-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr108272-2.c?ref=074b0c03eabeb8e9c8de813c81bf87a1f88fdb65", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-require-effective-target powerpc_p9modulo_ok } */\n+/* If the default cpu type is power10 or later, type __vector_pair is\n+   supported.  To keep the test point available all the time, this case\n+   specifies -mdejagnu-cpu=power9 here.  */\n+/* { dg-options \"-mdejagnu-cpu=power9\" } */\n+\n+/* Verify there is no ICE and don't check the error messages on unsupported\n+   type since they could be fragile and are not test points of this case.  */\n+\n+/* { dg-excess-errors \"pr108272-2\" } */\n+\n+void\n+foo (void)\n+{\n+  __vector_pair acc;\n+  asm(\"#...\" :: \"d\"(acc));\n+}"}, {"sha": "634a529b5c8a99195856a5f17acb77e52a17a110", "filename": "gcc/testsuite/gcc.target/powerpc/pr108272-3.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/074b0c03eabeb8e9c8de813c81bf87a1f88fdb65/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr108272-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/074b0c03eabeb8e9c8de813c81bf87a1f88fdb65/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr108272-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr108272-3.c?ref=074b0c03eabeb8e9c8de813c81bf87a1f88fdb65", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-require-effective-target powerpc_p9modulo_ok } */\n+/* If the default cpu type is power10 or later, type __vector_quad is\n+   supported.  To keep the test point available all the time, this case\n+   specifies -mdejagnu-cpu=power9 here.  */\n+/* { dg-options \"-mdejagnu-cpu=power9\" } */\n+\n+/* Verify there is no ICE and don't check the error messages on unsupported\n+   type since they could be fragile and are not test points of this case.  */\n+\n+/* { dg-excess-errors \"pr108272-3\" } */\n+\n+void\n+foo (void)\n+{\n+  volatile __vector_quad acc;\n+  asm(\"#...\" : \"=d\"(acc));\n+}"}, {"sha": "7eecd6c5a0d285f5504580d7e2a618a6b94b8dda", "filename": "gcc/testsuite/gcc.target/powerpc/pr108272-4.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/074b0c03eabeb8e9c8de813c81bf87a1f88fdb65/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr108272-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/074b0c03eabeb8e9c8de813c81bf87a1f88fdb65/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr108272-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr108272-4.c?ref=074b0c03eabeb8e9c8de813c81bf87a1f88fdb65", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-require-effective-target powerpc_p9modulo_ok } */\n+/* If the default cpu type is power10 or later, type __vector_pair is\n+   supported.  To keep the test point available all the time, this case\n+   specifies -mdejagnu-cpu=power9 here.  */\n+/* { dg-options \"-mdejagnu-cpu=power9\" } */\n+\n+/* Verify there is no ICE and don't check the error messages on unsupported\n+   type since they could be fragile and are not test points of this case.  */\n+\n+/* { dg-excess-errors \"pr108272-4\" } */\n+\n+typedef __vector_pair vpair_t;\n+void\n+foo (void)\n+{\n+  vpair_t acc;\n+  asm(\"#...\" : \"=d\"(acc));\n+}"}]}