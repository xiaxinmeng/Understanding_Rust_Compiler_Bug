{"sha": "57028ff2d3f56deec25498f83e99c39478acc02f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTcwMjhmZjJkM2Y1NmRlZWMyNTQ5OGY4M2U5OWMzOTQ3OGFjYzAyZg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-04-30T10:45:07Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-04-30T13:25:08Z"}, "message": "libstdc++: Define effective-target for net::ip features [PR 100351]\n\nDefine a new effective-target keyword so that tests for the Networking\nTS <experimental/internet> header can be skipped on targets where none\nof it can be usefully defined.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/100180\n\tPR libstdc++/100286\n\tPR libstdc++/100351\n\t* testsuite/experimental/net/internet/address/v4/comparisons.cc:\n\tUse new effective-target keyword.\n\t* testsuite/experimental/net/internet/address/v4/cons.cc:\n\tLikewise.\n\t* testsuite/experimental/net/internet/address/v4/creation.cc:\n\tLikewise.\n\t* testsuite/experimental/net/internet/address/v4/members.cc:\n\tLikewise.\n\t* testsuite/experimental/net/internet/address/v6/members.cc:\n\tLikewise.\n\t* testsuite/experimental/net/internet/resolver/base.cc:\n\tLikewise.\n\t* testsuite/experimental/net/internet/resolver/ops/lookup.cc:\n\tLikewise.\n\t* testsuite/experimental/net/internet/resolver/ops/reverse.cc:\n\tLikewise.\n\t* testsuite/experimental/net/internet/socket/opt.cc:\n\tLikewise.\n\t* testsuite/experimental/net/internet/tcp.cc:\n\tLikewise.\n\t* testsuite/experimental/net/internet/udp.cc:\n\tLikewise.\n\t* testsuite/lib/libstdc++.exp (check_effective_target_net_ts_ip):\n\tNew proc to check net_ts_ip et.", "tree": {"sha": "b471b2217044d0809d30bd339f96ede00ab4824c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b471b2217044d0809d30bd339f96ede00ab4824c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57028ff2d3f56deec25498f83e99c39478acc02f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57028ff2d3f56deec25498f83e99c39478acc02f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57028ff2d3f56deec25498f83e99c39478acc02f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57028ff2d3f56deec25498f83e99c39478acc02f/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74fe10aedbee6251ef700c72a9d09937a6e45aac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74fe10aedbee6251ef700c72a9d09937a6e45aac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74fe10aedbee6251ef700c72a9d09937a6e45aac"}], "stats": {"total": 39, "additions": 19, "deletions": 20}, "files": [{"sha": "88c56a8eaee3e01c8c1f3d9b7403dc16d9929a5e", "filename": "libstdc++-v3/testsuite/experimental/net/internet/address/v4/comparisons.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57028ff2d3f56deec25498f83e99c39478acc02f/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Faddress%2Fv4%2Fcomparisons.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57028ff2d3f56deec25498f83e99c39478acc02f/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Faddress%2Fv4%2Fcomparisons.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Faddress%2Fv4%2Fcomparisons.cc?ref=57028ff2d3f56deec25498f83e99c39478acc02f", "patch": "@@ -16,6 +16,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do run { target c++14 } }\n+// { dg-require-effective-target net_ts_ip }\n // { dg-add-options net_ts }\n \n #include <experimental/internet>\n@@ -26,8 +27,6 @@ using std::experimental::net::ip::address_v4;\n void\n test01()\n {\n-  bool test __attribute__((unused)) = false;\n-\n   address_v4 addrs[] = {\n     address_v4::any(), address_v4::loopback(), address_v4::broadcast(),\n     address_v4{0x11001100}, address_v4{0xEFEFEFEF}"}, {"sha": "848839f7c61f25441a108ef5b193e38fa012f013", "filename": "libstdc++-v3/testsuite/experimental/net/internet/address/v4/cons.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57028ff2d3f56deec25498f83e99c39478acc02f/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Faddress%2Fv4%2Fcons.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57028ff2d3f56deec25498f83e99c39478acc02f/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Faddress%2Fv4%2Fcons.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Faddress%2Fv4%2Fcons.cc?ref=57028ff2d3f56deec25498f83e99c39478acc02f", "patch": "@@ -16,6 +16,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do run { target c++14 } }\n+// { dg-require-effective-target net_ts_ip }\n // { dg-add-options net_ts }\n \n #include <experimental/internet>"}, {"sha": "bf233065c7dcb86c1294f70897dbc1bedbbffb3f", "filename": "libstdc++-v3/testsuite/experimental/net/internet/address/v4/creation.cc", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57028ff2d3f56deec25498f83e99c39478acc02f/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Faddress%2Fv4%2Fcreation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57028ff2d3f56deec25498f83e99c39478acc02f/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Faddress%2Fv4%2Fcreation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Faddress%2Fv4%2Fcreation.cc?ref=57028ff2d3f56deec25498f83e99c39478acc02f", "patch": "@@ -16,6 +16,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do run { target c++14 } }\n+// { dg-require-effective-target net_ts_ip }\n // { dg-add-options net_ts }\n \n #include <experimental/internet>\n@@ -27,8 +28,6 @@ using net::ip::address_v4;\n void\n test01()\n {\n-  bool test __attribute__((unused)) = false;\n-\n   auto a0 = make_address_v4( address_v4::bytes_type{} );\n   VERIFY( a0.to_uint() == 0 );\n   VERIFY( a0.to_bytes() == address_v4::bytes_type{} );\n@@ -42,8 +41,6 @@ test01()\n void\n test02()\n {\n-  bool test __attribute__((unused)) = false;\n-\n   auto a0 = net::ip::make_address_v4(0u);\n   VERIFY( a0.to_uint() == 0 );\n   VERIFY( a0.to_bytes() == address_v4::bytes_type{} );\n@@ -57,8 +54,6 @@ test02()\n void\n test03()\n {\n-  bool test __attribute__((unused)) = false;\n-\n   auto a1 = net::ip::make_address_v4(\"127.0.0.1\");\n   VERIFY( a1.is_loopback() );\n   auto a2 = net::ip::make_address_v4(std::string{\"127.0.0.2\"});"}, {"sha": "ac66f864ca5a66900018decb2821dae9805480cc", "filename": "libstdc++-v3/testsuite/experimental/net/internet/address/v4/members.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57028ff2d3f56deec25498f83e99c39478acc02f/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Faddress%2Fv4%2Fmembers.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57028ff2d3f56deec25498f83e99c39478acc02f/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Faddress%2Fv4%2Fmembers.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Faddress%2Fv4%2Fmembers.cc?ref=57028ff2d3f56deec25498f83e99c39478acc02f", "patch": "@@ -16,6 +16,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do run { target c++14 } }\n+// { dg-require-effective-target net_ts_ip }\n // { dg-add-options net_ts }\n \n #include <experimental/internet>"}, {"sha": "3d9d653f45723c0004ae6c339eeeb6116caa3664", "filename": "libstdc++-v3/testsuite/experimental/net/internet/address/v6/members.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57028ff2d3f56deec25498f83e99c39478acc02f/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Faddress%2Fv6%2Fmembers.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57028ff2d3f56deec25498f83e99c39478acc02f/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Faddress%2Fv6%2Fmembers.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Faddress%2Fv6%2Fmembers.cc?ref=57028ff2d3f56deec25498f83e99c39478acc02f", "patch": "@@ -16,6 +16,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do run { target c++14 } }\n+// { dg-require-effective-target net_ts_ip }\n // { dg-add-options net_ts }\n \n #include <experimental/internet>"}, {"sha": "4c36b03ebcc6b1943359d78a3e3effa29ea8f654", "filename": "libstdc++-v3/testsuite/experimental/net/internet/resolver/base.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57028ff2d3f56deec25498f83e99c39478acc02f/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Fresolver%2Fbase.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57028ff2d3f56deec25498f83e99c39478acc02f/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Fresolver%2Fbase.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Fresolver%2Fbase.cc?ref=57028ff2d3f56deec25498f83e99c39478acc02f", "patch": "@@ -16,6 +16,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile { target c++14 } }\n+// { dg-require-effective-target net_ts_ip }\n // { dg-add-options net_ts }\n \n #include <experimental/internet>"}, {"sha": "ca8f0899ccd258e05dc71975dff3afb5c3b9338a", "filename": "libstdc++-v3/testsuite/experimental/net/internet/resolver/ops/lookup.cc", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57028ff2d3f56deec25498f83e99c39478acc02f/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Fresolver%2Fops%2Flookup.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57028ff2d3f56deec25498f83e99c39478acc02f/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Fresolver%2Fops%2Flookup.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Fresolver%2Fops%2Flookup.cc?ref=57028ff2d3f56deec25498f83e99c39478acc02f", "patch": "@@ -16,6 +16,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do run { target c++14 } }\n+// { dg-require-effective-target net_ts_ip }\n // { dg-add-options net_ts }\n \n #include <experimental/internet>\n@@ -26,8 +27,6 @@ using namespace std::experimental::net;\n void\n test01()\n {\n-  bool test __attribute__((unused)) = false;\n-\n   std::error_code ec;\n   io_context ctx;\n   ip::tcp::resolver resolv(ctx);\n@@ -44,8 +43,6 @@ test01()\n void\n test02()\n {\n-  bool test __attribute__((unused)) = false;\n-\n   std::error_code ec;\n   io_context ctx;\n   ip::tcp::resolver resolv(ctx);\n@@ -83,8 +80,6 @@ test02()\n void\n test03()\n {\n-  bool test __attribute__((unused)) = false;\n-\n   std::error_code ec;\n   io_context ctx;\n   ip::tcp::resolver resolv(ctx);"}, {"sha": "b50b2ee36a4524c23bb492c25249678801831c7a", "filename": "libstdc++-v3/testsuite/experimental/net/internet/resolver/ops/reverse.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57028ff2d3f56deec25498f83e99c39478acc02f/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Fresolver%2Fops%2Freverse.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57028ff2d3f56deec25498f83e99c39478acc02f/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Fresolver%2Fops%2Freverse.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Fresolver%2Fops%2Freverse.cc?ref=57028ff2d3f56deec25498f83e99c39478acc02f", "patch": "@@ -16,6 +16,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do run { target c++14 } }\n+// { dg-require-effective-target net_ts_ip }\n // { dg-add-options net_ts }\n \n #include <experimental/internet>\n@@ -26,8 +27,6 @@ using namespace std::experimental::net;\n void\n test01()\n {\n-  bool test __attribute__((unused)) = false;\n-\n   std::error_code ec;\n   io_context ctx;\n   ip::tcp::resolver resolv(ctx);"}, {"sha": "a4efeb4e233e3dfa4c534cf882a8f0388cd59a2e", "filename": "libstdc++-v3/testsuite/experimental/net/internet/socket/opt.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57028ff2d3f56deec25498f83e99c39478acc02f/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Fsocket%2Fopt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57028ff2d3f56deec25498f83e99c39478acc02f/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Fsocket%2Fopt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Fsocket%2Fopt.cc?ref=57028ff2d3f56deec25498f83e99c39478acc02f", "patch": "@@ -1,4 +1,5 @@\n // { dg-do run { target c++14 } }\n+// { dg-require-effective-target net_ts_ip }\n \n #include <experimental/internet>\n #include <testsuite_common_types.h>"}, {"sha": "d583f22f5084bcdc786cbe37e07d50b8ed54799e", "filename": "libstdc++-v3/testsuite/experimental/net/internet/tcp.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57028ff2d3f56deec25498f83e99c39478acc02f/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Ftcp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57028ff2d3f56deec25498f83e99c39478acc02f/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Ftcp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Ftcp.cc?ref=57028ff2d3f56deec25498f83e99c39478acc02f", "patch": "@@ -1,9 +1,9 @@\n // { dg-do compile { target c++14 } }\n+// { dg-require-effective-target net_ts_ip }\n \n #include <experimental/internet>\n #include <type_traits>\n \n-#if __has_include(<netinet/in.h>)\n using namespace std;\n using std::experimental::net::ip::tcp;\n using std::experimental::net::ip::basic_endpoint;\n@@ -42,4 +42,3 @@ test01()\n   static_assert( tcp::v4().protocol() == IPPROTO_TCP, \"\" );\n   static_assert( tcp::v6().protocol() == IPPROTO_TCP, \"\" );\n }\n-#endif"}, {"sha": "300f735d8342c2921f35e14fc121d85aa9d600d1", "filename": "libstdc++-v3/testsuite/experimental/net/internet/udp.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57028ff2d3f56deec25498f83e99c39478acc02f/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Fudp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57028ff2d3f56deec25498f83e99c39478acc02f/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Fudp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Finternet%2Fudp.cc?ref=57028ff2d3f56deec25498f83e99c39478acc02f", "patch": "@@ -1,9 +1,9 @@\n // { dg-do compile { target c++14 } }\n+// { dg-require-effective-target net_ts_ip }\n \n #include <experimental/internet>\n #include <type_traits>\n \n-#if __has_include(<netinet/in.h>)\n using namespace std;\n using std::experimental::net::ip::udp;\n using std::experimental::net::ip::basic_endpoint;\n@@ -40,4 +40,3 @@ test01()\n   static_assert( udp::v4().protocol() == IPPROTO_UDP, \"\" );\n   static_assert( udp::v6().protocol() == IPPROTO_UDP, \"\" );\n }\n-#endif"}, {"sha": "73b202ce21269d1c25e3717510e5863305ef035a", "filename": "libstdc++-v3/testsuite/lib/libstdc++.exp", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57028ff2d3f56deec25498f83e99c39478acc02f/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57028ff2d3f56deec25498f83e99c39478acc02f/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp?ref=57028ff2d3f56deec25498f83e99c39478acc02f", "patch": "@@ -1331,6 +1331,14 @@ proc check_effective_target_ieee-floats { } {\n     }]\n }\n \n+# Return 1 if Networking TS net::ip features are available.\n+proc check_effective_target_net_ts_ip { } {\n+    return [check_v3_target_prop_cached et_net_ts_ip {\n+\tset cond \"__has_include(<netinet/in.h>)\"\n+\treturn [v3_check_preprocessor_condition net_ts_ip $cond]\n+    }]\n+}\n+\n set additional_prunes \"\"\n \n if { [info exists env(GCC_RUNTEST_PARALLELIZE_DIR)] \\"}]}