{"sha": "eb8bf686b7877f9000aefd599b4ad035475b7e99", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWI4YmY2ODZiNzg3N2Y5MDAwYWVmZDU5OWI0YWQwMzU0NzViN2U5OQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2015-09-03T14:36:03Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2015-09-03T14:36:03Z"}, "message": "Make std::experimental::not_fn SFINAE-friendly.\n\n\tPR libstdc++/66998\n\t* include/experimental/functional (_Not_fn): Add exception\n\tspecifications and non-deduced return types.\n\t(not_fn): Add exception specification and wrap pointer-to-member.\n\t* testsuite/experimental/functional/not_fn.cc: Test in SFINAE context\n\tand test pointer-to-member.\n\nFrom-SVN: r227448", "tree": {"sha": "8329be86b1fdc2543a47bfd3f061bebbd1f8dacb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8329be86b1fdc2543a47bfd3f061bebbd1f8dacb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb8bf686b7877f9000aefd599b4ad035475b7e99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb8bf686b7877f9000aefd599b4ad035475b7e99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb8bf686b7877f9000aefd599b4ad035475b7e99", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb8bf686b7877f9000aefd599b4ad035475b7e99/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "500dc9a6c335fba9be0c2aa9c6c489b7e09c8400", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/500dc9a6c335fba9be0c2aa9c6c489b7e09c8400", "html_url": "https://github.com/Rust-GCC/gccrs/commit/500dc9a6c335fba9be0c2aa9c6c489b7e09c8400"}], "stats": {"total": 71, "additions": 59, "deletions": 12}, "files": [{"sha": "eb4758901ec87989dedfadb00134b857b68bf375", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb8bf686b7877f9000aefd599b4ad035475b7e99/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb8bf686b7877f9000aefd599b4ad035475b7e99/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=eb8bf686b7877f9000aefd599b4ad035475b7e99", "patch": "@@ -1,5 +1,12 @@\n 2015-09-03  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/66998\n+\t* include/experimental/functional (_Not_fn): Add exception\n+\tspecifications and non-deduced return types.\n+\t(not_fn): Add exception specification and wrap pointer-to-member.\n+\t* testsuite/experimental/functional/not_fn.cc: Test in SFINAE context\n+\tand test pointer-to-member.\n+\n \tPR libstdc++/62039\n \t* include/bits/stl_iterator_base_funcs.h (next, prev): Add concept\n \tchecks."}, {"sha": "9db5fefcbcc4f55a2138e7183cba4bb64299fc93", "filename": "libstdc++-v3/include/experimental/functional", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb8bf686b7877f9000aefd599b4ad035475b7e99/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb8bf686b7877f9000aefd599b4ad035475b7e99/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Ffunctional?ref=eb8bf686b7877f9000aefd599b4ad035475b7e99", "patch": "@@ -376,8 +376,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// Generalized negator.\n   template<typename _Fn>\n-    struct _Not_fn\n+    class _Not_fn\n     {\n+      _Fn _M_fn;\n+\n+    public:\n       template<typename _Fn2>\n \texplicit\n \t_Not_fn(_Fn2&& __fn) : _M_fn(std::forward<_Fn2>(__fn)) { }\n@@ -389,34 +392,43 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       ~_Not_fn() = default;\n \n       template<typename... _Args>\n-\tdecltype(auto)\n+\tauto\n \toperator()(_Args&&... __args)\n+\tnoexcept(noexcept(!_M_fn(std::forward<_Args>(__args)...)))\n+\t-> decltype(!_M_fn(std::forward<_Args>(__args)...))\n \t{ return !_M_fn(std::forward<_Args>(__args)...); }\n \n       template<typename... _Args>\n-\tdecltype(auto)\n+\tauto\n \toperator()(_Args&&... __args) const\n+\tnoexcept(noexcept(!_M_fn(std::forward<_Args>(__args)...)))\n+\t-> decltype(!_M_fn(std::forward<_Args>(__args)...))\n \t{ return !_M_fn(std::forward<_Args>(__args)...); }\n \n       template<typename... _Args>\n-\tdecltype(auto)\n+\tauto\n \toperator()(_Args&&... __args) volatile\n+\tnoexcept(noexcept(!_M_fn(std::forward<_Args>(__args)...)))\n+\t-> decltype(!_M_fn(std::forward<_Args>(__args)...))\n \t{ return !_M_fn(std::forward<_Args>(__args)...); }\n \n       template<typename... _Args>\n-\tdecltype(auto)\n+\tauto\n \toperator()(_Args&&... __args) const volatile\n+\tnoexcept(noexcept(!_M_fn(std::forward<_Args>(__args)...)))\n+\t-> decltype(!_M_fn(std::forward<_Args>(__args)...))\n \t{ return !_M_fn(std::forward<_Args>(__args)...); }\n-\n-    private:\n-      _Fn _M_fn;\n     };\n \n   /// [func.not_fn] Function template not_fn\n-  template <class _Fn>\n+  template<typename _Fn>\n     inline auto\n     not_fn(_Fn&& __fn)\n-    { return _Not_fn<std::decay_t<_Fn>>{std::forward<_Fn>(__fn)}; }\n+    noexcept(std::is_nothrow_constructible<std::decay_t<_Fn>, _Fn&&>::value)\n+    {\n+      using __maybe_type = _Maybe_wrap_member_pointer<std::decay_t<_Fn>>;\n+      return _Not_fn<typename __maybe_type::type>{std::forward<_Fn>(__fn)};\n+    }\n \n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace fundamentals_v2"}, {"sha": "4c137e85bea996dbeba5c0f5360ec25e1750310e", "filename": "libstdc++-v3/testsuite/experimental/functional/not_fn.cc", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb8bf686b7877f9000aefd599b4ad035475b7e99/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffunctional%2Fnot_fn.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb8bf686b7877f9000aefd599b4ad035475b7e99/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffunctional%2Fnot_fn.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffunctional%2Fnot_fn.cc?ref=eb8bf686b7877f9000aefd599b4ad035475b7e99", "patch": "@@ -20,6 +20,8 @@\n #include <experimental/functional>\n #include <testsuite_hooks.h>\n \n+using std::experimental::not_fn;\n+\n int func(int, char) { return 0; }\n \n struct F\n@@ -33,8 +35,6 @@ struct F\n void\n test01()\n {\n-  using std::experimental::not_fn;\n-\n   auto f1 = not_fn(func);\n   VERIFY( f1(1, '2') == true );\n \n@@ -50,8 +50,36 @@ test01()\n   VERIFY( f5(1) == false );\n }\n \n+template<typename F, typename Arg>\n+auto foo(F f, Arg arg) -> decltype(not_fn(f)(arg)) { return not_fn(f)(arg); }\n+\n+template<typename F, typename Arg>\n+auto foo(F f, Arg arg) -> decltype(not_fn(f)()) { return not_fn(f)(); }\n+\n+struct negator\n+{\n+    bool operator()(int) const { return false; }\n+    void operator()() const {}\n+};\n+\n+void \n+test02()\n+{\n+  foo(negator{}, 1); // PR libstdc++/66998\n+}\n+\n+void\n+test03()\n+{\n+  struct X { bool b; };\n+  X x{ false };\n+  VERIFY( not_fn(&X::b)(x) );\n+}\n+\n int\n main()\n {\n   test01();\n+  test02();\n+  test03();\n }"}]}