{"sha": "ca4564f9a45ad806087e6cc5df3c6882a1879cdf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2E0NTY0ZjlhNDVhZDgwNjA4N2U2Y2M1ZGYzYzY4ODJhMTg3OWNkZg==", "commit": {"author": {"name": "Sebastian Huber", "email": "sebastian.huber@embedded-brains.de", "date": "2017-12-04T13:36:19Z"}, "committer": {"name": "Sebastian Huber", "email": "sh@gcc.gnu.org", "date": "2017-12-04T13:36:19Z"}, "message": "RTEMS/Ada: Account for 64-bit time_t\n\nThe Newlib time_t has now 64 bits for RTEMS.\n\ngcc/ada\n\n\t* gcc-interface/Makefile.in (RTEMS): Use s-osprim__rtems.adb.\n\t* libgnat/s-osprim__rtems.adb: New file.\n\t* libgnarl/s-osinte__rtems.adb (pthread_cond_t): Fix alignment.\n\t(pthread_mutexattr_t): Likewise.\n\t(pthread_rwlockattr_t): Likewise.\n\t(pthread_rwlock_t): Likewise.\n\t(time_t): Use 64-bit integer.\n\nFrom-SVN: r255380", "tree": {"sha": "d72a728675c17d4a1bac5c76974b920841c4abad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d72a728675c17d4a1bac5c76974b920841c4abad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca4564f9a45ad806087e6cc5df3c6882a1879cdf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca4564f9a45ad806087e6cc5df3c6882a1879cdf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca4564f9a45ad806087e6cc5df3c6882a1879cdf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca4564f9a45ad806087e6cc5df3c6882a1879cdf/comments", "author": {"login": "sebhub", "id": 932056, "node_id": "MDQ6VXNlcjkzMjA1Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/932056?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebhub", "html_url": "https://github.com/sebhub", "followers_url": "https://api.github.com/users/sebhub/followers", "following_url": "https://api.github.com/users/sebhub/following{/other_user}", "gists_url": "https://api.github.com/users/sebhub/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebhub/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebhub/subscriptions", "organizations_url": "https://api.github.com/users/sebhub/orgs", "repos_url": "https://api.github.com/users/sebhub/repos", "events_url": "https://api.github.com/users/sebhub/events{/privacy}", "received_events_url": "https://api.github.com/users/sebhub/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "80850da1e9e9866ff7792865bebea52114d0231c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80850da1e9e9866ff7792865bebea52114d0231c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80850da1e9e9866ff7792865bebea52114d0231c"}], "stats": {"total": 194, "additions": 188, "deletions": 6}, "files": [{"sha": "714ea612b79d962dbc68d645f88b68b0b113da6b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca4564f9a45ad806087e6cc5df3c6882a1879cdf/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca4564f9a45ad806087e6cc5df3c6882a1879cdf/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ca4564f9a45ad806087e6cc5df3c6882a1879cdf", "patch": "@@ -1,3 +1,13 @@\n+2017-12-04  Sebastian Huber  <sebastian.huber@embedded-brains.de>\n+\n+\t* gcc-interface/Makefile.in (RTEMS): Use s-osprim__rtems.adb.\n+\t* libgnat/s-osprim__rtems.adb: New file.\n+\t* libgnarl/s-osinte__rtems.adb (pthread_cond_t): Fix alignment.\n+\t(pthread_mutexattr_t): Likewise.\n+\t(pthread_rwlockattr_t): Likewise.\n+\t(pthread_rwlock_t): Likewise.\n+\t(time_t): Use 64-bit integer.\n+\n 2017-12-01  Sebastian Huber  <sebastian.huber@embedded-brains.de>\n \n \t* libgnarl/s-osinte__rtems.ads (pthread_cond_t): Use correct size and"}, {"sha": "133ef8e94c9d8df56d8fc08027abea71b85ca46c", "filename": "gcc/ada/gcc-interface/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca4564f9a45ad806087e6cc5df3c6882a1879cdf/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca4564f9a45ad806087e6cc5df3c6882a1879cdf/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMakefile.in?ref=ca4564f9a45ad806087e6cc5df3c6882a1879cdf", "patch": "@@ -1361,7 +1361,7 @@ ifeq ($(strip $(filter-out rtems%,$(target_os))),)\n   s-intman.adb<libgnarl/s-intman__posix.adb \\\n   s-osinte.adb<libgnarl/s-osinte__rtems.adb \\\n   s-osinte.ads<libgnarl/s-osinte__rtems.ads \\\n-  s-osprim.adb<libgnat/s-osprim__posix.adb \\\n+  s-osprim.adb<libgnat/s-osprim__rtems.adb \\\n   s-parame.adb<libgnat/s-parame__rtems.adb \\\n   s-taprop.adb<libgnarl/s-taprop__posix.adb \\\n   s-taspri.ads<libgnarl/s-taspri__posix.ads \\"}, {"sha": "81085ec7a1b8fab1885c0eba77d7f12ef7d41e30", "filename": "gcc/ada/libgnarl/s-osinte__rtems.ads", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca4564f9a45ad806087e6cc5df3c6882a1879cdf/gcc%2Fada%2Flibgnarl%2Fs-osinte__rtems.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca4564f9a45ad806087e6cc5df3c6882a1879cdf/gcc%2Fada%2Flibgnarl%2Fs-osinte__rtems.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-osinte__rtems.ads?ref=ca4564f9a45ad806087e6cc5df3c6882a1879cdf", "patch": "@@ -620,7 +620,7 @@ private\n \n    type pid_t is new int;\n \n-   type time_t is new long;\n+   type time_t is new Long_Long_Integer;\n \n    type timespec is record\n       tv_sec  : time_t;\n@@ -649,13 +649,13 @@ private\n       Data : char_array (1 .. OS_Constants.PTHREAD_MUTEXATTR_SIZE);\n    end  record;\n    pragma Convention (C, pthread_mutexattr_t);\n-   for pthread_mutexattr_t'Alignment use Interfaces.C.double'Alignment;\n+   for pthread_mutexattr_t'Alignment use Interfaces.C.int'Alignment;\n \n    type pthread_rwlockattr_t is record\n       Data : char_array (1 .. OS_Constants.PTHREAD_RWLOCKATTR_SIZE);\n    end record;\n    pragma Convention (C, pthread_rwlockattr_t);\n-   for pthread_rwlockattr_t'Alignment use Interfaces.C.double'Alignment;\n+   for pthread_rwlockattr_t'Alignment use Interfaces.C.int'Alignment;\n \n    type pthread_t is new rtems_id;\n \n@@ -669,13 +669,13 @@ private\n       Data : char_array (1 .. OS_Constants.PTHREAD_RWLOCK_SIZE);\n    end record;\n    pragma Convention (C, pthread_rwlock_t);\n-   for pthread_rwlock_t'Alignment use Interfaces.C.double'Alignment;\n+   for pthread_rwlock_t'Alignment use Interfaces.C.size_t'Alignment;\n \n    type pthread_cond_t is record\n       Data : char_array (1 .. OS_Constants.PTHREAD_COND_SIZE);\n    end record;\n    pragma Convention (C, pthread_cond_t);\n-   for pthread_cond_t'Alignment use Interfaces.C.double'Alignment;\n+   for pthread_cond_t'Alignment use Interfaces.C.size_t'Alignment;\n \n    type pthread_key_t is new rtems_id;\n "}, {"sha": "df8754baa69d14639d10dd1081403b9e935440f2", "filename": "gcc/ada/libgnat/s-osprim__rtems.adb", "status": "added", "additions": 172, "deletions": 0, "changes": 172, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca4564f9a45ad806087e6cc5df3c6882a1879cdf/gcc%2Fada%2Flibgnat%2Fs-osprim__rtems.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca4564f9a45ad806087e6cc5df3c6882a1879cdf/gcc%2Fada%2Flibgnat%2Fs-osprim__rtems.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-osprim__rtems.adb?ref=ca4564f9a45ad806087e6cc5df3c6882a1879cdf", "patch": "@@ -0,0 +1,172 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                 GNAT RUN-TIME LIBRARY (GNARL) COMPONENTS                 --\n+--                                                                          --\n+--                  S Y S T E M . O S _ P R I M I T I V E S                 --\n+--                                                                          --\n+--                                  B o d y                                 --\n+--                                                                          --\n+--          Copyright (C) 1998-2015, Free Software Foundation, Inc.         --\n+--                                                                          --\n+-- GNARL is free software; you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNARL was developed by the GNARL team at Florida State University.       --\n+-- Extensive contributions were provided by Ada Core Technologies, Inc.     --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This version is for POSIX-like operating systems\n+\n+package body System.OS_Primitives is\n+\n+   --  ??? These definitions are duplicated from System.OS_Interface\n+   --  because we don't want to depend on any package. Consider removing\n+   --  these declarations in System.OS_Interface and move these ones in\n+   --  the spec.\n+\n+   type time_t is new Long_Long_Integer;\n+\n+   type timespec is record\n+      tv_sec  : time_t;\n+      tv_nsec : Long_Integer;\n+   end record;\n+   pragma Convention (C, timespec);\n+\n+   function nanosleep (rqtp, rmtp : not null access timespec) return Integer;\n+   pragma Import (C, nanosleep, \"nanosleep\");\n+\n+   -----------\n+   -- Clock --\n+   -----------\n+\n+   function Clock return Duration is\n+\n+      type timeval is record\n+         tv_sec  : time_t;\n+         tv_usec : Long_Integer;\n+      end record;\n+      pragma Convention (C, timeval);\n+\n+      procedure timeval_to_duration\n+        (T    : not null access timeval;\n+         sec  : not null access Long_Long_Integer;\n+         usec : not null access Long_Integer);\n+      pragma Import (C, timeval_to_duration, \"__gnat_timeval_to_duration\");\n+\n+      Micro  : constant := 10**6;\n+      sec    : aliased Long_Long_Integer;\n+      usec   : aliased Long_Integer;\n+      TV     : aliased timeval;\n+      Result : Integer;\n+      pragma Unreferenced (Result);\n+\n+      function gettimeofday\n+        (Tv : access timeval;\n+         Tz : System.Address := System.Null_Address) return Integer;\n+      pragma Import (C, gettimeofday, \"gettimeofday\");\n+\n+   begin\n+      --  The return codes for gettimeofday are as follows (from man pages):\n+      --    EPERM  settimeofday is called by someone other than the superuser\n+      --    EINVAL Timezone (or something else) is invalid\n+      --    EFAULT One of tv or tz pointed outside accessible address space\n+\n+      --  None of these codes signal a potential clock skew, hence the return\n+      --  value is never checked.\n+\n+      Result := gettimeofday (TV'Access, System.Null_Address);\n+      timeval_to_duration (TV'Access, sec'Access, usec'Access);\n+      return Duration (sec) + Duration (usec) / Micro;\n+   end Clock;\n+\n+   -----------------\n+   -- To_Timespec --\n+   -----------------\n+\n+   function To_Timespec (D : Duration) return timespec;\n+\n+   function To_Timespec (D : Duration) return timespec is\n+      S : time_t;\n+      F : Duration;\n+\n+   begin\n+      S := time_t (Long_Long_Integer (D));\n+      F := D - Duration (S);\n+\n+      --  If F has negative value due to a round-up, adjust for positive F\n+      --  value.\n+\n+      if F < 0.0 then\n+         S := S - 1;\n+         F := F + 1.0;\n+      end if;\n+\n+      return\n+        timespec'(tv_sec  => S,\n+                  tv_nsec => Long_Integer (Long_Long_Integer (F * 10#1#E9)));\n+   end To_Timespec;\n+\n+   -----------------\n+   -- Timed_Delay --\n+   -----------------\n+\n+   procedure Timed_Delay\n+     (Time : Duration;\n+      Mode : Integer)\n+   is\n+      Request    : aliased timespec;\n+      Remaind    : aliased timespec;\n+      Rel_Time   : Duration;\n+      Abs_Time   : Duration;\n+      Base_Time  : constant Duration := Clock;\n+      Check_Time : Duration := Base_Time;\n+\n+      Result : Integer;\n+      pragma Unreferenced (Result);\n+\n+   begin\n+      if Mode = Relative then\n+         Rel_Time := Time;\n+         Abs_Time := Time + Check_Time;\n+      else\n+         Rel_Time := Time - Check_Time;\n+         Abs_Time := Time;\n+      end if;\n+\n+      if Rel_Time > 0.0 then\n+         loop\n+            Request := To_Timespec (Rel_Time);\n+            Result := nanosleep (Request'Access, Remaind'Access);\n+            Check_Time := Clock;\n+\n+            exit when Abs_Time <= Check_Time or else Check_Time < Base_Time;\n+\n+            Rel_Time := Abs_Time - Check_Time;\n+         end loop;\n+      end if;\n+   end Timed_Delay;\n+\n+   ----------------\n+   -- Initialize --\n+   ----------------\n+\n+   procedure Initialize is\n+   begin\n+      null;\n+   end Initialize;\n+\n+end System.OS_Primitives;"}]}