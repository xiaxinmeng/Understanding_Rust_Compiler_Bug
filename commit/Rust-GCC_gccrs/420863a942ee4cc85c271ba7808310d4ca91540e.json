{"sha": "420863a942ee4cc85c271ba7808310d4ca91540e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDIwODYzYTk0MmVlNGNjODVjMjcxYmE3ODA4MzEwZDRjYTkxNTQwZQ==", "commit": {"author": {"name": "Kai Tietz", "email": "ktietz@redhat.com", "date": "2011-06-28T15:32:47Z"}, "committer": {"name": "Kai Tietz", "email": "ktietz@gcc.gnu.org", "date": "2011-06-28T15:32:47Z"}, "message": "tree-ssa-forwprop.c (simplify_bitwise_binary): Improve type sinking.\n\n2011-06-28  Kai Tietz  <ktietz@redhat.com>\n\n        * tree-ssa-forwprop.c (simplify_bitwise_binary): Improve\n        type sinking.\n\nFrom-SVN: r175589", "tree": {"sha": "8ea31fc0b7d198683275ad748e258602c2ac010c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ea31fc0b7d198683275ad748e258602c2ac010c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/420863a942ee4cc85c271ba7808310d4ca91540e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/420863a942ee4cc85c271ba7808310d4ca91540e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/420863a942ee4cc85c271ba7808310d4ca91540e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/420863a942ee4cc85c271ba7808310d4ca91540e/comments", "author": null, "committer": null, "parents": [{"sha": "0498a2be0d546594c9225f7ba6dc080722a79ecb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0498a2be0d546594c9225f7ba6dc080722a79ecb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0498a2be0d546594c9225f7ba6dc080722a79ecb"}], "stats": {"total": 34, "additions": 31, "deletions": 3}, "files": [{"sha": "60bc9c65b9a73b43851ff447f77a5cb53ac67368", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/420863a942ee4cc85c271ba7808310d4ca91540e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/420863a942ee4cc85c271ba7808310d4ca91540e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=420863a942ee4cc85c271ba7808310d4ca91540e", "patch": "@@ -1,3 +1,8 @@\n+2011-06-28  Kai Tietz  <ktietz@redhat.com>\n+\n+\t* tree-ssa-forwprop.c (simplify_bitwise_binary): Improve\n+\ttype sinking.\n+\n 2011-06-28  Ramana Radhakrishnan  <ramana.radhakrishnan@linaro.org>\n \n \t* config/arm/vfp.md (\"*divsf3_vfp\"): Replace '+' constraint modifier"}, {"sha": "27453dd9720e023128fe52075172c8c5dbbdadfe", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/420863a942ee4cc85c271ba7808310d4ca91540e/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/420863a942ee4cc85c271ba7808310d4ca91540e/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=420863a942ee4cc85c271ba7808310d4ca91540e", "patch": "@@ -1676,16 +1676,39 @@ simplify_bitwise_binary (gimple_stmt_iterator *gsi)\n \t}\n     }\n \n+  /* Try to fold (type) X op CST -> (type) (X op ((type-x) CST)).  */\n+  if (TREE_CODE (arg2) == INTEGER_CST\n+      && CONVERT_EXPR_CODE_P (def1_code)\n+      && INTEGRAL_TYPE_P (def1_arg1)\n+      && int_fits_type_p (arg2, TREE_TYPE (def1_arg1)))\n+    {\n+      gimple newop;\n+      tree tem = create_tmp_reg (TREE_TYPE (def1_arg1), NULL);\n+      newop =\n+        gimple_build_assign_with_ops (code, tem, def1_arg1,\n+\t\t\t\t      fold_convert_loc (gimple_location (stmt),\n+\t\t\t\t\t\t\tTREE_TYPE (def1_arg1),\n+\t\t\t\t\t\t\targ2));\n+      tem = make_ssa_name (tem, newop);\n+      gimple_assign_set_lhs (newop, tem);\n+      gsi_insert_before (gsi, newop, GSI_SAME_STMT);\n+      gimple_assign_set_rhs_with_ops_1 (gsi, NOP_EXPR,\n+\t\t\t\t\ttem, NULL_TREE, NULL_TREE);\n+      update_stmt (gsi_stmt (*gsi));\n+      return true;\n+    }\n+\n   /* For bitwise binary operations apply operand conversions to the\n      binary operation result instead of to the operands.  This allows\n      to combine successive conversions and bitwise binary operations.  */\n   if (CONVERT_EXPR_CODE_P (def1_code)\n       && CONVERT_EXPR_CODE_P (def2_code)\n       && types_compatible_p (TREE_TYPE (def1_arg1), TREE_TYPE (def2_arg1))\n-      /* Make sure that the conversion widens the operands or that it\n-\t changes the operation to a bitfield precision.  */\n+      /* Make sure that the conversion widens the operands, or has same\n+\t precision,  or that it changes the operation to a bitfield\n+\t precision.  */\n       && ((TYPE_PRECISION (TREE_TYPE (def1_arg1))\n-\t   < TYPE_PRECISION (TREE_TYPE (arg1)))\n+\t   <= TYPE_PRECISION (TREE_TYPE (arg1)))\n \t  || (GET_MODE_CLASS (TYPE_MODE (TREE_TYPE (arg1)))\n \t      != MODE_INT)\n \t  || (TYPE_PRECISION (TREE_TYPE (arg1))"}]}