{"sha": "40fbfbea4895951571325e3f83acb6d0251fde04", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDBmYmZiZWE0ODk1OTUxNTcxMzI1ZTNmODNhY2I2ZDAyNTFmZGUwNA==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1993-10-08T19:15:55Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1993-10-08T19:15:55Z"}, "message": "Make ROSE shared library profiling work; Use GOTOFF if possible for ELF.\n\nFrom-SVN: r5684", "tree": {"sha": "4d4703d8584578827c570d9642571bcc22843b38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d4703d8584578827c570d9642571bcc22843b38"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40fbfbea4895951571325e3f83acb6d0251fde04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40fbfbea4895951571325e3f83acb6d0251fde04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40fbfbea4895951571325e3f83acb6d0251fde04", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40fbfbea4895951571325e3f83acb6d0251fde04/comments", "author": null, "committer": null, "parents": [{"sha": "7868c46630cef18ba6708cba08c7c3a61866944a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7868c46630cef18ba6708cba08c7c3a61866944a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7868c46630cef18ba6708cba08c7c3a61866944a"}], "stats": {"total": 72, "additions": 68, "deletions": 4}, "files": [{"sha": "3ac921173c7605bfbf96892a482811108d54a9bc", "filename": "gcc/config/i386/osfrose.h", "status": "modified", "additions": 42, "deletions": 4, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40fbfbea4895951571325e3f83acb6d0251fde04/gcc%2Fconfig%2Fi386%2Fosfrose.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40fbfbea4895951571325e3f83acb6d0251fde04/gcc%2Fconfig%2Fi386%2Fosfrose.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fosfrose.h?ref=40fbfbea4895951571325e3f83acb6d0251fde04", "patch": "@@ -182,11 +182,27 @@ do\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n     if (profile_flag && OSF_PROFILE_BEFORE_PROLOGUE)\t\t\t\\\n       {\t\t\t\t\t\t\t\t\t\\\n-\tif (!flag_pic)\t\t\t\t\t\t\t\\\n+\tif (!flag_pic && !HALF_PIC_P ())\t\t\t\t\\\n \t  {\t\t\t\t\t\t\t\t\\\n-\t    fprintf (FILE, \"\\tleal %sP%d,%%edx\\n\", lprefix, labelno);\t\\\n+\t    fprintf (FILE, \"\\tmovl $%sP%d,%%edx\\n\", lprefix, labelno);\t\\\n \t    fprintf (FILE, \"\\tcall *%s_mcount_ptr\\n\", prefix);\t\t\\\n \t  }\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+\telse if (HALF_PIC_P ())\t\t\t\t\t\t\\\n+\t  {\t\t\t\t\t\t\t\t\\\n+\t    rtx symref;\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+\t    HALF_PIC_EXTERNAL (\"_mcount_ptr\");\t\t\t\t\\\n+\t    symref = HALF_PIC_PTR (gen_rtx (SYMBOL_REF, Pmode,\t\t\\\n+\t\t\t\t\t    \"_mcount_ptr\"));\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+\t    fprintf (FILE, \"\\tmovl $%sP%d,%%edx\\n\", lprefix, labelno);\t\\\n+\t    fprintf (FILE, \"\\tmovl %s%s,%%eax\\n\", prefix,\t\t\\\n+\t\t     XSTR (symref, 0));\t\t\t\t\t\\\n+\t    fprintf (FILE, \"\\tmovl (%%eax),%%eax\\n\");\t\t\t\\\n+\t    fprintf (FILE, \"\\tcall *%%eax\\n\");\t\t\t\t\\\n+\t  }\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n \telse\t\t\t\t\t\t\t\t\\\n \t  {\t\t\t\t\t\t\t\t\\\n \t    static int call_no = 0;\t\t\t\t\t\\\n@@ -199,6 +215,7 @@ do\t\t\t\t\t\t\t\t\t\\\n \t\t     lprefix, labelno);\t\t\t\t\t\\\n \t    fprintf (FILE, \"\\tmovl %s_mcount_ptr@GOT(%%eax),%%eax\\n\",\t\\\n \t\t     prefix);\t\t\t\t\t\t\\\n+\t    fprintf (FILE, \"\\tmovl (%%eax),%%eax\\n\");\t\t\t\\\n \t    fprintf (FILE, \"\\tcall *%%eax\\n\");\t\t\t\t\\\n \t  }\t\t\t\t\t\t\t\t\\\n       }\t\t\t\t\t\t\t\t\t\\\n@@ -246,6 +263,17 @@ do\t\t\t\t\t\t\t\t\t\\\n \t    fprintf (FILE, \"\\tcall *%smcount@GOT(%%ebx)\\n\", prefix);\t\\\n \t  }\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n+\telse if (TARGET_MCOUNT && HALF_PIC_P ())\t\t\t\\\n+\t  {\t\t\t\t\t\t\t\t\\\n+\t    rtx symdef;\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+\t    HALF_PIC_EXTERNAL (\"mcount\");\t\t\t\t\\\n+\t    symdef = HALF_PIC_PTR (gen_rtx (SYMBOL_REF, Pmode, \"mcount\")); \\\n+\t    fprintf (FILE, \"\\tmovl $%sP%d,%%edx\\n\", lprefix, labelno);\t\\\n+\t    fprintf (FILE, \"\\tmovl %s%s,%%eax\\n\", prefix, XSTR (symdef, 0)); \\\n+\t    fprintf (FILE, \"\\tcall *%%eax\\n\");\t\t\t\t\\\n+\t  }\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n \telse if (TARGET_MCOUNT)\t\t\t\t\t\t\\\n \t  {\t\t\t\t\t\t\t\t\\\n \t    fprintf (FILE, \"\\tmovl $%sP%d,%%edx\\n\", lprefix, labelno);\t\\\n@@ -259,6 +287,7 @@ do\t\t\t\t\t\t\t\t\t\\\n \t    fprintf (FILE, \"\\tleal $%sP%d@GOTOFF(%%ebx),%%edx\\n\",\t\\\n \t\t     lprefix, labelno);\t\t\t\t\t\\\n \t    fprintf (FILE, \"\\tmovl _mcount_ptr@GOT(%%eax),%%eax\\n\");\t\\\n+\t    fprintf (FILE, \"\\tmovl (%%eax),%%eax\\n\");\t\t\t\\\n \t    fprintf (FILE, \"\\tcall *%%eax\\n\");\t\t\t\t\\\n \t    fprintf (FILE, \"\\tpopl %%eax\\n\");\t\t\t\t\\\n \t  }\t\t\t\t\t\t\t\t\\\n@@ -267,7 +296,7 @@ do\t\t\t\t\t\t\t\t\t\\\n \t  {\t\t\t\t\t\t\t\t\\\n \t    fprintf (FILE, \"\\tmovl 4(%%ebp),%%ecx\\n\");\t\t\t\\\n \t    fprintf (FILE, \"\\tpushl %%ecx\\n\");\t\t\t\t\\\n-\t    fprintf (FILE, \"\\tleal $%sP%d,%%edx\\n\", lprefix, labelno);\t\\\n+\t    fprintf (FILE, \"\\tmovl $%sP%d,%%edx\\n\", lprefix, labelno);\t\\\n \t    fprintf (FILE, \"\\tcall *_mcount_ptr\\n\");\t\t\t\\\n \t    fprintf (FILE, \"\\tpopl %%eax\\n\");\t\t\t\t\\\n \t  }\t\t\t\t\t\t\t\t\\\n@@ -565,8 +594,17 @@ while (0)\n #define ENCODE_SECTION_INFO(DECL)\t\t\t\t\t\\\n do\t\t\t\t\t\t\t\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n-   if (HALF_PIC_P ())\t\t\t\t\t\t        \\\n+   if (HALF_PIC_P ())\t\t\t\t\t\t\t\\\n       HALF_PIC_ENCODE (DECL);\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+   else if (flag_pic)\t\t\t\t\t\t\t\\\n+     {\t\t\t\t\t\t\t\t\t\\\n+       rtx rtl = (TREE_CODE_CLASS (TREE_CODE (DECL)) != 'd'\t\t\\\n+\t\t  ? TREE_CST_RTL (DECL) : DECL_RTL (DECL));\t\t\\\n+       SYMBOL_REF_FLAG (XEXP (rtl, 0))\t\t\t\t\t\\\n+\t = (TREE_CODE_CLASS (TREE_CODE (DECL)) != 'd'\t\t\t\\\n+\t    || ! TREE_PUBLIC (DECL));\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n   }\t\t\t\t\t\t\t\t\t\\\n while (0)\n "}, {"sha": "53ba12f064e8a0589435856b0a71b1857739276d", "filename": "gcc/halfpic.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40fbfbea4895951571325e3f83acb6d0251fde04/gcc%2Fhalfpic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40fbfbea4895951571325e3f83acb6d0251fde04/gcc%2Fhalfpic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhalfpic.c?ref=40fbfbea4895951571325e3f83acb6d0251fde04", "patch": "@@ -267,6 +267,30 @@ half_pic_declare (name)\n #endif\n }\n \n+\f\n+/* Mark that an object is explicitly external.  */\n+\n+void\n+half_pic_external (name)\n+     char *name;\n+{\n+  struct all_refs *ptr;\n+\n+  if (!flag_half_pic)\n+    return;\n+\n+  ptr = half_pic_hash (name, 0, TRUE);\n+  if (!ptr)\n+    return;\n+\n+  ptr->external_p = TRUE;\n+\n+#ifdef HALF_PIC_DEBUG\n+  if (HALF_PIC_DEBUG)\n+    fprintf (stderr, \"\\n========== Half_pic_external %s\\n\", name);\n+#endif\n+}\n+\n \f\n /* Return whether an address is half-pic.  */\n "}, {"sha": "7e274d33d5be14dac408f01356ba4cf368fab6c7", "filename": "gcc/halfpic.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40fbfbea4895951571325e3f83acb6d0251fde04/gcc%2Fhalfpic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40fbfbea4895951571325e3f83acb6d0251fde04/gcc%2Fhalfpic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhalfpic.h?ref=40fbfbea4895951571325e3f83acb6d0251fde04", "patch": "@@ -57,6 +57,7 @@ extern int  half_pic_number_ptrs;\t\t\t\t/* # distinct pointers found */\n extern int  half_pic_number_refs;\t\t\t\t/* # half-pic references */\n extern void half_pic_encode PROTO((union tree_node *));\t\t/* encode whether half-pic */\n extern void half_pic_declare PROTO((char *));\t\t\t/* declare object local */\n+extern void half_pic_external PROTO((char *));\t\t\t/* declare object external */\n extern void half_pic_init PROTO((void));\t\t\t/* half_pic initialization */\n extern void half_pic_finish STDIO_PROTO((FILE *));\t\t/* half_pic termination */\n extern int  half_pic_address_p PROTO((struct rtx_def *));\t/* true if an address is half-pic */\n@@ -71,6 +72,7 @@ extern struct rtx_def *half_pic_ptr PROTO((struct rtx_def *));\t/* return RTX for\n \n #define HALF_PIC_ENCODE(DECL)\thalf_pic_encode (DECL)\n #define HALF_PIC_DECLARE(NAME)\thalf_pic_declare (NAME)\n+#define HALF_PIC_EXTERNAL(NAME)\thalf_pic_external (NAME)\n #define HALF_PIC_INIT()\t\thalf_pic_init ()\n #define HALF_PIC_FINISH(STREAM)\thalf_pic_finish (STREAM)\n #define HALF_PIC_ADDRESS_P(X)\t((*ptr_half_pic_address_p) (X))"}]}