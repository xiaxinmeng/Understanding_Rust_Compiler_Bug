{"sha": "afd7265818081276d7bc4c104b4e6efbc8013211", "node_id": "C_kwDOANBUbNoAKGFmZDcyNjU4MTgwODEyNzZkN2JjNGMxMDRiNGU2ZWZiYzgwMTMyMTE", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-01-29T23:08:30Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-01-30T16:46:19Z"}, "message": "RISC-V: Add vluxei64 C API intrinsic testcases\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/riscv/rvv/base/vluxei64_v-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vluxei64_v-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vluxei64_v-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vluxei64_v_m-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vluxei64_v_m-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vluxei64_v_m-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vluxei64_v_mu-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vluxei64_v_mu-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vluxei64_v_mu-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vluxei64_v_tu-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vluxei64_v_tu-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vluxei64_v_tu-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vluxei64_v_tum-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vluxei64_v_tum-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vluxei64_v_tum-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vluxei64_v_tumu-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vluxei64_v_tumu-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vluxei64_v_tumu-3.c: New test.", "tree": {"sha": "58c431b2484d9d3c85c7e5b00c3322f45974c7fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/58c431b2484d9d3c85c7e5b00c3322f45974c7fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/afd7265818081276d7bc4c104b4e6efbc8013211", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afd7265818081276d7bc4c104b4e6efbc8013211", "html_url": "https://github.com/Rust-GCC/gccrs/commit/afd7265818081276d7bc4c104b4e6efbc8013211", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afd7265818081276d7bc4c104b4e6efbc8013211/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0451ce4444dc5c9f84dd323b228e707323399487", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0451ce4444dc5c9f84dd323b228e707323399487", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0451ce4444dc5c9f84dd323b228e707323399487"}], "stats": {"total": 4716, "additions": 4716, "deletions": 0}, "files": [{"sha": "9bfdf78821edba303a457bcbdea059de233b8125", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vluxei64_v-1.c", "status": "added", "additions": 262, "deletions": 0, "changes": 262, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd7265818081276d7bc4c104b4e6efbc8013211/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_v-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd7265818081276d7bc4c104b4e6efbc8013211/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_v-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_v-1.c?ref=afd7265818081276d7bc4c104b4e6efbc8013211", "patch": "@@ -0,0 +1,262 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vluxei64_v_i8mf8(const int8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i8mf8(base,bindex,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vluxei64_v_i8mf4(const int8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i8mf4(base,bindex,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vluxei64_v_i8mf2(const int8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i8mf2(base,bindex,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vluxei64_v_i8m1(const int8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i8m1(base,bindex,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vluxei64_v_i16mf4(const int16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i16mf4(base,bindex,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vluxei64_v_i16mf2(const int16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i16mf2(base,bindex,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vluxei64_v_i16m1(const int16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i16m1(base,bindex,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vluxei64_v_i16m2(const int16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i16m2(base,bindex,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vluxei64_v_i32mf2(const int32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i32mf2(base,bindex,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vluxei64_v_i32m1(const int32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i32m1(base,bindex,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vluxei64_v_i32m2(const int32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i32m2(base,bindex,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vluxei64_v_i32m4(const int32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i32m4(base,bindex,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vluxei64_v_i64m1(const int64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i64m1(base,bindex,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vluxei64_v_i64m2(const int64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i64m2(base,bindex,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vluxei64_v_i64m4(const int64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i64m4(base,bindex,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vluxei64_v_i64m8(const int64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i64m8(base,bindex,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vluxei64_v_u8mf8(const uint8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u8mf8(base,bindex,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vluxei64_v_u8mf4(const uint8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u8mf4(base,bindex,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vluxei64_v_u8mf2(const uint8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u8mf2(base,bindex,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vluxei64_v_u8m1(const uint8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u8m1(base,bindex,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vluxei64_v_u16mf4(const uint16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u16mf4(base,bindex,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vluxei64_v_u16mf2(const uint16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u16mf2(base,bindex,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vluxei64_v_u16m1(const uint16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u16m1(base,bindex,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vluxei64_v_u16m2(const uint16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u16m2(base,bindex,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vluxei64_v_u32mf2(const uint32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u32mf2(base,bindex,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vluxei64_v_u32m1(const uint32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u32m1(base,bindex,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vluxei64_v_u32m2(const uint32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u32m2(base,bindex,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vluxei64_v_u32m4(const uint32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u32m4(base,bindex,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vluxei64_v_u64m1(const uint64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u64m1(base,bindex,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vluxei64_v_u64m2(const uint64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u64m2(base,bindex,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vluxei64_v_u64m4(const uint64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u64m4(base,bindex,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vluxei64_v_u64m8(const uint64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u64m8(base,bindex,vl);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vluxei64_v_f32mf2(const float* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f32mf2(base,bindex,vl);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vluxei64_v_f32m1(const float* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f32m1(base,bindex,vl);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vluxei64_v_f32m2(const float* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f32m2(base,bindex,vl);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vluxei64_v_f32m4(const float* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f32m4(base,bindex,vl);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vluxei64_v_f64m1(const double* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f64m1(base,bindex,vl);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vluxei64_v_f64m2(const double* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f64m2(base,bindex,vl);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vluxei64_v_f64m4(const double* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f64m4(base,bindex,vl);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vluxei64_v_f64m8(const double* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f64m8(base,bindex,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */"}, {"sha": "592c2162fd4b4271e37b597665f493a0409a9eef", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vluxei64_v-2.c", "status": "added", "additions": 262, "deletions": 0, "changes": 262, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd7265818081276d7bc4c104b4e6efbc8013211/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_v-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd7265818081276d7bc4c104b4e6efbc8013211/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_v-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_v-2.c?ref=afd7265818081276d7bc4c104b4e6efbc8013211", "patch": "@@ -0,0 +1,262 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vluxei64_v_i8mf8(const int8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i8mf8(base,bindex,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vluxei64_v_i8mf4(const int8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i8mf4(base,bindex,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vluxei64_v_i8mf2(const int8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i8mf2(base,bindex,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vluxei64_v_i8m1(const int8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i8m1(base,bindex,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vluxei64_v_i16mf4(const int16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i16mf4(base,bindex,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vluxei64_v_i16mf2(const int16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i16mf2(base,bindex,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vluxei64_v_i16m1(const int16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i16m1(base,bindex,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vluxei64_v_i16m2(const int16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i16m2(base,bindex,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vluxei64_v_i32mf2(const int32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i32mf2(base,bindex,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vluxei64_v_i32m1(const int32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i32m1(base,bindex,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vluxei64_v_i32m2(const int32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i32m2(base,bindex,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vluxei64_v_i32m4(const int32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i32m4(base,bindex,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vluxei64_v_i64m1(const int64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i64m1(base,bindex,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vluxei64_v_i64m2(const int64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i64m2(base,bindex,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vluxei64_v_i64m4(const int64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i64m4(base,bindex,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vluxei64_v_i64m8(const int64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i64m8(base,bindex,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vluxei64_v_u8mf8(const uint8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u8mf8(base,bindex,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vluxei64_v_u8mf4(const uint8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u8mf4(base,bindex,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vluxei64_v_u8mf2(const uint8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u8mf2(base,bindex,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vluxei64_v_u8m1(const uint8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u8m1(base,bindex,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vluxei64_v_u16mf4(const uint16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u16mf4(base,bindex,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vluxei64_v_u16mf2(const uint16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u16mf2(base,bindex,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vluxei64_v_u16m1(const uint16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u16m1(base,bindex,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vluxei64_v_u16m2(const uint16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u16m2(base,bindex,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vluxei64_v_u32mf2(const uint32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u32mf2(base,bindex,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vluxei64_v_u32m1(const uint32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u32m1(base,bindex,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vluxei64_v_u32m2(const uint32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u32m2(base,bindex,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vluxei64_v_u32m4(const uint32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u32m4(base,bindex,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vluxei64_v_u64m1(const uint64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u64m1(base,bindex,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vluxei64_v_u64m2(const uint64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u64m2(base,bindex,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vluxei64_v_u64m4(const uint64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u64m4(base,bindex,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vluxei64_v_u64m8(const uint64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u64m8(base,bindex,31);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vluxei64_v_f32mf2(const float* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f32mf2(base,bindex,31);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vluxei64_v_f32m1(const float* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f32m1(base,bindex,31);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vluxei64_v_f32m2(const float* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f32m2(base,bindex,31);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vluxei64_v_f32m4(const float* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f32m4(base,bindex,31);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vluxei64_v_f64m1(const double* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f64m1(base,bindex,31);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vluxei64_v_f64m2(const double* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f64m2(base,bindex,31);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vluxei64_v_f64m4(const double* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f64m4(base,bindex,31);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vluxei64_v_f64m8(const double* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f64m8(base,bindex,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */"}, {"sha": "8618920c03ac938258a2acf2a3df0828402e89e1", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vluxei64_v-3.c", "status": "added", "additions": 262, "deletions": 0, "changes": 262, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd7265818081276d7bc4c104b4e6efbc8013211/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_v-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd7265818081276d7bc4c104b4e6efbc8013211/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_v-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_v-3.c?ref=afd7265818081276d7bc4c104b4e6efbc8013211", "patch": "@@ -0,0 +1,262 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vluxei64_v_i8mf8(const int8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i8mf8(base,bindex,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vluxei64_v_i8mf4(const int8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i8mf4(base,bindex,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vluxei64_v_i8mf2(const int8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i8mf2(base,bindex,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vluxei64_v_i8m1(const int8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i8m1(base,bindex,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vluxei64_v_i16mf4(const int16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i16mf4(base,bindex,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vluxei64_v_i16mf2(const int16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i16mf2(base,bindex,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vluxei64_v_i16m1(const int16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i16m1(base,bindex,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vluxei64_v_i16m2(const int16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i16m2(base,bindex,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vluxei64_v_i32mf2(const int32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i32mf2(base,bindex,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vluxei64_v_i32m1(const int32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i32m1(base,bindex,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vluxei64_v_i32m2(const int32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i32m2(base,bindex,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vluxei64_v_i32m4(const int32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i32m4(base,bindex,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vluxei64_v_i64m1(const int64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i64m1(base,bindex,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vluxei64_v_i64m2(const int64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i64m2(base,bindex,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vluxei64_v_i64m4(const int64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i64m4(base,bindex,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vluxei64_v_i64m8(const int64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i64m8(base,bindex,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vluxei64_v_u8mf8(const uint8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u8mf8(base,bindex,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vluxei64_v_u8mf4(const uint8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u8mf4(base,bindex,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vluxei64_v_u8mf2(const uint8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u8mf2(base,bindex,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vluxei64_v_u8m1(const uint8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u8m1(base,bindex,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vluxei64_v_u16mf4(const uint16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u16mf4(base,bindex,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vluxei64_v_u16mf2(const uint16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u16mf2(base,bindex,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vluxei64_v_u16m1(const uint16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u16m1(base,bindex,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vluxei64_v_u16m2(const uint16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u16m2(base,bindex,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vluxei64_v_u32mf2(const uint32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u32mf2(base,bindex,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vluxei64_v_u32m1(const uint32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u32m1(base,bindex,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vluxei64_v_u32m2(const uint32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u32m2(base,bindex,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vluxei64_v_u32m4(const uint32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u32m4(base,bindex,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vluxei64_v_u64m1(const uint64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u64m1(base,bindex,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vluxei64_v_u64m2(const uint64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u64m2(base,bindex,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vluxei64_v_u64m4(const uint64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u64m4(base,bindex,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vluxei64_v_u64m8(const uint64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u64m8(base,bindex,32);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vluxei64_v_f32mf2(const float* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f32mf2(base,bindex,32);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vluxei64_v_f32m1(const float* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f32m1(base,bindex,32);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vluxei64_v_f32m2(const float* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f32m2(base,bindex,32);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vluxei64_v_f32m4(const float* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f32m4(base,bindex,32);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vluxei64_v_f64m1(const double* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f64m1(base,bindex,32);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vluxei64_v_f64m2(const double* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f64m2(base,bindex,32);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vluxei64_v_f64m4(const double* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f64m4(base,bindex,32);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vluxei64_v_f64m8(const double* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f64m8(base,bindex,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */"}, {"sha": "05518c91ece349d96e9a3f44635f75d6a0a34bb0", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vluxei64_v_m-1.c", "status": "added", "additions": 262, "deletions": 0, "changes": 262, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd7265818081276d7bc4c104b4e6efbc8013211/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_v_m-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd7265818081276d7bc4c104b4e6efbc8013211/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_v_m-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_v_m-1.c?ref=afd7265818081276d7bc4c104b4e6efbc8013211", "patch": "@@ -0,0 +1,262 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vluxei64_v_i8mf8_m(vbool64_t mask,const int8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i8mf8_m(mask,base,bindex,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vluxei64_v_i8mf4_m(vbool32_t mask,const int8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i8mf4_m(mask,base,bindex,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vluxei64_v_i8mf2_m(vbool16_t mask,const int8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i8mf2_m(mask,base,bindex,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vluxei64_v_i8m1_m(vbool8_t mask,const int8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i8m1_m(mask,base,bindex,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vluxei64_v_i16mf4_m(vbool64_t mask,const int16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i16mf4_m(mask,base,bindex,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vluxei64_v_i16mf2_m(vbool32_t mask,const int16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i16mf2_m(mask,base,bindex,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vluxei64_v_i16m1_m(vbool16_t mask,const int16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i16m1_m(mask,base,bindex,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vluxei64_v_i16m2_m(vbool8_t mask,const int16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i16m2_m(mask,base,bindex,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vluxei64_v_i32mf2_m(vbool64_t mask,const int32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i32mf2_m(mask,base,bindex,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vluxei64_v_i32m1_m(vbool32_t mask,const int32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i32m1_m(mask,base,bindex,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vluxei64_v_i32m2_m(vbool16_t mask,const int32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i32m2_m(mask,base,bindex,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vluxei64_v_i32m4_m(vbool8_t mask,const int32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i32m4_m(mask,base,bindex,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vluxei64_v_i64m1_m(vbool64_t mask,const int64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i64m1_m(mask,base,bindex,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vluxei64_v_i64m2_m(vbool32_t mask,const int64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i64m2_m(mask,base,bindex,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vluxei64_v_i64m4_m(vbool16_t mask,const int64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i64m4_m(mask,base,bindex,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vluxei64_v_i64m8_m(vbool8_t mask,const int64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i64m8_m(mask,base,bindex,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vluxei64_v_u8mf8_m(vbool64_t mask,const uint8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u8mf8_m(mask,base,bindex,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vluxei64_v_u8mf4_m(vbool32_t mask,const uint8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u8mf4_m(mask,base,bindex,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vluxei64_v_u8mf2_m(vbool16_t mask,const uint8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u8mf2_m(mask,base,bindex,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vluxei64_v_u8m1_m(vbool8_t mask,const uint8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u8m1_m(mask,base,bindex,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vluxei64_v_u16mf4_m(vbool64_t mask,const uint16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u16mf4_m(mask,base,bindex,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vluxei64_v_u16mf2_m(vbool32_t mask,const uint16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u16mf2_m(mask,base,bindex,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vluxei64_v_u16m1_m(vbool16_t mask,const uint16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u16m1_m(mask,base,bindex,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vluxei64_v_u16m2_m(vbool8_t mask,const uint16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u16m2_m(mask,base,bindex,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vluxei64_v_u32mf2_m(vbool64_t mask,const uint32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u32mf2_m(mask,base,bindex,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vluxei64_v_u32m1_m(vbool32_t mask,const uint32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u32m1_m(mask,base,bindex,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vluxei64_v_u32m2_m(vbool16_t mask,const uint32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u32m2_m(mask,base,bindex,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vluxei64_v_u32m4_m(vbool8_t mask,const uint32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u32m4_m(mask,base,bindex,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vluxei64_v_u64m1_m(vbool64_t mask,const uint64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u64m1_m(mask,base,bindex,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vluxei64_v_u64m2_m(vbool32_t mask,const uint64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u64m2_m(mask,base,bindex,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vluxei64_v_u64m4_m(vbool16_t mask,const uint64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u64m4_m(mask,base,bindex,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vluxei64_v_u64m8_m(vbool8_t mask,const uint64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u64m8_m(mask,base,bindex,vl);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vluxei64_v_f32mf2_m(vbool64_t mask,const float* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f32mf2_m(mask,base,bindex,vl);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vluxei64_v_f32m1_m(vbool32_t mask,const float* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f32m1_m(mask,base,bindex,vl);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vluxei64_v_f32m2_m(vbool16_t mask,const float* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f32m2_m(mask,base,bindex,vl);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vluxei64_v_f32m4_m(vbool8_t mask,const float* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f32m4_m(mask,base,bindex,vl);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vluxei64_v_f64m1_m(vbool64_t mask,const double* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f64m1_m(mask,base,bindex,vl);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vluxei64_v_f64m2_m(vbool32_t mask,const double* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f64m2_m(mask,base,bindex,vl);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vluxei64_v_f64m4_m(vbool16_t mask,const double* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f64m4_m(mask,base,bindex,vl);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vluxei64_v_f64m8_m(vbool8_t mask,const double* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f64m8_m(mask,base,bindex,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "37375e45a030ae96951f3b0c2f8dc93c58354ab0", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vluxei64_v_m-2.c", "status": "added", "additions": 262, "deletions": 0, "changes": 262, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd7265818081276d7bc4c104b4e6efbc8013211/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_v_m-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd7265818081276d7bc4c104b4e6efbc8013211/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_v_m-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_v_m-2.c?ref=afd7265818081276d7bc4c104b4e6efbc8013211", "patch": "@@ -0,0 +1,262 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vluxei64_v_i8mf8_m(vbool64_t mask,const int8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i8mf8_m(mask,base,bindex,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vluxei64_v_i8mf4_m(vbool32_t mask,const int8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i8mf4_m(mask,base,bindex,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vluxei64_v_i8mf2_m(vbool16_t mask,const int8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i8mf2_m(mask,base,bindex,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vluxei64_v_i8m1_m(vbool8_t mask,const int8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i8m1_m(mask,base,bindex,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vluxei64_v_i16mf4_m(vbool64_t mask,const int16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i16mf4_m(mask,base,bindex,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vluxei64_v_i16mf2_m(vbool32_t mask,const int16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i16mf2_m(mask,base,bindex,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vluxei64_v_i16m1_m(vbool16_t mask,const int16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i16m1_m(mask,base,bindex,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vluxei64_v_i16m2_m(vbool8_t mask,const int16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i16m2_m(mask,base,bindex,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vluxei64_v_i32mf2_m(vbool64_t mask,const int32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i32mf2_m(mask,base,bindex,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vluxei64_v_i32m1_m(vbool32_t mask,const int32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i32m1_m(mask,base,bindex,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vluxei64_v_i32m2_m(vbool16_t mask,const int32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i32m2_m(mask,base,bindex,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vluxei64_v_i32m4_m(vbool8_t mask,const int32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i32m4_m(mask,base,bindex,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vluxei64_v_i64m1_m(vbool64_t mask,const int64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i64m1_m(mask,base,bindex,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vluxei64_v_i64m2_m(vbool32_t mask,const int64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i64m2_m(mask,base,bindex,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vluxei64_v_i64m4_m(vbool16_t mask,const int64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i64m4_m(mask,base,bindex,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vluxei64_v_i64m8_m(vbool8_t mask,const int64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i64m8_m(mask,base,bindex,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vluxei64_v_u8mf8_m(vbool64_t mask,const uint8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u8mf8_m(mask,base,bindex,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vluxei64_v_u8mf4_m(vbool32_t mask,const uint8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u8mf4_m(mask,base,bindex,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vluxei64_v_u8mf2_m(vbool16_t mask,const uint8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u8mf2_m(mask,base,bindex,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vluxei64_v_u8m1_m(vbool8_t mask,const uint8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u8m1_m(mask,base,bindex,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vluxei64_v_u16mf4_m(vbool64_t mask,const uint16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u16mf4_m(mask,base,bindex,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vluxei64_v_u16mf2_m(vbool32_t mask,const uint16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u16mf2_m(mask,base,bindex,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vluxei64_v_u16m1_m(vbool16_t mask,const uint16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u16m1_m(mask,base,bindex,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vluxei64_v_u16m2_m(vbool8_t mask,const uint16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u16m2_m(mask,base,bindex,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vluxei64_v_u32mf2_m(vbool64_t mask,const uint32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u32mf2_m(mask,base,bindex,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vluxei64_v_u32m1_m(vbool32_t mask,const uint32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u32m1_m(mask,base,bindex,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vluxei64_v_u32m2_m(vbool16_t mask,const uint32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u32m2_m(mask,base,bindex,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vluxei64_v_u32m4_m(vbool8_t mask,const uint32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u32m4_m(mask,base,bindex,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vluxei64_v_u64m1_m(vbool64_t mask,const uint64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u64m1_m(mask,base,bindex,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vluxei64_v_u64m2_m(vbool32_t mask,const uint64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u64m2_m(mask,base,bindex,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vluxei64_v_u64m4_m(vbool16_t mask,const uint64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u64m4_m(mask,base,bindex,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vluxei64_v_u64m8_m(vbool8_t mask,const uint64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u64m8_m(mask,base,bindex,31);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vluxei64_v_f32mf2_m(vbool64_t mask,const float* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f32mf2_m(mask,base,bindex,31);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vluxei64_v_f32m1_m(vbool32_t mask,const float* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f32m1_m(mask,base,bindex,31);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vluxei64_v_f32m2_m(vbool16_t mask,const float* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f32m2_m(mask,base,bindex,31);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vluxei64_v_f32m4_m(vbool8_t mask,const float* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f32m4_m(mask,base,bindex,31);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vluxei64_v_f64m1_m(vbool64_t mask,const double* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f64m1_m(mask,base,bindex,31);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vluxei64_v_f64m2_m(vbool32_t mask,const double* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f64m2_m(mask,base,bindex,31);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vluxei64_v_f64m4_m(vbool16_t mask,const double* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f64m4_m(mask,base,bindex,31);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vluxei64_v_f64m8_m(vbool8_t mask,const double* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f64m8_m(mask,base,bindex,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "765d2da8b1851cdaa02b9deee347c6946c861368", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vluxei64_v_m-3.c", "status": "added", "additions": 262, "deletions": 0, "changes": 262, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd7265818081276d7bc4c104b4e6efbc8013211/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_v_m-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd7265818081276d7bc4c104b4e6efbc8013211/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_v_m-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_v_m-3.c?ref=afd7265818081276d7bc4c104b4e6efbc8013211", "patch": "@@ -0,0 +1,262 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vluxei64_v_i8mf8_m(vbool64_t mask,const int8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i8mf8_m(mask,base,bindex,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vluxei64_v_i8mf4_m(vbool32_t mask,const int8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i8mf4_m(mask,base,bindex,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vluxei64_v_i8mf2_m(vbool16_t mask,const int8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i8mf2_m(mask,base,bindex,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vluxei64_v_i8m1_m(vbool8_t mask,const int8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i8m1_m(mask,base,bindex,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vluxei64_v_i16mf4_m(vbool64_t mask,const int16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i16mf4_m(mask,base,bindex,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vluxei64_v_i16mf2_m(vbool32_t mask,const int16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i16mf2_m(mask,base,bindex,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vluxei64_v_i16m1_m(vbool16_t mask,const int16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i16m1_m(mask,base,bindex,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vluxei64_v_i16m2_m(vbool8_t mask,const int16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i16m2_m(mask,base,bindex,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vluxei64_v_i32mf2_m(vbool64_t mask,const int32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i32mf2_m(mask,base,bindex,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vluxei64_v_i32m1_m(vbool32_t mask,const int32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i32m1_m(mask,base,bindex,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vluxei64_v_i32m2_m(vbool16_t mask,const int32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i32m2_m(mask,base,bindex,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vluxei64_v_i32m4_m(vbool8_t mask,const int32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i32m4_m(mask,base,bindex,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vluxei64_v_i64m1_m(vbool64_t mask,const int64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i64m1_m(mask,base,bindex,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vluxei64_v_i64m2_m(vbool32_t mask,const int64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i64m2_m(mask,base,bindex,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vluxei64_v_i64m4_m(vbool16_t mask,const int64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i64m4_m(mask,base,bindex,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vluxei64_v_i64m8_m(vbool8_t mask,const int64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i64m8_m(mask,base,bindex,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vluxei64_v_u8mf8_m(vbool64_t mask,const uint8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u8mf8_m(mask,base,bindex,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vluxei64_v_u8mf4_m(vbool32_t mask,const uint8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u8mf4_m(mask,base,bindex,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vluxei64_v_u8mf2_m(vbool16_t mask,const uint8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u8mf2_m(mask,base,bindex,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vluxei64_v_u8m1_m(vbool8_t mask,const uint8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u8m1_m(mask,base,bindex,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vluxei64_v_u16mf4_m(vbool64_t mask,const uint16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u16mf4_m(mask,base,bindex,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vluxei64_v_u16mf2_m(vbool32_t mask,const uint16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u16mf2_m(mask,base,bindex,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vluxei64_v_u16m1_m(vbool16_t mask,const uint16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u16m1_m(mask,base,bindex,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vluxei64_v_u16m2_m(vbool8_t mask,const uint16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u16m2_m(mask,base,bindex,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vluxei64_v_u32mf2_m(vbool64_t mask,const uint32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u32mf2_m(mask,base,bindex,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vluxei64_v_u32m1_m(vbool32_t mask,const uint32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u32m1_m(mask,base,bindex,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vluxei64_v_u32m2_m(vbool16_t mask,const uint32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u32m2_m(mask,base,bindex,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vluxei64_v_u32m4_m(vbool8_t mask,const uint32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u32m4_m(mask,base,bindex,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vluxei64_v_u64m1_m(vbool64_t mask,const uint64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u64m1_m(mask,base,bindex,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vluxei64_v_u64m2_m(vbool32_t mask,const uint64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u64m2_m(mask,base,bindex,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vluxei64_v_u64m4_m(vbool16_t mask,const uint64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u64m4_m(mask,base,bindex,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vluxei64_v_u64m8_m(vbool8_t mask,const uint64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u64m8_m(mask,base,bindex,32);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vluxei64_v_f32mf2_m(vbool64_t mask,const float* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f32mf2_m(mask,base,bindex,32);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vluxei64_v_f32m1_m(vbool32_t mask,const float* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f32m1_m(mask,base,bindex,32);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vluxei64_v_f32m2_m(vbool16_t mask,const float* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f32m2_m(mask,base,bindex,32);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vluxei64_v_f32m4_m(vbool8_t mask,const float* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f32m4_m(mask,base,bindex,32);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vluxei64_v_f64m1_m(vbool64_t mask,const double* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f64m1_m(mask,base,bindex,32);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vluxei64_v_f64m2_m(vbool32_t mask,const double* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f64m2_m(mask,base,bindex,32);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vluxei64_v_f64m4_m(vbool16_t mask,const double* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f64m4_m(mask,base,bindex,32);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vluxei64_v_f64m8_m(vbool8_t mask,const double* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f64m8_m(mask,base,bindex,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "12fa84d457448e9668b99dc2e724c4b4a34022f3", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vluxei64_v_mu-1.c", "status": "added", "additions": 262, "deletions": 0, "changes": 262, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd7265818081276d7bc4c104b4e6efbc8013211/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_v_mu-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd7265818081276d7bc4c104b4e6efbc8013211/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_v_mu-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_v_mu-1.c?ref=afd7265818081276d7bc4c104b4e6efbc8013211", "patch": "@@ -0,0 +1,262 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vluxei64_v_i8mf8_mu(vbool64_t mask,vint8mf8_t merge,const int8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i8mf8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vluxei64_v_i8mf4_mu(vbool32_t mask,vint8mf4_t merge,const int8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i8mf4_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vluxei64_v_i8mf2_mu(vbool16_t mask,vint8mf2_t merge,const int8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i8mf2_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vluxei64_v_i8m1_mu(vbool8_t mask,vint8m1_t merge,const int8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i8m1_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vluxei64_v_i16mf4_mu(vbool64_t mask,vint16mf4_t merge,const int16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i16mf4_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vluxei64_v_i16mf2_mu(vbool32_t mask,vint16mf2_t merge,const int16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i16mf2_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vluxei64_v_i16m1_mu(vbool16_t mask,vint16m1_t merge,const int16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i16m1_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vluxei64_v_i16m2_mu(vbool8_t mask,vint16m2_t merge,const int16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i16m2_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vluxei64_v_i32mf2_mu(vbool64_t mask,vint32mf2_t merge,const int32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i32mf2_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vluxei64_v_i32m1_mu(vbool32_t mask,vint32m1_t merge,const int32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i32m1_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vluxei64_v_i32m2_mu(vbool16_t mask,vint32m2_t merge,const int32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i32m2_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vluxei64_v_i32m4_mu(vbool8_t mask,vint32m4_t merge,const int32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i32m4_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vluxei64_v_i64m1_mu(vbool64_t mask,vint64m1_t merge,const int64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i64m1_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vluxei64_v_i64m2_mu(vbool32_t mask,vint64m2_t merge,const int64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i64m2_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vluxei64_v_i64m4_mu(vbool16_t mask,vint64m4_t merge,const int64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i64m4_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vluxei64_v_i64m8_mu(vbool8_t mask,vint64m8_t merge,const int64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i64m8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vluxei64_v_u8mf8_mu(vbool64_t mask,vuint8mf8_t merge,const uint8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u8mf8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vluxei64_v_u8mf4_mu(vbool32_t mask,vuint8mf4_t merge,const uint8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u8mf4_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vluxei64_v_u8mf2_mu(vbool16_t mask,vuint8mf2_t merge,const uint8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u8mf2_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vluxei64_v_u8m1_mu(vbool8_t mask,vuint8m1_t merge,const uint8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u8m1_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vluxei64_v_u16mf4_mu(vbool64_t mask,vuint16mf4_t merge,const uint16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u16mf4_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vluxei64_v_u16mf2_mu(vbool32_t mask,vuint16mf2_t merge,const uint16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u16mf2_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vluxei64_v_u16m1_mu(vbool16_t mask,vuint16m1_t merge,const uint16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u16m1_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vluxei64_v_u16m2_mu(vbool8_t mask,vuint16m2_t merge,const uint16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u16m2_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vluxei64_v_u32mf2_mu(vbool64_t mask,vuint32mf2_t merge,const uint32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u32mf2_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vluxei64_v_u32m1_mu(vbool32_t mask,vuint32m1_t merge,const uint32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u32m1_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vluxei64_v_u32m2_mu(vbool16_t mask,vuint32m2_t merge,const uint32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u32m2_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vluxei64_v_u32m4_mu(vbool8_t mask,vuint32m4_t merge,const uint32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u32m4_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vluxei64_v_u64m1_mu(vbool64_t mask,vuint64m1_t merge,const uint64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u64m1_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vluxei64_v_u64m2_mu(vbool32_t mask,vuint64m2_t merge,const uint64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u64m2_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vluxei64_v_u64m4_mu(vbool16_t mask,vuint64m4_t merge,const uint64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u64m4_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vluxei64_v_u64m8_mu(vbool8_t mask,vuint64m8_t merge,const uint64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u64m8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vluxei64_v_f32mf2_mu(vbool64_t mask,vfloat32mf2_t merge,const float* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f32mf2_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vluxei64_v_f32m1_mu(vbool32_t mask,vfloat32m1_t merge,const float* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f32m1_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vluxei64_v_f32m2_mu(vbool16_t mask,vfloat32m2_t merge,const float* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f32m2_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vluxei64_v_f32m4_mu(vbool8_t mask,vfloat32m4_t merge,const float* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f32m4_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vluxei64_v_f64m1_mu(vbool64_t mask,vfloat64m1_t merge,const double* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f64m1_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vluxei64_v_f64m2_mu(vbool32_t mask,vfloat64m2_t merge,const double* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f64m2_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vluxei64_v_f64m4_mu(vbool16_t mask,vfloat64m4_t merge,const double* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f64m4_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vluxei64_v_f64m8_mu(vbool8_t mask,vfloat64m8_t merge,const double* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f64m8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "7f00b51388695ad480f2ce88f1637f5bf025f4da", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vluxei64_v_mu-2.c", "status": "added", "additions": 262, "deletions": 0, "changes": 262, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd7265818081276d7bc4c104b4e6efbc8013211/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_v_mu-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd7265818081276d7bc4c104b4e6efbc8013211/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_v_mu-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_v_mu-2.c?ref=afd7265818081276d7bc4c104b4e6efbc8013211", "patch": "@@ -0,0 +1,262 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vluxei64_v_i8mf8_mu(vbool64_t mask,vint8mf8_t merge,const int8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i8mf8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vluxei64_v_i8mf4_mu(vbool32_t mask,vint8mf4_t merge,const int8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i8mf4_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vluxei64_v_i8mf2_mu(vbool16_t mask,vint8mf2_t merge,const int8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i8mf2_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vluxei64_v_i8m1_mu(vbool8_t mask,vint8m1_t merge,const int8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i8m1_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vluxei64_v_i16mf4_mu(vbool64_t mask,vint16mf4_t merge,const int16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i16mf4_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vluxei64_v_i16mf2_mu(vbool32_t mask,vint16mf2_t merge,const int16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i16mf2_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vluxei64_v_i16m1_mu(vbool16_t mask,vint16m1_t merge,const int16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i16m1_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vluxei64_v_i16m2_mu(vbool8_t mask,vint16m2_t merge,const int16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i16m2_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vluxei64_v_i32mf2_mu(vbool64_t mask,vint32mf2_t merge,const int32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i32mf2_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vluxei64_v_i32m1_mu(vbool32_t mask,vint32m1_t merge,const int32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i32m1_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vluxei64_v_i32m2_mu(vbool16_t mask,vint32m2_t merge,const int32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i32m2_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vluxei64_v_i32m4_mu(vbool8_t mask,vint32m4_t merge,const int32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i32m4_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vluxei64_v_i64m1_mu(vbool64_t mask,vint64m1_t merge,const int64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i64m1_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vluxei64_v_i64m2_mu(vbool32_t mask,vint64m2_t merge,const int64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i64m2_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vluxei64_v_i64m4_mu(vbool16_t mask,vint64m4_t merge,const int64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i64m4_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vluxei64_v_i64m8_mu(vbool8_t mask,vint64m8_t merge,const int64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i64m8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vluxei64_v_u8mf8_mu(vbool64_t mask,vuint8mf8_t merge,const uint8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u8mf8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vluxei64_v_u8mf4_mu(vbool32_t mask,vuint8mf4_t merge,const uint8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u8mf4_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vluxei64_v_u8mf2_mu(vbool16_t mask,vuint8mf2_t merge,const uint8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u8mf2_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vluxei64_v_u8m1_mu(vbool8_t mask,vuint8m1_t merge,const uint8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u8m1_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vluxei64_v_u16mf4_mu(vbool64_t mask,vuint16mf4_t merge,const uint16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u16mf4_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vluxei64_v_u16mf2_mu(vbool32_t mask,vuint16mf2_t merge,const uint16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u16mf2_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vluxei64_v_u16m1_mu(vbool16_t mask,vuint16m1_t merge,const uint16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u16m1_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vluxei64_v_u16m2_mu(vbool8_t mask,vuint16m2_t merge,const uint16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u16m2_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vluxei64_v_u32mf2_mu(vbool64_t mask,vuint32mf2_t merge,const uint32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u32mf2_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vluxei64_v_u32m1_mu(vbool32_t mask,vuint32m1_t merge,const uint32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u32m1_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vluxei64_v_u32m2_mu(vbool16_t mask,vuint32m2_t merge,const uint32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u32m2_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vluxei64_v_u32m4_mu(vbool8_t mask,vuint32m4_t merge,const uint32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u32m4_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vluxei64_v_u64m1_mu(vbool64_t mask,vuint64m1_t merge,const uint64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u64m1_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vluxei64_v_u64m2_mu(vbool32_t mask,vuint64m2_t merge,const uint64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u64m2_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vluxei64_v_u64m4_mu(vbool16_t mask,vuint64m4_t merge,const uint64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u64m4_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vluxei64_v_u64m8_mu(vbool8_t mask,vuint64m8_t merge,const uint64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u64m8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vluxei64_v_f32mf2_mu(vbool64_t mask,vfloat32mf2_t merge,const float* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f32mf2_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vluxei64_v_f32m1_mu(vbool32_t mask,vfloat32m1_t merge,const float* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f32m1_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vluxei64_v_f32m2_mu(vbool16_t mask,vfloat32m2_t merge,const float* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f32m2_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vluxei64_v_f32m4_mu(vbool8_t mask,vfloat32m4_t merge,const float* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f32m4_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vluxei64_v_f64m1_mu(vbool64_t mask,vfloat64m1_t merge,const double* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f64m1_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vluxei64_v_f64m2_mu(vbool32_t mask,vfloat64m2_t merge,const double* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f64m2_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vluxei64_v_f64m4_mu(vbool16_t mask,vfloat64m4_t merge,const double* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f64m4_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vluxei64_v_f64m8_mu(vbool8_t mask,vfloat64m8_t merge,const double* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f64m8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "c89e44569367fd973e8f8df570d6622a9f79b6fb", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vluxei64_v_mu-3.c", "status": "added", "additions": 262, "deletions": 0, "changes": 262, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd7265818081276d7bc4c104b4e6efbc8013211/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_v_mu-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd7265818081276d7bc4c104b4e6efbc8013211/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_v_mu-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_v_mu-3.c?ref=afd7265818081276d7bc4c104b4e6efbc8013211", "patch": "@@ -0,0 +1,262 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vluxei64_v_i8mf8_mu(vbool64_t mask,vint8mf8_t merge,const int8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i8mf8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vluxei64_v_i8mf4_mu(vbool32_t mask,vint8mf4_t merge,const int8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i8mf4_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vluxei64_v_i8mf2_mu(vbool16_t mask,vint8mf2_t merge,const int8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i8mf2_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vluxei64_v_i8m1_mu(vbool8_t mask,vint8m1_t merge,const int8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i8m1_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vluxei64_v_i16mf4_mu(vbool64_t mask,vint16mf4_t merge,const int16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i16mf4_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vluxei64_v_i16mf2_mu(vbool32_t mask,vint16mf2_t merge,const int16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i16mf2_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vluxei64_v_i16m1_mu(vbool16_t mask,vint16m1_t merge,const int16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i16m1_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vluxei64_v_i16m2_mu(vbool8_t mask,vint16m2_t merge,const int16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i16m2_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vluxei64_v_i32mf2_mu(vbool64_t mask,vint32mf2_t merge,const int32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i32mf2_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vluxei64_v_i32m1_mu(vbool32_t mask,vint32m1_t merge,const int32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i32m1_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vluxei64_v_i32m2_mu(vbool16_t mask,vint32m2_t merge,const int32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i32m2_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vluxei64_v_i32m4_mu(vbool8_t mask,vint32m4_t merge,const int32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i32m4_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vluxei64_v_i64m1_mu(vbool64_t mask,vint64m1_t merge,const int64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i64m1_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vluxei64_v_i64m2_mu(vbool32_t mask,vint64m2_t merge,const int64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i64m2_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vluxei64_v_i64m4_mu(vbool16_t mask,vint64m4_t merge,const int64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i64m4_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vluxei64_v_i64m8_mu(vbool8_t mask,vint64m8_t merge,const int64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i64m8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vluxei64_v_u8mf8_mu(vbool64_t mask,vuint8mf8_t merge,const uint8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u8mf8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vluxei64_v_u8mf4_mu(vbool32_t mask,vuint8mf4_t merge,const uint8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u8mf4_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vluxei64_v_u8mf2_mu(vbool16_t mask,vuint8mf2_t merge,const uint8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u8mf2_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vluxei64_v_u8m1_mu(vbool8_t mask,vuint8m1_t merge,const uint8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u8m1_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vluxei64_v_u16mf4_mu(vbool64_t mask,vuint16mf4_t merge,const uint16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u16mf4_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vluxei64_v_u16mf2_mu(vbool32_t mask,vuint16mf2_t merge,const uint16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u16mf2_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vluxei64_v_u16m1_mu(vbool16_t mask,vuint16m1_t merge,const uint16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u16m1_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vluxei64_v_u16m2_mu(vbool8_t mask,vuint16m2_t merge,const uint16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u16m2_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vluxei64_v_u32mf2_mu(vbool64_t mask,vuint32mf2_t merge,const uint32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u32mf2_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vluxei64_v_u32m1_mu(vbool32_t mask,vuint32m1_t merge,const uint32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u32m1_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vluxei64_v_u32m2_mu(vbool16_t mask,vuint32m2_t merge,const uint32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u32m2_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vluxei64_v_u32m4_mu(vbool8_t mask,vuint32m4_t merge,const uint32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u32m4_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vluxei64_v_u64m1_mu(vbool64_t mask,vuint64m1_t merge,const uint64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u64m1_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vluxei64_v_u64m2_mu(vbool32_t mask,vuint64m2_t merge,const uint64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u64m2_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vluxei64_v_u64m4_mu(vbool16_t mask,vuint64m4_t merge,const uint64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u64m4_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vluxei64_v_u64m8_mu(vbool8_t mask,vuint64m8_t merge,const uint64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u64m8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vluxei64_v_f32mf2_mu(vbool64_t mask,vfloat32mf2_t merge,const float* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f32mf2_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vluxei64_v_f32m1_mu(vbool32_t mask,vfloat32m1_t merge,const float* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f32m1_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vluxei64_v_f32m2_mu(vbool16_t mask,vfloat32m2_t merge,const float* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f32m2_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vluxei64_v_f32m4_mu(vbool8_t mask,vfloat32m4_t merge,const float* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f32m4_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vluxei64_v_f64m1_mu(vbool64_t mask,vfloat64m1_t merge,const double* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f64m1_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vluxei64_v_f64m2_mu(vbool32_t mask,vfloat64m2_t merge,const double* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f64m2_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vluxei64_v_f64m4_mu(vbool16_t mask,vfloat64m4_t merge,const double* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f64m4_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vluxei64_v_f64m8_mu(vbool8_t mask,vfloat64m8_t merge,const double* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f64m8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "8d612b389b601697b4274440d6f844528ce974f6", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vluxei64_v_tu-1.c", "status": "added", "additions": 262, "deletions": 0, "changes": 262, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd7265818081276d7bc4c104b4e6efbc8013211/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_v_tu-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd7265818081276d7bc4c104b4e6efbc8013211/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_v_tu-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_v_tu-1.c?ref=afd7265818081276d7bc4c104b4e6efbc8013211", "patch": "@@ -0,0 +1,262 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vluxei64_v_i8mf8_tu(vint8mf8_t merge,const int8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i8mf8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vluxei64_v_i8mf4_tu(vint8mf4_t merge,const int8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i8mf4_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vluxei64_v_i8mf2_tu(vint8mf2_t merge,const int8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i8mf2_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vluxei64_v_i8m1_tu(vint8m1_t merge,const int8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i8m1_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vluxei64_v_i16mf4_tu(vint16mf4_t merge,const int16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i16mf4_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vluxei64_v_i16mf2_tu(vint16mf2_t merge,const int16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i16mf2_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vluxei64_v_i16m1_tu(vint16m1_t merge,const int16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i16m1_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vluxei64_v_i16m2_tu(vint16m2_t merge,const int16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i16m2_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vluxei64_v_i32mf2_tu(vint32mf2_t merge,const int32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i32mf2_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vluxei64_v_i32m1_tu(vint32m1_t merge,const int32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i32m1_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vluxei64_v_i32m2_tu(vint32m2_t merge,const int32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i32m2_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vluxei64_v_i32m4_tu(vint32m4_t merge,const int32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i32m4_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vluxei64_v_i64m1_tu(vint64m1_t merge,const int64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i64m1_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vluxei64_v_i64m2_tu(vint64m2_t merge,const int64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i64m2_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vluxei64_v_i64m4_tu(vint64m4_t merge,const int64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i64m4_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vluxei64_v_i64m8_tu(vint64m8_t merge,const int64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i64m8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vluxei64_v_u8mf8_tu(vuint8mf8_t merge,const uint8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u8mf8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vluxei64_v_u8mf4_tu(vuint8mf4_t merge,const uint8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u8mf4_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vluxei64_v_u8mf2_tu(vuint8mf2_t merge,const uint8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u8mf2_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vluxei64_v_u8m1_tu(vuint8m1_t merge,const uint8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u8m1_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vluxei64_v_u16mf4_tu(vuint16mf4_t merge,const uint16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u16mf4_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vluxei64_v_u16mf2_tu(vuint16mf2_t merge,const uint16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u16mf2_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vluxei64_v_u16m1_tu(vuint16m1_t merge,const uint16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u16m1_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vluxei64_v_u16m2_tu(vuint16m2_t merge,const uint16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u16m2_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vluxei64_v_u32mf2_tu(vuint32mf2_t merge,const uint32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u32mf2_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vluxei64_v_u32m1_tu(vuint32m1_t merge,const uint32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u32m1_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vluxei64_v_u32m2_tu(vuint32m2_t merge,const uint32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u32m2_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vluxei64_v_u32m4_tu(vuint32m4_t merge,const uint32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u32m4_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vluxei64_v_u64m1_tu(vuint64m1_t merge,const uint64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u64m1_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vluxei64_v_u64m2_tu(vuint64m2_t merge,const uint64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u64m2_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vluxei64_v_u64m4_tu(vuint64m4_t merge,const uint64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u64m4_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vluxei64_v_u64m8_tu(vuint64m8_t merge,const uint64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u64m8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vluxei64_v_f32mf2_tu(vfloat32mf2_t merge,const float* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f32mf2_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vluxei64_v_f32m1_tu(vfloat32m1_t merge,const float* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f32m1_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vluxei64_v_f32m2_tu(vfloat32m2_t merge,const float* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f32m2_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vluxei64_v_f32m4_tu(vfloat32m4_t merge,const float* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f32m4_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vluxei64_v_f64m1_tu(vfloat64m1_t merge,const double* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f64m1_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vluxei64_v_f64m2_tu(vfloat64m2_t merge,const double* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f64m2_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vluxei64_v_f64m4_tu(vfloat64m4_t merge,const double* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f64m4_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vluxei64_v_f64m8_tu(vfloat64m8_t merge,const double* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f64m8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */"}, {"sha": "f99769fff30109c10f2d93579f0edbb463392245", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vluxei64_v_tu-2.c", "status": "added", "additions": 262, "deletions": 0, "changes": 262, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd7265818081276d7bc4c104b4e6efbc8013211/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_v_tu-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd7265818081276d7bc4c104b4e6efbc8013211/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_v_tu-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_v_tu-2.c?ref=afd7265818081276d7bc4c104b4e6efbc8013211", "patch": "@@ -0,0 +1,262 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vluxei64_v_i8mf8_tu(vint8mf8_t merge,const int8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i8mf8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vluxei64_v_i8mf4_tu(vint8mf4_t merge,const int8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i8mf4_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vluxei64_v_i8mf2_tu(vint8mf2_t merge,const int8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i8mf2_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vluxei64_v_i8m1_tu(vint8m1_t merge,const int8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i8m1_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vluxei64_v_i16mf4_tu(vint16mf4_t merge,const int16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i16mf4_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vluxei64_v_i16mf2_tu(vint16mf2_t merge,const int16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i16mf2_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vluxei64_v_i16m1_tu(vint16m1_t merge,const int16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i16m1_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vluxei64_v_i16m2_tu(vint16m2_t merge,const int16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i16m2_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vluxei64_v_i32mf2_tu(vint32mf2_t merge,const int32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i32mf2_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vluxei64_v_i32m1_tu(vint32m1_t merge,const int32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i32m1_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vluxei64_v_i32m2_tu(vint32m2_t merge,const int32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i32m2_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vluxei64_v_i32m4_tu(vint32m4_t merge,const int32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i32m4_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vluxei64_v_i64m1_tu(vint64m1_t merge,const int64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i64m1_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vluxei64_v_i64m2_tu(vint64m2_t merge,const int64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i64m2_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vluxei64_v_i64m4_tu(vint64m4_t merge,const int64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i64m4_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vluxei64_v_i64m8_tu(vint64m8_t merge,const int64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i64m8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vluxei64_v_u8mf8_tu(vuint8mf8_t merge,const uint8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u8mf8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vluxei64_v_u8mf4_tu(vuint8mf4_t merge,const uint8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u8mf4_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vluxei64_v_u8mf2_tu(vuint8mf2_t merge,const uint8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u8mf2_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vluxei64_v_u8m1_tu(vuint8m1_t merge,const uint8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u8m1_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vluxei64_v_u16mf4_tu(vuint16mf4_t merge,const uint16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u16mf4_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vluxei64_v_u16mf2_tu(vuint16mf2_t merge,const uint16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u16mf2_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vluxei64_v_u16m1_tu(vuint16m1_t merge,const uint16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u16m1_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vluxei64_v_u16m2_tu(vuint16m2_t merge,const uint16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u16m2_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vluxei64_v_u32mf2_tu(vuint32mf2_t merge,const uint32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u32mf2_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vluxei64_v_u32m1_tu(vuint32m1_t merge,const uint32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u32m1_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vluxei64_v_u32m2_tu(vuint32m2_t merge,const uint32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u32m2_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vluxei64_v_u32m4_tu(vuint32m4_t merge,const uint32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u32m4_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vluxei64_v_u64m1_tu(vuint64m1_t merge,const uint64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u64m1_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vluxei64_v_u64m2_tu(vuint64m2_t merge,const uint64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u64m2_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vluxei64_v_u64m4_tu(vuint64m4_t merge,const uint64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u64m4_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vluxei64_v_u64m8_tu(vuint64m8_t merge,const uint64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u64m8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vluxei64_v_f32mf2_tu(vfloat32mf2_t merge,const float* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f32mf2_tu(merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vluxei64_v_f32m1_tu(vfloat32m1_t merge,const float* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f32m1_tu(merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vluxei64_v_f32m2_tu(vfloat32m2_t merge,const float* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f32m2_tu(merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vluxei64_v_f32m4_tu(vfloat32m4_t merge,const float* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f32m4_tu(merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vluxei64_v_f64m1_tu(vfloat64m1_t merge,const double* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f64m1_tu(merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vluxei64_v_f64m2_tu(vfloat64m2_t merge,const double* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f64m2_tu(merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vluxei64_v_f64m4_tu(vfloat64m4_t merge,const double* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f64m4_tu(merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vluxei64_v_f64m8_tu(vfloat64m8_t merge,const double* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f64m8_tu(merge,base,bindex,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */"}, {"sha": "71ab18193604478e23d30820ff2ffeb6aafb5cdd", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vluxei64_v_tu-3.c", "status": "added", "additions": 262, "deletions": 0, "changes": 262, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd7265818081276d7bc4c104b4e6efbc8013211/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_v_tu-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd7265818081276d7bc4c104b4e6efbc8013211/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_v_tu-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_v_tu-3.c?ref=afd7265818081276d7bc4c104b4e6efbc8013211", "patch": "@@ -0,0 +1,262 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vluxei64_v_i8mf8_tu(vint8mf8_t merge,const int8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i8mf8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vluxei64_v_i8mf4_tu(vint8mf4_t merge,const int8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i8mf4_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vluxei64_v_i8mf2_tu(vint8mf2_t merge,const int8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i8mf2_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vluxei64_v_i8m1_tu(vint8m1_t merge,const int8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i8m1_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vluxei64_v_i16mf4_tu(vint16mf4_t merge,const int16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i16mf4_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vluxei64_v_i16mf2_tu(vint16mf2_t merge,const int16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i16mf2_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vluxei64_v_i16m1_tu(vint16m1_t merge,const int16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i16m1_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vluxei64_v_i16m2_tu(vint16m2_t merge,const int16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i16m2_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vluxei64_v_i32mf2_tu(vint32mf2_t merge,const int32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i32mf2_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vluxei64_v_i32m1_tu(vint32m1_t merge,const int32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i32m1_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vluxei64_v_i32m2_tu(vint32m2_t merge,const int32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i32m2_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vluxei64_v_i32m4_tu(vint32m4_t merge,const int32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i32m4_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vluxei64_v_i64m1_tu(vint64m1_t merge,const int64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i64m1_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vluxei64_v_i64m2_tu(vint64m2_t merge,const int64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i64m2_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vluxei64_v_i64m4_tu(vint64m4_t merge,const int64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i64m4_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vluxei64_v_i64m8_tu(vint64m8_t merge,const int64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i64m8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vluxei64_v_u8mf8_tu(vuint8mf8_t merge,const uint8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u8mf8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vluxei64_v_u8mf4_tu(vuint8mf4_t merge,const uint8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u8mf4_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vluxei64_v_u8mf2_tu(vuint8mf2_t merge,const uint8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u8mf2_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vluxei64_v_u8m1_tu(vuint8m1_t merge,const uint8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u8m1_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vluxei64_v_u16mf4_tu(vuint16mf4_t merge,const uint16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u16mf4_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vluxei64_v_u16mf2_tu(vuint16mf2_t merge,const uint16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u16mf2_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vluxei64_v_u16m1_tu(vuint16m1_t merge,const uint16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u16m1_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vluxei64_v_u16m2_tu(vuint16m2_t merge,const uint16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u16m2_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vluxei64_v_u32mf2_tu(vuint32mf2_t merge,const uint32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u32mf2_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vluxei64_v_u32m1_tu(vuint32m1_t merge,const uint32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u32m1_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vluxei64_v_u32m2_tu(vuint32m2_t merge,const uint32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u32m2_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vluxei64_v_u32m4_tu(vuint32m4_t merge,const uint32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u32m4_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vluxei64_v_u64m1_tu(vuint64m1_t merge,const uint64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u64m1_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vluxei64_v_u64m2_tu(vuint64m2_t merge,const uint64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u64m2_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vluxei64_v_u64m4_tu(vuint64m4_t merge,const uint64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u64m4_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vluxei64_v_u64m8_tu(vuint64m8_t merge,const uint64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u64m8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vluxei64_v_f32mf2_tu(vfloat32mf2_t merge,const float* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f32mf2_tu(merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vluxei64_v_f32m1_tu(vfloat32m1_t merge,const float* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f32m1_tu(merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vluxei64_v_f32m2_tu(vfloat32m2_t merge,const float* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f32m2_tu(merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vluxei64_v_f32m4_tu(vfloat32m4_t merge,const float* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f32m4_tu(merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vluxei64_v_f64m1_tu(vfloat64m1_t merge,const double* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f64m1_tu(merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vluxei64_v_f64m2_tu(vfloat64m2_t merge,const double* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f64m2_tu(merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vluxei64_v_f64m4_tu(vfloat64m4_t merge,const double* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f64m4_tu(merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vluxei64_v_f64m8_tu(vfloat64m8_t merge,const double* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f64m8_tu(merge,base,bindex,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+} 3 } } */"}, {"sha": "f57d5f3cab2a65ae6d03029c3088bb1ce4d7df8a", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vluxei64_v_tum-1.c", "status": "added", "additions": 262, "deletions": 0, "changes": 262, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd7265818081276d7bc4c104b4e6efbc8013211/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_v_tum-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd7265818081276d7bc4c104b4e6efbc8013211/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_v_tum-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_v_tum-1.c?ref=afd7265818081276d7bc4c104b4e6efbc8013211", "patch": "@@ -0,0 +1,262 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vluxei64_v_i8mf8_tum(vbool64_t mask,vint8mf8_t merge,const int8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i8mf8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vluxei64_v_i8mf4_tum(vbool32_t mask,vint8mf4_t merge,const int8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i8mf4_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vluxei64_v_i8mf2_tum(vbool16_t mask,vint8mf2_t merge,const int8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i8mf2_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vluxei64_v_i8m1_tum(vbool8_t mask,vint8m1_t merge,const int8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i8m1_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vluxei64_v_i16mf4_tum(vbool64_t mask,vint16mf4_t merge,const int16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i16mf4_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vluxei64_v_i16mf2_tum(vbool32_t mask,vint16mf2_t merge,const int16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i16mf2_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vluxei64_v_i16m1_tum(vbool16_t mask,vint16m1_t merge,const int16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i16m1_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vluxei64_v_i16m2_tum(vbool8_t mask,vint16m2_t merge,const int16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i16m2_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vluxei64_v_i32mf2_tum(vbool64_t mask,vint32mf2_t merge,const int32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i32mf2_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vluxei64_v_i32m1_tum(vbool32_t mask,vint32m1_t merge,const int32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i32m1_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vluxei64_v_i32m2_tum(vbool16_t mask,vint32m2_t merge,const int32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i32m2_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vluxei64_v_i32m4_tum(vbool8_t mask,vint32m4_t merge,const int32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i32m4_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vluxei64_v_i64m1_tum(vbool64_t mask,vint64m1_t merge,const int64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i64m1_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vluxei64_v_i64m2_tum(vbool32_t mask,vint64m2_t merge,const int64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i64m2_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vluxei64_v_i64m4_tum(vbool16_t mask,vint64m4_t merge,const int64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i64m4_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vluxei64_v_i64m8_tum(vbool8_t mask,vint64m8_t merge,const int64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i64m8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vluxei64_v_u8mf8_tum(vbool64_t mask,vuint8mf8_t merge,const uint8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u8mf8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vluxei64_v_u8mf4_tum(vbool32_t mask,vuint8mf4_t merge,const uint8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u8mf4_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vluxei64_v_u8mf2_tum(vbool16_t mask,vuint8mf2_t merge,const uint8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u8mf2_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vluxei64_v_u8m1_tum(vbool8_t mask,vuint8m1_t merge,const uint8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u8m1_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vluxei64_v_u16mf4_tum(vbool64_t mask,vuint16mf4_t merge,const uint16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u16mf4_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vluxei64_v_u16mf2_tum(vbool32_t mask,vuint16mf2_t merge,const uint16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u16mf2_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vluxei64_v_u16m1_tum(vbool16_t mask,vuint16m1_t merge,const uint16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u16m1_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vluxei64_v_u16m2_tum(vbool8_t mask,vuint16m2_t merge,const uint16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u16m2_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vluxei64_v_u32mf2_tum(vbool64_t mask,vuint32mf2_t merge,const uint32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u32mf2_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vluxei64_v_u32m1_tum(vbool32_t mask,vuint32m1_t merge,const uint32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u32m1_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vluxei64_v_u32m2_tum(vbool16_t mask,vuint32m2_t merge,const uint32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u32m2_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vluxei64_v_u32m4_tum(vbool8_t mask,vuint32m4_t merge,const uint32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u32m4_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vluxei64_v_u64m1_tum(vbool64_t mask,vuint64m1_t merge,const uint64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u64m1_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vluxei64_v_u64m2_tum(vbool32_t mask,vuint64m2_t merge,const uint64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u64m2_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vluxei64_v_u64m4_tum(vbool16_t mask,vuint64m4_t merge,const uint64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u64m4_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vluxei64_v_u64m8_tum(vbool8_t mask,vuint64m8_t merge,const uint64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u64m8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vluxei64_v_f32mf2_tum(vbool64_t mask,vfloat32mf2_t merge,const float* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f32mf2_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vluxei64_v_f32m1_tum(vbool32_t mask,vfloat32m1_t merge,const float* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f32m1_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vluxei64_v_f32m2_tum(vbool16_t mask,vfloat32m2_t merge,const float* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f32m2_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vluxei64_v_f32m4_tum(vbool8_t mask,vfloat32m4_t merge,const float* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f32m4_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vluxei64_v_f64m1_tum(vbool64_t mask,vfloat64m1_t merge,const double* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f64m1_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vluxei64_v_f64m2_tum(vbool32_t mask,vfloat64m2_t merge,const double* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f64m2_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vluxei64_v_f64m4_tum(vbool16_t mask,vfloat64m4_t merge,const double* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f64m4_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vluxei64_v_f64m8_tum(vbool8_t mask,vfloat64m8_t merge,const double* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f64m8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "a69943d9073aae93774742218518d4b3e1ffd37d", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vluxei64_v_tum-2.c", "status": "added", "additions": 262, "deletions": 0, "changes": 262, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd7265818081276d7bc4c104b4e6efbc8013211/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_v_tum-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd7265818081276d7bc4c104b4e6efbc8013211/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_v_tum-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_v_tum-2.c?ref=afd7265818081276d7bc4c104b4e6efbc8013211", "patch": "@@ -0,0 +1,262 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vluxei64_v_i8mf8_tum(vbool64_t mask,vint8mf8_t merge,const int8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i8mf8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vluxei64_v_i8mf4_tum(vbool32_t mask,vint8mf4_t merge,const int8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i8mf4_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vluxei64_v_i8mf2_tum(vbool16_t mask,vint8mf2_t merge,const int8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i8mf2_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vluxei64_v_i8m1_tum(vbool8_t mask,vint8m1_t merge,const int8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i8m1_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vluxei64_v_i16mf4_tum(vbool64_t mask,vint16mf4_t merge,const int16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i16mf4_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vluxei64_v_i16mf2_tum(vbool32_t mask,vint16mf2_t merge,const int16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i16mf2_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vluxei64_v_i16m1_tum(vbool16_t mask,vint16m1_t merge,const int16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i16m1_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vluxei64_v_i16m2_tum(vbool8_t mask,vint16m2_t merge,const int16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i16m2_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vluxei64_v_i32mf2_tum(vbool64_t mask,vint32mf2_t merge,const int32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i32mf2_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vluxei64_v_i32m1_tum(vbool32_t mask,vint32m1_t merge,const int32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i32m1_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vluxei64_v_i32m2_tum(vbool16_t mask,vint32m2_t merge,const int32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i32m2_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vluxei64_v_i32m4_tum(vbool8_t mask,vint32m4_t merge,const int32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i32m4_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vluxei64_v_i64m1_tum(vbool64_t mask,vint64m1_t merge,const int64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i64m1_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vluxei64_v_i64m2_tum(vbool32_t mask,vint64m2_t merge,const int64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i64m2_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vluxei64_v_i64m4_tum(vbool16_t mask,vint64m4_t merge,const int64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i64m4_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vluxei64_v_i64m8_tum(vbool8_t mask,vint64m8_t merge,const int64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i64m8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vluxei64_v_u8mf8_tum(vbool64_t mask,vuint8mf8_t merge,const uint8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u8mf8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vluxei64_v_u8mf4_tum(vbool32_t mask,vuint8mf4_t merge,const uint8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u8mf4_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vluxei64_v_u8mf2_tum(vbool16_t mask,vuint8mf2_t merge,const uint8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u8mf2_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vluxei64_v_u8m1_tum(vbool8_t mask,vuint8m1_t merge,const uint8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u8m1_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vluxei64_v_u16mf4_tum(vbool64_t mask,vuint16mf4_t merge,const uint16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u16mf4_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vluxei64_v_u16mf2_tum(vbool32_t mask,vuint16mf2_t merge,const uint16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u16mf2_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vluxei64_v_u16m1_tum(vbool16_t mask,vuint16m1_t merge,const uint16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u16m1_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vluxei64_v_u16m2_tum(vbool8_t mask,vuint16m2_t merge,const uint16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u16m2_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vluxei64_v_u32mf2_tum(vbool64_t mask,vuint32mf2_t merge,const uint32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u32mf2_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vluxei64_v_u32m1_tum(vbool32_t mask,vuint32m1_t merge,const uint32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u32m1_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vluxei64_v_u32m2_tum(vbool16_t mask,vuint32m2_t merge,const uint32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u32m2_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vluxei64_v_u32m4_tum(vbool8_t mask,vuint32m4_t merge,const uint32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u32m4_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vluxei64_v_u64m1_tum(vbool64_t mask,vuint64m1_t merge,const uint64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u64m1_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vluxei64_v_u64m2_tum(vbool32_t mask,vuint64m2_t merge,const uint64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u64m2_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vluxei64_v_u64m4_tum(vbool16_t mask,vuint64m4_t merge,const uint64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u64m4_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vluxei64_v_u64m8_tum(vbool8_t mask,vuint64m8_t merge,const uint64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u64m8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vluxei64_v_f32mf2_tum(vbool64_t mask,vfloat32mf2_t merge,const float* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f32mf2_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vluxei64_v_f32m1_tum(vbool32_t mask,vfloat32m1_t merge,const float* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f32m1_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vluxei64_v_f32m2_tum(vbool16_t mask,vfloat32m2_t merge,const float* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f32m2_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vluxei64_v_f32m4_tum(vbool8_t mask,vfloat32m4_t merge,const float* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f32m4_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vluxei64_v_f64m1_tum(vbool64_t mask,vfloat64m1_t merge,const double* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f64m1_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vluxei64_v_f64m2_tum(vbool32_t mask,vfloat64m2_t merge,const double* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f64m2_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vluxei64_v_f64m4_tum(vbool16_t mask,vfloat64m4_t merge,const double* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f64m4_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vluxei64_v_f64m8_tum(vbool8_t mask,vfloat64m8_t merge,const double* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f64m8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "f58b39b319260ef90ccc7c73ae38675aa6b11c81", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vluxei64_v_tum-3.c", "status": "added", "additions": 262, "deletions": 0, "changes": 262, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd7265818081276d7bc4c104b4e6efbc8013211/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_v_tum-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd7265818081276d7bc4c104b4e6efbc8013211/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_v_tum-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_v_tum-3.c?ref=afd7265818081276d7bc4c104b4e6efbc8013211", "patch": "@@ -0,0 +1,262 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vluxei64_v_i8mf8_tum(vbool64_t mask,vint8mf8_t merge,const int8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i8mf8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vluxei64_v_i8mf4_tum(vbool32_t mask,vint8mf4_t merge,const int8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i8mf4_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vluxei64_v_i8mf2_tum(vbool16_t mask,vint8mf2_t merge,const int8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i8mf2_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vluxei64_v_i8m1_tum(vbool8_t mask,vint8m1_t merge,const int8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i8m1_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vluxei64_v_i16mf4_tum(vbool64_t mask,vint16mf4_t merge,const int16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i16mf4_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vluxei64_v_i16mf2_tum(vbool32_t mask,vint16mf2_t merge,const int16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i16mf2_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vluxei64_v_i16m1_tum(vbool16_t mask,vint16m1_t merge,const int16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i16m1_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vluxei64_v_i16m2_tum(vbool8_t mask,vint16m2_t merge,const int16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i16m2_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vluxei64_v_i32mf2_tum(vbool64_t mask,vint32mf2_t merge,const int32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i32mf2_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vluxei64_v_i32m1_tum(vbool32_t mask,vint32m1_t merge,const int32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i32m1_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vluxei64_v_i32m2_tum(vbool16_t mask,vint32m2_t merge,const int32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i32m2_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vluxei64_v_i32m4_tum(vbool8_t mask,vint32m4_t merge,const int32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i32m4_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vluxei64_v_i64m1_tum(vbool64_t mask,vint64m1_t merge,const int64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i64m1_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vluxei64_v_i64m2_tum(vbool32_t mask,vint64m2_t merge,const int64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i64m2_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vluxei64_v_i64m4_tum(vbool16_t mask,vint64m4_t merge,const int64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i64m4_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vluxei64_v_i64m8_tum(vbool8_t mask,vint64m8_t merge,const int64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i64m8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vluxei64_v_u8mf8_tum(vbool64_t mask,vuint8mf8_t merge,const uint8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u8mf8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vluxei64_v_u8mf4_tum(vbool32_t mask,vuint8mf4_t merge,const uint8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u8mf4_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vluxei64_v_u8mf2_tum(vbool16_t mask,vuint8mf2_t merge,const uint8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u8mf2_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vluxei64_v_u8m1_tum(vbool8_t mask,vuint8m1_t merge,const uint8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u8m1_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vluxei64_v_u16mf4_tum(vbool64_t mask,vuint16mf4_t merge,const uint16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u16mf4_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vluxei64_v_u16mf2_tum(vbool32_t mask,vuint16mf2_t merge,const uint16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u16mf2_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vluxei64_v_u16m1_tum(vbool16_t mask,vuint16m1_t merge,const uint16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u16m1_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vluxei64_v_u16m2_tum(vbool8_t mask,vuint16m2_t merge,const uint16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u16m2_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vluxei64_v_u32mf2_tum(vbool64_t mask,vuint32mf2_t merge,const uint32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u32mf2_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vluxei64_v_u32m1_tum(vbool32_t mask,vuint32m1_t merge,const uint32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u32m1_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vluxei64_v_u32m2_tum(vbool16_t mask,vuint32m2_t merge,const uint32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u32m2_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vluxei64_v_u32m4_tum(vbool8_t mask,vuint32m4_t merge,const uint32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u32m4_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vluxei64_v_u64m1_tum(vbool64_t mask,vuint64m1_t merge,const uint64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u64m1_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vluxei64_v_u64m2_tum(vbool32_t mask,vuint64m2_t merge,const uint64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u64m2_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vluxei64_v_u64m4_tum(vbool16_t mask,vuint64m4_t merge,const uint64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u64m4_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vluxei64_v_u64m8_tum(vbool8_t mask,vuint64m8_t merge,const uint64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u64m8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vluxei64_v_f32mf2_tum(vbool64_t mask,vfloat32mf2_t merge,const float* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f32mf2_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vluxei64_v_f32m1_tum(vbool32_t mask,vfloat32m1_t merge,const float* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f32m1_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vluxei64_v_f32m2_tum(vbool16_t mask,vfloat32m2_t merge,const float* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f32m2_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vluxei64_v_f32m4_tum(vbool8_t mask,vfloat32m4_t merge,const float* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f32m4_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vluxei64_v_f64m1_tum(vbool64_t mask,vfloat64m1_t merge,const double* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f64m1_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vluxei64_v_f64m2_tum(vbool32_t mask,vfloat64m2_t merge,const double* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f64m2_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vluxei64_v_f64m4_tum(vbool16_t mask,vfloat64m4_t merge,const double* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f64m4_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vluxei64_v_f64m8_tum(vbool8_t mask,vfloat64m8_t merge,const double* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f64m8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "a0929b68085fc2b8e2e0d0c007178fe6e9593af1", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vluxei64_v_tumu-1.c", "status": "added", "additions": 262, "deletions": 0, "changes": 262, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd7265818081276d7bc4c104b4e6efbc8013211/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_v_tumu-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd7265818081276d7bc4c104b4e6efbc8013211/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_v_tumu-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_v_tumu-1.c?ref=afd7265818081276d7bc4c104b4e6efbc8013211", "patch": "@@ -0,0 +1,262 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vluxei64_v_i8mf8_tumu(vbool64_t mask,vint8mf8_t merge,const int8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i8mf8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vluxei64_v_i8mf4_tumu(vbool32_t mask,vint8mf4_t merge,const int8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i8mf4_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vluxei64_v_i8mf2_tumu(vbool16_t mask,vint8mf2_t merge,const int8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i8mf2_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vluxei64_v_i8m1_tumu(vbool8_t mask,vint8m1_t merge,const int8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i8m1_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vluxei64_v_i16mf4_tumu(vbool64_t mask,vint16mf4_t merge,const int16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i16mf4_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vluxei64_v_i16mf2_tumu(vbool32_t mask,vint16mf2_t merge,const int16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i16mf2_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vluxei64_v_i16m1_tumu(vbool16_t mask,vint16m1_t merge,const int16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i16m1_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vluxei64_v_i16m2_tumu(vbool8_t mask,vint16m2_t merge,const int16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i16m2_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vluxei64_v_i32mf2_tumu(vbool64_t mask,vint32mf2_t merge,const int32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i32mf2_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vluxei64_v_i32m1_tumu(vbool32_t mask,vint32m1_t merge,const int32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i32m1_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vluxei64_v_i32m2_tumu(vbool16_t mask,vint32m2_t merge,const int32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i32m2_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vluxei64_v_i32m4_tumu(vbool8_t mask,vint32m4_t merge,const int32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i32m4_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vluxei64_v_i64m1_tumu(vbool64_t mask,vint64m1_t merge,const int64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i64m1_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vluxei64_v_i64m2_tumu(vbool32_t mask,vint64m2_t merge,const int64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i64m2_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vluxei64_v_i64m4_tumu(vbool16_t mask,vint64m4_t merge,const int64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i64m4_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vluxei64_v_i64m8_tumu(vbool8_t mask,vint64m8_t merge,const int64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i64m8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vluxei64_v_u8mf8_tumu(vbool64_t mask,vuint8mf8_t merge,const uint8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u8mf8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vluxei64_v_u8mf4_tumu(vbool32_t mask,vuint8mf4_t merge,const uint8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u8mf4_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vluxei64_v_u8mf2_tumu(vbool16_t mask,vuint8mf2_t merge,const uint8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u8mf2_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vluxei64_v_u8m1_tumu(vbool8_t mask,vuint8m1_t merge,const uint8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u8m1_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vluxei64_v_u16mf4_tumu(vbool64_t mask,vuint16mf4_t merge,const uint16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u16mf4_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vluxei64_v_u16mf2_tumu(vbool32_t mask,vuint16mf2_t merge,const uint16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u16mf2_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vluxei64_v_u16m1_tumu(vbool16_t mask,vuint16m1_t merge,const uint16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u16m1_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vluxei64_v_u16m2_tumu(vbool8_t mask,vuint16m2_t merge,const uint16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u16m2_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vluxei64_v_u32mf2_tumu(vbool64_t mask,vuint32mf2_t merge,const uint32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u32mf2_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vluxei64_v_u32m1_tumu(vbool32_t mask,vuint32m1_t merge,const uint32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u32m1_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vluxei64_v_u32m2_tumu(vbool16_t mask,vuint32m2_t merge,const uint32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u32m2_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vluxei64_v_u32m4_tumu(vbool8_t mask,vuint32m4_t merge,const uint32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u32m4_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vluxei64_v_u64m1_tumu(vbool64_t mask,vuint64m1_t merge,const uint64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u64m1_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vluxei64_v_u64m2_tumu(vbool32_t mask,vuint64m2_t merge,const uint64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u64m2_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vluxei64_v_u64m4_tumu(vbool16_t mask,vuint64m4_t merge,const uint64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u64m4_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vluxei64_v_u64m8_tumu(vbool8_t mask,vuint64m8_t merge,const uint64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u64m8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vluxei64_v_f32mf2_tumu(vbool64_t mask,vfloat32mf2_t merge,const float* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f32mf2_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vluxei64_v_f32m1_tumu(vbool32_t mask,vfloat32m1_t merge,const float* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f32m1_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vluxei64_v_f32m2_tumu(vbool16_t mask,vfloat32m2_t merge,const float* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f32m2_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vluxei64_v_f32m4_tumu(vbool8_t mask,vfloat32m4_t merge,const float* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f32m4_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vluxei64_v_f64m1_tumu(vbool64_t mask,vfloat64m1_t merge,const double* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f64m1_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vluxei64_v_f64m2_tumu(vbool32_t mask,vfloat64m2_t merge,const double* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f64m2_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vluxei64_v_f64m4_tumu(vbool16_t mask,vfloat64m4_t merge,const double* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f64m4_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vluxei64_v_f64m8_tumu(vbool8_t mask,vfloat64m8_t merge,const double* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f64m8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "13cd2c4b99aced7fe32ec35011f723d9ed0b9508", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vluxei64_v_tumu-2.c", "status": "added", "additions": 262, "deletions": 0, "changes": 262, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd7265818081276d7bc4c104b4e6efbc8013211/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_v_tumu-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd7265818081276d7bc4c104b4e6efbc8013211/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_v_tumu-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_v_tumu-2.c?ref=afd7265818081276d7bc4c104b4e6efbc8013211", "patch": "@@ -0,0 +1,262 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vluxei64_v_i8mf8_tumu(vbool64_t mask,vint8mf8_t merge,const int8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i8mf8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vluxei64_v_i8mf4_tumu(vbool32_t mask,vint8mf4_t merge,const int8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i8mf4_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vluxei64_v_i8mf2_tumu(vbool16_t mask,vint8mf2_t merge,const int8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i8mf2_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vluxei64_v_i8m1_tumu(vbool8_t mask,vint8m1_t merge,const int8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i8m1_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vluxei64_v_i16mf4_tumu(vbool64_t mask,vint16mf4_t merge,const int16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i16mf4_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vluxei64_v_i16mf2_tumu(vbool32_t mask,vint16mf2_t merge,const int16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i16mf2_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vluxei64_v_i16m1_tumu(vbool16_t mask,vint16m1_t merge,const int16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i16m1_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vluxei64_v_i16m2_tumu(vbool8_t mask,vint16m2_t merge,const int16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i16m2_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vluxei64_v_i32mf2_tumu(vbool64_t mask,vint32mf2_t merge,const int32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i32mf2_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vluxei64_v_i32m1_tumu(vbool32_t mask,vint32m1_t merge,const int32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i32m1_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vluxei64_v_i32m2_tumu(vbool16_t mask,vint32m2_t merge,const int32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i32m2_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vluxei64_v_i32m4_tumu(vbool8_t mask,vint32m4_t merge,const int32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i32m4_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vluxei64_v_i64m1_tumu(vbool64_t mask,vint64m1_t merge,const int64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i64m1_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vluxei64_v_i64m2_tumu(vbool32_t mask,vint64m2_t merge,const int64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i64m2_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vluxei64_v_i64m4_tumu(vbool16_t mask,vint64m4_t merge,const int64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i64m4_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vluxei64_v_i64m8_tumu(vbool8_t mask,vint64m8_t merge,const int64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i64m8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vluxei64_v_u8mf8_tumu(vbool64_t mask,vuint8mf8_t merge,const uint8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u8mf8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vluxei64_v_u8mf4_tumu(vbool32_t mask,vuint8mf4_t merge,const uint8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u8mf4_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vluxei64_v_u8mf2_tumu(vbool16_t mask,vuint8mf2_t merge,const uint8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u8mf2_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vluxei64_v_u8m1_tumu(vbool8_t mask,vuint8m1_t merge,const uint8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u8m1_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vluxei64_v_u16mf4_tumu(vbool64_t mask,vuint16mf4_t merge,const uint16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u16mf4_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vluxei64_v_u16mf2_tumu(vbool32_t mask,vuint16mf2_t merge,const uint16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u16mf2_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vluxei64_v_u16m1_tumu(vbool16_t mask,vuint16m1_t merge,const uint16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u16m1_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vluxei64_v_u16m2_tumu(vbool8_t mask,vuint16m2_t merge,const uint16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u16m2_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vluxei64_v_u32mf2_tumu(vbool64_t mask,vuint32mf2_t merge,const uint32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u32mf2_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vluxei64_v_u32m1_tumu(vbool32_t mask,vuint32m1_t merge,const uint32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u32m1_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vluxei64_v_u32m2_tumu(vbool16_t mask,vuint32m2_t merge,const uint32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u32m2_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vluxei64_v_u32m4_tumu(vbool8_t mask,vuint32m4_t merge,const uint32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u32m4_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vluxei64_v_u64m1_tumu(vbool64_t mask,vuint64m1_t merge,const uint64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u64m1_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vluxei64_v_u64m2_tumu(vbool32_t mask,vuint64m2_t merge,const uint64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u64m2_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vluxei64_v_u64m4_tumu(vbool16_t mask,vuint64m4_t merge,const uint64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u64m4_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vluxei64_v_u64m8_tumu(vbool8_t mask,vuint64m8_t merge,const uint64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u64m8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vluxei64_v_f32mf2_tumu(vbool64_t mask,vfloat32mf2_t merge,const float* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f32mf2_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vluxei64_v_f32m1_tumu(vbool32_t mask,vfloat32m1_t merge,const float* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f32m1_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vluxei64_v_f32m2_tumu(vbool16_t mask,vfloat32m2_t merge,const float* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f32m2_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vluxei64_v_f32m4_tumu(vbool8_t mask,vfloat32m4_t merge,const float* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f32m4_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vluxei64_v_f64m1_tumu(vbool64_t mask,vfloat64m1_t merge,const double* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f64m1_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vluxei64_v_f64m2_tumu(vbool32_t mask,vfloat64m2_t merge,const double* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f64m2_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vluxei64_v_f64m4_tumu(vbool16_t mask,vfloat64m4_t merge,const double* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f64m4_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vluxei64_v_f64m8_tumu(vbool8_t mask,vfloat64m8_t merge,const double* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f64m8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "1bc62155ecc93dc165879f963471a58f05f79727", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vluxei64_v_tumu-3.c", "status": "added", "additions": 262, "deletions": 0, "changes": 262, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd7265818081276d7bc4c104b4e6efbc8013211/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_v_tumu-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd7265818081276d7bc4c104b4e6efbc8013211/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_v_tumu-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvluxei64_v_tumu-3.c?ref=afd7265818081276d7bc4c104b4e6efbc8013211", "patch": "@@ -0,0 +1,262 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vluxei64_v_i8mf8_tumu(vbool64_t mask,vint8mf8_t merge,const int8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i8mf8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vluxei64_v_i8mf4_tumu(vbool32_t mask,vint8mf4_t merge,const int8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i8mf4_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vluxei64_v_i8mf2_tumu(vbool16_t mask,vint8mf2_t merge,const int8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i8mf2_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vluxei64_v_i8m1_tumu(vbool8_t mask,vint8m1_t merge,const int8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i8m1_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vluxei64_v_i16mf4_tumu(vbool64_t mask,vint16mf4_t merge,const int16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i16mf4_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vluxei64_v_i16mf2_tumu(vbool32_t mask,vint16mf2_t merge,const int16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i16mf2_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vluxei64_v_i16m1_tumu(vbool16_t mask,vint16m1_t merge,const int16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i16m1_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vluxei64_v_i16m2_tumu(vbool8_t mask,vint16m2_t merge,const int16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i16m2_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vluxei64_v_i32mf2_tumu(vbool64_t mask,vint32mf2_t merge,const int32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i32mf2_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vluxei64_v_i32m1_tumu(vbool32_t mask,vint32m1_t merge,const int32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i32m1_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vluxei64_v_i32m2_tumu(vbool16_t mask,vint32m2_t merge,const int32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i32m2_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vluxei64_v_i32m4_tumu(vbool8_t mask,vint32m4_t merge,const int32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i32m4_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vluxei64_v_i64m1_tumu(vbool64_t mask,vint64m1_t merge,const int64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i64m1_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vluxei64_v_i64m2_tumu(vbool32_t mask,vint64m2_t merge,const int64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i64m2_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vluxei64_v_i64m4_tumu(vbool16_t mask,vint64m4_t merge,const int64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i64m4_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vluxei64_v_i64m8_tumu(vbool8_t mask,vint64m8_t merge,const int64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_i64m8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vluxei64_v_u8mf8_tumu(vbool64_t mask,vuint8mf8_t merge,const uint8_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u8mf8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vluxei64_v_u8mf4_tumu(vbool32_t mask,vuint8mf4_t merge,const uint8_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u8mf4_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vluxei64_v_u8mf2_tumu(vbool16_t mask,vuint8mf2_t merge,const uint8_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u8mf2_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vluxei64_v_u8m1_tumu(vbool8_t mask,vuint8m1_t merge,const uint8_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u8m1_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vluxei64_v_u16mf4_tumu(vbool64_t mask,vuint16mf4_t merge,const uint16_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u16mf4_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vluxei64_v_u16mf2_tumu(vbool32_t mask,vuint16mf2_t merge,const uint16_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u16mf2_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vluxei64_v_u16m1_tumu(vbool16_t mask,vuint16m1_t merge,const uint16_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u16m1_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vluxei64_v_u16m2_tumu(vbool8_t mask,vuint16m2_t merge,const uint16_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u16m2_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vluxei64_v_u32mf2_tumu(vbool64_t mask,vuint32mf2_t merge,const uint32_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u32mf2_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vluxei64_v_u32m1_tumu(vbool32_t mask,vuint32m1_t merge,const uint32_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u32m1_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vluxei64_v_u32m2_tumu(vbool16_t mask,vuint32m2_t merge,const uint32_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u32m2_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vluxei64_v_u32m4_tumu(vbool8_t mask,vuint32m4_t merge,const uint32_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u32m4_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vluxei64_v_u64m1_tumu(vbool64_t mask,vuint64m1_t merge,const uint64_t* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u64m1_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vluxei64_v_u64m2_tumu(vbool32_t mask,vuint64m2_t merge,const uint64_t* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u64m2_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vluxei64_v_u64m4_tumu(vbool16_t mask,vuint64m4_t merge,const uint64_t* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u64m4_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vluxei64_v_u64m8_tumu(vbool8_t mask,vuint64m8_t merge,const uint64_t* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_u64m8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vluxei64_v_f32mf2_tumu(vbool64_t mask,vfloat32mf2_t merge,const float* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f32mf2_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vluxei64_v_f32m1_tumu(vbool32_t mask,vfloat32m1_t merge,const float* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f32m1_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vluxei64_v_f32m2_tumu(vbool16_t mask,vfloat32m2_t merge,const float* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f32m2_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vluxei64_v_f32m4_tumu(vbool8_t mask,vfloat32m4_t merge,const float* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f32m4_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vluxei64_v_f64m1_tumu(vbool64_t mask,vfloat64m1_t merge,const double* base,vuint64m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f64m1_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vluxei64_v_f64m2_tumu(vbool32_t mask,vfloat64m2_t merge,const double* base,vuint64m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f64m2_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vluxei64_v_f64m4_tumu(vbool16_t mask,vfloat64m4_t merge,const double* base,vuint64m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f64m4_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vluxei64_v_f64m8_tumu(vbool8_t mask,vfloat64m8_t merge,const double* base,vuint64m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei64_v_f64m8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*mu\\s+vluxei64\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}]}