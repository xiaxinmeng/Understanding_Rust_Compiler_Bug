{"sha": "e919e5bffbc8acd81d795e5c5a50d3d785bcdf0f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTkxOWU1YmZmYmM4YWNkODFkNzk1ZTVjNWE1MGQzZDc4NWJjZGYwZg==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2012-09-07T10:37:08Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2012-09-07T10:37:08Z"}, "message": "re PR tree-optimization/54295 (Widening multiply-accumulate operation uses wrong value extension)\n\n\tPR tree-ssa/54295\n\t* tree-ssa-math-opts.c (widening_mult_conversion_strippable_p):\n\tSign-extension of a zero-extended value can be simplified to\n\tjust zero-extension.\n\ntestsuite:\n\t* gcc.target/arm/pr50318-1.c: Scan for smlal.\n\t* gcc.target/arm/smlaltb-1.c: XFAIL test.\n\t* gcc.target/arm/smlaltt-1.c: Likewise.\n\nFrom-SVN: r191066", "tree": {"sha": "c6a5cc1bbe9e0d190e009cb18cb51b75417511aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c6a5cc1bbe9e0d190e009cb18cb51b75417511aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e919e5bffbc8acd81d795e5c5a50d3d785bcdf0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e919e5bffbc8acd81d795e5c5a50d3d785bcdf0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e919e5bffbc8acd81d795e5c5a50d3d785bcdf0f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e919e5bffbc8acd81d795e5c5a50d3d785bcdf0f/comments", "author": null, "committer": null, "parents": [{"sha": "81ab73121e775ca961650a7eb4656b5075a492c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81ab73121e775ca961650a7eb4656b5075a492c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81ab73121e775ca961650a7eb4656b5075a492c5"}], "stats": {"total": 25, "additions": 21, "deletions": 4}, "files": [{"sha": "360fd5642fa392e1c2958908e6295fd7540b4120", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e919e5bffbc8acd81d795e5c5a50d3d785bcdf0f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e919e5bffbc8acd81d795e5c5a50d3d785bcdf0f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e919e5bffbc8acd81d795e5c5a50d3d785bcdf0f", "patch": "@@ -1,3 +1,10 @@\n+2012-09-07  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\tPR tree-ssa/54295\n+\t* tree-ssa-math-opts.c (widening_mult_conversion_strippable_p):\n+\tSign-extension of a zero-extended value can be simplified to\n+\tjust zero-extension.\n+\n 2012-09-07  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/53667"}, {"sha": "ff3583fc5259c67d0e66a306709cc8288e849537", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e919e5bffbc8acd81d795e5c5a50d3d785bcdf0f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e919e5bffbc8acd81d795e5c5a50d3d785bcdf0f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e919e5bffbc8acd81d795e5c5a50d3d785bcdf0f", "patch": "@@ -1,3 +1,9 @@\n+2012-09-07  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* gcc.target/arm/pr50318-1.c: Scan for smlal.\n+\t* gcc.target/arm/smlaltb-1.c: XFAIL test.\n+\t* gcc.target/arm/smlaltt-1.c: Likewise.\n+\n 2012-09-07  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc.dg/pr44194-1.c: Skip on Alpha and adjust regexp for SPARC64."}, {"sha": "be270eefaef3703add9dda3c894b19ce1c66e72a", "filename": "gcc/testsuite/gcc.target/arm/pr50318-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e919e5bffbc8acd81d795e5c5a50d3d785bcdf0f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr50318-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e919e5bffbc8acd81d795e5c5a50d3d785bcdf0f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr50318-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr50318-1.c?ref=e919e5bffbc8acd81d795e5c5a50d3d785bcdf0f", "patch": "@@ -8,4 +8,4 @@ long long test (unsigned int sec, unsigned long long nsecs)\n    long)nsecs;\n }\n \n-/* { dg-final { scan-assembler \"umlal\" } } */\n+/* { dg-final { scan-assembler \"smlal\" } } */"}, {"sha": "a27009d2513264b4d92f78e6a74c79c10fc7cf10", "filename": "gcc/testsuite/gcc.target/arm/smlaltb-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e919e5bffbc8acd81d795e5c5a50d3d785bcdf0f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsmlaltb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e919e5bffbc8acd81d795e5c5a50d3d785bcdf0f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsmlaltb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsmlaltb-1.c?ref=e919e5bffbc8acd81d795e5c5a50d3d785bcdf0f", "patch": "@@ -11,4 +11,4 @@ foo (long long x, int in)\n   return x + b * a;\n }\n \n-/* { dg-final { scan-assembler \"smlaltb\\\\t\" } } */\n+/* { dg-final { scan-assembler \"smlaltb\\\\t\" { xfail *-*-* } } } */"}, {"sha": "380e3d01be69c908a44fb9e502aab1dd6a8adb55", "filename": "gcc/testsuite/gcc.target/arm/smlaltt-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e919e5bffbc8acd81d795e5c5a50d3d785bcdf0f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsmlaltt-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e919e5bffbc8acd81d795e5c5a50d3d785bcdf0f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsmlaltt-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsmlaltt-1.c?ref=e919e5bffbc8acd81d795e5c5a50d3d785bcdf0f", "patch": "@@ -11,4 +11,4 @@ foo (long long x, int in1, int in2)\n   return x + b * a;\n }\n \n-/* { dg-final { scan-assembler \"smlaltt\\\\t\" } } */\n+/* { dg-final { scan-assembler \"smlaltt\\\\t\" { xfail *-*-* } } } */"}, {"sha": "94d19afc2c071482db16d4b33c7d5740915ca225", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e919e5bffbc8acd81d795e5c5a50d3d785bcdf0f/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e919e5bffbc8acd81d795e5c5a50d3d785bcdf0f/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=e919e5bffbc8acd81d795e5c5a50d3d785bcdf0f", "patch": "@@ -1985,7 +1985,11 @@ widening_mult_conversion_strippable_p (tree result_type, gimple stmt)\n \t the operation and doesn't narrow the range.  */\n       inner_op_type = TREE_TYPE (gimple_assign_rhs1 (stmt));\n \n-      if (TYPE_UNSIGNED (op_type) == TYPE_UNSIGNED (inner_op_type)\n+      /* If the inner-most type is unsigned, then we can strip any\n+\t intermediate widening operation.  If it's signed, then the\n+\t intermediate widening operation must also be signed.  */\n+      if ((TYPE_UNSIGNED (inner_op_type)\n+\t   || TYPE_UNSIGNED (op_type) == TYPE_UNSIGNED (inner_op_type))\n \t  && TYPE_PRECISION (op_type) > TYPE_PRECISION (inner_op_type))\n \treturn true;\n "}]}