{"sha": "fc746fd620118f91bb8bfc139c7be3fb2356e820", "node_id": "C_kwDOANBUbNoAKGZjNzQ2ZmQ2MjAxMThmOTFiYjhiZmMxMzljN2JlM2ZiMjM1NmU4MjA", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-10-05T16:22:43Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-10-06T13:07:16Z"}, "message": "Track DefId on ADT variants\n\nWe must track the DefID on variants for algebraic data types as this will\nallow us to enforce unique'ness on path queries relating to this.", "tree": {"sha": "59e363e78604752e61c9a19de0fa47d2737dd7c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/59e363e78604752e61c9a19de0fa47d2737dd7c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc746fd620118f91bb8bfc139c7be3fb2356e820", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc746fd620118f91bb8bfc139c7be3fb2356e820", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc746fd620118f91bb8bfc139c7be3fb2356e820", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc746fd620118f91bb8bfc139c7be3fb2356e820/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "adaf4561d63f08714f8c289bef0f4c5649fb6829", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adaf4561d63f08714f8c289bef0f4c5649fb6829", "html_url": "https://github.com/Rust-GCC/gccrs/commit/adaf4561d63f08714f8c289bef0f4c5649fb6829"}], "stats": {"total": 35, "additions": 22, "deletions": 13}, "files": [{"sha": "b695ced34f1650eb719c6d6e1f732fc2189b9f5f", "filename": "gcc/rust/typecheck/rust-hir-type-check-enumitem.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc746fd620118f91bb8bfc139c7be3fb2356e820/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-enumitem.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc746fd620118f91bb8bfc139c7be3fb2356e820/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-enumitem.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-enumitem.cc?ref=fc746fd620118f91bb8bfc139c7be3fb2356e820", "patch": "@@ -82,6 +82,7 @@ TypeCheckEnumItem::visit (HIR::EnumItem &item)\n \n   RustIdent ident{*canonical_path, item.get_locus ()};\n   variant = new TyTy::VariantDef (item.get_mappings ().get_hirid (),\n+\t\t\t\t  item.get_mappings ().get_defid (),\n \t\t\t\t  item.get_identifier (), ident, discim_expr);\n }\n \n@@ -111,6 +112,7 @@ TypeCheckEnumItem::visit (HIR::EnumItemDiscriminant &item)\n \n   RustIdent ident{*canonical_path, item.get_locus ()};\n   variant = new TyTy::VariantDef (item.get_mappings ().get_hirid (),\n+\t\t\t\t  item.get_mappings ().get_defid (),\n \t\t\t\t  item.get_identifier (), ident,\n \t\t\t\t  item.get_discriminant_expression ().get ());\n }\n@@ -159,6 +161,7 @@ TypeCheckEnumItem::visit (HIR::EnumItemTuple &item)\n \n   RustIdent ident{*canonical_path, item.get_locus ()};\n   variant = new TyTy::VariantDef (item.get_mappings ().get_hirid (),\n+\t\t\t\t  item.get_mappings ().get_defid (),\n \t\t\t\t  item.get_identifier (), ident,\n \t\t\t\t  TyTy::VariantDef::VariantType::TUPLE,\n \t\t\t\t  discim_expr, fields);\n@@ -206,6 +209,7 @@ TypeCheckEnumItem::visit (HIR::EnumItemStruct &item)\n \n   RustIdent ident{*canonical_path, item.get_locus ()};\n   variant = new TyTy::VariantDef (item.get_mappings ().get_hirid (),\n+\t\t\t\t  item.get_mappings ().get_defid (),\n \t\t\t\t  item.get_identifier (), ident,\n \t\t\t\t  TyTy::VariantDef::VariantType::STRUCT,\n \t\t\t\t  discrim_expr, fields);"}, {"sha": "de994e60dd460123adab12224f4cae1d3695be74", "filename": "gcc/rust/typecheck/rust-hir-type-check-item.cc", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc746fd620118f91bb8bfc139c7be3fb2356e820/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc746fd620118f91bb8bfc139c7be3fb2356e820/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.cc?ref=fc746fd620118f91bb8bfc139c7be3fb2356e820", "patch": "@@ -125,7 +125,8 @@ TypeCheckItem::visit (HIR::TupleStruct &struct_decl)\n   // its a single variant ADT\n   std::vector<TyTy::VariantDef *> variants;\n   variants.push_back (new TyTy::VariantDef (\n-    struct_decl.get_mappings ().get_hirid (), struct_decl.get_identifier (),\n+    struct_decl.get_mappings ().get_hirid (),\n+    struct_decl.get_mappings ().get_defid (), struct_decl.get_identifier (),\n     ident, TyTy::VariantDef::VariantType::TUPLE, nullptr, std::move (fields)));\n \n   // Process #[repr(X)] attribute, if any\n@@ -179,7 +180,8 @@ TypeCheckItem::visit (HIR::StructStruct &struct_decl)\n   // its a single variant ADT\n   std::vector<TyTy::VariantDef *> variants;\n   variants.push_back (new TyTy::VariantDef (\n-    struct_decl.get_mappings ().get_hirid (), struct_decl.get_identifier (),\n+    struct_decl.get_mappings ().get_hirid (),\n+    struct_decl.get_mappings ().get_defid (), struct_decl.get_identifier (),\n     ident, TyTy::VariantDef::VariantType::STRUCT, nullptr, std::move (fields)));\n \n   // Process #[repr(X)] attribute, if any\n@@ -273,7 +275,8 @@ TypeCheckItem::visit (HIR::Union &union_decl)\n   // there is only a single variant\n   std::vector<TyTy::VariantDef *> variants;\n   variants.push_back (new TyTy::VariantDef (\n-    union_decl.get_mappings ().get_hirid (), union_decl.get_identifier (),\n+    union_decl.get_mappings ().get_hirid (),\n+    union_decl.get_mappings ().get_defid (), union_decl.get_identifier (),\n     ident, TyTy::VariantDef::VariantType::STRUCT, nullptr, std::move (fields)));\n \n   TyTy::BaseType *type"}, {"sha": "acbeb9c441b6d3f7c947611e3bb4ec89390a9e1f", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc746fd620118f91bb8bfc139c7be3fb2356e820/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc746fd620118f91bb8bfc139c7be3fb2356e820/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=fc746fd620118f91bb8bfc139c7be3fb2356e820", "patch": "@@ -1063,30 +1063,30 @@ class VariantDef\n     return \"\";\n   }\n \n-  VariantDef (HirId id, std::string identifier, RustIdent ident,\n+  VariantDef (HirId id, DefId defid, std::string identifier, RustIdent ident,\n \t      HIR::Expr *discriminant)\n-    : id (id), identifier (identifier), ident (ident),\n+    : id (id), defid (defid), identifier (identifier), ident (ident),\n       discriminant (discriminant)\n \n   {\n     type = VariantType::NUM;\n     fields = {};\n   }\n \n-  VariantDef (HirId id, std::string identifier, RustIdent ident,\n+  VariantDef (HirId id, DefId defid, std::string identifier, RustIdent ident,\n \t      VariantType type, HIR::Expr *discriminant,\n \t      std::vector<StructFieldType *> fields)\n-    : id (id), identifier (identifier), ident (ident), type (type),\n-      discriminant (discriminant), fields (fields)\n+    : id (id), defid (defid), identifier (identifier), ident (ident),\n+      type (type), discriminant (discriminant), fields (fields)\n   {\n     rust_assert (\n       (type == VariantType::NUM && fields.empty ())\n       || (type == VariantType::TUPLE || type == VariantType::STRUCT));\n   }\n \n   VariantDef (const VariantDef &other)\n-    : id (other.id), identifier (other.identifier), ident (other.ident),\n-      type (other.type), discriminant (other.discriminant),\n+    : id (other.id), defid (other.defid), identifier (other.identifier),\n+      ident (other.ident), type (other.type), discriminant (other.discriminant),\n       fields (other.fields)\n   {}\n \n@@ -1105,7 +1105,7 @@ class VariantDef\n   static VariantDef &get_error_node ()\n   {\n     static VariantDef node\n-      = VariantDef (UNKNOWN_HIRID, \"\",\n+      = VariantDef (UNKNOWN_HIRID, UNKNOWN_DEFID, \"\",\n \t\t    {Resolver::CanonicalPath::create_empty (),\n \t\t     Linemap::unknown_location ()},\n \t\t    nullptr);\n@@ -1116,6 +1116,7 @@ class VariantDef\n   bool is_error () const { return get_id () == UNKNOWN_HIRID; }\n \n   HirId get_id () const { return id; }\n+  DefId get_defid () const { return defid; }\n \n   VariantType get_variant_type () const { return type; }\n   bool is_data_variant () const { return type != VariantType::NUM; }\n@@ -1211,7 +1212,7 @@ class VariantDef\n     for (auto &f : fields)\n       cloned_fields.push_back ((StructFieldType *) f->clone ());\n \n-    return new VariantDef (id, identifier, ident, type, discriminant,\n+    return new VariantDef (id, defid, identifier, ident, type, discriminant,\n \t\t\t   cloned_fields);\n   }\n \n@@ -1221,14 +1222,15 @@ class VariantDef\n     for (auto &f : fields)\n       cloned_fields.push_back ((StructFieldType *) f->monomorphized_clone ());\n \n-    return new VariantDef (id, identifier, ident, type, discriminant,\n+    return new VariantDef (id, defid, identifier, ident, type, discriminant,\n \t\t\t   cloned_fields);\n   }\n \n   const RustIdent &get_ident () const { return ident; }\n \n private:\n   HirId id;\n+  DefId defid;\n   std::string identifier;\n   RustIdent ident;\n   VariantType type;"}]}