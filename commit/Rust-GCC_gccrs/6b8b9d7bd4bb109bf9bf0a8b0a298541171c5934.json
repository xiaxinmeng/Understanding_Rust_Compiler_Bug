{"sha": "6b8b9d7bd4bb109bf9bf0a8b0a298541171c5934", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmI4YjlkN2JkNGJiMTA5YmY5YmYwYThiMGEyOTg1NDExNzFjNTkzNA==", "commit": {"author": {"name": "Chris Meyer", "email": "cmeyer@gatan.com", "date": "2002-03-11T22:39:35Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-03-11T22:39:35Z"}, "message": "genflags.c (gen_insn): Use IS_VSPACE.\n\n        * genflags.c (gen_insn): Use IS_VSPACE.\n        * genoutput.c (output_insn_data): Likewise.\n        (process_template): Likewise.\n\nFrom-SVN: r50616", "tree": {"sha": "32b445dea72fa81baa922e65be1741e2dcc548fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/32b445dea72fa81baa922e65be1741e2dcc548fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b8b9d7bd4bb109bf9bf0a8b0a298541171c5934", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b8b9d7bd4bb109bf9bf0a8b0a298541171c5934", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b8b9d7bd4bb109bf9bf0a8b0a298541171c5934", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b8b9d7bd4bb109bf9bf0a8b0a298541171c5934/comments", "author": null, "committer": null, "parents": [{"sha": "172f7610ae6b769fe9a1465424361956472955d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/172f7610ae6b769fe9a1465424361956472955d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/172f7610ae6b769fe9a1465424361956472955d8"}], "stats": {"total": 21, "additions": 16, "deletions": 5}, "files": [{"sha": "5d416927af4ae1e72fb240221c5c683c37fb1b1c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b8b9d7bd4bb109bf9bf0a8b0a298541171c5934/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b8b9d7bd4bb109bf9bf0a8b0a298541171c5934/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6b8b9d7bd4bb109bf9bf0a8b0a298541171c5934", "patch": "@@ -1,3 +1,9 @@\n+2002-03-11  Chris Meyer  <cmeyer@gatan.com>\n+\n+\t* genflags.c (gen_insn): Use IS_VSPACE.\n+\t* genoutput.c (output_insn_data): Likewise.\n+\t(process_template): Likewise.\n+\n 2002-03-11  Richard Henderson  <rth@redhat.com>\n \n \t* toplev.c (rest_of_compilation): Don't compile if we've had errors."}, {"sha": "010ac7066043cc046e39505b917bd5c2ec7092ea", "filename": "gcc/genflags.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b8b9d7bd4bb109bf9bf0a8b0a298541171c5934/gcc%2Fgenflags.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b8b9d7bd4bb109bf9bf0a8b0a298541171c5934/gcc%2Fgenflags.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenflags.c?ref=6b8b9d7bd4bb109bf9bf0a8b0a298541171c5934", "patch": "@@ -201,7 +201,7 @@ gen_insn (insn)\n       printf (\"(\");\n       for (p = XSTR (insn, 2); *p; p++)\n \t{\n-\t  if (*p == '\\n')\n+\t  if (IS_VSPACE (*p))\n \t    printf (\" \\\\\\n\");\n \t  else\n \t    printf (\"%c\", *p);"}, {"sha": "80b73fcb91564446db1ee1d5bb7d8256acb72108", "filename": "gcc/genoutput.c", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b8b9d7bd4bb109bf9bf0a8b0a298541171c5934/gcc%2Fgenoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b8b9d7bd4bb109bf9bf0a8b0a298541171c5934/gcc%2Fgenoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenoutput.c?ref=6b8b9d7bd4bb109bf9bf0a8b0a298541171c5934", "patch": "@@ -366,8 +366,13 @@ output_insn_data ()\n \t    printf (\"    \\\"\");\n \t    while (*p)\n \t      {\n-\t\tif (*p == '\\n' && prev != '\\\\')\n-\t\t  printf (\"\\\\n\\\\\\n\");\n+\t\tif (IS_VSPACE (*p) && prev != '\\\\')\n+\t\t  {\n+\t\t    /* Preserve two consecutive \\n's or \\r's, but treat \\r\\n\n+\t\t       as a single newline.  */\n+\t\t    if (*p == '\\n' && prev != '\\r')\n+\t\t      printf (\"\\\\n\\\\\\n\");\n+\t\t  }\n \t\telse\n \t\t  putchar (*p);\n \t\tprev = *p;\n@@ -694,11 +699,11 @@ process_template (d, template)\n \n       for (i = 0, cp = &template[1]; *cp; )\n \t{\n-\t  while (*cp == '\\n' || *cp == ' ' || *cp== '\\t')\n+\t  while (ISSPACE (*cp))\n \t    cp++;\n \n \t  printf (\"  \\\"\");\n-\t  while (*cp != '\\n' && *cp != '\\0')\n+\t  while (!IS_VSPACE (*cp) && *cp != '\\0')\n \t    {\n \t      putchar (*cp);\n \t      cp++;"}]}