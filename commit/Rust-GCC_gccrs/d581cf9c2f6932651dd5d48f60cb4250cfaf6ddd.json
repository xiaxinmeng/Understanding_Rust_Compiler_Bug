{"sha": "d581cf9c2f6932651dd5d48f60cb4250cfaf6ddd", "node_id": "C_kwDOANBUbNoAKGQ1ODFjZjljMmY2OTMyNjUxZGQ1ZDQ4ZjYwY2I0MjUwY2ZhZjZkZGQ", "commit": {"author": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2021-11-09T03:10:58Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2021-11-10T02:00:54Z"}, "message": "Nios2: Add TARGET_CAN_INLINE_P hook.\n\n2021-11-09  Sandra Loosemore  <sandra@codesourcery.com>\n\n\tgcc/\n\t* config/nios2/nios2.c (nios2_can_inline_p): New.\n\t(TARGET_CAN_INLINE_P): Define.\n\n\tgcc/testsuite/\n\t* gcc.target/nios2/custom-fp-inline-1.c: New.\n\t* gcc.target/nios2/custom-fp-inline-2.c: New.\n\t* gcc.target/nios2/custom-fp-inline-3.c: New.\n\t* gcc.target/nios2/custom-fp-inline-4.c: New.", "tree": {"sha": "7b46dea76463876f6bc50c5442d7a6454383c20e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b46dea76463876f6bc50c5442d7a6454383c20e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d581cf9c2f6932651dd5d48f60cb4250cfaf6ddd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d581cf9c2f6932651dd5d48f60cb4250cfaf6ddd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d581cf9c2f6932651dd5d48f60cb4250cfaf6ddd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d581cf9c2f6932651dd5d48f60cb4250cfaf6ddd/comments", "author": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9b1334eecc51bc0562581f2c6e86d3fc474c23c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9b1334eecc51bc0562581f2c6e86d3fc474c23c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9b1334eecc51bc0562581f2c6e86d3fc474c23c"}], "stats": {"total": 161, "additions": 161, "deletions": 0}, "files": [{"sha": "f77f7e6e07d3b92ae624cfd2ed6669fc8b8524a5", "filename": "gcc/config/nios2/nios2.c", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d581cf9c2f6932651dd5d48f60cb4250cfaf6ddd/gcc%2Fconfig%2Fnios2%2Fnios2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d581cf9c2f6932651dd5d48f60cb4250cfaf6ddd/gcc%2Fconfig%2Fnios2%2Fnios2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnios2%2Fnios2.c?ref=d581cf9c2f6932651dd5d48f60cb4250cfaf6ddd", "patch": "@@ -4162,6 +4162,40 @@ nios2_option_restore (struct gcc_options *opts ATTRIBUTE_UNUSED,\n \t  sizeof (custom_code_index));\n }\n \n+static bool\n+nios2_can_inline_p (tree caller, tree callee)\n+{\n+  tree callee_opts = DECL_FUNCTION_SPECIFIC_TARGET (callee);\n+  tree caller_opts = DECL_FUNCTION_SPECIFIC_TARGET (caller);\n+  struct cl_target_option *callee_ptr, *caller_ptr;\n+  unsigned int i;\n+\n+  if (! callee_opts)\n+    callee_opts = target_option_default_node;\n+  if (! caller_opts)\n+    caller_opts = target_option_default_node;\n+\n+  /* If both caller and callee have attributes, assume that if the\n+     pointer is different, the two functions have different target\n+     options since build_target_option_node uses a hash table for the\n+     options.  */\n+  if (callee_opts == caller_opts)\n+    return true;\n+\n+  /* The only target options we recognize via function attributes are\n+     those related to custom instructions.  If we failed the above test,\n+     check that any custom instructions enabled in the callee are also\n+     enabled with the same value in the caller.  */\n+  callee_ptr = TREE_TARGET_OPTION (callee_opts);\n+  caller_ptr = TREE_TARGET_OPTION (caller_opts);\n+  for (i = 0; i < ARRAY_SIZE (nios2_fpu_insn); i++)\n+    if (callee_ptr->saved_fpu_custom_code[i] != -1\n+\t&& (callee_ptr->saved_fpu_custom_code[i]\n+\t    != caller_ptr->saved_fpu_custom_code[i]))\n+      return false;\n+  return true;\n+}\n+\n /* Inner function to process the attribute((target(...))), take an argument and\n    set the current options from the argument.  If we have a list, recursively\n    go over the list.  */\n@@ -5554,6 +5588,9 @@ nios2_adjust_reg_alloc_order (void)\n #undef TARGET_OPTION_RESTORE\n #define TARGET_OPTION_RESTORE nios2_option_restore\n \n+#undef TARGET_CAN_INLINE_P\n+#define TARGET_CAN_INLINE_P nios2_can_inline_p\n+\n #undef TARGET_SET_CURRENT_FUNCTION\n #define TARGET_SET_CURRENT_FUNCTION nios2_set_current_function\n "}, {"sha": "43715e55fcd749b572607814b869b495cb499cbe", "filename": "gcc/testsuite/gcc.target/nios2/custom-fp-inline-1.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d581cf9c2f6932651dd5d48f60cb4250cfaf6ddd/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fcustom-fp-inline-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d581cf9c2f6932651dd5d48f60cb4250cfaf6ddd/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fcustom-fp-inline-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fcustom-fp-inline-1.c?ref=d581cf9c2f6932651dd5d48f60cb4250cfaf6ddd", "patch": "@@ -0,0 +1,33 @@\n+/* Test that you can inline a function with custom insn attributes into\n+   one with the same attributes.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -ffinite-math-only\" } */\n+\n+/* -O1 in the options is significant.  Without it FP operations may not be\n+   optimized to custom instructions.  */\n+\n+#include <math.h>\n+\n+static inline\n+__attribute__ ((always_inline, target (\"custom-fmaxs=246,custom-fmins=247\")))\n+void\n+custom_fp1 (float operand_a, float operand_b, float *result)\n+\n+{\n+  result[0] = fmaxf (operand_a, operand_b);\n+  result[1] = fminf (operand_a, operand_b);\n+}\n+\n+extern void\n+custom_fp (float operand_a, float operand_b, float *result)\n+  __attribute__ ((target (\"custom-fmaxs=246,custom-fmins=247\")));\n+\n+void\n+custom_fp (float operand_a, float operand_b, float *result)\n+{\n+  custom_fp1 (operand_a, operand_b, result);\n+}\n+\n+/* { dg-final { scan-assembler \"custom\\\\t246, .* # fmaxs .*\" } } */\n+/* { dg-final { scan-assembler \"custom\\\\t247, .* # fmins .*\" } } */"}, {"sha": "3e35241c7cd62fb1a51e4db18bde55c1bdeb5d82", "filename": "gcc/testsuite/gcc.target/nios2/custom-fp-inline-2.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d581cf9c2f6932651dd5d48f60cb4250cfaf6ddd/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fcustom-fp-inline-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d581cf9c2f6932651dd5d48f60cb4250cfaf6ddd/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fcustom-fp-inline-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fcustom-fp-inline-2.c?ref=d581cf9c2f6932651dd5d48f60cb4250cfaf6ddd", "patch": "@@ -0,0 +1,29 @@\n+/* Test that you cannot inline a function with custom insn attributes into\n+   one without attributes.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -ffinite-math-only\" } */\n+\n+/* -O1 in the options is significant.  Without it FP operations may not be\n+   optimized to custom instructions.  */\n+\n+#include <math.h>\n+\n+static inline\n+__attribute__ ((always_inline, target (\"custom-fmaxs=246,custom-fmins=247\")))\n+void\n+custom_fp1 (float operand_a, float operand_b, float *result)  /* { dg-error \"target specific option mismatch\" } */\n+{\n+  result[0] = fmaxf (operand_a, operand_b);\n+  result[1] = fminf (operand_a, operand_b);\n+}\n+\n+extern void\n+custom_fp (float operand_a, float operand_b, float *result);\n+\n+void\n+custom_fp (float operand_a, float operand_b, float *result)\n+{\n+  custom_fp1 (operand_a, operand_b, result);\n+}\n+"}, {"sha": "86b10645f1b8b79d3868462d0198c8a9689944f0", "filename": "gcc/testsuite/gcc.target/nios2/custom-fp-inline-3.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d581cf9c2f6932651dd5d48f60cb4250cfaf6ddd/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fcustom-fp-inline-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d581cf9c2f6932651dd5d48f60cb4250cfaf6ddd/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fcustom-fp-inline-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fcustom-fp-inline-3.c?ref=d581cf9c2f6932651dd5d48f60cb4250cfaf6ddd", "patch": "@@ -0,0 +1,33 @@\n+/* Test that you can inline a function without custom insn attributes into\n+   one that does have custom insn attributes.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -ffinite-math-only\" } */\n+\n+/* -O1 in the options is significant.  Without it FP operations may not be\n+   optimized to custom instructions.  */\n+\n+#include <math.h>\n+\n+static inline \n+__attribute__ ((always_inline))\n+void\n+custom_fp1 (float operand_a, float operand_b, float *result)\n+\n+{\n+  result[0] = fmaxf (operand_a, operand_b);\n+  result[1] = fminf (operand_a, operand_b);\n+}\n+\n+extern void\n+custom_fp (float operand_a, float operand_b, float *result)\n+  __attribute__ ((target (\"custom-fmaxs=246,custom-fmins=247\")));\n+\n+void\n+custom_fp (float operand_a, float operand_b, float *result)\n+{\n+  custom_fp1 (operand_a, operand_b, result);\n+}\n+\n+/* { dg-final { scan-assembler \"custom\\\\t246, .* # fmaxs .*\" } } */\n+/* { dg-final { scan-assembler \"custom\\\\t247, .* # fmins .*\" } } */"}, {"sha": "5e2c1bca1906f12ddb62c95c6fc0fa32c24ad5f6", "filename": "gcc/testsuite/gcc.target/nios2/custom-fp-inline-4.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d581cf9c2f6932651dd5d48f60cb4250cfaf6ddd/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fcustom-fp-inline-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d581cf9c2f6932651dd5d48f60cb4250cfaf6ddd/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fcustom-fp-inline-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fcustom-fp-inline-4.c?ref=d581cf9c2f6932651dd5d48f60cb4250cfaf6ddd", "patch": "@@ -0,0 +1,29 @@\n+/* Test that you cannot inline a function with custom insn attributes into\n+   one with incompatible attributes.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -ffinite-math-only\" } */\n+\n+/* -O1 in the options is significant.  Without it FP operations may not be\n+   optimized to custom instructions.  */\n+\n+#include <math.h>\n+\n+static inline\n+__attribute__ ((always_inline, target (\"custom-fmaxs=246,custom-fmins=247\")))\n+void\n+custom_fp1 (float operand_a, float operand_b, float *result)  /* { dg-error \"target specific option mismatch\" } */\n+{\n+  result[0] = fmaxf (operand_a, operand_b);\n+  result[1] = fminf (operand_a, operand_b);\n+}\n+\n+extern void\n+custom_fp (float operand_a, float operand_b, float *result)\n+  __attribute__ ((target (\"custom-fmaxs=200,custom-fmins=201\")));\n+\n+void\n+custom_fp (float operand_a, float operand_b, float *result)\n+{\n+  custom_fp1 (operand_a, operand_b, result);\n+}"}]}