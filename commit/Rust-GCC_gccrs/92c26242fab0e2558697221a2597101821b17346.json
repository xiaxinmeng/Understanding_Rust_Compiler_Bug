{"sha": "92c26242fab0e2558697221a2597101821b17346", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTJjMjYyNDJmYWIwZTI1NTg2OTcyMjFhMjU5NzEwMTgyMWIxNzM0Ng==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@codesourcery.com", "date": "2000-07-10T17:14:25Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2000-07-10T17:14:25Z"}, "message": "diagnostic.c (output_octal): Second parameter is unsigned.\n\n2000-07-10  Gabriel Dos Reis  <gdr@codesourcery.com>\n\n\t* diagnostic.c (output_octal): Second parameter is unsigned.\n\t(output_long_octal): Likewise.\n\t(output_hexadecimal): Likewise.\n\t(output_long_hexadecimal): Likewise.\n\t(output_format): Adjust arguments extraction. Tweak.\n\t(output_verbatim, verbatim): End variable argument list.\n\t(report_diagnostic): Improve documentation.\n\nFrom-SVN: r34945", "tree": {"sha": "de35541e0178e3544d3fa34bf261be7f9813d2a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de35541e0178e3544d3fa34bf261be7f9813d2a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92c26242fab0e2558697221a2597101821b17346", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92c26242fab0e2558697221a2597101821b17346", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92c26242fab0e2558697221a2597101821b17346", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92c26242fab0e2558697221a2597101821b17346/comments", "author": null, "committer": null, "parents": [{"sha": "5ecdf775f381a7efc787f622146f2924f2682eeb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ecdf775f381a7efc787f622146f2924f2682eeb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ecdf775f381a7efc787f622146f2924f2682eeb"}], "stats": {"total": 47, "additions": 32, "deletions": 15}, "files": [{"sha": "d6e7dffa4767794239ce326e79fe3b35d611c1eb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92c26242fab0e2558697221a2597101821b17346/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92c26242fab0e2558697221a2597101821b17346/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=92c26242fab0e2558697221a2597101821b17346", "patch": "@@ -1,3 +1,13 @@\n+2000-07-10  Gabriel Dos Reis  <gdr@codesourcery.com>\n+\n+\t* diagnostic.c (output_octal): Second parameter is unsigned.\n+\t(output_long_octal): Likewise.\n+\t(output_hexadecimal): Likewise.\n+\t(output_long_hexadecimal): Likewise.\n+\t(output_format): Adjust arguments extraction. Tweak.\n+\t(output_verbatim, verbatim): End variable argument list.\n+\t(report_diagnostic): Improve documentation.\n+\t\n 2000-07-10  Benjamin Chelf  <chelf@codesourcery.com>\n \n \t* c-common.h (build_stmt): Declare."}, {"sha": "b9bbe2daea01c31a9bd46030d54e1fb756a3ce67", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 22, "deletions": 15, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92c26242fab0e2558697221a2597101821b17346/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92c26242fab0e2558697221a2597101821b17346/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=92c26242fab0e2558697221a2597101821b17346", "patch": "@@ -113,10 +113,11 @@ static void output_unsigned_decimal PARAMS ((output_buffer *, unsigned int));\n static void output_long_decimal PARAMS ((output_buffer *, long int));\n static void output_long_unsigned_decimal PARAMS ((output_buffer *,\n                                                   long unsigned int));\n-static void output_octal PARAMS ((output_buffer *, int));\n-static void output_long_octal PARAMS ((output_buffer *, long int));\n-static void output_hexadecimal PARAMS ((output_buffer *, int));\n-static void output_long_hexadecimal PARAMS ((output_buffer *, long int));\n+static void output_octal PARAMS ((output_buffer *, unsigned int));\n+static void output_long_octal PARAMS ((output_buffer *, unsigned long int));\n+static void output_hexadecimal PARAMS ((output_buffer *, unsigned int));\n+static void output_long_hexadecimal PARAMS ((output_buffer *,\n+                                             unsigned long int));\n static void output_append_r PARAMS ((output_buffer *, const char *, int));\n static void wrap_text PARAMS ((output_buffer *, const char *, const char *));\n static void maybe_wrap_text PARAMS ((output_buffer *, const char *,\n@@ -431,31 +432,31 @@ output_long_unsigned_decimal (buffer, i)\n static void\n output_octal (buffer, i)\n      output_buffer *buffer;\n-     int i;\n+     unsigned int i;\n {\n   output_formatted_integer (buffer, \"%o\", i);\n }\n \n static void\n output_long_octal (buffer, i)\n      output_buffer *buffer;\n-     long int i;\n+     unsigned long int i;\n {\n   output_formatted_integer (buffer, \"%lo\", i);\n }\n \n static void\n output_hexadecimal (buffer, i)\n      output_buffer *buffer;\n-     int i;\n+     unsigned int i;\n {\n   output_formatted_integer (buffer, \"%x\", i);\n }\n \n static void\n output_long_hexadecimal (buffer, i)\n      output_buffer *buffer;\n-     long int i;\n+     unsigned long int i;\n {\n   output_formatted_integer (buffer, \"%lx\", i);\n }\n@@ -579,7 +580,6 @@ static void\n output_format (buffer)\n      output_buffer *buffer;\n {\n-  const char *msg = buffer->cursor;\n   for (; *buffer->cursor; ++buffer->cursor)\n     {\n       int long_integer = 0;\n@@ -624,9 +624,9 @@ output_format (buffer)\n         case 'o':\n           if (long_integer)\n             output_long_octal\n-              (buffer, va_arg (buffer->format_args, long int));\n+              (buffer, va_arg (buffer->format_args, unsigned long int));\n           else\n-            output_octal (buffer, va_arg (buffer->format_args, int));\n+            output_octal (buffer, va_arg (buffer->format_args, unsigned int));\n           break;\n \n         case 's':\n@@ -645,9 +645,10 @@ output_format (buffer)\n         case 'x':\n           if (long_integer)\n             output_long_hexadecimal\n-              (buffer, va_arg (buffer->format_args, long int));\n+              (buffer, va_arg (buffer->format_args, unsigned long int));\n           else\n-            output_hexadecimal (buffer, va_arg (buffer->format_args, int));\n+            output_hexadecimal\n+              (buffer, va_arg (buffer->format_args, unsigned int));\n           break;\n \n         case '%':\n@@ -657,13 +658,15 @@ output_format (buffer)\n         case '.':\n           {\n             int n;\n+            const char *s;\n             /* We handle no precision specifier but `%.*s'.  */\n             if (*++buffer->cursor != '*')\n               abort ();\n             else if (*++buffer->cursor != 's')\n               abort();\n             n = va_arg (buffer->format_args, int);\n-            output_append (buffer, msg, msg + n);\n+            s = va_arg (buffer->format_args, const char *);\n+            output_append (buffer, s, s + n);\n           }\n           break;\n \n@@ -1799,6 +1802,7 @@ output_verbatim VPARAMS ((output_buffer *buffer, const char *msg, ...))\n   msg = va_arg (ap, const char *);\n #endif\n   output_do_verbatim (buffer, msg, ap);\n+  va_end (ap);\n }\n \n /* Same as above but use diagnostic_buffer.  */\n@@ -1816,12 +1820,15 @@ verbatim VPARAMS ((const char *msg, ...))\n #endif\n   output_do_verbatim (diagnostic_buffer, msg, ap);\n   output_to_stream (diagnostic_buffer, stderr);\n+  va_end (ap);\n }\n \n /* Report a diagnostic MESSAGE (an error or a WARNING) involving\n    entities in ARGUMENTS.  FILE and LINE indicate where the diagnostic\n    occurs.  This function is *the* subroutine in terms of which front-ends\n-   should implement their specific diagnostic handling modules.  */\n+   should implement their specific diagnostic handling modules.\n+   The front-end independent format specifiers are exactly those described\n+   in the documentation of output_format.  */\n void\n report_diagnostic (msg, args, file, line, warn)\n      const char *msg;"}]}