{"sha": "dd4424ef898608321b60610c4f3c98737ace3680", "node_id": "C_kwDOANBUbNoAKGRkNDQyNGVmODk4NjA4MzIxYjYwNjEwYzRmM2M5ODczN2FjZTM2ODA", "commit": {"author": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2022-11-28T16:01:26Z"}, "committer": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2023-01-25T13:36:21Z"}, "message": "arm: improve tests and fix vclsq*\n\ngcc/ChangeLog:\n\n\t* config/arm/mve.md (mve_vclsq_s<mode>): Fix spacing.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vclsq_m_s16.c: Use\n\tcheck-function-bodies instead of scan-assembler checks. Use extern\n\t\"C\" for C++ testing.\n\t* gcc.target/arm/mve/intrinsics/vclsq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vclsq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vclsq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vclsq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vclsq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vclsq_x_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vclsq_x_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vclsq_x_s8.c: Likewise.", "tree": {"sha": "e6ebe16935d81ace953cac987ed800c1b6baad14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e6ebe16935d81ace953cac987ed800c1b6baad14"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd4424ef898608321b60610c4f3c98737ace3680", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd4424ef898608321b60610c4f3c98737ace3680", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd4424ef898608321b60610c4f3c98737ace3680", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd4424ef898608321b60610c4f3c98737ace3680/comments", "author": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c29d85359add807200a1a851026b4e4a9d6b714c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c29d85359add807200a1a851026b4e4a9d6b714c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c29d85359add807200a1a851026b4e4a9d6b714c"}], "stats": {"total": 280, "additions": 251, "deletions": 29}, "files": [{"sha": "d4f5a904892cf2cb1d9174312ff9221a11e181b1", "filename": "gcc/config/arm/mve.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd4424ef898608321b60610c4f3c98737ace3680/gcc%2Fconfig%2Farm%2Fmve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd4424ef898608321b60610c4f3c98737ace3680/gcc%2Fconfig%2Farm%2Fmve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmve.md?ref=dd4424ef898608321b60610c4f3c98737ace3680", "patch": "@@ -469,7 +469,7 @@\n \t VCLSQ_S))\n   ]\n   \"TARGET_HAVE_MVE\"\n-  \"vcls.s%#<V_sz_elem>  %q0, %q1\"\n+  \"vcls.s%#<V_sz_elem>\\t%q0, %q1\"\n   [(set_attr \"type\" \"mve_move\")\n ])\n "}, {"sha": "1996ac8b03e5477629336a211c2308abaedccaa9", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vclsq_m_s16.c", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd4424ef898608321b60610c4f3c98737ace3680/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclsq_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd4424ef898608321b60610c4f3c98737ace3680/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclsq_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclsq_m_s16.c?ref=dd4424ef898608321b60610c4f3c98737ace3680", "patch": "@@ -1,22 +1,49 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvclst.s16\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo (int16x8_t inactive, int16x8_t a, mve_pred16_t p)\n {\n   return vclsq_m_s16 (inactive, a, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vclst.s16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvclst.s16\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo1 (int16x8_t inactive, int16x8_t a, mve_pred16_t p)\n {\n   return vclsq_m (inactive, a, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "f51841d024edb862aaadf9806bd80804cf5d11fe", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vclsq_m_s32.c", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd4424ef898608321b60610c4f3c98737ace3680/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclsq_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd4424ef898608321b60610c4f3c98737ace3680/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclsq_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclsq_m_s32.c?ref=dd4424ef898608321b60610c4f3c98737ace3680", "patch": "@@ -1,22 +1,49 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvclst.s32\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo (int32x4_t inactive, int32x4_t a, mve_pred16_t p)\n {\n   return vclsq_m_s32 (inactive, a, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vclst.s32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvclst.s32\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo1 (int32x4_t inactive, int32x4_t a, mve_pred16_t p)\n {\n   return vclsq_m (inactive, a, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "2975c4cda56292594d42ab6512c66d2b81905ed9", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vclsq_m_s8.c", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd4424ef898608321b60610c4f3c98737ace3680/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclsq_m_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd4424ef898608321b60610c4f3c98737ace3680/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclsq_m_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclsq_m_s8.c?ref=dd4424ef898608321b60610c4f3c98737ace3680", "patch": "@@ -1,22 +1,49 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvclst.s8\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo (int8x16_t inactive, int8x16_t a, mve_pred16_t p)\n {\n   return vclsq_m_s8 (inactive, a, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vclst.s8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvclst.s8\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo1 (int8x16_t inactive, int8x16_t a, mve_pred16_t p)\n {\n   return vclsq_m (inactive, a, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "ed1b5c75b40789423e33c34fe7fa2b18a32c044a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vclsq_s16.c", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd4424ef898608321b60610c4f3c98737ace3680/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclsq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd4424ef898608321b60610c4f3c98737ace3680/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclsq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclsq_s16.c?ref=dd4424ef898608321b60610c4f3c98737ace3680", "patch": "@@ -1,21 +1,41 @@\n-/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n-/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvcls.s16\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo (int16x8_t a)\n {\n   return vclsq_s16 (a);\n }\n \n-/* { dg-final { scan-assembler \"vcls.s16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcls.s16\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo1 (int16x8_t a)\n {\n   return vclsq (a);\n }\n \n-/* { dg-final { scan-assembler \"vcls.s16\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "9e5369e04c628f051160e1f0362b86b7042c757a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vclsq_s32.c", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd4424ef898608321b60610c4f3c98737ace3680/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclsq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd4424ef898608321b60610c4f3c98737ace3680/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclsq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclsq_s32.c?ref=dd4424ef898608321b60610c4f3c98737ace3680", "patch": "@@ -1,21 +1,41 @@\n-/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n-/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvcls.s32\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo (int32x4_t a)\n {\n   return vclsq_s32 (a);\n }\n \n-/* { dg-final { scan-assembler \"vcls.s32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcls.s32\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo1 (int32x4_t a)\n {\n   return vclsq (a);\n }\n \n-/* { dg-final { scan-assembler \"vcls.s32\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "c4a9468f8e140b29cf94bb187d7ca9e360cf503e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vclsq_s8.c", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd4424ef898608321b60610c4f3c98737ace3680/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclsq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd4424ef898608321b60610c4f3c98737ace3680/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclsq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclsq_s8.c?ref=dd4424ef898608321b60610c4f3c98737ace3680", "patch": "@@ -1,21 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvcls.s8\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo (int8x16_t a)\n {\n   return vclsq_s8 (a);\n }\n \n-/* { dg-final { scan-assembler \"vcls.s8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcls.s8\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo1 (int8x16_t a)\n {\n   return vclsq (a);\n }\n \n-/* { dg-final { scan-assembler \"vcls.s8\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "ea11eceb73050f1eafaae420963363926237c44b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vclsq_x_s16.c", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd4424ef898608321b60610c4f3c98737ace3680/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclsq_x_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd4424ef898608321b60610c4f3c98737ace3680/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclsq_x_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclsq_x_s16.c?ref=dd4424ef898608321b60610c4f3c98737ace3680", "patch": "@@ -1,22 +1,49 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvclst.s16\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo (int16x8_t a, mve_pred16_t p)\n {\n   return vclsq_x_s16 (a, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vclst.s16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvclst.s16\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo1 (int16x8_t a, mve_pred16_t p)\n {\n   return vclsq_x (a, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "1737c561a0b2abc1dea31de87cdc707694a3a08e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vclsq_x_s32.c", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd4424ef898608321b60610c4f3c98737ace3680/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclsq_x_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd4424ef898608321b60610c4f3c98737ace3680/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclsq_x_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclsq_x_s32.c?ref=dd4424ef898608321b60610c4f3c98737ace3680", "patch": "@@ -1,22 +1,49 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvclst.s32\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo (int32x4_t a, mve_pred16_t p)\n {\n   return vclsq_x_s32 (a, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vclst.s32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvclst.s32\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo1 (int32x4_t a, mve_pred16_t p)\n {\n   return vclsq_x (a, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "a7cdb612ee11cc986a3c5e3eef8a4efd907330d5", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vclsq_x_s8.c", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd4424ef898608321b60610c4f3c98737ace3680/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclsq_x_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd4424ef898608321b60610c4f3c98737ace3680/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclsq_x_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvclsq_x_s8.c?ref=dd4424ef898608321b60610c4f3c98737ace3680", "patch": "@@ -1,22 +1,49 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvclst.s8\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo (int8x16_t a, mve_pred16_t p)\n {\n   return vclsq_x_s8 (a, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vclst.s8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvclst.s8\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo1 (int8x16_t a, mve_pred16_t p)\n {\n   return vclsq_x (a, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}]}