{"sha": "e046c56eee0e7308f8704c8c13aa6ca5230201f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTA0NmM1NmVlZTBlNzMwOGY4NzA0YzhjMTNhYTZjYTUyMzAyMDFmMQ==", "commit": {"author": {"name": "Andrew Haley", "email": "aph@redhat.com", "date": "2006-06-16T08:56:29Z"}, "committer": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "2006-06-16T08:56:29Z"}, "message": "class.c (make_class_data): When using flag_indirect_classes, don't initialize the vtable of Class instances.\n\n2006-06-16  Andrew Haley  <aph@redhat.com>\n\n        * class.c (make_class_data): When using flag_indirect_classes,\n        don't initialize the vtable of Class instances.\n\n2006-06-16  Andrew Haley  <aph@redhat.com>\n\n        * java/lang/natClassLoader.cc (_Jv_NewClassFromInitializer): Don't\n        copy the whole Class instance from the initializer: instead, copy\n        everything but the first word (the vtable pointer).\n        Change prototype to (const char* class_initializer).\n        (_Jv_RegisterNewClasses): Change prototype to (const char**).\n        * java/lang/Class.h (_Jv_RegisterNewClasses): Change prototype to\n        (const char**).\n\nFrom-SVN: r114714", "tree": {"sha": "ff9074d933a019a660cdd900d098b48311aea034", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff9074d933a019a660cdd900d098b48311aea034"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e046c56eee0e7308f8704c8c13aa6ca5230201f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e046c56eee0e7308f8704c8c13aa6ca5230201f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e046c56eee0e7308f8704c8c13aa6ca5230201f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e046c56eee0e7308f8704c8c13aa6ca5230201f1/comments", "author": {"login": "theRealAph", "id": 254637, "node_id": "MDQ6VXNlcjI1NDYzNw==", "avatar_url": "https://avatars.githubusercontent.com/u/254637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theRealAph", "html_url": "https://github.com/theRealAph", "followers_url": "https://api.github.com/users/theRealAph/followers", "following_url": "https://api.github.com/users/theRealAph/following{/other_user}", "gists_url": "https://api.github.com/users/theRealAph/gists{/gist_id}", "starred_url": "https://api.github.com/users/theRealAph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theRealAph/subscriptions", "organizations_url": "https://api.github.com/users/theRealAph/orgs", "repos_url": "https://api.github.com/users/theRealAph/repos", "events_url": "https://api.github.com/users/theRealAph/events{/privacy}", "received_events_url": "https://api.github.com/users/theRealAph/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "47392a21de0f9488d598ecfb6aac3e6d45a7457a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47392a21de0f9488d598ecfb6aac3e6d45a7457a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47392a21de0f9488d598ecfb6aac3e6d45a7457a"}], "stats": {"total": 54, "additions": 40, "deletions": 14}, "files": [{"sha": "98d90e6de65b4f29f757be6f365b0863fd2bd3ec", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e046c56eee0e7308f8704c8c13aa6ca5230201f1/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e046c56eee0e7308f8704c8c13aa6ca5230201f1/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=e046c56eee0e7308f8704c8c13aa6ca5230201f1", "patch": "@@ -1,3 +1,8 @@\n+2006-06-16  Andrew Haley  <aph@redhat.com>\n+\n+\t* class.c (make_class_data): When using flag_indirect_classes,\n+\tdon't initialize the vtable of Class instances.\n+\n 2006-06-09  Andrew Haley  <aph@redhat.com>\n \n \tPR java/1305"}, {"sha": "10992b870a34d446759ad2097bfefd71e835a29b", "filename": "gcc/java/class.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e046c56eee0e7308f8704c8c13aa6ca5230201f1/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e046c56eee0e7308f8704c8c13aa6ca5230201f1/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=e046c56eee0e7308f8704c8c13aa6ca5230201f1", "patch": "@@ -1863,10 +1863,12 @@ make_class_data (tree type)\n \n   START_RECORD_CONSTRUCTOR (temp, object_type_node);\n   PUSH_FIELD_VALUE (temp, \"vtable\",\n-\t\t    build2 (PLUS_EXPR, dtable_ptr_type,\n-\t\t\t    build1 (ADDR_EXPR, dtable_ptr_type,\n-\t\t\t\t    class_dtable_decl),\n-\t\t\t    dtable_start_offset));\n+\t\t    (flag_indirect_classes \n+\t\t     ? null_pointer_node\n+\t\t     : build2 (PLUS_EXPR, dtable_ptr_type,\n+\t\t\t       build1 (ADDR_EXPR, dtable_ptr_type,\n+\t\t\t\t       class_dtable_decl),\n+\t\t\t       dtable_start_offset)));\n   if (! flag_hash_synchronization)\n     PUSH_FIELD_VALUE (temp, \"sync_info\", null_pointer_node);\n   FINISH_RECORD_CONSTRUCTOR (temp);"}, {"sha": "211e3a4e5d920e6e13ed4f1f98a61c08793bf560", "filename": "libjava/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e046c56eee0e7308f8704c8c13aa6ca5230201f1/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e046c56eee0e7308f8704c8c13aa6ca5230201f1/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=e046c56eee0e7308f8704c8c13aa6ca5230201f1", "patch": "@@ -1,3 +1,13 @@\n+2006-06-16  Andrew Haley  <aph@redhat.com>\n+\n+\t* java/lang/natClassLoader.cc (_Jv_NewClassFromInitializer): Don't\n+\tcopy the whole Class instance from the initializer: instead, copy\n+\teverything but the first word (the vtable pointer).\n+\tChange prototype to (const char* class_initializer).\n+\t(_Jv_RegisterNewClasses): Change prototype to (const char**).\n+\t* java/lang/Class.h (_Jv_RegisterNewClasses): Change prototype to\n+\t(const char**).\n+\n 2006-06-15  Thomas Fitzsimmons  <fitzsim@redhat.com>\n \n \t* classpath/Makefile.am: Do not recurse into tools directory."}, {"sha": "aafd00c23f6c39cd5a5218103044bc9d5810d02f", "filename": "libjava/java/lang/Class.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e046c56eee0e7308f8704c8c13aa6ca5230201f1/libjava%2Fjava%2Flang%2FClass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e046c56eee0e7308f8704c8c13aa6ca5230201f1/libjava%2Fjava%2Flang%2FClass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FClass.h?ref=e046c56eee0e7308f8704c8c13aa6ca5230201f1", "patch": "@@ -40,8 +40,8 @@ extern \"Java\"\n // We declare these here to avoid including gcj/cni.h.\n extern \"C\" void _Jv_InitClass (jclass klass);\n extern \"C\" jclass _Jv_NewClassFromInitializer \n-   (const jclass class_initializer);\n-extern \"C\" void _Jv_RegisterNewClasses (void **classes);\n+   (const char *class_initializer);\n+extern \"C\" void _Jv_RegisterNewClasses (char **classes);\n extern \"C\" void _Jv_RegisterClasses (const jclass *classes);\n extern \"C\" void _Jv_RegisterClasses_Counted (const jclass *classes,\n \t\t\t\t\t     size_t count);\n@@ -447,7 +447,7 @@ class java::lang::Class : public java::lang::Object\n \t\t\t\t\t       int method_idx);\n \n   friend void ::_Jv_InitClass (jclass klass);\n-  friend java::lang::Class* ::_Jv_NewClassFromInitializer (const jclass class_initializer);\n+  friend java::lang::Class* ::_Jv_NewClassFromInitializer (const char *class_initializer);\n   friend void _Jv_RegisterNewClasses (void **classes);\n \n   friend _Jv_Method* ::_Jv_LookupDeclaredMethod (jclass, _Jv_Utf8Const *, "}, {"sha": "b05c0b1045bea643141d9ac4364668c5de3d474b", "filename": "libjava/java/lang/natClassLoader.cc", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e046c56eee0e7308f8704c8c13aa6ca5230201f1/libjava%2Fjava%2Flang%2FnatClassLoader.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e046c56eee0e7308f8704c8c13aa6ca5230201f1/libjava%2Fjava%2Flang%2FnatClassLoader.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatClassLoader.cc?ref=e046c56eee0e7308f8704c8c13aa6ca5230201f1", "patch": "@@ -218,11 +218,20 @@ _Jv_RegisterClasses_Counted (const jclass * classes, size_t count)\n \n // Create a class on the heap from an initializer struct.\n jclass\n-_Jv_NewClassFromInitializer (const jclass class_initializer)\n+_Jv_NewClassFromInitializer (const char *class_initializer)\n {\n-  jclass new_class = (jclass)_Jv_AllocObj (sizeof *new_class,\n-\t\t\t\t\t   &java::lang::Class::class$);  \n-  memcpy ((void*)new_class, (void*)class_initializer, sizeof *new_class);\n+  /* We create an instance of java::lang::Class and copy all of its\n+     fields except the first word (the vtable pointer) from\n+     CLASS_INITIALIZER.  This first word is pre-initialized by\n+     _Jv_AllocObj, and we don't want to overwrite it.  */\n+\n+  jclass new_class\n+    = (jclass)_Jv_AllocObj (sizeof (java::lang::Class),\n+\t\t\t    &java::lang::Class::class$);\n+  const char *src = class_initializer + sizeof (void*);\n+  char *dst = (char*)new_class + sizeof (void*);\n+  size_t len = sizeof (*new_class) - sizeof (void*);\n+  memcpy (dst, src, len);\n \n   new_class->engine = &_Jv_soleIndirectCompiledEngine;\n \n@@ -240,13 +249,13 @@ _Jv_NewClassFromInitializer (const jclass class_initializer)\n // heap) and we write the address of the new class into the address\n // pointed to by the second word.\n void\n-_Jv_RegisterNewClasses (void **classes)\n+_Jv_RegisterNewClasses (char **classes)\n {\n   _Jv_InitGC ();\n \n-  jclass initializer;\n+  const char *initializer;\n \n-  while ((initializer = (jclass)*classes++))\n+  while ((initializer = *classes++))\n     {\n       jclass *class_ptr = (jclass *)*classes++;\n       *class_ptr = _Jv_NewClassFromInitializer (initializer);"}]}