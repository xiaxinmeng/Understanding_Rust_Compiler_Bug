{"sha": "1d0bafd9b0e507476c84a95d5d0f5d82ff7100f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQwYmFmZDliMGU1MDc0NzZjODRhOTVkNWQwZjVkODJmZjcxMDBmMw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2012-04-03T17:59:07Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2012-04-03T17:59:07Z"}, "message": "expr.c (get_bit_range): Add OFFSET parameter and adjust BITPOS.\n\n\t* expr.c (get_bit_range): Add OFFSET parameter and adjust BITPOS.\n\tChange type of BITOFFSET to signed.  Make sure the lower bound of\n\tthe computed range is non-negative by adjusting OFFSET and BITPOS.\n\t(expand_assignment): Adjust call to get_bit_range.\n\nFrom-SVN: r186110", "tree": {"sha": "23af0d377d06c888ad90b84e9d2dfa2d2421835c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/23af0d377d06c888ad90b84e9d2dfa2d2421835c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d0bafd9b0e507476c84a95d5d0f5d82ff7100f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d0bafd9b0e507476c84a95d5d0f5d82ff7100f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d0bafd9b0e507476c84a95d5d0f5d82ff7100f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d0bafd9b0e507476c84a95d5d0f5d82ff7100f3/comments", "author": null, "committer": null, "parents": [{"sha": "f4ea81123d3ff9daf97046a95b3a31a185501084", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4ea81123d3ff9daf97046a95b3a31a185501084", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4ea81123d3ff9daf97046a95b3a31a185501084"}], "stats": {"total": 80, "additions": 73, "deletions": 7}, "files": [{"sha": "e20c0e437cd7e0c3ab9c54034211901e6ccef3e3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d0bafd9b0e507476c84a95d5d0f5d82ff7100f3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d0bafd9b0e507476c84a95d5d0f5d82ff7100f3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1d0bafd9b0e507476c84a95d5d0f5d82ff7100f3", "patch": "@@ -1,3 +1,10 @@\n+2012-04-03  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* expr.c (get_bit_range): Add OFFSET parameter and adjust BITPOS.\n+\tChange type of BITOFFSET to signed.  Make sure the lower bound of\n+\tthe computed range is non-negative by adjusting OFFSET and BITPOS.\n+\t(expand_assignment): Adjust call to get_bit_range.\n+\n 2012-04-03  Sandeep Kumar Singh  <Sandeep.Singh2@kpitcummins.com>\n \n \t* h8300/h8300.c (h8300_current_function_monitor_function_p):"}, {"sha": "6caee3be7ac131afe49f422ce4584c68ddaaaf9b", "filename": "gcc/expr.c", "status": "modified", "additions": 28, "deletions": 7, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d0bafd9b0e507476c84a95d5d0f5d82ff7100f3/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d0bafd9b0e507476c84a95d5d0f5d82ff7100f3/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=1d0bafd9b0e507476c84a95d5d0f5d82ff7100f3", "patch": "@@ -4431,19 +4431,22 @@ optimize_bitfield_assignment_op (unsigned HOST_WIDE_INT bitsize,\n /* In the C++ memory model, consecutive bit fields in a structure are\n    considered one memory location.\n \n-   Given a COMPONENT_REF EXP at bit position BITPOS, this function\n+   Given a COMPONENT_REF EXP at position (BITPOS, OFFSET), this function\n    returns the bit range of consecutive bits in which this COMPONENT_REF\n-   belongs in.  The values are returned in *BITSTART and *BITEND.\n-   If the access does not need to be restricted 0 is returned in\n+   belongs.  The values are returned in *BITSTART and *BITEND.  *BITPOS\n+   and *OFFSET may be adjusted in the process.\n+\n+   If the access does not need to be restricted, 0 is returned in both\n    *BITSTART and *BITEND.  */\n \n static void\n get_bit_range (unsigned HOST_WIDE_INT *bitstart,\n \t       unsigned HOST_WIDE_INT *bitend,\n \t       tree exp,\n-\t       HOST_WIDE_INT bitpos)\n+\t       HOST_WIDE_INT *bitpos,\n+\t       tree *offset)\n {\n-  unsigned HOST_WIDE_INT bitoffset;\n+  HOST_WIDE_INT bitoffset;\n   tree field, repr;\n \n   gcc_assert (TREE_CODE (exp) == COMPONENT_REF);\n@@ -4490,7 +4493,25 @@ get_bit_range (unsigned HOST_WIDE_INT *bitstart,\n   bitoffset += (tree_low_cst (DECL_FIELD_BIT_OFFSET (field), 1)\n \t\t- tree_low_cst (DECL_FIELD_BIT_OFFSET (repr), 1));\n \n-  *bitstart = bitpos - bitoffset;\n+  /* If the adjustment is larger than bitpos, we would have a negative bit\n+     position for the lower bound and this may wreak havoc later.  This can\n+     occur only if we have a non-null offset, so adjust offset and bitpos\n+     to make the lower bound non-negative.  */\n+  if (bitoffset > *bitpos)\n+    {\n+      HOST_WIDE_INT adjust = bitoffset - *bitpos;\n+\n+      gcc_assert ((adjust % BITS_PER_UNIT) == 0);\n+      gcc_assert (*offset != NULL_TREE);\n+\n+      *bitpos += adjust;\n+      *offset\n+\t= size_binop (MINUS_EXPR, *offset, size_int (adjust / BITS_PER_UNIT));\n+      *bitstart = 0;\n+    }\n+  else\n+    *bitstart = *bitpos - bitoffset;\n+\n   *bitend = *bitstart + tree_low_cst (DECL_SIZE (repr), 1) - 1;\n }\n \n@@ -4595,7 +4616,7 @@ expand_assignment (tree to, tree from, bool nontemporal)\n \n       if (TREE_CODE (to) == COMPONENT_REF\n \t  && DECL_BIT_FIELD_TYPE (TREE_OPERAND (to, 1)))\n-\tget_bit_range (&bitregion_start, &bitregion_end, to, bitpos);\n+\tget_bit_range (&bitregion_start, &bitregion_end, to, &bitpos, &offset);\n \n       /* If we are going to use store_bit_field and extract_bit_field,\n \t make sure to_rtx will be safe for multiple use.  */"}, {"sha": "ca5c35adce8d968567e8f4d739020767db05fb65", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d0bafd9b0e507476c84a95d5d0f5d82ff7100f3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d0bafd9b0e507476c84a95d5d0f5d82ff7100f3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1d0bafd9b0e507476c84a95d5d0f5d82ff7100f3", "patch": "@@ -1,3 +1,8 @@\n+2012-04-03  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/pack18.adb: New test.\n+\t* gnat.dg/pack18_pkg.ads: New helper.\n+\n 2012-04-03  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/52808"}, {"sha": "857a6f9787e2e980109f8441e471b78bac491b5f", "filename": "gcc/testsuite/gnat.dg/pack18.adb", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d0bafd9b0e507476c84a95d5d0f5d82ff7100f3/gcc%2Ftestsuite%2Fgnat.dg%2Fpack18.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d0bafd9b0e507476c84a95d5d0f5d82ff7100f3/gcc%2Ftestsuite%2Fgnat.dg%2Fpack18.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fpack18.adb?ref=1d0bafd9b0e507476c84a95d5d0f5d82ff7100f3", "patch": "@@ -0,0 +1,12 @@\n+-- { dg-do run }\n+\n+with Pack18_Pkg; use Pack18_Pkg;\n+\n+procedure Pack18 is\n+   use Pack18_Pkg.Attributes_Tables;\n+   Table : Instance;\n+begin\n+   Init (Table);\n+   Set_Last (Table, 1);\n+   Table.Table (Last (Table)).N := 0;\n+end;"}, {"sha": "2b63fbab063899b669a02dda392f310b6d597a18", "filename": "gcc/testsuite/gnat.dg/pack18_pkg.ads", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d0bafd9b0e507476c84a95d5d0f5d82ff7100f3/gcc%2Ftestsuite%2Fgnat.dg%2Fpack18_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d0bafd9b0e507476c84a95d5d0f5d82ff7100f3/gcc%2Ftestsuite%2Fgnat.dg%2Fpack18_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fpack18_pkg.ads?ref=1d0bafd9b0e507476c84a95d5d0f5d82ff7100f3", "patch": "@@ -0,0 +1,21 @@\n+with GNAT.Dynamic_Tables;\n+\n+package Pack18_Pkg is\n+\n+   type String_Access is access String;\n+\n+   type Rec is record\n+      S : String_Access;\n+      B : Boolean;\n+      N : Natural;\n+   end record;\n+   pragma Pack (Rec);\n+\n+   package Attributes_Tables is new GNAT.Dynamic_Tables\n+     (Table_Component_Type => Rec,\n+      Table_Index_Type     => Natural,\n+      Table_Low_Bound      => 1,\n+      Table_Initial        => 200,\n+      Table_Increment      => 200);\n+\n+end Pack18_Pkg;"}]}