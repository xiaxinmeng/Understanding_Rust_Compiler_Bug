{"sha": "c443f3d51e4b8ff0298d1cacff67b2632e8a9264", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzQ0M2YzZDUxZTRiOGZmMDI5OGQxY2FjZmY2N2IyNjMyZThhOTI2NA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-05-11T14:40:28Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-05-11T14:40:28Z"}, "message": "decl.c (xref_tag_1): Don't frob ts_lambda scope here.\n\n\t* decl.c (xref_tag_1): Don't frob ts_lambda scope here.\n\t* name-lookup.c (pushtag_1): Deal with ts_lambda scope.\n\nFrom-SVN: r247909", "tree": {"sha": "64635e53ccf16b81688d5555d8ea53c39e561ed4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64635e53ccf16b81688d5555d8ea53c39e561ed4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c443f3d51e4b8ff0298d1cacff67b2632e8a9264", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c443f3d51e4b8ff0298d1cacff67b2632e8a9264", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c443f3d51e4b8ff0298d1cacff67b2632e8a9264", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c443f3d51e4b8ff0298d1cacff67b2632e8a9264/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2cd470921f6e8297cab3fbfbaa102e7245e660d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cd470921f6e8297cab3fbfbaa102e7245e660d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2cd470921f6e8297cab3fbfbaa102e7245e660d6"}], "stats": {"total": 36, "additions": 17, "deletions": 19}, "files": [{"sha": "6db47ed56bf47212318ae4707fad3b3676c5ea04", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c443f3d51e4b8ff0298d1cacff67b2632e8a9264/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c443f3d51e4b8ff0298d1cacff67b2632e8a9264/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c443f3d51e4b8ff0298d1cacff67b2632e8a9264", "patch": "@@ -1,5 +1,8 @@\n 2017-05-11  Nathan Sidwell  <nathan@acm.org>\n \n+\t* decl.c (xref_tag_1): Don't frob ts_lambda scope here.\n+\t* name-lookup.c (pushtag_1): Deal with ts_lambda scope.\n+\n \t* cp-tree.h (pushdecl, pushdecl_maybe_friend, pushtag,\n \tpushtag_top_level_maybe_friend,\n \tpushdecl_top_level_and_finish):\tMove declarations to ..."}, {"sha": "44276cc82d2b88e4333dbb6fbc2b01b99e0df2ee", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 7, "deletions": 17, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c443f3d51e4b8ff0298d1cacff67b2632e8a9264/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c443f3d51e4b8ff0298d1cacff67b2632e8a9264/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=c443f3d51e4b8ff0298d1cacff67b2632e8a9264", "patch": "@@ -13514,12 +13514,10 @@ lookup_and_check_tag (enum tag_types tag_code, tree name,\n \n static tree\n xref_tag_1 (enum tag_types tag_code, tree name,\n-            tag_scope orig_scope, bool template_header_p)\n+            tag_scope scope, bool template_header_p)\n {\n   enum tree_code code;\n-  tree t;\n   tree context = NULL_TREE;\n-  tag_scope scope;\n \n   gcc_assert (identifier_p (name));\n \n@@ -13539,19 +13537,12 @@ xref_tag_1 (enum tag_types tag_code, tree name,\n       gcc_unreachable ();\n     }\n \n-  if (orig_scope == ts_lambda)\n-    scope = ts_current;\n-  else\n-    scope = orig_scope;\n-\n   /* In case of anonymous name, xref_tag is only called to\n      make type node and push name.  Name lookup is not required.  */\n-  if (anon_aggrname_p (name))\n-    t = NULL_TREE;\n-  else\n-    t = lookup_and_check_tag  (tag_code, name,\n-\t\t\t       scope, template_header_p);\n-\n+  tree t = NULL_TREE;\n+  if (scope != ts_lambda && !anon_aggrname_p (name))\n+    t = lookup_and_check_tag  (tag_code, name, scope, template_header_p);\n+  \n   if (t == error_mark_node)\n     return error_mark_node;\n \n@@ -13617,9 +13608,8 @@ xref_tag_1 (enum tag_types tag_code, tree name,\n \t{\n \t  t = make_class_type (code);\n \t  TYPE_CONTEXT (t) = context;\n-\t  if (orig_scope == ts_lambda)\n-\t    /* Remember that we're declaring a lambda to avoid bogus errors\n-\t       in push_template_decl.  */\n+\t  if (scope == ts_lambda)\n+\t    /* Mark it as a lambda type.  */\n \t    CLASSTYPE_LAMBDA_EXPR (t) = error_mark_node;\n \t  t = pushtag (name, t, scope);\n \t}"}, {"sha": "552a75f4875413422718f11d44dfc2b04d981b90", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c443f3d51e4b8ff0298d1cacff67b2632e8a9264/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c443f3d51e4b8ff0298d1cacff67b2632e8a9264/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=c443f3d51e4b8ff0298d1cacff67b2632e8a9264", "patch": "@@ -6079,7 +6079,9 @@ pushtag_1 (tree name, tree type, tag_scope scope)\n \t    view of the language.  */\n \t || (b->kind == sk_template_parms\n \t     && (b->explicit_spec_p || scope == ts_global))\n+\t /* Pushing into a class is ok for lambdas or when we want current  */\n \t || (b->kind == sk_class\n+\t     && scope != ts_lambda\n \t     && (scope != ts_current\n \t\t /* We may be defining a new type in the initializer\n \t\t    of a static member variable. We allow this when\n@@ -6102,9 +6104,10 @@ pushtag_1 (tree name, tree type, tag_scope scope)\n \t  tree cs = current_scope ();\n \n \t  if (scope == ts_current\n+\t      || scope == ts_lambda\n \t      || (cs && TREE_CODE (cs) == FUNCTION_DECL))\n \t    context = cs;\n-\t  else if (cs != NULL_TREE && TYPE_P (cs))\n+\t  else if (cs && TYPE_P (cs))\n \t    /* When declaring a friend class of a local class, we want\n \t       to inject the newly named class into the scope\n \t       containing the local class, not the namespace\n@@ -6138,7 +6141,8 @@ pushtag_1 (tree name, tree type, tag_scope scope)\n \n       if (b->kind == sk_class)\n \t{\n-\t  if (!TYPE_BEING_DEFINED (current_class_type))\n+\t  if (!TYPE_BEING_DEFINED (current_class_type)\n+\t      && scope != ts_lambda)\n \t    return error_mark_node;\n \n \t  if (!PROCESSING_REAL_TEMPLATE_DECL_P ())\n@@ -6189,6 +6193,7 @@ pushtag_1 (tree name, tree type, tag_scope scope)\n \t    vec_safe_push (local_classes, type);\n \t}\n     }\n+\n   if (b->kind == sk_class\n       && !COMPLETE_TYPE_P (current_class_type))\n     {"}]}