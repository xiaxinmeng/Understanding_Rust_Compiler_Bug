{"sha": "d40055abb19399588b3dbeeefc76daaf227045fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQwMDU1YWJiMTkzOTk1ODhiM2RiZWVlZmM3NmRhYWYyMjcwNDVmZA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2007-07-20T18:10:57Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2007-07-20T18:10:57Z"}, "message": "tree-cfg.c (verify_expr): COND_EXPRs can have any integral typed condition.\n\n2007-07-20  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-cfg.c (verify_expr): COND_EXPRs can have any\n\tintegral typed condition.\n\t* tree-ssa.c (useless_type_conversion_p): Do not preserve\n\tbooleanness.  Only preserve conversions from a non-base\n\ttype to a base type, not in general between types with\n\tdifferent TYPE_MIN_VALUE or TYPE_MAX_VALUE.\n\t* tree.def (COND_EXPR): Document that the condition\n\tcan be of any integral type.\n\nFrom-SVN: r126804", "tree": {"sha": "556ceba04b72aa441d18c7f074ee5a57244e0fec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/556ceba04b72aa441d18c7f074ee5a57244e0fec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d40055abb19399588b3dbeeefc76daaf227045fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d40055abb19399588b3dbeeefc76daaf227045fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d40055abb19399588b3dbeeefc76daaf227045fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d40055abb19399588b3dbeeefc76daaf227045fd/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4d40a94f24868bb8b78586826ede11be038539d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d40a94f24868bb8b78586826ede11be038539d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d40a94f24868bb8b78586826ede11be038539d3"}], "stats": {"total": 43, "additions": 25, "deletions": 18}, "files": [{"sha": "9dbaf38ac16c2c912f06d554b84879c05b6188fd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d40055abb19399588b3dbeeefc76daaf227045fd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d40055abb19399588b3dbeeefc76daaf227045fd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d40055abb19399588b3dbeeefc76daaf227045fd", "patch": "@@ -1,3 +1,14 @@\n+2007-07-20  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-cfg.c (verify_expr): COND_EXPRs can have any\n+\tintegral typed condition.\n+\t* tree-ssa.c (useless_type_conversion_p): Do not preserve\n+\tbooleanness.  Only preserve conversions from a non-base\n+\ttype to a base type, not in general between types with\n+\tdifferent TYPE_MIN_VALUE or TYPE_MAX_VALUE.\n+\t* tree.def (COND_EXPR): Document that the condition\n+\tcan be of any integral type.\n+\n 2007-07-20  Nigel Stephens  <nigel@mips.com>\n \t    Richard Sandiford  <richard@codesourcery.com>\n "}, {"sha": "889e7d747d72c730f62003de5a62e195eebc0786", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d40055abb19399588b3dbeeefc76daaf227045fd/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d40055abb19399588b3dbeeefc76daaf227045fd/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=d40055abb19399588b3dbeeefc76daaf227045fd", "patch": "@@ -3201,9 +3201,9 @@ verify_expr (tree *tp, int *walk_subtrees, void *data ATTRIBUTE_UNUSED)\n \n     case COND_EXPR:\n       x = COND_EXPR_COND (t);\n-      if (TREE_CODE (TREE_TYPE (x)) != BOOLEAN_TYPE)\n+      if (!INTEGRAL_TYPE_P (TREE_TYPE (x)))\n \t{\n-\t  error (\"non-boolean used in condition\");\n+\t  error (\"non-integral used in condition\");\n \t  return x;\n \t}\n       if (!is_gimple_condexpr (x))"}, {"sha": "858745e683a867c4a6eabab339126e367ac82554", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d40055abb19399588b3dbeeefc76daaf227045fd/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d40055abb19399588b3dbeeefc76daaf227045fd/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=d40055abb19399588b3dbeeefc76daaf227045fd", "patch": "@@ -940,23 +940,18 @@ useless_type_conversion_p (tree outer_type, tree inner_type)\n \t  || TYPE_PRECISION (inner_type) != TYPE_PRECISION (outer_type))\n \treturn false;\n \n-      /* Preserve booleanness.  Some code assumes an invariant that boolean\n-\t types stay boolean and do not become 1-bit bit-field types.  */\n-      if ((TREE_CODE (inner_type) == BOOLEAN_TYPE)\n-\t  != (TREE_CODE (outer_type) == BOOLEAN_TYPE))\n+      /* Conversions from a non-base to a base type are not useless.\n+\t This way we preserve the invariant to do arithmetic in\n+\t base types only.  */\n+      if (TREE_TYPE (inner_type)\n+\t  && TREE_TYPE (inner_type) != inner_type\n+\t  && (TREE_TYPE (outer_type) == outer_type\n+\t      || TREE_TYPE (outer_type) == NULL_TREE))\n \treturn false;\n \n-      /* Preserve changes in the types minimum or maximum value.\n-\t ???  Due to the way we handle sizetype as signed we need\n-\t to jump through hoops here to make sizetype and size_type_node\n-\t compatible.  */\n-      if (!tree_int_cst_equal (fold_convert (outer_type,\n-\t\t\t\t\t     TYPE_MIN_VALUE (inner_type)),\n-\t\t\t       TYPE_MIN_VALUE (outer_type))\n-\t  || !tree_int_cst_equal (fold_convert (outer_type,\n-\t\t\t\t\t\tTYPE_MAX_VALUE (inner_type)),\n-\t\t\t\t  TYPE_MAX_VALUE (outer_type)))\n-\treturn false;\n+      /* We don't need to preserve changes in the types minimum or\n+\t maximum value in general as these do not generate code\n+\t unless the types precisions are different.  */\n \n       return true;\n     }"}, {"sha": "3b7750a909db3b5527e8ab8d0e794a71e5a32bec", "filename": "gcc/tree.def", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d40055abb19399588b3dbeeefc76daaf227045fd/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d40055abb19399588b3dbeeefc76daaf227045fd/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=d40055abb19399588b3dbeeefc76daaf227045fd", "patch": "@@ -485,7 +485,8 @@ DEFTREECODE (TARGET_EXPR, \"target_expr\", tcc_expression, 4)\n    Operand 0 may be of any type.\n    Operand 1 must have the same type as the entire expression, unless\n    it unconditionally throws an exception, in which case it should\n-   have VOID_TYPE.  The same constraints apply to operand 2.  */\n+   have VOID_TYPE.  The same constraints apply to operand 2.  The\n+   condition in operand 0 must be of integral type.  */\n DEFTREECODE (COND_EXPR, \"cond_expr\", tcc_expression, 3)\n \n /* Vector conditional expression. It is like COND_EXPR, but with"}]}