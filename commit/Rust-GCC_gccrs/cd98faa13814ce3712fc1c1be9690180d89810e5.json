{"sha": "cd98faa13814ce3712fc1c1be9690180d89810e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Q5OGZhYTEzODE0Y2UzNzEyZmMxYzFiZTk2OTAxODBkODk4MTBlNQ==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.co.uk", "date": "2002-07-09T22:21:37Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2002-07-09T22:21:37Z"}, "message": "cpperror.c (cpp_error): Default to directive_line within directives here.\n\n\t* cpperror.c (cpp_error): Default to directive_line within\n\tdirectives here.\n\t* cppexp.c (cpp_interpret_integer): Only use traditional\n\tnumber semantics in directives.\n\t* cpplib.c (prepare_directive_trad): Don't reset pfile->line.\n\t(do_include_common): Similarly.\n\t* cpptrad.c (scan_out_logical_line): Implement accurate\n\tquoting of <> in #include.\n\t* doc/cpp.texi: Update.\n\nFrom-SVN: r55347", "tree": {"sha": "e390f035173a9fd06a813df8aaf84b4cafa2f92f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e390f035173a9fd06a813df8aaf84b4cafa2f92f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd98faa13814ce3712fc1c1be9690180d89810e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd98faa13814ce3712fc1c1be9690180d89810e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd98faa13814ce3712fc1c1be9690180d89810e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd98faa13814ce3712fc1c1be9690180d89810e5/comments", "author": {"login": "neilb-xx", "id": 160762, "node_id": "MDQ6VXNlcjE2MDc2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/160762?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neilb-xx", "html_url": "https://github.com/neilb-xx", "followers_url": "https://api.github.com/users/neilb-xx/followers", "following_url": "https://api.github.com/users/neilb-xx/following{/other_user}", "gists_url": "https://api.github.com/users/neilb-xx/gists{/gist_id}", "starred_url": "https://api.github.com/users/neilb-xx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neilb-xx/subscriptions", "organizations_url": "https://api.github.com/users/neilb-xx/orgs", "repos_url": "https://api.github.com/users/neilb-xx/repos", "events_url": "https://api.github.com/users/neilb-xx/events{/privacy}", "received_events_url": "https://api.github.com/users/neilb-xx/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2ad65b0e91312a9f2fadd4abd9eb9d98b085920c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ad65b0e91312a9f2fadd4abd9eb9d98b085920c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ad65b0e91312a9f2fadd4abd9eb9d98b085920c"}], "stats": {"total": 137, "additions": 82, "deletions": 55}, "files": [{"sha": "8d3b35e84777760ccf8ae3f4ed6dd620adf0141c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd98faa13814ce3712fc1c1be9690180d89810e5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd98faa13814ce3712fc1c1be9690180d89810e5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cd98faa13814ce3712fc1c1be9690180d89810e5", "patch": "@@ -1,3 +1,15 @@\n+2002-07-09  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* cpperror.c (cpp_error): Default to directive_line within\n+\tdirectives here.\n+\t* cppexp.c (cpp_interpret_integer): Only use traditional\n+\tnumber semantics in directives.\n+\t* cpplib.c (prepare_directive_trad): Don't reset pfile->line.\n+\t(do_include_common): Similarly.\n+\t* cpptrad.c (scan_out_logical_line): Implement accurate\n+\tquoting of <> in #include.\n+\t* doc/cpp.texi: Update.\n+\n Tue Jul  9 22:37:44 2002  Stephen Clarke <stephen.clarke@superh.com>\n                           J\"orn Rennecke <joern.rennecke@superh.com>\n "}, {"sha": "360bc8ccef36f2a34959a23f1f9874bcf0d6e22a", "filename": "gcc/cpperror.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd98faa13814ce3712fc1c1be9690180d89810e5/gcc%2Fcpperror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd98faa13814ce3712fc1c1be9690180d89810e5/gcc%2Fcpperror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpperror.c?ref=cd98faa13814ce3712fc1c1be9690180d89810e5", "patch": "@@ -139,7 +139,10 @@ cpp_error VPARAMS ((cpp_reader * pfile, int level, const char *msgid, ...))\n     {\n       if (CPP_OPTION (pfile, traditional))\n \t{\n-\t  line = pfile->line;\n+\t  if (pfile->state.in_directive)\n+\t    line = pfile->directive_line;\n+\t  else\n+\t    line = pfile->line;\n \t  column = 0;\n \t}\n       else"}, {"sha": "44ee26b09cd529e5e09b622ab1a8188aa76f9e49", "filename": "gcc/cppexp.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd98faa13814ce3712fc1c1be9690180d89810e5/gcc%2Fcppexp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd98faa13814ce3712fc1c1be9690180d89810e5/gcc%2Fcppexp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppexp.c?ref=cd98faa13814ce3712fc1c1be9690180d89810e5", "patch": "@@ -377,9 +377,11 @@ cpp_interpret_integer (pfile, token, type)\n \t\t   \"integer constant is too large for its type\");\n       /* If too big to be signed, consider it unsigned.  Only warn for\n \t decimal numbers.  Traditional numbers were always signed (but\n-\t we still honour an explicit U suffix).  */\n+\t we still honour an explicit U suffix); but we only have\n+\t traditional semantics in directives.  */\n       else if (!result.unsignedp\n-\t       && !CPP_OPTION (pfile, traditional)\n+\t       && !(CPP_OPTION (pfile, traditional)\n+\t\t    && pfile->state.in_directive)\n \t       && !num_positive (result, precision))\n \t{\n \t  if (base == 10)"}, {"sha": "f61f7e68eadf5cd6d67885b5b6ba296d463325fa", "filename": "gcc/cpplib.c", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd98faa13814ce3712fc1c1be9690180d89810e5/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd98faa13814ce3712fc1c1be9690180d89810e5/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=cd98faa13814ce3712fc1c1be9690180d89810e5", "patch": "@@ -303,9 +303,6 @@ prepare_directive_trad (pfile)\n \t\t\t   pfile->out.cur - pfile->out.base);\n     }\n \n-  /* Report diagnostics on the line of the directive.  */\n-  pfile->line = pfile->directive_line;\n-\n   /* Stop ISO C from expanding anything.  */\n   pfile->state.prevent_expansion++;\n }\n@@ -689,10 +686,6 @@ do_include_common (pfile, type)\n \t  if (pfile->cb.include)\n \t    (*pfile->cb.include) (pfile, pfile->directive_line,\n \t\t\t\t  pfile->directive->name, header);\n-\n-\t  /* Revert to the correct line if traditional.  */\n-\t  if (CPP_OPTION (pfile, traditional))\n-\t    pfile->line = pfile->saved_line;\n \t  _cpp_execute_include (pfile, header, type);\n \t}\n     }"}, {"sha": "5063065daff1d0d8ae949ce454a3d236d608e7e0", "filename": "gcc/cpptrad.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd98faa13814ce3712fc1c1be9690180d89810e5/gcc%2Fcpptrad.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd98faa13814ce3712fc1c1be9690180d89810e5/gcc%2Fcpptrad.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpptrad.c?ref=cd98faa13814ce3712fc1c1be9690180d89810e5", "patch": "@@ -437,11 +437,13 @@ scan_out_logical_line (pfile, macro)\n   struct fun_macro fmacro;\n   unsigned int c, paren_depth = 0, quote;\n   enum ls lex_state = ls_none;\n+  bool header_ok;\n \n   fmacro.buff = NULL;\n \n  start_logical_line:\n   quote = 0;\n+  header_ok = pfile->state.angled_headers;\n   CUR (pfile->context) = pfile->buffer->cur;\n   RLIMIT (pfile->context) = pfile->buffer->rlimit;\n   pfile->out.cur = pfile->out.base;\n@@ -500,15 +502,12 @@ scan_out_logical_line (pfile, macro)\n \t  goto done;\n \n \tcase '<':\n-\t  if (pfile->state.angled_headers && !quote)\n+\t  if (header_ok)\n \t    quote = '>';\n \t  break;\n \tcase '>':\n \t  if (c == quote)\n-\t    {\n-\t      pfile->state.angled_headers = false;\n-\t      quote = 0;\n-\t    }\n+\t    quote = 0;\n \t  break;\n \n \tcase '\"':\n@@ -736,7 +735,9 @@ scan_out_logical_line (pfile, macro)\n \t  break;\n \t}\n \n-      /* Non-whitespace disables MI optimization.  */\n+      /* Non-whitespace disables MI optimization and stops treating\n+\t '<' as a quote in #include.  */\n+      header_ok = false;\n       if (!pfile->state.in_directive)\n \tpfile->mi_valid = false;\n "}, {"sha": "22f4953bc447bb5ea23b437d0b83fc0f81c78b8e", "filename": "gcc/doc/cpp.texi", "status": "modified", "additions": 55, "deletions": 39, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd98faa13814ce3712fc1c1be9690180d89810e5/gcc%2Fdoc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd98faa13814ce3712fc1c1be9690180d89810e5/gcc%2Fdoc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp.texi?ref=cd98faa13814ce3712fc1c1be9690180d89810e5", "patch": "@@ -224,6 +224,16 @@ of a program which does not expect them.  To get strict ISO Standard C,\n you should use the @option{-std=c89} or @option{-std=c99} options, depending\n on which version of the standard you want.  To get all the mandatory\n diagnostics, you must also use @option{-pedantic}.  @xref{Invocation}.\n+\n+This manual describes the behavior of the ISO preprocessor.  To\n+minimize gratuitous differences, where the ISO preprocessor's\n+behavior does not conflict with traditional semantics, the\n+traditional preprocessor should behave the same way.  The various\n+differences that do exist are detailed in the section @ref{Traditional\n+Mode}.\n+\n+For clarity, unless noted otherwise, references to @samp{CPP} in this\n+manual refer to GNU CPP.\n @c man end\n \n @menu\n@@ -238,7 +248,7 @@ diagnostics, you must also use @option{-pedantic}.  @xref{Invocation}.\n The preprocessor performs a series of textual transformations on its\n input.  These happen before all other processing.  Conceptually, they\n happen in a rigid order, and the entire file is run through each\n-transformation before the next one begins.  GNU CPP actually does them\n+transformation before the next one begins.  CPP actually does them\n all at once, for performance reasons.  These transformations correspond\n roughly to the first three ``phases of translation'' described in the C\n standard.\n@@ -249,7 +259,7 @@ standard.\n @cindex line endings\n The input file is read into memory and broken into lines.\n \n-GNU CPP expects its input to be a text file, that is, an unstructured\n+CPP expects its input to be a text file, that is, an unstructured\n stream of ASCII characters, with some characters indicating the end of a\n line of text.  Extended ASCII character sets, such as ISO Latin-1 or\n Unicode encoded in UTF-8, are also acceptable.  Character sets that are\n@@ -276,15 +286,16 @@ warning message.\n @item\n @cindex trigraphs\n @anchor{trigraphs}If trigraphs are enabled, they are replaced by their\n-corresponding single characters.\n+corresponding single characters.  By default GCC ignores trigraphs,\n+but if you request a strictly conforming mode with the @option{-std}\n+option, or you specify the @option{-trigraphs} option, then it\n+converts them.\n \n These are nine three-character sequences, all starting with @samp{??},\n that are defined by ISO C to stand for single characters.  They permit\n obsolete systems that lack some of C's punctuation to use C@.  For\n example, @samp{??/} stands for @samp{\\}, so @t{'??/n'} is a character\n-constant for a newline.  By default, GCC ignores trigraphs, but if you\n-request a strictly conforming mode with the @option{-std} option, then\n-it converts them.\n+constant for a newline.\n \n Trigraphs are not popular and many compilers implement them incorrectly.\n Portable code should not rely on trigraphs being either converted or\n@@ -886,7 +897,7 @@ because @code{FILE_FOO_SEEN} is defined.  The preprocessor will skip\n over the entire contents of the file, and the compiler will not see it\n twice.\n \n-GNU CPP optimizes even further.  It remembers when a header file has a\n+CPP optimizes even further.  It remembers when a header file has a\n wrapper @samp{#ifndef}.  If a subsequent @samp{#include} specifies that\n header, and the macro in the @samp{#ifndef} is still defined, it does\n not bother to rescan the file at all.\n@@ -1599,7 +1610,7 @@ or to paste its leading or trailing token with another token.  (But see\n below for an important special case for @samp{##}.)\n \n If your macro is complicated, you may want a more descriptive name for\n-the variable argument than @code{@w{__VA_ARGS__}}.  GNU CPP permits\n+the variable argument than @code{@w{__VA_ARGS__}}.  CPP permits\n this, as an extension.  You may write an argument name immediately\n before the @samp{@dots{}}; that name is used for the variable argument.\n The @code{eprintf} macro above could be written\n@@ -1674,7 +1685,7 @@ only named variable arguments.  On the other hand, if you are concerned\n with portability to other conforming implementations of C99, you should\n use only @code{@w{__VA_ARGS__}}.\n \n-Previous versions of GNU CPP implemented the comma-deletion extension\n+Previous versions of CPP implemented the comma-deletion extension\n much more generally.  We have restricted it in this release to minimize\n the differences from C99.  To get the same effect with both this and\n previous versions of GCC, the token preceding the special @samp{##} must\n@@ -1778,14 +1789,14 @@ eight characters and looks like @code{\"23:59:01\"}.\n In normal operation, this macro expands to the constant 1, to signify\n that this compiler conforms to ISO Standard C@.  If GNU CPP is used with\n a compiler other than GCC, this is not necessarily true; however, the\n-preprocessor always conforms to the standard, unless the\n+preprocessor always conforms to the standard unless the\n @option{-traditional-cpp} option is used.\n \n This macro is not defined if the @option{-traditional-cpp} option is used.\n \n On some hosts, the system compiler uses a different convention, where\n @code{__STDC__} is normally 0, but is 1 if the user specifies strict\n-conformance to the C Standard.  GNU CPP follows the host convention when\n+conformance to the C Standard.  CPP follows the host convention when\n processing system header files, but when processing user files\n @code{__STDC__} is always 1.  This has been reported to cause problems;\n for instance, some versions of Solaris provide X Windows headers that\n@@ -2115,7 +2126,7 @@ Occasionally it is convenient to use preprocessor directives within\n the arguments of a macro.  The C and C++ standards declare that\n behavior in these cases is undefined.\n \n-Versions of GNU CPP prior to 3.2 would reject such constructs with an\n+Versions of CPP prior to 3.2 would reject such constructs with an\n error message.  This was the only syntactic difference between normal\n functions and function-like macros, so it seemed attractive to remove\n this limitation, and people would often be surprised that they could\n@@ -2738,7 +2749,7 @@ good practice if there is a lot of @var{controlled text}, because it\n helps people match the @samp{#endif} to the corresponding @samp{#ifdef}.\n Older programs sometimes put @var{MACRO} directly after the\n @samp{#endif} without enclosing it in a comment.  This is invalid code\n-according to the C standard.  GNU CPP accepts it with a warning.  It\n+according to the C standard.  CPP accepts it with a warning.  It\n never affects which @samp{#ifndef} the @samp{#endif} matches.\n \n @findex #ifndef\n@@ -3074,7 +3085,7 @@ file it specifies, until something else happens to change that.\n constant: backslash escapes are interpreted.  This is different from\n @samp{#include}.\n \n-Previous versions of GNU CPP did not interpret escapes in @samp{#line};\n+Previous versions of CPP did not interpret escapes in @samp{#line};\n we have changed it because the standard requires they be interpreted,\n and most other compilers do.\n \n@@ -3340,9 +3351,8 @@ the preprocessing specified by the standard.  When GCC is given the\n preprocessor.\n \n GCC versions 3.2 and later only support traditional mode semantics in\n-the preprocessor, and not in the compiler.  This chapter outlines the\n-semantics we implemented in the traditional preprocessor that is\n-integrated into the compiler front end.\n+the preprocessor, and not in the compiler front ends.  This chapter\n+outlines the traditional preprocessor semantics we implemented.\n \n The implementation does not correspond precisely to the behavior of\n earlier versions of GCC, nor to any true traditional preprocessor.\n@@ -3363,10 +3373,10 @@ that actually matter.\n \n The traditional preprocessor does not decompose its input into tokens\n the same way a standards-conforming preprocessor does.  The input is\n-simply treated as a stream of text with minimal form imposed on it.\n+simply treated as a stream of text with minimal internal form.\n \n This implementation does not treat trigraphs (@pxref{trigraphs})\n-specially since they were created later during standardization.  It\n+specially since they were an invention of the standards committee.  It\n handles arbitrarily-positioned escaped newlines properly and splices\n the lines as you would expect; many traditional preprocessors did not\n do this.\n@@ -3378,13 +3388,15 @@ useful if, for example, you are preprocessing a Makefile.\n Traditional CPP only recognizes C-style block comments, and treats the\n @samp{/*} sequence as introducing a comment only if it lies outside\n quoted text.  Quoted text is introduced by the usual single and double\n-quotes, and also by @samp{<} in a @code{#include} directive.\n+quotes, and also by an initial @samp{<} in a @code{#include}\n+directive.\n \n Traditionally, comments are completely removed and are not replaced\n with a space.  Since a traditional compiler does its own tokenization\n-of the output of the preprocessor, comments can effectively be used as\n-token paste operators.  However, comments behave like separators for\n-text handled by the preprocessor itself.  For example, in\n+of the output of the preprocessor, this means that comments can\n+effectively be used as token paste operators.  However, comments\n+behave like separators for text handled by the preprocessor itself,\n+since it doesn't re-lex its input.  For example, in\n \n @smallexample\n #if foo/**/bar\n@@ -3476,9 +3488,9 @@ behavior to their ISO counterparts.  Their arguments are contained\n within parentheses, are comma-separated, and can cross physical lines.\n Commas within nested parentheses are not treated as argument\n separators.  Similarly, a quote in an argument cannot be left\n-unclosed; in other words a comma or parenthesis in quotes is treated\n-like any other character.  There is no facility for handling variadic\n-macros.\n+unclosed; a following comma or parenthesis that comes before the\n+closing quote is treated like any other character.  There is no\n+facility for handling variadic macros.\n \n This implementation removes all comments from macro arguments, unless\n the @option{-C} option is given.  The form of all other horizontal\n@@ -3506,12 +3518,12 @@ example\n \n @smallexample\n #define str(x) \"x\"\n-str(/* A comment */ some text)\n-     @expansion{} \" some text\"\n+str(/* A comment */some text )\n+     @expansion{} \"some text \"\n @end smallexample\n \n @noindent\n-Note that the comment is removed, but that the leading space is\n+Note that the comment is removed, but that the trailing space is\n preserved.  Here is an example of using a comment to effect token\n pasting.\n \n@@ -3547,6 +3559,10 @@ __STDC__ is not defined.\n @item\n If you use digraphs the behaviour is undefined.\n \n+@item\n+If a line that looks like a directive appears within macro arguments,\n+the behaviour is undefined.\n+\n @end itemize\n \n @node Traditional warnings\n@@ -3607,7 +3623,7 @@ reliance on behavior described here, as it is possible that it will\n change subtly in future implementations.\n \n Also documented here are obsolete features and changes from previous\n-versions of GNU CPP@.\n+versions of CPP@.\n \n @menu\n * Implementation-defined behavior::\n@@ -3620,7 +3636,7 @@ versions of GNU CPP@.\n @section Implementation-defined behavior\n @cindex implementation-defined behavior\n \n-This is how GNU CPP behaves in all the cases which the C standard\n+This is how CPP behaves in all the cases which the C standard\n describes as @dfn{implementation-defined}.  This term means that the\n implementation is free to do what it likes, but must document its choice\n and stick to it.\n@@ -3688,7 +3704,7 @@ pragmas.\n @section Implementation limits\n @cindex implementation limits\n \n-GNU CPP has a small number of internal limits.  This section lists the\n+CPP has a small number of internal limits.  This section lists the\n limits which the C standard requires to be no lower than some minimum,\n and all the others we are aware of.  We intend there to be as few limits\n as possible.  If you encounter an undocumented or inconvenient limit,\n@@ -3711,7 +3727,7 @@ The standard requires at least 15 levels.\n \n @item Nesting levels of conditional inclusion.\n \n-The C standard mandates this be at least 63.  GNU CPP is limited only by\n+The C standard mandates this be at least 63.  CPP is limited only by\n available memory.\n \n @item Levels of parenthesised expressions within a full expression.\n@@ -3726,7 +3742,7 @@ requires only that the first 63 be significant.\n \n @item Number of macros simultaneously defined in a single translation unit.\n \n-The standard requires at least 4095 be possible.  GNU CPP is limited only\n+The standard requires at least 4095 be possible.  CPP is limited only\n by available memory.\n \n @item Number of parameters in a macro definition and arguments in a macro call.\n@@ -3736,7 +3752,7 @@ required by the standard is 127.\n \n @item Number of characters on a logical source line.\n \n-The C standard requires a minimum of 4096 be permitted.  GNU CPP places\n+The C standard requires a minimum of 4096 be permitted.  CPP places\n no limits on this, but you may get incorrect column numbers reported in\n diagnostics for lines longer than 65,535 characters.\n \n@@ -3753,7 +3769,7 @@ may not be a limitation.\n @node Obsolete Features\n @section Obsolete Features\n \n-GNU CPP has a number of features which are present mainly for\n+CPP has a number of features which are present mainly for\n compatibility with older programs.  We discourage their use in new code.\n In some cases, we plan to remove the feature in a future version of GCC@.\n \n@@ -3849,7 +3865,7 @@ You can also make or cancel assertions using command line options.\n @node Obsolete once-only headers\n @subsection Obsolete once-only headers\n \n-GNU CPP supports two more ways of indicating that a header file should be\n+CPP supports two more ways of indicating that a header file should be\n read only once.  Neither one is as portable as a wrapper @samp{#ifndef},\n and we recommend you do not use them in new programs.\n \n@@ -3887,7 +3903,7 @@ in a portable program.\n @cindex differences from previous versions\n \n This section details behavior which has changed from previous versions\n-of GNU CPP@.  We do not plan to change it again in the near future, but\n+of CPP@.  We do not plan to change it again in the near future, but\n we do not promise not to, either.\n \n The ``previous versions'' discussed here are 2.95 and before.  The\n@@ -3936,7 +3952,7 @@ versions accepted it silently.\n \n Formerly, in a macro expansion, if @samp{##} appeared before a variable\n arguments parameter, and the set of tokens specified for that argument\n-in the macro invocation was empty, previous versions of GNU CPP would\n+in the macro invocation was empty, previous versions of CPP would\n back up and remove the preceding sequence of non-whitespace characters\n (@strong{not} the preceding token).  This extension is in direct\n conflict with the 1999 C standard and has been drastically pared back."}]}