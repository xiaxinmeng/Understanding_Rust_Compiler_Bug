{"sha": "7a5e036b61aa088e6b8564bc9383d37dfbb4801e", "node_id": "C_kwDOANBUbNoAKDdhNWUwMzZiNjFhYTA4OGU2Yjg1NjRiYzkzODNkMzdkZmJiNDgwMWU", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2022-02-14T15:56:35Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2022-03-10T11:06:28Z"}, "message": "[OpenACC privatization] Analyze 'lookup_decl'-translated DECL [PR90115, PR102330, PR104774]\n\n... so that it matches what we analyze and what we action on.\nFix-up for commit 29a2f51806c5b30e17a8d0e9ba7915a3c53c34ff \"openacc:\nAdd support for gang local storage allocation in shared memory [PR90115]\".\n\n\tPR middle-end/90115\n\tPR middle-end/102330\n\tPR middle-end/104774\n\tgcc/\n\t* omp-low.cc (oacc_privatization_candidate_p)\n\t(oacc_privatization_scan_clause_chain)\n\t(oacc_privatization_scan_decl_chain, lower_oacc_private_marker):\n\tAnalyze 'lookup_decl'-translated DECL.\n\tgcc/testsuite/\n\t* c-c++-common/goacc/kernels-decompose-pr104061-1-3.c: Adjust.\n\t* c-c++-common/goacc/kernels-decompose-pr104061-1-4.c: Likewise.\n\t* c-c++-common/goacc/kernels-decompose-pr104132-1.c: Likewise.\n\t* c-c++-common/goacc/kernels-decompose-pr104133-1.c: Likewise.\n\t* c-c++-common/goacc/kernels-decompose-pr104774-1.c: Likewise.\n\t* c-c++-common/goacc/privatization-1-compute-loop.c: Likewise.\n\t* c-c++-common/goacc/privatization-1-compute.c: Likewise.\n\t* c-c++-common/goacc/privatization-1-routine_gang-loop.c:\n\tLikewise.\n\t* c-c++-common/goacc/privatization-1-routine_gang.c: Likewise.\n\t* gfortran.dg/goacc-gomp/pr102330-1.f90: Likewise, and subsume...\n\t* gfortran.dg/goacc-gomp/pr102330-2.f90: ... this file, and...\n\t* gfortran.dg/goacc-gomp/pr102330-3.f90: ... this file.\n\t* gfortran.dg/goacc/privatization-1-compute-loop.f90: Adjust.\n\t* gfortran.dg/goacc/privatization-1-compute.f90: Likewise.\n\t* gfortran.dg/goacc/privatization-1-routine_gang-loop.f90:\n\tLikewise.\n\t* gfortran.dg/goacc/privatization-1-routine_gang.f90: Likewise.\n\tlibgomp/\n\t* testsuite/libgomp.oacc-c-c++-common/kernels-decompose-1.c:\n\tEnhance.\n\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-local-worker-1.c:\n\tAdjust.\n\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-local-worker-2.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-local-worker-3.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-local-worker-4.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-local-worker-5.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-vector-1.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-vector-2.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-worker-2.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-worker-3.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-worker-4.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-worker-5.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-worker-6.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-worker-7.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-fortran/optional-private.f90: Likewise.\n\t* testsuite/libgomp.oacc-fortran/privatized-ref-1.f95: Likewise.\n\t* testsuite/libgomp.oacc-fortran/privatized-ref-2.f90: Likewise.", "tree": {"sha": "6a17d8fba9704a9a415d920df814d2ed6933fda3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a17d8fba9704a9a415d920df814d2ed6933fda3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a5e036b61aa088e6b8564bc9383d37dfbb4801e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a5e036b61aa088e6b8564bc9383d37dfbb4801e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a5e036b61aa088e6b8564bc9383d37dfbb4801e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a5e036b61aa088e6b8564bc9383d37dfbb4801e/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "448741533a75862ebf51d8e73eb1dd1f6a47eec5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/448741533a75862ebf51d8e73eb1dd1f6a47eec5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/448741533a75862ebf51d8e73eb1dd1f6a47eec5"}], "stats": {"total": 357, "additions": 187, "deletions": 170}, "files": [{"sha": "d932d74cb037447893f982487d84517513614141", "filename": "gcc/omp-low.cc", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5e036b61aa088e6b8564bc9383d37dfbb4801e/gcc%2Fomp-low.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5e036b61aa088e6b8564bc9383d37dfbb4801e/gcc%2Fomp-low.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.cc?ref=7a5e036b61aa088e6b8564bc9383d37dfbb4801e", "patch": "@@ -10590,6 +10590,10 @@ oacc_privatization_candidate_p (const location_t loc, const tree c,\n \n   if (res && !VAR_P (decl))\n     {\n+      /* A PARM_DECL (appearing in a 'private' clause) is expected to have been\n+\t privatized into a new VAR_DECL.  */\n+      gcc_checking_assert (TREE_CODE (decl) != PARM_DECL);\n+\n       res = false;\n \n       if (dump_enabled_p ())\n@@ -10670,11 +10674,15 @@ oacc_privatization_scan_clause_chain (omp_context *ctx, tree clauses)\n       {\n \ttree decl = OMP_CLAUSE_DECL (c);\n \n-\tif (!oacc_privatization_candidate_p (OMP_CLAUSE_LOCATION (c), c, decl))\n+\ttree new_decl = lookup_decl (decl, ctx);\n+\n+\tif (!oacc_privatization_candidate_p (OMP_CLAUSE_LOCATION (c), c,\n+\t\t\t\t\t     new_decl))\n \t  continue;\n \n-\tgcc_checking_assert (!ctx->oacc_privatization_candidates.contains (decl));\n-\tctx->oacc_privatization_candidates.safe_push (decl);\n+\tgcc_checking_assert\n+\t  (!ctx->oacc_privatization_candidates.contains (new_decl));\n+\tctx->oacc_privatization_candidates.safe_push (new_decl);\n       }\n }\n \n@@ -10686,11 +10694,16 @@ oacc_privatization_scan_decl_chain (omp_context *ctx, tree decls)\n {\n   for (tree decl = decls; decl; decl = DECL_CHAIN (decl))\n     {\n-      if (!oacc_privatization_candidate_p (gimple_location (ctx->stmt), NULL, decl))\n+      tree new_decl = lookup_decl (decl, ctx);\n+      gcc_checking_assert (new_decl == decl);\n+\n+      if (!oacc_privatization_candidate_p (gimple_location (ctx->stmt), NULL,\n+\t\t\t\t\t   new_decl))\n \tcontinue;\n \n-      gcc_checking_assert (!ctx->oacc_privatization_candidates.contains (decl));\n-      ctx->oacc_privatization_candidates.safe_push (decl);\n+      gcc_checking_assert\n+\t(!ctx->oacc_privatization_candidates.contains (new_decl));\n+      ctx->oacc_privatization_candidates.safe_push (new_decl);\n     }\n }\n \n@@ -11557,17 +11570,7 @@ lower_oacc_private_marker (omp_context *ctx)\n   tree decl;\n   FOR_EACH_VEC_ELT (ctx->oacc_privatization_candidates, i, decl)\n     {\n-      for (omp_context *thisctx = ctx; thisctx; thisctx = thisctx->outer)\n-\t{\n-\t  tree inner_decl = maybe_lookup_decl (decl, thisctx);\n-\t  if (inner_decl)\n-\t    {\n-\t      decl = inner_decl;\n-\t      break;\n-\t    }\n-\t}\n-      gcc_checking_assert (decl);\n-\n+      gcc_checking_assert (TREE_ADDRESSABLE (decl));\n       tree addr = build_fold_addr_expr (decl);\n       args.safe_push (addr);\n     }"}, {"sha": "28d26e566f616b9cc62b4472947ed94c06b981fc", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-decompose-pr104061-1-3.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5e036b61aa088e6b8564bc9383d37dfbb4801e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr104061-1-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5e036b61aa088e6b8564bc9383d37dfbb4801e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr104061-1-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr104061-1-3.c?ref=7a5e036b61aa088e6b8564bc9383d37dfbb4801e", "patch": "@@ -29,8 +29,7 @@ foo (void)\n     /* { dg-note {forwarded loop nest in OpenACC 'kernels' region to 'parloops' for analysis} {} { target *-*-* } .+1 } */\n #pragma acc loop /* { dg-line l_loop_k1 } */\n     /* { dg-note {variable 'k' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_k1 } */\n-    /* { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {w/o debug} { target *-*-* } l_loop_k1 }\n-       { dg-bogus {note: variable 'k' in 'private' clause is candidate for adjusting OpenACC privatization level} {w/ debug} { xfail *-*-* } l_loop_k1 } */\n+    /* { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_k1 }\n     /* { dg-optimized {assigned OpenACC seq loop parallelism} {} { target *-*-* } l_loop_k1 } */\n     for (k = 0; k < 2; k++)\n       arr_0 += k;"}, {"sha": "4d125b5db87c0b0506d19eaaa19327905a335311", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-decompose-pr104061-1-4.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5e036b61aa088e6b8564bc9383d37dfbb4801e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr104061-1-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5e036b61aa088e6b8564bc9383d37dfbb4801e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr104061-1-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr104061-1-4.c?ref=7a5e036b61aa088e6b8564bc9383d37dfbb4801e", "patch": "@@ -29,8 +29,7 @@ foo (void)\n     /* { dg-note {forwarded loop nest in OpenACC 'kernels' region to 'parloops' for analysis} {} { target *-*-* } .+1 } */\n #pragma acc loop /* { dg-line l_loop_k1 } */\n     /* { dg-note {variable 'k' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_k1 } */\n-    /* { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {w/o debug} { target *-*-* } l_loop_k1 }\n-       { dg-bogus {note: variable 'k' in 'private' clause is candidate for adjusting OpenACC privatization level} {w/ debug} { xfail *-*-* } l_loop_k1 } */\n+    /* { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_k1 }\n     /* { dg-optimized {assigned OpenACC seq loop parallelism} {} { target *-*-* } l_loop_k1 } */\n     for (k = 0; k < 2; k++)\n       arr_0 += k;"}, {"sha": "36a43ca6d1a943941d11e5f3dc2700b635f26b48", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-decompose-pr104132-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5e036b61aa088e6b8564bc9383d37dfbb4801e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr104132-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5e036b61aa088e6b8564bc9383d37dfbb4801e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr104132-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr104132-1.c?ref=7a5e036b61aa088e6b8564bc9383d37dfbb4801e", "patch": "@@ -20,14 +20,14 @@ foo (void)\n \n     /* { dg-note {forwarded loop nest in OpenACC 'kernels' region to 'parloops' for analysis} {} { target *-*-* } .+1 } */\n #pragma acc loop /* { dg-line l_loop_k1 } */\n-    /* { dg-note {variable 'k' in 'private' clause is candidate for adjusting OpenACC privatization level} {} { target *-*-* } l_loop_k1 } */\n+    /* { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_k1 } */\n     /* { dg-optimized {assigned OpenACC seq loop parallelism} {} { target *-*-* } l_loop_k1 } */\n     for (k = 0; k < 2; k++)\n       arr_0 = k;\n \n     /* { dg-note {forwarded loop nest in OpenACC 'kernels' region to 'parloops' for analysis} {} { target *-*-* } .+1 } */\n #pragma acc loop /* { dg-line l_loop_k2 } */\n-    /* { dg-note {variable 'k' in 'private' clause is candidate for adjusting OpenACC privatization level} {} { target *-*-* } l_loop_k2 } */\n+    /* { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_k2 } */\n     /* { dg-optimized {assigned OpenACC seq loop parallelism} {} { target *-*-* } l_loop_k2 } */\n     for (k = 0; k < 2; k++)\n       arr_0 = k;"}, {"sha": "d9da9dae14c5a46bb9bc0f8468b47318af03a7ea", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-decompose-pr104133-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5e036b61aa088e6b8564bc9383d37dfbb4801e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr104133-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5e036b61aa088e6b8564bc9383d37dfbb4801e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr104133-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr104133-1.c?ref=7a5e036b61aa088e6b8564bc9383d37dfbb4801e", "patch": "@@ -22,14 +22,14 @@ foo (void)\n \n     /* { dg-note {forwarded loop nest in OpenACC 'kernels' region to 'parloops' for analysis} {} { target *-*-* } .+1 } */\n #pragma acc loop /* { dg-line l_loop_k1 } */\n-    /* { dg-note {variable 'k' in 'private' clause is candidate for adjusting OpenACC privatization level} {} { target *-*-* } l_loop_k1 } */\n+    /* { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_k1 } */\n     /* { dg-optimized {assigned OpenACC seq loop parallelism} {} { target *-*-* } l_loop_k1 } */\n     for (k = 0; k < 2; k++)\n       arr_0 += k;\n \n     /* { dg-note {forwarded loop nest in OpenACC 'kernels' region to 'parloops' for analysis} {} { target *-*-* } .+1 } */\n #pragma acc loop /* { dg-line l_loop_k2 } */\n-    /* { dg-note {variable 'k' in 'private' clause is candidate for adjusting OpenACC privatization level} {} { target *-*-* } l_loop_k2 } */\n+    /* { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_k2 } */\n     /* { dg-optimized {assigned OpenACC seq loop parallelism} {} { target *-*-* } l_loop_k2 } */\n     for (k = 0; k < 2; k++)\n       arr_0 += k;"}, {"sha": "42faa48f991f433ebd11d8d1a4cee7f34559544a", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-decompose-pr104774-1.c", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5e036b61aa088e6b8564bc9383d37dfbb4801e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr104774-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5e036b61aa088e6b8564bc9383d37dfbb4801e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr104774-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr104774-1.c?ref=7a5e036b61aa088e6b8564bc9383d37dfbb4801e", "patch": "@@ -1,8 +1,5 @@\n /* { dg-additional-options \"--param openacc-kernels=decompose\" } */\n \n-/* { dg-additional-options \"-fchecking\" }\n-   { dg-ice TODO } */\n-\n /* { dg-additional-options \"-fopt-info-all-omp\" } */\n \n /* { dg-additional-options \"--param=openacc-privatization=noisy\" }\n@@ -24,18 +21,16 @@ foo (void)\n \n     /* { dg-note {parallelized loop nest in OpenACC 'kernels' region} {} { target *-*-* } .+1 } */\n #pragma acc loop seq /* { dg-line l_loop_k1 } */\n-    /* { dg-note {variable 'k' in 'private' clause is candidate for adjusting OpenACC privatization level} {} { target *-*-* } l_loop_k1 } */\n+    /* { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_k1 } */\n+    /* { dg-optimized {assigned OpenACC seq loop parallelism} {} { target *-*-* } l_loop_k1 } */\n     for (k = 0; k < 2; k++)\n       arr_0 = k;\n \n     /* { dg-note {parallelized loop nest in OpenACC 'kernels' region} {} { target *-*-* } .+1 } */\n #pragma acc loop independent reduction(+: arr_0) /* { dg-line l_loop_k2 } */\n-    /* { dg-note {variable 'k' in 'private' clause is candidate for adjusting OpenACC privatization level} {} { target *-*-* } l_loop_k2 } */\n+    /* { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_k2 } */\n+    /* { dg-optimized {assigned OpenACC gang vector loop parallelism} {} { target *-*-* } l_loop_k2 } */\n     for (k = 0; k < 2; k++)\n       arr_0 += k;\n   }\n }\n-/* { dg-bogus {error: non-register as LHS of binary operation} {} { xfail *-*-* } .-1 }\n-   { dg-bogus {error: invalid RHS for gimple memory store: 'var_decl'} {} { xfail *-*-* } .-2 }\n-   { dg-allow-blank-lines-in-output 1 }\n-   { dg-excess-errors ICE } */"}, {"sha": "52d5598c28b8fbb59d363c6261048e6338d08090", "filename": "gcc/testsuite/c-c++-common/goacc/privatization-1-compute-loop.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5e036b61aa088e6b8564bc9383d37dfbb4801e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fprivatization-1-compute-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5e036b61aa088e6b8564bc9383d37dfbb4801e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fprivatization-1-compute-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fprivatization-1-compute-loop.c?ref=7a5e036b61aa088e6b8564bc9383d37dfbb4801e", "patch": "@@ -74,11 +74,14 @@ f (int i, int j, int a)\n      { dg-note {variable 's' ought to be adjusted for OpenACC privatization level: 'vector'} \"\" { target *-*-* } l_loop$c_loop } */\n   /* { dg-note {variable 'e' in 'private' clause is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } l_loop$c_loop }\n      { dg-note {variable 'e' ought to be adjusted for OpenACC privatization level: 'vector'} \"\" { target *-*-* } l_loop$c_loop } */\n-  /* { dg-note {variable 'a' in 'private' clause potentially has improper OpenACC privatization level: 'parm_decl'} \"TODO\" { target *-*-* } l_loop$c_loop } */\n+  /* { dg-note {variable 'a' in 'private' clause is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } l_loop$c_loop }\n+     { dg-note {variable 'a' ought to be adjusted for OpenACC privatization level: 'vector'} \"\" { target *-*-* } l_loop$c_loop } */\n   /* { dg-note {variable 'j\\.1' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n   /* { dg-note {variable 'i\\.0' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n-  /* { dg-note {variable 'j' in 'private' clause potentially has improper OpenACC privatization level: 'parm_decl'} \"TODO\" { target *-*-* } l_loop$c_loop } */\n-  /* { dg-note {variable 'i' in 'private' clause potentially has improper OpenACC privatization level: 'parm_decl'} \"TODO\" { target *-*-* } l_loop$c_loop } */\n+  /* { dg-note {variable 'j' in 'private' clause is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } l_loop$c_loop }\n+     { dg-note {variable 'j' ought to be adjusted for OpenACC privatization level: 'vector'} \"\" { target *-*-* } l_loop$c_loop } */\n+  /* { dg-note {variable 'i' in 'private' clause is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } l_loop$c_loop }\n+     { dg-note {variable 'i' ought to be adjusted for OpenACC privatization level: 'vector'} \"\" { target *-*-* } l_loop$c_loop } */\n   /* { dg-note {variable 'll' declared in block potentially has improper OpenACC privatization level: 'label_decl'} \"TODO\" { target *-*-* } l_loop$c_loop } */\n   /* { dg-note {variable 'struct struct s_ss' declared in block potentially has improper OpenACC privatization level: 'type_decl'} \"TODO\" { target c } l_loop$c_loop }\n      { dg-note {variable 's_ss' declared in block potentially has improper OpenACC privatization level: 'type_decl'} \"TODO\" { target c++ } l_loop$c_loop } */"}, {"sha": "ae0d3ab8498ca26dcf4504808cf2af046b54d981", "filename": "gcc/testsuite/c-c++-common/goacc/privatization-1-compute.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5e036b61aa088e6b8564bc9383d37dfbb4801e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fprivatization-1-compute.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5e036b61aa088e6b8564bc9383d37dfbb4801e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fprivatization-1-compute.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fprivatization-1-compute.c?ref=7a5e036b61aa088e6b8564bc9383d37dfbb4801e", "patch": "@@ -71,9 +71,12 @@ f (int i, int j, int a)\n      { dg-note {variable 's' ought to be adjusted for OpenACC privatization level: 'gang'} \"TODO\" { xfail *-*-* } l_compute$c_compute } */\n   /* { dg-note {variable 'e' in 'private' clause is candidate for adjusting OpenACC privatization level} \"TODO\" { xfail *-*-* } l_compute$c_compute }\n      { dg-note {variable 'e' ought to be adjusted for OpenACC privatization level: 'gang'} \"TODO\" { xfail *-*-* } l_compute$c_compute } */\n-  /* { dg-note {variable 'a' in 'private' clause potentially has improper OpenACC privatization level: 'parm_decl'} \"TODO\" { xfail *-*-* } l_compute$c_compute } */\n-  /* { dg-note {variable 'j' in 'private' clause potentially has improper OpenACC privatization level: 'parm_decl'} \"TODO\" { xfail *-*-* } l_compute$c_compute } */\n-  /* { dg-note {variable 'i' in 'private' clause potentially has improper OpenACC privatization level: 'parm_decl'} \"TODO\" { xfail *-*-* } l_compute$c_compute } */\n+  /* { dg-note {variable 'a' in 'private' clause is candidate for adjusting OpenACC privatization level} \"TODO\" { xfail *-*-* } l_compute$c_compute }\n+     { dg-note {variable 'a' ought to be adjusted for OpenACC privatization level: 'gang'} \"TODO\" { xfail *-*-* } l_compute$c_compute } */\n+  /* { dg-note {variable 'j' in 'private' clause is candidate for adjusting OpenACC privatization level} \"TODO\" { xfail *-*-* } l_compute$c_compute }\n+     { dg-note {variable 'j' ought to be adjusted for OpenACC privatization level: 'gang'} \"TODO\" { xfail *-*-* } l_compute$c_compute } */\n+  /* { dg-note {variable 'i' in 'private' clause is candidate for adjusting OpenACC privatization level} \"TODO\" { xfail *-*-* } l_compute$c_compute }\n+     { dg-note {variable 'i' ought to be adjusted for OpenACC privatization level: 'gang'} \"TODO\" { xfail *-*-* } l_compute$c_compute } */\n   /* { dg-note {variable 'll' declared in block potentially has improper OpenACC privatization level: 'label_decl'} \"TODO\" { target *-*-* } l_compute$c_compute } */\n   /* { dg-note {variable 'struct struct s_ss' declared in block potentially has improper OpenACC privatization level: 'type_decl'} \"TODO\" { target c } l_compute$c_compute }\n      { dg-note {variable 's_ss' declared in block potentially has improper OpenACC privatization level: 'type_decl'} \"TODO\" { target c++ } l_compute$c_compute } */"}, {"sha": "d394d058bf793f25a6f7ea99e7fb7bab5815a5ff", "filename": "gcc/testsuite/c-c++-common/goacc/privatization-1-routine_gang-loop.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5e036b61aa088e6b8564bc9383d37dfbb4801e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fprivatization-1-routine_gang-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5e036b61aa088e6b8564bc9383d37dfbb4801e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fprivatization-1-routine_gang-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fprivatization-1-routine_gang-loop.c?ref=7a5e036b61aa088e6b8564bc9383d37dfbb4801e", "patch": "@@ -74,11 +74,14 @@ f (int i, int j, int a)\n      { dg-note {variable 's' ought to be adjusted for OpenACC privatization level: 'vector'} \"\" { target *-*-* } l_loop$c_loop } */\n   /* { dg-note {variable 'e' in 'private' clause is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } l_loop$c_loop }\n      { dg-note {variable 'e' ought to be adjusted for OpenACC privatization level: 'vector'} \"\" { target *-*-* } l_loop$c_loop } */\n-  /* { dg-note {variable 'a' in 'private' clause potentially has improper OpenACC privatization level: 'parm_decl'} \"TODO\" { target *-*-* } l_loop$c_loop } */\n+  /* { dg-note {variable 'a' in 'private' clause is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } l_loop$c_loop }\n+     { dg-note {variable 'a' ought to be adjusted for OpenACC privatization level: 'vector'} \"\" { target *-*-* } l_loop$c_loop } */\n   /* { dg-note {variable 'j\\.1' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n   /* { dg-note {variable 'i\\.0' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop } */\n-  /* { dg-note {variable 'j' in 'private' clause potentially has improper OpenACC privatization level: 'parm_decl'} \"TODO\" { target *-*-* } l_loop$c_loop } */\n-  /* { dg-note {variable 'i' in 'private' clause potentially has improper OpenACC privatization level: 'parm_decl'} \"TODO\" { target *-*-* } l_loop$c_loop } */\n+  /* { dg-note {variable 'j' in 'private' clause is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } l_loop$c_loop }\n+     { dg-note {variable 'j' ought to be adjusted for OpenACC privatization level: 'vector'} \"\" { target *-*-* } l_loop$c_loop } */\n+  /* { dg-note {variable 'i' in 'private' clause is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } l_loop$c_loop }\n+     { dg-note {variable 'i' ought to be adjusted for OpenACC privatization level: 'vector'} \"\" { target *-*-* } l_loop$c_loop } */\n   /* { dg-note {variable 'll' declared in block potentially has improper OpenACC privatization level: 'label_decl'} \"TODO\" { target *-*-* } l_loop$c_loop } */\n   /* { dg-note {variable 'struct struct s_ss' declared in block potentially has improper OpenACC privatization level: 'type_decl'} \"TODO\" { target c } l_loop$c_loop }\n      { dg-note {variable 's_ss' declared in block potentially has improper OpenACC privatization level: 'type_decl'} \"TODO\" { target c++ } l_loop$c_loop } */"}, {"sha": "1aef803b9a7235d3cd63976653055b962a4a7f60", "filename": "gcc/testsuite/c-c++-common/goacc/privatization-1-routine_gang.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5e036b61aa088e6b8564bc9383d37dfbb4801e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fprivatization-1-routine_gang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5e036b61aa088e6b8564bc9383d37dfbb4801e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fprivatization-1-routine_gang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fprivatization-1-routine_gang.c?ref=7a5e036b61aa088e6b8564bc9383d37dfbb4801e", "patch": "@@ -75,9 +75,12 @@ f (int i, int j, int a)\n      { dg-note {variable 's' ought to be adjusted for OpenACC privatization level: 'gang'} \"TODO\" { xfail *-*-* } l_routine$c_routine } */\n   /* { dg-note {variable 'e' declared in block is candidate for adjusting OpenACC privatization level} \"TODO\" { xfail *-*-* } l_routine$c_routine }\n      { dg-note {variable 'e' ought to be adjusted for OpenACC privatization level: 'gang'} \"TODO\" { xfail *-*-* } l_routine$c_routine } */\n-  /* { dg-note {variable 'a' declared in block potentially has improper OpenACC privatization level: 'parm_decl'} \"TODO\" { xfail *-*-* } l_routine$c_routine } */\n-  /* { dg-note {variable 'j' declared in block potentially has improper OpenACC privatization level: 'parm_decl'} \"TODO\" { xfail *-*-* } l_routine$c_routine } */\n-  /* { dg-note {variable 'i' declared in block potentially has improper OpenACC privatization level: 'parm_decl'} \"TODO\" { xfail *-*-* } l_routine$c_routine } */\n+  /* { dg-note {variable 'a' declared in block is candidate for adjusting OpenACC privatization level} \"TODO\" { xfail *-*-* } l_routine$c_routine }\n+     { dg-note {variable 'a' ought to be adjusted for OpenACC privatization level: 'gang'} \"TODO\" { xfail *-*-* } l_routine$c_routine } */\n+  /* { dg-note {variable 'j' declared in block is candidate for adjusting OpenACC privatization level} \"TODO\" { xfail *-*-* } l_routine$c_routine }\n+     { dg-note {variable 'j' ought to be adjusted for OpenACC privatization level: 'gang'} \"TODO\" { xfail *-*-* } l_routine$c_routine } */\n+  /* { dg-note {variable 'i' declared in block is candidate for adjusting OpenACC privatization level} \"TODO\" { xfail *-*-* } l_routine$c_routine }\n+     { dg-note {variable 'i' ought to be adjusted for OpenACC privatization level: 'gang'} \"TODO\" { xfail *-*-* } l_routine$c_routine } */\n   /* { dg-note {variable 'll' declared in block potentially has improper OpenACC privatization level: 'label_decl'} \"TODO\" { xfail *-*-* } l_routine$c_routine } */\n   /* { dg-note {variable 'struct struct s_ss' declared in block potentially has improper OpenACC privatization level: 'type_decl'} \"TODO\" { target c xfail *-*-* } l_routine$c_routine }\n      { dg-note {variable 's_ss' declared in block potentially has improper OpenACC privatization level: 'type_decl'} \"TODO\" { target c++ xfail *-*-* } l_routine$c_routine } */"}, {"sha": "025bcbf881ef99efc377bb01e106ce2e419423b6", "filename": "gcc/testsuite/gfortran.dg/goacc-gomp/pr102330-1.f90", "status": "modified", "additions": 24, "deletions": 9, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5e036b61aa088e6b8564bc9383d37dfbb4801e/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc-gomp%2Fpr102330-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5e036b61aa088e6b8564bc9383d37dfbb4801e/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc-gomp%2Fpr102330-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc-gomp%2Fpr102330-1.f90?ref=7a5e036b61aa088e6b8564bc9383d37dfbb4801e", "patch": "@@ -1,20 +1,35 @@\n-! { dg-additional-options -fchecking }\n-! { dg-ice TODO }\n-\n ! { dg-additional-options -fopt-info-omp-note }\n \n ! { dg-additional-options --param=openacc-privatization=noisy }\n \n-program p\n+subroutine r1\n   !$omp master taskloop simd\n   do i = 1, 8\n   end do\n   !$acc parallel loop ! { dg-line l_compute1 }\n-  ! { dg-note {variable 'i' in 'private' clause is candidate for adjusting OpenACC privatization level} {} { target *-*-* } l_compute1 }\n+  ! { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute1 }\n+  do i = 1, 8\n+  end do\n+end\n+\n+subroutine r2\n+  !$omp taskloop lastprivate(i)\n+  do i = 1, 8\n+  end do\n+  !$acc parallel loop ! { dg-line l_compute2 }\n+  ! { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute2 }\n+  do i = 1, 8\n+  end do\n+end\n+\n+subroutine r3\n+  i = 0\n+  !$omp task shared(i)\n+  i = 1\n+  !$omp end task\n+  !$omp taskwait\n+  !$acc parallel loop ! { dg-line l_compute3 }\n+  ! { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute3 }\n   do i = 1, 8\n   end do\n end\n-! { dg-bogus {Error: non-register as LHS of binary operation} TODO { target { ! offloading_enabled } xfail *-*-* } .-1 }\n-! { dg-bogus {error: non-register as LHS of binary operation} TODO { target offloading_enabled xfail *-*-* } .-2 }\n-! TODO See PR101551 for 'offloading_enabled' differences.\n-! { dg-excess-errors ICE }"}, {"sha": "7a1ce8b088c69cf330ff2cc2f16001a6c704df4e", "filename": "gcc/testsuite/gfortran.dg/goacc-gomp/pr102330-2.f90", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/448741533a75862ebf51d8e73eb1dd1f6a47eec5/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc-gomp%2Fpr102330-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/448741533a75862ebf51d8e73eb1dd1f6a47eec5/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc-gomp%2Fpr102330-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc-gomp%2Fpr102330-2.f90?ref=448741533a75862ebf51d8e73eb1dd1f6a47eec5", "patch": "@@ -1,20 +0,0 @@\n-! { dg-additional-options -fchecking }\n-! { dg-ice TODO }\n-\n-! { dg-additional-options -fopt-info-omp-note }\n-\n-! { dg-additional-options --param=openacc-privatization=noisy }\n-\n-program p\n-  !$omp taskloop lastprivate(i)\n-  do i = 1, 8\n-  end do\n-  !$acc parallel loop ! { dg-line l_compute1 }\n-  ! { dg-note {variable 'i' in 'private' clause is candidate for adjusting OpenACC privatization level} {} { target *-*-* } l_compute1 }\n-  do i = 1, 8\n-  end do\n-end\n-! { dg-bogus {Error: non-register as LHS of binary operation} TODO { target { ! offloading_enabled } xfail *-*-* } .-1 }\n-! { dg-bogus {error: non-register as LHS of binary operation} TODO { target offloading_enabled xfail *-*-* } .-2 }\n-! TODO See PR101551 for 'offloading_enabled' differences.\n-! { dg-excess-errors ICE }"}, {"sha": "b8b1479c7ea574e4210cffee903c58821712c8ea", "filename": "gcc/testsuite/gfortran.dg/goacc-gomp/pr102330-3.f90", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/448741533a75862ebf51d8e73eb1dd1f6a47eec5/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc-gomp%2Fpr102330-3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/448741533a75862ebf51d8e73eb1dd1f6a47eec5/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc-gomp%2Fpr102330-3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc-gomp%2Fpr102330-3.f90?ref=448741533a75862ebf51d8e73eb1dd1f6a47eec5", "patch": "@@ -1,22 +0,0 @@\n-! { dg-additional-options -fchecking }\n-! { dg-ice TODO }\n-\n-! { dg-additional-options -fopt-info-omp-note }\n-\n-! { dg-additional-options --param=openacc-privatization=noisy }\n-\n-program p\n-  i = 0\n-  !$omp task shared(i)\n-  i = 1\n-  !$omp end task\n-  !$omp taskwait\n-  !$acc parallel loop ! { dg-line l_compute1 }\n-  ! { dg-note {variable 'i' in 'private' clause is candidate for adjusting OpenACC privatization level} {} { target *-*-* } l_compute1 }\n-  do i = 1, 8\n-  end do\n-end\n-! { dg-bogus {Error: non-register as LHS of binary operation} TODO { target { ! offloading_enabled } xfail *-*-* } .-1 }\n-! { dg-bogus {error: non-register as LHS of binary operation} TODO { target offloading_enabled xfail *-*-* } .-2 }\n-! TODO See PR101551 for 'offloading_enabled' differences.\n-! { dg-excess-errors ICE }"}, {"sha": "4dfeb7e07a2860c4eabc41008e84de074cd050f0", "filename": "gcc/testsuite/gfortran.dg/goacc/privatization-1-compute-loop.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5e036b61aa088e6b8564bc9383d37dfbb4801e/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fprivatization-1-compute-loop.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5e036b61aa088e6b8564bc9383d37dfbb4801e/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fprivatization-1-compute-loop.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fprivatization-1-compute-loop.f90?ref=7a5e036b61aa088e6b8564bc9383d37dfbb4801e", "patch": "@@ -47,9 +47,9 @@ subroutine f (i, j, a)\n        end do\n     end do\n     ! { dg-note {variable 'count\\.[0-9]+' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n-    ! { dg-note {variable 'i' in 'private' clause potentially has improper OpenACC privatization level: 'parm_decl'} \"TODO\" { target *-*-* } l_loop$c_loop }\n-    ! { dg-note {variable 'j' in 'private' clause potentially has improper OpenACC privatization level: 'parm_decl'} \"TODO\" { target *-*-* } l_loop$c_loop }\n-    ! { dg-note {variable 'a' in 'private' clause potentially has improper OpenACC privatization level: 'parm_decl'} \"TODO\" { target *-*-* } l_loop$c_loop }\n+    ! { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n+    ! { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n+    ! { dg-note {variable 'a' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n     ! { dg-note {variable 'x' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n     ! { dg-note {variable 'y' in 'private' clause is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } l_loop$c_loop }\n     ! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target *-*-* } l_loop$c_loop }"}, {"sha": "68d084dd492bda619ebe60e8aa629bf9f028e3f3", "filename": "gcc/testsuite/gfortran.dg/goacc/privatization-1-compute.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5e036b61aa088e6b8564bc9383d37dfbb4801e/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fprivatization-1-compute.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5e036b61aa088e6b8564bc9383d37dfbb4801e/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fprivatization-1-compute.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fprivatization-1-compute.f90?ref=7a5e036b61aa088e6b8564bc9383d37dfbb4801e", "patch": "@@ -47,9 +47,9 @@ subroutine f (i, j, a) ! { dg-line l_function[incr c_function] }\n           !$acc atomic write ! ... to force 'TREE_ADDRESSABLE'.\n           y = a\n     !$acc end parallel\n-    ! { dg-note {variable 'i' in 'private' clause potentially has improper OpenACC privatization level: 'parm_decl'} \"TODO2\" { xfail *-*-* } l_compute$c_compute }\n-    ! { dg-note {variable 'j' in 'private' clause potentially has improper OpenACC privatization level: 'parm_decl'} \"TODO3\" { xfail *-*-* } l_compute$c_compute }\n-    ! { dg-note {variable 'a' in 'private' clause potentially has improper OpenACC privatization level: 'parm_decl'} \"TODO4\" { xfail *-*-* } l_compute$c_compute }\n+    ! { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"TODO\" { xfail *-*-* } l_compute$c_compute }\n+    ! { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"TODO\" { xfail *-*-* } l_compute$c_compute }\n+    ! { dg-note {variable 'a' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"TODO\" { xfail *-*-* } l_compute$c_compute }\n     ! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target *-*-* } l_compute$c_compute }\n   end subroutine f\n end module m"}, {"sha": "6878d8569191cef3937964bcc1961025e6d0bb24", "filename": "gcc/testsuite/gfortran.dg/goacc/privatization-1-routine_gang-loop.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5e036b61aa088e6b8564bc9383d37dfbb4801e/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fprivatization-1-routine_gang-loop.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5e036b61aa088e6b8564bc9383d37dfbb4801e/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fprivatization-1-routine_gang-loop.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fprivatization-1-routine_gang-loop.f90?ref=7a5e036b61aa088e6b8564bc9383d37dfbb4801e", "patch": "@@ -47,9 +47,9 @@ subroutine f (i, j, a)\n        end do\n     end do\n     ! { dg-note {variable 'count\\.[0-9]+' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n-    ! { dg-note {variable 'i' in 'private' clause potentially has improper OpenACC privatization level: 'parm_decl'} \"TODO\" { target *-*-* } l_loop$c_loop }\n-    ! { dg-note {variable 'j' in 'private' clause potentially has improper OpenACC privatization level: 'parm_decl'} \"TODO\" { target *-*-* } l_loop$c_loop }\n-    ! { dg-note {variable 'a' in 'private' clause potentially has improper OpenACC privatization level: 'parm_decl'} \"TODO\" { target *-*-* } l_loop$c_loop }\n+    ! { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n+    ! { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n+    ! { dg-note {variable 'a' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n     ! { dg-note {variable 'x' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n     ! { dg-note {variable 'y' in 'private' clause is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } l_loop$c_loop }\n     ! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target *-*-* } l_loop$c_loop }"}, {"sha": "2bde97db6f75365f89423655dc0b6439a6374b74", "filename": "gcc/testsuite/gfortran.dg/goacc/privatization-1-routine_gang.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5e036b61aa088e6b8564bc9383d37dfbb4801e/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fprivatization-1-routine_gang.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5e036b61aa088e6b8564bc9383d37dfbb4801e/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fprivatization-1-routine_gang.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fprivatization-1-routine_gang.f90?ref=7a5e036b61aa088e6b8564bc9383d37dfbb4801e", "patch": "@@ -41,8 +41,8 @@ subroutine f (i, j, a)\n           !$acc atomic write ! ... to force 'TREE_ADDRESSABLE'.\n           y = a\n   end subroutine f\n-    ! { dg-note {variable 'i' in 'private' clause potentially has improper OpenACC privatization level: 'parm_decl'} \"TODO\" { xfail *-*-* } l_routine$c_routine }\n-    ! { dg-note {variable 'j' in 'private' clause potentially has improper OpenACC privatization level: 'parm_decl'} \"TODO\" { xfail *-*-* } l_routine$c_routine }\n-    ! { dg-note {variable 'a' in 'private' clause potentially has improper OpenACC privatization level: 'parm_decl'} \"TODO\" { xfail *-*-* } l_routine$c_routine }\n+    ! { dg-note {variable 'i' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"TODO\" { xfail *-*-* } l_routine$c_routine }\n+    ! { dg-note {variable 'j' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"TODO\" { xfail *-*-* } l_routine$c_routine }\n+    ! { dg-note {variable 'a' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"TODO\" { xfail *-*-* } l_routine$c_routine }\n     ! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { xfail *-*-* } l_routine$c_routine }\n end module m"}, {"sha": "40786c750d169613166457faeb4c8f3b734a183c", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/kernels-decompose-1.c", "status": "modified", "additions": 63, "deletions": 18, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5e036b61aa088e6b8564bc9383d37dfbb4801e/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-decompose-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5e036b61aa088e6b8564bc9383d37dfbb4801e/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-decompose-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-decompose-1.c?ref=7a5e036b61aa088e6b8564bc9383d37dfbb4801e", "patch": "@@ -36,15 +36,12 @@ int main()\n   (volatile void *) &f1;\n \n #pragma acc kernels /* { dg-line l_compute[incr c_compute] } */\n-  /* { dg-note {variable 'g2\\.0' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute$c_compute } */\n-  /* { dg-note {variable 'f1\\.1' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute$c_compute } */\n-  /* { dg-note {variable 'f1\\.2' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute$c_compute } */\n   {\n     /* { dg-note {beginning 'gang-single' part in OpenACC 'kernels' region} {} { target *-*-* } .+1 } */\n     int c = 234;\n-    /* { dg-note {OpenACC 'kernels' decomposition: variable 'c' declared in block requested to be made addressable} \"\" { target *-*-* } l_compute$c_compute } */\n-    /* { dg-note {variable 'c' made addressable} {} { target *-*-* } l_compute$c_compute } */\n-    /* { dg-note {variable 'c' declared in block is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } l_compute$c_compute } */\n+    /* { dg-note {OpenACC 'kernels' decomposition: variable 'c' declared in block requested to be made addressable} {} { target *-*-* } l_compute$c_compute }\n+       { dg-note {variable 'c' made addressable} {} { target *-*-* } l_compute$c_compute }\n+       { dg-note {variable 'c' declared in block is candidate for adjusting OpenACC privatization level} {} { target *-*-* } l_compute$c_compute } */\n \n #pragma acc loop independent gang /* { dg-line l_loop_i[incr c_loop_i] } */\n     /* { dg-note {parallelized loop nest in OpenACC 'kernels' region} {} { target *-*-* } l_loop_i$c_loop_i } */\n@@ -57,41 +54,89 @@ int main()\n     /* { dg-note {beginning 'gang-single' part in OpenACC 'kernels' region} {} { target *-*-* } .+1 } */\n     a = c;\n \n-    /* PR104132, PR104133 */\n+    /* PR104132, PR104133, PR104774 */\n     {\n       /* Use the 'kernels'-top-level 'int c' as loop variable.  */\n \n-      /* { dg-note {forwarded loop nest in OpenACC 'kernels' region to 'parloops' for analysis} {} { target *-*-* } .+1 } */\n #pragma acc loop /* { dg-line l_loop_c[incr c_loop_c] } */\n-      /* { dg-note {variable 'c' in 'private' clause is candidate for adjusting OpenACC privatization level} {} { target *-*-* } l_loop_c$c_loop_c } */\n+      /* { dg-note {forwarded loop nest in OpenACC 'kernels' region to 'parloops' for analysis} {} { target *-*-* } l_loop_c$c_loop_c } */\n+      /* { dg-note {variable 'c' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_c$c_loop_c } */\n       /* { dg-optimized {assigned OpenACC seq loop parallelism} {} { target *-*-* } l_loop_c$c_loop_c } */\n       for (c = 0; c < N / 2; c++)\n \tb[c] -= 10;\n \n-      /* { dg-note {forwarded loop nest in OpenACC 'kernels' region to 'parloops' for analysis} {} { target *-*-* } .+1 } */\n #pragma acc loop /* { dg-line l_loop_c[incr c_loop_c] } */\n-      /* { dg-note {variable 'c' in 'private' clause is candidate for adjusting OpenACC privatization level} {} { target *-*-* } l_loop_c$c_loop_c } */\n+      /* { dg-note {forwarded loop nest in OpenACC 'kernels' region to 'parloops' for analysis} {} { target *-*-* } l_loop_c$c_loop_c } */\n+      /* { dg-note {variable 'c' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_c$c_loop_c } */\n       /* { dg-optimized {assigned OpenACC seq loop parallelism} {} { target *-*-* } l_loop_c$c_loop_c } */\n       for (c = 0; c < N / 2; c++)\n \tg1 = c;\n \n-      /* { dg-note {forwarded loop nest in OpenACC 'kernels' region to 'parloops' for analysis} {} { target *-*-* } .+1 } */\n #pragma acc loop /* { dg-line l_loop_c[incr c_loop_c] } */\n-      /* { dg-note {variable 'c' in 'private' clause is candidate for adjusting OpenACC privatization level} {} { target *-*-* } l_loop_c$c_loop_c } */\n+      /* { dg-note {forwarded loop nest in OpenACC 'kernels' region to 'parloops' for analysis} {} { target *-*-* } l_loop_c$c_loop_c } */\n+      /* { dg-note {variable 'c' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_c$c_loop_c } */\n       /* { dg-optimized {assigned OpenACC seq loop parallelism} {} { target *-*-* } l_loop_c$c_loop_c } */\n       for (c = 0; c <= N; c++)\n \tg2 += c;\n+\t/* { dg-note {variable 'g2\\.0' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute$c_compute } */\n \n-    /* { dg-note {beginning 'gang-single' part in OpenACC 'kernels' region} {} { target *-*-* } .+1 } */\n+      /* { dg-note {beginning 'gang-single' part in OpenACC 'kernels' region} {} { target *-*-* } .+1 } */\n       f1 = 1;\n-      /* { dg-note {forwarded loop nest in OpenACC 'kernels' region to 'parloops' for analysis} {} { target *-*-* } .+1 } */\n+      /* { dg-note {variable 'f1\\.1' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute$c_compute } */\n #pragma acc loop /* { dg-line l_loop_c[incr c_loop_c] } */\n-      /* { dg-note {variable 'c' in 'private' clause is candidate for adjusting OpenACC privatization level} {} { target *-*-* } l_loop_c$c_loop_c } */\n+      /* { dg-note {forwarded loop nest in OpenACC 'kernels' region to 'parloops' for analysis} {} { target *-*-* } l_loop_c$c_loop_c } */\n+      /* { dg-note {variable 'c' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_c$c_loop_c } */\n       /* { dg-optimized {assigned OpenACC seq loop parallelism} {} { target *-*-* } l_loop_c$c_loop_c } */\n       for (c = 20; c > 0; --c)\n \tf1 *= c;\n-\n-      /* { dg-note {beginning 'parloops' part in OpenACC 'kernels' region} {} { target *-*-* } .+1 } */\n+\t/* { dg-note {variable 'f1\\.2' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute$c_compute } */\n+\n+      {\n+\t/* { dg-note {beginning 'gang-single' part in OpenACC 'kernels' region} {} { target *-*-* } .+1 } */\n+\tunsigned long long f2 = 1;\n+\t/* { dg-note {OpenACC 'kernels' decomposition: variable 'f2' declared in block requested to be made addressable} {} { target *-*-* } l_compute$c_compute }\n+\t   { dg-note {variable 'f2' made addressable} {} { target *-*-* } l_compute$c_compute }\n+\t   { dg-note {variable 'f2' declared in block is candidate for adjusting OpenACC privatization level} {} { target *-*-* } l_compute$c_compute } */\n+#pragma acc loop independent reduction(*: f2) /* { dg-line l_loop_c[incr c_loop_c] } */\n+\t/* { dg-note {parallelized loop nest in OpenACC 'kernels' region} {} { target *-*-* } l_loop_c$c_loop_c } */\n+\t/* { dg-note {variable 'c' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_c$c_loop_c } */\n+\t/* { dg-optimized {assigned OpenACC gang vector loop parallelism} {} { target *-*-* } l_loop_c$c_loop_c } */\n+\tfor (c = 20; c > 0; --c)\n+\t  f2 *= c;\n+\n+\t{\n+\t  /* { dg-note {beginning 'parloops' part in OpenACC 'kernels' region} {} { target *-*-* } .+1 } */\n+\t  if (f2 != f1)\n+\t    /* { dg-note {variable 'f1\\.3' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target { ! __OPTIMIZE__ } } l_compute$c_compute } */\n+\t    __builtin_abort ();\n+\n+\t  /* As this is still in the preceding 'parloops' part:\n+\t     { dg-bogus {note: beginning 'gang-single' part in OpenACC 'kernels' region} {} { target *-*-* } .+1 } */\n+\t  unsigned long long f3 = f2;\n+\t  /* { dg-note {OpenACC 'kernels' decomposition: variable 'f3' declared in block requested to be made addressable} {} { target *-*-* } l_compute$c_compute }\n+\t     { dg-note {variable 'f3' made addressable} {} { target *-*-* } l_compute$c_compute }\n+\t     { dg-note {variable 'f3' declared in block is candidate for adjusting OpenACC privatization level} {} { target *-*-* } l_compute$c_compute } */\n+#pragma acc loop seq /* { dg-line l_loop_c[incr c_loop_c] } */\n+\t  /* { dg-note {parallelized loop nest in OpenACC 'kernels' region} {} { target *-*-* } l_loop_c$c_loop_c } */\n+\t  /* { dg-note {variable 'c' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_c$c_loop_c } */\n+\t  /* { dg-optimized {assigned OpenACC seq loop parallelism} {} { target *-*-* } l_loop_c$c_loop_c } */\n+\t  for (c = 20; c > 0; --c)\n+\t    f3 /= c;\n+\n+\t  /* { dg-note {beginning 'parloops' part in OpenACC 'kernels' region} {} { target *-*-* } .+1 } */\n+\t  if (f3 != 1)\n+\t    __builtin_abort ();\n+\t}\n+\n+\t/* As this is still in the preceding 'parloops' part:\n+\t   { dg-bogus {note: beginning 'parloops' part in OpenACC 'kernels' region} {} { target *-*-* } .+1 } */\n+\tif (f2 != f1)\n+\t  /* { dg-note {variable 'f1\\.4' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target { ! __OPTIMIZE__ } } l_compute$c_compute } */\n+\t  __builtin_abort ();\n+      }\n+\n+      /* As this is still in the preceding 'parloops' part:\n+\t { dg-bogus {note: beginning 'parloops' part in OpenACC 'kernels' region} {} { target *-*-* } .+1 } */\n       if (c != 234)\n \t__builtin_abort ();\n       /* { dg-optimized {assigned OpenACC seq loop parallelism} {} { target *-*-* } l_compute$c_compute } */"}, {"sha": "f4b09fded2dc39015339f9bc43be52dda1f0b371", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-local-worker-1.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5e036b61aa088e6b8564bc9383d37dfbb4801e/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-local-worker-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5e036b61aa088e6b8564bc9383d37dfbb4801e/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-local-worker-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-local-worker-1.c?ref=7a5e036b61aa088e6b8564bc9383d37dfbb4801e", "patch": "@@ -46,8 +46,7 @@ main (int argc, char* argv[])\n     for (i = 0; i < 32; i++)\n       {\n \t#pragma acc loop worker(num:32) /* { dg-line l_loop_j[incr c_loop_j] } */\n-\t/* { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target c } l_loop_j$c_loop_j }\n-\t   { dg-note {variable 'j' in 'private' clause is candidate for adjusting OpenACC privatization level} {} { target c++ } l_loop_j$c_loop_j } */\n+\t/* { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_j$c_loop_j } */\n \t/* { dg-note {variable 'k' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_j$c_loop_j } */\n \t/* { dg-note {variable 'x' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_j$c_loop_j } */\n \tfor (j = 0; j < 32; j++)\n@@ -62,8 +61,7 @@ main (int argc, char* argv[])\n \t  }\n \n \t#pragma acc loop worker(num:32) /* { dg-line l_loop_j[incr c_loop_j] } */\n-\t/* { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target c } l_loop_j$c_loop_j }\n-\t   { dg-note {variable 'j' in 'private' clause is candidate for adjusting OpenACC privatization level} {} { target c++ } l_loop_j$c_loop_j } */\n+\t/* { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_j$c_loop_j } */\n \t/* { dg-note {variable 'k' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_j$c_loop_j } */\n \t/* { dg-note {variable 'x' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_j$c_loop_j } */\n \tfor (j = 0; j < 32; j++)"}, {"sha": "52a7e1af24eecc01b0c9a0d4f57af0285967ac77", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-local-worker-2.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5e036b61aa088e6b8564bc9383d37dfbb4801e/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-local-worker-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5e036b61aa088e6b8564bc9383d37dfbb4801e/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-local-worker-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-local-worker-2.c?ref=7a5e036b61aa088e6b8564bc9383d37dfbb4801e", "patch": "@@ -46,8 +46,7 @@ main (int argc, char* argv[])\n     for (i = 0; i < 32; i++)\n       {\n         #pragma acc loop worker(num:32) /* { dg-line l_loop_j[incr c_loop_j] } */\n-\t/* { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target c } l_loop_j$c_loop_j }\n-\t   { dg-note {variable 'j' in 'private' clause is candidate for adjusting OpenACC privatization level} {} { target c++ } l_loop_j$c_loop_j } */\n+\t/* { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_j$c_loop_j } */\n \t/* { dg-note {variable 'k' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_j$c_loop_j } */\n \t/* { dg-note {variable 'x' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_j$c_loop_j } */\n \tfor (j = 0; j < 32; j++)"}, {"sha": "0cbbef77d456f7cf2ceb57e059452170170c0188", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-local-worker-3.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5e036b61aa088e6b8564bc9383d37dfbb4801e/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-local-worker-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5e036b61aa088e6b8564bc9383d37dfbb4801e/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-local-worker-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-local-worker-3.c?ref=7a5e036b61aa088e6b8564bc9383d37dfbb4801e", "patch": "@@ -51,8 +51,7 @@ main (int argc, char* argv[])\n     for (i = 0; i < 32; i++)\n       {\n         #pragma acc loop worker(num:32) /* { dg-line l_loop_j[incr c_loop_j] } */\n-\t/* { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target c } l_loop_j$c_loop_j }\n-\t   { dg-note {variable 'j' in 'private' clause is candidate for adjusting OpenACC privatization level} {} { target c++ } l_loop_j$c_loop_j } */\n+\t/* { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_j$c_loop_j } */\n \t/* { dg-note {variable 'k' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_j$c_loop_j } */\n \t/* { dg-note {variable 'pt' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_j$c_loop_j } */\n \tfor (j = 0; j < 32; j++)"}, {"sha": "a908ee580f6dc70da3be5a885d5fa6afb693c5a5", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-local-worker-4.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5e036b61aa088e6b8564bc9383d37dfbb4801e/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-local-worker-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5e036b61aa088e6b8564bc9383d37dfbb4801e/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-local-worker-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-local-worker-4.c?ref=7a5e036b61aa088e6b8564bc9383d37dfbb4801e", "patch": "@@ -51,8 +51,7 @@ main (int argc, char* argv[])\n     for (i = 0; i < 32; i++)\n       {\n         #pragma acc loop worker(num:32) /* { dg-line l_loop_j[incr c_loop_j] } */\n-\t/* { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target c } l_loop_j$c_loop_j }\n-\t   { dg-note {variable 'j' in 'private' clause is candidate for adjusting OpenACC privatization level} {} { target c++ } l_loop_j$c_loop_j } */\n+\t/* { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_j$c_loop_j } */\n \t/* { dg-note {variable 'k' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_j$c_loop_j } */\n \t/* { dg-note {variable 'pt' declared in block is candidate for adjusting OpenACC privatization level} {} { target *-*-* } l_loop_j$c_loop_j } */\n \t/* { dg-note {variable 'ptp' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_j$c_loop_j } */"}, {"sha": "713f2d9e38ceb4d3fa882b16c1e6d60cf03c5ed7", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-local-worker-5.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5e036b61aa088e6b8564bc9383d37dfbb4801e/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-local-worker-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5e036b61aa088e6b8564bc9383d37dfbb4801e/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-local-worker-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-local-worker-5.c?ref=7a5e036b61aa088e6b8564bc9383d37dfbb4801e", "patch": "@@ -46,8 +46,7 @@ main (int argc, char* argv[])\n     for (i = 0; i < 32; i++)\n       {\n         #pragma acc loop worker(num:32) /* { dg-line l_loop_j[incr c_loop_j] } */\n-\t/* { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target c } l_loop_j$c_loop_j }\n-\t   { dg-note {variable 'j' in 'private' clause is candidate for adjusting OpenACC privatization level} {} { target c++ } l_loop_j$c_loop_j } */\n+\t/* { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_j$c_loop_j } */\n \t/* { dg-note {variable 'k' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_j$c_loop_j } */\n \t/* { dg-note {variable 'pt' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_j$c_loop_j } */\n \tfor (j = 0; j < 32; j++)"}, {"sha": "511a31dd6282c48b4dfca0ed1a161215f2ffa3a7", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-vector-1.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5e036b61aa088e6b8564bc9383d37dfbb4801e/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-vector-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5e036b61aa088e6b8564bc9383d37dfbb4801e/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-vector-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-vector-1.c?ref=7a5e036b61aa088e6b8564bc9383d37dfbb4801e", "patch": "@@ -45,8 +45,7 @@ main (int argc, char* argv[])\n     for (i = 0; i < 32; i++)\n       {\n         #pragma acc loop worker(num:32) /* { dg-line l_loop_j[incr c_loop_j] } */\n-\t/* { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target c } l_loop_j$c_loop_j }\n-\t   { dg-note {variable 'j' in 'private' clause is candidate for adjusting OpenACC privatization level} {} { target c++ } l_loop_j$c_loop_j } */\n+\t/* { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_j$c_loop_j } */\n \t/* { dg-note {variable 'k' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_j$c_loop_j } */\n \tfor (j = 0; j < 32; j++)\n \t  {"}, {"sha": "0f14e5f434f26d5e5b7bcf3b54c22bc3ab0c3272", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-vector-2.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5e036b61aa088e6b8564bc9383d37dfbb4801e/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-vector-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5e036b61aa088e6b8564bc9383d37dfbb4801e/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-vector-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-vector-2.c?ref=7a5e036b61aa088e6b8564bc9383d37dfbb4801e", "patch": "@@ -45,8 +45,7 @@ main (int argc, char* argv[])\n     for (i = 0; i < 32; i++)\n       {\n         #pragma acc loop worker(num:32) /* { dg-line l_loop_j[incr c_loop_j] } */\n-\t/* { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target c } l_loop_j$c_loop_j }\n-\t   { dg-note {variable 'j' in 'private' clause is candidate for adjusting OpenACC privatization level} {} { target c++ } l_loop_j$c_loop_j } */\n+\t/* { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_j$c_loop_j } */\n \t/* { dg-note {variable 'k' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_j$c_loop_j } */\n \tfor (j = 0; j < 32; j++)\n \t  {"}, {"sha": "c15797124c37c5a457bb108692ef9e804bd58189", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-worker-2.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5e036b61aa088e6b8564bc9383d37dfbb4801e/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-worker-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5e036b61aa088e6b8564bc9383d37dfbb4801e/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-worker-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-worker-2.c?ref=7a5e036b61aa088e6b8564bc9383d37dfbb4801e", "patch": "@@ -47,8 +47,7 @@ main (int argc, char* argv[])\n       {\n         #pragma acc loop worker(num:32) private(x) /* { dg-line l_loop_j[incr c_loop_j] } */\n \t/* { dg-note {variable 'x' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_j$c_loop_j } */\n-\t/* { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target c } l_loop_j$c_loop_j }\n-\t   { dg-note {variable 'j' in 'private' clause is candidate for adjusting OpenACC privatization level} {} { target c++ } l_loop_j$c_loop_j } */\n+\t/* { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_j$c_loop_j } */\n \t/* { dg-note {variable 'k' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_j$c_loop_j } */\n \tfor (j = 0; j < 32; j++)\n \t  {"}, {"sha": "5ae73ff286ea3cdcfa8da1a57c9a5f3bdbfa1b9b", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-worker-3.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5e036b61aa088e6b8564bc9383d37dfbb4801e/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-worker-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5e036b61aa088e6b8564bc9383d37dfbb4801e/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-worker-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-worker-3.c?ref=7a5e036b61aa088e6b8564bc9383d37dfbb4801e", "patch": "@@ -47,8 +47,7 @@ main (int argc, char* argv[])\n       {\n         #pragma acc loop worker(num:32) private(x) /* { dg-line l_loop_j[incr c_loop_j] } */\n \t/* { dg-note {variable 'x' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_j$c_loop_j } */\n-\t/* { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target c } l_loop_j$c_loop_j }\n-\t   { dg-note {variable 'j' in 'private' clause is candidate for adjusting OpenACC privatization level} {} { target c++ } l_loop_j$c_loop_j } */\n+\t/* { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_j$c_loop_j } */\n \t/* { dg-note {variable 'k' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_j$c_loop_j } */\n \tfor (j = 0; j < 32; j++)\n \t  {\n@@ -63,8 +62,7 @@ main (int argc, char* argv[])\n \n \t#pragma acc loop worker(num:32) private(x) /* { dg-line l_loop_j[incr c_loop_j] } */\n \t/* { dg-note {variable 'x' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_j$c_loop_j } */\n-\t/* { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target c } l_loop_j$c_loop_j }\n-\t   { dg-note {variable 'j' in 'private' clause is candidate for adjusting OpenACC privatization level} {} { target c++ } l_loop_j$c_loop_j } */\n+\t/* { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_j$c_loop_j } */\n \t/* { dg-note {variable 'k' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_j$c_loop_j } */\n \tfor (j = 0; j < 32; j++)\n \t  {"}, {"sha": "e7babe4da04dc018ef058da7438be13c97858ef1", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-worker-4.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5e036b61aa088e6b8564bc9383d37dfbb4801e/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-worker-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5e036b61aa088e6b8564bc9383d37dfbb4801e/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-worker-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-worker-4.c?ref=7a5e036b61aa088e6b8564bc9383d37dfbb4801e", "patch": "@@ -47,8 +47,7 @@ main (int argc, char* argv[])\n       {\n         #pragma acc loop worker(num:32) private(x) /* { dg-line l_loop_j[incr c_loop_j] } */\n \t/* { dg-note {variable 'x' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_j$c_loop_j } */\n-\t/* { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target c } l_loop_j$c_loop_j }\n-\t   { dg-note {variable 'j' in 'private' clause is candidate for adjusting OpenACC privatization level} {} { target c++ } l_loop_j$c_loop_j } */\n+\t/* { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_j$c_loop_j } */\n \t/* { dg-note {variable 'k' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_j$c_loop_j } */\n \tfor (j = 0; j < 32; j++)\n \t  {"}, {"sha": "bb8fb2e472ce865ce81055d5ad7b977a0e0db679", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-worker-5.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5e036b61aa088e6b8564bc9383d37dfbb4801e/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-worker-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5e036b61aa088e6b8564bc9383d37dfbb4801e/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-worker-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-worker-5.c?ref=7a5e036b61aa088e6b8564bc9383d37dfbb4801e", "patch": "@@ -48,8 +48,7 @@ main (int argc, char* argv[])\n       {\n         #pragma acc loop worker(num:32) private(x) /* { dg-line l_loop_j[incr c_loop_j] } */\n \t/* { dg-note {variable 'x' in 'private' clause is candidate for adjusting OpenACC privatization level} {} { target *-*-* } l_loop_j$c_loop_j } */\n-\t/* { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target c } l_loop_j$c_loop_j }\n-\t   { dg-note {variable 'j' in 'private' clause is candidate for adjusting OpenACC privatization level} {} { target c++ } l_loop_j$c_loop_j } */\n+\t/* { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_j$c_loop_j } */\n \t/* { dg-note {variable 'k' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_j$c_loop_j } */\n \t/* { dg-note {variable 'p' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_j$c_loop_j } */\n \tfor (j = 0; j < 32; j++)"}, {"sha": "e4eec7b4247ac5272c3382222b8db5ba5eb18e19", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-worker-6.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5e036b61aa088e6b8564bc9383d37dfbb4801e/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-worker-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5e036b61aa088e6b8564bc9383d37dfbb4801e/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-worker-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-worker-6.c?ref=7a5e036b61aa088e6b8564bc9383d37dfbb4801e", "patch": "@@ -53,8 +53,7 @@ main (int argc, char* argv[])\n       {\n         #pragma acc loop worker(num:32) private(pt) /* { dg-line l_loop_j[incr c_loop_j] } */\n \t/* { dg-note {variable 'pt' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_j$c_loop_j } */\n-\t/* { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target c } l_loop_j$c_loop_j }\n-\t   { dg-note {variable 'j' in 'private' clause is candidate for adjusting OpenACC privatization level} {} { target c++ } l_loop_j$c_loop_j } */\n+\t/* { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_j$c_loop_j } */\n \t/* { dg-note {variable 'k' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_j$c_loop_j } */\n \tfor (j = 0; j < 32; j++)\n \t  {"}, {"sha": "b52595ac702c683b2bba0d3c7b962e48fd865a64", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-worker-7.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5e036b61aa088e6b8564bc9383d37dfbb4801e/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-worker-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5e036b61aa088e6b8564bc9383d37dfbb4801e/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-worker-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-worker-7.c?ref=7a5e036b61aa088e6b8564bc9383d37dfbb4801e", "patch": "@@ -51,8 +51,7 @@ main (int argc, char* argv[])\n         /* But here, it is made private per-worker.  */\n         #pragma acc loop worker(num:32) private(pt) /* { dg-line l_loop_j[incr c_loop_j] } */\n \t/* { dg-note {variable 'pt' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_j$c_loop_j } */\n-\t/* { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target c } l_loop_j$c_loop_j }\n-\t   { dg-note {variable 'j' in 'private' clause is candidate for adjusting OpenACC privatization level} {} { target c++ } l_loop_j$c_loop_j } */\n+\t/* { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_j$c_loop_j } */\n \t/* { dg-note {variable 'k' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_j$c_loop_j } */\n \tfor (j = 0; j < 32; j++)\n \t  {"}, {"sha": "df693628c9627ed66e517f71fa50bb4bf6337644", "filename": "libgomp/testsuite/libgomp.oacc-fortran/optional-private.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5e036b61aa088e6b8564bc9383d37dfbb4801e/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Foptional-private.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5e036b61aa088e6b8564bc9383d37dfbb4801e/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Foptional-private.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Foptional-private.f90?ref=7a5e036b61aa088e6b8564bc9383d37dfbb4801e", "patch": "@@ -44,7 +44,7 @@ subroutine t1(x)\n     ! { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-2 }\n     !$acc loop gang private(x)\n     ! { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n-    ! { dg-note {variable 'x' in 'private' clause potentially has improper OpenACC privatization level: 'parm_decl'} \"TODO\" { target *-*-* } .-2 }\n+    ! { dg-note {variable 'x' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 }\n     do i = 1, 32\n        x = i * 2;\n        arr(i) = arr(i) + x\n@@ -72,7 +72,7 @@ subroutine t2(pt)\n     ! { dg-warning \"region is worker partitioned but does not contain worker partitioned code\" \"\" { target *-*-* } .-1 }\n     !$acc loop gang private(pt)\n     ! { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n-    ! { dg-note {variable 'pt' in 'private' clause potentially has improper OpenACC privatization level: 'parm_decl'} \"TODO\" { target *-*-* } .-2 }\n+    ! { dg-note {variable 'pt' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 }\n     do i = 0, 31\n        pt%x = i\n        pt%y = i * 2\n@@ -111,7 +111,7 @@ subroutine t3(pt)\n        do j = 0, 31\n           !$acc loop vector private(pt)\n           ! { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n-          ! { dg-note {variable 'pt' in 'private' clause potentially has improper OpenACC privatization level: 'parm_decl'} \"TODO\" { target *-*-* } .-2 }\n+          ! { dg-note {variable 'pt' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 }\n           do k = 0, 31\n              pt(1) = ieor(i, j * 3)\n              pt(2) = ior(i, j * 5)"}, {"sha": "b027d14e7f52f007190b95376f7f633cd8d62f29", "filename": "libgomp/testsuite/libgomp.oacc-fortran/privatized-ref-1.f95", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5e036b61aa088e6b8564bc9383d37dfbb4801e/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fprivatized-ref-1.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5e036b61aa088e6b8564bc9383d37dfbb4801e/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fprivatized-ref-1.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fprivatized-ref-1.f95?ref=7a5e036b61aa088e6b8564bc9383d37dfbb4801e", "patch": "@@ -78,7 +78,7 @@ subroutine gangs(t1, res)\n     !$acc loop collapse(2) gang private(t1) ! { dg-line l_loop[incr c_loop] }\n     ! { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n     ! { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n-    ! { dg-note {variable 't1' in 'private' clause potentially has improper OpenACC privatization level: 'parm_decl'} \"\" { target *-*-* } l_loop$c_loop }\n+    ! { dg-note {variable 't1' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n     do i=0,255\n       do j=1,256\n         t1 = (i * 256 + j) * 97\n@@ -103,7 +103,7 @@ subroutine workers(t1, res)\n     do i=0,255\n       !$acc loop worker private(t1) ! { dg-line l_loop[incr c_loop] }\n       ! { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n-      ! { dg-note {variable 't1' in 'private' clause potentially has improper OpenACC privatization level: 'parm_decl'} \"\" { target *-*-* } l_loop$c_loop }\n+      ! { dg-note {variable 't1' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n       do j=1,256\n         t1 = (i * 256 + j) * 99\n         res(i * 256 + j) = t1\n@@ -127,7 +127,7 @@ subroutine vectors(t1, res)\n     do i=0,255\n       !$acc loop vector private(t1) ! { dg-line l_loop[incr c_loop] }\n       ! { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n-      ! { dg-note {variable 't1' in 'private' clause potentially has improper OpenACC privatization level: 'parm_decl'} \"\" { target *-*-* } l_loop$c_loop }\n+      ! { dg-note {variable 't1' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n       do j=1,256\n         t1 = (i * 256 + j) * 101\n         res(i * 256 + j) = t1\n@@ -149,7 +149,7 @@ subroutine gangs_workers_vectors(t1, res)\n     !$acc loop collapse(2) gang worker vector private(t1) ! { dg-line l_loop[incr c_loop] }\n     ! { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n     ! { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n-    ! { dg-note {variable 't1' in 'private' clause potentially has improper OpenACC privatization level: 'parm_decl'} \"\" { target *-*-* } l_loop$c_loop }\n+    ! { dg-note {variable 't1' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n     do i=0,255\n       do j=1,256\n         t1 = (i * 256 + j) * 103"}, {"sha": "1d91e115d9fc566c7af1fe53fb6586c0c8b03544", "filename": "libgomp/testsuite/libgomp.oacc-fortran/privatized-ref-2.f90", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a5e036b61aa088e6b8564bc9383d37dfbb4801e/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fprivatized-ref-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a5e036b61aa088e6b8564bc9383d37dfbb4801e/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fprivatized-ref-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fprivatized-ref-2.f90?ref=7a5e036b61aa088e6b8564bc9383d37dfbb4801e", "patch": "@@ -59,7 +59,9 @@ subroutine foo (array, nn)\n     !$acc parallel copy(array)\n     !$acc loop gang private(array) ! { dg-line l_loop[incr c_loop] }\n     ! { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n-    ! { dg-note {variable 'array' in 'private' clause potentially has improper OpenACC privatization level: 'parm_decl'} \"\" { target *-*-* } l_loop$c_loop }\n+    ! { dg-note {variable 'array' in 'private' clause is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } l_loop$c_loop }\n+    ! { dg-note {variable 'array' ought to be adjusted for OpenACC privatization level: 'gang'} \"\" { target *-*-* } l_loop$c_loop }\n+    ! { dg-note {variable 'array' adjusted for OpenACC privatization level: 'gang'} \"\" { target { ! { openacc_host_selected || { openacc_nvidia_accel_selected && __OPTIMIZE__ } } } } l_loop$c_loop }\n     ! { dg-message {sorry, unimplemented: target cannot support alloca} PR65181 { target openacc_nvidia_accel_selected } l_loop$c_loop }\n     do i = 1, 10\n       array(i) = i\n@@ -87,7 +89,7 @@ subroutine bar (array)\n     ! { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n     ! { dg-note {variable 'array\\.[0-9]+' in 'private' clause is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } l_loop$c_loop }\n     ! { dg-note {variable 'array\\.[0-9]+' ought to be adjusted for OpenACC privatization level: 'gang'} \"\" { target *-*-* } l_loop$c_loop }\n-    ! { dg-note {variable 'array\\.[0-9]+' adjusted for OpenACC privatization level: 'gang'} \"\" { target { ! { openacc_host_selected || openacc_nvidia_accel_selected } } } l_loop$c_loop }\n+    ! { dg-note {variable 'array\\.[0-9]+' adjusted for OpenACC privatization level: 'gang'} \"\" { target { ! { openacc_host_selected || { openacc_nvidia_accel_selected && __OPTIMIZE__ } } } } l_loop$c_loop }\n     ! { dg-message {sorry, unimplemented: target cannot support alloca} PR65181 { target openacc_nvidia_accel_selected } l_loop$c_loop }\n     do i = 1, 10\n       array(i) = 9*i\n@@ -110,10 +112,12 @@ subroutine foo_str(str)\n     !$acc parallel copy(str)\n     !$acc loop gang private(str) ! { dg-line l_loop[incr c_loop] }\n     ! { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n-    ! { dg-note {variable 'str' in 'private' clause potentially has improper OpenACC privatization level: 'parm_decl'} \"\" { target *-*-* } l_loop$c_loop }\n+    ! { dg-note {variable 'str' in 'private' clause is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } l_loop$c_loop }\n+    ! { dg-note {variable 'str' ought to be adjusted for OpenACC privatization level: 'gang'} \"\" { target *-*-* } l_loop$c_loop }\n+    ! { dg-note {variable 'str' adjusted for OpenACC privatization level: 'gang'} \"\" { target { ! { openacc_host_selected || { openacc_nvidia_accel_selected && __OPTIMIZE__ } } } } l_loop$c_loop }\n     ! { dg-note {variable 'char\\.[0-9]+' declared in block is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } l_loop$c_loop }\n     ! { dg-note {variable 'char\\.[0-9]+' ought to be adjusted for OpenACC privatization level: 'gang'} \"\" { target *-*-* } l_loop$c_loop }\n-    ! { dg-note {variable 'char\\.[0-9]+' adjusted for OpenACC privatization level: 'gang'} \"\" { target { ! { openacc_host_selected || openacc_nvidia_accel_selected } } } l_loop$c_loop }\n+    ! { dg-note {variable 'char\\.[0-9]+' adjusted for OpenACC privatization level: 'gang'} \"\" { target { ! { openacc_host_selected || { openacc_nvidia_accel_selected && __OPTIMIZE__ } } } } l_loop$c_loop }\n     ! { dg-message {sorry, unimplemented: target cannot support alloca} PR65181 { target openacc_nvidia_accel_selected } l_loop$c_loop }\n     do i = 1, 10\n       str(i:i) = achar(ichar('A') + i)\n@@ -153,10 +157,12 @@ subroutine foobar (scalar)\n     !$acc parallel copy(scalar)\n     !$acc loop gang private(scalar) ! { dg-line l_loop[incr c_loop] }\n     ! { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n-    ! { dg-note {variable 'scalar' in 'private' clause potentially has improper OpenACC privatization level: 'parm_decl'} \"\" { target *-*-* } l_loop$c_loop }\n+    ! { dg-note {variable 'scalar' in 'private' clause is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } l_loop$c_loop }\n+    ! { dg-note {variable 'scalar' ought to be adjusted for OpenACC privatization level: 'gang'} \"\" { target *-*-* } l_loop$c_loop }\n+    ! { dg-note {variable 'scalar' adjusted for OpenACC privatization level: 'gang'} \"\" { target { ! { openacc_host_selected || { openacc_nvidia_accel_selected && __OPTIMIZE__ } } } } l_loop$c_loop }\n     ! { dg-note {variable 'char\\.[0-9]+' declared in block is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } l_loop$c_loop }\n     ! { dg-note {variable 'char\\.[0-9]+' ought to be adjusted for OpenACC privatization level: 'gang'} \"\" { target *-*-* } l_loop$c_loop }\n-    ! { dg-note {variable 'char\\.[0-9]+' adjusted for OpenACC privatization level: 'gang'} \"\" { target { ! { openacc_host_selected || openacc_nvidia_accel_selected } } } l_loop$c_loop }\n+    ! { dg-note {variable 'char\\.[0-9]+' adjusted for OpenACC privatization level: 'gang'} \"\" { target { ! { openacc_host_selected || { openacc_nvidia_accel_selected && __OPTIMIZE__ } } } } l_loop$c_loop }\n     do i = 1, 15\n       scalar(i:i) = achar(ichar('A') + i)\n     end do"}]}