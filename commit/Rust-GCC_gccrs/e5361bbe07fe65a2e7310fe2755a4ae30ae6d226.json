{"sha": "e5361bbe07fe65a2e7310fe2755a4ae30ae6d226", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTUzNjFiYmUwN2ZlNjVhMmU3MzEwZmUyNzU1YTRhZTMwYWU2ZDIyNg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2000-03-25T16:30:33Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2000-03-25T16:30:33Z"}, "message": "Fix typo in ChangeLog\n\nFrom-SVN: r32739", "tree": {"sha": "15e8ffd403ba4d0011448da7a19711fd39339d87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/15e8ffd403ba4d0011448da7a19711fd39339d87"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e5361bbe07fe65a2e7310fe2755a4ae30ae6d226", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5361bbe07fe65a2e7310fe2755a4ae30ae6d226", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5361bbe07fe65a2e7310fe2755a4ae30ae6d226", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5361bbe07fe65a2e7310fe2755a4ae30ae6d226/comments", "author": null, "committer": null, "parents": [{"sha": "b5fc444b5f2b25c0c19bc02587b41c54da5ab243", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5fc444b5f2b25c0c19bc02587b41c54da5ab243", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5fc444b5f2b25c0c19bc02587b41c54da5ab243"}], "stats": {"total": 33, "additions": 19, "deletions": 14}, "files": [{"sha": "ee0f6daecc45a86b62842a5e58240193f251d97f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5361bbe07fe65a2e7310fe2755a4ae30ae6d226/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5361bbe07fe65a2e7310fe2755a4ae30ae6d226/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e5361bbe07fe65a2e7310fe2755a4ae30ae6d226", "patch": "@@ -9,7 +9,8 @@\n \n 2000-03-20 Theodore Papadopoulo <Theodore.Papadopoulo@sophia.inria.fr>\n \n-\t* call.c (check_dtor_name,build_new_method_call): Likewise.\n+\t* call.c (check_dtor_name,build_new_method_call): Use DECL_P and\n+\tTYPE_P macros.\n \t* decl.c (push_class_binding,poplevel,pushtag,lookup_namespace_name,\n \tmake_typename_type,check_initializer,cp_finish_decl,xref_tag): Likewise.\n \t* decl2.c (grokfield,build_expr_from_tree,build_expr_from_tree,"}, {"sha": "77bc99134d56da7a2c2814edaad8eba1805f4573", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5361bbe07fe65a2e7310fe2755a4ae30ae6d226/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5361bbe07fe65a2e7310fe2755a4ae30ae6d226/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=e5361bbe07fe65a2e7310fe2755a4ae30ae6d226", "patch": "@@ -2837,9 +2837,12 @@ extern int flag_new_for_scope;\n \n #define DECL_TEMPLATE_SPECIALIZATION(NODE) (DECL_USE_TEMPLATE (NODE) == 2)\n #define SET_DECL_TEMPLATE_SPECIALIZATION(NODE) (DECL_USE_TEMPLATE (NODE) = 2)\n-#define CLASSTYPE_TEMPLATE_SPECIALIZATION(NODE) \\\n+\n+/* Nonzero if NODE is a partial specialization.  This flag is not set\n+   for a full specialization.  */\n+#define CLASSTYPE_PARTIAL_SPECIALIZATION(NODE) \\\n   (CLASSTYPE_USE_TEMPLATE (NODE) == 2)\n-#define SET_CLASSTYPE_TEMPLATE_SPECIALIZATION(NODE) \\\n+#define SET_CLASSTYPE_PARTIAL_SPECIALIZATION(NODE) \\\n   (CLASSTYPE_USE_TEMPLATE (NODE) = 2)\n \n #define DECL_IMPLICIT_INSTANTIATION(NODE) (DECL_USE_TEMPLATE (NODE) == 1)"}, {"sha": "b42e2794be0e185b191fb8ee3e9a20276b905178", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5361bbe07fe65a2e7310fe2755a4ae30ae6d226/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5361bbe07fe65a2e7310fe2755a4ae30ae6d226/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=e5361bbe07fe65a2e7310fe2755a4ae30ae6d226", "patch": "@@ -10647,8 +10647,8 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \t    t = ctype;\n \t    while (t != NULL_TREE && CLASS_TYPE_P (t))\n \t      {\n-\t\tif (CLASSTYPE_TEMPLATE_INFO (t) &&\n-\t\t    !CLASSTYPE_TEMPLATE_SPECIALIZATION (t))\n+\t\tif (CLASSTYPE_TEMPLATE_INFO (t) \n+\t\t    && uses_template_parms (CLASSTYPE_TI_ARGS (t)))\n \t\t  template_count += 1;\n \t\tt = TYPE_MAIN_DECL (t);\n \t\tif (DECL_LANG_SPECIFIC (t))"}, {"sha": "9ba311478c7b6335734b2e6ad0b448da33dbcdef", "filename": "gcc/cp/dump.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5361bbe07fe65a2e7310fe2755a4ae30ae6d226/gcc%2Fcp%2Fdump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5361bbe07fe65a2e7310fe2755a4ae30ae6d226/gcc%2Fcp%2Fdump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdump.c?ref=e5361bbe07fe65a2e7310fe2755a4ae30ae6d226", "patch": "@@ -609,6 +609,7 @@ dequeue_and_dump (di)\n       break;\n \n     case TEMPLATE_DECL:\n+      dump_child (\"rslt\", DECL_TEMPLATE_RESULT (t));\n       dump_child (\"inst\", DECL_TEMPLATE_INSTANTIATIONS (t));\n       dump_child (\"spcs\", DECL_TEMPLATE_SPECIALIZATIONS (t));\n       break;"}, {"sha": "3663ef3a920964844209bb86d4940dd9d6ba9784", "filename": "gcc/cp/error.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5361bbe07fe65a2e7310fe2755a4ae30ae6d226/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5361bbe07fe65a2e7310fe2755a4ae30ae6d226/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=e5361bbe07fe65a2e7310fe2755a4ae30ae6d226", "patch": "@@ -519,7 +519,7 @@ dump_aggr_type (t, flags)\n       typdef = !DECL_ARTIFICIAL (name);\n       tmplate = !typdef && TREE_CODE (t) != ENUMERAL_TYPE\n                 && TYPE_LANG_SPECIFIC (t) && CLASSTYPE_TEMPLATE_INFO (t)\n-                && (CLASSTYPE_TEMPLATE_SPECIALIZATION (t)\n+                && (CLASSTYPE_PARTIAL_SPECIALIZATION (t)\n                     || TREE_CODE (CLASSTYPE_TI_TEMPLATE (t)) != TEMPLATE_DECL\n                     || DECL_TEMPLATE_SPECIALIZATION (CLASSTYPE_TI_TEMPLATE (t))\n                     || PRIMARY_TEMPLATE_P (CLASSTYPE_TI_TEMPLATE (t)));"}, {"sha": "b225ac7c24558f2eb85b2b1a394e8c2312504cad", "filename": "gcc/cp/friend.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5361bbe07fe65a2e7310fe2755a4ae30ae6d226/gcc%2Fcp%2Ffriend.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5361bbe07fe65a2e7310fe2755a4ae30ae6d226/gcc%2Fcp%2Ffriend.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ffriend.c?ref=e5361bbe07fe65a2e7310fe2755a4ae30ae6d226", "patch": "@@ -205,7 +205,7 @@ make_friend_class (type, friend_type)\n     }\n \n   if (CLASS_TYPE_P (friend_type)\n-      && CLASSTYPE_TEMPLATE_SPECIALIZATION (friend_type)\n+      && CLASSTYPE_PARTIAL_SPECIALIZATION (friend_type)\n       && uses_template_parms (friend_type))\n     {\n       /* [temp.friend]"}, {"sha": "c59e8b735543e6c3538f7bd938475b816dfaf6fa", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5361bbe07fe65a2e7310fe2755a4ae30ae6d226/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5361bbe07fe65a2e7310fe2755a4ae30ae6d226/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=e5361bbe07fe65a2e7310fe2755a4ae30ae6d226", "patch": "@@ -190,7 +190,7 @@ finish_member_template_decl (decl)\n       /* Assume that the class is the only declspec.  */\n       decl = TREE_VALUE (decl);\n       if (IS_AGGR_TYPE (decl) && CLASSTYPE_TEMPLATE_INFO (decl)\n-\t  && ! CLASSTYPE_TEMPLATE_SPECIALIZATION (decl))\n+\t  && ! CLASSTYPE_PARTIAL_SPECIALIZATION (decl))\n \t{\n \t  tree tmpl = CLASSTYPE_TI_TEMPLATE (decl);\n \t  check_member_template (tmpl);\n@@ -252,7 +252,7 @@ template_class_depth_real (type, count_specializations)\n \t  if (CLASSTYPE_TEMPLATE_INFO (type)\n \t      && PRIMARY_TEMPLATE_P (CLASSTYPE_TI_TEMPLATE (type))\n \t      && ((count_specializations\n-\t\t   && CLASSTYPE_TEMPLATE_SPECIALIZATION (type))\n+\t\t   && CLASSTYPE_PARTIAL_SPECIALIZATION (type))\n \t\t  || uses_template_parms (CLASSTYPE_TI_ARGS (type))))\n \t    ++depth;\n \t}\n@@ -666,7 +666,7 @@ maybe_process_partial_specialization (type)\n \t      cp_pedwarn_at (\"  from definition of `%#D'\",\n \t\t\t     CLASSTYPE_TI_TEMPLATE (type));\n \t    }\n-\t  SET_CLASSTYPE_TEMPLATE_SPECIALIZATION (type);\n+\t  SET_CLASSTYPE_PARTIAL_SPECIALIZATION (type);\n \t  if (processing_template_decl)\n \t    push_template_decl (TYPE_MAIN_DECL (type));\n \t}\n@@ -2359,7 +2359,7 @@ push_template_decl_real (decl, is_friend)\n   /* See if this is a partial specialization.  */\n   is_partial = (DECL_IMPLICIT_TYPEDEF_P (decl)\n \t\t&& TREE_CODE (TREE_TYPE (decl)) != ENUMERAL_TYPE\n-\t\t&& CLASSTYPE_TEMPLATE_SPECIALIZATION (TREE_TYPE (decl)));\n+\t\t&& CLASSTYPE_PARTIAL_SPECIALIZATION (TREE_TYPE (decl)));\n \n   is_friend |= (TREE_CODE (decl) == FUNCTION_DECL && DECL_FRIEND_P (decl));\n \n@@ -3548,7 +3548,7 @@ classtype_mangled_name (t)\n   if (CLASSTYPE_TEMPLATE_INFO (t)\n       /* Specializations have already had their names set up in\n \t lookup_template_class.  */\n-      && !CLASSTYPE_TEMPLATE_SPECIALIZATION (t))\n+      && !CLASSTYPE_PARTIAL_SPECIALIZATION (t))\n     {\n       tree tmpl = most_general_template (CLASSTYPE_TI_TEMPLATE (t));\n \n@@ -3963,7 +3963,7 @@ lookup_template_class (d1, arglist, in_decl, context, entering_scope)\n \n \t      /* We only want partial instantiations, here, not\n \t\t specializations or full instantiations.  */\n-\t      if (CLASSTYPE_TEMPLATE_SPECIALIZATION (TREE_VALUE (found))\n+\t      if (CLASSTYPE_PARTIAL_SPECIALIZATION (TREE_VALUE (found))\n \t\t  || !uses_template_parms (TREE_VALUE (found)))\n \t\tcontinue;\n \n@@ -9194,7 +9194,7 @@ do_type_instantiation (t, storage)\n \t}\n     }\n \n-  if (CLASSTYPE_TEMPLATE_SPECIALIZATION (t))\n+  if (CLASSTYPE_PARTIAL_SPECIALIZATION (t))\n     {\n       /* [temp.spec]\n "}]}