{"sha": "c97412e2c8625dc76eeda589ff4c264abbed77e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzk3NDEyZTJjODYyNWRjNzZlZWRhNTg5ZmY0YzI2NGFiYmVkNzdlMw==", "commit": {"author": {"name": "Geert Bosch", "email": "bosch@gnat.com", "date": "2001-10-11T20:01:11Z"}, "committer": {"name": "Geert Bosch", "email": "bosch@gcc.gnu.org", "date": "2001-10-11T20:01:11Z"}, "message": "* gnat-style.texi: New file describing coding guidelines for Ada.\n\nFrom-SVN: r46198", "tree": {"sha": "203b115ebd97b9f9f14e4ea1103a11bb24048fd7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/203b115ebd97b9f9f14e4ea1103a11bb24048fd7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c97412e2c8625dc76eeda589ff4c264abbed77e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c97412e2c8625dc76eeda589ff4c264abbed77e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c97412e2c8625dc76eeda589ff4c264abbed77e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c97412e2c8625dc76eeda589ff4c264abbed77e3/comments", "author": null, "committer": null, "parents": [{"sha": "a185c302646a5ef7964ffa93c68997184a757d26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a185c302646a5ef7964ffa93c68997184a757d26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a185c302646a5ef7964ffa93c68997184a757d26"}], "stats": {"total": 631, "additions": 631, "deletions": 0}, "files": [{"sha": "fc7bac69a90028a1ecf2f9c62015fff40b8a7c08", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c97412e2c8625dc76eeda589ff4c264abbed77e3/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c97412e2c8625dc76eeda589ff4c264abbed77e3/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c97412e2c8625dc76eeda589ff4c264abbed77e3", "patch": "@@ -1,3 +1,7 @@\n+2001-10-10  Geert Bosch  <bosch@gnat.com>\n+\n+\t* gnat-style.texi: New file describing coding guidelines for Ada.\n+\t\n 2001-10-10  Ed Schonberg <schonber@gnat.com>\n \n \t* einfo.adb (Write_Entity_Flags): Elaboration_Entity_Required "}, {"sha": "c6f0927957181f728c9e1e6410f0b4375bdfcd28", "filename": "gcc/ada/gnat-style.texi", "status": "added", "additions": 627, "deletions": 0, "changes": 627, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c97412e2c8625dc76eeda589ff4c264abbed77e3/gcc%2Fada%2Fgnat-style.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c97412e2c8625dc76eeda589ff4c264abbed77e3/gcc%2Fada%2Fgnat-style.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat-style.texi?ref=c97412e2c8625dc76eeda589ff4c264abbed77e3", "patch": "@@ -0,0 +1,627 @@\n+\\input texinfo   @c -*-texinfo-*-\n+@c %**start of header\n+@c oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n+@c                                                                            o\n+@c                           GNAT DOCUMENTATION                               o\n+@c                                                                            o\n+@c                      G N A T   C O D I N G   S T Y L E                     o\n+@c                                                                            o\n+@c                               $Revision: 1.1 $\n+@c                                                                            o\n+@c          Copyright (C) 1992-2001 Ada Core Technologies, Inc.               o\n+@c                                                                            o\n+@c  GNAT is free software;  you can  redistribute it  and/or modify it under  o\n+@c  terms of the  GNU General Public License as published  by the Free Soft-  o\n+@c  ware  Foundation;  either version 2,  or (at your option) any later ver-  o\n+@c  sion.  GNAT is distributed in the hope that it will be useful, but WITH-  o\n+@c  OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY  o\n+@c  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License  o\n+@c  for  more details.  You should have  received  a copy of the GNU General  o\n+@c  Public License  distributed with GNAT;  see file COPYING.  If not, write  o\n+@c  to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston,  o\n+@c  MA 02111-1307, USA.                                                       o\n+@c                                                                            o\n+@c oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n+\n+@setfilename gnat-style.info\n+@settitle GNAT Coding Style\n+@c %**end of header\n+\n+@ifinfo\n+     @center GNAT Coding Style\n+\n+     @center A guide for GNAT developers\n+     Copyright (C) 1992-2001 Ada Core Technologies, Inc.\n+@end ifinfo\n+\n+@titlepage\n+@sp 10\n+@title GNAT Coding Stye\n+@subtitle A guide for GNAT developers\n+@subtitle Document revision level $Revision: 1.1 $\n+@subtitle Date: @today{}\n+@author Ada Core Technologies, Inc.\n+@end titlepage\n+@raisesections\n+\n+@node    Top,       General,         , (dir)\n+@comment node-name, next,    previous, up\n+\n+@menu\n+* General::\n+* Lexical Elements::\n+* Declarations and Types::\n+* Expressions and Names::\n+* Statements::\n+* Subprograms::\n+* Packages::\n+* Program Structure::\n+@end menu\n+\n+@c  -------------------------------------------------------------------------\n+@node    General, Lexical Elements, Top, Top\n+@section General\n+@c  -------------------------------------------------------------------------\n+\n+@noindent\n+Most of GNAT is written in Ada using a consistent style to ensure\n+readability of the code. This document has been written to help\n+maintain this consistent style, while having a large group of developers \n+work on the compiler.\n+\n+@noindent\n+For the coding style in the C parts of the compiler and run time,\n+see the GNU Coding Guidelines.\n+\n+@noindent\n+This document is structured after the Ada Reference manual. \n+Those familiar with that document should be able to quickly \n+lookup style rules for particular constructs.\n+\n+@c  -------------------------------------------------------------------------\n+@node    Lexical Elements, Declarations and Types, General, Top\n+@section Lexical Elements\n+@c  -------------------------------------------------------------------------\n+\n+@subsection Character Set and Separators\n+@c  -------------------------------------------------------------------------\n+\n+@itemize @bullet\n+@item\n+The character set used should be plain 7-bit ASCII.\n+The only separators allowed are space and the end-of-line sequence. \n+No other control character or format effector (such as HT, VT, FF) \n+should be used.\n+The normal end-of-line sequence is used, which may be LF, CR/LF or CR,\n+depending on the host system. An optional SUB (16#1A#) may be present as the \n+last character in the file on hosts using that character as file terminator.\n+\n+@item\n+Files that are checked in or distributed should be in host format.\n+\n+@item\n+A line should never be longer than 79 characters, not counting the line\n+separator.\n+\n+@item\n+Lines must not have trailing blanks.\n+\n+@item\n+Indentation is 3 characters per level for if-statements, loops, case\n+statements. For exact information on required spacing between lexical\n+elements, see file @file{style.adb}.\n+\n+@end itemize\n+\n+@subsection Identifiers\n+@c  -------------------------------------------------------------------------\n+@itemize @bullet\n+@item\n+Identifiers will start with an upper case letter, and each letter following\n+an underscore will be upper case.  Short acronyms may be all upper case. \n+All other letters are lower case.  \n+An exception is for identifiers matching a foreign language. In particular,\n+we use all lower case where appropriate for C.\n+\n+@item\n+Use underscores to separate words in an identifier.  \n+\n+@item Try to limit your use of abbreviations in identifiers. \n+It is ok to make a few abbreviations, explain what they mean, and then use them frequently, but don't use lots of obscure abbreviations. \n+An example is the @code{ALI} word which stands for Ada Library Information \n+and is by convention always written in upper-case when used in entity names.\n+\n+@smallexample\n+       procedure Find_ALI_Files;\n+@end smallexample\n+\n+@item\n+Don't use the variable I, use J instead, I is too easily mixed up with\n+1 in some fonts. Similarly don't use the variable O, which is too easily\n+mixed up with zero.\n+@end itemize\n+\n+@subsection Numeric Literals\n+@c  -------------------------------------------------------------------------\n+@itemize @bullet\n+@item\n+Numeric literals should include underscores where helpful for\n+readability.\n+\n+@smallexample\n+      1_000_000\n+      16#8000_000#\n+      3.14159_26535_89793_23846\n+@end smallexample\n+@end itemize\n+\n+@subsection Reserved Words\n+@c  -------------------------------------------------------------------------\n+@itemize @bullet\n+@item\n+Reserved words use all lower case.\n+\n+@smallexample\n+       return else\n+@end smallexample\n+\n+@item\n+The words \"Access\", \"Delta\" and \"Digits\" are capitalized when used\n+as attribute_designator.\n+@end itemize\n+\n+@subsection Comments\n+@c  -------------------------------------------------------------------------\n+\n+@itemize @bullet\n+@item\n+Comment start with @code{--  } (ie @code{--} followed by two spaces).\n+The only exception to this rule (i.e. one space is tolerated) is when the\n+comment ends with @code{--}.\n+It also accepted to have only one space between @code{--} and the start \n+of the comment when the comment is at the end of a line, \n+after an Ada statement.\n+\n+@item\n+Every sentence in a comment should start with an upper-case letter (including\n+the first letter of the comment).\n+\n+@item\n+When declarations are commented with \"hanging\" comments, i.e. comments\n+after the declaration, there is no blank line before the comment, and\n+if it is absolutely necessary to have blank lines within the comments\n+these blank lines *do* have a -- (unlike the normal rule, which is to\n+use entirely blank lines for separating comment paragraphs).\n+The comment start at same level of indentation as code they are commenting.\n+\n+@smallexample\n+       z : integer;\n+       --  Integer value for storing value of z\n+       --\n+       --  The previous line was a blank line\n+@end smallexample\n+\n+@item\n+Comments that are dubious or incomplete or comment on possibly\n+wrong or incomplete code should be preceded or followed by ???\n+\n+@item\n+Comments in a subprogram body must generally be surrounded by blank lines,\n+except after a \"begin\":\n+\n+@smallexample\n+       begin\n+          --  Comment for the next statement\n+\n+          A := 5;\n+\n+          --  Comment for the B statement\n+\n+          B := 6;\n+@end smallexample\n+\n+@item\n+In sequences of statements, comments at the end of the lines should be\n+aligned.\n+\n+@smallexample\n+        My_Identifier := 5;      --  First comment\n+        Other_Id := 6;           --  Second comment\n+@end smallexample\n+\n+@item\n+Short comments that fit on a single line are NOT ended with a period.\n+Comments taking more than a line are punctuated in the normal manner.\n+\n+@item\n+Comments should focus on why instead of what.\n+Descriptions of what subprograms do go with the specification.\n+\n+@item\n+Comments describing a subprogram spec should specifically mention the\n+formal argument names. General rule: write a comment that does not\n+depend on the names of things. The names are supplementary, not\n+sufficient, as comments.\n+\n+@item\n+Do NOT put two spaces after periods in comments.\n+@end itemize\n+\n+@c  -------------------------------------------------------------------------\n+@node    Declarations and Types, Expressions and Names, Lexical Elements,Top\n+@section Declarations and Types\n+@c  -------------------------------------------------------------------------\n+\n+@itemize @bullet\n+@item\n+In entity declarations, colons must be surrounded by spaces. Colons\n+should be aligned.\n+\n+@smallexample\n+        Entity1   : Integer;\n+        My_Entity : Integer;\n+@end smallexample\n+\n+@item\n+Declarations should be grouped in a logical order. \n+Related groups of declarations may be preceded by a header comment.\n+\n+@item\n+All local subprograms in a subprogram or package body should be declared\n+before the first local subprogram body. \n+\n+@item\n+Do not declare discriminated record types where the discriminant is used\n+for constraining an unconstrained array type. (Discriminated\n+records for a variant part are allowed.)\n+\n+@item\n+Don't declare local entities that hide global entities.\n+\n+@item\n+Don't declare multiple variables in one declaration that spans lines. \n+Start a new declaration on each line, instead\n+\n+@item\n+The defining_identifiers of global declarations serve as comments of a sort. \n+So don't choose terse names, but look for names that give useful information \n+instead.\n+\n+@item\n+Local names can be shorter, because they are used only within \n+one context, where comments explain their purpose.\n+\n+@end itemize\n+\n+\n+@c  -------------------------------------------------------------------------\n+@node    Expressions and Names, Statements, Declarations and Types, Top\n+@section Expressions and Names\n+@c  -------------------------------------------------------------------------\n+\n+@itemize @bullet\n+\n+@item\n+Every operator must be surrounded by spaces, except for the \n+exponentiation operator.\n+\n+@smallexample\n+       E := A * B**2 + 3 * (C - D);\n+@end smallexample\n+\n+@item\n+When folding a long line, fold before an operator, not after.\n+\n+@item\n+Use parentheses where they make the intended order of evaluation clearer:\n+@smallexample\n+       (A / B) * C\n+@end smallexample\n+@end itemize\n+\n+@c  -------------------------------------------------------------------------\n+@node    Statements, Subprograms, Expressions and Names, Top\n+@section Statements\n+@c  -------------------------------------------------------------------------\n+\n+@subsection Simple and Compound Statements\n+@c  -------------------------------------------------------------------------\n+@itemize @bullet\n+@item\n+Use only one statement or label per line.\n+@item\n+A longer sequence_of_statements may be divided in logical groups\n+or separated from surrounding code using a blank line.\n+@end itemize\n+\n+@subsection If Statements\n+@c  -------------------------------------------------------------------------\n+@itemize @bullet\n+@item\n+When the \"if\", \"elsif\" or \"else\" keywords fit on the same line with the\n+condition and the \"then\" keyword, then the statement is formatted as follows:\n+\n+@smallexample\n+        if <condition> then\n+           ...\n+        elsif <condition> then\n+           ...\n+        else\n+           ...\n+        end if;\n+@end smallexample\n+\n+@noindent\n+When the above layout is not possible, \"then\" should be aligned with \"if\",\n+and conditions should preferably be split before an \"and\" or \"or\" keyword\n+a follows:\n+\n+@smallexample\n+        if <long_condition_that_has_to_be_split>\n+          and then <continued_on_the_next_line>\n+        then\n+           ...\n+        end if;\n+@end smallexample\n+\n+@noindent\n+The \"elsif\", \"else\" and \"end if\" always line up with the \"if\" keyword. The\n+prefered location for splitting the line is before \"and\" or \"or\". The\n+continuation of a condition is indented with two spaces or as many as needed\n+to make nesting clear.\n+As exception, if conditions are closely related either of the following is\n+allowed:\n+\n+@smallexample\n+     if x = lakdsjfhlkashfdlkflkdsalkhfsalkdhflkjdsahf\n+          or else\n+        x = asldkjhalkdsjfhhfd\n+          or else\n+        x = asdfadsfadsf\n+     then\n+\n+     if x = lakdsjfhlkashfdlkflkdsalkhfsalkdhflkjdsahf or else\n+        x = asldkjhalkdsjfhhfd                         or else\n+        x = asdfadsfadsf\n+     then\n+@end smallexample\n+\n+@item\n+Conditions should use short-circuit forms (\"and then\", \"or else\").\n+\n+@item\n+Complex conditions in if-statements are indented two characters:\n+\n+@smallexample\n+      if this_complex_condition\n+        and then that_other_one\n+        and then one_last_one\n+      then\n+         ...\n+@end smallexample\n+\n+@item\n+Every \"if\" block is preceded and followed by a blank line, except\n+where it begins or ends a sequence_of_statements.\n+\n+@smallexample\n+        A := 5;\n+\n+        if A = 5 then\n+           null;\n+        end if;\n+\n+        A := 6;\n+@end smallexample\n+@end itemize\n+\n+@subsection Case statements\n+@itemize @bullet\n+\n+@item\n+Layout is as below. For long case statements, the extra indentation\n+can be saved by aligning the when clauses with the opening case.\n+\n+@smallexample\n+       case <expression> is\n+          when <condition> =>\n+             ...\n+          when <condition> =>\n+             ...\n+       end case;\n+@end smallexample\n+@end itemize\n+\n+@subsection Loop statements\n+@itemize @bullet\n+\n+@noindent\n+When possible, have \"for\" or \"while\" on one line with the condition\n+and the \"loop\" keyword.\n+\n+@smallexample\n+       for I in S'Range loop\n+          ...\n+       end loop;\n+@end smallexample\n+\n+@noindent\n+If the condition is too long, split the condition (see if_statement)\n+and align \"loop\" with the \"for\" or \"while\" keyword.\n+\n+@smallexample\n+      while <long_condition_that_has_to_be_split>\n+        and then <continued_on_the_next_line>\n+      loop\n+         ...\n+      end loop;\n+@end smallexample\n+\n+@noindent\n+If the loop_statement has an identifier, it is layout as follows:\n+\n+@smallexample\n+      Outer : while not <condition> loop\n+         ...\n+      end Outer;\n+@end smallexample\n+@end itemize\n+\n+@subsection Block Statements\n+@itemize @bullet\n+\n+@item\n+The (optional) \"declare\", \"begin\" and \"end\" statements are aligned,\n+except when the block_statement is named:\n+\n+@smallexample\n+      Some_Block : declare\n+         ...\n+      begin\n+         ...\n+      end Some_Block;\n+@end smallexample\n+\n+@end itemize\n+\n+@c  -------------------------------------------------------------------------\n+@node    Subprograms, Packages, Statements, Top\n+@section Subprograms\n+@c  -------------------------------------------------------------------------\n+\n+\n+@subsection Subprogram Declarations\n+@c  -------------------------------------------------------------------------\n+@itemize @bullet\n+\n+@item\n+Do not write the \"in\" for parameters, especially in functions:\n+\n+@smallexample\n+      function Length (S : String) return Integer;\n+@end smallexample\n+\n+@item\n+When the declaration line for a procedure or a function is too long, fold it.\n+\n+@smallexample\n+      function Head\n+        (Source : String;\n+         Count  : Natural;\n+         Pad    : Character := Space)\n+         return   String;\n+@end smallexample\n+\n+@item\n+The parameter list for a subprogram is preceded by a space:\n+\n+@smallexample\n+        procedure Func (A : Integer);\n+@end smallexample\n+\n+@end itemize\n+\n+@subsection Subprogram Bodies\n+@c  -------------------------------------------------------------------------\n+@itemize @bullet\n+\n+@item\n+The functions and procedures should always be sorted alphabetically in\n+a compilation unit.\n+\n+@item\n+All subprograms have a header giving the function name, with the following\n+format:\n+\n+@smallexample\n+      -----------------\n+      -- My_Function --\n+      -----------------\n+\n+      procedure My_Function is\n+      begin\n+@end smallexample\n+Note that the name in the header is preceded by a single space, \n+not two spaces as for other comments.\n+\n+@item\n+Every subprogram body must have a preceding subprogram_declaration.\n+\n+@item\n+If declarations of a subprogram contain at least one nested subprogram\n+body, then just before the begin is a line:\n+\n+@smallexample\n+        --  Start of processing for bla bla\n+\n+\tbegin\n+@end smallexample\n+\n+@end itemize\n+\n+@c  -------------------------------------------------------------------------\n+@node    Packages, Program Structure, Subprograms, Top\n+@section Packages and Visibility Rules\n+@c  -------------------------------------------------------------------------\n+\n+@itemize @bullet\n+\n+@item\n+All program units and subprograms have their name at the end:\n+\n+@smallexample\n+      package P is\n+         ...\n+      end P;\n+@end smallexample\n+\n+@item\n+We will use the style of use-ing with-ed packages, with the context\n+clauses looking like:\n+\n+@smallexample\n+      with A; use A;\n+      with B; use B;\n+@end smallexample\n+\n+@item\n+Names declared in the visible part of packages should be\n+unique, to prevent name clashes when the packages are \"use\"d.\n+\n+@smallexample\n+      package Entity is\n+         type Entity_Kind is ...;\n+\t ...\n+      end Entity;\n+@end smallexample\n+\n+@item\n+After the file header comment, the context clause and unit specification\n+should be the first thing in a program_unit.\n+@end itemize\n+\n+@c  -------------------------------------------------------------------------\n+@node    Program Structure,, Packages, Top\n+@section Program Structure and Compilation Issues\n+@c  -------------------------------------------------------------------------\n+\n+@itemize @bullet\n+@item\n+Every GNAT source file must be compiled with the \"-gnatg\" switch to check\n+the coding style (Note that you should look at @file{style.adb} to \n+see the lexical rules enforced by -gnatg).\n+\n+@item\n+Each source file should contain only one compilation unit.\n+\n+@item\n+Filenames should be 8 characters or less followed by the \".adb\" extension\n+for a body or \".ads\" for a spec.\n+\n+@item\n+Unit names should be distinct when krunched to 8 characters \n+(see @file{krunch.ads}) and the filenames should match the unit name, \n+except that they are all lower case.\n+@end itemize\n+\n+@bye"}]}