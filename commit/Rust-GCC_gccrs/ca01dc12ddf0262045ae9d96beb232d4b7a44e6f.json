{"sha": "ca01dc12ddf0262045ae9d96beb232d4b7a44e6f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2EwMWRjMTJkZGYwMjYyMDQ1YWU5ZDk2YmViMjMyZDRiN2E0NGU2Zg==", "commit": {"author": {"name": "Torbjorn Granlund", "email": "tege@gnu.org", "date": "1995-05-12T01:36:45Z"}, "committer": {"name": "Torbjorn Granlund", "email": "tege@gnu.org", "date": "1995-05-12T01:36:45Z"}, "message": "(i960_output_ldconst): Let split_double handle DImode.\n\n(i960_print_operand): Use REAL_VALUE_TO_DECIMAL for decimal strings.\n(i960_output_double, i960_output_float):  Likewise; also change arg\nVALUE from `double' to `REAL_VALUE_TYPE'.\n\nFrom-SVN: r9632", "tree": {"sha": "3bd289b4c811fe4ff19d0d6dff0dfc60a86e6c5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3bd289b4c811fe4ff19d0d6dff0dfc60a86e6c5e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca01dc12ddf0262045ae9d96beb232d4b7a44e6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca01dc12ddf0262045ae9d96beb232d4b7a44e6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca01dc12ddf0262045ae9d96beb232d4b7a44e6f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca01dc12ddf0262045ae9d96beb232d4b7a44e6f/comments", "author": null, "committer": null, "parents": [{"sha": "009eaef6a08c82253361a73968b30b91970791b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/009eaef6a08c82253361a73968b30b91970791b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/009eaef6a08c82253361a73968b30b91970791b6"}], "stats": {"total": 55, "additions": 15, "deletions": 40}, "files": [{"sha": "57c409bfee331f18994a134b0c013eb300208859", "filename": "gcc/config/i960/i960.c", "status": "modified", "additions": 15, "deletions": 40, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca01dc12ddf0262045ae9d96beb232d4b7a44e6f/gcc%2Fconfig%2Fi960%2Fi960.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca01dc12ddf0262045ae9d96beb232d4b7a44e6f/gcc%2Fconfig%2Fi960%2Fi960.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.c?ref=ca01dc12ddf0262045ae9d96beb232d4b7a44e6f", "patch": "@@ -581,7 +581,6 @@ i960_output_ldconst (dst, src)\n   register unsigned rsrc2;\n   enum machine_mode mode = GET_MODE (dst);\n   rtx operands[4];\n-  union { long l[2]; double d; } x;\n \n   operands[0] = operands[2] = dst;\n   operands[1] = operands[3] = src;\n@@ -631,18 +630,10 @@ i960_output_ldconst (dst, src)\n   else if (mode == DImode)\n     {\n       rtx upperhalf, lowerhalf, xoperands[2];\n-      char *string;\n \n-      if (GET_CODE (src) == CONST_DOUBLE)\n-\t{\n-\t  upperhalf = gen_rtx (CONST_INT, VOIDmode, CONST_DOUBLE_HIGH (src));\n-\t  lowerhalf = gen_rtx (CONST_INT, VOIDmode, CONST_DOUBLE_LOW (src));\n-\t}\n-      else if (GET_CODE (src) == CONST_INT)\n-\t{\n-\t  lowerhalf = src;\n-\t  upperhalf = INTVAL (src) < 0 ? constm1_rtx : const0_rtx;\n-\t}\n+      if (GET_CODE (src) == CONST_DOUBLE || GET_CODE (src) == CONST_INT)\n+ \tsplit_double (src, &lowerhalf, &upperhalf);\n+\n       else\n \tabort ();\n \n@@ -1458,22 +1449,23 @@ i960_print_operand (file, x, code)\n     }\n   else if (rtxcode == CONST_DOUBLE)\n     {\n-      double d;\n+      REAL_VALUE_TYPE d;\n+      char dstr[30];\n \n-      if (x == CONST0_RTX (DFmode) || x == CONST0_RTX (SFmode))\n+      if (x == CONST0_RTX (GET_MODE (x)))\n \t{\n \t  fprintf (file, \"0f0.0\");\n \t  return;\n \t}\n-      else if (x == CONST1_RTX (DFmode) || x == CONST1_RTX (SFmode))\n+      else if (x == CONST1_RTX (GET_MODE (x)))\n \t{\n \t  fprintf (file, \"0f1.0\");\n \t  return;\n \t}\n \n-      /* This better be a comment.  */\n       REAL_VALUE_FROM_CONST_DOUBLE (d, x);\n-      fprintf (file, \"%#g\", d);\n+      REAL_VALUE_TO_DECIMAL (d, \"%#g\", dstr);\n+      fprintf (file, \"0f%s\", dstr);\n       return;\n     }\n \n@@ -2115,41 +2107,24 @@ i960_function_arg (cum, mode, type, named)\n void\n i960_output_double (file, value)\n      FILE *file;\n-     double value;\n+     REAL_VALUE_TYPE value;\n {\n-#ifdef REAL_VALUE_TO_TARGET_DOUBLE\n   long value_long[2];\n   REAL_VALUE_TO_TARGET_DOUBLE (value, value_long);\n \n-  fprintf (file, \"\\t.word\\t0x%08lx\\t\\t# %.20g\\n\\t.word\\t0x%08lx\\n\",\n-\t   value_long[0], value, value_long[1]);\n-#else\n-  if (REAL_VALUE_ISINF (value))\n-    {\n-      fprintf (file, \"\\t.word\t0\\n\");\n-      fprintf (file, \"\\t.word\t0x7ff00000\t# Infinity\\n\");\n-    }\n-  else\n-    fprintf (file, \"\\t.double 0d%.17e\\n\", (value));\n-#endif\n+  fprintf (file, \"\\t.word\\t0x%08lx\\n\\t.word\\t0x%08lx\\n\",\n+\t   value_long[0], value_long[1]);\n }\n-\n+  \n void\n i960_output_float (file, value)\n      FILE *file;\n-     double value;\n+     REAL_VALUE_TYPE value;\n {\n-#ifdef REAL_VALUE_TO_TARGET_SINGLE\n   long value_long;\n   REAL_VALUE_TO_TARGET_SINGLE (value, value_long);\n \n-  fprintf (file, \"\\t.word\\t0x%08lx\\t\\t# %.12g (float)\\n\", value_long, value);\n-#else\n-  if (REAL_VALUE_ISINF (value))\n-    fprintf (file, \"\\t.word\t0x7f800000\t# Infinity\\n\");\n-  else\n-    fprintf (file, \"\\t.float 0f%.12e\\n\", (value));\n-#endif\n+  fprintf (file, \"\\t.word\\t0x%08lx\\n\", value_long);\n }\n \f\n /* Return the number of bits that an object of size N bytes is aligned to.  */"}]}