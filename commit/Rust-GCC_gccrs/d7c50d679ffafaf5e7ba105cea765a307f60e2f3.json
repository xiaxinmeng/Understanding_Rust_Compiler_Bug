{"sha": "d7c50d679ffafaf5e7ba105cea765a307f60e2f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDdjNTBkNjc5ZmZhZmFmNWU3YmExMDVjZWE3NjVhMzA3ZjYwZTJmMw==", "commit": {"author": {"name": "Wilco Dijkstra", "email": "wdijkstr@arm.com", "date": "2019-03-05T15:04:01Z"}, "committer": {"name": "Wilco Dijkstra", "email": "wilco@gcc.gnu.org", "date": "2019-03-05T15:04:01Z"}, "message": "[ARM] Fix PR89222\n\nThe GCC optimizer can generate symbols with non-zero offset from simple\nif-statements. Bit zero is used for the Arm/Thumb state bit, so relocations\nwith offsets fail if it changes bit zero and the relocation forces bit zero\nto true.  The fix is to disable offsets on function pointer symbols.  \n\n    gcc/\n\tPR target/89222\n\t* config/arm/arm.md (movsi): Use targetm.cannot_force_const_mem\n\tto decide when to split off a non-zero offset from a symbol.\n\t* config/arm/arm.c (arm_cannot_force_const_mem): Disallow offsets\n\tin function symbols.\n\n    testsuite/\n\tPR target/89222\n\t* gcc.target/arm/pr89222.c: Add new test.\n\nFrom-SVN: r269390", "tree": {"sha": "253d37b987d7417d008a27abf6398beaa5323df8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/253d37b987d7417d008a27abf6398beaa5323df8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d7c50d679ffafaf5e7ba105cea765a307f60e2f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7c50d679ffafaf5e7ba105cea765a307f60e2f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7c50d679ffafaf5e7ba105cea765a307f60e2f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7c50d679ffafaf5e7ba105cea765a307f60e2f3/comments", "author": null, "committer": null, "parents": [{"sha": "deeec83de4379e253af4f41eaaf8f45d4db17302", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/deeec83de4379e253af4f41eaaf8f45d4db17302", "html_url": "https://github.com/Rust-GCC/gccrs/commit/deeec83de4379e253af4f41eaaf8f45d4db17302"}], "stats": {"total": 108, "additions": 67, "deletions": 41}, "files": [{"sha": "d4e8cbe66afdb07cb1ce2d7e1e4c7c046d77ef97", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7c50d679ffafaf5e7ba105cea765a307f60e2f3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7c50d679ffafaf5e7ba105cea765a307f60e2f3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d7c50d679ffafaf5e7ba105cea765a307f60e2f3", "patch": "@@ -1,3 +1,11 @@\n+2019-03-05  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\tPR target/89222\n+\t* config/arm/arm.md (movsi): Use targetm.cannot_force_const_mem\n+\tto decide when to split off a non-zero offset from a symbol.\n+\t* config/arm/arm.c (arm_cannot_force_const_mem): Disallow offsets\n+\tin function symbols.\n+\n 2019-03-05  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/89594"}, {"sha": "69b74a237a5f10b4137aa995ad43b77d6ecd04db", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7c50d679ffafaf5e7ba105cea765a307f60e2f3/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7c50d679ffafaf5e7ba105cea765a307f60e2f3/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=d7c50d679ffafaf5e7ba105cea765a307f60e2f3", "patch": "@@ -8940,11 +8940,16 @@ static bool\n arm_cannot_force_const_mem (machine_mode mode ATTRIBUTE_UNUSED, rtx x)\n {\n   rtx base, offset;\n+  split_const (x, &base, &offset);\n \n-  if (ARM_OFFSETS_MUST_BE_WITHIN_SECTIONS_P)\n+  if (SYMBOL_REF_P (base))\n     {\n-      split_const (x, &base, &offset);\n-      if (GET_CODE (base) == SYMBOL_REF\n+      /* Function symbols cannot have an offset due to the Thumb bit.  */\n+      if ((SYMBOL_REF_FLAGS (base) & SYMBOL_FLAG_FUNCTION)\n+\t  && INTVAL (offset) != 0)\n+\treturn true;\n+\n+      if (ARM_OFFSETS_MUST_BE_WITHIN_SECTIONS_P\n \t  && !offset_within_block_p (base, INTVAL (offset)))\n \treturn true;\n     }"}, {"sha": "18059014b8b92003726712727c936ed9f163cf2f", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 14, "deletions": 38, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7c50d679ffafaf5e7ba105cea765a307f60e2f3/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7c50d679ffafaf5e7ba105cea765a307f60e2f3/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=d7c50d679ffafaf5e7ba105cea765a307f60e2f3", "patch": "@@ -6016,53 +6016,29 @@\n         }\n     }\n \n-  if (ARM_OFFSETS_MUST_BE_WITHIN_SECTIONS_P)\n+  split_const (operands[1], &base, &offset);\n+  if (INTVAL (offset) != 0\n+      && targetm.cannot_force_const_mem (SImode, operands[1]))\n     {\n-      split_const (operands[1], &base, &offset);\n-      if (GET_CODE (base) == SYMBOL_REF\n-\t  && !offset_within_block_p (base, INTVAL (offset)))\n-\t{\n-\t  tmp = can_create_pseudo_p () ? gen_reg_rtx (SImode) : operands[0];\n-\t  emit_move_insn (tmp, base);\n-\t  emit_insn (gen_addsi3 (operands[0], tmp, offset));\n-\t  DONE;\n-\t}\n+      tmp = can_create_pseudo_p () ? gen_reg_rtx (SImode) : operands[0];\n+      emit_move_insn (tmp, base);\n+      emit_insn (gen_addsi3 (operands[0], tmp, offset));\n+      DONE;\n     }\n \n+  tmp = can_create_pseudo_p () ? NULL_RTX : operands[0];\n+\n   /* Recognize the case where operand[1] is a reference to thread-local\n-     data and load its address to a register.  */\n+     data and load its address to a register.  Offsets have been split off\n+     already.  */\n   if (arm_tls_referenced_p (operands[1]))\n-    {\n-      rtx tmp = operands[1];\n-      rtx addend = NULL;\n-\n-      if (GET_CODE (tmp) == CONST && GET_CODE (XEXP (tmp, 0)) == PLUS)\n-        {\n-          addend = XEXP (XEXP (tmp, 0), 1);\n-          tmp = XEXP (XEXP (tmp, 0), 0);\n-        }\n-\n-      gcc_assert (GET_CODE (tmp) == SYMBOL_REF);\n-      gcc_assert (SYMBOL_REF_TLS_MODEL (tmp) != 0);\n-\n-      tmp = legitimize_tls_address (tmp,\n-\t\t\t\t    !can_create_pseudo_p () ? operands[0] : 0);\n-      if (addend)\n-        {\n-          tmp = gen_rtx_PLUS (SImode, tmp, addend);\n-          tmp = force_operand (tmp, operands[0]);\n-        }\n-      operands[1] = tmp;\n-    }\n+    operands[1] = legitimize_tls_address (operands[1], tmp);\n   else if (flag_pic\n \t   && (CONSTANT_P (operands[1])\n \t       || symbol_mentioned_p (operands[1])\n \t       || label_mentioned_p (operands[1])))\n-      operands[1] = legitimize_pic_address (operands[1], SImode,\n-\t\t\t\t\t    (!can_create_pseudo_p ()\n-\t\t\t\t\t     ? operands[0]\n-\t\t\t\t\t     : NULL_RTX), NULL_RTX,\n-\t\t\t\t\t    false /*compute_now*/);\n+    operands[1] =\n+      legitimize_pic_address (operands[1], SImode, tmp, NULL_RTX, false);\n   }\n   \"\n )"}, {"sha": "7c57390f83bd824635867c35c738e0f830a97f55", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7c50d679ffafaf5e7ba105cea765a307f60e2f3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7c50d679ffafaf5e7ba105cea765a307f60e2f3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d7c50d679ffafaf5e7ba105cea765a307f60e2f3", "patch": "@@ -1,3 +1,8 @@\n+2019-03-05  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\tPR target/89222\n+\t* gcc.target/arm/pr89222.c: Add new test.\n+\n 2019-03-05  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/89594"}, {"sha": "d26d7df17544db8426331e67b9a36d749ec6c6d1", "filename": "gcc/testsuite/gcc.target/arm/pr89222.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7c50d679ffafaf5e7ba105cea765a307f60e2f3/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr89222.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7c50d679ffafaf5e7ba105cea765a307f60e2f3/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr89222.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr89222.c?ref=d7c50d679ffafaf5e7ba105cea765a307f60e2f3", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+void g (void);\n+\n+void f1 (int x)\n+{\n+  if (x != (int) g + 3)\n+    return;\n+  g();\n+}\n+\n+void (*a2)(void);\n+\n+void f2 (void)\n+{\n+  a2 = &g + 3;\n+}\n+\n+typedef void (*__sighandler_t)(int);\n+void handler (int);\n+\n+void f3 (int x)\n+{\n+  __sighandler_t h = &handler;\n+  if (h != (__sighandler_t) 2 && h != (__sighandler_t) 1)\n+    h (x);\n+}\n+\n+/* { dg-final { scan-assembler-times {add(?:s)?\\tr[0-9]+, r[0-9]+, #3} 2 } } */\n+/* { dg-final { scan-assembler-not {.word\\tg\\+3} } } */\n+/* { dg-final { scan-assembler-not {.word\\thandler-1} } } */"}]}