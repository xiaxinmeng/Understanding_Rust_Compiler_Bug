{"sha": "c750e76857add05d481a68df00bf75d5f5afc419", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzc1MGU3Njg1N2FkZDA1ZDQ4MWE2OGRmMDBiZjc1ZDVmNWFmYzQxOQ==", "commit": {"author": {"name": "Tristan Gingold", "email": "gingold@adacore.com", "date": "2011-11-07T10:17:44Z"}, "committer": {"name": "Tristan Gingold", "email": "gingold@gcc.gnu.org", "date": "2011-11-07T10:17:44Z"}, "message": "config.gcc (*-*-*vms*): Set c_target_objs, cxx_target_objs.\n\n2011-11-07  Tristan Gingold  <gingold@adacore.com>\n\n\t* config.gcc (*-*-*vms*): Set c_target_objs, cxx_target_objs.\n\t* config/vms/t-vms: Add vms-c.o rule.\n\t* config/vms/vms-c.c: New file.\n\t* config/vms/vms-protos.h (vms_c_register_pragma): New prototype.\n\t* config/vms/vms.h (REGISTER_TARGET_PRAGMAS): Define.\n\nFrom-SVN: r181079", "tree": {"sha": "ddbc1e6dd1a5280e98e654013141bf939c74634c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ddbc1e6dd1a5280e98e654013141bf939c74634c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c750e76857add05d481a68df00bf75d5f5afc419", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c750e76857add05d481a68df00bf75d5f5afc419", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c750e76857add05d481a68df00bf75d5f5afc419", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c750e76857add05d481a68df00bf75d5f5afc419/comments", "author": {"login": "gingold-adacore", "id": 16334725, "node_id": "MDQ6VXNlcjE2MzM0NzI1", "avatar_url": "https://avatars.githubusercontent.com/u/16334725?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gingold-adacore", "html_url": "https://github.com/gingold-adacore", "followers_url": "https://api.github.com/users/gingold-adacore/followers", "following_url": "https://api.github.com/users/gingold-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/gingold-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/gingold-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gingold-adacore/subscriptions", "organizations_url": "https://api.github.com/users/gingold-adacore/orgs", "repos_url": "https://api.github.com/users/gingold-adacore/repos", "events_url": "https://api.github.com/users/gingold-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/gingold-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ba89fcb67207e6d364910572ab98ba165f5ad7dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba89fcb67207e6d364910572ab98ba165f5ad7dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba89fcb67207e6d364910572ab98ba165f5ad7dd"}], "stats": {"total": 270, "additions": 270, "deletions": 0}, "files": [{"sha": "3d3708cc8082753e9ca55dcb236973c145fcf187", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c750e76857add05d481a68df00bf75d5f5afc419/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c750e76857add05d481a68df00bf75d5f5afc419/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c750e76857add05d481a68df00bf75d5f5afc419", "patch": "@@ -1,3 +1,11 @@\n+2011-11-07  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* config.gcc (*-*-*vms*): Set c_target_objs, cxx_target_objs.\n+\t* config/vms/t-vms: Add vms-c.o rule.\n+\t* config/vms/vms-c.c: New file.\n+\t* config/vms/vms-protos.h (vms_c_register_pragma): New prototype.\n+\t* config/vms/vms.h (REGISTER_TARGET_PRAGMAS): Define.\n+\n 2011-11-07  Tristan Gingold  <gingold@adacore.com>\n \n \t* config/alpha/vms.h (TARGET_OBJECT_SUFFIX,"}, {"sha": "45ba919dadf91a769ed3ab86e9feef9ced9d377d", "filename": "gcc/config.gcc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c750e76857add05d481a68df00bf75d5f5afc419/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c750e76857add05d481a68df00bf75d5f5afc419/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=c750e76857add05d481a68df00bf75d5f5afc419", "patch": "@@ -717,6 +717,8 @@ case ${target} in\n   extra_objs=\"vms.o\"\n   target_gtfiles=\"$target_gtfiles \\$(srcdir)/config/vms/vms.c\"\n   tm_p_file=\"${tm_p_file} vms/vms-protos.h\"\n+  c_target_objs=\"vms-c.o\"\n+  cxx_target_objs=\"vms-c.o\"\n   if test x$gnu_ld != xyes; then\n     # Build wrappers for native case.\n     extra_programs=\"ld\\$(exeext) ar\\$(exeext)\""}, {"sha": "61f9df55c31572826f92d8c39d0b24b88ece44af", "filename": "gcc/config/vms/t-vms", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c750e76857add05d481a68df00bf75d5f5afc419/gcc%2Fconfig%2Fvms%2Ft-vms", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c750e76857add05d481a68df00bf75d5f5afc419/gcc%2Fconfig%2Fvms%2Ft-vms", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvms%2Ft-vms?ref=c750e76857add05d481a68df00bf75d5f5afc419", "patch": "@@ -32,3 +32,9 @@ vms-crtlmap.h: $(srcdir)/config/vms/vms-crtlmap.map  \\\n vms.o: $(srcdir)/config/vms/vms.c $(TREE_H) $(CONFIG_H) $(SYSTEM_H) \\\n   coretypes.h $(TM_P_H) vms-crtlmap.h\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<\n+\n+vms-c.o: $(srcdir)/config/vms/vms-c.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n+  $(TM_H) $(CPPLIB_H) $(TREE_H) c-family/c-pragma.h toplev.h $(GGC_H) \\\n+  $(TM_P_H)\n+\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n+          $(PREPROCESSOR_DEFINES) \\$<"}, {"sha": "eb4c63577a9e9cf324434b6bef7f762fa98b5b4d", "filename": "gcc/config/vms/vms-c.c", "status": "added", "additions": 248, "deletions": 0, "changes": 248, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c750e76857add05d481a68df00bf75d5f5afc419/gcc%2Fconfig%2Fvms%2Fvms-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c750e76857add05d481a68df00bf75d5f5afc419/gcc%2Fconfig%2Fvms%2Fvms-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvms%2Fvms-c.c?ref=c750e76857add05d481a68df00bf75d5f5afc419", "patch": "@@ -0,0 +1,248 @@\n+/* VMS specific, C compiler specific functions.\n+   Copyright (C) 2011\n+   Free Software Foundation, Inc.\n+   Contributed by Tristan Gingold (gingold@adacore.com).\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"cpplib.h\"\n+#include \"tree.h\"\n+#include \"c-family/c-pragma.h\"\n+#include \"c-family/c-common.h\"\n+#include \"toplev.h\"\n+#include \"ggc.h\"\n+#include \"tm_p.h\"\n+#include \"incpath.h\"\n+#include \"diagnostic.h\"\n+\n+/* '#pragma __nostandard' is simply ignored.  */\n+\n+static void\n+vms_pragma_nostandard (cpp_reader *pfile ATTRIBUTE_UNUSED)\n+{\n+  tree x;\n+\n+  if (pragma_lex (&x) != CPP_EOF)\n+    warning (OPT_Wpragmas, \"junk at end of #pragma __nostandard\");\n+}\n+\n+/* '#pragma __standard' is simply ignored.  */\n+\n+static void\n+vms_pragma_standard (cpp_reader *pfile ATTRIBUTE_UNUSED)\n+{\n+  tree x;\n+\n+  if (pragma_lex (&x) != CPP_EOF)\n+    warning (OPT_Wpragmas, \"junk at end of #pragma __standard\");\n+}\n+\n+/* Saved member alignment.  */\n+static int saved_member_alignment;\n+\n+/* Handle '#pragma member_alignment'.  */\n+\n+static void\n+vms_pragma_member_alignment (cpp_reader *pfile ATTRIBUTE_UNUSED)\n+{\n+  tree x;\n+  int tok;\n+  const char *arg;\n+\n+  tok = pragma_lex (&x);\n+\n+  if (tok == CPP_EOF)\n+    {\n+      /* Disable packing.  */\n+      maximum_field_alignment = initial_max_fld_align;\n+      return;\n+    }\n+  if (tok != CPP_NAME)\n+    {\n+      warning (OPT_Wpragmas, \"malformed '#pragma member_alignment', ignoring\");\n+      return;\n+    }\n+\n+  arg = IDENTIFIER_POINTER (x);\n+  /* Accept '__' prefix.  */\n+  if (arg[0] == '_' && arg[1] == '_')\n+    arg += 2;\n+\n+  if (strcmp (arg, \"save\") == 0)\n+    saved_member_alignment = maximum_field_alignment;\n+  else if (strcmp (arg, \"restore\") == 0)\n+    maximum_field_alignment = saved_member_alignment;\n+  else\n+    {\n+      error (\"unknown '#pragma member_alignment' name %s\", arg);\n+      return;\n+    }\n+  if (pragma_lex (&x) != CPP_EOF)\n+    {\n+      error (\"malformed '#pragma member_alignment'\");\n+      return;\n+    }\n+}\n+\n+/* Handle '#pragma nomember_alignment'.  */\n+\n+static void\n+vms_pragma_nomember_alignment (cpp_reader *pfile ATTRIBUTE_UNUSED)\n+{\n+  tree x;\n+  int tok;\n+\n+  tok = pragma_lex (&x);\n+  if (tok == CPP_NAME)\n+    {\n+      const char *arg = IDENTIFIER_POINTER (x);\n+\n+      /* Accept '__' prefix.  */\n+      if (arg[0] == '_' && arg[1] == '_')\n+        arg += 2;\n+\n+      if (strcmp (arg, \"word\") == 0)\n+        maximum_field_alignment = 2 * BITS_PER_UNIT;\n+      else if (strcmp (arg, \"longword\") == 0)\n+        maximum_field_alignment = 4 * BITS_PER_UNIT;\n+      else if (strcmp (arg, \"quadword\") == 0)\n+        maximum_field_alignment = 8 * BITS_PER_UNIT;\n+      else\n+        {\n+          error (\"unhandled alignment for '#pragma nomember_alignment'\");\n+        }\n+\n+      tok = pragma_lex (&x);\n+    }\n+  else\n+    {\n+      /* Enable packing.  */\n+      maximum_field_alignment = BITS_PER_UNIT;\n+    }\n+\n+  if (tok != CPP_EOF)\n+    {\n+      error (\"garbage at end of '#pragma nomember_alignment'\");\n+      return;\n+    }\n+}\n+\n+/* The 'extern model' for public data.  */\n+\n+enum extern_model_kind\n+{\n+  /* Create one overlaid section per variable.  */\n+  extern_model_common_block,\n+\n+  /* Like unix: multiple not-initialized declarations are allowed.  */\n+  extern_model_relaxed_refdef,\n+\n+  /* Like -fno-common.  */\n+  extern_model_strict_refdef,\n+\n+  /* Declarations creates symbols without storage.  */\n+  extern_model_globalvalue\n+};\n+\n+/* Current and saved extern model.  */\n+static enum extern_model_kind current_extern_model;\n+static enum extern_model_kind saved_extern_model;\n+\n+/* Partial handling of '#pragma extern_model'.  */\n+\n+static void\n+vms_pragma_extern_model (cpp_reader *pfile ATTRIBUTE_UNUSED)\n+{\n+  tree x;\n+  int tok;\n+  const char *arg;\n+\n+  tok = pragma_lex (&x);\n+\n+  if (tok != CPP_NAME)\n+    {\n+      warning (OPT_Wpragmas, \"malformed '#pragma extern_model', ignoring\");\n+      return;\n+    }\n+\n+  arg = IDENTIFIER_POINTER (x);\n+  /* Accept \"__\" prefix.  */\n+  if (arg[0] == '_' && arg[1] == '_')\n+    arg += 2;\n+\n+  if (strcmp (arg, \"save\") == 0)\n+    saved_extern_model = current_extern_model;\n+  else if (strcmp (arg, \"restore\") == 0)\n+    current_extern_model = saved_extern_model;\n+  else if (strcmp (arg, \"strict_refdef\") == 0)\n+    current_extern_model = extern_model_strict_refdef;\n+  else if (strcmp (arg, \"common_block\") == 0)\n+    current_extern_model = extern_model_common_block;\n+  else if (strcmp (arg, \"globalvalue\") == 0)\n+    {\n+      sorry (\"extern model globalvalue\");\n+      return;\n+    }\n+  else\n+    {\n+      error (\"unknown '#pragma extern_model' model '%s'\", arg);\n+      return;\n+    }\n+#if 0\n+  if (pragma_lex (&x) != CPP_EOF)\n+    {\n+      permerror (input_location, \"junk at end of '#pragma extern_model'\");\n+      return;\n+    }\n+#endif\n+}\n+\n+/* Ignore '#pragma message'.  */\n+\n+static void\n+vms_pragma_message (cpp_reader *pfile ATTRIBUTE_UNUSED)\n+{\n+  /* Completly ignored.  */\n+#if 0\n+  pedwarn (input_location, OPT_Wpragmas,\n+           \"vms '#pragma __message' is ignored\");\n+#endif\n+}\n+\n+/* Add vms-specific pragma.  */\n+\n+void\n+vms_c_register_pragma (void)\n+{\n+  c_register_pragma (NULL, \"__nostandard\", vms_pragma_nostandard);\n+  c_register_pragma (NULL, \"nostandard\", vms_pragma_nostandard);\n+  c_register_pragma (NULL, \"__standard\", vms_pragma_standard);\n+  c_register_pragma (NULL, \"standard\", vms_pragma_standard);\n+  c_register_pragma (NULL, \"__member_alignment\", vms_pragma_member_alignment);\n+  c_register_pragma (NULL, \"member_alignment\", vms_pragma_member_alignment);\n+  c_register_pragma (NULL, \"__nomember_alignment\",\n+                     vms_pragma_nomember_alignment);\n+  c_register_pragma (NULL, \"nomember_alignment\",\n+                     vms_pragma_nomember_alignment);\n+  c_register_pragma (NULL, \"__extern_model\", vms_pragma_extern_model);\n+  c_register_pragma (NULL, \"extern_model\", vms_pragma_extern_model);\n+  c_register_pragma (NULL, \"__message\", vms_pragma_message);\n+}"}, {"sha": "c313638eae243526f3403e539bc1c23771774439", "filename": "gcc/config/vms/vms-protos.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c750e76857add05d481a68df00bf75d5f5afc419/gcc%2Fconfig%2Fvms%2Fvms-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c750e76857add05d481a68df00bf75d5f5afc419/gcc%2Fconfig%2Fvms%2Fvms-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvms%2Fvms-protos.h?ref=c750e76857add05d481a68df00bf75d5f5afc419", "patch": "@@ -17,5 +17,8 @@ You should have received a copy of the GNU General Public License\n along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n+/* vms-c.c  */\n+extern void vms_c_register_pragma (void);\n+\n /* vms.c  */\n void vms_patch_builtins (void);"}, {"sha": "0da9d85a89c5e888c874dc89a74ad8432c4e370b", "filename": "gcc/config/vms/vms.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c750e76857add05d481a68df00bf75d5f5afc419/gcc%2Fconfig%2Fvms%2Fvms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c750e76857add05d481a68df00bf75d5f5afc419/gcc%2Fconfig%2Fvms%2Fvms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvms%2Fvms.h?ref=c750e76857add05d481a68df00bf75d5f5afc419", "patch": "@@ -34,6 +34,9 @@ along with GCC; see the file COPYING3.  If not see\n       }                                              \\\n   } while (0)\n \n+/* Tell compiler we want to support VMS pragmas */\n+#define REGISTER_TARGET_PRAGMAS() vms_c_register_pragma ()\n+\n /* By default, allow $ to be part of an identifier.  */\n #define DOLLARS_IN_IDENTIFIERS 2\n "}]}