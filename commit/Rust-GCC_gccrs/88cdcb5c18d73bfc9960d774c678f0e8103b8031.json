{"sha": "88cdcb5c18d73bfc9960d774c678f0e8103b8031", "node_id": "C_kwDOANBUbNoAKDg4Y2RjYjVjMThkNzNiZmM5OTYwZDc3NGM2NzhmMGU4MTAzYjgwMzE", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-12-27T14:05:17Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-12-27T14:05:17Z"}, "message": "c++: hard error w/ ptr+N and incomplete type [PR103700]\n\nIn pointer_int_sum when called from a SFINAE context, we need to avoid\ncalling size_in_bytes_loc on an incomplete pointed-to type since this\nlatter function isn't SFINAE-enabled and always emits an error on such\ninput.\n\n\tPR c++/103700\n\ngcc/c-family/ChangeLog:\n\n\t* c-common.c (pointer_int_sum): When quiet, return\n\terror_mark_node for an incomplete pointed-to type and don't\n\tcall size_in_bytes_loc.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/template/sfinae32.C: New test.", "tree": {"sha": "da511aa68bded7934886558d1f1f3297ffa0b5fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da511aa68bded7934886558d1f1f3297ffa0b5fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88cdcb5c18d73bfc9960d774c678f0e8103b8031", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88cdcb5c18d73bfc9960d774c678f0e8103b8031", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88cdcb5c18d73bfc9960d774c678f0e8103b8031", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88cdcb5c18d73bfc9960d774c678f0e8103b8031/comments", "author": null, "committer": null, "parents": [{"sha": "9407058a430316db5299bc7867e4a31f900cd197", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9407058a430316db5299bc7867e4a31f900cd197", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9407058a430316db5299bc7867e4a31f900cd197"}], "stats": {"total": 26, "additions": 26, "deletions": 0}, "files": [{"sha": "f3e3e9ba0a5116752fcdc42a3b43887d6f519097", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88cdcb5c18d73bfc9960d774c678f0e8103b8031/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88cdcb5c18d73bfc9960d774c678f0e8103b8031/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=88cdcb5c18d73bfc9960d774c678f0e8103b8031", "patch": "@@ -3308,6 +3308,8 @@ pointer_int_sum (location_t loc, enum tree_code resultcode,\n     size_exp = integer_one_node;\n   else\n     {\n+      if (!complain && !COMPLETE_TYPE_P (TREE_TYPE (result_type)))\n+\treturn error_mark_node;\n       size_exp = size_in_bytes_loc (loc, TREE_TYPE (result_type));\n       /* Wrap the pointer expression in a SAVE_EXPR to make sure it\n \t is evaluated first when the size expression may depend"}, {"sha": "ae1dadaacc4fb2e0dc094eec9b27d2d246b324a5", "filename": "gcc/testsuite/g++.dg/template/sfinae32.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88cdcb5c18d73bfc9960d774c678f0e8103b8031/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsfinae32.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88cdcb5c18d73bfc9960d774c678f0e8103b8031/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsfinae32.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsfinae32.C?ref=88cdcb5c18d73bfc9960d774c678f0e8103b8031", "patch": "@@ -0,0 +1,24 @@\n+// PR c++/103700\n+// { dg-do compile { target c++11 } }\n+\n+template<class T, int N> auto f(T* p) -> decltype(p + N);\n+template<class T, int N> auto f(T* p) -> decltype(p - N);\n+template<class T, int N> auto f(T* p) -> decltype(N + p);\n+template<class T, int N> void f(T* p);\n+\n+template<class T> auto g(T* p, int n) -> decltype(p + n);\n+template<class T> auto g(T* p, int n) -> decltype(p - n);\n+template<class T> auto g(T* p, int n) -> decltype(n + p);\n+template<class T> void g(T* p, int n);\n+\n+struct Incomplete;\n+\n+int main() {\n+  f<Incomplete,  0>(nullptr);\n+  f<Incomplete,  1>(nullptr);\n+  f<Incomplete, -1>(nullptr);\n+  f<Incomplete,  7>(nullptr);\n+  f<Incomplete, -7>(nullptr);\n+\n+  g<Incomplete>(nullptr, 0);\n+}"}]}