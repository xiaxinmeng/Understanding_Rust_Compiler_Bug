{"sha": "b8247b13893d56a6dc3bc0ae77761b3e826aeac5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjgyNDdiMTM4OTNkNTZhNmRjM2JjMGFlNzc3NjFiM2U4MjZhZWFjNQ==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2007-07-28T05:29:06Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2007-07-28T05:29:06Z"}, "message": "re PR fortran/32880 (User operator & allocatable TYPE components: wrong deallocate)\n\n2007-07-28  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/32880\n\t* trans-expr.c (gfc_trans_scalar_assign): Revert to fixed order\n\tfor lse and rse pre expressions, for derived types with\n\tallocatable components.  Instead, assign the lhs to a temporary\n\tand deallocate after the assignment.\n\n2007-07-28  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/32880\n\t* gfortran.dg/alloc_comp_assign_6.f90: New test.\n\nFrom-SVN: r127011", "tree": {"sha": "dfdc730eb913c4d4badc7744a62fc9b1ab0f8521", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dfdc730eb913c4d4badc7744a62fc9b1ab0f8521"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b8247b13893d56a6dc3bc0ae77761b3e826aeac5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8247b13893d56a6dc3bc0ae77761b3e826aeac5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8247b13893d56a6dc3bc0ae77761b3e826aeac5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8247b13893d56a6dc3bc0ae77761b3e826aeac5/comments", "author": null, "committer": null, "parents": [{"sha": "9587952bbfbcd6b8c25e21da630802c4cffef712", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9587952bbfbcd6b8c25e21da630802c4cffef712", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9587952bbfbcd6b8c25e21da630802c4cffef712"}], "stats": {"total": 89, "additions": 76, "deletions": 13}, "files": [{"sha": "5f8e39da7d3c66f25c857b4b4fadd17a04ebe4a1", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8247b13893d56a6dc3bc0ae77761b3e826aeac5/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8247b13893d56a6dc3bc0ae77761b3e826aeac5/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=b8247b13893d56a6dc3bc0ae77761b3e826aeac5", "patch": "@@ -1,3 +1,11 @@\n+2007-07-28  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/32880\n+\t* trans-expr.c (gfc_trans_scalar_assign): Revert to fixed order\n+\tfor lse and rse pre expressions, for derived types with\n+\tallocatable components.  Instead, assign the lhs to a temporary\n+\tand deallocate after the assignment.\n+\n 2007-07-28  Janne Blomqvist  <jb@gcc.gnu.org>\n \n \tPR fortran/32909"}, {"sha": "528bf39dbe6706f5b302814b59b650558af185a1", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8247b13893d56a6dc3bc0ae77761b3e826aeac5/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8247b13893d56a6dc3bc0ae77761b3e826aeac5/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=b8247b13893d56a6dc3bc0ae77761b3e826aeac5", "patch": "@@ -3512,25 +3512,20 @@ gfc_trans_scalar_assign (gfc_se * lse, gfc_se * rse, gfc_typespec ts,\n \t}\n \n       /* Deallocate the lhs allocated components as long as it is not\n-\t the same as the rhs.  */\n+\t the same as the rhs.  This must be done following the assignment\n+\t to prevent deallocating data that could be used in the rhs\n+\t expression.  */\n       if (!l_is_temp)\n \t{\n-\t  tmp = gfc_deallocate_alloc_comp (ts.derived, lse->expr, 0);\n+\t  tmp = gfc_evaluate_now (lse->expr, &lse->pre);\n+\t  tmp = gfc_deallocate_alloc_comp (ts.derived, tmp, 0);\n \t  if (r_is_var)\n \t    tmp = build3_v (COND_EXPR, cond, build_empty_stmt (), tmp);\n-\t  gfc_add_expr_to_block (&lse->pre, tmp);\n+\t  gfc_add_expr_to_block (&lse->post, tmp);\n \t}\n \n-      if (r_is_var)\n-\t{\n-\t  gfc_add_block_to_block (&block, &lse->pre);\n-\t  gfc_add_block_to_block (&block, &rse->pre);\n-\t}\n-      else\n-\t{\n-\t  gfc_add_block_to_block (&block, &rse->pre);\n-\t  gfc_add_block_to_block (&block, &lse->pre);\n-\t}\n+      gfc_add_block_to_block (&block, &rse->pre);\n+      gfc_add_block_to_block (&block, &lse->pre);\n \n       gfc_add_modify_expr (&block, lse->expr,\n \t\t\t   fold_convert (TREE_TYPE (lse->expr), rse->expr));"}, {"sha": "8f81053e5de312a3df2e89cfc898837547af8413", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8247b13893d56a6dc3bc0ae77761b3e826aeac5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8247b13893d56a6dc3bc0ae77761b3e826aeac5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b8247b13893d56a6dc3bc0ae77761b3e826aeac5", "patch": "@@ -1,3 +1,8 @@\n+2007-07-28  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/32880\n+\t* gfortran.dg/alloc_comp_assign_6.f90: New tests.\n+\n 2007-07-28  Rask Ingemann Lambertsen  <rask@sygehus.dk>\n \n \tPR testsuite/32471"}, {"sha": "4e8edc2287270281c1cbaa72e82e1a2237e5ff13", "filename": "gcc/testsuite/gfortran.dg/alloc_comp_assign_6.f90", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8247b13893d56a6dc3bc0ae77761b3e826aeac5/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_assign_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8247b13893d56a6dc3bc0ae77761b3e826aeac5/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_assign_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_assign_6.f90?ref=b8247b13893d56a6dc3bc0ae77761b3e826aeac5", "patch": "@@ -0,0 +1,55 @@\n+! { dg-do run }\n+! Tests the fix for pr32880, in which 'res' was deallocated\n+! before it could be used in the concatenation.\n+! Adapted from vst28.f95, in Lawrie Schonfeld's iso_varying_string\n+! testsuite, by Tobias Burnus.\n+!\n+module iso_varying_string\n+  type varying_string\n+     character(LEN=1), dimension(:), allocatable :: chars\n+  end type varying_string\n+  interface assignment(=)\n+     module procedure op_assign_VS_CH\n+  end interface assignment(=)\n+  interface operator(//)\n+     module procedure op_concat_VS_CH\n+  end interface operator(//)\n+contains\n+  elemental subroutine op_assign_VS_CH (var, exp)\n+    type(varying_string), intent(out) :: var\n+    character(LEN=*), intent(in)      :: exp\n+    integer                      :: length\n+    integer                      :: i_char\n+    length = len(exp)\n+    allocate(var%chars(length))\n+    forall(i_char = 1:length)\n+       var%chars(i_char) = exp(i_char:i_char)\n+    end forall\n+  end subroutine op_assign_VS_CH\n+  elemental function op_concat_VS_CH (string_a, string_b) result (concat_string)\n+    type(varying_string), intent(in) :: string_a\n+    character(LEN=*), intent(in)     :: string_b\n+    type(varying_string)             :: concat_string\n+    len_string_a = size(string_a%chars)\n+    allocate(concat_string%chars(len_string_a+len(string_b)))\n+    if (len_string_a >0) &\n+       concat_string%chars(:len_string_a) = string_a%chars\n+    if (len (string_b) > 0) &\n+       concat_string%chars(len_string_a+1:) = string_b\n+  end function op_concat_VS_CH\n+end module iso_varying_string\n+\n+program VST28\n+  use iso_varying_string\n+  character(len=10) :: char_a\n+  type(VARYING_STRING) :: res\n+  char_a = \"abcdefghij\"\n+  res = char_a(5:5)\n+  res = res//char_a(6:6)\n+  if(size(res%chars) /= 2 .or. any(res%chars /= ['e','f'])) then\n+    write(*,*) 'ERROR: should be ef, got: ', res%chars, size(res%chars)\n+    call abort ()\n+  end if\n+end program VST28\n+\n+! { dg-final { cleanup-modules \"iso_varying_string\" } }"}]}