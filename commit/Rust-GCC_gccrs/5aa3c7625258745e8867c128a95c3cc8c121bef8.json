{"sha": "5aa3c7625258745e8867c128a95c3cc8c121bef8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWFhM2M3NjI1MjU4NzQ1ZTg4NjdjMTI4YTk1YzNjYzhjMTIxYmVmOA==", "commit": {"author": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2014-01-26T16:30:27Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2014-01-26T16:30:27Z"}, "message": "pa.md (call): Generate indirect long calls to non-local functions when outputing 32-bit code.\n\n\t* config/pa/pa.md (call): Generate indirect long calls to non-local\n\tfunctions when outputing 32-bit code.\n\t(call_value): Likewise except for special call to buggy powf function.\n\nFrom-SVN: r207121", "tree": {"sha": "898a7858166664e9711e645bc93fd20f2a0b02d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/898a7858166664e9711e645bc93fd20f2a0b02d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5aa3c7625258745e8867c128a95c3cc8c121bef8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5aa3c7625258745e8867c128a95c3cc8c121bef8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5aa3c7625258745e8867c128a95c3cc8c121bef8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5aa3c7625258745e8867c128a95c3cc8c121bef8/comments", "author": null, "committer": null, "parents": [{"sha": "cc5cec10532400521b1e04129530007a724ff493", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc5cec10532400521b1e04129530007a724ff493", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc5cec10532400521b1e04129530007a724ff493"}], "stats": {"total": 47, "additions": 37, "deletions": 10}, "files": [{"sha": "226b721b4cea76fc4e4eaf081f10ec13771dfb48", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aa3c7625258745e8867c128a95c3cc8c121bef8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aa3c7625258745e8867c128a95c3cc8c121bef8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5aa3c7625258745e8867c128a95c3cc8c121bef8", "patch": "@@ -1,5 +1,9 @@\n 2014-01-26  John David Anglin  <danglin@gcc.gnu.org>\n \n+\t* config/pa/pa.md (call): Generate indirect long calls to non-local\n+\tfunctions when outputing 32-bit code.\n+\t(call_value): Likewise except for special call to buggy powf function.\n+\n \t* config/pa/pa.c (pa_attr_length_indirect_call): Adjust length of\n \tportable runtime and PIC indirect calls.\n \t(pa_output_indirect_call): Remove unnecessary nop from portable runtime"}, {"sha": "e55d0b86b90a4be906cb47ebfa35d33ca2c010db", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 33, "deletions": 10, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aa3c7625258745e8867c128a95c3cc8c121bef8/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aa3c7625258745e8867c128a95c3cc8c121bef8/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=5aa3c7625258745e8867c128a95c3cc8c121bef8", "patch": "@@ -7087,7 +7087,17 @@ add,l %2,%3,%3\\;bv,n %%r0(%3)\"\n   if (TARGET_PORTABLE_RUNTIME)\n     op = force_reg (SImode, XEXP (operands[0], 0));\n   else\n-    op = XEXP (operands[0], 0);\n+    {\n+      op = XEXP (operands[0], 0);\n+\n+      /* Generate indirect long calls to non-local functions. */\n+      if (!TARGET_64BIT && TARGET_LONG_CALLS && GET_CODE (op) == SYMBOL_REF)\n+\t{\n+\t  tree call_decl = SYMBOL_REF_DECL (op);\n+\t  if (!(call_decl && targetm.binds_local_p (call_decl)))\n+\t    op = force_reg (word_mode, op);\n+\t}\n+    }\n \n   if (TARGET_64BIT)\n     {\n@@ -7575,11 +7585,29 @@ add,l %2,%3,%3\\;bv,n %%r0(%3)\"\n   rtx op;\n   rtx dst = operands[0];\n   rtx nb = operands[2];\n+  bool call_powf = false;\n \n   if (TARGET_PORTABLE_RUNTIME)\n     op = force_reg (SImode, XEXP (operands[1], 0));\n   else\n-    op = XEXP (operands[1], 0);\n+    {\n+      op = XEXP (operands[1], 0);\n+      if (GET_CODE (op) == SYMBOL_REF)\n+\t{\n+\t  /* Handle special call to buggy powf function.  */\n+\t  if (TARGET_HPUX && !TARGET_DISABLE_FPREGS && !TARGET_SOFT_FLOAT\n+\t      && !strcmp (targetm.strip_name_encoding (XSTR (op, 0)), \"powf\"))\n+\t    call_powf = true;\n+\n+\t  /* Generate indirect long calls to non-local functions. */\n+\t  else if (!TARGET_64BIT && TARGET_LONG_CALLS)\n+\t    {\n+\t      tree call_decl = SYMBOL_REF_DECL (op);\n+\t      if (!(call_decl && targetm.binds_local_p (call_decl)))\n+\t\top = force_reg (word_mode, op);\n+\t    }\n+\t}\n+    }\n \n   if (TARGET_64BIT)\n     {\n@@ -7639,8 +7667,7 @@ add,l %2,%3,%3\\;bv,n %%r0(%3)\"\n       rtx r4 = gen_rtx_REG (word_mode, 4);\n       if (GET_CODE (op) == SYMBOL_REF)\n \t{\n-\t  if (TARGET_HPUX && !TARGET_DISABLE_FPREGS && !TARGET_SOFT_FLOAT\n-\t      && !strcmp (targetm.strip_name_encoding (XSTR (op, 0)), \"powf\"))\n+\t  if (call_powf)\n \t    emit_call_insn (gen_call_val_powf_64bit (dst, op, nb, r4));\n \t  else\n \t    emit_call_insn (gen_call_val_symref_64bit (dst, op, nb, r4));\n@@ -7659,18 +7686,14 @@ add,l %2,%3,%3\\;bv,n %%r0(%3)\"\n \t    {\n \t      rtx r4 = gen_rtx_REG (word_mode, 4);\n \n-\t      if (TARGET_HPUX && !TARGET_DISABLE_FPREGS && !TARGET_SOFT_FLOAT\n-\t\t  && !strcmp (targetm.strip_name_encoding (XSTR (op, 0)),\n-\t\t\t      \"powf\"))\n+\t      if (call_powf)\n \t\temit_call_insn (gen_call_val_powf_pic (dst, op, nb, r4));\n \t      else\n \t\temit_call_insn (gen_call_val_symref_pic (dst, op, nb, r4));\n \t    }\n \t  else\n \t    {\n-\t      if (TARGET_HPUX && !TARGET_DISABLE_FPREGS && !TARGET_SOFT_FLOAT\n-\t\t  && !strcmp (targetm.strip_name_encoding (XSTR (op, 0)),\n-\t\t\t      \"powf\"))\n+\t      if (call_powf)\n \t\temit_call_insn (gen_call_val_powf (dst, op, nb));\n \t      else\n \t\temit_call_insn (gen_call_val_symref (dst, op, nb));"}]}