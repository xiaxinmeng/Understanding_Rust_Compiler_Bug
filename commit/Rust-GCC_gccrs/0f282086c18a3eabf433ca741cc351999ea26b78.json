{"sha": "0f282086c18a3eabf433ca741cc351999ea26b78", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGYyODIwODZjMThhM2VhYmY0MzNjYTc0MWNjMzUxOTk5ZWEyNmI3OA==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2008-03-26T07:37:24Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-03-26T07:37:24Z"}, "message": "einfo.ads, einfo.adb (N_Pragma): Chars field removed, use Chars (Pragma_Identifier (..\n\n2008-03-26  Robert Dewar  <dewar@adacore.com>\n\n\t* einfo.ads, einfo.adb (N_Pragma): Chars field removed, use Chars\n\t(Pragma_Identifier (.. instead.\n\t(OK_To_Reorder_Components): New flag\n\t(Has_Entries): Code cleanup.\n\t(Warnings_Off_Used): New flag\n\t(Warnings_Off_Used_Unmodified): New flag\n\t(Warnings_Off_Used_Unreferenced): New flag\n\t(Has_Warnings_Off): New function\n\t(Has_Unmodified): New function\n\t(Has_Unreferenced): New function\n\t(Is_Trivial_Subprogram): New flag\n\t(Is_Static_Dispatch_Table_Entity): New attribute.\n\tChange name Access_Subprogram_Type_Kind to Access_Subprogram_Kind\n\t(more consistent with other similar names)\n\t(Access_Subprogram_Type): New classification function\n\nFrom-SVN: r133555", "tree": {"sha": "2aa8d76a56e7fc877eded5ce474583585085d562", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2aa8d76a56e7fc877eded5ce474583585085d562"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f282086c18a3eabf433ca741cc351999ea26b78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f282086c18a3eabf433ca741cc351999ea26b78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f282086c18a3eabf433ca741cc351999ea26b78", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f282086c18a3eabf433ca741cc351999ea26b78/comments", "author": null, "committer": null, "parents": [{"sha": "454a86dc55687014bed85561a3c91b794646c2d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/454a86dc55687014bed85561a3c91b794646c2d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/454a86dc55687014bed85561a3c91b794646c2d5"}], "stats": {"total": 322, "additions": 272, "deletions": 50}, "files": [{"sha": "c04680c342a08cdc23a94f7db0a9589daaa6a9be", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 135, "deletions": 21, "changes": 156, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f282086c18a3eabf433ca741cc351999ea26b78/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f282086c18a3eabf433ca741cc351999ea26b78/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=0f282086c18a3eabf433ca741cc351999ea26b78", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -495,13 +495,12 @@ package body Einfo is\n    --    Renamed_In_Spec                 Flag231\n    --    Implemented_By_Entry            Flag232\n    --    Has_Pragma_Unmodified           Flag233\n-\n-   --    (unused)                        Flag234\n-   --    (unused)                        Flag235\n-   --    (unused)                        Flag236\n-   --    (unused)                        Flag237\n-   --    (unused)                        Flag238\n-   --    (unused)                        Flag239\n+   --    Is_Static_Dispatch_Table_Entity Flag234\n+   --    Is_Trivial_Subprogram           Flag235\n+   --    Warnings_Off_Used               Flag236\n+   --    Warnings_Off_Used_Unmodified    Flag237\n+   --    Warnings_Off_Used_Unreferenced  Flag238\n+   --    OK_To_Reorder_Components        Flag239\n \n    --    (unused)                        Flag240\n    --    (unused)                        Flag241\n@@ -1044,7 +1043,7 @@ package body Einfo is\n \n    function Can_Use_Internal_Rep (Id : E) return B is\n    begin\n-      pragma Assert (Ekind (Id) in Access_Subprogram_Type_Kind);\n+      pragma Assert (Is_Access_Subprogram_Type (Id));\n       return Flag229 (Id);\n    end Can_Use_Internal_Rep;\n \n@@ -2001,6 +2000,11 @@ package body Einfo is\n       return Flag28 (Id);\n    end Is_Statically_Allocated;\n \n+   function Is_Static_Dispatch_Table_Entity (Id : E) return B is\n+   begin\n+      return Flag234 (Id);\n+   end Is_Static_Dispatch_Table_Entity;\n+\n    function Is_Synchronized_Interface (Id : E) return B is\n    begin\n       pragma Assert (Is_Interface (Id));\n@@ -2030,6 +2034,11 @@ package body Einfo is\n       return Flag225 (Id);\n    end Is_Thunk;\n \n+   function Is_Trivial_Subprogram (Id : E) return B is\n+   begin\n+      return Flag235 (Id);\n+   end Is_Trivial_Subprogram;\n+\n    function Is_True_Constant (Id : E) return B is\n    begin\n       return Flag163 (Id);\n@@ -2272,6 +2281,12 @@ package body Einfo is\n       return Node24 (Id);\n    end Obsolescent_Warning;\n \n+   function OK_To_Reorder_Components (Id : E) return B is\n+   begin\n+      pragma Assert (Is_Record_Type (Id));\n+      return Flag239 (Base_Type (Id));\n+   end OK_To_Reorder_Components;\n+\n    function Original_Array_Type (Id : E) return E is\n    begin\n       pragma Assert (Is_Array_Type (Id) or else Is_Modular_Integer_Type (Id));\n@@ -2645,6 +2660,21 @@ package body Einfo is\n       return Flag96 (Id);\n    end Warnings_Off;\n \n+   function Warnings_Off_Used (Id : E) return B is\n+   begin\n+      return Flag236 (Id);\n+   end Warnings_Off_Used;\n+\n+   function Warnings_Off_Used_Unmodified (Id : E) return B is\n+   begin\n+      return Flag237 (Id);\n+   end Warnings_Off_Used_Unmodified;\n+\n+   function Warnings_Off_Used_Unreferenced (Id : E) return B is\n+   begin\n+      return Flag238 (Id);\n+   end Warnings_Off_Used_Unreferenced;\n+\n    function Wrapped_Entity (Id : E) return E is\n    begin\n       pragma Assert (Ekind (Id) = E_Procedure\n@@ -2671,6 +2701,11 @@ package body Einfo is\n       return Ekind (Id) in Access_Protected_Kind;\n    end Is_Access_Protected_Subprogram_Type;\n \n+   function Is_Access_Subprogram_Type           (Id : E) return B is\n+   begin\n+      return Ekind (Id) in Access_Subprogram_Kind;\n+   end Is_Access_Subprogram_Type;\n+\n    function Is_Array_Type                       (Id : E) return B is\n    begin\n       return Ekind (Id) in Array_Kind;\n@@ -3380,7 +3415,7 @@ package body Einfo is\n \n    procedure Set_Can_Use_Internal_Rep (Id : E; V : B := True) is\n    begin\n-      pragma Assert (Ekind (Id) in Access_Subprogram_Type_Kind);\n+      pragma Assert (Is_Access_Subprogram_Type (Id));\n       Set_Flag229 (Id, V);\n    end Set_Can_Use_Internal_Rep;\n \n@@ -4385,6 +4420,11 @@ package body Einfo is\n       Set_Flag28 (Id, V);\n    end Set_Is_Statically_Allocated;\n \n+   procedure Set_Is_Static_Dispatch_Table_Entity (Id : E; V : B := True) is\n+   begin\n+      Set_Flag234 (Id, V);\n+   end Set_Is_Static_Dispatch_Table_Entity;\n+\n    procedure Set_Is_Synchronized_Interface (Id : E; V : B := True) is\n    begin\n       pragma Assert (Is_Interface (Id));\n@@ -4415,6 +4455,11 @@ package body Einfo is\n       Set_Flag225 (Id, V);\n    end Set_Is_Thunk;\n \n+   procedure Set_Is_Trivial_Subprogram (Id : E; V : B := True) is\n+   begin\n+      Set_Flag235 (Id, V);\n+   end Set_Is_Trivial_Subprogram;\n+\n    procedure Set_Is_True_Constant (Id : E; V : B := True) is\n    begin\n       Set_Flag163 (Id, V);\n@@ -4661,6 +4706,13 @@ package body Einfo is\n       Set_Node24 (Id, V);\n    end Set_Obsolescent_Warning;\n \n+   procedure Set_OK_To_Reorder_Components (Id : E; V : B := True) is\n+   begin\n+      pragma Assert\n+        (Is_Record_Type (Id) and then Id = Base_Type (Id));\n+      Set_Flag239 (Id, V);\n+   end Set_OK_To_Reorder_Components;\n+\n    procedure Set_Original_Array_Type (Id : E; V : E) is\n    begin\n       pragma Assert (Is_Array_Type (Id) or else Is_Modular_Integer_Type (Id));\n@@ -5040,6 +5092,21 @@ package body Einfo is\n       Set_Flag96 (Id, V);\n    end Set_Warnings_Off;\n \n+   procedure Set_Warnings_Off_Used (Id : E; V : B := True) is\n+   begin\n+      Set_Flag236 (Id, V);\n+   end Set_Warnings_Off_Used;\n+\n+   procedure Set_Warnings_Off_Used_Unmodified (Id : E; V : B := True) is\n+   begin\n+      Set_Flag237 (Id, V);\n+   end Set_Warnings_Off_Used_Unmodified;\n+\n+   procedure Set_Warnings_Off_Used_Unreferenced (Id : E; V : B := True) is\n+   begin\n+      Set_Flag238 (Id, V);\n+   end Set_Warnings_Off_Used_Unreferenced;\n+\n    procedure Set_Was_Hidden (Id : E; V : B := True) is\n    begin\n       Set_Flag196 (Id, V);\n@@ -5969,7 +6036,7 @@ package body Einfo is\n    begin\n       N := First_Rep_Item (E);\n       while Present (N) loop\n-         if Nkind (N) = N_Pragma and then Chars (N) = Nam then\n+         if Nkind (N) = N_Pragma and then Pragma_Name (N) = Nam then\n             return N;\n          end if;\n \n@@ -5992,7 +6059,7 @@ package body Einfo is\n       Ritem := First_Rep_Item (Id);\n       while Present (Ritem) loop\n          if Nkind (Ritem) = N_Pragma\n-           and then Chars (Ritem) = Name_Attach_Handler\n+           and then Pragma_Name (Ritem) = Name_Attach_Handler\n          then\n             return True;\n          else\n@@ -6020,23 +6087,21 @@ package body Einfo is\n    -----------------\n \n    function Has_Entries (Id : E) return B is\n-      Result : Boolean := False;\n-      Ent    : Entity_Id;\n+      Ent : Entity_Id;\n \n    begin\n       pragma Assert (Is_Concurrent_Type (Id));\n \n       Ent := First_Entity (Id);\n       while Present (Ent) loop\n          if Is_Entry (Ent) then\n-            Result := True;\n-            exit;\n+            return True;\n          end if;\n \n          Ent := Next_Entity (Ent);\n       end loop;\n \n-      return Result;\n+      return False;\n    end Has_Entries;\n \n    ----------------------------\n@@ -6061,7 +6126,7 @@ package body Einfo is\n       Ritem := First_Rep_Item (Id);\n       while Present (Ritem) loop\n          if Nkind (Ritem) = N_Pragma\n-           and then Chars (Ritem) = Name_Interrupt_Handler\n+           and then Pragma_Name (Ritem) = Name_Interrupt_Handler\n          then\n             return True;\n          else\n@@ -6079,15 +6144,12 @@ package body Einfo is\n    function Has_Private_Ancestor (Id : E) return B is\n       R  : constant Entity_Id := Root_Type (Id);\n       T1 : Entity_Id := Id;\n-\n    begin\n       loop\n          if Is_Private_Type (T1) then\n             return True;\n-\n          elsif T1 = R then\n             return False;\n-\n          else\n             T1 := Etype (T1);\n          end if;\n@@ -6103,6 +6165,52 @@ package body Einfo is\n       return Present (Get_Rep_Pragma (E, Nam));\n    end Has_Rep_Pragma;\n \n+   --------------------\n+   -- Has_Unmodified --\n+   --------------------\n+\n+   function Has_Unmodified (E : Entity_Id) return Boolean is\n+   begin\n+      if Has_Pragma_Unmodified (E) then\n+         return True;\n+      elsif Warnings_Off (E) then\n+         Set_Warnings_Off_Used_Unmodified (E);\n+         return True;\n+      else\n+         return False;\n+      end if;\n+   end Has_Unmodified;\n+\n+   ---------------------\n+   -- Has_Unreferenced --\n+   ---------------------\n+\n+   function Has_Unreferenced (E : Entity_Id) return Boolean is\n+   begin\n+      if Has_Pragma_Unreferenced (E) then\n+         return True;\n+      elsif Warnings_Off (E) then\n+         Set_Warnings_Off_Used_Unreferenced (E);\n+         return True;\n+      else\n+         return False;\n+      end if;\n+   end Has_Unreferenced;\n+\n+   ----------------------\n+   -- Has_Warnings_Off --\n+   ----------------------\n+\n+   function Has_Warnings_Off (E : Entity_Id) return Boolean is\n+   begin\n+      if Warnings_Off (E) then\n+         Set_Warnings_Off_Used (E);\n+         return True;\n+      else\n+         return False;\n+      end if;\n+   end Has_Warnings_Off;\n+\n    ------------------------------\n    -- Implementation_Base_Type --\n    ------------------------------\n@@ -7396,11 +7504,13 @@ package body Einfo is\n       W (\"Is_Return_Object\",                Flag209 (Id));\n       W (\"Is_Shared_Passive\",               Flag60  (Id));\n       W (\"Is_Synchronized_Interface\",       Flag199 (Id));\n+      W (\"Is_Static_Dispatch_Table_Entity\", Flag234 (Id));\n       W (\"Is_Statically_Allocated\",         Flag28  (Id));\n       W (\"Is_Tag\",                          Flag78  (Id));\n       W (\"Is_Tagged_Type\",                  Flag55  (Id));\n       W (\"Is_Task_Interface\",               Flag200 (Id));\n       W (\"Is_Thunk\",                        Flag225 (Id));\n+      W (\"Is_Trivial_Subprogram\",           Flag235 (Id));\n       W (\"Is_True_Constant\",                Flag163 (Id));\n       W (\"Is_Unchecked_Union\",              Flag117 (Id));\n       W (\"Is_Unsigned_Type\",                Flag144 (Id));\n@@ -7427,6 +7537,7 @@ package body Einfo is\n       W (\"No_Strict_Aliasing\",              Flag136 (Id));\n       W (\"Non_Binary_Modulus\",              Flag58  (Id));\n       W (\"Nonzero_Is_True\",                 Flag162 (Id));\n+      W (\"OK_To_Reorder_Components\",        Flag239 (Id));\n       W (\"Reachable\",                       Flag49  (Id));\n       W (\"Referenced\",                      Flag156 (Id));\n       W (\"Referenced_As_LHS\",               Flag36  (Id));\n@@ -7452,6 +7563,9 @@ package body Einfo is\n       W (\"Uses_Sec_Stack\",                  Flag95  (Id));\n       W (\"Vax_Float\",                       Flag151 (Id));\n       W (\"Warnings_Off\",                    Flag96  (Id));\n+      W (\"Warnings_Off_Used\",               Flag236 (Id));\n+      W (\"Warnings_Off_Used_Unmodified\",    Flag237 (Id));\n+      W (\"Warnings_Off_Used_Unreferenced\",  Flag238 (Id));\n       W (\"Was_Hidden\",                      Flag196 (Id));\n    end Write_Entity_Flags;\n "}, {"sha": "45e5e5ba014825d3e78177b64001baa049aa8f8c", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 137, "deletions": 29, "changes": 166, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f282086c18a3eabf433ca741cc351999ea26b78/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f282086c18a3eabf433ca741cc351999ea26b78/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=0f282086c18a3eabf433ca741cc351999ea26b78", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -334,10 +334,17 @@ package Einfo is\n \n --    Access_Disp_Table (Elist16) [implementation base type only]\n --       Present in record type entities. For a tagged type, points to the\n---       dispatch tables associated with the tagged type; the last entity of\n---       this list is an access type declaration used to expand dispatching\n---       calls through the primary dispatch table. For a non-tagged record,\n---       contains Empty.\n+--       dispatch tables associated with the tagged type. The first two\n+--       entities correspond with the primary dispatch table: 1) primary\n+--       dispatch table with user-defined primitives, 2) primary dispatch table\n+--       with predefined primitives. For each interface type covered by the\n+--       tagged type we also have: 3) secondary dispatch table with thunks of\n+--       primitives covering user-defined interface primitives, 4) secondary\n+--       dispatch table with thunks of predefined primitives, 5) secondary\n+--       dispatch table with user-defined primitives, and 6) secondary dispatch\n+--       table with predefined primitives. The last entity of this list is an\n+--       access type declaration used to expand dispatching calls through the\n+--       primary dispatch table. For a non-tagged record, contains Empty.\n \n --    Address_Clause (synthesized)\n --       Applies to entries, objects and subprograms. Set if an address clause\n@@ -1072,11 +1079,11 @@ package Einfo is\n --       being computed.\n \n --    Can_Use_Internal_Rep (Flag229)\n---       Present in Access_Subprogram_Type_Kind nodes. This flag is set by\n---       the front end and used by the back end. False means that the back end\n+--       Present in Access_Subprogram_Kind nodes. This flag is set by the\n+--       front end and used by the back end. False means that the back end\n --       must represent the type in the same way as Convention-C types (and\n---       other foreign-convention types). On many targets, this means that the\n---       back end will use dynamically generated trampolines for nested\n+--       other foreign-convention types). On many targets, this means that\n+--       the back end will use dynamically generated trampolines for nested\n --       subprograms. True means that the back end can represent the type in\n --       some internal way. On the aforementioned targets, this means that the\n --       back end will not use dynamically generated trampolines. This flag\n@@ -1625,14 +1632,17 @@ package Einfo is\n --       Present in all entities. Can only be set for variables (E_Variable,\n --       E_Out_Parameter, E_In_Out_Parameter). Set if a valid pragma Unmodified\n --       applies to the variable, indicating that no warning should be given\n---       if the entity is never modified.\n+--       if the entity is never modified. Note that clients should generally\n+--       not test this flag directly, but instead use function Has_Unmodified.\n \n --    Has_Pragma_Unreferenced (Flag180)\n --       Present in all entities. Set if a valid pragma Unreferenced applies\n --       to the entity, indicating that no warning should be given if the\n --       entity has no references, but a warning should be given if it is\n --       in fact referenced. For private types, this flag is set in both the\n---       private entity and full entity if the pragma applies to either.\n+--       private entity and full entity if the pragma applies to either. Note\n+--       that clients should generally not test this flag directly, but instead\n+--       use function Has_Unreferenced.\n \n --    Has_Pragma_Unreferenced_Objects (Flag212)\n --       Present in type and subtype entities. Set if a valid pragma\n@@ -2613,9 +2623,13 @@ package Einfo is\n --       flag set (since to allocate the oject statically, its type must\n --       also be elaborated globally).\n \n+--    Is_Static_Dispatch_Table_Entity (Flag234)\n+--       Applies to all entities. Set to indicate to the backend that this\n+--       entity is associated with an statically allocated dispatch table.\n+\n --    Is_Subprogram (synthesized)\n---       Applies to all entities, true for bodies of functions, procedures\n---       and operators.\n+--       Applies to all entities, true for function, procedure and operator\n+--       entities.\n \n --    Is_String_Type (synthesized)\n --       Applies to all type entities. Determines if the given type is a\n@@ -2649,13 +2663,20 @@ package Einfo is\n --       Applies to all entities. True for task types and subtypes\n \n --    Is_Thunk (Flag225)\n---       True for subprograms that are thunks. Thunks are small subprograms\n---       built by the expander for tagged types that cover interface types;\n---       at run-time thunks displace the pointer to the object (pointer named\n---       \"this\" in the C++ terminology) from a secondary dispatch table to the\n---       primary dispatch table associated with a given tagged type. Set by\n---       Expand_Interface Thunk and used by Expand_Call to handle extra actuals\n---       associated with accessibility level.\n+--       Present in all entities for subprograms (functions, procedures, and\n+--       operators). True for subprograms that are thunks, that is small\n+--       subprograms built by the expander for tagged types that cover\n+--       interface types. At run-time thunks displace the pointer to the object\n+--       (pointer named \"this\" in the C++ terminology) from a secondary\n+--       dispatch table to the primary dispatch table associated with a given\n+--       tagged type. Set by Expand_Interface Thunk and used by Expand_Call to\n+--       handle extra actuals associated with accessibility level.\n+\n+--    Is_Trivial_Subprogram (Flag235)\n+--       Present in all entities. Set in subprograms where either the body\n+--       consists of a single null statement, or the first or only statement\n+--       of the body raises an exception. This is used for suppressing certain\n+--       warnings, see Sem_Ch6.Analyze_Subprogram_Body discussion for details.\n \n --    Is_True_Constant (Flag163)\n --       Present in all entities for constants and variables. Set in constants\n@@ -2869,13 +2890,15 @@ package Einfo is\n --       to the freeze point because of the rule about overriding Initialize).\n \n --    Needs_Debug_Info (Flag147)\n---       Present in all entities. Set if the entity requires debugging\n---       information to be generated. This is true of all entities that\n---       have Comes_From_Source set, and also transitively for entities\n---       associated with such components (e.g. their types). It is true\n---       for all entities in Debug_Generated_Code mode (-gnatD switch).\n---       This is the flag that the back end should check to determine\n---       whether or not to generate debugging information for an entity.\n+--       Present in all entities. Set if the entity requires normal debugging\n+--       information to be generated. This is true of all entities that have\n+--       Comes_From_Source set, and also transitively for entities associated\n+--       with such components (e.g. their types). It is true for all entities\n+--       in Debug_Generated_Code mode (-gnatD switch). This is the flag that\n+--       the back end should check to determine whether or not to generate\n+--       debugging information for an entity. Note that callers should always\n+--       use Sem_Util.Set_Debug_Info_Needed, rather than Set_Needs_Debug_Info,\n+--       so that the flag is set properly on subsidiary entities.\n \n --    Needs_No_Actuals (Flag22)\n --       Present in callable entities (subprograms, entries, access to\n@@ -3089,6 +3112,12 @@ package Einfo is\n --       Protection object associated with a protected object. See Prival\n --       for further details on the use of privals.\n \n+--    OK_To_Reorder_Components (Flag239) [base type only]\n+--       Present in record types. Set if the back end is permitted to reorder\n+--       the components. If not set, the record must be layed out in the order\n+--       in which the components are declared textually. Currently this flag\n+--       can only be set by debug switches.\n+\n --    Original_Record_Component (Node22)\n --       Present in components, including discriminants. The usage depends\n --       on whether the record is a base type and whether it is tagged.\n@@ -3639,7 +3668,26 @@ package Einfo is\n --    Warnings_Off (Flag96)\n --       Present in all entities. Set if a pragma Warnings (Off, entity-name)\n --       is used to suppress warnings for a given entity. It is also used by\n---       the compiler in some situations to kill spurious warnings.\n+--       the compiler in some situations to kill spurious warnings. Note that\n+--       clients should generally not test this flag directly, but instead\n+--       use function Has_Warnings_Off.\n+\n+--    Warnings_Off_Used (Flag236)\n+--       Present in all entities. Can only be set if Warnings_Off is set. If\n+--       set indicates that a warning was suppressed by the Warnings_Off flag,\n+--       and Unmodified/Unreferenced would not have suppressed the warning.\n+\n+--    Warnings_Off_Used_Unmodified (Flag237)\n+--       Present in all entities. Can only be set if Warnings_Off is set and\n+--       Has_Pragma_Unmodified is not set. If set indicates that a warning was\n+--       suppressed by the Warnings_Off status but that pragma Unmodified\n+--       would also have suppressed the warning.\n+\n+--    Warnings_Off_Used_Unreferenced (Flag238)\n+--       Present in all entities. Can only be set if Warnings_Off is set and\n+--       Has_Pragma_Unreferenced is not set. If set indicates that a warning\n+--       was suppressed by the Warnings_Off status but that pragma Unreferenced\n+--       would also have suppressed the warning.\n \n --    Was_Hidden (Flag196)\n --       Present in all entities. Used to save the value of the Is_Hidden\n@@ -4121,7 +4169,7 @@ package Einfo is\n    --  E_Anonymous_Access_Protected_Subprogram_Type\n        E_Anonymous_Access_Type;\n \n-   subtype Access_Subprogram_Type_Kind is Entity_Kind range\n+   subtype Access_Subprogram_Kind is Entity_Kind range\n        E_Access_Subprogram_Type ..\n    --  E_Anonymous_Access_Subprogram_Type\n    --  E_Access_Protected_Subprogram_Type\n@@ -4526,8 +4574,10 @@ package Einfo is\n    --    Is_Remote_Types                     (Flag61)\n    --    Is_Renaming_Of_Object               (Flag112)\n    --    Is_Shared_Passive                   (Flag60)\n+   --    Is_Static_Dispatch_Table_Entity     (Flag234)\n    --    Is_Statically_Allocated             (Flag28)\n    --    Is_Tagged_Type                      (Flag55)\n+   --    Is_Trivial_Subprogram               (Flag235)\n    --    Is_Unchecked_Union                  (Flag117)\n    --    Is_Visible_Formal                   (Flag206)\n    --    Is_VMS_Exception                    (Flag133)\n@@ -4547,6 +4597,9 @@ package Einfo is\n    --    Suppress_Value_Tracking_On_Call     (Flag217)\n    --    Used_As_Generic_Actual              (Flag222)\n    --    Warnings_Off                        (Flag96)\n+   --    Warnings_Off_Used                   (Flag236)\n+   --    Warnings_Off_Used_Unmodified        (Flag237)\n+   --    Warnings_Off_Used_Unreferenced      (Flag238)\n    --    Was_Hidden                          (Flag196)\n \n    --    Declaration_Node                    (synth)\n@@ -5280,6 +5333,7 @@ package Einfo is\n    --    Is_Controlled                       (Flag42)   (base type only)\n    --    Is_Interface                        (Flag186)\n    --    Is_Limited_Interface                (Flag197)\n+   --    OK_To_Reorder_Components            (Flag239)  (base type only)\n    --    Reverse_Bit_Order                   (Flag164)  (base type only)\n    --    First_Component                     (synth)\n    --    First_Component_Or_Discriminant     (synth)\n@@ -5309,6 +5363,7 @@ package Einfo is\n    --    Is_Controlled                       (Flag42)   (base type only)\n    --    Is_Interface                        (Flag186)\n    --    Is_Limited_Interface                (Flag197)\n+   --    OK_To_Reorder_Components            (Flag239)  (base type only)\n    --    Reverse_Bit_Order                   (Flag164)  (base type only)\n    --    First_Component                     (synth)\n    --    First_Component_Or_Discriminant     (synth)\n@@ -5896,12 +5951,14 @@ package Einfo is\n    function Is_Renaming_Of_Object               (Id : E) return B;\n    function Is_Return_Object                    (Id : E) return B;\n    function Is_Shared_Passive                   (Id : E) return B;\n+   function Is_Static_Dispatch_Table_Entity     (Id : E) return B;\n    function Is_Statically_Allocated             (Id : E) return B;\n    function Is_Synchronized_Interface           (Id : E) return B;\n    function Is_Tag                              (Id : E) return B;\n    function Is_Tagged_Type                      (Id : E) return B;\n    function Is_Task_Interface                   (Id : E) return B;\n    function Is_Thunk                            (Id : E) return B;\n+   function Is_Trivial_Subprogram               (Id : E) return B;\n    function Is_True_Constant                    (Id : E) return B;\n    function Is_Unchecked_Union                  (Id : E) return B;\n    function Is_Unsigned_Type                    (Id : E) return B;\n@@ -5943,6 +6000,7 @@ package Einfo is\n    function Normalized_Position_Max             (Id : E) return U;\n    function Object_Ref                          (Id : E) return E;\n    function Obsolescent_Warning                 (Id : E) return N;\n+   function OK_To_Reorder_Components            (Id : E) return B;\n    function Original_Array_Type                 (Id : E) return E;\n    function Original_Record_Component           (Id : E) return E;\n    function Overridden_Operation                (Id : E) return E;\n@@ -6008,6 +6066,9 @@ package Einfo is\n    function Uses_Sec_Stack                      (Id : E) return B;\n    function Vax_Float                           (Id : E) return B;\n    function Warnings_Off                        (Id : E) return B;\n+   function Warnings_Off_Used                   (Id : E) return B;\n+   function Warnings_Off_Used_Unmodified        (Id : E) return B;\n+   function Warnings_Off_Used_Unreferenced      (Id : E) return B;\n    function Was_Hidden                          (Id : E) return B;\n    function Wrapped_Entity                      (Id : E) return E;\n \n@@ -6023,6 +6084,7 @@ package Einfo is\n \n    function Is_Access_Type                      (Id : E) return B;\n    function Is_Access_Protected_Subprogram_Type (Id : E) return B;\n+   function Is_Access_Subprogram_Type           (Id : E) return B;\n    function Is_Array_Type                       (Id : E) return B;\n    function Is_Assignable                       (Id : E) return B;\n    function Is_Class_Wide_Type                  (Id : E) return B;\n@@ -6446,12 +6508,14 @@ package Einfo is\n    procedure Set_Is_Renaming_Of_Object           (Id : E; V : B := True);\n    procedure Set_Is_Return_Object                (Id : E; V : B := True);\n    procedure Set_Is_Shared_Passive               (Id : E; V : B := True);\n+   procedure Set_Is_Static_Dispatch_Table_Entity (Id : E; V : B := True);\n    procedure Set_Is_Statically_Allocated         (Id : E; V : B := True);\n    procedure Set_Is_Synchronized_Interface       (Id : E; V : B := True);\n    procedure Set_Is_Tag                          (Id : E; V : B := True);\n    procedure Set_Is_Tagged_Type                  (Id : E; V : B := True);\n    procedure Set_Is_Task_Interface               (Id : E; V : B := True);\n    procedure Set_Is_Thunk                        (Id : E; V : B := True);\n+   procedure Set_Is_Trivial_Subprogram           (Id : E; V : B := True);\n    procedure Set_Is_True_Constant                (Id : E; V : B := True);\n    procedure Set_Is_Unchecked_Union              (Id : E; V : B := True);\n    procedure Set_Is_Unsigned_Type                (Id : E; V : B := True);\n@@ -6493,6 +6557,7 @@ package Einfo is\n    procedure Set_Normalized_Position_Max         (Id : E; V : U);\n    procedure Set_Object_Ref                      (Id : E; V : E);\n    procedure Set_Obsolescent_Warning             (Id : E; V : N);\n+   procedure Set_OK_To_Reorder_Components        (Id : E; V : B := True);\n    procedure Set_Original_Array_Type             (Id : E; V : E);\n    procedure Set_Original_Record_Component       (Id : E; V : E);\n    procedure Set_Overridden_Operation            (Id : E; V : E);\n@@ -6558,6 +6623,9 @@ package Einfo is\n    procedure Set_Uses_Sec_Stack                  (Id : E; V : B := True);\n    procedure Set_Vax_Float                       (Id : E; V : B := True);\n    procedure Set_Warnings_Off                    (Id : E; V : B := True);\n+   procedure Set_Warnings_Off_Used               (Id : E; V : B := True);\n+   procedure Set_Warnings_Off_Used_Unmodified    (Id : E; V : B := True);\n+   procedure Set_Warnings_Off_Used_Unreferenced  (Id : E; V : B := True);\n    procedure Set_Was_Hidden                      (Id : E; V : B := True);\n    procedure Set_Wrapped_Entity                  (Id : E; V : E);\n \n@@ -6678,6 +6746,33 @@ package Einfo is\n    procedure Next_Stored_Discriminant       (N : in out Node_Id)\n      renames Proc_Next_Stored_Discriminant;\n \n+   ---------------------------\n+   -- Testing Warning Flags --\n+   ---------------------------\n+\n+   --  These routines are to be used rather than testing flags Warnings_Off,\n+   --  Has_Pragma_Unmodified, Has_Pragma_Unreferenced. They deal with setting\n+   --  the flags Warnings_Off_Used[_Unmodified|Unreferenced] for later access.\n+\n+   function Has_Warnings_Off (E : Entity_Id) return Boolean;\n+   --  If Warnings_Off is set on E, then returns True and also sets the flag\n+   --  Warnings_Off_Used on E. If Warnings_Off is not set on E, returns False\n+   --  and has no side effect.\n+\n+   function Has_Unmodified (E : Entity_Id) return Boolean;\n+   --  If flag Has_Pragma_Unmodified is set on E, returns True with no side\n+   --  effects. Otherwise if Warnings_Off is set on E, returns True and also\n+   --  sets the flag Warnings_Off_Used_Unmodified on E. If neither of the flags\n+   --  Warnings_Off nor Has_Pragma_Unmodified is set, returns False with no\n+   --  side effects.\n+\n+   function Has_Unreferenced (E : Entity_Id) return Boolean;\n+   --  If flag Has_Pragma_Unreferenced is set on E, returns True with no side\n+   --  effects. Otherwise if Warnings_Off is set on E, returns True and also\n+   --  sets the flag Warnings_Off_Used_Unreferenced on E. If neither of the\n+   --  flags Warnings_Off nor Has_Pragma_Unreferenced is set, returns False\n+   --  with no side effects.\n+\n    ----------------------------------------------\n    -- Subprograms for Accessing Rep Item Chain --\n    ----------------------------------------------\n@@ -6984,6 +7079,7 @@ package Einfo is\n    pragma Inline (Is_Ada_2005_Only);\n    pragma Inline (Is_Access_Type);\n    pragma Inline (Is_Access_Protected_Subprogram_Type);\n+   pragma Inline (Is_Access_Subprogram_Type);\n    pragma Inline (Is_Aliased);\n    pragma Inline (Is_Array_Type);\n    pragma Inline (Is_Assignable);\n@@ -7093,6 +7189,7 @@ package Einfo is\n    pragma Inline (Is_Scalar_Type);\n    pragma Inline (Is_Shared_Passive);\n    pragma Inline (Is_Signed_Integer_Type);\n+   pragma Inline (Is_Static_Dispatch_Table_Entity);\n    pragma Inline (Is_Statically_Allocated);\n    pragma Inline (Is_Subprogram);\n    pragma Inline (Is_Synchronized_Interface);\n@@ -7102,6 +7199,7 @@ package Einfo is\n    pragma Inline (Is_True_Constant);\n    pragma Inline (Is_Task_Type);\n    pragma Inline (Is_Thunk);\n+   pragma Inline (Is_Trivial_Subprogram);\n    pragma Inline (Is_Type);\n    pragma Inline (Is_Unchecked_Union);\n    pragma Inline (Is_Unsigned_Type);\n@@ -7144,6 +7242,7 @@ package Einfo is\n    pragma Inline (Normalized_Position_Max);\n    pragma Inline (Object_Ref);\n    pragma Inline (Obsolescent_Warning);\n+   pragma Inline (OK_To_Reorder_Components);\n    pragma Inline (Original_Array_Type);\n    pragma Inline (Original_Record_Component);\n    pragma Inline (Overridden_Operation);\n@@ -7210,6 +7309,9 @@ package Einfo is\n    pragma Inline (Uses_Sec_Stack);\n    pragma Inline (Vax_Float);\n    pragma Inline (Warnings_Off);\n+   pragma Inline (Warnings_Off_Used);\n+   pragma Inline (Warnings_Off_Used_Unmodified);\n+   pragma Inline (Warnings_Off_Used_Unreferenced);\n    pragma Inline (Was_Hidden);\n    pragma Inline (Wrapped_Entity);\n \n@@ -7470,12 +7572,14 @@ package Einfo is\n    pragma Inline (Set_Is_Renaming_Of_Object);\n    pragma Inline (Set_Is_Return_Object);\n    pragma Inline (Set_Is_Shared_Passive);\n+   pragma Inline (Set_Is_Static_Dispatch_Table_Entity);\n    pragma Inline (Set_Is_Statically_Allocated);\n    pragma Inline (Set_Is_Synchronized_Interface);\n    pragma Inline (Set_Is_Tag);\n    pragma Inline (Set_Is_Tagged_Type);\n    pragma Inline (Set_Is_Task_Interface);\n    pragma Inline (Set_Is_Thunk);\n+   pragma Inline (Set_Is_Trivial_Subprogram);\n    pragma Inline (Set_Is_True_Constant);\n    pragma Inline (Set_Is_Unchecked_Union);\n    pragma Inline (Set_Is_Unsigned_Type);\n@@ -7517,6 +7621,7 @@ package Einfo is\n    pragma Inline (Set_Normalized_Position_Max);\n    pragma Inline (Set_Object_Ref);\n    pragma Inline (Set_Obsolescent_Warning);\n+   pragma Inline (Set_OK_To_Reorder_Components);\n    pragma Inline (Set_Original_Array_Type);\n    pragma Inline (Set_Original_Record_Component);\n    pragma Inline (Set_Overridden_Operation);\n@@ -7582,6 +7687,9 @@ package Einfo is\n    pragma Inline (Set_Uses_Sec_Stack);\n    pragma Inline (Set_Vax_Float);\n    pragma Inline (Set_Warnings_Off);\n+   pragma Inline (Set_Warnings_Off_Used);\n+   pragma Inline (Set_Warnings_Off_Used_Unmodified);\n+   pragma Inline (Set_Warnings_Off_Used_Unreferenced);\n    pragma Inline (Set_Was_Hidden);\n    pragma Inline (Set_Wrapped_Entity);\n "}]}