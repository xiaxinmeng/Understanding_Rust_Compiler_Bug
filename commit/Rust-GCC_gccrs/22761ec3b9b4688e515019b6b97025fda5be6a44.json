{"sha": "22761ec3b9b4688e515019b6b97025fda5be6a44", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjI3NjFlYzNiOWI0Njg4ZTUxNTAxOWI2Yjk3MDI1ZmRhNWJlNmE0NA==", "commit": {"author": {"name": "Adam Nemet", "email": "anemet@caviumnetworks.com", "date": "2007-07-06T00:20:46Z"}, "committer": {"name": "Adam Nemet", "email": "nemet@gcc.gnu.org", "date": "2007-07-06T00:20:46Z"}, "message": "rtlanal.c (num_sign_bit_copies1): Improve cases of ANDing or IORing with a constant.\n\n\t* rtlanal.c (num_sign_bit_copies1): Improve cases of ANDing or\n\tIORing with a constant.\n\nFrom-SVN: r126397", "tree": {"sha": "f707059f7c1e3dc69a66829d782c26a55fe2be16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f707059f7c1e3dc69a66829d782c26a55fe2be16"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22761ec3b9b4688e515019b6b97025fda5be6a44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22761ec3b9b4688e515019b6b97025fda5be6a44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22761ec3b9b4688e515019b6b97025fda5be6a44", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22761ec3b9b4688e515019b6b97025fda5be6a44/comments", "author": null, "committer": null, "parents": [{"sha": "4f0a96f532a86eb4b81e932af2208a81ba169b33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f0a96f532a86eb4b81e932af2208a81ba169b33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f0a96f532a86eb4b81e932af2208a81ba169b33"}], "stats": {"total": 24, "additions": 24, "deletions": 0}, "files": [{"sha": "6c867ebb2656553882b09e7d615bc53af11f4242", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22761ec3b9b4688e515019b6b97025fda5be6a44/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22761ec3b9b4688e515019b6b97025fda5be6a44/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=22761ec3b9b4688e515019b6b97025fda5be6a44", "patch": "@@ -1,3 +1,8 @@\n+2007-07-05  Adam Nemet  <anemet@caviumnetworks.com>\n+\n+\t* rtlanal.c (num_sign_bit_copies1): Improve cases of ANDing or\n+\tIORing with a constant.\n+\n 2007-07-05  Seongbae Park  <seongbae.park@gmail.com>\n \n \tPR rtl-optimization/32475"}, {"sha": "9535104e7079142c7c3a645c8ba73bd09c96ec2d", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22761ec3b9b4688e515019b6b97025fda5be6a44/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22761ec3b9b4688e515019b6b97025fda5be6a44/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=22761ec3b9b4688e515019b6b97025fda5be6a44", "patch": "@@ -4290,6 +4290,25 @@ num_sign_bit_copies1 (rtx x, enum machine_mode mode, rtx known_x,\n \t\t\t\t\t known_x, known_mode, known_ret);\n       num1 = cached_num_sign_bit_copies (XEXP (x, 1), mode,\n \t\t\t\t\t known_x, known_mode, known_ret);\n+\n+      /* If num1 is clearing some of the top bits then regardless of\n+\t the other term, we are guaranteed to have at least that many\n+\t high-order zero bits.  */\n+      if (code == AND\n+\t  && num1 > 1\n+\t  && bitwidth <= HOST_BITS_PER_WIDE_INT\n+\t  && GET_CODE (XEXP (x, 1)) == CONST_INT\n+\t  && !(INTVAL (XEXP (x, 1)) & ((HOST_WIDE_INT) 1 << (bitwidth - 1))))\n+\treturn num1;\n+\n+      /* Similarly for IOR when setting high-order bits.  */\n+      if (code == IOR\n+\t  && num1 > 1\n+\t  && bitwidth <= HOST_BITS_PER_WIDE_INT\n+\t  && GET_CODE (XEXP (x, 1)) == CONST_INT\n+\t  && (INTVAL (XEXP (x, 1)) & ((HOST_WIDE_INT) 1 << (bitwidth - 1))))\n+\treturn num1;\n+\n       return MIN (num0, num1);\n \n     case PLUS:  case MINUS:"}]}