{"sha": "e72763e21ef8aca813b4690af878d6fba014ff1a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTcyNzYzZTIxZWY4YWNhODEzYjQ2OTBhZjg3OGQ2ZmJhMDE0ZmYxYQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2019-11-12T19:34:35Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2019-11-12T19:34:35Z"}, "message": "ipa-cp.c (ignore_edge_p): Also look for optimize flag.\n\n\n\t* ipa-cp.c (ignore_edge_p): Also look for optimize flag.\n\t(ipcp_verify_propagated_values): Likewise.\n\t(propagate_constants_across_call): Likewise.\n\t(propagate_constants_topo): Likewise.\n\t(ipcp_propagate_stage): Likewise.\n\nFrom-SVN: r278102", "tree": {"sha": "c1adb01b32ff4983e6c9a80c97bc67967cb3bd88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c1adb01b32ff4983e6c9a80c97bc67967cb3bd88"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e72763e21ef8aca813b4690af878d6fba014ff1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e72763e21ef8aca813b4690af878d6fba014ff1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e72763e21ef8aca813b4690af878d6fba014ff1a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e72763e21ef8aca813b4690af878d6fba014ff1a/comments", "author": null, "committer": null, "parents": [{"sha": "fde7112d79174947596b4697f254f169f0b11811", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fde7112d79174947596b4697f254f169f0b11811", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fde7112d79174947596b4697f254f169f0b11811"}], "stats": {"total": 27, "additions": 22, "deletions": 5}, "files": [{"sha": "d283626d06a3f6b9b2463cf293052e4cf6ef40cb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e72763e21ef8aca813b4690af878d6fba014ff1a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e72763e21ef8aca813b4690af878d6fba014ff1a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e72763e21ef8aca813b4690af878d6fba014ff1a", "patch": "@@ -1,3 +1,11 @@\n+2019-11-12  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* ipa-cp.c (ignore_edge_p): Also look for optimize flag.\n+\t(ipcp_verify_propagated_values): Likewise.\n+\t(propagate_constants_across_call): Likewise.\n+\t(propagate_constants_topo): Likewise.\n+\t(ipcp_propagate_stage): Likewise.\n+\n 2019-11-12  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR ipa/92471"}, {"sha": "54b9724998a6b15ff9028ab6719859538dd5053f", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e72763e21ef8aca813b4690af878d6fba014ff1a/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e72763e21ef8aca813b4690af878d6fba014ff1a/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=e72763e21ef8aca813b4690af878d6fba014ff1a", "patch": "@@ -816,6 +816,8 @@ ignore_edge_p (cgraph_edge *e)\n     = e->callee->function_or_virtual_thunk_symbol (&avail, e->caller);\n \n   return (avail <= AVAIL_INTERPOSABLE\n+\t  || !opt_for_fn (e->caller->decl, optimize)\n+\t  || !opt_for_fn (ultimate_target->decl, optimize)\n \t  || !opt_for_fn (e->caller->decl, flag_ipa_cp)\n \t  || !opt_for_fn (ultimate_target->decl, flag_ipa_cp));\n }\n@@ -1471,7 +1473,8 @@ ipcp_verify_propagated_values (void)\n   FOR_EACH_FUNCTION_WITH_GIMPLE_BODY (node)\n     {\n       class ipa_node_params *info = IPA_NODE_REF (node);\n-      if (!opt_for_fn (node->decl, flag_ipa_cp))\n+      if (!opt_for_fn (node->decl, flag_ipa_cp)\n+\t  || !opt_for_fn (node->decl, optimize))\n \tcontinue;\n       int i, count = ipa_get_param_count (info);\n \n@@ -2316,7 +2319,9 @@ propagate_constants_across_call (struct cgraph_edge *cs)\n   parms_count = ipa_get_param_count (callee_info);\n   if (parms_count == 0)\n     return false;\n-  if (!args)\n+  if (!args\n+      || !opt_for_fn (cs->caller->decl, flag_ipa_cp)\n+      || !opt_for_fn (cs->caller->decl, optimize))\n     {\n       for (i = 0; i < parms_count; i++)\n \tret |= set_all_contains_variable (ipa_get_parm_lattices (callee_info,\n@@ -3238,7 +3243,8 @@ propagate_constants_topo (class ipa_topo_info *topo)\n       FOR_EACH_VEC_ELT (cycle_nodes, j, v)\n \tif (v->has_gimple_body_p ())\n \t  {\n-\t    if (opt_for_fn (v->decl, flag_ipa_cp))\n+\t    if (opt_for_fn (v->decl, flag_ipa_cp)\n+\t\t&& opt_for_fn (v->decl, optimize))\n \t      push_node_to_stack (topo, v);\n \t    /* When V is not optimized, we can not push it to stac, but\n \t       still we need to set all its callees lattices to bottom.  */\n@@ -3269,7 +3275,8 @@ propagate_constants_topo (class ipa_topo_info *topo)\n \t their topological sort.  */\n       FOR_EACH_VEC_ELT (cycle_nodes, j, v)\n \tif (v->has_gimple_body_p ()\n-\t    && opt_for_fn (v->decl, flag_ipa_cp))\n+\t    && opt_for_fn (v->decl, flag_ipa_cp)\n+\t    && opt_for_fn (v->decl, optimize))\n \t  {\n \t    struct cgraph_edge *cs;\n \n@@ -3348,7 +3355,9 @@ ipcp_propagate_stage (class ipa_topo_info *topo)\n \n   FOR_EACH_DEFINED_FUNCTION (node)\n   {\n-    if (node->has_gimple_body_p () && opt_for_fn (node->decl, flag_ipa_cp))\n+    if (node->has_gimple_body_p ()\n+\t&& opt_for_fn (node->decl, flag_ipa_cp)\n+\t&& opt_for_fn (node->decl, optimize))\n       {\n         class ipa_node_params *info = IPA_NODE_REF (node);\n         determine_versionability (node, info);"}]}