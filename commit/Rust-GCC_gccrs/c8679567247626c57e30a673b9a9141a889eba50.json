{"sha": "c8679567247626c57e30a673b9a9141a889eba50", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzg2Nzk1NjcyNDc2MjZjNTdlMzBhNjczYjlhOTE0MWE4ODllYmE1MA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2011-03-24T21:56:38Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2011-03-24T21:56:38Z"}, "message": "* dojump.c (do_jump_by_parts_greater_rtx): Optimize in specific cases.\n\nFrom-SVN: r171425", "tree": {"sha": "17e69fe924e880e1e01fa4681c6a59a7bd5d4cf8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/17e69fe924e880e1e01fa4681c6a59a7bd5d4cf8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8679567247626c57e30a673b9a9141a889eba50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8679567247626c57e30a673b9a9141a889eba50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8679567247626c57e30a673b9a9141a889eba50", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8679567247626c57e30a673b9a9141a889eba50/comments", "author": null, "committer": null, "parents": [{"sha": "2717305800114828efe70e9e1dd0414adf539dce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2717305800114828efe70e9e1dd0414adf539dce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2717305800114828efe70e9e1dd0414adf539dce"}], "stats": {"total": 42, "additions": 34, "deletions": 8}, "files": [{"sha": "599a2732393460bf72fd8f6fb26e7803c97b9d77", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8679567247626c57e30a673b9a9141a889eba50/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8679567247626c57e30a673b9a9141a889eba50/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c8679567247626c57e30a673b9a9141a889eba50", "patch": "@@ -1,3 +1,7 @@\n+2011-03-24  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* dojump.c (do_jump_by_parts_greater_rtx): Optimize in specific cases.\n+\n 2011-03-24  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (ix86_print_operand): Output DFmode const_double"}, {"sha": "6437a1f2295028badb2cd87b95d31db83e3e1efb", "filename": "gcc/dojump.c", "status": "modified", "additions": 30, "deletions": 8, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8679567247626c57e30a673b9a9141a889eba50/gcc%2Fdojump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8679567247626c57e30a673b9a9141a889eba50/gcc%2Fdojump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdojump.c?ref=c8679567247626c57e30a673b9a9141a889eba50", "patch": "@@ -637,14 +637,33 @@ do_jump_by_parts_greater_rtx (enum machine_mode mode, int unsignedp, rtx op0,\n {\n   int nwords = (GET_MODE_SIZE (mode) / UNITS_PER_WORD);\n   rtx drop_through_label = 0;\n+  bool drop_through_if_true = false, drop_through_if_false = false;\n+  enum rtx_code code = GT;\n   int i;\n \n   if (! if_true_label || ! if_false_label)\n     drop_through_label = gen_label_rtx ();\n   if (! if_true_label)\n-    if_true_label = drop_through_label;\n+    {\n+      if_true_label = drop_through_label;\n+      drop_through_if_true = true;\n+    }\n   if (! if_false_label)\n-    if_false_label = drop_through_label;\n+    {\n+      if_false_label = drop_through_label;\n+      drop_through_if_false = true;\n+    }\n+\n+  /* Deal with the special case 0 > x: only one comparison is necessary and\n+     we reverse it to avoid jumping to the drop-through label.  */\n+  if (op0 == const0_rtx && drop_through_if_true && !drop_through_if_false)\n+    {\n+      code = LE;\n+      if_true_label = if_false_label;\n+      if_false_label = drop_through_label;\n+      drop_through_if_true = false;\n+      drop_through_if_false = true;\n+    }\n \n   /* Compare a word at a time, high order first.  */\n   for (i = 0; i < nwords; i++)\n@@ -663,17 +682,20 @@ do_jump_by_parts_greater_rtx (enum machine_mode mode, int unsignedp, rtx op0,\n         }\n \n       /* All but high-order word must be compared as unsigned.  */\n-      do_compare_rtx_and_jump (op0_word, op1_word, GT,\n-                               (unsignedp || i > 0), word_mode, NULL_RTX,\n-\t\t\t       NULL_RTX, if_true_label, prob);\n+      do_compare_rtx_and_jump (op0_word, op1_word, code, (unsignedp || i > 0),\n+\t\t\t       word_mode, NULL_RTX, NULL_RTX, if_true_label,\n+\t\t\t       prob);\n+\n+      /* Emit only one comparison for 0.  Do not emit the last cond jump.  */\n+      if (op0 == const0_rtx || i == nwords - 1)\n+\tbreak;\n \n       /* Consider lower words only if these are equal.  */\n       do_compare_rtx_and_jump (op0_word, op1_word, NE, unsignedp, word_mode,\n-\t\t\t       NULL_RTX, NULL_RTX, if_false_label,\n-\t\t\t       inv (prob));\n+\t\t\t       NULL_RTX, NULL_RTX, if_false_label, inv (prob));\n     }\n \n-  if (if_false_label)\n+  if (!drop_through_if_false)\n     emit_jump (if_false_label);\n   if (drop_through_label)\n     emit_label (drop_through_label);"}]}