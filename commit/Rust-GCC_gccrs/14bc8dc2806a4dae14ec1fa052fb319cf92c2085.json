{"sha": "14bc8dc2806a4dae14ec1fa052fb319cf92c2085", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTRiYzhkYzI4MDZhNGRhZTE0ZWMxZmEwNTJmYjMxOWNmOTJjMjA4NQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2004-05-14T17:51:05Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2004-05-14T17:51:05Z"}, "message": "tree-ssa-dom.c (simplify_rhs_and_lookup_avail_expr): Reorganize so that it picks up more opportunities to eliminate ABS expressions...\n\n        * tree-ssa-dom.c (simplify_rhs_and_lookup_avail_expr): Reorganize\n        so that it picks up more opportunities to eliminate ABS expressions\n        or turn them into negations.\n\n        * gcc.dg/tree-ssa/20040514-2.c: New test.\n\nFrom-SVN: r81853", "tree": {"sha": "bc5a65b08d1433084d256e36182e0a2524cf09f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc5a65b08d1433084d256e36182e0a2524cf09f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/14bc8dc2806a4dae14ec1fa052fb319cf92c2085", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14bc8dc2806a4dae14ec1fa052fb319cf92c2085", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14bc8dc2806a4dae14ec1fa052fb319cf92c2085", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14bc8dc2806a4dae14ec1fa052fb319cf92c2085/comments", "author": null, "committer": null, "parents": [{"sha": "394ef95eafc76d2b28c833cec76984953f3308d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/394ef95eafc76d2b28c833cec76984953f3308d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/394ef95eafc76d2b28c833cec76984953f3308d3"}], "stats": {"total": 49, "additions": 47, "deletions": 2}, "files": [{"sha": "844500dce720cdd60d9e2394c07afbeed78c9a45", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14bc8dc2806a4dae14ec1fa052fb319cf92c2085/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14bc8dc2806a4dae14ec1fa052fb319cf92c2085/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=14bc8dc2806a4dae14ec1fa052fb319cf92c2085", "patch": "@@ -1,3 +1,9 @@\n+2004-05-14  Jeff Law  <law@redhat.com>\n+\n+\t* tree-ssa-dom.c (simplify_rhs_and_lookup_avail_expr): Reorganize\n+\tso that it picks up more opportunities to eliminate ABS expressions\n+\tor turn them into negations.\n+\n 2004-05-14  Steven Bosscher  <stevenb@suse.de>\n \n \t* passes.c (rest_of_handle_null_pointer): Remove."}, {"sha": "77a80bad099a14f2b950e017643f30597e658d81", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14bc8dc2806a4dae14ec1fa052fb319cf92c2085/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14bc8dc2806a4dae14ec1fa052fb319cf92c2085/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=14bc8dc2806a4dae14ec1fa052fb319cf92c2085", "patch": "@@ -1,3 +1,7 @@\n+2004-05-14  Jeff Law  <law@redhat.com>\n+\n+\t* gcc.dg/tree-ssa/20040514-2.c: New test.\n+\n 2004-05-14  Tobias Schlueter  <tobias.schlueter@physik.uni-muenchen.de>\n \n \t* gfortran.fortran-torture/compile/noncontinuation_1.f90: Rename"}, {"sha": "b651ae32cf9565b68abc01b83197e551e220aa34", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20040514-2.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14bc8dc2806a4dae14ec1fa052fb319cf92c2085/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040514-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14bc8dc2806a4dae14ec1fa052fb319cf92c2085/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040514-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040514-2.c?ref=14bc8dc2806a4dae14ec1fa052fb319cf92c2085", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -fdump-tree-dom3\" } */\n+int\n+foo2 (distance, i, j)\n+     int distance;\n+     int i, j;\n+{\n+ int t = distance;\n+ if (t <= 0)\n+   t = ((t) >= 0 ? (t)  : -(t));\n+ return t;\n+}\n+\n+/* There should be no ABS_EXPR.  */\n+/* { dg-final { scan-tree-dump-times \"ABS_EXPR \" 0 \"dom3\"} } */"}, {"sha": "89f4c6a5cb08c22a339aa973e43faea056284999", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14bc8dc2806a4dae14ec1fa052fb319cf92c2085/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14bc8dc2806a4dae14ec1fa052fb319cf92c2085/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=14bc8dc2806a4dae14ec1fa052fb319cf92c2085", "patch": "@@ -1826,22 +1826,42 @@ simplify_rhs_and_lookup_avail_expr (struct dom_walk_data *walk_data,\n \n \t  if (! dummy_cond)\n \t    {\n-\t      dummy_cond = build (LT_EXPR, boolean_type_node,\n+\t      dummy_cond = build (LE_EXPR, boolean_type_node,\n \t\t\t\t  op, integer_zero_node);\n \t      dummy_cond = build (COND_EXPR, void_type_node,\n \t\t\t\t  dummy_cond, NULL, NULL);\n \t      walk_data->global_data = dummy_cond;\n \t    }\n \t  else\n \t    {\n-\t      TREE_SET_CODE (TREE_OPERAND (dummy_cond, 0), LT_EXPR);\n+\t      TREE_SET_CODE (TREE_OPERAND (dummy_cond, 0), LE_EXPR);\n \t      TREE_OPERAND (TREE_OPERAND (dummy_cond, 0), 0) = op;\n \t      TREE_OPERAND (TREE_OPERAND (dummy_cond, 0), 1)\n \t\t= convert (type, integer_zero_node);\n \t    }\n \t  val = simplify_cond_and_lookup_avail_expr (dummy_cond,\n \t\t\t\t\t\t     &bd->avail_exprs,\n \t\t\t\t\t\t     NULL, false);\n+\n+\t  if (!val)\n+\t    {\n+\t      TREE_SET_CODE (TREE_OPERAND (dummy_cond, 0), GE_EXPR);\n+\t      TREE_OPERAND (TREE_OPERAND (dummy_cond, 0), 0) = op;\n+\t      TREE_OPERAND (TREE_OPERAND (dummy_cond, 0), 1)\n+\t\t= convert (type, integer_zero_node);\n+\n+\t      val = simplify_cond_and_lookup_avail_expr (dummy_cond,\n+\t\t\t\t\t\t\t &bd->avail_exprs,\n+\t\t\t\t\t\t\t NULL, false);\n+\n+\t      if (val)\n+\t\t{\n+\t\t  if (integer_zerop (val))\n+\t\t    val = integer_one_node;\n+\t\t  else if (integer_onep (val))\n+\t\t    val = integer_zero_node;\n+\t\t}\n+\t    }\n \t}\n \n       if (val"}]}