{"sha": "0f84c36ef44ee5b4571b542a3a46307ec7bbb3de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGY4NGMzNmVmNDRlZTViNDU3MWI1NDJhM2E0NjMwN2VjN2JiYjNkZQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-10-29T00:48:00Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-10-29T00:48:00Z"}, "message": "tree-phinodes.c (add_phi_arg): Turn an \"if\" that always triggers into gcc_assert.\n\n\t* tree-phinodes.c (add_phi_arg): Turn an \"if\" that always\n\ttriggers into gcc_assert.\n\nFrom-SVN: r89800", "tree": {"sha": "f5dc21baf7048e92f9d09b17e5943c9ce39be886", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f5dc21baf7048e92f9d09b17e5943c9ce39be886"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f84c36ef44ee5b4571b542a3a46307ec7bbb3de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f84c36ef44ee5b4571b542a3a46307ec7bbb3de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f84c36ef44ee5b4571b542a3a46307ec7bbb3de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f84c36ef44ee5b4571b542a3a46307ec7bbb3de/comments", "author": null, "committer": null, "parents": [{"sha": "1a8dfc45ba700bee3e8265e0b1936b209242a6a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a8dfc45ba700bee3e8265e0b1936b209242a6a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a8dfc45ba700bee3e8265e0b1936b209242a6a7"}], "stats": {"total": 58, "additions": 31, "deletions": 27}, "files": [{"sha": "68c121b4fee68c4f82236d854b3eeedeb3c8187f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f84c36ef44ee5b4571b542a3a46307ec7bbb3de/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f84c36ef44ee5b4571b542a3a46307ec7bbb3de/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0f84c36ef44ee5b4571b542a3a46307ec7bbb3de", "patch": "@@ -1,3 +1,8 @@\n+2004-10-29  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* tree-phinodes.c (add_phi_arg): Turn an \"if\" that always\n+\ttriggers into gcc_assert.\n+\n 2004-10-28  Diego Novillo  <dnovillo@redhat.com>\n \n \tPR tree-optimization/16728"}, {"sha": "1cc613cc4afc83a0b99837f3835e89a5e490f871", "filename": "gcc/tree-phinodes.c", "status": "modified", "additions": 26, "deletions": 27, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f84c36ef44ee5b4571b542a3a46307ec7bbb3de/gcc%2Ftree-phinodes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f84c36ef44ee5b4571b542a3a46307ec7bbb3de/gcc%2Ftree-phinodes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-phinodes.c?ref=0f84c36ef44ee5b4571b542a3a46307ec7bbb3de", "patch": "@@ -321,42 +321,41 @@ add_phi_arg (tree *phi, tree def, edge e)\n   if (i >= PHI_ARG_CAPACITY (*phi))\n     {\n       tree old_phi = *phi;\n+      basic_block bb;\n \n-      /* Resize the phi.  Unfortunately, this may also relocate it.  */\n+      /* Resize the phi.  Unfortunately, this will relocate it.  */\n       resize_phi_node (phi, ideal_phi_node_len (i + 4));\n \n+      /* resize_phi_node will necessarily relocate the phi.  */\n+      gcc_assert (*phi != old_phi);\n+\n       /* The result of the phi is defined by this phi node.  */\n       SSA_NAME_DEF_STMT (PHI_RESULT (*phi)) = *phi;\n \n-      /* If the PHI was relocated, update the PHI chains appropriately and\n-\t release the old PHI node.  */\n-      if (*phi != old_phi)\n+      /* Extract the basic block for the PHI from the PHI's annotation\n+\t rather than the edge.  This works better as the edge's\n+\t destination may not currently be the block with the PHI node\n+\t if we are in the process of threading the edge to a new\n+\t destination.  */\n+      bb = bb_for_stmt (*phi);\n+\n+      release_phi_node (old_phi);\n+\n+      /* Update the list head if replacing the first listed phi.  */\n+      if (phi_nodes (bb) == old_phi)\n+\tbb_ann (bb)->phi_nodes = *phi;\n+      else\n \t{\n-\t  /* Extract the basic block for the PHI from the PHI's annotation\n-\t     rather than the edge.  This works better as the edge's\n-\t     destination may not currently be the block with the PHI\n-\t     node if we are in the process of threading the edge to\n-\t     a new destination.  */\n-\t  basic_block bb = bb_for_stmt (*phi);\n-\n-\t  release_phi_node (old_phi);\n-\n-\t  /* Update the list head if replacing the first listed phi.  */\n-\t  if (phi_nodes (bb) == old_phi)\n-\t    bb_ann (bb)->phi_nodes = *phi;\n-\t  else\n-\t    {\n-\t      /* Traverse the list looking for the phi node to chain to.  */\n-\t      tree p;\n+\t  /* Traverse the list looking for the phi node to chain to.  */\n+\t  tree p;\n \n-\t      for (p = phi_nodes (bb);\n-\t\t   p && PHI_CHAIN (p) != old_phi;\n-\t\t   p = PHI_CHAIN (p))\n-\t\t;\n+\t  for (p = phi_nodes (bb);\n+\t       p && PHI_CHAIN (p) != old_phi;\n+\t       p = PHI_CHAIN (p))\n+\t    ;\n \n-\t      gcc_assert (p);\n-\t      PHI_CHAIN (p) = *phi;\n-\t    }\n+\t  gcc_assert (p);\n+\t  PHI_CHAIN (p) = *phi;\n \t}\n     }\n "}]}