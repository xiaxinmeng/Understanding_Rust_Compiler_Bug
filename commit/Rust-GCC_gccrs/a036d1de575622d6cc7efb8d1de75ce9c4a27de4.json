{"sha": "a036d1de575622d6cc7efb8d1de75ce9c4a27de4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTAzNmQxZGU1NzU2MjJkNmNjN2VmYjhkMWRlNzVjZTljNGEyN2RlNA==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2018-05-25T09:03:41Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-05-25T09:03:41Z"}, "message": "[Ada] Checks on instantiations with formal derived types with interfaces\n\nThis patch implements the rule stated in RM 12.5.5 : the actual shall be\na descendant of very progenitor of the formal type.\n\n2018-05-25  Ed Schonberg  <schonberg@adacore.com>\n\ngcc/ada/\n\n\t* sem_ch12.adb (Validate_Derived_Type_Instance): Verify that the actual\n\tfor a formal derived type implements all the interfaces declared for\n\tthe formal.\n\ngcc/testsuite/\n\n\t* gnat.dg/interface6.adb: New testcase.\n\nFrom-SVN: r260723", "tree": {"sha": "d5d357f0f77c35119a05b75b2352177283ee37c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d5d357f0f77c35119a05b75b2352177283ee37c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a036d1de575622d6cc7efb8d1de75ce9c4a27de4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a036d1de575622d6cc7efb8d1de75ce9c4a27de4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a036d1de575622d6cc7efb8d1de75ce9c4a27de4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a036d1de575622d6cc7efb8d1de75ce9c4a27de4/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1f233db3745890d8c9bed07f44a8b078bb2a0ee9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f233db3745890d8c9bed07f44a8b078bb2a0ee9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f233db3745890d8c9bed07f44a8b078bb2a0ee9"}], "stats": {"total": 96, "additions": 96, "deletions": 0}, "files": [{"sha": "adb62f5b3c5a3188e13798e2fd8924ebf5df9dc5", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a036d1de575622d6cc7efb8d1de75ce9c4a27de4/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a036d1de575622d6cc7efb8d1de75ce9c4a27de4/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a036d1de575622d6cc7efb8d1de75ce9c4a27de4", "patch": "@@ -1,3 +1,9 @@\n+2018-05-25  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch12.adb (Validate_Derived_Type_Instance): Verify that the actual\n+\tfor a formal derived type implements all the interfaces declared for\n+\tthe formal.\n+\n 2018-05-25  Yannick Moy  <moy@adacore.com>\n \n \t* sem_prag.adb (Check_Applicable_Policy): Deal specially with CodePeer"}, {"sha": "bc7dd138a1bc41d43814de78ca71c7fcc34375d3", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a036d1de575622d6cc7efb8d1de75ce9c4a27de4/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a036d1de575622d6cc7efb8d1de75ce9c4a27de4/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=a036d1de575622d6cc7efb8d1de75ce9c4a27de4", "patch": "@@ -12356,6 +12356,48 @@ package body Sem_Ch12 is\n          Ancestor_Discr : Entity_Id;\n \n       begin\n+         --  Verify that the actual includes the progenitors of the formal,\n+         --  if any. The formal may depend on previous formals and their\n+         --  instance, so we must examine instance of interfaces if present.\n+         --  The actual may be an extension of an interface, in which case\n+         --  it does not appear in the interface list, so this must be\n+         --  checked separately.\n+         --  We omit the check if the interface is declared in an (enclosing)\n+         --  generic because the interface implemented by the actual may have\n+         --  the same name but a different entity. A small remaining gap ???\n+\n+         if Present (Interface_List (Def)) then\n+            if not Has_Interfaces (Act_T) then\n+               Error_Msg_NE\n+                 (\"actual must implement all interfaces of formal&\",\n+                   Actual, A_Gen_T);\n+\n+            else\n+               declare\n+                  Iface : Node_Id;\n+                  Iface_Ent : Entity_Id;\n+\n+               begin\n+                  Iface := First (Abstract_Interface_List (A_Gen_T));\n+\n+                  while Present (Iface) loop\n+                     Iface_Ent := Get_Instance_Of (Entity (Iface));\n+                     if not Is_Progenitor (Iface_Ent, Act_T)\n+                     and then not Is_Ancestor (Iface_Ent, Act_T)\n+                     and then Ekind (Scope (Iface_Ent)) /= E_Generic_Package\n+                     then\n+                        Error_Msg_Name_1 := Chars (Act_T);\n+                        Error_Msg_NE\n+                          (\"Actual% must implement interface&\",\n+                            Actual,  Etype (Iface));\n+                     end if;\n+\n+                     Next (Iface);\n+                  end loop;\n+               end;\n+            end if;\n+         end if;\n+\n          --  If the parent type in the generic declaration is itself a previous\n          --  formal type, then it is local to the generic and absent from the\n          --  analyzed generic definition. In that case the ancestor is the"}, {"sha": "a3c2ff9ccb0fa7ca5683eb954ecd409c7c267910", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a036d1de575622d6cc7efb8d1de75ce9c4a27de4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a036d1de575622d6cc7efb8d1de75ce9c4a27de4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a036d1de575622d6cc7efb8d1de75ce9c4a27de4", "patch": "@@ -1,3 +1,7 @@\n+2018-05-25  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* gnat.dg/interface6.adb: New testcase.\n+\n 2018-05-25  Ed Schonberg  <schonberg@adacore.com>\n \n \t* gnat.dg/static_pred1.adb, gnat.dg/static_pred1.ads: New testcase."}, {"sha": "04eb1e179999a9ebe58674ce9b38b65b02ad3c42", "filename": "gcc/testsuite/gnat.dg/interface6.adb", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a036d1de575622d6cc7efb8d1de75ce9c4a27de4/gcc%2Ftestsuite%2Fgnat.dg%2Finterface6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a036d1de575622d6cc7efb8d1de75ce9c4a27de4/gcc%2Ftestsuite%2Fgnat.dg%2Finterface6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Finterface6.adb?ref=a036d1de575622d6cc7efb8d1de75ce9c4a27de4", "patch": "@@ -0,0 +1,44 @@\n+--  { dg-do compile }\n+\n+procedure Interface6 is\n+\n+     type TI  is interface;\n+     type TI2 is interface;\n+\n+     type Rec_Type is tagged null record;\n+\n+     type Rec_Type1 is new TI\n+     with\n+     record\n+         A : Integer;\n+     end record;\n+\n+     type Rec_Type2 is new Rec_Type1 and TI2\n+     with\n+     record\n+         B : Integer;\n+     end record;\n+\n+     type Rec_Type12 is new Rec_Type1 and TI and TI2\n+     with\n+     record\n+         C : Integer;\n+     end record;\n+\n+     generic\n+         type T is new Rec_Type1 and TI2 with private;\n+     procedure Test;\n+\n+     procedure Test is\n+     begin\n+         null;\n+     end Test;\n+\n+     procedure Test_Instance1 is new Test (T => Rec_Type);  --  { dg-error \"actual must implement all interfaces of formal \\\"T\\\"\" }\n+     procedure Test_Instance1 is new Test (T => Rec_Type1);  -- { dg-error \"Actual \\\"Rec_Type1\\\" must implement interface \\\"TI2\\\"\" }\n+     procedure Test_Instance2 is new Test (T => Rec_Type2);\n+     procedure Test_Instance12 is new Test (T => Rec_Type12);\n+\n+begin\n+     null;\n+end Interface6;"}]}