{"sha": "a905304c94475f67c263b5f0012e3cda8feb41ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTkwNTMwNGM5NDQ3NWY2N2MyNjNiNWYwMDEyZTNjZGE4ZmViNDFjYQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-10-20T14:27:24Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-10-20T14:27:24Z"}, "message": "[multiple changes]\n\n2014-10-20  Tristan Gingold  <gingold@adacore.com>\n\n\t* init.c (__gnat_is_stack_guard): Don't use mach_vm_region_recurse on\n\tarm-darwin.\n\t* raise-gcc.c: Add ATTRIBUTE_UNUSED to remove warnings for\n\tunused arguments.\n\n2014-10-20  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_attr.adb (Analyze_Attribute): Replace\n\tvariables CS and PS with Proc_Id and Subp_Id to better illustrate\n\ttheir purpose. Account for the case where _Postconditions\n\thas not been generated yet and the context is aspect/pragma\n\tRefined_Post. In that scenario the expected prefix of attribute\n\t'Result is the current scope.\n\n2014-10-20  Robert Dewar  <dewar@adacore.com>\n\n\t* par-ch4.adb (P_Expression): Handle extraneous comma/semicolon\n\tin middle of expression with logical operators.\n\n2014-10-20  Robert Dewar  <dewar@adacore.com>\n\n\t* par-ch13.adb (Possible_Misspelled_Aspect): New function.\n\n2014-10-20  Steve Baird  <baird@adacore.com>\n\n\t* pprint.adb: Improve Expression_Image function.\n\nFrom-SVN: r216477", "tree": {"sha": "06ace340b52d9a92dbf95ddb7498cd8f659ad4e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/06ace340b52d9a92dbf95ddb7498cd8f659ad4e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a905304c94475f67c263b5f0012e3cda8feb41ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a905304c94475f67c263b5f0012e3cda8feb41ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a905304c94475f67c263b5f0012e3cda8feb41ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a905304c94475f67c263b5f0012e3cda8feb41ca/comments", "author": null, "committer": null, "parents": [{"sha": "49d413972612664513ab9b69934359563616b846", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49d413972612664513ab9b69934359563616b846", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49d413972612664513ab9b69934359563616b846"}], "stats": {"total": 274, "additions": 205, "deletions": 69}, "files": [{"sha": "1665487ea4748532a6a144b67299f0a04f3a14bd", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a905304c94475f67c263b5f0012e3cda8feb41ca/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a905304c94475f67c263b5f0012e3cda8feb41ca/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a905304c94475f67c263b5f0012e3cda8feb41ca", "patch": "@@ -1,3 +1,32 @@\n+2014-10-20  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* init.c (__gnat_is_stack_guard): Don't use mach_vm_region_recurse on\n+\tarm-darwin.\n+\t* raise-gcc.c: Add ATTRIBUTE_UNUSED to remove warnings for\n+\tunused arguments.\n+\n+2014-10-20  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_attr.adb (Analyze_Attribute): Replace\n+\tvariables CS and PS with Proc_Id and Subp_Id to better illustrate\n+\ttheir purpose. Account for the case where _Postconditions\n+\thas not been generated yet and the context is aspect/pragma\n+\tRefined_Post. In that scenario the expected prefix of attribute\n+\t'Result is the current scope.\n+\n+2014-10-20  Robert Dewar  <dewar@adacore.com>\n+\n+\t* par-ch4.adb (P_Expression): Handle extraneous comma/semicolon\n+\tin middle of expression with logical operators.\n+\n+2014-10-20  Robert Dewar  <dewar@adacore.com>\n+\n+\t* par-ch13.adb (Possible_Misspelled_Aspect): New function.\n+\n+2014-10-20  Steve Baird  <baird@adacore.com>\n+\n+\t* pprint.adb: Improve Expression_Image function.\n+\n 2014-10-20  Robert Dewar  <dewar@adacore.com>\n \n \t* gnat_rm.texi: Document No_Tagged_Streams pragma and aspect."}, {"sha": "9a2290534947b58226526d0f6f0d434f66ab8162", "filename": "gcc/ada/init.c", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a905304c94475f67c263b5f0012e3cda8feb41ca/gcc%2Fada%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a905304c94475f67c263b5f0012e3cda8feb41ca/gcc%2Fada%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finit.c?ref=a905304c94475f67c263b5f0012e3cda8feb41ca", "patch": "@@ -2198,9 +2198,6 @@ __gnat_install_handler(void)\n #include <stdlib.h>\n #include <sys/syscall.h>\n #include <sys/sysctl.h>\n-#include <mach/mach_vm.h>\n-#include <mach/mach_init.h>\n-#include <mach/vm_statistics.h>\n \n /* This must be in keeping with System.OS_Interface.Alternate_Stack_Size.  */\n char __gnat_alternate_stack[32 * 1024]; /* 1 * MINSIGSTKSZ */\n@@ -2209,10 +2206,17 @@ char __gnat_alternate_stack[32 * 1024]; /* 1 * MINSIGSTKSZ */\n    Tell the kernel to re-use alt stack when delivering a signal.  */\n #define\tUC_RESET_ALT_STACK\t0x80000000\n \n+#ifndef __arm__\n+#include <mach/mach_vm.h>\n+#include <mach/mach_init.h>\n+#include <mach/vm_statistics.h>\n+#endif\n+\n /* Return true if ADDR is within a stack guard area.  */\n static int\n __gnat_is_stack_guard (mach_vm_address_t addr)\n {\n+#ifndef __arm__\n   kern_return_t kret;\n   vm_region_submap_info_data_64_t info;\n   mach_vm_address_t start;\n@@ -2232,6 +2236,10 @@ __gnat_is_stack_guard (mach_vm_address_t addr)\n       && info.user_tag == VM_MEMORY_STACK)\n     return 1;\n   return 0;\n+#else\n+  /* Pagezero for arm.  */\n+  return addr < 4096;\n+#endif\n }\n \n #define HAVE_GNAT_ADJUST_CONTEXT_FOR_RAISE"}, {"sha": "5f448f67543d4d9ab209a722b591843027d689d3", "filename": "gcc/ada/par-ch13.adb", "status": "modified", "additions": 31, "deletions": 8, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a905304c94475f67c263b5f0012e3cda8feb41ca/gcc%2Fada%2Fpar-ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a905304c94475f67c263b5f0012e3cda8feb41ca/gcc%2Fada%2Fpar-ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch13.adb?ref=a905304c94475f67c263b5f0012e3cda8feb41ca", "patch": "@@ -45,6 +45,26 @@ package body Ch13 is\n       Scan_State : Saved_Scan_State;\n       Result     : Boolean;\n \n+      function Possible_Misspelled_Aspect return Boolean;\n+      --  Returns True, if Token_Name is a misspelling of some aspect name\n+\n+      --------------------------------\n+      -- Possible_Misspelled_Aspect --\n+      --------------------------------\n+\n+      function Possible_Misspelled_Aspect return Boolean is\n+      begin\n+         for J in Aspect_Id_Exclude_No_Aspect loop\n+            if Is_Bad_Spelling_Of (Token_Name, Aspect_Names (J)) then\n+               return True;\n+            end if;\n+         end loop;\n+\n+         return False;\n+      end Possible_Misspelled_Aspect;\n+\n+   --  Start of processing for Aspect_Specifications_Present\n+\n    begin\n       --  Definitely must have WITH to consider aspect specs to be present\n \n@@ -74,17 +94,20 @@ package body Ch13 is\n       if Token /= Tok_Identifier then\n          Result := False;\n \n-      --  This is where we pay attention to the Strict mode. Normally when we\n-      --  are in Ada 2012 mode, Strict is False, and we consider that we have\n-      --  an aspect specification if the identifier is an aspect name (even if\n-      --  not followed by =>) or the identifier is not an aspect name but is\n-      --  followed by =>, by a comma, or by a semicolon. The last two cases\n-      --  correspond to (misspelled) Boolean aspects with a defaulted value of\n-      --  True. P_Aspect_Specifications will generate messages if the aspect\n+      --  This is where we pay attention to the Strict mode. Normally when\n+      --  we are in Ada 2012 mode, Strict is False, and we consider that we\n+      --  have an aspect specification if the identifier is an aspect name\n+      --  or a likely misspelling of one (even if not followed by =>) or\n+      --  the identifier is not an aspect name but is followed by =>, by\n+      --  a comma, or by a semicolon. The last two cases correspond to\n+      --  (misspelled) Boolean aspects with a defaulted value of True.\n+      --  P_Aspect_Specifications will generate messages if the aspect\n       --  specification is ill-formed.\n \n       elsif not Strict then\n-         if Get_Aspect_Id (Token_Name) /= No_Aspect then\n+         if Get_Aspect_Id (Token_Name) /= No_Aspect\n+           or else Possible_Misspelled_Aspect\n+         then\n             Result := True;\n          else\n             Scan; -- past identifier"}, {"sha": "071853a01ac3d1b0da772d64596debd33d72e512", "filename": "gcc/ada/par-ch4.adb", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a905304c94475f67c263b5f0012e3cda8feb41ca/gcc%2Fada%2Fpar-ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a905304c94475f67c263b5f0012e3cda8feb41ca/gcc%2Fada%2Fpar-ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch4.adb?ref=a905304c94475f67c263b5f0012e3cda8feb41ca", "patch": "@@ -1708,6 +1708,48 @@ package body Ch4 is\n             Node1 := New_Op_Node (Logical_Op, Op_Location);\n             Set_Left_Opnd (Node1, Node2);\n             Set_Right_Opnd (Node1, P_Relation);\n+\n+            --  Check for case of errant comma or semicolon\n+\n+            if Token = Tok_Comma or else Token = Tok_Semicolon then\n+               declare\n+                  Com        : constant Boolean := Token = Tok_Comma;\n+                  Scan_State : Saved_Scan_State;\n+                  Logop      : Node_Kind;\n+\n+               begin\n+                  Save_Scan_State (Scan_State); -- at comma/semicolon\n+                  Scan; -- past comma/semicolon\n+\n+                  --  Check for AND THEN or OR ELSE after comma/semicolon. We\n+                  --  do not deal with AND/OR because those cases get mixed up\n+                  --  with the select alternatives case.\n+\n+                  if Token = Tok_And or else Token = Tok_Or then\n+                     Logop := P_Logical_Operator;\n+                     Restore_Scan_State (Scan_State); -- to comma/semicolon\n+\n+                     if Nkind_In (Logop, N_And_Then, N_Or_Else) then\n+                        Scan; -- past comma/semicolon\n+\n+                        if Com then\n+                           Error_Msg_SP -- CODEFIX\n+                             (\"|extra \"\",\"\" ignored\");\n+                        else\n+                           Error_Msg_SP -- CODEFIX\n+                             (\"|extra \"\";\"\" ignored\");\n+                        end if;\n+\n+                     else\n+                        Restore_Scan_State (Scan_State); -- to comma/semicolon\n+                     end if;\n+\n+                  else\n+                     Restore_Scan_State (Scan_State); -- to comma/semicolon\n+                  end if;\n+               end;\n+            end if;\n+\n             exit when Token not in Token_Class_Logop;\n          end loop;\n "}, {"sha": "8ac3ac63688fff805096c4fbcbe15efea1bd2dd1", "filename": "gcc/ada/pprint.adb", "status": "modified", "additions": 34, "deletions": 7, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a905304c94475f67c263b5f0012e3cda8feb41ca/gcc%2Fada%2Fpprint.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a905304c94475f67c263b5f0012e3cda8feb41ca/gcc%2Fada%2Fpprint.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpprint.adb?ref=a905304c94475f67c263b5f0012e3cda8feb41ca", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2008-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2008-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -226,7 +226,14 @@ package body Pprint is\n                   return List_Name\n                     (First (Sinfo.Expressions (Expr)), Add_Space => False);\n \n-               elsif Null_Record_Present (Expr) then\n+               --  Do not return empty string for (others => <>) aggregate\n+               --  of a componentless record type. At least one caller (the\n+               --  recursive call below in the N_Qualified_Expression case)\n+               --  is not prepared to deal with a zero-length result.\n+\n+               elsif Null_Record_Present (Expr)\n+                 or else not Present (First (Component_Associations (Expr)))\n+               then\n                   return (\"(null record)\");\n \n                else\n@@ -585,12 +592,32 @@ package body Pprint is\n \n             when N_Function_Call =>\n                if Present (Sinfo.Parameter_Associations (Right)) then\n-                  Right :=\n-                    Original_Node\n-                      (Last (Sinfo.Parameter_Associations (Right)));\n-                  Append_Paren := True;\n+                  declare\n+                     Rover : Node_Id;\n+                     Found : Boolean;\n+\n+                  begin\n+                     --  Avoid source position confusion associated with\n+                     --  parameters for which Comes_From_Source is False.\n+\n+                     Rover := First (Sinfo.Parameter_Associations (Right));\n+                     Found := False;\n+                     while Present (Rover) loop\n+                        if Comes_From_Source (Original_Node (Rover)) then\n+                           Right := Original_Node (Rover);\n+                           Append_Paren := True;\n+                           Found := True;\n+                        end if;\n+\n+                        Next (Rover);\n+                     end loop;\n+\n+                     --  Quit loop if no Comes_From_Source parameters\n+\n+                     exit when not Found;\n+                  end;\n \n-               --  Quit loop if no named associations\n+               --  Quit loop if no parameters\n \n                else\n                   exit;"}, {"sha": "4a10fbff0d9e02c1de4b62089eafa9e39a2deaf1", "filename": "gcc/ada/raise-gcc.c", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a905304c94475f67c263b5f0012e3cda8feb41ca/gcc%2Fada%2Fraise-gcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a905304c94475f67c263b5f0012e3cda8feb41ca/gcc%2Fada%2Fraise-gcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fraise-gcc.c?ref=a905304c94475f67c263b5f0012e3cda8feb41ca", "patch": "@@ -1110,8 +1110,8 @@ extern void __gnat_notify_unhandled_exception (struct Exception_Occurrence *);\n    personality routine must unwind one frame (per EHABI 7.3 4.).  */\n \n static _Unwind_Reason_Code\n-continue_unwind (struct _Unwind_Exception* ue_header,\n-\t\t struct _Unwind_Context* uw_context)\n+continue_unwind (struct _Unwind_Exception* ue_header ATTRIBUTE_UNUSED,\n+\t\t struct _Unwind_Context* uw_context ATTRIBUTE_UNUSED)\n {\n #ifdef __ARM_EABI_UNWINDER__\n   if (__gnu_unwind_frame (ue_header, uw_context) != _URC_OK)\n@@ -1253,9 +1253,6 @@ PERSONALITY_FUNCTION (version_arg_t version_arg,\n      Condition Handling Facility.  */\n   int uw_version = (int) version_arg;\n   _Unwind_Action uw_phases = (_Unwind_Action) phases_arg;\n-  region_descriptor region;\n-  action_descriptor action;\n-  _Unwind_Ptr ip;\n \n   /* Check that we're called from the ABI context we expect, with a major\n      possible variation on VMS for IA64.  */\n@@ -1379,14 +1376,14 @@ __gnat_Unwind_RaiseException (_Unwind_Exception *e)\n }\n \n _Unwind_Reason_Code\n-__gnat_Unwind_ForcedUnwind (_Unwind_Exception *e,\n-\t\t\t    void *handler,\n-\t\t\t    void *argument)\n+__gnat_Unwind_ForcedUnwind (_Unwind_Exception *e ATTRIBUTE_UNUSED,\n+\t\t\t    void *handler ATTRIBUTE_UNUSED,\n+\t\t\t    void *argument ATTRIBUTE_UNUSED)\n {\n #ifdef __USING_SJLJ_EXCEPTIONS__\n \n # if defined (__APPLE__) && defined (__arm__)\n-  /* There is not ForcedUnwind routine in ios system library.  */\n+  /* There is not ForcedUnwind routine in arm-darwin system library.  */\n   return _URC_FATAL_PHASE1_ERROR;\n # else\n   return _Unwind_SjLj_ForcedUnwind (e, handler, argument);"}, {"sha": "10220eef87e35c52594342bc244db399b7ebad46", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 52, "deletions": 42, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a905304c94475f67c263b5f0012e3cda8feb41ca/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a905304c94475f67c263b5f0012e3cda8feb41ca/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=a905304c94475f67c263b5f0012e3cda8feb41ca", "patch": "@@ -1509,8 +1509,8 @@ package body Sem_Attr is\n                        Is_Empty_List (Static_Discrete_Predicate (P_Type)))\n          then\n             Error_Attr_P\n-              (\"prefix of % attribute must be subtype with \"\n-               & \"at least one value\");\n+              (\"prefix of % attribute must be subtype with at least one \"\n+               & \"value\");\n          end if;\n       end Check_First_Last_Valid;\n \n@@ -4946,47 +4946,48 @@ package body Sem_Attr is\n       ------------\n \n       when Attribute_Result => Result : declare\n-         CS : Entity_Id;\n-         --  The enclosing scope, excluding loops for quantified expressions\n-\n-         PS : Entity_Id;\n-         --  During analysis, CS is the postcondition subprogram and PS the\n-         --  source subprogram to which the postcondition applies. During\n-         --  pre-analysis, CS is the scope of the subprogram declaration.\n+         Post_Id : Entity_Id;\n+         --  The entity of the _Postconditions procedure\n \n          Prag : Node_Id;\n          --  During pre-analysis, Prag is the enclosing pragma node if any\n \n+         Subp_Id : Entity_Id;\n+         --  The entity of the enclosing subprogram\n+\n       begin\n          --  Find the proper enclosing scope\n \n-         CS := Current_Scope;\n-         while Present (CS) loop\n+         Post_Id := Current_Scope;\n+         while Present (Post_Id) loop\n \n             --  Skip generated loops\n \n-            if Ekind (CS) = E_Loop then\n-               CS := Scope (CS);\n+            if Ekind (Post_Id) = E_Loop then\n+               Post_Id := Scope (Post_Id);\n \n             --  Skip the special _Parent scope generated to capture references\n             --  to formals during the process of subprogram inlining.\n \n-            elsif Ekind (CS) = E_Function\n-              and then Chars (CS) = Name_uParent\n+            elsif Ekind (Post_Id) = E_Function\n+              and then Chars (Post_Id) = Name_uParent\n             then\n-               CS := Scope (CS);\n+               Post_Id := Scope (Post_Id);\n+\n+            --  Otherwise this must be _Postconditions\n+\n             else\n                exit;\n             end if;\n          end loop;\n \n-         PS := Scope (CS);\n+         Subp_Id := Scope (Post_Id);\n \n          --  If the enclosing subprogram is always inlined, the enclosing\n          --  postcondition will not be propagated to the expanded call.\n \n          if not In_Spec_Expression\n-           and then Has_Pragma_Inline_Always (PS)\n+           and then Has_Pragma_Inline_Always (Subp_Id)\n            and then Warn_On_Redundant_Constructs\n          then\n             Error_Msg_N\n@@ -4998,16 +4999,14 @@ package body Sem_Attr is\n          --  or test case) pragma, and we just set the proper type. If there is\n          --  an error it will be caught when the real Analyze call is done.\n \n-         if Ekind (CS) = E_Function\n-           and then In_Spec_Expression\n-         then\n+         if Ekind (Post_Id) = E_Function and then In_Spec_Expression then\n+\n             --  Check OK prefix\n \n-            if Chars (CS) /= Chars (P) then\n+            if Chars (Post_Id) /= Chars (P) then\n                Error_Msg_Name_1 := Name_Result;\n-\n                Error_Msg_NE\n-                 (\"incorrect prefix for % attribute, expected &\", P, CS);\n+                 (\"incorrect prefix for % attribute, expected &\", P, Post_Id);\n                Error_Attr;\n             end if;\n \n@@ -5041,7 +5040,6 @@ package body Sem_Attr is\n \n             else\n                case Get_Pragma_Id (Prag) is\n-\n                   when Pragma_Test_Case =>\n                      declare\n                         Arg_Ens : constant Node_Id :=\n@@ -5114,13 +5112,13 @@ package body Sem_Attr is\n                return;\n             end if;\n \n-            Set_Etype (N, Etype (CS));\n+            Set_Etype (N, Etype (Post_Id));\n \n             --  If several functions with that name are visible, the intended\n             --  one is the current scope.\n \n             if Is_Overloaded (P) then\n-               Set_Entity (P, CS);\n+               Set_Entity (P, Post_Id);\n                Set_Is_Overloaded (P, False);\n             end if;\n \n@@ -5132,22 +5130,32 @@ package body Sem_Attr is\n          --  then on the legality of 'Result is determined as usual.\n \n          elsif not Expander_Active and then In_Refined_Post then\n-            PS := Current_Scope;\n \n-            --  The prefix denotes the proper related function\n+            --  Routine _Postconditions has not been generated yet, the nearest\n+            --  enclosing subprogram is denoted by the current scope.\n+\n+            if Ekind (Post_Id) /= E_Procedure\n+              or else Chars (Post_Id) /= Name_uPostconditions\n+            then\n+               Subp_Id := Current_Scope;\n+            end if;\n+\n+            --  The prefix denotes the nearest enclosing function\n \n             if Is_Entity_Name (P)\n               and then Ekind (Entity (P)) = E_Function\n-              and then Entity (P) = PS\n+              and then Entity (P) = Subp_Id\n             then\n                null;\n \n+            --  Otherwise the use of 'Result is illegal\n+\n             else\n-               Error_Msg_Name_2 := Chars (PS);\n+               Error_Msg_Name_2 := Chars (Subp_Id);\n                Error_Attr (\"incorrect prefix for % attribute, expected %\", P);\n             end if;\n \n-            Set_Etype (N, Etype (PS));\n+            Set_Etype (N, Etype (Subp_Id));\n \n          --  Body case, where we must be inside a generated _Postconditions\n          --  procedure, and the prefix must be on the scope stack, or else the\n@@ -5156,23 +5164,25 @@ package body Sem_Attr is\n          --  current one.\n \n          else\n-            while Present (CS) and then CS /= Standard_Standard loop\n-               if Chars (CS) = Name_uPostconditions then\n+            while Present (Post_Id)\n+              and then Post_Id /= Standard_Standard\n+            loop\n+               if Chars (Post_Id) = Name_uPostconditions then\n                   exit;\n                else\n-                  CS := Scope (CS);\n+                  Post_Id := Scope (Post_Id);\n                end if;\n             end loop;\n \n-            PS := Scope (CS);\n+            Subp_Id := Scope (Post_Id);\n \n-            if Chars (CS) = Name_uPostconditions\n-              and then Ekind (PS) = E_Function\n+            if Chars (Post_Id) = Name_uPostconditions\n+              and then Ekind (Subp_Id) = E_Function\n             then\n                --  Check OK prefix\n \n                if Nkind_In (P, N_Identifier, N_Operator_Symbol)\n-                 and then Chars (P) = Chars (PS)\n+                 and then Chars (P) = Chars (Subp_Id)\n                then\n                   null;\n \n@@ -5182,18 +5192,18 @@ package body Sem_Attr is\n                elsif Is_Entity_Name (P)\n                  and then Ekind (Entity (P)) = E_Function\n                  and then Present (Alias (Entity (P)))\n-                 and then Chars (Alias (Entity (P))) = Chars (PS)\n+                 and then Chars (Alias (Entity (P))) = Chars (Subp_Id)\n                then\n                   null;\n \n                else\n-                  Error_Msg_Name_2 := Chars (PS);\n+                  Error_Msg_Name_2 := Chars (Subp_Id);\n                   Error_Attr\n                     (\"incorrect prefix for % attribute, expected %\", P);\n                end if;\n \n                Rewrite (N, Make_Identifier (Sloc (N), Name_uResult));\n-               Analyze_And_Resolve (N, Etype (PS));\n+               Analyze_And_Resolve (N, Etype (Subp_Id));\n \n             else\n                Error_Attr"}]}