{"sha": "294973a49751a7fc2d6a7a9f2749ce851a368c04", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjk0OTczYTQ5NzUxYTdmYzJkNmE3YTlmMjc0OWNlODUxYTM2OGMwNA==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2018-10-18T08:18:42Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2018-10-18T08:18:42Z"}, "message": "Simplify subreg of vec_merge of vec_duplicate\n\nWe can simplify\n\n  (subreg (vec_merge (vec_duplicate X)\n\t\t     (vector)\n\t\t     (const_int ((1 << N) | M)))\n\t  (N * sizeof (X)))\n\nto X when mode of X is the same as of mode of subreg.\n\ngcc/\n\n\tPR target/87537\n\t* simplify-rtx.c (simplify_subreg): Simplify subreg of vec_merge\n\tof vec_duplicate.\n\t(test_vector_ops_duplicate): Add test for a scalar subreg of a\n\tVEC_MERGE of a VEC_DUPLICATE.\n\ngcc/testsuite/\n\n\tPR target/87537\n\t* gcc.target/i386/pr87537-1.c: New test.\n\nFrom-SVN: r265260", "tree": {"sha": "3a5176da419a68ba632eb29ab9f43065afcc053e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a5176da419a68ba632eb29ab9f43065afcc053e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/294973a49751a7fc2d6a7a9f2749ce851a368c04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/294973a49751a7fc2d6a7a9f2749ce851a368c04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/294973a49751a7fc2d6a7a9f2749ce851a368c04", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/294973a49751a7fc2d6a7a9f2749ce851a368c04/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7702ab653a903d5131bf72244ae22424ffd2e6c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7702ab653a903d5131bf72244ae22424ffd2e6c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7702ab653a903d5131bf72244ae22424ffd2e6c7"}], "stats": {"total": 54, "additions": 53, "deletions": 1}, "files": [{"sha": "41a1dd13b6761b3831a4edbcbad9a76cbe58ab60", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/294973a49751a7fc2d6a7a9f2749ce851a368c04/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/294973a49751a7fc2d6a7a9f2749ce851a368c04/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=294973a49751a7fc2d6a7a9f2749ce851a368c04", "patch": "@@ -1,3 +1,11 @@\n+2018-10-18  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/87537\n+\t* simplify-rtx.c (simplify_subreg): Simplify subreg of vec_merge\n+\tof vec_duplicate.\n+\t(test_vector_ops_duplicate): Add test for a scalar subreg of a\n+\tVEC_MERGE of a VEC_DUPLICATE.\n+\n 2018-10-17  Joseph Myers  <joseph@codesourcery.com>\n \n \t* doc/cpp.texi (__STDC_VERSION__): Document C2X handling."}, {"sha": "b0cf3bbb2a91fc866b3011279d3b47324aedf941", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/294973a49751a7fc2d6a7a9f2749ce851a368c04/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/294973a49751a7fc2d6a7a9f2749ce851a368c04/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=294973a49751a7fc2d6a7a9f2749ce851a368c04", "patch": "@@ -6601,6 +6601,21 @@ simplify_subreg (machine_mode outermode, rtx op,\n       return NULL_RTX;\n     }\n \n+  /* Return X for\n+\t(subreg (vec_merge (vec_duplicate X)\n+\t\t\t   (vector)\n+\t\t\t   (const_int ((1 << N) | M)))\n+\t\t(N * sizeof (X)))\n+   */\n+  unsigned int idx;\n+  if (constant_multiple_p (byte, GET_MODE_SIZE (outermode), &idx)\n+      && GET_CODE (op) == VEC_MERGE\n+      && GET_CODE (XEXP (op, 0)) == VEC_DUPLICATE\n+      && GET_MODE (XEXP (XEXP (op, 0), 0)) == outermode\n+      && CONST_INT_P (XEXP (op, 2))\n+      && (UINTVAL (XEXP (op, 2)) & (HOST_WIDE_INT_1U << idx)) != 0)\n+    return XEXP (XEXP (op, 0), 0);\n+\n   /* A SUBREG resulting from a zero extension may fold to zero if\n      it extracts higher bits that the ZERO_EXTEND's source bits.  */\n   if (GET_CODE (op) == ZERO_EXTEND && SCALAR_INT_MODE_P (innermode))\n@@ -6831,15 +6846,27 @@ test_vector_ops_duplicate (machine_mode mode, rtx scalar_reg)\n \t\t     simplify_binary_operation (VEC_SELECT, inner_mode,\n \t\t\t\t\t\tduplicate, zero_par));\n \n-  /* And again with the final element.  */\n   unsigned HOST_WIDE_INT const_nunits;\n   if (nunits.is_constant (&const_nunits))\n     {\n+      /* And again with the final element.  */\n       rtx last_index = gen_int_mode (const_nunits - 1, word_mode);\n       rtx last_par = gen_rtx_PARALLEL (VOIDmode, gen_rtvec (1, last_index));\n       ASSERT_RTX_PTR_EQ (scalar_reg,\n \t\t\t simplify_binary_operation (VEC_SELECT, inner_mode,\n \t\t\t\t\t\t    duplicate, last_par));\n+\n+      /* Test a scalar subreg of a VEC_MERGE of a VEC_DUPLICATE.  */\n+      rtx vector_reg = make_test_reg (mode);\n+      for (unsigned HOST_WIDE_INT i = 0; i < const_nunits; i++)\n+\t{\n+\t  rtx mask = GEN_INT ((HOST_WIDE_INT_1U << i) | (i + 1));\n+\t  rtx vm = gen_rtx_VEC_MERGE (mode, duplicate, vector_reg, mask);\n+\t  poly_uint64 offset = i * GET_MODE_SIZE (inner_mode);\n+\t  ASSERT_RTX_EQ (scalar_reg,\n+\t\t\t simplify_gen_subreg (inner_mode, vm,\n+\t\t\t\t\t      mode, offset));\n+\t}\n     }\n \n   /* Test a scalar subreg of a VEC_DUPLICATE.  */"}, {"sha": "5e1ad063d9b7ea56b3613b93ef2b5502fff94b93", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/294973a49751a7fc2d6a7a9f2749ce851a368c04/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/294973a49751a7fc2d6a7a9f2749ce851a368c04/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=294973a49751a7fc2d6a7a9f2749ce851a368c04", "patch": "@@ -1,3 +1,8 @@\n+2018-10-18  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/87537\n+\t* gcc.target/i386/pr87537-1.c: New test.\n+\n 2018-10-17  Joseph Myers  <joseph@codesourcery.com>\n \n \t* gcc.dg/c11-static-assert-7.c, gcc.dg/c11-static-assert-8.c,"}, {"sha": "df849b032e70f7960a44c7c8717f8a88c1474bcb", "filename": "gcc/testsuite/gcc.target/i386/pr87537-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/294973a49751a7fc2d6a7a9f2749ce851a368c04/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr87537-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/294973a49751a7fc2d6a7a9f2749ce851a368c04/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr87537-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr87537-1.c?ref=294973a49751a7fc2d6a7a9f2749ce851a368c04", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vbroadcastss\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]\" 1 } } */\n+/* { dg-final { scan-assembler-not \"vmovss\" } } */\n+\n+#include <immintrin.h>\n+\n+__m128\n+foo (float *x)\n+{\n+  return _mm_broadcastss_ps(_mm_load_ss(x));\n+}"}]}