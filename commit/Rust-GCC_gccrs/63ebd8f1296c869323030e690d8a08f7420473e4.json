{"sha": "63ebd8f1296c869323030e690d8a08f7420473e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjNlYmQ4ZjEyOTZjODY5MzIzMDMwZTY5MGQ4YTA4Zjc0MjA0NzNlNA==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2013-09-24T10:07:32Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2013-09-24T10:07:32Z"}, "message": "re PR libstdc++/58338 (Add noexcept to functions with a narrow contract)\n\n2013-09-24  Marc Glisse  <marc.glisse@inria.fr>\n\n\tPR libstdc++/58338\n\tPR libstdc++/56166\n\t* include/bits/basic_string.h (basic_string)\n\t[basic_string(basic_string&&)]: Make the noexcept conditional.\n\t[operator=(basic_string&&), assign(basic_string&&)]: Link to PR 58265.\n\t[begin(), end(), rbegin(), rend(), clear]: Remove noexcept.\n\t[pop_back]: Comment on the lack of noexcept.\n\t* include/debug/string (basic_string) [basic_string(const _Allocator&),\n\tbasic_string(basic_string&&), begin(), end(), rbegin(), rend(), clear,\n\toperator[](size_type), pop_back]: Comment out noexcept, until vstring\n\treplaces basic_string.\n\nFrom-SVN: r202861", "tree": {"sha": "b4a6a285c27e4bcedd14b41127426172ff244e2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b4a6a285c27e4bcedd14b41127426172ff244e2a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/63ebd8f1296c869323030e690d8a08f7420473e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63ebd8f1296c869323030e690d8a08f7420473e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63ebd8f1296c869323030e690d8a08f7420473e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63ebd8f1296c869323030e690d8a08f7420473e4/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fae205619dc764c52155676b5fe251be579eb699", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fae205619dc764c52155676b5fe251be579eb699", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fae205619dc764c52155676b5fe251be579eb699"}], "stats": {"total": 51, "additions": 35, "deletions": 16}, "files": [{"sha": "2cff0aba190fb88bb9323853f0248b7eff2f1ff2", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63ebd8f1296c869323030e690d8a08f7420473e4/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63ebd8f1296c869323030e690d8a08f7420473e4/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=63ebd8f1296c869323030e690d8a08f7420473e4", "patch": "@@ -1,3 +1,17 @@\n+2013-09-24  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR libstdc++/58338\n+\tPR libstdc++/56166\n+\t* include/bits/basic_string.h (basic_string)\n+\t[basic_string(basic_string&&)]: Make the noexcept conditional.\n+\t[operator=(basic_string&&), assign(basic_string&&)]: Link to PR 58265.\n+\t[begin(), end(), rbegin(), rend(), clear]: Remove noexcept.\n+\t[pop_back]: Comment on the lack of noexcept.\n+\t* include/debug/string (basic_string) [basic_string(const _Allocator&),\n+\tbasic_string(basic_string&&), begin(), end(), rbegin(), rend(), clear,\n+\toperator[](size_type), pop_back]: Comment out noexcept, until vstring\n+\treplaces basic_string.\n+\n 2013-09-24  Tim Shen  <timshen91@gmail.com>\n \n \t* include/Makefile.am: Add regex.tcc."}, {"sha": "db01eb7dace365cc3c9a9feddfe4a31b6a234121", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63ebd8f1296c869323030e690d8a08f7420473e4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63ebd8f1296c869323030e690d8a08f7420473e4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=63ebd8f1296c869323030e690d8a08f7420473e4", "patch": "@@ -509,7 +509,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  The newly-created string contains the exact contents of @a __str.\n        *  @a __str is a valid, but unspecified string.\n        **/\n-      basic_string(basic_string&& __str) noexcept\n+      basic_string(basic_string&& __str)\n+#if _GLIBCXX_FULLY_DYNAMIC_STRING == 0\n+      noexcept // FIXME C++11: should always be noexcept.\n+#endif\n       : _M_dataplus(__str._M_dataplus)\n       {\n #if _GLIBCXX_FULLY_DYNAMIC_STRING == 0\n@@ -581,6 +584,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  The contents of @a str are moved into this string (without copying).\n        *  @a str is a valid, but unspecified string.\n        **/\n+      // PR 58265, this should be noexcept.\n       basic_string&\n       operator=(basic_string&& __str)\n       {\n@@ -607,7 +611,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  the %string.  Unshares the string.\n        */\n       iterator\n-      begin() _GLIBCXX_NOEXCEPT\n+      begin() // FIXME C++11: should be noexcept.\n       {\n \t_M_leak();\n \treturn iterator(_M_data());\n@@ -626,7 +630,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  character in the %string.  Unshares the string.\n        */\n       iterator\n-      end() _GLIBCXX_NOEXCEPT\n+      end() // FIXME C++11: should be noexcept.\n       {\n \t_M_leak();\n \treturn iterator(_M_data() + this->size());\n@@ -646,7 +650,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  order.  Unshares the string.\n        */\n       reverse_iterator\n-      rbegin() _GLIBCXX_NOEXCEPT\n+      rbegin() // FIXME C++11: should be noexcept.\n       { return reverse_iterator(this->end()); }\n \n       /**\n@@ -664,7 +668,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  element order.  Unshares the string.\n        */\n       reverse_iterator\n-      rend() _GLIBCXX_NOEXCEPT\n+      rend() // FIXME C++11: should be noexcept.\n       { return reverse_iterator(this->begin()); }\n \n       /**\n@@ -806,7 +810,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        */\n       // PR 56166: this should not throw.\n       void\n-      clear() _GLIBCXX_NOEXCEPT\n+      clear()\n       { _M_mutate(0, this->size(), 0); }\n \n       /**\n@@ -1088,6 +1092,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  This function sets this string to the exact contents of @a __str.\n        *  @a __str is a valid, but unspecified string.\n        */\n+      // PR 58265, this should be noexcept.\n       basic_string&\n       assign(basic_string&& __str)\n       {\n@@ -1417,7 +1422,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  The string must be non-empty.\n        */\n       void\n-      pop_back()\n+      pop_back() // FIXME C++11: should be noexcept.\n       { erase(size()-1, 1); }\n #endif // C++11\n "}, {"sha": "6d2c5395ade2adee636ee0b3e545d56a8f50e306", "filename": "libstdc++-v3/include/debug/string", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63ebd8f1296c869323030e690d8a08f7420473e4/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63ebd8f1296c869323030e690d8a08f7420473e4/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring?ref=63ebd8f1296c869323030e690d8a08f7420473e4", "patch": "@@ -70,7 +70,7 @@ namespace __gnu_debug\n \n     // 21.3.1 construct/copy/destroy:\n     explicit basic_string(const _Allocator& __a = _Allocator())\n-    _GLIBCXX_NOEXCEPT\n+    // _GLIBCXX_NOEXCEPT\n     : _Base(__a)\n     { }\n \n@@ -114,7 +114,7 @@ namespace __gnu_debug\n       { }\n \n #if __cplusplus >= 201103L\n-    basic_string(basic_string&& __str) noexcept\n+    basic_string(basic_string&& __str) // noexcept\n     : _Base(std::move(__str))\n     { }\n \n@@ -172,31 +172,31 @@ namespace __gnu_debug\n \n     // 21.3.2 iterators:\n     iterator\n-    begin() _GLIBCXX_NOEXCEPT\n+    begin() // _GLIBCXX_NOEXCEPT\n     { return iterator(_Base::begin(), this); }\n \n     const_iterator\n     begin() const _GLIBCXX_NOEXCEPT\n     { return const_iterator(_Base::begin(), this); }\n \n     iterator\n-    end() _GLIBCXX_NOEXCEPT\n+    end() // _GLIBCXX_NOEXCEPT\n     { return iterator(_Base::end(), this); }\n \n     const_iterator\n     end() const _GLIBCXX_NOEXCEPT\n     { return const_iterator(_Base::end(), this); }\n \n     reverse_iterator\n-    rbegin() _GLIBCXX_NOEXCEPT\n+    rbegin() // _GLIBCXX_NOEXCEPT\n     { return reverse_iterator(end()); }\n \n     const_reverse_iterator\n     rbegin() const _GLIBCXX_NOEXCEPT\n     { return const_reverse_iterator(end()); }\n \n     reverse_iterator\n-    rend() _GLIBCXX_NOEXCEPT\n+    rend() // _GLIBCXX_NOEXCEPT\n     { return reverse_iterator(begin()); }\n \n     const_reverse_iterator\n@@ -258,7 +258,7 @@ namespace __gnu_debug\n     using _Base::reserve;\n \n     void\n-    clear() _GLIBCXX_NOEXCEPT\n+    clear() // _GLIBCXX_NOEXCEPT\n     {\n       _Base::clear();\n       this->_M_invalidate_all();\n@@ -279,7 +279,7 @@ namespace __gnu_debug\n     }\n \n     reference\n-    operator[](size_type __pos) _GLIBCXX_NOEXCEPT\n+    operator[](size_type __pos) // _GLIBCXX_NOEXCEPT\n     {\n #ifdef _GLIBCXX_DEBUG_PEDANTIC\n       __glibcxx_check_subscript(__pos);\n@@ -583,7 +583,7 @@ namespace __gnu_debug\n \n #if __cplusplus >= 201103L\n     void\n-    pop_back() noexcept\n+    pop_back() // noexcept\n     {\n       __glibcxx_check_nonempty();\n       _Base::pop_back();"}]}