{"sha": "3418f5e92a6071ffb4d877c1824b0cf0406dbfe1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQxOGY1ZTkyYTYwNzFmZmI0ZDg3N2MxODI0YjBjZjA0MDZkYmZlMQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2014-04-14T14:18:26Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2014-04-14T14:18:26Z"}, "message": "snames.ads-tmpl (Name_Ivdep): New pragma-related name.\n\n\t* snames.ads-tmpl (Name_Ivdep): New pragma-related name.\n\t* sem_prag.adb (Analyze_Pragma) <Pragma_Loop_Optimize>: Add support\n\tfor Ivdep hint.\n\t* gnat_rm.texi (Implementation Defined Pragmas): Document new Ivdep\n\thint for Loop_Optimize.\n\t* gnat_ugn.texi (Vectorization of loops): Mention new Ivdep hint.\n\t* gcc-interface/trans.c (Pragma_to_gnu) <Pragma_Loop_Optimize>: Deal\n\twith new Ivdep hint.\n\t* gcc-interface/ada-tree.h (LOOP_STMT_IVDEP): New macro.\n\t* gcc-interface/trans.c (Pragma_to_gnu) <Pragma_Loop_Optimize>: Deal\n\twith new Ivdep hint.\n\t(gnat_gimplify_stmt) <LOOP_STMT>: Propagate the loop hints.\n\nFrom-SVN: r209375", "tree": {"sha": "b966c153d01e685a86c6307ca5047e636042ea7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b966c153d01e685a86c6307ca5047e636042ea7b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3418f5e92a6071ffb4d877c1824b0cf0406dbfe1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3418f5e92a6071ffb4d877c1824b0cf0406dbfe1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3418f5e92a6071ffb4d877c1824b0cf0406dbfe1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3418f5e92a6071ffb4d877c1824b0cf0406dbfe1/comments", "author": null, "committer": null, "parents": [{"sha": "cddaefa37616be8fdc85d6e627962f828c75ae2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cddaefa37616be8fdc85d6e627962f828c75ae2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cddaefa37616be8fdc85d6e627962f828c75ae2b"}], "stats": {"total": 144, "additions": 129, "deletions": 15}, "files": [{"sha": "acf1987cebe3b4464abe45fc97806a249c3c0d91", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3418f5e92a6071ffb4d877c1824b0cf0406dbfe1/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3418f5e92a6071ffb4d877c1824b0cf0406dbfe1/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3418f5e92a6071ffb4d877c1824b0cf0406dbfe1", "patch": "@@ -1,3 +1,18 @@\n+2014-04-14  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* snames.ads-tmpl (Name_Ivdep): New pragma-related name.\n+\t* sem_prag.adb (Analyze_Pragma) <Pragma_Loop_Optimize>: Add support\n+\tfor Ivdep hint.\n+\t* gnat_rm.texi (Implementation Defined Pragmas): Document new Ivdep\n+\thint for Loop_Optimize.\n+\t* gnat_ugn.texi (Vectorization of loops): Mention new Ivdep hint.\n+\t* gcc-interface/trans.c (Pragma_to_gnu) <Pragma_Loop_Optimize>: Deal\n+\twith new Ivdep hint.\n+\t* gcc-interface/ada-tree.h (LOOP_STMT_IVDEP): New macro.\n+\t* gcc-interface/trans.c (Pragma_to_gnu) <Pragma_Loop_Optimize>: Deal\n+\twith new Ivdep hint.\n+\t(gnat_gimplify_stmt) <LOOP_STMT>: Propagate the loop hints.\n+\n 2014-04-14  Eric Botcazou  <ebotcazou@adacore.com>\n             Robert Dewar  <dewar@adacore.com>\n "}, {"sha": "5ea386f860c3b55b4fa4f18e887876ebf8aa19b1", "filename": "gcc/ada/gcc-interface/ada-tree.h", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3418f5e92a6071ffb4d877c1824b0cf0406dbfe1/gcc%2Fada%2Fgcc-interface%2Fada-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3418f5e92a6071ffb4d877c1824b0cf0406dbfe1/gcc%2Fada%2Fgcc-interface%2Fada-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fada-tree.h?ref=3418f5e92a6071ffb4d877c1824b0cf0406dbfe1", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                              C Header File                               *\n  *                                                                          *\n- *          Copyright (C) 1992-2013, Free Software Foundation, Inc.         *\n+ *          Copyright (C) 1992-2014, Free Software Foundation, Inc.         *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -504,10 +504,11 @@ do {\t\t\t\t\t\t   \\\n #define LOOP_STMT_TOP_UPDATE_P(NODE)  TREE_LANG_FLAG_1 (LOOP_STMT_CHECK (NODE))\n \n /* Optimization hints on loops.  */\n-#define LOOP_STMT_NO_UNROLL(NODE) TREE_LANG_FLAG_2 (LOOP_STMT_CHECK (NODE))\n-#define LOOP_STMT_UNROLL(NODE)    TREE_LANG_FLAG_3 (LOOP_STMT_CHECK (NODE))\n-#define LOOP_STMT_NO_VECTOR(NODE) TREE_LANG_FLAG_4 (LOOP_STMT_CHECK (NODE))\n-#define LOOP_STMT_VECTOR(NODE)    TREE_LANG_FLAG_5 (LOOP_STMT_CHECK (NODE))\n+#define LOOP_STMT_IVDEP(NODE)     TREE_LANG_FLAG_2 (LOOP_STMT_CHECK (NODE))\n+#define LOOP_STMT_NO_UNROLL(NODE) TREE_LANG_FLAG_3 (LOOP_STMT_CHECK (NODE))\n+#define LOOP_STMT_UNROLL(NODE)    TREE_LANG_FLAG_4 (LOOP_STMT_CHECK (NODE))\n+#define LOOP_STMT_NO_VECTOR(NODE) TREE_LANG_FLAG_5 (LOOP_STMT_CHECK (NODE))\n+#define LOOP_STMT_VECTOR(NODE)    TREE_LANG_FLAG_6 (LOOP_STMT_CHECK (NODE))\n \n #define EXIT_STMT_COND(NODE)     TREE_OPERAND_CHECK_CODE (NODE, EXIT_STMT, 0)\n #define EXIT_STMT_LABEL(NODE)    TREE_OPERAND_CHECK_CODE (NODE, EXIT_STMT, 1)"}, {"sha": "3ab503fb14bc4df1623d83d00ed97477c209ebac", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3418f5e92a6071ffb4d877c1824b0cf0406dbfe1/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3418f5e92a6071ffb4d877c1824b0cf0406dbfe1/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=3418f5e92a6071ffb4d877c1824b0cf0406dbfe1", "patch": "@@ -1268,10 +1268,14 @@ Pragma_to_gnu (Node_Id gnat_node)\n \t   Present (gnat_temp);\n \t   gnat_temp = Next (gnat_temp))\n \t{\n-\t  tree gnu_loop_stmt = gnu_loop_stack ->last ()->stmt;\n+\t  tree gnu_loop_stmt = gnu_loop_stack->last ()->stmt;\n \n \t  switch (Chars (Expression (gnat_temp)))\n \t    {\n+\t    case Name_Ivdep:\n+\t      LOOP_STMT_IVDEP (gnu_loop_stmt) = 1;\n+\t      break;\n+\n \t    case Name_No_Unroll:\n \t      LOOP_STMT_NO_UNROLL (gnu_loop_stmt) = 1;\n \t      break;\n@@ -7747,13 +7751,20 @@ gnat_gimplify_stmt (tree *stmt_p)\n \ttree gnu_cond = LOOP_STMT_COND (stmt);\n \ttree gnu_update = LOOP_STMT_UPDATE (stmt);\n \ttree gnu_end_label = LOOP_STMT_LABEL (stmt);\n-\ttree t;\n \n \t/* Build the condition expression from the test, if any.  */\n \tif (gnu_cond)\n-\t  gnu_cond\n-\t    = build3 (COND_EXPR, void_type_node, gnu_cond, alloc_stmt_list (),\n-\t\t      build1 (GOTO_EXPR, void_type_node, gnu_end_label));\n+\t  {\n+\t    /* Deal with the optimization hints.  */\n+\t    if (LOOP_STMT_IVDEP (stmt))\n+\t      gnu_cond = build2 (ANNOTATE_EXPR, TREE_TYPE (gnu_cond), gnu_cond,\n+\t\t\t\t build_int_cst (integer_type_node,\n+\t\t\t\t\t\tannot_expr_ivdep_kind));\n+\n+\t    gnu_cond\n+\t      = build3 (COND_EXPR, void_type_node, gnu_cond, NULL_TREE,\n+\t\t\tbuild1 (GOTO_EXPR, void_type_node, gnu_end_label));\n+\t  }\n \n \t/* Set to emit the statements of the loop.  */\n \t*stmt_p = NULL_TREE;\n@@ -7782,7 +7793,7 @@ gnat_gimplify_stmt (tree *stmt_p)\n         if (gnu_update && !LOOP_STMT_TOP_UPDATE_P (stmt))\n \t  append_to_statement_list (gnu_update, stmt_p);\n \n-\tt = build1 (GOTO_EXPR, void_type_node, gnu_start_label);\n+\ttree t = build1 (GOTO_EXPR, void_type_node, gnu_start_label);\n \tSET_EXPR_LOCATION (t, DECL_SOURCE_LOCATION (gnu_end_label));\n \tappend_to_statement_list (t, stmt_p);\n "}, {"sha": "34ac0e17aa9f89a3ad470c96cf19a2fd013c5c25", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3418f5e92a6071ffb4d877c1824b0cf0406dbfe1/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3418f5e92a6071ffb4d877c1824b0cf0406dbfe1/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=3418f5e92a6071ffb4d877c1824b0cf0406dbfe1", "patch": "@@ -4417,7 +4417,7 @@ Syntax:\n @smallexample @c ada\n pragma Loop_Optimize (OPTIMIZATION_HINT @{, OPTIMIZATION_HINT@});\n \n-OPTIMIZATION_HINT ::= No_Unroll | Unroll | No_Vector | Vector\n+OPTIMIZATION_HINT ::= Ivdep | No_Unroll | Unroll | No_Vector | Vector\n @end smallexample\n \n @noindent\n@@ -4426,8 +4426,13 @@ programmer to specify optimization hints for the enclosing loop.  The hints\n are not mutually exclusive and can be freely mixed, but not all combinations\n will yield a sensible outcome.\n \n-There are four supported optimization hints for a loop:\n+There are five supported optimization hints for a loop:\n+\n @itemize @bullet\n+@item Ivdep\n+\n+The programmer asserts that there are no loop-carried dependencies which would prevent consecutive iterations of the loop from being executed simultaneously.\n+\n @item No_Unroll\n \n The loop must not be unrolled.  This is a strong hint: the compiler will not"}, {"sha": "2d9c61865d9dbbd1b97e8cb7841148ca55d49c4c", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3418f5e92a6071ffb4d877c1824b0cf0406dbfe1/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3418f5e92a6071ffb4d877c1824b0cf0406dbfe1/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=3418f5e92a6071ffb4d877c1824b0cf0406dbfe1", "patch": "@@ -10780,6 +10780,38 @@ preferably to other optimizations by means of pragma @code{Loop_Optimize}:\n placed immediately within the loop will convey the appropriate hint to the\n compiler for this loop.\n \n+It is also possible to help the compiler generate better vectorized code\n+for a given loop by asserting that there are no loop-carried dependencies\n+in the loop.  Consider for example the procedure:\n+\n+@smallexample @c ada\n+  type Arr is array (1 .. 4) of Long_Float;\n+\n+  procedure Add (X, Y : not null access Arr; R : not null access Arr) is\n+  begin\n+    for I in Arr'Range loop\n+      R(I) := X(I) + Y(I);\n+    end loop;\n+  end;\n+@end smallexample\n+\n+@noindent\n+By default, the compiler cannot unconditionally vectorize the loop because\n+assigning to a component of the array designated by R in one iteration could\n+change the value read from the components of the arrays designated by X or Y\n+in a later iteration.  As a result, the compiler will generate two versions\n+of the loop in the object code, one vectorized and the other not vectorized,\n+as well as a test to select the appropriate version at run time.  This can\n+be overcome by another hint:\n+\n+@smallexample @c ada\n+  pragma Loop_Optimize (Ivdep);\n+@end smallexample\n+\n+@noindent\n+placed immediately within the loop will tell the compiler that it can safely\n+omit the non-vectorized version of the loop as well as the run-time test.\n+\n @node Other Optimization Switches\n @subsection Other Optimization Switches\n @cindex Optimization Switches"}, {"sha": "42f080de4da7a66ba4e584b46cfdf102913ae496", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3418f5e92a6071ffb4d877c1824b0cf0406dbfe1/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3418f5e92a6071ffb4d877c1824b0cf0406dbfe1/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=3418f5e92a6071ffb4d877c1824b0cf0406dbfe1", "patch": "@@ -16560,7 +16560,8 @@ package body Sem_Prag is\n \n          --  pragma Loop_Optimize ( OPTIMIZATION_HINT {, OPTIMIZATION_HINT } );\n \n-         --  OPTIMIZATION_HINT ::= No_Unroll | Unroll | No_Vector | Vector\n+         --  OPTIMIZATION_HINT ::=\n+         --    Ivdep | No_Unroll | Unroll | No_Vector | Vector\n \n          when Pragma_Loop_Optimize => Loop_Optimize : declare\n             Hint : Node_Id;\n@@ -16572,7 +16573,7 @@ package body Sem_Prag is\n \n             Hint := First (Pragma_Argument_Associations (N));\n             while Present (Hint) loop\n-               Check_Arg_Is_One_Of (Hint,\n+               Check_Arg_Is_One_Of (Hint, Name_Ivdep,\n                  Name_No_Unroll, Name_Unroll, Name_No_Vector, Name_Vector);\n                Next (Hint);\n             end loop;"}, {"sha": "b4fcb54ccb236376dc6a556320ffa1618c2d3395", "filename": "gcc/ada/snames.ads-tmpl", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3418f5e92a6071ffb4d877c1824b0cf0406dbfe1/gcc%2Fada%2Fsnames.ads-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3418f5e92a6071ffb4d877c1824b0cf0406dbfe1/gcc%2Fada%2Fsnames.ads-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads-tmpl?ref=3418f5e92a6071ffb4d877c1824b0cf0406dbfe1", "patch": "@@ -730,6 +730,7 @@ package Snames is\n    Name_Increases                      : constant Name_Id := N + $;\n    Name_Info                           : constant Name_Id := N + $;\n    Name_Internal                       : constant Name_Id := N + $;\n+   Name_Ivdep                          : constant Name_Id := N + $;\n    Name_Link_Name                      : constant Name_Id := N + $;\n    Name_Lowercase                      : constant Name_Id := N + $;\n    Name_Max_Entry_Queue_Depth          : constant Name_Id := N + $;"}, {"sha": "deada3ec6cfc1023c8eaf4dd66176a407f7297af", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3418f5e92a6071ffb4d877c1824b0cf0406dbfe1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3418f5e92a6071ffb4d877c1824b0cf0406dbfe1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3418f5e92a6071ffb4d877c1824b0cf0406dbfe1", "patch": "@@ -1,3 +1,7 @@\n+2014-04-14  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/vect11.ad[sb]: New test.\n+\n 2014-04-14  Richard Biener  <rguenther@suse.de>\n \n \t* g++.dg/tree-ssa/forwprop-switch.C: New testcase."}, {"sha": "c8c8a0cb6ebcf70052fbac87011587665cda13b4", "filename": "gcc/testsuite/gnat.dg/vect11.adb", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3418f5e92a6071ffb4d877c1824b0cf0406dbfe1/gcc%2Ftestsuite%2Fgnat.dg%2Fvect11.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3418f5e92a6071ffb4d877c1824b0cf0406dbfe1/gcc%2Ftestsuite%2Fgnat.dg%2Fvect11.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fvect11.adb?ref=3418f5e92a6071ffb4d877c1824b0cf0406dbfe1", "patch": "@@ -0,0 +1,33 @@\n+-- { dg-do compile { target i?86-*-* x86_64-*-* } }\n+-- { dg-options \"-O3 -msse2 -fdump-tree-optimized\" }\n+\n+package body Vect11 is\n+\n+   function \"+\" (X, Y : Sarray) return Sarray is\n+      R : Sarray;\n+   begin\n+      for I in Sarray'Range loop\n+         R(I) := X(I) + Y(I);\n+      end loop;\n+      return R;\n+   end;\n+\n+   procedure Add (X, Y : Sarray; R : out Sarray) is\n+   begin\n+      for I in Sarray'Range loop\n+         R(I) := X(I) + Y(I);\n+      end loop;\n+   end;\n+\n+   procedure Add (X, Y : not null access Sarray; R : not null access Sarray) is\n+   begin\n+      for I in Sarray'Range loop\n+         pragma Loop_Optimize (Ivdep);\n+         R(I) := X(I) + Y(I);\n+      end loop;\n+   end;\n+\n+end Vect11;\n+\n+-- { dg-final { scan-tree-dump-not \"goto\" \"optimized\" } }\n+-- { dg-final { cleanup-tree-dump \"optimized\" } }"}, {"sha": "f3ceac111a1ea5494c013b959e52ff6cf8aafc9e", "filename": "gcc/testsuite/gnat.dg/vect11.ads", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3418f5e92a6071ffb4d877c1824b0cf0406dbfe1/gcc%2Ftestsuite%2Fgnat.dg%2Fvect11.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3418f5e92a6071ffb4d877c1824b0cf0406dbfe1/gcc%2Ftestsuite%2Fgnat.dg%2Fvect11.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fvect11.ads?ref=3418f5e92a6071ffb4d877c1824b0cf0406dbfe1", "patch": "@@ -0,0 +1,11 @@\n+package Vect11 is\n+\n+   -- Constrained array types are vectorizable\n+   type Sarray is array (1 .. 4) of Float;\n+   for Sarray'Alignment use 16;\n+\n+   function \"+\" (X, Y : Sarray) return Sarray;\n+   procedure Add (X, Y : Sarray; R : out Sarray);\n+   procedure Add (X, Y : not null access Sarray; R : not null access Sarray);\n+\n+end Vect11;"}]}