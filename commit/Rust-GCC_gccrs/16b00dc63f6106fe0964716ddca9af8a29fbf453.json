{"sha": "16b00dc63f6106fe0964716ddca9af8a29fbf453", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTZiMDBkYzYzZjYxMDZmZTA5NjQ3MTZkZGNhOWFmOGEyOWZiZjQ1Mw==", "commit": {"author": {"name": "Seija Kijin", "email": "doremylover456@gmail.com", "date": "2020-11-13T18:51:27Z"}, "committer": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2020-11-13T18:53:16Z"}, "message": "Make strstr.c in libiberty ANSI compliant\n\nlibiberty/\n\n\t* strstr.c (strstr): Make implementation ANSI/POSIX compliant.", "tree": {"sha": "2e9b9c62281ff5588d50f5ca95e2a3cac66c5fd2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e9b9c62281ff5588d50f5ca95e2a3cac66c5fd2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/16b00dc63f6106fe0964716ddca9af8a29fbf453", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16b00dc63f6106fe0964716ddca9af8a29fbf453", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16b00dc63f6106fe0964716ddca9af8a29fbf453", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16b00dc63f6106fe0964716ddca9af8a29fbf453/comments", "author": null, "committer": null, "parents": [{"sha": "d50310408f54e38031f34931e591c63ff36fee09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d50310408f54e38031f34931e591c63ff36fee09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d50310408f54e38031f34931e591c63ff36fee09"}], "stats": {"total": 16, "additions": 5, "deletions": 11}, "files": [{"sha": "c6f68495a33d124cec901251812150c52e2d0ea3", "filename": "libiberty/strstr.c", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16b00dc63f6106fe0964716ddca9af8a29fbf453/libiberty%2Fstrstr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16b00dc63f6106fe0964716ddca9af8a29fbf453/libiberty%2Fstrstr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fstrstr.c?ref=16b00dc63f6106fe0964716ddca9af8a29fbf453", "patch": "@@ -16,26 +16,20 @@ length, the function returns @var{string}.\n \n */\n \n-\n-/* FIXME:  The above description is ANSI compiliant.  This routine has not\n-   been validated to comply with it.  -fnf */\n-\n #include <stddef.h>\n \n-extern char *strchr (const char *, int);\n-extern int strncmp (const void *, const void *, size_t);\n+extern int memcmp (const void *, const void *, size_t);\n extern size_t strlen (const char *);\n \n char *\n strstr (const char *s1, const char *s2)\n {\n-  const char *p = s1;\n   const size_t len = strlen (s2);\n-\n-  for (; (p = strchr (p, *s2)) != 0; p++)\n+  while (*s1)\n     {\n-      if (strncmp (p, s2, len) == 0)\n-\treturn (char *)p;\n+      if (!memcmp (s1, s2, len))\n+\treturn (char *)s1;\n+      ++s1;\n     }\n   return (0);\n }"}]}