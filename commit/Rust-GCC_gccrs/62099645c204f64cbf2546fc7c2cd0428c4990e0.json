{"sha": "62099645c204f64cbf2546fc7c2cd0428c4990e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjIwOTk2NDVjMjA0ZjY0Y2JmMjU0NmZjN2MyY2QwNDI4YzQ5OTBlMA==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-09-03T09:55:11Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-09-03T15:19:54Z"}, "message": "Abstract PHI and forwarder block checks in jump threader.\n\nThis patch abstracts out a couple common idioms in the forward\nthreader that I found useful while navigating the code base.\n\nTested on x86-64 Linux.\n\ngcc/ChangeLog:\n\n\t* tree-ssa-threadedge.c (has_phis_p): New.\n\t(forwarder_block_p): New.\n\t(potentially_threadable_block): Call forwarder_block_p.\n\t(jump_threader::thread_around_empty_blocks): Call has_phis_p.\n\t(jump_threader::thread_through_normal_block): Call\n\tforwarder_block_p.", "tree": {"sha": "eae3c17da66219926e069f0d452518ccd4acd41e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eae3c17da66219926e069f0d452518ccd4acd41e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/62099645c204f64cbf2546fc7c2cd0428c4990e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62099645c204f64cbf2546fc7c2cd0428c4990e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62099645c204f64cbf2546fc7c2cd0428c4990e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62099645c204f64cbf2546fc7c2cd0428c4990e0/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "779275c0835b58325f806568836c8b5081d1f52f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/779275c0835b58325f806568836c8b5081d1f52f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/779275c0835b58325f806568836c8b5081d1f52f"}], "stats": {"total": 25, "additions": 19, "deletions": 6}, "files": [{"sha": "3db54a199fdc2452bf6b1016c8439d797f2edbc8", "filename": "gcc/tree-ssa-threadedge.c", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62099645c204f64cbf2546fc7c2cd0428c4990e0/gcc%2Ftree-ssa-threadedge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62099645c204f64cbf2546fc7c2cd0428c4990e0/gcc%2Ftree-ssa-threadedge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadedge.c?ref=62099645c204f64cbf2546fc7c2cd0428c4990e0", "patch": "@@ -95,6 +95,21 @@ jump_threader::thread_through_all_blocks (bool may_peel_loop_headers)\n   return m_registry->thread_through_all_blocks (may_peel_loop_headers);\n }\n \n+static inline bool\n+has_phis_p (basic_block bb)\n+{\n+  return !gsi_end_p (gsi_start_phis (bb));\n+}\n+\n+/* Return TRUE for a forwarder block which is defined as having PHIs\n+   but no instructions.  */\n+\n+static bool\n+forwarder_block_p (basic_block bb)\n+{\n+  return gsi_end_p (gsi_start_nondebug_bb (bb)) && has_phis_p (bb);\n+}\n+\n /* Return TRUE if we may be able to thread an incoming edge into\n    BB to an outgoing edge from BB.  Return FALSE otherwise.  */\n \n@@ -107,9 +122,8 @@ potentially_threadable_block (basic_block bb)\n      not optimized away because they forward from outside a loop\n      to the loop header.   We want to thread through them as we can\n      sometimes thread to the loop exit, which is obviously profitable.\n-     the interesting case here is when the block has PHIs.  */\n-  if (gsi_end_p (gsi_start_nondebug_bb (bb))\n-      && !gsi_end_p (gsi_start_phis (bb)))\n+     The interesting case here is when the block has PHIs.  */\n+  if (forwarder_block_p (bb))\n     return true;\n \n   /* If BB has a single successor or a single predecessor, then\n@@ -854,7 +868,7 @@ jump_threader::thread_around_empty_blocks (vec<jump_thread_edge *> *path,\n   /* The key property of these blocks is that they need not be duplicated\n      when threading.  Thus they cannot have visible side effects such\n      as PHI nodes.  */\n-  if (!gsi_end_p (gsi_start_phis (bb)))\n+  if (has_phis_p (bb))\n     return false;\n \n   /* Skip over DEBUG statements at the start of the block.  */\n@@ -994,8 +1008,7 @@ jump_threader::thread_through_normal_block (vec<jump_thread_edge *> *path,\n     {\n       /* First case.  The statement simply doesn't have any instructions, but\n \t does have PHIs.  */\n-      if (gsi_end_p (gsi_start_nondebug_bb (e->dest))\n-\t  && !gsi_end_p (gsi_start_phis (e->dest)))\n+      if (forwarder_block_p (e->dest))\n \treturn 0;\n \n       /* Second case.  */"}]}