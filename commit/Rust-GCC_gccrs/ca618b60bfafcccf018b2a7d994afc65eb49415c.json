{"sha": "ca618b60bfafcccf018b2a7d994afc65eb49415c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2E2MThiNjBiZmFmY2NjZjAxOGIyYTdkOTk0YWZjNjVlYjQ5NDE1Yw==", "commit": {"author": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2003-08-27T21:29:43Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2003-08-27T21:29:43Z"}, "message": "Makefile.am: Remove trailing whitespace.\n\n2003-08-27  Phil Edwards  <pme@gcc.gnu.org>\n\n\t* Makefile.am:  Remove trailing whitespace.  Remove needless\n\t\"foo = @foo@\" assignments.  Replace direct uses of @foo@ with $(foo).\n\t* include/Makefile.am:  Likewise.\n\t* libmath/Makefile.am:  Likewise.\n\t* libsupc++/Makefile.am:  Likewise.\n\t* po/Makefile.am:  Likewise.\n\t* src/Makefile.am:  Likewise.\n\t* testsuite/Makefile.am:  Likewise.\n\n\t* Makefile.in, include/Makefile.in, libmath/Makefile.in,\n\tlibsupc++/Makefile.in, po/Makefile.in, src/Makefile.in,\n\ttestsuite/Makefile.in:  Regenerated.\n\nFrom-SVN: r70865", "tree": {"sha": "5d6a0b7359774eca07febd48917298fb550e6aa3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d6a0b7359774eca07febd48917298fb550e6aa3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca618b60bfafcccf018b2a7d994afc65eb49415c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca618b60bfafcccf018b2a7d994afc65eb49415c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca618b60bfafcccf018b2a7d994afc65eb49415c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca618b60bfafcccf018b2a7d994afc65eb49415c/comments", "author": null, "committer": null, "parents": [{"sha": "138ca312d41bcfe98c0171f031c40303bb01a562", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/138ca312d41bcfe98c0171f031c40303bb01a562", "html_url": "https://github.com/Rust-GCC/gccrs/commit/138ca312d41bcfe98c0171f031c40303bb01a562"}], "stats": {"total": 299, "additions": 156, "deletions": 143}, "files": [{"sha": "b81e651190dafe2ef2c66795b294c106a4740e4c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca618b60bfafcccf018b2a7d994afc65eb49415c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca618b60bfafcccf018b2a7d994afc65eb49415c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ca618b60bfafcccf018b2a7d994afc65eb49415c", "patch": "@@ -1,3 +1,18 @@\n+2003-08-27  Phil Edwards  <pme@gcc.gnu.org>\n+\n+\t* Makefile.am:  Remove trailing whitespace.  Remove needless\n+\t\"foo = @foo@\" assignments.  Replace direct uses of @foo@ with $(foo).\n+\t* include/Makefile.am:  Likewise.\n+\t* libmath/Makefile.am:  Likewise.\n+\t* libsupc++/Makefile.am:  Likewise.\n+\t* po/Makefile.am:  Likewise.\n+\t* src/Makefile.am:  Likewise.\n+\t* testsuite/Makefile.am:  Likewise.\n+\n+\t* Makefile.in, include/Makefile.in, libmath/Makefile.in,\n+\tlibsupc++/Makefile.in, po/Makefile.in, src/Makefile.in,\n+\ttestsuite/Makefile.in:  Regenerated.\n+\n 2003-08-27  Phil Edwards  <pme@gcc.gnu.org>\n \n \t* acinclude.m4 (GLIBCXX_EXPORT_INCLUDES):  Change quoting of"}, {"sha": "040b8da7c9fc8ad0e53d3de995e615fb82b5242f", "filename": "libstdc++-v3/Makefile.am", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca618b60bfafcccf018b2a7d994afc65eb49415c/libstdc%2B%2B-v3%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca618b60bfafcccf018b2a7d994afc65eb49415c/libstdc%2B%2B-v3%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.am?ref=ca618b60bfafcccf018b2a7d994afc65eb49415c", "patch": "@@ -29,7 +29,7 @@ if GLIBCXX_HOSTED\n   hosted_source = src po\n endif\n ## Keep this list sync'd with acinclude.m4:GLIBCXX_CONFIGURE.\n-SUBDIRS = include libmath libsupc++ $(hosted_source) testsuite \n+SUBDIRS = include libmath libsupc++ $(hosted_source) testsuite\n \n # These rules are messy, but are hella worth it.\n doxygen:\n@@ -132,7 +132,7 @@ AM_MAKEFLAGS = \\\n \t\"NM_FOR_BUILD=$(NM_FOR_BUILD)\" \\\n \t\"NM_FOR_TARGET=$(NM_FOR_TARGET)\" \\\n \t\"DESTDIR=$(DESTDIR)\" \\\n-\t\"WERROR=$(WERROR)\" \n+\t\"WERROR=$(WERROR)\"\n \n # Subdir rules rely on $(FLAGS_TO_PASS)\n FLAGS_TO_PASS = $(AM_MAKEFLAGS)"}, {"sha": "b830f7418cec7eb4bf02d4a4463edab177e620a4", "filename": "libstdc++-v3/Makefile.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca618b60bfafcccf018b2a7d994afc65eb49415c/libstdc%2B%2B-v3%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca618b60bfafcccf018b2a7d994afc65eb49415c/libstdc%2B%2B-v3%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.in?ref=ca618b60bfafcccf018b2a7d994afc65eb49415c", "patch": "@@ -219,7 +219,7 @@ WARN_CXXFLAGS = \\\n # -I/-D flags to pass when compiling.\n AM_CPPFLAGS = $(GLIBCXX_INCLUDES)\n @GLIBCXX_HOSTED_TRUE@hosted_source = src po\n-SUBDIRS = include libmath libsupc++ $(hosted_source) testsuite \n+SUBDIRS = include libmath libsupc++ $(hosted_source) testsuite\n \n # Multilib support.\n MAKEOVERRIDES = \n@@ -273,7 +273,7 @@ AM_MAKEFLAGS = \\\n \t\"NM_FOR_BUILD=$(NM_FOR_BUILD)\" \\\n \t\"NM_FOR_TARGET=$(NM_FOR_TARGET)\" \\\n \t\"DESTDIR=$(DESTDIR)\" \\\n-\t\"WERROR=$(WERROR)\" \n+\t\"WERROR=$(WERROR)\"\n \n \n # Subdir rules rely on $(FLAGS_TO_PASS)"}, {"sha": "3a8bf72ade9240fa93ebb81be71a79dbdf346f82", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca618b60bfafcccf018b2a7d994afc65eb49415c/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca618b60bfafcccf018b2a7d994afc65eb49415c/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=ca618b60bfafcccf018b2a7d994afc65eb49415c", "patch": "@@ -225,7 +225,7 @@ ext_headers = \\\n \n \n # This is the common subset of files that all three \"C\" header models use.\n-c_base_srcdir = @C_INCLUDE_DIR@\n+c_base_srcdir = $(C_INCLUDE_DIR)\n c_base_builddir = .\n c_base_headers = \\\n \t${c_base_srcdir}/std_cassert.h \\\n@@ -304,19 +304,19 @@ else\n c_compatibility_headers_extra =\n endif\n \n-host_srcdir = ${glibcxx_srcdir}/@OS_INC_SRCDIR@\n+host_srcdir = ${glibcxx_srcdir}/$(OS_INC_SRCDIR)\n host_builddir = ./${host_alias}/bits\n host_headers = \\\n \t${host_srcdir}/ctype_base.h \\\n \t${host_srcdir}/ctype_inline.h \\\n \t${host_srcdir}/ctype_noninline.h \\\n \t${host_srcdir}/os_defines.h \\\n-\t${glibcxx_srcdir}/@ATOMICITY_INC_SRCDIR@/atomicity.h \\\n-\t${glibcxx_srcdir}/@FPOS_INC_SRCDIR@/fpos.h\n+\t${glibcxx_srcdir}/$(ATOMICITY_INC_SRCDIR)/atomicity.h \\\n+\t${glibcxx_srcdir}/$(FPOS_INC_SRCDIR)/fpos.h\n \n # Non-installed host_header files.\n host_headers_noinst = \\\n-\t${glibcxx_srcdir}/@CLOCALE_INTERNAL_H@\n+\t${glibcxx_srcdir}/$(CLOCALE_INTERNAL_H)\n \n # These host_headers_extra files are all built with ad hoc naming rules.\n host_headers_extra = \\\n@@ -441,13 +441,13 @@ stamp-host: ${host_headers} ${host_headers_noinst} stamp-${host_alias}\n \t@if [ ! -f stamp-host ]; then \\\n \t  (cd ${host_builddir} ;\\\n \t  $(LN_S) ${host_headers} . || true ;\\\n-\t  $(LN_S) ${glibcxx_srcdir}/@BASIC_FILE_H@ basic_file.h || true ;\\\n-\t  $(LN_S) ${glibcxx_srcdir}/@CSTDIO_H@ c++io.h || true ;\\\n-\t  $(LN_S) ${glibcxx_srcdir}/@CLOCALE_H@ c++locale.h || true ;\\\n-\t  $(LN_S) ${glibcxx_srcdir}/@CLOCALE_INTERNAL_H@ . || true ;\\\n-\t  $(LN_S) ${glibcxx_srcdir}/@CMESSAGES_H@ messages_members.h || true ;\\\n-\t  $(LN_S) ${glibcxx_srcdir}/@CTIME_H@ time_members.h || true ;\\\n-\t  $(LN_S) ${glibcxx_srcdir}/@CCODECVT_H@ codecvt_specializations.h || true);\\\n+\t  $(LN_S) ${glibcxx_srcdir}/$(BASIC_FILE_H) basic_file.h || true ;\\\n+\t  $(LN_S) ${glibcxx_srcdir}/$(CSTDIO_H) c++io.h || true ;\\\n+\t  $(LN_S) ${glibcxx_srcdir}/$(CLOCALE_H) c++locale.h || true ;\\\n+\t  $(LN_S) ${glibcxx_srcdir}/$(CLOCALE_INTERNAL_H) . || true ;\\\n+\t  $(LN_S) ${glibcxx_srcdir}/$(CMESSAGES_H) messages_members.h || true ;\\\n+\t  $(LN_S) ${glibcxx_srcdir}/$(CTIME_H) time_members.h || true ;\\\n+\t  $(LN_S) ${glibcxx_srcdir}/$(CCODECVT_H) codecvt_specializations.h || true);\\\n \tfi ;\\\n \t$(STAMP) stamp-host\n \n@@ -464,7 +464,6 @@ ${host_builddir}/c++config.h: ${top_builddir}/config.h \\\n \techo \"#endif // _CXXCONFIG_\" >>$@\n \n # Host includes for threads\n-glibcxx_thread_h = @glibcxx_thread_h@\n uppercase = [ABCDEFGHIJKLMNOPQRSTUVWXYZ_]\n \n ${host_builddir}/gthr.h: ${toplevel_srcdir}/gcc/gthr.h stamp-${host_alias}"}, {"sha": "35c724e6a276779d11384eafe4dab553f48a917e", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca618b60bfafcccf018b2a7d994afc65eb49415c/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca618b60bfafcccf018b2a7d994afc65eb49415c/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=ca618b60bfafcccf018b2a7d994afc65eb49415c", "patch": "@@ -166,8 +166,6 @@ glibcxx_builddir = @glibcxx_builddir@\n glibcxx_localedir = @glibcxx_localedir@\n glibcxx_prefixdir = @glibcxx_prefixdir@\n glibcxx_srcdir = @glibcxx_srcdir@\n-\n-# Host includes for threads\n glibcxx_thread_h = @glibcxx_thread_h@\n glibcxx_toolexecdir = @glibcxx_toolexecdir@\n glibcxx_toolexeclibdir = @glibcxx_toolexeclibdir@\n@@ -427,7 +425,7 @@ ext_headers = \\\n \n \n # This is the common subset of files that all three \"C\" header models use.\n-c_base_srcdir = @C_INCLUDE_DIR@\n+c_base_srcdir = $(C_INCLUDE_DIR)\n c_base_builddir = .\n c_base_headers = \\\n \t${c_base_srcdir}/std_cassert.h \\\n@@ -503,20 +501,20 @@ c_compatibility_headers = \\\n \n @GLIBCXX_C_HEADERS_COMPATIBILITY_TRUE@c_compatibility_headers_extra = ${c_compatibility_headers}\n \n-host_srcdir = ${glibcxx_srcdir}/@OS_INC_SRCDIR@\n+host_srcdir = ${glibcxx_srcdir}/$(OS_INC_SRCDIR)\n host_builddir = ./${host_alias}/bits\n host_headers = \\\n \t${host_srcdir}/ctype_base.h \\\n \t${host_srcdir}/ctype_inline.h \\\n \t${host_srcdir}/ctype_noninline.h \\\n \t${host_srcdir}/os_defines.h \\\n-\t${glibcxx_srcdir}/@ATOMICITY_INC_SRCDIR@/atomicity.h \\\n-\t${glibcxx_srcdir}/@FPOS_INC_SRCDIR@/fpos.h\n+\t${glibcxx_srcdir}/$(ATOMICITY_INC_SRCDIR)/atomicity.h \\\n+\t${glibcxx_srcdir}/$(FPOS_INC_SRCDIR)/fpos.h\n \n \n # Non-installed host_header files.\n host_headers_noinst = \\\n-\t${glibcxx_srcdir}/@CLOCALE_INTERNAL_H@\n+\t${glibcxx_srcdir}/$(CLOCALE_INTERNAL_H)\n \n \n # These host_headers_extra files are all built with ad hoc naming rules.\n@@ -560,6 +558,8 @@ allcreated = \\\n \t${thread_host_headers} \\\n \t${pch_build}\n \n+\n+# Host includes for threads\n uppercase = [ABCDEFGHIJKLMNOPQRSTUVWXYZ_]\n \n # By adding these files here, automake will remove them for 'make clean'\n@@ -796,13 +796,13 @@ stamp-host: ${host_headers} ${host_headers_noinst} stamp-${host_alias}\n \t@if [ ! -f stamp-host ]; then \\\n \t  (cd ${host_builddir} ;\\\n \t  $(LN_S) ${host_headers} . || true ;\\\n-\t  $(LN_S) ${glibcxx_srcdir}/@BASIC_FILE_H@ basic_file.h || true ;\\\n-\t  $(LN_S) ${glibcxx_srcdir}/@CSTDIO_H@ c++io.h || true ;\\\n-\t  $(LN_S) ${glibcxx_srcdir}/@CLOCALE_H@ c++locale.h || true ;\\\n-\t  $(LN_S) ${glibcxx_srcdir}/@CLOCALE_INTERNAL_H@ . || true ;\\\n-\t  $(LN_S) ${glibcxx_srcdir}/@CMESSAGES_H@ messages_members.h || true ;\\\n-\t  $(LN_S) ${glibcxx_srcdir}/@CTIME_H@ time_members.h || true ;\\\n-\t  $(LN_S) ${glibcxx_srcdir}/@CCODECVT_H@ codecvt_specializations.h || true);\\\n+\t  $(LN_S) ${glibcxx_srcdir}/$(BASIC_FILE_H) basic_file.h || true ;\\\n+\t  $(LN_S) ${glibcxx_srcdir}/$(CSTDIO_H) c++io.h || true ;\\\n+\t  $(LN_S) ${glibcxx_srcdir}/$(CLOCALE_H) c++locale.h || true ;\\\n+\t  $(LN_S) ${glibcxx_srcdir}/$(CLOCALE_INTERNAL_H) . || true ;\\\n+\t  $(LN_S) ${glibcxx_srcdir}/$(CMESSAGES_H) messages_members.h || true ;\\\n+\t  $(LN_S) ${glibcxx_srcdir}/$(CTIME_H) time_members.h || true ;\\\n+\t  $(LN_S) ${glibcxx_srcdir}/$(CCODECVT_H) codecvt_specializations.h || true);\\\n \tfi ;\\\n \t$(STAMP) stamp-host\n "}, {"sha": "091b4a46bd352ae0fd2d6a86e9ca6988534abdcf", "filename": "libstdc++-v3/libmath/Makefile.am", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca618b60bfafcccf018b2a7d994afc65eb49415c/libstdc%2B%2B-v3%2Flibmath%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca618b60bfafcccf018b2a7d994afc65eb49415c/libstdc%2B%2B-v3%2Flibmath%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2FMakefile.am?ref=ca618b60bfafcccf018b2a7d994afc65eb49415c", "patch": "@@ -26,7 +26,7 @@ mkinstalldirs = $(SHELL) $(toplevel_srcdir)/mkinstalldirs\n \n noinst_LTLIBRARIES = libmath.la\n \n-libmath_la_LIBADD = @LIBMATHOBJS@\n+libmath_la_LIBADD = $(LIBMATHOBJS)\n \n libmath_la_DEPENDENCIES = $(libmath_la_LIBADD)\n "}, {"sha": "f9023ffb051a989eaa22e0261827484722e2a84c", "filename": "libstdc++-v3/libmath/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca618b60bfafcccf018b2a7d994afc65eb49415c/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca618b60bfafcccf018b2a7d994afc65eb49415c/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in?ref=ca618b60bfafcccf018b2a7d994afc65eb49415c", "patch": "@@ -204,7 +204,7 @@ mkinstalldirs = $(SHELL) $(toplevel_srcdir)/mkinstalldirs\n \n noinst_LTLIBRARIES = libmath.la\n \n-libmath_la_LIBADD = @LIBMATHOBJS@\n+libmath_la_LIBADD = $(LIBMATHOBJS)\n \n libmath_la_DEPENDENCIES = $(libmath_la_LIBADD)\n "}, {"sha": "50727402c135d5f67e91491ac2dd091994ebd91f", "filename": "libstdc++-v3/libsupc++/Makefile.am", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca618b60bfafcccf018b2a7d994afc65eb49415c/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca618b60bfafcccf018b2a7d994afc65eb49415c/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am?ref=ca618b60bfafcccf018b2a7d994afc65eb49415c", "patch": "@@ -19,20 +19,20 @@\n ## You should have received a copy of the GNU General Public License\n ## along with GCC; see the file COPYING.  If not, write to\n ## the Free Software Foundation, 59 Temple Place - Suite 330,\n-## Boston, MA 02111-1307, USA. \n+## Boston, MA 02111-1307, USA.\n \n include $(top_srcdir)/fragment.am\n \n # Need this library to both be part of libstdc++.a, and installed\n # separately too.\n-# 1) separate libsupc++.la \n+# 1) separate libsupc++.la\n toolexeclib_LTLIBRARIES = libsupc++.la\n # 2) integrated libsupc++convenience.la that is to be a part of libstdc++.a\n noinst_LTLIBRARIES = libsupc++convenience.la\n \n \n headers = \\\n-\texception new typeinfo cxxabi.h exception_defines.h \n+\texception new typeinfo cxxabi.h exception_defines.h\n \n sources = \\\n \tdel_op.cc \\\n@@ -62,8 +62,8 @@ sources = \\\n \tvec.cc \\\n \tvterminate.cc\n \n-libsupc___la_SOURCES = $(sources) \n-libsupc__convenience_la_SOURCES = $(sources) \n+libsupc___la_SOURCES = $(sources)\n+libsupc__convenience_la_SOURCES = $(sources)\n \n glibcxxinstalldir = $(gxx_include_dir)\n glibcxxinstall_HEADERS = $(headers)\n@@ -72,13 +72,13 @@ glibcxxinstall_HEADERS = $(headers)\n # modified in a per-library or per-sub-library way.  Need to manually\n # set this option because CONFIG_CXXFLAGS has to be after\n # OPTIMIZE_CXXFLAGS on the compile line so that -O2 can be overridden\n-# as the occasion call for it. \n+# as the occasion call for it.\n AM_CXXFLAGS = \\\n \t-fno-implicit-templates \\\n \t$(LIBSUPCXX_PICFLAGS) \\\n \t$(WARN_CXXFLAGS) \\\n \t$(OPTIMIZE_CXXFLAGS) \\\n-\t$(CONFIG_CXXFLAGS) \n+\t$(CONFIG_CXXFLAGS)\n \n AM_MAKEFLAGS = \\\n \t\"gxx_include_dir=$(gxx_include_dir)\"\n@@ -105,8 +105,8 @@ AM_MAKEFLAGS = \\\n # We have to put --tag disable-shared after --tag CXX lest things\n # CXX undo the affect of disable-shared.\n LTCXXCOMPILE = $(LIBTOOL) --tag CXX --tag disable-shared \\\n-               --mode=compile $(CXX) $(TOPLEVEL_INCLUDES) \\\n-\t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n+\t       --mode=compile $(CXX) $(TOPLEVEL_INCLUDES) \\\n+\t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS)\n \n # 3) We'd have a problem when building the shared libstdc++ object if\n # the rules automake generates would be used.  We cannot allow g++ to\n@@ -115,8 +115,8 @@ LTCXXCOMPILE = $(LIBTOOL) --tag CXX --tag disable-shared \\\n # directory to configure libstdc++-v3 to use gcc as the C++\n # compilation driver.\n CXXLINK = $(LIBTOOL) --tag CXX --tag disable-shared \\\n-          --mode=link $(CXX) \\\n-          @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n+\t  --mode=link $(CXX) \\\n+\t  $(OPT_LDFLAGS) $(SECTION_LDFLAGS) $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n \n # We have to have rules modified from the default to counteract SUN make\n # prepending each of $(glibcxxinstall_HEADERS) with VPATH below."}, {"sha": "2806ac2a798e1279c4e10c4a06fdb60a3059067b", "filename": "libstdc++-v3/libsupc++/Makefile.in", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca618b60bfafcccf018b2a7d994afc65eb49415c/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca618b60bfafcccf018b2a7d994afc65eb49415c/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in?ref=ca618b60bfafcccf018b2a7d994afc65eb49415c", "patch": "@@ -221,13 +221,13 @@ AM_CPPFLAGS = $(GLIBCXX_INCLUDES)\n \n # Need this library to both be part of libstdc++.a, and installed\n # separately too.\n-# 1) separate libsupc++.la \n+# 1) separate libsupc++.la\n toolexeclib_LTLIBRARIES = libsupc++.la\n # 2) integrated libsupc++convenience.la that is to be a part of libstdc++.a\n noinst_LTLIBRARIES = libsupc++convenience.la\n \n headers = \\\n-\texception new typeinfo cxxabi.h exception_defines.h \n+\texception new typeinfo cxxabi.h exception_defines.h\n \n \n sources = \\\n@@ -259,8 +259,8 @@ sources = \\\n \tvterminate.cc\n \n \n-libsupc___la_SOURCES = $(sources) \n-libsupc__convenience_la_SOURCES = $(sources) \n+libsupc___la_SOURCES = $(sources)\n+libsupc__convenience_la_SOURCES = $(sources)\n \n glibcxxinstalldir = $(gxx_include_dir)\n glibcxxinstall_HEADERS = $(headers)\n@@ -269,13 +269,13 @@ glibcxxinstall_HEADERS = $(headers)\n # modified in a per-library or per-sub-library way.  Need to manually\n # set this option because CONFIG_CXXFLAGS has to be after\n # OPTIMIZE_CXXFLAGS on the compile line so that -O2 can be overridden\n-# as the occasion call for it. \n+# as the occasion call for it.\n AM_CXXFLAGS = \\\n \t-fno-implicit-templates \\\n \t$(LIBSUPCXX_PICFLAGS) \\\n \t$(WARN_CXXFLAGS) \\\n \t$(OPTIMIZE_CXXFLAGS) \\\n-\t$(CONFIG_CXXFLAGS) \n+\t$(CONFIG_CXXFLAGS)\n \n \n AM_MAKEFLAGS = \\\n@@ -304,8 +304,8 @@ AM_MAKEFLAGS = \\\n # We have to put --tag disable-shared after --tag CXX lest things\n # CXX undo the affect of disable-shared.\n LTCXXCOMPILE = $(LIBTOOL) --tag CXX --tag disable-shared \\\n-               --mode=compile $(CXX) $(TOPLEVEL_INCLUDES) \\\n-\t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n+\t       --mode=compile $(CXX) $(TOPLEVEL_INCLUDES) \\\n+\t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS)\n \n \n # 3) We'd have a problem when building the shared libstdc++ object if\n@@ -315,8 +315,8 @@ LTCXXCOMPILE = $(LIBTOOL) --tag CXX --tag disable-shared \\\n # directory to configure libstdc++-v3 to use gcc as the C++\n # compilation driver.\n CXXLINK = $(LIBTOOL) --tag CXX --tag disable-shared \\\n-          --mode=link $(CXX) \\\n-          @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n+\t  --mode=link $(CXX) \\\n+\t  $(OPT_LDFLAGS) $(SECTION_LDFLAGS) $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n \n subdir = libsupc++\n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4"}, {"sha": "15685abf5a091787282f226d16f737de5e725c4c", "filename": "libstdc++-v3/po/Makefile.am", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca618b60bfafcccf018b2a7d994afc65eb49415c/libstdc%2B%2B-v3%2Fpo%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca618b60bfafcccf018b2a7d994afc65eb49415c/libstdc%2B%2B-v3%2Fpo%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpo%2FMakefile.am?ref=ca618b60bfafcccf018b2a7d994afc65eb49415c", "patch": "@@ -25,48 +25,48 @@ include $(top_srcdir)/fragment.am\n \n # Location of installation directories.\n locale_installdir = $(DESTDIR)$(datadir)/locale\n-locale_builddir = @glibcxx_localedir@\n+locale_builddir = $(glibcxx_localedir)\n \n # Tell automake that foo.po makes foo.mo\n SUFFIXES = .po .mo\n \n-LOCALE_IN = @glibcxx_POFILES@\n-LOCALE_OUT = @glibcxx_MOFILES@\n+LOCALE_IN = $(glibcxx_POFILES)\n+LOCALE_OUT = $(glibcxx_MOFILES)\n \n MSGFMT = msgfmt\n \n # Necessary files.\n DISTFILES = \\\n \tMakefile.am Makefile.in string_literals.cc POTFILES.in $(PACKAGE).pot \\\n-\t$(LOCALE_IN) \n+\t$(LOCALE_IN)\n \n .po.mo:\n \t$(MSGFMT) -o $@ $<\n \n-all-local: all-local-@USE_NLS@\n-all-local-no: \n-all-local-yes: $(LOCALE_OUT) \n+all-local: all-local-$(USE_NLS)\n+all-local-no:\n+all-local-yes: $(LOCALE_OUT)\n \n # 'make check' needs the catalogs constructed in build directory.\n-check: check-@USE_NLS@\n+check: check-$(USE_NLS)\n check-no:\n check-yes:\n-\t$(mkinstalldirs) $(locale_builddir) \n+\t$(mkinstalldirs) $(locale_builddir)\n \tcatalogs='$(LOCALE_OUT)'; \\\n \tfor cat in $$catalogs; do \\\n \t  cat=`basename $$cat`; \\\n \t  lang=`echo $$cat | sed 's/\\.mo$$//'`; \\\n \t  install_dir=$(locale_builddir)/$$lang/LC_MESSAGES; \\\n \t  $(mkinstalldirs) $$install_dir; \\\n \t  $(INSTALL_DATA) $$cat $$install_dir/$(PACKAGE).mo; \\\n-\tdone \n+\tdone\n \n-# Install rules here. \n+# Install rules here.\n # Wish install could just `cp -R ./share $(locale_installdir)` ...\n-install-data-local: install-data-local-@USE_NLS@\n+install-data-local: install-data-local-$(USE_NLS)\n install-data-local-no:\n install-data-local-yes: all-local-yes\n-\t$(mkinstalldirs) $(locale_installdir) \n+\t$(mkinstalldirs) $(locale_installdir)\n \tcatalogs='$(LOCALE_OUT)'; \\\n \tfor cat in $$catalogs; do \\\n \t  cat=`basename $$cat`; \\\n@@ -85,4 +85,4 @@ pot:\n \t  `grep -r -l '__N(\".*\")' .`\n \n # Specify what gets cleaned up on a 'make clean'\n-CLEANFILES = $(LOCALE_OUT) \n+CLEANFILES = $(LOCALE_OUT)"}, {"sha": "7925f979c9127124c3e537ceecddef1385b7c5cf", "filename": "libstdc++-v3/po/Makefile.in", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca618b60bfafcccf018b2a7d994afc65eb49415c/libstdc%2B%2B-v3%2Fpo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca618b60bfafcccf018b2a7d994afc65eb49415c/libstdc%2B%2B-v3%2Fpo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpo%2FMakefile.in?ref=ca618b60bfafcccf018b2a7d994afc65eb49415c", "patch": "@@ -221,24 +221,24 @@ AM_CPPFLAGS = $(GLIBCXX_INCLUDES)\n \n # Location of installation directories.\n locale_installdir = $(DESTDIR)$(datadir)/locale\n-locale_builddir = @glibcxx_localedir@\n+locale_builddir = $(glibcxx_localedir)\n \n # Tell automake that foo.po makes foo.mo\n SUFFIXES = .po .mo\n \n-LOCALE_IN = @glibcxx_POFILES@\n-LOCALE_OUT = @glibcxx_MOFILES@\n+LOCALE_IN = $(glibcxx_POFILES)\n+LOCALE_OUT = $(glibcxx_MOFILES)\n \n MSGFMT = msgfmt\n \n # Necessary files.\n DISTFILES = \\\n \tMakefile.am Makefile.in string_literals.cc POTFILES.in $(PACKAGE).pot \\\n-\t$(LOCALE_IN) \n+\t$(LOCALE_IN)\n \n \n # Specify what gets cleaned up on a 'make clean'\n-CLEANFILES = $(LOCALE_OUT) \n+CLEANFILES = $(LOCALE_OUT)\n subdir = po\n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n CONFIG_HEADER = $(top_builddir)/config.h\n@@ -392,30 +392,30 @@ uninstall-am: uninstall-info-am\n .po.mo:\n \t$(MSGFMT) -o $@ $<\n \n-all-local: all-local-@USE_NLS@\n-all-local-no: \n-all-local-yes: $(LOCALE_OUT) \n+all-local: all-local-$(USE_NLS)\n+all-local-no:\n+all-local-yes: $(LOCALE_OUT)\n \n # 'make check' needs the catalogs constructed in build directory.\n-check: check-@USE_NLS@\n+check: check-$(USE_NLS)\n check-no:\n check-yes:\n-\t$(mkinstalldirs) $(locale_builddir) \n+\t$(mkinstalldirs) $(locale_builddir)\n \tcatalogs='$(LOCALE_OUT)'; \\\n \tfor cat in $$catalogs; do \\\n \t  cat=`basename $$cat`; \\\n \t  lang=`echo $$cat | sed 's/\\.mo$$//'`; \\\n \t  install_dir=$(locale_builddir)/$$lang/LC_MESSAGES; \\\n \t  $(mkinstalldirs) $$install_dir; \\\n \t  $(INSTALL_DATA) $$cat $$install_dir/$(PACKAGE).mo; \\\n-\tdone \n+\tdone\n \n-# Install rules here. \n+# Install rules here.\n # Wish install could just `cp -R ./share $(locale_installdir)` ...\n-install-data-local: install-data-local-@USE_NLS@\n+install-data-local: install-data-local-$(USE_NLS)\n install-data-local-no:\n install-data-local-yes: all-local-yes\n-\t$(mkinstalldirs) $(locale_installdir) \n+\t$(mkinstalldirs) $(locale_installdir)\n \tcatalogs='$(LOCALE_OUT)'; \\\n \tfor cat in $$catalogs; do \\\n \t  cat=`basename $$cat`; \\"}, {"sha": "52bb3270c88274bd71e4d3558836a9a470d69df5", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca618b60bfafcccf018b2a7d994afc65eb49415c/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca618b60bfafcccf018b2a7d994afc65eb49415c/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=ca618b60bfafcccf018b2a7d994afc65eb49415c", "patch": "@@ -55,38 +55,38 @@ host_sources = \\\n \tnumeric_members.cc \\\n \ttime_members.cc\n \n-codecvt_members.cc: ${glibcxx_srcdir}/@CCODECVT_CC@\n-\t@LN_S@ ${glibcxx_srcdir}/@CCODECVT_CC@ . || true\n+codecvt_members.cc: ${glibcxx_srcdir}/$(CCODECVT_CC)\n+\t$(LN_S) ${glibcxx_srcdir}/$(CCODECVT_CC) . || true\n \n-collate_members.cc: ${glibcxx_srcdir}/@CCOLLATE_CC@\n-\t@LN_S@ ${glibcxx_srcdir}/@CCOLLATE_CC@ . || true\n+collate_members.cc: ${glibcxx_srcdir}/$(CCOLLATE_CC)\n+\t$(LN_S) ${glibcxx_srcdir}/$(CCOLLATE_CC) . || true\n \n-ctype_members.cc: ${glibcxx_srcdir}/@CCTYPE_CC@\n-\t@LN_S@ ${glibcxx_srcdir}/@CCTYPE_CC@ . || true\n+ctype_members.cc: ${glibcxx_srcdir}/$(CCTYPE_CC)\n+\t$(LN_S) ${glibcxx_srcdir}/$(CCTYPE_CC) . || true\n \n-messages_members.cc: ${glibcxx_srcdir}/@CMESSAGES_CC@\n-\t@LN_S@ ${glibcxx_srcdir}/@CMESSAGES_CC@ . || true\n+messages_members.cc: ${glibcxx_srcdir}/$(CMESSAGES_CC)\n+\t$(LN_S) ${glibcxx_srcdir}/$(CMESSAGES_CC) . || true\n \n-monetary_members.cc: ${glibcxx_srcdir}/@CMONEY_CC@\n-\t@LN_S@ ${glibcxx_srcdir}/@CMONEY_CC@ . || true\n+monetary_members.cc: ${glibcxx_srcdir}/$(CMONEY_CC)\n+\t$(LN_S) ${glibcxx_srcdir}/$(CMONEY_CC) . || true\n \n-numeric_members.cc: ${glibcxx_srcdir}/@CNUMERIC_CC@\n-\t@LN_S@ ${glibcxx_srcdir}/@CNUMERIC_CC@ . || true\n+numeric_members.cc: ${glibcxx_srcdir}/$(CNUMERIC_CC)\n+\t$(LN_S) ${glibcxx_srcdir}/$(CNUMERIC_CC) . || true\n \n-time_members.cc: ${glibcxx_srcdir}/@CTIME_CC@\n-\t@LN_S@ ${glibcxx_srcdir}/@CTIME_CC@ . || true\n+time_members.cc: ${glibcxx_srcdir}/$(CTIME_CC)\n+\t$(LN_S) ${glibcxx_srcdir}/$(CTIME_CC) . || true\n \n # Source files linked in via configuration/make substitution for a\n # particular host, but with ad hoc naming rules.\n host_sources_extra = \\\n \tbasic_file.cc \\\n \tc++locale.cc\n \n-c++locale.cc: ${glibcxx_srcdir}/@CLOCALE_CC@\n-\t@LN_S@ ${glibcxx_srcdir}/@CLOCALE_CC@ ./$@ || true\n+c++locale.cc: ${glibcxx_srcdir}/$(CLOCALE_CC)\n+\t$(LN_S) ${glibcxx_srcdir}/$(CLOCALE_CC) ./$@ || true\n \n-basic_file.cc: ${glibcxx_srcdir}/@BASIC_FILE_CC@\n-\t@LN_S@ ${glibcxx_srcdir}/@BASIC_FILE_CC@ ./$@ || true\n+basic_file.cc: ${glibcxx_srcdir}/$(BASIC_FILE_CC)\n+\t$(LN_S) ${glibcxx_srcdir}/$(BASIC_FILE_CC) ./$@ || true\n \n # Sources present in the src directory.\n sources = \\\n@@ -131,13 +131,13 @@ libstdc___la_LIBADD = \\\n libstdc___la_DEPENDENCIES = libstdc++-symbol.ver $(libstdc___la_LIBADD)\n \n libstdc___la_LDFLAGS = \\\n-\t-version-info @libtool_VERSION@ ${version_arg} \\\n-\t-lm @LIBUNWIND_FLAG@\n+\t-version-info $(libtool_VERSION) ${version_arg} \\\n+\t-lm $(LIBUNWIND_FLAG)\n \n \n # Use special rules for the deprecated source files so that they find\n # deprecated include files.\n-GLIBCXX_INCLUDE_DIR=@glibcxx_builddir@/include\n+GLIBCXX_INCLUDE_DIR=$(glibcxx_builddir)/include\n strstream.lo: strstream.cc\n \t$(LTCXXCOMPILE) -I$(GLIBCXX_INCLUDE_DIR)/backward -Wno-deprecated -c $<\n strstream.o: strstream.cc\n@@ -199,7 +199,7 @@ LTCXXCOMPILE = $(LIBTOOL) --tag CXX --mode=compile $(CXX) $(INCLUDES) \\\n # directory to configure libstdc++-v3 to use gcc as the C++\n # compilation driver.\n CXXLINK = $(LIBTOOL) --tag CXX --mode=link $(CXX) \\\n-\t  @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n+\t  $(OPT_LDFLAGS) $(SECTION_LDFLAGS) $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n \n \n # Added bits to build debug library.\n@@ -228,9 +228,9 @@ stamp-debug:\n \techo `date` > stamp-debug;\n \n build_debug: stamp-debug\n-\t(cd ${debugdir} && $(MAKE) CXXFLAGS='@DEBUG_FLAGS@' all)\n+\t(cd ${debugdir} && $(MAKE) CXXFLAGS='$(DEBUG_FLAGS)' all)\n \n # Install debug library here.\n install_debug:\n \t(cd ${debugdir} && $(MAKE) \\\n-\ttoolexeclibdir=@glibcxx_toolexeclibdir@/debug install)\n+\ttoolexeclibdir=$(glibcxx_toolexeclibdir)/debug install)"}, {"sha": "efedd07bd34243effae92cb113fd0166d752de6a", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca618b60bfafcccf018b2a7d994afc65eb49415c/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca618b60bfafcccf018b2a7d994afc65eb49415c/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=ca618b60bfafcccf018b2a7d994afc65eb49415c", "patch": "@@ -289,13 +289,13 @@ libstdc___la_LIBADD = \\\n libstdc___la_DEPENDENCIES = libstdc++-symbol.ver $(libstdc___la_LIBADD)\n \n libstdc___la_LDFLAGS = \\\n-\t-version-info @libtool_VERSION@ ${version_arg} \\\n-\t-lm @LIBUNWIND_FLAG@\n+\t-version-info $(libtool_VERSION) ${version_arg} \\\n+\t-lm $(LIBUNWIND_FLAG)\n \n \n # Use special rules for the deprecated source files so that they find\n # deprecated include files.\n-GLIBCXX_INCLUDE_DIR = @glibcxx_builddir@/include\n+GLIBCXX_INCLUDE_DIR = $(glibcxx_builddir)/include\n \n # AM_CXXFLAGS needs to be in each subdirectory so that it can be\n # modified in a per-library or per-sub-library way.  Need to manually\n@@ -338,7 +338,7 @@ LTCXXCOMPILE = $(LIBTOOL) --tag CXX --mode=compile $(CXX) $(INCLUDES) \\\n # directory to configure libstdc++-v3 to use gcc as the C++\n # compilation driver.\n CXXLINK = $(LIBTOOL) --tag CXX --mode=link $(CXX) \\\n-\t  @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n+\t  $(OPT_LDFLAGS) $(SECTION_LDFLAGS) $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n \n \n debugdir = debug\n@@ -624,32 +624,32 @@ uninstall-am: uninstall-info-am uninstall-toolexeclibLTLIBRARIES\n @GLIBCXX_BUILD_VERSIONED_SHLIB_TRUE@\tfi\n @GLIBCXX_BUILD_VERSIONED_SHLIB_FALSE@libstdc++-symbol.ver:\n \n-codecvt_members.cc: ${glibcxx_srcdir}/@CCODECVT_CC@\n-\t@LN_S@ ${glibcxx_srcdir}/@CCODECVT_CC@ . || true\n+codecvt_members.cc: ${glibcxx_srcdir}/$(CCODECVT_CC)\n+\t$(LN_S) ${glibcxx_srcdir}/$(CCODECVT_CC) . || true\n \n-collate_members.cc: ${glibcxx_srcdir}/@CCOLLATE_CC@\n-\t@LN_S@ ${glibcxx_srcdir}/@CCOLLATE_CC@ . || true\n+collate_members.cc: ${glibcxx_srcdir}/$(CCOLLATE_CC)\n+\t$(LN_S) ${glibcxx_srcdir}/$(CCOLLATE_CC) . || true\n \n-ctype_members.cc: ${glibcxx_srcdir}/@CCTYPE_CC@\n-\t@LN_S@ ${glibcxx_srcdir}/@CCTYPE_CC@ . || true\n+ctype_members.cc: ${glibcxx_srcdir}/$(CCTYPE_CC)\n+\t$(LN_S) ${glibcxx_srcdir}/$(CCTYPE_CC) . || true\n \n-messages_members.cc: ${glibcxx_srcdir}/@CMESSAGES_CC@\n-\t@LN_S@ ${glibcxx_srcdir}/@CMESSAGES_CC@ . || true\n+messages_members.cc: ${glibcxx_srcdir}/$(CMESSAGES_CC)\n+\t$(LN_S) ${glibcxx_srcdir}/$(CMESSAGES_CC) . || true\n \n-monetary_members.cc: ${glibcxx_srcdir}/@CMONEY_CC@\n-\t@LN_S@ ${glibcxx_srcdir}/@CMONEY_CC@ . || true\n+monetary_members.cc: ${glibcxx_srcdir}/$(CMONEY_CC)\n+\t$(LN_S) ${glibcxx_srcdir}/$(CMONEY_CC) . || true\n \n-numeric_members.cc: ${glibcxx_srcdir}/@CNUMERIC_CC@\n-\t@LN_S@ ${glibcxx_srcdir}/@CNUMERIC_CC@ . || true\n+numeric_members.cc: ${glibcxx_srcdir}/$(CNUMERIC_CC)\n+\t$(LN_S) ${glibcxx_srcdir}/$(CNUMERIC_CC) . || true\n \n-time_members.cc: ${glibcxx_srcdir}/@CTIME_CC@\n-\t@LN_S@ ${glibcxx_srcdir}/@CTIME_CC@ . || true\n+time_members.cc: ${glibcxx_srcdir}/$(CTIME_CC)\n+\t$(LN_S) ${glibcxx_srcdir}/$(CTIME_CC) . || true\n \n-c++locale.cc: ${glibcxx_srcdir}/@CLOCALE_CC@\n-\t@LN_S@ ${glibcxx_srcdir}/@CLOCALE_CC@ ./$@ || true\n+c++locale.cc: ${glibcxx_srcdir}/$(CLOCALE_CC)\n+\t$(LN_S) ${glibcxx_srcdir}/$(CLOCALE_CC) ./$@ || true\n \n-basic_file.cc: ${glibcxx_srcdir}/@BASIC_FILE_CC@\n-\t@LN_S@ ${glibcxx_srcdir}/@BASIC_FILE_CC@ ./$@ || true\n+basic_file.cc: ${glibcxx_srcdir}/$(BASIC_FILE_CC)\n+\t$(LN_S) ${glibcxx_srcdir}/$(BASIC_FILE_CC) ./$@ || true\n strstream.lo: strstream.cc\n \t$(LTCXXCOMPILE) -I$(GLIBCXX_INCLUDE_DIR)/backward -Wno-deprecated -c $<\n strstream.o: strstream.cc\n@@ -691,12 +691,12 @@ stamp-debug:\n \techo `date` > stamp-debug;\n \n build_debug: stamp-debug\n-\t(cd ${debugdir} && $(MAKE) CXXFLAGS='@DEBUG_FLAGS@' all)\n+\t(cd ${debugdir} && $(MAKE) CXXFLAGS='$(DEBUG_FLAGS)' all)\n \n # Install debug library here.\n install_debug:\n \t(cd ${debugdir} && $(MAKE) \\\n-\ttoolexeclibdir=@glibcxx_toolexeclibdir@/debug install)\n+\ttoolexeclibdir=$(glibcxx_toolexeclibdir)/debug install)\n # Tell versions [3.59,3.63) of GNU make to not export all variables.\n # Otherwise a system limit (for SysV at least) may be exceeded.\n .NOEXPORT:"}, {"sha": "3a03189b7b8a8ab434e5dc3fe75e4afb93b6b350", "filename": "libstdc++-v3/testsuite/Makefile.am", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca618b60bfafcccf018b2a7d994afc65eb49415c/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca618b60bfafcccf018b2a7d994afc65eb49415c/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.am?ref=ca618b60bfafcccf018b2a7d994afc65eb49415c", "patch": "@@ -52,7 +52,7 @@ libv3test_a_SOURCES = testsuite_hooks.cc testsuite_allocator.cc\n if GLIBCXX_TEST_ABI\n noinst_PROGRAMS = abi_check\n else\n-noinst_PROGRAMS = \n+noinst_PROGRAMS =\n endif\n abi_check_SOURCES = abi_check.cc\n \n@@ -69,9 +69,8 @@ endif\n # This is automatically run after the generated check-DEJAGNU rule.\n check-local: check-abi\n \n-baseline_dir = @baseline_dir@\n baseline_file = ${baseline_dir}/baseline_symbols.txt\n-extract_symvers = @glibcxx_srcdir@/scripts/extract_symvers\n+extract_symvers = $(glibcxx_srcdir)/scripts/extract_symvers\n \n current_symbols.txt: ${extract_symvers} ../src/.libs/libstdc++.so\n \t  -@(${extract_symvers} ../src/.libs/libstdc++.so current_symbols.txt)\n@@ -84,7 +83,7 @@ baseline_symbols:\n \t    exit 1; \\\n \t  fi; true)\n \n-new-abi-baseline: \n+new-abi-baseline:\n \t-@$(mkinstalldirs) ${baseline_dir}\n \t-@(output=${baseline_file}; \\\n \t  if test -f $${output}; then \\\n@@ -101,7 +100,7 @@ check-abi: abi_check baseline_symbols current_symbols.txt\n \t-@(./abi_check --check ./current_symbols.txt ${baseline_file} \\\n \t2>&1 | tee libstdc++-abi.sum)\n \n-check-abi-verbose: abi_check baseline_symbols current_symbols.txt \n+check-abi-verbose: abi_check baseline_symbols current_symbols.txt\n \t-@(./abi_check --check-verbose ./current_symbols.txt ${baseline_file} \\\n \t2>&1 | tee libstdc++-abi.sum)\n \n@@ -126,7 +125,7 @@ check-script-install: ${survey_script}\n \t  ${survey_script} 0)\n \n \n-# Runs the testsuite/performance tests.  \n+# Runs the testsuite/performance tests.\n # Some of these tests create large (~75MB) files, allocate huge\n # ammounts of memory, or otherwise tie up machine resources. Thus,\n # running this is off by default.\n@@ -147,4 +146,4 @@ check-script check-script-install check-performance\n \n # By adding these files here, automake will remove them for 'make clean'\n CLEANFILES = *.txt *.tst *.exe core* filebuf_* tmp* ostream_* *.log *.sum \\\n-\t     testsuite_* site.exp abi_check baseline_symbols \n+\t     testsuite_* site.exp abi_check baseline_symbols"}, {"sha": "c44c29428d5f0744fa71fc33b757987a3005213a", "filename": "libstdc++-v3/testsuite/Makefile.in", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca618b60bfafcccf018b2a7d994afc65eb49415c/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca618b60bfafcccf018b2a7d994afc65eb49415c/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in?ref=ca618b60bfafcccf018b2a7d994afc65eb49415c", "patch": "@@ -147,7 +147,6 @@ ac_ct_CXX = @ac_ct_CXX@\n ac_ct_RANLIB = @ac_ct_RANLIB@\n ac_ct_STRIP = @ac_ct_STRIP@\n am__leading_dot = @am__leading_dot@\n-\n baseline_dir = @baseline_dir@\n bindir = @bindir@\n build = @build@\n@@ -247,8 +246,9 @@ libv3test_a_SOURCES = testsuite_hooks.cc testsuite_allocator.cc\n \n @GLIBCXX_TEST_ABI_TRUE@noinst_PROGRAMS = abi_check\n abi_check_SOURCES = abi_check.cc\n+\n baseline_file = ${baseline_dir}/baseline_symbols.txt\n-extract_symvers = @glibcxx_srcdir@/scripts/extract_symvers\n+extract_symvers = $(glibcxx_srcdir)/scripts/extract_symvers\n \n # These two special 'check-script' rules use the bash script\n # 'check_survey' to do testing. This script is not as portable as the\n@@ -257,15 +257,15 @@ extract_symvers = @glibcxx_srcdir@/scripts/extract_symvers\n # items like compile time, execution time, and binary size.\n survey_script = ${glibcxx_builddir}/scripts/check_survey\n \n-# Runs the testsuite/performance tests.  \n+# Runs the testsuite/performance tests.\n # Some of these tests create large (~75MB) files, allocate huge\n # ammounts of memory, or otherwise tie up machine resources. Thus,\n # running this is off by default.\n performance_script = ${glibcxx_srcdir}/scripts/check_performance\n \n # By adding these files here, automake will remove them for 'make clean'\n CLEANFILES = *.txt *.tst *.exe core* filebuf_* tmp* ostream_* *.log *.sum \\\n-\t     testsuite_* site.exp abi_check baseline_symbols \n+\t     testsuite_* site.exp abi_check baseline_symbols\n \n subdir = testsuite\n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n@@ -593,7 +593,7 @@ baseline_symbols:\n \t    exit 1; \\\n \t  fi; true)\n \n-new-abi-baseline: \n+new-abi-baseline:\n \t-@$(mkinstalldirs) ${baseline_dir}\n \t-@(output=${baseline_file}; \\\n \t  if test -f $${output}; then \\\n@@ -609,7 +609,7 @@ new-abi-baseline:\n @GLIBCXX_TEST_ABI_TRUE@\t-@(./abi_check --check ./current_symbols.txt ${baseline_file} \\\n @GLIBCXX_TEST_ABI_TRUE@\t2>&1 | tee libstdc++-abi.sum)\n \n-@GLIBCXX_TEST_ABI_TRUE@check-abi-verbose: abi_check baseline_symbols current_symbols.txt \n+@GLIBCXX_TEST_ABI_TRUE@check-abi-verbose: abi_check baseline_symbols current_symbols.txt\n @GLIBCXX_TEST_ABI_TRUE@\t-@(./abi_check --check-verbose ./current_symbols.txt ${baseline_file} \\\n @GLIBCXX_TEST_ABI_TRUE@\t2>&1 | tee libstdc++-abi.sum)\n "}]}