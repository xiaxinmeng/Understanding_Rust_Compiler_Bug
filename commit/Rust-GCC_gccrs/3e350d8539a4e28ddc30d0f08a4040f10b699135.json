{"sha": "3e350d8539a4e28ddc30d0f08a4040f10b699135", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2UzNTBkODUzOWE0ZTI4ZGRjMzBkMGYwOGE0MDQwZjEwYjY5OTEzNQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-04-10T10:48:04Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-04-10T10:48:04Z"}, "message": "gimple-ssa-warn-alloca: Always initialize limit [PR99989]\n\nThis PR is about a -W*uninitialized warning on riscv64.\nalloca_type_and_limit is documented to have limit member only defined\nwhen type is ALLOCA_BOUND_MAYBE_LARGE or ALLOCA_BOUND_DEFINITELY_LARGE\nand otherwise just default constructs limit, which for wide_int means\nno initialization at all.  IMHO it is fine not to use the limit\nmember otherwise, but trying to not initialize it when it can be e.g.\ncopied around and then invoke UB doesn't look like a good idea.\n\n2021-04-10  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR middle-end/99989\n\t* gimple-ssa-warn-alloca.c\n\t(alloca_type_and_limit::alloca_type_and_limit): Initialize limit to\n\t0 with integer precision unconditionally.", "tree": {"sha": "6bc8db2262ec1f8239bb7b0ffeae87590efee9e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6bc8db2262ec1f8239bb7b0ffeae87590efee9e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e350d8539a4e28ddc30d0f08a4040f10b699135", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e350d8539a4e28ddc30d0f08a4040f10b699135", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e350d8539a4e28ddc30d0f08a4040f10b699135", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e350d8539a4e28ddc30d0f08a4040f10b699135/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a493fcd27d6a1af896c4f5ef4ab1e0afe8a839d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a493fcd27d6a1af896c4f5ef4ab1e0afe8a839d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a493fcd27d6a1af896c4f5ef4ab1e0afe8a839d"}], "stats": {"total": 5, "additions": 2, "deletions": 3}, "files": [{"sha": "42c0ba1d87b4567239364accf8b82712c8b52851", "filename": "gcc/gimple-ssa-warn-alloca.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e350d8539a4e28ddc30d0f08a4040f10b699135/gcc%2Fgimple-ssa-warn-alloca.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e350d8539a4e28ddc30d0f08a4040f10b699135/gcc%2Fgimple-ssa-warn-alloca.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-warn-alloca.c?ref=3e350d8539a4e28ddc30d0f08a4040f10b699135", "patch": "@@ -124,9 +124,8 @@ class alloca_type_and_limit {\n   alloca_type_and_limit (enum alloca_type type,\n \t\t\t wide_int i) : type(type), limit(i) { }\n   alloca_type_and_limit (enum alloca_type type) : type(type)\n-  { if (type == ALLOCA_BOUND_MAYBE_LARGE\n-\t|| type == ALLOCA_BOUND_DEFINITELY_LARGE)\n-      limit = wi::to_wide (integer_zero_node);\n+  {\n+    limit = wi::to_wide (integer_zero_node);\n   }\n };\n "}]}