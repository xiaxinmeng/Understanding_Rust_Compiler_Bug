{"sha": "ea2382be3f07d1faa3c307d8afc974a0f6cb9122", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWEyMzgyYmUzZjA3ZDFmYWEzYzMwN2Q4YWZjOTc0YTBmNmNiOTEyMg==", "commit": {"author": {"name": "Jie Zhang", "email": "jie.zhang@analog.com", "date": "2007-09-19T03:33:08Z"}, "committer": {"name": "Jie Zhang", "email": "jiez@gcc.gnu.org", "date": "2007-09-19T03:33:08Z"}, "message": "config.gcc (bfin*-linux-uclibc*): Add ./linux-sysroot-suffix.h to tm_file.\n\n\t* config.gcc (bfin*-linux-uclibc*): Add ./linux-sysroot-suffix.h\n\tto tm_file.\n\t* config/bfin/print-sysroot-suffix.sh: New.\n\t* config/bfin/t-bfin-elf (EXTRA_PARTS): Remove.\n\t(MULTILIB_OPTIONS, MULTILIB_DIRNAMES, MULTILIB_MATCHES,\n\tMULTILIB_EXCEPTIONS): Redefine with new multilibs.\n\t* config/bfin/t-bfin-uclinux (EXTRA_PARTS): Remove.\n\t(MULTILIB_OPTIONS, MULTILIB_DIRNAMES, MULTILIB_MATCHES,\n\tMULTILIB_EXCEPTIONS): Redefine with new multilibs.\n\t* config/bfin/t-bfin-linux (EXTRA_PARTS): Remove.\n\t(MULTILIB_OPTIONS, MULTILIB_DIRNAMES, MULTILIB_MATCHES,\n\tMULTILIB_EXCEPTIONS): Redefine with new multilibs.\n\t(linux-sysroot-suffix.h): New target.\n\t* config/bfin/bfin.opt (mcsync-anomaly): Use Var instead of Mask.\n\t(mspecld-anomaly): Likewise.\n\t* config/bfin/bfin-protos.h (enum bfin_cpu_type): Renamed from\n\t(enum bfin_cpu): ... this. Add BFIN_CPU_BF522, BFIN_CPU_BF525,\n\tBFIN_CPU_BF527, BFIN_CPU_BF538, BFIN_CPU_BF539, BFIN_CPU_BF542,\n\tBFIN_CPU_BF544, BFIN_CPU_BF548, and BFIN_CPU_BF549.\n\t(bfin_si_revision): Declare.\n\t(bfin_workarounds): Declare.\n\t(WA_SPECULATIVE_LOADS): Define.\n\t(ENABLE_WA_SPECULATIVE_LOADS): Define.\n\t(WA_SPECULATIVE_SYNCS): Define.\n\t(ENABLE_WA_SPECULATIVE_SYNCS): Define.\n\t* config/bfin/elf.h (STARTFILE_SPEC): Rename crt532.o to basiccrt.o.\n\t(LIB_SPEC): Add %s to the linker scripts.\n\tUse proper linker script for bf522, bf525, bf527,\n\tbf538, bf539, bf542, bf544, bf548, and bf549.\n\t* config/bfin/bfin.c (bfin_si_revision): Define.\n\t(bfin_workarounds): Define.\n\t(struct bfin_cpu): New.\n\t(bfin_cpus): New.\n\t(bfin_handle_option): Handle silicon revision part of -mcpu option.\n\t(override_options): Set bfin_workarounds.\n\t(length_for_loop): Replace TARGET_CSYNC_ANOMALY with\n\tENABLE_WA_SPECULATIVE_SYNCS, TARGET_SPECLD_ANOMALY with\n\tENABLE_WA_SPECULATIVE_LOADS.\n\t(bfin_reorg): Likewise.\n\t* config/bfin/bfin.h (TARGET_CPU_CPP_BUILTINS): Define\n\tmacros for bf522, bf525, bf527, bf538, bf539,\n\tbf542, bf544, bf548, and bf549.\n\tDefine __SILICON_REVISION__ and __WORKAROUND_* macros if needed.\n\tDon't define __ID_SHARED_LIB__ when -msep-data.\n\t(TARGET_DEFAULT): Define as 0.\n\t(DRIVER_SELF_SPECS): Add -mcpu=bf532 if no -mcpu option.\n\t* doc/invoke.texi (Blackfin Options): Document silicon\n\trevision part of -mcpu option and it now accepts bf522, bf525,\n\tbf527, bf538, bf539, bf542, bf544, bf548, and bf549.\n\tNeither -mspecld-anomaly nor -mcsync-anomaly is enabled anymore.\n\n\ttestsuite/\n\t* gcc.target/bfin/bfin.exp: New.\n\t* gcc.target/bfin/{workarounds-any.c, workarounds-none.c,\n\tworkarounds-1.c, workarounds-2.c, workarounds-3.c, workarounds-4.c,\n\tmcpu-bf522.c, mcpu-bf525.c, mcpu-bf527.c,\n\tmcpu-bf531.c, mcpu-bf532.c, mcpu-bf533.c,\n\tmcpu-bf534.c, mcpu-bf536.c, mcpu-bf537.c,\n\tmcpu-bf538.c, mcpu-bf539.c, mcpu-bf542.c,\n\tmcpu-bf544.c, mcpu-bf548.c, mcpu-bf549.c,\n\tmcpu-bf561.c, mcpu-default.c}: New tests.\n\nFrom-SVN: r128597", "tree": {"sha": "1a620cea00887fc92601dcbcdce06c0d1dba4bd3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a620cea00887fc92601dcbcdce06c0d1dba4bd3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea2382be3f07d1faa3c307d8afc974a0f6cb9122", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea2382be3f07d1faa3c307d8afc974a0f6cb9122", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea2382be3f07d1faa3c307d8afc974a0f6cb9122", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea2382be3f07d1faa3c307d8afc974a0f6cb9122/comments", "author": {"login": "jiez-adi", "id": 103514486, "node_id": "U_kgDOBiuBdg", "avatar_url": "https://avatars.githubusercontent.com/u/103514486?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jiez-adi", "html_url": "https://github.com/jiez-adi", "followers_url": "https://api.github.com/users/jiez-adi/followers", "following_url": "https://api.github.com/users/jiez-adi/following{/other_user}", "gists_url": "https://api.github.com/users/jiez-adi/gists{/gist_id}", "starred_url": "https://api.github.com/users/jiez-adi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jiez-adi/subscriptions", "organizations_url": "https://api.github.com/users/jiez-adi/orgs", "repos_url": "https://api.github.com/users/jiez-adi/repos", "events_url": "https://api.github.com/users/jiez-adi/events{/privacy}", "received_events_url": "https://api.github.com/users/jiez-adi/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "aa317c97cf2fc0170203d7667c8cd41798793e1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa317c97cf2fc0170203d7667c8cd41798793e1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa317c97cf2fc0170203d7667c8cd41798793e1c"}], "stats": {"total": 1200, "additions": 1109, "deletions": 91}, "files": [{"sha": "3f97acf286398f84886ab587a111cb07a0fa8644", "filename": "gcc/ChangeLog", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea2382be3f07d1faa3c307d8afc974a0f6cb9122/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea2382be3f07d1faa3c307d8afc974a0f6cb9122/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ea2382be3f07d1faa3c307d8afc974a0f6cb9122", "patch": "@@ -1,3 +1,55 @@\n+2007-09-19  Jie Zhang  <jie.zhang@analog.com>\n+\n+\t* config.gcc (bfin*-linux-uclibc*): Add ./linux-sysroot-suffix.h\n+\tto tm_file.\n+\t* config/bfin/print-sysroot-suffix.sh: New.\n+\t* config/bfin/t-bfin-elf (EXTRA_PARTS): Remove.\n+\t(MULTILIB_OPTIONS, MULTILIB_DIRNAMES, MULTILIB_MATCHES,\n+\tMULTILIB_EXCEPTIONS): Redefine with new multilibs.\n+\t* config/bfin/t-bfin-uclinux (EXTRA_PARTS): Remove.\n+\t(MULTILIB_OPTIONS, MULTILIB_DIRNAMES, MULTILIB_MATCHES,\n+\tMULTILIB_EXCEPTIONS): Redefine with new multilibs.\n+\t* config/bfin/t-bfin-linux (EXTRA_PARTS): Remove.\n+\t(MULTILIB_OPTIONS, MULTILIB_DIRNAMES, MULTILIB_MATCHES,\n+\tMULTILIB_EXCEPTIONS): Redefine with new multilibs.\n+\t(linux-sysroot-suffix.h): New target.\n+\t* config/bfin/bfin.opt (mcsync-anomaly): Use Var instead of Mask.\n+\t(mspecld-anomaly): Likewise.\n+\t* config/bfin/bfin-protos.h (enum bfin_cpu_type): Renamed from\n+\t(enum bfin_cpu): ... this. Add BFIN_CPU_BF522, BFIN_CPU_BF525,\n+\tBFIN_CPU_BF527, BFIN_CPU_BF538, BFIN_CPU_BF539, BFIN_CPU_BF542,\n+\tBFIN_CPU_BF544, BFIN_CPU_BF548, and BFIN_CPU_BF549.\n+\t(bfin_si_revision): Declare.\n+\t(bfin_workarounds): Declare.\n+\t(WA_SPECULATIVE_LOADS): Define.\n+\t(ENABLE_WA_SPECULATIVE_LOADS): Define.\n+\t(WA_SPECULATIVE_SYNCS): Define.\n+\t(ENABLE_WA_SPECULATIVE_SYNCS): Define.\n+\t* config/bfin/elf.h (STARTFILE_SPEC): Rename crt532.o to basiccrt.o.\n+\t(LIB_SPEC): Add %s to the linker scripts.\n+\tUse proper linker script for bf522, bf525, bf527,\n+\tbf538, bf539, bf542, bf544, bf548, and bf549.\n+\t* config/bfin/bfin.c (bfin_si_revision): Define.\n+\t(bfin_workarounds): Define.\n+\t(struct bfin_cpu): New.\n+\t(bfin_cpus): New.\n+\t(bfin_handle_option): Handle silicon revision part of -mcpu option.\n+\t(override_options): Set bfin_workarounds.\n+\t(length_for_loop): Replace TARGET_CSYNC_ANOMALY with\n+\tENABLE_WA_SPECULATIVE_SYNCS, TARGET_SPECLD_ANOMALY with\n+\tENABLE_WA_SPECULATIVE_LOADS.\n+\t(bfin_reorg): Likewise.\n+\t* config/bfin/bfin.h (TARGET_CPU_CPP_BUILTINS): Define\n+\tmacros for bf522, bf525, bf527, bf538, bf539,\n+\tbf542, bf544, bf548, and bf549.\n+\tDefine __SILICON_REVISION__ and __WORKAROUND_* macros if needed.\n+\tDon't define __ID_SHARED_LIB__ when -msep-data.\n+\t(TARGET_DEFAULT): Define as 0.\n+\t(DRIVER_SELF_SPECS): Add -mcpu=bf532 if no -mcpu option.\n+\t* doc/invoke.texi (Blackfin Options): Document silicon\n+\trevision part of -mcpu option and it now accepts bf522, bf525,\n+\tbf527, bf538, bf539, bf542, bf544, bf548, and bf549.\n+\n 2007-09-18  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* alias.c (memory_modified_1): Deconstify."}, {"sha": "1b353a61c42bdad7ad21708a855db76ef6f9d8c5", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea2382be3f07d1faa3c307d8afc974a0f6cb9122/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea2382be3f07d1faa3c307d8afc974a0f6cb9122/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=ea2382be3f07d1faa3c307d8afc974a0f6cb9122", "patch": "@@ -824,7 +824,7 @@ bfin*-uclinux*)\n         use_collect2=no\n         ;;\n bfin*-linux-uclibc*)\n-\ttm_file=\"${tm_file} dbxelf.h elfos.h bfin/elf.h linux.h bfin/linux.h\"\n+\ttm_file=\"${tm_file} dbxelf.h elfos.h bfin/elf.h linux.h bfin/linux.h ./linux-sysroot-suffix.h\"\n         tmake_file=\"t-slibgcc-elf-ver bfin/t-bfin-linux\"\n         use_collect2=no\n         ;;"}, {"sha": "f7b1149bdee666c74b10e98a1cafa30d6983fa5a", "filename": "gcc/config/bfin/bfin-protos.h", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea2382be3f07d1faa3c307d8afc974a0f6cb9122/gcc%2Fconfig%2Fbfin%2Fbfin-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea2382be3f07d1faa3c307d8afc974a0f6cb9122/gcc%2Fconfig%2Fbfin%2Fbfin-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin-protos.h?ref=ea2382be3f07d1faa3c307d8afc974a0f6cb9122", "patch": "@@ -23,20 +23,45 @@\n #define GCC_BFIN_PROTOS_H\n \n /* CPU type.  */\n-typedef enum bfin_cpu\n+typedef enum bfin_cpu_type\n {\n+  BFIN_CPU_BF522,\n+  BFIN_CPU_BF525,\n+  BFIN_CPU_BF527,\n   BFIN_CPU_BF531,\n   BFIN_CPU_BF532,\n   BFIN_CPU_BF533,\n   BFIN_CPU_BF534,\n   BFIN_CPU_BF536,\n   BFIN_CPU_BF537,\n+  BFIN_CPU_BF538,\n+  BFIN_CPU_BF539,\n+  BFIN_CPU_BF542,\n+  BFIN_CPU_BF544,\n+  BFIN_CPU_BF548,\n+  BFIN_CPU_BF549,\n   BFIN_CPU_BF561\n } bfin_cpu_t;\n \n /* Value of -mcpu= */\n extern bfin_cpu_t bfin_cpu_type;\n \n+/* Value of -msi-revision= */\n+extern int bfin_si_revision;\n+\n+extern unsigned int bfin_workarounds;\n+\n+/* For the anomaly 05-00-0245 */\n+#define WA_SPECULATIVE_LOADS 0x00000001\n+#define ENABLE_WA_SPECULATIVE_LOADS \\\n+  (bfin_workarounds & WA_SPECULATIVE_LOADS)\n+\n+/* For the anomaly 05-00-0244 */\n+#define WA_SPECULATIVE_SYNCS 0x00000002\n+#define ENABLE_WA_SPECULATIVE_SYNCS \\\n+  (bfin_workarounds & WA_SPECULATIVE_SYNCS)\n+\n+\n #define Mmode enum machine_mode\n \n extern rtx function_arg (CUMULATIVE_ARGS *, Mmode, tree, int);"}, {"sha": "3a23e8448614a15ffae98e2d11ff40429531c51b", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 190, "deletions": 27, "changes": 217, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea2382be3f07d1faa3c307d8afc974a0f6cb9122/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea2382be3f07d1faa3c307d8afc974a0f6cb9122/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=ea2382be3f07d1faa3c307d8afc974a0f6cb9122", "patch": "@@ -95,6 +95,108 @@ static int bfin_flag_var_tracking;\n /* -mcpu support */\n bfin_cpu_t bfin_cpu_type = DEFAULT_CPU_TYPE;\n \n+/* -msi-revision support. There are three special values:\n+   -1      -msi-revision=none.\n+   0xffff  -msi-revision=any.  */\n+int bfin_si_revision;\n+\n+/* The workarounds enabled */\n+unsigned int bfin_workarounds = 0;\n+\n+struct bfin_cpu\n+{\n+  const char *name;\n+  bfin_cpu_t type;\n+  int si_revision;\n+  unsigned int workarounds;\n+};\n+\n+struct bfin_cpu bfin_cpus[] =\n+{\n+  {\"bf522\", BFIN_CPU_BF522, 0x0000,\n+   WA_SPECULATIVE_LOADS},\n+\n+  {\"bf525\", BFIN_CPU_BF525, 0x0000,\n+   WA_SPECULATIVE_LOADS},\n+\n+  {\"bf527\", BFIN_CPU_BF527, 0x0000,\n+   WA_SPECULATIVE_LOADS},\n+\n+  {\"bf531\", BFIN_CPU_BF531, 0x0005,\n+   WA_SPECULATIVE_LOADS},\n+  {\"bf531\", BFIN_CPU_BF531, 0x0004,\n+   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS},\n+  {\"bf531\", BFIN_CPU_BF531, 0x0003,\n+   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS},\n+\n+  {\"bf532\", BFIN_CPU_BF532, 0x0005,\n+   WA_SPECULATIVE_LOADS},\n+  {\"bf532\", BFIN_CPU_BF532, 0x0004,\n+   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS},\n+  {\"bf532\", BFIN_CPU_BF532, 0x0003,\n+   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS},\n+\n+  {\"bf533\", BFIN_CPU_BF533, 0x0005,\n+   WA_SPECULATIVE_LOADS},\n+  {\"bf533\", BFIN_CPU_BF533, 0x0004,\n+   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS},\n+  {\"bf533\", BFIN_CPU_BF533, 0x0003,\n+   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS},\n+\n+  {\"bf534\", BFIN_CPU_BF534, 0x0003,\n+   WA_SPECULATIVE_LOADS},\n+  {\"bf534\", BFIN_CPU_BF534, 0x0002,\n+   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS},\n+  {\"bf534\", BFIN_CPU_BF534, 0x0001,\n+   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS},\n+\n+  {\"bf536\", BFIN_CPU_BF536, 0x0003,\n+   WA_SPECULATIVE_LOADS},\n+  {\"bf536\", BFIN_CPU_BF536, 0x0002,\n+   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS},\n+  {\"bf536\", BFIN_CPU_BF536, 0x0001,\n+   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS},\n+\n+  {\"bf537\", BFIN_CPU_BF537, 0x0003,\n+   WA_SPECULATIVE_LOADS},\n+  {\"bf537\", BFIN_CPU_BF537, 0x0002,\n+   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS},\n+  {\"bf537\", BFIN_CPU_BF537, 0x0001,\n+   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS},\n+\n+  {\"bf538\", BFIN_CPU_BF538, 0x0004,\n+   WA_SPECULATIVE_LOADS},\n+  {\"bf538\", BFIN_CPU_BF538, 0x0003,\n+   WA_SPECULATIVE_LOADS},\n+\n+  {\"bf539\", BFIN_CPU_BF539, 0x0004,\n+   WA_SPECULATIVE_LOADS},\n+  {\"bf539\", BFIN_CPU_BF539, 0x0003,\n+   WA_SPECULATIVE_LOADS},\n+  {\"bf539\", BFIN_CPU_BF539, 0x0002,\n+   WA_SPECULATIVE_LOADS},\n+\n+  {\"bf542\", BFIN_CPU_BF542, 0x0000,\n+   WA_SPECULATIVE_LOADS},\n+\n+  {\"bf544\", BFIN_CPU_BF544, 0x0000,\n+   WA_SPECULATIVE_LOADS},\n+\n+  {\"bf548\", BFIN_CPU_BF548, 0x0000,\n+   WA_SPECULATIVE_LOADS},\n+\n+  {\"bf549\", BFIN_CPU_BF549, 0x0000,\n+   WA_SPECULATIVE_LOADS},\n+\n+  {\"bf561\", BFIN_CPU_BF561, 0x0005, 0},\n+  {\"bf561\", BFIN_CPU_BF561, 0x0003,\n+   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS},\n+  {\"bf561\", BFIN_CPU_BF561, 0x0002,\n+   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS},\n+\n+  {NULL, 0, 0, 0}\n+};\n+\n int splitting_for_sched;\n \n static void\n@@ -2143,26 +2245,77 @@ bfin_handle_option (size_t code, const char *arg, int value)\n       return true;\n \n     case OPT_mcpu_:\n-      if (strcmp (arg, \"bf531\") == 0)\n-\tbfin_cpu_type = BFIN_CPU_BF531;\n-      else if (strcmp (arg, \"bf532\") == 0)\n-\tbfin_cpu_type = BFIN_CPU_BF532;\n-      else if (strcmp (arg, \"bf533\") == 0)\n-\tbfin_cpu_type = BFIN_CPU_BF533;\n-      else if (strcmp (arg, \"bf534\") == 0)\n-\tbfin_cpu_type = BFIN_CPU_BF534;\n-      else if (strcmp (arg, \"bf536\") == 0)\n-\tbfin_cpu_type = BFIN_CPU_BF536;\n-      else if (strcmp (arg, \"bf537\") == 0)\n-\tbfin_cpu_type = BFIN_CPU_BF537;\n-      else if (strcmp (arg, \"bf561\") == 0)\n-\t{\n+      {\n+\tconst char *p, *q;\n+\tint i;\n+\n+\ti = 0;\n+\twhile ((p = bfin_cpus[i].name) != NULL)\n+\t  {\n+\t    if (strncmp (arg, p, strlen (p)) == 0)\n+\t      break;\n+\t    i++;\n+\t  }\n+\n+\tif (p == NULL)\n+\t  {\n+\t    error (\"-mcpu=%s is not valid\", arg);\n+\t    return false;\n+\t  }\n+\n+\tbfin_cpu_type = bfin_cpus[i].type;\n+\n+\tq = arg + strlen (p);\n+\n+\tif (*q == '\\0')\n+\t  {\n+\t    bfin_si_revision = bfin_cpus[i].si_revision;\n+\t    bfin_workarounds |= bfin_cpus[i].workarounds;\n+\t  }\n+\telse if (strcmp (q, \"-none\") == 0)\n+\t  bfin_si_revision = -1;\n+      \telse if (strcmp (q, \"-any\") == 0)\n+\t  {\n+\t    bfin_si_revision = 0xffff;\n+\t    while (bfin_cpus[i].type == bfin_cpu_type)\n+\t      {\n+\t\tbfin_workarounds |= bfin_cpus[i].workarounds;\n+\t\ti++;\n+\t      }\n+\t  }\n+\telse\n+\t  {\n+\t    unsigned int si_major, si_minor;\n+\t    int rev_len, n;\n+\n+\t    rev_len = strlen (q);\n+\n+\t    if (sscanf (q, \"-%u.%u%n\", &si_major, &si_minor, &n) != 2\n+\t\t|| n != rev_len\n+\t\t|| si_major > 0xff || si_minor > 0xff)\n+\t      {\n+\t      invalid_silicon_revision:\n+\t\terror (\"-mcpu=%s has invalid silicon revision\", arg);\n+\t\treturn false;\n+\t      }\n+\n+\t    bfin_si_revision = (si_major << 8) | si_minor;\n+\n+\t    while (bfin_cpus[i].type == bfin_cpu_type\n+\t\t   && bfin_cpus[i].si_revision != bfin_si_revision)\n+\t      i++;\n+\n+\t    if (bfin_cpus[i].type != bfin_cpu_type)\n+\t      goto invalid_silicon_revision;\n+\n+\t    bfin_workarounds |= bfin_cpus[i].workarounds;\n+\t  }\n+\n+\tif (bfin_cpu_type == BFIN_CPU_BF561)\n \t  warning (0, \"bf561 support is incomplete yet.\");\n-\t  bfin_cpu_type = BFIN_CPU_BF561;\n-\t}\n-      else\n-\treturn false;\n-      return true;\n+\n+\treturn true;\n+      }\n \n     default:\n       return true;\n@@ -2184,6 +2337,16 @@ bfin_init_machine_status (void)\n void\n override_options (void)\n {\n+  if (bfin_csync_anomaly == 1)\n+    bfin_workarounds |= WA_SPECULATIVE_SYNCS;\n+  else if (bfin_csync_anomaly == 0)\n+    bfin_workarounds &= ~WA_SPECULATIVE_SYNCS;\n+\n+  if (bfin_specld_anomaly == 1)\n+    bfin_workarounds |= WA_SPECULATIVE_LOADS;\n+  else if (bfin_specld_anomaly == 0)\n+    bfin_workarounds &= ~WA_SPECULATIVE_LOADS;\n+\n   if (TARGET_OMIT_LEAF_FRAME_POINTER)\n     flag_omit_frame_pointer = 1;\n \n@@ -3312,14 +3475,14 @@ length_for_loop (rtx insn)\n   int length = 0;\n   if (JUMP_P (insn) && any_condjump_p (insn) && !optimize_size)\n     {\n-      if (TARGET_CSYNC_ANOMALY)\n+      if (ENABLE_WA_SPECULATIVE_SYNCS)\n \tlength = 8;\n-      else if (TARGET_SPECLD_ANOMALY)\n+      else if (ENABLE_WA_SPECULATIVE_LOADS)\n \tlength = 6;\n     }\n   else if (LABEL_P (insn))\n     {\n-      if (TARGET_CSYNC_ANOMALY)\n+      if (ENABLE_WA_SPECULATIVE_SYNCS)\n \tlength = 4;\n     }\n \n@@ -4428,7 +4591,7 @@ bfin_reorg (void)\n   if (cfun->machine->has_hardware_loops)\n     bfin_reorg_loops (dump_file);\n \n-  if (! TARGET_SPECLD_ANOMALY && ! TARGET_CSYNC_ANOMALY)\n+  if (! ENABLE_WA_SPECULATIVE_LOADS && ! ENABLE_WA_SPECULATIVE_SYNCS)\n     return;\n \n   /* First pass: find predicted-false branches; if something after them\n@@ -4467,12 +4630,12 @@ bfin_reorg (void)\n \t  if (cycles_since_jump < INT_MAX)\n \t    cycles_since_jump++;\n \n-\t  if (load_insn && TARGET_SPECLD_ANOMALY)\n+\t  if (load_insn && ENABLE_WA_SPECULATIVE_LOADS)\n \t    {\n \t      if (trapping_loads_p (load_insn))\n \t\tdelay_needed = 3;\n \t    }\n-\t  else if (type == TYPE_SYNC && TARGET_CSYNC_ANOMALY)\n+\t  else if (type == TYPE_SYNC && ENABLE_WA_SPECULATIVE_SYNCS)\n \t    delay_needed = 4;\n \n \t  if (delay_needed > cycles_since_jump)\n@@ -4503,7 +4666,7 @@ bfin_reorg (void)\n     }\n   /* Second pass: for predicted-true branches, see if anything at the\n      branch destination needs extra nops.  */\n-  if (! TARGET_CSYNC_ANOMALY)\n+  if (! ENABLE_WA_SPECULATIVE_SYNCS)\n     return;\n \n   for (insn = get_insns (); insn; insn = NEXT_INSN (insn))\n@@ -4536,7 +4699,7 @@ bfin_reorg (void)\n \t\t  if (cycles_since_jump < INT_MAX)\n \t\t    cycles_since_jump++;\n \n-\t\t  if (type == TYPE_SYNC && TARGET_CSYNC_ANOMALY)\n+\t\t  if (type == TYPE_SYNC && ENABLE_WA_SPECULATIVE_SYNCS)\n \t\t    delay_needed = 2;\n \n \t\t  if (delay_needed > cycles_since_jump)"}, {"sha": "5a69ccc72a31825f2353593b6ac2064c546e7609", "filename": "gcc/config/bfin/bfin.h", "status": "modified", "additions": 60, "deletions": 8, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea2382be3f07d1faa3c307d8afc974a0f6cb9122/gcc%2Fconfig%2Fbfin%2Fbfin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea2382be3f07d1faa3c307d8afc974a0f6cb9122/gcc%2Fconfig%2Fbfin%2Fbfin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.h?ref=ea2382be3f07d1faa3c307d8afc974a0f6cb9122", "patch": "@@ -39,16 +39,28 @@ extern int target_flags;\n \n /* Predefinition in the preprocessor for this target machine */\n #ifndef TARGET_CPU_CPP_BUILTINS\n-#define TARGET_CPU_CPP_BUILTINS()               \\\n-  do                                            \\\n-    {                                           \\\n-      builtin_define_std (\"bfin\");              \\\n-      builtin_define_std (\"BFIN\");              \\\n+#define TARGET_CPU_CPP_BUILTINS()\t\t\\\n+  do\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\\\n+      builtin_define_std (\"bfin\");\t\t\\\n+      builtin_define_std (\"BFIN\");\t\t\\\n       builtin_define (\"__ADSPBLACKFIN__\");\t\\\n       builtin_define (\"__ADSPLPBLACKFIN__\");\t\\\n \t\t\t\t\t\t\\\n       switch (bfin_cpu_type)\t\t\t\\\n \t{\t\t\t\t\t\\\n+\tcase BFIN_CPU_BF522:\t\t\t\\\n+\t  builtin_define (\"__ADSPBF522__\");\t\\\n+\t  builtin_define (\"__ADSPBF52x__\");\t\\\n+\t  break;\t\t\t\t\\\n+\tcase BFIN_CPU_BF525:\t\t\t\\\n+\t  builtin_define (\"__ADSPBF525__\");\t\\\n+\t  builtin_define (\"__ADSPBF52x__\");\t\\\n+\t  break;\t\t\t\t\\\n+\tcase BFIN_CPU_BF527:\t\t\t\\\n+\t  builtin_define (\"__ADSPBF527__\");\t\\\n+\t  builtin_define (\"__ADSPBF52x__\");\t\\\n+\t  break;\t\t\t\t\\\n \tcase BFIN_CPU_BF531:\t\t\t\\\n \t  builtin_define (\"__ADSPBF531__\");\t\\\n \t  break;\t\t\t\t\\\n@@ -67,22 +79,62 @@ extern int target_flags;\n \tcase BFIN_CPU_BF537:\t\t\t\\\n \t  builtin_define (\"__ADSPBF537__\");\t\\\n \t  break;\t\t\t\t\\\n+\tcase BFIN_CPU_BF538:\t\t\t\\\n+\t  builtin_define (\"__ADSPBF538__\");\t\\\n+\t  break;\t\t\t\t\\\n+\tcase BFIN_CPU_BF539:\t\t\t\\\n+\t  builtin_define (\"__ADSPBF539__\");\t\\\n+\t  break;\t\t\t\t\\\n+\tcase BFIN_CPU_BF542:\t\t\t\\\n+\t  builtin_define (\"__ADSPBF542__\");\t\\\n+\t  builtin_define (\"__ADSPBF54x__\");\t\\\n+\t  break;\t\t\t\t\\\n+\tcase BFIN_CPU_BF544:\t\t\t\\\n+\t  builtin_define (\"__ADSPBF544__\");\t\\\n+\t  builtin_define (\"__ADSPBF54x__\");\t\\\n+\t  break;\t\t\t\t\\\n+\tcase BFIN_CPU_BF548:\t\t\t\\\n+\t  builtin_define (\"__ADSPBF548__\");\t\\\n+\t  builtin_define (\"__ADSPBF54x__\");\t\\\n+\t  break;\t\t\t\t\\\n+\tcase BFIN_CPU_BF549:\t\t\t\\\n+\t  builtin_define (\"__ADSPBF549__\");\t\\\n+\t  builtin_define (\"__ADSPBF54x__\");\t\\\n+\t  break;\t\t\t\t\\\n \tcase BFIN_CPU_BF561:\t\t\t\\\n \t  builtin_define (\"__ADSPBF561__\");\t\\\n \t  break;\t\t\t\t\\\n \t}\t\t\t\t\t\\\n \t\t\t\t\t\t\\\n+      if (bfin_si_revision != -1)\t\t\\\n+\t{\t\t\t\t\t\\\n+\t  /* space of 0xnnnn and a NUL */\t\\\n+\t  char *buf = alloca (7);\t\t\\\n+\t\t\t\t\t\t\\\n+\t  sprintf (buf, \"0x%04x\", bfin_si_revision);\t\t\t\\\n+\t  builtin_define_with_value (\"__SILICON_REVISION__\", buf, 0);\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+      if (bfin_workarounds)\t\t\t\t\t\t\\\n+\tbuiltin_define (\"__WORKAROUNDS_ENABLED\");\t\t\t\\\n+      if (ENABLE_WA_SPECULATIVE_LOADS)\t\t\t\t\t\\\n+\tbuiltin_define (\"__WORKAROUND_SPECULATIVE_LOADS\");\t\t\\\n+      if (ENABLE_WA_SPECULATIVE_SYNCS)\t\t\t\t\t\\\n+\tbuiltin_define (\"__WORKAROUND_SPECULATIVE_SYNCS\");\t\t\\\n+\t\t\t\t\t\t\\\n       if (TARGET_FDPIC)\t\t\t\t\\\n \tbuiltin_define (\"__BFIN_FDPIC__\");\t\\\n-      if (TARGET_ID_SHARED_LIBRARY)\t\t\\\n+      if (TARGET_ID_SHARED_LIBRARY\t\t\\\n+\t  && !TARGET_SEP_DATA)\t\t\t\\\n \tbuiltin_define (\"__ID_SHARED_LIB__\");\t\\\n       if (flag_no_builtin)\t\t\t\\\n \tbuiltin_define (\"__NO_BUILTIN\");\t\\\n-    }                                           \\\n+    }\t\t\t\t\t\t\\\n   while (0)\n #endif\n \n #define DRIVER_SELF_SPECS SUBTARGET_DRIVER_SELF_SPECS\t\"\\\n+ %{!mcpu=*:-mcpu=bf532} \\\n  %{mleaf-id-shared-library:%{!mid-shared-library:-mid-shared-library}} \\\n  %{mfdpic:%{!fpic:%{!fpie:%{!fPIC:%{!fPIE:\\\n    \t    %{!fno-pic:%{!fno-pie:%{!fno-PIC:%{!fno-PIE:-fpie}}}}}}}}} \\\n@@ -123,7 +175,7 @@ extern int target_flags;\n /* Generate DSP instructions, like DSP halfword loads */\n #define TARGET_DSP\t\t\t(1)\n \n-#define TARGET_DEFAULT (MASK_SPECLD_ANOMALY | MASK_CSYNC_ANOMALY)\n+#define TARGET_DEFAULT 0\n \n /* Maximum number of library ids we permit */\n #define MAX_LIBRARY_ID 255"}, {"sha": "ed79e659b61921953c2263fd7d97c038e9961530", "filename": "gcc/config/bfin/bfin.opt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea2382be3f07d1faa3c307d8afc974a0f6cb9122/gcc%2Fconfig%2Fbfin%2Fbfin.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea2382be3f07d1faa3c307d8afc974a0f6cb9122/gcc%2Fconfig%2Fbfin%2Fbfin.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.opt?ref=ea2382be3f07d1faa3c307d8afc974a0f6cb9122", "patch": "@@ -35,12 +35,12 @@ Target Report Mask(LOW_64K)\n Program is entirely located in low 64k of memory\n \n mcsync-anomaly\n-Target Report Mask(CSYNC_ANOMALY)\n+Target Report Var(bfin_csync_anomaly) Init(-1)\n Work around a hardware anomaly by adding a number of NOPs before a\n CSYNC or SSYNC instruction.\n \n mspecld-anomaly\n-Target Report Mask(SPECLD_ANOMALY)\n+Target Report Var(bfin_specld_anomaly) Init(-1)\n Avoid speculative loads to work around a hardware anomaly.\n \n mid-shared-library"}, {"sha": "f42f60aa4c62aad4e28358c14abf744a72899188", "filename": "gcc/config/bfin/elf.h", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea2382be3f07d1faa3c307d8afc974a0f6cb9122/gcc%2Fconfig%2Fbfin%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea2382be3f07d1faa3c307d8afc974a0f6cb9122/gcc%2Fconfig%2Fbfin%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Felf.h?ref=ea2382be3f07d1faa3c307d8afc974a0f6cb9122", "patch": "@@ -1,20 +1,24 @@\n #undef  STARTFILE_SPEC\n #define STARTFILE_SPEC \"\\\n %{msim:%{!shared:crt0%O%s}} \\\n-%{!msim:%{mcpu=bf531|mcpu=bf532|mcpu=bf533 \\\n-\t  |mcpu=bf534|mcpu=bf536|mcpu=bf537:crt532%O%s} \\\n-\t%{!mcpu=*:crt532%O%s}} \\\n+%{!msim:basiccrt%O%s} \\\n crti%O%s crtbegin%O%s crtlibid%O%s\"\n \n #undef  ENDFILE_SPEC\n #define ENDFILE_SPEC\t\"crtend%O%s crtn%O%s\"\n \n #undef  LIB_SPEC\n #define LIB_SPEC \"--start-group -lc %{msim:-lsim}%{!msim:-lnosys} --end-group \\\n-%{!T*:%{!msim:%{mcpu=bf531:-Tbf531.ld}%{mcpu=bf532:-Tbf532.ld} \\\n-\t      %{mcpu=bf533:-Tbf533.ld}%{mcpu=bf534:-Tbf534.ld} \\\n-\t      %{mcpu=bf536:-Tbf536.ld}%{mcpu=bf537:-Tbf537.ld} \\\n-\t      %{!mcpu=*:-Tbf532.ld}}}\"\n+%{!T*:%{!msim:%{mcpu=bf522*:-T bf522.ld%s}%{mcpu=bf525*:-T bf525.ld%s} \\\n+\t      %{mcpu=bf527*:-T bf527.ld%s} \\\n+\t      %{mcpu=bf531*:-T bf531.ld%s}%{mcpu=bf532*:-T bf532.ld%s} \\\n+\t      %{mcpu=bf533*:-T bf533.ld%s}%{mcpu=bf534*:-T bf534.ld%s} \\\n+\t      %{mcpu=bf536*:-T bf536.ld%s}%{mcpu=bf537*:-T bf537.ld%s} \\\n+\t      %{mcpu=bf538*:-T bf538.ld%s}%{mcpu=bf539*:-T bf539.ld%s} \\\n+\t      %{mcpu=bf542*:-T bf542.ld%s}%{mcpu=bf544*:-T bf544.ld%s} \\\n+\t      %{mcpu=bf548*:-T bf548.ld%s}%{mcpu=bf549*:-T bf549.ld%s} \\\n+\t      %{!mcpu=*:-T bf532.ld%s} \\\n+\t      -T bfin-common-sc.ld%s}}\"\n \n #undef USER_LABEL_PREFIX\n #define USER_LABEL_PREFIX \"_\""}, {"sha": "c33ff47c335d6b85bf1837501d3c24ecd231eb1b", "filename": "gcc/config/bfin/print-sysroot-suffix.sh", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea2382be3f07d1faa3c307d8afc974a0f6cb9122/gcc%2Fconfig%2Fbfin%2Fprint-sysroot-suffix.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea2382be3f07d1faa3c307d8afc974a0f6cb9122/gcc%2Fconfig%2Fbfin%2Fprint-sysroot-suffix.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fprint-sysroot-suffix.sh?ref=ea2382be3f07d1faa3c307d8afc974a0f6cb9122", "patch": "@@ -0,0 +1,81 @@\n+#!/bin/sh\n+# Copyright (C) 2007 Free Software Foundation, Inc.\n+# This file is part of GCC.\n+\n+# GCC is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3, or (at your option)\n+# any later version.\n+\n+# GCC is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# This script takes the following arguments:\n+#\n+#    - the target sysroot\n+#    - the value of $(MULTILIB_MATCHES)\n+#    - the value of $(MULTILIB_OPTIONS)\n+#\n+# It uses these arguments to construct a definition of SYSROOT_SUFFIX_SPEC,\n+# which it prints to the standard output.  For each multilib directory FOO,\n+# the script checks whether $sysroot has a subdirectory FOO, and if so will\n+# use /FOO for all compatible command-line options.  It will not add a\n+# suffix for /FOO's options otherwise.  These suffixes are concatenated,\n+# with one subspec for each space-separated entry in $(MULTILIB_OPTIONS).\n+set -e\n+sysroot=$1\n+matches=$2\n+options=$3\n+\n+# For each multilib option OPT, add to $substs a sed command of the\n+# form \"-e 's/OPT/OPT/'\".\n+substs=\"\"\n+for option in `echo \"$options\" | tr '/' ' '`\n+do\n+  substs=\"$substs -e 's/$option/$option/g'\"\n+done\n+\n+# For each ALIAS=CANONICAL entry in $MULTILIB_MATCHES, look for sed\n+# arguments in $substs of the form \"-e 's/CANONICAL/.../'\".  Replace\n+# such entries with \"-e 's/CANONICAL/ALIAS|.../'\".  Both the ALIAS and\n+# CANONICAL parts of $MULTILIB_MATCHES use '?' to stand for '='.\n+#\n+# After this loop, a command of the form \"echo FOO | eval sed $substs\"\n+# will replace a canonical option FOO with a %{...}-style spec pattern.\n+for match in $matches\n+do\n+  canonical=`echo \"$match\" | sed -e 's/=.*//' -e 's/?/=/g'`\n+  alias=`echo \"$match\" | sed -e 's/.*=//' -e 's/?/=/g'`\n+  substs=`echo \"$substs\" | sed -e \"s,s/$canonical/,&$alias|,\"`\n+done\n+\n+# Build up the final SYSROOT_SUFFIX_SPEC in $spec.\n+spec=\n+for combo in $options\n+do\n+  # See which option alternatives in $combo have their own sysroot\n+  # directory.  Create a subspec of the form \"%{PAT1:/DIR1;...;PATn:DIRn}\"\n+  # from each such option OPTi, where DIRi is the directory associated\n+  # with OPTi and PATi is the result of passing OPTi through $substs.\n+  subspec=\n+  for option in `echo \"$combo\" | tr '/' ' '`\n+  do\n+    dir=`echo \"$option\" | sed 's/mcpu=//'`\n+    if test -d \"$sysroot/$dir\"; then\n+      test -z \"$subspec\" || subspec=\"$subspec;\"\n+      subspec=\"$subspec\"`echo \"$option\" | eval sed $substs`\":/$dir\"\n+    fi\n+  done\n+  # Concatenate all the subspecs.\n+  test -z \"$subspec\" || spec=\"$spec%{$subspec}\"\n+done\n+if test -n \"$spec\"; then\n+  echo \"#undef SYSROOT_SUFFIX_SPEC\"\n+  echo \"#define SYSROOT_SUFFIX_SPEC \\\"$spec\\\"\"\n+fi"}, {"sha": "d81da3c3bb6d07fd94b06425fa0a1242872a8eaa", "filename": "gcc/config/bfin/t-bfin-elf", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea2382be3f07d1faa3c307d8afc974a0f6cb9122/gcc%2Fconfig%2Fbfin%2Ft-bfin-elf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea2382be3f07d1faa3c307d8afc974a0f6cb9122/gcc%2Fconfig%2Fbfin%2Ft-bfin-elf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Ft-bfin-elf?ref=ea2382be3f07d1faa3c307d8afc974a0f6cb9122", "patch": "@@ -4,8 +4,6 @@ LIB1ASMSRC = bfin/lib1funcs.asm\n LIB1ASMFUNCS = _divsi3 _udivsi3 _umodsi3 _modsi3 _umulsi3_highpart\n LIB1ASMFUNCS += _smulsi3_highpart\n \n-EXTRA_PARTS = crtbegin.o crtend.o crtbeginS.o crtendS.o crti.o crtn.o crtlibid.o\n-\n FPBIT = fp-bit.c\n DPBIT = dp-bit.c\n \n@@ -19,12 +17,17 @@ fp-bit.c: $(srcdir)/config/fp-bit.c\n CRTSTUFF_T_CFLAGS = -fpic\n TARGET_LIBGCC2_CFLAGS = -fpic\n \n-MULTILIB_OPTIONS=mid-shared-library mleaf-id-shared-library\n-MULTILIB_OPTIONS+=msep-data mfdpic\n-MULTILIB_DEFAULTS=\n-MULTILIB_DIRNAMES=\n-MULTILIB_EXCEPTIONS=mid-shared-library*/mfdpic mleaf-id-shared-library*\n-MULTILIB_EXCEPTIONS+=*msep-data*\n+MULTILIB_OPTIONS=mcpu=bf532-none/mcpu=bf532-0.3\n+MULTILIB_OPTIONS+=mid-shared-library/msep-data/mfdpic mleaf-id-shared-library\n+MULTILIB_DIRNAMES=bf532-none bf532-0.3 mid-shared-library msep-data mfdpic mleaf-id-shared-library\n+MULTILIB_MATCHES=mcpu?bf532-none=mcpu?bf561\n+MULTILIB_MATCHES+=mcpu?bf532-none=mcpu?bf531-none mcpu?bf532-none=mcpu?bf533-none mcpu?bf532-none=mcpu?bf534-none mcpu?bf532-none=mcpu?bf536-none mcpu?bf532-none=mcpu?bf537-none mcpu?bf532-none=mcpu?bf561-none mcpu?bf532-none=mcpu?bf561-0.5\n+MULTILIB_MATCHES+=mcpu?bf532-0.3=mcpu?bf531-0.4 mcpu?bf532-0.3=mcpu?bf531-0.3 mcpu?bf532-0.3=mcpu?bf532-0.4 mcpu?bf532-0.3=mcpu?bf534-0.4 mcpu?bf532-0.3=mcpu?bf534-0.3 mcpu?bf532-0.3=mcpu?bf534-0.2 mcpu?bf532-0.3=mcpu?bf534-0.1 mcpu?bf532-0.3=mcpu?bf536-0.2 mcpu?bf532-0.3=mcpu?bf536-0.1 mcpu?bf532-0.3=mcpu?bf537-0.2 mcpu?bf532-0.3=mcpu?bf537-0.1 mcpu?bf532-0.3=mcpu?bf561-0.3 mcpu?bf532-0.3=mcpu?bf561-0.2 mcpu?bf532-0.3=mcpu?bf531-any mcpu?bf532-0.3=mcpu?bf532-any mcpu?bf532-0.3=mcpu?bf533-any mcpu?bf532-0.3=mcpu?bf534-any mcpu?bf532-0.3=mcpu?bf536-any mcpu?bf532-0.3=mcpu?bf537-any mcpu?bf532-0.3=mcpu?bf561-any\n+MULTILIB_EXCEPTIONS=mleaf-id-shared-library*\n+MULTILIB_EXCEPTIONS+=mcpu=bf532-0.3/mleaf-id-shared-library*\n+MULTILIB_EXCEPTIONS+=mcpu=bf532-none/mleaf-id-shared-library*\n+MULTILIB_EXCEPTIONS+=*mfdpic/mleaf-id-shared-library*\n+MULTILIB_EXCEPTIONS+=*msep-data/mleaf-id-shared-library*\n \n # Assemble startup files.\n $(T)crti.o: $(srcdir)/config/bfin/crti.s $(GCC_PASSES)"}, {"sha": "a632e906ad9c6d18a3eb38366f32cc66e078a0f3", "filename": "gcc/config/bfin/t-bfin-linux", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea2382be3f07d1faa3c307d8afc974a0f6cb9122/gcc%2Fconfig%2Fbfin%2Ft-bfin-linux", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea2382be3f07d1faa3c307d8afc974a0f6cb9122/gcc%2Fconfig%2Fbfin%2Ft-bfin-linux", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Ft-bfin-linux?ref=ea2382be3f07d1faa3c307d8afc974a0f6cb9122", "patch": "@@ -4,8 +4,6 @@ LIB1ASMSRC = bfin/lib1funcs.asm\n LIB1ASMFUNCS = _divsi3 _udivsi3 _umodsi3 _modsi3 _umulsi3_highpart\n LIB1ASMFUNCS += _smulsi3_highpart\n \n-EXTRA_PARTS = crtbegin.o crtend.o crtbeginS.o crtendS.o\n-\n FPBIT = fp-bit.c\n DPBIT = dp-bit.c\n \n@@ -19,6 +17,12 @@ fp-bit.c: $(srcdir)/config/fp-bit.c\n CRTSTUFF_T_CFLAGS = -fpic\n TARGET_LIBGCC2_CFLAGS = -fpic\n \n+MULTILIB_OPTIONS=mcpu=bf532-none/mcpu=bf532-0.3\n+MULTILIB_DIRNAMES=bf532-none bf532-0.3\n+MULTILIB_MATCHES=mcpu?bf532-none=mcpu?bf561\n+MULTILIB_MATCHES+=mcpu?bf532-none=mcpu?bf531-none mcpu?bf532-none=mcpu?bf533-none mcpu?bf532-none=mcpu?bf534-none mcpu?bf532-none=mcpu?bf536-none mcpu?bf532-none=mcpu?bf537-none mcpu?bf532-none=mcpu?bf561-none mcpu?bf532-none=mcpu?bf561-0.5\n+MULTILIB_MATCHES+=mcpu?bf532-0.3=mcpu?bf531-0.4 mcpu?bf532-0.3=mcpu?bf531-0.3 mcpu?bf532-0.3=mcpu?bf532-0.4 mcpu?bf532-0.3=mcpu?bf533-0.4 mcpu?bf532-0.3=mcpu?bf533-0.3 mcpu?bf532-0.3=mcpu?bf534-0.2 mcpu?bf532-0.3=mcpu?bf534-0.1 mcpu?bf532-0.3=mcpu?bf536-0.2 mcpu?bf532-0.3=mcpu?bf536-0.1 mcpu?bf532-0.3=mcpu?bf537-0.2 mcpu?bf532-0.3=mcpu?bf537-0.1 mcpu?bf532-0.3=mcpu?bf561-0.3 mcpu?bf532-0.3=mcpu?bf561-0.2 mcpu?bf532-0.3=mcpu?bf531-any mcpu?bf532-0.3=mcpu?bf532-any mcpu?bf532-0.3=mcpu?bf533-any mcpu?bf532-0.3=mcpu?bf534-any mcpu?bf532-0.3=mcpu?bf536-any mcpu?bf532-0.3=mcpu?bf537-any mcpu?bf532-0.3=mcpu?bf561-any\n+\n # Assemble startup files.\n $(T)crti.o: $(srcdir)/config/bfin/crti.s $(GCC_PASSES)\n \t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(MULTILIB_CFLAGS) $(INCLUDES) \\\n@@ -28,7 +32,13 @@ $(T)crtn.o: $(srcdir)/config/bfin/crtn.s $(GCC_PASSES)\n \t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(MULTILIB_CFLAGS) $(INCLUDES) \\\n \t-c -o $(T)crtn.o -x assembler-with-cpp $(srcdir)/config/bfin/crtn.s\n \n-EXTRA_MULTILIB_PARTS = crtbegin.o crtend.o crtbeginS.o crtendS.o\n-\n SHLIB_MAPFILES=$(srcdir)/config/bfin/libgcc-bfin.ver\n \n+EXTRA_MULTILIB_PARTS = crtbegin.o crtend.o crtbeginS.o crtendS.o crti.o crtn.o\n+\n+# This rule uses MULTILIB_MATCHES to generate a definition of\n+# SYSROOT_SUFFIX_SPEC.\n+linux-sysroot-suffix.h: $(srcdir)/config/bfin/print-sysroot-suffix.sh\n+\t$(SHELL) $(srcdir)/config/bfin/print-sysroot-suffix.sh \\\n+\t  \"$(SYSTEM_HEADER_DIR)/../..\" \"$(MULTILIB_MATCHES)\" \\\n+\t  \"$(MULTILIB_OPTIONS)\" > $@"}, {"sha": "a323824c8c3a7bf7dd7f36cec89595160b8477fd", "filename": "gcc/config/bfin/t-bfin-uclinux", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea2382be3f07d1faa3c307d8afc974a0f6cb9122/gcc%2Fconfig%2Fbfin%2Ft-bfin-uclinux", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea2382be3f07d1faa3c307d8afc974a0f6cb9122/gcc%2Fconfig%2Fbfin%2Ft-bfin-uclinux", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Ft-bfin-uclinux?ref=ea2382be3f07d1faa3c307d8afc974a0f6cb9122", "patch": "@@ -4,8 +4,6 @@ LIB1ASMSRC = bfin/lib1funcs.asm\n LIB1ASMFUNCS = _divsi3 _udivsi3 _umodsi3 _modsi3 _umulsi3_highpart\n LIB1ASMFUNCS += _smulsi3_highpart\n \n-EXTRA_PARTS = crtbegin.o crtend.o crtbeginS.o crtendS.o crti.o crtn.o crtlibid.o\n-\n FPBIT = fp-bit.c\n DPBIT = dp-bit.c\n \n@@ -19,12 +17,16 @@ fp-bit.c: $(srcdir)/config/fp-bit.c\n CRTSTUFF_T_CFLAGS = -fpic\n TARGET_LIBGCC2_CFLAGS = -fpic\n \n-MULTILIB_OPTIONS=mid-shared-library mleaf-id-shared-library\n-MULTILIB_OPTIONS+=msep-data\n-MULTILIB_DEFAULTS=\n-MULTILIB_DIRNAMES=\n+MULTILIB_OPTIONS=mcpu=bf532-none/mcpu=bf532-0.3\n+MULTILIB_OPTIONS+=mid-shared-library/msep-data mleaf-id-shared-library\n+MULTILIB_DIRNAMES=bf532-none bf532-0.3 mid-shared-library msep-data mleaf-id-shared-library\n+MULTILIB_MATCHES=mcpu?bf532-none=mcpu?bf561\n+MULTILIB_MATCHES+=mcpu?bf532-none=mcpu?bf531-none mcpu?bf532-none=mcpu?bf533-none mcpu?bf532-none=mcpu?bf534-none mcpu?bf532-none=mcpu?bf536-none mcpu?bf532-none=mcpu?bf537-none mcpu?bf532-none=mcpu?bf561-none mcpu?bf532-none=mcpu?bf561-0.5\n+MULTILIB_MATCHES+=mcpu?bf532-0.3=mcpu?bf531-0.4 mcpu?bf532-0.3=mcpu?bf531-0.3 mcpu?bf532-0.3=mcpu?bf532-0.4 mcpu?bf532-0.3=mcpu?bf533-0.4 mcpu?bf532-0.3=mcpu?bf533-0.3 mcpu?bf532-0.3=mcpu?bf534-0.2 mcpu?bf532-0.3=mcpu?bf534-0.1 mcpu?bf532-0.3=mcpu?bf536-0.2 mcpu?bf532-0.3=mcpu?bf536-0.1 mcpu?bf532-0.3=mcpu?bf537-0.2 mcpu?bf532-0.3=mcpu?bf537-0.1 mcpu?bf532-0.3=mcpu?bf561-0.3 mcpu?bf532-0.3=mcpu?bf561-0.2 mcpu?bf532-0.3=mcpu?bf531-any mcpu?bf532-0.3=mcpu?bf532-any mcpu?bf532-0.3=mcpu?bf533-any mcpu?bf532-0.3=mcpu?bf534-any mcpu?bf532-0.3=mcpu?bf536-any mcpu?bf532-0.3=mcpu?bf537-any mcpu?bf532-0.3=mcpu?bf561-any\n MULTILIB_EXCEPTIONS=mleaf-id-shared-library*\n-MULTILIB_EXCEPTIONS+=*msep-data*\n+MULTILIB_EXCEPTIONS+=mcpu=bf532-0.3/mleaf-id-shared-library*\n+MULTILIB_EXCEPTIONS+=mcpu=bf532-none/mleaf-id-shared-library*\n+MULTILIB_EXCEPTIONS+=*msep-data/mleaf-id-shared-library*\n \n # Assemble startup files.\n $(T)crti.o: $(srcdir)/config/bfin/crti.s $(GCC_PASSES)"}, {"sha": "ddd95a493d9f4a76bb32c917619ac44a18e74d86", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 34, "deletions": 17, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea2382be3f07d1faa3c307d8afc974a0f6cb9122/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea2382be3f07d1faa3c307d8afc974a0f6cb9122/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=ea2382be3f07d1faa3c307d8afc974a0f6cb9122", "patch": "@@ -444,13 +444,14 @@ Objective-C and Objective-C++ Dialects}.\n -mcall-prologues  -mno-tablejump  -mtiny-stack  -mint8}\n \n @emph{Blackfin Options}\n-@gccoptlist{-mcpu=@var{cpu}  -msim  -momit-leaf-frame-pointer @gol\n--mno-omit-leaf-frame-pointer  -mspecld-anomaly  -mno-specld-anomaly @gol\n--mcsync-anomaly  -mno-csync-anomaly  -mlow-64k  -mno-low64k @gol\n--mstack-check-l1  -mid-shared-library  -mno-id-shared-library @gol\n--mshared-library-id=@var{n}  -mleaf-id-shared-library @gol\n--mno-leaf-id-shared-library  -msep-data  -mno-sep-data  -mlong-calls @gol\n--mno-long-calls -mfast-fp -minline-plt}\n+@gccoptlist{-mcpu=@var{cpu}@r{[}-@var{sirevision}@r{]} @gol\n+-msim -momit-leaf-frame-pointer  -mno-omit-leaf-frame-pointer @gol\n+-mspecld-anomaly  -mno-specld-anomaly  -mcsync-anomaly  -mno-csync-anomaly @gol\n+-mlow-64k -mno-low64k  -mstack-check-l1  -mid-shared-library @gol\n+-mno-id-shared-library  -mshared-library-id=@var{n} @gol\n+-mleaf-id-shared-library  -mno-leaf-id-shared-library @gol\n+-msep-data  -mno-sep-data  -mlong-calls  -mno-long-calls @gol\n+-mfast-fp -minline-plt}\n \n @emph{CRIS Options}\n @gccoptlist{-mcpu=@var{cpu}  -march=@var{cpu}  -mtune=@var{cpu} @gol\n@@ -8556,16 +8557,32 @@ size.\n @cindex Blackfin Options\n \n @table @gcctabopt\n-@item -mcpu=@var{cpu}\n+@item -mcpu=@var{cpu}@r{[}-@var{sirevision}@r{]}\n @opindex mcpu=\n-Specifies the name of the target Blackfin processor. Currently, @var{cpu}\n-can be one of @samp{bf531}, @samp{bf532}, @samp{bf533},\n-@samp{bf534}, @samp{bf536}, @samp{bf537}, @samp{bf561}.\n+Specifies the name of the target Blackfin processor.  Currently, @var{cpu}\n+can be one of @samp{bf522}, @samp{bf525}, @samp{bf527},\n+@samp{bf531}, @samp{bf532}, @samp{bf533}, @samp{bf534},\n+@samp{bf536}, @samp{bf537}, @samp{bf538}, @samp{bf539},\n+@samp{bf542}, @samp{bf544}, @samp{bf548}, @samp{bf549},\n+@samp{bf561}.\n+The optional @var{sirevision} specifies the silicon revision of the target\n+Blackfin processor.  Any workarounds available for the targeted silicon revision\n+will be enabled.  If @var{sirevision} is @samp{none}, no workarounds are enabled.\n+If @var{sirevision} is @samp{any}, all workarounds for the targeted processor\n+will be enabled.  The @code{__SILICON_REVISION__} macro is defined to two\n+hexadecimal digits representing the major and minor numbers in the silicon\n+revision.  If @var{sirevision} is @samp{none}, the @code{__SILICON_REVISION__}\n+is not defined.  If @var{sirevision} is @samp{any}, the\n+@code{__SILICON_REVISION__} is defined to be @code{0xffff}.\n+If this optional @var{sirevision} is not used, GCC assumes the latest known\n+silicon revision of the targeted Blackfin processor.\n+\n+Support for @samp{bf561} is incomplete.  For @samp{bf561},\n+Only the processor macro is defined.\n Without this option, @samp{bf532} is used as the processor by default.\n The corresponding predefined processor macros for @var{cpu} is to\n-be defined.  For the @samp{bfin-elf} toolchain, this causes the hardware\n-BSP provided by libgloss to be linked in if @samp{-msim} is not given.\n-Support for @samp{bf561} is incomplete; only the processor macro is defined.\n+be defined.  And for @samp{bfin-elf} toolchain, this causes the hardware BSP\n+provided by libgloss to be linked in if @option{-msim} is not given.\n \n @item -msim\n @opindex msim\n@@ -8584,8 +8601,8 @@ which might make debugging harder.\n @item -mspecld-anomaly\n @opindex mspecld-anomaly\n When enabled, the compiler will ensure that the generated code does not\n-contain speculative loads after jump instructions.  This option is enabled\n-by default.\n+contain speculative loads after jump instructions. If this option is used,\n+@code{__WORKAROUND_SPECULATIVE_LOADS} is defined.\n \n @item -mno-specld-anomaly\n @opindex mno-specld-anomaly\n@@ -8595,7 +8612,7 @@ Don't generate extra code to prevent speculative loads from occurring.\n @opindex mcsync-anomaly\n When enabled, the compiler will ensure that the generated code does not\n contain CSYNC or SSYNC instructions too soon after conditional branches.\n-This option is enabled by default.\n+If this option is used, @code{__WORKAROUND_SPECULATIVE_SYNCS} is defined.\n \n @item -mno-csync-anomaly\n @opindex mno-csync-anomaly"}, {"sha": "0558df6c31cf9ce5766660db7b28f6854a7c1816", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea2382be3f07d1faa3c307d8afc974a0f6cb9122/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea2382be3f07d1faa3c307d8afc974a0f6cb9122/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ea2382be3f07d1faa3c307d8afc974a0f6cb9122", "patch": "@@ -1,3 +1,15 @@\n+2007-09-19  Jie Zhang  <jie.zhang@analog.com>\n+\n+\t* gcc.target/bfin/bfin.exp: New.\n+\t* gcc.target/bfin/{workarounds-any.c, workarounds-none.c,\n+\tworkarounds-1.c, workarounds-2.c, workarounds-3.c, workarounds-4.c,\n+\tmcpu-bf522.c, mcpu-bf525.c, mcpu-bf527.c,\n+\tmcpu-bf531.c, mcpu-bf532.c, mcpu-bf533.c,\n+\tmcpu-bf534.c, mcpu-bf536.c, mcpu-bf537.c,\n+\tmcpu-bf538.c, mcpu-bf539.c, mcpu-bf542.c,\n+\tmcpu-bf544.c, mcpu-bf548.c, mcpu-bf549.c,\n+\tmcpu-bf561.c, mcpu-default.c}: New tests.\n+\n 2007-09-18  Sandra Loosemore  <sandra@codesourcery.com>\n \n \tRestore detection of unsupported TLS."}, {"sha": "854713e2f48723557a5da76587116f9aa9e49483", "filename": "gcc/testsuite/gcc.target/bfin/bfin.exp", "status": "modified", "additions": 49, "deletions": 9, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea2382be3f07d1faa3c307d8afc974a0f6cb9122/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fbfin.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea2382be3f07d1faa3c307d8afc974a0f6cb9122/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fbfin.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fbfin.exp?ref=ea2382be3f07d1faa3c307d8afc974a0f6cb9122", "patch": "@@ -1,23 +1,63 @@\n-# Tests for the Blackfin\n+# Copyright (C) 2007 Free Software Foundation, Inc.\n \n-if {![istarget bfin-*]} {\n-    return 0\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# GCC testsuite that uses the `dg.exp' driver.\n+\n+# Exit immediately if this isn't an BFIN target.\n+if ![istarget bfin-*-*] then {\n+  return\n }\n \n+# Load support procs.\n load_lib gcc-dg.exp\n \n-# If a testcase doesn't have special options, use these.\n-global DEFAULT_CFLAGS\n-if ![info exists DEFAULT_CFLAGS] then {\n-    set DEFAULT_CFLAGS \" -ansi -pedantic-errors\"\n+# Like dg-options, but treats certain Blackfin-specific options specially:\n+#\n+#    -mcpu=*\n+#\tSelect the target cpu. Skip the test if the multilib flags force\n+#\ta different cpu.\n+proc dg-bfin-options {args} {\n+    upvar dg-extra-tool-flags extra_tool_flags\n+    upvar dg-do-what do_what\n+\n+    set multilib_cpu \"\"\n+    set cpu \"\"\n+\n+    foreach flag [target_info multilib_flags] {\n+\tregexp \"^-mcpu=(.*)\" $flag dummy multilib_cpu\n+    }\n+\n+    set flags [lindex $args 1]\n+\n+    foreach flag $flags {\n+\tregexp \"^-mcpu=(.*)\" $flag dummy cpu\n+    }\n+\n+    if {$multilib_cpu == \"\" || $multilib_cpu == $cpu} {\n+\tset extra_tool_flags $flags\n+    } else {\n+\tset do_what [list [lindex $do_what 0] \"N\" \"P\"]\n+    }\n }\n \n # Initialize `dg'.\n dg-init\n \n # Main loop.\n-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.\\[cS\\]]] \\\n-\t\"\" $DEFAULT_CFLAGS\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.\\[cCS\\]]]\t\"\" \"\"\n \n # All done.\n dg-finish"}, {"sha": "5674cab62446bf740f2651cf64f8fa9e1177e706", "filename": "gcc/testsuite/gcc.target/bfin/mcpu-bf522.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea2382be3f07d1faa3c307d8afc974a0f6cb9122/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fmcpu-bf522.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea2382be3f07d1faa3c307d8afc974a0f6cb9122/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fmcpu-bf522.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fmcpu-bf522.c?ref=ea2382be3f07d1faa3c307d8afc974a0f6cb9122", "patch": "@@ -0,0 +1,27 @@\n+/* Test for -mcpu=.  */\n+/* { dg-do preprocess } */\n+/* { dg-bfin-options \"-mcpu=bf522\" } */\n+\n+#ifndef __ADSPBF522__\n+#error \"__ADSPBF522__ is not defined\"\n+#endif\n+\n+#ifndef __ADSPBF52x__\n+#error \"__ADSPBF52x__ is not defined\"\n+#endif\n+\n+#if __SILICON_REVISION__ != 0x0000\n+#error \"__SILICON_REVISION__ is not 0x0000\"\n+#endif\n+\n+#ifndef __WORKAROUNDS_ENABLED\n+#error \"__WORKAROUNDS_ENABLED is not defined\"\n+#endif\n+\n+#ifndef __WORKAROUND_SPECULATIVE_LOADS\n+#error \"__WORKAROUND_SPECULATIVE_LOADS is not defined\"\n+#endif\n+\n+#ifdef __WORKAROUND_SPECULATIVE_SYNCS\n+#error \"__WORKAROUND_SPECULATIVE_SYNCS is defined\"\n+#endif"}, {"sha": "1be53666945bcc7e33111fbf1c190f51c0304a3f", "filename": "gcc/testsuite/gcc.target/bfin/mcpu-bf525.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea2382be3f07d1faa3c307d8afc974a0f6cb9122/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fmcpu-bf525.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea2382be3f07d1faa3c307d8afc974a0f6cb9122/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fmcpu-bf525.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fmcpu-bf525.c?ref=ea2382be3f07d1faa3c307d8afc974a0f6cb9122", "patch": "@@ -0,0 +1,27 @@\n+/* Test for -mcpu=.  */\n+/* { dg-do preprocess } */\n+/* { dg-bfin-options \"-mcpu=bf525\" } */\n+\n+#ifndef __ADSPBF525__\n+#error \"__ADSPBF525__ is not defined\"\n+#endif\n+\n+#ifndef __ADSPBF52x__\n+#error \"__ADSPBF52x__ is not defined\"\n+#endif\n+\n+#if __SILICON_REVISION__ != 0x0000\n+#error \"__SILICON_REVISION__ is not 0x0000\"\n+#endif\n+\n+#ifndef __WORKAROUNDS_ENABLED\n+#error \"__WORKAROUNDS_ENABLED is not defined\"\n+#endif\n+\n+#ifndef __WORKAROUND_SPECULATIVE_LOADS\n+#error \"__WORKAROUND_SPECULATIVE_LOADS is not defined\"\n+#endif\n+\n+#ifdef __WORKAROUND_SPECULATIVE_SYNCS\n+#error \"__WORKAROUND_SPECULATIVE_SYNCS is defined\"\n+#endif"}, {"sha": "50edb81eb3cf0f921b96767f228102f509924d44", "filename": "gcc/testsuite/gcc.target/bfin/mcpu-bf527.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea2382be3f07d1faa3c307d8afc974a0f6cb9122/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fmcpu-bf527.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea2382be3f07d1faa3c307d8afc974a0f6cb9122/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fmcpu-bf527.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fmcpu-bf527.c?ref=ea2382be3f07d1faa3c307d8afc974a0f6cb9122", "patch": "@@ -0,0 +1,27 @@\n+/* Test for -mcpu=.  */\n+/* { dg-do preprocess } */\n+/* { dg-bfin-options \"-mcpu=bf527\" } */\n+\n+#ifndef __ADSPBF527__\n+#error \"__ADSPBF527__ is not defined\"\n+#endif\n+\n+#ifndef __ADSPBF52x__\n+#error \"__ADSPBF52x__ is not defined\"\n+#endif\n+\n+#if __SILICON_REVISION__ != 0x0000\n+#error \"__SILICON_REVISION__ is not 0x0000\"\n+#endif\n+\n+#ifndef __WORKAROUNDS_ENABLED\n+#error \"__WORKAROUNDS_ENABLED is not defined\"\n+#endif\n+\n+#ifndef __WORKAROUND_SPECULATIVE_LOADS\n+#error \"__WORKAROUND_SPECULATIVE_LOADS is not defined\"\n+#endif\n+\n+#ifdef __WORKAROUND_SPECULATIVE_SYNCS\n+#error \"__WORKAROUND_SPECULATIVE_SYNCS is defined\"\n+#endif"}, {"sha": "efacc5a0ade4cb481d394f63fa3e63db8c0ee1b3", "filename": "gcc/testsuite/gcc.target/bfin/mcpu-bf531.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea2382be3f07d1faa3c307d8afc974a0f6cb9122/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fmcpu-bf531.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea2382be3f07d1faa3c307d8afc974a0f6cb9122/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fmcpu-bf531.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fmcpu-bf531.c?ref=ea2382be3f07d1faa3c307d8afc974a0f6cb9122", "patch": "@@ -0,0 +1,23 @@\n+/* Test for -mcpu=.  */\n+/* { dg-do preprocess } */\n+/* { dg-bfin-options \"-mcpu=bf531\" } */\n+\n+#ifndef __ADSPBF531__\n+#error \"__ADSPBF531__ is not defined\"\n+#endif\n+\n+#if __SILICON_REVISION__ != 0x0005\n+#error \"__SILICON_REVISION__ is not 0x0005\"\n+#endif\n+\n+#ifndef __WORKAROUNDS_ENABLED\n+#error \"__WORKAROUNDS_ENABLED is not defined\"\n+#endif\n+\n+#ifndef __WORKAROUND_SPECULATIVE_LOADS\n+#error \"__WORKAROUND_SPECULATIVE_LOADS is not defined\"\n+#endif\n+\n+#ifdef __WORKAROUND_SPECULATIVE_SYNCS\n+#error \"__WORKAROUND_SPECULATIVE_SYNCS is defined\"\n+#endif"}, {"sha": "85cad2e87e9ab29eb039090fea96b8a8148dd5d6", "filename": "gcc/testsuite/gcc.target/bfin/mcpu-bf532.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea2382be3f07d1faa3c307d8afc974a0f6cb9122/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fmcpu-bf532.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea2382be3f07d1faa3c307d8afc974a0f6cb9122/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fmcpu-bf532.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fmcpu-bf532.c?ref=ea2382be3f07d1faa3c307d8afc974a0f6cb9122", "patch": "@@ -0,0 +1,23 @@\n+/* Test for -mcpu=.  */\n+/* { dg-do preprocess } */\n+/* { dg-bfin-options \"-mcpu=bf532\" } */\n+\n+#ifndef __ADSPBF532__\n+#error \"__ADSPBF532__ is not defined\"\n+#endif\n+\n+#if __SILICON_REVISION__ != 0x0005\n+#error \"__SILICON_REVISION__ is not 0x0005\"\n+#endif\n+\n+#ifndef __WORKAROUNDS_ENABLED\n+#error \"__WORKAROUNDS_ENABLED is not defined\"\n+#endif\n+\n+#ifndef __WORKAROUND_SPECULATIVE_LOADS\n+#error \"__WORKAROUND_SPECULATIVE_LOADS is not defined\"\n+#endif\n+\n+#ifdef __WORKAROUND_SPECULATIVE_SYNCS\n+#error \"__WORKAROUND_SPECULATIVE_SYNCS is defined\"\n+#endif"}, {"sha": "9c0478ffb9678e6ce4640ef90a24991697dd3d8a", "filename": "gcc/testsuite/gcc.target/bfin/mcpu-bf533.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea2382be3f07d1faa3c307d8afc974a0f6cb9122/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fmcpu-bf533.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea2382be3f07d1faa3c307d8afc974a0f6cb9122/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fmcpu-bf533.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fmcpu-bf533.c?ref=ea2382be3f07d1faa3c307d8afc974a0f6cb9122", "patch": "@@ -0,0 +1,23 @@\n+/* Test for -mcpu=.  */\n+/* { dg-do preprocess } */\n+/* { dg-bfin-options \"-mcpu=bf533\" } */\n+\n+#ifndef __ADSPBF533__\n+#error \"__ADSPBF533__ is not defined\"\n+#endif\n+\n+#if __SILICON_REVISION__ != 0x0005\n+#error \"__SILICON_REVISION__ is not 0x0005\"\n+#endif\n+\n+#ifndef __WORKAROUNDS_ENABLED\n+#error \"__WORKAROUNDS_ENABLED is not defined\"\n+#endif\n+\n+#ifndef __WORKAROUND_SPECULATIVE_LOADS\n+#error \"__WORKAROUND_SPECULATIVE_LOADS is not defined\"\n+#endif\n+\n+#ifdef __WORKAROUND_SPECULATIVE_SYNCS\n+#error \"__WORKAROUND_SPECULATIVE_SYNCS is defined\"\n+#endif"}, {"sha": "89c087ec5ed2e5f044cf5ea5bec31788960df3c8", "filename": "gcc/testsuite/gcc.target/bfin/mcpu-bf534.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea2382be3f07d1faa3c307d8afc974a0f6cb9122/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fmcpu-bf534.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea2382be3f07d1faa3c307d8afc974a0f6cb9122/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fmcpu-bf534.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fmcpu-bf534.c?ref=ea2382be3f07d1faa3c307d8afc974a0f6cb9122", "patch": "@@ -0,0 +1,23 @@\n+/* Test for -mcpu=.  */\n+/* { dg-do preprocess } */\n+/* { dg-bfin-options \"-mcpu=bf534\" } */\n+\n+#ifndef __ADSPBF534__\n+#error \"__ADSPBF534__ is not defined\"\n+#endif\n+\n+#if __SILICON_REVISION__ != 0x0003\n+#error \"__SILICON_REVISION__ is not 0x0003\"\n+#endif\n+\n+#ifndef __WORKAROUNDS_ENABLED\n+#error \"__WORKAROUNDS_ENABLED is not defined\"\n+#endif\n+\n+#ifndef __WORKAROUND_SPECULATIVE_LOADS\n+#error \"__WORKAROUND_SPECULATIVE_LOADS is not defined\"\n+#endif\n+\n+#ifdef __WORKAROUND_SPECULATIVE_SYNCS\n+#error \"__WORKAROUND_SPECULATIVE_SYNCS is defined\"\n+#endif"}, {"sha": "034296b5433a468aa9298831ab9f8da5636ecb9f", "filename": "gcc/testsuite/gcc.target/bfin/mcpu-bf536.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea2382be3f07d1faa3c307d8afc974a0f6cb9122/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fmcpu-bf536.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea2382be3f07d1faa3c307d8afc974a0f6cb9122/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fmcpu-bf536.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fmcpu-bf536.c?ref=ea2382be3f07d1faa3c307d8afc974a0f6cb9122", "patch": "@@ -0,0 +1,23 @@\n+/* Test for -mcpu=.  */\n+/* { dg-do preprocess } */\n+/* { dg-bfin-options \"-mcpu=bf536\" } */\n+\n+#ifndef __ADSPBF536__\n+#error \"__ADSPBF536__ is not defined\"\n+#endif\n+\n+#if __SILICON_REVISION__ != 0x0003\n+#error \"__SILICON_REVISION__ is not 0x0003\"\n+#endif\n+\n+#ifndef __WORKAROUNDS_ENABLED\n+#error \"__WORKAROUNDS_ENABLED is not defined\"\n+#endif\n+\n+#ifndef __WORKAROUND_SPECULATIVE_LOADS\n+#error \"__WORKAROUND_SPECULATIVE_LOADS is not defined\"\n+#endif\n+\n+#ifdef __WORKAROUND_SPECULATIVE_SYNCS\n+#error \"__WORKAROUND_SPECULATIVE_SYNCS is defined\"\n+#endif"}, {"sha": "9f3d605a86f84f4d324c5f28927ea7e3f140034b", "filename": "gcc/testsuite/gcc.target/bfin/mcpu-bf537.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea2382be3f07d1faa3c307d8afc974a0f6cb9122/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fmcpu-bf537.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea2382be3f07d1faa3c307d8afc974a0f6cb9122/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fmcpu-bf537.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fmcpu-bf537.c?ref=ea2382be3f07d1faa3c307d8afc974a0f6cb9122", "patch": "@@ -0,0 +1,23 @@\n+/* Test for -mcpu=.  */\n+/* { dg-do preprocess } */\n+/* { dg-bfin-options \"-mcpu=bf537\" } */\n+\n+#ifndef __ADSPBF537__\n+#error \"__ADSPBF537__ is not defined\"\n+#endif\n+\n+#if __SILICON_REVISION__ != 0x0003\n+#error \"__SILICON_REVISION__ is not 0x0003\"\n+#endif\n+\n+#ifndef __WORKAROUNDS_ENABLED\n+#error \"__WORKAROUNDS_ENABLED is not defined\"\n+#endif\n+\n+#ifndef __WORKAROUND_SPECULATIVE_LOADS\n+#error \"__WORKAROUND_SPECULATIVE_LOADS is not defined\"\n+#endif\n+\n+#ifdef __WORKAROUND_SPECULATIVE_SYNCS\n+#error \"__WORKAROUND_SPECULATIVE_SYNCS is defined\"\n+#endif"}, {"sha": "57c9be6f3087694d52c8de32f14b28bc9afff84c", "filename": "gcc/testsuite/gcc.target/bfin/mcpu-bf538.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea2382be3f07d1faa3c307d8afc974a0f6cb9122/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fmcpu-bf538.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea2382be3f07d1faa3c307d8afc974a0f6cb9122/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fmcpu-bf538.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fmcpu-bf538.c?ref=ea2382be3f07d1faa3c307d8afc974a0f6cb9122", "patch": "@@ -0,0 +1,23 @@\n+/* Test for -mcpu=.  */\n+/* { dg-do preprocess } */\n+/* { dg-bfin-options \"-mcpu=bf538\" } */\n+\n+#ifndef __ADSPBF538__\n+#error \"__ADSPBF538__ is not defined\"\n+#endif\n+\n+#if __SILICON_REVISION__ != 0x0004\n+#error \"__SILICON_REVISION__ is not 0x0004\"\n+#endif\n+\n+#ifndef __WORKAROUNDS_ENABLED\n+#error \"__WORKAROUNDS_ENABLED is not defined\"\n+#endif\n+\n+#ifndef __WORKAROUND_SPECULATIVE_LOADS\n+#error \"__WORKAROUND_SPECULATIVE_LOADS is not defined\"\n+#endif\n+\n+#ifdef __WORKAROUND_SPECULATIVE_SYNCS\n+#error \"__WORKAROUND_SPECULATIVE_SYNCS is defined\"\n+#endif"}, {"sha": "602bd3a2d0a52fd964c804a945dd3e2be7244e36", "filename": "gcc/testsuite/gcc.target/bfin/mcpu-bf539.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea2382be3f07d1faa3c307d8afc974a0f6cb9122/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fmcpu-bf539.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea2382be3f07d1faa3c307d8afc974a0f6cb9122/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fmcpu-bf539.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fmcpu-bf539.c?ref=ea2382be3f07d1faa3c307d8afc974a0f6cb9122", "patch": "@@ -0,0 +1,23 @@\n+/* Test for -mcpu=.  */\n+/* { dg-do preprocess } */\n+/* { dg-bfin-options \"-mcpu=bf539\" } */\n+\n+#ifndef __ADSPBF539__\n+#error \"__ADSPBF539__ is not defined\"\n+#endif\n+\n+#if __SILICON_REVISION__ != 0x0004\n+#error \"__SILICON_REVISION__ is not 0x0004\"\n+#endif\n+\n+#ifndef __WORKAROUNDS_ENABLED\n+#error \"__WORKAROUNDS_ENABLED is not defined\"\n+#endif\n+\n+#ifndef __WORKAROUND_SPECULATIVE_LOADS\n+#error \"__WORKAROUND_SPECULATIVE_LOADS is not defined\"\n+#endif\n+\n+#ifdef __WORKAROUND_SPECULATIVE_SYNCS\n+#error \"__WORKAROUND_SPECULATIVE_SYNCS is defined\"\n+#endif"}, {"sha": "9ea90c3e82cd1fed1239af3253c337771a4c727c", "filename": "gcc/testsuite/gcc.target/bfin/mcpu-bf542.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea2382be3f07d1faa3c307d8afc974a0f6cb9122/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fmcpu-bf542.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea2382be3f07d1faa3c307d8afc974a0f6cb9122/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fmcpu-bf542.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fmcpu-bf542.c?ref=ea2382be3f07d1faa3c307d8afc974a0f6cb9122", "patch": "@@ -0,0 +1,27 @@\n+/* Test for -mcpu=.  */\n+/* { dg-do preprocess } */\n+/* { dg-bfin-options \"-mcpu=bf542\" } */\n+\n+#ifndef __ADSPBF542__\n+#error \"__ADSPBF542__ is not defined\"\n+#endif\n+\n+#ifndef __ADSPBF54x__\n+#error \"__ADSPBF54x__ is not defined\"\n+#endif\n+\n+#if __SILICON_REVISION__ != 0x0000\n+#error \"__SILICON_REVISION__ is not 0x0000\"\n+#endif\n+\n+#ifndef __WORKAROUNDS_ENABLED\n+#error \"__WORKAROUNDS_ENABLED is not defined\"\n+#endif\n+\n+#ifndef __WORKAROUND_SPECULATIVE_LOADS\n+#error \"__WORKAROUND_SPECULATIVE_LOADS is not defined\"\n+#endif\n+\n+#ifdef __WORKAROUND_SPECULATIVE_SYNCS\n+#error \"__WORKAROUND_SPECULATIVE_SYNCS is defined\"\n+#endif"}, {"sha": "e76c7cb94e0b68604419f1ca6e4bde124a7e8dc0", "filename": "gcc/testsuite/gcc.target/bfin/mcpu-bf544.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea2382be3f07d1faa3c307d8afc974a0f6cb9122/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fmcpu-bf544.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea2382be3f07d1faa3c307d8afc974a0f6cb9122/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fmcpu-bf544.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fmcpu-bf544.c?ref=ea2382be3f07d1faa3c307d8afc974a0f6cb9122", "patch": "@@ -0,0 +1,27 @@\n+/* Test for -mcpu=.  */\n+/* { dg-do preprocess } */\n+/* { dg-bfin-options \"-mcpu=bf544\" } */\n+\n+#ifndef __ADSPBF544__\n+#error \"__ADSPBF544__ is not defined\"\n+#endif\n+\n+#ifndef __ADSPBF54x__\n+#error \"__ADSPBF54x__ is not defined\"\n+#endif\n+\n+#if __SILICON_REVISION__ != 0x0000\n+#error \"__SILICON_REVISION__ is not 0x0000\"\n+#endif\n+\n+#ifndef __WORKAROUNDS_ENABLED\n+#error \"__WORKAROUNDS_ENABLED is not defined\"\n+#endif\n+\n+#ifndef __WORKAROUND_SPECULATIVE_LOADS\n+#error \"__WORKAROUND_SPECULATIVE_LOADS is not defined\"\n+#endif\n+\n+#ifdef __WORKAROUND_SPECULATIVE_SYNCS\n+#error \"__WORKAROUND_SPECULATIVE_SYNCS is defined\"\n+#endif"}, {"sha": "f9ed8b34e341c6298cdaa37e4c955f4ea82f75cf", "filename": "gcc/testsuite/gcc.target/bfin/mcpu-bf548.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea2382be3f07d1faa3c307d8afc974a0f6cb9122/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fmcpu-bf548.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea2382be3f07d1faa3c307d8afc974a0f6cb9122/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fmcpu-bf548.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fmcpu-bf548.c?ref=ea2382be3f07d1faa3c307d8afc974a0f6cb9122", "patch": "@@ -0,0 +1,27 @@\n+/* Test for -mcpu=.  */\n+/* { dg-do preprocess } */\n+/* { dg-bfin-options \"-mcpu=bf548\" } */\n+\n+#ifndef __ADSPBF548__\n+#error \"__ADSPBF548__ is not defined\"\n+#endif\n+\n+#ifndef __ADSPBF54x__\n+#error \"__ADSPBF54x__ is not defined\"\n+#endif\n+\n+#if __SILICON_REVISION__ != 0x0000\n+#error \"__SILICON_REVISION__ is not 0x0000\"\n+#endif\n+\n+#ifndef __WORKAROUNDS_ENABLED\n+#error \"__WORKAROUNDS_ENABLED is not defined\"\n+#endif\n+\n+#ifndef __WORKAROUND_SPECULATIVE_LOADS\n+#error \"__WORKAROUND_SPECULATIVE_LOADS is not defined\"\n+#endif\n+\n+#ifdef __WORKAROUND_SPECULATIVE_SYNCS\n+#error \"__WORKAROUND_SPECULATIVE_SYNCS is defined\"\n+#endif"}, {"sha": "68ad91759834d489c7ae88486ce83cff038b3875", "filename": "gcc/testsuite/gcc.target/bfin/mcpu-bf549.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea2382be3f07d1faa3c307d8afc974a0f6cb9122/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fmcpu-bf549.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea2382be3f07d1faa3c307d8afc974a0f6cb9122/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fmcpu-bf549.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fmcpu-bf549.c?ref=ea2382be3f07d1faa3c307d8afc974a0f6cb9122", "patch": "@@ -0,0 +1,27 @@\n+/* Test for -mcpu=.  */\n+/* { dg-do preprocess } */\n+/* { dg-bfin-options \"-mcpu=bf549\" } */\n+\n+#ifndef __ADSPBF549__\n+#error \"__ADSPBF549__ is not defined\"\n+#endif\n+\n+#ifndef __ADSPBF54x__\n+#error \"__ADSPBF54x__ is not defined\"\n+#endif\n+\n+#if __SILICON_REVISION__ != 0x0000\n+#error \"__SILICON_REVISION__ is not 0x0000\"\n+#endif\n+\n+#ifndef __WORKAROUNDS_ENABLED\n+#error \"__WORKAROUNDS_ENABLED is not defined\"\n+#endif\n+\n+#ifndef __WORKAROUND_SPECULATIVE_LOADS\n+#error \"__WORKAROUND_SPECULATIVE_LOADS is not defined\"\n+#endif\n+\n+#ifdef __WORKAROUND_SPECULATIVE_SYNCS\n+#error \"__WORKAROUND_SPECULATIVE_SYNCS is defined\"\n+#endif"}, {"sha": "3eb5d4b6ce40a45e91ecbab7c0d4f7f7ec2ace12", "filename": "gcc/testsuite/gcc.target/bfin/mcpu-bf561.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea2382be3f07d1faa3c307d8afc974a0f6cb9122/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fmcpu-bf561.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea2382be3f07d1faa3c307d8afc974a0f6cb9122/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fmcpu-bf561.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fmcpu-bf561.c?ref=ea2382be3f07d1faa3c307d8afc974a0f6cb9122", "patch": "@@ -0,0 +1,23 @@\n+/* Test for -mcpu=.  */\n+/* { dg-do preprocess } */\n+/* { dg-bfin-options \"-mcpu=bf561\" } */\n+\n+#ifndef __ADSPBF561__\n+#error \"__ADSPBF561__ is not defined\"\n+#endif\n+\n+#if __SILICON_REVISION__ != 0x0005\n+#error \"__SILICON_REVISION__ is not 0x0005\"\n+#endif\n+\n+#ifdef __WORKAROUNDS_ENABLED\n+#error \"__WORKAROUNDS_ENABLED is defined\"\n+#endif\n+\n+#ifdef __WORKAROUND_SPECULATIVE_LOADS\n+#error \"__WORKAROUND_SPECULATIVE_LOADS is defined\"\n+#endif\n+\n+#ifdef __WORKAROUND_SPECULATIVE_SYNCS\n+#error \"__WORKAROUND_SPECULATIVE_SYNCS is defined\"\n+#endif"}, {"sha": "5362035b440d995b228bc39f979b84682dd21e41", "filename": "gcc/testsuite/gcc.target/bfin/mcpu-default.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea2382be3f07d1faa3c307d8afc974a0f6cb9122/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fmcpu-default.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea2382be3f07d1faa3c307d8afc974a0f6cb9122/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fmcpu-default.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fmcpu-default.c?ref=ea2382be3f07d1faa3c307d8afc974a0f6cb9122", "patch": "@@ -0,0 +1,23 @@\n+/* Test for -mcpu=.  */\n+/* { dg-do preprocess } */\n+/* { dg-bfin-options \"\" } */\n+\n+#ifndef __ADSPBF532__\n+#error \"__ADSPBF532__ is not defined\"\n+#endif\n+\n+#if __SILICON_REVISION__ != 0x0005\n+#error \"__SILICON_REVISION__ is not 0x0005\"\n+#endif\n+\n+#ifndef __WORKAROUNDS_ENABLED\n+#error \"__WORKAROUNDS_ENABLED is not defined\"\n+#endif\n+\n+#ifndef __WORKAROUND_SPECULATIVE_LOADS\n+#error \"__WORKAROUND_SPECULATIVE_LOADS is not defined\"\n+#endif\n+\n+#ifdef __WORKAROUND_SPECULATIVE_SYNCS\n+#error \"__WORKAROUND_SPECULATIVE_SYNCS is defined\"\n+#endif"}, {"sha": "cf9a877948089e8a5ae64025072a14e7d7a649aa", "filename": "gcc/testsuite/gcc.target/bfin/workarounds-1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea2382be3f07d1faa3c307d8afc974a0f6cb9122/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fworkarounds-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea2382be3f07d1faa3c307d8afc974a0f6cb9122/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fworkarounds-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fworkarounds-1.c?ref=ea2382be3f07d1faa3c307d8afc974a0f6cb9122", "patch": "@@ -0,0 +1,23 @@\n+/* Test for -mcpu=.  */\n+/* { dg-do preprocess } */\n+/* { dg-bfin-options \"-mcsync-anomaly -mcpu=bf537\" } */\n+\n+#ifndef __ADSPBF537__\n+#error \"__ADSPBF537__ is not defined\"\n+#endif\n+\n+#if __SILICON_REVISION__ != 0x0003\n+#error \"__SILICON_REVISION__ is not 0x0003\"\n+#endif\n+\n+#ifndef __WORKAROUNDS_ENABLED\n+#error \"__WORKAROUNDS_ENABLED is not defined\"\n+#endif\n+\n+#ifndef __WORKAROUND_SPECULATIVE_LOADS\n+#error \"__WORKAROUND_SPECULATIVE_LOADS is not defined\"\n+#endif\n+\n+#ifndef __WORKAROUND_SPECULATIVE_SYNCS\n+#error \"__WORKAROUND_SPECULATIVE_SYNCS is defined\"\n+#endif"}, {"sha": "b00a6884cdc8234c13335babaf2887bec0a4af22", "filename": "gcc/testsuite/gcc.target/bfin/workarounds-2.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea2382be3f07d1faa3c307d8afc974a0f6cb9122/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fworkarounds-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea2382be3f07d1faa3c307d8afc974a0f6cb9122/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fworkarounds-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fworkarounds-2.c?ref=ea2382be3f07d1faa3c307d8afc974a0f6cb9122", "patch": "@@ -0,0 +1,23 @@\n+/* Test for -mcpu=.  */\n+/* { dg-do preprocess } */\n+/* { dg-bfin-options \"-mno-specld-anomaly -mcpu=bf537\" } */\n+\n+#ifndef __ADSPBF537__\n+#error \"__ADSPBF537__ is not defined\"\n+#endif\n+\n+#if __SILICON_REVISION__ != 0x0003\n+#error \"__SILICON_REVISION__ is not 0x0003\"\n+#endif\n+\n+#ifdef __WORKAROUNDS_ENABLED\n+#error \"__WORKAROUNDS_ENABLED is defined\"\n+#endif\n+\n+#ifdef __WORKAROUND_SPECULATIVE_LOADS\n+#error \"__WORKAROUND_SPECULATIVE_LOADS is defined\"\n+#endif\n+\n+#ifdef __WORKAROUND_SPECULATIVE_SYNCS\n+#error \"__WORKAROUND_SPECULATIVE_SYNCS is defined\"\n+#endif"}, {"sha": "d9781bae2fde1268df1bd6fef941eac6cc6ee405", "filename": "gcc/testsuite/gcc.target/bfin/workarounds-3.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea2382be3f07d1faa3c307d8afc974a0f6cb9122/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fworkarounds-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea2382be3f07d1faa3c307d8afc974a0f6cb9122/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fworkarounds-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fworkarounds-3.c?ref=ea2382be3f07d1faa3c307d8afc974a0f6cb9122", "patch": "@@ -0,0 +1,23 @@\n+/* Test for -mcpu=.  */\n+/* { dg-do preprocess } */\n+/* { dg-bfin-options \"-mcpu=bf537-none\" } */\n+\n+#ifndef __ADSPBF537__\n+#error \"__ADSPBF537__ is not defined\"\n+#endif\n+\n+#ifdef __SILICON_REVISION__\n+#error \"__SILICON_REVISION__ is defined\"\n+#endif\n+\n+#ifdef __WORKAROUNDS_ENABLED\n+#error \"__WORKAROUNDS_ENABLED is defined\"\n+#endif\n+\n+#ifdef __WORKAROUND_SPECULATIVE_LOADS\n+#error \"__WORKAROUND_SPECULATIVE_LOADS is defined\"\n+#endif\n+\n+#ifdef __WORKAROUND_SPECULATIVE_SYNCS\n+#error \"__WORKAROUND_SPECULATIVE_SYNCS is defined\"\n+#endif"}, {"sha": "50cec9ca7e46632b3a2e0e9bbf52e40f5b0f2a09", "filename": "gcc/testsuite/gcc.target/bfin/workarounds-4.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea2382be3f07d1faa3c307d8afc974a0f6cb9122/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fworkarounds-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea2382be3f07d1faa3c307d8afc974a0f6cb9122/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fworkarounds-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fworkarounds-4.c?ref=ea2382be3f07d1faa3c307d8afc974a0f6cb9122", "patch": "@@ -0,0 +1,23 @@\n+/* Test for -mcpu=.  */\n+/* { dg-do preprocess } */\n+/* { dg-bfin-options \"-mcpu=bf537-any\" } */\n+\n+#ifndef __ADSPBF537__\n+#error \"__ADSPBF537__ is not defined\"\n+#endif\n+\n+#if __SILICON_REVISION__ != 0xffff\n+#error \"__SILICON_REVISION__ is not 0xffff\"\n+#endif\n+\n+#ifndef __WORKAROUNDS_ENABLED\n+#error \"__WORKAROUNDS_ENABLED is not defined\"\n+#endif\n+\n+#ifndef __WORKAROUND_SPECULATIVE_LOADS\n+#error \"__WORKAROUND_SPECULATIVE_LOADS is not defined\"\n+#endif\n+\n+#ifndef __WORKAROUND_SPECULATIVE_SYNCS\n+#error \"__WORKAROUND_SPECULATIVE_SYNCS is defined\"\n+#endif"}, {"sha": "50cec9ca7e46632b3a2e0e9bbf52e40f5b0f2a09", "filename": "gcc/testsuite/gcc.target/bfin/workarounds-any.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea2382be3f07d1faa3c307d8afc974a0f6cb9122/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fworkarounds-any.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea2382be3f07d1faa3c307d8afc974a0f6cb9122/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fworkarounds-any.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fworkarounds-any.c?ref=ea2382be3f07d1faa3c307d8afc974a0f6cb9122", "patch": "@@ -0,0 +1,23 @@\n+/* Test for -mcpu=.  */\n+/* { dg-do preprocess } */\n+/* { dg-bfin-options \"-mcpu=bf537-any\" } */\n+\n+#ifndef __ADSPBF537__\n+#error \"__ADSPBF537__ is not defined\"\n+#endif\n+\n+#if __SILICON_REVISION__ != 0xffff\n+#error \"__SILICON_REVISION__ is not 0xffff\"\n+#endif\n+\n+#ifndef __WORKAROUNDS_ENABLED\n+#error \"__WORKAROUNDS_ENABLED is not defined\"\n+#endif\n+\n+#ifndef __WORKAROUND_SPECULATIVE_LOADS\n+#error \"__WORKAROUND_SPECULATIVE_LOADS is not defined\"\n+#endif\n+\n+#ifndef __WORKAROUND_SPECULATIVE_SYNCS\n+#error \"__WORKAROUND_SPECULATIVE_SYNCS is defined\"\n+#endif"}, {"sha": "d9781bae2fde1268df1bd6fef941eac6cc6ee405", "filename": "gcc/testsuite/gcc.target/bfin/workarounds-none.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea2382be3f07d1faa3c307d8afc974a0f6cb9122/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fworkarounds-none.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea2382be3f07d1faa3c307d8afc974a0f6cb9122/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fworkarounds-none.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fworkarounds-none.c?ref=ea2382be3f07d1faa3c307d8afc974a0f6cb9122", "patch": "@@ -0,0 +1,23 @@\n+/* Test for -mcpu=.  */\n+/* { dg-do preprocess } */\n+/* { dg-bfin-options \"-mcpu=bf537-none\" } */\n+\n+#ifndef __ADSPBF537__\n+#error \"__ADSPBF537__ is not defined\"\n+#endif\n+\n+#ifdef __SILICON_REVISION__\n+#error \"__SILICON_REVISION__ is defined\"\n+#endif\n+\n+#ifdef __WORKAROUNDS_ENABLED\n+#error \"__WORKAROUNDS_ENABLED is defined\"\n+#endif\n+\n+#ifdef __WORKAROUND_SPECULATIVE_LOADS\n+#error \"__WORKAROUND_SPECULATIVE_LOADS is defined\"\n+#endif\n+\n+#ifdef __WORKAROUND_SPECULATIVE_SYNCS\n+#error \"__WORKAROUND_SPECULATIVE_SYNCS is defined\"\n+#endif"}]}