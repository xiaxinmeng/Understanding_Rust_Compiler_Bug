{"sha": "6c6d9d33ef1cfdc73d836b4acb70210a824b035a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmM2ZDlkMzNlZjFjZmRjNzNkODM2YjRhY2I3MDIxMGE4MjRiMDM1YQ==", "commit": {"author": {"name": "John David Anglin", "email": "dave.anglin@nrc-cnrc.gc.ca", "date": "2005-03-19T16:45:59Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2005-03-19T16:45:59Z"}, "message": "re PR middle-end/20493 (Bootstrap failure because of aliased symbols)\n\n\tPR middle-end/20493\n\t* fold-const.c (fold_widened_comparison): Don't optimize casts of\n\tfunction pointers on targets that require function pointer\n\tcanonicalization.\n\t(fold_sign_changed_comparison): Likewise.\n\nFrom-SVN: r96733", "tree": {"sha": "f725ea41922a90374491a58c72f4c03b4c46444c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f725ea41922a90374491a58c72f4c03b4c46444c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c6d9d33ef1cfdc73d836b4acb70210a824b035a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c6d9d33ef1cfdc73d836b4acb70210a824b035a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c6d9d33ef1cfdc73d836b4acb70210a824b035a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c6d9d33ef1cfdc73d836b4acb70210a824b035a/comments", "author": null, "committer": null, "parents": [{"sha": "1ad93fbfe98afdcb5be95b81afd6e788c22975d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ad93fbfe98afdcb5be95b81afd6e788c22975d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ad93fbfe98afdcb5be95b81afd6e788c22975d2"}], "stats": {"total": 26, "additions": 26, "deletions": 0}, "files": [{"sha": "f40720a5041414c377ccbd37a7c99e5b6f2a8b54", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c6d9d33ef1cfdc73d836b4acb70210a824b035a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c6d9d33ef1cfdc73d836b4acb70210a824b035a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6c6d9d33ef1cfdc73d836b4acb70210a824b035a", "patch": "@@ -1,3 +1,11 @@\n+2005-03-19  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n+\n+\tPR middle-end/20493\n+\t* fold-const.c (fold_widened_comparison): Don't optimize casts of\n+\tfunction pointers on targets that require function pointer\n+\tcanonicalization.\n+\t(fold_sign_changed_comparison): Likewise.\n+\n 2005-03-19  Bernd Schmidt  <bernd.schmidt@analog.com>\n \n \t* combine.c (try_combine): When changing the mode of a hard reg, make"}, {"sha": "bc17c1d3e9c4f39063d3c1f8f418e6906ad547d8", "filename": "gcc/fold-const.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c6d9d33ef1cfdc73d836b4acb70210a824b035a/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c6d9d33ef1cfdc73d836b4acb70210a824b035a/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=6c6d9d33ef1cfdc73d836b4acb70210a824b035a", "patch": "@@ -6074,6 +6074,15 @@ fold_widened_comparison (enum tree_code code, tree type, tree arg0, tree arg1)\n     return NULL_TREE;\n   shorter_type = TREE_TYPE (arg0_unw);\n \n+#ifdef HAVE_canonicalize_funcptr_for_compare\n+  /* Disable this optimization if we're casting a function pointer\n+     type on targets that require function pointer canonicalization.  */\n+  if (HAVE_canonicalize_funcptr_for_compare\n+      && TREE_CODE (shorter_type) == POINTER_TYPE\n+      && TREE_CODE (TREE_TYPE (shorter_type)) == FUNCTION_TYPE)\n+    return NULL_TREE;\n+#endif\n+\n   if (TYPE_PRECISION (TREE_TYPE (arg0)) <= TYPE_PRECISION (shorter_type))\n     return NULL_TREE;\n \n@@ -6156,6 +6165,15 @@ fold_sign_changed_comparison (enum tree_code code, tree type,\n   arg0_inner = TREE_OPERAND (arg0, 0);\n   inner_type = TREE_TYPE (arg0_inner);\n \n+#ifdef HAVE_canonicalize_funcptr_for_compare\n+  /* Disable this optimization if we're casting a function pointer\n+     type on targets that require function pointer canonicalization.  */\n+  if (HAVE_canonicalize_funcptr_for_compare\n+      && TREE_CODE (inner_type) == POINTER_TYPE\n+      && TREE_CODE (TREE_TYPE (inner_type)) == FUNCTION_TYPE)\n+    return NULL_TREE;\n+#endif\n+\n   if (TYPE_PRECISION (inner_type) != TYPE_PRECISION (outer_type))\n     return NULL_TREE;\n "}]}