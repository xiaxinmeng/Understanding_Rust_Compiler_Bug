{"sha": "493f4e6cf081ea2d016547629b29d130c1533ccb", "node_id": "C_kwDOANBUbNoAKDQ5M2Y0ZTZjZjA4MWVhMmQwMTY1NDc2MjliMjlkMTMwYzE1MzNjY2I", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-07-31T20:44:51Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-07-31T20:44:51Z"}, "message": "PR target/106450: Tweak timode_remove_non_convertible_regs on x86_64.\n\nThis patch resolves PR target/106450, some more fall-out from more\naggressive TImode scalar-to-vector (STV) optimizations.  I continue\nto be caught out by how far TImode STV has diverged from DImode/SImode\nSTV, and therefore requires additional (unexpected) tweaking.  Many\nthanks to H.J. Lu for pointing out timode_remove_non_convertible_regs\nneeds to be extended to handle XOR (and other new operations).\n\nUnhelpfully the comment above this function states that it's the TImode\nversion of \"remove_non_convertible_regs\", which doesn't exist anymore,\nso I've resurrected an explanatory comment from the git history.\nBy refactoring the checks for hard regs and already \"marked\" regs\ninto timode_check_non_convertible_regs itself, all of its callers are\nsimplified.  This patch then FOR_EACH_INSN_USE and FOR_EACH_INSN_DEF\nto generically handle arbitrary (non-move) instructions (including\nunary and binary operations), calling timode_check_non_convertible_regs\non each TImode register USE and DEF.\n\n2022-07-31  Roger Sayle  <roger@nextmovesoftware.com>\n\t    H.J. Lu  <hjl.tools@gmail.com>\n\ngcc/ChangeLog\n\tPR target/106450\n\t* config/i386/i386-features.cc (timode_check_non_convertible_regs):\n\tDo nothing if REGNO is set in the REGS bitmap, or is a hard reg.\n\t(timode_remove_non_convertible_regs): Update comment.\n\tCall timode_check_non_convertible_reg on all TImode register\n\tDEFs and USEs in each instruction.\n\ngcc/testsuite/ChangeLog\n\tPR target/106450\n\t* gcc.target/i386/pr106450.c: New test case.", "tree": {"sha": "52bfcbbc647a4cfb1647f12457210661b318968b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52bfcbbc647a4cfb1647f12457210661b318968b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/493f4e6cf081ea2d016547629b29d130c1533ccb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/493f4e6cf081ea2d016547629b29d130c1533ccb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/493f4e6cf081ea2d016547629b29d130c1533ccb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/493f4e6cf081ea2d016547629b29d130c1533ccb/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d325e7048c85e13f12ea79aebf9623eddc7ffcaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d325e7048c85e13f12ea79aebf9623eddc7ffcaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d325e7048c85e13f12ea79aebf9623eddc7ffcaf"}], "stats": {"total": 60, "additions": 40, "deletions": 20}, "files": [{"sha": "e4cc4a305901ea1558f84a45370a6ebfb17d061d", "filename": "gcc/config/i386/i386-features.cc", "status": "modified", "additions": 26, "deletions": 20, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/493f4e6cf081ea2d016547629b29d130c1533ccb/gcc%2Fconfig%2Fi386%2Fi386-features.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/493f4e6cf081ea2d016547629b29d130c1533ccb/gcc%2Fconfig%2Fi386%2Fi386-features.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-features.cc?ref=493f4e6cf081ea2d016547629b29d130c1533ccb", "patch": "@@ -1808,6 +1808,11 @@ static void\n timode_check_non_convertible_regs (bitmap candidates, bitmap regs,\n \t\t\t\t   unsigned int regno)\n {\n+  /* Do nothing if REGNO is already in REGS or is a hard reg.  */\n+  if (bitmap_bit_p (regs, regno)\n+      || HARD_REGISTER_NUM_P (regno))\n+    return;\n+\n   for (df_ref def = DF_REG_DEF_CHAIN (regno);\n        def;\n        def = DF_REF_NEXT_REG (def))\n@@ -1843,7 +1848,13 @@ timode_check_non_convertible_regs (bitmap candidates, bitmap regs,\n     }\n }\n \n-/* The TImode version of remove_non_convertible_regs.  */\n+/* For a given bitmap of insn UIDs scans all instructions and\n+   remove insn from CANDIDATES in case it has both convertible\n+   and not convertible definitions.\n+\n+   All insns in a bitmap are conversion candidates according to\n+   scalar_to_vector_candidate_p.  Currently it implies all insns\n+   are single_set.  */\n \n static void\n timode_remove_non_convertible_regs (bitmap candidates)\n@@ -1857,25 +1868,20 @@ timode_remove_non_convertible_regs (bitmap candidates)\n     changed = false;\n     EXECUTE_IF_SET_IN_BITMAP (candidates, 0, id, bi)\n       {\n-\trtx def_set = single_set (DF_INSN_UID_GET (id)->insn);\n-\trtx dest = SET_DEST (def_set);\n-\trtx src = SET_SRC (def_set);\n-\n-\tif ((!REG_P (dest)\n-\t     || bitmap_bit_p (regs, REGNO (dest))\n-\t     || HARD_REGISTER_P (dest))\n-\t    && (!REG_P (src)\n-\t\t|| bitmap_bit_p (regs, REGNO (src))\n-\t\t|| HARD_REGISTER_P (src)))\n-\t  continue;\n-\n-\tif (REG_P (dest))\n-\t  timode_check_non_convertible_regs (candidates, regs,\n-\t\t\t\t\t     REGNO (dest));\n-\n-\tif (REG_P (src))\n-\t  timode_check_non_convertible_regs (candidates, regs,\n-\t\t\t\t\t     REGNO (src));\n+\trtx_insn *insn = DF_INSN_UID_GET (id)->insn;\n+\tdf_ref ref;\n+\n+\tFOR_EACH_INSN_DEF (ref, insn)\n+\t  if (!DF_REF_REG_MEM_P (ref)\n+\t      && GET_MODE (DF_REF_REG (ref)) == TImode)\n+\t    timode_check_non_convertible_regs (candidates, regs,\n+\t\t\t\t\t       DF_REF_REGNO (ref));\n+\n+\tFOR_EACH_INSN_USE (ref, insn)\n+\t  if (!DF_REF_REG_MEM_P (ref)\n+\t      && GET_MODE (DF_REF_REG (ref)) == TImode)\n+\t    timode_check_non_convertible_regs (candidates, regs,\n+\t\t\t\t\t       DF_REF_REGNO (ref));\n       }\n \n     EXECUTE_IF_SET_IN_BITMAP (regs, 0, id, bi)"}, {"sha": "d16231f6abd1f99c25e5e2821b3c18cde8c623f9", "filename": "gcc/testsuite/gcc.target/i386/pr106450.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/493f4e6cf081ea2d016547629b29d130c1533ccb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106450.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/493f4e6cf081ea2d016547629b29d130c1533ccb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106450.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106450.c?ref=493f4e6cf081ea2d016547629b29d130c1533ccb", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O2 -fsplit-paths\" } */\n+\n+__int128 n;\n+\n+__attribute__ ((simd)) void\n+foo (void)\n+{\n+  __int128 uninitialized;\n+  unsigned __int128 *p = &n;\n+\n+  n >>= *p ? : 2;\n+  n |= uninitialized;\n+}"}]}