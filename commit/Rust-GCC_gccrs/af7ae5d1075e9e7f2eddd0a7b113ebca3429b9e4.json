{"sha": "af7ae5d1075e9e7f2eddd0a7b113ebca3429b9e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWY3YWU1ZDEwNzVlOWU3ZjJlZGRkMGE3YjExM2ViY2EzNDI5YjllNA==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2008-05-13T19:42:30Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2008-05-13T19:42:30Z"}, "message": "i386.c (ix86_expand_vector_init_one_nonzero): Use ix86_expand_vector_set if supported.\n\ngcc/\n\n2008-05-13  H.J. Lu  <hongjiu.lu@intel.com>\n\n\t* config/i386/i386.c (ix86_expand_vector_init_one_nonzero): Use\n\tix86_expand_vector_set if supported.\n\ngcc/testsuite/\n\n2008-05-13  H.J. Lu  <hongjiu.lu@intel.com>\n\n\t* gcc.target/i386/sse-init-v4hi-1.c: New.\n\t* gcc.target/i386/sse-init-v4sf-1.c: Likewise.\n\t* gcc.target/i386/sse2-init-v16qi-1.c: Likewise.\n\t* gcc.target/i386/sse2-init-v2di-1.c: Likewise.\n\t* gcc.target/i386/sse2-init-v4si-1.c: Likewise.\n\t* gcc.target/i386/sse2-init-v8hi-1.c: Likewise.\n\t* gcc.target/i386/sse4_1-init-v16qi-1.c: Likewise.\n\t* gcc.target/i386/sse4_1-init-v2di-1.c: Likewise.\n\t* gcc.target/i386/sse4_1-init-v4sf-1.c: Likewise.\n\t* gcc.target/i386/sse4_1-init-v4si-1.c: Likewise.\n\nFrom-SVN: r135272", "tree": {"sha": "858d6a6a54d1ba105516b832ac78bb6a1c0500e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/858d6a6a54d1ba105516b832ac78bb6a1c0500e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af7ae5d1075e9e7f2eddd0a7b113ebca3429b9e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af7ae5d1075e9e7f2eddd0a7b113ebca3429b9e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af7ae5d1075e9e7f2eddd0a7b113ebca3429b9e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af7ae5d1075e9e7f2eddd0a7b113ebca3429b9e4/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5db9ba0c38a08b7313ab2e10b1aabc98c5b73301", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5db9ba0c38a08b7313ab2e10b1aabc98c5b73301", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5db9ba0c38a08b7313ab2e10b1aabc98c5b73301"}], "stats": {"total": 737, "additions": 737, "deletions": 0}, "files": [{"sha": "246bf13fcb0d16eaae560313a908ea21bccf0543", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af7ae5d1075e9e7f2eddd0a7b113ebca3429b9e4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af7ae5d1075e9e7f2eddd0a7b113ebca3429b9e4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=af7ae5d1075e9e7f2eddd0a7b113ebca3429b9e4", "patch": "@@ -1,3 +1,8 @@\n+2008-05-13  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* config/i386/i386.c (ix86_expand_vector_init_one_nonzero): Use\n+\tix86_expand_vector_set if supported.\n+\n 2008-05-13  Diego Novillo  <dnovillo@google.com>\n \t    Kenneth Zadeck  <zadeck@naturalbridge.com>\n "}, {"sha": "6d551e0f5ad52a89b4628c196e851a1c7acb53a3", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af7ae5d1075e9e7f2eddd0a7b113ebca3429b9e4/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af7ae5d1075e9e7f2eddd0a7b113ebca3429b9e4/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=af7ae5d1075e9e7f2eddd0a7b113ebca3429b9e4", "patch": "@@ -23643,6 +23643,34 @@ ix86_expand_vector_init_one_nonzero (bool mmx_ok, enum machine_mode mode,\n   enum machine_mode vsimode;\n   rtx new_target;\n   rtx x, tmp;\n+  bool use_vector_set = false;\n+\n+  switch (mode)\n+    {\n+    case V2DImode:\n+      use_vector_set = TARGET_64BIT && TARGET_SSE4_1;\n+      break;\n+    case V16QImode:\n+    case V4SImode:\n+    case V4SFmode:\n+      use_vector_set = TARGET_SSE4_1;\n+      break;\n+    case V8HImode:\n+      use_vector_set = TARGET_SSE2;\n+      break;\n+    case V4HImode:\n+      use_vector_set = TARGET_SSE || TARGET_3DNOW_A;\n+    default:\n+      break;\n+    }\n+\n+  if (use_vector_set)\n+    {\n+      emit_insn (gen_rtx_SET (VOIDmode, target, CONST0_RTX (mode)));\n+      var = force_reg (GET_MODE_INNER (mode), var);\n+      ix86_expand_vector_set (mmx_ok, target, var, one_var);\n+      return true; \n+    }\n \n   switch (mode)\n     {"}, {"sha": "d26c9098173b18d13430bba2538c29c837d9411c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af7ae5d1075e9e7f2eddd0a7b113ebca3429b9e4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af7ae5d1075e9e7f2eddd0a7b113ebca3429b9e4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=af7ae5d1075e9e7f2eddd0a7b113ebca3429b9e4", "patch": "@@ -1,3 +1,16 @@\n+2008-05-13  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* gcc.target/i386/sse-init-v4hi-1.c: New.\n+\t* gcc.target/i386/sse-init-v4sf-1.c: Likewise.\n+\t* gcc.target/i386/sse2-init-v16qi-1.c: Likewise.\n+\t* gcc.target/i386/sse2-init-v2di-1.c: Likewise.\n+\t* gcc.target/i386/sse2-init-v4si-1.c: Likewise.\n+\t* gcc.target/i386/sse2-init-v8hi-1.c: Likewise.\n+\t* gcc.target/i386/sse4_1-init-v16qi-1.c: Likewise.\n+\t* gcc.target/i386/sse4_1-init-v2di-1.c: Likewise.\n+\t* gcc.target/i386/sse4_1-init-v4sf-1.c: Likewise.\n+\t* gcc.target/i386/sse4_1-init-v4si-1.c: Likewise.\n+\n 2008-05-13  Janis Johnson  <janis187@us.ibm.com>\n \n \tPR testsuite/35127"}, {"sha": "5c25477270980d58b544a3d7ad3a68d63bb10e5c", "filename": "gcc/testsuite/gcc.target/i386/sse-init-v4hi-1.c", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af7ae5d1075e9e7f2eddd0a7b113ebca3429b9e4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-init-v4hi-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af7ae5d1075e9e7f2eddd0a7b113ebca3429b9e4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-init-v4hi-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-init-v4hi-1.c?ref=af7ae5d1075e9e7f2eddd0a7b113ebca3429b9e4", "patch": "@@ -0,0 +1,67 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -msse\" } */\n+\n+#include \"sse-check.h\"\n+\n+#ifdef DEBUG\n+#include <stdio.h>\n+#endif\n+\n+#include <mmintrin.h>\n+\n+static void\n+__attribute__((noinline))\n+check (__m64 x, unsigned short *v, int j)\n+{\n+  union\n+    {\n+      __m64 x;\n+      unsigned short i[8];\n+    } u;\n+  unsigned int i;\n+\n+  u.x = x;\n+  \n+  for (i = 0; i < sizeof (v) / sizeof (v[0]); i++)\n+    if (i == j)\n+      {\n+\tif (v[i] != u.i[i])\n+\t  {\n+#ifdef DEBUG\n+\t    printf (\"%i: 0x%x != 0x%x\\n\", i, v[i], u.i[i]);\n+#endif\n+\t    abort ();\n+\t  }\n+      }\n+    else if (u.i[i] != 0)\n+      {\n+#ifdef DEBUG\n+\tprintf (\"%i: 0x%x != 0\\n\", i, u.i[i]);\n+#endif\n+\tabort ();\n+      }\n+}\n+\n+static void\n+__attribute__((noinline))\n+test (unsigned short *v)\n+{\n+  __m64 x;\n+\n+  x = _mm_set_pi16 (0, 0, 0, v[0]);\n+  check (x, v, 0);\n+  x = _mm_set_pi16 (0, 0, v[1], 0);\n+  check (x, v, 1);\n+  x = _mm_set_pi16 (0, v[2], 0, 0);\n+  check (x, v, 2);\n+  x = _mm_set_pi16 (v[3], 0, 0, 0);\n+  check (x, v, 3);\n+}\n+\n+static void\n+sse_test (void)\n+{\n+  unsigned short v[4]\n+    = { 0x7B5B, 0x5465, 0x7374, 0x5665};\n+  test (v);\n+}"}, {"sha": "4cb1f337e2ac03939d313ba59503ac2142c12710", "filename": "gcc/testsuite/gcc.target/i386/sse-init-v4sf-1.c", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af7ae5d1075e9e7f2eddd0a7b113ebca3429b9e4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-init-v4sf-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af7ae5d1075e9e7f2eddd0a7b113ebca3429b9e4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-init-v4sf-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-init-v4sf-1.c?ref=af7ae5d1075e9e7f2eddd0a7b113ebca3429b9e4", "patch": "@@ -0,0 +1,66 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -msse\" } */\n+\n+#include \"sse-check.h\"\n+\n+#ifdef DEBUG\n+#include <stdio.h>\n+#endif\n+\n+#include <xmmintrin.h>\n+\n+static void\n+__attribute__((noinline))\n+check (__m128 x, float *v, int j)\n+{\n+  union\n+    {\n+      __m128 x;\n+      float f[4];\n+    } u;\n+  unsigned int i;\n+\n+  u.x = x;\n+  \n+  for (i = 0; i < sizeof (v) / sizeof (v[0]); i++)\n+    if (i == j)\n+      {\n+\tif (v[i] != u.f[i])\n+\t  {\n+#ifdef DEBUG\n+\t    printf (\"%i: %f != %f\\n\", i, v[i], u.f[i]);\n+#endif\n+\t    abort ();\n+\t  }\n+      }\n+    else if (u.f[i] != 0)\n+      {\n+#ifdef DEBUG\n+\tprintf (\"%i: %f != 0\\n\", i, u.f[i]);\n+#endif\n+\tabort ();\n+      }\n+}\n+\n+static void\n+__attribute__((noinline))\n+test (float *v)\n+{\n+  __m128 x;\n+\n+  x = _mm_set_ps (0, 0, 0, v[0]);\n+  check (x, v, 0);\n+  x = _mm_set_ps (0, 0, v[1], 0);\n+  check (x, v, 1);\n+  x = _mm_set_ps (0, v[2], 0, 0);\n+  check (x, v, 2);\n+  x = _mm_set_ps (v[3], 0, 0, 0);\n+  check (x, v, 3);\n+}\n+\n+static void\n+sse_test (void)\n+{\n+  float v[4] = { -3, 2, 1, 9 };\n+  test (v);\n+}"}, {"sha": "903a5ad74903c163192a9d38c84a4a9204c19058", "filename": "gcc/testsuite/gcc.target/i386/sse2-init-v16qi-1.c", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af7ae5d1075e9e7f2eddd0a7b113ebca3429b9e4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-init-v16qi-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af7ae5d1075e9e7f2eddd0a7b113ebca3429b9e4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-init-v16qi-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-init-v16qi-1.c?ref=af7ae5d1075e9e7f2eddd0a7b113ebca3429b9e4", "patch": "@@ -0,0 +1,76 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -msse2\" } */\n+\n+#include \"sse2-check.h\"\n+\n+#ifdef DEBUG\n+#include <stdio.h>\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static void\n+__attribute__((noinline))\n+check (__m128i x, unsigned char *v, int j)\n+{\n+  union\n+    {\n+      __m128i x;\n+      unsigned char i[16];\n+    } u;\n+  unsigned int i;\n+\n+  u.x = x;\n+  \n+  for (i = 0; i < sizeof (v) / sizeof (v[0]); i++)\n+    if (i == j)\n+      {\n+\tif (v[i] != u.i[i])\n+\t  {\n+#ifdef DEBUG\n+\t    printf (\"%i: 0x%x != 0x%x\\n\", i, v[i], u.i[i]);\n+#endif\n+\t    abort ();\n+\t  }\n+      }\n+    else if (u.i[i] != 0)\n+      {\n+#ifdef DEBUG\n+\tprintf (\"%i: 0x%x != 0\\n\", i, u.i[i]);\n+#endif\n+\tabort ();\n+      }\n+}\n+\n+static void\n+__attribute__((noinline))\n+test (unsigned char *v)\n+{\n+  __m128i x;\n+\n+  x = _mm_set_epi8 (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, v[0]);\n+  check (x, v, 0);\n+  x = _mm_set_epi8 (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, v[1], 0);\n+  check (x, v, 1);\n+  x = _mm_set_epi8 (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, v[2], 0, 0);\n+  check (x, v, 2);\n+  x = _mm_set_epi8 (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, v[3], 0, 0, 0);\n+  check (x, v, 3);\n+  x = _mm_set_epi8 (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, v[4], 0, 0, 0, 0);\n+  check (x, v, 4);\n+  x = _mm_set_epi8 (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, v[5], 0, 0, 0, 0, 0);\n+  check (x, v, 5);\n+  x = _mm_set_epi8 (0, 0, 0, 0, 0, 0, 0, 0, 0, v[6], 0, 0, 0, 0, 0, 0);\n+  check (x, v, 6);\n+  x = _mm_set_epi8 (0, 0, 0, 0, 0, 0, 0, 0, v[7], 0, 0, 0, 0, 0, 0, 0);\n+  check (x, v, 7);\n+}\n+\n+static void\n+sse2_test (void)\n+{\n+  unsigned char v[16]\n+    = { 0x7B, 0x5B, 0x54, 0x65, 0x73, 0x74, 0x56, 0x65,\n+\t0x63, 0x74, 0x6F, 0x72, 0x5D, 0x53, 0x47, 0x5D };\n+  test (v);\n+}"}, {"sha": "7dc80a320ed22d4db747fa95202346ca397af894", "filename": "gcc/testsuite/gcc.target/i386/sse2-init-v2di-1.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af7ae5d1075e9e7f2eddd0a7b113ebca3429b9e4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-init-v2di-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af7ae5d1075e9e7f2eddd0a7b113ebca3429b9e4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-init-v2di-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-init-v2di-1.c?ref=af7ae5d1075e9e7f2eddd0a7b113ebca3429b9e4", "patch": "@@ -0,0 +1,63 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -msse2\" } */\n+\n+#include \"sse2-check.h\"\n+\n+#ifdef DEBUG\n+#include <stdio.h>\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static void\n+__attribute__((noinline))\n+check (__m128i x, unsigned long long *v, int j)\n+{\n+  union\n+    {\n+      __m128i x;\n+      unsigned long long i[2];\n+    } u;\n+  unsigned int i;\n+\n+  u.x = x;\n+  \n+  for (i = 0; i < sizeof (v) / sizeof (v[0]); i++)\n+    if (i == j)\n+      {\n+\tif (v[i] != u.i[i])\n+\t  {\n+#ifdef DEBUG\n+\t    printf (\"%i: 0x%llx != 0x%llx\\n\", i, v[i], u.i[i]);\n+#endif\n+\t    abort ();\n+\t  }\n+      }\n+    else if (u.i[i] != 0)\n+      {\n+#ifdef DEBUG\n+\tprintf (\"%i: 0x%llx != 0\\n\", i, u.i[i]);\n+#endif\n+\tabort ();\n+      }\n+}\n+\n+static void\n+__attribute__((noinline))\n+test (unsigned long long *v)\n+{\n+  __m128i x;\n+\n+  x = _mm_set_epi64x (0, v[0]);\n+  check (x, v, 0);\n+  x = _mm_set_epi64x (v[1], 0);\n+  check (x, v, 1);\n+}\n+\n+static void\n+sse2_test (void)\n+{\n+  unsigned long long v[2]\n+    = { 0x7B5B546573745665LL, 0x63746F725D53475DLL };\n+  test (v);\n+}"}, {"sha": "71e27be60804c43b71670ff088ce88002bcedc36", "filename": "gcc/testsuite/gcc.target/i386/sse2-init-v4si-1.c", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af7ae5d1075e9e7f2eddd0a7b113ebca3429b9e4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-init-v4si-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af7ae5d1075e9e7f2eddd0a7b113ebca3429b9e4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-init-v4si-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-init-v4si-1.c?ref=af7ae5d1075e9e7f2eddd0a7b113ebca3429b9e4", "patch": "@@ -0,0 +1,67 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -msse2\" } */\n+\n+#include \"sse2-check.h\"\n+\n+#ifdef DEBUG\n+#include <stdio.h>\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static void\n+__attribute__((noinline))\n+check (__m128i x, unsigned int *v, int j)\n+{\n+  union\n+    {\n+      __m128i x;\n+      unsigned int i[4];\n+    } u;\n+  unsigned int i;\n+\n+  u.x = x;\n+  \n+  for (i = 0; i < sizeof (v) / sizeof (v[0]); i++)\n+    if (i == j)\n+      {\n+\tif (v[i] != u.i[i])\n+\t  {\n+#ifdef DEBUG\n+\t    printf (\"%i: 0x%x != 0x%x\\n\", i, v[i], u.i[i]);\n+#endif\n+\t    abort ();\n+\t  }\n+      }\n+    else if (u.i[i] != 0)\n+      {\n+#ifdef DEBUG\n+\tprintf (\"%i: 0x%x != 0\\n\", i, u.i[i]);\n+#endif\n+\tabort ();\n+      }\n+}\n+\n+static void\n+__attribute__((noinline))\n+test (unsigned int *v)\n+{\n+  __m128i x;\n+\n+  x = _mm_set_epi32 (0, 0, 0, v[0]);\n+  check (x, v, 0);\n+  x = _mm_set_epi32 (0, 0, v[1], 0);\n+  check (x, v, 1);\n+  x = _mm_set_epi32 (0, v[2], 0, 0);\n+  check (x, v, 2);\n+  x = _mm_set_epi32 (v[3], 0, 0, 0);\n+  check (x, v, 3);\n+}\n+\n+static void\n+sse2_test (void)\n+{\n+  unsigned int v[4]\n+    = { 0x7B5B5465, 0x73745665, 0x63746F72, 0x5D53475D };\n+  test (v);\n+}"}, {"sha": "3874b2ed526d6b3e288c58763554d63d8975adee", "filename": "gcc/testsuite/gcc.target/i386/sse2-init-v8hi-1.c", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af7ae5d1075e9e7f2eddd0a7b113ebca3429b9e4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-init-v8hi-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af7ae5d1075e9e7f2eddd0a7b113ebca3429b9e4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-init-v8hi-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-init-v8hi-1.c?ref=af7ae5d1075e9e7f2eddd0a7b113ebca3429b9e4", "patch": "@@ -0,0 +1,76 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -msse2\" } */\n+\n+#include \"sse2-check.h\"\n+\n+#ifdef DEBUG\n+#include <stdio.h>\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static void\n+__attribute__((noinline))\n+check (__m128i x, unsigned short *v, int j)\n+{\n+  union\n+    {\n+      __m128i x;\n+      unsigned short i[8];\n+    } u;\n+  unsigned int i;\n+\n+  u.x = x;\n+  \n+  for (i = 0; i < sizeof (v) / sizeof (v[0]); i++)\n+    if (i == j)\n+      {\n+\tif (v[i] != u.i[i])\n+\t  {\n+#ifdef DEBUG\n+\t    printf (\"%i: 0x%x != 0x%x\\n\", i, v[i], u.i[i]);\n+#endif\n+\t    abort ();\n+\t  }\n+      }\n+    else if (u.i[i] != 0)\n+      {\n+#ifdef DEBUG\n+\tprintf (\"%i: 0x%x != 0\\n\", i, u.i[i]);\n+#endif\n+\tabort ();\n+      }\n+}\n+\n+static void\n+__attribute__((noinline))\n+test (unsigned short *v)\n+{\n+  __m128i x;\n+\n+  x = _mm_set_epi16 (0, 0, 0, 0, 0, 0, 0, v[0]);\n+  check (x, v, 0);\n+  x = _mm_set_epi16 (0, 0, 0, 0, 0, 0, v[1], 0);\n+  check (x, v, 1);\n+  x = _mm_set_epi16 (0, 0, 0, 0, 0, v[2], 0, 0);\n+  check (x, v, 2);\n+  x = _mm_set_epi16 (0, 0, 0, 0, v[3], 0, 0, 0);\n+  check (x, v, 3);\n+  x = _mm_set_epi16 (0, 0, 0, v[4], 0, 0, 0, 0);\n+  check (x, v, 4);\n+  x = _mm_set_epi16 (0, 0, v[5], 0, 0, 0, 0, 0);\n+  check (x, v, 5);\n+  x = _mm_set_epi16 (0, v[6], 0, 0, 0, 0, 0, 0);\n+  check (x, v, 6);\n+  x = _mm_set_epi16 (v[7], 0, 0, 0, 0, 0, 0, 0);\n+  check (x, v, 7);\n+}\n+\n+static void\n+sse2_test (void)\n+{\n+  unsigned short v[8]\n+    = { 0x7B5B, 0x5465, 0x7374, 0x5665,\n+\t0x6374, 0x6F72, 0x5D53, 0x475D };\n+  test (v);\n+}"}, {"sha": "6a3ccee583e9ae393370bd64d1120e3e5d019ace", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-init-v16qi-1.c", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af7ae5d1075e9e7f2eddd0a7b113ebca3429b9e4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-init-v16qi-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af7ae5d1075e9e7f2eddd0a7b113ebca3429b9e4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-init-v16qi-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-init-v16qi-1.c?ref=af7ae5d1075e9e7f2eddd0a7b113ebca3429b9e4", "patch": "@@ -0,0 +1,77 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#ifdef DEBUG\n+#include <stdio.h>\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static void\n+__attribute__((noinline))\n+check (__m128i x, unsigned char *v, int j)\n+{\n+  union\n+    {\n+      __m128i x;\n+      unsigned char i[16];\n+    } u;\n+  unsigned int i;\n+\n+  u.x = x;\n+  \n+  for (i = 0; i < sizeof (v) / sizeof (v[0]); i++)\n+    if (i == j)\n+      {\n+\tif (v[i] != u.i[i])\n+\t  {\n+#ifdef DEBUG\n+\t    printf (\"%i: 0x%x != 0x%x\\n\", i, v[i], u.i[i]);\n+#endif\n+\t    abort ();\n+\t  }\n+      }\n+    else if (u.i[i] != 0)\n+      {\n+#ifdef DEBUG\n+\tprintf (\"%i: 0x%x != 0\\n\", i, u.i[i]);\n+#endif\n+\tabort ();\n+      }\n+}\n+\n+static void\n+__attribute__((noinline))\n+test (unsigned char *v)\n+{\n+  __m128i x;\n+\n+  x = _mm_set_epi8 (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, v[0]);\n+  check (x, v, 0);\n+  x = _mm_set_epi8 (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, v[1], 0);\n+  check (x, v, 1);\n+  x = _mm_set_epi8 (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, v[2], 0, 0);\n+  check (x, v, 2);\n+  x = _mm_set_epi8 (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, v[3], 0, 0, 0);\n+  check (x, v, 3);\n+  x = _mm_set_epi8 (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, v[4], 0, 0, 0, 0);\n+  check (x, v, 4);\n+  x = _mm_set_epi8 (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, v[5], 0, 0, 0, 0, 0);\n+  check (x, v, 5);\n+  x = _mm_set_epi8 (0, 0, 0, 0, 0, 0, 0, 0, 0, v[6], 0, 0, 0, 0, 0, 0);\n+  check (x, v, 6);\n+  x = _mm_set_epi8 (0, 0, 0, 0, 0, 0, 0, 0, v[7], 0, 0, 0, 0, 0, 0, 0);\n+  check (x, v, 7);\n+}\n+\n+static void\n+sse4_1_test (void)\n+{\n+  unsigned char v[16]\n+    = { 0x7B, 0x5B, 0x54, 0x65, 0x73, 0x74, 0x56, 0x65,\n+\t0x63, 0x74, 0x6F, 0x72, 0x5D, 0x53, 0x47, 0x5D };\n+  test (v);\n+}"}, {"sha": "cd9fa79785393acf70b6e6c1e4e5e8e319bc7b45", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-init-v2di-1.c", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af7ae5d1075e9e7f2eddd0a7b113ebca3429b9e4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-init-v2di-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af7ae5d1075e9e7f2eddd0a7b113ebca3429b9e4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-init-v2di-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-init-v2di-1.c?ref=af7ae5d1075e9e7f2eddd0a7b113ebca3429b9e4", "patch": "@@ -0,0 +1,64 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#ifdef DEBUG\n+#include <stdio.h>\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static void\n+__attribute__((noinline))\n+check (__m128i x, unsigned long long *v, int j)\n+{\n+  union\n+    {\n+      __m128i x;\n+      unsigned long long i[2];\n+    } u;\n+  unsigned int i;\n+\n+  u.x = x;\n+  \n+  for (i = 0; i < sizeof (v) / sizeof (v[0]); i++)\n+    if (i == j)\n+      {\n+\tif (v[i] != u.i[i])\n+\t  {\n+#ifdef DEBUG\n+\t    printf (\"%i: 0x%llx != 0x%llx\\n\", i, v[i], u.i[i]);\n+#endif\n+\t    abort ();\n+\t  }\n+      }\n+    else if (u.i[i] != 0)\n+      {\n+#ifdef DEBUG\n+\tprintf (\"%i: 0x%llx != 0\\n\", i, u.i[i]);\n+#endif\n+\tabort ();\n+      }\n+}\n+\n+static void\n+__attribute__((noinline))\n+test (unsigned long long *v)\n+{\n+  __m128i x;\n+\n+  x = _mm_set_epi64x (0, v[0]);\n+  check (x, v, 0);\n+  x = _mm_set_epi64x (v[1], 0);\n+  check (x, v, 1);\n+}\n+\n+static void\n+sse4_1_test (void)\n+{\n+  unsigned long long v[2]\n+    = { 0x7B5B546573745665LL, 0x63746F725D53475DLL };\n+  test (v);\n+}"}, {"sha": "f976042351701f0e9fc478a8c8db7ab49dbe6c10", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-init-v4sf-1.c", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af7ae5d1075e9e7f2eddd0a7b113ebca3429b9e4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-init-v4sf-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af7ae5d1075e9e7f2eddd0a7b113ebca3429b9e4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-init-v4sf-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-init-v4sf-1.c?ref=af7ae5d1075e9e7f2eddd0a7b113ebca3429b9e4", "patch": "@@ -0,0 +1,67 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#ifdef DEBUG\n+#include <stdio.h>\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static void\n+__attribute__((noinline))\n+check (__m128 x, float *v, int j)\n+{\n+  union\n+    {\n+      __m128 x;\n+      float f[4];\n+    } u;\n+  unsigned int i;\n+\n+  u.x = x;\n+  \n+  for (i = 0; i < sizeof (v) / sizeof (v[0]); i++)\n+    if (i == j)\n+      {\n+\tif (v[i] != u.f[i])\n+\t  {\n+#ifdef DEBUG\n+\t    printf (\"%i: %f != %f\\n\", i, v[i], u.f[i]);\n+#endif\n+\t    abort ();\n+\t  }\n+      }\n+    else if (u.f[i] != 0)\n+      {\n+#ifdef DEBUG\n+\tprintf (\"%i: %f != 0\\n\", i, u.f[i]);\n+#endif\n+\tabort ();\n+      }\n+}\n+\n+static void\n+__attribute__((noinline))\n+test (float *v)\n+{\n+  __m128 x;\n+\n+  x = _mm_set_ps (0, 0, 0, v[0]);\n+  check (x, v, 0);\n+  x = _mm_set_ps (0, 0, v[1], 0);\n+  check (x, v, 1);\n+  x = _mm_set_ps (0, v[2], 0, 0);\n+  check (x, v, 2);\n+  x = _mm_set_ps (v[3], 0, 0, 0);\n+  check (x, v, 3);\n+}\n+\n+static void\n+sse4_1_test (void)\n+{\n+  float v[4] = { -3, 2, 1, 9 };\n+  test (v);\n+}"}, {"sha": "63501b7eebe51e91a98ce56a817730e79dfc5fd2", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-init-v4si-1.c", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af7ae5d1075e9e7f2eddd0a7b113ebca3429b9e4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-init-v4si-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af7ae5d1075e9e7f2eddd0a7b113ebca3429b9e4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-init-v4si-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-init-v4si-1.c?ref=af7ae5d1075e9e7f2eddd0a7b113ebca3429b9e4", "patch": "@@ -0,0 +1,68 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#ifdef DEBUG\n+#include <stdio.h>\n+#endif\n+\n+#include <emmintrin.h>\n+\n+static void\n+__attribute__((noinline))\n+check (__m128i x, unsigned int *v, int j)\n+{\n+  union\n+    {\n+      __m128i x;\n+      unsigned int i[4];\n+    } u;\n+  unsigned int i;\n+\n+  u.x = x;\n+  \n+  for (i = 0; i < sizeof (v) / sizeof (v[0]); i++)\n+    if (i == j)\n+      {\n+\tif (v[i] != u.i[i])\n+\t  {\n+#ifdef DEBUG\n+\t    printf (\"%i: 0x%x != 0x%x\\n\", i, v[i], u.i[i]);\n+#endif\n+\t    abort ();\n+\t  }\n+      }\n+    else if (u.i[i] != 0)\n+      {\n+#ifdef DEBUG\n+\tprintf (\"%i: 0x%x != 0\\n\", i, u.i[i]);\n+#endif\n+\tabort ();\n+      }\n+}\n+\n+static void\n+__attribute__((noinline))\n+test (unsigned int *v)\n+{\n+  __m128i x;\n+\n+  x = _mm_set_epi32 (0, 0, 0, v[0]);\n+  check (x, v, 0);\n+  x = _mm_set_epi32 (0, 0, v[1], 0);\n+  check (x, v, 1);\n+  x = _mm_set_epi32 (0, v[2], 0, 0);\n+  check (x, v, 2);\n+  x = _mm_set_epi32 (v[3], 0, 0, 0);\n+  check (x, v, 3);\n+}\n+\n+static void\n+sse4_1_test (void)\n+{\n+  unsigned int v[4]\n+    = { 0x7B5B5465, 0x73745665, 0x63746F72, 0x5D53475D };\n+  test (v);\n+}"}]}