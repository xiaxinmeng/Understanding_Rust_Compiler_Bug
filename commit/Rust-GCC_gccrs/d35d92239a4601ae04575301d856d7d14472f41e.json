{"sha": "d35d92239a4601ae04575301d856d7d14472f41e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDM1ZDkyMjM5YTQ2MDFhZTA0NTc1MzAxZDg1NmQ3ZDE0NDcyZjQxZQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2005-05-09T15:58:56Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2005-05-09T15:58:56Z"}, "message": "pdp11.c (pdp11_output_function_prologue): Use gcc_assert and gcc_unreachable as appropriate.\n\n\t* config/pdp11/pdp11.c (pdp11_output_function_prologue): Use\n\tgcc_assert and gcc_unreachable as appropriate.\n\t(pdp11_output_function_epilogue, output_move_double,\n\toutput_move_quad, print_operand_address, output_jump,\n\toutput_addr_const_pdp11): Likewise.\n\t* config/pdp11/pdp11.h (FUNCTION_PROFILER,\n\tASM_OUTPUT_ALIGN): Likewise.\n\t* config/pdp11/pdp11.md: Likewise.\n\t(extendhisi2, subhi3, subqi3): Likewise.\n\nFrom-SVN: r99446", "tree": {"sha": "ec7afc29607b68bc05bb68569514abdc99ff8249", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec7afc29607b68bc05bb68569514abdc99ff8249"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d35d92239a4601ae04575301d856d7d14472f41e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d35d92239a4601ae04575301d856d7d14472f41e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d35d92239a4601ae04575301d856d7d14472f41e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d35d92239a4601ae04575301d856d7d14472f41e/comments", "author": null, "committer": null, "parents": [{"sha": "47d96c3ea96e5811601f9a546f6464f4600eb51e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47d96c3ea96e5811601f9a546f6464f4600eb51e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47d96c3ea96e5811601f9a546f6464f4600eb51e"}], "stats": {"total": 97, "additions": 45, "deletions": 52}, "files": [{"sha": "fa94448707acad9118b042a74debf3e980f68cc8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d35d92239a4601ae04575301d856d7d14472f41e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d35d92239a4601ae04575301d856d7d14472f41e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d35d92239a4601ae04575301d856d7d14472f41e", "patch": "@@ -1,3 +1,15 @@\n+2005-05-09  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* config/pdp11/pdp11.c (pdp11_output_function_prologue): Use\n+\tgcc_assert and gcc_unreachable as appropriate.\n+\t(pdp11_output_function_epilogue, output_move_double,\n+\toutput_move_quad, print_operand_address, output_jump,\n+\toutput_addr_const_pdp11): Likewise.\n+\t* config/pdp11/pdp11.h (FUNCTION_PROFILER,\n+\tASM_OUTPUT_ALIGN): Likewise.\n+\t* config/pdp11/pdp11.md: Likewise.\n+\t(extendhisi2, subhi3, subqi3): Likewise.\n+\n 2005-05-09  David Edelsohn  <edelsohn@gnu.org>\n \n \tPR middle-end/21237"}, {"sha": "f9fbfcf6749f72c2f28f949f8d341441530cf7b5", "filename": "gcc/config/pdp11/pdp11.c", "status": "modified", "additions": 24, "deletions": 38, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d35d92239a4601ae04575301d856d7d14472f41e/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d35d92239a4601ae04575301d856d7d14472f41e/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.c?ref=d35d92239a4601ae04575301d856d7d14472f41e", "patch": "@@ -315,11 +315,10 @@ pdp11_output_function_prologue (FILE *stream, HOST_WIDE_INT size)\n \t    && regs_ever_live[regno]\n \t    && ! call_used_regs[regno])\n \t{\n-\t    if (via_ac == -1)\n-\t\tabort();\n-\t    \n-\t    fprintf (stream, \"\\tldd %s, %s\\n\", reg_names[regno], reg_names[via_ac]);\n-\t    fprintf (stream, \"\\tstd %s, -(sp)\\n\", reg_names[via_ac]);\n+\t  gcc_assert (via_ac != -1);\n+\t  fprintf (stream, \"\\tldd %s, %s\\n\",\n+\t\t   reg_names[regno], reg_names[via_ac]);\n+\t  fprintf (stream, \"\\tstd %s, -(sp)\\n\", reg_names[via_ac]);\n \t}\n     }\n \n@@ -410,8 +409,7 @@ pdp11_output_function_epilogue (FILE *stream, HOST_WIDE_INT size)\n \t\t&& regs_ever_live[i]\n \t\t&& ! call_used_regs[i])\n \t    {\n-\t\tif (! LOAD_FPU_REG_P(via_ac))\n-\t\t    abort();\n+\t        gcc_assert (LOAD_FPU_REG_P(via_ac));\n \t\t    \n \t\tfprintf(stream, \"\\tldd %#o(r5), %s\\n\", (-fsize-k)&0xffff, reg_names[via_ac]);\n \t\tfprintf(stream, \"\\tstd %s, %s\\n\", reg_names[via_ac], reg_names[i]);\n@@ -442,8 +440,7 @@ pdp11_output_function_epilogue (FILE *stream, HOST_WIDE_INT size)\n \t\t&& regs_ever_live[i]\n \t\t&& ! call_used_regs[i])\n \t    {\n-\t\tif (! LOAD_FPU_REG_P(via_ac))\n-\t\t    abort();\n+\t        gcc_assert (LOAD_FPU_REG_P(via_ac));\n \t\t    \n \t\tfprintf(stream, \"\\tldd (sp)+, %s\\n\", reg_names[via_ac]);\n \t\tfprintf(stream, \"\\tstd %s, %s\\n\", reg_names[via_ac], reg_names[i]);\n@@ -524,8 +521,7 @@ output_move_double (rtx *operands)\n      supposed to allow to happen.  Abort if we get one,\n      because generating code for these cases is painful.  */\n \n-  if (optype0 == RNDOP || optype1 == RNDOP)\n-    abort ();\n+  gcc_assert (optype0 != RNDOP && optype1 != RNDOP);\n \n   /* If one operand is decrementing and one is incrementing\n      decrement the former register explicitly\n@@ -585,11 +581,9 @@ output_move_double (rtx *operands)\n \t    latehalf[1] = GEN_INT (INTVAL(operands[1]) >> 16);\n \t    operands[1] = GEN_INT (INTVAL(operands[1]) & 0xff);\n \t}\n-      else if (GET_CODE (operands[1]) == CONST_DOUBLE)\n-\t{\n-\t    /* immediate 32 bit values not allowed */\n-\t    abort();\n-\t}\n+\telse\n+\t  /* immediate 32 bit values not allowed */\n+\t  gcc_assert (GET_CODE (operands[1]) != CONST_DOUBLE);\n     }\n   else\n     latehalf[1] = operands[1];\n@@ -699,15 +693,13 @@ output_move_quad (rtx *operands)\n      supposed to allow to happen.  Abort if we get one,\n      because generating code for these cases is painful.  */\n \n-  if (optype0 == RNDOP || optype1 == RNDOP)\n-    abort ();\n+  gcc_assert (optype0 != RNDOP && optype1 != RNDOP);\n   \n   /* check if we move a CPU reg to an FPU reg, or vice versa! */\n   if (optype0 == REGOP && optype1 == REGOP)\n       /* bogus - 64 bit cannot reside in CPU! */\n-      if (CPU_REG_P(REGNO(operands[0]))\n-\t  || CPU_REG_P (REGNO(operands[1])))\n-\t  abort();\n+      gcc_assert (!CPU_REG_P(REGNO(operands[0]))\n+\t\t  && !CPU_REG_P (REGNO(operands[1])));\n   \n   if (optype0 == REGOP || optype1 == REGOP)\n   {\n@@ -801,7 +793,7 @@ output_move_quad (rtx *operands)\n \t  latehalf[1] = const0_rtx;\n \t}\n       else\n-\tabort();\n+\tgcc_unreachable ();\n     }\n   else\n     latehalf[1] = operands[1];\n@@ -995,7 +987,7 @@ print_operand_address (FILE *file, register rtx addr)\n \t}\n       if (offset != 0)\n \t{\n-\t  if (addr != 0) abort ();\n+\t  gcc_assert (addr == 0);\n \t  addr = offset;\n \t}\n       if (reg1 != 0 && GET_CODE (reg1) == MULT)\n@@ -1022,17 +1014,15 @@ print_operand_address (FILE *file, register rtx addr)\n \toutput_address (addr);\n       if (breg != 0)\n \t{\n-\t  if (GET_CODE (breg) != REG)\n-\t    abort ();\n+\t  gcc_assert (GET_CODE (breg) == REG);\n \t  fprintf (file, \"(%s)\", reg_names[REGNO (breg)]);\n \t}\n       if (ireg != 0)\n \t{\n \t  if (GET_CODE (ireg) == MULT)\n \t    ireg = XEXP (ireg, 0);\n-\t  if (GET_CODE (ireg) != REG)\n-\t    abort ();\n-\t  abort();\n+\t  gcc_assert (GET_CODE (ireg) == REG);\n+\t  gcc_unreachable(); /* ??? */\n \t  fprintf (file, \"[%s]\", reg_names[REGNO (ireg)]);\n \t}\n       break;\n@@ -1203,7 +1193,7 @@ pdp11_rtx_costs (rtx x, int code, int outer_code ATTRIBUTE_UNUSED, int *total)\n }\n \n const char *\n-output_jump(const char *pos, const char *neg, int length)\n+output_jump (const char *pos, const char *neg, int length)\n {\n     static int x = 0;\n     \n@@ -1238,7 +1228,7 @@ output_jump(const char *pos, const char *neg, int length)\n \t\n       default:\n \t\n-\tabort();\n+\tgcc_unreachable ();\n     }\n     \n }\n@@ -1667,10 +1657,8 @@ output_addr_const_pdp11 (FILE *file, rtx x)\n   switch (GET_CODE (x))\n     {\n     case PC:\n-      if (flag_pic)\n-\tputc ('.', file);\n-      else\n-\tabort ();\n+      gcc_assert (flag_pic);\n+      putc ('.', file);\n       break;\n \n     case SYMBOL_REF:\n@@ -1703,10 +1691,8 @@ output_addr_const_pdp11 (FILE *file, rtx x)\n       if (GET_MODE (x) == VOIDmode)\n \t{\n \t  /* We can use %o if the number is one word and positive.  */\n-\t  if (CONST_DOUBLE_HIGH (x))\n-\t    abort (); /* Should we just silently drop the high part?  */\n-\t  else\n-\t    fprintf (file, \"%#ho\", (unsigned short) CONST_DOUBLE_LOW (x));\n+\t  gcc_assert (!CONST_DOUBLE_HIGH (x));\n+\t  fprintf (file, \"%#ho\", (unsigned short) CONST_DOUBLE_LOW (x));\n \t}\n       else\n \t/* We can't handle floating point constants;"}, {"sha": "1391bbe00163fe853cc6626f4e5841f055eca546", "filename": "gcc/config/pdp11/pdp11.h", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d35d92239a4601ae04575301d856d7d14472f41e/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d35d92239a4601ae04575301d856d7d14472f41e/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.h?ref=d35d92239a4601ae04575301d856d7d14472f41e", "patch": "@@ -550,7 +550,7 @@ maybe ac0 ? - as option someday! */\n    for profiling a function entry.  */\n \n #define FUNCTION_PROFILER(FILE, LABELNO)  \\\n-   abort ();\n+   gcc_unreachable ();\n \n /* EXIT_IGNORE_STACK should be nonzero if, when returning from a function,\n    the stack pointer does not matter.  The value is tested only in\n@@ -944,7 +944,7 @@ extern struct rtx_def *cc0_reg_rtx;\n \tfprintf (FILE, \"\\t.even\\n\");\t\\\n \tbreak;\t\t\t\t\\\n       default:\t\t\t\t\\\n-\tabort ();\t\t\t\\\n+\tgcc_unreachable ();\t\t\\\n     }\n \n #define ASM_OUTPUT_SKIP(FILE,SIZE)  \\\n@@ -1016,8 +1016,7 @@ JMP\tFUNCTION\t0x0058  0x0000 <- FUNCTION\n \n #define TRAMPOLINE_TEMPLATE(FILE)\t\\\n {\t\t\t\t\t\\\n-  if (TARGET_SPLIT)\t\t\t\\\n-    abort();\t\t\t\t\\\n+  gcc_assert (!TARGET_SPLIT);\t\t\\\n \t\t\t\t\t\\\n   assemble_aligned_integer (2, GEN_INT (0x9400+STATIC_CHAIN_REGNUM));\t\\\n   assemble_aligned_integer (2, const0_rtx);\t\t\t\t\\\n@@ -1034,8 +1033,7 @@ JMP\tFUNCTION\t0x0058  0x0000 <- FUNCTION\n \n #define INITIALIZE_TRAMPOLINE(TRAMP,FNADDR,CXT)\t\\\n {\t\t\t\t\t\\\n-  if (TARGET_SPLIT)\t\t\t\\\n-    abort();\t\t\t\t\\\n+  gcc_assert (!TARGET_SPLIT);\t\t\\\n \t\t\t\t\t\\\n   emit_move_insn (gen_rtx_MEM (HImode, plus_constant (TRAMP, 2)), CXT); \\\n   emit_move_insn (gen_rtx_MEM (HImode, plus_constant (TRAMP, 6)), FNADDR); \\"}, {"sha": "ebf486352fbc1149cb51b9fdd066ca290cc0380b", "filename": "gcc/config/pdp11/pdp11.md", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d35d92239a4601ae04575301d856d7d14472f41e/gcc%2Fconfig%2Fpdp11%2Fpdp11.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d35d92239a4601ae04575301d856d7d14472f41e/gcc%2Fconfig%2Fpdp11%2Fpdp11.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.md?ref=d35d92239a4601ae04575301d856d7d14472f41e", "patch": "@@ -124,8 +124,7 @@\n   rtx br_insn = NEXT_INSN (insn);\n   RTX_CODE br_code;\n \n-  if (GET_CODE (br_insn) != JUMP_INSN)\n-    abort();\n+  gcc_assert (GET_CODE (br_insn) == JUMP_INSN);\n   br_code =  GET_CODE (XEXP (XEXP (PATTERN (br_insn), 1), 0));\n   \n   switch(br_code)\n@@ -148,7 +147,7 @@\n \n     default:\n \n-      abort();\n+      gcc_unreachable ();\n   }\n }\"\n   [(set_attr \"length\" \"4\")])\n@@ -872,7 +871,7 @@\n \n     default:\n \n-      abort();\n+      gcc_unreachable ();\n   }\n }\"\n   [(set_attr \"length\" \"5,3,3\")])\n@@ -1131,8 +1130,7 @@\n   \"\"\n   \"*\n {\n-  if (GET_CODE (operands[2]) == CONST_INT)\n-    abort();\n+  gcc_assert (GET_CODE (operands[2]) != CONST_INT);\n \n   return \\\"sub %2, %0\\\";\n }\"\n@@ -1145,8 +1143,7 @@\n   \"\"\n   \"*\n {\n-  if (GET_CODE (operands[2]) == CONST_INT)\n-    abort();\n+  gcc_assert (GET_CODE (operands[2]) != CONST_INT);\n \n   return \\\"sub %2, %0\\\";\n }\""}]}