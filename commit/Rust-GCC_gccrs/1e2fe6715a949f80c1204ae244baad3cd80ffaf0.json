{"sha": "1e2fe6715a949f80c1204ae244baad3cd80ffaf0", "node_id": "C_kwDOANBUbNoAKDFlMmZlNjcxNWE5NDlmODBjMTIwNGFlMjQ0YmFhZDNjZDgwZmZhZjA", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-02-11T21:43:21Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-02-15T21:33:29Z"}, "message": "analyzer: fix uninit false +ve due to optimized conditionals [PR102692]\n\nThere is false positive from -Wanalyzer-use-of-uninitialized-value on\ngcc.dg/analyzer/pr102692.c here:\n\n  \u2018fix_overlays_before\u2019: events 1-3\n    |\n    |   75 |   while (tail\n    |      |          ~~~~\n    |   76 |          && (tem = make_lisp_ptr (tail, 5),\n    |      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    |      |          |\n    |      |          (1) following \u2018false\u2019 branch (when \u2018tail\u2019 is NULL)...\n    |   77 |              (end = marker_position (XOVERLAY (tem)->end)) >= pos))\n    |      |              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    |......\n    |   82 |   if (!tail || end < prev || !tail->next)\n    |      |       ~~~~~    ~~~~~~~~~~\n    |      |       |            |\n    |      |       |            (3) use of uninitialized value \u2018end\u2019 here\n    |      |       (2) ...to here\n    |\n\nThe issue is that inner || of the conditionals have been folded within the\nfrontend from a chain of control flow:\n\n   5   \u2502   if (tail == 0B) goto <D.1986>; else goto <D.1988>;\n   6   \u2502   <D.1988>:\n   7   \u2502   if (end < prev) goto <D.1986>; else goto <D.1989>;\n   8   \u2502   <D.1989>:\n   9   \u2502   _1 = tail->next;\n  10   \u2502   if (_1 == 0B) goto <D.1986>; else goto <D.1987>;\n  11   \u2502   <D.1986>:\n\nto an OR expr (and then to a bitwise-or by the gimplifier):\n\n   5   \u2502   _1 = tail == 0B;\n   6   \u2502   _2 = end < prev;\n   7   \u2502   _3 = _1 | _2;\n   8   \u2502   if (_3 != 0) goto <D.1986>; else goto <D.1988>;\n   9   \u2502   <D.1988>:\n  10   \u2502   _4 = tail->next;\n  11   \u2502   if (_4 == 0B) goto <D.1986>; else goto <D.1987>;\n\nThis happens for sufficiently simple conditionals in fold_truth_andor.\nIn particular, the (end < prev) is short-circuited without optimization,\nbut is evaluated with optimization, leading to the false positive.\n\nGiven how early this folding occurs, it seems the simplest fix is to\ntry to detect places where this optimization appears to have happened,\nand suppress uninit warnings within the statement that would have\nbeen short-circuited.\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/102692\n\t* exploded-graph.h (impl_region_model_context::get_stmt): New.\n\t* region-model.cc: Include \"gimple-ssa.h\", \"tree-phinodes.h\",\n\t\"tree-ssa-operands.h\", and \"ssa-iterators.h\".\n\t(within_short_circuited_stmt_p): New.\n\t(region_model::check_for_poison): Don't warn about uninit values\n\tif within_short_circuited_stmt_p.\n\t* region-model.h (region_model_context::get_stmt): New vfunc.\n\t(noop_region_model_context::get_stmt): New.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/102692\n\t* gcc.dg/analyzer/pr102692-2.c: New test.\n\t* gcc.dg/analyzer/pr102692.c: Remove xfail.  Remove -O2 from\n\toptions and move to...\n\t* gcc.dg/analyzer/torture/pr102692.c: ...here.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "c503a92f3e93bcc196d1e495df99a5d1d73dfb37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c503a92f3e93bcc196d1e495df99a5d1d73dfb37"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e2fe6715a949f80c1204ae244baad3cd80ffaf0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e2fe6715a949f80c1204ae244baad3cd80ffaf0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e2fe6715a949f80c1204ae244baad3cd80ffaf0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e2fe6715a949f80c1204ae244baad3cd80ffaf0/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d74ea551734694c225643c4069b1b4d4d2b05ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d74ea551734694c225643c4069b1b4d4d2b05ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d74ea551734694c225643c4069b1b4d4d2b05ed"}], "stats": {"total": 144, "additions": 142, "deletions": 2}, "files": [{"sha": "1f52725dc989b38aa3212488aaeff9373a243e49", "filename": "gcc/analyzer/exploded-graph.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2fe6715a949f80c1204ae244baad3cd80ffaf0/gcc%2Fanalyzer%2Fexploded-graph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2fe6715a949f80c1204ae244baad3cd80ffaf0/gcc%2Fanalyzer%2Fexploded-graph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fexploded-graph.h?ref=1e2fe6715a949f80c1204ae244baad3cd80ffaf0", "patch": "@@ -90,6 +90,8 @@ class impl_region_model_context : public region_model_context\n \t\t       const state_machine **out_sm,\n \t\t       unsigned *out_sm_idx) FINAL OVERRIDE;\n \n+  const gimple *get_stmt () const OVERRIDE { return m_stmt; }\n+\n   exploded_graph *m_eg;\n   log_user m_logger;\n   exploded_node *m_enode_for_diag;"}, {"sha": "69e8fa7d1e39b9dd9da75023ca2cd995209aa987", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2fe6715a949f80c1204ae244baad3cd80ffaf0/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2fe6715a949f80c1204ae244baad3cd80ffaf0/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=1e2fe6715a949f80c1204ae244baad3cd80ffaf0", "patch": "@@ -68,6 +68,10 @@ along with GCC; see the file COPYING3.  If not see\n #include \"stor-layout.h\"\n #include \"attribs.h\"\n #include \"tree-object-size.h\"\n+#include \"gimple-ssa.h\"\n+#include \"tree-phinodes.h\"\n+#include \"tree-ssa-operands.h\"\n+#include \"ssa-iterators.h\"\n \n #if ENABLE_ANALYZER\n \n@@ -829,6 +833,108 @@ region_model::get_gassign_result (const gassign *assign,\n     }\n }\n \n+/* Workaround for discarding certain false positives from\n+   -Wanalyzer-use-of-uninitialized-value\n+   of the form:\n+     ((A OR-IF B) OR-IF C)\n+   and:\n+     ((A AND-IF B) AND-IF C)\n+   where evaluating B is redundant, but could involve simple accesses of\n+   uninitialized locals.\n+\n+   When optimization is turned on the FE can immediately fold compound\n+   conditionals.  Specifically, c_parser_condition parses this condition:\n+     ((A OR-IF B) OR-IF C)\n+   and calls c_fully_fold on the condition.\n+   Within c_fully_fold, fold_truth_andor is called, which bails when\n+   optimization is off, but if any optimization is turned on can convert the\n+     ((A OR-IF B) OR-IF C)\n+   into:\n+     ((A OR B) OR_IF C)\n+   for sufficiently simple B\n+   i.e. the inner OR-IF becomes an OR.\n+   At gimplification time the inner OR becomes BIT_IOR_EXPR (in gimplify_expr),\n+   giving this for the inner condition:\n+      tmp = A | B;\n+      if (tmp)\n+   thus effectively synthesizing a redundant access of B when optimization\n+   is turned on, when compared to:\n+      if (A) goto L1; else goto L4;\n+  L1: if (B) goto L2; else goto L4;\n+  L2: if (C) goto L3; else goto L4;\n+   for the unoptimized case.\n+\n+   Return true if CTXT appears to be  handling such a short-circuitable stmt,\n+   such as the def-stmt for B for the:\n+      tmp = A | B;\n+   case above, for the case where A is true and thus B would have been\n+   short-circuited without optimization, using MODEL for the value of A.  */\n+\n+static bool\n+within_short_circuited_stmt_p (const region_model *model,\n+\t\t\t       region_model_context *ctxt)\n+{\n+  gcc_assert (ctxt);\n+  const gimple *curr_stmt = ctxt->get_stmt ();\n+  if (curr_stmt == NULL)\n+    return false;\n+\n+  /* We must have an assignment to a temporary of _Bool type.  */\n+  const gassign *assign_stmt = dyn_cast <const gassign *> (curr_stmt);\n+  if (!assign_stmt)\n+    return false;\n+  tree lhs = gimple_assign_lhs (assign_stmt);\n+  if (TREE_TYPE (lhs) != boolean_type_node)\n+    return false;\n+  if (TREE_CODE (lhs) != SSA_NAME)\n+    return false;\n+  if (SSA_NAME_VAR (lhs) != NULL_TREE)\n+    return false;\n+\n+  /* The temporary bool must be used exactly once: as the second arg of\n+     a BIT_IOR_EXPR or BIT_AND_EXPR.  */\n+  use_operand_p use_op;\n+  gimple *use_stmt;\n+  if (!single_imm_use (lhs, &use_op, &use_stmt))\n+    return false;\n+  const gassign *use_assign = dyn_cast <const gassign *> (use_stmt);\n+  if (!use_assign)\n+    return false;\n+  enum tree_code op = gimple_assign_rhs_code (use_assign);\n+  if (!(op == BIT_IOR_EXPR ||op == BIT_AND_EXPR))\n+    return false;\n+  if (!(gimple_assign_rhs1 (use_assign) != lhs\n+\t&& gimple_assign_rhs2 (use_assign) == lhs))\n+    return false;\n+\n+  /* The first arg of the bitwise stmt must have a known value in MODEL\n+     that implies that the value of the second arg doesn't matter, i.e.\n+     1 for bitwise or, 0 for bitwise and.  */\n+  tree other_arg = gimple_assign_rhs1 (use_assign);\n+  /* Use a NULL ctxt here to avoid generating warnings.  */\n+  const svalue *other_arg_sval = model->get_rvalue (other_arg, NULL);\n+  tree other_arg_cst = other_arg_sval->maybe_get_constant ();\n+  if (!other_arg_cst)\n+    return false;\n+  switch (op)\n+    {\n+    default:\n+      gcc_unreachable ();\n+    case BIT_IOR_EXPR:\n+      if (zerop (other_arg_cst))\n+\treturn false;\n+      break;\n+    case BIT_AND_EXPR:\n+      if (!zerop (other_arg_cst))\n+\treturn false;\n+      break;\n+    }\n+\n+  /* All tests passed.  We appear to be in a stmt that generates a boolean\n+     temporary with a value that won't matter.  */\n+  return true;\n+}\n+\n /* Check for SVAL being poisoned, adding a warning to CTXT.\n    Return SVAL, or, if a warning is added, another value, to avoid\n    repeatedly complaining about the same poisoned value in followup code.  */\n@@ -852,6 +958,11 @@ region_model::check_for_poison (const svalue *sval,\n \t  && is_empty_type (sval->get_type ()))\n \treturn sval;\n \n+      /* Special case to avoid certain false positives.  */\n+      if (pkind == POISON_KIND_UNINIT\n+\t  && within_short_circuited_stmt_p (this, ctxt))\n+\t  return sval;\n+\n       /* If we have an SSA name for a temporary, we don't want to print\n \t '<unknown>'.\n \t Poisoned values are shared by type, and so we can't reconstruct"}, {"sha": "c2c89a20d50418f330d394d5eb0857209d4f5322", "filename": "gcc/analyzer/region-model.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2fe6715a949f80c1204ae244baad3cd80ffaf0/gcc%2Fanalyzer%2Fregion-model.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2fe6715a949f80c1204ae244baad3cd80ffaf0/gcc%2Fanalyzer%2Fregion-model.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.h?ref=1e2fe6715a949f80c1204ae244baad3cd80ffaf0", "patch": "@@ -930,6 +930,9 @@ class region_model_context\n   virtual bool get_taint_map (sm_state_map **out_smap,\n \t\t\t      const state_machine **out_sm,\n \t\t\t      unsigned *out_sm_idx) = 0;\n+\n+  /* Get the current statement, if any.  */\n+  virtual const gimple *get_stmt () const = 0;\n };\n \n /* A \"do nothing\" subclass of region_model_context.  */\n@@ -980,6 +983,8 @@ class noop_region_model_context : public region_model_context\n   {\n     return false;\n   }\n+\n+  const gimple *get_stmt () const OVERRIDE { return NULL; }\n };\n \n /* A subclass of region_model_context for determining if operations fail"}, {"sha": "c72fde217440ecb87f406c6931688e6e8bea8be0", "filename": "gcc/testsuite/gcc.dg/analyzer/pr102692-2.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2fe6715a949f80c1204ae244baad3cd80ffaf0/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr102692-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2fe6715a949f80c1204ae244baad3cd80ffaf0/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr102692-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr102692-2.c?ref=1e2fe6715a949f80c1204ae244baad3cd80ffaf0", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-additional-options \"-O1\" } */\n+\n+struct Lisp_Overlay\n+{\n+  struct Lisp_Overlay *next;\n+};\n+\n+void\n+test_1 (struct Lisp_Overlay *tail, long prev)\n+{\n+  long end;\n+  if (!tail || end < prev || !tail->next) /* { dg-warning \"use of uninitialized value 'end'\" } */\n+    return;\n+}\n+\n+void\n+test_2 (struct Lisp_Overlay *tail, long prev)\n+{\n+  long end;\n+  if (tail && end < prev && !tail->next) /* { dg-warning \"use of uninitialized value 'end'\" } */\n+    return;\n+}"}, {"sha": "a6c6bc478967c4026dd077e535dec81d7e5e702a", "filename": "gcc/testsuite/gcc.dg/analyzer/torture/pr102692.c", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2fe6715a949f80c1204ae244baad3cd80ffaf0/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Fpr102692.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2fe6715a949f80c1204ae244baad3cd80ffaf0/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Fpr102692.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Fpr102692.c?ref=1e2fe6715a949f80c1204ae244baad3cd80ffaf0", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-additional-options \"-O2 -Wno-analyzer-too-complex\" } */\n+/* { dg-additional-options \"-Wno-analyzer-too-complex\" } */\n /* TODO: remove the need for -Wno-analyzer-too-complex.  */\n \n struct lisp;\n@@ -73,7 +73,7 @@ fix_overlays_before (struct buffer *bp, long prev, long pos)\n       parent = tail;\n       tail = tail->next;\n     }\n-  if (!tail || end < prev || !tail->next) /* { dg-bogus \"use of uninitialized value 'end'\" \"uninit\" { xfail *-*-* } } */\n+  if (!tail || end < prev || !tail->next) /* { dg-bogus \"use of uninitialized value 'end'\" \"uninit\" } */\n     /* { dg-bogus \"dereference of NULL 'tail'\" \"null deref\" { target *-*-* } .-1 } */\n     return;\n   right_pair = parent;", "previous_filename": "gcc/testsuite/gcc.dg/analyzer/pr102692.c"}]}