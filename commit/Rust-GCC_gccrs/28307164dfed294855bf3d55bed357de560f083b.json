{"sha": "28307164dfed294855bf3d55bed357de560f083b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjgzMDcxNjRkZmVkMjk0ODU1YmYzZDU1YmVkMzU3ZGU1NjBmMDgzYg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2020-01-21T15:33:43Z"}, "committer": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2020-01-21T15:33:43Z"}, "message": "Fix updating of call_stmt_site_hash\n\nThis patch fixes ICE causes by call stmt site hash going out of sync.  For\nspeculative edges it is assumed to contain a direct call so if we are\nremoving it hashtable needs to be updated.  I realize that the code is ugly\nbut I will leave cleanup for next stage1.\n\nBootstrapped/regtested x86_64-linux. This patch makes it possible to build\nFirefox again.\n\n\tPR lto/93318\n\t* cgraph.c (cgraph_edge::resolve_speculation,\n\tcgraph_edge::redirect_call_stmt_to_callee): Fix update of\n\tcall_stmt_site_hash.", "tree": {"sha": "0c424dd708b166a638eb9e71247de2b0e667c586", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c424dd708b166a638eb9e71247de2b0e667c586"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28307164dfed294855bf3d55bed357de560f083b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28307164dfed294855bf3d55bed357de560f083b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28307164dfed294855bf3d55bed357de560f083b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28307164dfed294855bf3d55bed357de560f083b/comments", "author": null, "committer": null, "parents": [{"sha": "8158a4640819dbb3210326e37786fb874f450272", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8158a4640819dbb3210326e37786fb874f450272", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8158a4640819dbb3210326e37786fb874f450272"}], "stats": {"total": 48, "additions": 43, "deletions": 5}, "files": [{"sha": "1e596773ba0736f43dbb149198e56c9328b4bdc3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28307164dfed294855bf3d55bed357de560f083b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28307164dfed294855bf3d55bed357de560f083b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=28307164dfed294855bf3d55bed357de560f083b", "patch": "@@ -1,3 +1,10 @@\n+2020-01-18  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR lto/93318\t\n+\t* cgraph.c (cgraph_edge::resolve_speculation,\n+\tcgraph_edge::redirect_call_stmt_to_callee): Fix update of\n+\tcall_stmt_site_hash.\n+\n 2020-01-21  Martin Liska  <mliska@suse.cz>\n \n \t* config/rs6000/rs6000.c (common_mode_defined): Remove"}, {"sha": "f7ebcc917d17d297e3d479d6312496ebca4863aa", "filename": "gcc/cgraph.c", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28307164dfed294855bf3d55bed357de560f083b/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28307164dfed294855bf3d55bed357de560f083b/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=28307164dfed294855bf3d55bed357de560f083b", "patch": "@@ -1248,7 +1248,22 @@ cgraph_edge::resolve_speculation (cgraph_edge *edge, tree callee_decl)\n   else\n     e2->callee->remove_symbol_and_inline_clones ();\n   if (edge->caller->call_site_hash)\n-    cgraph_update_edge_in_call_site_hash (edge);\n+    {\n+      /* We always maintain direct edge in the call site hash, if one\n+\t exists.  */\n+      if (!edge->num_speculative_call_targets_p ())\n+\tcgraph_update_edge_in_call_site_hash (edge);\n+      else\n+\t{\n+\t  cgraph_edge *e;\n+\t  for (e = edge->caller->callees;\n+\t       e->call_stmt != edge->call_stmt\n+\t       || e->lto_stmt_uid != edge->lto_stmt_uid;\n+\t       e = e->next_callee)\n+\t    ;\n+\t  cgraph_update_edge_in_call_site_hash (e);\n+\t}\n+    }\n   return edge;\n }\n \n@@ -1414,7 +1429,20 @@ cgraph_edge::redirect_call_stmt_to_callee (cgraph_edge *e)\n \t  /* Indirect edges are not both in the call site hash.\n \t     get it updated.  */\n \t  if (e->caller->call_site_hash)\n-\t    cgraph_update_edge_in_call_site_hash (e2);\n+\t    {\n+\t      if (!e2->num_speculative_call_targets_p ())\n+\t\tcgraph_update_edge_in_call_site_hash (e2);\n+\t      else\n+\t\t{\n+\t\t  cgraph_edge *e;\n+\t\t  for (e = e2->caller->callees;\n+\t\t       e->call_stmt != e2->call_stmt\n+\t\t       || e->lto_stmt_uid != e2->lto_stmt_uid;\n+\t\t       e = e->next_callee)\n+\t\t    ;\n+\t\t  cgraph_update_edge_in_call_site_hash (e);\n+\t\t}\n+\t    }\n \t  pop_cfun ();\n \t  /* Continue redirecting E to proper target.  */\n \t}"}, {"sha": "554819316682a3f2cd5950baba84b858edc03b16", "filename": "gcc/ipa.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28307164dfed294855bf3d55bed357de560f083b/gcc%2Fipa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28307164dfed294855bf3d55bed357de560f083b/gcc%2Fipa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa.c?ref=28307164dfed294855bf3d55bed357de560f083b", "patch": "@@ -391,17 +391,20 @@ symbol_table::remove_unreachable_nodes (FILE *file)\n \t\t      n->used_as_abstract_origin = true;\n \t\t}\n \t    }\n-\t  /* If any symbol in a comdat group is reachable, force\n-\t     all externally visible symbols in the same comdat\n+\t  /* If any non-external and non-local symbol in a comdat group is\n+ \t     reachable, force all externally visible symbols in the same comdat\n \t     group to be reachable as well.  Comdat-local symbols\n \t     can be discarded if all uses were inlined.  */\n-\t  if (node->same_comdat_group)\n+\t  if (node->same_comdat_group\n+\t      && node->externally_visible\n+\t      && !DECL_EXTERNAL (node->decl))\n \t    {\n \t      symtab_node *next;\n \t      for (next = node->same_comdat_group;\n \t\t   next != node;\n \t\t   next = next->same_comdat_group)\n \t\tif (!next->comdat_local_p ()\n+\t\t    && !DECL_EXTERNAL (next->decl)\n \t\t    && !reachable.add (next))\n \t\t  enqueue_node (next, &first, &reachable);\n \t    }"}]}