{"sha": "fcad5cf5e8bb2fc25e7971cf9f706581904f2a3e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmNhZDVjZjVlOGJiMmZjMjVlNzk3MWNmOWY3MDY1ODE5MDRmMmEzZQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "1998-04-09T20:36:49Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "1998-04-09T20:36:49Z"}, "message": "cp-tree.h (start_decl): Update prototype.\n\na\nThu Apr  9 22:16:57 1998  Per Bothner  <bothner@cygnus.com>\n        * cp-tree.h (start_decl):  Update prototype.\n        * decl.c (start_decl):  Like the C version, new parameters\n        for the attributes.  Call cplus_decl_attributes here,\n        (pushdecl):  Like C version, do build_type_copy if TYPE_DECL,\n        (grokdeclarator):  Pass NULL for new start_decl arguments.\n        * pt.c (tsubst_expr):  Likewise.\n        * parse.y:  Merge cplus_decl_attribute calls into start_decl calls.\n\t* typeck.c (common_type): Check TYPE_MAIN_VARIANT.\n\t* lex.c (build_lang_decl): Add lang_name_java.\n\t* class.c (push_lang_context): Add lang_name_java.\n\t* method.c (build_mangled_name): Check for is_java_type.\nThu Apr  9 22:16:57 1998  Benjamin Kosnik  <bkoz@loony.cygnus.com>\n\t* decl.c (grokdeclarator): Check TYPE_MAIN_VARIANT.\n\t* call.c (build_scoped_method_call): Check for TREE_CODE for\n\tVOID_TYPE instead of type ==  void_type_node.\n\t(build_method_call): Ditto.\n\t* decl.c (lookup_name_real): Ditto.\n\t(grokdeclarator): Ditto.\n\t(start_decl): Ditto.\n\t(grokparms): Ditto.\n\t(start_function): Ditto.\n\t(finish_function): Ditto.\n\t(start_method): Ditto.\nalso fixes g++/15415\n\nFrom-SVN: r19072", "tree": {"sha": "14a98593fea82ef2bec27b45b1c28a9433b9c53e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/14a98593fea82ef2bec27b45b1c28a9433b9c53e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fcad5cf5e8bb2fc25e7971cf9f706581904f2a3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcad5cf5e8bb2fc25e7971cf9f706581904f2a3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fcad5cf5e8bb2fc25e7971cf9f706581904f2a3e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcad5cf5e8bb2fc25e7971cf9f706581904f2a3e/comments", "author": null, "committer": null, "parents": [{"sha": "a177473334c4f427428326747b97656a0af049fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a177473334c4f427428326747b97656a0af049fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a177473334c4f427428326747b97656a0af049fa"}], "stats": {"total": 39, "additions": 34, "deletions": 5}, "files": [{"sha": "3db48c9be3a201c6b9832c26f38da968043dfe05", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcad5cf5e8bb2fc25e7971cf9f706581904f2a3e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcad5cf5e8bb2fc25e7971cf9f706581904f2a3e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=fcad5cf5e8bb2fc25e7971cf9f706581904f2a3e", "patch": "@@ -1,3 +1,31 @@\n+Thu Apr  9 22:16:57 1998  Per Bothner  <bothner@cygnus.com>\n+\n+        * cp-tree.h (start_decl):  Update prototype.\n+        * decl.c (start_decl):  Like the C version, new parameters\n+        for the attributes.  Call cplus_decl_attributes here,\n+        (pushdecl):  Like C version, do build_type_copy if TYPE_DECL,\n+        (grokdeclarator):  Pass NULL for new start_decl arguments.\n+        * pt.c (tsubst_expr):  Likewise.\n+        * parse.y:  Merge cplus_decl_attribute calls into start_decl calls.\n+\t* typeck.c (common_type): Check TYPE_MAIN_VARIANT.\n+\t* lex.c (build_lang_decl): Add lang_name_java.\n+\t* class.c (push_lang_context): Add lang_name_java.\n+\t* method.c (build_mangled_name): Check for is_java_type.\n+\n+Thu Apr  9 22:16:57 1998  Benjamin Kosnik  <bkoz@loony.cygnus.com>\n+\n+\t* decl.c (grokdeclarator): Check TYPE_MAIN_VARIANT.\n+\t* call.c (build_scoped_method_call): Check for TREE_CODE for\n+\tVOID_TYPE instead of type ==  void_type_node.\n+\t(build_method_call): Ditto.\n+\t* decl.c (lookup_name_real): Ditto.\n+\t(grokdeclarator): Ditto.\n+\t(start_decl): Ditto.\n+\t(grokparms): Ditto.\n+\t(start_function): Ditto.\n+\t(finish_function): Ditto.\n+\t(start_method): Ditto.\n+\n Thu Apr  9 00:18:44 1998  Dave Brolley  (brolley@cygnus.com)\n \n \t* lex.c (finput): New variable."}, {"sha": "dd2e087c153ab5d1c6eb7fe517b03e8830b40193", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcad5cf5e8bb2fc25e7971cf9f706581904f2a3e/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcad5cf5e8bb2fc25e7971cf9f706581904f2a3e/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=fcad5cf5e8bb2fc25e7971cf9f706581904f2a3e", "patch": "@@ -358,7 +358,7 @@ enum cplus_tree_code {\n };\n #undef DEFTREECODE\n \n-enum languages { lang_c, lang_cplusplus };\n+enum languages { lang_c, lang_cplusplus, lang_java };\n \n /* Macros to make error reporting functions' lives easier.  */\n #define TYPE_IDENTIFIER(NODE) (DECL_NAME (TYPE_NAME (NODE)))\n@@ -1646,7 +1646,8 @@ extern tree previous_class_type;\n extern tree current_class_ref;\n extern int current_class_depth;\n \n-extern tree current_lang_name, lang_name_cplusplus, lang_name_c;\n+extern tree current_lang_name;\n+extern tree lang_name_cplusplus, lang_name_c, lang_name_java;\n \n /* Points to the name of that function. May not be the DECL_NAME\n    of CURRENT_FUNCTION_DECL due to overloading */\n@@ -2162,7 +2163,7 @@ extern tree define_function\n \t       void (*) (tree), char *));\n extern void shadow_tag\t\t\t\tPROTO((tree));\n extern tree groktypename\t\t\tPROTO((tree));\n-extern tree start_decl\t\t\t\tPROTO((tree, tree, int));\n+extern tree start_decl\t\t\t\tPROTO((tree, tree, int, tree, tree));\n extern void start_decl_1\t\t\tPROTO((tree));\n extern void cp_finish_decl\t\t\tPROTO((tree, tree, tree, int, int));\n extern void finish_decl\t\t\t\tPROTO((tree, tree, tree));"}, {"sha": "9aac34050cef4fc0f2b20776ecc0c0923a432fd3", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcad5cf5e8bb2fc25e7971cf9f706581904f2a3e/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcad5cf5e8bb2fc25e7971cf9f706581904f2a3e/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=fcad5cf5e8bb2fc25e7971cf9f706581904f2a3e", "patch": "@@ -529,8 +529,8 @@ common_type (t1, t2)\n \n     case RECORD_TYPE:\n     case UNION_TYPE:\n-      my_friendly_assert (TYPE_MAIN_VARIANT (t1) == t1\n-\t\t\t  && TYPE_MAIN_VARIANT (t2) == t2, 306);\n+      t1 = TYPE_MAIN_VARIANT (t1);\n+      t2 = TYPE_MAIN_VARIANT (t2);\n \n       if (DERIVED_FROM_P (t1, t2) && binfo_or_else (t1, t2))\n \treturn build_type_attribute_variant (t1, attributes);"}]}