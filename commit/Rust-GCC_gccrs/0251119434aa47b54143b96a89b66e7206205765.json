{"sha": "0251119434aa47b54143b96a89b66e7206205765", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDI1MTExOTQzNGFhNDdiNTQxNDNiOTZhODliNjZlNzIwNjIwNTc2NQ==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2008-12-30T10:36:39Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2008-12-30T10:36:39Z"}, "message": "re PR middle-end/38572 (ICE in set_value_range, at tree-vrp.c:398)\n\n2008-12-30  Paolo Bonzini  <bonzini@gnu.org>\n\n\tPR tree-optimization/38572\n\t* tree-vrp.c (vrp_visit_phi_node): Look out for invalid ranges\n\tand change them to VARYING.\n\nFrom-SVN: r142962", "tree": {"sha": "dff617f60fb29bcb714b70cce7fcdc2dbf630d62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dff617f60fb29bcb714b70cce7fcdc2dbf630d62"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0251119434aa47b54143b96a89b66e7206205765", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0251119434aa47b54143b96a89b66e7206205765", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0251119434aa47b54143b96a89b66e7206205765", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0251119434aa47b54143b96a89b66e7206205765/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b0331ccbe2cd52043b328f1bbd07f8f75bc9b97e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0331ccbe2cd52043b328f1bbd07f8f75bc9b97e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0331ccbe2cd52043b328f1bbd07f8f75bc9b97e"}], "stats": {"total": 56, "additions": 50, "deletions": 6}, "files": [{"sha": "5c3789a2a820bc1a03f7d72909981af9f3c76598", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0251119434aa47b54143b96a89b66e7206205765/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0251119434aa47b54143b96a89b66e7206205765/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0251119434aa47b54143b96a89b66e7206205765", "patch": "@@ -1,3 +1,9 @@\n+2008-12-30  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\tPR tree-optimization/38572\n+\t* tree-vrp.c (vrp_visit_phi_node): Look out for invalid ranges\n+\tand change them to VARYING.\n+\n 2008-12-30  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/38564"}, {"sha": "89d228f02d0d014960fbe18db362086ec6104081", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr38572.C", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0251119434aa47b54143b96a89b66e7206205765/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr38572.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0251119434aa47b54143b96a89b66e7206205765/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr38572.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr38572.C?ref=0251119434aa47b54143b96a89b66e7206205765", "patch": "@@ -0,0 +1,32 @@\n+// PR tree-optimization/38572\n+// { dg-do compile }\n+// { dg-options \"-O2\" }\n+\n+// Crash caused by the out-of-bounds enum values (all the remaining cruft\n+// is needed only to trigger the appropriate code path in tree-vrp.c).\n+enum JSOp\n+{\n+  JSOP_GETELEM = 5,\n+  JSOP_LIMIT\n+};\n+extern void g ();\n+void f (char *pc, char *endpc, int format, char ***fp, enum JSOp op)\n+{\n+  while (pc <= endpc)\n+    {\n+      if ((fp && *fp && pc == **fp) || pc == endpc)\n+\t{\n+\t  if (format == 1)\n+\t    op = (JSOp) 256;\n+\t  else if (format == 2)\n+\t    op = (JSOp) 257;\n+\t  else\n+\t    op = JSOP_GETELEM;\n+\t}\n+      if (op >= JSOP_LIMIT)\n+\t{\n+\t  if (format)\n+\t    g ();\n+\t}\n+    }\n+}"}, {"sha": "4b6caca1c37452b65d5335b594159442e7b29f26", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0251119434aa47b54143b96a89b66e7206205765/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0251119434aa47b54143b96a89b66e7206205765/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=0251119434aa47b54143b96a89b66e7206205765", "patch": "@@ -6361,9 +6361,12 @@ vrp_visit_phi_node (gimple phi)\n \t     minimums.  */\n \t  if (cmp_min > 0 || cmp_min < 0)\n \t    {\n-\t      /* If we will end up with a (-INF, +INF) range, set it\n-\t\t to VARYING.  */\n-\t      if (vrp_val_is_max (vr_result.max))\n+\t      /* If we will end up with a (-INF, +INF) range, set it to\n+\t\t VARYING.  Same if the previous max value was invalid for\n+\t\t the type and we'd end up with vr_result.min > vr_result.max.  */\n+\t      if (vrp_val_is_max (vr_result.max)\n+\t\t  || compare_values (TYPE_MIN_VALUE (TREE_TYPE (vr_result.min)),\n+\t\t\t\t     vr_result.max) > 0)\n \t\tgoto varying;\n \n \t      if (!needs_overflow_infinity (TREE_TYPE (vr_result.min))\n@@ -6380,9 +6383,12 @@ vrp_visit_phi_node (gimple phi)\n \t     the previous one, go all the way to +INF.  */\n \t  if (cmp_max < 0 || cmp_max > 0)\n \t    {\n-\t      /* If we will end up with a (-INF, +INF) range, set it\n-\t\t to VARYING.  */\n-\t      if (vrp_val_is_min (vr_result.min))\n+\t      /* If we will end up with a (-INF, +INF) range, set it to\n+\t\t VARYING.  Same if the previous min value was invalid for\n+\t\t the type and we'd end up with vr_result.max < vr_result.min.  */\n+\t      if (vrp_val_is_min (vr_result.min)\n+\t\t  || compare_values (TYPE_MAX_VALUE (TREE_TYPE (vr_result.max)),\n+\t\t\t\t     vr_result.min) < 0)\n \t\tgoto varying;\n \n \t      if (!needs_overflow_infinity (TREE_TYPE (vr_result.max))"}]}