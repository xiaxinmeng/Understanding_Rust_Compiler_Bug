{"sha": "0630b8ec3d991a3a7bbd1e041a167a1424c1d388", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDYzMGI4ZWMzZDk5MWEzYTdiYmQxZTA0MWExNjdhMTQyNGMxZDM4OA==", "commit": {"author": {"name": "Thomas Preud'homme", "email": "thomas.preudhomme@arm.com", "date": "2016-08-24T09:51:35Z"}, "committer": {"name": "Thomas Preud'homme", "email": "thopre01@gcc.gnu.org", "date": "2016-08-24T09:51:35Z"}, "message": "fragments.texi (MULTILIB_REUSE): Mention that only options in MULTILIB_OPTIONS should be used.\n\n2016-08-24  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n\n    * doc/fragments.texi (MULTILIB_REUSE): Mention that only options in\n    MULTILIB_OPTIONS should be used.  Small wording fixes.\n    * genmultilib: Memorize set of all option combinations in\n    combination_space.  Detect if RHS of MULTILIB_REUSE uses an option not\n    found in MULTILIB_OPTIONS by checking if option set is listed in\n    combination_space.  Output new and existing error message to stderr.\n\nFrom-SVN: r239734", "tree": {"sha": "0e9dc988dd575b0468e4b36381ffe55f0cf5b672", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0e9dc988dd575b0468e4b36381ffe55f0cf5b672"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0630b8ec3d991a3a7bbd1e041a167a1424c1d388", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0630b8ec3d991a3a7bbd1e041a167a1424c1d388", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0630b8ec3d991a3a7bbd1e041a167a1424c1d388", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0630b8ec3d991a3a7bbd1e041a167a1424c1d388/comments", "author": {"login": "RoboTux", "id": 272327, "node_id": "MDQ6VXNlcjI3MjMyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/272327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RoboTux", "html_url": "https://github.com/RoboTux", "followers_url": "https://api.github.com/users/RoboTux/followers", "following_url": "https://api.github.com/users/RoboTux/following{/other_user}", "gists_url": "https://api.github.com/users/RoboTux/gists{/gist_id}", "starred_url": "https://api.github.com/users/RoboTux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RoboTux/subscriptions", "organizations_url": "https://api.github.com/users/RoboTux/orgs", "repos_url": "https://api.github.com/users/RoboTux/repos", "events_url": "https://api.github.com/users/RoboTux/events{/privacy}", "received_events_url": "https://api.github.com/users/RoboTux/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0ba81bbe65fe5f69f0de7a4e4de3c65ad365b009", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ba81bbe65fe5f69f0de7a4e4de3c65ad365b009", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ba81bbe65fe5f69f0de7a4e4de3c65ad365b009"}], "stats": {"total": 50, "additions": 33, "deletions": 17}, "files": [{"sha": "8d104ec8f28d9268f65fcd650cd7a83505a11b38", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0630b8ec3d991a3a7bbd1e041a167a1424c1d388/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0630b8ec3d991a3a7bbd1e041a167a1424c1d388/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0630b8ec3d991a3a7bbd1e041a167a1424c1d388", "patch": "@@ -1,3 +1,12 @@\n+2016-08-24  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n+\n+\t* doc/fragments.texi (MULTILIB_REUSE): Mention that only options in\n+\tMULTILIB_OPTIONS should be used.  Small wording fixes.\n+\t* genmultilib: Memorize set of all option combinations in\n+\tcombination_space.  Detect if RHS of MULTILIB_REUSE uses an option not\n+\tfound in MULTILIB_OPTIONS by checking if option set is listed in\n+\tcombination_space.  Output new and existing error message to stderr.\n+\n 2016-08-24  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n \n \t* config/arm/t-aprofile (MULTILIB_MATCHES): Add mapping for"}, {"sha": "f5d8e8d6890895431acad5621c9d1074edecefb7", "filename": "gcc/doc/fragments.texi", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0630b8ec3d991a3a7bbd1e041a167a1424c1d388/gcc%2Fdoc%2Ffragments.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0630b8ec3d991a3a7bbd1e041a167a1424c1d388/gcc%2Fdoc%2Ffragments.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ffragments.texi?ref=0630b8ec3d991a3a7bbd1e041a167a1424c1d388", "patch": "@@ -156,15 +156,16 @@ variants.  And for some targets it is better to reuse an existing multilib\n than to fall back to default multilib when there is no corresponding multilib.\n This can be done by adding reuse rules to @code{MULTILIB_REUSE}.\n \n-A reuse rule is comprised of two parts connected by equality sign.  The left part\n-is option set used to build multilib and the right part is option set that will\n-reuse this multilib.  The order of options in the left part matters and should be\n-same with those specified in @code{MULTILIB_REQUIRED} or aligned with order in\n-@code{MULTILIB_OPTIONS}.  There is no such limitation for options in right part\n-as we don't build multilib from them.  But the equality sign in both parts should\n-be replaced with period.\n-\n-The @code{MULTILIB_REUSE} is different from @code{MULTILIB_MATCHES} in that it\n+A reuse rule is comprised of two parts connected by equality sign.  The left\n+part is the option set used to build multilib and the right part is the option\n+set that will reuse this multilib.  Both parts should only use options\n+specified in @code{MULTILIB_OPTIONS} and the equality signs found in options\n+name should be replaced with periods.  The order of options in the left part\n+matters and should be same with those specified in @code{MULTILIB_REQUIRED} or\n+aligned with the order in @code{MULTILIB_OPTIONS}.  There is no such limitation\n+for options in the right part as we don't build multilib from them.\n+\n+@code{MULTILIB_REUSE} is different from @code{MULTILIB_MATCHES} in that it\n sets up relations between two option sets rather than two options.  Here is an\n example to demo how we reuse libraries built in Thumb mode for applications built\n in ARM mode:"}, {"sha": "eb5f661a5fded65a44a725884f77bf2e46f3ab1a", "filename": "gcc/genmultilib", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0630b8ec3d991a3a7bbd1e041a167a1424c1d388/gcc%2Fgenmultilib", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0630b8ec3d991a3a7bbd1e041a167a1424c1d388/gcc%2Fgenmultilib", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmultilib?ref=0630b8ec3d991a3a7bbd1e041a167a1424c1d388", "patch": "@@ -186,7 +186,8 @@ fi\n EOF\n chmod +x tmpmultilib\n \n-combinations=`initial=/ ./tmpmultilib ${options}`\n+combination_space=`initial=/ ./tmpmultilib ${options}`\n+combinations=\"$combination_space\"\n \n # If there exceptions, weed them out now\n if [ -n \"${exceptions}\" ]; then\n@@ -472,14 +473,19 @@ for rrule in ${multilib_reuse}; do\n   # in this variable, it means no multilib will be built for current reuse\n   # rule.  Thus the reuse purpose specified by current rule is meaningless.\n   if expr \"${combinations} \" : \".*/${combo}/.*\" > /dev/null; then\n-    combo=\"/${combo}/\"\n-    dirout=`./tmpmultilib3 \"${combo}\" \"${todirnames}\" \"${toosdirnames}\" \"${enable_multilib}\"`\n-    copts=\"/${copts}/\"\n-    optout=`./tmpmultilib4 \"${copts}\" \"${options}\"`\n-    # Output the line with all appropriate matches.\n-    dirout=\"${dirout}\" optout=\"${optout}\" ./tmpmultilib2\n+    if expr \"${combination_space} \" : \".*/${copts}/.*\" > /dev/null; then\n+      combo=\"/${combo}/\"\n+      dirout=`./tmpmultilib3 \"${combo}\" \"${todirnames}\" \"${toosdirnames}\" \"${enable_multilib}\"`\n+      copts=\"/${copts}/\"\n+      optout=`./tmpmultilib4 \"${copts}\" \"${options}\"`\n+      # Output the line with all appropriate matches.\n+      dirout=\"${dirout}\" optout=\"${optout}\" ./tmpmultilib2\n+    else\n+      echo \"The rule ${rrule} contains an option absent from MULTILIB_OPTIONS.\" >&2\n+      exit 1\n+    fi\n   else\n-    echo \"The rule ${rrule} is trying to reuse nonexistent multilib.\"\n+    echo \"The rule ${rrule} is trying to reuse nonexistent multilib.\" >&2\n     exit 1\n   fi\n done"}]}