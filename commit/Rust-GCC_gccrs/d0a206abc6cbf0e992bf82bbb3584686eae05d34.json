{"sha": "d0a206abc6cbf0e992bf82bbb3584686eae05d34", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDBhMjA2YWJjNmNiZjBlOTkyYmY4MmJiYjM1ODQ2ODZlYWUwNWQzNA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-11-16T08:28:03Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-11-16T10:14:44Z"}, "message": "tree-optimization/97838 - fix SLP leaf detection\n\nThis properly handles reduction PHI nodes with unrepresented\ninitial value as leaf in the SLP graph.\n\n2020-11-16  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/97838\n\t* tree-vect-slp.c (vect_slp_build_vertices): Properly handle\n\tnot backwards reachable cycles.\n\t(vect_optimize_slp): Check a node is leaf before marking it\n\tvisited.\n\n\t* gcc.dg/vect/pr97838.c: New testcase.", "tree": {"sha": "de0135c3962f0de52c88f749031274a5e4fae456", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de0135c3962f0de52c88f749031274a5e4fae456"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d0a206abc6cbf0e992bf82bbb3584686eae05d34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0a206abc6cbf0e992bf82bbb3584686eae05d34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0a206abc6cbf0e992bf82bbb3584686eae05d34", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0a206abc6cbf0e992bf82bbb3584686eae05d34/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e303cdee1ff01e4b302ef2f913c0bdd84ab967e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e303cdee1ff01e4b302ef2f913c0bdd84ab967e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e303cdee1ff01e4b302ef2f913c0bdd84ab967e"}], "stats": {"total": 33, "additions": 28, "deletions": 5}, "files": [{"sha": "06ec0358f6e7673745b5b4b37e60c53e2e6f6bae", "filename": "gcc/testsuite/gcc.dg/vect/pr97838.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0a206abc6cbf0e992bf82bbb3584686eae05d34/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr97838.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0a206abc6cbf0e992bf82bbb3584686eae05d34/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr97838.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr97838.c?ref=d0a206abc6cbf0e992bf82bbb3584686eae05d34", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+\n+int a, b, c, d;\n+\n+void f() {\n+  while (c++) {\n+    int e = -1;\n+    d = a ? e / a : e;\n+    b ^= ~d;\n+  }\n+}"}, {"sha": "b98d5db9f76d34755eeb532b84ff6fc495813b03", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0a206abc6cbf0e992bf82bbb3584686eae05d34/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0a206abc6cbf0e992bf82bbb3584686eae05d34/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=d0a206abc6cbf0e992bf82bbb3584686eae05d34", "patch": "@@ -2629,8 +2629,18 @@ vect_slp_build_vertices (vec_info *info, vec<slp_tree> &vertices,\n   unsigned i;\n   slp_instance instance;\n   FOR_EACH_VEC_ELT (info->slp_instances, i, instance)\n-    vect_slp_build_vertices (visited, SLP_INSTANCE_TREE (instance), vertices,\n-\t\t\t     leafs);\n+    {\n+      unsigned n_v = vertices.length ();\n+      unsigned n_l = leafs.length ();\n+      vect_slp_build_vertices (visited, SLP_INSTANCE_TREE (instance), vertices,\n+\t\t\t       leafs);\n+      /* If we added vertices but no entries to the reverse graph we've\n+\t added a cycle that is not backwards-reachable.   Push the entry\n+\t to mimic as leaf then.  */\n+      if (vertices.length () > n_v\n+\t  && leafs.length () == n_l)\n+\tleafs.safe_push (SLP_INSTANCE_TREE (instance)->vertex);\n+    }\n }\n \n /* Apply (reverse) bijectite PERM to VEC.  */\n@@ -2724,9 +2734,11 @@ vect_optimize_slp (vec_info *vinfo)\n \t  || SLP_TREE_DEF_TYPE (node) == vect_constant_def)\n \tcontinue;\n \n-      /* Loads are the only thing generating permutes and leafs do not\n-\t change across iterations.  */\n-      bitmap_set_bit (n_visited, idx);\n+      /* Leafs do not change across iterations.  Note leafs also double\n+\t as entries to the reverse graph.  */\n+      if (!slpg->vertices[idx].succ)\n+\tbitmap_set_bit (n_visited, idx);\n+      /* Loads are the only thing generating permutes.  */\n       if (!SLP_TREE_LOAD_PERMUTATION (node).exists ())\n \tcontinue;\n "}]}