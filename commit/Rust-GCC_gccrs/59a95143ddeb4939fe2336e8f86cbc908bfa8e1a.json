{"sha": "59a95143ddeb4939fe2336e8f86cbc908bfa8e1a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTlhOTUxNDNkZGViNDkzOWZlMjMzNmU4Zjg2Y2JjOTA4YmZhOGUxYQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-09-21T19:17:01Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-10-09T12:08:41Z"}, "message": "x86: Add <x86gprintrin.h>\n\nFor sources which can't use any vector instructions, <x86intrin.h> and\n<immintrin.h> cannot be included for compiler intrinsics:\n\n$ echo \"#include <x86intrin.h>\" | gcc -S -O2 -mno-sse -mno-mmx -x c -\nIn file included from /usr/include/stdlib.h:1013,\n                 from /usr/lib/gcc/x86_64-redhat-linux/10/include/mm_malloc.h:27,\n                 from /usr/lib/gcc/x86_64-redhat-linux/10/include/xmmintrin.h:34,\n                 from /usr/lib/gcc/x86_64-redhat-linux/10/include/immintrin.h:29,\n                 from /usr/lib/gcc/x86_64-redhat-linux/10/include/x86intrin.h:32,\n                 from <stdin>:1:\n/usr/include/bits/stdlib-float.h: In function \u2018atof\u2019:\n/usr/include/bits/stdlib-float.h:26:1: error: SSE register return with SSE disabled\n   26 | {\n      | ^\n$\n\nlibgcc/config/i386/shadow-stack-unwind.h has a workaround:\n\n/* NB: We need _get_ssp and _inc_ssp from <cetintrin.h>.  But we can't\n   include <x86intrin.h> which ends up including <mm_malloc.h>, which\n   includes <stdlib.h> and <errno.h> unconditionally.  But we can't\n   include any libc system headers unconditionally from libgcc.  Avoid\n   including <mm_malloc.h> here by defining _IMMINTRIN_H_INCLUDED.  */\n #define _IMMINTRIN_H_INCLUDED\n #include <cetintrin.h>\n #undef _IMMINTRIN_H_INCLUDED\n\nAdd a standalone intrinsic header file, <x86gprintrin.h>, to provide\ninteger only intrinsics.  All integer only intrinsics are placed in\n<x86gprintrin.h>.  <x86intrin.h> and <immintrin.h> simply include\n<x86gprintrin.h>.\n\ngcc/\n\n\tPR target/97148\n\t* config.gcc (extra_headers): Add x86gprintrin.h.\n\t* config/i386/adxintrin.h: Check _X86GPRINTRIN_H_INCLUDED for\n\t<x86gprintrin.h>.\n\t* config/i386/bmi2intrin.h: Likewise.\n\t* config/i386/bmiintrin.h: Likewise.\n\t* config/i386/cetintrin.h: Likewise.\n\t* config/i386/cldemoteintrin.h: Likewise.\n\t* config/i386/clflushoptintrin.h: Likewise.\n\t* config/i386/clwbintrin.h: Likewise.\n\t* config/i386/enqcmdintrin.h: Likewise.\n\t* config/i386/fxsrintrin.h: Likewise.\n\t* config/i386/ia32intrin.h: Likewise.\n\t* config/i386/lwpintrin.h: Likewise.\n\t* config/i386/lzcntintrin.h: Likewise.\n\t* config/i386/movdirintrin.h: Likewise.\n\t* config/i386/pconfigintrin.h: Likewise.\n\t* config/i386/pkuintrin.h: Likewise.\n\t* config/i386/rdseedintrin.h: Likewise.\n\t* config/i386/rtmintrin.h: Likewise.\n\t* config/i386/serializeintrin.h: Likewise.\n\t* config/i386/tbmintrin.h: Likewise.\n\t* config/i386/tsxldtrkintrin.h: Likewise.\n\t* config/i386/waitpkgintrin.h: Likewise.\n\t* config/i386/wbnoinvdintrin.h: Likewise.\n\t* config/i386/xsavecintrin.h: Likewise.\n\t* config/i386/xsaveintrin.h: Likewise.\n\t* config/i386/xsaveoptintrin.h: Likewise.\n\t* config/i386/xsavesintrin.h: Likewise.\n\t* config/i386/xtestintrin.h: Likewise.\n\t* config/i386/immintrin.h: Include <x86gprintrin.h> instead of\n\t<fxsrintrin.h>, <xsaveintrin.h>, <xsaveoptintrin.h>,\n\t<xsavesintrin.h>, <xsavecintrin.h>, <lzcntintrin.h>,\n\t<bmiintrin.h>, <bmi2intrin.h>, <xtestintrin.h>, <cetintrin.h>,\n\t<movdirintrin.h>, <sgxintrin.h, <pconfigintrin.h>,\n\t<waitpkgintrin.h>, <cldemoteintrin.h>, <enqcmdintrin.h>,\n\t<serializeintrin.h>, <tsxldtrkintrin.h>, <adxintrin.h>,\n\t<clwbintrin.h>, <clflushoptintrin.h>, <wbnoinvdintrin.h> and\n\t<pkuintrin.h>.\n\t(_wbinvd): Moved to config/i386/x86gprintrin.h.\n\t(_rdrand16_step): Likewise.\n\t(_rdrand32_step): Likewise.\n\t(_rdpid_u32): Likewise.\n\t(_readfsbase_u32): Likewise.\n\t(_readfsbase_u64): Likewise.\n\t(_readgsbase_u32): Likewise.\n\t(_readgsbase_u64): Likewise.\n\t(_writefsbase_u32): Likewise.\n\t(_writefsbase_u64): Likewise.\n\t(_writegsbase_u32): Likewise.\n\t(_writegsbase_u64): Likewise.\n\t(_rdrand64_step): Likewise.\n\t(_ptwrite64): Likewise.\n\t(_ptwrite32): Likewise.\n\t* config/i386/x86gprintrin.h: New file.\n\t* config/i386/x86intrin.h: Include <x86gprintrin.h>.  Don't\n\tinclude <ia32intrin.h>, <lwpintrin.h>, <tbmintrin.h>,\n\t<popcntintrin.h>, <mwaitxintrin.h> and <clzerointrin.h>.\n\ngcc/testsuite/\n\n\t* gcc.target/i386/avx-1.c (__builtin_ia32_lwpval32): New to\n\tsupport <lwpintrin.h> included in <x86gprintrin.h>.\n\t(__builtin_ia32_lwpval64): Likewise.\n\t(__builtin_ia32_lwpins32): Likewise.\n\t(__builtin_ia32_lwpins64): Likewise.\n\t(__builtin_ia32_bextri_u32): New to support <tbmintrin.h>\n\tincluded in <x86gprintrin.h>.\n\t(__builtin_ia32_bextri_u64): Likewise.\n\t* gcc.target/i386/x86gprintrin-1.c: New test.\n\t* gcc.target/i386/x86gprintrin-2.c: Likewise.\n\t* gcc.target/i386/x86gprintrin-3.c: Likewise.\n\t* gcc.target/i386/x86gprintrin-4.c: Likewise.\n\t* gcc.target/i386/x86gprintrin-4a.c: Likewise.\n\t* gcc.target/i386/x86gprintrin-5.c: Likewise.\n\t* gcc.target/i386/x86gprintrin-5a.c: Likewise.\n\t* gcc.target/i386/x86gprintrin-5b.c: Likewise.\n\t* gcc.target/i386/x86gprintrin-6.c: Likewise.\n\nlibgcc/\n\n\tPR target/97148\n\t* config/i386/shadow-stack-unwind.h: Include <x86gprintrin.h>\n\tinstead of <cetintrin.h>.", "tree": {"sha": "5b7ff85dd59d559965663bb734e1abedaef05583", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b7ff85dd59d559965663bb734e1abedaef05583"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "383400a6078d75bbfa1216c9af2c37f7e88740c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/383400a6078d75bbfa1216c9af2c37f7e88740c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/383400a6078d75bbfa1216c9af2c37f7e88740c9"}], "stats": {"total": 744, "additions": 464, "deletions": 280}, "files": [{"sha": "d5634b043e20aded12a5625217d49cc1016fc1e0", "filename": "gcc/config.gcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=59a95143ddeb4939fe2336e8f86cbc908bfa8e1a", "patch": "@@ -413,7 +413,7 @@ i[34567]86-*-*)\n \t\t       avx512bf16intrin.h enqcmdintrin.h serializeintrin.h\n \t\t       avx512vp2intersectintrin.h avx512vp2intersectvlintrin.h\n \t\t       tsxldtrkintrin.h amxtileintrin.h amxint8intrin.h\n-\t\t       amxbf16intrin.h\"\n+\t\t       amxbf16intrin.h x86gprintrin.h\"\n \t;;\n x86_64-*-*)\n \tcpu_type=i386\n@@ -449,7 +449,7 @@ x86_64-*-*)\n \t\t       avx512bf16intrin.h enqcmdintrin.h serializeintrin.h\n \t\t       avx512vp2intersectintrin.h avx512vp2intersectvlintrin.h\n \t\t       tsxldtrkintrin.h amxtileintrin.h amxint8intrin.h\n-\t\t       amxbf16intrin.h\"\n+\t\t       amxbf16intrin.h x86gprintrin.h\"\n \t;;\n ia64-*-*)\n \textra_headers=ia64intrin.h"}, {"sha": "6dffe45ff9fe5f06a704616f48f3638fdc45d760", "filename": "gcc/config/i386/adxintrin.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/gcc%2Fconfig%2Fi386%2Fadxintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/gcc%2Fconfig%2Fi386%2Fadxintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fadxintrin.h?ref=59a95143ddeb4939fe2336e8f86cbc908bfa8e1a", "patch": "@@ -21,8 +21,8 @@\n    see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    <http://www.gnu.org/licenses/>.  */\n \n-#if !defined _IMMINTRIN_H_INCLUDED\n-# error \"Never use <adxintrin.h> directly; include <immintrin.h> instead.\"\n+#ifndef _X86GPRINTRIN_H_INCLUDED\n+# error \"Never use <adxintrin.h> directly; include <x86gprintrin.h> instead.\"\n #endif\n \n #ifndef _ADXINTRIN_H_INCLUDED"}, {"sha": "9fdd08cc5a1577e52a403da52ac5f562dc5fcc92", "filename": "gcc/config/i386/bmi2intrin.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/gcc%2Fconfig%2Fi386%2Fbmi2intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/gcc%2Fconfig%2Fi386%2Fbmi2intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fbmi2intrin.h?ref=59a95143ddeb4939fe2336e8f86cbc908bfa8e1a", "patch": "@@ -21,8 +21,8 @@\n    see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    <http://www.gnu.org/licenses/>.  */\n \n-#if !defined _X86INTRIN_H_INCLUDED && !defined _IMMINTRIN_H_INCLUDED\n-# error \"Never use <bmi2intrin.h> directly; include <x86intrin.h> instead.\"\n+#ifndef _X86GPRINTRIN_H_INCLUDED\n+# error \"Never use <bmi2intrin.h> directly; include <x86gprintrin.h> instead.\"\n #endif\n \n #ifndef _BMI2INTRIN_H_INCLUDED"}, {"sha": "5bd712abbb22842b382c151fa1c829f9f9dbdc66", "filename": "gcc/config/i386/bmiintrin.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/gcc%2Fconfig%2Fi386%2Fbmiintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/gcc%2Fconfig%2Fi386%2Fbmiintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fbmiintrin.h?ref=59a95143ddeb4939fe2336e8f86cbc908bfa8e1a", "patch": "@@ -21,8 +21,8 @@\n    see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    <http://www.gnu.org/licenses/>.  */\n \n-#if !defined _X86INTRIN_H_INCLUDED && !defined _IMMINTRIN_H_INCLUDED\n-# error \"Never use <bmiintrin.h> directly; include <x86intrin.h> instead.\"\n+#ifndef _X86GPRINTRIN_H_INCLUDED\n+# error \"Never use <bmiintrin.h> directly; include <x86gprintrin.h> instead.\"\n #endif\n \n #ifndef _BMIINTRIN_H_INCLUDED"}, {"sha": "81c4d724b43c27b74d10b488e3c9d4e5f1293f4e", "filename": "gcc/config/i386/cetintrin.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/gcc%2Fconfig%2Fi386%2Fcetintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/gcc%2Fconfig%2Fi386%2Fcetintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcetintrin.h?ref=59a95143ddeb4939fe2336e8f86cbc908bfa8e1a", "patch": "@@ -21,8 +21,8 @@\n    see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    <http://www.gnu.org/licenses/>.  */\n \n-#if !defined _IMMINTRIN_H_INCLUDED\n-# error \"Never use <cetintrin.h> directly; include <x86intrin.h> instead.\"\n+#ifndef _X86GPRINTRIN_H_INCLUDED\n+# error \"Never use <cetintrin.h> directly; include <x86gprintrin.h> instead.\"\n #endif\n \n #ifndef _CETINTRIN_H_INCLUDED"}, {"sha": "0c31c359a96ff18c9461cab377c66c82623af338", "filename": "gcc/config/i386/cldemoteintrin.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/gcc%2Fconfig%2Fi386%2Fcldemoteintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/gcc%2Fconfig%2Fi386%2Fcldemoteintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcldemoteintrin.h?ref=59a95143ddeb4939fe2336e8f86cbc908bfa8e1a", "patch": "@@ -21,8 +21,8 @@\n    see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    <http://www.gnu.org/licenses/>.  */\n \n-#if !defined _IMMINTRIN_H_INCLUDED\n-# error \"Never use <cldemoteintrin.h> directly; include <immintrin.h> instead.\"\n+#ifndef _X86GPRINTRIN_H_INCLUDED\n+# error \"Never use <cldemoteintrin.h> directly; include <x86gprintrin.h> instead.\"\n #endif\n \n #ifndef _CLDEMOTE_H_INCLUDED"}, {"sha": "a3697f0675510954852d3a7853a3a7563317a879", "filename": "gcc/config/i386/clflushoptintrin.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/gcc%2Fconfig%2Fi386%2Fclflushoptintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/gcc%2Fconfig%2Fi386%2Fclflushoptintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fclflushoptintrin.h?ref=59a95143ddeb4939fe2336e8f86cbc908bfa8e1a", "patch": "@@ -21,8 +21,8 @@\n    see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    <http://www.gnu.org/licenses/>.  */\n \n-#if !defined _IMMINTRIN_H_INCLUDED\n-# error \"Never use <clflushoptintrin.h> directly; include <immintrin.h> instead.\"\n+#ifndef _X86GPRINTRIN_H_INCLUDED\n+# error \"Never use <clflushoptintrin.h> directly; include <x86gprintrin.h> instead.\"\n #endif\n \n #ifndef _CLFLUSHOPTINTRIN_H_INCLUDED"}, {"sha": "3f8396219464c375c5ebc4b451097714ed803228", "filename": "gcc/config/i386/clwbintrin.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/gcc%2Fconfig%2Fi386%2Fclwbintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/gcc%2Fconfig%2Fi386%2Fclwbintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fclwbintrin.h?ref=59a95143ddeb4939fe2336e8f86cbc908bfa8e1a", "patch": "@@ -21,8 +21,8 @@\n    see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    <http://www.gnu.org/licenses/>.  */\n \n-#if !defined _IMMINTRIN_H_INCLUDED\n-# error \"Never use <clwbintrin.h> directly; include <immintrin.h> instead.\"\n+#ifndef _X86GPRINTRIN_H_INCLUDED\n+# error \"Never use <clwbintrin.h> directly; include <x86gprintrin.h> instead.\"\n #endif\n \n #ifndef _CLWBINTRIN_H_INCLUDED"}, {"sha": "dcb6507e145fd9481a873c158e62107aa6226fa6", "filename": "gcc/config/i386/enqcmdintrin.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/gcc%2Fconfig%2Fi386%2Fenqcmdintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/gcc%2Fconfig%2Fi386%2Fenqcmdintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fenqcmdintrin.h?ref=59a95143ddeb4939fe2336e8f86cbc908bfa8e1a", "patch": "@@ -21,8 +21,8 @@\n    see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    <http://www.gnu.org/licenses/>.  */\n \n-#if !defined _IMMINTRIN_H_INCLUDED\n-# error \"Never use <enqcmdintrin.h> directly; include <x86intrin.h> instead.\"\n+#ifndef _X86GPRINTRIN_H_INCLUDED\n+# error \"Never use <enqcmdintrin.h> directly; include <x86gprintrin.h> instead.\"\n #endif\n \n #ifndef _ENQCMDINTRIN_H_INCLUDED"}, {"sha": "6e059df96d6cbd138b435f3ddad949d1517c844d", "filename": "gcc/config/i386/fxsrintrin.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/gcc%2Fconfig%2Fi386%2Ffxsrintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/gcc%2Fconfig%2Fi386%2Ffxsrintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ffxsrintrin.h?ref=59a95143ddeb4939fe2336e8f86cbc908bfa8e1a", "patch": "@@ -21,8 +21,8 @@\n    see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    <http://www.gnu.org/licenses/>.  */\n \n-#if !defined _IMMINTRIN_H_INCLUDED\n-# error \"Never use <fxsrintrin.h> directly; include <immintrin.h> instead.\"\n+#ifndef _X86GPRINTRIN_H_INCLUDED\n+# error \"Never use <fxsrintrin.h> directly; include <x86gprintrin.h> instead.\"\n #endif\n \n #ifndef _FXSRINTRIN_H_INCLUDED"}, {"sha": "3568d1f4c7fbd57a3d7d4439a8775c80468dd4a6", "filename": "gcc/config/i386/ia32intrin.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/gcc%2Fconfig%2Fi386%2Fia32intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/gcc%2Fconfig%2Fi386%2Fia32intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fia32intrin.h?ref=59a95143ddeb4939fe2336e8f86cbc908bfa8e1a", "patch": "@@ -21,8 +21,8 @@\n    see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    <http://www.gnu.org/licenses/>.  */\n \n-#ifndef _X86INTRIN_H_INCLUDED\n-# error \"Never use <ia32intrin.h> directly; include <x86intrin.h> instead.\"\n+#ifndef _X86GPRINTRIN_H_INCLUDED\n+# error \"Never use <ia32intrin.h> directly; include <x86gprintrin.h> instead.\"\n #endif\n \n /* 32bit bsf */"}, {"sha": "71eae8368af417c1c0492bbf005b180b7f78f5f7", "filename": "gcc/config/i386/immintrin.h", "status": "modified", "additions": 2, "deletions": 205, "changes": 207, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/gcc%2Fconfig%2Fi386%2Fimmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/gcc%2Fconfig%2Fi386%2Fimmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fimmintrin.h?ref=59a95143ddeb4939fe2336e8f86cbc908bfa8e1a", "patch": "@@ -24,6 +24,8 @@\n #ifndef _IMMINTRIN_H_INCLUDED\n #define _IMMINTRIN_H_INCLUDED\n \n+#include <x86gprintrin.h>\n+\n #include <mmintrin.h>\n \n #include <xmmintrin.h>\n@@ -38,16 +40,6 @@\n \n #include <wmmintrin.h>\n \n-#include <fxsrintrin.h>\n-\n-#include <xsaveintrin.h>\n-\n-#include <xsaveoptintrin.h>\n-\n-#include <xsavesintrin.h>\n-\n-#include <xsavecintrin.h>\n-\n #include <avxintrin.h>\n \n #include <avx2intrin.h>\n@@ -102,223 +94,28 @@\n \n #include <shaintrin.h>\n \n-#include <lzcntintrin.h>\n-\n-#include <bmiintrin.h>\n-\n-#include <bmi2intrin.h>\n-\n #include <fmaintrin.h>\n \n #include <f16cintrin.h>\n \n #include <rtmintrin.h>\n \n-#include <xtestintrin.h>\n-\n-#include <cetintrin.h>\n-\n #include <gfniintrin.h>\n \n #include <vaesintrin.h>\n \n #include <vpclmulqdqintrin.h>\n \n-#include <movdirintrin.h>\n-\n-#include <sgxintrin.h>\n-\n-#include <pconfigintrin.h>\n-\n-#include <waitpkgintrin.h>\n-\n-#include <cldemoteintrin.h>\n-\n #include <avx512bf16vlintrin.h>\n \n #include <avx512bf16intrin.h>\n \n-#include <enqcmdintrin.h>\n-\n-#include <serializeintrin.h>\n-\n-#include <tsxldtrkintrin.h>\n-\n #include <amxtileintrin.h>\n \n #include <amxint8intrin.h>\n \n #include <amxbf16intrin.h>\n \n-#include <rdseedintrin.h>\n-\n #include <prfchwintrin.h>\n \n-#include <adxintrin.h>\n-\n-#include <clwbintrin.h>\n-\n-#include <clflushoptintrin.h>\n-\n-#include <wbnoinvdintrin.h>\n-\n-#include <pkuintrin.h>\n-\n-extern __inline void\n-__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_wbinvd (void)\n-{\n-  __builtin_ia32_wbinvd ();\n-}\n-\n-#ifndef __RDRND__\n-#pragma GCC push_options\n-#pragma GCC target(\"rdrnd\")\n-#define __DISABLE_RDRND__\n-#endif /* __RDRND__ */\n-extern __inline int\n-__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_rdrand16_step (unsigned short *__P)\n-{\n-  return __builtin_ia32_rdrand16_step (__P);\n-}\n-\n-extern __inline int\n-__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_rdrand32_step (unsigned int *__P)\n-{\n-  return __builtin_ia32_rdrand32_step (__P);\n-}\n-#ifdef __DISABLE_RDRND__\n-#undef __DISABLE_RDRND__\n-#pragma GCC pop_options\n-#endif /* __DISABLE_RDRND__ */\n-\n-#ifndef __RDPID__\n-#pragma GCC push_options\n-#pragma GCC target(\"rdpid\")\n-#define __DISABLE_RDPID__\n-#endif /* __RDPID__ */\n-extern __inline unsigned int\n-__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_rdpid_u32 (void)\n-{\n-  return __builtin_ia32_rdpid ();\n-}\n-#ifdef __DISABLE_RDPID__\n-#undef __DISABLE_RDPID__\n-#pragma GCC pop_options\n-#endif /* __DISABLE_RDPID__ */\n-\n-#ifdef  __x86_64__\n-\n-#ifndef __FSGSBASE__\n-#pragma GCC push_options\n-#pragma GCC target(\"fsgsbase\")\n-#define __DISABLE_FSGSBASE__\n-#endif /* __FSGSBASE__ */\n-extern __inline unsigned int\n-__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_readfsbase_u32 (void)\n-{\n-  return __builtin_ia32_rdfsbase32 ();\n-}\n-\n-extern __inline unsigned long long\n-__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_readfsbase_u64 (void)\n-{\n-  return __builtin_ia32_rdfsbase64 ();\n-}\n-\n-extern __inline unsigned int\n-__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_readgsbase_u32 (void)\n-{\n-  return __builtin_ia32_rdgsbase32 ();\n-}\n-\n-extern __inline unsigned long long\n-__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_readgsbase_u64 (void)\n-{\n-  return __builtin_ia32_rdgsbase64 ();\n-}\n-\n-extern __inline void\n-__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_writefsbase_u32 (unsigned int __B)\n-{\n-  __builtin_ia32_wrfsbase32 (__B);\n-}\n-\n-extern __inline void\n-__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_writefsbase_u64 (unsigned long long __B)\n-{\n-  __builtin_ia32_wrfsbase64 (__B);\n-}\n-\n-extern __inline void\n-__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_writegsbase_u32 (unsigned int __B)\n-{\n-  __builtin_ia32_wrgsbase32 (__B);\n-}\n-\n-extern __inline void\n-__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_writegsbase_u64 (unsigned long long __B)\n-{\n-  __builtin_ia32_wrgsbase64 (__B);\n-}\n-#ifdef __DISABLE_FSGSBASE__\n-#undef __DISABLE_FSGSBASE__\n-#pragma GCC pop_options\n-#endif /* __DISABLE_FSGSBASE__ */\n-\n-#ifndef __RDRND__\n-#pragma GCC push_options\n-#pragma GCC target(\"rdrnd\")\n-#define __DISABLE_RDRND__\n-#endif /* __RDRND__ */\n-extern __inline int\n-__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_rdrand64_step (unsigned long long *__P)\n-{\n-  return __builtin_ia32_rdrand64_step (__P);\n-}\n-#ifdef __DISABLE_RDRND__\n-#undef __DISABLE_RDRND__\n-#pragma GCC pop_options\n-#endif /* __DISABLE_RDRND__ */\n-\n-#endif /* __x86_64__  */\n-\n-#ifndef __PTWRITE__\n-#pragma GCC push_options\n-#pragma GCC target(\"ptwrite\")\n-#define __DISABLE_PTWRITE__\n-#endif\n-\n-#ifdef __x86_64__\n-extern __inline void\n-__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_ptwrite64 (unsigned long long __B)\n-{\n-  __builtin_ia32_ptwrite64 (__B);\n-}\n-#endif /* __x86_64__ */\n-\n-extern __inline void\n-__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_ptwrite32 (unsigned __B)\n-{\n-  __builtin_ia32_ptwrite32 (__B);\n-}\n-#ifdef __DISABLE_PTWRITE__\n-#undef __DISABLE_PTWRITE__\n-#pragma GCC pop_options\n-#endif /* __DISABLE_PTWRITE__ */\n-\n #endif /* _IMMINTRIN_H_INCLUDED */"}, {"sha": "0b5c8bbf42f36828292f0010d4e73d600cbc2d84", "filename": "gcc/config/i386/lwpintrin.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/gcc%2Fconfig%2Fi386%2Flwpintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/gcc%2Fconfig%2Fi386%2Flwpintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Flwpintrin.h?ref=59a95143ddeb4939fe2336e8f86cbc908bfa8e1a", "patch": "@@ -21,8 +21,8 @@\n    see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    <http://www.gnu.org/licenses/>.  */\n \n-#ifndef _X86INTRIN_H_INCLUDED\n-# error \"Never use <lwpintrin.h> directly; include <x86intrin.h> instead.\"\n+#ifndef _X86GPRINTRIN_H_INCLUDED\n+# error \"Never use <lwpintrin.h> directly; include <x86gprintrin.h> instead.\"\n #endif\n \n #ifndef _LWPINTRIN_H_INCLUDED"}, {"sha": "6d00e9f137dbfa3067b737d9637be89d24a8dd98", "filename": "gcc/config/i386/lzcntintrin.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/gcc%2Fconfig%2Fi386%2Flzcntintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/gcc%2Fconfig%2Fi386%2Flzcntintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Flzcntintrin.h?ref=59a95143ddeb4939fe2336e8f86cbc908bfa8e1a", "patch": "@@ -21,8 +21,8 @@\n    see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    <http://www.gnu.org/licenses/>.  */\n \n-#if !defined _X86INTRIN_H_INCLUDED && !defined _IMMINTRIN_H_INCLUDED\n-# error \"Never use <lzcntintrin.h> directly; include <x86intrin.h> instead.\"\n+#ifndef _X86GPRINTRIN_H_INCLUDED\n+# error \"Never use <lzcntintrin.h> directly; include <x86gprintrin.h> instead.\"\n #endif\n \n "}, {"sha": "b2f8406a43c472df1b27618bacb9f3a4b78ecf65", "filename": "gcc/config/i386/movdirintrin.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/gcc%2Fconfig%2Fi386%2Fmovdirintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/gcc%2Fconfig%2Fi386%2Fmovdirintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmovdirintrin.h?ref=59a95143ddeb4939fe2336e8f86cbc908bfa8e1a", "patch": "@@ -21,8 +21,8 @@\n    see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    <http://www.gnu.org/licenses/>.  */\n \n-#if !defined _IMMINTRIN_H_INCLUDED\n-# error \"Never use <movdirintrin.h> directly; include <x86intrin.h> instead.\"\n+#ifndef _X86GPRINTRIN_H_INCLUDED\n+# error \"Never use <movdirintrin.h> directly; include <x86gprintrin.h> instead.\"\n #endif\n \n #ifndef _MOVDIRINTRIN_H_INCLUDED"}, {"sha": "31c493a912b9d5823c3d66e0f6682a5993dd5ae9", "filename": "gcc/config/i386/pconfigintrin.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/gcc%2Fconfig%2Fi386%2Fpconfigintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/gcc%2Fconfig%2Fi386%2Fpconfigintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpconfigintrin.h?ref=59a95143ddeb4939fe2336e8f86cbc908bfa8e1a", "patch": "@@ -21,8 +21,8 @@\n    see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    <http://www.gnu.org/licenses/>.  */\n \n-#ifndef _IMMINTRIN_H_INCLUDED\n-#error \"Never use <pconfigintrin.h> directly; include <immintrin.h> instead.\"\n+#ifndef _X86GPRINTRIN_H_INCLUDED\n+# error \"Never use <pconfigintrin.h> directly; include <x86gprintrin.h> instead.\"\n #endif\n \n #ifndef _PCONFIGINTRIN_H_INCLUDED"}, {"sha": "0d2dd5170a3ebf4fb7231413ff9a078450792fad", "filename": "gcc/config/i386/pkuintrin.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/gcc%2Fconfig%2Fi386%2Fpkuintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/gcc%2Fconfig%2Fi386%2Fpkuintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpkuintrin.h?ref=59a95143ddeb4939fe2336e8f86cbc908bfa8e1a", "patch": "@@ -21,8 +21,8 @@\n    see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    <http://www.gnu.org/licenses/>.  */\n \n-#if !defined _IMMINTRIN_H_INCLUDED\n-# error \"Never use <pkuintrin.h> directly; include <immintrin.h> instead.\"\n+#ifndef _X86GPRINTRIN_H_INCLUDED\n+# error \"Never use <pkuintrin.h> directly; include <x86gprintrin.h> instead.\"\n #endif\n \n #ifndef _PKUINTRIN_H_INCLUDED"}, {"sha": "168053aedd8ed060f8013dc273e9f32052ce1799", "filename": "gcc/config/i386/rdseedintrin.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/gcc%2Fconfig%2Fi386%2Frdseedintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/gcc%2Fconfig%2Fi386%2Frdseedintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Frdseedintrin.h?ref=59a95143ddeb4939fe2336e8f86cbc908bfa8e1a", "patch": "@@ -21,8 +21,8 @@\n    see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    <http://www.gnu.org/licenses/>.  */\n \n-#if !defined _IMMINTRIN_H_INCLUDED\n-# error \"Never use <rdseedintrin.h> directly; include <immintrin.h> instead.\"\n+#ifndef _X86GPRINTRIN_H_INCLUDED\n+# error \"Never use <rdseedintrin.h> directly; include <x86gprintrin.h> instead.\"\n #endif\n \n #ifndef _RDSEEDINTRIN_H_INCLUDED"}, {"sha": "436e5178c478b97cdf03be2ede2d6d30c8fd8f75", "filename": "gcc/config/i386/rtmintrin.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/gcc%2Fconfig%2Fi386%2Frtmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/gcc%2Fconfig%2Fi386%2Frtmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Frtmintrin.h?ref=59a95143ddeb4939fe2336e8f86cbc908bfa8e1a", "patch": "@@ -21,8 +21,8 @@\n    see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    <http://www.gnu.org/licenses/>.  */\n \n-#ifndef _IMMINTRIN_H_INCLUDED\n-# error \"Never use <rtmintrin.h> directly; include <immintrin.h> instead.\"\n+#ifndef _X86GPRINTRIN_H_INCLUDED\n+# error \"Never use <rtmintrin.h> directly; include <x86gprintrin.h> instead.\"\n #endif\n \n #ifndef _RTMINTRIN_H_INCLUDED"}, {"sha": "95f26d6f4ac1f66ad8bbe1d2baa68d7773b8f048", "filename": "gcc/config/i386/serializeintrin.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/gcc%2Fconfig%2Fi386%2Fserializeintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/gcc%2Fconfig%2Fi386%2Fserializeintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fserializeintrin.h?ref=59a95143ddeb4939fe2336e8f86cbc908bfa8e1a", "patch": "@@ -21,8 +21,8 @@\n    see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    <http://www.gnu.org/licenses/>.  */\n \n-#if !defined _IMMINTRIN_H_INCLUDED\n-# error \"Never use <serializeintrin.h> directly; include <immintrin.h> instead.\"\n+#ifndef _X86GPRINTRIN_H_INCLUDED\n+# error \"Never use <serializeintrin.h> directly; include <x86gprintrin.h> instead.\"\n #endif\n \n #ifndef _SERIALIZE_H_INCLUDED"}, {"sha": "e03bf910e13b37a4d24d2d0ab0b7ee890fc96030", "filename": "gcc/config/i386/tbmintrin.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/gcc%2Fconfig%2Fi386%2Ftbmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/gcc%2Fconfig%2Fi386%2Ftbmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ftbmintrin.h?ref=59a95143ddeb4939fe2336e8f86cbc908bfa8e1a", "patch": "@@ -21,8 +21,8 @@\n    see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    <http://www.gnu.org/licenses/>.  */\n \n-#ifndef _X86INTRIN_H_INCLUDED\n-# error \"Never use <tbmintrin.h> directly; include <x86intrin.h> instead.\"\n+#ifndef _X86GPRINTRIN_H_INCLUDED\n+# error \"Never use <tbmintrin.h> directly; include <x86gprintrin.h> instead.\"\n #endif\n \n #ifndef _TBMINTRIN_H_INCLUDED"}, {"sha": "eab36d03c90808ef12ea870749fcea8ab98037ab", "filename": "gcc/config/i386/tsxldtrkintrin.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/gcc%2Fconfig%2Fi386%2Ftsxldtrkintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/gcc%2Fconfig%2Fi386%2Ftsxldtrkintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ftsxldtrkintrin.h?ref=59a95143ddeb4939fe2336e8f86cbc908bfa8e1a", "patch": "@@ -21,8 +21,8 @@\n    see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    <http://www.gnu.org/licenses/>.  */\n \n-#if !defined _IMMINTRIN_H_INCLUDED\n-#error \"Never use <tsxldtrkintrin.h> directly; include <immintrin.h> instead.\"\n+#ifndef _X86GPRINTRIN_H_INCLUDED\n+# error \"Never use <tsxldtrkintrin.h> directly; include <x86gprintrin.h> instead.\"\n #endif\n \n #ifndef _TSXLDTRKINTRIN_H_INCLUDED"}, {"sha": "5046c986054e7219031b3e7a49c9ea88cb046b54", "filename": "gcc/config/i386/waitpkgintrin.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/gcc%2Fconfig%2Fi386%2Fwaitpkgintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/gcc%2Fconfig%2Fi386%2Fwaitpkgintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwaitpkgintrin.h?ref=59a95143ddeb4939fe2336e8f86cbc908bfa8e1a", "patch": "@@ -21,8 +21,8 @@\n    see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    <http://www.gnu.org/licenses/>.  */\n \n-#if !defined _IMMINTRIN_H_INCLUDED\n-# error \"Never use <waitpkgintrin.h> directly; include <immintrin.h> instead.\"\n+#ifndef _X86GPRINTRIN_H_INCLUDED\n+# error \"Never use <waitpkgintrin.h> directly; include <x86gprintrin.h> instead.\"\n #endif\n \n #ifndef _WAITPKG_H_INCLUDED"}, {"sha": "7089e619018a34cceadc94df7e1f1b935e6eda2a", "filename": "gcc/config/i386/wbnoinvdintrin.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/gcc%2Fconfig%2Fi386%2Fwbnoinvdintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/gcc%2Fconfig%2Fi386%2Fwbnoinvdintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwbnoinvdintrin.h?ref=59a95143ddeb4939fe2336e8f86cbc908bfa8e1a", "patch": "@@ -21,8 +21,8 @@\n    see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    <http://www.gnu.org/licenses/>.  */\n \n-#ifndef _IMMINTRIN_H_INCLUDED\n-#error \"Never use <wbnoinvdintrin.h> directly; include <immintrin.h> instead.\"\n+#ifndef _X86GPRINTRIN_H_INCLUDED\n+# error \"Never use <wbnoinvdintrin.h> directly; include <x86gprintrin.h> instead.\"\n #endif\n \n #ifndef _WBNOINVDINTRIN_H_INCLUDED"}, {"sha": "ecfb1c0e67f87ba443e3a2a34c0379478543acf8", "filename": "gcc/config/i386/x86gprintrin.h", "status": "added", "additions": 252, "deletions": 0, "changes": 252, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/gcc%2Fconfig%2Fi386%2Fx86gprintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/gcc%2Fconfig%2Fi386%2Fx86gprintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86gprintrin.h?ref=59a95143ddeb4939fe2336e8f86cbc908bfa8e1a", "patch": "@@ -0,0 +1,252 @@\n+/* Copyright (C) 2020 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef _X86GPRINTRIN_H_INCLUDED\n+#define _X86GPRINTRIN_H_INCLUDED\n+\n+#include <ia32intrin.h>\n+\n+#ifndef __iamcu__\n+\n+#include <stddef.h>\n+\n+#include <adxintrin.h>\n+\n+#include <bmiintrin.h>\n+\n+#include <bmi2intrin.h>\n+\n+#include <cetintrin.h>\n+\n+#include <cldemoteintrin.h>\n+\n+#include <clflushoptintrin.h>\n+\n+#include <clwbintrin.h>\n+\n+#include <clzerointrin.h>\n+\n+#include <enqcmdintrin.h>\n+\n+#include <fxsrintrin.h>\n+\n+#include <lzcntintrin.h>\n+\n+#include <lwpintrin.h>\n+\n+#include <movdirintrin.h>\n+\n+#include <mwaitxintrin.h>\n+\n+#include <pconfigintrin.h>\n+\n+#include <popcntintrin.h>\n+\n+#include <pkuintrin.h>\n+\n+#include <rdseedintrin.h>\n+\n+#include <rtmintrin.h>\n+\n+#include <serializeintrin.h>\n+\n+#include <sgxintrin.h>\n+\n+#include <tbmintrin.h>\n+\n+#include <tsxldtrkintrin.h>\n+\n+#include <waitpkgintrin.h>\n+\n+#include <wbnoinvdintrin.h>\n+\n+#include <xsaveintrin.h>\n+\n+#include <xsavecintrin.h>\n+\n+#include <xsaveoptintrin.h>\n+\n+#include <xsavesintrin.h>\n+\n+#include <xtestintrin.h>\n+\n+extern __inline void\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_wbinvd (void)\n+{\n+  __builtin_ia32_wbinvd ();\n+}\n+\n+#ifndef __RDRND__\n+#pragma GCC push_options\n+#pragma GCC target(\"rdrnd\")\n+#define __DISABLE_RDRND__\n+#endif /* __RDRND__ */\n+extern __inline int\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_rdrand16_step (unsigned short *__P)\n+{\n+  return __builtin_ia32_rdrand16_step (__P);\n+}\n+\n+extern __inline int\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_rdrand32_step (unsigned int *__P)\n+{\n+  return __builtin_ia32_rdrand32_step (__P);\n+}\n+#ifdef __DISABLE_RDRND__\n+#undef __DISABLE_RDRND__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_RDRND__ */\n+\n+#ifndef __RDPID__\n+#pragma GCC push_options\n+#pragma GCC target(\"rdpid\")\n+#define __DISABLE_RDPID__\n+#endif /* __RDPID__ */\n+extern __inline unsigned int\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_rdpid_u32 (void)\n+{\n+  return __builtin_ia32_rdpid ();\n+}\n+#ifdef __DISABLE_RDPID__\n+#undef __DISABLE_RDPID__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_RDPID__ */\n+\n+#ifdef  __x86_64__\n+\n+#ifndef __FSGSBASE__\n+#pragma GCC push_options\n+#pragma GCC target(\"fsgsbase\")\n+#define __DISABLE_FSGSBASE__\n+#endif /* __FSGSBASE__ */\n+extern __inline unsigned int\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_readfsbase_u32 (void)\n+{\n+  return __builtin_ia32_rdfsbase32 ();\n+}\n+\n+extern __inline unsigned long long\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_readfsbase_u64 (void)\n+{\n+  return __builtin_ia32_rdfsbase64 ();\n+}\n+\n+extern __inline unsigned int\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_readgsbase_u32 (void)\n+{\n+  return __builtin_ia32_rdgsbase32 ();\n+}\n+\n+extern __inline unsigned long long\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_readgsbase_u64 (void)\n+{\n+  return __builtin_ia32_rdgsbase64 ();\n+}\n+\n+extern __inline void\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_writefsbase_u32 (unsigned int __B)\n+{\n+  __builtin_ia32_wrfsbase32 (__B);\n+}\n+\n+extern __inline void\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_writefsbase_u64 (unsigned long long __B)\n+{\n+  __builtin_ia32_wrfsbase64 (__B);\n+}\n+\n+extern __inline void\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_writegsbase_u32 (unsigned int __B)\n+{\n+  __builtin_ia32_wrgsbase32 (__B);\n+}\n+\n+extern __inline void\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_writegsbase_u64 (unsigned long long __B)\n+{\n+  __builtin_ia32_wrgsbase64 (__B);\n+}\n+#ifdef __DISABLE_FSGSBASE__\n+#undef __DISABLE_FSGSBASE__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_FSGSBASE__ */\n+\n+#ifndef __RDRND__\n+#pragma GCC push_options\n+#pragma GCC target(\"rdrnd\")\n+#define __DISABLE_RDRND__\n+#endif /* __RDRND__ */\n+extern __inline int\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_rdrand64_step (unsigned long long *__P)\n+{\n+  return __builtin_ia32_rdrand64_step (__P);\n+}\n+#ifdef __DISABLE_RDRND__\n+#undef __DISABLE_RDRND__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_RDRND__ */\n+\n+#endif /* __x86_64__  */\n+\n+#ifndef __PTWRITE__\n+#pragma GCC push_options\n+#pragma GCC target(\"ptwrite\")\n+#define __DISABLE_PTWRITE__\n+#endif\n+\n+#ifdef __x86_64__\n+extern __inline void\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_ptwrite64 (unsigned long long __B)\n+{\n+  __builtin_ia32_ptwrite64 (__B);\n+}\n+#endif /* __x86_64__ */\n+\n+extern __inline void\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_ptwrite32 (unsigned __B)\n+{\n+  __builtin_ia32_ptwrite32 (__B);\n+}\n+#ifdef __DISABLE_PTWRITE__\n+#undef __DISABLE_PTWRITE__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_PTWRITE__ */\n+\n+#endif /* __iamcu__ */\n+\n+#endif /* _X86GPRINTRIN_H_INCLUDED.  */"}, {"sha": "bc6cb40901f152d19680f4d11d6d521add9f7c45", "filename": "gcc/config/i386/x86intrin.h", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/gcc%2Fconfig%2Fi386%2Fx86intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/gcc%2Fconfig%2Fi386%2Fx86intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86intrin.h?ref=59a95143ddeb4939fe2336e8f86cbc908bfa8e1a", "patch": "@@ -24,7 +24,7 @@\n #ifndef _X86INTRIN_H_INCLUDED\n #define _X86INTRIN_H_INCLUDED\n \n-#include <ia32intrin.h>\n+#include <x86gprintrin.h>\n \n #ifndef __iamcu__\n \n@@ -37,16 +37,6 @@\n \n #include <xopintrin.h>\n \n-#include <lwpintrin.h>\n-\n-#include <tbmintrin.h>\n-\n-#include <popcntintrin.h>\n-\n-#include <mwaitxintrin.h>\n-\n-#include <clzerointrin.h>\n-\n #endif /* __iamcu__ */\n \n #endif /* _X86INTRIN_H_INCLUDED */"}, {"sha": "06c9f367cdee4108a9a7222cea1dac3c8ec35e82", "filename": "gcc/config/i386/xsavecintrin.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/gcc%2Fconfig%2Fi386%2Fxsavecintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/gcc%2Fconfig%2Fi386%2Fxsavecintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fxsavecintrin.h?ref=59a95143ddeb4939fe2336e8f86cbc908bfa8e1a", "patch": "@@ -21,8 +21,8 @@\n    see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    <http://www.gnu.org/licenses/>.  */\n \n-#if !defined _IMMINTRIN_H_INCLUDED\n-# error \"Never use <xsavecintrin.h> directly; include <immintrin.h> instead.\"\n+#ifndef _X86GPRINTRIN_H_INCLUDED\n+# error \"Never use <xsavecintrin.h> directly; include <x86gprintrin.h> instead.\"\n #endif\n \n #ifndef _XSAVECINTRIN_H_INCLUDED"}, {"sha": "f9cac0d422ef138558696fd5f3ef7c33a98dcbb3", "filename": "gcc/config/i386/xsaveintrin.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/gcc%2Fconfig%2Fi386%2Fxsaveintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/gcc%2Fconfig%2Fi386%2Fxsaveintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fxsaveintrin.h?ref=59a95143ddeb4939fe2336e8f86cbc908bfa8e1a", "patch": "@@ -21,8 +21,8 @@\n    see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    <http://www.gnu.org/licenses/>.  */\n \n-#if !defined _IMMINTRIN_H_INCLUDED\n-# error \"Never use <xsaveintrin.h> directly; include <immintrin.h> instead.\"\n+#ifndef _X86GPRINTRIN_H_INCLUDED\n+# error \"Never use <xsaveintrin.h> directly; include <x86gprintrin.h> instead.\"\n #endif\n \n #ifndef _XSAVEINTRIN_H_INCLUDED"}, {"sha": "4f2756b9fd6cfc3adde71b998a150722ef74289c", "filename": "gcc/config/i386/xsaveoptintrin.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/gcc%2Fconfig%2Fi386%2Fxsaveoptintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/gcc%2Fconfig%2Fi386%2Fxsaveoptintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fxsaveoptintrin.h?ref=59a95143ddeb4939fe2336e8f86cbc908bfa8e1a", "patch": "@@ -21,8 +21,8 @@\n    see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    <http://www.gnu.org/licenses/>.  */\n \n-#if !defined _IMMINTRIN_H_INCLUDED\n-# error \"Never use <xsaveoptintrin.h> directly; include <immintrin.h> instead.\"\n+#ifndef _X86GPRINTRIN_H_INCLUDED\n+# error \"Never use <xsaveoptintrin.h> directly; include <x86gprintrin.h> instead.\"\n #endif\n \n #ifndef _XSAVEOPTINTRIN_H_INCLUDED"}, {"sha": "629a1f375a4fa32e4ca7b8f0fef87fc985334f18", "filename": "gcc/config/i386/xsavesintrin.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/gcc%2Fconfig%2Fi386%2Fxsavesintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/gcc%2Fconfig%2Fi386%2Fxsavesintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fxsavesintrin.h?ref=59a95143ddeb4939fe2336e8f86cbc908bfa8e1a", "patch": "@@ -21,8 +21,8 @@\n    see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    <http://www.gnu.org/licenses/>.  */\n \n-#if !defined _IMMINTRIN_H_INCLUDED\n-# error \"Never use <xsavesintrin.h> directly; include <immintrin.h> instead.\"\n+#ifndef _X86GPRINTRIN_H_INCLUDED\n+# error \"Never use <xsavesintrin.h> directly; include <x86gprintrin.h> instead.\"\n #endif\n \n #ifndef _XSAVESINTRIN_H_INCLUDED"}, {"sha": "757cc345108d54877a557de82c4ccff69d27d6e1", "filename": "gcc/config/i386/xtestintrin.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/gcc%2Fconfig%2Fi386%2Fxtestintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/gcc%2Fconfig%2Fi386%2Fxtestintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fxtestintrin.h?ref=59a95143ddeb4939fe2336e8f86cbc908bfa8e1a", "patch": "@@ -21,8 +21,8 @@\n    see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    <http://www.gnu.org/licenses/>.  */\n \n-#ifndef _IMMINTRIN_H_INCLUDED\n-# error \"Never use <xtestintrin.h> directly; include <immintrin.h> instead.\"\n+#ifndef _X86GPRINTRIN_H_INCLUDED\n+# error \"Never use <xtestintrin.h> directly; include <x86gprintrin.h> instead.\"\n #endif\n \n #ifndef _XTESTINTRIN_H_INCLUDED"}, {"sha": "2dbed1cc943e5c7e34752852389dedf002b0ff12", "filename": "gcc/testsuite/gcc.target/i386/avx-1.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c?ref=59a95143ddeb4939fe2336e8f86cbc908bfa8e1a", "patch": "@@ -680,6 +680,16 @@\n #define __builtin_ia32_vpclmulqdq_v2di(A, B, C)  __builtin_ia32_vpclmulqdq_v2di(A, B, 1) \n #define __builtin_ia32_vpclmulqdq_v8di(A, B, C)  __builtin_ia32_vpclmulqdq_v8di(A, B, 1) \n \n+/* lwpintrin.h */\n+#define __builtin_ia32_lwpval32(D2, D1, F) __builtin_ia32_lwpval32 (D2, D1, 1)\n+#define __builtin_ia32_lwpval64(D2, D1, F) __builtin_ia32_lwpval64 (D2, D1, 1)\n+#define __builtin_ia32_lwpins32(D2, D1, F) __builtin_ia32_lwpins32 (D2, D1, 1)\n+#define __builtin_ia32_lwpins64(D2, D1, F) __builtin_ia32_lwpins64 (D2, D1, 1)\n+\n+/* tbmintrin.h */\n+#define __builtin_ia32_bextri_u32(X, Y) __builtin_ia32_bextri_u32 (X, 1)\n+#define __builtin_ia32_bextri_u64(X, Y) __builtin_ia32_bextri_u64 (X, 1)\n+\n #include <wmmintrin.h>\n #include <immintrin.h>\n #include <mm3dnow.h>"}, {"sha": "d9c759bde4e2841fc2d715c63231f23bf1afb420", "filename": "gcc/testsuite/gcc.target/i386/x86gprintrin-1.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-1.c?ref=59a95143ddeb4939fe2336e8f86cbc908bfa8e1a", "patch": "@@ -0,0 +1,7 @@\n+/* Test that <x86gprintrin.h> is usable with -O -std=c89 -pedantic-errors.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O -std=c89 -pedantic-errors -march=x86-64 -madx -mbmi -mbmi2 -mcldemote -mclflushopt -mclwb -mclzero -menqcmd -mfsgsbase -mfxsr -mlzcnt -mlwp -mmovdiri -mmwaitx -mpconfig -mpopcnt -mpku -mptwrite -mrdpid -mrdrnd -mrdseed -mrtm -mserialize -msgx -mshstk -mtbm -mtsxldtrk -mwaitpkg -mwbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-sse -mno-mmx\" } */\n+\n+#include <x86gprintrin.h>\n+\n+int dummy;"}, {"sha": "5ea47726405f5dccbfb95ea3aa59be4658926e5b", "filename": "gcc/testsuite/gcc.target/i386/x86gprintrin-2.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-2.c?ref=59a95143ddeb4939fe2336e8f86cbc908bfa8e1a", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=x86-64 -madx -mbmi -mbmi2 -mcldemote -mclflushopt -mclwb -mclzero -menqcmd -mfsgsbase -mfxsr -mlzcnt -mlwp -mmovdiri -mmwaitx -mpconfig -mpopcnt -mpku -mptwrite -mrdpid -mrdrnd -mrdseed -mrtm -mserialize -msgx -mshstk -mtbm -mtsxldtrk -mwaitpkg -mwbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-sse -mno-mmx\" } */\n+/* { dg-add-options bind_pic_locally } */\n+\n+/* Test that the intrinsics in <x86gprintrin.h> compile with optimization.\n+   All of them are defined as inline functions that reference the proper\n+   builtin functions.\n+\n+   Defining away \"extern\" and \"__inline\" results in all of them being\n+   compiled as proper functions.  */\n+\n+#define extern\n+#define __inline\n+\n+/* Following intrinsics require immediate arguments. */\n+\n+/* lwpintrin.h */\n+#define __builtin_ia32_lwpval32(D2, D1, F) __builtin_ia32_lwpval32 (D2, D1, 1)\n+#define __builtin_ia32_lwpval64(D2, D1, F) __builtin_ia32_lwpval64 (D2, D1, 1)\n+#define __builtin_ia32_lwpins32(D2, D1, F) __builtin_ia32_lwpins32 (D2, D1, 1)\n+#define __builtin_ia32_lwpins64(D2, D1, F) __builtin_ia32_lwpins64 (D2, D1, 1)\n+\n+/* tbmintrin.h */\n+#define __builtin_ia32_bextri_u32(X, Y) __builtin_ia32_bextri_u32 (X, 1)\n+#define __builtin_ia32_bextri_u64(X, Y) __builtin_ia32_bextri_u64 (X, 1)\n+\n+/* rtmintrin.h */\n+#define __builtin_ia32_xabort(N) __builtin_ia32_xabort(1)\n+\n+#include <x86gprintrin.h>"}, {"sha": "01d3f7878b0365cffbbe2d6c7f2a63a7c2372f29", "filename": "gcc/testsuite/gcc.target/i386/x86gprintrin-3.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-3.c?ref=59a95143ddeb4939fe2336e8f86cbc908bfa8e1a", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=x86-64 -madx -mbmi -mbmi2 -mcldemote -mclflushopt -mclwb -mclzero -menqcmd -mfsgsbase -mfxsr -mlzcnt -mlwp -mmovdiri -mmwaitx -mpconfig -mpopcnt -mpku -mptwrite -mrdpid -mrdrnd -mrdseed -mrtm -mserialize -msgx -mshstk -mtbm -mtsxldtrk -mwaitpkg -mwbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-sse -mno-mmx\" } */\n+/* { dg-add-options bind_pic_locally } */\n+\n+/* Test that the intrinsics in <x86gprintrin.h> compile without optimization.\n+   All of them are defined as inline functions that reference the proper\n+   builtin functions.\n+\n+   Defining away \"extern\" and \"__inline\" results in all of them being compiled\n+   as proper functions.  */\n+\n+#define extern\n+#define __inline\n+\n+#include <x86gprintrin.h>"}, {"sha": "053f07bc17f73d0be6c41ac135da5035695ae679", "filename": "gcc/testsuite/gcc.target/i386/x86gprintrin-4.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-4.c?ref=59a95143ddeb4939fe2336e8f86cbc908bfa8e1a", "patch": "@@ -0,0 +1,30 @@\n+/* Same as x86gprintrin-3.c, except converted to use #pragma GCC option.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=x86-64 -mno-sse -mno-mmx\" } */\n+/* { dg-add-options bind_pic_locally } */\n+\n+/* Test that the intrinsics in <x86gprintrin.h> compile without optimization.\n+   All of them are defined as inline functions that reference the proper\n+   builtin functions.\n+\n+   Defining away \"extern\" and \"__inline\" results in all of them being\n+   compiled as proper functions.  */\n+\n+#define extern\n+#define __inline\n+\n+#ifndef DIFFERENT_PRAGMAS\n+#pragma GCC target (\"adx,bmi,bmi2,fsgsbase,fxsr,lwp,lzcnt,popcnt,rdrnd,rdseed,tbm,rtm,serialize,tsxldtrk,xsaveopt\")\n+#endif\n+\n+/* popcnintrin.h (POPCNT).  */\n+#ifdef DIFFERENT_PRAGMAS\n+#pragma GCC target (\"popcnt\")\n+#endif\n+#include <popcntintrin.h>\n+\n+/* x86intrin.h (LWP/BMI/BMI2/TBM/LZCNT). */\n+#ifdef DIFFERENT_PRAGMAS\n+#pragma GCC target (\"lwp,bmi,bmi2,tbm,lzcnt\")\n+#endif\n+#include <x86gprintrin.h>"}, {"sha": "f6e9c70ebb51fc46760261a3ff43b327fd84db57", "filename": "gcc/testsuite/gcc.target/i386/x86gprintrin-4a.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-4a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-4a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-4a.c?ref=59a95143ddeb4939fe2336e8f86cbc908bfa8e1a", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8\" } */\n+/* { dg-add-options bind_pic_locally } */\n+\n+#define DIFFERENT_PRAGMAS\n+\n+#include \"x86gprintrin-4.c\""}, {"sha": "fe9c5c770ae3ef901c85fca0b52a454583144c92", "filename": "gcc/testsuite/gcc.target/i386/x86gprintrin-5.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-5.c?ref=59a95143ddeb4939fe2336e8f86cbc908bfa8e1a", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=x86-64 -mno-sse -mno-mmx\" } */\n+/* { dg-add-options bind_pic_locally } */\n+\n+/* Test that the intrinsics in <x86gprintrin.h> compile with optimization.\n+   All of them are defined as inline functions that reference the proper\n+   builtin functions.\n+\n+   Defining away \"extern\" and \"__inline\" results in all of them being\n+   compiled as proper functions.  */\n+\n+#define extern\n+#define __inline\n+\n+/* Following intrinsics require immediate arguments. */\n+\n+/* lwpintrin.h */\n+#define __builtin_ia32_lwpval32(D2, D1, F) __builtin_ia32_lwpval32 (D2, D1, 1)\n+#define __builtin_ia32_lwpval64(D2, D1, F) __builtin_ia32_lwpval64 (D2, D1, 1)\n+#define __builtin_ia32_lwpins32(D2, D1, F) __builtin_ia32_lwpins32 (D2, D1, 1)\n+#define __builtin_ia32_lwpins64(D2, D1, F) __builtin_ia32_lwpins64 (D2, D1, 1)\n+\n+/* tbmintrin.h */\n+#define __builtin_ia32_bextri_u32(X, Y) __builtin_ia32_bextr_u32 (X, 1)\n+#define __builtin_ia32_bextri_u64(X, Y) __builtin_ia32_bextr_u64 (X, 1)\n+\n+/* rtmintrin.h */\n+#define __builtin_ia32_xabort(M) __builtin_ia32_xabort(1)\n+\n+#pragma GCC target (\"adx,bmi,bmi2,clflushopt,clwb,clzero,enqcmd,fsgsbase,fxsr,lwp,lzcnt,mwaitx,pconfig,pku,popcnt,rdpid,rdrnd,rdseed,tbm,rtm,serialize,sgx,tsxldtrk,xsavec,xsaveopt,xsaves,wbnoinvd\")\n+\n+#include <x86gprintrin.h>"}, {"sha": "6670a252c223ee024784709b7ef63e20b93431eb", "filename": "gcc/testsuite/gcc.target/i386/x86gprintrin-5a.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-5a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-5a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-5a.c?ref=59a95143ddeb4939fe2336e8f86cbc908bfa8e1a", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -mno-sse -mno-mmx\" } */\n+/* { dg-add-options bind_pic_locally } */\n+\n+#include \"x86gprintrin-5.c\""}, {"sha": "f76bb2424eaea32cb96639498976331c5ce207cd", "filename": "gcc/testsuite/gcc.target/i386/x86gprintrin-5b.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-5b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-5b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-5b.c?ref=59a95143ddeb4939fe2336e8f86cbc908bfa8e1a", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -funsigned-char -mno-sse -mno-mmx\" } */\n+/* { dg-add-options bind_pic_locally } */\n+\n+#include \"x86gprintrin-5.c\""}, {"sha": "40e84dc3d7424d337f34768728a0e390b358b7b2", "filename": "gcc/testsuite/gcc.target/i386/x86gprintrin-6.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-6.c?ref=59a95143ddeb4939fe2336e8f86cbc908bfa8e1a", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile { target ia32 } } */\n+/* { dg-options \"-O2 -miamcu\" } */\n+/* { dg-add-options bind_pic_locally } */\n+\n+/* Defining away \"extern\" and \"__inline\" results in all of them being\n+   compiled as proper functions.  */\n+\n+#define extern\n+#define __inline\n+\n+#include <x86gprintrin.h>"}, {"sha": "ff979da6f10479c384b6ce3c5fe8f450add99642", "filename": "libgcc/config/i386/shadow-stack-unwind.h", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/libgcc%2Fconfig%2Fi386%2Fshadow-stack-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a/libgcc%2Fconfig%2Fi386%2Fshadow-stack-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Fshadow-stack-unwind.h?ref=59a95143ddeb4939fe2336e8f86cbc908bfa8e1a", "patch": "@@ -22,14 +22,7 @@ a copy of the GCC Runtime Library Exception along with this program;\n see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n <http://www.gnu.org/licenses/>.  */\n \n-/* NB: We need _get_ssp and _inc_ssp from <cetintrin.h>.  But we can't\n-   include <x86intrin.h> which ends up including <mm_malloc.h>, which\n-   includes <stdlib.h> and <errno.h> unconditionally.  But we can't\n-   include any libc system headers unconditionally from libgcc.  Avoid\n-   including <mm_malloc.h> here by defining _IMMINTRIN_H_INCLUDED.  */\n-#define _IMMINTRIN_H_INCLUDED\n-#include <cetintrin.h>\n-#undef _IMMINTRIN_H_INCLUDED\n+#include <x86gprintrin.h>\n \n /* Unwind the shadow stack for EH.  */\n #undef _Unwind_Frames_Extra"}]}