{"sha": "285398d2db1c0835373f9d97d95ff18b94125ad9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjg1Mzk4ZDJkYjFjMDgzNTM3M2Y5ZDk3ZDk1ZmYxOGI5NDEyNWFkOQ==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2015-01-28T10:08:57Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2015-01-28T10:08:57Z"}, "message": "[Patch AArch64] Make integer vabs intrinsics UNSPECs\n\ngcc/\n\n\t* config/aarch64/aarch64-simd.md (aarch64_abs<mode>): New.\n\t* config/aarch64/aarch64-simd-builtins.def (abs): Split by\n\tinteger and floating point variants.\n\t* config/aarch64/iterators.md (unspec): Add UNSPEC_ABS.\n\ngcc/testsuite/\n\n\t* gcc.target/aarch64/abs_2.c: New.\n\nFrom-SVN: r220202", "tree": {"sha": "e9c6db6078e8cd30188cc138806e52646f4177e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e9c6db6078e8cd30188cc138806e52646f4177e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/285398d2db1c0835373f9d97d95ff18b94125ad9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/285398d2db1c0835373f9d97d95ff18b94125ad9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/285398d2db1c0835373f9d97d95ff18b94125ad9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/285398d2db1c0835373f9d97d95ff18b94125ad9/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8aa33fadbe1ca12a8e1c3b188a2301a0239e8e7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8aa33fadbe1ca12a8e1c3b188a2301a0239e8e7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8aa33fadbe1ca12a8e1c3b188a2301a0239e8e7b"}], "stats": {"total": 59, "additions": 58, "deletions": 1}, "files": [{"sha": "b5d0d2d19e6b1f46d502764e7b04d02dd5cdf9b5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/285398d2db1c0835373f9d97d95ff18b94125ad9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/285398d2db1c0835373f9d97d95ff18b94125ad9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=285398d2db1c0835373f9d97d95ff18b94125ad9", "patch": "@@ -1,3 +1,10 @@\n+2015-01-28  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md (aarch64_abs<mode>): New.\n+\t* config/aarch64/aarch64-simd-builtins.def (abs): Split by\n+\tinteger and floating point variants.\n+\t* config/aarch64/iterators.md (unspec): Add UNSPEC_ABS.\n+\n 2015-01-28  Robert Suchanek  <robert.suchanek@imgtec.com>\n \n \t* config/mips/mips.c (mips_hard_regno_mode_ok_p): Prohibit accumulators"}, {"sha": "2c52b27be7150bc11bd60be2039a68ba419f2b93", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/285398d2db1c0835373f9d97d95ff18b94125ad9/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/285398d2db1c0835373f9d97d95ff18b94125ad9/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=285398d2db1c0835373f9d97d95ff18b94125ad9", "patch": "@@ -358,7 +358,8 @@\n \n   /* Implemented by a mixture of abs2 patterns.  Note the DImode builtin is\n      only ever used for the int64x1_t intrinsic, there is no scalar version.  */\n-  BUILTIN_VALLDI (UNOP, abs, 2)\n+  BUILTIN_VSDQ_I_DI (UNOP, abs, 0)\n+  BUILTIN_VDQF (UNOP, abs, 2)\n \n   VAR1 (UNOP, vec_unpacks_hi_, 10, v4sf)\n   VAR1 (BINOP, float_truncate_hi_, 0, v4sf)"}, {"sha": "055757036d54d0d5cf5df4bd05419e39ea119f46", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/285398d2db1c0835373f9d97d95ff18b94125ad9/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/285398d2db1c0835373f9d97d95ff18b94125ad9/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=285398d2db1c0835373f9d97d95ff18b94125ad9", "patch": "@@ -384,6 +384,19 @@\n   [(set_attr \"type\" \"neon_abs<q>\")]\n )\n \n+;; The intrinsic version of integer ABS must not be allowed to\n+;; combine with any operation with an integerated ABS step, such\n+;; as SABD.\n+(define_insn \"aarch64_abs<mode>\"\n+  [(set (match_operand:VSDQ_I_DI 0 \"register_operand\" \"=w\")\n+\t  (unspec:VSDQ_I_DI\n+\t    [(match_operand:VSDQ_I_DI 1 \"register_operand\" \"w\")]\n+\t   UNSPEC_ABS))]\n+  \"TARGET_SIMD\"\n+  \"abs\\t%<v>0<Vmtype>, %<v>1<Vmtype>\"\n+  [(set_attr \"type\" \"neon_abs<q>\")]\n+)\n+\n (define_insn \"abd<mode>_3\"\n   [(set (match_operand:VDQ_BHSI 0 \"register_operand\" \"=w\")\n \t(abs:VDQ_BHSI (minus:VDQ_BHSI"}, {"sha": "1fdff040d1acc4532016ee4e92d94cd99d60da26", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/285398d2db1c0835373f9d97d95ff18b94125ad9/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/285398d2db1c0835373f9d97d95ff18b94125ad9/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=285398d2db1c0835373f9d97d95ff18b94125ad9", "patch": "@@ -184,6 +184,7 @@\n  [\n     UNSPEC_ASHIFT_SIGNED\t; Used in aarch-simd.md.\n     UNSPEC_ASHIFT_UNSIGNED\t; Used in aarch64-simd.md.\n+    UNSPEC_ABS\t\t; Used in aarch64-simd.md.\n     UNSPEC_FMAX\t\t; Used in aarch64-simd.md.\n     UNSPEC_FMAXNMV\t; Used in aarch64-simd.md.\n     UNSPEC_FMAXV\t; Used in aarch64-simd.md."}, {"sha": "efa70174dfbe73dc9ca9eb947558a9fa81b11a10", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/285398d2db1c0835373f9d97d95ff18b94125ad9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/285398d2db1c0835373f9d97d95ff18b94125ad9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=285398d2db1c0835373f9d97d95ff18b94125ad9", "patch": "@@ -1,3 +1,7 @@\n+2015-01-28  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* gcc.target/aarch64/abs_2.c: New.\n+\n 2015-01-28  Robert Suchanek  <robert.suchanek@imgtec.com>\n \n \t* lib/target-supports.exp (check_effective_target_mips_nanlegacy): New."}, {"sha": "a10ccdd5a529108d5c434987064760e0d3ce73f1", "filename": "gcc/testsuite/gcc.target/aarch64/abs_2.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/285398d2db1c0835373f9d97d95ff18b94125ad9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fabs_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/285398d2db1c0835373f9d97d95ff18b94125ad9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fabs_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fabs_2.c?ref=285398d2db1c0835373f9d97d95ff18b94125ad9", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 --save-temps\" } */\n+\n+#include \"arm_neon.h\"\n+\n+extern void abort (void);\n+\n+int\n+main (int argc, char **argv)\n+{\n+  uint64_t got;\n+  uint64_t exp = UINT64_C (0x0001000100003b9b);\n+  int16x4_t val1 = vcreate_s16 (0x7fff800080007ffful);\n+  int16x4_t val2 = vcreate_s16 (0x80007fff80004464ul);\n+  int16x4_t result;\n+  /* Avoid folding away the sub early.  */\n+  asm volatile (\"mov %d0, %0.d[0]\":\"+w\"(val1));\n+\n+  /* Expect \"result\" = 0001000100003b9b.  */\n+  result = vabs_s16 (vsub_s16 (val1, val2));\n+\n+  got = vget_lane_u64 (vreinterpret_u64_s16 (result), 0);\n+  if (exp != got)\n+    abort ();\n+\n+  return 0;\n+}\n+\n+\n+/* { dg-final { scan-assembler-not \"sabd\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}]}