{"sha": "74788b800931abc7ab79a06812799862eede96c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQ3ODhiODAwOTMxYWJjN2FiNzlhMDY4MTI3OTk4NjJlZWRlOTZjMA==", "commit": {"author": {"name": "Dodji Seketeli", "email": "dodji@redhat.com", "date": "2012-03-13T21:25:22Z"}, "committer": {"name": "Dodji Seketeli", "email": "dodji@gcc.gnu.org", "date": "2012-03-13T21:25:22Z"}, "message": "PR c++/51641 - Lookup finds enclosing class member instead of template parameter\n\ngcc/cp/\n\n\tPR c++/51641\n\t* cp-tree.h (template_type_parameter_p): Declare new function.\n\t(parameter_of_template_p): Remove\n\t* pt.c (template_type_parameter_p): Define new function.\n\t(parameter_of_template_p): Remove.\n\t* name-lookup.c (binding_to_template_parms_of_scope_p): Don't rely\n\ton parameter_of_template_p anymore.  Compare the level of the\n\ttemplate parameter to the depth of the template.\n\ngcc/testsuite/\n\n\tPR c++/51641\n\t* g++.dg/lookup/hidden-class17.C: New test.\n\n\nConflicts:\n\n\tgcc/cp/pt.c\n\nFrom-SVN: r185357", "tree": {"sha": "1846e2e040151c9f4edde0f36e6c882543d14679", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1846e2e040151c9f4edde0f36e6c882543d14679"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74788b800931abc7ab79a06812799862eede96c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74788b800931abc7ab79a06812799862eede96c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74788b800931abc7ab79a06812799862eede96c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74788b800931abc7ab79a06812799862eede96c0/comments", "author": null, "committer": null, "parents": [{"sha": "40703fdf12ebe0a89e104f303906128e3a729279", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40703fdf12ebe0a89e104f303906128e3a729279", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40703fdf12ebe0a89e104f303906128e3a729279"}], "stats": {"total": 112, "additions": 75, "deletions": 37}, "files": [{"sha": "6ef5545fbf5601ff6c939c0af48688d0834d143c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74788b800931abc7ab79a06812799862eede96c0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74788b800931abc7ab79a06812799862eede96c0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=74788b800931abc7ab79a06812799862eede96c0", "patch": "@@ -1,3 +1,14 @@\n+2012-01-30  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR c++/51641\n+\t* cp-tree.h (template_type_parameter_p): Declare new function.\n+    \t(parameter_of_template_p): Remove\n+    \t* pt.c (template_type_parameter_p): Define new function.\n+    \t(parameter_of_template_p): Remove.\n+    \t* name-lookup.c (binding_to_template_parms_of_scope_p): Don't rely\n+    \ton parameter_of_template_p anymore.  Compare the level of the\n+    \ttemplate parameter to the depth of the template.\n+\n 2011-12-15  Dodji Seketeli  <dodji@redhat.com>\n \n \t* call.c (standard_conversion, build_integral_nontype_arg_conv)"}, {"sha": "d24c5961f27ca78000cce70be9f0237b7ece9672", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74788b800931abc7ab79a06812799862eede96c0/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74788b800931abc7ab79a06812799862eede96c0/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=74788b800931abc7ab79a06812799862eede96c0", "patch": "@@ -5361,10 +5361,10 @@ extern bool explicit_class_specialization_p     (tree);\n extern int push_tinst_level                     (tree);\n extern void pop_tinst_level                     (void);\n extern struct tinst_level *outermost_tinst_level(void);\n-extern bool parameter_of_template_p\t\t(tree, tree);\n extern void init_template_processing\t\t(void);\n extern void print_template_statistics\t\t(void);\n bool template_template_parameter_p\t\t(const_tree);\n+bool template_type_parameter_p                  (const_tree);\n extern bool primary_template_instantiation_p    (const_tree);\n extern tree get_primary_template_innermost_parameters\t(const_tree);\n extern tree get_template_parms_at_level (tree, int);"}, {"sha": "886a7b139307671f09d9b127ae42e29148b5c886", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74788b800931abc7ab79a06812799862eede96c0/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74788b800931abc7ab79a06812799862eede96c0/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=74788b800931abc7ab79a06812799862eede96c0", "patch": "@@ -4466,18 +4466,38 @@ static bool\n binding_to_template_parms_of_scope_p (cxx_binding *binding,\n \t\t\t\t      cp_binding_level *scope)\n {\n-  tree binding_value;\n-  tree tinfo;\n+  tree binding_value, tmpl, tinfo;\n+  int level;\n \n   if (!binding || !scope || !scope->this_entity)\n     return false;\n \n   binding_value = binding->value ?  binding->value : binding->type;\n   tinfo = get_template_info (scope->this_entity);\n \n-  return (tinfo\n+  /* BINDING_VALUE must be a template parm.  */\n+  if (binding_value == NULL_TREE\n+      || (!DECL_P (binding_value)\n+          || !DECL_TEMPLATE_PARM_P (binding_value)))\n+    return false;\n+\n+  /*  The level of BINDING_VALUE.  */\n+  level =\n+    template_type_parameter_p (binding_value)\n+    ? TEMPLATE_PARM_LEVEL (TEMPLATE_TYPE_PARM_INDEX\n+\t\t\t (TREE_TYPE (binding_value)))\n+    : TEMPLATE_PARM_LEVEL (DECL_INITIAL (binding_value));\n+\n+  /* The template of the current scope, iff said scope is a primary\n+     template.  */\n+  tmpl = (tinfo\n \t  && PRIMARY_TEMPLATE_P (TI_TEMPLATE (tinfo))\n-\t  && parameter_of_template_p (binding_value, TI_TEMPLATE (tinfo)));\n+\t  ? TI_TEMPLATE (tinfo)\n+\t  : NULL_TREE);\n+\n+  /* If the level of the parm BINDING_VALUE equals the depth of TMPL,\n+     then BINDING_VALUE is a parameter of TMPL.  */\n+  return (tmpl && level == TMPL_PARMS_DEPTH (DECL_TEMPLATE_PARMS (tmpl)));\n }\n \n /* Return the innermost non-namespace binding for NAME from a scope"}, {"sha": "6dd004e632d4a85b7482a5abd1f28c3caad6afac", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 12, "deletions": 32, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74788b800931abc7ab79a06812799862eede96c0/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74788b800931abc7ab79a06812799862eede96c0/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=74788b800931abc7ab79a06812799862eede96c0", "patch": "@@ -2869,6 +2869,18 @@ template_template_parameter_p (const_tree parm)\n   return DECL_TEMPLATE_TEMPLATE_PARM_P (parm);\n }\n \n+/* Return true iff PARM is a DECL representing a type template\n+   parameter.  */\n+\n+bool\n+template_type_parameter_p (const_tree parm)\n+{\n+  return (parm\n+\t  && (TREE_CODE (parm) == TYPE_DECL\n+\t      || TREE_CODE (parm) == TEMPLATE_DECL)\n+\t  && DECL_TEMPLATE_PARM_P (parm));\n+}\n+\n /* Return the template parameters of T if T is a\n    primary template instantiation, NULL otherwise.  */\n \n@@ -8118,38 +8130,6 @@ outermost_tinst_level (void)\n   return level;\n }\n \n-/* Returns TRUE if PARM is a parameter of the template TEMPL.  */\n-\n-bool\n-parameter_of_template_p (tree parm, tree templ)\n-{\n-  tree parms;\n-  int i;\n-\n-  if (!parm || !templ)\n-    return false;\n-\n-  gcc_assert (DECL_TEMPLATE_PARM_P (parm));\n-  gcc_assert (TREE_CODE (templ) == TEMPLATE_DECL);\n-\n-  parms = DECL_TEMPLATE_PARMS (templ);\n-  parms = INNERMOST_TEMPLATE_PARMS (parms);\n-\n-  for (i = 0; i < TREE_VEC_LENGTH (parms); ++i)\n-    {\n-      tree p = TREE_VALUE (TREE_VEC_ELT (parms, i));\n-      if (p == error_mark_node)\n-\tcontinue;\n-\n-      if (parm == p\n-\t  || (DECL_INITIAL (parm)\n-\t      && DECL_INITIAL (parm) == DECL_INITIAL (p)))\n-\treturn true;\n-    }\n-\n-  return false;\n-}\n-\n /* DECL is a friend FUNCTION_DECL or TEMPLATE_DECL.  ARGS is the\n    vector of template arguments, as for tsubst.\n "}, {"sha": "bf9503c2981b879b8a579318811d79962c218832", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74788b800931abc7ab79a06812799862eede96c0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74788b800931abc7ab79a06812799862eede96c0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=74788b800931abc7ab79a06812799862eede96c0", "patch": "@@ -1,3 +1,8 @@\n+2012-01-30  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR c++/51641\n+\t* g++.dg/lookup/hidden-class17.C: New test.\n+\n 2012-03-13  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/52577"}, {"sha": "3d5ccec39ccd1a1b98af5f1d780c08d3860c1349", "filename": "gcc/testsuite/g++.dg/lookup/hidden-class17.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74788b800931abc7ab79a06812799862eede96c0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-class17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74788b800931abc7ab79a06812799862eede96c0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-class17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fhidden-class17.C?ref=74788b800931abc7ab79a06812799862eede96c0", "patch": "@@ -0,0 +1,22 @@\n+// Origin PR c++/51641\n+// { dg-do compile }\n+\n+struct A {\n+    struct B { typedef int X; };\n+};\n+\n+template<class B> struct C : A {\n+    B::X q; // Ok: A::B.\n+    struct U { typedef int X; };\n+    template<class U>\n+        struct D;\n+};\n+\n+template<class B>\n+template<class U>\n+struct C<B>::D {\n+    typename U::X r; // { dg-error \"\" }\n+};\n+\n+C<int>::D<double> y;\n+"}]}