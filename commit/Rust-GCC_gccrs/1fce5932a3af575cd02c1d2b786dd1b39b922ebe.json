{"sha": "1fce5932a3af575cd02c1d2b786dd1b39b922ebe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWZjZTU5MzJhM2FmNTc1Y2QwMmMxZDJiNzg2ZGQxYjM5YjkyMmViZQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-04-14T19:06:44Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-04-14T19:06:44Z"}, "message": "Better const_vector printing\n\nLooking at PR99929 showed that we weren't dumping enough information\nabout variable-length CONST_VECTORs.  Something like:\n\n  (const_vector:VNx4SI [(const_int 1) (const_int 0)])\n\ncould be either:\n\n(a) 1, 0, 1, 0, repeating\n(b) 1 followed by all zeros\n\nThis patch adds more information to the dumps.  There are four cases:\n\n(a) above:\n\n    (const_vector:VNx4SI repeat [\n      (const_int 1)\n      (const_int 0)\n    ])\n\n(b) above:\n\n    (const_vector:VNx4SI [\n      (const_int 1)\n      repeat [\n        (const_int 0)\n      ]\n    ])\n\na single stepped sequence:\n\n    (const_vector:VNx4SI [\n      (const_int 0)\n      stepped [\n        (const_int 1)\n        (const_int 2)\n      ]\n    ])\n\ninterleaved stepped sequences:\n\n    (const_vector:VNx4SI [\n      (const_int 0)\n      (const_int 40)\n      stepped (interleave 2) [\n        (const_int 1)\n        (const_int 41)\n        (const_int 2)\n        (const_int 42)\n      ]\n    ])\n\nThere are probably better syntaxes, but hopefully this is at least\nan improvement on the status quo.\n\ngcc/\n\t* print-rtl.c (rtx_writer::print_rtx_operand_codes_E_and_V): Print\n\tmore information about variable-length CONST_VECTORs.", "tree": {"sha": "5e7a09f47f78fcdeb434e466f53f402cad343392", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e7a09f47f78fcdeb434e466f53f402cad343392"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1fce5932a3af575cd02c1d2b786dd1b39b922ebe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fce5932a3af575cd02c1d2b786dd1b39b922ebe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fce5932a3af575cd02c1d2b786dd1b39b922ebe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fce5932a3af575cd02c1d2b786dd1b39b922ebe/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00a2774923c1dc5666cd26bb9b8c37b1b7dd689d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00a2774923c1dc5666cd26bb9b8c37b1b7dd689d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00a2774923c1dc5666cd26bb9b8c37b1b7dd689d"}], "stats": {"total": 32, "additions": 31, "deletions": 1}, "files": [{"sha": "081fc50fab8a2faa09121427014a4e451d7c7c12", "filename": "gcc/print-rtl.c", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fce5932a3af575cd02c1d2b786dd1b39b922ebe/gcc%2Fprint-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fce5932a3af575cd02c1d2b786dd1b39b922ebe/gcc%2Fprint-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-rtl.c?ref=1fce5932a3af575cd02c1d2b786dd1b39b922ebe", "patch": "@@ -370,19 +370,43 @@ rtx_writer::print_rtx_operand_codes_E_and_V (const_rtx in_rtx, int idx)\n       print_rtx_head, m_indent * 2, \"\");\n       m_sawclose = 0;\n     }\n+  if (GET_CODE (in_rtx) == CONST_VECTOR\n+      && !GET_MODE_NUNITS (GET_MODE (in_rtx)).is_constant ()\n+      && CONST_VECTOR_DUPLICATE_P (in_rtx))\n+    fprintf (m_outfile, \" repeat\");\n   fputs (\" [\", m_outfile);\n   if (XVEC (in_rtx, idx) != NULL)\n     {\n       m_indent += 2;\n       if (XVECLEN (in_rtx, idx))\n \tm_sawclose = 1;\n \n+      int barrier = XVECLEN (in_rtx, idx);\n+      if (GET_CODE (in_rtx) == CONST_VECTOR\n+\t  && !GET_MODE_NUNITS (GET_MODE (in_rtx)).is_constant ())\n+\tbarrier = CONST_VECTOR_NPATTERNS (in_rtx);\n+\n       for (int j = 0; j < XVECLEN (in_rtx, idx); j++)\n \t{\n \t  int j1;\n \n+\t  if (j == barrier)\n+\t    {\n+\t      fprintf (m_outfile, \"\\n%s%*s\",\n+\t\t       print_rtx_head, m_indent * 2, \"\");\n+\t      if (!CONST_VECTOR_STEPPED_P (in_rtx))\n+\t\tfprintf (m_outfile, \"repeat [\");\n+\t      else if (CONST_VECTOR_NPATTERNS (in_rtx) == 1)\n+\t\tfprintf (m_outfile, \"stepped [\");\n+\t      else\n+\t\tfprintf (m_outfile, \"stepped (interleave %d) [\",\n+\t\t\t CONST_VECTOR_NPATTERNS (in_rtx));\n+\t      m_indent += 2;\n+\t    }\n+\n \t  print_rtx (XVECEXP (in_rtx, idx, j));\n-\t  for (j1 = j + 1; j1 < XVECLEN (in_rtx, idx); j1++)\n+\t  int limit = MIN (barrier, XVECLEN (in_rtx, idx));\n+\t  for (j1 = j + 1; j1 < limit; j1++)\n \t    if (XVECEXP (in_rtx, idx, j) != XVECEXP (in_rtx, idx, j1))\n \t      break;\n \n@@ -393,6 +417,12 @@ rtx_writer::print_rtx_operand_codes_E_and_V (const_rtx in_rtx, int idx)\n \t    }\n \t}\n \n+      if (barrier < XVECLEN (in_rtx, idx))\n+\t{\n+\t  m_indent -= 2;\n+\t  fprintf (m_outfile, \"\\n%s%*s]\", print_rtx_head, m_indent * 2, \"\");\n+\t}\n+\n       m_indent -= 2;\n     }\n   if (m_sawclose)"}]}