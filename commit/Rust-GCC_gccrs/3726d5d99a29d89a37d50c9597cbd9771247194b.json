{"sha": "3726d5d99a29d89a37d50c9597cbd9771247194b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzcyNmQ1ZDk5YTI5ZDg5YTM3ZDUwYzk1OTdjYmQ5NzcxMjQ3MTk0Yg==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2007-04-06T09:24:39Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-04-06T09:24:39Z"}, "message": "namet.ads, namet.adb (wn): Improve this debugging routine.\n\n2007-04-06  Robert Dewar  <dewar@adacore.com>\n\n\t* namet.ads, namet.adb (wn): Improve this debugging routine. Calling\n\tit no longer destroys the contents of Name_Buffer or Name_Len and\n\tnon-standard and invalid names are handled better.\n\t(Get_Decoded_Name_String): Improve performance by using\n\tName_Has_No_Encodings flag in the name table.\n\t(Is_Valid_Name): New function to determine whether a Name_Id is valid.\n\tUsed for debugging printouts.\n\nFrom-SVN: r123586", "tree": {"sha": "8ae2d74d6461a8766909dc772a22d72f70b08188", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ae2d74d6461a8766909dc772a22d72f70b08188"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3726d5d99a29d89a37d50c9597cbd9771247194b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3726d5d99a29d89a37d50c9597cbd9771247194b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3726d5d99a29d89a37d50c9597cbd9771247194b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3726d5d99a29d89a37d50c9597cbd9771247194b/comments", "author": null, "committer": null, "parents": [{"sha": "0780eccc5da4e9c0f4e8492fab37e13459da6476", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0780eccc5da4e9c0f4e8492fab37e13459da6476", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0780eccc5da4e9c0f4e8492fab37e13459da6476"}], "stats": {"total": 129, "additions": 87, "deletions": 42}, "files": [{"sha": "0f4074c49be7589a748d53b83fc51e5d8747740c", "filename": "gcc/ada/namet.adb", "status": "modified", "additions": 65, "deletions": 36, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3726d5d99a29d89a37d50c9597cbd9771247194b/gcc%2Fada%2Fnamet.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3726d5d99a29d89a37d50c9597cbd9771247194b/gcc%2Fada%2Fnamet.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fnamet.adb?ref=3726d5d99a29d89a37d50c9597cbd9771247194b", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -244,11 +244,18 @@ package body Namet is\n    begin\n       Get_Name_String (Id);\n \n+      --  Skip scan if we already know there are no encodings\n+\n+      if Name_Entries.Table (Id).Name_Has_No_Encodings then\n+         return;\n+      end if;\n+\n       --  Quick loop to see if there is anything special to do\n \n       P := 1;\n       loop\n          if P = Name_Len then\n+            Name_Entries.Table (Id).Name_Has_No_Encodings := True;\n             return;\n \n          else\n@@ -865,17 +872,16 @@ package body Namet is\n       --  Initialize entries for one character names\n \n       for C in Character loop\n-         Name_Entries.Increment_Last;\n-         Name_Entries.Table (Name_Entries.Last).Name_Chars_Index :=\n-           Name_Chars.Last;\n-         Name_Entries.Table (Name_Entries.Last).Name_Len  := 1;\n-         Name_Entries.Table (Name_Entries.Last).Hash_Link := No_Name;\n-         Name_Entries.Table (Name_Entries.Last).Int_Info  := 0;\n-         Name_Entries.Table (Name_Entries.Last).Byte_Info := 0;\n-         Name_Chars.Increment_Last;\n-         Name_Chars.Table (Name_Chars.Last) := C;\n-         Name_Chars.Increment_Last;\n-         Name_Chars.Table (Name_Chars.Last) := ASCII.NUL;\n+         Name_Entries.Append\n+           ((Name_Chars_Index      => Name_Chars.Last,\n+             Name_Len              => 1,\n+             Byte_Info             => 0,\n+             Int_Info              => 0,\n+             Name_Has_No_Encodings => True,\n+             Hash_Link             => No_Name));\n+\n+         Name_Chars.Append (C);\n+         Name_Chars.Append (ASCII.NUL);\n       end loop;\n \n       --  Clear hash table\n@@ -961,6 +967,15 @@ package body Namet is\n       return Name_Chars.Table (S + 1) = 'O';\n    end Is_Operator_Name;\n \n+   -------------------\n+   -- Is_Valid_Name --\n+   -------------------\n+\n+   function Is_Valid_Name (Id : Name_Id) return Boolean is\n+   begin\n+      return Id in Name_Entries.First .. Name_Entries.Last;\n+   end Is_Valid_Name;\n+\n    --------------------\n    -- Length_Of_Name --\n    --------------------\n@@ -999,23 +1014,21 @@ package body Namet is\n \n    function Name_Enter return Name_Id is\n    begin\n-      Name_Entries.Increment_Last;\n-      Name_Entries.Table (Name_Entries.Last).Name_Chars_Index :=\n-        Name_Chars.Last;\n-      Name_Entries.Table (Name_Entries.Last).Name_Len  := Short (Name_Len);\n-      Name_Entries.Table (Name_Entries.Last).Hash_Link := No_Name;\n-      Name_Entries.Table (Name_Entries.Last).Int_Info  := 0;\n-      Name_Entries.Table (Name_Entries.Last).Byte_Info := 0;\n+      Name_Entries.Append\n+        ((Name_Chars_Index      => Name_Chars.Last,\n+          Name_Len              => Short (Name_Len),\n+          Byte_Info             => 0,\n+          Int_Info              => 0,\n+          Name_Has_No_Encodings => False,\n+          Hash_Link             => No_Name));\n \n       --  Set corresponding string entry in the Name_Chars table\n \n       for J in 1 .. Name_Len loop\n-         Name_Chars.Increment_Last;\n-         Name_Chars.Table (Name_Chars.Last) := Name_Buffer (J);\n+         Name_Chars.Append (Name_Buffer (J));\n       end loop;\n \n-      Name_Chars.Increment_Last;\n-      Name_Chars.Table (Name_Chars.Last) := ASCII.NUL;\n+      Name_Chars.Append (ASCII.NUL);\n \n       return Name_Entries.Last;\n    end Name_Enter;\n@@ -1095,31 +1108,28 @@ package body Namet is\n                        Name_Entries.Last + 1;\n                      exit Search;\n                   end if;\n-\n             end loop Search;\n          end if;\n \n          --  We fall through here only if a matching entry was not found in the\n          --  hash table. We now create a new entry in the names table. The hash\n          --  link pointing to the new entry (Name_Entries.Last+1) has been set.\n \n-         Name_Entries.Increment_Last;\n-         Name_Entries.Table (Name_Entries.Last).Name_Chars_Index :=\n-           Name_Chars.Last;\n-         Name_Entries.Table (Name_Entries.Last).Name_Len  := Short (Name_Len);\n-         Name_Entries.Table (Name_Entries.Last).Hash_Link := No_Name;\n-         Name_Entries.Table (Name_Entries.Last).Int_Info  := 0;\n-         Name_Entries.Table (Name_Entries.Last).Byte_Info := 0;\n+         Name_Entries.Append\n+           ((Name_Chars_Index      => Name_Chars.Last,\n+             Name_Len              => Short (Name_Len),\n+             Hash_Link             => No_Name,\n+             Name_Has_No_Encodings => False,\n+             Int_Info              => 0,\n+             Byte_Info             => 0));\n \n          --  Set corresponding string entry in the Name_Chars table\n \n          for J in 1 .. Name_Len loop\n-            Name_Chars.Increment_Last;\n-            Name_Chars.Table (Name_Chars.Last) := Name_Buffer (J);\n+            Name_Chars.Append (Name_Buffer (J));\n          end loop;\n \n-         Name_Chars.Increment_Last;\n-         Name_Chars.Table (Name_Chars.Last) := ASCII.NUL;\n+         Name_Chars.Append (ASCII.NUL);\n \n          return Name_Entries.Last;\n       end if;\n@@ -1343,8 +1353,27 @@ package body Namet is\n    --------\n \n    procedure wn (Id : Name_Id) is\n+      S : Int;\n+\n    begin\n-      Write_Name (Id);\n+      if not Id'Valid then\n+         Write_Str (\"<invalid name_id>\");\n+\n+      elsif Id = No_Name then\n+         Write_Str (\"<No_Name>\");\n+\n+      elsif Id = Error_Name then\n+         Write_Str (\"<Error_Name>\");\n+\n+      else\n+         S := Name_Entries.Table (Id).Name_Chars_Index;\n+         Name_Len := Natural (Name_Entries.Table (Id).Name_Len);\n+\n+         for J in 1 .. Name_Len loop\n+            Write_Char (Name_Chars.Table (S + Int (J)));\n+         end loop;\n+      end if;\n+\n       Write_Eol;\n    end wn;\n "}, {"sha": "a669485a4bc7ebc01e36387b595fa8a00135a402", "filename": "gcc/ada/namet.ads", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3726d5d99a29d89a37d50c9597cbd9771247194b/gcc%2Fada%2Fnamet.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3726d5d99a29d89a37d50c9597cbd9771247194b/gcc%2Fada%2Fnamet.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fnamet.ads?ref=3726d5d99a29d89a37d50c9597cbd9771247194b", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -291,6 +291,10 @@ package Namet is\n    --  passed in Name_Buffer and Name_Len (which are not affected by the call).\n    --  Name_Buffer (it loads these as for Get_Name_String).\n \n+   function Is_Valid_Name (Id : Name_Id) return Boolean;\n+   --  True if Id is a valid name -- points to a valid entry in the\n+   --  Name_Entries table.\n+\n    procedure Reset_Name_Table;\n    --  This procedure is used when there are multiple source files to reset\n    --  the name table info entries associated with current entries in the\n@@ -358,16 +362,22 @@ package Namet is\n    --  in encoded form (i.e. including Uhh, Whhh, Qx, _op as they appear in\n    --  the name table). If Id is Error_Name, or No_Name, no text is output.\n \n-   procedure wn (Id : Name_Id);\n-   pragma Export (Ada, wn);\n-   --  Like Write_Name, but includes new line at end. Intended for use\n-   --  from the debugger only.\n-\n    procedure Write_Name_Decoded (Id : Name_Id);\n    --  Like Write_Name, except that the name written is the decoded name, as\n    --  described for Get_Decoded_Name_String, and the resulting value stored\n    --  in Name_Len and Name_Buffer is the decoded name.\n \n+   procedure wn (Id : Name_Id);\n+   pragma Export (Ada, wn);\n+   --  This routine is intended for debugging use only (i.e. it is intended to\n+   --  be called from the debugger). It writes the characters of the specified\n+   --  name using the standard output procedures in package Output, followed by\n+   --  a new line. The name is written in encoded form (i.e. including Uhh,\n+   --  Whhh, Qx, _op as they appear in the name table). If Id is Error_Name,\n+   --  No_Name, or invalid an appropriate string is written (<Error_Name>,\n+   --  <No_Name>, <invalid name>). Unlike Write_Name, this call does not affect\n+   --  the contents of Name_Buffer or Name_Len.\n+\n    ---------------------------\n    -- Table Data Structures --\n    ---------------------------\n@@ -404,6 +414,12 @@ private\n       Byte_Info : Byte;\n       --  Byte value associated with this name\n \n+      Name_Has_No_Encodings : Boolean;\n+      --  This flag is set True if the name entry is known not to contain any\n+      --  special character encodings. This is used to speed up repeated calls\n+      --  to Get_Decoded_Name_String. A value of False means that it is not\n+      --  known whether the name contains any such encodings.\n+\n       Hash_Link : Name_Id;\n       --  Link to next entry in names table for same hash code\n "}]}