{"sha": "8ba109cecce1cf6598380908a1d6b00e0360b85d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGJhMTA5Y2VjY2UxY2Y2NTk4MzgwOTA4YTFkNmIwMGUwMzYwYjg1ZA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2018-11-30T22:51:18Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2018-11-30T22:51:18Z"}, "message": "C++: fix-it hint for missing parentheses\n\nConsider:\n\n  class t1\n  {\n  public:\n    double length () const { return m_length; }\n  private:\n    double m_length;\n  };\n\nmissing-parens-fixit.C: In function 'bool test_1(const t1&)':\nmissing-parens-fixit.C:14:15: error: invalid use of member function\n  'double t1::length() const' (did you forget the '()' ?)\n   14 |   return inst.length > 0.0;\n      |          ~~~~~^~~~~~\n\nThis patch adds a fix-it hint for the case where the member function\ntakes no parameters, suggesting the addition of the parentheses:\n\n   14 |   return inst.length > 0.0;\n      |          ~~~~~^~~~~~\n      |                     ()\n\nso that an IDE can potentially apply the fix.\n\ngcc/cp/ChangeLog:\n\t* typeck2.c: Include \"gcc-rich-location.h\".\n\t(cxx_incomplete_type_diagnostic): When complaining about possibly\n\tmissing parens, add a fix-it hint if the member function takes no\n\tadditional params.\n\ngcc/ChangeLog:\n\t* diagnostic-core.h (emit_diagnostic): New decl.\n\t* diagnostic.c (emit_diagnostic): New overload, taking a\n\trich_location *.\n\ngcc/testsuite/ChangeLog:\n\t* g++.dg/parse/missing-parens-fixit.C: New test.\n\nFrom-SVN: r266696", "tree": {"sha": "ad4f9748a8f41861298cd65458deb892776a9643", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad4f9748a8f41861298cd65458deb892776a9643"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ba109cecce1cf6598380908a1d6b00e0360b85d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ba109cecce1cf6598380908a1d6b00e0360b85d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ba109cecce1cf6598380908a1d6b00e0360b85d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ba109cecce1cf6598380908a1d6b00e0360b85d/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "553a316b99c4af9d59e9594204298633b12f6618", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/553a316b99c4af9d59e9594204298633b12f6618", "html_url": "https://github.com/Rust-GCC/gccrs/commit/553a316b99c4af9d59e9594204298633b12f6618"}], "stats": {"total": 79, "additions": 76, "deletions": 3}, "files": [{"sha": "bda587bbfffc26e06f5845d5421bf8fe2dc27f6d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ba109cecce1cf6598380908a1d6b00e0360b85d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ba109cecce1cf6598380908a1d6b00e0360b85d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8ba109cecce1cf6598380908a1d6b00e0360b85d", "patch": "@@ -1,3 +1,9 @@\n+2018-11-30  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* diagnostic-core.h (emit_diagnostic): New decl.\n+\t* diagnostic.c (emit_diagnostic): New overload, taking a\n+\trich_location *.\n+\n 2018-11-30  David Malcolm  <dmalcolm@redhat.com>\n \n \t* pretty-print.c (class selftest::test_pretty_printer): New"}, {"sha": "dbe4ad30bdbef62208c494a93cfcb20a18ba252e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ba109cecce1cf6598380908a1d6b00e0360b85d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ba109cecce1cf6598380908a1d6b00e0360b85d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8ba109cecce1cf6598380908a1d6b00e0360b85d", "patch": "@@ -1,3 +1,10 @@\n+2018-11-30  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* typeck2.c: Include \"gcc-rich-location.h\".\n+\t(cxx_incomplete_type_diagnostic): When complaining about possibly\n+\tmissing parens, add a fix-it hint if the member function takes no\n+\tadditional params.\n+\n 2018-11-30  James Norris  <jnorris@codesourcery.com>\n \n \t* parser.c (cp_parser_oacc_enter_exit_data): Use existing local"}, {"sha": "64e36efd17e60d8b78b56763f776a1e31eed2fc7", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ba109cecce1cf6598380908a1d6b00e0360b85d/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ba109cecce1cf6598380908a1d6b00e0360b85d/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=8ba109cecce1cf6598380908a1d6b00e0360b85d", "patch": "@@ -32,6 +32,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"stor-layout.h\"\n #include \"varasm.h\"\n #include \"intl.h\"\n+#include \"gcc-rich-location.h\"\n \n static tree\n process_init_constructor (tree type, tree init, int nested,\n@@ -507,9 +508,16 @@ cxx_incomplete_type_diagnostic (location_t loc, const_tree value,\n \n \tif (DECL_FUNCTION_MEMBER_P (member)\n \t    && ! flag_ms_extensions)\n-\t  emit_diagnostic (diag_kind, loc, 0,\n-\t\t\t   \"invalid use of member function %qD \"\n-\t\t\t   \"(did you forget the %<()%> ?)\", member);\n+\t  {\n+\t    gcc_rich_location richloc (loc);\n+\t    /* If \"member\" has no arguments (other than \"this\"), then\n+\t       add a fix-it hint.  */\n+\t    if (type_num_arguments (TREE_TYPE (member)) == 1)\n+\t      richloc.add_fixit_insert_after (\"()\");\n+\t    emit_diagnostic (diag_kind, &richloc, 0,\n+\t\t\t     \"invalid use of member function %qD \"\n+\t\t\t     \"(did you forget the %<()%> ?)\", member);\n+\t  }\n \telse\n \t  emit_diagnostic (diag_kind, loc, 0,\n \t\t\t   \"invalid use of member %qD \""}, {"sha": "6c40f26acb5ad71c85ecef7118d1c846452c1ee4", "filename": "gcc/diagnostic-core.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ba109cecce1cf6598380908a1d6b00e0360b85d/gcc%2Fdiagnostic-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ba109cecce1cf6598380908a1d6b00e0360b85d/gcc%2Fdiagnostic-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic-core.h?ref=8ba109cecce1cf6598380908a1d6b00e0360b85d", "patch": "@@ -105,6 +105,8 @@ extern void inform_n (location_t, unsigned HOST_WIDE_INT, const char *,\n extern void verbatim (const char *, ...) ATTRIBUTE_GCC_DIAG(1,2);\n extern bool emit_diagnostic (diagnostic_t, location_t, int,\n \t\t\t     const char *, ...) ATTRIBUTE_GCC_DIAG(4,5);\n+extern bool emit_diagnostic (diagnostic_t, rich_location *, int,\n+\t\t\t     const char *, ...) ATTRIBUTE_GCC_DIAG(4,5);\n extern bool emit_diagnostic_valist (diagnostic_t, location_t, int, const char *,\n \t\t\t\t    va_list *) ATTRIBUTE_GCC_DIAG (4,0);\n extern bool seen_error (void);"}, {"sha": "d97e9592f06a444b8163ef0103c46e9ad043c7e1", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ba109cecce1cf6598380908a1d6b00e0360b85d/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ba109cecce1cf6598380908a1d6b00e0360b85d/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=8ba109cecce1cf6598380908a1d6b00e0360b85d", "patch": "@@ -1200,6 +1200,20 @@ emit_diagnostic (diagnostic_t kind, location_t location, int opt,\n   return ret;\n }\n \n+/* As above, but for rich_location *.  */\n+\n+bool\n+emit_diagnostic (diagnostic_t kind, rich_location *richloc, int opt,\n+\t\t const char *gmsgid, ...)\n+{\n+  auto_diagnostic_group d;\n+  va_list ap;\n+  va_start (ap, gmsgid);\n+  bool ret = diagnostic_impl (richloc, opt, gmsgid, &ap, kind);\n+  va_end (ap);\n+  return ret;\n+}\n+\n /* Wrapper around diagnostic_impl taking a va_list parameter.  */\n \n bool"}, {"sha": "c5b551319ac158f1e1d8811ac2daee634e568959", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ba109cecce1cf6598380908a1d6b00e0360b85d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ba109cecce1cf6598380908a1d6b00e0360b85d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8ba109cecce1cf6598380908a1d6b00e0360b85d", "patch": "@@ -1,3 +1,7 @@\n+2018-11-30  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* g++.dg/parse/missing-parens-fixit.C: New test.\n+\n 2018-11-30  Michael Ploujnikov  <michael.ploujnikov@oracle.com>\n \n \t* gcc.dg/independent-cloneids-1.c: New test."}, {"sha": "a0fd7dd2511d4ead8c3637815094f2b5816031da", "filename": "gcc/testsuite/g++.dg/parse/missing-parens-fixit.C", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ba109cecce1cf6598380908a1d6b00e0360b85d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fmissing-parens-fixit.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ba109cecce1cf6598380908a1d6b00e0360b85d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fmissing-parens-fixit.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fmissing-parens-fixit.C?ref=8ba109cecce1cf6598380908a1d6b00e0360b85d", "patch": "@@ -0,0 +1,32 @@\n+// { dg-options \"-fdiagnostics-show-caret\" }\n+\n+class t1\n+{\n+public:\n+  double length () const { return m_length; }\n+  double area (double width) const { return m_length * width; }\n+\n+private:\n+  double m_length;\n+};\n+\n+bool test_1 (const t1 &inst)\n+{\n+  return inst.length > 0.0; // { dg-error \"did you forget the '\\\\(\\\\)'\" }\n+  /* We expect a fix-it hint.  */\n+  /* { dg-begin-multiline-output \"\" }\n+   return inst.length > 0.0;\n+          ~~~~~^~~~~~\n+                     ()\n+     { dg-end-multiline-output \"\" } */\n+}\n+\n+bool test_2 (const t1 &inst)\n+{\n+  return inst.area > 0.0; // { dg-error \"did you forget the '\\\\(\\\\)'\" }\n+  /* \"t1::area\" has additional params, so we don't expect a fix-it hint.  */\n+  /* { dg-begin-multiline-output \"\" }\n+   return inst.area > 0.0;\n+          ~~~~~^~~~\n+     { dg-end-multiline-output \"\" } */\n+}"}]}