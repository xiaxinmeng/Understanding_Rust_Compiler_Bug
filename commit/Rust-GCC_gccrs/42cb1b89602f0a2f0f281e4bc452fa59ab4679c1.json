{"sha": "42cb1b89602f0a2f0f281e4bc452fa59ab4679c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDJjYjFiODk2MDJmMGEyZjBmMjgxZTRiYzQ1MmZhNTlhYjQ2NzljMQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-12-16T12:26:29Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-12-16T12:26:29Z"}, "message": "tree-vect-transform.c (conservative_cost_threshold): Add missing space to \"not vectorized\" message.\n\n        * tree-vect-transform.c (conservative_cost_threshold): Add missing\n        space to \"not vectorized\" message.\n\nFrom-SVN: r130989", "tree": {"sha": "6630f53d4e66a34a321b305d138da62d35ac69b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6630f53d4e66a34a321b305d138da62d35ac69b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/42cb1b89602f0a2f0f281e4bc452fa59ab4679c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42cb1b89602f0a2f0f281e4bc452fa59ab4679c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42cb1b89602f0a2f0f281e4bc452fa59ab4679c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42cb1b89602f0a2f0f281e4bc452fa59ab4679c1/comments", "author": null, "committer": null, "parents": [{"sha": "0a164a3cd0f70bacdfcdd03685748db4eff5ba1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a164a3cd0f70bacdfcdd03685748db4eff5ba1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a164a3cd0f70bacdfcdd03685748db4eff5ba1d"}], "stats": {"total": 33, "additions": 17, "deletions": 16}, "files": [{"sha": "e722c629847851ce3ae1fe0f824d9bd6839f428e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42cb1b89602f0a2f0f281e4bc452fa59ab4679c1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42cb1b89602f0a2f0f281e4bc452fa59ab4679c1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=42cb1b89602f0a2f0f281e4bc452fa59ab4679c1", "patch": "@@ -1,3 +1,8 @@\n+2007-12-16  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* tree-vect-transform.c (conservative_cost_threshold): Add missing\n+\tspace to \"not vectorized\" message.\n+\n 2007-12-16  Richard Sandiford  <rsandifo@nildram.co.uk>\n \n \tPR rtl-optimization/34415\n@@ -33,8 +38,7 @@\n \t(cris_print_base): Add gcc_assert for post_inc on CRIS_ACR_REGNUM.\n \t(cris_print_operand) <case 'Z', case 'u'>: New cases.\n \t<case REG of case 'H'>: Allow for CRIS_SRP_REGNUM.\n-\t(cris_reload_address_legitimized): Always return false for\n-\tTARGET_V32.\n+\t(cris_reload_address_legitimized): Always return false for TARGET_V32.\n \t(cris_register_move_cost): New function, guts from\n \tREGISTER_MOVE_COST adjusted for CRIS v32.\n \t(cris_normal_notice_update_cc): New function split out from...\n@@ -67,8 +71,7 @@\n \t(CRIS_SUBTARGET_DEFAULT_ARCH): New macro, MASK_AVOID_GOTPLT for\n \tv32, 0 otherwise.\n \t(CRIS_CPP_SUBTARGET_SPEC, CRIS_CC1_SUBTARGET_SPEC,\n-\tCRIS_ASM_SUBTARGET_SPEC): Adjust for different\n-\tTARGET_CPU_DEFAULT.\n+\tCRIS_ASM_SUBTARGET_SPEC): Adjust for different TARGET_CPU_DEFAULT.\n \t(CRIS_SUBTARGET_DEFAULT): Add CRIS_SUBTARGET_DEFAULT_ARCH.\n \t* config/cris/cris.h: Sanity-check TARGET_CPU_DEFAULT for contents.\n \t(CRIS_DEFAULT_TUNE, CRIS_ARCH_CPP_DEFAULT)\n@@ -91,8 +94,8 @@\n \t(REG_ALLOC_ORDER_V32): New macro.\n \t(HARD_REGNO_MODE_OK): Do not allow larger-than-register-size modes\n \tinto CRIS_ACR_REGNUM.\n-\t(enum reg_class): New classes ACR_REGS, SPEC_ACR_REGS,\n-\tGENNONACR_REGS and SPEC_GENNONACR_REGS.\n+\t(enum reg_class): New classes ACR_REGS, SPEC_ACR_REGS, GENNONACR_REGS\n+\tand SPEC_GENNONACR_REGS.\n \t(REG_CLASS_NAMES, REG_CLASS_CONTENTS): Adjust for new classes.\n \t(REGNO_REG_CLASS): Give ACR_REGS for CRIS_ACR_REGNUM.\n \t(MODE_CODE_BASE_REG_CLASS): Define, give for OCODE POST_INC\n@@ -157,8 +160,7 @@\n \t(\"*movdi_insn_non_v32\"): New pattern, replacing \"*movdi_insn\" and\n \tdefine_split.\n \t(define_split for DI move): Match CRIS v32 only.\n-\t(\"*movsi_got_load\", \"*movsi_internal\", \"*addi\"): Adjust for CRIS\n-\tv32.\n+\t(\"*movsi_got_load\", \"*movsi_internal\", \"*addi\"): Adjust for CRIS v32.\n \t(\"load_multiple\", \"store_multiple\", \"*addsbw_v32\", \"*addubw_v32\")\n \t(\"*adds<mode>_v32\", \"*addu<mode>_v32\", \"*bound<mode>_v32\")\n \t(\"*casesi_jump_v32\", \"*expanded_andsi_v32\", \"*expanded_andhi_v32\")\n@@ -186,16 +188,14 @@\n \t(op-split-swapped, op-split-swapped-rx=rz): Make non-v32 only.\n \t(\"dstep_mul\", \"xorsi3\", \"one_cmplsi2\", \"<shlr>si3\")\n \t(\"*expanded_<shlr><mode>\", \"*<shlr><mode>_lowpart\", \"ashl<mode>3\")\n-\t(\"*ashl<mode>_lowpart\", \"abssi2\", \"clzsi2\", \"bswapsi2\", \"cris_swap_bits\"): Specify \"noov32\" for\n-\tattr \"cc\".\n-\t(\"<su>mulsi3_highpart\"): Ditto.  Correct operand 0 to\n-\tregister_operand.\n+\t(\"*ashl<mode>_lowpart\", \"abssi2\", \"clzsi2\", \"bswapsi2\")\n+\t(\"cris_swap_bits\"): Specify \"noov32\" for attr \"cc\".\n+\t(\"<su>mulsi3_highpart\"): Ditto.  Correct operand 0 to register_operand.\n \t(\"andqi3\"): Make define_expand.\n \t(\"*return_expanded\"): For attr \"slottable\", change from \"has_slot\"\n \tto \"has_return_slot\".\n \t(\"cris_casesi_non_v32\"): New pattern, old contents of \"casesi\".\n-\t(\"casesi\"): Divert into \"cris_casesi_v32\" and\n-\t\"cris_casesi_non_v32\".\n+\t(\"casesi\"): Divert into \"cris_casesi_v32\" and \"cris_casesi_non_v32\".\n \t(moversideqi, movemsideqi, mover2side): Require\n \tTARGET_SIDE_EFFECT_PREFIXES.\n \t(gotplt-to-plt, gotplt-to-plt-side): Change from CRIS_UNSPEC_PLT\n@@ -254,7 +254,7 @@\n 2007-12-14  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/sse.md (sse4_2_pcmpestr): Use reg_not_xmm0_operand\n-\tconstraint for operand2.  Use nonimm_not_xmm0_operand constraint\n+\tconstraint for operand 2.  Use nonimm_not_xmm0_operand constraint\n \tfor operand 4.  Update arguments in the call to\n \tgen_sse4_2_pcmpestr_cconly.\n \t(sse_4_2_pcmpestr_cconly): Renumber insn operands and update insn\n@@ -263,6 +263,7 @@\n \tUse nonimm_not_xmm0_operand constraint for operand 3.  Update\n \targuments in the call to gen_sse4_2_pcmpistr_cconly.\n \t(sse_4_2_pcmpistr_cconly): Renumber insn operands and update insn\n+\ttemplate accordingly.\n \n 2007-12-14  Richard Guenther  <rguenther@suse.de>\n "}, {"sha": "09e91b98fddfccca3ffecac3ddd92262a3091c4a", "filename": "gcc/tree-vect-transform.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42cb1b89602f0a2f0f281e4bc452fa59ab4679c1/gcc%2Ftree-vect-transform.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42cb1b89602f0a2f0f281e4bc452fa59ab4679c1/gcc%2Ftree-vect-transform.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-transform.c?ref=42cb1b89602f0a2f0f281e4bc452fa59ab4679c1", "patch": "@@ -6552,7 +6552,7 @@ conservative_cost_threshold (loop_vec_info loop_vinfo,\n     th = (unsigned) min_profitable_iters;\n \n   if (vect_print_dump_info (REPORT_UNVECTORIZED_LOOPS))\t      \n-    fprintf (vect_dump, \"not vectorized: vectorization may not be\"\n+    fprintf (vect_dump, \"not vectorized: vectorization may not be \"\n \t     \"profitable.\");\n   \n   if (th && vect_print_dump_info (REPORT_DETAILS))"}]}