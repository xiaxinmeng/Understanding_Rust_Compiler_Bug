{"sha": "fb23b69e140ca2448ae7360fe4a71e81e6101aac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmIyM2I2OWUxNDBjYTI0NDhhZTczNjBmZTRhNzFlODFlNjEwMWFhYw==", "commit": {"author": {"name": "Fabien Ch\u00eane", "email": "fabien@gcc.gnu.org", "date": "2013-08-01T19:24:37Z"}, "committer": {"name": "Peter Bergner", "email": "bergner@gcc.gnu.org", "date": "2013-08-01T19:24:37Z"}, "message": "re PR c++/54537 (undiagnosed using-declaration conflicting with used function)\n\ngcc/cp/\n        PR c++/54537\n        * cp-tree.h: Check OVL_USED with OVERLOAD_CHECK.\n        * name-lookup.c (do_nonmember_using_decl): Make sure we have an\n\tOVERLOAD before calling OVL_USED. Call diagnose_name_conflict\n\tinstead of issuing an error without mentioning the conflicting\n\tdeclaration.\n\nlibstdc++-v3/\n        PR c++/54537\n\t* include/tr1/cmath: Remove pow(double,double) overload, remove a\n\tduplicated comment about DR 550. Add a comment to explain the\n\tissue.\n\t* testsuite/tr1/8_c_compatibility/cmath/pow_cmath.cc: New.\n\ngcc/testsuite/\n        PR c++/54537\n        * g++.dg/overload/using3.C: New.\n\t* g++.dg/overload/using2.C: Adjust.\n\t* g++.dg/lookup/using9.C: Likewise.\n\nCo-Authored-By: Peter Bergner <bergner@vnet.ibm.com>\n\nFrom-SVN: r201414", "tree": {"sha": "cd60a00f627c3f9f0d7d19e369f422b4c4290ae0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd60a00f627c3f9f0d7d19e369f422b4c4290ae0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb23b69e140ca2448ae7360fe4a71e81e6101aac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb23b69e140ca2448ae7360fe4a71e81e6101aac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb23b69e140ca2448ae7360fe4a71e81e6101aac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb23b69e140ca2448ae7360fe4a71e81e6101aac/comments", "author": null, "committer": null, "parents": [{"sha": "12123452e45937b341f187716a2a8343f0908465", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12123452e45937b341f187716a2a8343f0908465", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12123452e45937b341f187716a2a8343f0908465"}], "stats": {"total": 114, "additions": 96, "deletions": 18}, "files": [{"sha": "e542959947f44613d2abadb6e00f8a4a1d9f4317", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb23b69e140ca2448ae7360fe4a71e81e6101aac/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb23b69e140ca2448ae7360fe4a71e81e6101aac/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=fb23b69e140ca2448ae7360fe4a71e81e6101aac", "patch": "@@ -1,3 +1,12 @@\n+2013-08-01  Fabien Ch\u00eane  <fabien@gcc.gnu.org>\n+\n+\tPR c++/54537\n+\t* cp-tree.h: Check OVL_USED with OVERLOAD_CHECK.\n+\t* name-lookup.c (do_nonmember_using_decl): Make sure we have an\n+\tOVERLOAD before calling OVL_USED. Call diagnose_name_conflict\n+\tinstead of issuing an error without mentioning the conflicting\n+\tdeclaration.\n+\n 2013-07-31  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* parser.c (cp_parser_sizeof_pack): Check cp_parser_identifier"}, {"sha": "859f80518586ecfcd890136aeb2fa4fb583122d5", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb23b69e140ca2448ae7360fe4a71e81e6101aac/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb23b69e140ca2448ae7360fe4a71e81e6101aac/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=fb23b69e140ca2448ae7360fe4a71e81e6101aac", "patch": "@@ -346,7 +346,7 @@ typedef struct ptrmem_cst * ptrmem_cst_t;\n /* If set, this was imported in a using declaration.\n    This is not to confuse with being used somewhere, which\n    is not important for this node.  */\n-#define OVL_USED(NODE)\t\tTREE_USED (NODE)\n+#define OVL_USED(NODE)\t\tTREE_USED (OVERLOAD_CHECK (NODE))\n /* If set, this OVERLOAD was created for argument-dependent lookup\n    and can be freed afterward.  */\n #define OVL_ARG_DEPENDENT(NODE) TREE_LANG_FLAG_0 (OVERLOAD_CHECK (NODE))"}, {"sha": "0fe0246913882a4b8d6073a3efd09d7faec94090", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb23b69e140ca2448ae7360fe4a71e81e6101aac/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb23b69e140ca2448ae7360fe4a71e81e6101aac/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=fb23b69e140ca2448ae7360fe4a71e81e6101aac", "patch": "@@ -2316,8 +2316,7 @@ push_overloaded_decl_1 (tree decl, int flags, bool is_friend)\n \t\t  && compparms (TYPE_ARG_TYPES (TREE_TYPE (fn)),\n \t\t\t\tTYPE_ARG_TYPES (TREE_TYPE (decl)))\n \t\t  && ! decls_match (fn, decl))\n-\t\terror (\"%q#D conflicts with previous using declaration %q#D\",\n-\t\t       decl, fn);\n+\t\tdiagnose_name_conflict (decl, fn);\n \n \t      dup = duplicate_decls (decl, fn, is_friend);\n \t      /* If DECL was a redeclaration of FN -- even an invalid\n@@ -2549,7 +2548,7 @@ do_nonmember_using_decl (tree scope, tree name, tree oldval, tree oldtype,\n \t\t  if (new_fn == old_fn)\n \t\t    /* The function already exists in the current namespace.  */\n \t\t    break;\n-\t\t  else if (OVL_USED (tmp1))\n+\t\t  else if (TREE_CODE (tmp1) == OVERLOAD && OVL_USED (tmp1))\n \t\t    continue; /* this is a using decl */\n \t\t  else if (compparms (TYPE_ARG_TYPES (TREE_TYPE (new_fn)),\n \t\t\t\t      TYPE_ARG_TYPES (TREE_TYPE (old_fn))))\n@@ -2564,7 +2563,7 @@ do_nonmember_using_decl (tree scope, tree name, tree oldval, tree oldtype,\n \t\t\tbreak;\n \t\t      else\n \t\t\t{\n-\t\t\t  error (\"%qD is already declared in this scope\", name);\n+\t\t\t  diagnose_name_conflict (new_fn, old_fn);\n \t\t\t  break;\n \t\t\t}\n \t\t    }"}, {"sha": "c8fdfa47e9ed7cba13614a00ecfd6c536a3137b4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb23b69e140ca2448ae7360fe4a71e81e6101aac/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb23b69e140ca2448ae7360fe4a71e81e6101aac/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fb23b69e140ca2448ae7360fe4a71e81e6101aac", "patch": "@@ -1,3 +1,11 @@\n+2013-08-01  Fabien Ch\u00eane  <fabien@gcc.gnu.org>\n+\t    Peter Bergner  <bergner@vnet.ibm.com>\n+\n+\tPR c++/54537\n+\t* g++.dg/overload/using3.C: New.\n+\t* g++.dg/overload/using2.C: Adjust.\n+\t* g++.dg/lookup/using9.C: Likewise.\n+\n 2013-08-01  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* gcc.target/arm/pr46972-2.c: New test."}, {"sha": "fd3e788638eb60ebd098973c6a40076625172d9a", "filename": "gcc/testsuite/g++.dg/lookup/using9.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb23b69e140ca2448ae7360fe4a71e81e6101aac/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb23b69e140ca2448ae7360fe4a71e81e6101aac/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing9.C?ref=fb23b69e140ca2448ae7360fe4a71e81e6101aac", "patch": "@@ -21,11 +21,11 @@ void h()\n   f('h');\n   f(1);         // { dg-error \"ambiguous\" }\n   // { dg-message \"candidate\" \"candidate note\" { target *-*-* } 22 }\n-  void f(int);  // { dg-error \"previous using declaration\" }\n+  void f(int);  // { dg-error \"previous declaration\" }\n }\n \n void m()\n {\n   void f(int);\n-  using B::f;   // { dg-error \"already declared\" }\n+  using B::f;   // { dg-error \"previous declaration\" }\n }"}, {"sha": "d1824548ad5a30975aa3f8b23e150681f0c4ad0b", "filename": "gcc/testsuite/g++.dg/overload/using2.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb23b69e140ca2448ae7360fe4a71e81e6101aac/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fusing2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb23b69e140ca2448ae7360fe4a71e81e6101aac/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fusing2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fusing2.C?ref=fb23b69e140ca2448ae7360fe4a71e81e6101aac", "patch": "@@ -45,7 +45,7 @@ using std::C1;\n   extern \"C\" void exit (int) throw ();\n   extern \"C\" void *malloc (__SIZE_TYPE__) throw () __attribute__((malloc));\n \n-  void abort (void) throw ();\n+  void abort (void) throw (); // { dg-message \"previous\" }\n   void _exit (int) throw (); // { dg-error \"conflicts\" \"conflicts\" }\n                              // { dg-message \"void _exit\" \"_exit\" { target *-*-* } 49 }\n \n@@ -54,14 +54,14 @@ using std::C1;\n                            // { dg-message \"void C1\" \"C1\" { target *-*-* } 53 }\n \n   extern \"C\" void c2 (void) throw ();\n-  void C2 (void) throw ();\n+  void C2 (void) throw (); // { dg-message \"previous\" }\n \n   int C3 (int) throw ();\n \n using std::malloc;\n-using std::abort; // { dg-error \"already declared\" }\n+using std::abort; // { dg-error \"conflicts\" }\n using std::c2;\n-using std::C2; // { dg-error \"already declared\" }\n+using std::C2; // { dg-error \"conflicts\" }\n \n using std::c3; using other::c3;\n using std::C3; using other::C3;"}, {"sha": "38344e48a9d25ad093f09ff54f842e769ea683a7", "filename": "gcc/testsuite/g++.dg/overload/using3.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb23b69e140ca2448ae7360fe4a71e81e6101aac/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fusing3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb23b69e140ca2448ae7360fe4a71e81e6101aac/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fusing3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fusing3.C?ref=fb23b69e140ca2448ae7360fe4a71e81e6101aac", "patch": "@@ -0,0 +1,16 @@\n+// { dg-do compile }\n+\n+namespace a\n+{\n+  void f(int);\n+}\n+\n+namespace b\n+{\n+  void f(int); // { dg-message \"previous\" }\n+  void g()\n+  {\n+    f (3);\n+  }\n+  using a::f; // { dg-error \"conflicts\" }\n+}"}, {"sha": "4eea924f028c087f4808667c7e75da1ad10f7e95", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb23b69e140ca2448ae7360fe4a71e81e6101aac/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb23b69e140ca2448ae7360fe4a71e81e6101aac/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=fb23b69e140ca2448ae7360fe4a71e81e6101aac", "patch": "@@ -1,3 +1,11 @@\n+2013-08-01  Fabien Ch\u00eane  <fabien@gcc.gnu.org>\n+\n+\tPR c++/54537\n+\t* include/tr1/cmath: Remove pow(double,double) overload, remove a\n+\tduplicated comment about DR 550. Add a comment to explain the\n+\tissue.\n+\t* testsuite/tr1/8_c_compatibility/cmath/pow_cmath.cc: New.\n+\n 2013-07-31  Tim Shen  <timshen91@gmail.com>\n \n \tThompson matcher refactored. Fix grouping problem."}, {"sha": "6e63e56b45ecb86118968b4cd6686bd37426c460", "filename": "libstdc++-v3/include/tr1/cmath", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb23b69e140ca2448ae7360fe4a71e81e6101aac/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcmath", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb23b69e140ca2448ae7360fe4a71e81e6101aac/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcmath", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcmath?ref=fb23b69e140ca2448ae7360fe4a71e81e6101aac", "patch": "@@ -846,10 +846,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     nexttoward(_Tp __x, long double __y)\n     { return __builtin_nexttoward(__x, __y); }\n \n-  // DR 550. What should the return type of pow(float,int) be?\n-  // NB: C++0x and TR1 != C++03.\n-  //   using std::pow;\n-\n   inline float\n   remainder(float __x, float __y)\n   { return __builtin_remainderf(__x, __y); }\n@@ -985,9 +981,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // DR 550. What should the return type of pow(float,int) be?\n   // NB: C++0x and TR1 != C++03.\n-  inline double\n-  pow(double __x, double __y)\n-  { return std::pow(__x, __y); }\n+\n+  // The std::tr1::pow(double, double) overload cannot be provided\n+  // here, because it would clash with ::pow(double,double) declared\n+  // in <math.h>, if <tr1/math.h> is included at the same time (raised\n+  // by the fix of PR c++/54537). It is not possible either to use the\n+  // using-declaration 'using ::pow;' here, because if the user code\n+  // has a 'using std::pow;', it would bring the pow(*,int) averloads\n+  // in the tr1 namespace, which is undesirable. Consequently, the\n+  // solution is to forward std::tr1::pow(double,double) to\n+  // std::pow(double,double) via the templatized version below. See\n+  // the discussion about this issue here:\n+  // http://gcc.gnu.org/ml/gcc-patches/2012-09/msg01278.html\n \n   inline float\n   pow(float __x, float __y)"}, {"sha": "5775450925e2fb8ce3aa6d2f8a88ca60bc09899e", "filename": "libstdc++-v3/testsuite/tr1/8_c_compatibility/cmath/pow_cmath.cc", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb23b69e140ca2448ae7360fe4a71e81e6101aac/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcmath%2Fpow_cmath.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb23b69e140ca2448ae7360fe4a71e81e6101aac/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcmath%2Fpow_cmath.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcmath%2Fpow_cmath.cc?ref=fb23b69e140ca2448ae7360fe4a71e81e6101aac", "patch": "@@ -0,0 +1,33 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <cmath>\n+using std::pow;\n+#include <tr1/cmath>\n+#include <testsuite_tr1.h>\n+\n+void \n+test01()\n+{\n+  using namespace __gnu_test;\n+\n+  float x = 2080703.375F;\n+  check_ret_type<float>(std::pow(x, 2));\n+  check_ret_type<double>(std::tr1::pow(x, 2));\n+}"}]}