{"sha": "589ca5cb100f0975f12890c95ea2b29301bb4294", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTg5Y2E1Y2IxMDBmMDk3NWYxMjg5MGM5NWVhMmIyOTMwMWJiNDI5NA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2000-07-27T17:25:14Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2000-07-27T17:25:14Z"}, "message": "Put phi nodes after NOTE_INSN_BASIC_BLOCK.\n\n\t* rtl.h (NOTE_INSN_BASIC_BLOCK_P): New macro.\n\t* bb-reorder.c (get_next_bb_note): Use NOTE_INSN_BASIC_BLOCK_P.\n\t(get_prev_bb_note): Likewise.\n\t(remove_scope_notes): Likewise.\n\t* flow.c (commit_one_edge_insertion): Likewise.\n\t(merge_blocks_nomove): Likewise.\n\t(verify_flow_info): Likewise.\n\t* gcse.c (insert_insn_end_bb): Likewise.\n\t* reg-stack.c (emit_swap_insn): Likewise.\n\t* ssa.c (first_insn_after_basic_block_note): New function.\n\t(insert_phi_node): Use it.\n\t(rename_block): Likewise.\n\t(eliminate_phi): Likewise.\n\t(make_regs_equivalent_over_bad_edges): Likewise.\n\t(make_equivalent_phi_alternatives_equivalent): Likewise.\n\t(for_each_successor_phi): Likewise.\n\t(convert_from_ssa): Modify phi-node deletion algorithm.\n\nFrom-SVN: r35296", "tree": {"sha": "f622ad1b9d2f4d839d3052a0f4fc42b6ebf07329", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f622ad1b9d2f4d839d3052a0f4fc42b6ebf07329"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/589ca5cb100f0975f12890c95ea2b29301bb4294", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/589ca5cb100f0975f12890c95ea2b29301bb4294", "html_url": "https://github.com/Rust-GCC/gccrs/commit/589ca5cb100f0975f12890c95ea2b29301bb4294", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/589ca5cb100f0975f12890c95ea2b29301bb4294/comments", "author": null, "committer": null, "parents": [{"sha": "2d97a71922dc879bf7ba11b5543ac4de216063e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d97a71922dc879bf7ba11b5543ac4de216063e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d97a71922dc879bf7ba11b5543ac4de216063e4"}], "stats": {"total": 131, "additions": 72, "deletions": 59}, "files": [{"sha": "bd23e129e25bd06d8abfb1cd807482c85f7fb12c", "filename": "gcc/bb-reorder.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/589ca5cb100f0975f12890c95ea2b29301bb4294/gcc%2Fbb-reorder.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/589ca5cb100f0975f12890c95ea2b29301bb4294/gcc%2Fbb-reorder.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbb-reorder.c?ref=589ca5cb100f0975f12890c95ea2b29301bb4294", "patch": "@@ -777,8 +777,7 @@ get_next_bb_note (x)\n {\n   while (x)\n     {\n-      if (GET_CODE (x) == NOTE\n-\t  && NOTE_LINE_NUMBER (x) == NOTE_INSN_BASIC_BLOCK)\n+      if (NOTE_INSN_BASIC_BLOCK_P (x))\n \treturn x;\n       x = NEXT_INSN (x);\n     }\n@@ -792,8 +791,7 @@ get_prev_bb_note (x)\n {\n   while (x)\n     {\n-      if (GET_CODE (x) == NOTE\n-\t  && NOTE_LINE_NUMBER (x) == NOTE_INSN_BASIC_BLOCK)\n+      if (NOTE_INSN_BASIC_BLOCK_P (x))\n \treturn x;\n       x = PREV_INSN (x);\n     }\n@@ -1050,8 +1048,7 @@ remove_scope_notes ()\n   for (x = get_insns (); x; x = next)\n     {\n       next = NEXT_INSN (x);\n-      if (GET_CODE (x) == NOTE\n-\t  && NOTE_LINE_NUMBER (x) == NOTE_INSN_BASIC_BLOCK)\n+      if (NOTE_INSN_BASIC_BLOCK_P (x))\n \tcurrbb = NOTE_BASIC_BLOCK (x);\n \n       if (GET_CODE (x) == NOTE"}, {"sha": "a8f6061aedfaf150d84bb05e83dfef996859de8e", "filename": "gcc/flow.c", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/589ca5cb100f0975f12890c95ea2b29301bb4294/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/589ca5cb100f0975f12890c95ea2b29301bb4294/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=589ca5cb100f0975f12890c95ea2b29301bb4294", "patch": "@@ -1673,8 +1673,7 @@ commit_one_edge_insertion (e)\n       tmp = bb->head;\n       if (GET_CODE (tmp) == CODE_LABEL)\n \ttmp = NEXT_INSN (tmp);\n-      if (GET_CODE (tmp) == NOTE\n-\t  && NOTE_LINE_NUMBER (tmp) == NOTE_INSN_BASIC_BLOCK)\n+      if (NOTE_INSN_BASIC_BLOCK_P (tmp))\n \ttmp = NEXT_INSN (tmp);\n       if (tmp == bb->head)\n \tbefore = tmp;\n@@ -2164,8 +2163,7 @@ merge_blocks_nomove (a, b)\n     }\n \n   /* Delete the basic block note.  */\n-  if (GET_CODE (b_head) == NOTE \n-      && NOTE_LINE_NUMBER (b_head) == NOTE_INSN_BASIC_BLOCK)\n+  if (NOTE_INSN_BASIC_BLOCK_P (b_head))\n     {\n       if (b_head == b_end)\n \tb_empty = 1;\n@@ -6471,9 +6469,7 @@ verify_flow_info ()\n \t    }\n \t  x = NEXT_INSN (x);\n \t}\n-      if (GET_CODE (x) != NOTE\n-\t  || NOTE_LINE_NUMBER (x) != NOTE_INSN_BASIC_BLOCK\n-\t  || NOTE_BASIC_BLOCK (x) != bb)\n+      if (!NOTE_INSN_BASIC_BLOCK_P (x) || NOTE_BASIC_BLOCK (x) != bb)\n \t{\n \t  error (\"NOTE_INSN_BASIC_BLOCK is missing for block %d\\n\",\n \t\t bb->index);\n@@ -6489,8 +6485,7 @@ verify_flow_info ()\n \t  x = NEXT_INSN (x);\n \t  while (x)\n \t    {\n-\t      if (GET_CODE (x) == NOTE\n-\t\t  && NOTE_LINE_NUMBER (x) == NOTE_INSN_BASIC_BLOCK)\n+\t      if (NOTE_INSN_BASIC_BLOCK_P (x))\n \t\t{\n \t\t  error (\"NOTE_INSN_BASIC_BLOCK %d in the middle of basic block %d\",\n \t\t\t INSN_UID (x), bb->index);\n@@ -6518,8 +6513,7 @@ verify_flow_info ()\n   x = rtx_first;\n   while (x)\n     {\n-      if (GET_CODE (x) == NOTE\n-\t  && NOTE_LINE_NUMBER (x) == NOTE_INSN_BASIC_BLOCK)\n+      if (NOTE_INSN_BASIC_BLOCK_P (x))\n \t{\n \t  basic_block bb = NOTE_BASIC_BLOCK (x);\n \t  num_bb_notes++;"}, {"sha": "ad475eeaf66555bcc4d3c10bc4247431f763b7b8", "filename": "gcc/gcse.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/589ca5cb100f0975f12890c95ea2b29301bb4294/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/589ca5cb100f0975f12890c95ea2b29301bb4294/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=589ca5cb100f0975f12890c95ea2b29301bb4294", "patch": "@@ -4331,8 +4331,7 @@ insert_insn_end_bb (expr, bb, pre)\n \t the insn in the wrong basic block.  In that case, put the insn\n \t after the CODE_LABEL.  Also, respect NOTE_INSN_BASIC_BLOCK.  */\n       while (GET_CODE (insn) == CODE_LABEL\n-\t     || (GET_CODE (insn) == NOTE\n-\t\t && NOTE_LINE_NUMBER (insn) == NOTE_INSN_BASIC_BLOCK))\n+\t     || NOTE_INSN_BASIC_BLOCK_P (insn))\n \tinsn = NEXT_INSN (insn);\n \n       new_insn = emit_block_insn_before (pat, insn, BASIC_BLOCK (bb));"}, {"sha": "8f0b50e18d9c1457cbb819db8ed6d7b4951ef3c8", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/589ca5cb100f0975f12890c95ea2b29301bb4294/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/589ca5cb100f0975f12890c95ea2b29301bb4294/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=589ca5cb100f0975f12890c95ea2b29301bb4294", "patch": "@@ -978,8 +978,7 @@ emit_swap_insn (insn, regstack, reg)\n       while (tmp != limit)\n \t{\n \t  if (GET_CODE (tmp) == CODE_LABEL\n-\t      || (GET_CODE (tmp) == NOTE\n-\t\t  && NOTE_LINE_NUMBER (tmp) == NOTE_INSN_BASIC_BLOCK)\n+\t      || NOTE_INSN_BASIC_BLOCK_P (tmp)\n \t      || (GET_CODE (tmp) == INSN\n \t\t  && stack_regs_mentioned (tmp)))\n \t    {"}, {"sha": "4351712c09df847d62139da6c1fa1b4f65e9ac22", "filename": "gcc/rtl.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/589ca5cb100f0975f12890c95ea2b29301bb4294/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/589ca5cb100f0975f12890c95ea2b29301bb4294/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=589ca5cb100f0975f12890c95ea2b29301bb4294", "patch": "@@ -565,6 +565,11 @@ extern const char * const reg_note_name[];\n    Other kinds of NOTEs are identified by negative numbers here.  */\n #define NOTE_LINE_NUMBER(INSN) XCINT(INSN, 4, NOTE)\n \n+/* Nonzero if INSN is a note marking the beginning of a basic block.  */\n+#define NOTE_INSN_BASIC_BLOCK_P(INSN) \t\t\t\\\n+  (GET_CODE (INSN) == NOTE\t\t\t\t\\\n+   && NOTE_LINE_NUMBER (INSN) == NOTE_INSN_BASIC_BLOCK)\n+\n /* Codes that appear in the NOTE_LINE_NUMBER field\n    for kinds of notes that are not line numbers.\n "}, {"sha": "866d0c393d12b5a0fc406b61196c0e5b02aab5cc", "filename": "gcc/ssa.c", "status": "modified", "additions": 57, "deletions": 38, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/589ca5cb100f0975f12890c95ea2b29301bb4294/gcc%2Fssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/589ca5cb100f0975f12890c95ea2b29301bb4294/gcc%2Fssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fssa.c?ref=589ca5cb100f0975f12890c95ea2b29301bb4294", "patch": "@@ -98,6 +98,8 @@ struct rename_context;\n static inline rtx * phi_alternative\n   PARAMS ((rtx, int));\n \n+static rtx first_insn_after_basic_block_note PARAMS ((basic_block));\n+\n static int remove_phi_alternative\n   PARAMS ((rtx, int));\n static void simplify_to_immediate_dominators \n@@ -449,6 +451,28 @@ compute_iterated_dominance_frontiers (idfs, frontiers, evals, nregs)\n     }\n }\n \n+/* Return the INSN immediately following the NOTE_INSN_BASIC_BLOCK\n+   note associated with the BLOCK.  */\n+\n+static rtx\n+first_insn_after_basic_block_note (block)\n+     basic_block block;\n+{\n+  rtx insn;\n+\n+  /* Get the first instruction in the block.  */\n+  insn = block->head;\n+\n+  if (insn == NULL_RTX)\n+    return NULL_RTX;\n+  if (GET_CODE (insn) == CODE_LABEL)\n+    insn = NEXT_INSN (insn);\n+  if (!NOTE_INSN_BASIC_BLOCK_P (insn))\n+    abort ();\n+\n+  return NEXT_INSN (insn);\n+}\n+\n \n /* Insert the phi nodes.  */\n \n@@ -461,6 +485,8 @@ insert_phi_node (regno, bb)\n   int npred, i;\n   rtvec vec;\n   rtx phi, reg;\n+  rtx insn;\n+  int end_p;\n \n   /* Find out how many predecessors there are.  */\n   for (e = b->pred, npred = 0; e; e = e->pred_next)\n@@ -488,10 +514,11 @@ insert_phi_node (regno, bb)\n   phi = gen_rtx_PHI (VOIDmode, vec);\n   phi = gen_rtx_SET (VOIDmode, reg, phi);\n \n-  if (GET_CODE (b->head) == CODE_LABEL)\n-    emit_insn_after (phi, b->head);\n-  else\n-    b->head = emit_insn_before (phi, b->head);\n+  insn = first_insn_after_basic_block_note (b);\n+  end_p = PREV_INSN (insn) == b->end;\n+  emit_insn_before (phi, insn);\n+  if (end_p)\n+    b->end = PREV_INSN (insn);\n }\n \n \n@@ -811,9 +838,7 @@ rename_block (bb, idom)\n       if (e->dest == EXIT_BLOCK_PTR)\n \tcontinue;\n \n-      insn = e->dest->head;\n-      if (GET_CODE (insn) == CODE_LABEL)\n-\tinsn = NEXT_INSN (insn);\n+      insn = first_insn_after_basic_block_note (e->dest);\n \n       while (PHI_NODE_P (insn))\n \t{\n@@ -1145,9 +1170,7 @@ eliminate_phi (e, reg_partition)\n \n   /* Collect an upper bound on the number of registers needing processing.  */\n \n-  insn = e->dest->head;\n-  if (GET_CODE (insn) == CODE_LABEL)\n-    insn = next_nonnote_insn (insn);\n+  insn = first_insn_after_basic_block_note (e->dest);\n \n   n_nodes = 0;\n   while (PHI_NODE_P (insn))\n@@ -1171,9 +1194,7 @@ eliminate_phi (e, reg_partition)\n   sbitmap_vector_zero (pred, n_nodes);\n   sbitmap_vector_zero (succ, n_nodes);\n \n-  insn = e->dest->head;\n-  if (GET_CODE (insn) == CODE_LABEL)\n-    insn = next_nonnote_insn (insn);\n+  insn = first_insn_after_basic_block_note (e->dest);\n \n   n_nodes = 0;\n   for (; PHI_NODE_P (insn); insn = next_nonnote_insn (insn))\n@@ -1271,11 +1292,10 @@ make_regs_equivalent_over_bad_edges (bb, reg_partition)\n {\n   int changed = 0;\n   basic_block b = BASIC_BLOCK (bb);\n-  rtx phi = b->head;\n+  rtx phi;\n \n   /* Advance to the first phi node.  */\n-  if (GET_CODE (phi) == CODE_LABEL)\n-    phi = next_nonnote_insn (phi);\n+  phi = first_insn_after_basic_block_note (b);\n \n   /* Scan all the phi nodes.  */\n   for (; \n@@ -1341,12 +1361,11 @@ make_equivalent_phi_alternatives_equivalent (bb, reg_partition)\n      partition reg_partition;\n {\n   int changed = 0;\n-  rtx phi = BLOCK_HEAD (bb);\n   basic_block b = BASIC_BLOCK (bb);\n+  rtx phi;\n \n   /* Advance to the first phi node.  */\n-  if (GET_CODE (phi) == CODE_LABEL)\n-    phi = next_nonnote_insn (phi);\n+  phi = first_insn_after_basic_block_note (b);\n \n   /* Scan all the phi nodes.  */\n   for (; \n@@ -1889,23 +1908,27 @@ convert_from_ssa()\n   for (bb = n_basic_blocks; --bb >= 0; )\n     {\n       rtx insn = BLOCK_HEAD (bb);\n-      int start = (GET_CODE (insn) != CODE_LABEL);\n \n-      if (! start)\n-\tinsn = next_nonnote_insn (insn);\n-      while (PHI_NODE_P (insn))\n+      while (1)\n \t{\n-\t  /* If a phi node is the last insn in the block, there must\n-\t     have been nothing else.  Set the block end to the block\n-\t     head.  */\n-\t  if (insn == BLOCK_END (bb))\n-\t    BLOCK_END (bb) = BLOCK_HEAD (bb);\n-\t  insn = delete_insn (insn);\n-\t  if (GET_CODE (insn) == NOTE)\n-\t    insn = next_nonnote_insn (insn);\n+\t  /* If this is a PHI node delete it.  */\n+\t  if (PHI_NODE_P (insn))\n+\t    {\n+\t      if (insn == BLOCK_END (bb))\n+\t\tBLOCK_END (bb) = PREV_INSN (insn);\n+\t      insn = delete_insn (insn);\n+\t    }\n+\t  /* Since all the phi nodes come at the beginning of the\n+\t     block, if we find an ordinary insn, we can stop looking\n+\t     for more phi nodes.  */\n+\t  else if (INSN_P (insn))\n+\t    break;\n+\t  /* If we've reached the end of the block, stop.  */\n+\t  else if (insn == BLOCK_END (bb))\n+\t    break;\n+\t  else \n+\t    insn = NEXT_INSN (insn);\n \t}\n-      if (start)\n-\tBLOCK_HEAD (bb) = insn;\n     }\n \n   /* Commit all the copy nodes needed to convert out of SSA form.  */\n@@ -1947,11 +1970,7 @@ for_each_successor_phi (bb, fn, data)\n \tcontinue;\n \n       /* Advance to the first non-label insn of the successor block.  */\n-      insn = successor->head;\n-      while (insn != NULL \n-\t     && (GET_CODE (insn) == CODE_LABEL\n-\t\t || GET_CODE (insn) == NOTE))\n-\tinsn = NEXT_INSN (insn);\n+      insn = first_insn_after_basic_block_note (successor);\n \n       if (insn == NULL)\n \tcontinue;"}]}