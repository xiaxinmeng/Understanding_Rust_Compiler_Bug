{"sha": "dd5af1d61761e9bf466cd64360e6321cde0a2c5f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGQ1YWYxZDYxNzYxZTliZjQ2NmNkNjQzNjBlNjMyMWNkZTBhMmM1Zg==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2016-12-06T22:15:31Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2016-12-06T22:15:31Z"}, "message": "re PR target/78658 (powerpc64le: ICE with -mcpu=power9 -Og)\n\n[gcc]\n2016-12-06  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\tPR target/78658\n\t* config/rs6000/rs6000.md (zero_extendqi<mode>2): Use ^ instead of\n\t?* constraints for the ISA 3.0 patterns, so the register allocator\n\tis more likely to allocate QImode/HImode to vector registers for\n\tconversion to floating point unless a reload is needed.\n\t(zero_extendhi<mode>2): Likewise.\n\t(float<QHI:mode><FP_ISA3:mode>2_internal): Properly deal with the\n\tfirst alternative which is converting QImode/HImode to floating\n\tpoint and the QImode/HImode value is in a vector register, and\n\tdoes not allocate the second pseudo register.  Remove zero\n\textending into traditional floating point registers, since the\n\tinstruction used only works on traditional altivec registers.\n\t(floatuns<QHI:mode><FP_ISA3:mode>2_internal): Likewise.\n\n[gcc/testsuite]\n2016-12-06  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\tPR target/78658\n\t* gcc.target/powerpc/pr78658.c: New test.\n\nFrom-SVN: r243320", "tree": {"sha": "4c41da816695dbf5956be6f8d316107c9af52dfe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c41da816695dbf5956be6f8d316107c9af52dfe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd5af1d61761e9bf466cd64360e6321cde0a2c5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd5af1d61761e9bf466cd64360e6321cde0a2c5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd5af1d61761e9bf466cd64360e6321cde0a2c5f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd5af1d61761e9bf466cd64360e6321cde0a2c5f/comments", "author": null, "committer": null, "parents": [{"sha": "00439aef2dbc4f95ba6e4926d5f27d0bb28edcec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00439aef2dbc4f95ba6e4926d5f27d0bb28edcec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00439aef2dbc4f95ba6e4926d5f27d0bb28edcec"}], "stats": {"total": 56, "additions": 49, "deletions": 7}, "files": [{"sha": "463dc1a37d9fda05e12f591f28dacc3d79b6cbb8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd5af1d61761e9bf466cd64360e6321cde0a2c5f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd5af1d61761e9bf466cd64360e6321cde0a2c5f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dd5af1d61761e9bf466cd64360e6321cde0a2c5f", "patch": "@@ -1,3 +1,19 @@\n+2016-12-06  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\tPR target/78658\n+\t* config/rs6000/rs6000.md (zero_extendqi<mode>2): Use ^ instead of\n+\t?* constraints for the ISA 3.0 patterns, so the register allocator\n+\tis more likely to allocate QImode/HImode to vector registers for\n+\tconversion to floating point unless a reload is needed.\n+\t(zero_extendhi<mode>2): Likewise.\n+\t(float<QHI:mode><FP_ISA3:mode>2_internal): Properly deal with the\n+\tfirst alternative which is converting QImode/HImode to floating\n+\tpoint and the QImode/HImode value is in a vector register, and\n+\tdoes not allocate the second pseudo register.  Remove zero\n+\textending into traditional floating point registers, since the\n+\tinstruction used only works on traditional altivec registers.\n+\t(floatuns<QHI:mode><FP_ISA3:mode>2_internal): Likewise.\n+\n 2016-12-06  David Malcolm  <dmalcolm@redhat.com>\n \n \t* config/i386/i386.c: Include print-rtl.h."}, {"sha": "4726d73d573df0d6a68560be27f5361ceb5b7400", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd5af1d61761e9bf466cd64360e6321cde0a2c5f/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd5af1d61761e9bf466cd64360e6321cde0a2c5f/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=dd5af1d61761e9bf466cd64360e6321cde0a2c5f", "patch": "@@ -738,8 +738,8 @@\n ;; complex forms.  Basic data transfer is done later.\n \n (define_insn \"zero_extendqi<mode>2\"\n-  [(set (match_operand:EXTQI 0 \"gpc_reg_operand\" \"=r,r,?*wJwK,?*wK\")\n-\t(zero_extend:EXTQI (match_operand:QI 1 \"reg_or_mem_operand\" \"m,r,Z,*wK\")))]\n+  [(set (match_operand:EXTQI 0 \"gpc_reg_operand\" \"=r,r,^wJwK,^wK\")\n+\t(zero_extend:EXTQI (match_operand:QI 1 \"reg_or_mem_operand\" \"m,r,Z,wK\")))]\n   \"\"\n   \"@\n    lbz%U1%X1 %0,%1\n@@ -791,7 +791,7 @@\n \n \n (define_insn \"zero_extendhi<mode>2\"\n-  [(set (match_operand:EXTHI 0 \"gpc_reg_operand\" \"=r,r,?*wJwK,?*wK\")\n+  [(set (match_operand:EXTHI 0 \"gpc_reg_operand\" \"=r,r,^wJwK,^wK\")\n \t(zero_extend:EXTHI (match_operand:HI 1 \"reg_or_mem_operand\" \"m,r,Z,wK\")))]\n   \"\"\n   \"@\n@@ -5413,11 +5413,13 @@\n \n   if (!MEM_P (input))\n     {\n+      rtx tmp = operands[3];\n       if (altivec_register_operand (input, <QHI:MODE>mode))\n \temit_insn (gen_extend<QHI:mode>di2 (di, input));\n+      else if (GET_CODE (tmp) == SCRATCH)\n+\temit_insn (gen_extend<QHI:mode>di2 (di, input));\n       else\n \t{\n-\t  rtx tmp = operands[3];\n \t  emit_insn (gen_extend<QHI:mode>di2 (tmp, input));\n \t  emit_move_insn (di, tmp);\n \t}\n@@ -5449,7 +5451,7 @@\n (define_insn_and_split \"*floatuns<QHI:mode><FP_ISA3:mode>2_internal\"\n   [(set (match_operand:FP_ISA3 0 \"vsx_register_operand\" \"=<Fv>,<Fv>,<Fv>\")\n \t(unsigned_float:FP_ISA3\n-\t (match_operand:QHI 1 \"reg_or_indexed_operand\" \"wJwK,r,Z\")))\n+\t (match_operand:QHI 1 \"reg_or_indexed_operand\" \"wK,r,Z\")))\n    (clobber (match_scratch:DI 2 \"=wK,wi,wJwK\"))\n    (clobber (match_scratch:DI 3 \"=X,r,X\"))]\n   \"TARGET_P9_VECTOR && TARGET_DIRECT_MOVE && TARGET_POWERPC64\n@@ -5467,8 +5469,13 @@\n   else\n     {\n       rtx tmp = operands[3];\n-      emit_insn (gen_zero_extend<QHI:mode>di2 (tmp, input));\n-      emit_move_insn (di, tmp);\n+      if (GET_CODE (tmp) == SCRATCH)\n+\temit_insn (gen_extend<QHI:mode>di2 (di, input));\n+      else\n+\t{\n+\t  emit_insn (gen_zero_extend<QHI:mode>di2 (tmp, input));\n+\t  emit_move_insn (di, tmp);\n+\t}\n     }\n \n   emit_insn (gen_floatdi<FP_ISA3:mode>2 (result, di));"}, {"sha": "5adcdd2c40a9c4bff3c9e19c202e080a920c8ad5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd5af1d61761e9bf466cd64360e6321cde0a2c5f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd5af1d61761e9bf466cd64360e6321cde0a2c5f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dd5af1d61761e9bf466cd64360e6321cde0a2c5f", "patch": "@@ -1,3 +1,8 @@\n+2016-12-06  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\tPR target/78658\n+\t* gcc.target/powerpc/pr78658.c: New test.\n+\n 2016-12-06  Vladimir Makarov  <vmakarov@redhat.com>\n \n \ttarget/77761"}, {"sha": "fcea632c31cce163ef783683210b6a8d8dfd1ea0", "filename": "gcc/testsuite/gcc.target/powerpc/pr78658.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd5af1d61761e9bf466cd64360e6321cde0a2c5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr78658.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd5af1d61761e9bf466cd64360e6321cde0a2c5f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr78658.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr78658.c?ref=dd5af1d61761e9bf466cd64360e6321cde0a2c5f", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile { target { powerpc64*-*-* && lp64 } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9 -O2\" } */\n+\n+/* This caused an unrecognizable insn message on development versions of GCC 7.  */\n+\n+float a;\n+char b;\n+\n+void c(void)\n+{\n+  a = b = a;\n+}"}]}