{"sha": "7e2231e759e0cd8ea6e911791513b0a96c2e143f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2UyMjMxZTc1OWUwY2Q4ZWE2ZTkxMTc5MTUxM2IwYTk2YzJlMTQzZg==", "commit": {"author": {"name": "Per Bothner", "email": "bothner@cygnus.com", "date": "1998-09-20T23:54:10Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-09-20T23:54:10Z"}, "message": "Makefile.in (LIBS): Link in libiberty.a.\n\n        * Makefile.in (LIBS):  Link in libiberty.a.\n        * c-common.c, gcc.c, toplev.c:  Repalce (some) bcopy calls by memcpy.\n\nFrom-SVN: r22508", "tree": {"sha": "6dbf4c903b58e66ef78b25007330334ab7fb3031", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6dbf4c903b58e66ef78b25007330334ab7fb3031"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e2231e759e0cd8ea6e911791513b0a96c2e143f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e2231e759e0cd8ea6e911791513b0a96c2e143f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e2231e759e0cd8ea6e911791513b0a96c2e143f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e2231e759e0cd8ea6e911791513b0a96c2e143f/comments", "author": null, "committer": null, "parents": [{"sha": "c93b03c2d88093f850864506550044b47bf2ca29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c93b03c2d88093f850864506550044b47bf2ca29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c93b03c2d88093f850864506550044b47bf2ca29"}], "stats": {"total": 20, "additions": 13, "deletions": 7}, "files": [{"sha": "82863b5c827022c32c54b6614cf19b5e7cf9618c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e2231e759e0cd8ea6e911791513b0a96c2e143f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e2231e759e0cd8ea6e911791513b0a96c2e143f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7e2231e759e0cd8ea6e911791513b0a96c2e143f", "patch": "@@ -1,3 +1,8 @@\n+Mon Sep 21 00:52:12 1998  Per Bothner  <bothner@cygnus.com>\n+\n+\t* Makefile.in (LIBS):  Link in libiberty.a.\n+\t* c-common.c, gcc.c, toplev.c:  Repalce (some) bcopy calls by memcpy.\n+\n Sun Sep 20 23:28:11 1998  Richard Henderson  <rth@cygnus.com>\n \n \t* reload1.c (emit_reload_insns): Accept a new arg for the bb.  Use"}, {"sha": "45279b00d7f2348f0cd326da50a45fd876794858", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e2231e759e0cd8ea6e911791513b0a96c2e143f/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e2231e759e0cd8ea6e911791513b0a96c2e143f/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=7e2231e759e0cd8ea6e911791513b0a96c2e143f", "patch": "@@ -547,7 +547,8 @@ HOST_LIBDEPS= $(HOST_PREFIX)$(HOST_OBSTACK) $(HOST_PREFIX)$(HOST_ALLOCA) $(HOST_\n \n # How to link with both our special library facilities\n # and the system's installed libraries.\n-LIBS = $(OBSTACK) $(USE_ALLOCA) $(MALLOC) $(VFPRINTF) $(DOPRINT) $(CLIB)\n+LIBS = $(OBSTACK) $(USE_ALLOCA) $(MALLOC) $(VFPRINTF) $(DOPRINT) $(CLIB) \\\n+\t../libiberty/libiberty.a\n \n # Likewise, for use in the tools that must run on this machine\n # even if we are cross-building GCC."}, {"sha": "a79d9d2f2b3d0bf88656d40adb6a5554baa185ae", "filename": "gcc/c-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e2231e759e0cd8ea6e911791513b0a96c2e143f/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e2231e759e0cd8ea6e911791513b0a96c2e143f/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=7e2231e759e0cd8ea6e911791513b0a96c2e143f", "patch": "@@ -270,7 +270,7 @@ combine_strings (strings)\n \t\t\t? wchar_bytes : 1));\n \t  if ((TREE_TYPE (t) == wchar_array_type_node) == wide_flag)\n \t    {\n-\t      bcopy (TREE_STRING_POINTER (t), q, len);\n+\t      memcpy (q, TREE_STRING_POINTER (t), len);\n \t      q += len;\n \t    }\n \t  else"}, {"sha": "799f3d7435ee4fbafcf8b0a223fb1d6c39328e5d", "filename": "gcc/gcc.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e2231e759e0cd8ea6e911791513b0a96c2e143f/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e2231e759e0cd8ea6e911791513b0a96c2e143f/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=7e2231e759e0cd8ea6e911791513b0a96c2e143f", "patch": "@@ -1884,7 +1884,7 @@ putenv (str)\n   /* Add a new environment variable */\n   environ = (char **) xmalloc (sizeof (char *) * (num_envs+2));\n   *environ = str;\n-  bcopy ((char *) old_environ, (char *) (environ + 1),\n+  memcpy ((char *) (environ + 1), (char *) old_environ,\n \t sizeof (char *) * (num_envs+1));\n \n #endif\t/* VMS */\n@@ -4584,8 +4584,8 @@ is_directory (path1, path2, linker)\n   /* Construct the path from the two parts.  Ensure the string ends with \"/.\".\n      The resulting path will be a directory even if the given path is a\n      symbolic link.  */\n-  bcopy (path1, path, len1);\n-  bcopy (path2, path + len1, len2);\n+  memcpy (path, path1, len1);\n+  memcpy (path + len1, path2, len2);\n   cp = path + len1 + len2;\n   if (cp[-1] != '/' && cp[-1] != DIR_SEPARATOR)\n     *cp++ = DIR_SEPARATOR;"}, {"sha": "cc4d8d0803113a8de4e8300799570f9109b33f39", "filename": "gcc/toplev.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e2231e759e0cd8ea6e911791513b0a96c2e143f/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e2231e759e0cd8ea6e911791513b0a96c2e143f/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=7e2231e759e0cd8ea6e911791513b0a96c2e143f", "patch": "@@ -2295,10 +2295,10 @@ push_float_handler (handler, old_handler)\n \n   float_handled = 1;\n   if (was_handled)\n-    bcopy ((char *) float_handler, (char *) old_handler,\n+    memcpy ((char *) old_handler, (char *) float_handler,\n \t   sizeof (float_handler));\n \n-  bcopy ((char *) handler, (char *) float_handler, sizeof (float_handler));\n+  memcpy ((char *) float_handler, (char *) handler, sizeof (float_handler));\n   return was_handled;\n }\n "}]}