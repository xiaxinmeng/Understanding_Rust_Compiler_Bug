{"sha": "0eb5f1586fa04fd82180135917b2c80511473c6b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGViNWYxNTg2ZmEwNGZkODIxODAxMzU5MTdiMmM4MDUxMTQ3M2M2Yg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2014-07-12T16:36:25Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2014-07-12T16:36:25Z"}, "message": "re PR c++/22434 (ICE in simplify_{,gen_}subreg)\n\n\tPR c++/22434\n\tPR c++/61288\n\t* call.c (build_conditional_expr_1): Avoid reading freed memory.\n\nFrom-SVN: r212482", "tree": {"sha": "a7270f85e19818e76c72293419651452fb823131", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7270f85e19818e76c72293419651452fb823131"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0eb5f1586fa04fd82180135917b2c80511473c6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0eb5f1586fa04fd82180135917b2c80511473c6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0eb5f1586fa04fd82180135917b2c80511473c6b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0eb5f1586fa04fd82180135917b2c80511473c6b/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c59f7203283d1faa48a42075eef2a07ca0454a21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c59f7203283d1faa48a42075eef2a07ca0454a21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c59f7203283d1faa48a42075eef2a07ca0454a21"}], "stats": {"total": 12, "additions": 10, "deletions": 2}, "files": [{"sha": "88d7c85ea61f14ffabd6e391e7bd2d382e6b1eca", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0eb5f1586fa04fd82180135917b2c80511473c6b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0eb5f1586fa04fd82180135917b2c80511473c6b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0eb5f1586fa04fd82180135917b2c80511473c6b", "patch": "@@ -1,3 +1,9 @@\n+2014-07-11  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/22434\n+\tPR c++/61288\n+\t* call.c (build_conditional_expr_1): Avoid reading freed memory.\n+\n 2014-07-11  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/53159"}, {"sha": "4ca6be5bd00872fdfb4cf4482dd8caf1fe5c7a77", "filename": "gcc/cp/call.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0eb5f1586fa04fd82180135917b2c80511473c6b/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0eb5f1586fa04fd82180135917b2c80511473c6b/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=0eb5f1586fa04fd82180135917b2c80511473c6b", "patch": "@@ -4763,6 +4763,7 @@ build_conditional_expr_1 (location_t loc, tree arg1, tree arg2, tree arg3,\n     {\n       conversion *conv2;\n       conversion *conv3;\n+      bool converted = false;\n \n       /* Get the high-water mark for the CONVERSION_OBSTACK.  */\n       p = conversion_obstack_alloc (0);\n@@ -4809,6 +4810,7 @@ build_conditional_expr_1 (location_t loc, tree arg1, tree arg2, tree arg3,\n \t     converted to X, the conversion will fail.  */\n \t  if (error_operand_p (arg2))\n \t    result = error_mark_node;\n+\t  converted = true;\n \t}\n       else if (conv3 && !conv3->bad_p)\n \t{\n@@ -4817,6 +4819,7 @@ build_conditional_expr_1 (location_t loc, tree arg1, tree arg2, tree arg3,\n \t  arg3_type = TREE_TYPE (arg3);\n \t  if (error_operand_p (arg3))\n \t    result = error_mark_node;\n+\t  converted = true;\n \t}\n \n       /* Free all the conversions we allocated.  */\n@@ -4840,8 +4843,7 @@ build_conditional_expr_1 (location_t loc, tree arg1, tree arg2, tree arg3,\n \t conditional expression failing altogether, even though,\n \t according to this step, the one operand could be converted to\n \t the type of the other.  */\n-      if (((conv2 && !conv2->bad_p)\n-\t   || (conv3 && !conv3->bad_p))\n+      if (converted\n \t  && CLASS_TYPE_P (arg2_type)\n \t  && cp_type_quals (arg2_type) != cp_type_quals (arg3_type))\n \targ2_type = arg3_type ="}]}