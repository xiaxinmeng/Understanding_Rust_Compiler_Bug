{"sha": "1fa4dfc6b75474c0d054d0760344b15831742633", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWZhNGRmYzZiNzU0NzRjMGQwNTRkMDc2MDM0NGIxNTgzMTc0MjYzMw==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2007-11-22T09:04:02Z"}, "committer": {"name": "Olivier Hainque", "email": "hainque@gcc.gnu.org", "date": "2007-11-22T09:04:02Z"}, "message": "trans.c (gnat_to_gnu): Reformat lines to fit in 80 columns.\n\n2007-11-22  Olivier Hainque  <hainque@adacore.com>\n\n        * trans.c (gnat_to_gnu) <case N_Free_Statement>: Reformat lines\n        to fit in 80 columns.\n\nFrom-SVN: r130343", "tree": {"sha": "e2861fcb2cc356e766b8388ac9f4fee7a7cfa879", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e2861fcb2cc356e766b8388ac9f4fee7a7cfa879"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1fa4dfc6b75474c0d054d0760344b15831742633", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fa4dfc6b75474c0d054d0760344b15831742633", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fa4dfc6b75474c0d054d0760344b15831742633", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fa4dfc6b75474c0d054d0760344b15831742633/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d26d1cea50055e4bae9192bef57bc4d5277ddd4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d26d1cea50055e4bae9192bef57bc4d5277ddd4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d26d1cea50055e4bae9192bef57bc4d5277ddd4f"}], "stats": {"total": 29, "additions": 19, "deletions": 10}, "files": [{"sha": "67e7105729963b3bd4b2ed5df5a1b24681f2e7e4", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa4dfc6b75474c0d054d0760344b15831742633/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa4dfc6b75474c0d054d0760344b15831742633/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1fa4dfc6b75474c0d054d0760344b15831742633", "patch": "@@ -1,3 +1,8 @@\n+2007-11-22  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* trans.c (gnat_to_gnu) <case N_Free_Statement>: Reformat lines\n+\tto fit in 80 columns.\n+\n 2007-11-21  Aurelien Jarno <aurelien@aurel32.net>\n \n \t* s-osinte-kfreebsd-gnu.ads (To_Target_Priority): New function."}, {"sha": "04fe61bc0b96988ad9a13d1b2dc50bac7e75bcd7", "filename": "gcc/ada/trans.c", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa4dfc6b75474c0d054d0760344b15831742633/gcc%2Fada%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa4dfc6b75474c0d054d0760344b15831742633/gcc%2Fada%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftrans.c?ref=1fa4dfc6b75474c0d054d0760344b15831742633", "patch": "@@ -4635,25 +4635,29 @@ gnat_to_gnu (Node_Id gnat_node)\n  \t     initial allocator's return value, which has been stored just in\n  \t     front of the block we have.  */\n  \n- \t  if (No (Procedure_To_Call (gnat_node)) && align > default_allocator_alignment\n+ \t  if (No (Procedure_To_Call (gnat_node))\n+\t      && align > default_allocator_alignment\n  \t      && ! TYPE_FAT_OR_THIN_POINTER_P (gnu_ptr_type))\n  \t    {\n  \t      /* We set GNU_PTR\n  \t\t as * (void **)((void *)GNU_PTR - (void *)sizeof(void *))\n- \t\t in two steps: */\n+ \t\t in two steps:  */\n  \t      \n- \t      /* GNU_PTR (void *) = (void *)GNU_PTR - (void *)sizeof (void *))  */\n+ \t      /* GNU_PTR (void *)\n+\t\t = (void *)GNU_PTR - (void *)sizeof (void *))  */\n  \t      gnu_ptr\n- \t\t= build_binary_op (MINUS_EXPR, ptr_void_type_node,\n- \t\t\t\t   convert (ptr_void_type_node, gnu_ptr),\n- \t\t\t\t   convert (ptr_void_type_node,\n- \t\t\t\t\t    TYPE_SIZE_UNIT (ptr_void_type_node)));\n+ \t\t= build_binary_op\n+\t\t    (MINUS_EXPR, ptr_void_type_node,\n+\t\t     convert (ptr_void_type_node, gnu_ptr),\n+\t\t     convert (ptr_void_type_node,\n+\t\t\t      TYPE_SIZE_UNIT (ptr_void_type_node)));\n  \t      \n  \t      /* GNU_PTR (void *) = *(void **)GNU_PTR  */\n  \t      gnu_ptr\n- \t\t= build_unary_op (INDIRECT_REF, NULL_TREE,\n- \t\t\t\t  convert (build_pointer_type (ptr_void_type_node),\n- \t\t\t\t\t   gnu_ptr));\n+ \t\t= build_unary_op\n+\t\t    (INDIRECT_REF, NULL_TREE,\n+\t\t     convert (build_pointer_type (ptr_void_type_node),\n+\t\t\t      gnu_ptr));\n  \t    }\n  \n \t  gnu_result = build_call_alloc_dealloc (gnu_ptr, gnu_obj_size, align,"}]}