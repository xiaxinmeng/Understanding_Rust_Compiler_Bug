{"sha": "614bc51c3f2a933e694013e6c867dfdcd153017f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjE0YmM1MWMzZjJhOTMzZTY5NDAxM2U2Yzg2N2RmZGNkMTUzMDE3Zg==", "commit": {"author": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2017-11-09T12:52:41Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2017-11-09T12:52:41Z"}, "message": "[multiple changes]\n\n2017-11-09  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch12.adb (Analyze_Subprogram_Instantiation): Correct use of\n\tuninitialized variable uncovered by Codepeer.\n\n2017-11-09  Arnaud Charlet  <charlet@adacore.com>\n\n\t* namet.adb: Replace pragma Assume by pragma Assert to fix bootstrap.\n\n2017-11-09  Javier Miranda  <miranda@adacore.com>\n\n\t* doc/gnat_rm/standard_and_implementation_defined_restrictions.rst:\n\t(Static_Dispatch_Tables): Minor rewording.\n\t* gnat_rm.texi: Regenerate.\n\n2017-11-09  Justin Squirek  <squirek@adacore.com>\n\n\t* sem_ch8.adb (Analyze_Use_Package): Remove forced installation of\n\tuse_clauses within instances.\n\t(Use_One_Package): Add condition to check for \"hidden\" open scopes to\n\tavoid skipping over packages that have not been properly installed even\n\tthough they are visible.\n\n2017-11-09  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch4.adb (Analyze_Selected_Component): Reject properly a call to a\n\tprivate operation of a protected type, when the type has no visible\n\toperations.\n\nFrom-SVN: r254578", "tree": {"sha": "50210e9e0eee6738ad443a769a0229c1c8090afc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/50210e9e0eee6738ad443a769a0229c1c8090afc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/614bc51c3f2a933e694013e6c867dfdcd153017f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/614bc51c3f2a933e694013e6c867dfdcd153017f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/614bc51c3f2a933e694013e6c867dfdcd153017f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/614bc51c3f2a933e694013e6c867dfdcd153017f/comments", "author": null, "committer": null, "parents": [{"sha": "5612989e5b06ce72f7c50cd6244c4c98ac4d3c76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5612989e5b06ce72f7c50cd6244c4c98ac4d3c76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5612989e5b06ce72f7c50cd6244c4c98ac4d3c76"}], "stats": {"total": 61, "additions": 49, "deletions": 12}, "files": [{"sha": "72d5844397fe4a275465abe765293b0b5fbac98d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/614bc51c3f2a933e694013e6c867dfdcd153017f/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/614bc51c3f2a933e694013e6c867dfdcd153017f/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=614bc51c3f2a933e694013e6c867dfdcd153017f", "patch": "@@ -1,3 +1,32 @@\n+2017-11-09  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch12.adb (Analyze_Subprogram_Instantiation): Correct use of\n+\tuninitialized variable uncovered by Codepeer.\n+\n+2017-11-09  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* namet.adb: Replace pragma Assume by pragma Assert to fix bootstrap.\n+\n+2017-11-09  Javier Miranda  <miranda@adacore.com>\n+\n+\t* doc/gnat_rm/standard_and_implementation_defined_restrictions.rst:\n+\t(Static_Dispatch_Tables): Minor rewording.\n+\t* gnat_rm.texi: Regenerate.\n+\n+2017-11-09  Justin Squirek  <squirek@adacore.com>\n+\n+\t* sem_ch8.adb (Analyze_Use_Package): Remove forced installation of\n+\tuse_clauses within instances.\n+\t(Use_One_Package): Add condition to check for \"hidden\" open scopes to\n+\tavoid skipping over packages that have not been properly installed even\n+\tthough they are visible.\n+\n+2017-11-09  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch4.adb (Analyze_Selected_Component): Reject properly a call to a\n+\tprivate operation of a protected type, when the type has no visible\n+\toperations.\n+\n 2017-11-09  Javier Miranda  <miranda@adacore.com>\n \n \t* rtsfind.ads (RE_Id, RE_Unit_Table): Add RE_HT_Link."}, {"sha": "1f56403f81afdf994d0ac514228646e5a50a8cae", "filename": "gcc/ada/doc/gnat_rm/standard_and_implementation_defined_restrictions.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/614bc51c3f2a933e694013e6c867dfdcd153017f/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fstandard_and_implementation_defined_restrictions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/614bc51c3f2a933e694013e6c867dfdcd153017f/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fstandard_and_implementation_defined_restrictions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fstandard_and_implementation_defined_restrictions.rst?ref=614bc51c3f2a933e694013e6c867dfdcd153017f", "patch": "@@ -992,7 +992,7 @@ Static_Dispatch_Tables\n ----------------------\n .. index:: Static_Dispatch_Tables\n \n-[GNAT] This restriction ensures at compile time that all the artifacts\n+[GNAT] This restriction checks at compile time that all the artifacts\n associated with dispatch tables can be placed in read-only memory.\n \n SPARK_05"}, {"sha": "0a2b151dffa8ee7281484000d852d21c6ce69f69", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/614bc51c3f2a933e694013e6c867dfdcd153017f/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/614bc51c3f2a933e694013e6c867dfdcd153017f/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=614bc51c3f2a933e694013e6c867dfdcd153017f", "patch": "@@ -13141,7 +13141,7 @@ type @code{Character}).\n \n @geindex Static_Dispatch_Tables\n \n-[GNAT] This restriction ensures at compile time that all the artifacts\n+[GNAT] This restriction checks at compile time that all the artifacts\n associated with dispatch tables can be placed in read-only memory.\n \n @node SPARK_05,,Static_Dispatch_Tables,Program Unit Level Restrictions"}, {"sha": "04e92dab55cea6d220b277e5b0feaddad0851d47", "filename": "gcc/ada/namet.adb", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/614bc51c3f2a933e694013e6c867dfdcd153017f/gcc%2Fada%2Fnamet.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/614bc51c3f2a933e694013e6c867dfdcd153017f/gcc%2Fada%2Fnamet.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fnamet.adb?ref=614bc51c3f2a933e694013e6c867dfdcd153017f", "patch": "@@ -261,8 +261,10 @@ package body Namet is\n                   declare\n                      W2 : constant Word := Hex (2);\n                   begin\n-                     pragma Assume (W2 <= 255);\n-                     --  Add assumption to facilitate static analysis\n+                     pragma Assert (W2 <= 255);\n+                     --  Add assumption to facilitate static analysis. Note\n+                     --  that we cannot use pragma Assume for bootstrap\n+                     --  reasons.\n                      Insert_Character (Character'Val (W2));\n                   end;\n                end if;\n@@ -759,7 +761,7 @@ package body Namet is\n \n       Write_Eol;\n       Write_Str (\"Average number of probes for lookup = \");\n-      pragma Assume (Nsyms /= 0);\n+      pragma Assert (Nsyms /= 0);\n       --  Add assumption to facilitate static analysis. Here Nsyms cannot be\n       --  zero because many symbols are added to the table by default.\n       Probes := Probes / Nsyms;"}, {"sha": "7aca1d9236f7c440c73a28a778a518dd5d5d3ad6", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/614bc51c3f2a933e694013e6c867dfdcd153017f/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/614bc51c3f2a933e694013e6c867dfdcd153017f/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=614bc51c3f2a933e694013e6c867dfdcd153017f", "patch": "@@ -5130,6 +5130,7 @@ package body Sem_Ch12 is\n    is\n       Loc    : constant Source_Ptr := Sloc (N);\n       Gen_Id : constant Node_Id    := Name (N);\n+      Errs   : constant Nat        := Serious_Errors_Detected;\n \n       Anon_Id : constant Entity_Id :=\n                   Make_Defining_Identifier (Sloc (Defining_Entity (N)),\n@@ -5723,7 +5724,9 @@ package body Sem_Ch12 is\n       end if;\n \n    <<Leave>>\n-      if Has_Aspects (N) then\n+      --  Analyze aspects in declaration if no errors appear in the instance.\n+\n+      if Has_Aspects (N) and then Serious_Errors_Detected = Errs then\n          Analyze_Aspect_Specifications (N, Act_Decl_Id);\n       end if;\n "}, {"sha": "d13140fb135b1305e5cb2e08b77dcc4bac2516e8", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/614bc51c3f2a933e694013e6c867dfdcd153017f/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/614bc51c3f2a933e694013e6c867dfdcd153017f/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=614bc51c3f2a933e694013e6c867dfdcd153017f", "patch": "@@ -5043,10 +5043,13 @@ package body Sem_Ch4 is\n                   end if;\n                end if;\n \n-               Next_Entity (Comp);\n+               --  Do not examine private operations if not within scope of\n+               --  the synchronized type.\n+\n                exit when not In_Scope\n                  and then\n                    Comp = First_Private_Entity (Base_Type (Prefix_Type));\n+               Next_Entity (Comp);\n          end loop;\n \n          --  If the scope is a current instance, the prefix cannot be an"}, {"sha": "d8d5b7b5c04f651db5217b3c71a90e4f1777473a", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/614bc51c3f2a933e694013e6c867dfdcd153017f/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/614bc51c3f2a933e694013e6c867dfdcd153017f/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=614bc51c3f2a933e694013e6c867dfdcd153017f", "patch": "@@ -3821,10 +3821,7 @@ package body Sem_Ch8 is\n             Check_In_Previous_With_Clause (N, Name (N));\n          end if;\n \n-         --  Force the use_clause when we are in a generic instance because the\n-         --  scope of the package has changed and we must ensure visibility.\n-\n-         Use_One_Package (N, Name (N), Force => In_Instance);\n+         Use_One_Package (N, Name (N));\n \n          --  Capture the first Ghost package and the first living package\n \n@@ -9443,7 +9440,10 @@ package body Sem_Ch8 is\n \n          --  Warn about detected redundant clauses\n \n-         elsif In_Open_Scopes (P) and not Force then\n+         elsif not Force\n+           and then In_Open_Scopes (P)\n+           and then not Is_Hidden_Open_Scope (P)\n+         then\n             if Warn_On_Redundant_Constructs and then P = Current_Scope then\n                Error_Msg_NE -- CODEFIX\n                  (\"& is already use-visible within itself?r?\","}]}