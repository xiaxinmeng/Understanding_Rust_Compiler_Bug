{"sha": "e9e1d143b5ea00f99191cd0e65c09ee972ebcedb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTllMWQxNDNiNWVhMDBmOTkxOTFjZDBlNjVjMDllZTk3MmViY2VkYg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-09-02T13:53:32Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-09-02T13:53:32Z"}, "message": "re PR tree-optimization/27460 (Does not vectorize statements with mixed type COND_EXPRs)\n\n2011-09-02  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/27460\n\tPR middle-end/29269\n\t* doc/md.texi (vcond): Document.\n\t* genopinit.c (optabs): Turn vcond{,u}_optab into a conversion\n\toptab with two modes.\n\t* optabs.h (enum convert_optab_index): Add COI_vcond, COI_vcondu.\n\t(enum direct_optab_index): Remove DOI_vcond, DOI_vcondu.\n\t(vcond_optab): Adjust.\n\t(vcondu_optab): Likewise.\n\t(expand_vec_cond_expr_p): Adjust prototype.\n\t* optabs.c (get_vcond_icode): Adjust.\n\t(expand_vec_cond_expr_p): Likewise.\n\t(expand_vec_cond_expr): Likewise.\n\t* tree-vect-stmts.c (vect_is_simple_cond): Return the comparison\n\tvector type.\n\t(vectorizable_condition): Allow differing types for comparison\n\tand result.\n\n\t* config/i386/i386.c (ix86_expand_sse_cmp): Use proper mode\n\tfor the comparison.\n\t* config/i386/sse.md (vcond<mode>): Split to\n\tvcond<V_256:mode><VF_256:mode>, vcond<V_128:mode><VF_128:mode>,\n\tvcond<V_128:mode><VI124_128:mode> and\n\tvcondu<V_128:mode><VI124_128:mode>.\n\t(vcondv2di): Change to vcond<VI8F_128:mode>v2di.\n\t(vconduv2di): Likewise.\n\t* config/arm/neon.md (vcond<mode>): Change to vcond*<mode><mode>.\n\t(vcondu<mode>): Likewise.\n\t* config/ia64/vect.md (vcond<mode>): Likewise.\n\t(vcondu<mode>): Likewise.\n\t(vcondv2sf): Likewise.\n\t* config/mips/mips-ps-3d.md (vcondv2sf): Likewise.\n\t* config/rs6000/paired.md (vcondv2sf): Likewise.\n\t* config/rs6000/vector.md (vcond<mode>): Likewise.\n\t(vcondu<mode>): Likewise.\n\t* config/spu/spu.md (vcond<mode>): Likewise.\n\t(vcondu<mode>): Likewise.\n\n\t* gcc.dg/vect/vect-cond-7.c: New testcase.\n\nFrom-SVN: r178480", "tree": {"sha": "a60e543826617c5a8adf334f075bb61da4cc0003", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a60e543826617c5a8adf334f075bb61da4cc0003"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e9e1d143b5ea00f99191cd0e65c09ee972ebcedb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9e1d143b5ea00f99191cd0e65c09ee972ebcedb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9e1d143b5ea00f99191cd0e65c09ee972ebcedb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9e1d143b5ea00f99191cd0e65c09ee972ebcedb/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "aa547a51dab42285a259b77d45bec65fa3f82646", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa547a51dab42285a259b77d45bec65fa3f82646", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa547a51dab42285a259b77d45bec65fa3f82646"}], "stats": {"total": 269, "additions": 183, "deletions": 86}, "files": [{"sha": "a54f1d1389558e9df14e840dee6f6d2b181cc07b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9e1d143b5ea00f99191cd0e65c09ee972ebcedb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9e1d143b5ea00f99191cd0e65c09ee972ebcedb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e9e1d143b5ea00f99191cd0e65c09ee972ebcedb", "patch": "@@ -1,3 +1,42 @@\n+2011-09-02  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/27460\n+\tPR middle-end/29269\n+\t* doc/md.texi (vcond): Document.\n+\t* genopinit.c (optabs): Turn vcond{,u}_optab into a conversion\n+\toptab with two modes.\n+\t* optabs.h (enum convert_optab_index): Add COI_vcond, COI_vcondu.\n+\t(enum direct_optab_index): Remove DOI_vcond, DOI_vcondu.\n+\t(vcond_optab): Adjust.\n+\t(vcondu_optab): Likewise.\n+\t(expand_vec_cond_expr_p): Adjust prototype.\n+\t* optabs.c (get_vcond_icode): Adjust.\n+\t(expand_vec_cond_expr_p): Likewise.\n+\t(expand_vec_cond_expr): Likewise.\n+\t* tree-vect-stmts.c (vect_is_simple_cond): Return the comparison\n+\tvector type.\n+\t(vectorizable_condition): Allow differing types for comparison\n+\tand result.\n+\t* config/i386/i386.c (ix86_expand_sse_cmp): Use proper mode\n+\tfor the comparison.\n+\t* config/i386/sse.md (vcond<mode>): Split to\n+\tvcond<V_256:mode><VF_256:mode>, vcond<V_128:mode><VF_128:mode>,\n+\tvcond<V_128:mode><VI124_128:mode> and\n+\tvcondu<V_128:mode><VI124_128:mode>.\n+\t(vcondv2di): Change to vcond<VI8F_128:mode>v2di.\n+\t(vconduv2di): Likewise.\n+\t* config/arm/neon.md (vcond<mode>): Change to vcond*<mode><mode>.\n+\t(vcondu<mode>): Likewise.\n+\t* config/ia64/vect.md (vcond<mode>): Likewise.\n+\t(vcondu<mode>): Likewise.\n+\t(vcondv2sf): Likewise.\n+\t* config/mips/mips-ps-3d.md (vcondv2sf): Likewise.\n+\t* config/rs6000/paired.md (vcondv2sf): Likewise.\n+\t* config/rs6000/vector.md (vcond<mode>): Likewise.\n+\t(vcondu<mode>): Likewise.\n+\t* config/spu/spu.md (vcond<mode>): Likewise.\n+\t(vcondu<mode>): Likewise.\n+\n 2011-09-02  Richard Guenther  <rguenther@suse.de>\n \n \t* pretty-print.h (pp_unsigned_wide_integer): New."}, {"sha": "c91b0cdb931e44cdbdc9188c12c195f544e02c56", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9e1d143b5ea00f99191cd0e65c09ee972ebcedb/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9e1d143b5ea00f99191cd0e65c09ee972ebcedb/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=e9e1d143b5ea00f99191cd0e65c09ee972ebcedb", "patch": "@@ -1600,7 +1600,7 @@\n ;; where op3 is <, <=, ==, !=, >= or >.  Operations are performed\n ;; element-wise.\n \n-(define_expand \"vcond<mode>\"\n+(define_expand \"vcond<mode><mode>\"\n   [(set (match_operand:VDQW 0 \"s_register_operand\" \"\")\n \t(if_then_else:VDQW\n \t  (match_operator 3 \"arm_comparison_operator\"\n@@ -1680,7 +1680,7 @@\n   DONE;\n })\n \n-(define_expand \"vcondu<mode>\"\n+(define_expand \"vcondu<mode><mode>\"\n   [(set (match_operand:VDQIW 0 \"s_register_operand\" \"\")\n \t(if_then_else:VDQIW\n \t  (match_operator 3 \"arm_comparison_operator\""}, {"sha": "a9c0aa750cf53472b916df057f567d3e297a0a30", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9e1d143b5ea00f99191cd0e65c09ee972ebcedb/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9e1d143b5ea00f99191cd0e65c09ee972ebcedb/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=e9e1d143b5ea00f99191cd0e65c09ee972ebcedb", "patch": "@@ -18413,19 +18413,26 @@ ix86_expand_sse_cmp (rtx dest, enum rtx_code code, rtx cmp_op0, rtx cmp_op1,\n \t\t     rtx op_true, rtx op_false)\n {\n   enum machine_mode mode = GET_MODE (dest);\n+  enum machine_mode cmp_mode = GET_MODE (cmp_op0);\n   rtx x;\n \n-  cmp_op0 = force_reg (mode, cmp_op0);\n-  if (!nonimmediate_operand (cmp_op1, mode))\n-    cmp_op1 = force_reg (mode, cmp_op1);\n+  cmp_op0 = force_reg (cmp_mode, cmp_op0);\n+  if (!nonimmediate_operand (cmp_op1, cmp_mode))\n+    cmp_op1 = force_reg (cmp_mode, cmp_op1);\n \n   if (optimize\n       || reg_overlap_mentioned_p (dest, op_true)\n       || reg_overlap_mentioned_p (dest, op_false))\n     dest = gen_reg_rtx (mode);\n \n-  x = gen_rtx_fmt_ee (code, mode, cmp_op0, cmp_op1);\n-  emit_insn (gen_rtx_SET (VOIDmode, dest, x));\n+  x = gen_rtx_fmt_ee (code, cmp_mode, cmp_op0, cmp_op1);\n+  if (cmp_mode != mode)\n+    {\n+      x = force_reg (cmp_mode, x);\n+      convert_move (dest, x, false);\n+    }\n+  else\n+    emit_insn (gen_rtx_SET (VOIDmode, dest, x));\n \n   return dest;\n }"}, {"sha": "353f4b62a7d0f60250673fdef13b0826f1eac003", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 53, "deletions": 30, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9e1d143b5ea00f99191cd0e65c09ee972ebcedb/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9e1d143b5ea00f99191cd0e65c09ee972ebcedb/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=e9e1d143b5ea00f99191cd0e65c09ee972ebcedb", "patch": "@@ -1402,15 +1402,34 @@\n \t\t      (const_string \"0\")))\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_expand \"vcond<mode>\"\n-  [(set (match_operand:VF 0 \"register_operand\" \"\")\n-\t(if_then_else:VF\n+(define_expand \"vcond<V_256:mode><VF_256:mode>\"\n+  [(set (match_operand:V_256 0 \"register_operand\" \"\")\n+\t(if_then_else:V_256\n \t  (match_operator 3 \"\"\n-\t    [(match_operand:VF 4 \"nonimmediate_operand\" \"\")\n-\t     (match_operand:VF 5 \"nonimmediate_operand\" \"\")])\n-\t  (match_operand:VF 1 \"general_operand\" \"\")\n-\t  (match_operand:VF 2 \"general_operand\" \"\")))]\n-  \"TARGET_SSE\"\n+\t    [(match_operand:VF_256 4 \"nonimmediate_operand\" \"\")\n+\t     (match_operand:VF_256 5 \"nonimmediate_operand\" \"\")])\n+\t  (match_operand:V_256 1 \"general_operand\" \"\")\n+\t  (match_operand:V_256 2 \"general_operand\" \"\")))]\n+  \"TARGET_AVX\n+   && (GET_MODE_NUNITS (<V_256:MODE>mode)\n+       == GET_MODE_NUNITS (<VF_256:MODE>mode))\"\n+{\n+  bool ok = ix86_expand_fp_vcond (operands);\n+  gcc_assert (ok);\n+  DONE;\n+})\n+\n+(define_expand \"vcond<V_128:mode><VF_128:mode>\"\n+  [(set (match_operand:V_128 0 \"register_operand\" \"\")\n+\t(if_then_else:V_128\n+\t  (match_operator 3 \"\"\n+\t    [(match_operand:VF_128 4 \"nonimmediate_operand\" \"\")\n+\t     (match_operand:VF_128 5 \"nonimmediate_operand\" \"\")])\n+\t  (match_operand:V_128 1 \"general_operand\" \"\")\n+\t  (match_operand:V_128 2 \"general_operand\" \"\")))]\n+  \"TARGET_SSE\n+   && (GET_MODE_NUNITS (<V_128:MODE>mode)\n+       == GET_MODE_NUNITS (<VF_128:MODE>mode))\"\n {\n   bool ok = ix86_expand_fp_vcond (operands);\n   gcc_assert (ok);\n@@ -6171,59 +6190,63 @@\n    (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_expand \"vcond<mode>\"\n-  [(set (match_operand:VI124_128 0 \"register_operand\" \"\")\n-\t(if_then_else:VI124_128\n+(define_expand \"vcond<V_128:mode><VI124_128:mode>\"\n+  [(set (match_operand:V_128 0 \"register_operand\" \"\")\n+\t(if_then_else:V_128\n \t  (match_operator 3 \"\"\n \t    [(match_operand:VI124_128 4 \"nonimmediate_operand\" \"\")\n \t     (match_operand:VI124_128 5 \"nonimmediate_operand\" \"\")])\n-\t  (match_operand:VI124_128 1 \"general_operand\" \"\")\n-\t  (match_operand:VI124_128 2 \"general_operand\" \"\")))]\n-  \"TARGET_SSE2\"\n+\t  (match_operand:V_128 1 \"general_operand\" \"\")\n+\t  (match_operand:V_128 2 \"general_operand\" \"\")))]\n+  \"TARGET_SSE2\n+   && (GET_MODE_NUNITS (<V_128:MODE>mode)\n+       == GET_MODE_NUNITS (<VI124_128:MODE>mode))\"\n {\n   bool ok = ix86_expand_int_vcond (operands);\n   gcc_assert (ok);\n   DONE;\n })\n \n-(define_expand \"vcondv2di\"\n-  [(set (match_operand:V2DI 0 \"register_operand\" \"\")\n-\t(if_then_else:V2DI\n+(define_expand \"vcond<VI8F_128:mode>v2di\"\n+  [(set (match_operand:VI8F_128 0 \"register_operand\" \"\")\n+\t(if_then_else:VI8F_128\n \t  (match_operator 3 \"\"\n \t    [(match_operand:V2DI 4 \"nonimmediate_operand\" \"\")\n \t     (match_operand:V2DI 5 \"nonimmediate_operand\" \"\")])\n-\t  (match_operand:V2DI 1 \"general_operand\" \"\")\n-\t  (match_operand:V2DI 2 \"general_operand\" \"\")))]\n+\t  (match_operand:VI8F_128 1 \"general_operand\" \"\")\n+\t  (match_operand:VI8F_128 2 \"general_operand\" \"\")))]\n   \"TARGET_SSE4_2\"\n {\n   bool ok = ix86_expand_int_vcond (operands);\n   gcc_assert (ok);\n   DONE;\n })\n \n-(define_expand \"vcondu<mode>\"\n-  [(set (match_operand:VI124_128 0 \"register_operand\" \"\")\n-\t(if_then_else:VI124_128\n+(define_expand \"vcondu<V_128:mode><VI124_128:mode>\"\n+  [(set (match_operand:V_128 0 \"register_operand\" \"\")\n+\t(if_then_else:V_128\n \t  (match_operator 3 \"\"\n \t    [(match_operand:VI124_128 4 \"nonimmediate_operand\" \"\")\n \t     (match_operand:VI124_128 5 \"nonimmediate_operand\" \"\")])\n-\t  (match_operand:VI124_128 1 \"general_operand\" \"\")\n-\t  (match_operand:VI124_128 2 \"general_operand\" \"\")))]\n-  \"TARGET_SSE2\"\n+\t  (match_operand:V_128 1 \"general_operand\" \"\")\n+\t  (match_operand:V_128 2 \"general_operand\" \"\")))]\n+  \"TARGET_SSE2\n+   && (GET_MODE_NUNITS (<V_128:MODE>mode)\n+       == GET_MODE_NUNITS (<VI124_128:MODE>mode))\"\n {\n   bool ok = ix86_expand_int_vcond (operands);\n   gcc_assert (ok);\n   DONE;\n })\n \n-(define_expand \"vconduv2di\"\n-  [(set (match_operand:V2DI 0 \"register_operand\" \"\")\n-\t(if_then_else:V2DI\n+(define_expand \"vcondu<VI8F_128:mode>v2di\"\n+  [(set (match_operand:VI8F_128 0 \"register_operand\" \"\")\n+\t(if_then_else:VI8F_128\n \t  (match_operator 3 \"\"\n \t    [(match_operand:V2DI 4 \"nonimmediate_operand\" \"\")\n \t     (match_operand:V2DI 5 \"nonimmediate_operand\" \"\")])\n-\t  (match_operand:V2DI 1 \"general_operand\" \"\")\n-\t  (match_operand:V2DI 2 \"general_operand\" \"\")))]\n+\t  (match_operand:VI8F_128 1 \"general_operand\" \"\")\n+\t  (match_operand:VI8F_128 2 \"general_operand\" \"\")))]\n   \"TARGET_SSE4_2\"\n {\n   bool ok = ix86_expand_int_vcond (operands);"}, {"sha": "2f068ebcb600391b944249fa204e2e743b1e7f7e", "filename": "gcc/config/ia64/vect.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9e1d143b5ea00f99191cd0e65c09ee972ebcedb/gcc%2Fconfig%2Fia64%2Fvect.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9e1d143b5ea00f99191cd0e65c09ee972ebcedb/gcc%2Fconfig%2Fia64%2Fvect.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fvect.md?ref=e9e1d143b5ea00f99191cd0e65c09ee972ebcedb", "patch": "@@ -661,7 +661,7 @@\n   DONE;\n })\n \n-(define_expand \"vcond<mode>\"\n+(define_expand \"vcond<mode><mode>\"\n   [(set (match_operand:VECINT 0 \"gr_register_operand\" \"\")\n \t(if_then_else:VECINT\n \t  (match_operator 3 \"\" \n@@ -675,7 +675,7 @@\n   DONE;\n })\n \n-(define_expand \"vcondu<mode>\"\n+(define_expand \"vcondu<mode><mode>\"\n   [(set (match_operand:VECINT 0 \"gr_register_operand\" \"\")\n \t(if_then_else:VECINT\n \t  (match_operator 3 \"\" \n@@ -1382,7 +1382,7 @@\n   DONE;\n })\n \n-(define_expand \"vcondv2sf\"\n+(define_expand \"vcondv2sfv2sf\"\n   [(set (match_operand:V2SF 0 \"fr_register_operand\" \"\")\n \t(if_then_else:V2SF\n \t  (match_operator 3 \"\" "}, {"sha": "504f43ce46c85e235f493ccf9882370a7582d08a", "filename": "gcc/config/mips/mips-ps-3d.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9e1d143b5ea00f99191cd0e65c09ee972ebcedb/gcc%2Fconfig%2Fmips%2Fmips-ps-3d.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9e1d143b5ea00f99191cd0e65c09ee972ebcedb/gcc%2Fconfig%2Fmips%2Fmips-ps-3d.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-ps-3d.md?ref=e9e1d143b5ea00f99191cd0e65c09ee972ebcedb", "patch": "@@ -597,7 +597,7 @@\n   [(set_attr \"type\" \"frdiv2\")\n    (set_attr \"mode\" \"<UNITMODE>\")])\n \n-(define_expand \"vcondv2sf\"\n+(define_expand \"vcondv2sfv2sf\"\n   [(set (match_operand:V2SF 0 \"register_operand\")\n \t(if_then_else:V2SF\n \t  (match_operator 3 \"\""}, {"sha": "f0bf7f9a5e39205e17446e6adde37e9d55e5858e", "filename": "gcc/config/rs6000/paired.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9e1d143b5ea00f99191cd0e65c09ee972ebcedb/gcc%2Fconfig%2Frs6000%2Fpaired.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9e1d143b5ea00f99191cd0e65c09ee972ebcedb/gcc%2Fconfig%2Frs6000%2Fpaired.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpaired.md?ref=e9e1d143b5ea00f99191cd0e65c09ee972ebcedb", "patch": "@@ -507,7 +507,7 @@\n   DONE;\n })\n \n-(define_expand \"vcondv2sf\"\n+(define_expand \"vcondv2sfv2sf\"\n   [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=f\")\n         (if_then_else:V2SF\n          (match_operator 3 \"gpc_reg_operand\""}, {"sha": "0179cd9df9099b39f5b1c96bbd6e041ded0375de", "filename": "gcc/config/rs6000/vector.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9e1d143b5ea00f99191cd0e65c09ee972ebcedb/gcc%2Fconfig%2Frs6000%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9e1d143b5ea00f99191cd0e65c09ee972ebcedb/gcc%2Fconfig%2Frs6000%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvector.md?ref=e9e1d143b5ea00f99191cd0e65c09ee972ebcedb", "patch": "@@ -370,7 +370,7 @@\n \n \f\n ;; Vector comparisons\n-(define_expand \"vcond<mode>\"\n+(define_expand \"vcond<mode><mode>\"\n   [(set (match_operand:VEC_F 0 \"vfloat_operand\" \"\")\n \t(if_then_else:VEC_F\n \t (match_operator 3 \"comparison_operator\"\n@@ -388,7 +388,7 @@\n     FAIL;\n }\")\n \n-(define_expand \"vcond<mode>\"\n+(define_expand \"vcond<mode><mode>\"\n   [(set (match_operand:VEC_I 0 \"vint_operand\" \"\")\n \t(if_then_else:VEC_I\n \t (match_operator 3 \"comparison_operator\"\n@@ -406,7 +406,7 @@\n     FAIL;\n }\")\n \n-(define_expand \"vcondu<mode>\"\n+(define_expand \"vcondu<mode><mode>\"\n   [(set (match_operand:VEC_I 0 \"vint_operand\" \"\")\n \t(if_then_else:VEC_I\n \t (match_operator 3 \"comparison_operator\""}, {"sha": "676d54e8de0a340d38ed5f0ae924c6fcefe7f8be", "filename": "gcc/config/spu/spu.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9e1d143b5ea00f99191cd0e65c09ee972ebcedb/gcc%2Fconfig%2Fspu%2Fspu.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9e1d143b5ea00f99191cd0e65c09ee972ebcedb/gcc%2Fconfig%2Fspu%2Fspu.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.md?ref=e9e1d143b5ea00f99191cd0e65c09ee972ebcedb", "patch": "@@ -3874,7 +3874,7 @@ selb\\t%0,%4,%0,%3\"\n \n \f\n ;; vector conditional compare patterns\n-(define_expand \"vcond<mode>\"\n+(define_expand \"vcond<mode><mode>\"\n   [(set (match_operand:VCMP 0 \"spu_reg_operand\" \"=r\")\n         (if_then_else:VCMP\n           (match_operator 3 \"comparison_operator\"\n@@ -3891,7 +3891,7 @@ selb\\t%0,%4,%0,%3\"\n     FAIL;\n   })\n \n-(define_expand \"vcondu<mode>\"\n+(define_expand \"vcondu<mode><mode>\"\n   [(set (match_operand:VCMPU 0 \"spu_reg_operand\" \"=r\")\n         (if_then_else:VCMPU\n           (match_operator 3 \"comparison_operator\""}, {"sha": "1aa8552c5d4caa941c5031495a468be7a201691b", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9e1d143b5ea00f99191cd0e65c09ee972ebcedb/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9e1d143b5ea00f99191cd0e65c09ee972ebcedb/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=e9e1d143b5ea00f99191cd0e65c09ee972ebcedb", "patch": "@@ -4017,6 +4017,17 @@ and input vectors should have the same modes (@code{N} elements). The low\n Initialize the vector to given values.  Operand 0 is the vector to initialize\n and operand 1 is parallel containing values for individual fields.\n \n+@cindex @code{vcond@var{m}@var{n}} instruction pattern\n+@item @samp{vcond@var{m}@var{n}}\n+Output a conditional vector move.  Operand 0 is the destination to\n+receive a combination of operand 1 and operand 2, which are of mode @var{m},\n+dependent on the outcome of the predicate in operand 3 which is a\n+vector comparison with operands of mode @var{n} in operands 4 and 5.  The\n+modes @var{m} and @var{n} should have the same size.  Operand 0\n+will be set to the value @var{op1} & @var{msk} | @var{op2} & ~@var{msk}\n+where @var{msk} is computed by element-wise evaluation of the vector\n+comparison with a truth value of all-ones and a false value of all-zeros.\n+\n @cindex @code{push@var{m}1} instruction pattern\n @item @samp{push@var{m}1}\n Output a push instruction.  Operand 0 is value to push.  Used only when"}, {"sha": "ec4a4733c1d7f1687506a9148b546c8808f0034e", "filename": "gcc/genopinit.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9e1d143b5ea00f99191cd0e65c09ee972ebcedb/gcc%2Fgenopinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9e1d143b5ea00f99191cd0e65c09ee972ebcedb/gcc%2Fgenopinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenopinit.c?ref=e9e1d143b5ea00f99191cd0e65c09ee972ebcedb", "patch": "@@ -253,8 +253,8 @@ static const char * const optabs[] =\n   \"set_optab_handler (vec_shl_optab, $A, CODE_FOR_$(vec_shl_$a$))\",\n   \"set_optab_handler (vec_shr_optab, $A, CODE_FOR_$(vec_shr_$a$))\",\n   \"set_optab_handler (vec_realign_load_optab, $A, CODE_FOR_$(vec_realign_load_$a$))\",\n-  \"set_direct_optab_handler (vcond_optab, $A, CODE_FOR_$(vcond$a$))\",\n-  \"set_direct_optab_handler (vcondu_optab, $A, CODE_FOR_$(vcondu$a$))\",\n+  \"set_convert_optab_handler (vcond_optab, $A, $B, CODE_FOR_$(vcond$a$b$))\",\n+  \"set_convert_optab_handler (vcondu_optab, $A, $B, CODE_FOR_$(vcondu$a$b$))\",\n   \"set_optab_handler (ssum_widen_optab, $A, CODE_FOR_$(widen_ssum$I$a3$))\",\n   \"set_optab_handler (usum_widen_optab, $A, CODE_FOR_$(widen_usum$I$a3$))\",\n   \"set_optab_handler (udot_prod_optab, $A, CODE_FOR_$(udot_prod$I$a$))\","}, {"sha": "5cdcd95f12ad71535b52e813578379d01424b6f1", "filename": "gcc/optabs.c", "status": "modified", "additions": 27, "deletions": 12, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9e1d143b5ea00f99191cd0e65c09ee972ebcedb/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9e1d143b5ea00f99191cd0e65c09ee972ebcedb/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=e9e1d143b5ea00f99191cd0e65c09ee972ebcedb", "patch": "@@ -6620,27 +6620,33 @@ vector_compare_rtx (tree cond, bool unsignedp, enum insn_code icode)\n   return gen_rtx_fmt_ee (rcode, VOIDmode, ops[0].value, ops[1].value);\n }\n \n-/* Return insn code for TYPE, the type of a VEC_COND_EXPR.  */\n+/* Return insn code for a conditional operator with a comparison in\n+   mode CMODE, unsigned if UNS is true, resulting in a value of mode VMODE.  */\n \n static inline enum insn_code\n-get_vcond_icode (tree type, enum machine_mode mode)\n+get_vcond_icode (enum machine_mode vmode, enum machine_mode cmode, bool uns)\n {\n   enum insn_code icode = CODE_FOR_nothing;\n-\n-  if (TYPE_UNSIGNED (type))\n-    icode = direct_optab_handler (vcondu_optab, mode);\n+  if (uns)\n+    icode = convert_optab_handler (vcondu_optab, vmode, cmode);\n   else\n-    icode = direct_optab_handler (vcond_optab, mode);\n+    icode = convert_optab_handler (vcond_optab, vmode, cmode);\n   return icode;\n }\n \n /* Return TRUE iff, appropriate vector insns are available\n-   for vector cond expr with type TYPE in VMODE mode.  */\n+   for vector cond expr with vector type VALUE_TYPE and a comparison\n+   with operand vector types in CMP_OP_TYPE.  */\n \n bool\n-expand_vec_cond_expr_p (tree type, enum machine_mode vmode)\n-{\n-  if (get_vcond_icode (type, vmode) == CODE_FOR_nothing)\n+expand_vec_cond_expr_p (tree value_type, tree cmp_op_type)\n+{\n+  enum machine_mode value_mode = TYPE_MODE (value_type);\n+  enum machine_mode cmp_op_mode = TYPE_MODE (cmp_op_type);\n+  if (GET_MODE_SIZE (value_mode) != GET_MODE_SIZE (cmp_op_mode)\n+      || GET_MODE_NUNITS (value_mode) != GET_MODE_NUNITS (cmp_op_mode)\n+      || get_vcond_icode (TYPE_MODE (value_type), TYPE_MODE (cmp_op_type),\n+\t\t\t  TYPE_UNSIGNED (cmp_op_type)) == CODE_FOR_nothing)\n     return false;\n   return true;\n }\n@@ -6656,9 +6662,18 @@ expand_vec_cond_expr (tree vec_cond_type, tree op0, tree op1, tree op2,\n   enum insn_code icode;\n   rtx comparison, rtx_op1, rtx_op2;\n   enum machine_mode mode = TYPE_MODE (vec_cond_type);\n-  bool unsignedp = TYPE_UNSIGNED (vec_cond_type);\n+  enum machine_mode cmp_op_mode;\n+  bool unsignedp;\n+\n+  gcc_assert (COMPARISON_CLASS_P (op0));\n+\n+  unsignedp = TYPE_UNSIGNED (TREE_TYPE (TREE_OPERAND (op0, 0)));\n+  cmp_op_mode = TYPE_MODE (TREE_TYPE (TREE_OPERAND (op0, 0)));\n+\n+  gcc_assert (GET_MODE_SIZE (mode) == GET_MODE_SIZE (cmp_op_mode)\n+\t      && GET_MODE_NUNITS (mode) == GET_MODE_NUNITS (cmp_op_mode));\n \n-  icode = get_vcond_icode (vec_cond_type, mode);\n+  icode = get_vcond_icode (mode, cmp_op_mode, unsignedp);\n   if (icode == CODE_FOR_nothing)\n     return 0;\n "}, {"sha": "56df6718462fdb1fbe87b028bde0e1ad3c1209a8", "filename": "gcc/optabs.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9e1d143b5ea00f99191cd0e65c09ee972ebcedb/gcc%2Foptabs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9e1d143b5ea00f99191cd0e65c09ee972ebcedb/gcc%2Foptabs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.h?ref=e9e1d143b5ea00f99191cd0e65c09ee972ebcedb", "patch": "@@ -589,6 +589,10 @@ enum convert_optab_index\n   COI_vec_load_lanes,\n   COI_vec_store_lanes,\n \n+  /* Vector conditional operations.  */\n+  COI_vcond,\n+  COI_vcondu,\n+\n   COI_MAX\n };\n \n@@ -611,6 +615,8 @@ enum convert_optab_index\n #define satfractuns_optab (&convert_optab_table[COI_satfractuns])\n #define vec_load_lanes_optab (&convert_optab_table[COI_vec_load_lanes])\n #define vec_store_lanes_optab (&convert_optab_table[COI_vec_store_lanes])\n+#define vcond_optab (&convert_optab_table[(int) COI_vcond])\n+#define vcondu_optab (&convert_optab_table[(int) COI_vcondu])\n \n /* Contains the optab used for each rtx code.  */\n extern optab code_to_optab[NUM_RTX_CODE + 1];\n@@ -632,10 +638,6 @@ enum direct_optab_index\n   DOI_reload_in,\n   DOI_reload_out,\n \n-  /* Vector conditional operations.  */\n-  DOI_vcond,\n-  DOI_vcondu,\n-\n   /* Block move operation.  */\n   DOI_movmem,\n \n@@ -699,8 +701,6 @@ typedef struct direct_optab_d *direct_optab;\n #endif\n #define reload_in_optab (&direct_optab_table[(int) DOI_reload_in])\n #define reload_out_optab (&direct_optab_table[(int) DOI_reload_out])\n-#define vcond_optab (&direct_optab_table[(int) DOI_vcond])\n-#define vcondu_optab (&direct_optab_table[(int) DOI_vcondu])\n #define movmem_optab (&direct_optab_table[(int) DOI_movmem])\n #define setmem_optab (&direct_optab_table[(int) DOI_setmem])\n #define cmpstr_optab (&direct_optab_table[(int) DOI_cmpstr])\n@@ -877,7 +877,7 @@ extern bool expand_sfix_optab (rtx, rtx, convert_optab);\n extern rtx expand_widening_mult (enum machine_mode, rtx, rtx, rtx, int, optab);\n \n /* Return tree if target supports vector operations for COND_EXPR.  */\n-bool expand_vec_cond_expr_p (tree, enum machine_mode);\n+bool expand_vec_cond_expr_p (tree, tree);\n \n /* Generate code for VEC_COND_EXPR.  */\n extern rtx expand_vec_cond_expr (tree, tree, tree, tree, rtx);"}, {"sha": "1584cff6427804818ffd2bd3d3697ea10a99c2c4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9e1d143b5ea00f99191cd0e65c09ee972ebcedb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9e1d143b5ea00f99191cd0e65c09ee972ebcedb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e9e1d143b5ea00f99191cd0e65c09ee972ebcedb", "patch": "@@ -1,3 +1,9 @@\n+2011-09-02  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/27460\n+\tPR middle-end/29269\n+\t* gcc.dg/vect/vect-cond-7.c: New testcase.\n+\n 2011-09-02  Martin Jambor  <mjambor@suse.cz>\n \n \t* g++.dg/ipa/devirt-3.C: Added a distraction method."}, {"sha": "2c770919a2ae33eec20aadc102f806fb30398b6f", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 14, "deletions": 18, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9e1d143b5ea00f99191cd0e65c09ee972ebcedb/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9e1d143b5ea00f99191cd0e65c09ee972ebcedb/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=e9e1d143b5ea00f99191cd0e65c09ee972ebcedb", "patch": "@@ -4680,15 +4680,19 @@ vectorizable_load (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n    LOOP - the loop that is being vectorized.\n    COND - Condition that is checked for simple use.\n \n+   Output:\n+   *COMP_VECTYPE - the vector type for the comparison.\n+\n    Returns whether a COND can be vectorized.  Checks whether\n    condition operands are supportable using vec_is_simple_use.  */\n \n static bool\n-vect_is_simple_cond (tree cond, loop_vec_info loop_vinfo)\n+vect_is_simple_cond (tree cond, loop_vec_info loop_vinfo, tree *comp_vectype)\n {\n   tree lhs, rhs;\n   tree def;\n   enum vect_def_type dt;\n+  tree vectype1 = NULL_TREE, vectype2 = NULL_TREE;\n \n   if (!COMPARISON_CLASS_P (cond))\n     return false;\n@@ -4699,8 +4703,8 @@ vect_is_simple_cond (tree cond, loop_vec_info loop_vinfo)\n   if (TREE_CODE (lhs) == SSA_NAME)\n     {\n       gimple lhs_def_stmt = SSA_NAME_DEF_STMT (lhs);\n-      if (!vect_is_simple_use (lhs, loop_vinfo, NULL, &lhs_def_stmt, &def,\n-                               &dt))\n+      if (!vect_is_simple_use_1 (lhs, loop_vinfo, NULL, &lhs_def_stmt, &def,\n+\t\t\t\t &dt, &vectype1))\n \treturn false;\n     }\n   else if (TREE_CODE (lhs) != INTEGER_CST && TREE_CODE (lhs) != REAL_CST\n@@ -4710,14 +4714,15 @@ vect_is_simple_cond (tree cond, loop_vec_info loop_vinfo)\n   if (TREE_CODE (rhs) == SSA_NAME)\n     {\n       gimple rhs_def_stmt = SSA_NAME_DEF_STMT (rhs);\n-      if (!vect_is_simple_use (rhs, loop_vinfo, NULL, &rhs_def_stmt, &def,\n-                               &dt))\n+      if (!vect_is_simple_use_1 (rhs, loop_vinfo, NULL, &rhs_def_stmt, &def,\n+\t\t\t\t &dt, &vectype2))\n \treturn false;\n     }\n   else if (TREE_CODE (rhs) != INTEGER_CST  && TREE_CODE (rhs) != REAL_CST\n \t   && TREE_CODE (rhs) != FIXED_CST)\n     return false;\n \n+  *comp_vectype = vectype1 ? vectype1 : vectype2;\n   return true;\n }\n \n@@ -4743,12 +4748,12 @@ vectorizable_condition (gimple stmt, gimple_stmt_iterator *gsi,\n   tree cond_expr, then_clause, else_clause;\n   stmt_vec_info stmt_info = vinfo_for_stmt (stmt);\n   tree vectype = STMT_VINFO_VECTYPE (stmt_info);\n+  tree comp_vectype;\n   tree vec_cond_lhs = NULL_TREE, vec_cond_rhs = NULL_TREE;\n   tree vec_then_clause = NULL_TREE, vec_else_clause = NULL_TREE;\n   tree vec_compare, vec_cond_expr;\n   tree new_temp;\n   loop_vec_info loop_vinfo = STMT_VINFO_LOOP_VINFO (stmt_info);\n-  enum machine_mode vec_mode;\n   tree def;\n   enum vect_def_type dt, dts[4];\n   int nunits = TYPE_VECTOR_SUBPARTS (vectype);\n@@ -4797,13 +4802,8 @@ vectorizable_condition (gimple stmt, gimple_stmt_iterator *gsi,\n   then_clause = gimple_assign_rhs2 (stmt);\n   else_clause = gimple_assign_rhs3 (stmt);\n \n-  if (!vect_is_simple_cond (cond_expr, loop_vinfo))\n-    return false;\n-\n-  /* We do not handle two different vector types for the condition\n-     and the values.  */\n-  if (!types_compatible_p (TREE_TYPE (TREE_OPERAND (cond_expr, 0)),\n-\t\t\t   TREE_TYPE (vectype)))\n+  if (!vect_is_simple_cond (cond_expr, loop_vinfo, &comp_vectype)\n+      || !comp_vectype)\n     return false;\n \n   if (TREE_CODE (then_clause) == SSA_NAME)\n@@ -4830,14 +4830,10 @@ vectorizable_condition (gimple stmt, gimple_stmt_iterator *gsi,\n \t   && TREE_CODE (else_clause) != FIXED_CST)\n     return false;\n \n-\n-  vec_mode = TYPE_MODE (vectype);\n-\n   if (!vec_stmt)\n     {\n       STMT_VINFO_TYPE (stmt_info) = condition_vec_info_type;\n-      return expand_vec_cond_expr_p (TREE_TYPE (gimple_assign_lhs (stmt)),\n-\t\t\t\t     vec_mode);\n+      return expand_vec_cond_expr_p (vectype, comp_vectype);\n     }\n \n   /* Transform */"}]}