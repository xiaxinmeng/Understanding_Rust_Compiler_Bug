{"sha": "4211a8fbc353ffb79e81ace5ed2f67cfd2002dcb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDIxMWE4ZmJjMzUzZmZiNzllODFhY2U1ZWQyZjY3Y2ZkMjAwMmRjYg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2000-11-27T16:23:27Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2000-11-27T16:23:27Z"}, "message": "i386.c (ix86_force_to_memory, [...]): New.\n\n\t* i386.c (ix86_force_to_memory, ix86_free_from_memory): New.\n\t* i386-protos.h (ix86_force_to_memory, ix86_free_from_memory): Declare\n\t* i386.md (float?i?f, int/fp operations): Rewrite spliters to use\n\tix86_force_to_memory and ix86_free_from_memory.\n\nFrom-SVN: r37797", "tree": {"sha": "821cefa05e63c8516d5446bc944351b6dd082c3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/821cefa05e63c8516d5446bc944351b6dd082c3a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4211a8fbc353ffb79e81ace5ed2f67cfd2002dcb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4211a8fbc353ffb79e81ace5ed2f67cfd2002dcb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4211a8fbc353ffb79e81ace5ed2f67cfd2002dcb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4211a8fbc353ffb79e81ace5ed2f67cfd2002dcb/comments", "author": null, "committer": null, "parents": [{"sha": "bb6ae7836af19c230d1aae0aa0941790e3b741d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb6ae7836af19c230d1aae0aa0941790e3b741d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb6ae7836af19c230d1aae0aa0941790e3b741d8"}], "stats": {"total": 156, "additions": 110, "deletions": 46}, "files": [{"sha": "816a0bb6ff04a2595cb1a8d1c91e99867ddbc683", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4211a8fbc353ffb79e81ace5ed2f67cfd2002dcb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4211a8fbc353ffb79e81ace5ed2f67cfd2002dcb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4211a8fbc353ffb79e81ace5ed2f67cfd2002dcb", "patch": "@@ -1,3 +1,10 @@\n+Mon Nov 27 17:22:56 MET 2000  Jan Hubicka  <jh@suse.cz>\n+\n+\t* i386.c (ix86_force_to_memory, ix86_free_from_memory): New.\n+\t* i386-protos.h (ix86_force_to_memory, ix86_free_from_memory): Declare\n+\t* i386.md (float?i?f, int/fp operations): Rewrite spliters to use\n+\tix86_force_to_memory and ix86_free_from_memory.\n+\n 2000-11-27  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* arm.md (arm_adddi3, adddi_sesidi_di, adddi_zesidi_di, arm_addsi3,"}, {"sha": "e000dcaed29fb6030f58d739afea97b05e35a1d9", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4211a8fbc353ffb79e81ace5ed2f67cfd2002dcb/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4211a8fbc353ffb79e81ace5ed2f67cfd2002dcb/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=4211a8fbc353ffb79e81ace5ed2f67cfd2002dcb", "patch": "@@ -128,6 +128,9 @@ extern int ix86_sched_reorder PARAMS ((FILE *, int, rtx *, int, int));\n extern int ix86_variable_issue PARAMS ((FILE *, int, rtx, int));\n extern enum machine_mode ix86_fp_compare_mode PARAMS ((enum rtx_code));\n \n+extern rtx ix86_force_to_memory PARAMS ((enum machine_mode, rtx));\n+extern void ix86_free_from_memory PARAMS ((enum machine_mode));\n+\n #ifdef TREE_CODE\n extern void init_cumulative_args PARAMS ((CUMULATIVE_ARGS *, tree, rtx));\n extern rtx function_arg PARAMS ((CUMULATIVE_ARGS *, enum machine_mode, tree, int));"}, {"sha": "9a80d004ece4715f15659e4b6743c1fa863ff900", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4211a8fbc353ffb79e81ace5ed2f67cfd2002dcb/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4211a8fbc353ffb79e81ace5ed2f67cfd2002dcb/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=4211a8fbc353ffb79e81ace5ed2f67cfd2002dcb", "patch": "@@ -8299,3 +8299,67 @@ ix86_expand_builtin (exp, target, subtarget, mode, ignore)\n   /* @@@ Should really do something sensible here.  */\n   return 0;\n }\n+\n+/* Store OPERAND to the memory after reload is completed.  This means\n+   that we can't easilly use assign_stack_local.  */\n+rtx\n+ix86_force_to_memory (mode, operand)\n+     enum machine_mode mode;\n+     rtx operand;\n+{\n+  if (!reload_completed)\n+    abort ();\n+  switch (mode)\n+    {\n+      case DImode:\n+\t{\n+\t  rtx operands[2];\n+\t  split_di (&operand, 1, operands, operands+1);\n+\t  emit_insn (\n+\t    gen_rtx_SET (VOIDmode,\n+\t\t\t gen_rtx_MEM (SImode,\n+\t\t\t\t      gen_rtx_PRE_DEC (Pmode,\n+\t\t\t\t\t\t       stack_pointer_rtx)),\n+\t\t\t operands[1]));\n+\t  emit_insn (\n+\t    gen_rtx_SET (VOIDmode,\n+\t\t\t gen_rtx_MEM (SImode,\n+\t\t\t\t      gen_rtx_PRE_DEC (Pmode,\n+\t\t\t\t\t\t       stack_pointer_rtx)),\n+\t\t\t operands[0]));\n+\t}\n+\tbreak;\n+      case HImode:\n+\t/* It is better to store HImodes as SImodes.  */\n+\tif (!TARGET_PARTIAL_REG_STALL)\n+\t  operand = gen_lowpart (SImode, operand);\n+\t/* FALLTHRU */\n+      case SImode:\n+\temit_insn (\n+\t  gen_rtx_SET (VOIDmode,\n+\t\t       gen_rtx_MEM (GET_MODE (operand),\n+\t\t\t\t    gen_rtx_PRE_DEC (SImode,\n+\t\t\t\t\t\t     stack_pointer_rtx)),\n+\t\t       operand));\n+\tbreak;\n+      default:\n+\tabort();\n+    }\n+  return gen_rtx_MEM (mode, stack_pointer_rtx);\n+}\n+\n+/* Free operand from the memory.  */\n+void\n+ix86_free_from_memory (mode)\n+     enum machine_mode mode;\n+{\n+  /* Use LEA to deallocate stack space.  In peephole2 it will be converted\n+     to pop or add instruction if registers are available.  */\n+  emit_insn (gen_rtx_SET (VOIDmode, stack_pointer_rtx,\n+\t\t\t  gen_rtx_PLUS (Pmode, stack_pointer_rtx,\n+\t\t\t\t\tGEN_INT (mode == DImode\n+\t\t\t\t\t\t ? 8\n+\t\t\t\t\t\t : mode == HImode && TARGET_PARTIAL_REG_STALL\n+\t\t\t\t\t\t ? 2\n+\t\t\t\t\t\t : 4))));\n+}"}, {"sha": "2b5d3b8161f81ac06991a28e8e749f1833b4bf2f", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 36, "deletions": 46, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4211a8fbc353ffb79e81ace5ed2f67cfd2002dcb/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4211a8fbc353ffb79e81ace5ed2f67cfd2002dcb/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=4211a8fbc353ffb79e81ace5ed2f67cfd2002dcb", "patch": "@@ -3683,39 +3683,17 @@\n ;; %%% Kill these when reload knows how to do it.\n (define_split\n   [(set (match_operand 0 \"register_operand\" \"\")\n-\t(float (match_operand:HI 1 \"register_operand\" \"\")))]\n+\t(float (match_operand 1 \"register_operand\" \"\")))]\n   \"reload_completed && FLOAT_MODE_P (GET_MODE (operands[0]))\"\n-  [(set (mem:HI (pre_dec:SI (reg:SI 7))) (match_dup 1))\n-   (set (match_dup 0) (match_dup 2))\n-   (set (reg:SI 7) (plus:SI (reg:SI 7) (const_int 2)))]\n-  \"operands[2] = gen_rtx_FLOAT (GET_MODE (operands[0]),\n-\t\t\t       \tgen_rtx_MEM (HImode, stack_pointer_rtx));\")\n-\n-(define_split\n-  [(set (match_operand 0 \"register_operand\" \"\")\n-\t(float (match_operand:SI 1 \"register_operand\" \"\")))]\n-  \"reload_completed && FLOAT_MODE_P (GET_MODE (operands[0]))\"\n-  [(set (mem:SI (pre_dec:SI (reg:SI 7))) (match_dup 1))\n-   (set (match_dup 0) (match_dup 2))\n-   (parallel [(set (match_dup 1) (mem:SI (reg:SI 7)))\n-\t      (set (reg:SI 7) (plus:SI (reg:SI 7) (const_int 4)))])]\n-  \"operands[2] = gen_rtx_FLOAT (GET_MODE (operands[0]),\n-\t\t\t       \tgen_rtx_MEM (SImode, stack_pointer_rtx));\")\n-\n-(define_split\n-  [(set (match_operand 0 \"register_operand\" \"\")\n-\t(float (match_operand:DI 1 \"nonmemory_operand\" \"\")))]\n-  \"reload_completed && FLOAT_MODE_P (GET_MODE (operands[0]))\"\n-  [(set (mem:SI (pre_dec:SI (reg:SI 7))) (match_dup 2))\n-   (set (mem:SI (pre_dec:SI (reg:SI 7))) (match_dup 1))\n-   (set (match_dup 0) (match_dup 3))\n-   (parallel [(set (match_dup 1) (mem:SI (reg:SI 7)))\n-\t      (set (reg:SI 7) (plus:SI (reg:SI 7) (const_int 4)))])\n-   (parallel [(set (match_dup 2) (mem:SI (reg:SI 7)))\n-\t      (set (reg:SI 7) (plus:SI (reg:SI 7) (const_int 4)))])]\n-  \"split_di (operands+1, 1, operands+1, operands+2);\n-   operands[3] = gen_rtx_FLOAT (GET_MODE (operands[0]),\n-\t\t\t       \tgen_rtx_MEM (DImode, stack_pointer_rtx));\")\n+  [(const_int 0)]\n+  \"\n+{\n+  operands[2] = ix86_force_to_memory (GET_MODE (operands[1]), operands[1]);\n+  operands[2] = gen_rtx_FLOAT (GET_MODE (operands[0]), operands[2]);\n+  emit_insn (gen_rtx_SET (VOIDmode, operands[0], operands[2]));\n+  ix86_free_from_memory (GET_MODE (operands[1]));\n+  DONE;\n+}\")\n \f\n ;; Add instructions\n \n@@ -9640,13 +9618,19 @@\n \t    (match_operand 2 \"register_operand\" \"\")]))]\n   \"TARGET_80387 && reload_completed\n    && FLOAT_MODE_P (GET_MODE (operands[0]))\"\n-  [(set (mem:SI (pre_dec:SI (reg:SI 7))) (match_dup 1))\n-   (set (match_dup 0)\n-\t(match_op_dup 3 [(match_dup 4) (match_dup 2)]))\n-   (parallel [(set (match_dup 1) (mem:SI (reg:SI 7)))\n-              (set (reg:SI 7) (plus:SI (reg:SI 7) (const_int 4)))])]\n-  \"operands[4] = gen_rtx_FLOAT (GET_MODE (operands[0]),\n-\t\t\t       \tgen_rtx_MEM (SImode, stack_pointer_rtx));\")\n+  [(const_int 0)]\n+  \"\n+{ \n+  operands[4] = ix86_force_to_memory (GET_MODE (operands[1]), operands[1]);\n+  operands[4] = gen_rtx_FLOAT (GET_MODE (operands[0]), operands[4]);\n+  emit_insn (gen_rtx_SET (VOIDmode, operands[0],\n+\t\t\t  gen_rtx_fmt_ee (GET_CODE (operands[3]),\n+\t\t\t\t\t  GET_MODE (operands[3]),\n+\t\t\t\t\t  operands[4],\n+\t\t\t\t\t  operands[2])));\n+  ix86_free_from_memory (GET_MODE (operands[1]));\n+  DONE;\n+}\")\n \n (define_split\n   [(set (match_operand 0 \"register_operand\" \"\")\n@@ -9655,13 +9639,19 @@\n \t    (float (match_operand:SI 2 \"register_operand\" \"\"))]))]\n   \"TARGET_80387 && reload_completed\n    && FLOAT_MODE_P (GET_MODE (operands[0]))\"\n-  [(set (mem:SI (pre_dec:SI (reg:SI 7))) (match_dup 2))\n-   (set (match_dup 0)\n-\t(match_op_dup 3 [(match_dup 1) (match_dup 4)]))\n-   (parallel [(set (match_dup 2) (mem:SI (reg:SI 7)))\n-              (set (reg:SI 7) (plus:SI (reg:SI 7) (const_int 4)))])]\n-  \"operands[4] = gen_rtx_FLOAT (GET_MODE (operands[0]),\n-\t\t\t       \tgen_rtx_MEM (SImode, stack_pointer_rtx));\")\n+  [(const_int 0)]\n+  \"\n+{\n+  operands[4] = ix86_force_to_memory (GET_MODE (operands[2]), operands[2]);\n+  operands[4] = gen_rtx_FLOAT (GET_MODE (operands[0]), operands[4]);\n+  emit_insn (gen_rtx_SET (VOIDmode, operands[0],\n+\t\t\t  gen_rtx_fmt_ee (GET_CODE (operands[3]),\n+\t\t\t\t\t  GET_MODE (operands[3]),\n+\t\t\t\t\t  operands[1],\n+\t\t\t\t\t  operands[4])));\n+  ix86_free_from_memory (GET_MODE (operands[2]));\n+  DONE;\n+}\")\n \f\n ;; FPU special functions.\n "}]}