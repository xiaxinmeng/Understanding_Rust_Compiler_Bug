{"sha": "bc0f8bd47860ef185442971eb3e5cea226962ef5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmMwZjhiZDQ3ODYwZWYxODU0NDI5NzFlYjNlNWNlYTIyNjk2MmVmNQ==", "commit": {"author": {"name": "Mikael Morin", "email": "mikael.morin@tele2.fr", "date": "2008-11-25T13:27:26Z"}, "committer": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2008-11-25T13:27:26Z"}, "message": "re PR fortran/36463 (gfc_get_default_type(): Bad symbol)\n\n2008-11-25  Mikael Morin  <mikael.morin@tele2.fr>\n\n\tPR fortran/36463\n\t* expr.c (replace_symbol): Don't replace the symtree\n\tif the expresion is an intrinsic function. Don't create\n\tnon-existent symtrees.  Use symbol's name instead of symtree's,\n\tdifferent in case of module procedure dummy arguments.\n\n2008-11-25  Mikael Morin  <mikael.morin@tele2.fr>\n\n\tPR fortran/36463\n\t* gfortran.dg/proc_decl_20.f90: New test.\n\nFrom-SVN: r142191", "tree": {"sha": "4731d54804dc0b9fe0fc75c8c985166a91c4f7b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4731d54804dc0b9fe0fc75c8c985166a91c4f7b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bc0f8bd47860ef185442971eb3e5cea226962ef5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc0f8bd47860ef185442971eb3e5cea226962ef5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc0f8bd47860ef185442971eb3e5cea226962ef5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc0f8bd47860ef185442971eb3e5cea226962ef5/comments", "author": null, "committer": null, "parents": [{"sha": "056c165212dafd1e959042bfac11509eb0e187d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/056c165212dafd1e959042bfac11509eb0e187d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/056c165212dafd1e959042bfac11509eb0e187d7"}], "stats": {"total": 48, "additions": 46, "deletions": 2}, "files": [{"sha": "b22c8da5eaef87cc516798a4e4a4d19423755762", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc0f8bd47860ef185442971eb3e5cea226962ef5/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc0f8bd47860ef185442971eb3e5cea226962ef5/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=bc0f8bd47860ef185442971eb3e5cea226962ef5", "patch": "@@ -1,3 +1,11 @@\n+2008-11-25  Mikael Morin  <mikael.morin@tele2.fr>\n+\n+\tPR fortran/36463\n+\t* expr.c (replace_symbol): Don't replace the symtree\n+\tif the expresion is an intrinsic function. Don't create\n+\tnon-existent symtrees.  Use symbol's name instead of symtree's,\n+\tdifferent in case of module procedure dummy arguments.\n+\n 2008-11-25  Jan Kratochvil  <jan.kratochvil@redhat.com>\n \n \tPR fortran/38248"}, {"sha": "4017cf91f331157f2fbeef0d995bc34d8da56f03", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc0f8bd47860ef185442971eb3e5cea226962ef5/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc0f8bd47860ef185442971eb3e5cea226962ef5/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=bc0f8bd47860ef185442971eb3e5cea226962ef5", "patch": "@@ -3510,11 +3510,18 @@ gfc_expr_check_typed (gfc_expr* e, gfc_namespace* ns, bool strict)\n static bool\n replace_symbol (gfc_expr *expr, gfc_symbol *sym, int *i ATTRIBUTE_UNUSED)\n {\n-  if ((expr->expr_type == EXPR_VARIABLE || expr->expr_type == EXPR_FUNCTION)\n+  if ((expr->expr_type == EXPR_VARIABLE \n+       || (expr->expr_type == EXPR_FUNCTION\n+\t   && !gfc_is_intrinsic (expr->symtree->n.sym, 0, expr->where)))\n       && expr->symtree->n.sym->ns == sym->ts.interface->formal_ns)\n     {\n       gfc_symtree *stree;\n-      gfc_get_sym_tree (expr->symtree->name, sym->formal_ns, &stree);\n+      gfc_namespace *ns = sym->formal_ns;\n+      /* Don't use gfc_get_symtree as we prefer to fail badly if we don't find\n+\t the symtree rather than create a new one (and probably fail later).  */\n+      stree = gfc_find_symtree (ns ? ns->sym_root : gfc_current_ns->sym_root,\n+\t\t      \t\texpr->symtree->n.sym->name);\n+      gcc_assert (stree);\n       stree->n.sym->attr = expr->symtree->n.sym->attr;\n       expr->symtree = stree;\n     }"}, {"sha": "d3c09d1ecaac649189381f26c792b79056d8d7ce", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc0f8bd47860ef185442971eb3e5cea226962ef5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc0f8bd47860ef185442971eb3e5cea226962ef5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bc0f8bd47860ef185442971eb3e5cea226962ef5", "patch": "@@ -1,3 +1,8 @@\n+2008-11-25  Mikael Morin  <mikael.morin@tele2.fr>\n+\n+\tPR fortran/36463\n+\t* gfortran.dg/proc_decl_20.f90: New test.\n+\n 2008-11-25  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/38151"}, {"sha": "612dac19529e3d0efdca90fc9a9961366a93020c", "filename": "gcc/testsuite/gfortran.dg/proc_decl_20.f90", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc0f8bd47860ef185442971eb3e5cea226962ef5/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_decl_20.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc0f8bd47860ef185442971eb3e5cea226962ef5/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_decl_20.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_decl_20.f90?ref=bc0f8bd47860ef185442971eb3e5cea226962ef5", "patch": "@@ -0,0 +1,24 @@\n+! { dg-do compile }\n+!\n+! PR fortran/36463\n+! Gfortran used to fail on this testcase with: \n+! gfc_get_default_type(): Bad symbol '@0'\n+!\n+! Original program by James Van Buskirk\n+! Reduced by Janus Weil <janus@gcc.gnu.org>\n+\n+module other_fun\n+   interface\n+      function abstract_fun(x)\n+         integer x\n+         integer abstract_fun(x)\n+      end function abstract_fun\n+   end interface\n+end module other_fun\n+\n+ program fptr\n+    use other_fun\n+    procedure(abstract_fun) :: fun\n+ end program fptr\n+\n+! { dg-final { cleanup-modules \"other_fun\" } }"}]}