{"sha": "ddf0fc72240ce2a18b80e1f957fc5fb6826cca65", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGRmMGZjNzIyNDBjZTJhMThiODBlMWY5NTdmYzVmYjY4MjZjY2E2NQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-09-23T11:32:43Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-09-23T11:32:43Z"}, "message": "c-common.c (cpp_define_data_format): Remove.\n\n        * c-common.c (cpp_define_data_format): Remove.\n        (cb_register_builtins): Don't define __WCHAR_BIT__, __SHRT_BIT__,\n        __INT_BIT__, __LONG_BIT__, __LONG_LONG_BIT__, __FLOAT_BIT__,\n        __DOUBLE_BIT__, __LONG_DOUBLE_BIT__.\n        * doc/cpp.texi: Don't document them either.\n        (__SCHAR_MAX__, __SHRT_MAX__, __INT_MAX__, __LONG_MAX__,\n        __LONG_LONG_MAX__): Document.\n        (__TARGET_FLOAT_FORMAT__): Remove.\n\nFrom-SVN: r57436", "tree": {"sha": "ec12c9c15f5ee38f8bd9ea70ac2462ee81fcf2b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec12c9c15f5ee38f8bd9ea70ac2462ee81fcf2b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ddf0fc72240ce2a18b80e1f957fc5fb6826cca65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddf0fc72240ce2a18b80e1f957fc5fb6826cca65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddf0fc72240ce2a18b80e1f957fc5fb6826cca65", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddf0fc72240ce2a18b80e1f957fc5fb6826cca65/comments", "author": null, "committer": null, "parents": [{"sha": "a520ff954b20bf6ce376b512867b8d4865708c9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a520ff954b20bf6ce376b512867b8d4865708c9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a520ff954b20bf6ce376b512867b8d4865708c9d"}], "stats": {"total": 96, "additions": 26, "deletions": 70}, "files": [{"sha": "f5883aeac05e7b59c9ed3bc40075e6db28c00b3c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddf0fc72240ce2a18b80e1f957fc5fb6826cca65/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddf0fc72240ce2a18b80e1f957fc5fb6826cca65/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ddf0fc72240ce2a18b80e1f957fc5fb6826cca65", "patch": "@@ -1,3 +1,14 @@\n+2002-09-23  Richard Henderson  <rth@redhat.com>\n+\n+\t* c-common.c (cpp_define_data_format): Remove.\n+\t(cb_register_builtins): Don't define __WCHAR_BIT__, __SHRT_BIT__,\n+\t__INT_BIT__, __LONG_BIT__, __LONG_LONG_BIT__, __FLOAT_BIT__,\n+\t__DOUBLE_BIT__, __LONG_DOUBLE_BIT__.\n+\t* doc/cpp.texi: Don't document them either.\n+\t(__SCHAR_MAX__, __SHRT_MAX__, __INT_MAX__, __LONG_MAX__,\n+\t__LONG_LONG_MAX__): Document.\n+\t(__TARGET_FLOAT_FORMAT__): Remove.\n+\n 2002-09-23  Richard Henderson  <rth@redhat.com>\n \n \t* real.c (do_multiply): Normalize U before addition."}, {"sha": "960e4cfe75bd89c3edda63edb416fabbde766c67", "filename": "gcc/c-common.c", "status": "modified", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddf0fc72240ce2a18b80e1f957fc5fb6826cca65/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddf0fc72240ce2a18b80e1f957fc5fb6826cca65/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=ddf0fc72240ce2a18b80e1f957fc5fb6826cca65", "patch": "@@ -783,7 +783,6 @@ static void builtin_define_with_hex_fp_value PARAMS ((const char *, tree,\n \t\t\t\t\t\t      int, const char *,\n \t\t\t\t\t\t      const char *));\n static void builtin_define_type_max PARAMS ((const char *, tree, int));\n-static void cpp_define_data_format PARAMS ((cpp_reader *));\n static void builtin_define_type_precision PARAMS ((const char *, tree));\n static void builtin_define_float_constants PARAMS ((const char *,\n \t\t\t\t\t\t    const char *, tree));\n@@ -4701,44 +4700,6 @@ boolean_increment (code, arg)\n   return val;\n }\n \f\n-/* Define macros necessary to describe fundamental data type formats.  */\n-static void\n-cpp_define_data_format (pfile)\n-    cpp_reader *pfile;\n-{\n-  const char *format;\n-\n-  /* Define supported floating-point format enumeration values.  */\n-  cpp_define (pfile, \"__UNKNOWN_FORMAT__=0\");\n-  cpp_define (pfile, \"__IEEE_FORMAT__=1\");\n-  cpp_define (pfile, \"__IBM_FORMAT__=2\");\n-  cpp_define (pfile, \"__C4X_FORMAT__=3\");\n-  cpp_define (pfile, \"__VAX_FORMAT__=4\");\n-  \n-  switch (TARGET_FLOAT_FORMAT)\n-    {\n-    case UNKNOWN_FLOAT_FORMAT:\n-      format = \"__UNKNOWN_FORMAT__\";\n-      break;\n-    case IEEE_FLOAT_FORMAT:\n-      format = \"__IEEE_FORMAT__\";\n-      break;\n-    case VAX_FLOAT_FORMAT:\n-      format = \"__VAX_FORMAT__\";\n-      break;\n-    case IBM_FLOAT_FORMAT:\n-      format = \"__IBM_FORMAT__\";\n-      break;\n-    case C4X_FLOAT_FORMAT:\n-      format = \"__C4X_FORMAT__\";\n-      break;\n-    default:\n-      abort();\n-    }\n-\n-  builtin_define_with_value (\"__GCC_FLOAT_FORMAT__\", format, 0);\n-}\n-\n /* Define NAME with value TYPE precision.  */\n static void\n builtin_define_type_precision (name, type)\n@@ -4955,15 +4916,6 @@ cb_register_builtins (pfile)\n   builtin_define_type_max (\"__LONG_LONG_MAX__\", long_long_integer_type_node, 2);\n \n   builtin_define_type_precision (\"__CHAR_BIT__\", char_type_node);\n-  builtin_define_type_precision (\"__WCHAR_BIT__\", wchar_type_node);\n-  builtin_define_type_precision (\"__SHRT_BIT__\", short_integer_type_node);\n-  builtin_define_type_precision (\"__INT_BIT__\", integer_type_node);\n-  builtin_define_type_precision (\"__LONG_BIT__\", long_integer_type_node);\n-  builtin_define_type_precision (\"__LONG_LONG_BIT__\",\n-                                 long_long_integer_type_node);\n-  builtin_define_type_precision (\"__FLOAT_BIT__\", float_type_node);\n-  builtin_define_type_precision (\"__DOUBLE_BIT__\", double_type_node);\n-  builtin_define_type_precision (\"__LONG_DOUBLE_BIT__\", long_double_type_node);\n \n   /* float.h needs to know these.  */\n \n@@ -5013,8 +4965,6 @@ cb_register_builtins (pfile)\n   if (c_language == clk_cplusplus && TREE_UNSIGNED (wchar_type_node))\n     cpp_define (pfile, \"__WCHAR_UNSIGNED__\");\n \n-  cpp_define_data_format (pfile);\n-  \n   /* Make the choice of ObjC runtime visible to source code.  */\n   if (flag_objc && flag_next_runtime)\n     cpp_define (pfile, \"__NEXT_RUNTIME__\");"}, {"sha": "6aaea597a7f2cc792f74d10f34019cf2b3a239b4", "filename": "gcc/doc/cpp.texi", "status": "modified", "additions": 15, "deletions": 20, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddf0fc72240ce2a18b80e1f957fc5fb6826cca65/gcc%2Fdoc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddf0fc72240ce2a18b80e1f957fc5fb6826cca65/gcc%2Fdoc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp.texi?ref=ddf0fc72240ce2a18b80e1f957fc5fb6826cca65", "patch": "@@ -2007,20 +2007,21 @@ these macros directly; instead, include the appropriate headers and use\n the typedefs.\n \n @item __CHAR_BIT__\n-@itemx __WCHAR_BIT__\n-@itemx __SHRT_BIT__\n-@itemx __INT_BIT__\n-@itemx __LONG_BIT__\n-@itemx __LONG_LONG_BIT__\n-@itemx __FLOAT_BIT__\n-@itemx __DOUBLE_BIT__\n-@itemx __LONG_DOUBLE_BIT__\n-These macros are defined to the number of bits used in the\n-representation of the data types @code{char}, @code{wchar_t},\n-@code{short}, @code{int}, @code{long}, @code{long long}, @code{float},\n-@code{double} and @code{long double}.  They exist to make the standard\n-header given numerical limits work correctly.  You should not use\n-these macros directly; instead, include the appropriate headers.\n+Defined to the number of bits used in the representation of the\n+@code{char} data type.  It exists to make the standard header given\n+numerical limits work correctly.  You should not use\n+this macro directly; instead, include the appropriate headers.\n+\n+@item __SCHAR_MAX__\n+@itemx __SHRT_MAX__\n+@itemx __INT_MAX__\n+@itemx __LONG_MAX__\n+@itemx __LONG_LONG_MAX__\n+Defined to the maximum value of the @code{signed char}, @code{signed short},\n+@code{signed int}, @code{signed long}, and @code{signed long long} types\n+respectively.  They exist to make the standard header given numerical limits\n+work correctly.  You should not use these macros directly; instead, include\n+the appropriate headers.\n \n @item __USING_SJLJ_EXCEPTIONS__\n This macro is defined, with value 1, if the compiler uses the old\n@@ -2032,12 +2033,6 @@ This macro is defined, with value 1, if (and only if) the NeXT runtime\n (as in @option{-fnext-runtime}) is in use for Objective-C.  If the GNU\n runtime is used, this macro is not defined, so that you can use this\n macro to determine which runtime (NeXT or GNU) is being used.\n-\n-@item __TARGET_FLOAT_FORMAT__\n-This macro is defined to describe the floating-point format used by the\n-target.  It has value in the set comprised of:\n-@code{__UNKNOWN_FORMAT__}, @code{__IEEE_FORMAT__},\n-@code{__IBM_FORMAT__}, @code{__C4X_FORMAT__} and @code{__VAX_FORMAT__}.\n @end table\n \n @node System-specific Predefined Macros"}]}