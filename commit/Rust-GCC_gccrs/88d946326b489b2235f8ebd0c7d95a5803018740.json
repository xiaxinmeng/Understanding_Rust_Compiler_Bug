{"sha": "88d946326b489b2235f8ebd0c7d95a5803018740", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODhkOTQ2MzI2YjQ4OWIyMjM1ZjhlYmQwYzdkOTVhNTgwMzAxODc0MA==", "commit": {"author": {"name": "Ramana Radhakrishnan", "email": "ramana@gcc.gnu.org", "date": "2014-04-04T16:10:07Z"}, "committer": {"name": "Ramana Radhakrishnan", "email": "ramana@gcc.gnu.org", "date": "2014-04-04T16:10:07Z"}, "message": "Fix PR debug/60655 - part 1\n\n\n\nThis is a partial fix for PR60655 where dwarf2out.c rejects NOT of a\nvalue in const_ok_for_output_1. There is still a problem with the\ntestcase on armhf where we get operations of the form, const (minus\n(const_int) (symref)) without the -fdata-sections option which is just\nweird. I'm not yet sure where this is produced from and will not have\nthe time to dig further today.\n\n\nAs Jakub said on IRC, const_ok_for_output_1 is called only with\npartial rtx's and therefore disabling minus (const_int) (symref) might\nnot be the best thing to do especially if this were part of plus\n(symref) (minus (const int) (symref)) and both symrefs were in the\nsame section.\n\n\nBootstrapped and regtested on armhf\n\nBootstrap and regression test running on x86_64.\n\nOk to commit ?\n\nregards\nRamana\n\ngcc/\n\n<DATE>   Jakub Jelinek <jakub@redhat.com>\n         Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n\n\t* dwarf2out.c (const_ok_for_output_1): Reject expressions\n\tcontaining a NOT.\n\ngcc/testsuite\n\n<DATE>  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n\n\t* gcc.c-torture/compile/pr60655-1.c: New test.\n\nFrom-SVN: r209121", "tree": {"sha": "50c846818a329a7e2c5f0920aabec1efa7b38dd7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/50c846818a329a7e2c5f0920aabec1efa7b38dd7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88d946326b489b2235f8ebd0c7d95a5803018740", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88d946326b489b2235f8ebd0c7d95a5803018740", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88d946326b489b2235f8ebd0c7d95a5803018740", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88d946326b489b2235f8ebd0c7d95a5803018740/comments", "author": null, "committer": null, "parents": [{"sha": "094bc2190ac07a4ff00aa1d8a42fca01925bb30c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/094bc2190ac07a4ff00aa1d8a42fca01925bb30c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/094bc2190ac07a4ff00aa1d8a42fca01925bb30c"}], "stats": {"total": 55, "additions": 54, "deletions": 1}, "files": [{"sha": "ad1d2c15e638ec51331450706ff53d0ec9230dcd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88d946326b489b2235f8ebd0c7d95a5803018740/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88d946326b489b2235f8ebd0c7d95a5803018740/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=88d946326b489b2235f8ebd0c7d95a5803018740", "patch": "@@ -1,3 +1,10 @@\n+2014-04-04  Jakub Jelinek  <jakub@redhat.com>\n+\tRamana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n+\n+\tPR debug/60655\n+\t* dwarf2out.c (const_ok_for_output_1): Reject expressions\n+\tcontaining a NOT.\n+\n 2014-04-04  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \tPR bootstrap/60743"}, {"sha": "67b37eba506644d214e57a1c99d28a88468734d4", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88d946326b489b2235f8ebd0c7d95a5803018740/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88d946326b489b2235f8ebd0c7d95a5803018740/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=88d946326b489b2235f8ebd0c7d95a5803018740", "patch": "@@ -11325,8 +11325,18 @@ const_ok_for_output_1 (rtx *rtlp, void *data ATTRIBUTE_UNUSED)\n       return 1;\n     }\n \n+  /* FIXME: Refer to PR60655. It is possible for simplification\n+     of rtl expressions in var tracking to produce such expressions.\n+     We should really identify / validate expressions\n+     enclosed in CONST that can be handled by assemblers on various\n+     targets and only handle legitimate cases here.  */\n   if (GET_CODE (rtl) != SYMBOL_REF)\n-    return 0;\n+    {\n+      if (GET_CODE (rtl) == NOT)\n+\t  return 1;\n+\n+      return 0;\n+    }\n \n   if (CONSTANT_POOL_ADDRESS_P (rtl))\n     {"}, {"sha": "11a0a5e21a7a9b9c48c3e58a5c81ab033aa95255", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88d946326b489b2235f8ebd0c7d95a5803018740/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88d946326b489b2235f8ebd0c7d95a5803018740/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=88d946326b489b2235f8ebd0c7d95a5803018740", "patch": "@@ -1,3 +1,8 @@\n+2014-04-04  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n+\n+\tPR debug/60655\n+\t* gcc.c-torture/compile/pr60655-1.c: New test.\n+\n 2014-04-04  Martin Jambor  <mjambor@suse.cz>\n \n \tPR ipa/60640"}, {"sha": "5f387017340a9d4b6857f0bbb5e5a869fec3898b", "filename": "gcc/testsuite/gcc.c-torture/compile/pr60655-1.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88d946326b489b2235f8ebd0c7d95a5803018740/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr60655-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88d946326b489b2235f8ebd0c7d95a5803018740/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr60655-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr60655-1.c?ref=88d946326b489b2235f8ebd0c7d95a5803018740", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-options \"-fdata-sections\" } */\n+\n+typedef unsigned char unit;\n+typedef unit *unitptr;\n+extern short global_precision;\n+typedef unsigned int size_t;\n+extern void *memcpy (void *dest, const void *src, size_t n);\n+\n+short mp_compare(const unit* r1, const unit* r2)\n+{\n+  register short precision;\n+  precision = global_precision;\n+  (r1) = ((r1)+(precision)-1);\n+  (r2) = ((r2)+(precision)-1);\n+  do\n+    { if (*r1 < *r2)\n+\treturn(-1);\n+      if (*((r1)--) > *((r2)--))\n+\treturn(1);\n+    } while (--precision);\n+}\n+\n+static unit modulus[((1280+(2*8))/8)];\n+static unit d_data[((1280+(2*8))/8)*2];\n+\n+int upton_modmult (unitptr prod, unitptr multiplicand, unitptr multiplier)\n+{\n+ unitptr d = d_data;\n+ while (mp_compare(d,modulus) > 0)\n+   memcpy((void*)(prod), (const void*)(d), (global_precision));\n+}"}]}