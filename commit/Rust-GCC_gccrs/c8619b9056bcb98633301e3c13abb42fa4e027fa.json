{"sha": "c8619b9056bcb98633301e3c13abb42fa4e027fa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzg2MTliOTA1NmJjYjk4NjMzMzAxZTNjMTNhYmI0MmZhNGUwMjdmYQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2004-06-23T08:41:55Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2004-06-23T08:41:55Z"}, "message": "* doc/extend.texi (Function Attributes): Alphabetize.\n\nFrom-SVN: r83543", "tree": {"sha": "fc4e79fb297f9de148d8dca30fcfc05dc1415cce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc4e79fb297f9de148d8dca30fcfc05dc1415cce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8619b9056bcb98633301e3c13abb42fa4e027fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8619b9056bcb98633301e3c13abb42fa4e027fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8619b9056bcb98633301e3c13abb42fa4e027fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8619b9056bcb98633301e3c13abb42fa4e027fa/comments", "author": null, "committer": null, "parents": [{"sha": "a52a0a7feaf1813fac7d38a61341e0894f89fba6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a52a0a7feaf1813fac7d38a61341e0894f89fba6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a52a0a7feaf1813fac7d38a61341e0894f89fba6"}], "stats": {"total": 931, "additions": 474, "deletions": 457}, "files": [{"sha": "b496a34f7ad58cb3a10664692e05d0a47b9c79af", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8619b9056bcb98633301e3c13abb42fa4e027fa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8619b9056bcb98633301e3c13abb42fa4e027fa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c8619b9056bcb98633301e3c13abb42fa4e027fa", "patch": "@@ -1,3 +1,7 @@\n+2004-06-23  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* doc/extend.texi (Function Attributes): Alphabetize.\n+\n 2004-06-23  Richard Henderson  <rth@redhat.com>\n \n \t* c-gimplify.c (gimplify_decl_stmt): Update gimplify_type_sizes call.\n@@ -3107,6 +3111,7 @@\n \t(expand_return): Don't check for possible tail recursion.\n \t* tree.h (optimize_tail_recursion): Remove prototype.\n \n+>>>>>>> 2.4079\n 2004-06-02  Jan Hubicka  <jh@suse.cz>\n \n \t* tree-cfg.c (tree_find_edge_insert_loc):  Allow inserting before"}, {"sha": "251defa06451ac8a3c87191e64c8b970b1d7007d", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 469, "deletions": 457, "changes": 926, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8619b9056bcb98633301e3c13abb42fa4e027fa/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8619b9056bcb98633301e3c13abb42fa4e027fa/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=c8619b9056bcb98633301e3c13abb42fa4e027fa", "patch": "@@ -1913,90 +1913,39 @@ you may use @code{__noreturn__} instead of @code{noreturn}.\n attributes.\n \n @table @code\n-@cindex @code{noreturn} function attribute\n-@item noreturn\n-A few standard library functions, such as @code{abort} and @code{exit},\n-cannot return.  GCC knows this automatically.  Some programs define\n-their own functions that never return.  You can declare them\n-@code{noreturn} to tell the compiler this fact.  For example,\n-\n-@smallexample\n-@group\n-void fatal () __attribute__ ((noreturn));\n-\n-void\n-fatal (/* @r{@dots{}} */)\n-@{\n-  /* @r{@dots{}} */ /* @r{Print error message.} */ /* @r{@dots{}} */\n-  exit (1);\n-@}\n-@end group\n-@end smallexample\n-\n-The @code{noreturn} keyword tells the compiler to assume that\n-@code{fatal} cannot return.  It can then optimize without regard to what\n-would happen if @code{fatal} ever did return.  This makes slightly\n-better code.  More importantly, it helps avoid spurious warnings of\n-uninitialized variables.\n-\n-The @code{noreturn} keyword does not affect the exceptional path when that\n-applies: a @code{noreturn}-marked function may still return to the caller\n-by throwing an exception.\n-\n-Do not assume that registers saved by the calling function are\n-restored before calling the @code{noreturn} function.\n+@c Keep this table alphabetized by attribute name. Treat _ as space.\n \n-It does not make sense for a @code{noreturn} function to have a return\n-type other than @code{void}.\n-\n-The attribute @code{noreturn} is not implemented in GCC versions\n-earlier than 2.5.  An alternative way to declare that a function does\n-not return, which works in the current version and in some older\n-versions, is as follows:\n+@item alias (\"@var{target}\")\n+@cindex @code{alias} attribute\n+The @code{alias} attribute causes the declaration to be emitted as an\n+alias for another symbol, which must be specified.  For instance,\n \n @smallexample\n-typedef void voidfn ();\n-\n-volatile voidfn fatal;\n+void __f () @{ /* @r{Do something.} */; @}\n+void f () __attribute__ ((weak, alias (\"__f\")));\n @end smallexample\n \n-@cindex @code{noinline} function attribute\n-@item noinline\n-This function attribute prevents a function from being considered for\n-inlining.\n+declares @samp{f} to be a weak alias for @samp{__f}.  In C++, the\n+mangled name for the target must be used.\n+\n+Not all target machines support this attribute.\n \n-@cindex @code{always_inline} function attribute\n @item always_inline\n+@cindex @code{always_inline} function attribute\n Generally, functions are not inlined unless optimization is specified.\n For functions declared inline, this attribute inlines the function even\n if no optimization level was specified.\n \n-@cindex @code{pure} function attribute\n-@item pure\n-Many functions have no effects except the return value and their\n-return value depends only on the parameters and/or global variables.\n-Such a function can be subject\n-to common subexpression elimination and loop optimization just as an\n-arithmetic operator would be.  These functions should be declared\n-with the attribute @code{pure}.  For example,\n-\n-@smallexample\n-int square (int) __attribute__ ((pure));\n-@end smallexample\n-\n-@noindent\n-says that the hypothetical function @code{square} is safe to call\n-fewer times than the program says.\n-\n-Some of common examples of pure functions are @code{strlen} or @code{memcmp}.\n-Interesting non-pure functions are functions with infinite loops or those\n-depending on volatile memory or other system resource, that may change between\n-two consecutive calls (such as @code{feof} in a multithreading environment).\n+@item cdecl\n+@cindex functions that do pop the argument stack on the 386\n+@opindex mrtd\n+On the Intel 386, the @code{cdecl} attribute causes the compiler to\n+assume that the calling function will pop off the stack space used to\n+pass arguments.  This is\n+useful to override the effects of the @option{-mrtd} switch.\n \n-The attribute @code{pure} is not implemented in GCC versions earlier\n-than 2.96.\n-@cindex @code{const} function attribute\n @item const\n+@cindex @code{const} function attribute\n Many functions do not examine any values except their arguments, and\n have no effects except the return value.  Basically this is just slightly\n more strict class than the @code{pure} attribute above, since function is not\n@@ -2023,14 +1972,137 @@ extern const intfn square;\n This approach does not work in GNU C++ from 2.6.0 on, since the language\n specifies that the @samp{const} must be attached to the return value.\n \n-@cindex @code{nothrow} function attribute\n-@item nothrow\n-The @code{nothrow} attribute is used to inform the compiler that a\n-function cannot throw an exception.  For example, most functions in\n-the standard C library can be guaranteed not to throw an exception\n-with the notable exceptions of @code{qsort} and @code{bsearch} that\n-take function pointer arguments.  The @code{nothrow} attribute is not\n-implemented in GCC versions earlier than 3.2.\n+@item constructor\n+@itemx destructor\n+@cindex @code{constructor} function attribute\n+@cindex @code{destructor} function attribute\n+The @code{constructor} attribute causes the function to be called\n+automatically before execution enters @code{main ()}.  Similarly, the\n+@code{destructor} attribute causes the function to be called\n+automatically after @code{main ()} has completed or @code{exit ()} has\n+been called.  Functions with these attributes are useful for\n+initializing data that will be used implicitly during the execution of\n+the program.\n+\n+These attributes are not currently implemented for Objective-C@.\n+\n+@item deprecated\n+@cindex @code{deprecated} attribute.\n+The @code{deprecated} attribute results in a warning if the function\n+is used anywhere in the source file.  This is useful when identifying\n+functions that are expected to be removed in a future version of a\n+program.  The warning also includes the location of the declaration\n+of the deprecated function, to enable users to easily find further\n+information about why the function is deprecated, or what they should\n+do instead.  Note that the warnings only occurs for uses:\n+\n+@smallexample\n+int old_fn () __attribute__ ((deprecated));\n+int old_fn ();\n+int (*fn_ptr)() = old_fn;\n+@end smallexample\n+\n+results in a warning on line 3 but not line 2.\n+\n+The @code{deprecated} attribute can also be used for variables and\n+types (@pxref{Variable Attributes}, @pxref{Type Attributes}.)\n+\n+@item dllexport\n+@cindex @code{__declspec(dllexport)}\n+On Microsoft Windows targets the @code{dllexport} attribute causes the\n+compiler to provide a global pointer to a pointer in a dll, so that it\n+can be referenced with the @code{dllimport} attribute. The pointer name\n+is formed by combining @code{_imp__} and the function or variable name.\n+\n+Currently, the @code{dllexport}attribute is ignored for inlined\n+functions, but export can be forced by using the\n+@option{-fkeep-inline-functions} flag. The attribute is also ignored for\n+undefined symbols.\n+\n+When applied to C++ classes. the attribute marks defined non-inlined\n+member functions and static data members as exports. Static consts\n+initialized in-class are not marked unless they are also defined\n+out-of-class.\n+\n+On cygwin, mingw and arm-pe targets, @code{__declspec(dllexport)} is\n+recognized as a synonym for @code{__attribute__ ((dllexport))} for\n+compatibility with other Microsoft Windows compilers.\n+\n+Alternative methods for including the symbol in the dll's export table\n+are to use a .def file with an @code{EXPORTS} section or, with GNU ld,\n+using the @option{--export-all} linker flag.\n+\n+@item dllimport\n+@cindex @code{__declspec(dllimport)}\n+On Microsoft Windows targets, the @code{dllimport} attribute causes the\n+compiler to reference a function or variable via a global pointer to a\n+pointer that is set up by the Microsoft Windows dll library. The pointer\n+name is formed by combining @code{_imp__} and the function or variable\n+name. The attribute implies @code{extern} storage.\n+\n+Currently, the attribute is ignored for inlined functions. If the\n+attribute is applied to a symbol @emph{definition}, an error is reported.\n+If a symbol previously declared @code{dllimport} is later defined, the\n+attribute is ignored in subsequent references, and a warning is emitted.\n+The attribute is also overridden by a subsequent declaration as\n+@code{dllexport}.\n+\n+When applied to C++ classes, the attribute marks non-inlined\n+member functions and static data members as imports.  However, the\n+attribute is ignored for virtual methods to allow creation of vtables\n+using thunks.\n+\n+On cygwin, mingw and arm-pe targets, @code{__declspec(dllimport)} is\n+recognized as a synonym for @code{__attribute__ ((dllimport))} for\n+compatibility with other Microsoft Windows compilers.\n+\n+The use of the @code{dllimport} attribute on functions is not necessary,\n+but provides a small performance benefit by eliminating a thunk in the\n+dll. The use of the @code{dllimport} attribute on imported variables was\n+required on older versions of GNU ld, but can now be avoided by passing\n+the @option{--enable-auto-import} switch to ld. As with functions, using\n+the attribute for a variable eliminates a thunk in the dll.\n+\n+One drawback to using this attribute is that a pointer to a function or\n+variable marked as dllimport cannot be used as a constant address. The\n+attribute can be disabled for functions by setting the\n+@option{-mnop-fun-dllimport} flag.\n+\n+@item eightbit_data\n+@cindex eight bit data on the H8/300, H8/300H, and H8S\n+Use this attribute on the H8/300, H8/300H, and H8S to indicate that the specified\n+variable should be placed into the eight bit data section.\n+The compiler will generate more efficient code for certain operations\n+on data in the eight bit data area.  Note the eight bit data area is limited to\n+256 bytes of data.\n+\n+You must use GAS and GLD from GNU binutils version 2.7 or later for\n+this attribute to work correctly.\n+\n+@item far\n+@cindex functions which handle memory bank switching\n+On 68HC11 and 68HC12 the @code{far} attribute causes the compiler to\n+use a calling convention that takes care of switching memory banks when\n+entering and leaving a function.  This calling convention is also the\n+default when using the @option{-mlong-calls} option.\n+\n+On 68HC12 the compiler will use the @code{call} and @code{rtc} instructions\n+to call and return from a function.\n+\n+On 68HC11 the compiler will generate a sequence of instructions\n+to invoke a board-specific routine to switch the memory bank and call the\n+real function. The board-specific routine simulates a @code{call}.\n+At the end of a function, it will jump to a board-specific routine\n+instead of using @code{rts}. The board-specific return routine simulates\n+the @code{rtc}.\n+\n+@item fastcall\n+@cindex functions that pop the argument stack on the 386\n+On the Intel 386, the @code{fastcall} attribute causes the compiler to\n+pass the first two arguments in the registers ECX and EDX. Subsequent\n+arguments are passed on the stack. The called function will pop the\n+arguments off the stack. If the number of arguments is variable all\n+arguments are pushed on the stack.\n \n @item format (@var{archetype}, @var{string-index}, @var{first-to-check})\n @cindex @code{format} function attribute\n@@ -2131,138 +2203,67 @@ requested by @option{-ansi} or an appropriate @option{-std} option, or\n @option{-ffreestanding} is used.  @xref{C Dialect Options,,Options\n Controlling C Dialect}.\n \n-@item nonnull (@var{arg-index}, @dots{})\n-@cindex @code{nonnull} function attribute\n-The @code{nonnull} attribute specifies that some function parameters should\n-be non-null pointers.  For instance, the declaration:\n+@item function_vector\n+@cindex calling functions through the function vector on the H8/300 processors\n+Use this attribute on the H8/300, H8/300H, and H8S to indicate that the specified\n+function should be called through the function vector.  Calling a\n+function through the function vector will reduce code size, however;\n+the function vector has a limited size (maximum 128 entries on the H8/300\n+and 64 entries on the H8/300H and H8S) and shares space with the interrupt vector.\n \n-@smallexample\n-extern void *\n-my_memcpy (void *dest, const void *src, size_t len)\n-\t__attribute__((nonnull (1, 2)));\n-@end smallexample\n+You must use GAS and GLD from GNU binutils version 2.7 or later for\n+this attribute to work correctly.\n \n-@noindent\n-causes the compiler to check that, in calls to @code{my_memcpy},\n-arguments @var{dest} and @var{src} are non-null.  If the compiler\n-determines that a null pointer is passed in an argument slot marked\n-as non-null, and the @option{-Wnonnull} option is enabled, a warning\n-is issued.  The compiler may also choose to make optimizations based\n-on the knowledge that certain function arguments will not be null.\n+@item interrupt\n+@cindex interrupt handler functions\n+Use this attribute on the ARM, AVR, C4x, M32R/D and Xstormy16 ports to indicate\n+that the specified function is an interrupt handler.  The compiler will\n+generate function entry and exit sequences suitable for use in an\n+interrupt handler when this attribute is present.\n \n-If no argument index list is given to the @code{nonnull} attribute,\n-all pointer arguments are marked as non-null.  To illustrate, the\n-following declaration is equivalent to the previous example:\n+Note, interrupt handlers for the m68k, H8/300, H8/300H, H8S, and SH processors\n+can be specified via the @code{interrupt_handler} attribute.\n \n-@smallexample\n-extern void *\n-my_memcpy (void *dest, const void *src, size_t len)\n-\t__attribute__((nonnull));\n-@end smallexample\n-\n-@item no_instrument_function\n-@cindex @code{no_instrument_function} function attribute\n-@opindex finstrument-functions\n-If @option{-finstrument-functions} is given, profiling function calls will\n-be generated at entry and exit of most user-compiled functions.\n-Functions with this attribute will not be so instrumented.\n-\n-@item section (\"@var{section-name}\")\n-@cindex @code{section} function attribute\n-Normally, the compiler places the code it generates in the @code{text} section.\n-Sometimes, however, you need additional sections, or you need certain\n-particular functions to appear in special sections.  The @code{section}\n-attribute specifies that a function lives in a particular section.\n-For example, the declaration:\n-\n-@smallexample\n-extern void foobar (void) __attribute__ ((section (\"bar\")));\n-@end smallexample\n-\n-@noindent\n-puts the function @code{foobar} in the @code{bar} section.\n-\n-Some file formats do not support arbitrary sections so the @code{section}\n-attribute is not available on all platforms.\n-If you need to map the entire contents of a module to a particular\n-section, consider using the facilities of the linker instead.\n-\n-@item constructor\n-@itemx destructor\n-@cindex @code{constructor} function attribute\n-@cindex @code{destructor} function attribute\n-The @code{constructor} attribute causes the function to be called\n-automatically before execution enters @code{main ()}.  Similarly, the\n-@code{destructor} attribute causes the function to be called\n-automatically after @code{main ()} has completed or @code{exit ()} has\n-been called.  Functions with these attributes are useful for\n-initializing data that will be used implicitly during the execution of\n-the program.\n-\n-These attributes are not currently implemented for Objective-C@.\n-\n-@cindex @code{unused} attribute.\n-@item unused\n-This attribute, attached to a function, means that the function is meant\n-to be possibly unused.  GCC will not produce a warning for this\n-function.\n-\n-@cindex @code{used} attribute.\n-@item used\n-This attribute, attached to a function, means that code must be emitted\n-for the function even if it appears that the function is not referenced.\n-This is useful, for example, when the function is referenced only in\n-inline assembly.\n+Note, on the AVR, interrupts will be enabled inside the function.\n \n-@cindex @code{deprecated} attribute.\n-@item deprecated\n-The @code{deprecated} attribute results in a warning if the function\n-is used anywhere in the source file.  This is useful when identifying\n-functions that are expected to be removed in a future version of a\n-program.  The warning also includes the location of the declaration\n-of the deprecated function, to enable users to easily find further\n-information about why the function is deprecated, or what they should\n-do instead.  Note that the warnings only occurs for uses:\n+Note, for the ARM, you can specify the kind of interrupt to be handled by\n+adding an optional parameter to the interrupt attribute like this:\n \n @smallexample\n-int old_fn () __attribute__ ((deprecated));\n-int old_fn ();\n-int (*fn_ptr)() = old_fn;\n+void f () __attribute__ ((interrupt (\"IRQ\")));\n @end smallexample\n \n-results in a warning on line 3 but not line 2.\n-\n-The @code{deprecated} attribute can also be used for variables and\n-types (@pxref{Variable Attributes}, @pxref{Type Attributes}.)\n+Permissible values for this parameter are: IRQ, FIQ, SWI, ABORT and UNDEF@.\n \n-@item warn_unused_result\n-@cindex @code{warn_unused_result} attribute\n-The @code{warn_unused_result} attribute causes a warning to be emitted\n-if a caller of the function with this attribute does not use its\n-return value.  This is useful for functions where not checking\n-the result is either a security problem or always a bug, such as\n-@code{realloc}.\n+@item interrupt_handler\n+@cindex interrupt handler functions on the m68k, H8/300 and SH processors\n+Use this attribute on the m68k, H8/300, H8/300H, H8S, and SH to indicate that\n+the specified function is an interrupt handler.  The compiler will generate\n+function entry and exit sequences suitable for use in an interrupt\n+handler when this attribute is present.\n \n-@smallexample\n-int fn () __attribute__ ((warn_unused_result));\n-int foo ()\n-@{\n-  if (fn () < 0) return -1;\n-  fn ();\n-  return 0;\n-@}\n-@end smallexample\n+@item long_call/short_call\n+@cindex indirect calls on ARM\n+This attribute specifies how a particular function is called on\n+ARM@.  Both attributes override the @option{-mlong-calls} (@pxref{ARM Options})\n+command line switch and @code{#pragma long_calls} settings.  The\n+@code{long_call} attribute causes the compiler to always call the\n+function by first loading its address into a register and then using the\n+contents of that register.   The @code{short_call} attribute always places\n+the offset to the function from the call site into the @samp{BL}\n+instruction directly.\n \n-results in warning on line 5.\n+@item longcall/shortcall\n+@cindex functions called via pointer on the RS/6000 and PowerPC\n+On the RS/6000 and PowerPC, the @code{longcall} attribute causes the\n+compiler to always call this function via a pointer, just as it would if\n+the @option{-mlongcall} option had been specified.  The @code{shortcall}\n+attribute causes the compiler not to do this.  These attributes override\n+both the @option{-mlongcall} switch and the @code{#pragma longcall}\n+setting.\n \n-@item weak\n-@cindex @code{weak} attribute\n-The @code{weak} attribute causes the declaration to be emitted as a weak\n-symbol rather than a global.  This is primarily useful in defining\n-library functions which can be overridden in user code, though it can\n-also be used with non-function declarations.  Weak symbols are supported\n-for ELF targets, and also for a.out targets when using the GNU assembler\n-and linker.\n+@xref{RS/6000 and PowerPC Options}, for more information on whether long\n+calls are necessary.\n \n @item malloc\n @cindex @code{malloc} attribute\n@@ -2276,166 +2277,228 @@ long as the old pointer is never referred to (including comparing it\n to the new pointer) after the function returns a non-@code{NULL}\n value.\n \n-@item alias (\"@var{target}\")\n-@cindex @code{alias} attribute\n-The @code{alias} attribute causes the declaration to be emitted as an\n-alias for another symbol, which must be specified.  For instance,\n+@item model (@var{model-name})\n+@cindex function addressability on the M32R/D\n+@cindex variable addressability on the IA-64\n+\n+On the M32R/D, use this attribute to set the addressability of an\n+object, and of the code generated for a function.  The identifier\n+@var{model-name} is one of @code{small}, @code{medium}, or\n+@code{large}, representing each of the code models.\n+\n+Small model objects live in the lower 16MB of memory (so that their\n+addresses can be loaded with the @code{ld24} instruction), and are\n+callable with the @code{bl} instruction.\n+\n+Medium model objects may live anywhere in the 32-bit address space (the\n+compiler will generate @code{seth/add3} instructions to load their addresses),\n+and are callable with the @code{bl} instruction.\n+\n+Large model objects may live anywhere in the 32-bit address space (the\n+compiler will generate @code{seth/add3} instructions to load their addresses),\n+and may not be reachable with the @code{bl} instruction (the compiler will\n+generate the much slower @code{seth/add3/jl} instruction sequence).\n+\n+On IA-64, use this attribute to set the addressability of an object.\n+At present, the only supported identifier for @var{model-name} is\n+@code{small}, indicating addressability via ``small'' (22-bit)\n+addresses (so that their addresses can be loaded with the @code{addl}\n+instruction).  Caveat: such addressing is by definition not position\n+independent and hence this attribute must not be used for objects\n+defined by shared libraries.\n+\n+@item naked\n+@cindex function without a prologue/epilogue code\n+Use this attribute on the ARM, AVR, C4x and IP2K ports to indicate that the\n+specified function does not need prologue/epilogue sequences generated by\n+the compiler.  It is up to the programmer to provide these sequences.\n+\n+@item near\n+@cindex functions which do not handle memory bank switching on 68HC11/68HC12\n+On 68HC11 and 68HC12 the @code{near} attribute causes the compiler to\n+use the normal calling convention based on @code{jsr} and @code{rts}.\n+This attribute can be used to cancel the effect of the @option{-mlong-calls}\n+option.\n+\n+@item no_instrument_function\n+@cindex @code{no_instrument_function} function attribute\n+@opindex finstrument-functions\n+If @option{-finstrument-functions} is given, profiling function calls will\n+be generated at entry and exit of most user-compiled functions.\n+Functions with this attribute will not be so instrumented.\n+\n+@item noinline\n+@cindex @code{noinline} function attribute\n+This function attribute prevents a function from being considered for\n+inlining.\n+\n+@item nonnull (@var{arg-index}, @dots{})\n+@cindex @code{nonnull} function attribute\n+The @code{nonnull} attribute specifies that some function parameters should\n+be non-null pointers.  For instance, the declaration:\n \n @smallexample\n-void __f () @{ /* @r{Do something.} */; @}\n-void f () __attribute__ ((weak, alias (\"__f\")));\n+extern void *\n+my_memcpy (void *dest, const void *src, size_t len)\n+\t__attribute__((nonnull (1, 2)));\n @end smallexample\n \n-declares @samp{f} to be a weak alias for @samp{__f}.  In C++, the\n-mangled name for the target must be used.\n-\n-Not all target machines support this attribute.\n+@noindent\n+causes the compiler to check that, in calls to @code{my_memcpy},\n+arguments @var{dest} and @var{src} are non-null.  If the compiler\n+determines that a null pointer is passed in an argument slot marked\n+as non-null, and the @option{-Wnonnull} option is enabled, a warning\n+is issued.  The compiler may also choose to make optimizations based\n+on the knowledge that certain function arguments will not be null.\n \n-@item visibility (\"@var{visibility_type}\")\n-@cindex @code{visibility} attribute\n-The @code{visibility} attribute on ELF targets causes the declaration\n-to be emitted with default, hidden, protected or internal visibility.\n+If no argument index list is given to the @code{nonnull} attribute,\n+all pointer arguments are marked as non-null.  To illustrate, the\n+following declaration is equivalent to the previous example:\n \n @smallexample\n-void __attribute__ ((visibility (\"protected\")))\n-f () @{ /* @r{Do something.} */; @}\n-int i __attribute__ ((visibility (\"hidden\")));\n+extern void *\n+my_memcpy (void *dest, const void *src, size_t len)\n+\t__attribute__((nonnull));\n @end smallexample\n \n-See the ELF gABI for complete details, but the short story is:\n+@item noreturn\n+@cindex @code{noreturn} function attribute\n+A few standard library functions, such as @code{abort} and @code{exit},\n+cannot return.  GCC knows this automatically.  Some programs define\n+their own functions that never return.  You can declare them\n+@code{noreturn} to tell the compiler this fact.  For example,\n \n-@table @dfn\n-@item default\n-Default visibility is the normal case for ELF.  This value is\n-available for the visibility attribute to override other options\n-that may change the assumed visibility of symbols.\n+@smallexample\n+@group\n+void fatal () __attribute__ ((noreturn));\n \n-@item hidden\n-Hidden visibility indicates that the symbol will not be placed into\n-the dynamic symbol table, so no other @dfn{module} (executable or\n-shared library) can reference it directly.\n+void\n+fatal (/* @r{@dots{}} */)\n+@{\n+  /* @r{@dots{}} */ /* @r{Print error message.} */ /* @r{@dots{}} */\n+  exit (1);\n+@}\n+@end group\n+@end smallexample\n \n-@item protected\n-Protected visibility indicates that the symbol will be placed in the\n-dynamic symbol table, but that references within the defining module\n-will bind to the local symbol.  That is, the symbol cannot be overridden\n-by another module.\n+The @code{noreturn} keyword tells the compiler to assume that\n+@code{fatal} cannot return.  It can then optimize without regard to what\n+would happen if @code{fatal} ever did return.  This makes slightly\n+better code.  More importantly, it helps avoid spurious warnings of\n+uninitialized variables.\n \n-@item internal\n-Internal visibility is like hidden visibility, but with additional\n-processor specific semantics.  Unless otherwise specified by the psABI,\n-GCC defines internal visibility to mean that the function is @emph{never}\n-called from another module.  Note that hidden symbols, while they cannot\n-be referenced directly by other modules, can be referenced indirectly via\n-function pointers.  By indicating that a symbol cannot be called from\n-outside the module, GCC may for instance omit the load of a PIC register\n-since it is known that the calling function loaded the correct value.\n-@end table\n+The @code{noreturn} keyword does not affect the exceptional path when that\n+applies: a @code{noreturn}-marked function may still return to the caller\n+by throwing an exception.\n \n-Not all ELF targets support this attribute.\n+Do not assume that registers saved by the calling function are\n+restored before calling the @code{noreturn} function.\n \n-@item regparm (@var{number})\n-@cindex @code{regparm} attribute\n-@cindex functions that are passed arguments in registers on the 386\n-On the Intel 386, the @code{regparm} attribute causes the compiler to\n-pass up to @var{number} integer arguments in registers EAX,\n-EDX, and ECX instead of on the stack.  Functions that take a\n-variable number of arguments will continue to be passed all of their\n-arguments on the stack.\n+It does not make sense for a @code{noreturn} function to have a return\n+type other than @code{void}.\n \n-Beware that on some ELF systems this attribute is unsuitable for\n-global functions in shared libraries with lazy binding (which is the\n-default).  Lazy binding will send the first call via resolving code in\n-the loader, which might assume EAX, EDX and ECX can be clobbered, as\n-per the standard calling conventions.  Solaris 8 is affected by this.\n-GNU systems with GLIBC 2.1 or higher, and FreeBSD, are believed to be\n-safe since the loaders there save all registers.  (Lazy binding can be\n-disabled with the linker or the loader if desired, to avoid the\n-problem.)\n+The attribute @code{noreturn} is not implemented in GCC versions\n+earlier than 2.5.  An alternative way to declare that a function does\n+not return, which works in the current version and in some older\n+versions, is as follows:\n \n-@item stdcall\n-@cindex functions that pop the argument stack on the 386\n-On the Intel 386, the @code{stdcall} attribute causes the compiler to\n-assume that the called function will pop off the stack space used to\n-pass arguments, unless it takes a variable number of arguments.\n+@smallexample\n+typedef void voidfn ();\n \n-@item fastcall\n-@cindex functions that pop the argument stack on the 386\n-On the Intel 386, the @code{fastcall} attribute causes the compiler to\n-pass the first two arguments in the registers ECX and EDX. Subsequent\n-arguments are passed on the stack. The called function will pop the\n-arguments off the stack. If the number of arguments is variable all\n-arguments are pushed on the stack.\n+volatile voidfn fatal;\n+@end smallexample\n \n-@item cdecl\n-@cindex functions that do pop the argument stack on the 386\n-@opindex mrtd\n-On the Intel 386, the @code{cdecl} attribute causes the compiler to\n-assume that the calling function will pop off the stack space used to\n-pass arguments.  This is\n-useful to override the effects of the @option{-mrtd} switch.\n+@item nothrow\n+@cindex @code{nothrow} function attribute\n+The @code{nothrow} attribute is used to inform the compiler that a\n+function cannot throw an exception.  For example, most functions in\n+the standard C library can be guaranteed not to throw an exception\n+with the notable exceptions of @code{qsort} and @code{bsearch} that\n+take function pointer arguments.  The @code{nothrow} attribute is not\n+implemented in GCC versions earlier than 3.2.\n \n-@item longcall/shortcall\n-@cindex functions called via pointer on the RS/6000 and PowerPC\n-On the RS/6000 and PowerPC, the @code{longcall} attribute causes the\n-compiler to always call this function via a pointer, just as it would if\n-the @option{-mlongcall} option had been specified.  The @code{shortcall}\n-attribute causes the compiler not to do this.  These attributes override\n-both the @option{-mlongcall} switch and the @code{#pragma longcall}\n-setting.\n+@item pure\n+@cindex @code{pure} function attribute\n+Many functions have no effects except the return value and their\n+return value depends only on the parameters and/or global variables.\n+Such a function can be subject\n+to common subexpression elimination and loop optimization just as an\n+arithmetic operator would be.  These functions should be declared\n+with the attribute @code{pure}.  For example,\n \n-@xref{RS/6000 and PowerPC Options}, for more information on whether long\n-calls are necessary.\n+@smallexample\n+int square (int) __attribute__ ((pure));\n+@end smallexample\n \n-@item long_call/short_call\n-@cindex indirect calls on ARM\n-This attribute specifies how a particular function is called on\n-ARM@.  Both attributes override the @option{-mlong-calls} (@pxref{ARM Options})\n-command line switch and @code{#pragma long_calls} settings.  The\n-@code{long_call} attribute causes the compiler to always call the\n-function by first loading its address into a register and then using the\n-contents of that register.   The @code{short_call} attribute always places\n-the offset to the function from the call site into the @samp{BL}\n-instruction directly.\n+@noindent\n+says that the hypothetical function @code{square} is safe to call\n+fewer times than the program says.\n \n-@item function_vector\n-@cindex calling functions through the function vector on the H8/300 processors\n-Use this attribute on the H8/300, H8/300H, and H8S to indicate that the specified\n-function should be called through the function vector.  Calling a\n-function through the function vector will reduce code size, however;\n-the function vector has a limited size (maximum 128 entries on the H8/300\n-and 64 entries on the H8/300H and H8S) and shares space with the interrupt vector.\n+Some of common examples of pure functions are @code{strlen} or @code{memcmp}.\n+Interesting non-pure functions are functions with infinite loops or those\n+depending on volatile memory or other system resource, that may change between\n+two consecutive calls (such as @code{feof} in a multithreading environment).\n \n-You must use GAS and GLD from GNU binutils version 2.7 or later for\n-this attribute to work correctly.\n+The attribute @code{pure} is not implemented in GCC versions earlier\n+than 2.96.\n \n-@item interrupt\n-@cindex interrupt handler functions\n-Use this attribute on the ARM, AVR, C4x, M32R/D and Xstormy16 ports to indicate\n-that the specified function is an interrupt handler.  The compiler will\n-generate function entry and exit sequences suitable for use in an\n-interrupt handler when this attribute is present.\n+@item regparm (@var{number})\n+@cindex @code{regparm} attribute\n+@cindex functions that are passed arguments in registers on the 386\n+On the Intel 386, the @code{regparm} attribute causes the compiler to\n+pass up to @var{number} integer arguments in registers EAX,\n+EDX, and ECX instead of on the stack.  Functions that take a\n+variable number of arguments will continue to be passed all of their\n+arguments on the stack.\n \n-Note, interrupt handlers for the m68k, H8/300, H8/300H, H8S, and SH processors\n-can be specified via the @code{interrupt_handler} attribute.\n+Beware that on some ELF systems this attribute is unsuitable for\n+global functions in shared libraries with lazy binding (which is the\n+default).  Lazy binding will send the first call via resolving code in\n+the loader, which might assume EAX, EDX and ECX can be clobbered, as\n+per the standard calling conventions.  Solaris 8 is affected by this.\n+GNU systems with GLIBC 2.1 or higher, and FreeBSD, are believed to be\n+safe since the loaders there save all registers.  (Lazy binding can be\n+disabled with the linker or the loader if desired, to avoid the\n+problem.)\n \n-Note, on the AVR, interrupts will be enabled inside the function.\n+@item saveall\n+@cindex save all registers on the H8/300, H8/300H, and H8S\n+Use this attribute on the H8/300, H8/300H, and H8S to indicate that\n+all registers except the stack pointer should be saved in the prologue\n+regardless of whether they are used or not.\n \n-Note, for the ARM, you can specify the kind of interrupt to be handled by\n-adding an optional parameter to the interrupt attribute like this:\n+@item section (\"@var{section-name}\")\n+@cindex @code{section} function attribute\n+Normally, the compiler places the code it generates in the @code{text} section.\n+Sometimes, however, you need additional sections, or you need certain\n+particular functions to appear in special sections.  The @code{section}\n+attribute specifies that a function lives in a particular section.\n+For example, the declaration:\n \n @smallexample\n-void f () __attribute__ ((interrupt (\"IRQ\")));\n+extern void foobar (void) __attribute__ ((section (\"bar\")));\n @end smallexample\n \n-Permissible values for this parameter are: IRQ, FIQ, SWI, ABORT and UNDEF@.\n+@noindent\n+puts the function @code{foobar} in the @code{bar} section.\n \n-@item interrupt_handler\n-@cindex interrupt handler functions on the m68k, H8/300 and SH processors\n-Use this attribute on the m68k, H8/300, H8/300H, H8S, and SH to indicate that\n-the specified function is an interrupt handler.  The compiler will generate\n-function entry and exit sequences suitable for use in an interrupt\n-handler when this attribute is present.\n+Some file formats do not support arbitrary sections so the @code{section}\n+attribute is not available on all platforms.\n+If you need to map the entire contents of a module to a particular\n+section, consider using the facilities of the linker instead.\n+\n+@item short_call\n+See long_call/short_call.\n+\n+@item shortcall\n+See longcall/shortcall.\n+\n+@item signal\n+@cindex signal handler functions on the AVR processors\n+Use this attribute on the AVR to indicate that the specified\n+function is a signal handler.  The compiler will generate function\n+entry and exit sequences suitable for use in a signal handler when this\n+attribute is present.  Interrupts will be disabled inside the function.\n \n @item sp_switch\n Use this attribute on the SH to indicate an @code{interrupt_handler}\n@@ -2449,21 +2512,11 @@ void f () __attribute__ ((interrupt_handler,\n                           sp_switch (\"alt_stack\")));\n @end smallexample\n \n-@item trap_exit\n-Use this attribute on the SH for an @code{interrupt_handler} to return using\n-@code{trapa} instead of @code{rte}.  This attribute expects an integer\n-argument specifying the trap number to be used.\n-\n-@item eightbit_data\n-@cindex eight bit data on the H8/300, H8/300H, and H8S\n-Use this attribute on the H8/300, H8/300H, and H8S to indicate that the specified\n-variable should be placed into the eight bit data section.\n-The compiler will generate more efficient code for certain operations\n-on data in the eight bit data area.  Note the eight bit data area is limited to\n-256 bytes of data.\n-\n-You must use GAS and GLD from GNU binutils version 2.7 or later for\n-this attribute to work correctly.\n+@item stdcall\n+@cindex functions that pop the argument stack on the 386\n+On the Intel 386, the @code{stdcall} attribute causes the compiler to\n+assume that the called function will pop off the stack space used to\n+pass arguments, unless it takes a variable number of arguments.\n \n @item tiny_data\n @cindex tiny data section on the H8/300H and H8S\n@@ -2473,139 +2526,98 @@ The compiler will generate more efficient code for loads and stores\n on data in the tiny data section.  Note the tiny data area is limited to\n slightly under 32kbytes of data.\n \n-@item saveall\n-@cindex save all registers on the H8/300, H8/300H, and H8S\n-Use this attribute on the H8/300, H8/300H, and H8S to indicate that\n-all registers except the stack pointer should be saved in the prologue\n-regardless of whether they are used or not.\n-\n-@item signal\n-@cindex signal handler functions on the AVR processors\n-Use this attribute on the AVR to indicate that the specified\n-function is a signal handler.  The compiler will generate function\n-entry and exit sequences suitable for use in a signal handler when this\n-attribute is present.  Interrupts will be disabled inside the function.\n-\n-@item naked\n-@cindex function without a prologue/epilogue code\n-Use this attribute on the ARM, AVR, C4x and IP2K ports to indicate that the\n-specified function does not need prologue/epilogue sequences generated by\n-the compiler.  It is up to the programmer to provide these sequences.\n-\n-@item model (@var{model-name})\n-@cindex function addressability on the M32R/D\n-@cindex variable addressability on the IA-64\n-\n-On the M32R/D, use this attribute to set the addressability of an\n-object, and of the code generated for a function.  The identifier\n-@var{model-name} is one of @code{small}, @code{medium}, or\n-@code{large}, representing each of the code models.\n-\n-Small model objects live in the lower 16MB of memory (so that their\n-addresses can be loaded with the @code{ld24} instruction), and are\n-callable with the @code{bl} instruction.\n-\n-Medium model objects may live anywhere in the 32-bit address space (the\n-compiler will generate @code{seth/add3} instructions to load their addresses),\n-and are callable with the @code{bl} instruction.\n-\n-Large model objects may live anywhere in the 32-bit address space (the\n-compiler will generate @code{seth/add3} instructions to load their addresses),\n-and may not be reachable with the @code{bl} instruction (the compiler will\n-generate the much slower @code{seth/add3/jl} instruction sequence).\n+@item trap_exit\n+Use this attribute on the SH for an @code{interrupt_handler} to return using\n+@code{trapa} instead of @code{rte}.  This attribute expects an integer\n+argument specifying the trap number to be used.\n \n-On IA-64, use this attribute to set the addressability of an object.\n-At present, the only supported identifier for @var{model-name} is\n-@code{small}, indicating addressability via ``small'' (22-bit)\n-addresses (so that their addresses can be loaded with the @code{addl}\n-instruction).  Caveat: such addressing is by definition not position\n-independent and hence this attribute must not be used for objects\n-defined by shared libraries.\n+@item unused\n+@cindex @code{unused} attribute.\n+This attribute, attached to a function, means that the function is meant\n+to be possibly unused.  GCC will not produce a warning for this\n+function.\n \n-@item far\n-@cindex functions which handle memory bank switching\n-On 68HC11 and 68HC12 the @code{far} attribute causes the compiler to\n-use a calling convention that takes care of switching memory banks when\n-entering and leaving a function.  This calling convention is also the\n-default when using the @option{-mlong-calls} option.\n+@item used\n+@cindex @code{used} attribute.\n+This attribute, attached to a function, means that code must be emitted\n+for the function even if it appears that the function is not referenced.\n+This is useful, for example, when the function is referenced only in\n+inline assembly.\n \n-On 68HC12 the compiler will use the @code{call} and @code{rtc} instructions\n-to call and return from a function.\n+@item visibility (\"@var{visibility_type}\")\n+@cindex @code{visibility} attribute\n+The @code{visibility} attribute on ELF targets causes the declaration\n+to be emitted with default, hidden, protected or internal visibility.\n \n-On 68HC11 the compiler will generate a sequence of instructions\n-to invoke a board-specific routine to switch the memory bank and call the\n-real function. The board-specific routine simulates a @code{call}.\n-At the end of a function, it will jump to a board-specific routine\n-instead of using @code{rts}. The board-specific return routine simulates\n-the @code{rtc}.\n+@smallexample\n+void __attribute__ ((visibility (\"protected\")))\n+f () @{ /* @r{Do something.} */; @}\n+int i __attribute__ ((visibility (\"hidden\")));\n+@end smallexample\n \n-@item near\n-@cindex functions which do not handle memory bank switching on 68HC11/68HC12\n-On 68HC11 and 68HC12 the @code{near} attribute causes the compiler to\n-use the normal calling convention based on @code{jsr} and @code{rts}.\n-This attribute can be used to cancel the effect of the @option{-mlong-calls}\n-option.\n+See the ELF gABI for complete details, but the short story is:\n \n-@item dllimport\n-@cindex @code{__declspec(dllimport)}\n-On Microsoft Windows targets, the @code{dllimport} attribute causes the compiler\n-to reference a function or variable via a global pointer to a pointer\n-that is set up by the Microsoft Windows dll library. The pointer name is formed by\n-combining @code{_imp__} and the function or variable name. The attribute\n-implies @code{extern} storage.\n+@table @dfn\n+@c keep this list of visibilies in alphabetical order.\n \n-Currently, the attribute is ignored for inlined functions. If the\n-attribute is applied to a symbol @emph{definition}, an error is reported.\n-If a symbol previously declared @code{dllimport} is later defined, the\n-attribute is ignored in subsequent references, and a warning is emitted.\n-The attribute is also overridden by a subsequent declaration as\n-@code{dllexport}.\n+@item default\n+Default visibility is the normal case for ELF.  This value is\n+available for the visibility attribute to override other options\n+that may change the assumed visibility of symbols.\n \n-When applied to C++ classes, the attribute marks non-inlined\n-member functions and static data members as imports.  However, the\n-attribute is ignored for virtual methods to allow creation of vtables\n-using thunks.\n+@item hidden\n+Hidden visibility indicates that the symbol will not be placed into\n+the dynamic symbol table, so no other @dfn{module} (executable or\n+shared library) can reference it directly.\n \n-On cygwin, mingw and arm-pe targets, @code{__declspec(dllimport)} is\n-recognized as a synonym for @code{__attribute__ ((dllimport))} for\n-compatibility with other Microsoft Windows compilers.\n+@item internal\n+Internal visibility is like hidden visibility, but with additional\n+processor specific semantics.  Unless otherwise specified by the psABI,\n+GCC defines internal visibility to mean that the function is @emph{never}\n+called from another module.  Note that hidden symbols, while they cannot\n+be referenced directly by other modules, can be referenced indirectly via\n+function pointers.  By indicating that a symbol cannot be called from\n+outside the module, GCC may for instance omit the load of a PIC register\n+since it is known that the calling function loaded the correct value.\n \n-The use of the @code{dllimport} attribute on functions is not necessary,\n-but provides a small performance benefit by eliminating a thunk in the\n-dll. The use of the @code{dllimport} attribute on imported variables was\n-required on older versions of GNU ld, but can now be avoided by passing\n-the @option{--enable-auto-import} switch to ld. As with functions, using\n-the attribute for a variable eliminates a thunk in the dll.\n+@item protected\n+Protected visibility indicates that the symbol will be placed in the\n+dynamic symbol table, but that references within the defining module\n+will bind to the local symbol.  That is, the symbol cannot be overridden\n+by another module.\n \n-One drawback to using this attribute is that a pointer to a function or\n-variable marked as dllimport cannot be used as a constant address. The\n-attribute can be disabled for functions by setting the\n-@option{-mnop-fun-dllimport} flag.\n+@end table\n \n-@item dllexport\n-@cindex @code{__declspec(dllexport)}\n-On Microsoft Windows targets the @code{dllexport} attribute causes the compiler to\n-provide a global pointer to a pointer in a dll, so that it can be\n-referenced with the @code{dllimport} attribute. The pointer name is\n-formed by combining @code{_imp__} and the function or variable name.\n+Not all ELF targets support this attribute.\n \n-Currently, the @code{dllexport}attribute is ignored for inlined\n-functions, but export can be forced by using the\n-@option{-fkeep-inline-functions} flag. The attribute is also ignored for\n-undefined symbols.\n+@item warn_unused_result\n+@cindex @code{warn_unused_result} attribute\n+The @code{warn_unused_result} attribute causes a warning to be emitted\n+if a caller of the function with this attribute does not use its\n+return value.  This is useful for functions where not checking\n+the result is either a security problem or always a bug, such as\n+@code{realloc}.\n \n-When applied to C++ classes. the attribute marks defined non-inlined\n-member functions and static data members as exports. Static consts\n-initialized in-class are not marked unless they are also defined\n-out-of-class.\n+@smallexample\n+int fn () __attribute__ ((warn_unused_result));\n+int foo ()\n+@{\n+  if (fn () < 0) return -1;\n+  fn ();\n+  return 0;\n+@}\n+@end smallexample\n \n-On cygwin, mingw and arm-pe targets, @code{__declspec(dllexport)} is\n-recognized as a synonym for @code{__attribute__ ((dllexport))} for\n-compatibility with other Microsoft Windows compilers.\n+results in warning on line 5.\n \n-Alternative methods for including the symbol in the dll's export table\n-are to use a .def file with an @code{EXPORTS} section or, with GNU ld,\n-using the @option{--export-all} linker flag.\n+@item weak\n+@cindex @code{weak} attribute\n+The @code{weak} attribute causes the declaration to be emitted as a weak\n+symbol rather than a global.  This is primarily useful in defining\n+library functions which can be overridden in user code, though it can\n+also be used with non-function declarations.  Weak symbols are supported\n+for ELF targets, and also for a.out targets when using the GNU assembler\n+and linker.\n \n @end table\n "}]}