{"sha": "4afcf3a5a0391b309520cbcf5d4836d611bd7fd9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGFmY2YzYTVhMDM5MWIzMDk1MjBjYmNmNWQ0ODM2ZDYxMWJkN2ZkOQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-04-18T12:27:10Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-04-18T12:27:10Z"}, "message": "[multiple changes]\n\n2016-04-18  Gary Dismukes  <dismukes@adacore.com>\n\n\t* lib-xref-spark_specific.adb, par-ch2.adb, errout.ads,\n\texp_intr.adb: Minor reformatting and typo corrections.\n\n2016-04-18  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch6.adb: Code cleanup.\n\n2016-04-18  Thomas Quinot  <quinot@adacore.com>\n\n\t* sem_ch13.adb: Minor reformatting and error message tweaking\n\t(remove extraneous spaces).\n\n2016-04-18  Johannes Kanig  <kanig@adacore.com>\n\n\t* gnat1drv.adb (Gnat1drv): Force loading of System unit for SPARK.\n\n2016-04-18  Bob Duff  <duff@adacore.com>\n\n\t* s-fileio.adb (Fopen_Mode): If Mode = Out_File, and the file\n\texists, and it's a fifo, we use \"w\" as the open string instead of\n\t\"r+\". This is necessary to make a write to the fifo block until\n\ta reader is ready.\n\n2016-04-18  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_attr.adb (Denote_Same_Function): Account\n\tfor a special case where a primitive of a tagged type inherits\n\ta class-wide postcondition from a parent type.\n\nFrom-SVN: r235135", "tree": {"sha": "ffe4f91e0d909b0d393db9ce84a1203f8c331576", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ffe4f91e0d909b0d393db9ce84a1203f8c331576"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4afcf3a5a0391b309520cbcf5d4836d611bd7fd9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4afcf3a5a0391b309520cbcf5d4836d611bd7fd9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4afcf3a5a0391b309520cbcf5d4836d611bd7fd9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4afcf3a5a0391b309520cbcf5d4836d611bd7fd9/comments", "author": null, "committer": null, "parents": [{"sha": "58ba2415917ccf9f4556394786a76470284a8d5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58ba2415917ccf9f4556394786a76470284a8d5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58ba2415917ccf9f4556394786a76470284a8d5f"}], "stats": {"total": 138, "additions": 107, "deletions": 31}, "files": [{"sha": "2ef1028a53e8220e9f335f6d9e725ffd7805439f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4afcf3a5a0391b309520cbcf5d4836d611bd7fd9/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4afcf3a5a0391b309520cbcf5d4836d611bd7fd9/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=4afcf3a5a0391b309520cbcf5d4836d611bd7fd9", "patch": "@@ -1,3 +1,34 @@\n+2016-04-18  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* lib-xref-spark_specific.adb, par-ch2.adb, errout.ads,\n+\texp_intr.adb: Minor reformatting and typo corrections.\n+\n+2016-04-18  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch6.adb: Code cleanup.\n+\n+2016-04-18  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* sem_ch13.adb: Minor reformatting and error message tweaking\n+\t(remove extraneous spaces).\n+\n+2016-04-18  Johannes Kanig  <kanig@adacore.com>\n+\n+\t* gnat1drv.adb (Gnat1drv): Force loading of System unit for SPARK.\n+\n+2016-04-18  Bob Duff  <duff@adacore.com>\n+\n+\t* s-fileio.adb (Fopen_Mode): If Mode = Out_File, and the file\n+\texists, and it's a fifo, we use \"w\" as the open string instead of\n+\t\"r+\". This is necessary to make a write to the fifo block until\n+\ta reader is ready.\n+\n+2016-04-18  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_attr.adb (Denote_Same_Function): Account\n+\tfor a special case where a primitive of a tagged type inherits\n+\ta class-wide postcondition from a parent type.\n+\n 2016-04-18  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* par-ch2.adb (P_Expression_Or_Reserved_Word): New routine."}, {"sha": "f0f826685b87b904df0b04cb982b9fa45c6e6e93", "filename": "gcc/ada/cstreams.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4afcf3a5a0391b309520cbcf5d4836d611bd7fd9/gcc%2Fada%2Fcstreams.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4afcf3a5a0391b309520cbcf5d4836d611bd7fd9/gcc%2Fada%2Fcstreams.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcstreams.c?ref=4afcf3a5a0391b309520cbcf5d4836d611bd7fd9", "patch": "@@ -39,6 +39,8 @@\n \n #include <stdio.h>\n #include <sys/types.h>\n+#include <sys/stat.h>\n+#include <unistd.h>\n \n #ifdef _AIX\n /* needed to avoid conflicting declarations */\n@@ -320,6 +322,24 @@ __gnat_fseek64 (FILE *stream, __int64 offset, int origin)\n }\n #endif\n \n+/* Returns true if the path names a fifo (i.e. a named pipe). */\n+int\n+__gnat_is_fifo (const char* path)\n+{\n+/* Posix defines S_ISFIFO as a macro. If the macro doesn't exist, we return\n+   false. */\n+#ifdef S_ISFIFO\n+  struct stat buf;\n+  const int status = stat(path, &buf);\n+  if (status == 0)\n+    return S_ISFIFO(buf.st_mode);\n+#endif\n+\n+  /* S_ISFIFO is not available, or stat got an error (probably\n+     file not found). */\n+  return 0;\n+}\n+\n #ifdef __cplusplus\n }\n #endif"}, {"sha": "fb41f79022d19eca2bfd5faacc50ccb477f5eb5d", "filename": "gcc/ada/errout.ads", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4afcf3a5a0391b309520cbcf5d4836d611bd7fd9/gcc%2Fada%2Ferrout.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4afcf3a5a0391b309520cbcf5d4836d611bd7fd9/gcc%2Fada%2Ferrout.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.ads?ref=4afcf3a5a0391b309520cbcf5d4836d611bd7fd9", "patch": "@@ -907,14 +907,14 @@ package Errout is\n    procedure Adjust_Name_Case\n      (Buf : in out Bounded_String;\n       Loc : Source_Ptr);\n-   --  Given a name stored in Buf, set proper casing.  Loc is an associated\n-   --  source position, if we can find a match between the name in Buf and the\n-   --  name at that source location, we copy the casing from the source,\n+   --  Given a name stored in Buf, set proper casing. Loc is an associated\n+   --  source position, and if we can find a match between the name in Buf and\n+   --  the name at that source location, we copy the casing from the source,\n    --  otherwise we set appropriate default casing.\n \n    procedure Adjust_Name_Case (Loc : Source_Ptr);\n    --  Uses Buf => Global_Name_Buffer. There are no calls to this in the\n-   --  compiler, but it is called in SPARK2014.\n+   --  compiler, but it is called in SPARK 2014.\n \n    procedure Set_Identifier_Casing\n      (Identifier_Name : System.Address;"}, {"sha": "e4d45d5f09df0ea945e7b60011c6aeb036e8b0ba", "filename": "gcc/ada/exp_intr.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4afcf3a5a0391b309520cbcf5d4836d611bd7fd9/gcc%2Fada%2Fexp_intr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4afcf3a5a0391b309520cbcf5d4836d611bd7fd9/gcc%2Fada%2Fexp_intr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_intr.adb?ref=4afcf3a5a0391b309520cbcf5d4836d611bd7fd9", "patch": "@@ -197,7 +197,7 @@ package body Exp_Intr is\n       Temp : Bounded_String;\n \n       procedure Inner (E : Entity_Id);\n-      --  Inner recursive routine, keep outer routine non-recursive to ease\n+      --  Inner recursive routine, keep outer routine nonrecursive to ease\n       --  debugging when we get strange results from this routine.\n \n       -----------\n@@ -207,7 +207,7 @@ package body Exp_Intr is\n       procedure Inner (E : Entity_Id) is\n       begin\n          --  If entity has an internal name, skip by it, and print its scope.\n-         --  Note that we strip a final R from the name before the test, this\n+         --  Note that we strip a final R from the name before the test; this\n          --  is needed for some cases of instantiations.\n \n          declare\n@@ -257,9 +257,9 @@ package body Exp_Intr is\n          begin\n             Append_Unqualified_Decoded (E_Name, Chars (E));\n \n-            --  Remove trailing upper case letters from the name (useful for\n+            --  Remove trailing upper-case letters from the name (useful for\n             --  dealing with some cases of internal names generated in the case\n-            --  of references from within a generic.\n+            --  of references from within a generic).\n \n             while E_Name.Length > 1\n               and then E_Name.Chars (E_Name.Length) in 'A' .. 'Z'"}, {"sha": "8ecababab00ac0ddf7c86c72e79e7eeebef827d7", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4afcf3a5a0391b309520cbcf5d4836d611bd7fd9/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4afcf3a5a0391b309520cbcf5d4836d611bd7fd9/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=4afcf3a5a0391b309520cbcf5d4836d611bd7fd9", "patch": "@@ -1045,12 +1045,11 @@ begin\n       Original_Operating_Mode := Operating_Mode;\n       Frontend;\n \n-      --  In GNATprove mode, force loading of System unit when tasking is\n-      --  used, so that in particular System.Interrupt_Priority is available\n-      --  to GNATprove for the generation of VCs for checking the respect of\n-      --  Ceiling Protocol.\n+      --  In GNATprove mode, force loading of System unit to ensure that\n+      --  System.Interrupt_Priority is available to GNATprove for the\n+      --  generation of VCs for related to Ceiling Priority.\n \n-      if GNATprove_Mode and Opt.Tasking_Used then\n+      if GNATprove_Mode then\n          declare\n             Unused_E : constant Entity_Id :=\n               Rtsfind.RTE (Rtsfind.RE_Interrupt_Priority);"}, {"sha": "f7409d9a916183f3f6950a513642837ec64baf01", "filename": "gcc/ada/lib-xref-spark_specific.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4afcf3a5a0391b309520cbcf5d4836d611bd7fd9/gcc%2Fada%2Flib-xref-spark_specific.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4afcf3a5a0391b309520cbcf5d4836d611bd7fd9/gcc%2Fada%2Flib-xref-spark_specific.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref-spark_specific.adb?ref=4afcf3a5a0391b309520cbcf5d4836d611bd7fd9", "patch": "@@ -271,10 +271,10 @@ package body SPARK_Specific is\n          when E_Function\n             | E_Procedure\n          =>\n-            --  In in SPARK we need to distinguish protected functions and\n+            --  In SPARK we need to distinguish protected functions and\n             --  procedures from ordinary subprograms, but there are no special\n             --  Xref letters for them. Since this distiction is only needed\n-            --  to detect protected calls we pretent that such calls are entry\n+            --  to detect protected calls, we pretend that such calls are entry\n             --  calls.\n \n             if Ekind (Scope (E)) = E_Protected_Type then"}, {"sha": "68e6275e058e745390754b93e31234bdbf0b518c", "filename": "gcc/ada/par-ch2.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4afcf3a5a0391b309520cbcf5d4836d611bd7fd9/gcc%2Fada%2Fpar-ch2.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4afcf3a5a0391b309520cbcf5d4836d611bd7fd9/gcc%2Fada%2Fpar-ch2.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch2.adb?ref=4afcf3a5a0391b309520cbcf5d4836d611bd7fd9", "patch": "@@ -490,7 +490,7 @@ package body Ch2 is\n       Reserved_Words_OK : Boolean := False)\n    is\n       function P_Expression_Or_Reserved_Word return Node_Id;\n-      --  Parse an expression or if the token denotes one of the following\n+      --  Parse an expression or, if the token denotes one of the following\n       --  reserved words, construct an identifier with proper Chars field.\n       --    Access\n       --    Delta\n@@ -644,7 +644,7 @@ package body Ch2 is\n \n       if Identifier_OK then\n \n-         --  Certain pragmas such as Restriction_Warninds and Restrictions\n+         --  Certain pragmas such as Restriction_Warnings and Restrictions\n          --  allow reserved words to appear as expressions when checking for\n          --  prohibited uses of attributes.\n "}, {"sha": "99910f7423e8fb7326b5895efe7eccf799082ab8", "filename": "gcc/ada/s-fileio.adb", "status": "modified", "additions": 23, "deletions": 11, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4afcf3a5a0391b309520cbcf5d4836d611bd7fd9/gcc%2Fada%2Fs-fileio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4afcf3a5a0391b309520cbcf5d4836d611bd7fd9/gcc%2Fada%2Fs-fileio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-fileio.adb?ref=4afcf3a5a0391b309520cbcf5d4836d611bd7fd9", "patch": "@@ -106,17 +106,18 @@ package body System.File_IO is\n    --  Holds open string (longest is \"w+b\" & nul)\n \n    procedure Fopen_Mode\n-     (Mode    : File_Mode;\n+     (Namestr : String;\n+      Mode    : File_Mode;\n       Text    : Boolean;\n       Creat   : Boolean;\n       Amethod : Character;\n       Fopstr  : out Fopen_String);\n    --  Determines proper open mode for a file to be opened in the given Ada\n-   --  mode. Text is true for a text file and false otherwise, and Creat is\n-   --  true for a create call, and False for an open call. The value stored\n-   --  in Fopstr is a nul-terminated string suitable for a call to fopen or\n-   --  freopen. Amethod is the character designating the access method from\n-   --  the Access_Method field of the FCB.\n+   --  mode. Namestr is the NUL-terminated file name. Text is true for a text\n+   --  file and false otherwise, and Creat is true for a create call, and False\n+   --  for an open call. The value stored in Fopstr is a nul-terminated string\n+   --  suitable for a call to fopen or freopen. Amethod is the character\n+   --  designating the access method from the Access_Method field of the FCB.\n \n    function Errno_Message\n      (Name  : String;\n@@ -433,10 +434,14 @@ package body System.File_IO is\n    --                                     OPEN         CREATE\n    --     Append_File                     \"r+\"           \"w+\"\n    --     In_File                         \"r\"            \"w+\"\n-   --     Out_File (Direct_IO, Stream_IO) \"r+\"           \"w\"\n+   --     Out_File (Direct_IO, Stream_IO) \"r+\" [*]       \"w\"\n    --     Out_File (others)               \"w\"            \"w\"\n    --     Inout_File                      \"r+\"           \"w+\"\n \n+   --  [*] Except that for Out_File, if the file exists and is a fifo (i.e. a\n+   --  named pipe), we use \"w\" instead of \"r+\". This is necessary to make a\n+   --  write to the fifo block until a reader is ready.\n+\n    --  Note: we do not use \"a\" or \"a+\" for Append_File, since this would not\n    --  work in the case of stream files, where even if in append file mode,\n    --  you can reset to earlier points in the file. The caller must use the\n@@ -458,14 +463,18 @@ package body System.File_IO is\n    --  to the mode, depending on the setting of Text.\n \n    procedure Fopen_Mode\n-     (Mode    : File_Mode;\n+     (Namestr : String;\n+      Mode    : File_Mode;\n       Text    : Boolean;\n       Creat   : Boolean;\n       Amethod : Character;\n       Fopstr  : out Fopen_String)\n    is\n       Fptr : Positive;\n \n+      function is_fifo (Path : Address) return Integer;\n+      pragma Import (C, is_fifo, \"__gnat_is_fifo\");\n+\n    begin\n       case Mode is\n          when In_File =>\n@@ -479,7 +488,10 @@ package body System.File_IO is\n             end if;\n \n          when Out_File =>\n-            if Amethod in 'D' | 'S' and then not Creat then\n+            if Amethod in 'D' | 'S'\n+              and then not Creat\n+              and then is_fifo (Namestr'Address) = 0\n+            then\n                Fopstr (1) := 'r';\n                Fopstr (2) := '+';\n                Fptr := 3;\n@@ -1045,7 +1057,7 @@ package body System.File_IO is\n \n          else\n             Fopen_Mode\n-              (Mode, Text_Encoding in Text_Content_Encoding,\n+              (Namestr, Mode, Text_Encoding in Text_Content_Encoding,\n                Creat, Amethod, Fopstr);\n \n             --  A special case, if we are opening (OPEN case) a file and the\n@@ -1218,7 +1230,7 @@ package body System.File_IO is\n \n       else\n          Fopen_Mode\n-           (Mode, File.Text_Encoding in Text_Content_Encoding,\n+           (File.Name.all, Mode, File.Text_Encoding in Text_Content_Encoding,\n             False, File.Access_Method, Fopstr);\n \n          File.Stream := freopen"}, {"sha": "9089edd3303412bd196146016d2e6e618371ff38", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4afcf3a5a0391b309520cbcf5d4836d611bd7fd9/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4afcf3a5a0391b309520cbcf5d4836d611bd7fd9/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=4afcf3a5a0391b309520cbcf5d4836d611bd7fd9", "patch": "@@ -5105,7 +5105,8 @@ package body Sem_Attr is\n            (Pref_Id : Entity_Id;\n             Spec_Id : Entity_Id) return Boolean\n          is\n-            Subp_Spec : constant Node_Id := Parent (Spec_Id);\n+            Over_Id   : constant Entity_Id := Overridden_Operation (Spec_Id);\n+            Subp_Spec : constant Node_Id   := Parent (Spec_Id);\n \n          begin\n             --  The prefix denotes the related subprogram\n@@ -5145,6 +5146,14 @@ package body Sem_Attr is\n                then\n                   return True;\n                end if;\n+\n+            --  Account for a special case where a primitive of a tagged type\n+            --  inherits a class-wide postcondition from a parent type. In this\n+            --  case the prefix of attribute 'Result denotes the overriding\n+            --  primitive.\n+\n+            elsif Present (Over_Id) and then Pref_Id = Over_Id then\n+               return True;\n             end if;\n \n             --  Otherwise the prefix does not denote the related subprogram"}, {"sha": "2d6d922f318f80fe8740eb5f5d4c7ac3500bfe4b", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4afcf3a5a0391b309520cbcf5d4836d611bd7fd9/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4afcf3a5a0391b309520cbcf5d4836d611bd7fd9/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=4afcf3a5a0391b309520cbcf5d4836d611bd7fd9", "patch": "@@ -334,7 +334,7 @@ package body Sem_Ch13 is\n                               & \"(component is little-endian)?V?\", CLC);\n                         end if;\n \n-                        --  Do not allow non-contiguous field\n+                     --  Do not allow non-contiguous field\n \n                      else\n                         Error_Msg_N\n@@ -451,7 +451,7 @@ package body Sem_Ch13 is\n                            if Warn_On_Reverse_Bit_Order then\n                               Error_Msg_N\n                                 (\"info: multi-byte field specified with \"\n-                                 & \"  non-standard Bit_Order?V?\", CC);\n+                                 & \"non-standard Bit_Order?V?\", CC);\n \n                               if Bytes_Big_Endian then\n                                  Error_Msg_N"}, {"sha": "f3686b30e371115cac6da0cb7d8569c7866acf94", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4afcf3a5a0391b309520cbcf5d4836d611bd7fd9/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4afcf3a5a0391b309520cbcf5d4836d611bd7fd9/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=4afcf3a5a0391b309520cbcf5d4836d611bd7fd9", "patch": "@@ -2619,6 +2619,11 @@ package body Sem_Ch6 is\n                begin\n                   Set_Defining_Unit_Name (Specification (Decl), Subp);\n \n+                  --  To ensure proper coverage when body is inlined, indicate\n+                  --  whether the subprogram comes from source.\n+\n+                  Set_Comes_From_Source (Subp, Comes_From_Source (N));\n+\n                   if Present (First_Formal (Body_Id)) then\n                      Plist := Copy_Parameter_List (Body_Id);\n                      Set_Parameter_Specifications"}]}