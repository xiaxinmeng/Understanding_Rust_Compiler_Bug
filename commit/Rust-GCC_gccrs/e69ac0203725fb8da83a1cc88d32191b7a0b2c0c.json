{"sha": "e69ac0203725fb8da83a1cc88d32191b7a0b2c0c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTY5YWMwMjAzNzI1ZmI4ZGE4M2ExY2M4OGQzMjE5MWI3YTBiMmMwYw==", "commit": {"author": {"name": "Bernd Edlinger", "email": "bernd.edlinger@hotmail.de", "date": "2021-01-12T15:27:53Z"}, "committer": {"name": "Bernd Edlinger", "email": "bernd.edlinger@hotmail.de", "date": "2021-05-06T14:37:58Z"}, "message": "Add line debug info for virtual thunks\n\nThere is no debug info when the DECL_IGNORED_P flag\nis set.  But sometimes we have the line info of the\nfunction decl, as in the case of on virtual thunks.\nSo instead of no line info at all, we emit at least\nthe location of the function decl.\nOn the other side, there are DECL_IGNORED_P functions\nwhich do not have any source line info at all.\nRemove those from the debug_range info, to make it\nclear for the debugger that the line info for these\nfunctions is invalid.  This has the effect that the\ndebugger will not step into the function without\ndebug info.\n\n2021-05-06  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n\tPR ipa/97937\n\t* debug.h (gcc_debug_hooks): Add set_ignored_loc function pointer.\n\t* dwarf2out.h (dw_fde_node::ignored_debug): New data item.\n\t* dbxout.c (dbx_debug_hooks, xcoff_debug_hooks): Add dummy\n\tset_ignored_loc callbacks.\n\t* debug.c (do_nothing_debug_hooks): Likewise.\n\t* vmsdbgout.c (vmsdbg_debug_hooks): Likewise.\n\t* dwarf2out.c (text_section_used, cold_text_section_used): Remove.\n\t(in_text_section_p, last_text_label, last_cold_label,\n\tswitch_text_ranges, switch_cold_ranges): New data items.\n\t(dwarf2out_note_section_used): Remove.\n\t(dwarf2out_begin_prologue): Set fde->ignored_debug and\n\tin_text_section_p.\n\t(mark_ignored_debug_section): New helper function.\n\t(dwarf2out_end_epilogue, dwarf2out_switch_text_section): Call\n\tmark_ignored_debug_section.\n\t(dwarf2_debug_hooks): Use dwarf2out_set_ignored_loc.\n\t(dwarf2_lineno_debug_hooks): Use dummy for set_ignored_loc.\n\t(size_of_aranges): Adjust formula for multi-part text ranges size.\n\t(output_aranges): Output multi-part text ranges.\n\t(dwarf2out_set_ignored_loc): New callback function.\n\t(dwarf2out_finish): Output multi-part text ranges.\n\t(dwarf2out_c_finalize): Clear new data items.\n\t* final.c (final_start_function_1): Call set_ignored_loc callback.\n\t(final_scan_insn_1): Likewise.\n\t* ggc-page.c (gt_ggc_mx): New helper function.\n\t* stringpool.c (gt_pch_nx): Likewise.", "tree": {"sha": "26336b92515ae622b239818452a41a394fdbf2c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/26336b92515ae622b239818452a41a394fdbf2c9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e69ac0203725fb8da83a1cc88d32191b7a0b2c0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e69ac0203725fb8da83a1cc88d32191b7a0b2c0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e69ac0203725fb8da83a1cc88d32191b7a0b2c0c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e69ac0203725fb8da83a1cc88d32191b7a0b2c0c/comments", "author": {"login": "bernd-edlinger", "id": 17638929, "node_id": "MDQ6VXNlcjE3NjM4OTI5", "avatar_url": "https://avatars.githubusercontent.com/u/17638929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bernd-edlinger", "html_url": "https://github.com/bernd-edlinger", "followers_url": "https://api.github.com/users/bernd-edlinger/followers", "following_url": "https://api.github.com/users/bernd-edlinger/following{/other_user}", "gists_url": "https://api.github.com/users/bernd-edlinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/bernd-edlinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bernd-edlinger/subscriptions", "organizations_url": "https://api.github.com/users/bernd-edlinger/orgs", "repos_url": "https://api.github.com/users/bernd-edlinger/repos", "events_url": "https://api.github.com/users/bernd-edlinger/events{/privacy}", "received_events_url": "https://api.github.com/users/bernd-edlinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bernd-edlinger", "id": 17638929, "node_id": "MDQ6VXNlcjE3NjM4OTI5", "avatar_url": "https://avatars.githubusercontent.com/u/17638929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bernd-edlinger", "html_url": "https://github.com/bernd-edlinger", "followers_url": "https://api.github.com/users/bernd-edlinger/followers", "following_url": "https://api.github.com/users/bernd-edlinger/following{/other_user}", "gists_url": "https://api.github.com/users/bernd-edlinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/bernd-edlinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bernd-edlinger/subscriptions", "organizations_url": "https://api.github.com/users/bernd-edlinger/orgs", "repos_url": "https://api.github.com/users/bernd-edlinger/repos", "events_url": "https://api.github.com/users/bernd-edlinger/events{/privacy}", "received_events_url": "https://api.github.com/users/bernd-edlinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f442f1378f4e9866793309504e38467f34c5d61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f442f1378f4e9866793309504e38467f34c5d61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f442f1378f4e9866793309504e38467f34c5d61"}], "stats": {"total": 274, "additions": 224, "deletions": 50}, "files": [{"sha": "d20527b2c19307b493cac6dce79db5f008a106af", "filename": "gcc/dbxout.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e69ac0203725fb8da83a1cc88d32191b7a0b2c0c/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e69ac0203725fb8da83a1cc88d32191b7a0b2c0c/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=e69ac0203725fb8da83a1cc88d32191b7a0b2c0c", "patch": "@@ -362,6 +362,7 @@ const struct gcc_debug_hooks dbx_debug_hooks =\n   dbxout_end_block,\n   debug_true_const_tree,\t         /* ignore_block */\n   dbxout_source_line,\t\t         /* source_line */\n+  debug_nothing_int_int_charstar,\t /* set_ignored_loc */\n   dbxout_begin_prologue,\t         /* begin_prologue */\n   debug_nothing_int_charstar,\t         /* end_prologue */\n   debug_nothing_int_charstar,\t         /* begin_epilogue */\n@@ -409,6 +410,7 @@ const struct gcc_debug_hooks xcoff_debug_hooks =\n   xcoffout_end_block,\n   debug_true_const_tree,\t         /* ignore_block */\n   xcoffout_source_line,\n+  debug_nothing_int_int_charstar,\t /* set_ignored_loc */\n   xcoffout_begin_prologue,\t         /* begin_prologue */\n   debug_nothing_int_charstar,\t         /* end_prologue */\n   debug_nothing_int_charstar,\t         /* begin_epilogue */"}, {"sha": "39add0d0b3909304fbb8e43fcd6fce3d0ca0399b", "filename": "gcc/debug.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e69ac0203725fb8da83a1cc88d32191b7a0b2c0c/gcc%2Fdebug.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e69ac0203725fb8da83a1cc88d32191b7a0b2c0c/gcc%2Fdebug.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdebug.c?ref=e69ac0203725fb8da83a1cc88d32191b7a0b2c0c", "patch": "@@ -36,6 +36,7 @@ const struct gcc_debug_hooks do_nothing_debug_hooks =\n   debug_nothing_int_int,\t         /* end_block */\n   debug_true_const_tree,\t         /* ignore_block */\n   debug_nothing_int_int_charstar_int_bool, /* source_line */\n+  debug_nothing_int_int_charstar,\t /* set_ignored_loc */\n   debug_nothing_int_int_charstar,\t /* begin_prologue */\n   debug_nothing_int_charstar,\t         /* end_prologue */\n   debug_nothing_int_charstar,\t         /* begin_epilogue */"}, {"sha": "ad45ea5374bf4956a7a87dec97fc25d970339f95", "filename": "gcc/debug.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e69ac0203725fb8da83a1cc88d32191b7a0b2c0c/gcc%2Fdebug.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e69ac0203725fb8da83a1cc88d32191b7a0b2c0c/gcc%2Fdebug.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdebug.h?ref=e69ac0203725fb8da83a1cc88d32191b7a0b2c0c", "patch": "@@ -73,6 +73,10 @@ struct gcc_debug_hooks\n   void (* source_line) (unsigned int line, unsigned int column,\n \t\t\tconst char *file, int discriminator, bool is_stmt);\n \n+  /* Record a source file location for a DECL_IGNORED_P function.  */\n+  void (* set_ignored_loc) (unsigned int line, unsigned int column,\n+\t\t\t    const char *file);\n+\n   /* Called at start of prologue code.  LINE is the first line in the\n      function.  */\n   void (* begin_prologue) (unsigned int line, unsigned int column,"}, {"sha": "871362b5d0c7ae2e14a4c6986cf2f51fb81c8369", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 194, "deletions": 50, "changes": 244, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e69ac0203725fb8da83a1cc88d32191b7a0b2c0c/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e69ac0203725fb8da83a1cc88d32191b7a0b2c0c/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=e69ac0203725fb8da83a1cc88d32191b7a0b2c0c", "patch": "@@ -259,13 +259,21 @@ static GTY(()) int dw2_string_counter;\n /* True if the compilation unit places functions in more than one section.  */\n static GTY(()) bool have_multiple_function_sections = false;\n \n-/* Whether the default text and cold text sections have been used at all.  */\n-static GTY(()) bool text_section_used = false;\n-static GTY(()) bool cold_text_section_used = false;\n-\n /* The default cold text section.  */\n static GTY(()) section *cold_text_section;\n \n+/* True if currently in text section.  */\n+static GTY(()) bool in_text_section_p = false;\n+\n+/* Last debug-on location in corresponding section.  */\n+static GTY(()) const char *last_text_label;\n+static GTY(()) const char *last_cold_label;\n+\n+/* Mark debug-on/off locations per section.\n+   NULL means the section is not used at all.  */\n+static GTY(()) vec<const char *, va_gc> *switch_text_ranges;\n+static GTY(()) vec<const char *, va_gc> *switch_cold_ranges;\n+\n /* The DIE for C++14 'auto' in a function return type.  */\n static GTY(()) dw_die_ref auto_die;\n \n@@ -275,7 +283,6 @@ static GTY(()) dw_die_ref decltype_auto_die;\n /* Forward declarations for functions defined in this file.  */\n \n static void output_call_frame_info (int);\n-static void dwarf2out_note_section_used (void);\n \n /* Personality decl of current unit.  Used only when assembler does not support\n    personality CFI.  */\n@@ -1107,6 +1114,8 @@ dwarf2out_begin_prologue (unsigned int line ATTRIBUTE_UNUSED,\n   fde->dw_fde_current_label = dup_label;\n   fde->in_std_section = (fnsec == text_section\n \t\t\t || (cold_text_section && fnsec == cold_text_section));\n+  fde->ignored_debug = DECL_IGNORED_P (current_function_decl);\n+  in_text_section_p = fnsec == text_section;\n \n   /* We only want to output line number information for the genuine dwarf2\n      prologue case, not the eh frame case.  */\n@@ -1174,6 +1183,59 @@ dwarf2out_vms_begin_epilogue (unsigned int line ATTRIBUTE_UNUSED,\n   fde->dw_fde_vms_begin_epilogue = xstrdup (label);\n }\n \n+/* Mark the ranges of non-debug subsections in the std text sections.  */\n+\n+static void\n+mark_ignored_debug_section (dw_fde_ref fde, bool second)\n+{\n+  bool std_section;\n+  const char *begin_label, *end_label;\n+  const char **last_end_label;\n+  vec<const char *, va_gc> **switch_ranges;\n+\n+  if (second)\n+    {\n+      std_section = fde->second_in_std_section;\n+      begin_label = fde->dw_fde_second_begin;\n+      end_label   = fde->dw_fde_second_end;\n+    }\n+  else\n+    {\n+      std_section = fde->in_std_section;\n+      begin_label = fde->dw_fde_begin;\n+      end_label   = fde->dw_fde_end;\n+    }\n+\n+  if (!std_section)\n+    return;\n+\n+  if (in_text_section_p)\n+    {\n+      last_end_label = &last_text_label;\n+      switch_ranges  = &switch_text_ranges;\n+    }\n+  else\n+    {\n+      last_end_label = &last_cold_label;\n+      switch_ranges  = &switch_cold_ranges;\n+    }\n+\n+  if (fde->ignored_debug)\n+    {\n+      if (*switch_ranges && !(vec_safe_length (*switch_ranges) & 1))\n+\tvec_safe_push (*switch_ranges, *last_end_label);\n+    }\n+  else\n+    {\n+      *last_end_label = end_label;\n+\n+      if (!*switch_ranges)\n+\tvec_alloc (*switch_ranges, 16);\n+      else if (vec_safe_length (*switch_ranges) & 1)\n+\tvec_safe_push (*switch_ranges, begin_label);\n+    }\n+}\n+\n /* Output a marker (i.e. a label) for the absolute end of the generated code\n    for a function definition.  This gets called *after* the epilogue code has\n    been generated.  */\n@@ -1200,6 +1262,8 @@ dwarf2out_end_epilogue (unsigned int line ATTRIBUTE_UNUSED,\n   gcc_assert (fde != NULL);\n   if (fde->dw_fde_second_begin == NULL)\n     fde->dw_fde_end = xstrdup (label);\n+\n+  mark_ignored_debug_section (fde, fde->dw_fde_second_begin != NULL);\n }\n \n void\n@@ -1214,18 +1278,6 @@ dwarf2out_frame_finish (void)\n     output_call_frame_info (1);\n }\n \n-/* Note that the current function section is being used for code.  */\n-\n-static void\n-dwarf2out_note_section_used (void)\n-{\n-  section *sec = current_function_section ();\n-  if (sec == text_section)\n-    text_section_used = true;\n-  else if (sec == cold_text_section)\n-    cold_text_section_used = true;\n-}\n-\n static void var_location_switch_text_section (void);\n static void set_cur_line_info_table (section *);\n \n@@ -1254,20 +1306,19 @@ dwarf2out_switch_text_section (void)\n     }\n   have_multiple_function_sections = true;\n \n-  /* There is no need to mark used sections when not debugging.  */\n-  if (cold_text_section != NULL)\n-    dwarf2out_note_section_used ();\n-\n   if (dwarf2out_do_cfi_asm ())\n     fprintf (asm_out_file, \"\\t.cfi_endproc\\n\");\n \n+  mark_ignored_debug_section (fde, false);\n+\n   /* Now do the real section switch.  */\n   sect = current_function_section ();\n   switch_to_section (sect);\n \n   fde->second_in_std_section\n     = (sect == text_section\n        || (cold_text_section && sect == cold_text_section));\n+  in_text_section_p = sect == text_section;\n \n   if (dwarf2out_do_cfi_asm ())\n     dwarf2out_do_cfi_startproc (true);\n@@ -2801,6 +2852,7 @@ static void dwarf2out_function_decl (tree);\n static void dwarf2out_begin_block (unsigned, unsigned);\n static void dwarf2out_end_block (unsigned, unsigned);\n static bool dwarf2out_ignore_block (const_tree);\n+static void dwarf2out_set_ignored_loc (unsigned, unsigned, const char *);\n static void dwarf2out_early_global_decl (tree);\n static void dwarf2out_late_global_decl (tree);\n static void dwarf2out_type_decl (tree, int);\n@@ -2836,6 +2888,7 @@ const struct gcc_debug_hooks dwarf2_debug_hooks =\n   dwarf2out_end_block,\n   dwarf2out_ignore_block,\n   dwarf2out_source_line,\n+  dwarf2out_set_ignored_loc,\n   dwarf2out_begin_prologue,\n #if VMS_DEBUGGING_INFO\n   dwarf2out_vms_end_prologue,\n@@ -2885,6 +2938,7 @@ const struct gcc_debug_hooks dwarf2_lineno_debug_hooks =\n   debug_nothing_int_int,\t         /* end_block */\n   debug_true_const_tree,\t         /* ignore_block */\n   dwarf2out_source_line,\t\t /* source_line */\n+  debug_nothing_int_int_charstar,\t /* set_ignored_loc */\n   debug_nothing_int_int_charstar,\t /* begin_prologue */\n   debug_nothing_int_charstar,\t         /* end_prologue */\n   debug_nothing_int_charstar,\t         /* begin_epilogue */\n@@ -9756,18 +9810,20 @@ size_of_aranges (void)\n   size = DWARF_ARANGES_HEADER_SIZE;\n \n   /* Count the address/length pair for this compilation unit.  */\n-  if (text_section_used)\n-    size += 2 * DWARF2_ADDR_SIZE;\n-  if (cold_text_section_used)\n-    size += 2 * DWARF2_ADDR_SIZE;\n+  if (switch_text_ranges)\n+    size += 2 * DWARF2_ADDR_SIZE\n+\t    * (vec_safe_length (switch_text_ranges) / 2 + 1);\n+  if (switch_cold_ranges)\n+    size += 2 * DWARF2_ADDR_SIZE\n+\t    * (vec_safe_length (switch_cold_ranges) / 2 + 1);\n   if (have_multiple_function_sections)\n     {\n       unsigned fde_idx;\n       dw_fde_ref fde;\n \n       FOR_EACH_VEC_ELT (*fde_vec, fde_idx, fde)\n \t{\n-\t  if (DECL_IGNORED_P (fde->decl))\n+\t  if (fde->ignored_debug)\n \t    continue;\n \t  if (!fde->in_std_section)\n \t    size += 2 * DWARF2_ADDR_SIZE;\n@@ -11713,18 +11769,52 @@ output_aranges (void)\n      the address may end up as 0 if the section is discarded by ld\n      --gc-sections, leaving an invalid (0, 0) entry that can be\n      confused with the terminator.  */\n-  if (text_section_used)\n+  if (switch_text_ranges)\n     {\n-      dw2_asm_output_addr (DWARF2_ADDR_SIZE, text_section_label, \"Address\");\n-      dw2_asm_output_delta (DWARF2_ADDR_SIZE, text_end_label,\n-\t\t\t    text_section_label, \"Length\");\n+      const char *prev_loc = text_section_label;\n+      const char *loc;\n+      unsigned idx;\n+\n+      FOR_EACH_VEC_ELT (*switch_text_ranges, idx, loc)\n+\tif (prev_loc)\n+\t  {\n+\t    dw2_asm_output_addr (DWARF2_ADDR_SIZE, prev_loc, \"Address\");\n+\t    dw2_asm_output_delta (DWARF2_ADDR_SIZE, loc, prev_loc, \"Length\");\n+\t    prev_loc = NULL;\n+\t  }\n+\telse\n+\t  prev_loc = loc;\n+\n+      if (prev_loc)\n+\t{\n+\t  dw2_asm_output_addr (DWARF2_ADDR_SIZE, prev_loc, \"Address\");\n+\t  dw2_asm_output_delta (DWARF2_ADDR_SIZE, text_end_label,\n+\t\t\t\tprev_loc, \"Length\");\n+\t}\n     }\n-  if (cold_text_section_used)\n+\n+  if (switch_cold_ranges)\n     {\n-      dw2_asm_output_addr (DWARF2_ADDR_SIZE, cold_text_section_label,\n-\t\t\t   \"Address\");\n-      dw2_asm_output_delta (DWARF2_ADDR_SIZE, cold_end_label,\n-\t\t\t    cold_text_section_label, \"Length\");\n+      const char *prev_loc = cold_text_section_label;\n+      const char *loc;\n+      unsigned idx;\n+\n+      FOR_EACH_VEC_ELT (*switch_cold_ranges, idx, loc)\n+\tif (prev_loc)\n+\t  {\n+\t    dw2_asm_output_addr (DWARF2_ADDR_SIZE, prev_loc, \"Address\");\n+\t    dw2_asm_output_delta (DWARF2_ADDR_SIZE, loc, prev_loc, \"Length\");\n+\t    prev_loc = NULL;\n+\t  }\n+\telse\n+\t  prev_loc = loc;\n+\n+      if (prev_loc)\n+\t{\n+\t  dw2_asm_output_addr (DWARF2_ADDR_SIZE, prev_loc, \"Address\");\n+\t  dw2_asm_output_delta (DWARF2_ADDR_SIZE, cold_end_label,\n+\t\t\t\tprev_loc, \"Length\");\n+\t}\n     }\n \n   if (have_multiple_function_sections)\n@@ -11734,7 +11824,7 @@ output_aranges (void)\n \n       FOR_EACH_VEC_ELT (*fde_vec, fde_idx, fde)\n \t{\n-\t  if (DECL_IGNORED_P (fde->decl))\n+\t  if (fde->ignored_debug)\n \t    continue;\n \t  if (!fde->in_std_section)\n \t    {\n@@ -28020,7 +28110,6 @@ dwarf2out_begin_function (tree fun)\n       switch_to_section (sec);\n     }\n \n-  dwarf2out_note_section_used ();\n   call_site_count = 0;\n   tail_call_site_count = 0;\n \n@@ -28323,6 +28412,20 @@ dwarf2out_source_line (unsigned int line, unsigned int column,\n   table->in_use = true;\n }\n \n+/* Record a source file location for a DECL_IGNORED_P function.  */\n+\n+static void\n+dwarf2out_set_ignored_loc (unsigned int line, unsigned int column,\n+\t\t\t   const char *filename)\n+{\n+  dw_fde_ref fde = cfun->fde;\n+\n+  fde->ignored_debug = false;\n+  set_cur_line_info_table (function_section (fde->decl));\n+\n+  dwarf2out_source_line (line, column, filename, 0, true);\n+}\n+\n /* Record the beginning of a new source file.  */\n \n static void\n@@ -31760,30 +31863,68 @@ dwarf2out_finish (const char *filename)\n \n   /* We can only use the low/high_pc attributes if all of the code was\n      in .text.  */\n-  if (!have_multiple_function_sections \n+  if ((!have_multiple_function_sections\n+       && vec_safe_length (switch_text_ranges) < 2)\n       || (dwarf_version < 3 && dwarf_strict))\n     {\n+      const char *end_label = text_end_label;\n+      if (vec_safe_length (switch_text_ranges) == 1)\n+\tend_label = (*switch_text_ranges)[0];\n       /* Don't add if the CU has no associated code.  */\n-      if (text_section_used)\n-        add_AT_low_high_pc (main_comp_unit_die, text_section_label,\n-                            text_end_label, true);\n+      if (switch_text_ranges)\n+\tadd_AT_low_high_pc (main_comp_unit_die, text_section_label,\n+\t\t\t    end_label, true);\n     }\n   else\n     {\n       unsigned fde_idx;\n       dw_fde_ref fde;\n       bool range_list_added = false;\n+      if (switch_text_ranges)\n+\t{\n+\t  const char *prev_loc = text_section_label;\n+\t  const char *loc;\n+\t  unsigned idx;\n+\n+\t  FOR_EACH_VEC_ELT (*switch_text_ranges, idx, loc)\n+\t    if (prev_loc)\n+\t      {\n+\t\tadd_ranges_by_labels (main_comp_unit_die, prev_loc,\n+\t\t\t\t      loc, &range_list_added, true);\n+\t\tprev_loc = NULL;\n+\t      }\n+\t    else\n+\t      prev_loc = loc;\n \n-      if (text_section_used)\n-        add_ranges_by_labels (main_comp_unit_die, text_section_label,\n-                              text_end_label, &range_list_added, true);\n-      if (cold_text_section_used)\n-        add_ranges_by_labels (main_comp_unit_die, cold_text_section_label,\n-                              cold_end_label, &range_list_added, true);\n+\t  if (prev_loc)\n+\t    add_ranges_by_labels (main_comp_unit_die, prev_loc,\n+\t\t\t\t  text_end_label, &range_list_added, true);\n+\t}\n+\n+      if (switch_cold_ranges)\n+\t{\n+\t  const char *prev_loc = cold_text_section_label;\n+\t  const char *loc;\n+\t  unsigned idx;\n+\n+\t  FOR_EACH_VEC_ELT (*switch_cold_ranges, idx, loc)\n+\t    if (prev_loc)\n+\t      {\n+\t\tadd_ranges_by_labels (main_comp_unit_die, prev_loc,\n+\t\t\t\t      loc, &range_list_added, true);\n+\t\tprev_loc = NULL;\n+\t      }\n+\t    else\n+\t      prev_loc = loc;\n+\n+\t  if (prev_loc)\n+\t    add_ranges_by_labels (main_comp_unit_die, prev_loc,\n+\t\t\t\t  cold_end_label, &range_list_added, true);\n+\t}\n \n       FOR_EACH_VEC_ELT (*fde_vec, fde_idx, fde)\n \t{\n-\t  if (DECL_IGNORED_P (fde->decl))\n+\t  if (fde->ignored_debug)\n \t    continue;\n \t  if (!fde->in_std_section)\n             add_ranges_by_labels (main_comp_unit_die, fde->dw_fde_begin,\n@@ -32657,9 +32798,12 @@ dwarf2out_c_finalize (void)\n   skeleton_debug_str_hash = NULL;\n   dw2_string_counter = 0;\n   have_multiple_function_sections = false;\n-  text_section_used = false;\n-  cold_text_section_used = false;\n+  in_text_section_p = false;\n   cold_text_section = NULL;\n+  last_text_label = NULL;\n+  last_cold_label = NULL;\n+  switch_text_ranges = NULL;\n+  switch_cold_ranges = NULL;\n   current_unit_personality = NULL;\n \n   early_dwarf = false;"}, {"sha": "54b6343704c72fdfad83665ea007354b730b3f93", "filename": "gcc/dwarf2out.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e69ac0203725fb8da83a1cc88d32191b7a0b2c0c/gcc%2Fdwarf2out.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e69ac0203725fb8da83a1cc88d32191b7a0b2c0c/gcc%2Fdwarf2out.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.h?ref=e69ac0203725fb8da83a1cc88d32191b7a0b2c0c", "patch": "@@ -114,6 +114,8 @@ struct GTY(()) dw_fde_node {\n      hard frame pointer register should be emitted only on the latter\n      instruction.  */\n   unsigned rule18 : 1;\n+  /* True if this function is to be ignored by debugger.  */\n+  unsigned ignored_debug : 1;\n };\n \n "}, {"sha": "e0a70fcd830b9c40f341a9e85ae3f6196ea64707", "filename": "gcc/final.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e69ac0203725fb8da83a1cc88d32191b7a0b2c0c/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e69ac0203725fb8da83a1cc88d32191b7a0b2c0c/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=e69ac0203725fb8da83a1cc88d32191b7a0b2c0c", "patch": "@@ -1724,6 +1724,9 @@ final_start_function_1 (rtx_insn **firstp, FILE *file, int *seen,\n   if (!dwarf2_debug_info_emitted_p (current_function_decl))\n     dwarf2out_begin_prologue (0, 0, NULL);\n \n+  if (DECL_IGNORED_P (current_function_decl) && last_linenum && last_filename)\n+    debug_hooks->set_ignored_loc (last_linenum, last_columnnum, last_filename);\n+\n #ifdef LEAF_REG_REMAP\n   if (crtl->uses_only_leaf_regs)\n     leaf_renumber_regs (first);\n@@ -2187,6 +2190,7 @@ final_scan_insn_1 (rtx_insn *insn, FILE *file, int optimize_p ATTRIBUTE_UNUSED,\n \n \t  in_cold_section_p = !in_cold_section_p;\n \n+\t  gcc_checking_assert (in_cold_section_p);\n \t  if (in_cold_section_p)\n \t    cold_function_name\n \t      = clone_function_name (current_function_decl, \"cold\");\n@@ -2200,6 +2204,10 @@ final_scan_insn_1 (rtx_insn *insn, FILE *file, int optimize_p ATTRIBUTE_UNUSED,\n \t    }\n \t  else if (!DECL_IGNORED_P (current_function_decl))\n \t    debug_hooks->switch_text_section ();\n+\t  if (DECL_IGNORED_P (current_function_decl) && last_linenum\n+\t      && last_filename)\n+\t    debug_hooks->set_ignored_loc (last_linenum, last_columnnum,\n+\t\t\t\t\t  last_filename);\n \n \t  switch_to_section (current_function_section ());\n \t  targetm.asm_out.function_switched_text_sections (asm_out_file,"}, {"sha": "1b09f0da94ff33c37cad8839e28b834189d16040", "filename": "gcc/ggc-page.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e69ac0203725fb8da83a1cc88d32191b7a0b2c0c/gcc%2Fggc-page.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e69ac0203725fb8da83a1cc88d32191b7a0b2c0c/gcc%2Fggc-page.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-page.c?ref=e69ac0203725fb8da83a1cc88d32191b7a0b2c0c", "patch": "@@ -1517,6 +1517,12 @@ gt_ggc_mx (const char *& x)\n   gt_ggc_m_S (x);\n }\n \n+void\n+gt_ggc_mx (char *& x)\n+{\n+  gt_ggc_m_S (x);\n+}\n+\n void\n gt_ggc_mx (unsigned char *& x)\n {"}, {"sha": "2f21466af245d282e6cc9d4a10e1b7495209f29b", "filename": "gcc/stringpool.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e69ac0203725fb8da83a1cc88d32191b7a0b2c0c/gcc%2Fstringpool.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e69ac0203725fb8da83a1cc88d32191b7a0b2c0c/gcc%2Fstringpool.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstringpool.c?ref=e69ac0203725fb8da83a1cc88d32191b7a0b2c0c", "patch": "@@ -205,6 +205,12 @@ gt_pch_nx (const char *& x)\n   gt_pch_n_S (x);\n }\n \n+void\n+gt_pch_nx (char *& x)\n+{\n+  gt_pch_n_S (x);\n+}\n+\n void\n gt_pch_nx (unsigned char *& x)\n {"}, {"sha": "05fadce075e5573f50a45b492d4dde30cbaddb79", "filename": "gcc/vmsdbgout.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e69ac0203725fb8da83a1cc88d32191b7a0b2c0c/gcc%2Fvmsdbgout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e69ac0203725fb8da83a1cc88d32191b7a0b2c0c/gcc%2Fvmsdbgout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvmsdbgout.c?ref=e69ac0203725fb8da83a1cc88d32191b7a0b2c0c", "patch": "@@ -188,6 +188,7 @@ const struct gcc_debug_hooks vmsdbg_debug_hooks\n    vmsdbgout_end_block,\n    vmsdbgout_ignore_block,\n    vmsdbgout_source_line,\n+   debug_nothing_int_int_charstar, /* set_ignored_loc */\n    vmsdbgout_begin_prologue,\n    vmsdbgout_end_prologue,\n    vmsdbgout_begin_epilogue,"}]}