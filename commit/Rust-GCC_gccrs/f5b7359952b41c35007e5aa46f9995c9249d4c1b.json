{"sha": "f5b7359952b41c35007e5aa46f9995c9249d4c1b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjViNzM1OTk1MmI0MWMzNTAwN2U1YWE0NmY5OTk1YzkyNDlkNGMxYg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-05-06T08:54:40Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-05-06T08:54:40Z"}, "message": "re PR tree-optimization/90316 (large compile time increase in opt / alias stmt walking for Go example)\n\n2019-05-06  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/90316\n\t* tree-ssa-alias.c (maybe_skip_until): Pass in target BB,\n\tcompute target on demand.\n\t(get_continuation_for_phi): Remove code walking stmts to\n\tget to a target virtual operand which could end up being\n\tquadratic.\n\nFrom-SVN: r270902", "tree": {"sha": "f63ad91d6bfe9b5feb25cd2a5dd5e6312fcb8556", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f63ad91d6bfe9b5feb25cd2a5dd5e6312fcb8556"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5b7359952b41c35007e5aa46f9995c9249d4c1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5b7359952b41c35007e5aa46f9995c9249d4c1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5b7359952b41c35007e5aa46f9995c9249d4c1b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5b7359952b41c35007e5aa46f9995c9249d4c1b/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2bbbfa4e2885f86ea418de9f665375594bf38aaa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bbbfa4e2885f86ea418de9f665375594bf38aaa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bbbfa4e2885f86ea418de9f665375594bf38aaa"}], "stats": {"total": 68, "additions": 29, "deletions": 39}, "files": [{"sha": "c5ca9cd7b19f28f6fb5d0b3f3a0e57e71f1c373d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5b7359952b41c35007e5aa46f9995c9249d4c1b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5b7359952b41c35007e5aa46f9995c9249d4c1b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f5b7359952b41c35007e5aa46f9995c9249d4c1b", "patch": "@@ -1,3 +1,12 @@\n+2019-05-06  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/90316\n+\t* tree-ssa-alias.c (maybe_skip_until): Pass in target BB,\n+\tcompute target on demand.\n+\t(get_continuation_for_phi): Remove code walking stmts to\n+\tget to a target virtual operand which could end up being\n+\tquadratic.\n+\n 2019-05-06  Martin Liska  <mliska@suse.cz>\n \n \tPR sanitizer/90312"}, {"sha": "4d00d381542c6ddb01f375529244130cb2f144b1", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 20, "deletions": 39, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5b7359952b41c35007e5aa46f9995c9249d4c1b/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5b7359952b41c35007e5aa46f9995c9249d4c1b/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=f5b7359952b41c35007e5aa46f9995c9249d4c1b", "patch": "@@ -2598,8 +2598,8 @@ stmt_kills_ref_p (gimple *stmt, tree ref)\n    case false is returned.  The walk starts with VUSE, one argument of PHI.  */\n \n static bool\n-maybe_skip_until (gimple *phi, tree target, ao_ref *ref,\n-\t\t  tree vuse, unsigned int *cnt, bitmap *visited,\n+maybe_skip_until (gimple *phi, tree &target, basic_block target_bb,\n+\t\t  ao_ref *ref, tree vuse, unsigned int *cnt, bitmap *visited,\n \t\t  bool abort_on_visited,\n \t\t  void *(*translate)(ao_ref *, tree, void *, bool *),\n \t\t  void *data)\n@@ -2615,6 +2615,19 @@ maybe_skip_until (gimple *phi, tree target, ao_ref *ref,\n   while (vuse != target)\n     {\n       gimple *def_stmt = SSA_NAME_DEF_STMT (vuse);\n+      /* If we are searching for the target VUSE by walking up to\n+         TARGET_BB dominating the original PHI we are finished once\n+\t we reach a default def or a definition in a block dominating\n+\t that block.  Update TARGET and return.  */\n+      if (!target\n+\t  && (gimple_nop_p (def_stmt)\n+\t      || dominated_by_p (CDI_DOMINATORS,\n+\t\t\t\t target_bb, gimple_bb (def_stmt))))\n+\t{\n+\t  target = vuse;\n+\t  return true;\n+\t}\n+\n       /* Recurse for PHI nodes.  */\n       if (gimple_code (def_stmt) == GIMPLE_PHI)\n \t{\n@@ -2698,49 +2711,17 @@ get_continuation_for_phi (gimple *phi, ao_ref *ref,\n       arg0 = NULL_TREE;\n     }\n   /* If not, look if we can reach such candidate by walking defs\n-     of a PHI arg without crossing other PHIs.  */\n-  if (! arg0)\n-    for (i = 0; i < nargs; ++i)\n-      {\n-\targ0 = PHI_ARG_DEF (phi, i);\n-\tgimple *def = SSA_NAME_DEF_STMT (arg0);\n-\t/* Backedges can't work.  */\n-\tif (dominated_by_p (CDI_DOMINATORS,\n-\t\t\t    gimple_bb (def), phi_bb))\n-\t  continue;\n-\t/* See below.  */\n-\tif (gimple_code (def) == GIMPLE_PHI)\n-\t  continue;\n-\twhile (! dominated_by_p (CDI_DOMINATORS,\n-\t\t\t\t phi_bb, gimple_bb (def)))\n-\t  {\n-\t    arg0 = gimple_vuse (def);\n-\t    if (SSA_NAME_IS_DEFAULT_DEF (arg0))\n-\t      break;\n-\t    def = SSA_NAME_DEF_STMT (arg0);\n-\t    if (gimple_code (def) == GIMPLE_PHI)\n-\t      {\n-\t\t/* Do not try to look through arbitrarily complicated\n-\t\t   CFGs.  For those looking for the first VUSE starting\n-\t\t   from the end of the immediate dominator of phi_bb\n-\t\t   is likely faster.  */\n-\t\targ0 = NULL_TREE;\n-\t\tgoto next;\n-\t      }\n-\t  }\n-\tbreak;\n-next:;\n-      }\n-  if (! arg0)\n-    return NULL_TREE;\n+     until we hit the immediate dominator.  maybe_skip_until will\n+     do that for us.  */\n+  basic_block dom = get_immediate_dominator (CDI_DOMINATORS, phi_bb);\n \n-  /* Then check against the found candidate.  */\n+  /* Then check against the (to be) found candidate.  */\n   for (i = 0; i < nargs; ++i)\n     {\n       arg1 = PHI_ARG_DEF (phi, i);\n       if (arg1 == arg0)\n \t;\n-      else if (! maybe_skip_until (phi, arg0, ref, arg1, cnt, visited,\n+      else if (! maybe_skip_until (phi, arg0, dom, ref, arg1, cnt, visited,\n \t\t\t\t   abort_on_visited,\n \t\t\t\t   /* Do not translate when walking over\n \t\t\t\t      backedges.  */"}]}