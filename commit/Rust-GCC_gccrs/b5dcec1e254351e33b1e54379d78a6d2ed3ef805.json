{"sha": "b5dcec1e254351e33b1e54379d78a6d2ed3ef805", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjVkY2VjMWUyNTQzNTFlMzNiMWU1NDM3OWQ3OGE2ZDJlZDNlZjgwNQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@nildram.co.uk", "date": "2007-11-25T14:45:53Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2007-11-25T14:45:53Z"}, "message": "tree-sra.c (scalarize_use): Adjust the vpos argument to sra_explode_bitfield_assignment in cases where the...\n\ngcc/\n\t* tree-sra.c (scalarize_use): Adjust the vpos argument to\n\tsra_explode_bitfield_assignment in cases where the type is\n\twider than the bitfield.\n\nFrom-SVN: r130408", "tree": {"sha": "559f6dd9e3f8349eba8f4861bdbf6737a188d3ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/559f6dd9e3f8349eba8f4861bdbf6737a188d3ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b5dcec1e254351e33b1e54379d78a6d2ed3ef805", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5dcec1e254351e33b1e54379d78a6d2ed3ef805", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5dcec1e254351e33b1e54379d78a6d2ed3ef805", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5dcec1e254351e33b1e54379d78a6d2ed3ef805/comments", "author": null, "committer": null, "parents": [{"sha": "87caf699bdbee02675437483d08bcfa742277a62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87caf699bdbee02675437483d08bcfa742277a62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87caf699bdbee02675437483d08bcfa742277a62"}], "stats": {"total": 30, "additions": 26, "deletions": 4}, "files": [{"sha": "6308dae3e102812d2ee757489a6dc8f1df0f6916", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5dcec1e254351e33b1e54379d78a6d2ed3ef805/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5dcec1e254351e33b1e54379d78a6d2ed3ef805/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b5dcec1e254351e33b1e54379d78a6d2ed3ef805", "patch": "@@ -1,3 +1,9 @@\n+2007-11-25  Richard Sandiford  <rsandifo@nildram.co.uk>\n+\n+\t* tree-sra.c (scalarize_use): Adjust the vpos argument to\n+\tsra_explode_bitfield_assignment in cases where the type is\n+\twider than the bitfield.\n+\n 2007-11-25  Richard Guenther  <rguenther@suse.de>\n \n \t* tree.h (struct tree_block): Move locus member next to"}, {"sha": "83c5d8a2f09194915ca052320a7689f92a79aab2", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5dcec1e254351e33b1e54379d78a6d2ed3ef805/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5dcec1e254351e33b1e54379d78a6d2ed3ef805/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=b5dcec1e254351e33b1e54379d78a6d2ed3ef805", "patch": "@@ -3147,7 +3147,7 @@ scalarize_use (struct sra_elt *elt, tree *expr_p, block_stmt_iterator *bsi,\n       if (!elt->use_block_copy)\n \t{\n \t  tree type = TREE_TYPE (bfexpr);\n-\t  tree var = make_rename_temp (type, \"SR\"), tmp, st;\n+\t  tree var = make_rename_temp (type, \"SR\"), tmp, st, vpos;\n \n \t  GIMPLE_STMT_OPERAND (stmt, 0) = var;\n \t  update = true;\n@@ -3162,8 +3162,16 @@ scalarize_use (struct sra_elt *elt, tree *expr_p, block_stmt_iterator *bsi,\n \t      var = tmp;\n \t    }\n \n+\t  /* If VAR is wider than BLEN bits, it is padded at the\n+\t     most-significant end.  We want to set VPOS such that\n+\t     <BIT_FIELD_REF VAR BLEN VPOS> would refer to the\n+\t     least-significant BLEN bits of VAR.  */\n+\t  if (BYTES_BIG_ENDIAN)\n+\t    vpos = size_binop (MINUS_EXPR, TYPE_SIZE (type), blen);\n+\t  else\n+\t    vpos = bitsize_int (0);\n \t  sra_explode_bitfield_assignment\n-\t    (var, bitsize_int (0), false, &listafter, blen, bpos, elt);\n+\t    (var, vpos, false, &listafter, blen, bpos, elt);\n \t}\n       else\n \tsra_sync_for_bitfield_assignment\n@@ -3199,7 +3207,7 @@ scalarize_use (struct sra_elt *elt, tree *expr_p, block_stmt_iterator *bsi,\n       if (!elt->use_block_copy)\n \t{\n \t  tree type = TREE_TYPE (bfexpr);\n-\t  tree var;\n+\t  tree var, vpos;\n \n \t  if (!TYPE_UNSIGNED (type))\n \t    type = unsigned_type_for (type);\n@@ -3210,8 +3218,16 @@ scalarize_use (struct sra_elt *elt, tree *expr_p, block_stmt_iterator *bsi,\n \t\t\t\t    (var, build_int_cst_wide (type, 0, 0)),\n \t\t\t\t    &list);\n \n+\t  /* If VAR is wider than BLEN bits, it is padded at the\n+\t     most-significant end.  We want to set VPOS such that\n+\t     <BIT_FIELD_REF VAR BLEN VPOS> would refer to the\n+\t     least-significant BLEN bits of VAR.  */\n+\t  if (BYTES_BIG_ENDIAN)\n+\t    vpos = size_binop (MINUS_EXPR, TYPE_SIZE (type), blen);\n+\t  else\n+\t    vpos = bitsize_int (0);\n \t  sra_explode_bitfield_assignment\n-\t    (var, bitsize_int (0), true, &list, blen, bpos, elt);\n+\t    (var, vpos, true, &list, blen, bpos, elt);\n \n \t  GIMPLE_STMT_OPERAND (stmt, 1) = var;\n \t  update = true;"}]}