{"sha": "b5af313312d166f0d94ae408f28db90486236496", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjVhZjMxMzMxMmQxNjZmMGQ5NGFlNDA4ZjI4ZGI5MDQ4NjIzNjQ5Ng==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2005-03-09T07:28:10Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2005-03-09T07:28:10Z"}, "message": "re PR c++/20142 (implicit assignment operator with multi-dimensional array is broken)\n\n\tPR c++/20142\n\t* cp-tree.h (target_type): Remove.\n\t* decl.c (layout_var_decl): Remove #if 0'd code.\n\t(cp_finish_decl): Remove dead code.\n\t* init.c (build_vec_init): When determining whether or not the\n\telement type has an asignment operator, look through all array\n\tdimensions.\n\t* typeck.c (target_type): Remove.\n\n\tPR c++/20142\n\t* g++.dg/init/array18.C: New test.\n\nFrom-SVN: r96170", "tree": {"sha": "eae4d082b5125cdbc718dbc2af1ebb736c775972", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eae4d082b5125cdbc718dbc2af1ebb736c775972"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b5af313312d166f0d94ae408f28db90486236496", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5af313312d166f0d94ae408f28db90486236496", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5af313312d166f0d94ae408f28db90486236496", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5af313312d166f0d94ae408f28db90486236496/comments", "author": null, "committer": null, "parents": [{"sha": "e140d617c5f1d880dec74f5036d3a5c1b374311d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e140d617c5f1d880dec74f5036d3a5c1b374311d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e140d617c5f1d880dec74f5036d3a5c1b374311d"}], "stats": {"total": 84, "additions": 51, "deletions": 33}, "files": [{"sha": "a5dba31ddefca121b2afd9992bb2361b66fa9200", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5af313312d166f0d94ae408f28db90486236496/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5af313312d166f0d94ae408f28db90486236496/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b5af313312d166f0d94ae408f28db90486236496", "patch": "@@ -1,3 +1,14 @@\n+2005-03-08  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/20142\n+\t* cp-tree.h (target_type): Remove.\n+\t* decl.c (layout_var_decl): Remove #if 0'd code.\n+\t(cp_finish_decl): Remove dead code.\n+\t* init.c (build_vec_init): When determining whether or not the\n+\telement type has an asignment operator, look through all array\n+\tdimensions. \n+\t* typeck.c (target_type): Remove.\n+\n 2005-03-07  Mark Mitchell  <mark@codesourcery.com>\n \n \t* class.c (finish_struct_1): Do not warn about non-virtual"}, {"sha": "22d5f17a0cdcdb4212f2973f3ff630815a40b882", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5af313312d166f0d94ae408f28db90486236496/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5af313312d166f0d94ae408f28db90486236496/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=b5af313312d166f0d94ae408f28db90486236496", "patch": "@@ -4267,7 +4267,6 @@ extern tree fold_if_not_in_template             (tree);\n extern int string_conv_p\t\t\t(tree, tree, int);\n extern tree cp_truthvalue_conversion\t\t(tree);\n extern tree condition_conversion\t\t(tree);\n-extern tree target_type\t\t\t\t(tree);\n extern tree require_complete_type\t\t(tree);\n extern tree complete_type\t\t\t(tree);\n extern tree complete_type_or_else\t\t(tree, tree);"}, {"sha": "fbb264e96406fb15565afcaef7c68f344f6bd385", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5af313312d166f0d94ae408f28db90486236496/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5af313312d166f0d94ae408f28db90486236496/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=b5af313312d166f0d94ae408f28db90486236496", "patch": "@@ -3940,9 +3940,6 @@ static void\n layout_var_decl (tree decl)\n {\n   tree type = TREE_TYPE (decl);\n-#if 0\n-  tree ttype = target_type (type);\n-#endif\n \n   /* If we haven't already layed out this declaration, do so now.\n      Note that we must not call complete type for an external object\n@@ -4710,7 +4707,6 @@ void\n cp_finish_decl (tree decl, tree init, tree asmspec_tree, int flags)\n {\n   tree type;\n-  tree ttype = NULL_TREE;\n   tree cleanup;\n   const char *asmspec = NULL;\n   int was_readonly = 0;\n@@ -4795,10 +4791,6 @@ cp_finish_decl (tree decl, tree init, tree asmspec_tree, int flags)\n       goto finish_end;\n     }\n \n-  if (TREE_CODE (decl) != FUNCTION_DECL)\n-    ttype = target_type (type);\n-\n-\n   /* A reference will be modified here, as it is initialized.  */\n   if (! DECL_EXTERNAL (decl) \n       && TREE_READONLY (decl)"}, {"sha": "c526bb14511be9ca4a0db4b43a7f32d8c25172d8", "filename": "gcc/cp/init.c", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5af313312d166f0d94ae408f28db90486236496/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5af313312d166f0d94ae408f28db90486236496/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=b5af313312d166f0d94ae408f28db90486236496", "patch": "@@ -2388,6 +2388,9 @@ build_vec_init (tree base, tree maxindex, tree init, int from_array)\n   tree atype = TREE_TYPE (base);\n   /* The type of an element in the array.  */\n   tree type = TREE_TYPE (atype);\n+  /* The element type reached after removing all outer array \n+     types.  */\n+  tree inner_elt_type;\n   /* The type of a pointer to an element in the array.  */\n   tree ptype;\n   tree stmt_expr;\n@@ -2403,15 +2406,17 @@ build_vec_init (tree base, tree maxindex, tree init, int from_array)\n   if (maxindex == NULL_TREE || maxindex == error_mark_node)\n     return error_mark_node;\n \n+  inner_elt_type = strip_array_types (atype);\n   if (init\n       && (from_array == 2\n-\t  ? (!CLASS_TYPE_P (type) || !TYPE_HAS_COMPLEX_ASSIGN_REF (type))\n+\t  ? (!CLASS_TYPE_P (inner_elt_type) \n+\t     || !TYPE_HAS_COMPLEX_ASSIGN_REF (inner_elt_type))\n \t  : !TYPE_NEEDS_CONSTRUCTING (type))\n       && ((TREE_CODE (init) == CONSTRUCTOR\n \t   /* Don't do this if the CONSTRUCTOR might contain something\n \t      that might throw and require us to clean up.  */\n \t   && (CONSTRUCTOR_ELTS (init) == NULL_TREE\n-\t       || ! TYPE_HAS_NONTRIVIAL_DESTRUCTOR (target_type (type))))\n+\t       || ! TYPE_HAS_NONTRIVIAL_DESTRUCTOR (inner_elt_type)))\n \t  || from_array))\n     {\n       /* Do non-default initialization of POD arrays resulting from\n@@ -2602,14 +2607,12 @@ build_vec_init (tree base, tree maxindex, tree init, int from_array)\n       /* Flatten multi-dimensional array since build_vec_delete only\n \t expects one-dimensional array.  */\n       if (TREE_CODE (type) == ARRAY_TYPE)\n-\t{\n-\t  m = cp_build_binary_op (MULT_EXPR, m,\n-\t\t\t\t  array_type_nelts_total (type));\n-\t  type = strip_array_types (type);\n-\t}\n+\tm = cp_build_binary_op (MULT_EXPR, m,\n+\t\t\t\tarray_type_nelts_total (type));\n \n       finish_cleanup_try_block (try_block);\n-      e = build_vec_delete_1 (rval, m, type, sfk_base_destructor,\n+      e = build_vec_delete_1 (rval, m, \n+\t\t\t      inner_elt_type, sfk_base_destructor,\n \t\t\t      /*use_global_delete=*/0);\n       finish_cleanup (e, try_block);\n     }"}, {"sha": "e861a660393ff56dd8213cd678631242f9e6bc9e", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5af313312d166f0d94ae408f28db90486236496/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5af313312d166f0d94ae408f28db90486236496/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=b5af313312d166f0d94ae408f28db90486236496", "patch": "@@ -4644,6 +4644,9 @@ pushtag (tree name, tree type, int globalize)\n \t  else\n \t    d = pushdecl_with_scope (d, b);\n \n+\t  if (d == error_mark_node)\n+\t    POP_TIMEVAR_AND_RETURN (TV_NAME_LOOKUP, error_mark_node);\n+\n \t  /* FIXME what if it gets a name from typedef?  */\n \t  if (ANON_AGGRNAME_P (name))\n \t    DECL_IGNORED_P (d) = 1;"}, {"sha": "1639b54532ba3415c4dcb32899bd3fa318e0113c", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5af313312d166f0d94ae408f28db90486236496/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5af313312d166f0d94ae408f28db90486236496/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=b5af313312d166f0d94ae408f28db90486236496", "patch": "@@ -59,22 +59,6 @@ static void maybe_warn_about_returning_address_of_local (tree);\n static tree lookup_destructor (tree, tree, tree);\n static tree convert_arguments (tree, tree, tree, int);\n \n-/* Return the target type of TYPE, which means return T for:\n-   T*, T&, T[], T (...), and otherwise, just T.  */\n-\n-tree\n-target_type (tree type)\n-{\n-  type = non_reference (type);\n-  while (TREE_CODE (type) == POINTER_TYPE\n-\t || TREE_CODE (type) == ARRAY_TYPE\n-\t || TREE_CODE (type) == FUNCTION_TYPE\n-\t || TREE_CODE (type) == METHOD_TYPE\n-\t || TYPE_PTRMEM_P (type))\n-    type = TREE_TYPE (type);\n-  return type;\n-}\n-\n /* Do `exp = require_complete_type (exp);' to make sure exp\n    does not have an incomplete type.  (That includes void types.)\n    Returns the error_mark_node if the VALUE does not have"}, {"sha": "c7bdbe1f81e2c74cfc17fd8dcde93eb068e47547", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5af313312d166f0d94ae408f28db90486236496/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5af313312d166f0d94ae408f28db90486236496/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b5af313312d166f0d94ae408f28db90486236496", "patch": "@@ -1,3 +1,8 @@\n+2005-03-08  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/20142\n+\t* g++.dg/init/array18.C: New test.\n+\t\n 2005-03-09  Ben Elliston  <bje@au.ibm.com>\n \n \t* consistency.vlad/vlad.exp: Remove trailing semicolons."}, {"sha": "1cb5dba3841904560bb7e2f4c525521c7c002637", "filename": "gcc/testsuite/g++.dg/init/array18.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5af313312d166f0d94ae408f28db90486236496/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray18.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5af313312d166f0d94ae408f28db90486236496/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray18.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray18.C?ref=b5af313312d166f0d94ae408f28db90486236496", "patch": "@@ -0,0 +1,21 @@\n+// PR c++/20142\n+\n+int n=4;\n+\n+struct A\n+{\n+  A() {}\n+  A& operator= (const A&) { --n; return *this; }\n+};\n+\n+struct B\n+{\n+  A x[2][2];\n+};\n+\n+int main()\n+{\n+  B b;\n+  b = b;\n+  return n;\n+}"}]}