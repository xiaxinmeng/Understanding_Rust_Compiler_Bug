{"sha": "0dbb19f0f1542f9e61e599cbd25111f5de811929", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGRiYjE5ZjBmMTU0MmY5ZTYxZTU5OWNiZDI1MTExZjVkZTgxMTkyOQ==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.vnet.ibm.com", "date": "2016-10-28T12:28:24Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2016-10-28T12:28:24Z"}, "message": "S/390: Add support for arch<n> arch/tune options.\n\nThis patch adds an alternate CPU level naming following the\narchitecture level number in the Principles of Operations manual.  So\ninstead of having z196, zEC12, and z13 you can use arch9, arch10, and\narch11.  The old cpu names stay valid and should preferably be used.\n\nThe alternate names are supposed to improve compatibility with the IBM\nXL compiler toolchain which uses the arch numbering.\n\ngcc/testsuite/ChangeLog:\n\n2016-10-28  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n\n\t* gcc.target/s390/target-attribute/tattr-m64-33.c: New test.\n\ngcc/ChangeLog:\n\n2016-10-28  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n\n\t* config/s390/s390.opt: Support alternate cpu level naming (archXX).\n\t* config.gcc: Support alternate archXX cpu levels with\n\t--with-arch= and --with-tune=.\n\t* config/s390/linux.h: Translate new archXX cpu levels to the\n\toriginal names when calling GAS.\n\t* config/s390/tpf.h: Likewise.\n\t* doc/invoke.texi: Document the alternate cpu level names.\n\nFrom-SVN: r241643", "tree": {"sha": "551345af88b6872e485122f7e6ea28bca874c90d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/551345af88b6872e485122f7e6ea28bca874c90d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0dbb19f0f1542f9e61e599cbd25111f5de811929", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dbb19f0f1542f9e61e599cbd25111f5de811929", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0dbb19f0f1542f9e61e599cbd25111f5de811929", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dbb19f0f1542f9e61e599cbd25111f5de811929/comments", "author": null, "committer": null, "parents": [{"sha": "c19066a7694429e1d322295800e79dbbdf1c8320", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c19066a7694429e1d322295800e79dbbdf1c8320", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c19066a7694429e1d322295800e79dbbdf1c8320"}], "stats": {"total": 440, "additions": 430, "deletions": 10}, "files": [{"sha": "d1c714a8ea331b672f28b2b6a33085370db3f61c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dbb19f0f1542f9e61e599cbd25111f5de811929/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dbb19f0f1542f9e61e599cbd25111f5de811929/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0dbb19f0f1542f9e61e599cbd25111f5de811929", "patch": "@@ -1,3 +1,13 @@\n+2016-10-28  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n+\n+\t* config/s390/s390.opt: Support alternate cpu level naming (archXX).\n+\t* config.gcc: Support alternate archXX cpu levels with\n+\t--with-arch= and --with-tune=.\n+\t* config/s390/linux.h: Translate new archXX cpu levels to the\n+\toriginal names when calling GAS.\n+\t* config/s390/tpf.h: Likewise.\n+\t* doc/invoke.texi: Document the alternate cpu level names.\n+\n 2016-10-28  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/77919"}, {"sha": "f9148dd95cee83748d43d54b7bb8417e42a55afa", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dbb19f0f1542f9e61e599cbd25111f5de811929/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dbb19f0f1542f9e61e599cbd25111f5de811929/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=0dbb19f0f1542f9e61e599cbd25111f5de811929", "patch": "@@ -4172,7 +4172,7 @@ case \"${target}\" in\n \t\tfor which in arch tune; do\n \t\t\teval \"val=\\$with_$which\"\n \t\t\tcase ${val} in\n-\t\t\t\"\" | native | g5 | g6 | z900 | z990 | z9-109 | z9-ec | z10 | z196 | zEC12 | z13)\n+\t\t\t\"\" | native | g5 | g6 | z900 | z990 | z9-109 | z9-ec | z10 | z196 | zEC12 | z13 | arch3 | arch5 | arch6 | arch7 | arch8 | arch9 | arch10 | arch11)\n \t\t\t\t# OK\n \t\t\t\t;;\n \t\t\t*)"}, {"sha": "541006d864d8d11f5678062539f58bc3c2e98ec5", "filename": "gcc/config/s390/linux.h", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dbb19f0f1542f9e61e599cbd25111f5de811929/gcc%2Fconfig%2Fs390%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dbb19f0f1542f9e61e599cbd25111f5de811929/gcc%2Fconfig%2Fs390%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Flinux.h?ref=0dbb19f0f1542f9e61e599cbd25111f5de811929", "patch": "@@ -47,9 +47,19 @@ along with GCC; see the file COPYING3.  If not see\n \n \n /* Target specific assembler settings.  */\n-\n+/* Rewrite -march=arch* options to the original CPU name in order to\n+   make it work with older binutils.  */\n #undef  ASM_SPEC\n-#define ASM_SPEC \"%{m31&m64}%{mesa&mzarch}%{march=*}\"\n+#define ASM_SPEC\t\t\t\t\t\\\n+  \"%{m31&m64}%{mesa&mzarch}%{march=z*}\"\t\t\t\\\n+  \"%{march=arch3:-march=g5}\"\t\t\t\t\\\n+  \"%{march=arch5:-march=z900}\"\t\t\t\t\\\n+  \"%{march=arch6:-march=z990}\"\t\t\t\t\\\n+  \"%{march=arch7:-march=z9-ec}\"\t\t\t\t\\\n+  \"%{march=arch8:-march=z10}\"\t\t\t\t\\\n+  \"%{march=arch9:-march=z196}\"\t\t\t\t\\\n+  \"%{march=arch10:-march=zEC12}\"\t\t\t\\\n+  \"%{march=arch11:-march=z13}\"\n \n \n /* Target specific linker settings.  */"}, {"sha": "569ed957887f2668477d6434ba0e5ae6883ebd5a", "filename": "gcc/config/s390/s390.opt", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dbb19f0f1542f9e61e599cbd25111f5de811929/gcc%2Fconfig%2Fs390%2Fs390.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dbb19f0f1542f9e61e599cbd25111f5de811929/gcc%2Fconfig%2Fs390%2Fs390.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.opt?ref=0dbb19f0f1542f9e61e599cbd25111f5de811929", "patch": "@@ -61,33 +61,57 @@ Name(processor_type) Type(enum processor_type)\n EnumValue\n Enum(processor_type) String(g5) Value(PROCESSOR_9672_G5)\n \n+EnumValue\n+Enum(processor_type) String(arch3) Value(PROCESSOR_9672_G5)\n+\n EnumValue\n Enum(processor_type) String(g6) Value(PROCESSOR_9672_G6)\n \n EnumValue\n Enum(processor_type) String(z900) Value(PROCESSOR_2064_Z900)\n \n+EnumValue\n+Enum(processor_type) String(arch5) Value(PROCESSOR_2064_Z900)\n+\n EnumValue\n Enum(processor_type) String(z990) Value(PROCESSOR_2084_Z990)\n \n+EnumValue\n+Enum(processor_type) String(arch6) Value(PROCESSOR_2084_Z990)\n+\n EnumValue\n Enum(processor_type) String(z9-109) Value(PROCESSOR_2094_Z9_109)\n \n EnumValue\n Enum(processor_type) String(z9-ec) Value(PROCESSOR_2094_Z9_EC)\n \n+EnumValue\n+Enum(processor_type) String(arch7) Value(PROCESSOR_2094_Z9_EC)\n+\n EnumValue\n Enum(processor_type) String(z10) Value(PROCESSOR_2097_Z10)\n \n+EnumValue\n+Enum(processor_type) String(arch8) Value(PROCESSOR_2097_Z10)\n+\n EnumValue\n Enum(processor_type) String(z196) Value(PROCESSOR_2817_Z196)\n \n+EnumValue\n+Enum(processor_type) String(arch9) Value(PROCESSOR_2817_Z196)\n+\n EnumValue\n Enum(processor_type) String(zEC12) Value(PROCESSOR_2827_ZEC12)\n \n+EnumValue\n+Enum(processor_type) String(arch10) Value(PROCESSOR_2827_ZEC12)\n+\n EnumValue\n Enum(processor_type) String(z13) Value(PROCESSOR_2964_Z13)\n \n+EnumValue\n+Enum(processor_type) String(arch11) Value(PROCESSOR_2964_Z13)\n+\n EnumValue\n Enum(processor_type) String(native) Value(PROCESSOR_NATIVE) DriverOnly\n "}, {"sha": "a5423a64b2bafcf3590f2fe24a7168b60853551a", "filename": "gcc/config/s390/tpf.h", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dbb19f0f1542f9e61e599cbd25111f5de811929/gcc%2Fconfig%2Fs390%2Ftpf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dbb19f0f1542f9e61e599cbd25111f5de811929/gcc%2Fconfig%2Fs390%2Ftpf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Ftpf.h?ref=0dbb19f0f1542f9e61e599cbd25111f5de811929", "patch": "@@ -90,9 +90,20 @@ along with GCC; see the file COPYING3.  If not see\n #undef CPLUSPLUS_CPP_SPEC\n #define CPLUSPLUS_CPP_SPEC \"-D_GNU_SOURCE %(cpp)\"\n \n-#undef ASM_SPEC\n-#define ASM_SPEC \"%{m31&m64}%{mesa&mzarch}%{march=*} \\\n-                  -alshd=%b.lst\"\n+/* Rewrite -march=arch* options to the original CPU name in order to\n+   make it work with older binutils.  */\n+#undef  ASM_SPEC\n+#define ASM_SPEC\t\t\t\t\t\\\n+  \"%{m31&m64}%{mesa&mzarch}%{march=z*}\"\t\t\t\\\n+  \"%{march=arch3:-march=g5}\"\t\t\t\t\\\n+  \"%{march=arch5:-march=z900}\"\t\t\t\t\\\n+  \"%{march=arch6:-march=z990}\"\t\t\t\t\\\n+  \"%{march=arch7:-march=z9-ec}\"\t\t\t\t\\\n+  \"%{march=arch8:-march=z10}\"\t\t\t\t\\\n+  \"%{march=arch9:-march=z196}\"\t\t\t\t\\\n+  \"%{march=arch10:-march=zEC12}\"\t\t\t\\\n+  \"%{march=arch11:-march=z13}\"\t\t\t\t\\\n+  \" -alshd=%b.lst\"\n \n #undef LIB_SPEC\n #define LIB_SPEC \"-lCTIS -lCISO -lCLBM -lCTAL -lCFVS -lCTBX -lCTXO \\"}, {"sha": "4d0124f4b7b365b18ebd066394def5d33a685b4a", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dbb19f0f1542f9e61e599cbd25111f5de811929/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dbb19f0f1542f9e61e599cbd25111f5de811929/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=0dbb19f0f1542f9e61e599cbd25111f5de811929", "patch": "@@ -22221,10 +22221,18 @@ The default is to not print debug information.\n @opindex march\n Generate code that runs on @var{cpu-type}, which is the name of a\n system representing a certain processor type.  Possible values for\n-@var{cpu-type} are @samp{z900}, @samp{z990}, @samp{z9-109},\n-@samp{z9-ec}, @samp{z10}, @samp{z196}, @samp{zEC12}, and @samp{z13}.\n-The default is @option{-march=z900}.  @samp{g5} and @samp{g6} are\n-deprecated and will be removed with future releases.\n+@var{cpu-type} are @samp{z900}/@samp{arch5}, @samp{z990}/@samp{arch6},\n+@samp{z9-109}, @samp{z9-ec}/@samp{arch7}, @samp{z10}/@samp{arch8},\n+@samp{z196}/@samp{arch9}, @samp{zEC12}, @samp{z13}/@samp{arch11}, and\n+@samp{native}.\n+\n+The default is @option{-march=z900}.  @samp{g5}/@samp{arch3} and\n+@samp{g6} are deprecated and will be removed with future releases.\n+\n+Specifying @samp{native} as cpu type can be used to select the best\n+architecture option for the host processor.\n+@option{-march=native} has no effect if GCC does not recognize the\n+processor.\n \n @item -mtune=@var{cpu-type}\n @opindex mtune"}, {"sha": "960d20ee060520877b312313956b15d5d3d62ccd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dbb19f0f1542f9e61e599cbd25111f5de811929/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dbb19f0f1542f9e61e599cbd25111f5de811929/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0dbb19f0f1542f9e61e599cbd25111f5de811929", "patch": "@@ -1,3 +1,7 @@\n+2016-10-28  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n+\n+\t* gcc.target/s390/target-attribute/tattr-m64-33.c: New test.\n+\n 2016-10-28  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/77919"}, {"sha": "5476ad3eccefaf6a4ed4a407313dc82003a64fc5", "filename": "gcc/testsuite/gcc.target/s390/target-attribute/tattr-m64-33.c", "status": "added", "additions": 353, "deletions": 0, "changes": 353, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dbb19f0f1542f9e61e599cbd25111f5de811929/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Ftarget-attribute%2Ftattr-m64-33.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dbb19f0f1542f9e61e599cbd25111f5de811929/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Ftarget-attribute%2Ftattr-m64-33.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Ftarget-attribute%2Ftattr-m64-33.c?ref=0dbb19f0f1542f9e61e599cbd25111f5de811929", "patch": "@@ -0,0 +1,353 @@\n+/* Functional tests for the \"target\" attribute and pragma.  */\n+\n+/* { dg-do assemble { target { lp64 } } } */\n+/* { dg-require-effective-target target_attribute } */\n+/* { dg-options \"-save-temps -mdebug -m64 -march=arch11 -mtune=arch8 -mstack-size=4096 -mstack-guard=0 -mbranch-cost=2 -mwarn-framesize=0 -mhard-dfp -mno-backchain -mhard-float -mno-vx -mhtm -mpacked-stack -mno-small-exec -mzvector -mno-mvcle -mzarch -mwarn-dynamicstack\" } */\n+\n+/**\n+ **\n+ ** Start\n+ **\n+ **/\n+\n+void fn_default_start (void) { }\n+/* { dg-final { scan-assembler \"fn:fn_default_start ar9\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_default_start tu6\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_default_start ss4096\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_default_start sg0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_default_start bc2\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_default_start wf0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_default_start hd1\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_default_start ba0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_default_start hf1\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_default_start vx0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_default_start ht1\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_default_start ps1\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_default_start se0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_default_start zv1\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_default_start mv0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_default_start wd1\" } } */\n+\n+/**\n+ **\n+ ** Attribute\n+ **\n+ **/\n+\n+__attribute__ ((target (\"arch=arch11\")))\n+void fn_att_1 (void) { }\n+/* { dg-final { scan-assembler \"fn:fn_att_1 ar9\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_att_1 tu6\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_att_1 ss4096\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_att_1 sg0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_att_1 bc2\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_att_1 wf0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_att_1 hd1\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_att_1 ba0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_att_1 hf1\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_att_1 vx0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_att_1 ht1\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_att_1 ps1\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_att_1 se0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_att_1 zv1\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_att_1 mv0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_att_1 wd1\" } } */\n+\n+void fn_att_1_default (void) { }\n+\n+__attribute__ ((target (\"arch=arch8\")))\n+void fn_att_0 (void) { }\n+/* { dg-final { scan-assembler \"fn:fn_att_0 ar6\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_att_0 tu6\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_att_0 ss4096\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_att_0 sg0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_att_0 bc2\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_att_0 wf0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_att_0 hd1\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_att_0 ba0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_att_0 hf1\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_att_0 vx0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_att_0 ht1\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_att_0 ps1\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_att_0 se0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_att_0 zv1\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_att_0 mv0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_att_0 wd1\" } } */\n+\n+void fn_att_0_default (void) { }\n+\n+__attribute__ ((target (\"arch=arch8,arch=arch11\")))\n+void fn_att_0_1 (void) { }\n+/* { dg-final { scan-assembler \"fn:fn_att_0_1 ar9\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_att_0_1 tu6\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_att_0_1 ss4096\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_att_0_1 sg0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_att_0_1 bc2\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_att_0_1 wf0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_att_0_1 hd1\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_att_0_1 ba0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_att_0_1 hf1\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_att_0_1 vx0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_att_0_1 ht1\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_att_0_1 ps1\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_att_0_1 se0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_att_0_1 zv1\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_att_0_1 mv0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_att_0_1 wd1\" } } */\n+\n+__attribute__ ((target (\"arch=arch11,arch=arch8\")))\n+void fn_att_1_0 (void) { }\n+/* { dg-final { scan-assembler \"fn:fn_att_1_0 ar6\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_att_1_0 tu6\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_att_1_0 ss4096\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_att_1_0 sg0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_att_1_0 bc2\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_att_1_0 wf0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_att_1_0 hd1\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_att_1_0 ba0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_att_1_0 hf1\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_att_1_0 vx0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_att_1_0 ht1\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_att_1_0 ps1\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_att_1_0 se0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_att_1_0 zv1\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_att_1_0 mv0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_att_1_0 wd1\" } } */\n+\n+/**\n+ **\n+ ** Pragma\n+ **\n+ **/\n+\n+#pragma GCC target (\"arch=arch11\")\n+void fn_pragma_1 (void) { }\n+/* { dg-final { scan-assembler \"fn:fn_pragma_1 ar9\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_1 tu6\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_1 ss4096\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_1 sg0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_1 bc2\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_1 wf0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_1 hd1\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_1 ba0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_1 hf1\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_1 vx0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_1 ht1\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_1 ps1\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_1 se0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_1 zv1\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_1 mv0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_1 wd1\" } } */\n+#pragma GCC reset_options\n+\n+void fn_pragma_1_default (void) { }\n+/* { dg-final { scan-assembler \"fn:fn_pragma_1_default ar9\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_1_default tu6\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_1_default ss4096\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_1_default sg0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_1_default bc2\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_1_default wf0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_1_default hd1\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_1_default ba0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_1_default hf1\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_1_default vx0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_1_default ht1\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_1_default ps1\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_1_default se0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_1_default zv1\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_1_default mv0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_1_default wd1\" } } */\n+\n+#pragma GCC target (\"arch=arch8\")\n+void fn_pragma_0 (void) { }\n+/* { dg-final { scan-assembler \"fn:fn_pragma_0 ar6\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_0 tu6\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_0 ss4096\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_0 sg0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_0 bc2\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_0 wf0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_0 hd1\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_0 ba0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_0 hf1\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_0 vx0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_0 ht1\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_0 ps1\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_0 se0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_0 zv1\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_0 mv0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_0 wd1\" } } */\n+#pragma GCC reset_options\n+\n+void fn_pragma_0_default (void) { }\n+/* { dg-final { scan-assembler \"fn:fn_pragma_0_default ar9\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_0_default tu6\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_0_default ss4096\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_0_default sg0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_0_default bc2\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_0_default wf0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_0_default hd1\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_0_default ba0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_0_default hf1\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_0_default vx0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_0_default ht1\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_0_default ps1\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_0_default se0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_0_default zv1\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_0_default mv0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_0_default wd1\" } } */\n+\n+#pragma GCC target (\"arch=arch8\")\n+#pragma GCC target (\"arch=arch11\")\n+void fn_pragma_0_1 (void) { }\n+/* { dg-final { scan-assembler \"fn:fn_pragma_0_1 ar9\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_0_1 tu6\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_0_1 ss4096\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_0_1 sg0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_0_1 bc2\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_0_1 wf0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_0_1 hd1\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_0_1 ba0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_0_1 hf1\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_0_1 vx0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_0_1 ht1\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_0_1 ps1\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_0_1 se0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_0_1 zv1\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_0_1 mv0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_0_1 wd1\" } } */\n+#pragma GCC reset_options\n+\n+#pragma GCC target (\"arch=arch11\")\n+#pragma GCC target (\"arch=arch8\")\n+void fn_pragma_1_0 (void) { }\n+/* { dg-final { scan-assembler \"fn:fn_pragma_1_0 ar6\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_1_0 tu6\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_1_0 ss4096\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_1_0 sg0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_1_0 bc2\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_1_0 wf0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_1_0 hd1\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_1_0 ba0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_1_0 hf1\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_1_0 vx0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_1_0 ht1\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_1_0 ps1\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_1_0 se0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_1_0 zv1\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_1_0 mv0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_1_0 wd1\" } } */\n+#pragma GCC reset_options\n+\n+/**\n+ **\n+ ** Pragma and attribute\n+ **\n+ **/\n+\n+#pragma GCC target (\"arch=arch11\")\n+__attribute__ ((target (\"arch=arch11\")))\n+void fn_pragma_1_att_1 (void) { }\n+/* { dg-final { scan-assembler \"fn:fn_pragma_1_att_1 ar9\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_1_att_1 tu6\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_1_att_1 ss4096\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_1_att_1 sg0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_1_att_1 bc2\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_1_att_1 wf0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_1_att_1 hd1\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_1_att_1 ba0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_1_att_1 hf1\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_1_att_1 vx0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_1_att_1 ht1\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_1_att_1 ps1\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_1_att_1 se0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_1_att_1 zv1\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_1_att_1 mv0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_1_att_1 wd1\" } } */\n+#pragma GCC reset_options\n+\n+#pragma GCC target (\"arch=arch11\")\n+__attribute__ ((target (\"arch=arch11\")))\n+void fn_pragma_0_att_1 (void) { }\n+/* { dg-final { scan-assembler \"fn:fn_pragma_0_att_1 ar9\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_0_att_1 tu6\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_0_att_1 ss4096\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_0_att_1 sg0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_0_att_1 bc2\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_0_att_1 wf0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_0_att_1 hd1\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_0_att_1 ba0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_0_att_1 hf1\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_0_att_1 vx0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_0_att_1 ht1\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_0_att_1 ps1\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_0_att_1 se0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_0_att_1 zv1\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_0_att_1 mv0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_0_att_1 wd1\" } } */\n+#pragma GCC reset_options\n+\n+#pragma GCC target (\"arch=arch11\")\n+__attribute__ ((target (\"arch=arch8\")))\n+void fn_pragma_1_att_0 (void) { }\n+/* { dg-final { scan-assembler \"fn:fn_pragma_1_att_0 ar6\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_1_att_0 tu6\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_1_att_0 ss4096\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_1_att_0 sg0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_1_att_0 bc2\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_1_att_0 wf0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_1_att_0 hd1\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_1_att_0 ba0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_1_att_0 hf1\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_1_att_0 vx0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_1_att_0 ht1\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_1_att_0 ps1\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_1_att_0 se0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_1_att_0 zv1\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_1_att_0 mv0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_1_att_0 wd1\" } } */\n+#pragma GCC reset_options\n+\n+#pragma GCC target (\"arch=arch11\")\n+__attribute__ ((target (\"arch=arch8\")))\n+void fn_pragma_0_att_0 (void) { }\n+/* { dg-final { scan-assembler \"fn:fn_pragma_0_att_0 ar6\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_0_att_0 tu6\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_0_att_0 ss4096\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_0_att_0 sg0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_0_att_0 bc2\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_0_att_0 wf0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_0_att_0 hd1\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_0_att_0 ba0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_0_att_0 hf1\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_0_att_0 vx0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_0_att_0 ht1\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_0_att_0 ps1\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_0_att_0 se0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_0_att_0 zv1\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_0_att_0 mv0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_pragma_0_att_0 wd1\" } } */\n+#pragma GCC reset_options\n+\n+/**\n+ **\n+ ** End\n+ **\n+ **/\n+\n+void fn_default_end (void) { }\n+/* { dg-final { scan-assembler \"fn:fn_default_end ar9\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_default_end tu6\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_default_end ss4096\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_default_end sg0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_default_end bc2\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_default_end wf0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_default_end hd1\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_default_end ba0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_default_end hf1\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_default_end vx0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_default_end ht1\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_default_end ps1\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_default_end se0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_default_end zv1\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_default_end mv0\" } } */\n+/* { dg-final { scan-assembler \"fn:fn_default_end wd1\" } } */"}]}