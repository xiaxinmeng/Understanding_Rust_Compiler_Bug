{"sha": "05a0d5eabb68d036b5717738d601abac96a46c96", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDVhMGQ1ZWFiYjY4ZDAzNmI1NzE3NzM4ZDYwMWFiYWM5NmE0NmM5Ng==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-07-05T21:55:06Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-07-05T21:55:06Z"}, "message": "(fold, case EQ_EXPR, LE_EXPR): If comparing results of signed MOD with\nzero, use an unsigned MOD.\n\nFrom-SVN: r4852", "tree": {"sha": "1aa578f5f8f27c53c867e8d77a854a7f50cda9dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1aa578f5f8f27c53c867e8d77a854a7f50cda9dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/05a0d5eabb68d036b5717738d601abac96a46c96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05a0d5eabb68d036b5717738d601abac96a46c96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05a0d5eabb68d036b5717738d601abac96a46c96", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05a0d5eabb68d036b5717738d601abac96a46c96/comments", "author": null, "committer": null, "parents": [{"sha": "40083ddf51610448fcdbb96591065678675ecbce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40083ddf51610448fcdbb96591065678675ecbce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40083ddf51610448fcdbb96591065678675ecbce"}], "stats": {"total": 19, "additions": 19, "deletions": 0}, "files": [{"sha": "d03ae53bc2844d3ca1a64cd0e2749c681c488d3a", "filename": "gcc/fold-const.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05a0d5eabb68d036b5717738d601abac96a46c96/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05a0d5eabb68d036b5717738d601abac96a46c96/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=05a0d5eabb68d036b5717738d601abac96a46c96", "patch": "@@ -4163,6 +4163,25 @@ fold (expr)\n \t\t\t   arg1));\n \t}\n \n+      /* If this is an NE or EQ comparison of zero against the result of a\n+\t signed MOD operation, make the MOD operation unsigned since it\n+\t is simpler and equivalent.  */\n+      if ((code == NE_EXPR || code == EQ_EXPR)\n+\t  && integer_zerop (arg1)\n+\t  && ! TREE_UNSIGNED (TREE_TYPE (arg0))\n+\t  && (TREE_CODE (arg0) == TRUNC_MOD_EXPR\n+\t      || TREE_CODE (arg0) == CEIL_MOD_EXPR\n+\t      || TREE_CODE (arg0) == FLOOR_MOD_EXPR\n+\t      || TREE_CODE (arg0) == ROUND_MOD_EXPR))\n+\t{\n+\t  tree newtype = unsigned_type (TREE_TYPE (arg0));\n+\t  tree newmod = build (TREE_CODE (arg0), newtype,\n+\t\t\t       convert (newtype, TREE_OPERAND (arg0, 0)),\n+\t\t\t       convert (newtype, TREE_OPERAND (arg0, 1)));\n+\n+\t  return build (code, type, newmod, convert (newtype, arg1));\n+\t}\n+\n       /* If this is an NE comparison of zero with an AND of one, remove the\n \t comparison since the AND will give the correct value.  */\n       if (code == NE_EXPR && integer_zerop (arg1)"}]}