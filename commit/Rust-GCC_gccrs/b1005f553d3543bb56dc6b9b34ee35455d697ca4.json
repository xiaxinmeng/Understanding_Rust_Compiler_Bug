{"sha": "b1005f553d3543bb56dc6b9b34ee35455d697ca4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjEwMDVmNTUzZDM1NDNiYjU2ZGM2YjliMzRlZTM1NDU1ZDY5N2NhNA==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-06-23T22:07:34Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-06-29T14:59:40Z"}, "message": "c++: Fix CTAD for aggregates in template [PR95568]\n\n95568 complains that CTAD for aggregates doesn't work within\nrequires-clause and it turned out that it doesn't work when we try\nthe deduction in a template.  The reason is that maybe_aggr_guide\ncreates a guide that can look like this\n\n  template<class T> X(decltype (X<T>::x))-> X<T>\n\nwhere the parameter is a decltype, which is a non-deduced context.  So\nthe subsequent build_new_function_call fails because unify_one_argument\ncan't deduce anything from it ([temp.deduct.type]: \"If a template\nparameter is used only in non-deduced contexts and is not explicitly\nspecified, template argument deduction fails.\")\n\nThose decltypes come from finish_decltype_type.  We can just use\nTREE_TYPE instead.  I pondered using unlowered_expr_type, but that\ndidn't make any difference for the FIELD_DECLs I saw in\nclass-deduction-aggr6.C.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/95568\n\t* pt.c (collect_ctor_idx_types): Use TREE_TYPE.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/95568\n\t* g++.dg/cpp2a/class-deduction-aggr5.C: New test.\n\t* g++.dg/cpp2a/class-deduction-aggr6.C: New test.", "tree": {"sha": "ddc4fa81ca1981181cb8c136953fe8abd262e86d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ddc4fa81ca1981181cb8c136953fe8abd262e86d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b1005f553d3543bb56dc6b9b34ee35455d697ca4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1005f553d3543bb56dc6b9b34ee35455d697ca4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1005f553d3543bb56dc6b9b34ee35455d697ca4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1005f553d3543bb56dc6b9b34ee35455d697ca4/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6cc67f6616c96f3e18a434e0c74ba2f3818cb6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6cc67f6616c96f3e18a434e0c74ba2f3818cb6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6cc67f6616c96f3e18a434e0c74ba2f3818cb6d"}], "stats": {"total": 57, "additions": 56, "deletions": 1}, "files": [{"sha": "618bf68b2d6e23ba292777b5bf54f5198eba5f78", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1005f553d3543bb56dc6b9b34ee35455d697ca4/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1005f553d3543bb56dc6b9b34ee35455d697ca4/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=b1005f553d3543bb56dc6b9b34ee35455d697ca4", "patch": "@@ -28329,7 +28329,7 @@ collect_ctor_idx_types (tree ctor, tree list, tree elt = NULL_TREE)\n   tree idx, val; unsigned i;\n   FOR_EACH_CONSTRUCTOR_ELT (v, i, idx, val)\n     {\n-      tree ftype = elt ? elt : finish_decltype_type (idx, true, tf_none);\n+      tree ftype = elt ? elt : TREE_TYPE (idx);\n       if (BRACE_ENCLOSED_INITIALIZER_P (val)\n \t  && CONSTRUCTOR_NELTS (val)\n \t  /* As in reshape_init_r, a non-aggregate or array-of-dependent-bound"}, {"sha": "01253f420066374ed0319a6a14fb67bb72bf0c98", "filename": "gcc/testsuite/g++.dg/cpp2a/class-deduction-aggr5.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1005f553d3543bb56dc6b9b34ee35455d697ca4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fclass-deduction-aggr5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1005f553d3543bb56dc6b9b34ee35455d697ca4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fclass-deduction-aggr5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fclass-deduction-aggr5.C?ref=b1005f553d3543bb56dc6b9b34ee35455d697ca4", "patch": "@@ -0,0 +1,20 @@\n+// PR c++/95568\n+// { dg-do compile { target c++20 } }\n+\n+template<typename T> struct X { T x; };\n+template<typename T, typename U> struct X2 { T x; U y; };\n+template<typename T> concept Y = requires { X{0}; };\n+\n+template<typename T>\n+void g()\n+{\n+  X{0};\n+  X2{1, 2.2};\n+  Y auto y = X{1};\n+}\n+\n+void\n+fn ()\n+{\n+  g<int>();\n+}"}, {"sha": "95d7c5eec1858876b6b2330e5c83fbd0073a0105", "filename": "gcc/testsuite/g++.dg/cpp2a/class-deduction-aggr6.C", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1005f553d3543bb56dc6b9b34ee35455d697ca4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fclass-deduction-aggr6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1005f553d3543bb56dc6b9b34ee35455d697ca4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fclass-deduction-aggr6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fclass-deduction-aggr6.C?ref=b1005f553d3543bb56dc6b9b34ee35455d697ca4", "patch": "@@ -0,0 +1,35 @@\n+// PR c++/95568\n+// { dg-do compile { target c++20 } }\n+// CTAD with aggregates containing bit-fields.\n+\n+template<class, class> struct same_type;\n+template<class T> struct same_type<T, T> {};\n+\n+enum E { e };\n+enum class F { f };\n+\n+template<typename T>\n+struct X {\n+  T a : 5;\n+};\n+\n+template<typename>\n+void g()\n+{\n+  auto x = X{ 0 };\n+  same_type<decltype(x.a), int>();\n+  auto x2 = X{ E::e };\n+  same_type<decltype(x2.a), E>();\n+  auto x3 = X{ false };\n+  same_type<decltype(x3.a), bool>();\n+  auto x4 = X{ 0u };\n+  same_type<decltype(x4.a), unsigned int>();\n+  auto x5 = X{ F::f };\n+  same_type<decltype(x5.a), F>();\n+}\n+\n+void\n+fn ()\n+{\n+  g<int>();\n+}"}]}