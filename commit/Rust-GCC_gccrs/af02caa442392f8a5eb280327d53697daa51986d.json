{"sha": "af02caa442392f8a5eb280327d53697daa51986d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWYwMmNhYTQ0MjM5MmY4YTVlYjI4MDMyN2Q1MzY5N2RhYTUxOTg2ZA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-01-25T19:42:01Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-01-25T19:42:01Z"}, "message": "(dsp16xx_reg_class_from_letter): Change error message text.\n\n(limit_reload_class, double_reg_to_memory): Likewise.\n(print_operand_address, emit_1600_core_shift): Likewise.\n(gen_tst_reg, gen_compare_reg): Likewise.\n\nFrom-SVN: r8812", "tree": {"sha": "f8e69e7c60dc78694d9bcf5225a784208c74b7fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8e69e7c60dc78694d9bcf5225a784208c74b7fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af02caa442392f8a5eb280327d53697daa51986d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af02caa442392f8a5eb280327d53697daa51986d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af02caa442392f8a5eb280327d53697daa51986d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af02caa442392f8a5eb280327d53697daa51986d/comments", "author": null, "committer": null, "parents": [{"sha": "3826a3da7f2008ec9e0c269bc43f43f09890fab0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3826a3da7f2008ec9e0c269bc43f43f09890fab0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3826a3da7f2008ec9e0c269bc43f43f09890fab0"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "1379d7045c583cfdd7fabcff3e1d478879b04ef3", "filename": "gcc/config/dsp16xx/dsp16xx.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af02caa442392f8a5eb280327d53697daa51986d/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af02caa442392f8a5eb280327d53697daa51986d/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.c?ref=af02caa442392f8a5eb280327d53697daa51986d", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines for assembler code output on the DSP1610.\n-   Copyright (C) 1994 Free Software Foundation, Inc.\n+   Copyright (C) 1994, 1995 Free Software Foundation, Inc.\n    Contributed by Michael Collison (collison@world.std.com).\n \n This file is part of GNU CC.\n@@ -260,7 +260,7 @@ int c;\n       return SLOW_MEM_LOAD_REGS;\n \n     default:\n-      fatal (\"Illegal register class letter %c\", c);\n+      fatal (\"Invalid register class letter %c\", c);\n       return NO_REGS;\n     }\n }\n@@ -396,7 +396,7 @@ enum reg_class class;\n       return class;\n \n     case YL_REG:\n-      /* Register 'yl' is illegal for QImode, so we should never\n+      /* Register 'yl' is invalid for QImode, so we should never\n \t see it. */\n \n       fatal (\"YL found in limit_reload_class\");\n@@ -1472,7 +1472,7 @@ rtx operands[];\n       else if (GET_CODE (XEXP(addr,1)) == CONST_INT)\n \toffset = INTVAL(XEXP(addr,1)) + 1;\n       else\n-\tfatal (\"Illegal addressing mode\");\n+\tfatal (\"Invalid addressing mode\");\n \n       fprintf (asm_out_file, \"\\t*(%d)=%s\\n\", offset + 31, reg_names[REGNO(operands[1]) + 1]);\n     }\n@@ -1674,10 +1674,10 @@ rtx addr;\n \t  if (offset >= -31 && offset <= 0)\n \t    offset = 31 + offset;\n \t  else\n-\t    fatal (\"Illegal offset in ybase addressing\");\n+\t    fatal (\"Invalid offset in ybase addressing\");\n \t}\n       else\n-\tfatal (\"Illegal register in ybase addresing\");\n+\tfatal (\"Invalid register in ybase addresing\");\n       \n       fprintf (file, \"*(%d)\", offset);\n       break;\n@@ -1849,7 +1849,7 @@ int shift_amount;\n       shift_asm_ptr_first = lshift_right_asm_first;\n     }\n   else\n-    fatal (\"Illegal shift operator in emit_1600_core_shift\");\n+    fatal (\"Invalid shift operator in emit_1600_core_shift\");\n \n   while (shift_amount != 0)\n     {\n@@ -2128,7 +2128,7 @@ gen_tst_reg (x)\n   else if (mode == HImode)\n     emit_insn (gen_rtx (SET, VOIDmode, cc0_rtx, x));\n   else\n-    fatal (\"Illegal mode for gen_tst_reg\");\n+    fatal (\"Invalid mode for gen_tst_reg\");\n \n   return cc0_rtx;\n }\n@@ -2199,7 +2199,7 @@ gen_compare_reg (code, x, y)\n \t\t\t\t     force_reg(HImode,y))));\n     }\n   else\n-    fatal (\"Illegal mode for integer comparison in gen_compare_reg\");\n+    fatal (\"Invalid mode for integer comparison in gen_compare_reg\");\n \n   return cc0_rtx;\n }"}]}