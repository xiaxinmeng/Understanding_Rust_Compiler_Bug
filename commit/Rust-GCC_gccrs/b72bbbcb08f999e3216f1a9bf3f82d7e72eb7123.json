{"sha": "b72bbbcb08f999e3216f1a9bf3f82d7e72eb7123", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjcyYmJiY2IwOGY5OTllMzIxNmYxYTliZjNmODJkN2U3MmViNzEyMw==", "commit": {"author": {"name": "DJ Delorie", "email": "dj@redhat.com", "date": "2008-12-02T11:35:06Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2008-12-02T11:35:06Z"}, "message": "stormy16.h (INCOMING_FRAME_SP_OFFSET): Negate.\n\n        * config/stormy16/stormy16.h (INCOMING_FRAME_SP_OFFSET): Negate.\n        (DWARF_CIE_DATA_ALIGNMENT): Define.\n\n        * config/stormy16/stormy16.c (xstormy16_compute_stack_layout):\n        Invert add/sub for INCOMING_FRAME_SP_OFFSET.\n        (xstormy16_expand_prologue): Likewise.\n        (xstormy16_expand_builtin_va_start): Likewise.\n        (xstormy16_gimplify_va_arg_expr): Likewise.\n\nFrom-SVN: r142350", "tree": {"sha": "aa52c3c0716f7cab3e28477618abe3b96e592892", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa52c3c0716f7cab3e28477618abe3b96e592892"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b72bbbcb08f999e3216f1a9bf3f82d7e72eb7123", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b72bbbcb08f999e3216f1a9bf3f82d7e72eb7123", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b72bbbcb08f999e3216f1a9bf3f82d7e72eb7123", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b72bbbcb08f999e3216f1a9bf3f82d7e72eb7123/comments", "author": null, "committer": null, "parents": [{"sha": "95e5f0ce004baee612104311868171e748dfc43c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95e5f0ce004baee612104311868171e748dfc43c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95e5f0ce004baee612104311868171e748dfc43c"}], "stats": {"total": 104, "additions": 45, "deletions": 59}, "files": [{"sha": "56cfc1b0400c95e99fd7126b0343068c431c4e8d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b72bbbcb08f999e3216f1a9bf3f82d7e72eb7123/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b72bbbcb08f999e3216f1a9bf3f82d7e72eb7123/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b72bbbcb08f999e3216f1a9bf3f82d7e72eb7123", "patch": "@@ -1,3 +1,14 @@\n+2008-12-02  DJ Delorie  <dj@redhat.com>\n+\n+\t* config/stormy16/stormy16.h (INCOMING_FRAME_SP_OFFSET): Negate.\n+\t(DWARF_CIE_DATA_ALIGNMENT): Define.\n+\n+\t* config/stormy16/stormy16.c (xstormy16_compute_stack_layout):\n+\tInvert add/sub for INCOMING_FRAME_SP_OFFSET.\n+\t(xstormy16_expand_prologue): Likewise.\n+\t(xstormy16_expand_builtin_va_start): Likewise.\n+\t(xstormy16_gimplify_va_arg_expr): Likewise.\n+\n 2008-12-02  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/38343"}, {"sha": "24c10eac5149b348a6c31627973502c9a389c35d", "filename": "gcc/config/stormy16/stormy16.c", "status": "modified", "additions": 31, "deletions": 41, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b72bbbcb08f999e3216f1a9bf3f82d7e72eb7123/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b72bbbcb08f999e3216f1a9bf3f82d7e72eb7123/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.c?ref=b72bbbcb08f999e3216f1a9bf3f82d7e72eb7123", "patch": "@@ -214,7 +214,7 @@ xstormy16_emit_cbranch (enum rtx_code code, rtx loc)\n \t\t\tgen_rtx_IF_THEN_ELSE (VOIDmode, condition_rtx,\n \t\t\t\t\t      loc_ref, pc_rtx));\n \n-  cy_clobber = gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (BImode, 16));\n+  cy_clobber = gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (BImode, CARRY_REGNUM));\n \n   if (mode == HImode)\n     vec = gen_rtvec (2, branch, cy_clobber);\n@@ -895,7 +895,7 @@ xstormy16_expand_move (enum machine_mode mode, rtx dest, rtx src)\n       rtx dest_reg = XEXP (pmv, 0);\n       rtx dest_mod = XEXP (pmv, 1);\n       rtx set      = gen_rtx_SET (Pmode, dest_reg, dest_mod);\n-      rtx clobber  = gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (BImode, 16));\n+      rtx clobber  = gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (BImode, CARRY_REGNUM));\n     \n       dest = gen_rtx_MEM (mode, dest_reg);\n       emit_insn (gen_rtx_PARALLEL (VOIDmode, gen_rtvec (2, set, clobber)));\n@@ -906,7 +906,7 @@ xstormy16_expand_move (enum machine_mode mode, rtx dest, rtx src)\n       rtx src_reg = XEXP (pmv, 0);\n       rtx src_mod = XEXP (pmv, 1);\n       rtx set     = gen_rtx_SET (Pmode, src_reg, src_mod);\n-      rtx clobber = gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (BImode, 16));\n+      rtx clobber = gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (BImode, CARRY_REGNUM));\n     \n       src = gen_rtx_MEM (mode, src_reg);\n       emit_insn (gen_rtx_PARALLEL (VOIDmode, gen_rtvec (2, set, clobber)));\n@@ -1002,17 +1002,17 @@ xstormy16_compute_stack_layout (void)\n   \n   if (crtl->args.size <= 2048 && crtl->args.size != -1)\n     {\n-      if (layout.frame_size + INCOMING_FRAME_SP_OFFSET \n+      if (layout.frame_size - INCOMING_FRAME_SP_OFFSET \n \t  + crtl->args.size <= 2048)\n-\tlayout.fp_minus_ap = layout.frame_size + INCOMING_FRAME_SP_OFFSET;\n+\tlayout.fp_minus_ap = layout.frame_size - INCOMING_FRAME_SP_OFFSET;\n       else\n \tlayout.fp_minus_ap = 2048 - crtl->args.size;\n     }\n   else\n     layout.fp_minus_ap = (layout.stdarg_save_size \n \t\t\t  + layout.register_save_size\n-\t\t\t  + INCOMING_FRAME_SP_OFFSET);\n-  layout.sp_minus_fp = (layout.frame_size + INCOMING_FRAME_SP_OFFSET \n+\t\t\t  - INCOMING_FRAME_SP_OFFSET);\n+  layout.sp_minus_fp = (layout.frame_size - INCOMING_FRAME_SP_OFFSET \n \t\t\t- layout.fp_minus_ap);\n   layout.first_local_minus_ap = layout.sp_minus_fp - layout.locals_size;\n   return layout;\n@@ -1030,11 +1030,11 @@ xstormy16_initial_elimination_offset (int from, int to)\n   if (from == FRAME_POINTER_REGNUM && to == HARD_FRAME_POINTER_REGNUM)\n     result = layout.sp_minus_fp - layout.locals_size;\n   else if (from == FRAME_POINTER_REGNUM && to == STACK_POINTER_REGNUM)\n-    result = -layout.locals_size;\n+    result = - layout.locals_size;\n   else if (from == ARG_POINTER_REGNUM && to == HARD_FRAME_POINTER_REGNUM)\n-    result = -layout.fp_minus_ap;\n+    result = - layout.fp_minus_ap;\n   else if (from == ARG_POINTER_REGNUM && to == STACK_POINTER_REGNUM)\n-    result = -(layout.sp_minus_fp + layout.fp_minus_ap);\n+    result = - (layout.sp_minus_fp + layout.fp_minus_ap);\n   else\n     gcc_unreachable ();\n \n@@ -1047,7 +1047,7 @@ emit_addhi3_postreload (rtx dest, rtx src0, rtx src1)\n   rtx set, clobber, insn;\n   \n   set = gen_rtx_SET (VOIDmode, dest, gen_rtx_PLUS (HImode, src0, src1));\n-  clobber = gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (BImode, 16));\n+  clobber = gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (BImode, CARRY_REGNUM));\n   insn = emit_insn (gen_rtx_PARALLEL (VOIDmode, gen_rtvec (2, set, clobber)));\n   return insn;\n }\n@@ -1134,7 +1134,10 @@ xstormy16_expand_prologue (void)\n   /* It's just possible that the SP here might be what we need for\n      the new FP...  */\n   if (frame_pointer_needed && layout.sp_minus_fp == layout.locals_size)\n-    emit_move_insn (hard_frame_pointer_rtx, stack_pointer_rtx);\n+    {\n+      insn = emit_move_insn (hard_frame_pointer_rtx, stack_pointer_rtx);\n+      RTX_FRAME_RELATED_P (insn) = 1;\n+    }\n \n   /* Allocate space for local variables.  */\n   if (layout.locals_size)\n@@ -1148,11 +1151,15 @@ xstormy16_expand_prologue (void)\n   if (frame_pointer_needed && layout.sp_minus_fp != layout.locals_size)\n     {\n       insn = emit_move_insn (hard_frame_pointer_rtx, stack_pointer_rtx);\n+      RTX_FRAME_RELATED_P (insn) = 1;\n \n       if (layout.sp_minus_fp)\n-\temit_addhi3_postreload (hard_frame_pointer_rtx,\n-\t\t\t\thard_frame_pointer_rtx,\n-\t\t\t\tGEN_INT (-layout.sp_minus_fp));\n+\t{\n+\t  insn = emit_addhi3_postreload (hard_frame_pointer_rtx,\n+\t\t\t\t\t hard_frame_pointer_rtx,\n+\t\t\t\t\t GEN_INT (- layout.sp_minus_fp));\n+\t  RTX_FRAME_RELATED_P (insn) = 1;\n+\t}\n     }\n }\n \n@@ -1191,36 +1198,19 @@ xstormy16_expand_epilogue (void)\n       if (frame_pointer_needed && layout.sp_minus_fp == layout.locals_size)\n \temit_move_insn (stack_pointer_rtx, hard_frame_pointer_rtx);\n       else\n-        {\n-\t  insn = emit_addhi3_postreload (stack_pointer_rtx, stack_pointer_rtx,\n-\t\t\t\t\t GEN_INT (- layout.locals_size));\n-\t  RTX_FRAME_RELATED_P (insn) = 1;\n-\t}\n+\temit_addhi3_postreload (stack_pointer_rtx, stack_pointer_rtx,\n+\t\t\t\tGEN_INT (- layout.locals_size));\n     }\n \n   /* Restore any call-saved registers.  */\n   for (regno = FIRST_PSEUDO_REGISTER - 1; regno >= 0; regno--)\n     if (REG_NEEDS_SAVE (regno, ifun))\n-      {\n-        rtx dwarf;\n-\n-\tinsn = emit_move_insn (gen_rtx_REG (HImode, regno), mem_pop_rtx);\n-\tRTX_FRAME_RELATED_P (insn) = 1;\n-\tdwarf = gen_rtx_SET (Pmode, stack_pointer_rtx,\n-\t\t\t     plus_constant (stack_pointer_rtx,\n-\t\t\t\t\t    -GET_MODE_SIZE (Pmode)));\n-\tREG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_FRAME_RELATED_EXPR,\n-\t\t\t\t\t      dwarf,\n-\t\t\t\t\t      REG_NOTES (insn));\n-      }\n+      emit_move_insn (gen_rtx_REG (HImode, regno), mem_pop_rtx);\n   \n   /* Pop the stack for the stdarg save area.  */\n   if (layout.stdarg_save_size)\n-    {\n-      insn = emit_addhi3_postreload (stack_pointer_rtx, stack_pointer_rtx,\n-\t\t\t\t     GEN_INT (- layout.stdarg_save_size));\n-      RTX_FRAME_RELATED_P (insn) = 1;\n-    }\n+    emit_addhi3_postreload (stack_pointer_rtx, stack_pointer_rtx,\n+\t\t\t    GEN_INT (- layout.stdarg_save_size));\n \n   /* Return.  */\n   if (ifun)\n@@ -1342,7 +1332,7 @@ xstormy16_expand_builtin_va_start (tree valist, rtx nextarg ATTRIBUTE_UNUSED)\n \t\t  NULL_TREE);\n \n   t = make_tree (TREE_TYPE (base), virtual_incoming_args_rtx);\n-  u = build_int_cst (NULL_TREE, INCOMING_FRAME_SP_OFFSET);\n+  u = build_int_cst (NULL_TREE, - INCOMING_FRAME_SP_OFFSET);\n   u = fold_convert (TREE_TYPE (count), u);\n   t = build2 (POINTER_PLUS_EXPR, TREE_TYPE (base), t, u);\n   t = build2 (MODIFY_EXPR, TREE_TYPE (base), base, t);\n@@ -1430,7 +1420,7 @@ xstormy16_gimplify_va_arg_expr (tree valist, tree type, gimple_seq *pre_p,\n     }\n \n   t = size_int (NUM_ARGUMENT_REGISTERS * UNITS_PER_WORD\n-\t\t- INCOMING_FRAME_SP_OFFSET);\n+\t\t+ INCOMING_FRAME_SP_OFFSET);\n   t = fold_convert (TREE_TYPE (count), t);\n   t = build2 (MINUS_EXPR, TREE_TYPE (count), count_tmp, t);\n   t = build2 (PLUS_EXPR, TREE_TYPE (count), t,\n@@ -2007,10 +1997,10 @@ xstormy16_expand_arith (enum machine_mode mode, enum rtx_code code,\n \t      rtx branch, sub, clobber, sub_1;\n \t      \n \t      sub_1 = gen_rtx_MINUS (HImode, w_src0, \n-\t\t\t\t     gen_rtx_ZERO_EXTEND (HImode, gen_rtx_REG (BImode, 16)));\n+\t\t\t\t     gen_rtx_ZERO_EXTEND (HImode, gen_rtx_REG (BImode, CARRY_REGNUM)));\n \t      sub = gen_rtx_SET (VOIDmode, w_dest,\n \t\t\t\t gen_rtx_MINUS (HImode, sub_1, w_src1));\n-\t      clobber = gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (BImode, 16));\n+\t      clobber = gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (BImode, CARRY_REGNUM));\n \t      branch = gen_rtx_SET (VOIDmode, pc_rtx,\n \t\t\t\t    gen_rtx_IF_THEN_ELSE (VOIDmode,\n \t\t\t\t\t\t\t  gen_rtx_EQ (HImode,"}, {"sha": "2a7338106ee3a9ee0dd12f47111b3859e5448319", "filename": "gcc/config/stormy16/stormy16.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b72bbbcb08f999e3216f1a9bf3f82d7e72eb7123/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b72bbbcb08f999e3216f1a9bf3f82d7e72eb7123/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.h?ref=b72bbbcb08f999e3216f1a9bf3f82d7e72eb7123", "patch": "@@ -352,7 +352,7 @@ enum reg_class\n #define INCOMING_RETURN_ADDR_RTX  \\\n    gen_rtx_MEM (SImode, gen_rtx_PLUS (Pmode, stack_pointer_rtx, GEN_INT (-4)))\n \n-#define INCOMING_FRAME_SP_OFFSET (xstormy16_interrupt_function_p () ? 6 : 4)\n+#define INCOMING_FRAME_SP_OFFSET (xstormy16_interrupt_function_p () ? -6 : -4)\n \n \f\n /* Register That Address the Stack Frame.  */\n@@ -730,7 +730,8 @@ do  {\t\t\t\t\t\t\\\n \f\n /* Assembler Commands for Exception Regions.  */\n \n-#define DWARF2_UNWIND_INFO 0\n+#define DWARF2_UNWIND_INFO \t\t0\n+#define DWARF_CIE_DATA_ALIGNMENT\t1\n \n /* Don't use __builtin_setjmp for unwinding, since it's tricky to get\n    at the high 16 bits of an address.  */"}, {"sha": "b42245b188ec0385e6dd37bd7f9a5521610072dc", "filename": "gcc/config/stormy16/stormy16.md", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b72bbbcb08f999e3216f1a9bf3f82d7e72eb7123/gcc%2Fconfig%2Fstormy16%2Fstormy16.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b72bbbcb08f999e3216f1a9bf3f82d7e72eb7123/gcc%2Fconfig%2Fstormy16%2Fstormy16.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.md?ref=b72bbbcb08f999e3216f1a9bf3f82d7e72eb7123", "patch": "@@ -332,22 +332,6 @@\n    add %0,%2\"\n   [(set_attr \"length\" \"2,2,0,2,2,2,2,4\")])\n \n-;; ; Reload can generate addition operations.  The SECONDARY_RELOAD_CLASS\n-;; ; macro causes it to allocate the carry register; this pattern\n-;; ; shows it how to place the register in RTL to make the addition work.\n-;; (define_expand \"reload_inhi\"\n-;;   [(parallel [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n-;; \t\t   (match_operand:HI 1 \"xstormy16_carry_plus_operand\" \"\"))\n-;; \t      (clobber (reg:BI CARRY_REG))])]\n-;;   \"\"\n-;;   \"if (! rtx_equal_p (operands[0], XEXP (operands[1], 0)))\n-;;     {\n-;;       emit_insn (gen_rtx_SET (VOIDmode, operands[0], XEXP (operands[1], 0)));\n-;;       operands[1] = gen_rtx_PLUS (GET_MODE (operands[1]), operands[0],\n-;; \t\t\t\t  XEXP (operands[1], 1));\n-;;     }\n-;;  \")\n-\n (define_insn \"addchi4\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=T,r,r\")\n \t(plus:HI (match_operand:HI 1 \"register_operand\" \"%0,0,0\")"}]}