{"sha": "b2a1e45827eae56662a02276a9db842d525740c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjJhMWU0NTgyN2VhZTU2NjYyYTAyMjc2YTlkYjg0MmQ1MjU3NDBjNg==", "commit": {"author": {"name": "Felix Lee", "email": "flee@cygnus.com", "date": "1998-09-21T00:56:50Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-09-21T00:56:50Z"}, "message": "c-lex.c (init_lex): Use getenv (\"LANG\"), not GET_ENVIRONMENT ().\n\n        * c-lex.c (init_lex): Use getenv (\"LANG\"), not GET_ENVIRONMENT ().\n        * cccp.c (main): Likewise.\n        * gcc.c (process_command): Similarly for \"GCC_EXEC_PREFIX\".\n        * cccp.c, collect2.c, cpplib.c, gcc.c, config/i386/xm-cygwin32.h:\n        Rename GET_ENVIRONMENT to GET_ENV_PATH_LIST, and fix some\n        macro-use bugs.\n\nFrom-SVN: r22511", "tree": {"sha": "355b6cb7f3bebc6ed20e9e68836094752eaeaae6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/355b6cb7f3bebc6ed20e9e68836094752eaeaae6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b2a1e45827eae56662a02276a9db842d525740c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2a1e45827eae56662a02276a9db842d525740c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2a1e45827eae56662a02276a9db842d525740c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2a1e45827eae56662a02276a9db842d525740c6/comments", "author": null, "committer": null, "parents": [{"sha": "717f76d8fcfd3e6f4ba83fa18882e6b585835844", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/717f76d8fcfd3e6f4ba83fa18882e6b585835844", "html_url": "https://github.com/Rust-GCC/gccrs/commit/717f76d8fcfd3e6f4ba83fa18882e6b585835844"}], "stats": {"total": 96, "additions": 51, "deletions": 45}, "files": [{"sha": "3fe81519ed59e20c4e5d1f09f31cb42b669538c4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2a1e45827eae56662a02276a9db842d525740c6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2a1e45827eae56662a02276a9db842d525740c6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b2a1e45827eae56662a02276a9db842d525740c6", "patch": "@@ -1,3 +1,13 @@\n+Mon Sep 21 01:53:05 1998  Felix Lee  <flee@cygnus.com>\n+\n+\t* c-lex.c (init_lex): Use getenv (\"LANG\"), not GET_ENVIRONMENT ().\n+\t* cccp.c (main): Likewise.\n+\t* gcc.c (process_command): Similarly for \"GCC_EXEC_PREFIX\".\n+\n+\t* cccp.c, collect2.c, cpplib.c, gcc.c, config/i386/xm-cygwin32.h:\n+\tRename GET_ENVIRONMENT to GET_ENV_PATH_LIST, and fix some\n+\tmacro-use bugs.\n+\n Mon Sep 21 00:52:12 1998  Per Bothner  <bothner@cygnus.com>\n \n \t* Makefile.in (LIBS):  Link in libiberty.a."}, {"sha": "e361f5bbe09ba2ff94bb79cb3f24a7b4c825387c", "filename": "gcc/c-lex.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2a1e45827eae56662a02276a9db842d525740c6/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2a1e45827eae56662a02276a9db842d525740c6/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=b2a1e45827eae56662a02276a9db842d525740c6", "patch": "@@ -36,10 +36,6 @@ Boston, MA 02111-1307, USA.  */\n #ifdef MULTIBYTE_CHARS\n #include \"mbchar.h\"\n #include <locale.h>\n-\n-#ifndef GET_ENVIRONMENT\n-#define GET_ENVIRONMENT(ENV_VALUE,ENV_NAME) ((ENV_VALUE) = getenv (ENV_NAME))\n-#endif\n #endif /* MULTIBYTE_CHARS */\n \n #if USE_CPPLIB\n@@ -230,7 +226,7 @@ init_lex ()\n #ifdef MULTIBYTE_CHARS\n   /* Change to the native locale for multibyte conversions.  */\n   setlocale (LC_CTYPE, \"\");\n-  GET_ENVIRONMENT (literal_codeset, \"LANG\");\n+  literal_codeset = getenv (\"LANG\");\n #endif\n \n   maxtoken = 40;"}, {"sha": "5afba12fad4fa9cd0ec2b2c9a288886e7e937be1", "filename": "gcc/cccp.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2a1e45827eae56662a02276a9db842d525740c6/gcc%2Fcccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2a1e45827eae56662a02276a9db842d525740c6/gcc%2Fcccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcccp.c?ref=b2a1e45827eae56662a02276a9db842d525740c6", "patch": "@@ -45,8 +45,8 @@ typedef unsigned char U_CHAR;\n #include <locale.h>\n #endif /* MULTIBYTE_CHARS */\n \n-#ifndef GET_ENVIRONMENT\n-#define GET_ENVIRONMENT(ENV_VALUE,ENV_NAME) ENV_VALUE = getenv (ENV_NAME)\n+#ifndef GET_ENV_PATH_LIST\n+#define GET_ENV_PATH_LIST(VAR,NAME)\tdo { (VAR) = getenv (NAME); } while (0)\n #endif\n \n #ifndef STANDARD_INCLUDE_DIR\n@@ -1310,7 +1310,7 @@ main (argc, argv)\n #ifdef MULTIBYTE_CHARS\n   /* Change to the native locale for multibyte conversions.  */\n   setlocale (LC_CTYPE, \"\");\n-  GET_ENVIRONMENT (literal_codeset, \"LANG\");\n+  literal_codeset = getenv (\"LANG\");\n #endif\n \n   /* Process switches and find input file name.  */\n@@ -1742,7 +1742,7 @@ main (argc, argv)\n   /* Some people say that CPATH should replace the standard include dirs,\n      but that seems pointless: it comes before them, so it overrides them\n      anyway.  */\n-  GET_ENVIRONMENT (cp, \"CPATH\");\n+  GET_ENV_PATH_LIST (cp, \"CPATH\");\n   if (cp && ! no_standard_includes)\n     path_include (cp);\n \n@@ -1926,16 +1926,16 @@ main (argc, argv)\n     switch ((objc << 1) + cplusplus)\n       {\n       case 0:\n-\tGET_ENVIRONMENT (epath, \"C_INCLUDE_PATH\");\n+\tGET_ENV_PATH_LIST (epath, \"C_INCLUDE_PATH\");\n \tbreak;\n       case 1:\n-\tGET_ENVIRONMENT (epath, \"CPLUS_INCLUDE_PATH\");\n+\tGET_ENV_PATH_LIST (epath, \"CPLUS_INCLUDE_PATH\");\n \tbreak;\n       case 2:\n-\tGET_ENVIRONMENT (epath, \"OBJC_INCLUDE_PATH\");\n+\tGET_ENV_PATH_LIST (epath, \"OBJC_INCLUDE_PATH\");\n \tbreak;\n       case 3:\n-\tGET_ENVIRONMENT (epath, \"OBJCPLUS_INCLUDE_PATH\");\n+\tGET_ENV_PATH_LIST (epath, \"OBJCPLUS_INCLUDE_PATH\");\n \tbreak;\n       }\n     /* If the environment var for this language is set,"}, {"sha": "10cc4b6bdf32b3baa33b7838b1fb4f5881c48b34", "filename": "gcc/collect2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2a1e45827eae56662a02276a9db842d525740c6/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2a1e45827eae56662a02276a9db842d525740c6/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=b2a1e45827eae56662a02276a9db842d525740c6", "patch": "@@ -233,8 +233,8 @@ extern int prepends_underscore;\n \n extern FILE *fdopen ();\n \n-#ifndef GET_ENVIRONMENT\n-#define GET_ENVIRONMENT(ENV_VALUE,ENV_NAME) ENV_VALUE = getenv (ENV_NAME)\n+#ifndef GET_ENV_PATH_LIST\n+#define GET_ENV_PATH_LIST(VAR,NAME)\tdo { (VAR) = getenv (NAME); } while (0)\n #endif\n \n /* Structure to hold all the directories in which to search for files to\n@@ -862,7 +862,7 @@ prefix_from_env (env, pprefix)\n      struct path_prefix *pprefix;\n {\n   char *p;\n-  GET_ENVIRONMENT (p, env);\n+  GET_ENV_PATH_LIST (p, env);\n \n   if (p)\n     prefix_from_string (p, pprefix);"}, {"sha": "fd9c6db59232c25d25cdce2aa797ddb25c5ae082", "filename": "gcc/config/i386/xm-cygwin32.h", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2a1e45827eae56662a02276a9db842d525740c6/gcc%2Fconfig%2Fi386%2Fxm-cygwin32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2a1e45827eae56662a02276a9db842d525740c6/gcc%2Fconfig%2Fi386%2Fxm-cygwin32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fxm-cygwin32.h?ref=b2a1e45827eae56662a02276a9db842d525740c6", "patch": "@@ -32,22 +32,22 @@ Boston, MA 02111-1307, USA. */\n \n /* If we allow both '/' and '\\' as dir separators, then\n    allow both unix and win32 PATH syntax */\n-#undef GET_ENVIRONMENT\n-#define GET_ENVIRONMENT(ENV_VALUE,ENV_NAME)                   \\\n-{                                                             \\\n-  char *epath;                                                \\\n-  char *win32epath;                                           \\\n-                                                              \\\n-  epath = win32epath = getenv (ENV_NAME);                     \\\n-  /* if we have a posix path list, convert to win32 path list */ \\\n-  if (epath != NULL && *epath != 0 && cygwin32_posix_path_list_p (epath)) \\\n-    {                                                         \\\n-      win32epath = (char *) xmalloc                           \\\n-      (cygwin32_posix_to_win32_path_list_buf_size (epath));   \\\n-      cygwin32_posix_to_win32_path_list (epath, win32epath);  \\\n-    }                                                         \\\n-   ENV_VALUE = win32epath;                                    \\\n-}\n+#undef GET_ENV_PATH_LIST\n+#define GET_ENV_PATH_LIST(VAR,NAME)\t\t\t\t\t\\\n+do {\t\t\t\t\t\t\t\t\t\\\n+  char *_epath;\t\t\t\t\t\t\t\t\\\n+  char *_win32epath;\t\t\t\t\t\t\t\\\n+  _epath = _win32epath = getenv (NAME);\t\t\t\t\t\\\n+  /* if we have a posix path list, convert to win32 path list */\t\\\n+  if (_epath != NULL && *_epath != 0\t\t\t\t\t\\\n+      && cygwin32_posix_path_list_p (_epath))\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      _win32epath = (char *) xmalloc\t\t\t\t\t\\\n+\t(cygwin32_posix_to_win32_path_list_buf_size (_epath));\t\t\\\n+      cygwin32_posix_to_win32_path_list (_epath, _win32epath);\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  (VAR) = _win32epath;\t\t\t\t\t\t\t\\\n+} while (0)\n \n #define PATH_SEPARATOR ';'\n "}, {"sha": "7521723f8b8254b9ba5a00aefc02ceb3a128617d", "filename": "gcc/cpplib.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2a1e45827eae56662a02276a9db842d525740c6/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2a1e45827eae56662a02276a9db842d525740c6/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=b2a1e45827eae56662a02276a9db842d525740c6", "patch": "@@ -39,8 +39,8 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n #include \"cpplib.h\"\n #include \"cpphash.h\"\n \n-#ifndef GET_ENVIRONMENT\n-#define GET_ENVIRONMENT(ENV_VALUE,ENV_NAME) ENV_VALUE = getenv (ENV_NAME)\n+#ifndef GET_ENV_PATH_LIST\n+#define GET_ENV_PATH_LIST(VAR,NAME)\tdo { (VAR) = getenv (NAME); } while (0)\n #endif\n \n extern char *update_path PARAMS ((char *, char *));\n@@ -5710,7 +5710,7 @@ cpp_start_read (pfile, fname)\n   /* Some people say that CPATH should replace the standard include dirs,\n      but that seems pointless: it comes before them, so it overrides them\n      anyway.  */\n-  GET_ENVIRONMENT (p, \"CPATH\");\n+  GET_ENV_PATH_LIST (p, \"CPATH\");\n   if (p != 0 && ! opts->no_standard_includes)\n     path_include (pfile, p);\n \n@@ -5840,16 +5840,16 @@ cpp_start_read (pfile, fname)\n     switch ((opts->objc << 1) + opts->cplusplus)\n       {\n       case 0:\n-\tGET_ENVIRONMENT (epath, \"C_INCLUDE_PATH\");\n+\tGET_ENV_PATH_LIST (epath, \"C_INCLUDE_PATH\");\n \tbreak;\n       case 1:\n-\tGET_ENVIRONMENT (epath, \"CPLUS_INCLUDE_PATH\");\n+\tGET_ENV_PATH_LIST (epath, \"CPLUS_INCLUDE_PATH\");\n \tbreak;\n       case 2:\n-\tGET_ENVIRONMENT (epath, \"OBJC_INCLUDE_PATH\");\n+\tGET_ENV_PATH_LIST (epath, \"OBJC_INCLUDE_PATH\");\n \tbreak;\n       case 3:\n-\tGET_ENVIRONMENT (epath, \"OBJCPLUS_INCLUDE_PATH\");\n+\tGET_ENV_PATH_LIST (epath, \"OBJCPLUS_INCLUDE_PATH\");\n \tbreak;\n       }\n     /* If the environment var for this language is set,"}, {"sha": "e5ba9cdd5f816376f9127196cafd436ec78460f6", "filename": "gcc/gcc.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2a1e45827eae56662a02276a9db842d525740c6/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2a1e45827eae56662a02276a9db842d525740c6/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=b2a1e45827eae56662a02276a9db842d525740c6", "patch": "@@ -111,8 +111,8 @@ static char dir_separator_str[] = {DIR_SEPARATOR, 0};\n #define obstack_chunk_alloc xmalloc\n #define obstack_chunk_free free\n \n-#ifndef GET_ENVIRONMENT\n-#define GET_ENVIRONMENT(ENV_VALUE,ENV_NAME) ENV_VALUE = getenv (ENV_NAME)\n+#ifndef GET_ENV_PATH_LIST\n+#define GET_ENV_PATH_LIST(VAR,NAME)\tdo { (VAR) = getenv (NAME); } while (0)\n #endif\n \n extern char *my_strerror PROTO((int));\n@@ -2563,7 +2563,7 @@ process_command (argc, argv)\n   int have_o = 0;\n   int lang_n_infiles = 0;\n \n-  GET_ENVIRONMENT (gcc_exec_prefix, \"GCC_EXEC_PREFIX\");\n+  gcc_exec_prefix = getenv (\"GCC_EXEC_PREFIX\");\n \n   n_switches = 0;\n   n_infiles = 0;\n@@ -2606,7 +2606,7 @@ process_command (argc, argv)\n   /* COMPILER_PATH and LIBRARY_PATH have values\n      that are lists of directory names with colons.  */\n \n-  GET_ENVIRONMENT (temp, \"COMPILER_PATH\");\n+  GET_ENV_PATH_LIST (temp, \"COMPILER_PATH\");\n   if (temp)\n     {\n       char *startp, *endp;\n@@ -2640,7 +2640,7 @@ process_command (argc, argv)\n \t}\n     }\n \n-  GET_ENVIRONMENT (temp, \"LIBRARY_PATH\");\n+  GET_ENV_PATH_LIST (temp, \"LIBRARY_PATH\");\n   if (temp && *cross_compile == '0')\n     {\n       char *startp, *endp;\n@@ -2673,7 +2673,7 @@ process_command (argc, argv)\n     }\n \n   /* Use LPATH like LIBRARY_PATH (for the CMU build program).  */\n-  GET_ENVIRONMENT (temp, \"LPATH\");\n+  GET_ENV_PATH_LIST (temp, \"LPATH\");\n   if (temp && *cross_compile == '0')\n     {\n       char *startp, *endp;"}]}