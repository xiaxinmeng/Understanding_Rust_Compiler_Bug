{"sha": "123906261b40f9084205961dcced31799c322083", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTIzOTA2MjYxYjQwZjkwODQyMDU5NjFkY2NlZDMxNzk5YzMyMjA4Mw==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2018-05-21T14:51:35Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-05-21T14:51:35Z"}, "message": "[Ada] Spurious error on indexed call as prefix of a call\n\nThis patch refines the handling of the well-known syntactic ambiguity created\nby a function with defaulted parameters that returns an array, so that F (X)\nmay designate a call to the function, or an indexing of a parameterless call.\nThis patch handles the case where such a call is itself the prefix of another\ncall, and the function is a primitive operation invoked in prefix form.\n\n2018-05-21  Ed Schonberg  <schonberg@adacore.com>\n\ngcc/ada/\n\n\t* sem_ch4.adb (Analyze_One_Call): Recognize complex cases where an\n\tindexed call originally in prefix forn is itself the prefix of a\n\tfurther call.\n\ngcc/testsuite/\n\n\t* gnat.dg/array30.adb: New testcase.\n\nFrom-SVN: r260461", "tree": {"sha": "e13fe3c67622d8f6bd4332798188fd79816179e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e13fe3c67622d8f6bd4332798188fd79816179e3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/123906261b40f9084205961dcced31799c322083", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/123906261b40f9084205961dcced31799c322083", "html_url": "https://github.com/Rust-GCC/gccrs/commit/123906261b40f9084205961dcced31799c322083", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/123906261b40f9084205961dcced31799c322083/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a2fcf1e02c7809a14e2bde3a26fec86b4cbd9ab3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2fcf1e02c7809a14e2bde3a26fec86b4cbd9ab3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2fcf1e02c7809a14e2bde3a26fec86b4cbd9ab3"}], "stats": {"total": 70, "additions": 70, "deletions": 0}, "files": [{"sha": "ce5ef73b057bd52f3ab34653e45c3fe58673eab4", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/123906261b40f9084205961dcced31799c322083/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/123906261b40f9084205961dcced31799c322083/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=123906261b40f9084205961dcced31799c322083", "patch": "@@ -1,3 +1,9 @@\n+2018-05-21  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch4.adb (Analyze_One_Call): Recognize complex cases where an\n+\tindexed call originally in prefix forn is itself the prefix of a\n+\tfurther call.\n+\n 2018-04-04  Piotr Trojanek  <trojanek@adacore.com>\n \n \t* sem_eval.adb (Is_Null_Range): Clarify access to the full view of a"}, {"sha": "e1e826e54cec67f34d5bdfc7d120ffd222d2d62e", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/123906261b40f9084205961dcced31799c322083/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/123906261b40f9084205961dcced31799c322083/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=123906261b40f9084205961dcced31799c322083", "patch": "@@ -3199,12 +3199,28 @@ package body Sem_Ch4 is\n       Actuals : constant List_Id   := Parameter_Associations (N);\n       Prev_T  : constant Entity_Id := Etype (N);\n \n+      --  Recognize cases of prefixed calls that have been rewritten in\n+      --  various ways. The simplest case is a rewritten selected component,\n+      --  but it can also be an already-examined indexed component, or a\n+      --  prefix that is itself a rewritten prefixed call that is in turn\n+      --  an indexed call (the syntactic ambiguity involving the indexing of\n+      --  a function with defaulted parameters that returns an array).\n+      --  A flag Maybe_Indexed_Call might be useful here ???\n+\n       Must_Skip  : constant Boolean := Skip_First\n                      or else Nkind (Original_Node (N)) = N_Selected_Component\n                      or else\n                        (Nkind (Original_Node (N)) = N_Indexed_Component\n                           and then Nkind (Prefix (Original_Node (N)))\n+                            = N_Selected_Component)\n+                     or else\n+                       (Nkind (Parent (N)) = N_Function_Call\n+                          and then Is_Array_Type (Etype (Name (N)))\n+                          and then Etype (Original_Node (N)) =\n+                            Component_Type (Etype (Name (N)))\n+                          and then Nkind (Original_Node (Parent (N)))\n                             = N_Selected_Component);\n+\n       --  The first formal must be omitted from the match when trying to find\n       --  a primitive operation that is a possible interpretation, and also\n       --  after the call has been rewritten, because the corresponding actual\n@@ -4352,6 +4368,10 @@ package body Sem_Ch4 is\n       QE_Scop : Entity_Id;\n \n    begin\n+      --  The processing is similar to that for quantified expressions,\n+      --  which have a similar structure and are eventually transformed\n+      --  into a loop.\n+\n       QE_Scop := New_Internal_Entity (E_Loop, Current_Scope, Sloc (N), 'L');\n       Set_Etype  (QE_Scop, Standard_Void_Type);\n       Set_Scope  (QE_Scop, Current_Scope);"}, {"sha": "44e581ea1491a6ae7e43fd5b353121a1156cdae9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/123906261b40f9084205961dcced31799c322083/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/123906261b40f9084205961dcced31799c322083/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=123906261b40f9084205961dcced31799c322083", "patch": "@@ -1,3 +1,7 @@\n+2018-04-04  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* gnat.dg/array30.adb: New testcase.\n+\n 2018-04-04  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* gnat.dg/sync2.adb, gnat.dg/sync2.ads: New testcase."}, {"sha": "47b1a1327311aa91847593c05af2cebfa49b6615", "filename": "gcc/testsuite/gnat.dg/array30.adb", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/123906261b40f9084205961dcced31799c322083/gcc%2Ftestsuite%2Fgnat.dg%2Farray30.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/123906261b40f9084205961dcced31799c322083/gcc%2Ftestsuite%2Fgnat.dg%2Farray30.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Farray30.adb?ref=123906261b40f9084205961dcced31799c322083", "patch": "@@ -0,0 +1,40 @@\n+--  { dg-do run }\n+\n+with Ada.Text_IO;\n+\n+procedure Array30 is\n+\n+   package P is\n+      type T is tagged record\n+         value : Integer := 123;\n+      end record;\n+\n+      type Ar is array (1..10) of T;\n+      function F (Obj : T) return Ar;\n+      function F2 (Obj : T) return T;\n+   end P;\n+   use P;\n+\n+   package body P is\n+      function F (Obj : T) return Ar is\n+      begin\n+         return (others => <>);\n+      end;\n+\n+      function F2 (Obj : T) return T is\n+      begin\n+         return (value => -111);\n+      end F2;\n+  end P;\n+\n+  Thing : T;\n+begin\n+  if Thing.F (4).Value /= 0 then\n+     if Thing.F (5).Value /= 123 then\n+        raise Program_Error;\n+     end if;\n+     if Thing.F (5).F2.Value /= -111 then\n+        raise Program_Error;\n+     end if;\n+  end if;\n+end;"}]}