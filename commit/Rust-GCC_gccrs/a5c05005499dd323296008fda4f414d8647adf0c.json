{"sha": "a5c05005499dd323296008fda4f414d8647adf0c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTVjMDUwMDU0OTlkZDMyMzI5NjAwOGZkYTRmNDE0ZDg2NDdhZGYwYw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-12-10T23:36:21Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-12-10T23:36:21Z"}, "message": "dojump: Fix up probabilities splitting in dojump.c comparison splitting [PR98212]\n\nWhen compiling:\nvoid foo (void);\nvoid bar (float a, float b) { if (__builtin_expect (a != b, 1)) foo (); }\nvoid baz (float a, float b) { if (__builtin_expect (a == b, 1)) foo (); }\nvoid qux (float a, float b) { if (__builtin_expect (a != b, 0)) foo (); }\nvoid corge (float a, float b) { if (__builtin_expect (a == b, 0)) foo (); }\non x86_64, we get (unimportant cruft removed):\nbar:    ucomiss %xmm1, %xmm0\n        jp      .L4\n        je      .L1\n.L4:    jmp     foo\n.L1:    ret\nbaz:    ucomiss %xmm1, %xmm0\n        jp      .L6\n        jne     .L6\n        jmp     foo\n.L6:    ret\nqux:    ucomiss %xmm1, %xmm0\n        jp      .L13\n        jne     .L13\n        ret\n.L13:   jmp     foo\ncorge:  ucomiss %xmm1, %xmm0\n        jnp     .L18\n.L14:   ret\n.L18:   jne     .L14\n        jmp     foo\n(note for bar and qux that changed with a patch I've posted earlier today).\nThis is all reasonable, except the last function, the overall jump to\nthe tail call is predicted unlikely (10%), so it is good jmp foo isn't on\nthe straight line path, but NaNs are (or should be) considered very unlikely\nin the programs, so IMHO the right code (and one emitted with the following\npatch) is:\ncorge:  ucomiss %xmm1, %xmm0\n        jp      .L14\n        je      .L18\n.L14:   ret\n.L18:   jmp     foo\n\nLet's discuss the probabilities in the above testcase:\nfor !and_them it looks all correct, so for\nbar we split\nif (a != b) goto t; // prob 90%\ngoto f;\ninto:\nif (a unord b) goto t; // first_prob = prob * cprob = 90% * 1% = 0.9%\nif (a ltgt b) goto t; // adjusted prob = (prob - first_prob) / (1 - first_prob) = (90% - 0.9%) / (1 - 0.9%) = 89.909%\nand for qux we split\nif (a != b) goto t; // prob 10%\ngoto f;\ninto:\nif (a unord b) goto t; // first_prob = prob * cprob = 10% * 1% = 0.1%\nif (a ltgt b) goto t; // adjusted prob = (prob - first_prob) / (1 - first_prob) = (10% - 0.1%) / (1 - 0.1%) = 9.910%\nNow, the and_them cases should be probability wise exactly the same\nif we swap the f and t labels, because baz\nif (a == b) goto t; // prob 90%\ngoto f;\nis equivalent to:\nif (a != b) goto f; // prob 10%\ngoto t;\nwhich is in qux.  This means we could expand baz as:\nif (a unord b) goto f; // 0.1%\nif (a ltgt b) goto f; // 9.910%\ngoto t;\nBut we don't expand it exactly that way, but instead (as the comment says)\nas:\nif (a ord b) ; else goto f; // first_prob as probability of ;\nif (a uneq b) goto t; // adjusted prob\ngoto f;\nSo, first_prob.invert () should be 0.1% and adjusted prob should be\n1 - 9.910%.\nThus, the right thing is 4 inverts:\nprob = prob.invert (); // baz is equivalent to qux with swap(t, f) and thus inverted original prob\nfirst_prob = prob.split (cprob.invert ()).invert ();\n// cprob.invert because by doing if (cond) ; else goto f; we effectively invert the condition\n// the second invert because first_prob is probability of ; rather than goto f\nprob = prob.invert (); // lastly because adjusted prob we want is\n// probability of goto t;, while the one from corresponding !and_them case\n// would be if (...) goto f; goto t;\n\n2020-12-11  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR rtl-optimization/98212\n\t* dojump.c (do_compare_rtx_and_jump): Change computation of\n\tfirst_prob for and_them.  Add comment explaining and_them case.\n\n\t* gcc.dg/predict-8.c: Adjust expected probability.", "tree": {"sha": "0429a10a8c805a0e3472747e49d3296ea343aa78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0429a10a8c805a0e3472747e49d3296ea343aa78"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5c05005499dd323296008fda4f414d8647adf0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5c05005499dd323296008fda4f414d8647adf0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5c05005499dd323296008fda4f414d8647adf0c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5c05005499dd323296008fda4f414d8647adf0c/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ea62857a3fbdf091ba38cbb62e98dc76b198e2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ea62857a3fbdf091ba38cbb62e98dc76b198e2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ea62857a3fbdf091ba38cbb62e98dc76b198e2e"}], "stats": {"total": 40, "additions": 34, "deletions": 6}, "files": [{"sha": "09c2b52773d69db577db72d77b9f9866b9db4478", "filename": "gcc/dojump.c", "status": "modified", "additions": 33, "deletions": 5, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5c05005499dd323296008fda4f414d8647adf0c/gcc%2Fdojump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5c05005499dd323296008fda4f414d8647adf0c/gcc%2Fdojump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdojump.c?ref=a5c05005499dd323296008fda4f414d8647adf0c", "patch": "@@ -1138,18 +1138,37 @@ do_compare_rtx_and_jump (rtx op0, rtx op1, enum rtx_code code, int unsignedp,\n \t\tcprob = cprob.apply_scale (99, 100);\n \t      else\n \t\tcprob = profile_probability::even ();\n-\t      /* We want to split:\n+\t      /* For and_them we want to split:\n \t\t if (x) goto t; // prob;\n+\t\t goto f;\n \t\t into\n-\t\t if (a) goto t; // first_prob;\n-\t\t if (b) goto t; // prob;\n+\t\t if (a) ; else goto f; // first_prob for ;\n+\t\t\t\t       // 1 - first_prob for goto f;\n+\t\t if (b) goto t; // adjusted prob;\n+\t\t goto f;\n \t\t such that the overall probability of jumping to t\n-\t\t remains the same and first_prob is prob * cprob.  */\n+\t\t remains the same.  The and_them case should be\n+\t\t probability-wise equivalent to the !and_them case with\n+\t\t f and t swapped and also the conditions inverted, i.e.\n+\t\t if (!a) goto f;\n+\t\t if (!b) goto f;\n+\t\t goto t;\n+\t\t where the overall probability of jumping to f is\n+\t\t 1 - prob (thus the first prob.invert () below).\n+\t\t cprob.invert () is because the a condition is inverted,\n+\t\t so if it was originally ORDERED, !a is UNORDERED and\n+\t\t thus should be relative 1% rather than 99%.\n+\t\t The invert () on assignment to first_prob is because\n+\t\t first_prob represents the probability of fallthru,\n+\t\t rather than goto f.  And the last prob.invert () is\n+\t\t because the adjusted prob represents the probability of\n+\t\t jumping to t rather than to f.  */\n \t      if (and_them)\n \t\t{\n \t\t  rtx_code_label *dest_label;\n \t\t  prob = prob.invert ();\n-\t\t  profile_probability first_prob = prob.split (cprob).invert ();\n+\t\t  profile_probability first_prob\n+\t\t    = prob.split (cprob.invert ()).invert ();\n \t\t  prob = prob.invert ();\n \t\t  /* If we only jump if true, just bypass the second jump.  */\n \t\t  if (! if_false_label)\n@@ -1163,6 +1182,15 @@ do_compare_rtx_and_jump (rtx op0, rtx op1, enum rtx_code code, int unsignedp,\n                   do_compare_rtx_and_jump (op0, op1, first_code, unsignedp, mode,\n \t\t\t\t\t   size, dest_label, NULL, first_prob);\n \t\t}\n+\t      /* For !and_them we want to split:\n+\t\t if (x) goto t; // prob;\n+\t\t goto f;\n+\t\t into\n+\t\t if (a) goto t; // first_prob;\n+\t\t if (b) goto t; // adjusted prob;\n+\t\t goto f;\n+\t\t such that the overall probability of jumping to t\n+\t\t remains the same and first_prob is prob * cprob.  */\n               else\n \t\t{\n \t\t  profile_probability first_prob = prob.split (cprob);"}, {"sha": "ec755e2575368d8dbc84d2bb917b15a40def0ea1", "filename": "gcc/testsuite/gcc.dg/predict-8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5c05005499dd323296008fda4f414d8647adf0c/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5c05005499dd323296008fda4f414d8647adf0c/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-8.c?ref=a5c05005499dd323296008fda4f414d8647adf0c", "patch": "@@ -8,4 +8,4 @@ int foo(float a, float b) {\n     return 2;\n }\n \n-/* { dg-final { scan-rtl-dump-times \"65.\\[34]. .guessed\" 2 \"expand\"} } */\n+/* { dg-final { scan-rtl-dump-times \"99.\\[678]. .guessed\" 2 \"expand\"} } */"}]}