{"sha": "54062fc0da3a1009eb0f53e899fb44d8b7b4a177", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTQwNjJmYzBkYTNhMTAwOWViMGY1M2U4OTlmYjQ0ZDhiN2I0YTE3Nw==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2008-02-22T11:02:00Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2008-02-22T11:02:00Z"}, "message": "re PR c++/35282 (Template specialization rejected)\n\n/testsuite\n2008-02-22  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR c++/35282\n\t* g++.dg/template/nontype17.C: Add.\n\n/cp\n2008-02-22  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR c++/35282\n\tRevert:\n\t2008-02-14  Paolo Carlini  <pcarlini@suse.de>\n\n        PR c++/28743\n        * pt.c (determine_specialization): In case of function templates,\n\twhen the type of DECL does not match FN there is no match.\n\n/testsuite\n2008-02-22  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR c++/35282\n\tRevert:\n\t2008-02-14  Paolo Carlini  <pcarlini@suse.de>\n\n        PR c++/28743\n\t* g++.dg/template/nontype17.C: New.\n        * g++.dg/template/nontype16.C: Add error.\n\nFrom-SVN: r132543", "tree": {"sha": "fb823f930efc33f1a9a8d837229a9125f51c63f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb823f930efc33f1a9a8d837229a9125f51c63f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/54062fc0da3a1009eb0f53e899fb44d8b7b4a177", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54062fc0da3a1009eb0f53e899fb44d8b7b4a177", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54062fc0da3a1009eb0f53e899fb44d8b7b4a177", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54062fc0da3a1009eb0f53e899fb44d8b7b4a177/comments", "author": null, "committer": null, "parents": [{"sha": "4af63337bebe68e3010849286d45a0341dbb1081", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4af63337bebe68e3010849286d45a0341dbb1081", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4af63337bebe68e3010849286d45a0341dbb1081"}], "stats": {"total": 42, "additions": 35, "deletions": 7}, "files": [{"sha": "19c34ba5cfa81f9249ab7548cb261a42d3ed3314", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54062fc0da3a1009eb0f53e899fb44d8b7b4a177/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54062fc0da3a1009eb0f53e899fb44d8b7b4a177/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=54062fc0da3a1009eb0f53e899fb44d8b7b4a177", "patch": "@@ -1,3 +1,13 @@\n+2008-02-22  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR c++/35282\n+\tRevert:\n+\t2008-02-14  Paolo Carlini  <pcarlini@suse.de>\n+\n+        PR c++/28743\n+        * pt.c (determine_specialization): In case of function templates,\n+\twhen the type of DECL does not match FN there is no match.\n+\n 2008-02-22  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n \n \tPR c/19999"}, {"sha": "2a54986c551df6579efe4b68a12153ad2f54ad02", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54062fc0da3a1009eb0f53e899fb44d8b7b4a177/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54062fc0da3a1009eb0f53e899fb44d8b7b4a177/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=54062fc0da3a1009eb0f53e899fb44d8b7b4a177", "patch": "@@ -1563,9 +1563,12 @@ determine_specialization (tree template_id,\n \t     no partial specializations of functions.  Therefore, if\n \t     the type of DECL does not match FN, there is no\n \t     match.  */\n-\t  if (tsk == tsk_template\n-\t      && !compparms (fn_arg_types, decl_arg_types))\n-\t    continue;\n+\t  if (tsk == tsk_template)\n+\t    {\n+\t      if (compparms (fn_arg_types, decl_arg_types))\n+\t\tcandidates = tree_cons (NULL_TREE, fn, candidates);\n+\t      continue;\n+\t    }\n \n \t  /* See whether this function might be a specialization of this\n \t     template.  */"}, {"sha": "053949b98c24f31893e52809a2caf9dbc04c367a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54062fc0da3a1009eb0f53e899fb44d8b7b4a177/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54062fc0da3a1009eb0f53e899fb44d8b7b4a177/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=54062fc0da3a1009eb0f53e899fb44d8b7b4a177", "patch": "@@ -1,3 +1,18 @@\n+2008-02-22  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR c++/35282\n+\t* g++.dg/template/nontype17.C: Add.\n+\n+2008-02-22  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR c++/35282\n+\tRevert:\n+\t2008-02-14  Paolo Carlini  <pcarlini@suse.de>\n+\n+        PR c++/28743\n+\t* g++.dg/template/nontype17.C: New.\n+        * g++.dg/template/nontype16.C: Add error.\n+\n 2008-02-22  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n \n \tPR c/19999"}, {"sha": "36d1e9564a0948a33bbf485132cfe3baa199af74", "filename": "gcc/testsuite/g++.dg/template/nontype16.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54062fc0da3a1009eb0f53e899fb44d8b7b4a177/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54062fc0da3a1009eb0f53e899fb44d8b7b4a177/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype16.C?ref=54062fc0da3a1009eb0f53e899fb44d8b7b4a177", "patch": "@@ -5,5 +5,5 @@ template<int> struct A\n     template<typename> void foo();\n };\n \n-template<> template<struct T> void A<0>::foo() {} // { dg-error \"not a valid type|match\" }\n+template<> template<struct T> void A<0>::foo() {} // { dg-error \"not a valid type\" }\n  "}, {"sha": "f3a4480c9e337bc44ebe03576dc6e32e368346bb", "filename": "gcc/testsuite/g++.dg/template/nontype17.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54062fc0da3a1009eb0f53e899fb44d8b7b4a177/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54062fc0da3a1009eb0f53e899fb44d8b7b4a177/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype17.C?ref=54062fc0da3a1009eb0f53e899fb44d8b7b4a177", "patch": "@@ -1,8 +1,8 @@\n-// PR c++/28743\n+// PR c++/35282\n \n template<int> struct A\n {\n-    template<typename> void foo();\n+    template<int> void foo();\n };\n \n-template<int> template<typename> void A<0>::foo() {} // { dg-error \"match\" }\n+template<> template<int> void A<0>::foo() {}"}]}