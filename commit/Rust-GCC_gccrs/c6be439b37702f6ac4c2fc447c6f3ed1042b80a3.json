{"sha": "c6be439b37702f6ac4c2fc447c6f3ed1042b80a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzZiZTQzOWIzNzcwMmY2YWM0YzJmYzQ0N2M2ZjNlZDEwNDJiODBhMw==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2020-09-28T06:53:01Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2020-10-01T01:04:48Z"}, "message": "[RS6000] -mno-minimal-toc vs. power10 pcrelative\n\nWe've had this hack in the libgcc config to build libgcc with\n-mcmodel=small for powerpc64 for a long time.  It wouldn't be a bad\nthing if someone who knows the multilib machinery well could arrange\nfor -mcmodel=small to be passed just for ppc64 when building for\nearlier than power10.  But for now, make -mno-minimal-toc do nothing\nwhen pcrel.  Which will do the right thing for any project that has\ncopied libgcc's trick.\n\nWe want this if configuring using --with-cpu=power10 to build a\npower10 pcrel libgcc.  --mcmodel=small turns off pcrel.\n\ngcc/\n\t* config/rs6000/linux64.h (SUBSUBTARGET_OVERRIDE_OPTIONS): Don't\n\tset -mcmodel=small for -mno-minimal-toc when pcrel.\nlibgcc/\n\t* config/rs6000/t-linux: Document purpose of -mno-minimal-toc.", "tree": {"sha": "5f9cec57d320243058ebfe2b6b5e13b51555743c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f9cec57d320243058ebfe2b6b5e13b51555743c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c6be439b37702f6ac4c2fc447c6f3ed1042b80a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6be439b37702f6ac4c2fc447c6f3ed1042b80a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6be439b37702f6ac4c2fc447c6f3ed1042b80a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6be439b37702f6ac4c2fc447c6f3ed1042b80a3/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf7dae01734eea0dfb4c387e4cd40e1f9a682f56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf7dae01734eea0dfb4c387e4cd40e1f9a682f56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf7dae01734eea0dfb4c387e4cd40e1f9a682f56"}], "stats": {"total": 24, "additions": 19, "deletions": 5}, "files": [{"sha": "5c9f8e3d7afba0f3115c46c4bb582f4b054876af", "filename": "gcc/config/rs6000/linux64.h", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6be439b37702f6ac4c2fc447c6f3ed1042b80a3/gcc%2Fconfig%2Frs6000%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6be439b37702f6ac4c2fc447c6f3ed1042b80a3/gcc%2Fconfig%2Frs6000%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinux64.h?ref=c6be439b37702f6ac4c2fc447c6f3ed1042b80a3", "patch": "@@ -132,20 +132,29 @@ extern int dot_symbols;\n \t  if ((rs6000_isa_flags & OPTION_MASK_POWERPC64) == 0)\t\\\n \t    {\t\t\t\t\t\t\t\\\n \t      rs6000_isa_flags |= OPTION_MASK_POWERPC64;\t\\\n-\t      error (\"%<-m64%> requires a PowerPC64 cpu\");\t\t\\\n+\t      error (\"%<-m64%> requires a PowerPC64 cpu\");\t\\\n \t    }\t\t\t\t\t\t\t\\\n+\t  if (!global_options_set.x_rs6000_current_cmodel)\t\\\n+\t    SET_CMODEL (CMODEL_MEDIUM);\t\t\t\t\\\n \t  if ((rs6000_isa_flags_explicit\t\t\t\\\n \t       & OPTION_MASK_MINIMAL_TOC) != 0)\t\t\t\\\n \t    {\t\t\t\t\t\t\t\\\n \t      if (global_options_set.x_rs6000_current_cmodel\t\\\n \t\t  && rs6000_current_cmodel != CMODEL_SMALL)\t\\\n \t\terror (\"%<-mcmodel incompatible with other toc options%>\"); \\\n-\t      SET_CMODEL (CMODEL_SMALL);\t\t\t\\\n+\t      if (TARGET_MINIMAL_TOC)\t\t\t\t\\\n+\t\tSET_CMODEL (CMODEL_SMALL);\t\t\t\\\n+\t      else if (TARGET_PCREL\t\t\t\t\\\n+\t\t       || (PCREL_SUPPORTED_BY_OS\t\t\\\n+\t\t\t   && (rs6000_isa_flags_explicit\t\\\n+\t\t\t       & OPTION_MASK_PCREL) == 0))\t\\\n+\t\t/* Ignore -mno-minimal-toc.  */\t\t\t\\\n+\t\t;\t\t\t\t\t\t\\\n+\t      else\t\t\t\t\t\t\\\n+\t\tSET_CMODEL (CMODEL_SMALL);\t\t\t\\\n \t    }\t\t\t\t\t\t\t\\\n \t  else\t\t\t\t\t\t\t\\\n \t    {\t\t\t\t\t\t\t\\\n-\t      if (!global_options_set.x_rs6000_current_cmodel)\t\\\n-\t\tSET_CMODEL (CMODEL_MEDIUM);\t\t\t\\\n \t      if (rs6000_current_cmodel != CMODEL_SMALL)\t\\\n \t\t{\t\t\t\t\t\t\\\n \t\t  if (!global_options_set.x_TARGET_NO_FP_IN_TOC) \\"}, {"sha": "ed821947b66c2f7965db1986ef270420a2b7723c", "filename": "libgcc/config/rs6000/t-linux", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6be439b37702f6ac4c2fc447c6f3ed1042b80a3/libgcc%2Fconfig%2Frs6000%2Ft-linux", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6be439b37702f6ac4c2fc447c6f3ed1042b80a3/libgcc%2Fconfig%2Frs6000%2Ft-linux", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Ft-linux?ref=c6be439b37702f6ac4c2fc447c6f3ed1042b80a3", "patch": "@@ -1,3 +1,8 @@\n SHLIB_MAPFILES += $(srcdir)/config/rs6000/libgcc-glibc.ver\n \n-HOST_LIBGCC2_CFLAGS += -mlong-double-128 -mno-minimal-toc\n+HOST_LIBGCC2_CFLAGS += -mlong-double-128\n+\n+# This is a way of selecting -mcmodel=small for ppc64, which gives\n+# smaller and faster libgcc code.  Directly specifying -mcmodel=small\n+# would need to take into account targets for which -mcmodel is invalid.\n+HOST_LIBGCC2_CFLAGS += -mno-minimal-toc"}]}