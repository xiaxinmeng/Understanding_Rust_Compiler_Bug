{"sha": "462e6f9a932a44ca73715dc5c2960e5b332f63f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDYyZTZmOWE5MzJhNDRjYTczNzE1ZGM1YzI5NjBlNWIzMzJmNjNmNw==", "commit": {"author": {"name": "Sylvia Taylor", "email": "sylvia.taylor@arm.com", "date": "2019-07-22T16:21:17Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2019-07-22T16:21:17Z"}, "message": "[aarch64]: add usra and ssra combine patterns\n\nThis patch adds support to combine:\n\n1) ushr and add into usra, example:\n\nushr    v0.16b, v0.16b, 2\nadd     v0.16b, v0.16b, v2.16b\n---\nusra    v2.16b, v0.16b, 2\n\n2) sshr and add into ssra, example:\n\nsshr    v1.16b, v1.16b, 2\nadd     v1.16b, v1.16b, v3.16b\n---\nssra    v3.16b, v1.16b, 2\n\nCommitted on behalf of Sylvia Taylor <sylvia.taylor@arm.com>.\nReviewed-by: <James.greenhalgh@arm.com>\n\ngcc/ChangeLog:\n\n\n        * config/aarch64/aarch64-simd.md\n        (*aarch64_simd_sra<mode>): New.\n        * config/aarch64/iterators.md\n        (SHIFTRT): New iterator.\n        (sra_op): New attribute.\n\ngcc/testsuite/ChangeLog:\n\n        * gcc.target/aarch64/simd/ssra.c: New test.\n        * gcc.target/aarch64/simd/usra.c: New test.\n\nFrom-SVN: r273703", "tree": {"sha": "68bce4e33c455b34662b665581dbed6cc7d4634d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68bce4e33c455b34662b665581dbed6cc7d4634d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/462e6f9a932a44ca73715dc5c2960e5b332f63f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/462e6f9a932a44ca73715dc5c2960e5b332f63f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/462e6f9a932a44ca73715dc5c2960e5b332f63f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/462e6f9a932a44ca73715dc5c2960e5b332f63f7/comments", "author": null, "committer": null, "parents": [{"sha": "310b5fb79316511295c04f956f4c6630437ba204", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/310b5fb79316511295c04f956f4c6630437ba204", "html_url": "https://github.com/Rust-GCC/gccrs/commit/310b5fb79316511295c04f956f4c6630437ba204"}], "stats": {"total": 102, "additions": 102, "deletions": 0}, "files": [{"sha": "faa3bde229565bf7a83e6cf902166619cac1c6ce", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/462e6f9a932a44ca73715dc5c2960e5b332f63f7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/462e6f9a932a44ca73715dc5c2960e5b332f63f7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=462e6f9a932a44ca73715dc5c2960e5b332f63f7", "patch": "@@ -1,3 +1,11 @@\n+2019-07-22  Sylvia Taylor  <sylvia.taylor@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md\n+\t(*aarch64_simd_sra<mode>): New.\n+\t* config/aarch64/iterators.md\n+\t(SHIFTRT): New iterator.\n+\t(sra_op): New attribute.\n+\n 2019-07-22  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n \n \t* config/msp430/msp430.c (msp430_preserve_reg_p): Don't save"}, {"sha": "c6ccc99a2aa673102dc756cb7b5de1f859390240", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/462e6f9a932a44ca73715dc5c2960e5b332f63f7/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/462e6f9a932a44ca73715dc5c2960e5b332f63f7/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=462e6f9a932a44ca73715dc5c2960e5b332f63f7", "patch": "@@ -986,6 +986,18 @@\n   [(set_attr \"type\" \"neon_shift_imm<q>\")]\n )\n \n+(define_insn \"*aarch64_simd_sra<mode>\"\n+ [(set (match_operand:VDQ_I 0 \"register_operand\" \"=w\")\n+\t(plus:VDQ_I\n+\t   (SHIFTRT:VDQ_I\n+\t\t(match_operand:VDQ_I 1 \"register_operand\" \"w\")\n+\t\t(match_operand:VDQ_I 2 \"aarch64_simd_rshift_imm\" \"Dr\"))\n+\t   (match_operand:VDQ_I 3 \"register_operand\" \"0\")))]\n+  \"TARGET_SIMD\"\n+  \"<sra_op>sra\\t%0.<Vtype>, %1.<Vtype>, %2\"\n+  [(set_attr \"type\" \"neon_shift_acc<q>\")]\n+)\n+\n (define_insn \"aarch64_simd_imm_shl<mode>\"\n  [(set (match_operand:VDQ_I 0 \"register_operand\" \"=w\")\n        (ashift:VDQ_I (match_operand:VDQ_I 1 \"register_operand\" \"w\")"}, {"sha": "198fc5dda3f14ca20e88a4e7c9527be34d04542c", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/462e6f9a932a44ca73715dc5c2960e5b332f63f7/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/462e6f9a932a44ca73715dc5c2960e5b332f63f7/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=462e6f9a932a44ca73715dc5c2960e5b332f63f7", "patch": "@@ -1169,6 +1169,8 @@\n ;; This code iterator allows the shifts supported in arithmetic instructions\n (define_code_iterator ASHIFT [ashift ashiftrt lshiftrt])\n \n+(define_code_iterator SHIFTRT [ashiftrt lshiftrt])\n+\n ;; Code iterator for logical operations\n (define_code_iterator LOGICAL [and ior xor])\n \n@@ -1351,6 +1353,9 @@\n (define_code_attr shift [(ashift \"lsl\") (ashiftrt \"asr\")\n \t\t\t (lshiftrt \"lsr\") (rotatert \"ror\")])\n \n+;; Op prefix for shift right and accumulate.\n+(define_code_attr sra_op [(ashiftrt \"s\") (lshiftrt \"u\")])\n+\n ;; Map shift operators onto underlying bit-field instructions\n (define_code_attr bfshift [(ashift \"ubfiz\") (ashiftrt \"sbfx\")\n \t\t\t   (lshiftrt \"ubfx\") (rotatert \"extr\")])"}, {"sha": "2b3e4770fb7de796d243e24a8a3f74d9b4bf6f33", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/462e6f9a932a44ca73715dc5c2960e5b332f63f7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/462e6f9a932a44ca73715dc5c2960e5b332f63f7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=462e6f9a932a44ca73715dc5c2960e5b332f63f7", "patch": "@@ -1,3 +1,8 @@\n+2019-07-22  Sylvia Taylor  <sylvia.taylor@arm.com>\n+\n+\t* gcc.target/aarch64/simd/ssra.c: New test.\n+\t* gcc.target/aarch64/simd/usra.c: New test.\n+\n 2019-07-22  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n \n \t* gcc.target/msp430/isr-push-pop-main.c: New test."}, {"sha": "e9c2e04c0b88ac18be81f4ee8a872e6829af9db2", "filename": "gcc/testsuite/gcc.target/aarch64/simd/ssra.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/462e6f9a932a44ca73715dc5c2960e5b332f63f7/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fssra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/462e6f9a932a44ca73715dc5c2960e5b332f63f7/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fssra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fssra.c?ref=462e6f9a932a44ca73715dc5c2960e5b332f63f7", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do compile { target aarch64*-*-* } } */\n+/* { dg-options \"-O3\" } */\n+/* { dg-skip-if \"\" { *-*-* } {\"*sve*\"} {\"\"} } */\n+\n+#include <stdint.h>\n+\n+#define SSRA(func, vtype, n)\t\t\t\t\\\n+\tvoid func ()\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\\\n+\t    int i;\t\t\t\t\t\\\n+\t    for (i = 0; i < n; i++)\t\t\t\\\n+\t    {\t\t\t\t\t\t\\\n+\t\ts1##vtype[i] += s2##vtype[i] >> 2;\t\\\n+\t    }\t\t\t\t\t\t\\\n+\t}\n+\n+#define TEST_VDQ_I_MODES(FUNC)\t\t\t\t\\\n+\tFUNC (test_v8qi_v16qi, _char, 16)\t\t\\\n+\tFUNC (test_v4hi_v8h1, _short, 8)\t\t\\\n+\tFUNC (test_v2si_v4si, _int, 4)\t\t\t\\\n+\tFUNC (test_v2di, _ll, 2)\t\t\t\\\n+\n+int8_t s1_char[16], s2_char[16];\n+int16_t s1_short[8], s2_short[8];\n+int32_t s1_int[4], s2_int[4];\n+int64_t s1_ll[2], s2_ll[2];\n+\n+TEST_VDQ_I_MODES(SSRA)\n+\n+/* { dg-final { scan-assembler \"ssra\" } } */\n+/* { dg-final { scan-assembler-not \"sshr\" } } */\n+\n+/* { dg-final { scan-assembler-times {ssra\\tv[0-9]+\\.16b, v[0-9]+\\.16b, [0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {ssra\\tv[0-9]+\\.8h, v[0-9]+\\.8h, [0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {ssra\\tv[0-9]+\\.4s, v[0-9]+\\.4s, [0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {ssra\\tv[0-9]+\\.2d, v[0-9]+\\.2d, [0-9]+} 1 } } */"}, {"sha": "4e7446dfa4cbf48bd7154ab5fdb7ff114a2466fd", "filename": "gcc/testsuite/gcc.target/aarch64/simd/usra.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/462e6f9a932a44ca73715dc5c2960e5b332f63f7/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fusra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/462e6f9a932a44ca73715dc5c2960e5b332f63f7/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fusra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fusra.c?ref=462e6f9a932a44ca73715dc5c2960e5b332f63f7", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do compile { target aarch64*-*-* } } */\n+/* { dg-options \"-O3\" } */\n+/* { dg-skip-if \"\" { *-*-* } {\"*sve*\"} {\"\"} } */\n+\n+#include <stdint.h>\n+\n+#define USRA(func, vtype, n)\t\t\t\t\\\n+\tvoid func ()\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\\\n+\t    int i;\t\t\t\t\t\\\n+\t    for (i = 0; i < n; i++)\t\t\t\\\n+\t    {\t\t\t\t\t\t\\\n+\t\tu1##vtype[i] += u2##vtype[i] >> 2;\t\\\n+\t    }\t\t\t\t\t\t\\\n+\t}\n+\n+#define TEST_VDQ_I_MODES(FUNC)\t\t\t\t\\\n+\tFUNC (test_v8qi_v16qi, _char, 16)\t\t\\\n+\tFUNC (test_v4hi_v8h1, _short, 8)\t\t\\\n+\tFUNC (test_v2si_v4si, _int, 4)\t\t\t\\\n+\tFUNC (test_v2di, _ll, 2)\t\t\t\\\n+\n+uint8_t u1_char[16], u2_char[16];\n+uint16_t u1_short[8], u2_short[8];\n+uint32_t u1_int[4], u2_int[4];\n+uint64_t u1_ll[2], u2_ll[2];\n+\n+TEST_VDQ_I_MODES(USRA)\n+\n+/* { dg-final { scan-assembler \"usra\" } } */\n+/* { dg-final { scan-assembler-not \"ushr\" } } */\n+\n+/* { dg-final { scan-assembler-times {usra\\tv[0-9]+\\.16b, v[0-9]+\\.16b, [0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {usra\\tv[0-9]+\\.8h, v[0-9]+\\.8h, [0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {usra\\tv[0-9]+\\.4s, v[0-9]+\\.4s, [0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {usra\\tv[0-9]+\\.2d, v[0-9]+\\.2d, [0-9]+} 1 } } */"}]}