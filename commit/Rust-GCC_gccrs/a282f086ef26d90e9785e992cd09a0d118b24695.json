{"sha": "a282f086ef26d90e9785e992cd09a0d118b24695", "node_id": "C_kwDOANBUbNoAKGEyODJmMDg2ZWYyNmQ5MGU5Nzg1ZTk5MmNkMDlhMGQxMThiMjQ2OTU", "commit": {"author": {"name": "Hu, Lin1", "email": "lin1.hu@intel.com", "date": "2022-09-13T08:28:54Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2022-09-23T05:28:12Z"}, "message": "i386: Optimize code generation of __mm256_zextsi128_si256(__mm_set1_epi8(-1))\n\ngcc/ChangeLog:\n\n\tPR target/94962\n\t* config/i386/constraints.md (BH): New define_constraint.\n\t* config/i386/i386.cc (standard_sse_constant_p): Add return\n\t3/4 when operand matches new predicate.\n\t(standard_sse_constant_opcode): Add new alternative branch to\n\treturn \"vpcmpeqd\".\n\t* config/i386/predicates.md\n\t(vector_all_ones_zero_extend_half_operand): New define_predicate.\n\t(vector_all_ones_zero_extend_quarter_operand): Ditto.\n\t* config/i386/sse.md: Add constraint to insn \"mov<mode>_internal\".\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/94962\n\t* gcc.target/i386/avx256-unaligned-load-1.c: Modify test.\n\t* gcc.target/i386/avx256-unaligned-store-1.c: Ditto.\n\t* gcc.target/i386/avx256-unaligned-store-2.c: Ditto.\n\t* gcc.target/i386/avx256-unaligned-store-3.c: Ditto.\n\t* gcc.target/i386/pr94962-1.c: New test.\n\t* gcc.target/i386/pr94962-2.c: Ditto.\n\t* gcc.target/i386/pr94962-3.c: Ditto.\n\t* gcc.target/i386/pr94962-4.c: Ditto.", "tree": {"sha": "e43e7408f14a7fb49518ab2031ef81edbbca40ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e43e7408f14a7fb49518ab2031ef81edbbca40ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a282f086ef26d90e9785e992cd09a0d118b24695", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a282f086ef26d90e9785e992cd09a0d118b24695", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a282f086ef26d90e9785e992cd09a0d118b24695", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a282f086ef26d90e9785e992cd09a0d118b24695/comments", "author": {"login": "Rejur", "id": 27907959, "node_id": "MDQ6VXNlcjI3OTA3OTU5", "avatar_url": "https://avatars.githubusercontent.com/u/27907959?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rejur", "html_url": "https://github.com/Rejur", "followers_url": "https://api.github.com/users/Rejur/followers", "following_url": "https://api.github.com/users/Rejur/following{/other_user}", "gists_url": "https://api.github.com/users/Rejur/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rejur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rejur/subscriptions", "organizations_url": "https://api.github.com/users/Rejur/orgs", "repos_url": "https://api.github.com/users/Rejur/repos", "events_url": "https://api.github.com/users/Rejur/events{/privacy}", "received_events_url": "https://api.github.com/users/Rejur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b449dcd84334068c769a2f427812dadb95e61de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b449dcd84334068c769a2f427812dadb95e61de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b449dcd84334068c769a2f427812dadb95e61de"}], "stats": {"total": 248, "additions": 235, "deletions": 13}, "files": [{"sha": "95b2b142d417b92eb15a44f817f2d6dfc98b4df3", "filename": "gcc/config/i386/constraints.md", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a282f086ef26d90e9785e992cd09a0d118b24695/gcc%2Fconfig%2Fi386%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a282f086ef26d90e9785e992cd09a0d118b24695/gcc%2Fconfig%2Fi386%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fconstraints.md?ref=a282f086ef26d90e9785e992cd09a0d118b24695", "patch": "@@ -168,6 +168,9 @@\n ;;  z  Constant call address operand.\n ;;  C  Integer SSE constant with all bits set operand.\n ;;  F  Floating-point SSE constant with all bits set operand.\n+;;  H  Integer SSE constant that is 128/256bit all ones\n+;;     and zero-extand to 256/512bit, or 128bit all ones\n+;;     and zero-extend to 512bit.\n ;;  M  x86-64 memory operand.\n \n (define_constraint \"Bf\"\n@@ -233,6 +236,11 @@\n   (and (match_test \"TARGET_SSE\")\n        (match_operand 0 \"float_vector_all_ones_operand\")))\n \n+(define_constraint \"BH\"\n+  \"@internal integer constant with last half/quarter bits set operand.\"\n+  (ior (match_operand 0 \"vector_all_ones_zero_extend_half_operand\")\n+       (match_operand 0 \"vector_all_ones_zero_extend_quarter_operand\")))\n+\n ;; NB: Similar to 'm', but don't use define_memory_constraint on x86-64\n ;; to prevent LRA from converting the operand to the form '(mem (reg X))'\n ;; where X is a base register."}, {"sha": "ca799da5d7e6e5399ff2078f1c189509b3bb63df", "filename": "gcc/config/i386/i386.cc", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a282f086ef26d90e9785e992cd09a0d118b24695/gcc%2Fconfig%2Fi386%2Fi386.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a282f086ef26d90e9785e992cd09a0d118b24695/gcc%2Fconfig%2Fi386%2Fi386.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.cc?ref=a282f086ef26d90e9785e992cd09a0d118b24695", "patch": "@@ -5186,7 +5186,8 @@ standard_80387_constant_rtx (int idx)\n \t\t\t\t       XFmode);\n }\n \n-/* Return 1 if X is all bits 0 and 2 if X is all bits 1\n+/* Return 1 if X is all bits 0, 2 if X is all bits 1\n+   and 3 if X is all bits 1 with zero extend\n    in supported SSE/AVX vector mode.  */\n \n int\n@@ -5234,6 +5235,10 @@ standard_sse_constant_p (rtx x, machine_mode pred_mode)\n \t}\n     }\n \n+  if (vector_all_ones_zero_extend_half_operand (x, mode)\n+      || vector_all_ones_zero_extend_quarter_operand (x, mode))\n+    return 3;\n+\n   return 0;\n }\n \n@@ -5341,6 +5346,25 @@ standard_sse_constant_opcode (rtx_insn *insn, rtx *operands)\n \t  gcc_unreachable ();\n \t}\n    }\n+  else if (vector_all_ones_zero_extend_half_operand (x, mode))\n+    {\n+      if (GET_MODE_SIZE (mode) == 64)\n+\t{\n+\t  gcc_assert (TARGET_AVX512F);\n+\t  return \"vpcmpeqd \\t %t0, %t0, %t0\";\n+\t}\n+      else if (GET_MODE_SIZE (mode) == 32)\n+\t{\n+\t  gcc_assert (TARGET_AVX);\n+\t  return \"vpcmpeqd \\t %x0, %x0, %x0\";\n+\t}\n+      gcc_unreachable ();\n+    }\n+  else if (vector_all_ones_zero_extend_quarter_operand (x, mode))\n+    {\n+      gcc_assert (TARGET_AVX512F);\n+      return \"vpcmpeqd \\t %x0, %x0, %x0\";\n+    }\n \n   gcc_unreachable ();\n }"}, {"sha": "655eabf793b1e3ef83828586a17afacb7afa822f", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a282f086ef26d90e9785e992cd09a0d118b24695/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a282f086ef26d90e9785e992cd09a0d118b24695/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=a282f086ef26d90e9785e992cd09a0d118b24695", "patch": "@@ -1159,6 +1159,55 @@\n        (match_test \"INTEGRAL_MODE_P (GET_MODE (op))\")\n        (match_test \"op == CONSTM1_RTX (GET_MODE (op))\")))\n \n+/* Return true if operand is an 128/256bit all ones vector\n+   that zero-extends to 256/512bit.  */\n+(define_predicate \"vector_all_ones_zero_extend_half_operand\"\n+  (match_code \"const_vector\")\n+{\n+  mode = GET_MODE (op);\n+  if (GET_MODE_CLASS (mode) != MODE_VECTOR_INT\n+      || (GET_MODE_SIZE (mode) != 32\n+\t  && GET_MODE_SIZE (mode) != 64))\n+    return false;\n+\n+  int nelts = CONST_VECTOR_NUNITS (op);\n+  for (int i = 0; i != nelts; i++)\n+    {\n+      rtx elt = CONST_VECTOR_ELT (op, i);\n+      if (i < nelts / 2\n+\t  && elt != CONSTM1_RTX (GET_MODE_INNER (mode)))\n+\treturn false;\n+      if (i >= nelts / 2\n+\t  && elt != CONST0_RTX (GET_MODE_INNER (mode)))\n+\treturn false;\n+    }\n+  return true;\n+})\n+\n+/* Return true if operand is an 128bit all ones vector\n+   that zero extends to 512bit.  */\n+(define_predicate \"vector_all_ones_zero_extend_quarter_operand\"\n+  (match_code \"const_vector\")\n+{\n+  mode = GET_MODE (op);\n+  if (GET_MODE_CLASS (mode) != MODE_VECTOR_INT\n+      || GET_MODE_SIZE (mode) != 64)\n+    return false;\n+\n+  int nelts = CONST_VECTOR_NUNITS (op);\n+  for (int i = 0; i != nelts; i++)\n+    {\n+      rtx elt = CONST_VECTOR_ELT (op, i);\n+      if (i < nelts / 4\n+\t  && elt != CONSTM1_RTX (GET_MODE_INNER (mode)))\n+\treturn false;\n+      if (i >= nelts / 4\n+\t  && elt != CONST0_RTX (GET_MODE_INNER (mode)))\n+\treturn false;\n+    }\n+  return true;\n+})\n+\n ; Return true when OP is operand acceptable for vector memory operand.\n ; Only AVX can have misaligned memory operand.\n (define_predicate \"vector_memory_operand\""}, {"sha": "5c1896351244ab20152f8e0d83c78d0c8070123d", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a282f086ef26d90e9785e992cd09a0d118b24695/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a282f086ef26d90e9785e992cd09a0d118b24695/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=a282f086ef26d90e9785e992cd09a0d118b24695", "patch": "@@ -1323,9 +1323,9 @@\n \n (define_insn \"mov<mode>_internal\"\n   [(set (match_operand:VMOVE 0 \"nonimmediate_operand\"\n-\t \"=v,v ,v ,m\")\n+\t \"=v,v ,v,v ,m\")\n \t(match_operand:VMOVE 1 \"nonimmediate_or_sse_const_operand\"\n-\t \" C,<sseconstm1>,vm,v\"))]\n+\t \" C,<sseconstm1>,BH,vm,v\"))]\n   \"TARGET_SSE\n    && (register_operand (operands[0], <MODE>mode)\n        || register_operand (operands[1], <MODE>mode))\n@@ -1343,7 +1343,7 @@\n       gcc_unreachable ();\n     }\n }\n-  [(set_attr \"type\" \"sselog1,sselog1,ssemov,ssemov\")\n+  [(set_attr \"type\" \"sselog1,sselog1,sselog1,ssemov,ssemov\")\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set (attr \"mode\")\n \t(cond [(match_test \"TARGET_AVX\")\n@@ -1354,7 +1354,7 @@\n \t       (and (match_test \"<MODE>mode == V2DFmode\")\n \t\t    (match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\"))\n \t\t (const_string \"V4SF\")\n-\t       (and (eq_attr \"alternative\" \"3\")\n+\t       (and (eq_attr \"alternative\" \"4\")\n \t\t    (match_test \"TARGET_SSE_TYPELESS_STORES\"))\n \t\t (const_string \"V4SF\")\n \t       (and (eq_attr \"alternative\" \"0\")"}, {"sha": "7115b0a9dde0dbb375a7aa5891a7f31d1bc8c7b4", "filename": "gcc/testsuite/gcc.target/i386/avx256-unaligned-load-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a282f086ef26d90e9785e992cd09a0d118b24695/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx256-unaligned-load-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a282f086ef26d90e9785e992cd09a0d118b24695/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx256-unaligned-load-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx256-unaligned-load-1.c?ref=a282f086ef26d90e9785e992cd09a0d118b24695", "patch": "@@ -14,6 +14,6 @@ avx_test (void)\n     c[i] = a[i] * b[i+3];\n }\n \n-/* { dg-final { scan-assembler-not \"vmovups\\[^\\n\\r]*movv8sf_internal/2\" } } */\n-/* { dg-final { scan-assembler \"movv4sf_internal/2\" } } */\n+/* { dg-final { scan-assembler-not \"vmovups\\[^\\n\\r]*movv8sf_internal/3\" } } */\n+/* { dg-final { scan-assembler \"movv4sf_internal/3\" } } */\n /* { dg-final { scan-assembler \"vinsertf128\" } } */"}, {"sha": "4c713959df2debdd21ffc3efd33e47f2fdf2842c", "filename": "gcc/testsuite/gcc.target/i386/avx256-unaligned-store-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a282f086ef26d90e9785e992cd09a0d118b24695/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx256-unaligned-store-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a282f086ef26d90e9785e992cd09a0d118b24695/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx256-unaligned-store-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx256-unaligned-store-1.c?ref=a282f086ef26d90e9785e992cd09a0d118b24695", "patch": "@@ -17,6 +17,6 @@ avx_test (void)\n     d[i] = c[i] * 20.0;\n }\n \n-/* { dg-final { scan-assembler-not \"vmovups.*movv8sf_internal/3\" } } */\n-/* { dg-final { scan-assembler \"vmovups.*movv4sf_internal/3\" } } */\n+/* { dg-final { scan-assembler-not \"vmovups.*movv8sf_internal/4\" } } */\n+/* { dg-final { scan-assembler \"vmovups.*movv4sf_internal/4\" } } */\n /* { dg-final { scan-assembler \"vextractf128\" } } */"}, {"sha": "4978c37f526cd2052ab579200bca51810a0e800f", "filename": "gcc/testsuite/gcc.target/i386/avx256-unaligned-store-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a282f086ef26d90e9785e992cd09a0d118b24695/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx256-unaligned-store-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a282f086ef26d90e9785e992cd09a0d118b24695/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx256-unaligned-store-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx256-unaligned-store-2.c?ref=a282f086ef26d90e9785e992cd09a0d118b24695", "patch": "@@ -23,6 +23,6 @@ avx_test (void)\n     }\n }\n \n-/* { dg-final { scan-assembler-not \"vmovdqu.*movv32qi_internal/3\" } } */\n-/* { dg-final { scan-assembler \"vmovdqu.*movv16qi_internal/3\" } } */\n+/* { dg-final { scan-assembler-not \"vmovdqu.*movv32qi_internal/4\" } } */\n+/* { dg-final { scan-assembler \"vmovdqu.*movv16qi_internal/4\" } } */\n /* { dg-final { scan-assembler \"vextract.128\" } } */"}, {"sha": "f909099bcb1a44e2e0e9f3720d5055786a17c0d9", "filename": "gcc/testsuite/gcc.target/i386/avx256-unaligned-store-3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a282f086ef26d90e9785e992cd09a0d118b24695/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx256-unaligned-store-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a282f086ef26d90e9785e992cd09a0d118b24695/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx256-unaligned-store-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx256-unaligned-store-3.c?ref=a282f086ef26d90e9785e992cd09a0d118b24695", "patch": "@@ -17,6 +17,6 @@ avx_test (void)\n     d[i] = c[i] * 20.0;\n }\n \n-/* { dg-final { scan-assembler-not \"vmovupd.*movv4df_internal/3\" } } */\n-/* { dg-final { scan-assembler \"vmovupd.*movv2df_internal/3\" } } */\n+/* { dg-final { scan-assembler-not \"vmovupd.*movv4df_internal/4\" } } */\n+/* { dg-final { scan-assembler \"vmovupd.*movv2df_internal/4\" } } */\n /* { dg-final { scan-assembler \"vextractf128\" } } */"}, {"sha": "e3b01249421cd9f0aa430f84f7febe619401298f", "filename": "gcc/testsuite/gcc.target/i386/pr94962-1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a282f086ef26d90e9785e992cd09a0d118b24695/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr94962-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a282f086ef26d90e9785e992cd09a0d118b24695/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr94962-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr94962-1.c?ref=a282f086ef26d90e9785e992cd09a0d118b24695", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx\" } */\n+/* { dg-final { scan-assembler-not \"vmovdqa\" } } */\n+/* { dg-final { scan-assembler-times \"vpcmpeqd\\[ \\\\t\\]+%xmm\\[0-9\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+__m256i mask()\n+{\n+  return _mm256_zextsi128_si256(_mm_set1_epi8(-1));\n+}"}, {"sha": "4e10e927ba1976db495ee8538cde526efd389289", "filename": "gcc/testsuite/gcc.target/i386/pr94962-2.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a282f086ef26d90e9785e992cd09a0d118b24695/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr94962-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a282f086ef26d90e9785e992cd09a0d118b24695/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr94962-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr94962-2.c?ref=a282f086ef26d90e9785e992cd09a0d118b24695", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-final { scan-assembler-not \"vmovdqa\" } } */\n+/* { dg-final { scan-assembler-times \"vpcmpeqd\\[ \\\\t\\]+%xmm\\[0-9\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpcmpeqd\\[ \\\\t\\]+%ymm\\[0-9\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+__m512i mask1()\n+{\n+  return _mm512_zextsi128_si512(_mm_set1_epi8(-1));\n+}\n+\n+__m512i mask2()\n+{\n+  return _mm512_zextsi256_si512(_mm256_set1_epi8(-1));\n+}"}, {"sha": "8d0b99744350dca7b96016bcbd20d31eec9a0de2", "filename": "gcc/testsuite/gcc.target/i386/pr94962-3.c", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a282f086ef26d90e9785e992cd09a0d118b24695/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr94962-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a282f086ef26d90e9785e992cd09a0d118b24695/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr94962-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr94962-3.c?ref=a282f086ef26d90e9785e992cd09a0d118b24695", "patch": "@@ -0,0 +1,64 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-final { scan-assembler-not \"vmovdqa\" } } */\n+/* { dg-final { scan-assembler-times \"vpcmpeqd\\[ \\\\t\\]+%ymm\\[0-9\\]\" 4 } } */\n+\n+typedef long long __v8di __attribute__ ((__vector_size__ (64)));\n+typedef int __v16si __attribute__ ((__vector_size__ (64)));\n+typedef short __v32hi __attribute__ ((__vector_size__ (64)));\n+typedef char __v64qi __attribute__ ((__vector_size__ (64)));\n+typedef long long __m512i __attribute__ ((__vector_size__ (64), __may_alias__));\n+\n+__m512i\n+__attribute__ ((noinline, noclone))\n+foo1 ()\n+{\n+  return __extension__ (__m512i)(__v8di) { -1, -1, -1, -1,\n+\t\t\t\t\t   0, 0, 0, 0 };\n+}\n+\n+__m512i\n+__attribute__ ((noinline, noclone))\n+foo2 ()\n+{\n+  return __extension__ (__m512i)(__v16si) { -1, -1, -1, -1,\n+\t\t\t\t\t    -1, -1, -1, -1,\n+\t\t\t\t\t    0, 0, 0, 0,\n+\t\t\t\t\t    0, 0, 0, 0 };\n+}\n+\n+__m512i\n+__attribute__ ((noinline, noclone))\n+foo3 ()\n+{\n+  return __extension__ (__m512i)(__v32hi) { -1, -1, -1, -1,\n+\t\t\t\t\t    -1, -1, -1, -1,\n+\t\t\t\t\t    -1, -1, -1, -1,\n+\t\t\t\t\t    -1, -1, -1, -1,\n+\t\t\t\t\t    0, 0, 0, 0,\n+\t\t\t\t\t    0, 0, 0, 0,\n+\t\t\t\t\t    0, 0, 0, 0,\n+\t\t\t\t\t    0, 0, 0, 0 };\n+}\n+\n+__m512i\n+__attribute__ ((noinline, noclone))\n+foo4 ()\n+{\n+  return __extension__ (__m512i)(__v64qi) { -1, -1, -1, -1,\n+\t\t\t\t\t    -1, -1, -1, -1,\n+\t\t\t\t\t    -1, -1, -1, -1,\n+\t\t\t\t\t    -1, -1, -1, -1,\n+\t\t\t\t\t    -1, -1, -1, -1,\n+\t\t\t\t\t    -1, -1, -1, -1,\n+\t\t\t\t\t    -1, -1, -1, -1,\n+\t\t\t\t\t    -1, -1, -1, -1,\n+\t\t\t\t\t    0, 0, 0, 0,\n+\t\t\t\t\t    0, 0, 0, 0,\n+\t\t\t\t\t    0, 0, 0, 0,\n+\t\t\t\t\t    0, 0, 0, 0,\n+\t\t\t\t\t    0, 0, 0, 0,\n+\t\t\t\t\t    0, 0, 0, 0,\n+\t\t\t\t\t    0, 0, 0, 0,\n+\t\t\t\t\t    0, 0, 0, 0 };\n+}"}, {"sha": "5502c39910b504684b4375cabd64a3dcd7ffbec3", "filename": "gcc/testsuite/gcc.target/i386/pr94962-4.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a282f086ef26d90e9785e992cd09a0d118b24695/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr94962-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a282f086ef26d90e9785e992cd09a0d118b24695/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr94962-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr94962-4.c?ref=a282f086ef26d90e9785e992cd09a0d118b24695", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx\" } */\n+/* { dg-final { scan-assembler-not \"vmovdqa\" } } */\n+/* { dg-final { scan-assembler-times \"vpcmpeqd\\[ \\\\t\\]+%xmm\\[0-9\\]\" 4 } } */\n+\n+typedef long long __v4di __attribute__ ((__vector_size__ (32)));\n+typedef int __v8si __attribute__ ((__vector_size__ (32)));\n+typedef short __v16hi __attribute__ ((__vector_size__ (32)));\n+typedef char __v32qi __attribute__ ((__vector_size__ (32)));\n+typedef long long __m256i __attribute__ ((__vector_size__ (32), __may_alias__));\n+\n+__m256i\n+__attribute__ ((noinline, noclone))\n+foo1 ()\n+{\n+  return __extension__ (__m256i)(__v4di) { -1, -1, 0, 0 };\n+}\n+\n+__m256i\n+__attribute__ ((noinline, noclone))\n+foo2 ()\n+{\n+  return __extension__ (__m256i)(__v8si) { -1, -1, -1, -1,\n+\t\t\t\t\t    0, 0, 0, 0 };\n+}\n+\n+__m256i\n+__attribute__ ((noinline, noclone))\n+foo3 ()\n+{\n+  return __extension__ (__m256i)(__v16hi) { -1, -1, -1, -1,\n+\t\t\t\t\t    -1, -1, -1, -1,\n+\t\t\t\t\t    0, 0, 0, 0,\n+\t\t\t\t\t    0, 0, 0, 0 };\n+}\n+\n+__m256i\n+__attribute__ ((noinline, noclone))\n+foo4 ()\n+{\n+  return __extension__ (__m256i)(__v32qi) { -1, -1, -1, -1,\n+\t\t\t\t\t    -1, -1, -1, -1,\n+\t\t\t\t\t    -1, -1, -1, -1,\n+\t\t\t\t\t    -1, -1, -1, -1,\n+\t\t\t\t\t    0, 0, 0, 0,\n+\t\t\t\t\t    0, 0, 0, 0,\n+\t\t\t\t\t    0, 0, 0, 0,\n+\t\t\t\t\t    0, 0, 0, 0 };\n+}"}]}