{"sha": "9e0667cd3a217c480333130a07cdb9641eada30e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWUwNjY3Y2QzYTIxN2M0ODAzMzMxMzBhMDdjZGI5NjQxZWFkYTMwZQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2009-06-03T20:32:23Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2009-06-03T20:32:23Z"}, "message": "gfortran.texi: Add mixed-language programming...\n\n2009-06-03  Tobias Burnus  <burnus@net-b.de>\n\n        * gfortran.texi: Add mixed-language programming, mention\n        varying string lengths, some clean up of introduction parts.\n        * intrinsic.texi (instrinsic modules): Create @menu for\n        * subsections.\n        (ISO_C_BINDING): Support ISOCBINDING_INT_FAST128_T.\n        * libgfortran.h: Comment to rember to keep gfortran.texi in\n        * sync.\n        * iso-c-binding.def: Support ISOCBINDING_INT_FAST128_T.\n\nFrom-SVN: r148147", "tree": {"sha": "7f5ea447e16137fa61a0a68979fd04ffdc8ec384", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f5ea447e16137fa61a0a68979fd04ffdc8ec384"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e0667cd3a217c480333130a07cdb9641eada30e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e0667cd3a217c480333130a07cdb9641eada30e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e0667cd3a217c480333130a07cdb9641eada30e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e0667cd3a217c480333130a07cdb9641eada30e/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6bc7bc147769661decbc70e252ac09cccd374712", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bc7bc147769661decbc70e252ac09cccd374712", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bc7bc147769661decbc70e252ac09cccd374712"}], "stats": {"total": 606, "additions": 567, "deletions": 39}, "files": [{"sha": "19c415a0744b39a480b1d2bd027244174d87c1ca", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e0667cd3a217c480333130a07cdb9641eada30e/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e0667cd3a217c480333130a07cdb9641eada30e/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=9e0667cd3a217c480333130a07cdb9641eada30e", "patch": "@@ -1,3 +1,12 @@\n+2009-06-03  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* gfortran.texi: Add mixed-language programming, mention\n+\tvarying string lengths, some clean up of introduction parts.\n+\t* intrinsic.texi (instrinsic modules): Create @menu for subsections.\n+\t(ISO_C_BINDING): Support ISOCBINDING_INT_FAST128_T.\n+\t* libgfortran.h: Comment to rember to keep gfortran.texi in sync.\n+\t* iso-c-binding.def: Support ISOCBINDING_INT_FAST128_T.\n+\n 2009-06-03  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \t    Tobias Burnus  <burnus@net-b.de>\n "}, {"sha": "ab69c0aa3a6374e8e5b11dada3e0a917de82e753", "filename": "gcc/fortran/gfortran.texi", "status": "modified", "additions": 535, "deletions": 21, "changes": 556, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e0667cd3a217c480333130a07cdb9641eada30e/gcc%2Ffortran%2Fgfortran.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e0667cd3a217c480333130a07cdb9641eada30e/gcc%2Ffortran%2Fgfortran.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.texi?ref=9e0667cd3a217c480333130a07cdb9641eada30e", "patch": "@@ -182,6 +182,7 @@ Part I: Invoking GNU Fortran\n Part II: Language Reference\n * Fortran 2003 and 2008 status::  Fortran 2003 and 2008 features supported by GNU Fortran.\n * Compiler Characteristics::      KIND type parameters supported.\n+* Mixed-Language Programming::    Interoperability with C\n * Extensions::           Language extensions implemented by GNU Fortran.\n * Intrinsic Procedures:: Intrinsic procedures supported by GNU Fortran.\n * Intrinsic Modules::    Intrinsic modules supported by GNU Fortran.\n@@ -240,12 +241,10 @@ or alternative to, the unix @command{f95} command;\n @node About GNU Fortran\n @section About GNU Fortran\n \n-The GNU Fortran compiler is still in an early state of development.\n-It can generate code for most constructs and expressions,\n-but much work remains to be done.\n-\n-When the GNU Fortran compiler is finished,\n-it will do everything you expect from any decent compiler: \n+The GNU Fortran compiler supports the Fortran 77, 90 and 95 standards\n+completely, parts of the Fortran 2003 and Fortran 2008 standards, and\n+several vendor extensions. The development goal is to provide the\n+following features:\n \n @itemize @bullet\n @item\n@@ -504,7 +503,7 @@ The primary work remaining to be done on GNU Fortran falls into three\n categories: bug fixing (primarily regarding the treatment of invalid code\n and providing useful error messages), improving the compiler optimizations\n and the performance of compiled code, and extending the compiler to support\n-future standards---in particular, Fortran 2003.\n+future standards---in particular, Fortran 2003 and Fortran 2008.\n \n \n @c ---------------------------------------------------------------------\n@@ -515,6 +514,10 @@ future standards---in particular, Fortran 2003.\n @section Standards\n @cindex Standards\n \n+@menu\n+* Varying Length Character Strings::\n+@end menu\n+\n The GNU Fortran compiler implements\n ISO/IEC 1539:1997 (Fortran 95).  As such, it can also compile essentially all\n standard-compliant Fortran 90 and Fortran 77 programs.   It also supports\n@@ -528,13 +531,30 @@ of that standard is already provided; the current status of Fortran 2003\n support is reported in the @ref{Fortran 2003 status} section of the\n documentation.\n \n-The next version of the Fortran standard after Fortran 2003 is currently\n+The next version of the Fortran standard (Fortran 2008) is currently\n being developed and the GNU Fortran compiler supports some of its new\n features. This support is based on the latest draft of the standard\n (available from @url{http://www.nag.co.uk/sc22wg5/}) and no guarantee of\n future compatibility is made, as the final standard might differ from the\n draft. For more information, see the @ref{Fortran 2008 status} section.\n \n+Additionally, the GNU Fortran compilers supports the OpenMP specification\n+(version 3.0, @url{http://openmp.org/wp/openmp-specifications/}).\n+\n+@node Varying Length Character Strings\n+@subsection Varying Length Character Strings\n+@cindex Varying length character strings\n+@cindex Varying length strings\n+@cindex strings, varying length\n+\n+The Fortran 95 standard specifies in Part 2 (ISO/IEC 1539-2:2000)\n+varying length character strings. While GNU Fortran currently does not\n+support such strings directly, there exist two Fortran implementations\n+for them, which work with GNU Fortran. They can be found at\n+@uref{http://www.fortran.com/@/iso_varying_string.f95} and at\n+@uref{ftp://ftp.nag.co.uk/@/sc22wg5/@/ISO_VARYING_STRING/}.\n+\n+\n \n @c =====================================================================\n @c PART I: INVOCATION REFERENCE\n@@ -787,9 +807,8 @@ was used.\n @node Fortran 2003 status\n @section Fortran 2003 status\n \n-Although GNU Fortran focuses on implementing the Fortran 95\n-standard for the time being, a few Fortran 2003 features are currently\n-available.\n+GNU Fortran supports several Fortran 2003 features; an incomplete\n+list can be found below.\n \n @itemize\n @item \n@@ -1241,7 +1260,7 @@ the real part is initialized unless @code{CMPLX} is used. In all other\n cases, the BOZ literal constant is converted to an @code{INTEGER} value with\n the largest decimal representation.  This value is then converted\n numerically to the type and kind of the variable in question.\n-(For instance @code{real :: r = b'0000001' + 1} initializes @code{r}\n+(For instance, @code{real :: r = b'0000001' + 1} initializes @code{r}\n with @code{2.0}.) As different compilers implement the extension\n differently, one should be careful when doing bitwise initialization\n of non-integer variables.\n@@ -1529,8 +1548,8 @@ It consists of a set of compiler directives, library routines,\n and environment variables that influence run-time behavior.\n \n GNU Fortran strives to be compatible to the \n-@uref{http://www.openmp.org/drupal/mp-documents/spec25.pdf,\n-OpenMP Application Program Interface v2.5}.\n+@uref{http://www.openmp.org/mp-documents/spec30.pdf,\n+OpenMP Application Program Interface v3.0}.\n \n To enable the processing of the OpenMP directive @code{!$omp} in\n free-form source code; the @code{c$omp}, @code{*$omp} and @code{!$omp}\n@@ -1568,7 +1587,7 @@ this may lead to surprising results, especially to segmentation faults\n if the stacksize is limited.\n \n @item\n-On glibc-based systems, OpenMP enabled applications can not be statically\n+On glibc-based systems, OpenMP enabled applications cannot be statically\n linked due to limitations of the underlying pthreads-implementation. It\n might be possible to get a working solution if \n @command{-Wl,--whole-archive -lpthread -Wl,--no-whole-archive} is added\n@@ -1597,7 +1616,7 @@ are rebuilt using a new compiler or version of a compiler.\n @code{%VAL} passes a scalar argument by value, @code{%REF} passes it by \n reference and @code{%LOC} passes its memory location.  Since gfortran \n already passes scalar arguments by reference, @code{%REF} is in effect \n-a do-nothing.  @code{%LOC} has the same effect as a fortran pointer.\n+a do-nothing.  @code{%LOC} has the same effect as a Fortran pointer.\n \n An example of passing an argument by value to a C subroutine foo.:\n @smallexample\n@@ -1614,9 +1633,8 @@ C\n For details refer to the g77 manual\n @uref{http://gcc.gnu.org/onlinedocs/gcc-3.4.6/g77/index.html#Top}.\n \n-Also, the gfortran testsuite c_by_val.f and its partner c_by_val.c are\n-worth a look.\n-\n+Also, @code{c_by_val.f} and its partner @code{c_by_val.c} of the\n+GNU Fortran testsuite are worth a look.\n \n \n @node Extensions not implemented in GNU Fortran\n@@ -1634,7 +1652,7 @@ code that uses them running with the GNU Fortran compiler.\n \n @c More can be found here:\n @c   -- http://gcc.gnu.org/onlinedocs/gcc-3.4.6/g77/Missing-Features.html\n-@c   -- the list of fortran and libgfortran bugs closed as WONTFIX:\n+@c   -- the list of Fortran and libgfortran bugs closed as WONTFIX:\n @c      http://tinyurl.com/2u4h5y\n \n @menu\n@@ -1822,9 +1840,503 @@ c\n @end smallexample\n \n \n+@c ---------------------------------------------------------------------\n+@c Mixed-Language Programming\n+@c ---------------------------------------------------------------------\n+\n+@node Mixed-Language Programming\n+@chapter Mixed-Language Programming\n+@cindex Interoperability\n+@cindex Mixed-language programming\n+\n+@menu\n+* Interoperability with C::\n+* Non-Fortran Main Program::\n+@end menu\n+\n+This chapter is about mixed-language interoperability, but also applies\n+if one links Fortran code compiled by different compilers. In most cases,\n+use of the C Binding features of the Fortran 2003 standard is sufficient,\n+and their use is highly recommended.\n+\n+\n+@node Interoperability with C\n+@section Interoperability with C\n+\n+@menu\n+* Intrinsic Types::\n+* Further Interoperability of Fortran with C::\n+* Derived Types and struct::\n+* Interoperable Global Variables::\n+* Interoperable Subroutines and Functions::\n+@end menu\n+\n+Since Fortran 2003 (ISO/IEC 1539-1:2004(E)) there is a\n+standardized way to generate procedure and derived-type\n+declarations and global variables which are interoperable with C\n+(ISO/IEC 9899:1999). The @code{bind(C)} attribute has been added\n+to inform the compiler that a symbol shall be interoperable with C;\n+also, some constraints are added. Note, however, that not\n+all C features have a Fortran equivalent or vice versa. For instance,\n+neither C's unsigned integers nor C's functions with variable number\n+of arguments have an equivalent in Fortran.\n+\n+\n+@node Intrinsic Types\n+@subsection Intrinsic Types\n+\n+In order to ensure that exactly the same variable type and kind is used\n+in C and Fortran, the named constants shall be used which are defined in the\n+@code{ISO_C_BINDING} intrinsic module. That module contains named constants\n+for kind parameters and character named constants for the escape sequences\n+in C. For a list of the constants, see @ref{ISO_C_BINDING}.\n+\n+@node Derived Types and struct\n+@subsection Derived Types and struct\n+\n+For compatibility of derived types with @code{struct}, one needs to use\n+the @code{BIND(C)} attribute in the type declaration. For instance, the\n+following type declaration\n+\n+@smallexample\n+ USE ISO_C_BINDING\n+ TYPE, BIND(C) :: myType\n+   INTEGER(C_INT) :: i1, i2\n+   INTEGER(C_SIGNED_CHAR) :: i3\n+   REAL(C_DOUBLE) :: d1\n+   COMPLEX(C_FLOAT_COMPLEX) :: c1\n+   CHARACTER(KIND=C_CHAR) :: str(5)\n+ END TYPE\n+@end smallexample\n+\n+matches the following @code{struct} declaration in C\n+\n+@smallexample\n+ struct @{\n+   int i1, i2;\n+   /* Note: \"char\" might be signed or unsigned.  */\n+   signed char i3;\n+   double d1;\n+   float _Complex c1;\n+   char str[5];\n+ @} myType;\n+@end smallexample\n+\n+Derived types with the C binding attribute shall not have the @code{sequence}\n+attribute, type parameters, the @code{extends} attribute, nor type-bound\n+procedures. Every component must be of interoperable type and kind and may not\n+have the @code{pointer} or @code{allocatable} attribute. The names of the\n+variables are irrelevant for interoperability.\n+\n+As there exist no direct Fortran equivalents, neither unions nor structs\n+with bit field or variable-length array members are interoperable.\n+\n+@node Interoperable Global Variables\n+@subsection Interoperable Global Variables\n+\n+Variables can be made accessible from C using the C binding attribute,\n+optionally together with specifying a binding name. Those variables\n+have to be declared in the declaration part of a @code{MODULE},\n+be of interoperable type, and have neither the @code{pointer} nor\n+the @code{allocatable} attribute.\n+\n+@smallexample\n+  MODULE m\n+    USE myType_module\n+    USE ISO_C_BINDING\n+    integer(C_INT), bind(C, name=\"_MyProject_flags\") :: global_flag\n+    type(myType), bind(C) :: tp\n+  END MODULE\n+@end smallexample\n+\n+Here, @code{_MyProject_flags} is the case-sensitive name of the variable\n+as seen from C programs while @code{global_flag} is the case-insensitive\n+name as seen from Fortran. If no binding name is specified, as for\n+@var{tp}, the C binding name is the (lowercase) Fortran binding name.\n+If a binding name is specified, only a single variable may be after the\n+double colon. Note of warning: You cannot use a global variable to\n+access @var{errno} of the C library as the C standard allows it to be\n+a macro. Use the @code{IERRNO} intrinsic (GNU extension) instead.\n+\n+@node Interoperable Subroutines and Functions\n+@subsection Interoperable Subroutines and Functions\n+\n+Subroutines and functions have to have the @code{BIND(C)} attribute to\n+be compatible with C. The dummy argument declaration is relatively\n+straightforward. However, one needs to be careful because C uses\n+call-by-value by default while GNU Fortran uses call-by-reference.\n+Furthermore, strings and pointers are handled differently. Note that\n+only explicit size and assumed-size arrays are supported but not\n+assumed-shape or allocatable arrays.\n+\n+To pass a variable by value, use the @code{VALUE} attribute.\n+Thus the following C prototype\n+\n+@smallexample\n+@code{int func(int i, int *j)}\n+@end smallexample\n+\n+matches the Fortran declaration\n+\n+@smallexample\n+  integer(c_int) func(i,j)\n+    integer, VALUE :: i\n+    integer :: j\n+@end smallexample\n+\n+Note that pointer arguments also frequently need the @code{VALUE} attribute.\n+\n+Strings are handled quite differently in C and Fortran. In C a string\n+is a @code{NUL}-terminated array of characters while in Fortran each string\n+has a length associated with it and is thus not terminated (by e.g.\n+@code{NUL}). For example, if one wants to use the following C function,\n+\n+@smallexample\n+  #include <stdio.h>\n+  void print_C(char *string) /* equivalent: char string[]  */\n+  @{\n+     printf(\"%s\\n\", string);\n+  @}\n+@end smallexample\n+\n+to print ``Hello World'' from Fortran, one can call it using\n+\n+@smallexample\n+  use iso_c_binding, only: C_CHAR, C_NULL_CHAR\n+  interface\n+    subroutine print_c(string) bind(C, name=\"print_C\")\n+      use iso_c_binding, only: c_char\n+      character(kind=c_char) :: string(*)\n+    end subroutine print_c\n+  end interface\n+  call print_c(C_CHAR_\"Hello World\"//C_NULL_CHAR)\n+@end smallexample\n+\n+As the example shows, one needs to ensure that the\n+string is @code{NUL} terminated. Additionally, the dummy argument\n+@var{string} of @code{print_C} is a length-one assumed-size\n+array; using @code{character(len=*)} is not allowed. The example\n+above uses @code{c_char_\"Hello World\"} to ensure the string\n+literal has the right type; typically the default character\n+kind and @code{c_char} are the same and thus @code{\"Hello World\"}\n+is equivalent. However, the standard does not guarantee this.\n+\n+The use of pointers is now illustrated using the C library\n+function @code{strncpy}, whose prototype is\n+\n+@smallexample\n+  char *strncpy(char *restrict s1, const char *restrict s2, size_t n);\n+@end smallexample\n+\n+The function @code{strncpy} copies at most @var{n} characters from\n+string @var{s2} to @var{s1} and returns @var{s1}. In the following\n+example, we ignore the return value:\n+\n+@smallexample\n+  use iso_c_binding\n+  implicit none\n+  character(len=30) :: str,str2\n+  interface\n+    ! Ignore the return value of strncpy -> subroutine\n+    ! \"restrict\" is always assumed if we do not pass a pointer\n+    subroutine strncpy(dest, src, n) bind(C)\n+      import\n+      character(kind=c_char),  intent(out) :: dest(*)\n+      character(kind=c_char),  intent(in)  :: src(*)\n+      integer(c_size_t), value, intent(in) :: n\n+    end subroutine strncpy\n+  end interface\n+  str = repeat('X',30) ! Initialize whole string with 'X'\n+  call strncpy(str, c_char_\"Hello World\"//C_NULL_CHAR, &\n+               len(c_char_\"Hello World\",kind=c_size_t))\n+  print '(a)', str ! prints: \"Hello WorldXXXXXXXXXXXXXXXXXXX\"\n+  end\n+@end smallexample\n+\n+C pointers are represented in Fortran via the special derived type\n+@code{type(c_ptr)}, with private components. Thus one needs to\n+use intrinsic conversion procedures to convert from or to C pointers.\n+For example,\n+\n+@smallexample\n+  use iso_c_binding\n+  type(c_ptr) :: cptr1, cptr2\n+  integer, target :: array(7), scalar\n+  integer, pointer :: pa(:), ps\n+  cptr1 = c_loc(array(1)) ! The programmer needs to ensure that the\n+                          ! array is contiguous if required by the C\n+                          ! procedure\n+  cptr2 = c_loc(scalar)\n+  call c_f_pointer(cptr2, ps)\n+  call c_f_pointer(cptr2, pa, shape=[7])\n+@end smallexample\n+\n+When converting C to Fortran arrays, the one-dimensional @code{SHAPE} argument\n+has to be passed. Note: A pointer argument @code{void *} matches\n+@code{TYPE(C_PTR), VALUE} while @code{TYPE(C_PTR)} matches @code{void **}.\n+\n+Procedure pointers are handled analogously to pointers; the C type is\n+@code{TYPE(C_FUNPTR)} and the intrinsic conversion procedures are\n+@code{C_F_PROC_POINTER} and @code{C_FUNLOC}.\n+\n+The intrinsic procedures are described in @ref{Intrinsic Procedures}.\n+\n+@node Further Interoperability of Fortran with C\n+@subsection Further Interoperability of Fortran with C\n+\n+Assumed-shape and allocatable arrays are passed using an array descriptor\n+(dope vector). The internal structure of the array descriptor used\n+by GNU Fortran is not yet documented and will change. There will also be\n+a Technical Report (TR 29113) which standardizes an interoperable\n+array descriptor. Until then, you can use the Chasm Language\n+Interoperability Tools, @url{http://chasm-interop.sourceforge.net/},\n+which provide an interface to GNU Fortran's array descriptor.\n+\n+The technical report 29113 will presumably also include support for\n+C-interoperable @code{OPTIONAL} and for assumed-rank and assumed-type\n+dummy arguments. However, the TR has neither been approved nor implemented\n+in GNU Fortran; therefore, these features are not yet available.\n+\n+@node Non-Fortran Main Program\n+@section Non-Fortran Main Program\n+\n+@menu\n+* _gfortran_set_args:: Save command-line arguments\n+* _gfortran_set_options:: Set library option flags\n+* _gfortran_set_convert:: Set endian conversion\n+* _gfortran_set_record_marker:: Set length of record markers\n+* _gfortran_set_max_subrecord_length:: Set subrecord length\n+@end menu\n+\n+Even if you are doing mixed-language programming, it is very\n+likely that you do not need to know or use the information in this\n+section. Since it is about the internal structure of GNU Fortran,\n+it may also change in GCC minor releases.\n+\n+When you compile a @code{PROGRAM} with GNU Fortran, a function\n+with the name @code{main} (in the symbol table of the object file)\n+is generated, which initializes the libgfortran library and then\n+calls the actual program which uses the name @code{MAIN__}, for\n+historic reasons. If you link GNU Fortran compiled procedures\n+to, e.g., a C or C++ program or to a Fortran program compiled by\n+a different compiler, the libgfortran library is not initialized\n+and thus a few intrinsic procedures do not work properly, e.g.\n+those for obtaining the command-line arguments.\n+\n+Therefore, if your @code{PROGRAM} is not compiled with\n+GNU Fortran and the GNU Fortran compiled procedures require\n+intrinsics relying on the library initialization, you need to\n+initialize the library yourself. Using the default options,\n+gfortran calls @code{_gfortran_set_args} and\n+@code{_gfortran_set_options}. The initialization of the former\n+is needed if the called procedures access the command line\n+(and for backtracing); the latter sets some flags based on the\n+standard chosen or to enable backtracing. In typical programs,\n+it is not necessary to call any initialization function.\n+\n+If your @code{PROGRAM} is compiled with GNU Fortran, you shall\n+not call any of the following functions. The libgfortran\n+initialization functions are shown in C syntax but using C\n+bindings they are also accessible from Fortran.\n+\n+\n+@node _gfortran_set_args\n+@subsection @code{_gfortran_set_args} --- Save command-line arguments\n+@fnindex _gfortran_set_args\n+@cindex libgfortran initialization, set_args\n+\n+@table @asis\n+@item @emph{Description}:\n+@code{_gfortran_set_args} saves the command-line arguments; this\n+initialization is required if any of the command-line intrinsics\n+is called. Additionally, it shall be called if backtracing is\n+enabled (see @code{_gfortran_set_options}).\n+\n+@item @emph{Syntax}:\n+@code{void _gfortran_set_args (int argc, char *argv[])}\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .70\n+@item @var{argc} @tab number of command line argument strings\n+@item @var{argv} @tab the command-line argument strings; argv[0]\n+is the pathname of the executable itself.\n+@end multitable\n+\n+@item @emph{Example}:\n+@smallexample\n+int main (int argc, char *argv[])\n+@{\n+  /* Initialize libgfortran.  */\n+  _gfortran_set_args (argc, argv);\n+  return 0;\n+@}\n+@end smallexample\n+@end table\n+\n+\n+@node _gfortran_set_options\n+@subsection @code{_gfortran_set_options} --- Set library option flags\n+@fnindex _gfortran_set_options\n+@cindex libgfortran initialization, set_options\n+\n+@table @asis\n+@item @emph{Description}:\n+@code{_gfortran_set_options} sets several flags related to the Fortran\n+standard to be used, whether backtracing or core dumps should be enabled\n+and whether range checks should be performed. The syntax allows for\n+upward compatibility since the number of passed flags is specified; for\n+non-passed flags, the default value is used. See also\n+@pxref{Code Gen Options}. Please note that not all flags are actually\n+used.\n+\n+@item @emph{Syntax}:\n+@code{void _gfortran_set_options (int num, int options[])}\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .70\n+@item @var{num} @tab number of options passed\n+@item @var{argv} @tab The list of flag values\n+@end multitable\n+\n+@item @emph{option flag list}:\n+@multitable @columnfractions .15 .70\n+@item @var{option}[0] @tab Allowed standard; can give run-time errors\n+if e.g. an input-output edit descriptor is invalid in a given standard.\n+Possible values are (bitwise or-ed) @code{GFC_STD_F77} (1),\n+@code{GFC_STD_F95_OBS} (2), @code{GFC_STD_F95_DEL} (4), @code{GFC_STD_F95}\n+(8), @code{GFC_STD_F2003} (16), @code{GFC_STD_GNU} (32),\n+@code{GFC_STD_LEGACY} (64), and @code{GFC_STD_F2008} (128).\n+Default: @code{GFC_STD_F95_OBS | GFC_STD_F95_DEL | GFC_STD_F2003\n+| GFC_STD_F2008 | GFC_STD_F95 | GFC_STD_F77 | GFC_STD_GNU | GFC_STD_LEGACY}.\n+@item @var{option}[1] @tab Standard-warning flag; prints a warning to\n+standard error. Default: @code{GFC_STD_F95_DEL | GFC_STD_LEGACY}.\n+@item @var{option}[2] @tab If non zero, enable pedantic checking.\n+Default: off.\n+@item @var{option}[3] @tab If non zero, enable core dumps on run-time\n+errors. Default: off.\n+@item @var{option}[4] @tab If non zero, enable backtracing on run-time\n+errors. Default: off.\n+Note: Installs a signal handler and requires command-line\n+initialization using @code{_gfortran_set_args}.\n+@item @var{option}[5] @tab If non zero, supports signed zeros.\n+Default: enabled.\n+@item @var{option}[6] @tab Enables run-time checking. Possible values\n+are (bitwise or-ed): GFC_RTCHECK_BOUNDS (1), GFC_RTCHECK_ARRAY_TEMPS (2),\n+GFC_RTCHECK_RECURSION (4), GFC_RTCHECK_DO (16).\n+Default: disabled.\n+@item @var{option}[7] @tab If non zero, range checking is enabled.\n+Default: enabled. See -frange-check (@pxref{Code Gen Options}).\n+@end multitable\n+\n+@item @emph{Example}:\n+@smallexample\n+  /* Use gfortran 4.5 default options.  */\n+  static int options[] = @{68, 255, 0, 0, 0, 1, 0, 1@};\n+  _gfortran_set_options (8, &options);\n+@end smallexample\n+@end table\n+\n+\n+@node _gfortran_set_convert\n+@subsection @code{_gfortran_set_convert} --- Set endian conversion\n+@fnindex _gfortran_set_convert\n+@cindex libgfortran initialization, set_convert\n+\n+@table @asis\n+@item @emph{Description}:\n+@code{_gfortran_set_convert} set the representation of data for\n+unformatted files.\n+\n+@item @emph{Syntax}:\n+@code{void _gfortran_set_convert (int conv)}\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .70\n+@item @var{conv} @tab Endian conversion, possible values:\n+GFC_CONVERT_NATIVE (0, default), GFC_CONVERT_SWAP (1),\n+GFC_CONVERT_BIG (2), GFC_CONVERT_LITTLE (3).\n+@end multitable\n+\n+@item @emph{Example}:\n+@smallexample\n+int main (int argc, char *argv[])\n+@{\n+  /* Initialize libgfortran.  */\n+  _gfortran_set_args (argc, argv);\n+  _gfortran_set_convert (1);\n+  return 0;\n+@}\n+@end smallexample\n+@end table\n+\n+\n+@node _gfortran_set_record_marker\n+@subsection @code{_gfortran_set_record_marker} --- Set length of record markers\n+@fnindex _gfortran_set_record_marker\n+@cindex libgfortran initialization, set_record_marker\n+\n+@table @asis\n+@item @emph{Description}:\n+@code{_gfortran_set_record_marker} set the length of record markers\n+for unformatted files.\n+\n+@item @emph{Syntax}:\n+@code{void _gfortran_set_record_marker (int val)}\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .70\n+@item @var{val} @tab Length of the record marker; valid values\n+are 4 and 8. Default is 4.\n+@end multitable\n+\n+@item @emph{Example}:\n+@smallexample\n+int main (int argc, char *argv[])\n+@{\n+  /* Initialize libgfortran.  */\n+  _gfortran_set_args (argc, argv);\n+  _gfortran_set_record_marker (8);\n+  return 0;\n+@}\n+@end smallexample\n+@end table\n+\n+\n+@node _gfortran_set_max_subrecord_length\n+@subsection @code{_gfortran_set_max_subrecord_length} --- Set subrecord length\n+@fnindex _gfortran_set_max_subrecord_length\n+@cindex libgfortran initialization, set_max_subrecord_length\n+\n+@table @asis\n+@item @emph{Description}:\n+@code{_gfortran_set_max_subrecord_length} set the maximum length\n+for a subrecord. This option only makes sense for testing and\n+debugging of unformatted I/O.\n+\n+@item @emph{Syntax}:\n+@code{void _gfortran_set_max_subrecord_length (int val)}\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .70\n+@item @var{val} @tab the maximum length for a subrecord;\n+the maximum permitted value is 2147483639, which is also\n+the default.\n+@end multitable\n+\n+@item @emph{Example}:\n+@smallexample\n+int main (int argc, char *argv[])\n+@{\n+  /* Initialize libgfortran.  */\n+  _gfortran_set_args (argc, argv);\n+  _gfortran_set_max_subrecord_length (8);\n+  return 0;\n+@}\n+@end smallexample\n+@end table\n+\n \n \n-@c ---------------------------------------------------------------------\n @c Intrinsic Procedures\n @c ---------------------------------------------------------------------\n \n@@ -1913,6 +2425,7 @@ ideas and significant help to the GNU Fortran project\n @item Andy Vaught\n @item Feng Wang\n @item Janus Weil\n+@item Daniel Kraft\n @end itemize\n \n The following people have contributed bug reports,\n@@ -1925,6 +2438,7 @@ GNU Fortran project:\n @item Dominique d'Humi@`eres\n @item Kate Hedstrom\n @item Erik Schnetter\n+@item Joost VandeVondele\n @end itemize\n \n Many other individuals have helped debug,"}, {"sha": "0a8bba01cd9f8dee0be6c8ed2df3546dd950beac", "filename": "gcc/fortran/intrinsic.texi", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e0667cd3a217c480333130a07cdb9641eada30e/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e0667cd3a217c480333130a07cdb9641eada30e/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=9e0667cd3a217c480333130a07cdb9641eada30e", "patch": "@@ -11211,7 +11211,13 @@ Fortran 95 elemental function: @ref{IEOR}\n @chapter Intrinsic Modules\n @cindex intrinsic Modules\n \n-@c @node ISO_FORTRAN_ENV\n+@menu\n+* ISO_FORTRAN_ENV::\n+* ISO_C_BINDING::\n+* OpenMP Modules OMP_LIB and OMP_LIB_KINDS::\n+@end menu\n+\n+@node ISO_FORTRAN_ENV\n @section @code{ISO_FORTRAN_ENV}\n @table @asis\n @item @emph{Standard}:\n@@ -11251,7 +11257,7 @@ Identifies the preconnected unit identified by the asterisk\n (@code{*}) in @code{WRITE} statement.\n @end table\n \n-@c @node ISO_C_BINDING\n+@node ISO_C_BINDING\n @section @code{ISO_C_BINDING}\n @table @asis\n @item @emph{Standard}:\n@@ -11272,12 +11278,8 @@ manual.\n @c TODO: Vertical spacing between C_FUNLOC and C_LOC wrong in PDF,\n @c don't really know why.\n \n-The @code{ISO_C_BINDING} module provides the following named constants of the\n-type integer, which can be used as KIND type parameter. Note that GNU\n-Fortran currently does not support the @code{C_INT_FAST...} KIND type\n-parameters (marked by an asterisk (@code{*}) in the list below).\n-The @code{C_INT_FAST...} parameters have therefore the value @math{-2}\n-and cannot be used as KIND type parameter of the @code{INTEGER} type.\n+The @code{ISO_C_BINDING} module provides the following named constants of\n+type default integer, which can be used as KIND type parameters.\n \n In addition to the integer named constants required by the Fortran 2003 \n standard, GNU Fortran provides as an extension named constants for the \n@@ -11296,17 +11298,17 @@ C_INT_LEAST128_T, C_INT_FAST128_T}.\n @item @code{INTEGER}@tab @code{C_INT16_T}       @tab @code{int16_t}\n @item @code{INTEGER}@tab @code{C_INT32_T}       @tab @code{int32_t}\n @item @code{INTEGER}@tab @code{C_INT64_T}       @tab @code{int64_t}\n-@item @code{INTEGER}@tab @code{C_INT128_T}       @tab @code{int128_t}                      @tab Ext.\n+@item @code{INTEGER}@tab @code{C_INT128_T}      @tab @code{int128_t}                      @tab Ext.\n @item @code{INTEGER}@tab @code{C_INT_LEAST8_T}  @tab @code{int_least8_t}\n @item @code{INTEGER}@tab @code{C_INT_LEAST16_T} @tab @code{int_least16_t}\n @item @code{INTEGER}@tab @code{C_INT_LEAST32_T} @tab @code{int_least32_t}\n @item @code{INTEGER}@tab @code{C_INT_LEAST64_T} @tab @code{int_least64_t}\n-@item @code{INTEGER}@tab @code{C_INT_LEAST128_T} @tab @code{int_least128_t}                @tab Ext.\n-@item @code{INTEGER}@tab @code{C_INT_FAST8_T}*  @tab @code{int_fast8_t}\n-@item @code{INTEGER}@tab @code{C_INT_FAST16_T}* @tab @code{int_fast16_t}\n-@item @code{INTEGER}@tab @code{C_INT_FAST32_T}* @tab @code{int_fast32_t}\n-@item @code{INTEGER}@tab @code{C_INT_FAST64_T}* @tab @code{int_fast64_t}\n-@item @code{INTEGER}@tab @code{C_INT_FAST128_T}* @tab @code{int_fast128_t}                 @tab Ext.\n+@item @code{INTEGER}@tab @code{C_INT_LEAST128_T}@tab @code{int_least128_t}                @tab Ext.\n+@item @code{INTEGER}@tab @code{C_INT_FAST8_T}   @tab @code{int_fast8_t}\n+@item @code{INTEGER}@tab @code{C_INT_FAST16_T}  @tab @code{int_fast16_t}\n+@item @code{INTEGER}@tab @code{C_INT_FAST32_T}  @tab @code{int_fast32_t}\n+@item @code{INTEGER}@tab @code{C_INT_FAST64_T}  @tab @code{int_fast64_t}\n+@item @code{INTEGER}@tab @code{C_INT_FAST128_T} @tab @code{int_fast128_t}                 @tab Ext.\n @item @code{INTEGER}@tab @code{C_INTMAX_T}      @tab @code{intmax_t}\n @item @code{INTEGER}@tab @code{C_INTPTR_T}      @tab @code{intptr_t}\n @item @code{REAL}   @tab @code{C_FLOAT}         @tab @code{float}\n@@ -11334,7 +11336,7 @@ defined.\n @item @code{C_VERTICAL_TAB}    @tab vertical tab    @tab @code{'\\v'}\n @end multitable\n \n-@c @node OpenMP Modules OMP_LIB and OMP_LIB_KINDS\n+@node OpenMP Modules OMP_LIB and OMP_LIB_KINDS\n @section OpenMP Modules @code{OMP_LIB} and @code{OMP_LIB_KINDS}\n @table @asis\n @item @emph{Standard}:"}, {"sha": "aeeb41de29869823ec180fac1ce638bde1a5bae5", "filename": "gcc/fortran/iso-c-binding.def", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e0667cd3a217c480333130a07cdb9641eada30e/gcc%2Ffortran%2Fiso-c-binding.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e0667cd3a217c480333130a07cdb9641eada30e/gcc%2Ffortran%2Fiso-c-binding.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fiso-c-binding.def?ref=9e0667cd3a217c480333130a07cdb9641eada30e", "patch": "@@ -95,7 +95,8 @@ NAMED_INTCST (ISOCBINDING_INT_FAST32_T, \"c_int_fast32_t\", \\\n NAMED_INTCST (ISOCBINDING_INT_FAST64_T, \"c_int_fast64_t\", \\\n               get_int_kind_from_name (INT_FAST64_TYPE), GFC_STD_F2003)\n /* GNU Extension.  */\n-NAMED_INTCST (ISOCBINDING_INT_FAST128_T, \"c_int_fast128_t\", -2, GFC_STD_GNU)\n+NAMED_INTCST (ISOCBINDING_INT_FAST128_T, \"c_int_fast128_t\",\n+\t      get_int_kind_from_width (128), GFC_STD_GNU)\n \n NAMED_REALCST (ISOCBINDING_FLOAT, \"c_float\", \\\n                get_real_kind_from_node (float_type_node))"}, {"sha": "839279e413e2b6ac11d5f7f210aed90c706d1bb4", "filename": "gcc/fortran/libgfortran.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e0667cd3a217c480333130a07cdb9641eada30e/gcc%2Ffortran%2Flibgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e0667cd3a217c480333130a07cdb9641eada30e/gcc%2Ffortran%2Flibgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flibgfortran.h?ref=9e0667cd3a217c480333130a07cdb9641eada30e", "patch": "@@ -19,7 +19,9 @@ along with GCC; see the file COPYING3.  If not see\n \n \n /* Flags to specify which standard/extension contains a feature.\n-   Note that no features were obsoleted nor deleted in F2003.  */\n+   Note that no features were obsoleted nor deleted in F2003.\n+   Please remember to keep those definitions in sync with\n+   gfortran.texi.  */\n #define GFC_STD_F2008\t(1<<7)\t/* New in F2008.  */\n #define GFC_STD_LEGACY\t(1<<6)\t/* Backward compatibility.  */\n #define GFC_STD_GNU\t(1<<5)\t/* GNU Fortran extension.  */"}]}