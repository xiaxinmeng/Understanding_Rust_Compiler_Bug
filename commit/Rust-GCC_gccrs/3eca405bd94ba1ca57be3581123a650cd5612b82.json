{"sha": "3eca405bd94ba1ca57be3581123a650cd5612b82", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2VjYTQwNWJkOTRiYTFjYTU3YmUzNTgxMTIzYTY1MGNkNTYxMmI4Mg==", "commit": {"author": {"name": "Jim Blandy", "email": "jimb@gcc.gnu.org", "date": "1999-05-11T12:39:46Z"}, "committer": {"name": "Jim Blandy", "email": "jimb@gcc.gnu.org", "date": "1999-05-11T12:39:46Z"}, "message": "cplus-dem.c (main): Use table lookup to distinguish identifier characters from non-identifier...\n\n* cplus-dem.c (main): Use table lookup to distinguish identifier\ncharacters from non-identifier characters.\n(standard_symbol_alphabet, hp_symbol_alphabet): New functions.\n\nFrom-SVN: r26887", "tree": {"sha": "b9ca11d01a178e53ec2cc9abcb7429b7ef821327", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b9ca11d01a178e53ec2cc9abcb7429b7ef821327"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3eca405bd94ba1ca57be3581123a650cd5612b82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3eca405bd94ba1ca57be3581123a650cd5612b82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3eca405bd94ba1ca57be3581123a650cd5612b82", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3eca405bd94ba1ca57be3581123a650cd5612b82/comments", "author": null, "committer": null, "parents": [{"sha": "fc9527b301d77cc5a274194734020db43145e878", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc9527b301d77cc5a274194734020db43145e878", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc9527b301d77cc5a274194734020db43145e878"}], "stats": {"total": 85, "additions": 80, "deletions": 5}, "files": [{"sha": "d94d0493ed3c1c78bfa3b979a3a7bf3aaf6650d9", "filename": "libiberty/cplus-dem.c", "status": "modified", "additions": 80, "deletions": 5, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eca405bd94ba1ca57be3581123a650cd5612b82/libiberty%2Fcplus-dem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eca405bd94ba1ca57be3581123a650cd5612b82/libiberty%2Fcplus-dem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcplus-dem.c?ref=3eca405bd94ba1ca57be3581123a650cd5612b82", "patch": "@@ -4393,13 +4393,74 @@ fancy_abort ()\n   fatal (\"Internal gcc abort.\");\n }\n \n+\n+/* Fill in TABLE so that TABLE[C] is true iff C (as an unsigned char)\n+   is a valid symbol component, in the standard assembler symbol\n+   syntax.  */\n+void\n+standard_symbol_alphabet (char *table)\n+{\n+  int c;\n+\n+  for (c = 0; c < 256; c++)\n+    table[c] = isalnum(c);\n+\n+  table['_'] = 1;\n+  table['$'] = 1;\n+  table['.'] = 1;\n+}\n+\n+\n+/* Fill in TABLE so that TABLE[C] is true iff C (as an unsigned char)\n+   is a valid symbol name component in an HP object file.\n+\n+   Note that, since HP's compiler generates object code straight from\n+   C++ source, without going through an assembler, its mangled\n+   identifiers can use all sorts of characters that no assembler would\n+   tolerate, so the alphabet this function creates is a little odd.\n+   Here are some sample mangled identifiers offered by HP:\n+\n+\ttypeid*__XT24AddressIndExpClassMember_\n+\t[Vftptr]key:__dt__32OrdinaryCompareIndExpClassMemberFv\n+\t__ct__Q2_9Elf64_Dyn18{unnamed.union.#1}Fv\n+\n+   This still seems really weird to me, since nowhere else in this\n+   file is there anything to recognize curly brackets, parens, etc.\n+   I've talked with Srikanth <srikanth@cup.hp.com>, and he assures me\n+   this is right, but I still strongly suspect that there's a\n+   misunderstanding here.\n+\n+   If we decide it's better for c++filt to use HP's assembler syntax\n+   to scrape identifiers out of its input, here's the definition of\n+   the symbol name syntax from the HP assembler manual:\n+\n+       Symbols are composed of uppercase and lowercase letters, decimal\n+       digits, dollar symbol, period (.), ampersand (&), pound sign(#) and\n+       underscore (_). A symbol can begin with a letter, digit underscore or\n+       dollar sign. If a symbol begins with a digit, it must contain a\n+       non-digit character.\n+\n+   So have fun.  */\n+void\n+hp_symbol_alphabet (char *table)\n+{\n+  char *c;\n+\n+  standard_symbol_alphabet (table);\n+\n+  for (c = \"<>#,*&[]:(){}\"; *c; c++)\n+    table[(unsigned char) *c] = 1;\n+}\n+\n+\n int\n main (argc, argv)\n      int argc;\n      char **argv;\n {\n   char *result;\n   int c;\n+  char symbol_alphabet[256];\n \n   program_name = argv[0];\n \n@@ -4466,16 +4527,30 @@ main (argc, argv)\n     }\n   else\n     {\n+      switch (current_demangling_style)\n+\t{\n+\tcase gnu_demangling:\n+\tcase lucid_demangling:\n+\tcase arm_demangling:\n+\tcase edg_demangling:\n+\t  standard_symbol_alphabet (symbol_alphabet);\n+\t  break;\n+\tcase hp_demangling:\n+\t  hp_symbol_alphabet (symbol_alphabet);\n+\t  break;\n+\tdefault:\n+\t  /* Folks should explicitly indicate the appropriate alphabet for\n+\t     each demangling.  Providing a default would allow the\n+\t     question to go unconsidered.  */\n+\t  abort ();\n+\t}\n+\n       for (;;)\n \t{\n \t  int i = 0;\n \t  c = getchar ();\n \t  /* Try to read a label.  */\n-\t  while (c != EOF && (isalnum(c) || c == '_' || c == '$' || c == '.' ||\n-                              c == '<' || c == '>' || c == '#' || c == ',' || c == '*' || c == '&' ||\n-                              c == '[' || c == ']' || c == ':' || c == '(' || c == ')'))\n-                              /* the ones in the 2nd & 3rd lines were added to handle\n-                                 HP aCC template specialization manglings */\n+\t  while (c != EOF && symbol_alphabet[c])\n \t    {\n \t      if (i >= MBUF_SIZE-1)\n \t\tbreak;"}]}