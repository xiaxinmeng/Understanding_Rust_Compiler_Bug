{"sha": "894c7af33d49598598ac8b82a6104ea25e18957a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODk0YzdhZjMzZDQ5NTk4NTk4YWM4YjgyYTYxMDRlYTI1ZTE4OTU3YQ==", "commit": {"author": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2001-11-29T21:02:34Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2001-11-29T21:02:34Z"}, "message": "howto.html: Finish allocator notes (inst and 3.0).\n\n2001-11-29  Phil Edwards  <pme@gcc.gnu.org>\n\n\t* docs/html/ext/howto.html:  Finish allocator notes (inst and 3.0).\n\nFrom-SVN: r47452", "tree": {"sha": "d49bb31b18c59800d503e84bf135ef196ff30e79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d49bb31b18c59800d503e84bf135ef196ff30e79"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/894c7af33d49598598ac8b82a6104ea25e18957a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/894c7af33d49598598ac8b82a6104ea25e18957a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/894c7af33d49598598ac8b82a6104ea25e18957a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/894c7af33d49598598ac8b82a6104ea25e18957a/comments", "author": null, "committer": null, "parents": [{"sha": "b67db52985b8ed3a7b4a32f7948b50e6bff6f6b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b67db52985b8ed3a7b4a32f7948b50e6bff6f6b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b67db52985b8ed3a7b4a32f7948b50e6bff6f6b1"}], "stats": {"total": 31, "additions": 26, "deletions": 5}, "files": [{"sha": "58e899f3cfca1e880a6b84b12afde18e01eb86e1", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/894c7af33d49598598ac8b82a6104ea25e18957a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/894c7af33d49598598ac8b82a6104ea25e18957a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=894c7af33d49598598ac8b82a6104ea25e18957a", "patch": "@@ -1,3 +1,7 @@\n+2001-11-29  Phil Edwards  <pme@gcc.gnu.org>\n+\n+\t* docs/html/ext/howto.html:  Finish allocator notes (inst and 3.0).\n+\n 2001-11-29  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/bits/locale_facets.tcc (num_get::do_get(long double)):"}, {"sha": "e5518cf9a9981b71392721d053a790f2833da4e7", "filename": "libstdc++-v3/docs/html/ext/howto.html", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/894c7af33d49598598ac8b82a6104ea25e18957a/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/894c7af33d49598598ac8b82a6104ea25e18957a/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html?ref=894c7af33d49598598ac8b82a6104ea25e18957a", "patch": "@@ -276,6 +276,9 @@ <h3>Available allocators in namespace std</h3>\n       <code>__alloc</code> should not be noticably slower than\n       <code>__single_client_alloc</code>.)\n    </p>\n+   <p>[Another threadsafe allocator where each thread keeps its own free\n+      list, so that no locking is needed, might be described here.]\n+   </p>\n    <h3>A cannon to swat a fly:<code>  __USE_MALLOC</code></h3>\n    <p>If you've already read <a href=\"../23_containers/howto.html#3\">this\n       advice</a> and decided to define this macro, then the situation changes\n@@ -320,16 +323,30 @@ <h3><code>inst</code></h3>\n       <code>__default_alloc_template</code> classes take an integer parameter,\n       called inst here.  This number is completely unused.\n    </p>\n-   <p>  More soon.\n+   <p>The point of the number is to allow multiple instantiations of the\n+      classes without changing the semantics at all.  All three of\n+      <pre>\n+    typedef  __default_alloc_template&lt;true,0&gt;    normal;\n+    typedef  __default_alloc_template&lt;true,1&gt;    private;\n+    typedef  __default_alloc_template&lt;true,42&gt;   also_private;</pre>\n+      behave exactly the same way.  However, the memory pool for each type\n+      (and remember that different instantiations result in different types)\n+      remains separate.\n    </p>\n-   <p>\n+   <p>The library uses <strong>0</strong> in all its instantiations.  If you\n+      wish to keep separate free lists for a particular purpose, use a\n+      different number.\n    </p>\n    <h3>3.0.x</h3>\n-   <p>I don't even remember.  More soon.\n+   <p>For 3.0.x, many of the names were incorrectly <em>not</em> prefixed\n+      with underscores.  So symbols such as &quot;std::single_client_alloc&quot;\n+      are present.  Be very careful to not depend on these names any more\n+      than you would depend on implementation-only names.\n    </p>\n-   <p>\n+   <p>Certain macros like <code>_NOTHREADS</code> and <code>__STL_THREADS</code>\n+      can affect the 3.0.x allocators.  Do not use them.\n    </p>\n-   <p>\n+   <p>More notes as we remember them...\n    </p>\n    <p>Return <a href=\"#top\">to top of page</a> or\n       <a href=\"../faq/index.html\">to the FAQ</a>."}]}