{"sha": "ee69241016a9700eb663e5ccfadc3c11468711d7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWU2OTI0MTAxNmE5NzAwZWI2NjNlNWNjZmFkYzNjMTE0Njg3MTFkNw==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2003-09-03T06:50:59Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2003-09-03T06:50:59Z"}, "message": "mips.h (MASK_UNUSED1): Remove.\n\n\t* config/mips/mips.h (MASK_UNUSED1): Remove.\n\t(MASK_XGOT, TARGET_XGOT): Define.\n\t(TARGET_SWITCHES): Add an entry for -mxgot.\n\t(ASM_SPEC): Map -mxgot to -xgot.\n\t* config/mips/mips.c (mips_symbol_insns): Use TARGET_XGOT to decide\n\twhether we're using a big-GOT sequences.\n\t(mips_legitimize_const_move, mips_expand_call): Likewise.\n\t(override_options): Revert 2003-01-09 change.\n\t* doc/invoke.texi: Document -mxgot.\n\nFrom-SVN: r71018", "tree": {"sha": "0e5894a5d24e146a960339ce9524f8657df37e7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0e5894a5d24e146a960339ce9524f8657df37e7c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee69241016a9700eb663e5ccfadc3c11468711d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee69241016a9700eb663e5ccfadc3c11468711d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee69241016a9700eb663e5ccfadc3c11468711d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee69241016a9700eb663e5ccfadc3c11468711d7/comments", "author": null, "committer": null, "parents": [{"sha": "49fa066178b3a5956bb9a05bfab59b90aa95d99d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49fa066178b3a5956bb9a05bfab59b90aa95d99d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49fa066178b3a5956bb9a05bfab59b90aa95d99d"}], "stats": {"total": 69, "additions": 57, "deletions": 12}, "files": [{"sha": "bbefe0bcbb13e30993a389e7126906d95a29ecd4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee69241016a9700eb663e5ccfadc3c11468711d7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee69241016a9700eb663e5ccfadc3c11468711d7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ee69241016a9700eb663e5ccfadc3c11468711d7", "patch": "@@ -1,3 +1,15 @@\n+2003-09-03  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* config/mips/mips.h (MASK_UNUSED1): Remove.\n+\t(MASK_XGOT, TARGET_XGOT): Define.\n+\t(TARGET_SWITCHES): Add an entry for -mxgot.\n+\t(ASM_SPEC): Map -mxgot to -xgot.\n+\t* config/mips/mips.c (mips_symbol_insns): Use TARGET_XGOT to decide\n+\twhether we're using a big-GOT sequences.\n+\t(mips_legitimize_const_move, mips_expand_call): Likewise.\n+\t(override_options): Revert 2003-01-09 change.\n+\t* doc/invoke.texi: Document -mxgot.\n+\n 2003-09-02  Jason Merrill  <jason@redhat.com>\n \n \t* config/sol2.h (NO_IMPLICIT_EXTERN_C): Define here."}, {"sha": "74539249fab515bf3da3c52778922f1fd0fe7a11", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee69241016a9700eb663e5ccfadc3c11468711d7/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee69241016a9700eb663e5ccfadc3c11468711d7/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=ee69241016a9700eb663e5ccfadc3c11468711d7", "patch": "@@ -1081,7 +1081,7 @@ mips_symbol_insns (enum mips_symbol_type type)\n \t      daddu   $at,$at,$gp\n \n \t and the final address is $at + %got_lo(symbol).  */\n-      return (flag_pic == 1 ? 1 : 3);\n+      return (TARGET_XGOT ? 3 : 1);\n \n     case SYMBOL_GOT_LOCAL:\n       /* For o32 and o64, the sequence is:\n@@ -1881,10 +1881,10 @@ mips_legitimize_const_move (enum machine_mode mode, rtx dest, rtx src)\n       && GET_CODE (src) == SYMBOL_REF\n       && mips_classify_symbol (src) == SYMBOL_GOT_GLOBAL)\n     {\n-      if (flag_pic == 1)\n-\tsrc = mips_load_got16 (src, RELOC_GOT_DISP);\n-      else\n+      if (TARGET_XGOT)\n \tsrc = mips_load_got32 (temp, src, RELOC_GOT_HI, RELOC_GOT_LO);\n+      else\n+\tsrc = mips_load_got16 (src, RELOC_GOT_DISP);\n       emit_insn (gen_rtx_SET (VOIDmode, dest, src));\n       return;\n     }\n@@ -3213,10 +3213,10 @@ mips_expand_call (rtx result, rtx addr, rtx args_size, rtx aux, int sibcall_p)\n \t  && GET_CODE (addr) == SYMBOL_REF\n \t  && mips_classify_symbol (addr) == SYMBOL_GOT_GLOBAL)\n \t{\n-\t  if (flag_pic == 1)\n-\t    addr = mips_load_got16 (addr, RELOC_CALL16);\n-\t  else\n+\t  if (TARGET_XGOT)\n \t    addr = mips_load_got32 (0, addr, RELOC_CALL_HI, RELOC_CALL_LO);\n+\t  else\n+\t    addr = mips_load_got16 (addr, RELOC_CALL16);\n \t}\n       addr = force_reg (Pmode, addr);\n     }\n@@ -4632,8 +4632,7 @@ override_options (void)\n      implemented.  */\n   if (TARGET_ABICALLS)\n     {\n-      if (flag_pic == 0)\n-\tflag_pic = 1;\n+      flag_pic = 1;\n       if (mips_section_threshold > 0)\n \twarning (\"-G is incompatible with PIC code which is the default\");\n     }"}, {"sha": "716c2774beb8558151951f80967c8dcc625b81eb", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee69241016a9700eb663e5ccfadc3c11468711d7/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee69241016a9700eb663e5ccfadc3c11468711d7/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=ee69241016a9700eb663e5ccfadc3c11468711d7", "patch": "@@ -153,7 +153,7 @@ extern const struct mips_cpu_info *mips_tune_info;\n #define MASK_SOFT_FLOAT\t   0x00000100\t/* software floating point */\n #define MASK_FLOAT64\t   0x00000200\t/* fp registers are 64 bits */\n #define MASK_ABICALLS\t   0x00000400\t/* emit .abicalls/.cprestore/.cpload */\n-#define MASK_UNUSED1\t   0x00000800\t/* Unused Mask.  */\n+#define MASK_XGOT\t   0x00000800\t/* emit big-got PIC */\n #define MASK_LONG_CALLS\t   0x00001000\t/* Always call through a register */\n #define MASK_64BIT\t   0x00002000\t/* Use 64 bit GP registers and insns */\n #define MASK_EMBEDDED_PIC  0x00004000\t/* Generate embedded PIC code */\n@@ -218,6 +218,7 @@ extern const struct mips_cpu_info *mips_tune_info;\n \n \t\t\t\t\t/* .abicalls, etc from Pyramid V.4 */\n #define TARGET_ABICALLS\t\t(target_flags & MASK_ABICALLS)\n+#define TARGET_XGOT\t\t(target_flags & MASK_XGOT)\n \n \t\t\t\t\t/* software floating point */\n #define TARGET_SOFT_FLOAT\t(target_flags & MASK_SOFT_FLOAT)\n@@ -602,6 +603,10 @@ extern const struct mips_cpu_info *mips_tune_info;\n      N_(\"Generate mips16 code\") },\t\t\t\t\t\\\n   {\"no-mips16\",\t\t -MASK_MIPS16,\t\t\t\t\t\\\n      N_(\"Generate normal-mode code\") },\t\t\t\t\t\\\n+  {\"xgot\",\t\t  MASK_XGOT,\t\t\t\t\t\\\n+     N_(\"Lift restrictions on GOT size\") },\t\t\t\t\\\n+  {\"no-xgot\",\t\t -MASK_XGOT,\t\t\t\t\t\\\n+     N_(\"Do not lift restrictions on GOT size\") },\t\t\t\\\n   {\"debug\",\t\t  MASK_DEBUG,\t\t\t\t\t\\\n      NULL},\t\t\t\t\t\t\t\t\\\n   {\"debuga\",\t\t  MASK_DEBUG_A,\t\t\t\t\t\\\n@@ -1082,7 +1087,7 @@ extern const struct mips_cpu_info *mips_tune_info;\n %{membedded-pic} \\\n %{mabi=32:-32}%{mabi=n32:-n32}%{mabi=64:-64}%{mabi=n64:-64} \\\n %{mabi=eabi} %{mabi=o64} %{!mabi*: %(asm_abi_default_spec)} \\\n-%{mgp32} %{mgp64} %{march=*} \\\n+%{mgp32} %{mgp64} %{march=*} %{mxgot:-xgot} \\\n %(target_asm_spec) \\\n %(subtarget_asm_spec)\"\n "}, {"sha": "fb4cf782388da336137a8aea24b5b80f36cb48f2", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee69241016a9700eb663e5ccfadc3c11468711d7/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee69241016a9700eb663e5ccfadc3c11468711d7/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=ee69241016a9700eb663e5ccfadc3c11468711d7", "patch": "@@ -471,7 +471,7 @@ in the following sections.\n -mgas  -mgp32  -mgp64  -mhard-float  -mint64  -mips1 @gol\n -mips2  -mips3  -mips4  -mips32  -mips32r2  -mips64 @gol\n -mlong64  -mlong32  -mlong-calls  -mmemcpy @gol\n--mmips-as  -mmips-tfile  -mno-abicalls @gol\n+-mmips-as  -mmips-tfile  -mno-abicalls  -mxgot @gol\n -mno-embedded-data  -mno-uninit-const-in-rodata @gol\n -mno-embedded-pic  -mno-long-calls @gol\n -mno-memcpy  -mno-mips-tfile  -mno-rnames @gol\n@@ -8067,6 +8067,35 @@ Emit (or do not emit) the pseudo operations @samp{.abicalls},\n @samp{.cpload}, and @samp{.cprestore} that some System V.4 ports use for\n position independent code.\n \n+@item -mxgot\n+@itemx -mno-xgot\n+@opindex mxgot\n+@opindex mno-xgot\n+Lift (or do not lift) the usual restrictions on the size of the global\n+offset table.\n+\n+GCC normally uses a single instruction to load values from the GOT.\n+While this is relatively efficient, it will only work if the GOT\n+is smaller than about 64k.  Anything larger will cause the linker\n+to report an error such as:\n+\n+@cindex relocation truncated to fit (MIPS)\n+@smallexample\n+relocation truncated to fit: R_MIPS_GOT16 foobar\n+@end smallexample\n+\n+If this happens, you should recompile your code with @option{-mxgot}.\n+It should then work with very large GOTs, although it will also be\n+less efficient, since it will take three instructions to fetch the\n+value of a global symbol.\n+\n+Note that some linkers can create multiple GOTs.  If you have such a\n+linker, you should only need to use @option{-mxgot} when a single object\n+file accesses more than 64k's worth of GOT entries.  Very few do.\n+\n+These options have no effect unless GCC is generating position\n+independent code.\n+\n @item -mlong-calls\n @itemx -mno-long-calls\n @opindex mlong-calls"}]}