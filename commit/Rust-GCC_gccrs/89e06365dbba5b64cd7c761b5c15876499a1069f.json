{"sha": "89e06365dbba5b64cd7c761b5c15876499a1069f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODllMDYzNjVkYmJhNWI2NGNkN2M3NjFiNWMxNTg3NjQ5OWExMDY5Zg==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2018-02-01T16:22:56Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2018-02-01T16:22:56Z"}, "message": "re PR target/84128 (i686: Stack spilling in -fstack-clash-protection prologue neglects %esp change)\n\n\tPR target/84128\n\t* config/i386/i386.c (release_scratch_register_on_entry): Add new\n\tOFFSET and RELEASE_VIA_POP arguments.  Use SP+OFFSET to restore\n\tthe scratch if RELEASE_VIA_POP is false.\n\t(ix86_adjust_stack_and_probe_stack_clash): Un-constify SIZE.\n\tIf we have to save a temporary register, decrement SIZE appropriately.\n\tPass new arguments to release_scratch_register_on_entry.\n\t(ix86_adjust_stack_and_probe): Likewise.\n\t(ix86_emit_probe_stack_range): Pass new arguments to\n\trelease_scratch_register_on_entry.\n\n\tPR target/84128\n\t* gcc.target/i386/pr84128.c: New test.\n\nFrom-SVN: r257303", "tree": {"sha": "b2ff6a1b62a89a366d263cb5db9007c76bd02373", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2ff6a1b62a89a366d263cb5db9007c76bd02373"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/89e06365dbba5b64cd7c761b5c15876499a1069f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89e06365dbba5b64cd7c761b5c15876499a1069f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89e06365dbba5b64cd7c761b5c15876499a1069f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89e06365dbba5b64cd7c761b5c15876499a1069f/comments", "author": null, "committer": null, "parents": [{"sha": "ff814010dd090ceb7dded8eae598f0532e59513b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff814010dd090ceb7dded8eae598f0532e59513b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff814010dd090ceb7dded8eae598f0532e59513b"}], "stats": {"total": 132, "additions": 106, "deletions": 26}, "files": [{"sha": "25a1beefe70ae18f6698f9096d3b90780f2b3c55", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89e06365dbba5b64cd7c761b5c15876499a1069f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89e06365dbba5b64cd7c761b5c15876499a1069f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=89e06365dbba5b64cd7c761b5c15876499a1069f", "patch": "@@ -1,3 +1,16 @@\n+2018-02-01  Jeff Law  <law@redhat.com>\n+\n+\tPR target/84128\n+\t* config/i386/i386.c (release_scratch_register_on_entry): Add new\n+\tOFFSET and RELEASE_VIA_POP arguments.  Use SP+OFFSET to restore\n+\tthe scratch if RELEASE_VIA_POP is false.\n+\t(ix86_adjust_stack_and_probe_stack_clash): Un-constify SIZE.\n+\tIf we have to save a temporary register, decrement SIZE appropriately.\n+\tPass new arguments to release_scratch_register_on_entry.\n+\t(ix86_adjust_stack_and_probe): Likewise.\n+\t(ix86_emit_probe_stack_range): Pass new arguments to\n+\trelease_scratch_register_on_entry.\n+\n 2018-02-01  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR rtl-optimization/84157\n@@ -180,7 +193,7 @@\n \t* common.opt (falign-functions=, falign-jumps=, falign-labels=,\n \tfalign-loops=): Add Optimization flag.\n \n-2017-01-30  Jeff Law  <law@redhat.com>\n+2018-01-30  Jeff Law  <law@redhat.com>\n \n \tPR target/84064\n \t* i386.c (ix86_adjust_stack_and_probe_stack_clash): New argument\n@@ -568,7 +581,7 @@\n \t* config/m68k/m68k.c (m68k_promote_function_mode): New function.\n \t(TARGET_PROMOTE_FUNCTION_MODE): New macro.\n \n-2017-01-24  Jeff Law  <law@redhat.com>\n+2018-01-24  Jeff Law  <law@redhat.com>\n \n \tPR target/83994\n \t* i386.c (get_probe_interval): Move to earlier point.\n@@ -3173,7 +3186,7 @@\n \t* doc/sourcebuild.texi (arm_fp16fml_neon_ok, arm_fp16fml_neon):\n \tDocument new effective target and option set.\n \n-2017-01-11  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+2018-01-11  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/arm/arm-cpus.in (armv8_4): New feature.\n \t(ARMv8_4a): New fgroup.\n@@ -3932,7 +3945,7 @@\n \tof first and second elements in UNSPEC_VPERMR vector.\n \t(altivec_expand_vec_perm_le): Likewise.\n \n-2017-01-08  Jeff Law  <law@redhat.com>\n+2018-01-08  Jeff Law  <law@redhat.com>\n \n \tPR rtl-optimizatin/81308\n \t* tree-switch-conversion.c (cfg_altered): New file scoped static.\n@@ -4200,7 +4213,7 @@\n \trange_int_cst_p rather than !symbolic_range_p before calling\n \textract_range_from_multiplicative_op_1.\n \n-2017-01-04  Jeff Law  <law@redhat.com>\n+2018-01-04  Jeff Law  <law@redhat.com>\n \n \t* tree-ssa-math-opts.c (execute_cse_reciprocals_1): Remove\n \tredundant test in assertion.\n@@ -4815,7 +4828,7 @@\n \t* expmed.c (make_tree): Build VECTOR_CSTs directly from the\n \tCONST_VECTOR encoding.\n \n-2017-01-03  Jakub Jelinek  <jakub@redhat.com>\n+2018-01-03  Jakub Jelinek  <jakub@redhat.com>\n \t    Jeff Law  <law@redhat.com>\n \n \tPR target/83641\n@@ -4873,7 +4886,7 @@\n \t(sprintf_dom_walker::compute_format_length): Same.\n \t(try_substitute_return_value): Same.\n \n-2017-01-03  Jeff Law  <law@redhat.com>\n+2018-01-03  Jeff Law  <law@redhat.com>\n \n \tPR middle-end/83654\n \t* explow.c (anti_adjust_stack_and_probe_stack_clash): Test a"}, {"sha": "9943be145ae426c365b829e849c77559f6459038", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 47, "deletions": 15, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89e06365dbba5b64cd7c761b5c15876499a1069f/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89e06365dbba5b64cd7c761b5c15876499a1069f/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=89e06365dbba5b64cd7c761b5c15876499a1069f", "patch": "@@ -12567,22 +12567,39 @@ get_scratch_register_on_entry (struct scratch_reg *sr)\n     }\n }\n \n-/* Release a scratch register obtained from the preceding function.  */\n+/* Release a scratch register obtained from the preceding function.\n+\n+   If RELEASE_VIA_POP is true, we just pop the register off the stack\n+   to release it.  This is what non-Linux systems use with -fstack-check.\n+\n+   Otherwise we use OFFSET to locate the saved register and the\n+   allocated stack space becomes part of the local frame and is\n+   deallocated by the epilogue.  */\n \n static void\n-release_scratch_register_on_entry (struct scratch_reg *sr)\n+release_scratch_register_on_entry (struct scratch_reg *sr, HOST_WIDE_INT offset,\n+\t\t\t\t   bool release_via_pop)\n {\n   if (sr->saved)\n     {\n-      struct machine_function *m = cfun->machine;\n-      rtx x, insn = emit_insn (gen_pop (sr->reg));\n+      if (release_via_pop)\n+\t{\n+\t  struct machine_function *m = cfun->machine;\n+\t  rtx x, insn = emit_insn (gen_pop (sr->reg));\n \n-      /* The RTX_FRAME_RELATED_P mechanism doesn't know about pop.  */\n-      RTX_FRAME_RELATED_P (insn) = 1;\n-      x = gen_rtx_PLUS (Pmode, stack_pointer_rtx, GEN_INT (UNITS_PER_WORD));\n-      x = gen_rtx_SET (stack_pointer_rtx, x);\n-      add_reg_note (insn, REG_FRAME_RELATED_EXPR, x);\n-      m->fs.sp_offset -= UNITS_PER_WORD;\n+\t  /* The RX FRAME_RELATED_P mechanism doesn't know about pop.  */\n+\t  RTX_FRAME_RELATED_P (insn) = 1;\n+\t  x = gen_rtx_PLUS (Pmode, stack_pointer_rtx, GEN_INT (UNITS_PER_WORD));\n+\t  x = gen_rtx_SET (stack_pointer_rtx, x);\n+\t  add_reg_note (insn, REG_FRAME_RELATED_EXPR, x);\n+\t  m->fs.sp_offset -= UNITS_PER_WORD;\n+\t}\n+      else\n+\t{\n+\t  rtx x = gen_rtx_PLUS (Pmode, stack_pointer_rtx, GEN_INT (offset));\n+\t  x = gen_rtx_SET (sr->reg, gen_rtx_MEM (word_mode, x));\n+\t  emit_insn (x);\n+\t}\n     }\n }\n \n@@ -12597,7 +12614,7 @@ release_scratch_register_on_entry (struct scratch_reg *sr)\n    pushed on the stack.  */\n \n static void\n-ix86_adjust_stack_and_probe_stack_clash (const HOST_WIDE_INT size,\n+ix86_adjust_stack_and_probe_stack_clash (HOST_WIDE_INT size,\n \t\t\t\t\t const bool int_registers_saved)\n {\n   struct machine_function *m = cfun->machine;\n@@ -12713,6 +12730,12 @@ ix86_adjust_stack_and_probe_stack_clash (const HOST_WIDE_INT size,\n       struct scratch_reg sr;\n       get_scratch_register_on_entry (&sr);\n \n+      /* If we needed to save a register, then account for any space\n+\t that was pushed (we are not going to pop the register when\n+\t we do the restore).  */\n+      if (sr.saved)\n+\tsize -= UNITS_PER_WORD;\n+\n       /* Step 1: round SIZE down to a multiple of the interval.  */\n       HOST_WIDE_INT rounded_size = size & -probe_interval;\n \n@@ -12761,7 +12784,9 @@ ix86_adjust_stack_and_probe_stack_clash (const HOST_WIDE_INT size,\n \t\t\t\t   m->fs.cfa_reg == stack_pointer_rtx);\n       dump_stack_clash_frame_info (PROBE_LOOP, size != rounded_size);\n \n-      release_scratch_register_on_entry (&sr);\n+      /* This does not deallocate the space reserved for the scratch\n+\t register.  That will be deallocated in the epilogue.  */\n+      release_scratch_register_on_entry (&sr, size, false);\n     }\n \n   /* Make sure nothing is scheduled before we are done.  */\n@@ -12774,7 +12799,7 @@ ix86_adjust_stack_and_probe_stack_clash (const HOST_WIDE_INT size,\n    pushed on the stack.  */\n \n static void\n-ix86_adjust_stack_and_probe (const HOST_WIDE_INT size,\n+ix86_adjust_stack_and_probe (HOST_WIDE_INT size,\n \t\t\t     const bool int_registers_saved)\n {\n   /* We skip the probe for the first interval + a small dope of 4 words and\n@@ -12847,6 +12872,11 @@ ix86_adjust_stack_and_probe (const HOST_WIDE_INT size,\n \n       get_scratch_register_on_entry (&sr);\n \n+      /* If we needed to save a register, then account for any space\n+\t that was pushed (we are not going to pop the register when\n+\t we do the restore).  */\n+      if (sr.saved)\n+\tsize -= UNITS_PER_WORD;\n \n       /* Step 1: round SIZE to the previous multiple of the interval.  */\n \n@@ -12906,7 +12936,9 @@ ix86_adjust_stack_and_probe (const HOST_WIDE_INT size,\n \t\t\t\t\t\t    (get_probe_interval ()\n \t\t\t\t\t\t     + dope))));\n \n-      release_scratch_register_on_entry (&sr);\n+      /* This does not deallocate the space reserved for the scratch\n+\t register.  That will be deallocated in the epilogue.  */\n+      release_scratch_register_on_entry (&sr, size, false);\n     }\n \n   /* Even if the stack pointer isn't the CFA register, we need to correctly\n@@ -13055,7 +13087,7 @@ ix86_emit_probe_stack_range (HOST_WIDE_INT first, HOST_WIDE_INT size,\n \t\t\t\t\t\t       sr.reg),\n \t\t\t\t\t rounded_size - size));\n \n-      release_scratch_register_on_entry (&sr);\n+      release_scratch_register_on_entry (&sr, size, true);\n     }\n \n   /* Make sure nothing is scheduled before we are done.  */"}, {"sha": "8ce7c29050cc72d411345c2ee2ae6cb5452288b5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89e06365dbba5b64cd7c761b5c15876499a1069f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89e06365dbba5b64cd7c761b5c15876499a1069f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=89e06365dbba5b64cd7c761b5c15876499a1069f", "patch": "@@ -1,3 +1,8 @@\n+2018-01-30  Jeff Law  <law@redhat.com>\n+\n+\tPR target/84128\n+\t* gcc.target/i386/pr84128.c: New test.\n+\n 2018-02-01  Georg-Johann Lay  <avr@gjlay.de>\n \n \t* gcc.dg/tree-ssa/vrp111.c (dg-options): Add\n@@ -218,7 +223,7 @@\n \tPR target/84064\n \t* gcc.target/i386/pr84064: New test.\n \n-2017-01-30  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+2018-01-30  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/84134\n \t* gfortran.dg/data_implied_do_2.f90: New test.\n@@ -316,7 +321,7 @@\n \tPR tree-optimization/84057\n \t* gcc.dg/graphite/pr84057.c: New testcase.\n \n-2017-01-29  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+2018-01-29  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/84073\n \t* gfortran.dg/bind_c_usage_31.f90: New test.\n@@ -2489,7 +2494,7 @@\n \tcheck_effective_target_arm_fp16fml_neon_ok,\n \tadd_options_for_arm_fp16fml_neon): New procedures.\n \n-2017-01-11  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+2018-01-11  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* gcc.target/arm/multilib.exp: Add some -march=armv8.4-a\n \tcombination tests.\n@@ -2747,7 +2752,7 @@\n \tPR c++/83734\n \t* g++.dg/cpp0x/pr83734.C: New test.\n \n-2017-01-09 Carl Love  <cel@us.ibm.com>\n+2018-01-09 Carl Love  <cel@us.ibm.com>\n \n \t* gcc.target/powerpc/builtins-1.c (main): Add tests for vec_mergee and\n \tvec_mergeo builtins with float, double, long long, unsigned long long,"}, {"sha": "a8323fd6ddee3b0dfbeecd35f75233dec3468b3b", "filename": "gcc/testsuite/gcc.target/i386/pr84128.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89e06365dbba5b64cd7c761b5c15876499a1069f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr84128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89e06365dbba5b64cd7c761b5c15876499a1069f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr84128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr84128.c?ref=89e06365dbba5b64cd7c761b5c15876499a1069f", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -march=i686 -mtune=generic -fstack-clash-protection\" } */\n+/* { dg-require-effective-target ia32 } */\n+\n+__attribute__ ((noinline, noclone, weak, regparm (3)))\n+int\n+f1 (long arg0, int (*pf) (long, void *))\n+{\n+  unsigned char buf[32768];\n+  return pf (arg0, buf);\n+}\n+\n+__attribute__ ((noinline, noclone, weak))\n+int\n+f2 (long arg0, void *ignored)\n+{\n+  if (arg0 != 17)\n+    __builtin_abort ();\n+  return 19;\n+}\n+\n+int\n+main (void)\n+{\n+  if (f1 (17, f2) != 19)\n+    __builtin_abort ();\n+  return 0;\n+}\n+\n+"}]}