{"sha": "b1ecb86569f63f897f6a95049c4ccf400bddeaad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjFlY2I4NjU2OWY2M2Y4OTdmNmE5NTA0OWM0Y2NmNDAwYmRkZWFhZA==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2020-11-17T02:47:39Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2020-11-17T02:47:39Z"}, "message": "PR middle-end/95673 - missing -Wstring-compare for an impossible strncmp test\n\ngcc/ChangeLog:\n\n\tPR middle-end/95673\n\t* tree-ssa-strlen.c (used_only_for_zero_equality): Rename...\n\t(use_in_zero_equality): ...to this.  Add a default argument.\n\t(handle_builtin_memcmp): Adjust to the name change above.\n\t(handle_builtin_string_cmp): Same.\n\t(maybe_warn_pointless_strcmp): Same.  Pass in an explicit argument.\n\ngcc/testsuite/ChangeLog:\n\n\tPR middle-end/95673\n\t* gcc.dg/Wstring-compare-3.c: New test.", "tree": {"sha": "f7c22f08535842dd7204679011de3da1433bdab9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f7c22f08535842dd7204679011de3da1433bdab9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b1ecb86569f63f897f6a95049c4ccf400bddeaad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1ecb86569f63f897f6a95049c4ccf400bddeaad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1ecb86569f63f897f6a95049c4ccf400bddeaad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1ecb86569f63f897f6a95049c4ccf400bddeaad/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8e4c55cbc09fbbe136b2ba2da405d7bdced07ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8e4c55cbc09fbbe136b2ba2da405d7bdced07ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8e4c55cbc09fbbe136b2ba2da405d7bdced07ae"}], "stats": {"total": 159, "additions": 142, "deletions": 17}, "files": [{"sha": "d4d7121dba7268769006d26a57312590e7907183", "filename": "gcc/testsuite/gcc.dg/Wstring-compare-3.c", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1ecb86569f63f897f6a95049c4ccf400bddeaad/gcc%2Ftestsuite%2Fgcc.dg%2FWstring-compare-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1ecb86569f63f897f6a95049c4ccf400bddeaad/gcc%2Ftestsuite%2Fgcc.dg%2FWstring-compare-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWstring-compare-3.c?ref=b1ecb86569f63f897f6a95049c4ccf400bddeaad", "patch": "@@ -0,0 +1,106 @@\n+/* PR middle-end/95673 - missing -Wstring-compare for an impossible strncmp test\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall -Wstring-compare -ftrack-macro-expansion=0\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+extern int strcmp (const char*, const char*);\n+extern int strncmp (const char*, const char*, size_t);\n+\n+void sink (int, ...);\n+\n+extern char a3[3];\n+\n+int nowarn_strcmp_one_use_ltz (int c)\n+{\n+  const char *s = c ? \"1234\" : a3;\n+  int n = strcmp (s, \"123\");\n+  return n < 0;\n+}\n+\n+\n+int nowarn_strcmp_one_use_eqnz (int c)\n+{\n+  const char *s = c ? \"12345\" : a3;\n+  int n = strcmp (s, \"123\");\n+  return n == 1;\n+}\n+\n+\n+int warn_strcmp_one_use_eqz (int c)\n+{\n+  const char *s = c ? \"123456\" : a3;\n+  int n = strcmp (s, \"123\");    // { dg-warning \"'strcmp' of a string of length 3 and an array of size 3 evaluates to nonzero\" }\n+  return n == 0;                // { dg-message \"in this expression\" }\n+}\n+\n+\n+int warn_strcmp_one_use_bang (int c)\n+{\n+  const char *s = c ? \"1234567\" : a3;\n+  int n = strcmp (s, \"123\");    // { dg-warning \"'strcmp' of a string of length 3 and an array of size 3 evaluates to nonzero\" }\n+  return !n;                    // { dg-message \"in this expression\" }\n+}\n+\n+\n+int warn_strcmp_one_use_bang_bang (int c)\n+{\n+  const char *s = c ? \"12345678\" : a3;\n+  int n = strcmp (s, \"123\");    // { dg-warning \"'strcmp' of a string of length 3 and an array of size 3 evaluates to nonzero\" }\n+  return !!n;                   // { dg-message \"in this expression\" }\n+}\n+\n+\n+_Bool warn_one_use_bool (int c)\n+{\n+  const char *s = c ? \"123456789\" : a3;\n+  int n = strcmp (s, \"123\");    // { dg-warning \"'strcmp' of a string of length 3 and an array of size 3 evaluates to nonzero\" }\n+  return (_Bool)n;              // { dg-message \"in this expression\" }\n+}\n+\n+\n+int warn_strcmp_one_use_cond (int c)\n+{\n+  const char *s = c ? \"1234567890\" : a3;\n+  int n = strcmp (s, \"123\");    // { dg-warning \"'strcmp' of a string of length 3 and an array of size 3 evaluates to nonzero\" }\n+  return n ? 3 : 5;             // { dg-message \"in this expression\" }\n+}\n+\n+\n+int nowarn_strcmp_multiple_uses (int c)\n+{\n+  const char *s = c ? \"1234\" : a3;\n+  int n = strcmp (s, \"123\");\n+  sink (n < 0);\n+  sink (n > 0);\n+  sink (n <= 0);\n+  sink (n >= 0);\n+  sink (n + 1);\n+  return n;\n+}\n+\n+\n+int warn_strcmp_multiple_uses (int c)\n+{\n+  const char *s = c ? \"12345\" : a3;\n+  int n = strcmp (s, \"123\");    // { dg-warning \"'strcmp' of a string of length 3 and an array of size 3 evaluates to nonzero\" }\n+  sink (n < 0);\n+  sink (n > 0);\n+  sink (n <= 0);\n+  sink (n >= 0);\n+  sink (n == 0);                // { dg-message \"in this expression\" }\n+  return n;\n+}\n+\n+\n+int warn_strncmp_multiple_uses (int c)\n+{\n+  const char *s = a3;\n+  int n = strncmp (s, \"1234\", 4); // { dg-warning \"'strncmp' of a string of length 4, an array of size 3 and bound of 4 evaluates to nonzero\" }\n+  sink (n < 0);\n+  sink (n > 0);\n+  sink (n <= 0);\n+  sink (n >= 0);\n+  sink (n == 0);                // { dg-message \"in this expression\" }\n+  return n;\n+}"}, {"sha": "a5e78a89e652f5da0a4cc12e9634e774dc2a0ece", "filename": "gcc/tree-ssa-strlen.c", "status": "modified", "additions": 36, "deletions": 17, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1ecb86569f63f897f6a95049c4ccf400bddeaad/gcc%2Ftree-ssa-strlen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1ecb86569f63f897f6a95049c4ccf400bddeaad/gcc%2Ftree-ssa-strlen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-strlen.c?ref=b1ecb86569f63f897f6a95049c4ccf400bddeaad", "patch": "@@ -3989,11 +3989,13 @@ handle_builtin_memset (gimple_stmt_iterator *gsi, bool *zero_write,\n   return true;\n }\n \n-/* Return a pointer to the first such equality expression if RES is used\n-   only in expressions testing its equality to zero, and null otherwise.  */\n+/* Return first such statement if RES is used in statements testing its\n+   equality to zero, and null otherwise.  If EXCLUSIVE is true, return\n+   nonnull if and only RES is used in such expressions exclusively and\n+   in none other.  */\n \n static gimple *\n-used_only_for_zero_equality (tree res)\n+use_in_zero_equality (tree res, bool exclusive = true)\n {\n   gimple *first_use = NULL;\n \n@@ -4006,6 +4008,7 @@ used_only_for_zero_equality (tree res)\n \n       if (is_gimple_debug (use_stmt))\n         continue;\n+\n       if (gimple_code (use_stmt) == GIMPLE_ASSIGN)\n \t{\n \t  tree_code code = gimple_assign_rhs_code (use_stmt);\n@@ -4015,25 +4018,41 @@ used_only_for_zero_equality (tree res)\n \t      if ((TREE_CODE (cond_expr) != EQ_EXPR\n \t\t   && (TREE_CODE (cond_expr) != NE_EXPR))\n \t\t  || !integer_zerop (TREE_OPERAND (cond_expr, 1)))\n-\t\treturn NULL;\n+\t\t{\n+\t\t  if (exclusive)\n+\t\t    return NULL;\n+\t\t  continue;\n+\t\t}\n \t    }\n \t  else if (code == EQ_EXPR || code == NE_EXPR)\n \t    {\n \t      if (!integer_zerop (gimple_assign_rhs2 (use_stmt)))\n-\t\treturn NULL;\n+\t\t{\n+\t\t  if (exclusive)\n+\t\t    return NULL;\n+\t\t  continue;\n+\t\t}\n             }\n-\t  else\n+\t  else if (exclusive)\n \t    return NULL;\n+\t  else\n+\t    continue;\n \t}\n       else if (gimple_code (use_stmt) == GIMPLE_COND)\n \t{\n \t  tree_code code = gimple_cond_code (use_stmt);\n \t  if ((code != EQ_EXPR && code != NE_EXPR)\n \t      || !integer_zerop (gimple_cond_rhs (use_stmt)))\n-\t    return NULL;\n+\t    {\n+\t      if (exclusive)\n+\t\treturn NULL;\n+\t      continue;\n+\t    }\n \t}\n+      else if (exclusive)\n+\treturn NULL;\n       else\n-        return NULL;\n+\tcontinue;\n \n       if (!first_use)\n \tfirst_use = use_stmt;\n@@ -4053,7 +4072,7 @@ handle_builtin_memcmp (gimple_stmt_iterator *gsi)\n   gcall *stmt = as_a <gcall *> (gsi_stmt (*gsi));\n   tree res = gimple_call_lhs (stmt);\n \n-  if (!res || !used_only_for_zero_equality (res))\n+  if (!res || !use_in_zero_equality (res))\n     return false;\n \n   tree arg1 = gimple_call_arg (stmt, 0);\n@@ -4317,7 +4336,7 @@ maybe_warn_pointless_strcmp (gimple *stmt, HOST_WIDE_INT bound,\n \t\t\t     unsigned HOST_WIDE_INT siz)\n {\n   tree lhs = gimple_call_lhs (stmt);\n-  gimple *use = used_only_for_zero_equality (lhs);\n+  gimple *use = use_in_zero_equality (lhs, /* exclusive = */ false);\n   if (!use)\n     return;\n \n@@ -4367,12 +4386,12 @@ maybe_warn_pointless_strcmp (gimple *stmt, HOST_WIDE_INT bound,\n \t\t\t     stmt, callee, minlen, siz, bound);\n     }\n \n-  if (warned)\n-    {\n-      location_t use_loc = gimple_location (use);\n-      if (LOCATION_LINE (stmt_loc) != LOCATION_LINE (use_loc))\n-\tinform (use_loc, \"in this expression\");\n-    }\n+  if (!warned)\n+    return;\n+\n+  location_t use_loc = gimple_location (use);\n+  if (LOCATION_LINE (stmt_loc) != LOCATION_LINE (use_loc))\n+    inform (use_loc, \"in this expression\");\n }\n \n \n@@ -4507,7 +4526,7 @@ handle_builtin_string_cmp (gimple_stmt_iterator *gsi, range_query *rvals)\n   /* The size of the array in which the unknown string is stored.  */\n   HOST_WIDE_INT varsiz = arysiz1 < 0 ? arysiz2 : arysiz1;\n \n-  if ((varsiz < 0 || cmpsiz < varsiz) && used_only_for_zero_equality (lhs))\n+  if ((varsiz < 0 || cmpsiz < varsiz) && use_in_zero_equality (lhs))\n     {\n       /* If the known length is less than the size of the other array\n \t and the strcmp result is only used to test equality to zero,"}]}