{"sha": "2611b5ba2e1e9bffe94f47f31b299bc84a0c5136", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjYxMWI1YmEyZTFlOWJmZmU5NGY0N2YzMWIyOTliYzg0YTBjNTEzNg==", "commit": {"author": {"name": "Paul Koning", "email": "ni1d@arrl.net", "date": "2012-09-17T19:12:32Z"}, "committer": {"name": "Paul Koning", "email": "pkoning@gcc.gnu.org", "date": "2012-09-17T19:12:32Z"}, "message": "invoke.text (-feliminate-unused-debug-types): Update to reflect that this is enabled by default.\n\n2012-09-17  Paul Koning  <ni1d@arrl.net>\n\n\t    * doc/invoke.text (-feliminate-unused-debug-types): Update to\n\t    reflect that this is enabled by default.\n\nFrom-SVN: r191404", "tree": {"sha": "2707a154c92433c0e91e8690c6c8dbb00c6c0021", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2707a154c92433c0e91e8690c6c8dbb00c6c0021"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2611b5ba2e1e9bffe94f47f31b299bc84a0c5136", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2611b5ba2e1e9bffe94f47f31b299bc84a0c5136", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2611b5ba2e1e9bffe94f47f31b299bc84a0c5136", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2611b5ba2e1e9bffe94f47f31b299bc84a0c5136/comments", "author": null, "committer": null, "parents": [{"sha": "61aa9333bad2876fb298f454dfd3d42836226f5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61aa9333bad2876fb298f454dfd3d42836226f5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61aa9333bad2876fb298f454dfd3d42836226f5e"}], "stats": {"total": 18, "additions": 12, "deletions": 6}, "files": [{"sha": "3298a9f5436fc2682726e2fdfd1cd3aac0a6e8b7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2611b5ba2e1e9bffe94f47f31b299bc84a0c5136/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2611b5ba2e1e9bffe94f47f31b299bc84a0c5136/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2611b5ba2e1e9bffe94f47f31b299bc84a0c5136", "patch": "@@ -1,3 +1,8 @@\n+2012-09-17  Paul Koning  <ni1d@arrl.net>\n+\n+\t* doc/invoke.text (-feliminate-unused-debug-types): Update to\n+\treflect that this is enabled by default.\n+\n 2012-09-17  Ben Cheng  <bccheng@google.com\n \n \t* config/arm/linux-elf.h (LINUX_TARGET_LINK_SPEC): Suppress the"}, {"sha": "5ee85d4e50c0bb4fa275ea2b9080f6c81c623ebc", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2611b5ba2e1e9bffe94f47f31b299bc84a0c5136/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2611b5ba2e1e9bffe94f47f31b299bc84a0c5136/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=2611b5ba2e1e9bffe94f47f31b299bc84a0c5136", "patch": "@@ -324,7 +324,7 @@ Objective-C and Objective-C++ Dialects}.\n -fdump-tree-storeccp@r{[}-@var{n}@r{]} @gol\n -fdump-final-insns=@var{file} @gol\n -fcompare-debug@r{[}=@var{opts}@r{]}  -fcompare-debug-second @gol\n--feliminate-dwarf2-dups -feliminate-unused-debug-types @gol\n+-feliminate-dwarf2-dups -fno-eliminate-unused-debug-types @gol\n -feliminate-unused-debug-symbols -femit-class-debug-always @gol\n -fenable-@var{kind}-@var{pass} @gol\n -fenable-@var{kind}-@var{pass}=@var{range-list} @gol\n@@ -6192,17 +6192,18 @@ anything else.\n Print the compiler's built-in specs---and don't do anything else.  (This\n is used when GCC itself is being built.)  @xref{Spec Files}.\n \n-@item -feliminate-unused-debug-types\n+@item -fno-eliminate-unused-debug-types\n @opindex feliminate-unused-debug-types\n-Normally, when producing DWARF 2 output, GCC emits debugging\n+@opindex fno-eliminate-unused-debug-types\n+Normally, when producing DWARF 2 output, GCC avoids producing debug symbol \n+output for types that are nowhere used in the source file being compiled.\n+Sometimes it is useful to have GCC emit debugging\n information for all types declared in a compilation\n unit, regardless of whether or not they are actually used\n-in that compilation unit.  Sometimes this is useful, such as\n+in that compilation unit, for example \n if, in the debugger, you want to cast a value to a type that is\n not actually used in your program (but is declared).  More often,\n however, this results in a significant amount of wasted space.\n-With this option, GCC avoids producing debug symbol output\n-for types that are nowhere used in the source file being compiled.\n @end table\n \n @node Optimize Options"}]}