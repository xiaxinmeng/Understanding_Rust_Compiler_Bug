{"sha": "97623b520bfe0d1f1bf554c50ed14483240db321", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTc2MjNiNTIwYmZlMGQxZjFiZjU1NGM1MGVkMTQ0ODMyNDBkYjMyMQ==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2019-06-10T15:54:58Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2019-06-10T15:54:58Z"}, "message": "gimple-fold.c (get_range_strlen): Update comment that didn't make it into r267503 or related commits.\n\n\ngcc/ChangeLog:\n\n\t* gimple-fold.c (get_range_strlen): Update comment that didn't\n\tmake it into r267503 or related commits.\n\nFrom-SVN: r272120", "tree": {"sha": "31f209db13c8363ab29aad0c1ff32a8294639a49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/31f209db13c8363ab29aad0c1ff32a8294639a49"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97623b520bfe0d1f1bf554c50ed14483240db321", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97623b520bfe0d1f1bf554c50ed14483240db321", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97623b520bfe0d1f1bf554c50ed14483240db321", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97623b520bfe0d1f1bf554c50ed14483240db321/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c31783fd1860b2d74e91bc490d564680ba9f71c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c31783fd1860b2d74e91bc490d564680ba9f71c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c31783fd1860b2d74e91bc490d564680ba9f71c4"}], "stats": {"total": 39, "additions": 15, "deletions": 24}, "files": [{"sha": "9327d9778c73ab5ff3efb61302d48ea7f48ff70f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97623b520bfe0d1f1bf554c50ed14483240db321/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97623b520bfe0d1f1bf554c50ed14483240db321/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=97623b520bfe0d1f1bf554c50ed14483240db321", "patch": "@@ -1,3 +1,8 @@\n+2019-06-10  Martin Sebor  <msebor@redhat.com>\n+\n+\t* gimple-fold.c (get_range_strlen): Update comment that didn't\n+\tmake it into r267503 or related commits.\n+\n 2019-06-10  Vladislav Ivanishin  <vlad@ispras.ru>\n \n \t* gcov-tool.c (merge_usage, rewrite_usage): Mark with"}, {"sha": "dfb31a0207832be0266c98a0fdf8f71660f40289", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 10, "deletions": 24, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97623b520bfe0d1f1bf554c50ed14483240db321/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97623b520bfe0d1f1bf554c50ed14483240db321/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=97623b520bfe0d1f1bf554c50ed14483240db321", "patch": "@@ -1672,30 +1672,16 @@ get_range_strlen (tree arg, bitmap *visited,\n     }\n }\n \n-/* Determine the minimum and maximum value or string length that ARG\n-   refers to and store each in the first two elements of MINMAXLEN.\n-   For expressions that point to strings of unknown lengths that are\n-   character arrays, use the upper bound of the array as the maximum\n-   length.  For example, given an expression like 'x ? array : \"xyz\"'\n-   and array declared as 'char array[8]', MINMAXLEN[0] will be set\n-   to 0 and MINMAXLEN[1] to 7, the longest string that could be\n-   stored in array.\n-   Return true if the range of the string lengths has been obtained\n-   from the upper bound of an array at the end of a struct.  Such\n-   an array may hold a string that's longer than its upper bound\n-   due to it being used as a poor-man's flexible array member.\n-\n-   STRICT is true if it will handle PHIs and COND_EXPRs conservatively\n-   and false if PHIs and COND_EXPRs are to be handled optimistically,\n-   if we can determine string length minimum and maximum; it will use\n-   the minimum from the ones where it can be determined.\n-   STRICT false should be only used for warning code.\n-   When non-null, clear *NONSTR if ARG refers to a constant array\n-   that is known not be nul-terminated.  Otherwise set it to\n-   the declaration of the constant non-terminated array.\n-\n-   ELTSIZE is 1 for normal single byte character strings, and 2 or\n-   4 for wide characer strings.  ELTSIZE is by default 1.  */\n+/* Try to obtain the range of the lengths of the string(s) referenced\n+   by ARG, or the size of the largest array ARG refers to if the range\n+   of lengths cannot be determined, and store all in *PDATA.  ELTSIZE\n+   is the expected size of the string element in bytes: 1 for char and\n+   some power of 2 for wide characters.\n+   Return true if the range [PDATA->MINLEN, PDATA->MAXLEN] is suitable\n+   for optimization.  Returning false means that a nonzero PDATA->MINLEN\n+   doesn't reflect the true lower bound of the range when PDATA->MAXLEN\n+   is -1 (in that case, the actual range is indeterminate, i.e.,\n+   [0, PTRDIFF_MAX - 2].  */\n \n bool\n get_range_strlen (tree arg, c_strlen_data *pdata, unsigned eltsize)"}]}