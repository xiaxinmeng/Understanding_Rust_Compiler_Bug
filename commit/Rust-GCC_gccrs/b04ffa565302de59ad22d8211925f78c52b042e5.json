{"sha": "b04ffa565302de59ad22d8211925f78c52b042e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjA0ZmZhNTY1MzAyZGU1OWFkMjJkODIxMTkyNWY3OGM1MmIwNDJlNQ==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2012-06-28T13:53:51Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2012-06-28T13:53:51Z"}, "message": "re PR other/53595 (Code size increase of +10% between two 4.7.1 snapshot)\n\n\tPR 53595\n\t* config/avr/avr.c (avr_hard_regno_call_part_clobbered): New.\n\t* config/avr/avr-protos.h (avr_hard_regno_call_part_clobbered): New.\n\t* config/avr/avr.h (HARD_REGNO_CALL_PART_CLOBBERED): Forward to\n\tavr_hard_regno_call_part_clobbered.\n\nFrom-SVN: r189049", "tree": {"sha": "25d4b89100af9db23b7feb3d67f9815625d19593", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25d4b89100af9db23b7feb3d67f9815625d19593"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b04ffa565302de59ad22d8211925f78c52b042e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b04ffa565302de59ad22d8211925f78c52b042e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b04ffa565302de59ad22d8211925f78c52b042e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b04ffa565302de59ad22d8211925f78c52b042e5/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd8e704ff4bfb4594a4d9e1dd816cafa0e67f1d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd8e704ff4bfb4594a4d9e1dd816cafa0e67f1d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd8e704ff4bfb4594a4d9e1dd816cafa0e67f1d0"}], "stats": {"total": 37, "additions": 33, "deletions": 4}, "files": [{"sha": "04a35102a38b12155c6fb95e759163c0fd512081", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04ffa565302de59ad22d8211925f78c52b042e5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04ffa565302de59ad22d8211925f78c52b042e5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b04ffa565302de59ad22d8211925f78c52b042e5", "patch": "@@ -1,3 +1,11 @@\n+2012-06-28  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\tPR 53595\n+\t* config/avr/avr.c (avr_hard_regno_call_part_clobbered): New.\n+\t* config/avr/avr-protos.h (avr_hard_regno_call_part_clobbered): New.\n+\t* config/avr/avr.h (HARD_REGNO_CALL_PART_CLOBBERED): Forward to\n+\tavr_hard_regno_call_part_clobbered.\n+\n 2012-06-28  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/53790"}, {"sha": "7b9b05effa60ddc81a708712c6a0aa5acaccd8c4", "filename": "gcc/config/avr/avr-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04ffa565302de59ad22d8211925f78c52b042e5/gcc%2Fconfig%2Favr%2Favr-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04ffa565302de59ad22d8211925f78c52b042e5/gcc%2Fconfig%2Favr%2Favr-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-protos.h?ref=b04ffa565302de59ad22d8211925f78c52b042e5", "patch": "@@ -47,6 +47,7 @@ extern void init_cumulative_args (CUMULATIVE_ARGS *cum, tree fntype,\n #endif /* TREE_CODE */\n \n #ifdef RTX_CODE\n+extern int avr_hard_regno_call_part_clobbered (unsigned, enum machine_mode);\n extern const char *output_movqi (rtx insn, rtx operands[], int *l);\n extern const char *output_movhi (rtx insn, rtx operands[], int *l);\n extern const char *output_movsisf (rtx insn, rtx operands[], int *l);"}, {"sha": "68048b603e86b661774c10f1564611243fcb7cbf", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04ffa565302de59ad22d8211925f78c52b042e5/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04ffa565302de59ad22d8211925f78c52b042e5/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=b04ffa565302de59ad22d8211925f78c52b042e5", "patch": "@@ -8856,6 +8856,28 @@ avr_hard_regno_mode_ok (int regno, enum machine_mode mode)\n }\n \n \n+/* Implement `HARD_REGNO_CALL_PART_CLOBBERED'.  */\n+\n+int\n+avr_hard_regno_call_part_clobbered (unsigned regno, enum machine_mode mode)\n+{\n+  /* FIXME: This hook gets called with MODE:REGNO combinations that don't\n+        represent valid hard registers like, e.g. HI:29.  Returning TRUE\n+        for such registers can lead to performance degradation as mentioned\n+        in PR53595.  Thus, report invalid hard registers as FALSE.  */\n+  \n+  if (!avr_hard_regno_mode_ok (regno, mode))\n+    return 0;\n+  \n+  /* Return true if any of the following boundaries is crossed:\n+     17/18, 27/28 and 29/30.  */\n+  \n+  return ((regno < 18 && regno + GET_MODE_SIZE (mode) > 18)\n+          || (regno < REG_Y && regno + GET_MODE_SIZE (mode) > REG_Y)\n+          || (regno < REG_Z && regno + GET_MODE_SIZE (mode) > REG_Z));\n+}\n+\n+\n /* Implement `MODE_CODE_BASE_REG_CLASS'.  */\n \n enum reg_class"}, {"sha": "48fd49544f8c1727dc65d7fa17447b96c7930fc5", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04ffa565302de59ad22d8211925f78c52b042e5/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04ffa565302de59ad22d8211925f78c52b042e5/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=b04ffa565302de59ad22d8211925f78c52b042e5", "patch": "@@ -402,10 +402,8 @@ enum reg_class {\n \n #define REGNO_OK_FOR_INDEX_P(NUM) 0\n \n-#define HARD_REGNO_CALL_PART_CLOBBERED(REGNO, MODE)                    \\\n-  (((REGNO) < 18 && (REGNO) + GET_MODE_SIZE (MODE) > 18)               \\\n-   || ((REGNO) < REG_Y && (REGNO) + GET_MODE_SIZE (MODE) > REG_Y)      \\\n-   || ((REGNO) < REG_Z && (REGNO) + GET_MODE_SIZE (MODE) > REG_Z))\n+#define HARD_REGNO_CALL_PART_CLOBBERED(REGNO, MODE)     \\\n+  avr_hard_regno_call_part_clobbered (REGNO, MODE)\n \n #define TARGET_SMALL_REGISTER_CLASSES_FOR_MODE_P hook_bool_mode_true\n "}]}