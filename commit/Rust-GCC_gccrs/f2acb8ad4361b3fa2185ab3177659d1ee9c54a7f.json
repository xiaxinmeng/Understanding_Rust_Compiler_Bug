{"sha": "f2acb8ad4361b3fa2185ab3177659d1ee9c54a7f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjJhY2I4YWQ0MzYxYjNmYTIxODVhYjMxNzc2NTlkMWVlOWM1NGE3Zg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2014-11-19T22:06:26Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2014-11-19T22:06:26Z"}, "message": "re PR c++/63885 (ICE in static assert of constexpr forwarding xvalue container member rvalue reference)\n\n\tPR c++/63885\n\t* constexpr.c (cxx_eval_constant_expression) [PARM_DECL]: Don't\n\tcomplain yet about a reference.\n\t[TARGET_EXPR]: Handle TARGET_EXPR with addr == true.\n\t[ADDR_EXPR]: Make sure we don't take the address of a CONSTRUCTOR.\n\t(cxx_bind_parameters_in_call): In the new scheme addr is always false.\n\t* typeck.c (build_address): Don't take the address of a CONSTRUCTOR.\n\nFrom-SVN: r217815", "tree": {"sha": "5f8522922e6a15dcc1d69df83ed7a5b6b0ec3ebc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f8522922e6a15dcc1d69df83ed7a5b6b0ec3ebc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2acb8ad4361b3fa2185ab3177659d1ee9c54a7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2acb8ad4361b3fa2185ab3177659d1ee9c54a7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2acb8ad4361b3fa2185ab3177659d1ee9c54a7f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2acb8ad4361b3fa2185ab3177659d1ee9c54a7f/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "69eb4fde588c5c2e4e206aeba9a5a17fcaf5cecb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69eb4fde588c5c2e4e206aeba9a5a17fcaf5cecb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69eb4fde588c5c2e4e206aeba9a5a17fcaf5cecb"}], "stats": {"total": 84, "additions": 82, "deletions": 2}, "files": [{"sha": "8f21d8b114699a5585c1a64fdc3f8b6b144b4dcf", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2acb8ad4361b3fa2185ab3177659d1ee9c54a7f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2acb8ad4361b3fa2185ab3177659d1ee9c54a7f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f2acb8ad4361b3fa2185ab3177659d1ee9c54a7f", "patch": "@@ -1,5 +1,13 @@\n 2014-11-19  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/63885\n+\t* constexpr.c (cxx_eval_constant_expression) [PARM_DECL]: Don't\n+\tcomplain yet about a reference.\n+\t[TARGET_EXPR]: Handle TARGET_EXPR with addr == true.\n+\t[ADDR_EXPR]: Make sure we don't take the address of a CONSTRUCTOR.\n+\t(cxx_bind_parameters_in_call): In the new scheme addr is always false.\n+\t* typeck.c (build_address): Don't take the address of a CONSTRUCTOR.\n+\n \tPR c++/57979\n \t* init.c (decl_really_constant_value): Rename from\n \tintegral_constant_value."}, {"sha": "41867b8dc287dac25579492ecda1e85b192bcbb5", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2acb8ad4361b3fa2185ab3177659d1ee9c54a7f/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2acb8ad4361b3fa2185ab3177659d1ee9c54a7f/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=f2acb8ad4361b3fa2185ab3177659d1ee9c54a7f", "patch": "@@ -1061,6 +1061,7 @@ cxx_bind_parameters_in_call (const constexpr_ctx *ctx, tree t,\n \t  x = ctx->object;\n \t  x = cp_build_addr_expr (x, tf_warning_or_error);\n \t}\n+      bool addr = false;\n       if (parms && DECL_BY_REFERENCE (parms) && !use_new_call)\n \t{\n \t  /* cp_genericize made this a reference for argument passing, but\n@@ -1071,9 +1072,9 @@ cxx_bind_parameters_in_call (const constexpr_ctx *ctx, tree t,\n \t  gcc_assert (TREE_CODE (TREE_TYPE (x)) == REFERENCE_TYPE);\n \t  type = TREE_TYPE (type);\n \t  x = convert_from_reference (x);\n+\t  addr = true;\n \t}\n-      arg = cxx_eval_constant_expression (ctx, x,\n-\t\t\t\t\t  TREE_CODE (type) == REFERENCE_TYPE,\n+      arg = cxx_eval_constant_expression (ctx, x, addr,\n \t\t\t\t\t  non_constant_p, overflow_p);\n       /* Don't VERIFY_CONSTANT here.  */\n       if (*non_constant_p && ctx->quiet)\n@@ -2854,6 +2855,8 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n \tr = *p;\n       else if (addr)\n \t/* Defer in case this is only used for its type.  */;\n+      else if (TREE_CODE (TREE_TYPE (t)) == REFERENCE_TYPE)\n+\t/* Defer, there's no lvalue->rvalue conversion.  */;\n       else if (is_empty_class (TREE_TYPE (t)))\n \t{\n \t  /* If the class is empty, we aren't actually loading anything.  */\n@@ -2934,6 +2937,12 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n       if (!*non_constant_p)\n \t/* Adjust the type of the result to the type of the temporary.  */\n \tr = adjust_temp_type (TREE_TYPE (t), r);\n+      if (addr)\n+\t{\n+\t  tree slot = TARGET_EXPR_SLOT (t);\n+\t  ctx->values->put (slot, r);\n+\t  return slot;\n+\t}\n       break;\n \n     case INIT_EXPR:\n@@ -2995,6 +3004,7 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n \t/* Don't VERIFY_CONSTANT here.  */\n \tif (*non_constant_p)\n \t  return t;\n+\tgcc_checking_assert (TREE_CODE (op) != CONSTRUCTOR);\n \t/* This function does more aggressive folding than fold itself.  */\n \tr = build_fold_addr_expr_with_type (op, TREE_TYPE (t));\n \tif (TREE_CODE (r) == ADDR_EXPR && TREE_OPERAND (r, 0) == oldop)"}, {"sha": "71568515389516a88cca5c30adfb4066482d8635", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2acb8ad4361b3fa2185ab3177659d1ee9c54a7f/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2acb8ad4361b3fa2185ab3177659d1ee9c54a7f/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=f2acb8ad4361b3fa2185ab3177659d1ee9c54a7f", "patch": "@@ -5305,6 +5305,7 @@ build_address (tree t)\n {\n   if (error_operand_p (t) || !cxx_mark_addressable (t))\n     return error_mark_node;\n+  gcc_checking_assert (TREE_CODE (t) != CONSTRUCTOR);\n   t = build_fold_addr_expr (t);\n   if (TREE_CODE (t) != ADDR_EXPR)\n     t = rvalue (t);"}, {"sha": "04de9c7e04caf498a0b3f35e073948ed1950ef04", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-ref8.C", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2acb8ad4361b3fa2185ab3177659d1ee9c54a7f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ref8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2acb8ad4361b3fa2185ab3177659d1ee9c54a7f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ref8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ref8.C?ref=f2acb8ad4361b3fa2185ab3177659d1ee9c54a7f", "patch": "@@ -0,0 +1,61 @@\n+// PR c++/63885\n+// { dg-do compile { target c++11 } }\n+\n+template<class T> struct remove_reference { typedef T type; };\n+template<class T> struct remove_reference<T&> { typedef T type; };\n+template<class T> struct remove_reference<T&&> { typedef T type; };\n+\n+template<class T> struct is_lvalue_reference { static const bool value = false; };\n+template<class T> struct is_lvalue_reference<T&> { static const bool value = true; };\n+\n+template <bool B, class U, class V> struct conditional;\n+template <class U, class V> struct conditional<true, U, V> { typedef U type; };\n+template <class U, class V> struct conditional<false, U, V> { typedef V type; };\n+\n+template<typename _Tp> constexpr _Tp&&\n+forward(typename remove_reference<_Tp>::type& __t) noexcept\n+{ return static_cast<_Tp&&>(__t); }\n+\n+///////////////////////////////////////////////////////////////////////////////\n+\n+template <typename C> struct member_forward\n+{\n+    typedef typename remove_reference <C>::type::type T;\n+    typedef typename conditional\n+    <\n+        is_lvalue_reference <C &&>::value,\n+        T&,\n+        T\n+    >::type type;\n+};\n+\n+template <typename C> using member_forward_t = typename member_forward <C>::type;\n+\n+///////////////////////////////////////////////////////////////////////////////\n+\n+template <int  , typename  > struct __get;\n+template <       typename T> struct __get <0, T>\n+{\n+    constexpr static auto value (T arg)\n+     -> decltype ((forward <member_forward_t <T>> (arg.t)))\n+    {\n+        return     forward <member_forward_t <T>> (arg.t);\n+    }\n+};\n+\n+template <int N, typename T> constexpr auto get (T && arg)\n+ -> decltype (__get <N, T &&>::value (forward <T> (arg)))\n+{\n+    return    __get <N, T &&>::value (forward <T> (arg));\n+}\n+\n+///////////////////////////////////////////////////////////////////////////////\n+\n+template <typename T> struct S\n+{\n+    typedef T type;\n+    T t;\n+\n+    template <typename U> constexpr S (U && u) : t (forward <U> (u)) {}\n+};\n+static_assert (get <0> (S <int &&> (1)) == 1, \"\"); // g++ 4.9 passes, g++ trunk r217559 fails"}]}