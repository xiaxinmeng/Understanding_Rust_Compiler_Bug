{"sha": "02db8169939bb489abb6c7025395a3fc671b79b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDJkYjgxNjk5MzliYjQ4OWFiYjZjNzAyNTM5NWEzZmM2NzFiNzliNg==", "commit": {"author": {"name": "Hristian Kirtchev", "email": "kirtchev@adacore.com", "date": "2018-05-22T13:26:55Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-05-22T13:26:55Z"}, "message": "[Ada] Crash on partial initialization of controlled component\n\nThis patch modifies the late expansion of record aggregates to ensure that the\ngenerated code which handles a controlled component initialized by a function\ncall is inserted in line with the rest of the initialization code, rather than\nbefore the record aggregate. This way the function call has proper access to\nthe discriminants of the object being created.\n\n2018-05-22  Hristian Kirtchev  <kirtchev@adacore.com>\n\ngcc/ada/\n\n\t* exp_aggr.adb (Initialize_Ctrl_Record_Component): Insert the generated\n\tcode for a transient component in line with the rest of the\n\tinitialization code, rather than before the aggregate. This ensures\n\tthat the component has proper visibility of the discriminants.\n\ngcc/testsuite/\n\n\t* gnat.dg/controlled8.adb: New testcase.\n\nFrom-SVN: r260532", "tree": {"sha": "cbfa4d2c52a3d0d3df46656e51a945aa39790347", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cbfa4d2c52a3d0d3df46656e51a945aa39790347"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/02db8169939bb489abb6c7025395a3fc671b79b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02db8169939bb489abb6c7025395a3fc671b79b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02db8169939bb489abb6c7025395a3fc671b79b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02db8169939bb489abb6c7025395a3fc671b79b6/comments", "author": {"login": "kirtchev-adacore", "id": 60669983, "node_id": "MDQ6VXNlcjYwNjY5OTgz", "avatar_url": "https://avatars.githubusercontent.com/u/60669983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirtchev-adacore", "html_url": "https://github.com/kirtchev-adacore", "followers_url": "https://api.github.com/users/kirtchev-adacore/followers", "following_url": "https://api.github.com/users/kirtchev-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/kirtchev-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirtchev-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirtchev-adacore/subscriptions", "organizations_url": "https://api.github.com/users/kirtchev-adacore/orgs", "repos_url": "https://api.github.com/users/kirtchev-adacore/repos", "events_url": "https://api.github.com/users/kirtchev-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/kirtchev-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9820b3897803c38f66f8515dc15cdb3e10c7ad20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9820b3897803c38f66f8515dc15cdb3e10c7ad20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9820b3897803c38f66f8515dc15cdb3e10c7ad20"}], "stats": {"total": 84, "additions": 81, "deletions": 3}, "files": [{"sha": "effa9642a90d411d7d8d7041f8b86dc18c41c482", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02db8169939bb489abb6c7025395a3fc671b79b6/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02db8169939bb489abb6c7025395a3fc671b79b6/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=02db8169939bb489abb6c7025395a3fc671b79b6", "patch": "@@ -1,3 +1,10 @@\n+2018-05-22  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_aggr.adb (Initialize_Ctrl_Record_Component): Insert the generated\n+\tcode for a transient component in line with the rest of the\n+\tinitialization code, rather than before the aggregate. This ensures\n+\tthat the component has proper visibility of the discriminants.\n+\n 2018-05-22  Jerome Lambourg  <lambourg@adacore.com>\n \n \t* adaint.c: Reorganize QNX-specific macros, use syspage to retreive the"}, {"sha": "356686e9df5d64cb3dc779d720dec1296d0d9a25", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02db8169939bb489abb6c7025395a3fc671b79b6/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02db8169939bb489abb6c7025395a3fc671b79b6/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=02db8169939bb489abb6c7025395a3fc671b79b6", "patch": "@@ -2846,7 +2846,7 @@ package body Exp_Aggr is\n \n          In_Place_Expansion :=\n            Nkind (Init_Expr) = N_Function_Call\n-                and then not Is_Build_In_Place_Result_Type (Comp_Typ);\n+             and then not Is_Build_In_Place_Result_Type (Comp_Typ);\n \n          --  The initialization expression is a controlled function call.\n          --  Perform in-place removal of side effects to avoid creating a\n@@ -2865,15 +2865,19 @@ package body Exp_Aggr is\n             Set_No_Side_Effect_Removal (Init_Expr);\n \n             --  Install all hook-related declarations and prepare the clean up\n-            --  statements.\n+            --  statements. The generated code follows the initialization order\n+            --  of individual components and discriminants, rather than being\n+            --  inserted prior to the aggregate. This ensures that a transient\n+            --  component which mentions a discriminant has proper visibility\n+            --  of the discriminant.\n \n             Process_Transient_Component\n               (Loc        => Loc,\n                Comp_Typ   => Comp_Typ,\n                Init_Expr  => Init_Expr,\n                Fin_Call   => Fin_Call,\n                Hook_Clear => Hook_Clear,\n-               Aggr       => N);\n+               Stmts      => Stmts);\n          end if;\n \n          --  Use the noncontrolled component initialization circuitry to"}, {"sha": "c5c26fda0d92fb6bce21eb1d486724b68d098eb9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02db8169939bb489abb6c7025395a3fc671b79b6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02db8169939bb489abb6c7025395a3fc671b79b6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=02db8169939bb489abb6c7025395a3fc671b79b6", "patch": "@@ -1,3 +1,7 @@\n+2018-05-22  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* gnat.dg/controlled8.adb: New testcase.\n+\n 2018-05-22  Patrick Bernardi  <bernardi@adacore.com>\n \n \t* gnat.dg/discr50.adb: New testcase."}, {"sha": "d75bba66536aab7d25eeb0303da1028260bdceb0", "filename": "gcc/testsuite/gnat.dg/controlled8.adb", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02db8169939bb489abb6c7025395a3fc671b79b6/gcc%2Ftestsuite%2Fgnat.dg%2Fcontrolled8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02db8169939bb489abb6c7025395a3fc671b79b6/gcc%2Ftestsuite%2Fgnat.dg%2Fcontrolled8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fcontrolled8.adb?ref=02db8169939bb489abb6c7025395a3fc671b79b6", "patch": "@@ -0,0 +1,63 @@\n+--  { dg-do compile }\n+\n+with Ada.Finalization; use Ada.Finalization;\n+\n+procedure Controlled8\n+  (Int_Input : Integer;\n+   Str_Input : String)\n+is\n+   type Ctrl is new Controlled with null record;\n+   type Integer_Ptr is access all Integer;\n+   type String_Ptr  is access all String;\n+\n+   function Func (Val : Integer) return Ctrl is\n+   begin return Result : Ctrl; end Func;\n+\n+   function Func (Val : String) return Ctrl is\n+   begin return Result : Ctrl; end Func;\n+\n+   type Rec_1 (Val : Integer) is record\n+      Comp : Ctrl := Func (Val);\n+   end record;\n+\n+   type Rec_2 (Val : access Integer) is record\n+      Comp : Ctrl := Func (Val.all);\n+   end record;\n+\n+   type Rec_3 (Val : Integer_Ptr) is record\n+      Comp : Ctrl := Func (Val.all);\n+   end record;\n+\n+   type Rec_4 (Val : access String) is record\n+      Comp : Ctrl := Func (Val.all);\n+   end record;\n+\n+   type Rec_5 (Val : String_Ptr) is record\n+      Comp : Ctrl := Func (Val.all);\n+   end record;\n+\n+   Int_Heap  : constant Integer_Ptr := new Integer'(Int_Input);\n+   Int_Stack : aliased  Integer     := Int_Input;\n+   Str_Heap  : constant String_Ptr  := new String'(Str_Input);\n+   Str_Stack : aliased  String      := Str_Input;\n+\n+   Obj_1  : constant Rec_1 := (Val => Int_Input, others => <>);\n+\n+   Obj_2  : constant Rec_2 := (Val => Int_Heap, others => <>);\n+   Obj_3  : constant Rec_2 := (Val => Int_Stack'Access, others => <>);\n+   Obj_4  : constant Rec_2 := (Val => new Integer'(Int_Input), others => <>);\n+\n+   Obj_5  : constant Rec_3 := (Val => Int_Heap, others => <>);\n+   Obj_6  : constant Rec_3 := (Val => Int_Stack'Access, others => <>);\n+   Obj_7  : constant Rec_3 := (Val => new Integer'(Int_Input), others => <>);\n+\n+   Obj_8  : constant Rec_4 := (Val => Str_Heap, others => <>);\n+   Obj_9  : constant Rec_4 := (Val => Str_Stack'Access, others => <>);\n+   Obj_10 : constant Rec_4 := (Val => new String'(Str_Input), others => <>);\n+\n+   Obj_11 : constant Rec_5 := (Val => Str_Heap, others => <>);\n+   Obj_12 : constant Rec_5 := (Val => Str_Stack'Access, others => <>);\n+   Obj_13 : constant Rec_5 := (Val => new String'(Str_Input), others => <>);\n+begin\n+   null;\n+end Controlled8;"}]}