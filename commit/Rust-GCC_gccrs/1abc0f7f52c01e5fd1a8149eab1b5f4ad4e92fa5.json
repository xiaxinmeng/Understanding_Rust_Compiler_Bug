{"sha": "1abc0f7f52c01e5fd1a8149eab1b5f4ad4e92fa5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWFiYzBmN2Y1MmMwMWU1ZmQxYTgxNDllYWIxYjVmNGFkNGU5MmZhNQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2018-06-06T13:03:29Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-06-06T13:03:29Z"}, "message": "re PR tree-optimization/86062 (Missed redundancy elimination with struct and array)\n\n2018-06-06  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/86062\n\t* tree-ssa-sccvn.c (vn_reference_lookup_3): Handle arbitrary\n\tcomponent refs ontop\n\tof to be offsetted base.\n\n\t* g++.dg/tree-ssa/pr86062.C: New testcase.\n\nFrom-SVN: r261231", "tree": {"sha": "58c12e9abe514f02b058641bd4b7b4823d151ded", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/58c12e9abe514f02b058641bd4b7b4823d151ded"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1abc0f7f52c01e5fd1a8149eab1b5f4ad4e92fa5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1abc0f7f52c01e5fd1a8149eab1b5f4ad4e92fa5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1abc0f7f52c01e5fd1a8149eab1b5f4ad4e92fa5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1abc0f7f52c01e5fd1a8149eab1b5f4ad4e92fa5/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d71488c017b4ebb932cf2b4a43656e1eda670b23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d71488c017b4ebb932cf2b4a43656e1eda670b23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d71488c017b4ebb932cf2b4a43656e1eda670b23"}], "stats": {"total": 51, "additions": 44, "deletions": 7}, "files": [{"sha": "18280e8a0410db00324a6e36a4da577b904d5f15", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1abc0f7f52c01e5fd1a8149eab1b5f4ad4e92fa5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1abc0f7f52c01e5fd1a8149eab1b5f4ad4e92fa5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1abc0f7f52c01e5fd1a8149eab1b5f4ad4e92fa5", "patch": "@@ -1,3 +1,10 @@\n+2018-06-06  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/86062\n+\t* tree-ssa-sccvn.c (vn_reference_lookup_3): Handle arbitrary\n+\tcomponent refs ontop\n+\tof to be offsetted base.\n+\n 2018-06-06  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n \n \t* gcc/config/msp430/msp430.c (msp430_attr): Allow interrupt handlers"}, {"sha": "095cae3f972dd3853e5d4ba156609d9bd938a963", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1abc0f7f52c01e5fd1a8149eab1b5f4ad4e92fa5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1abc0f7f52c01e5fd1a8149eab1b5f4ad4e92fa5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1abc0f7f52c01e5fd1a8149eab1b5f4ad4e92fa5", "patch": "@@ -1,3 +1,8 @@\n+2018-06-06  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/86062\n+\t* g++.dg/tree-ssa/pr86062.C: New testcase.\n+\n 2018-06-05  Steve Ellcey  <sellcey@cavium.com>\n \n \tPR target/79924"}, {"sha": "d62bdf6d2f77604db94afbc299510b914eb713ee", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr86062.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1abc0f7f52c01e5fd1a8149eab1b5f4ad4e92fa5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr86062.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1abc0f7f52c01e5fd1a8149eab1b5f4ad4e92fa5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr86062.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr86062.C?ref=1abc0f7f52c01e5fd1a8149eab1b5f4ad4e92fa5", "patch": "@@ -0,0 +1,23 @@\n+// { dg-do compile }\n+// { dg-require-effective-target c++14 }\n+// { dg-options \"-O2 -ffinite-math-only -fdump-tree-fre1\" }\n+\n+#include <array>\n+\n+struct I { double i,s; I(double d):i(d),s(d){} };\n+typedef std::array<double,3> P;\n+typedef std::array<I,3> AP;\n+\n+static AP c(P const&p){\n+      return {p[0],p[1],p[2]};\n+}\n+template<class T> auto const& ac(T const&p, int n){return p[n];}\n+static double g(P const&p, int n)\n+{\n+    I res = ac(c(p),n);\n+      return res.s-res.i;\n+}\n+\n+__attribute__((flatten)) double fff(P p){ return g(p,1); }\n+\n+// { dg-final { scan-tree-dump \"return 0.0;\" \"fre1\" } }"}, {"sha": "4aec41e96c18df1d93866215b617c43ce3731221", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1abc0f7f52c01e5fd1a8149eab1b5f4ad4e92fa5/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1abc0f7f52c01e5fd1a8149eab1b5f4ad4e92fa5/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=1abc0f7f52c01e5fd1a8149eab1b5f4ad4e92fa5", "patch": "@@ -2270,14 +2270,16 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *vr_,\n       /* Apply an extra offset to the inner MEM_REF of the RHS.  */\n       if (maybe_ne (extra_off, 0))\n \t{\n-\t  if (rhs.length () < 2\n-\t      || rhs[0].opcode != MEM_REF\n-\t      || known_eq (rhs[0].off, -1))\n+\t  if (rhs.length () < 2)\n \t    return (void *)-1;\n-\t  rhs[0].off += extra_off;\n-\t  rhs[0].op0 = int_const_binop (PLUS_EXPR, rhs[0].op0,\n-\t\t\t\t\tbuild_int_cst (TREE_TYPE (rhs[0].op0),\n-\t\t\t\t\t\t       extra_off));\n+\t  int ix = rhs.length () - 2;\n+\t  if (rhs[ix].opcode != MEM_REF\n+\t      || known_eq (rhs[ix].off, -1))\n+\t    return (void *)-1;\n+\t  rhs[ix].off += extra_off;\n+\t  rhs[ix].op0 = int_const_binop (PLUS_EXPR, rhs[ix].op0,\n+\t\t\t\t\t build_int_cst (TREE_TYPE (rhs[ix].op0),\n+\t\t\t\t\t\t\textra_off));\n \t}\n \n       /* We need to pre-pend vr->operands[0..i] to rhs.  */"}]}