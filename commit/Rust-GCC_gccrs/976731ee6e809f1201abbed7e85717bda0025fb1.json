{"sha": "976731ee6e809f1201abbed7e85717bda0025fb1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTc2NzMxZWU2ZTgwOWYxMjAxYWJiZWQ3ZTg1NzE3YmRhMDAyNWZiMQ==", "commit": {"author": {"name": "Andrew Haley", "email": "aph@redhat.com", "date": "2007-07-13T14:07:16Z"}, "committer": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "2007-07-13T14:07:16Z"}, "message": "[multiple changes]\n\n2007-07-13  Andrew Haley  <aph@redhat.com>\n\n\t* libgcj.ver: Add __gcj_personality_sj0.\n\n\t* testsuite/libjava.jvmti/jvmti-interp.exp: Likewise.\n\t* testsuite/libjava.jni/jni.exp: Use -fdollars-in-identifiers.\n\t* testsuite/libjava.jni/cni.exp: Use -fdollars-in-identifiers.\n\t* testsuite/libjava.jvmti/jvmti.exp (gcj_jvmti_compile_cxx_to_o): Likewise.\n\n\t* gnu/classpath/natVMStackWalker.cc (getCallingClassLoader): Check\n\tklass is non-null.\n\t* java/lang/reflect/natField.cc (getAddr): Call\n\t_Jv_StackTrace::GetCallingClass only if CALLER is non-null.\n\t* java/lang/reflect/natVMProxy.cc (run_proxy): Use\n\t_Jv_getFieldInternal to get field proxyClass.m.\n\t(_Jv_getFieldInternal): New function.\n\n2007-07-11  Andrew Haley  <aph@redhat.com>\n\n\t* configure.host (arm*-linux-gnu): New.\n\t* sysdep/arm/locks.h: New.\n\nFrom-SVN: r126622", "tree": {"sha": "0b3032c23182661b8162b7446fbe323c12606d36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b3032c23182661b8162b7446fbe323c12606d36"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/976731ee6e809f1201abbed7e85717bda0025fb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/976731ee6e809f1201abbed7e85717bda0025fb1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/976731ee6e809f1201abbed7e85717bda0025fb1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/976731ee6e809f1201abbed7e85717bda0025fb1/comments", "author": {"login": "theRealAph", "id": 254637, "node_id": "MDQ6VXNlcjI1NDYzNw==", "avatar_url": "https://avatars.githubusercontent.com/u/254637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theRealAph", "html_url": "https://github.com/theRealAph", "followers_url": "https://api.github.com/users/theRealAph/followers", "following_url": "https://api.github.com/users/theRealAph/following{/other_user}", "gists_url": "https://api.github.com/users/theRealAph/gists{/gist_id}", "starred_url": "https://api.github.com/users/theRealAph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theRealAph/subscriptions", "organizations_url": "https://api.github.com/users/theRealAph/orgs", "repos_url": "https://api.github.com/users/theRealAph/repos", "events_url": "https://api.github.com/users/theRealAph/events{/privacy}", "received_events_url": "https://api.github.com/users/theRealAph/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2b2271f8f0d8010a9dd182f4ec8eced837aaa44f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b2271f8f0d8010a9dd182f4ec8eced837aaa44f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b2271f8f0d8010a9dd182f4ec8eced837aaa44f"}], "stats": {"total": 156, "additions": 139, "deletions": 17}, "files": [{"sha": "bf8c193d90be2012fd97d6703d62ce41ea2e6697", "filename": "libjava/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/976731ee6e809f1201abbed7e85717bda0025fb1/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/976731ee6e809f1201abbed7e85717bda0025fb1/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=976731ee6e809f1201abbed7e85717bda0025fb1", "patch": "@@ -1,3 +1,25 @@\n+2007-07-13  Andrew Haley  <aph@redhat.com>\n+\n+\t* libgcj.ver: Add __gcj_personality_sj0.\n+\n+\t* testsuite/libjava.jvmti/jvmti-interp.exp: Likewise.\n+\t* testsuite/libjava.jni/jni.exp: Use -fdollars-in-identifiers.\n+\t* testsuite/libjava.jni/cni.exp: Use -fdollars-in-identifiers.\n+\t* testsuite/libjava.jvmti/jvmti.exp (gcj_jvmti_compile_cxx_to_o): Likewise.\n+\n+\t* gnu/classpath/natVMStackWalker.cc (getCallingClassLoader): Check\n+\tklass is non-null.\n+\t* java/lang/reflect/natField.cc (getAddr): Call\n+\t_Jv_StackTrace::GetCallingClass only if CALLER is non-null.\n+\t* java/lang/reflect/natVMProxy.cc (run_proxy): Use\n+\t_Jv_getFieldInternal to get field proxyClass.m.\n+\t(_Jv_getFieldInternal): New function.\n+\n+2007-07-11  Andrew Haley  <aph@redhat.com>\n+\n+\t* configure.host (arm*-linux-gnu): New.\n+\t* sysdep/arm/locks.h: New.\n+\n 2007-07-13  Roger Sayle  <roger@eyesopen.com>\n \n \t* java/lang/natPosixProcess.cc: Include <sys/time.h> before"}, {"sha": "c32e714ea65ac5a50ea65e7637276abc4600a3bb", "filename": "libjava/configure.host", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/976731ee6e809f1201abbed7e85717bda0025fb1/libjava%2Fconfigure.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/976731ee6e809f1201abbed7e85717bda0025fb1/libjava%2Fconfigure.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure.host?ref=976731ee6e809f1201abbed7e85717bda0025fb1", "patch": "@@ -82,6 +82,10 @@ case \"${host}\" in\n \tenable_getenv_properties_default=no\n \tenable_main_args_default=no\n \t;;\n+  arm*-linux-gnu)\n+\tlibgcj_interpreter=yes\n+\tsysdeps_dir=arm\n+\t;;\n   mips-tx39-*|mipstx39-unknown-*)\n \tlibgcj_flags=\"${libgcj_flags} -G 0\"\n \tLDFLAGS=\"$LDFLAGS -Tjmr3904dram.ld\""}, {"sha": "1b336cad0637bb47163e9273a6910c5e6469d070", "filename": "libjava/gnu/classpath/natVMStackWalker.cc", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/976731ee6e809f1201abbed7e85717bda0025fb1/libjava%2Fgnu%2Fclasspath%2FnatVMStackWalker.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/976731ee6e809f1201abbed7e85717bda0025fb1/libjava%2Fgnu%2Fclasspath%2FnatVMStackWalker.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fclasspath%2FnatVMStackWalker.cc?ref=976731ee6e809f1201abbed7e85717bda0025fb1", "patch": "@@ -80,15 +80,22 @@ ::java::lang::ClassLoader *\n gnu::classpath::VMStackWalker::getCallingClassLoader(void)\n {\n   _Jv_InitClass (&::gnu::classpath::VMStackWalker::class$);\n-  return\n-    _Jv_StackTrace::GetStackWalkerCallingClass ()->getClassLoaderInternal ();\n+  jclass klass = _Jv_StackTrace::GetStackWalkerCallingClass ();\n+  if (klass)\n+    return klass->getClassLoaderInternal ();\n+  else\n+    return NULL;\n }\n \n ::java::lang::ClassLoader *\n gnu::classpath::VMStackWalker::getCallingClassLoader(::gnu::gcj::RawData *pc)\n {\n   _Jv_InitClass (&::gnu::classpath::VMStackWalker::class$);\n-  return GET_CALLING_CLASS(pc)->getClassLoaderInternal ();\n+  jclass klass = GET_CALLING_CLASS(pc);\n+  if (klass)\n+    return klass->getClassLoaderInternal ();\n+  else\n+    return NULL;\n }\n \n ::java::lang::ClassLoader *"}, {"sha": "d28d4090e6e6c1766ba1659bf4c719380f9bc3b5", "filename": "libjava/headers.txt", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/976731ee6e809f1201abbed7e85717bda0025fb1/libjava%2Fheaders.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/976731ee6e809f1201abbed7e85717bda0025fb1/libjava%2Fheaders.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fheaders.txt?ref=976731ee6e809f1201abbed7e85717bda0025fb1", "patch": "@@ -49,9 +49,11 @@ friend class java::lang::Class;\n class java/lang/reflect/Field\n prepend jfieldID _Jv_FromReflectedField (java::lang::reflect::Field *);\n prepend jobject _Jv_JNI_ToReflectedField (_Jv_JNIEnv*, jclass, jfieldID, jboolean);\n+prepend jobject _Jv_getFieldInternal (java::lang::reflect::Field f, jclass c, jobject o);\n friend jfieldID (::_Jv_FromReflectedField) (java::lang::reflect::Field *);\n friend jobject (::_Jv_JNI_ToReflectedField) (_Jv_JNIEnv*, jclass, jfieldID, jboolean);\n friend class java::lang::Class;\n+friend jobject (::_Jv_getFieldInternal) (java::lang::reflect::Field f, jclass c, jobject o);\n \n class java/lang/reflect/Method\n prepend jmethodID _Jv_FromReflectedMethod (java::lang::reflect::Method *);"}, {"sha": "0af95652def0d3da75aa33b160950d09907e40bd", "filename": "libjava/java/lang/reflect/Field.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/976731ee6e809f1201abbed7e85717bda0025fb1/libjava%2Fjava%2Flang%2Freflect%2FField.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/976731ee6e809f1201abbed7e85717bda0025fb1/libjava%2Fjava%2Flang%2Freflect%2FField.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2Freflect%2FField.h?ref=976731ee6e809f1201abbed7e85717bda0025fb1", "patch": "@@ -12,6 +12,7 @@\n \n jfieldID _Jv_FromReflectedField (java::lang::reflect::Field *);\n jobject _Jv_JNI_ToReflectedField (_Jv_JNIEnv*, jclass, jfieldID, jboolean);\n+jobject _Jv_getFieldInternal (java::lang::reflect::Field *f, jclass c, jobject o);\n \n class java::lang::reflect::Field : public ::java::lang::reflect::AccessibleObject\n {\n@@ -91,6 +92,7 @@ class java::lang::reflect::Field : public ::java::lang::reflect::AccessibleObjec\n   friend jfieldID (::_Jv_FromReflectedField) (java::lang::reflect::Field *);\n   friend jobject (::_Jv_JNI_ToReflectedField) (_Jv_JNIEnv*, jclass, jfieldID, jboolean);\n   friend class java::lang::Class;\n+  friend jobject (::_Jv_getFieldInternal) (java::lang::reflect::Field *f, jclass c, jobject o);\n };\n \n #endif // __java_lang_reflect_Field__"}, {"sha": "734f653168b7e8ec8d6852110e282fd74dca4df7", "filename": "libjava/java/lang/reflect/natField.cc", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/976731ee6e809f1201abbed7e85717bda0025fb1/libjava%2Fjava%2Flang%2Freflect%2FnatField.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/976731ee6e809f1201abbed7e85717bda0025fb1/libjava%2Fjava%2Flang%2Freflect%2FnatField.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2Freflect%2FnatField.cc?ref=976731ee6e809f1201abbed7e85717bda0025fb1", "patch": "@@ -74,11 +74,6 @@ static void*\n getAddr (java::lang::reflect::Field* field, jclass caller, jobject obj,\n          jboolean checkFinal)\n {\n-  // FIXME: we know CALLER is NULL here.  At one point we planned to\n-  // have the compiler insert the caller as a hidden argument in some\n-  // calls.  However, we never implemented that, so we have to find\n-  // the caller by hand instead.\n-  \n   using namespace java::lang::reflect;\n   \n   jfieldID fld = _Jv_FromReflectedField (field);\n@@ -97,7 +92,8 @@ getAddr (java::lang::reflect::Field* field, jclass caller, jobject obj,\n   // Check accessibility, if required.\n   if (! (Modifier::isPublic (flags) || field->isAccessible()))\n     {\n-      caller = _Jv_StackTrace::GetCallingClass (&Field::class$);\n+      if (! caller)\n+\tcaller = _Jv_StackTrace::GetCallingClass (&Field::class$);\n       if (! _Jv_CheckAccess (caller, field->getDeclaringClass(), flags))\n \tthrow new java::lang::IllegalAccessException;\n     }"}, {"sha": "1d9a3c6a5512479734762686b5d0a7adbbc98617", "filename": "libjava/java/lang/reflect/natVMProxy.cc", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/976731ee6e809f1201abbed7e85717bda0025fb1/libjava%2Fjava%2Flang%2Freflect%2FnatVMProxy.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/976731ee6e809f1201abbed7e85717bda0025fb1/libjava%2Fjava%2Flang%2Freflect%2FnatVMProxy.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2Freflect%2FnatVMProxy.cc?ref=976731ee6e809f1201abbed7e85717bda0025fb1", "patch": "@@ -299,6 +299,15 @@ unbox (jobject o, jclass klass, void *rvalue, FFI_TYPE type)\n     JvFail (\"Bad ffi type in proxy\");\n }\n \n+// _Jv_getFieldInternal is declared as a friend of reflect.Field in\n+// libjava/headers.txt.  This gives us a way to call the private\n+// method Field.get (Class caller, Object obj).\n+extern inline jobject\n+_Jv_getFieldInternal (java::lang::reflect::Field *f, jclass c, jobject o)\n+{\n+  return f->get(c, o);\n+}\n+\n // run_proxy is the entry point for all proxy methods.  It boxes up\n // all the arguments and then invokes the invocation handler's invoke()\n // method.  Exceptions are caught and propagated.\n@@ -340,7 +349,8 @@ run_proxy (ffi_cif *cif,\n   // difference.  We'd still have to save the method array because\n   // ncode structs are not scanned by the gc.\n   Field *f = proxyClass->getDeclaredField (JvNewStringLatin1 (\"m\"));\n-  JArray<Method*> *methods = (JArray<Method*>*)f->get (NULL);\n+  JArray<Method*> *methods \n+    = (JArray<Method*>*)_Jv_getFieldInternal (f, proxyClass, NULL);\n   Method *meth = elements(methods)[self->method_index];\n \n   JArray<jclass> *parameter_types = meth->internalGetParameterTypes ();"}, {"sha": "d2d189b5249317aa08daed1d98813a18c730f6c5", "filename": "libjava/libgcj.ver", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/976731ee6e809f1201abbed7e85717bda0025fb1/libjava%2Flibgcj.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/976731ee6e809f1201abbed7e85717bda0025fb1/libjava%2Flibgcj.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Flibgcj.ver?ref=976731ee6e809f1201abbed7e85717bda0025fb1", "patch": "@@ -2,6 +2,6 @@\n # symbols in libgcj.so.\n \n {\n-  global: Jv*; _Jv_*; __gcj_personality_v0; _Z*;\n+  global: Jv*; _Jv_*; __gcj_personality_v0; __gcj_personality_sj0; _Z*;\n   local: *;\n };"}, {"sha": "1f7763de3f0cde299a922cc8dc86e40712e9914c", "filename": "libjava/sysdep/arm/locks.h", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/976731ee6e809f1201abbed7e85717bda0025fb1/libjava%2Fsysdep%2Farm%2Flocks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/976731ee6e809f1201abbed7e85717bda0025fb1/libjava%2Fsysdep%2Farm%2Flocks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fsysdep%2Farm%2Flocks.h?ref=976731ee6e809f1201abbed7e85717bda0025fb1", "patch": "@@ -0,0 +1,79 @@\n+// locks.h - Thread synchronization primitives. ARM implementation.\n+\n+/* Copyright (C) 2007  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+#ifndef __SYSDEP_LOCKS_H__\n+#define __SYSDEP_LOCKS_H__\n+\n+typedef size_t obj_addr_t;\t/* Integer type big enough for object\t*/\n+\t\t\t\t/* address.\t\t\t\t*/\n+\n+/* Atomic compare and exchange.  These sequences are not actually\n+   atomic; there is a race if *ADDR != OLD_VAL and we are preempted\n+   between the two swaps.  However, they are very close to atomic, and\n+   are the best that a pre-ARMv6 implementation can do without\n+   operating system support.  LinuxThreads has been using these\n+   sequences for many years.  */\n+\n+inline static bool\n+compare_and_swap(volatile obj_addr_t *addr,\n+\t\t obj_addr_t old_val,\n+\t\t obj_addr_t new_val)\n+{\n+  volatile obj_addr_t result, tmp;\n+  __asm__ (\"\\n\"\n+\t   \"0:\tldr\t%[tmp],[%[addr]]\\n\"\n+\t   \"\tcmp\t%[tmp],%[old_val]\\n\"\n+\t   \"\tmovne\t%[result],#0\\n\"\n+\t   \"\tbne\t1f\\n\"\n+\t   \"\tswp\t%[result],%[new_val],[%[addr]]\\n\"\n+\t   \"\tcmp\t%[tmp],%[result]\\n\"\n+\t   \"\tswpne\t%[tmp],%[result],[%[addr]]\\n\"\n+\t   \"\tbne\t0b\\n\"\n+\t   \"\tmov\t%[result],#1\\n\"\n+\t   \"1:\"\n+\t   : [result] \"=&r\" (result), [tmp] \"=&r\" (tmp)\n+\t   : [addr] \"r\" (addr), [new_val] \"r\" (new_val), [old_val] \"r\" (old_val)\n+\t   : \"cc\", \"memory\");\n+\n+  return result;\n+}\n+\n+inline static void\n+release_set(volatile obj_addr_t *addr, obj_addr_t new_val)\n+{\n+  __asm__ __volatile__(\"\" : : : \"memory\");\n+  *(addr) = new_val;\n+}\n+\n+inline static bool\n+compare_and_swap_release(volatile obj_addr_t *addr,\n+\t\t  \t\t\t\t     obj_addr_t old,\n+\t\t\t\t\t\t     obj_addr_t new_val)\n+{\n+  return compare_and_swap(addr, old, new_val);\n+}\n+\n+// Ensure that subsequent instructions do not execute on stale\n+// data that was loaded from memory before the barrier.\n+inline static void\n+read_barrier()\n+{\n+  __asm__ __volatile__(\"\" : : : \"memory\");\n+}\n+\n+// Ensure that prior stores to memory are completed with respect to other\n+// processors.\n+inline static void\n+write_barrier()\n+{\n+  __asm__ __volatile__(\"\" : : : \"memory\");\n+}\n+\n+#endif"}, {"sha": "aec16b9330b9f616877380d5f2c600305534b39d", "filename": "libjava/testsuite/libjava.cni/cni.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/976731ee6e809f1201abbed7e85717bda0025fb1/libjava%2Ftestsuite%2Flibjava.cni%2Fcni.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/976731ee6e809f1201abbed7e85717bda0025fb1/libjava%2Ftestsuite%2Flibjava.cni%2Fcni.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.cni%2Fcni.exp?ref=976731ee6e809f1201abbed7e85717bda0025fb1", "patch": "@@ -10,7 +10,7 @@ proc gcj_cni_compile_cxx_to_o {file {options {}}} {\n   set oname ${name}.o\n \n   # Find the generated header.\n-  lappend options \"additional_flags=-I. -I.. -I$srcdir/$subdir\"\n+  lappend options \"additional_flags=-I. -I.. -I$srcdir/$subdir -fdollars-in-identifiers\"\n   # Find libgcj headers.\n   lappend options \"additional_flags=-I$srcdir/..\"\n "}, {"sha": "ab22c23f68a91c8c0892428576c200981bee9fb0", "filename": "libjava/testsuite/libjava.jni/jni.exp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/976731ee6e809f1201abbed7e85717bda0025fb1/libjava%2Ftestsuite%2Flibjava.jni%2Fjni.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/976731ee6e809f1201abbed7e85717bda0025fb1/libjava%2Ftestsuite%2Flibjava.jni%2Fjni.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.jni%2Fjni.exp?ref=976731ee6e809f1201abbed7e85717bda0025fb1", "patch": "@@ -31,7 +31,7 @@ proc gcj_jni_compile_c_to_so {file {options {}}} {\n \n   lappend options \"additional_flags=${so_flag} -fPIC\"\n   # Find the generated header.\n-  lappend options \"additional_flags=-I. -I.. -I$srcdir/$subdir\"\n+  lappend options \"additional_flags=-I. -I.. -I$srcdir/$subdir -fdollars-in-identifiers\"\n \n   # Ensure that the generated header has correct prototypes.\n   set cfile [file rootname $file].c\n@@ -219,7 +219,7 @@ proc gcj_jni_invocation_compile_c_to_binary {file {options {}}} {\n   lappend options \"additional_flags=-I. -I.. -I$srcdir/$subdir\"\n \n   # Find jni.h and jni_md.h.\n-  lappend options \"additional_flags=-I$srcdir/../include -I$srcdir/../classpath/include\"\n+  lappend options \"additional_flags=-I$srcdir/../include -I$srcdir/../classpath/include -fdollars-in-identifiers\"\n \n   # Append C++ options\n   lappend options \"additional_flags=$options_cxx\""}, {"sha": "68b1fc8c17788debf0149ac5abab2d2c0eb54372", "filename": "libjava/testsuite/libjava.jvmti/jvmti-interp.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/976731ee6e809f1201abbed7e85717bda0025fb1/libjava%2Ftestsuite%2Flibjava.jvmti%2Fjvmti-interp.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/976731ee6e809f1201abbed7e85717bda0025fb1/libjava%2Ftestsuite%2Flibjava.jvmti%2Fjvmti-interp.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.jvmti%2Fjvmti-interp.exp?ref=976731ee6e809f1201abbed7e85717bda0025fb1", "patch": "@@ -47,7 +47,7 @@ proc gcj_jni_compile_c_to_so {file {options {}}} {\n \n   # Find jni.h and jni_md.h.\n   lappend options \"additional_flags=-I$srcdir/../include  \\\n-                   -I$srcdir/../classpath/include\"\n+                   -I$srcdir/../classpath/include -fdollars-in-identifiers\"\n \n   # Append C++ options\n   lappend options \"additional_flags=$options_cxx\""}, {"sha": "578eeb1ef3fb1f354a9715669dc7a062b39aa5ae", "filename": "libjava/testsuite/libjava.jvmti/jvmti.exp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/976731ee6e809f1201abbed7e85717bda0025fb1/libjava%2Ftestsuite%2Flibjava.jvmti%2Fjvmti.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/976731ee6e809f1201abbed7e85717bda0025fb1/libjava%2Ftestsuite%2Flibjava.jvmti%2Fjvmti.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.jvmti%2Fjvmti.exp?ref=976731ee6e809f1201abbed7e85717bda0025fb1", "patch": "@@ -11,11 +11,11 @@ proc gcj_jvmti_compile_cxx_to_o {file {options {}}} {\n   set oname ${name}.o\n \n   # Find the generated header.\n-  lappend options \"additional_flags=-g -I. -I..\"\n+  lappend options \"additional_flags=-g -I. -I.. -fdollars-in-identifiers\"\n   # Find libgcj headers.\n   lappend options \"additional_flags=-I$srcdir/..\"\n   # Find jvmti.h, jvmti_md.h, jvmti-int.h, jvm.h requirements\n-  lappend options \"additional_flags=-I$srcdir/../include -I$srcdir/../classpath/include -I$objdir/../include -I$objdir/../../boehm-gc/include\"\n+  lappend options \"additional_flags=-I$srcdir/../include -I$srcdir/../classpath/include -I$objdir/../include -I$objdir/../../boehm-gc/include \"\n \n   set x [libjava_prune_warnings \\\n \t   [target_compile $file $oname object $options]]"}]}