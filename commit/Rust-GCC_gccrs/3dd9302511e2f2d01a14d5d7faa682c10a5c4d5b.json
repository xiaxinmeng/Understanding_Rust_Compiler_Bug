{"sha": "3dd9302511e2f2d01a14d5d7faa682c10a5c4d5b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2RkOTMwMjUxMWUyZjJkMDFhMTRkNWQ3ZmFhNjgyYzEwYTVjNGQ1Yg==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2017-07-31T07:29:49Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2017-07-31T07:29:49Z"}, "message": "Remove a Java-specific hunk.\n\n2017-07-31  Martin Liska  <mliska@suse.cz>\n\n\t* gimplify.c (mostly_copy_tree_r): Remove Java specific hunk.\n\t(gimplify_save_expr): Fix comment.\n\nFrom-SVN: r250726", "tree": {"sha": "0fc3768bb308a193dd64041cda2cd5b86b7735b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0fc3768bb308a193dd64041cda2cd5b86b7735b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3dd9302511e2f2d01a14d5d7faa682c10a5c4d5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dd9302511e2f2d01a14d5d7faa682c10a5c4d5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3dd9302511e2f2d01a14d5d7faa682c10a5c4d5b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dd9302511e2f2d01a14d5d7faa682c10a5c4d5b/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f826c40ecbd0695fa2b6a44a20f2329493538f61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f826c40ecbd0695fa2b6a44a20f2329493538f61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f826c40ecbd0695fa2b6a44a20f2329493538f61"}], "stats": {"total": 15, "additions": 7, "deletions": 8}, "files": [{"sha": "59ddc50a8066911b301ae67b508b02a56fc8813e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dd9302511e2f2d01a14d5d7faa682c10a5c4d5b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dd9302511e2f2d01a14d5d7faa682c10a5c4d5b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3dd9302511e2f2d01a14d5d7faa682c10a5c4d5b", "patch": "@@ -1,3 +1,8 @@\n+2017-07-31  Martin Liska  <mliska@suse.cz>\n+\n+\t* gimplify.c (mostly_copy_tree_r): Remove Java specific hunk.\n+\t(gimplify_save_expr): Fix comment.\n+\n 2017-07-30  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/79793"}, {"sha": "80712488833efc94ca698fca9bebdd0f8ae15c58", "filename": "gcc/gimplify.c", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dd9302511e2f2d01a14d5d7faa682c10a5c4d5b/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dd9302511e2f2d01a14d5d7faa682c10a5c4d5b/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=3dd9302511e2f2d01a14d5d7faa682c10a5c4d5b", "patch": "@@ -818,12 +818,7 @@ mostly_copy_tree_r (tree *tp, int *walk_subtrees, void *data)\n   /* Stop at types, decls, constants like copy_tree_r.  */\n   else if (TREE_CODE_CLASS (code) == tcc_type\n \t   || TREE_CODE_CLASS (code) == tcc_declaration\n-\t   || TREE_CODE_CLASS (code) == tcc_constant\n-\t   /* We can't do anything sensible with a BLOCK used as an\n-\t      expression, but we also can't just die when we see it\n-\t      because of non-expression uses.  So we avert our eyes\n-\t      and cross our fingers.  Silly Java.  */\n-\t   || code == BLOCK)\n+\t   || TREE_CODE_CLASS (code) == tcc_constant)\n     *walk_subtrees = 0;\n \n   /* Cope with the statement expression extension.  */\n@@ -5807,8 +5802,7 @@ gimplify_save_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p)\n   /* If the SAVE_EXPR has not been resolved, then evaluate it once.  */\n   if (!SAVE_EXPR_RESOLVED_P (*expr_p))\n     {\n-      /* The operand may be a void-valued expression such as SAVE_EXPRs\n-\t generated by the Java frontend for class initialization.  It is\n+      /* The operand may be a void-valued expression.  It is\n \t being executed only for its side-effects.  */\n       if (TREE_TYPE (val) == void_type_node)\n \t{"}]}