{"sha": "2cc6320da1118c535569815d208a07323a566e56", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmNjNjMyMGRhMTExOGM1MzU1Njk4MTVkMjA4YTA3MzIzYTU2NmU1Ng==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2013-08-06T08:20:17Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2013-08-06T08:20:17Z"}, "message": "re PR fortran/57306 ([OOP] [F08] ICE on valid with class pointer initialization)\n\n2013-08-06  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/57306\n\t* class.c (gfc_class_null_initializer): Rename to\n\t'gfc_class_initializer'. Treat non-NULL init-exprs.\n\t* gfortran.h (gfc_class_null_initializer): Update prototype.\n\t* trans-decl.c (gfc_get_symbol_decl): Treat class variables.\n\t* trans-expr.c (gfc_conv_initializer): Ditto.\n\t(gfc_trans_subcomponent_assign): Renamed gfc_class_null_initializer.\n\n2013-08-06  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/57306\n\t* gfortran.dg/pointer_init_8.f90: New.\n\nFrom-SVN: r201521", "tree": {"sha": "36ce544e7013ec1c1973b3bcade5a12c30dd0bc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/36ce544e7013ec1c1973b3bcade5a12c30dd0bc1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2cc6320da1118c535569815d208a07323a566e56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cc6320da1118c535569815d208a07323a566e56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2cc6320da1118c535569815d208a07323a566e56", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cc6320da1118c535569815d208a07323a566e56/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67d6162ac857b0ad8f2f86be7dca054af52f28d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67d6162ac857b0ad8f2f86be7dca054af52f28d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67d6162ac857b0ad8f2f86be7dca054af52f28d4"}], "stats": {"total": 83, "additions": 68, "deletions": 15}, "files": [{"sha": "7a9fe6ef8bd3cc7cf16bd401dc4e4a21f3e7b437", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc6320da1118c535569815d208a07323a566e56/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc6320da1118c535569815d208a07323a566e56/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=2cc6320da1118c535569815d208a07323a566e56", "patch": "@@ -1,3 +1,13 @@\n+2013-08-06  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/57306\n+\t* class.c (gfc_class_null_initializer): Rename to\n+\t'gfc_class_initializer'. Treat non-NULL init-exprs.\n+\t* gfortran.h (gfc_class_null_initializer): Update prototype.\n+\t* trans-decl.c (gfc_get_symbol_decl): Treat class variables.\n+\t* trans-expr.c (gfc_conv_initializer): Ditto.\n+\t(gfc_trans_subcomponent_assign): Renamed gfc_class_null_initializer.\n+\n 2013-07-30  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/57530"}, {"sha": "fb16682e51c0a8a08573ec9403930e90f48c3af3", "filename": "gcc/fortran/class.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc6320da1118c535569815d208a07323a566e56/gcc%2Ffortran%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc6320da1118c535569815d208a07323a566e56/gcc%2Ffortran%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fclass.c?ref=2cc6320da1118c535569815d208a07323a566e56", "patch": "@@ -412,12 +412,12 @@ gfc_is_class_container_ref (gfc_expr *e)\n }\n \n \n-/* Build a NULL initializer for CLASS pointers,\n-   initializing the _data component to NULL and\n-   the _vptr component to the declared type.  */\n+/* Build an initializer for CLASS pointers,\n+   initializing the _data component to the init_expr (or NULL) and the _vptr\n+   component to the corresponding type (or the declared type, given by ts).  */\n \n gfc_expr *\n-gfc_class_null_initializer (gfc_typespec *ts, gfc_expr *init_expr)\n+gfc_class_initializer (gfc_typespec *ts, gfc_expr *init_expr)\n {\n   gfc_expr *init;\n   gfc_component *comp;\n@@ -430,6 +430,8 @@ gfc_class_null_initializer (gfc_typespec *ts, gfc_expr *init_expr)\n \n   if (is_unlimited_polymorphic && init_expr)\n     vtab = gfc_find_intrinsic_vtab (&ts->u.derived->components->ts);\n+  else if (init_expr && init_expr->expr_type != EXPR_NULL)\n+    vtab = gfc_find_derived_vtab (init_expr->ts.u.derived);\n   else\n     vtab = gfc_find_derived_vtab (ts->u.derived);\n \n@@ -442,6 +444,8 @@ gfc_class_null_initializer (gfc_typespec *ts, gfc_expr *init_expr)\n       gfc_constructor *ctor = gfc_constructor_get();\n       if (strcmp (comp->name, \"_vptr\") == 0 && vtab)\n \tctor->expr = gfc_lval_expr_from_sym (vtab);\n+      else if (init_expr && init_expr->expr_type != EXPR_NULL)\n+\t  ctor->expr = gfc_copy_expr (init_expr);\n       else\n \tctor->expr = gfc_get_null_expr (NULL);\n       gfc_constructor_append (&init->value.constructor, ctor);"}, {"sha": "af7b5b99f9ba838568114a321e7e56dea24fe4c5", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc6320da1118c535569815d208a07323a566e56/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc6320da1118c535569815d208a07323a566e56/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=2cc6320da1118c535569815d208a07323a566e56", "patch": "@@ -2983,7 +2983,7 @@ void gfc_add_class_array_ref (gfc_expr *);\n bool gfc_is_class_array_ref (gfc_expr *, bool *);\n bool gfc_is_class_scalar_expr (gfc_expr *);\n bool gfc_is_class_container_ref (gfc_expr *e);\n-gfc_expr *gfc_class_null_initializer (gfc_typespec *, gfc_expr *);\n+gfc_expr *gfc_class_initializer (gfc_typespec *, gfc_expr *);\n unsigned int gfc_hash_value (gfc_symbol *);\n bool gfc_build_class_symbol (gfc_typespec *, symbol_attribute *,\n \t\t\t\tgfc_array_spec **, bool);"}, {"sha": "43f401d83d4e71190b7fb81d2ce406270197bfd7", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc6320da1118c535569815d208a07323a566e56/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc6320da1118c535569815d208a07323a566e56/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=2cc6320da1118c535569815d208a07323a566e56", "patch": "@@ -1491,14 +1491,14 @@ gfc_get_symbol_decl (gfc_symbol * sym)\n \t SAVE is specified otherwise they need to be reinitialized\n \t every time the procedure is entered. The TREE_STATIC is\n \t in this case due to -fmax-stack-var-size=.  */\n+\n       DECL_INITIAL (decl) = gfc_conv_initializer (sym->value, &sym->ts,\n-\t\t\t\t\t\t  TREE_TYPE (decl),\n-\t\t\t\t\t\t  sym->attr.dimension\n-\t\t\t\t\t\t  || (sym->attr.codimension\n-\t\t\t\t\t\t      && sym->attr.allocatable),\n-\t\t\t\t\t\t  sym->attr.pointer\n-\t\t\t\t\t\t  || sym->attr.allocatable,\n-\t\t\t\t\t\t  sym->attr.proc_pointer);\n+\t\t\t\t    TREE_TYPE (decl), sym->attr.dimension\n+\t\t\t\t    || (sym->attr.codimension\n+\t\t\t\t\t&& sym->attr.allocatable),\n+\t\t\t\t    sym->attr.pointer || sym->attr.allocatable\n+\t\t\t\t    || sym->ts.type == BT_CLASS,\n+\t\t\t\t    sym->attr.proc_pointer);\n     }\n \n   if (!TREE_STATIC (decl)"}, {"sha": "0801eee8b284945b7fc7b58e8f0a1757938a7b98", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc6320da1118c535569815d208a07323a566e56/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc6320da1118c535569815d208a07323a566e56/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=2cc6320da1118c535569815d208a07323a566e56", "patch": "@@ -5664,7 +5664,15 @@ gfc_conv_initializer (gfc_expr * expr, gfc_typespec * ts, tree type,\n     }\n   else if (pointer || procptr)\n     {\n-      if (!expr || expr->expr_type == EXPR_NULL)\n+      if (ts->type == BT_CLASS && !procptr)\n+\t{\n+\t  gfc_init_se (&se, NULL);\n+\t  gfc_conv_structure (&se, gfc_class_initializer (ts, expr), 1);\n+\t  gcc_assert (TREE_CODE (se.expr) == CONSTRUCTOR);\n+\t  TREE_STATIC (se.expr) = 1;\n+\t  return se.expr;\n+\t}\n+      else if (!expr || expr->expr_type == EXPR_NULL)\n \treturn fold_convert (type, null_pointer_node);\n       else\n \t{\n@@ -5683,7 +5691,7 @@ gfc_conv_initializer (gfc_expr * expr, gfc_typespec * ts, tree type,\n \tcase BT_CLASS:\n \t  gfc_init_se (&se, NULL);\n \t  if (ts->type == BT_CLASS && expr->expr_type == EXPR_NULL)\n-\t    gfc_conv_structure (&se, gfc_class_null_initializer(ts, expr), 1);\n+\t    gfc_conv_structure (&se, gfc_class_initializer (ts, expr), 1);\n \t  else\n \t    gfc_conv_structure (&se, expr, 1);\n \t  gcc_assert (TREE_CODE (se.expr) == CONSTRUCTOR);\n@@ -5993,7 +6001,7 @@ gfc_trans_subcomponent_assign (tree dest, gfc_component * cm, gfc_expr * expr)\n     {\n       /* NULL initialization for CLASS components.  */\n       tmp = gfc_trans_structure_assign (dest,\n-\t\t\t\t\tgfc_class_null_initializer (&cm->ts, expr));\n+\t\t\t\t\tgfc_class_initializer (&cm->ts, expr));\n       gfc_add_expr_to_block (&block, tmp);\n     }\n   else if (cm->attr.dimension && !cm->attr.proc_pointer)"}, {"sha": "e8ac8604c769fec14650dfc3ca008afc597f29e2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc6320da1118c535569815d208a07323a566e56/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc6320da1118c535569815d208a07323a566e56/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2cc6320da1118c535569815d208a07323a566e56", "patch": "@@ -1,3 +1,8 @@\n+2013-08-06  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/57306\n+\t* gfortran.dg/pointer_init_8.f90: New.\n+\n 2013-08-05  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/58080"}, {"sha": "aacd9a8e16e2dca9f5dfee0d31061f9c6e18f6e0", "filename": "gcc/testsuite/gfortran.dg/pointer_init_8.f90", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc6320da1118c535569815d208a07323a566e56/gcc%2Ftestsuite%2Fgfortran.dg%2Fpointer_init_8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc6320da1118c535569815d208a07323a566e56/gcc%2Ftestsuite%2Fgfortran.dg%2Fpointer_init_8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpointer_init_8.f90?ref=2cc6320da1118c535569815d208a07323a566e56", "patch": "@@ -0,0 +1,26 @@\n+! { dg-do run }\n+!\n+! PR 57306: [OOP] ICE on valid with class pointer initialization\n+!\n+! Contributed by Andrew Benson <abensonca@gmail.com>\n+\n+module m\n+  type :: c\n+  end type c\n+  type, extends(c) :: d\n+  end type d\n+  type(c), target :: x\n+  type(d), target :: y\n+end module m\n+\n+ use m\n+  class(c), pointer :: px => x\n+  class(c), pointer :: py => y\n+\n+  if (.not. associated(px, x))   call abort()\n+  if (.not. same_type_as(px, x)) call abort()\n+  if (.not. associated(py, y))   call abort()\n+  if (.not. same_type_as(py, y)) call abort()\n+end \n+\n+! { dg-final { cleanup-modules \"m\" } }"}]}