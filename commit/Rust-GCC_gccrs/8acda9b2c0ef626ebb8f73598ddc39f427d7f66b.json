{"sha": "8acda9b2c0ef626ebb8f73598ddc39f427d7f66b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGFjZGE5YjJjMGVmNjI2ZWJiOGY3MzU5OGRkYzM5ZjQyN2Q3ZjY2Yg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-10-27T09:32:11Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-10-27T09:32:11Z"}, "message": "Move expN folds to match.pd\n\nTested on x86_64-linux-gnu, aarch64-linux-gnu and arm-linux-gnueabi.\n\ngcc/\n\t* builtins.c (fold_builtin_exponent): Delete.\n\t(fold_builtin_2): Handle constant expN arguments here.\n\t* match.pd: Fold expN(logN(x)) -> x.\n\nFrom-SVN: r229410", "tree": {"sha": "9451dee7b1c759995c7a5b8096b5dcdc8b5492e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9451dee7b1c759995c7a5b8096b5dcdc8b5492e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8acda9b2c0ef626ebb8f73598ddc39f427d7f66b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8acda9b2c0ef626ebb8f73598ddc39f427d7f66b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8acda9b2c0ef626ebb8f73598ddc39f427d7f66b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8acda9b2c0ef626ebb8f73598ddc39f427d7f66b/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5ddc84ca83fee1cb1f9bc3dd8aca6349f512d372", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ddc84ca83fee1cb1f9bc3dd8aca6349f512d372", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ddc84ca83fee1cb1f9bc3dd8aca6349f512d372"}], "stats": {"total": 67, "additions": 21, "deletions": 46}, "files": [{"sha": "219f2580a8573d99804f824481e89893dc874c83", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8acda9b2c0ef626ebb8f73598ddc39f427d7f66b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8acda9b2c0ef626ebb8f73598ddc39f427d7f66b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8acda9b2c0ef626ebb8f73598ddc39f427d7f66b", "patch": "@@ -1,3 +1,9 @@\n+2015-10-27  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* builtins.c (fold_builtin_exponent): Delete.\n+\t(fold_builtin_2): Handle constant expN arguments here.\n+\t* match.pd: Fold expN(logN(x)) -> x.\n+\n 2015-10-27  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* builtins.c (fold_builtin_powi): Delete."}, {"sha": "e5a00eef18d1cfee45c9ffd520f4cf617c363544", "filename": "gcc/builtins.c", "status": "modified", "additions": 9, "deletions": 44, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8acda9b2c0ef626ebb8f73598ddc39f427d7f66b/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8acda9b2c0ef626ebb8f73598ddc39f427d7f66b/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=8acda9b2c0ef626ebb8f73598ddc39f427d7f66b", "patch": "@@ -7516,47 +7516,6 @@ fold_const_builtin_pow (tree arg0, tree arg1, tree type)\n   return NULL_TREE;\n }\n \n-/* A subroutine of fold_builtin to fold the various exponent\n-   functions.  Return NULL_TREE if no simplification can be made.\n-   FUNC is the corresponding MPFR exponent function.  */\n-\n-static tree\n-fold_builtin_exponent (location_t loc, tree fndecl, tree arg,\n-\t\t       int (*func)(mpfr_ptr, mpfr_srcptr, mp_rnd_t))\n-{\n-  if (validate_arg (arg, REAL_TYPE))\n-    {\n-      tree type = TREE_TYPE (TREE_TYPE (fndecl));\n-      tree res;\n-\n-      /* Calculate the result when the argument is a constant.  */\n-      if ((res = do_mpfr_arg1 (arg, type, func, NULL, NULL, 0)))\n-\treturn res;\n-\n-      /* Optimize expN(logN(x)) = x.  */\n-      if (flag_unsafe_math_optimizations)\n-\t{\n-\t  const enum built_in_function fcode = builtin_mathfn_code (arg);\n-\n-\t  if ((func == mpfr_exp\n-\t       && (fcode == BUILT_IN_LOG\n-\t\t   || fcode == BUILT_IN_LOGF\n-\t\t   || fcode == BUILT_IN_LOGL))\n-\t      || (func == mpfr_exp2\n-\t\t  && (fcode == BUILT_IN_LOG2\n-\t\t      || fcode == BUILT_IN_LOG2F\n-\t\t      || fcode == BUILT_IN_LOG2L))\n-\t      || (func == mpfr_exp10\n-\t\t  && (fcode == BUILT_IN_LOG10\n-\t\t      || fcode == BUILT_IN_LOG10F\n-\t\t      || fcode == BUILT_IN_LOG10L)))\n-\t    return fold_convert_loc (loc, type, CALL_EXPR_ARG (arg, 0));\n-\t}\n-    }\n-\n-  return NULL_TREE;\n-}\n-\n /* Fold function call to builtin memchr.  ARG1, ARG2 and LEN are the\n    arguments to the call, and TYPE is its return type.\n    Return NULL_TREE if no simplification can be made.  */\n@@ -9004,14 +8963,20 @@ fold_builtin_1 (location_t loc, tree fndecl, tree arg0)\n     break;\n \n     CASE_FLT_FN (BUILT_IN_EXP):\n-      return fold_builtin_exponent (loc, fndecl, arg0, mpfr_exp);\n+      if (validate_arg (arg0, REAL_TYPE))\n+\treturn do_mpfr_arg1 (arg0, type, mpfr_exp, NULL, NULL, 0);\n+      break;\n \n     CASE_FLT_FN (BUILT_IN_EXP2):\n-      return fold_builtin_exponent (loc, fndecl, arg0, mpfr_exp2);\n+      if (validate_arg (arg0, REAL_TYPE))\n+\treturn do_mpfr_arg1 (arg0, type, mpfr_exp2, NULL, NULL, 0);\n+      break;\n \n     CASE_FLT_FN (BUILT_IN_EXP10):\n     CASE_FLT_FN (BUILT_IN_POW10):\n-      return fold_builtin_exponent (loc, fndecl, arg0, mpfr_exp10);\n+      if (validate_arg (arg0, REAL_TYPE))\n+\treturn do_mpfr_arg1 (arg0, type, mpfr_exp10, NULL, NULL, 0);\n+      break;\n \n     CASE_FLT_FN (BUILT_IN_EXPM1):\n       if (validate_arg (arg0, REAL_TYPE))"}, {"sha": "26491d278408b962e731f727a11598eed2f8b37b", "filename": "gcc/match.pd", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8acda9b2c0ef626ebb8f73598ddc39f427d7f66b/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8acda9b2c0ef626ebb8f73598ddc39f427d7f66b/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=8acda9b2c0ef626ebb8f73598ddc39f427d7f66b", "patch": "@@ -2407,12 +2407,16 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n    (rdiv @0 (exps:s @1))\n     (mult @0 (exps (negate @1)))))\n \n- /* Special case, optimize logN(expN(x)) = x.  */\n  (for logs (LOG LOG2 LOG10 LOG10)\n       exps (EXP EXP2 EXP10 POW10)\n+  /* logN(expN(x)) -> x.  */\n   (simplify\n    (logs (exps @0))\n-    @0))\n+   @0)\n+  /* expN(logN(x)) -> x.  */\n+  (simplify\n+   (exps (logs @0))\n+   @0))\n \n  /* Optimize logN(func()) for various exponential functions.  We\n     want to determine the value \"x\" and the power \"exponent\" in"}]}