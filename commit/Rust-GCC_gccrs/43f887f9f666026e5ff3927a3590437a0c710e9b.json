{"sha": "43f887f9f666026e5ff3927a3590437a0c710e9b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDNmODg3ZjlmNjY2MDI2ZTVmZjM5MjdhMzU5MDQzN2EwYzcxMGU5Yg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-08-17T07:20:23Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-08-17T07:20:23Z"}, "message": "cp-tree.h (CALL_DECLARATOR_PARMS): New macro.\n\n\t* cp-tree.h (CALL_DECLARATOR_PARMS): New macro.\n\t(CALL_DECLARATOR_QUALS): Likewise.\n\t(CALL_DECARATOR_EXCEPTION_SPEC): Likewise.\n\t* decl.c (grokdeclarator): Adjust to use them.\n\t* decl2.c (grokfield): Likewise.\n\t(reparse_absdcl_as_casts): Likewise.\n\t* lex.c (make_call_declarator): Likewise.\n\t(set_quals_and_spec): Likewise.\n\t* pt.c (tsubst): Likewise.\n\t* tree.c (mapcar): Remove special hack to handle third operand of\n\ta CALL_EXPR.\n\nFrom-SVN: r28733", "tree": {"sha": "02a98d02c1fee04e97404727ee0a9ba29d3cdada", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/02a98d02c1fee04e97404727ee0a9ba29d3cdada"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43f887f9f666026e5ff3927a3590437a0c710e9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43f887f9f666026e5ff3927a3590437a0c710e9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43f887f9f666026e5ff3927a3590437a0c710e9b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43f887f9f666026e5ff3927a3590437a0c710e9b/comments", "author": null, "committer": null, "parents": [{"sha": "410538ea80a50d7e16bb169230a05606fbda8315", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/410538ea80a50d7e16bb169230a05606fbda8315", "html_url": "https://github.com/Rust-GCC/gccrs/commit/410538ea80a50d7e16bb169230a05606fbda8315"}], "stats": {"total": 75, "additions": 51, "deletions": 24}, "files": [{"sha": "da75c334d448d209b37e6cd6db4d055fa32cf556", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43f887f9f666026e5ff3927a3590437a0c710e9b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43f887f9f666026e5ff3927a3590437a0c710e9b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=43f887f9f666026e5ff3927a3590437a0c710e9b", "patch": "@@ -1,3 +1,17 @@\n+1999-08-17  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* cp-tree.h (CALL_DECLARATOR_PARMS): New macro.\n+\t(CALL_DECLARATOR_QUALS): Likewise.\n+\t(CALL_DECARATOR_EXCEPTION_SPEC): Likewise.\n+\t* decl.c (grokdeclarator): Adjust to use them.\n+\t* decl2.c (grokfield): Likewise.\n+\t(reparse_absdcl_as_casts): Likewise.\n+\t* lex.c (make_call_declarator): Likewise.\n+\t(set_quals_and_spec): Likewise.\n+\t* pt.c (tsubst): Likewise.\n+\t* tree.c (mapcar): Remove special hack to handle third operand of\n+\ta CALL_EXPR.\n+\n 1999-08-16  Mark Mitchell  <mark@codesourcery.com>\n \n \t* cp-tree.h (CAN_HAVE_FULL_LANG_DECL_P): New macro."}, {"sha": "91ce27299d25d0b0780a3c5fce636ea305350f1c", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43f887f9f666026e5ff3927a3590437a0c710e9b/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43f887f9f666026e5ff3927a3590437a0c710e9b/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=43f887f9f666026e5ff3927a3590437a0c710e9b", "patch": "@@ -2150,6 +2150,18 @@ extern int flag_new_for_scope;\n #define STMT_LINENO(NODE)\t\t\t\\\n   (TREE_COMPLEXITY ((NODE)))\n \n+/* The parameters for a call-declarator.  */\n+#define CALL_DECLARATOR_PARMS(NODE) \\\n+  (TREE_PURPOSE (TREE_OPERAND ((NODE), 1)))\n+\n+/* The cv-qualifiers for a call-declarator.  */\n+#define CALL_DECLARATOR_QUALS(NODE) \\\n+  (TREE_VALUE (TREE_OPERAND ((NODE), 1)))\n+\n+/* The exception-specification for a call-declarator.  */\n+#define CALL_DECLARATOR_EXCEPTION_SPEC(NODE) \\\n+  (TREE_TYPE ((NODE)))\n+\n /* An enumeration of the kind of tags that C++ accepts.  */\n enum tag_types { record_type, class_type, union_type, enum_type };\n "}, {"sha": "d5fcbeae89d895cfde67f710ace5ac5da2de20d3", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43f887f9f666026e5ff3927a3590437a0c710e9b/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43f887f9f666026e5ff3927a3590437a0c710e9b/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=43f887f9f666026e5ff3927a3590437a0c710e9b", "patch": "@@ -9002,7 +9002,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \t    break;\n \n \t  case CALL_EXPR:\n-\t    if (parmlist_is_exprlist (TREE_OPERAND (decl, 1)))\n+\t    if (parmlist_is_exprlist (CALL_DECLARATOR_PARMS (decl)))\n \t      {\n \t\t/* This is actually a variable declaration using\n \t\t   constructor syntax.  We need to call start_decl and\n@@ -9012,7 +9012,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \t\ttree attributes, prefix_attributes;\n \n \t\t*next = TREE_OPERAND (decl, 0);\n-\t\tinit = TREE_OPERAND (decl, 1);\n+\t\tinit = CALL_DECLARATOR_PARMS (decl);\n \n \t\tif (attrlist)\n \t\t  {\n@@ -10023,7 +10023,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \t  {\n \t    tree arg_types;\n \t    int funcdecl_p;\n-\t    tree inner_parms = TREE_OPERAND (declarator, 1);\n+\t    tree inner_parms = CALL_DECLARATOR_PARMS (declarator);\n \t    tree inner_decl = TREE_OPERAND (declarator, 0);\n \n \t    /* Declaring a function type.\n@@ -10053,10 +10053,10 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \t      inner_decl = dname;\n \n \t    /* Pick up type qualifiers which should be applied to `this'.  */\n-\t    quals = TREE_OPERAND (declarator, 2);\n+\t    quals = CALL_DECLARATOR_QUALS (declarator);\n \n \t    /* Pick up the exception specifications.  */\n-\t    raises = TREE_TYPE (declarator);\n+\t    raises = CALL_DECLARATOR_EXCEPTION_SPEC (declarator);\n \n \t    /* Say it's a definition only for the CALL_EXPR\n \t       closest to the identifier.  */"}, {"sha": "7e0e23b6a64b3b4146084984e3076832e513d394", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43f887f9f666026e5ff3927a3590437a0c710e9b/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43f887f9f666026e5ff3927a3590437a0c710e9b/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=43f887f9f666026e5ff3927a3590437a0c710e9b", "patch": "@@ -1590,7 +1590,7 @@ grokfield (declarator, declspecs, init, asmspec_tree, attrlist)\n       && TREE_OPERAND (declarator, 0)\n       && (TREE_CODE (TREE_OPERAND (declarator, 0)) == IDENTIFIER_NODE\n \t  || TREE_CODE (TREE_OPERAND (declarator, 0)) == SCOPE_REF)\n-      && parmlist_is_exprlist (TREE_OPERAND (declarator, 1)))\n+      && parmlist_is_exprlist (CALL_DECLARATOR_PARMS (declarator)))\n     {\n       init = TREE_OPERAND (declarator, 1);\n       declarator = TREE_OPERAND (declarator, 0);\n@@ -3733,7 +3733,7 @@ reparse_absdcl_as_casts (decl, expr)\n   if (TREE_CODE (expr) == CONSTRUCTOR\n       && TREE_TYPE (expr) == 0)\n     {\n-      type = groktypename (TREE_VALUE (TREE_OPERAND (decl, 1)));\n+      type = groktypename (TREE_VALUE (CALL_DECLARATOR_PARMS (decl)));\n       decl = TREE_OPERAND (decl, 0);\n \n       expr = digest_init (type, expr, (tree *) 0);\n@@ -3747,7 +3747,7 @@ reparse_absdcl_as_casts (decl, expr)\n \n   while (decl)\n     {\n-      type = groktypename (TREE_VALUE (TREE_OPERAND (decl, 1)));\n+      type = groktypename (TREE_VALUE (CALL_DECLARATOR_PARMS (decl)));\n       decl = TREE_OPERAND (decl, 0);\n       expr = build_c_cast (type, expr);\n     }"}, {"sha": "acff58fed3719fc51607e21d9b691d8e92abcde0", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43f887f9f666026e5ff3927a3590437a0c710e9b/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43f887f9f666026e5ff3927a3590437a0c710e9b/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=43f887f9f666026e5ff3927a3590437a0c710e9b", "patch": "@@ -228,17 +228,24 @@ tree\n make_call_declarator (target, parms, cv_qualifiers, exception_specification)\n      tree target, parms, cv_qualifiers, exception_specification;\n {\n-  target = build_parse_node (CALL_EXPR, target, parms, cv_qualifiers);\n-  TREE_TYPE (target) = exception_specification;\n+  target = build_parse_node (CALL_EXPR, target, \n+\t\t\t     /* Both build_parse_node and\n+\t\t\t\tdecl_tree_cons build on the\n+\t\t\t\ttemp_decl_obstack.  */\n+\t\t\t     decl_tree_cons (parms, cv_qualifiers, NULL_TREE),\n+\t\t\t     /* The third operand is really RTL.  We\n+\t\t\t\tshouldn't put anything there.  */\n+\t\t\t     NULL_TREE);\n+  CALL_DECLARATOR_EXCEPTION_SPEC (target) = exception_specification;\n   return target;\n }\n \n void\n set_quals_and_spec (call_declarator, cv_qualifiers, exception_specification)\n      tree call_declarator, cv_qualifiers, exception_specification;\n {\n-  TREE_OPERAND (call_declarator, 2) = cv_qualifiers;\n-  TREE_TYPE (call_declarator) = exception_specification;\n+  CALL_DECLARATOR_QUALS (call_declarator) = cv_qualifiers;\n+  CALL_DECLARATOR_EXCEPTION_SPEC (call_declarator) = exception_specification;\n }\n \f\n /* Build names and nodes for overloaded operators.  */"}, {"sha": "cf2050ab20d5eeee1382c6e26e4e61311110b7a4", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43f887f9f666026e5ff3927a3590437a0c710e9b/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43f887f9f666026e5ff3927a3590437a0c710e9b/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=43f887f9f666026e5ff3927a3590437a0c710e9b", "patch": "@@ -6800,15 +6800,16 @@ tsubst (t, args, complain, in_decl)\n       {\n \ttree e1 = tsubst (TREE_OPERAND (t, 0), args, complain,\n \t\t\t  in_decl);\n-\ttree e2 = tsubst_call_declarator_parms (TREE_OPERAND (t, 1), args, \n-\t\t\t\t\t\tcomplain, in_decl);\n-\ttree e3 = tsubst (TREE_TYPE (t), args, complain, in_decl);\n+\ttree e2 = (tsubst_call_declarator_parms\n+\t\t   (CALL_DECLARATOR_PARMS (t), args, complain, in_decl));\n+\ttree e3 = tsubst (CALL_DECLARATOR_EXCEPTION_SPEC (t), args,\n+\t\t\t  complain, in_decl);\n \n \tif (e1 == error_mark_node || e2 == error_mark_node \n \t    || e3 == error_mark_node)\n \t  return error_mark_node;\n \n-\treturn make_call_declarator (e1, e2, TREE_OPERAND (t, 2), e3);\n+\treturn make_call_declarator (e1, e2, CALL_DECLARATOR_QUALS (t), e3);\n       }\n \n     case SCOPE_REF:"}, {"sha": "61ad108213bb29ff83885d983e53167f5692eb2c", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43f887f9f666026e5ff3927a3590437a0c710e9b/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43f887f9f666026e5ff3927a3590437a0c710e9b/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=43f887f9f666026e5ff3927a3590437a0c710e9b", "patch": "@@ -1921,14 +1921,7 @@ mapcar (t, func)\n       TREE_TYPE (t) = mapcar (TREE_TYPE (t), func);\n       TREE_OPERAND (t, 0) = mapcar (TREE_OPERAND (t, 0), func);\n       TREE_OPERAND (t, 1) = mapcar (TREE_OPERAND (t, 1), func);\n-\n-      /* tree.def says that operand two is RTL, but\n-\t make_call_declarator puts trees in there.  */\n-      if (TREE_OPERAND (t, 2)\n-\t  && TREE_CODE (TREE_OPERAND (t, 2)) == TREE_LIST)\n-\tTREE_OPERAND (t, 2) = mapcar (TREE_OPERAND (t, 2), func);\n-      else\n-\tTREE_OPERAND (t, 2) = NULL_TREE;\n+      TREE_OPERAND (t, 2) = NULL_TREE;\n       return t;\n \n     case SAVE_EXPR:"}]}