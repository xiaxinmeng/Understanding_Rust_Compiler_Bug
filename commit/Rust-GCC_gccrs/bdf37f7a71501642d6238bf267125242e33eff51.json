{"sha": "bdf37f7a71501642d6238bf267125242e33eff51", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmRmMzdmN2E3MTUwMTY0MmQ2MjM4YmYyNjcxMjUyNDJlMzNlZmY1MQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2013-12-17T23:43:22Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2013-12-17T23:43:22Z"}, "message": "re PR middle-end/35545 (tracer pass is run too late)\n\n\tPR middle-end/35535\n\t* gimple-fold.c (fold_gimple_assign): Attempt to devirtualize\n\tOBJ_TYPE_REF.\n\t(gimple_fold_stmt_to_constant_1): Bypass OBJ_TYPE_REF wrappers.\n\nFrom-SVN: r206074", "tree": {"sha": "102d2244405f3842e5f8a8d552db499e50f617ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/102d2244405f3842e5f8a8d552db499e50f617ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bdf37f7a71501642d6238bf267125242e33eff51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdf37f7a71501642d6238bf267125242e33eff51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdf37f7a71501642d6238bf267125242e33eff51", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdf37f7a71501642d6238bf267125242e33eff51/comments", "author": null, "committer": null, "parents": [{"sha": "a4fff37a46aae55c975a7445cd9950bab1f34347", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4fff37a46aae55c975a7445cd9950bab1f34347", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4fff37a46aae55c975a7445cd9950bab1f34347"}], "stats": {"total": 38, "additions": 38, "deletions": 0}, "files": [{"sha": "2441b102b87b81b838779d52f9306e2d5c4a5ecc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdf37f7a71501642d6238bf267125242e33eff51/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdf37f7a71501642d6238bf267125242e33eff51/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bdf37f7a71501642d6238bf267125242e33eff51", "patch": "@@ -1,3 +1,10 @@\n+2013-12-17  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR middle-end/35535\n+\t* gimple-fold.c (fold_gimple_assign): Attempt to devirtualize\n+\tOBJ_TYPE_REF.\n+\t(gimple_fold_stmt_to_constant_1): Bypass OBJ_TYPE_REF wrappers.\n+\n 2013-12-17  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR middle-end/35535"}, {"sha": "3b6fc571c404677dace598eb288156124beb17fe", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdf37f7a71501642d6238bf267125242e33eff51/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdf37f7a71501642d6238bf267125242e33eff51/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=bdf37f7a71501642d6238bf267125242e33eff51", "patch": "@@ -374,6 +374,30 @@ fold_gimple_assign (gimple_stmt_iterator *si)\n \tif (REFERENCE_CLASS_P (rhs))\n \t  return maybe_fold_reference (rhs, false);\n \n+\telse if (TREE_CODE (rhs) == OBJ_TYPE_REF)\n+\t  {\n+\t    tree val = OBJ_TYPE_REF_EXPR (rhs);\n+\t    if (is_gimple_min_invariant (val))\n+\t      return val;\n+\t    else if (flag_devirtualize && virtual_method_call_p (val))\n+\t      {\n+\t\tbool final;\n+\t\tvec <cgraph_node *>targets\n+\t\t  = possible_polymorphic_call_targets (val, &final);\n+\t\tif (final && targets.length () <= 1)\n+\t\t  {\n+\t\t    tree fndecl;\n+\t\t    if (targets.length () == 1)\n+\t\t      fndecl = targets[0]->decl;\n+\t\t    else\n+\t\t      fndecl = builtin_decl_implicit (BUILT_IN_UNREACHABLE);\n+\t\t    val = fold_convert (TREE_TYPE (val), fndecl);\n+\t\t    STRIP_USELESS_TYPE_CONVERSION (val);\n+\t\t    return val;\n+\t\t  }\n+\t      }\n+\n+\t  }\n \telse if (TREE_CODE (rhs) == ADDR_EXPR)\n \t  {\n \t    tree ref = TREE_OPERAND (rhs, 0);\n@@ -2525,6 +2549,13 @@ gimple_fold_stmt_to_constant_1 (gimple stmt, tree (*valueize) (tree))\n \n \t\t  return build_vector (TREE_TYPE (rhs), vec);\n \t\t}\n+\t      if (subcode == OBJ_TYPE_REF)\n+\t\t{\n+\t\t  tree val = (*valueize) (OBJ_TYPE_REF_EXPR (rhs));\n+\t\t  /* If callee is constant, we can fold away the wrapper.  */\n+\t\t  if (is_gimple_min_invariant (val))\n+\t\t    return val;\n+\t\t}\n \n               if (kind == tcc_reference)\n \t\t{"}]}