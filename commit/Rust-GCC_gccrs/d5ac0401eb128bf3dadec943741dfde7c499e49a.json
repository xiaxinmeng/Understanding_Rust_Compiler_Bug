{"sha": "d5ac0401eb128bf3dadec943741dfde7c499e49a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDVhYzA0MDFlYjEyOGJmM2RhZGVjOTQzNzQxZGZkZTdjNDk5ZTQ5YQ==", "commit": {"author": {"name": "Haochen Gui", "email": "guihaoc@gcc.gnu.org", "date": "2020-11-17T19:52:15Z"}, "committer": {"name": "Haochen Gui", "email": "guihaoc@gcc.gnu.org", "date": "2020-11-17T05:53:14Z"}, "message": "Relocatable read-only section support for absolute jump table\n\nThis patch puts absolute jump tables into a relocatable read-only section\nif they are on ELF target and relocation is supported.\n\ngcc/ChangeLog:\n\n\t* final.c (final_scan_insn_1): Set jump table relocatable as the\n\tsecond argument of targetm.asm_out.function_rodata_section.\n\t* output.h (default_function_rodata_section,\n\tdefault_no_function_rodata_section): Add the second argument to the\n\tdeclarations.\n\t* target.def (function_rodata_section): Change the doc and add\n\tthe second argument.\n\t* doc/tm.texi: Regenerate.\n\t* varasm.c (jumptable_relocatable): Implement.\n\t(default_function_rodata_section): Add the second argument\n\tand the support for relocatable read only sections.\n\t(default_no_function_rodata_section): Add the second argument.\n\t(function_mergeable_rodata_prefix): Set the second argument to false.\n\t* config/mips/mips.c (mips_function_rodata_section): Add the second\n\tarugment and set it to false.\n\t* config/s390/s390.c (targetm.asm_out.function_rodata_section): Set\n\tthe second argument to false.\n\t* config/s390/s390.md: Likewise.", "tree": {"sha": "9f7cce8cbdbd8438af547d8584dea1b25ba77185", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9f7cce8cbdbd8438af547d8584dea1b25ba77185"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d5ac0401eb128bf3dadec943741dfde7c499e49a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5ac0401eb128bf3dadec943741dfde7c499e49a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5ac0401eb128bf3dadec943741dfde7c499e49a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5ac0401eb128bf3dadec943741dfde7c499e49a/comments", "author": null, "committer": null, "parents": [{"sha": "287cc750b0887e86cb309d976b17c7ee95f7ad48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/287cc750b0887e86cb309d976b17c7ee95f7ad48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/287cc750b0887e86cb309d976b17c7ee95f7ad48"}], "stats": {"total": 130, "additions": 92, "deletions": 38}, "files": [{"sha": "58e474e063dce7c84dd9528c676f080e2e302658", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5ac0401eb128bf3dadec943741dfde7c499e49a/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5ac0401eb128bf3dadec943741dfde7c499e49a/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=d5ac0401eb128bf3dadec943741dfde7c499e49a", "patch": "@@ -9315,10 +9315,10 @@ mips_select_rtx_section (machine_mode mode, rtx x,\n    default_function_rodata_section.  */\n \n static section *\n-mips_function_rodata_section (tree decl)\n+mips_function_rodata_section (tree decl, bool)\n {\n   if (!TARGET_ABICALLS || TARGET_ABSOLUTE_ABICALLS || TARGET_GPWORD)\n-    return default_function_rodata_section (decl);\n+    return default_function_rodata_section (decl, false);\n \n   if (decl && DECL_SECTION_NAME (decl))\n     {"}, {"sha": "6983e363252175e0408676f188f722bd04424db3", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5ac0401eb128bf3dadec943741dfde7c499e49a/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5ac0401eb128bf3dadec943741dfde7c499e49a/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=d5ac0401eb128bf3dadec943741dfde7c499e49a", "patch": "@@ -11746,7 +11746,7 @@ s390_output_split_stack_data (rtx parm_block, rtx call_done,\n   rtx ops[] = { parm_block, call_done };\n \n   switch_to_section (targetm.asm_out.function_rodata_section\n-\t\t     (current_function_decl));\n+\t\t     (current_function_decl, false));\n \n   if (TARGET_64BIT)\n     output_asm_insn (\".align\\t8\", NULL);"}, {"sha": "910415a597478a1817a4a76221e5ee4565de7906", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5ac0401eb128bf3dadec943741dfde7c499e49a/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5ac0401eb128bf3dadec943741dfde7c499e49a/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=d5ac0401eb128bf3dadec943741dfde7c499e49a", "patch": "@@ -11290,7 +11290,7 @@\n   \"\"\n {\n   switch_to_section (targetm.asm_out.function_rodata_section\n-\t\t (current_function_decl));\n+\t\t (current_function_decl, false));\n   return \"\";\n }\n   [(set_attr \"length\" \"0\")])"}, {"sha": "2b88f78944fc5461f905e847a526aaf947c52f8e", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5ac0401eb128bf3dadec943741dfde7c499e49a/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5ac0401eb128bf3dadec943741dfde7c499e49a/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=d5ac0401eb128bf3dadec943741dfde7c499e49a", "patch": "@@ -7711,13 +7711,14 @@ example, the function @code{foo} would be placed in @code{.text.foo}.\n Whatever the actual target object format, this is often good enough.\n @end deftypefn\n \n-@deftypefn {Target Hook} {section *} TARGET_ASM_FUNCTION_RODATA_SECTION (tree @var{decl})\n-Return the readonly data section associated with\n-@samp{DECL_SECTION_NAME (@var{decl})}.\n+@deftypefn {Target Hook} {section *} TARGET_ASM_FUNCTION_RODATA_SECTION (tree @var{decl}, bool @var{relocatable})\n+Return the readonly data or reloc readonly data section associated with\n+@samp{DECL_SECTION_NAME (@var{decl})}. @var{relocatable} selects the latter\n+over the former.\n The default version of this function selects @code{.gnu.linkonce.r.name} if\n the function's section is @code{.gnu.linkonce.t.name}, @code{.rodata.name}\n-if function is in @code{.text.name}, and the normal readonly-data section\n-otherwise.\n+or @code{.data.rel.ro.name} if function is in @code{.text.name}, and\n+the normal readonly-data or reloc readonly data section otherwise.\n @end deftypefn\n \n @deftypevr {Target Hook} {const char *} TARGET_ASM_MERGEABLE_RODATA_PREFIX"}, {"sha": "fc9a05e335f47a8a8e21cdb9c4ed9105a8db0d53", "filename": "gcc/final.c", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5ac0401eb128bf3dadec943741dfde7c499e49a/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5ac0401eb128bf3dadec943741dfde7c499e49a/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=d5ac0401eb128bf3dadec943741dfde7c499e49a", "patch": "@@ -81,6 +81,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"rtl-iter.h\"\n #include \"print-rtl.h\"\n #include \"function-abi.h\"\n+#include \"common/common-target.h\"\n \n #ifdef XCOFF_DEBUGGING_INFO\n #include \"xcoffout.h\"\t\t/* Needed for external data declarations.  */\n@@ -2154,6 +2155,21 @@ asm_show_source (const char *filename, int linenum)\n   fputc ('\\n', asm_out_file);\n }\n \n+/* Judge if an absolute jump table is relocatable.  */\n+\n+bool\n+jumptable_relocatable (void)\n+{\n+  bool relocatable = false;\n+\n+  if (!CASE_VECTOR_PC_RELATIVE\n+      && !targetm.asm_out.generate_pic_addr_diff_vec ()\n+      && targetm_common.have_named_sections)\n+     relocatable = targetm.asm_out.reloc_rw_mask ();\n+\n+  return relocatable;\n+}\n+\n /* The final scan for one insn, INSN.\n    Args are same as in `final', except that INSN\n    is the insn being scanned.\n@@ -2493,7 +2509,8 @@ final_scan_insn_1 (rtx_insn *insn, FILE *file, int optimize_p ATTRIBUTE_UNUSED,\n \t      int log_align;\n \n \t      switch_to_section (targetm.asm_out.function_rodata_section\n-\t\t\t\t (current_function_decl));\n+\t\t\t\t (current_function_decl,\n+\t\t\t\t  jumptable_relocatable ()));\n \n #ifdef ADDR_VEC_ALIGN\n \t      log_align = ADDR_VEC_ALIGN (table);\n@@ -2572,7 +2589,8 @@ final_scan_insn_1 (rtx_insn *insn, FILE *file, int optimize_p ATTRIBUTE_UNUSED,\n \n \t    if (! JUMP_TABLES_IN_TEXT_SECTION)\n \t      switch_to_section (targetm.asm_out.function_rodata_section\n-\t\t\t\t (current_function_decl));\n+\t\t\t\t (current_function_decl,\n+\t\t\t\t  jumptable_relocatable ()));\n \t    else\n \t      switch_to_section (current_function_section ());\n "}, {"sha": "b44c1bd6fc7a8308f1e125bb9844176a0f9ad601", "filename": "gcc/output.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5ac0401eb128bf3dadec943741dfde7c499e49a/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5ac0401eb128bf3dadec943741dfde7c499e49a/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=d5ac0401eb128bf3dadec943741dfde7c499e49a", "patch": "@@ -572,8 +572,8 @@ extern void default_ctor_section_asm_out_constructor (rtx, int);\n extern section *default_select_section (tree, int, unsigned HOST_WIDE_INT);\n extern section *default_elf_select_section (tree, int, unsigned HOST_WIDE_INT);\n extern void default_unique_section (tree, int);\n-extern section *default_function_rodata_section (tree);\n-extern section *default_no_function_rodata_section (tree);\n+extern section *default_function_rodata_section (tree, bool);\n+extern section *default_no_function_rodata_section (tree, bool);\n extern section *default_clone_table_section (void);\n extern section *default_select_rtx_section (machine_mode, rtx,\n \t\t\t\t\t    unsigned HOST_WIDE_INT);"}, {"sha": "810d5542c28c6356cbc651e0a43b37fa0d79ad48", "filename": "gcc/target.def", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5ac0401eb128bf3dadec943741dfde7c499e49a/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5ac0401eb128bf3dadec943741dfde7c499e49a/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=d5ac0401eb128bf3dadec943741dfde7c499e49a", "patch": "@@ -559,16 +559,18 @@ Whatever the actual target object format, this is often good enough.\",\n  void, (tree decl, int reloc),\n  default_unique_section)\n \n-/* Return the readonly data section associated with function DECL.  */\n+/* Return the readonly data or relocated readonly data section\n+   associated with function DECL.  */\n DEFHOOK\n (function_rodata_section,\n- \"Return the readonly data section associated with\\n\\\n-@samp{DECL_SECTION_NAME (@var{decl})}.\\n\\\n+ \"Return the readonly data or reloc readonly data section associated with\\n\\\n+@samp{DECL_SECTION_NAME (@var{decl})}. @var{relocatable} selects the latter\\n\\\n+over the former.\\n\\\n The default version of this function selects @code{.gnu.linkonce.r.name} if\\n\\\n the function's section is @code{.gnu.linkonce.t.name}, @code{.rodata.name}\\n\\\n-if function is in @code{.text.name}, and the normal readonly-data section\\n\\\n-otherwise.\",\n- section *, (tree decl),\n+or @code{.data.rel.ro.name} if function is in @code{.text.name}, and\\n\\\n+the normal readonly-data or reloc readonly data section otherwise.\",\n+ section *, (tree decl, bool relocatable),\n  default_function_rodata_section)\n \n /* Nonnull if the target wants to override the default \".rodata\" prefix"}, {"sha": "ada99940f65b98f171be9c5d369b50742abe234e", "filename": "gcc/varasm.c", "status": "modified", "additions": 52, "deletions": 19, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5ac0401eb128bf3dadec943741dfde7c499e49a/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5ac0401eb128bf3dadec943741dfde7c499e49a/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=d5ac0401eb128bf3dadec943741dfde7c499e49a", "patch": "@@ -732,12 +732,26 @@ switch_to_other_text_partition (void)\n   switch_to_section (current_function_section ());\n }\n \n-/* Return the read-only data section associated with function DECL.  */\n+/* Return the read-only or relocated read-only data section\n+   associated with function DECL.  */\n \n section *\n-default_function_rodata_section (tree decl)\n+default_function_rodata_section (tree decl, bool relocatable)\n {\n-  if (decl != NULL_TREE && DECL_SECTION_NAME (decl))\n+  const char* sname;\n+  unsigned int flags;\n+\n+  flags = 0;\n+\n+  if (relocatable)\n+    {\n+      sname = \".data.rel.ro.local\";\n+      flags = (SECTION_WRITE | SECTION_RELRO);\n+    }\n+  else\n+    sname = \".rodata\";\n+\n+  if (decl && DECL_SECTION_NAME (decl))\n     {\n       const char *name = DECL_SECTION_NAME (decl);\n \n@@ -750,46 +764,64 @@ default_function_rodata_section (tree decl)\n \t  dot = strchr (name + 1, '.');\n \t  if (!dot)\n \t    dot = name;\n-\t  len = strlen (dot) + 8;\n+\t  len = strlen (dot) + strlen (sname) + 1;\n \t  rname = (char *) alloca (len);\n \n-\t  strcpy (rname, \".rodata\");\n+\t  strcpy (rname, sname);\n \t  strcat (rname, dot);\n-\t  return get_section (rname, SECTION_LINKONCE, decl);\n+\t  return get_section (rname, (SECTION_LINKONCE | flags), decl);\n \t}\n-      /* For .gnu.linkonce.t.foo we want to use .gnu.linkonce.r.foo.  */\n+      /* For .gnu.linkonce.t.foo we want to use .gnu.linkonce.r.foo or\n+\t .gnu.linkonce.d.rel.ro.local.foo if the jump table is relocatable.  */\n       else if (DECL_COMDAT_GROUP (decl)\n \t       && strncmp (name, \".gnu.linkonce.t.\", 16) == 0)\n \t{\n-\t  size_t len = strlen (name) + 1;\n-\t  char *rname = (char *) alloca (len);\n+\t  size_t len;\n+\t  char *rname;\n \n-\t  memcpy (rname, name, len);\n-\t  rname[14] = 'r';\n-\t  return get_section (rname, SECTION_LINKONCE, decl);\n+\t  if (relocatable)\n+\t    {\n+\t      len = strlen (name) + strlen (\".rel.ro.local\") + 1;\n+\t      rname = (char *) alloca (len);\n+\n+\t      strcpy (rname, \".gnu.linkonce.d.rel.ro.local\");\n+\t      strcat (rname, name + 15);\n+\t    }\n+\t  else\n+\t    {\n+\t      len = strlen (name) + 1;\n+\t      rname = (char *) alloca (len);\n+\n+\t      memcpy (rname, name, len);\n+\t      rname[14] = 'r';\n+\t    }\n+\t  return get_section (rname, (SECTION_LINKONCE | flags), decl);\n \t}\n       /* For .text.foo we want to use .rodata.foo.  */\n       else if (flag_function_sections && flag_data_sections\n \t       && strncmp (name, \".text.\", 6) == 0)\n \t{\n \t  size_t len = strlen (name) + 1;\n-\t  char *rname = (char *) alloca (len + 2);\n+\t  char *rname = (char *) alloca (len + strlen (sname) - 5);\n \n-\t  memcpy (rname, \".rodata\", 7);\n-\t  memcpy (rname + 7, name + 5, len - 5);\n-\t  return get_section (rname, 0, decl);\n+\t  memcpy (rname, sname, strlen (sname));\n+\t  memcpy (rname + strlen (sname), name + 5, len - 5);\n+\t  return get_section (rname, flags, decl);\n \t}\n     }\n \n-  return readonly_data_section;\n+  if (relocatable)\n+    return get_section (sname, flags, decl);\n+  else\n+    return readonly_data_section;\n }\n \n /* Return the read-only data section associated with function DECL\n    for targets where that section should be always the single\n    readonly data section.  */\n \n section *\n-default_no_function_rodata_section (tree decl ATTRIBUTE_UNUSED)\n+default_no_function_rodata_section (tree, bool)\n {\n   return readonly_data_section;\n }\n@@ -799,7 +831,8 @@ default_no_function_rodata_section (tree decl ATTRIBUTE_UNUSED)\n static const char *\n function_mergeable_rodata_prefix (void)\n {\n-  section *s = targetm.asm_out.function_rodata_section (current_function_decl);\n+  section *s = targetm.asm_out.function_rodata_section (current_function_decl,\n+\t\t\t\t\t\t\tfalse);\n   if (SECTION_STYLE (s) == SECTION_NAMED)\n     return s->named.name;\n   else"}]}