{"sha": "055416a8d14d5d741fcbf42b1f1396241737e4e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDU1NDE2YThkMTRkNWQ3NDFmY2JmNDJiMWYxMzk2MjQxNzM3ZTRlNg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-10-14T12:55:37Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-10-14T12:55:37Z"}, "message": "[multiple changes]\n\n2013-10-14  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_prag.adb (Analyze_Depends_In_Decl_Part,\n\tAnalyze_Global_In_Decl_Part,\n\tAnalyze_Pre_Post_Condition_In_Decl_Part): Install the subprogram\n\tand its formals only when it is not already installed.\n\t* sem_util.adb (Is_Refined_State): A state is refined when it\n\thas a non-empty list of constituents.\n\n2013-10-14  Tristan Gingold  <gingold@adacore.com>\n\n\t* adaint.c: Disable __gnat_get_executable_load_address for linux.\n\t* exp_prag.adb: Add comment in Expand_Pragma_Import_Export_Exception.\n\nFrom-SVN: r203532", "tree": {"sha": "58f96edfea51ed0342052cff99b6789fb2c30a39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/58f96edfea51ed0342052cff99b6789fb2c30a39"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/055416a8d14d5d741fcbf42b1f1396241737e4e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/055416a8d14d5d741fcbf42b1f1396241737e4e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/055416a8d14d5d741fcbf42b1f1396241737e4e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/055416a8d14d5d741fcbf42b1f1396241737e4e6/comments", "author": null, "committer": null, "parents": [{"sha": "39d3009fafe3a4d3660f25ef803c9f266496fa53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39d3009fafe3a4d3660f25ef803c9f266496fa53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39d3009fafe3a4d3660f25ef803c9f266496fa53"}], "stats": {"total": 46, "additions": 40, "deletions": 6}, "files": [{"sha": "f11be925a4af01ad230eb1475c0a8eeb355fa81c", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/055416a8d14d5d741fcbf42b1f1396241737e4e6/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/055416a8d14d5d741fcbf42b1f1396241737e4e6/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=055416a8d14d5d741fcbf42b1f1396241737e4e6", "patch": "@@ -1,3 +1,17 @@\n+2013-10-14  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Depends_In_Decl_Part,\n+\tAnalyze_Global_In_Decl_Part,\n+\tAnalyze_Pre_Post_Condition_In_Decl_Part): Install the subprogram\n+\tand its formals only when it is not already installed.\n+\t* sem_util.adb (Is_Refined_State): A state is refined when it\n+\thas a non-empty list of constituents.\n+\n+2013-10-14  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* adaint.c: Disable __gnat_get_executable_load_address for linux.\n+\t* exp_prag.adb: Add comment in Expand_Pragma_Import_Export_Exception.\n+\n 2013-10-14  Tristan Gingold  <gingold@adacore.com>\n \n \t* s-vmexta.ads: Add comments."}, {"sha": "2651fd07d84be11ba3ba558016c5cf55c41c4437", "filename": "gcc/ada/adaint.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/055416a8d14d5d741fcbf42b1f1396241737e4e6/gcc%2Fada%2Fadaint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/055416a8d14d5d741fcbf42b1f1396241737e4e6/gcc%2Fada%2Fadaint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.c?ref=055416a8d14d5d741fcbf42b1f1396241737e4e6", "patch": "@@ -3941,7 +3941,8 @@ __gnat_get_executable_load_address (void)\n #if defined (__APPLE__)\n   return _dyld_get_image_header (0);\n \n-#elif defined (__linux__)\n+#elif 0 && defined (__linux__)\n+  /* Currently disabled as it needs at least -ldl.  */\n   struct link_map *map = _r_debug.r_map;\n \n   return (const void *)map->l_addr;"}, {"sha": "35bedf37332e97cb435dd4d4de89176b06acfab0", "filename": "gcc/ada/exp_prag.adb", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/055416a8d14d5d741fcbf42b1f1396241737e4e6/gcc%2Fada%2Fexp_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/055416a8d14d5d741fcbf42b1f1396241737e4e6/gcc%2Fada%2Fexp_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_prag.adb?ref=055416a8d14d5d741fcbf42b1f1396241737e4e6", "patch": "@@ -616,6 +616,8 @@ package body Exp_Prag is\n                Code           : Node_Id;\n \n             begin\n+               --  Compute the symbol for the code of the condition\n+\n                if Present (Interface_Name (Id)) then\n                   Excep_Image := Strval (Interface_Name (Id));\n                else\n@@ -639,10 +641,16 @@ package body Exp_Prag is\n                   Analyze (Expression (Lang_Char));\n \n                   if Exception_Code (Id) /= No_Uint then\n+\n+                     --  The code for the exception is present.Create a\n+                     --  linker alias to define the symbol.\n+\n                      Code :=\n                        Make_Integer_Literal (Loc,\n                          Intval => Exception_Code (Id));\n \n+                     --  Declare a dummy object\n+\n                      Excep_Object :=\n                        Make_Object_Declaration (Loc,\n                          Defining_Identifier => Excep_Internal,\n@@ -652,10 +660,15 @@ package body Exp_Prag is\n                      Insert_Action (N, Excep_Object);\n                      Analyze (Excep_Object);\n \n+                     --  Clear severity bits\n+\n                      Start_String;\n                      Store_String_Int\n                        (UI_To_Int (Exception_Code (Id)) / 8 * 8);\n \n+                     --  Insert a pragma Linker_Alias to set the value of\n+                     --  the dummy object symbol.\n+\n                      Excep_Alias :=\n                        Make_Pragma (Loc,\n                          Chars                        => Name_Linker_Alias,\n@@ -671,6 +684,9 @@ package body Exp_Prag is\n                      Insert_Action (N, Excep_Alias);\n                      Analyze (Excep_Alias);\n \n+                     --  Insert a pragma Export to give a Linker_Name to the\n+                     --  dummy object.\n+\n                      Export_Pragma :=\n                        Make_Pragma (Loc,\n                          Chars                        => Name_Export,\n@@ -704,6 +720,8 @@ package body Exp_Prag is\n                                 Strval => Excep_Image))));\n                   end if;\n \n+                  --  Generate the call to Register_VMS_Exception\n+\n                   Rewrite (Call,\n                     Make_Procedure_Call_Statement (Loc,\n                       Name => New_Reference_To"}, {"sha": "0fbb386d3d48c9ebb6bbf9c37613def6d40686cf", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/055416a8d14d5d741fcbf42b1f1396241737e4e6/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/055416a8d14d5d741fcbf42b1f1396241737e4e6/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=055416a8d14d5d741fcbf42b1f1396241737e4e6", "patch": "@@ -451,7 +451,7 @@ package body Sem_Prag is\n             --  pertaining to subprogram declarations. Skip the installation\n             --  for subprogram bodies because the formals are already visible.\n \n-            if Current_Scope /= Subp_Id then\n+            if not In_Open_Scopes (Subp_Id) then\n                Restore_Scope := True;\n                Push_Scope (Subp_Id);\n                Install_Formals (Subp_Id);\n@@ -1434,7 +1434,7 @@ package body Sem_Prag is\n          --  to subprogram declarations. Skip the installation for subprogram\n          --  bodies because the formals are already visible.\n \n-         if Current_Scope /= Spec_Id then\n+         if not In_Open_Scopes (Spec_Id) then\n             Restore_Scope := True;\n             Push_Scope (Spec_Id);\n             Install_Formals (Spec_Id);\n@@ -1919,7 +1919,7 @@ package body Sem_Prag is\n          --  item. This falls out of the general rule of aspects pertaining to\n          --  subprogram declarations.\n \n-         if Current_Scope /= Spec_Id then\n+         if not In_Open_Scopes (Spec_Id) then\n             Restore_Scope := True;\n             Push_Scope (Spec_Id);\n             Install_Formals (Spec_Id);\n@@ -19319,7 +19319,7 @@ package body Sem_Prag is\n       --  Ensure that the subprogram and its formals are visible when analyzing\n       --  the expression of the pragma.\n \n-      if Current_Scope /= Subp_Id then\n+      if not In_Open_Scopes (Subp_Id) then\n          Restore_Scope := True;\n          Push_Scope (Subp_Id);\n          Install_Formals (Subp_Id);"}, {"sha": "2df70ea2b7b58746085509adf85828d1a8dadf6a", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/055416a8d14d5d741fcbf42b1f1396241737e4e6/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/055416a8d14d5d741fcbf42b1f1396241737e4e6/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=055416a8d14d5d741fcbf42b1f1396241737e4e6", "patch": "@@ -3418,7 +3418,8 @@ package body Sem_Util is\n \n             return\n               Ekind (Item_Id) = E_Abstract_State\n-                and then Present (Refinement_Constituents (Item_Id));\n+                and then not Is_Empty_Elmt_List\n+                               (Refinement_Constituents (Item_Id));\n          end if;\n       end Is_Refined_State;\n "}]}