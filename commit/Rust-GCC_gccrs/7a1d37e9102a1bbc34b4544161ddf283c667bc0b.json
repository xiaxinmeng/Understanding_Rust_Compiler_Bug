{"sha": "7a1d37e9102a1bbc34b4544161ddf283c667bc0b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2ExZDM3ZTkxMDJhMWJiYzM0YjQ1NDQxNjFkZGYyODNjNjY3YmMwYg==", "commit": {"author": {"name": "Matt Austern", "email": "austern@apple.com", "date": "2003-06-20T00:33:58Z"}, "committer": {"name": "Matt Austern", "email": "austern@gcc.gnu.org", "date": "2003-06-20T00:33:58Z"}, "message": "Fix for PR c++/11228, infinite loop for new int[n]().\n\nFrom-SVN: r68235", "tree": {"sha": "179855e458e087c8af77e7b247e9693d89ff9b45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/179855e458e087c8af77e7b247e9693d89ff9b45"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a1d37e9102a1bbc34b4544161ddf283c667bc0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a1d37e9102a1bbc34b4544161ddf283c667bc0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a1d37e9102a1bbc34b4544161ddf283c667bc0b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a1d37e9102a1bbc34b4544161ddf283c667bc0b/comments", "author": null, "committer": null, "parents": [{"sha": "3a95fe8f332b8ab061d7a6d269ef0ed6ea004b07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a95fe8f332b8ab061d7a6d269ef0ed6ea004b07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a95fe8f332b8ab061d7a6d269ef0ed6ea004b07"}], "stats": {"total": 126, "additions": 125, "deletions": 1}, "files": [{"sha": "ba1fb35884683d1779f557d853675ef57b4c0a75", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a1d37e9102a1bbc34b4544161ddf283c667bc0b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a1d37e9102a1bbc34b4544161ddf283c667bc0b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7a1d37e9102a1bbc34b4544161ddf283c667bc0b", "patch": "@@ -1,3 +1,11 @@\n+2003-06-19  Matt Austern  <austern@apple.com>\n+\n+\tPR c++/11228\n+\t* init.c (build_zero_init): Assert that number of array elements\n+\tis an integer constant.\n+\t(build_default_init) Don't use build_zero_init for arrays with\n+\tvariable number of elements.\n+\t\n 2003-06-19  Andreas Jaeger  <aj@suse.de>\n \n \t* cp-tree.h: Remove duplicated declarations."}, {"sha": "710f61744131367a15a7f628b55b86b99f98f2c4", "filename": "gcc/cp/init.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a1d37e9102a1bbc34b4544161ddf283c667bc0b/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a1d37e9102a1bbc34b4544161ddf283c667bc0b/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=7a1d37e9102a1bbc34b4544161ddf283c667bc0b", "patch": "@@ -180,6 +180,9 @@ build_zero_init (tree type, tree nelts, bool static_storage_p)\n \n      -- if T is a reference type, no initialization is performed.  */\n \n+  my_friendly_assert (nelts == NULL_TREE || TREE_CODE (nelts) == INTEGER_CST,\n+\t\t      20030618);\n+\n   if (type == error_mark_node)\n     ;\n   else if (static_storage_p && zero_init_p (type))\n@@ -232,6 +235,8 @@ build_zero_init (tree type, tree nelts, bool static_storage_p)\n       /* Iterate over the array elements, building initializations.  */\n       inits = NULL_TREE;\n       max_index = nelts ? nelts : array_type_nelts (type);\n+      my_friendly_assert (TREE_CODE (max_index) == INTEGER_CST, 20030618);\n+\n       for (index = size_zero_node;\n \t   !tree_int_cst_lt (max_index, index);\n \t   index = size_binop (PLUS_EXPR, index, size_one_node))\n@@ -291,7 +296,8 @@ build_default_init (tree type, tree nelts)\n      standard says we should have generated would be precisely the\n      same as that obtained by calling build_zero_init below, so things\n      work out OK.  */\n-  if (TYPE_NEEDS_CONSTRUCTING (type))\n+  if (TYPE_NEEDS_CONSTRUCTING (type)\n+      || (nelts && TREE_CODE (nelts) != INTEGER_CST))\n     return NULL_TREE;\n       \n   /* At this point, TYPE is either a POD class type, an array of POD"}, {"sha": "2a1363af422cc89296149ea0147837d92b11a4af", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a1d37e9102a1bbc34b4544161ddf283c667bc0b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a1d37e9102a1bbc34b4544161ddf283c667bc0b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7a1d37e9102a1bbc34b4544161ddf283c667bc0b", "patch": "@@ -1,3 +1,11 @@\n+2003-06-19  Matt Austern  <austern@apple.com>\n+\n+\tPR c++/11228\n+\t* g++.dg/anew1.C: New test.\n+\t* g++.dg/anew2.C: New test.\n+\t* g++.dg/anew3.C: New test.\n+\t* g++.dg/anew4.C: New test.\n+\t\n 2003-06-19  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* gcc.c-torture/compile/simd-5.c: Don't XFAIL on H8."}, {"sha": "a14408ace0ab23b2f2197cb5c010d3f458c9be8d", "filename": "gcc/testsuite/g++.dg/expr/anew1.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a1d37e9102a1bbc34b4544161ddf283c667bc0b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fanew1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a1d37e9102a1bbc34b4544161ddf283c667bc0b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fanew1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fanew1.C?ref=7a1d37e9102a1bbc34b4544161ddf283c667bc0b", "patch": "@@ -0,0 +1,20 @@\n+// { dg-do run }\n+// PR 11228: array operator new, with zero-initialization and a variable sized array.\n+// Regression test for PR \n+// Author: Matt Austern <austern@apple.com>\n+\n+\n+int* allocate(int n)\n+{\n+  return new int[n]();\n+}\n+\n+int main()\n+{\n+  const int n = 17;\n+  int* p = allocate(n);\n+  for (int i = 0; i < n; ++i)\n+    if (p[i] != 0)\n+      return 1;\n+  return 0;\n+}"}, {"sha": "b8681897577b0cf5113a23f1166a38306393b0b9", "filename": "gcc/testsuite/g++.dg/expr/anew2.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a1d37e9102a1bbc34b4544161ddf283c667bc0b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fanew2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a1d37e9102a1bbc34b4544161ddf283c667bc0b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fanew2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fanew2.C?ref=7a1d37e9102a1bbc34b4544161ddf283c667bc0b", "patch": "@@ -0,0 +1,20 @@\n+// { dg-do run }\n+// PR 11228: array operator new, with zero-initialization and a variable sized array.\n+// Regression test for PR \n+// Author: Matt Austern <austern@apple.com>\n+\n+\n+double* allocate(int n)\n+{\n+  return new double[n]();\n+}\n+\n+int main()\n+{\n+  const int n = 17;\n+  double* p = allocate(n);\n+  for (int i = 0; i < n; ++i)\n+    if (p[i] != 0.0)\n+      return 1;\n+  return 0;\n+}"}, {"sha": "3223546d4c8da8f780f76b3a964c847e8aa7c04b", "filename": "gcc/testsuite/g++.dg/expr/anew3.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a1d37e9102a1bbc34b4544161ddf283c667bc0b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fanew3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a1d37e9102a1bbc34b4544161ddf283c667bc0b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fanew3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fanew3.C?ref=7a1d37e9102a1bbc34b4544161ddf283c667bc0b", "patch": "@@ -0,0 +1,25 @@\n+// { dg-do run }\n+// PR 11228: array operator new, with zero-initialization and a variable sized array.\n+// Regression test for PR \n+// Author: Matt Austern <austern@apple.com>\n+\n+struct X\n+{\n+  int a;\n+  double b;\n+};\n+\n+X* allocate(int n)\n+{\n+  return new X[n]();\n+}\n+\n+int main()\n+{\n+  const int n = 17;\n+  X* p = allocate(n);\n+  for (int i = 0; i < n; ++i)\n+    if (p[i].a != 0 || p[i].b != 0.0)\n+      return 1;\n+  return 0;\n+}"}, {"sha": "8999ffb53c6d7162f2b5f597d1697ea9c8e28953", "filename": "gcc/testsuite/g++.dg/expr/anew4.C", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a1d37e9102a1bbc34b4544161ddf283c667bc0b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fanew4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a1d37e9102a1bbc34b4544161ddf283c667bc0b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fanew4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fanew4.C?ref=7a1d37e9102a1bbc34b4544161ddf283c667bc0b", "patch": "@@ -0,0 +1,37 @@\n+// { dg-do run }\n+// PR 11228: array operator new, with zero-initialization and a variable sized array.\n+// Regression test for PR \n+// Author: Matt Austern <austern@apple.com>\n+\n+struct B\n+{\n+  B();\n+  int n;\n+};\n+\n+B::B()\n+{\n+  n = 137;\n+}\n+\n+\n+struct D : public B\n+{\n+  double x;\n+};\n+\n+\n+D* allocate(int n)\n+{\n+  return new D[n]();\n+}\n+\n+int main()\n+{\n+  const int n = 17;\n+  D* p = allocate(n);\n+  for (int i = 0; i < n; ++i)\n+    if (p[i].n != 137 || p[i].x != 0)\n+      return 1;\n+  return 0;\n+}"}]}