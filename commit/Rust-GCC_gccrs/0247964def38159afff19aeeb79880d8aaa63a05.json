{"sha": "0247964def38159afff19aeeb79880d8aaa63a05", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDI0Nzk2NGRlZjM4MTU5YWZmZjE5YWVlYjc5ODgwZDhhYWE2M2EwNQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-10-14T13:10:22Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-10-14T13:10:22Z"}, "message": "[multiple changes]\n\n2013-10-14  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_prag.adb, exp_ch11.adb, s-exctab.adb: Minor reformatting.\n\t* usage.adb: Add line for -gnateu switch.\n\n2013-10-14  Vincent Celier  <celier@adacore.com>\n\n\t* lib-writ.ads: Add comments to indicate that a path name in\n\tD lines may be quoted if the path name includes directories\n\twith spaces.\n\n2013-10-14  Robert Dewar  <dewar@adacore.com>\n\n\t* debug.adb: Document -gnatd.E.\n\t* gnat1drv.adb (Adjust_Global_Switches): Set Error_To_Warning\n\tif -gnatd.E set.\n\t* opt.ads (Error_To_Warning): New switch.\n\t* osint.adb: Minor reformatting.\n\t* sem_warn.adb (Warn_On_Overlapping_Actuals): Overlap is error\n\tin some cases in Ada 2012 mode (unless Error_To_Warning) is set.\n\t* sem_warn.ads (Warn_On_Overlapping_Actuals): Document error\n\tin Ada 2012 mode.\n\n2013-10-14  Tristan Gingold  <gingold@adacore.com>\n\n\t* cstand.adb: Add a comment for Standard_Exception_Type.\n\n2013-10-14  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch4.adb (Process_Transient_Object): If a transient scope\n\thas already been created, use the corresponding Node_To_Be_Wrapped\n\tas the insertion point for the controlled actions.\n\nFrom-SVN: r203539", "tree": {"sha": "50af03992c889d882bb312b0e60314f61ad05e27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/50af03992c889d882bb312b0e60314f61ad05e27"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0247964def38159afff19aeeb79880d8aaa63a05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0247964def38159afff19aeeb79880d8aaa63a05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0247964def38159afff19aeeb79880d8aaa63a05", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0247964def38159afff19aeeb79880d8aaa63a05/comments", "author": null, "committer": null, "parents": [{"sha": "e443f142047e2a9f67dd859e77d26d94fa3241e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e443f142047e2a9f67dd859e77d26d94fa3241e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e443f142047e2a9f67dd859e77d26d94fa3241e8"}], "stats": {"total": 171, "additions": 133, "deletions": 38}, "files": [{"sha": "bee6a791a512299ccf542afcefa26248c64e55f4", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0247964def38159afff19aeeb79880d8aaa63a05/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0247964def38159afff19aeeb79880d8aaa63a05/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=0247964def38159afff19aeeb79880d8aaa63a05", "patch": "@@ -1,3 +1,36 @@\n+2013-10-14  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_prag.adb, exp_ch11.adb, s-exctab.adb: Minor reformatting.\n+\t* usage.adb: Add line for -gnateu switch.\n+\n+2013-10-14  Vincent Celier  <celier@adacore.com>\n+\n+\t* lib-writ.ads: Add comments to indicate that a path name in\n+\tD lines may be quoted if the path name includes directories\n+\twith spaces.\n+\n+2013-10-14  Robert Dewar  <dewar@adacore.com>\n+\n+\t* debug.adb: Document -gnatd.E.\n+\t* gnat1drv.adb (Adjust_Global_Switches): Set Error_To_Warning\n+\tif -gnatd.E set.\n+\t* opt.ads (Error_To_Warning): New switch.\n+\t* osint.adb: Minor reformatting.\n+\t* sem_warn.adb (Warn_On_Overlapping_Actuals): Overlap is error\n+\tin some cases in Ada 2012 mode (unless Error_To_Warning) is set.\n+\t* sem_warn.ads (Warn_On_Overlapping_Actuals): Document error\n+\tin Ada 2012 mode.\n+\n+2013-10-14  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* cstand.adb: Add a comment for Standard_Exception_Type.\n+\n+2013-10-14  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch4.adb (Process_Transient_Object): If a transient scope\n+\thas already been created, use the corresponding Node_To_Be_Wrapped\n+\tas the insertion point for the controlled actions.\n+\n 2013-10-14  Tristan Gingold  <gingold@adacore.com>\n \n \t* cstand.adb (Create_Standard): Change Import_Code component"}, {"sha": "ed0223880496eb94eddd7abbae461343c4753ee9", "filename": "gcc/ada/cstand.adb", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0247964def38159afff19aeeb79880d8aaa63a05/gcc%2Fada%2Fcstand.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0247964def38159afff19aeeb79880d8aaa63a05/gcc%2Fada%2Fcstand.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcstand.adb?ref=0247964def38159afff19aeeb79880d8aaa63a05", "patch": "@@ -1448,9 +1448,9 @@ package body CStand is\n                                (Type_Definition (Parent (Standard_Duration))));\n \n          --  Normally it does not matter that nodes in package Standard are\n-         --  not marked as analyzed. The Scalar_Range of the fixed-point\n-         --  type Standard_Duration is an exception, because of the special\n-         --  test made in Freeze.Freeze_Fixed_Point_Type.\n+         --  not marked as analyzed. The Scalar_Range of the fixed-point type\n+         --  Standard_Duration is an exception, because of the special test\n+         --  made in Freeze.Freeze_Fixed_Point_Type.\n \n          Set_Analyzed (Scalar_Range (Standard_Duration));\n \n@@ -1471,6 +1471,10 @@ package body CStand is\n \n       --  Build standard exception type. Note that the type name here is\n       --  actually used in the generated code, so it must be set correctly.\n+      --  The type Standard_Exception_Type must be consistent with the type\n+      --  System.Standard_Library.Exception_Data, as the latter is what is\n+      --  known by the run-time. Components of the record are documented in\n+      --  the declaration in System.Standard_Library.\n \n       Standard_Exception_Type := New_Standard_Entity;\n       Set_Ekind       (Standard_Exception_Type, E_Record_Type);"}, {"sha": "3712fe1ce7d257374bf067bbb0d069e268bcac5c", "filename": "gcc/ada/debug.adb", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0247964def38159afff19aeeb79880d8aaa63a05/gcc%2Fada%2Fdebug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0247964def38159afff19aeeb79880d8aaa63a05/gcc%2Fada%2Fdebug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug.adb?ref=0247964def38159afff19aeeb79880d8aaa63a05", "patch": "@@ -122,7 +122,7 @@ package body Debug is\n    --  d.B\n    --  d.C  Generate concatenation call, do not generate inline code\n    --  d.D  SPARK strict mode\n-   --  d.E\n+   --  d.E  Turn selected errors into warnings\n    --  d.F  SPARK mode\n    --  d.G  Frame condition mode for gnat2why\n    --  d.H\n@@ -581,22 +581,26 @@ package body Debug is\n    --  d.w  This flag turns off the scanning of loops to detect possible\n    --       infinite loops.\n \n-   --  d.A  There seems to be a problem with ASIS if we activate the circuit\n-   --       for reading and writing the aspect specification hash table, so\n-   --       for now, this is controlled by the debug flag d.A. The hash table\n-   --       is only written and read if this flag is set.\n-\n    --  d.x  No exception handlers in generated code. This causes exception\n    --       handlers to be eliminated from the generated code. They are still\n    --       fully compiled and analyzed, they just get eliminated from the\n    --       code generation step.\n \n+   --  d.A  There seems to be a problem with ASIS if we activate the circuit\n+   --       for reading and writing the aspect specification hash table, so\n+   --       for now, this is controlled by the debug flag d.A. The hash table\n+   --       is only written and read if this flag is set.\n+\n    --  d.C  Generate call to System.Concat_n.Str_Concat_n routines in cases\n    --       where we would normally generate inline concatenation code.\n \n    --  d.D  SPARK strict mode. Interpret compiler permissions as strictly as\n    --       possible in SPARK mode.\n-   --\n+\n+   --  d.E  Turn selected errors into warnings. This debug switch causes a\n+   --       specific set of error messages into warnings. Setting this switch\n+   --       causes Opt.Error_To_Warning to be set to True.\n+\n    --  d.F  SPARK mode. Generate AST in a form suitable for formal\n    --       verification, as well as additional cross reference information in\n    --       ALI files to compute effects of subprograms. Note that ALI files"}, {"sha": "1f5ebe8847e724e2b55e2f5ecd8df2bf71bd2301", "filename": "gcc/ada/exp_ch11.adb", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0247964def38159afff19aeeb79880d8aaa63a05/gcc%2Fada%2Fexp_ch11.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0247964def38159afff19aeeb79880d8aaa63a05/gcc%2Fada%2Fexp_ch11.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch11.adb?ref=0247964def38159afff19aeeb79880d8aaa63a05", "patch": "@@ -1166,18 +1166,17 @@ package body Exp_Ch11 is\n \n    --  Generates:\n    --     exceptE : constant String := \"A.B.EXCEP\";   -- static data\n-   --     except : exception_data :=  (\n-   --                    Handled_By_Other => False,\n-   --                    Lang             => 'A',\n-   --                    Name_Length      => exceptE'Length,\n-   --                    Full_Name        => exceptE'Address,\n-   --                    HTable_Ptr       => null,\n-   --                    Foreign_Data     => null,\n-   --                    Raise_Hook       => null,\n-   --                    );\n+   --     except : exception_data :=\n+   --                (Handled_By_Other => False,\n+   --                 Lang             => 'A',\n+   --                 Name_Length      => exceptE'Length,\n+   --                 Full_Name        => exceptE'Address,\n+   --                 HTable_Ptr       => null,\n+   --                 Foreign_Data     => null,\n+   --                 Raise_Hook       => null);\n \n    --  (protecting test only needed if not at library level)\n-   --\n+\n    --     exceptF : Boolean := True --  static data\n    --     if exceptF then\n    --        exceptF := False;"}, {"sha": "163363e39118d00ce77431f77e369769503434ff", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0247964def38159afff19aeeb79880d8aaa63a05/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0247964def38159afff19aeeb79880d8aaa63a05/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=0247964def38159afff19aeeb79880d8aaa63a05", "patch": "@@ -12159,11 +12159,22 @@ package body Exp_Ch4 is\n          Top : Node_Id;\n \n       begin\n+         --  In most cases an expression that creates a controlled object\n+         --  generates a transient scope around it. If this is the case then\n+         --  other controlled values can reuse it.\n+\n+         if Scope_Is_Transient then\n+            return Node_To_Be_Wrapped;\n+\n+         --  In some cases, such as return statements, no transient scope is\n+         --  generated, in which case we have to look up in the tree to find\n+         --  the proper list on which to place the transient.\n+\n          --  When the node is inside a case/if expression, the lifetime of any\n          --  temporary controlled object is extended. Find a suitable insertion\n          --  node by locating the topmost case or if expressions.\n \n-         if Within_Case_Or_If_Expression (N) then\n+         elsif Within_Case_Or_If_Expression (N) then\n             Par := N;\n             Top := N;\n             while Present (Par) loop"}, {"sha": "105f024744a67fee723b12b56429eb69db963c09", "filename": "gcc/ada/exp_prag.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0247964def38159afff19aeeb79880d8aaa63a05/gcc%2Fada%2Fexp_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0247964def38159afff19aeeb79880d8aaa63a05/gcc%2Fada%2Fexp_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_prag.adb?ref=0247964def38159afff19aeeb79880d8aaa63a05", "patch": "@@ -713,7 +713,7 @@ package body Exp_Prag is\n                   else\n                      Code :=\n                         Make_Function_Call (Loc,\n-                          Name =>\n+                          Name                   =>\n                             New_Reference_To (RTE (RE_Import_Address), Loc),\n                           Parameter_Associations => New_List\n                             (Make_String_Literal (Loc,"}, {"sha": "24341acd991e3c2eda6d1dd164261ebe9124ac8c", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0247964def38159afff19aeeb79880d8aaa63a05/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0247964def38159afff19aeeb79880d8aaa63a05/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=0247964def38159afff19aeeb79880d8aaa63a05", "patch": "@@ -117,6 +117,13 @@ procedure Gnat1drv is\n          Relaxed_RM_Semantics := True;\n       end if;\n \n+      --  -gnatd.E sets Error_To_Warning mode, causing selected error messages\n+      --  to be treated as warnings instead of errors.\n+\n+      if Debug_Flag_Dot_EE then\n+         Error_To_Warning := True;\n+      end if;\n+\n       --  Disable CodePeer_Mode in Check_Syntax, since we need front-end\n       --  expansion.\n "}, {"sha": "f886b668ce0167806d2c4567d90611fa9e36db11", "filename": "gcc/ada/lib-writ.ads", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0247964def38159afff19aeeb79880d8aaa63a05/gcc%2Fada%2Flib-writ.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0247964def38159afff19aeeb79880d8aaa63a05/gcc%2Fada%2Flib-writ.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-writ.ads?ref=0247964def38159afff19aeeb79880d8aaa63a05", "patch": "@@ -777,6 +777,13 @@ package Lib.Writ is\n \n    --    D source-name time-stamp checksum [subunit-name] line:file-name\n \n+   --      source-name also includes preprocessing data file and preprocessing\n+   --      definition file. These preprocessing files may be given as full\n+   --      path names instead of simple file names. If a full path name\n+   --      includes a directory with spaces, the path name is quoted (quote\n+   --      characters (\") added at start and end, and any internal quotes are\n+   --      doubled).\n+\n    --      The time-stamp field contains the time stamp of the corresponding\n    --      source file. See types.ads for details on time stamp representation.\n "}, {"sha": "762ba3959b48367cdb2ba088f07635e862e8e920", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0247964def38159afff19aeeb79880d8aaa63a05/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0247964def38159afff19aeeb79880d8aaa63a05/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=0247964def38159afff19aeeb79880d8aaa63a05", "patch": "@@ -516,6 +516,13 @@ package Opt is\n    --  to make a single long message, and then this message is split up into\n    --  multiple lines not exceeding the specified length. Set by -gnatj=nn.\n \n+   Error_To_Warning : Boolean := False;\n+   --  GNAT\n+   --  If True, then certain error messages (e.g. parameter overlap messages\n+   --  for procedure calls in Ada 2012 mode) are treated as warnings instead\n+   --  of errors. Set by debug flag -gnatd.E. A search for Error_To_Warning\n+   --  will identify affected messages.\n+\n    Exception_Handler_Encountered : Boolean := False;\n    --  GNAT\n    --  This flag is set true if the parser encounters an exception handler."}, {"sha": "aefffc3ed590b8ee1026cd2f06188ae31625247c", "filename": "gcc/ada/osint.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0247964def38159afff19aeeb79880d8aaa63a05/gcc%2Fada%2Fosint.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0247964def38159afff19aeeb79880d8aaa63a05/gcc%2Fada%2Fosint.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fosint.adb?ref=0247964def38159afff19aeeb79880d8aaa63a05", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1044,8 +1044,8 @@ package body Osint is\n \n    procedure Fail (S : String) is\n    begin\n-      --  We use Output in case there is a special output set up.\n-      --  In this case Set_Standard_Error will have no immediate effect.\n+      --  We use Output in case there is a special output set up. In this case\n+      --  Set_Standard_Error will have no immediate effect.\n \n       Set_Standard_Error;\n       Osint.Write_Program_Name;"}, {"sha": "afd46e96f7d0c2c0afd185dc8e31ba4d1efdd9c5", "filename": "gcc/ada/s-exctab.adb", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0247964def38159afff19aeeb79880d8aaa63a05/gcc%2Fada%2Fs-exctab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0247964def38159afff19aeeb79880d8aaa63a05/gcc%2Fada%2Fs-exctab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-exctab.adb?ref=0247964def38159afff19aeeb79880d8aaa63a05", "patch": "@@ -67,15 +67,12 @@ package body System.Exception_Table is\n       S1 : constant Big_String_Ptr := To_Ptr (A);\n       S2 : constant Big_String_Ptr := To_Ptr (B);\n       J : Integer := 1;\n-\n    begin\n       loop\n          if S1 (J) /= S2 (J) then\n             return False;\n-\n          elsif S1 (J) = ASCII.NUL then\n             return True;\n-\n          else\n             J := J + 1;\n          end if;"}, {"sha": "d9c80de85108cd028eb6c159cfbc2e7cc4ca2c2b", "filename": "gcc/ada/sem_warn.adb", "status": "modified", "additions": 27, "deletions": 8, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0247964def38159afff19aeeb79880d8aaa63a05/gcc%2Fada%2Fsem_warn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0247964def38159afff19aeeb79880d8aaa63a05/gcc%2Fada%2Fsem_warn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.adb?ref=0247964def38159afff19aeeb79880d8aaa63a05", "patch": "@@ -3410,12 +3410,26 @@ package body Sem_Warn is\n                   then\n                      null;\n \n-                  --  Here we may need to issue message\n+                  --  Here we may need to issue overlap message\n \n                   else\n                      Error_Msg_Warn :=\n+\n+                       --  Overlap checking is an error only in Ada 2012. For\n+                       --  earlier versions of Ada, this is a warning.\n+\n                        Ada_Version < Ada_2012\n-                         or else not Is_Elementary_Type (Etype (Form1));\n+\n+                       --  Overlap is only illegal in Ada 2012 in the case of\n+                       --  elementary types (passed by copy). For other types,\n+                       --  we always have a warning in all Ada versions.\n+\n+                       or else not Is_Elementary_Type (Etype (Form1))\n+\n+                       --  Finally, debug flag -gnatd.E changes the error to a\n+                       --  warning even in Ada 2012 mode.\n+\n+                       or else Error_To_Warning;\n \n                      declare\n                         Act  : Node_Id;\n@@ -3457,23 +3471,28 @@ package body Sem_Warn is\n                         then\n                            if Act1 = First_Actual (N) then\n                               Error_Msg_FE\n-                                (\"`IN OUT` prefix overlaps with \"\n-                                 & \"actual for&?I?\", Act1, Form);\n+                                (\"<`IN OUT` prefix overlaps with \"\n+                                 & \"actual for&\", Act1, Form);\n \n                            else\n                               --  For greater clarity, give name of formal\n \n                               Error_Msg_Node_2 := Form;\n                               Error_Msg_FE\n-                                (\"writable actual for & overlaps with \"\n-                                  & \"actual for&?I?\", Act1, Form);\n+                                (\"<writable actual for & overlaps with \"\n+                                 & \"actual for&\", Act1, Form);\n                            end if;\n \n                         else\n+                           --  For greater clarity, give name of formal\n+\n                            Error_Msg_Node_2 := Form;\n+\n+                           --  This is one of the messages\n+\n                            Error_Msg_FE\n-                             (\"writable actual for & overlaps with \"\n-                               & \"actual for&?I?\", Act1, Form1);\n+                             (\"<writable actual for & overlaps with \"\n+                              & \"actual for&\", Act1, Form1);\n                         end if;\n                      end;\n                   end if;"}, {"sha": "22a3c6c42eff0a7296ab6d17f8762cbddf63b9c2", "filename": "gcc/ada/sem_warn.ads", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0247964def38159afff19aeeb79880d8aaa63a05/gcc%2Fada%2Fsem_warn.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0247964def38159afff19aeeb79880d8aaa63a05/gcc%2Fada%2Fsem_warn.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.ads?ref=0247964def38159afff19aeeb79880d8aaa63a05", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1999-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1999-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -198,7 +198,9 @@ package Sem_Warn is\n    procedure Warn_On_Overlapping_Actuals (Subp : Entity_Id; N : Node_Id);\n    --  Called on a subprogram call. Checks whether an IN OUT actual that is\n    --  not by-copy may overlap with another actual, thus leading to aliasing\n-   --  in the body of the called subprogram.\n+   --  in the body of the called subprogram. This is indeed a warning in Ada\n+   --  versions prior to Ada 2012, but, unless Opt.Error_To_Warning is set by\n+   --  use of debug flag -gnatd.E, this is illegal and generates an error.\n \n    procedure Warn_On_Suspicious_Index (Name : Entity_Id; X : Node_Id);\n    --  This is called after resolving an indexed component or a slice. Name"}, {"sha": "2d541c4ae6642a08de2ec1e4206b53f2eb6f4675", "filename": "gcc/ada/usage.adb", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0247964def38159afff19aeeb79880d8aaa63a05/gcc%2Fada%2Fusage.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0247964def38159afff19aeeb79880d8aaa63a05/gcc%2Fada%2Fusage.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fusage.adb?ref=0247964def38159afff19aeeb79880d8aaa63a05", "patch": "@@ -251,6 +251,11 @@ begin\n    Write_Switch_Char (\"eT=?\");\n    Write_Line (\"Read target dependent information file ?, e.g. gnateT=tdf\");\n \n+   --  Line for -gnateu switch\n+\n+   Write_Switch_Char (\"eu\");\n+   Write_Line (\"Ignore unrecognized style/validity/warning switches\");\n+\n    --  Line for -gnateV switch\n \n    Write_Switch_Char (\"eV\");"}]}