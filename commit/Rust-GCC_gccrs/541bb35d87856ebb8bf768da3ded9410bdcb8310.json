{"sha": "541bb35d87856ebb8bf768da3ded9410bdcb8310", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTQxYmIzNWQ4Nzg1NmViYjhiZjc2OGRhM2RlZDk0MTBiZGNiODMxMA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2018-06-12T10:19:40Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2018-06-12T10:19:40Z"}, "message": "decl.c (gnat_to_gnu_entity): Do not get the expression of a dispatch table that is not being defined.\n\n\t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Constant>: Do not get\n\tthe expression of a dispatch table that is not being defined.\n\t<E_Record_Subtype>: Remove obsolete kludge.\n\nFrom-SVN: r261483", "tree": {"sha": "364f8db69a6df3d75bdea7456500c53248aeb3a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/364f8db69a6df3d75bdea7456500c53248aeb3a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/541bb35d87856ebb8bf768da3ded9410bdcb8310", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/541bb35d87856ebb8bf768da3ded9410bdcb8310", "html_url": "https://github.com/Rust-GCC/gccrs/commit/541bb35d87856ebb8bf768da3ded9410bdcb8310", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/541bb35d87856ebb8bf768da3ded9410bdcb8310/comments", "author": null, "committer": null, "parents": [{"sha": "81034751aa6b2b7d7fd14724478d3ac7c4356c08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81034751aa6b2b7d7fd14724478d3ac7c4356c08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81034751aa6b2b7d7fd14724478d3ac7c4356c08"}], "stats": {"total": 27, "additions": 12, "deletions": 15}, "files": [{"sha": "8349f0f8ac60e5dfd728d0e6a576f0dc5f6085f7", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/541bb35d87856ebb8bf768da3ded9410bdcb8310/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/541bb35d87856ebb8bf768da3ded9410bdcb8310/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=541bb35d87856ebb8bf768da3ded9410bdcb8310", "patch": "@@ -1,3 +1,9 @@\n+2018-06-12  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Constant>: Do not get\n+\tthe expression of a dispatch table that is not being defined.\n+\t<E_Record_Subtype>: Remove obsolete kludge.\n+\n 2018-06-12  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/decl.c (warn_on_field_placement): Use specific wording"}, {"sha": "2eb156b94d09e2edf12266c3f0c22447b5ac0c25", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/541bb35d87856ebb8bf768da3ded9410bdcb8310/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/541bb35d87856ebb8bf768da3ded9410bdcb8310/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=541bb35d87856ebb8bf768da3ded9410bdcb8310", "patch": "@@ -603,13 +603,18 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n       /* If we have a constant that we are not defining, get the expression it\n \t was defined to represent.  This is necessary to avoid generating dumb\n \t elaboration code in simple cases, but we may throw it away later if it\n-\t is not a constant.  But do not retrieve it if it is an allocator since\n+\t is not a constant.  But do not do it for dispatch tables because they\n+\t are only referenced indirectly and we need to have a consistent view\n+\t of the exported and of the imported declarations of the tables from\n+\t external units for them to be properly merged in LTO mode.  Moreover\n+\t simply do not retrieve the expression it if it is an allocator since\n \t the designated type might still be dummy at this point.  Note that we\n \t invoke gnat_to_gnu_external and not gnat_to_gnu because the expression\n \t may contain N_Expression_With_Actions nodes and thus declarations of\n \t objects from other units that we need to discard.  */\n       if (!definition\n \t  && !No_Initialization (Declaration_Node (gnat_entity))\n+\t  && !Is_Dispatch_Table_Entity (gnat_entity)\n \t  && Present (gnat_temp = Expression (Declaration_Node (gnat_entity)))\n \t  && Nkind (gnat_temp) != N_Allocator\n \t  && (!type_annotate_only || Compile_Time_Known_Value (gnat_temp)))\n@@ -3406,20 +3411,6 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \t      break;\n \t    }\n \n-\t  /* If this is a record subtype associated with a dispatch table,\n-\t     strip the suffix.  This is necessary to make sure 2 different\n-\t     subtypes associated with the imported and exported views of a\n-\t     dispatch table are properly merged in LTO mode.  */\n-\t  if (Is_Dispatch_Table_Entity (gnat_entity))\n-\t    {\n-\t      char *p;\n-\t      Get_Encoded_Name (gnat_entity);\n-\t      p = strchr (Name_Buffer, '_');\n-\t      gcc_assert (p);\n-\t      strcpy (p+2, \"dtS\");\n-\t      gnu_entity_name = get_identifier (Name_Buffer);\n-\t    }\n-\n \t  /* When the subtype has discriminants and these discriminants affect\n \t     the initial shape it has inherited, factor them in.  But for an\n \t     Unchecked_Union (it must be an Itype), just return the type.  */"}]}