{"sha": "e7e64a25d57233719536414e880aee28447267dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTdlNjRhMjVkNTcyMzM3MTk1MzY0MTRlODgwYWVlMjg0NDcyNjdkYw==", "commit": {"author": {"name": "Adrian Straetling", "email": "straetling@de.ibm.com", "date": "2005-06-09T11:17:23Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2005-06-09T11:17:23Z"}, "message": "target.h (insn_valid_within_doloop): Rename into \"invalid_within_doloop\".\n\n2005-06-09  Adrian Straetling  <straetling@de.ibm.com>\n\n\t* target.h (insn_valid_within_doloop): Rename into\n\t\"invalid_within_doloop\".  Change return type to \"const char *\".\n\tUpdate Comment.\n\t* targhooks.h (default_insn_valid_within_doloop): Rename into\n\t\"default_invalid_within_doloop\".\n\t* targhooks.c (default_insn_valid_within_doloop): Likewise.\n\tUpdate Comment.\n\t* target-def.h (TARGET_INSN_VALID_WITHIN_DOLOOP): Rename target hook\n\tinto \"TARGET_INVALID_WITHIN_DOLOOP\". Default it to\n\t\"default_invalid_within_doloop\".\n\t* hooks.c (hook_constcharptr_rtx_null): New function.\n\t(hook_bool_rtx_true): Remove.\n\t* hooks.h (hook_constcharptr_rtx_null): Declare.\n\t(hook_bool_rtx_true): Remove.\n\t* loop-doloop.c (doloop_valid_p): Temporarily store return value of\n\t\"invalid_within_doloop\" and print error message if non-null.\n\tUpdate Comment.\n\t* doc/tm.texi: Update documentation.\n\t* config/s390/s390.c: Adjust to new hook name and new default hook.\n\t* config/rs6000/rs6000.c: (rs6000_insn_valid_within_doloop): Rename\n\tinto \"rs6000_invalid_within_doloop\".\n\t(rs6000_invalid_within_doloop): Change return type to \"static const\n\tchar *\" and replace return values.  Update Comment.\n\nFrom-SVN: r100797", "tree": {"sha": "fae4f203782bfda9e5f07b9ca8e588b44eaa0dd2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fae4f203782bfda9e5f07b9ca8e588b44eaa0dd2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7e64a25d57233719536414e880aee28447267dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7e64a25d57233719536414e880aee28447267dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7e64a25d57233719536414e880aee28447267dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7e64a25d57233719536414e880aee28447267dc/comments", "author": null, "committer": null, "parents": [{"sha": "fd078f5215762192c5e69e0f37093cf911ecbc22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd078f5215762192c5e69e0f37093cf911ecbc22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd078f5215762192c5e69e0f37093cf911ecbc22"}], "stats": {"total": 124, "additions": 76, "deletions": 48}, "files": [{"sha": "845e42c361d33d2db2ee139de40f7a53844206b7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7e64a25d57233719536414e880aee28447267dc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7e64a25d57233719536414e880aee28447267dc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e7e64a25d57233719536414e880aee28447267dc", "patch": "@@ -1,3 +1,29 @@\n+2005-06-09  Adrian Straetling  <straetling@de.ibm.com>\n+\n+\t* target.h (insn_valid_within_doloop): Rename into\n+\t\"invalid_within_doloop\".  Change return type to \"const char *\".\n+\tUpdate Comment.\n+\t* targhooks.h (default_insn_valid_within_doloop): Rename into\n+\t\"default_invalid_within_doloop\". \n+\t* targhooks.c (default_insn_valid_within_doloop): Likewise.\n+\tUpdate Comment.\n+\t* target-def.h (TARGET_INSN_VALID_WITHIN_DOLOOP): Rename target hook\n+\tinto \"TARGET_INVALID_WITHIN_DOLOOP\". Default it to\n+\t\"default_invalid_within_doloop\".\n+\t* hooks.c (hook_constcharptr_rtx_null): New function.\n+\t(hook_bool_rtx_true): Remove.\n+\t* hooks.h (hook_constcharptr_rtx_null): Declare.\n+\t(hook_bool_rtx_true): Remove.\n+\t* loop-doloop.c (doloop_valid_p): Temporarily store return value of\n+\t\"invalid_within_doloop\" and print error message if non-null.\n+\tUpdate Comment.\n+\t* doc/tm.texi: Update documentation.\n+\t* config/s390/s390.c: Adjust to new hook name and new default hook.\n+\t* config/rs6000/rs6000.c: (rs6000_insn_valid_within_doloop): Rename\n+\tinto \"rs6000_invalid_within_doloop\".\n+\t(rs6000_invalid_within_doloop): Change return type to \"static const\n+\tchar *\" and replace return values.  Update Comment.\n+\n 2005-06-09  Bernd Schmidt  <bernd.schmidt@analog.com>\n \n \t* config/bfin/bfin.opt (mlong-calls): New."}, {"sha": "4a56a441e0f78d424019352e59652780d0bd81dc", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7e64a25d57233719536414e880aee28447267dc/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7e64a25d57233719536414e880aee28447267dc/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=e7e64a25d57233719536414e880aee28447267dc", "patch": "@@ -552,7 +552,7 @@ struct processor_costs power4_cost = {\n \n \f\n static bool rs6000_function_ok_for_sibcall (tree, tree);\n-static bool rs6000_insn_valid_within_doloop (rtx);\n+static bool rs6000_invalid_within_doloop (rtx);\n static rtx rs6000_generate_compare (enum rtx_code);\n static void rs6000_maybe_dead (rtx);\n static void rs6000_emit_stack_tie (void);\n@@ -907,7 +907,7 @@ static const char alt_reg_names[][8] =\n #define TARGET_FUNCTION_OK_FOR_SIBCALL rs6000_function_ok_for_sibcall\n \n #undef TARGET_INSN_VALID_WITHIN_DOLOOP\n-#define TARGET_INSN_VALID_WITHIN_DOLOOP rs6000_insn_valid_within_doloop\n+#define TARGET_INSN_VALID_WITHIN_DOLOOP rs6000_invalid_within_doloop\n \n #undef TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS rs6000_rtx_costs\n@@ -12529,21 +12529,22 @@ rs6000_function_ok_for_sibcall (tree decl, tree exp ATTRIBUTE_UNUSED)\n   return false;\n }\n \n-/* TRUE if INSN insn is valid within a low-overhead loop.\n+/* NULL if INSN insn is valid within a low-overhead loop.\n+   Otherwise return why doloop cannot be applied.\n    PowerPC uses the COUNT register for branch on table instructions.  */\n \n-static bool\n-rs6000_insn_valid_within_doloop (rtx insn)\n+static const char *\n+rs6000_invalid_within_doloop (rtx insn)\n {\n   if (CALL_P (insn))\n-    return false;\n+    return \"Function call in the loop.\";\n \n   if (JUMP_P (insn)\n       && (GET_CODE (PATTERN (insn)) == ADDR_DIFF_VEC\n \t  || GET_CODE (PATTERN (insn)) == ADDR_VEC))\n-    return false;\n+    return \"Computed branch in the loop.\";\n \n-  return true;\n+  return NULL;\n }\n \n static int"}, {"sha": "fa8a8830eb486aaa0a782995e65e31cd5c6fc6f3", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7e64a25d57233719536414e880aee28447267dc/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7e64a25d57233719536414e880aee28447267dc/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=e7e64a25d57233719536414e880aee28447267dc", "patch": "@@ -8284,8 +8284,8 @@ s390_reorg (void)\n #undef TARGET_CC_MODES_COMPATIBLE\n #define TARGET_CC_MODES_COMPATIBLE s390_cc_modes_compatible\n \n-#undef TARGET_INSN_VALID_WITHIN_DOLOOP\n-#define TARGET_INSN_VALID_WITHIN_DOLOOP hook_bool_rtx_true\n+#undef TARGET_INVALID_WITHIN_DOLOOP\n+#define TARGET_INVALID_WITHIN_DOLOOP hook_constcharptr_rtx_null\n \n #ifdef HAVE_AS_TLS\n #undef TARGET_ASM_OUTPUT_DWARF_DTPREL"}, {"sha": "b2310e0ffc3813b595ef8f1e81e46cc38ad2feb8", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7e64a25d57233719536414e880aee28447267dc/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7e64a25d57233719536414e880aee28447267dc/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=e7e64a25d57233719536414e880aee28447267dc", "patch": "@@ -9377,13 +9377,14 @@ simplified expression for the call's result.  If @var{ignore} is true\n the value will be ignored.\n @end deftypefn\n \n-@deftypefn {Target Hook} bool TARGET_INSN_VALID_WITHIN_DOLOOP (rtx @var{insn})\n+@deftypefn {Target Hook} const char * TARGET_INVALID_WITHIN_DOLOOP (rtx @var{insn})\n \n-Take an instruction in @var{insn} and return true if it is valid within a\n-low-overhead loop.\n+Take an instruction in @var{insn} and return NULL if it is valid within a\n+low-overhead loop, otherwise return a string why doloop could not be applied.\n \n-Many targets use special registers for low-overhead looping. This function\n-should return false for any instruction that clobbers these. \n+Many targets use special registers for low-overhead looping. For any\n+instruction that clobbers these this function should return a string indicating\n+the reason why the doloop could not be applied. \n By default, the RTL loop optimizer does not use a present doloop pattern for\n loops containing function calls or branch on table instructions.  \n @end deftypefn"}, {"sha": "23038ff361298255d9a730a7b42c381e63d2a533", "filename": "gcc/hooks.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7e64a25d57233719536414e880aee28447267dc/gcc%2Fhooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7e64a25d57233719536414e880aee28447267dc/gcc%2Fhooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.c?ref=e7e64a25d57233719536414e880aee28447267dc", "patch": "@@ -191,12 +191,6 @@ hook_bool_rtx_false (rtx a ATTRIBUTE_UNUSED)\n   return false;\n }\n \n-bool\n-hook_bool_rtx_true (rtx a ATTRIBUTE_UNUSED)\n-{\n-  return true;\n-}\n-\n bool\n hook_bool_uintp_uintp_false (unsigned int *a ATTRIBUTE_UNUSED,\n \t\t\t     unsigned int *b ATTRIBUTE_UNUSED)\n@@ -255,3 +249,10 @@ hook_tree_tree_tree_bool_null (tree t0 ATTRIBUTE_UNUSED, tree t1 ATTRIBUTE_UNUSE\n {\n   return NULL;\n }\n+\n+/* Generic hook that takes a rtx and returns a NULL string.  */\n+const char *\n+hook_constcharptr_rtx_null (rtx r ATTRIBUTE_UNUSED)\n+{\n+  return NULL;\n+}"}, {"sha": "2d9b3a3bde749c514be29cb709908a53a2a05d2a", "filename": "gcc/hooks.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7e64a25d57233719536414e880aee28447267dc/gcc%2Fhooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7e64a25d57233719536414e880aee28447267dc/gcc%2Fhooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.h?ref=e7e64a25d57233719536414e880aee28447267dc", "patch": "@@ -35,7 +35,6 @@ extern bool hook_bool_tree_hwi_hwi_tree_false (tree, HOST_WIDE_INT, HOST_WIDE_IN\n extern bool hook_bool_tree_hwi_hwi_tree_true (tree, HOST_WIDE_INT, HOST_WIDE_INT,\n \t\t\t\t       tree);\n extern bool hook_bool_rtx_false (rtx);\n-extern bool hook_bool_rtx_true (rtx);\n extern bool hook_bool_uintp_uintp_false (unsigned int *, unsigned int *);\n extern bool hook_bool_rtx_int_int_intp_false (rtx, int, int, int *);\n extern bool hook_bool_constcharptr_size_t_false (const char *, size_t);\n@@ -66,4 +65,5 @@ extern rtx hook_rtx_tree_int_null (tree, int);\n extern tree hook_tree_tree_tree_tree_3rd_identity (tree, tree, tree);\n extern const char *hook_constcharptr_tree_null (tree);\n extern tree hook_tree_tree_tree_bool_null (tree, tree, bool);\n+extern const char *hook_constcharptr_rtx_null (rtx);\n #endif"}, {"sha": "c40777b82c419c02d72773c36501664f2fe42744", "filename": "gcc/loop-doloop.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7e64a25d57233719536414e880aee28447267dc/gcc%2Floop-doloop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7e64a25d57233719536414e880aee28447267dc/gcc%2Floop-doloop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-doloop.c?ref=e7e64a25d57233719536414e880aee28447267dc", "patch": "@@ -203,12 +203,16 @@ doloop_valid_p (struct loop *loop, struct niter_desc *desc)\n \t{\n \t  /* Different targets have different necessities for low-overhead\n \t     looping.  Call the back end for each instruction within the loop\n-\t     to let it decide whether the insn is valid.  */\n-\t  if (!targetm.insn_valid_within_doloop (insn))\n-\t  {\n+\t     to let it decide whether the insn prohibits a low-overhead loop.\n+\t     It will then return the cause for it to emit to the dump file.  */\n+\t  const char * invalid = targetm.invalid_within_doloop (insn);\n+\t  if (invalid)\n+\t    {\n+\t      if (dump_file)\n+\t\tfprintf (dump_file, \"Doloop: %s\\n\", invalid);\n \t      result = false;\n \t      goto cleanup;\n-\t  }\n+\t    }\n \t}\n     }\n   result = true;"}, {"sha": "fb04095b77d360d340b3fa52fa3384d80385cdeb", "filename": "gcc/target-def.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7e64a25d57233719536414e880aee28447267dc/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7e64a25d57233719536414e880aee28447267dc/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=e7e64a25d57233719536414e880aee28447267dc", "patch": "@@ -137,8 +137,8 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n #define TARGET_HAVE_NAMED_SECTIONS false\n #endif\n \n-#ifndef TARGET_INSN_VALID_WITHIN_DOLOOP\n-#define TARGET_INSN_VALID_WITHIN_DOLOOP default_insn_valid_within_doloop\n+#ifndef TARGET_INVALID_WITHIN_DOLOOP\n+#define TARGET_INVALID_WITHIN_DOLOOP default_invalid_within_doloop\n #endif\n \n #ifndef TARGET_HAVE_TLS\n@@ -564,7 +564,7 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n   TARGET_DWARF_CALLING_CONVENTION,              \\\n   TARGET_DWARF_HANDLE_FRAME_UNSPEC,\t\t\\\n   TARGET_STDARG_OPTIMIZE_HOOK,\t\t\t\\\n-  TARGET_INSN_VALID_WITHIN_DOLOOP,\t\t\\\n+  TARGET_INVALID_WITHIN_DOLOOP,\t\t\t\\\n   TARGET_CALLS,\t\t\t\t\t\\\n   TARGET_CXX,\t\t\t\t\t\\\n   TARGET_HAVE_NAMED_SECTIONS,\t\t\t\\"}, {"sha": "d6b9f5e3ef29df6605ea48a6b578fd5dd94ec893", "filename": "gcc/target.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7e64a25d57233719536414e880aee28447267dc/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7e64a25d57233719536414e880aee28447267dc/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=e7e64a25d57233719536414e880aee28447267dc", "patch": "@@ -528,8 +528,9 @@ struct gcc_target\n      to be checked for va_list references.  */\n   bool (*stdarg_optimize_hook) (struct stdarg_info *ai, tree lhs, tree rhs);\n \n-  /* Returns true if target supports the insn within a doloop block.  */\n-  bool (*insn_valid_within_doloop) (rtx);\n+  /* Returns NULL if target supports the insn within a doloop block,\n+     otherwise it returns an error message.  */\n+  const char * (*invalid_within_doloop) (rtx);\n     \n   /* Functions relating to calls - argument passing, returns, etc.  */\n   struct calls {"}, {"sha": "1de5809db1351037b73d07b583b0e0158805585f", "filename": "gcc/targhooks.c", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7e64a25d57233719536414e880aee28447267dc/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7e64a25d57233719536414e880aee28447267dc/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=e7e64a25d57233719536414e880aee28447267dc", "patch": "@@ -262,34 +262,28 @@ default_scalar_mode_supported_p (enum machine_mode mode)\n     }\n }\n \n-/* TRUE if INSN insn is valid within a low-overhead loop.\n+/* NULL if INSN insn is valid within a low-overhead loop, otherwise returns\n+   an error message.\n   \n    This function checks whether a given INSN is valid within a low-overhead\n-   loop.  A called function may clobber any special registers required for\n-   low-overhead looping. Additionally, some targets (eg, PPC) use the count\n+   loop.  If INSN is invalid it returns the reason for that, otherwise it\n+   returns NULL. A called function may clobber any special registers required\n+   for low-overhead looping. Additionally, some targets (eg, PPC) use the count\n    register for branch on table instructions. We reject the doloop pattern in\n    these cases.  */\n \n-bool \n-default_insn_valid_within_doloop (rtx insn)\n+const char *\n+default_invalid_within_doloop (rtx insn)\n {\n   if (CALL_P (insn))\n-    {\n-      if (dump_file)\n-\tfprintf (dump_file, \"Doloop: Function call in loop.\\n\");\n-\treturn false;\n-    }\n+    return \"Function call in loop.\";\n   \n   if (JUMP_P (insn)\n       && (GET_CODE (PATTERN (insn)) == ADDR_DIFF_VEC\n \t  || GET_CODE (PATTERN (insn)) == ADDR_VEC))\n-    {\n-      if (dump_file)\n-\tfprintf (dump_file, \"Doloop: Computed branch in the loop.\\n\");\n-      return false;\n-    }\n+    return \"Computed branch in the loop.\";\n   \n-  return true;\n+  return NULL;\n }\n \n bool"}, {"sha": "8de68a29537882ee44ca22c2ed7edc2287302c10", "filename": "gcc/targhooks.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7e64a25d57233719536414e880aee28447267dc/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7e64a25d57233719536414e880aee28447267dc/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=e7e64a25d57233719536414e880aee28447267dc", "patch": "@@ -46,7 +46,7 @@ extern void default_unwind_emit (FILE *, rtx);\n \n extern bool default_scalar_mode_supported_p (enum machine_mode);\n \n-extern bool default_insn_valid_within_doloop (rtx);\n+extern const char * default_invalid_within_doloop (rtx);\n \n /* These are here, and not in hooks.[ch], because not all users of\n    hooks.h include tm.h, and thus we don't have CUMULATIVE_ARGS.  */"}]}