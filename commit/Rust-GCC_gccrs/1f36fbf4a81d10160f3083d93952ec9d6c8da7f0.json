{"sha": "1f36fbf4a81d10160f3083d93952ec9d6c8da7f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWYzNmZiZjRhODFkMTAxNjBmMzA4M2Q5Mzk1MmVjOWQ2YzhkYTdmMA==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2015-01-21T06:17:50Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2015-01-21T06:17:50Z"}, "message": "re PR target/59946 (-mpcrel -O2 produces illegal asm code)\n\n2015-01-20  Jeff Law  <law@redhat.com>\n\n\tPR target/59946\n\t* config/m68k/m68k.md (Comparison expanders and patterns): Do not\n\tallow pc-relative addresses in operand predicates or constraints.\n\n\tPR target/59946\n\t* gcc.target/m68k/pr59946.c: New test.\n\nFrom-SVN: r219927", "tree": {"sha": "78acb3929b463455fa078ab992408f491ecadf21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/78acb3929b463455fa078ab992408f491ecadf21"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f36fbf4a81d10160f3083d93952ec9d6c8da7f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f36fbf4a81d10160f3083d93952ec9d6c8da7f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f36fbf4a81d10160f3083d93952ec9d6c8da7f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f36fbf4a81d10160f3083d93952ec9d6c8da7f0/comments", "author": null, "committer": null, "parents": [{"sha": "18092bec58ca45442b7e0893609688056ffc9f09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18092bec58ca45442b7e0893609688056ffc9f09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18092bec58ca45442b7e0893609688056ffc9f09"}], "stats": {"total": 59, "additions": 50, "deletions": 9}, "files": [{"sha": "9e4ad22d7ff0e06a1d60f2de6926be385178c7a4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f36fbf4a81d10160f3083d93952ec9d6c8da7f0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f36fbf4a81d10160f3083d93952ec9d6c8da7f0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1f36fbf4a81d10160f3083d93952ec9d6c8da7f0", "patch": "@@ -1,3 +1,9 @@\n+2015-01-20  Jeff Law  <law@redhat.com>\n+\n+\tPR target/59946\n+\t* config/m68k/m68k.md (Comparison expanders and patterns): Do not\n+\tallow pc-relative addresses in operand predicates or constraints.\n+\n 2015-01-21  Bin Cheng  <bin.cheng@arm.com>\n \n \t* config/arm/arm.c (arm_cortex_a53_tune, arm_cortex_a57_tune): Prefer"}, {"sha": "d34ad1dce88b322feeb4e14e8c1831c37eed6669", "filename": "gcc/config/m68k/m68k.md", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f36fbf4a81d10160f3083d93952ec9d6c8da7f0/gcc%2Fconfig%2Fm68k%2Fm68k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f36fbf4a81d10160f3083d93952ec9d6c8da7f0/gcc%2Fconfig%2Fm68k%2Fm68k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.md?ref=1f36fbf4a81d10160f3083d93952ec9d6c8da7f0", "patch": "@@ -489,10 +489,19 @@\n \n \n ;; A composite of the cmp, cmpa, cmpi & cmpm m68000 op codes.\n+;;\n+;; In theory we ought to be able to use some 'S' constraints and\n+;; operand predicates that allow PC-rel addressing modes in the\n+;; comparison patterns and expanders below.   But we would have to be\n+;; cognizant of the fact that PC-rel addresses are not allowed for\n+;; both operands and determining whether or not we emit the operands in\n+;; order or reversed is not trivial to do just based on the constraints\n+;; and operand predicates.  So to be safe, just don't allow the PC-rel\n+;; versions in the various comparison expanders, patterns, for comparisons.\n (define_insn \"\"\n   [(set (cc0)\n-        (compare (match_operand:SI 0 \"nonimmediate_operand\" \"rKT,rKs,mSr,mSa,>\")\n-                 (match_operand:SI 1 \"general_src_operand\" \"mSr,mSa,KTr,Ksr,>\")))]\n+        (compare (match_operand:SI 0 \"nonimmediate_operand\" \"rKT,rKs,mr,ma,>\")\n+                 (match_operand:SI 1 \"general_operand\" \"mr,ma,KTr,Ksr,>\")))]\n   \"!TARGET_COLDFIRE\"\n {\n   if (GET_CODE (operands[0]) == MEM && GET_CODE (operands[1]) == MEM)\n@@ -529,7 +538,7 @@\n \n (define_expand \"cbranchhi4\"\n   [(set (cc0)\n-\t(compare (match_operand:HI 1 \"nonimmediate_src_operand\" \"\")\n+\t(compare (match_operand:HI 1 \"nonimmediate_operand\" \"\")\n \t\t (match_operand:HI 2 \"m68k_subword_comparison_operand\" \"\")))\n    (set (pc)\n \t(if_then_else (match_operator 0 \"ordered_comparison_operator\"\n@@ -551,8 +560,8 @@\n \n (define_insn \"\"\n   [(set (cc0)\n-        (compare (match_operand:HI 0 \"nonimmediate_src_operand\" \"rnmS,d,n,mS,>\")\n-                 (match_operand:HI 1 \"general_src_operand\" \"d,rnmS,mS,n,>\")))]\n+        (compare (match_operand:HI 0 \"nonimmediate_operand\" \"rnm,d,n,m,>\")\n+                 (match_operand:HI 1 \"general_operand\" \"d,rnm,m,n,>\")))]\n   \"!TARGET_COLDFIRE\"\n {\n   if (GET_CODE (operands[0]) == MEM && GET_CODE (operands[1]) == MEM)\n@@ -568,7 +577,7 @@\n \n (define_expand \"cbranchqi4\"\n   [(set (cc0)\n-\t(compare (match_operand:QI 1 \"nonimmediate_src_operand\" \"\")\n+\t(compare (match_operand:QI 1 \"nonimmediate_operand\" \"\")\n \t\t (match_operand:QI 2 \"m68k_subword_comparison_operand\" \"\")))\n    (set (pc)\n \t(if_then_else (match_operator 0 \"ordered_comparison_operator\"\n@@ -580,7 +589,7 @@\n \n (define_expand \"cstoreqi4\"\n   [(set (cc0)\n-\t(compare (match_operand:QI 2 \"nonimmediate_src_operand\" \"\")\n+\t(compare (match_operand:QI 2 \"nonimmediate_operand\" \"\")\n \t\t (match_operand:QI 3 \"m68k_subword_comparison_operand\" \"\")))\n    (set (match_operand:QI 0 \"register_operand\")\n \t(match_operator:QI 1 \"ordered_comparison_operator\"\n@@ -590,8 +599,8 @@\n \n (define_insn \"\"\n   [(set (cc0)\n-        (compare (match_operand:QI 0 \"nonimmediate_src_operand\" \"dn,dmS,>\")\n-                 (match_operand:QI 1 \"general_src_operand\" \"dmS,nd,>\")))]\n+        (compare (match_operand:QI 0 \"nonimmediate_operand\" \"dn,dm,>\")\n+                 (match_operand:QI 1 \"general_operand\" \"dm,nd,>\")))]\n   \"!TARGET_COLDFIRE\"\n {\n   if (GET_CODE (operands[0]) == MEM && GET_CODE (operands[1]) == MEM)"}, {"sha": "006f67c406fa6095284f30ea9e51f7de1542fedf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f36fbf4a81d10160f3083d93952ec9d6c8da7f0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f36fbf4a81d10160f3083d93952ec9d6c8da7f0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1f36fbf4a81d10160f3083d93952ec9d6c8da7f0", "patch": "@@ -1,3 +1,8 @@\n+2015-01-20  Jeff Law  <law@redhat.com>\n+\n+\tPR target/59946\n+\t* gcc.target/m68k/pr59946.c: New test.\n+\n 2015-01-20  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* gcc.target/aarch64/advsimd-intrinsics/vmlXl_n.inc: New file."}, {"sha": "c58083cec5a39074f89ba1a1364ab6ea41dbf1eb", "filename": "gcc/testsuite/gcc.target/m68k/pr59946.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f36fbf4a81d10160f3083d93952ec9d6c8da7f0/gcc%2Ftestsuite%2Fgcc.target%2Fm68k%2Fpr59946.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f36fbf4a81d10160f3083d93952ec9d6c8da7f0/gcc%2Ftestsuite%2Fgcc.target%2Fm68k%2Fpr59946.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fm68k%2Fpr59946.c?ref=1f36fbf4a81d10160f3083d93952ec9d6c8da7f0", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mpcrel -m68000\" } */\n+\n+\n+int copyNextDtaToAtari(void);\n+char fsnextIsForUs;\n+\n+int custom_fsnext( void *sp )\n+{\n+        int res;\n+\n+        if(!fsnextIsForUs) {\n+            return 0;\n+        }\n+\n+        res = copyNextDtaToAtari();\n+        return res;\n+}\n+\n+\n+"}]}