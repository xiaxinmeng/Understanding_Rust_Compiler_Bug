{"sha": "605354f380e1d354f84188aef28a68d9b6634a01", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjA1MzU0ZjM4MGUxZDM1NGY4NDE4OGFlZjI4YTY4ZDliNjYzNGEwMQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2011-06-26T07:57:24Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2011-06-26T07:57:24Z"}, "message": "sparc.c (save_local_or_in_reg_p): Adjust comment.\n\n\t* config/sparc/sparc.c (save_local_or_in_reg_p): Adjust comment.\n\t(emit_save_register_window): Likewise.\n\t(sparc_expand_prologue): Use SIZE_INT_RTX and SIZE_RTX variables.\n\t(sparc_flat_expand_prologue): Add comment.  Always emit blockage.\n\tSwap back %o7/%i7 in register naming.\n\nFrom-SVN: r175407", "tree": {"sha": "6ce0bc8daf8b782bc62d7138da20d908e1a61355", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ce0bc8daf8b782bc62d7138da20d908e1a61355"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/605354f380e1d354f84188aef28a68d9b6634a01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/605354f380e1d354f84188aef28a68d9b6634a01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/605354f380e1d354f84188aef28a68d9b6634a01", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/605354f380e1d354f84188aef28a68d9b6634a01/comments", "author": null, "committer": null, "parents": [{"sha": "d94a4c3613d700c310518bac2d4c63c950811b11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d94a4c3613d700c310518bac2d4c63c950811b11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d94a4c3613d700c310518bac2d4c63c950811b11"}], "stats": {"total": 60, "additions": 38, "deletions": 22}, "files": [{"sha": "2737249a0e7d988e2e0d1ad6d09d7a6c7a7df30b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/605354f380e1d354f84188aef28a68d9b6634a01/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/605354f380e1d354f84188aef28a68d9b6634a01/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=605354f380e1d354f84188aef28a68d9b6634a01", "patch": "@@ -1,3 +1,11 @@\n+2011-06-26  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* config/sparc/sparc.c (save_local_or_in_reg_p): Adjust comment.\n+\t(emit_save_register_window): Likewise.\n+\t(sparc_expand_prologue): Use SIZE_INT_RTX and SIZE_RTX variables.\n+\t(sparc_flat_expand_prologue): Add comment.  Always emit blockage.\n+\tSwap back %o7/%i7 in register naming.\n+\n 2011-06-25  Iain Sandoe  <iains@gcc.gnu.org>\n \n \tPR driver/49371\n@@ -7,7 +15,7 @@\n \t* config/darwin.h (PIE_SPEC): New, (LINK_SPEC): Use PIE_SPEC.\n \t* config/darwin9.h (PIE_SPEC): New.\n \n-2011-06-25 \u00a0Basile Starynkevitch \u00a0<basile@starynkevitch.net>\n+2011-06-25  Basile Starynkevitch  <basile@starynkevitch.net>\n \n \t* timevar.c (timevar_print): Increase width for display of timevar\n \tname."}, {"sha": "c5f159a05ac089336edebfb097fe4ac2293cc3ba", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 29, "deletions": 21, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/605354f380e1d354f84188aef28a68d9b6634a01/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/605354f380e1d354f84188aef28a68d9b6634a01/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=605354f380e1d354f84188aef28a68d9b6634a01", "patch": "@@ -4149,7 +4149,7 @@ save_local_or_in_reg_p (unsigned int regno, int leaf_function)\n   if (regno == RETURN_ADDR_REGNUM && return_addr_reg_needed_p (leaf_function))\n     return true;\n \n-  /* PIC register (%l7) if needed.  */\n+  /* GOT register (%l7) if needed.  */\n   if (regno == PIC_OFFSET_TABLE_REGNUM && crtl->uses_pic_offset_table)\n     return true;\n \n@@ -4600,11 +4600,12 @@ emit_save_register_window (rtx increment)\n   insn = emit_insn (gen_save_register_window_1 (increment));\n   RTX_FRAME_RELATED_P (insn) = 1;\n \n-  /* The return address (%i7) is saved in %o7.  */\n+  /* The incoming return address (%o7) is saved in %i7.  */\n   add_reg_note (insn, REG_CFA_REGISTER,\n \t\tgen_rtx_SET (VOIDmode,\n \t\t\t     gen_rtx_REG (Pmode, RETURN_ADDR_REGNUM),\n-\t\t\t     gen_rtx_REG (Pmode, INCOMING_RETURN_ADDR_REGNUM)));\n+\t\t\t     gen_rtx_REG (Pmode,\n+\t\t\t\t\t  INCOMING_RETURN_ADDR_REGNUM)));\n \n   /* The window save event.  */\n   add_reg_note (insn, REG_CFA_WINDOW_SAVE, const0_rtx);\n@@ -4688,8 +4689,10 @@ sparc_expand_prologue (void)\n     ; /* do nothing.  */\n   else if (sparc_leaf_function_p)\n     {\n+      rtx size_int_rtx = GEN_INT (-size);\n+\n       if (size <= 4096)\n-\tinsn = emit_insn (gen_stack_pointer_inc (GEN_INT (-size)));\n+\tinsn = emit_insn (gen_stack_pointer_inc (size_int_rtx));\n       else if (size <= 8192)\n \t{\n \t  insn = emit_insn (gen_stack_pointer_inc (GEN_INT (-4096)));\n@@ -4699,19 +4702,21 @@ sparc_expand_prologue (void)\n \t}\n       else\n \t{\n-\t  rtx reg = gen_rtx_REG (Pmode, 1);\n-\t  emit_move_insn (reg, GEN_INT (-size));\n-\t  insn = emit_insn (gen_stack_pointer_inc (reg));\n+\t  rtx size_rtx = gen_rtx_REG (Pmode, 1);\n+\t  emit_move_insn (size_rtx, size_int_rtx);\n+\t  insn = emit_insn (gen_stack_pointer_inc (size_rtx));\n \t  add_reg_note (insn, REG_FRAME_RELATED_EXPR,\n-\t\t\tgen_stack_pointer_inc (GEN_INT (-size)));\n+\t\t\tgen_stack_pointer_inc (size_int_rtx));\n \t}\n \n       RTX_FRAME_RELATED_P (insn) = 1;\n     }\n   else\n     {\n+      rtx size_int_rtx = GEN_INT (-size);\n+\n       if (size <= 4096)\n-\temit_save_register_window (GEN_INT (-size));\n+\temit_save_register_window (size_int_rtx);\n       else if (size <= 8192)\n \t{\n \t  emit_save_register_window (GEN_INT (-4096));\n@@ -4720,9 +4725,9 @@ sparc_expand_prologue (void)\n \t}\n       else\n \t{\n-\t  rtx reg = gen_rtx_REG (Pmode, 1);\n-\t  emit_move_insn (reg, GEN_INT (-size));\n-\t  emit_save_register_window (reg);\n+\t  rtx size_rtx = gen_rtx_REG (Pmode, 1);\n+\t  emit_move_insn (size_rtx, size_int_rtx);\n+\t  emit_save_register_window (size_rtx);\n \t}\n     }\n \n@@ -4783,6 +4788,10 @@ sparc_flat_expand_prologue (void)\n \n       size_rtx = size_int_rtx = GEN_INT (-size);\n \n+      /* We establish the frame (i.e. decrement the stack pointer) first, even\n+\t if we use a frame pointer, because we cannot clobber any call-saved\n+\t registers, including the frame pointer, if we haven't created a new\n+\t register save area, for the sake of compatibility with the ABI.  */\n       if (size <= 4096)\n \tinsn = emit_insn (gen_stack_pointer_inc (size_int_rtx));\n       else if (size <= 8192 && !frame_pointer_needed)\n@@ -4801,6 +4810,9 @@ sparc_flat_expand_prologue (void)\n \t}\n       RTX_FRAME_RELATED_P (insn) = 1;\n \n+      /* Ensure nothing is scheduled until after the frame is established.  */\n+      emit_insn (gen_blockage ());\n+\n       if (frame_pointer_needed)\n \t{\n \t  insn = emit_insn (gen_rtx_SET (VOIDmode, hard_frame_pointer_rtx,\n@@ -4813,26 +4825,22 @@ sparc_flat_expand_prologue (void)\n \t\t\tgen_rtx_SET (VOIDmode, hard_frame_pointer_rtx,\n \t\t\t\t     plus_constant (stack_pointer_rtx,\n \t\t\t\t\t\t    size)));\n-\n-\t  /* Make sure nothing is scheduled until after the frame\n-\t     is established.  */\n-\t  emit_insn (gen_blockage ());\n \t}\n \n       if (return_addr_reg_needed_p (sparc_leaf_function_p))\n \t{\n-\t  rtx i7 = gen_rtx_REG (Pmode, INCOMING_RETURN_ADDR_REGNUM);\n-\t  rtx o7 = gen_rtx_REG (Pmode, RETURN_ADDR_REGNUM);\n+\t  rtx o7 = gen_rtx_REG (Pmode, INCOMING_RETURN_ADDR_REGNUM);\n+\t  rtx i7 = gen_rtx_REG (Pmode, RETURN_ADDR_REGNUM);\n \n-\t  insn = emit_move_insn (o7, i7);\n+\t  insn = emit_move_insn (i7, o7);\n \t  RTX_FRAME_RELATED_P (insn) = 1;\n \n \t  add_reg_note (insn, REG_CFA_REGISTER,\n-\t\t\tgen_rtx_SET (VOIDmode, o7, i7));\n+\t\t\tgen_rtx_SET (VOIDmode, i7, o7));\n \n \t  /* Prevent this instruction from ever being considered dead,\n \t     even if this function has no epilogue.  */\n-\t  emit_insn (gen_rtx_USE (VOIDmode, o7));\n+\t  emit_insn (gen_rtx_USE (VOIDmode, i7));\n \t}\n     }\n "}]}