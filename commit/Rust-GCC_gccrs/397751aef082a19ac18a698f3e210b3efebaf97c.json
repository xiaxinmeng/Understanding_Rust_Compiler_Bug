{"sha": "397751aef082a19ac18a698f3e210b3efebaf97c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzk3NzUxYWVmMDgyYTE5YWMxOGE2OThmM2UyMTBiM2VmZWJhZjk3Yw==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@unitus.it", "date": "2003-05-01T16:45:50Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2003-05-01T16:45:50Z"}, "message": "streambuf.tcc (basic_streambuf::xsgetn): Const-ify some variables.\n\n2003-05-01  Paolo Carlini  <pcarlini@unitus.it>\n\n\t* include/bits/streambuf.tcc (basic_streambuf::xsgetn):\n\tConst-ify some variables.\n\t(basic_streambuf::xsputn): Likewise; change the type of some\n\tvariables to size_t.\n\t(__copy_streambufs): Change some variables to size_t.\n\n2003-05-01  Paolo Carlini  <pcarlini@unitus.it>\n\n\t* include/std/std_sstream.h (str()): Avoid constructing\n\ta basic_string temporary not only when it would turn out\n\tto be zero-sized but also when identical to the current\n\t_M_string buffer.\n\nFrom-SVN: r66334", "tree": {"sha": "3c3b6f2e8423ce1b289d77ffd81f4afe64cebcc4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c3b6f2e8423ce1b289d77ffd81f4afe64cebcc4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/397751aef082a19ac18a698f3e210b3efebaf97c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/397751aef082a19ac18a698f3e210b3efebaf97c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/397751aef082a19ac18a698f3e210b3efebaf97c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/397751aef082a19ac18a698f3e210b3efebaf97c/comments", "author": null, "committer": null, "parents": [{"sha": "d479d37f5ed3c67acedbf05dbf59ed9d6ac22567", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d479d37f5ed3c67acedbf05dbf59ed9d6ac22567", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d479d37f5ed3c67acedbf05dbf59ed9d6ac22567"}], "stats": {"total": 54, "additions": 33, "deletions": 21}, "files": [{"sha": "92b8a33c045b710aefcb9eb60880ecdff147966c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/397751aef082a19ac18a698f3e210b3efebaf97c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/397751aef082a19ac18a698f3e210b3efebaf97c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=397751aef082a19ac18a698f3e210b3efebaf97c", "patch": "@@ -1,3 +1,18 @@\n+2003-05-01  Paolo Carlini  <pcarlini@unitus.it>\n+\n+\t* include/bits/streambuf.tcc (basic_streambuf::xsgetn):\n+\tConst-ify some variables.\n+\t(basic_streambuf::xsputn): Likewise; change the type of some\n+\tvariables to size_t.\n+\t(__copy_streambufs): Change some variables to size_t.\n+\n+2003-05-01  Paolo Carlini  <pcarlini@unitus.it>\n+\n+\t* include/std/std_sstream.h (str()): Avoid constructing\n+\ta basic_string temporary not only when it would turn out\n+\tto be zero-sized but also when identical to the current\n+\t_M_string buffer.\n+\n 2003-05-01  Paolo Carlini  <pcarlini@unitus.it>\n \n \t* include/ext/stdio_filebuf.h"}, {"sha": "e4aab0ccc3141846ea10576a7fc4806ad544c7ba", "filename": "libstdc++-v3/include/bits/streambuf.tcc", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/397751aef082a19ac18a698f3e210b3efebaf97c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/397751aef082a19ac18a698f3e210b3efebaf97c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf.tcc?ref=397751aef082a19ac18a698f3e210b3efebaf97c", "patch": "@@ -114,11 +114,11 @@ namespace std\n       streamsize __ret = 0;\n       while (__ret < __n)\n \t{\n-\t  size_t __buf_len = _M_in_end - _M_in_cur;\n+\t  const size_t __buf_len = _M_in_end - _M_in_cur;\n \t  if (__buf_len > 0)\n \t    {\n-\t      size_t __remaining = __n - __ret;\n-\t      size_t __len = std::min(__buf_len, __remaining);\n+\t      const size_t __remaining = __n - __ret;\n+\t      const size_t __len = std::min(__buf_len, __remaining);\n \t      traits_type::copy(__s, _M_in_cur, __len);\n \t      __ret += __len;\n \t      __s += __len;\n@@ -127,7 +127,7 @@ namespace std\n \t  \n \t  if (__ret < __n)\n \t    {\n-\t      int_type __c = this->uflow();  \n+\t      const int_type __c = this->uflow();  \n \t      if (!traits_type::eq_int_type(__c, traits_type::eof()))\n \t\t{\n \t\t  traits_type::assign(*__s++, traits_type::to_char_type(__c));\n@@ -148,11 +148,11 @@ namespace std\n       streamsize __ret = 0;\n       while (__ret < __n)\n \t{\n-\t  off_type __buf_len = _M_out_end - _M_out_cur;\n+\t  const size_t __buf_len = _M_out_end - _M_out_cur;\n \t  if (__buf_len > 0)\n \t    {\n-\t      off_type __remaining = __n - __ret;\n-\t      off_type __len = std::min(__buf_len, __remaining);\n+\t      const size_t __remaining = __n - __ret;\n+\t      const size_t __len = std::min(__buf_len, __remaining);\n \t      traits_type::copy(_M_out_cur, __s, __len);\n \t      __ret += __len;\n \t      __s += __len;\n@@ -161,7 +161,7 @@ namespace std\n \n \t  if (__ret < __n)\n \t    {\n-\t      int_type __c = this->overflow(traits_type::to_int_type(*__s));\n+\t      const int_type __c = this->overflow(traits_type::to_int_type(*__s));\n \t      if (!traits_type::eq_int_type(__c, traits_type::eof()))\n \t\t{\n \t\t  ++__ret;\n@@ -185,16 +185,15 @@ namespace std\n \t\t      basic_streambuf<_CharT, _Traits>* __sbout) \n   {\n       typedef typename _Traits::int_type\tint_type;\n-      typedef typename _Traits::off_type\toff_type;\n \n       streamsize __ret = 0;\n       try \n \t{\n \t  for (;;)\n   \t    {\n \t      streamsize __xtrct;\n-\t      const off_type __avail = __sbin->_M_in_end\n-\t\t                       - __sbin->_M_in_cur;\n+\t      const size_t __avail = __sbin->_M_in_end\n+\t\t                     - __sbin->_M_in_cur;\n  \t      if (__avail)\n \t\t{\n \t\t  __xtrct = __sbout->sputn(__sbin->_M_in_cur, __avail);\n@@ -206,8 +205,8 @@ namespace std\n  \t      else \n \t\t{\n \t\t  streamsize __charsread;\n-\t\t  const off_type __size = __sbout->_M_out_end\n-\t\t                          - __sbout->_M_out_cur;\n+\t\t  const size_t __size = __sbout->_M_out_end\n+\t\t                        - __sbout->_M_out_cur;\n \t\t  if (__size)\n \t\t    {\n \t\t      _CharT* __buf ="}, {"sha": "dcfdea641682433789dd0d267f471de259a9b0d1", "filename": "libstdc++-v3/include/std/std_sstream.h", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/397751aef082a19ac18a698f3e210b3efebaf97c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_sstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/397751aef082a19ac18a698f3e210b3efebaf97c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_sstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_sstream.h?ref=397751aef082a19ac18a698f3e210b3efebaf97c", "patch": "@@ -140,14 +140,12 @@ namespace std\n \t    // represents the size of the initial string used to\n \t    // created the buffer, and may not be the correct size of\n \t    // the current stringbuf internal buffer.\n-\t    __size_type __len = _M_string.size();\n-\t    __size_type __nlen = this->_M_out_lim - this->_M_out_beg;\n-\t    if (__nlen)\n-\t      {\n-\t\t__len = std::max(__nlen, __len);\n-\t\t__ret = __string_type(this->_M_out_beg, \n-\t\t\t\t      this->_M_out_beg + __len);\n-\t      }\n+\t    const __size_type __len = _M_string.size();\n+\t    const __size_type __nlen = this->_M_out_lim\n+\t                               - this->_M_out_beg;\n+\t    if (__nlen > __len)\n+\t      __ret = __string_type(this->_M_out_beg, \n+\t\t\t\t    this->_M_out_beg + __nlen);\n \t  }\n \treturn __ret;\n       }"}]}