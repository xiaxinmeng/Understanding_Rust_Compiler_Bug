{"sha": "64735dc923e0a1a2e04c5313471d91ca8b954e9a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQ3MzVkYzkyM2UwYTFhMmUwNGM1MzEzNDcxZDkxY2E4Yjk1NGU5YQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2021-06-07T20:58:15Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2021-06-07T21:00:14Z"}, "message": "i386: Add init pattern for V4QI vectors [PR100637]\n\n2021-06-07  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/\n\tPR target/100637\n\t* config/i386/i386-expand.c (ix86_expand_vector_init_duplicate):\n\tHandle V4QI mode.\n\t(ix86_expand_vector_init_one_nonzero): Ditto.\n\t(ix86_expand_vector_init_one_var): Ditto.\n\t(ix86_expand_vector_init_general): Ditto.\n\t* config/i386/mmx.md (vec_initv4qiqi): New expander.\n\ngcc/testsuite/\n\n\tPR target/100637\n\t* gcc.target/i386/pr100637-5b.c: New test.\n\t* gcc.target/i386/pr100637-5w.c: Ditto.", "tree": {"sha": "d851ecbb259b1223d2c05bea284657db6c5f1e2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d851ecbb259b1223d2c05bea284657db6c5f1e2f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/64735dc923e0a1a2e04c5313471d91ca8b954e9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64735dc923e0a1a2e04c5313471d91ca8b954e9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64735dc923e0a1a2e04c5313471d91ca8b954e9a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64735dc923e0a1a2e04c5313471d91ca8b954e9a/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e89759fdfc80db223bd852aba937acb2d7c2cd80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e89759fdfc80db223bd852aba937acb2d7c2cd80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e89759fdfc80db223bd852aba937acb2d7c2cd80"}], "stats": {"total": 71, "additions": 70, "deletions": 1}, "files": [{"sha": "c3ce21b43878b7477cc44ec9d810e2f1c84ff122", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64735dc923e0a1a2e04c5313471d91ca8b954e9a/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64735dc923e0a1a2e04c5313471d91ca8b954e9a/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=64735dc923e0a1a2e04c5313471d91ca8b954e9a", "patch": "@@ -13733,6 +13733,7 @@ ix86_expand_vector_init_duplicate (bool mmx_ok, machine_mode mode,\n       return false;\n \n     case E_V8QImode:\n+    case E_V4QImode:\n       if (!mmx_ok)\n \treturn false;\n       goto widen;\n@@ -13878,6 +13879,9 @@ ix86_expand_vector_init_one_nonzero (bool mmx_ok, machine_mode mode,\n     case E_V4HImode:\n       use_vector_set = TARGET_SSE || TARGET_3DNOW_A;\n       break;\n+    case E_V4QImode:\n+      use_vector_set = TARGET_SSE4_1;\n+      break;\n     case E_V32QImode:\n     case E_V16HImode:\n       use_vector_set = TARGET_AVX;\n@@ -14086,6 +14090,10 @@ ix86_expand_vector_init_one_var (bool mmx_ok, machine_mode mode,\n \tbreak;\n       wmode = V4HImode;\n       goto widen;\n+    case E_V4QImode:\n+      if (TARGET_SSE4_1)\n+\tbreak;\n+      wmode = V2HImode;\n     widen:\n       /* There's no way to set one QImode entry easily.  Combine\n \t the variable value with its adjacent constant value, and\n@@ -14535,6 +14543,7 @@ ix86_expand_vector_init_general (bool mmx_ok, machine_mode mode,\n     case E_V8QImode:\n \n     case E_V2HImode:\n+    case E_V4QImode:\n       break;\n \n     default:"}, {"sha": "0a17a54fad5ea3f4bfe753ad56b99244b53d8ac3", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64735dc923e0a1a2e04c5313471d91ca8b954e9a/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64735dc923e0a1a2e04c5313471d91ca8b954e9a/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=64735dc923e0a1a2e04c5313471d91ca8b954e9a", "patch": "@@ -3369,7 +3369,17 @@\n    (match_operand 1)]\n   \"TARGET_SSE2\"\n {\n-  ix86_expand_vector_init (false, operands[0],\n+  ix86_expand_vector_init (TARGET_MMX_WITH_SSE, operands[0],\n+\t\t\t   operands[1]);\n+  DONE;\n+})\n+\n+(define_expand \"vec_initv4qiqi\"\n+  [(match_operand:V2HI 0 \"register_operand\")\n+   (match_operand 1)]\n+  \"TARGET_SSE2\"\n+{\n+  ix86_expand_vector_init (TARGET_MMX_WITH_SSE, operands[0],\n \t\t\t   operands[1]);\n   DONE;\n })"}, {"sha": "3e6cc8ff975fffdd4a126115ed799014208f6065", "filename": "gcc/testsuite/gcc.target/i386/pr100637-5b.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64735dc923e0a1a2e04c5313471d91ca8b954e9a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100637-5b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64735dc923e0a1a2e04c5313471d91ca8b954e9a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100637-5b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100637-5b.c?ref=64735dc923e0a1a2e04c5313471d91ca8b954e9a", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse2\" } */\n+\n+typedef char S;\n+typedef S V __attribute__((vector_size(4 * sizeof(S))));\n+\n+V duplicate (S a)\n+{\n+  return (V) { a, a, a, a };\n+}\n+\n+V one_nonzero (S a)\n+{\n+  return (V) { 0, a };\n+}\n+\n+V one_var (S a)\n+{\n+  return (V) { 1, a };\n+}\n+\n+V general (S a, S b, S c, S d)\n+{\n+  return (V) { a, b, c, d };\n+}"}, {"sha": "3f677385c1699ca7a41a4371bac451f85b1408e3", "filename": "gcc/testsuite/gcc.target/i386/pr100637-5w.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64735dc923e0a1a2e04c5313471d91ca8b954e9a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100637-5w.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64735dc923e0a1a2e04c5313471d91ca8b954e9a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100637-5w.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100637-5w.c?ref=64735dc923e0a1a2e04c5313471d91ca8b954e9a", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse2\" } */\n+\n+typedef short S;\n+typedef S V __attribute__((vector_size(2 * sizeof(S))));\n+\n+V duplicate (S a)\n+{\n+  return (V) { a, a };\n+}\n+\n+V one_nonzero (S a)\n+{\n+  return (V) { 0, a };\n+}\n+\n+V one_var (S a)\n+{\n+  return (V) { 1, a };\n+}\n+\n+V general (S a, S b)\n+{\n+  return (V) { a, b };\n+}"}]}