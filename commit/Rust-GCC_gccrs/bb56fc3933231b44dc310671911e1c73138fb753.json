{"sha": "bb56fc3933231b44dc310671911e1c73138fb753", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmI1NmZjMzkzMzIzMWI0NGRjMzEwNjcxOTExZTFjNzMxMzhmYjc1Mw==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2005-02-23T09:09:17Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2005-02-23T09:09:17Z"}, "message": "genpreds.c (mark_mode_tests): Handle non-VOIDmode match_operands.\n\n2005-02-23  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* genpreds.c (mark_mode_tests): Handle non-VOIDmode match_operands.\n\t(write_predicate_expr): Likewise.\n\nFrom-SVN: r95447", "tree": {"sha": "249a35b893096b2eca9d69131904d3e421ac92a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/249a35b893096b2eca9d69131904d3e421ac92a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb56fc3933231b44dc310671911e1c73138fb753", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb56fc3933231b44dc310671911e1c73138fb753", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb56fc3933231b44dc310671911e1c73138fb753", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb56fc3933231b44dc310671911e1c73138fb753/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "40205a3638f2491a454823de6d69b453b8834233", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40205a3638f2491a454823de6d69b453b8834233", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40205a3638f2491a454823de6d69b453b8834233"}], "stats": {"total": 12, "additions": 10, "deletions": 2}, "files": [{"sha": "fb6c31763cab09cc2c8fdbeda26f5f87a8131374", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb56fc3933231b44dc310671911e1c73138fb753/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb56fc3933231b44dc310671911e1c73138fb753/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bb56fc3933231b44dc310671911e1c73138fb753", "patch": "@@ -1,3 +1,8 @@\n+2005-02-23  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* genpreds.c (mark_mode_tests): Handle non-VOIDmode match_operands.\n+\t(write_predicate_expr): Likewise.\n+\n 2005-02-22  Diego Novillo  <dnovillo@redhat.com>\n \n \tPR tree-optimization/20100"}, {"sha": "cb22908fb567a7ce89373be9452491985c58965e", "filename": "gcc/genpreds.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb56fc3933231b44dc310671911e1c73138fb753/gcc%2Fgenpreds.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb56fc3933231b44dc310671911e1c73138fb753/gcc%2Fgenpreds.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenpreds.c?ref=bb56fc3933231b44dc310671911e1c73138fb753", "patch": "@@ -167,7 +167,7 @@ mark_mode_tests (rtx exp)\n \tstruct pred_data *p = lookup_predicate (XSTR (exp, 1));\n \tif (!p)\n \t  error (\"reference to undefined predicate '%s'\", XSTR (exp, 1));\n-\telse if (p->special)\n+\telse if (p->special || GET_MODE (exp) != VOIDmode)\n \t  NO_MODE_TEST (exp) = 1;\n       }\n       break;\n@@ -366,7 +366,10 @@ write_predicate_expr (const char *name, rtx exp)\n       break;\n \n     case MATCH_OPERAND:\n-      printf (\"%s (op, mode)\", XSTR (exp, 1));\n+      if (GET_MODE (exp) == VOIDmode)\n+        printf (\"%s (op, mode)\", XSTR (exp, 1));\n+      else\n+        printf (\"%s (op, %smode)\", XSTR (exp, 1), mode_name[GET_MODE (exp)]);\n       break;\n \n     case MATCH_CODE:"}]}