{"sha": "11a669fbeb11f34e960094fc84c658dd36f81ba2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTFhNjY5ZmJlYjExZjM0ZTk2MDA5NGZjODRjNjU4ZGQzNmY4MWJhMg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-11-23T22:25:12Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-11-23T22:25:12Z"}, "message": "* config/i386/i386.md: Move some insn patterns around.\n\nFrom-SVN: r242809", "tree": {"sha": "5c253654f42eba8acbd37d6c356e5c413eec9f32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c253654f42eba8acbd37d6c356e5c413eec9f32"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/11a669fbeb11f34e960094fc84c658dd36f81ba2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11a669fbeb11f34e960094fc84c658dd36f81ba2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11a669fbeb11f34e960094fc84c658dd36f81ba2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11a669fbeb11f34e960094fc84c658dd36f81ba2/comments", "author": null, "committer": null, "parents": [{"sha": "a2556bdf782b2a0e5ee56ce293a81b4a2c6d9e19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2556bdf782b2a0e5ee56ce293a81b4a2c6d9e19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2556bdf782b2a0e5ee56ce293a81b4a2c6d9e19"}], "stats": {"total": 450, "additions": 225, "deletions": 225}, "files": [{"sha": "4d7bcfeeccb134f3136c325a732b2c96786318e5", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 225, "deletions": 225, "changes": 450, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11a669fbeb11f34e960094fc84c658dd36f81ba2/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11a669fbeb11f34e960094fc84c658dd36f81ba2/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=11a669fbeb11f34e960094fc84c658dd36f81ba2", "patch": "@@ -6738,19 +6738,6 @@\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"*add<mode>3_cconly_overflow_2\"\n-  [(set (reg:CCC FLAGS_REG)\n-\t(compare:CCC\n-\t  (plus:SWI\n-\t    (match_operand:SWI 1 \"nonimmediate_operand\" \"%0\")\n-\t    (match_operand:SWI 2 \"<general_operand>\" \"<g>\"))\n-\t  (match_dup 2)))\n-   (clobber (match_scratch:SWI 0 \"=<r>\"))]\n-  \"!(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n-  \"add{<imodesuffix>}\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"alu\")\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n (define_insn \"*add<mode>3_cc_overflow_1\"\n   [(set (reg:CCC FLAGS_REG)\n \t(compare:CCC\n@@ -6765,20 +6752,6 @@\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"*add<mode>3_cc_overflow_2\"\n-  [(set (reg:CCC FLAGS_REG)\n-\t(compare:CCC\n-\t    (plus:SWI\n-\t\t(match_operand:SWI 1 \"nonimmediate_operand\" \"%0,0\")\n-\t\t(match_operand:SWI 2 \"<general_operand>\" \"<r><i>,<r>m\"))\n-\t    (match_dup 2)))\n-   (set (match_operand:SWI 0 \"nonimmediate_operand\" \"=<r>m,<r>\")\n-\t(plus:SWI (match_dup 1) (match_dup 2)))]\n-  \"ix86_binary_operator_ok (PLUS, <MODE>mode, operands)\"\n-  \"add{<imodesuffix>}\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"alu\")\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n (define_insn \"*addsi3_zext_cc_overflow_1\"\n   [(set (reg:CCC FLAGS_REG)\n \t(compare:CCC\n@@ -6793,6 +6766,33 @@\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"mode\" \"SI\")])\n \n+(define_insn \"*add<mode>3_cconly_overflow_2\"\n+  [(set (reg:CCC FLAGS_REG)\n+\t(compare:CCC\n+\t  (plus:SWI\n+\t    (match_operand:SWI 1 \"nonimmediate_operand\" \"%0\")\n+\t    (match_operand:SWI 2 \"<general_operand>\" \"<g>\"))\n+\t  (match_dup 2)))\n+   (clobber (match_scratch:SWI 0 \"=<r>\"))]\n+  \"!(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n+  \"add{<imodesuffix>}\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"alu\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"*add<mode>3_cc_overflow_2\"\n+  [(set (reg:CCC FLAGS_REG)\n+\t(compare:CCC\n+\t    (plus:SWI\n+\t\t(match_operand:SWI 1 \"nonimmediate_operand\" \"%0,0\")\n+\t\t(match_operand:SWI 2 \"<general_operand>\" \"<r><i>,<r>m\"))\n+\t    (match_dup 2)))\n+   (set (match_operand:SWI 0 \"nonimmediate_operand\" \"=<r>m,<r>\")\n+\t(plus:SWI (match_dup 1) (match_dup 2)))]\n+  \"ix86_binary_operator_ok (PLUS, <MODE>mode, operands)\"\n+  \"add{<imodesuffix>}\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"alu\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n (define_insn \"*addsi3_zext_cc_overflow_2\"\n   [(set (reg:CCC FLAGS_REG)\n \t(compare:CCC\n@@ -7337,19 +7337,19 @@\n    (set_attr \"bdver1_decode\" \"direct\")\n    (set_attr \"mode\" \"DI\")])\n \n-(define_insn \"*<s>mulsi3_highpart_1\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(truncate:SI\n+(define_insn \"*<s>mulsi3_highpart_zext\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n+\t(zero_extend:DI (truncate:SI\n \t  (lshiftrt:DI\n-\t    (mult:DI\n-\t      (any_extend:DI\n-\t\t(match_operand:SI 1 \"nonimmediate_operand\" \"%a\"))\n-\t      (any_extend:DI\n-\t\t(match_operand:SI 2 \"nonimmediate_operand\" \"rm\")))\n-\t    (const_int 32))))\n+\t    (mult:DI (any_extend:DI\n+\t\t       (match_operand:SI 1 \"nonimmediate_operand\" \"%a\"))\n+\t\t     (any_extend:DI\n+\t\t       (match_operand:SI 2 \"nonimmediate_operand\" \"rm\")))\n+\t    (const_int 32)))))\n    (clobber (match_scratch:SI 3 \"=1\"))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"!(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n+  \"TARGET_64BIT\n+   && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n   \"<sgnprefix>mul{l}\\t%2\"\n   [(set_attr \"type\" \"imul\")\n    (set_attr \"length_immediate\" \"0\")\n@@ -7361,19 +7361,19 @@\n    (set_attr \"bdver1_decode\" \"direct\")\n    (set_attr \"mode\" \"SI\")])\n \n-(define_insn \"*<s>mulsi3_highpart_zext\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t(zero_extend:DI (truncate:SI\n+(define_insn \"*<s>mulsi3_highpart_1\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n+\t(truncate:SI\n \t  (lshiftrt:DI\n-\t    (mult:DI (any_extend:DI\n-\t\t       (match_operand:SI 1 \"nonimmediate_operand\" \"%a\"))\n-\t\t     (any_extend:DI\n-\t\t       (match_operand:SI 2 \"nonimmediate_operand\" \"rm\")))\n-\t    (const_int 32)))))\n+\t    (mult:DI\n+\t      (any_extend:DI\n+\t\t(match_operand:SI 1 \"nonimmediate_operand\" \"%a\"))\n+\t      (any_extend:DI\n+\t\t(match_operand:SI 2 \"nonimmediate_operand\" \"rm\")))\n+\t    (const_int 32))))\n    (clobber (match_scratch:SI 3 \"=1\"))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_64BIT\n-   && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n+  \"!(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n   \"<sgnprefix>mul{l}\\t%2\"\n   [(set_attr \"type\" \"imul\")\n    (set_attr \"length_immediate\" \"0\")\n@@ -8217,6 +8217,18 @@\n        (const_string \"*\")))\n    (set_attr \"mode\" \"SI,DI,DI,SI,DI\")])\n \n+;; See comment for addsi_1_zext why we do use nonimmediate_operand\n+(define_insn \"*andsi_1_zext\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(zero_extend:DI\n+\t  (and:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0\")\n+\t\t  (match_operand:SI 2 \"x86_64_general_operand\" \"rme\"))))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_64BIT && ix86_binary_operator_ok (AND, SImode, operands)\"\n+  \"and{l}\\t{%2, %k0|%k0, %2}\"\n+  [(set_attr \"type\" \"alu\")\n+   (set_attr \"mode\" \"SI\")])\n+\n (define_insn \"*andsi_1\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm,r,Ya,!k\")\n \t(and:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0,qm,k\")\n@@ -8248,18 +8260,6 @@\n    (set_attr \"length_immediate\" \"*,*,0,0\")\n    (set_attr \"mode\" \"SI\")])\n \n-;; See comment for addsi_1_zext why we do use nonimmediate_operand\n-(define_insn \"*andsi_1_zext\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(zero_extend:DI\n-\t  (and:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0\")\n-\t\t  (match_operand:SI 2 \"x86_64_general_operand\" \"rme\"))))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_64BIT && ix86_binary_operator_ok (AND, SImode, operands)\"\n-  \"and{l}\\t{%2, %k0|%k0, %2}\"\n-  [(set_attr \"type\" \"alu\")\n-   (set_attr \"mode\" \"SI\")])\n-\n (define_insn \"*andhi_1\"\n   [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm,r,Ya,!k\")\n \t(and:HI (match_operand:HI 1 \"nonimmediate_operand\" \"%0,0,qm,k\")\n@@ -8514,6 +8514,21 @@\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"mode\" \"SI,DI,DI\")])\n \n+;; See comment for addsi_1_zext why we do use nonimmediate_operand\n+(define_insn \"*andsi_2_zext\"\n+  [(set (reg FLAGS_REG)\n+\t(compare (and:SI\n+\t\t  (match_operand:SI 1 \"nonimmediate_operand\" \"%0\")\n+\t\t  (match_operand:SI 2 \"x86_64_general_operand\" \"rme\"))\n+\t\t (const_int 0)))\n+   (set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(zero_extend:DI (and:SI (match_dup 1) (match_dup 2))))]\n+  \"TARGET_64BIT && ix86_match_ccmode (insn, CCNOmode)\n+   && ix86_binary_operator_ok (AND, SImode, operands)\"\n+  \"and{l}\\t{%2, %k0|%k0, %2}\"\n+  [(set_attr \"type\" \"alu\")\n+   (set_attr \"mode\" \"SI\")])\n+\n (define_insn \"*andqi_2_maybe_si\"\n   [(set (reg FLAGS_REG)\n \t(compare (and:QI\n@@ -8552,21 +8567,6 @@\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-;; See comment for addsi_1_zext why we do use nonimmediate_operand\n-(define_insn \"*andsi_2_zext\"\n-  [(set (reg FLAGS_REG)\n-\t(compare (and:SI\n-\t\t  (match_operand:SI 1 \"nonimmediate_operand\" \"%0\")\n-\t\t  (match_operand:SI 2 \"x86_64_general_operand\" \"rme\"))\n-\t\t (const_int 0)))\n-   (set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(zero_extend:DI (and:SI (match_dup 1) (match_dup 2))))]\n-  \"TARGET_64BIT && ix86_match_ccmode (insn, CCNOmode)\n-   && ix86_binary_operator_ok (AND, SImode, operands)\"\n-  \"and{l}\\t{%2, %k0|%k0, %2}\"\n-  [(set_attr \"type\" \"alu\")\n-   (set_attr \"mode\" \"SI\")])\n-\n (define_insn \"*andqi_2_slp\"\n   [(set (reg FLAGS_REG)\n \t(compare (and:QI\n@@ -8785,6 +8785,29 @@\n   [(set_attr \"type\" \"alu,alu,msklog\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n+;; See comment for addsi_1_zext why we do use nonimmediate_operand\n+(define_insn \"*<code>si_1_zext\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(zero_extend:DI\n+\t (any_or:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0\")\n+\t\t    (match_operand:SI 2 \"x86_64_general_operand\" \"rme\"))))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_64BIT && ix86_binary_operator_ok (<CODE>, SImode, operands)\"\n+  \"<logic>{l}\\t{%2, %k0|%k0, %2}\"\n+  [(set_attr \"type\" \"alu\")\n+   (set_attr \"mode\" \"SI\")])\n+\n+(define_insn \"*<code>si_1_zext_imm\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(any_or:DI\n+\t (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"%0\"))\n+\t (match_operand:DI 2 \"x86_64_zext_immediate_operand\" \"Z\")))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_64BIT && ix86_binary_operator_ok (<CODE>, SImode, operands)\"\n+  \"<logic>{l}\\t{%2, %k0|%k0, %2}\"\n+  [(set_attr \"type\" \"alu\")\n+   (set_attr \"mode\" \"SI\")])\n+\n (define_insn \"*<code>hi_1\"\n   [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=r,rm,!k\")\n \t(any_or:HI\n@@ -8818,29 +8841,6 @@\n \t      (symbol_ref \"!TARGET_PARTIAL_REG_STALL\")]\n \t   (symbol_ref \"true\")))])\n \n-;; See comment for addsi_1_zext why we do use nonimmediate_operand\n-(define_insn \"*<code>si_1_zext\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(zero_extend:DI\n-\t (any_or:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0\")\n-\t\t    (match_operand:SI 2 \"x86_64_general_operand\" \"rme\"))))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_64BIT && ix86_binary_operator_ok (<CODE>, SImode, operands)\"\n-  \"<logic>{l}\\t{%2, %k0|%k0, %2}\"\n-  [(set_attr \"type\" \"alu\")\n-   (set_attr \"mode\" \"SI\")])\n-\n-(define_insn \"*<code>si_1_zext_imm\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(any_or:DI\n-\t (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"%0\"))\n-\t (match_operand:DI 2 \"x86_64_zext_immediate_operand\" \"Z\")))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_64BIT && ix86_binary_operator_ok (<CODE>, SImode, operands)\"\n-  \"<logic>{l}\\t{%2, %k0|%k0, %2}\"\n-  [(set_attr \"type\" \"alu\")\n-   (set_attr \"mode\" \"SI\")])\n-\n (define_insn \"*<code>qi_1_slp\"\n   [(set (strict_low_part (match_operand:QI 0 \"nonimmediate_operand\" \"+q,m\"))\n \t(any_or:QI (match_dup 0)\n@@ -8866,111 +8866,6 @@\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"kxnor<mode>\"\n-  [(set (match_operand:SWI1248_AVX512BW 0 \"register_operand\" \"=r,!k\")\n-\t(not:SWI1248_AVX512BW\n-\t  (xor:SWI1248_AVX512BW\n-\t    (match_operand:SWI1248_AVX512BW 1 \"register_operand\" \"0,k\")\n-\t    (match_operand:SWI1248_AVX512BW 2 \"register_operand\" \"r,k\"))))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_AVX512F\"\n-{\n-  if (which_alternative == 0)\n-    return \"#\";\n-\n-  if (get_attr_mode (insn) == MODE_HI)\n-    return \"kxnorw\\t{%2, %1, %0|%0, %1, %2}\";\n-  else\n-    return \"kxnor<mskmodesuffix>\\t{%2, %1, %0|%0, %1, %2}\";\n-}\n-  [(set_attr \"type\" \"*,msklog\")\n-   (set_attr \"prefix\" \"*,vex\")\n-   (set (attr \"mode\")\n-     (cond [(and (eq_attr \"alternative\" \"1\")\n-\t\t (and (match_test \"<MODE>mode == QImode\")\n-\t\t      (not (match_test \"TARGET_AVX512DQ\"))))\n-\t      (const_string \"HI\")\n-\t   ]\n-\t   (const_string \"<MODE>\")))])\n-\n-(define_split\n-  [(set (match_operand:SWI1248x 0 \"general_reg_operand\")\n-\t(not:SWI1248x\n-\t  (xor:SWI1248x\n-\t    (match_dup 0)\n-\t    (match_operand:SWI1248x 1 \"general_reg_operand\"))))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_AVX512F && reload_completed\"\n-   [(parallel [(set (match_dup 0)\n-\t\t    (xor:SWI1248x (match_dup 0)\n-\t\t\t\t  (match_dup 1)))\n-\t       (clobber (reg:CC FLAGS_REG))])\n-    (set (match_dup 0)\n-\t (not:SWI1248x (match_dup 0)))])\n-\n-;;There are kortrest[bdq] but no intrinsics for them.\n-;;We probably don't need to implement them.\n-(define_insn \"kortestzhi\"\n-  [(set (reg:CCZ FLAGS_REG)\n-\t(compare:CCZ\n-\t  (ior:HI\n-\t    (match_operand:HI 0 \"register_operand\" \"k\")\n-\t    (match_operand:HI 1 \"register_operand\" \"k\"))\n-\t  (const_int 0)))]\n-  \"TARGET_AVX512F && ix86_match_ccmode (insn, CCZmode)\"\n-  \"kortestw\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"mode\" \"HI\")\n-   (set_attr \"type\" \"msklog\")\n-   (set_attr \"prefix\" \"vex\")])\n-\n-(define_insn \"kortestchi\"\n-  [(set (reg:CCC FLAGS_REG)\n-\t(compare:CCC\n-\t  (ior:HI\n-\t    (match_operand:HI 0 \"register_operand\" \"k\")\n-\t    (match_operand:HI 1 \"register_operand\" \"k\"))\n-\t  (const_int -1)))]\n-  \"TARGET_AVX512F && ix86_match_ccmode (insn, CCCmode)\"\n-  \"kortestw\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"mode\" \"HI\")\n-   (set_attr \"type\" \"msklog\")\n-   (set_attr \"prefix\" \"vex\")])\n-\n-(define_insn \"kunpckhi\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"=k\")\n-\t(ior:HI\n-\t  (ashift:HI\n-\t    (zero_extend:HI (match_operand:QI 1 \"register_operand\" \"k\"))\n-\t    (const_int 8))\n-\t  (zero_extend:HI (match_operand:QI 2 \"register_operand\" \"k\"))))]\n-  \"TARGET_AVX512F\"\n-  \"kunpckbw\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"mode\" \"HI\")\n-   (set_attr \"type\" \"msklog\")\n-   (set_attr \"prefix\" \"vex\")])\n-\n-(define_insn \"kunpcksi\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=k\")\n-\t(ior:SI\n-\t  (ashift:SI\n-\t    (zero_extend:SI (match_operand:HI 1 \"register_operand\" \"k\"))\n-\t    (const_int 16))\n-\t  (zero_extend:SI (match_operand:HI 2 \"register_operand\" \"k\"))))]\n-  \"TARGET_AVX512BW\"\n-  \"kunpckwd\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"mode\" \"SI\")])\n-\n-(define_insn \"kunpckdi\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=k\")\n-\t(ior:DI\n-\t  (ashift:DI\n-\t    (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"k\"))\n-\t    (const_int 32))\n-\t  (zero_extend:DI (match_operand:SI 2 \"register_operand\" \"k\"))))]\n-  \"TARGET_AVX512BW\"\n-  \"kunpckdq\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"mode\" \"DI\")])\n-\n ;; See comment for addsi_1_zext why we do use nonimmediate_operand\n ;; ??? Special case for immediate operand is missing - it is tricky.\n (define_insn \"*<code>si_2_zext\"\n@@ -9170,6 +9065,111 @@\n    (set_attr \"type\" \"alu\")\n    (set_attr \"modrm\" \"1\")\n    (set_attr \"mode\" \"QI\")])\n+\n+(define_insn \"kxnor<mode>\"\n+  [(set (match_operand:SWI1248_AVX512BW 0 \"register_operand\" \"=r,!k\")\n+\t(not:SWI1248_AVX512BW\n+\t  (xor:SWI1248_AVX512BW\n+\t    (match_operand:SWI1248_AVX512BW 1 \"register_operand\" \"0,k\")\n+\t    (match_operand:SWI1248_AVX512BW 2 \"register_operand\" \"r,k\"))))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_AVX512F\"\n+{\n+  if (which_alternative == 0)\n+    return \"#\";\n+\n+  if (get_attr_mode (insn) == MODE_HI)\n+    return \"kxnorw\\t{%2, %1, %0|%0, %1, %2}\";\n+  else\n+    return \"kxnor<mskmodesuffix>\\t{%2, %1, %0|%0, %1, %2}\";\n+}\n+  [(set_attr \"type\" \"*,msklog\")\n+   (set_attr \"prefix\" \"*,vex\")\n+   (set (attr \"mode\")\n+     (cond [(and (eq_attr \"alternative\" \"1\")\n+\t\t (and (match_test \"<MODE>mode == QImode\")\n+\t\t      (not (match_test \"TARGET_AVX512DQ\"))))\n+\t      (const_string \"HI\")\n+\t   ]\n+\t   (const_string \"<MODE>\")))])\n+\n+(define_split\n+  [(set (match_operand:SWI1248x 0 \"general_reg_operand\")\n+\t(not:SWI1248x\n+\t  (xor:SWI1248x\n+\t    (match_dup 0)\n+\t    (match_operand:SWI1248x 1 \"general_reg_operand\"))))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_AVX512F && reload_completed\"\n+   [(parallel [(set (match_dup 0)\n+\t\t    (xor:SWI1248x (match_dup 0)\n+\t\t\t\t  (match_dup 1)))\n+\t       (clobber (reg:CC FLAGS_REG))])\n+    (set (match_dup 0)\n+\t (not:SWI1248x (match_dup 0)))])\n+\n+;;There are kortrest[bdq] but no intrinsics for them.\n+;;We probably don't need to implement them.\n+(define_insn \"kortestzhi\"\n+  [(set (reg:CCZ FLAGS_REG)\n+\t(compare:CCZ\n+\t  (ior:HI\n+\t    (match_operand:HI 0 \"register_operand\" \"k\")\n+\t    (match_operand:HI 1 \"register_operand\" \"k\"))\n+\t  (const_int 0)))]\n+  \"TARGET_AVX512F && ix86_match_ccmode (insn, CCZmode)\"\n+  \"kortestw\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"mode\" \"HI\")\n+   (set_attr \"type\" \"msklog\")\n+   (set_attr \"prefix\" \"vex\")])\n+\n+(define_insn \"kortestchi\"\n+  [(set (reg:CCC FLAGS_REG)\n+\t(compare:CCC\n+\t  (ior:HI\n+\t    (match_operand:HI 0 \"register_operand\" \"k\")\n+\t    (match_operand:HI 1 \"register_operand\" \"k\"))\n+\t  (const_int -1)))]\n+  \"TARGET_AVX512F && ix86_match_ccmode (insn, CCCmode)\"\n+  \"kortestw\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"mode\" \"HI\")\n+   (set_attr \"type\" \"msklog\")\n+   (set_attr \"prefix\" \"vex\")])\n+\n+(define_insn \"kunpckhi\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"=k\")\n+\t(ior:HI\n+\t  (ashift:HI\n+\t    (zero_extend:HI (match_operand:QI 1 \"register_operand\" \"k\"))\n+\t    (const_int 8))\n+\t  (zero_extend:HI (match_operand:QI 2 \"register_operand\" \"k\"))))]\n+  \"TARGET_AVX512F\"\n+  \"kunpckbw\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"mode\" \"HI\")\n+   (set_attr \"type\" \"msklog\")\n+   (set_attr \"prefix\" \"vex\")])\n+\n+(define_insn \"kunpcksi\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=k\")\n+\t(ior:SI\n+\t  (ashift:SI\n+\t    (zero_extend:SI (match_operand:HI 1 \"register_operand\" \"k\"))\n+\t    (const_int 16))\n+\t  (zero_extend:SI (match_operand:HI 2 \"register_operand\" \"k\"))))]\n+  \"TARGET_AVX512BW\"\n+  \"kunpckwd\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"mode\" \"SI\")])\n+\n+(define_insn \"kunpckdi\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=k\")\n+\t(ior:DI\n+\t  (ashift:DI\n+\t    (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"k\"))\n+\t    (const_int 32))\n+\t  (zero_extend:DI (match_operand:SI 2 \"register_operand\" \"k\"))))]\n+  \"TARGET_AVX512BW\"\n+  \"kunpckdq\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"mode\" \"DI\")])\n \f\n ;; Negation instructions\n \n@@ -9578,6 +9578,16 @@\n    (set_attr \"prefix\" \"*,vex\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n+;; ??? Currently never generated - xor is used instead.\n+(define_insn \"*one_cmplsi2_1_zext\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(zero_extend:DI\n+\t  (not:SI (match_operand:SI 1 \"register_operand\" \"0\"))))]\n+  \"TARGET_64BIT && ix86_unary_operator_ok (NOT, SImode, operands)\"\n+  \"not{l}\\t%k0\"\n+  [(set_attr \"type\" \"negnot\")\n+   (set_attr \"mode\" \"SI\")])\n+\n (define_insn \"*one_cmplhi2_1\"\n   [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm,!k\")\n \t(not:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0,k\")))]\n@@ -9626,16 +9636,6 @@\n \t      (symbol_ref \"!TARGET_PARTIAL_REG_STALL\")]\n \t   (symbol_ref \"true\")))])\n \n-;; ??? Currently never generated - xor is used instead.\n-(define_insn \"*one_cmplsi2_1_zext\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(zero_extend:DI\n-\t  (not:SI (match_operand:SI 1 \"register_operand\" \"0\"))))]\n-  \"TARGET_64BIT && ix86_unary_operator_ok (NOT, SImode, operands)\"\n-  \"not{l}\\t%k0\"\n-  [(set_attr \"type\" \"negnot\")\n-   (set_attr \"mode\" \"SI\")])\n-\n (define_insn \"*one_cmpl<mode>2_2\"\n   [(set (reg FLAGS_REG)\n \t(compare (not:SWI (match_operand:SWI 1 \"nonimmediate_operand\" \"0\"))\n@@ -10442,35 +10442,35 @@\n    (set_attr \"modrm\" \"0,1\")\n    (set_attr \"mode\" \"DI\")])\n \n-(define_insn \"ashrsi3_cvt\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=*d,rm\")\n-\t(ashiftrt:SI (match_operand:SI 1 \"nonimmediate_operand\" \"*a,0\")\n-\t\t     (match_operand:QI 2 \"const_int_operand\")))\n+(define_insn \"*ashrsi3_cvt_zext\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=*d,r\")\n+\t(zero_extend:DI\n+\t  (ashiftrt:SI (match_operand:SI 1 \"register_operand\" \"*a,0\")\n+\t\t       (match_operand:QI 2 \"const_int_operand\"))))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"INTVAL (operands[2]) == 31\n+  \"TARGET_64BIT && INTVAL (operands[2]) == 31\n    && (TARGET_USE_CLTD || optimize_function_for_size_p (cfun))\n    && ix86_binary_operator_ok (ASHIFTRT, SImode, operands)\"\n   \"@\n    {cltd|cdq}\n-   sar{l}\\t{%2, %0|%0, %2}\"\n+   sar{l}\\t{%2, %k0|%k0, %2}\"\n   [(set_attr \"type\" \"imovx,ishift\")\n    (set_attr \"prefix_0f\" \"0,*\")\n    (set_attr \"length_immediate\" \"0,*\")\n    (set_attr \"modrm\" \"0,1\")\n    (set_attr \"mode\" \"SI\")])\n \n-(define_insn \"*ashrsi3_cvt_zext\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=*d,r\")\n-\t(zero_extend:DI\n-\t  (ashiftrt:SI (match_operand:SI 1 \"register_operand\" \"*a,0\")\n-\t\t       (match_operand:QI 2 \"const_int_operand\"))))\n+(define_insn \"ashrsi3_cvt\"\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=*d,rm\")\n+\t(ashiftrt:SI (match_operand:SI 1 \"nonimmediate_operand\" \"*a,0\")\n+\t\t     (match_operand:QI 2 \"const_int_operand\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_64BIT && INTVAL (operands[2]) == 31\n+  \"INTVAL (operands[2]) == 31\n    && (TARGET_USE_CLTD || optimize_function_for_size_p (cfun))\n    && ix86_binary_operator_ok (ASHIFTRT, SImode, operands)\"\n   \"@\n    {cltd|cdq}\n-   sar{l}\\t{%2, %k0|%k0, %2}\"\n+   sar{l}\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"imovx,ishift\")\n    (set_attr \"prefix_0f\" \"0,*\")\n    (set_attr \"length_immediate\" \"0,*\")"}]}