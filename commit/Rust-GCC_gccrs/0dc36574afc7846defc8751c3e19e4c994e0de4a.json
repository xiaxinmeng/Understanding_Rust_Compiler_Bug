{"sha": "0dc36574afc7846defc8751c3e19e4c994e0de4a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGRjMzY1NzRhZmM3ODQ2ZGVmYzg3NTFjM2UxOWU0Yzk5NGUwZGU0YQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@codesourcery.com", "date": "2002-07-19T23:11:19Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2002-07-19T23:11:19Z"}, "message": "rtl.def (CODE_LABEL): Remove slot 8.\n\n\t* rtl.def (CODE_LABEL): Remove slot 8.\n\t* rtl.h (struct rtx_def): Document new uses of jump and call fields.\n\t(LABEL_ALTERNATE_NAME): Delete.\n\t(LABEL_KIND, SET_LABEL_KIND, LABEL_ALT_ENTRY_P): New.\n\t* defaults.h: Remove default for ASM_OUTPUT_ALTERNATE_LABEL_NAME.\n\n\t* final.c (output_alternate_entry_point): New.\n\t(final_scan_insn): Use it instead of\n\tASM_OUTPUT_ALTERNATE_LABEL_NAME.  Do not consider possibility\n\tof a case label being an alternate entry point.\n\n\t* cfgbuild.c (make_edges, find_bb_boundaries): Use LABEL_ALT_ENTRY_P.\n\t* emit-rtl.c (gen_label_rtx): Adjust call to gen_rtx_CODE_LABEL.\n\tDo not clear LABEL_NUSES (unnecessary) or LABEL_ALTERNATE_NAME\n\t(field deleted).\n\t* print-rtl.c, ra-debug.c: Update code to output CODE_LABELs.\n\n\t* doc/rtl.texi: Document LABEL_KIND, SET_LABEL_KIND, and\n\tLABEL_ALT_ENTRY_P; not LABEL_ALTERNATE_NAME.\n\t* doc/tm.texi: Delete documentation of\n\tASM_OUTPUT_ALTERNATE_LABEL_NAME.\n\nFrom-SVN: r55597", "tree": {"sha": "4677dbe754062a2b5c3b9130edc8bd83740a6f96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4677dbe754062a2b5c3b9130edc8bd83740a6f96"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0dc36574afc7846defc8751c3e19e4c994e0de4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dc36574afc7846defc8751c3e19e4c994e0de4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0dc36574afc7846defc8751c3e19e4c994e0de4a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dc36574afc7846defc8751c3e19e4c994e0de4a/comments", "author": null, "committer": null, "parents": [{"sha": "59267987dbc7bc330557f4fdfdb574fc797f6c84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59267987dbc7bc330557f4fdfdb574fc797f6c84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59267987dbc7bc330557f4fdfdb574fc797f6c84"}], "stats": {"total": 209, "additions": 158, "deletions": 51}, "files": [{"sha": "69403e0b4db6729081d718e9018a0363047cee98", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dc36574afc7846defc8751c3e19e4c994e0de4a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dc36574afc7846defc8751c3e19e4c994e0de4a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0dc36574afc7846defc8751c3e19e4c994e0de4a", "patch": "@@ -1,3 +1,27 @@\n+2002-07-19  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* rtl.def (CODE_LABEL): Remove slot 8.\n+\t* rtl.h (struct rtx_def): Document new uses of jump and call fields.\n+\t(LABEL_ALTERNATE_NAME): Delete.\n+\t(LABEL_KIND, SET_LABEL_KIND, LABEL_ALT_ENTRY_P): New.\n+\t* defaults.h: Remove default for ASM_OUTPUT_ALTERNATE_LABEL_NAME.\n+\n+\t* final.c (output_alternate_entry_point): New.\n+\t(final_scan_insn): Use it instead of\n+\tASM_OUTPUT_ALTERNATE_LABEL_NAME.  Do not consider possibility\n+\tof a case label being an alternate entry point.\n+\n+\t* cfgbuild.c (make_edges, find_bb_boundaries): Use LABEL_ALT_ENTRY_P.\n+\t* emit-rtl.c (gen_label_rtx): Adjust call to gen_rtx_CODE_LABEL.\n+\tDo not clear LABEL_NUSES (unnecessary) or LABEL_ALTERNATE_NAME\n+\t(field deleted).\n+\t* print-rtl.c, ra-debug.c: Update code to output CODE_LABELs.\n+\n+\t* doc/rtl.texi: Document LABEL_KIND, SET_LABEL_KIND, and\n+\tLABEL_ALT_ENTRY_P; not LABEL_ALTERNATE_NAME.\n+\t* doc/tm.texi: Delete documentation of\n+\tASM_OUTPUT_ALTERNATE_LABEL_NAME.\n+\n 2002-07-19  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n \n \t* config/mips/iris5gas.h (DWARF2_DEBUGGING_INFO): Define."}, {"sha": "12dd200a60fe46e2a1d1637222a67ea5078a8ce3", "filename": "gcc/cfgbuild.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dc36574afc7846defc8751c3e19e4c994e0de4a/gcc%2Fcfgbuild.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dc36574afc7846defc8751c3e19e4c994e0de4a/gcc%2Fcfgbuild.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgbuild.c?ref=0dc36574afc7846defc8751c3e19e4c994e0de4a", "patch": "@@ -321,7 +321,7 @@ make_edges (label_value_list, min, max, update_p)\n       enum rtx_code code;\n       int force_fallthru = 0;\n \n-      if (GET_CODE (bb->head) == CODE_LABEL && LABEL_ALTERNATE_NAME (bb->head))\n+      if (GET_CODE (bb->head) == CODE_LABEL && LABEL_ALT_ENTRY_P (bb->head))\n \tcached_make_edge (NULL, ENTRY_BLOCK_PTR, bb, 0);\n \n       /* Examine the last instruction of the block, and discover the\n@@ -699,7 +699,7 @@ find_bb_boundaries (bb)\n \t  bb = fallthru->dest;\n \t  remove_edge (fallthru);\n \t  flow_transfer_insn = NULL_RTX;\n-\t  if (LABEL_ALTERNATE_NAME (insn))\n+\t  if (LABEL_ALT_ENTRY_P (insn))\n \t    make_edge (ENTRY_BLOCK_PTR, bb, 0);\n \t}\n "}, {"sha": "5b88ac2d880befd5f3b67800de4e91d9beb2f61d", "filename": "gcc/defaults.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dc36574afc7846defc8751c3e19e4c994e0de4a/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dc36574afc7846defc8751c3e19e4c994e0de4a/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=0dc36574afc7846defc8751c3e19e4c994e0de4a", "patch": "@@ -80,12 +80,6 @@ do { fputs (integer_asm_op (POINTER_SIZE / UNITS_PER_WORD, TRUE), FILE); \\\n    } while (0)\n #endif\n \n-/* Provide default for ASM_OUTPUT_ALTERNATE_LABEL_NAME.  */\n-#ifndef ASM_OUTPUT_ALTERNATE_LABEL_NAME\n-#define ASM_OUTPUT_ALTERNATE_LABEL_NAME(FILE,INSN) \\\n-do { ASM_OUTPUT_LABEL(FILE,LABEL_ALTERNATE_NAME (INSN)); } while (0)\n-#endif\n-\n /* choose a reasonable default for ASM_OUTPUT_ASCII.  */\n \n #ifndef ASM_OUTPUT_ASCII"}, {"sha": "427637450ba59fc94057dba0b77c7a6434323030", "filename": "gcc/doc/rtl.texi", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dc36574afc7846defc8751c3e19e4c994e0de4a/gcc%2Fdoc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dc36574afc7846defc8751c3e19e4c994e0de4a/gcc%2Fdoc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Frtl.texi?ref=0dc36574afc7846defc8751c3e19e4c994e0de4a", "patch": "@@ -2830,13 +2830,32 @@ Besides as a @code{code_label}, a label can also be represented as a\n \n @findex LABEL_NUSES\n The field @code{LABEL_NUSES} is only defined once the jump optimization\n-phase is completed and contains the number of times this label is\n+phase is completed.  It contains the number of times this label is\n referenced in the current function.\n \n-@findex LABEL_ALTERNATE_NAME\n-The field @code{LABEL_ALTERNATE_NAME} is used to associate a name with\n-a @code{code_label}.  If this field is defined, the alternate name will\n-be emitted instead of an internally generated label name.\n+@findex LABEL_KIND\n+@findex SET_LABEL_KIND\n+@findex LABEL_ALT_ENTRY_P\n+@cindex alternate entry points\n+The field @code{LABEL_KIND} differentiates four different types of\n+labels: @code{LABEL_NORMAL}, @code{LABEL_STATIC_ENTRY},\n+@code{LABEL_GLOBAL_ENTRY}, and @code{LABEL_WEAK_ENTRY}.  The only labels\n+that do not have type @code{LABEL_NORMAL} are @dfn{alternate entry\n+points} to the current function.  These may be static (visible only in\n+the containing translation unit), global (exposed to all translation\n+units), or weak (global, but can be overriden by another symbol with the\n+same name).\n+\n+Much of the compiler treats all four kinds of label identically.  Some\n+of it needs to know whether or not a label is an alternate entry point;\n+for this purpose, the macro @code{LABEL_ALT_ENTRY_P} is provided.  It is\n+equivalent to testing whether @samp{LABEL_KIND (label) == LABEL_NORMAL}.\n+The only place that cares about the distinction between static, global,\n+and weak alternate entry points, besides the front-end code that creates\n+them, is the function @code{output_alternate_entry_point}, in\n+@file{final.c}.\n+\n+To set the kind of a label, use the @code{SET_LABEL_KIND} macro.\n \n @findex barrier\n @item barrier"}, {"sha": "0892a05d627c0c092592cbd254b315600d322d7c", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dc36574afc7846defc8751c3e19e4c994e0de4a/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dc36574afc7846defc8751c3e19e4c994e0de4a/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=0dc36574afc7846defc8751c3e19e4c994e0de4a", "patch": "@@ -6597,17 +6597,6 @@ bundles.\n If this macro is not defined, then @code{ASM_OUTPUT_INTERNAL_LABEL} will be\n used.\n \n-@findex ASM_OUTPUT_ALTERNATE_LABEL_NAME\n-@item ASM_OUTPUT_ALTERNATE_LABEL_NAME (@var{stream}, @var{string})\n-A C statement to output to the stdio stream @var{stream} the string\n-@var{string}.\n-\n-The default definition of this macro is as follows:\n-\n-@example\n-fprintf (@var{stream}, \"%s:\\n\", LABEL_ALTERNATE_NAME (INSN))\n-@end example\n-\n @findex ASM_GENERATE_INTERNAL_LABEL\n @item ASM_GENERATE_INTERNAL_LABEL (@var{string}, @var{prefix}, @var{num})\n A C statement to store into the string @var{string} a label whose name"}, {"sha": "af537d257f075edff9cfc19502c1e62e2203c7de", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dc36574afc7846defc8751c3e19e4c994e0de4a/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dc36574afc7846defc8751c3e19e4c994e0de4a/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=0dc36574afc7846defc8751c3e19e4c994e0de4a", "patch": "@@ -2185,14 +2185,8 @@ widen_memory_access (memref, mode, offset)\n rtx\n gen_label_rtx ()\n {\n-  rtx label;\n-\n-  label = gen_rtx_CODE_LABEL (VOIDmode, 0, NULL_RTX, NULL_RTX,\n-\t\t  \t      NULL, label_num++, NULL, NULL);\n-\n-  LABEL_NUSES (label) = 0;\n-  LABEL_ALTERNATE_NAME (label) = NULL;\n-  return label;\n+  return gen_rtx_CODE_LABEL (VOIDmode, 0, NULL_RTX, NULL_RTX,\n+\t\t  \t     NULL, label_num++, NULL);\n }\n \f\n /* For procedure integration.  */"}, {"sha": "e0b38601dbfb6b3e1dd6a69edee69bbcb715f3db", "filename": "gcc/final.c", "status": "modified", "additions": 35, "deletions": 6, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dc36574afc7846defc8751c3e19e4c994e0de4a/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dc36574afc7846defc8751c3e19e4c994e0de4a/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=0dc36574afc7846defc8751c3e19e4c994e0de4a", "patch": "@@ -222,6 +222,7 @@ static void profile_after_prologue PARAMS ((FILE *));\n static void notice_source_line\tPARAMS ((rtx));\n static rtx walk_alter_subreg\tPARAMS ((rtx *));\n static void output_asm_name\tPARAMS ((void));\n+static void output_alternate_entry_point PARAMS ((FILE *, rtx));\n static tree get_mem_expr_from_op\tPARAMS ((rtx, int *));\n static void output_asm_operand_names PARAMS ((rtx *, int *, int));\n static void output_operand\tPARAMS ((rtx, int));\n@@ -1952,6 +1953,37 @@ get_insn_template (code, insn)\n     }\n }\n \n+/* Emit the appropriate declaration for an alternate-entry-point\n+   symbol represented by INSN, to FILE.  INSN is a CODE_LABEL with\n+   LABEL_KIND != LABEL_NORMAL.\n+\n+   The case fall-through in this function is intentional.  */\n+static void\n+output_alternate_entry_point (file, insn)\n+     FILE *file;\n+     rtx insn;\n+{\n+  const char *name = LABEL_NAME (insn);\n+\n+  switch (LABEL_KIND (insn))\n+    {\n+    case LABEL_WEAK_ENTRY:\n+#ifdef ASM_WEAKEN_LABEL\n+      ASM_WEAKEN_LABEL (file, name);\n+#endif\n+    case LABEL_GLOBAL_ENTRY:\n+      ASM_GLOBALIZE_LABEL (file, name);\n+    case LABEL_STATIC_ENTRY:\n+      /* FIXME output a .type directive here if appropriate.  */\n+      ASM_OUTPUT_LABEL (file, name);\n+      break;\n+\n+    case LABEL_NORMAL:\n+    default:\n+      abort ();\n+    }\n+}\n+\n /* The final scan for one insn, INSN.\n    Args are same as in `final', except that INSN\n    is the insn being scanned.\n@@ -2242,17 +2274,14 @@ final_scan_insn (insn, file, optimize, prescan, nopeepholes)\n \t      ASM_OUTPUT_CASE_LABEL (file, \"L\", CODE_LABEL_NUMBER (insn),\n \t\t\t\t     NEXT_INSN (insn));\n #else\n-\t      if (LABEL_ALTERNATE_NAME (insn))\n-\t\tASM_OUTPUT_ALTERNATE_LABEL_NAME (file, insn);\n-\t      else\n-\t\tASM_OUTPUT_INTERNAL_LABEL (file, \"L\", CODE_LABEL_NUMBER (insn));\n+\t      ASM_OUTPUT_INTERNAL_LABEL (file, \"L\", CODE_LABEL_NUMBER (insn));\n #endif\n #endif\n \t      break;\n \t    }\n \t}\n-      if (LABEL_ALTERNATE_NAME (insn))\n-\tASM_OUTPUT_ALTERNATE_LABEL_NAME (file, insn);\n+      if (LABEL_ALT_ENTRY_P (insn))\n+\toutput_alternate_entry_point (file, insn);\n       else\n \tASM_OUTPUT_INTERNAL_LABEL (file, \"L\", CODE_LABEL_NUMBER (insn));\n       break;"}, {"sha": "15538052c1828ea1d5058bdba4330383d37fcd28", "filename": "gcc/print-rtl.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dc36574afc7846defc8751c3e19e4c994e0de4a/gcc%2Fprint-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dc36574afc7846defc8751c3e19e4c994e0de4a/gcc%2Fprint-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-rtl.c?ref=0dc36574afc7846defc8751c3e19e4c994e0de4a", "patch": "@@ -526,9 +526,14 @@ print_rtx (in_rtx)\n \n     case CODE_LABEL:\n       fprintf (outfile, \" [%d uses]\", LABEL_NUSES (in_rtx));\n-      if (LABEL_ALTERNATE_NAME (in_rtx))\n-\tfprintf (outfile, \" [alternate name: %s]\",\n-\t\t LABEL_ALTERNATE_NAME (in_rtx));\n+      switch (LABEL_KIND (in_rtx))\n+\t{\n+\t  case LABEL_NORMAL: break;\n+\t  case LABEL_STATIC_ENTRY: fputs (\" [entry]\", outfile); break;\n+\t  case LABEL_GLOBAL_ENTRY: fputs (\" [global entry]\", outfile); break;\n+\t  case LABEL_WEAK_ENTRY: fputs (\" [weak entry]\", outfile); break;\n+\t  default: abort();\n+\t}\n       break;\n \n     case CALL_PLACEHOLDER:"}, {"sha": "fd8c8d4bb5b61386516e71ba5b3c199819e5153d", "filename": "gcc/ra-debug.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dc36574afc7846defc8751c3e19e4c994e0de4a/gcc%2Fra-debug.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dc36574afc7846defc8751c3e19e4c994e0de4a/gcc%2Fra-debug.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fra-debug.c?ref=0dc36574afc7846defc8751c3e19e4c994e0de4a", "patch": "@@ -381,8 +381,14 @@ ra_print_rtx (file, x, with_pn)\n \t  fprintf (file, \"L%d:\\t; \", CODE_LABEL_NUMBER (x));\n \t  if (LABEL_NAME (x))\n \t    fprintf (file, \"(%s) \", LABEL_NAME (x));\n-\t  if (LABEL_ALTERNATE_NAME (x))\n-\t    fprintf (file, \"(alternate: %s) \", LABEL_ALTERNATE_NAME (x));\n+\t  switch (LABEL_KIND (x))\n+\t    {\n+\t    case LABEL_NORMAL: break;\n+\t    case LABEL_STATIC_ENTRY: fputs (\" (entry)\", file); break;\n+\t    case LABEL_GLOBAL_ENTRY: fputs (\" (global entry)\", file); break;\n+\t    case LABEL_WEAK_ENTRY: fputs (\" (weak entry)\", file); break;\n+\t    default: abort();\n+\t    }\n \t  fprintf (file, \" [%d uses] uid=(\", LABEL_NUSES (x));\n \t}\n       fprintf (file, \"%d\", INSN_UID (x));"}, {"sha": "2934188c70b255fabf05c8e4b9afcb67a036f1e5", "filename": "gcc/rtl.def", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dc36574afc7846defc8751c3e19e4c994e0de4a/gcc%2Frtl.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dc36574afc7846defc8751c3e19e4c994e0de4a/gcc%2Frtl.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.def?ref=0dc36574afc7846defc8751c3e19e4c994e0de4a", "patch": "@@ -573,10 +573,9 @@ DEF_RTL_EXPR(BARRIER, \"barrier\", \"iuu\", 'x')\n    4: is used in jump.c for the use-count of the label.\n    5: is used in flow.c to point to the chain of label_ref's to this label.\n    6: is a number that is unique in the entire compilation.\n-   7: is the user-given name of the label, if any.\n-   8: is the alternate label name.  */\n-DEF_RTL_EXPR(CODE_LABEL, \"code_label\", \"iuuB00iss\", 'x')\n-     \n+   7: is the user-given name of the label, if any.  */\n+DEF_RTL_EXPR(CODE_LABEL, \"code_label\", \"iuuB00is\", 'x')\n+\n /* Say where in the code a source line starts, for symbol table's sake.\n    Operand:\n    4: filename, if line number > 0, note-specific data otherwise."}, {"sha": "9490dd7fb8b6ff35da1b59dd6c7d2b2214c921db", "filename": "gcc/rtl.h", "status": "modified", "additions": 52, "deletions": 4, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dc36574afc7846defc8751c3e19e4c994e0de4a/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dc36574afc7846defc8751c3e19e4c994e0de4a/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=0dc36574afc7846defc8751c3e19e4c994e0de4a", "patch": "@@ -130,9 +130,10 @@ struct rtx_def\n   /* 1 in a MEM if we should keep the alias set for this mem unchanged\n      when we access a component.\n      1 in a CALL_INSN if it is a sibling call.\n-     1 in a SET that is for a return.  */\n+     1 in a SET that is for a return.\n+     In a CODE_LABEL, part of the two-bit alternate entry field.  */\n   unsigned int jump : 1;\n-  /* This flag is currently unused.  */\n+  /* In a CODE_LABEL, part of the two-bit alternate entry field.  */\n   unsigned int call : 1;\n   /* 1 in a REG, MEM, or CONCAT if the value is set at most once, anywhere.\n      1 in a SUBREG if it references an unsigned object whose mode has been\n@@ -876,8 +877,55 @@ extern const char * const note_insn_name[NOTE_INSN_MAX - NOTE_INSN_BIAS];\n    of LABEL_REFs that point at it, so unused labels can be deleted.  */\n #define LABEL_NUSES(RTX) XCINT (RTX, 4, CODE_LABEL)\n \n-/* Associate a name with a CODE_LABEL.  */\n-#define LABEL_ALTERNATE_NAME(RTX) XCSTR (RTX, 8, CODE_LABEL)\n+/* Labels carry a two-bit field composed of the ->jump and ->call\n+   bits.  This field indicates whether the label is an alternate\n+   entry point, and if so, what kind.  */\n+enum label_kind\n+{\n+  LABEL_NORMAL = 0,\t/* ordinary label */\n+  LABEL_STATIC_ENTRY,\t/* alternate entry point, not exported */\n+  LABEL_GLOBAL_ENTRY,\t/* alternate entry point, exported */\n+  LABEL_WEAK_ENTRY\t/* alternate entry point, exported as weak symbol */\n+};\n+\n+#if defined ENABLE_RTL_FLAG_CHECKING && (GCC_VERSION > 2007)\n+\n+/* Retrieve the kind of LABEL.  */\n+#define LABEL_KIND(LABEL) __extension__\t\t\t\t\t\\\n+({ rtx const _label = (LABEL);\t\t\t\t\t\t\\\n+   if (GET_CODE (_label) != CODE_LABEL)\t\t\t\t\t\\\n+     rtl_check_failed_flag (\"LABEL_KIND\", _label, __FILE__, __LINE__,\t\\\n+\t\t\t    __FUNCTION__);\t\t\t\t\\\n+   (enum label_kind) ((_label->jump << 1) | _label->call); })\n+\n+/* Set the kind of LABEL.  */\n+#define SET_LABEL_KIND(LABEL, KIND) do {\t\t\t\t\\\n+   rtx _label = (LABEL);\t\t\t\t\t\t\\\n+   unsigned int _kind = (KIND);\t\t\t\t\t\t\\\n+   if (GET_CODE (_label) != CODE_LABEL)\t\t\t\t\t\\\n+     rtl_check_failed_flag (\"SET_LABEL_KIND\", _label, __FILE__, __LINE__, \\\n+\t\t\t    __FUNCTION__);\t\t\t\t\\\n+   _label->jump = ((_kind >> 1) & 1);\t\t\t\t\t\\\n+   _label->call = (_kind & 1);\t\t\t\t\t\t\\\n+} while (0)\n+\n+#else\n+\n+/* Retrieve the kind of LABEL.  */\n+#define LABEL_KIND(LABEL) \\\n+   ((enum label_kind) (((LABEL)->jump << 1) | (LABEL)->call))\n+\n+/* Set the kind of LABEL.  */\n+#define SET_LABEL_KIND(LABEL, KIND) do {\t\t\t\t\\\n+   rtx _label = (LABEL);\t\t\t\t\t\t\\\n+   unsigned int _kind = (KIND);\t\t\t\t\t\t\\\n+   _label->jump = ((_kind >> 1) & 1);\t\t\t\t\t\\\n+   _label->call = (_kind & 1);\t\t\t\t\t\t\\\n+} while (0)\n+\n+#endif /* rtl flag checking */\n+\n+#define LABEL_ALT_ENTRY_P(LABEL) (LABEL_KIND (LABEL) != LABEL_NORMAL)\n \n /* The original regno this ADDRESSOF was built for.  */\n #define ADDRESSOF_REGNO(RTX) XCUINT (RTX, 1, ADDRESSOF)"}]}