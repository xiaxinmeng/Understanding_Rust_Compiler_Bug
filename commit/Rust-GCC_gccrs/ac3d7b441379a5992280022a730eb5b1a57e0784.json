{"sha": "ac3d7b441379a5992280022a730eb5b1a57e0784", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWMzZDdiNDQxMzc5YTU5OTIyODAwMjJhNzMwZWI1YjFhNTdlMDc4NA==", "commit": {"author": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2003-07-06T03:14:37Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2003-07-06T03:14:37Z"}, "message": "create_testsuite_files: New file.\n\n2003-07-05  Phil Edwards  <pme@gcc.gnu.org>\n\n\t* scripts/create_testsuite_files:  New file.\n\t* testsuite/Makefile.am (all-local, check-performance):  Use it.\n\t* testsuite/lib/libstdc++-v3-dg.exp (v3-computer-tests):  Remove.\n\t* testsuite/Makefile.in:  Regenerated.\n\n\t* testsuite/performance/filebuf_sputc.cc:  Remove the temporary\n\tfiles at the end.\n\t* testsuite/performance/fstream_seek_write.cc:  Likewise.\n\t* testsuite/performance/ofstream_insert_float.cc:  Likewise.\n\t* testsuite/performance/ofstream_insert_int.cc:  Likewise.\n\t* testsuite/abi_check.cc (main):  Nicer spacing in usage output.\n\nFrom-SVN: r68988", "tree": {"sha": "817b173cc3f9ad9f203ff6cd79a79cd85a38e05d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/817b173cc3f9ad9f203ff6cd79a79cd85a38e05d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac3d7b441379a5992280022a730eb5b1a57e0784", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac3d7b441379a5992280022a730eb5b1a57e0784", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac3d7b441379a5992280022a730eb5b1a57e0784", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac3d7b441379a5992280022a730eb5b1a57e0784/comments", "author": null, "committer": null, "parents": [{"sha": "e3d51be28110e27f893dda4867542958706db1d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3d51be28110e27f893dda4867542958706db1d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3d51be28110e27f893dda4867542958706db1d6"}], "stats": {"total": 252, "additions": 116, "deletions": 136}, "files": [{"sha": "e00b406ed1a4d04231ff5e894fcec24b69a04ffe", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac3d7b441379a5992280022a730eb5b1a57e0784/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac3d7b441379a5992280022a730eb5b1a57e0784/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ac3d7b441379a5992280022a730eb5b1a57e0784", "patch": "@@ -1,3 +1,17 @@\n+2003-07-05  Phil Edwards  <pme@gcc.gnu.org>\n+\n+\t* scripts/create_testsuite_files:  New file.\n+\t* testsuite/Makefile.am (all-local, check-performance):  Use it.\n+\t* testsuite/lib/libstdc++-v3-dg.exp (v3-computer-tests):  Remove.\n+\t* testsuite/Makefile.in:  Regenerated.\n+\n+\t* testsuite/performance/filebuf_sputc.cc:  Remove the temporary\n+\tfiles at the end.\n+\t* testsuite/performance/fstream_seek_write.cc:  Likewise.\n+\t* testsuite/performance/ofstream_insert_float.cc:  Likewise.\n+\t* testsuite/performance/ofstream_insert_int.cc:  Likewise.\n+\t* testsuite/abi_check.cc (main):  Nicer spacing in usage output.\n+\n 2003-07-05  Gawain Bolton  <gp.bolton@computer.org>\n \n \t* include/bits/stl_list.h: Performance and memory usage"}, {"sha": "7fbcbdb2fb3a0e5640cca0397e228c24ead20302", "filename": "libstdc++-v3/scripts/create_testsuite_files", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac3d7b441379a5992280022a730eb5b1a57e0784/libstdc%2B%2B-v3%2Fscripts%2Fcreate_testsuite_files", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac3d7b441379a5992280022a730eb5b1a57e0784/libstdc%2B%2B-v3%2Fscripts%2Fcreate_testsuite_files", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fscripts%2Fcreate_testsuite_files?ref=ac3d7b441379a5992280022a730eb5b1a57e0784", "patch": "@@ -0,0 +1,58 @@\n+#!/bin/sh\n+\n+# Constructs lists of source files (full pathnames) to test.  Two\n+# files are constructed: testsuite_files, which is used to test with\n+# the default dg-runtest command, and testsuite_files_interactive,\n+# which is used to test cases that require input to be entered. In\n+# addition, both lists are pruned of wchar_t tests if the toolchain\n+# under test does not support wchar_t functionality.\n+#\n+# We mimic the mkcheck script in that the first time this is run, all\n+# existing files are listed in \"testsuite_files\" in the output\n+# directory.  Subsequent runs pull the list from that file, allowing\n+# users to trim the list down to problematic tests, or just run\n+# paticular directories or sub-directories of tests.\n+#\n+# Selecting individual tests can also be done with RUNTESTFLAGS, but\n+# that doesn't really do all that we are trying to accomplish here.\n+\n+LC_ALL=C\n+export LC_ALL\n+\n+# Both of these are in the appropriate testsuite subdirectories.\n+srcdir=\"$1\"\n+outdir=\"$2\"\n+\n+tmp=\"${TMPDIR:-/tmp}/ctt$$\"\n+tests_file_normal=\"$outdir/testsuite_files\"\n+tests_file_inter=\"$outdir/testsuite_files_interactive\"\n+tests_file_perf=\"$outdir/testsuite_files_performance\"\n+\n+cd $srcdir\n+# This is the ugly version of \"everything but the current directory\".  It's\n+# what has to happen when find(1) doesn't support -mindepth.\n+dlist=`echo [0-9][0-9]*`\n+for d in [a-z]*; do\n+  test -d $d && dlist=\"$dlist $d\"\n+done\n+find $dlist -type f -name \"*.cc\" | sort > $tmp.1\n+\n+# If the library is not configured to support wchar_t, don't run those tests.\n+if test -f \"$outdir/testsuite_wchar_t\"; then\n+  mv $tmp.1 $tmp.2\n+else\n+  grep -v wchar_t $tmp.1 > $tmp.2\n+fi\n+\n+# Now filter out classes of tests.  These classes are run using special rules.\n+grep _xin $tmp.2 > $tests_file_inter\n+grep -v _xin $tmp.2 > $tmp.3\n+\n+grep performance $tmp.3 > $tests_file_perf\n+grep -v performance $tmp.3 > $tmp.4\n+\n+# ...more filters go here.\n+cp $tmp.4 $tests_file_normal\n+\n+rm $tmp*\n+exit 0"}, {"sha": "bbe1fe5f45b29b9ca72d8ac7e8dba074e6440eee", "filename": "libstdc++-v3/testsuite/Makefile.am", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac3d7b441379a5992280022a730eb5b1a57e0784/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac3d7b441379a5992280022a730eb5b1a57e0784/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.am?ref=ac3d7b441379a5992280022a730eb5b1a57e0784", "patch": "@@ -38,6 +38,7 @@ RUNTEST = `if [ -f @glibcxx_srcdir@/../dejagnu/runtest ] ; then \\\n AM_MAKEFLAGS = -j1\n AM_RUNTESTFLAGS =\n RUNTESTFLAGS =\n+PWD_COMMAND = $${PWDCMD-pwd}\n \n ## CXX is actually a \"C\" compiler. These are real C++ programs.\n glibcxx_srcdir=@glibcxx_srcdir@\n@@ -57,6 +58,13 @@ INCLUDES = \\\n \t-nostdinc++ \\\n \t@GLIBCXX_INCLUDES@ @LIBSUPCXX_INCLUDES@ @TOPLEVEL_INCLUDES@ \n \n+# Generated lists of files to run.  All of these names are valid make\n+# targets, if you wish to generate a list manually.\n+lists_of_files = \\\n+   testsuite_files \\\n+   testsuite_files_interactive \\\n+   testsuite_files_performance\n+\n ## Build support library.\n noinst_LIBRARIES = libv3test.a\n libv3test_a_SOURCES = testsuite_hooks.cc testsuite_allocator.cc\n@@ -69,7 +77,7 @@ noinst_PROGRAMS =\n endif\n abi_check_SOURCES = abi_check.cc\n \n-all-local: stamp_wchar\n+all-local: stamp_wchar testsuite_files\n \n # Enable wchar_t tests if capable.\n if GLIBCXX_TEST_WCHAR_T\n@@ -144,10 +152,17 @@ check-script-install: ${survey_script}\n # ammounts of memory, or otherwise tie up machine resources. Thus,\n # running this is off by default.\n performance_script=${glibcxx_srcdir}/scripts/check_performance\n-check-performance: ${performance_script}\n+check-performance: testsuite_files_performance ${performance_script}\n \t-@(chmod + ${performance_script}; \\\n \t  ${performance_script} ${glibcxx_srcdir} ${glibcxx_builddir})\n \n+\n+# This rule generates all of the testsuite_files* lists at once.\n+${lists_of_files}:\n+\t${glibcxx_srcdir}/scripts/create_testsuite_files \\\n+\t  ${glibcxx_srcdir}/testsuite `${PWD_COMMAND}`\n+\n+\n .PHONY: baseline_symbols new-abi-baseline check-abi check-abi-verbose \\\n check-script check-script-install check-performance\n "}, {"sha": "1752949b54224e44007824f12f78cb89222f99b2", "filename": "libstdc++-v3/testsuite/Makefile.in", "status": "modified", "additions": 22, "deletions": 21, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac3d7b441379a5992280022a730eb5b1a57e0784/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac3d7b441379a5992280022a730eb5b1a57e0784/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in?ref=ac3d7b441379a5992280022a730eb5b1a57e0784", "patch": "@@ -143,42 +143,39 @@ mkinstalldirs = $(SHELL) $(toplevel_srcdir)/mkinstalldirs\n \n DEJATOOL = libstdc++-v3\n \n-EXPECT = `if [ -f @glibcxx_builddir@/../../expect/expect ] ; then \\\n-            echo @glibcxx_builddir@/../../expect/expect ; \\\n-          else echo expect ; fi`\n+EXPECT = `if [ -f @glibcxx_builddir@/../../expect/expect ] ; then             echo @glibcxx_builddir@/../../expect/expect ;           else echo expect ; fi`\n \n \n-RUNTEST = `if [ -f @glibcxx_srcdir@/../dejagnu/runtest ] ; then \\\n-\t       echo @glibcxx_srcdir@/../dejagnu/runtest ; \\\n-\t    else echo runtest; fi`\n+RUNTEST = `if [ -f @glibcxx_srcdir@/../dejagnu/runtest ] ; then \t       echo @glibcxx_srcdir@/../dejagnu/runtest ; \t    else echo runtest; fi`\n \n \n AM_MAKEFLAGS = -j1\n AM_RUNTESTFLAGS = \n RUNTESTFLAGS = \n+PWD_COMMAND = $${PWDCMD-pwd}\n \n glibcxx_srcdir = @glibcxx_srcdir@\n glibcxx_builddir = @glibcxx_builddir@\n testsuite_flags_script = ${glibcxx_builddir}/scripts/testsuite_flags\n CXX = `${testsuite_flags_script} --build-cxx`\n \n-CXXLINK = \\\n-\tLD_RUN_PATH=$${LD_RUN_PATH:+$$LD_RUN_PATH:}${glibcxx_builddir}/src/.libs\\\n-\t$(LIBTOOL) --tag=CXX --mode=link $(CXX) \\\n-\t$(AM_CXXFLAGS) $(CXXFLAGS) $(LDFLAGS) -o $@\n+CXXLINK =  \tLD_RUN_PATH=$${LD_RUN_PATH:+$$LD_RUN_PATH:}${glibcxx_builddir}/src/.libs \t$(LIBTOOL) --tag=CXX --mode=link $(CXX) \t$(AM_CXXFLAGS) $(CXXFLAGS) $(LDFLAGS) -o $@\n \n \n GLIBCXX_INCLUDES = @GLIBCXX_INCLUDES@\n LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n-INCLUDES = \\\n-\t-nostdinc++ \\\n-\t@GLIBCXX_INCLUDES@ @LIBSUPCXX_INCLUDES@ @TOPLEVEL_INCLUDES@ \n+INCLUDES =  \t-nostdinc++ \t@GLIBCXX_INCLUDES@ @LIBSUPCXX_INCLUDES@ @TOPLEVEL_INCLUDES@ \n+\n+\n+# Generated lists of files to run.  All of these names are valid make\n+# targets, if you wish to generate a list manually.\n+lists_of_files =     testsuite_files    testsuite_files_interactive    testsuite_files_performance\n \n \n noinst_LIBRARIES = libv3test.a\n libv3test_a_SOURCES = testsuite_hooks.cc testsuite_allocator.cc\n-@GLIBCXX_TEST_ABI_TRUE@noinst_PROGRAMS = @GLIBCXX_TEST_ABI_TRUE@abi_check\n+@GLIBCXX_TEST_ABI_TRUE@noinst_PROGRAMS = abi_check\n @GLIBCXX_TEST_ABI_FALSE@noinst_PROGRAMS = \n abi_check_SOURCES = abi_check.cc\n \n@@ -200,8 +197,7 @@ survey_script = ${glibcxx_builddir}/scripts/check_survey\n performance_script = ${glibcxx_srcdir}/scripts/check_performance\n \n # By adding these files here, automake will remove them for 'make clean'\n-CLEANFILES = *.txt *.tst *.exe core* filebuf_* tmp* ostream_* *.log *.sum \\\n-\t     testsuite_* site.exp abi_check baseline_symbols \n+CLEANFILES = *.txt *.tst *.exe core* filebuf_* tmp* ostream_* *.log *.sum \t     testsuite_* site.exp abi_check baseline_symbols \n \n CONFIG_HEADER = ../config.h\n CONFIG_CLEAN_FILES = \n@@ -231,7 +227,7 @@ DIST_COMMON =  Makefile.am Makefile.in\n \n DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) $(TEXINFOS) $(EXTRA_DIST)\n \n-TAR = gtar\n+TAR = tar\n GZIP_ENV = --best\n SOURCES = $(libv3test_a_SOURCES) $(abi_check_SOURCES)\n OBJECTS = $(libv3test_a_OBJECTS) $(abi_check_OBJECTS)\n@@ -342,7 +338,7 @@ TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) $(LISP)\n \t  awk '    { files[$$0] = 1; } \\\n \t       END { for (i in files) print i; }'`; \\\n \ttest -z \"$(ETAGS_ARGS)$$unique$(LISP)$$tags\" \\\n-\t  || (cd $(srcdir) && etags $(ETAGS_ARGS) $$tags  $$unique $(LISP) -o $$here/TAGS)\n+\t  || (cd $(srcdir) && etags -o $$here/TAGS $(ETAGS_ARGS) $$tags  $$unique $(LISP))\n \n mostlyclean-tags:\n \n@@ -399,7 +395,7 @@ site.exp: Makefile\n \t@echo 'set build_alias $(build_alias)' >> $@-t\n \t@echo 'set build_triplet $(build_triplet)' >> $@-t\n \t@echo '## All variables above are generated by configure. Do Not Edit ##' >> $@-t\n-\t@test ! -f site.exp || sed '1,/^## All variables above are.*##/ d' site.exp >> $@-t\n+\t@test ! -f $(srcdir)/site.exp || sed '1,/^## All variables above are.*##/ d' $(srcdir)/site.exp >> $@-t\n \t@test ! -f site.exp || mv site.exp site.bak\n \t@mv $@-t site.exp\n info-am:\n@@ -485,7 +481,7 @@ distclean-generic clean-generic maintainer-clean-generic clean \\\n mostlyclean distclean maintainer-clean\n \n \n-all-local: stamp_wchar\n+all-local: stamp_wchar testsuite_files\n \n # Enable wchar_t tests if capable.\n @GLIBCXX_TEST_WCHAR_T_TRUE@stamp_wchar:\n@@ -535,10 +531,15 @@ check-script: ${survey_script}\n check-script-install: ${survey_script}\n \t-@(chmod + ${survey_script}; \\\n \t  ${survey_script} 0)\n-check-performance: ${performance_script}\n+check-performance: testsuite_files_performance ${performance_script}\n \t-@(chmod + ${performance_script}; \\\n \t  ${performance_script} ${glibcxx_srcdir} ${glibcxx_builddir})\n \n+# This rule generates all of the testsuite_files* lists at once.\n+${lists_of_files}:\n+\t${glibcxx_srcdir}/scripts/create_testsuite_files \\\n+\t  ${glibcxx_srcdir}/testsuite `${PWD_COMMAND}`\n+\n .PHONY: baseline_symbols new-abi-baseline check-abi check-abi-verbose \\\n check-script check-script-install check-performance\n "}, {"sha": "2116f7a6b30c420c3c228847e9f6f3871d390d95", "filename": "libstdc++-v3/testsuite/abi_check.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac3d7b441379a5992280022a730eb5b1a57e0784/libstdc%2B%2B-v3%2Ftestsuite%2Fabi_check.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac3d7b441379a5992280022a730eb5b1a57e0784/libstdc%2B%2B-v3%2Ftestsuite%2Fabi_check.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fabi_check.cc?ref=ac3d7b441379a5992280022a730eb5b1a57e0784", "patch": "@@ -317,7 +317,7 @@ main(int argc, char** argv)\n   string argv1 = argc > 1 ? argv[1] : \"\";\n   if (argv1 == \"--help\" || argc < 4)\n     {\n-      cerr << \"usage: abi_check --check current baseline\\n\"\n+      cerr << \"usage: abi_check --check         current baseline\\n\"\n               \"                 --check-verbose current baseline\\n\"\n               \"                 --help\\n\\n\"\n               \"Where CURRENT is a file containing the current results from\\n\""}, {"sha": "c7e2a9b909d883ebb0a112b1a0086c3879780c42", "filename": "libstdc++-v3/testsuite/lib/libstdc++-v3-dg.exp", "status": "modified", "additions": 0, "deletions": 112, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac3d7b441379a5992280022a730eb5b1a57e0784/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B-v3-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac3d7b441379a5992280022a730eb5b1a57e0784/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B-v3-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B-v3-dg.exp?ref=ac3d7b441379a5992280022a730eb5b1a57e0784", "patch": "@@ -59,9 +59,6 @@ proc libstdc++-v3-init { args } {\n     libstdc++-v3-copy-files [glob -nocomplain \"$srcdir/data/*.tst\"] $outdir\n     libstdc++-v3-copy-files [glob -nocomplain \"$srcdir/data/*.txt\"] $outdir\n \n-    # Compute lists of files to test.\n-    v3-compute-tests\n-\n     # set LD_LIBRARY_PATH so that libgcc_s, libstdc++ binaries can be found.\n     # locate libgcc.a so we don't need to account for different values of\n     # SHLIB_EXT on different platforms\n@@ -218,115 +215,6 @@ proc libstdc++-v3_target_compile { source dest type options } {\n }\n \n \n-# Constructs lists of source files (full pathnames) to test.  Two\n-# files are constructed: testsuite_files, which is used to test with\n-# the default dg-runtest command, and testsuite_files_interactive,\n-# which is used to test cases that require input to be entered. In\n-# addition, both lists are pruned of wchar_t tests if the toolchain\n-# under test does not support wchar_t functionality.\n-#\n-# We mimic the mkcheck script in that the first time this is run, all\n-# existing files are listed in \"testsuite_files\" in the output\n-# directory.  Subsequent runs pull the list from that file, allowing\n-# users to trim the list down to problematic tests, or just run\n-# paticular directories or sub-directories of tests.\n-#\n-# Selecting individual tests can also be done with RUNTESTFLAGS, but\n-# that doesn't really do all that we are trying to accomplish here.\n-#\n-# Essentially \"static\" to this file.\n-proc v3-compute-tests { } {\n-    global srcdir\n-    global outdir\n-\n-    set tests_file \"${outdir}/testsuite_files\"\n-    set tests_file_inter \"${outdir}/testsuite_files_interactive\"\n-    set tests_file_perf \"${outdir}/testsuite_files_performance\"\n-    set sfiles \"\"\n-\n-    # If there is a testsuite_file, use it. \n-    if { [file exists $tests_file] } {\n-\treturn \n-    } \n-\n-    # If not, generate it. \n-    set where_we_were [pwd]\n-    cd $srcdir\n-    foreach s [lsort [glob -nocomplain \"*/*.cc\" \"*/*/*.cc\" \"{,*/}*/*/*/*.cc\" ]] {\n-\tlappend sfiles ${s}\n-    }\n-    cd $where_we_were\n-\n-    # Filter wchar_t tests.\n-    # Disable wchar_t tests if library not configured to support\n-    # wchar_t testing. \n-    set wchar_file \"${outdir}/testsuite_wchar_t\"    \n-    if { ! [file exists $wchar_file] } {\n-\t# Remove wchar_t tests files from list.\n-\tset res {}\n-\tforeach w $sfiles {\n-\t    if [regexp \"wchar_t\" $w] {\n-\t\tverbose \"element wchar list is $w\"\n-\t    } else {\n-\t\tverbose \"element non-wchar list is $w\"\n-\t\tlappend res $w\n-\t    }\n-\t}\n-\tset sfiles ${res}\n-    }\n-\n-    # Filter interactive tests.\n-    # Use special rules to run these tests.\n-    set restwo {}\n-    set sfiles_inter {}\n-    foreach i $sfiles {\n-\tif [regexp \"_xin\" $i] {\n-\t    verbose \"element interactive list is $i\"\n-\t    lappend sfiles_inter $i\n-\t} else {\n-\t    verbose \"element non-interactive list is $i\"\n-\t    lappend restwo $i\n-\t}\n-    }\n-    set sfiles ${restwo}\n-\n-    # Filter performance analysis tests.\n-    # Use special rules to run these tests.\n-    set resthree {}\n-    set sfiles_perf {}\n-    foreach i $sfiles {\n-\tif [regexp \"performance\" $i] {\n-\t    verbose \"element performance list is $i\"\n-\t    lappend sfiles_perf $i\n-\t} else {\n-\t    verbose \"element non-performancet list is $i\"\n-\t    lappend resthree $i\n-\t}\n-    }\n-    set sfiles ${resthree}\n-\n-    # Write out testsuite_files.\n-    set f [open $tests_file \"w\"]\n-    foreach t $sfiles {\n-\tputs $f $t\n-    }\n-    close $f\n-\n-    # Write out testsuite_files_interactive.\n-    set f [open $tests_file_inter \"w\"]\n-    foreach t $sfiles_inter {\n-\tputs $f $t\n-    }\n-    close $f\n-\n-    # Write out testsuite_files_performance.\n-    set f [open $tests_file_perf \"w\"]\n-    foreach t $sfiles_perf {\n-\tputs $f $t\n-    }\n-    close $f\n-}\n-\n # Called once, from libstdc++-v3.dg/dg.exp.\n proc v3-list-tests { filename } {\n     global srcdir"}, {"sha": "cdf030d0fba40c2a38571f9deb27359a58171b25", "filename": "libstdc++-v3/testsuite/performance/filebuf_sputc.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac3d7b441379a5992280022a730eb5b1a57e0784/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Ffilebuf_sputc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac3d7b441379a5992280022a730eb5b1a57e0784/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Ffilebuf_sputc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Ffilebuf_sputc.cc?ref=ac3d7b441379a5992280022a730eb5b1a57e0784", "patch": "@@ -69,5 +69,6 @@ int main()\n   stop_counters(time, resource);\n   report_performance(__FILE__, \"C++\", time, resource);\n \n+  unlink(\"tmp\");\n   return 0;\n }"}, {"sha": "6c56c27a76b8da9ac62be1d79654f3ebfc42b917", "filename": "libstdc++-v3/testsuite/performance/fstream_seek_write.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac3d7b441379a5992280022a730eb5b1a57e0784/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Ffstream_seek_write.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac3d7b441379a5992280022a730eb5b1a57e0784/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Ffstream_seek_write.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Ffstream_seek_write.cc?ref=ac3d7b441379a5992280022a730eb5b1a57e0784", "patch": "@@ -53,5 +53,6 @@ int main()\n       report_performance(__FILE__, \"\", time, resource);\n     }\n \n+  unlink(\"tmp_perf_seek\");\n   return 0;\n }"}, {"sha": "910291a4e01b65ff004a528872c32ec9027d4ae4", "filename": "libstdc++-v3/testsuite/performance/ofstream_insert_float.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac3d7b441379a5992280022a730eb5b1a57e0784/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fofstream_insert_float.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac3d7b441379a5992280022a730eb5b1a57e0784/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fofstream_insert_float.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fofstream_insert_float.cc?ref=ac3d7b441379a5992280022a730eb5b1a57e0784", "patch": "@@ -48,5 +48,6 @@ int main()\n   stop_counters(time, resource);\n   report_performance(__FILE__, \"\", time, resource);\n \n+  unlink(\"tmp_perf_float.txt\");\n   return 0;\n };"}, {"sha": "c2e591a0f226468777e7e5b6a0c8d84dc046d28b", "filename": "libstdc++-v3/testsuite/performance/ofstream_insert_int.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac3d7b441379a5992280022a730eb5b1a57e0784/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fofstream_insert_int.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac3d7b441379a5992280022a730eb5b1a57e0784/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fofstream_insert_int.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fofstream_insert_int.cc?ref=ac3d7b441379a5992280022a730eb5b1a57e0784", "patch": "@@ -45,5 +45,6 @@ int main()\n   stop_counters(time, resource);\n   report_performance(__FILE__, \"\", time, resource);\n \n+  unlink(\"tmp_perf_int.txt\");\n   return 0;\n };"}]}