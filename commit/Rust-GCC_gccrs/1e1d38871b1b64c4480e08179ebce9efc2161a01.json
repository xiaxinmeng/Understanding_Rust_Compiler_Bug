{"sha": "1e1d38871b1b64c4480e08179ebce9efc2161a01", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWUxZDM4ODcxYjFiNjRjNDQ4MGUwODE3OWViY2U5ZWZjMjE2MWEwMQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2008-07-31T08:01:25Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2008-07-31T08:01:25Z"}, "message": "re PR debug/36278 (ICE with typedef void in namespace and using the defined type in another when compiling with \"-g\")\n\n\tPR debug/36278\n\t* dwarf2out.c (get_context_die): New function.\n\t(force_decl_die, force_type_die): Use it.\n\t(dwarf2out_imported_module_or_decl): Likewise.  If base_type_die\n\treturns NULL, force generation of DW_TAG_typedef and put that into\n\tDW_AT_import.\n\n\t* g++.dg/debug/namespace2.C: New test.\n\nFrom-SVN: r138361", "tree": {"sha": "5d7741a5fa35893c436c49fabebc382a2f344042", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d7741a5fa35893c436c49fabebc382a2f344042"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e1d38871b1b64c4480e08179ebce9efc2161a01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e1d38871b1b64c4480e08179ebce9efc2161a01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e1d38871b1b64c4480e08179ebce9efc2161a01", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e1d38871b1b64c4480e08179ebce9efc2161a01/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b3e200e1354de45b09c18ee4260d6b7e8d2db51e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3e200e1354de45b09c18ee4260d6b7e8d2db51e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3e200e1354de45b09c18ee4260d6b7e8d2db51e"}], "stats": {"total": 106, "additions": 60, "deletions": 46}, "files": [{"sha": "49799a84695deb7cc5eab30312590b543aa003d3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e1d38871b1b64c4480e08179ebce9efc2161a01/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e1d38871b1b64c4480e08179ebce9efc2161a01/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1e1d38871b1b64c4480e08179ebce9efc2161a01", "patch": "@@ -1,5 +1,12 @@\n 2008-07-31  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR debug/36278\n+\t* dwarf2out.c (get_context_die): New function.\n+\t(force_decl_die, force_type_die): Use it.\n+\t(dwarf2out_imported_module_or_decl): Likewise.  If base_type_die\n+\treturns NULL, force generation of DW_TAG_typedef and put that into\n+\tDW_AT_import.\n+\n \tPR preprocessor/36649\n \t* c-pch.c (c_common_read_pch): Save and restore\n \tline_table->trace_includes across PCH restore."}, {"sha": "dbf5105604b8652fe4996418a3c2790f4d6948fc", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 40, "deletions": 46, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e1d38871b1b64c4480e08179ebce9efc2161a01/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e1d38871b1b64c4480e08179ebce9efc2161a01/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=1e1d38871b1b64c4480e08179ebce9efc2161a01", "patch": "@@ -14068,6 +14068,22 @@ is_redundant_typedef (const_tree decl)\n   return 0;\n }\n \n+/* Returns the DIE for a context.  */\n+\n+static inline dw_die_ref\n+get_context_die (tree context)\n+{\n+  if (context)\n+    {\n+      /* Find die that represents this context.  */\n+      if (TYPE_P (context))\n+\treturn force_type_die (context);\n+      else\n+\treturn force_decl_die (context);\n+    }\n+  return comp_unit_die;\n+}\n+\n /* Returns the DIE for decl.  A DIE will always be returned.  */\n \n static dw_die_ref\n@@ -14079,18 +14095,7 @@ force_decl_die (tree decl)\n   decl_die = lookup_decl_die (decl);\n   if (!decl_die)\n     {\n-      dw_die_ref context_die;\n-      tree decl_context = DECL_CONTEXT (decl);\n-      if (decl_context)\n-\t{\n-\t  /* Find die that represents this context.  */\n-\t  if (TYPE_P (decl_context))\n-\t    context_die = force_type_die (decl_context);\n-\t  else\n-\t    context_die = force_decl_die (decl_context);\n-\t}\n-      else\n-\tcontext_die = comp_unit_die;\n+      dw_die_ref context_die = get_context_die (DECL_CONTEXT (decl));\n \n       decl_die = lookup_decl_die (decl);\n       if (decl_die)\n@@ -14145,16 +14150,7 @@ force_type_die (tree type)\n   type_die = lookup_type_die (type);\n   if (!type_die)\n     {\n-      dw_die_ref context_die;\n-      if (TYPE_CONTEXT (type))\n-\t{\n-\t  if (TYPE_P (TYPE_CONTEXT (type)))\n-\t    context_die = force_type_die (TYPE_CONTEXT (type));\n-\t  else\n-\t    context_die = force_decl_die (TYPE_CONTEXT (type));\n-\t}\n-      else\n-\tcontext_die = comp_unit_die;\n+      dw_die_ref context_die = get_context_die (TYPE_CONTEXT (type));\n \n       type_die = modified_type_die (type, TYPE_READONLY (type),\n \t\t\t\t    TYPE_VOLATILE (type), context_die);\n@@ -14476,16 +14472,11 @@ dwarf2out_imported_module_or_decl (tree decl, tree context)\n \n   /* Get the scope die for decl context. Use comp_unit_die for global module\n      or decl. If die is not found for non globals, force new die.  */\n-  if (!context)\n-    scope_die = comp_unit_die;\n-  else if (TYPE_P (context))\n-    {\n-      if (!should_emit_struct_debug (context, DINFO_USAGE_DIR_USE))\n-\treturn;\n-    scope_die = force_type_die (context);\n-    }\n-  else\n-    scope_die = force_decl_die (context);\n+  if (context\n+      && TYPE_P (context)\n+      && !should_emit_struct_debug (context, DINFO_USAGE_DIR_USE))\n+    return;\n+  scope_die = get_context_die (context);\n \n   /* For TYPE_DECL or CONST_DECL, lookup TREE_TYPE.  */\n   if (TREE_CODE (decl) == TYPE_DECL || TREE_CODE (decl) == CONST_DECL)\n@@ -14494,6 +14485,16 @@ dwarf2out_imported_module_or_decl (tree decl, tree context)\n \tat_import_die = base_type_die (TREE_TYPE (decl));\n       else\n \tat_import_die = force_type_die (TREE_TYPE (decl));\n+      /* For namespace N { typedef void T; } using N::T; base_type_die\n+\t returns NULL, but DW_TAG_imported_declaration requires\n+\t the DW_AT_import tag.  Force creation of DW_TAG_typedef.  */\n+      if (!at_import_die)\n+\t{\n+\t  gcc_assert (TREE_CODE (decl) == TYPE_DECL);\n+\t  gen_typedef_die (decl, get_context_die (DECL_CONTEXT (decl)));\n+\t  at_import_die = lookup_type_die (TREE_TYPE (decl));\n+\t  gcc_assert (at_import_die);\n+\t}\n     }\n   else\n     {\n@@ -14505,21 +14506,14 @@ dwarf2out_imported_module_or_decl (tree decl, tree context)\n \t  if (TREE_CODE (decl) == FIELD_DECL)\n \t    {\n \t      tree type = DECL_CONTEXT (decl);\n-\t      dw_die_ref type_context_die;\n \n-\t      if (TYPE_CONTEXT (type))\n-\t\tif (TYPE_P (TYPE_CONTEXT (type)))\n-\t\t  {\n-\t\t    if (!should_emit_struct_debug (TYPE_CONTEXT (type),\n-\t\t\t\t\t\t   DINFO_USAGE_DIR_USE))\n-\t\t      return;\n-\t\t  type_context_die = force_type_die (TYPE_CONTEXT (type));\n-\t\t  }\n-\t      else\n-\t\ttype_context_die = force_decl_die (TYPE_CONTEXT (type));\n-\t      else\n-\t\ttype_context_die = comp_unit_die;\n-\t      gen_type_die_for_member (type, decl, type_context_die);\n+\t      if (TYPE_CONTEXT (type)\n+\t\t  && TYPE_P (TYPE_CONTEXT (type))\n+\t\t  && !should_emit_struct_debug (TYPE_CONTEXT (type),\n+\t\t\t\t\t\tDINFO_USAGE_DIR_USE))\n+\t\treturn;\n+\t      gen_type_die_for_member (type, decl,\n+\t\t\t\t       get_context_die (TYPE_CONTEXT (type)));\n \t    }\n \t  at_import_die = force_decl_die (decl);\n \t}"}, {"sha": "0df56e856ee79727bf164ba031c86f90be117405", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e1d38871b1b64c4480e08179ebce9efc2161a01/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e1d38871b1b64c4480e08179ebce9efc2161a01/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1e1d38871b1b64c4480e08179ebce9efc2161a01", "patch": "@@ -3,6 +3,11 @@\n \tPR debug/36278\n \t* g++.dg/debug/namespace2.C: New test.\n \n+\t* gcc.dg/pch/cpp-3.c: New test.\n+\t* gcc.dg/pch/cpp-3.hs: New file.\n+\t* gcc.dg/pch/cpp-3a.h: New file.\n+\t* gcc.dg/pch/cpp-3b.h: New file.\n+\n 2008-07-30  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/boolean_expr.ad[sb]: New test."}, {"sha": "f70bc8fada8bd6cf2ef2ca5a4bbc65106600af64", "filename": "gcc/testsuite/g++.dg/debug/namespace2.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e1d38871b1b64c4480e08179ebce9efc2161a01/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fnamespace2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e1d38871b1b64c4480e08179ebce9efc2161a01/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fnamespace2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fnamespace2.C?ref=1e1d38871b1b64c4480e08179ebce9efc2161a01", "patch": "@@ -0,0 +1,8 @@\n+// PR debug/36278\n+// { dg-do compile }\n+\n+namespace N\n+{\n+  typedef void T;\n+}\n+using N::T;"}]}