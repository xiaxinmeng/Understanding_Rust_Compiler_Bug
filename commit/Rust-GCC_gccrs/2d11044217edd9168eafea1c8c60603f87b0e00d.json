{"sha": "2d11044217edd9168eafea1c8c60603f87b0e00d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQxMTA0NDIxN2VkZDkxNjhlYWZlYTFjOGM2MDYwM2Y4N2IwZTAwZA==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2015-09-24T08:51:39Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2015-09-24T08:51:39Z"}, "message": "Use CRTs provided by Solaris\n\n\tgcc:\n\t* configure.ac (gcc_cv_solaris_crts): New test.\n\t* configure. Regenerate.\n\t* config.in: Regenerate.\n\t* config/sol2.h (STARTFILE_SPEC): Simplify, provide\n\tHAVE_SOLARIS_CRTS variant.\n\n\tlibgcc:\n\t* configure.ac (libgcc_cv_solaris_crts): New test.\n\t* configure: Regenerate.\n\t* config.in: Regenerate.\n\t* config/sol2/crtp.c, config/sol2/crtpg.c: New files.\n\t* config/gmon-sol2.c: Rename to ...\n\t* config/sol2/gmon.c: ... this.\n\tInclude auto-target.h.\n\t(internal_mcount): Wrap setup handling in !HAVE_SOLARIS_CRTS.\n\t* config/t-sol2: Rename to ...\n\t* config/sol2/t-sol2: ... this.\n\t(gmon.o): Reflect renaming.\n\t(crtp.o, crtpg.o): New rules.\n\t* config.host (*-*-solaris2*): Reflect renaming.\n\tUse system CRTs if present.\n\tRemove default CRT case.\n\nFrom-SVN: r228077", "tree": {"sha": "025e93ec3292313d548bc0002efbee95ff405726", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/025e93ec3292313d548bc0002efbee95ff405726"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d11044217edd9168eafea1c8c60603f87b0e00d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d11044217edd9168eafea1c8c60603f87b0e00d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d11044217edd9168eafea1c8c60603f87b0e00d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d11044217edd9168eafea1c8c60603f87b0e00d/comments", "author": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fcb901cdfac9321b0202d800621f06b2aafd5bee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcb901cdfac9321b0202d800621f06b2aafd5bee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fcb901cdfac9321b0202d800621f06b2aafd5bee"}], "stats": {"total": 311, "additions": 289, "deletions": 22}, "files": [{"sha": "e549506e6a9168eda053c9e8eefebe2adf7b7971", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d11044217edd9168eafea1c8c60603f87b0e00d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d11044217edd9168eafea1c8c60603f87b0e00d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2d11044217edd9168eafea1c8c60603f87b0e00d", "patch": "@@ -1,3 +1,11 @@\n+2015-09-24  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* configure.ac (gcc_cv_solaris_crts): New test.\n+\t* configure. Regenerate.\n+\t* config.in: Regenerate.\n+\t* config/sol2.h (STARTFILE_SPEC): Simplify, provide\n+\tHAVE_SOLARIS_CRTS variant.\n+\n 2015-09-24  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* tree-inline.h (count_insns_seq): Delete prototype."}, {"sha": "a1987cc9bd9bdde9db85741c5bb557d350df2ef1", "filename": "gcc/config.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d11044217edd9168eafea1c8c60603f87b0e00d/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d11044217edd9168eafea1c8c60603f87b0e00d/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=2d11044217edd9168eafea1c8c60603f87b0e00d", "patch": "@@ -1631,6 +1631,12 @@\n #endif\n \n \n+/* Define if the system-provided CRTs are present on Solaris. */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_SOLARIS_CRTS\n+#endif\n+\n+\n /* Define to 1 if you have the <stddef.h> header file. */\n #ifndef USED_FOR_TARGET\n #undef HAVE_STDDEF_H"}, {"sha": "d31a25133766d8fcba8629e7bec647b0f4a91907", "filename": "gcc/config/sol2.h", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d11044217edd9168eafea1c8c60603f87b0e00d/gcc%2Fconfig%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d11044217edd9168eafea1c8c60603f87b0e00d/gcc%2Fconfig%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsol2.h?ref=2d11044217edd9168eafea1c8c60603f87b0e00d", "patch": "@@ -156,14 +156,24 @@ along with GCC; see the file COPYING3.  If not see\n \n /* We don't use the standard svr4 STARTFILE_SPEC because it's wrong for us.  */\n #undef STARTFILE_SPEC\n-#define STARTFILE_SPEC \"%{!shared: \\\n-\t\t\t %{!symbolic: \\\n-\t\t\t  %{p:mcrt1.o%s} \\\n-                          %{!p: \\\n-\t                    %{pg:gcrt1.o%s gmon.o%s} \\\n-                            %{!pg:crt1.o%s}}}} \\\n+#ifdef HAVE_SOLARIS_CRTS\n+/* Since Solaris 11.x and Solaris 12, the OS delivers crt1.o, crti.o, and\n+   crtn.o, with a hook for compiler-dependent stuff like profile handling.  */\n+#define STARTFILE_SPEC \"%{!shared:%{!symbolic: \\\n+\t\t\t  crt1.o%s \\\n+\t\t\t  %{p:%e-p is not supported; \\\n+\t\t\t    pg:crtpg.o%s gmon.o%s; \\\n+\t\t\t      :crtp.o%s}}} \\\n \t\t\tcrti.o%s %(startfile_arch) \\\n \t\t\tcrtbegin.o%s\"\n+#else\n+#define STARTFILE_SPEC \"%{!shared:%{!symbolic: \\\n+\t\t\t  %{p:mcrt1.o%s; \\\n+                            pg:gcrt1.o%s gmon.o%s; \\\n+                              :crt1.o%s}}} \\\n+\t\t\tcrti.o%s %(startfile_arch) \\\n+\t\t\tcrtbegin.o%s\"\n+#endif\n \n #undef  ENDFILE_SPEC\n #define ENDFILE_SPEC \\"}, {"sha": "a32bb64948d797a211a2e298ea542f58a01a85ea", "filename": "gcc/configure", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d11044217edd9168eafea1c8c60603f87b0e00d/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d11044217edd9168eafea1c8c60603f87b0e00d/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=2d11044217edd9168eafea1c8c60603f87b0e00d", "patch": "@@ -28025,6 +28025,44 @@ $as_echo \"#define HAVE_LD_SYSROOT 1\" >>confdefs.h\n \n fi\n \n+case $target in\n+*-*-solaris2*)\n+  # Check for system-provided CRTs on Solaris 11.x and Solaris 12.\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking system-provided CRTs on Solaris\" >&5\n+$as_echo_n \"checking system-provided CRTs on Solaris... \" >&6; }\n+if test \"${gcc_cv_solaris_crts+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  gcc_cv_solaris_crts=no\n+     if test x$host != x$target; then\n+       if test \"x$with_sysroot\" = xyes; then\n+         target_sysroot=\"${test_exec_prefix}/${target_noncanonical}/sys-root\"\n+       else\n+         target_sysroot=\"${with_sysroot}\"\n+       fi\n+     fi\n+     target_libdir=\"$target_sysroot/usr/lib\"\n+     # At the time they were added, gcrt1.o became a symlink for backwards\n+     # compatibility on x86, while crt1.o was added on sparc, so check for that.\n+     case $target in\n+       i?86-*-solaris2* | x86_64-*-solaris2*)\n+         if test -h \"$target_libdir/gcrt1.o\"; then gcc_cv_solaris_crts=yes; fi\n+\t ;;\n+       sparc*-*-solaris2*)\n+         if test -f \"$target_libdir/crt1.o\"; then gcc_cv_solaris_crts=yes; fi\n+\t ;;\n+     esac\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_solaris_crts\" >&5\n+$as_echo \"$gcc_cv_solaris_crts\" >&6; }\n+  ;;\n+esac\n+if test x$gcc_cv_solaris_crts = xyes; then\n+\n+$as_echo \"#define HAVE_SOLARIS_CRTS 1\" >>confdefs.h\n+\n+fi\n+\n # Test for stack protector support in target C library.\n { $as_echo \"$as_me:${as_lineno-$LINENO}: checking __stack_chk_fail in target C library\" >&5\n $as_echo_n \"checking __stack_chk_fail in target C library... \" >&6; }"}, {"sha": "4f8a44e51f140483da6a25583ada104931511222", "filename": "gcc/configure.ac", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d11044217edd9168eafea1c8c60603f87b0e00d/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d11044217edd9168eafea1c8c60603f87b0e00d/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=2d11044217edd9168eafea1c8c60603f87b0e00d", "patch": "@@ -5281,6 +5281,37 @@ if test x\"$gcc_cv_ld_sysroot\" = xyes; then\n   [Define if your linker supports --sysroot.])\n fi\t  \n \n+case $target in\n+*-*-solaris2*)\n+  # Check for system-provided CRTs on Solaris 11.x and Solaris 12.\n+  AC_CACHE_CHECK([system-provided CRTs on Solaris],\n+    gcc_cv_solaris_crts,\n+    [gcc_cv_solaris_crts=no\n+     if test x$host != x$target; then\n+       if test \"x$with_sysroot\" = xyes; then\n+         target_sysroot=\"${test_exec_prefix}/${target_noncanonical}/sys-root\"\n+       else\n+         target_sysroot=\"${with_sysroot}\"\n+       fi\n+     fi\n+     target_libdir=\"$target_sysroot/usr/lib\"\n+     # At the time they were added, gcrt1.o became a symlink for backwards\n+     # compatibility on x86, while crt1.o was added on sparc, so check for that.\n+     case $target in\n+       i?86-*-solaris2* | x86_64-*-solaris2*)\n+         if test -h \"$target_libdir/gcrt1.o\"; then gcc_cv_solaris_crts=yes; fi\n+\t ;;\n+       sparc*-*-solaris2*)\n+         if test -f \"$target_libdir/crt1.o\"; then gcc_cv_solaris_crts=yes; fi\n+\t ;;\n+     esac])\n+  ;;\n+esac\n+if test x$gcc_cv_solaris_crts = xyes; then\n+  AC_DEFINE(HAVE_SOLARIS_CRTS, 1,\n+  \t    [Define if the system-provided CRTs are present on Solaris.])\n+fi\n+\n # Test for stack protector support in target C library.\n AC_CACHE_CHECK(__stack_chk_fail in target C library,\n       gcc_cv_libc_provides_ssp,"}, {"sha": "559f7726f7fb41b2036d565576b4ed13cb43fb1f", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d11044217edd9168eafea1c8c60603f87b0e00d/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d11044217edd9168eafea1c8c60603f87b0e00d/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=2d11044217edd9168eafea1c8c60603f87b0e00d", "patch": "@@ -1,3 +1,21 @@\n+2015-09-24  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* configure.ac (libgcc_cv_solaris_crts): New test.\n+\t* configure: Regenerate.\n+\t* config.in: Regenerate.\n+\t* config/sol2/crtp.c, config/sol2/crtpg.c: New files.\n+\t* config/gmon-sol2.c: Rename to ...\n+\t* config/sol2/gmon.c: ... this.\n+\tInclude auto-target.h.\n+\t(internal_mcount): Wrap setup handling in !HAVE_SOLARIS_CRTS.\n+\t* config/t-sol2: Rename to ...\n+\t* config/sol2/t-sol2: ... this.\n+\t(gmon.o): Reflect renaming.\n+\t(crtp.o, crtpg.o): New rules.\n+\t* config.host (*-*-solaris2*): Reflect renaming.\n+\tUse system CRTs if present.\n+\tRemove default CRT case.\n+\n 2015-09-23  John David Anglin  <danglin@gcc.gnu.org>\n \n \t* config/pa/linux-atomic.c (__kernel_cmpxchg2): Reorder error checks."}, {"sha": "6c8b97bfc013cc4c13697ed5f1140ab21f5e2984", "filename": "libgcc/config.host", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d11044217edd9168eafea1c8c60603f87b0e00d/libgcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d11044217edd9168eafea1c8c60603f87b0e00d/libgcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.host?ref=2d11044217edd9168eafea1c8c60603f87b0e00d", "patch": "@@ -267,7 +267,7 @@ case ${host} in\n *-*-solaris2*)\n   # Unless linker support and dl_iterate_phdr are present,\n   # unwind-dw2-fde-dip.c automatically falls back to unwind-dw2-fde.c.\n-  tmake_file=\"$tmake_file t-sol2 t-eh-dw2-dip t-libgcc-pic t-slibgcc t-slibgcc-elf-ver\"\n+  tmake_file=\"$tmake_file sol2/t-sol2 t-eh-dw2-dip t-libgcc-pic t-slibgcc t-slibgcc-elf-ver\"\n   if test $with_gnu_ld = yes; then\n     tmake_file=\"$tmake_file t-slibgcc-gld\"\n   else\n@@ -276,19 +276,22 @@ case ${host} in\n   # Add cpu-specific t-sol2 after t-slibgcc-* so it can augment SHLIB_MAPFILES.\n   tmake_file=\"$tmake_file $cpu_type/t-sol2\"\n   extra_parts=\"gmon.o crtbegin.o crtend.o\"\n-  case ${host} in\n-    i?86-*-solaris2.1[0-9]* | x86_64-*-solaris2.1[0-9]*)\n-      # Solaris 10+/x86 provides crt1.o, crti.o, crtn.o, and gcrt1.o as\n-      # part of the base system.\n-      ;;\n-    sparc*-*-solaris2.1[0-9]*)\n-      # Solaris 10+/SPARC lacks crt1.o and gcrt1.o.\n-      extra_parts=\"$extra_parts crt1.o gcrt1.o\"\n-      ;;\n-    *)\n-      extra_parts=\"$extra_parts crt1.o crti.o crtn.o gcrt1.o\"\n-      ;;\n-  esac\n+  if test \"${libgcc_cv_solaris_crts}\" = yes; then\n+    # Solaris 11.x and 12 provide crt1.o, crti.o, and crtn.o as part of the\n+    # base system.  crtp.o and crtpg.o implement the compiler-dependent parts.\n+    extra_parts=\"$extra_parts crtp.o crtpg.o\"\n+  else\n+    case ${host} in\n+      i?86-*-solaris2.1[0-9]* | x86_64-*-solaris2.1[0-9]*)\n+        # Solaris 10+/x86 provides crt1.o, crti.o, crtn.o, and gcrt1.o as\n+        # part of the base system.\n+        ;;\n+      sparc*-*-solaris2.1[0-9]*)\n+        # Solaris 10+/SPARC lacks crt1.o and gcrt1.o.\n+        extra_parts=\"$extra_parts crt1.o gcrt1.o\"\n+        ;;\n+    esac\n+  fi\n   ;;\n *-*-uclinux*)\n   extra_parts=\"crtbegin.o crtend.o\""}, {"sha": "25aa0d93bab8660e2e836caab1565860dee94ea9", "filename": "libgcc/config.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d11044217edd9168eafea1c8c60603f87b0e00d/libgcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d11044217edd9168eafea1c8c60603f87b0e00d/libgcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.in?ref=2d11044217edd9168eafea1c8c60603f87b0e00d", "patch": "@@ -18,6 +18,9 @@\n /* Define to 1 if you have the <memory.h> header file. */\n #undef HAVE_MEMORY_H\n \n+/* Define if the system-provided CRTs are present on Solaris. */\n+#undef HAVE_SOLARIS_CRTS\n+\n /* Define to 1 if you have the <stdint.h> header file. */\n #undef HAVE_STDINT_H\n "}, {"sha": "8b79c55eb90922cedb4934c72d374fe6053e6360", "filename": "libgcc/config/sol2/crtp.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d11044217edd9168eafea1c8c60603f87b0e00d/libgcc%2Fconfig%2Fsol2%2Fcrtp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d11044217edd9168eafea1c8c60603f87b0e00d/libgcc%2Fconfig%2Fsol2%2Fcrtp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fsol2%2Fcrtp.c?ref=2d11044217edd9168eafea1c8c60603f87b0e00d", "patch": "@@ -0,0 +1,33 @@\n+/* Dummy _mcount when mixing profiling and non-profiling objects.\n+   Copyright (C) 2015 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+void _mcount (void);\n+\n+/* A dummy profiling support routine for non-profiling executables,\n+   in case we link in some objects that have been compiled for profiling.  */\n+\n+void __attribute__((weak))\n+_mcount (void)\n+{\n+}"}, {"sha": "e07a36af9370fc4c5bf391e1f196cf1e28e475e8", "filename": "libgcc/config/sol2/crtpg.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d11044217edd9168eafea1c8c60603f87b0e00d/libgcc%2Fconfig%2Fsol2%2Fcrtpg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d11044217edd9168eafea1c8c60603f87b0e00d/libgcc%2Fconfig%2Fsol2%2Fcrtpg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fsol2%2Fcrtpg.c?ref=2d11044217edd9168eafea1c8c60603f87b0e00d", "patch": "@@ -0,0 +1,47 @@\n+/* Register profiling startup and cleanup with Solaris CRTs.\n+   Copyright (C) 2015 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include <stdlib.h>\n+\n+extern void monstartup (char *, char *);\n+extern void _mcleanup (void);\n+\n+extern char _start[], _etext[];\n+\n+int __start_crt_compiler (int, char **);\n+\n+/* Since Solaris 11.x and Solaris 12, the system-provided CRTs provide a\n+   hook to invoke initialization code early during process startup.\n+   __start_crt_compiler is documented in crt1.o(5).  We use it to perform\n+   initialization for profiling as a substitute for the earlier separate\n+   gcrt1.o.  */\n+\n+int\n+__start_crt_compiler (int argc __attribute__ ((unused)),\n+\t\t      char **argv __attribute__ ((unused)))\n+{\n+  monstartup (_start, _etext);\n+  atexit (_mcleanup);\n+  return 0;\n+}"}, {"sha": "f6419580a9660ce36e878ae616f603cc43d7c489", "filename": "libgcc/config/sol2/gmon.c", "status": "renamed", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d11044217edd9168eafea1c8c60603f87b0e00d/libgcc%2Fconfig%2Fsol2%2Fgmon.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d11044217edd9168eafea1c8c60603f87b0e00d/libgcc%2Fconfig%2Fsol2%2Fgmon.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fsol2%2Fgmon.c?ref=2d11044217edd9168eafea1c8c60603f87b0e00d", "patch": "@@ -39,6 +39,7 @@\n \n #include \"tconfig.h\"\n #include \"tsystem.h\"\n+#include \"auto-target.h\"\n #include <fcntl.h>\t\t/* For creat.  */\n \n extern void monstartup (char *, char *);\n@@ -324,6 +325,11 @@ internal_mcount (char *selfpc, unsigned short *frompcindex)\n   frompcindex = (void *) __builtin_return_address (1);\n #endif\n \n+/* Only necessary without the Solaris CRTs or a proper gcrt1.o, otherwise\n+   crtpg.o or gcrt1.o take care of that.\n+\n+   FIXME: What about _init vs. _start on sparc?  */\n+#ifndef HAVE_SOLARIS_CRTS\n   if(!already_setup) {\n     extern char etext[];\n \n@@ -344,6 +350,7 @@ internal_mcount (char *selfpc, unsigned short *frompcindex)\n #endif\n     atexit (_mcleanup);\n   }\n+#endif /* !HAVE_SOLARIS_CRTS */\n   /* Check that we are profiling and that we aren't recursively invoked.  */\n   if (profiling) {\n     goto out;", "previous_filename": "libgcc/config/gmon-sol2.c"}, {"sha": "1f7324af21b8084a967df3afc54877411d486fb5", "filename": "libgcc/config/sol2/t-sol2", "status": "renamed", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d11044217edd9168eafea1c8c60603f87b0e00d/libgcc%2Fconfig%2Fsol2%2Ft-sol2", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d11044217edd9168eafea1c8c60603f87b0e00d/libgcc%2Fconfig%2Fsol2%2Ft-sol2", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fsol2%2Ft-sol2?ref=2d11044217edd9168eafea1c8c60603f87b0e00d", "patch": "@@ -16,8 +16,14 @@\n # along with GCC; see the file COPYING3.  If not see\n # <http://www.gnu.org/licenses/>.\n \n-# gmon build rule:\n-gmon.o:\t$(srcdir)/config/gmon-sol2.c\n+# crtp, crtpg build rules\n+crtp.o: $(srcdir)/config/sol2/crtp.c\n+\t$(gcc_compile) -c $<\n+crtpg.o: $(srcdir)/config/sol2/crtpg.c\n+\t$(gcc_compile) -c $<\n+\n+# gmon build rule\n+gmon.o:\t$(srcdir)/config/sol2/gmon.c\n \t$(gcc_compile) -c $<\n \n # Assemble startup files.", "previous_filename": "libgcc/config/t-sol2"}, {"sha": "78708c7f407778d2b633fe538abbf61e2743f7d7", "filename": "libgcc/configure", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d11044217edd9168eafea1c8c60603f87b0e00d/libgcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d11044217edd9168eafea1c8c60603f87b0e00d/libgcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfigure?ref=2d11044217edd9168eafea1c8c60603f87b0e00d", "patch": "@@ -4665,6 +4665,38 @@ fi\n $as_echo \"$libgcc_cv_mips_hard_float\" >&6; }\n esac\n \n+case ${host} in\n+*-*-solaris2*)\n+  # Check for system-provided CRTs on Solaris 11.x and Solaris 12.\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking system-provided CRTs on Solaris\" >&5\n+$as_echo_n \"checking system-provided CRTs on Solaris... \" >&6; }\n+if test \"${libgcc_cv_solaris_crts+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  libgcc_cv_solaris_crts=no\n+     libgcc_sysroot=\"`${CC} -print-sysroot`\"\n+     libgcc_libdir=\"$libgcc_sysroot/usr/lib\"\n+     # At the time they were added, gcrt1.o became a symlink for backwards\n+     # compatibility on x86, while crt1.o was added on sparc, so check for that.\n+     case ${host} in\n+       i?86-*-solaris2* | x86_64-*-solaris2*)\n+         if test -h \"$libgcc_libdir/gcrt1.o\"; then libgcc_cv_solaris_crts=yes; fi\n+\t ;;\n+       sparc*-*-solaris2*)\n+         if test -f \"$libgcc_libdir/crt1.o\"; then libgcc_cv_solaris_crts=yes; fi\n+\t ;;\n+     esac\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $libgcc_cv_solaris_crts\" >&5\n+$as_echo \"$libgcc_cv_solaris_crts\" >&6; }\n+  if test $libgcc_cv_solaris_crts = yes; then\n+\n+$as_echo \"#define HAVE_SOLARIS_CRTS 1\" >>confdefs.h\n+\n+  fi\n+  ;;\n+esac\n+\n # Determine the version of glibc, if any, used on the target.\n { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for target glibc version\" >&5\n $as_echo_n \"checking for target glibc version... \" >&6; }"}, {"sha": "9d831a769971954c58f8b85323d4ed697d5dfd5b", "filename": "libgcc/configure.ac", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d11044217edd9168eafea1c8c60603f87b0e00d/libgcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d11044217edd9168eafea1c8c60603f87b0e00d/libgcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfigure.ac?ref=2d11044217edd9168eafea1c8c60603f87b0e00d", "patch": "@@ -292,6 +292,31 @@ mips*-*-*)\n     [libgcc_cv_mips_hard_float=no])])\n esac\n \n+case ${host} in\n+*-*-solaris2*)\n+  # Check for system-provided CRTs on Solaris 11.x and Solaris 12.\n+  AC_CACHE_CHECK([system-provided CRTs on Solaris],\n+    \t\t [libgcc_cv_solaris_crts],\n+    [libgcc_cv_solaris_crts=no\n+     libgcc_sysroot=\"`${CC} -print-sysroot`\"\n+     libgcc_libdir=\"$libgcc_sysroot/usr/lib\"\n+     # At the time they were added, gcrt1.o became a symlink for backwards\n+     # compatibility on x86, while crt1.o was added on sparc, so check for that.\n+     case ${host} in\n+       i?86-*-solaris2* | x86_64-*-solaris2*)\n+         if test -h \"$libgcc_libdir/gcrt1.o\"; then libgcc_cv_solaris_crts=yes; fi\n+\t ;;\n+       sparc*-*-solaris2*)\n+         if test -f \"$libgcc_libdir/crt1.o\"; then libgcc_cv_solaris_crts=yes; fi\n+\t ;;\n+     esac])\n+  if test $libgcc_cv_solaris_crts = yes; then\n+    AC_DEFINE(HAVE_SOLARIS_CRTS, 1,\n+      [Define if the system-provided CRTs are present on Solaris.])\n+  fi\n+  ;;\n+esac\n+\n # Determine the version of glibc, if any, used on the target.\n AC_MSG_CHECKING([for target glibc version])\n AC_ARG_WITH([glibc-version],"}]}