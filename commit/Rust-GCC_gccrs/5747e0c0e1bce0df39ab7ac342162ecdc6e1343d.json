{"sha": "5747e0c0e1bce0df39ab7ac342162ecdc6e1343d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTc0N2UwYzBlMWJjZTBkZjM5YWI3YWMzNDIxNjJlY2RjNmUxMzQzZA==", "commit": {"author": {"name": "Xiong Hu Luo", "email": "luoxhu@linux.ibm.com", "date": "2019-08-14T02:18:33Z"}, "committer": {"name": "Xiong Hu Luo", "email": "luoxhu@gcc.gnu.org", "date": "2019-08-14T02:18:33Z"}, "message": "Enable math functions linking with static library for LTO\n\nIn LTO mode, if static library and dynamic library contains same\nfunction and both libraries are passed as arguments, linker will link\nthe function in dynamic library no matter the sequence.  This patch\nwill output LTO symbol node as UNDEF if BUILT_IN_NORMAL function FNDECL\nis a math function, then the function in static library will be linked\nfirst if its sequence is ahead of the dynamic library.\n\ngcc/ChangeLog\n\n2019-08-14  Xiong Hu Luo  <luoxhu@linux.ibm.com>\n\n\tPR lto/91287\n\t* builtins.c (builtin_with_linkage_p): New function.\n\t* builtins.h (builtin_with_linkage_p): New function.\n\t* symtab.c (write_symbol): Remove redundant assert.\n\t* lto-streamer-out.c (symtab_node::output_to_lto_symbol_table_p):\n\tRemove FIXME and use builtin_with_linkage_p.\n\nFrom-SVN: r274411", "tree": {"sha": "a0ffc5e9ca2f76f3a97f9789f8956e8d11d02f53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a0ffc5e9ca2f76f3a97f9789f8956e8d11d02f53"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5747e0c0e1bce0df39ab7ac342162ecdc6e1343d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5747e0c0e1bce0df39ab7ac342162ecdc6e1343d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5747e0c0e1bce0df39ab7ac342162ecdc6e1343d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5747e0c0e1bce0df39ab7ac342162ecdc6e1343d/comments", "author": {"login": "xionghul", "id": 4607154, "node_id": "MDQ6VXNlcjQ2MDcxNTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4607154?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xionghul", "html_url": "https://github.com/xionghul", "followers_url": "https://api.github.com/users/xionghul/followers", "following_url": "https://api.github.com/users/xionghul/following{/other_user}", "gists_url": "https://api.github.com/users/xionghul/gists{/gist_id}", "starred_url": "https://api.github.com/users/xionghul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xionghul/subscriptions", "organizations_url": "https://api.github.com/users/xionghul/orgs", "repos_url": "https://api.github.com/users/xionghul/repos", "events_url": "https://api.github.com/users/xionghul/events{/privacy}", "received_events_url": "https://api.github.com/users/xionghul/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "37987c39eb22e5666745fd5edcfc518d1e59ed72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37987c39eb22e5666745fd5edcfc518d1e59ed72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37987c39eb22e5666745fd5edcfc518d1e59ed72"}], "stats": {"total": 119, "additions": 109, "deletions": 10}, "files": [{"sha": "b8ee4ed4bdb001c545595303fe952aae47363d03", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5747e0c0e1bce0df39ab7ac342162ecdc6e1343d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5747e0c0e1bce0df39ab7ac342162ecdc6e1343d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5747e0c0e1bce0df39ab7ac342162ecdc6e1343d", "patch": "@@ -1,3 +1,12 @@\n+2019-08-14  Xiong Hu Luo  <luoxhu@linux.ibm.com>\n+\n+\tPR lto/91287\n+\t* builtins.c (builtin_with_linkage_p): New function.\n+\t* builtins.h (builtin_with_linkage_p): New function.\n+\t* symtab.c (write_symbol): Remove redundant assert.\n+\t* lto-streamer-out.c (symtab_node::output_to_lto_symbol_table_p):\n+\tRemove FIXME and use builtin_with_linkage_p.\n+\n 2019-08-13  Richard Sandiford  <richard.sandiford@arm.com>\n \n \tPR middle-end/91421"}, {"sha": "ece9f56e05208229d05bb8913d61b1bc811694b7", "filename": "gcc/builtins.c", "status": "modified", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5747e0c0e1bce0df39ab7ac342162ecdc6e1343d/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5747e0c0e1bce0df39ab7ac342162ecdc6e1343d/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=5747e0c0e1bce0df39ab7ac342162ecdc6e1343d", "patch": "@@ -11244,3 +11244,90 @@ target_char_cst_p (tree t, char *p)\n   *p = (char)tree_to_uhwi (t);\n   return true;\n }\n+\n+/* Return true if the builtin DECL is implemented in a standard library.\n+   Otherwise returns false which doesn't guarantee it is not (thus the list of\n+   handled builtins below may be incomplete).  */\n+\n+bool\n+builtin_with_linkage_p (tree decl)\n+{\n+  if (DECL_BUILT_IN_CLASS (decl) == BUILT_IN_NORMAL)\n+    switch (DECL_FUNCTION_CODE (decl))\n+    {\n+      CASE_FLT_FN (BUILT_IN_ACOS):\n+      CASE_FLT_FN (BUILT_IN_ACOSH):\n+      CASE_FLT_FN (BUILT_IN_ASIN):\n+      CASE_FLT_FN (BUILT_IN_ASINH):\n+      CASE_FLT_FN (BUILT_IN_ATAN):\n+      CASE_FLT_FN (BUILT_IN_ATANH):\n+      CASE_FLT_FN (BUILT_IN_ATAN2):\n+      CASE_FLT_FN (BUILT_IN_CBRT):\n+      CASE_FLT_FN (BUILT_IN_CEIL):\n+      CASE_FLT_FN_FLOATN_NX (BUILT_IN_CEIL):\n+      CASE_FLT_FN (BUILT_IN_COPYSIGN):\n+      CASE_FLT_FN_FLOATN_NX (BUILT_IN_COPYSIGN):\n+      CASE_FLT_FN (BUILT_IN_COS):\n+      CASE_FLT_FN (BUILT_IN_COSH):\n+      CASE_FLT_FN (BUILT_IN_ERF):\n+      CASE_FLT_FN (BUILT_IN_ERFC):\n+      CASE_FLT_FN (BUILT_IN_EXP):\n+      CASE_FLT_FN (BUILT_IN_EXP2):\n+      CASE_FLT_FN (BUILT_IN_EXPM1):\n+      CASE_FLT_FN (BUILT_IN_FABS):\n+      CASE_FLT_FN_FLOATN_NX (BUILT_IN_FABS):\n+      CASE_FLT_FN (BUILT_IN_FDIM):\n+      CASE_FLT_FN (BUILT_IN_FLOOR):\n+      CASE_FLT_FN_FLOATN_NX (BUILT_IN_FLOOR):\n+      CASE_FLT_FN (BUILT_IN_FMA):\n+      CASE_FLT_FN_FLOATN_NX (BUILT_IN_FMA):\n+      CASE_FLT_FN (BUILT_IN_FMAX):\n+      CASE_FLT_FN_FLOATN_NX (BUILT_IN_FMAX):\n+      CASE_FLT_FN (BUILT_IN_FMIN):\n+      CASE_FLT_FN_FLOATN_NX (BUILT_IN_FMIN):\n+      CASE_FLT_FN (BUILT_IN_FMOD):\n+      CASE_FLT_FN (BUILT_IN_FREXP):\n+      CASE_FLT_FN (BUILT_IN_HYPOT):\n+      CASE_FLT_FN (BUILT_IN_ILOGB):\n+      CASE_FLT_FN (BUILT_IN_LDEXP):\n+      CASE_FLT_FN (BUILT_IN_LGAMMA):\n+      CASE_FLT_FN (BUILT_IN_LLRINT):\n+      CASE_FLT_FN (BUILT_IN_LLROUND):\n+      CASE_FLT_FN (BUILT_IN_LOG):\n+      CASE_FLT_FN (BUILT_IN_LOG10):\n+      CASE_FLT_FN (BUILT_IN_LOG1P):\n+      CASE_FLT_FN (BUILT_IN_LOG2):\n+      CASE_FLT_FN (BUILT_IN_LOGB):\n+      CASE_FLT_FN (BUILT_IN_LRINT):\n+      CASE_FLT_FN (BUILT_IN_LROUND):\n+      CASE_FLT_FN (BUILT_IN_MODF):\n+      CASE_FLT_FN (BUILT_IN_NAN):\n+      CASE_FLT_FN (BUILT_IN_NEARBYINT):\n+      CASE_FLT_FN_FLOATN_NX (BUILT_IN_NEARBYINT):\n+      CASE_FLT_FN (BUILT_IN_NEXTAFTER):\n+      CASE_FLT_FN (BUILT_IN_NEXTTOWARD):\n+      CASE_FLT_FN (BUILT_IN_POW):\n+      CASE_FLT_FN (BUILT_IN_REMAINDER):\n+      CASE_FLT_FN (BUILT_IN_REMQUO):\n+      CASE_FLT_FN (BUILT_IN_RINT):\n+      CASE_FLT_FN_FLOATN_NX (BUILT_IN_RINT):\n+      CASE_FLT_FN (BUILT_IN_ROUND):\n+      CASE_FLT_FN_FLOATN_NX (BUILT_IN_ROUND):\n+      CASE_FLT_FN (BUILT_IN_SCALBLN):\n+      CASE_FLT_FN (BUILT_IN_SCALBN):\n+      CASE_FLT_FN (BUILT_IN_SIN):\n+      CASE_FLT_FN (BUILT_IN_SINH):\n+      CASE_FLT_FN (BUILT_IN_SINCOS):\n+      CASE_FLT_FN (BUILT_IN_SQRT):\n+      CASE_FLT_FN_FLOATN_NX (BUILT_IN_SQRT):\n+      CASE_FLT_FN (BUILT_IN_TAN):\n+      CASE_FLT_FN (BUILT_IN_TANH):\n+      CASE_FLT_FN (BUILT_IN_TGAMMA):\n+      CASE_FLT_FN (BUILT_IN_TRUNC):\n+      CASE_FLT_FN_FLOATN_NX (BUILT_IN_TRUNC):\n+\treturn true;\n+      default:\n+\tbreak;\n+    }\n+  return false;\n+}"}, {"sha": "66c9295ff4a67fa91324799fc54301d885348406", "filename": "gcc/builtins.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5747e0c0e1bce0df39ab7ac342162ecdc6e1343d/gcc%2Fbuiltins.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5747e0c0e1bce0df39ab7ac342162ecdc6e1343d/gcc%2Fbuiltins.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.h?ref=5747e0c0e1bce0df39ab7ac342162ecdc6e1343d", "patch": "@@ -150,5 +150,6 @@ extern internal_fn replacement_internal_fn (gcall *);\n \n extern void warn_string_no_nul (location_t, const char *, tree, tree);\n extern tree unterminated_array (tree, tree * = NULL, bool * = NULL);\n+extern bool builtin_with_linkage_p (tree);\n \n #endif /* GCC_BUILTINS_H */"}, {"sha": "d85b03a6c4a1b0f1edb462323c799301623f8674", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5747e0c0e1bce0df39ab7ac342162ecdc6e1343d/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5747e0c0e1bce0df39ab7ac342162ecdc6e1343d/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=5747e0c0e1bce0df39ab7ac342162ecdc6e1343d", "patch": "@@ -2642,12 +2642,6 @@ write_symbol (struct streamer_tree_cache_d *cache,\n   const char *comdat;\n   unsigned char c;\n \n-  gcc_checking_assert (TREE_PUBLIC (t)\n-\t\t       && (TREE_CODE (t) != FUNCTION_DECL\n-\t\t\t   || !fndecl_built_in_p (t))\n-\t\t       && !DECL_ABSTRACT_P (t)\n-\t\t       && (!VAR_P (t) || !DECL_HARD_REGISTER (t)));\n-\n   gcc_assert (VAR_OR_FUNCTION_DECL_P (t));\n \n   name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (t));"}, {"sha": "ee9723c34534ff64540ced7c38e30b45c329f47c", "filename": "gcc/symtab.c", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5747e0c0e1bce0df39ab7ac342162ecdc6e1343d/gcc%2Fsymtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5747e0c0e1bce0df39ab7ac342162ecdc6e1343d/gcc%2Fsymtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsymtab.c?ref=5747e0c0e1bce0df39ab7ac342162ecdc6e1343d", "patch": "@@ -2375,10 +2375,18 @@ symtab_node::output_to_lto_symbol_table_p (void)\n      first place.  */\n   if (VAR_P (decl) && DECL_HARD_REGISTER (decl))\n     return false;\n-  /* FIXME: Builtins corresponding to real functions probably should have\n-     symbol table entries.  */\n-  if (TREE_CODE (decl) == FUNCTION_DECL && fndecl_built_in_p (decl))\n-    return false;\n+  if (TREE_CODE (decl) == FUNCTION_DECL && !definition\n+      && fndecl_built_in_p (decl))\n+    {\n+      /* Builtins like those for most math functions have actual implementations\n+\t in libraries so make sure to output references into the symbol table to\n+\t make those libraries referenced.  Note this is incomplete handling for\n+\t now and only covers math functions.  */\n+      if (builtin_with_linkage_p (decl))\n+\treturn true;\n+      else\n+\treturn false;\n+    }\n \n   /* We have real symbol that should be in symbol table.  However try to trim\n      down the refernces to libraries bit more because linker will otherwise"}]}