{"sha": "628a15343e494e457c647347e879c69a62016e0c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjI4YTE1MzQzZTQ5NGU0NTdjNjQ3MzQ3ZTg3OWM2OWE2MjAxNmUwYw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-04-04T19:34:18Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-04-04T19:34:18Z"}, "message": "re PR c++/85146 (ICE with __direct_bases for declared but not defined struct)\n\n\tPR c++/85146\n\t* cp-tree.h (calculate_bases, calculate_direct_bases): Add complain\n\targument.\n\t* semantics.c (calculate_bases): Add complain argument.  Use\n\tcomplete_type_or_maybe_complain instead of just complete_type and\n\treturn an empty vector if it fails.  Move make_tree_vector () call\n\tafter early return.  Formatting fixes.\n\t(calculate_direct_bases): Likewise.  Call release_tree_vector at the\n\tend.\n\t(dfs_calculate_bases_post, calculate_bases_helper): Formatting fixes.\n\t* pt.c (tsubst_pack_expansion): Adjust calculate_bases and\n\tcalculate_direct_bases callers, formatting fixes.\n\n\t* g++.dg/ext/bases2.C: Expect extra error diagnostics.\n\t* g++.dg/ext/bases3.C: New test.\n\nFrom-SVN: r259101", "tree": {"sha": "be0e52b9e5a853ce7d421833b2bda0d3e3c369c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be0e52b9e5a853ce7d421833b2bda0d3e3c369c3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/628a15343e494e457c647347e879c69a62016e0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/628a15343e494e457c647347e879c69a62016e0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/628a15343e494e457c647347e879c69a62016e0c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/628a15343e494e457c647347e879c69a62016e0c/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "001db6cf52711f785459558508ca6fa97e10bcae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/001db6cf52711f785459558508ca6fa97e10bcae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/001db6cf52711f785459558508ca6fa97e10bcae"}], "stats": {"total": 131, "additions": 76, "deletions": 55}, "files": [{"sha": "71bde9886301c950a583a2277dc58d25b6a91ba3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/628a15343e494e457c647347e879c69a62016e0c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/628a15343e494e457c647347e879c69a62016e0c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=628a15343e494e457c647347e879c69a62016e0c", "patch": "@@ -1,3 +1,18 @@\n+2018-04-04  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/85146\n+\t* cp-tree.h (calculate_bases, calculate_direct_bases): Add complain\n+\targument.\n+\t* semantics.c (calculate_bases): Add complain argument.  Use\n+\tcomplete_type_or_maybe_complain instead of just complete_type and\n+\treturn an empty vector if it fails.  Move make_tree_vector () call\n+\tafter early return.  Formatting fixes.\n+\t(calculate_direct_bases): Likewise.  Call release_tree_vector at the\n+\tend.\n+\t(dfs_calculate_bases_post, calculate_bases_helper): Formatting fixes.\n+\t* pt.c (tsubst_pack_expansion): Adjust calculate_bases and\n+\tcalculate_direct_bases callers, formatting fixes.\n+\n 2018-04-04  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/85006 - -fconcepts ICE with A<auto...> return type"}, {"sha": "2b49c6eb03fcea77f208dbc1108f11df9eb0d873", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/628a15343e494e457c647347e879c69a62016e0c/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/628a15343e494e457c647347e879c69a62016e0c/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=628a15343e494e457c647347e879c69a62016e0c", "patch": "@@ -6870,9 +6870,9 @@ extern cp_expr finish_id_expression\t\t(tree, tree, tree,\n                                                  location_t);\n extern tree finish_typeof\t\t\t(tree);\n extern tree finish_underlying_type\t        (tree);\n-extern tree calculate_bases                     (tree);\n+extern tree calculate_bases                     (tree, tsubst_flags_t);\n extern tree finish_bases                        (tree, bool);\n-extern tree calculate_direct_bases              (tree);\n+extern tree calculate_direct_bases              (tree, tsubst_flags_t);\n extern tree finish_offsetof\t\t\t(tree, tree, location_t);\n extern void finish_decl_cleanup\t\t\t(tree, tree);\n extern void finish_eh_cleanup\t\t\t(tree);"}, {"sha": "eafc110dbde9578b933cadf022425c0c34910c7a", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/628a15343e494e457c647347e879c69a62016e0c/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/628a15343e494e457c647347e879c69a62016e0c/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=628a15343e494e457c647347e879c69a62016e0c", "patch": "@@ -11743,15 +11743,18 @@ tsubst_pack_expansion (tree t, tree args, tsubst_flags_t complain,\n       int level = 0;\n \n       if (TREE_CODE (parm_pack) == BASES)\n-       {\n-\t gcc_assert (parm_pack == pattern);\n-         if (BASES_DIRECT (parm_pack))\n-           return calculate_direct_bases (tsubst_expr (BASES_TYPE (parm_pack),\n-                                                        args, complain, in_decl, false));\n-         else\n-           return calculate_bases (tsubst_expr (BASES_TYPE (parm_pack),\n-                                                 args, complain, in_decl, false));\n-       }\n+\t{\n+\t  gcc_assert (parm_pack == pattern);\n+\t  if (BASES_DIRECT (parm_pack))\n+\t    return calculate_direct_bases (tsubst_expr (BASES_TYPE (parm_pack),\n+\t\t\t\t\t\t\targs, complain,\n+\t\t\t\t\t\t\tin_decl, false),\n+\t\t\t\t\t   complain);\n+\t  else\n+\t    return calculate_bases (tsubst_expr (BASES_TYPE (parm_pack),\n+\t\t\t\t\t\t args, complain, in_decl,\n+\t\t\t\t\t\t false), complain);\n+\t}\n       else if (builtin_pack_call_p (parm_pack))\n \t{\n \t  /* ??? Support use in other patterns.  */"}, {"sha": "59cac77f6b70a4a67e0a39cccd853cd7706c6164", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 27, "deletions": 43, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/628a15343e494e457c647347e879c69a62016e0c/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/628a15343e494e457c647347e879c69a62016e0c/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=628a15343e494e457c647347e879c69a62016e0c", "patch": "@@ -3885,49 +3885,36 @@ finish_underlying_type (tree type)\n }\n \n /* Implement the __direct_bases keyword: Return the direct base classes\n-   of type */\n+   of type.  */\n \n tree\n-calculate_direct_bases (tree type)\n+calculate_direct_bases (tree type, tsubst_flags_t complain)\n {\n-  vec<tree, va_gc> *vector = make_tree_vector();\n-  tree bases_vec = NULL_TREE;\n-  vec<tree, va_gc> *base_binfos;\n-  tree binfo;\n-  unsigned i;\n-\n-  complete_type (type);\n-\n-  if (!NON_UNION_CLASS_TYPE_P (type))\n+  if (!complete_type_or_maybe_complain (type, NULL_TREE, complain)\n+      || !NON_UNION_CLASS_TYPE_P (type))\n     return make_tree_vec (0);\n \n-  base_binfos = BINFO_BASE_BINFOS (TYPE_BINFO (type));\n+  vec<tree, va_gc> *vector = make_tree_vector ();\n+  vec<tree, va_gc> *base_binfos = BINFO_BASE_BINFOS (TYPE_BINFO (type));\n+  tree binfo;\n+  unsigned i;\n \n   /* Virtual bases are initialized first */\n   for (i = 0; base_binfos->iterate (i, &binfo); i++)\n-    {\n-      if (BINFO_VIRTUAL_P (binfo))\n-       {\n-         vec_safe_push (vector, binfo);\n-       }\n-    }\n+    if (BINFO_VIRTUAL_P (binfo))\n+      vec_safe_push (vector, binfo);\n \n   /* Now non-virtuals */\n   for (i = 0; base_binfos->iterate (i, &binfo); i++)\n-    {\n-      if (!BINFO_VIRTUAL_P (binfo))\n-       {\n-         vec_safe_push (vector, binfo);\n-       }\n-    }\n-\n+    if (!BINFO_VIRTUAL_P (binfo))\n+      vec_safe_push (vector, binfo);\n \n-  bases_vec = make_tree_vec (vector->length ());\n+  tree bases_vec = make_tree_vec (vector->length ());\n \n   for (i = 0; i < vector->length (); ++i)\n-    {\n-      TREE_VEC_ELT (bases_vec, i) = BINFO_TYPE ((*vector)[i]);\n-    }\n+    TREE_VEC_ELT (bases_vec, i) = BINFO_TYPE ((*vector)[i]);\n+\n+  release_tree_vector (vector);\n   return bases_vec;\n }\n \n@@ -3949,17 +3936,15 @@ dfs_calculate_bases_post (tree binfo, void *data_)\n {\n   vec<tree, va_gc> **data = ((vec<tree, va_gc> **) data_);\n   if (!BINFO_VIRTUAL_P (binfo))\n-    {\n-      vec_safe_push (*data, BINFO_TYPE (binfo));\n-    }\n+    vec_safe_push (*data, BINFO_TYPE (binfo));\n   return NULL_TREE;\n }\n \n /* Calculates the morally non-virtual base classes of a class */\n static vec<tree, va_gc> *\n calculate_bases_helper (tree type)\n {\n-  vec<tree, va_gc> *vector = make_tree_vector();\n+  vec<tree, va_gc> *vector = make_tree_vector ();\n \n   /* Now add non-virtual base classes in order of construction */\n   if (TYPE_BINFO (type))\n@@ -3969,26 +3954,25 @@ calculate_bases_helper (tree type)\n }\n \n tree\n-calculate_bases (tree type)\n+calculate_bases (tree type, tsubst_flags_t complain)\n {\n-  vec<tree, va_gc> *vector = make_tree_vector();\n+  if (!complete_type_or_maybe_complain (type, NULL_TREE, complain)\n+      || !NON_UNION_CLASS_TYPE_P (type))\n+    return make_tree_vec (0);\n+\n+  vec<tree, va_gc> *vector = make_tree_vector ();\n   tree bases_vec = NULL_TREE;\n   unsigned i;\n   vec<tree, va_gc> *vbases;\n   vec<tree, va_gc> *nonvbases;\n   tree binfo;\n \n-  complete_type (type);\n-\n-  if (!NON_UNION_CLASS_TYPE_P (type))\n-    return make_tree_vec (0);\n-\n   /* First go through virtual base classes */\n   for (vbases = CLASSTYPE_VBASECLASSES (type), i = 0;\n        vec_safe_iterate (vbases, i, &binfo); i++)\n     {\n-      vec<tree, va_gc> *vbase_bases;\n-      vbase_bases = calculate_bases_helper (BINFO_TYPE (binfo));\n+      vec<tree, va_gc> *vbase_bases\n+\t= calculate_bases_helper (BINFO_TYPE (binfo));\n       vec_safe_splice (vector, vbase_bases);\n       release_tree_vector (vbase_bases);\n     }\n@@ -4002,7 +3986,7 @@ calculate_bases (tree type)\n   if (vector->length () > 1)\n     {\n       /* Last element is entire class, so don't copy */\n-      bases_vec = make_tree_vec (vector->length() - 1);\n+      bases_vec = make_tree_vec (vector->length () - 1);\n \n       for (i = 0; i < vector->length () - 1; ++i)\n \tTREE_VEC_ELT (bases_vec, i) = (*vector)[i];"}, {"sha": "7806777a3637a3a3bfc1b8f2394286669456a1d6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/628a15343e494e457c647347e879c69a62016e0c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/628a15343e494e457c647347e879c69a62016e0c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=628a15343e494e457c647347e879c69a62016e0c", "patch": "@@ -1,3 +1,9 @@\n+2018-04-04  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/85146\n+\t* g++.dg/ext/bases2.C: Expect extra error diagnostics.\n+\t* g++.dg/ext/bases3.C: New test.\n+\n 2018-04-04  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n \n \tPR target/85203"}, {"sha": "81c33fef7367317efff77e88cda1dc6ae3b1c694", "filename": "gcc/testsuite/g++.dg/ext/bases2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/628a15343e494e457c647347e879c69a62016e0c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbases2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/628a15343e494e457c647347e879c69a62016e0c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbases2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbases2.C?ref=628a15343e494e457c647347e879c69a62016e0c", "patch": "@@ -5,7 +5,7 @@ template<typename...> struct A {};\n \n template<typename T> struct B\n {\n-  typedef A<__bases(T)...> C;\n+  typedef A<__bases(T)...> C;\t// { dg-error \"incomplete type\" }\n };\n \n struct X {};"}, {"sha": "d4c43d483279062efcadc3bebe57ec97e8e81c46", "filename": "gcc/testsuite/g++.dg/ext/bases3.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/628a15343e494e457c647347e879c69a62016e0c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbases3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/628a15343e494e457c647347e879c69a62016e0c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbases3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbases3.C?ref=628a15343e494e457c647347e879c69a62016e0c", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/85146\n+// { dg-do compile { target c++11 } }\n+\n+template<typename...> struct A {};\n+\n+template<typename T> struct B\n+{\n+  typedef A<__direct_bases(T)...> C;\t// { dg-error \"incomplete type\" }\n+};\n+\n+struct X;\n+\n+B<X> b;"}]}