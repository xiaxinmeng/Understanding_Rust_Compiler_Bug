{"sha": "048c86160456fc8b165ec3a9761166896d17d566", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQ4Yzg2MTYwNDU2ZmM4YjE2NWVjM2E5NzYxMTY2ODk2ZDE3ZDU2Ng==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@multimania.com", "date": "2002-06-15T00:47:53Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-06-15T00:47:53Z"}, "message": "* loop.c (for_each_insn_in_loop): Fix formatting and comments.\n\nFrom-SVN: r54633", "tree": {"sha": "1ac5195ffc0714d0aa1bded32ae53682474e6221", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ac5195ffc0714d0aa1bded32ae53682474e6221"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/048c86160456fc8b165ec3a9761166896d17d566", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/048c86160456fc8b165ec3a9761166896d17d566", "html_url": "https://github.com/Rust-GCC/gccrs/commit/048c86160456fc8b165ec3a9761166896d17d566", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/048c86160456fc8b165ec3a9761166896d17d566/comments", "author": null, "committer": null, "parents": [{"sha": "0b0b07504cd9fa9f95bbdb88a2a555960399713c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b0b07504cd9fa9f95bbdb88a2a555960399713c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b0b07504cd9fa9f95bbdb88a2a555960399713c"}], "stats": {"total": 19, "additions": 10, "deletions": 9}, "files": [{"sha": "2bb93edc14c3ada987b72f6841137341182e11b9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/048c86160456fc8b165ec3a9761166896d17d566/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/048c86160456fc8b165ec3a9761166896d17d566/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=048c86160456fc8b165ec3a9761166896d17d566", "patch": "@@ -1,3 +1,7 @@\n+2002-06-14  Eric Botcazou  <ebotcazou@multimania.com>\n+ \n+\t* loop.c (for_each_insn_in_loop): Fix formatting and comments.\n+\n 2002-06-14  Eric Botcazou  <ebotcazou@multimania.com>\n \n \tPR c/6677"}, {"sha": "d3b62af6ceb1ace315cb4f5ab83b9dfd409cbba5", "filename": "gcc/loop.c", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/048c86160456fc8b165ec3a9761166896d17d566/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/048c86160456fc8b165ec3a9761166896d17d566/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=048c86160456fc8b165ec3a9761166896d17d566", "patch": "@@ -4247,8 +4247,8 @@ static rtx addr_placeholder;\n    LOOP and INSN parameters pass MAYBE_MULTIPLE and NOT_EVERY_ITERATION to the\n    callback.\n \n-   NOT_EVERY_ITERATION if current insn is not executed at least once for every\n-   loop iteration except for the last one.\n+   NOT_EVERY_ITERATION is 1 if current insn is not known to be executed at\n+   least once for every loop iteration except for the last one.\n \n    MAYBE_MULTIPLE is 1 if current insn may be executed more than once for every\n    loop iteration.\n@@ -4258,8 +4258,6 @@ for_each_insn_in_loop (loop, fncall)\n      struct loop *loop;\n      loop_insn_callback fncall;\n {\n-  /* This is 1 if current insn is not executed at least once for every loop\n-     iteration.  */\n   int not_every_iteration = 0;\n   int maybe_multiple = 0;\n   int past_loop_latch = 0;\n@@ -4271,8 +4269,7 @@ for_each_insn_in_loop (loop, fncall)\n   if (prev_nonnote_insn (loop->scan_start) != prev_nonnote_insn (loop->start))\n     maybe_multiple = back_branch_in_range_p (loop, loop->scan_start);\n \n-  /* Scan through loop to find all possible bivs.  */\n-\n+  /* Scan through loop and update NOT_EVERY_ITERATION and MAYBE_MULTIPLE. */\n   for (p = next_insn_in_loop (loop, loop->scan_start);\n        p != NULL_RTX;\n        p = next_insn_in_loop (loop, p))\n@@ -4329,9 +4326,9 @@ for_each_insn_in_loop (loop, fncall)\n          This can be any kind of jump, since we want to know if insns\n          will be executed if the loop is executed.  */\n \t  && !(JUMP_LABEL (p) == loop->top\n-\t     && ((NEXT_INSN (NEXT_INSN (p)) == loop->end\n-\t\t  && any_uncondjump_p (p))\n-\t\t || (NEXT_INSN (p) == loop->end && any_condjump_p (p)))))\n+\t       && ((NEXT_INSN (NEXT_INSN (p)) == loop->end\n+\t\t    && any_uncondjump_p (p))\n+\t\t   || (NEXT_INSN (p) == loop->end && any_condjump_p (p)))))\n \t{\n \t  rtx label = 0;\n "}]}