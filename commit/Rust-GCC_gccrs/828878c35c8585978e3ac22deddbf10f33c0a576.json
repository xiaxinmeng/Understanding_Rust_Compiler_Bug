{"sha": "828878c35c8585978e3ac22deddbf10f33c0a576", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODI4ODc4YzM1Yzg1ODU5NzhlM2FjMjJkZWRkYmYxMGYzM2MwYTU3Ng==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-03-18T17:57:24Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-03-20T14:19:54Z"}, "message": "c++: Include the constraint parameter mapping in diagnostic constraint contexts\n\nWhen diagnosing a constraint error, we currently try to print the constraint\ninside a diagnostic constraint context with its template arguments substituted\nin.  If substitution fails, then we instead just print the dependent form, as in\nthe test case below:\n\n  .../diagnostic6.C:14:15: error: static assertion failed\n     14 | static_assert(E<int>); // { dg-error \"static assertion failed|not a class\" }\n        |               ^~~~~~\n  .../diagnostic6.C:14:15: note: constraints not satisfied\n  .../diagnostic6.C:4:11:   required for the satisfaction of \u2018C<T>\u2019\n  .../diagnostic6.C:8:11:   required for the satisfaction of \u2018D<typename T::type>\u2019\n  .../diagnostic6.C:14:15: error: \u2018int\u2019 is not a class, struct, or union type\n\nBut printing just the dependent form sometimes makes it difficult to understand\nthe underlying failure.  In the above example, for instance, there's no\nindication of how the template argument 'int' relates to either of the 'T's.\n\nThis patch improves the situation by changing these diagnostics to always print\nthe dependent form of the constraint, and alongside it the (preferably\nsubstituted) constraint parameter mapping.  So with the same test case below we\nnow get:\n\n  .../diagnostic6.C:14:15: error: static assertion failed\n     14 | static_assert(E<int>); // { dg-error \"static assertion failed|not a class\" }\n        |               ^~~~~~\n  .../diagnostic6.C:14:15: note: constraints not satisfied\n  .../diagnostic6.C:4:11:   required for the satisfaction of \u2018C<T>\u2019 [with T = typename T::type]\n  .../diagnostic6.C:8:11:   required for the satisfaction of \u2018D<typename T::type>\u2019 [with T = int]\n  .../diagnostic6.C:14:15: error: \u2018int\u2019 is not a class, struct, or union type\n\nThis change arguably makes it easier to figure out what's going on whenever a\nconstraint fails due to substitution creating an invalid type rather than\nfailing due to the constraint evaluating to false.\n\ngcc/cp/ChangeLog:\n\n\t* cxx-pretty-print.c (pp_cxx_parameter_mapping): Make extern.  Move\n\tthe \"[with ]\" bits to here from ...\n\t(pp_cxx_atomic_constraint): ... here.\n\t* cxx-pretty-print.h (pp_cxx_parameter_mapping): Declare.\n\t* error.c (rebuild_concept_check): Delete.\n\t(print_concept_check_info): Print the dependent form of the constraint and the\n\tpreferably substituted parameter mapping alongside it.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/concepts/diagnostic6.C: New test.", "tree": {"sha": "96205f9de2a52109d19f6c3b85990ff00953daf3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/96205f9de2a52109d19f6c3b85990ff00953daf3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/828878c35c8585978e3ac22deddbf10f33c0a576", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/828878c35c8585978e3ac22deddbf10f33c0a576", "html_url": "https://github.com/Rust-GCC/gccrs/commit/828878c35c8585978e3ac22deddbf10f33c0a576", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/828878c35c8585978e3ac22deddbf10f33c0a576/comments", "author": null, "committer": null, "parents": [{"sha": "261014a1be433a27af75fb7eecc77231261d84f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/261014a1be433a27af75fb7eecc77231261d84f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/261014a1be433a27af75fb7eecc77231261d84f7"}], "stats": {"total": 82, "additions": 48, "deletions": 34}, "files": [{"sha": "0e01056aaeefd81a39951e81accd051dcbcef70d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/828878c35c8585978e3ac22deddbf10f33c0a576/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/828878c35c8585978e3ac22deddbf10f33c0a576/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=828878c35c8585978e3ac22deddbf10f33c0a576", "patch": "@@ -1,3 +1,13 @@\n+2020-03-20  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* cxx-pretty-print.c (pp_cxx_parameter_mapping): Make extern.  Move\n+\tthe \"[with ]\" bits to here from ...\n+\t(pp_cxx_atomic_constraint): ... here.\n+\t* cxx-pretty-print.h (pp_cxx_parameter_mapping): Declare.\n+\t* error.c (rebuild_concept_check): Delete.\n+\t(print_concept_check_info): Print the dependent form of the constraint and the\n+\tpreferably substituted parameter mapping alongside it.\n+\n 2020-03-19  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/94175"}, {"sha": "840b5a8db8ba6672334ec883fc61474d312a5c1d", "filename": "gcc/cp/cxx-pretty-print.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/828878c35c8585978e3ac22deddbf10f33c0a576/gcc%2Fcp%2Fcxx-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/828878c35c8585978e3ac22deddbf10f33c0a576/gcc%2Fcp%2Fcxx-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcxx-pretty-print.c?ref=828878c35c8585978e3ac22deddbf10f33c0a576", "patch": "@@ -2878,9 +2878,14 @@ pp_cxx_check_constraint (cxx_pretty_printer *pp, tree t)\n /* Output the \"[with ...]\" clause for a parameter mapping of an atomic\n    constraint.   */\n \n-static void\n+void\n pp_cxx_parameter_mapping (cxx_pretty_printer *pp, tree map)\n {\n+  pp_cxx_whitespace (pp);\n+  pp_cxx_left_bracket (pp);\n+  pp->translate_string (\"with\");\n+  pp_cxx_whitespace (pp);\n+\n   for (tree p = map; p; p = TREE_CHAIN (p))\n     {\n       tree parm = TREE_VALUE (p);\n@@ -2903,6 +2908,8 @@ pp_cxx_parameter_mapping (cxx_pretty_printer *pp, tree map)\n       if (TREE_CHAIN (p) != NULL_TREE)\n \tpp_cxx_separate_with (pp, ';');\n     }\n+\n+  pp_cxx_right_bracket (pp);\n }\n \n void\n@@ -2914,14 +2921,7 @@ pp_cxx_atomic_constraint (cxx_pretty_printer *pp, tree t)\n   /* Emit the parameter mapping.  */\n   tree map = ATOMIC_CONSTR_MAP (t);\n   if (map && map != error_mark_node)\n-    {\n-      pp_cxx_whitespace (pp);\n-      pp_cxx_left_bracket (pp);\n-      pp->translate_string (\"with\");\n-      pp_cxx_whitespace (pp);\n-      pp_cxx_parameter_mapping (pp, map);\n-      pp_cxx_right_bracket (pp);\n-   }\n+    pp_cxx_parameter_mapping (pp, map);\n }\n \n void"}, {"sha": "494f3fdde597477c553d9b0e8c786ce86b7c00ac", "filename": "gcc/cp/cxx-pretty-print.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/828878c35c8585978e3ac22deddbf10f33c0a576/gcc%2Fcp%2Fcxx-pretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/828878c35c8585978e3ac22deddbf10f33c0a576/gcc%2Fcp%2Fcxx-pretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcxx-pretty-print.h?ref=828878c35c8585978e3ac22deddbf10f33c0a576", "patch": "@@ -112,5 +112,6 @@ void pp_cxx_conjunction (cxx_pretty_printer *, tree);\n void pp_cxx_disjunction (cxx_pretty_printer *, tree);\n void pp_cxx_constraint (cxx_pretty_printer *, tree);\n void pp_cxx_constrained_type_spec (cxx_pretty_printer *, tree);\n+void pp_cxx_parameter_mapping (cxx_pretty_printer *, tree);\n \n #endif /* GCC_CXX_PRETTY_PRINT_H */"}, {"sha": "61d1218dc9006270f815dc46a763bbe165095e24", "filename": "gcc/cp/error.c", "status": "modified", "additions": 10, "deletions": 25, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/828878c35c8585978e3ac22deddbf10f33c0a576/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/828878c35c8585978e3ac22deddbf10f33c0a576/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=828878c35c8585978e3ac22deddbf10f33c0a576", "patch": "@@ -3680,27 +3680,6 @@ print_location (diagnostic_context *context, location_t loc)\n                  \"locus\", xloc.file, xloc.line);\n }\n \n-/* Instantiate the concept check for the purpose of diagnosing an error.  */\n-\n-static tree\n-rebuild_concept_check (tree expr, tree map, tree args)\n-{\n-  /* Instantiate the parameter mapping for the template-id.  */\n-  map = tsubst_parameter_mapping (map, args, tf_none, NULL_TREE);\n-  if (map == error_mark_node)\n-    return error_mark_node;\n-  args = get_mapped_args (map);\n-\n-  /* Rebuild the template id using substituted arguments. Substituting\n-     directly through the expression will trigger recursive satisfaction,\n-     so don't do that.  */\n-  tree id = unpack_concept_check (expr);\n-  args = tsubst_template_args (TREE_OPERAND (id, 1), args, tf_none, NULL_TREE);\n-  if (args == error_mark_node)\n-    return error_mark_node;\n-  return build_nt (TEMPLATE_ID_EXPR, TREE_OPERAND (id, 0), args);\n-}\n-\n static void\n print_constrained_decl_info (diagnostic_context *context, tree decl)\n {\n@@ -3717,12 +3696,18 @@ print_concept_check_info (diagnostic_context *context, tree expr, tree map, tree\n   tree tmpl = TREE_OPERAND (id, 0);\n   if (OVL_P (tmpl))\n     tmpl = OVL_FIRST (tmpl);\n-  tree check = rebuild_concept_check (expr, map, args);\n-  if (check == error_mark_node)\n-    check = expr;\n \n   print_location (context, DECL_SOURCE_LOCATION (tmpl));\n-  pp_verbatim (context->printer, \"required for the satisfaction of %qE\\n\", check);\n+\n+  cxx_pretty_printer *pp = (cxx_pretty_printer *)context->printer;\n+  pp_verbatim (pp, \"required for the satisfaction of %qE\", expr);\n+  if (map && map != error_mark_node)\n+    {\n+      tree subst_map = tsubst_parameter_mapping (map, args, tf_none, NULL_TREE);\n+      pp_cxx_parameter_mapping (pp, (subst_map != error_mark_node\n+\t\t\t\t     ? subst_map : map));\n+    }\n+  pp_newline (pp);\n }\n \n /* Diagnose the entry point into the satisfaction error. Returns the next"}, {"sha": "12076d56e14ce5d226b11e709621be1610470e9a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/828878c35c8585978e3ac22deddbf10f33c0a576/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/828878c35c8585978e3ac22deddbf10f33c0a576/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=828878c35c8585978e3ac22deddbf10f33c0a576", "patch": "@@ -1,3 +1,7 @@\n+2020-03-20  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* g++.dg/concepts/diagnostic6.C: New test.\n+\n 2020-03-20  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n \n \t* gcc.target/arm/mve/intrinsics/vabdq_x_f16.c: New test."}, {"sha": "06b17caccbe76a8ccb58f0bd6e188334ef1cff05", "filename": "gcc/testsuite/g++.dg/concepts/diagnostic6.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/828878c35c8585978e3ac22deddbf10f33c0a576/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdiagnostic6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/828878c35c8585978e3ac22deddbf10f33c0a576/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdiagnostic6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdiagnostic6.C?ref=828878c35c8585978e3ac22deddbf10f33c0a576", "patch": "@@ -0,0 +1,14 @@\n+// { dg-do compile { target c++2a } }\n+\n+template<typename T>\n+  concept C = requires (T t) { t + 0; };\n+// { dg-message \"satisfaction of .C<T>. .with T = typename T::type.\" \"\" { target *-*-* } .-1 }\n+\n+template<typename T>\n+  concept D = C<T>;\n+// { dg-message \"satisfaction of .D<typename T::type>. .with T = int.\" \"\" { target *-*-* } .-1 }\n+\n+template<typename T>\n+  concept E = D<typename T::type>;\n+\n+static_assert(E<int>); // { dg-error \"static assertion failed|not a class\" }"}]}