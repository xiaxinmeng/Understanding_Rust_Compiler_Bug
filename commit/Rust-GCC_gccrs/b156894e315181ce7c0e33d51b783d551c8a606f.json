{"sha": "b156894e315181ce7c0e33d51b783d551c8a606f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjE1Njg5NGUzMTUxODFjZTdjMGUzM2Q1MWI3ODNkNTUxYzhhNjA2Zg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-10-21T01:07:39Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-10-21T01:07:39Z"}, "message": "Simplify and fix handling of errno.h.\n\nNow it no longer thinks errno.h always needs fixing.\n(write_lbrac, write_rbrac):  Only write\nextern \"C\" if that specifically is needed.\n\nFrom-SVN: r5848", "tree": {"sha": "088e04aaf08f162e50debcf654ce6a415ecbc1ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/088e04aaf08f162e50debcf654ce6a415ecbc1ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b156894e315181ce7c0e33d51b783d551c8a606f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b156894e315181ce7c0e33d51b783d551c8a606f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b156894e315181ce7c0e33d51b783d551c8a606f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b156894e315181ce7c0e33d51b783d551c8a606f/comments", "author": null, "committer": null, "parents": [{"sha": "b3b0896644a83afcb8b0106cf83964de89ffd0ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3b0896644a83afcb8b0106cf83964de89ffd0ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3b0896644a83afcb8b0106cf83964de89ffd0ef"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "c05d4de0d3ca59482c728d8dcffdc73bdb276ed5", "filename": "gcc/fix-header.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b156894e315181ce7c0e33d51b783d551c8a606f/gcc%2Ffix-header.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b156894e315181ce7c0e33d51b783d551c8a606f/gcc%2Ffix-header.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffix-header.c?ref=b156894e315181ce7c0e33d51b783d551c8a606f", "patch": "@@ -85,7 +85,7 @@ sstring buf;\n int verbose = 0;\n int partial_count = 0;\n int missing_extern_C_count = 0;\n-int missing_extra_stuff = 0;\n+int missing_errno = 0;\n \n #include \"xsys-protos.h\"\n \n@@ -113,9 +113,6 @@ int seen_S_IFIFO = 0, seen_S_ISFIFO = 0;\n int seen_S_IFLNK = 0, seen_S_ISLNK  = 0;\n int seen_S_IFREG = 0, seen_S_ISREG  = 0;\n \n-/* The following are only used when handling errno.h */\n-int seen_errno = 0;\n-\n /* Wrapper around free, to avoid prototype clashes. */\n \n void xfree (ptr)\n@@ -164,7 +161,9 @@ int required_unseen_count;\n int \n write_lbrac ()\n {\n-  fprintf (outf, \"#ifdef __cplusplus\\nextern \\\"C\\\" {\\n#endif\\n\");\n+  \n+  if (missing_extern_C_count + required_unseen_count > 0)\n+    fprintf (outf, \"#ifdef __cplusplus\\nextern \\\"C\\\" {\\n#endif\\n\");\n \n   if (partial_count)\n     {\n@@ -210,7 +209,7 @@ recognized_macro (fname)\n   switch (special_file_handling)\n     {\n     case errno_special:\n-      if (strcmp (fname, \"errno\") == 0) seen_errno++;\n+      if (strcmp (fname, \"errno\") == 0) missing_errno = 0;\n       break;\n     case sys_stat_special:\n       if (fname[0] == 'S' && fname[1] == '_')\n@@ -239,7 +238,7 @@ recognized_extern (name, type)\n   switch (special_file_handling)\n     {\n     case errno_special:\n-      if (strcmp (name, \"errno\") == 0) seen_errno++;\n+      if (strcmp (name, \"errno\") == 0) missing_errno = 0;\n       break;\n     }\n }\n@@ -326,7 +325,7 @@ read_scan_file (scan_file)\n   scan_decls (scan_file);\n \n   if (missing_extern_C_count + required_unseen_count + partial_count\n-      + missing_extra_stuff == 0)\n+      + missing_errno == 0)\n     {\n       if (verbose)\n \tfprintf (stderr, \"%s: OK, nothing needs to be done.\\n\", inc_filename);\n@@ -374,7 +373,7 @@ write_rbrac ()\n   switch (special_file_handling)\n     {\n     case errno_special:\n-      if (!seen_errno)\n+      if (missing_errno)\n \tfprintf (outf, \"extern int errno;\\n\");\n       break;\n     case sys_stat_special:\n@@ -400,7 +399,8 @@ write_rbrac ()\n     }\n \n \n-  fprintf (outf, \"#ifdef __cplusplus\\n}\\n#endif\\n\");\n+  if (missing_extern_C_count + required_unseen_count > 0)\n+    fprintf (outf, \"#ifdef __cplusplus\\n}\\n#endif\\n\");\n }\n \n char *\n@@ -648,7 +648,7 @@ main (argc, argv)\n   if (strcmp (inc_filename, \"sys/stat.h\") == 0)\n     special_file_handling = sys_stat_special;\n   else if (strcmp (inc_filename, \"errno.h\") == 0)\n-    special_file_handling = errno_special, missing_extra_stuff++;\n+    special_file_handling = errno_special, missing_errno = 1;\n \n   /* Calculate an upper bound of the number of function names in argv[4] */\n   for (i = 1, cptr = argv[4]; *cptr; cptr++)"}]}