{"sha": "7d46d516525c2a1977766d88306e85493b841add", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Q0NmQ1MTY1MjVjMmExOTc3NzY2ZDg4MzA2ZTg1NDkzYjg0MWFkZA==", "commit": {"author": {"name": "Toon Moene", "email": "toon@moene.indiv.nluug.nl", "date": "2001-07-19T18:33:30Z"}, "committer": {"name": "Toon Moene", "email": "toon@gcc.gnu.org", "date": "2001-07-19T18:33:30Z"}, "message": "tree.def: Document restriction on {L|R}SHIFT_EXPR's second argument.\n\n2001-07-19  Toon Moene  <toon@moene.indiv.nluug.nl>\n\n\t* tree.def: Document restriction on {L|R}SHIFT_EXPR's second argument.\n\t* doc/tree.texi: Ditto.\n\t* f/com.c (ffecom_expr_intrinsic_): Cope with it.\n\nFrom-SVN: r44156", "tree": {"sha": "2ed7d4fa1d6ed1f855ef6d2b7b3558f67e086566", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ed7d4fa1d6ed1f855ef6d2b7b3558f67e086566"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d46d516525c2a1977766d88306e85493b841add", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d46d516525c2a1977766d88306e85493b841add", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d46d516525c2a1977766d88306e85493b841add", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d46d516525c2a1977766d88306e85493b841add/comments", "author": null, "committer": null, "parents": [{"sha": "5442cf157b9baa37766aae56711a5e598d025ab2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5442cf157b9baa37766aae56711a5e598d025ab2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5442cf157b9baa37766aae56711a5e598d025ab2"}], "stats": {"total": 23, "additions": 20, "deletions": 3}, "files": [{"sha": "76125c6b5788caf1a43473a79b474e554ca06670", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d46d516525c2a1977766d88306e85493b841add/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d46d516525c2a1977766d88306e85493b841add/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7d46d516525c2a1977766d88306e85493b841add", "patch": "@@ -1,3 +1,8 @@\n+2001-07-19  Toon Moene  <toon@moene.indiv.nluug.nl>\n+\n+\t* tree.def: Document restriction on {L|R}SHIFT_EXPR's second argument.\n+\t* doc/tree.texi: Ditto.\n+\n 2001-07-19  Mark Kettenis  <kettenis@wins.uva.nl>\n \t    Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "a35ab4550e9c0105ecd493591bdd69212186215b", "filename": "gcc/doc/c-tree.texi", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d46d516525c2a1977766d88306e85493b841add/gcc%2Fdoc%2Fc-tree.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d46d516525c2a1977766d88306e85493b841add/gcc%2Fdoc%2Fc-tree.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fc-tree.texi?ref=7d46d516525c2a1977766d88306e85493b841add", "patch": "@@ -2003,6 +2003,9 @@ second operand is an expression for the number of bits by which to\n shift.  Right shift should be treated as arithmetic, i.e., the\n high-order bits should be zero-filled when the expression has unsigned\n type and filled with the sign bit when the expression has signed type.\n+Note that the result is undefined if the second operand is larger\n+than the first operand's type size.\n+\n \n @item BIT_IOR_EXPR\n @itemx BIT_XOR_EXPR"}, {"sha": "15e93100b190858ffb6201b6d427957398ef9ffb", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d46d516525c2a1977766d88306e85493b841add/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d46d516525c2a1977766d88306e85493b841add/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=7d46d516525c2a1977766d88306e85493b841add", "patch": "@@ -1,3 +1,8 @@\n+2001-07-19  Toon Moene  <toon@moene.indiv.nluug.nl>\n+\n+\t* f/com.c (ffecom_expr_intrinsic_): Deal (correctly) with\n+\t{L|R}SHIFT_EXPR not working when shift > size of type.\n+\n 2001-07-17  Toon Moene  <toon@moene.indiv.nluug.nl>\n \n \t* com.c (lang_print_error_function): Argument context"}, {"sha": "d8a4d109ca69e3af137628623dda6fe740947ff9", "filename": "gcc/f/com.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d46d516525c2a1977766d88306e85493b841add/gcc%2Ff%2Fcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d46d516525c2a1977766d88306e85493b841add/gcc%2Ff%2Fcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.c?ref=7d46d516525c2a1977766d88306e85493b841add", "patch": "@@ -4573,8 +4573,10 @@ ffecom_expr_intrinsic_ (ffebld expr, tree dest_tree,\n \texpr_tree\n \t  = ffecom_3 (COND_EXPR, tree_type,\n \t\t      ffecom_truth_value\n-\t\t      (ffecom_2 (NE_EXPR, integer_type_node,\n-\t\t\t\t arg2_tree,\n+\t\t      (ffecom_2 (LT_EXPR, integer_type_node,\n+\t\t\t\t ffecom_1 (ABS_EXPR,\n+\t\t\t\t\t   integer_type_node,\n+\t\t\t\t\t   arg2_tree),\n \t\t\t\t TYPE_SIZE (uns_type))),\n \t\t      expr_tree,\n \t\t      convert (tree_type, integer_zero_node));"}, {"sha": "56bc8ef15e72c87c55740e596cb60d3c8b9cab4e", "filename": "gcc/tree.def", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d46d516525c2a1977766d88306e85493b841add/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d46d516525c2a1977766d88306e85493b841add/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=7d46d516525c2a1977766d88306e85493b841add", "patch": "@@ -617,7 +617,9 @@ DEFTREECODE (FFS_EXPR, \"ffs_expr\", '1', 1)\n    Shift means logical shift if done on an\n    unsigned type, arithmetic shift if done on a signed type.\n    The second operand is the number of bits to\n-   shift by; it need not be the same type as the first operand and result.  */\n+   shift by; it need not be the same type as the first operand and result.\n+   Note that the result is undefined if the second operand is larger\n+   than the first operand's type size.  */\n DEFTREECODE (LSHIFT_EXPR, \"lshift_expr\", '2', 2)\n DEFTREECODE (RSHIFT_EXPR, \"rshift_expr\", '2', 2)\n DEFTREECODE (LROTATE_EXPR, \"lrotate_expr\", '2', 2)"}]}