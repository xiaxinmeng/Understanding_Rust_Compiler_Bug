{"sha": "36e40658dbae6eb6a2741762344476909983fd6a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzZlNDA2NThkYmFlNmViNmEyNzQxNzYyMzQ0NDc2OTA5OTgzZmQ2YQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2001-01-03T15:53:28Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2001-01-03T15:53:28Z"}, "message": "acinclude.m4 (GLIBCPP_ENABLD_CSTDIO): Add in default value.\n\n\n2001-01-02  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* acinclude.m4 (GLIBCPP_ENABLD_CSTDIO): Add in default value.\n\t* aclocal.m4: Regenerate.\n\t* configure: Regenerate.\n\n\t* include/bits/c++config (__GLIBCPP__): Bump version number.\n\n\t* ChangeLog: Start new log for year 2001\n\t* ChangeLog-2000: New file.\n\n\t* docs/html/configopts.html: Make sure default values are current,\n\nFrom-SVN: r38663", "tree": {"sha": "17e11fc98f84e842428a6595a6eadb13853d36f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/17e11fc98f84e842428a6595a6eadb13853d36f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36e40658dbae6eb6a2741762344476909983fd6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36e40658dbae6eb6a2741762344476909983fd6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36e40658dbae6eb6a2741762344476909983fd6a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36e40658dbae6eb6a2741762344476909983fd6a/comments", "author": null, "committer": null, "parents": [{"sha": "f07d22aa6f0d689c917f0aeff416f6ebb38f1e14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f07d22aa6f0d689c917f0aeff416f6ebb38f1e14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f07d22aa6f0d689c917f0aeff416f6ebb38f1e14"}], "stats": {"total": 22435, "additions": 11231, "deletions": 11204}, "files": [{"sha": "44adda75873f47b8c5fb00c380f0ec328eaf5c15", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 10131, "changes": 10145, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36e40658dbae6eb6a2741762344476909983fd6a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36e40658dbae6eb6a2741762344476909983fd6a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=36e40658dbae6eb6a2741762344476909983fd6a"}, {"sha": "6b657f900fcb01ca237db988e8d0b18275bae9e2", "filename": "libstdc++-v3/ChangeLog-2000", "status": "added", "additions": 10130, "deletions": 0, "changes": 10130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36e40658dbae6eb6a2741762344476909983fd6a/libstdc%2B%2B-v3%2FChangeLog-2000", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36e40658dbae6eb6a2741762344476909983fd6a/libstdc%2B%2B-v3%2FChangeLog-2000", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog-2000?ref=36e40658dbae6eb6a2741762344476909983fd6a"}, {"sha": "66a0bccf3a23a9d1f90f13a722c8984c384f5942", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36e40658dbae6eb6a2741762344476909983fd6a/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36e40658dbae6eb6a2741762344476909983fd6a/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=36e40658dbae6eb6a2741762344476909983fd6a", "patch": "@@ -1239,8 +1239,9 @@ dnl\n AC_DEFUN(GLIBCPP_ENABLE_CSTDIO, [\n   AC_MSG_CHECKING([for cstdio to use])\n   AC_ARG_ENABLE(cstdio,\n-  [  --enable-cstdio        enable stdio for target io package. (default)\n-     --enable-cstdio=LIB    use LIB target-speific io package.], \n+  [  --enable-cstdio        enable stdio for target io package. \n+     --enable-cstdio=LIB    use LIB target-speific io package. [default=stdio]\n+  ], \n   if test x$enable_cstdio = xno; then\n      enable_cstdio=stdio\n   fi,\n@@ -1357,8 +1358,9 @@ AC_DEFUN(GLIBCPP_ENABLE_THREADS, [\n   dnl Efforts should be made to keep this in sync.\n   AC_MSG_CHECKING([for threads package to use])\n   AC_ARG_ENABLE(threads,\n-  [  --enable-threads        enable thread usage for target GCC.\n-     --enable-threads=LIB    use LIB thread package for target GCC.],\n+  [  --enable-threads       enable thread usage for target GCC.\n+     --enable-threads=LIB   use LIB thread package for target GCC. [default=no]\n+  ],\n   if test x$enable_threads = xno; then\n     enable_threads=''\n   fi,"}, {"sha": "288f61daa97e53471b74b6066a291e77801ad856", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36e40658dbae6eb6a2741762344476909983fd6a/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36e40658dbae6eb6a2741762344476909983fd6a/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=36e40658dbae6eb6a2741762344476909983fd6a", "patch": "@@ -1251,8 +1251,9 @@ dnl\n AC_DEFUN(GLIBCPP_ENABLE_CSTDIO, [\n   AC_MSG_CHECKING([for cstdio to use])\n   AC_ARG_ENABLE(cstdio,\n-  [  --enable-cstdio        enable stdio for target io package. (default)\n-     --enable-cstdio=LIB    use LIB target-speific io package.], \n+  [  --enable-cstdio        enable stdio for target io package. \n+     --enable-cstdio=LIB    use LIB target-speific io package. [default=stdio]\n+  ], \n   if test x$enable_cstdio = xno; then\n      enable_cstdio=stdio\n   fi,\n@@ -1369,8 +1370,9 @@ AC_DEFUN(GLIBCPP_ENABLE_THREADS, [\n   dnl Efforts should be made to keep this in sync.\n   AC_MSG_CHECKING([for threads package to use])\n   AC_ARG_ENABLE(threads,\n-  [  --enable-threads        enable thread usage for target GCC.\n-     --enable-threads=LIB    use LIB thread package for target GCC.],\n+  [  --enable-threads       enable thread usage for target GCC.\n+     --enable-threads=LIB   use LIB thread package for target GCC. [default=no]\n+  ],\n   if test x$enable_threads = xno; then\n     enable_threads=''\n   fi,"}, {"sha": "44c2965d4653d4d0802bf7ff657d9f14dc37e492", "filename": "libstdc++-v3/config/os/gnu-linux/bits/os_defines.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36e40658dbae6eb6a2741762344476909983fd6a/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fbits%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36e40658dbae6eb6a2741762344476909983fd6a/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fbits%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fbits%2Fos_defines.h?ref=36e40658dbae6eb6a2741762344476909983fd6a", "patch": "@@ -42,7 +42,7 @@\n \n #include <features.h>\n \n-#if !defined (__GLIBC__) || (__GLIBC__ == 2 && __GLIBC_MINOR__+0 == 0)\n+#if !defined (__GLIBC__) || (__GLIBC__ == 2 && __GLIBC_MINOR__+ 0 == 0)\n \n // The types __off_t and __off64_t are not defined through <sys/types.h>\n // as _G_config assumes.  For libc5 and glibc 2.0 instead use"}, {"sha": "a0ff2b7ffde93a302436dda03432c706039b36c9", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 1050, "deletions": 1048, "changes": 2098, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36e40658dbae6eb6a2741762344476909983fd6a/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36e40658dbae6eb6a2741762344476909983fd6a/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=36e40658dbae6eb6a2741762344476909983fd6a"}, {"sha": "4e97fe91a54a193e6aae993b375bb638e3a0e16c", "filename": "libstdc++-v3/docs/html/configopts.html", "status": "modified", "additions": 22, "deletions": 14, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36e40658dbae6eb6a2741762344476909983fd6a/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fconfigopts.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36e40658dbae6eb6a2741762344476909983fd6a/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fconfigopts.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fconfigopts.html?ref=36e40658dbae6eb6a2741762344476909983fd6a", "patch": "@@ -7,7 +7,7 @@\n    <META NAME=\"GENERATOR\" CONTENT=\"vi and eight fingers\">\n    <TITLE>libstdc++-v3 configure options</TITLE>\n <LINK REL=StyleSheet HREF=\"lib3styles.css\">\n-<!-- $Id: configopts.html,v 1.1 2000/12/10 04:03:08 pme Exp $ -->\n+<!-- $Id: configopts.html,v 1.2 2001/01/02 22:52:51 bkoz Exp $ -->\n </HEAD>\n <BODY>\n \n@@ -56,13 +56,13 @@ <H1 CLASS=\"centered\"><A NAME=\"top\">Interesting <TT>configure</TT>\n      </P>\n \n  <DT><TT>--enable-cstdio  </TT>[default]\n- <DD><P>This is an abbreviated form of <TT>'--enable-cstdio=libio'</TT>\n+ <DD><P>This is an abbreviated form of <TT>'--enable-cstdio=stdio'</TT>\n         (described next).\n      </P>\n \n  <DT><TT>--enable-cstdio=LIB  </TT>\n  <DD><P>Select a target-specific I/O package.  As of libstdc++-v3\n-        snapshot 2.90.8, the choices are 'libio' to specify the GNU\n+        snapshot 2.91, the choices are 'libio' to specify the GNU\n         I/O package (from\n         <A HREF=\"http://sources.redhat.com/glibc/\">glibc</A>, the\n         GNU C library), or 'stdio' to use a generic \"C\" abstraction.\n@@ -71,8 +71,13 @@ <H1 CLASS=\"centered\"><A NAME=\"top\">Interesting <TT>configure</TT>\n  <DT><TT>--enable-long-long  </TT>\n  <DD><P>The &quot;long long&quot; type was introduced in C99.  It is\n         provided as a GNU extension to C++98 in g++.  This flag builds\n-        support for &quot;long long&quot; into the library (specialized\n-        templates and the like).\n+        support for &quot;long long&quot; into the library\n+        (specialized templates and the like). This option is off by\n+        default: if enabled, users will have to either use the\n+        new-style \"C\" headers by default (ie cmath not math.h) or add\n+        appropriate compile-time flags to all compile lines to allow\n+        \"C\" visibility of this feature (on gnu-linux, the flag is\n+        -D_ISOC99_SOURCE). \n      </P>\n \n  <DT><TT>--enable-cheaders=OPTION  </TT>\n@@ -89,7 +94,7 @@ <H1 CLASS=\"centered\"><A NAME=\"top\">Interesting <TT>configure</TT>\n      </P>\n \n  <DT><TT>--enable-threads=LIB  </TT>\n- <DD><P>Select a threading library.  As of libstdc++-v3 snapshot 2.90.8,\n+ <DD><P>Select a threading library.  As of libstdc++-v3 snapshot 2.91,\n         the choices are:\n         'yes' for some kind of default (hmmmmm);\n         'decosf1', 'irix', 'mach', 'os2', 'posix'/'pthreads'\n@@ -100,7 +105,8 @@ <H1 CLASS=\"centered\"><A NAME=\"top\">Interesting <TT>configure</TT>\n         single-threaded library.\n      </P>\n      <P>All of this is currently undergoing a lot of changes.  As of\n-        2.90.8, 'single' and 'posix' are the only implemented models.\n+        2.91, 'single' and 'posix' are the only implemented\n+        models. Default is off.\n      </P>\n \n  <DT><TT>--enable-version-specific-runtime-libs  </TT>\n@@ -151,12 +157,14 @@ <H1 CLASS=\"centered\"><A NAME=\"top\">Interesting <TT>configure</TT>\n         you discover more!\n      </P>\n \n- <DT><TT>--enable-wchar  </TT>[default]\n- <DD><P>Certain template specializations are required for wide character\n-        conversion support.  This is tricky and currently changing rapidly,\n-        and can cause problems on new platforms.  Disabling wide character\n-        specializations is useful for initial porting steps, but builds\n-        only a subset of what is required by ISO.\n+ <DT><TT>--enable-c-mbchar  </TT>[default]\n+ <DD><P>Certain template specializations are required for wide\n+        character conversion support.  This is tricky and currently\n+        changing rapidly, and can cause problems on new platforms.\n+        Disabling wide character specializations is useful for initial\n+        porting steps, but builds only a subset of what is required by\n+        ISO. Default is on, but the <TT>--enable-c_stdio=stdio </TT>\n+        option currently turns it off.\n      </P>\n </DL>\n </P>\n@@ -169,7 +177,7 @@ <H1 CLASS=\"centered\"><A NAME=\"top\">Interesting <TT>configure</TT>\n \n <HR>\n <P CLASS=\"fineprint\"><EM>\n-$Id: configopts.html,v 1.1 2000/12/10 04:03:08 pme Exp $\n+$Id: configopts.html,v 1.2 2000/12/21 22:52:51 bkoz Exp $\n </EM></P>\n \n "}, {"sha": "30fc80456e563679749b950abd4e7aa2bf9c8502", "filename": "libstdc++-v3/include/bits/c++config", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36e40658dbae6eb6a2741762344476909983fd6a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36e40658dbae6eb6a2741762344476909983fd6a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig?ref=36e40658dbae6eb6a2741762344476909983fd6a", "patch": "@@ -1,6 +1,6 @@\n // Predefined symbols and macros -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 1999, 2000 Free Software Foundation, Inc.\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -34,7 +34,7 @@\n #include <bits/os_defines.h>\n \n // The current version of the C++ library in compressed ISO date format.\n-#define __GLIBCPP__ 20001129\n+#define __GLIBCPP__ 20010102\n \n // This flag controls the error handling in string, and perhaps other\n // bits as time goes on: check out bits/basic_string.h for more"}]}