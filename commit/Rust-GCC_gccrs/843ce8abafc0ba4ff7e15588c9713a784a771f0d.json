{"sha": "843ce8abafc0ba4ff7e15588c9713a784a771f0d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQzY2U4YWJhZmMwYmE0ZmY3ZTE1NTg4Yzk3MTNhNzg0YTc3MWYwZA==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@gcc.gnu.org", "date": "2016-04-26T22:24:43Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@gcc.gnu.org", "date": "2016-04-26T22:24:43Z"}, "message": "Fix PR c++/70241 (inconsistent access with in-class enumeration)\n\ngcc/cp/ChangeLog:\n\n\tPR c++/70241\n\t* decl.c (build_enumerator): Set current_access_specifier when\n\tdeclaring an enumerator belonging to an in-class enumeration.\n\t* parser.c (cp_parser_check_access_in_redecleration): Also\n\tconsider in-class enumerations.\n\ngcc/testsite/ChangeLog:\n\n\tPR c++/70241\n\t* g++.dg/cpp0x/enum32.C: New test.\n\t* g++.dg/cpp0x/enum33.C: New test.\n\nFrom-SVN: r235456", "tree": {"sha": "89e4c1f9086d639dff4c482b7ed34eea53576798", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/89e4c1f9086d639dff4c482b7ed34eea53576798"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/843ce8abafc0ba4ff7e15588c9713a784a771f0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/843ce8abafc0ba4ff7e15588c9713a784a771f0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/843ce8abafc0ba4ff7e15588c9713a784a771f0d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/843ce8abafc0ba4ff7e15588c9713a784a771f0d/comments", "author": null, "committer": null, "parents": [{"sha": "3866f82f5847a4bb81a98a18ec7480fefacba74a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3866f82f5847a4bb81a98a18ec7480fefacba74a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3866f82f5847a4bb81a98a18ec7480fefacba74a"}], "stats": {"total": 88, "additions": 80, "deletions": 8}, "files": [{"sha": "b2185df76aef03d6c3348f1a2aaba30fb8289db5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/843ce8abafc0ba4ff7e15588c9713a784a771f0d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/843ce8abafc0ba4ff7e15588c9713a784a771f0d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=843ce8abafc0ba4ff7e15588c9713a784a771f0d", "patch": "@@ -1,3 +1,11 @@\n+2016-04-26  Patrick Palka  <ppalka@gcc.gnu.org>\n+\n+\tPR c++/70241\n+\t* decl.c (build_enumerator): Set current_access_specifier when\n+\tdeclaring an enumerator belonging to an in-class enumeration.\n+\t* parser.c (cp_parser_check_access_in_redecleration): Also\n+\tconsider in-class enumerations.\n+\n 2016-04-26  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/70744"}, {"sha": "a74e9a24a4ea002df3e034f4425876186b74fe92", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/843ce8abafc0ba4ff7e15588c9713a784a771f0d/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/843ce8abafc0ba4ff7e15588c9713a784a771f0d/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=843ce8abafc0ba4ff7e15588c9713a784a771f0d", "patch": "@@ -13686,10 +13686,30 @@ incremented enumerator value is too large for %<long%>\");\n     cplus_decl_attributes (&decl, attributes, 0);\n \n   if (context && context == current_class_type && !SCOPED_ENUM_P (enumtype))\n-    /* In something like `struct S { enum E { i = 7 }; };' we put `i'\n-       on the TYPE_FIELDS list for `S'.  (That's so that you can say\n-       things like `S::i' later.)  */\n-    finish_member_declaration (decl);\n+    {\n+      /* In something like `struct S { enum E { i = 7 }; };' we put `i'\n+\t on the TYPE_FIELDS list for `S'.  (That's so that you can say\n+\t things like `S::i' later.)  */\n+\n+      /* The enumerator may be getting declared outside of its enclosing\n+\t class, like so:\n+\n+\t   class S { public: enum E : int; }; enum S::E : int { i = 7; };\n+\n+\t For which case we need to make sure that the access of `S::i'\n+\t matches the access of `S::E'.  */\n+      tree saved_cas = current_access_specifier;\n+      if (TREE_PRIVATE (TYPE_NAME (enumtype)))\n+\tcurrent_access_specifier = access_private_node;\n+      else if (TREE_PROTECTED (TYPE_NAME (enumtype)))\n+\tcurrent_access_specifier = access_protected_node;\n+      else\n+\tcurrent_access_specifier = access_public_node;\n+\n+      finish_member_declaration (decl);\n+\n+      current_access_specifier = saved_cas;\n+    }\n   else\n     pushdecl (decl);\n "}, {"sha": "2dcb766a995afb222c1f9048006dadde7782c2db", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/843ce8abafc0ba4ff7e15588c9713a784a771f0d/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/843ce8abafc0ba4ff7e15588c9713a784a771f0d/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=843ce8abafc0ba4ff7e15588c9713a784a771f0d", "patch": "@@ -27238,13 +27238,15 @@ cp_parser_check_class_key (enum tag_types class_key, tree type)\n \n /* Issue an error message if DECL is redeclared with different\n    access than its original declaration [class.access.spec/3].\n-   This applies to nested classes and nested class templates.\n-   [class.mem/1].  */\n+   This applies to nested classes, nested class templates and\n+   enumerations [class.mem/1].  */\n \n static void\n cp_parser_check_access_in_redeclaration (tree decl, location_t location)\n {\n-  if (!decl || !CLASS_TYPE_P (TREE_TYPE (decl)))\n+  if (!decl\n+      || (!CLASS_TYPE_P (TREE_TYPE (decl))\n+\t  && TREE_CODE (TREE_TYPE (decl)) != ENUMERAL_TYPE))\n     return;\n \n   if ((TREE_PRIVATE (decl)"}, {"sha": "8401206c7a0cd043ade88666b8f806b896a2189d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/843ce8abafc0ba4ff7e15588c9713a784a771f0d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/843ce8abafc0ba4ff7e15588c9713a784a771f0d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=843ce8abafc0ba4ff7e15588c9713a784a771f0d", "patch": "@@ -1,4 +1,10 @@\n-2016-04-06  Senthil Kumar Selvaraj  <senthil_kumar.selvaraj@atmel.com>\n+2016-04-26  Patrick Palka  <ppalka@gcc.gnu.org>\n+\n+\tPR c++/70241\n+\t* g++.dg/cpp0x/enum32.C: New test.\n+\t* g++.dg/cpp0x/enum33.C: New test.\n+\n+2016-04-26  Senthil Kumar Selvaraj  <senthil_kumar.selvaraj@atmel.com>\n \n \t* gcc.c-torture/compile/pr69102.c: Require scheduling support.\n \t* gcc.c-torture/compile/pr37669.c: Require >=32 bit integers."}, {"sha": "9d7a7b533b0422407b5d0264ee385f201aac00e3", "filename": "gcc/testsuite/g++.dg/cpp0x/enum32.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/843ce8abafc0ba4ff7e15588c9713a784a771f0d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum32.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/843ce8abafc0ba4ff7e15588c9713a784a771f0d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum32.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum32.C?ref=843ce8abafc0ba4ff7e15588c9713a784a771f0d", "patch": "@@ -0,0 +1,25 @@\n+// PR c++/70241\n+// { dg-do compile { target c++11 } }\n+\n+class A {\n+public:\n+   enum B : int;\n+};\n+\n+enum A::B : int {\n+   x\n+};\n+\n+struct C {\n+private:\n+    enum D : int;\n+};\n+\n+enum C::D : int {\n+   y\n+};\n+\n+int main() {\n+   A::x;\n+   C::y; // { dg-error \"private\" }\n+}"}, {"sha": "ac39741aa538cecb63d833eee88262cfaca7537c", "filename": "gcc/testsuite/g++.dg/cpp0x/enum33.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/843ce8abafc0ba4ff7e15588c9713a784a771f0d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum33.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/843ce8abafc0ba4ff7e15588c9713a784a771f0d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum33.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum33.C?ref=843ce8abafc0ba4ff7e15588c9713a784a771f0d", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/70241\n+// { dg-do compile { target c++11 } }\n+\n+class A {\n+public:\n+  enum B : int;\n+  enum class C : int;\n+private:\n+  enum B : int { }; // { dg-error \"different access\" }\n+  enum class C : int { }; // { dg-error \"different access\" }\n+};"}]}