{"sha": "4df7f8c79835d56928f51f9e674d326300936e8e", "node_id": "C_kwDOANBUbNoAKDRkZjdmOGM3OTgzNWQ1NjkyOGY1MWY5ZTY3NGQzMjYzMDA5MzZlOGU", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-11-05T04:08:53Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-11-15T07:45:48Z"}, "message": "c++: don't do constexpr folding in unevaluated context\n\nThe implicit constexpr patch revealed that we were doing constant evaluation\nof arbitrary expressions in unevaluated contexts, leading to failure when we\ntried to evaluate e.g. a call to declval.  This is wrong more generally;\nonly manifestly-constant-evaluated expressions should be evaluated within\nan unevaluated operand.\n\nMaking this change revealed a case we were failing to mark as manifestly\nconstant-evaluated.\n\ngcc/cp/ChangeLog:\n\n\t* constexpr.c (maybe_constant_value): Don't evaluate\n\tin an unevaluated operand unless manifestly const-evaluated.\n\t(fold_non_dependent_expr_template): Likewise.\n\t* decl.c (compute_array_index_type_loc): This context is\n\tmanifestly constant-evaluated.", "tree": {"sha": "7e18a7d480f0c30b44494ef0f15f38e108fc2b11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e18a7d480f0c30b44494ef0f15f38e108fc2b11"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4df7f8c79835d56928f51f9e674d326300936e8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4df7f8c79835d56928f51f9e674d326300936e8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4df7f8c79835d56928f51f9e674d326300936e8e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4df7f8c79835d56928f51f9e674d326300936e8e/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "267318a2857a42922c3ca033dac4690172b17683", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/267318a2857a42922c3ca033dac4690172b17683", "html_url": "https://github.com/Rust-GCC/gccrs/commit/267318a2857a42922c3ca033dac4690172b17683"}], "stats": {"total": 9, "additions": 8, "deletions": 1}, "files": [{"sha": "82a597d7bad666f09c9c92696537825bf7a31346", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4df7f8c79835d56928f51f9e674d326300936e8e/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4df7f8c79835d56928f51f9e674d326300936e8e/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=4df7f8c79835d56928f51f9e674d326300936e8e", "patch": "@@ -7696,6 +7696,10 @@ maybe_constant_value (tree t, tree decl, bool manifestly_const_eval)\n       return r;\n     }\n \n+  /* Don't evaluate an unevaluated operand.  */\n+  if (cp_unevaluated_operand)\n+    return t;\n+\n   uid_sensitive_constexpr_evaluation_checker c;\n   r = cxx_eval_outermost_constant_expr (t, true, true, false, false, decl);\n   gcc_checking_assert (r == t\n@@ -7759,6 +7763,9 @@ fold_non_dependent_expr_template (tree t, tsubst_flags_t complain,\n \t  return t;\n \t}\n \n+      if (cp_unevaluated_operand && !manifestly_const_eval)\n+\treturn t;\n+\n       tree r = cxx_eval_outermost_constant_expr (t, true, true,\n \t\t\t\t\t\t manifestly_const_eval,\n \t\t\t\t\t\t false, object);"}, {"sha": "eed478199ea5833c45c29490d8a6c34b27a4612b", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4df7f8c79835d56928f51f9e674d326300936e8e/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4df7f8c79835d56928f51f9e674d326300936e8e/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=4df7f8c79835d56928f51f9e674d326300936e8e", "patch": "@@ -11000,7 +11000,7 @@ compute_array_index_type_loc (location_t name_loc, tree name, tree size,\n \t\t\t\t    cp_convert (ssizetype, integer_one_node,\n \t\t\t\t\t\tcomplain),\n \t\t\t\t    complain);\n-\titype = maybe_constant_value (itype);\n+\titype = maybe_constant_value (itype, NULL_TREE, true);\n       }\n \n       if (!TREE_CONSTANT (itype))"}]}