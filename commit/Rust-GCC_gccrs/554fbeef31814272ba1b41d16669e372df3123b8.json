{"sha": "554fbeef31814272ba1b41d16669e372df3123b8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTU0ZmJlZWYzMTgxNDI3MmJhMWI0MWQxNjY2OWUzNzJkZjMxMjNiOA==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@midnite.ec.rhno.columbia.edu", "date": "1999-01-26T09:12:47Z"}, "committer": {"name": "Dave Brolley", "email": "brolley@gcc.gnu.org", "date": "1999-01-26T09:12:47Z"}, "message": "cppfiles.c (safe_read): Deleted.\n\n1999-01-26 12:11 -0500  Zack Weinberg  <zack@midnite.ec.rhno.columbia.edu>\n\t* cppfiles.c (safe_read): Deleted.\n\t(read_and_prescan): New function, replaces safe_read, converts\n\tand/or warns about trigraphs, silently converts odd line\n\tterminators (\\r, \\n\\r, \\r\\n).  Warns about no newline at EOF.\n\t(finclude): Use read_and_prescan; turn off nonblocking mode on\n\tthe input descriptor; remove file-size-examination and\n\tno-newline-at-EOF gunk which is\tlonger necessary; be more\n\tcareful about checking that we've been handed a legitimate\n\tfile to read (only real files, pipes, and ttys are acceptable).\n\t* cpplib.h (cpp_options): Rename no_trigraphs flag to\n\t`trigraphs' and invert its sense.\n\t(trigraph_table): Declare.\n\t(cpp_warning_with_line): Prototype.\n\t* cpplib.c: Remove all references to trigraph_pcp. Define\n\ttrigraph_table; initialize it in initialize_char_syntax.  Open\n\tfiles in nonblocking mode.  s/no_trigraphs/trigraphs/\n\tthroughout, and invert sense.  Put cpp_warning_with_line back\n\tin and export it.\n\nFrom-SVN: r24870", "tree": {"sha": "3123f9a18afb9afd6a268cc6ba587e9baa25bf6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3123f9a18afb9afd6a268cc6ba587e9baa25bf6e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/554fbeef31814272ba1b41d16669e372df3123b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/554fbeef31814272ba1b41d16669e372df3123b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/554fbeef31814272ba1b41d16669e372df3123b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/554fbeef31814272ba1b41d16669e372df3123b8/comments", "author": null, "committer": null, "parents": [{"sha": "0034cf7299679aa804e365e087d390b9cabb646c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0034cf7299679aa804e365e087d390b9cabb646c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0034cf7299679aa804e365e087d390b9cabb646c"}], "stats": {"total": 426, "additions": 293, "deletions": 133}, "files": [{"sha": "7ab3030a860d999e3948a1275b062039de23cc53", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/554fbeef31814272ba1b41d16669e372df3123b8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/554fbeef31814272ba1b41d16669e372df3123b8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=554fbeef31814272ba1b41d16669e372df3123b8", "patch": "@@ -1,3 +1,24 @@\n+1999-01-26 12:11 -0500  Zack Weinberg  <zack@midnite.ec.rhno.columbia.edu>\n+\n+\t* cppfiles.c (safe_read): Deleted.  \n+\t(read_and_prescan): New function, replaces safe_read, converts\n+\tand/or warns about trigraphs, silently converts odd line\n+\tterminators (\\r, \\n\\r, \\r\\n).  Warns about no newline at EOF.\n+\t(finclude): Use read_and_prescan; turn off nonblocking mode on\n+\tthe input descriptor; remove file-size-examination and\n+\tno-newline-at-EOF gunk which is\tlonger necessary; be more\n+\tcareful about checking that we've been handed a legitimate\n+\tfile to read (only real files, pipes, and ttys are acceptable).\n+\t* cpplib.h (cpp_options): Rename no_trigraphs flag to \n+\t`trigraphs' and invert its sense.\n+\t(trigraph_table): Declare.\n+\t(cpp_warning_with_line): Prototype.\n+\t* cpplib.c: Remove all references to trigraph_pcp. Define\n+\ttrigraph_table; initialize it in initialize_char_syntax.  Open\n+\tfiles in nonblocking mode.  s/no_trigraphs/trigraphs/\n+\tthroughout, and invert sense.  Put cpp_warning_with_line back\n+\tin and export it.\n+\n Tue Jan 26 23:21:49 1999  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n \n \t* config/c4x/c4x.h (COUNTER_REGS): New register class."}, {"sha": "20e939cb43e729365f03f902b8c7c347fb3a1f8d", "filename": "gcc/cppfiles.c", "status": "modified", "additions": 241, "deletions": 99, "changes": 340, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/554fbeef31814272ba1b41d16669e372df3123b8/gcc%2Fcppfiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/554fbeef31814272ba1b41d16669e372df3123b8/gcc%2Fcppfiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppfiles.c?ref=554fbeef31814272ba1b41d16669e372df3123b8", "patch": "@@ -41,7 +41,8 @@ static struct file_name_map *read_name_map\tPROTO ((cpp_reader *,\n static char *read_filename_string\tPROTO ((int, FILE *));\n static char *remap_filename \t\tPROTO ((cpp_reader *, char *,\n \t\t\t\t\t\tstruct file_name_list *));\n-static long safe_read\t\t\tPROTO ((int, char *, int));\n+static long read_and_prescan\t\tPROTO ((cpp_reader *, cpp_buffer *,\n+\t\t\t\t\t\tint, size_t));\n static void simplify_pathname\t\tPROTO ((char *));\n static struct file_name_list *actual_directory PROTO ((cpp_reader *, char *));\n \n@@ -435,8 +436,8 @@ find_include_file (pfile, fname, search_start, ihash, before)\n       simplify_pathname (name);\n       if (CPP_OPTIONS (pfile)->remap)\n \tname = remap_filename (pfile, name, l);\n-      \n-      f = open (name, O_RDONLY, 0666);\n+\n+      f = open (name, O_RDONLY|O_NONBLOCK|O_NOCTTY, 0666);\n #ifdef EACCES\n       if (f == -1 && errno == EACCES)\n \t{\n@@ -672,94 +673,72 @@ finclude (pfile, fd, ihash)\n {\n   struct stat st;\n   size_t st_size;\n-  long i, length;\n+  long length;\n   cpp_buffer *fp;\n \n   if (fstat (fd, &st) < 0)\n     goto perror_fail;\n-  \n+  if (fcntl (fd, F_SETFL, 0) == -1)  /* turn off nonblocking mode */\n+    goto perror_fail;\n+\n   fp = CPP_BUFFER (pfile);\n-  fp->nominal_fname = fp->fname = ihash->name;\n-  fp->ihash = ihash;\n-  fp->system_header_p = (ihash->foundhere != ABSOLUTE_PATH\n-\t\t\t && ihash->foundhere->sysp);\n-  fp->lineno = 1;\n-  fp->colno = 1;\n-  fp->cleanup = file_cleanup;\n \n-  /* The ->actual_dir field is only used when ignore_srcdir is not in effect;\n-     see do_include */\n-  if (!CPP_OPTIONS (pfile)->ignore_srcdir)\n-    fp->actual_dir = actual_directory (pfile, fp->fname);\n-\t\n   if (S_ISREG (st.st_mode))\n     {\n+      /* off_t might have a wider range than size_t - in other words,\n+\t the max size of a file might be bigger than the address\n+\t space, and we need to detect that now. */\n       st_size = (size_t) st.st_size;\n-      if (st_size != st.st_size || st_size + 2 < st_size)\n-      {\n-        cpp_error (pfile, \"file `%s' too large\", ihash->name);\n-\tgoto fail;\n-      }\n-      fp->buf = (U_CHAR *) xmalloc (st_size + 2);\n-      fp->alimit = fp->buf + st_size + 2;\n-      fp->cur = fp->buf;\n-      \n-      /* Read the file contents, knowing that st_size is an upper bound\n-\t on the number of bytes we can read.  */\n-      length = safe_read (fd, fp->buf, st_size);\n-      fp->rlimit = fp->buf + length;\n-      if (length < 0)\n-\t  goto perror_fail;\n+      if ((unsigned HOST_WIDE_INT) st_size\n+\t  != (unsigned HOST_WIDE_INT) st.st_size)\n+\t{\n+\t  cpp_error (pfile, \"file `%s' is too large\", ihash->name);\n+\t  goto fail;\n+\t}\n     }\n-  else if (S_ISDIR (st.st_mode))\n+  else if (S_ISFIFO (st.st_mode) || (S_ISCHR (st.st_mode) && isatty (fd)))\n     {\n-      cpp_pop_buffer (pfile);\n-      cpp_error (pfile, \"directory `%s' specified in #include\", ihash->name);\n-      goto fail;\n+      /* Cannot get its file size before reading.  4k is a decent\n+         first guess. */\n+      st_size = 4096;\n     }\n   else\n     {\n-      /* Cannot count its file size before reading.\n-\t First read the entire file into heap and\n-\t copy them into buffer on stack.  */\n-\n-      size_t bsize = 2000;\n-\n-      st_size = 0;\n-      fp->buf = (U_CHAR *) xmalloc (bsize + 2);\n-\n-      for (;;)\n-        {\n-\t  i = safe_read (fd, fp->buf + st_size, bsize - st_size);\n-\t  if (i < 0)\n-\t    goto perror_fail;\n-\t  st_size += i;\n-\t  if (st_size != bsize)\n-\t    break;\t/* End of file */\n-\t  bsize *= 2;\n-\t  fp->buf = (U_CHAR *) xrealloc (fp->buf, bsize + 2);\n-\t}\n-      fp->cur = fp->buf;\n-      length = st_size;\n+      cpp_error (pfile, \"`%s' is not a file, pipe, or tty\", ihash->name);\n+      goto fail;\n     }\n \n-  /* FIXME: Broken in presence of trigraphs (consider ??/<EOF>)\n-     and doesn't warn about a missing newline. */\n-  if ((length > 0 && fp->buf[length - 1] != '\\n')\n-      || (length > 1 && fp->buf[length - 2] == '\\\\'))\n-    fp->buf[length++] = '\\n';\n-\n-  fp->buf[length] = '\\0';\n-  fp->rlimit = fp->buf + length;\n+  /* Read the file, converting end-of-line characters and trigraphs\n+     (if enabled). */\n+  fp->ihash = ihash;\n+  fp->nominal_fname = fp->fname = ihash->name;\n+  length = read_and_prescan (pfile, fp, fd, st_size);\n+  if (length < 0)\n+    goto fail;\n+  if (length == 0)\n+    ihash->control_macro = \"\";  /* never re-include */\n \n   close (fd);\n+  fp->rlimit = fp->alimit = fp->buf + length;\n+  fp->cur = fp->buf;\n+  fp->system_header_p = (ihash->foundhere != ABSOLUTE_PATH\n+\t\t\t && ihash->foundhere->sysp);\n+  fp->lineno = 1;\n+  fp->colno = 1;\n+  fp->cleanup = file_cleanup;\n+\n+  /* The ->actual_dir field is only used when ignore_srcdir is not in effect;\n+     see do_include */\n+  if (!CPP_OPTIONS (pfile)->ignore_srcdir)\n+    fp->actual_dir = actual_directory (pfile, fp->fname);\n+\n   pfile->input_stack_listing_current = 0;\n   return 1;\n \n  perror_fail:\n-  cpp_pop_buffer (pfile);\n   cpp_error_from_errno (pfile, ihash->name);\n  fail:\n+  cpp_pop_buffer (pfile);\n   close (fd);\n   return 0;\n }\n@@ -818,42 +797,205 @@ actual_directory (pfile, fname)\n   return x;\n }\n \n-/* Read LEN bytes at PTR from descriptor DESC, for file FILENAME,\n-   retrying if necessary.  If MAX_READ_LEN is defined, read at most\n-   that bytes at a time.  Return a negative value if an error occurs,\n-   otherwise return the actual number of bytes read,\n-   which must be LEN unless end-of-file was reached.  */\n+/* Read the entire contents of file DESC into buffer BUF, convert end-of-line\n+   markers to canonical form, and convert trigraphs if enabled.  Also, make\n+   sure there is a newline at the end of the file.  LEN is how much room we\n+   have to start with (this can be expanded if necessary).\n+   Returns -1 on failure, or the actual length of the data to be scanned.\n+\n+   N.B. This function has been rearranged to out-of-line the uncommon cases\n+   as much as possible; this is important to prevent it from being a\n+   performance bottleneck.  */\n \n static long\n-safe_read (desc, ptr, len)\n+read_and_prescan (pfile, fp, desc, len)\n+     cpp_reader *pfile;\n+     cpp_buffer *fp;\n      int desc;\n-     char *ptr;\n-     int len;\n+     size_t len;\n {\n-  int left, rcount, nchars;\n-\n-  left = len;\n-  while (left > 0) {\n-    rcount = left;\n-#ifdef MAX_READ_LEN\n-    if (rcount > MAX_READ_LEN)\n-      rcount = MAX_READ_LEN;\n-#endif\n-    nchars = read (desc, ptr, rcount);\n-    if (nchars < 0)\n-      {\n-#ifdef EINTR\n-\tif (errno == EINTR)\n-\t  continue;\n-#endif\n-\treturn nchars;\n-      }\n-    if (nchars == 0)\n-      break;\n-    ptr += nchars;\n-    left -= nchars;\n-  }\n-  return len - left;\n+\n+  U_CHAR *buf = (U_CHAR *) xmalloc (len);\n+  U_CHAR *ip, *op, *line_base;\n+  U_CHAR *ibase;\n+  unsigned int line;\n+  int count, seen_eof;\n+  size_t offset;\n+  /* 4096 bytes of buffer proper, 2 to detect running off the end without\n+     address arithmetic all the time, and 2 for pushback in the case there's\n+     a potential trigraph or end-of-line digraph at the end of a block. */\n+#define INTERMED_BUFFER_SIZE 4096\n+  U_CHAR intermed[INTERMED_BUFFER_SIZE + 2 + 2];\n+\n+  offset = 0;\n+  op = buf;\n+  line_base = buf;\n+  line = 1;\n+  ibase = intermed + 2;\n+  seen_eof = 0;\n+\n+  for (;;)\n+    {\n+    read_next:\n+      count = read (desc, intermed + 2, INTERMED_BUFFER_SIZE);\n+      if (count < 0)\n+\t  goto error;\n+      if (count == 0)\n+\tseen_eof = 1;\n+      count += 2 - (ibase - intermed);\n+      if (count == 0)\n+\tbreak;\n+\n+      ip = ibase;\n+      ip[count] = ip[count+1] = '\\0';\n+      ibase = intermed + 2;\n+      offset += count;\n+\n+      if (offset > len)\n+\t{\n+\t  size_t delta_op = op - buf;\n+\t  size_t delta_line_base = line_base - buf;\n+\t  len *= 2;\n+\t  if (offset > len)\n+\t      /* len overflowed.\n+\t\t This could happen if the file is larger than half the\n+\t\t maximum address space of the machine. */\n+\t    goto too_big;\n+\t  buf = xrealloc (buf, len);\n+\t  op = buf + delta_op;\n+\t  line_base = buf + delta_line_base;\n+\t}\n+\n+      for (;;)\n+\t{\n+\t  U_CHAR c;\n+\t  c = *ip++;\n+\t  switch (c)\n+\t    {\n+\t      /* The default case is at the top so gcc will realize\n+\t\t it's the common case, and leave c in a register.\n+\t         Also, cache utilization is a little better this way. */\n+\t    default:\n+\t      *op++ = c;\n+\t      break;\n+\t      \n+\t    case '\\0':\n+\t      if (seen_eof)\n+\t\tgoto eof;\n+\t      else\n+\t\tgoto read_next;\n+\t    case '\\r':\n+\t      if (*ip == '\\n') ip++;\n+\t      else if (*ip == '\\0' && !seen_eof)\n+\t\t{\n+\t\t  *--ibase = '\\r';\n+\t\t  break;\n+\t\t}\n+\t      *op++ = '\\n';\n+\t      line++;\n+\t      line_base = op;\n+\t      break;\n+\n+\t    case '\\n':\n+\t      if (*ip == '\\r') ip++;\n+\t      else if (*ip == '\\0' && !seen_eof)\n+\t\t{\n+\t\t  *--ibase = '\\n';\n+\t\t  break;\n+\t\t}\n+\t      *op++ = '\\n';\n+\t      line++;\n+\t      line_base = op;\n+\t      break;\n+\n+\t    case '?':\n+\t      if (CPP_OPTIONS (pfile)->trigraphs\n+\t\t  || CPP_OPTIONS (pfile)->warn_trigraphs)\n+\t\t{\n+\t\t  /* If we're at the end of the intermediate buffer,\n+\t\t     we have to shift the ?'s down to the start and\n+\t\t     come back next pass. */\n+\t\t  c = ip[0];\n+\t\t  if (c == '\\0' && !seen_eof)\n+\t\t    {\n+\t\t      *--ibase = '?';\n+\t\t      break;\n+\t\t    }\n+\t\t  if (c != '?')\n+\t\t    {\n+\t\t      *op++ = '?';\n+\t\t      break;\n+\t\t    }\n+\t\t  c = ip[1];\n+\t\t  if (c == '\\0' && !seen_eof)\n+\t\t    {\n+\t\t      *--ibase = '?';\n+\t\t      *--ibase = '?';\n+\t\t      break;\n+\t\t    }\n+\t\t  if (!trigraph_table[c])\n+\t\t    {\n+\t\t      *op++ = '?';\n+\t\t      break;\n+\t\t    }\n+\n+\t\t  if (CPP_OPTIONS (pfile)->warn_trigraphs)\n+\t\t    cpp_warning_with_line (pfile, line, op-line_base,\n+\t\t\t\t\t   \"trigraph ??%c encountered\", c);\n+\t\t  if (CPP_OPTIONS (pfile)->trigraphs)\n+\t\t    {\n+\t\t      *op++ = trigraph_table[c];\n+\t\t      ip += 2;\n+\t\t      break;\n+\t\t    }\n+\t\t  else\n+\t\t    {\n+\t\t      *op++ = '?';\n+\t\t      *op++ = '?';\n+\t\t      *op++ = c;\n+\t\t      ip += 2;\n+\t\t    }\n+\t\t}\n+\t      else\n+\t\t*op++ = c;\n+\t    }\n+\t}\n+    }\n+ eof:\n+\n+  if (op == buf)\n+    return 0;\n+\n+  if (op[-1] != '\\n' || op[-2] == '\\\\')\n+    {\n+      cpp_pedwarn_with_line (pfile, line, op - line_base,\n+\t\t\t     \"no newline at end of file\");\n+      if (offset + 2 > len)\n+\t{\n+\t  len += 2;\n+\t  if (offset + 2 > len)\n+\t    goto too_big;\n+\t  buf = xrealloc (buf, len);\n+\t  op = buf + offset;\n+\t}\n+      if (op[-1] == '\\\\')\n+\t*op++ = '\\n';\n+      *op++ = '\\n';\n+    }\n+\n+  buf = xrealloc (buf, op - buf);\n+  fp->buf = buf;\n+  return op - buf;\n+\n+ too_big:\n+  cpp_error (pfile, \"file is too large\");\n+  free (buf);\n+  return -1;\n+\n+ error:\n+  cpp_error_from_errno (pfile, fp->fname);\n+  free (buf);\n+  return -1;\n }\n \n /* Add output to `deps_buffer' for the -M switch."}, {"sha": "df2dbc71c1d15e3d69d49a997d6d42ef066f7078", "filename": "gcc/cpplib.c", "status": "modified", "additions": 26, "deletions": 32, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/554fbeef31814272ba1b41d16669e372df3123b8/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/554fbeef31814272ba1b41d16669e372df3123b8/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=554fbeef31814272ba1b41d16669e372df3123b8", "patch": "@@ -130,9 +130,6 @@ static void make_assertion\t\tPROTO ((cpp_reader *, char *, U_CHAR *));\n static void path_include\t\tPROTO ((cpp_reader *, char *));\n static void initialize_builtins\t\tPROTO ((cpp_reader *));\n static void initialize_char_syntax\tPROTO ((void));\n-#if 0\n-static void trigraph_pcp ();\n-#endif\n static void validate_else\t\tPROTO ((cpp_reader *, char *));\n static int comp_def_part\t\tPROTO ((int, U_CHAR *, int, U_CHAR *,\n \t\t\t\t\t\tint, int));\n@@ -290,6 +287,18 @@ U_CHAR is_idstart[256] = { 0 };\n U_CHAR is_hor_space[256] = { 0 };\n /* table to tell if c is horizontal or vertical space.  */\n U_CHAR is_space[256] = { 0 };\n+/* Table to handle trigraph conversion, which occurs before all other\n+   processing, everywhere in the file.  (This is necessary since one\n+   of the trigraphs encodes backslash.)  Note it's off by default.\n+\n+\tfrom\tto\tfrom\tto\tfrom\tto\n+\t?? =\t#\t?? )\t]\t?? !\t|\n+\t?? (\t[\t?? '\t^\t?? >\t}\n+\t?? /\t\\\t?? <\t{\t?? -\t~\n+\n+   There is not a space between the ?? and the third char.  I put spaces\n+   there to avoid warnings when compiling this file. */\n+U_CHAR trigraph_table[256] = { 0 };\n \n /* Initialize syntactic classifications of characters. */\n static void\n@@ -330,8 +339,14 @@ initialize_char_syntax ()\n   is_space['\\f'] = 1;\n   is_space['\\n'] = 1;\n   is_space['\\r'] = 1;\n-}\n \n+  /* trigraph conversion */\n+  trigraph_table['='] = '#';  trigraph_table[')'] = ']';\n+  trigraph_table['!'] = '|';  trigraph_table['('] = '[';\n+  trigraph_table['\\''] = '^'; trigraph_table['>'] = '}';\n+  trigraph_table['/'] = '\\\\'; trigraph_table['<'] = '{';\n+  trigraph_table['-'] = '~';\n+}\n \n /* Place into PFILE a quoted string representing the string SRC.\n    Caller must reserve enough space in pfile->token_buffer.  */\n@@ -554,7 +569,7 @@ cpp_options_init (opts)\n   initialize_char_syntax ();\n \n   opts->no_line_commands = 0;\n-  opts->no_trigraphs = 1;\n+  opts->trigraphs = 0;\n   opts->put_out_comments = 0;\n   opts->print_include_names = 0;\n   opts->dump_macros = dump_none;\n@@ -4953,7 +4968,7 @@ cpp_start_read (pfile, fname)\n   if (fname == NULL || *fname == 0) {\n     fname = \"\";\n     f = 0;\n-  } else if ((f = open (fname, O_RDONLY, 0666)) < 0)\n+  } else if ((f = open (fname, O_RDONLY|O_NONBLOCK|O_NOCTTY, 0666)) < 0)\n     cpp_pfatal_with_name (pfile, fname);\n \n   /* -MG doesn't select the form of output and must be specified with one of\n@@ -5075,23 +5090,6 @@ cpp_start_read (pfile, fname)\n \t}\n     }\n \n-#if 0\n-  /* Make sure data ends with a newline.  And put a null after it.  */\n-\n-  if ((fp->length > 0 && fp->buf[fp->length - 1] != '\\n')\n-      /* Backslash-newline at end is not good enough.  */\n-      || (fp->length > 1 && fp->buf[fp->length - 2] == '\\\\')) {\n-    fp->buf[fp->length++] = '\\n';\n-    missing_newline = 1;\n-  }\n-  fp->buf[fp->length] = '\\0';\n-\n-  /* Unless inhibited, convert trigraphs in the input.  */\n-\n-  if (!no_trigraphs)\n-    trigraph_pcp (fp);\n-#endif\n-\n   /* Must call finclude() on the main input before processing\n      -include switches; otherwise the -included text winds up\n      after the main input. */\n@@ -5123,7 +5121,7 @@ cpp_start_read (pfile, fname)\n         {\n \t  if (strcmp (pend->cmd, \"-imacros\") == 0)\n \t    {\n-\t      int fd = open (pend->arg, O_RDONLY, 0666);\n+\t      int fd = open (pend->arg, O_RDONLY|O_NONBLOCK|O_NOCTTY, 0666);\n \t      if (fd < 0)\n \t        {\n \t          cpp_perror_with_name (pfile, pend->arg);\n@@ -5155,7 +5153,7 @@ cpp_start_read (pfile, fname)\n         {\n \t  if (strcmp (pend->cmd, \"-include\") == 0)\n \t    {\n-\t      int fd = open (pend->arg, O_RDONLY, 0666);\n+\t      int fd = open (pend->arg, O_RDONLY|O_NONBLOCK|O_NOCTTY, 0666);\n \t      if (fd < 0)\n \t        {\n \t          cpp_perror_with_name (pfile, pend->arg);\n@@ -5505,7 +5503,7 @@ cpp_handle_option (pfile, argc, argv)\n \topts->cplusplus_comments = 0;\n       } else if (!strcmp (argv[i], \"-trigraphs\")) {\n \tif (!opts->chill)\n-\t  opts->no_trigraphs = 0;\n+\t  opts->trigraphs = 1;\n       }\n       break;\n       \n@@ -5531,7 +5529,7 @@ cpp_handle_option (pfile, argc, argv)\n \topts->for_lint = 1;\n       if (! strcmp (argv[i], \"-lang-chill\"))\n \topts->objc = 0, opts->cplusplus = 0, opts->chill = 1,\n-\t  opts->traditional = 1, opts->no_trigraphs = 1;\n+\t  opts->traditional = 1, opts->trigraphs = 0;\n       break;\n       \n     case '+':\n@@ -6377,8 +6375,7 @@ v_cpp_warning_with_line (pfile, line, column, msg, ap)\n   v_cpp_message (pfile, 0, msg, ap);\n }  \n \n-#if 0\n-static void\n+void\n cpp_warning_with_line VPROTO ((cpp_reader * pfile, int line, int column, const char *msg, ...))\n {\n #ifndef ANSI_PROTOTYPES\n@@ -6401,7 +6398,6 @@ cpp_warning_with_line VPROTO ((cpp_reader * pfile, int line, int column, const c\n   v_cpp_warning_with_line (pfile, line, column, msg, ap);\n   va_end(ap);\n }\n-#endif\n \n void\n cpp_pedwarn_with_line VPROTO ((cpp_reader * pfile, int line, int column, const char *msg, ...))\n@@ -6536,8 +6532,6 @@ cpp_perror_with_name (pfile, name)\n  *\n  * Find and cleanup remaining uses of static variables,\n  *\n- * Support for trigraphs.\n- *\n  * Support -dM flag (dump_all_macros).\n  *\n  * Support for_lint flag."}, {"sha": "b5f5ba18df44d8fda27669c4fc9c51a85dd72454", "filename": "gcc/cpplib.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/554fbeef31814272ba1b41d16669e372df3123b8/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/554fbeef31814272ba1b41d16669e372df3123b8/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=554fbeef31814272ba1b41d16669e372df3123b8", "patch": "@@ -334,9 +334,9 @@ struct cpp_options {\n \n   char put_out_comments;\n \n-  /* Nonzero means don't process the ANSI trigraph sequences.  */\n+  /* Nonzero means process the ANSI trigraph sequences.  */\n \n-  char no_trigraphs;\n+  char trigraphs;\n \n   /* Nonzero means print the names of included files rather than\n      the preprocessed output.  1 means just the #include \"...\",\n@@ -642,6 +642,7 @@ struct definition {\n extern unsigned char is_idchar[256];\n extern unsigned char is_hor_space[256];\n extern unsigned char is_space[256];\n+extern unsigned char trigraph_table[256];\n \n /* Stack of conditionals currently in progress\n    (including both successful and failing conditionals).  */\n@@ -677,6 +678,8 @@ extern void cpp_pedwarn PVPROTO ((cpp_reader *, const char *, ...))\n   ATTRIBUTE_PRINTF_2;\n extern void cpp_error_with_line PVPROTO ((cpp_reader *, int, int, const char *, ...))\n   ATTRIBUTE_PRINTF_4;\n+extern void cpp_warning_with_line PVPROTO ((cpp_reader *, int, int, const char *, ...))\n+  ATTRIBUTE_PRINTF_4;\n extern void cpp_pedwarn_with_line PVPROTO ((cpp_reader *, int, int, const char *, ...))\n   ATTRIBUTE_PRINTF_4;\n extern void cpp_pedwarn_with_file_and_line PVPROTO ((cpp_reader *, char *, int, const char *, ...))"}]}