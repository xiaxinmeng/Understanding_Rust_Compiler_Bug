{"sha": "68184180f25f3c89ebcb9202ff3235f936bcdc78", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjgxODQxODBmMjVmM2M4OWViY2I5MjAyZmYzMjM1ZjkzNmJjZGM3OA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-12-21T07:00:46Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-12-21T07:00:46Z"}, "message": "poly_int: REG_ARGS_SIZE\n\nThis patch adds new utility functions for manipulating REG_ARGS_SIZE\nnotes and allows the notes to carry polynomial as well as constant sizes.\n\nThe code was inconsistent about whether INT_MIN or HOST_WIDE_INT_MIN\nshould be used to represent an unknown size.  The patch uses\nHOST_WIDE_INT_MIN throughout.\n\n2017-12-21  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* rtl.h (get_args_size, add_args_size_note): New functions.\n\t(find_args_size_adjust): Return a poly_int64 rather than a\n\tHOST_WIDE_INT.\n\t(fixup_args_size_notes): Likewise.  Make the same change to the\n\tend_args_size parameter.\n\t* rtlanal.c (get_args_size, add_args_size_note): New functions.\n\t* builtins.c (expand_builtin_trap): Use add_args_size_note.\n\t* calls.c (emit_call_1): Likewise.\n\t* explow.c (adjust_stack_1): Likewise.\n\t* cfgcleanup.c (old_insns_match_p): Update use of\n\tfind_args_size_adjust.\n\t* combine.c (distribute_notes): Track polynomial arg sizes.\n\t* dwarf2cfi.c (dw_trace_info): Change beg_true_args_size,\n\tend_true_args_size, beg_delay_args_size and end_delay_args_size\n\tfrom HOST_WIDE_INT to poly_int64.\n\t(add_cfi_args_size): Take the args_size as a poly_int64 rather\n\tthan a HOST_WIDE_INT.\n\t(notice_args_size, notice_eh_throw, maybe_record_trace_start)\n\t(maybe_record_trace_start_abnormal, scan_trace, connect_traces): Track\n\tpolynomial arg sizes.\n\t* emit-rtl.c (try_split): Use get_args_size.\n\t* recog.c (peep2_attempt): Likewise.\n\t* reload1.c (reload_as_needed): Likewise.\n\t* expr.c (find_args_size_adjust): Return the adjustment as a\n\tpoly_int64 rather than a HOST_WIDE_INT.\n\t(fixup_args_size_notes): Change end_args_size from a HOST_WIDE_INT\n\tto a poly_int64 and change the return type in the same way.\n\t(emit_single_push_insn): Track polynomial arg sizes.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r255919", "tree": {"sha": "80c76ceffc762df432c6b9871357d8642769e61e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/80c76ceffc762df432c6b9871357d8642769e61e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/68184180f25f3c89ebcb9202ff3235f936bcdc78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68184180f25f3c89ebcb9202ff3235f936bcdc78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68184180f25f3c89ebcb9202ff3235f936bcdc78", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68184180f25f3c89ebcb9202ff3235f936bcdc78/comments", "author": null, "committer": null, "parents": [{"sha": "a15b25dcdcf597e01f5079b2bc44c1430b5e7719", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a15b25dcdcf597e01f5079b2bc44c1430b5e7719", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a15b25dcdcf597e01f5079b2bc44c1430b5e7719"}], "stats": {"total": 150, "additions": 101, "deletions": 49}, "files": [{"sha": "40d62bf9ed679942d74ca583c35bf1cf46a3cbcb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68184180f25f3c89ebcb9202ff3235f936bcdc78/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68184180f25f3c89ebcb9202ff3235f936bcdc78/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=68184180f25f3c89ebcb9202ff3235f936bcdc78", "patch": "@@ -1,3 +1,36 @@\n+2017-12-21  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* rtl.h (get_args_size, add_args_size_note): New functions.\n+\t(find_args_size_adjust): Return a poly_int64 rather than a\n+\tHOST_WIDE_INT.\n+\t(fixup_args_size_notes): Likewise.  Make the same change to the\n+\tend_args_size parameter.\n+\t* rtlanal.c (get_args_size, add_args_size_note): New functions.\n+\t* builtins.c (expand_builtin_trap): Use add_args_size_note.\n+\t* calls.c (emit_call_1): Likewise.\n+\t* explow.c (adjust_stack_1): Likewise.\n+\t* cfgcleanup.c (old_insns_match_p): Update use of\n+\tfind_args_size_adjust.\n+\t* combine.c (distribute_notes): Track polynomial arg sizes.\n+\t* dwarf2cfi.c (dw_trace_info): Change beg_true_args_size,\n+\tend_true_args_size, beg_delay_args_size and end_delay_args_size\n+\tfrom HOST_WIDE_INT to poly_int64.\n+\t(add_cfi_args_size): Take the args_size as a poly_int64 rather\n+\tthan a HOST_WIDE_INT.\n+\t(notice_args_size, notice_eh_throw, maybe_record_trace_start)\n+\t(maybe_record_trace_start_abnormal, scan_trace, connect_traces): Track\n+\tpolynomial arg sizes.\n+\t* emit-rtl.c (try_split): Use get_args_size.\n+\t* recog.c (peep2_attempt): Likewise.\n+\t* reload1.c (reload_as_needed): Likewise.\n+\t* expr.c (find_args_size_adjust): Return the adjustment as a\n+\tpoly_int64 rather than a HOST_WIDE_INT.\n+\t(fixup_args_size_notes): Change end_args_size from a HOST_WIDE_INT\n+\tto a poly_int64 and change the return type in the same way.\n+\t(emit_single_push_insn): Track polynomial arg sizes.\n+\n 2017-12-21  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "0ff0efea908ec2f9833e5ad8affce1cd40be3b3e", "filename": "gcc/builtins.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68184180f25f3c89ebcb9202ff3235f936bcdc78/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68184180f25f3c89ebcb9202ff3235f936bcdc78/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=68184180f25f3c89ebcb9202ff3235f936bcdc78", "patch": "@@ -5179,7 +5179,7 @@ expand_builtin_trap (void)\n \t REG_ARGS_SIZE note to prevent crossjumping of calls with\n \t different args sizes.  */\n       if (!ACCUMULATE_OUTGOING_ARGS)\n-\tadd_reg_note (insn, REG_ARGS_SIZE, GEN_INT (stack_pointer_delta));\n+\tadd_args_size_note (insn, stack_pointer_delta);\n     }\n   else\n     {"}, {"sha": "1387d152e9eb984942774b6b18c68d87675ff386", "filename": "gcc/calls.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68184180f25f3c89ebcb9202ff3235f936bcdc78/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68184180f25f3c89ebcb9202ff3235f936bcdc78/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=68184180f25f3c89ebcb9202ff3235f936bcdc78", "patch": "@@ -498,7 +498,7 @@ emit_call_1 (rtx funexp, tree fntree ATTRIBUTE_UNUSED, tree fndecl ATTRIBUTE_UNU\n       rounded_stack_size_rtx = GEN_INT (rounded_stack_size);\n       stack_pointer_delta -= n_popped;\n \n-      add_reg_note (call_insn, REG_ARGS_SIZE, GEN_INT (stack_pointer_delta));\n+      add_args_size_note (call_insn, stack_pointer_delta);\n \n       /* If popup is needed, stack realign must use DRAP  */\n       if (SUPPORTS_STACK_ALIGNMENT)\n@@ -508,7 +508,7 @@ emit_call_1 (rtx funexp, tree fntree ATTRIBUTE_UNUSED, tree fndecl ATTRIBUTE_UNU\n      REG_ARGS_SIZE note to prevent crossjumping of calls with different\n      args sizes.  */\n   else if (!ACCUMULATE_OUTGOING_ARGS && (ecf_flags & ECF_NORETURN) != 0)\n-    add_reg_note (call_insn, REG_ARGS_SIZE, GEN_INT (stack_pointer_delta));\n+    add_args_size_note (call_insn, stack_pointer_delta);\n \n   if (!ACCUMULATE_OUTGOING_ARGS)\n     {"}, {"sha": "6634016f4d859c4d29370c97074ac7d90057524a", "filename": "gcc/cfgcleanup.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68184180f25f3c89ebcb9202ff3235f936bcdc78/gcc%2Fcfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68184180f25f3c89ebcb9202ff3235f936bcdc78/gcc%2Fcfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgcleanup.c?ref=68184180f25f3c89ebcb9202ff3235f936bcdc78", "patch": "@@ -1173,7 +1173,7 @@ old_insns_match_p (int mode ATTRIBUTE_UNUSED, rtx_insn *i1, rtx_insn *i2)\n       /* ??? Worse, this adjustment had better be constant lest we\n          have differing incoming stack levels.  */\n       if (!frame_pointer_needed\n-          && find_args_size_adjust (i1) == HOST_WIDE_INT_MIN)\n+\t  && known_eq (find_args_size_adjust (i1), HOST_WIDE_INT_MIN))\n \treturn dir_none;\n     }\n   else if (p1 || p2)"}, {"sha": "e78a71380374f7fdb93466c0fff17aad306f7a59", "filename": "gcc/combine.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68184180f25f3c89ebcb9202ff3235f936bcdc78/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68184180f25f3c89ebcb9202ff3235f936bcdc78/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=68184180f25f3c89ebcb9202ff3235f936bcdc78", "patch": "@@ -14145,7 +14145,7 @@ distribute_notes (rtx notes, rtx_insn *from_insn, rtx_insn *i3, rtx_insn *i2,\n \t     entire adjustment.  Assert i3 contains at least some adjust.  */\n \t  if (!noop_move_p (i3))\n \t    {\n-\t      int old_size, args_size = INTVAL (XEXP (note, 0));\n+\t      poly_int64 old_size, args_size = get_args_size (note);\n \t      /* fixup_args_size_notes looks at REG_NORETURN note,\n \t\t so ensure the note is placed there first.  */\n \t      if (CALL_P (i3))\n@@ -14164,7 +14164,7 @@ distribute_notes (rtx notes, rtx_insn *from_insn, rtx_insn *i3, rtx_insn *i2,\n \t      old_size = fixup_args_size_notes (PREV_INSN (i3), i3, args_size);\n \t      /* emit_call_1 adds for !ACCUMULATE_OUTGOING_ARGS\n \t\t REG_ARGS_SIZE note to all noreturn calls, allow that here.  */\n-\t      gcc_assert (old_size != args_size\n+\t      gcc_assert (maybe_ne (old_size, args_size)\n \t\t\t  || (CALL_P (i3)\n \t\t\t      && !ACCUMULATE_OUTGOING_ARGS\n \t\t\t      && find_reg_note (i3, REG_NORETURN, NULL_RTX)));"}, {"sha": "7a7063984b4655ea81e675bd391eb97af92c7cc7", "filename": "gcc/dwarf2cfi.c", "status": "modified", "additions": 20, "deletions": 21, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68184180f25f3c89ebcb9202ff3235f936bcdc78/gcc%2Fdwarf2cfi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68184180f25f3c89ebcb9202ff3235f936bcdc78/gcc%2Fdwarf2cfi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2cfi.c?ref=68184180f25f3c89ebcb9202ff3235f936bcdc78", "patch": "@@ -102,8 +102,8 @@ struct dw_trace_info\n      while scanning insns.  However, the args_size value is irrelevant at\n      any point except can_throw_internal_p insns.  Therefore the \"delay\"\n      sizes the values that must actually be emitted for this trace.  */\n-  HOST_WIDE_INT beg_true_args_size, end_true_args_size;\n-  HOST_WIDE_INT beg_delay_args_size, end_delay_args_size;\n+  poly_int64_pod beg_true_args_size, end_true_args_size;\n+  poly_int64_pod beg_delay_args_size, end_delay_args_size;\n \n   /* The first EH insn in the trace, where beg_delay_args_size must be set.  */\n   rtx_insn *eh_head;\n@@ -475,16 +475,19 @@ add_cfi (dw_cfi_ref cfi)\n }\n \n static void\n-add_cfi_args_size (HOST_WIDE_INT size)\n+add_cfi_args_size (poly_int64 size)\n {\n+  /* We don't yet have a representation for polynomial sizes.  */\n+  HOST_WIDE_INT const_size = size.to_constant ();\n+\n   dw_cfi_ref cfi = new_cfi ();\n \n   /* While we can occasionally have args_size < 0 internally, this state\n      should not persist at a point we actually need an opcode.  */\n-  gcc_assert (size >= 0);\n+  gcc_assert (const_size >= 0);\n \n   cfi->dw_cfi_opc = DW_CFA_GNU_args_size;\n-  cfi->dw_cfi_oprnd1.dw_cfi_offset = size;\n+  cfi->dw_cfi_oprnd1.dw_cfi_offset = const_size;\n \n   add_cfi (cfi);\n }\n@@ -927,16 +930,16 @@ reg_save (unsigned int reg, unsigned int sreg, poly_int64 offset)\n static void\n notice_args_size (rtx_insn *insn)\n {\n-  HOST_WIDE_INT args_size, delta;\n+  poly_int64 args_size, delta;\n   rtx note;\n \n   note = find_reg_note (insn, REG_ARGS_SIZE, NULL);\n   if (note == NULL)\n     return;\n \n-  args_size = INTVAL (XEXP (note, 0));\n+  args_size = get_args_size (note);\n   delta = args_size - cur_trace->end_true_args_size;\n-  if (delta == 0)\n+  if (known_eq (delta, 0))\n     return;\n \n   cur_trace->end_true_args_size = args_size;\n@@ -962,16 +965,14 @@ notice_args_size (rtx_insn *insn)\n static void\n notice_eh_throw (rtx_insn *insn)\n {\n-  HOST_WIDE_INT args_size;\n-\n-  args_size = cur_trace->end_true_args_size;\n+  poly_int64 args_size = cur_trace->end_true_args_size;\n   if (cur_trace->eh_head == NULL)\n     {\n       cur_trace->eh_head = insn;\n       cur_trace->beg_delay_args_size = args_size;\n       cur_trace->end_delay_args_size = args_size;\n     }\n-  else if (cur_trace->end_delay_args_size != args_size)\n+  else if (maybe_ne (cur_trace->end_delay_args_size, args_size))\n     {\n       cur_trace->end_delay_args_size = args_size;\n \n@@ -2292,7 +2293,6 @@ static void\n maybe_record_trace_start (rtx_insn *start, rtx_insn *origin)\n {\n   dw_trace_info *ti;\n-  HOST_WIDE_INT args_size;\n \n   ti = get_trace_info (start);\n   gcc_assert (ti != NULL);\n@@ -2305,7 +2305,7 @@ maybe_record_trace_start (rtx_insn *start, rtx_insn *origin)\n \t       (origin ? INSN_UID (origin) : 0));\n     }\n \n-  args_size = cur_trace->end_true_args_size;\n+  poly_int64 args_size = cur_trace->end_true_args_size;\n   if (ti->beg_row == NULL)\n     {\n       /* This is the first time we've encountered this trace.  Propagate\n@@ -2345,7 +2345,7 @@ maybe_record_trace_start (rtx_insn *start, rtx_insn *origin)\n #endif\n \n       /* The args_size is allowed to conflict if it isn't actually used.  */\n-      if (ti->beg_true_args_size != args_size)\n+      if (maybe_ne (ti->beg_true_args_size, args_size))\n \tti->args_size_undefined = true;\n     }\n }\n@@ -2356,11 +2356,11 @@ maybe_record_trace_start (rtx_insn *start, rtx_insn *origin)\n static void\n maybe_record_trace_start_abnormal (rtx_insn *start, rtx_insn *origin)\n {\n-  HOST_WIDE_INT save_args_size, delta;\n+  poly_int64 save_args_size, delta;\n   dw_cfa_location save_cfa;\n \n   save_args_size = cur_trace->end_true_args_size;\n-  if (save_args_size == 0)\n+  if (known_eq (save_args_size, 0))\n     {\n       maybe_record_trace_start (start, origin);\n       return;\n@@ -2552,15 +2552,14 @@ scan_trace (dw_trace_info *trace)\n \n \t      if (INSN_FROM_TARGET_P (elt))\n \t\t{\n-\t\t  HOST_WIDE_INT restore_args_size;\n \t\t  cfi_vec save_row_reg_save;\n \n \t\t  /* If ELT is an instruction from target of an annulled\n \t\t     branch, the effects are for the target only and so\n \t\t     the args_size and CFA along the current path\n \t\t     shouldn't change.  */\n \t\t  add_cfi_insn = NULL;\n-\t\t  restore_args_size = cur_trace->end_true_args_size;\n+\t\t  poly_int64 restore_args_size = cur_trace->end_true_args_size;\n \t\t  cur_cfa = &cur_row->cfa;\n \t\t  save_row_reg_save = vec_safe_copy (cur_row->reg_save);\n \n@@ -2802,7 +2801,7 @@ connect_traces (void)\n   /* Connect args_size between traces that have can_throw_internal insns.  */\n   if (cfun->eh->lp_array)\n     {\n-      HOST_WIDE_INT prev_args_size = 0;\n+      poly_int64 prev_args_size = 0;\n \n       for (i = 0; i < n; ++i)\n \t{\n@@ -2814,7 +2813,7 @@ connect_traces (void)\n \t    continue;\n \t  gcc_assert (!ti->args_size_undefined);\n \n-\t  if (ti->beg_delay_args_size != prev_args_size)\n+\t  if (maybe_ne (ti->beg_delay_args_size, prev_args_size))\n \t    {\n \t      /* ??? Search back to previous CFI note.  */\n \t      add_cfi_insn = PREV_INSN (ti->eh_head);"}, {"sha": "8ca192f5daf2702b14797b10fad249450f41bc44", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68184180f25f3c89ebcb9202ff3235f936bcdc78/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68184180f25f3c89ebcb9202ff3235f936bcdc78/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=68184180f25f3c89ebcb9202ff3235f936bcdc78", "patch": "@@ -3924,7 +3924,7 @@ try_split (rtx pat, rtx_insn *trial, int last)\n \t  break;\n \n \tcase REG_ARGS_SIZE:\n-\t  fixup_args_size_notes (NULL, insn_last, INTVAL (XEXP (note, 0)));\n+\t  fixup_args_size_notes (NULL, insn_last, get_args_size (note));\n \t  break;\n \n \tcase REG_CALL_DECL:"}, {"sha": "38a950751330a46f703ef7909846ce9c3adb56cb", "filename": "gcc/explow.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68184180f25f3c89ebcb9202ff3235f936bcdc78/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68184180f25f3c89ebcb9202ff3235f936bcdc78/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=68184180f25f3c89ebcb9202ff3235f936bcdc78", "patch": "@@ -941,7 +941,7 @@ adjust_stack_1 (rtx adjust, bool anti_p)\n     }\n \n   if (!suppress_reg_args_size)\n-    add_reg_note (insn, REG_ARGS_SIZE, GEN_INT (stack_pointer_delta));\n+    add_args_size_note (insn, stack_pointer_delta);\n }\n \n /* Adjust the stack pointer by ADJUST (an rtx for a number of bytes)."}, {"sha": "06b6f7760a88d5687b6fcfb73691b1d7e28ea8ed", "filename": "gcc/expr.c", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68184180f25f3c89ebcb9202ff3235f936bcdc78/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68184180f25f3c89ebcb9202ff3235f936bcdc78/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=68184180f25f3c89ebcb9202ff3235f936bcdc78", "patch": "@@ -3941,9 +3941,9 @@ mem_autoinc_base (rtx mem)\n \n    The return value is the amount of adjustment that can be trivially\n    verified, via immediate operand or auto-inc.  If the adjustment\n-   cannot be trivially extracted, the return value is INT_MIN.  */\n+   cannot be trivially extracted, the return value is HOST_WIDE_INT_MIN.  */\n \n-HOST_WIDE_INT\n+poly_int64\n find_args_size_adjust (rtx_insn *insn)\n {\n   rtx dest, set, pat;\n@@ -4066,22 +4066,21 @@ find_args_size_adjust (rtx_insn *insn)\n     }\n }\n \n-int\n-fixup_args_size_notes (rtx_insn *prev, rtx_insn *last, int end_args_size)\n+poly_int64\n+fixup_args_size_notes (rtx_insn *prev, rtx_insn *last,\n+\t\t       poly_int64 end_args_size)\n {\n-  int args_size = end_args_size;\n+  poly_int64 args_size = end_args_size;\n   bool saw_unknown = false;\n   rtx_insn *insn;\n \n   for (insn = last; insn != prev; insn = PREV_INSN (insn))\n     {\n-      HOST_WIDE_INT this_delta;\n-\n       if (!NONDEBUG_INSN_P (insn))\n \tcontinue;\n \n-      this_delta = find_args_size_adjust (insn);\n-      if (this_delta == 0)\n+      poly_int64 this_delta = find_args_size_adjust (insn);\n+      if (known_eq (this_delta, 0))\n \t{\n \t  if (!CALL_P (insn)\n \t      || ACCUMULATE_OUTGOING_ARGS\n@@ -4090,15 +4089,15 @@ fixup_args_size_notes (rtx_insn *prev, rtx_insn *last, int end_args_size)\n \t}\n \n       gcc_assert (!saw_unknown);\n-      if (this_delta == HOST_WIDE_INT_MIN)\n+      if (known_eq (this_delta, HOST_WIDE_INT_MIN))\n \tsaw_unknown = true;\n \n-      add_reg_note (insn, REG_ARGS_SIZE, GEN_INT (args_size));\n+      add_args_size_note (insn, args_size);\n       if (STACK_GROWS_DOWNWARD)\n-\tthis_delta = -(unsigned HOST_WIDE_INT) this_delta;\n+\tthis_delta = -poly_uint64 (this_delta);\n \n       if (saw_unknown)\n-\targs_size = INT_MIN;\n+\targs_size = HOST_WIDE_INT_MIN;\n       else\n \targs_size -= this_delta;\n     }\n@@ -4198,7 +4197,7 @@ emit_single_push_insn_1 (machine_mode mode, rtx x, tree type)\n static void\n emit_single_push_insn (machine_mode mode, rtx x, tree type)\n {\n-  int delta, old_delta = stack_pointer_delta;\n+  poly_int64 delta, old_delta = stack_pointer_delta;\n   rtx_insn *prev = get_last_insn ();\n   rtx_insn *last;\n \n@@ -4209,12 +4208,13 @@ emit_single_push_insn (machine_mode mode, rtx x, tree type)\n   /* Notice the common case where we emitted exactly one insn.  */\n   if (PREV_INSN (last) == prev)\n     {\n-      add_reg_note (last, REG_ARGS_SIZE, GEN_INT (stack_pointer_delta));\n+      add_args_size_note (last, stack_pointer_delta);\n       return;\n     }\n \n   delta = fixup_args_size_notes (prev, last, stack_pointer_delta);\n-  gcc_assert (delta == INT_MIN || delta == old_delta);\n+  gcc_assert (known_eq (delta, HOST_WIDE_INT_MIN)\n+\t      || known_eq (delta, old_delta));\n }\n #endif\n "}, {"sha": "99031df553d18fbeb2b21dc4fe8cea13c65d96fc", "filename": "gcc/recog.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68184180f25f3c89ebcb9202ff3235f936bcdc78/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68184180f25f3c89ebcb9202ff3235f936bcdc78/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=68184180f25f3c89ebcb9202ff3235f936bcdc78", "patch": "@@ -3466,7 +3466,7 @@ peep2_attempt (basic_block bb, rtx_insn *insn, int match_len, rtx_insn *attempt)\n \n   /* Re-insert the ARGS_SIZE notes.  */\n   if (as_note)\n-    fixup_args_size_notes (before_try, last, INTVAL (XEXP (as_note, 0)));\n+    fixup_args_size_notes (before_try, last, get_args_size (as_note));\n \n   /* If we generated a jump instruction, it won't have\n      JUMP_LABEL set.  Recompute after we're done.  */"}, {"sha": "2483ed9af8b500859da0af9a9892214dee8b351e", "filename": "gcc/reload1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68184180f25f3c89ebcb9202ff3235f936bcdc78/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68184180f25f3c89ebcb9202ff3235f936bcdc78/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=68184180f25f3c89ebcb9202ff3235f936bcdc78", "patch": "@@ -4649,7 +4649,7 @@ reload_as_needed (int live_known)\n \t\t{\n \t\t  remove_note (insn, p);\n \t\t  fixup_args_size_notes (prev, PREV_INSN (next),\n-\t\t\t\t\t INTVAL (XEXP (p, 0)));\n+\t\t\t\t\t get_args_size (p));\n \t\t}\n \n \t      /* If this was an ASM, make sure that all the reload insns"}, {"sha": "99892634a9a85860f27eb71b841bf774bf5d0183", "filename": "gcc/rtl.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68184180f25f3c89ebcb9202ff3235f936bcdc78/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68184180f25f3c89ebcb9202ff3235f936bcdc78/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=68184180f25f3c89ebcb9202ff3235f936bcdc78", "patch": "@@ -3355,6 +3355,7 @@ extern rtx get_related_value (const_rtx);\n extern bool offset_within_block_p (const_rtx, HOST_WIDE_INT);\n extern void split_const (rtx, rtx *, rtx *);\n extern rtx strip_offset (rtx, poly_int64_pod *);\n+extern poly_int64 get_args_size (const_rtx);\n extern bool unsigned_reg_p (rtx);\n extern int reg_mentioned_p (const_rtx, const_rtx);\n extern int count_occurrences (const_rtx, const_rtx, int);\n@@ -3390,6 +3391,7 @@ extern int find_regno_fusage (const_rtx, enum rtx_code, unsigned int);\n extern rtx alloc_reg_note (enum reg_note, rtx, rtx);\n extern void add_reg_note (rtx, enum reg_note, rtx);\n extern void add_int_reg_note (rtx_insn *, enum reg_note, int);\n+extern void add_args_size_note (rtx_insn *, poly_int64);\n extern void add_shallow_copy_of_reg_note (rtx_insn *, rtx);\n extern rtx duplicate_reg_note (rtx);\n extern void remove_note (rtx_insn *, const_rtx);\n@@ -3979,8 +3981,8 @@ extern void emit_jump (rtx);\n /* In expr.c */\n extern rtx move_by_pieces (rtx, rtx, unsigned HOST_WIDE_INT,\n \t\t\t   unsigned int, int);\n-extern HOST_WIDE_INT find_args_size_adjust (rtx_insn *);\n-extern int fixup_args_size_notes (rtx_insn *, rtx_insn *, int);\n+extern poly_int64 find_args_size_adjust (rtx_insn *);\n+extern poly_int64 fixup_args_size_notes (rtx_insn *, rtx_insn *, poly_int64);\n \n /* In expmed.c */\n extern void init_expmed (void);"}, {"sha": "6d50781a32c312e2e773ef0bb0d15b3ad8bcdaf9", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68184180f25f3c89ebcb9202ff3235f936bcdc78/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68184180f25f3c89ebcb9202ff3235f936bcdc78/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=68184180f25f3c89ebcb9202ff3235f936bcdc78", "patch": "@@ -937,6 +937,15 @@ strip_offset (rtx x, poly_int64_pod *offset_out)\n   *offset_out = 0;\n   return x;\n }\n+\n+/* Return the argument size in REG_ARGS_SIZE note X.  */\n+\n+poly_int64\n+get_args_size (const_rtx x)\n+{\n+  gcc_checking_assert (REG_NOTE_KIND (x) == REG_ARGS_SIZE);\n+  return rtx_to_poly_int64 (XEXP (x, 0));\n+}\n \f\n /* Return the number of places FIND appears within X.  If COUNT_DEST is\n    zero, we do not count occurrences inside the destination of a SET.  */\n@@ -2362,6 +2371,15 @@ add_int_reg_note (rtx_insn *insn, enum reg_note kind, int datum)\n \t\t\t\t       datum, REG_NOTES (insn));\n }\n \n+/* Add a REG_ARGS_SIZE note to INSN with value VALUE.  */\n+\n+void\n+add_args_size_note (rtx_insn *insn, poly_int64 value)\n+{\n+  gcc_checking_assert (!find_reg_note (insn, REG_ARGS_SIZE, NULL_RTX));\n+  add_reg_note (insn, REG_ARGS_SIZE, gen_int_mode (value, Pmode));\n+}\n+\n /* Add a register note like NOTE to INSN.  */\n \n void"}]}