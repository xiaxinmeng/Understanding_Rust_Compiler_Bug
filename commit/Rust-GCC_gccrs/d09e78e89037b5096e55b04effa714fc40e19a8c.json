{"sha": "d09e78e89037b5096e55b04effa714fc40e19a8c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDA5ZTc4ZTg5MDM3YjUwOTZlNTViMDRlZmZhNzE0ZmM0MGUxOWE4Yw==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2017-10-09T19:44:13Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2017-10-09T19:44:13Z"}, "message": "Replace insn_rtx_cost with insn_cost and pattern_cost\n\nThis replaces insn_rtx_cost with insn_cost if an insn is readily\navailable, and with pattern_cost otherwise.\n\n\n\t* cfgrtl.c (rtl_account_profile_record): Replace insn_rtx_cost with\n\tinsn_cost.\n\t* combine.c (uid_insn_cost): Adjust comment.\n\t(combine_validate_cost): Adjust comment.  Use pattern_cost instead\n\tof insn_rtx_cost\n\t(combine_instructions): Use insn_cost instead of insn_rtx_cost.\n\t* dse.c (find_shift_sequence): Ditto.\n\t* ifcvt.c (cheap_bb_rtx_cost_p): Ditto.\n\t(bb_valid_for_noce_process_p): Use pattern_cost.\n\t* rtl.h (insn_rtx_cost): Delete.\n\t(pattern_cost): New prototype.\n\t(insn_cost): New prototype.\n\t* rtlanal.c (insn_rtx_cost): Rename to...\n\t(pattern_cost): ... this.\n\t(insn_cost): New.\n\nFrom-SVN: r253560", "tree": {"sha": "e24c9b1f71385f43633cf5e52abe5626c37114b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e24c9b1f71385f43633cf5e52abe5626c37114b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d09e78e89037b5096e55b04effa714fc40e19a8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d09e78e89037b5096e55b04effa714fc40e19a8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d09e78e89037b5096e55b04effa714fc40e19a8c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d09e78e89037b5096e55b04effa714fc40e19a8c/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "90e491a7739dc2ae9a5b92945e4f0e48a3a91e39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90e491a7739dc2ae9a5b92945e4f0e48a3a91e39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90e491a7739dc2ae9a5b92945e4f0e48a3a91e39"}], "stats": {"total": 72, "additions": 49, "deletions": 23}, "files": [{"sha": "cf83fd95aff0066350c0bc1bb909e5cb2bce78f4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d09e78e89037b5096e55b04effa714fc40e19a8c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d09e78e89037b5096e55b04effa714fc40e19a8c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d09e78e89037b5096e55b04effa714fc40e19a8c", "patch": "@@ -1,3 +1,21 @@\n+2017-10-09  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* cfgrtl.c (rtl_account_profile_record): Replace insn_rtx_cost with\n+\tinsn_cost.\n+\t* combine.c (uid_insn_cost): Adjust comment.\n+\t(combine_validate_cost): Adjust comment.  Use pattern_cost instead\n+\tof insn_rtx_cost\n+\t(combine_instructions): Use insn_cost instead of insn_rtx_cost.\n+\t* dse.c (find_shift_sequence): Ditto.\n+\t* ifcvt.c (cheap_bb_rtx_cost_p): Ditto.\n+\t(bb_valid_for_noce_process_p): Use pattern_cost.\n+\t* rtl.h (insn_rtx_cost): Delete.\n+\t(pattern_cost): New prototype.\n+\t(insn_cost): New prototype.\n+\t* rtlanal.c (insn_rtx_cost): Rename to...\n+\t(pattern_cost): ... this.\n+\t(insn_cost): New.\n+\n 2017-10-09  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (*jcc_2): Remove insn pattern."}, {"sha": "739d1bb9490cac02b235d244629463ee00aa4ab0", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d09e78e89037b5096e55b04effa714fc40e19a8c/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d09e78e89037b5096e55b04effa714fc40e19a8c/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=d09e78e89037b5096e55b04effa714fc40e19a8c", "patch": "@@ -5039,14 +5039,13 @@ rtl_account_profile_record (basic_block bb, int after_pass,\n   FOR_BB_INSNS (bb, insn)\n     if (INSN_P (insn))\n       {\n-\trecord->size[after_pass]\n-\t  += insn_rtx_cost (PATTERN (insn), false);\n+\trecord->size[after_pass] += insn_cost (insn, false);\n \tif (bb->count.initialized_p ())\n \t  record->time[after_pass]\n-\t    += insn_rtx_cost (PATTERN (insn), true) * bb->count.to_gcov_type ();\n+\t    += insn_cost (insn, true) * bb->count.to_gcov_type ();\n \telse if (profile_status_for_fn (cfun) == PROFILE_GUESSED)\n \t  record->time[after_pass]\n-\t    += insn_rtx_cost (PATTERN (insn), true) * bb->frequency;\n+\t    += insn_cost (insn, true) * bb->frequency;\n       }\n }\n "}, {"sha": "5f1cbca9550aa09e7dde21547ada6f4616c19fad", "filename": "gcc/combine.c", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d09e78e89037b5096e55b04effa714fc40e19a8c/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d09e78e89037b5096e55b04effa714fc40e19a8c/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=d09e78e89037b5096e55b04effa714fc40e19a8c", "patch": "@@ -311,7 +311,7 @@ static bool optimize_this_for_speed_p;\n \n static int max_uid_known;\n \n-/* The following array records the insn_rtx_cost for every insn\n+/* The following array records the insn_cost for every insn\n    in the instruction stream.  */\n \n static int *uid_insn_cost;\n@@ -841,7 +841,7 @@ do_SUBST_LINK (struct insn_link **into, struct insn_link *newval)\n #define SUBST_LINK(oldval, newval) do_SUBST_LINK (&oldval, newval)\n \f\n /* Subroutine of try_combine.  Determine whether the replacement patterns\n-   NEWPAT, NEWI2PAT and NEWOTHERPAT are cheaper according to insn_rtx_cost\n+   NEWPAT, NEWI2PAT and NEWOTHERPAT are cheaper according to insn_cost\n    than the original sequence I0, I1, I2, I3 and undobuf.other_insn.  Note\n    that I0, I1 and/or NEWI2PAT may be NULL_RTX.  Similarly, NEWOTHERPAT and\n    undobuf.other_insn may also both be NULL_RTX.  Return false if the cost\n@@ -888,11 +888,11 @@ combine_validate_cost (rtx_insn *i0, rtx_insn *i1, rtx_insn *i2, rtx_insn *i3,\n     old_cost -= i1_cost;\n \n \n-  /* Calculate the replacement insn_rtx_costs.  */\n-  new_i3_cost = insn_rtx_cost (newpat, optimize_this_for_speed_p);\n+  /* Calculate the replacement pattern_costs.  */\n+  new_i3_cost = pattern_cost (newpat, optimize_this_for_speed_p);\n   if (newi2pat)\n     {\n-      new_i2_cost = insn_rtx_cost (newi2pat, optimize_this_for_speed_p);\n+      new_i2_cost = pattern_cost (newi2pat, optimize_this_for_speed_p);\n       new_cost = (new_i2_cost > 0 && new_i3_cost > 0)\n \t\t ? new_i2_cost + new_i3_cost : 0;\n     }\n@@ -907,7 +907,7 @@ combine_validate_cost (rtx_insn *i0, rtx_insn *i1, rtx_insn *i2, rtx_insn *i3,\n       int old_other_cost, new_other_cost;\n \n       old_other_cost = INSN_COST (undobuf.other_insn);\n-      new_other_cost = insn_rtx_cost (newotherpat, optimize_this_for_speed_p);\n+      new_other_cost = pattern_cost (newotherpat, optimize_this_for_speed_p);\n       if (old_other_cost > 0 && new_other_cost > 0)\n \t{\n \t  old_cost += old_other_cost;\n@@ -1208,10 +1208,9 @@ combine_instructions (rtx_insn *f, unsigned int nregs)\n \t\t  set_nonzero_bits_and_sign_copies (XEXP (links, 0), NULL_RTX,\n \t\t\t\t\t\t    insn);\n \n-\t    /* Record the current insn_rtx_cost of this instruction.  */\n+\t    /* Record the current insn_cost of this instruction.  */\n \t    if (NONJUMP_INSN_P (insn))\n-\t      INSN_COST (insn) = insn_rtx_cost (PATTERN (insn),\n-\t      \t\t\t\t\toptimize_this_for_speed_p);\n+\t      INSN_COST (insn) = insn_cost (insn, optimize_this_for_speed_p);\n \t    if (dump_file)\n \t      {\n \t\tfprintf (dump_file, \"insn_cost %d for \", INSN_COST (insn));"}, {"sha": "563ca9f56f3f2448d76d013f02762bf4fba21cde", "filename": "gcc/dse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d09e78e89037b5096e55b04effa714fc40e19a8c/gcc%2Fdse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d09e78e89037b5096e55b04effa714fc40e19a8c/gcc%2Fdse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdse.c?ref=d09e78e89037b5096e55b04effa714fc40e19a8c", "patch": "@@ -1653,7 +1653,7 @@ find_shift_sequence (int access_size,\n       cost = 0;\n       for (insn = shift_seq; insn != NULL_RTX; insn = NEXT_INSN (insn))\n \tif (INSN_P (insn))\n-\t  cost += insn_rtx_cost (PATTERN (insn), speed);\n+\t  cost += insn_cost (insn, speed);\n \n       /* The computation up to here is essentially independent\n \t of the arguments and could be precomputed.  It may"}, {"sha": "278d5b240f14e875e6f2fa558289b164670e99cb", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d09e78e89037b5096e55b04effa714fc40e19a8c/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d09e78e89037b5096e55b04effa714fc40e19a8c/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=d09e78e89037b5096e55b04effa714fc40e19a8c", "patch": "@@ -121,7 +121,7 @@ count_bb_insns (const_basic_block bb)\n   return count;\n }\n \n-/* Determine whether the total insn_rtx_cost on non-jump insns in\n+/* Determine whether the total insn_cost on non-jump insns in\n    basic block BB is less than MAX_COST.  This function returns\n    false if the cost of any instruction could not be estimated. \n \n@@ -140,7 +140,7 @@ cheap_bb_rtx_cost_p (const_basic_block bb,\n \t      : REG_BR_PROB_BASE;\n \n   /* Set scale to REG_BR_PROB_BASE to void the identical scaling\n-     applied to insn_rtx_cost when optimizing for size.  Only do\n+     applied to insn_cost when optimizing for size.  Only do\n      this after combine because if-conversion might interfere with\n      passes before combine.\n \n@@ -163,7 +163,7 @@ cheap_bb_rtx_cost_p (const_basic_block bb,\n     {\n       if (NONJUMP_INSN_P (insn))\n \t{\n-\t  int cost = insn_rtx_cost (PATTERN (insn), speed) * REG_BR_PROB_BASE;\n+\t  int cost = insn_cost (insn, speed) * REG_BR_PROB_BASE;\n \t  if (cost == 0)\n \t    return false;\n \n@@ -3021,7 +3021,7 @@ bb_valid_for_noce_process_p (basic_block test_bb, rtx cond,\n   if (first_insn == last_insn)\n     {\n       *simple_p = noce_operand_ok (SET_DEST (first_set));\n-      *cost += insn_rtx_cost (first_set, speed_p);\n+      *cost += pattern_cost (first_set, speed_p);\n       return *simple_p;\n     }\n \n@@ -3037,7 +3037,7 @@ bb_valid_for_noce_process_p (basic_block test_bb, rtx cond,\n   /* The regs that are live out of test_bb.  */\n   bitmap test_bb_live_out = df_get_live_out (test_bb);\n \n-  int potential_cost = insn_rtx_cost (last_set, speed_p);\n+  int potential_cost = pattern_cost (last_set, speed_p);\n   rtx_insn *insn;\n   FOR_BB_INSNS (test_bb, insn)\n     {\n@@ -3057,7 +3057,7 @@ bb_valid_for_noce_process_p (basic_block test_bb, rtx cond,\n \t      || reg_overlap_mentioned_p (SET_DEST (sset), cond))\n \t    goto free_bitmap_and_fail;\n \n-\t  potential_cost += insn_rtx_cost (sset, speed_p);\n+\t  potential_cost += pattern_cost (sset, speed_p);\n \t  bitmap_set_bit (test_bb_temps, REGNO (SET_DEST (sset)));\n \t}\n     }"}, {"sha": "f854550bb8343ea44de7b60eb62041ea273318ce", "filename": "gcc/rtl.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d09e78e89037b5096e55b04effa714fc40e19a8c/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d09e78e89037b5096e55b04effa714fc40e19a8c/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=d09e78e89037b5096e55b04effa714fc40e19a8c", "patch": "@@ -3203,7 +3203,8 @@ extern int loc_mentioned_in_p (rtx *, const_rtx);\n extern rtx_insn *find_first_parameter_load (rtx_insn *, rtx_insn *);\n extern bool keep_with_call_p (const rtx_insn *);\n extern bool label_is_jump_target_p (const_rtx, const rtx_insn *);\n-extern int insn_rtx_cost (rtx, bool);\n+extern int pattern_cost (rtx, bool);\n+extern int insn_cost (rtx_insn *, bool);\n extern unsigned seq_cost (const rtx_insn *, bool);\n \n /* Given an insn and condition, return a canonical description of"}, {"sha": "f01eab5bdb4a0caee11db563aa835afd08428ed6", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d09e78e89037b5096e55b04effa714fc40e19a8c/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d09e78e89037b5096e55b04effa714fc40e19a8c/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=d09e78e89037b5096e55b04effa714fc40e19a8c", "patch": "@@ -5269,11 +5269,11 @@ num_sign_bit_copies1 (const_rtx x, scalar_int_mode mode, const_rtx known_x,\n \t ? 1 : bitwidth - floor_log2 (nonzero) - 1;\n }\n \n-/* Calculate the rtx_cost of a single instruction.  A return value of\n+/* Calculate the rtx_cost of a single instruction pattern.  A return value of\n    zero indicates an instruction pattern without a known cost.  */\n \n int\n-insn_rtx_cost (rtx pat, bool speed)\n+pattern_cost (rtx pat, bool speed)\n {\n   int i, cost;\n   rtx set;\n@@ -5323,6 +5323,15 @@ insn_rtx_cost (rtx pat, bool speed)\n   return cost > 0 ? cost : COSTS_N_INSNS (1);\n }\n \n+/* Calculate the cost of a single instruction.  A return value of zero\n+   indicates an instruction pattern without a known cost.  */\n+\n+int\n+insn_cost (rtx_insn *insn, bool speed)\n+{\n+  return pattern_cost (PATTERN (insn), speed);\n+}\n+\n /* Returns estimate on cost of computing SEQ.  */\n \n unsigned"}]}