{"sha": "9e56a932f967a037cb38f8d939e5250736e39d68", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWU1NmE5MzJmOTY3YTAzN2NiMzhmOGQ5MzllNTI1MDczNmUzOWQ2OA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2002-12-31T18:31:59Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2002-12-31T18:31:59Z"}, "message": "h8300.h (TRAMPOLINE_TEMPLATE): Remove.\n\n\t* config/h8300/h8300.h (TRAMPOLINE_TEMPLATE): Remove.\n\t(TRAMPOLINE_SIZE): Support the normal mode.\n\t(INITIALIZE_TRAMPOLINE): Emit the entire trampoline.\n\nFrom-SVN: r60705", "tree": {"sha": "2354d2b9607fe3d7b0f4abc109323522e2a2e183", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2354d2b9607fe3d7b0f4abc109323522e2a2e183"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e56a932f967a037cb38f8d939e5250736e39d68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e56a932f967a037cb38f8d939e5250736e39d68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e56a932f967a037cb38f8d939e5250736e39d68", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e56a932f967a037cb38f8d939e5250736e39d68/comments", "author": null, "committer": null, "parents": [{"sha": "3f4f56e27a8f1666c455b8913bd426e329336f00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f4f56e27a8f1666c455b8913bd426e329336f00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f4f56e27a8f1666c455b8913bd426e329336f00"}], "stats": {"total": 68, "additions": 39, "deletions": 29}, "files": [{"sha": "333647db26683e5ddefd25fa85c00494cea2d72a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e56a932f967a037cb38f8d939e5250736e39d68/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e56a932f967a037cb38f8d939e5250736e39d68/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9e56a932f967a037cb38f8d939e5250736e39d68", "patch": "@@ -1,3 +1,9 @@\n+2002-12-31  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/h8300/h8300.h (TRAMPOLINE_TEMPLATE): Remove.\n+\t(TRAMPOLINE_SIZE): Support the normal mode.\n+\t(INITIALIZE_TRAMPOLINE): Emit the entire trampoline.\n+\n 2002-12-31  Mark Mitchell  <mark@codesourcery.com>\n \n \t* c-common.h (pending_lang_change): Declare."}, {"sha": "384ddd236775230c10193fde285ec4e7640c0e2a", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 33, "deletions": 29, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e56a932f967a037cb38f8d939e5250736e39d68/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e56a932f967a037cb38f8d939e5250736e39d68/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=9e56a932f967a037cb38f8d939e5250736e39d68", "patch": "@@ -719,54 +719,58 @@ struct cum_arg\n \n #define EXIT_IGNORE_STACK 0\n \n-/* Output assembler code for a block containing the constant parts\n-   of a trampoline, leaving space for the variable parts.\n+/* We emit the entire trampoline with INITIALIZE_TRAMPOLINE.\n+   Depending on the pointer size, we use a different trampoline.\n \n-   H8/300\n+   Pmode == HImode\n \t      vvvv context\n    1 0000 7903xxxx\t\tmov.w\t#0x1234,r3\n    2 0004 5A00xxxx\t\tjmp\t@0x1234\n \t      ^^^^ function\n \n-   H8/300H\n+   Pmode == SImode\n \t      vvvvvvvv context\n    2 0000 7A03xxxxxxxx\t\tmov.l\t#0x12345678,er3\n    3 0006 5Axxxxxx\t\tjmp\t@0x123456\n \t    ^^^^^^ function\n */\n \n-#define TRAMPOLINE_TEMPLATE(FILE)\t\t\t\t\\\n-  do\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      if (TARGET_H8300)\t\t\t\t\t\t\\\n-\t{\t\t\t\t\t\t\t\\\n-\t  fprintf (FILE, \"\\tmov.w\t#0x1234,r3\\n\");\t\t\\\n-\t  fprintf (FILE, \"\\tjmp\t@0x1234\\n\");\t\t\t\\\n-\t}\t\t\t\t\t\t\t\\\n-      else\t\t\t\t\t\t\t\\\n-\t{\t\t\t\t\t\t\t\\\n-\t  fprintf (FILE, \"\\tmov.l\t#0x12345678,er3\\n\");\t\\\n-\t  fprintf (FILE, \"\\tjmp\t@0x123456\\n\");\t\t\t\\\n-\t}\t\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-  while (0)\n-\n /* Length in units of the trampoline for entering a nested function.  */\n \n-#define TRAMPOLINE_SIZE (TARGET_H8300 ? 8 : 12)\n+#define TRAMPOLINE_SIZE ((TARGET_H8300 || TARGET_NORMAL_MODE) ? 8 : 12)\n \n-/* Emit RTL insns to initialize the variable parts of a trampoline.\n+/* Emit RTL insns to build a trampoline.\n    FNADDR is an RTX for the address of the function's pure code.\n    CXT is an RTX for the static chain value for the function.  */\n \n #define INITIALIZE_TRAMPOLINE(TRAMP, FNADDR, CXT)\t\t\t    \\\n-{\t\t\t\t\t\t\t\t\t    \\\n-  emit_move_insn (gen_rtx_MEM (Pmode, plus_constant ((TRAMP), 2)), CXT);    \\\n-  emit_move_insn (gen_rtx_MEM (Pmode, plus_constant ((TRAMP), 6)), FNADDR); \\\n-  if (TARGET_H8300H || TARGET_H8300S)\t\t\t\t\t    \\\n-    emit_move_insn (gen_rtx_MEM (QImode, plus_constant ((TRAMP), 6)),\t    \\\n-\t\t    GEN_INT (0x5A));\t\t\t\t\t    \\\n-}\n+  do\t\t\t\t\t\t\t\t\t    \\\n+    {\t\t\t\t\t\t\t\t\t    \\\n+      if (Pmode == HImode)\t\t\t\t\t\t    \\\n+\t{\t\t\t\t\t\t\t\t    \\\n+\t  emit_move_insn (gen_rtx_MEM (HImode, (TRAMP)), GEN_INT (0x7903)); \\\n+\t  emit_move_insn (gen_rtx_MEM (Pmode, plus_constant ((TRAMP), 2)),  \\\n+\t\t\t  (CXT));\t\t\t\t\t    \\\n+\t  emit_move_insn (gen_rtx_MEM (Pmode, plus_constant ((TRAMP), 4)),  \\\n+\t\t\t  GEN_INT (0x5a00));\t\t\t\t    \\\n+\t  emit_move_insn (gen_rtx_MEM (Pmode, plus_constant ((TRAMP), 6)),  \\\n+\t\t\t  (FNADDR));\t\t\t\t\t    \\\n+\t}\t\t\t\t\t\t\t\t    \\\n+      else\t\t\t\t\t\t\t\t    \\\n+\t{\t\t\t\t\t\t\t\t    \\\n+\t  rtx tem = gen_reg_rtx (Pmode);\t\t\t\t    \\\n+\t\t\t\t\t\t\t\t\t    \\\n+\t  emit_move_insn (gen_rtx_MEM (HImode, (TRAMP)), GEN_INT (0x7a03)); \\\n+\t  emit_move_insn (gen_rtx_MEM (Pmode, plus_constant ((TRAMP), 2)),  \\\n+\t\t\t  (CXT));\t\t\t\t\t    \\\n+\t  emit_move_insn (tem, (FNADDR));\t\t\t\t    \\\n+\t  emit_insn (gen_andsi3 (tem, tem, GEN_INT (0x00ffffff)));\t    \\\n+\t  emit_insn (gen_iorsi3 (tem, tem, GEN_INT (0x5a000000)));\t    \\\n+\t  emit_move_insn (gen_rtx_MEM (Pmode, plus_constant ((TRAMP), 6)),  \\\n+\t\t\t  tem);\t\t\t\t\t\t    \\\n+\t}\t\t\t\t\t\t\t\t    \\\n+    }\t\t\t\t\t\t\t\t\t    \\\n+  while (0)\n \f\n /* Addressing modes, and classification of registers for them.  */\n "}]}