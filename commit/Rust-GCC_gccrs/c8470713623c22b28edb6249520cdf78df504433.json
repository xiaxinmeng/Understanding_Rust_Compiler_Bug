{"sha": "c8470713623c22b28edb6249520cdf78df504433", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzg0NzA3MTM2MjNjMjJiMjhlZGI2MjQ5NTIwY2RmNzhkZjUwNDQzMw==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-04-17T22:37:55Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-04-17T22:37:55Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r767", "tree": {"sha": "a9424d88e3d292c55629bbdeb594ba1adf805004", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9424d88e3d292c55629bbdeb594ba1adf805004"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8470713623c22b28edb6249520cdf78df504433", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8470713623c22b28edb6249520cdf78df504433", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8470713623c22b28edb6249520cdf78df504433", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8470713623c22b28edb6249520cdf78df504433/comments", "author": null, "committer": null, "parents": [{"sha": "32235b3084584f721c986755998033bea9633acb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32235b3084584f721c986755998033bea9633acb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32235b3084584f721c986755998033bea9633acb"}], "stats": {"total": 20, "additions": 17, "deletions": 3}, "files": [{"sha": "8dd0f03fade752d9b972450c5137ee2595ed34cf", "filename": "gcc/config/ns32k/ns32k.c", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8470713623c22b28edb6249520cdf78df504433/gcc%2Fconfig%2Fns32k%2Fns32k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8470713623c22b28edb6249520cdf78df504433/gcc%2Fconfig%2Fns32k%2Fns32k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.c?ref=c8470713623c22b28edb6249520cdf78df504433", "patch": "@@ -374,9 +374,9 @@ print_operand (file, x, code)\n      char code;\n {\n   if (code == '$')\n-    PUT_IMMEDIATE_PREFIX(file);\n+    PUT_IMMEDIATE_PREFIX (file);\n   else if (code == '?')\n-    PUT_EXTERNAL_PREFIX(file);\n+    PUT_EXTERNAL_PREFIX (file);\n   else if (GET_CODE (x) == REG)\n     fprintf (file, \"%s\", reg_names[REGNO (x)]);\n   else if (GET_CODE (x) == MEM)\n@@ -422,6 +422,11 @@ print_operand (file, x, code)\n \t  u.i[0] = CONST_DOUBLE_LOW (x); u.i[1] = CONST_DOUBLE_HIGH (x);\n \t  PUT_IMMEDIATE_PREFIX (file);\n #ifdef SEQUENT_ASM\n+\t  /* We have no way of winning if we can't get the bits\n+\t     for a sequent floating point number.  */\n+#if HOST_FLOAT_FORMAT != TARGET_FLOAT_FORMAT\n+\t  abort ();\n+#endif\n \t  {\n \t    union { float f; long l; } uu;\n \t    uu.f = u.d;\n@@ -434,7 +439,10 @@ print_operand (file, x, code)\n     }\n   else\n     {\n-      PUT_IMMEDIATE_PREFIX(file);\n+#ifndef NO_IMMEDIATE_PREFIX_IF_SYMBOLIC\n+      if (GET_CODE (x) == CONST_INT)\n+#endif\n+\tPUT_IMMEDIATE_PREFIX(file);\n       output_addr_const (file, x);\n     }\n }\n@@ -656,9 +664,15 @@ print_operand_address (file, addr)\n       if (GET_CODE (indexexp) != REG || REGNO (indexexp) >= 8)\n \tabort ();\n \n+#ifdef UTEK_ASM\n+      fprintf (file, \"[%c`%s]\",\n+\t       scales[scale],\n+\t       reg_names[REGNO (indexexp)]);\n+#else\n       fprintf (file, \"[%s:%c]\",\n \t       reg_names[REGNO (indexexp)],\n \t       scales[scale]);\n+#endif\n     }\n }\n \f"}]}