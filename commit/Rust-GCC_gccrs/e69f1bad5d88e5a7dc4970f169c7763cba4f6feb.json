{"sha": "e69f1bad5d88e5a7dc4970f169c7763cba4f6feb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTY5ZjFiYWQ1ZDg4ZTVhN2RjNDk3MGYxNjljNzc2M2NiYTRmNmZlYg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2007-10-12T16:26:03Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-10-12T16:26:03Z"}, "message": "stl_heap.h (__is_heap_until): Add.\n\n2007-10-12  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/stl_heap.h (__is_heap_until): Add.\n\t(__is_heap(_RandomAccessIterator, _Distance),\n\t__is_heap(_RandomAccessIterator, _Compare, _Distance)):\n\tAdjust, call the latter.\n\t(is_heap, is_heap_until): Add, call the above.\n\t* include/bits/algorithmfwd.h: Add.\n\t* testsuite/25_algorithms/is_heap/requirements/\n\texplicit_instantiation/2.cc: New.\n\t* testsuite/25_algorithms/is_heap/requirements/\n\texplicit_instantiation/pod.cc: Likewise.\n\t* testsuite/25_algorithms/is_heap/1.cc: Likewise.\n\t* testsuite/25_algorithms/is_heap_until/requirements/\n\texplicit_instantiation/2.cc: Likewise.\n\t* testsuite/25_algorithms/is_heap_until/requirements/\n\texplicit_instantiation/pod.cc: Likewise.\n\t* testsuite/25_algorithms/is_heap_until/1.cc: Likewise.\n\t* testsuite/25_algorithms/headers/algorithm/synopsis.cc:\n\tAdd is_heap and is_heap_until.\n\nFrom-SVN: r129266", "tree": {"sha": "237e54870afa0a64fb14bd9e1933203d575b071d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/237e54870afa0a64fb14bd9e1933203d575b071d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e69f1bad5d88e5a7dc4970f169c7763cba4f6feb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e69f1bad5d88e5a7dc4970f169c7763cba4f6feb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e69f1bad5d88e5a7dc4970f169c7763cba4f6feb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e69f1bad5d88e5a7dc4970f169c7763cba4f6feb/comments", "author": null, "committer": null, "parents": [{"sha": "3c285765879c471cb7ca2364e5a5c165e380aa41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c285765879c471cb7ca2364e5a5c165e380aa41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c285765879c471cb7ca2364e5a5c165e380aa41"}], "stats": {"total": 457, "additions": 441, "deletions": 16}, "files": [{"sha": "7b4721b9f9df07de0b01dbbc19fe0504e9477133", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e69f1bad5d88e5a7dc4970f169c7763cba4f6feb/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e69f1bad5d88e5a7dc4970f169c7763cba4f6feb/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e69f1bad5d88e5a7dc4970f169c7763cba4f6feb", "patch": "@@ -1,3 +1,24 @@\n+2007-10-12  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/stl_heap.h (__is_heap_until): Add.\n+\t(__is_heap(_RandomAccessIterator, _Distance),\n+\t__is_heap(_RandomAccessIterator, _Compare, _Distance)):\n+\tAdjust, call the latter.\n+\t(is_heap, is_heap_until): Add, call the above.\n+\t* include/bits/algorithmfwd.h: Add.\n+\t* testsuite/25_algorithms/is_heap/requirements/\n+\texplicit_instantiation/2.cc: New.\n+\t* testsuite/25_algorithms/is_heap/requirements/\n+\texplicit_instantiation/pod.cc: Likewise.\n+\t* testsuite/25_algorithms/is_heap/1.cc: Likewise.\n+\t* testsuite/25_algorithms/is_heap_until/requirements/\n+\texplicit_instantiation/2.cc: Likewise.\n+\t* testsuite/25_algorithms/is_heap_until/requirements/\n+\texplicit_instantiation/pod.cc: Likewise.\n+\t* testsuite/25_algorithms/is_heap_until/1.cc: Likewise.\n+\t* testsuite/25_algorithms/headers/algorithm/synopsis.cc:\n+\tAdd is_heap and is_heap_until.\n+\n 2007-10-12  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* docs/doxygen/user.cfg.in: Scan tr1_impl/hashtable."}, {"sha": "b831e30931b22096dd321e7fd3713570397a446c", "filename": "libstdc++-v3/include/bits/algorithmfwd.h", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e69f1bad5d88e5a7dc4970f169c7763cba4f6feb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falgorithmfwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e69f1bad5d88e5a7dc4970f169c7763cba4f6feb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falgorithmfwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falgorithmfwd.h?ref=e69f1bad5d88e5a7dc4970f169c7763cba4f6feb", "patch": "@@ -43,6 +43,8 @@\n   generate_n\n   includes\n   inplace_merge\n+  is_heap (C++0x)\n+  is_heap_until (C++0x)\n   iter_swap\n   lexicographical_compare\n   lower_bound\n@@ -179,6 +181,24 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     void \n     inplace_merge(_BIter, _BIter, _BIter, _Compare);\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  template<typename _RAIter>\n+    bool \n+    is_heap(_RAIter, _RAIter);\n+\n+  template<typename _RAIter, typename _Compare>\n+    bool \n+    is_heap(_RAIter, _RAIter, _Compare);\n+\n+  template<typename _RAIter>\n+    _RAIter \n+    is_heap_until(_RAIter, _RAIter);\n+\n+  template<typename _RAIter, typename _Compare>\n+    _RAIter \n+    is_heap_until(_RAIter, _RAIter, _Compare);\n+#endif\n+\n   template<typename _FIter1, typename _FIter2>\n     void \n     iter_swap(_FIter1, _FIter2);"}, {"sha": "06d90937e96843be99d3e972427652747a4ef39f", "filename": "libstdc++-v3/include/bits/stl_heap.h", "status": "modified", "additions": 90, "deletions": 16, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e69f1bad5d88e5a7dc4970f169c7763cba4f6feb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_heap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e69f1bad5d88e5a7dc4970f169c7763cba4f6feb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_heap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_heap.h?ref=e69f1bad5d88e5a7dc4970f169c7763cba4f6feb", "patch": "@@ -66,53 +66,64 @@\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n-  // is_heap, a predicate testing whether or not a range is\n-  // a heap.  This function is an extension, not part of the C++\n-  // standard.\n   template<typename _RandomAccessIterator, typename _Distance>\n-    bool\n-    __is_heap(_RandomAccessIterator __first, _Distance __n)\n+    _Distance\n+    __is_heap_until(_RandomAccessIterator __first, _Distance __n)\n     {\n       _Distance __parent = 0;\n       for (_Distance __child = 1; __child < __n; ++__child)\n \t{\n \t  if (__first[__parent] < __first[__child])\n-\t    return false;\n+\t    return __child;\n \t  if ((__child & 1) == 0)\n \t    ++__parent;\n \t}\n-      return true;\n+      return __n;\n     }\n \n   template<typename _RandomAccessIterator, typename _Distance,\n-           typename _StrictWeakOrdering>\n-    bool\n-    __is_heap(_RandomAccessIterator __first, _StrictWeakOrdering __comp,\n-\t      _Distance __n)\n+\t   typename _Compare>\n+    _Distance\n+    __is_heap_until(_RandomAccessIterator __first, _Distance __n,\n+\t\t    _Compare __comp)\n     {\n       _Distance __parent = 0;\n       for (_Distance __child = 1; __child < __n; ++__child)\n \t{\n \t  if (__comp(__first[__parent], __first[__child]))\n-\t    return false;\n+\t    return __child;\n \t  if ((__child & 1) == 0)\n \t    ++__parent;\n \t}\n-      return true;\n+      return __n;\n     }\n \n+  // __is_heap, a predicate testing whether or not a range is a heap.\n+  // This function is an extension, not part of the C++ standard.\n+  template<typename _RandomAccessIterator, typename _Distance>\n+    inline bool\n+    __is_heap(_RandomAccessIterator __first, _Distance __n)\n+    { return std::__is_heap_until(__first, __n) == __n; }\n+\n+  template<typename _RandomAccessIterator, typename _Compare,\n+\t   typename _Distance>\n+    inline bool\n+    __is_heap(_RandomAccessIterator __first, _Compare __comp, _Distance __n)\n+    { return std::__is_heap_until(__first, __n, __comp) == __n; }\n+\n   template<typename _RandomAccessIterator>\n     inline bool\n     __is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)\n     { return std::__is_heap(__first, std::distance(__first, __last)); }\n \n-  template<typename _RandomAccessIterator, typename _StrictWeakOrdering>\n+  template<typename _RandomAccessIterator, typename _Compare>\n     inline bool\n     __is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,\n-\t      _StrictWeakOrdering __comp)\n+\t      _Compare __comp)\n     { return std::__is_heap(__first, __comp, std::distance(__first, __last)); }\n \n-  // Heap-manipulation functions: push_heap, pop_heap, make_heap, sort_heap.\n+  // Heap-manipulation functions: push_heap, pop_heap, make_heap, sort_heap,\n+  // + is_heap and is_heap_until in C++0x.\n \n   template<typename _RandomAccessIterator, typename _Distance, typename _Tp>\n     void\n@@ -475,6 +486,69 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \tstd::pop_heap(__first, _RandomAccessIterator(__last--), __comp);\n     }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  /**\n+   *  @brief  Check whether a range is a heap.\n+   *  @param  first  Start of range.\n+   *  @param  last   End of range.\n+   *  @ingroup heap\n+  */\n+  template<typename _RandomAccessIterator>\n+    inline bool\n+    is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)\n+    { return std::is_heap_until(__first, __last) == __last; }\n+\n+  /**\n+   *  @brief  Check whether a range is a heap using comparison functor.\n+   *  @param  first  Start of range.\n+   *  @param  last   End of range.\n+   *  @param  comp   Comparison functor to use.\n+   *  @ingroup heap\n+  */\n+  template<typename _RandomAccessIterator, typename _Compare>\n+    inline bool\n+    is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,\n+\t    _Compare __comp)\n+    { return std::is_heap_until(__first, __last, __comp) == __last; }\n+\n+  /**\n+   *  @brief  Search the end of a heap.\n+   *  @param  first  Start of range.\n+   *  @param  last   End of range.\n+   *  @ingroup heap\n+   *\n+   *  This operation returns the last iterator i in [first, last) for which\n+   *  the range [first, i) is a heap.\n+  */\n+  template<typename _RandomAccessIterator>\n+    inline _RandomAccessIterator\n+    is_heap_until(_RandomAccessIterator __first, _RandomAccessIterator __last)\n+    {\n+      return __first + std::__is_heap_until(__first, std::distance(__first,\n+\t\t\t\t\t\t\t\t   __last));\n+    }\n+\n+  /**\n+   *  @brief  Search the end of a heap using comparison functor.\n+   *  @param  first  Start of range.\n+   *  @param  last   End of range.\n+   *  @param  comp   Comparison functor to use.\n+   *  @ingroup heap\n+   *\n+   *  This operation returns the last iterator i in [first, last) for which\n+   *  the range [first, i) is a heap.  Comparisons are made using comp.\n+  */\n+  template<typename _RandomAccessIterator, typename _Compare>\n+    inline _RandomAccessIterator\n+    is_heap_until(_RandomAccessIterator __first, _RandomAccessIterator __last,\n+\t\t  _Compare __comp)\n+    {\n+      return __first + std::__is_heap_until(__first, std::distance(__first,\n+\t\t\t\t\t\t\t\t   __last),\n+\t\t\t\t\t    __comp);\n+    }\n+#endif\n+\n _GLIBCXX_END_NAMESPACE\n \n #endif /* _STL_HEAP_H */"}, {"sha": "3176a53d4e64d5b21f47d8372a65125bd2f68cff", "filename": "libstdc++-v3/testsuite/25_algorithms/headers/algorithm/synopsis.cc", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e69f1bad5d88e5a7dc4970f169c7763cba4f6feb/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheaders%2Falgorithm%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e69f1bad5d88e5a7dc4970f169c7763cba4f6feb/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheaders%2Falgorithm%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheaders%2Falgorithm%2Fsynopsis.cc?ref=e69f1bad5d88e5a7dc4970f169c7763cba4f6feb", "patch": "@@ -401,6 +401,24 @@ namespace std\n     void \n     sort_heap(_RAIter, _RAIter, _Compare);\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  template<typename _RAIter>\n+    bool \n+    is_heap(_RAIter, _RAIter);\n+\n+  template<typename _RAIter, typename _Compare>\n+    bool \n+    is_heap(_RAIter, _RAIter, _Compare);\n+\n+  template<typename _RAIter>\n+    _RAIter \n+    is_heap_until(_RAIter, _RAIter);\n+\n+  template<typename _RAIter, typename _Compare>\n+    _RAIter \n+    is_heap_until(_RAIter, _RAIter, _Compare);\n+#endif\n+\n   // 25.3.7, minimum and maximum:\n   template<typename _Tp> \n     const _Tp& "}, {"sha": "da4f529af9653736a9f518cbd795c5cd78f9ee11", "filename": "libstdc++-v3/testsuite/25_algorithms/is_heap/1.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e69f1bad5d88e5a7dc4970f169c7763cba4f6feb/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_heap%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e69f1bad5d88e5a7dc4970f169c7763cba4f6feb/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_heap%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_heap%2F1.cc?ref=e69f1bad5d88e5a7dc4970f169c7763cba4f6feb", "patch": "@@ -0,0 +1,52 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2007-10-12  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 25.3.6 Heap operations [lib.alg.heap.operations]\n+\n+#include <algorithm>\n+#include <functional>\n+#include <testsuite_hooks.h>\n+\n+int A[] = {9, 8, 6, 7, 7, 5, 5, 3, 6, 4, 1, 2, 3, 4};\n+int B[] = {1, 3, 2, 4, 4, 6, 3, 5, 5, 7, 7, 6, 8, 9};\n+const int N = sizeof(A) / sizeof(int);\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  for (int i = 0; i <= N; ++i)\n+    {\n+      VERIFY( std::is_heap(A, A + i) );\n+      VERIFY( std::is_heap(A, A + i, std::less<int>()) );\n+      VERIFY( std::is_heap(B, B + i, std::greater<int>()) );\n+      VERIFY( (i < 2) || !std::is_heap(B, B + i) );\n+    }\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "8e4b42f6152220fb24a34ba951be2186a642c971", "filename": "libstdc++-v3/testsuite/25_algorithms/is_heap/requirements/explicit_instantiation/2.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e69f1bad5d88e5a7dc4970f169c7763cba4f6feb/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_heap%2Frequirements%2Fexplicit_instantiation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e69f1bad5d88e5a7dc4970f169c7763cba4f6feb/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_heap%2Frequirements%2Fexplicit_instantiation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_heap%2Frequirements%2Fexplicit_instantiation%2F2.cc?ref=e69f1bad5d88e5a7dc4970f169c7763cba4f6feb", "patch": "@@ -0,0 +1,47 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2007-10-12  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <algorithm>\n+#include <functional>\n+#include <testsuite_api.h>\n+\n+namespace std\n+{\n+  using __gnu_test::NonDefaultConstructible;\n+\n+  typedef NonDefaultConstructible \t\tvalue_type;\n+  typedef value_type* \t\titerator_type;\n+  typedef std::less<value_type> compare_type;\n+\n+  template bool is_heap(iterator_type, iterator_type);\n+  template bool is_heap(iterator_type, iterator_type, compare_type);\n+} "}, {"sha": "04f5c7dc62e72b3eff172ed134ab781d4dd542b3", "filename": "libstdc++-v3/testsuite/25_algorithms/is_heap/requirements/explicit_instantiation/pod.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e69f1bad5d88e5a7dc4970f169c7763cba4f6feb/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_heap%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e69f1bad5d88e5a7dc4970f169c7763cba4f6feb/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_heap%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_heap%2Frequirements%2Fexplicit_instantiation%2Fpod.cc?ref=e69f1bad5d88e5a7dc4970f169c7763cba4f6feb", "patch": "@@ -0,0 +1,46 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2007-10-12  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <algorithm>\n+#include <testsuite_character.h>\n+\n+namespace std\n+{\n+  using __gnu_test::pod_int;\n+\n+  typedef pod_int \t\tvalue_type;\n+  typedef value_type* \t\titerator_type;\n+  typedef std::less<value_type> compare_type;\n+\n+  template bool is_heap(iterator_type, iterator_type);\n+  template bool is_heap(iterator_type, iterator_type, compare_type);\n+} "}, {"sha": "3b821cfb332fea6b426dfc1ad48b9c3f10e65628", "filename": "libstdc++-v3/testsuite/25_algorithms/is_heap_until/1.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e69f1bad5d88e5a7dc4970f169c7763cba4f6feb/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_heap_until%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e69f1bad5d88e5a7dc4970f169c7763cba4f6feb/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_heap_until%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_heap_until%2F1.cc?ref=e69f1bad5d88e5a7dc4970f169c7763cba4f6feb", "patch": "@@ -0,0 +1,52 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2007-10-12  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 25.3.6 Heap operations [lib.alg.heap.operations]\n+\n+#include <algorithm>\n+#include <functional>\n+#include <testsuite_hooks.h>\n+\n+int A[] = {9, 8, 6, 7, 7, 5, 5, 3, 6, 4, 1, 2, 3, 4};\n+int B[] = {1, 3, 2, 4, 4, 6, 3, 5, 5, 7, 7, 6, 8, 9};\n+const int N = sizeof(A) / sizeof(int);\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  for (int i = 0; i <= N; ++i)\n+    {\n+      VERIFY( A + i == std::is_heap_until(A, A + i) );\n+      VERIFY( A + i == std::is_heap_until(A, A + i, std::less<int>()) );\n+      VERIFY( B + i == std::is_heap_until(B, B + i, std::greater<int>()) );\n+      VERIFY( B + (i < 2 ? i : 1) == std::is_heap_until(B, B + i) );      \n+    }\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "c96e766cd400dd05418388029be9bb022f3d4064", "filename": "libstdc++-v3/testsuite/25_algorithms/is_heap_until/requirements/explicit_instantiation/2.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e69f1bad5d88e5a7dc4970f169c7763cba4f6feb/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_heap_until%2Frequirements%2Fexplicit_instantiation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e69f1bad5d88e5a7dc4970f169c7763cba4f6feb/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_heap_until%2Frequirements%2Fexplicit_instantiation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_heap_until%2Frequirements%2Fexplicit_instantiation%2F2.cc?ref=e69f1bad5d88e5a7dc4970f169c7763cba4f6feb", "patch": "@@ -0,0 +1,48 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2007-10-12  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <algorithm>\n+#include <functional>\n+#include <testsuite_api.h>\n+\n+namespace std\n+{\n+  using __gnu_test::NonDefaultConstructible;\n+\n+  typedef NonDefaultConstructible \t\tvalue_type;\n+  typedef value_type* \t\titerator_type;\n+  typedef std::less<value_type> compare_type;\n+\n+  template iterator_type is_heap_until(iterator_type, iterator_type);\n+  template iterator_type is_heap_until(iterator_type, iterator_type,\n+\t\t\t\t       compare_type);\n+} "}, {"sha": "326f89a1ee4bf82536239b39a86c31bf8df4a40d", "filename": "libstdc++-v3/testsuite/25_algorithms/is_heap_until/requirements/explicit_instantiation/pod.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e69f1bad5d88e5a7dc4970f169c7763cba4f6feb/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_heap_until%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e69f1bad5d88e5a7dc4970f169c7763cba4f6feb/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_heap_until%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_heap_until%2Frequirements%2Fexplicit_instantiation%2Fpod.cc?ref=e69f1bad5d88e5a7dc4970f169c7763cba4f6feb", "patch": "@@ -0,0 +1,47 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2007-10-12  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <algorithm>\n+#include <testsuite_character.h>\n+\n+namespace std\n+{\n+  using __gnu_test::pod_int;\n+\n+  typedef pod_int \t\tvalue_type;\n+  typedef value_type* \t\titerator_type;\n+  typedef std::less<value_type> compare_type;\n+\n+  template iterator_type is_heap_until(iterator_type, iterator_type);\n+  template iterator_type is_heap_until(iterator_type, iterator_type,\n+\t\t\t\t       compare_type);\n+} "}]}