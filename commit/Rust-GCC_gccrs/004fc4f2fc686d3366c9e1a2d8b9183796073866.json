{"sha": "004fc4f2fc686d3366c9e1a2d8b9183796073866", "node_id": "C_kwDOANBUbNoAKDAwNGZjNGYyZmM2ODZkMzM2NmM5ZTFhMmQ4YjkxODM3OTYwNzM4NjY", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2022-03-16T11:15:01Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2022-03-17T07:47:09Z"}, "message": "Enhance further testcases to verify handling of OpenACC privatization level [PR90115]\n\nAs originally introduced in commit 11b8286a83289f5b54e813f14ff56d730c3f3185\n\"[OpenACC privatization] Largely extend diagnostics and corresponding testsuite\ncoverage [PR90115]\".\n\n\tPR middle-end/90115\n\tgcc/testsuite/\n\t* c-c++-common/goacc-gomp/nesting-1.c: Enhance.\n\t* gfortran.dg/goacc/common-block-3.f90: Likewise.\n\tlibgomp/\n\t* testsuite/libgomp.oacc-c-c++-common/acc_prof-kernels-1.c: Enhance.\n\t* testsuite/libgomp.oacc-fortran/if-1.f90: Likewise.", "tree": {"sha": "d91b6df755947760a2fd4a72502896c72cd0755d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d91b6df755947760a2fd4a72502896c72cd0755d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/004fc4f2fc686d3366c9e1a2d8b9183796073866", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/004fc4f2fc686d3366c9e1a2d8b9183796073866", "html_url": "https://github.com/Rust-GCC/gccrs/commit/004fc4f2fc686d3366c9e1a2d8b9183796073866", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/004fc4f2fc686d3366c9e1a2d8b9183796073866/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fc8f278ebebc57537dc0cb9d33e36d932be0bc3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fc8f278ebebc57537dc0cb9d33e36d932be0bc3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fc8f278ebebc57537dc0cb9d33e36d932be0bc3"}], "stats": {"total": 139, "additions": 68, "deletions": 71}, "files": [{"sha": "39b92712b31b9a6ac7982c2351ef8e6d825a124c", "filename": "gcc/testsuite/c-c++-common/goacc-gomp/nesting-1.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/004fc4f2fc686d3366c9e1a2d8b9183796073866/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc-gomp%2Fnesting-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/004fc4f2fc686d3366c9e1a2d8b9183796073866/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc-gomp%2Fnesting-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc-gomp%2Fnesting-1.c?ref=004fc4f2fc686d3366c9e1a2d8b9183796073866", "patch": "@@ -1,14 +1,15 @@\n /* { dg-additional-options \"-fopt-info-omp-note\" } */\n-/* { dg-additional-options \"--param=openacc-privatization=noisy\" } for\n-   testing/documenting aspects of that functionality.  */\n+\n+/* { dg-additional-options \"--param=openacc-privatization=noisy\" }\n+   Prune a few: uninteresting, and potentially varying depending on GCC configuration (data types):\n+   { dg-prune-output {note: variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} } */\n \n \n void\n f_acc_data (void)\n {\n #pragma acc data\n-  /* { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 } */\n-  /* { dg-note {variable 'i' declared in block is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } .-2 } */\n+  /* { dg-note {variable 'i' declared in block is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } .-1 } */\n   {\n     int i;\n #pragma omp atomic write"}, {"sha": "9dbfa4cd2f07b8f974d1f8a1443d7e5b98b15672", "filename": "gcc/testsuite/gfortran.dg/goacc/common-block-3.f90", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/004fc4f2fc686d3366c9e1a2d8b9183796073866/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fcommon-block-3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/004fc4f2fc686d3366c9e1a2d8b9183796073866/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fcommon-block-3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fcommon-block-3.f90?ref=004fc4f2fc686d3366c9e1a2d8b9183796073866", "patch": "@@ -1,5 +1,11 @@\n ! { dg-options \"-fopenacc -fdump-tree-omplower\" }\n \n+! { dg-additional-options \"-fopt-info-omp-all\" }\n+\n+! { dg-additional-options \"--param=openacc-privatization=noisy\" }\n+! Prune a few: uninteresting, and potentially varying depending on GCC configuration (data types):\n+! { dg-prune-output {note: variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} }\n+\n module consts\n   integer, parameter :: n = 100\n end module consts\n@@ -15,11 +21,14 @@ program main\n   common /KERNELS_BLOCK/ x, y, z\n \n   c = 1.0\n-  !$acc parallel loop copy(/BLOCK/)\n+  !$acc parallel loop copy(/BLOCK/) ! { dg-line l1 }\n+  ! { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l1 }\n+  ! { dg-optimized {assigned OpenACC gang vector loop parallelism} {} { target *-*-* } l1 }\n   do i = 1, n\n      a(i) = b(i) + c\n   end do\n-  !$acc kernels\n+  !$acc kernels ! { dg-line l2 }\n+  ! { dg-optimized {assigned OpenACC seq loop parallelism} {} { target *-*-* } l2 }\n   do i = 1, n\n      x(i) = y(i) + c\n   end do"}, {"sha": "c82a7edbfa0bccd330d3bf17969e788b2de52554", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/acc_prof-kernels-1.c", "status": "modified", "additions": 30, "deletions": 5, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/004fc4f2fc686d3366c9e1a2d8b9183796073866/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_prof-kernels-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/004fc4f2fc686d3366c9e1a2d8b9183796073866/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_prof-kernels-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_prof-kernels-1.c?ref=004fc4f2fc686d3366c9e1a2d8b9183796073866", "patch": "@@ -1,5 +1,21 @@\n /* Test dispatch of events to callbacks.  */\n \n+/* { dg-additional-options \"-fopt-info-omp-all\" }\n+   { dg-additional-options \"-foffload=-fopt-info-omp-all\" } */\n+\n+/* { dg-additional-options \"--param=openacc-privatization=noisy\" }\n+   { dg-additional-options \"-foffload=--param=openacc-privatization=noisy\" }\n+   Prune a few: uninteresting:\n+   { dg-prune-output {note: variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} } */\n+\n+/* It's only with Tcl 8.5 (released in 2007) that \"the variable 'varName'\n+   passed to 'incr' may be unset, and in that case, it will be set to [...]\",\n+   so to maintain compatibility with earlier Tcl releases, we manually\n+   initialize counter variables:\n+   { dg-line l_dummy[variable c_compute 0] }\n+   { dg-message dummy {} { target iN-VAl-Id } l_dummy } to avoid\n+   \"WARNING: dg-line var l_dummy defined, but not used\".  */\n+\n #undef NDEBUG\n #include <assert.h>\n #include <stdlib.h>\n@@ -164,7 +180,10 @@ int main()\n   {\n #define N 100\n     int x[N];\n-#pragma acc kernels\n+#pragma acc kernels /* { dg-line l_compute[incr c_compute] } */\n+    /* { dg-note {variable 'i' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute$c_compute } */\n+    /* { dg-optimized {assigned OpenACC seq loop parallelism} {} { target { ! __OPTIMIZE__ } } l_compute$c_compute }\n+       { dg-optimized {assigned OpenACC gang loop parallelism} {} { target __OPTIMIZE__ } l_compute$c_compute } */\n     {\n       for (int i = 0; i < N; ++i)\n \tx[i] = i * i;\n@@ -187,9 +206,12 @@ int main()\n   {\n #define N 100\n     int x[N];\n-#pragma acc kernels \\\n+#pragma acc kernels /* { dg-line l_compute[incr c_compute] } */ \\\n   num_gangs (30) num_workers (3) vector_length (5)\n-    /* { dg-prune-output \"using .vector_length \\\\(32\\\\)., ignoring 5\" } */\n+    /* { dg-note {variable 'i' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute$c_compute } */\n+    /* { dg-warning {using 'vector_length \\(32\\)', ignoring 5} {} { target { __OPTIMIZE__ && openacc_nvidia_accel_selected } } l_compute$c_compute } */\n+    /* { dg-optimized {assigned OpenACC seq loop parallelism} {} { target { ! __OPTIMIZE__ } } l_compute$c_compute }\n+       { dg-optimized {assigned OpenACC gang loop parallelism} {} { target __OPTIMIZE__ } l_compute$c_compute } */\n     {\n       for (int i = 0; i < N; ++i)\n \tx[i] = i * i;\n@@ -212,9 +234,12 @@ int main()\n   {\n #define N 100\n     int x[N];\n-#pragma acc kernels \\\n+#pragma acc kernels /* { dg-line l_compute[incr c_compute] } */ \\\n   num_gangs (num_gangs) num_workers (num_workers) vector_length (vector_length)\n-    /* { dg-prune-output \"using .vector_length \\\\(32\\\\)., ignoring runtime setting\" } */\n+    /* { dg-note {variable 'i' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute$c_compute } */\n+    /* { dg-warning {using 'vector_length \\(32\\)', ignoring runtime setting} {} { target { __OPTIMIZE__ && openacc_nvidia_accel_selected } } l_compute$c_compute } */\n+    /* { dg-optimized {assigned OpenACC seq loop parallelism} {} { target { ! __OPTIMIZE__ } } l_compute$c_compute }\n+       { dg-optimized {assigned OpenACC gang loop parallelism} {} { target __OPTIMIZE__ } l_compute$c_compute } */\n     {\n       for (int i = 0; i < N; ++i)\n \tx[i] = i * i;"}, {"sha": "3c4d9a6efb701a1bae62c095bb67c7ca75b3dad4", "filename": "libgomp/testsuite/libgomp.oacc-fortran/if-1.f90", "status": "modified", "additions": 22, "deletions": 60, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/004fc4f2fc686d3366c9e1a2d8b9183796073866/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fif-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/004fc4f2fc686d3366c9e1a2d8b9183796073866/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fif-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fif-1.f90?ref=004fc4f2fc686d3366c9e1a2d8b9183796073866", "patch": "@@ -2,10 +2,12 @@\n ! { dg-additional-options \"-cpp\" }\n \n ! { dg-additional-options \"-fopt-info-note-omp\" }\n-! { dg-additional-options \"--param=openacc-privatization=noisy\" }\n ! { dg-additional-options \"-foffload=-fopt-info-note-omp\" }\n+\n+! { dg-additional-options \"--param=openacc-privatization=noisy\" }\n ! { dg-additional-options \"-foffload=--param=openacc-privatization=noisy\" }\n-! for testing/documenting aspects of that functionality.\n+! Prune a few: uninteresting, and potentially varying depending on GCC configuration (data types):\n+! { dg-prune-output {note: variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} }\n \n ! It's only with Tcl 8.5 (released in 2007) that \"the variable 'varName'\n ! passed to 'incr' may be unset, and in that case, it will be set to [...]\",\n@@ -34,7 +36,6 @@ program main\n   a(:) = 4.0\n \n   !$acc parallel copyin (a(1:N)) copyout (b(1:N)) if (1 == 1) ! { dg-line l_compute[incr c_compute] }\n-  ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n      do i = 1, N\n         ! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target *-*-* } l_compute$c_compute }\n         !TODO Unhandled 'CONST_DECL' instances for constant argument in 'acc_on_device' call.\n@@ -59,7 +60,6 @@ program main\n   a(:) = 16.0\n \n   !$acc parallel if (0 == 1) ! { dg-line l_compute[incr c_compute] }\n-  ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n      do i = 1, N\n         ! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target *-*-* } l_compute$c_compute }\n        if (acc_on_device (acc_device_host) .eqv. .TRUE.) then\n@@ -77,7 +77,6 @@ program main\n   a(:) = 8.0\n \n   !$acc parallel copyin (a(1:N)) copyout (b(1:N)) if (one == 1) ! { dg-line l_compute[incr c_compute] }\n-  ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n     do i = 1, N\n        ! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target *-*-* } l_compute$c_compute }\n       if (acc_on_device (acc_device_host) .eqv. .TRUE.) then\n@@ -101,7 +100,6 @@ program main\n   a(:) = 22.0\n \n   !$acc parallel if (zero == 1) ! { dg-line l_compute[incr c_compute] }\n-  ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n     do i = 1, N\n        ! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target *-*-* } l_compute$c_compute }\n       if (acc_on_device (acc_device_host) .eqv. .TRUE.) then\n@@ -119,7 +117,6 @@ program main\n   a(:) = 16.0\n \n   !$acc parallel copyin (a(1:N)) copyout (b(1:N)) if (.TRUE.) ! { dg-line l_compute[incr c_compute] }\n-  ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n     do i = 1, N\n        ! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target *-*-* } l_compute$c_compute }\n       if (acc_on_device (acc_device_host) .eqv. .TRUE.) then\n@@ -143,7 +140,6 @@ program main\n   a(:) = 76.0\n \n   !$acc parallel if (.FALSE.) ! { dg-line l_compute[incr c_compute] }\n-  ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n     do i = 1, N\n        ! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target *-*-* } l_compute$c_compute }\n       if (acc_on_device (acc_device_host) .eqv. .TRUE.) then\n@@ -163,7 +159,6 @@ program main\n   nn = 1\n \n   !$acc parallel copyin (a(1:N)) copyout (b(1:N)) if (nn == 1) ! { dg-line l_compute[incr c_compute] }\n-  ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n     do i = 1, N\n        ! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target *-*-* } l_compute$c_compute }\n       if (acc_on_device (acc_device_host) .eqv. .TRUE.) then\n@@ -189,7 +184,6 @@ program main\n   nn = 0\n \n   !$acc parallel if (nn == 1) ! { dg-line l_compute[incr c_compute] }\n-  ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n     do i = 1, N\n        ! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target *-*-* } l_compute$c_compute }\n       if (acc_on_device (acc_device_host) .eqv. .TRUE.) then\n@@ -209,7 +203,6 @@ program main\n   nn = 1\n \n   !$acc parallel copyin (a(1:N)) copyout (b(1:N)) if ((nn + nn) > 0) ! { dg-line l_compute[incr c_compute] }\n-  ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n     do i = 1, N\n        ! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target *-*-* } l_compute$c_compute }\n       if (acc_on_device (acc_device_host) .eqv. .TRUE.) then\n@@ -235,7 +228,6 @@ program main\n   nn = 0;\n \n   !$acc parallel copyin (a(1:N)) copyout (b(1:N)) if ((nn + nn) > 0) ! { dg-line l_compute[incr c_compute] }\n-  ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n     do i = 1, N\n        ! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target *-*-* } l_compute$c_compute }\n       if (acc_on_device (acc_device_host) .eqv. .TRUE.) then\n@@ -253,7 +245,6 @@ program main\n   a(:) = 91.0\n \n   !$acc parallel copyin (a(1:N)) copyout (b(1:N)) if (-2 > 0) ! { dg-line l_compute[incr c_compute] }\n-  ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n     do i = 1, N\n        ! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target *-*-* } l_compute$c_compute }\n       if (acc_on_device (acc_device_host) .eqv. .TRUE.) then\n@@ -271,7 +262,6 @@ program main\n   a(:) = 43.0\n \n   !$acc parallel copyin (a(1:N)) copyout (b(1:N)) if (one == 1) ! { dg-line l_compute[incr c_compute] }\n-  ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n     do i = 1, N\n        ! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target *-*-* } l_compute$c_compute }\n       if (acc_on_device (acc_device_host) .eqv. .TRUE.) then\n@@ -295,7 +285,6 @@ program main\n   a(:) = 87.0\n \n   !$acc parallel if (one == 0) ! { dg-line l_compute[incr c_compute] }\n-  ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n     do i = 1, N\n        ! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target *-*-* } l_compute$c_compute }\n       if (acc_on_device (acc_device_host) .eqv. .TRUE.) then\n@@ -374,11 +363,9 @@ program main\n   b(:) = 0.0\n \n   !$acc data copyin (a(1:N)) copyout (b(1:N)) if (1 == 1)\n-  ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n-  ! { dg-note {variable 'parm\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 }\n+  ! { dg-note {variable 'parm\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n \n-    !$acc parallel present (a(1:N)) ! { dg-line l_compute[incr c_compute] }\n-    ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n+    !$acc parallel present (a(1:N))\n        do i = 1, N\n            b(i) = a(i)\n        end do\n@@ -393,8 +380,7 @@ program main\n   b(:) = 1.0\n \n   !$acc data copyin (a(1:N)) copyout (b(1:N)) if (0 == 1)\n-  ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target { ! openacc_host_selected } } .-1 }\n-  ! { dg-note {variable 'parm\\.[0-9]+' declared in block is candidate for adjusting OpenACC privatization level} \"\" { target { ! openacc_host_selected } } .-2 }\n+  ! { dg-note {variable 'parm\\.[0-9]+' declared in block is candidate for adjusting OpenACC privatization level} \"\" { target { ! openacc_host_selected } } .-1 }\n \n #if !ACC_MEM_SHARED\n   if (acc_is_present (a) .eqv. .TRUE.) STOP 21\n@@ -407,27 +393,23 @@ program main\n   b(:) = 21.0\n \n   !$acc data copyin (a(1:N)) if (1 == 1)\n-  ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n-  ! { dg-note {variable 'parm\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 }\n-  ! { dg-note {variable 'parm\\.[0-9]+' declared in block is candidate for adjusting OpenACC privatization level} \"\" { target { ! openacc_host_selected } } .-3 }\n+  ! { dg-note {variable 'parm\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n+  ! { dg-note {variable 'parm\\.[0-9]+' declared in block is candidate for adjusting OpenACC privatization level} \"\" { target { ! openacc_host_selected } } .-2 }\n \n #if !ACC_MEM_SHARED\n     if (acc_is_present (a) .eqv. .FALSE.) STOP 23\n #endif\n \n     !$acc data copyout (b(1:N)) if (0 == 1)\n-    ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n-    ! { dg-note {variable 'parm\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 }\n-    ! { dg-note {variable 'parm\\.[0-9]+' declared in block is candidate for adjusting OpenACC privatization level} \"\" { target { ! openacc_host_selected } } .-3 }\n+    ! { dg-note {variable 'parm\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n+    ! { dg-note {variable 'parm\\.[0-9]+' declared in block is candidate for adjusting OpenACC privatization level} \"\" { target { ! openacc_host_selected } } .-2 }\n #if !ACC_MEM_SHARED\n       if (acc_is_present (b) .eqv. .TRUE.) STOP 24\n #endif\n         !$acc data copyout (b(1:N)) if (1 == 1)\n-        ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n-        ! { dg-note {variable 'parm\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 }\n+        ! { dg-note {variable 'parm\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n \n-        !$acc parallel present (a(1:N)) present (b(1:N)) ! { dg-line l_compute[incr c_compute] }\n-        ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n+        !$acc parallel present (a(1:N)) present (b(1:N))\n           do i = 1, N\n             b(i) = a(i)\n           end do\n@@ -508,7 +490,6 @@ program main\n   a(:) = 4.0\n \n   !$acc kernels copyin (a(1:N)) copyout (b(1:N)) if (1 == 1) ! { dg-line l_compute[incr c_compute] }\n-  ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n      do i = 1, N\n         ! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target *-*-* } l_compute$c_compute }\n         if (acc_on_device (acc_device_host) .eqv. .TRUE.) then\n@@ -532,7 +513,6 @@ program main\n   a(:) = 16.0\n \n   !$acc kernels if (0 == 1) ! { dg-line l_compute[incr c_compute] }\n-  ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n      do i = 1, N\n         ! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target *-*-* } l_compute$c_compute }\n        if (acc_on_device (acc_device_host) .eqv. .TRUE.) then\n@@ -550,7 +530,6 @@ program main\n   a(:) = 8.0\n \n   !$acc kernels copyin (a(1:N)) copyout (b(1:N)) if (one == 1) ! { dg-line l_compute[incr c_compute] }\n-  ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n     do i = 1, N\n        ! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target *-*-* } l_compute$c_compute }\n       if (acc_on_device (acc_device_host) .eqv. .TRUE.) then\n@@ -574,7 +553,6 @@ program main\n   a(:) = 22.0\n \n   !$acc kernels if (zero == 1) ! { dg-line l_compute[incr c_compute] }\n-  ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n     do i = 1, N\n        ! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target *-*-* } l_compute$c_compute }\n       if (acc_on_device (acc_device_host) .eqv. .TRUE.) then\n@@ -592,7 +570,6 @@ program main\n   a(:) = 16.0\n \n   !$acc kernels copyin (a(1:N)) copyout (b(1:N)) if (.TRUE.) ! { dg-line l_compute[incr c_compute] }\n-  ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n     do i = 1, N\n        ! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target *-*-* } l_compute$c_compute }\n       if (acc_on_device (acc_device_host) .eqv. .TRUE.) then\n@@ -616,7 +593,6 @@ program main\n   a(:) = 76.0\n \n   !$acc kernels if (.FALSE.) ! { dg-line l_compute[incr c_compute] }\n-  ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n     do i = 1, N\n        ! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target *-*-* } l_compute$c_compute }\n       if (acc_on_device (acc_device_host) .eqv. .TRUE.) then\n@@ -636,7 +612,6 @@ program main\n   nn = 1\n \n   !$acc kernels copyin (a(1:N)) copyout (b(1:N)) if (nn == 1) ! { dg-line l_compute[incr c_compute] }\n-  ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n     do i = 1, N\n        ! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target *-*-* } l_compute$c_compute }\n       if (acc_on_device (acc_device_host) .eqv. .TRUE.) then\n@@ -662,7 +637,6 @@ program main\n   nn = 0\n \n   !$acc kernels if (nn == 1) ! { dg-line l_compute[incr c_compute] }\n-  ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n     do i = 1, N\n        ! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target *-*-* } l_compute$c_compute }\n       if (acc_on_device (acc_device_host) .eqv. .TRUE.) then\n@@ -682,7 +656,6 @@ program main\n   nn = 1\n \n   !$acc kernels copyin (a(1:N)) copyout (b(1:N)) if ((nn + nn) > 0) ! { dg-line l_compute[incr c_compute] }\n-  ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n     do i = 1, N\n        ! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target *-*-* } l_compute$c_compute }\n       if (acc_on_device (acc_device_host) .eqv. .TRUE.) then\n@@ -708,7 +681,6 @@ program main\n   nn = 0;\n \n   !$acc kernels copyin (a(1:N)) copyout (b(1:N)) if ((nn + nn) > 0) ! { dg-line l_compute[incr c_compute] }\n-  ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n     do i = 1, N\n        ! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target *-*-* } l_compute$c_compute }\n       if (acc_on_device (acc_device_host) .eqv. .TRUE.) then\n@@ -726,7 +698,6 @@ program main\n   a(:) = 91.0\n \n   !$acc kernels copyin (a(1:N)) copyout (b(1:N)) if (-2 > 0) ! { dg-line l_compute[incr c_compute] }\n-  ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n     do i = 1, N\n        ! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target *-*-* } l_compute$c_compute }\n       if (acc_on_device (acc_device_host) .eqv. .TRUE.) then\n@@ -744,7 +715,6 @@ program main\n   a(:) = 43.0\n \n   !$acc kernels copyin (a(1:N)) copyout (b(1:N)) if (one == 1) ! { dg-line l_compute[incr c_compute] }\n-  ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n     do i = 1, N\n        ! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target *-*-* } l_compute$c_compute }\n       if (acc_on_device (acc_device_host) .eqv. .TRUE.) then\n@@ -768,7 +738,6 @@ program main\n   a(:) = 87.0\n \n   !$acc kernels if (one == 0) ! { dg-line l_compute[incr c_compute] }\n-  ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n     do i = 1, N\n       ! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target *-*-* } l_compute$c_compute }\n       if (acc_on_device (acc_device_host) .eqv. .TRUE.) then\n@@ -847,11 +816,9 @@ program main\n   b(:) = 0.0\n \n   !$acc data copyin (a(1:N)) copyout (b(1:N)) if (1 == 1)\n-  ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n-  ! { dg-note {variable 'parm\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 }\n+  ! { dg-note {variable 'parm\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n \n-    !$acc kernels present (a(1:N)) ! { dg-line l_compute[incr c_compute] }\n-    ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n+    !$acc kernels present (a(1:N))\n        do i = 1, N\n            b(i) = a(i)\n        end do\n@@ -866,8 +833,7 @@ program main\n   b(:) = 1.0\n \n   !$acc data copyin (a(1:N)) copyout (b(1:N)) if (0 == 1)\n-  ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target { ! openacc_host_selected } } .-1 }\n-  ! { dg-note {variable 'parm\\.[0-9]+' declared in block is candidate for adjusting OpenACC privatization level} \"\" { target { ! openacc_host_selected } } .-2 }\n+  ! { dg-note {variable 'parm\\.[0-9]+' declared in block is candidate for adjusting OpenACC privatization level} \"\" { target { ! openacc_host_selected } } .-1 }\n \n #if !ACC_MEM_SHARED\n   if (acc_is_present (a) .eqv. .TRUE.) STOP 56\n@@ -880,27 +846,23 @@ program main\n   b(:) = 21.0\n \n   !$acc data copyin (a(1:N)) if (1 == 1)\n-  ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n-  ! { dg-note {variable 'parm\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 }\n-  ! { dg-note {variable 'parm\\.[0-9]+' declared in block is candidate for adjusting OpenACC privatization level} \"\" { target { ! openacc_host_selected } } .-3 }\n+  ! { dg-note {variable 'parm\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n+  ! { dg-note {variable 'parm\\.[0-9]+' declared in block is candidate for adjusting OpenACC privatization level} \"\" { target { ! openacc_host_selected } } .-2 }\n \n #if !ACC_MEM_SHARED\n     if (acc_is_present (a) .eqv. .FALSE.) STOP 58\n #endif\n \n     !$acc data copyout (b(1:N)) if (0 == 1)\n-    ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n-    ! { dg-note {variable 'parm\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 }\n-    ! { dg-note {variable 'parm\\.[0-9]+' declared in block is candidate for adjusting OpenACC privatization level} \"\" { target { ! openacc_host_selected } } .-3 }\n+    ! { dg-note {variable 'parm\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n+    ! { dg-note {variable 'parm\\.[0-9]+' declared in block is candidate for adjusting OpenACC privatization level} \"\" { target { ! openacc_host_selected } } .-2 }\n #if !ACC_MEM_SHARED\n       if (acc_is_present (b) .eqv. .TRUE.) STOP 59\n #endif\n         !$acc data copyout (b(1:N)) if (1 == 1)\n-        ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n-        ! { dg-note {variable 'parm\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 }\n+        ! { dg-note {variable 'parm\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n \n-        !$acc kernels present (a(1:N)) present (b(1:N)) ! { dg-line l_compute[incr c_compute] }\n-        ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute }\n+        !$acc kernels present (a(1:N)) present (b(1:N))\n           do i = 1, N\n             b(i) = a(i)\n           end do"}]}