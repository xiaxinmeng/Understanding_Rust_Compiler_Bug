{"sha": "5ae4a73057dd26e7f09b5ba5190b84b1bbea4368", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWFlNGE3MzA1N2RkMjZlN2YwOWI1YmE1MTkwYjg0YjFiYmVhNDM2OA==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2021-06-10T17:59:23Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2021-06-10T18:19:39Z"}, "message": "d: Fix ICE in TypeInfoDeclaration, at dmd/declaration.c (PR100967)\n\nGenerate a stub TypeInfo class even if the root Object class is missing.\nThe front-end will take care of issuing an error and abort the\ncompilation when running semantic on constructed TypeInfo objects.\n\nThe errors issued by the code generation pass relating to missing or\ndisabled RTTI has been consolidated into a single function, so that a\nmeaningful error will be emitted before the front-end terminates.\n\ngcc/d/ChangeLog:\n\n\tPR d/100967\n\t* d-frontend.cc (getTypeInfoType): Move TypeInfo checks to\n\tcheck_typeinfo_type and call new function.\n\t* d-tree.h (check_typeinfo_type): Declare.\n\t* typeinfo.cc: Include dmd/scope.h.\n\t(create_frontend_tinfo_types): Generate front-end types even if Object\n\tis missing.\n\t(build_typeinfo): Move TypeInfo checks to check_typeinfo_type and call\n\tnew function.\n\t(check_typeinfo_type): New function.\n\ngcc/testsuite/ChangeLog:\n\n\tPR d/100967\n\t* gdc.dg/pr100967.d: New test.", "tree": {"sha": "51bc8761d7715410f1e4b7e6a5ad4480ac3d9ab7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51bc8761d7715410f1e4b7e6a5ad4480ac3d9ab7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ae4a73057dd26e7f09b5ba5190b84b1bbea4368", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ae4a73057dd26e7f09b5ba5190b84b1bbea4368", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ae4a73057dd26e7f09b5ba5190b84b1bbea4368", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ae4a73057dd26e7f09b5ba5190b84b1bbea4368/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a895955095b6f4d9fcf3b6686dc1113591da28d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a895955095b6f4d9fcf3b6686dc1113591da28d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a895955095b6f4d9fcf3b6686dc1113591da28d"}], "stats": {"total": 83, "additions": 45, "deletions": 38}, "files": [{"sha": "30fc6d435d082ced26c90cad6839bfde12dcf27d", "filename": "gcc/d/d-frontend.cc", "status": "modified", "additions": 1, "deletions": 32, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae4a73057dd26e7f09b5ba5190b84b1bbea4368/gcc%2Fd%2Fd-frontend.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae4a73057dd26e7f09b5ba5190b84b1bbea4368/gcc%2Fd%2Fd-frontend.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-frontend.cc?ref=5ae4a73057dd26e7f09b5ba5190b84b1bbea4368", "patch": "@@ -185,39 +185,8 @@ eval_builtin (Loc loc, FuncDeclaration *fd, Expressions *arguments)\n Type *\n getTypeInfoType (Loc loc, Type *type, Scope *sc)\n {\n-  if (!global.params.useTypeInfo)\n-    {\n-      /* Even when compiling without RTTI we should still be able to evaluate\n-\t TypeInfo at compile-time, just not at run-time.  */\n-      if (!sc || !(sc->flags & SCOPEctfe))\n-\t{\n-\t  static int warned = 0;\n-\n-\t  if (!warned)\n-\t    {\n-\t      error_at (make_location_t (loc),\n-\t\t\t\"%<object.TypeInfo%> cannot be used with %<-fno-rtti%>\");\n-\t      warned = 1;\n-\t    }\n-\t}\n-    }\n-\n-  if (Type::dtypeinfo == NULL\n-      || (Type::dtypeinfo->storage_class & STCtemp))\n-    {\n-      /* If TypeInfo has not been declared, warn about each location once.  */\n-      static Loc warnloc;\n-\n-      if (!loc.equals (warnloc))\n-\t{\n-\t  error_at (make_location_t (loc),\n-\t\t    \"%<object.TypeInfo%> could not be found, \"\n-\t\t    \"but is implicitly used\");\n-\t  warnloc = loc;\n-\t}\n-    }\n-\n   gcc_assert (type->ty != Terror);\n+  check_typeinfo_type (loc, sc);\n   create_typeinfo (type, sc ? sc->_module->importedFrom : NULL);\n   return type->vtinfo->type;\n }"}, {"sha": "6ef9af2a991e0269998d3bc8cbdab0ebf6cc7c73", "filename": "gcc/d/d-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae4a73057dd26e7f09b5ba5190b84b1bbea4368/gcc%2Fd%2Fd-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae4a73057dd26e7f09b5ba5190b84b1bbea4368/gcc%2Fd%2Fd-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-tree.h?ref=5ae4a73057dd26e7f09b5ba5190b84b1bbea4368", "patch": "@@ -670,6 +670,7 @@ extern tree layout_classinfo (ClassDeclaration *);\n extern unsigned base_vtable_offset (ClassDeclaration *, BaseClass *);\n extern tree get_typeinfo_decl (TypeInfoDeclaration *);\n extern tree get_classinfo_decl (ClassDeclaration *);\n+extern void check_typeinfo_type (const Loc &, Scope *);\n extern tree build_typeinfo (const Loc &, Type *);\n extern void create_typeinfo (Type *, Module *);\n extern void create_tinfo_types (Module *);"}, {"sha": "9d6464deb072e0e0ef9091291cbc14c2ed84e896", "filename": "gcc/d/typeinfo.cc", "status": "modified", "additions": 32, "deletions": 6, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae4a73057dd26e7f09b5ba5190b84b1bbea4368/gcc%2Fd%2Ftypeinfo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae4a73057dd26e7f09b5ba5190b84b1bbea4368/gcc%2Fd%2Ftypeinfo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Ftypeinfo.cc?ref=5ae4a73057dd26e7f09b5ba5190b84b1bbea4368", "patch": "@@ -27,6 +27,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"dmd/identifier.h\"\n #include \"dmd/module.h\"\n #include \"dmd/mtype.h\"\n+#include \"dmd/scope.h\"\n #include \"dmd/template.h\"\n #include \"dmd/target.h\"\n \n@@ -244,8 +245,8 @@ create_tinfo_types (Module *mod)\n static void\n create_frontend_tinfo_types (void)\n {\n-  /* If there's no Object class defined, then neither can TypeInfo be.  */\n-  if (object_module == NULL || ClassDeclaration::object == NULL)\n+  /* If there's no object module, then neither can there be TypeInfo.  */\n+  if (object_module == NULL)\n     return;\n \n   /* Create all frontend TypeInfo classes declarations.  We rely on all\n@@ -1373,24 +1374,49 @@ get_classinfo_decl (ClassDeclaration *decl)\n   return decl->csym;\n }\n \n-/* Returns typeinfo reference for TYPE.  */\n+/* Performs sanity checks on the `object.TypeInfo' type, raising an error if\n+   RTTI is disabled, or the type is missing.  */\n \n-tree\n-build_typeinfo (const Loc &loc, Type *type)\n+void\n+check_typeinfo_type (const Loc &loc, Scope *sc)\n {\n   if (!global.params.useTypeInfo)\n     {\n       static int warned = 0;\n \n-      if (!warned)\n+      /* Even when compiling without RTTI we should still be able to evaluate\n+\t TypeInfo at compile-time, just not at run-time.  */\n+      if (!warned && (!sc || !(sc->flags & SCOPEctfe)))\n \t{\n \t  error_at (make_location_t (loc),\n \t\t    \"%<object.TypeInfo%> cannot be used with %<-fno-rtti%>\");\n \t  warned = 1;\n \t}\n     }\n \n+  if (Type::dtypeinfo == NULL\n+      || (Type::dtypeinfo->storage_class & STCtemp))\n+    {\n+      /* If TypeInfo has not been declared, warn about each location once.  */\n+      static Loc warnloc;\n+\n+      if (!warnloc.equals (loc))\n+\t{\n+\t  error_at (make_location_t (loc),\n+\t\t    \"%<object.TypeInfo%> could not be found, \"\n+\t\t    \"but is implicitly used\");\n+\t  warnloc = loc;\n+\t}\n+    }\n+}\n+\n+/* Returns typeinfo reference for TYPE.  */\n+\n+tree\n+build_typeinfo (const Loc &loc, Type *type)\n+{\n   gcc_assert (type->ty != Terror);\n+  check_typeinfo_type (loc, NULL);\n   create_typeinfo (type, NULL);\n   return build_address (get_typeinfo_decl (type->vtinfo));\n }"}, {"sha": "582ad58267670f1c8483eaad93bd5357c69be242", "filename": "gcc/testsuite/gdc.dg/pr100967.d", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae4a73057dd26e7f09b5ba5190b84b1bbea4368/gcc%2Ftestsuite%2Fgdc.dg%2Fpr100967.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae4a73057dd26e7f09b5ba5190b84b1bbea4368/gcc%2Ftestsuite%2Fgdc.dg%2Fpr100967.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fpr100967.d?ref=5ae4a73057dd26e7f09b5ba5190b84b1bbea4368", "patch": "@@ -0,0 +1,11 @@\n+// https://gcc.gnu.org/bugzilla/show_bug.cgi?id=100967\n+// { dg-do compile }\n+\n+module object; // { dg-error \"class object.TypeInfo missing or corrupt object.d\" }\n+\n+extern(C) int main()\n+{\n+    int[int] aa;\n+    aa[0] = 1;  // { dg-error \".object.TypeInfo. could not be found, but is implicitly used\" }\n+    return 0;\n+}"}]}