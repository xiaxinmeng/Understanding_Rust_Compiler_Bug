{"sha": "0f8b14ee8ae787d7fba104dbdeb31e0400f6b7d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGY4YjE0ZWU4YWU3ODdkN2ZiYTEwNGRiZGViMzFlMDQwMGY2YjdkMg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-09-10T16:28:27Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-09-10T16:28:27Z"}, "message": "Implement std::common_reference for C++20\n\n\t* include/std/type_traits (__do_common_type_impl): Implement\n\tadditional COND-RES(CREF(D1), CRED(D2)) condition for C++20.\n\t(basic_common_reference, common_reference, common_reference_t): Define\n\tfor C++20.\n\t* testsuite/20_util/common_reference/requirements/alias_decl.cc: New\n\ttest.\n\t* testsuite/20_util/common_reference/requirements/\n\texplicit_instantiation.cc: New test.\n\t* testsuite/20_util/common_reference/requirements/typedefs.cc: New\n\ttest.\n\nFrom-SVN: r275594", "tree": {"sha": "9d0f6bacb2a57e50344f8c1fb8782e0f2542d507", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d0f6bacb2a57e50344f8c1fb8782e0f2542d507"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f8b14ee8ae787d7fba104dbdeb31e0400f6b7d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f8b14ee8ae787d7fba104dbdeb31e0400f6b7d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f8b14ee8ae787d7fba104dbdeb31e0400f6b7d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f8b14ee8ae787d7fba104dbdeb31e0400f6b7d2/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8b0314a583b028ad2d6508b455e33f5787bffe1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8b0314a583b028ad2d6508b455e33f5787bffe1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8b0314a583b028ad2d6508b455e33f5787bffe1"}], "stats": {"total": 359, "additions": 353, "deletions": 6}, "files": [{"sha": "b12ebe56913de8af109638ad2e64f06d7c0714fb", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f8b14ee8ae787d7fba104dbdeb31e0400f6b7d2/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f8b14ee8ae787d7fba104dbdeb31e0400f6b7d2/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0f8b14ee8ae787d7fba104dbdeb31e0400f6b7d2", "patch": "@@ -1,5 +1,16 @@\n 2019-09-10  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/std/type_traits (__do_common_type_impl): Implement\n+\tadditional COND-RES(CREF(D1), CRED(D2)) condition for C++20.\n+\t(basic_common_reference, common_reference, common_reference_t): Define\n+\tfor C++20.\n+\t* testsuite/20_util/common_reference/requirements/alias_decl.cc: New\n+\ttest.\n+\t* testsuite/20_util/common_reference/requirements/\n+\texplicit_instantiation.cc: New test.\n+\t* testsuite/20_util/common_reference/requirements/typedefs.cc: New\n+\ttest.\n+\n \t* include/std/charconv (to_chars): Rename to __to_chars_i. Define\n \tnon-template overloads for each signed and unsigned integer type and\n \tchar. Define deleted overload for bool (LWG 3266)."}, {"sha": "dc8a019324de93b9892475efb51ccc0433ad0b66", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 178, "deletions": 6, "changes": 184, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f8b14ee8ae787d7fba104dbdeb31e0400f6b7d2/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f8b14ee8ae787d7fba104dbdeb31e0400f6b7d2/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=0f8b14ee8ae787d7fba104dbdeb31e0400f6b7d2", "patch": "@@ -2189,6 +2189,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct conditional<false, _Iftrue, _Iffalse>\n     { typedef _Iffalse type; };\n \n+  // __remove_cvref_t (std::remove_cvref_t for C++11).\n+  template<typename _Tp>\n+    using __remove_cvref_t\n+     = typename remove_cv<typename remove_reference<_Tp>::type>::type;\n+\n   /// common_type\n   template<typename... _Tp>\n     struct common_type;\n@@ -2201,12 +2206,26 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       using __cond_t\n \t= decltype(true ? std::declval<_Tp>() : std::declval<_Up>());\n \n+    // if decay_t<decltype(false ? declval<D1>() : declval<D2>())>\n+    // denotes a valid type, let C denote that type.\n     template<typename _Tp, typename _Up>\n-      static __success_type<typename decay<__cond_t<_Tp, _Up>>::type>\n+      static __success_type<__decay_t<__cond_t<_Tp, _Up>>>\n       _S_test(int);\n \n+#if __cplusplus > 201703L\n+    // Otherwise, if COND-RES(CREF(D1), CREF(D2)) denotes a type,\n+    // let C denote the type decay_t<COND-RES(CREF(D1), CREF(D2))>.\n+    template<typename _Tp, typename _Up>\n+      static __success_type<__remove_cvref_t<__cond_t<const _Tp&, const _Up&>>>\n+      _S_test_2(int);\n+#endif\n+\n     template<typename, typename>\n       static __failure_type\n+      _S_test_2(...);\n+\n+    template<typename _Tp, typename _Up>\n+      static decltype(_S_test_2<_Tp, _Up>(0))\n       _S_test(...);\n   };\n \n@@ -2304,11 +2323,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return __declval<_Tp>(0);\n     }\n \n-  // __remove_cvref_t (std::remove_cvref_t for C++11).\n-  template<typename _Tp>\n-    using __remove_cvref_t\n-     = typename remove_cv<typename remove_reference<_Tp>::type>::type;\n-\n   /// result_of\n   template<typename _Signature>\n     class result_of;\n@@ -3248,6 +3262,164 @@ template <typename _From, typename _To>\n   { return __builtin_is_constant_evaluated(); }\n #endif\n \n+  template<typename _From, typename _To>\n+    using __copy_cv = typename __match_cv_qualifiers<_From, _To>::__type;\n+\n+  template<typename _Xp, typename _Yp>\n+    using __cond_res\n+      = decltype(false ? declval<_Xp(&)()>()() : declval<_Yp(&)()>()());\n+\n+  template<typename _Ap, typename _Bp, typename = void>\n+    struct __common_ref_impl\n+    { };\n+\n+  // [meta.trans.other], COMMON-REF(A, B)\n+  template<typename _Ap, typename _Bp>\n+    using __common_ref = typename __common_ref_impl<_Ap, _Bp>::type;\n+\n+  // If A and B are both lvalue reference types, ...\n+  template<typename _Xp, typename _Yp>\n+    struct __common_ref_impl<_Xp&, _Yp&,\n+      __void_t<__cond_res<__copy_cv<_Xp, _Yp>&, __copy_cv<_Yp, _Xp>&>>>\n+    { using type = __cond_res<__copy_cv<_Xp, _Yp>&, __copy_cv<_Yp, _Xp>&>; };\n+\n+  // let C be remove_reference_t<COMMON-REF(X&, Y&)>&&\n+  template<typename _Xp, typename _Yp>\n+    using __common_ref_C = remove_reference_t<__common_ref<_Xp&, _Yp&>>&&;\n+\n+  // If A and B are both rvalue reference types, ...\n+  template<typename _Xp, typename _Yp>\n+    struct __common_ref_impl<_Xp&&, _Yp&&,\n+      _Require<is_convertible<_Xp&&, __common_ref_C<_Xp, _Yp>>,\n+\t       is_convertible<_Yp&&, __common_ref_C<_Xp, _Yp>>>>\n+    { using type = __common_ref_C<_Xp, _Yp>; };\n+\n+  // let D be COMMON-REF(const X&, Y&)\n+  template<typename _Xp, typename _Yp>\n+    using __common_ref_D = __common_ref<const _Xp&, _Yp&>;\n+\n+  // If A is an rvalue reference and B is an lvalue reference, ...\n+  template<typename _Xp, typename _Yp>\n+    struct __common_ref_impl<_Xp&&, _Yp&,\n+      _Require<is_convertible<_Xp&&, __common_ref_D<_Xp, _Yp>>>>\n+    { using type = __common_ref_D<_Xp, _Yp>; };\n+\n+  // If A is an lvalue reference and B is an rvalue reference, ...\n+  template<typename _Xp, typename _Yp>\n+    struct __common_ref_impl<_Xp&, _Yp&&>\n+    : __common_ref_impl<_Yp&&, _Xp&>\n+    { };\n+\n+  template<typename _Tp, typename _Up,\n+\t   template<typename> class _TQual, template<typename> class _UQual>\n+    struct basic_common_reference\n+    { };\n+\n+  template<typename _Tp>\n+    struct __xref\n+    { template<typename _Up> using __type = __copy_cv<_Tp, _Up>; };\n+\n+  template<typename _Tp>\n+    struct __xref<_Tp&>\n+    { template<typename _Up> using __type = __copy_cv<_Tp, _Up>&; };\n+\n+  template<typename _Tp>\n+    struct __xref<_Tp&&>\n+    { template<typename _Up> using __type = __copy_cv<_Tp, _Up>&&; };\n+\n+  template<typename _Tp1, typename _Tp2>\n+    using __basic_common_ref\n+      = typename basic_common_reference<remove_cvref_t<_Tp1>,\n+\t\t\t\t\tremove_cvref_t<_Tp2>,\n+\t\t\t\t\t__xref<_Tp1>::template __type,\n+\t\t\t\t\t__xref<_Tp2>::template __type>::type;\n+\n+  template<typename... _Tp>\n+    struct common_reference;\n+\n+  template<typename... _Tp>\n+    using common_reference_t = typename common_reference<_Tp...>::type;\n+\n+  // If sizeof...(T) is zero, there shall be no member type.\n+  template<>\n+    struct common_reference<>\n+    { };\n+\n+  // If sizeof...(T) is one ...\n+  template<typename _Tp0>\n+    struct common_reference<_Tp0>\n+    { using type = _Tp0; };\n+\n+  template<typename _Tp1, typename _Tp2, int _Bullet = 1, typename = void>\n+    struct __common_reference_impl\n+    : __common_reference_impl<_Tp1, _Tp2, _Bullet + 1>\n+    { };\n+\n+  // If sizeof...(T) is two ...\n+  template<typename _Tp1, typename _Tp2>\n+    struct common_reference<_Tp1, _Tp2>\n+    : __common_reference_impl<_Tp1, _Tp2>\n+    { };\n+\n+  // If T1 and T2 are reference types and COMMON-REF(T1, T2) is well-formed, ...\n+  template<typename _Tp1, typename _Tp2>\n+    struct __common_reference_impl<_Tp1&, _Tp2&, 1,\n+\t\t\t\t   void_t<__common_ref<_Tp1&, _Tp2&>>>\n+    { using type = __common_ref<_Tp1&, _Tp2&>; };\n+\n+  template<typename _Tp1, typename _Tp2>\n+    struct __common_reference_impl<_Tp1&&, _Tp2&&, 1,\n+\t\t\t\t   void_t<__common_ref<_Tp1&&, _Tp2&&>>>\n+    { using type = __common_ref<_Tp1&&, _Tp2&&>; };\n+\n+  template<typename _Tp1, typename _Tp2>\n+    struct __common_reference_impl<_Tp1&, _Tp2&&, 1,\n+\t\t\t\t   void_t<__common_ref<_Tp1&, _Tp2&&>>>\n+    { using type = __common_ref<_Tp1&, _Tp2&&>; };\n+\n+  template<typename _Tp1, typename _Tp2>\n+    struct __common_reference_impl<_Tp1&&, _Tp2&, 1,\n+\t\t\t\t   void_t<__common_ref<_Tp1&&, _Tp2&>>>\n+    { using type = __common_ref<_Tp1&&, _Tp2&>; };\n+\n+  // Otherwise, if basic_common_reference<...>::type is well-formed, ...\n+  template<typename _Tp1, typename _Tp2>\n+    struct __common_reference_impl<_Tp1, _Tp2, 2,\n+\t\t\t\t   void_t<__basic_common_ref<_Tp1, _Tp2>>>\n+    { using type = __basic_common_ref<_Tp1, _Tp2>; };\n+\n+  // Otherwise, if COND-RES(T1, T2) is well-formed, ...\n+  template<typename _Tp1, typename _Tp2>\n+    struct __common_reference_impl<_Tp1, _Tp2, 3,\n+\t\t\t\t   void_t<__cond_res<_Tp1, _Tp2>>>\n+    { using type = __cond_res<_Tp1, _Tp2>; };\n+\n+  // Otherwise, if common_type_t<T1, T2> is well-formed, ...\n+  template<typename _Tp1, typename _Tp2>\n+    struct __common_reference_impl<_Tp1, _Tp2, 4,\n+\t\t\t\t   void_t<common_type_t<_Tp1, _Tp2>>>\n+    { using type = common_type_t<_Tp1, _Tp2>; };\n+\n+  // Otherwise, there shall be no member type.\n+  template<typename _Tp1, typename _Tp2>\n+    struct __common_reference_impl<_Tp1, _Tp2, 5, void>\n+    { };\n+\n+  // Otherwise, if sizeof...(T) is greater than two, ...\n+  template<typename _Tp1, typename _Tp2, typename... _Rest>\n+    struct common_reference<_Tp1, _Tp2, _Rest...>\n+    : __common_type_fold<common_reference<_Tp1, _Tp2>,\n+\t\t\t __common_type_pack<_Rest...>>\n+    { };\n+\n+  // Reuse __common_type_fold for common_reference<T1, T2, Rest...>\n+  template<typename _Tp1, typename _Tp2, typename... _Rest>\n+    struct __common_type_fold<common_reference<_Tp1, _Tp2>,\n+\t\t\t      __common_type_pack<_Rest...>,\n+\t\t\t      void_t<common_reference_t<_Tp1, _Tp2>>>\n+    : public common_reference<common_reference_t<_Tp1, _Tp2>, _Rest...>\n+    { };\n+\n #endif // C++2a\n \n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "2c318405354302ad0a15450fcdfc4234176206d5", "filename": "libstdc++-v3/testsuite/20_util/common_reference/requirements/alias_decl.cc", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f8b14ee8ae787d7fba104dbdeb31e0400f6b7d2/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fcommon_reference%2Frequirements%2Falias_decl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f8b14ee8ae787d7fba104dbdeb31e0400f6b7d2/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fcommon_reference%2Frequirements%2Falias_decl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fcommon_reference%2Frequirements%2Falias_decl.cc?ref=0f8b14ee8ae787d7fba104dbdeb31e0400f6b7d2", "patch": "@@ -0,0 +1,30 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <type_traits>\n+\n+using namespace std;\n+\n+static_assert( is_same_v<common_reference<int>::type,\n+\t\t\t common_reference_t<int>>);\n+static_assert( is_same_v<common_reference<int&, const int&>::type,\n+\t\t\t common_reference_t<int&, const int&>>);\n+static_assert( is_same_v<common_reference<int, long&, char, unsigned&>::type,\n+\t\t\t common_reference_t<int, long&, char, unsigned&>>);"}, {"sha": "6b0337741caad5a086e1e343ec533d9876665485", "filename": "libstdc++-v3/testsuite/20_util/common_reference/requirements/explicit_instantiation.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f8b14ee8ae787d7fba104dbdeb31e0400f6b7d2/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fcommon_reference%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f8b14ee8ae787d7fba104dbdeb31e0400f6b7d2/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fcommon_reference%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fcommon_reference%2Frequirements%2Fexplicit_instantiation.cc?ref=0f8b14ee8ae787d7fba104dbdeb31e0400f6b7d2", "patch": "@@ -0,0 +1,42 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <type_traits>\n+\n+using test_type1 = int;\n+using test_type2 = int&;\n+using test_type3 = double;\n+using test_type4 = float&;\n+using test_type5 = void;\n+using test_type6 = const void;\n+\n+namespace std\n+{\n+  template struct common_reference<>;\n+  template struct common_reference<test_type1>;\n+  template struct common_reference<test_type1, test_type2>;\n+  template struct common_reference<test_type1, test_type2, test_type3>;\n+  template struct common_reference<test_type1, test_type2, test_type3, test_type4>;\n+\n+  template struct common_reference<test_type5>;\n+  template struct common_reference<test_type5, test_type6>;\n+}"}, {"sha": "e0aec8b6cda02490e6b41c4daf43a634b5452aff", "filename": "libstdc++-v3/testsuite/20_util/common_reference/requirements/typedefs.cc", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f8b14ee8ae787d7fba104dbdeb31e0400f6b7d2/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fcommon_reference%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f8b14ee8ae787d7fba104dbdeb31e0400f6b7d2/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fcommon_reference%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fcommon_reference%2Frequirements%2Ftypedefs.cc?ref=0f8b14ee8ae787d7fba104dbdeb31e0400f6b7d2", "patch": "@@ -0,0 +1,92 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <type_traits>\n+\n+template<typename T, typename = void>\n+  struct has_type : std::false_type { };\n+\n+template<typename T>\n+  struct has_type<T, std::void_t<typename T::type>> : std::true_type { };\n+\n+template<typename... T>\n+constexpr bool\n+has_common_ref()\n+{\n+  return has_type<std::common_reference<T...>>::value;\n+}\n+\n+using std::is_same_v;\n+using std::common_reference_t;\n+\n+void test01()\n+{\n+\n+  static_assert( !has_common_ref<>() );\n+  static_assert( !has_common_ref<char(*)(), int(*)()>() );\n+  static_assert( !has_common_ref<void*, int>() );\n+\n+  static_assert( is_same_v<common_reference_t<int>, int> );\n+  static_assert( is_same_v<common_reference_t<int&>, int&> );\n+  static_assert( is_same_v<common_reference_t<void>, void> );\n+  static_assert( is_same_v<common_reference_t<const void>, const void> );\n+  static_assert( is_same_v<common_reference_t<const void, void>, void> );\n+  static_assert( is_same_v<common_reference_t<void(*const)(), void(*)()>, void(*)()> );\n+  static_assert( is_same_v<common_reference_t<int, int>, int> );\n+  static_assert( is_same_v<common_reference_t<int&, int>, int> );\n+  static_assert( is_same_v<common_reference_t<int, int&>, int> );\n+  static_assert( is_same_v<common_reference_t<int&&, int>, int> );\n+  static_assert( is_same_v<common_reference_t<int&, int&>, int&> );\n+  static_assert( is_same_v<common_reference_t<int&, int&&>, const int&> );\n+  static_assert( is_same_v<common_reference_t<int&&, int&>, const int&> );\n+  static_assert( is_same_v<common_reference_t<int&&, int&&>, int&&> );\n+  static_assert( is_same_v<common_reference_t<int&&, const int&&>, const int&&> );\n+  static_assert( is_same_v<common_reference_t<int&, int&, int&&>, const int&> );\n+  static_assert( is_same_v<common_reference_t<int&&, int&, int&>, const int&> );\n+  static_assert( is_same_v<common_reference_t<char&, int&>, int> );\n+  static_assert( is_same_v<common_reference_t<long&, int&>, long> );\n+}\n+\n+struct A { };\n+struct B { };\n+struct C { };\n+\n+template<template<typename> class AQual, template<typename> class BQual>\n+struct std::basic_common_reference<A, B, AQual, BQual>\n+{\n+  using type = BQual<AQual<C>>;\n+};\n+\n+static_assert( is_same_v<common_reference_t<A, B>, C> );\n+static_assert( is_same_v<common_reference_t<A&, B>, C&> );\n+static_assert( is_same_v<common_reference_t<A&, const B>, C&> );\n+static_assert( is_same_v<common_reference_t<const A, B&>, const C&> );\n+static_assert( is_same_v<common_reference_t<const A&, B&&>, const C&> );\n+static_assert( is_same_v<common_reference_t<const A, B&&>, const C&&> );\n+\n+struct D { };\n+struct E { };\n+struct F { };\n+\n+template<> struct std::common_type<D, E> { using type = F; };\n+\n+static_assert( is_same_v<common_reference_t<D, E>, F> );\n+static_assert( is_same_v<common_reference_t<D&, E>, F> );\n+static_assert( is_same_v<common_reference_t<D&, E&&>, F> );"}]}