{"sha": "f6fe65dc61754f3dc25a8757a1955b61e6374f51", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjZmZTY1ZGM2MTc1NGYzZGMyNWE4NzU3YTE5NTViNjFlNjM3NGY1MQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-07-02T00:51:01Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-07-02T00:51:01Z"}, "message": "ifcvt.c, [...]: Fix comment typos.\n\n\t* ifcvt.c, modulo-sched.c, tree-alias-common.c, tree-sra.c,\n\ttree-ssa-copy.c, tree-ssa-dom.c, tree-ssa-pre.c: Fix comment\n\ttypos.\n\nFrom-SVN: r84008", "tree": {"sha": "ae5103fbd5f2fe5bcbda71439d0de821a65ead6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae5103fbd5f2fe5bcbda71439d0de821a65ead6f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6fe65dc61754f3dc25a8757a1955b61e6374f51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6fe65dc61754f3dc25a8757a1955b61e6374f51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6fe65dc61754f3dc25a8757a1955b61e6374f51", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6fe65dc61754f3dc25a8757a1955b61e6374f51/comments", "author": null, "committer": null, "parents": [{"sha": "f16ee2a09a939e126594865c4bf7f0c9df5785db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f16ee2a09a939e126594865c4bf7f0c9df5785db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f16ee2a09a939e126594865c4bf7f0c9df5785db"}], "stats": {"total": 24, "additions": 15, "deletions": 9}, "files": [{"sha": "9b3de527f4f810b413d1fb39e6e523ad79d6d391", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6fe65dc61754f3dc25a8757a1955b61e6374f51/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6fe65dc61754f3dc25a8757a1955b61e6374f51/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f6fe65dc61754f3dc25a8757a1955b61e6374f51", "patch": "@@ -1,3 +1,9 @@\n+2004-07-02  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* ifcvt.c, modulo-sched.c, tree-alias-common.c, tree-sra.c,\n+\ttree-ssa-copy.c, tree-ssa-dom.c, tree-ssa-pre.c: Fix comment\n+\ttypos.\n+\n 2004-07-02  Aaron W. LaFramboise <aaronraolete36@aaronwl.com>\n \n \t* gcc.c (STANDARD_STARTFILE_PREFIX_1): Define."}, {"sha": "bd4c30c00acbb624145bda8fb1757929e88e7a17", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6fe65dc61754f3dc25a8757a1955b61e6374f51/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6fe65dc61754f3dc25a8757a1955b61e6374f51/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=f6fe65dc61754f3dc25a8757a1955b61e6374f51", "patch": "@@ -699,7 +699,7 @@ end_ifcvt_sequence (struct noce_if_info *if_info)\n \n   /* Make sure that all of the instructions emitted are recognizable,\n      and that we haven't introduced a new jump instruction.\n-     As an excersise for the reader, build a general mechanism that\n+     As an exercise for the reader, build a general mechanism that\n      allows proper placement of required clobbers.  */\n   for (insn = seq; insn; insn = NEXT_INSN (insn))\n     if (GET_CODE (insn) == JUMP_INSN"}, {"sha": "d896757a57834f104b8ee6451fd0df97f280e5df", "filename": "gcc/modulo-sched.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6fe65dc61754f3dc25a8757a1955b61e6374f51/gcc%2Fmodulo-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6fe65dc61754f3dc25a8757a1955b61e6374f51/gcc%2Fmodulo-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmodulo-sched.c?ref=f6fe65dc61754f3dc25a8757a1955b61e6374f51", "patch": "@@ -77,7 +77,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \t here the insns are not scheduled monotonically top-down (nor bottom-\n \t up).\n       3. If failed in scheduling all insns - bump II++ and try again, unless\n-\t II reaches an upper bound MaxII, inwhich case report failure.\n+\t II reaches an upper bound MaxII, in which case report failure.\n    5. If we succeeded in scheduling the loop within II cycles, we now\n       generate prolog and epilog, decrease the counter of the loop, and\n       perform modulo variable expansion for live ranges that span more than\n@@ -443,7 +443,7 @@ calculate_maxii (ddg_ptr g)\n }\n \n \n-/* Given the partial schdule, generate register moves when the length\n+/* Given the partial schedule, generate register moves when the length\n    of the register live range is more than ii; the number of moves is\n    determined according to the following equation:\n \t\tSCHED_TIME (use) - SCHED_TIME (def)   { 1 broken loop-carried"}, {"sha": "790d70aa79f19d7594c67059672cb85ee0b0bcc3", "filename": "gcc/tree-alias-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6fe65dc61754f3dc25a8757a1955b61e6374f51/gcc%2Ftree-alias-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6fe65dc61754f3dc25a8757a1955b61e6374f51/gcc%2Ftree-alias-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-alias-common.c?ref=f6fe65dc61754f3dc25a8757a1955b61e6374f51", "patch": "@@ -533,7 +533,7 @@ find_func_aliases (tree stp)\n \t  else if (TREE_CODE (op1) == CALL_EXPR)\n \t    {\n \t      /* Heap assignment. These are __attribute__ malloc or\n-\t\t something, i'll deal with it later.  */\n+\t\t something, I'll deal with it later.  */\n \t      if (0)\n \t\t{}\n \t      else"}, {"sha": "44f06503aaf7ae599fbea9c2aa25e5b15a2d106c", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6fe65dc61754f3dc25a8757a1955b61e6374f51/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6fe65dc61754f3dc25a8757a1955b61e6374f51/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=f6fe65dc61754f3dc25a8757a1955b61e6374f51", "patch": "@@ -1630,7 +1630,7 @@ sra_replace (block_stmt_iterator *bsi, tree list)\n }\n \n /* Scalarize a USE.  To recap, this is either a simple reference to ELT,\n-   if elt is scalar, or some ocurrence of ELT that requires a complete\n+   if elt is scalar, or some occurrence of ELT that requires a complete\n    aggregate.  IS_OUTPUT is true if ELT is being modified.  */\n \n static void"}, {"sha": "1f87c1be4bff770f983d88864fdf939664303365", "filename": "gcc/tree-ssa-copy.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6fe65dc61754f3dc25a8757a1955b61e6374f51/gcc%2Ftree-ssa-copy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6fe65dc61754f3dc25a8757a1955b61e6374f51/gcc%2Ftree-ssa-copy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-copy.c?ref=f6fe65dc61754f3dc25a8757a1955b61e6374f51", "patch": "@@ -56,7 +56,7 @@ Boston, MA 02111-1307, USA.  */\n \n \n /* Given two SSA_NAMEs, replace the annotations for the one referred to by OP \n-   with VAR's annmoptations.\n+   with VAR's annotations.\n \n    If OP is a pointer, copy the memory tag used originally by OP into\n    VAR.  This is needed in cases where VAR had never been dereferenced in the"}, {"sha": "49759978326b6dbf85d933c465cc7a1bf553fcaa", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6fe65dc61754f3dc25a8757a1955b61e6374f51/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6fe65dc61754f3dc25a8757a1955b61e6374f51/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=f6fe65dc61754f3dc25a8757a1955b61e6374f51", "patch": "@@ -96,7 +96,7 @@ static bitmap nonzero_vars;\n static bool cfg_altered;\n \n /* Bitmap of blocks that have had EH statements cleaned.  We should\n-   remove thier dead edges eventually.  */\n+   remove their dead edges eventually.  */\n static bitmap need_eh_cleanup;\n \n /* Statistics for dominator optimizations.  */"}, {"sha": "e64a477ded80b0ec0fdc92a9633a1beac0016ee8", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6fe65dc61754f3dc25a8757a1955b61e6374f51/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6fe65dc61754f3dc25a8757a1955b61e6374f51/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=f6fe65dc61754f3dc25a8757a1955b61e6374f51", "patch": "@@ -234,7 +234,7 @@ typedef struct bb_value_sets\n      basic block.  */\n   value_set_t phi_gen;\n \n-  /* The TMP_GEN set, which represents results/temporaries genererated\n+  /* The TMP_GEN set, which represents results/temporaries generated\n      in a basic block. IE the LHS of an expression.  */\n   value_set_t tmp_gen;\n \n@@ -1499,7 +1499,7 @@ add_to_sets (tree var, tree expr, vuse_optype vuses, value_set_t s1,\n \n \n /* Given a unary or binary expression EXPR, create and return a new\n-   expresion with the same structure as EXPR but with its operands\n+   expression with the same structure as EXPR but with its operands\n    replaced with the value handles of each of the operands of EXPR.\n    Insert EXPR's operands into the EXP_GEN set for BLOCK.\n "}]}