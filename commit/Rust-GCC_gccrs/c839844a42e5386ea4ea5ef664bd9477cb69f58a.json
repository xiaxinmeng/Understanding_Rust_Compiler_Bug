{"sha": "c839844a42e5386ea4ea5ef664bd9477cb69f58a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzgzOTg0NGE0MmU1Mzg2ZWE0ZWE1ZWY2NjRiZDk0NzdjYjY5ZjU4YQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2019-08-15T10:55:52Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2019-08-15T10:55:52Z"}, "message": "i386-features.c (general_scalar_chain::convert_insn): Revert 2019-08-14 change.\n\n\t* config/i386/i386-features.c (general_scalar_chain::convert_insn)\n\t<case COMPARE>: Revert 2019-08-14 change.\n\t(convertible_comparison_p): Revert 2019-08-14 change.  Return false\n\tfor (TARGET_64BIT || mode != DImode).\n\nFrom-SVN: r274526", "tree": {"sha": "945a9a34cc23f236839dadf39c0f57a98dbb391a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/945a9a34cc23f236839dadf39c0f57a98dbb391a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c839844a42e5386ea4ea5ef664bd9477cb69f58a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c839844a42e5386ea4ea5ef664bd9477cb69f58a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c839844a42e5386ea4ea5ef664bd9477cb69f58a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c839844a42e5386ea4ea5ef664bd9477cb69f58a/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c7cf3a9bb00b6d64ba0c0e0761f000758e9428a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7cf3a9bb00b6d64ba0c0e0761f000758e9428a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7cf3a9bb00b6d64ba0c0e0761f000758e9428a6"}], "stats": {"total": 35, "additions": 23, "deletions": 12}, "files": [{"sha": "f43819b89e152432f40267e488227cd7fb61f797", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c839844a42e5386ea4ea5ef664bd9477cb69f58a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c839844a42e5386ea4ea5ef664bd9477cb69f58a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c839844a42e5386ea4ea5ef664bd9477cb69f58a", "patch": "@@ -1,3 +1,10 @@\n+2019-08-15  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386-features.c (general_scalar_chain::convert_insn)\n+\t<case COMPARE>: Revert 2019-08-14 change.\n+\t(convertible_comparison_p): Revert 2019-08-14 change.  Return false\n+\tfor (TARGET_64BIT || mode != DImode).\n+\n 2019-08-15  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* tree-vrp.c (value_range_base::set): Merge in code from\n@@ -272,7 +279,7 @@\n \t* config/i386/i386-expand.c (ix86_expand_vector_init_one_nonzero)\n \t<case E_V8QImode>: Use vector_set path for\n \tTARGET_MMX_WITH_SSE && TARGET_SSE4_1.\n-\t(ix86_expand_vector_init_one_nonzero) <case E_V8QImode>:\n+\t(ix86_expand_vector_init_one_var) <case E_V8QImode>:\n \tDo not widen for TARGET_MMX_WITH_SSE && TARGET_SSE4_1.\n \n 2019-08-14  Bernd Edlinger  <bernd.edlinger@hotmail.de>"}, {"sha": "f45c47f6b608184b7da12b5a23b82615e2c2933f", "filename": "gcc/config/i386/i386-features.c", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c839844a42e5386ea4ea5ef664bd9477cb69f58a/gcc%2Fconfig%2Fi386%2Fi386-features.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c839844a42e5386ea4ea5ef664bd9477cb69f58a/gcc%2Fconfig%2Fi386%2Fi386-features.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-features.c?ref=c839844a42e5386ea4ea5ef664bd9477cb69f58a", "patch": "@@ -1030,11 +1030,11 @@ general_scalar_chain::convert_insn (rtx_insn *insn)\n     case COMPARE:\n       src = SUBREG_REG (XEXP (XEXP (src, 0), 0));\n \n-      gcc_assert ((REG_P (src) && GET_MODE (src) == GET_MODE_INNER (vmode))\n-\t\t  || (SUBREG_P (src) && GET_MODE (src) == vmode));\n+      gcc_assert ((REG_P (src) && GET_MODE (src) == DImode)\n+\t\t  || (SUBREG_P (src) && GET_MODE (src) == V2DImode));\n \n       if (REG_P (src))\n-\tsubreg = gen_rtx_SUBREG (vmode, src, 0);\n+\tsubreg = gen_rtx_SUBREG (V2DImode, src, 0);\n       else\n \tsubreg = copy_rtx_if_shared (src);\n       emit_insn_before (gen_vec_interleave_lowv2di (copy_rtx_if_shared (subreg),\n@@ -1273,8 +1273,12 @@ has_non_address_hard_reg (rtx_insn *insn)\n \t\t     (const_int 0 [0])))  */\n \n static bool\n-convertible_comparison_p (rtx_insn *insn, enum machine_mode mode)\n+convertible_comparison_p (rtx_insn *insn, machine_mode mode)\n {\n+  /* ??? Currently convertible for double-word DImode chain only.  */\n+  if (TARGET_64BIT || mode != DImode)\n+    return false;\n+\n   if (!TARGET_SSE4_1)\n     return false;\n \n@@ -1306,26 +1310,26 @@ convertible_comparison_p (rtx_insn *insn, enum machine_mode mode)\n \n   if (!SUBREG_P (op1)\n       || !SUBREG_P (op2)\n-      || GET_MODE (op1) != mode\n-      || GET_MODE (op2) != mode\n+      || GET_MODE (op1) != SImode\n+      || GET_MODE (op2) != SImode\n       || ((SUBREG_BYTE (op1) != 0\n-\t   || SUBREG_BYTE (op2) != GET_MODE_SIZE (mode))\n+\t   || SUBREG_BYTE (op2) != GET_MODE_SIZE (SImode))\n \t  && (SUBREG_BYTE (op2) != 0\n-\t      || SUBREG_BYTE (op1) != GET_MODE_SIZE (mode))))\n+\t      || SUBREG_BYTE (op1) != GET_MODE_SIZE (SImode))))\n     return false;\n \n   op1 = SUBREG_REG (op1);\n   op2 = SUBREG_REG (op2);\n \n   if (op1 != op2\n       || !REG_P (op1)\n-      || GET_MODE (op1) != GET_MODE_WIDER_MODE (mode).else_blk ())\n+      || GET_MODE (op1) != DImode)\n     return false;\n \n   return true;\n }\n \n-/* The DImode version of scalar_to_vector_candidate_p.  */\n+/* The general version of scalar_to_vector_candidate_p.  */\n \n static bool\n general_scalar_to_vector_candidate_p (rtx_insn *insn, enum machine_mode mode)\n@@ -1344,7 +1348,7 @@ general_scalar_to_vector_candidate_p (rtx_insn *insn, enum machine_mode mode)\n   if (GET_CODE (src) == COMPARE)\n     return convertible_comparison_p (insn, mode);\n \n-  /* We are interested in DImode promotion only.  */\n+  /* We are interested in \"mode\" only.  */\n   if ((GET_MODE (src) != mode\n        && !CONST_INT_P (src))\n       || GET_MODE (dst) != mode)"}]}