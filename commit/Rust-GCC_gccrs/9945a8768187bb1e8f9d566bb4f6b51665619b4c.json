{"sha": "9945a8768187bb1e8f9d566bb4f6b51665619b4c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTk0NWE4NzY4MTg3YmIxZThmOWQ1NjZiYjRmNmI1MTY2NTYxOWI0Yw==", "commit": {"author": {"name": "Matthias Klose", "email": "doko@ubuntu.com", "date": "2012-10-15T21:12:23Z"}, "committer": {"name": "Matthias Klose", "email": "doko@gcc.gnu.org", "date": "2012-10-15T21:12:23Z"}, "message": "config.gcc: Match arm*-*-linux-* for ARM Linux/GNU.\n\ngcc/\n2012-10-15  Matthias Klose  <doko@ubuntu.com>\n\n        * config.gcc: Match arm*-*-linux-* for ARM Linux/GNU.\n        * doc/install.texi: Use arm-*-*linux-* instead of arm-*-*linux-gnueabi.\n\ngcc/testsuite/\n2012-10-15  Matthias Klose  <doko@ubuntu.com>\n\n        * lib/target-supports.exp (check_profiling_available): Match\n        arm*-*-linux-* for ARM Linux/GNU.\n        * g++.dg/torture/predcom-1.C: Match arm*-*-linux-* for ARM Linux/GNU.\n        * gfortran.dg/enum_10.f90: Likewise.\n        * gfortran.dg/enum_9.f90: Likewise.\n        * gcc.target/arm/synchronize.c: Likewise.\n        * g++.old-deja/g++.jason/enum6.C: Likewise.\n        * g++.old-deja/g++.other/enum4.C: Likewise.\n        * g++.old-deja/g++.law/enum9.C: Likewise.\n\ngcc/ada/\n2012-10-15  Matthias Klose  <doko@ubuntu.com>\n\n        * gcc-interface/Makefile.in: Match arm*-*-linux-*eabi* for\n        ARM Linux/GNU.\n\nlibgcc/\n2012-10-15  Matthias Klose  <doko@ubuntu.com>\n\n        * config.host: Match arm*-*-linux-* for ARM Linux/GNU.\n\nlibstdc++-v3/\n2012-10-15  Matthias Klose  <doko@ubuntu.com>\n\n        * configure.host: Match arm*-*-linux-* for ARM Linux/GNU.\n        * testsuite/20_util/make_signed/requirements/typedefs-2.cc: Likewise.\n        * testsuite/20_util/make_unsigned/requirements/typedefs-2.cc: Likewise.\n\nlibjava/\n2012-10-15  Matthias Klose  <doko@ubuntu.com>\n\n        * configure.ac: Match arm*-*-linux-* for ARM Linux/GNU.\n        * configure: Regenerate.\n\nFrom-SVN: r192475", "tree": {"sha": "a11883b56a4596a207d96acaf2768c65fbb2b48b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a11883b56a4596a207d96acaf2768c65fbb2b48b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9945a8768187bb1e8f9d566bb4f6b51665619b4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9945a8768187bb1e8f9d566bb4f6b51665619b4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9945a8768187bb1e8f9d566bb4f6b51665619b4c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9945a8768187bb1e8f9d566bb4f6b51665619b4c/comments", "author": {"login": "doko42", "id": 11258518, "node_id": "MDQ6VXNlcjExMjU4NTE4", "avatar_url": "https://avatars.githubusercontent.com/u/11258518?v=4", "gravatar_id": "", "url": "https://api.github.com/users/doko42", "html_url": "https://github.com/doko42", "followers_url": "https://api.github.com/users/doko42/followers", "following_url": "https://api.github.com/users/doko42/following{/other_user}", "gists_url": "https://api.github.com/users/doko42/gists{/gist_id}", "starred_url": "https://api.github.com/users/doko42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/doko42/subscriptions", "organizations_url": "https://api.github.com/users/doko42/orgs", "repos_url": "https://api.github.com/users/doko42/repos", "events_url": "https://api.github.com/users/doko42/events{/privacy}", "received_events_url": "https://api.github.com/users/doko42/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "55e7f90769fbc29ce4e156d33c63298497acceb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55e7f90769fbc29ce4e156d33c63298497acceb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55e7f90769fbc29ce4e156d33c63298497acceb7"}], "stats": {"total": 81, "additions": 59, "deletions": 22}, "files": [{"sha": "948857d974076c90f52a2cf27dbf3b2b7a96f9d7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9945a8768187bb1e8f9d566bb4f6b51665619b4c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9945a8768187bb1e8f9d566bb4f6b51665619b4c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9945a8768187bb1e8f9d566bb4f6b51665619b4c", "patch": "@@ -1,3 +1,8 @@\n+2012-10-15  Matthias Klose  <doko@ubuntu.com>\n+\n+\t* config.gcc: Match arm*-*-linux-* for ARM Linux/GNU.\n+\t* doc/install.texi: Use arm-*-*linux-* instead of arm-*-*linux-gnueabi.\n+\n 2012-10-13  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/sse.md (UNSPEC_MOVU): Remove."}, {"sha": "6aa07b00c9c96fb254ca844696cec1f5a86acd18", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9945a8768187bb1e8f9d566bb4f6b51665619b4c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9945a8768187bb1e8f9d566bb4f6b51665619b4c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=9945a8768187bb1e8f9d566bb4f6b51665619b4c", "patch": "@@ -1,3 +1,8 @@\n+2012-10-15  Matthias Klose  <doko@ubuntu.com>\n+\n+\t* gcc-interface/Makefile.in: Match arm*-*-linux-*eabi* for\n+\tARM Linux/GNU.\n+\n 2012-10-05  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_ch7.adb: Minor reformatting."}, {"sha": "3b2b2a789d72406fa16dd0daa77408f9b768c073", "filename": "gcc/ada/gcc-interface/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9945a8768187bb1e8f9d566bb4f6b51665619b4c/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9945a8768187bb1e8f9d566bb4f6b51665619b4c/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMakefile.in?ref=9945a8768187bb1e8f9d566bb4f6b51665619b4c", "patch": "@@ -1850,7 +1850,7 @@ ifeq ($(strip $(filter-out powerpc% e500% linux%,$(arch) $(osys))),)\n   LIBRARY_VERSION := $(LIB_VERSION)\n endif\n \n-ifeq ($(strip $(filter-out arm% linux-gnueabi,$(arch) $(osys)-$(word 4,$(targ)))),)\n+ifeq ($(strip $(filter-out arm%-linux,$(arch)-$(osys)) $(if $(findstring eabi,$(word 4,$(targ))),,$(word 4,$(targ)))),)\n   LIBGNAT_TARGET_PAIRS = \\\n   a-intnam.ads<a-intnam-linux.ads \\\n   s-inmaop.adb<s-inmaop-posix.adb \\"}, {"sha": "9f0f57ea8e31ed255d176db6d7ae8a0c522eca03", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9945a8768187bb1e8f9d566bb4f6b51665619b4c/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9945a8768187bb1e8f9d566bb4f6b51665619b4c/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=9945a8768187bb1e8f9d566bb4f6b51665619b4c", "patch": "@@ -829,7 +829,7 @@ arm*-*-netbsdelf*)\n \textra_options=\"${extra_options} netbsd.opt netbsd-elf.opt\"\n \ttmake_file=\"${tmake_file} arm/t-arm\"\n \t;;\n-arm*-*-linux-*eabi*)\t\t\t# ARM GNU/Linux with ELF\n+arm*-*-linux-*)\t\t\t# ARM GNU/Linux with ELF\n \ttm_file=\"dbxelf.h elfos.h gnu-user.h linux.h linux-android.h glibc-stdint.h arm/elf.h arm/linux-gas.h arm/linux-elf.h\"\n \tcase $target in\n \tarm*b-*-linux*)"}, {"sha": "e7d5e10059da58e3882ee1babd41681c5697ca28", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9945a8768187bb1e8f9d566bb4f6b51665619b4c/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9945a8768187bb1e8f9d566bb4f6b51665619b4c/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=9945a8768187bb1e8f9d566bb4f6b51665619b4c", "patch": "@@ -3151,7 +3151,7 @@ This is a synonym for @samp{x86_64-*-solaris2.1[0-9]*}.\n @heading @anchor{arm-x-eabi}arm-*-eabi\n ARM-family processors.  Subtargets that use the ELF object format\n require GNU binutils 2.13 or newer.  Such subtargets include:\n-@code{arm-*-netbsdelf}, @code{arm-*-*linux-gnueabi}\n+@code{arm-*-netbsdelf}, @code{arm-*-*linux-*}\n and @code{arm-*-rtemseabi}.\n \n @html"}, {"sha": "588928a5a0ea7eeb9c1797b3df06b3d8dd5d638a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9945a8768187bb1e8f9d566bb4f6b51665619b4c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9945a8768187bb1e8f9d566bb4f6b51665619b4c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9945a8768187bb1e8f9d566bb4f6b51665619b4c", "patch": "@@ -1,3 +1,15 @@\n+2012-10-15  Matthias Klose  <doko@ubuntu.com>\n+\n+\t* lib/target-supports.exp (check_profiling_available): Match\n+\tarm*-*-linux-* for ARM Linux/GNU.\n+\t* g++.dg/torture/predcom-1.C: Match arm*-*-linux-* for ARM Linux/GNU.\n+\t* gfortran.dg/enum_10.f90: Likewise.\n+\t* gfortran.dg/enum_9.f90: Likewise.\n+\t* gcc.target/arm/synchronize.c: Likewise.\n+\t* g++.old-deja/g++.jason/enum6.C: Likewise.\n+\t* g++.old-deja/g++.other/enum4.C: Likewise.\n+\t* g++.old-deja/g++.law/enum9.C: Likewise.\n+\n 2012-10-15  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* g++.dg/tls/thread_local-cse.C: Move dg-do line."}, {"sha": "9e9a4b38cfa9fc4f2a4d56d0cff46fc8e5b2b6ea", "filename": "gcc/testsuite/g++.dg/torture/predcom-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9945a8768187bb1e8f9d566bb4f6b51665619b4c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpredcom-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9945a8768187bb1e8f9d566bb4f6b51665619b4c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpredcom-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpredcom-1.C?ref=9945a8768187bb1e8f9d566bb4f6b51665619b4c", "patch": "@@ -1,5 +1,5 @@\n /* Test for ICE in predictive commoning with empty loop header block\n-   on arm-none-linux-gnueabi.  */\n+   on arm-none-linux-*.  */\n \n struct Foo\n {"}, {"sha": "97bc2bafebb0a404c121f66a577a0af91e1ca6da", "filename": "gcc/testsuite/g++.old-deja/g++.jason/enum6.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9945a8768187bb1e8f9d566bb4f6b51665619b4c/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fenum6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9945a8768187bb1e8f9d566bb4f6b51665619b4c/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fenum6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fenum6.C?ref=9945a8768187bb1e8f9d566bb4f6b51665619b4c", "patch": "@@ -7,10 +7,10 @@\n // enum-size attributes should only be emitted if there are values of\n // enum type that can escape the compilation unit, gcc cannot currently\n // detect this; if this facility is added then this linker option should\n-// not be needed.  arm-*-linux*eabi should be a good approximation to\n+// not be needed.  arm-*-linux* should be a good approximation to\n // those platforms where the EABI supplement defines enum values to be\n // 32 bits wide.\n-// { dg-options \"-fshort-enums -Wl,--no-enum-size-warning\" { target arm*-*-linux*eabi } }\n+// { dg-options \"-fshort-enums -Wl,--no-enum-size-warning\" { target arm*-*-linux* } }\n \n #include <limits.h>\n "}, {"sha": "e4045b50b599d0144af1fa1e70c79315315429bc", "filename": "gcc/testsuite/g++.old-deja/g++.law/enum9.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9945a8768187bb1e8f9d566bb4f6b51665619b4c/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fenum9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9945a8768187bb1e8f9d566bb4f6b51665619b4c/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fenum9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fenum9.C?ref=9945a8768187bb1e8f9d566bb4f6b51665619b4c", "patch": "@@ -7,10 +7,10 @@\n // enum-size attributes should only be emitted if there are values of\n // enum type that can escape the compilation unit, gcc cannot currently\n // detect this; if this facility is added then this linker option should\n-// not be needed.  arm-*-linux*eabi should be a good approximation to\n+// not be needed.  arm-*-linux* should be a good approximation to\n // those platforms where the EABI supplement defines enum values to be\n // 32 bits wide.\n-// { dg-options \"-fshort-enums -Wl,--no-enum-size-warning\" { target arm*-*-linux*eabi } }\n+// { dg-options \"-fshort-enums -Wl,--no-enum-size-warning\" { target arm*-*-linux* } }\n \n // GROUPS passed enums\n   extern \"C\" int printf (const char *, ...);"}, {"sha": "3c8bb0c08e6599cb6d2bce29fbbb6e375ae80b39", "filename": "gcc/testsuite/g++.old-deja/g++.other/enum4.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9945a8768187bb1e8f9d566bb4f6b51665619b4c/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fenum4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9945a8768187bb1e8f9d566bb4f6b51665619b4c/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fenum4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fenum4.C?ref=9945a8768187bb1e8f9d566bb4f6b51665619b4c", "patch": "@@ -9,10 +9,10 @@\n // enum-size attributes should only be emitted if there are values of\n // enum type that can escape the compilation unit, gcc cannot currently\n // detect this; if this facility is added then this linker option should\n-// not be needed.  arm-*-linux*eabi should be a good approximation to\n+// not be needed.  arm-*-linux* should be a good approximation to\n // those platforms where the EABI supplement defines enum values to be\n // 32 bits wide.\n-// { dg-options \"-fshort-enums -Wl,--no-enum-size-warning\" { target arm*-*-linux*eabi } }\n+// { dg-options \"-fshort-enums -Wl,--no-enum-size-warning\" { target arm*-*-linux* } }\n \n enum E { \n   a = -312"}, {"sha": "7ef10e2d97acf2669748c231cc88f64864a8a329", "filename": "gcc/testsuite/gcc.target/arm/synchronize.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9945a8768187bb1e8f9d566bb4f6b51665619b4c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsynchronize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9945a8768187bb1e8f9d566bb4f6b51665619b4c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsynchronize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsynchronize.c?ref=9945a8768187bb1e8f9d566bb4f6b51665619b4c", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-final { scan-assembler \"__sync_synchronize|dmb|mcr\" { target arm*-*-linux-*eabi } } } */\n+/* { dg-final { scan-assembler \"__sync_synchronize|dmb|mcr\" { target arm*-*-linux-* } } } */\n \n void *foo (void)\n {"}, {"sha": "80e7fca8013a454aa2cd61f448a92891315b8876", "filename": "gcc/testsuite/gfortran.dg/enum_10.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9945a8768187bb1e8f9d566bb4f6b51665619b4c/gcc%2Ftestsuite%2Fgfortran.dg%2Fenum_10.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9945a8768187bb1e8f9d566bb4f6b51665619b4c/gcc%2Ftestsuite%2Fgfortran.dg%2Fenum_10.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fenum_10.f90?ref=9945a8768187bb1e8f9d566bb4f6b51665619b4c", "patch": "@@ -1,7 +1,7 @@\n ! { dg-do run }\n ! { dg-additional-sources enum_10.c }\n ! { dg-options \"-fshort-enums -w\" }\n-! { dg-options \"-fshort-enums -w -Wl,--no-enum-size-warning\" { target arm*-*-linux*eabi } }\n+! { dg-options \"-fshort-enums -w -Wl,--no-enum-size-warning\" { target arm*-*-linux* } }\n ! Make sure short enums are indeed interoperable with the\n ! corresponding C type.\n "}, {"sha": "d3187c75b9bd8098d34f0d305e700453a07fb3bc", "filename": "gcc/testsuite/gfortran.dg/enum_9.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9945a8768187bb1e8f9d566bb4f6b51665619b4c/gcc%2Ftestsuite%2Fgfortran.dg%2Fenum_9.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9945a8768187bb1e8f9d566bb4f6b51665619b4c/gcc%2Ftestsuite%2Fgfortran.dg%2Fenum_9.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fenum_9.f90?ref=9945a8768187bb1e8f9d566bb4f6b51665619b4c", "patch": "@@ -1,6 +1,6 @@\n ! { dg-do run }\n ! { dg-options \"-fshort-enums\" }\n-! { dg-options \"-fshort-enums -Wl,--no-enum-size-warning\" { target arm*-*-linux*eabi } }\n+! { dg-options \"-fshort-enums -Wl,--no-enum-size-warning\" { target arm*-*-linux* } }\n ! Program to test enumerations when option -fshort-enums is given\n \n program main"}, {"sha": "e932cc9e7ff413fd70bbc91798cf8bec76ba3625", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9945a8768187bb1e8f9d566bb4f6b51665619b4c/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9945a8768187bb1e8f9d566bb4f6b51665619b4c/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=9945a8768187bb1e8f9d566bb4f6b51665619b4c", "patch": "@@ -3924,7 +3924,7 @@ proc check_effective_target_sync_long_long_runtime { } {\n \t\t}\n \t    } \"\"\n \t}]\n-    } elseif { [istarget arm*-*-linux-gnueabi] } {\n+    } elseif { [istarget arm*-*-linux-*] } {\n \treturn [check_runtime sync_longlong_runtime {\n \t    #include <stdlib.h>\n \t    int main ()\n@@ -3968,7 +3968,7 @@ proc check_effective_target_sync_int_long { } {\n \t     || [istarget i?86-*-*]\n \t     || [istarget x86_64-*-*]\n \t     || [istarget alpha*-*-*] \n-\t     || [istarget arm*-*-linux-gnueabi] \n+\t     || [istarget arm*-*-linux-*] \n \t     || [istarget bfin*-*linux*]\n \t     || [istarget hppa*-*linux*]\n \t     || [istarget s390*-*-*] \n@@ -3999,7 +3999,7 @@ proc check_effective_target_sync_char_short { } {\n \t     || [istarget i?86-*-*]\n \t     || [istarget x86_64-*-*]\n \t     || [istarget alpha*-*-*] \n-\t     || [istarget arm*-*-linux-gnueabi] \n+\t     || [istarget arm*-*-linux-*] \n \t     || [istarget hppa*-*linux*]\n \t     || [istarget s390*-*-*] \n \t     || [istarget powerpc*-*-*]"}, {"sha": "e28e53f2e87102274c3f0998dad59ecee2ea30de", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9945a8768187bb1e8f9d566bb4f6b51665619b4c/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9945a8768187bb1e8f9d566bb4f6b51665619b4c/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=9945a8768187bb1e8f9d566bb4f6b51665619b4c", "patch": "@@ -1,3 +1,7 @@\n+2012-10-15  Matthias Klose  <doko@ubuntu.com>\n+\n+\t* config.host: Match arm*-*-linux-* for ARM Linux/GNU.\n+\n 2012-10-15  Pavel Chupin  <pavel.v.chupin@intel.com>\n \n \t* configure: Regenerate."}, {"sha": "c03e2cf21d66d601acf5553bf038e912c9625185", "filename": "libgcc/config.host", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9945a8768187bb1e8f9d566bb4f6b51665619b4c/libgcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9945a8768187bb1e8f9d566bb4f6b51665619b4c/libgcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.host?ref=9945a8768187bb1e8f9d566bb4f6b51665619b4c", "patch": "@@ -316,7 +316,7 @@ arm*-*-netbsdelf*)\n arm*-*-linux*)\t\t\t# ARM GNU/Linux with ELF\n \ttmake_file=\"${tmake_file} arm/t-arm t-fixedpoint-gnu-prefix\"\n \tcase ${host} in\n-\tarm*-*-linux-*eabi)\n+\tarm*-*-linux-*)\n \t  tmake_file=\"${tmake_file} arm/t-elf arm/t-bpabi arm/t-linux-eabi t-slibgcc-libgcc\"\n \t  tm_file=\"$tm_file arm/bpabi-lib.h\"\n \t  unwind_header=config/arm/unwind-arm.h"}, {"sha": "1a586d10d7155f52421358711e9c9b23e1532e74", "filename": "libjava/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9945a8768187bb1e8f9d566bb4f6b51665619b4c/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9945a8768187bb1e8f9d566bb4f6b51665619b4c/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=9945a8768187bb1e8f9d566bb4f6b51665619b4c", "patch": "@@ -1,3 +1,8 @@\n+2012-10-15  Matthias Klose  <doko@ubuntu.com>\n+\n+\t* configure.ac: Match arm*-*-linux-* for ARM Linux/GNU.\n+\t* configure: Regenerate.\n+\n 2012-09-14  Dehao Chen  <dehao@google.com>\n \n \t* testsuite/libjava.lang/sourcelocation.java: New cases."}, {"sha": "53ab75412a8d880442a4e6097556d812ed0a1f20", "filename": "libjava/configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9945a8768187bb1e8f9d566bb4f6b51665619b4c/libjava%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9945a8768187bb1e8f9d566bb4f6b51665619b4c/libjava%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure?ref=9945a8768187bb1e8f9d566bb4f6b51665619b4c", "patch": "@@ -20551,7 +20551,7 @@ case \"${host}\" in\n     # on Darwin -single_module speeds up loading of the dynamic libraries.\n     extra_ldflags_libjava=-Wl,-single_module\n     ;;\n-arm*linux*eabi)\n+arm*-*-linux-*)\n     # Some of the ARM unwinder code is actually in libstdc++.  We\n     # could in principle replicate it in libgcj, but it's better to\n     # have a dependency on libstdc++."}, {"sha": "5fa75c6d5733a5f579ddb95988e84630be3b27e9", "filename": "libjava/configure.ac", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9945a8768187bb1e8f9d566bb4f6b51665619b4c/libjava%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9945a8768187bb1e8f9d566bb4f6b51665619b4c/libjava%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure.ac?ref=9945a8768187bb1e8f9d566bb4f6b51665619b4c", "patch": "@@ -931,7 +931,7 @@ case \"${host}\" in\n     # on Darwin -single_module speeds up loading of the dynamic libraries.\n     extra_ldflags_libjava=-Wl,-single_module\n     ;;\n-arm*linux*eabi)\n+arm*-*-linux-*)\n     # Some of the ARM unwinder code is actually in libstdc++.  We\n     # could in principle replicate it in libgcj, but it's better to\n     # have a dependency on libstdc++."}, {"sha": "01537a78031753526682eb270c107063b2483cf2", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9945a8768187bb1e8f9d566bb4f6b51665619b4c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9945a8768187bb1e8f9d566bb4f6b51665619b4c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9945a8768187bb1e8f9d566bb4f6b51665619b4c", "patch": "@@ -1,3 +1,9 @@\n+2012-10-15  Matthias Klose  <doko@ubuntu.com>\n+\n+\t* configure.host: Match arm*-*-linux-* for ARM Linux/GNU.\n+\t* testsuite/20_util/make_signed/requirements/typedefs-2.cc: Likewise.\n+\t* testsuite/20_util/make_unsigned/requirements/typedefs-2.cc: Likewise.\n+\n 2012-10-15  Pavel Chupin  <pavel.v.chupin@intel.com>\n \n \t* Makefile.in: Regenerate."}, {"sha": "cdd0fb219bc2fb64ecc7f33a97511e0a189c49c9", "filename": "libstdc++-v3/configure.host", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9945a8768187bb1e8f9d566bb4f6b51665619b4c/libstdc%2B%2B-v3%2Fconfigure.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9945a8768187bb1e8f9d566bb4f6b51665619b4c/libstdc%2B%2B-v3%2Fconfigure.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.host?ref=9945a8768187bb1e8f9d566bb4f6b51665619b4c", "patch": "@@ -348,7 +348,7 @@ case \"${host}\" in\n         fi\n     esac\n     case \"${host}\" in\n-      arm*-*-linux-*eabi)\n+      arm*-*-linux-*)\n \tport_specific_symbol_files=\"\\$(srcdir)/../config/os/gnu-linux/arm-eabi-extra.ver\"\n \t;;\n     esac"}, {"sha": "39117dee59f9b49f363735c06eb6b4438962dfeb", "filename": "libstdc++-v3/testsuite/20_util/make_signed/requirements/typedefs-2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9945a8768187bb1e8f9d566bb4f6b51665619b4c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9945a8768187bb1e8f9d566bb4f6b51665619b4c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs-2.cc?ref=9945a8768187bb1e8f9d566bb4f6b51665619b4c", "patch": "@@ -1,5 +1,5 @@\n // { dg-options \"-std=gnu++0x -funsigned-char -fshort-enums\" }\n-// { dg-options \"-std=gnu++0x -funsigned-char -fshort-enums -Wl,--no-enum-size-warning\" { target arm*-*-linux*eabi } }\n+// { dg-options \"-std=gnu++0x -funsigned-char -fshort-enums -Wl,--no-enum-size-warning\" { target arm*-*-linux-* } }\n \n // 2007-05-03  Benjamin Kosnik  <bkoz@redhat.com>\n //"}, {"sha": "11e13532d3830278eae3574a32793ac438b85789", "filename": "libstdc++-v3/testsuite/20_util/make_unsigned/requirements/typedefs-2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9945a8768187bb1e8f9d566bb4f6b51665619b4c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9945a8768187bb1e8f9d566bb4f6b51665619b4c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs-2.cc?ref=9945a8768187bb1e8f9d566bb4f6b51665619b4c", "patch": "@@ -1,5 +1,5 @@\n // { dg-options \"-std=gnu++0x -funsigned-char -fshort-enums\" }\n-// { dg-options \"-std=gnu++0x -funsigned-char -fshort-enums -Wl,--no-enum-size-warning\" { target arm*-*-linux*eabi } }\n+// { dg-options \"-std=gnu++0x -funsigned-char -fshort-enums -Wl,--no-enum-size-warning\" { target arm*-*-linux-* } }\n \n // 2007-05-03  Benjamin Kosnik  <bkoz@redhat.com>\n //"}]}