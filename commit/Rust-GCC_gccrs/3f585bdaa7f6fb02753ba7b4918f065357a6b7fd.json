{"sha": "3f585bdaa7f6fb02753ba7b4918f065357a6b7fd", "node_id": "C_kwDOANBUbNoAKDNmNTg1YmRhYTdmNmZiMDI3NTNiYTdiNDkxOGYwNjUzNTdhNmI3ZmQ", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-09-06T07:19:24Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-09-06T07:19:24Z"}, "message": "openmp: Introduce gimple_omp_ordered_standalone_p\n\nOn Sat, Sep 03, 2022 at 10:07:27AM +0200, Jakub Jelinek via Gcc-patches wrote:\n> Incrementally, I'd like to change the way we differentiate between\n> stand-alone and block-associated ordered constructs, because the current\n> way of looking for presence of doacross clause doesn't work well if those\n> clauses are removed because they had been invalid (wrong syntax or\n> unknown variables in it etc.)\n\nThe following, so far only lightly tested, patch implements that.\n\n2022-09-06  Jakub Jelinek  <jakub@redhat.com>\n\ngcc/\n\t* gimple.h (enum gf_mask): Add GF_OMP_ORDERED_STANDALONE enumerator.\n\t(gimple_omp_subcode):  Use GIMPLE_OMP_ORDERED instead of\n\tGIMPLE_OMP_TEAMS as upper bound.\n\t(gimple_omp_ordered_standalone_p, gimple_omp_ordered_standalone): New\n\tinline functions.\n\t* gimplify.cc (find_standalone_omp_ordered): Look for OMP_ORDERED with\n\tNULL OMP_ORDERED_BODY rather than with OMP_DOACROSS clause.\n\t(gimplify_expr): Call gimple_omp_ordered_standalone for OMP_ORDERED\n\twith NULL OMP_ORDERED_BODY.\n\t* omp-low.cc (check_omp_nesting_restrictions): Use\n\tgimple_omp_ordered_standalone_p test instead of\n\tomp_find_clause (..., OMP_CLAUSE_DOACROSS).\n\t(lower_omp_ordered): Likewise.\n\t* omp-expand.cc (expand_omp, build_omp_regions_1,\n\tomp_make_gimple_edges): Likewise.\ngcc/cp/\n\t* pt.cc (tsubst_expr) <case OMP_ORDERED>: If OMP_BODY was NULL, keep\n\tit NULL after instantiation too.\ngcc/testsuite/\n\t* c-c++-common/gomp/sink-3.c: Don't expect a superfluous error during\n\terror recovery.\n\t* c-c++-common/gomp/doacross-6.c (foo): Add further tests.", "tree": {"sha": "53ea65f5ebeb1bdd0118b0fc92532776c4ccfb69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/53ea65f5ebeb1bdd0118b0fc92532776c4ccfb69"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f585bdaa7f6fb02753ba7b4918f065357a6b7fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f585bdaa7f6fb02753ba7b4918f065357a6b7fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f585bdaa7f6fb02753ba7b4918f065357a6b7fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f585bdaa7f6fb02753ba7b4918f065357a6b7fd/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc52efeb9c6fe214ea78f9d506aa9e8ee9ebdd61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc52efeb9c6fe214ea78f9d506aa9e8ee9ebdd61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc52efeb9c6fe214ea78f9d506aa9e8ee9ebdd61"}], "stats": {"total": 72, "additions": 54, "deletions": 18}, "files": [{"sha": "c5fc0f1eab8db1b2e641477b99084dd48e83eaff", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f585bdaa7f6fb02753ba7b4918f065357a6b7fd/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f585bdaa7f6fb02753ba7b4918f065357a6b7fd/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=3f585bdaa7f6fb02753ba7b4918f065357a6b7fd", "patch": "@@ -19526,9 +19526,14 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl,\n     case OMP_ORDERED:\n       tmp = tsubst_omp_clauses (OMP_ORDERED_CLAUSES (t), C_ORT_OMP, args,\n \t\t\t\tcomplain, in_decl);\n-      stmt = push_stmt_list ();\n-      RECUR (OMP_BODY (t));\n-      stmt = pop_stmt_list (stmt);\n+      if (OMP_BODY (t))\n+\t{\n+\t  stmt = push_stmt_list ();\n+\t  RECUR (OMP_BODY (t));\n+\t  stmt = pop_stmt_list (stmt);\n+\t}\n+      else\n+\tstmt = NULL_TREE;\n \n       t = copy_node (t);\n       OMP_BODY (t) = stmt;"}, {"sha": "77ac1495c46def4af050a86237ca03e1c655744f", "filename": "gcc/gimple.h", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f585bdaa7f6fb02753ba7b4918f065357a6b7fd/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f585bdaa7f6fb02753ba7b4918f065357a6b7fd/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=3f585bdaa7f6fb02753ba7b4918f065357a6b7fd", "patch": "@@ -194,6 +194,7 @@ enum gf_mask {\n     GF_OMP_RETURN_NOWAIT\t= 1 << 0,\n \n     GF_OMP_SECTION_LAST\t\t= 1 << 0,\n+    GF_OMP_ORDERED_STANDALONE   = 1 << 0,\n     GF_OMP_ATOMIC_MEMORY_ORDER  = (1 << 6) - 1,\n     GF_OMP_ATOMIC_NEED_VALUE\t= 1 << 6,\n     GF_OMP_ATOMIC_WEAK\t\t= 1 << 7,\n@@ -2312,7 +2313,7 @@ static inline unsigned\n gimple_omp_subcode (const gimple *s)\n {\n   gcc_gimple_checking_assert (gimple_code (s) >= GIMPLE_OMP_ATOMIC_LOAD\n-\t\t\t      && gimple_code (s) <= GIMPLE_OMP_TEAMS);\n+\t\t\t      && gimple_code (s) <= GIMPLE_OMP_ORDERED);\n   return s->subcode;\n }\n \n@@ -2402,6 +2403,27 @@ gimple_omp_section_set_last (gimple *g)\n }\n \n \n+/* Return true if OMP ordered construct is stand-alone\n+   (G has the GF_OMP_ORDERED_STANDALONE flag set).  */\n+\n+static inline bool\n+gimple_omp_ordered_standalone_p (const gimple *g)\n+{\n+  GIMPLE_CHECK (g, GIMPLE_OMP_ORDERED);\n+  return (gimple_omp_subcode (g) & GF_OMP_ORDERED_STANDALONE) != 0;\n+}\n+\n+\n+/* Set the GF_OMP_ORDERED_STANDALONE flag on G.  */\n+\n+static inline void\n+gimple_omp_ordered_standalone (gimple *g)\n+{\n+  GIMPLE_CHECK (g, GIMPLE_OMP_ORDERED);\n+  g->subcode |= GF_OMP_ORDERED_STANDALONE;\n+}\n+\n+\n /* Return true if OMP parallel statement G has the\n    GF_OMP_PARALLEL_COMBINED flag set.  */\n "}, {"sha": "dcdc8523ff55e751d4f5dad2d81d40ada7bbf7d9", "filename": "gcc/gimplify.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f585bdaa7f6fb02753ba7b4918f065357a6b7fd/gcc%2Fgimplify.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f585bdaa7f6fb02753ba7b4918f065357a6b7fd/gcc%2Fgimplify.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.cc?ref=3f585bdaa7f6fb02753ba7b4918f065357a6b7fd", "patch": "@@ -12427,15 +12427,15 @@ gimplify_omp_taskloop_expr (tree type, tree *tp, gimple_seq *pre_p,\n }\n \n /* Helper function of gimplify_omp_for, find OMP_ORDERED with\n-   OMP_CLAUSE_DOACROSS clause inside of OMP_FOR's body.  */\n+   null OMP_ORDERED_BODY inside of OMP_FOR's body.  */\n \n static tree\n find_standalone_omp_ordered (tree *tp, int *walk_subtrees, void *)\n {\n   switch (TREE_CODE (*tp))\n     {\n     case OMP_ORDERED:\n-      if (omp_find_clause (OMP_ORDERED_CLAUSES (*tp), OMP_CLAUSE_DOACROSS))\n+      if (OMP_ORDERED_BODY (*tp) == NULL_TREE)\n \treturn *tp;\n       break;\n     case OMP_SIMD:\n@@ -15839,6 +15839,9 @@ gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \t\tbreak;\n \t      case OMP_ORDERED:\n \t\tg = gimplify_omp_ordered (*expr_p, body);\n+\t\tif (OMP_BODY (*expr_p) == NULL_TREE\n+\t\t    && gimple_code (g) == GIMPLE_OMP_ORDERED)\n+\t\t  gimple_omp_ordered_standalone (g);\n \t\tbreak;\n \t      case OMP_MASKED:\n \t\tgimplify_scan_omp_clauses (&OMP_MASKED_CLAUSES (*expr_p),"}, {"sha": "8d90b318e867562a8b5c15a7d10dff0fc07ee69c", "filename": "gcc/omp-expand.cc", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f585bdaa7f6fb02753ba7b4918f065357a6b7fd/gcc%2Fomp-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f585bdaa7f6fb02753ba7b4918f065357a6b7fd/gcc%2Fomp-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-expand.cc?ref=3f585bdaa7f6fb02753ba7b4918f065357a6b7fd", "patch": "@@ -10487,8 +10487,7 @@ expand_omp (struct omp_region *region)\n \t  {\n \t    gomp_ordered *ord_stmt\n \t      = as_a <gomp_ordered *> (last_stmt (region->entry));\n-\t    if (omp_find_clause (gimple_omp_ordered_clauses (ord_stmt),\n-\t\t\t\t OMP_CLAUSE_DOACROSS))\n+\t    if (gimple_omp_ordered_standalone_p (ord_stmt))\n \t      {\n \t\t/* We'll expand these when expanding corresponding\n \t\t   worksharing region with ordered(n) clause.  */\n@@ -10616,9 +10615,7 @@ build_omp_regions_1 (basic_block bb, struct omp_region *parent,\n \t\t}\n \t    }\n \t  else if (code == GIMPLE_OMP_ORDERED\n-\t\t   && omp_find_clause (gimple_omp_ordered_clauses\n-\t\t\t\t\t (as_a <gomp_ordered *> (stmt)),\n-\t\t\t\t       OMP_CLAUSE_DOACROSS))\n+\t\t   && gimple_omp_ordered_standalone_p (stmt))\n \t    /* #pragma omp ordered depend is also just a stand-alone\n \t       directive.  */\n \t    region = NULL;\n@@ -10842,9 +10839,7 @@ omp_make_gimple_edges (basic_block bb, struct omp_region **region,\n     case GIMPLE_OMP_ORDERED:\n       cur_region = new_omp_region (bb, code, cur_region);\n       fallthru = true;\n-      if (omp_find_clause (gimple_omp_ordered_clauses\n-\t\t\t     (as_a <gomp_ordered *> (last)),\n-\t\t\t   OMP_CLAUSE_DOACROSS))\n+      if (gimple_omp_ordered_standalone_p (last))\n \tcur_region = cur_region->outer;\n       break;\n "}, {"sha": "fd0ccd53fbaa0193ea26b97395670096b2b3439b", "filename": "gcc/omp-low.cc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f585bdaa7f6fb02753ba7b4918f065357a6b7fd/gcc%2Fomp-low.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f585bdaa7f6fb02753ba7b4918f065357a6b7fd/gcc%2Fomp-low.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.cc?ref=3f585bdaa7f6fb02753ba7b4918f065357a6b7fd", "patch": "@@ -3718,7 +3718,7 @@ check_omp_nesting_restrictions (gimple *stmt, omp_context *ctx)\n \t\t\t  \"a loop region with an %<ordered%> clause\");\n \t\treturn false;\n \t      }\n-\t    if (omp_find_clause (c, OMP_CLAUSE_DOACROSS) == NULL_TREE)\n+\t    if (!gimple_omp_ordered_standalone_p (stmt))\n \t      {\n \t\tif (OMP_CLAUSE_ORDERED_DOACROSS (o))\n \t\t  {\n@@ -9989,8 +9989,7 @@ lower_omp_ordered (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n   bool threads = omp_find_clause (gimple_omp_ordered_clauses (ord_stmt),\n \t\t\t\t  OMP_CLAUSE_THREADS);\n \n-  if (omp_find_clause (gimple_omp_ordered_clauses (ord_stmt),\n-\t\t       OMP_CLAUSE_DOACROSS))\n+  if (gimple_omp_ordered_standalone_p (ord_stmt))\n     {\n       /* FIXME: This is needs to be moved to the expansion to verify various\n \t conditions only testable on cfg with dominators computed, and also"}, {"sha": "d9e9f80655bafc34e1e466360024254417f488e8", "filename": "gcc/testsuite/c-c++-common/gomp/doacross-6.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f585bdaa7f6fb02753ba7b4918f065357a6b7fd/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fdoacross-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f585bdaa7f6fb02753ba7b4918f065357a6b7fd/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fdoacross-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fdoacross-6.c?ref=3f585bdaa7f6fb02753ba7b4918f065357a6b7fd", "patch": "@@ -22,6 +22,18 @@ foo (int n)\n     {\n       #pragma omp ordered doacross(sink)\t\t/* { dg-error \"expected ':' before '\\\\\\)' token\" } */\n     }\n+  #pragma omp for ordered\n+  for (i = 0; i < 8; i += n)\n+    {\n+      #pragma omp ordered doacross(source)\t\t/* { dg-error \"expected ':' before '\\\\\\)' token\" } */\n+      #pragma omp ordered doacross(sink:i-1)\n+    }\n+  #pragma omp for ordered\n+  for (i = 0; i < 8; i += n)\n+    {\n+      #pragma omp ordered doacross(source:)\n+      #pragma omp ordered doacross(sink)\t\t/* { dg-error \"expected ':' before '\\\\\\)' token\" } */\n+    }\n }\n \n void"}, {"sha": "7cb16ed0f76005024f8ba070bf51ff97568c32b9", "filename": "gcc/testsuite/c-c++-common/gomp/sink-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f585bdaa7f6fb02753ba7b4918f065357a6b7fd/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fsink-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f585bdaa7f6fb02753ba7b4918f065357a6b7fd/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fsink-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fsink-3.c?ref=3f585bdaa7f6fb02753ba7b4918f065357a6b7fd", "patch": "@@ -14,7 +14,7 @@ foo ()\n   for (i=0; i < 100; ++i)\n     {\n #pragma omp ordered depend(sink:poo-1,paa+1) /* { dg-error \"poo.*declared.*paa.*declared\" } */\n-    bar(&i);\t\t\t\t     /* { dg-error \"must not have the same binding region\" \"\" { target *-*-* } .-1 } */\n+    bar(&i);\n #pragma omp ordered depend(source)\n     }\n }"}]}