{"sha": "3e80ddc74200fb7c9c3a0e18321051dd9fd6c9ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2U4MGRkYzc0MjAwZmI3YzljM2EwZTE4MzIxMDUxZGQ5ZmQ2YzljYQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@purist.soma.redhat.com", "date": "2000-09-12T18:50:16Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-09-12T18:50:16Z"}, "message": "global_templates.cc (test01): Add negative tests for use_facet.\n\n\n2000-09-12  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n\n\t* testsuite/22_locale/global_templates.cc (test01): Add negative\n\ttests for use_facet.\n\n\t* bits/localefwd.h (locale::operator()): Minor tweaks.\n\t* bits/locale_facets.tcc (locale::operator()): Same.\n\t* testsuite/22_locale/operators.cc: New file.\n\n\t* testsuite/22_locale/facet.cc (output_iterator): Remove\n\tgnu_input_iterator, gnu_output_iterator.\n\nFrom-SVN: r36372", "tree": {"sha": "db46101dab3721623749f05f0af93e4d0c39fb07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db46101dab3721623749f05f0af93e4d0c39fb07"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e80ddc74200fb7c9c3a0e18321051dd9fd6c9ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e80ddc74200fb7c9c3a0e18321051dd9fd6c9ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e80ddc74200fb7c9c3a0e18321051dd9fd6c9ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e80ddc74200fb7c9c3a0e18321051dd9fd6c9ca/comments", "author": null, "committer": null, "parents": [{"sha": "a0b6cdee336967a6723b43438f567def4e86730e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0b6cdee336967a6723b43438f567def4e86730e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0b6cdee336967a6723b43438f567def4e86730e"}], "stats": {"total": 165, "additions": 101, "deletions": 64}, "files": [{"sha": "77283e1aeaf54ed6e11c41522e9186b5c3f3515e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e80ddc74200fb7c9c3a0e18321051dd9fd6c9ca/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e80ddc74200fb7c9c3a0e18321051dd9fd6c9ca/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3e80ddc74200fb7c9c3a0e18321051dd9fd6c9ca", "patch": "@@ -1,3 +1,15 @@\n+2000-09-12  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n+\n+\t* testsuite/22_locale/global_templates.cc (test01): Add negative\n+\ttests for use_facet.\n+\n+\t* bits/localefwd.h (locale::operator()): Minor tweaks.\n+\t* bits/locale_facets.tcc (locale::operator()): Same.\n+\t* testsuite/22_locale/operators.cc: New file.\n+\n+\t* testsuite/22_locale/facet.cc (output_iterator): Remove\n+\tgnu_input_iterator, gnu_output_iterator.\n+\n 2000-09-11  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n \n \t* acinclude.m4 (GLIBCPP_CHECK_GNU_MAKE): Remove test != \"0\". "}, {"sha": "594e6047a31700e0425bf811c75115e26998a436", "filename": "libstdc++-v3/bits/locale_facets.tcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e80ddc74200fb7c9c3a0e18321051dd9fd6c9ca/libstdc%2B%2B-v3%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e80ddc74200fb7c9c3a0e18321051dd9fd6c9ca/libstdc%2B%2B-v3%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fbits%2Flocale_facets.tcc?ref=3e80ddc74200fb7c9c3a0e18321051dd9fd6c9ca", "patch": "@@ -54,8 +54,8 @@ namespace std\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n     bool\n-    locale::operator()(const basic_string<_CharT,_Traits,_Alloc>& __s1,\n-                       const basic_string<_CharT,_Traits,_Alloc>& __s2) const\n+    locale::operator()(const basic_string<_CharT, _Traits, _Alloc>& __s1,\n+                       const basic_string<_CharT, _Traits, _Alloc>& __s2) const\n     {\n       // XXX should not need to qualify here.\n       // typedef collate<_CharT> __collate_type;"}, {"sha": "f30dd40c8da1c638671346fa12d84ab514ea6581", "filename": "libstdc++-v3/bits/localefwd.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e80ddc74200fb7c9c3a0e18321051dd9fd6c9ca/libstdc%2B%2B-v3%2Fbits%2Flocalefwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e80ddc74200fb7c9c3a0e18321051dd9fd6c9ca/libstdc%2B%2B-v3%2Fbits%2Flocalefwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fbits%2Flocalefwd.h?ref=3e80ddc74200fb7c9c3a0e18321051dd9fd6c9ca", "patch": "@@ -280,8 +280,8 @@ namespace std\n \n     template<typename _Char, typename _Traits, typename _Alloc>\n       bool  \n-      operator()(const basic_string<_Char,_Traits,_Alloc>& __s1,\n-\t\t const basic_string<_Char,_Traits,_Alloc>& __s2) const;\n+      operator()(const basic_string<_Char, _Traits, _Alloc>& __s1,\n+\t\t const basic_string<_Char, _Traits, _Alloc>& __s2) const;\n \n     // Global locale objects:\n     static locale "}, {"sha": "cea5fbe78932efdc98d1ad18e86c3b648044dda8", "filename": "libstdc++-v3/testsuite/22_locale/facet.cc", "status": "modified", "additions": 16, "deletions": 57, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e80ddc74200fb7c9c3a0e18321051dd9fd6c9ca/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ffacet.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e80ddc74200fb7c9c3a0e18321051dd9fd6c9ca/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ffacet.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ffacet.cc?ref=3e80ddc74200fb7c9c3a0e18321051dd9fd6c9ca", "patch": "@@ -25,49 +25,8 @@\n #include <debug_assert.h>\n \n // 1 a class if a facet if it is publicly derived from another facet\n-class gnu_input_iterator: public std::iterator<std::input_iterator_tag, char>\n-{\n-  value_type it;\n-public:\n-  gnu_input_iterator(value_type orig): it(orig) { }\n-\n-  value_type \n-  operator*() const { return it; }\n-\n-  reference\n-  operator++(){ return ++it; }\n-\n-  reference\n-  operator++(int){ ++it; return it; }\n-};\n-\n-bool\n-operator==(const gnu_input_iterator& lhs, const gnu_input_iterator& rhs)\n-{ return true; }\n-\n-bool\n-operator!=(const gnu_input_iterator& lhs, const gnu_input_iterator& rhs)\n-{ return true; }\n-\n-class gnu_output_iterator: public std::iterator<std::output_iterator_tag, char>\n-{ \n-  value_type it;\n-public:\n-  gnu_output_iterator(value_type orig): it(orig) { }\n-\n-  value_type\n-  operator*(){ return it; }\n-\n-  gnu_output_iterator&\n-  operator=(value_type obj){ it = obj; return *this; }\n-\n-  reference \n-  operator++(){ return ++it; }\n-\n-  reference \n-  operator++(int){ ++it; return it; }\n-\n-};\n+typedef std::istreambuf_iterator<char>\t\tinput_iterator;\n+typedef std::ostreambuf_iterator<char>\t\toutput_iterator;\n \n class gnu_collate: public std::collate<char> { }; \n class gnu_ctype: public std::ctype<char> { }; \n@@ -116,20 +75,20 @@ class gnu_moneypunct_byname_false: public std::moneypunct_byname<char, false>\n }; \n \n \n-class gnu_money_get_in: public std::money_get<char, gnu_input_iterator>\n+class gnu_money_get_in: public std::money_get<char, input_iterator>\n {\n public:\n   explicit\n   gnu_money_get_in(size_t refs = 0)\n-  : std::money_get<char, gnu_input_iterator>(refs) { }\n+  : std::money_get<char, input_iterator>(refs) { }\n };\n \n-class gnu_money_put_out: public std::money_put<char, gnu_output_iterator>\n+class gnu_money_put_out: public std::money_put<char, output_iterator>\n {\n public:\n   explicit\n   gnu_money_put_out(size_t refs = 0)\n-  : std::money_put<char, gnu_output_iterator>(refs) { }\n+  : std::money_put<char, output_iterator>(refs) { }\n };\n \n class gnu_numpunct_byname: public std::numpunct_byname<char>\n@@ -140,20 +99,20 @@ class gnu_numpunct_byname: public std::numpunct_byname<char>\n   : std::numpunct_byname<char>(c, refs) { }\n };\n \n-class gnu_num_get_in: public std::num_get<char, gnu_input_iterator> \n+class gnu_num_get_in: public std::num_get<char, input_iterator> \n {\n public:\n   explicit\n   gnu_num_get_in(size_t refs = 0)\n-  : std::num_get<char, gnu_input_iterator>(refs) { }\n+  : std::num_get<char, input_iterator>(refs) { }\n };\n \n-class gnu_num_put_out: public std::num_put<char, gnu_output_iterator> \n+class gnu_num_put_out: public std::num_put<char, output_iterator> \n {\n public:\n   explicit\n   gnu_num_put_out(size_t refs = 0)\n-  : std::num_put<char, gnu_output_iterator>(refs) { }\n+  : std::num_put<char, output_iterator>(refs) { }\n };\n \n class gnu_time_get_byname: public std::time_get_byname<char>\n@@ -164,12 +123,12 @@ class gnu_time_get_byname: public std::time_get_byname<char>\n   : std::time_get_byname<char>(c, refs) { }\n };\n \n-class gnu_time_get_in: public std::time_get<char, gnu_input_iterator>\n+class gnu_time_get_in: public std::time_get<char, input_iterator>\n {\n public:\n   explicit\n   gnu_time_get_in(size_t refs = 0)\n-  : std::time_get<char, gnu_input_iterator>(refs) { }\n+  : std::time_get<char, input_iterator>(refs) { }\n };\n \n class gnu_time_put_byname: public std::time_put_byname<char> \n@@ -180,12 +139,12 @@ class gnu_time_put_byname: public std::time_put_byname<char>\n   : std::time_put_byname<char>(c, refs) { }\n };\n \n-class gnu_time_put_out: public std::time_put<char, gnu_output_iterator> \n+class gnu_time_put_out: public std::time_put<char, output_iterator> \n {\n public:\n   explicit\n   gnu_time_put_out(size_t refs = 0)\n-  : std::time_put<char, gnu_output_iterator>(refs) { }\n+  : std::time_put<char, output_iterator>(refs) { }\n };\n \n class gnu_messages_byname: public std::messages_byname<char> \n@@ -227,8 +186,8 @@ void test01()\n   gnu_time_put_byname\t\tobj15(\"gnu_message_byname\", 0);\n   gnu_time_get_in\t\tobj16(0);\n   gnu_time_get_byname\t\tobj17(\"gnu_message_byname\", 0);\n-  // gnu_num_put_out\t\tobj18(0);\n-  // gnu_num_get_in\t\tobj19(0);\n+  gnu_num_put_out\t\tobj18(0);\n+  gnu_num_get_in\t\tobj19(0);\n   gnu_numpunct_byname\t\tobj20(\"gnu_message_byname\", 0);\n   gnu_money_put_out\t\tobj21(0);\n   gnu_money_get_in\t\tobj22(0);"}, {"sha": "c207ccde3dd4565359058f4973523aea9ea45954", "filename": "libstdc++-v3/testsuite/22_locale/global_templates.cc", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e80ddc74200fb7c9c3a0e18321051dd9fd6c9ca/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fglobal_templates.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e80ddc74200fb7c9c3a0e18321051dd9fd6c9ca/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fglobal_templates.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fglobal_templates.cc?ref=3e80ddc74200fb7c9c3a0e18321051dd9fd6c9ca", "patch": "@@ -43,9 +43,22 @@ void test01()\n   // sanity check the constructed locale has the specialized facet.\n   VERIFY( has_facet<gnu_codecvt>(loc) );\n \n-  const ccodecvt& cvt01 = use_facet<ccodecvt>(cloc); \n-  const gnu_codecvt& cvt02 = use_facet<gnu_codecvt>(loc); \n-  // VERIFY( cvt01.id != cvt02.id ); // XXX no way to do this, really :(\n+  try \n+    { const ccodecvt& cvt01 = use_facet<ccodecvt>(cloc); }\n+  catch(...)\n+    { VERIFY( false ); }\n+\n+  try\n+    { const gnu_codecvt& cvt02 = use_facet<gnu_codecvt>(loc); } \n+  catch(...)\n+    { VERIFY( false ); }\n+\n+  try \n+    { const ccodecvt& cvt03 = use_facet<gnu_codecvt>(cloc); }\n+  catch(bad_cast& obj)\n+    { VERIFY( true ); }\n+    catch(...)\n+    { VERIFY( false ); }\n }\n \n int main ()"}, {"sha": "e188d2d57eb9fa2a5623b2e1bf17be4a40bc7869", "filename": "libstdc++-v3/testsuite/22_locale/operators.cc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e80ddc74200fb7c9c3a0e18321051dd9fd6c9ca/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Foperators.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e80ddc74200fb7c9c3a0e18321051dd9fd6c9ca/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Foperators.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Foperators.cc?ref=3e80ddc74200fb7c9c3a0e18321051dd9fd6c9ca", "patch": "@@ -0,0 +1,53 @@\n+// 2000-09-11 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2000 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.1.1.4 locale operators [lib.locale.operators]\n+\n+#include <locale>\n+#include <debug_assert.h>\n+\n+typedef std::codecvt<char, char, mbstate_t> ccodecvt;\n+class gnu_codecvt: public ccodecvt { }; \n+\n+void test01()\n+{\n+  using namespace std;\n+\n+  bool test = true;\n+  string str1, str2;\n+\n+  // construct a locale object with the C facet\n+  const locale& \tcloc = locale::classic();\n+  // construct a locale object with the specialized facet.\n+  locale                loc(locale::classic(), new gnu_codecvt);\n+  VERIFY ( cloc != loc );\n+  VERIFY ( !(cloc == loc) );\n+\n+  str1 = cloc.name();\n+  str2 = loc.name();  \n+  VERIFY( loc(str1, str2) == false );\n+}\n+\n+int main ()\n+{\n+  test01();\n+\n+  return 0;\n+}"}]}