{"sha": "f62054146e86e792b6ce061bd418b9a2384ae9a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjYyMDU0MTQ2ZTg2ZTc5MmI2Y2UwNjFiZDQxOGI5YTIzODRhZTlhNQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-02-08T10:04:46Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-02-08T10:04:46Z"}, "message": "[multiple changes]\n\n2012-02-08  Yannick Moy  <moy@adacore.com>\n\n\t* gnat_rm.texi: Minor reshuffling to place restriction at\n\tappropriate place.\n\n2012-02-08  Bob Duff  <duff@adacore.com>\n\n\t* warnsw.adb (Set_Warning_Switch): Set Warn_On_Suspicious_Modulus_Value\n\tFalse for '-gnatwA', to suppress these warnings.\n\n2012-02-08  Vincent Celier  <celier@adacore.com>\n\n\t* sinput-p.adb (Source_File_Is_Subunit): Check for BOM before\n\tstarting to scan, so that UTF8 encoding is taken into account.\n\n2012-02-08  Arnaud Charlet  <charlet@adacore.com>\n\n\t* s-tasren.adb, s-tasren.ads (Internal_Complete_Rendezvous): New\n\tfunction.\n\t(Complete_Rendezvous): Now call Internal_Complete_Rendezvous.\n\t(Exceptional_Complete_Rendezvous): Mark No_Return.\n\n2012-02-08  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* exp_aggr.adb (Compile_Time_Known_Composite_Value):\n\tNew predicate to compute whether a composite value can be\n\tevaluated at compile time.\n\t(Component_Not_OK_For_Backend): Use Compile_Time_Known_Value for all\n\texpressions of elementary type and Compile_Time_Known_Composite_Value\n\tfor all other expressions.\n\t(Expand_Record_Aggregate): Convert to assignments in the case\n\tof a type with mutable components if the aggregate cannot be\n\tbuilt statically.\n\n2012-02-08  Gary Dismukes  <dismukes@adacore.com>\n\n\t* aspects.ads (type Aspect_Id): Add Simple_Storage_Pool_Type.\n\t(Impl_Defined_Aspects): Add association for\n\tAspect_Simple_Storage_Pool_Type.\n\t(Aspect_Names): Add\n\tassociation for Aspect_Simple_Storage_Pool_Type.\n\t* aspects.adb:\n\t(Canonical_Aspect): Add association for Simple_Storage_Pool_Type.\n\t* exp_attr.adb (Expand_N_Attribute_Reference):\n\tChange name to Name_Simple_Storage_Pool_Type.\n\t* exp_ch4.adb (Expand_N_Allocator): Change\n\tname to Name_Simple_Storage_Pool_Type.\n\t* exp_intr.adb (Expand_Unc_Deallocation): Change name to\n\tName_Simple_Storage_Pool_Type.\t* freeze.adb (Freeze_Entity):\n\tChange names to Name_Simple_Storage_Pool_Type.\t* par-prag.adb:\n\tChange names to Name_Simple_Storage_Pool_Type.\t* sem_attr.adb:\n\t(Analyze_Attribute): Change name to Name_Simple_Storage_Pool_Type.\n\t* sem_ch13.adb (Analyze_Attribute_Definition_Clause):\n\tChange name to Name_Simple_Storage_Pool_Type.\n\t* sem_prag.adb:\n\t(Analyze_Pragma): Change name to Name_Simple_Storage_Pool_Type.\n\t(Sig_Flags): Change name to Name_Simple_Storage_Pool_Type.\n\t* sem_res.adb (Resolve_Allocator): Change name to\n\tName_Simple_Storage_Pool_Type.\t* snames.ads-tmpl:\n\t(Name_Simple_Storage_Pool_Type): New name constant.\n\t(type Pragma_Id): Change name to Name_Simple_Storage_Pool_Type and\n\tmove to main pragma section because it no longer matches the\n\tattribute name.\n\t* snames.adb-tmpl (Get_Pragma_Id): Remove test for\n\tName_Simple_Storage_Pool.\n\t(Is_Pragma_Name): Remove test for Name_Simple_Storage_Pool.\n\n2012-02-08  Robert Dewar  <dewar@adacore.com>\n\n\t* gnat_ugn.texi: Add some clarification to -gnatwA and -gnatws.\n\nFrom-SVN: r184003", "tree": {"sha": "f945e59cb67b3ec51266c32d20145f259333bf06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f945e59cb67b3ec51266c32d20145f259333bf06"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f62054146e86e792b6ce061bd418b9a2384ae9a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f62054146e86e792b6ce061bd418b9a2384ae9a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f62054146e86e792b6ce061bd418b9a2384ae9a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f62054146e86e792b6ce061bd418b9a2384ae9a5/comments", "author": null, "committer": null, "parents": [{"sha": "88f7a9f691c91abf96a2ebe01e8e9dacb57d2426", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88f7a9f691c91abf96a2ebe01e8e9dacb57d2426", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88f7a9f691c91abf96a2ebe01e8e9dacb57d2426"}], "stats": {"total": 388, "additions": 287, "deletions": 101}, "files": [{"sha": "937fbee3d8d2290a1618cc417412ed52bbea5b1c", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f62054146e86e792b6ce061bd418b9a2384ae9a5/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f62054146e86e792b6ce061bd418b9a2384ae9a5/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f62054146e86e792b6ce061bd418b9a2384ae9a5", "patch": "@@ -1,3 +1,74 @@\n+2012-02-08  Yannick Moy  <moy@adacore.com>\n+\n+\t* gnat_rm.texi: Minor reshuffling to place restriction at\n+\tappropriate place.\n+\n+2012-02-08  Bob Duff  <duff@adacore.com>\n+\n+\t* warnsw.adb (Set_Warning_Switch): Set Warn_On_Suspicious_Modulus_Value\n+\tFalse for '-gnatwA', to suppress these warnings.\n+\n+2012-02-08  Vincent Celier  <celier@adacore.com>\n+\n+\t* sinput-p.adb (Source_File_Is_Subunit): Check for BOM before\n+\tstarting to scan, so that UTF8 encoding is taken into account.\n+\n+2012-02-08  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* s-tasren.adb, s-tasren.ads (Internal_Complete_Rendezvous): New\n+\tfunction.\n+\t(Complete_Rendezvous): Now call Internal_Complete_Rendezvous.\n+\t(Exceptional_Complete_Rendezvous): Mark No_Return.\n+\n+2012-02-08  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_aggr.adb (Compile_Time_Known_Composite_Value):\n+\tNew predicate to compute whether a composite value can be\n+\tevaluated at compile time.\n+\t(Component_Not_OK_For_Backend): Use Compile_Time_Known_Value for all\n+\texpressions of elementary type and Compile_Time_Known_Composite_Value\n+\tfor all other expressions.\n+\t(Expand_Record_Aggregate): Convert to assignments in the case\n+\tof a type with mutable components if the aggregate cannot be\n+\tbuilt statically.\n+\n+2012-02-08  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* aspects.ads (type Aspect_Id): Add Simple_Storage_Pool_Type.\n+\t(Impl_Defined_Aspects): Add association for\n+\tAspect_Simple_Storage_Pool_Type.\n+\t(Aspect_Names): Add\n+\tassociation for Aspect_Simple_Storage_Pool_Type.\n+\t* aspects.adb:\n+\t(Canonical_Aspect): Add association for Simple_Storage_Pool_Type.\n+\t* exp_attr.adb (Expand_N_Attribute_Reference):\n+\tChange name to Name_Simple_Storage_Pool_Type.\n+\t* exp_ch4.adb (Expand_N_Allocator): Change\n+\tname to Name_Simple_Storage_Pool_Type.\n+\t* exp_intr.adb (Expand_Unc_Deallocation): Change name to\n+\tName_Simple_Storage_Pool_Type.\t* freeze.adb (Freeze_Entity):\n+\tChange names to Name_Simple_Storage_Pool_Type.\t* par-prag.adb:\n+\tChange names to Name_Simple_Storage_Pool_Type.\t* sem_attr.adb:\n+\t(Analyze_Attribute): Change name to Name_Simple_Storage_Pool_Type.\n+\t* sem_ch13.adb (Analyze_Attribute_Definition_Clause):\n+\tChange name to Name_Simple_Storage_Pool_Type.\n+\t* sem_prag.adb:\n+\t(Analyze_Pragma): Change name to Name_Simple_Storage_Pool_Type.\n+\t(Sig_Flags): Change name to Name_Simple_Storage_Pool_Type.\n+\t* sem_res.adb (Resolve_Allocator): Change name to\n+\tName_Simple_Storage_Pool_Type.\t* snames.ads-tmpl:\n+\t(Name_Simple_Storage_Pool_Type): New name constant.\n+\t(type Pragma_Id): Change name to Name_Simple_Storage_Pool_Type and\n+\tmove to main pragma section because it no longer matches the\n+\tattribute name.\n+\t* snames.adb-tmpl (Get_Pragma_Id): Remove test for\n+\tName_Simple_Storage_Pool.\n+\t(Is_Pragma_Name): Remove test for Name_Simple_Storage_Pool.\n+\n+2012-02-08  Robert Dewar  <dewar@adacore.com>\n+\n+\t* gnat_ugn.texi: Add some clarification to -gnatwA and -gnatws.\n+\n 2012-02-08  Pascal Obry  <obry@adacore.com>\n \n \t* prj.adb (Compute_All_Imported_Projects): Use new"}, {"sha": "69a789cc829ba7bb94da890cd399f49a81196c6a", "filename": "gcc/ada/aspects.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f62054146e86e792b6ce061bd418b9a2384ae9a5/gcc%2Fada%2Faspects.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f62054146e86e792b6ce061bd418b9a2384ae9a5/gcc%2Fada%2Faspects.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.adb?ref=f62054146e86e792b6ce061bd418b9a2384ae9a5", "patch": "@@ -299,6 +299,7 @@ package body Aspects is\n     Aspect_Read                         => Aspect_Read,\n     Aspect_Shared                       => Aspect_Atomic,\n     Aspect_Simple_Storage_Pool          => Aspect_Simple_Storage_Pool,\n+    Aspect_Simple_Storage_Pool_Type     => Aspect_Simple_Storage_Pool_Type,\n     Aspect_Size                         => Aspect_Size,\n     Aspect_Small                        => Aspect_Small,\n     Aspect_Static_Predicate             => Aspect_Predicate,"}, {"sha": "3c28af83b8f1452fa7e28f24d0f80d4b93e90dc5", "filename": "gcc/ada/aspects.ads", "status": "modified", "additions": 29, "deletions": 26, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f62054146e86e792b6ce061bd418b9a2384ae9a5/gcc%2Fada%2Faspects.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f62054146e86e792b6ce061bd418b9a2384ae9a5/gcc%2Fada%2Faspects.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.ads?ref=f62054146e86e792b6ce061bd418b9a2384ae9a5", "patch": "@@ -132,6 +132,7 @@ package Aspects is\n       Aspect_Pure_Function,                 -- GNAT\n       Aspect_Remote_Access_Type,            -- GNAT\n       Aspect_Shared,                        -- GNAT (equivalent to Atomic)\n+      Aspect_Simple_Storage_Pool_Type,      -- GNAT\n       Aspect_Suppress_Debug_Info,           -- GNAT\n       Aspect_Unchecked_Union,\n       Aspect_Universal_Aliasing,            -- GNAT\n@@ -171,32 +172,33 @@ package Aspects is\n    --  The following array identifies all implementation defined aspects\n \n    Impl_Defined_Aspects : constant array (Aspect_Id) of Boolean :=\n-                            (Aspect_Ada_2005             => True,\n-                             Aspect_Ada_2012             => True,\n-                             Aspect_Compiler_Unit        => True,\n-                             Aspect_Dimension            => True,\n-                             Aspect_Dimension_System     => True,\n-                             Aspect_Favor_Top_Level      => True,\n-                             Aspect_Inline_Always        => True,\n-                             Aspect_Object_Size          => True,\n-                             Aspect_Persistent_BSS       => True,\n-                             Aspect_Predicate            => True,\n-                             Aspect_Preelaborate_05      => True,\n-                             Aspect_Pure_05              => True,\n-                             Aspect_Pure_12              => True,\n-                             Aspect_Pure_Function        => True,\n-                             Aspect_Remote_Access_Type   => True,\n-                             Aspect_Shared               => True,\n-                             Aspect_Simple_Storage_Pool  => True,\n-                             Aspect_Suppress_Debug_Info  => True,\n-                             Aspect_Test_Case            => True,\n-                             Aspect_Universal_Data       => True,\n-                             Aspect_Universal_Aliasing   => True,\n-                             Aspect_Unmodified           => True,\n-                             Aspect_Unreferenced         => True,\n-                             Aspect_Unreferenced_Objects => True,\n-                             Aspect_Value_Size           => True,\n-                             others                      => False);\n+                            (Aspect_Ada_2005                 => True,\n+                             Aspect_Ada_2012                 => True,\n+                             Aspect_Compiler_Unit            => True,\n+                             Aspect_Dimension                => True,\n+                             Aspect_Dimension_System         => True,\n+                             Aspect_Favor_Top_Level          => True,\n+                             Aspect_Inline_Always            => True,\n+                             Aspect_Object_Size              => True,\n+                             Aspect_Persistent_BSS           => True,\n+                             Aspect_Predicate                => True,\n+                             Aspect_Preelaborate_05          => True,\n+                             Aspect_Pure_05                  => True,\n+                             Aspect_Pure_12                  => True,\n+                             Aspect_Pure_Function            => True,\n+                             Aspect_Remote_Access_Type       => True,\n+                             Aspect_Shared                   => True,\n+                             Aspect_Simple_Storage_Pool      => True,\n+                             Aspect_Simple_Storage_Pool_Type => True,\n+                             Aspect_Suppress_Debug_Info      => True,\n+                             Aspect_Test_Case                => True,\n+                             Aspect_Universal_Data           => True,\n+                             Aspect_Universal_Aliasing       => True,\n+                             Aspect_Unmodified               => True,\n+                             Aspect_Unreferenced             => True,\n+                             Aspect_Unreferenced_Objects     => True,\n+                             Aspect_Value_Size               => True,\n+                             others                          => False);\n \n    --  The following array indicates aspects for which multiple occurrences of\n    --  the same aspect attached to the same declaration are allowed.\n@@ -368,6 +370,7 @@ package Aspects is\n      Aspect_Shared                       => Name_Shared,\n      Aspect_Shared_Passive               => Name_Shared_Passive,\n      Aspect_Simple_Storage_Pool          => Name_Simple_Storage_Pool,\n+     Aspect_Simple_Storage_Pool_Type     => Name_Simple_Storage_Pool_Type,\n      Aspect_Size                         => Name_Size,\n      Aspect_Small                        => Name_Small,\n      Aspect_Static_Predicate             => Name_Static_Predicate,"}, {"sha": "10cb04c1628d7aff9d6b3feb47a175b4e4d0428c", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 54, "deletions": 6, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f62054146e86e792b6ce061bd418b9a2384ae9a5/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f62054146e86e792b6ce061bd418b9a2384ae9a5/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=f62054146e86e792b6ce061bd418b9a2384ae9a5", "patch": "@@ -5115,6 +5115,14 @@ package body Exp_Aggr is\n       --  and the aggregate can be constructed statically and handled by\n       --  the back-end.\n \n+      function Compile_Time_Known_Composite_Value (N : Node_Id) return Boolean;\n+      --  Returns true if N is an expression of composite type which can be\n+      --  fully evaluated at compile time without raising constraint error.\n+      --  Such expressions can be passed as is to Gigi without any expansion.\n+      --\n+      --  This returns true for N_Aggregate with Compile_Time_Known_Aggregate\n+      --  set and constants whose expression is such an aggregate, recursively.\n+\n       function Component_Not_OK_For_Backend return Boolean;\n       --  Check for presence of component which makes it impossible for the\n       --  backend to process the aggregate, thus requiring the use of a series\n@@ -5145,6 +5153,46 @@ package body Exp_Aggr is\n       --  For nested aggregates return the ultimate enclosing aggregate; for\n       --  non-nested aggregates return N.\n \n+      ----------------------------------------\n+      -- Compile_Time_Known_Composite_Value --\n+      ----------------------------------------\n+\n+      function Compile_Time_Known_Composite_Value (N : Node_Id) return Boolean\n+      is\n+\n+      begin\n+         --  If we have an entity name, then see if it is the name of a\n+         --  constant and if so, test the corresponding constant value.\n+\n+         if Is_Entity_Name (N) then\n+            declare\n+               E : constant Entity_Id := Entity (N);\n+               V : Node_Id;\n+\n+            begin\n+               if Ekind (E) /= E_Constant then\n+                  return False;\n+               end if;\n+\n+               V := Constant_Value (E);\n+               return Present (V)\n+                 and then Compile_Time_Known_Composite_Value (V);\n+            end;\n+\n+         --  We have a value, see if it is compile time known\n+\n+         else\n+            if Nkind (N) = N_Aggregate then\n+               return Compile_Time_Known_Aggregate (N);\n+            end if;\n+\n+            --  All other types of values are not known at compile time\n+\n+            return False;\n+         end if;\n+\n+      end Compile_Time_Known_Composite_Value;\n+\n       ----------------------------------\n       -- Component_Not_OK_For_Backend --\n       ----------------------------------\n@@ -5201,14 +5249,12 @@ package body Exp_Aggr is\n                return True;\n             end if;\n \n-            if Is_Scalar_Type (Etype (Expr_Q)) then\n+            if Is_Elementary_Type (Etype (Expr_Q)) then\n                if not Compile_Time_Known_Value (Expr_Q) then\n                   Static_Components := False;\n                end if;\n \n-            elsif Nkind (Expr_Q) /= N_Aggregate\n-              or else not Compile_Time_Known_Aggregate (Expr_Q)\n-            then\n+            elsif not Compile_Time_Known_Composite_Value (Expr_Q) then\n                Static_Components := False;\n \n                if Is_Private_Type (Etype (Expr_Q))\n@@ -5374,12 +5420,14 @@ package body Exp_Aggr is\n       --  may be distinct from the default size of the type component, so\n       --  we need to expand to insure that the back-end copies the proper\n       --  size of the data. However, if the aggregate is the initial value of\n-      --  a constant, the target is immutable and may be built statically.\n+      --  a constant, the target is immutable and might be built statically\n+      --  if components are appropriate.\n \n       elsif Has_Mutable_Components (Typ)\n         and then\n           (Nkind (Parent (Top_Level_Aggr)) /= N_Object_Declaration\n-            or else not Constant_Present (Parent (Top_Level_Aggr)))\n+            or else not Constant_Present (Parent (Top_Level_Aggr))\n+            or else not Static_Components)\n       then\n          Convert_To_Assignments (N, Typ);\n "}, {"sha": "4e0c60cdb5736133cdf076baf5c61912181b950d", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f62054146e86e792b6ce061bd418b9a2384ae9a5/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f62054146e86e792b6ce061bd418b9a2384ae9a5/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=f62054146e86e792b6ce061bd418b9a2384ae9a5", "patch": "@@ -4518,7 +4518,7 @@ package body Exp_Attr is\n                --  then the result will default to zero.\n \n                if Present (Get_Rep_Pragma (Root_Type (Ptyp),\n-                                           Name_Simple_Storage_Pool))\n+                                           Name_Simple_Storage_Pool_Type))\n                then\n                   declare\n                      Pool_Type : constant Entity_Id :="}, {"sha": "53529ddbb040708dc584226a8c8a1742eea7c395", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f62054146e86e792b6ce061bd418b9a2384ae9a5/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f62054146e86e792b6ce061bd418b9a2384ae9a5/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=f62054146e86e792b6ce061bd418b9a2384ae9a5", "patch": "@@ -3569,7 +3569,7 @@ package body Exp_Ch4 is\n             --  and save a reference to the pool type's Allocate routine.\n \n             elsif Present (Get_Rep_Pragma\n-                             (Etype (Pool), Name_Simple_Storage_Pool))\n+                             (Etype (Pool), Name_Simple_Storage_Pool_Type))\n             then\n                declare\n                   Alloc_Op  : Entity_Id := Get_Name_Entity_Id (Name_Allocate);"}, {"sha": "ad7f253244ce35140d731af1cf4aa81ea4de2c37", "filename": "gcc/ada/exp_intr.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f62054146e86e792b6ce061bd418b9a2384ae9a5/gcc%2Fada%2Fexp_intr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f62054146e86e792b6ce061bd418b9a2384ae9a5/gcc%2Fada%2Fexp_intr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_intr.adb?ref=f62054146e86e792b6ce061bd418b9a2384ae9a5", "patch": "@@ -1091,7 +1091,7 @@ package body Exp_Intr is\n          --  to null.\n \n          elsif Present (Get_Rep_Pragma\n-                          (Etype (Pool), Name_Simple_Storage_Pool))\n+                          (Etype (Pool), Name_Simple_Storage_Pool_Type))\n          then\n             declare\n                Dealloc_Op  : Entity_Id := Get_Name_Entity_Id (Name_Deallocate);"}, {"sha": "a34517bb5be0535f96f2b127433a0bb46ce94143", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f62054146e86e792b6ce061bd418b9a2384ae9a5/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f62054146e86e792b6ce061bd418b9a2384ae9a5/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=f62054146e86e792b6ce061bd418b9a2384ae9a5", "patch": "@@ -4111,13 +4111,13 @@ package body Freeze is\n             --  two are optional). We also verify that the full type for a\n             --  private type is allowed to be a simple storage pool type.\n \n-            if Present (Get_Rep_Pragma (E, Name_Simple_Storage_Pool))\n+            if Present (Get_Rep_Pragma (E, Name_Simple_Storage_Pool_Type))\n               and then (Is_Base_Type (E) or else Has_Private_Declaration (E))\n             then\n \n                --  If the type is marked Has_Private_Declaration, then this is\n                --  a full type for a private type that was specified with the\n-               --  pragma Simple_Storage_Pool, and here we ensure that the\n+               --  pragma Simple_Storage_Pool_Type, and here we ensure that the\n                --  pragma is allowed for the full type (for example, it can't\n                --  be an array type, or a nonlimited record type).\n \n@@ -4126,7 +4126,7 @@ package body Freeze is\n                        or else not Is_Immutably_Limited_Type (E))\n                     and then not Is_Private_Type (E)\n                   then\n-                     Error_Msg_Name_1 := Name_Simple_Storage_Pool;\n+                     Error_Msg_Name_1 := Name_Simple_Storage_Pool_Type;\n \n                      Error_Msg_N\n                        (\"pragma% can only apply to full type that is an \" &"}, {"sha": "6155a8c94c7d37a6139f824ec33bf8c82e419dfe", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f62054146e86e792b6ce061bd418b9a2384ae9a5/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f62054146e86e792b6ce061bd418b9a2384ae9a5/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=f62054146e86e792b6ce061bd418b9a2384ae9a5", "patch": "@@ -9079,17 +9079,6 @@ The compiler no longer generates code to initialize, finalize or adjust an\n object or a nested component, either declared on the stack or on the heap. The\n deallocation of a controlled object no longer finalizes its contents.\n \n-@item No_Implicit_Aliasing\n-@findex No_Implicit_Aliasing\n-\n-This restriction, which is not required to be partition-wide consistent,\n-requires an explicit aliased keyword for an object to which 'Access,\n-'Unchecked_Access, or 'Address is applied, and forbids entirely the use of\n-the 'Unrestricted_Access attribute for objects. Note: the reason that\n-Unrestricted_Access is forbidden is that it would require the prefix\n-to be aliased, and in such cases, it can always be replaced by\n-the standard attribute Unchecked_Access which is preferable.\n-\n @item No_Implicit_Conditionals\n @findex No_Implicit_Conditionals\n This restriction ensures that the generated code does not contain any\n@@ -9322,6 +9311,16 @@ identifiers (other than @code{No_Implementation_Restrictions} itself)\n are present.  With this restriction, the only other restriction identifiers\n that can be used are those defined in the Ada Reference Manual.\n \n+@item No_Implicit_Aliasing\n+@findex No_Implicit_Aliasing\n+This restriction, which is not required to be partition-wide consistent,\n+requires an explicit aliased keyword for an object to which 'Access,\n+'Unchecked_Access, or 'Address is applied, and forbids entirely the use of\n+the 'Unrestricted_Access attribute for objects. Note: the reason that\n+Unrestricted_Access is forbidden is that it would require the prefix\n+to be aliased, and in such cases, it can always be replaced by\n+the standard attribute Unchecked_Access which is preferable.\n+\n @item No_Wide_Characters\n @findex No_Wide_Characters\n This restriction ensures at compile time that no uses of the types"}, {"sha": "6a28dbf533af24f1064739c51b9e89a4a62d4ef7", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f62054146e86e792b6ce061bd418b9a2384ae9a5/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f62054146e86e792b6ce061bd418b9a2384ae9a5/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=f62054146e86e792b6ce061bd418b9a2384ae9a5", "patch": "@@ -5105,7 +5105,15 @@ All other optional warnings are turned on.\n @cindex @option{-gnatwA} (@command{gcc})\n This switch suppresses all optional warning messages, see remaining list\n in this section for details on optional warning messages that can be\n-individually controlled.\n+individually controlled. Note that unlike switch @option{-gnatws}, the\n+use of switch @option{-gnatwA} does not suppress warnings that are\n+normally given unconditionally and cannot be individually controlled\n+(for example, the warning about a missing exit path in a function).\n+Also, again unlike switch @option{-gnatws}, warnings suppressed by\n+the use of switch @option{-gnatwA} can be individually turned back\n+on. For example the use of switch @option{-gnatwA} followed by\n+switch @option{-gnatwd} will suppress all optional warnings except\n+the warnings for implicit dereferencing.\n \n @item -gnatw.a\n @emph{Activate warnings on failing assertions.}\n@@ -5632,8 +5640,14 @@ This switch suppresses warnings for object renaming function.\n @emph{Suppress all warnings.}\n @cindex @option{-gnatws} (@command{gcc})\n This switch completely suppresses the\n-output of all warning messages from the GNAT front end.\n-Note that it does not suppress warnings from the @command{gcc} back end.\n+output of all warning messages from the GNAT front end, including\n+both warnings that can be controlled by switches described in this\n+section, and those that are normally given unconditionally. The\n+effect of this suppress action can only be cancelled by a subsequent\n+use of the switch @option{-gnatwn}.\n+\n+Note that switch @option{-gnatws} does not suppress\n+warnings from the @command{gcc} back end.\n To suppress these back end warnings as well, use the switch @option{-w}\n in addition to @option{-gnatws}. Also this switch has no effect on the\n handling of style check messages."}, {"sha": "2e4d9b1332c4c4754957b21256d27b2aec3eb0fa", "filename": "gcc/ada/par-prag.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f62054146e86e792b6ce061bd418b9a2384ae9a5/gcc%2Fada%2Fpar-prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f62054146e86e792b6ce061bd418b9a2384ae9a5/gcc%2Fada%2Fpar-prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-prag.adb?ref=f62054146e86e792b6ce061bd418b9a2384ae9a5", "patch": "@@ -1230,7 +1230,7 @@ begin\n            Pragma_Shared_Passive                 |\n            Pragma_Short_Circuit_And_Or           |\n            Pragma_Short_Descriptors              |\n-           Pragma_Simple_Storage_Pool            |\n+           Pragma_Simple_Storage_Pool_Type       |\n            Pragma_Storage_Size                   |\n            Pragma_Storage_Unit                   |\n            Pragma_Static_Elaboration_Desired     |"}, {"sha": "2d9baadc794b99e7af1de51975164ea48a5acbf1", "filename": "gcc/ada/s-tasren.adb", "status": "modified", "additions": 29, "deletions": 26, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f62054146e86e792b6ce061bd418b9a2384ae9a5/gcc%2Fada%2Fs-tasren.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f62054146e86e792b6ce061bd418b9a2384ae9a5/gcc%2Fada%2Fs-tasren.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tasren.adb?ref=f62054146e86e792b6ce061bd418b9a2384ae9a5", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---         Copyright (C) 1992-2011, Free Software Foundation, Inc.          --\n+--         Copyright (C) 1992-2012, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -107,6 +107,12 @@ package body System.Tasking.Rendezvous is\n    --  debugging it may be wise to modify the above renamings to the\n    --  non-nestable forms.\n \n+   procedure Local_Complete_Rendezvous (Ex : Ada.Exceptions.Exception_Id);\n+   --  Internal version of Complete_Rendezvous, used to implement\n+   --  Complete_Rendezvous and Exceptional_Complete_Rendezvous.\n+   --  Should be called holding no locks, generally with abort not yet\n+   --  deferred.\n+\n    procedure Boost_Priority (Call : Entry_Call_Link; Acceptor : Task_Id);\n    pragma Inline (Boost_Priority);\n    --  Call this only with abort deferred and holding lock of Acceptor\n@@ -498,7 +504,7 @@ package body System.Tasking.Rendezvous is\n \n    procedure Complete_Rendezvous is\n    begin\n-      Exceptional_Complete_Rendezvous (Ada.Exceptions.Null_Id);\n+      Local_Complete_Rendezvous (Ada.Exceptions.Null_Id);\n    end Complete_Rendezvous;\n \n    -------------------------------------\n@@ -508,19 +514,33 @@ package body System.Tasking.Rendezvous is\n    procedure Exceptional_Complete_Rendezvous\n      (Ex : Ada.Exceptions.Exception_Id)\n    is\n+      procedure Internal_Reraise;\n+      pragma No_Return (Internal_Reraise);\n+      pragma Import (C, Internal_Reraise, \"__gnat_reraise\");\n+\n+   begin\n+      Local_Complete_Rendezvous (Ex);\n+      Internal_Reraise;\n+\n+      --  ??? Do we need to give precedence to Program_Error that might be\n+      --  raised due to failure of finalization, over Tasking_Error from\n+      --  failure of requeue?\n+   end Exceptional_Complete_Rendezvous;\n+\n+   -------------------------------\n+   -- Local_Complete_Rendezvous --\n+   -------------------------------\n+\n+   procedure Local_Complete_Rendezvous (Ex : Ada.Exceptions.Exception_Id) is\n       Self_Id                : constant Task_Id := STPO.Self;\n       Entry_Call             : Entry_Call_Link := Self_Id.Common.Call;\n       Caller                 : Task_Id;\n       Called_PO              : STPE.Protection_Entries_Access;\n       Acceptor_Prev_Priority : Integer;\n \n-      Exception_To_Raise : Ada.Exceptions.Exception_Id := Ex;\n       Ceiling_Violation  : Boolean;\n \n       use type Ada.Exceptions.Exception_Id;\n-      procedure Internal_Reraise;\n-      pragma Import (C, Internal_Reraise, \"__gnat_reraise\");\n-\n       procedure Transfer_Occurrence\n         (Target : Ada.Exceptions.Exception_Occurrence_Access;\n          Source : Ada.Exceptions.Exception_Occurrence);\n@@ -529,18 +549,12 @@ package body System.Tasking.Rendezvous is\n       use type STPE.Protection_Entries_Access;\n \n    begin\n-      --  Consider phasing out Complete_Rendezvous in favor of direct call to\n-      --  this with Ada.Exceptions.Null_ID. See code expansion examples for\n-      --  Accept_Call and Selective_Wait. Also consider putting an explicit\n-      --  re-raise after this call, in the generated code. That way we could\n-      --  eliminate the code here that reraises the exception.\n-\n       --  The deferral level is critical here, since we want to raise an\n       --  exception or allow abort to take place, if there is an exception or\n       --  abort pending.\n \n       pragma Debug\n-       (Debug.Trace (Self_Id, \"Exceptional_Complete_Rendezvous\", 'R'));\n+        (Debug.Trace (Self_Id, \"Local_Complete_Rendezvous\", 'R'));\n \n       if Ex = Ada.Exceptions.Null_Id then\n \n@@ -632,9 +646,7 @@ package body System.Tasking.Rendezvous is\n \n                if Ceiling_Violation then\n                   pragma Assert (Ex = Ada.Exceptions.Null_Id);\n-\n-                  Exception_To_Raise := Program_Error'Identity;\n-                  Entry_Call.Exception_To_Raise := Exception_To_Raise;\n+                  Entry_Call.Exception_To_Raise := Program_Error'Identity;\n \n                   if Single_Lock then\n                      Lock_RTS;\n@@ -692,16 +704,7 @@ package body System.Tasking.Rendezvous is\n       end if;\n \n       Initialization.Undefer_Abort (Self_Id);\n-\n-      if Exception_To_Raise /= Ada.Exceptions.Null_Id then\n-         Internal_Reraise;\n-      end if;\n-\n-      --  ??? Do we need to give precedence to Program_Error that might be\n-      --  raised due to failure of finalization, over Tasking_Error from\n-      --  failure of requeue?\n-\n-   end Exceptional_Complete_Rendezvous;\n+   end Local_Complete_Rendezvous;\n \n    -------------------------------------\n    -- Requeue_Protected_To_Task_Entry --"}, {"sha": "ea98fe3cccee7e6dc206e56113094faa5169ad10", "filename": "gcc/ada/s-tasren.ads", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f62054146e86e792b6ce061bd418b9a2384ae9a5/gcc%2Fada%2Fs-tasren.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f62054146e86e792b6ce061bd418b9a2384ae9a5/gcc%2Fada%2Fs-tasren.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tasren.ads?ref=f62054146e86e792b6ce061bd418b9a2384ae9a5", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  S p e c                                 --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -308,6 +308,7 @@ package System.Tasking.Rendezvous is\n \n    procedure Exceptional_Complete_Rendezvous\n      (Ex : Ada.Exceptions.Exception_Id);\n+   pragma No_Return (Exceptional_Complete_Rendezvous);\n    --  Called by acceptor to mark the end of the current rendezvous and\n    --  propagate an exception to the caller.\n "}, {"sha": "210e49c0a01c30853e5541b7fe7cba4bbcbdc2be", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f62054146e86e792b6ce061bd418b9a2384ae9a5/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f62054146e86e792b6ce061bd418b9a2384ae9a5/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=f62054146e86e792b6ce061bd418b9a2384ae9a5", "patch": "@@ -4549,7 +4549,7 @@ package body Sem_Attr is\n \n             if Attr_Id = Attribute_Storage_Pool then\n                if Present (Get_Rep_Pragma (Etype (Entity (N)),\n-                                           Name_Simple_Storage_Pool))\n+                                           Name_Simple_Storage_Pool_Type))\n                then\n                   Error_Msg_Name_1 := Aname;\n                   Error_Msg_N (\"cannot use % attribute for type with simple \" &\n@@ -4570,7 +4570,7 @@ package body Sem_Attr is\n \n             else\n                if not Present (Get_Rep_Pragma (Etype (Entity (N)),\n-                                               Name_Simple_Storage_Pool))\n+                                               Name_Simple_Storage_Pool_Type))\n                then\n                   Error_Attr_P\n                     (\"cannot use % attribute for type without simple \" &"}, {"sha": "9e552ec1118e324a7f1a43af10146fbf631e432c", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f62054146e86e792b6ce061bd418b9a2384ae9a5/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f62054146e86e792b6ce061bd418b9a2384ae9a5/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=f62054146e86e792b6ce061bd418b9a2384ae9a5", "patch": "@@ -3201,14 +3201,14 @@ package body Sem_Ch13 is\n                  (Expr, Class_Wide_Type (RTE (RE_Root_Storage_Pool)));\n \n             --  In the Simple_Storage_Pool case, we allow a variable of any\n-            --  Simple_Storage_Pool type, so we Resolve without imposing an\n+            --  simple storage pool type, so we Resolve without imposing an\n             --  expected type.\n \n             else\n                Analyze_And_Resolve (Expr);\n \n                if not Present (Get_Rep_Pragma\n-                                 (Etype (Expr), Name_Simple_Storage_Pool))\n+                                 (Etype (Expr), Name_Simple_Storage_Pool_Type))\n                then\n                   Error_Msg_N\n                     (\"expression must be of a simple storage pool type\", Expr);"}, {"sha": "d564b1e590ed3829537f247c93c69abef0ccb7ef", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f62054146e86e792b6ce061bd418b9a2384ae9a5/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f62054146e86e792b6ce061bd418b9a2384ae9a5/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=f62054146e86e792b6ce061bd418b9a2384ae9a5", "patch": "@@ -13150,15 +13150,16 @@ package body Sem_Prag is\n             Check_Valid_Configuration_Pragma;\n             Short_Descriptors := True;\n \n-         -------------------------\n-         -- Simple_Storage_Pool --\n-         -------------------------\n+         ------------------------------\n+         -- Simple_Storage_Pool_Type --\n+         ------------------------------\n \n-         --  pragma Simple_Storage_Pool (type_LOCAL_NAME);\n+         --  pragma Simple_Storage_Pool_Type (type_LOCAL_NAME);\n \n-         when Pragma_Simple_Storage_Pool => Simple_Storage_Pool : declare\n-               Type_Id : Node_Id;\n-               Typ     : Entity_Id;\n+         when Pragma_Simple_Storage_Pool_Type =>\n+         Simple_Storage_Pool_Type : declare\n+            Type_Id : Node_Id;\n+            Typ     : Entity_Id;\n \n          begin\n             GNAT_Pragma;\n@@ -13207,7 +13208,7 @@ package body Sem_Prag is\n             end if;\n \n             Record_Rep_Item (Typ, N);\n-         end Simple_Storage_Pool;\n+         end Simple_Storage_Pool_Type;\n \n          ----------------------\n          -- Source_File_Name --\n@@ -15176,7 +15177,7 @@ package body Sem_Prag is\n       Pragma_Shared                         => -1,\n       Pragma_Shared_Passive                 => -1,\n       Pragma_Short_Descriptors              =>  0,\n-      Pragma_Simple_Storage_Pool            =>  0,\n+      Pragma_Simple_Storage_Pool_Type       =>  0,\n       Pragma_Source_File_Name               => -1,\n       Pragma_Source_File_Name_Project       => -1,\n       Pragma_Source_Reference               => -1,"}, {"sha": "3d693e033bc26eb8d6191ec2182b62e825f9727c", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f62054146e86e792b6ce061bd418b9a2384ae9a5/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f62054146e86e792b6ce061bd418b9a2384ae9a5/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=f62054146e86e792b6ce061bd418b9a2384ae9a5", "patch": "@@ -4243,8 +4243,9 @@ package body Sem_Res is\n                         := Associated_Storage_Pool (Root_Type (Typ));\n             begin\n                if Present (Pool)\n-                 and then Present (Get_Rep_Pragma\n-                                     (Etype (Pool), Name_Simple_Storage_Pool))\n+                 and then\n+                   Present (Get_Rep_Pragma\n+                              (Etype (Pool), Name_Simple_Storage_Pool_Type))\n                then\n                   Error_Msg_N\n                     (\"limited function calls not yet supported in simple \" &"}, {"sha": "f8ea812d4eef44c1a2731ee1148aaba13ee903d3", "filename": "gcc/ada/sinput-p.adb", "status": "modified", "additions": 46, "deletions": 1, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f62054146e86e792b6ce061bd418b9a2384ae9a5/gcc%2Fada%2Fsinput-p.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f62054146e86e792b6ce061bd418b9a2384ae9a5/gcc%2Fada%2Fsinput-p.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinput-p.adb?ref=f62054146e86e792b6ce061bd418b9a2384ae9a5", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -26,10 +26,15 @@\n with Ada.Unchecked_Conversion;\n with Ada.Unchecked_Deallocation;\n \n+with GNAT.Byte_Order_Mark; use GNAT.Byte_Order_Mark;\n+\n+with Opt;     use Opt;\n+with Output;  use Output;\n with Prj.Err;\n with Sinput.C;\n \n with System;\n+with System.WCh_Con; use System.WCh_Con;\n \n package body Sinput.P is\n \n@@ -164,6 +169,46 @@ package body Sinput.P is\n       Prj.Err.Scanner.Set_Special_Character ('#');\n       Prj.Err.Scanner.Set_Special_Character ('$');\n \n+      --  Check for BOM\n+\n+      declare\n+         BOM : BOM_Kind;\n+         Len : Natural;\n+         Tst : String (1 .. 5);\n+\n+      begin\n+         for J in 1 .. 5 loop\n+            Tst (J) := Source (Scan_Ptr + Source_Ptr (J) - 1);\n+         end loop;\n+\n+         Read_BOM (Tst, Len, BOM, False);\n+\n+         case BOM is\n+            when UTF8_All =>\n+               Scan_Ptr := Scan_Ptr + Source_Ptr (Len);\n+               Wide_Character_Encoding_Method := WCEM_UTF8;\n+               Upper_Half_Encoding := True;\n+\n+            when UTF16_LE | UTF16_BE =>\n+               Set_Standard_Error;\n+               Write_Line (\"UTF-16 encoding format not recognized\");\n+               Set_Standard_Output;\n+               raise Unrecoverable_Error;\n+\n+            when UTF32_LE | UTF32_BE =>\n+               Set_Standard_Error;\n+               Write_Line (\"UTF-32 encoding format not recognized\");\n+               Set_Standard_Output;\n+               raise Unrecoverable_Error;\n+\n+            when Unknown =>\n+               null;\n+\n+            when others =>\n+               raise Program_Error;\n+         end case;\n+      end;\n+\n       --  We scan past junk to the first interesting compilation unit token, to\n       --  see if it is SEPARATE. We ignore WITH keywords during this and also\n       --  PRIVATE. The reason for ignoring PRIVATE is that it handles some"}, {"sha": "7abf4ab68456a8f70b4ac566bdc4058ec0614070", "filename": "gcc/ada/snames.adb-tmpl", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f62054146e86e792b6ce061bd418b9a2384ae9a5/gcc%2Fada%2Fsnames.adb-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f62054146e86e792b6ce061bd418b9a2384ae9a5/gcc%2Fada%2Fsnames.adb-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.adb-tmpl?ref=f62054146e86e792b6ce061bd418b9a2384ae9a5", "patch": "@@ -217,8 +217,6 @@ package body Snames is\n          return Pragma_Priority;\n       elsif N = Name_Relative_Deadline then\n          return Pragma_Relative_Deadline;\n-      elsif N = Name_Simple_Storage_Pool then\n-         return Pragma_Simple_Storage_Pool;\n       elsif N = Name_Storage_Size then\n          return Pragma_Storage_Size;\n       elsif N = Name_Storage_Unit then\n@@ -416,7 +414,6 @@ package body Snames is\n         or else N = Name_Interface\n         or else N = Name_Relative_Deadline\n         or else N = Name_Priority\n-        or else N = Name_Simple_Storage_Pool\n         or else N = Name_Storage_Size\n         or else N = Name_Storage_Unit;\n    end Is_Pragma_Name;"}, {"sha": "34761f615ac58c91d7c47a963b779edf7cd5d5e5", "filename": "gcc/ada/snames.ads-tmpl", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f62054146e86e792b6ce061bd418b9a2384ae9a5/gcc%2Fada%2Fsnames.ads-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f62054146e86e792b6ce061bd418b9a2384ae9a5/gcc%2Fada%2Fsnames.ads-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads-tmpl?ref=f62054146e86e792b6ce061bd418b9a2384ae9a5", "patch": "@@ -543,6 +543,7 @@ package Snames is\n    Name_Share_Generic                  : constant Name_Id := N + $; -- GNAT\n    Name_Shared                         : constant Name_Id := N + $; -- Ada 83\n    Name_Shared_Passive                 : constant Name_Id := N + $;\n+   Name_Simple_Storage_Pool_Type       : constant Name_Id := N + $; -- GNAT\n \n    --  Note: Storage_Size is not in this list because its name matches the name\n    --  of the corresponding attribute. However, it is included in the\n@@ -1698,6 +1699,7 @@ package Snames is\n       Pragma_Share_Generic,\n       Pragma_Shared,\n       Pragma_Shared_Passive,\n+      Pragma_Simple_Storage_Pool_Type,\n       Pragma_Source_Reference,\n       Pragma_Static_Elaboration_Desired,\n       Pragma_Stream_Convert,\n@@ -1732,7 +1734,6 @@ package Snames is\n       Pragma_Fast_Math,\n       Pragma_Interface,\n       Pragma_Priority,\n-      Pragma_Simple_Storage_Pool,\n       Pragma_Storage_Size,\n       Pragma_Storage_Unit,\n "}, {"sha": "8e2b1b6a879810af1cfd48c1dbc2d742500c120a", "filename": "gcc/ada/warnsw.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f62054146e86e792b6ce061bd418b9a2384ae9a5/gcc%2Fada%2Fwarnsw.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f62054146e86e792b6ce061bd418b9a2384ae9a5/gcc%2Fada%2Fwarnsw.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fwarnsw.adb?ref=f62054146e86e792b6ce061bd418b9a2384ae9a5", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1999-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1999-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -308,6 +308,7 @@ package body Warnsw is\n             Warn_On_Redundant_Constructs        := False;\n             Warn_On_Reverse_Bit_Order           := False;\n             Warn_On_Suspicious_Contract         := False;\n+            Warn_On_Suspicious_Modulus_Value    := False;\n             Warn_On_Unchecked_Conversion        := False;\n             Warn_On_Unordered_Enumeration_Type  := False;\n             Warn_On_Unrecognized_Pragma         := False;"}]}