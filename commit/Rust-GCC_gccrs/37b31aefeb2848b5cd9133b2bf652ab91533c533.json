{"sha": "37b31aefeb2848b5cd9133b2bf652ab91533c533", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzdiMzFhZWZlYjI4NDhiNWNkOTEzM2IyYmY2NTJhYjkxNTMzYzUzMw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-09-09T03:26:58Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-09-09T03:26:58Z"}, "message": "ggc.h (ggc_alloc): New function.\n\n\t* ggc.h (ggc_alloc): New function.\n\t(ggc_mark): Likewise.\n\t* ggc-simple.c (ggc_any): New structure.\n\t(ggc_status): Add anys.\n\t(n_anys_collected): New variable.\n\t(ggc_alloc): Define.\n\t(ggc_mark): Likewise.\n\t(ggc_collect): Collect the anys.\n\nFrom-SVN: r29222", "tree": {"sha": "aef3a44806551f0853941f5a4252c13e8beec1e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aef3a44806551f0853941f5a4252c13e8beec1e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/37b31aefeb2848b5cd9133b2bf652ab91533c533", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37b31aefeb2848b5cd9133b2bf652ab91533c533", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37b31aefeb2848b5cd9133b2bf652ab91533c533", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37b31aefeb2848b5cd9133b2bf652ab91533c533/comments", "author": null, "committer": null, "parents": [{"sha": "fc0e7bf5d137416b780ce3172ebde7a16870378d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc0e7bf5d137416b780ce3172ebde7a16870378d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc0e7bf5d137416b780ce3172ebde7a16870378d"}], "stats": {"total": 99, "additions": 96, "deletions": 3}, "files": [{"sha": "bdd4753b1a8103bb5b71753436ff1f498cd146f6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37b31aefeb2848b5cd9133b2bf652ab91533c533/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37b31aefeb2848b5cd9133b2bf652ab91533c533/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=37b31aefeb2848b5cd9133b2bf652ab91533c533", "patch": "@@ -1,3 +1,14 @@\n+Wed Sep  8 20:30:42 1999  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* ggc.h (ggc_alloc): New function.\n+\t(ggc_mark): Likewise.\n+\t* ggc-simple.c (ggc_any): New structure.\n+\t(ggc_status): Add anys.\n+\t(n_anys_collected): New variable.\n+\t(ggc_alloc): Define.\n+\t(ggc_mark): Likewise.\n+\t(ggc_collect): Collect the anys.\n+\n Wed Sep  8 20:15:14 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* c-decl.c (mark_binding_level): Make static to match prototype."}, {"sha": "4858934f36107d6f053cf34a4704f4b0e8ffe5e5", "filename": "gcc/ggc-simple.c", "status": "modified", "additions": 83, "deletions": 3, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37b31aefeb2848b5cd9133b2bf652ab91533c533/gcc%2Fggc-simple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37b31aefeb2848b5cd9133b2bf652ab91533c533/gcc%2Fggc-simple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-simple.c?ref=37b31aefeb2848b5cd9133b2bf652ab91533c533", "patch": "@@ -74,6 +74,21 @@ struct ggc_string\n   char string[1];\n };\n \n+/* A generic allocation, with an external mark bit.  */\n+\n+struct ggc_any\n+{\n+  struct ggc_any *chain;\n+  char mark;\n+\n+  /* Make sure the data is reasonably aligned.  */\n+  union {\n+    char c;\n+    HOST_WIDE_INT i;\n+    long double d;\n+  } u;\n+};\n+\n #define GGC_STRING_MAGIC\t((unsigned int)0xa1b2c3d4)\n \n struct ggc_status\n@@ -83,6 +98,7 @@ struct ggc_status\n   struct ggc_rtvec *vecs;\n   struct ggc_tree *trees;\n   struct ggc_string *strings;\n+  struct ggc_any *anys;\n   size_t bytes_alloced_since_gc;\n };\n \n@@ -96,6 +112,7 @@ static int n_rtxs_collected;\n static int n_vecs_collected;\n static int n_trees_collected;\n static int n_strings_collected;\n+static int n_anys_collected;\n extern int gc_time;\n \n #ifdef GGC_DUMP\n@@ -289,6 +306,24 @@ ggc_alloc_string (contents, length)\n   return s->string;\n }\n \n+/* Like xmalloc, but allocates GC-able memory.  */\n+\n+void *\n+ggc_alloc (bytes)\n+     size_t bytes;\n+{\n+  struct ggc_any *a;\n+\n+  if (bytes == 0)\n+    bytes = 1;\n+  bytes += (&((struct ggc_any *) 0)->u.c - (char *) 0);\n+\n+  a = (struct ggc_any *) xmalloc (bytes);\n+  a->chain = ggc_chain->anys;\n+  ggc_chain->anys = a;\n+\n+  return &a->u;\n+}\n \n /* Freeing a bit of rtl is as simple as calling free.  */\n \n@@ -630,6 +665,18 @@ ggc_mark_string (s)\n   *magic = GGC_STRING_MAGIC | 1;\n }\n \n+/* Mark P, allocated with ggc_alloc.  */\n+\n+void\n+ggc_mark (p)\n+     void *p;\n+{\n+  struct ggc_any *a;\n+  ptrdiff_t d = (&((struct ggc_any *) 0)->u.c - (char *) 0);\n+  a = (struct ggc_any *) (((char*) p) - d);\n+  a->mark = 1;\n+}\n+\n /* The top level mark-and-sweep routine.  */\n \n void\n@@ -641,7 +688,8 @@ ggc_collect ()\n   struct ggc_string *s, **sp;\n   struct ggc_root *x;\n   struct ggc_status *gs;\n-  int time, n_rtxs, n_trees, n_vecs, n_strings;\n+  struct ggc_any *a, **ap;\n+  int time, n_rtxs, n_trees, n_vecs, n_strings, n_anys;\n \n #ifndef ENABLE_CHECKING\n   /* See if it's even worth our while.  */\n@@ -665,6 +713,8 @@ ggc_collect ()\n \tt->tree.common.gc_mark = 0;\n       for (s = gs->strings; s != NULL; s = s->chain)\n \ts->magic_mark = GGC_STRING_MAGIC;\n+      for (a = gs->anys; a != NULL; a = a->chain)\n+\ta->mark = 0;\n     }\n \n   /* Mark through all the roots.  */\n@@ -680,6 +730,9 @@ ggc_collect ()\n     }\n \n   /* Sweep the resulting dead nodes.  */\n+\n+  /* The RTXs.  */\n+\n   rp = &ggc_chain->rtxs;\n   r = ggc_chain->rtxs;\n   n_rtxs = 0;\n@@ -699,6 +752,8 @@ ggc_collect ()\n   *rp = NULL;\n   n_rtxs_collected += n_rtxs;\n \n+  /* The vectors.  */\n+\n   vp = &ggc_chain->vecs;\n   v = ggc_chain->vecs;\n   n_vecs = 0;\n@@ -718,6 +773,8 @@ ggc_collect ()\n   *vp = NULL;\n   n_vecs_collected += n_vecs;\n \n+  /* The trees.  */\n+\n   tp = &ggc_chain->trees;\n   t = ggc_chain->trees;\n   n_trees = 0;\n@@ -737,6 +794,8 @@ ggc_collect ()\n   *tp = NULL;\n   n_trees_collected += n_trees;\n \n+  /* The strings.  */\n+\n   sp = &ggc_chain->strings;\n   s = ggc_chain->strings;\n   n_strings = 0;\n@@ -755,6 +814,27 @@ ggc_collect ()\n     }\n   *sp = NULL;\n   n_strings_collected += n_strings;\n+\n+  /* The generic data.  */\n+\n+  ap = &ggc_chain->anys;\n+  a = ggc_chain->anys;\n+  n_anys = 0;\n+  while (a != NULL)\n+    {\n+      struct ggc_any *chain = a->chain;\n+      if (!a->mark)\n+\t{\n+\t  free (a);\n+\t  *ap = chain;\n+\t  n_anys++;\n+\t}\n+      else\n+\tap = &a->chain;\n+      a = chain;\n+    }\n+  n_anys_collected += n_anys;\n+\n   ggc_chain->bytes_alloced_since_gc = 0;\n \n   time = get_run_time () - time;\n@@ -763,8 +843,8 @@ ggc_collect ()\n   if (!quiet_flag)\n     {\n       time = (time + 500) / 1000;\n-      fprintf (stderr, \"%dr,%dv,%dt,%ds %d.%03d}\", n_rtxs, n_vecs, n_trees,\n-\t       n_strings, time / 1000, time % 1000);\n+      fprintf (stderr, \"%dr,%dv,%dt,%ds,%da %d.%03d}\", n_rtxs, n_vecs, \n+\t       n_trees, n_strings, n_anys, time / 1000, time % 1000);\n     }\n }\n "}, {"sha": "b0673e0e05a43885d2df7d401b18d4bf1ed4de34", "filename": "gcc/ggc.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37b31aefeb2848b5cd9133b2bf652ab91533c533/gcc%2Fggc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37b31aefeb2848b5cd9133b2bf652ab91533c533/gcc%2Fggc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc.h?ref=37b31aefeb2848b5cd9133b2bf652ab91533c533", "patch": "@@ -56,6 +56,7 @@ struct rtx_def *ggc_alloc_rtx PROTO ((int nslots));\n struct rtvec_def *ggc_alloc_rtvec PROTO ((int nelt));\n union tree_node *ggc_alloc_tree PROTO ((int length));\n char *ggc_alloc_string PROTO ((const char *contents, int length));\n+void *ggc_alloc PROTO ((size_t));\n \n /* Invoke the collector.  This is really just a hint, but in the case of\n    the simple collector, the only time it will happen.  */\n@@ -78,6 +79,7 @@ void ggc_mark_tree PROTO ((union tree_node *));\n void ggc_mark_tree_varray PROTO ((struct varray_head_tag *));\n void ggc_mark_tree_hash_table PROTO ((struct hash_table *));\n void ggc_mark_string PROTO ((char *));\n+void ggc_mark PROTO ((void *));\n \n /* Callbacks to the languages.  */\n "}]}