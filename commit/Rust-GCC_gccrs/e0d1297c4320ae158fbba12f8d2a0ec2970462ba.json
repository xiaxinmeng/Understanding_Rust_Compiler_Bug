{"sha": "e0d1297c4320ae158fbba12f8d2a0ec2970462ba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTBkMTI5N2M0MzIwYWUxNThmYmJhMTJmOGQyYTBlYzI5NzA0NjJiYQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2003-07-22T09:53:34Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2003-07-22T09:53:34Z"}, "message": "cp-tree.h (enum cp_lvalue_kind): Add clk_packed.\n\ncp:\n\t* cp-tree.h (enum cp_lvalue_kind): Add clk_packed.\n\t* tree.c (lvalue_p_1): Set it.\n\t* class.c (check_field): Don't allow non-packed non-POD fields to\n\tbe packed.\n\t* call.c (reference_binding): Need a temporary for all bitfield\n\tand packed fields.\n\t(convert_like_real): Check it is ok to make a temporary here.\ntestsuite:\n\t* g++.dg/ext/packed3.C: New test.\n\t* g++.dg/ext/packed4.C: New test.\n\nFrom-SVN: r69669", "tree": {"sha": "6679a92cc9d1ed37f7676b33077730a559a92f24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6679a92cc9d1ed37f7676b33077730a559a92f24"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0d1297c4320ae158fbba12f8d2a0ec2970462ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0d1297c4320ae158fbba12f8d2a0ec2970462ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0d1297c4320ae158fbba12f8d2a0ec2970462ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0d1297c4320ae158fbba12f8d2a0ec2970462ba/comments", "author": null, "committer": null, "parents": [{"sha": "c6e4cc53e53de0f671b715bfb83f37dbf73aaf2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6e4cc53e53de0f671b715bfb83f37dbf73aaf2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6e4cc53e53de0f671b715bfb83f37dbf73aaf2f"}], "stats": {"total": 169, "additions": 159, "deletions": 10}, "files": [{"sha": "d7a59661e24c288bb47ae600fa10e8957b109585", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0d1297c4320ae158fbba12f8d2a0ec2970462ba/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0d1297c4320ae158fbba12f8d2a0ec2970462ba/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e0d1297c4320ae158fbba12f8d2a0ec2970462ba", "patch": "@@ -1,3 +1,13 @@\n+2003-07-22  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* cp-tree.h (enum cp_lvalue_kind): Add clk_packed.\n+\t* tree.c (lvalue_p_1): Set it.\n+\t* class.c (check_field): Don't allow non-packed non-POD fields to\n+\tbe packed.\n+\t* call.c (reference_binding): Need a temporary for all bitfield\n+\tand packed fields.\n+\t(convert_like_real): Check it is ok to make a temporary here.\n+\n 2003-07-21  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* cp-tree.h (hack_identifier): Remove."}, {"sha": "022ac78add6044d0ef3e7560bca31ea50d261369", "filename": "gcc/cp/call.c", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0d1297c4320ae158fbba12f8d2a0ec2970462ba/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0d1297c4320ae158fbba12f8d2a0ec2970462ba/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=e0d1297c4320ae158fbba12f8d2a0ec2970462ba", "patch": "@@ -1054,10 +1054,10 @@ reference_binding (tree rto, tree rfrom, tree expr, int flags)\n \t lvalue.  */\n       conv = build1 (IDENTITY_CONV, from, expr);\n       conv = direct_reference_binding (rto, conv);\n-      if ((lvalue_p & clk_bitfield) != 0 \n-\t  && CP_TYPE_CONST_NON_VOLATILE_P (to))\n+      if ((lvalue_p & clk_bitfield) != 0\n+\t  || ((lvalue_p & clk_packed) != 0 && !TYPE_PACKED (to)))\n \t/* For the purposes of overload resolution, we ignore the fact\n-\t   this expression is a bitfield. (In particular,\n+\t   this expression is a bitfield or packed field. (In particular,\n \t   [over.ics.ref] says specifically that a function with a\n \t   non-const reference parameter is viable even if the\n \t   argument is a bitfield.)\n@@ -1068,6 +1068,7 @@ reference_binding (tree rto, tree rfrom, tree expr, int flags)\n \t   a temporary, so we just issue an error when the conversion\n \t   actually occurs.  */\n \tNEED_TEMPORARY_P (conv) = 1;\n+\t\t\t\t\t\n       return conv;\n     }\n   else if (CLASS_TYPE_P (from) && !(flags & LOOKUP_NO_CONVERSION))\n@@ -4172,6 +4173,23 @@ convert_like_real (tree convs, tree expr, tree fn, int argnum, int inner,\n \tif (NEED_TEMPORARY_P (convs) || !non_cast_lvalue_p (expr))\n \t  {\n \t    tree type = TREE_TYPE (TREE_OPERAND (convs, 0));\n+\n+\t    if (!CP_TYPE_CONST_NON_VOLATILE_P (TREE_TYPE (ref_type)))\n+\t      {\n+\t\t/* If the reference is volatile or non-const, we\n+\t\t   cannot create a temporary.  */\n+\t\tcp_lvalue_kind lvalue = real_lvalue_p (expr);\n+\t\t\n+\t\tif (lvalue & clk_bitfield)\n+\t\t  error (\"cannot bind bitfield `%E' to `%T'\",\n+\t\t\t expr, ref_type);\n+\t\telse if (lvalue & clk_packed)\n+\t\t  error (\"cannot bind packed field `%E' to `%T'\",\n+\t\t\t expr, ref_type);\n+\t\telse\n+\t\t  my_friendly_assert (0, 20030715);\n+\t\treturn error_mark_node;\n+\t      }\n \t    expr = build_target_expr_with_type (expr, type);\n \t  }\n "}, {"sha": "06cb635671949afe9bf47e45b2aed9c2dafa466c", "filename": "gcc/cp/class.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0d1297c4320ae158fbba12f8d2a0ec2970462ba/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0d1297c4320ae158fbba12f8d2a0ec2970462ba/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=e0d1297c4320ae158fbba12f8d2a0ec2970462ba", "patch": "@@ -2959,7 +2959,15 @@ check_field_decls (tree t, tree *access_decls,\n \n       if (TREE_CODE (x) == FIELD_DECL)\n \t{\n-\t  DECL_PACKED (x) |= TYPE_PACKED (t);\n+\t  if (TYPE_PACKED (t))\n+\t    {\n+\t      if (!pod_type_p (TREE_TYPE (x)) && !TYPE_PACKED (TREE_TYPE (x)))\n+\t\tcp_warning_at\n+\t\t  (\"ignoring packed attribute on unpacked non-POD field `%#D'\",\n+\t\t   x);\n+\t      else\n+\t\tDECL_PACKED (x) = 1;\n+\t    }\n \n \t  if (DECL_C_BIT_FIELD (x) && integer_zerop (DECL_INITIAL (x)))\n \t    /* We don't treat zero-width bitfields as making a class"}, {"sha": "8fef2deb96d1bd09e75ce1a99a2588e93a3016e2", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0d1297c4320ae158fbba12f8d2a0ec2970462ba/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0d1297c4320ae158fbba12f8d2a0ec2970462ba/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=e0d1297c4320ae158fbba12f8d2a0ec2970462ba", "patch": "@@ -2955,7 +2955,8 @@ typedef enum cp_lvalue_kind {\n   clk_none = 0,     /* Things that are not an lvalue.  */\n   clk_ordinary = 1, /* An ordinary lvalue.  */\n   clk_class = 2,    /* An rvalue of class-type.  */\n-  clk_bitfield = 4  /* An lvalue for a bit-field.  */\n+  clk_bitfield = 4, /* An lvalue for a bit-field.  */\n+  clk_packed = 8    /* An lvalue for a packed field. */\n } cp_lvalue_kind;\n \n /* The kinds of scopes we recognize.  */"}, {"sha": "59722ac40866206977466305704d544427ea413b", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0d1297c4320ae158fbba12f8d2a0ec2970462ba/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0d1297c4320ae158fbba12f8d2a0ec2970462ba/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=e0d1297c4320ae158fbba12f8d2a0ec2970462ba", "patch": "@@ -100,18 +100,22 @@ lvalue_p_1 (tree ref,\n       op1_lvalue_kind = lvalue_p_1 (TREE_OPERAND (ref, 0),\n \t\t\t\t    treat_class_rvalues_as_lvalues,\n \t\t\t\t    allow_cast_as_lvalue);\n-      if (op1_lvalue_kind \n-\t  /* The \"field\" can be a FUNCTION_DECL or an OVERLOAD in some\n-\t     situations.  */\n-\t  && TREE_CODE (TREE_OPERAND (ref, 1)) == FIELD_DECL\n-\t  && DECL_C_BIT_FIELD (TREE_OPERAND (ref, 1)))\n+      if (!op1_lvalue_kind \n+\t  /* The \"field\" can be a FUNCTION_DECL or an OVERLOAD in some\t\n+  \t     situations.  */\n+ \t  || TREE_CODE (TREE_OPERAND (ref, 1)) != FIELD_DECL)\n+ \t;\n+      else if (DECL_C_BIT_FIELD (TREE_OPERAND (ref, 1)))\n \t{\n \t  /* Clear the ordinary bit.  If this object was a class\n \t     rvalue we want to preserve that information.  */\n \t  op1_lvalue_kind &= ~clk_ordinary;\n \t  /* The lvalue is for a btifield.  */\n \t  op1_lvalue_kind |= clk_bitfield;\n \t}\n+      else if (DECL_PACKED (TREE_OPERAND (ref, 1)))\n+\top1_lvalue_kind |= clk_packed;\n+      \n       return op1_lvalue_kind;\n \n     case STRING_CST:"}, {"sha": "646613a5bb733c99f9849dfd6084b6d10e76a90c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0d1297c4320ae158fbba12f8d2a0ec2970462ba/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0d1297c4320ae158fbba12f8d2a0ec2970462ba/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e0d1297c4320ae158fbba12f8d2a0ec2970462ba", "patch": "@@ -1,5 +1,8 @@\n 2003-07-22  Nathan Sidwell  <nathan@codesourcery.com>\n \n+\t* g++.dg/ext/packed3.C: New test.\n+\t* g++.dg/ext/packed4.C: New test.\n+\n \t* gcc.dg/pack-test-3.c: New test.\n \n 2003-07-21  Janis Johnson  <janis187@us.ibm.com>"}, {"sha": "b6e891f337f011a9e2256b5ff64557a1b08c6871", "filename": "gcc/testsuite/g++.dg/ext/packed3.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0d1297c4320ae158fbba12f8d2a0ec2970462ba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpacked3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0d1297c4320ae158fbba12f8d2a0ec2970462ba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpacked3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpacked3.C?ref=e0d1297c4320ae158fbba12f8d2a0ec2970462ba", "patch": "@@ -0,0 +1,25 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 15 Jul 2003 <nathan@codesourcery.com>\n+\n+// Packed fields are unsuitable for direct reference binding.\n+\n+struct Unpacked { int i; };\n+\n+void Ref (int &p);\n+void Ref (Unpacked &p);\n+\n+struct  __attribute__ ((packed)) Packed\n+{\n+  char c;\n+  int i;\n+  Unpacked u;\n+};\n+\n+void Foo (Packed &p)\n+{\n+  Ref (p.i); // { dg-error \"cannot bind packed field\" \"\" }\n+  Ref (p.u.i); // { dg-error \"cannot bind packed field\" \"\" }\n+  Ref (p.u); // { dg-error \"cannot bind packed field\" \"\" }\n+}"}, {"sha": "c32a0fa6993e30fadefdab4cab47ae1a75b0569d", "filename": "gcc/testsuite/g++.dg/ext/packed4.C", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0d1297c4320ae158fbba12f8d2a0ec2970462ba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpacked4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0d1297c4320ae158fbba12f8d2a0ec2970462ba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpacked4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpacked4.C?ref=e0d1297c4320ae158fbba12f8d2a0ec2970462ba", "patch": "@@ -0,0 +1,80 @@\n+// { dg-do run }\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 15 Jul 2003 <nathan@codesourcery.com>\n+\n+// Packed fields are unsuitable for direct reference binding.\n+\n+struct Unpacked { int i; };\n+\n+int ConstRef (int const &p, int const *ptr, int v)\n+{\n+  if (p != v)\n+    return 1;\n+  if (&p == ptr)\n+    return 2;\n+  return 0;\n+}\n+\n+int ConstRef (Unpacked const &p, Unpacked const *ptr, int v)\n+{\n+  if (p.i != v)\n+    return 1;\n+  if (&p == ptr)\n+    return 2;\n+  return 0;\n+}\n+\n+int Val (int p, int v)\n+{\n+  if (p != v)\n+    return 1;\n+  return 0;\n+}\n+int Val (Unpacked p, int v)\n+{\n+  if (p.i != v)\n+    return 1;\n+  return 0;\n+}\n+\n+struct  __attribute__ ((packed)) Packed\n+{\n+  char c;\n+  int i;\n+  Unpacked u;\n+  char t;\n+};\n+\n+int Foo (Packed &p, int i, int ui)\n+{\n+  int r;\n+  \n+  if ((r = Val (p.i, i)))\n+    return r;\n+  if ((r = Val (p.u.i, ui)))\n+    return r + 2;\n+  if ((r = Val (p.u, ui)))\n+    return r + 4;\n+  \n+  if ((r = ConstRef (p.i, &p.i, i)))\n+    return r + 6;\n+  if ((r = ConstRef (p.u.i, &p.u.i, ui)))\n+    return r + 8;\n+  if ((r = ConstRef (p.u, &p.u, ui)))\n+    return r + 10;\n+\n+  return 0;\n+}\n+\n+int main ()\n+{\n+  Packed p;\n+\n+  p.c = 0x12;\n+  p.i = 0x3456789a;\n+  p.u.i = 0xbcdef00f;\n+  p.t = 0xed;\n+\n+  return Foo (p, 0x3456789a, 0xbcdef00f);\n+}"}]}