{"sha": "91c771ec8a3b649765de3e0a7b04cf946c6649ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTFjNzcxZWM4YTNiNjQ5NzY1ZGUzZTBhN2IwNGNmOTQ2YzY2NDllZg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-07-01T06:55:49Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-07-01T06:55:49Z"}, "message": "openmp - Fix up && and || reductions [PR94366]\n\nAs the testcase shows, the special treatment of && and || reduction combiners\nwhere we expand them as omp_out = (omp_out != 0) && (omp_in != 0) (or with ||)\nis not needed just for &&/|| on floating point or complex types, but for all\n&&/|| reductions - when expanded as omp_out = omp_out && omp_in (not in C but\nGENERIC) it is actually gimplified into NOP_EXPRs to bool from both operands,\nwhich turns non-zero values multiple of 2 into 0 rather than 1.\n\nThis patch just treats all &&/|| the same and furthermore uses bool type\ninstead of int for the comparisons.\n\n2021-07-01  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR middle-end/94366\ngcc/\n\t* omp-low.c (lower_rec_input_clauses): Rename is_fp_and_or to\n\tis_truth_op, set it for TRUTH_*IF_EXPR regardless of new_var's type,\n\tuse boolean_type_node instead of integer_type_node as NE_EXPR type.\n\t(lower_reduction_clauses): Likewise.\nlibgomp/\n\t* testsuite/libgomp.c-c++-common/pr94366.c: New test.", "tree": {"sha": "04986ff6554b6e58f6ea61494430d4ccf2bb7b7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/04986ff6554b6e58f6ea61494430d4ccf2bb7b7a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/91c771ec8a3b649765de3e0a7b04cf946c6649ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91c771ec8a3b649765de3e0a7b04cf946c6649ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91c771ec8a3b649765de3e0a7b04cf946c6649ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91c771ec8a3b649765de3e0a7b04cf946c6649ef/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a688c284dd3848b6c4ea553035f0f9769fb4fbc9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a688c284dd3848b6c4ea553035f0f9769fb4fbc9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a688c284dd3848b6c4ea553035f0f9769fb4fbc9"}], "stats": {"total": 72, "additions": 41, "deletions": 31}, "files": [{"sha": "e7049c825a48e84b23f4c1be604bd39fe41f8e8c", "filename": "gcc/omp-low.c", "status": "modified", "additions": 24, "deletions": 31, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91c771ec8a3b649765de3e0a7b04cf946c6649ef/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91c771ec8a3b649765de3e0a7b04cf946c6649ef/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=91c771ec8a3b649765de3e0a7b04cf946c6649ef", "patch": "@@ -6505,11 +6505,8 @@ lower_rec_input_clauses (tree clauses, gimple_seq *ilist, gimple_seq *dlist,\n \t\t  if (code == MINUS_EXPR)\n \t\t    code = PLUS_EXPR;\n \n-\t\t  /* C/C++ permits FP/complex with || and &&.  */\n-\t\t  bool is_fp_and_or\n-\t\t    = ((code == TRUTH_ANDIF_EXPR || code == TRUTH_ORIF_EXPR)\n-\t\t       && (FLOAT_TYPE_P (TREE_TYPE (new_var))\n-\t\t\t   || TREE_CODE (TREE_TYPE (new_var)) == COMPLEX_TYPE));\n+\t\t  bool is_truth_op\n+\t\t    = (code == TRUTH_ANDIF_EXPR || code == TRUTH_ORIF_EXPR);\n \t\t  tree new_vard = new_var;\n \t\t  if (is_simd && omp_is_reference (var))\n \t\t    {\n@@ -6560,17 +6557,18 @@ lower_rec_input_clauses (tree clauses, gimple_seq *ilist, gimple_seq *dlist,\n \t\t\t}\n \t\t      tree ivar2 = ivar;\n \t\t      tree ref2 = ref;\n-\t\t      if (is_fp_and_or)\n+\t\t      if (is_truth_op)\n \t\t\t{\n \t\t\t  tree zero = build_zero_cst (TREE_TYPE (ivar));\n \t\t\t  ivar2 = fold_build2_loc (clause_loc, NE_EXPR,\n-\t\t\t\t\t\t   integer_type_node, ivar,\n+\t\t\t\t\t\t   boolean_type_node, ivar,\n \t\t\t\t\t\t   zero);\n \t\t\t  ref2 = fold_build2_loc (clause_loc, NE_EXPR,\n-\t\t\t\t\t\t  integer_type_node, ref, zero);\n+\t\t\t\t\t\t  boolean_type_node, ref,\n+\t\t\t\t\t\t  zero);\n \t\t\t}\n \t\t      x = build2 (code, TREE_TYPE (ref), ref2, ivar2);\n-\t\t      if (is_fp_and_or)\n+\t\t      if (is_truth_op)\n \t\t\tx = fold_convert (TREE_TYPE (ref), x);\n \t\t      ref = build_outer_var_ref (var, ctx);\n \t\t      gimplify_assign (ref, x, &llist[1]);\n@@ -6592,19 +6590,19 @@ lower_rec_input_clauses (tree clauses, gimple_seq *ilist, gimple_seq *dlist,\n \t\t\t  tree ref = build_outer_var_ref (var, ctx);\n \t\t\t  tree new_var2 = new_var;\n \t\t\t  tree ref2 = ref;\n-\t\t\t  if (is_fp_and_or)\n+\t\t\t  if (is_truth_op)\n \t\t\t    {\n \t\t\t      tree zero = build_zero_cst (TREE_TYPE (new_var));\n \t\t\t      new_var2\n \t\t\t\t= fold_build2_loc (clause_loc, NE_EXPR,\n-\t\t\t\t\t\t   integer_type_node, new_var,\n+\t\t\t\t\t\t   boolean_type_node, new_var,\n \t\t\t\t\t\t   zero);\n \t\t\t      ref2 = fold_build2_loc (clause_loc, NE_EXPR,\n-\t\t\t\t\t\t      integer_type_node, ref,\n+\t\t\t\t\t\t      boolean_type_node, ref,\n \t\t\t\t\t\t      zero);\n \t\t\t    }\n \t\t\t  x = build2 (code, TREE_TYPE (ref2), ref2, new_var2);\n-\t\t\t  if (is_fp_and_or)\n+\t\t\t  if (is_truth_op)\n \t\t\t    x = fold_convert (TREE_TYPE (new_var), x);\n \t\t\t  ref = build_outer_var_ref (var, ctx);\n \t\t\t  gimplify_assign (ref, x, dlist);\n@@ -7548,12 +7546,7 @@ lower_reduction_clauses (tree clauses, gimple_seq *stmt_seqp,\n       if (code == MINUS_EXPR)\n         code = PLUS_EXPR;\n \n-      /* C/C++ permits FP/complex with || and &&.  */\n-      bool is_fp_and_or = ((code == TRUTH_ANDIF_EXPR\n-\t\t\t    || code == TRUTH_ORIF_EXPR)\n-\t\t\t   && (FLOAT_TYPE_P (TREE_TYPE (new_var))\n-\t\t\t       || (TREE_CODE (TREE_TYPE (new_var))\n-\t\t\t\t   == COMPLEX_TYPE)));\n+      bool is_truth_op = (code == TRUTH_ANDIF_EXPR || code == TRUTH_ORIF_EXPR);\n       if (count == 1)\n \t{\n \t  tree addr = build_fold_addr_expr_loc (clause_loc, ref);\n@@ -7562,17 +7555,17 @@ lower_reduction_clauses (tree clauses, gimple_seq *stmt_seqp,\n \t  ref = build1 (INDIRECT_REF, TREE_TYPE (TREE_TYPE (addr)), addr);\n \t  tree new_var2 = new_var;\n \t  tree ref2 = ref;\n-\t  if (is_fp_and_or)\n+\t  if (is_truth_op)\n \t    {\n \t      tree zero = build_zero_cst (TREE_TYPE (new_var));\n \t      new_var2 = fold_build2_loc (clause_loc, NE_EXPR,\n-\t\t\t\t\t  integer_type_node, new_var, zero);\n-\t      ref2 = fold_build2_loc (clause_loc, NE_EXPR, integer_type_node,\n+\t\t\t\t\t  boolean_type_node, new_var, zero);\n+\t      ref2 = fold_build2_loc (clause_loc, NE_EXPR, boolean_type_node,\n \t\t\t\t      ref, zero);\n \t    }\n \t  x = fold_build2_loc (clause_loc, code, TREE_TYPE (new_var2), ref2,\n \t\t\t       new_var2);\n-\t  if (is_fp_and_or)\n+\t  if (is_truth_op)\n \t    x = fold_convert (TREE_TYPE (new_var), x);\n \t  x = build2 (OMP_ATOMIC, void_type_node, addr, x);\n \t  OMP_ATOMIC_MEMORY_ORDER (x) = OMP_MEMORY_ORDER_RELAXED;\n@@ -7680,16 +7673,16 @@ lower_reduction_clauses (tree clauses, gimple_seq *stmt_seqp,\n \t    {\n \t      tree out2 = out;\n \t      tree priv2 = priv;\n-\t      if (is_fp_and_or)\n+\t      if (is_truth_op)\n \t\t{\n \t\t  tree zero = build_zero_cst (TREE_TYPE (out));\n \t\t  out2 = fold_build2_loc (clause_loc, NE_EXPR,\n-\t\t\t\t\t  integer_type_node, out, zero);\n+\t\t\t\t\t  boolean_type_node, out, zero);\n \t\t  priv2 = fold_build2_loc (clause_loc, NE_EXPR,\n-\t\t\t\t\t   integer_type_node, priv, zero);\n+\t\t\t\t\t   boolean_type_node, priv, zero);\n \t\t}\n \t      x = build2 (code, TREE_TYPE (out2), out2, priv2);\n-\t      if (is_fp_and_or)\n+\t      if (is_truth_op)\n \t\tx = fold_convert (TREE_TYPE (out), x);\n \t      out = unshare_expr (out);\n \t      gimplify_assign (out, x, &sub_seq);\n@@ -7726,16 +7719,16 @@ lower_reduction_clauses (tree clauses, gimple_seq *stmt_seqp,\n \t{\n \t  tree new_var2 = new_var;\n \t  tree ref2 = ref;\n-\t  if (is_fp_and_or)\n+\t  if (is_truth_op)\n \t    {\n \t      tree zero = build_zero_cst (TREE_TYPE (new_var));\n \t      new_var2 = fold_build2_loc (clause_loc, NE_EXPR,\n-\t\t\t\t\t  integer_type_node, new_var, zero);\n-\t      ref2 = fold_build2_loc (clause_loc, NE_EXPR, integer_type_node,\n+\t\t\t\t\t  boolean_type_node, new_var, zero);\n+\t      ref2 = fold_build2_loc (clause_loc, NE_EXPR, boolean_type_node,\n \t\t\t\t      ref, zero);\n \t    }\n \t  x = build2 (code, TREE_TYPE (ref), ref2, new_var2);\n-\t  if (is_fp_and_or)\n+\t  if (is_truth_op)\n \t    x = fold_convert (TREE_TYPE (new_var), x);\n \t  ref = build_outer_var_ref (var, ctx);\n \t  gimplify_assign (ref, x, &sub_seq);"}, {"sha": "5837cd01a47d555a3872df2c472401dc4c038c68", "filename": "libgomp/testsuite/libgomp.c-c++-common/pr94366.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91c771ec8a3b649765de3e0a7b04cf946c6649ef/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Fpr94366.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91c771ec8a3b649765de3e0a7b04cf946c6649ef/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Fpr94366.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Fpr94366.c?ref=91c771ec8a3b649765de3e0a7b04cf946c6649ef", "patch": "@@ -0,0 +1,17 @@\n+/* PR middle-end/94366 */\n+\n+int\n+main ()\n+{\n+  int a = 2;\n+  #pragma omp parallel reduction(&& : a)\n+    a = a && 1;\n+  if (!a)\n+    __builtin_abort ();\n+  a = 4;\n+  #pragma omp parallel reduction(|| : a)\n+    a = a || 0;\n+  if (!a)\n+    __builtin_abort ();\n+  return 0;\n+}"}]}