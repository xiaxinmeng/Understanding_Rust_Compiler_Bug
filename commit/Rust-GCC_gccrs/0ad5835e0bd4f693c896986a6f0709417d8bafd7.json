{"sha": "0ad5835e0bd4f693c896986a6f0709417d8bafd7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGFkNTgzNWUwYmQ0ZjY5M2M4OTY5ODZhNmYwNzA5NDE3ZDhiYWZkNw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "1993-04-29T21:11:44Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "1993-04-29T21:11:44Z"}, "message": "If SMALL_ARG_MAX is defined don't pass non-directories in environment\n\nFrom-SVN: r4278", "tree": {"sha": "edb8dc0801f63a15efaa0928080f0ee75a13e521", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/edb8dc0801f63a15efaa0928080f0ee75a13e521"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ad5835e0bd4f693c896986a6f0709417d8bafd7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ad5835e0bd4f693c896986a6f0709417d8bafd7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ad5835e0bd4f693c896986a6f0709417d8bafd7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ad5835e0bd4f693c896986a6f0709417d8bafd7/comments", "author": null, "committer": null, "parents": [{"sha": "8f791f2dd2da024a7ad7bc73131ec22e13773b7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f791f2dd2da024a7ad7bc73131ec22e13773b7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f791f2dd2da024a7ad7bc73131ec22e13773b7b"}], "stats": {"total": 32, "additions": 22, "deletions": 10}, "files": [{"sha": "6c0030dfaa74bbd948ab2e9f4224d08bf0823dc9", "filename": "gcc/gcc.c", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ad5835e0bd4f693c896986a6f0709417d8bafd7/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ad5835e0bd4f693c896986a6f0709417d8bafd7/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=0ad5835e0bd4f693c896986a6f0709417d8bafd7", "patch": "@@ -173,7 +173,7 @@ static char *concat ();\n static int do_spec ();\n static int do_spec_1 ();\n static char *find_file ();\n-static int is_linker_dir ();\n+static int is_directory ();\n static void validate_switches ();\n static void validate_all_switches ();\n static void give_switch ();\n@@ -1438,7 +1438,8 @@ putenv_from_prefixes (paths, env_var)\n     {\n       int len = strlen (pprefix->prefix);\n \n-      if (machine_suffix)\n+      if (machine_suffix\n+\t  && is_directory (pprefix->prefix, machine_suffix, 0))\n \t{\n \t  if (!first_time)\n \t    obstack_1grow (&collect_obstack, PATH_SEPARATOR);\n@@ -1448,7 +1449,9 @@ putenv_from_prefixes (paths, env_var)\n \t  obstack_grow (&collect_obstack, machine_suffix, suffix_len);\n \t}\n \n-      if (just_machine_suffix && pprefix->require_machine_suffix == 2)\n+      if (just_machine_suffix\n+\t  && pprefix->require_machine_suffix == 2\n+\t  && is_directory (pprefix->prefix, just_machine_suffix, 0))\n \t{\n \t  if (!first_time)\n \t    obstack_1grow (&collect_obstack, PATH_SEPARATOR);\n@@ -2749,7 +2752,7 @@ do_spec_1 (spec, inswitch, soft_matched_part)\n #endif\n \t\t  if (machine_suffix)\n \t\t    {\n-\t\t      if (is_linker_dir (pl->prefix, machine_suffix))\n+\t\t      if (is_directory (pl->prefix, machine_suffix, 1))\n \t\t\t{\n \t\t\t  do_spec_1 (\"-L\", 0, NULL_PTR);\n #ifdef SPACE_AFTER_L_OPTION\n@@ -2771,7 +2774,7 @@ do_spec_1 (spec, inswitch, soft_matched_part)\n \t\t    }\n \t\t  if (!pl->require_machine_suffix)\n \t\t    {\n-\t\t      if (is_linker_dir (pl->prefix, \"\"))\n+\t\t      if (is_directory (pl->prefix, \"\", 1))\n \t\t\t{\n \t\t\t  do_spec_1 (\"-L\", 0, NULL_PTR);\n #ifdef SPACE_AFTER_L_OPTION\n@@ -3515,20 +3518,28 @@ find_file (name)\n   return newname ? newname : name;\n }\n \n-/* Determine whether a -L option is relevant.  Not required for certain\n-   fixed names and for directories that don't exist.  */\n+/* Determine whether a directory exists.  If LINKER, return 0 for\n+   certain fixed names not needed by the linker.  If not LINKER, it is\n+   only important to return 0 if the host machine has a small ARG_MAX\n+   limit.  */\n \n static int\n-is_linker_dir (path1, path2)\n+is_directory (path1, path2, linker)\n      char *path1;\n      char *path2;\n+     int linker;\n {\n   int len1 = strlen (path1);\n   int len2 = strlen (path2);\n   char *path = (char *) alloca (3 + len1 + len2);\n   char *cp;\n   struct stat st;\n \n+#ifndef SMALL_ARG_MAX\n+  if (! linker)\n+    return 1;\n+#endif\n+\n   /* Construct the path from the two parts.  Ensure the string ends with \"/.\".\n      The resulting path will be a directory even if the given path is a\n      symbolic link.  */\n@@ -3541,8 +3552,9 @@ is_linker_dir (path1, path2)\n   *cp = '\\0';\n \n   /* Exclude directories that the linker is known to search.  */\n-  if ((cp - path == 6 && strcmp (path, \"/lib/.\") == 0)\n-      || (cp - path == 10 && strcmp (path, \"/usr/lib/.\") == 0))\n+  if (linker\n+      && ((cp - path == 6 && strcmp (path, \"/lib/.\") == 0)\n+\t  || (cp - path == 10 && strcmp (path, \"/usr/lib/.\") == 0)))\n     return 0;\n \n   return (stat (path, &st) >= 0 && S_ISDIR (st.st_mode));"}]}