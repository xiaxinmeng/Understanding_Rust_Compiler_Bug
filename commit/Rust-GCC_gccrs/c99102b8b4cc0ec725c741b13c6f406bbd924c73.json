{"sha": "c99102b8b4cc0ec725c741b13c6f406bbd924c73", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzk5MTAyYjhiNGNjMGVjNzI1Yzc0MWIxM2M2ZjQwNmJiZDkyNGM3Mw==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernd.schmidt@codesourcery.com", "date": "2010-03-19T18:41:22Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2010-03-19T18:41:22Z"}, "message": "re PR target/40697 (inefficient code to extract least bits from an integer value)\n\ngcc/\n\tPR target/40697\n\t* optabs.c (avoid_expensive_constant): Use rtx_cost to find out\n\tthe cost of loading the constant rather than assuming\n\tCOSTS_N_INSNS (1).\n\t* config/arm/arm.c (thumb1_rtx_costs) <case CONST_INT>: If the\n\touter code is AND, do the same tests as the andsi3 expander and\n\treturn COSTS_N_INSNS (1) if and is cheap.\n\ntestsuite/\n\tPR target/40697\n\t* gcc.target/arm/thumb-andsi.c: New test.\n\nFrom-SVN: r157582", "tree": {"sha": "2bcf096e2c7a2d0589b6d0f349bfdd7ccaef90f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2bcf096e2c7a2d0589b6d0f349bfdd7ccaef90f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c99102b8b4cc0ec725c741b13c6f406bbd924c73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c99102b8b4cc0ec725c741b13c6f406bbd924c73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c99102b8b4cc0ec725c741b13c6f406bbd924c73", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c99102b8b4cc0ec725c741b13c6f406bbd924c73/comments", "author": null, "committer": null, "parents": [{"sha": "002b2dee5d23dff9cc0a7f3196838534bc084da4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/002b2dee5d23dff9cc0a7f3196838534bc084da4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/002b2dee5d23dff9cc0a7f3196838534bc084da4"}], "stats": {"total": 36, "additions": 33, "deletions": 3}, "files": [{"sha": "7afdbaca8ba1cc18fec8c38dd25765b31f98729d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c99102b8b4cc0ec725c741b13c6f406bbd924c73/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c99102b8b4cc0ec725c741b13c6f406bbd924c73/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c99102b8b4cc0ec725c741b13c6f406bbd924c73", "patch": "@@ -4,6 +4,14 @@\n \t* ira-lives.c (check_and_make_def_conflict): Ignore conflict for a\n \tuse that may match DEF.\n \n+\tPR target/40697\n+\t* optabs.c (avoid_expensive_constant): Use rtx_cost to find out\n+\tthe cost of loading the constant rather than assuming\n+\tCOSTS_N_INSNS (1).\n+\t* config/arm/arm.c (thumb1_rtx_costs) <case CONST_INT>: If the\n+\touter code is AND, do the same tests as the andsi3 expander and\n+\treturn COSTS_N_INSNS (1) if and is cheap.\n+\t\n 2010-03-19  Michael Matz  <matz@suse.de>\n \n \tPR c++/43116"}, {"sha": "cc023c1efdaf6c15c6b96c4d0050db9e6e00118f", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c99102b8b4cc0ec725c741b13c6f406bbd924c73/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c99102b8b4cc0ec725c741b13c6f406bbd924c73/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=c99102b8b4cc0ec725c741b13c6f406bbd924c73", "patch": "@@ -6228,6 +6228,15 @@ thumb1_rtx_costs (rtx x, enum rtx_code code, enum rtx_code outer)\n       else if ((outer == IOR || outer == XOR || outer == AND)\n \t       && INTVAL (x) < 256 && INTVAL (x) >= -256)\n \treturn COSTS_N_INSNS (1);\n+      else if (outer == AND)\n+\t{\n+\t  int i;\n+\t  /* This duplicates the tests in the andsi3 expander.  */\n+\t  for (i = 9; i <= 31; i++)\n+\t    if ((((HOST_WIDE_INT) 1) << i) - 1 == INTVAL (x)\n+\t\t|| (((HOST_WIDE_INT) 1) << i) - 1 == ~INTVAL (x))\n+\t      return COSTS_N_INSNS (2);\n+\t}\n       else if (outer == ASHIFT || outer == ASHIFTRT\n \t       || outer == LSHIFTRT)\n \treturn 0;"}, {"sha": "a82619e7cf3e222ebcbe7cf9dd34ed0c9216a4b9", "filename": "gcc/optabs.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c99102b8b4cc0ec725c741b13c6f406bbd924c73/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c99102b8b4cc0ec725c741b13c6f406bbd924c73/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=c99102b8b4cc0ec725c741b13c6f406bbd924c73", "patch": "@@ -1389,11 +1389,11 @@ static rtx\n avoid_expensive_constant (enum machine_mode mode, optab binoptab,\n \t\t\t  rtx x, bool unsignedp)\n {\n+  bool speed = optimize_insn_for_speed_p ();\n   if (mode != VOIDmode\n       && optimize\n       && CONSTANT_P (x)\n-      && rtx_cost (x, binoptab->code, optimize_insn_for_speed_p ())\n-                   > COSTS_N_INSNS (1))\n+      && rtx_cost (x, binoptab->code, speed) > rtx_cost (x, SET, speed))\n     {\n       if (CONST_INT_P (x))\n \t{"}, {"sha": "6c7e19ce2b281d62045aed229bb95f14a18e41f2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c99102b8b4cc0ec725c741b13c6f406bbd924c73/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c99102b8b4cc0ec725c741b13c6f406bbd924c73/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c99102b8b4cc0ec725c741b13c6f406bbd924c73", "patch": "@@ -2,7 +2,10 @@\n \n \tPR rtl-optimization/42258\n \t* gcc.target/arm/thumb1-mul-moves.c: New test.\n-\t\n+\n+\tPR target/40697\n+\t* gcc.target/arm/thumb-andsi.c: New test.\n+\n 2010-03-19  Michael Matz  <matz@suse.de>\n \n \tPR c++/43116"}, {"sha": "9e8e4d423d2e226edeb6ac2c1a729e258e43beb9", "filename": "gcc/testsuite/gcc.target/arm/thumb-andsi.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c99102b8b4cc0ec725c741b13c6f406bbd924c73/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fthumb-andsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c99102b8b4cc0ec725c741b13c6f406bbd924c73/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fthumb-andsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fthumb-andsi.c?ref=c99102b8b4cc0ec725c741b13c6f406bbd924c73", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Os -mthumb -march=armv5te\" } */\n+\n+unsigned get_least_bits(unsigned value)\n+{\n+  return value << 9 >> 9;\n+}\n+\n+/* { dg-final { scan-assembler \"lsl\" } } */\n+/* { dg-final { scan-assembler \"lsr\" } } */"}]}