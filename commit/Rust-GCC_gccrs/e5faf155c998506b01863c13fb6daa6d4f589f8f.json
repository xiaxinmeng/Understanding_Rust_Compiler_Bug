{"sha": "e5faf155c998506b01863c13fb6daa6d4f589f8f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTVmYWYxNTVjOTk4NTA2YjAxODYzYzEzZmI2ZGFhNmQ0ZjU4OWY4Zg==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2002-07-16T20:59:08Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2002-07-16T20:59:08Z"}, "message": "builtins.c (std_expand_builtin_va_start): Remove unused first argument.\n\n\t* builtins.c (std_expand_builtin_va_start): Remove unused\n\tfirst argument.\n\t(expand_builtin_va_start): Call EXPAND_BUILTIN_VA_START and\n\tstd_expand_builtin_va_start with just two arguments.\n\t* expr.h: Update prototypes.\n\n\t* alpha-protos.h, alpha.h, alpha.c, arc-protos.h, arc.h,\n\tarc.c, d30v-protos.h, d30v.h, d30v.c, i386-protos.h, i386.h,\n\ti386.c, i960-protos.h, i960.h, i960.c, m88k-protos.h, m88k.h,\n\tm88k.c, mips-protos.h, mips.h, mips.c, mn10300-protos.h,\n\tmn10300.h, mn10300.c, pa-protos.h, pa.h, pa.c,\n\trs6000-protos.h, rs6000.h, rs6000.c, s390-protos.h, s390.h,\n\ts390.c, sh-protos.h, sh.h, sh.c, sparc-protos.h, sparc.h,\n\tsparc.c, stormy16-protos.h, stormy16.h, stormy16.c,\n\txtensa-protos.h, xtensa.h, xtensa.c:  Remove unused first\n\targument from all implementations of EXPAND_BUILTIN_VA_START\n\tand all uses of std_expand_builtin_va_start.\n\nFrom-SVN: r55495", "tree": {"sha": "ad7a87ca28497abbdce1dc6a218254c494c5ab47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad7a87ca28497abbdce1dc6a218254c494c5ab47"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e5faf155c998506b01863c13fb6daa6d4f589f8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5faf155c998506b01863c13fb6daa6d4f589f8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5faf155c998506b01863c13fb6daa6d4f589f8f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5faf155c998506b01863c13fb6daa6d4f589f8f/comments", "author": null, "committer": null, "parents": [{"sha": "dbf65c2f4ebc87d8cad5a805c9b56e0240390dd6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbf65c2f4ebc87d8cad5a805c9b56e0240390dd6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbf65c2f4ebc87d8cad5a805c9b56e0240390dd6"}], "stats": {"total": 192, "additions": 98, "deletions": 94}, "files": [{"sha": "5c0fddd16a69138eed63619bd8311ea532b69021", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e5faf155c998506b01863c13fb6daa6d4f589f8f", "patch": "@@ -1,3 +1,23 @@\n+2002-07-16  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* builtins.c (std_expand_builtin_va_start): Remove unused\n+\tfirst argument.\n+\t(expand_builtin_va_start): Call EXPAND_BUILTIN_VA_START and\n+\tstd_expand_builtin_va_start with just two arguments.\n+\t* expr.h: Update prototypes.\n+\n+\t* alpha-protos.h, alpha.h, alpha.c, arc-protos.h, arc.h,\n+\tarc.c, d30v-protos.h, d30v.h, d30v.c, i386-protos.h, i386.h,\n+\ti386.c, i960-protos.h, i960.h, i960.c, m88k-protos.h, m88k.h,\n+\tm88k.c, mips-protos.h, mips.h, mips.c, mn10300-protos.h,\n+\tmn10300.h, mn10300.c, pa-protos.h, pa.h, pa.c,\n+\trs6000-protos.h, rs6000.h, rs6000.c, s390-protos.h, s390.h,\n+\ts390.c, sh-protos.h, sh.h, sh.c, sparc-protos.h, sparc.h,\n+\tsparc.c, stormy16-protos.h, stormy16.h, stormy16.c,\n+\txtensa-protos.h, xtensa.h, xtensa.c:  Remove unused first\n+\targument from all implementations of EXPAND_BUILTIN_VA_START\n+\tand all uses of std_expand_builtin_va_start.\n+\n Tue Jul 16 19:32:58 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n \n \t* regrename.c (copy_value): Don't record high part copies.\n@@ -17,7 +37,7 @@ Tue Jul 16 19:32:58 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n \n \t* config/ns32k/ns32k.md (*madddf, *maddsf, *msubdf, *msubsf):\n \t\"earlyclobber\" constraint modifier for some alternative.\n-\t\n+\n \t* config/ns32k/ns32k.md (tstdf, tstsf, cmpdf, cmpsf, blt, ble)\n \t(*ble, *blt): Flag to indicate bCOND and sCOND should check for\n \tunordered.\n@@ -59,7 +79,7 @@ Tue Jul 16 19:32:58 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n 2002-07-16  Jeroen Dobbelaere <jeroen.dobbelaere@acunia.com>\n \t    Richard Earnshaw  <rearnsha@arm.com>\n \n-\t* arm.h (LEGITIMATE_PIC_OPERAND_P): Only test \n+\t* arm.h (LEGITIMATE_PIC_OPERAND_P): Only test\n \tCONSTANT_POOL_ADDRESS_P if a SYMBOL_REF.  Simplify logic.\n \n 2002-07-16  Richard Earnshaw  <rearnsha@arm.com>\n@@ -73,7 +93,7 @@ Tue Jul 16 19:32:58 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n \t* ra-rewrite.c: #include reload.h, insn-config.h\n \t* ra-build.c: #include reload.h\n \t* Makefile.in: Update ra-rewrite.o, ra-build.o dependencies to\n-\tdepend on reload.h, insn-config.h. \n+\tdepend on reload.h, insn-config.h.\n \n Tue Jul 16 11:57:45 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n "}, {"sha": "457067649c0d0f25e7ed7ef355264ed78bdc3916", "filename": "gcc/builtins.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=e5faf155c998506b01863c13fb6daa6d4f589f8f", "patch": "@@ -2989,8 +2989,7 @@ stabilize_va_list (valist, needs_lvalue)\n    the variable.  */\n \n void\n-std_expand_builtin_va_start (stdarg_p, valist, nextarg)\n-     int stdarg_p ATTRIBUTE_UNUSED;\n+std_expand_builtin_va_start (valist, nextarg)\n      tree valist;\n      rtx nextarg;\n {\n@@ -3021,9 +3020,9 @@ expand_builtin_va_start (arglist)\n   valist = stabilize_va_list (TREE_VALUE (arglist), 1);\n \n #ifdef EXPAND_BUILTIN_VA_START\n-  EXPAND_BUILTIN_VA_START (1, valist, nextarg);\n+  EXPAND_BUILTIN_VA_START (valist, nextarg);\n #else\n-  std_expand_builtin_va_start (1, valist, nextarg);\n+  std_expand_builtin_va_start (valist, nextarg);\n #endif\n \n   return const0_rtx;"}, {"sha": "a2cfc924b2aa25f4e6150c34ddae4b486e55b1e4", "filename": "gcc/config/alpha/alpha-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Falpha%2Falpha-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Falpha%2Falpha-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha-protos.h?ref=e5faf155c998506b01863c13fb6daa6d4f589f8f", "patch": "@@ -135,7 +135,7 @@ extern void alpha_initialize_trampoline PARAMS ((rtx, rtx, rtx, int, int, int));\n extern void alpha_reorg PARAMS ((rtx));\n \n extern tree alpha_build_va_list PARAMS ((void));\n-extern void alpha_va_start PARAMS ((int, tree, rtx));\n+extern void alpha_va_start PARAMS ((tree, rtx));\n extern rtx alpha_va_arg PARAMS ((tree, tree));\n extern rtx function_arg PARAMS ((CUMULATIVE_ARGS, enum machine_mode,\n \t\t\t\t tree, int));"}, {"sha": "ce9c6cd1c6273c60a718da9b3a5aef882c054563", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=e5faf155c998506b01863c13fb6daa6d4f589f8f", "patch": "@@ -6162,8 +6162,7 @@ alpha_build_va_list ()\n }\n \n void\n-alpha_va_start (stdarg_p, valist, nextarg)\n-     int stdarg_p ATTRIBUTE_UNUSED;\n+alpha_va_start (valist, nextarg)\n      tree valist;\n      rtx nextarg ATTRIBUTE_UNUSED;\n {\n@@ -6174,7 +6173,7 @@ alpha_va_start (stdarg_p, valist, nextarg)\n     return;\n \n   if (TARGET_ABI_UNICOSMK)\n-    std_expand_builtin_va_start (1, valist, nextarg);\n+    std_expand_builtin_va_start (valist, nextarg);\n \n   /* For Unix, SETUP_INCOMING_VARARGS moves the starting address base\n      up by 48, storing fp arg registers in the first 48 bytes, and the"}, {"sha": "b779858e956c1497df1db876ceace24e112fa828", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=e5faf155c998506b01863c13fb6daa6d4f589f8f", "patch": "@@ -1984,8 +1984,8 @@ do {\t\t\t\t\t\t\\\n   (VALIST) = alpha_build_va_list ()\n \n /* Implement `va_start' for varargs and stdarg.  */\n-#define EXPAND_BUILTIN_VA_START(stdarg, valist, nextarg) \\\n-  alpha_va_start (stdarg, valist, nextarg)\n+#define EXPAND_BUILTIN_VA_START(valist, nextarg) \\\n+  alpha_va_start (valist, nextarg)\n \n /* Implement `va_arg'.  */\n #define EXPAND_BUILTIN_VA_ARG(valist, type) \\"}, {"sha": "cbb8ac2240b6f1450b57d60430a32f70bec23be2", "filename": "gcc/config/arc/arc-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Farc%2Farc-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Farc%2Farc-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc-protos.h?ref=e5faf155c998506b01863c13fb6daa6d4f589f8f", "patch": "@@ -20,7 +20,7 @@ Boston, MA 02111-1307, USA.  */\n \n #ifdef RTX_CODE\n #ifdef TREE_CODE\n-extern void arc_va_start PARAMS ((int, tree, rtx));\n+extern void arc_va_start PARAMS ((tree, rtx));\n extern rtx arc_va_arg PARAMS ((tree, tree));\n #endif /* TREE_CODE */\n "}, {"sha": "f1efc05a1b242c0369c6e6cd222388c8f97b97f3", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=e5faf155c998506b01863c13fb6daa6d4f589f8f", "patch": "@@ -2261,8 +2261,7 @@ arc_ccfsm_record_branch_deleted ()\n }\n \f\n void\n-arc_va_start (stdarg_p, valist, nextarg)\n-     int stdarg_p ATTRIBUTE_UNUSED;\n+arc_va_start (valist, nextarg)\n      tree valist;\n      rtx nextarg;\n {\n@@ -2271,7 +2270,7 @@ arc_va_start (stdarg_p, valist, nextarg)\n       && (current_function_args_info & 1))\n     nextarg = plus_constant (nextarg, UNITS_PER_WORD);\n \n-  std_expand_builtin_va_start (1, valist, nextarg);\n+  std_expand_builtin_va_start (valist, nextarg);\n }\n \n rtx"}, {"sha": "1acff9ed4ea7b98056b59d2cb296e9287e749616", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=e5faf155c998506b01863c13fb6daa6d4f589f8f", "patch": "@@ -1410,8 +1410,8 @@ enum arc_function_type {\n \n \f\n /* Implement `va_start' for varargs and stdarg.  */\n-#define EXPAND_BUILTIN_VA_START(stdarg, valist, nextarg) \\\n-  arc_va_start (stdarg, valist, nextarg)\n+#define EXPAND_BUILTIN_VA_START(valist, nextarg) \\\n+  arc_va_start (valist, nextarg)\n \n /* Implement `va_arg'.  */\n #define EXPAND_BUILTIN_VA_ARG(valist, type) \\"}, {"sha": "dbc908ae003c3e6a54468b6afff037b5cf1a8fd2", "filename": "gcc/config/d30v/d30v-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Fd30v%2Fd30v-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Fd30v%2Fd30v-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fd30v%2Fd30v-protos.h?ref=e5faf155c998506b01863c13fb6daa6d4f589f8f", "patch": "@@ -105,7 +105,7 @@ extern void d30v_setup_incoming_varargs\tPARAMS ((CUMULATIVE_ARGS *,\n \t\t\t\t\t\t tree, int *, int));\n extern tree d30v_build_va_list\t\tPARAMS ((void));\n #ifdef RTX_CODE\n-extern void d30v_expand_builtin_va_start PARAMS ((int, tree, rtx));\n+extern void d30v_expand_builtin_va_start PARAMS ((tree, rtx));\n extern rtx d30v_expand_builtin_va_arg\tPARAMS ((tree, tree));\n #endif\t/* RTX_CODE */\n #endif\t/* TREE_CODE */"}, {"sha": "7aef4145882e143a3e19c9b3f6cc8f4c296f86c0", "filename": "gcc/config/d30v/d30v.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Fd30v%2Fd30v.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Fd30v%2Fd30v.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fd30v%2Fd30v.c?ref=e5faf155c998506b01863c13fb6daa6d4f589f8f", "patch": "@@ -2225,8 +2225,7 @@ d30v_build_va_list ()\n /* Expand __builtin_va_start to do the va_start macro.  */\n \n void \n-d30v_expand_builtin_va_start (stdarg_p, valist, nextarg)\n-     int stdarg_p ATTRIBUTE_UNUSED;\n+d30v_expand_builtin_va_start (valist, nextarg)\n      tree valist;\n      rtx nextarg ATTRIBUTE_UNUSED;\n {"}, {"sha": "45b9e7b217e8669efa581f667cbed1d2e6b00441", "filename": "gcc/config/d30v/d30v.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Fd30v%2Fd30v.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Fd30v%2Fd30v.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fd30v%2Fd30v.h?ref=e5faf155c998506b01863c13fb6daa6d4f589f8f", "patch": "@@ -2013,8 +2013,8 @@ typedef struct machine_function GTY(())\n    'next' argument after the variable arguments.  If not defined, a standard\n    implementation will be defined that works for arguments passed on the stack.  */\n \n-#define EXPAND_BUILTIN_VA_START(STDARG_P, VALIST, NEXTARG)\t\t\\\n-(d30v_expand_builtin_va_start(STDARG_P, VALIST, NEXTARG))\n+#define EXPAND_BUILTIN_VA_START(VALIST, NEXTARG)\t\t\\\n+  d30v_expand_builtin_va_start(VALIST, NEXTARG)\n \n /* Implement the stdarg/varargs va_arg macro.  VALIST is the variable of type\n    va_list as a tree, TYPE is the type passed to va_arg.  */"}, {"sha": "d49ce1a71f3b742e9db1e8996936323cece4bb3f", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=e5faf155c998506b01863c13fb6daa6d4f589f8f", "patch": "@@ -153,7 +153,7 @@ extern bool ix86_function_value_regno_p PARAMS ((int));\n extern bool ix86_function_arg_regno_p PARAMS ((int));\n extern int ix86_function_arg_boundary PARAMS ((enum machine_mode, tree));\n extern int ix86_return_in_memory PARAMS ((tree));\n-extern void ix86_va_start PARAMS ((int, tree, rtx));\n+extern void ix86_va_start PARAMS ((tree, rtx));\n extern rtx ix86_va_arg PARAMS ((tree, tree));\n extern void ix86_setup_incoming_varargs PARAMS ((CUMULATIVE_ARGS *,\n \t\t\t\t\t\t enum machine_mode,"}, {"sha": "5c49f175dc91ef46941f11179d9582bba2eaa153", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=e5faf155c998506b01863c13fb6daa6d4f589f8f", "patch": "@@ -2446,8 +2446,7 @@ ix86_setup_incoming_varargs (cum, mode, type, pretend_size, no_rtl)\n /* Implement va_start.  */\n \n void\n-ix86_va_start (stdarg_p, valist, nextarg)\n-     int stdarg_p ATTRIBUTE_UNUSED;\n+ix86_va_start (valist, nextarg)\n      tree valist;\n      rtx nextarg;\n {\n@@ -2458,7 +2457,7 @@ ix86_va_start (stdarg_p, valist, nextarg)\n   /* Only 64bit target needs something special.  */\n   if (!TARGET_64BIT)\n     {\n-      std_expand_builtin_va_start (1, valist, nextarg);\n+      std_expand_builtin_va_start (valist, nextarg);\n       return;\n     }\n "}, {"sha": "be4e1b6cab5eb1ad68cd39e4fc47e0b54e1e0909", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=e5faf155c998506b01863c13fb6daa6d4f589f8f", "patch": "@@ -1695,8 +1695,8 @@ typedef struct ix86_args {\n   ((VALIST) = ix86_build_va_list ())\n \n /* Implement `va_start' for varargs and stdarg.  */\n-#define EXPAND_BUILTIN_VA_START(STDARG, VALIST, NEXTARG) \\\n-  ix86_va_start ((STDARG), (VALIST), (NEXTARG))\n+#define EXPAND_BUILTIN_VA_START(VALIST, NEXTARG) \\\n+  ix86_va_start (VALIST, NEXTARG)\n \n /* Implement `va_arg'.  */\n #define EXPAND_BUILTIN_VA_ARG(VALIST, TYPE) \\"}, {"sha": "7e2685d9f09e5d858e8969cee9e4d2d752e389a6", "filename": "gcc/config/i960/i960-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Fi960%2Fi960-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Fi960%2Fi960-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960-protos.h?ref=e5faf155c998506b01863c13fb6daa6d4f589f8f", "patch": "@@ -73,7 +73,7 @@ extern struct rtx_def *i960_function_arg PARAMS ((CUMULATIVE_ARGS *,\n \t\t\t\t\t\t  enum machine_mode,\n \t\t\t\t\t\t  tree, int));\n extern rtx i960_va_arg PARAMS ((tree, tree));\n-extern void i960_va_start PARAMS ((int, tree, rtx));\n+extern void i960_va_start PARAMS ((tree, rtx));\n #endif /* TREE_CODE */\n extern enum reg_class secondary_reload_class PARAMS ((enum reg_class, enum machine_mode, rtx));\n #endif /* RTX_CODE */"}, {"sha": "6aec8c50239e9a7f8b8a81f827eee2b5952983dc", "filename": "gcc/config/i960/i960.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Fi960%2Fi960.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Fi960%2Fi960.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.c?ref=e5faf155c998506b01863c13fb6daa6d4f589f8f", "patch": "@@ -2554,8 +2554,7 @@ i960_build_va_list ()\n /* Implement `va_start' for varargs and stdarg.  */\n \n void\n-i960_va_start (stdarg_p, valist, nextarg)\n-     int stdarg_p ATTRIBUTE_UNUSED;\n+i960_va_start (valist, nextarg)\n      tree valist;\n      rtx nextarg ATTRIBUTE_UNUSED;\n {"}, {"sha": "ee1c6066b47de2ab19d7c1c24d0fb953f6126c96", "filename": "gcc/config/i960/i960.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Fi960%2Fi960.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Fi960%2Fi960.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.h?ref=e5faf155c998506b01863c13fb6daa6d4f589f8f", "patch": "@@ -872,8 +872,8 @@ enum reg_class { NO_REGS, GLOBAL_REGS, LOCAL_REGS, LOCAL_OR_GLOBAL_REGS,\n   (VALIST) = i960_build_va_list ()\n \n /* Implement `va_start' for varargs and stdarg.  */\n-#define EXPAND_BUILTIN_VA_START(stdarg, valist, nextarg) \\\n-  i960_va_start (stdarg, valist, nextarg)\n+#define EXPAND_BUILTIN_VA_START(valist, nextarg) \\\n+  i960_va_start (valist, nextarg)\n \n /* Implement `va_arg'.  */\n #define EXPAND_BUILTIN_VA_ARG(valist, type) \\"}, {"sha": "b7bba671916bba7fd6499873ed0b1c40d44592c7", "filename": "gcc/config/m88k/m88k-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Fm88k%2Fm88k-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Fm88k%2Fm88k-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k-protos.h?ref=e5faf155c998506b01863c13fb6daa6d4f589f8f", "patch": "@@ -67,7 +67,7 @@ extern int equality_op PARAMS ((rtx, enum machine_mode));\n extern int pc_or_label_ref PARAMS ((rtx, enum machine_mode));\n extern int symbolic_operand PARAMS ((rtx, enum machine_mode));\n #ifdef TREE_CODE\n-extern void m88k_va_start PARAMS ((int, tree, rtx));\n+extern void m88k_va_start PARAMS ((tree, rtx));\n #endif /* TREE_CODE */\n #endif /* RTX_CODE */\n "}, {"sha": "5da1a90b921628baf62b0454c919dbe06ac8c449", "filename": "gcc/config/m88k/m88k.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Fm88k%2Fm88k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Fm88k%2Fm88k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.c?ref=e5faf155c998506b01863c13fb6daa6d4f589f8f", "patch": "@@ -2618,8 +2618,7 @@ m88k_build_va_list ()\n /* Implement `va_start' for varargs and stdarg.  */\n \n void\n-m88k_va_start (stdarg_p, valist, nextarg)\n-     int stdarg_p ATTRIBUTE_UNUSED;\n+m88k_va_start (valist, nextarg)\n      tree valist;\n      rtx nextarg ATTRIBUTE_UNUSED;\n {"}, {"sha": "a4aba85ecf2a1f67597f1417549aa4dfaa7d665b", "filename": "gcc/config/m88k/m88k.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Fm88k%2Fm88k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Fm88k%2Fm88k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.h?ref=e5faf155c998506b01863c13fb6daa6d4f589f8f", "patch": "@@ -1025,8 +1025,8 @@ enum reg_class { NO_REGS, AP_REG, XRF_REGS, GENERAL_REGS, AGRF_REGS,\n   (VALIST) = m88k_build_va_list ()\n \n /* Implement `va_start' for varargs and stdarg.  */\n-#define EXPAND_BUILTIN_VA_START(stdarg, valist, nextarg) \\\n-  m88k_va_start (stdarg, valist, nextarg)\n+#define EXPAND_BUILTIN_VA_START(valist, nextarg) \\\n+  m88k_va_start (valist, nextarg)\n \n /* Implement `va_arg'.  */\n #define EXPAND_BUILTIN_VA_ARG(valist, type) \\"}, {"sha": "0b585a5261d374463d6224a5636042f921977ba9", "filename": "gcc/config/mips/mips-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-protos.h?ref=e5faf155c998506b01863c13fb6daa6d4f589f8f", "patch": "@@ -78,7 +78,7 @@ extern int\t\tmips16_constant_after_function_p PARAMS ((tree));\n extern int\t\tmips_output_external PARAMS ((FILE *, tree,\n \t\t\t\t\t\t      const char *));\n extern tree\t\tmips_build_va_list PARAMS ((void));\n-extern void\t\tmips_va_start PARAMS ((int, tree, rtx));\n+extern void\t\tmips_va_start PARAMS ((tree, rtx));\n extern struct rtx_def  *mips_va_arg PARAMS ((tree, tree));\n \n extern void\t\texpand_block_move PARAMS ((rtx *));"}, {"sha": "64c458f78cd1dbaa0dc9c54f448ea83e720d11bc", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=e5faf155c998506b01863c13fb6daa6d4f589f8f", "patch": "@@ -4609,8 +4609,7 @@ mips_build_va_list ()\n /* Implement va_start.   stdarg_p is always 1.  */\n \n void\n-mips_va_start (stdarg_p, valist, nextarg)\n-     int stdarg_p ATTRIBUTE_UNUSED;\n+mips_va_start (valist, nextarg)\n      tree valist;\n      rtx nextarg;\n {\n@@ -4689,11 +4688,11 @@ mips_va_start (stdarg_p, valist, nextarg)\n \t  /* Everything is in the GPR save area, or in the overflow\n \t     area which is contiguous with it.  */\n \t  nextarg = plus_constant (nextarg, -gpr_save_area_size);\n-\t  std_expand_builtin_va_start (1, valist, nextarg);\n+\t  std_expand_builtin_va_start (valist, nextarg);\n \t}\n     }\n   else\n-    std_expand_builtin_va_start (1, valist, nextarg);\n+    std_expand_builtin_va_start (valist, nextarg);\n }\n \n /* Implement va_arg.  */"}, {"sha": "309ea459ab230fe2d5b7513a424101ac3b6c0187", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=e5faf155c998506b01863c13fb6daa6d4f589f8f", "patch": "@@ -2745,8 +2745,8 @@ typedef struct mips_args {\n   (VALIST) = mips_build_va_list ()\n \n /* Implement `va_start' for varargs and stdarg.  */\n-#define EXPAND_BUILTIN_VA_START(stdarg, valist, nextarg) \\\n-  mips_va_start (stdarg, valist, nextarg)\n+#define EXPAND_BUILTIN_VA_START(valist, nextarg) \\\n+  mips_va_start (valist, nextarg)\n \n /* Implement `va_arg'.  */\n #define EXPAND_BUILTIN_VA_ARG(valist, type) \\"}, {"sha": "d5a1c4426c64c209178ab08cf883f410a1303974", "filename": "gcc/config/mn10300/mn10300-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Fmn10300%2Fmn10300-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Fmn10300%2Fmn10300-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300-protos.h?ref=e5faf155c998506b01863c13fb6daa6d4f589f8f", "patch": "@@ -22,7 +22,7 @@ Boston, MA 02111-1307, USA.  */\n #ifdef RTX_CODE\n \n #ifdef TREE_CODE\n-extern void mn10300_va_start PARAMS ((int, tree, rtx));\n+extern void mn10300_va_start PARAMS ((tree, rtx));\n #endif /* TREE_CODE */\n \n extern struct rtx_def *legitimize_address PARAMS ((rtx, rtx, enum machine_mode));"}, {"sha": "52284c0d3f7e6f4da41d634bcd04b0c91340604c", "filename": "gcc/config/mn10300/mn10300.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.c?ref=e5faf155c998506b01863c13fb6daa6d4f589f8f", "patch": "@@ -874,13 +874,12 @@ mn10300_builtin_saveregs ()\n }\n \n void\n-mn10300_va_start (stdarg_p, valist, nextarg)\n-     int stdarg_p ATTRIBUTE_UNUSED;\n+mn10300_va_start (valist, nextarg)\n      tree valist;\n      rtx nextarg;\n {\n   nextarg = expand_builtin_saveregs ();\n-  std_expand_builtin_va_start (stdarg_p, valist, nextarg);\n+  std_expand_builtin_va_start (valist, nextarg);\n }\n \n rtx"}, {"sha": "b8b9f4d7b77c18e59a331a61919cf7dfe702b833", "filename": "gcc/config/mn10300/mn10300.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.h?ref=e5faf155c998506b01863c13fb6daa6d4f589f8f", "patch": "@@ -648,8 +648,8 @@ struct cum_arg {int nbytes; };\n #define EXPAND_BUILTIN_SAVEREGS() mn10300_builtin_saveregs ()\n \n /* Implement `va_start' for varargs and stdarg.  */\n-#define EXPAND_BUILTIN_VA_START(stdarg, valist, nextarg) \\\n-  mn10300_va_start (stdarg, valist, nextarg)\n+#define EXPAND_BUILTIN_VA_START(valist, nextarg) \\\n+  mn10300_va_start (valist, nextarg)\n \n /* Implement `va_arg'.  */\n #define EXPAND_BUILTIN_VA_ARG(valist, type) \\"}, {"sha": "89942f5c2d6da0cad5965ce778579c263c0400f5", "filename": "gcc/config/pa/pa-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Fpa%2Fpa-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Fpa%2Fpa-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-protos.h?ref=e5faf155c998506b01863c13fb6daa6d4f589f8f", "patch": "@@ -31,7 +31,7 @@ extern int function_label_operand PARAMS ((rtx, enum machine_mode));\n extern int lhs_lshift_cint_operand PARAMS ((rtx, enum machine_mode));\n \n #ifdef TREE_CODE\n-extern void hppa_va_start PARAMS ((int, tree, rtx));\n+extern void hppa_va_start PARAMS ((tree, rtx));\n extern rtx hppa_va_arg PARAMS ((tree, tree));\n #endif /* TREE_CODE */\n extern rtx hppa_legitimize_address PARAMS ((rtx, rtx, enum machine_mode));"}, {"sha": "76beee03b4722bb4328e2bc39481c40e9c723bd6", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=e5faf155c998506b01863c13fb6daa6d4f589f8f", "patch": "@@ -5182,13 +5182,12 @@ hppa_builtin_saveregs ()\n }\n \n void\n-hppa_va_start (stdarg_p, valist, nextarg)\n-     int stdarg_p ATTRIBUTE_UNUSED;\n+hppa_va_start (valist, nextarg)\n      tree valist;\n      rtx nextarg;\n {\n   nextarg = expand_builtin_saveregs ();\n-  std_expand_builtin_va_start (1, valist, nextarg);\n+  std_expand_builtin_va_start (valist, nextarg);\n }\n \n rtx"}, {"sha": "50265366a69c3c4c5c8df762a6ef2a0a253880e6", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=e5faf155c998506b01863c13fb6daa6d4f589f8f", "patch": "@@ -1039,8 +1039,8 @@ extern int may_call_alloca;\n \n /* Implement `va_start' for varargs and stdarg.  */\n \n-#define EXPAND_BUILTIN_VA_START(stdarg, valist, nextarg) \\\n-  hppa_va_start (stdarg, valist, nextarg)\n+#define EXPAND_BUILTIN_VA_START(valist, nextarg) \\\n+  hppa_va_start (valist, nextarg)\n \n /* Implement `va_arg'.  */\n "}, {"sha": "50a75c72e2ccff38cbfa66d5fe124006b5b8b744", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=e5faf155c998506b01863c13fb6daa6d4f589f8f", "patch": "@@ -28,7 +28,7 @@ Boston, MA 02111-1307, USA.  */\n \n #ifdef TREE_CODE\n extern void init_cumulative_args PARAMS ((CUMULATIVE_ARGS *, tree, rtx, int));\n-extern void rs6000_va_start PARAMS ((int, tree, rtx));\n+extern void rs6000_va_start PARAMS ((tree, rtx));\n #endif /* TREE_CODE */\n \n extern struct rtx_def *rs6000_got_register PARAMS ((rtx));"}, {"sha": "ca72b8c56b3a0d51c4a35daa55cdec0203bd1d7d", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=e5faf155c998506b01863c13fb6daa6d4f589f8f", "patch": "@@ -3098,8 +3098,7 @@ rs6000_build_va_list ()\n /* Implement va_start.  */\n \n void\n-rs6000_va_start (stdarg_p, valist, nextarg)\n-     int stdarg_p ATTRIBUTE_UNUSED;\n+rs6000_va_start (valist, nextarg)\n      tree valist;\n      rtx nextarg;\n {\n@@ -3110,7 +3109,7 @@ rs6000_va_start (stdarg_p, valist, nextarg)\n   /* Only SVR4 needs something special.  */\n   if (DEFAULT_ABI != ABI_V4)\n     {\n-      std_expand_builtin_va_start (1, valist, nextarg);\n+      std_expand_builtin_va_start (valist, nextarg);\n       return;\n     }\n "}, {"sha": "51170c0eab158b84fe03671739329e895a1d5849", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=e5faf155c998506b01863c13fb6daa6d4f589f8f", "patch": "@@ -1682,8 +1682,8 @@ typedef struct rs6000_args\n   (VALIST) = rs6000_build_va_list ()\n \n /* Implement `va_start' for varargs and stdarg.  */\n-#define EXPAND_BUILTIN_VA_START(stdarg, valist, nextarg) \\\n-  rs6000_va_start (stdarg, valist, nextarg)\n+#define EXPAND_BUILTIN_VA_START(valist, nextarg) \\\n+  rs6000_va_start (valist, nextarg)\n \n /* Implement `va_arg'.  */\n #define EXPAND_BUILTIN_VA_ARG(valist, type) \\"}, {"sha": "f06095aabdd79fdcff09a9326141ca48d089cc63", "filename": "gcc/config/s390/s390-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-protos.h?ref=e5faf155c998506b01863c13fb6daa6d4f589f8f", "patch": "@@ -78,7 +78,7 @@ extern void s390_function_arg_advance PARAMS ((CUMULATIVE_ARGS *, enum machine_m\n extern tree s390_build_va_list PARAMS ((void));\n #ifdef RTX_CODE\n extern rtx s390_function_arg PARAMS ((CUMULATIVE_ARGS *, enum machine_mode, tree, int));\n-extern void s390_va_start PARAMS ((int, tree, rtx));\n+extern void s390_va_start PARAMS ((tree, rtx));\n extern rtx s390_va_arg PARAMS ((tree, tree));\n #endif /* RTX_CODE */\n #endif /* TREE_CODE */"}, {"sha": "5a12ed9ec7101b83d7c46e0d0358460afca655ca", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=e5faf155c998506b01863c13fb6daa6d4f589f8f", "patch": "@@ -3962,8 +3962,7 @@ s390_build_va_list ()\n        (relative to the virtual arg pointer).  */\n \n void\n-s390_va_start (stdarg_p, valist, nextarg)\n-     int stdarg_p ATTRIBUTE_UNUSED;\n+s390_va_start (valist, nextarg)\n      tree valist;\n      rtx nextarg ATTRIBUTE_UNUSED;\n {"}, {"sha": "05875b4fd76db64aee84dc6544c328bc9c94babb", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=e5faf155c998506b01863c13fb6daa6d4f589f8f", "patch": "@@ -748,8 +748,8 @@ CUMULATIVE_ARGS;\n \n /* Implement `va_start' for varargs and stdarg.  */\n \n-#define EXPAND_BUILTIN_VA_START(stdarg, valist, nextarg) \\\n-  s390_va_start (stdarg, valist, nextarg)\n+#define EXPAND_BUILTIN_VA_START(valist, nextarg) \\\n+  s390_va_start (valist, nextarg)\n \n /* Implement `va_arg'.  */\n "}, {"sha": "ba74158d713e6e9336b6e2a4e4d90c01538441d8", "filename": "gcc/config/sh/sh-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh-protos.h?ref=e5faf155c998506b01863c13fb6daa6d4f589f8f", "patch": "@@ -102,7 +102,7 @@ extern void expand_fp_branch PARAMS ((rtx (*)(void), rtx (*)(void)));\n extern int sh_insn_length_adjustment PARAMS ((rtx));\n extern int sh_can_redirect_branch PARAMS ((rtx, rtx));\n #ifdef TREE_CODE\n-extern void sh_va_start PARAMS ((int, tree, rtx));\n+extern void sh_va_start PARAMS ((tree, rtx));\n extern rtx sh_va_arg PARAMS ((tree, tree));\n #endif /* TREE_CODE */\n #endif /* RTX_CODE */"}, {"sha": "5687c0a8c525a216a03a08df3ad121b6d92b5159", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=e5faf155c998506b01863c13fb6daa6d4f589f8f", "patch": "@@ -5260,8 +5260,7 @@ sh_build_va_list ()\n /* Implement `va_start' for varargs and stdarg.  */\n \n void\n-sh_va_start (stdarg_p, valist, nextarg)\n-     int stdarg_p ATTRIBUTE_UNUSED;\n+sh_va_start (valist, nextarg)\n      tree valist;\n      rtx nextarg;\n {\n@@ -5273,13 +5272,13 @@ sh_va_start (stdarg_p, valist, nextarg)\n   if (TARGET_SH5)\n     {\n       expand_builtin_saveregs ();\n-      std_expand_builtin_va_start (1, valist, nextarg);\n+      std_expand_builtin_va_start (valist, nextarg);\n       return;\n     }\n \n   if ((! TARGET_SH3E && ! TARGET_SH4) || TARGET_HITACHI)\n     {\n-      std_expand_builtin_va_start (1, valist, nextarg);\n+      std_expand_builtin_va_start (valist, nextarg);\n       return;\n     }\n "}, {"sha": "9d15fcf74182a28415ed309646d51d4d89ff0a94", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=e5faf155c998506b01863c13fb6daa6d4f589f8f", "patch": "@@ -2018,8 +2018,8 @@ while (0)\n   (VALIST) = sh_build_va_list ()\n \n /* Implement `va_start' for varargs and stdarg.  */\n-#define EXPAND_BUILTIN_VA_START(stdarg, valist, nextarg) \\\n-  sh_va_start (stdarg, valist, nextarg)\n+#define EXPAND_BUILTIN_VA_START(valist, nextarg) \\\n+  sh_va_start (valist, nextarg)\n \n /* Implement `va_arg'.  */\n #define EXPAND_BUILTIN_VA_ARG(valist, type) \\"}, {"sha": "fc814a8fdbb5424e0b741850feb8c5af14ef7984", "filename": "gcc/config/sparc/sparc-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h?ref=e5faf155c998506b01863c13fb6daa6d4f589f8f", "patch": "@@ -42,7 +42,7 @@ extern int function_arg_pass_by_reference PARAMS ((const CUMULATIVE_ARGS *,\n extern struct rtx_def *sparc_builtin_saveregs PARAMS ((void));\n #ifdef RTX_CODE\n extern void init_cumulative_args PARAMS ((CUMULATIVE_ARGS *, tree, rtx, int));\n-extern void sparc_va_start PARAMS ((int, tree, rtx));\n+extern void sparc_va_start PARAMS ((tree, rtx));\n #endif\n extern struct rtx_def *sparc_va_arg PARAMS ((tree, tree));\n extern unsigned long sparc_type_code PARAMS ((tree));"}, {"sha": "971b6f2e5f7b15c7132347f07c16eb876a58b79e", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=e5faf155c998506b01863c13fb6daa6d4f589f8f", "patch": "@@ -5244,13 +5244,12 @@ sparc_builtin_saveregs ()\n /* Implement `va_start' for varargs and stdarg.  */\n \n void\n-sparc_va_start (stdarg_p, valist, nextarg)\n-     int stdarg_p ATTRIBUTE_UNUSED;\n+sparc_va_start (valist, nextarg)\n      tree valist;\n      rtx nextarg;\n {\n   nextarg = expand_builtin_saveregs ();\n-  std_expand_builtin_va_start (1, valist, nextarg);\n+  std_expand_builtin_va_start (valist, nextarg);\n }\n \n /* Implement `va_arg'.  */"}, {"sha": "8d489e5574541e1198b70e94ca8f55b4e11ba9fe", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=e5faf155c998506b01863c13fb6daa6d4f589f8f", "patch": "@@ -1912,8 +1912,8 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define EXPAND_BUILTIN_SAVEREGS() sparc_builtin_saveregs ()\n \n /* Implement `va_start' for varargs and stdarg.  */\n-#define EXPAND_BUILTIN_VA_START(stdarg, valist, nextarg) \\\n-  sparc_va_start (stdarg, valist, nextarg)\n+#define EXPAND_BUILTIN_VA_START(valist, nextarg) \\\n+  sparc_va_start (valist, nextarg)\n \n /* Implement `va_arg'.  */\n #define EXPAND_BUILTIN_VA_ARG(valist, type) \\"}, {"sha": "dc58871a573f4e02c759e2c77f6604ee01472d65", "filename": "gcc/config/stormy16/stormy16-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Fstormy16%2Fstormy16-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Fstormy16%2Fstormy16-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16-protos.h?ref=e5faf155c998506b01863c13fb6daa6d4f589f8f", "patch": "@@ -41,7 +41,7 @@ extern tree    xstormy16_build_va_list PARAMS ((void));\n #endif\n \n #if defined (TREE_CODE) && defined (RTX_CODE)\n-extern void    xstormy16_expand_builtin_va_start PARAMS ((int, tree, rtx));\n+extern void    xstormy16_expand_builtin_va_start PARAMS ((tree, rtx));\n extern rtx     xstormy16_expand_builtin_va_arg PARAMS ((tree, tree));\n extern void    xstormy16_initialize_trampoline PARAMS ((rtx, rtx, rtx));\n extern rtx     xstormy16_function_value PARAMS ((tree, tree));"}, {"sha": "6b9f153e789636f25fc114326cf01d9e77448841", "filename": "gcc/config/stormy16/stormy16.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.c?ref=e5faf155c998506b01863c13fb6daa6d4f589f8f", "patch": "@@ -1175,8 +1175,7 @@ xstormy16_build_va_list ()\n    variable to initialize.  NEXTARG is the machine independent notion of the\n    'next' argument after the variable arguments.  */\n void\n-xstormy16_expand_builtin_va_start (stdarg_p, valist, nextarg)\n-     int stdarg_p ATTRIBUTE_UNUSED;\n+xstormy16_expand_builtin_va_start (valist, nextarg)\n      tree valist;\n      rtx nextarg ATTRIBUTE_UNUSED;\n {"}, {"sha": "315599789889e07b63f99867dfd492b091489222", "filename": "gcc/config/stormy16/stormy16.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.h?ref=e5faf155c998506b01863c13fb6daa6d4f589f8f", "patch": "@@ -1729,8 +1729,8 @@ enum reg_class\n    variable to initialize.  NEXTARG is the machine independent notion of the\n    'next' argument after the variable arguments.  If not defined, a standard\n    implementation will be defined that works for arguments passed on the stack.  */\n-#define EXPAND_BUILTIN_VA_START(STDARG_P, VALIST, NEXTARG) \\\n-  xstormy16_expand_builtin_va_start (STDARG_P, VALIST, NEXTARG)\n+#define EXPAND_BUILTIN_VA_START(VALIST, NEXTARG) \\\n+  xstormy16_expand_builtin_va_start (VALIST, NEXTARG)\n \n /* Implement the stdarg/varargs va_arg macro.  VALIST is the variable of type\n    va_list as a tree, TYPE is the type passed to va_arg.  */"}, {"sha": "ddeb5f35f161a903aba7e38c8835ed8cee920063", "filename": "gcc/config/xtensa/xtensa-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Fxtensa%2Fxtensa-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Fxtensa%2Fxtensa-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa-protos.h?ref=e5faf155c998506b01863c13fb6daa6d4f589f8f", "patch": "@@ -77,7 +77,7 @@ extern char * xtensa_emit_call PARAMS ((int, rtx *));\n \n #ifdef TREE_CODE\n extern void init_cumulative_args PARAMS ((CUMULATIVE_ARGS *, tree, rtx));\n-extern void xtensa_va_start PARAMS ((int, tree, rtx));\n+extern void xtensa_va_start PARAMS ((tree, rtx));\n extern rtx xtensa_va_arg PARAMS ((tree, tree));\n #endif /* TREE_CODE */\n "}, {"sha": "572687a978c688d9c3925e917745fbd6b97fc30f", "filename": "gcc/config/xtensa/xtensa.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.c?ref=e5faf155c998506b01863c13fb6daa6d4f589f8f", "patch": "@@ -2393,8 +2393,7 @@ xtensa_builtin_saveregs ()\n    current function to fill in an initial va_list. */\n \n void\n-xtensa_va_start (stdarg_p, valist, nextarg)\n-     int stdarg_p ATTRIBUTE_UNUSED;\n+xtensa_va_start (valist, nextarg)\n      tree valist;\n      rtx nextarg ATTRIBUTE_UNUSED;\n {"}, {"sha": "f2e4702707cbacea1e60db1642fe54eacc9ebd83", "filename": "gcc/config/xtensa/xtensa.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.h?ref=e5faf155c998506b01863c13fb6daa6d4f589f8f", "patch": "@@ -1035,8 +1035,8 @@ typedef struct xtensa_args {\n   xtensa_builtin_saveregs\n \n /* Implement `va_start' for varargs and stdarg.  */\n-#define EXPAND_BUILTIN_VA_START(stdarg, valist, nextarg) \\\n-  xtensa_va_start (stdarg, valist, nextarg)\n+#define EXPAND_BUILTIN_VA_START(valist, nextarg) \\\n+  xtensa_va_start (valist, nextarg)\n \n /* Implement `va_arg'.  */\n #define EXPAND_BUILTIN_VA_ARG(valist, type) \\"}, {"sha": "ea51ba83d36f4d6435cc10d4ae09f5c366dad771", "filename": "gcc/expr.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5faf155c998506b01863c13fb6daa6d4f589f8f/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=e5faf155c998506b01863c13fb6daa6d4f589f8f", "patch": "@@ -341,7 +341,7 @@ extern rtx gen_cond_trap PARAMS ((enum rtx_code, rtx, rtx, rtx));\n \f\n /* Functions from builtins.c:  */\n extern rtx expand_builtin PARAMS ((tree, rtx, rtx, enum machine_mode, int));\n-extern void std_expand_builtin_va_start PARAMS ((int, tree, rtx));\n+extern void std_expand_builtin_va_start PARAMS ((tree, rtx));\n extern rtx std_expand_builtin_va_arg PARAMS ((tree, tree));\n extern rtx expand_builtin_va_arg PARAMS ((tree, tree));\n extern void default_init_builtins PARAMS ((void));"}]}