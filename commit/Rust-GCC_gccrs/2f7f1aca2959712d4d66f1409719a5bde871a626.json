{"sha": "2f7f1aca2959712d4d66f1409719a5bde871a626", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmY3ZjFhY2EyOTU5NzEyZDRkNjZmMTQwOTcxOWE1YmRlODcxYTYyNg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-05-04T14:35:29Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-05-04T14:35:29Z"}, "message": "Improve API docs for <system_error> header\n\n\t* include/std/system_error (error_category, error_code)\n\t(error_condition): Improve docs.\n\t* libsupc++/exception: Add missing @addtogroup Doxygen command.\n\t* libsupc++/exception_ptr.h (exception_ptr): Link equality operators\n\tto class documentation. Suppress documentation for implementation\n\tdetails.\n\t* libsupc++/nested_exception.h (throw_with_nested, rethrow_if_nested):\n\tSuppress documentation for implementation details.\n\nFrom-SVN: r270873", "tree": {"sha": "1098ab9acdbe9a127f477b0ef18cfd003c046160", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1098ab9acdbe9a127f477b0ef18cfd003c046160"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f7f1aca2959712d4d66f1409719a5bde871a626", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f7f1aca2959712d4d66f1409719a5bde871a626", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f7f1aca2959712d4d66f1409719a5bde871a626", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f7f1aca2959712d4d66f1409719a5bde871a626/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe6fb0d1590237c67b75342dc41b7ffdbdcccf25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe6fb0d1590237c67b75342dc41b7ffdbdcccf25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe6fb0d1590237c67b75342dc41b7ffdbdcccf25"}], "stats": {"total": 110, "additions": 99, "deletions": 11}, "files": [{"sha": "b17191035834a31422ad9bb1485dd39f3cf88c0a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f7f1aca2959712d4d66f1409719a5bde871a626/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f7f1aca2959712d4d66f1409719a5bde871a626/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2f7f1aca2959712d4d66f1409719a5bde871a626", "patch": "@@ -1,5 +1,14 @@\n 2019-05-04  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/std/system_error (error_category, error_code)\n+\t(error_condition): Improve docs.\n+\t* libsupc++/exception: Add missing @addtogroup Doxygen command.\n+\t* libsupc++/exception_ptr.h (exception_ptr): Link equality operators\n+\tto class documentation. Suppress documentation for implementation\n+\tdetails.\n+\t* libsupc++/nested_exception.h (throw_with_nested, rethrow_if_nested):\n+\tSuppress documentation for implementation details.\n+\n \t* include/std/system_error (error_code): Remove friend declaration\n \tfor hash<error_code>.\n \t(hash<error_code>::operator()): Use public member functions to access"}, {"sha": "768eddaefd15db43c9ae194807a1d0920ece941b", "filename": "libstdc++-v3/include/std/system_error", "status": "modified", "additions": 71, "deletions": 11, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f7f1aca2959712d4d66f1409719a5bde871a626/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f7f1aca2959712d4d66f1409719a5bde871a626/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error?ref=2f7f1aca2959712d4d66f1409719a5bde871a626", "patch": "@@ -44,6 +44,10 @@ namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n+  /** @addtogroup diagnostics\n+   *  @{\n+   */\n+\n   class error_code;\n   class error_condition;\n   class system_error;\n@@ -70,7 +74,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif // C++17\n   inline namespace _V2 {\n \n-  /// error_category\n+  /** Abstract base class for types defining a category of error codes.\n+   *\n+   * An error category defines a context that give meaning to the integer\n+   * stored in an `error_code` or `error_category` object. For example,\n+   * the standard `errno` constants such a `EINVAL` and `ENOMEM` are\n+   * associated with the \"generic\" category and other OS-specific error\n+   * numbers are associated with the \"system\" category, but a user-defined\n+   * category might give different meanings to the same numerical values.\n+   */\n   class error_category\n   {\n   public:\n@@ -131,18 +143,31 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   };\n \n   // DR 890.\n-  _GLIBCXX_CONST const error_category& system_category() noexcept;\n+\n+  /// Error category for `errno` error codes.\n   _GLIBCXX_CONST const error_category& generic_category() noexcept;\n \n+  /// Error category for other error codes defined by the OS.\n+  _GLIBCXX_CONST const error_category& system_category() noexcept;\n+\n   } // end inline namespace\n \n   error_code make_error_code(errc) noexcept;\n \n-  template<typename _Tp>\n-    struct hash;\n-\n-  /// error_code\n-  // Implementation-specific error identification\n+  /** Class error_code\n+   *\n+   * This class is a value type storing an integer error number and a\n+   * category that gives meaning to the error number. Typically this is done\n+   * close the the point where the error happens, to capture the original\n+   * error value.\n+   *\n+   * An `error_code` object can be used to store the original error value\n+   * emitted by some subsystem, with a category relevant to the subsystem.\n+   * For example, errors from POSIX library functions can be represented by\n+   * an `errno` value and the \"generic\" category, but errors from an HTTP\n+   * library might be represented by an HTTP response status code (e.g. 404)\n+   * and a custom category defined by the library.\n+   */\n   struct error_code\n   {\n     error_code() noexcept\n@@ -198,6 +223,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   };\n \n   // 19.4.2.6 non-member functions\n+\n+  /// @relates error_code @{\n+\n   inline error_code\n   make_error_code(errc __e) noexcept\n   { return error_code(static_cast<int>(__e), generic_category()); }\n@@ -215,10 +243,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     operator<<(basic_ostream<_CharT, _Traits>& __os, const error_code& __e)\n     { return (__os << __e.category().name() << ':' << __e.value()); }\n \n+  // @}\n+\n   error_condition make_error_condition(errc) noexcept;\n \n-  /// error_condition\n-  // Portable error identification\n+  /** Class error_condition\n+   *\n+   * This class represents error conditions that may be visible at an API\n+   * boundary. Different `error_code` values that can occur within a library\n+   * or module might map to the same `error_condition`.\n+   *\n+   * An `error_condition` represents something that the program can test for,\n+   * and subsequently take appropriate action.\n+   */\n   struct error_condition\n   {\n     error_condition() noexcept\n@@ -272,10 +309,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   };\n \n   // 19.4.3.6 non-member functions\n+\n+  /// Create an `error_condition` representing a standard `errc` condition.\n+  /// @relates error_condition\n   inline error_condition\n   make_error_condition(errc __e) noexcept\n   { return error_condition(static_cast<int>(__e), generic_category()); }\n \n+  /// Define an ordering for error_condition objects.\n+  /// @relates error_condition\n   inline bool\n   operator<(const error_condition& __lhs,\n \t    const error_condition& __rhs) noexcept\n@@ -286,25 +328,32 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   }\n \n   // 19.4.4 Comparison operators\n+\n+  /// @relates error_code\n   inline bool\n   operator==(const error_code& __lhs, const error_code& __rhs) noexcept\n   { return (__lhs.category() == __rhs.category()\n \t    && __lhs.value() == __rhs.value()); }\n \n+  /// @relates error_code\n+  /// @relates error_condition\n   inline bool\n   operator==(const error_code& __lhs, const error_condition& __rhs) noexcept\n   {\n     return (__lhs.category().equivalent(__lhs.value(), __rhs)\n \t    || __rhs.category().equivalent(__lhs, __rhs.value()));\n   }\n \n+  /// @relates error_code\n+  /// @relates error_condition\n   inline bool\n   operator==(const error_condition& __lhs, const error_code& __rhs) noexcept\n   {\n     return (__rhs.category().equivalent(__rhs.value(), __lhs)\n \t    || __lhs.category().equivalent(__rhs, __lhs.value()));\n   }\n \n+  /// @relates error_condition\n   inline bool\n   operator==(const error_condition& __lhs,\n \t     const error_condition& __rhs) noexcept\n@@ -313,28 +362,37 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    && __lhs.value() == __rhs.value());\n   }\n \n+  /// @relates error_code\n   inline bool\n   operator!=(const error_code& __lhs, const error_code& __rhs) noexcept\n   { return !(__lhs == __rhs); }\n \n+  /// @relates error_code\n+  /// @relates error_condition\n   inline bool\n   operator!=(const error_code& __lhs, const error_condition& __rhs) noexcept\n   { return !(__lhs == __rhs); }\n \n+  /// @relates error_code\n+  /// @relates error_condition\n   inline bool\n   operator!=(const error_condition& __lhs, const error_code& __rhs) noexcept\n   { return !(__lhs == __rhs); }\n \n+  /// @relates error_condition\n   inline bool\n   operator!=(const error_condition& __lhs,\n \t     const error_condition& __rhs) noexcept\n   { return !(__lhs == __rhs); }\n \n \n   /**\n-   *  @brief Thrown to indicate error code of underlying system.\n+   * @brief An exception type that includes an `error_code` value.\n+   *\n+   * Typically used to report errors from the operating system and other\n+   * low-level APIs.\n    *\n-   *  @ingroup exceptions\n+   * @ingroup exceptions\n    */\n   class system_error : public std::runtime_error\n   {\n@@ -385,6 +443,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #ifndef _GLIBCXX_COMPATIBILITY_CXX0X\n   // DR 1182.\n   /// std::hash specialization for error_code.\n+  /// @relates error_code\n   template<>\n     struct hash<error_code>\n     : public __hash_base<size_t, error_code>\n@@ -401,6 +460,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #if __cplusplus >= 201703L\n   // DR 2686.\n   /// std::hash specialization for error_condition.\n+  /// @relates error_condition\n   template<>\n     struct hash<error_condition>\n     : public __hash_base<size_t, error_condition>"}, {"sha": "88be4a4757b9dd65ddb7d8638da9753f74cfc011", "filename": "libstdc++-v3/libsupc++/exception", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f7f1aca2959712d4d66f1409719a5bde871a626/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f7f1aca2959712d4d66f1409719a5bde871a626/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception?ref=2f7f1aca2959712d4d66f1409719a5bde871a626", "patch": "@@ -41,6 +41,10 @@ extern \"C++\" {\n \n namespace std\n {\n+  /** @addtogroup exceptions\n+   *  @{\n+   */\n+\n   /** If an %exception is thrown which is not listed in a function's\n    *  %exception specification, one of these may be thrown.  */\n   class bad_exception : public exception"}, {"sha": "6dfb20ace5cefb3e13b83a3ffe345a9b667d2826", "filename": "libstdc++-v3/libsupc++/exception_ptr.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f7f1aca2959712d4d66f1409719a5bde871a626/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f7f1aca2959712d4d66f1409719a5bde871a626/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_ptr.h?ref=2f7f1aca2959712d4d66f1409719a5bde871a626", "patch": "@@ -49,6 +49,7 @@ namespace std\n    * @addtogroup exceptions\n    * @{\n    */\n+\n   namespace __exception_ptr\n   {\n     class exception_ptr;\n@@ -154,6 +155,8 @@ namespace std\n \t__attribute__ ((__pure__));\n     };\n \n+    /// @relates exception_ptr @{\n+\n     bool \n     operator==(const exception_ptr&, const exception_ptr&)\n       _GLIBCXX_USE_NOEXCEPT __attribute__ ((__pure__));\n@@ -166,10 +169,14 @@ namespace std\n     swap(exception_ptr& __lhs, exception_ptr& __rhs)\n     { __lhs.swap(__rhs); }\n \n+    // @}\n+\n+    /// @cond undocumented\n     template<typename _Ex>\n       inline void\n       __dest_thunk(void* __x)\n       { static_cast<_Ex*>(__x)->~_Ex(); }\n+    /// @endcond\n \n   } // namespace __exception_ptr\n "}, {"sha": "df33a66784a69cc8f6c4a229fe84e86a9238c3c5", "filename": "libstdc++-v3/libsupc++/nested_exception.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f7f1aca2959712d4d66f1409719a5bde871a626/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnested_exception.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f7f1aca2959712d4d66f1409719a5bde871a626/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnested_exception.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnested_exception.h?ref=2f7f1aca2959712d4d66f1409719a5bde871a626", "patch": "@@ -76,6 +76,8 @@ namespace std\n     { return _M_ptr; }\n   };\n \n+  /// @cond undocumented\n+\n   template<typename _Except>\n     struct _Nested_exception : public _Except, public nested_exception\n     {\n@@ -106,6 +108,8 @@ namespace std\n     __throw_with_nested_impl(_Tp&& __t, false_type)\n     { throw std::forward<_Tp>(__t); }\n \n+  /// @endcond\n+\n   /// If @p __t is derived from nested_exception, throws @p __t.\n   /// Else, throws an implementation-defined object derived from both.\n   template<typename _Tp>\n@@ -123,6 +127,8 @@ namespace std\n       std::__throw_with_nested_impl(std::forward<_Tp>(__t), __nest{});\n     }\n \n+  /// @cond undocumented\n+\n   // Determine if dynamic_cast<const nested_exception&> would be well-formed.\n   template<typename _Tp>\n     using __rethrow_if_nested_cond = typename enable_if<\n@@ -145,6 +151,8 @@ namespace std\n   __rethrow_if_nested_impl(const void*)\n   { }\n \n+  /// @endcond\n+\n   /// If @p __ex is derived from nested_exception, @p __ex.rethrow_nested().\n   template<typename _Ex>\n     inline void"}]}