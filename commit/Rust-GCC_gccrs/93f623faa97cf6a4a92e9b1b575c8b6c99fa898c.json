{"sha": "93f623faa97cf6a4a92e9b1b575c8b6c99fa898c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTNmNjIzZmFhOTdjZjZhNGE5MmU5YjFiNTc1YzhiNmM5OWZhODk4Yw==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1994-07-13T01:37:25Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1994-07-13T01:37:25Z"}, "message": "(pushdecl): Don't call lookup_name_current_level_global when traditional.\n\n(pushdecl): Don't call lookup_name_current_level_global\nwhen traditional.  When doing checks against\nIDENTIFIER_LIMBO_VALUE, also do check against\nINDENTIFIER_GLOBAL_VALUE when traditional.\n\nFrom-SVN: r7756", "tree": {"sha": "1dee5945e248cf22ae45cdc358c414fc727ce1df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1dee5945e248cf22ae45cdc358c414fc727ce1df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/93f623faa97cf6a4a92e9b1b575c8b6c99fa898c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93f623faa97cf6a4a92e9b1b575c8b6c99fa898c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93f623faa97cf6a4a92e9b1b575c8b6c99fa898c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93f623faa97cf6a4a92e9b1b575c8b6c99fa898c/comments", "author": null, "committer": null, "parents": [{"sha": "1ba298e52539bbac52f2bd25689db74672438f0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ba298e52539bbac52f2bd25689db74672438f0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ba298e52539bbac52f2bd25689db74672438f0c"}], "stats": {"total": 29, "additions": 19, "deletions": 10}, "files": [{"sha": "c1a8dc99393e8019a6d950d2ba8597b4881d4946", "filename": "gcc/c-decl.c", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93f623faa97cf6a4a92e9b1b575c8b6c99fa898c/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93f623faa97cf6a4a92e9b1b575c8b6c99fa898c/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=93f623faa97cf6a4a92e9b1b575c8b6c99fa898c", "patch": "@@ -1842,7 +1842,10 @@ pushdecl (x)\n       char *file;\n       int line;\n \n-      if (DECL_EXTERNAL (x) && TREE_PUBLIC (x))\n+      /* Don't type check externs here when -traditional.  This is so that\n+\t code with conflicting declarations inside blocks will get warnings\n+\t not errors.  X11 for instance depends on this.  */\n+      if (DECL_EXTERNAL (x) && TREE_PUBLIC (x) && ! flag_traditional)\n \tt = lookup_name_current_level_global (name);\n       else\n \tt = lookup_name_current_level (name);\n@@ -1953,20 +1956,26 @@ pushdecl (x)\n         }\n \n       /* Multiple external decls of the same identifier ought to match.\n-\t Check against out of scope (limbo) block level declarations.\n-\n-\t If this is a block level declaration, then DECL_EXTERNAL must also\n-\t be set, so we have already checked against global declarations above\n-\t via the lookup_name call.\n+\t Check against both global declarations (when traditional) and out of\n+\t scope (limbo) block level declarations.\n \n \t We get warnings about inline functions where they are defined.\n \t Avoid duplicate warnings where they are used.  */\n-      if (TREE_PUBLIC (x) && ! DECL_INLINE (x)\n-\t  && IDENTIFIER_LIMBO_VALUE (name))\n+      if (TREE_PUBLIC (x) && ! DECL_INLINE (x))\n \t{\n-\t  tree decl = IDENTIFIER_LIMBO_VALUE (name);\n+\t  tree decl;\n+\n+\t  if (flag_traditional && IDENTIFIER_GLOBAL_VALUE (name) != 0\n+\t      && (DECL_EXTERNAL (IDENTIFIER_GLOBAL_VALUE (name))\n+\t\t  || TREE_PUBLIC (IDENTIFIER_GLOBAL_VALUE (name))))\n+\t    decl = IDENTIFIER_GLOBAL_VALUE (name);\n+\t  else if (IDENTIFIER_LIMBO_VALUE (name) != 0)\n+\t    /* Decls in limbo are always extern, so no need to check that.  */\n+\t    decl = IDENTIFIER_LIMBO_VALUE (name);\n+\t  else\n+\t    decl = 0;\n \n-\t  if (! comptypes (TREE_TYPE (x), TREE_TYPE (decl))\n+\t  if (decl && ! comptypes (TREE_TYPE (x), TREE_TYPE (decl))\n \t      /* If old decl is built-in, we already warned if we should.  */\n \t      && !DECL_BUILT_IN (decl))\n \t    {"}]}