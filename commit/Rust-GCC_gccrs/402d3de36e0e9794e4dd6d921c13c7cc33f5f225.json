{"sha": "402d3de36e0e9794e4dd6d921c13c7cc33f5f225", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDAyZDNkZTM2ZTBlOTc5NGU0ZGQ2ZDkyMWMxM2M3Y2MzM2Y1ZjIyNQ==", "commit": {"author": {"name": "Ian Bolton", "email": "ian.bolton@arm.com", "date": "2012-10-23T17:20:56Z"}, "committer": {"name": "Marcus Shawcroft", "email": "mshawcroft@gcc.gnu.org", "date": "2012-10-23T17:20:56Z"}, "message": "AArch64 [4/10]\n\n2012-10-23  Ian Bolton  <ian.bolton@arm.com>\n\t    Jim MacArthur  <jim.macarthur@arm.com>\n\t    Chris Schlumberger-Socha <chris.schlumberger-socha@arm.com>\n\t    Marcus Shawcroft  <marcus.shawcroft@arm.com>\n\t    Nigel Stephens  <nigel.stephens@arm.com>\n\t    Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n\t    Richard Earnshaw  <rearnsha@arm.com>\n\t    Sofiane Naci  <sofiane.naci@arm.com>\n\t    Stephen Thomas  <stephen.thomas@arm.com>\n\t    Tejas Belagod  <tejas.belagod@arm.com>\n\t    Yufeng Zhang  <yufeng.zhang@arm.com>\n\n\t* lib/target-supports.exp\n\t(check_profiling_available): Add AArch64.\n\t(check_effective_target_vect_int): Likewise.\n\t(check_effective_target_vect_shift): Likewise.\n\t(check_effective_target_vect_float): Likewise.\n\t(check_effective_target_vect_double): Likewise.\n\t(check_effective_target_vect_widen_mult_qi_to_hi): Likewise.\n\t(check_effective_target_vect_widen_mult_hi_to_si): Likewise.\n\t(check_effective_target_vect_pack_trunc): Likewise.\n\t(check_effective_target_vect_unpack): Likewise.\n\t(check_effective_target_vect_hw_misalign): Likewise.\n\t(check_effective_target_vect_short_mult): Likewise.\n\t(check_effective_target_vect_int_mult): Likewise.\n\t(check_effective_target_vect_stridedN): Likewise.\n\t(check_effective_target_sync_int_long): Likewise.\n\t(check_effective_target_sync_char_short): Likewise.\n\t(check_vect_support_and_set_flags): Likewise.\n\t(check_effective_target_aarch64_tiny): New.\n\t(check_effective_target_aarch64_small): New.\n\t(check_effective_target_aarch64_large): New.\n\t* g++.dg/other/PR23205.C: Enable aarch64.\n\t* g++.dg/other/pr23205-2.C: Likewise.\n\t* g++.old-deja/g++.abi/ptrmem.C: Likewise.\n\t* gcc.c-torture/execute/20101011-1.c: Likewise.\n\t* gcc.dg/20020312-2.c: Likewise.\n\t* gcc.dg/20040813-1.c: Likewise.\n\t* gcc.dg/builtin-apply2.c: Likewise.\n\t* gcc.dg/stack-usage-1.c: Likewise.\n\n\nCo-Authored-By: Chris Schlumberger-Socha <chris.schlumberger-socha@arm.com>\nCo-Authored-By: Jim MacArthur <jim.macarthur@arm.com>\nCo-Authored-By: Marcus Shawcroft <marcus.shawcroft@arm.com>\nCo-Authored-By: Nigel Stephens <nigel.stephens@arm.com>\nCo-Authored-By: Ramana Radhakrishnan <ramana.radhakrishnan@arm.com>\nCo-Authored-By: Richard Earnshaw <rearnsha@arm.com>\nCo-Authored-By: Sofiane Naci <sofiane.naci@arm.com>\nCo-Authored-By: Stephen Thomas <stephen.thomas@arm.com>\nCo-Authored-By: Tejas Belagod <tejas.belagod@arm.com>\nCo-Authored-By: Yufeng Zhang <yufeng.zhang@arm.com>\n\nFrom-SVN: r192726", "tree": {"sha": "c517dc58120e356e5c47a889fff8e595c2cf4557", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c517dc58120e356e5c47a889fff8e595c2cf4557"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/402d3de36e0e9794e4dd6d921c13c7cc33f5f225", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/402d3de36e0e9794e4dd6d921c13c7cc33f5f225", "html_url": "https://github.com/Rust-GCC/gccrs/commit/402d3de36e0e9794e4dd6d921c13c7cc33f5f225", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/402d3de36e0e9794e4dd6d921c13c7cc33f5f225/comments", "author": null, "committer": null, "parents": [{"sha": "77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77c4ae242f8074a7c7ea4cc8d3793fd899786e1e"}], "stats": {"total": 161, "additions": 151, "deletions": 10}, "files": [{"sha": "0779858f6ea293f84f00a618cafc6531adbd2810", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/402d3de36e0e9794e4dd6d921c13c7cc33f5f225/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/402d3de36e0e9794e4dd6d921c13c7cc33f5f225/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=402d3de36e0e9794e4dd6d921c13c7cc33f5f225", "patch": "@@ -1,3 +1,44 @@\n+2012-10-23  Ian Bolton  <ian.bolton@arm.com>\n+\t    Jim MacArthur  <jim.macarthur@arm.com>\n+\t    Chris Schlumberger-Socha <chris.schlumberger-socha@arm.com>\n+\t    Marcus Shawcroft  <marcus.shawcroft@arm.com>\n+\t    Nigel Stephens  <nigel.stephens@arm.com>\n+\t    Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n+\t    Richard Earnshaw  <rearnsha@arm.com>\n+\t    Sofiane Naci  <sofiane.naci@arm.com>\n+\t    Stephen Thomas  <stephen.thomas@arm.com>\n+\t    Tejas Belagod  <tejas.belagod@arm.com>\n+\t    Yufeng Zhang  <yufeng.zhang@arm.com>\n+\n+\t* lib/target-supports.exp\n+\t(check_profiling_available): Add AArch64.\n+\t(check_effective_target_vect_int): Likewise.\n+\t(check_effective_target_vect_shift): Likewise.\n+\t(check_effective_target_vect_float): Likewise.\n+\t(check_effective_target_vect_double): Likewise.\n+\t(check_effective_target_vect_widen_mult_qi_to_hi): Likewise.\n+\t(check_effective_target_vect_widen_mult_hi_to_si): Likewise.\n+\t(check_effective_target_vect_pack_trunc): Likewise.\n+\t(check_effective_target_vect_unpack): Likewise.\n+\t(check_effective_target_vect_hw_misalign): Likewise.\n+\t(check_effective_target_vect_short_mult): Likewise.\n+\t(check_effective_target_vect_int_mult): Likewise.\n+\t(check_effective_target_vect_stridedN): Likewise.\n+\t(check_effective_target_sync_int_long): Likewise.\n+\t(check_effective_target_sync_char_short): Likewise.\n+\t(check_vect_support_and_set_flags): Likewise.\n+\t(check_effective_target_aarch64_tiny): New.\n+\t(check_effective_target_aarch64_small): New.\n+\t(check_effective_target_aarch64_large): New.\n+\t* g++.dg/other/PR23205.C: Enable aarch64.\n+\t* g++.dg/other/pr23205-2.C: Likewise.\n+\t* g++.old-deja/g++.abi/ptrmem.C: Likewise.\n+\t* gcc.c-torture/execute/20101011-1.c: Likewise.\n+\t* gcc.dg/20020312-2.c: Likewise.\n+\t* gcc.dg/20040813-1.c: Likewise.\n+\t* gcc.dg/builtin-apply2.c: Likewise.\n+\t* gcc.dg/stack-usage-1.c: Likewise.\n+\n 2012-10-23  Ian Bolton  <ian.bolton@arm.com>\n \t    Jim MacArthur  <jim.macarthur@arm.com>\n \t    Chris Schlumberger-Socha <chris.schlumberger-socha@arm.com>"}, {"sha": "af82ad2ec36998135e67a25f47d19b4e977fd8d2", "filename": "gcc/testsuite/g++.dg/abi/aarch64_guard1.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/402d3de36e0e9794e4dd6d921c13c7cc33f5f225/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Faarch64_guard1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/402d3de36e0e9794e4dd6d921c13c7cc33f5f225/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Faarch64_guard1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Faarch64_guard1.C?ref=402d3de36e0e9794e4dd6d921c13c7cc33f5f225", "patch": "@@ -0,0 +1,17 @@\n+// Check that the initialization guard variable is an 8-byte aligned,\n+// 8-byte doubleword and that only the least significant bit is used\n+// for initialization guard variables.\n+// { dg-do compile { target aarch64*-*-* } }\n+// { dg-options \"-O -fdump-tree-original\" }\n+\n+int bar();\n+\n+int *foo ()\n+{\n+  static int x = bar ();\n+  return &x;\n+}\n+\n+// { dg-final { scan-assembler _ZGVZ3foovE1x,8,8 } }\n+// { dg-final { scan-tree-dump \"_ZGVZ3foovE1x & 1\" \"original\" } }\n+// { dg-final { cleanup-tree-dump \"original\" } }"}, {"sha": "e55710b40f0a0a69528ca4e27facff742ff2e4ad", "filename": "gcc/testsuite/g++.dg/other/PR23205.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/402d3de36e0e9794e4dd6d921c13c7cc33f5f225/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2FPR23205.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/402d3de36e0e9794e4dd6d921c13c7cc33f5f225/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2FPR23205.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2FPR23205.C?ref=402d3de36e0e9794e4dd6d921c13c7cc33f5f225", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-skip-if \"No stabs\" { mmix-*-* *-*-aix* alpha*-*-* hppa*64*-*-* ia64-*-* tile*-*-* *-*-vxworks } { \"*\" } { \"\" } } */\n+/* { dg-skip-if \"No stabs\" { aarch64*-*-* mmix-*-* *-*-aix* alpha*-*-* hppa*64*-*-* ia64-*-* tile*-*-* *-*-vxworks } { \"*\" } { \"\" } } */\n /* { dg-options \"-gstabs+ -fno-eliminate-unused-debug-types\" } */\n \n const int foobar = 4;"}, {"sha": "607e5a2b4e433a0fec79d3fda4dc265f1f8a39ae", "filename": "gcc/testsuite/g++.dg/other/pr23205-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/402d3de36e0e9794e4dd6d921c13c7cc33f5f225/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr23205-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/402d3de36e0e9794e4dd6d921c13c7cc33f5f225/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr23205-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr23205-2.C?ref=402d3de36e0e9794e4dd6d921c13c7cc33f5f225", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-skip-if \"No stabs\" { mmix-*-* *-*-aix* alpha*-*-* hppa*64*-*-* ia64-*-* tile*-*-* } { \"*\" } { \"\" } } */\n+/* { dg-skip-if \"No stabs\" { aarch64*-*-* mmix-*-* *-*-aix* alpha*-*-* hppa*64*-*-* ia64-*-* tile*-*-* } { \"*\" } { \"\" } } */\n /* { dg-options \"-gstabs+ -fno-eliminate-unused-debug-types -ftoplevel-reorder\" } */\n \n const int foobar = 4;"}, {"sha": "341735879c59d517edb1fc49edfb78c6e2e01846", "filename": "gcc/testsuite/g++.old-deja/g++.abi/ptrmem.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/402d3de36e0e9794e4dd6d921c13c7cc33f5f225/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.abi%2Fptrmem.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/402d3de36e0e9794e4dd6d921c13c7cc33f5f225/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.abi%2Fptrmem.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.abi%2Fptrmem.C?ref=402d3de36e0e9794e4dd6d921c13c7cc33f5f225", "patch": "@@ -7,7 +7,7 @@\n    function.  However, some platforms use all bits to encode a\n    function pointer.  Such platforms use the lowest bit of the delta,\n    that is shifted left by one bit.  */\n-#if defined __MN10300__ || defined __SH5__ || defined __arm__ || defined __thumb__ || defined __mips__\n+#if defined __MN10300__ || defined __SH5__ || defined __arm__ || defined __thumb__ || defined __mips__ || defined __aarch64__\n #define ADJUST_PTRFN(func, virt) ((void (*)())(func))\n #define ADJUST_DELTA(delta, virt) (((delta) << 1) + !!(virt))\n #else"}, {"sha": "76b9f068723994dd3f0543a9a4ece4538cb676de", "filename": "gcc/testsuite/gcc.c-torture/execute/20101011-1.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/402d3de36e0e9794e4dd6d921c13c7cc33f5f225/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20101011-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/402d3de36e0e9794e4dd6d921c13c7cc33f5f225/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20101011-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20101011-1.c?ref=402d3de36e0e9794e4dd6d921c13c7cc33f5f225", "patch": "@@ -12,6 +12,10 @@\n #elif defined (__sh__)\n   /* On SH division by zero does not trap.  */\n # define DO_TEST 0\n+#elif defined (__aarch64__) && !defined(__linux__)\n+  /* AArch64 divisions do trap by default, but libgloss targets do not\n+     intercept the trap and raise a SIGFPE. So restrict the test to\n+     AArch64 systems that use the Linux kernel.  */\n #elif defined (__TMS320C6X__)\n   /* On TI C6X division by zero does not trap.  */\n # define DO_TEST 0"}, {"sha": "47c2d0fc64895d6ebd0691d49c28d981d29e1b10", "filename": "gcc/testsuite/gcc.dg/20020312-2.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/402d3de36e0e9794e4dd6d921c13c7cc33f5f225/gcc%2Ftestsuite%2Fgcc.dg%2F20020312-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/402d3de36e0e9794e4dd6d921c13c7cc33f5f225/gcc%2Ftestsuite%2Fgcc.dg%2F20020312-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20020312-2.c?ref=402d3de36e0e9794e4dd6d921c13c7cc33f5f225", "patch": "@@ -92,6 +92,8 @@ extern void abort (void);\n # else\n #  define PIC_REG \"gr17\"\n #endif\n+#elif defined (__aarch64__)\n+/* No pic register -- yet.  */\n #else\n # error \"Modify the test for your target.\"\n #endif"}, {"sha": "c1a9fd0409abf4fee7b47c632c6decb4c8fd6a45", "filename": "gcc/testsuite/gcc.dg/20040813-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/402d3de36e0e9794e4dd6d921c13c7cc33f5f225/gcc%2Ftestsuite%2Fgcc.dg%2F20040813-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/402d3de36e0e9794e4dd6d921c13c7cc33f5f225/gcc%2Ftestsuite%2Fgcc.dg%2F20040813-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20040813-1.c?ref=402d3de36e0e9794e4dd6d921c13c7cc33f5f225", "patch": "@@ -2,7 +2,7 @@\n /* Contributed by Devang Patel  <dpatel@apple.com>  */\n \n /* { dg-do compile } */\n-/* { dg-skip-if \"No stabs\" { mmix-*-* *-*-aix* alpha*-*-* hppa*64*-*-* ia64-*-* tile*-*-* *-*-vxworks* } { \"*\" } { \"\" } } */\n+/* { dg-skip-if \"No stabs\" { aarch64*-*-* mmix-*-* *-*-aix* alpha*-*-* hppa*64*-*-* ia64-*-* tile*-*-* *-*-vxworks* } { \"*\" } { \"\" } } */\n /* { dg-options \"-gstabs\" } */\n \n int"}, {"sha": "9b731470e6cc34d97930af819dee06e89162848d", "filename": "gcc/testsuite/gcc.dg/builtin-apply2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/402d3de36e0e9794e4dd6d921c13c7cc33f5f225/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-apply2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/402d3de36e0e9794e4dd6d921c13c7cc33f5f225/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-apply2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-apply2.c?ref=402d3de36e0e9794e4dd6d921c13c7cc33f5f225", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-skip-if \"Variadic funcs have all args on stack. Normal funcs have args in registers.\" { \"avr-*-*\" } { \"*\" } { \"\" } } */\n+/* { dg-skip-if \"Variadic funcs have all args on stack. Normal funcs have args in registers.\" { \"aarch64*-*-* avr-*-* \" } { \"*\" } { \"\" } } */\n /* { dg-skip-if \"Variadic funcs use Base AAPCS.  Normal funcs use VFP variant.\" { \"arm*-*-*\" } { \"-mfloat-abi=hard\" } { \"\" } } */\n \n /* PR target/12503 */"}, {"sha": "b6524f9a1255566d70eee6afcd206381867e88ed", "filename": "gcc/testsuite/gcc.dg/stack-usage-1.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/402d3de36e0e9794e4dd6d921c13c7cc33f5f225/gcc%2Ftestsuite%2Fgcc.dg%2Fstack-usage-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/402d3de36e0e9794e4dd6d921c13c7cc33f5f225/gcc%2Ftestsuite%2Fgcc.dg%2Fstack-usage-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstack-usage-1.c?ref=402d3de36e0e9794e4dd6d921c13c7cc33f5f225", "patch": "@@ -7,7 +7,9 @@\n    function FOO is reported as 256 or 264 in the stack usage (.su) file.\n    Then check that this is the actual stack usage in the assembly file.  */\n \n-#if defined(__i386__)\n+#if defined(__aarch64__)\n+#  define SIZE 256 /* No frame pointer for leaf functions (default) */\n+#elif defined(__i386__)\n #  define SIZE 248\n #elif defined(__x86_64__)\n #  ifndef _WIN64"}, {"sha": "fd731994f369c8ab362ff9e486ed50b35b687be6", "filename": "gcc/testsuite/gfortran.dg/debug/pr35154-stabs.f", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/402d3de36e0e9794e4dd6d921c13c7cc33f5f225/gcc%2Ftestsuite%2Fgfortran.dg%2Fdebug%2Fpr35154-stabs.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/402d3de36e0e9794e4dd6d921c13c7cc33f5f225/gcc%2Ftestsuite%2Fgfortran.dg%2Fdebug%2Fpr35154-stabs.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdebug%2Fpr35154-stabs.f?ref=402d3de36e0e9794e4dd6d921c13c7cc33f5f225", "patch": "@@ -1,6 +1,6 @@\n C     Test program for common block debugging.  G. Helffrich 11 July 2004.\n C { dg-do compile }\n-C { dg-skip-if \"No stabs\" { mmix-*-* alpha*-*-* hppa*64*-*-* ia64-*-* *-*-vxworks* } { \"*\" } { \"\" } }\n+C { dg-skip-if \"No stabs\" { aarch64*-*-* mmix-*-* alpha*-*-* hppa*64*-*-* ia64-*-* *-*-vxworks* } { \"*\" } { \"\" } }\n C { dg-skip-if \"No stabs\" {*-*-* } { \"*\" } { \"-gstabs\" } }\n       common i,j\n       common /label/l,m"}, {"sha": "8520c8f5507640591c1b23707a3f21886f4fdb6b", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 78, "deletions": 3, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/402d3de36e0e9794e4dd6d921c13c7cc33f5f225/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/402d3de36e0e9794e4dd6d921c13c7cc33f5f225/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=402d3de36e0e9794e4dd6d921c13c7cc33f5f225", "patch": "@@ -478,6 +478,13 @@ proc check_profiling_available { test_what } {\n \treturn 0\n     }\n \n+    # We don't yet support profiling for AArch64.\n+    if { [istarget aarch64*-*-*]\n+\t && ([lindex $test_what 1] == \"-p\"\n+\t     || [lindex $test_what 1] == \"-pg\") } {\n+\treturn 0\n+    }\n+\n     # cygwin does not support -p.\n     if { [istarget *-*-cygwin*] && $test_what == \"-p\" } {\n \treturn 0\n@@ -493,7 +500,8 @@ proc check_profiling_available { test_what } {\n     if {![info exists profiling_available_saved]} {\n \t# Some targets don't have any implementation of __bb_init_func or are\n \t# missing other needed machinery.\n-\tif {    [istarget am3*-*-linux*]\n+\tif {    [istarget aarch64*-*-elf]\n+\t     || [istarget am3*-*-linux*]\n \t     || [istarget arm*-*-eabi*]\n \t     || [istarget arm*-*-elf]\n \t     || [istarget arm*-*-symbianelf*]\n@@ -1875,6 +1883,7 @@ proc check_effective_target_vect_int { } {\n \t      || [istarget sparc*-*-*]\n \t      || [istarget alpha*-*-*]\n \t      || [istarget ia64-*-*] \n+\t      || [istarget aarch64*-*-*]\n \t      || [check_effective_target_arm32]\n \t      || ([istarget mips*-*-*]\n \t\t  && [check_effective_target_mips_loongson]) } {\n@@ -1995,6 +2004,15 @@ proc check_effective_target_vect_floatuint_cvt { } {\n     return $et_vect_floatuint_cvt_saved\n }\n \n+# Return 1 if this is a AArch64 target supporting big endian\n+proc check_effective_target_aarch64_big_endian { } {\n+    return [check_no_compiler_messages aarch64_big_endian assembly {\n+\t#if !defined(__aarch64__) || !defined(__AARCH64EB__)\n+\t#error FOO\n+\t#endif\n+    }]\n+}\n+\n # Return 1 is this is an arm target using 32-bit instructions\n proc check_effective_target_arm32 { } {\n     return [check_no_compiler_messages arm32 assembly {\n@@ -2739,6 +2757,7 @@ proc check_effective_target_vect_shift { } {\n \t     || [istarget ia64-*-*]\n \t     || [istarget i?86-*-*]\n \t     || [istarget x86_64-*-*]\n+\t     || [istarget aarch64*-*-*]\n \t     || [check_effective_target_arm32]\n \t     || ([istarget mips*-*-*]\n \t\t && [check_effective_target_mips_loongson]) } {\n@@ -2808,6 +2827,7 @@ proc check_effective_target_vect_float { } {\n \t      || [istarget mipsisa64*-*-*]\n \t      || [istarget x86_64-*-*]\n \t      || [istarget ia64-*-*]\n+\t      || [istarget aarch64*-*-*]\n \t      || [check_effective_target_arm32] } {\n \t   set et_vect_float_saved 1\n \t}\n@@ -2829,6 +2849,7 @@ proc check_effective_target_vect_double { } {\n     } else {\n \tset et_vect_double_saved 0\n \tif { [istarget i?86-*-*]\n+\t      || [istarget aarch64*-*-*]\n \t      || [istarget x86_64-*-*] } {\n \t   if { [check_no_compiler_messages vect_double assembly {\n \t\t #ifdef __tune_atom__\n@@ -3111,6 +3132,7 @@ proc check_effective_target_vect_widen_mult_qi_to_hi { } {\n \t    set et_vect_widen_mult_qi_to_hi_saved 0\n \t}\n         if { [istarget powerpc*-*-*]\n+              || [istarget aarch64*-*-*]\n               || ([istarget arm*-*-*] && [check_effective_target_arm_neon_ok]) } {\n             set et_vect_widen_mult_qi_to_hi_saved 1\n         }\n@@ -3143,6 +3165,7 @@ proc check_effective_target_vect_widen_mult_hi_to_si { } {\n         if { [istarget powerpc*-*-*]\n \t      || [istarget spu-*-*]\n \t      || [istarget ia64-*-*]\n+\t      || [istarget aarch64*-*-*]\n \t      || [istarget i?86-*-*]\n \t      || [istarget x86_64-*-*]\n               || ([istarget arm*-*-*] && [check_effective_target_arm_neon_ok]) } {\n@@ -3320,6 +3343,7 @@ proc check_effective_target_vect_pack_trunc { } {\n         if { ([istarget powerpc*-*-*] && ![istarget powerpc-*-linux*paired*])\n              || [istarget i?86-*-*]\n              || [istarget x86_64-*-*]\n+             || [istarget aarch64*-*-*]\n              || [istarget spu-*-*]\n              || ([istarget arm*-*-*] && [check_effective_target_arm_neon_ok]\n \t\t && [check_effective_target_arm_little_endian]) } {\n@@ -3347,6 +3371,7 @@ proc check_effective_target_vect_unpack { } {\n              || [istarget x86_64-*-*] \n              || [istarget spu-*-*]\n              || [istarget ia64-*-*]\n+             || [istarget aarch64*-*-*]\n              || ([istarget arm*-*-*] && [check_effective_target_arm_neon_ok]\n \t\t && [check_effective_target_arm_little_endian]) } {\n             set et_vect_unpack_saved 1\n@@ -3410,6 +3435,7 @@ proc check_effective_target_vect_hw_misalign { } {\n     } else {\n         set et_vect_hw_misalign_saved 0\n        if { ([istarget x86_64-*-*] \n+\t    || [istarget aarch64*-*-*]\n             || [istarget i?86-*-*]) } {\n           set et_vect_hw_misalign_saved 1\n        }\n@@ -3649,6 +3675,7 @@ proc check_effective_target_vect_short_mult { } {\n \t     || [istarget i?86-*-*]\n \t     || [istarget x86_64-*-*]\n \t     || [istarget powerpc*-*-*]\n+\t     || [istarget aarch64*-*-*]\n \t     || [check_effective_target_arm32]\n \t     || ([istarget mips*-*-*]\n \t\t && [check_effective_target_mips_loongson]) } {\n@@ -3674,6 +3701,7 @@ proc check_effective_target_vect_int_mult { } {\n \t     || [istarget i?86-*-*]\n \t     || [istarget x86_64-*-*]\n \t     || [istarget ia64-*-*]\n+\t     || [istarget aarch64*-*-*]\n \t     || [check_effective_target_arm32] } {\n \t   set et_vect_int_mult_saved 1\n \t}\n@@ -3748,7 +3776,8 @@ foreach N {2 3 4 8} {\n \t\t     && [check_effective_target_vect_extract_even_odd] } {\n \t\t    set et_vect_stridedN_saved 1\n \t\t}\n-\t\tif { [istarget arm*-*-*] && N >= 2 && N <= 4 } {\n+\t\tif { ([istarget arm*-*-*]\n+\t\t      || [istarget aarch64*-*-*]) && N >= 2 && N <= 4 } {\n \t\t    set et_vect_stridedN_saved 1\n \t\t}\n \t    }\n@@ -3980,6 +4009,7 @@ proc check_effective_target_sync_int_long { } {\n         if { [istarget ia64-*-*]\n \t     || [istarget i?86-*-*]\n \t     || [istarget x86_64-*-*]\n+\t     || [istarget aarch64*-*-*]\n \t     || [istarget alpha*-*-*] \n \t     || [istarget arm*-*-linux-*] \n \t     || [istarget bfin*-*linux*]\n@@ -4008,7 +4038,8 @@ proc check_effective_target_sync_char_short { } {\n         set et_sync_char_short_saved 0\n # This is intentionally powerpc but not rs6000, rs6000 doesn't have the\n # load-reserved/store-conditional instructions.\n-        if { [istarget ia64-*-*]\n+        if { [istarget aarch64*-*-*]\n+\t     || [istarget ia64-*-*]\n \t     || [istarget i?86-*-*]\n \t     || [istarget x86_64-*-*]\n \t     || [istarget alpha*-*-*] \n@@ -4733,6 +4764,8 @@ proc check_vect_support_and_set_flags { } {\n         } else {\n             set dg-do-what-default compile\n         }\n+    } elseif [istarget \"aarch64*-*-*\"] {\n+        set dg-do-what-default run\n     } else {\n         return 0\n     }\n@@ -4756,3 +4789,45 @@ proc check_effective_target_ucontext_h { } {\n \t#include <ucontext.h>\n     }]\n }\n+\n+proc check_effective_target_aarch64_tiny { } {\n+    if { [istarget aarch64*-*-*] } {\n+\treturn [check_no_compiler_messages aarch64_tiny object {\n+\t    #ifdef __AARCH64_CMODEL_TINY__\n+\t    int dummy;\n+\t    #else\n+\t    #error target not AArch64 tiny code model\n+\t    #endif\n+\t}]\n+    } else {\n+\treturn 0\n+    }\n+}\n+\n+proc check_effective_target_aarch64_small { } {\n+    if { [istarget aarch64*-*-*] } {\n+\treturn [check_no_compiler_messages aarch64_small object {\n+\t    #ifdef __AARCH64_CMODEL_SMALL__\n+\t    int dummy;\n+\t    #else\n+\t    #error target not AArch64 small code model\n+\t    #endif\n+\t}]\n+    } else {\n+\treturn 0\n+    }\n+}\n+\n+proc check_effective_target_aarch64_large { } {\n+    if { [istarget aarch64*-*-*] } {\n+\treturn [check_no_compiler_messages aarch64_large object {\n+\t    #ifdef __AARCH64_CMODEL_LARGE__\n+\t    int dummy;\n+\t    #else\n+\t    #error target not AArch64 large code model\n+\t    #endif\n+\t}]\n+    } else {\n+\treturn 0\n+    }\n+}"}]}