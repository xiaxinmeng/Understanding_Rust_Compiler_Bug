{"sha": "52ad5601bf56aba4d5da585c6a212ce3f6509af3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTJhZDU2MDFiZjU2YWJhNGQ1ZGE1ODVjNmEyMTJjZTNmNjUwOWFmMw==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2016-01-08T03:58:40Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2016-01-08T03:58:40Z"}, "message": "shrink-wrap: Once more PRs 67778, 68634, and now 68909\n\nIf a candidate PRE cannot get the prologue because a block BB is\nreachable from it, but PRE does not dominate BB, we try again with the\ndominators of PRE.  That \"try again\" needs to again consider BB though,\nwe aren't done with it.\n\n\tPR rtl-optimization/67778\n\tPR rtl-optimization/68634\n\tPR rtl-optimization/68909\n\t* shrink-wrap.c (try_shrink_wrapping): Add comment.  Don't pop\n\tblock from the stack until done with it.  Remove a superfluous\n\tbitmap set.  Remove a superfluous bitmap test.\n\nFrom-SVN: r232148", "tree": {"sha": "86689541fc8ed24ff266c281f8acac6768052b12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86689541fc8ed24ff266c281f8acac6768052b12"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/52ad5601bf56aba4d5da585c6a212ce3f6509af3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52ad5601bf56aba4d5da585c6a212ce3f6509af3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52ad5601bf56aba4d5da585c6a212ce3f6509af3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52ad5601bf56aba4d5da585c6a212ce3f6509af3/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7a127fa7c463b6b7c0285b32bac52bbdfc9a2117", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a127fa7c463b6b7c0285b32bac52bbdfc9a2117", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a127fa7c463b6b7c0285b32bac52bbdfc9a2117"}], "stats": {"total": 32, "additions": 25, "deletions": 7}, "files": [{"sha": "44a2e01c6732fd2029c4b1b7843b04bebb99ae7b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52ad5601bf56aba4d5da585c6a212ce3f6509af3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52ad5601bf56aba4d5da585c6a212ce3f6509af3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=52ad5601bf56aba4d5da585c6a212ce3f6509af3", "patch": "@@ -1,3 +1,12 @@\n+2016-01-08  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\tPR rtl-optimization/67778\n+\tPR rtl-optimization/68634\n+\tPR rtl-optimization/68909\n+\t* shrink-wrap.c (try_shrink_wrapping): Add comment.  Don't pop\n+\tblock from the stack until done with it.  Remove a superfluous\n+\tbitmap set.  Remove a superfluous bitmap test.\n+\n 2016-01-07  Martin Sebor  <msebor@redhat.com>\n \n \tPR c/68966"}, {"sha": "84abd6b783bf6acdad18a0d9f84e361568f679d5", "filename": "gcc/shrink-wrap.c", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52ad5601bf56aba4d5da585c6a212ce3f6509af3/gcc%2Fshrink-wrap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52ad5601bf56aba4d5da585c6a212ce3f6509af3/gcc%2Fshrink-wrap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fshrink-wrap.c?ref=52ad5601bf56aba4d5da585c6a212ce3f6509af3", "patch": "@@ -750,9 +750,21 @@ try_shrink_wrapping (edge *entry_edge, bitmap_head *bb_with,\n \n   /* If we can move PRO back without having to duplicate more blocks, do so.\n      We do this because putting the prologue earlier is better for scheduling.\n+\n      We can move back to a block PRE if every path from PRE will eventually\n      need a prologue, that is, PRO is a post-dominator of PRE.  PRE needs\n-     to dominate every block reachable from itself.  */\n+     to dominate every block reachable from itself.  We keep in BB_TMP a\n+     bitmap of the blocks reachable from PRE that we already found, and in\n+     VEC a stack of those we still need to consider.\n+\n+     Any block reachable from PRE is also reachable from all predecessors\n+     of PRE, so if we find we need to move PRE back further we can leave\n+     everything not considered so far on the stack.  Any block dominated\n+     by PRE is also dominated by all other dominators of PRE, so anything\n+     found good for some PRE does not need to be reconsidered later.\n+\n+     We don't need to update BB_WITH because none of the new blocks found\n+     can jump to a block that does not need the prologue.  */\n \n   if (pro != entry)\n     {\n@@ -775,18 +787,15 @@ try_shrink_wrapping (edge *entry_edge, bitmap_head *bb_with,\n \t  bool ok = true;\n \t  while (!vec.is_empty ())\n \t    {\n-\t      basic_block bb = vec.pop ();\n-\t      bitmap_set_bit (bb_tmp, pre->index);\n-\n-\t      if (!dominated_by_p (CDI_DOMINATORS, bb, pre))\n+\t      if (!dominated_by_p (CDI_DOMINATORS, vec.last (), pre))\n \t\t{\n \t\t  ok = false;\n \t\t  break;\n \t\t}\n \n+\t      basic_block bb = vec.pop ();\n \t      FOR_EACH_EDGE (e, ei, bb->succs)\n-\t\tif (!bitmap_bit_p (bb_with, e->dest->index)\n-\t\t    && bitmap_set_bit (bb_tmp, e->dest->index))\n+\t\tif (bitmap_set_bit (bb_tmp, e->dest->index))\n \t\t  vec.quick_push (e->dest);\n \t    }\n "}]}