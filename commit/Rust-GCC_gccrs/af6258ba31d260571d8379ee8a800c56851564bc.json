{"sha": "af6258ba31d260571d8379ee8a800c56851564bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWY2MjU4YmEzMWQyNjA1NzFkODM3OWVlOGE4MDBjNTY4NTE1NjRiYw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-07-05T10:27:48Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-07-05T10:27:48Z"}, "message": "[multiple changes]\n\n2013-07-05  Arnaud Charlet  <charlet@adacore.com>\n\n\t* gnat_rm.texi: Add missing documentation for pragmas.\n\n2013-07-05  Yannick Moy  <moy@adacore.com>\n\n\t* sem_ch12.adb: Minor comment.\n\nFrom-SVN: r200702", "tree": {"sha": "ecb5cde9d0b4b32be11e3e3b37af98f1e5993837", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ecb5cde9d0b4b32be11e3e3b37af98f1e5993837"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af6258ba31d260571d8379ee8a800c56851564bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af6258ba31d260571d8379ee8a800c56851564bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af6258ba31d260571d8379ee8a800c56851564bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af6258ba31d260571d8379ee8a800c56851564bc/comments", "author": null, "committer": null, "parents": [{"sha": "4d20c9591561bea6f51240d350303169773c2a2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d20c9591561bea6f51240d350303169773c2a2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d20c9591561bea6f51240d350303169773c2a2a"}], "stats": {"total": 71, "additions": 68, "deletions": 3}, "files": [{"sha": "46c2dbebaa5124f73227ea6a606635e3d4322bd2", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af6258ba31d260571d8379ee8a800c56851564bc/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af6258ba31d260571d8379ee8a800c56851564bc/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=af6258ba31d260571d8379ee8a800c56851564bc", "patch": "@@ -1,3 +1,11 @@\n+2013-07-05  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* gnat_rm.texi: Add missing documentation for pragmas.\n+\n+2013-07-05  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_ch12.adb: Minor comment.\n+\n 2013-07-05  Robert Dewar  <dewar@adacore.com>\n \n \t* gnat_rm.texi: Document that -gnatR and -gnatD cannot be used"}, {"sha": "fb7cfa60603878d62188fd6a268aa1d47960d125", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 57, "deletions": 1, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af6258ba31d260571d8379ee8a800c56851564bc/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af6258ba31d260571d8379ee8a800c56851564bc/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=af6258ba31d260571d8379ee8a800c56851564bc", "patch": "@@ -136,9 +136,11 @@ Implementation Defined Pragmas\n * Pragma Debug_Policy::\n * Pragma Default_Storage_Pool::\n * Pragma Detect_Blocking::\n+* Pragma Disable_Atomic_Synchronization::\n * Pragma Dispatching_Domain::\n * Pragma Elaboration_Checks::\n * Pragma Eliminate::\n+* Pragma Enable_Atomic_Synchronization::\n * Pragma Export_Exception::\n * Pragma Export_Function::\n * Pragma Export_Object::\n@@ -943,9 +945,11 @@ consideration, the use of these pragmas should be minimized.\n * Pragma Debug_Policy::\n * Pragma Default_Storage_Pool::\n * Pragma Detect_Blocking::\n+* Pragma Disable_Atomic_Synchronization::\n * Pragma Dispatching_Domain::\n * Pragma Elaboration_Checks::\n * Pragma Eliminate::\n+* Pragma Enable_Atomic_Synchronization::\n * Pragma Export_Exception::\n * Pragma Export_Function::\n * Pragma Export_Object::\n@@ -2334,6 +2338,31 @@ This is a configuration pragma that forces the detection of potentially\n blocking operations within a protected operation, and to raise Program_Error\n if that happens.\n \n+@node Pragma Disable_Atomic_Synchronization\n+@unnumberedsec Pragma Disable_Atomic_Synchronization\n+@cindex Atomic Synchronization\n+@findex Disable_Atomic_Synchronization\n+@noindent\n+Syntax:\n+\n+@smallexample @c ada\n+pragma Disable_Atomic_Synchronization [(Entity)];\n+@end smallexample\n+\n+@noindent\n+Ada requires that accesses (reads or writes) of an atomic variable be\n+regarded as synchronization points in the case of multiple tasks.\n+Particularly in the case of multi-processors this may require special\n+handling, e.g. the generation of memory barriers. This capability may\n+be turned off using this pragma in cases where it is known not to be\n+required.\n+\n+The placement and scope rules for this pragma are the same as those\n+for @code{pragma Suppress}. In particular it can be used as a\n+configuration  pragma, or in a declaration sequence where it applies\n+till the end of the scope. If an @code{Entity} argument is present,\n+the action applies only to that entity.\n+\n @node Pragma Dispatching_Domain\n @unnumberedsec Pragma Dispatching_Domain\n @findex Dispatching_Domain\n@@ -2451,6 +2480,33 @@ operation. In this case all the subprograms to which the given operation can\n dispatch are considered to be unused (are never called as a result of a direct\n or a dispatching call).\n \n+@node Pragma Enable_Atomic_Synchronization\n+@unnumberedsec Pragma Enable_Atomic_Synchronization\n+@cindex Atomic Synchronization\n+@findex Enable_Atomic_Synchronization\n+@noindent\n+Syntax:\n+\n+@smallexample @c ada\n+pragma Enable_Atomic_Synchronization [(Entity)];\n+@end smallexample\n+\n+@noindent\n+Ada requires that accesses (reads or writes) of an atomic variable be\n+regarded as synchronization points in the case of multiple tasks.\n+Particularly in the case of multi-processors this may require special\n+handling, e.g. the generation of memory barriers. This synchronization\n+is performed by default, but can be turned off using\n+@code{pragma Disable_Atomic_Synchronization}. The\n+@code{Enable_Atomic_Synchronization} pragma can be used to turn\n+it back on.\n+\n+The placement and scope rules for this pragma are the same as those\n+for @code{pragma Unsuppress}. In particular it can be used as a\n+configuration  pragma, or in a declaration sequence where it applies\n+till the end of the scope. If an @code{Entity} argument is present,\n+the action applies only to that entity.\n+\n @node Pragma Export_Exception\n @unnumberedsec Pragma Export_Exception\n @cindex OpenVMS\n@@ -4332,7 +4388,7 @@ pragma No_Run_Time;\n This is an obsolete configuration pragma that historically was used to\n setup what is now called the \"zero footprint\" library. It causes any\n library units outside this basic library to be ignored. The use of\n-this pragma has been superceded by the general configuration run-time\n+this pragma has been superceded by the general configurable run-time\n capability of @code{GNAT} where the compiler takes into account whatever\n units happen to be accessible in the library.\n "}, {"sha": "ed381b3ce5cf167d93292b8c2cce4f299b878b08", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af6258ba31d260571d8379ee8a800c56851564bc/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af6258ba31d260571d8379ee8a800c56851564bc/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=af6258ba31d260571d8379ee8a800c56851564bc", "patch": "@@ -4375,8 +4375,9 @@ package body Sem_Ch12 is\n         and then (Operating_Mode = Generate_Code\n                    or else (Operating_Mode = Check_Semantics\n                              and then ASIS_Mode))\n-        --  The following line definitely requires comments, why do we\n-        --  test Expander_Active and not Full_Expander_Active here ???\n+        --  The body is needed when generating code (full expansion), in ASIS\n+        --  mode for other tools, and in SPARK mode (special expansion) for\n+        --  formal verification of the body itself.\n         and then (Expander_Active or ASIS_Mode)\n         and then not ABE_Is_Certain (N)\n         and then not Is_Eliminated (Subp)"}]}