{"sha": "f67341b6248741fa1d7ccc508c2692988b42c576", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjY3MzQxYjYyNDg3NDFmYTFkN2NjYzUwOGMyNjkyOTg4YjQyYzU3Ng==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2014-07-20T20:26:20Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2014-07-20T20:26:20Z"}, "message": "compiler: If a variable that is only set, give not used error.\n\nFrom-SVN: r212876", "tree": {"sha": "302a17320441e38d6b754f21bab780a10e16086e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/302a17320441e38d6b754f21bab780a10e16086e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f67341b6248741fa1d7ccc508c2692988b42c576", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f67341b6248741fa1d7ccc508c2692988b42c576", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f67341b6248741fa1d7ccc508c2692988b42c576", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f67341b6248741fa1d7ccc508c2692988b42c576/comments", "author": null, "committer": null, "parents": [{"sha": "dbb400d7076fb71c447a342f561aecbf57dd87ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbb400d7076fb71c447a342f561aecbf57dd87ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbb400d7076fb71c447a342f561aecbf57dd87ad"}], "stats": {"total": 30, "additions": 22, "deletions": 8}, "files": [{"sha": "90f1a3405c116bee73d4879d5c3b2fcb047d1e72", "filename": "gcc/go/gofrontend/parse.cc", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f67341b6248741fa1d7ccc508c2692988b42c576/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f67341b6248741fa1d7ccc508c2692988b42c576/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fparse.cc?ref=f67341b6248741fa1d7ccc508c2692988b42c576", "patch": "@@ -2115,8 +2115,8 @@ Parse::simple_var_decl_or_assignment(const std::string& name,\n \t  for (Typed_identifier_list::const_iterator p = til.begin();\n \t       p != til.end();\n \t       ++p)\n-\t    exprs->push_back(this->id_to_expression(p->name(),\n-\t\t\t\t\t\t    p->location()));\n+\t    exprs->push_back(this->id_to_expression(p->name(), p->location(),\n+\t\t\t\t\t\t    true));\n \n \t  Expression_list* more_exprs =\n \t    this->expression_list(NULL, true, may_be_composite_lit);\n@@ -2509,7 +2509,10 @@ Parse::operand(bool may_be_sink, bool* is_parenthesized)\n \t    }\n \t  case Named_object::NAMED_OBJECT_VAR:\n \t  case Named_object::NAMED_OBJECT_RESULT_VAR:\n-\t    this->mark_var_used(named_object);\n+\t    // Any left-hand-side can be a sink, so if this can not be\n+\t    // a sink, then it must be a use of the variable.\n+\t    if (!may_be_sink)\n+\t      this->mark_var_used(named_object);\n \t    return Expression::make_var_reference(named_object, location);\n \t  case Named_object::NAMED_OBJECT_SINK:\n \t    if (may_be_sink)\n@@ -2724,7 +2727,7 @@ Parse::composite_lit(Type* type, int depth, Location location)\n \t      Gogo* gogo = this->gogo_;\n \t      val = this->id_to_expression(gogo->pack_hidden_name(identifier,\n \t\t\t\t\t\t\t\t  is_exported),\n-\t\t\t\t\t   location);\n+\t\t\t\t\t   location, false);\n \t      is_name = true;\n \t    }\n \t  else\n@@ -3241,7 +3244,8 @@ Parse::call(Expression* func)\n // Return an expression for a single unqualified identifier.\n \n Expression*\n-Parse::id_to_expression(const std::string& name, Location location)\n+Parse::id_to_expression(const std::string& name, Location location,\n+\t\t\tbool is_lhs)\n {\n   Named_object* in_function;\n   Named_object* named_object = this->gogo_->lookup(name, &in_function);\n@@ -3260,7 +3264,8 @@ Parse::id_to_expression(const std::string& name, Location location)\n       return Expression::make_const_reference(named_object, location);\n     case Named_object::NAMED_OBJECT_VAR:\n     case Named_object::NAMED_OBJECT_RESULT_VAR:\n-      this->mark_var_used(named_object);\n+      if (!is_lhs)\n+\tthis->mark_var_used(named_object);\n       return Expression::make_var_reference(named_object, location);\n     case Named_object::NAMED_OBJECT_SINK:\n       return Expression::make_sink(location);\n@@ -5025,7 +5030,7 @@ Parse::send_or_recv_stmt(bool* is_send, Expression** channel, Expression** val,\n \n \t  *val = this->id_to_expression(gogo->pack_hidden_name(recv_var,\n \t\t\t\t\t\t\t       is_rv_exported),\n-\t\t\t\t\trecv_var_loc);\n+\t\t\t\t\trecv_var_loc, true);\n \t  saw_comma = true;\n \t}\n       else\n@@ -5727,6 +5732,13 @@ Parse::verify_not_sink(Expression* expr)\n       error_at(expr->location(), \"cannot use _ as value\");\n       expr = Expression::make_error(expr->location());\n     }\n+\n+  // If this can not be a sink, and it is a variable, then we are\n+  // using the variable, not just assigning to it.\n+  Var_expression* ve = expr->var_expression();\n+  if (ve != NULL)\n+    this->mark_var_used(ve->named_object());\n+\n   return expr;\n }\n "}, {"sha": "3a7bbd53700775dd467a3c9ab902b7980ff2ad48", "filename": "gcc/go/gofrontend/parse.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f67341b6248741fa1d7ccc508c2692988b42c576/gcc%2Fgo%2Fgofrontend%2Fparse.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f67341b6248741fa1d7ccc508c2692988b42c576/gcc%2Fgo%2Fgofrontend%2Fparse.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fparse.h?ref=f67341b6248741fa1d7ccc508c2692988b42c576", "patch": "@@ -236,7 +236,7 @@ class Parse\n \t\t\t bool* is_type_switch, bool* is_parenthesized);\n   Type* reassociate_chan_direction(Channel_type*, Location);\n   Expression* qualified_expr(Expression*, Location);\n-  Expression* id_to_expression(const std::string&, Location);\n+  Expression* id_to_expression(const std::string&, Location, bool);\n   void statement(Label*);\n   bool statement_may_start_here();\n   void labeled_stmt(const std::string&, Location);"}, {"sha": "04f5321b73f21d2894d01cc5ec77ce9e74569a91", "filename": "gcc/testsuite/go.test/test/shift1.go", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f67341b6248741fa1d7ccc508c2692988b42c576/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fshift1.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f67341b6248741fa1d7ccc508c2692988b42c576/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fshift1.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fshift1.go?ref=f67341b6248741fa1d7ccc508c2692988b42c576", "patch": "@@ -238,4 +238,6 @@ func _() {\n \tz = (1. << s) << (1 << s)    // ERROR \"non-integer|type complex128\"\n \tz = (1. << s) << (1. << s)   // ERROR \"non-integer|type complex128\"\n \tz = (1.1 << s) << (1.1 << s) // ERROR \"invalid|truncated|complex128\"\n+\n+\t_, _, _ = x, y, z\n }"}]}