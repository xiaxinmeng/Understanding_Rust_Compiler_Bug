{"sha": "e3aafbad8771a52e23ca48f58c7d2ad35381be31", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTNhYWZiYWQ4NzcxYTUyZTIzY2E0OGY1OGM3ZDJhZDM1MzgxYmUzMQ==", "commit": {"author": {"name": "Stan Shebs", "email": "shebs@apple.com", "date": "2001-09-19T23:58:10Z"}, "committer": {"name": "Stan Shebs", "email": "shebs@gcc.gnu.org", "date": "2001-09-19T23:58:10Z"}, "message": "alias.c: Fix typos in comments.\n\n        * alias.c: Fix typos in comments.\n        * sched-rgn.c (init_ready_list): Ditto.\n        * unwind-dw2.c (uw_frame_state_for): Ditto.\n        * unwind-dw2-fde.c (_Unwind_Find_FDE): Ditto.\n        * unwind.inc (_Unwind_RaiseException_Phase2): Ditto.\n        * config/rs6000/rs6000.c (rs6000_adjust_priority): Ditto.\n\nFrom-SVN: r45698", "tree": {"sha": "f8e80416030f54cd9849970e96b00acdff22f9e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8e80416030f54cd9849970e96b00acdff22f9e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3aafbad8771a52e23ca48f58c7d2ad35381be31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3aafbad8771a52e23ca48f58c7d2ad35381be31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3aafbad8771a52e23ca48f58c7d2ad35381be31", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3aafbad8771a52e23ca48f58c7d2ad35381be31/comments", "author": null, "committer": null, "parents": [{"sha": "3d9339a9ca5de0b96db7c02b23b0b94656b9e1bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d9339a9ca5de0b96db7c02b23b0b94656b9e1bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d9339a9ca5de0b96db7c02b23b0b94656b9e1bf"}], "stats": {"total": 25, "additions": 17, "deletions": 8}, "files": [{"sha": "101d40a0d52615954891985293f9e063d41ebb71", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3aafbad8771a52e23ca48f58c7d2ad35381be31/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3aafbad8771a52e23ca48f58c7d2ad35381be31/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e3aafbad8771a52e23ca48f58c7d2ad35381be31", "patch": "@@ -1,3 +1,12 @@\n+2001-09-19  Stan Shebs  <shebs@apple.com>\n+\n+\t* alias.c: Fix typos in comments.\n+\t* sched-rgn.c (init_ready_list): Ditto.\n+\t* unwind-dw2.c (uw_frame_state_for): Ditto.\n+\t* unwind-dw2-fde.c (_Unwind_Find_FDE): Ditto.\n+\t* unwind.inc (_Unwind_RaiseException_Phase2): Ditto.\n+\t* config/rs6000/rs6000.c (rs6000_adjust_priority): Ditto.\n+\n 2001-09-19  Richard Henderson  <rth@redhat.com>\n \n \t* cfg.c (force_nonfallthru_and_redirect): Handle redirecting"}, {"sha": "abb593a6d9de87e4b7966a82bdf715af8efa7d3a", "filename": "gcc/alias.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3aafbad8771a52e23ca48f58c7d2ad35381be31/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3aafbad8771a52e23ca48f58c7d2ad35381be31/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=e3aafbad8771a52e23ca48f58c7d2ad35381be31", "patch": "@@ -59,7 +59,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \n    To see whether two alias sets can point to the same memory, we must\n    see if either alias set is a subset of the other. We need not trace\n-   past immediate decendents, however, since we propagate all\n+   past immediate descendents, however, since we propagate all\n    grandchildren up one level.\n \n    Alias set zero is implicitly a superset of all other alias sets.\n@@ -72,7 +72,7 @@ typedef struct alias_set_entry\n   HOST_WIDE_INT alias_set;\n \n   /* The children of the alias set.  These are not just the immediate\n-     children, but, in fact, all decendents.  So, if we have:\n+     children, but, in fact, all descendents.  So, if we have:\n \n        struct T { struct S s; float f; } \n "}, {"sha": "3cbb3aab2333e4d704d6265bd08a32f708b961bd", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3aafbad8771a52e23ca48f58c7d2ad35381be31/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3aafbad8771a52e23ca48f58c7d2ad35381be31/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=e3aafbad8771a52e23ca48f58c7d2ad35381be31", "patch": "@@ -7986,10 +7986,10 @@ rs6000_adjust_priority (insn, priority)\n      rtx insn ATTRIBUTE_UNUSED;\n      int priority;\n {\n-  /* On machines (like the 750) which have asymetric integer units, where one\n+  /* On machines (like the 750) which have asymmetric integer units, where one\n      integer unit can do multiply and divides and the other can't, reduce the\n      priority of multiply/divide so it is scheduled before other integer\n-     operationss.  */\n+     operations.  */\n \n #if 0\n   if (! INSN_P (insn))"}, {"sha": "7a9f9f7edf9bfd82f73c1d4ebeecd5df0f733b22", "filename": "gcc/sched-rgn.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3aafbad8771a52e23ca48f58c7d2ad35381be31/gcc%2Fsched-rgn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3aafbad8771a52e23ca48f58c7d2ad35381be31/gcc%2Fsched-rgn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-rgn.c?ref=e3aafbad8771a52e23ca48f58c7d2ad35381be31", "patch": "@@ -2148,7 +2148,7 @@ init_ready_list (ready)\n \t      {\n \t\trtx next;\n \n-\t\t/* Note that we havn't squirrled away the notes for\n+\t\t/* Note that we havn't squirreled away the notes for\n \t\t   blocks other than the current.  So if this is a\n \t\t   speculative insn, NEXT might otherwise be a note.  */\n \t\tnext = next_nonnote_insn (insn);"}, {"sha": "f2c3425d64fda29bc24a7edce9b9d442573d419a", "filename": "gcc/unwind-dw2-fde.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3aafbad8771a52e23ca48f58c7d2ad35381be31/gcc%2Funwind-dw2-fde.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3aafbad8771a52e23ca48f58c7d2ad35381be31/gcc%2Funwind-dw2-fde.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funwind-dw2-fde.c?ref=e3aafbad8771a52e23ca48f58c7d2ad35381be31", "patch": "@@ -942,7 +942,7 @@ _Unwind_Find_FDE (void *pc, struct dwarf_eh_bases *bases)\n   __gthread_mutex_lock (&object_mutex);\n \n   /* Linear search through the classified objects, to find the one\n-     containing the pc.  Note that pc_begin is sorted decending, and\n+     containing the pc.  Note that pc_begin is sorted descending, and\n      we expect objects to be non-overlapping.  */\n   for (ob = seen_objects; ob; ob = ob->next)\n     if (pc >= ob->pc_begin)"}, {"sha": "e013ce67317290cf6c0da028dbf2c218242fe167", "filename": "gcc/unwind-dw2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3aafbad8771a52e23ca48f58c7d2ad35381be31/gcc%2Funwind-dw2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3aafbad8771a52e23ca48f58c7d2ad35381be31/gcc%2Funwind-dw2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funwind-dw2.c?ref=e3aafbad8771a52e23ca48f58c7d2ad35381be31", "patch": "@@ -892,7 +892,7 @@ uw_frame_state_for (struct _Unwind_Context *context, _Unwind_FrameState *fs)\n     {\n       /* Couldn't find frame unwind info for this function.  Try a\n \t target-specific fallback mechanism.  This will necessarily\n-\t not profide a personality routine or LSDA.  */\n+\t not provide a personality routine or LSDA.  */\n #ifdef MD_FALLBACK_FRAME_STATE_FOR\n       MD_FALLBACK_FRAME_STATE_FOR (context, fs, success);\n       return _URC_END_OF_STACK;"}, {"sha": "f00441ea02430c280ac9439c39883990e7b17d01", "filename": "gcc/unwind.inc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3aafbad8771a52e23ca48f58c7d2ad35381be31/gcc%2Funwind.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3aafbad8771a52e23ca48f58c7d2ad35381be31/gcc%2Funwind.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funwind.inc?ref=e3aafbad8771a52e23ca48f58c7d2ad35381be31", "patch": "@@ -47,7 +47,7 @@ _Unwind_RaiseException_Phase2(struct _Unwind_Exception *exc,\n \t\t       ? _UA_HANDLER_FRAME : 0);\n \n       if (code != _URC_NO_REASON)\n-\t/* Some error encountered.  Ususally the unwinder doesn't\n+\t/* Some error encountered.  Usually the unwinder doesn't\n \t   diagnose these and merely crashes.  */\n \treturn _URC_FATAL_PHASE2_ERROR;\n "}]}