{"sha": "3f12cd9b3cfa9d4011eda8a9b469107a59ffe6e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2YxMmNkOWIzY2ZhOWQ0MDExZWRhOGE5YjQ2OTEwN2E1OWZmZTZlMA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-01-26T00:09:47Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-01-26T00:09:47Z"}, "message": "pa-protos.h: Remove the prototype for hppa_builtin_saveregs.\n\n\t* config/pa/pa-protos.h: Remove the prototype for\n\thppa_builtin_saveregs.  Add a prototype for\n\tpa_return_in_memory.\n\t* config/pa/pa.c (TARGET_PROMOTE_FUNCTION_RETURN): New.\n\t(TARGET_PROMOTE_PROTOTYPES): Likewise.\n\t(TARGET_STRUCT_VALUE_RTX): Likewise.\n\t(TARGET_RETURN_IN_MEMORY): Likewise.\n\t(TARGET_EXPAND_BUILTIN_SAVEREGS): Likewise.\n\t(pa_struct_value_rtx): Likewise.\n\t(pa_return_in_memory): Likewise.\n\t* config/pa/pa.h (STRUCT_VALUE_REGNUM): Rename to\n\tPA_STRUCT_VALUE_REGNUM.\n\t(INIT_CUMULATIVE_ARGS): Use pa_return_in_memory.\n\t(EXPAND_BUILTIN_SAVEREGS): Remove.\n\t(PROMOTE_PROTOTYPES): Likewise.\n\t(PROMOTE_FUNCTION_RETURN): Likewise.\n\nFrom-SVN: r76600", "tree": {"sha": "12ffb8fbb5d5960c65feb60cbb87a19c6f75430f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/12ffb8fbb5d5960c65feb60cbb87a19c6f75430f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f12cd9b3cfa9d4011eda8a9b469107a59ffe6e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f12cd9b3cfa9d4011eda8a9b469107a59ffe6e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f12cd9b3cfa9d4011eda8a9b469107a59ffe6e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f12cd9b3cfa9d4011eda8a9b469107a59ffe6e0/comments", "author": null, "committer": null, "parents": [{"sha": "f289e226f1468a16627cef00b4678259c7a8d653", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f289e226f1468a16627cef00b4678259c7a8d653", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f289e226f1468a16627cef00b4678259c7a8d653"}], "stats": {"total": 91, "additions": 62, "deletions": 29}, "files": [{"sha": "5d2e8167f2d26f14b8b01e2377f99faebf39f30c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f12cd9b3cfa9d4011eda8a9b469107a59ffe6e0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f12cd9b3cfa9d4011eda8a9b469107a59ffe6e0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3f12cd9b3cfa9d4011eda8a9b469107a59ffe6e0", "patch": "@@ -1,3 +1,22 @@\n+2004-01-25  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/pa/pa-protos.h: Remove the prototype for\n+\thppa_builtin_saveregs.  Add a prototype for\n+\tpa_return_in_memory.\n+\t* config/pa/pa.c (TARGET_PROMOTE_FUNCTION_RETURN): New.\n+\t(TARGET_PROMOTE_PROTOTYPES): Likewise.\n+\t(TARGET_STRUCT_VALUE_RTX): Likewise.\n+\t(TARGET_RETURN_IN_MEMORY): Likewise.\n+\t(TARGET_EXPAND_BUILTIN_SAVEREGS): Likewise.\n+\t(pa_struct_value_rtx): Likewise.\n+\t(pa_return_in_memory): Likewise.\n+\t* config/pa/pa.h (STRUCT_VALUE_REGNUM): Rename to\n+\tPA_STRUCT_VALUE_REGNUM.\n+\t(INIT_CUMULATIVE_ARGS): Use pa_return_in_memory.\n+\t(EXPAND_BUILTIN_SAVEREGS): Remove.\n+\t(PROMOTE_PROTOTYPES): Likewise.\n+\t(PROMOTE_FUNCTION_RETURN): Likewise.\n+\n 2004-01-25  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/vax/vax.c (TARGET_PROMOTE_PROTOTYPES): New."}, {"sha": "5bc5a6b653a3886377092b778f5776f3fa2ee348", "filename": "gcc/config/pa/pa-protos.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f12cd9b3cfa9d4011eda8a9b469107a59ffe6e0/gcc%2Fconfig%2Fpa%2Fpa-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f12cd9b3cfa9d4011eda8a9b469107a59ffe6e0/gcc%2Fconfig%2Fpa%2Fpa-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-protos.h?ref=3f12cd9b3cfa9d4011eda8a9b469107a59ffe6e0", "patch": "@@ -133,8 +133,6 @@ extern int insn_refs_are_delayed (rtx);\n /* Prototype function used in macro CONST_OK_FOR_LETTER_P.  */\n extern int zdepi_cint_p (unsigned HOST_WIDE_INT);\n \n-extern struct rtx_def *hppa_builtin_saveregs (void);\n-\n extern void override_options (void);\n extern void output_ascii (FILE *, const char *, int);\n extern HOST_WIDE_INT compute_frame_size (HOST_WIDE_INT, int *);\n@@ -164,4 +162,5 @@ extern rtx function_value (tree, tree);\n extern int function_arg_partial_nregs (CUMULATIVE_ARGS *,\n \t\t\t\t       enum machine_mode,\n \t\t\t\t       tree, int);\n+extern bool pa_return_in_memory (tree, tree);\n #endif /* TREE_CODE */"}, {"sha": "9328531447e92c1b2e9ea5d4d8a27c9dbbba1075", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 40, "deletions": 2, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f12cd9b3cfa9d4011eda8a9b469107a59ffe6e0/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f12cd9b3cfa9d4011eda8a9b469107a59ffe6e0/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=3f12cd9b3cfa9d4011eda8a9b469107a59ffe6e0", "patch": "@@ -131,6 +131,7 @@ static void pa_asm_out_constructor (rtx, int);\n static void pa_asm_out_destructor (rtx, int);\n #endif\n static void pa_init_builtins (void);\n+static rtx hppa_builtin_saveregs (void);\n static void copy_fp_args (rtx) ATTRIBUTE_UNUSED;\n static int length_fp_args (rtx) ATTRIBUTE_UNUSED;\n static struct deferred_plabel *get_plabel (const char *)\n@@ -148,6 +149,7 @@ static void output_deferred_plabels (void);\n #ifdef HPUX_LONG_DOUBLE_LIBRARY\n static void pa_hpux_init_libfuncs (void);\n #endif\n+static rtx pa_struct_value_rtx (tree, int);\n \n /* Save the operands last given to a compare for use when we\n    generate a scc or bcc insn.  */\n@@ -261,6 +263,19 @@ static size_t n_deferred_plabels = 0;\n #define TARGET_INIT_LIBFUNCS pa_hpux_init_libfuncs\n #endif\n \n+#undef TARGET_PROMOTE_FUNCTION_RETURN\n+#define TARGET_PROMOTE_FUNCTION_RETURN hook_bool_tree_true\n+#undef TARGET_PROMOTE_PROTOTYPES\n+#define TARGET_PROMOTE_PROTOTYPES hook_bool_tree_true\n+\n+#undef TARGET_STRUCT_VALUE_RTX\n+#define TARGET_STRUCT_VALUE_RTX pa_struct_value_rtx\n+#undef TARGET_RETURN_IN_MEMORY\n+#define TARGET_RETURN_IN_MEMORY pa_return_in_memory\n+\n+#undef TARGET_EXPAND_BUILTIN_SAVEREGS\n+#define TARGET_EXPAND_BUILTIN_SAVEREGS hppa_builtin_saveregs\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n void\n@@ -5836,7 +5851,7 @@ function_arg_padding (enum machine_mode mode, tree type)\n    to determine if stdargs or varargs is used and fill in an initial\n    va_list.  A pointer to this constructor is returned.  */\n \n-struct rtx_def *\n+static rtx\n hppa_builtin_saveregs (void)\n {\n   rtx offset, dest;\n@@ -8748,7 +8763,7 @@ insn_refs_are_delayed (rtx insn)\n    the mode is SF or DF. Then the value is returned in fr4 (32).\n \n    This must perform the same promotions as PROMOTE_MODE, else\n-   PROMOTE_FUNCTION_RETURN will not work correctly.\n+   TARGET_PROMOTE_FUNCTION_RETURN will not work correctly.\n \n    Small structures must be returned in a PARALLEL on PA64 in order\n    to match the HP Compiler ABI.  */\n@@ -9077,4 +9092,27 @@ pa_globalize_label (FILE *stream, const char *name)\n     fputs (\",DATA\\n\", stream);\n   }\n }\n+\n+static rtx\n+pa_struct_value_rtx (tree fntype ATTRIBUTE_UNUSED,\n+\t\t     int incoming ATTRIBUTE_UNUSED)\n+{\n+  return gen_rtx_REG (Pmode, PA_STRUCT_VALUE_REGNUM);\n+}\n+\n+bool\n+pa_return_in_memory (tree type, tree fntype ATTRIBUTE_UNUSED)\n+{\n+  /* SOM ABI says that objects larger than 64 bits are returned in memory.\n+     PA64 ABI says that objects larger than 128 bits are returned in memory.\n+     Note, int_size_in_bytes can return -1 if the size of the object is\n+     variable or larger than the maximum value that can be expressed as\n+     a HOST_WIDE_INT.   It can also return zero for an empty type.  The\n+     simplest way to handle variable and empty types is to pass them in\n+     memory.  This avoids problems in defining the boundaries of argument\n+     slots, allocating registers, etc.  */\n+  return (int_size_in_bytes (type) > (TARGET_64BIT ? 16 : 8)\n+\t  || int_size_in_bytes (type) <= 0);\n+}\n+\n #include \"gt-pa.h\""}, {"sha": "95fb2f2caa24116be74a3dc95721e3339529f899", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 2, "deletions": 25, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f12cd9b3cfa9d4011eda8a9b469107a59ffe6e0/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f12cd9b3cfa9d4011eda8a9b469107a59ffe6e0/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=3f12cd9b3cfa9d4011eda8a9b469107a59ffe6e0", "patch": "@@ -554,21 +554,9 @@ extern struct rtx_def *hppa_pic_save_rtx (void);\n \n #define DEFAULT_PCC_STRUCT_RETURN 0\n \n-/* SOM ABI says that objects larger than 64 bits are returned in memory.\n-   PA64 ABI says that objects larger than 128 bits are returned in memory.\n-   Note, int_size_in_bytes can return -1 if the size of the object is\n-   variable or larger than the maximum value that can be expressed as\n-   a HOST_WIDE_INT.   It can also return zero for an empty type.  The\n-   simplest way to handle variable and empty types is to pass them in\n-   memory.  This avoids problems in defining the boundaries of argument\n-   slots, allocating registers, etc.  */\n-#define RETURN_IN_MEMORY(TYPE)\t\\\n-  (int_size_in_bytes (TYPE) > (TARGET_64BIT ? 16 : 8)\t\\\n-   || int_size_in_bytes (TYPE) <= 0)\n-\n /* Register in which address to store a structure value\n    is passed to a function.  */\n-#define STRUCT_VALUE_REGNUM 28\n+#define PA_STRUCT_VALUE_REGNUM 28\n \n /* Describe how we implement __builtin_eh_return.  */\n #define EH_RETURN_DATA_REGNO(N)\t\\\n@@ -804,7 +792,7 @@ struct hppa_args {int words, nargs_prototype, incoming, indirect; };\n   (CUM).nargs_prototype = (FNTYPE && TYPE_ARG_TYPES (FNTYPE)\t\t\\\n \t\t\t   ? (list_length (TYPE_ARG_TYPES (FNTYPE)) - 1\t\\\n \t\t\t      + (TYPE_MODE (TREE_TYPE (FNTYPE)) == BLKmode \\\n-\t\t\t\t || RETURN_IN_MEMORY (TREE_TYPE (FNTYPE)))) \\\n+\t\t\t\t || pa_return_in_memory (TREE_TYPE (FNTYPE), 0))) \\\n \t\t\t   : 0)\n \n \n@@ -1153,13 +1141,6 @@ extern int may_call_alloca;\n #define TRAMPOLINE_ADJUST_ADDRESS(ADDR) \\\n   if (!TARGET_64BIT) (ADDR) = memory_address (Pmode, plus_constant ((ADDR), 46))\n \n-/* Emit code for a call to builtin_saveregs.  We must emit USE insns which\n-   reference the 4 integer arg registers and 4 fp arg registers.\n-   Ordinarily they are not call used registers, but they are for\n-   _builtin_saveregs, so we must make this explicit.  */\n-\n-#define EXPAND_BUILTIN_SAVEREGS() hppa_builtin_saveregs ()\n-\n /* Implement `va_start' for varargs and stdarg.  */\n \n #define EXPAND_BUILTIN_VA_START(valist, nextarg) \\\n@@ -1734,10 +1715,6 @@ do { \t\t\t\t\t\t\t\t\t\\\n    is done just by pretending it is already truncated.  */\n #define TRULY_NOOP_TRUNCATION(OUTPREC, INPREC) 1\n \n-/* When a prototype says `char' or `short', really pass an `int'.  */\n-#define PROMOTE_PROTOTYPES 1\n-#define PROMOTE_FUNCTION_RETURN 1\n-\n /* Specify the machine mode that pointers have.\n    After generation of rtl, the compiler makes no further distinction\n    between pointers and any other objects of this machine mode.  */"}]}