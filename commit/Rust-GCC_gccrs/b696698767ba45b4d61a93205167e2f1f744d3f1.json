{"sha": "b696698767ba45b4d61a93205167e2f1f744d3f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjY5NjY5ODc2N2JhNDViNGQ2MWE5MzIwNTE2N2UyZjFmNzQ0ZDNmMQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-04-06T17:30:53Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-04-06T17:30:53Z"}, "message": "libstdc++: Make string_view::copy usable in constant expressions (PR 94498)\n\n\tPR libstdc++/94498\n\t* include/bits/char_traits.h (__gnu_cxx::char_traits::move): Make it\n\tusable in constant expressions for C++20.\n\t(__gnu_cxx::char_traits::copy, __gnu_cxx::char_traits::assign): Add\n\t_GLIBCXX20_CONSTEXPR.\n\t(std::char_traits<char>, std::char_traits<wchar_t>)\n\t(std::char_traits<char8_t>): Make move, copy and assign usable in\n\tconstant expressions for C++20.\n\t(std::char_traits<char16_t>, std::char_traits<char32_t>): Make move\n\tand copy usable in constant expressions for C++20.\n\t* include/std/string_view (basic_string_view::copy): Add\n\t_GLIBCXX20_CONSTEXPR.\n\t* testsuite/21_strings/basic_string_view/operations/copy/char/\n\tconstexpr.cc: New test.\n\t* testsuite/21_strings/basic_string_view/operations/copy/wchar_t/\n\tconstexpr.cc: New test.", "tree": {"sha": "068e11fdb6ef1ff4afee270cb736915edf46b344", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/068e11fdb6ef1ff4afee270cb736915edf46b344"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b696698767ba45b4d61a93205167e2f1f744d3f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b696698767ba45b4d61a93205167e2f1f744d3f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b696698767ba45b4d61a93205167e2f1f744d3f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b696698767ba45b4d61a93205167e2f1f744d3f1/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f84aded848f6fdd2704c9376263c6d1aee6bb0ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f84aded848f6fdd2704c9376263c6d1aee6bb0ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f84aded848f6fdd2704c9376263c6d1aee6bb0ca"}], "stats": {"total": 185, "additions": 167, "deletions": 18}, "files": [{"sha": "4d7b57801897294b4b796f634b8b4afa88a41df0", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b696698767ba45b4d61a93205167e2f1f744d3f1/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b696698767ba45b4d61a93205167e2f1f744d3f1/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b696698767ba45b4d61a93205167e2f1f744d3f1", "patch": "@@ -1,3 +1,22 @@\n+2020-04-06  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/94498\n+\t* include/bits/char_traits.h (__gnu_cxx::char_traits::move): Make it\n+\tusable in constant expressions for C++20.\n+\t(__gnu_cxx::char_traits::copy, __gnu_cxx::char_traits::assign): Add\n+\t_GLIBCXX20_CONSTEXPR.\n+\t(std::char_traits<char>, std::char_traits<wchar_t>)\n+\t(std::char_traits<char8_t>): Make move, copy and assign usable in\n+\tconstant expressions for C++20.\n+\t(std::char_traits<char16_t>, std::char_traits<char32_t>): Make move\n+\tand copy usable in constant expressions for C++20.\n+\t* include/std/string_view (basic_string_view::copy): Add\n+\t_GLIBCXX20_CONSTEXPR.\n+\t* testsuite/21_strings/basic_string_view/operations/copy/char/\n+\tconstexpr.cc: New test.\n+\t* testsuite/21_strings/basic_string_view/operations/copy/wchar_t/\n+\tconstexpr.cc: New test.\n+\n 2020-04-05  Gerald Pfeifer  <gerald@pfeifer.com>\n \n \t* doc/xml/manual/appendix_contributing.xml: Refer to Git"}, {"sha": "65031d3ac8330381f146aa798e8a78a9e166e0f7", "filename": "libstdc++-v3/include/bits/char_traits.h", "status": "modified", "additions": 83, "deletions": 18, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b696698767ba45b4d61a93205167e2f1f744d3f1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b696698767ba45b4d61a93205167e2f1f744d3f1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h?ref=b696698767ba45b4d61a93205167e2f1f744d3f1", "patch": "@@ -113,13 +113,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX14_CONSTEXPR const char_type*\n       find(const char_type* __s, std::size_t __n, const char_type& __a);\n \n-      static char_type*\n+      static _GLIBCXX20_CONSTEXPR char_type*\n       move(char_type* __s1, const char_type* __s2, std::size_t __n);\n \n-      static char_type*\n+      static _GLIBCXX20_CONSTEXPR char_type*\n       copy(char_type* __s1, const char_type* __s2, std::size_t __n);\n \n-      static char_type*\n+      static _GLIBCXX20_CONSTEXPR char_type*\n       assign(char_type* __s, std::size_t __n, char_type __a);\n \n       static _GLIBCXX_CONSTEXPR char_type\n@@ -179,17 +179,29 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _CharT>\n+    _GLIBCXX20_CONSTEXPR\n     typename char_traits<_CharT>::char_type*\n     char_traits<_CharT>::\n     move(char_type* __s1, const char_type* __s2, std::size_t __n)\n     {\n       if (__n == 0)\n \treturn __s1;\n+#ifdef __cpp_lib_is_constant_evaluated\n+      if (std::is_constant_evaluated())\n+\t{\n+\t  if (__s1 > __s2 && __s1 < __s2 + __n)\n+\t    std::copy_backward(__s2, __s2 + __n, __s1);\n+\t  else\n+\t    std::copy(__s2, __s2 + __n, __s1);\n+\t  return __s1;\n+\t}\n+#endif\n       return static_cast<_CharT*>(__builtin_memmove(__s1, __s2,\n \t\t\t\t\t\t    __n * sizeof(char_type)));\n     }\n \n   template<typename _CharT>\n+    _GLIBCXX20_CONSTEXPR\n     typename char_traits<_CharT>::char_type*\n     char_traits<_CharT>::\n     copy(char_type* __s1, const char_type* __s2, std::size_t __n)\n@@ -200,6 +212,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _CharT>\n+    _GLIBCXX20_CONSTEXPR\n     typename char_traits<_CharT>::char_type*\n     char_traits<_CharT>::\n     assign(char_type* __s, std::size_t __n, char_type __a)\n@@ -349,27 +362,39 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn static_cast<const char_type*>(__builtin_memchr(__s, __a, __n));\n       }\n \n-      static char_type*\n+      static _GLIBCXX20_CONSTEXPR char_type*\n       move(char_type* __s1, const char_type* __s2, size_t __n)\n       {\n \tif (__n == 0)\n \t  return __s1;\n+#ifdef __cpp_lib_is_constant_evaluated\n+\tif (std::is_constant_evaluated())\n+\t  return __gnu_cxx::char_traits<char_type>::move(__s1, __s2, __n);\n+#endif\n \treturn static_cast<char_type*>(__builtin_memmove(__s1, __s2, __n));\n       }\n \n-      static char_type*\n+      static _GLIBCXX20_CONSTEXPR char_type*\n       copy(char_type* __s1, const char_type* __s2, size_t __n)\n       {\n \tif (__n == 0)\n \t  return __s1;\n+#ifdef __cpp_lib_is_constant_evaluated\n+\tif (std::is_constant_evaluated())\n+\t  return __gnu_cxx::char_traits<char_type>::copy(__s1, __s2, __n);\n+#endif\n \treturn static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));\n       }\n \n-      static char_type*\n+      static _GLIBCXX20_CONSTEXPR char_type*\n       assign(char_type* __s, size_t __n, char_type __a)\n       {\n \tif (__n == 0)\n \t  return __s;\n+#ifdef __cpp_lib_is_constant_evaluated\n+\tif (std::is_constant_evaluated())\n+\t  return __gnu_cxx::char_traits<char_type>::assign(__s, __n, __a);\n+#endif\n \treturn static_cast<char_type*>(__builtin_memset(__s, __a, __n));\n       }\n \n@@ -458,27 +483,39 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn wmemchr(__s, __a, __n);\n       }\n \n-      static char_type*\n+      static _GLIBCXX20_CONSTEXPR char_type*\n       move(char_type* __s1, const char_type* __s2, size_t __n)\n       {\n \tif (__n == 0)\n \t  return __s1;\n+#ifdef __cpp_lib_is_constant_evaluated\n+\tif (std::is_constant_evaluated())\n+\t  return __gnu_cxx::char_traits<char_type>::move(__s1, __s2, __n);\n+#endif\n \treturn wmemmove(__s1, __s2, __n);\n       }\n \n-      static char_type*\n+      static _GLIBCXX20_CONSTEXPR char_type*\n       copy(char_type* __s1, const char_type* __s2, size_t __n)\n       {\n \tif (__n == 0)\n \t  return __s1;\n+#ifdef __cpp_lib_is_constant_evaluated\n+\tif (std::is_constant_evaluated())\n+\t  return __gnu_cxx::char_traits<char_type>::copy(__s1, __s2, __n);\n+#endif\n \treturn wmemcpy(__s1, __s2, __n);\n       }\n \n-      static char_type*\n+      static _GLIBCXX20_CONSTEXPR char_type*\n       assign(char_type* __s, size_t __n, char_type __a)\n       {\n \tif (__n == 0)\n \t  return __s;\n+#ifdef __cpp_lib_is_constant_evaluated\n+\tif (std::is_constant_evaluated())\n+\t  return __gnu_cxx::char_traits<char_type>::assign(__s, __n, __a);\n+#endif\n \treturn wmemset(__s, __a, __n);\n       }\n \n@@ -567,27 +604,39 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn static_cast<const char_type*>(__builtin_memchr(__s, __a, __n));\n       }\n \n-      static char_type*\n+      static _GLIBCXX20_CONSTEXPR char_type*\n       move(char_type* __s1, const char_type* __s2, size_t __n)\n       {\n \tif (__n == 0)\n \t  return __s1;\n+#ifdef __cpp_lib_is_constant_evaluated\n+\tif (std::is_constant_evaluated())\n+\t  return __gnu_cxx::char_traits<char_type>::move(__s1, __s2, __n);\n+#endif\n \treturn static_cast<char_type*>(__builtin_memmove(__s1, __s2, __n));\n       }\n \n-      static char_type*\n+      static _GLIBCXX20_CONSTEXPR char_type*\n       copy(char_type* __s1, const char_type* __s2, size_t __n)\n       {\n \tif (__n == 0)\n \t  return __s1;\n+#ifdef __cpp_lib_is_constant_evaluated\n+\tif (std::is_constant_evaluated())\n+\t  return __gnu_cxx::char_traits<char_type>::copy(__s1, __s2, __n);\n+#endif\n \treturn static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));\n       }\n \n-      static char_type*\n+      static _GLIBCXX20_CONSTEXPR char_type*\n       assign(char_type* __s, size_t __n, char_type __a)\n       {\n \tif (__n == 0)\n \t  return __s;\n+#ifdef __cpp_lib_is_constant_evaluated\n+\tif (std::is_constant_evaluated())\n+\t  return __gnu_cxx::char_traits<char_type>::assign(__s, __n, __a);\n+#endif\n \treturn static_cast<char_type*>(__builtin_memset(__s, __a, __n));\n       }\n \n@@ -680,25 +729,33 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn 0;\n       }\n \n-      static char_type*\n+      static _GLIBCXX20_CONSTEXPR char_type*\n       move(char_type* __s1, const char_type* __s2, size_t __n)\n       {\n \tif (__n == 0)\n \t  return __s1;\n+#ifdef __cpp_lib_is_constant_evaluated\n+\tif (std::is_constant_evaluated())\n+\t  return __gnu_cxx::char_traits<char_type>::move(__s1, __s2, __n);\n+#endif\n \treturn (static_cast<char_type*>\n \t\t(__builtin_memmove(__s1, __s2, __n * sizeof(char_type))));\n       }\n \n-      static char_type*\n+      static _GLIBCXX20_CONSTEXPR char_type*\n       copy(char_type* __s1, const char_type* __s2, size_t __n)\n       {\n \tif (__n == 0)\n \t  return __s1;\n+#ifdef __cpp_lib_is_constant_evaluated\n+\tif (std::is_constant_evaluated())\n+\t  return __gnu_cxx::char_traits<char_type>::copy(__s1, __s2, __n);\n+#endif\n \treturn (static_cast<char_type*>\n \t\t(__builtin_memcpy(__s1, __s2, __n * sizeof(char_type))));\n       }\n \n-      static char_type*\n+      static _GLIBCXX20_CONSTEXPR char_type*\n       assign(char_type* __s, size_t __n, char_type __a)\n       {\n \tfor (size_t __i = 0; __i < __n; ++__i)\n@@ -783,25 +840,33 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn 0;\n       }\n \n-      static char_type*\n+      static _GLIBCXX20_CONSTEXPR char_type*\n       move(char_type* __s1, const char_type* __s2, size_t __n)\n       {\n \tif (__n == 0)\n \t  return __s1;\n+#ifdef __cpp_lib_is_constant_evaluated\n+\tif (std::is_constant_evaluated())\n+\t  return __gnu_cxx::char_traits<char_type>::move(__s1, __s2, __n);\n+#endif\n \treturn (static_cast<char_type*>\n \t\t(__builtin_memmove(__s1, __s2, __n * sizeof(char_type))));\n       }\n \n-      static char_type*\n+      static _GLIBCXX20_CONSTEXPR char_type*\n       copy(char_type* __s1, const char_type* __s2, size_t __n)\n       { \n \tif (__n == 0)\n \t  return __s1;\n+#ifdef __cpp_lib_is_constant_evaluated\n+\tif (std::is_constant_evaluated())\n+\t  return __gnu_cxx::char_traits<char_type>::copy(__s1, __s2, __n);\n+#endif\n \treturn (static_cast<char_type*>\n \t\t(__builtin_memcpy(__s1, __s2, __n * sizeof(char_type))));\n       }\n \n-      static char_type*\n+      static _GLIBCXX20_CONSTEXPR char_type*\n       assign(char_type* __s, size_t __n, char_type __a)\n       {\n \tfor (size_t __i = 0; __i < __n; ++__i)"}, {"sha": "ea1ccc9bb2192cd4589a05de5fa69c3bbfa85044", "filename": "libstdc++-v3/include/std/string_view", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b696698767ba45b4d61a93205167e2f1f744d3f1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b696698767ba45b4d61a93205167e2f1f744d3f1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view?ref=b696698767ba45b4d61a93205167e2f1f744d3f1", "patch": "@@ -263,6 +263,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       // [string.view.ops], string operations:\n \n+      _GLIBCXX20_CONSTEXPR\n       size_type\n       copy(_CharT* __str, size_type __n, size_type __pos = 0) const\n       {"}, {"sha": "f3042c25dc43584a7b36954491eaa424b3229d9c", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/operations/copy/char/constexpr.cc", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b696698767ba45b4d61a93205167e2f1f744d3f1/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fcopy%2Fchar%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b696698767ba45b4d61a93205167e2f1f744d3f1/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fcopy%2Fchar%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fcopy%2Fchar%2Fconstexpr.cc?ref=b696698767ba45b4d61a93205167e2f1f744d3f1", "patch": "@@ -0,0 +1,32 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <string_view>\n+\n+constexpr bool\n+test01()\n+{\n+  std::string_view s = \"Everything changes and nothing stands still.\";\n+  char buf[7];\n+  auto n = s.copy(buf, 7, 11);\n+  return std::string_view(buf, n) == \"changes\";\n+}\n+\n+static_assert( test01() );"}, {"sha": "f48a17eade8f268c0d72af4b8b9943c5173dc809", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/operations/copy/wchar_t/constexpr.cc", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b696698767ba45b4d61a93205167e2f1f744d3f1/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fcopy%2Fwchar_t%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b696698767ba45b4d61a93205167e2f1f744d3f1/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fcopy%2Fwchar_t%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Foperations%2Fcopy%2Fwchar_t%2Fconstexpr.cc?ref=b696698767ba45b4d61a93205167e2f1f744d3f1", "patch": "@@ -0,0 +1,32 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <string_view>\n+\n+constexpr bool\n+test01()\n+{\n+  std::wstring_view s = L\"Everything changes and nothing stands still.\";\n+  wchar_t buf[7];\n+  auto n = s.copy(buf, 7, 11);\n+  return std::wstring_view(buf, n) == L\"changes\";\n+}\n+\n+static_assert( test01() );"}]}