{"sha": "0b5b8ac5cb7fe92dd17ae8bd7de84640daa59e84", "node_id": "C_kwDOANBUbNoAKDBiNWI4YWM1Y2I3ZmU5MmRkMTdhZThiZDdkZTg0NjQwZGFhNTllODQ", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2022-09-19T07:46:58Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-09-19T07:50:28Z"}, "message": "Fix PR target/99184: Wrong cast from double to 16-bit and 32-bit ints\n\nthis patch fixed PR target/99184 which incorrectly rounded during 64-bit\n(long) double to 16-bit and 32-bit integers.\n\nThe patch just removes the respective roundings from\nlibf7-asm.sx::to_integer and ::to_unsigned.  Luckily, LibF7 does nowhere\nuse respective functions internally, the only user is in libf7.c::f7_exp\n\nwhich reads\n\n   f7_round (qq, qq);\n   int16_t q = f7_get_s16 (qq);\n\nso that f7_get_s16() operates on an already rounded value, and therefore\nthis code works unaltered with or without rounding in to_integer.\n\n\tPR target/99184\nlibgcc/config/avr/libf7/\n\t* libf7-asm.sx (to_integer, to_unsigned): Don't round 16-bit\n\tand 32-bit integers.", "tree": {"sha": "0254c2d699754101110a5fff6ea0b5052b4da96c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0254c2d699754101110a5fff6ea0b5052b4da96c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b5b8ac5cb7fe92dd17ae8bd7de84640daa59e84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b5b8ac5cb7fe92dd17ae8bd7de84640daa59e84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b5b8ac5cb7fe92dd17ae8bd7de84640daa59e84", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b5b8ac5cb7fe92dd17ae8bd7de84640daa59e84/comments", "author": null, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0990a778376b63b789a8ff5aa949325ba375c025", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0990a778376b63b789a8ff5aa949325ba375c025", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0990a778376b63b789a8ff5aa949325ba375c025"}], "stats": {"total": 50, "additions": 0, "deletions": 50}, "files": [{"sha": "752a939f6168e146b268e7d1c08166fda2cef8a2", "filename": "libgcc/config/avr/libf7/libf7-asm.sx", "status": "modified", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b5b8ac5cb7fe92dd17ae8bd7de84640daa59e84/libgcc%2Fconfig%2Favr%2Flibf7%2Flibf7-asm.sx", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b5b8ac5cb7fe92dd17ae8bd7de84640daa59e84/libgcc%2Fconfig%2Favr%2Flibf7%2Flibf7-asm.sx", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Favr%2Flibf7%2Flibf7-asm.sx?ref=0b5b8ac5cb7fe92dd17ae8bd7de84640daa59e84", "patch": "@@ -601,9 +601,6 @@ DEFUN to_integer\n     tst     C6\n     brmi    .Lsaturate.T    ;   > INTxx_MAX  =>  saturate\n \n-    rcall   .Lround\n-    brmi    .Lsaturate.T    ;   > INTxx_MAX  =>  saturate\n-\n     brtc 9f                 ;   >= 0         =>  return\n     sbrc    Mask,   5\n     .global __negdi2\n@@ -658,30 +655,6 @@ DEFUN to_integer\n     .global __clr_8\n     XJMP    __clr_8\n \n-.Lround:\n-    ;; C6.7 is known to be 0 here.\n-    ;; Return N = 1 iff we have to saturate.\n-    cpi     Mask,   0xf\n-    breq .Lround16\n-    cpi     Mask,   0x1f\n-    breq .Lround32\n-\n-    ;; For now, no rounding in the 64-bit case.  This rounding\n-    ;; would have to be integrated into the right-shift.\n-    cln\n-    ret\n-\n-.Lround32:\n-    rol     C2\n-    adc     C3,     ZERO\n-    adc     C4,     ZERO\n-    rjmp 2f\n-\n-.Lround16:\n-    rol     C4\n-2:  adc     C5,     ZERO\n-    adc     C6,     ZERO\n-    ret\n ENDF to_integer\n #endif /* F7MOD_to_integer_ */\n \n@@ -725,29 +698,6 @@ DEFUN to_unsigned\n     clr     CA\n     F7call  lshrdi3\n     POP     r16\n-\n-    ;; Rounding\n-    ;; ??? C6.7 is known to be 0 here.\n-    cpi     Mask,   0xf\n-    breq .Lround16\n-    cpi     Mask,   0x1f\n-    breq .Lround32\n-\n-    ;; For now, no rounding in the 64-bit case.  This rounding\n-    ;; would have to be integrated into the right-shift.\n-    ret\n-\n-.Lround32:\n-    rol     C2\n-    adc     C3,     ZERO\n-    adc     C4,     ZERO\n-    rjmp 2f\n-\n-.Lround16:\n-    rol     C4\n-2:  adc     C5,     ZERO\n-    adc     C6,     ZERO\n-    brcs    .Lset_0xffff    ; Rounding overflow  =>  saturate\n     ret\n \n .Lset_0xffff:"}]}