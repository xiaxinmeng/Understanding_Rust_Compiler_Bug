{"sha": "5735c3ea7861dcc2ada511c2ce6267a5567b00d7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTczNWMzZWE3ODYxZGNjMmFkYTUxMWMyY2U2MjY3YTU1NjdiMDBkNw==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2001-11-01T21:48:49Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2001-11-01T21:48:49Z"}, "message": "re PR other/704 (--help and --version)\n\n\t* Makefile.in (GCOV_OBJS): Add version.o.\n\t* gcov.c: Include \"version.h\" and <getopt.h>.\n\t(gcov_version_string): Remove.\n\t(print_usage): Take a parameter to determine whether this is a\n\tcall from --help or an error message.  Give fuller output that\n\tfollows the GNU Coding Standards for --help.\n\t(print_version): New function.\n\t(options): New.\n\t(process_args): Use getopt_long.  Support long options.  Follow\n\tGNU Coding Standards for --help and --version.\n\t* doc/gcov.texi: Document long options.\n\tAddresses part of PR other/704.\n\nFrom-SVN: r46703", "tree": {"sha": "0f3412160a85317c31f372424279c4043baafa25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f3412160a85317c31f372424279c4043baafa25"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5735c3ea7861dcc2ada511c2ce6267a5567b00d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5735c3ea7861dcc2ada511c2ce6267a5567b00d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5735c3ea7861dcc2ada511c2ce6267a5567b00d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5735c3ea7861dcc2ada511c2ce6267a5567b00d7/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "199898121e433bcade4a0829584238f1fd232ed7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/199898121e433bcade4a0829584238f1fd232ed7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/199898121e433bcade4a0829584238f1fd232ed7"}], "stats": {"total": 171, "additions": 128, "deletions": 43}, "files": [{"sha": "4078f338b57d27179a0f834634c0691c33216b59", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5735c3ea7861dcc2ada511c2ce6267a5567b00d7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5735c3ea7861dcc2ada511c2ce6267a5567b00d7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5735c3ea7861dcc2ada511c2ce6267a5567b00d7", "patch": "@@ -1,3 +1,18 @@\n+2001-11-01  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* Makefile.in (GCOV_OBJS): Add version.o.\n+\t* gcov.c: Include \"version.h\" and <getopt.h>.\n+\t(gcov_version_string): Remove.\n+\t(print_usage): Take a parameter to determine whether this is a\n+\tcall from --help or an error message.  Give fuller output that\n+\tfollows the GNU Coding Standards for --help.\n+\t(print_version): New function.\n+\t(options): New.\n+\t(process_args): Use getopt_long.  Support long options.  Follow\n+\tGNU Coding Standards for --help and --version.\n+\t* doc/gcov.texi: Document long options.\n+\tAddresses part of PR other/704.\n+\n 2001-11-01  John David Anglin  <dave@hiauly1.hia.nrc.ca>\n \n \t* pa.c (output_move_double): Fix typo in double load."}, {"sha": "e03803e0d1978c93c5802e95f606d7388dbdb973", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5735c3ea7861dcc2ada511c2ce6267a5567b00d7/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5735c3ea7861dcc2ada511c2ce6267a5567b00d7/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=5735c3ea7861dcc2ada511c2ce6267a5567b00d7", "patch": "@@ -2117,7 +2117,7 @@ gcov.o: gcov.c gcov-io.h intl.h $(SYSTEM_H) $(CONFIG_H)\n \n # Only one of 'gcov' or 'gcov.exe' is actually built, depending\n # upon whether $(exeext) is empty or not.\n-GCOV_OBJS = gcov.o intl.o\n+GCOV_OBJS = gcov.o intl.o version.o\n gcov$(exeext): $(GCOV_OBJS) $(LIBDEPS)\n \t$(CC) $(ALL_CFLAGS) $(LDFLAGS) $(GCOV_OBJS) $(LIBS) -o $@\n #\f"}, {"sha": "c4e6e55eb96d4c2c6502b53143acc179dbda55d4", "filename": "gcc/doc/gcov.texi", "status": "modified", "additions": 27, "deletions": 10, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5735c3ea7861dcc2ada511c2ce6267a5567b00d7/gcc%2Fdoc%2Fgcov.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5735c3ea7861dcc2ada511c2ce6267a5567b00d7/gcc%2Fdoc%2Fgcov.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcov.texi?ref=5735c3ea7861dcc2ada511c2ce6267a5567b00d7", "patch": "@@ -1,10 +1,10 @@\n-@c Copyright (C) 1996, 1997, 1999, 2000 Free Software Foundation, Inc.\n+@c Copyright (C) 1996, 1997, 1999, 2000, 2001 Free Software Foundation, Inc.\n @c This is part of the GCC manual.\n @c For copying conditions, see the file gcc.texi.\n \n @ignore\n @c man begin COPYRIGHT\n-Copyright @copyright{} 1996, 1997, 1999, 2000 Free Software Foundation, Inc.\n+Copyright @copyright{} 1996, 1997, 1999, 2000, 2001 Free Software Foundation, Inc.\n \n Permission is granted to make and distribute verbatim copies of this\n manual provided the copyright notice and this permission notice are\n@@ -32,8 +32,6 @@ English.\n @command{gcov} is a tool you can use in conjunction with GCC to\n test code coverage in your programs.\n \n-This chapter describes version 1.5 of @command{gcov}.\n-\n @menu\n * Gcov Intro::         \t        Introduction to gcov.\n * Invoking Gcov::       \tHow to use gcov.\n@@ -108,12 +106,18 @@ compatible with any other profiling or test coverage mechanism.\n @section Invoking gcov\n \n @smallexample\n-gcov [-b] [-c] [-v] [-n] [-l] [-f] [-o directory] @var{sourcefile}\n+gcov @r{[}@var{options}@r{]} @var{sourcefile}\n @end smallexample\n \n+@command{gcov} accepts the following options:\n+\n @ignore\n @c man begin SYNOPSIS\n-gcov [@option{-b}] [@option{-c}] [@option{-v}] [@option{-n}] [@option{-l}] [@option{-f}] [@option{-o} @var{directory}] @var{sourcefile}\n+gcov [@option{-v}|@option{--version}] [@option{-h}|@option{--help}]\n+     [@option{-b}|@option{--branch-probabilities}] [@option{-c}|@option{--branch-counts}]\n+     [@option{-n}|@option{--no-output}] [@option{-l}|@option{--long-file-names}]\n+     [@option{-f}|@option{--function-summaries}]\n+     [@option{-o}|@option{--object-directory} @var{directory}] @var{sourcefile}\n @c man end\n @c man begin SEEALSO\n gcc(1) and the Info entry for @file{gcc}.\n@@ -122,32 +126,45 @@ gcc(1) and the Info entry for @file{gcc}.\n \n @c man begin OPTIONS\n @table @gcctabopt\n+@item -h\n+@itemx --help\n+Display help about using @command{gcov} (on the standard output), and\n+exit without doing any further processing.\n+\n+@item -v\n+@itemx --version\n+Display the @command{gcov} version number (on the standard output),\n+and exit without doing any further processing.\n+\n @item -b\n+@itemx --branch-probabilities\n Write branch frequencies to the output file, and write branch summary\n info to the standard output.  This option allows you to see how often\n each branch in your program was taken.\n \n @item -c\n+@itemx --branch-counts\n Write branch frequencies as the number of branches taken, rather than\n the percentage of branches taken.\n \n-@item -v\n-Display the @command{gcov} version number (on the standard error stream).\n-\n @item -n\n+@itemx --no-output\n Do not create the @command{gcov} output file.\n \n @item -l\n+@itemx --long-file-names\n Create long file names for included source files.  For example, if the\n header file @file{x.h} contains code, and was included in the file\n @file{a.c}, then running @command{gcov} on the file @file{a.c} will produce\n an output file called @file{a.c.x.h.gcov} instead of @file{x.h.gcov}.\n This can be useful if @file{x.h} is included in multiple source files.\n \n @item -f\n+@itemx --function-summaries\n Output summaries for each function in addition to the file level summary.\n \n-@item -o\n+@item -o @var{directory}\n+@itemx --object-directory @var{directory}\n The directory where the object files live.  Gcov will search for @file{.bb},\n @file{.bbg}, and @file{.da} files in this directory.\n @end table"}, {"sha": "aad22a8cf0eef5693730d0d1bb26b6783800aced", "filename": "gcc/gcov.c", "status": "modified", "additions": 85, "deletions": 32, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5735c3ea7861dcc2ada511c2ce6267a5567b00d7/gcc%2Fgcov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5735c3ea7861dcc2ada511c2ce6267a5567b00d7/gcc%2Fgcov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov.c?ref=5735c3ea7861dcc2ada511c2ce6267a5567b00d7", "patch": "@@ -46,8 +46,11 @@ Boston, MA 02111-1307, USA.  */\n #include \"config.h\"\n #include \"system.h\"\n #include \"intl.h\"\n+#include \"version.h\"\n #undef abort\n \n+#include <getopt.h>\n+\n typedef HOST_WIDEST_INT gcov_type;\n #include \"gcov-io.h\"\n \n@@ -79,8 +82,6 @@ typedef HOST_WIDEST_INT gcov_type;\n /* The functions in this file for creating and solution program flow graphs\n    are very similar to functions in the gcc source file profile.c.  */\n \n-static const char gcov_version_string[] = \"GNU gcov version 1.5\\n\";\n-\n /* This is the size of the buffer used to read in source file lines.  */\n \n #define STRING_SIZE 200\n@@ -227,7 +228,8 @@ static void open_files PARAMS ((void));\n static void read_files PARAMS ((void));\n static void scan_for_source_files PARAMS ((void));\n static void output_data PARAMS ((void));\n-static void print_usage PARAMS ((void)) ATTRIBUTE_NORETURN;\n+static void print_usage PARAMS ((int)) ATTRIBUTE_NORETURN;\n+static void print_version PARAMS ((void)) ATTRIBUTE_NORETURN;\n static void init_arc PARAMS ((struct adj_list *, int, int, struct bb_info *));\n static struct adj_list *reverse_arcs PARAMS ((struct adj_list *));\n static void create_program_flow_graph PARAMS ((struct bb_info_list *));\n@@ -281,53 +283,104 @@ fancy_abort ()\n   exit (FATAL_EXIT_CODE);\n }\n \f\n-/* Print a usage message and exit.  */\n+/* Print a usage message and exit.  If ERROR_P is nonzero, this is an error,\n+   otherwise the output of --help.  */\n \n static void\n-print_usage ()\n+print_usage (error_p)\n+     int error_p;\n {\n-  fnotice (stderr, \"gcov [-b] [-v] [-n] [-l] [-f] [-o OBJDIR] file\\n\");\n-  exit (FATAL_EXIT_CODE);\n+  FILE *file = error_p ? stderr : stdout;\n+  int status = error_p ? FATAL_EXIT_CODE : SUCCESS_EXIT_CODE;\n+  fnotice (file, \"Usage: gcov [OPTION]... SOURCEFILE\\n\\n\");\n+  fnotice (file, \"Print code coverage information.\\n\\n\");\n+  fnotice (file, \"  -h, --help                      Print this help, then exit\\n\");\n+  fnotice (file, \"  -v, --version                   Print version number, then exit\\n\");\n+  fnotice (file, \"  -b, --branch-probabilities      Include branch probabilities in output\\n\");\n+  fnotice (file, \"  -c, --branch-counts             Given counts of branches taken\\n\\\n+                                    rather than percentages\\n\");\n+  fnotice (file, \"  -n, --no-output                 Do not create an output file\\n\");\n+  fnotice (file, \"  -l, --long-file-names           Use long output file names for included\\n\\\n+                                    source files\\n\");\n+  fnotice (file, \"  -f, --function-summaries        Output summaries for each function\\n\");\n+  fnotice (file, \"  -o, --object-directory OBJDIR   Search for object files in OBJDIR\\n\");\n+  fnotice (file, \"\\nFor bug reporting instructions, please see:\\n%s.\\n\",\n+\t   GCCBUGURL);\n+  exit (status);\n+}\n+\n+/* Print version information and exit.  */\n+\n+static void\n+print_version ()\n+{\n+  fnotice (stdout, \"gcov (GCC) %s\\n\", version_string);\n+  fnotice (stdout, \"Copyright (C) 2001 Free Software Foundation, Inc.\\n\");\n+  fnotice (stdout,\n+\t   \"This is free software; see the source for copying conditions.  There is NO\\n\\\n+warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\\n\\n\");\n+  exit (SUCCESS_EXIT_CODE);\n }\n \n+static const struct option options[] =\n+{\n+  { \"help\",                 no_argument,       NULL, 'h' },\n+  { \"version\",              no_argument,       NULL, 'v' },\n+  { \"branch-probabilities\", no_argument,       NULL, 'b' },\n+  { \"branch-counts\",        no_argument,       NULL, 'c' },\n+  { \"no-output\",            no_argument,       NULL, 'n' },\n+  { \"long-file-names\",      no_argument,       NULL, 'l' },\n+  { \"function-summaries\",   no_argument,       NULL, 'f' },\n+  { \"object-directory\",     required_argument, NULL, 'o' }\n+};\n+\n /* Parse the command line.  */\n \n static void\n process_args (argc, argv)\n      int argc;\n      char **argv;\n {\n-  int i;\n+  int opt;\n \n-  for (i = 1; i < argc; i++)\n+  while ((opt = getopt_long (argc, argv, \"hvbclnfo:\", options, NULL)) != -1)\n     {\n-      if (argv[i][0] == '-')\n+      switch (opt)\n \t{\n-\t  if (argv[i][1] == 'b')\n-\t    output_branch_probs = 1;\n-\t  else if (argv[i][1] == 'c')\n-\t    output_branch_counts = 1;\n-\t  else if (argv[i][1] == 'v')\n-\t    fputs (gcov_version_string, stderr);\n-\t  else if (argv[i][1] == 'n')\n-\t    output_gcov_file = 0;\n-\t  else if (argv[i][1] == 'l')\n-\t    output_long_names = 1;\n-\t  else if (argv[i][1] == 'f')\n-\t    output_function_summary = 1;\n-\t  else if (argv[i][1] == 'o' && argv[i][2] == '\\0')\n-\t    object_directory = argv[++i];\n-\t  else\n-\t    print_usage ();\n+\tcase 'h':\n+\t  print_usage (false);\n+\t  /* print_usage will exit.  */\n+\tcase 'v':\n+\t  print_version ();\n+\t  /* print_version will exit.  */\n+\tcase 'b':\n+\t  output_branch_probs = 1;\n+\t  break;\n+\tcase 'c':\n+\t  output_branch_counts = 1;\n+\t  break;\n+\tcase 'n':\n+\t  output_gcov_file = 0;\n+\t  break;\n+\tcase 'l':\n+\t  output_long_names = 1;\n+\t  break;\n+\tcase 'f':\n+\t  output_function_summary = 1;\n+\t  break;\n+\tcase 'o':\n+\t  object_directory = optarg;\n+\t  break;\n+\tdefault:\n+\t  print_usage (true);\n+\t  /* print_usage will exit.  */\n \t}\n-      else if (! input_file_name)\n-\tinput_file_name = argv[i];\n-      else\n-\tprint_usage ();\n     }\n \n-  if (! input_file_name)\n-    print_usage ();\n+  if (optind != argc - 1)\n+    print_usage (true);\n+\n+  input_file_name = argv[optind];\n }\n \n "}]}