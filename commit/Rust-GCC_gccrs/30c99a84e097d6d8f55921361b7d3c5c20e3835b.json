{"sha": "30c99a84e097d6d8f55921361b7d3c5c20e3835b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzBjOTlhODRlMDk3ZDZkOGY1NTkyMTM2MWI3ZDNjNWMyMGUzODM1Yg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-03-29T23:24:20Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-03-29T23:24:20Z"}, "message": "i386.c (x86_arch_always_fancy_math_387): New.\n\n        * config/i386/i386.c (x86_arch_always_fancy_math_387): New.\n        (override_options): Disable NO_FANCY_MATH_387 if the arch allows.\n        * config/i386/i386.h (x86_arch_always_fancy_math_387): New.\n        * config/i386/i386.md (sqrtxf2, sqrtextendsfxf2, sinxf2): Fix\n        conditional.\n        * docs/invoke.texi: Update -mno-fancy-math-387 docs.\n\nFrom-SVN: r51584", "tree": {"sha": "a15cc507a152b1fe5af92175843a37d8425c9986", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a15cc507a152b1fe5af92175843a37d8425c9986"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30c99a84e097d6d8f55921361b7d3c5c20e3835b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30c99a84e097d6d8f55921361b7d3c5c20e3835b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30c99a84e097d6d8f55921361b7d3c5c20e3835b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30c99a84e097d6d8f55921361b7d3c5c20e3835b/comments", "author": null, "committer": null, "parents": [{"sha": "4d6ac5424e9c34988954c62da68b39dd5374a095", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d6ac5424e9c34988954c62da68b39dd5374a095", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d6ac5424e9c34988954c62da68b39dd5374a095"}], "stats": {"total": 51, "additions": 45, "deletions": 6}, "files": [{"sha": "101f6a8e03088eca3ed64b8f2e8532f2511a76a2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30c99a84e097d6d8f55921361b7d3c5c20e3835b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30c99a84e097d6d8f55921361b7d3c5c20e3835b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=30c99a84e097d6d8f55921361b7d3c5c20e3835b", "patch": "@@ -1,3 +1,12 @@\n+2002-03-29  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/i386/i386.c (x86_arch_always_fancy_math_387): New.\n+\t(override_options): Disable NO_FANCY_MATH_387 if the arch allows.\n+\t* config/i386/i386.h (x86_arch_always_fancy_math_387): New.\n+\t* config/i386/i386.md (sqrtxf2, sqrtextendsfxf2, sinxf2): Fix\n+\tconditional.\n+\t* docs/invoke.texi: Update -mno-fancy-math-387 docs.\n+\n 2002-03-29  Dale Johannesen <dalej@apple.com>\n \n \t* loop.c (combine_movables): Do allow combination of pseudos."}, {"sha": "8e9df35a9d69c5e027e1fae42ff568d0ced4c24e", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30c99a84e097d6d8f55921361b7d3c5c20e3835b/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30c99a84e097d6d8f55921361b7d3c5c20e3835b/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=30c99a84e097d6d8f55921361b7d3c5c20e3835b", "patch": "@@ -393,6 +393,7 @@ const int x86_accumulate_outgoing_args = m_ATHLON | m_PENT4 | m_PPRO;\n const int x86_prologue_using_move = m_ATHLON | m_PENT4 | m_PPRO;\n const int x86_epilogue_using_move = m_ATHLON | m_PENT4 | m_PPRO;\n const int x86_decompose_lea = m_PENT4;\n+const int x86_arch_always_fancy_math_387 = m_PENT|m_PPRO|m_ATHLON|m_PENT4;\n \n /* In case the avreage insn count for single function invocation is\n    lower than this constant, emit fast (but longer) prologue and\n@@ -1118,6 +1119,11 @@ override_options ()\n   if (flag_unsafe_math_optimizations)\n     target_flags &= ~MASK_IEEE_FP;\n \n+  /* If the architecture always has an FPU, turn off NO_FANCY_MATH_387,\n+     since the insns won't need emulation.  */\n+  if (x86_arch_always_fancy_math_387 & (1 << ix86_arch))\n+    target_flags &= ~MASK_NO_FANCY_MATH_387;\n+\n   if (TARGET_64BIT)\n     {\n       if (TARGET_ALIGN_DOUBLE)"}, {"sha": "ad2956da164616b6f3bbed6a0441ce2d5baecf35", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30c99a84e097d6d8f55921361b7d3c5c20e3835b/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30c99a84e097d6d8f55921361b7d3c5c20e3835b/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=30c99a84e097d6d8f55921361b7d3c5c20e3835b", "patch": "@@ -222,6 +222,7 @@ extern const int x86_add_esp_4, x86_add_esp_8, x86_sub_esp_4, x86_sub_esp_8;\n extern const int x86_partial_reg_dependency, x86_memory_mismatch_stall;\n extern const int x86_accumulate_outgoing_args, x86_prologue_using_move;\n extern const int x86_epilogue_using_move, x86_decompose_lea;\n+extern const int x86_arch_always_fancy_math_387;\n extern int x86_prefetch_sse;\n \n #define TARGET_USE_LEAVE (x86_use_leave & CPUMASK)"}, {"sha": "8b3ee78d78d861a2e43c895c827b3152f167f6dd", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30c99a84e097d6d8f55921361b7d3c5c20e3835b/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30c99a84e097d6d8f55921361b7d3c5c20e3835b/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=30c99a84e097d6d8f55921361b7d3c5c20e3835b", "patch": "@@ -14701,7 +14701,7 @@\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n \t(sqrt:XF (float_extend:XF\n \t\t  (match_operand:DF 1 \"register_operand\" \"0\"))))]\n-  \"!TARGET_64BIT && TARGET_80387 && TARGET_NO_FANCY_MATH_387\"\n+  \"!TARGET_64BIT && TARGET_80387 && !TARGET_NO_FANCY_MATH_387\"\n   \"fsqrt\"\n   [(set_attr \"type\" \"fpspc\")\n    (set_attr \"mode\" \"XF\")\n@@ -14721,7 +14721,7 @@\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n \t(sqrt:XF (float_extend:XF\n \t\t  (match_operand:SF 1 \"register_operand\" \"0\"))))]\n-  \"!TARGET_64BIT && TARGET_80387 && TARGET_NO_FANCY_MATH_387\"\n+  \"!TARGET_64BIT && TARGET_80387 && !TARGET_NO_FANCY_MATH_387\"\n   \"fsqrt\"\n   [(set_attr \"type\" \"fpspc\")\n    (set_attr \"mode\" \"XF\")\n@@ -14768,7 +14768,7 @@\n (define_insn \"sinxf2\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n \t(unspec:XF [(match_operand:XF 1 \"register_operand\" \"0\")] 1))]\n-  \"!TARGET_64BIT && TARGET_80387 && TARGET_NO_FANCY_MATH_387\n+  \"!TARGET_64BIT && TARGET_80387 && !TARGET_NO_FANCY_MATH_387\n    && flag_unsafe_math_optimizations\"\n   \"fsin\"\n   [(set_attr \"type\" \"fpspc\")"}, {"sha": "c26d183067e7640f6effddabd12ac09f95df5625", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30c99a84e097d6d8f55921361b7d3c5c20e3835b/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30c99a84e097d6d8f55921361b7d3c5c20e3835b/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=30c99a84e097d6d8f55921361b7d3c5c20e3835b", "patch": "@@ -7366,9 +7366,12 @@ in ordinary CPU registers instead.\n @opindex mno-fancy-math-387\n Some 387 emulators do not support the @code{sin}, @code{cos} and\n @code{sqrt} instructions for the 387.  Specify this option to avoid\n-generating those instructions.  This option is the default on FreeBSD@.\n-As of revision 2.6.1, these instructions are not generated unless you\n-also use the @option{-funsafe-math-optimizations} switch.\n+generating those instructions.  This option is the default on FreeBSD,\n+OpenBSD and NetBSD@.  This option is overridden when @option{-march}\n+indicates that the target cpu will always have an FPU and so the\n+instruction will not need emulation.  As of revision 2.6.1, these\n+instructions are not generated unless you also use the\n+@option{-funsafe-math-optimizations} switch.\n \n @item -malign-double\n @itemx -mno-align-double"}, {"sha": "2c9334b018261556229378fd81a342b115c94b44", "filename": "gcc/testsuite/gcc.dg/i386-387-1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30c99a84e097d6d8f55921361b7d3c5c20e3835b/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-387-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30c99a84e097d6d8f55921361b7d3c5c20e3835b/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-387-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-387-1.c?ref=30c99a84e097d6d8f55921361b7d3c5c20e3835b", "patch": "@@ -0,0 +1,10 @@\n+/* Verify that -mno-fancy-math-387 works.  */\n+/* { dg-do compile { target \"i?86-*-*\" } } */\n+/* { dg-options \"-O -ffast-math -mfpmath=387 -mno-fancy-math-387\" } */\n+/* { dg-final { scan-assembler \"call\\tsin\" } } */\n+/* { dg-final { scan-assembler \"call\\tcos\" } } */\n+/* { dg-final { scan-assembler \"call\\tsqrt\" } } */\n+\n+double f1(double x) { return __builtin_sin(x); }\n+double f2(double x) { return __builtin_cos(x); }\n+double f3(double x) { return __builtin_sqrt(x); }"}, {"sha": "2456ca0c9345912a4bdcc625742d834910126828", "filename": "gcc/testsuite/gcc.dg/i386-387-2.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30c99a84e097d6d8f55921361b7d3c5c20e3835b/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-387-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30c99a84e097d6d8f55921361b7d3c5c20e3835b/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-387-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-387-2.c?ref=30c99a84e097d6d8f55921361b7d3c5c20e3835b", "patch": "@@ -0,0 +1,10 @@\n+/* Verify that -march overrides -mno-fancy-math-387.  */\n+/* { dg-do compile { target \"i?86-*-*\" } } */\n+/* { dg-options \"-O -ffast-math -mfpmath=387 -march=i686 -mno-fancy-math-387\" } */\n+/* { dg-final { scan-assembler \"fsin\" } } */\n+/* { dg-final { scan-assembler \"fcos\" } } */\n+/* { dg-final { scan-assembler \"fsqrt\" } } */\n+\n+double f1(double x) { return __builtin_sin(x); }\n+double f2(double x) { return __builtin_cos(x); }\n+double f3(double x) { return __builtin_sqrt(x); }"}]}