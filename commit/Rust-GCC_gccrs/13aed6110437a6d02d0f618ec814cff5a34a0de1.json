{"sha": "13aed6110437a6d02d0f618ec814cff5a34a0de1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTNhZWQ2MTEwNDM3YTZkMDJkMGY2MThlYzgxNGNmZjVhMzRhMGRlMQ==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2011-02-15T09:49:14Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2011-02-15T09:49:14Z"}, "message": "re PR pch/14940 (PCH largefile test fails on various platforms)\n\n\tPR pch/14940\n\t* config/alpha/host-osf.c: New file.\n\t* config/alpha/x-osf: New file.\n\t* config.host (alpha*-dec-osf*): Use it.\n\nFrom-SVN: r170166", "tree": {"sha": "61fb511bc9e6a381452e1b03a686eee242e74200", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/61fb511bc9e6a381452e1b03a686eee242e74200"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/13aed6110437a6d02d0f618ec814cff5a34a0de1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13aed6110437a6d02d0f618ec814cff5a34a0de1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13aed6110437a6d02d0f618ec814cff5a34a0de1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13aed6110437a6d02d0f618ec814cff5a34a0de1/comments", "author": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a86f3aafdaad2c16ca5236a790dbca199b12fb5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a86f3aafdaad2c16ca5236a790dbca199b12fb5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a86f3aafdaad2c16ca5236a790dbca199b12fb5a"}], "stats": {"total": 164, "additions": 163, "deletions": 1}, "files": [{"sha": "32d96491c5cb433a922b72f31c486036dbc9343b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13aed6110437a6d02d0f618ec814cff5a34a0de1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13aed6110437a6d02d0f618ec814cff5a34a0de1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=13aed6110437a6d02d0f618ec814cff5a34a0de1", "patch": "@@ -1,3 +1,10 @@\n+2011-02-15  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\tPR pch/14940\n+\t* config/alpha/host-osf.c: New file.\n+\t* config/alpha/x-osf: New file.\n+\t* config.host (alpha*-dec-osf*): Use it.\n+\n 2011-02-14  Anatoly Sokolov  <aesok@post.ru>\n \n \t* config/rx/rx.h (GO_IF_MODE_DEPENDENT_ADDRESS): Remove."}, {"sha": "d0342b996e6e2c53d1cf648c7a11bf7af0c8e3ef", "filename": "gcc/config.host", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13aed6110437a6d02d0f618ec814cff5a34a0de1/gcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13aed6110437a6d02d0f618ec814cff5a34a0de1/gcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.host?ref=13aed6110437a6d02d0f618ec814cff5a34a0de1", "patch": "@@ -1,6 +1,6 @@\n # GCC host-specific configuration file.\n # Copyright 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2006, 2007, 2008, 2009,\n-# 2010 Free Software Foundation, Inc.\n+# 2010, 2011 Free Software Foundation, Inc.\n \n #This file is part of GCC.\n \n@@ -169,6 +169,10 @@ case ${host} in\n     prefix=/gnu\n     local_prefix=/gnu/local\n     ;;\n+  alpha*-dec-osf*)\n+    out_host_hook_obj=host-osf.o\n+    host_xmake_file=\"${host_xmake_file} alpha/x-osf\"\n+    ;;\n   alpha*-dec-*vms*)\n     host_xm_file=\"vms/xm-vms.h\"\n     host_xmake_file=vms/x-vms"}, {"sha": "0a554b3ec2c6750e6ffba43a3f4c6eaa685e947b", "filename": "gcc/config/alpha/host-osf.c", "status": "added", "additions": 147, "deletions": 0, "changes": 147, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13aed6110437a6d02d0f618ec814cff5a34a0de1/gcc%2Fconfig%2Falpha%2Fhost-osf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13aed6110437a6d02d0f618ec814cff5a34a0de1/gcc%2Fconfig%2Falpha%2Fhost-osf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fhost-osf.c?ref=13aed6110437a6d02d0f618ec814cff5a34a0de1", "patch": "@@ -0,0 +1,147 @@\n+/* Tru64 UNIX host-specific hook definitions.\n+   Copyright (C) 2011 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include <sys/mman.h>\n+/* Inhibit inclusion of <sys/mount.h>, unnecessary and errors out due to\n+   use of poisoned bcmp, bcopy.  */\n+#define _SYS_MOUNT_H_\n+#include <sys/procfs.h>\n+#include \"hosthooks.h\"\n+#include \"hosthooks-def.h\"\n+\n+\n+#undef HOST_HOOKS_GT_PCH_GET_ADDRESS\n+#define HOST_HOOKS_GT_PCH_GET_ADDRESS osf_gt_pch_get_address\n+#undef HOST_HOOKS_GT_PCH_USE_ADDRESS\n+#define HOST_HOOKS_GT_PCH_USE_ADDRESS osf_gt_pch_use_address\n+\n+/* The mmap ADDR parameter may be ignored without MAP_FIXED set.  Before we\n+   give up, check existing mappings with ioctl(PIOCMAP) to see if the space\n+   is really free.  */\n+\n+static void *\n+mmap_fixed (void *addr, size_t len, int prot, int flags, int fd, off_t off)\n+{\n+  void *base;\n+\n+  base = mmap ((caddr_t) addr, len, prot, flags, fd, off);\n+  \n+  if (base != addr)\n+    {\n+      /* PID_MAX is SHRT_MAX on Tru64 UNIX V4.0, but INT_MAX on V5.1.\n+\t Allow for both.  \"/proc/\" + INT_MAX + '\\0'.  */\n+      char pname[6+10+1];\n+      int procfd, nmap;\n+      prmap_t *pmap;\n+      int i, overlap = 0;\n+\n+      if (base != (void *) MAP_FAILED)\n+\tmunmap ((caddr_t) base, len);\n+\n+      /* Check if there's any mapping overlapping [addr, addr+len).  */\n+\n+      snprintf (pname, sizeof (pname), \"/proc/%d\", getpid ());\n+      procfd = open (pname, O_RDONLY);\n+      if (procfd == -1)\n+\treturn ((void *) MAP_FAILED);\n+      if (ioctl (procfd, PIOCNMAP, &nmap) == -1)\n+\treturn ((void *) MAP_FAILED);\n+      pmap = (prmap_t *) xmalloc (sizeof (*pmap) * (nmap+1));\n+      if (ioctl (procfd, PIOCMAP, pmap) == -1)\n+\treturn ((void *) MAP_FAILED);\n+\n+      /* It seems like pmap[] is sorted by address, but can we rely on\n+\t that?  */\n+      for (i = 0; i < nmap; i++)\n+\t{\n+\t  uintptr_t map_start = (uintptr_t) pmap[i].pr_vaddr;\n+\t  uintptr_t map_end = map_start + pmap[i].pr_size;\n+\n+\t  if ((uintptr_t) addr < map_end\n+\t      && (uintptr_t) addr+len > map_start)\n+\t    {\n+\t      overlap = 1;\n+\t      break;\n+\t    }\n+\t}\n+      free (pmap);\n+      close (procfd);\n+\n+      if (!overlap)\n+\tbase = mmap ((caddr_t) addr, len, prot, flags | MAP_FIXED, fd, off);\n+      else\n+\tbase = mmap ((caddr_t) addr, len, prot, flags, fd, off);\n+    }\n+\n+  return base;\n+}\n+\n+/* For various ports, try to guess a fixed spot in the vm space that's\n+   probably free.  Take the middle between start of text segment and\n+   dynamic loader space.  See <sys/machine/addrconf.h> and Tru64 UNIX\n+   Assembly Language Programmer's Guide, p.6-18, Figure 6-3: Default Layout\n+   of Memory (User Program View).  */\n+#define TRY_EMPTY_VM_SPACE\t0x20050000000\n+\n+/* Determine a location where we might be able to reliably allocate\n+   SIZE bytes.  FD is the PCH file, though we should return with the\n+   file unmapped.  */\n+\n+static void *\n+osf_gt_pch_get_address (size_t size, int fd)\n+{\n+  void *addr;\n+\n+  addr = mmap_fixed ((caddr_t) TRY_EMPTY_VM_SPACE, size,\n+\t\t     PROT_READ | PROT_WRITE, MAP_PRIVATE, fd, 0);\n+\n+  /* If we failed the map, that means there's *no* free space.  */\n+  if (addr == (void *) MAP_FAILED)\n+    return NULL;\n+  /* Unmap the area before returning.  */\n+  munmap ((caddr_t) addr, size);\n+\n+  return addr;\n+}\n+\n+/* Map SIZE bytes of FD+OFFSET at BASE.  Return 1 if we succeeded at \n+   mapping the data at BASE, -1 if we couldn't.  */\n+\n+static int\n+osf_gt_pch_use_address (void *base, size_t size, int fd, size_t offset)\n+{\n+  void *addr;\n+\n+  /* We're called with size == 0 if we're not planning to load a PCH\n+     file at all.  This allows the hook to free any static space that\n+     we might have allocated at link time.  */\n+  if (size == 0)\n+    return -1;\n+\n+  addr = mmap_fixed ((caddr_t) base, size,\n+\t\t     PROT_READ | PROT_WRITE, MAP_PRIVATE, fd, offset);\n+\n+  return addr == base ? 1 : -1;\n+}\n+\n+\f\n+const struct host_hooks host_hooks = HOST_HOOKS_INITIALIZER;"}, {"sha": "5bb9c90986e64d0187f5389a9047f65c15b8f85b", "filename": "gcc/config/alpha/x-osf", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13aed6110437a6d02d0f618ec814cff5a34a0de1/gcc%2Fconfig%2Falpha%2Fx-osf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13aed6110437a6d02d0f618ec814cff5a34a0de1/gcc%2Fconfig%2Falpha%2Fx-osf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fx-osf?ref=13aed6110437a6d02d0f618ec814cff5a34a0de1", "patch": "@@ -0,0 +1,4 @@\n+host-osf.o : $(srcdir)/config/alpha/host-osf.c $(CONFIG_H) $(SYSTEM_H) \\\n+  coretypes.h hosthooks.h hosthooks-def.h $(HOOKS_H)\n+\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n+\t\t$(srcdir)/config/alpha/host-osf.c"}]}