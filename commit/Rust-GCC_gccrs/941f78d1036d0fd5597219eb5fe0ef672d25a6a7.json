{"sha": "941f78d1036d0fd5597219eb5fe0ef672d25a6a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQxZjc4ZDEwMzZkMGZkNTU5NzIxOWViNWZlMGVmNjcyZDI1YTZhNw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2010-05-06T19:46:14Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2010-05-06T19:46:14Z"}, "message": "gimplify.c (gimplify_expr): Set GS_ALL_DONE when appropriate.\n\ngcc:\n\t* gimplify.c (gimplify_expr): Set GS_ALL_DONE when appropriate.\n\tDon't change GS_OK to GS_ALL_DONE.  Make sure that all cases set\n\tret appropriately.\n\t(gimplify_compound_lval): Return GS_ALL_DONE as appropriate.\ngcc/cp:\n\t* semantics.c (simplify_aggr_init_expr): Use INIT_EXPR.\n\nFrom-SVN: r159125", "tree": {"sha": "9df72cb07d8aae1f8f55d7d7575646c8e15b35ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9df72cb07d8aae1f8f55d7d7575646c8e15b35ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/941f78d1036d0fd5597219eb5fe0ef672d25a6a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/941f78d1036d0fd5597219eb5fe0ef672d25a6a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/941f78d1036d0fd5597219eb5fe0ef672d25a6a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/941f78d1036d0fd5597219eb5fe0ef672d25a6a7/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ebad523301c12f27e56a3008916e4e41f518ba57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebad523301c12f27e56a3008916e4e41f518ba57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebad523301c12f27e56a3008916e4e41f518ba57"}], "stats": {"total": 48, "additions": 34, "deletions": 14}, "files": [{"sha": "a62539929ad00273738982a1c84c290dc6aeb9fe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/941f78d1036d0fd5597219eb5fe0ef672d25a6a7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/941f78d1036d0fd5597219eb5fe0ef672d25a6a7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=941f78d1036d0fd5597219eb5fe0ef672d25a6a7", "patch": "@@ -1,5 +1,10 @@\n 2010-05-06  Jason Merrill  <jason@redhat.com>\n \n+\t* gimplify.c (gimplify_expr): Set GS_ALL_DONE when appropriate.\n+\tDon't change GS_OK to GS_ALL_DONE.  Make sure that all cases set\n+\tret appropriately.\n+\t(gimplify_compound_lval): Return GS_ALL_DONE as appropriate.\n+\n \t* gimplify.c (gimplify_modify_expr_rhs): Don't return GS_OK for\n \tstripping WITH_SIZE_EXPR.\n \t(gimplify_expr) [MODIFY_EXPR]: Trust GS_OK even if the rhs didn't"}, {"sha": "a5a7afa9cef03435cf56ed31973b60501389719b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/941f78d1036d0fd5597219eb5fe0ef672d25a6a7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/941f78d1036d0fd5597219eb5fe0ef672d25a6a7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=941f78d1036d0fd5597219eb5fe0ef672d25a6a7", "patch": "@@ -1,3 +1,7 @@\n+2010-05-06  Jason Merrill  <jason@redhat.com>\n+\n+\t* semantics.c (simplify_aggr_init_expr): Use INIT_EXPR.\n+\n 2010-04-22  Jakub Jelinek <jakub@redhat.com>\n \t    Dodji Seketeli <dodji@redhat.com>\n "}, {"sha": "0847403c227666d131ee7fd9b9bbd34aab6878e5", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/941f78d1036d0fd5597219eb5fe0ef672d25a6a7/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/941f78d1036d0fd5597219eb5fe0ef672d25a6a7/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=941f78d1036d0fd5597219eb5fe0ef672d25a6a7", "patch": "@@ -3280,7 +3280,7 @@ simplify_aggr_init_expr (tree *tp)\n \t expand_call{,_inline}.  */\n       cxx_mark_addressable (slot);\n       CALL_EXPR_RETURN_SLOT_OPT (call_expr) = true;\n-      call_expr = build2 (MODIFY_EXPR, TREE_TYPE (call_expr), slot, call_expr);\n+      call_expr = build2 (INIT_EXPR, TREE_TYPE (call_expr), slot, call_expr);\n     }\n   else if (style == pcc)\n     {"}, {"sha": "f6266e10cbc9a6aeb9e534411354f45fa51aa772", "filename": "gcc/gimplify.c", "status": "modified", "additions": 24, "deletions": 13, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/941f78d1036d0fd5597219eb5fe0ef672d25a6a7/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/941f78d1036d0fd5597219eb5fe0ef672d25a6a7/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=941f78d1036d0fd5597219eb5fe0ef672d25a6a7", "patch": "@@ -1914,9 +1914,10 @@ gimplify_compound_lval (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n {\n   tree *p;\n   VEC(tree,heap) *stack;\n-  enum gimplify_status ret = GS_OK, tret;\n+  enum gimplify_status ret = GS_ALL_DONE, tret;\n   int i;\n   location_t loc = EXPR_LOCATION (*expr_p);\n+  tree expr = *expr_p;\n \n   /* Create a stack of the subexpressions so later we can walk them in\n      order from inner to outer.  */\n@@ -2070,11 +2071,12 @@ gimplify_compound_lval (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n   if ((fallback & fb_rvalue) && TREE_CODE (*expr_p) == COMPONENT_REF)\n     {\n       canonicalize_component_ref (expr_p);\n-      ret = MIN (ret, GS_OK);\n     }\n \n   VEC_free (tree, heap, stack);\n \n+  gcc_assert (*expr_p == expr || ret != GS_ALL_DONE);\n+\n   return ret;\n }\n \n@@ -6567,7 +6569,8 @@ gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n       else if (ret != GS_UNHANDLED)\n \tbreak;\n \n-      ret = GS_OK;\n+      /* Make sure that all the cases set 'ret' appropriately.  */\n+      ret = GS_UNHANDLED;\n       switch (TREE_CODE (*expr_p))\n \t{\n \t  /* First deal with the special cases.  */\n@@ -6601,6 +6604,7 @@ gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \t    {\n \t      *expr_p = get_initialized_tmp_var (*expr_p, pre_p, post_p);\n \t      mark_addressable (*expr_p);\n+\t      ret = GS_OK;\n \t    }\n \t  break;\n \n@@ -6615,6 +6619,7 @@ gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \t    {\n \t      *expr_p = get_initialized_tmp_var (*expr_p, pre_p, post_p);\n \t      mark_addressable (*expr_p);\n+\t      ret = GS_OK;\n \t    }\n \t  break;\n \n@@ -6633,10 +6638,6 @@ gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \tcase INIT_EXPR:\n \t  ret = gimplify_modify_expr (expr_p, pre_p, post_p,\n \t\t\t\t      fallback != fb_none);\n-\t  /* Don't let the end of loop logic change GS_OK to GS_ALL_DONE;\n-\t     gimplify_modify_expr_rhs might have changed the RHS.  */\n-\t  if (ret == GS_OK && *expr_p)\n-\t    continue;\n \t  break;\n \n \tcase TRUTH_ANDIF_EXPR:\n@@ -6680,6 +6681,7 @@ gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \t      /* Just strip a conversion to void (or in void context) and\n \t\t try again.  */\n \t      *expr_p = TREE_OPERAND (*expr_p, 0);\n+\t      ret = GS_OK;\n \t      break;\n \t    }\n \n@@ -6700,7 +6702,10 @@ gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \tcase INDIRECT_REF:\n \t  *expr_p = fold_indirect_ref_loc (input_location, *expr_p);\n \t  if (*expr_p != save_expr)\n-\t    break;\n+\t    {\n+\t      ret = GS_OK;\n+\t      break;\n+\t    }\n \t  /* else fall through.  */\n \tcase ALIGN_INDIRECT_REF:\n \tcase MISALIGNED_INDIRECT_REF:\n@@ -6727,7 +6732,10 @@ gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \t  if (fallback & fb_lvalue)\n \t    ret = GS_ALL_DONE;\n \t  else\n-\t    *expr_p = DECL_INITIAL (*expr_p);\n+\t    {\n+\t      *expr_p = DECL_INITIAL (*expr_p);\n+\t      ret = GS_OK;\n+\t    }\n \t  break;\n \n \tcase DECL_EXPR:\n@@ -6762,6 +6770,7 @@ gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \t    }\n \t  gimplify_seq_add_stmt (pre_p,\n \t\t\t  gimple_build_goto (GOTO_DESTINATION (*expr_p)));\n+\t  ret = GS_ALL_DONE;\n \t  break;\n \n \tcase PREDICT_EXPR:\n@@ -6804,7 +6813,7 @@ gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \t\t  append_to_statement_list (ce->value, &temp);\n \n \t      *expr_p = temp;\n-\t      ret = GS_OK;\n+\t      ret = temp ? GS_OK : GS_ALL_DONE;\n \t    }\n \t  /* C99 code may assign to an array in a constructed\n \t     structure or union, and this has undefined behavior only\n@@ -6814,6 +6823,7 @@ gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \t    {\n \t      *expr_p = get_initialized_tmp_var (*expr_p, pre_p, post_p);\n \t      mark_addressable (*expr_p);\n+\t      ret = GS_OK;\n \t    }\n \t  else\n \t    ret = GS_ALL_DONE;\n@@ -6961,6 +6971,7 @@ gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \t\t\t   gimple_test_f, fallback);\n \t    gimplify_expr (&TREE_OPERAND (*expr_p, 1), pre_p, post_p,\n \t\t\t   is_gimple_val, fb_rvalue);\n+\t    ret = GS_ALL_DONE;\n \t  }\n \t  break;\n \n@@ -7048,6 +7059,7 @@ gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \t\t   TREE_TYPE (*expr_p))))\n \t    {\n \t      *expr_p = tmp;\n+\t      ret = GS_OK;\n \t      break;\n \t    }\n \t  /* Convert (void *)&a + 4 into (void *)&a[1].  */\n@@ -7063,6 +7075,7 @@ gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \t\t\t\t\t    0)))))\n \t     {\n                *expr_p = fold_convert (TREE_TYPE (*expr_p), tmp);\n+\t       ret = GS_OK;\n \t       break;\n \t     }\n           /* FALLTHRU */\n@@ -7132,9 +7145,7 @@ gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \t  break;\n \t}\n \n-      /* If we replaced *expr_p, gimplify again.  */\n-      if (ret == GS_OK && (*expr_p == NULL || *expr_p == save_expr))\n-\tret = GS_ALL_DONE;\n+      gcc_assert (*expr_p || ret != GS_OK);\n     }\n   while (ret == GS_OK);\n "}]}