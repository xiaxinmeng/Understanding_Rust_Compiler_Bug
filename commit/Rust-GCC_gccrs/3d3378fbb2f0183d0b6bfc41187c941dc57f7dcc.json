{"sha": "3d3378fbb2f0183d0b6bfc41187c941dc57f7dcc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2QzMzc4ZmJiMmYwMTgzZDBiNmJmYzQxMTg3Yzk0MWRjNTdmN2RjYw==", "commit": {"author": {"name": "Steve Baird", "email": "baird@adacore.com", "date": "2020-08-08T22:04:21Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-10-21T07:22:50Z"}, "message": "[Ada] Implement missing function result finalization.\n\ngcc/ada/\n\n\t* exp_ch6.adb (Insert_Post_Call_Actions): When a function's\n\tresult type requires finalization and we decide to make copy of\n\ta call to the function and subsequently refer only to the copy,\n\tthen don't forget to finalize the original function result\n\tobject.", "tree": {"sha": "0960b998a0714563bfcef72680175fbe6d2826cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0960b998a0714563bfcef72680175fbe6d2826cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d3378fbb2f0183d0b6bfc41187c941dc57f7dcc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d3378fbb2f0183d0b6bfc41187c941dc57f7dcc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d3378fbb2f0183d0b6bfc41187c941dc57f7dcc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d3378fbb2f0183d0b6bfc41187c941dc57f7dcc/comments", "author": {"login": "swbaird", "id": 50751052, "node_id": "MDQ6VXNlcjUwNzUxMDUy", "avatar_url": "https://avatars.githubusercontent.com/u/50751052?v=4", "gravatar_id": "", "url": "https://api.github.com/users/swbaird", "html_url": "https://github.com/swbaird", "followers_url": "https://api.github.com/users/swbaird/followers", "following_url": "https://api.github.com/users/swbaird/following{/other_user}", "gists_url": "https://api.github.com/users/swbaird/gists{/gist_id}", "starred_url": "https://api.github.com/users/swbaird/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/swbaird/subscriptions", "organizations_url": "https://api.github.com/users/swbaird/orgs", "repos_url": "https://api.github.com/users/swbaird/repos", "events_url": "https://api.github.com/users/swbaird/events{/privacy}", "received_events_url": "https://api.github.com/users/swbaird/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb7584a41d9f565a90fc24c418b2c7f0233ba31e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb7584a41d9f565a90fc24c418b2c7f0233ba31e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb7584a41d9f565a90fc24c418b2c7f0233ba31e"}], "stats": {"total": 80, "additions": 73, "deletions": 7}, "files": [{"sha": "d8f74efeebb9ac97e84e62c6fa710ebdd606540a", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 73, "deletions": 7, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d3378fbb2f0183d0b6bfc41187c941dc57f7dcc/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d3378fbb2f0183d0b6bfc41187c941dc57f7dcc/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=3d3378fbb2f0183d0b6bfc41187c941dc57f7dcc", "patch": "@@ -8390,13 +8390,28 @@ package body Exp_Ch6 is\n             --  the write back to be skipped completely.\n \n             --  To deal with this, we replace the call by\n-\n+            --\n             --    do\n             --       Tnnn : constant function-result-type := function-call;\n             --       Post_Call actions\n             --    in\n             --       Tnnn;\n             --    end;\n+            --\n+            --   However, that doesn't work if function-result-type requires\n+            --   finalization (because function-call's result never gets\n+            --   finalized). So in that case, we instead replace the call by\n+            --\n+            --    do\n+            --       type Ref is access all function-result-type;\n+            --       Ptr : constant Ref := function-call'Reference;\n+            --       Tnnn : constant function-result-type := Ptr.all;\n+            --       Finalize (Ptr.all);\n+            --       Post_Call actions\n+            --    in\n+            --       Tnnn;\n+            --    end;\n+            --\n \n             declare\n                Loc   : constant Source_Ptr := Sloc (N);\n@@ -8405,12 +8420,63 @@ package body Exp_Ch6 is\n                Name  : constant Node_Id   := Relocate_Node (N);\n \n             begin\n-               Prepend_To (Post_Call,\n-                 Make_Object_Declaration (Loc,\n-                   Defining_Identifier => Tnnn,\n-                   Object_Definition   => New_Occurrence_Of (FRTyp, Loc),\n-                   Constant_Present    => True,\n-                   Expression          => Name));\n+               if Needs_Finalization (FRTyp) then\n+                  declare\n+                     Ptr_Typ : constant Entity_Id := Make_Temporary (Loc, 'A');\n+\n+                     Ptr_Typ_Decl : constant Node_Id :=\n+                       Make_Full_Type_Declaration (Loc,\n+                         Defining_Identifier => Ptr_Typ,\n+                         Type_Definition     =>\n+                           Make_Access_To_Object_Definition (Loc,\n+                             All_Present        => True,\n+                             Subtype_Indication =>\n+                               New_Occurrence_Of (FRTyp, Loc)));\n+\n+                     Ptr_Obj : constant Entity_Id :=\n+                       Make_Temporary (Loc, 'P');\n+\n+                     Ptr_Obj_Decl : constant Node_Id :=\n+                       Make_Object_Declaration (Loc,\n+                         Defining_Identifier => Ptr_Obj,\n+                         Object_Definition   =>\n+                           New_Occurrence_Of (Ptr_Typ, Loc),\n+                         Constant_Present    => True,\n+                         Expression          =>\n+                           Make_Attribute_Reference (Loc,\n+                           Prefix         => Name,\n+                           Attribute_Name => Name_Unrestricted_Access));\n+\n+                     function Ptr_Dereference return Node_Id is\n+                       (Make_Explicit_Dereference (Loc,\n+                          Prefix => New_Occurrence_Of (Ptr_Obj, Loc)));\n+\n+                     Tnn_Decl : constant Node_Id :=\n+                       Make_Object_Declaration (Loc,\n+                         Defining_Identifier => Tnnn,\n+                         Object_Definition   => New_Occurrence_Of (FRTyp, Loc),\n+                         Constant_Present    => True,\n+                         Expression          => Ptr_Dereference);\n+\n+                     Finalize_Call : constant Node_Id :=\n+                       Make_Final_Call\n+                         (Obj_Ref => Ptr_Dereference, Typ => FRTyp);\n+                  begin\n+                     --  Prepend in reverse order\n+\n+                     Prepend_To (Post_Call, Finalize_Call);\n+                     Prepend_To (Post_Call, Tnn_Decl);\n+                     Prepend_To (Post_Call, Ptr_Obj_Decl);\n+                     Prepend_To (Post_Call, Ptr_Typ_Decl);\n+                  end;\n+               else\n+                  Prepend_To (Post_Call,\n+                    Make_Object_Declaration (Loc,\n+                      Defining_Identifier => Tnnn,\n+                      Object_Definition   => New_Occurrence_Of (FRTyp, Loc),\n+                      Constant_Present    => True,\n+                      Expression          => Name));\n+               end if;\n \n                Rewrite (N,\n                  Make_Expression_With_Actions (Loc,"}]}