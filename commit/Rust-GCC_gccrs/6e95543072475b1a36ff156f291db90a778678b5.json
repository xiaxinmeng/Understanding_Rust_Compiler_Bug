{"sha": "6e95543072475b1a36ff156f291db90a778678b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmU5NTU0MzA3MjQ3NWIxYTM2ZmYxNTZmMjkxZGI5MGE3Nzg2NzhiNQ==", "commit": {"author": {"name": "Ziemowit Laski", "email": "zlaski@apple.com", "date": "2005-05-17T20:11:44Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "2005-05-17T20:11:44Z"}, "message": "Yet more Objective-C++...\n\n        * c-common.h (objc_finish_try_stmt): Add.\n        (objc_build_synchronized): Add.\n        (objc_generate_write_barrier): Add.\n        * stub-objc.c (objc_build_synchronized): Add return value.\n        (objc_finish_try_stmt): Likewise.\n        (objc_generate_write_barrier): Add.\n\n        * c-common.h (objc_rewrite_function_call): Add.\n        * c-typeck.c (build_function_call): Allow objc to rewrite\n        FUNCTION_DECLs.\n        (build_modify_expr): Allow objc to generate write barriers.\n        * c.opt (Wassign-intercept): Add.\n        (Wstrict-selector-match): Add.\n        (fobjc-call-cxx-cdtors): Add.\n        (fobjc-direct-dispatch): Add.\n        (fobjc-gc): Add.\n        * dbxout.c (get_lang_number): Add Objective-C++ support.\n        * doc/invoke.texi (-fobjc-call-cxx-cdtors): Likewise.\n        (-Wstrict-selector-match): Likewise.\n        (-fobjc-direct-dispatch): Likewise.\n        (-Wassign-intercept): Likewise.\n        (Overall Options): Likewise.\n        * gengtype.c (get_output_file_with_visibility): Likewise.\n        * stub-objc.c (objc_rewrite_function_call): Add.\n        * config/darwin.h (ASM_OUTPUT_LABELREF): Improved quoting support.\n\n        * c-common.c (flag_objc_exceptions): Remove.\n        (flag_objc_sjlj_exceptions): Remove.\n        * c-decl.c (objc_mark_locals_volatile): Don't change decls\n        that are already ok.\n        * c-opts.c (c_common_handle_option, case\n        OPT_fobjc_exceptions): Remove.\n        (case OPT_fobjc_sjlj_exceptions): Remove\n        * c.opt (fobjc-call-cxx-cdtors): Have opt create the flag.\n        (fobjc-exceptions): Likewise.\n        (fobjc-sjlj-exceptions): Likewise.\n        * config/rs6000/darwin.h (OFFS_MSGSEND_FAST): Add.\n        (OFFS_ASSIGNIVAR_FAST): Add.\n\nFrom-SVN: r99858", "tree": {"sha": "b42ed8b5d16d1706b3b4c8508c64d8b1dab121f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b42ed8b5d16d1706b3b4c8508c64d8b1dab121f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e95543072475b1a36ff156f291db90a778678b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e95543072475b1a36ff156f291db90a778678b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e95543072475b1a36ff156f291db90a778678b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e95543072475b1a36ff156f291db90a778678b5/comments", "author": null, "committer": null, "parents": [{"sha": "38b9c8c3a989be4b6efec34f1e60a39425d27fb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38b9c8c3a989be4b6efec34f1e60a39425d27fb6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38b9c8c3a989be4b6efec34f1e60a39425d27fb6"}], "stats": {"total": 236, "additions": 206, "deletions": 30}, "files": [{"sha": "127f1049574f04a06b1fab364f4d4f9762828446", "filename": "gcc/ChangeLog", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e95543072475b1a36ff156f291db90a778678b5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e95543072475b1a36ff156f291db90a778678b5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6e95543072475b1a36ff156f291db90a778678b5", "patch": "@@ -1,3 +1,46 @@\n+2005-05-17  Mike Stump  <mrs@apple.com>\n+\n+\tYet more Objective-C++...\n+\n+\t* c-common.h (objc_finish_try_stmt): Add.\n+\t(objc_build_synchronized): Add.\n+\t(objc_generate_write_barrier): Add.\n+\t* stub-objc.c (objc_build_synchronized): Add return value.\n+\t(objc_finish_try_stmt): Likewise.\n+\t(objc_generate_write_barrier): Add.\n+\n+\t* c-common.h (objc_rewrite_function_call): Add.\n+\t* c-typeck.c (build_function_call): Allow objc to rewrite\n+\tFUNCTION_DECLs.\n+\t(build_modify_expr): Allow objc to generate write barriers.\n+\t* c.opt (Wassign-intercept): Add.\n+\t(Wstrict-selector-match): Add.\n+\t(fobjc-call-cxx-cdtors): Add.\n+\t(fobjc-direct-dispatch): Add.\n+\t(fobjc-gc): Add.\n+\t* dbxout.c (get_lang_number): Add Objective-C++ support.\n+\t* doc/invoke.texi (-fobjc-call-cxx-cdtors): Likewise.\n+\t(-Wstrict-selector-match): Likewise.\n+\t(-fobjc-direct-dispatch): Likewise.\n+\t(-Wassign-intercept): Likewise.\n+\t(Overall Options): Likewise.\n+\t* gengtype.c (get_output_file_with_visibility): Likewise.\n+\t* stub-objc.c (objc_rewrite_function_call): Add.\n+\t* config/darwin.h (ASM_OUTPUT_LABELREF): Improved quoting support.\n+\n+\t* c-common.c (flag_objc_exceptions): Remove.\n+\t(flag_objc_sjlj_exceptions): Remove.\n+\t* c-decl.c (objc_mark_locals_volatile): Don't change decls\n+\tthat are already ok.\n+\t* c-opts.c (c_common_handle_option, case\n+\tOPT_fobjc_exceptions): Remove.\n+\t(case OPT_fobjc_sjlj_exceptions): Remove\n+\t* c.opt (fobjc-call-cxx-cdtors): Have opt create the flag.\n+\t(fobjc-exceptions): Likewise.\n+\t(fobjc-sjlj-exceptions): Likewise.\n+\t* config/rs6000/darwin.h (OFFS_MSGSEND_FAST): Add.\n+\t(OFFS_ASSIGNIVAR_FAST): Add.\n+\t\n 2005-05-17  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \t* config/sparc/sparc.md (movhi): Do not test constness\n@@ -38,6 +81,7 @@\n \t* cfgloopanal.c (just_once_each_iteration_p): Make the loop argument\n \tconst.\n \n+>>>>>>> 2.8834\n 2005-05-17  Zdenek Dvorak  <dvorakz@suse.cz>\n \n \t* ggc-page.c (ggc_alloc_stat): Record amount of memory allocated."}, {"sha": "c9027463795546d8820414901a404eac0ac437e7", "filename": "gcc/c-common.c", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e95543072475b1a36ff156f291db90a778678b5/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e95543072475b1a36ff156f291db90a778678b5/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=6e95543072475b1a36ff156f291db90a778678b5", "patch": "@@ -290,13 +290,6 @@ int warn_strict_null_sentinel;\n    will most likely result in crashes.  */\n int flag_nil_receivers = 1;\n \n-/* Nonzero means that we will allow new ObjC exception syntax (@throw,\n-   @try, etc.) in source code.  */\n-int flag_objc_exceptions = 0;\n-\n-/* Nonzero means that we generate NeXT setjmp based exceptions.  */\n-int flag_objc_sjlj_exceptions = -1;\n-\n /* Nonzero means that code generation will be altered to support\n    \"zero-link\" execution.  This currently affects ObjC only, but may\n    affect other languages in the future.  */"}, {"sha": "e4c899dbc8eb9207cd4738846f49f514a96aee7a", "filename": "gcc/c-common.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e95543072475b1a36ff156f291db90a778678b5/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e95543072475b1a36ff156f291db90a778678b5/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=6e95543072475b1a36ff156f291db90a778678b5", "patch": "@@ -874,6 +874,7 @@ extern tree objc_is_object_ptr (tree);\n extern void objc_check_decl (tree);\n extern int objc_is_reserved_word (tree);\n extern int objc_comptypes (tree, tree, int);\n+extern tree objc_rewrite_function_call (tree, tree);\n extern tree objc_message_selector (void);\n extern tree objc_lookup_ivar (tree, tree);\n extern void objc_clear_super_receiver (void);\n@@ -910,13 +911,14 @@ extern void objc_add_instance_variable (tree);\n extern tree objc_build_keyword_decl (tree, tree, tree);\n extern tree objc_build_throw_stmt (tree);\n extern void objc_begin_try_stmt (location_t, tree);\n-extern void objc_finish_try_stmt (void);\n+extern tree objc_finish_try_stmt (void);\n extern void objc_begin_catch_clause (tree);\n extern void objc_finish_catch_clause (void);\n extern void objc_build_finally_clause (location_t, tree);\n-extern void objc_build_synchronized (location_t, tree, tree);\n+extern tree objc_build_synchronized (location_t, tree, tree);\n extern int objc_static_init_needed_p (void);\n extern tree objc_generate_static_init_call (tree);\n+extern tree objc_generate_write_barrier (tree, enum tree_code, tree);\n \n /* The following are provided by the C and C++ front-ends, and called by\n    ObjC/ObjC++.  */"}, {"sha": "b71838755f8f2dadb737c1582b876eb57785cc5d", "filename": "gcc/c-decl.c", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e95543072475b1a36ff156f291db90a778678b5/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e95543072475b1a36ff156f291db90a778678b5/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=6e95543072475b1a36ff156f291db90a778678b5", "patch": "@@ -567,12 +567,22 @@ objc_mark_locals_volatile (void *enclosing_blk)\n     {\n       for (b = scope->bindings; b; b = b->prev)\n \t{\n-\t  if (TREE_CODE (b->decl) == VAR_DECL\n-\t      || TREE_CODE (b->decl) == PARM_DECL)\n+\t  tree decl = b->decl;\n+\n+\t  /* Do not mess with variables that are 'static' or (already)\n+\t     'volatile'.  */\n+\t  if (!TREE_THIS_VOLATILE (decl) && !TREE_STATIC (decl)\n+\t      && (TREE_CODE (decl) == VAR_DECL\n+\t\t  || TREE_CODE (decl) == PARM_DECL))\n \t    {\n-\t      C_DECL_REGISTER (b->decl) = 0;\n-\t      DECL_REGISTER (b->decl) = 0;\n-\t      TREE_THIS_VOLATILE (b->decl) = 1;\n+\t      TREE_TYPE (decl)\n+\t\t= build_qualified_type (TREE_TYPE (decl),\n+\t\t\t\t\t(TYPE_QUALS (TREE_TYPE (decl))\n+\t\t\t\t\t | TYPE_QUAL_VOLATILE));\n+\t      TREE_THIS_VOLATILE (decl) = 1;\n+\t      TREE_SIDE_EFFECTS (decl) = 1;\n+\t      DECL_REGISTER (decl) = 0;\n+\t      C_DECL_REGISTER (decl) = 0;\n \t    }\n \t}\n "}, {"sha": "fd0765cf71fbdcf0843a040069886be96f295e96", "filename": "gcc/c-opts.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e95543072475b1a36ff156f291db90a778678b5/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e95543072475b1a36ff156f291db90a778678b5/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=6e95543072475b1a36ff156f291db90a778678b5", "patch": "@@ -699,14 +699,6 @@ c_common_handle_option (size_t scode, const char *arg, int value)\n       flag_no_nonansi_builtin = !value;\n       break;\n \n-    case OPT_fobjc_exceptions:\n-      flag_objc_exceptions = value;\n-      break;\n-\n-    case OPT_fobjc_sjlj_exceptions:\n-      flag_objc_sjlj_exceptions = value;\n-      break;\n-\n     case OPT_foperator_names:\n       cpp_opts->operator_names = value;\n       break;"}, {"sha": "e8b2b372e1d3c1be83cd2b5f925957735ca86d87", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e95543072475b1a36ff156f291db90a778678b5/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e95543072475b1a36ff156f291db90a778678b5/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=6e95543072475b1a36ff156f291db90a778678b5", "patch": "@@ -2023,6 +2023,10 @@ build_function_call (tree function, tree params)\n   else\n     function = default_conversion (function);\n \n+  /* For Objective-C, convert any calls via a cast to OBJC_TYPE_REF\n+     expressions, like those used for ObjC messenger dispatches.  */\n+  function = objc_rewrite_function_call (function, params);\n+\n   fntype = TREE_TYPE (function);\n \n   if (TREE_CODE (fntype) == ERROR_MARK)\n@@ -3485,6 +3489,14 @@ build_modify_expr (tree lhs, enum tree_code modifycode, tree rhs)\n   if (TREE_CODE (newrhs) == ERROR_MARK)\n     return error_mark_node;\n \n+  /* Emit ObjC write barrier, if necessary.  */\n+  if (c_dialect_objc () && flag_objc_gc)\n+    {\n+      result = objc_generate_write_barrier (lhs, modifycode, newrhs);\n+      if (result)\n+\treturn result;\n+    }\n+\n   /* Scan operands.  */\n \n   result = build2 (MODIFY_EXPR, lhstype, lhs, newrhs);"}, {"sha": "976f6e9c3556e8a0258617834c32227bcf1373de", "filename": "gcc/c.opt", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e95543072475b1a36ff156f291db90a778678b5/gcc%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e95543072475b1a36ff156f291db90a778678b5/gcc%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc.opt?ref=6e95543072475b1a36ff156f291db90a778678b5", "patch": "@@ -120,6 +120,10 @@ Wall\n C ObjC C++ ObjC++\n Enable most warning messages\n \n+Wassign-intercept\n+ObjC ObjC++ Var(warn_assign_intercept)\n+Warn whenever an Objective-C assignment is being intercepted by the garbage collector\n+\n Wbad-function-cast\n C ObjC Var(warn_bad_function_cast)\n Warn about casting functions to incompatible types\n@@ -362,6 +366,10 @@ Wstrict-prototypes\n C ObjC Var(warn_strict_prototypes)\n Warn about unprototyped function declarations\n \n+Wstrict-selector-match\n+ObjC ObjC++ Var(warn_strict_selector_match)\n+Warn if type signatures of candidate methods do not match exactly\n+\n Wsynth\n C++ ObjC++ Var(warn_synth)\n Warn when synthesis behavior differs from Cfront\n@@ -564,12 +572,29 @@ C++ ObjC++\n fnonnull-objects\n C++ ObjC++\n \n+; Generate special '- .cxx_construct' and '- .cxx_destruct' methods\n+; to initialize any non-POD ivars in Objective-C++ classes.\n+fobjc-call-cxx-cdtors\n+ObjC++ Var(flag_objc_call_cxx_cdtors)\n+Generate special Objective-C methods to initialize/destroy non-POD C++ ivars, if needed\n+\n+fobjc-direct-dispatch\n+ObjC ObjC++ Var(flag_objc_direct_dispatch)\n+Allow fast jumps to the message dispatcher\n+\n+; Nonzero means that we will allow new ObjC exception syntax (@throw,\n+; @try, etc.) in source code.\n fobjc-exceptions\n-ObjC ObjC++\n+ObjC ObjC++ Var(flag_objc_exceptions)\n Enable Objective-C exception and synchronization syntax\n \n+fobjc-gc\n+ObjC ObjC++ Var(flag_objc_gc)\n+Enable garbage collection (GC) in Objective-C/Objective-C++ programs\n+\n+; Nonzero means that we generate NeXT setjmp based exceptions.\n fobjc-sjlj-exceptions\n-ObjC ObjC++\n+ObjC ObjC++ Var(flag_objc_sjlj_exceptions) Init(-1)\n Enable Objective-C setjmp exception handling runtime\n \n foperator-names"}, {"sha": "c2a53d0b45e7883b20c2128044225f087302928b", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e95543072475b1a36ff156f291db90a778678b5/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e95543072475b1a36ff156f291db90a778678b5/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=6e95543072475b1a36ff156f291db90a778678b5", "patch": "@@ -533,14 +533,19 @@ Boston, MA 02111-1307, USA.  */\n \t     machopic_validate_stub_or_non_lazy_ptr (xname);\t\t     \\\n \t   else if (len > 14 && !strcmp (\"$non_lazy_ptr\", xname + len - 13)) \\\n \t     machopic_validate_stub_or_non_lazy_ptr (xname);\t\t     \\\n-\t   fputs (&xname[1], FILE);\t\t\t\t\t     \\\n+\t   if (xname[1] != '\"' && name_needs_quotes (&xname[1]))\t     \\\n+\t     fprintf (FILE, \"\\\"%s\\\"\", &xname[1]);\t\t\t     \\\n+\t   else\t\t\t\t\t\t\t\t     \\\n+\t     fputs (&xname[1], FILE); \t\t\t\t\t     \\\n \t }\t\t\t\t\t\t\t\t     \\\n        else if (xname[0] == '+' || xname[0] == '-')\t\t\t     \\\n          fprintf (FILE, \"\\\"%s\\\"\", xname);\t\t\t\t     \\\n        else if (!strncmp (xname, \"_OBJC_\", 6))\t\t\t\t     \\\n          fprintf (FILE, \"L%s\", xname);\t\t\t\t\t     \\\n        else if (!strncmp (xname, \".objc_class_name_\", 17))\t\t     \\\n \t fprintf (FILE, \"%s\", xname);\t\t\t\t\t     \\\n+       else if (xname[0] != '\"' && name_needs_quotes (xname))\t\t     \\\n+\t fprintf (FILE, \"\\\"%s\\\"\", xname);\t\t\t\t     \\\n        else\t\t\t\t\t\t\t\t     \\\n          asm_fprintf (FILE, \"%U%s\", xname);\t\t\t\t     \\\n   } while (0)"}, {"sha": "3890dea12d8eae2f48bbd2b6d1a8d77ff81042ca", "filename": "gcc/config/rs6000/darwin.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e95543072475b1a36ff156f291db90a778678b5/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e95543072475b1a36ff156f291db90a778678b5/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin.h?ref=6e95543072475b1a36ff156f291db90a778678b5", "patch": "@@ -407,3 +407,9 @@ do {\t\t\t\t\t\t\t\t\t\\\n    references for data to the original instance of that data.  */\n \n #define TARGET_FIX_AND_CONTINUE (darwin_fix_and_continue)\n+\n+/* This is the reserved direct dispatch address for Objective-C.  */\n+#define OFFS_MSGSEND_FAST\t\t0xFFFEFF00\n+\n+/* This is the reserved ivar address Objective-C.  */\n+#define OFFS_ASSIGNIVAR_FAST\t\t0xFFFEFEC0"}, {"sha": "a4a036bb51f8aa31351a37d02b956fbb83ce8c45", "filename": "gcc/dbxout.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e95543072475b1a36ff156f291db90a778678b5/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e95543072475b1a36ff156f291db90a778678b5/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=6e95543072475b1a36ff156f291db90a778678b5", "patch": "@@ -971,6 +971,8 @@ get_lang_number (void)\n     return N_SO_PASCAL;\n   else if (strcmp (language_string, \"GNU Objective-C\") == 0)\n     return N_SO_OBJC;\n+  else if (strcmp (language_string, \"GNU Objective-C++\") == 0)\n+    return N_SO_OBJCPLUS;\n   else\n     return 0;\n "}, {"sha": "96e3823b81548c5b2aec1b91c113dfeb7ba47dc7", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 61, "deletions": 1, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e95543072475b1a36ff156f291db90a778678b5/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e95543072475b1a36ff156f291db90a778678b5/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=6e95543072475b1a36ff156f291db90a778678b5", "patch": "@@ -197,11 +197,17 @@ Objective-C and Objective-C++ Dialects}.\n -fconstant-string-class=@var{class-name} @gol\n -fgnu-runtime  -fnext-runtime @gol\n -fno-nil-receivers @gol\n+-fobjc-call-cxx-cdtors @gol\n+-fobjc-direct-dispatch @gol\n -fobjc-exceptions @gol\n+-fobjc-gc @gol\n -freplace-objc-classes @gol\n -fzero-link @gol\n -gen-decls @gol\n--Wno-protocol  -Wselector -Wundeclared-selector}\n+-Wassign-intercept @gol\n+-Wno-protocol  -Wselector @gol\n+-Wstrict-selector-match @gol\n+-Wundeclared-selector}\n \n @item Language Independent Options\n @xref{Language Independent Options,,Options to Control Diagnostic Messages Formatting}.\n@@ -816,6 +822,13 @@ C++ source code which must be preprocessed.  Note that in @samp{.cxx},\n the last two letters must both be literally @samp{x}.  Likewise,\n @samp{.C} refers to a literal capital C@.\n \n+@item @var{file}.mm\n+@itemx @var{file}.M\n+Objective-C++ source code which must be preprocessed.\n+\n+@item @var{file}.mii\n+Objective-C++ source code which should not be preprocessed.\n+\n @item @var{file}.hh\n @itemx @var{file}.H\n C++ header file to be turned into a precompiled header.\n@@ -1897,6 +1910,35 @@ is not @code{nil}.  This allows for more efficient entry points in the runtime\n to be used.  Currently, this option is only available in conjunction with\n the NeXT runtime on Mac OS X 10.3 and later.\n \n+@item -fobjc-call-cxx-cdtors\n+@opindex fobjc-call-cxx-cdtors\n+For each Objective-C class, check if any of its instance variables is a\n+C++ object with a non-trivial default constructor.  If so, synthesize a\n+special @code{- (id) .cxx_construct} instance method that will run\n+non-trivial default constructors on any such instance variables, in order,\n+and then return @code{self}.  Similarly, check if any instance variable\n+is a C++ object with a non-trivial destructor, and if so, synthesize a\n+special @code{- (void) .cxx_destruct} method that will run\n+all such default destructors, in reverse order.\n+\n+The @code{- (id) .cxx_construct} and/or @code{- (void) .cxx_destruct} methods\n+thusly generated will only operate on instance variables declared in the\n+current Objective-C class, and not those inherited from superclasses.  It\n+is the responsibility of the Objective-C runtime to invoke all such methods\n+in an object's inheritance hierarchy.  The @code{- (id) .cxx_construct} methods\n+will be invoked by the runtime immediately after a new object\n+instance is allocated; the @code{- (void) .cxx_destruct} methods will\n+be invoked immediately before the runtime deallocates an object instance.\n+\n+As of this writing, only the NeXT runtime on Mac OS X 10.4 and later has\n+support for invoking the @code{- (id) .cxx_construct} and\n+@code{- (void) .cxx_destruct} methods.\n+\n+@item -fobjc-direct-dispatch\n+@opindex fobjc-direct-dispatch\n+Allow fast jumps to the message dispatcher.  On Darwin this is\n+accompilished via the comm page.\n+\n @item -fobjc-exceptions\n @opindex fobjc-exceptions\n Enable syntactic support for structured exception handling in Objective-C,\n@@ -1989,6 +2031,10 @@ Unlike Java, Objective-C does not allow for entire methods to be marked\n @code{@@synchronized} blocks is allowed, and will cause the guarding object\n to be unlocked properly.\n \n+@item -fobjc-gc\n+@opindex fobjc-gc\n+Enable garbage collection (GC) in Objective-C and Objective-C++ programs.\n+\n @item -freplace-objc-classes\n @opindex freplace-objc-classes\n Emit a special marker instructing @command{ld(1)} not to statically link in\n@@ -2015,6 +2061,11 @@ for individual class implementations to be modified during program execution.\n Dump interface declarations for all classes seen in the source file to a\n file named @file{@var{sourcename}.decl}.\n \n+@item -Wassign-intercept\n+@opindex Wassign-intercept\n+Warn whenever an Objective-C assignment is being intercepted by the\n+garbage collector.\n+\n @item -Wno-protocol\n @opindex Wno-protocol\n If a class is declared to implement a protocol, a warning is issued for\n@@ -2038,6 +2089,15 @@ stage of compilation is not reached, for example because an error is\n found during compilation, or because the @option{-fsyntax-only} option is\n being used.\n \n+@item -Wstrict-selector-match\n+@opindex Wstrict-selector-match\n+Warn if multiple methods with differing argument and/or return types are\n+found for a given selector when attempting to send a message using this\n+selector to a receiver of type @code{id} or @code{Class}.  When this flag\n+is off (which is the default behavior), the compiler will omit such warnings\n+if any differences found are confined to types which share the same size\n+and alignment.\n+\n @item -Wundeclared-selector\n @opindex Wundeclared-selector\n Warn if a @code{@@selector(@dots{})} expression referring to an"}, {"sha": "519ff7258d2cfd1f9d232bd8f89712c3f144e865", "filename": "gcc/gengtype.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e95543072475b1a36ff156f291db90a778678b5/gcc%2Fgengtype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e95543072475b1a36ff156f291db90a778678b5/gcc%2Fgengtype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.c?ref=6e95543072475b1a36ff156f291db90a778678b5", "patch": "@@ -1238,6 +1238,15 @@ get_output_file_with_visibility (const char *input_file)\n     output_name = \"gt-c-common.h\", for_name = \"c-common.c\";\n   else if (strcmp (basename, \"c-tree.h\") == 0)\n     output_name = \"gt-c-decl.h\", for_name = \"c-decl.c\";\n+  else if (strncmp (basename, \"cp\", 2) == 0 && IS_DIR_SEPARATOR (basename[2])\n+\t   && strcmp (basename + 3, \"cp-tree.h\") == 0)\n+    output_name = \"gt-cp-tree.h\", for_name = \"cp/tree.c\";\n+  else if (strncmp (basename, \"cp\", 2) == 0 && IS_DIR_SEPARATOR (basename[2])\n+\t   && strcmp (basename + 3, \"decl.h\") == 0)\n+    output_name = \"gt-cp-decl.h\", for_name = \"cp/decl.c\";\n+  else if (strncmp (basename, \"cp\", 2) == 0 && IS_DIR_SEPARATOR (basename[2])\n+\t   && strcmp (basename + 3, \"name-lookup.h\") == 0)\n+    output_name = \"gt-cp-name-lookup.h\", for_name = \"cp/name-lookup.c\";\n   else if (strncmp (basename, \"objc\", 4) == 0 && IS_DIR_SEPARATOR (basename[4])\n \t   && strcmp (basename + 5, \"objc-act.h\") == 0)\n     output_name = \"gt-objc-objc-act.h\", for_name = \"objc/objc-act.c\";"}, {"sha": "ed9ac97258f4416eff28e4781eee20f8ee9409f0", "filename": "gcc/stub-objc.c", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e95543072475b1a36ff156f291db90a778678b5/gcc%2Fstub-objc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e95543072475b1a36ff156f291db90a778678b5/gcc%2Fstub-objc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstub-objc.c?ref=6e95543072475b1a36ff156f291db90a778678b5", "patch": "@@ -70,6 +70,12 @@ objc_comptypes (tree ARG_UNUSED (lhs), tree ARG_UNUSED (rhs),\n   return -1;\n }\n \n+tree\n+objc_rewrite_function_call (tree function, tree ARG_UNUSED (params))\n+{\n+  return function;\n+}\n+\n tree\n objc_message_selector (void)\n { \n@@ -257,21 +263,22 @@ objc_is_public (tree ARG_UNUSED (expr), tree ARG_UNUSED (identifier))\n }\n \n tree\n-objc_get_class_ivars (tree ARG_UNUSED (class_name))\n+objc_get_class_ivars (tree ARG_UNUSED (name))\n {\n   return 0;\n }\n \n tree\n-objc_build_throw_stmt (tree ARG_UNUSED (throw_expr))\n+objc_build_throw_stmt (tree ARG_UNUSED (expr))\n {\n   return 0;\n }\n \n-void\n+tree\n objc_build_synchronized (location_t ARG_UNUSED (start_locus),\n \t\t\t tree ARG_UNUSED (mutex), tree ARG_UNUSED (body))\n {\n+  return 0;\n }\n \n void\n@@ -295,7 +302,16 @@ objc_build_finally_clause (location_t ARG_UNUSED (finally_locus),\n {\n }\n \n-void\n+tree\n objc_finish_try_stmt (void)\n {\n+  return 0;\n }\n+\n+tree\n+objc_generate_write_barrier (tree ARG_UNUSED (lhs),\n+\t\t\t     enum tree_code ARG_UNUSED (modifycode),\n+\t\t\t     tree ARG_UNUSED (rhs))\n+{\n+  return 0;\n+}  "}]}