{"sha": "af14ce9ca964083f84d97b1865def9824a482cc1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWYxNGNlOWNhOTY0MDgzZjg0ZDk3YjE4NjVkZWY5ODI0YTQ4MmNjMQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-10-26T11:33:33Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-10-26T11:33:33Z"}, "message": "(find_basic_blocks): Ensure each live basic block is actually reachable.\n\n(life_analysis): Clean up handling of basic_block_drops_in.\n\nFrom-SVN: r8340", "tree": {"sha": "017abaee7426ed88e1015fba299dfa58a87b299b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/017abaee7426ed88e1015fba299dfa58a87b299b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af14ce9ca964083f84d97b1865def9824a482cc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af14ce9ca964083f84d97b1865def9824a482cc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af14ce9ca964083f84d97b1865def9824a482cc1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af14ce9ca964083f84d97b1865def9824a482cc1/comments", "author": null, "committer": null, "parents": [{"sha": "fd12bc82dac2d1074f07cd7ce9e94b4cb7017d1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd12bc82dac2d1074f07cd7ce9e94b4cb7017d1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd12bc82dac2d1074f07cd7ce9e94b4cb7017d1b"}], "stats": {"total": 20, "additions": 17, "deletions": 3}, "files": [{"sha": "b0245f8c94979b925ba72dd6a4ebe12f0364084d", "filename": "gcc/flow.c", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af14ce9ca964083f84d97b1865def9824a482cc1/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af14ce9ca964083f84d97b1865def9824a482cc1/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=af14ce9ca964083f84d97b1865def9824a482cc1", "patch": "@@ -608,6 +608,20 @@ find_basic_blocks (f, nonlocal_label_list)\n \t      }\n \t}\n \n+      /* ??? See if we have a \"live\" basic block that is not reachable.\n+\t This can happen if it is headed by a label that is preserved or\n+\t in one of the label lists, but no call or computed jump is in\n+\t the loop.  It's not clear if we can delete the block or not,\n+\t but don't for now.  However, we will mess up register status if\n+\t it remains unreachable, so add a fake reachability from the\n+\t previous block.  */\n+\n+      for (i = 1; i < n_basic_blocks; i++)\n+\tif (block_live[i] && ! basic_block_drops_in[i]\n+\t    && GET_CODE (basic_block_head[i]) == CODE_LABEL\n+\t    && LABEL_REFS (basic_block_head[i]) == basic_block_head[i])\n+\t  basic_block_drops_in[i] = 1;\n+\n       /* Now delete the code for any basic blocks that can't be reached.\n \t They can occur because jump_optimize does not recognize\n \t unreachable loops as unreachable.  */\n@@ -1061,18 +1075,18 @@ life_analysis (f, nregs)\n \n \t  {\n \t    register rtx jump, head;\n+\n \t    /* Update the basic_block_new_live_at_end's of the block\n \t       that falls through into this one (if any).  */\n \t    head = basic_block_head[i];\n-\t    jump = PREV_INSN (head);\n \t    if (basic_block_drops_in[i])\n \t      {\n-\t\tregister int from_block = BLOCK_NUM (jump);\n \t\tregister int j;\n \t\tfor (j = 0; j < regset_size; j++)\n-\t\t  basic_block_new_live_at_end[from_block][j]\n+\t\t  basic_block_new_live_at_end[i-1][j]\n \t\t    |= basic_block_live_at_start[i][j];\n \t      }\n+\n \t    /* Update the basic_block_new_live_at_end's of\n \t       all the blocks that jump to this one.  */\n \t    if (GET_CODE (head) == CODE_LABEL)"}]}