{"sha": "a8136932ccc4b64e807b1ca476473b2a3a5545e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTgxMzY5MzJjY2M0YjY0ZTgwN2IxY2E0NzY0NzNiMmEzYTU1NDVlOQ==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1997-06-20T21:16:32Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1997-06-20T21:16:32Z"}, "message": "(output_block_move): When loading addresses into registers,\n\nadd checks for ABI_N32 and ABI_64.\n\nFrom-SVN: r14267", "tree": {"sha": "12b9b374ee2cf15c9177c28f2f39c98a3cd779e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/12b9b374ee2cf15c9177c28f2f39c98a3cd779e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a8136932ccc4b64e807b1ca476473b2a3a5545e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8136932ccc4b64e807b1ca476473b2a3a5545e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8136932ccc4b64e807b1ca476473b2a3a5545e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8136932ccc4b64e807b1ca476473b2a3a5545e9/comments", "author": null, "committer": null, "parents": [{"sha": "b88c08b663d4447a41ce2c9cee318a20b952f905", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b88c08b663d4447a41ce2c9cee318a20b952f905", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b88c08b663d4447a41ce2c9cee318a20b952f905"}], "stats": {"total": 8, "additions": 6, "deletions": 2}, "files": [{"sha": "5b65ca1fc58ccfc76a69f69698c907f2aa5d1099", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8136932ccc4b64e807b1ca476473b2a3a5545e9/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8136932ccc4b64e807b1ca476473b2a3a5545e9/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=a8136932ccc4b64e807b1ca476473b2a3a5545e9", "patch": "@@ -2673,7 +2673,12 @@ output_block_move (insn, operands, num_regs, move_type)\n   /* If we are given global or static addresses, and we would be\n      emitting a few instructions, try to save time by using a\n      temporary register for the pointer.  */\n-  if (num_regs > 2 && (bytes > 2*align || move_type != BLOCK_MOVE_NORMAL))\n+  /* ??? The SGI Irix6 assembler fails when a SYMBOL_REF is used in\n+     an ldl/ldr instruction pair.  We play it safe, and always move\n+     constant addresses into registers when generating N32/N64 code, just\n+     in case we might emit an unaligned load instruction.  */\n+  if (num_regs > 2 && (bytes > 2*align || move_type != BLOCK_MOVE_NORMAL\n+\t\t       || mips_abi == ABI_N32 || mips_abi == ABI_64))\n     {\n       if (CONSTANT_P (src_reg))\n \t{\n@@ -2768,7 +2773,6 @@ output_block_move (insn, operands, num_regs, move_type)\n \t  bytes -= 8;\n \t}\n \n-      /* ??? Fails because of a MIPS assembler bug?  */\n       else if (TARGET_64BIT && bytes >= 8)\n \t{\n \t  if (BYTES_BIG_ENDIAN)"}]}