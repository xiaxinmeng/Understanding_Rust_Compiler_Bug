{"sha": "0dc7adad7e35a1627e03bb63074ff17a3900de9f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGRjN2FkYWQ3ZTM1YTE2MjdlMDNiYjYzMDc0ZmYxN2EzOTAwZGU5Zg==", "commit": {"author": {"name": "DJ Delorie", "email": "dj@redhat.com", "date": "2013-10-09T01:44:31Z"}, "committer": {"name": "DJ Delorie", "email": "dj@gcc.gnu.org", "date": "2013-10-09T01:44:31Z"}, "message": "rl78-expand.md (movqi): use operands[] not operandN.\n\n* config/rl78/rl78-expand.md (movqi): use operands[] not operandN.\n(movhi): Likewise.\n\nFrom-SVN: r203300", "tree": {"sha": "6261ee65262bd320c06769bbd45d547ba024b080", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6261ee65262bd320c06769bbd45d547ba024b080"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0dc7adad7e35a1627e03bb63074ff17a3900de9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dc7adad7e35a1627e03bb63074ff17a3900de9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0dc7adad7e35a1627e03bb63074ff17a3900de9f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dc7adad7e35a1627e03bb63074ff17a3900de9f/comments", "author": null, "committer": null, "parents": [{"sha": "59d96342ac13c8dc7c142c689b2d204373676167", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59d96342ac13c8dc7c142c689b2d204373676167", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59d96342ac13c8dc7c142c689b2d204373676167"}], "stats": {"total": 45, "additions": 24, "deletions": 21}, "files": [{"sha": "c22e57f599d38cd0b80b62629c1caf334c902746", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dc7adad7e35a1627e03bb63074ff17a3900de9f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dc7adad7e35a1627e03bb63074ff17a3900de9f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0dc7adad7e35a1627e03bb63074ff17a3900de9f", "patch": "@@ -1,5 +1,8 @@\n 2013-10-08  DJ Delorie  <dj@redhat.com>\n \n+\t* config/rl78/rl78-expand.md (movqi): use operands[] not operandN.\n+\t(movhi): Likewise.\n+\n \t* config/rl78/rl78.c (rl78_print_operand_1): Change %c to %C to\n \tavoid conflict with the MI use of %c.\n \t* config/rl78/rl78-real.md: change %c to %C throughout."}, {"sha": "863037d7edab618be681a84d9cb20ae6c8996289", "filename": "gcc/config/rl78/rl78-expand.md", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dc7adad7e35a1627e03bb63074ff17a3900de9f/gcc%2Fconfig%2Frl78%2Frl78-expand.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dc7adad7e35a1627e03bb63074ff17a3900de9f/gcc%2Fconfig%2Frl78%2Frl78-expand.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frl78%2Frl78-expand.md?ref=0dc7adad7e35a1627e03bb63074ff17a3900de9f", "patch": "@@ -25,25 +25,25 @@\n \t(match_operand:QI 1 \"general_operand\"))]\n   \"\"\n   {\n-    if (MEM_P (operand0) && MEM_P (operand1))\n-      operands[1] = copy_to_mode_reg (QImode, operand1);\n-    if (rl78_far_p (operand0) && rl78_far_p (operand1))\n-      operands[1] = copy_to_mode_reg (QImode, operand1);\n+    if (MEM_P (operands[0]) && MEM_P (operands[1]))\n+      operands[1] = copy_to_mode_reg (QImode, operands[1]);\n+    if (rl78_far_p (operands[0]) && rl78_far_p (operands[1]))\n+      operands[1] = copy_to_mode_reg (QImode, operands[1]);\n \n     /* FIXME: Not sure how GCC can generate (SUBREG (SYMBOL_REF)),\n        but it does.  Since this makes no sense, reject it here.  */\n-    if (GET_CODE (operand1) == SUBREG\n-        && GET_CODE (XEXP (operand1, 0)) == SYMBOL_REF)\n+    if (GET_CODE (operands[1]) == SUBREG\n+        && GET_CODE (XEXP (operands[1], 0)) == SYMBOL_REF)\n       FAIL;\n     /* Similarly for (SUBREG (CONST (PLUS (SYMBOL_REF)))).\n        cf. g++.dg/abi/packed.C.  */\n-    if (GET_CODE (operand1) == SUBREG\n-\t&& GET_CODE (XEXP (operand1, 0)) == CONST\n-        && GET_CODE (XEXP (XEXP (operand1, 0), 0)) == PLUS\n-        && GET_CODE (XEXP (XEXP (XEXP (operand1, 0), 0), 0)) == SYMBOL_REF)\n+    if (GET_CODE (operands[1]) == SUBREG\n+\t&& GET_CODE (XEXP (operands[1], 0)) == CONST\n+        && GET_CODE (XEXP (XEXP (operands[1], 0), 0)) == PLUS\n+        && GET_CODE (XEXP (XEXP (XEXP (operands[1], 0), 0), 0)) == SYMBOL_REF)\n       FAIL;\n \n-    if (CONST_INT_P (operand1) && ! IN_RANGE (INTVAL (operand1), (-1 << 8) + 1, (1 << 8) - 1))\n+    if (CONST_INT_P (operands[1]) && ! IN_RANGE (INTVAL (operands[1]), (-1 << 8) + 1, (1 << 8) - 1))\n       FAIL;\n   }\n )\n@@ -53,21 +53,21 @@\n \t(match_operand:HI 1 \"general_operand\"))]\n   \"\"\n   {\n-    if (MEM_P (operand0) && MEM_P (operand1))\n-      operands[1] = copy_to_mode_reg (HImode, operand1);\n-    if (rl78_far_p (operand0) && rl78_far_p (operand1))\n-      operands[1] = copy_to_mode_reg (HImode, operand1);\n+    if (MEM_P (operands[0]) && MEM_P (operands[1]))\n+      operands[1] = copy_to_mode_reg (HImode, operands[1]);\n+    if (rl78_far_p (operands[0]) && rl78_far_p (operands[1]))\n+      operands[1] = copy_to_mode_reg (HImode, operands[1]);\n \n     /* FIXME: Not sure how GCC can generate (SUBREG (SYMBOL_REF)),\n        but it does.  Since this makes no sense, reject it here.  */\n-    if (GET_CODE (operand1) == SUBREG\n-        && GET_CODE (XEXP (operand1, 0)) == SYMBOL_REF)\n+    if (GET_CODE (operands[1]) == SUBREG\n+        && GET_CODE (XEXP (operands[1], 0)) == SYMBOL_REF)\n       FAIL;\n     /* Similarly for (SUBREG (CONST (PLUS (SYMBOL_REF)))).  */\n-    if (GET_CODE (operand1) == SUBREG\n-\t&& GET_CODE (XEXP (operand1, 0)) == CONST\n-        && GET_CODE (XEXP (XEXP (operand1, 0), 0)) == PLUS\n-        && GET_CODE (XEXP (XEXP (XEXP (operand1, 0), 0), 0)) == SYMBOL_REF)\n+    if (GET_CODE (operands[1]) == SUBREG\n+\t&& GET_CODE (XEXP (operands[1], 0)) == CONST\n+        && GET_CODE (XEXP (XEXP (operands[1], 0), 0)) == PLUS\n+        && GET_CODE (XEXP (XEXP (XEXP (operands[1], 0), 0), 0)) == SYMBOL_REF)\n       FAIL;\n   }\n )"}]}