{"sha": "dd4e47ab99609cdc7187ff284dff04e54cf4950d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGQ0ZTQ3YWI5OTYwOWNkYzcxODdmZjI4NGRmZjA0ZTU0Y2Y0OTUwZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-04-23T09:45:55Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-04-23T09:45:55Z"}, "message": "[multiple changes]\n\n2013-04-23  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_util.ads, sem_util.adb: Code cleanup for Is_Expression_Function\n\t(can apply to any scope entity).\n\t* sem_res.adb (Resolve_Call):  If the call is within another\n\texpression function it does not constitute a freeze point.\n\n2013-04-23  Yannick Moy  <moy@adacore.com>\n\n\t* exp_ch6.adb (Expand_Actuals): Test that Subp\n\tis overloadable before testing if it's an inherited operation.\n\nFrom-SVN: r198181", "tree": {"sha": "28048c0577165934f18995fe4e2c340933927011", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/28048c0577165934f18995fe4e2c340933927011"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd4e47ab99609cdc7187ff284dff04e54cf4950d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd4e47ab99609cdc7187ff284dff04e54cf4950d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd4e47ab99609cdc7187ff284dff04e54cf4950d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd4e47ab99609cdc7187ff284dff04e54cf4950d/comments", "author": null, "committer": null, "parents": [{"sha": "872c2f37682753caf8bc05e17a63962382c83798", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/872c2f37682753caf8bc05e17a63962382c83798", "html_url": "https://github.com/Rust-GCC/gccrs/commit/872c2f37682753caf8bc05e17a63962382c83798"}], "stats": {"total": 60, "additions": 43, "deletions": 17}, "files": [{"sha": "3ff802fd64e64f0eb8e9aded263bf80bcf264cff", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd4e47ab99609cdc7187ff284dff04e54cf4950d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd4e47ab99609cdc7187ff284dff04e54cf4950d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=dd4e47ab99609cdc7187ff284dff04e54cf4950d", "patch": "@@ -1,3 +1,15 @@\n+2013-04-23  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_util.ads, sem_util.adb: Code cleanup for Is_Expression_Function\n+\t(can apply to any scope entity).\n+\t* sem_res.adb (Resolve_Call):  If the call is within another\n+\texpression function it does not constitute a freeze point.\n+\n+2013-04-23  Yannick Moy  <moy@adacore.com>\n+\n+\t* exp_ch6.adb (Expand_Actuals): Test that Subp\n+\tis overloadable before testing if it's an inherited operation.\n+\n 2013-04-23  Robert Dewar  <dewar@adacore.com>\n \n \t* a-envvar.adb, a-envvar.ads, exp_util.adb, sem_ch12.adb: Minor"}, {"sha": "08e93c4a4a956081cf5b0384b257e818eeeca584", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd4e47ab99609cdc7187ff284dff04e54cf4950d/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd4e47ab99609cdc7187ff284dff04e54cf4950d/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=dd4e47ab99609cdc7187ff284dff04e54cf4950d", "patch": "@@ -1719,6 +1719,11 @@ package body Exp_Ch6 is\n             --  subtype is elaborated before the body of the subprogram, but\n             --  this is harder to verify, and there may be a redundant check.\n \n+            --  Note also that Subp may be either a subprogram entity for\n+            --  direct calls, or a type entity for indirect calls, hence the\n+            --  test that Is_Overloadable returns True before testing whether\n+            --  Subp is an inherited operation.\n+\n             if (Present (Find_Aspect (E_Actual, Aspect_Predicate))\n                   or else\n                 Present (Find_Aspect (E_Actual, Aspect_Dynamic_Predicate))\n@@ -1727,6 +1732,7 @@ package body Exp_Ch6 is\n               and then not Is_Init_Proc (Subp)\n             then\n                if (Is_Derived_Type (E_Actual)\n+                    and then Is_Overloadable (Subp)\n                     and then Is_Inherited_Operation_For_Type (Subp, E_Actual))\n                  or else Is_Entity_Name (Actual)\n                then"}, {"sha": "7d00399f52d28b0a3783bbbb7fd95a23cc4d4e5a", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd4e47ab99609cdc7187ff284dff04e54cf4950d/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd4e47ab99609cdc7187ff284dff04e54cf4950d/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=dd4e47ab99609cdc7187ff284dff04e54cf4950d", "patch": "@@ -5386,12 +5386,14 @@ package body Sem_Res is\n \n       --  In Ada 2012, expression functions may be called within pre/post\n       --  conditions of subsequent functions or expression functions. Such\n-      --  calls do not freeze when they appear within generated bodies, which\n-      --  would place the freeze node in the wrong scope.  An expression\n-      --  function is frozen in the usual fashion, by the appearance of a real\n-      --  body, or at the end of a declarative part.\n+      --  calls do not freeze when they appear within generated bodies,\n+      --  (including the body of another expression function) which would\n+      --  place the freeze node in the wrong scope.  An expression function\n+      --  is frozen in the usual fashion, by the appearance of a real body,\n+      --  or at the end of a declarative part.\n \n       if Is_Entity_Name (Subp) and then not In_Spec_Expression\n+        and then not Is_Expression_Function (Current_Scope)\n         and then\n           (not Is_Expression_Function (Entity (Subp))\n             or else Scope (Entity (Subp)) = Current_Scope)"}, {"sha": "172721d65190d6694e27264a3599b305a1810975", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd4e47ab99609cdc7187ff284dff04e54cf4950d/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd4e47ab99609cdc7187ff284dff04e54cf4950d/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=dd4e47ab99609cdc7187ff284dff04e54cf4950d", "patch": "@@ -8122,19 +8122,24 @@ package body Sem_Util is\n    ----------------------------\n \n    function Is_Expression_Function (Subp : Entity_Id) return Boolean is\n-      Decl : constant Node_Id := Unit_Declaration_Node (Subp);\n+      Decl : Node_Id;\n \n    begin\n-      return Ekind (Subp) = E_Function\n-        and then Nkind (Decl) = N_Subprogram_Declaration\n-        and then\n-          (Nkind (Original_Node (Decl)) = N_Expression_Function\n-            or else\n-              (Present (Corresponding_Body (Decl))\n-                and then\n-                  Nkind (Original_Node\n-                     (Unit_Declaration_Node (Corresponding_Body (Decl))))\n-                 = N_Expression_Function));\n+      if Ekind (Subp) /= E_Function then\n+         return False;\n+\n+      else\n+         Decl := Unit_Declaration_Node (Subp);\n+         return Nkind (Decl) = N_Subprogram_Declaration\n+           and then\n+             (Nkind (Original_Node (Decl)) = N_Expression_Function\n+               or else\n+                 (Present (Corresponding_Body (Decl))\n+                   and then\n+                     Nkind (Original_Node\n+                        (Unit_Declaration_Node (Corresponding_Body (Decl))))\n+                    = N_Expression_Function));\n+      end if;\n    end Is_Expression_Function;\n \n    --------------"}, {"sha": "6151315b0dcf571e5db862d3729346ee1a36a5b0", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd4e47ab99609cdc7187ff284dff04e54cf4950d/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd4e47ab99609cdc7187ff284dff04e54cf4950d/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=dd4e47ab99609cdc7187ff284dff04e54cf4950d", "patch": "@@ -894,8 +894,9 @@ package Sem_Util is\n    --  it is of protected, synchronized or task kind.\n \n    function Is_Expression_Function (Subp : Entity_Id) return Boolean;\n-   --  Predicate to determine whether a function entity comes from a rewritten\n-   --  expression function, and should be inlined unconditionally.\n+   --  Predicate to determine whether a scope entity comes from a rewritten\n+   --  expression function call, and should be inlined unconditionally. Also\n+   --  used to determine that such a call does not constitute a freeze point.\n \n    function Is_False (U : Uint) return Boolean;\n    pragma Inline (Is_False);"}]}