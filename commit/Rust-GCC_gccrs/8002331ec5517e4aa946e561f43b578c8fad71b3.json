{"sha": "8002331ec5517e4aa946e561f43b578c8fad71b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODAwMjMzMWVjNTUxN2U0YWE5NDZlNTYxZjQzYjU3OGM4ZmFkNzFiMw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2006-11-30T06:47:24Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2006-11-30T06:47:24Z"}, "message": "i386.md (movsf_1): Enable pattern for standard 80387 constants before reload when optimizing for size.\n\n\t* config/i386/i386.md (movsf_1): Enable pattern for standard\n\t80387 constants before reload when optimizing for size.\n\t(*movdf_nointeger, *movdf_integer): Ditto.\n\t(*movxf_nointeger, *movxf_integer): Disable patterns for standard\n\t80387 constants before reload when not optimizing for size.\n\n\t(*fop_xf_4_i387, *fop_xf_5_i387, *fop_xf_6_i387): Avoid float\n\textension of XFmode input operands.\n\nFrom-SVN: r119355", "tree": {"sha": "c5eaa9e89d054ecfef70600b72abd4a828424f5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5eaa9e89d054ecfef70600b72abd4a828424f5f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8002331ec5517e4aa946e561f43b578c8fad71b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8002331ec5517e4aa946e561f43b578c8fad71b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8002331ec5517e4aa946e561f43b578c8fad71b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8002331ec5517e4aa946e561f43b578c8fad71b3/comments", "author": null, "committer": null, "parents": [{"sha": "8fdb55720f08f1aa231b06d37106e3c9e0793514", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fdb55720f08f1aa231b06d37106e3c9e0793514", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fdb55720f08f1aa231b06d37106e3c9e0793514"}], "stats": {"total": 36, "additions": 27, "deletions": 9}, "files": [{"sha": "19e340da30c19627be1fbc9331c7c8a839bdcd83", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8002331ec5517e4aa946e561f43b578c8fad71b3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8002331ec5517e4aa946e561f43b578c8fad71b3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8002331ec5517e4aa946e561f43b578c8fad71b3", "patch": "@@ -1,3 +1,14 @@\n+2006-11-30  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (movsf_1): Enable pattern for standard\n+\t80387 constants before reload when optimizing for size.\n+\t(*movdf_nointeger, *movdf_integer): Ditto.\n+\t(*movxf_nointeger, *movxf_integer): Disable patterns for standard\n+\t80387 constants before reload when not optimizing for size.\n+\n+\t(*fop_xf_4_i387, *fop_xf_5_i387, *fop_xf_6_i387): Avoid float\n+\textension of XFmode input operands.\n+\n 2006-11-29  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n \n \t* config/spu/crt0.c (__dso_handle): Define.\n@@ -271,7 +282,7 @@\n \n 2006-11-27  Roger Sayle  <roger@eyesopen.com>\n \t    Manuel Lopez-Ibanez <manu@gcc.gnu.org>\n-\t    \n+\n \t* c-common.c (constant_fits_type_p): Delete.\n \t(unsigned_conversion_warning): Delete.\n \t(conversion_warning): Integrate Wconversion warning from\n@@ -286,7 +297,7 @@\n \t* doc/invoke.texi: Fixed typo.\n \n 2006-11-27  Michael Matz  <matz@suse.de>\n-            Andreas Krebbel  <krebbel1@de.ibm.com>\n+\t    Andreas Krebbel  <krebbel1@de.ibm.com>\n \n \tPR target/29319\n \t* config/s390/predicates.md (larl_operand): Check addend of larl\n@@ -360,7 +371,7 @@\n \tNOTE_FUNCTION_END.\n \n 2006-11-27  Richard Guenther  <rguenther@suse.de>\n-\tZdenek Dvorak <dvorakz@suse.cz>\n+\t    Zdenek Dvorak <dvorakz@suse.cz>\n \n \t* target.h (struct gcc_target): Add builtin_vectorized_function\n \ttarget hook."}, {"sha": "227a1cc2adc3811ad76b063c8c039b53d72d2390", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8002331ec5517e4aa946e561f43b578c8fad71b3/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8002331ec5517e4aa946e561f43b578c8fad71b3/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=8002331ec5517e4aa946e561f43b578c8fad71b3", "patch": "@@ -2305,6 +2305,8 @@\n   \"!(MEM_P (operands[0]) && MEM_P (operands[1]))\n    && (reload_in_progress || reload_completed\n        || (ix86_cmodel == CM_MEDIUM || ix86_cmodel == CM_LARGE)\n+       || (!TARGET_SSE_MATH && optimize_size\n+\t   && standard_80387_constant_p (operands[1]))\n        || GET_CODE (operands[1]) != CONST_DOUBLE\n        || memory_operand (operands[0], SFmode))\"\n {\n@@ -2473,6 +2475,8 @@\n    && ((optimize_size || !TARGET_INTEGER_DFMODE_MOVES) && !TARGET_64BIT)\n    && (reload_in_progress || reload_completed\n        || (ix86_cmodel == CM_MEDIUM || ix86_cmodel == CM_LARGE)\n+       || (!(TARGET_SSE2 && TARGET_SSE_MATH) && optimize_size\n+\t   && standard_80387_constant_p (operands[1]))\n        || GET_CODE (operands[1]) != CONST_DOUBLE\n        || memory_operand (operands[0], DFmode))\"\n {\n@@ -2593,6 +2597,8 @@\n    && ((!optimize_size && TARGET_INTEGER_DFMODE_MOVES) || TARGET_64BIT)\n    && (reload_in_progress || reload_completed\n        || (ix86_cmodel == CM_MEDIUM || ix86_cmodel == CM_LARGE)\n+       || (!(TARGET_SSE2 && TARGET_SSE_MATH) && optimize_size\n+\t   && standard_80387_constant_p (operands[1]))\n        || GET_CODE (operands[1]) != CONST_DOUBLE\n        || memory_operand (operands[0], DFmode))\"\n {\n@@ -2804,7 +2810,7 @@\n   \"optimize_size\n    && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\n    && (reload_in_progress || reload_completed\n-       || standard_80387_constant_p (operands[1])\n+       || (optimize_size && standard_80387_constant_p (operands[1]))\n        || GET_CODE (operands[1]) != CONST_DOUBLE\n        || memory_operand (operands[0], XFmode))\"\n {\n@@ -2839,7 +2845,7 @@\n   \"!optimize_size\n    && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\n    && (reload_in_progress || reload_completed\n-       || standard_80387_constant_p (operands[1])\n+       || (optimize_size && standard_80387_constant_p (operands[1]))\n        || GET_CODE (operands[1]) != CONST_DOUBLE\n        || memory_operand (operands[0], XFmode))\"\n {\n@@ -15480,7 +15486,8 @@\n (define_insn \"*fop_xf_4_i387\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f,f\")\n \t(match_operator:XF 3 \"binary_fp_operator\"\n-\t   [(float_extend:XF (match_operand 1 \"nonimmediate_operand\" \"fm,0\"))\n+\t   [(float_extend:XF\n+\t      (match_operand:X87MODEF12 1 \"nonimmediate_operand\" \"fm,0\"))\n \t    (match_operand:XF 2 \"register_operand\" \"0,f\")]))]\n   \"TARGET_80387\"\n   \"* return output_387_binary_op (insn, operands);\"\n@@ -15498,7 +15505,7 @@\n \t(match_operator:XF 3 \"binary_fp_operator\"\n \t  [(match_operand:XF 1 \"register_operand\" \"0,f\")\n \t   (float_extend:XF\n-\t    (match_operand 2 \"nonimmediate_operand\" \"fm,0\"))]))]\n+\t     (match_operand:X87MODEF12 2 \"nonimmediate_operand\" \"fm,0\"))]))]\n   \"TARGET_80387\"\n   \"* return output_387_binary_op (insn, operands);\"\n   [(set (attr \"type\")\n@@ -15514,9 +15521,9 @@\n   [(set (match_operand:XF 0 \"register_operand\" \"=f,f\")\n \t(match_operator:XF 3 \"binary_fp_operator\"\n \t  [(float_extend:XF\n-\t    (match_operand 1 \"register_operand\" \"0,f\"))\n+\t     (match_operand:X87MODEF12 1 \"register_operand\" \"0,f\"))\n \t   (float_extend:XF\n-\t    (match_operand 2 \"nonimmediate_operand\" \"fm,0\"))]))]\n+\t     (match_operand:X87MODEF12 2 \"nonimmediate_operand\" \"fm,0\"))]))]\n   \"TARGET_80387\"\n   \"* return output_387_binary_op (insn, operands);\"\n   [(set (attr \"type\")"}]}