{"sha": "4acb3af3669db4ca79ffc97cd615fcea205bcccb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGFjYjNhZjM2NjlkYjRjYTc5ZmZjOTdjZDYxNWZjZWEyMDViY2NjYg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2021-04-13T12:03:19Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2021-04-13T12:07:23Z"}, "message": "preprocessor: Fix column adjustment [PR 99446]\n\nThis ICE was because when adjusting a column offset we could advance\ninto a linemap for a different file.  We only checked the next line\nmap was not for a line further advanced in any file, forgetting that\nit could be for an earlier line in a different file.  The testcase\nneeded adjusting as column 512 was unrepresentable, once that was\ntaken into consideration.\n\n\tPR preprocessor/99446\n\tlibcpp/\n\t* line-map.c (line-map.c): Do not advance to linemaps for\n\tdifferent files.\n\tgcc/testsuite/\n\t* g++.dg/diagnostic/pr72803.C: Adjust expected column.", "tree": {"sha": "195554064da12db8edf29a3979c14006d5503afe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/195554064da12db8edf29a3979c14006d5503afe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4acb3af3669db4ca79ffc97cd615fcea205bcccb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4acb3af3669db4ca79ffc97cd615fcea205bcccb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4acb3af3669db4ca79ffc97cd615fcea205bcccb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4acb3af3669db4ca79ffc97cd615fcea205bcccb/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6ba5d039f988babdd99b5cdfb4557c380e57d69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6ba5d039f988babdd99b5cdfb4557c380e57d69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6ba5d039f988babdd99b5cdfb4557c380e57d69"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "ca522b74bad243241a41b428b3e0f6356a91b531", "filename": "gcc/testsuite/g++.dg/diagnostic/pr72803.C", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4acb3af3669db4ca79ffc97cd615fcea205bcccb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fpr72803.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4acb3af3669db4ca79ffc97cd615fcea205bcccb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fpr72803.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fpr72803.C?ref=4acb3af3669db4ca79ffc97cd615fcea205bcccb", "patch": "@@ -5,5 +5,6 @@ class test {\n // The line directive appears to be necessary to trigger the ICE\n // { dg-error \"style of line directive is a GCC extension\" \"\" { target *-*-* } .-2 }\n \n-/* Verify that we get the correct line and column for the diagnostic.  */\n-// { dg-error \"512: expected .;. after class definition\" \"\" { target *-*-* } 3 }\n+/* Verify that we get the best line and column for the diagnostic.\n+   512 is not representable in the line-maps created for this test.  */\n+// { dg-error \"511: expected .;. after class definition\" \"\" { target *-*-* } 3 }"}, {"sha": "2f5e44447d24e9cc3fd2f314d5825d0fa16ad028", "filename": "libcpp/line-map.c", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4acb3af3669db4ca79ffc97cd615fcea205bcccb/libcpp%2Fline-map.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4acb3af3669db4ca79ffc97cd615fcea205bcccb/libcpp%2Fline-map.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fline-map.c?ref=4acb3af3669db4ca79ffc97cd615fcea205bcccb", "patch": "@@ -981,16 +981,15 @@ linemap_position_for_loc_and_offset (line_maps *set,\n      (loc + offset) should be less than the first location encoded by\n      the next line map of the set.  Otherwise, we try to encode the\n      location in the next map.  */\n-  while (map != LINEMAPS_LAST_ORDINARY_MAP (set)\n-\t && (loc + (column_offset << map->m_range_bits)\n-\t     >= MAP_START_LOCATION (&map[1])))\n-    {\n-      map = &map[1];\n-      /* If the next map starts in a higher line, we cannot encode the\n-\t location there.  */\n-      if (line < ORDINARY_MAP_STARTING_LINE_NUMBER (map))\n-\treturn loc;\n-    }\n+  for (; map != LINEMAPS_LAST_ORDINARY_MAP (set)\n+\t && (loc + (column << map->m_range_bits)\n+\t     >= MAP_START_LOCATION (map + 1)); map++)\n+    /* If the next map is a different file, or starts in a higher line, we\n+       cannot encode the location there.  */\n+    if ((map + 1)->reason != LC_RENAME\n+\t|| line < ORDINARY_MAP_STARTING_LINE_NUMBER (map + 1)\n+\t|| 0 != strcmp (LINEMAP_FILE (map + 1), LINEMAP_FILE (map)))\n+      return loc;\n \n   column += column_offset;\n "}]}