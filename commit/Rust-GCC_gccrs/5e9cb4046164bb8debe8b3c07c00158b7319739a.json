{"sha": "5e9cb4046164bb8debe8b3c07c00158b7319739a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWU5Y2I0MDQ2MTY0YmI4ZGViZThiM2MwN2MwMDE1OGI3MzE5NzM5YQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-09-06T12:27:15Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-09-06T12:27:15Z"}, "message": "[multiple changes]\n\n2017-09-06  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_prag.adb (Check_Postcondition_Use_In_Inlined_Subprogram):\n\tDo not warn on conditions that are not obeyed for Inline_Always\n\tsubprograms, when assertions are not enabled.\n\n2017-09-06  Arnaud Charlet  <charlet@adacore.com>\n\n\t* sem_util.adb (Unique_Entity): For abstract states return their\n\tnon-limited view.\n\n2017-09-06  Bob Duff  <duff@adacore.com>\n\n\t* sem_ch12.adb (Copy_Generic_Node): When we copy a node\n\tthat is a proper body corresponding to a stub, we defer the\n\tadjustment of the sloc until after the correct adjustment has\n\tbeen computed. Otherwise, Adjust_Instantiation_Sloc will ignore\n\tthe adjustment, because it will be outside the range in (the old,\n\tincorrect) S_Adjustment.\n\t* inline.adb: Use named notation for readability and uniformity.\n\t* sinput-l.adb: Minor improvements to debugging output printed\n\tfor Debug_Flag_L.\n\t* sinput-l.ads (Create_Instantiation_Source): Minor comment\n\tcorrection.\n\n2017-09-06  Vincent Celier  <celier@adacore.com>\n\n\t* make.adb: Do not invoke gprbuild for -bargs -P.\n\n2017-09-06  Sylvain Dailler  <dailler@adacore.com>\n\n\t* sem_eval.adb (Compile_Time_Known_Value_Or_Aggr): Adding a\n\tcase when Op is of kind N_Qualified_Expression. In this case,\n\tthe function is called recursively on the subexpression like in\n\tother cases.\n\t* make.adb: Minor reformatting\n\n2017-09-06  Justin Squirek  <squirek@adacore.com>\n\n\t* einfo.adb (Set_Linker_Section_Pragma): Modify\n\tSet_Linker_Section_Pragma to be consistant with the \"getter\"\n\tLinker_Section_Pragma.\n\t* exp_ch5.adb (Expand_Formal_Container_Loop): Add proper error\n\tchecking for container loops so that the index cursor is not\n\tdirectly changable by the user with the use of E_Loop_Parameter.\n\t* sem_ch5.adb (Analyze_Block_Statement): Revert previous change.\n\t* sem_warn.adb (Check_References): Revert previous change.\n\nFrom-SVN: r251789", "tree": {"sha": "eb4522ff3d54d02930fecbc82d6283f764049ab7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb4522ff3d54d02930fecbc82d6283f764049ab7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e9cb4046164bb8debe8b3c07c00158b7319739a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e9cb4046164bb8debe8b3c07c00158b7319739a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e9cb4046164bb8debe8b3c07c00158b7319739a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e9cb4046164bb8debe8b3c07c00158b7319739a/comments", "author": null, "committer": null, "parents": [{"sha": "c1a42658e734cb6445c8e81c8f95c3d99b8c8709", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1a42658e734cb6445c8e81c8f95c3d99b8c8709", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1a42658e734cb6445c8e81c8f95c3d99b8c8709"}], "stats": {"total": 349, "additions": 222, "deletions": 127}, "files": [{"sha": "86f78c64cf8eed08ce8e867dd672dff4e96e150f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e9cb4046164bb8debe8b3c07c00158b7319739a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e9cb4046164bb8debe8b3c07c00158b7319739a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=5e9cb4046164bb8debe8b3c07c00158b7319739a", "patch": "@@ -1,3 +1,51 @@\n+2017-09-06  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_prag.adb (Check_Postcondition_Use_In_Inlined_Subprogram):\n+\tDo not warn on conditions that are not obeyed for Inline_Always\n+\tsubprograms, when assertions are not enabled.\n+\n+2017-09-06  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_util.adb (Unique_Entity): For abstract states return their\n+\tnon-limited view.\n+\n+2017-09-06  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_ch12.adb (Copy_Generic_Node): When we copy a node\n+\tthat is a proper body corresponding to a stub, we defer the\n+\tadjustment of the sloc until after the correct adjustment has\n+\tbeen computed. Otherwise, Adjust_Instantiation_Sloc will ignore\n+\tthe adjustment, because it will be outside the range in (the old,\n+\tincorrect) S_Adjustment.\n+\t* inline.adb: Use named notation for readability and uniformity.\n+\t* sinput-l.adb: Minor improvements to debugging output printed\n+\tfor Debug_Flag_L.\n+\t* sinput-l.ads (Create_Instantiation_Source): Minor comment\n+\tcorrection.\n+\n+2017-09-06  Vincent Celier  <celier@adacore.com>\n+\n+\t* make.adb: Do not invoke gprbuild for -bargs -P.\n+\n+2017-09-06  Sylvain Dailler  <dailler@adacore.com>\n+\n+\t* sem_eval.adb (Compile_Time_Known_Value_Or_Aggr): Adding a\n+\tcase when Op is of kind N_Qualified_Expression. In this case,\n+\tthe function is called recursively on the subexpression like in\n+\tother cases.\n+\t* make.adb: Minor reformatting\n+\n+2017-09-06  Justin Squirek  <squirek@adacore.com>\n+\n+\t* einfo.adb (Set_Linker_Section_Pragma): Modify\n+\tSet_Linker_Section_Pragma to be consistant with the \"getter\"\n+\tLinker_Section_Pragma.\n+\t* exp_ch5.adb (Expand_Formal_Container_Loop): Add proper error\n+\tchecking for container loops so that the index cursor is not\n+\tdirectly changable by the user with the use of E_Loop_Parameter.\n+\t* sem_ch5.adb (Analyze_Block_Statement): Revert previous change.\n+\t* sem_warn.adb (Check_References): Revert previous change.\n+\n 2017-09-06  Eric Botcazou  <ebotcazou@adacore.com>\n \n         * gcc-interface/trans.c (gnat_to_gnu) <N_Selected_Component>: Try"}, {"sha": "2f473e2d387fea629704ecaf34514b2510b01c57", "filename": "gcc/ada/clean.adb", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e9cb4046164bb8debe8b3c07c00158b7319739a/gcc%2Fada%2Fclean.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e9cb4046164bb8debe8b3c07c00158b7319739a/gcc%2Fada%2Fclean.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fclean.adb?ref=5e9cb4046164bb8debe8b3c07c00158b7319739a", "patch": "@@ -30,7 +30,6 @@ with Namet;     use Namet;\n with Opt;       use Opt;\n with Osint;     use Osint;\n with Osint.M;   use Osint.M;\n---  with Sdefault;\n with Snames;\n with Stringt;\n with Switch;   use Switch;\n@@ -48,8 +47,8 @@ with GNAT.OS_Lib;               use GNAT.OS_Lib;\n package body Clean is\n \n    Initialized : Boolean := False;\n-   --  Set to True by the first call to Initialize to avoid reinitialization\n-   --  of some packages.\n+   --  Set to True by the first call to Initialize to avoid reinitialization of\n+   --  some packages.\n \n    --  Suffixes of various files\n "}, {"sha": "4ad9466404fd81c0f384a050f6f212fba898fc65", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 36, "deletions": 37, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e9cb4046164bb8debe8b3c07c00158b7319739a/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e9cb4046164bb8debe8b3c07c00158b7319739a/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=5e9cb4046164bb8debe8b3c07c00158b7319739a", "patch": "@@ -2756,7 +2756,7 @@ package body Einfo is\n    function Linker_Section_Pragma (Id : E) return N is\n    begin\n       pragma Assert\n-        (Is_Type (Id) or else Is_Object (Id) or else Is_Subprogram (Id));\n+        (Is_Object (Id) or else Is_Subprogram (Id) or else Is_Type (Id));\n       return Node33 (Id);\n    end Linker_Section_Pragma;\n \n@@ -5918,9 +5918,8 @@ package body Einfo is\n \n    procedure Set_Linker_Section_Pragma (Id : E; V : N) is\n    begin\n-      pragma Assert (Is_Type (Id)\n-        or else Ekind_In (Id, E_Constant, E_Variable)\n-        or else Is_Subprogram (Id));\n+      pragma Assert\n+        (Is_Object (Id) or else Is_Subprogram (Id) or else Is_Type (Id));\n       Set_Node33 (Id, V);\n    end Set_Linker_Section_Pragma;\n \n@@ -7368,6 +7367,39 @@ package body Einfo is\n       return Empty;\n    end Get_Attribute_Definition_Clause;\n \n+   ---------------------------\n+   -- Get_Class_Wide_Pragma --\n+   ---------------------------\n+\n+   function Get_Class_Wide_Pragma\n+     (E  : Entity_Id;\n+      Id : Pragma_Id) return Node_Id\n+    is\n+      Item  : Node_Id;\n+      Items : Node_Id;\n+\n+   begin\n+      Items := Contract (E);\n+\n+      if No (Items) then\n+         return Empty;\n+      end if;\n+\n+      Item := Pre_Post_Conditions (Items);\n+      while Present (Item) loop\n+         if Nkind (Item) = N_Pragma\n+           and then Get_Pragma_Id (Pragma_Name_Unmapped (Item)) = Id\n+           and then Class_Present (Item)\n+         then\n+            return Item;\n+         end if;\n+\n+         Item := Next_Pragma (Item);\n+      end loop;\n+\n+      return Empty;\n+   end Get_Class_Wide_Pragma;\n+\n    -------------------\n    -- Get_Full_View --\n    -------------------\n@@ -7481,39 +7513,6 @@ package body Einfo is\n       return Empty;\n    end Get_Pragma;\n \n-   --------------------------\n-   -- Get_Classwide_Pragma --\n-   --------------------------\n-\n-   function Get_Classwide_Pragma\n-     (E  : Entity_Id;\n-      Id : Pragma_Id) return Node_Id\n-    is\n-      Item  : Node_Id;\n-      Items : Node_Id;\n-\n-   begin\n-      Items := Contract (E);\n-      if No (Items) then\n-         return Empty;\n-      end if;\n-\n-      Item := Pre_Post_Conditions (Items);\n-\n-      while Present (Item) loop\n-         if Nkind (Item) = N_Pragma\n-           and then Get_Pragma_Id (Pragma_Name_Unmapped (Item)) = Id\n-           and then Class_Present (Item)\n-         then\n-            return Item;\n-         else\n-            Item := Next_Pragma (Item);\n-         end if;\n-      end loop;\n-\n-      return Empty;\n-   end Get_Classwide_Pragma;\n-\n    --------------------------------------\n    -- Get_Record_Representation_Clause --\n    --------------------------------------"}, {"sha": "2fcdac70e304159e5b8c4977d39efdd827080fd6", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e9cb4046164bb8debe8b3c07c00158b7319739a/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e9cb4046164bb8debe8b3c07c00158b7319739a/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=5e9cb4046164bb8debe8b3c07c00158b7319739a", "patch": "@@ -8295,11 +8295,11 @@ package Einfo is\n    --    Test_Case\n    --    Volatile_Function\n \n-   function Get_Classwide_Pragma\n+   function Get_Class_Wide_Pragma\n      (E  : Entity_Id;\n       Id : Pragma_Id) return Node_Id;\n-   --  Examine Rep_Item chain to locate a classwide pre- or postcondition\n-   --  of a primitive operation. Returns Empty if not present.\n+   --  Examine Rep_Item chain to locate a classwide pre- or postcondition of a\n+   --  primitive operation. Returns Empty if not present.\n \n    function Get_Record_Representation_Clause (E : Entity_Id) return Node_Id;\n    --  Searches the Rep_Item chain for a given entity E, for a record"}, {"sha": "14249f0d278534ef4d5ced33b417e1d624456dc7", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 30, "deletions": 16, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e9cb4046164bb8debe8b3c07c00158b7319739a/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e9cb4046164bb8debe8b3c07c00158b7319739a/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=5e9cb4046164bb8debe8b3c07c00158b7319739a", "patch": "@@ -211,7 +211,8 @@ package body Exp_Ch5 is\n             Make_Iteration_Scheme (Loc,\n               Condition =>\n                 Make_Function_Call (Loc,\n-                  Name => New_Occurrence_Of (Has_Element_Op, Loc),\n+                  Name                   =>\n+                    New_Occurrence_Of (Has_Element_Op, Loc),\n                   Parameter_Associations => New_List (\n                     New_Occurrence_Of (Container, Loc),\n                     New_Occurrence_Of (Cursor, Loc)))),\n@@ -3081,15 +3082,15 @@ package body Exp_Ch5 is\n       Container : constant Node_Id    := Entity (Name (I_Spec));\n       Stats     : constant List_Id    := Statements (N);\n \n-      Advance  : Node_Id;\n-      Blk_Nod  : Node_Id;\n-      Init     : Node_Id;\n-      New_Loop : Node_Id;\n+      Advance   : Node_Id;\n+      Init_Decl : Node_Id;\n+      New_Loop  : Node_Id;\n \n    begin\n-      --  The expansion resembles the one for Ada containers, but the\n-      --  primitives mention the domain of iteration explicitly, and\n-      --  function First applied to the container yields a cursor directly.\n+      --  The expansion of a formal container loop resembles the one for Ada\n+      --  containers. The only difference is that the primitives mention the\n+      --  domain of iteration explicitly, and function First applied to the\n+      --  container yields a cursor directly.\n \n       --    Cursor : Cursor_type := First (Container);\n       --    while Has_Element (Cursor, Container) loop\n@@ -3098,21 +3099,34 @@ package body Exp_Ch5 is\n       --    end loop;\n \n       Build_Formal_Container_Iteration\n-        (N, Container, Cursor, Init, Advance, New_Loop);\n+        (N, Container, Cursor, Init_Decl, Advance, New_Loop);\n \n-      Set_Ekind (Cursor, E_Variable);\n       Append_To (Stats, Advance);\n \n-      --  Build block to capture declaration of cursor entity.\n+      --  Build a block to capture declaration of the cursor\n \n-      Blk_Nod :=\n+      Rewrite (N,\n         Make_Block_Statement (Loc,\n-          Declarations               => New_List (Init),\n+          Declarations               => New_List (Init_Decl),\n           Handled_Statement_Sequence =>\n             Make_Handled_Sequence_Of_Statements (Loc,\n-              Statements => New_List (New_Loop)));\n+              Statements => New_List (New_Loop))));\n+\n+      --  The loop parameter is declared by an object declaration, but within\n+      --  the loop we must prevent user assignments to it, so we analyze the\n+      --  declaration and reset the entity kind, before analyzing the rest of\n+      --  the loop.\n+\n+      Analyze (Init_Decl);\n+      Set_Ekind (Defining_Identifier (Init_Decl), E_Loop_Parameter);\n+\n+      --  The cursor was marked as a loop parameter to prevent user assignments\n+      --  to it, however this renders the advancement step illegal as it is not\n+      --  possible to change the value of a constant. Flag the advancement step\n+      --  as a legal form of assignment to remedy this side effect.\n+\n+      Set_Assignment_OK (Name (Advance));\n \n-      Rewrite (N, Blk_Nod);\n       Analyze (N);\n    end Expand_Formal_Container_Loop;\n \n@@ -3236,7 +3250,7 @@ package body Exp_Ch5 is\n       --  The loop parameter is declared by an object declaration, but within\n       --  the loop we must prevent user assignments to it, so we analyze the\n       --  declaration and reset the entity kind, before analyzing the rest of\n-      --  the loop;\n+      --  the loop.\n \n       Analyze (Elmt_Decl);\n       Set_Ekind (Defining_Identifier (Elmt_Decl), E_Loop_Parameter);"}, {"sha": "619c921b76c8b9b09599fbd88c06c1d1e02671ed", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e9cb4046164bb8debe8b3c07c00158b7319739a/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e9cb4046164bb8debe8b3c07c00158b7319739a/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=5e9cb4046164bb8debe8b3c07c00158b7319739a", "patch": "@@ -1418,7 +1418,8 @@ package body Freeze is\n          New_Prag : Node_Id;\n \n       begin\n-         A_Pre := Get_Classwide_Pragma (Par_Prim, Pragma_Precondition);\n+         A_Pre := Get_Class_Wide_Pragma (Par_Prim, Pragma_Precondition);\n+\n          if Present (A_Pre) then\n             New_Prag := New_Copy_Tree (A_Pre);\n             Build_Class_Wide_Expression\n@@ -1436,7 +1437,7 @@ package body Freeze is\n             end if;\n          end if;\n \n-         A_Post := Get_Classwide_Pragma (Par_Prim, Pragma_Postcondition);\n+         A_Post := Get_Class_Wide_Pragma (Par_Prim, Pragma_Postcondition);\n \n          if Present (A_Post) then\n             New_Prag := New_Copy_Tree (A_Post);"}, {"sha": "bc0428e3551eb5184f40091a5626717827c1b0ec", "filename": "gcc/ada/inline.adb", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e9cb4046164bb8debe8b3c07c00158b7319739a/gcc%2Fada%2Finline.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e9cb4046164bb8debe8b3c07c00158b7319739a/gcc%2Fada%2Finline.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.adb?ref=5e9cb4046164bb8debe8b3c07c00158b7319739a", "patch": "@@ -1058,7 +1058,7 @@ package body Inline is\n \n       if In_Instance and then Scope (Current_Scope) /= Standard_Standard then\n          Save_Env (Scope (Current_Scope), Scope (Current_Scope));\n-         Original_Body := Copy_Generic_Node (N, Empty, True);\n+         Original_Body := Copy_Generic_Node (N, Empty, Instantiating => True);\n       else\n          Original_Body := Copy_Separate_Tree (N);\n       end if;\n@@ -1081,7 +1081,8 @@ package body Inline is\n \n       Remove_Aspects_And_Pragmas (Original_Body);\n \n-      Body_To_Analyze := Copy_Generic_Node (Original_Body, Empty, False);\n+      Body_To_Analyze :=\n+        Copy_Generic_Node (Original_Body, Empty, Instantiating => False);\n \n       --  Set return type of function, which is also global and does not need\n       --  to be resolved.\n@@ -1635,7 +1636,8 @@ package body Inline is\n             if In_Instance\n               and then Scope (Current_Scope) /= Standard_Standard\n             then\n-               Body_To_Inline := Copy_Generic_Node (N, Empty, True);\n+               Body_To_Inline :=\n+                 Copy_Generic_Node (N, Empty, Instantiating => True);\n             else\n                Body_To_Inline := Copy_Separate_Tree (N);\n             end if;\n@@ -1688,7 +1690,8 @@ package body Inline is\n          --  parameterless subprogram, declared within the real one.\n \n          Generate_Subprogram_Body (N, Original_Body);\n-         Body_To_Analyze := Copy_Generic_Node (Original_Body, Empty, False);\n+         Body_To_Analyze :=\n+           Copy_Generic_Node (Original_Body, Empty, Instantiating => False);\n \n          --  Set return type of function, which is also global and does not\n          --  need to be resolved."}, {"sha": "cbd110dc8f0e2df09546b4c74a07057ac59df762", "filename": "gcc/ada/make.adb", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e9cb4046164bb8debe8b3c07c00158b7319739a/gcc%2Fada%2Fmake.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e9cb4046164bb8debe8b3c07c00158b7319739a/gcc%2Fada%2Fmake.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmake.adb?ref=5e9cb4046164bb8debe8b3c07c00158b7319739a", "patch": "@@ -3746,6 +3746,10 @@ package body Make is\n          Success       : Boolean;\n          Target        : String_Access := null;\n \n+         In_Gnatmake_Switches : Boolean := True;\n+         --  Set to False after -cargs, -bargs, or -largs, to avoid detecting\n+         --  -P switches that are not for gnatmake.\n+\n       begin\n          Find_Program_Name;\n \n@@ -3761,7 +3765,14 @@ package body Make is\n                declare\n                   Arg : constant String := Argument (J);\n                begin\n-                  if Arg'Length >= 2\n+                  if Arg = \"-cargs\" or Arg = \"-bargs\" or Arg = \"-largs\" then\n+                     In_Gnatmake_Switches := False;\n+\n+                  elsif Arg = \"-margs\" then\n+                     In_Gnatmake_Switches := True;\n+\n+                  elsif In_Gnatmake_Switches\n+                    and then Arg'Length >= 2\n                     and then Arg (Arg'First .. Arg'First + 1) = \"-P\"\n                   then\n                      Call_Gprbuild := True;"}, {"sha": "3635319884b8def8eb69eb94f90ae7bcb9bb4a18", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 48, "deletions": 29, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e9cb4046164bb8debe8b3c07c00158b7319739a/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e9cb4046164bb8debe8b3c07c00158b7319739a/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=5e9cb4046164bb8debe8b3c07c00158b7319739a", "patch": "@@ -1895,43 +1895,50 @@ package body Sem_Ch12 is\n                          (Formal, Match, Analyzed_Formal),\n                         Assoc_List);\n \n-                     --  Determine whether the actual package needs an\n-                     --  explicit freeze node. This is only the case if\n-                     --  the actual is declared in the same unit and has\n-                     --  a body. Normally packages do not have explicit\n-                     --  freeze nodes, and gigi only uses them to elaborate\n-                     --  entities in a package body.\n+                     --  Determine whether the actual package needs an explicit\n+                     --  freeze node. This is only the case if the actual is\n+                     --  declared in the same unit and has a body. Normally\n+                     --  packages do not have explicit freeze nodes, and gigi\n+                     --  only uses them to elaborate entities in a package\n+                     --  body.\n \n                      declare\n                         Actual : constant Entity_Id := Entity (Match);\n+\n                         Needs_Freezing : Boolean;\n-                        S : Entity_Id;\n+                        S              : Entity_Id;\n \n                      begin\n                         if not Expander_Active\n                           or else not Has_Completion (Actual)\n                           or else not In_Same_Source_Unit (I_Node, Actual)\n-                          or else (Present (Renamed_Entity (Actual))\n-                           and then not In_Same_Source_Unit (I_Node,\n-                             (Renamed_Entity (Actual))))\n+                          or else\n+                            (Present (Renamed_Entity (Actual))\n+                              and then not\n+                                In_Same_Source_Unit\n+                                  (I_Node, (Renamed_Entity (Actual))))\n                         then\n                            null;\n \n                         else\n                            --  Finally we want to exclude such freeze nodes\n                            --  from statement sequences, which freeze\n                            --  everything before them.\n-                           --  Is this strictly necesssary ???\n+                           --  Is this strictly necessary ???\n \n                            Needs_Freezing := True;\n+\n                            S := Current_Scope;\n                            while Present (S) loop\n-                              if Ekind_In\n-                                (S, E_Loop, E_Block, E_Procedure, E_Function)\n+                              if Ekind_In (S, E_Block,\n+                                              E_Function,\n+                                              E_Loop,\n+                                              E_Procedure)\n                               then\n                                  Needs_Freezing := False;\n                                  exit;\n                               end if;\n+\n                               S := Scope (S);\n                            end loop;\n \n@@ -2648,7 +2655,9 @@ package body Sem_Ch12 is\n                    (Generic_Formal_Declarations (Original_Node (Gen_Decl)));\n                while Present (Formal_Decl) loop\n                   Append_To\n-                    (Decls, Copy_Generic_Node (Formal_Decl, Empty, True));\n+                    (Decls,\n+                     Copy_Generic_Node\n+                       (Formal_Decl, Empty, Instantiating => True));\n                   Next (Formal_Decl);\n                end loop;\n             end;\n@@ -5586,7 +5595,7 @@ package body Sem_Ch12 is\n             Assoc := Associated_Node (Assoc);\n          end loop;\n \n-         --  Follow and additional link in case the final node was rewritten.\n+         --  Follow an additional link in case the final node was rewritten.\n          --  This can only happen with nested generic units.\n \n          if (Nkind (Assoc) = N_Identifier or else Nkind (Assoc) in N_Op)\n@@ -5603,7 +5612,7 @@ package body Sem_Ch12 is\n          --  An additional special case: an unconstrained type in an object\n          --  declaration may have been rewritten as a local subtype constrained\n          --  by the expression in the declaration. We need to recover the\n-         --  original entity which may be global.\n+         --  original entity, which may be global.\n \n          if Present (Original_Node (Assoc))\n            and then Nkind (Parent (N)) = N_Object_Declaration\n@@ -7450,7 +7459,16 @@ package body Sem_Ch12 is\n            (New_N, Copy_Generic_List (Aspect_Specifications (N), Parent_Id));\n       end if;\n \n-      if Instantiating then\n+      --  If we are instantiating, we want to adjust the sloc based on the\n+      --  current S_Adjustment. However, if this is the root node of a subunit,\n+      --  we need to defer that adjustment to below (see \"elsif Instantiating\n+      --  and Was_Stub\"), so it comes after Create_Instantiation_Source has\n+      --  computed the adjustment.\n+\n+      if Instantiating\n+        and then not (Nkind (N) in N_Proper_Body\n+                       and then Was_Originally_Stub (N))\n+      then\n          Adjust_Instantiation_Sloc (New_N, S_Adjustment);\n       end if;\n \n@@ -7594,18 +7612,16 @@ package body Sem_Ch12 is\n             Set_Selector_Name (New_N,\n               Copy_Generic_Node (Selector_Name (N), New_N, Instantiating));\n \n-         --  For operators, we must copy the right operand\n+         --  For operators, copy the operands\n \n          elsif Nkind (N) in N_Op then\n-            Set_Right_Opnd (New_N,\n-              Copy_Generic_Node (Right_Opnd (N), New_N, Instantiating));\n-\n-            --  And for binary operators, the left operand as well\n-\n             if Nkind (N) in N_Binary_Op then\n                Set_Left_Opnd (New_N,\n                  Copy_Generic_Node (Left_Opnd (N), New_N, Instantiating));\n             end if;\n+\n+            Set_Right_Opnd (New_N,\n+              Copy_Generic_Node (Right_Opnd (N), New_N, Instantiating));\n          end if;\n \n       --  Establish a link between an entity from the generic template and the\n@@ -7751,14 +7767,16 @@ package body Sem_Ch12 is\n            Copy_Generic_List (Context_Items (N), New_N));\n \n          Set_Unit (New_N,\n-           Copy_Generic_Node (Unit (N), New_N, False));\n+           Copy_Generic_Node (Unit (N), New_N, Instantiating => False));\n \n          Set_First_Inlined_Subprogram (New_N,\n            Copy_Generic_Node\n-             (First_Inlined_Subprogram (N), New_N, False));\n+             (First_Inlined_Subprogram (N), New_N, Instantiating => False));\n \n-         Set_Aux_Decls_Node (New_N,\n-           Copy_Generic_Node (Aux_Decls_Node (N), New_N, False));\n+         Set_Aux_Decls_Node\n+           (New_N,\n+            Copy_Generic_Node\n+              (Aux_Decls_Node (N), New_N, Instantiating => False));\n \n       --  For an assignment node, the assignment is known to be semantically\n       --  legal if we are instantiating the template. This avoids incorrect\n@@ -7873,21 +7891,22 @@ package body Sem_Ch12 is\n       elsif Nkind (N) in N_Proper_Body then\n          declare\n             Save_Adjustment : constant Sloc_Adjustment := S_Adjustment;\n-\n          begin\n             if Instantiating and then Was_Originally_Stub (N) then\n                Create_Instantiation_Source\n                  (Instantiation_Node,\n                   Defining_Entity (N),\n                   S_Adjustment);\n+\n+               Adjust_Instantiation_Sloc (New_N, S_Adjustment);\n             end if;\n \n             --  Now copy the fields of the proper body, using the new\n             --  adjustment factor if one was needed as per test above.\n \n             Copy_Descendants;\n \n-            --  Restore the original adjustment factor in case changed\n+            --  Restore the original adjustment factor\n \n             S_Adjustment := Save_Adjustment;\n          end;"}, {"sha": "bda8fae37c60264eca053eb62484b1aa89560122", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e9cb4046164bb8debe8b3c07c00158b7319739a/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e9cb4046164bb8debe8b3c07c00158b7319739a/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=5e9cb4046164bb8debe8b3c07c00158b7319739a", "patch": "@@ -5718,7 +5718,7 @@ package body Sem_Ch3 is\n       then\n          declare\n             Partial : constant Entity_Id :=\n-              Incomplete_Or_Partial_View (First_Subtype (Id));\n+                        Incomplete_Or_Partial_View (First_Subtype (Id));\n          begin\n             if Present (Partial)\n               and then Ekind (Partial) = E_Incomplete_Type"}, {"sha": "12ca7a0c2917e726ba128118d8b82d14225cbcf7", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e9cb4046164bb8debe8b3c07c00158b7319739a/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e9cb4046164bb8debe8b3c07c00158b7319739a/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=5e9cb4046164bb8debe8b3c07c00158b7319739a", "patch": "@@ -1111,10 +1111,7 @@ package body Sem_Ch5 is\n             end loop;\n          end if;\n \n-         if Comes_From_Source (Ent) then\n-            Check_References (Ent);\n-         end if;\n-\n+         Check_References (Ent);\n          End_Scope;\n \n          if Unblocked_Exit_Count = 0 then\n@@ -1905,8 +1902,8 @@ package body Sem_Ch5 is\n \n       Preanalyze_Range (Iter_Name);\n \n-      --  Set the kind of the loop variable, which is not visible within\n-      --  the iterator name.\n+      --  Set the kind of the loop variable, which is not visible within the\n+      --  iterator name.\n \n       Set_Ekind (Def_Id, E_Variable);\n "}, {"sha": "41713307cd659137434f217c34cd2ab020c3e1e9", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e9cb4046164bb8debe8b3c07c00158b7319739a/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e9cb4046164bb8debe8b3c07c00158b7319739a/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=5e9cb4046164bb8debe8b3c07c00158b7319739a", "patch": "@@ -1828,6 +1828,9 @@ package body Sem_Eval is\n \n             return True;\n \n+         elsif Nkind (Op) = N_Qualified_Expression then\n+            return Compile_Time_Known_Value_Or_Aggr (Expression (Op));\n+\n          --  All other types of values are not known at compile time\n \n          else"}, {"sha": "91bcf944a0e0254e2d45f55878b529b1523162b9", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e9cb4046164bb8debe8b3c07c00158b7319739a/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e9cb4046164bb8debe8b3c07c00158b7319739a/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=5e9cb4046164bb8debe8b3c07c00158b7319739a", "patch": "@@ -197,8 +197,9 @@ package body Sem_Prag is\n      (Prag    : Node_Id;\n       Spec_Id : Entity_Id);\n    --  Subsidiary to the analysis of pragmas Contract_Cases, Postcondition,\n-   --  Precondition, Refined_Post and Test_Case. Emit a warning when pragma\n-   --  Prag is associated with subprogram Spec_Id subject to Inline_Always.\n+   --  Precondition, Refined_Post, and Test_Case. Emit a warning when pragma\n+   --  Prag is associated with subprogram Spec_Id subject to Inline_Always,\n+   --  and assertions are enabled.\n \n    procedure Check_State_And_Constituent_Use\n      (States   : Elist_Id;\n@@ -27996,6 +27997,7 @@ package body Sem_Prag is\n    begin\n       if Warn_On_Redundant_Constructs\n         and then Has_Pragma_Inline_Always (Spec_Id)\n+        and then Assertions_Enabled\n       then\n          Error_Msg_Name_1 := Original_Aspect_Pragma_Name (Prag);\n "}, {"sha": "237d410be828f9723a89f866923f16e6f7f3a920", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e9cb4046164bb8debe8b3c07c00158b7319739a/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e9cb4046164bb8debe8b3c07c00158b7319739a/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=5e9cb4046164bb8debe8b3c07c00158b7319739a", "patch": "@@ -22116,7 +22116,7 @@ package body Sem_Util is\n                      Prot_Type := Scope (E);\n \n                   --  Bodies of entry families are nested within an extra scope\n-                  --  that contains an entry index declaration\n+                  --  that contains an entry index declaration.\n \n                   else\n                      Prot_Type := Scope (Scope (E));"}, {"sha": "c8136b0d7fc6b07dd032fb03d69569bf4f4e28d5", "filename": "gcc/ada/sem_warn.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e9cb4046164bb8debe8b3c07c00158b7319739a/gcc%2Fada%2Fsem_warn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e9cb4046164bb8debe8b3c07c00158b7319739a/gcc%2Fada%2Fsem_warn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.adb?ref=5e9cb4046164bb8debe8b3c07c00158b7319739a", "patch": "@@ -1670,17 +1670,17 @@ package body Sem_Warn is\n             end if;\n          end if;\n \n-         --  Recurse into a nested package or non-internal block, but do not\n-         --  recurse into a formal package because the corresponding body is\n-         --  not analyzed.\n+         --  Recurse into nested package or block. Do not recurse into a formal\n+         --  package, because the corresponding body is not analyzed.\n \n          <<Continue>>\n             if (Is_Package_Or_Generic_Package (E1)\n                  and then Nkind (Parent (E1)) = N_Package_Specification\n                  and then\n                    Nkind (Original_Node (Unit_Declaration_Node (E1))) /=\n-                                          N_Formal_Package_Declaration)\n-              or else (Ekind (E1) = E_Block and then not Is_Internal (E1))\n+                                                N_Formal_Package_Declaration)\n+\n+              or else Ekind (E1) = E_Block\n             then\n                Check_References (E1);\n             end if;"}, {"sha": "d7e337b35a27940c1b190b99f0030456c8f8915c", "filename": "gcc/ada/sinput-l.adb", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e9cb4046164bb8debe8b3c07c00158b7319739a/gcc%2Fada%2Fsinput-l.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e9cb4046164bb8debe8b3c07c00158b7319739a/gcc%2Fada%2Fsinput-l.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinput-l.adb?ref=5e9cb4046164bb8debe8b3c07c00158b7319739a", "patch": "@@ -103,7 +103,7 @@ package body Sinput.L is\n       --  case, but in practice there seem to be some nodes that get copied\n       --  twice, and this is a defence against that happening.\n \n-      if Factor.Lo <= Loc and then Loc <= Factor.Hi then\n+      if Loc in Factor.Lo .. Factor.Hi then\n          Set_Sloc (N, Loc + Factor.Adjust);\n       end if;\n    end Adjust_Instantiation_Sloc;\n@@ -143,7 +143,8 @@ package body Sinput.L is\n       Xnew := Source_File.Last;\n \n       if Debug_Flag_L then\n-         Write_Str (\"Create_Instantiation_Source: created source \");\n+         Write_Eol;\n+         Write_Str (\"*** Create_Instantiation_Source: created source \");\n          Write_Int (Int (Xnew));\n          Write_Line (\"\");\n       end if;\n@@ -250,8 +251,7 @@ package body Sinput.L is\n          end;\n \n          if Debug_Flag_L then\n-            Write_Eol;\n-            Write_Str (\"*** Create instantiation source for \");\n+            Write_Str (\"  for \");\n \n             if Nkind (Dnod) in N_Proper_Body\n               and then Was_Originally_Stub (Dnod)\n@@ -291,10 +291,6 @@ package body Sinput.L is\n             Write_Name (Chars (Template_Id));\n             Write_Eol;\n \n-            Write_Str (\"  new source index = \");\n-            Write_Int (Int (Xnew));\n-            Write_Eol;\n-\n             Write_Str (\"  copying from file name = \");\n             Write_Name (File_Name (Xold));\n             Write_Eol;\n@@ -401,11 +397,11 @@ package body Sinput.L is\n       X := Source_File.Last;\n \n       if Debug_Flag_L then\n+         Write_Eol;\n          Write_Str (\"Sinput.L.Load_File: created source \");\n          Write_Int (Int (X));\n          Write_Str (\" for \");\n          Write_Str (Get_Name_String (N));\n-         Write_Line (\"\");\n       end if;\n \n       --  Compute starting index, respecting alignment requirement"}, {"sha": "f4a3ccfaadf59e42f447e460bc06982548da4648", "filename": "gcc/ada/sinput-l.ads", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e9cb4046164bb8debe8b3c07c00158b7319739a/gcc%2Fada%2Fsinput-l.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e9cb4046164bb8debe8b3c07c00158b7319739a/gcc%2Fada%2Fsinput-l.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinput-l.ads?ref=5e9cb4046164bb8debe8b3c07c00158b7319739a", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -100,13 +100,16 @@ package Sinput.L is\n    --  Inst_Node is the instantiation node, and Template_Id is the defining\n    --  identifier of the generic declaration or body unit as appropriate.\n    --  Factor is set to an adjustment factor to be used in subsequent calls to\n-   --  Adjust_Instantiation_Sloc. The instantiation mechanism is also used for\n-   --  inlined function and procedure calls. The parameter Inlined_Body is set\n-   --  to True in such cases. This is used for generating error messages that\n-   --  distinguish these two cases, otherwise the two cases are handled\n-   --  identically. Similarly, the instantiation mechanism is also used for\n-   --  inherited class-wide pre- and postconditions. Parameter Inherited_Pragma\n-   --  is set to True in such cases.\n+   --  Adjust_Instantiation_Sloc. Template_Id can also be a subunit body that\n+   --  replaces a stub in a generic unit.\n+   --\n+   --  The instantiation mechanism is also used for inlined function and\n+   --  procedure calls. The parameter Inlined_Body is set to True in such\n+   --  cases. This is used for generating error messages that distinguish these\n+   --  two cases, otherwise the two cases are handled identically. Similarly,\n+   --  the instantiation mechanism is also used for inherited class-wide pre-\n+   --  and postconditions. Parameter Inherited_Pragma is set to True in such\n+   --  cases.\n \n private\n "}]}