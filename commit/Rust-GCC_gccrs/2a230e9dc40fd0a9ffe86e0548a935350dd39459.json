{"sha": "2a230e9dc40fd0a9ffe86e0548a935350dd39459", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmEyMzBlOWRjNDBmZDBhOWZmZTg2ZTA1NDhhOTM1MzUwZGQzOTQ1OQ==", "commit": {"author": {"name": "Bernd Schmidt", "email": "crux@pool.informatik.rwth-aachen.de", "date": "1998-10-08T04:07:40Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-10-08T04:07:40Z"}, "message": "stmt.c (n_occurrences): New static function.\n\n        * stmt.c (n_occurrences): New static function.\n        (expand_asm_operands): Verify that all constrains match in the\n        number of alternatives.\n        Verify that '+' or '=' are at the beginning of an output constraint.\n        Don't allow '&' for input operands.\n        Verify that '%' isn't written for the last operand.\n        * reload.c (find_reloads): Abort if an asm is found with invalid\n        constraints; all possible problems ought to be checked for earlier.\n\nFrom-SVN: r22911", "tree": {"sha": "d2ffc449a3863172f26daaab2384f9276cc31454", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d2ffc449a3863172f26daaab2384f9276cc31454"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a230e9dc40fd0a9ffe86e0548a935350dd39459", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a230e9dc40fd0a9ffe86e0548a935350dd39459", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a230e9dc40fd0a9ffe86e0548a935350dd39459", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a230e9dc40fd0a9ffe86e0548a935350dd39459/comments", "author": null, "committer": null, "parents": [{"sha": "f1da1729434a302ca11b19ffcddf07902465b951", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1da1729434a302ca11b19ffcddf07902465b951", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1da1729434a302ca11b19ffcddf07902465b951"}], "stats": {"total": 182, "additions": 112, "deletions": 70}, "files": [{"sha": "45090a7a06dc076971d70bd5a7ee3f0a0f817da6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a230e9dc40fd0a9ffe86e0548a935350dd39459/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a230e9dc40fd0a9ffe86e0548a935350dd39459/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2a230e9dc40fd0a9ffe86e0548a935350dd39459", "patch": "@@ -1,3 +1,14 @@\n+Thu Oct  8 05:05:34 1998  Bernd Schmidt <crux@Pool.Informatik.RWTH-Aachen.DE>\n+\n+\t* stmt.c (n_occurrences): New static function.\n+\t(expand_asm_operands): Verify that all constrains match in the\n+\tnumber of alternatives.\n+\tVerify that '+' or '=' are at the beginning of an output constraint.\n+\tDon't allow '&' for input operands.\n+\tVerify that '%' isn't written for the last operand.\n+\t* reload.c (find_reloads): Abort if an asm is found with invalid\n+\tconstraints; all possible problems ought to be checked for earlier.\n+\n Thu Oct  8 04:26:20 1998  Michael Hayes <m.hayes@elec.canterbury.ac.nz>\n \n \t* flags.h (flag_branch_on_count_reg): Always declare "}, {"sha": "32ee0f57e49045942b960bbf74dd68116c6d6012", "filename": "gcc/reload.c", "status": "modified", "additions": 5, "deletions": 33, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a230e9dc40fd0a9ffe86e0548a935350dd39459/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a230e9dc40fd0a9ffe86e0548a935350dd39459/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=2a230e9dc40fd0a9ffe86e0548a935350dd39459", "patch": "@@ -2442,15 +2442,6 @@ find_reloads (insn, replace, ind_levels, live_known, reload_reg_p)\n \t      bcopy ((char *) constraints, (char *) constraints1,\n \t\t     noperands * sizeof (char *));\n \t      n_alternatives = n_occurrences (',', constraints[0]) + 1;\n-\t      for (i = 1; i < noperands; i++)\n-\t\tif (n_alternatives != n_occurrences (',', constraints[i]) + 1)\n-\t\t  {\n-\t\t    error_for_asm (insn, \"operand constraints differ in number of alternatives\");\n-\t\t    /* Avoid further trouble with this insn.  */\n-\t\t    PATTERN (insn) = gen_rtx_USE (VOIDmode, const0_rtx);\n-\t\t    n_reloads = 0;\n-\t\t    return;\n-\t\t  }\n \t    }\n \t  break;\n \t}\n@@ -2510,15 +2501,9 @@ find_reloads (insn, replace, ind_levels, live_known, reload_reg_p)\n \t    {\n \t      /* The last operand should not be marked commutative.  */\n \t      if (i == noperands - 1)\n-\t\t{\n-\t\t  if (this_insn_is_asm)\n-\t\t    warning_for_asm (this_insn,\n-\t\t\t\t     \"`%%' constraint used with last operand\");\n-\t\t  else\n-\t\t    abort ();\n-\t\t}\n-\t      else\n-\t\tcommutative = i;\n+\t\tabort ();\n+\n+\t      commutative = i;\n \t    }\n \t  else if (c >= '0' && c <= '9')\n \t    {\n@@ -2528,13 +2513,7 @@ find_reloads (insn, replace, ind_levels, live_known, reload_reg_p)\n \n \t      /* An operand may not match itself.  */\n \t      if (c == i)\n-\t\t{\n-\t\t  if (this_insn_is_asm)\n-\t\t    warning_for_asm (this_insn,\n-\t\t\t\t     \"operand %d has constraint %d\", i, c);\n-\t\t  else\n-\t\t    abort ();\n-\t\t}\n+\t\tabort ();\n \n \t      /* If C can be commuted with C+1, and C might need to match I,\n \t\t then C+1 might also need to match I.  */\n@@ -3372,14 +3351,7 @@ find_reloads (insn, replace, ind_levels, live_known, reload_reg_p)\n \t    early_data = decompose (recog_operand[i]);\n \n \t    if (modified[i] == RELOAD_READ)\n-\t      {\n-\t\tif (this_insn_is_asm)\n-\t\t  warning_for_asm (this_insn,\n-\t\t\t\t   \"`&' constraint used with input operand\");\n-\t\telse\n-\t\t  abort ();\n-\t\tcontinue;\n-\t      }\n+\t      abort ();\n \t    \n \t    if (this_alternative[i] == NO_REGS)\n \t      {"}, {"sha": "658c872fad46de66af8e2b545d541315bd053625", "filename": "gcc/stmt.c", "status": "modified", "additions": 96, "deletions": 37, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a230e9dc40fd0a9ffe86e0548a935350dd39459/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a230e9dc40fd0a9ffe86e0548a935350dd39459/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=2a230e9dc40fd0a9ffe86e0548a935350dd39459", "patch": "@@ -425,6 +425,7 @@ struct label_chain\n static int using_eh_for_cleanups_p = 0;\n \n \n+static int n_occurrences\t\tPROTO((int, char *));\n static void expand_goto_internal\tPROTO((tree, rtx, rtx));\n static int expand_fixup\t\t\tPROTO((tree, rtx, rtx));\n static void fixup_gotos\t\t\tPROTO((struct nesting *, rtx, tree,\n@@ -1096,8 +1097,18 @@ fixup_gotos (thisblock, stack_level, cleanup_list, first_insn, dont_jump_in)\n \t  f->stack_level = stack_level;\n       }\n }\n-\n-\n+\f\n+/* Return the number of times character C occurs in string S.  */\n+static int\n+n_occurrences (c, s)\n+     int c;\n+     char *s;\n+{\n+  int n = 0;\n+  while (*s)\n+    n += (*s++ == c);\n+  return n;\n+}\n \f\n /* Generate RTL for an asm statement (explicit assembler code).\n    BODY is a STRING_CST node containing the assembler code text,\n@@ -1184,13 +1195,38 @@ expand_asm_operands (string, outputs, inputs, clobbers, vol, filename, line)\n \n   last_expr_type = 0;\n \n+  /* Check that the number of alternatives is constant across all\n+     operands.  */\n+  if (outputs || inputs)\n+    {\n+      tree tmp = TREE_PURPOSE (outputs ? outputs : inputs);\n+      int nalternatives = n_occurrences (',', TREE_STRING_POINTER (tmp));\n+      tree next = inputs;\n+\n+      tmp = outputs;\n+      while (tmp)\n+\t{\n+\t  char *constraint = TREE_STRING_POINTER (TREE_PURPOSE (tmp));\n+\t  if (n_occurrences (',', constraint) != nalternatives)\n+\t    {\n+\t      error (\"operand constraints for `asm' differ in number of alternatives\");\n+\t      return;\n+\t    }\n+\t  if (TREE_CHAIN (tmp))\n+\t    tmp = TREE_CHAIN (tmp);\n+\t  else\n+\t    tmp = next, next = 0;\n+\t}\n+    }\n+\n   for (i = 0, tail = outputs; tail; tail = TREE_CHAIN (tail), i++)\n     {\n       tree val = TREE_VALUE (tail);\n       tree type = TREE_TYPE (val);\n+      char *constraint;\n+      int c_len;\n       int j;\n-      int found_equal = 0;\n-      int found_plus = 0;\n+      int is_inout = 0;\n       int allows_reg = 0;\n \n       /* If there's an erroneous arg, emit no insn.  */\n@@ -1202,27 +1238,43 @@ expand_asm_operands (string, outputs, inputs, clobbers, vol, filename, line)\n \t the worst that happens if we get it wrong is we issue an error\n \t message.  */\n \n-      for (j = 0; j < TREE_STRING_LENGTH (TREE_PURPOSE (tail)) - 1; j++)\n-\tswitch (TREE_STRING_POINTER (TREE_PURPOSE (tail))[j])\n+      c_len = TREE_STRING_LENGTH (TREE_PURPOSE (tail)) - 1;\n+      constraint = TREE_STRING_POINTER (TREE_PURPOSE (tail));\n+\n+      if (c_len == 0\n+\t  || (constraint[0] != '=' && constraint[0] != '+'))\n+\t{\n+\t  error (\"output operand constraint lacks `='\");\n+\t  return;\n+\t}\n+\n+      is_inout = constraint[0] == '+';\n+      /* Replace '+' with '='.  */\n+      constraint[0] = '=';\n+      /* Make sure we can specify the matching operand.  */\n+      if (is_inout && i > 9)\n+\t{\n+\t  error (\"output operand constraint %d contains `+'\", i);\n+\t  return;\n+\t}\n+\n+      for (j = 1; j < c_len; j++)\n+\tswitch (constraint[j])\n \t  {\n \t  case '+':\n-\t    /* Make sure we can specify the matching operand.  */\n-\t    if (i > 9)\n+\t  case '=':\n+\t    error (\"operand constraint contains '+' or '=' at illegal position.\");\n+\t    return;\n+\n+\t  case '%':\n+\t    if (i + 1 == ninputs + noutputs)\n \t      {\n-\t\terror (\"output operand constraint %d contains `+'\", i);\n+\t\terror (\"`%%' constraint used with last operand\");\n \t\treturn;\n \t      }\n-\n-\t    /* Replace '+' with '='.  */\n-\t    TREE_STRING_POINTER (TREE_PURPOSE (tail))[j] = '=';\n-\t    found_plus = 1;\n \t    break;\n \n-\t  case '=':\n-\t    found_equal = 1;\n-\t    break;\n-\n-\t  case '?':  case '!':  case '*':  case '%':  case '&':\n+\t  case '?':  case '!':  case '*':  case '&':\n \t  case 'V':  case 'm':  case 'o':  case '<':  case '>':\n \t  case 'E':  case 'F':  case 'G':  case 'H':  case 'X':\n \t  case 's':  case 'i':  case 'n':\n@@ -1244,12 +1296,6 @@ expand_asm_operands (string, outputs, inputs, clobbers, vol, filename, line)\n \t    break;\n \t  }\n \n-      if (! found_equal && ! found_plus)\n-\t{\n-\t  error (\"output operand constraint lacks `='\");\n-\t  return;\n-\t}\n-\n       /* If an output operand is not a decl or indirect ref and our constraint\n \t allows a register, make a temporary to act as an intermediate.\n \t Make the asm insn write into that, then our caller will copy it to\n@@ -1260,7 +1306,7 @@ expand_asm_operands (string, outputs, inputs, clobbers, vol, filename, line)\n \t      && ! (GET_CODE (DECL_RTL (val)) == REG\n \t\t    && GET_MODE (DECL_RTL (val)) != TYPE_MODE (type)))\n \t  || ! allows_reg\n-\t  || found_plus)\n+\t  || is_inout)\n \t{\n \t  if (! allows_reg)\n \t    mark_addressable (TREE_VALUE (tail));\n@@ -1278,7 +1324,7 @@ expand_asm_operands (string, outputs, inputs, clobbers, vol, filename, line)\n \t  TREE_VALUE (tail) = make_tree (type, output_rtx[i]);\n \t}\n \n-      if (found_plus)\n+      if (is_inout)\n \t{\n \t  inout_mode[ninout] = TYPE_MODE (TREE_TYPE (TREE_VALUE (tail)));\n \t  inout_opnum[ninout++] = i;\n@@ -1311,30 +1357,44 @@ expand_asm_operands (string, outputs, inputs, clobbers, vol, filename, line)\n     {\n       int j;\n       int allows_reg = 0;\n+      char *constraint;\n+      int c_len;\n \n       /* If there's an erroneous arg, emit no insn,\n \t because the ASM_INPUT would get VOIDmode\n \t and that could cause a crash in reload.  */\n       if (TREE_TYPE (TREE_VALUE (tail)) == error_mark_node)\n \treturn;\n+\n+      /* ??? Can this happen, and does the error message make any sense? */\n       if (TREE_PURPOSE (tail) == NULL_TREE)\n \t{\n \t  error (\"hard register `%s' listed as input operand to `asm'\",\n \t\t TREE_STRING_POINTER (TREE_VALUE (tail)) );\n \t  return;\n \t}\n \n-      /* Make sure constraint has neither `=' nor `+'.  */\n+      c_len = TREE_STRING_LENGTH (TREE_PURPOSE (tail)) - 1;\n+      constraint = TREE_STRING_POINTER (TREE_PURPOSE (tail));\n \n-      for (j = 0; j < TREE_STRING_LENGTH (TREE_PURPOSE (tail)) - 1; j++)\n-\tswitch (TREE_STRING_POINTER (TREE_PURPOSE (tail))[j])\n+      /* Make sure constraint has neither `=', `+', nor '&'.  */\n+\n+      for (j = 0; j < c_len; j++)\n+\tswitch (constraint[j])\n \t  {\n-\t  case '+':   case '=':\n-\t    error (\"input operand constraint contains `%c'\",\n-\t\t   TREE_STRING_POINTER (TREE_PURPOSE (tail))[j]);\n+\t  case '+':  case '=':  case '&':\n+\t    error (\"input operand constraint contains `%c'\", constraint[j]);\n \t    return;\n \n-\t  case '?':  case '!':  case '*':  case '%':  case '&':\n+\t  case '%':\n+\t    if (i + 1 == ninputs - ninout)\n+\t      {\n+\t\terror (\"`%%' constraint used with last operand\");\n+\t\treturn;\n+\t      }\n+\t    break;\n+\n+\t  case '?':  case '!':  case '*':\n \t  case 'V':  case 'm':  case 'o':  case '<':  case '>':\n \t  case 'E':  case 'F':  case 'G':  case 'H':  case 'X':\n \t  case 's':  case 'i':  case 'n':\n@@ -1352,8 +1412,7 @@ expand_asm_operands (string, outputs, inputs, clobbers, vol, filename, line)\n \t       operands to memory.  */\n \t  case '0':  case '1':  case '2':  case '3':  case '4':\n \t  case '5':  case '6':  case '7':  case '8':  case '9':\n-\t    if (TREE_STRING_POINTER (TREE_PURPOSE (tail))[j]\n-\t\t>= '0' + noutputs)\n+\t    if (constraint[j] >= '0' + noutputs)\n \t      {\n \t\terror\n \t\t  (\"matching constraint references invalid operand number\");\n@@ -1398,10 +1457,10 @@ expand_asm_operands (string, outputs, inputs, clobbers, vol, filename, line)\n \t  emit_move_insn (memloc, XVECEXP (body, 3, i));\n \t  XVECEXP (body, 3, i) = memloc;\n \t}\n-\t  \n+\n       XVECEXP (body, 4, i)      /* constraints */\n \t= gen_rtx_ASM_INPUT (TYPE_MODE (TREE_TYPE (TREE_VALUE (tail))),\n-\t\t\t     TREE_STRING_POINTER (TREE_PURPOSE (tail)));\n+\t\t\t     constraint);\n       i++;\n     }\n "}]}