{"sha": "7bd6f24be2ff057f6e59788a497e206e46e47735", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2JkNmYyNGJlMmZmMDU3ZjZlNTk3ODhhNDk3ZTIwNmU0NmU0NzczNQ==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2015-07-03T09:25:54Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2015-07-03T09:25:54Z"}, "message": "[Patch SRA] Fix PR66119 by calling get_move_ratio in SRA\n\ngcc/\n\n\tPR tree-optimization/66119\n\t* toplev.c (process_options): Don't set up default values for\n\tthe sra_max_scalarization_size_{speed,size} parameters.\n\t* tree-sra (analyze_all_variable_accesses): If no values\n\thave been set for the sra_max_scalarization_size_{speed,size}\n\tparameters, call get_move_ratio to get target defaults.\n\ngcc/testsuite/\n\n\tPR tree-optimization/66119\n\t* g++.dg/opt/pr66119.C: New.\n\nFrom-SVN: r225369", "tree": {"sha": "41d9cf4bc629104c82fe2278fa51e0576bead17e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/41d9cf4bc629104c82fe2278fa51e0576bead17e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7bd6f24be2ff057f6e59788a497e206e46e47735", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bd6f24be2ff057f6e59788a497e206e46e47735", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bd6f24be2ff057f6e59788a497e206e46e47735", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bd6f24be2ff057f6e59788a497e206e46e47735/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bab73f11b8eb01e137ac86ca232c3058175de877", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bab73f11b8eb01e137ac86ca232c3058175de877", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bab73f11b8eb01e137ac86ca232c3058175de877"}], "stats": {"total": 116, "additions": 97, "deletions": 19}, "files": [{"sha": "e8b42fe0672805a21492d43e68a621c747644155", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bd6f24be2ff057f6e59788a497e206e46e47735/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bd6f24be2ff057f6e59788a497e206e46e47735/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7bd6f24be2ff057f6e59788a497e206e46e47735", "patch": "@@ -1,3 +1,12 @@\n+2015-07-03  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\tPR tree-optimization/66119\n+\t* toplev.c (process_options): Don't set up default values for\n+\tthe sra_max_scalarization_size_{speed,size} parameters.\n+\t* tree-sra (analyze_all_variable_accesses): If no values\n+\thave been set for the sra_max_scalarization_size_{speed,size}\n+\tparameters, call get_move_ratio to get target defaults.\n+\n 2015-07-03  Richard Biener  <rguenther@suse.de>\n \n \t* fold-const.c (fold_binary_loc): Move (T)ptr & CST folding..."}, {"sha": "714c2245194ba0c841a8e1515fb848dda8e7188f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bd6f24be2ff057f6e59788a497e206e46e47735/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bd6f24be2ff057f6e59788a497e206e46e47735/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7bd6f24be2ff057f6e59788a497e206e46e47735", "patch": "@@ -1,3 +1,8 @@\n+2015-07-03  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\tPR tree-optimization/66119\n+\t* g++.dg/opt/pr66119.C: New.\n+\n 2015-07-02  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/52846"}, {"sha": "5b420c23de878af899f9fe7221ac7520b4c3ccbc", "filename": "gcc/testsuite/g++.dg/opt/pr66119.C", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bd6f24be2ff057f6e59788a497e206e46e47735/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr66119.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bd6f24be2ff057f6e59788a497e206e46e47735/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr66119.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr66119.C?ref=7bd6f24be2ff057f6e59788a497e206e46e47735", "patch": "@@ -0,0 +1,69 @@\n+/* PR66119 - MOVE_RATIO is not constant in a compiler run, so Scalar\n+   Reduction of Aggregates must ask the back-end more than once what\n+   the value of MOVE_RATIO now is.  */\n+\n+/* { dg-do compile  { target { { i?86-*-* x86_64-*-* } && c++11 } }  }  */\n+/* { dg-options \"-O3 -mavx -fdump-tree-sra -march=slm -mtune=slm\" } */\n+\n+#include <immintrin.h>\n+\n+class MyAVX\n+{\n+  __m256d data;\n+public:\n+  MyAVX () = default;\n+  MyAVX (const MyAVX &) = default;\n+  MyAVX (__m256d _data) : data(_data) { ; }\n+\n+  MyAVX & operator= (const MyAVX &) = default;\n+\n+  operator __m256d () const { return data; }\n+  MyAVX operator+ (MyAVX s2) { return data+s2.data; }\n+};\n+\n+template <typename T> class AVX_trait { ; };\n+\n+template <> class AVX_trait<double> {\n+public:\n+  typedef __m256d TSIMD;\n+};\n+\n+\n+template <typename T>\n+class MyTSIMD\n+{\n+  typename AVX_trait<T>::TSIMD data;\n+\n+public:\n+  MyTSIMD () = default;\n+  MyTSIMD (const MyTSIMD &) = default;\n+  // MyTSIMD (const MyTSIMD & s2) : data(s2.data) { ; }\n+  MyTSIMD (typename AVX_trait<T>::TSIMD _data) : data(_data) { ; }\n+\n+  operator typename AVX_trait<T>::TSIMD() const { return data; }\n+  MyTSIMD operator+ (MyTSIMD s2) { return data+s2.data; }\n+};\n+\n+// using MyVec = MyAVX;\n+using MyVec = MyTSIMD<double>;\n+\n+class Vec2\n+{\n+  MyVec a, b;\n+public:\n+  Vec2 (MyVec aa, MyVec ab) : a(aa), b(ab) { ; }\n+  Vec2 operator+ (Vec2 v2) { return Vec2(a+v2.a, b+v2.b); }\n+};\n+\n+inline __attribute__ ((__always_inline__))\n+Vec2 ComputeSomething (Vec2 a, Vec2 b)\n+{\n+  return a+b;\n+}\n+\n+Vec2 TestFunction (Vec2 a, Vec2 b)\n+{\n+  return ComputeSomething (a,b);\n+}\n+\n+/* { dg-final { scan-tree-dump \"Created a replacement for b\" \"sra\" } } */"}, {"sha": "d0a8f0dc2574001d34dda8af97a2eac0ef381acb", "filename": "gcc/toplev.c", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bd6f24be2ff057f6e59788a497e206e46e47735/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bd6f24be2ff057f6e59788a497e206e46e47735/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=7bd6f24be2ff057f6e59788a497e206e46e47735", "patch": "@@ -1295,20 +1295,6 @@ process_options (void)\n      so we can correctly initialize debug output.  */\n   no_backend = lang_hooks.post_options (&main_input_filename);\n \n-  /* Set default values for parameters relation to the Scalar Reduction\n-     of Aggregates passes (SRA and IP-SRA).  We must do this here, rather\n-     than in opts.c:default_options_optimization as historically these\n-     tuning heuristics have been based on MOVE_RATIO, which on some\n-     targets requires other symbols from the backend.  */\n-  maybe_set_param_value\n-    (PARAM_SRA_MAX_SCALARIZATION_SIZE_SPEED,\n-     get_move_ratio (true) * UNITS_PER_WORD,\n-     global_options.x_param_values, global_options_set.x_param_values);\n-  maybe_set_param_value\n-    (PARAM_SRA_MAX_SCALARIZATION_SIZE_SIZE,\n-     get_move_ratio (false) * UNITS_PER_WORD,\n-     global_options.x_param_values, global_options_set.x_param_values);\n-\n   /* Some machines may reject certain combinations of options.  */\n   targetm.target_option.override ();\n "}, {"sha": "e648061b2dc6de9390b198bcfcd159adbd652555", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bd6f24be2ff057f6e59788a497e206e46e47735/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bd6f24be2ff057f6e59788a497e206e46e47735/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=7bd6f24be2ff057f6e59788a497e206e46e47735", "patch": "@@ -2545,11 +2545,20 @@ analyze_all_variable_accesses (void)\n   bitmap tmp = BITMAP_ALLOC (NULL);\n   bitmap_iterator bi;\n   unsigned i;\n-  unsigned max_scalarization_size\n-    = (optimize_function_for_size_p (cfun)\n-\t? PARAM_VALUE (PARAM_SRA_MAX_SCALARIZATION_SIZE_SIZE)\n-\t: PARAM_VALUE (PARAM_SRA_MAX_SCALARIZATION_SIZE_SPEED))\n-      * BITS_PER_UNIT;\n+  bool optimize_speed_p = !optimize_function_for_size_p (cfun);\n+\n+  enum compiler_param param = optimize_speed_p\n+\t\t\t? PARAM_SRA_MAX_SCALARIZATION_SIZE_SPEED\n+\t\t\t: PARAM_SRA_MAX_SCALARIZATION_SIZE_SIZE;\n+\n+  /* If the user didn't set PARAM_SRA_MAX_SCALARIZATION_SIZE_<...>,\n+     fall back to a target default.  */\n+  unsigned HOST_WIDE_INT max_scalarization_size\n+    = global_options_set.x_param_values[param]\n+      ? PARAM_VALUE (param)\n+      : get_move_ratio (optimize_speed_p) * UNITS_PER_WORD;\n+\n+  max_scalarization_size *= BITS_PER_UNIT;\n \n   EXECUTE_IF_SET_IN_BITMAP (candidate_bitmap, 0, i, bi)\n     if (bitmap_bit_p (should_scalarize_away_bitmap, i)"}]}