{"sha": "238345774bef2b14361c8ce2e51ca5a0d83de48d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjM4MzQ1Nzc0YmVmMmIxNDM2MWM4Y2UyZTUxY2E1YTBkODNkZTQ4ZA==", "commit": {"author": {"name": "Phil Edwards", "email": "phil@codesourcery.com", "date": "2004-02-27T22:01:32Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2004-02-27T22:01:32Z"}, "message": "default.exp: Update with comments.\n\n2004-02-27  Phil Edwards  <phil@codesourcery.com>\n\n\t* testsuite/config/default.exp:  Update with comments.\n\t(${tool}_target_compile):  New wrapper routine.\n\t* testsuite/lib/dg-options.exp:  New file, with dg-require-iconv.\n\t* testsuite/lib/libstdc++.exp:  Update with comments and cosmetic\n\tfixes.\n\t(load_gcc_lib, v3track):  New routines.\n\t(v3-init):  Rename to libstdc++_init.\n\t* testsuite/libstdc++-dg/normal.exp:  No longer call v3-init.\n\tMove DEFAULT_CXXFLAGS handling into libstdc++_init.\n\nFrom-SVN: r78580", "tree": {"sha": "a9061b8bb9b06de94c1fe9e52fcdd93e5cd3178b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9061b8bb9b06de94c1fe9e52fcdd93e5cd3178b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/238345774bef2b14361c8ce2e51ca5a0d83de48d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/238345774bef2b14361c8ce2e51ca5a0d83de48d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/238345774bef2b14361c8ce2e51ca5a0d83de48d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/238345774bef2b14361c8ce2e51ca5a0d83de48d/comments", "author": null, "committer": null, "parents": [{"sha": "b1009a5d128e8754873a3353285e0099d76dd778", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1009a5d128e8754873a3353285e0099d76dd778", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1009a5d128e8754873a3353285e0099d76dd778"}], "stats": {"total": 186, "additions": 137, "deletions": 49}, "files": [{"sha": "5f196bb64220e72e15be8d87d07613cbbdbcb40d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/238345774bef2b14361c8ce2e51ca5a0d83de48d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/238345774bef2b14361c8ce2e51ca5a0d83de48d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=238345774bef2b14361c8ce2e51ca5a0d83de48d", "patch": "@@ -1,3 +1,15 @@\n+2004-02-27  Phil Edwards  <phil@codesourcery.com>\n+\n+\t* testsuite/config/default.exp:  Update with comments.\n+\t(${tool}_target_compile):  New wrapper routine.\n+\t* testsuite/lib/dg-options.exp:  New file, with dg-require-iconv.\n+\t* testsuite/lib/libstdc++.exp:  Update with comments and cosmetic\n+\tfixes.\n+\t(load_gcc_lib, v3track):  New routines.\n+\t(v3-init):  Rename to libstdc++_init.\n+\t* testsuite/libstdc++-dg/normal.exp:  No longer call v3-init.\n+\tMove DEFAULT_CXXFLAGS handling into libstdc++_init.\n+\n 2004-02-27  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* config/cpu/hppa/atomicity.h: Include c++config.h to get defines."}, {"sha": "2b2444fff527845f67a7b72cec2fd741920f0356", "filename": "libstdc++-v3/testsuite/config/default.exp", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/238345774bef2b14361c8ce2e51ca5a0d83de48d/libstdc%2B%2B-v3%2Ftestsuite%2Fconfig%2Fdefault.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/238345774bef2b14361c8ce2e51ca5a0d83de48d/libstdc%2B%2B-v3%2Ftestsuite%2Fconfig%2Fdefault.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fconfig%2Fdefault.exp?ref=238345774bef2b14361c8ce2e51ca5a0d83de48d", "patch": "@@ -1,5 +1,7 @@\n-# Copyright (C) 2001 Free Software Foundation, Inc.\n+# libstdc++ \"tool-and-target file\" for DejaGNU\n \n+# Copyright (C) 2001, 2004 Free Software Foundation, Inc.\n+#\n # This program is free software; you can redistribute it and/or modify\n # it under the terms of the GNU General Public License as published by\n # the Free Software Foundation; either version 2 of the License, or\n@@ -14,8 +16,18 @@\n # along with this program; if not, write to the Free Software\n # Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  \n \n-# Please email any bugs, comments, and/or additions to this file to:\n-# libstdc++@gcc.gnu.org\n \n+# This file is loaded only if a target-specific file or OS-specific file\n+# is not found first.  It should provide libstdc++_load, which runs a\n+# program.  (The default calls the standard remote_load.)  It may also\n+# provide libstdc++_compile, but this is not presently used.  It must\n+# provide libstdc++_target_compile, which does the same thing and is used.\n+\n+# Here are the default definitions:\n load_lib \"standard.exp\"\n \n+# target-supports.exp uses this\n+proc ${tool}_target_compile { srcfile destfile compile_type options } {\n+    target_compile $srcfile $destfile $compile_type $options\n+}\n+"}, {"sha": "06001cb7514f9c4d7f53b320492b06e7de5ea9a8", "filename": "libstdc++-v3/testsuite/lib/dg-options.exp", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/238345774bef2b14361c8ce2e51ca5a0d83de48d/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Fdg-options.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/238345774bef2b14361c8ce2e51ca5a0d83de48d/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Fdg-options.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Fdg-options.exp?ref=238345774bef2b14361c8ce2e51ca5a0d83de48d", "patch": "@@ -0,0 +1,29 @@\n+# Handlers for additional dg-xxx keywords in tests.\n+\n+# Copyright (C) 2004 Free Software Foundation, Inc.\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  \n+\n+\n+# Copied from GCC.\n+proc dg-require-iconv { args } {\n+    if { ![ check_iconv_available ${args} ] } {\n+\tupvar dg-do-what dg-do-what\n+\tset dg-do-what [list [lindex ${dg-do-what} 0] \"N\" \"P\"]\n+\treturn\n+    }\n+    return\n+}\n+"}, {"sha": "0700bc3558e495fe2d7aeb0c17e4511d949b6116", "filename": "libstdc++-v3/testsuite/lib/libstdc++.exp", "status": "modified", "additions": 77, "deletions": 17, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/238345774bef2b14361c8ce2e51ca5a0d83de48d/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/238345774bef2b14361c8ce2e51ca5a0d83de48d/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp?ref=238345774bef2b14361c8ce2e51ca5a0d83de48d", "patch": "@@ -1,5 +1,7 @@\n-# Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+# libstdc++ \"tool init file\" for DejaGNU\n \n+# Copyright (C) 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n+#\n # This program is free software; you can redistribute it and/or modify\n # it under the terms of the GNU General Public License as published by\n # the Free Software Foundation; either version 2 of the License, or\n@@ -14,11 +16,46 @@\n # along with this program; if not, write to the Free Software\n # Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  \n \n-# Define callbacks for dg.exp.  This file is loaded early.\n \n+# Define callbacks and load other libraries.  This file is loaded relatively\n+# early, and before any other file we write ourselves.  \"load_lib\" will\n+# find anything in the DejaGNU installation tree, or in our lib directory.\n+# \"load_gcc_lib\" will search the core compiler's .exp collection instead.\n+#\n+# The naming rule is that dg.exp looks for \"tool-\" and runtest.exp looks\n+# for \"tool_\" when finding callbacks.  Utility routines we define for\n+# our callbacks begin with \"v3-\".\n+#\n+# libstdc++_* callbacks we don't define, but could:\n+# ..._option_help           prints additional --help output\n+# ..._option_proc (--foo)   process our own options\n+# ..._exit                  cleanup routines (do we need any?)\n+# ..._init (normal.exp)     called once per test file\n+# ..._finish                bracketing function for libstdc++_init\n+# ...-dg-prune              removing output text, see top of system dg.exp\n+#\n+# Useful hook:  if ${hostname}_init exists, it will be called, almost\n+# the last thing before testing begins.  This can be defined in, e.g.,\n+# ~/.dejagnurc or $DEJAGNU.\n+\n+proc load_gcc_lib { filename } {\n+    global srcdir\n+    load_file $srcdir/../../gcc/testsuite/lib/$filename\n+}\n+\n+# system routines\n load_lib dg.exp\n load_lib libgloss.exp\n+# compiler routines, then ours\n load_lib prune.exp\n+load_lib dg-options.exp\n+\n+# Useful for debugging.  Pass the name of a variable and the verbosity\n+# threshold (number of -v's on the command line).\n+proc v3track { var n } {\n+    upvar $var val\n+    verbose \"++ $var is $val\" $n\n+}\n \n # Called by v3-init below.  \"Static\" to this file.\n proc v3-copy-files {srcfiles dstdir} {\n@@ -36,22 +73,44 @@ proc v3-copy-files {srcfiles dstdir} {\n     }\n }\n \n-# Called once, from libstdc++/dg.exp.\n-proc v3-init { args } {\n-    global srcdir\n-    global outdir\n-    global blddir\n-    global cxx\n+# Called once, during runtest.exp setup.\n+proc libstdc++_init { testfile } {\n+    global env\n+    global srcdir outdir blddir objdir tool_root_dir\n+    global cxx cxxflags\n     global includes\n-    global cxxflags\n-    global objdir\n     global gluefile wrap_flags\n-    global env\n-    global ld_library_path\n-    global original_ld_library_path\n-    global tool_root_dir\n+    global ld_library_path original_ld_library_path\n+    global target_triplet\n \n     set blddir [lookfor_file [get_multilibs] libstdc++-v3]\n+    set flags_file \"${blddir}/scripts/testsuite_flags\"\n+    v3track flags_file 2\n+\n+    # If a test doesn't have special options, use DEFAULT_CXXFLAGS.\n+    # Use this variable if the behavior\n+    #   1) only applies to libstdc++ testing\n+    #   2) might need to be negated \n+    # In particular, some tests have to be run without precompiled\n+    # headers, or without assertions.\n+    global DEFAULT_CXXFLAGS\n+    if ![info exists DEFAULT_CXXFLAGS] then {\n+\tset DEFAULT_CXXFLAGS \"-D_GLIBCXX_ASSERT\"\n+\n+\t# Set up includes for stdc++.h.gch, the precompiled header file.\n+\tif { [file exists $flags_file] } {\n+\t    set cxxpchflags [exec sh $flags_file --cxxpchflags]\n+\t} else {\n+\t    set cxxpchflags \"\"\n+\t}\n+\tappend DEFAULT_CXXFLAGS \" ${cxxpchflags}\"\n+\n+\t# Host specific goo here.\n+\tif { [string match \"powerpc-*-darwin*\" $target_triplet] } {\n+\t    append DEFAULT_CXXFLAGS \" -multiply_defined suppress\"\n+\t} \n+    }\n+    v3track DEFAULT_CXXFLAGS 2\n \n     # By default, we assume we want to run program images.\n     global dg-do-what-default\n@@ -87,6 +146,7 @@ proc v3-init { args } {\n     if {$gccdir != \"\"} {\n         set gccdir [file dirname $gccdir]\n     }\n+    v3track gccdir 3\n \n     # Compute what needs to be added to the existing LD_LIBRARY_PATH.\n     set ld_library_path \"\"\n@@ -138,7 +198,6 @@ proc v3-init { args } {\n       set includes \"-I./\"\n     } else {\n         # If we find a testsuite_flags file, we're testing in the build dir.\n-        set flags_file \"${blddir}/scripts/testsuite_flags\"\n         if { [file exists $flags_file] } {\n             set cxx [exec sh $flags_file --build-cxx]\n             set cxxflags [exec sh $flags_file --cxxflags]\n@@ -166,7 +225,6 @@ proc v3-init { args } {\n # Callback from system dg-test.\n proc libstdc++-dg-test { prog do_what extra_tool_flags } {\n     # Set up the compiler flags, based on what we're going to do.\n-\n     switch $do_what {\n         \"preprocess\" {\n             set compile_type \"preprocess\"\n@@ -204,6 +262,8 @@ proc libstdc++-dg-test { prog do_what extra_tool_flags } {\n         lappend options \"additional_flags=$extra_tool_flags\"\n     }\n \n+    # There is a libstdc++_compile made for us by default (via the tool-\n+    # and-target file), but the defaults are lacking in goodness.\n     set comp_output [v3_target_compile \"$prog\" \"$output_file\" \"$compile_type\" $options];\n     set comp_output [ prune_g++_output $comp_output ];\n \n@@ -242,7 +302,7 @@ proc v3_target_compile { source dest type options } {\n }\n \n \n-# Called once, from libstdc++*/dg.exp.\n+# Called once, from libstdc++/normal.exp.\n proc v3-list-tests { filename } {\n     global srcdir\n     global outdir"}, {"sha": "b613c66da1cbca3ef9e7ad3a8976267e704c3586", "filename": "libstdc++-v3/testsuite/libstdc++-dg/normal.exp", "status": "modified", "additions": 4, "deletions": 29, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/238345774bef2b14361c8ce2e51ca5a0d83de48d/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-dg%2Fnormal.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/238345774bef2b14361c8ce2e51ca5a0d83de48d/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-dg%2Fnormal.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-dg%2Fnormal.exp?ref=238345774bef2b14361c8ce2e51ca5a0d83de48d", "patch": "@@ -1,5 +1,7 @@\n-#   Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+# Primary test file for libstdc++.\n \n+# Copyright (C) 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n+#\n # This program is free software; you can redistribute it and/or modify\n # it under the terms of the GNU General Public License as published by\n # the Free Software Foundation; either version 2 of the License, or\n@@ -18,36 +20,9 @@\n \n # Initialization.\n dg-init\n-v3-init\n-\n-# If a libstdc++ test file doesn't have special options, use DEFAULT_CXXFLAGS.\n-# Use this variable if the behavior\n-# 1) only applies to libstdc++ testing\n-# 2) might need to be negated \n-# In particular, some tests have to be run without precompiled\n-# headers, or without assertions.\n-global blddir\n-global target_triplet\n-global DEFAULT_CXXFLAGS\n-if ![info exists DEFAULT_CXXFLAGS] then {\n-    set DEFAULT_CXXFLAGS \"-D_GLIBCXX_ASSERT\"\n-\n-    # Set up includes for stdc++.h.gch, the precompiled header file.\n-    set flags_file \"${blddir}/scripts/testsuite_flags\"\n-    if { [file exists $flags_file] } {\n-\tset cxxpchflags [exec sh $flags_file --cxxpchflags]\n-    } else {\n-\tset cxxpchflags \"\"\n-    }\n-    append DEFAULT_CXXFLAGS \" ${cxxpchflags}\"\n-\n-    # Host specific goo here.\n-    if { [string match \"powerpc-*-darwin*\" $target_triplet] } {\n-\tappend DEFAULT_CXXFLAGS \" -multiply_defined suppress\"\n-    } \n-}\n \n # Main loop.\n+global DEFAULT_CXXFLAGS\n dg-runtest [v3-list-tests testsuite_files] \"\" $DEFAULT_CXXFLAGS\n #dg-runtest [v3-list-tests testsuite_files_interactive] \"\" $DEFAULT_CXXFLAGS\n "}]}