{"sha": "a89b2cc4581e43f3b1f728d38bc4a23769ce63f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTg5YjJjYzQ1ODFlNDNmM2IxZjcyOGQzOGJjNGEyMzc2OWNlNjNmMw==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1994-09-02T02:12:48Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1994-09-02T02:12:48Z"}, "message": "Add better error messages than abort to reload1, and print insn involed.\n\nFrom-SVN: r8016", "tree": {"sha": "9a91163236ad0bacfbab31697da5ea6df0b1f13f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a91163236ad0bacfbab31697da5ea6df0b1f13f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a89b2cc4581e43f3b1f728d38bc4a23769ce63f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a89b2cc4581e43f3b1f728d38bc4a23769ce63f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a89b2cc4581e43f3b1f728d38bc4a23769ce63f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a89b2cc4581e43f3b1f728d38bc4a23769ce63f3/comments", "author": null, "committer": null, "parents": [{"sha": "ac83e1bb1c764477e399672ca27e7ff0ec1fb736", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac83e1bb1c764477e399672ca27e7ff0ec1fb736", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac83e1bb1c764477e399672ca27e7ff0ec1fb736"}], "stats": {"total": 44, "additions": 29, "deletions": 15}, "files": [{"sha": "9a608cb9445921cc16954274e756a84ee5503661", "filename": "gcc/genextract.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a89b2cc4581e43f3b1f728d38bc4a23769ce63f3/gcc%2Fgenextract.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a89b2cc4581e43f3b1f728d38bc4a23769ce63f3/gcc%2Fgenextract.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenextract.c?ref=a89b2cc4581e43f3b1f728d38bc4a23769ce63f3", "patch": "@@ -447,8 +447,6 @@ from the machine description file `md'.  */\\n\\n\");\n   printf (\"extern rtx *recog_operand_loc[];\\n\");\n   printf (\"extern rtx *recog_dup_loc[];\\n\");\n   printf (\"extern char recog_dup_num[];\\n\");\n-  printf (\"extern\\n#ifdef __GNUC__\\n__volatile__\\n#endif\\n\");\n-  printf (\"void fatal_insn_not_found ();\\n\\n\");\n \n   printf (\"void\\ninsn_extract (insn)\\n\");\n   printf (\"     rtx insn;\\n\");"}, {"sha": "c56710ecc3ad6213b9f77de9db1b2f964ff5b902", "filename": "gcc/reload1.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a89b2cc4581e43f3b1f728d38bc4a23769ce63f3/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a89b2cc4581e43f3b1f728d38bc4a23769ce63f3/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=a89b2cc4581e43f3b1f728d38bc4a23769ce63f3", "patch": "@@ -1153,7 +1153,8 @@ reload (first, global, dumpfile)\n \t\t      if (other_mode != VOIDmode && other_mode != allocate_mode\n \t\t\t  && ! modes_equiv_for_class_p (allocate_mode,\n \t\t\t\t\t\t\tother_mode, class))\n-\t\t\tabort ();\n+\t\t\tfatal_insn (\"Two dissimilar machine modes both need groups of consecutive regs of the same class\",\n+\t\t\t\t    insn);\n \t\t    }\n \t\t  else if (size == 1)\n \t\t    {\n@@ -2163,7 +2164,7 @@ spill_failure (insn)\n   if (asm_noperands (PATTERN (insn)) >= 0)\n     error_for_asm (insn, \"`asm' needs too many reloads\");\n   else\n-    abort ();\n+    fatal_insn (\"Unable to find a register to spill.\", insn);\n }\n \n /* Add a new register to the tables of available spill-registers\n@@ -3848,7 +3849,7 @@ reload_as_needed (first, live_known)\n \t\t\t&& ! reload_optional[i]\n \t\t\t&& (reload_in[i] != 0 || reload_out[i] != 0\n \t\t\t    || reload_secondary_p[i] != 0))\n-\t\t      abort ();\n+\t\t      fatal_insn (\"Non-optional registers need a spill register\", insn);\n \n \t      /* Now compute which reload regs to reload them into.  Perhaps\n \t\t reusing reload regs from previous insns, or else output\n@@ -4844,7 +4845,7 @@ allocate_reload_reg (r, insn, last_reload, noerror)\n  failure:\n   if (asm_noperands (PATTERN (insn)) < 0)\n     /* It's the compiler's fault.  */\n-    abort ();\n+    fatal_insn (\"Could not find a spill register\", insn);\n \n   /* It's the user's fault; the operand's mode and constraint\n      don't match.  Disable this reload so we don't crash in final.  */\n@@ -6298,7 +6299,7 @@ emit_reload_insns (insn)\n \t      /* VOIDmode should never happen for an output.  */\n \t      if (asm_noperands (PATTERN (insn)) < 0)\n \t\t/* It's the compiler's fault.  */\n-\t\tabort ();\n+\t\tfatal_insn (\"VOIDmode on an output\", insn);\n \t      error_for_asm (insn, \"output operand is constant in `asm'\");\n \t      /* Prevent crash--use something we know is valid.  */\n \t      mode = word_mode;"}, {"sha": "8e8a026660cb607ad15da6514b0665c7de035c92", "filename": "gcc/rtl.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a89b2cc4581e43f3b1f728d38bc4a23769ce63f3/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a89b2cc4581e43f3b1f728d38bc4a23769ce63f3/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=a89b2cc4581e43f3b1f728d38bc4a23769ce63f3", "patch": "@@ -922,6 +922,10 @@ extern rtx output_constant_def\t\tPROTO((union tree_node *));\n extern rtx immed_real_const\t\tPROTO((union tree_node *));\n extern union tree_node *make_tree\tPROTO((union tree_node *, rtx));\n \n+/* Abort routines */\n+extern void fatal_insn_not_found\tPROTO((rtx));\n+extern void fatal_insn\t\t\tPROTO((char *, rtx));\n+\n /* Define a default value for STORE_FLAG_VALUE.  */\n \n #ifndef STORE_FLAG_VALUE"}, {"sha": "5406a50ede1ef36cfe200aa26174e0714f5a4630", "filename": "gcc/toplev.c", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a89b2cc4581e43f3b1f728d38bc4a23769ce63f3/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a89b2cc4581e43f3b1f728d38bc4a23769ce63f3/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=a89b2cc4581e43f3b1f728d38bc4a23769ce63f3", "patch": "@@ -944,20 +944,17 @@ fatal_io_error (name)\n   exit (35);\n }\n \n-/* Called to give a better error message when we don't have an insn to match\n-   what we are looking for or if the insn's constraints aren't satisfied,\n-   rather than just calling abort().  */\n+/* Called to give a better error message for a bad insn rather than\n+   just calling abort().  */\n \n void\n-fatal_insn_not_found (insn)\n+fatal_insn (message, insn)\n+     char *message;\n      rtx insn;\n {\n   if (!output_bytecode)\n     {\n-      if (INSN_CODE (insn) < 0)\n-\terror (\"internal error--unrecognizable insn:\");\n-      else\n-\terror (\"internal error--insn does not satisfy its constraints:\");\n+      error (message);\n       debug_rtx (insn);\n     }\n   if (asm_out_file)\n@@ -995,6 +992,20 @@ fatal_insn_not_found (insn)\n   abort ();\n }\n \n+/* Called to give a better error message when we don't have an insn to match\n+   what we are looking for or if the insn's constraints aren't satisfied,\n+   rather than just calling abort().  */\n+\n+void\n+fatal_insn_not_found (insn)\n+     rtx insn;\n+{\n+  if (INSN_CODE (insn) < 0)\n+    fatal_insn (\"internal error--unrecognizable insn:\", insn);\n+  else\n+    fatal_insn (\"internal error--insn does not satisfy its constraints:\", insn);\n+}\n+\n /* This is the default decl_printable_name function.  */\n \n static char *"}]}