{"sha": "fc27f749afc49dbf95594caff81a9f33e2b59d8e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmMyN2Y3NDlhZmM0OWRiZjk1NTk0Y2FmZjgxYTlmMzNlMmI1OWQ4ZQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2012-08-04T08:37:50Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-08-04T08:37:50Z"}, "message": "i386.h (QI_REGNO_P): New define.\n\n\t* config/i386/i386.h (QI_REGNO_P): New define.\n\t(ANY_QI_REGNO_P): Ditto.\n\t(GENERAL_REGNO_P): Use IN_RANGE macro.\n\t(QI_REG_P): Use QI_REGNO_P.\n\t(ANY_QI_REG_P): Use GENERAL_REGNO_P and QI_REGNO_P.\n\t(HARD_REGNO_CALLER_SAVE_MODE): Use QI_REGNO_P.\n\t* config/i386/i386.c (ix86_hard_regno_mode_ok): Ditto.\n\t(x86_extended_QIreg_mentioned_p): Ditto.  Also check if\n\tregister is a general register.\n\nFrom-SVN: r190141", "tree": {"sha": "5e5ddc9079fcfbe168768fda4aab1b4a7093b359", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e5ddc9079fcfbe168768fda4aab1b4a7093b359"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc27f749afc49dbf95594caff81a9f33e2b59d8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc27f749afc49dbf95594caff81a9f33e2b59d8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc27f749afc49dbf95594caff81a9f33e2b59d8e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc27f749afc49dbf95594caff81a9f33e2b59d8e/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cd25dea0f46bb55e3e902e06757ee5488828d1a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd25dea0f46bb55e3e902e06757ee5488828d1a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd25dea0f46bb55e3e902e06757ee5488828d1a8"}], "stats": {"total": 45, "additions": 30, "deletions": 15}, "files": [{"sha": "c8985aee9fabfc880b92d9a42501a6226e2df2b0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc27f749afc49dbf95594caff81a9f33e2b59d8e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc27f749afc49dbf95594caff81a9f33e2b59d8e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fc27f749afc49dbf95594caff81a9f33e2b59d8e", "patch": "@@ -1,3 +1,15 @@\n+2012-08-04  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.h (QI_REGNO_P): New define.\n+\t(ANY_QI_REGNO_P): Ditto.\n+\t(GENERAL_REGNO_P): Use IN_RANGE macro.\n+\t(QI_REG_P): Use QI_REGNO_P.\n+\t(ANY_QI_REG_P): Use GENERAL_REGNO_P and QI_REGNO_P.\n+\t(HARD_REGNO_CALLER_SAVE_MODE): Use QI_REGNO_P.\n+\t* config/i386/i386.c (ix86_hard_regno_mode_ok): Ditto.\n+\t(x86_extended_QIreg_mentioned_p): Ditto.  Also check if\n+\tregister is a general register.\n+\n 2012-08-03  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/sync.md (*atomic_fetch_add_cmp<mode>): Use"}, {"sha": "1146d054ac8d4089238bc34edb491a94a210876f", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc27f749afc49dbf95594caff81a9f33e2b59d8e/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc27f749afc49dbf95594caff81a9f33e2b59d8e/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=fc27f749afc49dbf95594caff81a9f33e2b59d8e", "patch": "@@ -5402,7 +5402,7 @@ ix86_function_regparm (const_tree type, const_tree decl)\n \t     so less registers should be used for argument passing.\n \t     This functionality can be overriden by an explicit\n \t     regparm value.  */\n-\t  for (regno = 0; regno <= DI_REG; regno++)\n+\t  for (regno = AX_REG; regno <= DI_REG; regno++)\n \t    if (fixed_regs[regno])\n \t      globals++;\n \n@@ -32067,7 +32067,7 @@ ix86_hard_regno_mode_ok (int regno, enum machine_mode mode)\n     {\n       /* Take care for QImode values - they can be in non-QI regs,\n \t but then they do cause partial register stalls.  */\n-      if (regno <= BX_REG || TARGET_64BIT)\n+      if (TARGET_64BIT || QI_REGNO_P (regno))\n \treturn true;\n       if (!TARGET_PARTIAL_REG_STALL)\n \treturn true;\n@@ -33668,8 +33668,8 @@ x86_extended_QIreg_mentioned_p (rtx insn)\n   int i;\n   extract_insn_cached (insn);\n   for (i = 0; i < recog_data.n_operands; i++)\n-    if (REG_P (recog_data.operand[i])\n-\t&& REGNO (recog_data.operand[i]) > BX_REG)\n+    if (GENERAL_REG_P (recog_data.operand[i])\n+\t&& !QI_REGNO_P (REGNO (recog_data.operand[i])))\n        return true;\n   return false;\n }"}, {"sha": "60f4018203e58aa88a44144fd961cbc543145e5c", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc27f749afc49dbf95594caff81a9f33e2b59d8e/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc27f749afc49dbf95594caff81a9f33e2b59d8e/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=fc27f749afc49dbf95594caff81a9f33e2b59d8e", "patch": "@@ -1091,7 +1091,7 @@ enum target_cpu_default\n    : (MODE) == VOIDmode && (NREGS) != 1 ? VOIDmode\t\t\t\\\n    : (MODE) == VOIDmode ? choose_hard_reg_mode ((REGNO), (NREGS), false) \\\n    : (MODE) == HImode && !TARGET_PARTIAL_REG_STALL ? SImode\t\t\\\n-   : (MODE) == QImode && (REGNO) > BX_REG && !TARGET_64BIT ? SImode \t\\\n+   : (MODE) == QImode && !(TARGET_64BIT || QI_REGNO_P (REGNO)) ? SImode\t\\\n    : (MODE))\n \n /* The only ABI that saves SSE registers across calls is Win64 (thus no\n@@ -1316,29 +1316,32 @@ enum reg_class\n    registers.  */\n #define TARGET_SMALL_REGISTER_CLASSES_FOR_MODE_P hook_bool_mode_true\n \n-#define QI_REG_P(X) (REG_P (X) && REGNO (X) <= BX_REG)\n-\n-#define GENERAL_REGNO_P(N) \\\n-  ((N) <= STACK_POINTER_REGNUM || REX_INT_REGNO_P (N))\n+#define QI_REG_P(X) (REG_P (X) && QI_REGNO_P (REGNO (X)))\n+#define QI_REGNO_P(N) IN_RANGE ((N), AX_REG, BX_REG)\n \n #define GENERAL_REG_P(X) \\\n   (REG_P (X) && GENERAL_REGNO_P (REGNO (X)))\n+#define GENERAL_REGNO_P(N) \\\n+  (IN_RANGE ((N), AX_REG, SP_REG) || REX_INT_REGNO_P (N))\n \n-#define ANY_QI_REG_P(X) (TARGET_64BIT ? GENERAL_REG_P(X) : QI_REG_P (X))\n+#define ANY_QI_REG_P(X) (REG_P (X) && ANY_QI_REGNO_P (REGNO (X)))\n+#define ANY_QI_REGNO_P(N) \\\n+  (TARGET_64BIT ? GENERAL_REGNO_P (N) : QI_REGNO_P (N))\n \n+#define REX_INT_REG_P(X) (REG_P (X) && REX_INT_REGNO_P (REGNO (X)))\n #define REX_INT_REGNO_P(N) \\\n   IN_RANGE ((N), FIRST_REX_INT_REG, LAST_REX_INT_REG)\n-#define REX_INT_REG_P(X) (REG_P (X) && REX_INT_REGNO_P (REGNO (X)))\n \n #define FP_REG_P(X) (REG_P (X) && FP_REGNO_P (REGNO (X)))\n #define FP_REGNO_P(N) IN_RANGE ((N), FIRST_STACK_REG, LAST_STACK_REG)\n+\n #define ANY_FP_REG_P(X) (REG_P (X) && ANY_FP_REGNO_P (REGNO (X)))\n #define ANY_FP_REGNO_P(N) (FP_REGNO_P (N) || SSE_REGNO_P (N))\n \n #define X87_FLOAT_MODE_P(MODE)\t\\\n   (TARGET_80387 && ((MODE) == SFmode || (MODE) == DFmode || (MODE) == XFmode))\n \n-#define SSE_REG_P(N) (REG_P (N) && SSE_REGNO_P (REGNO (N)))\n+#define SSE_REG_P(X) (REG_P (X) && SSE_REGNO_P (REGNO (X)))\n #define SSE_REGNO_P(N)\t\t\t\t\t\t\\\n   (IN_RANGE ((N), FIRST_SSE_REG, LAST_SSE_REG)\t\t\t\\\n    || REX_SSE_REGNO_P (N))\n@@ -1356,13 +1359,13 @@ enum reg_class\n   (TARGET_FMA4 && ((MODE) == V4SFmode || (MODE) == V2DFmode \\\n \t\t  || (MODE) == V8SFmode || (MODE) == V4DFmode))\n \n-#define MMX_REG_P(XOP) (REG_P (XOP) && MMX_REGNO_P (REGNO (XOP)))\n+#define MMX_REG_P(X) (REG_P (X) && MMX_REGNO_P (REGNO (X)))\n #define MMX_REGNO_P(N) IN_RANGE ((N), FIRST_MMX_REG, LAST_MMX_REG)\n \n-#define STACK_REG_P(XOP) (REG_P (XOP) && STACK_REGNO_P (REGNO (XOP)))\n+#define STACK_REG_P(X) (REG_P (X) && STACK_REGNO_P (REGNO (X)))\n #define STACK_REGNO_P(N) IN_RANGE ((N), FIRST_STACK_REG, LAST_STACK_REG)\n \n-#define STACK_TOP_P(XOP) (REG_P (XOP) && REGNO (XOP) == FIRST_STACK_REG)\n+#define STACK_TOP_P(X) (REG_P (X) && REGNO (X) == FIRST_STACK_REG)\n \n #define CC_REG_P(X) (REG_P (X) && CC_REGNO_P (REGNO (X)))\n #define CC_REGNO_P(X) ((X) == FLAGS_REG || (X) == FPSR_REG)"}]}