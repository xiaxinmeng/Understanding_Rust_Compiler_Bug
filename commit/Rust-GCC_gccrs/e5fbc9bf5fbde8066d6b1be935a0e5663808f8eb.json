{"sha": "e5fbc9bf5fbde8066d6b1be935a0e5663808f8eb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTVmYmM5YmY1ZmJkZTgwNjZkNmIxYmU5MzVhMGU1NjYzODA4ZjhlYg==", "commit": {"author": {"name": "John David Anglin", "email": "dave.anglin@nrc-cnrc.gc.ca", "date": "2010-08-11T02:18:07Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2010-08-11T02:18:07Z"}, "message": "linux-atomic.c (SUBWORD_VAL_CAS): Instantiate with 'unsigned short' and 'unsigned char' instead of 'short' and 'char'.\n\n\t* config/pa/linux-atomic.c (SUBWORD_VAL_CAS): Instantiate with\n\t'unsigned short' and 'unsigned char' instead of 'short' and 'char'.\n\t(SUBWORD_BOOL_CAS): Likewise.\n\t(SUBWORD_SYNC_OP): Likewise.\n\t(SUBWORD_TEST_AND_SET): Likewise.\n\t(FETCH_AND_OP_WORD): Parenthesise INF_OP\n\t(SUBWORD_SYNC_OP): Likewise.\n\t(OP_AND_FETCH_WORD): Likewise.\n\nFrom-SVN: r163089", "tree": {"sha": "023c02b01ed5ef8dd47b9e3a740a85c00372ffd0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/023c02b01ed5ef8dd47b9e3a740a85c00372ffd0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e5fbc9bf5fbde8066d6b1be935a0e5663808f8eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5fbc9bf5fbde8066d6b1be935a0e5663808f8eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5fbc9bf5fbde8066d6b1be935a0e5663808f8eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5fbc9bf5fbde8066d6b1be935a0e5663808f8eb/comments", "author": null, "committer": null, "parents": [{"sha": "1ae0fa1c16c568919d0a269414b4cf564d8529ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ae0fa1c16c568919d0a269414b4cf564d8529ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ae0fa1c16c568919d0a269414b4cf564d8529ec"}], "stats": {"total": 83, "additions": 47, "deletions": 36}, "files": [{"sha": "a4662a77a4bff1b3bb34a16b506e98990c3c008c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5fbc9bf5fbde8066d6b1be935a0e5663808f8eb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5fbc9bf5fbde8066d6b1be935a0e5663808f8eb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e5fbc9bf5fbde8066d6b1be935a0e5663808f8eb", "patch": "@@ -1,3 +1,14 @@\n+2010-08-10  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n+\n+\t* config/pa/linux-atomic.c (SUBWORD_VAL_CAS): Instantiate with\n+\t'unsigned short' and 'unsigned char' instead of 'short' and 'char'.\n+\t(SUBWORD_BOOL_CAS): Likewise.\n+\t(SUBWORD_SYNC_OP): Likewise.\n+\t(SUBWORD_TEST_AND_SET): Likewise.\n+\t(FETCH_AND_OP_WORD): Parenthesise INF_OP\n+\t(SUBWORD_SYNC_OP): Likewise.\n+\t(OP_AND_FETCH_WORD): Likewise.\n+\n 2010-08-10  Xinliang David Li  <davidxl@google.com>\n \n \t* tree-ssa-loop-ivopts.c (get_address_cost): Properly"}, {"sha": "31593c6f5d5cadd53571f6cd930794d1e87856bd", "filename": "gcc/config/pa/linux-atomic.c", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5fbc9bf5fbde8066d6b1be935a0e5663808f8eb/gcc%2Fconfig%2Fpa%2Flinux-atomic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5fbc9bf5fbde8066d6b1be935a0e5663808f8eb/gcc%2Fconfig%2Fpa%2Flinux-atomic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Flinux-atomic.c?ref=e5fbc9bf5fbde8066d6b1be935a0e5663808f8eb", "patch": "@@ -1,5 +1,5 @@\n /* Linux-specific atomic operations for PA Linux.\n-   Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n+   Copyright (C) 2008, 2009, 2010 Free Software Foundation, Inc.\n    Based on code contributed by CodeSourcery for ARM EABI Linux.\n    Modifications for PA Linux by Helge Deller <deller@gmx.de>\n \n@@ -92,7 +92,7 @@ __kernel_cmpxchg (int oldval, int newval, int *mem)\n \t\t\t\t\t\t\t\t\t\\\n     do {\t\t\t\t\t\t\t\t\\\n       tmp = *ptr;\t\t\t\t\t\t\t\\\n-      failure = __kernel_cmpxchg (tmp, PFX_OP tmp INF_OP val, ptr);\t\\\n+      failure = __kernel_cmpxchg (tmp, PFX_OP (tmp INF_OP val), ptr);\t\\\n     } while (failure != 0);\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n     return tmp;\t\t\t\t\t\t\t\t\\\n@@ -124,28 +124,28 @@ FETCH_AND_OP_WORD (nand, ~, &)\n \t\t\t\t\t\t\t\t\t\\\n     do {\t\t\t\t\t\t\t\t\\\n       oldval = *wordptr;\t\t\t\t\t\t\\\n-      newval = ((PFX_OP ((oldval & mask) >> shift)\t\t\t\\\n-                 INF_OP (unsigned int) val) << shift) & mask;\t\t\\\n+      newval = ((PFX_OP (((oldval & mask) >> shift)\t\t\t\\\n+                         INF_OP (unsigned int) val)) << shift) & mask;\t\\\n       newval |= oldval & ~mask;\t\t\t\t\t\t\\\n       failure = __kernel_cmpxchg (oldval, newval, wordptr);\t\t\\\n     } while (failure != 0);\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n     return (RETURN & mask) >> shift;\t\t\t\t\t\\\n   }\n \n-SUBWORD_SYNC_OP (add,   , +, short, 2, oldval)\n-SUBWORD_SYNC_OP (sub,   , -, short, 2, oldval)\n-SUBWORD_SYNC_OP (or,    , |, short, 2, oldval)\n-SUBWORD_SYNC_OP (and,   , &, short, 2, oldval)\n-SUBWORD_SYNC_OP (xor,   , ^, short, 2, oldval)\n-SUBWORD_SYNC_OP (nand, ~, &, short, 2, oldval)\n+SUBWORD_SYNC_OP (add,   , +, unsigned short, 2, oldval)\n+SUBWORD_SYNC_OP (sub,   , -, unsigned short, 2, oldval)\n+SUBWORD_SYNC_OP (or,    , |, unsigned short, 2, oldval)\n+SUBWORD_SYNC_OP (and,   , &, unsigned short, 2, oldval)\n+SUBWORD_SYNC_OP (xor,   , ^, unsigned short, 2, oldval)\n+SUBWORD_SYNC_OP (nand, ~, &, unsigned short, 2, oldval)\n \n-SUBWORD_SYNC_OP (add,   , +, char, 1, oldval)\n-SUBWORD_SYNC_OP (sub,   , -, char, 1, oldval)\n-SUBWORD_SYNC_OP (or,    , |, char, 1, oldval)\n-SUBWORD_SYNC_OP (and,   , &, char, 1, oldval)\n-SUBWORD_SYNC_OP (xor,   , ^, char, 1, oldval)\n-SUBWORD_SYNC_OP (nand, ~, &, char, 1, oldval)\n+SUBWORD_SYNC_OP (add,   , +, unsigned char, 1, oldval)\n+SUBWORD_SYNC_OP (sub,   , -, unsigned char, 1, oldval)\n+SUBWORD_SYNC_OP (or,    , |, unsigned char, 1, oldval)\n+SUBWORD_SYNC_OP (and,   , &, unsigned char, 1, oldval)\n+SUBWORD_SYNC_OP (xor,   , ^, unsigned char, 1, oldval)\n+SUBWORD_SYNC_OP (nand, ~, &, unsigned char, 1, oldval)\n \n #define OP_AND_FETCH_WORD(OP, PFX_OP, INF_OP)\t\t\t\t\\\n   int HIDDEN\t\t\t\t\t\t\t\t\\\n@@ -155,10 +155,10 @@ SUBWORD_SYNC_OP (nand, ~, &, char, 1, oldval)\n \t\t\t\t\t\t\t\t\t\\\n     do {\t\t\t\t\t\t\t\t\\\n       tmp = *ptr;\t\t\t\t\t\t\t\\\n-      failure = __kernel_cmpxchg (tmp, PFX_OP tmp INF_OP val, ptr);\t\\\n+      failure = __kernel_cmpxchg (tmp, PFX_OP (tmp INF_OP val), ptr);\t\\\n     } while (failure != 0);\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-    return PFX_OP tmp INF_OP val;\t\t\t\t\t\\\n+    return PFX_OP (tmp INF_OP val);\t\t\t\t\t\\\n   }\n \n OP_AND_FETCH_WORD (add,   , +)\n@@ -168,19 +168,19 @@ OP_AND_FETCH_WORD (and,   , &)\n OP_AND_FETCH_WORD (xor,   , ^)\n OP_AND_FETCH_WORD (nand, ~, &)\n \n-SUBWORD_SYNC_OP (add,   , +, short, 2, newval)\n-SUBWORD_SYNC_OP (sub,   , -, short, 2, newval)\n-SUBWORD_SYNC_OP (or,    , |, short, 2, newval)\n-SUBWORD_SYNC_OP (and,   , &, short, 2, newval)\n-SUBWORD_SYNC_OP (xor,   , ^, short, 2, newval)\n-SUBWORD_SYNC_OP (nand, ~, &, short, 2, newval)\n+SUBWORD_SYNC_OP (add,   , +, unsigned short, 2, newval)\n+SUBWORD_SYNC_OP (sub,   , -, unsigned short, 2, newval)\n+SUBWORD_SYNC_OP (or,    , |, unsigned short, 2, newval)\n+SUBWORD_SYNC_OP (and,   , &, unsigned short, 2, newval)\n+SUBWORD_SYNC_OP (xor,   , ^, unsigned short, 2, newval)\n+SUBWORD_SYNC_OP (nand, ~, &, unsigned short, 2, newval)\n \n-SUBWORD_SYNC_OP (add,   , +, char, 1, newval)\n-SUBWORD_SYNC_OP (sub,   , -, char, 1, newval)\n-SUBWORD_SYNC_OP (or,    , |, char, 1, newval)\n-SUBWORD_SYNC_OP (and,   , &, char, 1, newval)\n-SUBWORD_SYNC_OP (xor,   , ^, char, 1, newval)\n-SUBWORD_SYNC_OP (nand, ~, &, char, 1, newval)\n+SUBWORD_SYNC_OP (add,   , +, unsigned char, 1, newval)\n+SUBWORD_SYNC_OP (sub,   , -, unsigned char, 1, newval)\n+SUBWORD_SYNC_OP (or,    , |, unsigned char, 1, newval)\n+SUBWORD_SYNC_OP (and,   , &, unsigned char, 1, newval)\n+SUBWORD_SYNC_OP (xor,   , ^, unsigned char, 1, newval)\n+SUBWORD_SYNC_OP (nand, ~, &, unsigned char, 1, newval)\n \n int HIDDEN\n __sync_val_compare_and_swap_4 (int *ptr, int oldval, int newval)\n@@ -230,8 +230,8 @@ __sync_val_compare_and_swap_4 (int *ptr, int oldval, int newval)\n       }\t\t\t\t\t\t\t\t\t\\\n   }\n \n-SUBWORD_VAL_CAS (short, 2)\n-SUBWORD_VAL_CAS (char,  1)\n+SUBWORD_VAL_CAS (unsigned short, 2)\n+SUBWORD_VAL_CAS (unsigned char,  1)\n \n typedef unsigned char bool;\n \n@@ -252,8 +252,8 @@ __sync_bool_compare_and_swap_4 (int *ptr, int oldval, int newval)\n     return (oldval == actual_oldval);\t\t\t\t\t\\\n   }\n \n-SUBWORD_BOOL_CAS (short, 2)\n-SUBWORD_BOOL_CAS (char,  1)\n+SUBWORD_BOOL_CAS (unsigned short, 2)\n+SUBWORD_BOOL_CAS (unsigned char,  1)\n \n int HIDDEN\n __sync_lock_test_and_set_4 (int *ptr, int val)\n@@ -289,8 +289,8 @@ __sync_lock_test_and_set_4 (int *ptr, int val)\n     return (oldval & mask) >> shift;\t\t\t\t\t\\\n   }\n \n-SUBWORD_TEST_AND_SET (short, 2)\n-SUBWORD_TEST_AND_SET (char,  1)\n+SUBWORD_TEST_AND_SET (unsigned short, 2)\n+SUBWORD_TEST_AND_SET (unsigned char,  1)\n \n #define SYNC_LOCK_RELEASE(TYPE, WIDTH)\t\t\t\t\t\\\n   void HIDDEN\t\t\t\t\t\t\t\t\\"}]}