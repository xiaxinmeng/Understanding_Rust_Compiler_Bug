{"sha": "c34d09274e72031d768e18d3f2365a1532357879", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzM0ZDA5Mjc0ZTcyMDMxZDc2OGUxOGQzZjIzNjVhMTUzMjM1Nzg3OQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-07-02T08:37:07Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-07-02T08:37:07Z"}, "message": "PR81136: ICE from inconsistent DR_MISALIGNMENTs\n\nThe test case triggered this assert in vect_update_misalignment_for_peel:\n\n      gcc_assert (DR_MISALIGNMENT (dr) / dr_size ==\n                  DR_MISALIGNMENT (dr_peel) / dr_peel_size);\n\nThe problem was that:\n\n- one memory reference guaranteed a high base alignment, when considering\n  that reference in isolation.  This meant that we could calculate the\n  vector misalignment for its DR at compile time.\n\n- the other memory reference only guaranteed a low base alignment,\n  when considering that reference in isolation.  We therefore couldn't\n  calculate the vector misalignment for its DR at compile time.\n\n- when looking at the values of the two addresses as a pair (rather\n  than the memory references), it was obvious that they had the same\n  misalignment, whatever that misalignment happened to be.\n\nThis is working as designed, so the patch restricts the assert to cases\nin which both addresses have a compile-time misalignment.\n\nIn the test case this looks like a missed opportunity.  Both references\nare unconditional, so it should be possible to use the highest of the\navailable base alignment guarantees when analyzing each reference.\nA later patch does this, but the problem would still remain for\nconditional references.\n\n2017-07-02  Richard Sandiford  <richard.sandiford@linaro.org>\n\ngcc/\n\tPR tree-optimization/81136\n\t* tree-vect-data-refs.c (vect_update_misalignment_for_peel): Only\n\tassert that two references with the same misalignment have the same\n\tcompile-time misalignment if those compile-time misalignments\n\tare known.\n\ngcc/testsuite/\n\tPR tree-optimization/81136\n\t* gcc.dg/vect/pr81136.c: New test.\n\nFrom-SVN: r249878", "tree": {"sha": "917bb0ecab647d97b53a265919a4c8ac41d0a5ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/917bb0ecab647d97b53a265919a4c8ac41d0a5ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c34d09274e72031d768e18d3f2365a1532357879", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c34d09274e72031d768e18d3f2365a1532357879", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c34d09274e72031d768e18d3f2365a1532357879", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c34d09274e72031d768e18d3f2365a1532357879/comments", "author": null, "committer": null, "parents": [{"sha": "86ae8a3d6664c957337af20d2b56c461152696bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86ae8a3d6664c957337af20d2b56c461152696bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86ae8a3d6664c957337af20d2b56c461152696bd"}], "stats": {"total": 35, "additions": 33, "deletions": 2}, "files": [{"sha": "76944d5ea01ed59d83fb624e4700c2beb3d13e39", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c34d09274e72031d768e18d3f2365a1532357879/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c34d09274e72031d768e18d3f2365a1532357879/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c34d09274e72031d768e18d3f2365a1532357879", "patch": "@@ -1,3 +1,11 @@\n+2017-07-02  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\tPR tree-optimization/81136\n+\t* tree-vect-data-refs.c (vect_update_misalignment_for_peel): Only\n+\tassert that two references with the same misalignment have the same\n+\tcompile-time misalignment if those compile-time misalignments\n+\tare known.\n+\n 2017-07-01  Andi Kleen  <ak@linux.intel.com>\n \n         * print-tree.c (print_node): Print all attributes."}, {"sha": "46259217cc0a82bc6bd25be45384918df3402015", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c34d09274e72031d768e18d3f2365a1532357879/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c34d09274e72031d768e18d3f2365a1532357879/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c34d09274e72031d768e18d3f2365a1532357879", "patch": "@@ -1,3 +1,8 @@\n+2017-07-02  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\tPR tree-optimization/81136\n+\t* gcc.dg/vect/pr81136.c: New test.\n+\n 2017-07-01  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR sanitizer/81262"}, {"sha": "24bd8fa3b19c16f5ee2585940df7000b2a357365", "filename": "gcc/testsuite/gcc.dg/vect/pr81136.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c34d09274e72031d768e18d3f2365a1532357879/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr81136.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c34d09274e72031d768e18d3f2365a1532357879/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr81136.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr81136.c?ref=c34d09274e72031d768e18d3f2365a1532357879", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+\n+struct __attribute__((aligned (32)))\n+{\n+  char misaligner;\n+  int foo[100];\n+  int bar[100];\n+} *a;\n+\n+void\n+fn1 (int n)\n+{\n+  int *b = a->foo;\n+  for (int i = 0; i < n; i++)\n+    a->bar[i] = b[i];\n+}"}, {"sha": "1595bb4247cd676725558c633b1c88d80fdef548", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c34d09274e72031d768e18d3f2365a1532357879/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c34d09274e72031d768e18d3f2365a1532357879/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=c34d09274e72031d768e18d3f2365a1532357879", "patch": "@@ -906,8 +906,10 @@ vect_update_misalignment_for_peel (struct data_reference *dr,\n     {\n       if (current_dr != dr)\n         continue;\n-      gcc_assert (DR_MISALIGNMENT (dr) / dr_size ==\n-                  DR_MISALIGNMENT (dr_peel) / dr_peel_size);\n+      gcc_assert (!known_alignment_for_access_p (dr)\n+\t\t  || !known_alignment_for_access_p (dr_peel)\n+\t\t  || (DR_MISALIGNMENT (dr) / dr_size\n+\t\t      == DR_MISALIGNMENT (dr_peel) / dr_peel_size));\n       SET_DR_MISALIGNMENT (dr, 0);\n       return;\n     }"}]}