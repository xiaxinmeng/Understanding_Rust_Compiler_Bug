{"sha": "8942ee0fbfe5361a71c51401933efd1938725dec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODk0MmVlMGZiZmU1MzYxYTcxYzUxNDAxOTMzZWZkMTkzODcyNWRlYw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-08-19T19:19:13Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-08-19T19:19:13Z"}, "message": "Make tablejump_p accept a rtx_jump_table_data **\n\n2014-08-19  David Malcolm  <dmalcolm@redhat.com>\n\n\t* rtl.h (tablejump_p): Strengthen third param from rtx * to\n\trtx_jump_table_data **.\n\n\t* cfgbuild.c (make_edges): Introduce local \"table\", using it in\n\tplace of \"tmp\" for jump table data.\n\t(find_bb_boundaries): Strengthen local \"table\" from rtx to\n\trtx_jump_table_data *.\n\t* cfgcleanup.c (merge_blocks_move_successor_nojumps): Likewise.\n\t(outgoing_edges_match): Likewise for locals \"table1\" and \"table2\".\n\t(try_crossjump_to_edge): Likewise.\n\t* cfgrtl.c (try_redirect_by_replacing_jump): Likewise for local\n\t\"table\".\n\t(patch_jump_insn): Introduce local \"table\", using it in place of\n\t\"tmp\" for jump table data.\n\t(force_nonfallthru_and_redirect): Introduce local \"table\", so that\n\tcall to tablejump_p can receive an rtx_jump_table_data **.  Update\n\tlogic around the call to overwrite \"note\" appropriately if\n\ttablejump_p returns non-zero.\n\t(get_last_bb_insn): Introduce local \"table\", using it in place of\n\t\"tmp\" for jump table data.\n\t* dwarf2cfi.c (create_trace_edges): Likewise.\n\n\t* config/arm/arm.c (get_jump_table_size): Strengthen param \"insn\"\n\tfrom rtx to rtx_jump_table_data *.\n\t(create_fix_barrier): Strengthen local \"tmp\" from rtx to\n\trtx_jump_table_data *.\n\t(arm_reorg): Likewise for local \"table\".\n\n\t* config/s390/s390.c (s390_chunkify_start): Likewise.\n\n\t* config/spu/spu.c (spu_emit_branch_hint): Likewise.\n\n\t* jump.c (delete_related_insns): Strengthen local \"lab_next\" from\n\trtx to rtx_jump_table_data *.\n\n\t* rtlanal.c (tablejump_p): Strengthen param \"tablep\" from rtx * to\n\trtx_jump_table_data **.  Add a checked cast when writing through\n\tthe pointer: we know there that local \"table\" is non-NULL and that\n\tJUMP_TABLE_DATA_P (table) holds.\n\t(label_is_jump_target_p): Introduce local \"table\", using it in\n\tplace of \"tmp\" for jump table data.\n\nFrom-SVN: r214184", "tree": {"sha": "25dcbcad495942e5f4d89b95ad979a56367bd84f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25dcbcad495942e5f4d89b95ad979a56367bd84f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8942ee0fbfe5361a71c51401933efd1938725dec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8942ee0fbfe5361a71c51401933efd1938725dec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8942ee0fbfe5361a71c51401933efd1938725dec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8942ee0fbfe5361a71c51401933efd1938725dec/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "04159acfd818cbc29a9d12dfa2e83716c106f2c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04159acfd818cbc29a9d12dfa2e83716c106f2c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04159acfd818cbc29a9d12dfa2e83716c106f2c7"}], "stats": {"total": 118, "additions": 87, "deletions": 31}, "files": [{"sha": "68f8001cc9888dff0a32243fb4707dc7214380d0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8942ee0fbfe5361a71c51401933efd1938725dec/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8942ee0fbfe5361a71c51401933efd1938725dec/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8942ee0fbfe5361a71c51401933efd1938725dec", "patch": "@@ -1,3 +1,47 @@\n+2014-08-19  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* rtl.h (tablejump_p): Strengthen third param from rtx * to\n+\trtx_jump_table_data **.\n+\n+\t* cfgbuild.c (make_edges): Introduce local \"table\", using it in\n+\tplace of \"tmp\" for jump table data.\n+\t(find_bb_boundaries): Strengthen local \"table\" from rtx to\n+\trtx_jump_table_data *.\n+\t* cfgcleanup.c (merge_blocks_move_successor_nojumps): Likewise.\n+\t(outgoing_edges_match): Likewise for locals \"table1\" and \"table2\".\n+\t(try_crossjump_to_edge): Likewise.\n+\t* cfgrtl.c (try_redirect_by_replacing_jump): Likewise for local\n+\t\"table\".\n+\t(patch_jump_insn): Introduce local \"table\", using it in place of\n+\t\"tmp\" for jump table data.\n+\t(force_nonfallthru_and_redirect): Introduce local \"table\", so that\n+\tcall to tablejump_p can receive an rtx_jump_table_data **.  Update\n+\tlogic around the call to overwrite \"note\" appropriately if\n+\ttablejump_p returns non-zero.\n+\t(get_last_bb_insn): Introduce local \"table\", using it in place of\n+\t\"tmp\" for jump table data.\n+\t* dwarf2cfi.c (create_trace_edges): Likewise.\n+\n+\t* config/arm/arm.c (get_jump_table_size): Strengthen param \"insn\"\n+\tfrom rtx to rtx_jump_table_data *.\n+\t(create_fix_barrier): Strengthen local \"tmp\" from rtx to\n+\trtx_jump_table_data *.\n+\t(arm_reorg): Likewise for local \"table\".\n+\n+\t* config/s390/s390.c (s390_chunkify_start): Likewise.\n+\n+\t* config/spu/spu.c (spu_emit_branch_hint): Likewise.\n+\n+\t* jump.c (delete_related_insns): Strengthen local \"lab_next\" from\n+\trtx to rtx_jump_table_data *.\n+\n+\t* rtlanal.c (tablejump_p): Strengthen param \"tablep\" from rtx * to\n+\trtx_jump_table_data **.  Add a checked cast when writing through\n+\tthe pointer: we know there that local \"table\" is non-NULL and that\n+\tJUMP_TABLE_DATA_P (table) holds.\n+\t(label_is_jump_target_p): Introduce local \"table\", using it in\n+\tplace of \"tmp\" for jump table data.\n+\n 2014-08-19  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/62153"}, {"sha": "848e13f51abd15b71b9fd68baf88a477650eb64d", "filename": "gcc/cfgbuild.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8942ee0fbfe5361a71c51401933efd1938725dec/gcc%2Fcfgbuild.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8942ee0fbfe5361a71c51401933efd1938725dec/gcc%2Fcfgbuild.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgbuild.c?ref=8942ee0fbfe5361a71c51401933efd1938725dec", "patch": "@@ -252,22 +252,23 @@ make_edges (basic_block min, basic_block max, int update_p)\n       if (code == JUMP_INSN)\n \t{\n \t  rtx tmp;\n+\t  rtx_jump_table_data *table;\n \n \t  /* Recognize a non-local goto as a branch outside the\n \t     current function.  */\n \t  if (find_reg_note (insn, REG_NON_LOCAL_GOTO, NULL_RTX))\n \t    ;\n \n \t  /* Recognize a tablejump and do the right thing.  */\n-\t  else if (tablejump_p (insn, NULL, &tmp))\n+\t  else if (tablejump_p (insn, NULL, &table))\n \t    {\n \t      rtvec vec;\n \t      int j;\n \n-\t      if (GET_CODE (PATTERN (tmp)) == ADDR_VEC)\n-\t\tvec = XVEC (PATTERN (tmp), 0);\n+\t      if (GET_CODE (PATTERN (table)) == ADDR_VEC)\n+\t\tvec = XVEC (PATTERN (table), 0);\n \t      else\n-\t\tvec = XVEC (PATTERN (tmp), 1);\n+\t\tvec = XVEC (PATTERN (table), 1);\n \n \t      for (j = GET_NUM_ELEM (vec) - 1; j >= 0; --j)\n \t\tmake_label_edge (edge_cache, bb,\n@@ -444,7 +445,7 @@ find_bb_boundaries (basic_block bb)\n   basic_block orig_bb = bb;\n   rtx insn = BB_HEAD (bb);\n   rtx end = BB_END (bb), x;\n-  rtx table;\n+  rtx_jump_table_data *table;\n   rtx flow_transfer_insn = NULL_RTX;\n   edge fallthru = NULL;\n "}, {"sha": "9f43912320dd86837943b0ff30010799cfc9e988", "filename": "gcc/cfgcleanup.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8942ee0fbfe5361a71c51401933efd1938725dec/gcc%2Fcfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8942ee0fbfe5361a71c51401933efd1938725dec/gcc%2Fcfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgcleanup.c?ref=8942ee0fbfe5361a71c51401933efd1938725dec", "patch": "@@ -704,7 +704,8 @@ static void\n merge_blocks_move_successor_nojumps (basic_block a, basic_block b)\n {\n   rtx barrier, real_b_end;\n-  rtx label, table;\n+  rtx label;\n+  rtx_jump_table_data *table;\n \n   /* If we are partitioning hot/cold basic blocks, we don't want to\n      mess up unconditional or indirect jumps that cross between hot\n@@ -1675,7 +1676,7 @@ outgoing_edges_match (int mode, basic_block bb1, basic_block bb2)\n      Return true if they are identical.  */\n     {\n       rtx label1, label2;\n-      rtx table1, table2;\n+      rtx_jump_table_data *table1, *table2;\n \n       if (tablejump_p (BB_END (bb1), &label1, &table1)\n \t  && tablejump_p (BB_END (bb2), &label2, &table2)\n@@ -1978,7 +1979,7 @@ try_crossjump_to_edge (int mode, edge e1, edge e2,\n      so replace the references to TABLE1 by references to TABLE2.  */\n     {\n       rtx label1, label2;\n-      rtx table1, table2;\n+      rtx_jump_table_data *table1, *table2;\n \n       if (tablejump_p (BB_END (osrc1), &label1, &table1)\n \t  && tablejump_p (BB_END (osrc2), &label2, &table2)"}, {"sha": "5babdf9d15f89b11eb5a109da1fa86c46af9248e", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8942ee0fbfe5361a71c51401933efd1938725dec/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8942ee0fbfe5361a71c51401933efd1938725dec/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=8942ee0fbfe5361a71c51401933efd1938725dec", "patch": "@@ -1099,7 +1099,8 @@ try_redirect_by_replacing_jump (edge e, basic_block target, bool in_cfglayout)\n   else\n     {\n       rtx target_label = block_label (target);\n-      rtx barrier, label, table;\n+      rtx barrier, label;\n+      rtx_jump_table_data *table;\n \n       emit_jump_insn_after_noloc (gen_jump (target_label), insn);\n       JUMP_LABEL (BB_END (src)) = target_label;\n@@ -1172,20 +1173,21 @@ try_redirect_by_replacing_jump (edge e, basic_block target, bool in_cfglayout)\n static bool\n patch_jump_insn (rtx insn, rtx old_label, basic_block new_bb)\n {\n+  rtx_jump_table_data *table;\n   rtx tmp;\n   /* Recognize a tablejump and adjust all matching cases.  */\n-  if (tablejump_p (insn, NULL, &tmp))\n+  if (tablejump_p (insn, NULL, &table))\n     {\n       rtvec vec;\n       int j;\n       rtx new_label = block_label (new_bb);\n \n       if (new_bb == EXIT_BLOCK_PTR_FOR_FN (cfun))\n \treturn false;\n-      if (GET_CODE (PATTERN (tmp)) == ADDR_VEC)\n-\tvec = XVEC (PATTERN (tmp), 0);\n+      if (GET_CODE (PATTERN (table)) == ADDR_VEC)\n+\tvec = XVEC (PATTERN (table), 0);\n       else\n-\tvec = XVEC (PATTERN (tmp), 1);\n+\tvec = XVEC (PATTERN (table), 1);\n \n       for (j = GET_NUM_ELEM (vec) - 1; j >= 0; --j)\n \tif (XEXP (RTVEC_ELT (vec, j), 0) == old_label)\n@@ -1607,7 +1609,10 @@ force_nonfallthru_and_redirect (edge e, basic_block target, rtx jump_label)\n       /* If the old block ended with a tablejump, skip its table\n \t by searching forward from there.  Otherwise start searching\n \t forward from the last instruction of the old block.  */\n-      if (!tablejump_p (BB_END (e->src), NULL, &note))\n+      rtx_jump_table_data *table;\n+      if (tablejump_p (BB_END (e->src), NULL, &table))\n+\tnote = table;\n+      else\n \tnote = BB_END (e->src);\n       note = NEXT_INSN (note);\n \n@@ -2234,12 +2239,13 @@ update_br_prob_note (basic_block bb)\n rtx\n get_last_bb_insn (basic_block bb)\n {\n+  rtx_jump_table_data *table;\n   rtx tmp;\n   rtx end = BB_END (bb);\n \n   /* Include any jump table following the basic block.  */\n-  if (tablejump_p (end, NULL, &tmp))\n-    end = tmp;\n+  if (tablejump_p (end, NULL, &table))\n+    end = table;\n \n   /* Include any barriers that may follow the basic block.  */\n   tmp = next_nonnote_insn_bb (end);"}, {"sha": "858f0d7895087828e247306a9edd14a20f0a369e", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8942ee0fbfe5361a71c51401933efd1938725dec/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8942ee0fbfe5361a71c51401933efd1938725dec/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=8942ee0fbfe5361a71c51401933efd1938725dec", "patch": "@@ -108,7 +108,7 @@ static const char *output_multi_immediate (rtx *, const char *, const char *,\n static const char *shift_op (rtx, HOST_WIDE_INT *);\n static struct machine_function *arm_init_machine_status (void);\n static void thumb_exit (FILE *, int);\n-static HOST_WIDE_INT get_jump_table_size (rtx);\n+static HOST_WIDE_INT get_jump_table_size (rtx_jump_table_data *);\n static Mnode *move_minipool_fix_forward_ref (Mnode *, Mnode *, HOST_WIDE_INT);\n static Mnode *add_minipool_forward_ref (Mfix *);\n static Mnode *move_minipool_fix_backward_ref (Mnode *, Mnode *, HOST_WIDE_INT);\n@@ -16122,7 +16122,7 @@ Mfix *\t\tminipool_barrier;\n #endif\n \n static HOST_WIDE_INT\n-get_jump_table_size (rtx insn)\n+get_jump_table_size (rtx_jump_table_data *insn)\n {\n   /* ADDR_VECs only take room if read-only data does into the text\n      section.  */\n@@ -16710,7 +16710,7 @@ create_fix_barrier (Mfix *fix, HOST_WIDE_INT max_address)\n \n   while (from && count < max_count)\n     {\n-      rtx tmp;\n+      rtx_jump_table_data *tmp;\n       int new_cost;\n \n       /* This code shouldn't have been called if there was a natural barrier\n@@ -17355,7 +17355,7 @@ arm_reorg (void)\n \tpush_minipool_barrier (insn, address);\n       else if (INSN_P (insn))\n \t{\n-\t  rtx table;\n+\t  rtx_jump_table_data *table;\n \n \t  note_invalid_constants (insn, address, true);\n \t  address += get_attr_length (insn);"}, {"sha": "1dd7c015caf43873be8f022f4c56197c170c7d6d", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8942ee0fbfe5361a71c51401933efd1938725dec/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8942ee0fbfe5361a71c51401933efd1938725dec/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=8942ee0fbfe5361a71c51401933efd1938725dec", "patch": "@@ -7072,7 +7072,7 @@ s390_chunkify_start (void)\n \n   for (insn = get_insns (); insn; insn = NEXT_INSN (insn))\n     {\n-      rtx table;\n+      rtx_jump_table_data *table;\n \n       /* Labels marked with LABEL_PRESERVE_P can be target\n \t of non-local jumps, so we have to mark them."}, {"sha": "8816371cc344cc06670be36baa55ed616059de91", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8942ee0fbfe5361a71c51401933efd1938725dec/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8942ee0fbfe5361a71c51401933efd1938725dec/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=8942ee0fbfe5361a71c51401933efd1938725dec", "patch": "@@ -2104,7 +2104,7 @@ spu_emit_branch_hint (rtx before, rtx branch, rtx target,\n   rtx branch_label = 0;\n   rtx hint;\n   rtx insn;\n-  rtx table;\n+  rtx_jump_table_data *table;\n \n   if (before == 0 || branch == 0 || target == 0)\n     return;"}, {"sha": "665d41979c2ae63208ff2c465541a15a8cffef61", "filename": "gcc/dwarf2cfi.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8942ee0fbfe5361a71c51401933efd1938725dec/gcc%2Fdwarf2cfi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8942ee0fbfe5361a71c51401933efd1938725dec/gcc%2Fdwarf2cfi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2cfi.c?ref=8942ee0fbfe5361a71c51401933efd1938725dec", "patch": "@@ -2291,14 +2291,16 @@ create_trace_edges (rtx insn)\n \n   if (JUMP_P (insn))\n     {\n+      rtx_jump_table_data *table;\n+\n       if (find_reg_note (insn, REG_NON_LOCAL_GOTO, NULL_RTX))\n \treturn;\n \n-      if (tablejump_p (insn, NULL, &tmp))\n+      if (tablejump_p (insn, NULL, &table))\n \t{\n \t  rtvec vec;\n \n-\t  tmp = PATTERN (tmp);\n+\t  tmp = PATTERN (table);\n \t  vec = XVEC (tmp, GET_CODE (tmp) == ADDR_DIFF_VEC);\n \n \t  n = GET_NUM_ELEM (vec);"}, {"sha": "6a8b9d5b7b4be41087e1c10ac88eb30e582113e2", "filename": "gcc/jump.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8942ee0fbfe5361a71c51401933efd1938725dec/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8942ee0fbfe5361a71c51401933efd1938725dec/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=8942ee0fbfe5361a71c51401933efd1938725dec", "patch": "@@ -1295,7 +1295,8 @@ delete_related_insns (rtx insn)\n \n   if (jump_to_label_p (insn))\n     {\n-      rtx lab = JUMP_LABEL (insn), lab_next;\n+      rtx lab = JUMP_LABEL (insn);\n+      rtx_jump_table_data *lab_next;\n \n       if (LABEL_NUSES (lab) == 0)\n \t/* This can delete NEXT or PREV,"}, {"sha": "79c0f691c7c9099373be86a63f0b73f736db9b33", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8942ee0fbfe5361a71c51401933efd1938725dec/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8942ee0fbfe5361a71c51401933efd1938725dec/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=8942ee0fbfe5361a71c51401933efd1938725dec", "patch": "@@ -2599,7 +2599,7 @@ extern int inequality_comparisons_p (const_rtx);\n extern rtx replace_rtx (rtx, rtx, rtx);\n extern int replace_label (rtx *, void *);\n extern int rtx_referenced_p (rtx, rtx);\n-extern bool tablejump_p (const_rtx, rtx *, rtx *);\n+extern bool tablejump_p (const_rtx, rtx *, rtx_jump_table_data **);\n extern int computed_jump_p (const_rtx);\n extern bool tls_referenced_p (rtx);\n "}, {"sha": "bc16437a257c91d60a5c8c52cb91d306f6841371", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8942ee0fbfe5361a71c51401933efd1938725dec/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8942ee0fbfe5361a71c51401933efd1938725dec/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=8942ee0fbfe5361a71c51401933efd1938725dec", "patch": "@@ -2778,7 +2778,7 @@ rtx_referenced_p (rtx x, rtx body)\n    *LABELP and the jump table to *TABLEP.  LABELP and TABLEP may be NULL.  */\n \n bool\n-tablejump_p (const_rtx insn, rtx *labelp, rtx *tablep)\n+tablejump_p (const_rtx insn, rtx *labelp, rtx_jump_table_data **tablep)\n {\n   rtx label, table;\n \n@@ -2793,7 +2793,7 @@ tablejump_p (const_rtx insn, rtx *labelp, rtx *tablep)\n       if (labelp)\n \t*labelp = label;\n       if (tablep)\n-\t*tablep = table;\n+\t*tablep = as_a <rtx_jump_table_data *> (table);\n       return true;\n     }\n   return false;\n@@ -3794,14 +3794,15 @@ bool\n label_is_jump_target_p (const_rtx label, const_rtx jump_insn)\n {\n   rtx tmp = JUMP_LABEL (jump_insn);\n+  rtx_jump_table_data *table;\n \n   if (label == tmp)\n     return true;\n \n-  if (tablejump_p (jump_insn, NULL, &tmp))\n+  if (tablejump_p (jump_insn, NULL, &table))\n     {\n-      rtvec vec = XVEC (PATTERN (tmp),\n-\t\t\tGET_CODE (PATTERN (tmp)) == ADDR_DIFF_VEC);\n+      rtvec vec = XVEC (PATTERN (table),\n+\t\t\tGET_CODE (PATTERN (table)) == ADDR_DIFF_VEC);\n       int i, veclen = GET_NUM_ELEM (vec);\n \n       for (i = 0; i < veclen; ++i)"}]}