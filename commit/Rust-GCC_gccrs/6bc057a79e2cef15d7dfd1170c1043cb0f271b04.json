{"sha": "6bc057a79e2cef15d7dfd1170c1043cb0f271b04", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmJjMDU3YTc5ZTJjZWYxNWQ3ZGZkMTE3MGMxMDQzY2IwZjI3MWIwNA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-11-06T09:44:51Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-11-06T09:44:51Z"}, "message": "[multiple changes]\n\n2012-11-06  Thomas Quinot  <quinot@adacore.com>\n\n\t* s-oscons-tmplt.c: Interfaces.C now needs to be WITH'd even\n\ton platforms that do not support sockets (for the benefit of\n\tsubtype IOCTL_Req_T).\n\n2012-11-06  Ed Schonberg  <schonberg@adacore.com>\n\n\t* par-ch4.adb (P_Primary): if-expressions, case-expressions,\n\tand quantified expressions are legal if surrounded by parentheses\n\tfrom an enclosing context, such as a call or an instantiation.\n\n2012-11-06  Yannick Moy  <moy@adacore.com>\n\n\t* impunit.adb (Get_Kind_Of_Unit): Return appropriate kind for\n\tpredefined implementation files, instead of returning\n\tNot_Predefined_Unit on all .adb files.\n\n2012-11-06  Tristan Gingold  <gingold@adacore.com>\n\n\t* exp_ch9.adb (Build_Activation_Chain_Entity): Return immediately if\n\tpartition elaboration policy is sequential.\n\t(Build_Task_Activation_Call): Likewise. Use\n\tActivate_Restricted_Tasks on restricted profile.\n\t(Make_Task_Create_Call): Do not use the _Chain\n\tparameter if elaboration policy is sequential. Call\n\tCreate_Restricted_Task_Sequential in that case.\n\t* exp_ch3.adb (Build_Initialization_Call): Change condition to\n\tsupport concurrent elaboration policy.\n\t(Build_Record_Init_Proc): Likewise.\n\t(Init_Formals): Likewise.\n\t* bindgen.adb (Gen_Adainit): Declare Partition_Elaboration_Policy\n\tand set it in generated code if the elaboration policy is\n\tsequential. The procedure called to activate all tasks is now\n\tnamed __gnat_activate_all_tasks.\n\t* rtsfind.adb (RE_Activate_Restricted_Task,\n\tRE_Create_Restricted_Task_Sequential): New RE_Id literals.\n\t* s-tarest.adb (Create_Restricted_Task): Added to create a task without\n\tadding it on an activation chain.\n\t(Activate_Tasks): Has now a Chain parameter.\n\t(Activate_All_Tasks_Sequential): Added. Called by the binder to\n\tactivate all tasks.\n\t(Activate_Restricted_Tasks): Added. Called during elaboration to\n\tactivate tasks of the units.\n\t* s-tarest.ads: Remove pragma Partition_Elaboration_Policy.\n\t(Partition_Elaboration_Policy): New variable (set by the binder).\n\t(Create_Restricted_Task): Revert removal of the chain parameter.\n\t(Create_Restricted_Task_Sequential): New procedure.\n\t(Activate_Restricted_Tasks): Revert removal.\n\t(Activate_All_Tasks_Sequential): New procedure.\n\nFrom-SVN: r193214", "tree": {"sha": "a6504859fca4e60b28f22d72a2d374e0cfd7e0a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a6504859fca4e60b28f22d72a2d374e0cfd7e0a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6bc057a79e2cef15d7dfd1170c1043cb0f271b04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bc057a79e2cef15d7dfd1170c1043cb0f271b04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bc057a79e2cef15d7dfd1170c1043cb0f271b04", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bc057a79e2cef15d7dfd1170c1043cb0f271b04/comments", "author": null, "committer": null, "parents": [{"sha": "3c55062f3030f6dcd365f89ba9ecfea2131889b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c55062f3030f6dcd365f89ba9ecfea2131889b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c55062f3030f6dcd365f89ba9ecfea2131889b4"}], "stats": {"total": 429, "additions": 349, "deletions": 80}, "files": [{"sha": "3d1ba27bc49451801d11fb5d356521261bbcf951", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc057a79e2cef15d7dfd1170c1043cb0f271b04/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc057a79e2cef15d7dfd1170c1043cb0f271b04/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=6bc057a79e2cef15d7dfd1170c1043cb0f271b04", "patch": "@@ -1,3 +1,54 @@\n+2012-11-06  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* s-oscons-tmplt.c: Interfaces.C now needs to be WITH'd even\n+\ton platforms that do not support sockets (for the benefit of\n+\tsubtype IOCTL_Req_T).\n+\n+2012-11-06  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* par-ch4.adb (P_Primary): if-expressions, case-expressions,\n+\tand quantified expressions are legal if surrounded by parentheses\n+\tfrom an enclosing context, such as a call or an instantiation.\n+\n+2012-11-06  Yannick Moy  <moy@adacore.com>\n+\n+\t* impunit.adb (Get_Kind_Of_Unit): Return appropriate kind for\n+\tpredefined implementation files, instead of returning\n+\tNot_Predefined_Unit on all .adb files.\n+\n+2012-11-06  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* exp_ch9.adb (Build_Activation_Chain_Entity): Return immediately if\n+\tpartition elaboration policy is sequential.\n+\t(Build_Task_Activation_Call): Likewise. Use\n+\tActivate_Restricted_Tasks on restricted profile.\n+\t(Make_Task_Create_Call): Do not use the _Chain\n+\tparameter if elaboration policy is sequential. Call\n+\tCreate_Restricted_Task_Sequential in that case.\n+\t* exp_ch3.adb (Build_Initialization_Call): Change condition to\n+\tsupport concurrent elaboration policy.\n+\t(Build_Record_Init_Proc): Likewise.\n+\t(Init_Formals): Likewise.\n+\t* bindgen.adb (Gen_Adainit): Declare Partition_Elaboration_Policy\n+\tand set it in generated code if the elaboration policy is\n+\tsequential. The procedure called to activate all tasks is now\n+\tnamed __gnat_activate_all_tasks.\n+\t* rtsfind.adb (RE_Activate_Restricted_Task,\n+\tRE_Create_Restricted_Task_Sequential): New RE_Id literals.\n+\t* s-tarest.adb (Create_Restricted_Task): Added to create a task without\n+\tadding it on an activation chain.\n+\t(Activate_Tasks): Has now a Chain parameter.\n+\t(Activate_All_Tasks_Sequential): Added. Called by the binder to\n+\tactivate all tasks.\n+\t(Activate_Restricted_Tasks): Added. Called during elaboration to\n+\tactivate tasks of the units.\n+\t* s-tarest.ads: Remove pragma Partition_Elaboration_Policy.\n+\t(Partition_Elaboration_Policy): New variable (set by the binder).\n+\t(Create_Restricted_Task): Revert removal of the chain parameter.\n+\t(Create_Restricted_Task_Sequential): New procedure.\n+\t(Activate_Restricted_Tasks): Revert removal.\n+\t(Activate_All_Tasks_Sequential): New procedure.\n+\n 2012-11-06  Bernard Banner  <banner@adacore.com>\n \n \t* adaint.c Add file macro definitions missing on Android."}, {"sha": "f4260a3ded11d710c947ffa319e649c137e2f6ab", "filename": "gcc/ada/bindgen.adb", "status": "modified", "additions": 43, "deletions": 10, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc057a79e2cef15d7dfd1170c1043cb0f271b04/gcc%2Fada%2Fbindgen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc057a79e2cef15d7dfd1170c1043cb0f271b04/gcc%2Fada%2Fbindgen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindgen.adb?ref=6bc057a79e2cef15d7dfd1170c1043cb0f271b04", "patch": "@@ -488,10 +488,16 @@ package body Bindgen is\n             WBI (\"\");\n          end if;\n \n-         if System_Tasking_Restricted_Stages_Used then\n-            WBI (\"      procedure Activate_Tasks;\");\n-            WBI (\"      pragma Import (C, Activate_Tasks,\" &\n-                 \" \"\"__gnat_activate_tasks\"\");\");\n+         if System_Tasking_Restricted_Stages_Used\n+           and then Partition_Elaboration_Policy_Specified = 'S'\n+         then\n+            WBI (\"      Partition_Elaboration_Policy : Character;\");\n+            WBI (\"      pragma Import (C, Partition_Elaboration_Policy,\" &\n+                  \" \"\"__gnat_partition_elaboration_policy\"\");\");\n+            WBI (\"\");\n+            WBI (\"      procedure Activate_All_Tasks_Sequential;\");\n+            WBI (\"      pragma Import (C, Activate_All_Tasks_Sequential,\" &\n+                 \" \"\"__gnat_activate_all_tasks\"\");\");\n          end if;\n \n          WBI (\"   begin\");\n@@ -510,8 +516,18 @@ package body Bindgen is\n             Write_Statement_Buffer;\n          end if;\n \n+         if System_Tasking_Restricted_Stages_Used\n+           and then Partition_Elaboration_Policy_Specified = 'S'\n+         then\n+            Set_String (\"      Partition_Elaboration_Policy := '\");\n+            Set_Char   (Partition_Elaboration_Policy_Specified);\n+            Set_String (\"';\");\n+            Write_Statement_Buffer;\n+         end if;\n+\n          if Main_Priority = No_Main_Priority\n            and then Main_CPU = No_Main_CPU\n+           and then not System_Tasking_Restricted_Stages_Used\n          then\n             WBI (\"      null;\");\n          end if;\n@@ -587,10 +603,16 @@ package body Bindgen is\n \n          --  Import task activation procedure for ravenscar\n \n-         if System_Tasking_Restricted_Stages_Used then\n-            WBI (\"      procedure Activate_Tasks;\");\n-            WBI (\"      pragma Import (C, Activate_Tasks,\" &\n-                 \" \"\"__gnat_activate_tasks\"\");\");\n+         if System_Tasking_Restricted_Stages_Used\n+           and then Partition_Elaboration_Policy_Specified = 'S'\n+         then\n+            WBI (\"      Partition_Elaboration_Policy : Character;\");\n+            WBI (\"      pragma Import (C, Partition_Elaboration_Policy,\" &\n+                  \" \"\"__gnat_partition_elaboration_policy\"\");\");\n+            WBI (\"\");\n+            WBI (\"      procedure Activate_All_Tasks_Sequential;\");\n+            WBI (\"      pragma Import (C, Activate_All_Tasks_Sequential,\" &\n+                 \" \"\"__gnat_activate_all_tasks\"\");\");\n          end if;\n \n          --  The import of the soft link which performs library-level object\n@@ -727,6 +749,15 @@ package body Bindgen is\n          Set_String (\"';\");\n          Write_Statement_Buffer;\n \n+         if System_Tasking_Restricted_Stages_Used\n+           and then Partition_Elaboration_Policy_Specified = 'S'\n+         then\n+            Set_String (\"      Partition_Elaboration_Policy := '\");\n+            Set_Char   (Partition_Elaboration_Policy_Specified);\n+            Set_String (\"';\");\n+            Write_Statement_Buffer;\n+         end if;\n+\n          Gen_Restrictions;\n \n          WBI (\"      Priority_Specific_Dispatching :=\");\n@@ -913,8 +944,10 @@ package body Bindgen is\n          WBI (\"      Freeze_Dispatching_Domains;\");\n       end if;\n \n-      if System_Tasking_Restricted_Stages_Used then\n-         WBI (\"      Activate_Tasks;\");\n+      if System_Tasking_Restricted_Stages_Used\n+        and then Partition_Elaboration_Policy_Specified = 'S'\n+      then\n+         WBI (\"      Activate_All_Tasks_Sequential;\");\n       end if;\n \n       --  Case of main program is CIL function or procedure"}, {"sha": "2434d5b7d95e06682f22f943df803ba4b5fdc09c", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc057a79e2cef15d7dfd1170c1043cb0f271b04/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc057a79e2cef15d7dfd1170c1043cb0f271b04/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=6bc057a79e2cef15d7dfd1170c1043cb0f271b04", "patch": "@@ -1537,10 +1537,10 @@ package body Exp_Ch3 is\n             Append_To (Args, Make_Identifier (Loc, Name_uMaster));\n          end if;\n \n-         --  Add _Chain (not done in the restricted profile because not used,\n-         --  see comment for Create_Restricted_Task in s-tarest.ads).\n+         --  Add _Chain (not done for sequential elaboration policy, see\n+         --  comment for Create_Restricted_Task_Sequential in s-tarest.ads).\n \n-         if not Restricted_Profile then\n+         if Partition_Elaboration_Policy /= 'S' then\n             Append_To (Args, Make_Identifier (Loc, Name_uChain));\n          end if;\n \n@@ -2004,11 +2004,10 @@ package body Exp_Ch3 is\n                Append_To (Args, Make_Identifier (Loc, Name_uMaster));\n             end if;\n \n-            if not Restricted_Profile then\n-\n-               --  No _Chain for the restricted profile because not used,\n-               --  see comment of Create_Restricted_Task in s-tarest.ads.\n+            --  Add _Chain (not done for sequential elaboration policy, see\n+            --  comment for Create_Restricted_Task_Sequential in s-tarest.ads).\n \n+            if Partition_Elaboration_Policy /= 'S' then\n                Append_To (Args, Make_Identifier (Loc, Name_uChain));\n             end if;\n \n@@ -7793,11 +7792,10 @@ package body Exp_Ch3 is\n              Parameter_Type      =>\n                New_Reference_To (RTE (RE_Master_Id), Loc)));\n \n-         if not Restricted_Profile then\n-\n-            --  No _Chain for the restricted profile because not used, see\n-            --  comment for Create_Restricted_Task in s-tarest.ads.\n+         --  Add _Chain (not done for sequential elaboration policy, see\n+         --  comment for Create_Restricted_Task_Sequential in s-tarest.ads).\n \n+         if Partition_Elaboration_Policy /= 'S' then\n             Append_To (Formals,\n               Make_Parameter_Specification (Loc,\n                 Defining_Identifier =>"}, {"sha": "f148e814cbb8ac20b8a1fd67b46dc79291bfcaf0", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 28, "deletions": 15, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc057a79e2cef15d7dfd1170c1043cb0f271b04/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc057a79e2cef15d7dfd1170c1043cb0f271b04/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=6bc057a79e2cef15d7dfd1170c1043cb0f271b04", "patch": "@@ -911,10 +911,10 @@ package body Exp_Ch9 is\n    --  Start of processing for Build_Activation_Chain_Entity\n \n    begin\n-      --  Activation chain is never used in restricted profile, see comment\n-      --  for Create_Restricted_Task in s-tarest.ads.\n+      --  Activation chain is never used for sequential elaboration policy, see\n+      --  comment for Create_Restricted_Task_Sequential in s-tarest.ads).\n \n-      if Restricted_Profile then\n+      if Partition_Elaboration_Policy = 'S' then\n          return;\n       end if;\n \n@@ -4900,10 +4900,10 @@ package body Exp_Ch9 is\n       P     : Node_Id;\n \n    begin\n-      --  On restricted profile, all the tasks will be activated at the end\n-      --  of the elaboration (Sequential elaboration policy).\n+      --  For sequential elaboration policy, all the tasks will be activated at\n+      --  the end of the elaboration.\n \n-      if Restricted_Profile then\n+      if Partition_Elaboration_Policy = 'S' then\n          return;\n       end if;\n \n@@ -4925,7 +4925,11 @@ package body Exp_Ch9 is\n       end if;\n \n       if Present (Chain) then\n-         Name := New_Reference_To (RTE (RE_Activate_Tasks), Loc);\n+         if Restricted_Profile then\n+            Name := New_Reference_To (RTE (RE_Activate_Restricted_Tasks), Loc);\n+         else\n+            Name := New_Reference_To (RTE (RE_Activate_Tasks), Loc);\n+         end if;\n \n          Call :=\n            Make_Procedure_Call_Statement (Loc,\n@@ -13980,10 +13984,10 @@ package body Exp_Ch9 is\n           Prefix => Make_Identifier (Loc, New_External_Name (Tnam, 'E')),\n           Attribute_Name => Name_Unchecked_Access));\n \n-      --  Chain parameter. This is a reference to the Chain parameter of the\n-      --  initialization procedure. There is no chain in restricted profile.\n+      --  Add Chain parameter (not done for sequential elaboration policy, see\n+      --  comment for Create_Restricted_Task_Sequential in s-tarest.ads).\n \n-      if not Restricted_Profile then\n+      if Partition_Elaboration_Policy /= 'S' then\n          Append_To (Args, Make_Identifier (Loc, Name_uChain));\n       end if;\n \n@@ -14015,11 +14019,20 @@ package body Exp_Ch9 is\n           Prefix        => Make_Identifier (Loc, Name_uInit),\n           Selector_Name => Make_Identifier (Loc, Name_uTask_Id)));\n \n-      if Restricted_Profile then\n-         Name := New_Reference_To (RTE (RE_Create_Restricted_Task), Loc);\n-      else\n-         Name := New_Reference_To (RTE (RE_Create_Task), Loc);\n-      end if;\n+      declare\n+         Create_RE : RE_Id;\n+      begin\n+         if Restricted_Profile then\n+            if Partition_Elaboration_Policy = 'S' then\n+               Create_RE := RE_Create_Restricted_Task_Sequential;\n+            else\n+               Create_RE := RE_Create_Restricted_Task;\n+            end if;\n+         else\n+            Create_RE := RE_Create_Task;\n+         end if;\n+         Name := New_Reference_To (RTE (Create_RE), Loc);\n+      end;\n \n       return\n         Make_Procedure_Call_Statement (Loc,"}, {"sha": "ad4902a3ab6882527da3668dc926403e981dce70", "filename": "gcc/ada/impunit.adb", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc057a79e2cef15d7dfd1170c1043cb0f271b04/gcc%2Fada%2Fimpunit.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc057a79e2cef15d7dfd1170c1043cb0f271b04/gcc%2Fada%2Fimpunit.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fimpunit.adb?ref=6bc057a79e2cef15d7dfd1170c1043cb0f271b04", "patch": "@@ -663,10 +663,16 @@ package body Impunit is\n          return Not_Predefined_Unit;\n       end if;\n \n-      --  Not predefined if file name does not end in .ads. This can\n-      --  happen when non-standard file names are being used.\n-\n-      if Name_Buffer (Name_Len - 3 .. Name_Len) /= \".ads\" then\n+      --  Not predefined if file name does not end in .ads or .adb. This can\n+      --  happen when non-standard file names are being used. Calling this\n+      --  function on a .adb file is used in GNATprove to detect when a\n+      --  construct comes from an instance of a generic defined in a predefined\n+      --  unit.\n+\n+      if Name_Buffer (Name_Len - 3 .. Name_Len) /= \".ads\"\n+           and then\n+         Name_Buffer (Name_Len - 3 .. Name_Len) /= \".adb\"\n+      then\n          return Not_Predefined_Unit;\n       end if;\n "}, {"sha": "c3a7a4a3192e2e5eb193db1730157d29f28a33da", "filename": "gcc/ada/par-ch4.adb", "status": "modified", "additions": 30, "deletions": 8, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc057a79e2cef15d7dfd1170c1043cb0f271b04/gcc%2Fada%2Fpar-ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc057a79e2cef15d7dfd1170c1043cb0f271b04/gcc%2Fada%2Fpar-ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch4.adb?ref=6bc057a79e2cef15d7dfd1170c1043cb0f271b04", "patch": "@@ -2359,6 +2359,8 @@ package body Ch4 is\n    --  Error recovery: can raise Error_Resync\n \n    function P_Primary return Node_Id is\n+      Lparen     : constant Boolean := Prev_Token = Tok_Left_Paren;\n+\n       Scan_State : Saved_Scan_State;\n       Node1      : Node_Id;\n \n@@ -2475,11 +2477,18 @@ package body Ch4 is\n                   return Error;\n \n                --  If this looks like an if expression, then treat it that way\n-               --  with an error message.\n+               --  with an error message if not explicitly surrounded by\n+               --  parentheses.\n \n                elsif Ada_Version >= Ada_2012 then\n-                  Error_Msg_SC (\"if expression must be parenthesized\");\n-                  return P_If_Expression;\n+                  Node1 := P_If_Expression;\n+\n+                  if not (Lparen and then Token = Tok_Right_Paren) then\n+                     Error_Msg\n+                       (\"if expression must be parenthesized\", Sloc (Node1));\n+                  end if;\n+\n+                  return Node1;\n \n                --  Otherwise treat as misused identifier\n \n@@ -2507,11 +2516,17 @@ package body Ch4 is\n                   return Error;\n \n                --  If this looks like a case expression, then treat it that way\n-               --  with an error message.\n+               --  with an error message if not within parentheses.\n \n                elsif Ada_Version >= Ada_2012 then\n-                  Error_Msg_SC (\"case expression must be parenthesized\");\n-                  return P_Case_Expression;\n+                  Node1 := P_Case_Expression;\n+\n+                  if not (Lparen and then Token = Tok_Right_Paren) then\n+                     Error_Msg\n+                       (\"case expression must be parenthesized\", Sloc (Node1));\n+                  end if;\n+\n+                  return Node1;\n \n                --  Otherwise treat as misused identifier\n \n@@ -2528,8 +2543,15 @@ package body Ch4 is\n                   return Error;\n \n                elsif Ada_Version >= Ada_2012 then\n-                  Error_Msg_SC (\"quantified expression must be parenthesized\");\n-                  return P_Quantified_Expression;\n+                  Node1 := P_Quantified_Expression;\n+\n+                  if not (Lparen and then Token = Tok_Right_Paren) then\n+                     Error_Msg\n+                      (\"quantified expression must be parenthesized\",\n+                        Sloc (Node1));\n+                  end if;\n+\n+                  return Node1;\n \n                else\n "}, {"sha": "2bfbaa82a3658e966afc7cccf01b8a5928e442b5", "filename": "gcc/ada/rtsfind.ads", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc057a79e2cef15d7dfd1170c1043cb0f271b04/gcc%2Fada%2Frtsfind.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc057a79e2cef15d7dfd1170c1043cb0f271b04/gcc%2Fada%2Frtsfind.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frtsfind.ads?ref=6bc057a79e2cef15d7dfd1170c1043cb0f271b04", "patch": "@@ -1762,10 +1762,12 @@ package Rtsfind is\n      RE_Timed_Task_Entry_Call,           -- System.Tasking.Rendezvous\n      RE_Timed_Selective_Wait,            -- System.Tasking.Rendezvous\n \n-     RE_Complete_Restricted_Activation,  -- System.Tasking.Restricted.Stages\n-     RE_Create_Restricted_Task,          -- System.Tasking.Restricted.Stages\n-     RE_Complete_Restricted_Task,        -- System.Tasking.Restricted.Stages\n-     RE_Restricted_Terminated,           -- System.Tasking.Restricted.Stages\n+     RE_Activate_Restricted_Tasks,         -- System.Tasking.Restricted.Stages\n+     RE_Complete_Restricted_Activation,    -- System.Tasking.Restricted.Stages\n+     RE_Create_Restricted_Task,            -- System.Tasking.Restricted.Stages\n+     RE_Create_Restricted_Task_Sequential, -- System.Tasking.Restricted.Stages\n+     RE_Complete_Restricted_Task,          -- System.Tasking.Restricted.Stages\n+     RE_Restricted_Terminated,             -- System.Tasking.Restricted.Stages\n \n      RE_Abort_Tasks,                     -- System.Tasking.Stages\n      RE_Activate_Tasks,                  -- System.Tasking.Stages\n@@ -3054,10 +3056,12 @@ package Rtsfind is\n      RE_Timed_Task_Entry_Call            => System_Tasking_Rendezvous,\n      RE_Timed_Selective_Wait             => System_Tasking_Rendezvous,\n \n-     RE_Complete_Restricted_Activation   => System_Tasking_Restricted_Stages,\n-     RE_Create_Restricted_Task           => System_Tasking_Restricted_Stages,\n-     RE_Complete_Restricted_Task         => System_Tasking_Restricted_Stages,\n-     RE_Restricted_Terminated            => System_Tasking_Restricted_Stages,\n+     RE_Activate_Restricted_Tasks         => System_Tasking_Restricted_Stages,\n+     RE_Complete_Restricted_Activation    => System_Tasking_Restricted_Stages,\n+     RE_Create_Restricted_Task            => System_Tasking_Restricted_Stages,\n+     RE_Create_Restricted_Task_Sequential => System_Tasking_Restricted_Stages,\n+     RE_Complete_Restricted_Task          => System_Tasking_Restricted_Stages,\n+     RE_Restricted_Terminated             => System_Tasking_Restricted_Stages,\n \n      RE_Abort_Tasks                      => System_Tasking_Stages,\n      RE_Activate_Tasks                   => System_Tasking_Stages,"}, {"sha": "096488671e02e415adfcfdbccc21dce1d4bed5d3", "filename": "gcc/ada/s-oscons-tmplt.c", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc057a79e2cef15d7dfd1170c1043cb0f271b04/gcc%2Fada%2Fs-oscons-tmplt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc057a79e2cef15d7dfd1170c1043cb0f271b04/gcc%2Fada%2Fs-oscons-tmplt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-oscons-tmplt.c?ref=6bc057a79e2cef15d7dfd1170c1043cb0f271b04", "patch": "@@ -252,14 +252,7 @@ main (void) {\n  **/\n TXT(\"--  This is the version for \" TARGET)\n TXT(\"\")\n-\n-#ifdef HAVE_SOCKETS\n-/**\n- **  The type definitions for struct hostent components uses Interfaces.C\n- **/\n-\n TXT(\"with Interfaces.C;\")\n-#endif\n \n /*\n package System.OS_Constants is"}, {"sha": "ec94313f1868a762d5d9a63b9abe81d6f91cf7b6", "filename": "gcc/ada/s-tarest.adb", "status": "modified", "additions": 112, "deletions": 7, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc057a79e2cef15d7dfd1170c1043cb0f271b04/gcc%2Fada%2Fs-tarest.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc057a79e2cef15d7dfd1170c1043cb0f271b04/gcc%2Fada%2Fs-tarest.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tarest.adb?ref=6bc057a79e2cef15d7dfd1170c1043cb0f271b04", "patch": "@@ -111,6 +111,24 @@ package body System.Tasking.Restricted.Stages is\n    --  Terminate the calling task.\n    --  This should only be called by the Task_Wrapper procedure.\n \n+   procedure Create_Restricted_Task\n+     (Priority      : Integer;\n+      Stack_Address : System.Address;\n+      Size          : System.Parameters.Size_Type;\n+      Task_Info     : System.Task_Info.Task_Info_Type;\n+      CPU           : Integer;\n+      State         : Task_Procedure_Access;\n+      Discriminants : System.Address;\n+      Elaborated    : Access_Boolean;\n+      Task_Image    : String;\n+      Created_Task  : Task_Id);\n+   --  Code shared between Create_Restricted_Task_Concurrent and\n+   --  Create_Restricted_Task_Sequential. See comment of the former in the\n+   --  specification of this package.\n+\n+   procedure Activate_Tasks (Chain : Task_Id);\n+   --  Activate the list of tasks started by Chain\n+\n    procedure Init_RTS;\n    --  This procedure performs the initialization of the GNARL.\n    --  It consists of initializing the environment task, global locks, and\n@@ -301,6 +319,40 @@ package body System.Tasking.Restricted.Stages is\n    -- Restricted GNARLI --\n    -----------------------\n \n+   -----------------------------------\n+   -- Activate_All_Tasks_Sequential --\n+   -----------------------------------\n+\n+   procedure Activate_All_Tasks_Sequential is\n+   begin\n+      pragma Assert (Partition_Elaboration_Policy = 'S');\n+\n+      Activate_Tasks (Tasks_Activation_Chain);\n+      Tasks_Activation_Chain := Null_Task;\n+   end Activate_All_Tasks_Sequential;\n+\n+   -------------------------------\n+   -- Activate_Restricted_Tasks --\n+   -------------------------------\n+\n+   procedure Activate_Restricted_Tasks\n+     (Chain_Access : Activation_Chain_Access) is\n+   begin\n+      if Partition_Elaboration_Policy = 'S' then\n+\n+         --  In sequential elaboration policy, the chain must be empty. This\n+         --  procedure can be called if the unit has been compiled without\n+         --  partition elaboration policy, but the partition has a sequential\n+         --  elaboration policy.\n+\n+         pragma Assert (Chain_Access.T_ID = Null_Task);\n+         null;\n+      else\n+         Activate_Tasks (Chain_Access.T_ID);\n+         Chain_Access.T_ID := Null_Task;\n+      end if;\n+   end Activate_Restricted_Tasks;\n+\n    --------------------\n    -- Activate_Tasks --\n    --------------------\n@@ -311,7 +363,7 @@ package body System.Tasking.Restricted.Stages is\n    --  created before the activated task. That satisfies our\n    --  in-order-of-creation ATCB locking policy.\n \n-   procedure Activate_Tasks is\n+   procedure Activate_Tasks (Chain : Task_Id) is\n       Self_ID       : constant Task_Id := STPO.Self;\n       C             : Task_Id;\n       Activate_Prio : System.Any_Priority;\n@@ -333,7 +385,7 @@ package body System.Tasking.Restricted.Stages is\n       --  Activate all the tasks in the chain. Creation of the thread of\n       --  control was deferred until activation. So create it now.\n \n-      C := Tasks_Activation_Chain;\n+      C := Chain;\n       while C /= null loop\n          if C.Common.State /= Terminated then\n             pragma Assert (C.Common.State = Unactivated);\n@@ -381,10 +433,6 @@ package body System.Tasking.Restricted.Stages is\n       if Single_Lock then\n          Unlock_RTS;\n       end if;\n-\n-      --  Remove the tasks from the chain\n-\n-      Tasks_Activation_Chain := null;\n    end Activate_Tasks;\n \n    ------------------------------------\n@@ -557,9 +605,66 @@ package body System.Tasking.Restricted.Stages is\n       --  may be used by the operation of Ada code within the task.\n \n       SSL.Create_TSD (Created_Task.Common.Compiler_Data);\n+   end Create_Restricted_Task;\n+\n+   procedure Create_Restricted_Task\n+     (Priority      : Integer;\n+      Stack_Address : System.Address;\n+      Size          : System.Parameters.Size_Type;\n+      Task_Info     : System.Task_Info.Task_Info_Type;\n+      CPU           : Integer;\n+      State         : Task_Procedure_Access;\n+      Discriminants : System.Address;\n+      Elaborated    : Access_Boolean;\n+      Chain         : in out Activation_Chain;\n+      Task_Image    : String;\n+      Created_Task  : Task_Id) is\n+   begin\n+      Create_Restricted_Task (Priority, Stack_Address, Size, Task_Info,\n+                              CPU, State, Discriminants, Elaborated,\n+                              Task_Image, Created_Task);\n+\n+      --  Append this task to the activation chain\n+\n+      if Partition_Elaboration_Policy = 'S' then\n+\n+         --  In fact the elaboration policy is sequential, add this task to\n+         --  the global activation chain to defer its activation.\n+\n+         Created_Task.Common.Activation_Link := Tasks_Activation_Chain;\n+         Tasks_Activation_Chain := Created_Task;\n+\n+      else\n+         Created_Task.Common.Activation_Link := Chain.T_ID;\n+         Chain.T_ID := Created_Task;\n+      end if;\n+   end Create_Restricted_Task;\n+\n+   ---------------------------------------\n+   -- Create_Restricted_Task_Sequential --\n+   ---------------------------------------\n+\n+   procedure Create_Restricted_Task_Sequential\n+     (Priority      : Integer;\n+      Stack_Address : System.Address;\n+      Size          : System.Parameters.Size_Type;\n+      Task_Info     : System.Task_Info.Task_Info_Type;\n+      CPU           : Integer;\n+      State         : Task_Procedure_Access;\n+      Discriminants : System.Address;\n+      Elaborated    : Access_Boolean;\n+      Task_Image    : String;\n+      Created_Task  : Task_Id) is\n+   begin\n+      Create_Restricted_Task (Priority, Stack_Address, Size, Task_Info,\n+                              CPU, State, Discriminants, Elaborated,\n+                              Task_Image, Created_Task);\n+\n+      --  Append this task to the activation chain\n+\n       Created_Task.Common.Activation_Link := Tasks_Activation_Chain;\n       Tasks_Activation_Chain := Created_Task;\n-   end Create_Restricted_Task;\n+   end Create_Restricted_Task_Sequential;\n \n    ---------------------------\n    -- Finalize_Global_Tasks --"}, {"sha": "6313be626ab8a9d545314dab4dc46168c82a79db", "filename": "gcc/ada/s-tarest.ads", "status": "modified", "additions": 54, "deletions": 10, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc057a79e2cef15d7dfd1170c1043cb0f271b04/gcc%2Fada%2Fs-tarest.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc057a79e2cef15d7dfd1170c1043cb0f271b04/gcc%2Fada%2Fs-tarest.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tarest.ads?ref=6bc057a79e2cef15d7dfd1170c1043cb0f271b04", "patch": "@@ -43,10 +43,6 @@\n --  The restricted GNARLI is also composed of System.Protected_Objects and\n --  System.Protected_Objects.Single_Entry\n \n-pragma Partition_Elaboration_Policy (Sequential);\n---  This package only implements the sequential elaboration policy. This pragma\n---  will enforce it (and detect conflicts with user specified policy).\n-\n with System.Task_Info;\n with System.Parameters;\n \n@@ -124,6 +120,13 @@ package System.Tasking.Restricted.Stages is\n    --   t1S : constant String := \"t1\";\n    --   tIP (t1, 3, _chain, t1S, 1);\n \n+   Partition_Elaboration_Policy : Character := 'C';\n+   pragma Export (C, Partition_Elaboration_Policy,\n+                  \"__gnat_partition_elaboration_policy\");\n+   --  Partition elaboration policy. Value can be either 'C' for concurrent,\n+   --  which is the default or 'S' for sequential. This value can be modified\n+   --  by the binder generated code, before calling elaboration code.\n+\n    procedure Create_Restricted_Task\n      (Priority      : Integer;\n       Stack_Address : System.Address;\n@@ -133,10 +136,12 @@ package System.Tasking.Restricted.Stages is\n       State         : Task_Procedure_Access;\n       Discriminants : System.Address;\n       Elaborated    : Access_Boolean;\n+      Chain         : in out Activation_Chain;\n       Task_Image    : String;\n       Created_Task  : Task_Id);\n    --  Compiler interface only. Do not call from within the RTS.\n-   --  This must be called to create a new task.\n+   --  This must be called to create a new task, when the partition\n+   --  elaboration policy is not specified (or is concurrent).\n    --\n    --  Priority is the task's priority (assumed to be in the\n    --  System.Any_Priority'Range)\n@@ -165,19 +170,58 @@ package System.Tasking.Restricted.Stages is\n    --  Elaborated is a pointer to a Boolean that must be set to true on exit\n    --  if the task could be successfully elaborated.\n    --\n+   --  Chain is a linked list of task that needs to be created. On exit,\n+   --  Created_Task.Activation_Link will be Chain.T_ID, and Chain.T_ID will be\n+   --  Created_Task (the created task will be linked at the front of Chain).\n+   --\n    --  Task_Image is a string created by the compiler that the run time can\n    --  store to ease the debugging and the Ada.Task_Identification facility.\n    --\n    --  Created_Task is the resulting task.\n    --\n    --  This procedure can raise Storage_Error if the task creation fails\n+\n+   procedure Create_Restricted_Task_Sequential\n+     (Priority      : Integer;\n+      Stack_Address : System.Address;\n+      Size          : System.Parameters.Size_Type;\n+      Task_Info     : System.Task_Info.Task_Info_Type;\n+      CPU           : Integer;\n+      State         : Task_Procedure_Access;\n+      Discriminants : System.Address;\n+      Elaborated    : Access_Boolean;\n+      Task_Image    : String;\n+      Created_Task  : Task_Id);\n+   --  Compiler interface only. Do not call from within the RTS.\n+   --  This must be called to create a new task, when the sequential partition\n+   --  elaboration policy is used.\n+   --\n+   --  The parameters are the same as Create_Restricted_Task_Concurrent,\n+   --  except there is no Chain parameter (for the activation chain), as there\n+   --  is only one global activation chain, which is declared in the body of\n+   --  this package.\n+\n+   procedure Activate_Restricted_Tasks\n+     (Chain_Access : Activation_Chain_Access);\n+   --  Compiler interface only. Do not call from within the RTS.\n+   --  This must be called by the creator of a chain of one or more new tasks,\n+   --  to activate them. The chain is a linked list that up to this point is\n+   --  only known to the task that created them, though the individual tasks\n+   --  are already in the All_Tasks_List.\n+   --\n+   --  The compiler builds the chain in LIFO order (as a stack). Another\n+   --  version of this procedure had code to reverse the chain, so as to\n+   --  activate the tasks in the order of declaration. This might be nice, but\n+   --  it is not needed if priority-based scheduling is supported, since all\n+   --  the activated tasks synchronize on the activators lock before they start\n+   --  activating and so they should start activating in priority order.\n    --\n-   --  Contrary to Create_Task, there is no Chain parameter (for the activation\n-   --  chain), as there is only one global activation chain, which is declared\n-   --  in the body of this package.\n+   --  When the partition elaboration policy is sequential, this procedure\n+   --  does nothing, tasks will be activated at end of elaboration.\n \n-   procedure Activate_Tasks;\n-   pragma Export (C, Activate_Tasks, \"__gnat_activate_tasks\");\n+   procedure Activate_All_Tasks_Sequential;\n+   pragma Export (C, Activate_All_Tasks_Sequential,\n+                  \"__gnat_activate_all_tasks\");\n    --  Binder interface only. Do not call from within the RTS. This must be\n    --  called an the end of the elaboration to activate all tasks, in order\n    --  to implement the sequential elaboration policy."}]}