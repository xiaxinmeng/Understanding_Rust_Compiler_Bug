{"sha": "723553bdc16695ecc686a2ffdff6d15bd600b676", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzIzNTUzYmRjMTY2OTVlY2M2ODZhMmZmZGZmNmQxNWJkNjAwYjY3Ng==", "commit": {"author": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2011-01-21T22:42:17Z"}, "committer": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2011-01-21T22:42:17Z"}, "message": "PR 46267 strerror thread safety\n\nFrom-SVN: r169110", "tree": {"sha": "5760ecd6dfee3b5a3fbd1f7c8131d34047951c44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5760ecd6dfee3b5a3fbd1f7c8131d34047951c44"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/723553bdc16695ecc686a2ffdff6d15bd600b676", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/723553bdc16695ecc686a2ffdff6d15bd600b676", "html_url": "https://github.com/Rust-GCC/gccrs/commit/723553bdc16695ecc686a2ffdff6d15bd600b676", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/723553bdc16695ecc686a2ffdff6d15bd600b676/comments", "author": null, "committer": null, "parents": [{"sha": "62f9aedcd0a97001f290a1c13fa66efd207a23cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62f9aedcd0a97001f290a1c13fa66efd207a23cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62f9aedcd0a97001f290a1c13fa66efd207a23cc"}], "stats": {"total": 103, "additions": 74, "deletions": 29}, "files": [{"sha": "6aa03e640eac5b0806d56d2062848db56fe5451a", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/723553bdc16695ecc686a2ffdff6d15bd600b676/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/723553bdc16695ecc686a2ffdff6d15bd600b676/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=723553bdc16695ecc686a2ffdff6d15bd600b676", "patch": "@@ -1,3 +1,17 @@\n+2011-01-22  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\tPR libfortran/46267\n+\t* config.h.in: Regenerated.\n+\t* configure: Regenerated.\n+\t* configure.ac: Check presence of strerror_r.\n+\t* intrinsics/gerror.c (gerror): Use gf_strerror, modify logic.\n+\t* io/unix.c (get_oserror): Remove.\n+\t* libgfortran.h (gf_strerror): Add prototype.\n+\t(get_oserror): Remove prototype.\n+\t* runtime/error.c (gf_strerror): New function.\n+\t(os_error): Use gf_strerror instead of get_oserror.\n+\t(generate_errror): Likewise.\n+\n 2011-01-17  Janne Blomqvist  <jb@gcc.gnu.org>\n \n \tPR libfortran/47296"}, {"sha": "c5a2d8a1dc111a19f262786f061e4eda18d9e2fa", "filename": "libgfortran/config.h.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/723553bdc16695ecc686a2ffdff6d15bd600b676/libgfortran%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/723553bdc16695ecc686a2ffdff6d15bd600b676/libgfortran%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfig.h.in?ref=723553bdc16695ecc686a2ffdff6d15bd600b676", "patch": "@@ -708,6 +708,9 @@\n /* Define to 1 if you have the `strerror' function. */\n #undef HAVE_STRERROR\n \n+/* Define to 1 if you have the `strerror_r' function. */\n+#undef HAVE_STRERROR_R\n+\n /* Define to 1 if you have the <strings.h> header file. */\n #undef HAVE_STRINGS_H\n "}, {"sha": "ec63cdb1e9109f320946816daa16a1f38f2f5a18", "filename": "libgfortran/configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/723553bdc16695ecc686a2ffdff6d15bd600b676/libgfortran%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/723553bdc16695ecc686a2ffdff6d15bd600b676/libgfortran%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure?ref=723553bdc16695ecc686a2ffdff6d15bd600b676", "patch": "@@ -15636,7 +15636,7 @@ _ACEOF\n fi\n done\n \n-for ac_func in localtime_r gmtime_r\n+for ac_func in localtime_r gmtime_r strerror_r\n do :\n   as_ac_var=`$as_echo \"ac_cv_func_$ac_func\" | $as_tr_sh`\n ac_fn_c_check_func \"$LINENO\" \"$ac_func\" \"$as_ac_var\""}, {"sha": "4f137e43253f33b03a92b38f440d725a3c6221c3", "filename": "libgfortran/configure.ac", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/723553bdc16695ecc686a2ffdff6d15bd600b676/libgfortran%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/723553bdc16695ecc686a2ffdff6d15bd600b676/libgfortran%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure.ac?ref=723553bdc16695ecc686a2ffdff6d15bd600b676", "patch": "@@ -249,7 +249,7 @@ AC_CHECK_FUNCS(chdir strerror getlogin gethostname kill link symlink perror)\n AC_CHECK_FUNCS(sleep time ttyname signal alarm ctime clock access fork execl)\n AC_CHECK_FUNCS(wait setmode execvp pipe dup2 close fdopen strcasestr getrlimit)\n AC_CHECK_FUNCS(gettimeofday stat fstat lstat getpwuid vsnprintf dup getcwd)\n-AC_CHECK_FUNCS(localtime_r gmtime_r)\n+AC_CHECK_FUNCS(localtime_r gmtime_r strerror_r)\n \n # Check for glibc backtrace functions\n AC_CHECK_FUNCS(backtrace backtrace_symbols)"}, {"sha": "6feadc9b7c74f6446de0876cc50a29e3b7674bc8", "filename": "libgfortran/intrinsics/gerror.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/723553bdc16695ecc686a2ffdff6d15bd600b676/libgfortran%2Fintrinsics%2Fgerror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/723553bdc16695ecc686a2ffdff6d15bd600b676/libgfortran%2Fintrinsics%2Fgerror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fgerror.c?ref=723553bdc16695ecc686a2ffdff6d15bd600b676", "patch": "@@ -43,16 +43,17 @@ PREFIX(gerror) (char * msg, gfc_charlen_type msg_len)\n   int p_len;\n   char *p;\n \n-  memset (msg, ' ', msg_len); /* Blank the string.  */\n-\n-  p = strerror (errno);\n-  if (p == NULL)\n-    return;\n-\n+  p = gf_strerror (errno, msg, msg_len);\n   p_len = strlen (p);\n-  if (msg_len < p_len)\n-    memcpy (msg, p, msg_len);\n-  else\n-    memcpy (msg, p, p_len);\n+  /* The returned pointer p might or might not be the same as the msg\n+     argument.  */\n+  if (p != msg)\n+    {\n+      if (msg_len < p_len)\n+\tp_len = msg_len;\n+      memcpy (msg, p, p_len);\n+    }\n+  if (msg_len > p_len)\n+    memset (&msg[p_len], ' ', msg_len - p_len);\n }\n #endif"}, {"sha": "950b7a25b1faf23a416a913185104af9f5a2493a", "filename": "libgfortran/io/unix.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/723553bdc16695ecc686a2ffdff6d15bd600b676/libgfortran%2Fio%2Funix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/723553bdc16695ecc686a2ffdff6d15bd600b676/libgfortran%2Fio%2Funix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Funix.c?ref=723553bdc16695ecc686a2ffdff6d15bd600b676", "patch": "@@ -256,16 +256,6 @@ flush_if_preconnected (stream * s)\n }\n \n \n-/* get_oserror()-- Get the most recent operating system error.  For\n- * unix, this is errno. */\n-\n-const char *\n-get_oserror (void)\n-{\n-  return strerror (errno);\n-}\n-\n-\n /********************************************************************\n Raw I/O functions (read, write, seek, tell, truncate, close).\n "}, {"sha": "c9d3f371eabe9e08921dae8d66e71e0edde32839", "filename": "libgfortran/libgfortran.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/723553bdc16695ecc686a2ffdff6d15bd600b676/libgfortran%2Flibgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/723553bdc16695ecc686a2ffdff6d15bd600b676/libgfortran%2Flibgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Flibgfortran.h?ref=723553bdc16695ecc686a2ffdff6d15bd600b676", "patch": "@@ -1,5 +1,6 @@\n /* Common declarations for all of libgfortran.\n-   Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+   Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n+   2011\n    Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>, and\n    Andy Vaught <andy@xena.eas.asu.edu>\n@@ -738,9 +739,6 @@ extern void internal_error (st_parameter_common *, const char *)\n   __attribute__ ((noreturn));\n internal_proto(internal_error);\n \n-extern const char *get_oserror (void);\n-internal_proto(get_oserror);\n-\n extern const char *translate_error (int);\n internal_proto(translate_error);\n \n@@ -756,6 +754,9 @@ internal_proto(notify_std);\n extern notification notification_std(int);\n internal_proto(notification_std);\n \n+extern char *gf_strerror (int, char *, size_t);\n+internal_proto(gf_strerror);\n+\n /* fpu.c */\n \n extern void set_fpu (void);"}, {"sha": "06c144ae153e2916f50fc9529700573daa5e8206", "filename": "libgfortran/runtime/error.c", "status": "modified", "additions": 39, "deletions": 3, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/723553bdc16695ecc686a2ffdff6d15bd600b676/libgfortran%2Fruntime%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/723553bdc16695ecc686a2ffdff6d15bd600b676/libgfortran%2Fruntime%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Ferror.c?ref=723553bdc16695ecc686a2ffdff6d15bd600b676", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2002, 2003, 2005, 2006, 2007, 2009, 2010\n+/* Copyright (C) 2002, 2003, 2005, 2006, 2007, 2009, 2010, 2011\n    Free Software Foundation, Inc.\n    Contributed by Andy Vaught\n \n@@ -141,6 +141,36 @@ gfc_xtoa (GFC_UINTEGER_LARGEST n, char *buffer, size_t len)\n   return p;\n }\n \n+\n+/* Hopefully thread-safe wrapper for a strerror_r() style function.  */\n+\n+char *\n+gf_strerror (int errnum, \n+             char * buf __attribute__((unused)), \n+\t     size_t buflen __attribute__((unused)))\n+{\n+#ifdef HAVE_STRERROR_R\n+  /* TODO: How to prevent the compiler warning due to strerror_r of\n+     the untaken branch having the wrong return type?  */\n+  if (__builtin_classify_type (strerror_r (0, buf, 0)) == 5)\n+    {\n+      /* GNU strerror_r()  */\n+      return strerror_r (errnum, buf, buflen);\n+    }\n+  else\n+    {\n+      /* POSIX strerror_r ()  */\n+      strerror_r (errnum, buf, buflen);\n+      return buf;\n+    }\n+#else\n+  /* strerror () is not necessarily thread-safe, but should at least\n+     be available everywhere.  */\n+  return strerror (errnum);\n+#endif\n+}\n+\n+\n /* show_locus()-- Print a line number and filename describing where\n  * something went wrong */\n \n@@ -192,15 +222,19 @@ recursion_check (void)\n }\n \n \n+#define STRERR_MAXSZ 256\n+\n /* os_error()-- Operating system error.  We get a message from the\n  * operating system, show it and leave.  Some operating system errors\n  * are caught and processed by the library.  If not, we come here. */\n \n void\n os_error (const char *message)\n {\n+  char errmsg[STRERR_MAXSZ];\n   recursion_check ();\n-  st_printf (\"Operating system error: %s\\n%s\\n\", get_oserror (), message);\n+  st_printf (\"Operating system error: %s\\n%s\\n\", \n+\t     gf_strerror (errno, errmsg, STRERR_MAXSZ), message);\n   sys_exit (1);\n }\n iexport(os_error);\n@@ -389,6 +423,7 @@ translate_error (int code)\n void\n generate_error (st_parameter_common *cmp, int family, const char *message)\n {\n+  char errmsg[STRERR_MAXSZ];\n \n   /* If there was a previous error, don't mask it with another\n      error message, EOF or EOR condition.  */\n@@ -402,7 +437,8 @@ generate_error (st_parameter_common *cmp, int family, const char *message)\n \n   if (message == NULL)\n     message =\n-      (family == LIBERROR_OS) ? get_oserror () : translate_error (family);\n+      (family == LIBERROR_OS) ? gf_strerror (errno, errmsg, STRERR_MAXSZ) :\n+      translate_error (family);\n \n   if (cmp->flags & IOPARM_HAS_IOMSG)\n     cf_strcpy (cmp->iomsg, cmp->iomsg_len, message);"}]}