{"sha": "954c74461753eae9270f0c489877fa7ea21a912b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTU0Yzc0NDYxNzUzZWFlOTI3MGYwYzQ4OTg3N2ZhN2VhMjFhOTEyYg==", "commit": {"author": {"name": "Joern Rennecke", "email": "amylaar@spamcop.net", "date": "2010-11-10T09:16:19Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2010-11-10T09:16:19Z"}, "message": "re PR target/44760 (iq2000.md warnings)\n\n\tPR target/44760\n\t* config/iq2000/iq2000.h (REGISTER_NAMES): Remove trailing semicolon.\n\t(REGNO_MODE_OK_FOR_BASE_P): Cast REGNO to int before passing it to\n\tGP_REG_OR_PSEUDO_STRICT_P.\n\t* config/iq2000/iq2000.md (andsi3+1): Add gcc_unreachable for\n\tunexpected alternative.\n\t(*movsf_internal): Likewise.\n\t(indirect_jump): Replace call to non-existant function with call to\n\tinternal_error.\n\t(tablejump): Likewise.\n\t* config/iq2000/iq2000.c: Include df.h .\n\t(iq2000_function_arg_advance): Use CONST_CAST2.\n\t(compute_frame_size, iq2000_expand_prologue): Remove unused variables.\n\t(iq2000_can_eliminate): Call leaf_function_p instead of testing for\n\ta non-zero function address.\n\t(iq2000_initial_elimination_offset): Add gcc_unreachable for\n\tunexpected value of FROM.\n\t(symbolic_expression_p): Delete.\n\t(iq2000_function_value): Constify func.\n\t(expand_one_builtin): Use expand_normal.\n\t(iq2000_print_operand): Don't print VALUE if calculating it failed.\n\nFrom-SVN: r166523", "tree": {"sha": "13d7d6d7f4110c1dd2c16dd022a32b4077e08199", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13d7d6d7f4110c1dd2c16dd022a32b4077e08199"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/954c74461753eae9270f0c489877fa7ea21a912b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/954c74461753eae9270f0c489877fa7ea21a912b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/954c74461753eae9270f0c489877fa7ea21a912b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/954c74461753eae9270f0c489877fa7ea21a912b/comments", "author": null, "committer": null, "parents": [{"sha": "83f3bd62c9329ec4e3439ff4b0a3175863ba12df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83f3bd62c9329ec4e3439ff4b0a3175863ba12df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83f3bd62c9329ec4e3439ff4b0a3175863ba12df"}], "stats": {"total": 79, "additions": 43, "deletions": 36}, "files": [{"sha": "d4218885a2d42ba17266e5cf3759e357115f6836", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/954c74461753eae9270f0c489877fa7ea21a912b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/954c74461753eae9270f0c489877fa7ea21a912b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=954c74461753eae9270f0c489877fa7ea21a912b", "patch": "@@ -1,3 +1,27 @@\n+2010-11-10  Joern Rennecke  <amylaar@spamcop.net>\n+\n+\tPR target/44760\n+\t* config/iq2000/iq2000.h (REGISTER_NAMES): Remove trailing semicolon.\n+\t(REGNO_MODE_OK_FOR_BASE_P): Cast REGNO to int before passing it to\n+\tGP_REG_OR_PSEUDO_STRICT_P.\n+\t* config/iq2000/iq2000.md (andsi3+1): Add gcc_unreachable for\n+\tunexpected alternative.\n+\t(*movsf_internal): Likewise.\n+\t(indirect_jump): Replace call to non-existant function with call to\n+\tinternal_error.\n+\t(tablejump): Likewise.\n+\t* config/iq2000/iq2000.c: Include df.h .\n+\t(iq2000_function_arg_advance): Use CONST_CAST2.\n+\t(compute_frame_size, iq2000_expand_prologue): Remove unused variables.\n+\t(iq2000_can_eliminate): Call leaf_function_p instead of testing for\n+\ta non-zero function address.\n+\t(iq2000_initial_elimination_offset): Add gcc_unreachable for\n+\tunexpected value of FROM.\n+\t(symbolic_expression_p): Delete.\n+\t(iq2000_function_value): Constify func.\n+\t(expand_one_builtin): Use expand_normal.\n+\t(iq2000_print_operand): Don't print VALUE if calculating it failed.\n+\n 2010-11-10  Laurynas Biveinis  <laurynas.biveinis@gmail.com>\n \n \tPR/46268"}, {"sha": "5f9049dc82ac2f82c8e1be45b14b7ee84b7ae3b0", "filename": "gcc/config/iq2000/iq2000.c", "status": "modified", "additions": 11, "deletions": 32, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/954c74461753eae9270f0c489877fa7ea21a912b/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/954c74461753eae9270f0c489877fa7ea21a912b/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.c?ref=954c74461753eae9270f0c489877fa7ea21a912b", "patch": "@@ -46,6 +46,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"target.h\"\n #include \"target-def.h\"\n #include \"langhooks.h\"\n+#include \"df.h\"\n \n /* Enumeration for all of the relational tests, so that we can build\n    arrays indexed by the test type, and not worry about the order\n@@ -1150,7 +1151,7 @@ iq2000_function_arg_advance (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n \t       \"function_adv({gp reg found = %d, arg # = %2d, words = %2d}, %4s, \",\n \t       cum->gp_reg_found, cum->arg_number, cum->arg_words,\n \t       GET_MODE_NAME (mode));\n-      fprintf (stderr, \"%p\", (void *) type);\n+      fprintf (stderr, \"%p\", CONST_CAST2 (void *, const_tree,  type));\n       fprintf (stderr, \", %d )\\n\\n\", named);\n     }\n \n@@ -1632,8 +1633,6 @@ compute_frame_size (HOST_WIDE_INT size)\n   HOST_WIDE_INT gp_reg_size;\t/* # bytes needed to store gp regs.  */\n   HOST_WIDE_INT fp_reg_size;\t/* # bytes needed to store fp regs.  */\n   long mask;\t\t\t/* mask of saved gp registers.  */\n-  int  fp_inc;\t\t\t/* 1 or 2 depending on the size of fp regs.  */\n-  long fp_bits;\t\t\t/* bitmask to use for each fp register.  */\n \n   gp_reg_size = 0;\n   fp_reg_size = 0;\n@@ -1674,8 +1673,6 @@ compute_frame_size (HOST_WIDE_INT size)\n \t}\n     }\n \n-  fp_inc = 2;\n-  fp_bits = 3;\n   gp_reg_rounded = IQ2000_STACK_ALIGN (gp_reg_size);\n   total_size += gp_reg_rounded + IQ2000_STACK_ALIGN (fp_reg_size);\n \n@@ -1730,7 +1727,7 @@ iq2000_can_eliminate (const int from, const int to)\n {\n   return (from == RETURN_ADDRESS_POINTER_REGNUM\n           && (! leaf_function_p ()\n-              || (to == GP_REG_FIRST + 31 && leaf_function_p)))\n+              || (to == GP_REG_FIRST + 31 && leaf_function_p ())))\n           || (from != RETURN_ADDRESS_POINTER_REGNUM\n               && (to == HARD_FRAME_POINTER_REGNUM\n                   || (to == STACK_POINTER_REGNUM\n@@ -1759,6 +1756,8 @@ iq2000_initial_elimination_offset (int from, int to ATTRIBUTE_UNUSED)\n \t     + ((UNITS_PER_WORD - (POINTER_SIZE / BITS_PER_UNIT)) \n \t\t* (BYTES_BIG_ENDIAN != 0)); \n     }\n+  else\n+    gcc_unreachable ();\n \n   return offset;\n }\n@@ -2002,15 +2001,15 @@ iq2000_expand_prologue (void)\n \n       for (i = 0; i < num; i++)\n \t{\n-\t  rtx insn, pattern;\n+\t  rtx pattern;\n \n \t  pattern = RTVEC_ELT (adjust, i);\n \t  if (GET_CODE (pattern) != SET\n \t      || GET_CODE (SET_SRC (pattern)) != ASHIFT)\n \t    abort_with_insn (pattern, \"Insn is not a shift\");\n \t  PUT_CODE (SET_SRC (pattern), ASHIFTRT);\n \n-\t  insn = emit_insn (pattern);\n+\t  emit_insn (pattern);\n \t}\n     }\n \n@@ -2165,27 +2164,6 @@ iq2000_can_use_return_insn (void)\n   return compute_frame_size (get_frame_size ()) == 0;\n }\n \f\n-/* Returns nonzero if X contains a SYMBOL_REF.  */\n-\n-static int\n-symbolic_expression_p (rtx x)\n-{\n-  if (GET_CODE (x) == SYMBOL_REF)\n-    return 1;\n-\n-  if (GET_CODE (x) == CONST)\n-    return symbolic_expression_p (XEXP (x, 0));\n-\n-  if (UNARY_P (x))\n-    return symbolic_expression_p (XEXP (x, 0));\n-\n-  if (ARITHMETIC_P (x))\n-    return (symbolic_expression_p (XEXP (x, 0))\n-\t    || symbolic_expression_p (XEXP (x, 1)));\n-\n-  return 0;\n-}\n-\n /* Choose the section to use for the constant rtx expression X that has\n    mode MODE.  */\n \n@@ -2251,7 +2229,7 @@ iq2000_function_value (const_tree valtype,\n   int reg = GP_RETURN;\n   enum machine_mode mode = TYPE_MODE (valtype);\n   int unsignedp = TYPE_UNSIGNED (valtype);\n-  tree func = fn_decl_or_type;\n+  const_tree func = fn_decl_or_type;\n \n   if (fn_decl_or_type\n       && !DECL_P (fn_decl_or_type))\n@@ -2651,7 +2629,7 @@ expand_one_builtin (enum insn_code icode, rtx target, tree exp,\n   for (i = 0; i < argcount; i++)\n     {\n       arg[i] = CALL_EXPR_ARG (exp, i);\n-      op[i] = expand_expr (arg[i], NULL_RTX, VOIDmode, 0);\n+      op[i] = expand_normal (arg[i]);\n       mode[i] = insn_data[icode].operand[i].mode;\n       if (code[i] == CONST_INT && GET_CODE (op[i]) != CONST_INT)\n \terror (\"argument %qd is not a constant\", i + 1);\n@@ -3198,7 +3176,8 @@ iq2000_print_operand (FILE *file, rtx op, int letter)\n       if (code != CONST_INT\n \t  || (value = exact_log2 (INTVAL (op))) < 0)\n \toutput_operand_lossage (\"invalid %%p value\");\n-      fprintf (file, \"%d\", value);\n+      else\n+\tfprintf (file, \"%d\", value);\n     }\n \n   else if (letter == 'Z')"}, {"sha": "87ae17a5de4215db81a7e2a724d57723758abbb8", "filename": "gcc/config/iq2000/iq2000.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/954c74461753eae9270f0c489877fa7ea21a912b/gcc%2Fconfig%2Fiq2000%2Fiq2000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/954c74461753eae9270f0c489877fa7ea21a912b/gcc%2Fconfig%2Fiq2000%2Fiq2000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.h?ref=954c74461753eae9270f0c489877fa7ea21a912b", "patch": "@@ -509,7 +509,7 @@ typedef struct iq2000_args\n  \"%8\",   \"%9\",   \"%10\",  \"%11\",  \"%12\",  \"%13\",  \"%14\",  \"%15\",\t\t\\\n  \"%16\",  \"%17\",  \"%18\",  \"%19\",  \"%20\",  \"%21\",  \"%22\",  \"%23\",\t\t\\\n  \"%24\",  \"%25\",  \"%26\",  \"%27\",  \"%28\",  \"%29\",  \"%30\",  \"%31\",  \"%rap\"\t\\\n-};\n+}\n \n #define ADDITIONAL_REGISTER_NAMES\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n@@ -832,7 +832,7 @@ enum processor_type\n   (((regno) >= FIRST_PSEUDO_REGISTER) || (BASE_REG_P ((regno), (mode))))\n \n #define REGNO_MODE_OK_FOR_BASE_P(regno, mode) \\\n-  GP_REG_OR_PSEUDO_STRICT_P ((regno), (mode))\n+  GP_REG_OR_PSEUDO_STRICT_P ((int) (regno), (mode))\n \n /* The macros REG_OK_FOR..._P assume that the arg is a REG rtx\n    and check its validity for a certain class."}, {"sha": "4552fc63a350cf1ccae060fbdc2a06143a61662b", "filename": "gcc/config/iq2000/iq2000.md", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/954c74461753eae9270f0c489877fa7ea21a912b/gcc%2Fconfig%2Fiq2000%2Fiq2000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/954c74461753eae9270f0c489877fa7ea21a912b/gcc%2Fconfig%2Fiq2000%2Fiq2000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.md?ref=954c74461753eae9270f0c489877fa7ea21a912b", "patch": "@@ -365,6 +365,8 @@\n \t  return \\\"andoi\\\\t%0,%1,%x2\\\";\n \t}\n     }\n+  else\n+    gcc_unreachable ();\n }\"\n   [(set_attr \"type\"\t\"arith\")\n    (set_attr \"mode\"\t\"SI\")])\n@@ -889,6 +891,8 @@\n     return \\\"lw\\\\t%0,%1\\\";\n   else if (which_alternative == 2)\n     return \\\"sw\\\\t%1,%0\\\";\n+  else\n+    gcc_unreachable ();\n }\"\n   [(set_attr \"length\" \"4,4,4\")\n    (set_attr \"type\" \"arith,load,store\")]\n@@ -1340,7 +1344,7 @@\n       if (!(Pmode == DImode))\n \temit_jump_insn (gen_indirect_jump_internal1 (operands[0]));\n       else\n-\temit_jump_insn (gen_indirect_jump_internal2 (operands[0]));\n+\tinternal_error (\\\"unimplemented functionality\\\");\n \n       DONE;\n     }\n@@ -1367,7 +1371,7 @@\n       if (!(Pmode == DImode))\n \temit_jump_insn (gen_tablejump_internal1 (operands[0], operands[1]));\n       else\n-\temit_jump_insn (gen_tablejump_internal2 (operands[0], operands[1]));\n+\tinternal_error (\\\"unimplemented functionality\\\");\n \n       DONE;\n     }"}]}