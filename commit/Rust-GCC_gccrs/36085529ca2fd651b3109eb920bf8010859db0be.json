{"sha": "36085529ca2fd651b3109eb920bf8010859db0be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzYwODU1MjljYTJmZDY1MWIzMTA5ZWI5MjBiZjgwMTA4NTlkYjBiZQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2012-12-19T09:21:17Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2012-12-19T09:21:17Z"}, "message": "re PR fortran/55636 (Fortran name mangling collides with user namespace)\n\n2012-12-19  Tobias Burnus  <burnus@net-b.de>\n            Jakub Jelinek  <jakub@redhat.com>\n            Janus Weil  <janus@gcc.gnu.org>\n\n        PR fortran/55636\n        PR fortran/55733\n        * gfortran.h (GFC_PREFIX): Define.\n        * trans-decl.c (gfc_create_string_length): For VAR_DECLs that\n        will be TREE_STATIC, use GFC_PREFIX to mangle the names. Handle\n        -fno-automatic\n        (gfc_trans_deferred_vars): Don't free variables SAVEd via\n        -fno-automatic.\n\n2012-12-19  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/55733\n        * gfortran.dg/save_5.f90: New.\n\n\nCo-Authored-By: Jakub Jelinek <jakub@redhat.com>\nCo-Authored-By: Janus Weil <janus@gcc.gnu.org>\n\nFrom-SVN: r194604", "tree": {"sha": "401cf7c57008a33760d801e43e90f01f62473c0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/401cf7c57008a33760d801e43e90f01f62473c0b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36085529ca2fd651b3109eb920bf8010859db0be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36085529ca2fd651b3109eb920bf8010859db0be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36085529ca2fd651b3109eb920bf8010859db0be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36085529ca2fd651b3109eb920bf8010859db0be/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "168c15bedced6139fc1aef661f28efbc6b9d934d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/168c15bedced6139fc1aef661f28efbc6b9d934d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/168c15bedced6139fc1aef661f28efbc6b9d934d"}], "stats": {"total": 101, "additions": 97, "deletions": 4}, "files": [{"sha": "2da48f3d2ce625e1723a1ff56749dedec2248a7e", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36085529ca2fd651b3109eb920bf8010859db0be/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36085529ca2fd651b3109eb920bf8010859db0be/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=36085529ca2fd651b3109eb920bf8010859db0be", "patch": "@@ -1,3 +1,16 @@\n+2012-12-19  Tobias Burnus  <burnus@net-b.de>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\t    Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/55636\n+\tPR fortran/55733\n+\t* gfortran.h (GFC_PREFIX): Define.\n+\t* trans-decl.c (gfc_create_string_length): For VAR_DECLs that\n+\twill be TREE_STATIC, use GFC_PREFIX to mangle the names. Handle\n+\t-fno-automatic\n+\t(gfc_trans_deferred_vars): Don't free variables SAVEd via\n+\t-fno-automatic.\n+\n 2012-12-16  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/55197"}, {"sha": "74162e777e40c14801b97a77edaeb40adf8b980b", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36085529ca2fd651b3109eb920bf8010859db0be/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36085529ca2fd651b3109eb920bf8010859db0be/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=36085529ca2fd651b3109eb920bf8010859db0be", "patch": "@@ -63,6 +63,15 @@ along with GCC; see the file COPYING3.  If not see\n #define PREFIX(x) \"_gfortran_\" x\n #define PREFIX_LEN 10\n \n+/* A prefix for internal variables, which are not user-visible.  */\n+#if !defined (NO_DOT_IN_LABEL)\n+# define GFC_PREFIX(x) \"_F.\" x\n+#elif !defined (NO_DOLLAR_IN_LABEL)\n+# define GFC_PREFIX(x) \"_F$\" x\n+#else\n+# define GFC_PREFIX(x) \"_F_\" x\n+#endif\n+\n #define BLANK_COMMON_NAME \"__BLNK__\"\n \n /* Macro to initialize an mstring structure.  */"}, {"sha": "3202840cb1402acbe808206aea8e4f37a6182ee4", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36085529ca2fd651b3109eb920bf8010859db0be/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36085529ca2fd651b3109eb920bf8010859db0be/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=36085529ca2fd651b3109eb920bf8010859db0be", "patch": "@@ -1089,8 +1089,22 @@ gfc_create_string_length (gfc_symbol * sym)\n       tree length;\n       const char *name;\n \n-      /* Also prefix the mangled name.  */\n-      if (sym->module)\n+      bool static_length = sym->attr.save\n+\t\t\t   || sym->ns->proc_name->attr.flavor == FL_MODULE\n+\t\t\t   || gfc_option.flag_max_stack_var_size == 0;\n+\n+      /* Also prefix the mangled name. We need to call GFC_PREFIX for static\n+\t variables as some systems do not support the \".\" in the assembler name.\n+\t For nonstatic variables, the \".\" does not appear in assembler.  */\n+      if (static_length)\n+\t{\n+\t  if (sym->module)\n+\t    name = gfc_get_string (GFC_PREFIX (\"%s_MOD_%s\"), sym->module,\n+\t\t\t\t   sym->name);\n+\t  else\n+\t    name = gfc_get_string (GFC_PREFIX (\"%s\"), sym->name);\n+\t}\n+      else if (sym->module)\n \tname = gfc_get_string (\".__%s_MOD_%s\", sym->module, sym->name);\n       else\n \tname = gfc_get_string (\".%s\", sym->name);\n@@ -1105,7 +1119,7 @@ gfc_create_string_length (gfc_symbol * sym)\n \n       sym->ts.u.cl->backend_decl = length;\n \n-      if (sym->attr.save || sym->ns->proc_name->attr.flavor == FL_MODULE)\n+      if (static_length)\n \tTREE_STATIC (length) = 1;\n \n       if (sym->ns->proc_name->attr.flavor == FL_MODULE\n@@ -3702,7 +3716,7 @@ gfc_trans_deferred_vars (gfc_symbol * proc_sym, gfc_wrapped_block * block)\n \t\t    || (sym->ts.type == BT_CLASS\n \t\t\t&& CLASS_DATA (sym)->attr.allocatable)))\n \t{\n-\t  if (!sym->attr.save)\n+\t  if (!sym->attr.save && gfc_option.flag_max_stack_var_size != 0)\n \t    {\n \t      tree descriptor = NULL_TREE;\n "}, {"sha": "f5a9835136d948330bad27096652172af1376c6a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36085529ca2fd651b3109eb920bf8010859db0be/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36085529ca2fd651b3109eb920bf8010859db0be/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=36085529ca2fd651b3109eb920bf8010859db0be", "patch": "@@ -1,3 +1,8 @@\n+2012-12-19  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/55733\n+\t* gfortran.dg/save_5.f90: New.\n+\n 2012-12-18  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/39464"}, {"sha": "20d3b7ad88a947fae252c4b6688698571538ec83", "filename": "gcc/testsuite/gfortran.dg/save_5.f90", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36085529ca2fd651b3109eb920bf8010859db0be/gcc%2Ftestsuite%2Fgfortran.dg%2Fsave_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36085529ca2fd651b3109eb920bf8010859db0be/gcc%2Ftestsuite%2Fgfortran.dg%2Fsave_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fsave_5.f90?ref=36085529ca2fd651b3109eb920bf8010859db0be", "patch": "@@ -0,0 +1,52 @@\n+! { dg-do run }\n+! { dg-options \"-fno-automatic\" }\n+!\n+! PR fortran/55733\n+!\n+! Check that -fno-automatic makes the local variable SAVEd\n+!\n+\n+! Scalar allocatable\n+subroutine foo(i)\n+  integer :: i\n+  integer, allocatable :: j\n+  if (i == 1) j = 42\n+  if (.not. allocated (j)) call abort ()\n+  if (j /= 42) call abort ()\n+end\n+\n+! Deferred-length string scalar\n+subroutine bar()\n+  logical, save :: first = .true.\n+  character(len=:), allocatable :: str\n+  if (first) then\n+    first = .false.\n+    if (allocated (str)) call abort ()\n+    str = \"ABCDEF\"\n+  end if\n+  if (.not. allocated (str)) call abort ()\n+  if (len (str) /= 6) call abort ()\n+  if (str(1:6) /= \"ABCDEF\") call abort ()\n+end subroutine bar\n+\n+! Deferred-length string array\n+subroutine bar_array()\n+  logical, save :: first = .true.\n+  character(len=:), allocatable :: str\n+  if (first) then\n+    first = .false.\n+    if (allocated (str)) call abort ()\n+    str = \"ABCDEF\"\n+  end if\n+  if (.not. allocated (str)) call abort ()\n+  if (len (str) /= 6) call abort ()\n+  if (str(1:6) /= \"ABCDEF\") call abort ()\n+end subroutine bar_array\n+\n+call foo(1)\n+call foo(2)\n+call bar()\n+call bar_array()\n+call bar()\n+call bar_array()\n+end"}]}