{"sha": "b6600392bf71c4a9785f8f49948b611425896830", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjY2MDAzOTJiZjcxYzRhOTc4NWY4ZjQ5OTQ4YjYxMTQyNTg5NjgzMA==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2021-04-24T12:34:49Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2021-04-24T12:45:14Z"}, "message": "Darwin : Adjust darwin_binds_local_p for PIC code [PR100152].\n\nDarwin's dynamic linker supports interposition and lazy symbol binding.\nIf we are generating PIC code and a symbol is public, then it could\npotentially be indirected via a lazy-resolver stub; we cannot tell at\ncompile-time if this will be done (since the indirection can be the\nresult of adding a -flat-namespace option at link-time).  Here we are\nconservative and assume that any such symbol cannot bind locally.\nThe default implementation for binds_local_p handles undefined, weak and\ncommon symbols which are always indirected (for mdynamic-no-pic also).\n\ngcc/ChangeLog:\n\n\tPR target/100152\n\t* config/darwin.c (darwin_binds_local_p): Assume that any\n\tpublic symbol might be interposed for PIC code. Update function\n\theader comment to reflect current Darwin capability.", "tree": {"sha": "3e0f30173cca545dd6da1dc931d66ba0952cbf76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e0f30173cca545dd6da1dc931d66ba0952cbf76"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6600392bf71c4a9785f8f49948b611425896830", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6600392bf71c4a9785f8f49948b611425896830", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6600392bf71c4a9785f8f49948b611425896830", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6600392bf71c4a9785f8f49948b611425896830/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f31ddad8ac8f11b8b11ab0c39f2e0740fd40ba8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f31ddad8ac8f11b8b11ab0c39f2e0740fd40ba8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f31ddad8ac8f11b8b11ab0c39f2e0740fd40ba8e"}], "stats": {"total": 17, "additions": 13, "deletions": 4}, "files": [{"sha": "36b460a9890c92df090fad5fe06040ce2e394582", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6600392bf71c4a9785f8f49948b611425896830/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6600392bf71c4a9785f8f49948b611425896830/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=b6600392bf71c4a9785f8f49948b611425896830", "patch": "@@ -3134,16 +3134,25 @@ darwin_file_end (void)\n /* TODO: Add a language hook for identifying if a decl is a vtable.  */\n #define DARWIN_VTABLE_P(DECL) 0\n \n-/* Cross-module name binding.  Darwin does not support overriding\n-   functions at dynamic-link time, except for vtables in kexts.  */\n+/* Cross-module name binding.\n+   Darwin's dynamic linker supports interposition and lazy symbol binding.\n+   If we are generating PIC code and a symbol is public, then it could\n+   potentially be indirected via a lazy-resolver stub; we cannot tell at\n+   compile-time if this will be done (since the indirection can be the\n+   result of adding a -flat-namespace option at link-time).  Here we are\n+   conservative and assume that any such symbol cannot bind locally.\n+   The default implementation for binds_local_p handles undefined, weak and\n+   common symbols which are always indirected.  */\n \n bool\n darwin_binds_local_p (const_tree decl)\n {\n   /* We use the \"shlib\" input to indicate that a symbol should be\n-     considered overridable; only relevant for vtables in kernel modules\n-     on earlier system versions, and with a TODO to complete.  */\n+     considered overridable.  Older versions of the kernel also support\n+     interposition for extensions (although this code is a place-holder\n+     until there is an implementation for DARWIN_VTABLE_P).  */\n   bool force_overridable = TARGET_KEXTABI && DARWIN_VTABLE_P (decl);\n+  force_overridable |= MACHOPIC_PURE;\n   return default_binds_local_p_3 (decl, force_overridable /* shlib */,\n \t\t\t\t  false /* weak dominate */,\n \t\t\t\t  false /* extern_protected_data */,"}]}