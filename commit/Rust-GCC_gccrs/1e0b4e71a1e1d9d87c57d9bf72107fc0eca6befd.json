{"sha": "1e0b4e71a1e1d9d87c57d9bf72107fc0eca6befd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWUwYjRlNzFhMWUxZDlkODdjNTdkOWJmNzIxMDdmYzBlY2E2YmVmZA==", "commit": {"author": {"name": "Thomas Young", "email": "wenzhang5800@gmail.com", "date": "2021-07-07T05:20:48Z"}, "committer": {"name": "Thomas Young", "email": "wenzhang5800@gmail.com", "date": "2021-07-07T05:20:48Z"}, "message": "use rust_assert in dead code pass instead of rust_error_at", "tree": {"sha": "bb855bc94c4000f7edd8862b45d05ab1d701ff9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb855bc94c4000f7edd8862b45d05ab1d701ff9e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e0b4e71a1e1d9d87c57d9bf72107fc0eca6befd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e0b4e71a1e1d9d87c57d9bf72107fc0eca6befd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e0b4e71a1e1d9d87c57d9bf72107fc0eca6befd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e0b4e71a1e1d9d87c57d9bf72107fc0eca6befd/comments", "author": {"login": "thomasyonug", "id": 17464490, "node_id": "MDQ6VXNlcjE3NDY0NDkw", "avatar_url": "https://avatars.githubusercontent.com/u/17464490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomasyonug", "html_url": "https://github.com/thomasyonug", "followers_url": "https://api.github.com/users/thomasyonug/followers", "following_url": "https://api.github.com/users/thomasyonug/following{/other_user}", "gists_url": "https://api.github.com/users/thomasyonug/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomasyonug/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomasyonug/subscriptions", "organizations_url": "https://api.github.com/users/thomasyonug/orgs", "repos_url": "https://api.github.com/users/thomasyonug/repos", "events_url": "https://api.github.com/users/thomasyonug/events{/privacy}", "received_events_url": "https://api.github.com/users/thomasyonug/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thomasyonug", "id": 17464490, "node_id": "MDQ6VXNlcjE3NDY0NDkw", "avatar_url": "https://avatars.githubusercontent.com/u/17464490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomasyonug", "html_url": "https://github.com/thomasyonug", "followers_url": "https://api.github.com/users/thomasyonug/followers", "following_url": "https://api.github.com/users/thomasyonug/following{/other_user}", "gists_url": "https://api.github.com/users/thomasyonug/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomasyonug/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomasyonug/subscriptions", "organizations_url": "https://api.github.com/users/thomasyonug/orgs", "repos_url": "https://api.github.com/users/thomasyonug/repos", "events_url": "https://api.github.com/users/thomasyonug/events{/privacy}", "received_events_url": "https://api.github.com/users/thomasyonug/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3670b0ef05041b8a1defb755804ef36e029d20db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3670b0ef05041b8a1defb755804ef36e029d20db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3670b0ef05041b8a1defb755804ef36e029d20db"}], "stats": {"total": 61, "additions": 21, "deletions": 40}, "files": [{"sha": "dd7e05d075b368deaf48d05f9475d5688dc6297b", "filename": "gcc/rust/lint/rust-lint-marklive.cc", "status": "modified", "additions": 20, "deletions": 38, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e0b4e71a1e1d9d87c57d9bf72107fc0eca6befd/gcc%2Frust%2Flint%2Frust-lint-marklive.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e0b4e71a1e1d9d87c57d9bf72107fc0eca6befd/gcc%2Frust%2Flint%2Frust-lint-marklive.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flint%2Frust-lint-marklive.cc?ref=1e0b4e71a1e1d9d87c57d9bf72107fc0eca6befd", "patch": "@@ -92,7 +92,8 @@ void\n MarkLive::visit (HIR::PathInExpression &expr)\n {\n   expr.iterate_path_segments ([&] (HIR::PathExprSegment &seg) -> bool {\n-    return visit_path_segment (seg);\n+    visit_path_segment (seg);\n+    return true;\n   });\n }\n \n@@ -113,12 +114,13 @@ MarkLive::visit (HIR::MethodCallExpr &expr)\n \n   // node back to HIR\n   HirId ref;\n-  node_id_to_hir_id (expr.get_mappings ().get_crate_num (), ref_node_id, ref,\n-\t\t     expr.get_locus ());\n+  rust_assert (\n+    mappings->lookup_node_to_hir (expr.get_mappings ().get_crate_num (),\n+\t\t\t\t  ref_node_id, &ref));\n   mark_hir_id (ref);\n }\n \n-bool\n+void\n MarkLive::visit_path_segment (HIR::PathExprSegment seg)\n {\n   NodeId ast_node_id = seg.get_mappings ().get_nodeid ();\n@@ -127,23 +129,18 @@ MarkLive::visit_path_segment (HIR::PathExprSegment seg)\n   if (resolver->lookup_resolved_name (ast_node_id, &ref_node_id))\n     {\n       Resolver::Definition def;\n-      if (!resolver->lookup_definition (ref_node_id, &def))\n-\t{\n-\t  rust_error_at (seg.get_locus (),\n-\t\t\t \"unknown reference for resolved name\");\n-\t  return false;\n-\t}\n+      rust_assert (resolver->lookup_definition (ref_node_id, &def));\n       ref_node_id = def.parent;\n     }\n   else if (!resolver->lookup_resolved_type (ast_node_id, &ref_node_id))\n     {\n-      return false;\n+      return;\n     }\n   HirId ref;\n-  node_id_to_hir_id (seg.get_mappings ().get_crate_num (), ref_node_id, ref,\n-\t\t     seg.get_locus ());\n+  rust_assert (\n+    mappings->lookup_node_to_hir (seg.get_mappings ().get_crate_num (),\n+\t\t\t\t  ref_node_id, &ref));\n   mark_hir_id (ref);\n-  return true;\n }\n \n void\n@@ -195,8 +192,9 @@ MarkLive::visit (HIR::IdentifierExpr &expr)\n \n   // node back to HIR\n   HirId ref;\n-  node_id_to_hir_id (expr.get_mappings ().get_crate_num (), ref_node_id, ref,\n-\t\t     expr.get_locus ());\n+  rust_assert (\n+    mappings->lookup_node_to_hir (expr.get_mappings ().get_crate_num (),\n+\t\t\t\t  ref_node_id, &ref));\n   mark_hir_id (ref);\n }\n \n@@ -207,8 +205,9 @@ MarkLive::visit (HIR::TypeAlias &alias)\n   resolver->lookup_resolved_type (\n     alias.get_type_aliased ()->get_mappings ().get_nodeid (), &ast_node_id);\n   HirId hir_id;\n-  node_id_to_hir_id (alias.get_mappings ().get_crate_num (), ast_node_id,\n-\t\t     hir_id, alias.get_locus ());\n+  rust_assert (\n+    mappings->lookup_node_to_hir (alias.get_mappings ().get_crate_num (),\n+\t\t\t\t  ast_node_id, &hir_id));\n   mark_hir_id (hir_id);\n }\n \n@@ -231,29 +230,12 @@ MarkLive::find_ref_node_id (NodeId ast_node_id, NodeId &ref_node_id,\n       // these ref_node_ids will resolve to a pattern declaration but we are\n       // interested in the definition that this refers to get the parent id\n       Resolver::Definition def;\n-      if (!resolver->lookup_definition (ref_node_id, &def))\n-\t{\n-\t  rust_error_at (locus, \"unknown reference for resolved name\");\n-\t  return;\n-\t}\n+      rust_assert (resolver->lookup_definition (ref_node_id, &def));\n       ref_node_id = def.parent;\n     }\n-  else if (!resolver->lookup_resolved_type (ast_node_id, &ref_node_id))\n-    {\n-      rust_error_at (locus, \"Failed to lookup type reference for node: %s\",\n-\t\t     node_name.c_str ());\n-      return;\n-    }\n-}\n-\n-void\n-MarkLive::node_id_to_hir_id (CrateNum crateNum, NodeId ref_node_id, HirId &ref,\n-\t\t\t     Location locus)\n-{\n-  if (!mappings->lookup_node_to_hir (crateNum, ref_node_id, &ref))\n+  else\n     {\n-      rust_error_at (locus, \"reverse lookup failure\");\n-      return;\n+      rust_assert (resolver->lookup_resolved_type (ast_node_id, &ref_node_id));\n     }\n }\n "}, {"sha": "6a2577952c65dd0631a7affefa37bc9a84ea3678", "filename": "gcc/rust/lint/rust-lint-marklive.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e0b4e71a1e1d9d87c57d9bf72107fc0eca6befd/gcc%2Frust%2Flint%2Frust-lint-marklive.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e0b4e71a1e1d9d87c57d9bf72107fc0eca6befd/gcc%2Frust%2Flint%2Frust-lint-marklive.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flint%2Frust-lint-marklive.h?ref=1e0b4e71a1e1d9d87c57d9bf72107fc0eca6befd", "patch": "@@ -266,10 +266,9 @@ class MarkLive : public MarkLiveBase\n       tyctx (Resolver::TypeCheckContext::get ()){};\n \n   void mark_hir_id (HirId);\n-  bool visit_path_segment (HIR::PathExprSegment);\n+  void visit_path_segment (HIR::PathExprSegment);\n   void find_ref_node_id (NodeId ast_node_id, NodeId &ref_node_id,\n \t\t\t Location locus, const std::string &node_name);\n-  void node_id_to_hir_id (CrateNum, NodeId, HirId &, Location);\n };\n \n } // namespace Analysis"}]}