{"sha": "7c8f7eaa75d53ca642203178fb2c6bbe800bc2ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2M4ZjdlYWE3NWQ1M2NhNjQyMjAzMTc4ZmIyYzZiYmU4MDBiYzJlYQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2016-07-20T14:03:03Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2016-07-20T14:03:03Z"}, "message": "Enabling work for C++ handling of misspelled identifiers and typenames\n\ngcc/c/ChangeLog:\n\t* c-decl.c (struct edit_distance_traits<cpp_hashnode *>): Move to\n\tspellcheck-tree.h\n\t(best_macro_match): Likewise, converting from a typedef to a\n\tsubclass.\n\t(find_closest_macro_cpp_cb): Move to spellcheck-tree.c.\n\t(lookup_name_fuzzy): Update for change of best_macro_match to a\n\tsubclass with a ctor that calls cpp_forall_identifiers.\n\ngcc/ChangeLog:\n\t* diagnostic-show-locus.c (diagnostic_show_locus): If this is the\n\tsame location as last time, don't skip if we have fix-it hints.\n\tClarify the skipping logic by converting it from one \"if\" clause\n\tto repeated \"if\" clauses.\n\t* spellcheck-tree.c: Include \"cpplib.h\".\n\t(find_closest_macro_cpp_cb): Move here from c/c-decl.c.\n\t(best_macro_match::best_macro_match): New constructor.\n\t* spellcheck-tree.h (struct edit_distance_traits<cpp_hashnode *>):\n\tMove here from c/c-decl.c.\n\t(class best_macro_match): Move here from c/c-decl.c, converting\n\tfrom a typedef to a subclass, gaining a ctor.\n\nFrom-SVN: r238522", "tree": {"sha": "4295610e81aed46c2605b630ee7f4d3963766ac1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4295610e81aed46c2605b630ee7f4d3963766ac1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c8f7eaa75d53ca642203178fb2c6bbe800bc2ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c8f7eaa75d53ca642203178fb2c6bbe800bc2ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c8f7eaa75d53ca642203178fb2c6bbe800bc2ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c8f7eaa75d53ca642203178fb2c6bbe800bc2ea/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7419f4417a33ff9143317794aa985f7681d1e2a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7419f4417a33ff9143317794aa985f7681d1e2a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7419f4417a33ff9143317794aa985f7681d1e2a0"}], "stats": {"total": 138, "additions": 94, "deletions": 44}, "files": [{"sha": "848d19b323ade605bfb62cc3db1758bab9c31838", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c8f7eaa75d53ca642203178fb2c6bbe800bc2ea/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c8f7eaa75d53ca642203178fb2c6bbe800bc2ea/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7c8f7eaa75d53ca642203178fb2c6bbe800bc2ea", "patch": "@@ -1,3 +1,17 @@\n+2016-07-20  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* diagnostic-show-locus.c (diagnostic_show_locus): If this is the\n+\tsame location as last time, don't skip if we have fix-it hints.\n+\tClarify the skipping logic by converting it from one \"if\" clause\n+\tto repeated \"if\" clauses.\n+\t* spellcheck-tree.c: Include \"cpplib.h\".\n+\t(find_closest_macro_cpp_cb): Move here from c/c-decl.c.\n+\t(best_macro_match::best_macro_match): New constructor.\n+\t* spellcheck-tree.h (struct edit_distance_traits<cpp_hashnode *>):\n+\tMove here from c/c-decl.c.\n+\t(class best_macro_match): Move here from c/c-decl.c, converting\n+\tfrom a typedef to a subclass, gaining a ctor.\n+\n 2016-07-20  Georg-Johann Lay  <avr@gjlay.de>\n \n \t* config/avr/avr-protos.h (avr_addr_space_supported_p): New prototype."}, {"sha": "397bbf8ad5b4d6be3bd053d09508f065ff6a7d93", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c8f7eaa75d53ca642203178fb2c6bbe800bc2ea/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c8f7eaa75d53ca642203178fb2c6bbe800bc2ea/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=7c8f7eaa75d53ca642203178fb2c6bbe800bc2ea", "patch": "@@ -1,3 +1,13 @@\n+2016-07-20  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* c-decl.c (struct edit_distance_traits<cpp_hashnode *>): Move to\n+\tspellcheck-tree.h\n+\t(best_macro_match): Likewise, converting from a typedef to a\n+\tsubclass.\n+\t(find_closest_macro_cpp_cb): Move to spellcheck-tree.c.\n+\t(lookup_name_fuzzy): Update for change of best_macro_match to a\n+\tsubclass with a ctor that calls cpp_forall_identifiers.\n+\n 2016-07-20  David Malcolm  <dmalcolm@redhat.com>\n \n \t* c-decl.c (implicit_decl_warning): Update for conversion of"}, {"sha": "41aabeb2972cf74f7b6316aea2193b0dac475bcd", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 1, "deletions": 41, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c8f7eaa75d53ca642203178fb2c6bbe800bc2ea/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c8f7eaa75d53ca642203178fb2c6bbe800bc2ea/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=7c8f7eaa75d53ca642203178fb2c6bbe800bc2ea", "patch": "@@ -3955,45 +3955,6 @@ lookup_name_in_scope (tree name, struct c_scope *scope)\n   return NULL_TREE;\n }\n \n-/* Specialization of edit_distance_traits for preprocessor macros.  */\n-\n-template <>\n-struct edit_distance_traits<cpp_hashnode *>\n-{\n-  static size_t get_length (cpp_hashnode *hashnode)\n-  {\n-    return hashnode->ident.len;\n-  }\n-\n-  static const char *get_string (cpp_hashnode *hashnode)\n-  {\n-    return (const char *)hashnode->ident.str;\n-  }\n-};\n-\n-/* Specialization of best_match<> for finding the closest preprocessor\n-   macro to a given identifier.  */\n-\n-typedef best_match<tree, cpp_hashnode *> best_macro_match;\n-\n-/* A callback for cpp_forall_identifiers, for use by lookup_name_fuzzy.\n-   Process HASHNODE and update the best_macro_match instance pointed to be\n-   USER_DATA.  */\n-\n-static int\n-find_closest_macro_cpp_cb (cpp_reader *, cpp_hashnode *hashnode,\n-\t\t\t   void *user_data)\n-{\n-  if (hashnode->type != NT_MACRO)\n-    return 1;\n-\n-  best_macro_match *bmm = (best_macro_match *)user_data;\n-  bmm->consider (hashnode);\n-\n-  /* Keep iterating.  */\n-  return 1;\n-}\n-\n /* Look for the closest match for NAME within the currently valid\n    scopes.\n \n@@ -4068,8 +4029,7 @@ lookup_name_fuzzy (tree name, enum lookup_name_fuzzy_kind kind)\n      non-NULL result for best_macro_match if it's better than any of\n      the identifiers already checked, which avoids needless creation\n      of identifiers for macro hashnodes.  */\n-  best_macro_match bmm (name, bm.get_best_distance ());\n-  cpp_forall_identifiers (parse_in, find_closest_macro_cpp_cb, &bmm);\n+  best_macro_match bmm (name, bm.get_best_distance (), parse_in);\n   cpp_hashnode *best_macro = bmm.get_best_meaningful_candidate ();\n   /* If a macro is the closest so far to NAME, use it, creating an\n      identifier tree node for it.  */"}, {"sha": "49f7f119782a3b60cae76cc11348ab30ad55a2ae", "filename": "gcc/diagnostic-show-locus.c", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c8f7eaa75d53ca642203178fb2c6bbe800bc2ea/gcc%2Fdiagnostic-show-locus.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c8f7eaa75d53ca642203178fb2c6bbe800bc2ea/gcc%2Fdiagnostic-show-locus.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic-show-locus.c?ref=7c8f7eaa75d53ca642203178fb2c6bbe800bc2ea", "patch": "@@ -1280,9 +1280,18 @@ diagnostic_show_locus (diagnostic_context * context,\n {\n   pp_newline (context->printer);\n \n-  if (!context->show_caret\n-      || diagnostic_location (diagnostic, 0) <= BUILTINS_LOCATION\n-      || diagnostic_location (diagnostic, 0) == context->last_location)\n+  /* Do nothing if source-printing has been disabled.  */\n+  if (!context->show_caret)\n+    return;\n+\n+  /* Don't attempt to print source for UNKNOWN_LOCATION and for builtins.  */\n+  if (diagnostic_location (diagnostic, 0) <= BUILTINS_LOCATION)\n+    return;\n+\n+  /* Don't print the same source location twice in a row, unless we have\n+     fix-it hints.  */\n+  if (diagnostic_location (diagnostic, 0) == context->last_location\n+      && diagnostic->richloc->get_num_fixit_hints () == 0)\n     return;\n \n   context->last_location = diagnostic_location (diagnostic, 0);"}, {"sha": "ef1e689d9775b50e6205caddffdf24a76c8e48b1", "filename": "gcc/spellcheck-tree.c", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c8f7eaa75d53ca642203178fb2c6bbe800bc2ea/gcc%2Fspellcheck-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c8f7eaa75d53ca642203178fb2c6bbe800bc2ea/gcc%2Fspellcheck-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fspellcheck-tree.c?ref=7c8f7eaa75d53ca642203178fb2c6bbe800bc2ea", "patch": "@@ -22,6 +22,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"coretypes.h\"\n #include \"tm.h\"\n #include \"tree.h\"\n+#include \"cpplib.h\"\n #include \"spellcheck-tree.h\"\n #include \"selftest.h\"\n #include \"stringpool.h\"\n@@ -65,6 +66,36 @@ find_closest_identifier (tree target, const auto_vec<tree> *candidates)\n   return bm.get_best_meaningful_candidate ();\n }\n \n+/* A callback for cpp_forall_identifiers, for use by best_macro_match's ctor.\n+   Process HASHNODE and update the best_macro_match instance pointed to be\n+   USER_DATA.  */\n+\n+static int\n+find_closest_macro_cpp_cb (cpp_reader *, cpp_hashnode *hashnode,\n+\t\t\t   void *user_data)\n+{\n+  if (hashnode->type != NT_MACRO)\n+    return 1;\n+\n+  best_macro_match *bmm = (best_macro_match *)user_data;\n+  bmm->consider (hashnode);\n+\n+  /* Keep iterating.  */\n+  return 1;\n+}\n+\n+/* Constructor for best_macro_match.\n+   Use find_closest_macro_cpp_cb to find the closest matching macro to\n+   NAME within distance < best_distance_so_far. */\n+\n+best_macro_match::best_macro_match (tree goal,\n+\t\t\t\t    edit_distance_t best_distance_so_far,\n+\t\t\t\t    cpp_reader *reader)\n+  : best_match (goal, best_distance_so_far)\n+{\n+  cpp_forall_identifiers (reader, find_closest_macro_cpp_cb, this);\n+}\n+\n #if CHECKING_P\n \n namespace selftest {"}, {"sha": "0e43d148c956bf44334a7b6b7597e40e4e2fe175", "filename": "gcc/spellcheck-tree.h", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c8f7eaa75d53ca642203178fb2c6bbe800bc2ea/gcc%2Fspellcheck-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c8f7eaa75d53ca642203178fb2c6bbe800bc2ea/gcc%2Fspellcheck-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fspellcheck-tree.h?ref=7c8f7eaa75d53ca642203178fb2c6bbe800bc2ea", "patch": "@@ -48,4 +48,30 @@ struct edit_distance_traits<tree>\n   }\n };\n \n+/* Specialization of edit_distance_traits for preprocessor macros.  */\n+\n+template <>\n+struct edit_distance_traits<cpp_hashnode *>\n+{\n+  static size_t get_length (cpp_hashnode *hashnode)\n+  {\n+    return hashnode->ident.len;\n+  }\n+\n+  static const char *get_string (cpp_hashnode *hashnode)\n+  {\n+    return (const char *)hashnode->ident.str;\n+  }\n+};\n+\n+/* Specialization of best_match<> for finding the closest preprocessor\n+   macro to a given identifier.  */\n+\n+class best_macro_match : public best_match<tree, cpp_hashnode *>\n+{\n+ public:\n+  best_macro_match (tree goal, edit_distance_t best_distance_so_far,\n+\t\t    cpp_reader *reader);\n+};\n+\n #endif  /* GCC_SPELLCHECK_TREE_H  */"}]}