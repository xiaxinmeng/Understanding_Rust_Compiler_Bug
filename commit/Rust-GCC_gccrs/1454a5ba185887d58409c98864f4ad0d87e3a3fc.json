{"sha": "1454a5ba185887d58409c98864f4ad0d87e3a3fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQ1NGE1YmExODU4ODdkNTg0MDljOTg4NjRmNGFkMGQ4N2UzYTNmYw==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-03-31T05:44:03Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-03-31T05:44:03Z"}, "message": "(yylex): Convert real decimal constants directly to the precision specified by the letter at the end of the number.\n\n(yylex): Convert real decimal constants directly\nto the precision specified by the letter at the end of the number.\nPass mode arg to REAL_VALUE_ATOF to specify precision.\nMove the \"out of range of double\" error check.\n\nFrom-SVN: r3936", "tree": {"sha": "90547e4ef900e45f4354aa036f216a3bff93c8dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90547e4ef900e45f4354aa036f216a3bff93c8dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1454a5ba185887d58409c98864f4ad0d87e3a3fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1454a5ba185887d58409c98864f4ad0d87e3a3fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1454a5ba185887d58409c98864f4ad0d87e3a3fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1454a5ba185887d58409c98864f4ad0d87e3a3fc/comments", "author": null, "committer": null, "parents": [{"sha": "ee7e54412fdb94e350e6548c9a28d310ed0ac533", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee7e54412fdb94e350e6548c9a28d310ed0ac533", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee7e54412fdb94e350e6548c9a28d310ed0ac533"}], "stats": {"total": 48, "additions": 30, "deletions": 18}, "files": [{"sha": "0504800ea831f7f0840175c721c98cd9fa70f51a", "filename": "gcc/c-lex.c", "status": "modified", "additions": 30, "deletions": 18, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1454a5ba185887d58409c98864f4ad0d87e3a3fc/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1454a5ba185887d58409c98864f4ad0d87e3a3fc/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=1454a5ba185887d58409c98864f4ad0d87e3a3fc", "patch": "@@ -1398,36 +1398,27 @@ yylex ()\n \t    else\n \t      {\n \t\tset_float_handler (handler);\n-\t\tvalue = REAL_VALUE_ATOF (token_buffer);\n-\t\tset_float_handler (NULL_PTR);\n-\t      }\n-#ifdef ERANGE\n-\t    if (errno == ERANGE && !flag_traditional && pedantic)\n-\t      {\n-  \t\t/* ERANGE is also reported for underflow,\n-  \t\t   so test the value to distinguish overflow from that.  */\n-\t\tif (REAL_VALUES_LESS (dconst1, value)\n-\t\t    || REAL_VALUES_LESS (value, dconstm1))\n-\t\t  {\n-\t\t    pedwarn (\"floating point number exceeds range of `double'\");\n-\t\t    exceeds_double = 1;\n-\t\t  }\n-\t      }\n-#endif\n+\n+/* The second argument, machine_mode, of REAL_VALUE_ATOF tells the\n+   desired precision of the binary result of decimal-to-binary conversion.  */\n \n \t    /* Read the suffixes to choose a data type.  */\n \t    switch (c)\n \t      {\n \t      case 'f': case 'F':\n \t\ttype = float_type_node;\n-\t\tvalue = REAL_VALUE_TRUNCATE (TYPE_MODE (type), value);\n-\t\tif (REAL_VALUE_ISINF (value) && ! exceeds_double && pedantic)\n+\t\tvalue = REAL_VALUE_ATOF (token_buffer, TYPE_MODE (type));\n+\t\tif (REAL_VALUE_ISINF (value) && pedantic)\n \t\t  pedwarn (\"floating point number exceeds range of `float'\");\n \t\tgarbage_chars = -1;\n \t\tbreak;\n \n \t      case 'l': case 'L':\n \t\ttype = long_double_type_node;\n+\t\tvalue = REAL_VALUE_ATOF (token_buffer, TYPE_MODE (type));\n+\t\tif (REAL_VALUE_ISINF (value) && pedantic)\n+\t\t  pedwarn (\n+\t\t      \"floating point number exceeds range of `long double'\");\n \t\tgarbage_chars = -1;\n \t\tbreak;\n \n@@ -1436,7 +1427,28 @@ yylex ()\n \t\t  error (\"more than one `i' or `j' in numeric constant\");\n \t\timag = 1;\n \t\tgarbage_chars = -1;\n+\t\tbreak;\n+\n+              default:\n+\t\tvalue = REAL_VALUE_ATOF (token_buffer, TYPE_MODE (type));\n+\t\tif (REAL_VALUE_ISINF (value) && pedantic)\n+\t\t  pedwarn (\"floating point number exceeds range of `double'\");\n \t      }\n+\t    set_float_handler (NULL_PTR);\n+\t    }\n+#ifdef ERANGE\n+\t    if (errno == ERANGE && !flag_traditional && pedantic)\n+\t      {\n+  \t\t/* ERANGE is also reported for underflow,\n+  \t\t   so test the value to distinguish overflow from that.  */\n+\t\tif (REAL_VALUES_LESS (dconst1, value)\n+\t\t    || REAL_VALUES_LESS (value, dconstm1))\n+\t\t  {\n+\t\t    pedwarn (\"floating point number exceeds range of `double'\");\n+\t\t    exceeds_double = 1;\n+\t\t  }\n+\t      }\n+#endif\n \t    /* Note: garbage_chars is -1 if first char is *not* garbage.  */\n \t    while (isalnum (c) || c == '.' || c == '_'\n \t\t   || (!flag_traditional && (c == '+' || c == '-')"}]}