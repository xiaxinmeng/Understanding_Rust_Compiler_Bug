{"sha": "44f46885959d501929eeca3d3618db6db6d50c77", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDRmNDY4ODU5NTlkNTAxOTI5ZWVjYTNkMzYxOGRiNmRiNmQ1MGM3Nw==", "commit": {"author": {"name": "Tim Shen", "email": "timshen@google.com", "date": "2016-12-06T11:17:56Z"}, "committer": {"name": "Tim Shen", "email": "timshen@gcc.gnu.org", "date": "2016-12-06T11:17:56Z"}, "message": "variant (__erased_use_alloc_ctor, [...]): Remove uses-allocator related functions.\n\n\t* include/std/variant (__erased_use_alloc_ctor,\n\t_Variant_base::_Variant_base, variant::variant): Remove uses-allocator\n\trelated functions.\n\t* testsuite/20_util/variant/compile.cc: Remove related tests.\n\t* testsuite/20_util/variant/run.cc: Remove related tests.\n\nFrom-SVN: r243292", "tree": {"sha": "2e78cad08810ad114d580c1615356cce2bfcdac1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e78cad08810ad114d580c1615356cce2bfcdac1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/44f46885959d501929eeca3d3618db6db6d50c77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44f46885959d501929eeca3d3618db6db6d50c77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44f46885959d501929eeca3d3618db6db6d50c77", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44f46885959d501929eeca3d3618db6db6d50c77/comments", "author": {"login": "timshen91", "id": 1157432, "node_id": "MDQ6VXNlcjExNTc0MzI=", "avatar_url": "https://avatars.githubusercontent.com/u/1157432?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timshen91", "html_url": "https://github.com/timshen91", "followers_url": "https://api.github.com/users/timshen91/followers", "following_url": "https://api.github.com/users/timshen91/following{/other_user}", "gists_url": "https://api.github.com/users/timshen91/gists{/gist_id}", "starred_url": "https://api.github.com/users/timshen91/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timshen91/subscriptions", "organizations_url": "https://api.github.com/users/timshen91/orgs", "repos_url": "https://api.github.com/users/timshen91/repos", "events_url": "https://api.github.com/users/timshen91/events{/privacy}", "received_events_url": "https://api.github.com/users/timshen91/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b6f684ae25e66e3f9ad40c29af8b42f67421652e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6f684ae25e66e3f9ad40c29af8b42f67421652e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6f684ae25e66e3f9ad40c29af8b42f67421652e"}], "stats": {"total": 215, "additions": 8, "deletions": 207}, "files": [{"sha": "ecda02675cf1bc08a5791fb08322d5e80ec4626a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44f46885959d501929eeca3d3618db6db6d50c77/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44f46885959d501929eeca3d3618db6db6d50c77/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=44f46885959d501929eeca3d3618db6db6d50c77", "patch": "@@ -1,3 +1,11 @@\n+2016-12-07  Tim Shen  <timshen@google.com>\n+\n+\t* include/std/variant (__erased_use_alloc_ctor,\n+\t_Variant_base::_Variant_base, variant::variant): Remove uses-allocator\n+\trelated functions.\n+\t* testsuite/20_util/variant/compile.cc: Remove related tests.\n+\t* testsuite/20_util/variant/run.cc: Remove related tests.\n+\n 2016-12-06  Aditya Kumar  <hiraditya@msn.com>\n \n \t* src/c++11/shared_ptr.cc (_Sp_locker::_Sp_locker(const void* p)): Add"}, {"sha": "32c0dc3c07ae2303286a063ea868cc54aaaada0c", "filename": "libstdc++-v3/include/std/variant", "status": "modified", "additions": 0, "deletions": 132, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44f46885959d501929eeca3d3618db6db6d50c77/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44f46885959d501929eeca3d3618db6db6d50c77/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant?ref=44f46885959d501929eeca3d3618db6db6d50c77", "patch": "@@ -40,7 +40,6 @@\n #include <bits/enable_special_members.h>\n #include <bits/functexcept.h>\n #include <bits/move.h>\n-#include <bits/uses_allocator.h>\n #include <bits/functional_hash.h>\n \n namespace std _GLIBCXX_VISIBILITY(default)\n@@ -202,14 +201,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     __erased_ctor(void* __lhs, void* __rhs)\n     { ::new (__lhs) decay_t<_Lhs>(__get_alternative<_Rhs>(__rhs)); }\n \n-  template<typename _Alloc, typename _Lhs, typename _Rhs>\n-    constexpr void\n-    __erased_use_alloc_ctor(const _Alloc& __a, void* __lhs, void* __rhs)\n-    {\n-      __uses_allocator_construct(__a, static_cast<decay_t<_Lhs>*>(__lhs),\n-\t\t\t\t __get_alternative<_Rhs>(__rhs));\n-    }\n-\n   // TODO: Find a potential chance to reuse this accross the project.\n   template<typename _Tp>\n     constexpr void\n@@ -353,47 +344,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t: _Storage(__i, std::forward<_Args>(__args)...), _M_index(_Np)\n \t{ }\n \n-      template<typename _Alloc>\n-\t_Variant_base(const _Alloc& __a, const _Variant_base& __rhs)\n-\t: _Storage(), _M_index(__rhs._M_index)\n-\t{\n-\t  if (__rhs._M_valid())\n-\t    {\n-\t      static constexpr void\n-\t      (*_S_vtable[])(const _Alloc&, void*, void*) =\n-\t\t{ &__erased_use_alloc_ctor<_Alloc, __storage<_Types>&,\n-\t\t\t\t\t   const __storage<_Types>&>... };\n-\t      _S_vtable[__rhs._M_index](__a, _M_storage(), __rhs._M_storage());\n-\t    }\n-\t}\n-\n-      template<typename _Alloc>\n-\t_Variant_base(const _Alloc& __a, _Variant_base&& __rhs)\n-\t: _Storage(), _M_index(__rhs._M_index)\n-\t{\n-\t  if (__rhs._M_valid())\n-\t    {\n-\t      static constexpr void\n-\t      (*_S_vtable[])(const _Alloc&, void*, void*) =\n-\t\t{ &__erased_use_alloc_ctor<_Alloc, __storage<_Types>&,\n-\t\t\t\t\t   __storage<_Types>&&>... };\n-\t      _S_vtable[__rhs._M_index](__a, _M_storage(), __rhs._M_storage());\n-\t    }\n-\t}\n-\n-      template<typename _Alloc, size_t _Np, typename... _Args>\n-\tconstexpr explicit\n-\t_Variant_base(const _Alloc& __a, in_place_index_t<_Np>,\n-\t\t      _Args&&... __args)\n-\t: _Storage(), _M_index(_Np)\n-\t{\n-\t  using _Storage =\n-\t    __storage<variant_alternative_t<_Np, variant<_Types...>>>;\n-\t  __uses_allocator_construct(__a, static_cast<_Storage*>(_M_storage()),\n-\t\t\t\t     std::forward<_Args>(__args)...);\n-\t  __glibcxx_assert(_M_index == _Np);\n-\t}\n-\n       _Variant_base&\n       operator=(const _Variant_base& __rhs)\n       {\n@@ -1033,84 +983,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_Default_ctor_enabler(_Enable_default_constructor_tag{})\n \t{ __glibcxx_assert(index() == _Np); }\n \n-      template<typename _Alloc,\n-\t       typename = enable_if_t<\n-\t\t __is_uses_allocator_constructible_v<__to_type<0>, _Alloc>>>\n-\tvariant(allocator_arg_t, const _Alloc& __a)\n-\t: variant(allocator_arg, __a, in_place_index<0>)\n-\t{ }\n-\n-      template<typename _Alloc,\n-\t       typename = enable_if_t<__and_<__is_uses_allocator_constructible<\n-\t\t _Types, _Alloc,\n-\t\t add_lvalue_reference_t<add_const_t<_Types>>>...>::value>>\n-\tvariant(allocator_arg_t, const _Alloc& __a, const variant& __rhs)\n-\t: _Base(__a, __rhs),\n-\t_Default_ctor_enabler(_Enable_default_constructor_tag{})\n-\t{ }\n-\n-      template<typename _Alloc,\n-\t       typename = enable_if_t<__and_<\n-\t\t __is_uses_allocator_constructible<\n-\t\t   _Types, _Alloc, add_rvalue_reference_t<_Types>>...>::value>>\n-\tvariant(allocator_arg_t, const _Alloc& __a, variant&& __rhs)\n-\t: _Base(__a, std::move(__rhs)),\n-\t_Default_ctor_enabler(_Enable_default_constructor_tag{})\n-\t{ }\n-\n-      template<typename _Alloc, typename _Tp,\n-\t       typename = enable_if_t<\n-\t\t __exactly_once<__accepted_type<_Tp&&>>\n-\t\t && __is_uses_allocator_constructible_v<\n-\t\t   __accepted_type<_Tp&&>, _Alloc, _Tp&&>\n-\t\t && !is_same_v<decay_t<_Tp>, variant>, variant&>>\n-\tvariant(allocator_arg_t, const _Alloc& __a, _Tp&& __t)\n-\t: variant(allocator_arg, __a, in_place_index<__accepted_index<_Tp&&>>,\n-\t\t  std::forward<_Tp>(__t))\n-\t{ __glibcxx_assert(holds_alternative<__accepted_type<_Tp&&>>(*this)); }\n-\n-      template<typename _Alloc, typename _Tp, typename... _Args,\n-\t       typename = enable_if_t<\n-\t\t __exactly_once<_Tp>\n-\t\t && __is_uses_allocator_constructible_v<\n-\t\t   _Tp, _Alloc, _Args&&...>>>\n-\tvariant(allocator_arg_t, const _Alloc& __a, in_place_type_t<_Tp>,\n-\t\t_Args&&... __args)\n-\t: variant(allocator_arg, __a, in_place_index<__index_of<_Tp>>,\n-\t\t  std::forward<_Args>(__args)...)\n-\t{ __glibcxx_assert(holds_alternative<_Tp>(*this)); }\n-\n-      template<typename _Alloc, typename _Tp, typename _Up, typename... _Args,\n-\t       typename = enable_if_t<\n-\t\t __exactly_once<_Tp>\n-\t\t && __is_uses_allocator_constructible_v<\n-\t\t   _Tp, _Alloc, initializer_list<_Up>&, _Args&&...>>>\n-\tvariant(allocator_arg_t, const _Alloc& __a, in_place_type_t<_Tp>,\n-\t\tinitializer_list<_Up> __il, _Args&&... __args)\n-\t: variant(allocator_arg, __a, in_place_index<__index_of<_Tp>>, __il,\n-\t\t  std::forward<_Args>(__args)...)\n-\t{ __glibcxx_assert(holds_alternative<_Tp>(*this)); }\n-\n-      template<typename _Alloc, size_t _Np, typename... _Args,\n-\t       typename = enable_if_t<\n-\t\t __is_uses_allocator_constructible_v<\n-\t\t   __to_type<_Np>, _Alloc, _Args&&...>>>\n-\tvariant(allocator_arg_t, const _Alloc& __a, in_place_index_t<_Np>,\n-\t\t_Args&&... __args)\n-\t: _Base(__a, in_place_index<_Np>, std::forward<_Args>(__args)...),\n-\t_Default_ctor_enabler(_Enable_default_constructor_tag{})\n-\t{ __glibcxx_assert(index() == _Np); }\n-\n-      template<typename _Alloc, size_t _Np, typename _Up, typename... _Args,\n-\t       typename = enable_if_t<\n-\t\t __is_uses_allocator_constructible_v<\n-\t\t   __to_type<_Np>, _Alloc, initializer_list<_Up>&, _Args&&...>>>\n-\tvariant(allocator_arg_t, const _Alloc& __a, in_place_index_t<_Np>,\n-\t\tinitializer_list<_Up> __il, _Args&&... __args)\n-\t: _Base(__a, in_place_index<_Np>, __il, std::forward<_Args>(__args)...),\n-\t_Default_ctor_enabler(_Enable_default_constructor_tag{})\n-\t{ __glibcxx_assert(index() == _Np); }\n-\n       ~variant() = default;\n \n       variant& operator=(const variant&) = default;\n@@ -1300,10 +1172,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t   __detail::__variant::__get_storage(__variants)...);\n     }\n \n-  template<typename... _Types, typename _Alloc>\n-    struct uses_allocator<variant<_Types...>, _Alloc>\n-    : true_type { };\n-\n   template<typename... _Types>\n     struct hash<variant<_Types...>>\n     : private __poison_hash<remove_const_t<_Types>>..."}, {"sha": "a67b651586b5fff55529b5b1544ebbe4479fabe2", "filename": "libstdc++-v3/testsuite/20_util/variant/compile.cc", "status": "modified", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44f46885959d501929eeca3d3618db6db6d50c77/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Fcompile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44f46885959d501929eeca3d3618db6db6d50c77/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Fcompile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Fcompile.cc?ref=44f46885959d501929eeca3d3618db6db6d50c77", "patch": "@@ -117,31 +117,6 @@ void in_place_type_ctor()\n   static_assert(!is_constructible_v<variant<string, string>, in_place_type_t<string>, const char*>, \"\");\n }\n \n-void uses_alloc_ctors()\n-{\n-  std::allocator<char> alloc;\n-  variant<int> a(allocator_arg, alloc);\n-  static_assert(!is_constructible_v<variant<AllDeleted>, allocator_arg_t, std::allocator<char>>, \"\");\n-  {\n-    variant<string, int> b(allocator_arg, alloc, \"a\");\n-    static_assert(!is_constructible_v<variant<string, string>, allocator_arg_t, std::allocator<char>, const char*>, \"\");\n-  }\n-  {\n-    variant<string, int> b(allocator_arg, alloc, in_place_index<0>, \"a\");\n-    variant<string, string> c(allocator_arg, alloc, in_place_index<1>, \"a\");\n-  }\n-  {\n-    variant<string, int> b(allocator_arg, alloc, in_place_index<0>, {'a'});\n-    variant<string, string> c(allocator_arg, alloc, in_place_index<1>, {'a'});\n-  }\n-  {\n-    variant<int, string, int> b(allocator_arg, alloc, in_place_type<string>, \"a\");\n-  }\n-  {\n-    variant<int, string, int> b(allocator_arg, alloc, in_place_type<string>, {'a'});\n-  }\n-}\n-\n void dtor()\n {\n   static_assert(is_destructible_v<variant<int, string>>, \"\");\n@@ -324,9 +299,7 @@ namespace adl_trap\n void test_adl()\n {\n    using adl_trap::X;\n-   using std::allocator_arg;\n    X x;\n-   std::allocator<int> a;\n    std::initializer_list<int> il;\n    adl_trap::Visitor vis;\n \n@@ -339,11 +312,6 @@ void test_adl()\n    variant<X> v2{in_place_type<X>, x};\n    variant<X> v3{in_place_index<0>, il, x};\n    variant<X> v4{in_place_type<X>, il, x};\n-   variant<X> v5{allocator_arg, a, in_place_index<0>, x};\n-   variant<X> v6{allocator_arg, a, in_place_type<X>, x};\n-   variant<X> v7{allocator_arg, a, in_place_index<0>, il, x};\n-   variant<X> v8{allocator_arg, a, in_place_type<X>, il, x};\n-   variant<X> v9{allocator_arg, a, in_place_type<X>, 1};\n }\n \n void test_variant_alternative() {"}, {"sha": "fb5d7c441a05dec010767a948bfd866f4be5992c", "filename": "libstdc++-v3/testsuite/20_util/variant/run.cc", "status": "modified", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44f46885959d501929eeca3d3618db6db6d50c77/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Frun.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44f46885959d501929eeca3d3618db6db6d50c77/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Frun.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Frun.cc?ref=44f46885959d501929eeca3d3618db6db6d50c77", "patch": "@@ -160,48 +160,6 @@ void in_place_type_ctor()\n   }\n }\n \n-struct UsesAllocatable\n-{\n-  template<typename Alloc>\n-    UsesAllocatable(std::allocator_arg_t, const Alloc& a)\n-    : d(0), a(static_cast<const void*>(&a)) { }\n-\n-  template<typename Alloc>\n-    UsesAllocatable(std::allocator_arg_t, const Alloc& a, const UsesAllocatable&)\n-    : d(1), a(static_cast<const void*>(&a)) { }\n-\n-  template<typename Alloc>\n-    UsesAllocatable(std::allocator_arg_t, const Alloc& a, UsesAllocatable&&)\n-    : d(2), a(static_cast<const void*>(&a)) { }\n-\n-  int d;\n-  const void* a;\n-};\n-\n-namespace std\n-{\n-  template<>\n-    struct uses_allocator<UsesAllocatable, std::allocator<char>> : true_type { };\n-}\n-\n-void uses_allocator_ctor()\n-{\n-  std::allocator<char> a;\n-  variant<UsesAllocatable> v(std::allocator_arg, a);\n-  VERIFY(get<0>(v).d == 0);\n-  VERIFY(get<0>(v).a == &a);\n-  {\n-    variant<UsesAllocatable> u(std::allocator_arg, a, v);\n-    VERIFY(get<0>(u).d == 1);\n-    VERIFY(get<0>(u).a == &a);\n-  }\n-  {\n-    variant<UsesAllocatable> u(std::allocator_arg, a, std::move(v));\n-    VERIFY(get<0>(u).d == 2);\n-    VERIFY(get<0>(u).a == &a);\n-  }\n-}\n-\n void emplace()\n {\n   variant<int, string> v;\n@@ -450,7 +408,6 @@ int main()\n   arbitrary_ctor();\n   in_place_index_ctor();\n   in_place_type_ctor();\n-  uses_allocator_ctor();\n   copy_assign();\n   move_assign();\n   arbitrary_assign();"}]}