{"sha": "9c6f74cd3f4fa7711ab1eb9e7a176450aa699e54", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWM2Zjc0Y2QzZjRmYTc3MTFhYjFlYjllN2ExNzY0NTBhYTY5OWU1NA==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2003-08-20T15:30:04Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2003-08-20T15:30:04Z"}, "message": "natReference.cc (finalize_referred_to_object): Set `list->reference' to DELETED_REFERENCE when removing dead object.\n\n\t* java/lang/ref/natReference.cc (finalize_referred_to_object):\n\tSet `list->reference' to DELETED_REFERENCE when removing dead\n\tobject.\n\t(find_slot): Added an assert.\n\t(DELETED_REFERENCE): New define.\n\t(add_to_hash): Check for DELETED_REFERENCE.\n\t(remove_from_hash): Just return if found slot isn't ours.\n\nFrom-SVN: r70599", "tree": {"sha": "bc5a1f635f7635aa368beb130e54b30f5f4ec3d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc5a1f635f7635aa368beb130e54b30f5f4ec3d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c6f74cd3f4fa7711ab1eb9e7a176450aa699e54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c6f74cd3f4fa7711ab1eb9e7a176450aa699e54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c6f74cd3f4fa7711ab1eb9e7a176450aa699e54", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c6f74cd3f4fa7711ab1eb9e7a176450aa699e54/comments", "author": null, "committer": null, "parents": [{"sha": "2510de8d0bcb4ced7652762cbdcbe3fd624519e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2510de8d0bcb4ced7652762cbdcbe3fd624519e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2510de8d0bcb4ced7652762cbdcbe3fd624519e4"}], "stats": {"total": 27, "additions": 24, "deletions": 3}, "files": [{"sha": "c310fb8738181b48eb3fa741756678e4bd65545d", "filename": "libjava/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c6f74cd3f4fa7711ab1eb9e7a176450aa699e54/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c6f74cd3f4fa7711ab1eb9e7a176450aa699e54/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=9c6f74cd3f4fa7711ab1eb9e7a176450aa699e54", "patch": "@@ -1,3 +1,13 @@\n+2003-08-20  Tom Tromey  <tromey@redhat.com>\n+\n+\t* java/lang/ref/natReference.cc (finalize_referred_to_object):\n+\tSet `list->reference' to DELETED_REFERENCE when removing dead\n+\tobject.\n+\t(find_slot): Added an assert.\n+\t(DELETED_REFERENCE): New define.\n+\t(add_to_hash): Check for DELETED_REFERENCE.\n+\t(remove_from_hash): Just return if found slot isn't ours.\n+\n 2003-08-19  Andrew Haley  <aph@redhat.com>\n \n \t* prims.cc (unblock_signal): New function."}, {"sha": "a1550f69399aa7c515334dc15eb08b11ab003c65", "filename": "libjava/java/lang/ref/natReference.cc", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c6f74cd3f4fa7711ab1eb9e7a176450aa699e54/libjava%2Fjava%2Flang%2Fref%2FnatReference.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c6f74cd3f4fa7711ab1eb9e7a176450aa699e54/libjava%2Fjava%2Flang%2Fref%2FnatReference.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2Fref%2FnatReference.cc?ref=9c6f74cd3f4fa7711ab1eb9e7a176450aa699e54", "patch": "@@ -1,6 +1,6 @@\n // natReference.cc - Native code for References\n \n-/* Copyright (C) 2001, 2002  Free Software Foundation\n+/* Copyright (C) 2001, 2002, 2003  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -67,6 +67,8 @@ static int hash_count = 0;\n // Number of slots total in HASH.  Must be power of 2.\n static int hash_size = 0;\n \n+#define DELETED_REFERENCE  ((jobject) -1)\n+\n static object_list *\n find_slot (jobject key)\n {\n@@ -89,7 +91,10 @@ find_slot (jobject key)\n \t    return &hash[deleted_index];\n \t}\n       else if (ptr->weight == DELETED)\n-\tdeleted_index = index;\n+\t{\n+\t  deleted_index = index;\n+\t  JvAssert (ptr->reference == DELETED_REFERENCE);\n+\t}\n       index = (index + step) & (hash_size - 1);\n       JvAssert (index != start_index);\n     }\n@@ -132,6 +137,11 @@ remove_from_hash (jobject obj)\n   java::lang::ref::Reference *ref\n     = reinterpret_cast<java::lang::ref::Reference *> (obj);\n   object_list *head = find_slot (ref->copy);\n+\n+  // We might have found a new slot.  We can just ignore that here.\n+  if (head->reference != ref->copy)\n+    return;\n+\n   object_list **link = &head->next;\n   head = head->next;\n \n@@ -168,7 +178,7 @@ add_to_hash (java::lang::ref::Reference *the_reference)\n   // Use `copy' here because the `referent' field has been cleared.\n   jobject referent = the_reference->copy;\n   object_list *item = find_slot (referent);\n-  if (item->reference == NULL)\n+  if (item->reference == NULL || item->reference == DELETED_REFERENCE)\n     {\n       // New item, so make an entry for the finalizer.\n       item->reference = referent;\n@@ -217,6 +227,7 @@ finalize_referred_to_object (jobject obj)\n       // run, all the object's references have been processed, and the\n       // object is unreachable.  There is, at long last, no way to\n       // resurrect it.\n+      list->reference = DELETED_REFERENCE;\n       list->weight = DELETED;\n       --hash_count;\n       return;"}]}