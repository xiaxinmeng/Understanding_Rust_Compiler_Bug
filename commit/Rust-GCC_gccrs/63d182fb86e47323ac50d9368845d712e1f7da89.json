{"sha": "63d182fb86e47323ac50d9368845d712e1f7da89", "node_id": "C_kwDOANBUbNoAKDYzZDE4MmZiODZlNDczMjNhYzUwZDkzNjg4NDVkNzEyZTFmN2RhODk", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2021-01-21T18:30:47Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2022-07-18T20:40:10Z"}, "message": "libstdc++: Enhance branching in std::inplace_merge and std::stable_sort\n\nWhen we manage to allocate a buffer of the expected size we can simplify the code to\nperform the expected algorithm.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/stl_algo.h\n\t(__merge_adaptive): Adapt to merge only when buffer is large enough..\n\t(__merge_adaptive_resize): New, adapt merge when buffer is too small.\n\t(__inplace_merge): Adapt, use latter.\n\t(__stable_sort_adaptive): Adapt to sort only when buffer is large enough.\n\t(__stable_sort_adaptive_resize): New, adapt sort when buffer is too small.\n\t(__stable_sort): Adapt, use latter.", "tree": {"sha": "4e72314fe5acae3bb8e356d16d7629c32a87ecb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e72314fe5acae3bb8e356d16d7629c32a87ecb3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/63d182fb86e47323ac50d9368845d712e1f7da89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63d182fb86e47323ac50d9368845d712e1f7da89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63d182fb86e47323ac50d9368845d712e1f7da89", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63d182fb86e47323ac50d9368845d712e1f7da89/comments", "author": null, "committer": null, "parents": [{"sha": "5e47c9333df6df1aa9da861f07e68f985d7d28fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e47c9333df6df1aa9da861f07e68f985d7d28fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e47c9333df6df1aa9da861f07e68f985d7d28fb"}], "stats": {"total": 104, "additions": 68, "deletions": 36}, "files": [{"sha": "c60780545140a9a62b4faec0a65aeb9429169c72", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 68, "deletions": 36, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63d182fb86e47323ac50d9368845d712e1f7da89/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63d182fb86e47323ac50d9368845d712e1f7da89/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=63d182fb86e47323ac50d9368845d712e1f7da89", "patch": "@@ -2390,28 +2390,42 @@ _GLIBCXX_END_INLINE_ABI_NAMESPACE(_V2)\n     }\n \n   /// This is a helper function for the merge routines.\n-  template<typename _BidirectionalIterator, typename _Distance, \n+  template<typename _BidirectionalIterator, typename _Distance,\n \t   typename _Pointer, typename _Compare>\n     void\n     __merge_adaptive(_BidirectionalIterator __first,\n \t\t     _BidirectionalIterator __middle,\n \t\t     _BidirectionalIterator __last,\n \t\t     _Distance __len1, _Distance __len2,\n-\t\t     _Pointer __buffer, _Distance __buffer_size,\n-\t\t     _Compare __comp)\n+\t\t     _Pointer __buffer, _Compare __comp)\n     {\n-      if (__len1 <= __len2 && __len1 <= __buffer_size)\n+      if (__len1 <= __len2)\n \t{\n \t  _Pointer __buffer_end = _GLIBCXX_MOVE3(__first, __middle, __buffer);\n \t  std::__move_merge_adaptive(__buffer, __buffer_end, __middle, __last,\n \t\t\t\t     __first, __comp);\n \t}\n-      else if (__len2 <= __buffer_size)\n+      else\n \t{\n \t  _Pointer __buffer_end = _GLIBCXX_MOVE3(__middle, __last, __buffer);\n \t  std::__move_merge_adaptive_backward(__first, __middle, __buffer,\n \t\t\t\t\t      __buffer_end, __last, __comp);\n \t}\n+    }\n+\n+  template<typename _BidirectionalIterator, typename _Distance,\n+\t   typename _Pointer, typename _Compare>\n+    void\n+    __merge_adaptive_resize(_BidirectionalIterator __first,\n+\t\t\t    _BidirectionalIterator __middle,\n+\t\t\t    _BidirectionalIterator __last,\n+\t\t\t    _Distance __len1, _Distance __len2,\n+\t\t\t    _Pointer __buffer, _Distance __buffer_size,\n+\t\t\t    _Compare __comp)\n+    {\n+      if (__len1 <= __buffer_size || __len2 <= __buffer_size)\n+\tstd::__merge_adaptive(__first, __middle, __last,\n+\t\t\t      __len1, __len2, __buffer, __comp);\n       else\n \t{\n \t  _BidirectionalIterator __first_cut = __first;\n@@ -2439,14 +2453,14 @@ _GLIBCXX_END_INLINE_ABI_NAMESPACE(_V2)\n \n \t  _BidirectionalIterator __new_middle\n \t    = std::__rotate_adaptive(__first_cut, __middle, __second_cut,\n-\t\t\t\t     __len1 - __len11, __len22, __buffer,\n-\t\t\t\t     __buffer_size);\n-\t  std::__merge_adaptive(__first, __first_cut, __new_middle, __len11,\n-\t\t\t\t__len22, __buffer, __buffer_size, __comp);\n-\t  std::__merge_adaptive(__new_middle, __second_cut, __last,\n-\t\t\t\t__len1 - __len11,\n-\t\t\t\t__len2 - __len22, __buffer,\n-\t\t\t\t__buffer_size, __comp);\n+\t\t\t\t     __len1 - __len11, __len22,\n+\t\t\t\t     __buffer, __buffer_size);\n+\t  std::__merge_adaptive_resize(__first, __first_cut, __new_middle,\n+\t\t\t\t       __len11, __len22,\n+\t\t\t\t       __buffer, __buffer_size, __comp);\n+\t  std::__merge_adaptive_resize(__new_middle, __second_cut, __last,\n+\t\t\t\t       __len1 - __len11, __len2 - __len22,\n+\t\t\t\t       __buffer, __buffer_size, __comp);\n \t}\n     }\n \n@@ -2524,11 +2538,14 @@ _GLIBCXX_END_INLINE_ABI_NAMESPACE(_V2)\n       // [first,middle) and [middle,last).\n       _TmpBuf __buf(__first, std::min(__len1, __len2));\n \n-      if (__buf.begin() == 0)\n+      if (__builtin_expect(__buf.size() == __buf.requested_size(), true))\n+\tstd::__merge_adaptive\n+\t  (__first, __middle, __last, __len1, __len2, __buf.begin(), __comp);\n+      else if (__builtin_expect(__buf.begin() == 0, false))\n \tstd::__merge_without_buffer\n \t  (__first, __middle, __last, __len1, __len2, __comp);\n       else\n-\tstd::__merge_adaptive\n+\tstd::__merge_adaptive_resize\n \t  (__first, __middle, __last, __len1, __len2, __buf.begin(),\n \t   _DistanceType(__buf.size()), __comp);\n     }\n@@ -2709,34 +2726,46 @@ _GLIBCXX_END_INLINE_ABI_NAMESPACE(_V2)\n \t}\n     }\n \n-  template<typename _RandomAccessIterator, typename _Pointer,\n-\t   typename _Distance, typename _Compare>\n+  template<typename _RandomAccessIterator, typename _Pointer, typename _Compare>\n     void\n     __stable_sort_adaptive(_RandomAccessIterator __first,\n+\t\t\t   _RandomAccessIterator __middle,\n \t\t\t   _RandomAccessIterator __last,\n-\t\t\t   _Pointer __buffer, _Distance __buffer_size,\n-\t\t\t   _Compare __comp)\n+\t\t\t   _Pointer __buffer, _Compare __comp)\n+    {\n+      std::__merge_sort_with_buffer(__first, __middle, __buffer, __comp);\n+      std::__merge_sort_with_buffer(__middle, __last, __buffer, __comp);\n+\n+      std::__merge_adaptive(__first, __middle, __last,\n+\t\t\t    __middle - __first, __last - __middle,\n+\t\t\t    __buffer, __comp);\n+    }\n+\n+  template<typename _RandomAccessIterator, typename _Pointer,\n+\t   typename _Distance, typename _Compare>\n+    void\n+    __stable_sort_adaptive_resize(_RandomAccessIterator __first,\n+\t\t\t\t  _RandomAccessIterator __last,\n+\t\t\t\t  _Pointer __buffer, _Distance __buffer_size,\n+\t\t\t\t  _Compare __comp)\n     {\n       const _Distance __len = (__last - __first + 1) / 2;\n       const _RandomAccessIterator __middle = __first + __len;\n       if (__len > __buffer_size)\n \t{\n-\t  std::__stable_sort_adaptive(__first, __middle, __buffer,\n-\t\t\t\t      __buffer_size, __comp);\n-\t  std::__stable_sort_adaptive(__middle, __last, __buffer,\n-\t\t\t\t      __buffer_size, __comp);\n+\t  std::__stable_sort_adaptive_resize(__first, __middle, __buffer,\n+\t\t\t\t\t     __buffer_size, __comp);\n+\t  std::__stable_sort_adaptive_resize(__middle, __last, __buffer,\n+\t\t\t\t\t     __buffer_size, __comp);\n+\t  std::__merge_adaptive_resize(__first, __middle, __last,\n+\t\t\t\t       _Distance(__middle - __first),\n+\t\t\t\t       _Distance(__last - __middle),\n+\t\t\t\t       __buffer, __buffer_size,\n+\t\t\t\t       __comp);\n \t}\n       else\n-\t{\n-\t  std::__merge_sort_with_buffer(__first, __middle, __buffer, __comp);\n-\t  std::__merge_sort_with_buffer(__middle, __last, __buffer, __comp);\n-\t}\n-\n-      std::__merge_adaptive(__first, __middle, __last,\n-\t\t\t    _Distance(__middle - __first),\n-\t\t\t    _Distance(__last - __middle),\n-\t\t\t    __buffer, __buffer_size,\n-\t\t\t    __comp);\n+\tstd::__stable_sort_adaptive(__first, __middle, __last,\n+\t\t\t\t    __buffer, __comp);\n     }\n \n   /// This is a helper function for the stable sorting routines.\n@@ -4996,11 +5025,14 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n       // so the buffer only needs to fit half the range at once.\n       _TmpBuf __buf(__first, (__last - __first + 1) / 2);\n \n-      if (__buf.begin() == 0)\n+      if (__builtin_expect(__buf.requested_size() == __buf.size(), true))\n+\tstd::__stable_sort_adaptive(__first, __first + __buf.size(), __last,\n+\t\t\t\t    __buf.begin(), __comp);\n+      else if (__builtin_expect(__buf.begin() == 0, false))\n \tstd::__inplace_stable_sort(__first, __last, __comp);\n       else\n-\tstd::__stable_sort_adaptive(__first, __last, __buf.begin(),\n-\t\t\t\t    _DistanceType(__buf.size()), __comp);\n+\tstd::__stable_sort_adaptive_resize(__first, __last, __buf.begin(),\n+\t\t\t\t\t   _DistanceType(__buf.size()), __comp);\n     }\n \n   /**"}]}