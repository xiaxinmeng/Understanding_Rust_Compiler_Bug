{"sha": "2c83be0cf08fc0b535aec0211f599acc38fa076e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmM4M2JlMGNmMDhmYzBiNTM1YWVjMDIxMWY1OTlhY2MzOGZhMDc2ZQ==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2005-04-01T16:16:38Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2005-04-01T16:16:38Z"}, "message": "c-decl.c (validate_proto_after_old_defn): Look at TYPE_MAIN_VARIANT of argument types.\n\n\t* c-decl.c (validate_proto_after_old_defn): Look at\n\tTYPE_MAIN_VARIANT of argument types.\n\ntestsuite:\n\t* gcc.dg/old-style-then-proto-1.c: New test.\n\nFrom-SVN: r97403", "tree": {"sha": "1a4fa012965c447b6382b9419014c82666144cec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a4fa012965c447b6382b9419014c82666144cec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2c83be0cf08fc0b535aec0211f599acc38fa076e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c83be0cf08fc0b535aec0211f599acc38fa076e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c83be0cf08fc0b535aec0211f599acc38fa076e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c83be0cf08fc0b535aec0211f599acc38fa076e/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57ecec57492f5f3c32845a9a2cb12ae45dc0da03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57ecec57492f5f3c32845a9a2cb12ae45dc0da03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57ecec57492f5f3c32845a9a2cb12ae45dc0da03"}], "stats": {"total": 60, "additions": 56, "deletions": 4}, "files": [{"sha": "2f3c64f3160b11f1042b023d994e57ef44448093", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c83be0cf08fc0b535aec0211f599acc38fa076e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c83be0cf08fc0b535aec0211f599acc38fa076e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2c83be0cf08fc0b535aec0211f599acc38fa076e", "patch": "@@ -1,3 +1,8 @@\n+2005-04-01  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\t* c-decl.c (validate_proto_after_old_defn): Look at\n+\tTYPE_MAIN_VARIANT of argument types.\n+\n 2005-04-01  Paul Brook  <paul@codesourcery.com>\n \n \t* config/arm/arm.c (thumb_call_via_label): Include space for SP."}, {"sha": "9d82b9a5b2017ed9e5825ef6986e3e8261e53b78", "filename": "gcc/c-decl.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c83be0cf08fc0b535aec0211f599acc38fa076e/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c83be0cf08fc0b535aec0211f599acc38fa076e/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=2c83be0cf08fc0b535aec0211f599acc38fa076e", "patch": "@@ -1043,17 +1043,16 @@ validate_proto_after_old_defn (tree newdecl, tree newtype, tree oldtype)\n   tree newargs, oldargs;\n   int i;\n \n-  /* ??? Elsewhere TYPE_MAIN_VARIANT is not used in this context.  */\n-#define END_OF_ARGLIST(t) (TYPE_MAIN_VARIANT (t) == void_type_node)\n+#define END_OF_ARGLIST(t) ((t) == void_type_node)\n \n   oldargs = TYPE_ACTUAL_ARG_TYPES (oldtype);\n   newargs = TYPE_ARG_TYPES (newtype);\n   i = 1;\n \n   for (;;)\n     {\n-      tree oldargtype = TREE_VALUE (oldargs);\n-      tree newargtype = TREE_VALUE (newargs);\n+      tree oldargtype = TYPE_MAIN_VARIANT (TREE_VALUE (oldargs));\n+      tree newargtype = TYPE_MAIN_VARIANT (TREE_VALUE (newargs));\n \n       if (END_OF_ARGLIST (oldargtype) && END_OF_ARGLIST (newargtype))\n \tbreak;"}, {"sha": "2f207eb36679a8420bde2003de58bbc42ae28c93", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c83be0cf08fc0b535aec0211f599acc38fa076e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c83be0cf08fc0b535aec0211f599acc38fa076e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2c83be0cf08fc0b535aec0211f599acc38fa076e", "patch": "@@ -1,3 +1,7 @@\n+2005-04-01  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/old-style-then-proto-1.c: New test.\n+\n 2005-04-01  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n \n \t* gfortran.fortran-torture/execute/backspace.f90: Check"}, {"sha": "abe02d06378d045efff7a337ae45e89a069ff769", "filename": "gcc/testsuite/gcc.dg/old-style-then-proto-1.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c83be0cf08fc0b535aec0211f599acc38fa076e/gcc%2Ftestsuite%2Fgcc.dg%2Fold-style-then-proto-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c83be0cf08fc0b535aec0211f599acc38fa076e/gcc%2Ftestsuite%2Fgcc.dg%2Fold-style-then-proto-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fold-style-then-proto-1.c?ref=2c83be0cf08fc0b535aec0211f599acc38fa076e", "patch": "@@ -0,0 +1,44 @@\n+/* Test for old-style definition followed by prototype declaration.\n+   Mismatched qualifiers used to be wrongly forbidden.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+void f1() {}\n+void f1(void); /* { dg-warning \"warning: prototype for 'f1' follows non-prototype definition\" } */\n+\n+void f2() {} /* { dg-error \"error: previous definition of 'f2' was here\" } */\n+void f2(int); /* { dg-error \"error: prototype for 'f2' declares more arguments than previous old-style definition\" } */\n+\n+void f3(a) int a; {} /* { dg-error \"error: previous definition of 'f3' was here\" } */\n+void f3(void); /* { dg-error \"error: prototype for 'f3' declares fewer arguments than previous old-style definition\" } */\n+\n+void f4(a) int a; {}\n+void f4(int); /* { dg-warning \"warning: prototype for 'f4' follows non-prototype definition\" } */\n+\n+void f5(a) int a; {} /* { dg-error \"error: previous definition of 'f5' was here\" } */\n+void f5(int, int); /* { dg-error \"error: prototype for 'f5' declares more arguments than previous old-style definition\" } */\n+\n+void f6(a) int a; {} /* { dg-error \"error: previous definition of 'f6' was here\" } */\n+void f6(int, ...); /* { dg-error \"error: conflicting types for 'f6'\" } */\n+\n+void f7(a, b) int a, b; {} /* { dg-error \"error: previous definition of 'f7' was here\" } */\n+void f7(int); /* { dg-error \"error: prototype for 'f7' declares fewer arguments than previous old-style definition\" } */\n+\n+void f8(a, b) int a, b; {} /* { dg-error \"error: previous definition of 'f8' was here\" } */\n+void f8(int, ...); /* { dg-error \"error: conflicting types for 'f8'\" } */\n+\n+void f9(a, b) int a, b; {}\n+void f9(int, int); /* { dg-warning \"warning: prototype for 'f9' follows non-prototype definition\" } */\n+\n+void f10(a, b) int a, b; {} /* { dg-error \"error: previous definition of 'f10' was here\" } */\n+void f10(int, long); /* { dg-error \"error: prototype for 'f10' declares argument 2 with incompatible type\" } */\n+\n+void f11(a, b) int a, b; {} /* { dg-error \"error: previous definition of 'f11' was here\" } */\n+void f11(long, int); /* { dg-error \"error: prototype for 'f11' declares argument 1 with incompatible type\" } */\n+\n+void f12(a, b) const int a; volatile int b; {}\n+void f12(volatile int, const int); /* { dg-warning \"warning: prototype for 'f12' follows non-prototype definition\" } */\n+\n+void f13(a) const int a[2][2]; {} /* { dg-error \"error: previous definition of 'f13' was here\" } */\n+void f13(volatile int [2][2]); /* { dg-error \"error: prototype for 'f13' declares argument 1 with incompatible type\" } */"}]}