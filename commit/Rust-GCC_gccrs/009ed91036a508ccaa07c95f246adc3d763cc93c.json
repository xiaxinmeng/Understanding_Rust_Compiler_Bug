{"sha": "009ed91036a508ccaa07c95f246adc3d763cc93c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDA5ZWQ5MTAzNmE1MDhjY2FhMDdjOTVmMjQ2YWRjM2Q3NjNjYzkzYw==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2003-04-10T08:07:13Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2003-04-10T08:07:13Z"}, "message": "c-common.h (lang_statement_code_p): Remove declaration.\n\n2003-04-09  Steven Bosscher  <steven@gcc.gnu.org>\n\n\t* c-common.h (lang_statement_code_p): Remove declaration.\n\t(statement_code_p): Ditto.\n\t(c_common_stmt_codes): Define; list of c-common statement codes.\n\t(statement_code_p): New extern declaration.\n\t(STATEMENT_CODE_P): Define.\n\t(INIT_STATEMENT_CODES): Define.\n\t* c-common.c (statement_code_p): Kill the function, declare\n\tas an array of bools instead.\n\t(lang_statement_code_p): Remove.\n\t(walk_stmt_tree): Use STATEMENT_CODE_P not statement_code_p.\n\t(c_safe_from_p): Ditto.\n\t* c-objc-common.c (c_objc_common_init): Use INIT_STATEMENT_CODES\n\tto initialize the statement_code_p array.\n\t* tree-inline.c (walk_tree): Use STATEMENT_CODE_P instead of\n\tstatement_code_p.\n\t(copy_tree_r): Ditto.\n\t* cp/cp-tree.h (cp_stmt_codes): Define; list of C++ specific\n\tstatement tree codes.\n\t* cp/lex.c (cxx_init): Add missing print line break.  Use\n\tINIT_STATEMENT_CODES to initialize the statement_code_p array.\n\t* cp/parser.c (cp_parser_statement): Use STATEMENT_CODE_P\n\tinstead of statement_code_p.\n\t* cp/pt.c (tsubst_expr): Ditto.\n\t* cp/tree.c (verify_stmt_tree_r): Ditto.\n\t(cp_statement_code_p): Remove.\n\t(init_tree): Don't set lang_statement_code_p, it's gone.\n\nFrom-SVN: r65422", "tree": {"sha": "1dde01740299a69072dd80110dc8eeb2a9b2789c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1dde01740299a69072dd80110dc8eeb2a9b2789c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/009ed91036a508ccaa07c95f246adc3d763cc93c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/009ed91036a508ccaa07c95f246adc3d763cc93c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/009ed91036a508ccaa07c95f246adc3d763cc93c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/009ed91036a508ccaa07c95f246adc3d763cc93c/comments", "author": null, "committer": null, "parents": [{"sha": "23cac8856600b027fe0397d99dbacb939675c11f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23cac8856600b027fe0397d99dbacb939675c11f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23cac8856600b027fe0397d99dbacb939675c11f"}], "stats": {"total": 159, "additions": 84, "deletions": 75}, "files": [{"sha": "b54a0466ceb6e454a9157ee40a1b12a7fb8162b5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/009ed91036a508ccaa07c95f246adc3d763cc93c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/009ed91036a508ccaa07c95f246adc3d763cc93c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=009ed91036a508ccaa07c95f246adc3d763cc93c", "patch": "@@ -1,3 +1,32 @@\n+2003-04-09  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* c-common.h (lang_statement_code_p): Remove declaration.\n+\t(statement_code_p): Ditto.\n+\t(c_common_stmt_codes): Define; list of c-common statement codes.\n+\t(statement_code_p): New extern declaration.\n+\t(STATEMENT_CODE_P): Define.\n+\t(INIT_STATEMENT_CODES): Define.\n+\t* c-common.c (statement_code_p): Kill the function, declare\n+\tas an array of bools instead.\n+\t(lang_statement_code_p): Remove.\n+\t(walk_stmt_tree): Use STATEMENT_CODE_P not statement_code_p.\n+\t(c_safe_from_p): Ditto.\n+\t* c-objc-common.c (c_objc_common_init): Use INIT_STATEMENT_CODES\n+\tto initialize the statement_code_p array.\n+\t* tree-inline.c (walk_tree): Use STATEMENT_CODE_P instead of\n+\tstatement_code_p.\n+\t(copy_tree_r): Ditto.\n+\t* cp/cp-tree.h (cp_stmt_codes): Define; list of C++ specific\n+\tstatement tree codes.\n+\t* cp/lex.c (cxx_init): Add missing print line break.  Use\n+\tINIT_STATEMENT_CODES to initialize the statement_code_p array.\n+\t* cp/parser.c (cp_parser_statement): Use STATEMENT_CODE_P\n+\tinstead of statement_code_p.\n+\t* cp/pt.c (tsubst_expr): Ditto.\n+\t* cp/tree.c (verify_stmt_tree_r): Ditto.\n+\t(cp_statement_code_p): Remove.\n+\t(init_tree): Don't set lang_statement_code_p, it's gone.\n+\n 2003-04-09  Dan Nicolaescu  <dann@ics.uci.edu>\n \t    Zack Weinberg  <zack@codesourcery.com>\n "}, {"sha": "7048d9a61002f3539a0eede2bdc36be34e998fa0", "filename": "gcc/c-common.c", "status": "modified", "additions": 8, "deletions": 42, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/009ed91036a508ccaa07c95f246adc3d763cc93c/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/009ed91036a508ccaa07c95f246adc3d763cc93c/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=009ed91036a508ccaa07c95f246adc3d763cc93c", "patch": "@@ -187,6 +187,11 @@ enum c_language_kind c_language;\n \n tree c_global_trees[CTI_MAX];\n \n+/* TRUE if a code represents a statement.  The front end init\n+   langhook should take care of initialization of this array.  */\n+\n+bool statement_code_p[MAX_TREE_CODES];\n+\n /* Nonzero if we can read a PCH file now.  */\n \n int allow_pch = 1;\n@@ -682,10 +687,6 @@ tree *ridpointers;\n \n tree (*make_fname_decl)                PARAMS ((tree, int));\n \n-/* If non-NULL, the address of a language-specific function that\n-   returns 1 for language-specific statement codes.  */\n-int (*lang_statement_code_p)           PARAMS ((enum tree_code));\n-\n /* If non-NULL, the address of a language-specific function that takes\n    any action required right before expand_function_end is called.  */\n void (*lang_expand_function_end)       PARAMS ((void));\n@@ -3927,41 +3928,6 @@ expand_tree_builtin (function, params, coerced_params)\n   return NULL_TREE;\n }\n \n-/* Returns nonzero if CODE is the code for a statement.  */\n-\n-int\n-statement_code_p (code)\n-     enum tree_code code;\n-{\n-  switch (code)\n-    {\n-    case CLEANUP_STMT:\n-    case EXPR_STMT:\n-    case COMPOUND_STMT:\n-    case DECL_STMT:\n-    case IF_STMT:\n-    case FOR_STMT:\n-    case WHILE_STMT:\n-    case DO_STMT:\n-    case RETURN_STMT:\n-    case BREAK_STMT:\n-    case CONTINUE_STMT:\n-    case SCOPE_STMT:\n-    case SWITCH_STMT:\n-    case GOTO_STMT:\n-    case LABEL_STMT:\n-    case ASM_STMT:\n-    case FILE_STMT:\n-    case CASE_LABEL:\n-      return 1;\n-\n-    default:\n-      if (lang_statement_code_p)\n-\treturn (*lang_statement_code_p) (code);\n-      return 0;\n-    }\n-}\n-\n /* Walk the statement tree, rooted at *tp.  Apply FUNC to all the\n    sub-trees of *TP in a pre-order traversal.  FUNC is called with the\n    DATA and the address of each sub-tree.  If FUNC returns a non-NULL\n@@ -3997,7 +3963,7 @@ walk_stmt_tree (tp, func, data)\n     return NULL_TREE;\n \n   /* Skip subtrees below non-statement nodes.  */\n-  if (!statement_code_p (TREE_CODE (*tp)))\n+  if (!STATEMENT_CODE_P (TREE_CODE (*tp)))\n     return NULL_TREE;\n \n   /* Call the function.  */\n@@ -4011,7 +3977,7 @@ walk_stmt_tree (tp, func, data)\n   /* FUNC may have modified the tree, recheck that we're looking at a\n      statement node.  */\n   code = TREE_CODE (*tp);\n-  if (!statement_code_p (code))\n+  if (!STATEMENT_CODE_P (code))\n     return NULL_TREE;\n \n   /* Visit the subtrees unless FUNC decided that there was nothing\n@@ -4386,7 +4352,7 @@ c_safe_from_p (target, exp)\n     }\n \n   /* For any statement, we must follow the statement-chain.  */\n-  if (statement_code_p (TREE_CODE (exp)) && TREE_CHAIN (exp))\n+  if (STATEMENT_CODE_P (TREE_CODE (exp)) && TREE_CHAIN (exp))\n     return safe_from_p (target, TREE_CHAIN (exp), /*top_p=*/0);\n \n   /* Assume everything else is safe.  */"}, {"sha": "ed67ce6f7d4b0862ab99e16284a2f2488964705e", "filename": "gcc/c-common.h", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/009ed91036a508ccaa07c95f246adc3d763cc93c/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/009ed91036a508ccaa07c95f246adc3d763cc93c/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=009ed91036a508ccaa07c95f246adc3d763cc93c", "patch": "@@ -305,7 +305,6 @@ struct c_language_function GTY(()) {\n \n /* Language-specific hooks.  */\n \n-extern int (*lang_statement_code_p)             PARAMS ((enum tree_code));\n extern void (*lang_expand_stmt)                 PARAMS ((tree));\n extern void (*lang_expand_decl_stmt)            PARAMS ((tree));\n extern void (*lang_expand_function_end)         PARAMS ((void));\n@@ -326,7 +325,6 @@ extern void add_decl_stmt                       PARAMS ((tree));\n extern tree add_scope_stmt                      PARAMS ((int, int));\n extern void finish_stmt_tree                    PARAMS ((tree *));\n \n-extern int statement_code_p                     PARAMS ((enum tree_code));\n extern tree walk_stmt_tree\t\t\tPARAMS ((tree *,\n \t\t\t\t\t\t\t walk_tree_fn,\n \t\t\t\t\t\t\t void *));\n@@ -1152,6 +1150,28 @@ enum c_tree_code {\n \n #undef DEFTREECODE\n \n+#define c_common_stmt_codes\t\t\t\t\\\n+   CLEANUP_STMT,\tEXPR_STMT,\tCOMPOUND_STMT,\t\\\n+   DECL_STMT,\t\tIF_STMT,\tFOR_STMT,\t\\\n+   WHILE_STMT,\t\tDO_STMT,\tRETURN_STMT,\t\\\n+   BREAK_STMT,\t\tCONTINUE_STMT,\tSCOPE_STMT,\t\\\n+   SWITCH_STMT,\t\tGOTO_STMT,\tLABEL_STMT,\t\\\n+   ASM_STMT,\t\tFILE_STMT,\tCASE_LABEL\n+\n+/* TRUE if a code represents a statement.  The front end init\n+   langhook should take care of initialization of this array.  */\n+extern bool statement_code_p[MAX_TREE_CODES];\n+\n+#define STATEMENT_CODE_P(CODE) statement_code_p[(int) (CODE)]\n+\n+#define INIT_STATEMENT_CODES(STMT_CODES)\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\\\n+    unsigned int i;\t\t\t\t\t\t\\\n+    memset (&statement_code_p, 0, sizeof (statement_code_p));\t\\\n+    for (i = 0; i < ARRAY_SIZE (STMT_CODES); i++)\t\t\\\n+      statement_code_p[STMT_CODES[i]] = true;\t\t\t\\\n+  } while (0)\n+\n extern void genrtl_do_pushlevel                 PARAMS ((void));\n extern void genrtl_goto_stmt                    PARAMS ((tree));\n extern void genrtl_expr_stmt                    PARAMS ((tree));"}, {"sha": "32b894b4552a582f56666c5aecb11767692fb16e", "filename": "gcc/c-objc-common.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/009ed91036a508ccaa07c95f246adc3d763cc93c/gcc%2Fc-objc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/009ed91036a508ccaa07c95f246adc3d763cc93c/gcc%2Fc-objc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-objc-common.c?ref=009ed91036a508ccaa07c95f246adc3d763cc93c", "patch": "@@ -244,6 +244,12 @@ c_warn_unused_global_decl (decl)\n bool\n c_objc_common_init ()\n {\n+  static const enum tree_code stmt_codes[] = {\n+    c_common_stmt_codes\n+  };\n+\n+  INIT_STATEMENT_CODES (stmt_codes);\n+\n   c_init_decl_processing ();\n \n   if (c_common_init () == false)"}, {"sha": "0e9a201cc91b8297a4e099de95d637878ca8810d", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/009ed91036a508ccaa07c95f246adc3d763cc93c/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/009ed91036a508ccaa07c95f246adc3d763cc93c/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=009ed91036a508ccaa07c95f246adc3d763cc93c", "patch": "@@ -902,6 +902,10 @@ enum cplus_tree_code {\n };\n #undef DEFTREECODE\n \n+#define cp_stmt_codes\t\t\t\t\t\\\n+   CTOR_INITIALIZER,\tTRY_BLOCK,\tHANDLER,\t\\\n+   EH_SPEC_BLOCK,\tUSING_STMT,\tTAG_DEFN\n+\n enum languages { lang_c, lang_cplusplus, lang_java };\n \n /* Macros to make error reporting functions' lives easier.  */"}, {"sha": "617be82e82b34d489c1333055502857dfd29ab69", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/009ed91036a508ccaa07c95f246adc3d763cc93c/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/009ed91036a508ccaa07c95f246adc3d763cc93c/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=009ed91036a508ccaa07c95f246adc3d763cc93c", "patch": "@@ -401,14 +401,21 @@ init_cp_pragma ()\n   c_register_pragma (\"GCC\", \"implementation\", handle_pragma_implementation);\n   c_register_pragma (\"GCC\", \"java_exceptions\", handle_pragma_java_exceptions);\n }\n-\n+\f\n /* Initialize the C++ front end.  This function is very sensitive to\n    the exact order that things are done here.  It would be nice if the\n    initialization done by this routine were moved to its subroutines,\n    and the ordering dependencies clarified and reduced.  */\n bool\n cxx_init (void)\n {\n+  static const enum tree_code stmt_codes[] = {\n+    c_common_stmt_codes,\n+    cp_stmt_codes\n+  };\n+\n+  INIT_STATEMENT_CODES (stmt_codes);\n+\n   input_filename = \"<internal>\";\n \n   init_reswords ();"}, {"sha": "8f992c58327b188bc85177e91251ba9efedd1b1d", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/009ed91036a508ccaa07c95f246adc3d763cc93c/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/009ed91036a508ccaa07c95f246adc3d763cc93c/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=009ed91036a508ccaa07c95f246adc3d763cc93c", "patch": "@@ -5660,7 +5660,7 @@ cp_parser_statement (cp_parser* parser)\n     }\n \n   /* Set the line number for the statement.  */\n-  if (statement && statement_code_p (TREE_CODE (statement)))\n+  if (statement && STATEMENT_CODE_P (TREE_CODE (statement)))\n     STMT_LINENO (statement) = statement_line_number;\n }\n "}, {"sha": "b37332953ef8b0755d06a397ae0a2c238e5f28aa", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/009ed91036a508ccaa07c95f246adc3d763cc93c/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/009ed91036a508ccaa07c95f246adc3d763cc93c/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=009ed91036a508ccaa07c95f246adc3d763cc93c", "patch": "@@ -7569,7 +7569,7 @@ tsubst_expr (t, args, complain, in_decl)\n   if (processing_template_decl)\n     return tsubst_copy (t, args, complain, in_decl);\n \n-  if (!statement_code_p (TREE_CODE (t)))\n+  if (!STATEMENT_CODE_P (TREE_CODE (t)))\n     return tsubst_copy_and_build (t, args, complain, in_decl);\n     \n   switch (TREE_CODE (t))"}, {"sha": "edb4ca06a4e9a6ae53945d57bbaea5d5598e68b8", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 1, "deletions": 24, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/009ed91036a508ccaa07c95f246adc3d763cc93c/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/009ed91036a508ccaa07c95f246adc3d763cc93c/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=009ed91036a508ccaa07c95f246adc3d763cc93c", "patch": "@@ -49,7 +49,6 @@ static tree build_target_expr PARAMS ((tree, tree));\n static tree count_trees_r PARAMS ((tree *, int *, void *));\n static tree verify_stmt_tree_r PARAMS ((tree *, int *, void *));\n static tree find_tree_r PARAMS ((tree *, int *, void *));\n-extern int cp_statement_code_p PARAMS ((enum tree_code));\n \n static tree handle_java_interface_attribute PARAMS ((tree *, tree, tree, int, bool *));\n static tree handle_com_interface_attribute PARAMS ((tree *, tree, tree, int, bool *));\n@@ -1119,27 +1118,6 @@ is_aggr_type_2 (t1, t2)\n     return 0;\n   return IS_AGGR_TYPE (t1) && IS_AGGR_TYPE (t2);\n }\n-\n-/* Returns nonzero if CODE is the code for a statement.  */\n-\n-int\n-cp_statement_code_p (code)\n-     enum tree_code code;\n-{\n-  switch (code)\n-    {\n-    case CTOR_INITIALIZER:\n-    case TRY_BLOCK:\n-    case HANDLER:\n-    case EH_SPEC_BLOCK:\n-    case USING_STMT:\n-    case TAG_DEFN:\n-      return 1;\n-\n-    default:\n-      return 0;\n-    }\n-}\n \f\n #define PRINT_RING_SIZE 4\n \n@@ -1275,7 +1253,7 @@ verify_stmt_tree_r (tp, walk_subtrees, data)\n   htab_t *statements = (htab_t *) data;\n   void **slot;\n \n-  if (!statement_code_p (TREE_CODE (t)))\n+  if (!STATEMENT_CODE_P (TREE_CODE (t)))\n     return NULL_TREE;\n \n   /* If this statement is already present in the hash table, then\n@@ -2406,7 +2384,6 @@ cp_end_inlining (fn)\n void\n init_tree ()\n {\n-  lang_statement_code_p = cp_statement_code_p;\n   list_hash_table = htab_create_ggc (31, list_hash, list_hash_eq, NULL);\n }\n "}, {"sha": "0131952c6a28e0830416dcc5949be95401389aa8", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/009ed91036a508ccaa07c95f246adc3d763cc93c/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/009ed91036a508ccaa07c95f246adc3d763cc93c/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=009ed91036a508ccaa07c95f246adc3d763cc93c", "patch": "@@ -1588,7 +1588,7 @@ walk_tree (tp, func, data, htab_)\n      interesting below this point in the tree.  */\n   if (!walk_subtrees)\n     {\n-      if (statement_code_p (code) || code == TREE_LIST\n+      if (STATEMENT_CODE_P (code) || code == TREE_LIST\n \t  || (*lang_hooks.tree_inlining.tree_chain_matters_p) (*tp))\n \t/* But we still need to check our siblings.  */\n \tWALK_SUBTREE_TAIL (TREE_CHAIN (*tp));\n@@ -1613,7 +1613,7 @@ walk_tree (tp, func, data, htab_)\n #ifndef INLINER_FOR_JAVA\n       /* Set lineno here so we get the right instantiation context\n \t if we call instantiate_decl from inlinable_function_p.  */\n-      if (statement_code_p (code) && !STMT_LINENO_FOR_FN_P (*tp))\n+      if (STATEMENT_CODE_P (code) && !STMT_LINENO_FOR_FN_P (*tp))\n \tlineno = STMT_LINENO (*tp);\n #endif /* not INLINER_FOR_JAVA */\n \n@@ -1632,7 +1632,7 @@ walk_tree (tp, func, data, htab_)\n #ifndef INLINER_FOR_JAVA\n       /* For statements, we also walk the chain so that we cover the\n \t entire statement tree.  */\n-      if (statement_code_p (code))\n+      if (STATEMENT_CODE_P (code))\n \t{\n \t  if (code == DECL_STMT\n \t      && DECL_STMT_DECL (*tp)\n@@ -1823,7 +1823,7 @@ copy_tree_r (tp, walk_subtrees, data)\n       if (code == PARM_DECL || code == TREE_LIST\n #ifndef INLINER_FOR_JAVA\n \t  || (*lang_hooks.tree_inlining.tree_chain_matters_p) (*tp)\n-\t  || statement_code_p (code))\n+\t  || STATEMENT_CODE_P (code))\n \tTREE_CHAIN (*tp) = chain;\n \n       /* For now, we don't update BLOCKs when we make copies.  So, we"}]}