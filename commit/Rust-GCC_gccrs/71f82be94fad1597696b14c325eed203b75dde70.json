{"sha": "71f82be94fad1597696b14c325eed203b75dde70", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzFmODJiZTk0ZmFkMTU5NzY5NmIxNGMzMjVlZWQyMDNiNzVkZGU3MA==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2017-06-22T08:39:04Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2017-06-22T08:39:04Z"}, "message": "[Patch match.pd] Fold (A / (1 << B)) to (A >> B)\n\nFor the testcase in the patch:\n\n  unsigned long\n  f2 (unsigned long a, int b)\n  {\n    unsigned long x = 1UL << b;\n    return a / x;\n  }\n\nWe currently generate an unsigned division and a left shift, where\nwe could instead generate a right shift.\n\ngcc/\n\n2017-06-21  James Greenhalgh  <james.greenhalgh@arm.com>\n\n\t* match.pd (A / (1 << B) -> A >> B): New.\n\t* generic-match-head.c: Include optabs-tree.h.\n\t* gimple-match-head.c: Likewise.\n\t* optabs-tree.h (target_supports_op_p): New.\n\t* optabs-tree.c (target_supports_op_p): New.\n\ngcc/testsuite/\n\n2017-06-21  James Greenhalgh  <james.greenhalgh@arm.com>\n\n\t* gcc.dg/tree-ssa/forwprop-37.c: New.\n\nFrom-SVN: r249502", "tree": {"sha": "22777f9ae20fbb5df987fa57c59a17698606807b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/22777f9ae20fbb5df987fa57c59a17698606807b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/71f82be94fad1597696b14c325eed203b75dde70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71f82be94fad1597696b14c325eed203b75dde70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71f82be94fad1597696b14c325eed203b75dde70", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71f82be94fad1597696b14c325eed203b75dde70/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a78f698034a2ab7fabd0d6ca3d35e688670b6d2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a78f698034a2ab7fabd0d6ca3d35e688670b6d2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a78f698034a2ab7fabd0d6ca3d35e688670b6d2f"}], "stats": {"total": 68, "additions": 68, "deletions": 0}, "files": [{"sha": "9b150a486453b98c1a7f0c4e9f50cb89e586d0e4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71f82be94fad1597696b14c325eed203b75dde70/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71f82be94fad1597696b14c325eed203b75dde70/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=71f82be94fad1597696b14c325eed203b75dde70", "patch": "@@ -1,3 +1,11 @@\n+2017-06-22  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* match.pd (A / (1 << B) -> A >> B): New.\n+\t* generic-match-head.c: Include optabs-tree.h.\n+\t* gimple-match-head.c: Likewise.\n+\t* optabs-tree.h (target_supports_op_p): New.\n+\t* optabs-tree.c (target_supports_op_p): New.\n+\n 2017-06-22  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* configure.ac (gcc_cv_ld_static_dynamic): Also check stderr for"}, {"sha": "4504401fa8a5ac52f6b382175287d2c6f1da87a2", "filename": "gcc/generic-match-head.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71f82be94fad1597696b14c325eed203b75dde70/gcc%2Fgeneric-match-head.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71f82be94fad1597696b14c325eed203b75dde70/gcc%2Fgeneric-match-head.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgeneric-match-head.c?ref=71f82be94fad1597696b14c325eed203b75dde70", "patch": "@@ -33,6 +33,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"builtins.h\"\n #include \"case-cfn-macros.h\"\n #include \"gimplify.h\"\n+#include \"optabs-tree.h\"\n \n \n /* Routine to determine if the types T1 and T2 are effectively"}, {"sha": "5f6aa273b965de6b75eebadda354b0aac46ae28d", "filename": "gcc/gimple-match-head.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71f82be94fad1597696b14c325eed203b75dde70/gcc%2Fgimple-match-head.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71f82be94fad1597696b14c325eed203b75dde70/gcc%2Fgimple-match-head.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-match-head.c?ref=71f82be94fad1597696b14c325eed203b75dde70", "patch": "@@ -39,6 +39,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"internal-fn.h\"\n #include \"case-cfn-macros.h\"\n #include \"gimplify.h\"\n+#include \"optabs-tree.h\"\n \n \n /* Forward declarations of the private auto-generated matchers."}, {"sha": "a4cae113bc84d4ccde88396f46699ca9b4962f9c", "filename": "gcc/match.pd", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71f82be94fad1597696b14c325eed203b75dde70/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71f82be94fad1597696b14c325eed203b75dde70/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=71f82be94fad1597696b14c325eed203b75dde70", "patch": "@@ -161,6 +161,18 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n     (op @0 integer_onep)\n     (non_lvalue @0)))\n \n+/* (A / (1 << B)) -> (A >> B).\n+   Only for unsigned A.  For signed A, this would not preserve rounding\n+   toward zero.\n+   For example: (-1 / ( 1 << B)) !=  -1 >> B.  */\n+(simplify\n+ (trunc_div @0 (lshift integer_onep@1 @2))\n+ (if ((TYPE_UNSIGNED (type) || tree_expr_nonnegative_p (@0))\n+      && (!VECTOR_TYPE_P (type)\n+\t  || target_supports_op_p (type, RSHIFT_EXPR, optab_vector)\n+\t  || target_supports_op_p (type, RSHIFT_EXPR, optab_scalar)))\n+  (rshift @0 @2)))\n+\n /* Preserve explicit divisions by 0: the C++ front-end wants to detect\n    undefined behavior in constexpr evaluation, and assuming that the division\n    traps enables better optimizations than these anyway.  */"}, {"sha": "c183b14c81903ba83d3f6acd33e46164f5a394e8", "filename": "gcc/optabs-tree.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71f82be94fad1597696b14c325eed203b75dde70/gcc%2Foptabs-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71f82be94fad1597696b14c325eed203b75dde70/gcc%2Foptabs-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs-tree.c?ref=71f82be94fad1597696b14c325eed203b75dde70", "patch": "@@ -376,3 +376,18 @@ init_tree_optimization_optabs (tree optnode)\n       ggc_free (tmp_optabs);\n     }\n }\n+\n+/* Return TRUE if the target has support for vector right shift of an\n+   operand of type TYPE.  If OT_TYPE is OPTAB_DEFAULT, check for existence\n+   of a shift by either a scalar or a vector.  Otherwise, check only\n+   for a shift that matches OT_TYPE.  */\n+\n+bool\n+target_supports_op_p (tree type, enum tree_code code,\n+\t\t      enum optab_subtype ot_subtype)\n+{\n+  optab ot = optab_for_tree_code (code, type, ot_subtype);\n+  return (ot != unknown_optab\n+\t  && optab_handler (ot, TYPE_MODE (type)) != CODE_FOR_nothing);\n+}\n+"}, {"sha": "52e842bfb61054ad9691bf942b083b5ca9f48c51", "filename": "gcc/optabs-tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71f82be94fad1597696b14c325eed203b75dde70/gcc%2Foptabs-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71f82be94fad1597696b14c325eed203b75dde70/gcc%2Foptabs-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs-tree.h?ref=71f82be94fad1597696b14c325eed203b75dde70", "patch": "@@ -41,5 +41,7 @@ bool supportable_convert_operation (enum tree_code, tree, tree, tree *,\n bool expand_vec_cmp_expr_p (tree, tree, enum tree_code);\n bool expand_vec_cond_expr_p (tree, tree, enum tree_code);\n void init_tree_optimization_optabs (tree);\n+bool target_supports_op_p (tree, enum tree_code,\n+\t\t\t   enum optab_subtype = optab_default);\n \n #endif"}, {"sha": "497c4b87622437295c6007b1b242e52c1789a0b9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71f82be94fad1597696b14c325eed203b75dde70/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71f82be94fad1597696b14c325eed203b75dde70/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=71f82be94fad1597696b14c325eed203b75dde70", "patch": "@@ -1,3 +1,7 @@\n+2017-06-22  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* gcc.dg/tree-ssa/forwprop-37.c: New.\n+\n 2017-06-22  Richard Biener  <rguenther@suse.de>\n \n \t* gcc.dg/vect/pr65947-14.c: Fix missing brace."}, {"sha": "dec826c76bd6b6ded6d0d95c6e754f447c78aba4", "filename": "gcc/testsuite/gcc.dg/tree-ssa/forwprop-37.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71f82be94fad1597696b14c325eed203b75dde70/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-37.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71f82be94fad1597696b14c325eed203b75dde70/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-37.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-37.c?ref=71f82be94fad1597696b14c325eed203b75dde70", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-forwprop1-raw\" } */\n+\n+unsigned int\n+f1 (unsigned int a, unsigned int b)\n+{\n+  unsigned int x = 1U << b;\n+  return a / x;\n+}\n+\n+unsigned long\n+f2 (unsigned long a, int b)\n+{\n+  unsigned long x = 1UL << b;\n+  return a / x;\n+}\n+\n+unsigned long long\n+f3 (unsigned long long a, int b)\n+{\n+  unsigned long long x = 1ULL << b;\n+  return a / x;\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"trunc_div_expr\" \"forwprop1\" } } */"}]}