{"sha": "989b3e72577344f7450a453d8d058dce721bf330", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTg5YjNlNzI1NzczNDRmNzQ1MGE0NTNkOGQwNThkY2U3MjFiZjMzMA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-11-23T22:22:53Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-11-23T22:22:53Z"}, "message": "Add -mhimem to support linking above 0x20000000 boundary.\n\nFix meaning of BASE_REG_NEEDED.\n(print_operand): Removed dead code.\n\nFrom-SVN: r8560", "tree": {"sha": "635591e83555b0e2e4b3d0f07de7566252bae865", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/635591e83555b0e2e4b3d0f07de7566252bae865"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/989b3e72577344f7450a453d8d058dce721bf330", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/989b3e72577344f7450a453d8d058dce721bf330", "html_url": "https://github.com/Rust-GCC/gccrs/commit/989b3e72577344f7450a453d8d058dce721bf330", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/989b3e72577344f7450a453d8d058dce721bf330/comments", "author": null, "committer": null, "parents": [{"sha": "2d33065aaeeaec02734e2af8c4c61300446d6e84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d33065aaeeaec02734e2af8c4c61300446d6e84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d33065aaeeaec02734e2af8c4c61300446d6e84"}], "stats": {"total": 61, "additions": 14, "deletions": 47}, "files": [{"sha": "9140994046459f3afea20aa5a51960023f141177", "filename": "gcc/config/ns32k/ns32k.c", "status": "modified", "additions": 14, "deletions": 47, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/989b3e72577344f7450a453d8d058dce721bf330/gcc%2Fconfig%2Fns32k%2Fns32k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/989b3e72577344f7450a453d8d058dce721bf330/gcc%2Fconfig%2Fns32k%2Fns32k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.c?ref=989b3e72577344f7450a453d8d058dce721bf330", "patch": "@@ -451,21 +451,7 @@ print_operand (file, x, code)\n   else if (GET_CODE (x) == MEM)\n     {\n       rtx tmp = XEXP (x, 0);\n-#if ! (defined (PC_RELATIVE) || defined (NO_ABSOLUTE_PREFIX_IF_SYMBOLIC))\n-      if (GET_CODE (tmp) != CONST_INT)\n-\t{\n-\t  char *out = XSTR (tmp, 0);\n-\t  if (out[0] == '*')\n-\t    {\n-\t      PUT_ABSOLUTE_PREFIX (file);\n-\t      fprintf (file, \"%s\", &out[1]);\n-\t    }\n-\t  else\n-\t    ASM_OUTPUT_LABELREF (file, out);\n-\t}\n-      else\n-#endif\n-\toutput_address (XEXP (x, 0));\n+      output_address (XEXP (x, 0));\n     }\n   else if (GET_CODE (x) == CONST_DOUBLE && GET_MODE (x) != VOIDmode)\n     {\n@@ -615,7 +601,7 @@ print_operand_address (file, addr)\n \t      rtx sym, off, tmp1;\n \t      tmp1 = XEXP (tmp,0);\n \t      if (GET_CODE (tmp1)  != PLUS)\n-\tabort ();\n+\t\tabort ();\n \n \t      sym = XEXP (tmp1,0);\n \t      if (GET_CODE (sym) != SYMBOL_REF)\n@@ -670,7 +656,7 @@ print_operand_address (file, addr)\n \n   if (base\n #ifndef INDEX_RATHER_THAN_BASE\n-      && flag_pic \n+      && (flag_pic || TARGET_HIMEM)\n       && GET_CODE (base) != SYMBOL_REF \n       && GET_CODE (offset) != CONST_INT\n #else\n@@ -684,15 +670,15 @@ print_operand_address (file, addr)\n     }\n \n   /* now, offset, base and indexexp are set */\n+#ifndef BASE_REG_NEEDED\n   if (! base)\n     {\n #if defined (PC_RELATIVE) || defined (NO_ABSOLUTE_PREFIX_IF_SYMBOLIC)\n       if (GET_CODE (offset) == CONST_INT)\n-/*      if (! (GET_CODE (offset) == LABEL_REF\n-\t     || GET_CODE (offset) == SYMBOL_REF)) */\n #endif\n \tPUT_ABSOLUTE_PREFIX (file);\n     }\n+#endif\n \n   output_addr_const (file, offset);\n   if (base) /* base can be (REG ...) or (MEM ...) */\n@@ -711,8 +697,8 @@ print_operand_address (file, addr)\n \tfprintf (file, \"(%s)\", reg_names[REGNO (base)]);\n \tbreak;\n       case SYMBOL_REF:\n-\t  if (! flag_pic)\n-\t    abort ();\n+\tif (! flag_pic)\n+\t  abort ();\n \n         fprintf (file, \"(\");\n \toutput_addr_const (file, base);\n@@ -766,45 +752,26 @@ print_operand_address (file, addr)\n \toutput_addr_const (file, offset);\n \tif (base)\n \t  fprintf (file, \"(%s)\", reg_names[REGNO (base)]);\n-#ifdef BASE_REG_NEEDED\n \telse if (TARGET_SB)\n \t  fprintf (file, \"(sb)\");\n \telse\n \t  abort ();\n-#endif\n \tfprintf (file, \")\");\n \tbreak;\n-\n       default:\n \tabort ();\n       }\n #ifdef PC_RELATIVE\n-  else if (GET_CODE (offset) == LABEL_REF\n-\t   || GET_CODE (offset) == SYMBOL_REF\n-\t   || GET_CODE (offset) == CONST\n-\t   || GET_CODE (offset) == PLUS)\n+  else if (GET_CODE (offset) != CONST_INT)\n     fprintf (file, \"(pc)\");\n-#endif\n #ifdef BASE_REG_NEEDED\n-  else \n-    {\n-      /* Abs. addresses don't need a base (I think). */\n-      if (GET_CODE (offset) != CONST_INT\n-#ifndef PC_RELATIVE\n-\t  && GET_CODE (offset) != LABEL_REF\n-\t  && GET_CODE (offset) != SYMBOL_REF\n-\t  && GET_CODE (offset) != CONST\n-\t  && GET_CODE (offset) != PLUS\n-#endif\n-         )\n-        {\n-\t  if (TARGET_SB)\n-\t    fprintf (file, \"(sb)\");\n-\t  else\n-\t    abort ();\n-        }\n-    }\n+  else if (TARGET_SB)\n+    fprintf (file, \"(sb)\");\n+  else\n+    abort ();\n #endif\n+#endif /* PC_RELATIVE */\n+\n   /* now print index if we have one */\n   if (indexexp)\n     {"}]}