{"sha": "9c8c7338585ca99db181ce0d1a63654f97beeed0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWM4YzczMzg1ODVjYTk5ZGIxODFjZTBkMWE2MzY1NGY5N2JlZWVkMA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2018-05-21T22:02:35Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-05-21T22:02:35Z"}, "message": "Fix tree-ssa-strlen handling of partial clobbers (PR85814)\n\nIn this PR we have:\n\n  c_5 = c_4(D) + 4;\n  c_12 = c_5 + 1;\n  *c_5 = 2;\n  a = 2;\t\t// A\n  c_21 = c_12 + 1;\n  *c_12 = 2;\n  a = 2;\t\t// B\n  c_28 = c_21 + 1;\n  *c_21 = 2;\n  a = 2;\n  c_7 = c_28 + 1;\n  *c_28 = 2;\n\nwhere a is a global int.  We decide that A can't clobber *c_5 == c_4[4]\nbecause the latter implies that c_4 is an object of 5 bytes or more,\nwhereas a has exactly 4 bytes.\n\nThe assumption for B and *c_5 is the same, but when considering B and\n*c_12, we only follow the definition of c_12 to c_5 + 1 (for good\nreason) and so have *c_12 == c_5[1].  We then don't have the same\nsize guarantee and so assume that B could clobber *c_12.  This leads\nto a situation in which the strinfo for c_5 is still valid but the\nnext strinfo (c_12) isn't.  We then segfaulted while trying to get\nthe strinfo for c_21 + 1 == c_5 + 3 because get_stridx_plus_constant\nassumed that c_5's next strinfo (c_12) would be valid too.\n\nAnd of course it should be valid really.  It doesn't make sense for the\nstring based at c_5 to be valid but a substring of it to be invalid.\nI don't think we can guarantee that such weird corner cases never\nhappen though, even if we tried to avoid this one.\n\nOne possibility would be to mark c_12 as valid on the basis that c_5\nis valid, but I'm not sure the complication is worth it given that it\nseems to trigger very rarely.  A better optimisation would be to get\nthe unroller to clean up after itself a bit more...\n\nAlthough this particular instance of the bug relies on r249880, I think\nwe could have similar problems in GCC 7.  It would be much harder to\ntrigger though, especially since it relies on unfolded IR like the above.\n\n2018-05-21  Richard Sandiford  <richard.sandiford@linaro.org>\n\ngcc/\n\tPR tree-optimization/85814\n\t* tree-ssa-strlen.c (get_stridx_plus_constant): Cope with\n\ta null return from get_strinfo when unsharing the next\n\tstrinfo in the chain.\n\ngcc/testsuite/\n\tPR tree-optimization/85814\n\t* gcc.dg/torture/pr85814.c: New test.\n\nFrom-SVN: r260488", "tree": {"sha": "7a4191f1981c06e981b669919edf1c66b9211acd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a4191f1981c06e981b669919edf1c66b9211acd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c8c7338585ca99db181ce0d1a63654f97beeed0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c8c7338585ca99db181ce0d1a63654f97beeed0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c8c7338585ca99db181ce0d1a63654f97beeed0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c8c7338585ca99db181ce0d1a63654f97beeed0/comments", "author": null, "committer": null, "parents": [{"sha": "4358400b3f5574a0460c23d55e9be002e13ba678", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4358400b3f5574a0460c23d55e9be002e13ba678", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4358400b3f5574a0460c23d55e9be002e13ba678"}], "stats": {"total": 23, "additions": 21, "deletions": 2}, "files": [{"sha": "db367f758d0d4b95ac1b9f777993cd3d997c8b85", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c8c7338585ca99db181ce0d1a63654f97beeed0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c8c7338585ca99db181ce0d1a63654f97beeed0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9c8c7338585ca99db181ce0d1a63654f97beeed0", "patch": "@@ -1,3 +1,10 @@\n+2018-05-21  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\tPR tree-optimization/85814\n+\t* tree-ssa-strlen.c (get_stridx_plus_constant): Cope with\n+\ta null return from get_strinfo when unsharing the next\n+\tstrinfo in the chain.\n+\n 2018-05-21  Vladimir Mezentsev  <vladimir.mezentsev@oracle.com>\n \n \tPR gcc/84923"}, {"sha": "10b757272c5404a734c3cb68bb17e672a74eb168", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c8c7338585ca99db181ce0d1a63654f97beeed0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c8c7338585ca99db181ce0d1a63654f97beeed0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9c8c7338585ca99db181ce0d1a63654f97beeed0", "patch": "@@ -1,3 +1,8 @@\n+2018-05-21  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\tPR tree-optimization/85814\n+\t* gcc.dg/torture/pr85814.c: New test.\n+\n 2018-05-21  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/84588"}, {"sha": "8d16c53e9c03fc25c5f2011dffe7ffae29915410", "filename": "gcc/testsuite/gcc.dg/torture/pr85814.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c8c7338585ca99db181ce0d1a63654f97beeed0/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr85814.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c8c7338585ca99db181ce0d1a63654f97beeed0/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr85814.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr85814.c?ref=9c8c7338585ca99db181ce0d1a63654f97beeed0", "patch": "@@ -0,0 +1,7 @@\n+int a;\n+void b(char *c)\n+{\n+  c += 4;\n+  for (int i = 0; i < 4; i++)\n+    a = *c++ = 2;\n+}"}, {"sha": "556c5bc29fedd4216290cf79dfd6627c82f5163c", "filename": "gcc/tree-ssa-strlen.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c8c7338585ca99db181ce0d1a63654f97beeed0/gcc%2Ftree-ssa-strlen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c8c7338585ca99db181ce0d1a63654f97beeed0/gcc%2Ftree-ssa-strlen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-strlen.c?ref=9c8c7338585ca99db181ce0d1a63654f97beeed0", "patch": "@@ -795,9 +795,9 @@ get_stridx_plus_constant (strinfo *basesi, unsigned HOST_WIDE_INT off,\n   si = new_strinfo (ptr, idx, build_int_cst (size_type_node, nonzero_chars),\n \t\t    basesi->full_string_p);\n   set_strinfo (idx, si);\n-  if (chainsi->next)\n+  if (strinfo *nextsi = get_strinfo (chainsi->next))\n     {\n-      strinfo *nextsi = unshare_strinfo (get_strinfo (chainsi->next));\n+      nextsi = unshare_strinfo (nextsi);\n       si->next = nextsi->idx;\n       nextsi->prev = idx;\n     }"}]}