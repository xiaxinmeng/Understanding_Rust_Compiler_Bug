{"sha": "000ab922b01c76508dd100419c9727494f452394", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDAwYWI5MjJiMDFjNzY1MDhkZDEwMDQxOWM5NzI3NDk0ZjQ1MjM5NA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1999-02-05T02:47:00Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1999-02-05T02:47:00Z"}, "message": "decl2.c: Remove flag_init_priority.\n\n\t* decl2.c: Remove flag_init_priority.  Always enable initp stuff.\n\t(start_objects, finish_objects): Only use special\n\tinit_priority code if the user specified a priority.\n\t(do_ctors, do_dtors): Use DEFAULT_INIT_PRIORITY for the non-initp\n\tobjects.\n\nFrom-SVN: r25037", "tree": {"sha": "b5ae834bf452ae92e085882c4a3704dce3fb1738", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5ae834bf452ae92e085882c4a3704dce3fb1738"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/000ab922b01c76508dd100419c9727494f452394", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/000ab922b01c76508dd100419c9727494f452394", "html_url": "https://github.com/Rust-GCC/gccrs/commit/000ab922b01c76508dd100419c9727494f452394", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/000ab922b01c76508dd100419c9727494f452394/comments", "author": null, "committer": null, "parents": [{"sha": "fcfcdfc8970fd436587ee62f65d2df23d74d506c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcfcdfc8970fd436587ee62f65d2df23d74d506c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fcfcdfc8970fd436587ee62f65d2df23d74d506c"}], "stats": {"total": 41, "additions": 9, "deletions": 32}, "files": [{"sha": "ba458595f6bd47fc8d6eb30bccdca23e74c6aa60", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 9, "deletions": 32, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/000ab922b01c76508dd100419c9727494f452394/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/000ab922b01c76508dd100419c9727494f452394/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=000ab922b01c76508dd100419c9727494f452394", "patch": "@@ -173,14 +173,6 @@ int flag_implicit_templates = 1;\n \n int flag_implicit_inline_templates = 1;\n \n-/* Nonzero means allow numerical priorities on constructors.  */\n-\n-#ifdef USE_INIT_PRIORITY\n-int flag_init_priority = 1;\n-#else\n-int flag_init_priority;\n-#endif\n-\n /* Nonzero means warn about implicit declarations.  */\n \n int warn_implicit = 1;\n@@ -481,7 +473,6 @@ static struct { char *string; int *variable; int on_value;} lang_f_options[] =\n   {\"implement-inlines\", &flag_implement_inlines, 1},\n   {\"implicit-inline-templates\", &flag_implicit_inline_templates, 1},\n   {\"implicit-templates\", &flag_implicit_templates, 1},\n-  {\"init-priority\", &flag_init_priority, 1},\n   {\"labels-ok\", &flag_labels_ok, 1},\n   {\"nonansi-builtins\", &flag_no_nonansi_builtin, 0},\n   {\"operator-names\", &flag_operator_names, 1},\n@@ -2872,14 +2863,6 @@ setup_initp ()\n {\n   tree t, *p, next_t;\n \n-  if (! flag_init_priority)\n-    {\n-      for (t = static_aggregates_initp; t; t = TREE_CHAIN (t))\n-\tcp_warning (\"init_priority for `%#D' ignored without -finit-priority\",\n-\t\t    TREE_VALUE (t));\n-      return;\n-    }\n-\n   /* First, remove any entries from static_aggregates that are also in\n      static_aggregates_initp, and update the entries in _initp to\n      include the initializer.  */\n@@ -2943,7 +2926,7 @@ start_objects (method_type, initp)\n \n   /* Make ctor or dtor function.  METHOD_TYPE may be 'I' or 'D'.  */\n \n-  if (flag_init_priority)\n+  if (initp != DEFAULT_INIT_PRIORITY)\n     {\n       char joiner;\n \n@@ -2952,8 +2935,6 @@ start_objects (method_type, initp)\n #else\n       joiner = '_';\n #endif\n-      if (initp == 0)\n-\tinitp = DEFAULT_INIT_PRIORITY;\n \n       sprintf (type, \"%c%c%.5u\", method_type, joiner, initp);\n     }\n@@ -3005,7 +2986,7 @@ finish_objects (method_type, initp)\n   pop_momentary ();\n   finish_function (lineno, 0, 0);\n \n-  if (! flag_init_priority)\n+  if (initp == DEFAULT_INIT_PRIORITY)\n     {\n       if (method_type == 'I')\n \tassemble_constructor (fnname);\n@@ -3017,11 +2998,9 @@ finish_objects (method_type, initp)\n   /* If we're using init priority we can't use assemble_*tor, but on ELF\n      targets we can stick the references into named sections for GNU ld\n      to collect.  */\n-  if (flag_init_priority)\n+  else\n     {\n       char buf[15];\n-      if (initp == 0)\n-\tinitp = DEFAULT_INIT_PRIORITY;\n       sprintf (buf, \".%ctors.%.5u\", method_type == 'I' ? 'c' : 'd',\n \t       /* invert the numbering so the linker puts us in the proper\n \t\t  order; constructors are run from right to left, and the\n@@ -3052,7 +3031,7 @@ do_dtors (start)\n     }\n   else\n     {\n-      initp = 0;\n+      initp = DEFAULT_INIT_PRIORITY;\n       vars = static_aggregates;\n     }\n \n@@ -3140,7 +3119,7 @@ do_ctors (start)\n     }\n   else\n     {\n-      initp = 0;\n+      initp = DEFAULT_INIT_PRIORITY;\n       vars = static_aggregates;\n     }\n \n@@ -3345,19 +3324,17 @@ finish_file ()\n     {\n       do_dtors (NULL_TREE);\n \n-      if (flag_init_priority)\n-\tfor (vars = static_aggregates_initp; vars; vars = TREE_CHAIN (vars))\n-\t  do_dtors (vars);\n+      for (vars = static_aggregates_initp; vars; vars = TREE_CHAIN (vars))\n+\tdo_dtors (vars);\n     }\n \n   /* do_ctors will reverse the lists for messing up.  */\n   if (needs_messing_up)\n     {\n       do_ctors (NULL_TREE);\n \n-      if (flag_init_priority)\n-\tfor (vars = static_aggregates_initp; vars; vars = TREE_CHAIN (vars))\n-\t  do_ctors (vars);\n+      for (vars = static_aggregates_initp; vars; vars = TREE_CHAIN (vars))\n+\tdo_ctors (vars);\n   }\n \n   permanent_allocation (1);"}]}