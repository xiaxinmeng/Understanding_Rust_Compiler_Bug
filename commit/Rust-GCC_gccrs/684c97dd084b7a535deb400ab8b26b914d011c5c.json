{"sha": "684c97dd084b7a535deb400ab8b26b914d011c5c", "node_id": "C_kwDOANBUbNoAKDY4NGM5N2RkMDg0YjdhNTM1ZGViNDAwYWI4YjI2YjkxNGQwMTFjNWM", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-05-11T12:53:37Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-05-11T13:44:31Z"}, "message": "Use variadic template functions for the gimple_build forwarders\n\nThe following consolidates the forwarders to gimple_build with\nUNKNOWN_LOCATION by using two variadic template functions.  This\nmakes the code visually less disturbing and is in preparation\nof adding more forwarders with different stmt insertion schemes.\n\n2022-05-11  Richard Biener  <rguenther@suse.de>\n\n\t* gimple-fold.h (gimple_build): Use variadic template\n\tfunctions for the gimple_build API forwarders without\n\tlocation_t argument.", "tree": {"sha": "8223bdcb6e8b0c9c63ac6dbf76e428903f377d7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8223bdcb6e8b0c9c63ac6dbf76e428903f377d7e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/684c97dd084b7a535deb400ab8b26b914d011c5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/684c97dd084b7a535deb400ab8b26b914d011c5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/684c97dd084b7a535deb400ab8b26b914d011c5c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/684c97dd084b7a535deb400ab8b26b914d011c5c/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "546c6210eb08f583ee4f53a0fd7886b6c958c7fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/546c6210eb08f583ee4f53a0fd7886b6c958c7fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/546c6210eb08f583ee4f53a0fd7886b6c958c7fa"}], "stats": {"total": 45, "additions": 11, "deletions": 34}, "files": [{"sha": "850f917bbc1a2a0a99d055840fad1249e9d4a2dc", "filename": "gcc/gimple-fold.h", "status": "modified", "additions": 11, "deletions": 34, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/684c97dd084b7a535deb400ab8b26b914d011c5c/gcc%2Fgimple-fold.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/684c97dd084b7a535deb400ab8b26b914d011c5c/gcc%2Fgimple-fold.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.h?ref=684c97dd084b7a535deb400ab8b26b914d011c5c", "patch": "@@ -73,55 +73,32 @@ extern tree tree_vec_extract (gimple_stmt_iterator *, tree, tree, tree, tree);\n    Supposed to replace force_gimple_operand (fold_buildN (...), ...).  */\n extern tree gimple_build (gimple_seq *, location_t,\n \t\t\t  enum tree_code, tree, tree);\n-inline tree\n-gimple_build (gimple_seq *seq,\n-\t      enum tree_code code, tree type, tree op0)\n-{\n-  return gimple_build (seq, UNKNOWN_LOCATION, code, type, op0);\n-}\n extern tree gimple_build (gimple_seq *, location_t,\n \t\t\t  enum tree_code, tree, tree, tree);\n-inline tree\n-gimple_build (gimple_seq *seq,\n-\t      enum tree_code code, tree type, tree op0, tree op1)\n-{\n-  return gimple_build (seq, UNKNOWN_LOCATION, code, type, op0, op1);\n-}\n extern tree gimple_build (gimple_seq *, location_t,\n \t\t\t  enum tree_code, tree, tree, tree, tree);\n+template<class ...Args>\n inline tree\n-gimple_build (gimple_seq *seq,\n-\t      enum tree_code code, tree type, tree op0, tree op1, tree op2)\n+gimple_build (gimple_seq *seq, enum tree_code code, tree type, Args ...ops)\n {\n-  return gimple_build (seq, UNKNOWN_LOCATION, code, type, op0, op1, op2);\n+  static_assert (sizeof...(ops) > 0 && sizeof...(ops) <= 3,\n+\t\t \"Number of operands must be from one to three\");\n+  return gimple_build (seq, UNKNOWN_LOCATION, code, type, ops...);\n }\n+\n extern tree gimple_build (gimple_seq *, location_t, combined_fn, tree);\n-inline tree\n-gimple_build (gimple_seq *seq, combined_fn fn, tree type)\n-{\n-  return gimple_build (seq, UNKNOWN_LOCATION, fn, type);\n-}\n extern tree gimple_build (gimple_seq *, location_t, combined_fn, tree, tree);\n-inline tree\n-gimple_build (gimple_seq *seq, combined_fn fn, tree type, tree arg0)\n-{\n-  return gimple_build (seq, UNKNOWN_LOCATION, fn, type, arg0);\n-}\n extern tree gimple_build (gimple_seq *, location_t, combined_fn,\n \t\t\t  tree, tree, tree);\n-inline tree\n-gimple_build (gimple_seq *seq, combined_fn fn,\n-\t      tree type, tree arg0, tree arg1)\n-{\n-  return gimple_build (seq, UNKNOWN_LOCATION, fn, type, arg0, arg1);\n-}\n extern tree gimple_build (gimple_seq *, location_t, combined_fn,\n \t\t\t  tree, tree, tree, tree);\n+template<class ...Args>\n inline tree\n-gimple_build (gimple_seq *seq, combined_fn fn,\n-\t      tree type, tree arg0, tree arg1, tree arg2)\n+gimple_build (gimple_seq *seq, combined_fn fn, tree type, Args ...args)\n {\n-  return gimple_build (seq, UNKNOWN_LOCATION, fn, type, arg0, arg1, arg2);\n+  static_assert (sizeof...(args) < 4,\n+\t\t \"Number of arguments must be less than four\");\n+  return gimple_build (seq, UNKNOWN_LOCATION, fn, type, args...);\n }\n \n extern tree gimple_convert (gimple_seq *, location_t, tree, tree);"}]}