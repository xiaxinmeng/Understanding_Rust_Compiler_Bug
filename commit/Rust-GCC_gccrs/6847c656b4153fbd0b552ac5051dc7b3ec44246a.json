{"sha": "6847c656b4153fbd0b552ac5051dc7b3ec44246a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njg0N2M2NTZiNDE1M2ZiZDBiNTUyYWM1MDUxZGM3YjNlYzQ0MjQ2YQ==", "commit": {"author": {"name": "Will Schmidt", "email": "will_schmidt@vnet.ibm.com", "date": "2018-09-06T15:34:58Z"}, "committer": {"name": "Will Schmidt", "email": "willschm@gcc.gnu.org", "date": "2018-09-06T15:34:58Z"}, "message": "rs6000.c (rs6000_gimple_fold_builtin): Add support for early gimple folding of vec_splat().\n\n[gcc]\n\n2018-09-06  Will Schmidt  <will_schmidt@vnet.ibm.com>\n\n\t* config/rs6000/rs6000.c (rs6000_gimple_fold_builtin): Add support for\n\tearly gimple folding of vec_splat().\n\t* tree-vect-generic.c: Remove static from tree_vec_extract() definition.\n\t* gimple-fold.h: Add an extern define for tree_vec_extract().\n\nFrom-SVN: r264146", "tree": {"sha": "0af563b1a424dbbd5d7539333d991d86b5b755f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0af563b1a424dbbd5d7539333d991d86b5b755f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6847c656b4153fbd0b552ac5051dc7b3ec44246a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6847c656b4153fbd0b552ac5051dc7b3ec44246a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6847c656b4153fbd0b552ac5051dc7b3ec44246a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6847c656b4153fbd0b552ac5051dc7b3ec44246a/comments", "author": {"login": "willschm", "id": 44359, "node_id": "MDQ6VXNlcjQ0MzU5", "avatar_url": "https://avatars.githubusercontent.com/u/44359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willschm", "html_url": "https://github.com/willschm", "followers_url": "https://api.github.com/users/willschm/followers", "following_url": "https://api.github.com/users/willschm/following{/other_user}", "gists_url": "https://api.github.com/users/willschm/gists{/gist_id}", "starred_url": "https://api.github.com/users/willschm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willschm/subscriptions", "organizations_url": "https://api.github.com/users/willschm/orgs", "repos_url": "https://api.github.com/users/willschm/repos", "events_url": "https://api.github.com/users/willschm/events{/privacy}", "received_events_url": "https://api.github.com/users/willschm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "84bde0bffe8b2d6291b196f3cd77398dea971c85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84bde0bffe8b2d6291b196f3cd77398dea971c85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84bde0bffe8b2d6291b196f3cd77398dea971c85"}], "stats": {"total": 52, "additions": 51, "deletions": 1}, "files": [{"sha": "19800f5930b5ff3e7caaa51a48c6aafc66b8a8ad", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6847c656b4153fbd0b552ac5051dc7b3ec44246a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6847c656b4153fbd0b552ac5051dc7b3ec44246a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6847c656b4153fbd0b552ac5051dc7b3ec44246a", "patch": "@@ -1,3 +1,10 @@\n+2018-09-06  Will Schmidt  <will_schmidt@vnet.ibm.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_gimple_fold_builtin): Add support for\n+\tearly gimple folding of vec_splat().\n+\t* tree-vect-generic.c: Remove static from tree_vec_extract() definition.\n+\t* gimple-fold.h: Add an extern define for tree_vec_extract().\n+\n 2018-09-06  Will Schmidt  <will_schmidt@vnet.ibm.com>\n \n \t* config/rs6000/rs6000.c (fold_mergehl_helper): Add types_compatible_p"}, {"sha": "6f6c945ab7b8fe9c64fe21a668fc51be0364de05", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6847c656b4153fbd0b552ac5051dc7b3ec44246a/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6847c656b4153fbd0b552ac5051dc7b3ec44246a/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=6847c656b4153fbd0b552ac5051dc7b3ec44246a", "patch": "@@ -15772,6 +15772,48 @@ rs6000_gimple_fold_builtin (gimple_stmt_iterator *gsi)\n \t gimple_set_location (g, gimple_location (stmt));\n \t gsi_replace (gsi, g, true);\n \t return true;\n+\t}\n+\n+    /* Flavors of vec_splat.  */\n+    /* a = vec_splat (b, 0x3) becomes a = { b[3],b[3],b[3],...};  */\n+    case ALTIVEC_BUILTIN_VSPLTB:\n+    case ALTIVEC_BUILTIN_VSPLTH:\n+    case ALTIVEC_BUILTIN_VSPLTW:\n+    case VSX_BUILTIN_XXSPLTD_V2DI:\n+    case VSX_BUILTIN_XXSPLTD_V2DF:\n+      {\n+\targ0 = gimple_call_arg (stmt, 0); /* input vector.  */\n+\targ1 = gimple_call_arg (stmt, 1); /* index into arg0.  */\n+\t/* Only fold the vec_splat_*() if arg1 is both a constant value and\n+\t   is a valid index into the arg0 vector.  */\n+\tunsigned int n_elts = VECTOR_CST_NELTS (arg0);\n+\tif (TREE_CODE (arg1) != INTEGER_CST\n+\t    || TREE_INT_CST_LOW (arg1) > (n_elts -1))\n+\t  return false;\n+\tlhs = gimple_call_lhs (stmt);\n+\ttree lhs_type = TREE_TYPE (lhs);\n+\ttree arg0_type = TREE_TYPE (arg0);\n+\ttree splat;\n+\tif (TREE_CODE (arg0) == VECTOR_CST)\n+\t  splat = VECTOR_CST_ELT (arg0, TREE_INT_CST_LOW (arg1));\n+\telse\n+\t  {\n+\t    /* Determine (in bits) the length and start location of the\n+\t       splat value for a call to the tree_vec_extract helper.  */\n+\t    int splat_elem_size = TREE_INT_CST_LOW (size_in_bytes (arg0_type))\n+\t\t\t\t  * BITS_PER_UNIT / n_elts;\n+\t    int splat_start_bit = TREE_INT_CST_LOW (arg1) * splat_elem_size;\n+\t    tree len = build_int_cst (bitsizetype, splat_elem_size);\n+\t    tree start = build_int_cst (bitsizetype, splat_start_bit);\n+\t    splat = tree_vec_extract (gsi, TREE_TYPE (lhs_type), arg0,\n+\t\t\t\t      len, start);\n+\t  }\n+\t/* And finally, build the new vector.  */\n+\ttree splat_tree = build_vector_from_val (lhs_type, splat);\n+\tg = gimple_build_assign (lhs, splat_tree);\n+\tgimple_set_location (g, gimple_location (stmt));\n+\tgsi_replace (gsi, g, true);\n+\treturn true;\n       }\n \n     /* vec_mergel (integrals).  */"}, {"sha": "fcb0d31bef39a580a35900ee70dc347d594e4193", "filename": "gcc/gimple-fold.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6847c656b4153fbd0b552ac5051dc7b3ec44246a/gcc%2Fgimple-fold.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6847c656b4153fbd0b552ac5051dc7b3ec44246a/gcc%2Fgimple-fold.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.h?ref=6847c656b4153fbd0b552ac5051dc7b3ec44246a", "patch": "@@ -61,6 +61,7 @@ extern bool gimple_fold_builtin_snprintf (gimple_stmt_iterator *);\n extern bool arith_code_with_undefined_signed_overflow (tree_code);\n extern gimple_seq rewrite_to_defined_overflow (gimple *);\n extern void replace_call_with_value (gimple_stmt_iterator *, tree);\n+extern tree tree_vec_extract (gimple_stmt_iterator *, tree, tree, tree, tree);\n \n /* gimple_build, functionally matching fold_buildN, outputs stmts\n    int the provided sequence, matching and simplifying them on-the-fly."}, {"sha": "1c9701ddffa5c449c4cc3101772c65c75127b154", "filename": "gcc/tree-vect-generic.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6847c656b4153fbd0b552ac5051dc7b3ec44246a/gcc%2Ftree-vect-generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6847c656b4153fbd0b552ac5051dc7b3ec44246a/gcc%2Ftree-vect-generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-generic.c?ref=6847c656b4153fbd0b552ac5051dc7b3ec44246a", "patch": "@@ -120,7 +120,7 @@ typedef tree (*elem_op_func) (gimple_stmt_iterator *,\n \t\t\t      tree, tree, tree, tree, tree, enum tree_code,\n \t\t\t      tree);\n \n-static inline tree\n+tree\n tree_vec_extract (gimple_stmt_iterator *gsi, tree type,\n \t\t  tree t, tree bitsize, tree bitpos)\n {"}]}