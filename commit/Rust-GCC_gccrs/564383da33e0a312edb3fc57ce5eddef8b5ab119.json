{"sha": "564383da33e0a312edb3fc57ce5eddef8b5ab119", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTY0MzgzZGEzM2UwYTMxMmVkYjNmYzU3Y2U1ZWRkZWY4YjVhYjExOQ==", "commit": {"author": {"name": "Thomas Quinot", "email": "quinot@adacore.com", "date": "2005-06-16T08:41:50Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-06-16T08:41:50Z"}, "message": "re PR ada/6717 (Race condition in GNAT.Sockets.Create_Selector)\n\n2005-06-14  Thomas Quinot  <quinot@adacore.com>\n\n\tPR ada/6717\n\n\t* g-socket.ads, g-socket.adb (Inet_Addr): Special case the all-ones\n\tbroadcast address.\n\t(Create_Selector): Bind listening socket used to create the signalling\n\tsocket pair to 127.0.0.1 to limit the scope for 'theft' of connection.\n\tSet listen backlog to 1 to ensure that we detect socket theft by a\n\tfailure of our own connect(2) call.\n\t(Check_Selector): Improve documentation of the selector mechanism.\n\t(Broadcast_Inet_Addr): New constant.\n\nFrom-SVN: r101043", "tree": {"sha": "9a3decf2d8760e995c4cab0cca0f7835b0284741", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a3decf2d8760e995c4cab0cca0f7835b0284741"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/564383da33e0a312edb3fc57ce5eddef8b5ab119", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/564383da33e0a312edb3fc57ce5eddef8b5ab119", "html_url": "https://github.com/Rust-GCC/gccrs/commit/564383da33e0a312edb3fc57ce5eddef8b5ab119", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/564383da33e0a312edb3fc57ce5eddef8b5ab119/comments", "author": null, "committer": null, "parents": [{"sha": "e5a97c132907d389b09a5f0d8f6ff94314d4c390", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5a97c132907d389b09a5f0d8f6ff94314d4c390", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5a97c132907d389b09a5f0d8f6ff94314d4c390"}], "stats": {"total": 91, "additions": 55, "deletions": 36}, "files": [{"sha": "0485abf9a0d3bf265d875c96e4e997242a53f096", "filename": "gcc/ada/g-socket.adb", "status": "modified", "additions": 31, "deletions": 21, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564383da33e0a312edb3fc57ce5eddef8b5ab119/gcc%2Fada%2Fg-socket.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564383da33e0a312edb3fc57ce5eddef8b5ab119/gcc%2Fada%2Fg-socket.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socket.adb?ref=564383da33e0a312edb3fc57ce5eddef8b5ab119", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---           Copyright (C) 2001-2004 Ada Core Technologies, Inc.            --\n+--           Copyright (C) 2001-2005 Ada Core Technologies, Inc.            --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -37,7 +37,6 @@ with Ada.Unchecked_Conversion;\n \n with Interfaces.C.Strings;\n \n-with GNAT.OS_Lib;                use GNAT.OS_Lib;\n with GNAT.Sockets.Constants;\n with GNAT.Sockets.Thin;          use GNAT.Sockets.Thin;\n with GNAT.Task_Lock;\n@@ -651,11 +650,10 @@ package body GNAT.Sockets is\n       Err : Integer;\n \n    begin\n-      --  We open two signalling sockets. One of them is used to\n-      --  send data to the other, which is included in a C_Select\n-      --  socket set. The communication is used to force the call\n-      --  to C_Select to complete, and the waiting task to resume\n-      --  its execution.\n+      --  We open two signalling sockets. One of them is used to send data to\n+      --  send data to the other, which is included in a C_Select socket set.\n+      --  The communication is used to force the call to C_Select to complete,\n+      --  and the waiting task to resume its execution.\n \n       --  Create a listening socket\n \n@@ -664,8 +662,13 @@ package body GNAT.Sockets is\n          Raise_Socket_Error (Socket_Errno);\n       end if;\n \n-      --  Sin is already correctly initialized. Bind the socket to any\n-      --  unused port.\n+      --  Bind the socket to any unused port on localhost\n+\n+      Sin.Sin_Addr.S_B1 := 127;\n+      Sin.Sin_Addr.S_B2 := 0;\n+      Sin.Sin_Addr.S_B3 := 0;\n+      Sin.Sin_Addr.S_B4 := 1;\n+      Sin.Sin_Port := 0;\n \n       Res := C_Bind (S0, Sin'Address, Len);\n       if Res = Failure then\n@@ -684,7 +687,10 @@ package body GNAT.Sockets is\n          Raise_Socket_Error (Err);\n       end if;\n \n-      Res := C_Listen (S0, 2);\n+      --  Set backlog to 1 to guarantee that exactly one call to connect(2)\n+      --  can succeed.\n+\n+      Res := C_Listen (S0, 1);\n \n       if Res = Failure then\n          Err := Socket_Errno;\n@@ -700,13 +706,6 @@ package body GNAT.Sockets is\n          Raise_Socket_Error (Err);\n       end if;\n \n-      --  Use INADDR_LOOPBACK\n-\n-      Sin.Sin_Addr.S_B1 := 127;\n-      Sin.Sin_Addr.S_B2 := 0;\n-      Sin.Sin_Addr.S_B3 := 0;\n-      Sin.Sin_Addr.S_B4 := 1;\n-\n       --  Do a connect and accept the connection\n \n       Res := C_Connect (S1, Sin'Address, Len);\n@@ -718,6 +717,10 @@ package body GNAT.Sockets is\n          Raise_Socket_Error (Err);\n       end if;\n \n+      --  Since the call to connect(2) has suceeded and the backlog limit on\n+      --  the listening socket is 1, we know that there is now exactly one\n+      --  pending connection on S0, which is the one from S1.\n+\n       S2 := C_Accept (S0, Sin'Address, Len'Access);\n \n       if S2 = Failure then\n@@ -1232,17 +1235,24 @@ package body GNAT.Sockets is\n    function Inet_Addr (Image : String) return Inet_Addr_Type is\n       use Interfaces.C.Strings;\n \n-      Img : chars_ptr := New_String (Image);\n+      Img : chars_ptr;\n       Res : C.int;\n-      Err : Integer;\n \n    begin\n+      --  Special case for the all-ones broadcast address: this address\n+      --  has the same in_addr_t value as Failure, and thus cannot be\n+      --  properly returned by inet_addr(3).\n+\n+      if Image (Image'Range) = \"255.255.255.255\" then\n+         return Broadcast_Inet_Addr;\n+      end if;\n+\n+      Img := New_String (Image);\n       Res := C_Inet_Addr (Img);\n-      Err := Errno;\n       Free (Img);\n \n       if Res = Failure then\n-         Raise_Socket_Error (Err);\n+         Raise_Socket_Error (Constants.EINVAL);\n       end if;\n \n       return To_Inet_Addr (To_In_Addr (Res));"}, {"sha": "9945b2f63d34083df327b78b0f4d5ab7790d2388", "filename": "gcc/ada/g-socket.ads", "status": "modified", "additions": 24, "deletions": 15, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/564383da33e0a312edb3fc57ce5eddef8b5ab119/gcc%2Fada%2Fg-socket.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/564383da33e0a312edb3fc57ce5eddef8b5ab119/gcc%2Fada%2Fg-socket.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socket.ads?ref=564383da33e0a312edb3fc57ce5eddef8b5ab119", "patch": "@@ -433,8 +433,9 @@ package GNAT.Sockets is\n    --  treated like a wildcard enabling all addresses. No_Inet_Addr provides a\n    --  special value to denote uninitialized inet addresses.\n \n-   Any_Inet_Addr : constant Inet_Addr_Type;\n-   No_Inet_Addr  : constant Inet_Addr_Type;\n+   Any_Inet_Addr       : constant Inet_Addr_Type;\n+   No_Inet_Addr        : constant Inet_Addr_Type;\n+   Broadcast_Inet_Addr : constant Inet_Addr_Type;\n \n    type Sock_Addr_Type (Family : Family_Type := Family_Inet) is record\n       Addr : Inet_Addr_Type (Family);\n@@ -912,15 +913,16 @@ package GNAT.Sockets is\n    procedure Set (Item : in out Socket_Set_Type; Socket : Socket_Type);\n    --  Insert Socket into Item\n \n-   --  C select() waits for a number of file descriptors to change status.\n-   --  Usually, three independent sets of descriptors are watched (read, write\n-   --  and exception). A timeout gives an upper bound on the amount of time\n-   --  elapsed before select returns. This function blocks until an event\n-   --  occurs. On some platforms, C select can block the full process.\n+   --  The select(2) system call waits for events to occur on any of a set of\n+   --  file descriptors. Usually, three independent sets of descriptors are\n+   --  watched (read, write  and exception). A timeout gives an upper bound\n+   --  on the amount of time elapsed before select returns. This function\n+   --  blocks until an event occurs. On some platforms, the select(2) system\n+   --  can block the full process (not just the calling thread).\n    --\n    --  Check_Selector provides the very same behaviour. The only difference is\n    --  that it does not watch for exception events. Note that on some\n-   --  platforms it is kept process blocking in purpose. The timeout parameter\n+   --  platforms it is kept process blocking on purpose. The timeout parameter\n    --  allows the user to have the behaviour he wants. Abort_Selector allows\n    --  to abort safely a Check_Selector that is blocked forever. A special\n    --  file descriptor is opened by Create_Selector and included in each call\n@@ -958,16 +960,19 @@ package GNAT.Sockets is\n       Status       : out Selector_Status;\n       Timeout      : Selector_Duration := Forever);\n    --  Return when one Socket in R_Socket_Set has some data to be read or if\n-   --  one Socket in W_Socket_Set is ready to receive some data. In these\n+   --  one Socket in W_Socket_Set is ready to transmit some data. In these\n    --  cases Status is set to Completed and sockets that are ready are set in\n    --  R_Socket_Set or W_Socket_Set. Status is set to Expired if no socket was\n    --  ready after a Timeout expiration. Status is set to Aborted if an abort\n    --  signal has been received while checking socket status. As this\n    --  procedure returns when Timeout occurs, it is a design choice to keep\n    --  this procedure process blocking. Note that a Timeout of 0.0 returns\n-   --  immediately. Also note that two different objects must be passed as\n-   --  R_Socket_Set and W_Socket_Set (even if they contain the same set of\n-   --  Sockets), or some event will be lost.\n+   --  immediately. Also note that two different Socket_Set_Type objects must\n+   --  be passed as R_Socket_Set and W_Socket_Set (even if they denote the\n+   --  same set of Sockets), or some event will be lost.\n+   --  Socket_Error is raised when the select(2) system call returns an\n+   --  error condition, or when a read error occurs on the signalling socket\n+   --  used for the implementation of Abort_Selector.\n \n    procedure Check_Selector\n      (Selector     : in out Selector_Type;\n@@ -1027,10 +1032,14 @@ private\n    Any_Port : constant Port_Type := 0;\n    No_Port  : constant Port_Type := 0;\n \n-   Any_Inet_Addr : constant Inet_Addr_Type := (Family_Inet, (others => 0));\n-   No_Inet_Addr  : constant Inet_Addr_Type := (Family_Inet, (others => 0));\n+   Any_Inet_Addr       : constant Inet_Addr_Type :=\n+                           (Family_Inet, (others => 0));\n+   No_Inet_Addr        : constant Inet_Addr_Type :=\n+                           (Family_Inet, (others => 0));\n+   Broadcast_Inet_Addr : constant Inet_Addr_Type :=\n+                           (Family_Inet, (others => 255));\n \n-   No_Sock_Addr  : constant Sock_Addr_Type := (Family_Inet, No_Inet_Addr, 0);\n+   No_Sock_Addr : constant Sock_Addr_Type := (Family_Inet, No_Inet_Addr, 0);\n \n    Max_Name_Length : constant := 64;\n    --  The constant MAXHOSTNAMELEN is usually set to 64"}]}