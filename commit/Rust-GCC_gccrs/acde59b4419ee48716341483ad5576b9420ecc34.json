{"sha": "acde59b4419ee48716341483ad5576b9420ecc34", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWNkZTU5YjQ0MTllZTQ4NzE2MzQxNDgzYWQ1NTc2Yjk0MjBlY2MzNA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2007-07-07T07:31:54Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2007-07-07T07:31:54Z"}, "message": "re PR c++/32232 (ICE in resolve_overloaded_unification)\n\n\tPR c++/32232\n\t* pt.c (resolve_overloaded_unification): Robustify.  Return a\n\tbool, not an int.\n\t(type_unification_real): Adjust accordingly.\n\tPR c++/32232\n\t* g++.dg/template/overload9.C: New test.\n\nFrom-SVN: r126435", "tree": {"sha": "bca463c42618d10c0ca30ba315e4729c03478151", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bca463c42618d10c0ca30ba315e4729c03478151"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/acde59b4419ee48716341483ad5576b9420ecc34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acde59b4419ee48716341483ad5576b9420ecc34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acde59b4419ee48716341483ad5576b9420ecc34", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acde59b4419ee48716341483ad5576b9420ecc34/comments", "author": null, "committer": null, "parents": [{"sha": "e9bd9cf340129729a451df77baee39f5b2978226", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9bd9cf340129729a451df77baee39f5b2978226", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9bd9cf340129729a451df77baee39f5b2978226"}], "stats": {"total": 87, "additions": 60, "deletions": 27}, "files": [{"sha": "2526a43ff0328419c21608282b8a828af27ad143", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acde59b4419ee48716341483ad5576b9420ecc34/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acde59b4419ee48716341483ad5576b9420ecc34/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=acde59b4419ee48716341483ad5576b9420ecc34", "patch": "@@ -1,3 +1,10 @@\n+2007-07-07  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/32232\n+\t* pt.c (resolve_overloaded_unification): Robustify.  Return a\n+\tbool, not an int.\n+\t(type_unification_real): Adjust accordingly.\n+\n 2007-07-06  Richard Guenther  <rguenther@suse.de>\n \n \t* init.c (build_new_1): Use the correct pointer type."}, {"sha": "06e94e74fdb7933535e8f3e0f2759b426c329cbe", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 30, "deletions": 27, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acde59b4419ee48716341483ad5576b9420ecc34/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acde59b4419ee48716341483ad5576b9420ecc34/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=acde59b4419ee48716341483ad5576b9420ecc34", "patch": "@@ -97,8 +97,8 @@ static GTY(()) VEC(tree,gc) *canonical_template_parms;\n \n static void push_access_scope (tree);\n static void pop_access_scope (tree);\n-static int resolve_overloaded_unification (tree, tree, tree, tree,\n-\t\t\t\t\t   unification_kind_t, int);\n+static bool resolve_overloaded_unification (tree, tree, tree, tree,\n+\t\t\t\t\t    unification_kind_t, int);\n static int try_one_overload (tree, tree, tree, tree, tree,\n \t\t\t     unification_kind_t, int, bool);\n static int unify (tree, tree, tree, tree, int);\n@@ -11471,17 +11471,18 @@ type_unification_real (tree tparms,\n \t  gcc_assert (TREE_TYPE (arg) != NULL_TREE);\n \t  if (type_unknown_p (arg))\n \t    {\n-\t      /* [temp.deduct.type] A template-argument can be deduced from\n-\t\t a pointer to function or pointer to member function\n-\t\t argument if the set of overloaded functions does not\n-\t\t contain function templates and at most one of a set of\n-\t\t overloaded functions provides a unique match.  */\n+\t      /* [temp.deduct.type] \n \n+\t         A template-argument can be deduced from a pointer to\n+\t\t function or pointer to member function argument if\n+\t\t the set of overloaded functions does not contain\n+\t\t function templates and at most one of a set of\n+\t\t overloaded functions provides a unique match.  */\n \t      if (resolve_overloaded_unification\n-\t\t  (tparms, targs, parm, arg, strict, sub_strict)\n-\t\t  != 0)\n-\t\treturn 1;\n-\t      continue;\n+\t\t  (tparms, targs, parm, arg, strict, sub_strict))\n+\t\tcontinue;\n+\n+\t      return 1;\n \t    }\n \t  arg_expr = arg;\n \t  arg = unlowered_expr_type (arg);\n@@ -11611,12 +11612,13 @@ type_unification_real (tree tparms,\n   return 0;\n }\n \n-/* Subroutine of type_unification_real.  Args are like the variables at the\n-   call site.  ARG is an overloaded function (or template-id); we try\n-   deducing template args from each of the overloads, and if only one\n-   succeeds, we go with that.  Modifies TARGS and returns 0 on success.  */\n+/* Subroutine of type_unification_real.  Args are like the variables\n+   at the call site.  ARG is an overloaded function (or template-id);\n+   we try deducing template args from each of the overloads, and if\n+   only one succeeds, we go with that.  Modifies TARGS and returns\n+   true on success.  */\n \n-static int\n+static bool\n resolve_overloaded_unification (tree tparms,\n \t\t\t\ttree targs,\n \t\t\t\ttree parm,\n@@ -11675,16 +11677,17 @@ resolve_overloaded_unification (tree tparms,\n \t    }\n \t}\n     }\n+  else if (TREE_CODE (arg) != OVERLOAD\n+\t   && TREE_CODE (arg) != FUNCTION_DECL)\n+    /* If ARG is, for example, \"(0, &f)\" then its type will be unknown\n+       -- but the deduction does not succeed because the expression is\n+       not just the function on its own.  */\n+    return false;\n   else\n-    {\n-      gcc_assert (TREE_CODE (arg) == OVERLOAD\n-\t\t  || TREE_CODE (arg) == FUNCTION_DECL);\n-\n-      for (; arg; arg = OVL_NEXT (arg))\n-\tgood += try_one_overload (tparms, targs, tempargs, parm,\n-\t\t\t\t  TREE_TYPE (OVL_CURRENT (arg)),\n-\t\t\t\t  strict, sub_strict, addr_p);\n-    }\n+    for (; arg; arg = OVL_NEXT (arg))\n+      good += try_one_overload (tparms, targs, tempargs, parm,\n+\t\t\t\tTREE_TYPE (OVL_CURRENT (arg)),\n+\t\t\t\tstrict, sub_strict, addr_p);\n \n   /* [temp.deduct.type] A template-argument can be deduced from a pointer\n      to function or pointer to member function argument if the set of\n@@ -11702,9 +11705,9 @@ resolve_overloaded_unification (tree tparms,\n \t  TREE_VEC_ELT (targs, i) = TREE_VEC_ELT (tempargs, i);\n     }\n   if (good)\n-    return 0;\n+    return true;\n \n-  return 1;\n+  return false;\n }\n \n /* Subroutine of resolve_overloaded_unification; does deduction for a single"}, {"sha": "1f99b0068fcbb343d8da4e37b2ab7847a6e5e0d9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acde59b4419ee48716341483ad5576b9420ecc34/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acde59b4419ee48716341483ad5576b9420ecc34/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=acde59b4419ee48716341483ad5576b9420ecc34", "patch": "@@ -1,3 +1,8 @@\n+2007-07-07  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/32232\n+\t* g++.dg/template/overload9.C: New test.\n+\n 2007-07-06  Daniel Berlin  <dberlin@dberlin.org>\n \n \t* gcc.dg/tree-ssa/ssa-pre-17.c: New test."}, {"sha": "bc73c41fc8870bd9dd94ec7e770238992854ecc7", "filename": "gcc/testsuite/g++.dg/template/overload9.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acde59b4419ee48716341483ad5576b9420ecc34/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Foverload9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acde59b4419ee48716341483ad5576b9420ecc34/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Foverload9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Foverload9.C?ref=acde59b4419ee48716341483ad5576b9420ecc34", "patch": "@@ -0,0 +1,18 @@\n+// PR c++/32232\n+\n+template <typename T> struct A;\n+template <typename T> struct B {};\n+template <typename T> A<T>& operator<<(A<T>&, const B<T>&);\n+\n+template <typename T>\n+struct A \n+{\n+  A<T>& operator<<(A<T>& (*)(A<T>&)); // { dg-error \"candidate\" }\n+};\n+\n+template <typename T> A<T>& foo(A<T>&);\n+extern A<char> c;\n+\n+int main () {\n+  c << (1, foo); // { dg-error \"no match\" }\n+}"}]}