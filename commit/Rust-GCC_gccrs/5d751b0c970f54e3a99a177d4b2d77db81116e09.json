{"sha": "5d751b0c970f54e3a99a177d4b2d77db81116e09", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQ3NTFiMGM5NzBmNTRlM2E5OWExNzdkNGIyZDc3ZGI4MTExNmUwOQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2013-04-02T18:25:36Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2013-04-02T18:25:36Z"}, "message": "re PR c++/34949 (Dead code in empty destructors.)\n\n\tPR c++/34949\n\t* tree-cfg.c (verify_gimple_assign_single): Allow lhs\n\tof gimple_clobber_p to be MEM_REF.\n\t* gimplify.c (gimplify_modify_expr): Gimplify *to_p of\n\tan assignment from TREE_CLOBBER_P.  Allow it to be MEM_REF\n\tafter gimplification.\n\t* asan.c (get_mem_ref_of_assignment): Don't instrument\n\tgimple_clobber_p stmts.\n\t* tree-ssa-dse.c (dse_optimize_stmt): Allow DSE of\n\tgimple_clobber_p stmt if they have MEM_REF lhs and\n\tare dead because of another gimple_clobber_p stmt.\n\t* tree-ssa-live.c (clear_unused_block_pointer): Treat\n\tgimple_clobber_p stmts like debug stmts.\n\t(remove_unused_locals): Remove clobbers with MEM_REF lhs\n\tthat refer to unused VAR_DECLs or uninitialized values.\n\t* tree-sra.c (sra_ipa_reset_debug_stmts): Also remove\n\tgimple_clobber_p stmts if they refer to removed parameters.\n\t(get_repl_default_def_ssa_name, sra_ipa_modify_expr): Fix up\n\tformatting.\n\nFrom-SVN: r197369", "tree": {"sha": "4ee3c2b7dfdc5ebe044adb7a6e509a7d8ffa2e13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ee3c2b7dfdc5ebe044adb7a6e509a7d8ffa2e13"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d751b0c970f54e3a99a177d4b2d77db81116e09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d751b0c970f54e3a99a177d4b2d77db81116e09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d751b0c970f54e3a99a177d4b2d77db81116e09", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d751b0c970f54e3a99a177d4b2d77db81116e09/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e594716a6a02ffcc0a33862ff6ea8325ac2263e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e594716a6a02ffcc0a33862ff6ea8325ac2263e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e594716a6a02ffcc0a33862ff6ea8325ac2263e8"}], "stats": {"total": 79, "additions": 66, "deletions": 13}, "files": [{"sha": "e6cfd74557233d5370af2ba270fe50166e993b27", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d751b0c970f54e3a99a177d4b2d77db81116e09/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d751b0c970f54e3a99a177d4b2d77db81116e09/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5d751b0c970f54e3a99a177d4b2d77db81116e09", "patch": "@@ -1,3 +1,25 @@\n+2013-04-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/34949\n+\t* tree-cfg.c (verify_gimple_assign_single): Allow lhs\n+\tof gimple_clobber_p to be MEM_REF.\n+\t* gimplify.c (gimplify_modify_expr): Gimplify *to_p of\n+\tan assignment from TREE_CLOBBER_P.  Allow it to be MEM_REF\n+\tafter gimplification.\n+\t* asan.c (get_mem_ref_of_assignment): Don't instrument\n+\tgimple_clobber_p stmts.\n+\t* tree-ssa-dse.c (dse_optimize_stmt): Allow DSE of\n+\tgimple_clobber_p stmt if they have MEM_REF lhs and\n+\tare dead because of another gimple_clobber_p stmt.\n+\t* tree-ssa-live.c (clear_unused_block_pointer): Treat\n+\tgimple_clobber_p stmts like debug stmts.\n+\t(remove_unused_locals): Remove clobbers with MEM_REF lhs\n+\tthat refer to unused VAR_DECLs or uninitialized values.\n+\t* tree-sra.c (sra_ipa_reset_debug_stmts): Also remove\n+\tgimple_clobber_p stmts if they refer to removed parameters.\n+\t(get_repl_default_def_ssa_name, sra_ipa_modify_expr): Fix up\n+\tformatting.\n+\n 2013-04-02  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (*testqi_ext_3): Merge with *testqi_ext_3_rex64"}, {"sha": "36eccf93cbb3dff95931b3091360340af2f296e1", "filename": "gcc/asan.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d751b0c970f54e3a99a177d4b2d77db81116e09/gcc%2Fasan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d751b0c970f54e3a99a177d4b2d77db81116e09/gcc%2Fasan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.c?ref=5d751b0c970f54e3a99a177d4b2d77db81116e09", "patch": "@@ -412,7 +412,8 @@ get_mem_ref_of_assignment (const gimple assignment,\n {\n   gcc_assert (gimple_assign_single_p (assignment));\n \n-  if (gimple_store_p (assignment))\n+  if (gimple_store_p (assignment)\n+      && !gimple_clobber_p (assignment))\n     {\n       ref->start = gimple_assign_lhs (assignment);\n       *ref_is_store = true;"}, {"sha": "a93ce7c2ad272002e8fb691c286eeb8f8b6bbce6", "filename": "gcc/gimplify.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d751b0c970f54e3a99a177d4b2d77db81116e09/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d751b0c970f54e3a99a177d4b2d77db81116e09/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=5d751b0c970f54e3a99a177d4b2d77db81116e09", "patch": "@@ -4840,7 +4840,12 @@ gimplify_modify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n      so handle it here.  */\n   if (TREE_CLOBBER_P (*from_p))\n     {\n-      gcc_assert (!want_value && TREE_CODE (*to_p) == VAR_DECL);\n+      ret = gimplify_expr (to_p, pre_p, post_p, is_gimple_lvalue, fb_lvalue);\n+      if (ret == GS_ERROR)\n+\treturn ret;\n+      gcc_assert (!want_value\n+\t\t  && (TREE_CODE (*to_p) == VAR_DECL\n+\t\t      || TREE_CODE (*to_p) == MEM_REF));\n       gimplify_seq_add_stmt (pre_p, gimple_build_assign (*to_p, *from_p));\n       *expr_p = NULL;\n       return GS_ALL_DONE;"}, {"sha": "8a36976cc3b8b2d2eeadca62f10ac52549ac38ce", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d751b0c970f54e3a99a177d4b2d77db81116e09/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d751b0c970f54e3a99a177d4b2d77db81116e09/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=5d751b0c970f54e3a99a177d4b2d77db81116e09", "patch": "@@ -3815,9 +3815,9 @@ verify_gimple_assign_single (gimple stmt)\n     }\n \n   if (gimple_clobber_p (stmt)\n-      && !DECL_P (lhs))\n+      && !(DECL_P (lhs) || TREE_CODE (lhs) == MEM_REF))\n     {\n-      error (\"non-decl LHS in clobber statement\");\n+      error (\"non-decl/MEM_REF LHS in clobber statement\");\n       debug_generic_expr (lhs);\n       return true;\n     }"}, {"sha": "78efa255b1d88bf4dfe7d10e922c6c1824478898", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d751b0c970f54e3a99a177d4b2d77db81116e09/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d751b0c970f54e3a99a177d4b2d77db81116e09/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=5d751b0c970f54e3a99a177d4b2d77db81116e09", "patch": "@@ -2965,8 +2965,8 @@ sra_modify_constructor_assign (gimple *stmt, gimple_stmt_iterator *gsi)\n static tree\n get_repl_default_def_ssa_name (struct access *racc)\n {\n-  gcc_checking_assert (!racc->grp_to_be_replaced &&\n-\t\t       !racc->grp_to_be_debug_replaced);\n+  gcc_checking_assert (!racc->grp_to_be_replaced\n+\t\t       && !racc->grp_to_be_debug_replaced);\n   if (!racc->replacement_decl)\n     racc->replacement_decl = create_access_replacement (racc);\n   return get_or_create_ssa_default_def (cfun, racc->replacement_decl);\n@@ -4462,8 +4462,8 @@ sra_ipa_modify_expr (tree *expr, bool convert,\n     {\n       adj = &adjustments[i];\n \n-      if (adj->base == base &&\n-\t  (adj->offset == offset || adj->remove_param))\n+      if (adj->base == base\n+\t  && (adj->offset == offset || adj->remove_param))\n \t{\n \t  cand = adj;\n \t  break;\n@@ -4676,6 +4676,14 @@ sra_ipa_reset_debug_stmts (ipa_parm_adjustment_vec adjustments)\n       if (name)\n \tFOR_EACH_IMM_USE_STMT (stmt, ui, name)\n \t  {\n+\t    if (gimple_clobber_p (stmt))\n+\t      {\n+\t\tgimple_stmt_iterator cgsi = gsi_for_stmt (stmt);\n+\t\tunlink_stmt_vdef (stmt);\n+\t\tgsi_remove (&cgsi, true);\n+\t\trelease_defs (stmt);\n+\t\tcontinue;\n+\t      }\n \t    /* All other users must have been removed by\n \t       ipa_sra_modify_function_body.  */\n \t    gcc_assert (is_gimple_debug (stmt));"}, {"sha": "e0c3b745b1e9f636885ad324c3d241ec28c1f9e9", "filename": "gcc/tree-ssa-dse.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d751b0c970f54e3a99a177d4b2d77db81116e09/gcc%2Ftree-ssa-dse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d751b0c970f54e3a99a177d4b2d77db81116e09/gcc%2Ftree-ssa-dse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dse.c?ref=5d751b0c970f54e3a99a177d4b2d77db81116e09", "patch": "@@ -218,7 +218,10 @@ dse_optimize_stmt (gimple_stmt_iterator *gsi)\n   if (is_gimple_call (stmt) && gimple_call_fndecl (stmt))\n     return;\n \n-  if (gimple_has_volatile_ops (stmt))\n+  /* Don't return early on *this_2(D) ={v} {CLOBBER}.  */\n+  if (gimple_has_volatile_ops (stmt)\n+      && (!gimple_clobber_p (stmt)\n+\t  || TREE_CODE (gimple_assign_lhs (stmt)) != MEM_REF))\n     return;\n \n   if (is_gimple_assign (stmt))\n@@ -228,6 +231,12 @@ dse_optimize_stmt (gimple_stmt_iterator *gsi)\n       if (!dse_possible_dead_store_p (stmt, &use_stmt))\n \treturn;\n \n+      /* But only remove *this_2(D) ={v} {CLOBBER} if killed by\n+\t another clobber stmt.  */\n+      if (gimple_clobber_p (stmt)\n+\t  && !gimple_clobber_p (use_stmt))\n+\treturn;\n+\n       /* If we have precisely one immediate use at this point and the\n \t stores are to the same memory location or there is a chain of\n \t virtual uses from stmt and the stmt which stores to that same"}, {"sha": "c8b9ce8b016ad5e4237908a8770e08c93ef2a997", "filename": "gcc/tree-ssa-live.c", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d751b0c970f54e3a99a177d4b2d77db81116e09/gcc%2Ftree-ssa-live.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d751b0c970f54e3a99a177d4b2d77db81116e09/gcc%2Ftree-ssa-live.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-live.c?ref=5d751b0c970f54e3a99a177d4b2d77db81116e09", "patch": "@@ -623,8 +623,8 @@ clear_unused_block_pointer_1 (tree *tp, int *, void *)\n   return NULL_TREE;\n }\n \n-/* Set all block pointer in debug stmt to NULL if the block is unused,\n-   so that they will not be streamed out.  */\n+/* Set all block pointer in debug or clobber stmt to NULL if the block\n+   is unused, so that they will not be streamed out.  */\n \n static void\n clear_unused_block_pointer (void)\n@@ -639,7 +639,7 @@ clear_unused_block_pointer (void)\n \ttree b;\n \tgimple stmt = gsi_stmt (gsi);\n \n-\tif (!is_gimple_debug (stmt))\n+\tif (!is_gimple_debug (stmt) && !gimple_clobber_p (stmt))\n \t  continue;\n \tb = gimple_block (stmt);\n \tif (b && !TREE_USED (b))\n@@ -827,7 +827,15 @@ remove_unused_locals (void)\n \t    if (gimple_clobber_p (stmt))\n \t      {\n \t\ttree lhs = gimple_assign_lhs (stmt);\n-\t\tif (TREE_CODE (lhs) == VAR_DECL && !is_used_p (lhs))\n+\t\ttree base = get_base_address (lhs);\n+\t\t/* Remove clobbers referencing unused vars, or clobbers\n+\t\t   with MEM_REF lhs referencing uninitialized pointers.  */\n+\t\tif ((TREE_CODE (base) == VAR_DECL && !is_used_p (base))\n+\t\t    || (TREE_CODE (lhs) == MEM_REF\n+\t\t\t&& TREE_CODE (TREE_OPERAND (lhs, 0)) == SSA_NAME\n+\t\t\t&& SSA_NAME_IS_DEFAULT_DEF (TREE_OPERAND (lhs, 0))\n+\t\t\t&& (TREE_CODE (SSA_NAME_VAR (TREE_OPERAND (lhs, 0)))\n+\t\t\t    != PARM_DECL)))\n \t\t  {\n \t\t    unlink_stmt_vdef (stmt);\n \t\t    gsi_remove (&gsi, true);"}]}