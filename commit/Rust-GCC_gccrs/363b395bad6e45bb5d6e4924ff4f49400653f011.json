{"sha": "363b395bad6e45bb5d6e4924ff4f49400653f011", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzYzYjM5NWJhZDZlNDViYjVkNmU0OTI0ZmY0ZjQ5NDAwNjUzZjAxMQ==", "commit": {"author": {"name": "Jackson Woodruff", "email": "jackson.woodruff@arm.com", "date": "2018-08-02T10:39:23Z"}, "committer": {"name": "Jackson Woodruff", "email": "jcw@gcc.gnu.org", "date": "2018-08-02T10:39:23Z"}, "message": "re PR target/86014 ([AArch64] missed LDP optimization)\n\ngcc/\n2018-08-02  Jackson Woodruff  <jackson.woodruff@arm.com>\n\n\tPR target/86014\n\t* config/aarch64/aarch64.c (aarch64_operands_adjust_ok_for_ldpstp):\n\tNo longer check last store for clobber of address register.\n\n\ngcc/testsuite\n2018-08-02  Jackson Woodruff  <jackson.woodruff@arm.com>\n\n\tPR target/86014\n\t* gcc.target/aarch64/ldp_stp_13.c: New test.\n\nFrom-SVN: r263249", "tree": {"sha": "dc6012ac1091127243d86548e32f1e4abee0854f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc6012ac1091127243d86548e32f1e4abee0854f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/363b395bad6e45bb5d6e4924ff4f49400653f011", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/363b395bad6e45bb5d6e4924ff4f49400653f011", "html_url": "https://github.com/Rust-GCC/gccrs/commit/363b395bad6e45bb5d6e4924ff4f49400653f011", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/363b395bad6e45bb5d6e4924ff4f49400653f011/comments", "author": null, "committer": null, "parents": [{"sha": "ca498a11887e4d6b6a635db3e7df8b93804a4478", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca498a11887e4d6b6a635db3e7df8b93804a4478", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca498a11887e4d6b6a635db3e7df8b93804a4478"}], "stats": {"total": 68, "additions": 49, "deletions": 19}, "files": [{"sha": "5a5b7570a0d97923fa2605e0d6bc82a03b0f75fc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/363b395bad6e45bb5d6e4924ff4f49400653f011/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/363b395bad6e45bb5d6e4924ff4f49400653f011/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=363b395bad6e45bb5d6e4924ff4f49400653f011", "patch": "@@ -1,3 +1,9 @@\n+2018-08-02  Jackson Woodruff  <jackson.woodruff@arm.com>\n+\n+\tPR target/86014\n+\t* config/aarch64/aarch64.c (aarch64_operands_adjust_ok_for_ldpstp):\n+\tNo longer check last store for clobber of address register.\n+\n 2018-08-02  Martin Liska  <mliska@suse.cz>\n \n         PR gcov-profile/86817"}, {"sha": "014f9f64066a2ee1fb370b4ddbed61236d7bc332", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 20, "deletions": 19, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/363b395bad6e45bb5d6e4924ff4f49400653f011/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/363b395bad6e45bb5d6e4924ff4f49400653f011/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=363b395bad6e45bb5d6e4924ff4f49400653f011", "patch": "@@ -17270,9 +17270,26 @@ aarch64_operands_adjust_ok_for_ldpstp (rtx *operands, bool load,\n \treturn false;\n     }\n \n-  /* Check if addresses are clobbered by load.  */\n-  if (load)\n-    for (int i = 0; i < num_insns; i++)\n+  /* Check if the registers are of same class.  */\n+  rclass = REG_P (reg[0]) && FP_REGNUM_P (REGNO (reg[0]))\n+    ? FP_REGS : GENERAL_REGS;\n+\n+  for (int i = 1; i < num_insns; i++)\n+    if (REG_P (reg[i]) && FP_REGNUM_P (REGNO (reg[i])))\n+      {\n+\tif (rclass != FP_REGS)\n+\t  return false;\n+      }\n+    else\n+      {\n+\tif (rclass != GENERAL_REGS)\n+\t  return false;\n+      }\n+\n+  /* Only the last register in the order in which they occur\n+     may be clobbered by the load.  */\n+  if (rclass == GENERAL_REGS && load)\n+    for (int i = 0; i < num_insns - 1; i++)\n       if (reg_mentioned_p (reg[i], mem[i]))\n \treturn false;\n \n@@ -17312,22 +17329,6 @@ aarch64_operands_adjust_ok_for_ldpstp (rtx *operands, bool load,\n       && MEM_ALIGN (mem[0]) < 8 * BITS_PER_UNIT)\n     return false;\n \n-  /* Check if the registers are of same class.  */\n-  rclass = REG_P (reg[0]) && FP_REGNUM_P (REGNO (reg[0]))\n-    ? FP_REGS : GENERAL_REGS;\n-\n-  for (int i = 1; i < num_insns; i++)\n-    if (REG_P (reg[i]) && FP_REGNUM_P (REGNO (reg[i])))\n-      {\n-\tif (rclass != FP_REGS)\n-\t  return false;\n-      }\n-    else\n-      {\n-\tif (rclass != GENERAL_REGS)\n-\t  return false;\n-      }\n-\n   return true;\n }\n "}, {"sha": "0b5eba797fa75776b600808961ff4c0c7f123e2f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/363b395bad6e45bb5d6e4924ff4f49400653f011/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/363b395bad6e45bb5d6e4924ff4f49400653f011/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=363b395bad6e45bb5d6e4924ff4f49400653f011", "patch": "@@ -1,3 +1,8 @@\n+2018-08-02  Jackson Woodruff  <jackson.woodruff@arm.com>\n+\n+\tPR target/86014\n+\t* gcc.target/aarch64/ldp_stp_13.c: New test.\n+\n 2018-08-02  Thomas Preud'homme  <thomas.preudhomme@linaro.org>\n \n \tPR target/85434"}, {"sha": "9cc3942f153773e8ffe9bcaf07f6b32dc0d5f95e", "filename": "gcc/testsuite/gcc.target/aarch64/ldp_stp_13.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/363b395bad6e45bb5d6e4924ff4f49400653f011/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fldp_stp_13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/363b395bad6e45bb5d6e4924ff4f49400653f011/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fldp_stp_13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fldp_stp_13.c?ref=363b395bad6e45bb5d6e4924ff4f49400653f011", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mabi=ilp32\" } */\n+\n+long long\n+load_long (long long int *arr)\n+{\n+  return arr[400] << 1 + arr[401] << 1 + arr[403] << 1 + arr[404] << 1;\n+}\n+\n+/* { dg-final { scan-assembler-times \"ldp\\tx\\[0-9\\]+, x\\[0-9\\]+, \" 2 } } */\n+\n+int\n+load (int *arr)\n+{\n+  return arr[527] << 1 + arr[400] << 1 + arr[401] << 1 + arr[528] << 1;\n+}\n+\n+/* { dg-final { scan-assembler-times \"ldp\\tw\\[0-9\\]+, w\\[0-9\\]+, \" 2 } } */"}]}