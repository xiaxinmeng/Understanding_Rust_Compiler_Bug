{"sha": "2df4150075c03f8a292c40afd3bb25febb673578", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmRmNDE1MDA3NWMwM2Y4YTI5MmM0MGFmZDNiYjI1ZmViYjY3MzU3OA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-11-14T15:06:34Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-11-14T15:06:34Z"}, "message": "Make less use of get_same_sized_vectype\n\nSome callers of get_same_sized_vectype were dealing with operands that\nare constant or defined externally, and so have no STMT_VINFO_VECTYPE\navailable.  Under the current model, using get_same_sized_vectype for\nthat case is equivalent to using get_vectype_for_scalar_type, since\nget_vectype_for_scalar_type always returns vectors of the same size,\nonce a size is fixed.\n\nUsing get_vectype_for_scalar_type is arguably more obvious though:\nif we're using the same scalar type as we would for internal\ndefinitions, we should use the same vector type too.  (Constant and\nexternal definitions sometimes let us change the original scalar type\nto a \"nicer\" scalar type, but that isn't what's happening here.)\n\nThis is a prerequisite to supporting multiple vector sizes in the same\nvec_info.\n\n2019-11-14  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* tree-vect-stmts.c (vectorizable_call): If an operand is\n\tconstant or external, use get_vectype_for_scalar_type\n\trather than get_same_sized_vectype to get its vector type.\n\t(vectorizable_conversion, vectorizable_shift): Likewise.\n\t(vectorizable_operation): Likewise.\n\nFrom-SVN: r278238", "tree": {"sha": "b1d63cf6e91fb986619e29ab836fbd5b19d2b85e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b1d63cf6e91fb986619e29ab836fbd5b19d2b85e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2df4150075c03f8a292c40afd3bb25febb673578", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2df4150075c03f8a292c40afd3bb25febb673578", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2df4150075c03f8a292c40afd3bb25febb673578", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2df4150075c03f8a292c40afd3bb25febb673578/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1c84a2d25ecd4c03dde745f36a4762dd45f97c85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c84a2d25ecd4c03dde745f36a4762dd45f97c85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c84a2d25ecd4c03dde745f36a4762dd45f97c85"}], "stats": {"total": 34, "additions": 21, "deletions": 13}, "files": [{"sha": "28baebee3b76f0ed909538c7bef088937630c67e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2df4150075c03f8a292c40afd3bb25febb673578/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2df4150075c03f8a292c40afd3bb25febb673578/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2df4150075c03f8a292c40afd3bb25febb673578", "patch": "@@ -1,3 +1,11 @@\n+2019-11-14  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-vect-stmts.c (vectorizable_call): If an operand is\n+\tconstant or external, use get_vectype_for_scalar_type\n+\trather than get_same_sized_vectype to get its vector type.\n+\t(vectorizable_conversion, vectorizable_shift): Likewise.\n+\t(vectorizable_operation): Likewise.\n+\n 2019-11-14  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* tree-vectorizer.h (vec_info::vector_size): Replace with..."}, {"sha": "b7fff7822773d1c3917add8c27da3c11738cb9ae", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2df4150075c03f8a292c40afd3bb25febb673578/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2df4150075c03f8a292c40afd3bb25febb673578/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=2df4150075c03f8a292c40afd3bb25febb673578", "patch": "@@ -3295,10 +3295,10 @@ vectorizable_call (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n \t  return false;\n \t}\n     }\n-  /* If all arguments are external or constant defs use a vector type with\n-     the same size as the output vector type.  */\n+  /* If all arguments are external or constant defs, infer the vector type\n+     from the scalar type.  */\n   if (!vectype_in)\n-    vectype_in = get_same_sized_vectype (rhs_type, vectype_out);\n+    vectype_in = get_vectype_for_scalar_type (vinfo, rhs_type);\n   if (vec_stmt)\n     gcc_assert (vectype_in);\n   if (!vectype_in)\n@@ -4787,10 +4787,10 @@ vectorizable_conversion (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n \t}\n     }\n \n-  /* If op0 is an external or constant defs use a vector type of\n-     the same size as the output vector type.  */\n+  /* If op0 is an external or constant def, infer the vector type\n+     from the scalar type.  */\n   if (!vectype_in)\n-    vectype_in = get_same_sized_vectype (rhs_type, vectype_out);\n+    vectype_in = get_vectype_for_scalar_type (vinfo, rhs_type);\n   if (vec_stmt)\n     gcc_assert (vectype_in);\n   if (!vectype_in)\n@@ -5586,10 +5586,10 @@ vectorizable_shift (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n                          \"use not simple.\\n\");\n       return false;\n     }\n-  /* If op0 is an external or constant def use a vector type with\n-     the same size as the output vector type.  */\n+  /* If op0 is an external or constant def, infer the vector type\n+     from the scalar type.  */\n   if (!vectype)\n-    vectype = get_same_sized_vectype (TREE_TYPE (op0), vectype_out);\n+    vectype = get_vectype_for_scalar_type (vinfo, TREE_TYPE (op0));\n   if (vec_stmt)\n     gcc_assert (vectype);\n   if (!vectype)\n@@ -5688,7 +5688,7 @@ vectorizable_shift (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n                          \"vector/vector shift/rotate found.\\n\");\n \n       if (!op1_vectype)\n-\top1_vectype = get_same_sized_vectype (TREE_TYPE (op1), vectype_out);\n+\top1_vectype = get_vectype_for_scalar_type (vinfo, TREE_TYPE (op1));\n       incompatible_op1_vectype_p\n \t= (op1_vectype == NULL_TREE\n \t   || maybe_ne (TYPE_VECTOR_SUBPARTS (op1_vectype),\n@@ -6019,8 +6019,8 @@ vectorizable_operation (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n                          \"use not simple.\\n\");\n       return false;\n     }\n-  /* If op0 is an external or constant def use a vector type with\n-     the same size as the output vector type.  */\n+  /* If op0 is an external or constant def, infer the vector type\n+     from the scalar type.  */\n   if (!vectype)\n     {\n       /* For boolean type we cannot determine vectype by\n@@ -6040,7 +6040,7 @@ vectorizable_operation (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n \t  vectype = vectype_out;\n \t}\n       else\n-\tvectype = get_same_sized_vectype (TREE_TYPE (op0), vectype_out);\n+\tvectype = get_vectype_for_scalar_type (vinfo, TREE_TYPE (op0));\n     }\n   if (vec_stmt)\n     gcc_assert (vectype);"}]}