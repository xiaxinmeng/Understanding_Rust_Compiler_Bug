{"sha": "b14a9c57cff644851084c4f602437c7fa353c5d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjE0YTljNTdjZmY2NDQ4NTEwODRjNGY2MDI0MzdjN2ZhMzUzYzVkMA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-06-30T11:58:48Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-06-30T11:58:48Z"}, "message": "fold-const.c (fold_unary_loc): Move abs(abs(x)) -> abs(x)...\n\n2015-06-30  Richard Biener  <rguenther@suse.de>\n\n\t* fold-const.c (fold_unary_loc): Move abs(abs(x)) -> abs(x),\n\t~ (-A) to A - 1, ~ (A - 1) or ~ (A + -1) to -A and some cases of\n\t~(X ^ Y) to ~X ^ Y or X ^ ~Y if ~X or ~Y simplify to ...\n\t* match.pd: ... here.\n\tAdd a few cases of A - B -> A + (-B) when B \"easily\" negates.\n\tMove (x & y) | x -> x and friends before\n\t(x | CST1) & CST2 -> (x & CST2) | (CST1 & CST2).\n\nFrom-SVN: r225178", "tree": {"sha": "f7cd6a66425a4813b96dd9a091c09540c5b92b2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f7cd6a66425a4813b96dd9a091c09540c5b92b2e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b14a9c57cff644851084c4f602437c7fa353c5d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b14a9c57cff644851084c4f602437c7fa353c5d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b14a9c57cff644851084c4f602437c7fa353c5d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b14a9c57cff644851084c4f602437c7fa353c5d0/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ebc30bf9fd86dc00dcb902780079cf895f4b16b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebc30bf9fd86dc00dcb902780079cf895f4b16b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebc30bf9fd86dc00dcb902780079cf895f4b16b5"}], "stats": {"total": 117, "additions": 76, "deletions": 41}, "files": [{"sha": "6f919643f37a9b678cf20d985ebae5e3121643a6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b14a9c57cff644851084c4f602437c7fa353c5d0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b14a9c57cff644851084c4f602437c7fa353c5d0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b14a9c57cff644851084c4f602437c7fa353c5d0", "patch": "@@ -1,3 +1,13 @@\n+2015-06-30  Richard Biener  <rguenther@suse.de>\n+\n+\t* fold-const.c (fold_unary_loc): Move abs(abs(x)) -> abs(x),\n+\t~ (-A) to A - 1, ~ (A - 1) or ~ (A + -1) to -A and some cases of\n+\t~(X ^ Y) to ~X ^ Y or X ^ ~Y if ~X or ~Y simplify to ...\n+\t* match.pd: ... here.\n+\tAdd a few cases of A - B -> A + (-B) when B \"easily\" negates.\n+\tMove (x & y) | x -> x and friends before\n+\t(x | CST1) & CST2 -> (x & CST2) | (CST1 & CST2).\n+\n 2015-06-30  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* config/sparc/leon.md (leon_load): Enable for all LEON variants if"}, {"sha": "67115d2377eb001a7b715a1317e9699fe78113d0", "filename": "gcc/fold-const.c", "status": "modified", "additions": 6, "deletions": 28, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b14a9c57cff644851084c4f602437c7fa353c5d0/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b14a9c57cff644851084c4f602437c7fa353c5d0/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=b14a9c57cff644851084c4f602437c7fa353c5d0", "patch": "@@ -8125,9 +8125,6 @@ fold_unary_loc (location_t loc, enum tree_code code, tree type, tree op0)\n \t\t\t\t\t\t  TREE_TYPE (targ0),\n \t\t\t\t\t\t  targ0));\n \t}\n-      /* ABS_EXPR<ABS_EXPR<x>> = ABS_EXPR<x> even if flag_wrapv is on.  */\n-      else if (TREE_CODE (arg0) == ABS_EXPR)\n-\treturn arg0;\n \n       /* Strip sign ops from argument.  */\n       if (TREE_CODE (type) == REAL_TYPE)\n@@ -8155,33 +8152,14 @@ fold_unary_loc (location_t loc, enum tree_code code, tree type, tree op0)\n       return NULL_TREE;\n \n     case BIT_NOT_EXPR:\n-      /* Convert ~ (-A) to A - 1.  */\n-      if (INTEGRAL_TYPE_P (type) && TREE_CODE (arg0) == NEGATE_EXPR)\n-\treturn fold_build2_loc (loc, MINUS_EXPR, type,\n-\t\t\t    fold_convert_loc (loc, type, TREE_OPERAND (arg0, 0)),\n-\t\t\t    build_int_cst (type, 1));\n-      /* Convert ~ (A - 1) or ~ (A + -1) to -A.  */\n-      else if (INTEGRAL_TYPE_P (type)\n-\t       && ((TREE_CODE (arg0) == MINUS_EXPR\n-\t\t    && integer_onep (TREE_OPERAND (arg0, 1)))\n-\t\t   || (TREE_CODE (arg0) == PLUS_EXPR\n-\t\t       && integer_all_onesp (TREE_OPERAND (arg0, 1)))))\n-\t{\n-\t  /* Perform the negation in ARG0's type and only then convert\n-\t     to TYPE as to avoid introducing undefined behavior.  */\n-\t  tree t = fold_build1_loc (loc, NEGATE_EXPR,\n-\t\t\t\t    TREE_TYPE (TREE_OPERAND (arg0, 0)),\n-\t\t\t\t    TREE_OPERAND (arg0, 0));\n-\t  return fold_convert_loc (loc, type, t);\n-\t}\n       /* Convert ~(X ^ Y) to ~X ^ Y or X ^ ~Y if ~X or ~Y simplify.  */\n-      else if (TREE_CODE (arg0) == BIT_XOR_EXPR\n-\t       && (tem = fold_unary_loc (loc, BIT_NOT_EXPR, type,\n-\t\t\t       \t     fold_convert_loc (loc, type,\n-\t\t\t\t\t\t       TREE_OPERAND (arg0, 0)))))\n+      if (TREE_CODE (arg0) == BIT_XOR_EXPR\n+\t  && (tem = fold_unary_loc (loc, BIT_NOT_EXPR, type,\n+\t\t\t\t    fold_convert_loc (loc, type,\n+\t\t\t\t\t\t      TREE_OPERAND (arg0, 0)))))\n \treturn fold_build2_loc (loc, BIT_XOR_EXPR, type, tem,\n-\t\t\t    fold_convert_loc (loc, type,\n-\t\t\t\t\t      TREE_OPERAND (arg0, 1)));\n+\t\t\t\tfold_convert_loc (loc, type,\n+\t\t\t\t\t\t  TREE_OPERAND (arg0, 1)));\n       else if (TREE_CODE (arg0) == BIT_XOR_EXPR\n \t       && (tem = fold_unary_loc (loc, BIT_NOT_EXPR, type,\n \t\t\t       \t     fold_convert_loc (loc, type,"}, {"sha": "d81ea53dae406b1b90b27c5750fae2634c6d3a64", "filename": "gcc/match.pd", "status": "modified", "additions": 60, "deletions": 13, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b14a9c57cff644851084c4f602437c7fa353c5d0/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b14a9c57cff644851084c4f602437c7fa353c5d0/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=b14a9c57cff644851084c4f602437c7fa353c5d0", "patch": "@@ -389,13 +389,34 @@ along with GCC; see the file COPYING3.  If not see\n  (bit_and:c (bit_ior:c @0 @1) (bit_xor:c @1 (bit_not @0)))\n  (bit_and @0 @1))\n \n+(simplify\n+ (abs (abs@1 @0))\n+ @1)\n (simplify\n  (abs (negate @0))\n  (abs @0))\n (simplify\n  (abs tree_expr_nonnegative_p@0)\n  @0)\n \n+/* A - B -> A + (-B) if B is easily negatable.  This just covers\n+   very few cases of \"easily negatable\", effectively inlining negate_expr_p.  */\n+(simplify\n+ (minus @0 INTEGER_CST@1)\n+ (if ((INTEGRAL_TYPE_P (type)\n+       && TYPE_OVERFLOW_WRAPS (type))\n+      || (!TYPE_OVERFLOW_SANITIZED (type)\n+\t  && may_negate_without_overflow_p (@1)))\n+  (plus @0 (negate @1))))\n+(simplify\n+ (minus @0 REAL_CST@1)\n+ (if (REAL_VALUE_NEGATIVE (TREE_REAL_CST (@1)))\n+  (plus @0 (negate @1))))\n+(simplify\n+ (minus @0 VECTOR_CST@1)\n+ (if (FLOAT_TYPE_P (type) || TYPE_OVERFLOW_WRAPS (type))\n+  (plus @0 (negate @1))))\n+\n \n /* Try to fold (type) X op CST -> (type) (X op ((type-x) CST))\n    when profitable.\n@@ -427,6 +448,19 @@ along with GCC; see the file COPYING3.  If not see\n \t   || TYPE_PRECISION (type) != GET_MODE_PRECISION (TYPE_MODE (type))))\n    (convert (bitop @0 (convert @1))))))\n \n+(for bitop (bit_and bit_ior)\n+     rbitop (bit_ior bit_and)\n+  /* (x | y) & x -> x */\n+  /* (x & y) | x -> x */\n+ (simplify\n+  (bitop:c (rbitop:c @0 @1) @0)\n+  @0)\n+ /* (~x | y) & x -> x & y */\n+ /* (~x & y) | x -> x | y */\n+ (simplify\n+  (bitop:c (rbitop:c (bit_not @0) @1) @0)\n+  (bitop @0 @1)))\n+\n /* Simplify (A & B) OP0 (C & B) to (A OP0 C) & B. */\n (for bitop (bit_and bit_ior bit_xor)\n  (simplify\n@@ -474,19 +508,6 @@ along with GCC; see the file COPYING3.  If not see\n   (op:c truth_valued_p@0 (logical_inverted_value @0))\n   { constant_boolean_node (true, type); }))\n \n-(for bitop (bit_and bit_ior)\n-     rbitop (bit_ior bit_and)\n-  /* (x | y) & x -> x */\n-  /* (x & y) | x -> x */\n- (simplify\n-  (bitop:c (rbitop:c @0 @1) @0)\n-  @0)\n- /* (~x | y) & x -> x & y */\n- /* (~x & y) | x -> x | y */\n- (simplify\n-  (bitop:c (rbitop:c (bit_not @0) @1) @0)\n-  (bitop @0 @1)))\n-\n /* If arg1 and arg2 are booleans (or any single bit type)\n    then try to simplify:\n \n@@ -515,6 +536,32 @@ along with GCC; see the file COPYING3.  If not see\n   (bit_not (bit_not @0))\n   @0)\n \n+/* Convert ~ (-A) to A - 1.  */\n+(simplify\n+ (bit_not (convert? (negate @0)))\n+ (if (tree_nop_conversion_p (type, TREE_TYPE (@0)))\n+  (convert (minus @0 { build_one_cst (TREE_TYPE (@0)); }))))\n+\n+/* Convert ~ (A - 1) or ~ (A + -1) to -A.  */\n+(simplify\n+ (bit_not (convert? (minus @0 integer_onep)))\n+ (if (tree_nop_conversion_p (type, TREE_TYPE (@0)))\n+  (convert (negate @0))))\n+(simplify\n+ (bit_not (convert? (plus @0 integer_all_onesp)))\n+ (if (tree_nop_conversion_p (type, TREE_TYPE (@0)))\n+  (convert (negate @0))))\n+\n+/* Part of convert ~(X ^ Y) to ~X ^ Y or X ^ ~Y if ~X or ~Y simplify.  */\n+(simplify\n+ (bit_not (convert? (bit_xor @0 INTEGER_CST@1)))\n+ (if (tree_nop_conversion_p (type, TREE_TYPE (@0)))\n+  (convert (bit_xor @0 (bit_not @1)))))\n+(simplify\n+ (bit_not (convert? (bit_xor:c (bit_not @0) @1)))\n+ (if (tree_nop_conversion_p (type, TREE_TYPE (@0)))\n+  (convert (bit_xor @0 @1))))\n+\n /* (x & ~m) | (y & m) -> ((x ^ y) & m) ^ x */\n (simplify\n   (bit_ior:c (bit_and:c@3 @0 (bit_not @2)) (bit_and:c@4 @1 @2))"}]}