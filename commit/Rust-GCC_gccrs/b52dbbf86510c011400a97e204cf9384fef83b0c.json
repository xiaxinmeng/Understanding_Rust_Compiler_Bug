{"sha": "b52dbbf86510c011400a97e204cf9384fef83b0c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjUyZGJiZjg2NTEwYzAxMTQwMGE5N2UyMDRjZjkzODRmZWY4M2IwYw==", "commit": {"author": {"name": "Steve Ellcey", "email": "sje@cup.hp.com", "date": "2006-08-14T23:13:54Z"}, "committer": {"name": "Steve Ellcey", "email": "sje@gcc.gnu.org", "date": "2006-08-14T23:13:54Z"}, "message": "re PR c++/28288 (ICE with min/max operator)\n\n\tPR c++/28288\n\tPR c++/14556\n\t* operators.def: Remove <?, ?>, <?=, and >?= operators.\n\t* parser.c: Remove CPP_MIN, CPP_MAX, CPP_MIN_EQ, and CPP_MAX_EQ.\n\t(cp_parser_warn_min_max): Remove.\n\t* include/cpplib.h: Remove <?, >?, <?=, and >?= tokens.\n\t(CPP_LAST_EQ): Change.\n\t(CPP_LAST_PUNCTUATOR): Change.\n\t* expr.c (cpp_operator): Remove MIN and MAX.\n\t(reduce): Remove CPP_MIN and CPP_MAX.\n\t(num_binary_op): Ditto.\n\t* lex.c (_cpp_lex_direct): Ditto.\n\t(cpp_avoid_paste): Remove ? as legal symbol after > or <.\n\nFrom-SVN: r116140", "tree": {"sha": "3997bb50dfd7d49e1c239b1d5843cf07e8405f16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3997bb50dfd7d49e1c239b1d5843cf07e8405f16"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b52dbbf86510c011400a97e204cf9384fef83b0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b52dbbf86510c011400a97e204cf9384fef83b0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b52dbbf86510c011400a97e204cf9384fef83b0c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b52dbbf86510c011400a97e204cf9384fef83b0c/comments", "author": null, "committer": null, "parents": [{"sha": "ac1ed908de999523efc36f38e69bca1aadfe0808", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac1ed908de999523efc36f38e69bca1aadfe0808", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac1ed908de999523efc36f38e69bca1aadfe0808"}], "stats": {"total": 120, "additions": 29, "deletions": 91}, "files": [{"sha": "9194192f51d836a9a00f8fd8b58edad863071e44", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52dbbf86510c011400a97e204cf9384fef83b0c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52dbbf86510c011400a97e204cf9384fef83b0c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b52dbbf86510c011400a97e204cf9384fef83b0c", "patch": "@@ -1,3 +1,11 @@\n+2006-08-14  Steve Ellcey  <sje@cup.hp.com>\n+\n+\tPR c++/28288\n+\tPR c++/14556\n+\t* operators.def: Remove <?, ?>, <?=, and >?= operators.\n+\t* parser.c: Remove CPP_MIN, CPP_MAX, CPP_MIN_EQ, and CPP_MAX_EQ.\n+\t(cp_parser_warn_min_max): Remove.\n+\n 2006-08-11  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/28559"}, {"sha": "4518843b38fe7ac4237a08e7ef707cbed4ef6915", "filename": "gcc/cp/operators.def", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52dbbf86510c011400a97e204cf9384fef83b0c/gcc%2Fcp%2Foperators.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52dbbf86510c011400a97e204cf9384fef83b0c/gcc%2Fcp%2Foperators.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Foperators.def?ref=b52dbbf86510c011400a97e204cf9384fef83b0c", "patch": "@@ -129,9 +129,6 @@ DEF_SIMPLE_OPERATOR (\"->\", COMPONENT_REF, \"pt\", 2)\n DEF_SIMPLE_OPERATOR (\"[]\", ARRAY_REF, \"ix\", 2)\n DEF_SIMPLE_OPERATOR (\"++\", POSTINCREMENT_EXPR, \"pp\", 2)\n DEF_SIMPLE_OPERATOR (\"--\", POSTDECREMENT_EXPR, \"mm\", 2)\n-/* These operators are GNU extensions.  */\n-DEF_SIMPLE_OPERATOR (\"<?\", MIN_EXPR, \"v23min\", 2)\n-DEF_SIMPLE_OPERATOR (\">?\", MAX_EXPR, \"v23max\", 2)\n /* This one is needed for mangling.  */\n DEF_SIMPLE_OPERATOR (\"::\", SCOPE_REF, \"sr\", 2)\n \n@@ -147,9 +144,6 @@ DEF_ASSN_OPERATOR (\"|=\", BIT_IOR_EXPR, \"oR\", 2)\n DEF_ASSN_OPERATOR (\"^=\", BIT_XOR_EXPR, \"eO\", 2)\n DEF_ASSN_OPERATOR (\"<<=\", LSHIFT_EXPR, \"lS\", 2)\n DEF_ASSN_OPERATOR (\">>=\", RSHIFT_EXPR, \"rS\", 2)\n-/* These operators are GNU extensions.  */\n-DEF_ASSN_OPERATOR (\"<?=\", MIN_EXPR, \"v23miN\", 2)\n-DEF_ASSN_OPERATOR (\">?=\", MAX_EXPR, \"v23maX\", 2)\n \n /* Ternary operators.  */\n DEF_SIMPLE_OPERATOR (\"?:\", COND_EXPR, \"qu\", 3)"}, {"sha": "7bfa86665b75bb126427e0d35d2c62e3fc648d2d", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52dbbf86510c011400a97e204cf9384fef83b0c/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52dbbf86510c011400a97e204cf9384fef83b0c/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=b52dbbf86510c011400a97e204cf9384fef83b0c", "patch": "@@ -1150,8 +1150,6 @@ static const cp_parser_binary_operations_map_node binops[] = {\n   { CPP_GREATER, GT_EXPR, PREC_RELATIONAL_EXPRESSION },\n   { CPP_LESS_EQ, LE_EXPR, PREC_RELATIONAL_EXPRESSION },\n   { CPP_GREATER_EQ, GE_EXPR, PREC_RELATIONAL_EXPRESSION },\n-  { CPP_MIN, MIN_EXPR, PREC_RELATIONAL_EXPRESSION },\n-  { CPP_MAX, MAX_EXPR, PREC_RELATIONAL_EXPRESSION },\n \n   { CPP_EQ_EQ, EQ_EXPR, PREC_EQUALITY_EXPRESSION },\n   { CPP_NOT_EQ, NE_EXPR, PREC_EQUALITY_EXPRESSION },\n@@ -1855,16 +1853,6 @@ cp_parser_is_keyword (cp_token* token, enum rid keyword)\n   return token->keyword == keyword;\n }\n \n-/* A minimum or maximum operator has been seen.  As these are\n-   deprecated, issue a warning.  */\n-\n-static inline void\n-cp_parser_warn_min_max (void)\n-{\n-  if (warn_deprecated && !in_system_header)\n-    warning (OPT_Wdeprecated, \"minimum/maximum operators are deprecated\");\n-}\n-\n /* If not parsing tentatively, issue a diagnostic of the form\n       FILE:LINE: MESSAGE before TOKEN\n    where TOKEN is the next token in the input stream.  MESSAGE\n@@ -5613,8 +5601,6 @@ cp_parser_binary_expression (cp_parser* parser, bool cast_p)\n     {\n       /* Get an operator token.  */\n       token = cp_lexer_peek_token (parser->lexer);\n-      if (token->type == CPP_MIN || token->type == CPP_MAX)\n-\tcp_parser_warn_min_max ();\n \n       new_prec = TOKEN_PRECEDENCE (token);\n \n@@ -5869,16 +5855,6 @@ cp_parser_assignment_operator_opt (cp_parser* parser)\n       op = BIT_IOR_EXPR;\n       break;\n \n-    case CPP_MIN_EQ:\n-      op = MIN_EXPR;\n-      cp_parser_warn_min_max ();\n-      break;\n-\n-    case CPP_MAX_EQ:\n-      op = MAX_EXPR;\n-      cp_parser_warn_min_max ();\n-      break;\n-\n     default:\n       /* Nothing else is an assignment operator.  */\n       op = ERROR_MARK;\n@@ -8330,27 +8306,6 @@ cp_parser_operator (cp_parser* parser)\n       cp_parser_require (parser, CPP_CLOSE_SQUARE, \"`]'\");\n       return ansi_opname (ARRAY_REF);\n \n-      /* Extensions.  */\n-    case CPP_MIN:\n-      id = ansi_opname (MIN_EXPR);\n-      cp_parser_warn_min_max ();\n-      break;\n-\n-    case CPP_MAX:\n-      id = ansi_opname (MAX_EXPR);\n-      cp_parser_warn_min_max ();\n-      break;\n-\n-    case CPP_MIN_EQ:\n-      id = ansi_assopname (MIN_EXPR);\n-      cp_parser_warn_min_max ();\n-      break;\n-\n-    case CPP_MAX_EQ:\n-      id = ansi_assopname (MAX_EXPR);\n-      cp_parser_warn_min_max ();\n-      break;\n-\n     default:\n       /* Anything else is an error.  */\n       break;"}, {"sha": "98d2cc22e7f5a860d09fab2518ff643f94f28fa9", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52dbbf86510c011400a97e204cf9384fef83b0c/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52dbbf86510c011400a97e204cf9384fef83b0c/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=b52dbbf86510c011400a97e204cf9384fef83b0c", "patch": "@@ -1,3 +1,16 @@\n+2006-08-14  Steve Ellcey  <sje@cup.hp.com>\n+\n+\tPR c++/28288\n+\tPR c++/14556\n+\t* include/cpplib.h: Remove <?, >?, <?=, and >?= tokens.\n+\t(CPP_LAST_EQ): Change.\n+\t(CPP_LAST_PUNCTUATOR): Change.\n+\t* expr.c (cpp_operator): Remove MIN and MAX.\n+\t(reduce): Remove CPP_MIN and CPP_MAX.\n+\t(num_binary_op): Ditto.\n+\t* lex.c (_cpp_lex_direct): Ditto.\n+\t(cpp_avoid_paste): Remove ? as legal symbol after > or <.\n+\n 2006-06-09  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR preprocessor/27746"}, {"sha": "574b85ff656dd02b97dfd27f1c292ec6eea19a4e", "filename": "libcpp/expr.c", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52dbbf86510c011400a97e204cf9384fef83b0c/libcpp%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52dbbf86510c011400a97e204cf9384fef83b0c/libcpp%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fexpr.c?ref=b52dbbf86510c011400a97e204cf9384fef83b0c", "patch": "@@ -668,9 +668,6 @@ static const struct cpp_operator\n   /* RSHIFT */\t\t{13, LEFT_ASSOC},\n   /* LSHIFT */\t\t{13, LEFT_ASSOC},\n \n-  /* MIN */\t\t{10, LEFT_ASSOC | CHECK_PROMOTION},\n-  /* MAX */\t\t{10, LEFT_ASSOC | CHECK_PROMOTION},\n-\n   /* COMPL */\t\t{16, NO_L_OPERAND},\n   /* AND_AND */\t\t{6, LEFT_ASSOC},\n   /* OR_OR */\t\t{5, LEFT_ASSOC},\n@@ -882,8 +879,6 @@ reduce (cpp_reader *pfile, struct op *top, enum cpp_ttype op)\n \tcase CPP_MINUS:\n \tcase CPP_RSHIFT:\n \tcase CPP_LSHIFT:\n-\tcase CPP_MIN:\n-\tcase CPP_MAX:\n \tcase CPP_COMMA:\n \t  top[-1].value = num_binary_op (pfile, top[-1].value,\n \t\t\t\t\t top->value, top->op);\n@@ -1309,7 +1304,6 @@ num_binary_op (cpp_reader *pfile, cpp_num lhs, cpp_num rhs, enum cpp_ttype op)\n {\n   cpp_num result;\n   size_t precision = CPP_OPTION (pfile, precision);\n-  bool gte;\n   size_t n;\n \n   switch (op)\n@@ -1336,21 +1330,6 @@ num_binary_op (cpp_reader *pfile, cpp_num lhs, cpp_num rhs, enum cpp_ttype op)\n \tlhs = num_rshift (lhs, precision, n);\n       break;\n \n-      /* Min / Max.  */\n-    case CPP_MIN:\n-    case CPP_MAX:\n-      {\n-\tbool unsignedp = lhs.unsignedp || rhs.unsignedp;\n-\n-\tgte = num_greater_eq (lhs, rhs, precision);\n-\tif (op == CPP_MIN)\n-\t  gte = !gte;\n-\tif (!gte)\n-\t  lhs = rhs;\n-\tlhs.unsignedp = unsignedp;\n-      }\n-      break;\n-\n       /* Arithmetic.  */\n     case CPP_MINUS:\n       rhs = num_negate (rhs, precision);"}, {"sha": "5fb80d9e82092145a34325db614b6a57239a6b56", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52dbbf86510c011400a97e204cf9384fef83b0c/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52dbbf86510c011400a97e204cf9384fef83b0c/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=b52dbbf86510c011400a97e204cf9384fef83b0c", "patch": "@@ -51,7 +51,10 @@ struct _cpp_file;\n \n    The first group, to CPP_LAST_EQ, can be immediately followed by an\n    '='.  The lexer needs operators ending in '=', like \">>=\", to be in\n-   the same order as their counterparts without the '=', like \">>\".  */\n+   the same order as their counterparts without the '=', like \">>\".\n+\n+   See the cpp_operator table optab in expr.c if you change the order or\n+   add or remove anything in the first group.  */\n \n #define TTYPE_TABLE\t\t\t\t\t\t\t\\\n   OP(EQ,\t\t\"=\")\t\t\t\t\t\t\\\n@@ -68,8 +71,6 @@ struct _cpp_file;\n   OP(XOR,\t\t\"^\")\t\t\t\t\t\t\\\n   OP(RSHIFT,\t\t\">>\")\t\t\t\t\t\t\\\n   OP(LSHIFT,\t\t\"<<\")\t\t\t\t\t\t\\\n-  OP(MIN,\t\t\"<?\")\t/* extension */\t\t\t\t\\\n-  OP(MAX,\t\t\">?\")\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n   OP(COMPL,\t\t\"~\")\t\t\t\t\t\t\\\n   OP(AND_AND,\t\t\"&&\")\t/* logical */\t\t\t\t\\\n@@ -97,8 +98,6 @@ struct _cpp_file;\n   OP(XOR_EQ,\t\t\"^=\")\t\t\t\t\t\t\\\n   OP(RSHIFT_EQ,\t\t\">>=\")\t\t\t\t\t\t\\\n   OP(LSHIFT_EQ,\t\t\"<<=\")\t\t\t\t\t\t\\\n-  OP(MIN_EQ,\t\t\"<?=\")\t/* extension */\t\t\t\t\\\n-  OP(MAX_EQ,\t\t\">?=\")\t\t\t\t\t\t\\\n   /* Digraphs together, beginning with CPP_FIRST_DIGRAPH.  */\t\t\\\n   OP(HASH,\t\t\"#\")\t/* digraphs */\t\t\t\t\\\n   OP(PASTE,\t\t\"##\")\t\t\t\t\t\t\\\n@@ -146,9 +145,9 @@ enum cpp_ttype\n   N_TTYPES,\n \n   /* Positions in the table.  */\n-  CPP_LAST_EQ        = CPP_MAX,\n+  CPP_LAST_EQ        = CPP_LSHIFT,\n   CPP_FIRST_DIGRAPH  = CPP_HASH,\n-  CPP_LAST_PUNCTUATOR= CPP_DOT_STAR,\n+  CPP_LAST_PUNCTUATOR= CPP_ATSIGN,\n   CPP_LAST_CPP_OP    = CPP_LESS_EQ\n };\n #undef OP"}, {"sha": "6dc0fd9d8df5e75e5fc6ed357580cb52d990d8ec", "filename": "libcpp/lex.c", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52dbbf86510c011400a97e204cf9384fef83b0c/libcpp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52dbbf86510c011400a97e204cf9384fef83b0c/libcpp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Flex.c?ref=b52dbbf86510c011400a97e204cf9384fef83b0c", "patch": "@@ -1052,11 +1052,6 @@ _cpp_lex_direct (cpp_reader *pfile)\n \t  buffer->cur++;\n \t  IF_NEXT_IS ('=', CPP_LSHIFT_EQ, CPP_LSHIFT);\n \t}\n-      else if (*buffer->cur == '?' && CPP_OPTION (pfile, cplusplus))\n-\t{\n-\t  buffer->cur++;\n-\t  IF_NEXT_IS ('=', CPP_MIN_EQ, CPP_MIN);\n-\t}\n       else if (CPP_OPTION (pfile, digraphs))\n \t{\n \t  if (*buffer->cur == ':')\n@@ -1083,11 +1078,6 @@ _cpp_lex_direct (cpp_reader *pfile)\n \t  buffer->cur++;\n \t  IF_NEXT_IS ('=', CPP_RSHIFT_EQ, CPP_RSHIFT);\n \t}\n-      else if (*buffer->cur == '?' && CPP_OPTION (pfile, cplusplus))\n-\t{\n-\t  buffer->cur++;\n-\t  IF_NEXT_IS ('=', CPP_MAX_EQ, CPP_MAX);\n-\t}\n       break;\n \n     case '%':\n@@ -1472,8 +1462,8 @@ cpp_avoid_paste (cpp_reader *pfile, const cpp_token *token1,\n \n   switch (a)\n     {\n-    case CPP_GREATER:\treturn c == '>' || c == '?';\n-    case CPP_LESS:\treturn c == '<' || c == '?' || c == '%' || c == ':';\n+    case CPP_GREATER:\treturn c == '>';\n+    case CPP_LESS:\treturn c == '<' || c == '%' || c == ':';\n     case CPP_PLUS:\treturn c == '+';\n     case CPP_MINUS:\treturn c == '-' || c == '>';\n     case CPP_DIV:\treturn c == '/' || c == '*'; /* Comments.  */"}]}