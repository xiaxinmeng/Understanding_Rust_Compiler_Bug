{"sha": "7770bd7e9a889532b1970f372f3566fe86b13f09", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzc3MGJkN2U5YTg4OTUzMmIxOTcwZjM3MmYzNTY2ZmU4NmIxM2YwOQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-12-20T17:10:18Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-12-20T17:10:18Z"}, "message": "libstdc++: Add inline to maybe-constexpr functions (PR 92927)\n\nOriginally these functions were always inline. I changed them in r277342\nto be always constexpr, then in r277588 changed them to be constexpr for\nC++14, but I didn't restore the 'inline' for C++11. That leads to linker\nerrors when libstdc++.so is built unoptimized, because those functions\ndon't get instantiated in src/c++11/string-inst.o\n\n\tPR libstdc++/92927\n\t* include/bits/alloc_traits.h (__alloc_on_copy, __alloc_on_move)\n\t(__alloc_on_swap): Add inline specifier.\n\nFrom-SVN: r279656", "tree": {"sha": "f72d4d17ca34785016a26d1269e3bedb242046f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f72d4d17ca34785016a26d1269e3bedb242046f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7770bd7e9a889532b1970f372f3566fe86b13f09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7770bd7e9a889532b1970f372f3566fe86b13f09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7770bd7e9a889532b1970f372f3566fe86b13f09", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7770bd7e9a889532b1970f372f3566fe86b13f09/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9260fb066b7ed0b237a3300e05fca9bffe018c6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9260fb066b7ed0b237a3300e05fca9bffe018c6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9260fb066b7ed0b237a3300e05fca9bffe018c6b"}], "stats": {"total": 12, "additions": 9, "deletions": 3}, "files": [{"sha": "663312da1e31d63c30bc89e620a21021020a2712", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7770bd7e9a889532b1970f372f3566fe86b13f09/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7770bd7e9a889532b1970f372f3566fe86b13f09/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7770bd7e9a889532b1970f372f3566fe86b13f09", "patch": "@@ -1,3 +1,9 @@\n+2019-12-20  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/92927\n+\t* include/bits/alloc_traits.h (__alloc_on_copy, __alloc_on_move)\n+\t(__alloc_on_swap): Add inline specifier.\n+\n 2019-12-20  Jerome Lambourg  <lambourg@adacore.com>\n \n \t* acinclude.m4 (GLIBCXX_CHECK_SETRLIMIT): Test with AC_LANG_CPLUSPLUS."}, {"sha": "812cff0fabec005d3b9b0efb03be87d4a97f28ee", "filename": "libstdc++-v3/include/bits/alloc_traits.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7770bd7e9a889532b1970f372f3566fe86b13f09/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falloc_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7770bd7e9a889532b1970f372f3566fe86b13f09/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falloc_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falloc_traits.h?ref=7770bd7e9a889532b1970f372f3566fe86b13f09", "patch": "@@ -567,7 +567,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n \n   template<typename _Alloc>\n-    _GLIBCXX14_CONSTEXPR void\n+    _GLIBCXX14_CONSTEXPR inline void\n     __alloc_on_copy(_Alloc& __one, const _Alloc& __two)\n     {\n       typedef allocator_traits<_Alloc> __traits;\n@@ -599,7 +599,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n \n   template<typename _Alloc>\n-    _GLIBCXX14_CONSTEXPR void\n+    _GLIBCXX14_CONSTEXPR inline void\n     __alloc_on_move(_Alloc& __one, _Alloc& __two)\n     {\n       typedef allocator_traits<_Alloc> __traits;\n@@ -626,7 +626,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n \n   template<typename _Alloc>\n-    _GLIBCXX14_CONSTEXPR void\n+    _GLIBCXX14_CONSTEXPR inline void\n     __alloc_on_swap(_Alloc& __one, _Alloc& __two)\n     {\n       typedef allocator_traits<_Alloc> __traits;"}]}