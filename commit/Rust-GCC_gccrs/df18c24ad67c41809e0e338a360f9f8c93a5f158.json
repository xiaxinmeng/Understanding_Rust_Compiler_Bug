{"sha": "df18c24ad67c41809e0e338a360f9f8c93a5f158", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGYxOGMyNGFkNjdjNDE4MDllMGUzMzhhMzYwZjlmOGM5M2E1ZjE1OA==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2018-04-10T15:49:59Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2018-04-10T15:49:59Z"}, "message": "cppopts.texi: Use \"side effect\" instead of side-effect.\n\ngcc/ChangeLog:\n\n\t* doc/cppopts.texi: Use \"side effect\" instead of side-effect.\n\t* doc/extend.texi: Same.\n\t* doc/generic.texi: Same.\n\t* doc/implement-c.texi: Same.\n\t* doc/invoke.texi: Same.\n\t* doc/md.texi: Same.\n\t* doc/rtl.texi: Same.\n\t* doc/tree-ssa.texi: Same.\n\nFrom-SVN: r259287", "tree": {"sha": "23a261c0ed172c40b093dfe7e248fd683c2d5965", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/23a261c0ed172c40b093dfe7e248fd683c2d5965"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df18c24ad67c41809e0e338a360f9f8c93a5f158", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df18c24ad67c41809e0e338a360f9f8c93a5f158", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df18c24ad67c41809e0e338a360f9f8c93a5f158", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df18c24ad67c41809e0e338a360f9f8c93a5f158/comments", "author": null, "committer": null, "parents": [{"sha": "25949ee33201f2f4f86137b00c3c88fa076d5047", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25949ee33201f2f4f86137b00c3c88fa076d5047", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25949ee33201f2f4f86137b00c3c88fa076d5047"}], "stats": {"total": 60, "additions": 30, "deletions": 30}, "files": [{"sha": "af5ee08225f5d00ceae956a2de0475434c599559", "filename": "gcc/doc/cppopts.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df18c24ad67c41809e0e338a360f9f8c93a5f158/gcc%2Fdoc%2Fcppopts.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df18c24ad67c41809e0e338a360f9f8c93a5f158/gcc%2Fdoc%2Fcppopts.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppopts.texi?ref=df18c24ad67c41809e0e338a360f9f8c93a5f158", "patch": "@@ -200,7 +200,7 @@ If @option{-MD} is used in conjunction with @option{-E}, any\n is understood to specify a target object file.\n \n Since @option{-E} is not implied, @option{-MD} can be used to generate\n-a dependency output file as a side-effect of the compilation process.\n+a dependency output file as a side effect of the compilation process.\n \n @item -MMD\n @opindex MMD\n@@ -403,7 +403,7 @@ Do not discard comments, including during macro expansion.  This is\n like @option{-C}, except that comments contained within macros are\n also passed through to the output file where the macro is expanded.\n \n-In addition to the side-effects of the @option{-C} option, the\n+In addition to the side effects of the @option{-C} option, the\n @option{-CC} option causes all C++-style comments inside a macro\n to be converted to C-style comments.  This is to prevent later use\n of that macro from inadvertently commenting out the remainder of"}, {"sha": "5571d05d93bc821a3e55af9e081b98e379ec0726", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df18c24ad67c41809e0e338a360f9f8c93a5f158/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df18c24ad67c41809e0e338a360f9f8c93a5f158/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=df18c24ad67c41809e0e338a360f9f8c93a5f158", "patch": "@@ -2050,7 +2050,7 @@ int widths[] = @{ [0 ... 9] = 1, [10 ... 99] = 2, [100] = 3 @};\n @end smallexample\n \n @noindent\n-If the value in it has side-effects, the side-effects happen only once,\n+If the value in it has side effects, the side effects happen only once,\n not for each initialized field by the range initializer.\n \n @noindent\n@@ -2147,7 +2147,7 @@ struct point ptarray[10] = @{ [2].y = yv2, [2].x = xv2, [0].x = xv0 @};\n @noindent\n If the same field is initialized multiple times, it has the value from\n the last initialization.  If any such overridden initialization has\n-side-effect, it is unspecified whether the side-effect happens or not.\n+side effect, it is unspecified whether the side effect happens or not.\n Currently, GCC discards them and issues a warning.\n \n @node Case Ranges\n@@ -3028,7 +3028,7 @@ This function attribute prevents a function from being considered for\n inlining.\n @c Don't enumerate the optimizations by name here; we try to be\n @c future-compatible with this mechanism.\n-If the function does not have side-effects, there are optimizations\n+If the function does not have side effects, there are optimizations\n other than inlining that cause function calls to be optimized away,\n although the function call is live.  To keep such calls from being\n optimized away, put\n@@ -3038,7 +3038,7 @@ asm (\"\");\n \n @noindent\n (@pxref{Extended Asm}) in the called function, to serve as a special\n-side-effect.\n+side effect.\n \n @item noipa\n @cindex @code{noipa} function attribute\n@@ -10665,7 +10665,7 @@ The built-in functions promote the first two operands into infinite precision si\n and perform addition on those promoted operands. The result is then\n cast to the type of the third argument.  If the cast result is equal to the infinite\n precision result, the built-in functions return false, otherwise they return true.\n-The value of the third argument is ignored, just the side-effects in the third argument\n+The value of the third argument is ignored, just the side effects in the third argument\n are evaluated, and no integral argument promotions are performed on the last argument.\n If the third argument is a bit-field, the type used for the result cast has the\n precision and signedness of the given bit-field, rather than precision and signedness\n@@ -10761,7 +10761,7 @@ a limited extent, they can be used without optimization as well.\n is a built-in construct that returns a constant number of bytes from\n @var{ptr} to the end of the object @var{ptr} pointer points to\n (if known at compile time).  @code{__builtin_object_size} never evaluates\n-its arguments for side-effects.  If there are any side-effects in them, it\n+its arguments for side effects.  If there are any side effects in them, it\n returns @code{(size_t) -1} for @var{type} 0 or 1 and @code{(size_t) 0}\n for @var{type} 2 or 3.  If there are multiple objects @var{ptr} can\n point to and all of them are known at compile time, the returned number\n@@ -11780,7 +11780,7 @@ This built-in function is analogous to the @samp{? :} operator in C,\n except that the expression returned has its type unaltered by promotion\n rules.  Also, the built-in function does not evaluate the expression\n that is not chosen.  For example, if @var{const_exp} evaluates to true,\n-@var{exp2} is not evaluated even if it has side-effects.\n+@var{exp2} is not evaluated even if it has side effects.\n \n This built-in function can return an lvalue if the chosen argument is an\n lvalue.\n@@ -21839,7 +21839,7 @@ Returns @code{_XBEGIN_STARTED} when the transaction\n started successfully (note this is not 0, so the constant has to be \n explicitly tested).  \n \n-If the transaction aborts, all side-effects \n+If the transaction aborts, all side effects\n are undone and an abort code encoded as a bit mask is returned.\n The following macros are defined:\n \n@@ -21866,7 +21866,7 @@ fallback path.\n \n @deftypefn {RTM Function} {void} _xend ()\n Commit the current transaction. When no transaction is active this faults.\n-All memory side-effects of the transaction become visible\n+All memory side effects of the transaction become visible\n to other threads in an atomic manner.\n @end deftypefn\n "}, {"sha": "653a17c8e4daa40f118a64f37334b1f1c18759ef", "filename": "gcc/doc/generic.texi", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df18c24ad67c41809e0e338a360f9f8c93a5f158/gcc%2Fdoc%2Fgeneric.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df18c24ad67c41809e0e338a360f9f8c93a5f158/gcc%2Fdoc%2Fgeneric.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgeneric.texi?ref=df18c24ad67c41809e0e338a360f9f8c93a5f158", "patch": "@@ -1644,10 +1644,10 @@ represented conveniently as @code{(i >= 0 && i < 10) ? i : abort()}.\n As a GNU extension, the C language front-ends allow the second\n operand of the @code{?:} operator may be omitted in the source.\n For example, @code{x ? : 3} is equivalent to @code{x ? x : 3},\n-assuming that @code{x} is an expression without side-effects.\n+assuming that @code{x} is an expression without side effects.\n In the tree representation, however, the second operand is always\n present, possibly protected by @code{SAVE_EXPR} if the first\n-argument does cause side-effects.\n+argument does cause side effects.\n \n @item CALL_EXPR\n These nodes are used to represent calls to functions, including\n@@ -1732,10 +1732,10 @@ by the @code{COMPOUND_LITERAL_EXPR_DECL} macro.\n @item SAVE_EXPR\n \n A @code{SAVE_EXPR} represents an expression (possibly involving\n-side-effects) that is used more than once.  The side-effects should\n+side effects) that is used more than once.  The side effects should\n occur only the first time the expression is evaluated.  Subsequent uses\n should just reuse the computed value.  The first operand to the\n-@code{SAVE_EXPR} is the expression to evaluate.  The side-effects should\n+@code{SAVE_EXPR} is the expression to evaluate.  The side effects should\n be executed where the @code{SAVE_EXPR} is first encountered in a\n depth-first preorder traversal of the expression tree.\n \n@@ -2222,9 +2222,9 @@ of the form @code{VAR @{<,>,<=,>=@} N2}.\n Operand @code{OMP_FOR_INCR} is the loop index increment of the\n form @code{VAR @{+=,-=@} INCR}.\n \n-Operand @code{OMP_FOR_PRE_BODY} contains side-effect code from\n+Operand @code{OMP_FOR_PRE_BODY} contains side effect code from\n operands @code{OMP_FOR_INIT}, @code{OMP_FOR_COND} and\n-@code{OMP_FOR_INC}.  These side-effects are part of the\n+@code{OMP_FOR_INC}.  These side effects are part of the\n @code{OMP_FOR} block but must be evaluated before the start of\n loop body.\n \n@@ -2233,7 +2233,7 @@ which is implicitly private to each thread.  Bounds\n @code{N1} and @code{N2} and the increment expression\n @code{INCR} are required to be loop invariant integer\n expressions that are evaluated without any synchronization. The\n-evaluation order, frequency of evaluation and side-effects are\n+evaluation order, frequency of evaluation and side effects are\n unspecified by the standard.\n \n @item OMP_SECTIONS"}, {"sha": "90f47d92d61299ccf9ecbdb8eac46d93e8e8626c", "filename": "gcc/doc/implement-c.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df18c24ad67c41809e0e338a360f9f8c93a5f158/gcc%2Fdoc%2Fimplement-c.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df18c24ad67c41809e0e338a360f9f8c93a5f158/gcc%2Fdoc%2Fimplement-c.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fimplement-c.texi?ref=df18c24ad67c41809e0e338a360f9f8c93a5f158", "patch": "@@ -567,14 +567,14 @@ volatile int *src = @var{somevalue};\n According to the C standard, such an expression is an rvalue whose type\n is the unqualified version of its original type, i.e. @code{int}.  Whether\n GCC interprets this as a read of the volatile object being pointed to or\n-only as a request to evaluate the expression for its side-effects depends\n+only as a request to evaluate the expression for its side effects depends\n on this type.\n \n If it is a scalar type, or on most targets an aggregate type whose only\n member object is of a scalar type, or a union type whose member objects\n are of scalar types, the expression is interpreted by GCC as a read of\n the volatile object; in the other cases, the expression is only evaluated\n-for its side-effects.\n+for its side effects.\n \n @end itemize\n "}, {"sha": "a8e26725398180c219174977feda3a97da3a1c68", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df18c24ad67c41809e0e338a360f9f8c93a5f158/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df18c24ad67c41809e0e338a360f9f8c93a5f158/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=df18c24ad67c41809e0e338a360f9f8c93a5f158", "patch": "@@ -8713,7 +8713,7 @@ default at @option{-O} and higher.\n @item -ftree-builtin-call-dce\n @opindex ftree-builtin-call-dce\n Perform conditional dead code elimination (DCE) for calls to built-in functions\n-that may set @code{errno} but are otherwise side-effect free.  This flag is\n+that may set @code{errno} but are otherwise free of side effects.  This flag is\n enabled by default at @option{-O2} and higher if @option{-Os} is not also\n specified.\n \n@@ -14231,8 +14231,8 @@ not overridden} will do.\n @opindex fcompare-debug-second\n This option is implicitly passed to the compiler for the second\n compilation requested by @option{-fcompare-debug}, along with options to\n-silence warnings, and omitting other options that would cause\n-side-effect compiler outputs to files or to the standard output.  Dump\n+silence warnings, and omitting other options that would cause the compiler\n+to produce output to files or to standard output as a side effect.  Dump\n files and preserved temporary files are renamed so as to contain the\n @code{.gk} additional extension during the second compilation, to avoid\n overwriting those generated by the first.\n@@ -20973,7 +20973,7 @@ Work around certain SB-1 CPU core errata.\n @item -mr10k-cache-barrier=@var{setting}\n @opindex mr10k-cache-barrier\n Specify whether GCC should insert cache barriers to avoid the\n-side-effects of speculation on R10K processors.\n+side effects of speculation on R10K processors.\n \n In common with many processors, the R10K tries to predict the outcome\n of a conditional branch and speculatively executes instructions from"}, {"sha": "30f1e09a3105b5a789163103c5a75baddcd29e7a", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df18c24ad67c41809e0e338a360f9f8c93a5f158/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df18c24ad67c41809e0e338a360f9f8c93a5f158/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=df18c24ad67c41809e0e338a360f9f8c93a5f158", "patch": "@@ -867,15 +867,15 @@ hardware's requirements explicitly.\n @defun push_operand\n This predicate allows a memory reference suitable for pushing a value\n onto the stack.  This will be a @code{MEM} which refers to\n-@code{stack_pointer_rtx}, with a side-effect in its address expression\n+@code{stack_pointer_rtx}, with a side effect in its address expression\n (@pxref{Incdec}); which one is determined by the\n @code{STACK_PUSH_CODE} macro (@pxref{Frame Layout}).\n @end defun\n \n @defun pop_operand\n This predicate allows a memory reference suitable for popping a value\n off the stack.  Again, this will be a @code{MEM} referring to\n-@code{stack_pointer_rtx}, with a side-effect in its address\n+@code{stack_pointer_rtx}, with a side effect in its address\n expression.  However, this time @code{STACK_POP_CODE} is expected.\n @end defun\n \n@@ -1091,7 +1091,7 @@ operand may be an immediate constant, and which possible values it may\n have.  Constraints can also require two operands to match.\n Side-effects aren't allowed in operands of inline @code{asm}, unless\n @samp{<} or @samp{>} constraints are used, because there is no guarantee\n-that the side-effects will happen exactly once in an instruction that can update\n+that the side effects will happen exactly once in an instruction that can update\n the addressing register.\n \n @ifset INTERNALS\n@@ -1172,9 +1172,9 @@ would fit the @samp{m} constraint but not the @samp{o} constraint.\n A memory operand with autodecrement addressing (either predecrement or\n postdecrement) is allowed.  In inline @code{asm} this constraint is only\n allowed if the operand is used exactly once in an instruction that can\n-handle the side-effects.  Not using an operand with @samp{<} in constraint\n+handle the side effects.  Not using an operand with @samp{<} in constraint\n string in the inline @code{asm} pattern at all or using it in multiple\n-instructions isn't valid, because the side-effects wouldn't be performed\n+instructions isn't valid, because the side effects wouldn't be performed\n or would be performed more than once.  Furthermore, on some targets\n the operand with @samp{<} in constraint string must be accompanied by\n special instruction suffixes like @code{%U0} instruction suffix on PowerPC"}, {"sha": "9baabf99440ec94c6a4e778d1e9889156a893412", "filename": "gcc/doc/tree-ssa.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df18c24ad67c41809e0e338a360f9f8c93a5f158/gcc%2Fdoc%2Ftree-ssa.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df18c24ad67c41809e0e338a360f9f8c93a5f158/gcc%2Fdoc%2Ftree-ssa.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftree-ssa.texi?ref=df18c24ad67c41809e0e338a360f9f8c93a5f158", "patch": "@@ -25,7 +25,7 @@ etc).  Much like GENERIC, GIMPLE is a language independent, tree based\n representation.  However, it differs from GENERIC in that the GIMPLE\n grammar is more restrictive: expressions contain no more than 3\n operands (except function calls), it has no control flow structures\n-and expressions with side-effects are only allowed on the right hand\n+and expressions with side effects are only allowed on the right hand\n side of assignments.  See the chapter describing GENERIC and GIMPLE\n for more details.\n "}]}