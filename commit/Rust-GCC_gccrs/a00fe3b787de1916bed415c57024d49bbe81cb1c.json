{"sha": "a00fe3b787de1916bed415c57024d49bbe81cb1c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTAwZmUzYjc4N2RlMTkxNmJlZDQxNWM1NzAyNGQ0OWJiZTgxY2IxYw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2016-01-15T14:41:10Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2016-01-15T14:41:10Z"}, "message": "PR 69246: Invalid REG_ARGS_SIZE for sibcalls\n\nThe problem in this PR was that we were treating a sibcall as popping\narguments, leading to a negative REG_ARGS_SIZE.\n\nIt doesn't really make sense to treat sibcalls as popping since\n(a) they're deallocating the caller's stack, not ours, and\n(b) there are no optabs for popping sibcalls (any more).\n\nTested on x86_64-linux-gnu.\n\ngcc/\n\tPR middle-end/69246\n\t* calls.c (emit_call_1): Force n_popped to zero for sibcalls.\n\ngcc/testsuite/\n\tPR middle-end/69246\n\t* gcc.target/i386/pr69246.c: New test.\n\nFrom-SVN: r232428", "tree": {"sha": "fa57a9eddd888c9241714cfcc44471d4d36211f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa57a9eddd888c9241714cfcc44471d4d36211f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a00fe3b787de1916bed415c57024d49bbe81cb1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a00fe3b787de1916bed415c57024d49bbe81cb1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a00fe3b787de1916bed415c57024d49bbe81cb1c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a00fe3b787de1916bed415c57024d49bbe81cb1c/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "aea40b08771af69bb9b5e582e6147c3154e56abe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aea40b08771af69bb9b5e582e6147c3154e56abe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aea40b08771af69bb9b5e582e6147c3154e56abe"}], "stats": {"total": 41, "additions": 38, "deletions": 3}, "files": [{"sha": "59dc4abbab50e1238b10755810ce0d5ab0f8caa6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a00fe3b787de1916bed415c57024d49bbe81cb1c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a00fe3b787de1916bed415c57024d49bbe81cb1c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a00fe3b787de1916bed415c57024d49bbe81cb1c", "patch": "@@ -1,3 +1,8 @@\n+2016-01-15  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR middle-end/69246\n+\t* calls.c (emit_call_1): Force n_popped to zero for sibcalls.\n+\n 2016-01-15  Ilya Enkovich  <enkovich.gnu@gmail.com>\n \n \t* config/i386/i386.c (scalar_chain::compute_convert_gain): Fix typo."}, {"sha": "8f573b83430c52955e215e7aabcdb55cb3a76d6a", "filename": "gcc/calls.c", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a00fe3b787de1916bed415c57024d49bbe81cb1c/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a00fe3b787de1916bed415c57024d49bbe81cb1c/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=a00fe3b787de1916bed415c57024d49bbe81cb1c", "patch": "@@ -272,12 +272,19 @@ emit_call_1 (rtx funexp, tree fntree ATTRIBUTE_UNUSED, tree fndecl ATTRIBUTE_UNU\n   rtx rounded_stack_size_rtx = GEN_INT (rounded_stack_size);\n   rtx call, funmem, pat;\n   int already_popped = 0;\n-  HOST_WIDE_INT n_popped\n-    = targetm.calls.return_pops_args (fndecl, funtype, stack_size);\n+  HOST_WIDE_INT n_popped = 0;\n+\n+  /* Sibling call patterns never pop arguments (no sibcall(_value)_pop\n+     patterns exist).  Any popping that the callee does on return will\n+     be from our caller's frame rather than ours.  */\n+  if (!(ecf_flags & ECF_SIBCALL))\n+    {\n+      n_popped += targetm.calls.return_pops_args (fndecl, funtype, stack_size);\n \n #ifdef CALL_POPS_ARGS\n-  n_popped += CALL_POPS_ARGS (*get_cumulative_args (args_so_far));\n+      n_popped += CALL_POPS_ARGS (*get_cumulative_args (args_so_far));\n #endif\n+    }\n \n   /* Ensure address is valid.  SYMBOL_REF is already valid, so no need,\n      and we don't want to load it into a register as an optimization,"}, {"sha": "2c08f8d7f0d40264397233a6603a1341c597801b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a00fe3b787de1916bed415c57024d49bbe81cb1c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a00fe3b787de1916bed415c57024d49bbe81cb1c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a00fe3b787de1916bed415c57024d49bbe81cb1c", "patch": "@@ -1,3 +1,8 @@\n+2016-01-15  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR middle-end/69246\n+\t* gcc.target/i386/pr69246.c: New test.\n+\n 2016-01-15  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n \n \t* gfortran.dg/bind_c_array_params_2.f90: Fix test patterns for"}, {"sha": "e56e691c4443283165172b0d7136a2d8ae3594fb", "filename": "gcc/testsuite/gcc.target/i386/pr69246.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a00fe3b787de1916bed415c57024d49bbe81cb1c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr69246.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a00fe3b787de1916bed415c57024d49bbe81cb1c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr69246.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr69246.c?ref=a00fe3b787de1916bed415c57024d49bbe81cb1c", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile { target ia32 } } */\n+/* { dg-options \"-O2\" } */\n+\n+void (__attribute__ ((stdcall)) *a) (int);\n+\n+void __attribute__ ((stdcall))\n+foo (int x)\n+{\n+  a (x);\n+}\n+\n+int (__attribute__ ((stdcall)) *b) (int);\n+\n+int __attribute__ ((stdcall))\n+bar (int x)\n+{\n+  return b (x);\n+}"}]}