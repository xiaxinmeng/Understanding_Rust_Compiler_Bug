{"sha": "c99d986a712c0b61502b60f0477b9aab96fcc857", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzk5ZDk4NmE3MTJjMGI2MTUwMmI2MGYwNDc3YjlhYWI5NmZjYzg1Nw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@hxi.com", "date": "2002-01-16T02:37:37Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2002-01-16T02:37:37Z"}, "message": "expmed.c (extract_fixed_bit_field): Remove unused code.\n\n\t* expmed.c (extract_fixed_bit_field): Remove unused code.\n\t* system.h: Poison SLOW_ZERO_EXTEND.\n\t* doc/tm.texi: Remove.\n\t* config/1750a/1750a.h (SLOW_ZERO_EXTEND): Remove.\n\t* config/arm/arm.h: Likewise.\n\t* config/avr/avr.h: Likewise.\n\t* config/clipper/clipper.h: Likewise.\n\t* config/convex/convex.h: Likewise.\n\t* config/d30v/d30v.h: Likewise.\n\t* config/dsp16xx/dsp16xx.h: Likewise.\n\t* config/elxsi/elxsi.h: Likewise.\n\t* config/fr30/fr30.h: Likewise.\n\t* config/h8300/h8300.h: Likewise.\n\t* config/i370/i370.h: Likewise.\n\t* config/i386/i386.h: Likewise.\n\t* config/m68k/m68k.h: Likewise.\n\t* config/mips/mips.h: Likewise.\n\t* config/ns32k/ns32k.h: Likewise.\n\t* config/pdp11/pdp11.h: Likewise.\n\t* config/pj/pj.h: Likewise.\n\t* config/s390/s390.h: Likewise.\n\t* config/sh/sh.h: Likewise.\n\t* config/stormy16/stormy16.h: Likewise.\n\t* config/v850/v850.h: Likewise.\n\t* config/vax/vax.h: Likewise.\n\t* config/we32k/we32k.h: Likewise.\n\nFrom-SVN: r48893", "tree": {"sha": "19a6ef37726668af56c5c678fa31a8b5b177f627", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/19a6ef37726668af56c5c678fa31a8b5b177f627"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c99d986a712c0b61502b60f0477b9aab96fcc857", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c99d986a712c0b61502b60f0477b9aab96fcc857", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c99d986a712c0b61502b60f0477b9aab96fcc857", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c99d986a712c0b61502b60f0477b9aab96fcc857/comments", "author": null, "committer": null, "parents": [{"sha": "bed9a20d55b90a351748cea65448f8ba16b4b32f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bed9a20d55b90a351748cea65448f8ba16b4b32f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bed9a20d55b90a351748cea65448f8ba16b4b32f"}], "stats": {"total": 179, "additions": 32, "deletions": 147}, "files": [{"sha": "00d210211da33c796a266ef45cd794aa83f1caa2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c99d986a712c0b61502b60f0477b9aab96fcc857/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c99d986a712c0b61502b60f0477b9aab96fcc857/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c99d986a712c0b61502b60f0477b9aab96fcc857", "patch": "@@ -1,3 +1,32 @@\n+2002-01-15  Kazu Hirata  <kazu@hxi.com>\n+\n+\t* expmed.c (extract_fixed_bit_field): Remove unused code.\n+\t* system.h: Poison SLOW_ZERO_EXTEND.\n+\t* doc/tm.texi: Remove.\n+\t* config/1750a/1750a.h (SLOW_ZERO_EXTEND): Remove.\n+\t* config/arm/arm.h: Likewise.\n+\t* config/avr/avr.h: Likewise.\n+\t* config/clipper/clipper.h: Likewise.\n+\t* config/convex/convex.h: Likewise.\n+\t* config/d30v/d30v.h: Likewise.\n+\t* config/dsp16xx/dsp16xx.h: Likewise.\n+\t* config/elxsi/elxsi.h: Likewise.\n+\t* config/fr30/fr30.h: Likewise.\n+\t* config/h8300/h8300.h: Likewise.\n+\t* config/i370/i370.h: Likewise.\n+\t* config/i386/i386.h: Likewise.\n+\t* config/m68k/m68k.h: Likewise.\n+\t* config/mips/mips.h: Likewise.\n+\t* config/ns32k/ns32k.h: Likewise.\n+\t* config/pdp11/pdp11.h: Likewise.\n+\t* config/pj/pj.h: Likewise.\n+\t* config/s390/s390.h: Likewise.\n+\t* config/sh/sh.h: Likewise.\n+\t* config/stormy16/stormy16.h: Likewise.\n+\t* config/v850/v850.h: Likewise.\n+\t* config/vax/vax.h: Likewise.\n+\t* config/we32k/we32k.h: Likewise.\n+\n 2002-01-15  Aldy Hernandez  <aldyh@redhat.com>\n \n         * config/rs6000/rs6000.md (altivec_stvx): Add parallels to stvx."}, {"sha": "d93d81fddcb79d56dd1c1813480d2aa31c329c21", "filename": "gcc/config/1750a/1750a.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c99d986a712c0b61502b60f0477b9aab96fcc857/gcc%2Fconfig%2F1750a%2F1750a.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c99d986a712c0b61502b60f0477b9aab96fcc857/gcc%2Fconfig%2F1750a%2F1750a.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2F1750a%2F1750a.h?ref=c99d986a712c0b61502b60f0477b9aab96fcc857", "patch": "@@ -770,9 +770,6 @@ enum reg_class { NO_REGS, R2, R0_1, INDEX_REGS, BASE_REGS, ALL_REGS, LIM_REG_CLA\n    move-instruction pairs, we will do a movstr or libcall instead.  */\n #define MOVE_RATIO 4\n \n-/* Define this if zero-extension is slow (more than one real instruction).  */\n-/* #define SLOW_ZERO_EXTEND */\n-\n /* Nonzero if access to memory by bytes is slow and undesirable.  */\n #define SLOW_BYTE_ACCESS 0\n "}, {"sha": "5a7b9b543d344edcec9d72c286af3524f881a855", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c99d986a712c0b61502b60f0477b9aab96fcc857/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c99d986a712c0b61502b60f0477b9aab96fcc857/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=c99d986a712c0b61502b60f0477b9aab96fcc857", "patch": "@@ -2385,11 +2385,6 @@ typedef struct\n    ((arm_arch4 || (MODE) == QImode) ? ZERO_EXTEND\t\t\t\\\n     : ((BYTES_BIG_ENDIAN && (MODE) == HImode) ? SIGN_EXTEND : NIL)))\n \n-/* Define this if zero-extension is slow (more than one real instruction).\n-   On the ARM, it is more than one instruction only if not fetching from\n-   memory.  */\n-/* #define SLOW_ZERO_EXTEND */\n-\n /* Nonzero if access to memory by bytes is slow and undesirable.  */\n #define SLOW_BYTE_ACCESS 0\n "}, {"sha": "d3a33faec40fe01d67857a8630b26d224ea55f14", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c99d986a712c0b61502b60f0477b9aab96fcc857/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c99d986a712c0b61502b60f0477b9aab96fcc857/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=c99d986a712c0b61502b60f0477b9aab96fcc857", "patch": "@@ -1797,18 +1797,6 @@ do {\t\t\t\t\t\t\t\t\t    \\\n    subsequent accesses occur to other fields in the same word of the\n    structure, but to different bytes.\n \n-   `SLOW_ZERO_EXTEND'\n-   Define this macro if zero-extension (of a `char' or `short' to an\n-   `int') can be done faster if the destination is a register that is\n-   known to be zero.\n-\n-   If you define this macro, you must have instruction patterns that\n-   recognize RTL structures like this:\n-\n-   (set (strict_low_part (subreg:QI (reg:SI ...) 0)) ...)\n-\n-   and likewise for `HImode'.\n-\n    `SLOW_UNALIGNED_ACCESS'\n    Define this macro to be the value 1 if unaligned accesses have a\n    cost many times greater than aligned accesses, for example if they"}, {"sha": "790202b4e36a6a0fd53150d1b539ee270ca33236", "filename": "gcc/config/clipper/clipper.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c99d986a712c0b61502b60f0477b9aab96fcc857/gcc%2Fconfig%2Fclipper%2Fclipper.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c99d986a712c0b61502b60f0477b9aab96fcc857/gcc%2Fconfig%2Fclipper%2Fclipper.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fclipper%2Fclipper.h?ref=c99d986a712c0b61502b60f0477b9aab96fcc857", "patch": "@@ -796,9 +796,6 @@ do\t\t\t\t\t\t\t\t\t      \\\n \n #define MOVE_RATIO 20\n \n-/* Define this if zero-extension is slow (more than one real instruction).  */\n-/* #define SLOW_ZERO_EXTEND */\n-\n /* Nonzero if access to memory by bytes is slow and undesirable.  */\n #define SLOW_BYTE_ACCESS 0\n "}, {"sha": "72224630c68a420ab29ed4b6e984c67092dd7f82", "filename": "gcc/config/convex/convex.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c99d986a712c0b61502b60f0477b9aab96fcc857/gcc%2Fconfig%2Fconvex%2Fconvex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c99d986a712c0b61502b60f0477b9aab96fcc857/gcc%2Fconfig%2Fconvex%2Fconvex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fconvex%2Fconvex.h?ref=c99d986a712c0b61502b60f0477b9aab96fcc857", "patch": "@@ -1031,9 +1031,6 @@ enum reg_class {\n    in one reasonably fast instruction.  */\n #define MOVE_MAX 8\n \n-/* Define this if zero-extension is slow (more than one real instruction).  */\n-/* #define SLOW_ZERO_EXTEND */\n-\n /* Nonzero if access to memory by bytes is slow and undesirable.  */\n #define SLOW_BYTE_ACCESS (! TARGET_C2)\n "}, {"sha": "a48934401f821f899dad8554c5c256281d167cd6", "filename": "gcc/config/d30v/d30v.h", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c99d986a712c0b61502b60f0477b9aab96fcc857/gcc%2Fconfig%2Fd30v%2Fd30v.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c99d986a712c0b61502b60f0477b9aab96fcc857/gcc%2Fconfig%2Fd30v%2Fd30v.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fd30v%2Fd30v.h?ref=c99d986a712c0b61502b60f0477b9aab96fcc857", "patch": "@@ -3432,17 +3432,6 @@ extern const char *d30v_branch_cost_string;\n    same word of the structure, but to different bytes.  */\n #define SLOW_BYTE_ACCESS 1\n \n-/* Define this macro if zero-extension (of a `char' or `short' to an `int') can\n-   be done faster if the destination is a register that is known to be zero.\n-\n-   If you define this macro, you must have instruction patterns that recognize\n-   RTL structures like this:\n-\n-        (set (strict_low_part (subreg:QI (reg:SI ...) 0)) ...)\n-\n-   and likewise for `HImode'.  */\n-#define SLOW_ZERO_EXTEND 0\n-\n /* Define this macro to be the value 1 if unaligned accesses have a cost many\n    times greater than aligned accesses, for example if they are emulated in a\n    trap handler."}, {"sha": "ae2f72569a2996380fae504c35f1504859016915", "filename": "gcc/config/dsp16xx/dsp16xx.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c99d986a712c0b61502b60f0477b9aab96fcc857/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c99d986a712c0b61502b60f0477b9aab96fcc857/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h?ref=c99d986a712c0b61502b60f0477b9aab96fcc857", "patch": "@@ -1565,10 +1565,6 @@ extern struct dsp16xx_frame_info current_frame_info;\n    loads.  */\n #define SLOW_BYTE_ACCESS 1\n \n-/* Define this macro if zero-extension (of a char or short to an int) can\n-   be done faster if the destination is a register that is know to be zero.  */\n-/* #define SLOW_ZERO_EXTEND */\n-\n /* Define this macro if unaligned accesses have a cost many times greater than\n    aligned accesses, for example if they are emulated in a trap handler */\n /* define SLOW_UNALIGNED_ACCESS(MODE, ALIGN) */"}, {"sha": "d5969d4ea2b2eaa06d9eb9072ce054c0c94d255d", "filename": "gcc/config/elxsi/elxsi.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c99d986a712c0b61502b60f0477b9aab96fcc857/gcc%2Fconfig%2Felxsi%2Felxsi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c99d986a712c0b61502b60f0477b9aab96fcc857/gcc%2Fconfig%2Felxsi%2Felxsi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Felxsi%2Felxsi.h?ref=c99d986a712c0b61502b60f0477b9aab96fcc857", "patch": "@@ -577,9 +577,6 @@ enum reg_class { NO_REGS, GENERAL_REGS, ALL_REGS, LIM_REG_CLASSES };\n    in one reasonably fast instruction.  */\n #define MOVE_MAX 8\n \n-/* Define this if zero-extension is slow (more than one real instruction).  */\n-/* #define SLOW_ZERO_EXTEND */\n-\n /* Nonzero if access to memory by bytes is slow and undesirable.  */\n #define SLOW_BYTE_ACCESS 0\n "}, {"sha": "6bda37d33ede48b0bbe75ee184dd1b93abf77a98", "filename": "gcc/config/fr30/fr30.h", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c99d986a712c0b61502b60f0477b9aab96fcc857/gcc%2Fconfig%2Ffr30%2Ffr30.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c99d986a712c0b61502b60f0477b9aab96fcc857/gcc%2Fconfig%2Ffr30%2Ffr30.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.h?ref=c99d986a712c0b61502b60f0477b9aab96fcc857", "patch": "@@ -1359,17 +1359,6 @@ do\t\t\t\t\t\t\t\t\t\t\\\n    same word of the structure, but to different bytes.  */\n #define SLOW_BYTE_ACCESS 1\n \n-/* Define this macro if zero-extension (of a `char' or `short' to an `int') can\n-   be done faster if the destination is a register that is known to be zero.\n-\n-   If you define this macro, you must have instruction patterns that recognize\n-   RTL structures like this:\n-\n-        (set (strict_low_part (subreg:QI (reg:SI ...) 0)) ...)\n-\n-   and likewise for `HImode'.  */\n-#define SLOW_ZERO_EXTEND 0\n-\n /*}}}*/ \f\n /*{{{  Dividing the output into sections.  */ \n "}, {"sha": "d7d89b02c4250160945f77a848563896adf56e58", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c99d986a712c0b61502b60f0477b9aab96fcc857/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c99d986a712c0b61502b60f0477b9aab96fcc857/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=c99d986a712c0b61502b60f0477b9aab96fcc857", "patch": "@@ -965,9 +965,6 @@ struct cum_arg\n #define MOVE_MAX\t(TARGET_H8300H || TARGET_H8300S ? 4 : 2)\n #define MAX_MOVE_MAX\t4\n \n-/* Define this if zero-extension is slow (more than one real instruction).  */\n-/* #define SLOW_ZERO_EXTEND */\n-\n /* Nonzero if access to memory by bytes is slow and undesirable.  */\n #define SLOW_BYTE_ACCESS TARGET_SLOWBYTE\n "}, {"sha": "c2c7d4aeaa6d1facbe74fcfdb95900a9f6234ceb", "filename": "gcc/config/i370/i370.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c99d986a712c0b61502b60f0477b9aab96fcc857/gcc%2Fconfig%2Fi370%2Fi370.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c99d986a712c0b61502b60f0477b9aab96fcc857/gcc%2Fconfig%2Fi370%2Fi370.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi370%2Fi370.h?ref=c99d986a712c0b61502b60f0477b9aab96fcc857", "patch": "@@ -874,10 +874,6 @@ enum reg_class\n \n #define MOVE_MAX 256\n \n-/* Define this if zero-extension is slow (more than one real instruction).  */\n-\n-#define SLOW_ZERO_EXTEND 1\n-\n /* Nonzero if access to memory by bytes is slow and undesirable.  */\n \n #define SLOW_BYTE_ACCESS 1"}, {"sha": "4f2b9038ded0603ed5ea182dd459b0225f581553", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c99d986a712c0b61502b60f0477b9aab96fcc857/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c99d986a712c0b61502b60f0477b9aab96fcc857/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=c99d986a712c0b61502b60f0477b9aab96fcc857", "patch": "@@ -2681,19 +2681,6 @@ do {\t\t\t\t\t\t\t\\\n /* Nonzero if access to memory by shorts is slow and undesirable.  */\n #define SLOW_SHORT_ACCESS 0\n \n-/* Define this macro if zero-extension (of a `char' or `short' to an\n-   `int') can be done faster if the destination is a register that is\n-   known to be zero.\n-\n-   If you define this macro, you must have instruction patterns that\n-   recognize RTL structures like this:\n-\n-          (set (strict_low_part (subreg:QI (reg:SI ...) 0)) ...)\n-\n-   and likewise for `HImode'.  */\n-\n-/* #define SLOW_ZERO_EXTEND */\n-\n /* Define this macro to be the value 1 if unaligned accesses have a\n    cost many times greater than aligned accesses, for example if they\n    are emulated in a trap handler."}, {"sha": "d97978c46e950d8ae279e9c911568487dffc8597", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c99d986a712c0b61502b60f0477b9aab96fcc857/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c99d986a712c0b61502b60f0477b9aab96fcc857/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=c99d986a712c0b61502b60f0477b9aab96fcc857", "patch": "@@ -1529,9 +1529,6 @@ __transfer_from_trampoline ()\t\t\t\t\t\\\n    in one reasonably fast instruction.  */\n #define MOVE_MAX 4\n \n-/* Define this if zero-extension is slow (more than one real instruction).  */\n-#define SLOW_ZERO_EXTEND\n-\n /* Nonzero if access to memory by bytes is slow and undesirable.  */\n #define SLOW_BYTE_ACCESS 0\n "}, {"sha": "2c3588a30e37218c84a3fe2ba6d60c3f092fe66b", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c99d986a712c0b61502b60f0477b9aab96fcc857/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c99d986a712c0b61502b60f0477b9aab96fcc857/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=c99d986a712c0b61502b60f0477b9aab96fcc857", "patch": "@@ -3378,9 +3378,6 @@ while (0)\n \n #define STORE_FLAG_VALUE 1\n \n-/* Define this if zero-extension is slow (more than one real instruction).  */\n-#define SLOW_ZERO_EXTEND\n-\n /* Define this to be nonzero if shift instructions ignore all but the low-order\n    few bits.  */\n #define SHIFT_COUNT_TRUNCATED 1"}, {"sha": "159148dbb31f9a067fc24070e9ac2cd43c80ec44", "filename": "gcc/config/ns32k/ns32k.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c99d986a712c0b61502b60f0477b9aab96fcc857/gcc%2Fconfig%2Fns32k%2Fns32k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c99d986a712c0b61502b60f0477b9aab96fcc857/gcc%2Fconfig%2Fns32k%2Fns32k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.h?ref=c99d986a712c0b61502b60f0477b9aab96fcc857", "patch": "@@ -1116,9 +1116,6 @@ while (0)\n    We have a smart movstrsi insn */\n #define MOVE_RATIO 0\n \n-/* Define this if zero-extension is slow (more than one real instruction).  */\n-/* #define SLOW_ZERO_EXTEND */\n-\n /* Nonzero if access to memory by bytes is slow and undesirable.  */\n #define SLOW_BYTE_ACCESS 0\n "}, {"sha": "2c16aa80ddbb48f5dc50f31e6ceb7b647e44ed51", "filename": "gcc/config/pdp11/pdp11.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c99d986a712c0b61502b60f0477b9aab96fcc857/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c99d986a712c0b61502b60f0477b9aab96fcc857/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.h?ref=c99d986a712c0b61502b60f0477b9aab96fcc857", "patch": "@@ -888,9 +888,6 @@ extern int may_call_alloca;\n \n #define MOVE_MAX 2\n \n-/* Zero extension is faster if the target is known to be zero */\n-/* #define SLOW_ZERO_EXTEND */\n-\n /* Nonzero if access to memory by byte is slow and undesirable. -\n */\n #define SLOW_BYTE_ACCESS 0"}, {"sha": "655ae0d64981c26c10e11be4f16a90eee05002a0", "filename": "gcc/config/pj/pj.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c99d986a712c0b61502b60f0477b9aab96fcc857/gcc%2Fconfig%2Fpj%2Fpj.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c99d986a712c0b61502b60f0477b9aab96fcc857/gcc%2Fconfig%2Fpj%2Fpj.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpj%2Fpj.h?ref=c99d986a712c0b61502b60f0477b9aab96fcc857", "patch": "@@ -932,11 +932,6 @@ struct pj_args\n \n #define SHORT_IMMEDIATES_SIGN_EXTEND\n \n-/* Define this if zero-extension is slow (more than one real\n-   instruction).  */\n-\n-/* #define SLOW_ZERO_EXTEND  */\n-\n /* Nonzero if access to memory by bytes is no faster than for words.  */\n #define SLOW_BYTE_ACCESS 1\n "}, {"sha": "57e39aa5f86243b70d16b6fe71b964ad95d319fa", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c99d986a712c0b61502b60f0477b9aab96fcc857/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c99d986a712c0b61502b60f0477b9aab96fcc857/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=c99d986a712c0b61502b60f0477b9aab96fcc857", "patch": "@@ -1061,10 +1061,6 @@ CUMULATIVE_ARGS;\n \n #define MOVE_MAX 256\n \n-/* Define this if zero-extension is slow (more than one real instruction).  */\n-\n-#define SLOW_ZERO_EXTEND\n-\n /* Nonzero if access to memory by bytes is slow and undesirable.  */\n \n #define SLOW_BYTE_ACCESS 1"}, {"sha": "98939decb50b9294e923d93e93f16cbadf9704a7", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c99d986a712c0b61502b60f0477b9aab96fcc857/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c99d986a712c0b61502b60f0477b9aab96fcc857/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=c99d986a712c0b61502b60f0477b9aab96fcc857", "patch": "@@ -1682,10 +1682,6 @@ extern int current_function_anonymous_args;\n /* Define if loading short immediate values into registers sign extends.  */\n #define SHORT_IMMEDIATES_SIGN_EXTEND\n \n-/* Define this if zero-extension is slow (more than one real instruction).\n-   On the SH, it's only one instruction.  */\n-/* #define SLOW_ZERO_EXTEND */\n-\n /* Nonzero if access to memory by bytes is no faster than for words.  */\n #define SLOW_BYTE_ACCESS 1\n "}, {"sha": "bffcdfc1208859f91d75b7d48b97553bd5ab5284", "filename": "gcc/config/stormy16/stormy16.h", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c99d986a712c0b61502b60f0477b9aab96fcc857/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c99d986a712c0b61502b60f0477b9aab96fcc857/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.h?ref=c99d986a712c0b61502b60f0477b9aab96fcc857", "patch": "@@ -3193,17 +3193,6 @@ do {\t\t\t\t\t\t\t\\\n    same word of the structure, but to different bytes.  */\n #define SLOW_BYTE_ACCESS 0\n \n-/* Define this macro if zero-extension (of a `char' or `short' to an `int') can\n-   be done faster if the destination is a register that is known to be zero.\n-\n-   If you define this macro, you must have instruction patterns that recognize\n-   RTL structures like this:\n-\n-        (set (strict_low_part (subreg:QI (reg:SI ...) 0)) ...)\n-\n-   and likewise for `HImode'.  */\n-#define SLOW_ZERO_EXTEND 0\n-\n /* Define this macro to be the value 1 if unaligned accesses have a cost many\n    times greater than aligned accesses, for example if they are emulated in a\n    trap handler."}, {"sha": "7e0cdb63e800ecb6592eb38365c66c7e750d3323", "filename": "gcc/config/v850/v850.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c99d986a712c0b61502b60f0477b9aab96fcc857/gcc%2Fconfig%2Fv850%2Fv850.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c99d986a712c0b61502b60f0477b9aab96fcc857/gcc%2Fconfig%2Fv850%2Fv850.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.h?ref=c99d986a712c0b61502b60f0477b9aab96fcc857", "patch": "@@ -1031,9 +1031,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n    than accessing full words.  */\n #define SLOW_BYTE_ACCESS 1\n \n-/* Define this if zero-extension is slow (more than one real instruction).  */\n-#define SLOW_ZERO_EXTEND \n-\n /* According expr.c, a value of around 6 should minimize code size, and\n    for the V850 series, that's our primary concern.  */\n #define MOVE_RATIO 6"}, {"sha": "26e767d37d0777b97138cb99780ccc6720b71d18", "filename": "gcc/config/vax/vax.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c99d986a712c0b61502b60f0477b9aab96fcc857/gcc%2Fconfig%2Fvax%2Fvax.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c99d986a712c0b61502b60f0477b9aab96fcc857/gcc%2Fconfig%2Fvax%2Fvax.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.h?ref=c99d986a712c0b61502b60f0477b9aab96fcc857", "patch": "@@ -807,9 +807,6 @@ enum reg_class { NO_REGS, ALL_REGS, LIM_REG_CLASSES };\n    in one reasonably fast instruction.  */\n #define MOVE_MAX 8\n \n-/* Define this if zero-extension is slow (more than one real instruction).  */\n-/* #define SLOW_ZERO_EXTEND */\n-\n /* Nonzero if access to memory by bytes is slow and undesirable.  */\n #define SLOW_BYTE_ACCESS 0\n "}, {"sha": "12f105d8fae0bb65022ee9d29a136b7f6df1677a", "filename": "gcc/config/we32k/we32k.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c99d986a712c0b61502b60f0477b9aab96fcc857/gcc%2Fconfig%2Fwe32k%2Fwe32k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c99d986a712c0b61502b60f0477b9aab96fcc857/gcc%2Fconfig%2Fwe32k%2Fwe32k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fwe32k%2Fwe32k.h?ref=c99d986a712c0b61502b60f0477b9aab96fcc857", "patch": "@@ -599,9 +599,6 @@ enum reg_class { NO_REGS, GENERAL_REGS,\n    in one reasonably fast instruction.  */\n #define MOVE_MAX 4\n \n-/* Define this if zero-extension is slow (more than one real instruction).  */\n-/* #define SLOW_ZERO_EXTEND */\n-\n /* Nonzero if access to memory by bytes is slow and undesirable.  */\n #define SLOW_BYTE_ACCESS 0\n "}, {"sha": "c81461d1b5a858592c4f6bf606691052dc9cc347", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c99d986a712c0b61502b60f0477b9aab96fcc857/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c99d986a712c0b61502b60f0477b9aab96fcc857/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=c99d986a712c0b61502b60f0477b9aab96fcc857", "patch": "@@ -5176,22 +5176,6 @@ faster than word accesses, using word accesses is preferable since it\n may eliminate subsequent memory access if subsequent accesses occur to\n other fields in the same word of the structure, but to different bytes.\n \n-@findex SLOW_ZERO_EXTEND\n-@item SLOW_ZERO_EXTEND\n-Define this macro if zero-extension (of a @code{char} or @code{short}\n-to an @code{int}) can be done faster if the destination is a register\n-that is known to be zero.\n-\n-If you define this macro, you must have instruction patterns that\n-recognize RTL structures like this:\n-\n-@smallexample\n-(set (strict_low_part (subreg:QI (reg:SI @dots{}) 0)) @dots{})\n-@end smallexample\n-\n-@noindent\n-and likewise for @code{HImode}.\n-\n @findex SLOW_UNALIGNED_ACCESS\n @item SLOW_UNALIGNED_ACCESS (@var{mode}, @var{alignment})\n Define this macro to be the value 1 if memory accesses described by the"}, {"sha": "56952c78418a8e717ee344b318bc4a37235dfacd", "filename": "gcc/expmed.c", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c99d986a712c0b61502b60f0477b9aab96fcc857/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c99d986a712c0b61502b60f0477b9aab96fcc857/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=c99d986a712c0b61502b60f0477b9aab96fcc857", "patch": "@@ -1621,16 +1621,7 @@ extract_fixed_bit_field (tmode, op0, offset, bitsize, bitpos,\n       /* Unless the msb of the field used to be the msb when we shifted,\n \t mask out the upper bits.  */\n \n-      if (GET_MODE_BITSIZE (mode) != bitpos + bitsize\n-#if 0\n-#ifdef SLOW_ZERO_EXTEND\n-\t  /* Always generate an `and' if\n-\t     we just zero-extended op0 and SLOW_ZERO_EXTEND, since it\n-\t     will combine fruitfully with the zero-extend.  */\n-\t  || tmode != mode\n-#endif\n-#endif\n-\t  )\n+      if (GET_MODE_BITSIZE (mode) != bitpos + bitsize)\n \treturn expand_binop (GET_MODE (op0), and_optab, op0,\n \t\t\t     mask_rtx (GET_MODE (op0), 0, bitsize, 0),\n \t\t\t     target, 1, OPTAB_LIB_WIDEN);"}, {"sha": "08be6449bdd986e5f6099b0594dc3d87be71a1c8", "filename": "gcc/system.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c99d986a712c0b61502b60f0477b9aab96fcc857/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c99d986a712c0b61502b60f0477b9aab96fcc857/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=c99d986a712c0b61502b60f0477b9aab96fcc857", "patch": "@@ -604,7 +604,8 @@ typedef char _Bool;\n \tDOESNT_NEED_UNWINDER EH_TABLE_LOOKUP OBJC_SELECTORS_WITHOUT_LABELS \\\n \tOMIT_EH_TABLE EASY_DIV_EXPR IMPLICIT_FIX_EXPR\t\t\t   \\\n \tLONGJMP_RESTORE_FROM_STACK MAX_INT_TYPE_SIZE ASM_IDENTIFY_GCC\t   \\\n-\tSTDC_VALUE TRAMPOLINE_ALIGN ASM_IDENTIFY_GCC_AFTER_SOURCE\n+\tSTDC_VALUE TRAMPOLINE_ALIGN ASM_IDENTIFY_GCC_AFTER_SOURCE\t   \\\n+\tSLOW_ZERO_EXTEND\n \n #endif /* IN_GCC */\n "}]}