{"sha": "66877276157c3ac8210d943054620d509b8ff5c4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjY4NzcyNzYxNTdjM2FjODIxMGQ5NDMwNTQ2MjBkNTA5YjhmZjVjNA==", "commit": {"author": {"name": "Mikael Morin", "email": "mikael.morin@sfr.fr", "date": "2011-09-08T15:07:01Z"}, "committer": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2011-09-08T15:07:01Z"}, "message": "trans-array.h (gfc_get_array_ss): New prototype.\n\n2011-09-08  Mikael Morin  <mikael.morin@sfr.fr>\n\n\t* trans-array.h (gfc_get_array_ss): New prototype.\n\t* trans-array.c (gfc_get_array_ss): New function.\n\t(gfc_walk_variable_expr, gfc_walk_function_expr,\n\tgfc_walk_array_constructor): Re-use gfc_get_array_ss.\n\t* trans-expr.c (gfc_trans_subarray_assign): Ditto.\n\t* trans-intrinsic.c (gfc_walk_intrinsic_bound,\n\tgfc_walk_intrinsic_libfunc): Ditto.\n\t* trans-io.c (transfer_array_component): Ditto.\n\nFrom-SVN: r178695", "tree": {"sha": "9ae771baa26cef5a7d65a963e3a74f50084b8e74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ae771baa26cef5a7d65a963e3a74f50084b8e74"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/66877276157c3ac8210d943054620d509b8ff5c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66877276157c3ac8210d943054620d509b8ff5c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66877276157c3ac8210d943054620d509b8ff5c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66877276157c3ac8210d943054620d509b8ff5c4/comments", "author": null, "committer": null, "parents": [{"sha": "2d49bd6e23afa3364308ecd94b510e8c7567a8b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d49bd6e23afa3364308ecd94b510e8c7567a8b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d49bd6e23afa3364308ecd94b510e8c7567a8b2"}], "stats": {"total": 125, "additions": 49, "deletions": 76}, "files": [{"sha": "a4f0276c9736ed8dfacea1ddc5cc613a774743dd", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66877276157c3ac8210d943054620d509b8ff5c4/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66877276157c3ac8210d943054620d509b8ff5c4/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=66877276157c3ac8210d943054620d509b8ff5c4", "patch": "@@ -1,3 +1,14 @@\n+2011-09-08  Mikael Morin  <mikael.morin@sfr.fr>\n+\n+\t* trans-array.h (gfc_get_array_ss): New prototype.\n+\t* trans-array.c (gfc_get_array_ss): New function.\n+\t(gfc_walk_variable_expr, gfc_walk_function_expr,\n+\tgfc_walk_array_constructor): Re-use gfc_get_array_ss.\n+\t* trans-expr.c (gfc_trans_subarray_assign): Ditto.\n+\t* trans-intrinsic.c (gfc_walk_intrinsic_bound,\n+\tgfc_walk_intrinsic_libfunc): Ditto.\n+\t* trans-io.c (transfer_array_component): Ditto.\n+\n 2011-09-08  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/44646"}, {"sha": "107f6296c2323e90429838c529c4789bc529f263", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 30, "deletions": 42, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66877276157c3ac8210d943054620d509b8ff5c4/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66877276157c3ac8210d943054620d509b8ff5c4/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=66877276157c3ac8210d943054620d509b8ff5c4", "patch": "@@ -511,6 +511,29 @@ gfc_free_ss (gfc_ss * ss)\n }\n \n \n+/* Creates and initializes an array type gfc_ss struct.  */\n+\n+gfc_ss *\n+gfc_get_array_ss (gfc_ss *next, gfc_expr *expr, int dimen, gfc_ss_type type)\n+{\n+  gfc_ss *ss;\n+  gfc_ss_info *info;\n+  int i;\n+\n+  ss = gfc_get_ss ();\n+  ss->next = next;\n+  ss->type = type;\n+  ss->expr = expr;\n+  info = &ss->data.info;\n+  info->dimen = dimen;\n+  info->codimen = 0;\n+  for (i = 0; i < info->dimen; i++)\n+    info->dim[i] = i;\n+\n+  return ss;\n+}\n+\n+\n /* Free all the SS associated with a loop.  */\n \n void\n@@ -7605,12 +7628,7 @@ gfc_walk_variable_expr (gfc_ss * ss, gfc_expr * expr)\n \t  break;\n \n \tcase AR_FULL:\n-\t  newss = gfc_get_ss ();\n-\t  newss->type = GFC_SS_SECTION;\n-\t  newss->expr = expr;\n-\t  newss->next = ss;\n-\t  newss->data.info.dimen = ar->as->rank;\n-\t  newss->data.info.codimen = 0;\n+\t  newss = gfc_get_array_ss (ss, expr, ar->as->rank, GFC_SS_SECTION);\n \t  newss->data.info.ref = ref;\n \n \t  /* Make sure array is the same as array(:,:), this way\n@@ -7619,7 +7637,6 @@ gfc_walk_variable_expr (gfc_ss * ss, gfc_expr * expr)\n \t  ar->codimen = 0;\n \t  for (n = 0; n < ar->dimen; n++)\n \t    {\n-\t      newss->data.info.dim[n] = n;\n \t      ar->dimen_type[n] = DIMEN_RANGE;\n \n \t      gcc_assert (ar->start[n] == NULL);\n@@ -7638,15 +7655,10 @@ gfc_walk_variable_expr (gfc_ss * ss, gfc_expr * expr)\n \t  break;\n \n \tcase AR_SECTION:\n-\t  newss = gfc_get_ss ();\n-\t  newss->type = GFC_SS_SECTION;\n-\t  newss->expr = expr;\n-\t  newss->next = ss;\n-\t  newss->data.info.dimen = 0;\n-\t  newss->data.info.codimen = 0;\n+\t  newss = gfc_get_array_ss (ss, expr, 0, GFC_SS_SECTION);\n \t  newss->data.info.ref = ref;\n \n-          /* We add SS chains for all the subscripts in the section.  */\n+\t  /* We add SS chains for all the subscripts in the section.  */\n \t  for (n = 0; n < ar->dimen + ar->codimen; n++)\n \t    {\n \t      gfc_ss *indexss;\n@@ -7678,10 +7690,8 @@ gfc_walk_variable_expr (gfc_ss * ss, gfc_expr * expr)\n \t\tcase DIMEN_VECTOR:\n \t\t  /* Create a GFC_SS_VECTOR index in which we can store\n \t\t     the vector's descriptor.  */\n-\t\t  indexss = gfc_get_ss ();\n-\t\t  indexss->type = GFC_SS_VECTOR;\n-\t\t  indexss->expr = ar->start[n];\n-\t\t  indexss->next = gfc_ss_terminator;\n+\t\t  indexss = gfc_get_array_ss (gfc_ss_terminator, ar->start[n],\n+\t\t\t\t\t      1, GFC_SS_VECTOR);\n \t\t  indexss->loop_chain = gfc_ss_terminator;\n \t\t  newss->data.info.subscript[n] = indexss;\n \t\t  newss->data.info.dim[newss->data.info.dimen\n@@ -7852,11 +7862,9 @@ gfc_walk_elemental_function_args (gfc_ss * ss, gfc_actual_arglist *arg,\n static gfc_ss *\n gfc_walk_function_expr (gfc_ss * ss, gfc_expr * expr)\n {\n-  gfc_ss *newss;\n   gfc_intrinsic_sym *isym;\n   gfc_symbol *sym;\n   gfc_component *comp = NULL;\n-  int n;\n \n   isym = expr->value.function.isym;\n \n@@ -7872,16 +7880,7 @@ gfc_walk_function_expr (gfc_ss * ss, gfc_expr * expr)\n   gfc_is_proc_ptr_comp (expr, &comp);\n   if ((!comp && gfc_return_by_reference (sym) && sym->result->attr.dimension)\n       || (comp && comp->attr.dimension))\n-    {\n-      newss = gfc_get_ss ();\n-      newss->type = GFC_SS_FUNCTION;\n-      newss->expr = expr;\n-      newss->next = ss;\n-      newss->data.info.dimen = expr->rank;\n-      for (n = 0; n < newss->data.info.dimen; n++)\n-\tnewss->data.info.dim[n] = n;\n-      return newss;\n-    }\n+    return gfc_get_array_ss (ss, expr, expr->rank, GFC_SS_FUNCTION);\n \n   /* Walk the parameters of an elemental function.  For now we always pass\n      by reference.  */\n@@ -7900,18 +7899,7 @@ gfc_walk_function_expr (gfc_ss * ss, gfc_expr * expr)\n static gfc_ss *\n gfc_walk_array_constructor (gfc_ss * ss, gfc_expr * expr)\n {\n-  gfc_ss *newss;\n-  int n;\n-\n-  newss = gfc_get_ss ();\n-  newss->type = GFC_SS_CONSTRUCTOR;\n-  newss->expr = expr;\n-  newss->next = ss;\n-  newss->data.info.dimen = expr->rank;\n-  for (n = 0; n < expr->rank; n++)\n-    newss->data.info.dim[n] = n;\n-\n-  return newss;\n+  return gfc_get_array_ss (ss, expr, expr->rank, GFC_SS_CONSTRUCTOR);\n }\n \n "}, {"sha": "26d02ece3d352c9ba684e45abc3f641b79f60bc7", "filename": "gcc/fortran/trans-array.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66877276157c3ac8210d943054620d509b8ff5c4/gcc%2Ffortran%2Ftrans-array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66877276157c3ac8210d943054620d509b8ff5c4/gcc%2Ffortran%2Ftrans-array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.h?ref=66877276157c3ac8210d943054620d509b8ff5c4", "patch": "@@ -87,6 +87,8 @@ void gfc_add_ss_to_loop (gfc_loopinfo *, gfc_ss *);\n void gfc_mark_ss_chain_used (gfc_ss *, unsigned);\n /* Free a gfc_ss chain.  */\n void gfc_free_ss_chain (gfc_ss *);\n+/* Allocate a new array type ss.  */\n+gfc_ss *gfc_get_array_ss (gfc_ss *, gfc_expr *, int, gfc_ss_type);\n \n /* Calculates the lower bound and stride of array sections.  */\n void gfc_conv_ss_startstride (gfc_loopinfo *);"}, {"sha": "04cf4dd45b344e90763845874187304c8af7770c", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66877276157c3ac8210d943054620d509b8ff5c4/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66877276157c3ac8210d943054620d509b8ff5c4/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=66877276157c3ac8210d943054620d509b8ff5c4", "patch": "@@ -4367,18 +4367,14 @@ gfc_trans_subarray_assign (tree dest, gfc_component * cm, gfc_expr * expr)\n     }\n \n   /* Create a SS for the destination.  */\n-  lss = gfc_get_ss ();\n-  lss->type = GFC_SS_COMPONENT;\n-  lss->expr = NULL;\n+  lss = gfc_get_array_ss (gfc_ss_terminator, NULL, cm->as->rank,\n+\t\t\t  GFC_SS_COMPONENT);\n   lss->shape = gfc_get_shape (cm->as->rank);\n-  lss->next = gfc_ss_terminator;\n-  lss->data.info.dimen = cm->as->rank;\n   lss->data.info.descriptor = dest;\n   lss->data.info.data = gfc_conv_array_data (dest);\n   lss->data.info.offset = gfc_conv_array_offset (dest);\n   for (n = 0; n < cm->as->rank; n++)\n     {\n-      lss->data.info.dim[n] = n;\n       lss->data.info.start[n] = gfc_conv_array_lbound (dest, n);\n       lss->data.info.stride[n] = gfc_index_one_node;\n "}, {"sha": "de5a809c81aba7bc66fd62afca0a282008396431", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 2, "deletions": 22, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66877276157c3ac8210d943054620d509b8ff5c4/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66877276157c3ac8210d943054620d509b8ff5c4/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=66877276157c3ac8210d943054620d509b8ff5c4", "patch": "@@ -6801,19 +6801,11 @@ gfc_add_intrinsic_ss_code (gfc_loopinfo * loop ATTRIBUTE_UNUSED, gfc_ss * ss)\n static gfc_ss *\n gfc_walk_intrinsic_bound (gfc_ss * ss, gfc_expr * expr)\n {\n-  gfc_ss *newss;\n-\n   /* The two argument version returns a scalar.  */\n   if (expr->value.function.actual->next->expr)\n     return ss;\n \n-  newss = gfc_get_ss ();\n-  newss->type = GFC_SS_INTRINSIC;\n-  newss->expr = expr;\n-  newss->next = ss;\n-  newss->data.info.dimen = 1;\n-\n-  return newss;\n+  return gfc_get_array_ss (ss, expr, 1, GFC_SS_INTRINSIC);\n }\n \n \n@@ -6822,20 +6814,8 @@ gfc_walk_intrinsic_bound (gfc_ss * ss, gfc_expr * expr)\n static gfc_ss *\n gfc_walk_intrinsic_libfunc (gfc_ss * ss, gfc_expr * expr)\n {\n-  gfc_ss *newss;\n-  int n;\n-\n   gcc_assert (expr->rank > 0);\n-\n-  newss = gfc_get_ss ();\n-  newss->type = GFC_SS_FUNCTION;\n-  newss->expr = expr;\n-  newss->next = ss;\n-  newss->data.info.dimen = expr->rank;\n-  for (n = 0; n < newss->data.info.dimen; n++)\n-    newss->data.info.dim[n] = n;\n-\n-  return newss;\n+  return gfc_get_array_ss (ss, expr, expr->rank, GFC_SS_FUNCTION);\n }\n \n "}, {"sha": "bbf5a02eff4d9efc13bc54ed6f35fc706fde31bf", "filename": "gcc/fortran/trans-io.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66877276157c3ac8210d943054620d509b8ff5c4/gcc%2Ffortran%2Ftrans-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66877276157c3ac8210d943054620d509b8ff5c4/gcc%2Ffortran%2Ftrans-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-io.c?ref=66877276157c3ac8210d943054620d509b8ff5c4", "patch": "@@ -1946,18 +1946,14 @@ transfer_array_component (tree expr, gfc_component * cm, locus * where)\n      care of this task, because we don't have a gfc_expr at hand.\n      Build one manually, as in gfc_trans_subarray_assign.  */\n \n-  ss = gfc_get_ss ();\n-  ss->type = GFC_SS_COMPONENT;\n-  ss->expr = NULL;\n+  ss = gfc_get_array_ss (gfc_ss_terminator, NULL, cm->as->rank,\n+\t\t\t GFC_SS_COMPONENT);\n   ss->shape = gfc_get_shape (cm->as->rank);\n-  ss->next = gfc_ss_terminator;\n-  ss->data.info.dimen = cm->as->rank;\n   ss->data.info.descriptor = expr;\n   ss->data.info.data = gfc_conv_array_data (expr);\n   ss->data.info.offset = gfc_conv_array_offset (expr);\n   for (n = 0; n < cm->as->rank; n++)\n     {\n-      ss->data.info.dim[n] = n;\n       ss->data.info.start[n] = gfc_conv_array_lbound (expr, n);\n       ss->data.info.stride[n] = gfc_index_one_node;\n "}]}