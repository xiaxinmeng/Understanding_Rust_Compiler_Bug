{"sha": "5538d8a0043b1dc9abf08cbda0d27954f6931933", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTUzOGQ4YTAwNDNiMWRjOWFiZjA4Y2JkYTBkMjc5NTRmNjkzMTkzMw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2000-12-29T17:18:22Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2000-12-29T17:18:22Z"}, "message": "tree.c (get_set_constructor_bits): Use host_integerp and tree_low_cst.\n\n\t* tree.c (get_set_constructor_bits): Use host_integerp and\n\ttree_low_cst.\n\nFrom-SVN: r38545", "tree": {"sha": "381f3b7b0be4e21afb03ea35d41b527494af048b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/381f3b7b0be4e21afb03ea35d41b527494af048b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5538d8a0043b1dc9abf08cbda0d27954f6931933", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5538d8a0043b1dc9abf08cbda0d27954f6931933", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5538d8a0043b1dc9abf08cbda0d27954f6931933", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5538d8a0043b1dc9abf08cbda0d27954f6931933/comments", "author": null, "committer": null, "parents": [{"sha": "77f5250d6fe948fbae378415a999059f544d30b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77f5250d6fe948fbae378415a999059f544d30b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77f5250d6fe948fbae378415a999059f544d30b8"}], "stats": {"total": 16, "additions": 10, "deletions": 6}, "files": [{"sha": "c305c9b5c116833e9c37b79c9910090817a5ca82", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5538d8a0043b1dc9abf08cbda0d27954f6931933/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5538d8a0043b1dc9abf08cbda0d27954f6931933/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5538d8a0043b1dc9abf08cbda0d27954f6931933", "patch": "@@ -1,5 +1,8 @@\n 2000-12-29  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n+\t* tree.c (get_set_constructor_bits): Use host_integerp and\n+\ttree_low_cst.\n+\n \t* local-alloc.c (update_equiv_regs): Don't use copy_rtx on PATTERN.\n \n \t* toplev.c (main): Call xmalloc_set_program_name."}, {"sha": "03cae0aaa2114c0affef73c883caa99ab3c09a29", "filename": "gcc/tree.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5538d8a0043b1dc9abf08cbda0d27954f6931933/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5538d8a0043b1dc9abf08cbda0d27954f6931933/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=5538d8a0043b1dc9abf08cbda0d27954f6931933", "patch": "@@ -4578,26 +4578,27 @@ get_set_constructor_bits (init, buffer, bit_size)\n   int i;\n   tree vals;\n   HOST_WIDE_INT domain_min\n-    = TREE_INT_CST_LOW (TYPE_MIN_VALUE (TYPE_DOMAIN (TREE_TYPE (init))));\n+    = tree_low_cst (TYPE_MIN_VALUE (TYPE_DOMAIN (TREE_TYPE (init))), 0);\n   tree non_const_bits = NULL_TREE;\n+\n   for (i = 0; i < bit_size; i++)\n     buffer[i] = 0;\n \n   for (vals = TREE_OPERAND (init, 1);\n        vals != NULL_TREE; vals = TREE_CHAIN (vals))\n     {\n-      if (TREE_CODE (TREE_VALUE (vals)) != INTEGER_CST\n+      if (!host_integerp (TREE_VALUE (vals), 0)\n \t  || (TREE_PURPOSE (vals) != NULL_TREE\n-\t      && TREE_CODE (TREE_PURPOSE (vals)) != INTEGER_CST))\n+\t      && !host_integerp (TREE_PURPOSE (vals), 0)))\n \tnon_const_bits\n \t  = tree_cons (TREE_PURPOSE (vals), TREE_VALUE (vals), non_const_bits);\n       else if (TREE_PURPOSE (vals) != NULL_TREE)\n \t{\n \t  /* Set a range of bits to ones.  */\n \t  HOST_WIDE_INT lo_index\n-\t    = TREE_INT_CST_LOW (TREE_PURPOSE (vals)) - domain_min;\n+\t    = tree_low_cst (TREE_PURPOSE (vals), 0) - domain_min;\n \t  HOST_WIDE_INT hi_index\n-\t    = TREE_INT_CST_LOW (TREE_VALUE (vals)) - domain_min;\n+\t    = tree_low_cst (TREE_VALUE (vals), 0) - domain_min;\n \n \t  if (lo_index < 0 || lo_index >= bit_size\n \t      || hi_index < 0 || hi_index >= bit_size)\n@@ -4609,7 +4610,7 @@ get_set_constructor_bits (init, buffer, bit_size)\n \t{\n \t  /* Set a single bit to one.  */\n \t  HOST_WIDE_INT index\n-\t    = TREE_INT_CST_LOW (TREE_VALUE (vals)) - domain_min;\n+\t    = tree_low_cst (TREE_VALUE (vals), 0) - domain_min;\n \t  if (index < 0 || index >= bit_size)\n \t    {\n \t      error (\"invalid initializer for bit string\");"}]}