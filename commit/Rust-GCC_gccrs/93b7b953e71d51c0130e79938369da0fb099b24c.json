{"sha": "93b7b953e71d51c0130e79938369da0fb099b24c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTNiN2I5NTNlNzFkNTFjMDEzMGU3OTkzODM2OWRhMGZiMDk5YjI0Yw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2000-06-23T20:34:41Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2000-06-23T20:34:41Z"}, "message": "sparc.md (reload_outdi+1): Handle HOST_BITS_PER_WIDE_INT == 64 case correctly.\n\n\t* config/sparc/sparc.md (reload_outdi+1): Handle\n\tHOST_BITS_PER_WIDE_INT == 64 case correctly.\n\t(adddi3_insn_sp32+1, adddi3_insn_sp32+2, andsi3+2): Likewise.\n\nFrom-SVN: r34669", "tree": {"sha": "96775bb2445e9380544a3932d0ef1f7c3f28af09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/96775bb2445e9380544a3932d0ef1f7c3f28af09"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/93b7b953e71d51c0130e79938369da0fb099b24c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93b7b953e71d51c0130e79938369da0fb099b24c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93b7b953e71d51c0130e79938369da0fb099b24c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93b7b953e71d51c0130e79938369da0fb099b24c/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3e0abe15d14d78cd9b00e422082178a69a2fa272", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e0abe15d14d78cd9b00e422082178a69a2fa272", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e0abe15d14d78cd9b00e422082178a69a2fa272"}], "stats": {"total": 28, "additions": 28, "deletions": 0}, "files": [{"sha": "4a7f7aeefce760243520e221de9862d2b873152a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93b7b953e71d51c0130e79938369da0fb099b24c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93b7b953e71d51c0130e79938369da0fb099b24c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=93b7b953e71d51c0130e79938369da0fb099b24c", "patch": "@@ -1,3 +1,9 @@\n+2000-06-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/sparc/sparc.md (reload_outdi+1): Handle\n+\tHOST_BITS_PER_WIDE_INT == 64 case correctly.\n+\t(adddi3_insn_sp32+1, adddi3_insn_sp32+2, andsi3+2): Likewise.\n+\n 2000-06-23  Geoffrey Keating  <geoffk@cygnus.com>\n \n \t* alias.c (fixed_scalar_and_varying_struct_p): Don't examine"}, {"sha": "eca1a73098dfa3c3a5457e4441356eb089c5403a", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93b7b953e71d51c0130e79938369da0fb099b24c/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93b7b953e71d51c0130e79938369da0fb099b24c/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=93b7b953e71d51c0130e79938369da0fb099b24c", "patch": "@@ -2857,12 +2857,28 @@\n   [(clobber (const_int 0))]\n   \"\n {\n+#if HOST_BITS_PER_WIDE_INT == 32\n   emit_insn (gen_movsi (gen_highpart (SImode, operands[0]),\n \t\t\t(INTVAL (operands[1]) < 0) ?\n \t\t\tconstm1_rtx :\n \t\t\tconst0_rtx));\n   emit_insn (gen_movsi (gen_lowpart (SImode, operands[0]),\n \t\t\toperands[1]));\n+#else\n+  unsigned int low, high;\n+\n+  low = INTVAL (operands[1]) & 0xffffffff;\n+  high = (INTVAL (operands[1]) >> 32) & 0xffffffff;\n+  emit_insn (gen_movsi (gen_highpart (SImode, operands[0]), GEN_INT (high)));\n+\n+  /* Slick... but this trick loses if this subreg constant part\n+     can be done in one insn.  */\n+  if (low == high && (low & 0x3ff) != 0 && low + 0x1000 >= 0x2000)\n+    emit_insn (gen_movsi (gen_lowpart (SImode, operands[0]),\n+\t\t\t  gen_highpart (SImode, operands[0])));\n+  else\n+    emit_insn (gen_movsi (gen_lowpart (SImode, operands[0]), GEN_INT (low)));\n+#endif\n   DONE;\n }\")\n \n@@ -5575,6 +5591,7 @@\n   operands[5] = gen_lowpart (SImode, operands[2]);\n   operands[6] = gen_highpart (SImode, operands[0]);\n   operands[7] = gen_highpart (SImode, operands[1]);\n+#if HOST_BITS_PER_WIDE_INT == 32\n   if (GET_CODE (operands[2]) == CONST_INT)\n     {\n       if (INTVAL (operands[2]) < 0)\n@@ -5583,6 +5600,7 @@\n \toperands[8] = const0_rtx;\n     }\n   else\n+#endif\n     operands[8] = gen_highpart (SImode, operands[2]);\n }\")\n \n@@ -5609,6 +5627,7 @@\n   operands[5] = gen_lowpart (SImode, operands[2]);\n   operands[6] = gen_highpart (SImode, operands[0]);\n   operands[7] = gen_highpart (SImode, operands[1]);\n+#if HOST_BITS_PER_WIDE_INT == 32\n   if (GET_CODE (operands[2]) == CONST_INT)\n     {\n       if (INTVAL (operands[2]) < 0)\n@@ -5617,6 +5636,7 @@\n \toperands[8] = const0_rtx;\n     }\n   else\n+#endif\n     operands[8] = gen_highpart (SImode, operands[2]);\n }\")\n \n@@ -6716,6 +6736,7 @@\n   operands[5] = gen_lowpart (SImode, operands[0]);\n   operands[6] = gen_highpart (SImode, operands[2]);\n   operands[7] = gen_lowpart (SImode, operands[2]);\n+#if HOST_BITS_PER_WIDE_INT == 32\n   if (GET_CODE (operands[3]) == CONST_INT)\n     {\n       if (INTVAL (operands[3]) < 0)\n@@ -6724,6 +6745,7 @@\n \toperands[8] = const0_rtx;\n     }\n   else\n+#endif\n     operands[8] = gen_highpart (SImode, operands[3]);\n   operands[9] = gen_lowpart (SImode, operands[3]);\n }\")"}]}