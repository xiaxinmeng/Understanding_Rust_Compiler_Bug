{"sha": "f18c8576634a5872b6c18e4f66bcb1acb26eebca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjE4Yzg1NzY2MzRhNTg3MmI2YzE4ZTRmNjZiY2IxYWNiMjZlZWJjYQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-03-27T13:35:43Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-03-27T13:35:43Z"}, "message": "Major rework to agree with new calling sequence.\n\nFrom-SVN: r3892", "tree": {"sha": "9deebea104af94cf0f231fe403c71e47ee894c28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9deebea104af94cf0f231fe403c71e47ee894c28"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f18c8576634a5872b6c18e4f66bcb1acb26eebca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f18c8576634a5872b6c18e4f66bcb1acb26eebca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f18c8576634a5872b6c18e4f66bcb1acb26eebca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f18c8576634a5872b6c18e4f66bcb1acb26eebca/comments", "author": null, "committer": null, "parents": [{"sha": "e76e75bb709e93a84d55a3f0366b3ade0d532e7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e76e75bb709e93a84d55a3f0366b3ade0d532e7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e76e75bb709e93a84d55a3f0366b3ade0d532e7f"}], "stats": {"total": 116, "additions": 11, "deletions": 105}, "files": [{"sha": "0cc11093109a99bce3b7ce3647589d20681881cb", "filename": "gcc/ginclude/va-alpha.h", "status": "modified", "additions": 11, "deletions": 105, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f18c8576634a5872b6c18e4f66bcb1acb26eebca/gcc%2Fginclude%2Fva-alpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f18c8576634a5872b6c18e4f66bcb1acb26eebca/gcc%2Fginclude%2Fva-alpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Fva-alpha.h?ref=f18c8576634a5872b6c18e4f66bcb1acb26eebca", "patch": "@@ -11,10 +11,8 @@\n #define __GNUC_VA_LIST\n \n typedef struct {\n-  long __va_arg;\t\t/* Current argument number. */\n-  long *__va_stack;\t\t/* Start of arguments on stack */\n-  long *__va_iregs;\t\t/* Integer parameter registers ($16-$21) */\n-  long *__va_fregs;\t\t/* FP parameter registers ($f16-$f21) */\n+  char *__base;\t\t\t/* Pointer to first integer register. */\n+  long __offset;\t\t/* Byte offset of args so far. */\n } __gnuc_va_list;\n #endif /* not __GNUC_VA_LIST */\n \n@@ -81,110 +79,18 @@ enum {\n #define __extension__\n #endif\n \n-/* Get the rounded number of words of a type.  */\n+/* Get the size of a type in bytes, rounded up to an integral number\n+   of words.  */\n \n-#define __va_nwords(__type)  \\\n-  ((sizeof (__type) + sizeof (long) - 1) / sizeof (long))\n+#define __va_tsize(__type)  \\\n+  (((sizeof (__type) + sizeof (long) - 1) / sizeof (long)) * sizeof (long))\n \n #define va_arg(__va, __type)\t\t\t\t\t\t\\\n-__extension__\t\t\t\t\t\t\t\t\\\n-(* (__type *)\t\t\t\t\t\t\t\t\\\n- ({\t\t\t\t\t\t\t\t\t\\\n-  register void *__rv;  /* result value */\t\t\t\t\\\n-  switch (__builtin_classify_type (* (__type *) 0))\t\t\t\\\n-    {\t\t\t        \t\t\t\t\t\\\n-    case __real_type_class:\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-      /* Get a pointer to the value.  If we want a float instead of\t\\\n-\t a double, we have to make one and point to it instead.  */     \\\n-\t\t\t\t\t\t\t\t\t\\\n-      __rv = (void *) & ((__va).__va_arg < 6\t\t\t\t\\\n-\t\t\t ? (__va).__va_fregs[(__va).__va_arg]\t\t\\\n-\t\t\t : (__va).__va_stack[(__va).__va_arg - 6]);\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-      if (sizeof (__type) == sizeof (float))\t\t\t\t\\\n-\t{\t\t\t\t\t\t\t\t\\\n-\t  float __rf = * ((double *) __rv);\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-\t  __rv = (void *) &__rf;\t\t\t\t\t\\\n-\t}\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-      break;\t\t\t\t\t\t\t\t\\\n-\t      \t\t\t\t\t\t\t\t\\\n-    case __void_type_class:\t\t\t\t\t\t\\\n-    case __integer_type_class:\t\t\t\t\t\t\\\n-    case __char_type_class:\t\t\t\t\t\t\\\n-    case __enumeral_type_class:\t\t\t\t\t\t\\\n-    case __boolean_type_class:\t\t\t\t\t\t\\\n-    case __pointer_type_class:\t\t\t\t\t\t\\\n-    case __reference_type_class:\t\t\t\t\t\\\n-    case __offset_type_class:\t\t\t\t\t\t\\\n-    case __record_type_class:\t\t\t\t\t\t\\\n-    case __union_type_class:\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-      /* Force this on the stack if it's alignment isn't right.  */\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-      if ((__va).__va_arg < 6)\t\t\t\t\t\t\\\n-\tswitch (sizeof (__type))\t\t\t\t\t\\\n-\t  {\t\t\t\t\t\t\t\t\\\n-\t  case sizeof (char):\t\t\t\t\t\t\\\n-\t    break;\t\t\t\t\t\t\t\\\n-\t  case sizeof (short):\t\t\t\t\t\t\\\n-\t    if (__alignof__ (__type) < sizeof (short))\t\t\t\\\n-\t      (__va).__va_arg = 6;\t\t\t\t\t\\\n-\t    break;\t\t\t\t\t\t\t\\\n-\t  case 3:\t\t\t\t\t\t\t\\\n-\t  case sizeof (int):\t\t\t\t\t\t\\\n-\t    if (__alignof__ (__type) < sizeof (int))\t\t\t\\\n-\t      (__va).__va_arg = 6;\t\t\t\t\t\\\n-\t    break;\t\t\t\t\t\t\t\\\n-\t  default:\t\t\t\t\t\t\t\\\n-\t    if (__alignof__ (__type) < sizeof (long))\t\t\t\\\n-\t      (__va).__va_arg = 6;\t\t\t\t\t\\\n-\t    break;\t\t\t\t\t\t\t\\\n-\t  }\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-      /* If this object is only one word long, just get it.  If it is   \\\n-\t longer, we need to worry about the possibility that it is\t\\\n-\t passed both in registers and in memory.  */\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-      if (sizeof (__type) <= sizeof (long)\t\t\t\t\\\n-\t  || (__va).__va_arg >= 6\t\t\t\t\t\\\n-\t  || (__va).__va_arg + __va_nwords (__type) < 6)\t\t\\\n-\t__rv = (void *) & ((__va).__va_arg < 6\t\t\t\t\\\n-\t\t\t   ? (__va).__va_iregs[(__va).__va_arg]\t\t\\\n-\t\t\t   : (__va).__va_stack[(__va).__va_arg - 6]);\t\\\n-      else\t\t\t\t\t\t\t\t\\\n-\t{\t\t\t\t\t\t\t\t\\\n-\t  long __obj[__va_nwords (__type)];\t\t\t\t\\\n-\t  int __i;\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-\t  for (__i = 0; __i < __va_nwords (__type); __i++)\t\t\\\n-\t    __obj[__i] = ((__va).__va_arg + __i < 6\t\t\t\\\n-\t\t\t  ? (__va).__va_iregs[(__va).__va_arg + __i]\t\\\n-\t\t\t  : (__va).__va_stack[(__va).__va_arg + __i - 6]); \\\n-\t\t\t\t\t\t\t\t\t\\\n-\t  __rv = (void *) &__obj[0];\t\t\t\t\t\\\n-\t}\t\t\t\t\t\t\t\t\\\n-      break;\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-    case __complex_type_class:\t\t\t\t\t\t\\\n-    case __function_type_class:\t\t\t\t\t\t\\\n-    case __method_type_class:\t\t\t\t\t\t\\\n-    case __array_type_class:\t\t\t\t\t\t\\\n-    case __string_type_class:\t\t\t\t\t\t\\\n-    case __set_type_class:\t\t\t\t\t\t\\\n-    case __file_type_class:\t\t\t\t\t\t\\\n-    case __lang_type_class:\t\t\t\t\t\t\\\n-    case __no_type_class:\t\t\t\t\t\t\\\n-    default:\t\t\t\t\t\t\t\t\\\n-\tabort ();\t\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  (__va).__va_arg += __va_nwords (__type);\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  __rv;\t\t\t\t\t\t\t\t\t\\\n-}))\n+(*(((__va).__offset += __va_tsize (__type)),\t\t\t\t\\\n+   (__type *)((__va).__base + (__va).__offset\t\t\t\t\\\n+\t      - (((__builtin_classify_type (* (__type *) 0)\t\t\\\n+\t\t   == __real_type_class) && (__va).__offset <= (6 * 8))\t\\\n+\t\t ? (6 * 8) + 8 : __va_tsize (__type)))))\n \n #endif /* defined (_STDARG_H) || defined (_VARARGS_H) */\n "}]}