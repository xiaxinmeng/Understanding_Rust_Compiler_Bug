{"sha": "2f7ac5ce576962dc7610d8cb3e0b107b05d77bbf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmY3YWM1Y2U1NzY5NjJkYzc2MTBkOGNiM2UwYjEwN2IwNWQ3N2JiZg==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2014-04-24T20:45:10Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2014-04-24T20:45:10Z"}, "message": "[multiple changes]\n\n2014-04-24  Segher Boessenkool  <segher@kernel.crashing.org>\n\n\tPR target/60822\n\t* config/m68k/m68k.md (extendplussidi): Don't allow memory for\n\toperand 1.\n\n2014-04-24  Jeff Law  <law@redhat.com>\n\n\tPR target/60822\n\t* gcc.c-torture/pr60822.c: New test.\n\t* gcc.c-torture/pr60822.x: New test.\n\nFrom-SVN: r209759", "tree": {"sha": "fea928645041bf61beac10d8fa5ffd18f8540b79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fea928645041bf61beac10d8fa5ffd18f8540b79"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f7ac5ce576962dc7610d8cb3e0b107b05d77bbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f7ac5ce576962dc7610d8cb3e0b107b05d77bbf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f7ac5ce576962dc7610d8cb3e0b107b05d77bbf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f7ac5ce576962dc7610d8cb3e0b107b05d77bbf/comments", "author": null, "committer": null, "parents": [{"sha": "0b18fd1b207d12f53fea5a3121084b19f670bb30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b18fd1b207d12f53fea5a3121084b19f670bb30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b18fd1b207d12f53fea5a3121084b19f670bb30"}], "stats": {"total": 47, "additions": 46, "deletions": 1}, "files": [{"sha": "6100b75683bb3d5cc6ae97578324312fcc818f5c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f7ac5ce576962dc7610d8cb3e0b107b05d77bbf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f7ac5ce576962dc7610d8cb3e0b107b05d77bbf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2f7ac5ce576962dc7610d8cb3e0b107b05d77bbf", "patch": "@@ -1,3 +1,9 @@\n+2014-04-24  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\tPR target/60822\n+\t* config/m68k/m68k.md (extendplussidi): Don't allow memory for\n+\toperand 1.\n+\n 2014-04-24  Dimitris Papavasiliou  <dpapavas@gmail.com>\n \n \t* flag-types.h (enum ivar_visibility): Add."}, {"sha": "72c11f592db8b2c49a8dcb192f1907df8a8f6c3b", "filename": "gcc/config/m68k/m68k.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f7ac5ce576962dc7610d8cb3e0b107b05d77bbf/gcc%2Fconfig%2Fm68k%2Fm68k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f7ac5ce576962dc7610d8cb3e0b107b05d77bbf/gcc%2Fconfig%2Fm68k%2Fm68k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.md?ref=2f7ac5ce576962dc7610d8cb3e0b107b05d77bbf", "patch": "@@ -1868,9 +1868,11 @@\n ;; Maybe there is a way to make that the general case, by forcing the\n ;; result of the SI tree to be in the lower register of the DI target\n \n+;; Don't allow memory for operand 1 as that would require an earlyclobber\n+;; which results in worse code\n (define_insn \"extendplussidi\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-    (sign_extend:DI (plus:SI (match_operand:SI 1 \"general_operand\" \"%rmn\")\n+    (sign_extend:DI (plus:SI (match_operand:SI 1 \"general_operand\" \"%rn\")\n             (match_operand:SI 2 \"general_operand\" \"rmn\"))))]\n   \"\"\n {"}, {"sha": "413d6ce8615e67bcdc14454d277379b90b5072a2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f7ac5ce576962dc7610d8cb3e0b107b05d77bbf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f7ac5ce576962dc7610d8cb3e0b107b05d77bbf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2f7ac5ce576962dc7610d8cb3e0b107b05d77bbf", "patch": "@@ -1,3 +1,9 @@\n+2014-04-24  Jeff Law  <law@redhat.com>\n+\n+\tPR target/60822\n+\t* gcc.c-torture/pr60822.c: New test.\n+\t* gcc.c-torture/pr60822.x: New test.\n+\n 2014-04-24  Dinar Temirbulatov  <dtemirbulatov@gmail.com>\n \n \tPR c++/57958"}, {"sha": "d2253310e69ce42adae327f9113916f28c51b36f", "filename": "gcc/testsuite/gcc.c-torture/execute/pr60822.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f7ac5ce576962dc7610d8cb3e0b107b05d77bbf/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr60822.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f7ac5ce576962dc7610d8cb3e0b107b05d77bbf/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr60822.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr60822.c?ref=2f7ac5ce576962dc7610d8cb3e0b107b05d77bbf", "patch": "@@ -0,0 +1,24 @@\n+struct X {\n+    char fill0[800000];\n+    int a;\n+    char fill1[900000];\n+    int b;\n+};\n+\n+int __attribute__((noinline,noclone))\n+Avg(struct X *p, int s)\n+{\n+    return (s * (long long)(p->a + p->b)) >> 17;\n+}\n+\n+struct X x;\n+\n+int main()\n+{\n+    x.a = 1 << 17;\n+    x.b = 2 << 17;\n+    if (Avg(&x, 1) != 3)\n+\t__builtin_abort();\n+    return 0;\n+}\n+"}, {"sha": "4efed4c325fdaf8e580e991d809ed0805bb70ac0", "filename": "gcc/testsuite/gcc.c-torture/execute/pr60822.x", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f7ac5ce576962dc7610d8cb3e0b107b05d77bbf/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr60822.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f7ac5ce576962dc7610d8cb3e0b107b05d77bbf/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr60822.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr60822.x?ref=2f7ac5ce576962dc7610d8cb3e0b107b05d77bbf", "patch": "@@ -0,0 +1,7 @@\n+load_lib target-supports.exp\n+\n+if { [check_effective_target_int32plus] } {\n+\treturn 0\n+}\n+\n+return 1;"}]}