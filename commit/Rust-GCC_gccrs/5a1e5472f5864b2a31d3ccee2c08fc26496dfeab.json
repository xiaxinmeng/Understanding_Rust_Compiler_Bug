{"sha": "5a1e5472f5864b2a31d3ccee2c08fc26496dfeab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWExZTU0NzJmNTg2NGIyYTMxZDNjY2VlMmMwOGZjMjY0OTZkZmVhYg==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2004-10-12T01:10:39Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2004-10-12T01:10:39Z"}, "message": "re PR libstdc++/17937 (Critical ~__pool troubles)\n\n\n2004-10-11  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/bits/stl_deque.h: Correct for over-long lines.\n\n2004-10-11  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tPR libstdc++/17937\n\t* include/ext/mt_allocator.h (__pool::_M_destroy): New.\n\t* src/mt_allocator.cc (__pool::~__pool): Change definitions to\n\t_M_destroy.\n\t* acconfig.h: Remove _GLIBCXX_USE___CXA_ATEXIT.\n\t* acinclude.m4 (GLIBCXX_ENABLE_CXA_ATEXIT): Remove.\n\t* configure.ac: Remove call to GLIBCXX_ENABLE_CXA_EXIT.\n\t* configure: Regenerate.\n\t* config/linker-map.gnu: Tweak exports.\n\t* docs/html/ext/mt_allocator.html: Update docs.\n\t* testsuite/ext/mt_allocator/deallocate_global-2.cc: Fix.\n\t* testsuite/ext/mt_allocator/deallocate_global-4.cc: Fix.\n\t* testsuite/ext/mt_allocator/deallocate_global_thread-1.cc: Fix.\n\t* testsuite/ext/mt_allocator/deallocate_global_thread-3.cc: Fix.\n\t* testsuite/ext/mt_allocator/deallocate_local-2.cc: Fix.\n\t* testsuite/ext/mt_allocator/deallocate_local-4.cc: Fix.\n\t* testsuite/ext/mt_allocator/deallocate_local_thread-3.cc: Fix.\n\t* testsuite/ext/mt_allocator/deallocate_local_thread-1.cc: Fix.\n\nFrom-SVN: r88913", "tree": {"sha": "78c99a88a4a9f7e8634edb1c6c35d4a19485dba1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/78c99a88a4a9f7e8634edb1c6c35d4a19485dba1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a1e5472f5864b2a31d3ccee2c08fc26496dfeab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a1e5472f5864b2a31d3ccee2c08fc26496dfeab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a1e5472f5864b2a31d3ccee2c08fc26496dfeab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a1e5472f5864b2a31d3ccee2c08fc26496dfeab/comments", "author": null, "committer": null, "parents": [{"sha": "e7b5576858b1f5772430e94f8ded17d0fb7764d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7b5576858b1f5772430e94f8ded17d0fb7764d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7b5576858b1f5772430e94f8ded17d0fb7764d0"}], "stats": {"total": 509, "additions": 270, "deletions": 239}, "files": [{"sha": "f736c640fa859fc4c8912f9f4f86261f991bb04a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1e5472f5864b2a31d3ccee2c08fc26496dfeab/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1e5472f5864b2a31d3ccee2c08fc26496dfeab/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5a1e5472f5864b2a31d3ccee2c08fc26496dfeab", "patch": "@@ -1,3 +1,28 @@\n+2004-10-11  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/bits/stl_deque.h: Correct for over-long lines.\n+\n+2004-10-11  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tPR libstdc++/17937\n+\t* include/ext/mt_allocator.h (__pool::_M_destroy): New.\n+\t* src/mt_allocator.cc (__pool::~__pool): Change definitions to\n+\t_M_destroy.\n+\t* acconfig.h: Remove _GLIBCXX_USE___CXA_ATEXIT.\n+\t* acinclude.m4 (GLIBCXX_ENABLE_CXA_ATEXIT): Remove.\n+\t* configure.ac: Remove call to GLIBCXX_ENABLE_CXA_EXIT.\n+\t* configure: Regenerate.\n+\t* config/linker-map.gnu: Tweak exports.\n+\t* docs/html/ext/mt_allocator.html: Update docs.\n+\t* testsuite/ext/mt_allocator/deallocate_global-2.cc: Fix.\n+\t* testsuite/ext/mt_allocator/deallocate_global-4.cc: Fix.\t\n+\t* testsuite/ext/mt_allocator/deallocate_global_thread-1.cc: Fix.\n+\t* testsuite/ext/mt_allocator/deallocate_global_thread-3.cc: Fix.\n+\t* testsuite/ext/mt_allocator/deallocate_local-2.cc: Fix.\n+\t* testsuite/ext/mt_allocator/deallocate_local-4.cc: Fix.\n+\t* testsuite/ext/mt_allocator/deallocate_local_thread-3.cc: Fix.\n+\t* testsuite/ext/mt_allocator/deallocate_local_thread-1.cc: Fix.\n+\n 2004-10-11  Benjamin Kosnik  <bkoz@redhat.com>\n \n \tPR libstdc++/16614 continued."}, {"sha": "cffecbd172fd21cf89f1fe0aaea4f32d9c9757db", "filename": "libstdc++-v3/acconfig.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1e5472f5864b2a31d3ccee2c08fc26496dfeab/libstdc%2B%2B-v3%2Facconfig.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1e5472f5864b2a31d3ccee2c08fc26496dfeab/libstdc%2B%2B-v3%2Facconfig.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facconfig.h?ref=5a1e5472f5864b2a31d3ccee2c08fc26496dfeab", "patch": "@@ -28,9 +28,6 @@\n // Define to use concept checking code from the boost libraries.\n #undef _GLIBCXX_CONCEPT_CHECKS\n \n-// Define to use __cxa_atexit.\n-#undef _GLIBCXX_USE___CXA_ATEXIT\n-\n // Define to use symbol versioning in the shared library.\n #undef _GLIBCXX_SYMVER\n "}, {"sha": "5f744ceb4f4d1cb6eb39304c38253dd85afae3ee", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1e5472f5864b2a31d3ccee2c08fc26496dfeab/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1e5472f5864b2a31d3ccee2c08fc26496dfeab/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=5a1e5472f5864b2a31d3ccee2c08fc26496dfeab", "patch": "@@ -611,21 +611,6 @@ AC_DEFUN([GLIBCXX_ENABLE_FULLY_DYNAMIC_STRING], [\n   fi\n ])\n \n-dnl\n-dnl Check for --enable-__cxa_atexit\n-dnl\n-dnl --enable-__cxa_atexit defines _GLIBCXX_USE___CXA_ATEXIT\n-dnl --disable-__cxa_atexit doesn't define _GLIBCXX_USE___CXA_ATEXIT\n-dnl  +  Usage:  GLIBCXX_ENABLE_FULLY_DYNAMIC_STRING[(DEFAULT)]\n-dnl       Where DEFAULT is either `yes' or `no'.\n-dnl\n-AC_DEFUN([GLIBCXX_ENABLE_CXA_ATEXIT], [\n-  GLIBCXX_ENABLE(__cxa_atexit,$1,,\n-                 [Define if __cxa_atexit is to be used instead of atexit.])\n-  if test $enable___cxa_atexit = yes; then\n-    AC_DEFINE(_GLIBCXX_USE___CXA_ATEXIT)\n-  fi\n-])\n \n dnl\n dnl Does any necessary configuration of the testsuite directory.  Generates"}, {"sha": "acb7d732abc2951f7b318f3dea12f54e4d24a685", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1e5472f5864b2a31d3ccee2c08fc26496dfeab/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1e5472f5864b2a31d3ccee2c08fc26496dfeab/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=5a1e5472f5864b2a31d3ccee2c08fc26496dfeab", "patch": "@@ -29,9 +29,6 @@\n // Define to use concept checking code from the boost libraries.\n #undef _GLIBCXX_CONCEPT_CHECKS\n \n-// Define to use __cxa_atexit.\n-#undef _GLIBCXX_USE___CXA_ATEXIT\n-\n // Define to use symbol versioning in the shared library.\n #undef _GLIBCXX_SYMVER\n "}, {"sha": "d47368e7f6d8229e70691427f507301b817cebcf", "filename": "libstdc++-v3/config/linker-map.gnu", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1e5472f5864b2a31d3ccee2c08fc26496dfeab/libstdc%2B%2B-v3%2Fconfig%2Flinker-map.gnu", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1e5472f5864b2a31d3ccee2c08fc26496dfeab/libstdc%2B%2B-v3%2Fconfig%2Flinker-map.gnu", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flinker-map.gnu?ref=5a1e5472f5864b2a31d3ccee2c08fc26496dfeab", "patch": "@@ -269,7 +269,7 @@ GLIBCXX_3.4.3 {\n     _ZN9__gnu_cxx6__poolILb1EE16_M_get_thread_idEv;\n     _ZN9__gnu_cxx6__poolILb[01]EE16_M_reserve_blockE[jm][jm];\n     _ZN9__gnu_cxx6__poolILb[01]EE16_M_reclaim_blockEPc[jm];\n-    _ZN9__gnu_cxx6__poolILb[01]EED[12]Ev;\n+    _ZN9__gnu_cxx6__poolILb[01]EE10_M_destroyEv;\n  \n     # stub functions from libmath\n     acosf;"}, {"sha": "b34c7dfc60e928a89ff573b62bbe35079cfcc103", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 2, "deletions": 27, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1e5472f5864b2a31d3ccee2c08fc26496dfeab/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1e5472f5864b2a31d3ccee2c08fc26496dfeab/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=5a1e5472f5864b2a31d3ccee2c08fc26496dfeab", "patch": "@@ -856,8 +856,6 @@ Optional Features:\n   --enable-sjlj-exceptions\n                           force use of builtin_setjmp for exceptions\n                           [default=auto]\n-  --enable-__cxa_atexit   Define if __cxa_atexit is to be used instead of\n-                          atexit. [default=no]\n   --enable-libstdcxx-pch  build pre-compiled libstdc++ headers\n                           [default=$is_hosted]\n   --enable-cstdio=PACKAGE use target-specific I/O package\n@@ -4399,7 +4397,7 @@ test x\"$pic_mode\" = xno && libtool_flags=\"$libtool_flags --prefer-non-pic\"\n case $host in\n *-*-irix6*)\n   # Find out which ABI we are using.\n-  echo '#line 4402 \"configure\"' > conftest.$ac_ext\n+  echo '#line 4400 \"configure\"' > conftest.$ac_ext\n   if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n   (eval $ac_compile) 2>&5\n   ac_status=$?\n@@ -5020,7 +5018,7 @@ fi;\n     #\n     # Fake what AC_TRY_COMPILE does.  XXX Look at redoing this new-style.\n     cat > conftest.$ac_ext << EOF\n-#line 5023 \"configure\"\n+#line 5021 \"configure\"\n struct S { ~S(); };\n void bar();\n void foo()\n@@ -5076,29 +5074,6 @@ ac_compiler_gnu=$ac_cv_c_compiler_gnu\n echo \"${ECHO_T}$ac_exception_model_name\" >&6\n \n \n-   # Check whether --enable-__cxa_atexit or --disable-__cxa_atexit was given.\n-if test \"${enable___cxa_atexit+set}\" = set; then\n-  enableval=\"$enable___cxa_atexit\"\n-\n-      case \"$enableval\" in\n-       yes|no) ;;\n-       *) { { echo \"$as_me:$LINENO: error: Argument to enable/disable __cxa_atexit must be yes or no\" >&5\n-echo \"$as_me: error: Argument to enable/disable __cxa_atexit must be yes or no\" >&2;}\n-   { (exit 1); exit 1; }; } ;;\n-      esac\n-\n-else\n-  enable___cxa_atexit=no\n-fi;\n-\n-  if test $enable___cxa_atexit = yes; then\n-    cat >>confdefs.h <<\\_ACEOF\n-#define _GLIBCXX_USE___CXA_ATEXIT 1\n-_ACEOF\n-\n-  fi\n-\n-\n   echo \"$as_me:$LINENO: checking for enabled PCH\" >&5\n echo $ECHO_N \"checking for enabled PCH... $ECHO_C\" >&6\n    # Check whether --enable-libstdcxx-pch or --disable-libstdcxx-pch was given."}, {"sha": "a11f034120be43456ba11be525d7e89a6fe51bac", "filename": "libstdc++-v3/configure.ac", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1e5472f5864b2a31d3ccee2c08fc26496dfeab/libstdc%2B%2B-v3%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1e5472f5864b2a31d3ccee2c08fc26496dfeab/libstdc%2B%2B-v3%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.ac?ref=5a1e5472f5864b2a31d3ccee2c08fc26496dfeab", "patch": "@@ -78,7 +78,6 @@ GLIBCXX_ENABLE_HOSTED\n \n # Check for support bits and g++ features that don't require linking.\n GLIBCXX_ENABLE_SJLJ_EXCEPTIONS\n-GLIBCXX_ENABLE_CXA_ATEXIT([no])\n GLIBCXX_ENABLE_PCH($is_hosted)\n \n # Enable all the variable C++ runtime options.  "}, {"sha": "6c3c27000143cbe4fb84224293ce4b72581353c9", "filename": "libstdc++-v3/docs/html/ext/mt_allocator.html", "status": "modified", "additions": 23, "deletions": 10, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1e5472f5864b2a31d3ccee2c08fc26496dfeab/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fmt_allocator.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1e5472f5864b2a31d3ccee2c08fc26496dfeab/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fmt_allocator.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fmt_allocator.html?ref=5a1e5472f5864b2a31d3ccee2c08fc26496dfeab", "patch": "@@ -275,16 +275,29 @@ <h3 class=\"left\">\n     a thread decides to return some blocks to the global freelist.\n </p>\n \n-<p> Notes about deallocation. On systems with the function\n-<code>__cxa_atexit</code>, the allocator will free all memory\n-allocated before program termination. However, because this relies on\n-the precise and exactly-conforming ordering of static destructors,\n-including those of a static local <code>__pool</code> object, it is\n-not available on systems that don't have the necessary underlying\n-support. On those systems, memory debugging programs like valgrind or\n-purify may notice leaks: sorry about this inconvenience. However, most\n-operating systems actually reclaim this memory at program termination\n-anyway.\n+<p> Notes about deallocation. This allocator does not explicitly\n+release memory. Because of this, memory debugging programs like\n+valgrind or purify may notice leaks: sorry about this\n+inconvenience. Operating systems will reclaim allocated memory at\n+program termination anyway. If sidestepping this kind of noise is\n+desired, there are two options: use an allocator, like\n+<code>new_allocator</code> that releases memory while debugging, or\n+use GLIBCXX_FORCE_NEW to bypass the allocator's internal pools.</p>\n+\n+<p>On systems with the function <code>__cxa_atexit</code>, the\n+allocator can be forced to free all memory allocated before program\n+termination with the member function\n+<code>__pool_type::_M_destroy</code>. However, because this member\n+function relies on the precise and exactly-conforming ordering of\n+static destructors, including those of a static local\n+<code>__pool</code> object, it should not be used, ever, on systems\n+that don't have the necessary underlying support. In addition, in\n+practice, forcing deallocation can be tricky, as it requires the\n+<code>__pool</code> object to be fully-constructed before the object\n+that uses it is fully constructed. For most (but not all) STL\n+containers, this works, as an instance of the allocator is constructed\n+as part of a container's constructor. However, this assumption is\n+implementation-specific, and subject to change.\n </p>\n \n <h3 class=\"left\">"}, {"sha": "8b50fb51bb5d9d69ac58de77429f5ac8833ec433", "filename": "libstdc++-v3/include/bits/stl_deque.h", "status": "modified", "additions": 113, "deletions": 98, "changes": 211, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1e5472f5864b2a31d3ccee2c08fc26496dfeab/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1e5472f5864b2a31d3ccee2c08fc26496dfeab/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h?ref=5a1e5472f5864b2a31d3ccee2c08fc26496dfeab", "patch": "@@ -87,10 +87,11 @@ namespace _GLIBCXX_STD\n   /**\n    *  @brief A deque::iterator.\n    *\n-   *  Quite a bit of intelligence here.  Much of the functionality of deque is\n-   *  actually passed off to this class.  A deque holds two of these internally,\n-   *  marking its valid range.  Access to elements is done as offsets of either\n-   *  of those two, relying on operator overloading in this class.\n+   *  Quite a bit of intelligence here.  Much of the functionality of\n+   *  deque is actually passed off to this class.  A deque holds two\n+   *  of these internally, marking its valid range.  Access to\n+   *  elements is done as offsets of either of those two, relying on\n+   *  operator overloading in this class.\n    *\n    *  @if maint\n    *  All the functions are op overloads except for _M_set_node.\n@@ -219,9 +220,9 @@ namespace _GLIBCXX_STD\n       { return *(*this + __n); }\n \n       /** @if maint\n-       *  Prepares to traverse new_node.  Sets everything except _M_cur, which\n-       *  should therefore be set by the caller immediately afterwards, based on\n-       *  _M_first and _M_last.\n+       *  Prepares to traverse new_node.  Sets everything except\n+       *  _M_cur, which should therefore be set by the caller\n+       *  immediately afterwards, based on _M_first and _M_last.\n        *  @endif\n        */\n       void\n@@ -445,7 +446,7 @@ namespace _GLIBCXX_STD\n     _Deque_base<_Tp, _Alloc>::\n     _M_initialize_map(size_t __num_elements)\n     {\n-      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))\n+      const size_t __num_nodes = (__num_elements/ __deque_buf_size(sizeof(_Tp))\n \t\t\t\t  + 1);\n \n       this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,\n@@ -530,28 +531,27 @@ namespace _GLIBCXX_STD\n    *  - size_t      _M_map_size\n    *  - iterator    _M_start, _M_finish\n    *\n-   *  map_size is at least 8.  %map is an array of map_size pointers-to-\"nodes\".\n-   *  (The name %map has nothing to do with the std::map class, and \"nodes\"\n-   *  should not be confused with std::list's usage of \"node\".)\n+   *  map_size is at least 8.  %map is an array of map_size\n+   *  pointers-to-\"nodes\".  (The name %map has nothing to do with the\n+   *  std::map class, and \"nodes\" should not be confused with\n+   *  std::list's usage of \"node\".)\n    *\n-   *  A \"node\" has no specific type name as such, but it is referred to as\n-   *  \"node\" in this file.  It is a simple array-of-Tp.  If Tp is very large,\n-   *  there will be one Tp element per node (i.e., an \"array\" of one).\n-   *  For non-huge Tp's, node size is inversely related to Tp size:  the\n-   *  larger the Tp, the fewer Tp's will fit in a node.  The goal here is to\n-   *  keep the total size of a node relatively small and constant over different\n-   *  Tp's, to improve allocator efficiency.\n+   *  A \"node\" has no specific type name as such, but it is referred\n+   *  to as \"node\" in this file.  It is a simple array-of-Tp.  If Tp\n+   *  is very large, there will be one Tp element per node (i.e., an\n+   *  \"array\" of one).  For non-huge Tp's, node size is inversely\n+   *  related to Tp size: the larger the Tp, the fewer Tp's will fit\n+   *  in a node.  The goal here is to keep the total size of a node\n+   *  relatively small and constant over different Tp's, to improve\n+   *  allocator efficiency.\n    *\n-   *  **** As I write this, the nodes are /not/ allocated using the high-speed\n-   *  memory pool.  There are 20 hours left in the year; perhaps I can fix\n-   *  this before 2002.\n-   *\n-   *  Not every pointer in the %map array will point to a node.  If the initial\n-   *  number of elements in the deque is small, the /middle/ %map pointers will\n-   *  be valid, and the ones at the edges will be unused.  This same situation\n-   *  will arise as the %map grows:  available %map pointers, if any, will be on\n-   *  the ends.  As new nodes are created, only a subset of the %map's pointers\n-   *  need to be copied \"outward\".\n+   *  Not every pointer in the %map array will point to a node.  If\n+   *  the initial number of elements in the deque is small, the\n+   *  /middle/ %map pointers will be valid, and the ones at the edges\n+   *  will be unused.  This same situation will arise as the %map\n+   *  grows: available %map pointers, if any, will be on the ends.  As\n+   *  new nodes are created, only a subset of the %map's pointers need\n+   *  to be copied \"outward\".\n    *\n    *  Class invariants:\n    * - For any nonsingular iterator i:\n@@ -563,16 +563,17 @@ namespace _GLIBCXX_STD\n    *    - i.cur is a pointer in the range [i.first, i.last).  NOTE:\n    *      the implication of this is that i.cur is always a dereferenceable\n    *      pointer, even if i is a past-the-end iterator.\n-   * - Start and Finish are always nonsingular iterators.  NOTE: this means that\n-   *   an empty deque must have one node, a deque with <N elements (where N is\n-   *   the node buffer size) must have one node, a deque with N through (2N-1)\n-   *   elements must have two nodes, etc.\n-   * - For every node other than start.node and finish.node, every element in\n-   *   the node is an initialized object.  If start.node == finish.node, then\n-   *   [start.cur, finish.cur) are initialized objects, and the elements outside\n-   *   that range are uninitialized storage.  Otherwise, [start.cur, start.last)\n-   *   and [finish.first, finish.cur) are initialized objects, and [start.first,\n-   *   start.cur) and [finish.cur, finish.last) are uninitialized storage.\n+   * - Start and Finish are always nonsingular iterators.  NOTE: this\n+   * means that an empty deque must have one node, a deque with <N\n+   * elements (where N is the node buffer size) must have one node, a\n+   * deque with N through (2N-1) elements must have two nodes, etc.\n+   * - For every node other than start.node and finish.node, every\n+   * element in the node is an initialized object.  If start.node ==\n+   * finish.node, then [start.cur, finish.cur) are initialized\n+   * objects, and the elements outside that range are uninitialized\n+   * storage.  Otherwise, [start.cur, start.last) and [finish.first,\n+   * finish.cur) are initialized objects, and [start.first, start.cur)\n+   * and [finish.cur, finish.last) are uninitialized storage.\n    * - [%map, %map + map_size) is a valid, non-empty range.\n    * - [start.node, finish.node] is a valid range contained within\n    *   [%map, %map + map_size).\n@@ -677,7 +678,8 @@ namespace _GLIBCXX_STD\n        */\n       deque(const deque& __x)\n       : _Base(__x.get_allocator(), __x.size())\n-      { std::__uninitialized_copy_a(__x.begin(), __x.end(), this->_M_impl._M_start,\n+      { std::__uninitialized_copy_a(__x.begin(), __x.end(), \n+\t\t\t\t    this->_M_impl._M_start,\n \t\t\t\t    this->get_allocator()); }\n \n       /**\n@@ -728,10 +730,10 @@ namespace _GLIBCXX_STD\n        *  @param  n  Number of elements to be assigned.\n        *  @param  val  Value to be assigned.\n        *\n-       *  This function fills a %deque with @a n copies of the given value.\n-       *  Note that the assignment completely changes the %deque and that the\n-       *  resulting %deque's size is the same as the number of elements assigned.\n-       *  Old data may be lost.\n+       *  This function fills a %deque with @a n copies of the given\n+       *  value.  Note that the assignment completely changes the\n+       *  %deque and that the resulting %deque's size is the same as\n+       *  the number of elements assigned.  Old data may be lost.\n        */\n       void\n       assign(size_type __n, const value_type& __val)\n@@ -780,50 +782,53 @@ namespace _GLIBCXX_STD\n       { return this->_M_impl._M_start; }\n \n       /**\n-       *  Returns a read/write iterator that points one past the last element in\n-       *  the %deque.  Iteration is done in ordinary element order.\n+       *  Returns a read/write iterator that points one past the last\n+       *  element in the %deque.  Iteration is done in ordinary\n+       *  element order.\n        */\n       iterator\n       end()\n       { return this->_M_impl._M_finish; }\n \n       /**\n-       *  Returns a read-only (constant) iterator that points one past the last\n-       *  element in the %deque.  Iteration is done in ordinary element order.\n+       *  Returns a read-only (constant) iterator that points one past\n+       *  the last element in the %deque.  Iteration is done in\n+       *  ordinary element order.\n        */\n       const_iterator\n       end() const\n       { return this->_M_impl._M_finish; }\n \n       /**\n-       *  Returns a read/write reverse iterator that points to the last element\n-       *  in the %deque.  Iteration is done in reverse element order.\n+       *  Returns a read/write reverse iterator that points to the\n+       *  last element in the %deque.  Iteration is done in reverse\n+       *  element order.\n        */\n       reverse_iterator\n       rbegin()\n       { return reverse_iterator(this->_M_impl._M_finish); }\n \n       /**\n-       *  Returns a read-only (constant) reverse iterator that points to the\n-       *  last element in the %deque.  Iteration is done in reverse element\n-       *  order.\n+       *  Returns a read-only (constant) reverse iterator that points\n+       *  to the last element in the %deque.  Iteration is done in\n+       *  reverse element order.\n        */\n       const_reverse_iterator\n       rbegin() const\n       { return const_reverse_iterator(this->_M_impl._M_finish); }\n \n       /**\n-       *  Returns a read/write reverse iterator that points to one before the\n-       *  first element in the %deque.  Iteration is done in reverse element\n-       *  order.\n+       *  Returns a read/write reverse iterator that points to one\n+       *  before the first element in the %deque.  Iteration is done\n+       *  in reverse element order.\n        */\n       reverse_iterator\n       rend() { return reverse_iterator(this->_M_impl._M_start); }\n \n       /**\n-       *  Returns a read-only (constant) reverse iterator that points to one\n-       *  before the first element in the %deque.  Iteration is done in reverse\n-       *  element order.\n+       *  Returns a read-only (constant) reverse iterator that points\n+       *  to one before the first element in the %deque.  Iteration is\n+       *  done in reverse element order.\n        */\n       const_reverse_iterator\n       rend() const\n@@ -845,10 +850,11 @@ namespace _GLIBCXX_STD\n        *  @param  new_size  Number of elements the %deque should contain.\n        *  @param  x  Data with which new elements should be populated.\n        *\n-       *  This function will %resize the %deque to the specified number of\n-       *  elements.  If the number is smaller than the %deque's current size the\n-       *  %deque is truncated, otherwise the %deque is extended and new elements\n-       *  are populated with given data.\n+       *  This function will %resize the %deque to the specified\n+       *  number of elements.  If the number is smaller than the\n+       *  %deque's current size the %deque is truncated, otherwise the\n+       *  %deque is extended and new elements are populated with given\n+       *  data.\n        */\n       void\n       resize(size_type __new_size, const value_type& __x)\n@@ -864,44 +870,49 @@ namespace _GLIBCXX_STD\n        *  @brief  Resizes the %deque to the specified number of elements.\n        *  @param  new_size  Number of elements the %deque should contain.\n        *\n-       *  This function will resize the %deque to the specified number of\n-       *  elements.  If the number is smaller than the %deque's current size the\n-       *  %deque is truncated, otherwise the %deque is extended and new elements\n-       *  are default-constructed.\n+       *  This function will resize the %deque to the specified number\n+       *  of elements.  If the number is smaller than the %deque's\n+       *  current size the %deque is truncated, otherwise the %deque\n+       *  is extended and new elements are default-constructed.\n        */\n       void\n       resize(size_type new_size)\n       { resize(new_size, value_type()); }\n \n       /**\n-       *  Returns true if the %deque is empty.  (Thus begin() would equal end().)\n+       *  Returns true if the %deque is empty.  (Thus begin() would\n+       *  equal end().)\n        */\n       bool\n       empty() const\n       { return this->_M_impl._M_finish == this->_M_impl._M_start; }\n \n       // element access\n       /**\n-       *  @brief  Subscript access to the data contained in the %deque.\n-       *  @param  n  The index of the element for which data should be accessed.\n+       *  @brief Subscript access to the data contained in the %deque.\n+       *  @param n The index of the element for which data should be\n+       *  accessed.\n        *  @return  Read/write reference to data.\n        *\n        *  This operator allows for easy, array-style, data access.\n-       *  Note that data access with this operator is unchecked and out_of_range\n-       *  lookups are not defined. (For checked lookups see at().)\n+       *  Note that data access with this operator is unchecked and\n+       *  out_of_range lookups are not defined. (For checked lookups\n+       *  see at().)\n        */\n       reference\n       operator[](size_type __n)\n       { return this->_M_impl._M_start[difference_type(__n)]; }\n \n       /**\n-       *  @brief  Subscript access to the data contained in the %deque.\n-       *  @param  n  The index of the element for which data should be accessed.\n+       *  @brief Subscript access to the data contained in the %deque.\n+       *  @param n The index of the element for which data should be\n+       *  accessed.\n        *  @return  Read-only (constant) reference to data.\n        *\n        *  This operator allows for easy, array-style, data access.\n-       *  Note that data access with this operator is unchecked and out_of_range\n-       *  lookups are not defined. (For checked lookups see at().)\n+       *  Note that data access with this operator is unchecked and\n+       *  out_of_range lookups are not defined. (For checked lookups\n+       *  see at().)\n        */\n       const_reference\n       operator[](size_type __n) const\n@@ -919,13 +930,14 @@ namespace _GLIBCXX_STD\n     public:\n       /**\n        *  @brief  Provides access to the data contained in the %deque.\n-       *  @param  n  The index of the element for which data should be accessed.\n+       *  @param n The index of the element for which data should be\n+       *  accessed.\n        *  @return  Read/write reference to data.\n        *  @throw  std::out_of_range  If @a n is an invalid index.\n        *\n-       *  This function provides for safer data access.  The parameter is first\n-       *  checked that it is in the range of the deque.  The function throws\n-       *  out_of_range if the check fails.\n+       *  This function provides for safer data access.  The parameter\n+       *  is first checked that it is in the range of the deque.  The\n+       *  function throws out_of_range if the check fails.\n        */\n       reference\n       at(size_type __n)\n@@ -936,7 +948,8 @@ namespace _GLIBCXX_STD\n \n       /**\n        *  @brief  Provides access to the data contained in the %deque.\n-       *  @param  n  The index of the element for which data should be accessed.\n+       *  @param n The index of the element for which data should be\n+       *  accessed.\n        *  @return  Read-only (constant) reference to data.\n        *  @throw  std::out_of_range  If @a n is an invalid index.\n        *\n@@ -952,8 +965,8 @@ namespace _GLIBCXX_STD\n       }\n \n       /**\n-       *  Returns a read/write reference to the data at the first element of the\n-       *  %deque.\n+       *  Returns a read/write reference to the data at the first\n+       *  element of the %deque.\n        */\n       reference\n       front()\n@@ -996,9 +1009,10 @@ namespace _GLIBCXX_STD\n        *  @brief  Add data to the front of the %deque.\n        *  @param  x  Data to be added.\n        *\n-       *  This is a typical stack operation.  The function creates an element at\n-       *  the front of the %deque and assigns the given data to it.  Due to the\n-       *  nature of a %deque this operation can be done in constant time.\n+       *  This is a typical stack operation.  The function creates an\n+       *  element at the front of the %deque and assigns the given\n+       *  data to it.  Due to the nature of a %deque this operation\n+       *  can be done in constant time.\n        */\n       void\n       push_front(const value_type& __x)\n@@ -1016,9 +1030,10 @@ namespace _GLIBCXX_STD\n        *  @brief  Add data to the end of the %deque.\n        *  @param  x  Data to be added.\n        *\n-       *  This is a typical stack operation.  The function creates an element at\n-       *  the end of the %deque and assigns the given data to it.  Due to the\n-       *  nature of a %deque this operation can be done in constant time.\n+       *  This is a typical stack operation.  The function creates an\n+       *  element at the end of the %deque and assigns the given data\n+       *  to it.  Due to the nature of a %deque this operation can be\n+       *  done in constant time.\n        */\n       void\n       push_back(const value_type& __x)\n@@ -1106,9 +1121,9 @@ namespace _GLIBCXX_STD\n        *  @param  first  An input iterator.\n        *  @param  last   An input iterator.\n        *\n-       *  This function will insert copies of the data in the range [first,last)\n-       *  into the %deque before the location specified by @a pos.  This is\n-       *  known as \"range insert.\"\n+       *  This function will insert copies of the data in the range\n+       *  [first,last) into the %deque before the location specified\n+       *  by @a pos.  This is known as \"range insert.\"\n        */\n       template<typename _InputIterator>\n         void\n@@ -1235,8 +1250,8 @@ namespace _GLIBCXX_STD\n        *  @brief Fills the %deque with copies of value.\n        *  @param  value  Initial value.\n        *  @return   Nothing.\n-       *  @pre _M_start and _M_finish have already been initialized, but none of\n-       *       the %deque's elements have yet been constructed.\n+       *  @pre _M_start and _M_finish have already been initialized,\n+       *  but none of the %deque's elements have yet been constructed.\n        *\n        *  This function is called only when the user provides an explicit size\n        *  (with or without an explicit exemplar value).\n@@ -1292,8 +1307,8 @@ namespace _GLIBCXX_STD\n \t    erase(std::copy(__first, __last, begin()), end());\n \t}\n \n-      // Called by assign(n,t), and the range assign when it turns out to be the\n-      // same thing.\n+      // Called by assign(n,t), and the range assign when it turns out\n+      // to be the same thing.\n       void\n       _M_fill_assign(size_type __n, const value_type& __val)\n       {\n@@ -1419,9 +1434,9 @@ namespace _GLIBCXX_STD\n        *  @if maint\n        *  @brief Memory-handling helpers for the major %map.\n        *\n-       *  Makes sure the _M_map has space for new nodes.  Does not actually add\n-       *  the nodes.  Can invalidate _M_map pointers.  (And consequently, %deque\n-       *  iterators.)\n+       *  Makes sure the _M_map has space for new nodes.  Does not\n+       *  actually add the nodes.  Can invalidate _M_map pointers.\n+       *  (And consequently, %deque iterators.)\n        *  @endif\n        */\n       void"}, {"sha": "115ade7c2843b973df970b9adb5aaef24e071630", "filename": "libstdc++-v3/include/ext/mt_allocator.h", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1e5472f5864b2a31d3ccee2c08fc26496dfeab/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1e5472f5864b2a31d3ccee2c08fc26496dfeab/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h?ref=5a1e5472f5864b2a31d3ccee2c08fc26496dfeab", "patch": "@@ -274,6 +274,9 @@ namespace __gnu_cxx\n \t  }\n       }\n \n+      void\n+      _M_destroy() throw();\n+\n       char* \n       _M_reserve_block(size_t __bytes, const size_t __thread_id);\n     \n@@ -319,7 +322,7 @@ namespace __gnu_cxx\n \t_M_once = __tmp;\n       }\n \n-      ~__pool();\n+      ~__pool() { }\n \n     private:\n       // An \"array\" of bin_records each of which represents a specific\n@@ -364,6 +367,9 @@ namespace __gnu_cxx\n \t  _M_initialize();\n       }\n \n+      void\n+      _M_destroy() throw();\n+\n       char* \n       _M_reserve_block(size_t __bytes, const size_t __thread_id);\n     \n@@ -387,7 +393,7 @@ namespace __gnu_cxx\n       explicit __pool(const __pool_base::_Tune& __tune) \n       : __pool_base(__tune), _M_bin(NULL), _M_bin_size(1) { }\n \n-      ~__pool();\n+      ~__pool() { }\n \n     private:\n       // An \"array\" of bin_records each of which represents a specific\n@@ -638,9 +644,6 @@ namespace __gnu_cxx\n \t  typedef __mt_alloc<_Tp1, pol_type> other;\n \t};\n \n-      // Create pool instance so that order of construction will be\n-      // pool_type first, then allocator. This is necessary for\n-      // correct global and static object construction/destruction.\n       __mt_alloc() throw() \n       { __policy_type::_S_get_pool(); }\n "}, {"sha": "373217d9ebcb29515f433ccf838f5a20b27b7863", "filename": "libstdc++-v3/src/mt_allocator.cc", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1e5472f5864b2a31d3ccee2c08fc26496dfeab/libstdc%2B%2B-v3%2Fsrc%2Fmt_allocator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1e5472f5864b2a31d3ccee2c08fc26496dfeab/libstdc%2B%2B-v3%2Fsrc%2Fmt_allocator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fmt_allocator.cc?ref=5a1e5472f5864b2a31d3ccee2c08fc26496dfeab", "patch": "@@ -46,9 +46,9 @@ namespace __gnu_internal\n \n namespace __gnu_cxx\n {\n-  __pool<false>::~__pool()\n+  void\n+  __pool<false>::_M_destroy() throw()\n   {\n-#ifdef _GLIBCXX_USE___CXA_ATEXIT\n     if (_M_init && !_M_options._M_force_new)\n       {\n \tfor (size_t __n = 0; __n < _M_bin_size; ++__n)\n@@ -66,7 +66,6 @@ namespace __gnu_cxx\n \tdelete _M_bin;\n \tdelete _M_binmap;\n       }\n-#endif\n   }\n \n   void\n@@ -174,9 +173,9 @@ namespace __gnu_cxx\n   }\n   \n #ifdef __GTHREADS\n-  __pool<true>::~__pool()\n+  void\n+  __pool<true>::_M_destroy() throw()\n   {\n-#ifdef _GLIBCXX_USE___CXA_ATEXIT\n     if (_M_init && !_M_options._M_force_new)\n       {\n \tif (__gthread_active_p())\n@@ -216,7 +215,6 @@ namespace __gnu_cxx\n \tdelete _M_bin;\n \tdelete _M_binmap;\n       }\n-#endif\n   }\n \n   void"}, {"sha": "625cbc94cf19e92b79979e5d68ac72af120ba8f1", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/deallocate_global-2.cc", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1e5472f5864b2a31d3ccee2c08fc26496dfeab/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_global-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1e5472f5864b2a31d3ccee2c08fc26496dfeab/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_global-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_global-2.cc?ref=5a1e5472f5864b2a31d3ccee2c08fc26496dfeab", "patch": "@@ -19,6 +19,7 @@\n \n // 20.4.1.1 allocator members\n \n+#include <list>\n #include <string>\n #include <stdexcept>\n #include <ext/mt_allocator.h>\n@@ -31,13 +32,15 @@ struct count_check\n   count_check() {}\n   ~count_check()\n   {\n-#ifdef _GLIBCXX_USE___CXA_ATEXIT\n     if (count != 0)\n-      throw std::exception();\n-#endif\n+      {\n+\t// NB: __mt_allocator doesn't clean itself up. Thus, this will\n+\t// not be zero.\n+      }\n   }\n };\n  \n+// First.\n static count_check check;\n \n void* operator new(size_t size) throw(std::bad_alloc)\n@@ -63,15 +66,17 @@ void operator delete(void* p) throw()\n   free(p);\n }\n \n-typedef char char_t;\n-typedef std::char_traits<char_t> traits_t;\n-typedef __gnu_cxx::__common_pool_policy<false> pool_t;\n-typedef __gnu_cxx::__mt_alloc<char_t, pool_t> allocator_t;\n-typedef std::basic_string<char_t, traits_t, allocator_t> string_t;\n+typedef std::string value_t;\n+typedef __gnu_cxx::__common_pool_policy<false> policy_t;\n+typedef __gnu_cxx::__mt_alloc<value_t, policy_t> allocator_t;\n+typedef std::char_traits<value_t> traits_t;\n+typedef std::list<value_t, allocator_t> list_t;\n \n-string_t s(\"bayou bend\");\n+// Second.\n+list_t l;\n \n int main()\n {\n+  l.push_back(\"bayou bend\");\n   return 0;\n }"}, {"sha": "8d048bbeaafc3746cbdf38c9d2ec6e44b605d381", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/deallocate_global-4.cc", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1e5472f5864b2a31d3ccee2c08fc26496dfeab/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_global-4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1e5472f5864b2a31d3ccee2c08fc26496dfeab/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_global-4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_global-4.cc?ref=5a1e5472f5864b2a31d3ccee2c08fc26496dfeab", "patch": "@@ -19,6 +19,7 @@\n \n // 20.4.1.1 allocator members\n \n+#include <list>\n #include <string>\n #include <stdexcept>\n #include <ext/mt_allocator.h>\n@@ -31,13 +32,15 @@ struct count_check\n   count_check() {}\n   ~count_check()\n   {\n-#ifdef _GLIBCXX_USE___CXA_ATEXIT\n     if (count != 0)\n-      throw std::runtime_error(\"count isn't zero\");\n-#endif\n+      {\n+\t// NB: __mt_allocator doesn't clean itself up. Thus, this will\n+\t// not be zero.\n+      }\n   }\n };\n  \n+// First.\n static count_check check;\n \n void* operator new(size_t size) throw(std::bad_alloc)\n@@ -63,15 +66,17 @@ void operator delete(void* p) throw()\n   free(p);\n }\n \n-typedef char char_t;\n-typedef std::char_traits<char_t> traits_t;\n-typedef __gnu_cxx::__per_type_pool_policy<char_t, false> pool_t;\n-typedef __gnu_cxx::__mt_alloc<char_t, pool_t> allocator_t;\n-typedef std::basic_string<char_t, traits_t, allocator_t> string_t;\n+typedef std::string value_t;\n+typedef __gnu_cxx::__per_type_pool_policy<value_t, false> policy_t;\n+typedef __gnu_cxx::__mt_alloc<value_t, policy_t> allocator_t;\n+typedef std::char_traits<value_t> traits_t;\n+typedef std::list<value_t, allocator_t> list_t;\n \n-string_t s(\"bayou bend\");\n+// Second.\n+list_t l;\n \n int main()\n {\n+  l.push_back(\"bayou bend\");\n   return 0;\n }"}, {"sha": "0a6904171d0dd9a84ce80d5c34552e1abbe97938", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/deallocate_global_thread-1.cc", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1e5472f5864b2a31d3ccee2c08fc26496dfeab/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_global_thread-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1e5472f5864b2a31d3ccee2c08fc26496dfeab/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_global_thread-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_global_thread-1.cc?ref=5a1e5472f5864b2a31d3ccee2c08fc26496dfeab", "patch": "@@ -19,6 +19,7 @@\n \n // 20.4.1.1 allocator members\n \n+#include <list>\n #include <string>\n #include <stdexcept>\n #include <ext/mt_allocator.h>\n@@ -31,13 +32,15 @@ struct count_check\n   count_check() {}\n   ~count_check()\n   {\n-#ifdef _GLIBCXX_USE___CXA_ATEXIT\n     if (count != 0)\n-      throw std::runtime_error(\"count isn't zero\");\n-#endif\n+      {\n+\t// NB: __mt_allocator doesn't clean itself up. Thus, this will\n+\t// not be zero.\n+      }\n   }\n };\n  \n+// First.\n static count_check check;\n \n void* operator new(size_t size) throw(std::bad_alloc)\n@@ -63,15 +66,17 @@ void operator delete(void* p) throw()\n   free(p);\n }\n \n-typedef char char_t;\n-typedef std::char_traits<char_t> traits_t;\n-typedef __gnu_cxx::__common_pool_policy<true> pool_t;\n-typedef __gnu_cxx::__mt_alloc<char_t, pool_t> allocator_t;\n-typedef std::basic_string<char_t, traits_t, allocator_t> string_t;\n+typedef std::string value_t;\n+typedef __gnu_cxx::__common_pool_policy<true> policy_t;\n+typedef __gnu_cxx::__mt_alloc<value_t, policy_t> allocator_t;\n+typedef std::char_traits<value_t> traits_t;\n+typedef std::list<value_t, allocator_t> list_t;\n \n-string_t s(\"bayou bend\");\n+// Second.\n+list_t l;\n \n int main()\n {\n+  l.push_back(\"bayou bend\");\n   return 0;\n }"}, {"sha": "d764d41c9a0bb8804b5e0a3b0445704856a2df8f", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/deallocate_global_thread-3.cc", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1e5472f5864b2a31d3ccee2c08fc26496dfeab/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_global_thread-3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1e5472f5864b2a31d3ccee2c08fc26496dfeab/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_global_thread-3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_global_thread-3.cc?ref=5a1e5472f5864b2a31d3ccee2c08fc26496dfeab", "patch": "@@ -19,6 +19,7 @@\n \n // 20.4.1.1 allocator members\n \n+#include <list>\n #include <string>\n #include <stdexcept>\n #include <ext/mt_allocator.h>\n@@ -31,13 +32,15 @@ struct count_check\n   count_check() {}\n   ~count_check()\n   {\n-#ifdef _GLIBCXX_USE___CXA_ATEXIT\n     if (count != 0)\n-      throw std::runtime_error(\"count isn't zero\");\n-#endif\n+      {\n+\t// NB: __mt_allocator doesn't clean itself up. Thus, this will\n+\t// not be zero.\n+      }\n   }\n };\n  \n+// First.\n static count_check check;\n \n void* operator new(size_t size) throw(std::bad_alloc)\n@@ -63,15 +66,17 @@ void operator delete(void* p) throw()\n   free(p);\n }\n \n-typedef char char_t;\n-typedef std::char_traits<char_t> traits_t;\n-typedef __gnu_cxx::__per_type_pool_policy<char_t, true> pool_t;\n-typedef __gnu_cxx::__mt_alloc<char_t, pool_t> allocator_t;\n-typedef std::basic_string<char_t, traits_t, allocator_t> string_t;\n+typedef std::string value_t;\n+typedef __gnu_cxx::__per_type_pool_policy<value_t, true> policy_t;\n+typedef __gnu_cxx::__mt_alloc<value_t, policy_t> allocator_t;\n+typedef std::char_traits<value_t> traits_t;\n+typedef std::list<value_t, allocator_t> list_t;\n \n-string_t s(\"bayou bend\");\n+// Second.\n+list_t l;\n \n int main()\n {\n+  l.push_back(\"bayou bend\");\n   return 0;\n }"}, {"sha": "ae1ca528ee05faee0624900d111bcc16417a70b0", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/deallocate_local-2.cc", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1e5472f5864b2a31d3ccee2c08fc26496dfeab/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1e5472f5864b2a31d3ccee2c08fc26496dfeab/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local-2.cc?ref=5a1e5472f5864b2a31d3ccee2c08fc26496dfeab", "patch": "@@ -31,10 +31,11 @@ struct count_check\n   count_check() {}\n   ~count_check()\n   {\n-#ifdef _GLIBCXX_USE___CXA_ATEXIT\n     if (count != 0)\n-      throw std::runtime_error(\"count isn't zero\");\n-#endif\n+      {\n+\t// NB: __mt_allocator doesn't clean itself up. Thus, this will\n+\t// not be zero.\n+      }\n   }\n };\n  \n@@ -63,11 +64,11 @@ void operator delete(void* p) throw()\n   free(p);\n }\n \n-typedef char char_t;\n-typedef std::char_traits<char_t> traits_t;\n-typedef __gnu_cxx::__common_pool_policy<false> pool_t;\n-typedef __gnu_cxx::__mt_alloc<char_t, pool_t> allocator_t;\n-typedef std::basic_string<char_t, traits_t, allocator_t> string_t;\n+typedef char value_t;\n+typedef std::char_traits<value_t> traits_t;\n+typedef __gnu_cxx::__common_pool_policy<false> policy_t;\n+typedef __gnu_cxx::__mt_alloc<value_t, policy_t> allocator_t;\n+typedef std::basic_string<value_t, traits_t, allocator_t> string_t;\n \n int main()\n {"}, {"sha": "5321b8d61faf3eaa438576e6bd7cc4cf7efc0ee9", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/deallocate_local-4.cc", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1e5472f5864b2a31d3ccee2c08fc26496dfeab/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local-4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1e5472f5864b2a31d3ccee2c08fc26496dfeab/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local-4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local-4.cc?ref=5a1e5472f5864b2a31d3ccee2c08fc26496dfeab", "patch": "@@ -31,10 +31,11 @@ struct count_check\n   count_check() {}\n   ~count_check()\n   {\n-#ifdef _GLIBCXX_USE___CXA_ATEXIT\n     if (count != 0)\n-      throw std::runtime_error(\"count isn't zero\");\n-#endif\n+      {\n+\t// NB: __mt_allocator doesn't clean itself up. Thus, this will\n+\t// not be zero.\n+      }\n   }\n };\n  \n@@ -63,11 +64,11 @@ void operator delete(void* p) throw()\n   free(p);\n }\n \n-typedef char char_t;\n-typedef std::char_traits<char_t> traits_t;\n-typedef __gnu_cxx::__per_type_pool_policy<char_t, false> pool_t;\n-typedef __gnu_cxx::__mt_alloc<char_t, pool_t> allocator_t;\n-typedef std::basic_string<char_t, traits_t, allocator_t> string_t;\n+typedef char value_t;\n+typedef std::char_traits<value_t> traits_t;\n+typedef __gnu_cxx::__per_type_pool_policy<value_t, false> policy_t;\n+typedef __gnu_cxx::__mt_alloc<value_t, policy_t> allocator_t;\n+typedef std::basic_string<value_t, traits_t, allocator_t> string_t;\n \n int main()\n {"}, {"sha": "0f3a57a4c8ba1033e65537e48dbe63373be2a9e2", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/deallocate_local_thread-1.cc", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1e5472f5864b2a31d3ccee2c08fc26496dfeab/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local_thread-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1e5472f5864b2a31d3ccee2c08fc26496dfeab/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local_thread-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local_thread-1.cc?ref=5a1e5472f5864b2a31d3ccee2c08fc26496dfeab", "patch": "@@ -31,10 +31,11 @@ struct count_check\n   count_check() {}\n   ~count_check()\n   {\n-#ifdef _GLIBCXX_USE___CXA_ATEXIT\n     if (count != 0)\n-      throw std::runtime_error(\"count isn't zero\");\n-#endif\n+      {\n+\t// NB: __mt_allocator doesn't clean itself up. Thus, this will\n+\t// not be zero.\n+      }\n   }\n };\n  \n@@ -63,11 +64,11 @@ void operator delete(void* p) throw()\n   free(p);\n }\n \n-typedef char char_t;\n-typedef std::char_traits<char_t> traits_t;\n-typedef __gnu_cxx::__common_pool_policy<true> pool_t;\n-typedef __gnu_cxx::__mt_alloc<char_t, pool_t> allocator_t;\n-typedef std::basic_string<char_t, traits_t, allocator_t> string_t;\n+typedef char value_t;\n+typedef std::char_traits<value_t> traits_t;\n+typedef __gnu_cxx::__common_pool_policy<true> policy_t;\n+typedef __gnu_cxx::__mt_alloc<value_t, policy_t> allocator_t;\n+typedef std::basic_string<value_t, traits_t, allocator_t> string_t;\n \n int main()\n {"}, {"sha": "e293b5c5193e07ffd35a5d6cc6aaad4775e6acb9", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/deallocate_local_thread-3.cc", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1e5472f5864b2a31d3ccee2c08fc26496dfeab/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local_thread-3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1e5472f5864b2a31d3ccee2c08fc26496dfeab/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local_thread-3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local_thread-3.cc?ref=5a1e5472f5864b2a31d3ccee2c08fc26496dfeab", "patch": "@@ -31,10 +31,11 @@ struct count_check\n   count_check() {}\n   ~count_check()\n   {\n-#ifdef _GLIBCXX_USE___CXA_ATEXIT\n     if (count != 0)\n-      throw std::runtime_error(\"count isn't zero\");\n-#endif\n+      {\n+\t// NB: __mt_allocator doesn't clean itself up. Thus, this will\n+\t// not be zero.\n+      }\n   }\n };\n  \n@@ -63,11 +64,11 @@ void operator delete(void* p) throw()\n   free(p);\n }\n \n-typedef char char_t;\n-typedef std::char_traits<char_t> traits_t;\n-typedef __gnu_cxx::__per_type_pool_policy<char_t, true> pool_t;\n-typedef __gnu_cxx::__mt_alloc<char_t, pool_t> allocator_t;\n-typedef std::basic_string<char_t, traits_t, allocator_t> string_t;\n+typedef char value_t;\n+typedef std::char_traits<value_t> traits_t;\n+typedef __gnu_cxx::__per_type_pool_policy<value_t, true> policy_t;\n+typedef __gnu_cxx::__mt_alloc<value_t, policy_t> allocator_t;\n+typedef std::basic_string<value_t, traits_t, allocator_t> string_t;\n \n int main()\n {"}, {"sha": "6e8098a609d1c426dbc91a82e95df04e9684361c", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/tune-3.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1e5472f5864b2a31d3ccee2c08fc26496dfeab/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Ftune-3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1e5472f5864b2a31d3ccee2c08fc26496dfeab/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Ftune-3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Ftune-3.cc?ref=5a1e5472f5864b2a31d3ccee2c08fc26496dfeab", "patch": "@@ -30,7 +30,7 @@ struct test_policy\n template<bool _Thread>\n struct test_policy<__gnu_cxx::__common_pool_policy<_Thread> >\n { \n-  typedef __gnu_cxx::__common_pool_policy<_Thread> pool_type;\n+  typedef __gnu_cxx::__common_pool_policy<_Thread> policy_type;\n   static bool per_type() { return false; } \n };\n "}, {"sha": "993f7b3a52ebd70046f08446f64015532928b54b", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/tune-4.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1e5472f5864b2a31d3ccee2c08fc26496dfeab/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Ftune-4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1e5472f5864b2a31d3ccee2c08fc26496dfeab/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Ftune-4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Ftune-4.cc?ref=5a1e5472f5864b2a31d3ccee2c08fc26496dfeab", "patch": "@@ -30,7 +30,7 @@ struct test_policy\n template<bool _Thread>\n struct test_policy<__gnu_cxx::__common_pool_policy<_Thread> >\n { \n-  typedef __gnu_cxx::__common_pool_policy<_Thread> pool_type;\n+  typedef __gnu_cxx::__common_pool_policy<_Thread> policy_type;\n   static bool per_type() { return false; } \n };\n "}]}