{"sha": "bee1695c2186d21d30462f1186eea09e9340aacd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmVlMTY5NWMyMTg2ZDIxZDMwNDYyZjExODZlZWEwOWU5MzQwYWFjZA==", "commit": {"author": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2011-11-03T20:46:00Z"}, "committer": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2011-11-03T20:46:00Z"}, "message": "trans-array.c (gfc_trans_preloop_setup): Move code earlier.\n\n\n\t* trans-array.c (gfc_trans_preloop_setup): Move code earlier.\n\nFrom-SVN: r180843", "tree": {"sha": "15b3eaaa30280e0595884ea396d59a8ccd159c4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/15b3eaaa30280e0595884ea396d59a8ccd159c4b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bee1695c2186d21d30462f1186eea09e9340aacd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bee1695c2186d21d30462f1186eea09e9340aacd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bee1695c2186d21d30462f1186eea09e9340aacd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bee1695c2186d21d30462f1186eea09e9340aacd/comments", "author": null, "committer": null, "parents": [{"sha": "1fb35a9015b37d7404834af022d048fbfddae24e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fb35a9015b37d7404834af022d048fbfddae24e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fb35a9015b37d7404834af022d048fbfddae24e"}], "stats": {"total": 26, "additions": 15, "deletions": 11}, "files": [{"sha": "fb2123c255857ec7defe2fd183e2f2f56d181855", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bee1695c2186d21d30462f1186eea09e9340aacd/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bee1695c2186d21d30462f1186eea09e9340aacd/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=bee1695c2186d21d30462f1186eea09e9340aacd", "patch": "@@ -1,3 +1,7 @@\n+2011-11-03  Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\t* trans-array.c (gfc_trans_preloop_setup): Move code earlier.\n+\n 2011-11-03  Mikael Morin  <mikael@gcc.gnu.org>\n \n \t* trans-array.c (gfc_trans_preloop_setup): Move array reference"}, {"sha": "91359e9c57ec922bde8d7984154267f523d66ef5", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bee1695c2186d21d30462f1186eea09e9340aacd/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bee1695c2186d21d30462f1186eea09e9340aacd/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=bee1695c2186d21d30462f1186eea09e9340aacd", "patch": "@@ -2876,6 +2876,17 @@ gfc_trans_preloop_setup (gfc_loopinfo * loop, int dim, int flag,\n \n       if (dim == info->dimen - 1)\n \t{\n+\t  i = loop->order[0];\n+\t  /* For the time being, the innermost loop is unconditionally on\n+\t     the first dimension of the scalarization loop.  */\n+\t  gcc_assert (i == 0);\n+\t  stride = gfc_conv_array_stride (info->descriptor, info->dim[i]);\n+\n+\t  /* Calculate the stride of the innermost loop.  Hopefully this will\n+\t     allow the backend optimizers to do their stuff more effectively.\n+\t   */\n+\t  info->stride0 = gfc_evaluate_now (stride, pblock);\n+\n \t  /* For the outermost loop calculate the offset due to any\n \t     elemental dimensions.  It will have been initialized with the\n \t     base offset of the array.  */\n@@ -2900,17 +2911,6 @@ gfc_trans_preloop_setup (gfc_loopinfo * loop, int dim, int flag,\n \t\t  info->offset = gfc_evaluate_now (info->offset, pblock);\n \t\t}\n \t    }\n-\n-\t  i = loop->order[0];\n-\t  /* For the time being, the innermost loop is unconditionally on\n-\t     the first dimension of the scalarization loop.  */\n-\t  gcc_assert (i == 0);\n-\t  stride = gfc_conv_array_stride (info->descriptor, info->dim[i]);\n-\n-\t  /* Calculate the stride of the innermost loop.  Hopefully this will\n-\t     allow the backend optimizers to do their stuff more effectively.\n-\t   */\n-\t  info->stride0 = gfc_evaluate_now (stride, pblock);\n \t}\n       else\n \t{"}]}