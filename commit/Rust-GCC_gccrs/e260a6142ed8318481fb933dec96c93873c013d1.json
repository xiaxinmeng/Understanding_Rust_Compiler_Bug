{"sha": "e260a6142ed8318481fb933dec96c93873c013d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTI2MGE2MTQyZWQ4MzE4NDgxZmI5MzNkZWM5NmM5Mzg3M2MwMTNkMQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2006-02-23T22:47:58Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2006-02-23T22:47:58Z"}, "message": "re PR tree-optimization/26425 (ice on valid C code with flag -Os)\n\n\n\tPR tree-optimization/26425\n\t* tree-vrp.c (vrp_visit_assignment): If the LHS's type has a NULL\n\tmin/max, then assume its varying.\n\n\t* gcc.c-torture/compile/pr26425.c: New test.\n\nFrom-SVN: r111399", "tree": {"sha": "1b539335ba44456341fd10899dfa31baedc3dcf5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b539335ba44456341fd10899dfa31baedc3dcf5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e260a6142ed8318481fb933dec96c93873c013d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e260a6142ed8318481fb933dec96c93873c013d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e260a6142ed8318481fb933dec96c93873c013d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e260a6142ed8318481fb933dec96c93873c013d1/comments", "author": null, "committer": null, "parents": [{"sha": "10c5bc6c2d22d7eddcba9a779985278a7bc58313", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10c5bc6c2d22d7eddcba9a779985278a7bc58313", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10c5bc6c2d22d7eddcba9a779985278a7bc58313"}], "stats": {"total": 25, "additions": 24, "deletions": 1}, "files": [{"sha": "af10e692f11ef6eb1a733002e3012947de738202", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e260a6142ed8318481fb933dec96c93873c013d1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e260a6142ed8318481fb933dec96c93873c013d1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e260a6142ed8318481fb933dec96c93873c013d1", "patch": "@@ -1,3 +1,9 @@\n+2006-02-23  Jeff Law  <law@redhat.com>\n+\n+\tPR tree-optimization/26425\n+\t* tree-vrp.c (vrp_visit_assignment): If the LHS's type has a NULL\n+\tmin/max, then assume its varying.\n+\n 2006-02-23  Zdenek Dvorak <dvorakz@suse.cz>\n \n \tPR rtl-optimization/26316"}, {"sha": "b9efba3f62de3115af549b8633c18ce05138f708", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e260a6142ed8318481fb933dec96c93873c013d1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e260a6142ed8318481fb933dec96c93873c013d1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e260a6142ed8318481fb933dec96c93873c013d1", "patch": "@@ -1,3 +1,7 @@\n+2006-02-23  Jeff Law  <law@redhat.com>\n+\n+\t* gcc.c-torture/compile/pr26425.c: New test.\n+\n 2006-02-23  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/26412"}, {"sha": "8931b401426b6ce2ecd35f29cdafd074e6c02810", "filename": "gcc/testsuite/gcc.c-torture/compile/pr26425.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e260a6142ed8318481fb933dec96c93873c013d1/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr26425.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e260a6142ed8318481fb933dec96c93873c013d1/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr26425.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr26425.c?ref=e260a6142ed8318481fb933dec96c93873c013d1", "patch": "@@ -0,0 +1,9 @@\n+struct keyring_list {\n+ struct key *keys[0];\n+};\n+void keyring_destroy(struct keyring_list *keyring, unsigned short a)\n+{\n+ int loop;\n+  for (loop = a - 1; loop >= 0; loop--)\n+   key_put(keyring->keys[loop]);\n+}"}, {"sha": "c0fb35a9e889c215c0a50d19f0dd14838e803179", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e260a6142ed8318481fb933dec96c93873c013d1/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e260a6142ed8318481fb933dec96c93873c013d1/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=e260a6142ed8318481fb933dec96c93873c013d1", "patch": "@@ -3375,7 +3375,11 @@ vrp_visit_assignment (tree stmt, tree *output_p)\n \n   /* We only keep track of ranges in integral and pointer types.  */\n   if (TREE_CODE (lhs) == SSA_NAME\n-      && (INTEGRAL_TYPE_P (TREE_TYPE (lhs))\n+      && ((INTEGRAL_TYPE_P (TREE_TYPE (lhs))\n+\t   /* It is valid to have NULL MIN/MAX values on a type.  See\n+\t      build_range_type.  */\n+\t   && TYPE_MIN_VALUE (TREE_TYPE (lhs))\n+\t   && TYPE_MAX_VALUE (TREE_TYPE (lhs)))\n \t  || POINTER_TYPE_P (TREE_TYPE (lhs))))\n     {\n       struct loop *l;"}]}