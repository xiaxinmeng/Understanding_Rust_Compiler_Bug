{"sha": "0933f50859f267b87a5a9864a0cbf97a3c0727dd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDkzM2Y1MDg1OWYyNjdiODdhNWE5ODY0YTBjYmY5N2EzYzA3MjdkZA==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-07-21T00:16:28Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-07-21T00:16:28Z"}, "message": "Daily bump.", "tree": {"sha": "b37b7a71f82d785e5fd186d85c822ee8e5ee1c95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b37b7a71f82d785e5fd186d85c822ee8e5ee1c95"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0933f50859f267b87a5a9864a0cbf97a3c0727dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0933f50859f267b87a5a9864a0cbf97a3c0727dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0933f50859f267b87a5a9864a0cbf97a3c0727dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0933f50859f267b87a5a9864a0cbf97a3c0727dd/comments", "author": null, "committer": null, "parents": [{"sha": "e21a33c232038574c67cb2a9222c4d5fbe33f7d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e21a33c232038574c67cb2a9222c4d5fbe33f7d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e21a33c232038574c67cb2a9222c4d5fbe33f7d3"}], "stats": {"total": 273, "additions": 272, "deletions": 1}, "files": [{"sha": "61dba01cf215446efc70948536062f7dc5bd2f2f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 130, "deletions": 0, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0933f50859f267b87a5a9864a0cbf97a3c0727dd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0933f50859f267b87a5a9864a0cbf97a3c0727dd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0933f50859f267b87a5a9864a0cbf97a3c0727dd", "patch": "@@ -1,3 +1,133 @@\n+2020-07-20  Hans-Peter Nilsson  <hp@bitrange.com>\n+\n+\t* config/mmix/mmix.c (mmix_expand_prologue): Calculate the total\n+\tallocated size and set current_function_static_stack_size, if\n+\tflag_stack_usage_info.\n+\n+2020-07-20  Sergei Trofimovich  <siarheit@google.com>\n+\n+\tPR target/96190\n+\t* config/sparc/linux.h (ENDFILE_SPEC): Use GNU_USER_TARGET_ENDFILE_SPEC\n+\tto get crtendS.o for !no-pie mode.\n+\t* config/sparc/linux64.h (ENDFILE_SPEC): Ditto.\n+\n+2020-07-20  Yang Yang  <yangyang305@huawei.com>\n+\n+\t* tree-vect-stmts.c (vectorizable_simd_clone_call): Add\n+\tVIEW_CONVERT_EXPRs if the arguments types and return type\n+\tof simd clone function are distinct with the vectype of stmt.\n+\n+2020-07-20  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/95750\n+\t* config/i386/i386.h (TARGET_AVOID_MFENCE):\n+\tRename from TARGET_USE_XCHG_FOR_ATOMIC_STORE.\n+\t* config/i386/sync.md (mfence_sse2): Disable for TARGET_AVOID_MFENCE.\n+\t(mfence_nosse): Enable also for TARGET_AVOID_MFENCE. Emit stack\n+\treferred memory in word_mode.\n+\t(mem_thread_fence): Do not generate mfence_sse2 pattern when\n+\tTARGET_AVOID_MFENCE is true.\n+\t(atomic_store<mode>): Update for rename.\n+\t* config/i386/x86-tune.def (X86_TUNE_AVOID_MFENCE):\n+\tRename from X86_TUNE_USE_XCHG_FOR_ATOMIC_STORE.\n+\n+2020-07-20  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/95189\n+\tPR middle-end/95886\n+\t* builtins.c (inline_expand_builtin_string_cmp): Rename...\n+\t(inline_expand_builtin_bytecmp): ...to this.\n+\t(builtin_memcpy_read_str): Don't expect data to be nul-terminated.\n+\t(expand_builtin_memory_copy_args): Handle object representations\n+\twith embedded nul bytes.\n+\t(expand_builtin_memcmp): Same.\n+\t(expand_builtin_strcmp): Adjust call to naming change.\n+\t(expand_builtin_strncmp): Same.\n+\t* expr.c (string_constant): Create empty strings with nonzero size.\n+\t* fold-const.c (c_getstr): Rename locals and update comments.\n+\t* tree.c (build_string): Accept null pointer argument.\n+\t(build_string_literal): Same.\n+\t* tree.h (build_string): Provide a default.\n+\t(build_string_literal): Same.\n+\n+2020-07-20  Richard Biener  <rguenther@suse.de>\n+\n+\t* cfganal.c (rev_post_order_and_mark_dfs_back_seme): Remove\n+\twrite-only post array.\n+\n+2020-07-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR libstdc++/93121\n+\t* gimple-fold.c (fold_const_aggregate_ref_1): For COMPONENT_REF\n+\tof a bitfield not aligned on byte boundaries try to\n+\tfold_ctor_reference DECL_BIT_FIELD_REPRESENTATIVE if any and\n+\tadjust it depending on endianity.\n+\n+2020-07-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR libstdc++/93121\n+\t* fold-const.c (native_encode_initializer): Handle bit-fields.\n+\n+2020-07-20  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_option_override_internal):\n+\tSet param_vect_partial_vector_usage to 0 explicitly.\n+\t* doc/invoke.texi (vect-partial-vector-usage): Document new option.\n+\t* optabs-query.c (get_len_load_store_mode): New function.\n+\t* optabs-query.h (get_len_load_store_mode): New declare.\n+\t* params.opt (vect-partial-vector-usage): New.\n+\t* tree-vect-loop-manip.c (vect_set_loop_controls_directly): Add the\n+\thandlings for vectorization using length-based partial vectors, call\n+\tvect_gen_len for length generation, and rename some variables with\n+\titems instead of scalars.\n+\t(vect_set_loop_condition_partial_vectors): Add the handlings for\n+\tvectorization using length-based partial vectors.\n+\t(vect_do_peeling): Allow remaining eiters less than epilogue vf for\n+\tLOOP_VINFO_USING_PARTIAL_VECTORS_P.\n+\t* tree-vect-loop.c (_loop_vec_info::_loop_vec_info): Init\n+\tepil_using_partial_vectors_p.\n+\t(_loop_vec_info::~_loop_vec_info): Call release_vec_loop_controls\n+\tfor lengths destruction.\n+\t(vect_verify_loop_lens): New function.\n+\t(vect_analyze_loop): Add handlings for epilogue of loop when it's\n+\tmarked to use vectorization using partial vectors.\n+\t(vect_analyze_loop_2): Add the check to allow only one vectorization\n+\tapproach using partial vectorization at the same time.  Check param\n+\tvect-partial-vector-usage for partial vectors decision.  Mark\n+\tLOOP_VINFO_EPIL_USING_PARTIAL_VECTORS_P if the epilogue is\n+\tconsiderable to use partial vectors.  Call release_vec_loop_controls\n+\tfor lengths destruction.\n+\t(vect_estimate_min_profitable_iters): Adjust for loop vectorization\n+\tusing length-based partial vectors.\n+\t(vect_record_loop_mask): Init factor to 1 for vectorization using\n+\tmask-based partial vectors.\n+\t(vect_record_loop_len): New function.\n+\t(vect_get_loop_len): Likewise.\n+\t* tree-vect-stmts.c (check_load_store_for_partial_vectors): Add\n+\tchecks for vectorization using length-based partial vectors.  Factor\n+\tsome code to lambda function get_valid_nvectors.\n+\t(vectorizable_store): Add handlings when using length-based partial\n+\tvectors.\n+\t(vectorizable_load): Likewise.\n+\t(vect_gen_len): New function.\n+\t* tree-vectorizer.h (struct rgroup_controls): Add field factor\n+\tmainly for length-based partial vectors.\n+\t(vec_loop_lens): New typedef.\n+\t(_loop_vec_info): Add lens and epil_using_partial_vectors_p.\n+\t(LOOP_VINFO_EPIL_USING_PARTIAL_VECTORS_P): New macro.\n+\t(LOOP_VINFO_LENS): Likewise.\n+\t(LOOP_VINFO_FULLY_WITH_LENGTH_P): Likewise.\n+\t(vect_record_loop_len): New declare.\n+\t(vect_get_loop_len): Likewise.\n+\t(vect_gen_len): Likewise.\n+\n+2020-07-20  Hans-Peter Nilsson  <hp@bitrange.com>\n+\n+\t* config/mmix/mmix.c (mmix_option_override): Reinstate default\n+\tinteger-emitting targetm.asm_out pseudos when dumping detailed\n+\tassembly-code.\n+\t(mmix_assemble_integer): Update comment.\n+\n 2020-07-19  H.J. Lu  <hjl.tools@gmail.com>\n \n \tPR target/95973"}, {"sha": "3afbc9c5f92d15cd7fdf0abf5395f1faddb18976", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0933f50859f267b87a5a9864a0cbf97a3c0727dd/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0933f50859f267b87a5a9864a0cbf97a3c0727dd/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=0933f50859f267b87a5a9864a0cbf97a3c0727dd", "patch": "@@ -1 +1 @@\n-20200720\n+20200721"}, {"sha": "7a0803038b076f53f2b82c40ab76fbad2ad89472", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0933f50859f267b87a5a9864a0cbf97a3c0727dd/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0933f50859f267b87a5a9864a0cbf97a3c0727dd/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=0933f50859f267b87a5a9864a0cbf97a3c0727dd", "patch": "@@ -1,3 +1,13 @@\n+2020-07-20  Jason Merrill  <jason@redhat.com>\n+\n+\t* c-cppbuiltin.c (c_cpp_builtins): Update\n+\t__cpp_nontype_template_args for C++20.\n+\n+2020-07-20  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/96249\n+\t* c.opt: Remove stray text.\n+\n 2020-07-14  Lewis Hyatt  <lhyatt@gmail.com>\n \n \tPR other/86904"}, {"sha": "81bc9b92a1c0cc027673ab0b0aca09ee0c0b3ae3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0933f50859f267b87a5a9864a0cbf97a3c0727dd/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0933f50859f267b87a5a9864a0cbf97a3c0727dd/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0933f50859f267b87a5a9864a0cbf97a3c0727dd", "patch": "@@ -1,3 +1,23 @@\n+2020-07-20  Jason Merrill  <jason@redhat.com>\n+\n+\t* pt.c (type_dependent_expression_p): A pseudo-dtor can be\n+\tdependent.\n+\t* semantics.c (finish_call_expr): Use build_trivial_dtor_call for\n+\tpseudo-destructor.\n+\t(finish_pseudo_destructor_expr): Leave type NULL for dependent arg.\n+\n+2020-07-20  Jason Merrill  <jason@redhat.com>\n+\n+\t* mangle.c (write_base_ref): New.\n+\t(write_expression): Use it for base field COMPONENT_REFs.\n+\t* pt.c (invalid_tparm_referent_p): Canonicalize the type\n+\tof array offsets.  Allow subobjects.\n+\n+2020-07-20  Jason Merrill  <jason@redhat.com>\n+\n+\t* pt.c (collect_ctor_idx_types): Add 'const' when deducing from\n+\ta string constant.\n+\n 2020-07-17  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/79815"}, {"sha": "15acbb3be98acdf6b496f3654fb7ade2eb893ceb", "filename": "gcc/po/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0933f50859f267b87a5a9864a0cbf97a3c0727dd/gcc%2Fpo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0933f50859f267b87a5a9864a0cbf97a3c0727dd/gcc%2Fpo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2FChangeLog?ref=0933f50859f267b87a5a9864a0cbf97a3c0727dd", "patch": "@@ -1,3 +1,7 @@\n+2020-07-20  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.pot: Regenerate.\n+\n 2020-07-08  Joseph Myers  <joseph@codesourcery.com>\n \n \t* sv.po: Update."}, {"sha": "ad86c95d466c454b68c966409383d9a871fbb508", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0933f50859f267b87a5a9864a0cbf97a3c0727dd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0933f50859f267b87a5a9864a0cbf97a3c0727dd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0933f50859f267b87a5a9864a0cbf97a3c0727dd", "patch": "@@ -1,3 +1,66 @@\n+2020-07-20  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/opt/flifetime-dse7.C: New test.\n+\n+2020-07-20  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/cpp1z/nontype2.C: No error in C++20.\n+\t* g++.dg/template/nontype25.C: No error in C++20.\n+\t* g++.dg/template/nontype8.C: No error in C++20.\n+\t* g++.dg/cpp2a/nontype-subob1.C: New test.\n+\t* g++.dg/cpp2a/nontype-subob2.C: New test.\n+\t* g++.dg/cpp1z/nontype3.C: Now C++17-only.\n+\t* g++.dg/cpp2a/feat-cxx2a.C: Adjust expected value.\n+\n+2020-07-20  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/cpp2a/class-deduction-aggr7.C: New test.\n+\n+2020-07-20  Yang Yang  <yangyang305@huawei.com>\n+\n+\t* gcc.target/aarch64/sve/pr96195.c: New test.\n+\n+2020-07-20  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/95750\n+\t* gcc.target/i386/pr95750.c: New test.\n+\n+2020-07-20  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/95189\n+\tPR middle-end/95886\n+\t* gcc.dg/memcmp-pr95189.c: New test.\n+\t* gcc.dg/strncmp-3.c: New test.\n+\t* gcc.target/i386/memcpy-pr95886.c: New test.\n+\n+2020-07-20  Alex Coplan  <alex.coplan@arm.com>\n+\n+\tPR jit/69435\n+\t* jit.dg/jit.exp (fixed_host_execute): Fix regex patterns to\n+\talways explicitly match newlines.\n+\n+2020-07-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR libstdc++/93121\n+\t* gcc.dg/tree-ssa/pr93121-2.c: New test.\n+\n+2020-07-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR libstdc++/93121\n+\t* gcc.dg/tree-ssa/pr93121-1.c: New test.\n+\n+2020-07-20  Hans-Peter Nilsson  <hp@bitrange.com>\n+\n+\t* gcc.dg/const-uniq-1.c: Adjust scanned pattern for mmix.\n+\n+2020-07-20  Hans-Peter Nilsson  <hp@bitrange.com>\n+\n+\t* gcc.dg/cdce3.c: Skip for mmix.\n+\n+2020-07-20  Hans-Peter Nilsson  <hp@bitrange.com>\n+\n+\t* gcc.dg/pr87485.c: Require scheduling.\n+\n 2020-07-19  H.J. Lu  <hjl.tools@gmail.com>\n \n \tPR target/95973"}, {"sha": "0a1892e6b3fb65aaa8cc864dd43b299926d1de46", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0933f50859f267b87a5a9864a0cbf97a3c0727dd/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0933f50859f267b87a5a9864a0cbf97a3c0727dd/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=0933f50859f267b87a5a9864a0cbf97a3c0727dd", "patch": "@@ -1,3 +1,10 @@\n+2020-07-20  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* line-map.c (linemap_add): Simplify column overflow calculation.\n+\tAdd comment about range and column bit init.\n+\t(linemap_ordinary_map_lookup): Refactor for RAII\n+\t(linemap_macro_map_lookup): Likewise.\n+\n 2020-07-14  Lewis Hyatt  <lhyatt@gmail.com>\n \n \tPR preprocessor/49973"}, {"sha": "ef050aac1e047bad8ec06c614ca1de43039ac30d", "filename": "libcpp/po/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0933f50859f267b87a5a9864a0cbf97a3c0727dd/libcpp%2Fpo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0933f50859f267b87a5a9864a0cbf97a3c0727dd/libcpp%2Fpo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fpo%2FChangeLog?ref=0933f50859f267b87a5a9864a0cbf97a3c0727dd", "patch": "@@ -1,3 +1,7 @@\n+2020-07-20  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* cpplib.pot: Regenerate.\n+\n 2020-05-15  Joseph Myers  <joseph@codesourcery.com>\n \n \t* sv.po: Update."}, {"sha": "76c3e5cb7c062bb92aac26bb081a7f7494c6bac1", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0933f50859f267b87a5a9864a0cbf97a3c0727dd/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0933f50859f267b87a5a9864a0cbf97a3c0727dd/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0933f50859f267b87a5a9864a0cbf97a3c0727dd", "patch": "@@ -1,3 +1,36 @@\n+2020-07-20  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* acinclude.m4 (libtool_VERSION): Bump version.\n+\t* config.h.in: Regenerate.\n+\t* config/abi/pre/gnu.ver: Add GLIBCXX_3.4.29 version and new\n+\texports.\n+\t* config/os/gnu-linux/ldbl-extra.ver: Add _GLIBCXX_LDBL_3.4.29\n+\tversion and new export.\n+\t* configure: Regenerate.\n+\t* configure.ac: Check for <xlocale.h> and uselocale.\n+\t* crossconfig.m4: Add macro or checks for uselocale.\n+\t* include/std/charconv (from_chars): Declare overloads for\n+\tfloat, double, and long double.\n+\t* src/c++17/Makefile.am: Add new file.\n+\t* src/c++17/Makefile.in: Regenerate.\n+\t* src/c++17/floating_from_chars.cc: New file.\n+\t(from_chars): Define for float, double, and long double.\n+\t* testsuite/20_util/from_chars/1_c++20_neg.cc: Prune extra\n+\tdiagnostics caused by new overloads.\n+\t* testsuite/20_util/from_chars/1_neg.cc: Likewise.\n+\t* testsuite/20_util/from_chars/2.cc: Check leading '+'.\n+\t* testsuite/20_util/from_chars/4.cc: New test.\n+\t* testsuite/20_util/from_chars/5.cc: New test.\n+\t* testsuite/util/testsuite_abi.cc: Add new symbol versions.\n+\n+2020-07-20  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/istream.tcc\n+\t(basic_istream::get(__streambuf_type&, char_type): Use unsigned\n+\tlong long for counter and check if it would overflow _M_gcount.\n+\t* testsuite/27_io/basic_istream/get/char/lwg3464.cc: New test.\n+\t* testsuite/27_io/basic_istream/get/wchar_t/lwg3464.cc: New test.\n+\n 2020-07-17  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* include/std/coroutine: Mark the methods of the"}]}