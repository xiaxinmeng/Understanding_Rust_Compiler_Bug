{"sha": "22f8849d06019e925eb8669274a03daf02e71cc6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjJmODg0OWQwNjAxOWU5MjVlYjg2NjkyNzRhMDNkYWYwMmU3MWNjNg==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2019-08-23T12:41:39Z"}, "committer": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2019-08-23T12:41:39Z"}, "message": "[PATCH, c-family] Fix a PCH thinko (and thus PR61250).\n\nWhen we are parsing a source file, the very first token might\nbe a PRAGMA_GCC_PCH_PREPROCESS.  This indicates that we are going\nread in a PCH file (named as the value of the pragma).  If we don't\nsee this pragma, then we know that it's OK to release any resources\nthat the host might have set aside for the PCH file.\n\nThis fixes a thinko in the current implementation, in that the decision\nto release resources was happening unconditionally right after the first\ntoken is extracted but before it's been checked or acted upon.\n\nThis leads to the pch bug (seen on Darwin), because we actually do release\nresources - which are subsequently (reasonably) assumed to be available\nwhen reading a PCH file.  We then get random crashes or hangs depending\non the interaction between unmmap and malloc.\n\nThe bug is present everywhere but doesn't show on (say) Linux, since\nthe release of PCH resources is a NOP there.\n\nThis effects all the c-family front ends, because they all use c_lex_with_flags ()\nto implement this.\n\nThe solution is to check for the PRAGMA_GCC_PCH_PREPROCESS and only call\nc_common_no_more_pch () when that is not the first token.\n\nA secondary effect of the collection is that the name of the PCH file\ncan be collected during the ggc_pch_read() reset of state.  Therefore\nwe should issue any diagnostic that might name the file before the\ncollections are triggered.\n\n\ngcc/c-family/\n\n2019-08-23  Iain Sandoe  <iain@sandoe.co.uk>\n\n\tPR pch/61250\n\t* c-lex.c (c_lex_with_flags):  Don't call\n\tc_common_no_more_pch () from here.\n\ngcc/c/\n\n2019-08-23  Iain Sandoe  <iain@sandoe.co.uk>\n\n\tPR pch/61250\n\t* c-parser.c (c_parse_file): Call c_common_no_more_pch ()\n\tafter determining that the first token is not\n\tPRAGMA_GCC_PCH_PREPROCESS.\n\ngcc/cp/\n\n2019-08-23  Iain Sandoe  <iain@sandoe.co.uk>\n\n\tPR pch/61250\n\t* parser.c (cp_parser_initial_pragma): Call c_common_no_more_pch ()\n\tafter determining that the first token is not\n\tPRAGMA_GCC_PCH_PREPROCESS.\n\ngcc/\n\n2019-08-23  Iain Sandoe  <iain@sandoe.co.uk>\n\n\tPR pch/61250\n\t* ggc-page.c (ggc_pch_read): Read the ggc_pch_ondisk structure\n\tand issue any diagnostics needed before collecting the pre-PCH\n\tstate.\n\nFrom-SVN: r274856", "tree": {"sha": "02a55a67e0aa768f2069352f6c08491e3446b2bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/02a55a67e0aa768f2069352f6c08491e3446b2bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22f8849d06019e925eb8669274a03daf02e71cc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22f8849d06019e925eb8669274a03daf02e71cc6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22f8849d06019e925eb8669274a03daf02e71cc6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22f8849d06019e925eb8669274a03daf02e71cc6/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df375b0321f9a5360fd04435ee5832c253aa4175", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df375b0321f9a5360fd04435ee5832c253aa4175", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df375b0321f9a5360fd04435ee5832c253aa4175"}], "stats": {"total": 46, "additions": 36, "deletions": 10}, "files": [{"sha": "86669dd5cf3622278ec9deec4ede6cb2a86997b7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22f8849d06019e925eb8669274a03daf02e71cc6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22f8849d06019e925eb8669274a03daf02e71cc6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=22f8849d06019e925eb8669274a03daf02e71cc6", "patch": "@@ -1,3 +1,10 @@\n+2019-08-23  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR pch/61250\n+\t* ggc-page.c (ggc_pch_read): Read the ggc_pch_ondisk structure\n+\tand issue any diagnostics needed before collecting the pre-PCH\n+\tstate.\n+\n 2019-08-23  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/91283"}, {"sha": "2ab1c98b26018d101eda8c2d6dc92436e7ee3e27", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22f8849d06019e925eb8669274a03daf02e71cc6/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22f8849d06019e925eb8669274a03daf02e71cc6/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=22f8849d06019e925eb8669274a03daf02e71cc6", "patch": "@@ -1,3 +1,9 @@\n+2019-08-23  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR pch/61250\n+\t* c-lex.c (c_lex_with_flags):  Don't call\n+\tc_common_no_more_pch () from here.\n+\n 2019-08-23  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/91283"}, {"sha": "e3c602fbb8d4b61364b056ddc0afdc2fe787ab82", "filename": "gcc/c-family/c-lex.c", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22f8849d06019e925eb8669274a03daf02e71cc6/gcc%2Fc-family%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22f8849d06019e925eb8669274a03daf02e71cc6/gcc%2Fc-family%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-lex.c?ref=22f8849d06019e925eb8669274a03daf02e71cc6", "patch": "@@ -394,7 +394,6 @@ enum cpp_ttype\n c_lex_with_flags (tree *value, location_t *loc, unsigned char *cpp_flags,\n \t\t  int lex_flags)\n {\n-  static bool no_more_pch;\n   const cpp_token *tok;\n   enum cpp_ttype type;\n   unsigned char add_flags = 0;\n@@ -628,12 +627,6 @@ c_lex_with_flags (tree *value, location_t *loc, unsigned char *cpp_flags,\n   if (cpp_flags)\n     *cpp_flags = tok->flags | add_flags;\n \n-  if (!no_more_pch)\n-    {\n-      no_more_pch = true;\n-      c_common_no_more_pch ();\n-    }\n-\n   timevar_pop (TV_CPP);\n \n   return type;"}, {"sha": "b7b45f504a1c65bbc15a163295832a9797a33f92", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22f8849d06019e925eb8669274a03daf02e71cc6/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22f8849d06019e925eb8669274a03daf02e71cc6/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=22f8849d06019e925eb8669274a03daf02e71cc6", "patch": "@@ -1,3 +1,10 @@\n+2019-08-23  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR pch/61250\n+\t* c-parser.c (c_parse_file): Call c_common_no_more_pch ()\n+\tafter determining that the first token is not\n+\tPRAGMA_GCC_PCH_PREPROCESS.\n+\n 2019-08-22  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* c-parser.c (c_parser_declaration_or_fndef): Set DECL_ARGUMENTS of a"}, {"sha": "6070502deb51c4c16e9ca37001ff51407f7759e2", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22f8849d06019e925eb8669274a03daf02e71cc6/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22f8849d06019e925eb8669274a03daf02e71cc6/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=22f8849d06019e925eb8669274a03daf02e71cc6", "patch": "@@ -20263,6 +20263,8 @@ c_parse_file (void)\n \n   if (c_parser_peek_token (&tparser)->pragma_kind == PRAGMA_GCC_PCH_PREPROCESS)\n     c_parser_pragma_pch_preprocess (&tparser);\n+  else\n+    c_common_no_more_pch ();\n \n   the_parser = ggc_alloc<c_parser> ();\n   *the_parser = tparser;"}, {"sha": "f014423ca00903e1cfd51a20f91f72d279f9598b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22f8849d06019e925eb8669274a03daf02e71cc6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22f8849d06019e925eb8669274a03daf02e71cc6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=22f8849d06019e925eb8669274a03daf02e71cc6", "patch": "@@ -1,3 +1,10 @@\n+2019-08-23  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR pch/61250\n+\t* parser.c (cp_parser_initial_pragma): Call c_common_no_more_pch ()\n+\tafter determining that the first token is not\n+\tPRAGMA_GCC_PCH_PREPROCESS.\n+\n 2019-08-22  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/91304 - prefix attributes ignored in condition."}, {"sha": "504f77a4908955ba29d05a42c77e0cd8010011f3", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22f8849d06019e925eb8669274a03daf02e71cc6/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22f8849d06019e925eb8669274a03daf02e71cc6/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=22f8849d06019e925eb8669274a03daf02e71cc6", "patch": "@@ -41357,7 +41357,10 @@ cp_parser_initial_pragma (cp_token *first_token)\n \n   cp_lexer_get_preprocessor_token (NULL, first_token);\n   if (cp_parser_pragma_kind (first_token) != PRAGMA_GCC_PCH_PREPROCESS)\n-    return;\n+    {\n+      c_common_no_more_pch ();\n+      return;\n+    }\n \n   cp_lexer_get_preprocessor_token (NULL, first_token);\n   if (first_token->type == CPP_STRING)"}, {"sha": "220f20c5cfe7a90a7b8a86e60015a6ffd0a1e5e2", "filename": "gcc/ggc-page.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22f8849d06019e925eb8669274a03daf02e71cc6/gcc%2Fggc-page.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22f8849d06019e925eb8669274a03daf02e71cc6/gcc%2Fggc-page.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-page.c?ref=22f8849d06019e925eb8669274a03daf02e71cc6", "patch": "@@ -2556,6 +2556,9 @@ ggc_pch_read (FILE *f, void *addr)\n \n   count_old_page_tables = G.by_depth_in_use;\n \n+  if (fread (&d, sizeof (d), 1, f) != 1)\n+    fatal_error (input_location, \"cannot read PCH file: %m\");\n+\n   /* We've just read in a PCH file.  So, every object that used to be\n      allocated is now free.  */\n   clear_marks ();\n@@ -2584,8 +2587,6 @@ ggc_pch_read (FILE *f, void *addr)\n \n   /* Allocate the appropriate page-table entries for the pages read from\n      the PCH file.  */\n-  if (fread (&d, sizeof (d), 1, f) != 1)\n-    fatal_error (input_location, \"cannot read PCH file: %m\");\n \n   for (i = 0; i < NUM_ORDERS; i++)\n     {"}]}