{"sha": "f436562730268adf0b2262f821abbbf3ee05519c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjQzNjU2MjczMDI2OGFkZjBiMjI2MmY4MjFhYmJiZjNlZTA1NTE5Yw==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2001-12-14T20:27:05Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2001-12-14T20:27:05Z"}, "message": "config.gcc: Revamp target_cpu_default2 to strings; support new x86 variants.\n\n\t* config.gcc: Revamp target_cpu_default2 to strings;\n\tsupport new x86 variants.\n\t* i386.c (override_options): Default x86_cpu_string and x86_arch_string\n\tproperly; set prefetch_sse.\n\t* i386.h (x86_prefetch_sse): Declare.\n\t(TARGET_PREFETCH_SSE): New.\n\t(CPP_CPU_DEFAULT_SPEC): Define according to the new macros.\n\t(TARGET_CPU_DEFAULT_*): New.\n\t* config/i386/i386.h (struct processor_costs): Add new members\n\t  prefetch_block and simultaneous_prefetches.\n\t  (PREFETCH_BLOCK, SIMULTANEOUS_PREFETCHES): New.\n\t* config/i386/i386.c (processor_costs structs): Add values for\n\t  prefetch_block and simultaneous_prefetches.\n\t* config/i386/i386.md (unspec values): Remove values for prefetch\n\t  operations, which now use the PREFETCH rtx code.\n\t  (prefetch_sse, prefetch_3dnow, prefetchw): Combine to use new\n\t  unified prefetch support.\n\nFrom-SVN: r48006", "tree": {"sha": "38596b8fa042ec04bf0a870c5b2764e93fe884e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/38596b8fa042ec04bf0a870c5b2764e93fe884e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f436562730268adf0b2262f821abbbf3ee05519c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f436562730268adf0b2262f821abbbf3ee05519c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f436562730268adf0b2262f821abbbf3ee05519c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f436562730268adf0b2262f821abbbf3ee05519c/comments", "author": null, "committer": null, "parents": [{"sha": "4ff8507ec570191d7cd27b4c595f42f124dea2a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ff8507ec570191d7cd27b4c595f42f124dea2a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ff8507ec570191d7cd27b4c595f42f124dea2a3"}], "stats": {"total": 323, "additions": 235, "deletions": 88}, "files": [{"sha": "63d2845187c07273cd8b4c90914f409077d3023e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f436562730268adf0b2262f821abbbf3ee05519c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f436562730268adf0b2262f821abbbf3ee05519c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f436562730268adf0b2262f821abbbf3ee05519c", "patch": "@@ -1,3 +1,27 @@\n+Fri Dec 14 21:23:54 CET 2001  Jan Hubicka  <jh@suse.cz>\n+\n+\t* config.gcc: Revamp target_cpu_default2 to strings;\n+\tsupport new x86 variants.\n+\t* i386.c (override_options): Default x86_cpu_string and x86_arch_string\n+\tproperly; set prefetch_sse.\n+\t* i386.h (x86_prefetch_sse): Declare.\n+\t(TARGET_PREFETCH_SSE): New.\n+\t(CPP_CPU_DEFAULT_SPEC): Define according to the new macros.\n+\t(TARGET_CPU_DEFAULT_*): New.\n+\n+Thu Dec 13 21:57:13 CET 2001  Janis Johnson <janis187@us.ibm.com>\n+\t\t\t      Jan Hubicka  <jh@suse.cz>\n+\n+\t* config/i386/i386.h (struct processor_costs): Add new members\n+\t  prefetch_block and simultaneous_prefetches.\n+\t  (PREFETCH_BLOCK, SIMULTANEOUS_PREFETCHES): New.\n+\t* config/i386/i386.c (processor_costs structs): Add values for\n+\t  prefetch_block and simultaneous_prefetches.\n+\t* config/i386/i386.md (unspec values): Remove values for prefetch\n+\t  operations, which now use the PREFETCH rtx code.\n+\t  (prefetch_sse, prefetch_3dnow, prefetchw): Combine to use new\n+\t  unified prefetch support.\n+\n 2001-12-14  Jason Merrill  <jason@redhat.com>\n \n \t* diagnostic.c (sorry): Increment sorrycount before saving the"}, {"sha": "aa65281cf5f2e9bb8db752cf1af2b6ac6bf03e59", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 79, "deletions": 66, "changes": 145, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f436562730268adf0b2262f821abbbf3ee05519c/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f436562730268adf0b2262f821abbbf3ee05519c/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=f436562730268adf0b2262f821abbbf3ee05519c", "patch": "@@ -81,6 +81,8 @@ struct processor_costs size_cost = {\t/* costs for tunning for size */\n   {3, 3, 3},\t\t\t\t/* cost of storing SSE registers\n \t\t\t\t\t   in SImode, DImode and TImode */\n   3,\t\t\t\t\t/* MMX or SSE register to integer */\n+  0,\t\t\t\t\t/* size of prefetch block */\n+  0,\t\t\t\t\t/* number of parallel prefetches */\n };\n /* Processor costs (relative to an add) */\n static const \n@@ -116,6 +118,8 @@ struct processor_costs i386_cost = {\t/* 386 specific costs */\n   {4, 8, 16},\t\t\t\t/* cost of storing SSE registers\n \t\t\t\t\t   in SImode, DImode and TImode */\n   3,\t\t\t\t\t/* MMX or SSE register to integer */\n+  0,\t\t\t\t\t/* size of prefetch block */\n+  0,\t\t\t\t\t/* number of parallel prefetches */\n };\n \n static const \n@@ -150,7 +154,9 @@ struct processor_costs i486_cost = {\t/* 486 specific costs */\n \t\t\t\t\t   in SImode, DImode and TImode */\n   {4, 8, 16},\t\t\t\t/* cost of storing SSE registers\n \t\t\t\t\t   in SImode, DImode and TImode */\n-  3\t\t\t\t\t/* MMX or SSE register to integer */\n+  3,\t\t\t\t\t/* MMX or SSE register to integer */\n+  0,\t\t\t\t\t/* size of prefetch block */\n+  0,\t\t\t\t\t/* number of parallel prefetches */\n };\n \n static const \n@@ -185,7 +191,9 @@ struct processor_costs pentium_cost = {\n \t\t\t\t\t   in SImode, DImode and TImode */\n   {4, 8, 16},\t\t\t\t/* cost of storing SSE registers\n \t\t\t\t\t   in SImode, DImode and TImode */\n-  3\t\t\t\t\t/* MMX or SSE register to integer */\n+  3,\t\t\t\t\t/* MMX or SSE register to integer */\n+  0,\t\t\t\t\t/* size of prefetch block */\n+  0,\t\t\t\t\t/* number of parallel prefetches */\n };\n \n static const \n@@ -220,7 +228,9 @@ struct processor_costs pentiumpro_cost = {\n \t\t\t\t\t   in SImode, DImode and TImode */\n   {2, 2, 8},\t\t\t\t/* cost of storing SSE registers\n \t\t\t\t\t   in SImode, DImode and TImode */\n-  3\t\t\t\t\t/* MMX or SSE register to integer */\n+  3,\t\t\t\t\t/* MMX or SSE register to integer */\n+  32,\t\t\t\t\t/* size of prefetch block */\n+  6,\t\t\t\t\t/* number of parallel prefetches */\n };\n \n static const \n@@ -255,7 +265,9 @@ struct processor_costs k6_cost = {\n \t\t\t\t\t   in SImode, DImode and TImode */\n   {2, 2, 8},\t\t\t\t/* cost of storing SSE registers\n \t\t\t\t\t   in SImode, DImode and TImode */\n-  6\t\t\t\t\t/* MMX or SSE register to integer */\n+  6,\t\t\t\t\t/* MMX or SSE register to integer */\n+  32,\t\t\t\t\t/* size of prefetch block */\n+  1,\t\t\t\t\t/* number of parallel prefetches */\n };\n \n static const \n@@ -290,7 +302,9 @@ struct processor_costs athlon_cost = {\n \t\t\t\t\t   in SImode, DImode and TImode */\n   {2, 2, 8},\t\t\t\t/* cost of storing SSE registers\n \t\t\t\t\t   in SImode, DImode and TImode */\n-  6\t\t\t\t\t/* MMX or SSE register to integer */\n+  6,\t\t\t\t\t/* MMX or SSE register to integer */\n+  64,\t\t\t\t\t/* size of prefetch block */\n+  6,\t\t\t\t\t/* number of parallel prefetches */\n };\n \n static const \n@@ -326,6 +340,8 @@ struct processor_costs pentium4_cost = {\n   {2, 2, 8},\t\t\t\t/* cost of storing SSE registers\n \t\t\t\t\t   in SImode, DImode and TImode */\n   10,\t\t\t\t\t/* MMX or SSE register to integer */\n+  64,\t\t\t\t\t/* size of prefetch block */\n+  6,\t\t\t\t\t/* number of parallel prefetches */\n };\n \n const struct processor_costs *ix86_cost = &pentium_cost;\n@@ -592,6 +608,9 @@ const char *ix86_fpmath_string;\t\t/* for -mfpmath=<xxx> */\n /* # of registers to use to pass arguments.  */\n const char *ix86_regparm_string;\n \n+/* true if sse prefetch instruction is not NOOP.  */\n+int x86_prefetch_sse;\n+\n /* ix86_regparm_string as a number */\n int ix86_regparm;\n \n@@ -817,6 +836,7 @@ override_options ()\n       {&pentium4_cost, 0, 0, 0, 0, 0, 0, 0, 1}\n     };\n \n+  static const char * const cpu_names[] = TARGET_CPU_DEFAULT_NAMES;\n   static struct pta\n     {\n       const char *const name;\t\t/* processor name or nickname.  */\n@@ -826,7 +846,7 @@ override_options ()\n \t  PTA_SSE = 1,\n \t  PTA_SSE2 = 2,\n \t  PTA_MMX = 4,\n-\t  PTA_SSEPREFETCH = 8,\n+\t  PTA_PREFETCH_SSE = 8,\n \t  PTA_3DNOW = 16,\n \t  PTA_3DNOW_A = 64\n \t} flags;\n@@ -841,21 +861,21 @@ override_options ()\n       {\"i686\", PROCESSOR_PENTIUMPRO, 0},\n       {\"pentiumpro\", PROCESSOR_PENTIUMPRO, 0},\n       {\"pentium2\", PROCESSOR_PENTIUMPRO, PTA_MMX},\n-      {\"pentium3\", PROCESSOR_PENTIUMPRO, PTA_MMX | PTA_SSE | PTA_SSEPREFETCH},\n+      {\"pentium3\", PROCESSOR_PENTIUMPRO, PTA_MMX | PTA_SSE | PTA_PREFETCH_SSE},\n       {\"pentium4\", PROCESSOR_PENTIUM4, PTA_SSE | PTA_SSE2 |\n-\t\t\t\t       PTA_MMX | PTA_SSEPREFETCH},\n+\t\t\t\t       PTA_MMX | PTA_PREFETCH_SSE},\n       {\"k6\", PROCESSOR_K6, PTA_MMX},\n       {\"k6-2\", PROCESSOR_K6, PTA_MMX | PTA_3DNOW},\n       {\"k6-3\", PROCESSOR_K6, PTA_MMX | PTA_3DNOW},\n-      {\"athlon\", PROCESSOR_ATHLON, PTA_MMX | PTA_SSEPREFETCH | PTA_3DNOW\n+      {\"athlon\", PROCESSOR_ATHLON, PTA_MMX | PTA_PREFETCH_SSE | PTA_3DNOW\n \t\t\t\t   | PTA_3DNOW_A},\n-      {\"athlon-tbird\", PROCESSOR_ATHLON, PTA_MMX | PTA_SSEPREFETCH\n+      {\"athlon-tbird\", PROCESSOR_ATHLON, PTA_MMX | PTA_PREFETCH_SSE\n \t\t\t\t\t | PTA_3DNOW | PTA_3DNOW_A},\n-      {\"athlon-4\", PROCESSOR_ATHLON, PTA_MMX | PTA_SSEPREFETCH | PTA_3DNOW\n+      {\"athlon-4\", PROCESSOR_ATHLON, PTA_MMX | PTA_PREFETCH_SSE | PTA_3DNOW\n \t\t\t\t    | PTA_3DNOW_A | PTA_SSE},\n-      {\"athlon-xp\", PROCESSOR_ATHLON, PTA_MMX | PTA_SSEPREFETCH | PTA_3DNOW\n+      {\"athlon-xp\", PROCESSOR_ATHLON, PTA_MMX | PTA_PREFETCH_SSE | PTA_3DNOW\n \t\t\t\t      | PTA_3DNOW_A | PTA_SSE},\n-      {\"athlon-mp\", PROCESSOR_ATHLON, PTA_MMX | PTA_SSEPREFETCH | PTA_3DNOW\n+      {\"athlon-mp\", PROCESSOR_ATHLON, PTA_MMX | PTA_PREFETCH_SSE | PTA_3DNOW\n \t\t\t\t      | PTA_3DNOW_A | PTA_SSE},\n     };\n \n@@ -865,8 +885,12 @@ override_options ()\n   SUBTARGET_OVERRIDE_OPTIONS;\n #endif\n \n-  ix86_arch = PROCESSOR_I386;\n-  ix86_cpu = (enum processor_type) TARGET_CPU_DEFAULT;\n+  if (!ix86_cpu_string && ix86_arch_string)\n+    ix86_cpu_string = ix86_arch_string;\n+  if (!ix86_cpu_string)\n+    ix86_cpu_string = cpu_names [TARGET_CPU_DEFAULT];\n+  if (!ix86_arch_string)\n+    ix86_arch_string = TARGET_64BIT ? \"athlon-4\" : \"i386\";\n \n   if (ix86_cmodel_string != 0)\n     {\n@@ -900,47 +924,45 @@ override_options ()\n     sorry (\"%i-bit mode not compiled in\",\n \t   (target_flags & MASK_64BIT) ? 64 : 32);\n \n-  if (ix86_arch_string != 0)\n-    {\n-      for (i = 0; i < pta_size; i++)\n-\tif (! strcmp (ix86_arch_string, processor_alias_table[i].name))\n-\t  {\n-\t    ix86_arch = processor_alias_table[i].processor;\n-\t    /* Default cpu tuning to the architecture.  */\n-\t    ix86_cpu = ix86_arch;\n-\t    if (processor_alias_table[i].flags & PTA_MMX\n-\t        && !(target_flags & MASK_MMX_SET))\n-\t      target_flags |= MASK_MMX;\n-\t    if (processor_alias_table[i].flags & PTA_3DNOW\n-\t        && !(target_flags & MASK_3DNOW_SET))\n-\t      target_flags |= MASK_3DNOW;\n-\t    if (processor_alias_table[i].flags & PTA_3DNOW_A\n-\t        && !(target_flags & MASK_3DNOW_A_SET))\n-\t      target_flags |= MASK_3DNOW_A;\n-\t    if (processor_alias_table[i].flags & PTA_SSE\n-\t        && !(target_flags & MASK_SSE_SET))\n-\t      target_flags |= MASK_SSE;\n-\t    if (processor_alias_table[i].flags & PTA_SSE2\n-\t        && !(target_flags & MASK_SSE2_SET))\n-\t      target_flags |= MASK_SSE2;\n-\t    break;\n-\t  }\n+  for (i = 0; i < pta_size; i++)\n+    if (! strcmp (ix86_arch_string, processor_alias_table[i].name))\n+      {\n+\tix86_arch = processor_alias_table[i].processor;\n+\t/* Default cpu tuning to the architecture.  */\n+\tix86_cpu = ix86_arch;\n+\tif (processor_alias_table[i].flags & PTA_MMX\n+\t    && !(target_flags & MASK_MMX_SET))\n+\t  target_flags |= MASK_MMX;\n+\tif (processor_alias_table[i].flags & PTA_3DNOW\n+\t    && !(target_flags & MASK_3DNOW_SET))\n+\t  target_flags |= MASK_3DNOW;\n+\tif (processor_alias_table[i].flags & PTA_3DNOW_A\n+\t    && !(target_flags & MASK_3DNOW_A_SET))\n+\t  target_flags |= MASK_3DNOW_A;\n+\tif (processor_alias_table[i].flags & PTA_SSE\n+\t    && !(target_flags & MASK_SSE_SET))\n+\t  target_flags |= MASK_SSE;\n+\tif (processor_alias_table[i].flags & PTA_SSE2\n+\t    && !(target_flags & MASK_SSE2_SET))\n+\t  target_flags |= MASK_SSE2;\n+\tif (processor_alias_table[i].flags & PTA_PREFETCH_SSE)\n+\t  x86_prefetch_sse = true;\n+\tbreak;\n+      }\n \n-      if (i == pta_size)\n-\terror (\"bad value (%s) for -march= switch\", ix86_arch_string);\n-    }\n+  if (i == pta_size)\n+    error (\"bad value (%s) for -march= switch\", ix86_arch_string);\n \n-  if (ix86_cpu_string != 0)\n-    {\n-      for (i = 0; i < pta_size; i++)\n-\tif (! strcmp (ix86_cpu_string, processor_alias_table[i].name))\n-\t  {\n-\t    ix86_cpu = processor_alias_table[i].processor;\n-\t    break;\n-\t  }\n-      if (i == pta_size)\n-\terror (\"bad value (%s) for -mcpu= switch\", ix86_cpu_string);\n-    }\n+  for (i = 0; i < pta_size; i++)\n+    if (! strcmp (ix86_cpu_string, processor_alias_table[i].name))\n+      {\n+\tix86_cpu = processor_alias_table[i].processor;\n+\tbreak;\n+      }\n+  if (processor_alias_table[i].flags & PTA_PREFETCH_SSE)\n+    x86_prefetch_sse = true;\n+  if (i == pta_size)\n+    error (\"bad value (%s) for -mcpu= switch\", ix86_cpu_string);\n \n   if (optimize_size)\n     ix86_cost = &size_cost;\n@@ -11857,22 +11879,13 @@ ix86_expand_builtin (exp, target, subtarget, mode, ignore)\n       return ix86_expand_binop_builtin (CODE_FOR_pmulhrwv4hi3, arglist, target);\n \n     case IX86_BUILTIN_PREFETCH_3DNOW:\n-      icode = CODE_FOR_prefetch_3dnow;\n-      arg0 = TREE_VALUE (arglist);\n-      op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n-      mode0 = insn_data[icode].operand[0].mode;\n-      pat = GEN_FCN (icode) (copy_to_mode_reg (Pmode, op0));\n-      if (! pat)\n-        return NULL_RTX;\n-      emit_insn (pat);\n-      return NULL_RTX;\n-\n     case IX86_BUILTIN_PREFETCHW:\n-      icode = CODE_FOR_prefetchw;\n+      icode = CODE_FOR_prefetch_3dnow;\n       arg0 = TREE_VALUE (arglist);\n       op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n+      op1 = (fcode == IX86_BUILTIN_PREFETCH_3DNOW ? const0_rtx : const1_rtx);\n       mode0 = insn_data[icode].operand[0].mode;\n-      pat = GEN_FCN (icode) (copy_to_mode_reg (Pmode, op0));\n+      pat = GEN_FCN (icode) (copy_to_mode_reg (Pmode, op0), op1);\n       if (! pat)\n         return NULL_RTX;\n       emit_insn (pat);"}, {"sha": "cfbb10b18dde98880353f30fc8a3895b62634622", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 74, "deletions": 11, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f436562730268adf0b2262f821abbbf3ee05519c/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f436562730268adf0b2262f821abbbf3ee05519c/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=f436562730268adf0b2262f821abbbf3ee05519c", "patch": "@@ -86,6 +86,9 @@ struct processor_costs {\n \t\t\t\t   in SImode, DImode and TImode*/\n   const int mmxsse_to_integer;\t/* cost of moving mmxsse register to\n \t\t\t\t   integer and vice versa.  */\n+  const int prefetch_block;\t/* bytes moved to cache for prefetch.  */\n+  const int simultaneous_prefetches; /* number of parallel prefetch\n+\t\t\t\t   operations.  */\n };\n \n extern const struct processor_costs *ix86_cost;\n@@ -224,6 +227,7 @@ extern const int x86_add_esp_4, x86_add_esp_8, x86_sub_esp_4, x86_sub_esp_8;\n extern const int x86_partial_reg_dependency, x86_memory_mismatch_stall;\n extern const int x86_accumulate_outgoing_args, x86_prologue_using_move;\n extern const int x86_epilogue_using_move, x86_decompose_lea;\n+extern int x86_prefetch_sse;\n \n #define TARGET_USE_LEAVE (x86_use_leave & CPUMASK)\n #define TARGET_PUSH_MEMORY (x86_push_memory & CPUMASK)\n@@ -262,6 +266,7 @@ extern const int x86_epilogue_using_move, x86_decompose_lea;\n #define TARGET_PROLOGUE_USING_MOVE (x86_prologue_using_move & CPUMASK)\n #define TARGET_EPILOGUE_USING_MOVE (x86_epilogue_using_move & CPUMASK)\n #define TARGET_DECOMPOSE_LEA (x86_decompose_lea & CPUMASK)\n+#define TARGET_PREFETCH_SSE (x86_prefetch_sse)\n \n #define TARGET_STACK_PROBE (target_flags & MASK_STACK_PROBE)\n \n@@ -480,24 +485,61 @@ extern int ix86_arch;\n %n`-mpentiumpro' is deprecated. Use `-march=pentiumpro' or `-mcpu=pentiumpro' instead.\\n}}\"\n #endif\n \f\n+#define TARGET_CPU_DEFAULT_i386 0\n+#define TARGET_CPU_DEFAULT_i486 1\n+#define TARGET_CPU_DEFAULT_pentium 2\n+#define TARGET_CPU_DEFAULT_pentiumpro 3\n+#define TARGET_CPU_DEFAULT_pentium2 4\n+#define TARGET_CPU_DEFAULT_pentium3 5\n+#define TARGET_CPU_DEFAULT_pentium4 6\n+#define TARGET_CPU_DEFAULT_k6 7\n+#define TARGET_CPU_DEFAULT_k6_2 8\n+#define TARGET_CPU_DEFAULT_k6_3 9\n+#define TARGET_CPU_DEFAULT_athlon 10\n+#define TARGET_CPU_DEFAULT_athlon_sse 11\n+\n+#define TARGET_CPU_DEFAULT_NAMES {\"i386\", \"i486\", \"pentium\", \"pentium-mmx\",\\\n+\t\t\t\t  \"pentiumpro\", \"pentium2\", \"pentium3\", \\\n+\t\t\t\t  \"pentium4\", \"k6\", \"k6-2\", \"k6-3\",\\\n+\t\t\t\t  \"athlon\", \"athlon-4\"}\n #ifndef CPP_CPU_DEFAULT_SPEC\n-#if TARGET_CPU_DEFAULT == 1\n+#if TARGET_CPU_DEFAULT == TARGET_CPU_DEFAULT_i486\n #define CPP_CPU_DEFAULT_SPEC \"-D__tune_i486__\"\n #endif\n-#if TARGET_CPU_DEFAULT == 2\n+#if TARGET_CPU_DEFAULT == TARGET_CPU_DEFAULT_pentium\n #define CPP_CPU_DEFAULT_SPEC \"-D__tune_i586__ -D__tune_pentium__\"\n #endif\n-#if TARGET_CPU_DEFAULT == 3\n+#if TARGET_CPU_DEFAULT == TARGET_CPU_DEFAULT_pentium_mmx\n+#define CPP_CPU_DEFAULT_SPEC \"-D__tune_i586__ -D__tune_pentium__ -D__tune_pentium_mmx__\"\n+#endif\n+#if TARGET_CPU_DEFAULT == TARGET_CPU_DEFAULT_pentiumpro\n #define CPP_CPU_DEFAULT_SPEC \"-D__tune_i686__ -D__tune_pentiumpro__\"\n #endif\n-#if TARGET_CPU_DEFAULT == 4\n+#if TARGET_CPU_DEFAULT == TARGET_CPU_DEFAULT_pentium2\n+#define CPP_CPU_DEFAULT_SPEC \"-D__tune_i686__ -D__tune_pentiumpro__\\\n+-D__tune_pentium2__\"\n+#endif\n+#if TARGET_CPU_DEFAULT == TARGET_CPU_DEFAULT_pentium3\n+#define CPP_CPU_DEFAULT_SPEC \"-D__tune_i686__ -D__tune_pentiumpro__\\\n+-D__tune_pentium2__ -D__tune_pentium3__\"\n+#endif\n+#if TARGET_CPU_DEFAULT == TARGET_CPU_DEFAULT_pentium4\n+#define CPP_CPU_DEFAULT_SPEC \"-D__tune_pentium4__\"\n+#endif\n+#if TARGET_CPU_DEFAULT == TARGET_CPU_DEFAULT_k6\n #define CPP_CPU_DEFAULT_SPEC \"-D__tune_k6__\"\n #endif\n-#if TARGET_CPU_DEFAULT == 5\n+#if TARGET_CPU_DEFAULT == TARGET_CPU_DEFAULT_k6_2\n+#define CPP_CPU_DEFAULT_SPEC \"-D__tune_k6__ -D__tune_k6_2__\"\n+#endif\n+#if TARGET_CPU_DEFAULT == TARGET_CPU_DEFAULT_k6_3\n+#define CPP_CPU_DEFAULT_SPEC \"-D__tune_k6__ -D__tune_k6_3__\"\n+#endif\n+#if TARGET_CPU_DEFAULT == TARGET_CPU_DEFAULT_athlon\n #define CPP_CPU_DEFAULT_SPEC \"-D__tune_athlon__\"\n #endif\n-#if TARGET_CPU_DEFAULT == 6\n-#define CPP_CPU_DEFAULT_SPEC \"-D__tune_pentium4__\"\n+#if TARGET_CPU_DEFAULT == TARGET_CPU_DEFAULT_athlon_sse\n+#define CPP_CPU_DEFAULT_SPEC \"-D__tune_athlon__ -D__tune_athlon_sse__\"\n #endif\n #ifndef CPP_CPU_DEFAULT_SPEC\n #define CPP_CPU_DEFAULT_SPEC \"-D__tune_i386__\"\n@@ -531,30 +573,45 @@ extern int ix86_arch;\n %{march=i486:-D__i486 -D__i486__ %{!mcpu*:-D__tune_i486__ }}\\\n %{march=pentium|march=i586:-D__i586 -D__i586__ -D__pentium -D__pentium__ \\\n   %{!mcpu*:-D__tune_i586__ -D__tune_pentium__ }}\\\n+%{march=pentium-mmx:-D__i586 -D__i586__ -D__pentium -D__pentium__ \\\n+  -D__pentium__mmx__ \\\n+  %{!mcpu*:-D__tune_i586__ -D__tune_pentium__ -D__tune_pentium_mmx__}}\\\n %{march=pentiumpro|march=i686:-D__i686 -D__i686__ \\\n   -D__pentiumpro -D__pentiumpro__ \\\n   %{!mcpu*:-D__tune_i686__ -D__tune_pentiumpro__ }}\\\n %{march=k6:-D__k6 -D__k6__ %{!mcpu*:-D__tune_k6__ }}\\\n-%{march=athlon:-D__athlon -D__athlon__ %{!mcpu*:-D__tune_athlon__ }}\\\n+%{march=k6-2:-D__k6 -D__k6__ -D__k6_2__ \\\n+  %{!mcpu*:-D__tune_k6__ -D__tune_k6_2__ }}\\\n+%{march=k6-3:-D__k6 -D__k6__ -D__k6_3__ \\\n+  %{!mcpu*:-D__tune_k6__ -D__tune_k6_3__ }}\\\n+%{march=athlon|march=athlon-tbird:-D__athlon -D__athlon__ \\\n+  %{!mcpu*:-D__tune_athlon__ }}\\\n+%{march=athlon-4|march=athlon-xp|march=athlon-mp:-D__athlon -D__athlon__ \\\n+  -D__athlon_sse__ \\\n+  %{!mcpu*:-D__tune_athlon__ -D__tune_athlon_sse__ }}\\\n %{march=pentium4:-D__pentium4 -D__pentium4__ %{!mcpu*:-D__tune_pentium4__ }}\\\n %{m386|mcpu=i386:-D__tune_i386__ }\\\n %{m486|mcpu=i486:-D__tune_i486__ }\\\n %{mpentium|mcpu=pentium|mcpu=i586|mcpu=pentium-mmx:-D__tune_i586__ -D__tune_pentium__ }\\\n-%{mpentiumpro|mcpu=pentiumpro|mcpu=i686|cpu=pentium2|cpu=pentium3:-D__tune_i686__\\\n+%{mpentiumpro|mcpu=pentiumpro|mcpu=i686|cpu=pentium2|cpu=pentium3:-D__tune_i686__ \\\n -D__tune_pentiumpro__ }\\\n %{mcpu=k6|mcpu=k6-2|mcpu=k6-3:-D__tune_k6__ }\\\n %{mcpu=athlon|mcpu=athlon-tbird|mcpu=athlon-4|mcpu=athlon-xp|mcpu=athlon-mp:\\\n -D__tune_athlon__ }\\\n+%{mcpu=athlon-4|mcpu=athlon-xp|mcpu=athlon-mp:\\\n+-D__tune_athlon_sse__ }\\\n %{mcpu=pentium4:-D__tune_pentium4__ }\\\n %{march=march=athlon-tbird|march=athlon-xp|march=athlon-mp|march=pentium3|march=pentium4:\\\n -D__SSE__ }\\\n %{march=pentium-mmx|march=k6|march=k6-2|march=k6-3\\\n march=athlon|march=athlon-tbird|march=athlon-4|march=athlon-xp\\\n |march=athlon-mp|march=pentium2|march=pentium3|march=pentium4: -D__MMX__ }\\\n-%{march=k6|march=k6-2|march=k6-3\\\n+%{march=k6-2|march=k6-3\\\n march=athlon|march=athlon-tbird|march=athlon-4|march=athlon-xp\\\n |march=athlon-mp: -D__3dNOW__ }\\\n-%{mcpu=mcpu=pentium4: -D__SSE2__ }\\\n+%{march=athlon|march=athlon-tbird|march=athlon-4|march=athlon-xp\\\n+|march=athlon-mp: -D__3dNOW_A__ }\\\n+%{march=mcpu=pentium4: -D__SSE2__ }\\\n %{!march*:%{!mcpu*:%{!m386:%{!m486:%{!mpentium*:%(cpp_cpu_default)}}}}}\"\n \n #ifndef CPP_CPU_SPEC\n@@ -2261,6 +2318,12 @@ while (0)\n /* Define this as 1 if `char' should by default be signed; else as 0.  */\n #define DEFAULT_SIGNED_CHAR 1\n \n+/* Number of bytes moved into a data cache for a single prefetch operation.  */\n+#define PREFETCH_BLOCK ix86_cost->prefetch_block\n+\n+/* Number of prefetch operations that can be done in parallel.  */\n+#define SIMULTANEOUS_PREFETCHES ix86_cost->simultaneous_prefetches\n+\n /* Max number of bytes we can move from memory to memory\n    in one reasonably fast instruction.  */\n #define MOVE_MAX 16"}, {"sha": "3da4cab3225f3a7c91b8ab2eb02d3e3e04283b89", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 58, "deletions": 11, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f436562730268adf0b2262f821abbbf3ee05519c/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f436562730268adf0b2262f821abbbf3ee05519c/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=f436562730268adf0b2262f821abbbf3ee05519c", "patch": "@@ -93,8 +93,6 @@\n ;; 44 This is a `sfence' operation.\n ;; 45 This is a noop to prevent excessive combiner cleverness.\n ;; 46 This is a `femms' operation.\n-;; 47 This is a `prefetch' (3DNow) operation.\n-;; 48 This is a `prefetchw' operation.\n ;; 49 This is a 'pavgusb' operation.\n ;; 50 This is a `pfrcp' operation.\n ;; 51 This is a `pfrcpit1' operation.\n@@ -19400,10 +19398,58 @@\n   [(set_attr \"type\" \"sse\")\n    (set_attr \"memory\" \"unknown\")])\n \n+(define_expand \"prefetch\"\n+  [(prefetch (match_operand:SI 0 \"address_operand\" \"p\")\n+\t     (match_operand:SI 1 \"const_int_operand\" \"n\")\n+\t     (match_operand:SI 2 \"const_int_operand\" \"n\"))]\n+  \"TARGET_PREFETCH_SSE || TARGET_3DNOW\"\n+  \"\n+{\n+  int rw = INTVAL (operands[1]);\n+  int locality = INTVAL (operands[2]);\n+  if (rw != 0 && rw != 1)\n+    abort ();\n+  if (locality < 0 || locality > 3)\n+    abort ();\n+  /* Use 3dNOW prefetch in case we are asking for write prefetch not\n+     suported by SSE counterpart or the SSE prefetch is not available\n+     (K6 machines).  Otherwise use SSE prefetch as it allows specifying\n+     of locality.  */\n+  if (TARGET_3DNOW\n+       && (!TARGET_PREFETCH_SSE || rw))\n+    {\n+      emit_insn (gen_prefetch_3dnow (operands[0], operands[1]));\n+    }\n+  else\n+    {\n+      int i;\n+      switch (locality)\n+\t{\n+\t  case 0:\t/* No temporal locality.  */\n+\t    i = 0;\n+\t    break;\n+\t  case 1:\t/* Lowest level of temporal locality.  */\n+\t    i = 3;\n+\t    break;\n+\t  case 2:\t/* Moderate level of temporal locality.  */\n+\t    i = 2;\n+\t    break;\n+\t  case 3:\t/* Highest level of temporal locality.  */\n+\t    i = 1;\n+\t    break;\n+\t  default:\n+\t    abort ();\t/* We already checked for valid values above.  */\n+\t    break;\n+\t}\n+      emit_insn (gen_prefetch_sse (operands[0], GEN_INT (i)));\n+    }\n+  DONE;\n+}\")\n+\n (define_insn \"prefetch_sse\"\n   [(unspec [(match_operand:SI 0 \"address_operand\" \"p\")\n \t    (match_operand:SI 1 \"immediate_operand\" \"n\")] 35)]\n-  \"TARGET_SSE || TARGET_3DNOW_A\"\n+  \"TARGET_PREFETCH_SSE\"\n {\n   switch (INTVAL (operands[1]))\n     {\n@@ -19579,15 +19625,16 @@\n   [(set_attr \"type\" \"mmx\")])\n \n (define_insn \"prefetch_3dnow\"\n-  [(unspec [(match_operand:SI 0 \"address_operand\" \"p\")] 47)]\n-  \"TARGET_3DNOW\"\n-  \"prefetch\\\\t%a0\"\n-  [(set_attr \"type\" \"mmx\")])\n-\n-(define_insn \"prefetchw\"\n-  [(unspec [(match_operand:SI 0 \"address_operand\" \"p\")] 48)]\n+  [(prefetch (match_operand:SI 0 \"address_operand\" \"p\")\n+\t     (match_operand:SI 1 \"const_int_operand\" \"n\")\n+\t     (const_int 0))]\n   \"TARGET_3DNOW\"\n-  \"prefetchw\\\\t%a0\"\n+{\n+  if (INTVAL (operands[1]) == 0)\n+    return \"prefetch\\t%a0\";\n+  else\n+    return \"prefetchw\\t%a0\";\n+}\n   [(set_attr \"type\" \"mmx\")])\n \n (define_insn \"pf2id\""}]}