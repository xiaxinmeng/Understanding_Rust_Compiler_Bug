{"sha": "42639a36bf2983d4a5adb02f3ab7e8c4bd1023c7", "node_id": "C_kwDOANBUbNoAKDQyNjM5YTM2YmYyOTgzZDRhNWFkYjAyZjNhYjdlOGM0YmQxMDIzYzc", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-11-22T09:24:06Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-11-24T06:38:27Z"}, "message": "Remove ASSERT_EXPR.\n\nThis removes all uses of ASSERT_EXPR except the internal one in ipa-*.\n\ngcc/ChangeLog:\n\n\t* doc/gimple.texi: Remove ASSERT_EXPR references.\n\t* fold-const.cc (tree_expr_nonzero_warnv_p): Same.\n\t(fold_binary_loc): Same.\n\t(tree_expr_nonnegative_warnv_p): Same.\n\t* gimple-array-bounds.cc (get_base_decl): Same.\n\t* gimple-pretty-print.cc (dump_unary_rhs): Same.\n\t* gimple.cc (get_gimple_rhs_num_ops): Same.\n\t* pointer-query.cc (handle_ssa_name): Same.\n\t* tree-cfg.cc (verify_gimple_assign_single): Same.\n\t* tree-pretty-print.cc (dump_generic_node): Same.\n\t* tree-scalar-evolution.cc (scev_dfs::follow_ssa_edge_expr):Same.\n\t(interpret_rhs_expr): Same.\n\t* tree-ssa-operands.cc (operands_scanner::get_expr_operands): Same.\n\t* tree-ssa-propagate.cc\n\t(substitute_and_fold_dom_walker::before_dom_children): Same.\n\t* tree-ssa-threadedge.cc: Same.\n\t* tree-vrp.cc (overflow_comparison_p): Same.\n\t* tree.def (ASSERT_EXPR): Add note.\n\t* tree.h (ASSERT_EXPR_VAR): Remove.\n\t(ASSERT_EXPR_COND): Remove.\n\t* vr-values.cc (simplify_using_ranges::vrp_visit_cond_stmt):\n\tRemove comment.", "tree": {"sha": "6af45986512fe1e4e2a34df14712b966656981b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6af45986512fe1e4e2a34df14712b966656981b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/42639a36bf2983d4a5adb02f3ab7e8c4bd1023c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42639a36bf2983d4a5adb02f3ab7e8c4bd1023c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42639a36bf2983d4a5adb02f3ab7e8c4bd1023c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42639a36bf2983d4a5adb02f3ab7e8c4bd1023c7/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3f7deefd45a018ffc56ad3fb944a9f715b50901", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3f7deefd45a018ffc56ad3fb944a9f715b50901", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3f7deefd45a018ffc56ad3fb944a9f715b50901"}], "stats": {"total": 131, "additions": 13, "deletions": 118}, "files": [{"sha": "a4263922887bcf730bd9438a54c88eef82e0df66", "filename": "gcc/doc/gimple.texi", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42639a36bf2983d4a5adb02f3ab7e8c4bd1023c7/gcc%2Fdoc%2Fgimple.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42639a36bf2983d4a5adb02f3ab7e8c4bd1023c7/gcc%2Fdoc%2Fgimple.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgimple.texi?ref=42639a36bf2983d4a5adb02f3ab7e8c4bd1023c7", "patch": "@@ -682,8 +682,7 @@ more than two slots on the RHS.  For instance, a @code{COND_EXPR}\n expression of the form @code{(a op b) ? x : y} could be flattened\n out on the operand vector using 4 slots, but it would also\n require additional processing to distinguish @code{c = a op b}\n-from @code{c = a op b ? x : y}.  Something similar occurs with\n-@code{ASSERT_EXPR}.   In time, these special case tree\n+from @code{c = a op b ? x : y}.  In time, these special case tree\n expressions should be flattened into the operand vector.\n @end itemize\n "}, {"sha": "114258fa182b1bede268a61e073130746545da1a", "filename": "gcc/fold-const.cc", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42639a36bf2983d4a5adb02f3ab7e8c4bd1023c7/gcc%2Ffold-const.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42639a36bf2983d4a5adb02f3ab7e8c4bd1023c7/gcc%2Ffold-const.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.cc?ref=42639a36bf2983d4a5adb02f3ab7e8c4bd1023c7", "patch": "@@ -10751,7 +10751,6 @@ tree_expr_nonzero_warnv_p (tree t, bool *strict_overflow_p)\n     case COND_EXPR:\n     case CONSTRUCTOR:\n     case OBJ_TYPE_REF:\n-    case ASSERT_EXPR:\n     case ADDR_EXPR:\n     case WITH_SIZE_EXPR:\n     case SSA_NAME:\n@@ -12618,10 +12617,6 @@ fold_binary_loc (location_t loc, enum tree_code code, tree type,\n \t\t\t\t : fold_convert_loc (loc, type, arg1);\n       return tem;\n \n-    case ASSERT_EXPR:\n-      /* An ASSERT_EXPR should never be passed to fold_binary.  */\n-      gcc_unreachable ();\n-\n     default:\n       return NULL_TREE;\n     } /* switch (code) */\n@@ -15117,7 +15112,6 @@ tree_expr_nonnegative_warnv_p (tree t, bool *strict_overflow_p, int depth)\n     case COND_EXPR:\n     case CONSTRUCTOR:\n     case OBJ_TYPE_REF:\n-    case ASSERT_EXPR:\n     case ADDR_EXPR:\n     case WITH_SIZE_EXPR:\n     case SSA_NAME:"}, {"sha": "eae49ab3910ad57288d772e63af10fd610527a84", "filename": "gcc/gimple-array-bounds.cc", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42639a36bf2983d4a5adb02f3ab7e8c4bd1023c7/gcc%2Fgimple-array-bounds.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42639a36bf2983d4a5adb02f3ab7e8c4bd1023c7/gcc%2Fgimple-array-bounds.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-array-bounds.cc?ref=42639a36bf2983d4a5adb02f3ab7e8c4bd1023c7", "patch": "@@ -75,14 +75,7 @@ get_base_decl (tree ref)\n       if (gimple_assign_single_p (def))\n \t{\n \t  base = gimple_assign_rhs1 (def);\n-\t  if (TREE_CODE (base) != ASSERT_EXPR)\n-\t    return base;\n-\n-\t  base = TREE_OPERAND (base, 0);\n-\t  if (TREE_CODE (base) != SSA_NAME)\n-\t    return base;\n-\n-\t  continue;\n+\t  return base;\n \t}\n \n       if (!gimple_nop_p (def))"}, {"sha": "af70425763384b359ed78e1aa1afcd1a7786c9bd", "filename": "gcc/gimple-pretty-print.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42639a36bf2983d4a5adb02f3ab7e8c4bd1023c7/gcc%2Fgimple-pretty-print.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42639a36bf2983d4a5adb02f3ab7e8c4bd1023c7/gcc%2Fgimple-pretty-print.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-pretty-print.cc?ref=42639a36bf2983d4a5adb02f3ab7e8c4bd1023c7", "patch": "@@ -339,7 +339,6 @@ dump_unary_rhs (pretty_printer *buffer, const gassign *gs, int spc,\n   switch (rhs_code)\n     {\n     case VIEW_CONVERT_EXPR:\n-    case ASSERT_EXPR:\n       dump_generic_node (buffer, rhs, spc, flags, false);\n       break;\n "}, {"sha": "dd054e1645374684472aae6831020c76c24e6368", "filename": "gcc/gimple.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42639a36bf2983d4a5adb02f3ab7e8c4bd1023c7/gcc%2Fgimple.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42639a36bf2983d4a5adb02f3ab7e8c4bd1023c7/gcc%2Fgimple.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.cc?ref=42639a36bf2983d4a5adb02f3ab7e8c4bd1023c7", "patch": "@@ -2408,7 +2408,6 @@ get_gimple_rhs_num_ops (enum tree_code code)\n       || (SYM) == BIT_INSERT_EXPR) ? GIMPLE_TERNARY_RHS\t\t\t    \\\n    : ((SYM) == CONSTRUCTOR\t\t\t\t\t\t    \\\n       || (SYM) == OBJ_TYPE_REF\t\t\t\t\t\t    \\\n-      || (SYM) == ASSERT_EXPR\t\t\t\t\t\t    \\\n       || (SYM) == ADDR_EXPR\t\t\t\t\t\t    \\\n       || (SYM) == WITH_SIZE_EXPR\t\t\t\t\t    \\\n       || (SYM) == SSA_NAME) ? GIMPLE_SINGLE_RHS\t\t\t\t    \\"}, {"sha": "95565fd6005b99bedcbdacf8e076cf48928a301b", "filename": "gcc/pointer-query.cc", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42639a36bf2983d4a5adb02f3ab7e8c4bd1023c7/gcc%2Fpointer-query.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42639a36bf2983d4a5adb02f3ab7e8c4bd1023c7/gcc%2Fpointer-query.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpointer-query.cc?ref=42639a36bf2983d4a5adb02f3ab7e8c4bd1023c7", "patch": "@@ -2144,12 +2144,6 @@ handle_ssa_name (tree ptr, bool addr, int ostype,\n \n   tree rhs = gimple_assign_rhs1 (stmt);\n \n-  if (code == ASSERT_EXPR)\n-    {\n-      rhs = TREE_OPERAND (rhs, 0);\n-      return compute_objsize_r (rhs, stmt, addr, ostype, pref, snlim, qry);\n-    }\n-\n   if (code == POINTER_PLUS_EXPR\n       && TREE_CODE (TREE_TYPE (rhs)) == POINTER_TYPE)\n     {"}, {"sha": "28175312afce59109b0255e8f756bf69e81d4ac7", "filename": "gcc/tree-cfg.cc", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42639a36bf2983d4a5adb02f3ab7e8c4bd1023c7/gcc%2Ftree-cfg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42639a36bf2983d4a5adb02f3ab7e8c4bd1023c7/gcc%2Ftree-cfg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.cc?ref=42639a36bf2983d4a5adb02f3ab7e8c4bd1023c7", "patch": "@@ -4795,17 +4795,6 @@ verify_gimple_assign_single (gassign *stmt)\n \t}\n       return res;\n \n-    case ASSERT_EXPR:\n-      /* FIXME.  */\n-      rhs1 = fold (ASSERT_EXPR_COND (rhs1));\n-      if (rhs1 == boolean_false_node)\n-\t{\n-\t  error (\"%qs with an always-false condition\", code_name);\n-\t  debug_generic_stmt (rhs1);\n-\t  return true;\n-\t}\n-      break;\n-\n     case WITH_SIZE_EXPR:\n       error (\"%qs RHS in assignment statement\",\n \t     get_tree_code_name (rhs_code));"}, {"sha": "cb2a88cbdc58501fd3c5042d8c73870e0376675b", "filename": "gcc/tree-pretty-print.cc", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42639a36bf2983d4a5adb02f3ab7e8c4bd1023c7/gcc%2Ftree-pretty-print.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42639a36bf2983d4a5adb02f3ab7e8c4bd1023c7/gcc%2Ftree-pretty-print.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.cc?ref=42639a36bf2983d4a5adb02f3ab7e8c4bd1023c7", "patch": "@@ -3416,14 +3416,6 @@ dump_generic_node (pretty_printer *pp, tree node, int spc, dump_flags_t flags,\n       pp_greater (pp);\n       break;\n \n-    case ASSERT_EXPR:\n-      pp_string (pp, \"ASSERT_EXPR <\");\n-      dump_generic_node (pp, ASSERT_EXPR_VAR (node), spc, flags, false);\n-      pp_string (pp, \", \");\n-      dump_generic_node (pp, ASSERT_EXPR_COND (node), spc, flags, false);\n-      pp_greater (pp);\n-      break;\n-\n     case SCEV_KNOWN:\n       pp_string (pp, \"scev_known\");\n       break;"}, {"sha": "60060337804aebd4538ec90057c219fab9acf63a", "filename": "gcc/tree-scalar-evolution.cc", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42639a36bf2983d4a5adb02f3ab7e8c4bd1023c7/gcc%2Ftree-scalar-evolution.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42639a36bf2983d4a5adb02f3ab7e8c4bd1023c7/gcc%2Ftree-scalar-evolution.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.cc?ref=42639a36bf2983d4a5adb02f3ab7e8c4bd1023c7", "patch": "@@ -1122,13 +1122,11 @@ scev_dfs::follow_ssa_edge_expr (gimple *at_stmt, tree expr,\n      - a PLUS_EXPR,\n      - a POINTER_PLUS_EXPR,\n      - a MINUS_EXPR,\n-     - an ASSERT_EXPR,\n      - other cases are not yet handled.  */\n \n   /* For SSA_NAME look at the definition statement, handling\n      PHI nodes and otherwise expand appropriately for the expression\n      handling below.  */\n-tail_recurse:\n   if (TREE_CODE (expr) == SSA_NAME)\n     {\n       gimple *def = SSA_NAME_DEF_STMT (expr);\n@@ -1272,12 +1270,6 @@ scev_dfs::follow_ssa_edge_expr (gimple *at_stmt, tree expr,\n       return follow_ssa_edge_binary (at_stmt, type, rhs0, code, rhs1,\n \t\t\t\t     evolution_of_loop, limit);\n \n-    case ASSERT_EXPR:\n-      /* This assignment is of the form: \"a_1 = ASSERT_EXPR <a_2, ...>\"\n-\t It must be handled as a copy assignment of the form a_1 = a_2.  */\n-      expr = ASSERT_EXPR_VAR (rhs0);\n-      goto tail_recurse;\n-\n     default:\n       return t_false;\n     }\n@@ -1640,13 +1632,6 @@ interpret_rhs_expr (class loop *loop, gimple *at_stmt,\n       if (code == SSA_NAME)\n \treturn chrec_convert (type, analyze_scalar_evolution (loop, rhs1),\n \t\t\t      at_stmt);\n-\n-      if (code == ASSERT_EXPR)\n-\t{\n-\t  rhs1 = ASSERT_EXPR_VAR (rhs1);\n-\t  return chrec_convert (type, analyze_scalar_evolution (loop, rhs1),\n-\t\t\t\tat_stmt);\n-\t}\n     }\n \n   switch (code)"}, {"sha": "4c90197860ce44a7ec88e41a6031bf5ff2b548c4", "filename": "gcc/tree-ssa-operands.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42639a36bf2983d4a5adb02f3ab7e8c4bd1023c7/gcc%2Ftree-ssa-operands.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42639a36bf2983d4a5adb02f3ab7e8c4bd1023c7/gcc%2Ftree-ssa-operands.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.cc?ref=42639a36bf2983d4a5adb02f3ab7e8c4bd1023c7", "patch": "@@ -897,7 +897,6 @@ operands_scanner::get_expr_operands (tree *expr_p, int flags)\n     case BIT_INSERT_EXPR:\n     case COMPOUND_EXPR:\n     case OBJ_TYPE_REF:\n-    case ASSERT_EXPR:\n     do_binary:\n       {\n \tget_expr_operands (&TREE_OPERAND (expr, 0), flags);"}, {"sha": "976b035eeece5d8f0e44015c403c392ef16100a5", "filename": "gcc/tree-ssa-propagate.cc", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42639a36bf2983d4a5adb02f3ab7e8c4bd1023c7/gcc%2Ftree-ssa-propagate.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42639a36bf2983d4a5adb02f3ab7e8c4bd1023c7/gcc%2Ftree-ssa-propagate.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-propagate.cc?ref=42639a36bf2983d4a5adb02f3ab7e8c4bd1023c7", "patch": "@@ -821,10 +821,7 @@ substitute_and_fold_dom_walker::before_dom_children (basic_block bb)\n \t      && sprime != lhs\n \t      && may_propagate_copy (lhs, sprime)\n \t      && !stmt_could_throw_p (cfun, stmt)\n-\t      && !gimple_has_side_effects (stmt)\n-\t      /* We have to leave ASSERT_EXPRs around for jump-threading.  */\n-\t      && (!is_gimple_assign (stmt)\n-\t\t  || gimple_assign_rhs_code (stmt) != ASSERT_EXPR))\n+\t      && !gimple_has_side_effects (stmt))\n \t    {\n \t      if (dump_file && (dump_flags & TDF_DETAILS))\n \t\t{"}, {"sha": "cc7020ddbb3f0d5ba7d4b7643750b15d7710ec4a", "filename": "gcc/tree-ssa-threadedge.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42639a36bf2983d4a5adb02f3ab7e8c4bd1023c7/gcc%2Ftree-ssa-threadedge.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42639a36bf2983d4a5adb02f3ab7e8c4bd1023c7/gcc%2Ftree-ssa-threadedge.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadedge.cc?ref=42639a36bf2983d4a5adb02f3ab7e8c4bd1023c7", "patch": "@@ -497,9 +497,9 @@ jump_threader::simplify_control_stmt_condition_1\n     }\n \n   /* If the condition has the form (A & B) CMP 0 or (A | B) CMP 0 then\n-     recurse into the LHS to see if there is a dominating ASSERT_EXPR\n-     of A or of B that makes this condition always true or always false\n-     along the edge E.  */\n+     recurse into the LHS to see if there is a simplification that\n+     makes this condition always true or always false along the edge\n+     E.  */\n   if ((cond_code == EQ_EXPR || cond_code == NE_EXPR)\n       && TREE_CODE (op0) == SSA_NAME\n       && integer_zerop (op1))"}, {"sha": "d29941d0f2d296b20de7e3e57206405c64154f1b", "filename": "gcc/tree-vrp.cc", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42639a36bf2983d4a5adb02f3ab7e8c4bd1023c7/gcc%2Ftree-vrp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42639a36bf2983d4a5adb02f3ab7e8c4bd1023c7/gcc%2Ftree-vrp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.cc?ref=42639a36bf2983d4a5adb02f3ab7e8c4bd1023c7", "patch": "@@ -782,10 +782,9 @@ overflow_comparison_p (tree_code code, tree name, tree val,\n    <bb 6>:\n    __builtin_unreachable ();\n    <bb 7>:\n-   x_5 = ASSERT_EXPR <x_3, ...>;\n-   If x_3 has no other immediate uses (checked by caller),\n-   var is the x_3 var from ASSERT_EXPR, we can clear low 5 bits\n-   from the non-zero bitmask.  */\n+\n+   If x_3 has no other immediate uses (checked by caller), var is the\n+   x_3 var, we can clear low 5 bits from the non-zero bitmask.  */\n \n void\n maybe_set_nonzero_bits (edge e, tree var)"}, {"sha": "69783bd44fcccde4d8cf862d269f9c6ca50ad541", "filename": "gcc/tree.def", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42639a36bf2983d4a5adb02f3ab7e8c4bd1023c7/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42639a36bf2983d4a5adb02f3ab7e8c4bd1023c7/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=42639a36bf2983d4a5adb02f3ab7e8c4bd1023c7", "patch": "@@ -1025,7 +1025,10 @@ DEFTREECODE (POLYNOMIAL_CHREC, \"polynomial_chrec\", tcc_expression, 2)\n    Use the interface in tree-iterator.h to access this node.  */\n DEFTREECODE (STATEMENT_LIST, \"statement_list\", tcc_exceptional, 0)\n \n-/* Predicate assertion.  Artificial expression generated by the optimizers\n+/* NOTE: This code is deprecated and should only be used internally by ipa* as\n+   temporary construct.\n+\n+   Predicate assertion.  Artificial expression generated by the optimizers\n    to keep track of predicate values.  This expression may only appear on\n    the RHS of assignments.\n "}, {"sha": "4a19de1c94d7feb39e3184506871b9e140eb7f33", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42639a36bf2983d4a5adb02f3ab7e8c4bd1023c7/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42639a36bf2983d4a5adb02f3ab7e8c4bd1023c7/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=42639a36bf2983d4a5adb02f3ab7e8c4bd1023c7", "patch": "@@ -1406,10 +1406,6 @@ class auto_suppress_location_wrappers\n #define OBJ_TYPE_REF_OBJECT(NODE) TREE_OPERAND (OBJ_TYPE_REF_CHECK (NODE), 1)\n #define OBJ_TYPE_REF_TOKEN(NODE)  TREE_OPERAND (OBJ_TYPE_REF_CHECK (NODE), 2)\n \n-/* ASSERT_EXPR accessors.  */\n-#define ASSERT_EXPR_VAR(NODE)\tTREE_OPERAND (ASSERT_EXPR_CHECK (NODE), 0)\n-#define ASSERT_EXPR_COND(NODE)\tTREE_OPERAND (ASSERT_EXPR_CHECK (NODE), 1)\n-\n /* CALL_EXPR accessors.  */\n #define CALL_EXPR_FN(NODE) TREE_OPERAND (CALL_EXPR_CHECK (NODE), 1)\n #define CALL_EXPR_STATIC_CHAIN(NODE) TREE_OPERAND (CALL_EXPR_CHECK (NODE), 2)"}, {"sha": "5019fea4587a072660c23eaedde7504e1e6b6a98", "filename": "gcc/vr-values.cc", "status": "modified", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42639a36bf2983d4a5adb02f3ab7e8c4bd1023c7/gcc%2Fvr-values.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42639a36bf2983d4a5adb02f3ab7e8c4bd1023c7/gcc%2Fvr-values.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvr-values.cc?ref=42639a36bf2983d4a5adb02f3ab7e8c4bd1023c7", "patch": "@@ -944,49 +944,6 @@ simplify_using_ranges::vrp_visit_cond_stmt (gcond *stmt, edge *taken_edge_p)\n       fprintf (dump_file, \"\\n\");\n     }\n \n-  /* Compute the value of the predicate COND by checking the known\n-     ranges of each of its operands.\n-\n-     Note that we cannot evaluate all the equivalent ranges here\n-     because those ranges may not yet be final and with the current\n-     propagation strategy, we cannot determine when the value ranges\n-     of the names in the equivalence set have changed.\n-\n-     For instance, given the following code fragment\n-\n-        i_5 = PHI <8, i_13>\n-\t...\n-     \ti_14 = ASSERT_EXPR <i_5, i_5 != 0>\n-\tif (i_14 == 1)\n-\t  ...\n-\n-     Assume that on the first visit to i_14, i_5 has the temporary\n-     range [8, 8] because the second argument to the PHI function is\n-     not yet executable.  We derive the range ~[0, 0] for i_14 and the\n-     equivalence set { i_5 }.  So, when we visit 'if (i_14 == 1)' for\n-     the first time, since i_14 is equivalent to the range [8, 8], we\n-     determine that the predicate is always false.\n-\n-     On the next round of propagation, i_13 is determined to be\n-     VARYING, which causes i_5 to drop down to VARYING.  So, another\n-     visit to i_14 is scheduled.  In this second visit, we compute the\n-     exact same range and equivalence set for i_14, namely ~[0, 0] and\n-     { i_5 }.  But we did not have the previous range for i_5\n-     registered, so vrp_visit_assignment thinks that the range for\n-     i_14 has not changed.  Therefore, the predicate 'if (i_14 == 1)'\n-     is not visited again, which stops propagation from visiting\n-     statements in the THEN clause of that if().\n-\n-     To properly fix this we would need to keep the previous range\n-     value for the names in the equivalence set.  This way we would've\n-     discovered that from one visit to the other i_5 changed from\n-     range [8, 8] to VR_VARYING.\n-\n-     However, fixing this apparent limitation may not be worth the\n-     additional checking.  Testing on several code bases (GCC, DLV,\n-     MICO, TRAMP3D and SPEC2000) showed that doing this results in\n-     4 more predicates folded in SPEC.  */\n-\n   bool sop;\n   val = vrp_evaluate_conditional_warnv_with_ops (stmt,\n \t\t\t\t\t\t gimple_cond_code (stmt),"}]}