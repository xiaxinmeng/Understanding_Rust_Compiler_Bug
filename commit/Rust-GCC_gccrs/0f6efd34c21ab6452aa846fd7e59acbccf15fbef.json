{"sha": "0f6efd34c21ab6452aa846fd7e59acbccf15fbef", "node_id": "C_kwDOANBUbNoAKDBmNmVmZDM0YzIxYWI2NDUyYWE4NDZmZDdlNTlhY2JjY2YxNWZiZWY", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2022-10-08T18:47:56Z"}, "committer": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2022-10-10T21:27:17Z"}, "message": "compiler: only build thunk struct type when it is needed\n\nInstead of building the thunk struct type in the determine_types pass,\nbuild it when we need it.  That ensures that we are consistent in\ndetermining whether an argument is constant.\n\nWe no longer need to add a field for a call to recover, as the\nsimplify_thunk_statements pass runs after the build_recover_thunks pass,\nso the additional argument will already have been added to the call.\n\nThe test case is https://go.dev/cl/440297.\n\nFixes golang/go#56109\n\nReviewed-on: https://go-review.googlesource.com/c/gofrontend/+/440298", "tree": {"sha": "9db791e2885e9f0500563d39d9575167eb972cc9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9db791e2885e9f0500563d39d9575167eb972cc9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f6efd34c21ab6452aa846fd7e59acbccf15fbef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f6efd34c21ab6452aa846fd7e59acbccf15fbef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f6efd34c21ab6452aa846fd7e59acbccf15fbef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f6efd34c21ab6452aa846fd7e59acbccf15fbef/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d2f07ed4ce028a7c1f9b18f5d959f30213545ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d2f07ed4ce028a7c1f9b18f5d959f30213545ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d2f07ed4ce028a7c1f9b18f5d959f30213545ca"}], "stats": {"total": 41, "additions": 11, "deletions": 30}, "files": [{"sha": "1c2466090f13132edc7a2086df487a58401f4c10", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f6efd34c21ab6452aa846fd7e59acbccf15fbef/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f6efd34c21ab6452aa846fd7e59acbccf15fbef/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=0f6efd34c21ab6452aa846fd7e59acbccf15fbef", "patch": "@@ -1,4 +1,4 @@\n-50707b4b51266166ce9bcf9de187e35760ec50f9\n+164f2aeb1deec4c11e55b8bfb152ff7ff4c1dd4c\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "af8c7d15998244d29199e5bcf4d7d4d62c4511c8", "filename": "gcc/go/gofrontend/statements.cc", "status": "modified", "additions": 9, "deletions": 25, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f6efd34c21ab6452aa846fd7e59acbccf15fbef/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f6efd34c21ab6452aa846fd7e59acbccf15fbef/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.cc?ref=0f6efd34c21ab6452aa846fd7e59acbccf15fbef", "patch": "@@ -2349,7 +2349,7 @@ Thunk_statement::Thunk_statement(Statement_classification classification,\n \t\t\t\t Call_expression* call,\n \t\t\t\t Location location)\n     : Statement(classification, location),\n-      call_(call), struct_type_(NULL)\n+      call_(call)\n {\n }\n \n@@ -2430,15 +2430,6 @@ void\n Thunk_statement::do_determine_types()\n {\n   this->call_->determine_type_no_context();\n-\n-  // Now that we know the types of the call, build the struct used to\n-  // pass parameters.\n-  Call_expression* ce = this->call_->call_expression();\n-  if (ce == NULL)\n-    return;\n-  Function_type* fntype = ce->get_function_type();\n-  if (fntype != NULL && !this->is_simple(fntype))\n-    this->struct_type_ = this->build_struct(fntype);\n }\n \n // Check types in a thunk statement.\n@@ -2581,6 +2572,8 @@ Thunk_statement::simplify_statement(Gogo* gogo, Named_object* function,\n   if (this->is_simple(fntype))\n     return false;\n \n+  Struct_type* struct_type = this->build_struct(fntype);\n+\n   Expression* fn = ce->fn();\n   Interface_field_reference_expression* interface_method =\n     fn->interface_field_reference_expression();\n@@ -2600,7 +2593,7 @@ Thunk_statement::simplify_statement(Gogo* gogo, Named_object* function,\n   std::string thunk_name = gogo->thunk_name();\n \n   // Build the thunk.\n-  this->build_thunk(gogo, thunk_name);\n+  this->build_thunk(gogo, thunk_name, struct_type);\n \n   // Generate code to call the thunk.\n \n@@ -2630,8 +2623,7 @@ Thunk_statement::simplify_statement(Gogo* gogo, Named_object* function,\n \n   // Build the struct.\n   Expression* constructor =\n-    Expression::make_struct_composite_literal(this->struct_type_, vals,\n-\t\t\t\t\t      location);\n+    Expression::make_struct_composite_literal(struct_type, vals, location);\n \n   // Allocate the initialized struct on the heap.\n   constructor = Expression::make_heap_expression(constructor, location);\n@@ -2745,15 +2737,6 @@ Thunk_statement::build_struct(Function_type* fntype)\n       fields->push_back(Struct_field(tid));\n     }\n \n-  // The predeclared recover function has no argument.  However, we\n-  // add an argument when building recover thunks.  Handle that here.\n-  if (ce->is_recover_call())\n-    {\n-      fields->push_back(Struct_field(Typed_identifier(\"can_recover\",\n-\t\t\t\t\t\t      Type::lookup_bool_type(),\n-\t\t\t\t\t\t      location)));\n-    }\n-\n   const Expression_list* args = ce->args();\n   if (args != NULL)\n     {\n@@ -2781,7 +2764,8 @@ Thunk_statement::build_struct(Function_type* fntype)\n // artificial, function.\n \n void\n-Thunk_statement::build_thunk(Gogo* gogo, const std::string& thunk_name)\n+Thunk_statement::build_thunk(Gogo* gogo, const std::string& thunk_name,\n+\t\t\t     Struct_type* struct_type)\n {\n   Location location = this->location();\n \n@@ -2807,7 +2791,7 @@ Thunk_statement::build_thunk(Gogo* gogo, const std::string& thunk_name)\n   // which is a pointer to the special structure we build.\n   const char* const parameter_name = \"__go_thunk_parameter\";\n   Typed_identifier_list* thunk_parameters = new Typed_identifier_list();\n-  Type* pointer_to_struct_type = Type::make_pointer_type(this->struct_type_);\n+  Type* pointer_to_struct_type = Type::make_pointer_type(struct_type);\n   thunk_parameters->push_back(Typed_identifier(parameter_name,\n \t\t\t\t\t       pointer_to_struct_type,\n \t\t\t\t\t       location));\n@@ -2914,7 +2898,7 @@ Thunk_statement::build_thunk(Gogo* gogo, const std::string& thunk_name)\n     }\n \n   Expression_list* call_params = new Expression_list();\n-  const Struct_field_list* fields = this->struct_type_->fields();\n+  const Struct_field_list* fields = struct_type->fields();\n   Struct_field_list::const_iterator p = fields->begin();\n   for (unsigned int i = 0; i < next_index; ++i)\n     ++p;"}, {"sha": "3d1ee33a3e514700e063efebf22c12888d9d8c56", "filename": "gcc/go/gofrontend/statements.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f6efd34c21ab6452aa846fd7e59acbccf15fbef/gcc%2Fgo%2Fgofrontend%2Fstatements.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f6efd34c21ab6452aa846fd7e59acbccf15fbef/gcc%2Fgo%2Fgofrontend%2Fstatements.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.h?ref=0f6efd34c21ab6452aa846fd7e59acbccf15fbef", "patch": "@@ -1411,7 +1411,7 @@ class Thunk_statement : public Statement\n \n   // Build the thunk.\n   void\n-  build_thunk(Gogo*, const std::string&);\n+  build_thunk(Gogo*, const std::string&, Struct_type*);\n \n   // Set the name to use for thunk field N.\n   void\n@@ -1420,9 +1420,6 @@ class Thunk_statement : public Statement\n   // The function call to be executed in a separate thread (go) or\n   // later (defer).\n   Expression* call_;\n-  // The type used for a struct to pass to a thunk, if this is not a\n-  // simple call.\n-  Struct_type* struct_type_;\n };\n \n // A go statement."}]}