{"sha": "6a825afe90080c1c187cacc6d6a90d322c1d9e7d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmE4MjVhZmU5MDA4MGMxYzE4N2NhY2M2ZDZhOTBkMzIyYzFkOWU3ZA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2017-02-28T22:02:15Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2017-02-28T22:02:15Z"}, "message": "Add tabulars for options with enum values.\n\n2017-02-28  Martin Liska  <mliska@suse.cz>\n\n\t* common.opt: Fix --help=option -Q for options which are of\n\tan enum type.\n2017-02-28  Martin Liska  <mliska@suse.cz>\n\n\t* c.opt: Fix --help=option -Q for options which are of\n\tan enum type.\n\nFrom-SVN: r245788", "tree": {"sha": "6ada93a259e03094f02aa7cccf0de16be7473a69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ada93a259e03094f02aa7cccf0de16be7473a69"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a825afe90080c1c187cacc6d6a90d322c1d9e7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a825afe90080c1c187cacc6d6a90d322c1d9e7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a825afe90080c1c187cacc6d6a90d322c1d9e7d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a825afe90080c1c187cacc6d6a90d322c1d9e7d/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "753721a542a5814d038bf7a01422aebd5ace6ff3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/753721a542a5814d038bf7a01422aebd5ace6ff3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/753721a542a5814d038bf7a01422aebd5ace6ff3"}], "stats": {"total": 25, "additions": 18, "deletions": 7}, "files": [{"sha": "dcb65530c6fa87eb420501b2a4343cebe12923e5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a825afe90080c1c187cacc6d6a90d322c1d9e7d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a825afe90080c1c187cacc6d6a90d322c1d9e7d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6a825afe90080c1c187cacc6d6a90d322c1d9e7d", "patch": "@@ -1,3 +1,8 @@\n+2017-02-28  Martin Liska  <mliska@suse.cz>\n+\n+\t* common.opt: Fix --help=option -Q for options which are of\n+\tan enum type.\n+\n 2017-02-28  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.c (print_reg): Error out for values"}, {"sha": "22eee9d1a8be3f2b1c945751919d47a2b322a77c", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a825afe90080c1c187cacc6d6a90d322c1d9e7d/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a825afe90080c1c187cacc6d6a90d322c1d9e7d/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=6a825afe90080c1c187cacc6d6a90d322c1d9e7d", "patch": "@@ -1,3 +1,8 @@\n+2017-02-28  Martin Liska  <mliska@suse.cz>\n+\n+\t* c.opt: Fix --help=option -Q for options which are of\n+\tan enum type.\n+\n 2017-02-24  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/79588"}, {"sha": "9b9aab4481065f156b0114ff7129428b47b0683b", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a825afe90080c1c187cacc6d6a90d322c1d9e7d/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a825afe90080c1c187cacc6d6a90d322c1d9e7d/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=6a825afe90080c1c187cacc6d6a90d322c1d9e7d", "patch": "@@ -293,7 +293,7 @@ Warn about 'new' of type with extended alignment without -faligned-new.\n \n Waligned-new=\n C++ ObjC++ Var(warn_aligned_new) Enum(warn_aligned_new_level) Joined RejectNegative Warning LangEnabledBy(C++ ObjC++,Wall,1,0)\n--Waligned-new=all Warn even if 'new' uses a class member allocation function.\n+-Waligned-new=[none|global|all]\tWarn even if 'new' uses a class member allocation function.\n \n Wall\n C ObjC C++ ObjC++ Warning"}, {"sha": "1a19847fe448634c1df78ae859817b4fee1e0467", "filename": "gcc/common.opt", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a825afe90080c1c187cacc6d6a90d322c1d9e7d/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a825afe90080c1c187cacc6d6a90d322c1d9e7d/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=6a825afe90080c1c187cacc6d6a90d322c1d9e7d", "patch": "@@ -1376,7 +1376,7 @@ Perform a forward propagation pass on RTL.\n \n ffp-contract=\n Common Joined RejectNegative Enum(fp_contract_mode) Var(flag_fp_contract_mode) Init(FP_CONTRACT_FAST) Optimization\n--ffp-contract=[off|on|fast] Perform floating-point expression contraction.\n+-ffp-contract=[off|on|fast]\tPerform floating-point expression contraction.\n \n Enum\n Name(fp_contract_mode) Type(enum fp_contract_mode) UnknownError(unknown floating point contraction style %qs)\n@@ -1528,7 +1528,7 @@ Perform conversion of conditional jumps to conditional execution.\n \n fstack-reuse=\n Common Joined RejectNegative Enum(stack_reuse_level) Var(flag_stack_reuse) Init(SR_ALL) Optimization\n--fstack-reuse=[all|named_vars|none] Set stack reuse level for local variables.\n+-fstack-reuse=[all|named_vars|none]\tSet stack reuse level for local variables.\n \n Enum\n Name(stack_reuse_level) Type(enum stack_reuse_level) UnknownError(unknown Stack Reuse Level %qs)\n@@ -1661,7 +1661,7 @@ Perform IPA Value Range Propagation.\n \n fira-algorithm=\n Common Joined RejectNegative Enum(ira_algorithm) Var(flag_ira_algorithm) Init(IRA_ALGORITHM_CB) Optimization\n--fira-algorithm=[CB|priority] Set the used IRA algorithm.\n+-fira-algorithm=[CB|priority]\tSet the used IRA algorithm.\n \n Enum\n Name(ira_algorithm) Type(enum ira_algorithm) UnknownError(unknown IRA algorithm %qs)\n@@ -1674,7 +1674,7 @@ Enum(ira_algorithm) String(priority) Value(IRA_ALGORITHM_PRIORITY)\n \n fira-region=\n Common Joined RejectNegative Enum(ira_region) Var(flag_ira_region) Init(IRA_REGION_AUTODETECT) Optimization\n--fira-region=[one|all|mixed] Set regions for IRA.\n+-fira-region=[one|all|mixed]\tSet regions for IRA.\n \n Enum\n Name(ira_region) Type(enum ira_region) UnknownError(unknown IRA region %qs)\n@@ -2073,7 +2073,7 @@ Reorder basic blocks to improve code placement.\n \n freorder-blocks-algorithm=\n Common Joined RejectNegative Enum(reorder_blocks_algorithm) Var(flag_reorder_blocks_algorithm) Init(REORDER_BLOCKS_ALGORITHM_SIMPLE) Optimization\n--freorder-blocks-algorithm=[simple|stc] Set the used basic block reordering algorithm.\n+-freorder-blocks-algorithm=[simple|stc]\tSet the used basic block reordering algorithm.\n \n Enum\n Name(reorder_blocks_algorithm) Type(enum reorder_blocks_algorithm) UnknownError(unknown basic block reordering algorithm %qs)\n@@ -2691,10 +2691,11 @@ Enable basic block vectorization (SLP) on trees.\n fvect-cost-model=\n Common Joined RejectNegative Enum(vect_cost_model) Var(flag_vect_cost_model) Init(VECT_COST_MODEL_DEFAULT) Optimization\n Specifies the cost model for vectorization.\n+-fvect-cost-model=[unlimited|dynamic|cheap]\tSpecifies the cost model for vectorization.\n \n fsimd-cost-model=\n Common Joined RejectNegative Enum(vect_cost_model) Var(flag_simd_cost_model) Init(VECT_COST_MODEL_UNLIMITED) Optimization\n-Specifies the vectorization cost model for code marked with a simd directive.\n+-fsimd-cost-model=[unlimited|dynamic|cheap]\tSpecifies the vectorization cost model for code marked with a simd directive.\n \n Enum\n Name(vect_cost_model) Type(enum vect_cost_model) UnknownError(unknown vectorizer cost model %qs)"}]}