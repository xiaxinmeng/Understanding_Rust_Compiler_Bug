{"sha": "c0bca7e18124cf5b3097f1422d12c5f9f01e3344", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzBiY2E3ZTE4MTI0Y2Y1YjMwOTdmMTQyMmQxMmM1ZjlmMDFlMzM0NA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2007-02-21T22:58:44Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2007-02-21T22:58:44Z"}, "message": "re PR ada/18819 (ACATS cdd2a02 fail at runtime)\n\n\tPR ada/18819\n\t* sem_ch3.adb (Create_Constrained_Components): for a subtype of an\n\tuntagged derived type, add hidden components to keep discriminant\n\tlayout consistent, when a given discriminant of the derived type\n\tconstraints several discriminants of the parent type.\n\nFrom-SVN: r122208", "tree": {"sha": "e841e671eb44336be52eec36eb603571bee1fe3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e841e671eb44336be52eec36eb603571bee1fe3b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c0bca7e18124cf5b3097f1422d12c5f9f01e3344", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0bca7e18124cf5b3097f1422d12c5f9f01e3344", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0bca7e18124cf5b3097f1422d12c5f9f01e3344", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0bca7e18124cf5b3097f1422d12c5f9f01e3344/comments", "author": null, "committer": null, "parents": [{"sha": "410c3010d475d6fb63d329dfc3e2b3e77101c113", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/410c3010d475d6fb63d329dfc3e2b3e77101c113", "html_url": "https://github.com/Rust-GCC/gccrs/commit/410c3010d475d6fb63d329dfc3e2b3e77101c113"}], "stats": {"total": 141, "additions": 135, "deletions": 6}, "files": [{"sha": "6b7cc450e3877ce638b49f31d816c624b707fd6f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0bca7e18124cf5b3097f1422d12c5f9f01e3344/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0bca7e18124cf5b3097f1422d12c5f9f01e3344/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c0bca7e18124cf5b3097f1422d12c5f9f01e3344", "patch": "@@ -1,3 +1,11 @@\n+2007-02-21  Ed Schonberg  <schonberg@adacore.com>\n+\n+\tPR ada/18819\n+\t* sem_ch3.adb (Create_Constrained_Components): for a subtype of an\n+\tuntagged derived type, add hidden components to keep discriminant\n+\tlayout consistent, when a given discriminant of the derived type\n+\tconstraints several discriminants of the parent type.\n+\n 2007-02-16  Eric Botcazou  <ebotcazou@adacore.com>\n             Sandra Loosemore  <sandra@codesourcery.com>\n "}, {"sha": "29efc4d9512330fcff204fa97e88c5fa0ec32946", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 91, "deletions": 6, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0bca7e18124cf5b3097f1422d12c5f9f01e3344/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0bca7e18124cf5b3097f1422d12c5f9f01e3344/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=c0bca7e18124cf5b3097f1422d12c5f9f01e3344", "patch": "@@ -9835,6 +9835,18 @@ package body Sem_Ch3 is\n          New_Compon : constant Entity_Id := New_Copy (Old_Compon);\n \n       begin\n+         if Ekind (Old_Compon) = E_Discriminant\n+           and then Is_Completely_Hidden (Old_Compon)\n+         then\n+\n+            --  This is a shadow discriminant created for a discriminant of\n+            --  the parent type that is one of several renamed by the same\n+            --  new discriminant. Give the shadow discriminant an internal\n+            --  name that cannot conflict with that of visible components.\n+\n+            Set_Chars (New_Compon, New_Internal_Name ('C'));\n+         end if;\n+\n          --  Set the parent so we have a proper link for freezing etc. This is\n          --  not a real parent pointer, since of course our parent does not own\n          --  up to us and reference us, we are an illegitimate child of the\n@@ -9915,12 +9927,85 @@ package body Sem_Ch3 is\n \n       --  Inherit the discriminants of the parent type\n \n-      Old_C := First_Discriminant (Typ);\n-      while Present (Old_C) loop\n-         New_C := Create_Component (Old_C);\n-         Set_Is_Public (New_C, Is_Public (Subt));\n-         Next_Discriminant (Old_C);\n-      end loop;\n+      Add_Discriminants : declare\n+         Num_Disc : Int;\n+         Num_Gird : Int;\n+\n+      begin\n+         Num_Disc := 0;\n+         Old_C := First_Discriminant (Typ);\n+\n+         while Present (Old_C) loop\n+            Num_Disc := Num_Disc + 1;\n+            New_C := Create_Component (Old_C);\n+            Set_Is_Public (New_C, Is_Public (Subt));\n+            Next_Discriminant (Old_C);\n+         end loop;\n+\n+         --  For an untagged derived subtype, the number of discriminants may\n+         --  be smaller than the number of inherited discriminants, because\n+         --  several of them may be renamed by a single new discriminant.\n+         --  In this case, add the hidden discriminants back into the subtype,\n+         --  because otherwise the size of the subtype is computed incorrectly\n+         --  in GCC 4.1.\n+\n+         Num_Gird := 0;\n+\n+         if Is_Derived_Type (Typ)\n+           and then not Is_Tagged_Type (Typ)\n+         then\n+            Old_C := First_Stored_Discriminant (Typ);\n+\n+            while Present (Old_C) loop\n+               Num_Gird := Num_Gird + 1;\n+               Next_Stored_Discriminant (Old_C);\n+            end loop;\n+         end if;\n+\n+         if Num_Gird > Num_Disc then\n+\n+            --  Find out multiple uses of new discriminants, and add hidden\n+            --  components for the extra renamed discriminants. We recognize\n+            --  multiple uses through the Corresponding_Discriminant of a\n+            --  new discriminant: if it constrains several old discriminants,\n+            --  this field points to the last one in the parent type. The\n+            --  stored discriminants of the derived type have the same name\n+            --  as those of the parent.\n+\n+            declare\n+               Constr    : Elmt_Id;\n+               New_Discr : Entity_Id;\n+               Old_Discr : Entity_Id;\n+\n+            begin\n+               Constr    := First_Elmt (Stored_Constraint (Typ));\n+               Old_Discr := First_Stored_Discriminant (Typ);\n+\n+               while Present (Constr) loop\n+                  if Is_Entity_Name (Node (Constr))\n+                    and then Ekind (Entity (Node (Constr))) = E_Discriminant\n+                  then\n+                     New_Discr := Entity (Node (Constr));\n+\n+                     if Chars (Corresponding_Discriminant (New_Discr))\n+                         /= Chars (Old_Discr)\n+                     then\n+\n+                        --  The new discriminant has been used to rename\n+                        --  a subsequent old discriminant. Introduce a shadow\n+                        --  component for the current old discriminant.\n+\n+                        New_C := Create_Component (Old_Discr);\n+                        Set_Original_Record_Component  (New_C, Old_Discr);\n+                     end if;\n+                  end if;\n+\n+                  Next_Elmt (Constr);\n+                  Next_Stored_Discriminant (Old_Discr);\n+               end loop;\n+            end;\n+         end if;\n+      end Add_Discriminants;\n \n       if Is_Static\n         and then Is_Variant_Record (Typ)"}, {"sha": "acf266dd8d34d9a8f57509e64df385a4522fa716", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0bca7e18124cf5b3097f1422d12c5f9f01e3344/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0bca7e18124cf5b3097f1422d12c5f9f01e3344/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c0bca7e18124cf5b3097f1422d12c5f9f01e3344", "patch": "@@ -1,3 +1,7 @@\n+2007-02-21  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/derived_aggregate.adb: New test.\n+\n 2007-02-21  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* gcc.dg/torture/builtin-ldexp-1.c: Use -fno-finite-math-only on"}, {"sha": "29dad78749354ba03f397a3c80bcd7433f6353da", "filename": "gcc/testsuite/gnat.dg/derived_aggregate.adb", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0bca7e18124cf5b3097f1422d12c5f9f01e3344/gcc%2Ftestsuite%2Fgnat.dg%2Fderived_aggregate.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0bca7e18124cf5b3097f1422d12c5f9f01e3344/gcc%2Ftestsuite%2Fgnat.dg%2Fderived_aggregate.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fderived_aggregate.adb?ref=c0bca7e18124cf5b3097f1422d12c5f9f01e3344", "patch": "@@ -0,0 +1,32 @@\n+-- { dg-do run }\n+-- { dg-options \"-O2\" }\n+\n+procedure Derived_Aggregate is\n+  type Int is range 1 .. 10;\n+  type Str is array (Int range <>) of Character;\n+\n+  type Parent (D1, D2 : Int; B : Boolean) is\n+    record\n+      S : Str (D1 .. D2);\n+      case B is\n+        when False => C1 : Integer;\n+        when True =>  C2 : Float;\n+      end case;\n+    end record;\n+\n+  for Parent'Alignment use 8;\n+\n+  type Derived (D : Int) is new Parent (D1 => D, D2 => D, B => False);\n+\n+  function Ident (I : Integer) return integer is\n+  begin\n+     return I;\n+  end;\n+\n+  Y : Derived := (D => 7, S => \"b\", C1 => Ident (32));\n+\n+begin\n+  if Parent(Y).D1 /= 7 then\n+    raise Program_Error;\n+  end if;\n+end;"}]}