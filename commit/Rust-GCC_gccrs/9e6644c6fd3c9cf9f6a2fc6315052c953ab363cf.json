{"sha": "9e6644c6fd3c9cf9f6a2fc6315052c953ab363cf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWU2NjQ0YzZmZDNjOWNmOWY2YTJmYzYzMTUwNTJjOTUzYWIzNjNjZg==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2019-02-21T18:01:41Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2019-02-21T18:01:41Z"}, "message": "re PR fortran/86119 (Intrinsic len has wrong type if used within select type for a class(*) string)\n\n2019-02-21  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n    PR fortran/86119\n    * class.c (gfc_get_len_component): Add argument k for kind.\n    If the kind of the resulting expression is not equal to k,\n    convert it.\n    * gfortran.h (gfc_len_component): Adjust prototype.\n    * simplify.c (gfc_simplify_len): Pass kind to\n    gfc_get_len_component.\n\n2019-02-21  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n    PR fortran/86119\n    * gfortran.dg/warn_conversion_11.f90: New test.\n\nFrom-SVN: r269070", "tree": {"sha": "3de186d92dc63e6ad443f16ca94c716d68fc4a25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3de186d92dc63e6ad443f16ca94c716d68fc4a25"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e6644c6fd3c9cf9f6a2fc6315052c953ab363cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e6644c6fd3c9cf9f6a2fc6315052c953ab363cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e6644c6fd3c9cf9f6a2fc6315052c953ab363cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e6644c6fd3c9cf9f6a2fc6315052c953ab363cf/comments", "author": null, "committer": null, "parents": [{"sha": "eb74a883e812fc1a05fbf9cfa572043c4ee5af39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb74a883e812fc1a05fbf9cfa572043c4ee5af39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb74a883e812fc1a05fbf9cfa572043c4ee5af39"}], "stats": {"total": 47, "additions": 44, "deletions": 3}, "files": [{"sha": "f8df63db99b50a0de6999ad4c9355eda936c0cd2", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e6644c6fd3c9cf9f6a2fc6315052c953ab363cf/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e6644c6fd3c9cf9f6a2fc6315052c953ab363cf/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=9e6644c6fd3c9cf9f6a2fc6315052c953ab363cf", "patch": "@@ -1,3 +1,13 @@\n+2019-02-21  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/86119\n+\t* class.c (gfc_get_len_component): Add argument k for kind.\n+\tIf the kind of the resulting expression is not equal to k,\n+\tconvert it.\n+\t* gfortran.h (gfc_len_component): Adjust prototype.\n+\t* simplify.c (gfc_simplify_len): Pass kind to\n+\tgfc_get_len_component.\n+\n 2019-02-20  Martin Liska  <mliska@suse.cz>\n \n \t* gfortran.texi: Change singular to plural."}, {"sha": "bcbe6318a4e9447c10433aab506e1af54d2d3813", "filename": "gcc/fortran/class.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e6644c6fd3c9cf9f6a2fc6315052c953ab363cf/gcc%2Ffortran%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e6644c6fd3c9cf9f6a2fc6315052c953ab363cf/gcc%2Ffortran%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fclass.c?ref=9e6644c6fd3c9cf9f6a2fc6315052c953ab363cf", "patch": "@@ -565,7 +565,7 @@ gfc_intrinsic_hash_value (gfc_typespec *ts)\n    ref to the _len component.  */\n \n gfc_expr *\n-gfc_get_len_component (gfc_expr *e)\n+gfc_get_len_component (gfc_expr *e, int k)\n {\n   gfc_expr *ptr;\n   gfc_ref *ref, **last;\n@@ -590,6 +590,14 @@ gfc_get_len_component (gfc_expr *e)\n     }\n   /* And replace if with a ref to the _len component.  */\n   gfc_add_len_component (ptr);\n+  if (k != ptr->ts.kind)\n+    {\n+      gfc_typespec ts;\n+      gfc_clear_ts (&ts);\n+      ts.type = BT_INTEGER;\n+      ts.kind = k;\n+      gfc_convert_type_warn (ptr, &ts, 2, 0);\n+    }\n   return ptr;\n }\n "}, {"sha": "6c4e839c489c47a16f08fdac2e14bdff05a08e95", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e6644c6fd3c9cf9f6a2fc6315052c953ab363cf/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e6644c6fd3c9cf9f6a2fc6315052c953ab363cf/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=9e6644c6fd3c9cf9f6a2fc6315052c953ab363cf", "patch": "@@ -3479,7 +3479,7 @@ bool gfc_is_class_scalar_expr (gfc_expr *);\n bool gfc_is_class_container_ref (gfc_expr *e);\n gfc_expr *gfc_class_initializer (gfc_typespec *, gfc_expr *);\n unsigned int gfc_hash_value (gfc_symbol *);\n-gfc_expr *gfc_get_len_component (gfc_expr *e);\n+gfc_expr *gfc_get_len_component (gfc_expr *e, int);\n bool gfc_build_class_symbol (gfc_typespec *, symbol_attribute *,\n \t\t\t     gfc_array_spec **);\n gfc_symbol *gfc_find_derived_vtab (gfc_symbol *);"}, {"sha": "fa6396bee69a0505351f317fa9f2310890499892", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e6644c6fd3c9cf9f6a2fc6315052c953ab363cf/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e6644c6fd3c9cf9f6a2fc6315052c953ab363cf/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=9e6644c6fd3c9cf9f6a2fc6315052c953ab363cf", "patch": "@@ -4474,7 +4474,7 @@ gfc_simplify_len (gfc_expr *e, gfc_expr *kind)\n     /* The expression in assoc->target points to a ref to the _data component\n        of the unlimited polymorphic entity.  To get the _len component the last\n        _data ref needs to be stripped and a ref to the _len component added.  */\n-    return gfc_get_len_component (e->symtree->n.sym->assoc->target);\n+    return gfc_get_len_component (e->symtree->n.sym->assoc->target, k);\n   else\n     return NULL;\n }"}, {"sha": "e53731ec08c3b177085ae11b70a524ff81f1f24a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e6644c6fd3c9cf9f6a2fc6315052c953ab363cf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e6644c6fd3c9cf9f6a2fc6315052c953ab363cf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9e6644c6fd3c9cf9f6a2fc6315052c953ab363cf", "patch": "@@ -1,3 +1,8 @@\n+2019-02-21  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/86119\n+\t* gfortran.dg/warn_conversion_11.f90: New test.\n+\n 2019-02-21  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/87412"}, {"sha": "3393e07d31e6978a2d784a51387930344da500ad", "filename": "gcc/testsuite/gfortran.dg/warn_conversion_11.f90", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e6644c6fd3c9cf9f6a2fc6315052c953ab363cf/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarn_conversion_11.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e6644c6fd3c9cf9f6a2fc6315052c953ab363cf/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarn_conversion_11.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarn_conversion_11.f90?ref=9e6644c6fd3c9cf9f6a2fc6315052c953ab363cf", "patch": "@@ -0,0 +1,18 @@\n+! { dg-do compile }\n+! { dg-options \"-Wconversion\" }\n+! PR 86119 - this used to warn.\n+program proglen\n+\n+implicit none\n+\n+   class(*), allocatable :: s\n+   integer :: l2\n+\n+   allocate(s, source = '123  ')\n+\n+   select type(s)\n+   type is (character(len=*))\n+      l2 = len(s)\n+   end select\n+\n+end program proglen"}]}