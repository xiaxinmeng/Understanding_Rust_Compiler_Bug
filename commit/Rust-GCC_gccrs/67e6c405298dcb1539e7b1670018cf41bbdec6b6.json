{"sha": "67e6c405298dcb1539e7b1670018cf41bbdec6b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjdlNmM0MDUyOThkY2IxNTM5ZTdiMTY3MDAxOGNmNDFiYmRlYzZiNg==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.vnet.ibm.com", "date": "2015-04-17T22:05:12Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2015-04-17T22:05:12Z"}, "message": "re PR target/65787 (Miscompile due to bad vector swap optimization for little endian)\n\n[gcc]\n\n2015-04-17  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\tPR target/65787\n\t* config/rs6000/rs6000.c (rtx_is_swappable_p): Ensure that a\n\tsubsequent SH_NONE operand does not overwrite an existing *special\n\tvalue.\n\t(adjust_extract): Handle case where a vec_extract operation is\n\twrapped in a PARALLEL.\n\n[gcc/testsuite]\n\n2015-04-17  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\tPR target/65787\n\t* gcc.target/powerpc/pr65787.c: New.\n\nFrom-SVN: r222205", "tree": {"sha": "7f4f848d7e27ca403568e9bd53c5e2b11dc77fc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f4f848d7e27ca403568e9bd53c5e2b11dc77fc7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/67e6c405298dcb1539e7b1670018cf41bbdec6b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67e6c405298dcb1539e7b1670018cf41bbdec6b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67e6c405298dcb1539e7b1670018cf41bbdec6b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67e6c405298dcb1539e7b1670018cf41bbdec6b6/comments", "author": {"login": "wschmidt-ibm", "id": 5520937, "node_id": "MDQ6VXNlcjU1MjA5Mzc=", "avatar_url": "https://avatars.githubusercontent.com/u/5520937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wschmidt-ibm", "html_url": "https://github.com/wschmidt-ibm", "followers_url": "https://api.github.com/users/wschmidt-ibm/followers", "following_url": "https://api.github.com/users/wschmidt-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/wschmidt-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/wschmidt-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wschmidt-ibm/subscriptions", "organizations_url": "https://api.github.com/users/wschmidt-ibm/orgs", "repos_url": "https://api.github.com/users/wschmidt-ibm/repos", "events_url": "https://api.github.com/users/wschmidt-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/wschmidt-ibm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "46f120ca7bc8b4a49c0d5a596b85aeca4a254698", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46f120ca7bc8b4a49c0d5a596b85aeca4a254698", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46f120ca7bc8b4a49c0d5a596b85aeca4a254698"}], "stats": {"total": 50, "additions": 45, "deletions": 5}, "files": [{"sha": "5da0cd2230d24bd6f5b992bae6905d9122401930", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67e6c405298dcb1539e7b1670018cf41bbdec6b6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67e6c405298dcb1539e7b1670018cf41bbdec6b6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=67e6c405298dcb1539e7b1670018cf41bbdec6b6", "patch": "@@ -1,3 +1,12 @@\n+2015-04-17  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\tPR target/65787\n+\t* config/rs6000/rs6000.c (rtx_is_swappable_p): Ensure that a\n+\tsubsequent SH_NONE operand does not overwrite an existing *special\n+\tvalue.\n+\t(adjust_extract): Handle case where a vec_extract operation is\n+\twrapped in a PARALLEL.\n+\n 2015-04-17  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/65780"}, {"sha": "10aa40b3d8b7aa825e77d5be7c9381f6620446f5", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67e6c405298dcb1539e7b1670018cf41bbdec6b6/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67e6c405298dcb1539e7b1670018cf41bbdec6b6/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=67e6c405298dcb1539e7b1670018cf41bbdec6b6", "patch": "@@ -34285,10 +34285,11 @@ rtx_is_swappable_p (rtx op, unsigned int *special)\n       {\n \tunsigned int special_op = SH_NONE;\n \tok &= rtx_is_swappable_p (XEXP (op, i), &special_op);\n+\tif (special_op == SH_NONE)\n+\t  continue;\n \t/* Ensure we never have two kinds of special handling\n \t   for the same insn.  */\n-\tif (*special != SH_NONE && special_op != SH_NONE\n-\t    && *special != special_op)\n+\tif (*special != SH_NONE && *special != special_op)\n \t  return 0;\n \t*special = special_op;\n       }\n@@ -34297,10 +34298,11 @@ rtx_is_swappable_p (rtx op, unsigned int *special)\n \t{\n \t  unsigned int special_op = SH_NONE;\n \t  ok &= rtx_is_swappable_p (XVECEXP (op, i, j), &special_op);\n+\tif (special_op == SH_NONE)\n+\t  continue;\n \t  /* Ensure we never have two kinds of special handling\n \t     for the same insn.  */\n-\t  if (*special != SH_NONE && special_op != SH_NONE\n-\t      && *special != special_op)\n+\t  if (*special != SH_NONE && *special != special_op)\n \t    return 0;\n \t  *special = special_op;\n \t}\n@@ -34603,7 +34605,10 @@ permute_store (rtx_insn *insn)\n static void\n adjust_extract (rtx_insn *insn)\n {\n-  rtx src = SET_SRC (PATTERN (insn));\n+  rtx pattern = PATTERN (insn);\n+  if (GET_CODE (pattern) == PARALLEL)\n+    pattern = XVECEXP (pattern, 0, 0);\n+  rtx src = SET_SRC (pattern);\n   /* The vec_select may be wrapped in a vec_duplicate for a splat, so\n      account for that.  */\n   rtx sel = GET_CODE (src) == VEC_DUPLICATE ? XEXP (src, 0) : src;"}, {"sha": "ee4f05f685371cc2fd11bdb6b02f96480394ad48", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67e6c405298dcb1539e7b1670018cf41bbdec6b6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67e6c405298dcb1539e7b1670018cf41bbdec6b6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=67e6c405298dcb1539e7b1670018cf41bbdec6b6", "patch": "@@ -1,3 +1,8 @@\n+2015-04-17  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\tPR target/65787\n+\t* gcc.target/powerpc/pr65787.c: New.\n+\n 2015-04-17  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/65689"}, {"sha": "c819be9a70730809ed6ce7b0d29c003fa20b4b9c", "filename": "gcc/testsuite/gcc.target/powerpc/pr65787.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67e6c405298dcb1539e7b1670018cf41bbdec6b6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr65787.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67e6c405298dcb1539e7b1670018cf41bbdec6b6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr65787.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr65787.c?ref=67e6c405298dcb1539e7b1670018cf41bbdec6b6", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile { target { powerpc64le-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n+/* { dg-options \"-mcpu=power8 -O3\" } */\n+/* { dg-final { scan-assembler \"xxsldwi \\[0-9\\]*,\\[0-9\\]*,\\[0-9\\]*,3\" } } */\n+/* { dg-final { scan-assembler-not \"xxpermdi\" } } */\n+\n+/* This test verifies that a vector extract operand properly has its\n+   lane changed by the swap optimization.  Element 2 of LE corresponds\n+   to element 1 of BE.  When doublewords are swapped, this becomes\n+   element 3 of BE, so we need to shift the vector left by 3 words\n+   to be able to extract the correct value from BE element zero.  */\n+\n+typedef float  v4f32 __attribute__ ((__vector_size__ (16)));\n+\n+void foo (float);\n+extern v4f32 x, y;\n+\n+int main() {\n+  v4f32 z = x + y;\n+  foo (z[2]);\n+}"}]}