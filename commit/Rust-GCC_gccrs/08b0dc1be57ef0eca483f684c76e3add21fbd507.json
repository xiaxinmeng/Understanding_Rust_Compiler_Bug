{"sha": "08b0dc1be57ef0eca483f684c76e3add21fbd507", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDhiMGRjMWJlNTdlZjBlY2E0ODNmNjg0Yzc2ZTNhZGQyMWZiZDUwNw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-07-14T21:19:39Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-07-14T21:19:39Z"}, "message": "alpha.c (alpha_gimplify_va_arg_1): Move indirect ...\n\n        * config/alpha/alpha.c (alpha_gimplify_va_arg_1): Move indirect ...\n        (alpha_gimplify_va_arg): ... handling here.  Use pass_by_reference.\n        * config/c4x/c4x.c (c4x_gimplify_va_arg_expr): Use pass_by_reference.\n        * config/i386/i386.c (ix86_gimplify_va_arg): Likewise.\n        * config/i860/i860.c (i860_gimplify_va_arg_expr): Likewise.\n        * config/ia64/ia64.c (ia64_gimplify_va_arg): Likewise.\n        * config/rs6000/rs6000.c (rs6000_gimplify_va_arg): Likewise.\n        * config/sh/sh.c (sh_gimplify_va_arg_expr): Likewise.\n        * config/xtensa/xtensa.c (xtensa_gimplify_va_arg_expr): Likewise.\n\nFrom-SVN: r84713", "tree": {"sha": "e0d82178249e0ae888344ddf64b600801b7b9a7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e0d82178249e0ae888344ddf64b600801b7b9a7b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/08b0dc1be57ef0eca483f684c76e3add21fbd507", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08b0dc1be57ef0eca483f684c76e3add21fbd507", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08b0dc1be57ef0eca483f684c76e3add21fbd507", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08b0dc1be57ef0eca483f684c76e3add21fbd507/comments", "author": null, "committer": null, "parents": [{"sha": "2baeaa1bedcc3118a8b4879925587bca5209ec19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2baeaa1bedcc3118a8b4879925587bca5209ec19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2baeaa1bedcc3118a8b4879925587bca5209ec19"}], "stats": {"total": 121, "additions": 58, "deletions": 63}, "files": [{"sha": "7d03ff9bb8a1a69543af3e40c42c3722db5e3494", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08b0dc1be57ef0eca483f684c76e3add21fbd507/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08b0dc1be57ef0eca483f684c76e3add21fbd507/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=08b0dc1be57ef0eca483f684c76e3add21fbd507", "patch": "@@ -1,3 +1,15 @@\n+2004-07-14  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/alpha/alpha.c (alpha_gimplify_va_arg_1): Move indirect ...\n+\t(alpha_gimplify_va_arg): ... handling here.  Use pass_by_reference.\n+\t* config/c4x/c4x.c (c4x_gimplify_va_arg_expr): Use pass_by_reference.\n+\t* config/i386/i386.c (ix86_gimplify_va_arg): Likewise.\n+\t* config/i860/i860.c (i860_gimplify_va_arg_expr): Likewise.\n+\t* config/ia64/ia64.c (ia64_gimplify_va_arg): Likewise.\n+\t* config/rs6000/rs6000.c (rs6000_gimplify_va_arg): Likewise.\n+\t* config/sh/sh.c (sh_gimplify_va_arg_expr): Likewise.\n+\t* config/xtensa/xtensa.c (xtensa_gimplify_va_arg_expr): Likewise.\n+\n 2004-07-14  Mike Stump  <mrs@apple.com>\n \n \t* config/darwin.h (WINT_TYPE): Define to be int to match"}, {"sha": "e10468b8eaf8f23e219c4e13e88c0f1f3d7d8455", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08b0dc1be57ef0eca483f684c76e3add21fbd507/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08b0dc1be57ef0eca483f684c76e3add21fbd507/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=08b0dc1be57ef0eca483f684c76e3add21fbd507", "patch": "@@ -6239,7 +6239,6 @@ static tree\n alpha_gimplify_va_arg_1 (tree type, tree base, tree offset, tree *pre_p)\n {\n   tree type_size, ptr_type, addend, t, addr, internal_post;\n-  bool indirect;\n \n   /* If the type could not be passed in registers, skip the block\n      reserved for the registers.  */\n@@ -6253,15 +6252,8 @@ alpha_gimplify_va_arg_1 (tree type, tree base, tree offset, tree *pre_p)\n \n   addend = offset;\n   ptr_type = build_pointer_type (type);\n-  indirect = false;\n \n-  if (TYPE_MODE (type) == TFmode || TYPE_MODE (type) == TCmode)\n-    {\n-      type = ptr_type;\n-      ptr_type = build_pointer_type (type);\n-      indirect = true;\n-    }\n-  else if (TREE_CODE (type) == COMPLEX_TYPE)\n+  if (TREE_CODE (type) == COMPLEX_TYPE)\n     {\n       tree real_part, imag_part, real_temp;\n \n@@ -6292,8 +6284,6 @@ alpha_gimplify_va_arg_1 (tree type, tree base, tree offset, tree *pre_p)\n   /* Build the final address and force that value into a temporary.  */\n   addr = build (PLUS_EXPR, ptr_type, fold_convert (ptr_type, base),\n \t        fold_convert (ptr_type, addend));\n-  if (indirect)\n-    addr = build (INDIRECT_REF, type, addr);\n   internal_post = NULL;\n   gimplify_expr (&addr, pre_p, &internal_post, is_gimple_val, fb_rvalue);\n   append_to_statement_list (internal_post, pre_p);\n@@ -6320,6 +6310,7 @@ static tree\n alpha_gimplify_va_arg (tree valist, tree type, tree *pre_p, tree *post_p)\n {\n   tree offset_field, base_field, offset, base, t, r;\n+  bool indirect;\n \n   if (TARGET_ABI_OPEN_VMS || TARGET_ABI_UNICOSMK)\n     return std_gimplify_va_arg_expr (valist, type, pre_p, post_p);\n@@ -6339,6 +6330,10 @@ alpha_gimplify_va_arg (tree valist, tree type, tree *pre_p, tree *post_p)\n   t = fold_convert (lang_hooks.types.type_for_size (64, 0), offset_field);\n   offset = get_initialized_tmp_var (t, pre_p, NULL);\n \n+  indirect = pass_by_reference (NULL, TYPE_MODE (type), type, false);\n+  if (indirect)\n+    type = build_pointer_type (type);\n+\n   /* Find the value.  Note that this will be a stable indirection, or\n      a composite of stable indirections in the case of complex.  */\n   r = alpha_gimplify_va_arg_1 (type, base, offset, pre_p);\n@@ -6348,6 +6343,9 @@ alpha_gimplify_va_arg (tree valist, tree type, tree *pre_p, tree *post_p)\n \t     fold_convert (TREE_TYPE (offset_field), offset));\n   gimplify_and_add (t, pre_p);\n \n+  if (indirect)\n+    r = build_fold_indirect_ref (r);\n+\n   return r;\n }\n \f"}, {"sha": "4e6dd8f5484e12ca4d9f7ea151ff216266798203", "filename": "gcc/config/c4x/c4x.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08b0dc1be57ef0eca483f684c76e3add21fbd507/gcc%2Fconfig%2Fc4x%2Fc4x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08b0dc1be57ef0eca483f684c76e3add21fbd507/gcc%2Fconfig%2Fc4x%2Fc4x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.c?ref=08b0dc1be57ef0eca483f684c76e3add21fbd507", "patch": "@@ -733,12 +733,20 @@ c4x_gimplify_va_arg_expr (tree valist, tree type,\n \t\t\t  tree *post_p ATTRIBUTE_UNUSED)\n {\n   tree t;\n+  bool indirect;\n+\n+  indirect = pass_by_reference (NULL, TYPE_MODE (type), type, false);\n+  if (indirect)\n+    type = build_pointer_type (type);\n \n   t = build (PREDECREMENT_EXPR, TREE_TYPE (valist), valist,\n \t     build_int_2 (int_size_in_bytes (type), 0));\n   t = fold_convert (build_pointer_type (type), t);\n   t = build_fold_indirect_ref (t);\n \n+  if (indirect)\n+    t = build_fold_indirect_ref (t);\n+\n   return t;\n }\n "}, {"sha": "02af192d01064a5080d0675a6bbb963ebae5ba13", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08b0dc1be57ef0eca483f684c76e3add21fbd507/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08b0dc1be57ef0eca483f684c76e3add21fbd507/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=08b0dc1be57ef0eca483f684c76e3add21fbd507", "patch": "@@ -3281,14 +3281,10 @@ ix86_gimplify_va_arg (tree valist, tree type, tree *pre_p, tree *post_p)\n   ovf = build (COMPONENT_REF, TREE_TYPE (f_ovf), valist, f_ovf, NULL_TREE);\n   sav = build (COMPONENT_REF, TREE_TYPE (f_sav), valist, f_sav, NULL_TREE);\n \n+  indirect_p = pass_by_reference (NULL, TYPE_MODE (type), type, false);\n+  if (indirect_p)\n+    type = build_pointer_type (type);\n   size = int_size_in_bytes (type);\n-  if (size == -1)\n-    {\n-      /* Variable-size types are passed by reference.  */\n-      indirect_p = 1;\n-      type = build_pointer_type (type);\n-      size = int_size_in_bytes (type);\n-    }\n   rsize = (size + UNITS_PER_WORD - 1) / UNITS_PER_WORD;\n \n   container = construct_container (TYPE_MODE (type), type, 0,"}, {"sha": "d4976680997858bd0ee9f844c2d25b0e5ab2d4d6", "filename": "gcc/config/i860/i860.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08b0dc1be57ef0eca483f684c76e3add21fbd507/gcc%2Fconfig%2Fi860%2Fi860.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08b0dc1be57ef0eca483f684c76e3add21fbd507/gcc%2Fconfig%2Fi860%2Fi860.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fi860.c?ref=08b0dc1be57ef0eca483f684c76e3add21fbd507", "patch": "@@ -1932,6 +1932,7 @@ i860_gimplify_va_arg_expr (tree valist, tree type, tree *pre_p, tree *post_p)\n   tree size, t, u, addr, type_ptr;\n   tree reg, n_reg, sav_ofs, lim_reg;\n   HOST_WIDE_INT isize;\n+  bool indirect;\n \n #ifdef I860_SVR4_VA_LIST\n   f_gpr = TYPE_FIELDS (va_list_type_node);\n@@ -1950,6 +1951,9 @@ i860_gimplify_va_arg_expr (tree valist, tree type, tree *pre_p, tree *post_p)\n   mem = build (COMPONENT_REF, TREE_TYPE (f_mem), valist, f_mem, NULL_TREE);\n   sav = build (COMPONENT_REF, TREE_TYPE (f_sav), valist, f_sav, NULL_TREE);\n \n+  indirect = pass_by_reference (NULL, TYPE_MODE (type), type, false);\n+  if (indirect)\n+    type = build_pointer_type (type);\n   size = size_in_bytes (type);\n   type_ptr = build_pointer_type (type);\n \n@@ -2029,6 +2033,8 @@ i860_gimplify_va_arg_expr (tree valist, tree type, tree *pre_p, tree *post_p)\n     }\n \n   addr = fold_convert (type_ptr, addr);\n+  if (indirect)\n+    addr = build_fold_indirect_ref (addr);\n   return build_fold_indirect_ref (addr);\n }\n "}, {"sha": "86c271cee2e870b03fc60f9d0b7f43ce25cdecd2", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08b0dc1be57ef0eca483f684c76e3add21fbd507/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08b0dc1be57ef0eca483f684c76e3add21fbd507/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=08b0dc1be57ef0eca483f684c76e3add21fbd507", "patch": "@@ -3970,7 +3970,7 @@ static tree\n ia64_gimplify_va_arg (tree valist, tree type, tree *pre_p, tree *post_p)\n {\n   /* Variable sized types are passed by reference.  */\n-  if (TREE_CODE (TYPE_SIZE (type)) != INTEGER_CST)\n+  if (pass_by_reference (NULL, TYPE_MODE (type), type, false))\n     {\n       tree ptrtype = build_pointer_type (type);\n       tree addr = std_gimplify_va_arg_expr (valist, ptrtype, pre_p, post_p);"}, {"sha": "b6ee8313b14a3586b169c87e4991cdecf8707292", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 11, "deletions": 43, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08b0dc1be57ef0eca483f684c76e3add21fbd507/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08b0dc1be57ef0eca483f684c76e3add21fbd507/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=08b0dc1be57ef0eca483f684c76e3add21fbd507", "patch": "@@ -5451,29 +5451,20 @@ rs6000_gimplify_va_arg (tree valist, tree type, tree *pre_p, tree *post_p)\n {\n   tree f_gpr, f_fpr, f_res, f_ovf, f_sav;\n   tree gpr, fpr, ovf, sav, reg, t, u;\n-  int indirect_p, size, rsize, n_reg, sav_ofs, sav_scale;\n+  int size, rsize, n_reg, sav_ofs, sav_scale;\n   tree lab_false, lab_over, addr;\n   int align;\n   tree ptrtype = build_pointer_type (type);\n \n+  if (pass_by_reference (NULL, TYPE_MODE (type), type, false))\n+    {\n+      t = rs6000_gimplify_va_arg (valist, ptrtype, pre_p, post_p);\n+      return build_fold_indirect_ref (t);\n+    }\n+\n   if (DEFAULT_ABI != ABI_V4)\n     {\n-      /* Variable sized types are passed by reference, as are AltiVec\n-\t vectors when 32-bit and not using the AltiVec ABI extension.  */\n-      if (int_size_in_bytes (type) < 0\n-\t  || (TARGET_32BIT\n-\t      && !TARGET_ALTIVEC_ABI\n-\t      && ALTIVEC_VECTOR_MODE (TYPE_MODE (type))))\n-\t{\n-\t  /* Args grow upward.  */\n-\t  t = build2 (POSTINCREMENT_EXPR, TREE_TYPE (valist), valist,\n-\t\t      size_int (POINTER_SIZE / BITS_PER_UNIT));\n-\t  t = build1 (NOP_EXPR, build_pointer_type (ptrtype), t);\n-\t  t = build_fold_indirect_ref (t);\n-\t  return build_fold_indirect_ref (t);\n-\t}\n-      if (targetm.calls.split_complex_arg\n-\t  && TREE_CODE (type) == COMPLEX_TYPE)\n+      if (targetm.calls.split_complex_arg && TREE_CODE (type) == COMPLEX_TYPE)\n \t{\n \t  tree elem_type = TREE_TYPE (type);\n \t  enum machine_mode elem_mode = TYPE_MODE (elem_type);\n@@ -5517,25 +5508,10 @@ rs6000_gimplify_va_arg (tree valist, tree type, tree *pre_p, tree *post_p)\n   rsize = (size + 3) / 4;\n   align = 1;\n \n-  if (AGGREGATE_TYPE_P (type)\n-      || TYPE_MODE (type) == TFmode\n-      || (!TARGET_ALTIVEC_ABI && ALTIVEC_VECTOR_MODE (TYPE_MODE (type))))\n-    {\n-      /* Aggregates, long doubles, and AltiVec vectors are passed by\n-\t reference.  */\n-      indirect_p = 1;\n-      reg = gpr;\n-      n_reg = 1;\n-      sav_ofs = 0;\n-      sav_scale = 4;\n-      size = 4;\n-      rsize = 1;\n-    }\n-  else if (TARGET_HARD_FLOAT && TARGET_FPRS\n-\t   && (TYPE_MODE (type) == SFmode || TYPE_MODE (type) == DFmode))\n+  if (TARGET_HARD_FLOAT && TARGET_FPRS\n+      && (TYPE_MODE (type) == SFmode || TYPE_MODE (type) == DFmode))\n     {\n       /* FP args go in FP registers, if present.  */\n-      indirect_p = 0;\n       reg = fpr;\n       n_reg = 1;\n       sav_ofs = 8*4;\n@@ -5546,7 +5522,6 @@ rs6000_gimplify_va_arg (tree valist, tree type, tree *pre_p, tree *post_p)\n   else\n     {\n       /* Otherwise into GP registers.  */\n-      indirect_p = 0;\n       reg = gpr;\n       n_reg = rsize;\n       sav_ofs = 0;\n@@ -5637,14 +5612,7 @@ rs6000_gimplify_va_arg (tree valist, tree type, tree *pre_p, tree *post_p)\n       append_to_statement_list (t, pre_p);\n     }\n \n-  if (indirect_p)\n-    {\n-      addr = fold_convert (build_pointer_type (ptrtype), addr);\n-      addr = build_fold_indirect_ref (addr);\n-    }\n-  else\n-    addr = fold_convert (ptrtype, addr);\n-\n+  addr = fold_convert (ptrtype, addr);\n   return build_fold_indirect_ref (addr);\n }\n "}, {"sha": "7f99cab4ab6faf855c01dfb838a55a723ec05c2e", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08b0dc1be57ef0eca483f684c76e3add21fbd507/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08b0dc1be57ef0eca483f684c76e3add21fbd507/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=08b0dc1be57ef0eca483f684c76e3add21fbd507", "patch": "@@ -6322,7 +6322,7 @@ sh_gimplify_va_arg_expr (tree valist, tree type, tree *pre_p,\n   HOST_WIDE_INT size, rsize;\n   tree tmp, pptr_type_node;\n   tree addr, lab_over, result = NULL;\n-  int pass_by_ref = targetm.calls.must_pass_in_stack (TYPE_MODE (type), type);\n+  int pass_by_ref = pass_by_reference (NULL, TYPE_MODE (type), type, false);\n \n   if (pass_by_ref)\n     type = build_pointer_type (type);"}, {"sha": "29e72d4e341413f4b85217fee2459855bfe0fb0b", "filename": "gcc/config/xtensa/xtensa.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08b0dc1be57ef0eca483f684c76e3add21fbd507/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08b0dc1be57ef0eca483f684c76e3add21fbd507/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.c?ref=08b0dc1be57ef0eca483f684c76e3add21fbd507", "patch": "@@ -2479,6 +2479,11 @@ xtensa_gimplify_va_arg_expr (tree valist, tree type, tree *pre_p,\n   tree f_ndx, ndx;\n   tree type_size, array, orig_ndx, addr, size, va_size, t;\n   tree lab_false, lab_over, lab_false2;\n+  bool indirect;\n+\n+  indirect = pass_by_reference (NULL, TYPE_MODE (type), type, false);\n+  if (indirect)\n+    type = build_pointer_type (type);\n \n   /* Handle complex values as separate real and imaginary parts.  */\n   if (TREE_CODE (type) == COMPLEX_TYPE)\n@@ -2637,6 +2642,8 @@ xtensa_gimplify_va_arg_expr (tree valist, tree type, tree *pre_p,\n   addr = build (MINUS_EXPR, ptr_type_node, addr, t);\n \n   addr = fold_convert (build_pointer_type (type), addr);\n+  if (indirect)\n+    addr = build_fold_indirect_ref (addr);\n   return build_fold_indirect_ref (addr);\n }\n "}]}