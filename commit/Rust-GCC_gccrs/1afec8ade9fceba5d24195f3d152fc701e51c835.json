{"sha": "1afec8ade9fceba5d24195f3d152fc701e51c835", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWFmZWM4YWRlOWZjZWJhNWQyNDE5NWYzZDE1MmZjNzAxZTUxYzgzNQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-10-16T22:44:39Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-10-16T22:44:39Z"}, "message": "alpha.c (current_file_function_operand): Don't fail for profiling.\n\n        * alpha.c (current_file_function_operand): Don't fail for profiling.\n        (direct_call_operand): New.\n        * alpha-protos.h: Declare it.\n        * alpha.h (EXTRA_CONSTRAINT): Use it.\n        (PREDICATE_CODES): Add it.\n        (ASM_OUTPUT_MI_THUNK): Remove.\n        * alpha32.h (ASM_OUTPUT_MI_THUNK): Remove.\n        * alpha.md (sibcall_osf_1, sibcall_value_osf_1): Add 's' alternative.\n\nFrom-SVN: r46299", "tree": {"sha": "39d5d2e0186d9240a3eb34846af9b0db26ec0467", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39d5d2e0186d9240a3eb34846af9b0db26ec0467"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1afec8ade9fceba5d24195f3d152fc701e51c835", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1afec8ade9fceba5d24195f3d152fc701e51c835", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1afec8ade9fceba5d24195f3d152fc701e51c835", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1afec8ade9fceba5d24195f3d152fc701e51c835/comments", "author": null, "committer": null, "parents": [{"sha": "087772344ccd872579631089bde62255887dfdf4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/087772344ccd872579631089bde62255887dfdf4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/087772344ccd872579631089bde62255887dfdf4"}], "stats": {"total": 135, "additions": 59, "deletions": 76}, "files": [{"sha": "f645485692e0f3a8d43f83fa1879cb3a460291ef", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1afec8ade9fceba5d24195f3d152fc701e51c835/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1afec8ade9fceba5d24195f3d152fc701e51c835/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1afec8ade9fceba5d24195f3d152fc701e51c835", "patch": "@@ -1,3 +1,14 @@\n+2001-10-16  Richard Henderson  <rth@redhat.com>\n+\n+\t* alpha.c (current_file_function_operand): Don't fail for profiling.\n+\t(direct_call_operand): New.\n+\t* alpha-protos.h: Declare it.\n+\t* alpha.h (EXTRA_CONSTRAINT): Use it.\n+\t(PREDICATE_CODES): Add it.\n+\t(ASM_OUTPUT_MI_THUNK): Remove.\n+\t* alpha32.h (ASM_OUTPUT_MI_THUNK): Remove.\n+\t* alpha.md (sibcall_osf_1, sibcall_value_osf_1): Add 's' alternative.\n+\n 2001-10-16  Krister Walfridsson  <cato@df.lth.se>\n  \n \t* config/i386/netbsd-elf.h (ASM_OUTPUT_ADDR_DIFF_ELT): Define."}, {"sha": "e7da7d2e9805aba1818689da7c507a3346359d0b", "filename": "gcc/config/alpha/alpha-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1afec8ade9fceba5d24195f3d152fc701e51c835/gcc%2Fconfig%2Falpha%2Falpha-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1afec8ade9fceba5d24195f3d152fc701e51c835/gcc%2Fconfig%2Falpha%2Falpha-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha-protos.h?ref=1afec8ade9fceba5d24195f3d152fc701e51c835", "patch": "@@ -56,6 +56,7 @@ extern int some_operand PARAMS ((rtx, enum machine_mode));\n extern int some_ni_operand PARAMS ((rtx, enum machine_mode));\n extern int input_operand PARAMS ((rtx, enum machine_mode));\n extern int current_file_function_operand PARAMS ((rtx, enum machine_mode));\n+extern int direct_call_operand PARAMS ((rtx, enum machine_mode));\n extern int local_symbolic_operand PARAMS ((rtx, enum machine_mode));\n extern int small_symbolic_operand PARAMS ((rtx, enum machine_mode));\n extern int global_symbolic_operand PARAMS ((rtx, enum machine_mode));"}, {"sha": "48e157e2b088b3928b84b1adbc77a9166d229a96", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 29, "deletions": 4, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1afec8ade9fceba5d24195f3d152fc701e51c835/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1afec8ade9fceba5d24195f3d152fc701e51c835/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=1afec8ade9fceba5d24195f3d152fc701e51c835", "patch": "@@ -839,10 +839,35 @@ current_file_function_operand (op, mode)\n      rtx op;\n      enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n-  return (GET_CODE (op) == SYMBOL_REF\n-\t  && ! profile_flag && ! profile_block_flag\n-\t  && (SYMBOL_REF_FLAG (op)\n-\t      || op == XEXP (DECL_RTL (current_function_decl), 0)));\n+  if (GET_CODE (op) != SYMBOL_REF)\n+    return 0;\n+\n+  if (! SYMBOL_REF_FLAG (op)\n+      && op != XEXP (DECL_RTL (current_function_decl), 0))\n+    return 0;\n+\n+  return 1;\n+}\n+\n+/* Return 1 if OP is a SYMBOL_REF for which we can make a call via bsr.  */\n+\n+int\n+direct_call_operand (op, mode)\n+     rtx op;\n+     enum machine_mode mode;\n+{\n+  /* Must be defined in this file.  */\n+  if (! current_file_function_operand (op, mode))\n+    return 0;\n+\n+  /* If profiling is implemented via linker tricks, we can't jump\n+     to the nogp alternate entry point.  */\n+  /* ??? TARGET_PROFILING_NEEDS_GP isn't really the right test,\n+     but is approximately correct for the OSF ABIs.  Don't know\n+     what to do for VMS, NT, or UMK.  */\n+  if (! TARGET_PROFILING_NEEDS_GP\n+      && ! profile_flag && ! profile_block_flag)\n+    return 0;\n }\n \n /* Return true if OP is a LABEL_REF, or SYMBOL_REF or CONST referencing"}, {"sha": "d8e4b04a520c7296b015d80ee107eff1a8300cec", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 2, "deletions": 39, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1afec8ade9fceba5d24195f3d152fc701e51c835/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1afec8ade9fceba5d24195f3d152fc701e51c835/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=1afec8ade9fceba5d24195f3d152fc701e51c835", "patch": "@@ -824,7 +824,7 @@ enum reg_class { NO_REGS, PV_REG, GENERAL_REGS, FLOAT_REGS, ALL_REGS,\n \n #define EXTRA_CONSTRAINT(OP, C)\t\t\t\t\\\n   ((C) == 'Q' ? normal_memory_operand (OP, VOIDmode)\t\t\t\\\n-   : (C) == 'R' ? current_file_function_operand (OP, Pmode)\t\t\\\n+   : (C) == 'R' ? direct_call_operand (OP, Pmode)\t\t\\\n    : (C) == 'S' ? (GET_CODE (OP) == CONST_INT\t\t\t\t\\\n \t\t   && (unsigned HOST_WIDE_INT) INTVAL (OP) < 64)\t\\\n    : (C) == 'T' ? GET_CODE (OP) == HIGH\t\t\t\t\t\\\n@@ -2093,44 +2093,6 @@ do {\t\t\t\t\t\t\\\n #define ASM_FORMAT_PRIVATE_NAME(OUTPUT, NAME, LABELNO)\t\\\n ( (OUTPUT) = (char *) alloca (strlen ((NAME)) + 10),\t\\\n   sprintf ((OUTPUT), \"%s.%d\", (NAME), (LABELNO)))\n-\n-/* Output code to add DELTA to the first argument, and then jump to FUNCTION.\n-   Used for C++ multiple inheritance.  */\n-/* ??? This is only used with the v2 ABI, and alpha.c makes assumptions\n-   about current_function_is_thunk that are not valid with the v3 ABI.  */\n-#if 0\n-#define ASM_OUTPUT_MI_THUNK(FILE, THUNK_FNDECL, DELTA, FUNCTION)\t\\\n-do {\t\t\t\t\t\t\t\t\t\\\n-  const char *fn_name = XSTR (XEXP (DECL_RTL (FUNCTION), 0), 0);\t\\\n-  int reg;\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  if (TARGET_ABI_OSF)\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"\\tldgp $29,0($27)\\n\");\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  /* Mark end of prologue.  */\t\t\t\t\t\t\\\n-  output_end_prologue (FILE);\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  /* Rely on the assembler to macro expand a large delta.  */\t\t\\\n-  fprintf (FILE, \"\\t.set at\\n\");\t\t\t\t\t\\\n-  reg = aggregate_value_p (TREE_TYPE (TREE_TYPE (FUNCTION))) ? 17 : 16;\t\\\n-  fprintf (FILE, \"\\tlda $%d,%ld($%d)\\n\", reg, (long)(DELTA), reg);\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  if (current_file_function_operand (XEXP (DECL_RTL (FUNCTION), 0),\t\\\n-\t\t\t\t     VOIDmode))\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (FILE, \"\\tbr $31,$\");\t\t\t\t\t\\\n-      assemble_name (FILE, fn_name);\t\t\t\t\t\\\n-      fprintf (FILE, \"..ng\\n\");\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  else\t\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (FILE, \"\\tjmp $31,\");\t\t\t\t\t\\\n-      assemble_name (FILE, fn_name);\t\t\t\t\t\\\n-      fputc ('\\n', FILE);\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  fprintf (FILE, \"\\t.set noat\\n\");\t\t\t\t\t\\\n-} while (0)\n-#endif\n \f\n \n /* Print operand X (an rtx) in assembler syntax to file FILE.\n@@ -2188,6 +2150,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n   {\"divmod_operator\", {DIV, MOD, UDIV, UMOD}},\t\t\t\t\\\n   {\"fp0_operand\", {CONST_DOUBLE}},\t\t\t\t\t\\\n   {\"current_file_function_operand\", {SYMBOL_REF}},\t\t\t\\\n+  {\"direct_call_operand\", {SYMBOL_REF}},\t\t\t\t\\\n   {\"local_symbolic_operand\", {SYMBOL_REF, CONST, LABEL_REF}},\t\t\\\n   {\"small_symbolic_operand\", {SYMBOL_REF, CONST}},\t\t\t\\\n   {\"global_symbolic_operand\", {SYMBOL_REF, CONST}},\t\t\t\\"}, {"sha": "4eecb1d939f96b5466b429b1cc931a30e532e858", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1afec8ade9fceba5d24195f3d152fc701e51c835/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1afec8ade9fceba5d24195f3d152fc701e51c835/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=1afec8ade9fceba5d24195f3d152fc701e51c835", "patch": "@@ -4848,13 +4848,18 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi\"\n   [(set_attr \"type\" \"jsr\")\n    (set_attr \"length\" \"12,*,16\")])\n \n+;; Need 's' alternative for OSF/1, which implements profiling\n+;; via linker tricks.\n (define_insn \"*sibcall_osf_1\"\n-  [(call (mem:DI (match_operand:DI 0 \"current_file_function_operand\" \"R\"))\n+  [(call (mem:DI (match_operand:DI 0 \"current_file_function_operand\" \"R,s\"))\n \t (match_operand 1 \"\" \"\"))\n    (use (reg:DI 29))]\n   \"TARGET_ABI_OSF\"\n-  \"br $31,$%0..ng\"\n-  [(set_attr \"type\" \"jsr\")])\n+  \"@\n+   br $31,$%0..ng\n+   jmp $31,%0\"\n+  [(set_attr \"type\" \"jsr\")\n+   (set_attr \"length\" \"*,8\")])\n \n (define_insn \"*call_nt_1\"\n   [(call (mem:DI (match_operand:DI 0 \"call_operand\" \"r,R,s\"))\n@@ -6802,14 +6807,19 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi\"\n   [(set_attr \"type\" \"jsr\")\n    (set_attr \"length\" \"12,*,16\")])\n \n+;; Need 's' alternative for OSF/1, which implements profiling\n+;; via linker tricks.\n (define_insn \"*sibcall_value_osf_1\"\n   [(set (match_operand 0 \"\" \"\")\n-\t(call (mem:DI (match_operand:DI 1 \"current_file_function_operand\" \"R\"))\n+\t(call (mem:DI (match_operand:DI 1 \"current_file_function_operand\" \"R,s\"))\n \t      (match_operand 2 \"\" \"\")))\n    (use (reg:DI 29))]\n   \"TARGET_ABI_OSF\"\n-  \"br $31,$%1..ng\"\n-  [(set_attr \"type\" \"jsr\")])\n+  \"@\n+   br $31,$%1..ng\n+   jmp $31,%1\"\n+  [(set_attr \"type\" \"jsr\")\n+   (set_attr \"length\" \"*,8\")])\n \n (define_insn \"*call_value_nt_1\"\n   [(set (match_operand 0 \"\" \"\")"}, {"sha": "bb961c2b5a558893db4812cb7d9de9423e5b5676", "filename": "gcc/config/alpha/alpha32.h", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1afec8ade9fceba5d24195f3d152fc701e51c835/gcc%2Fconfig%2Falpha%2Falpha32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1afec8ade9fceba5d24195f3d152fc701e51c835/gcc%2Fconfig%2Falpha%2Falpha32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha32.h?ref=1afec8ade9fceba5d24195f3d152fc701e51c835", "patch": "@@ -78,30 +78,3 @@ Boston, MA 02111-1307, USA.  */\n #undef INITIALIZE_TRAMPOLINE\n #define INITIALIZE_TRAMPOLINE(TRAMP, FNADDR, CXT) \\\n   alpha_initialize_trampoline (TRAMP, FNADDR, CXT, 20, 16, 12)\n-\n-/* Output code to add DELTA to the first argument, and then jump to FUNCTION.\n-   Used for C++ multiple inheritance.  */\n-/* ??? This is only used with the v2 ABI, and alpha.c makes assumptions\n-   about current_function_is_thunk that are not valid with the v3 ABI.  */\n-#if 0\n-#undef ASM_OUTPUT_MI_THUNK\n-#define ASM_OUTPUT_MI_THUNK(FILE, THUNK_FNDECL, DELTA, FUNCTION)\t\\\n-do {\t\t\t\t\t\t\t\t\t\\\n-  const char *op, *fn_name = XSTR (XEXP (DECL_RTL (FUNCTION), 0), 0);\t\\\n-  int reg;\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  /* Mark end of prologue.  */\t\t\t\t\t\t\\\n-  output_end_prologue (FILE);\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  /* Rely on the assembler to macro expand a large delta.  */\t\t\\\n-  reg = aggregate_value_p (TREE_TYPE (TREE_TYPE (FUNCTION))) ? 17 : 16; \\\n-  fprintf (FILE, \"\\tlda $%d,%ld($%d)\\n\", reg, (long)(DELTA), reg);      \\\n-\t\t\t\t\t\t\t\t\t\\\n-  op = \"jsr\";\t\t\t\t\t\t\t\t\\\n-  if (current_file_function_operand (XEXP (DECL_RTL (FUNCTION), 0)))\t\\\n-    op = \"br\";\t\t\t\t\t\t\t\t\\\n-  fprintf (FILE, \"\\t%s $31,\", op);\t\t\t\t\t\\\n-  assemble_name (FILE, fn_name);\t\t\t\t\t\\\n-  fputc ('\\n', FILE);\t\t\t\t\t\t\t\\\n-} while (0)\n-#endif"}]}