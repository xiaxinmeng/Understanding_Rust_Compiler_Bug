{"sha": "b0e84cf75a6732833bb52f6c2445ad59bf4aa9d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjBlODRjZjc1YTY3MzI4MzNiYjUyZjZjMjQ0NWFkNTliZjRhYTlkOQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-07-02T09:06:10Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-07-02T09:06:10Z"}, "message": "Reorganise machmode.h headers\n\nThis patch splits the auto-generated inline functions out of\ninsn-modes.h and puts them in a new header file, insn-modes-inline.h.\nIt also makes coretypes.h include these files directly, rather than\nindirectly via machmode.h.  This in turn allows insn-modes-inline.h\nand machmode.h to come later in the include list, after wide-int.h.\nThis is useful for later patches.\n\ninsn-modes.h itself still needs to come first, since it provides\nconfiguration information like MAX_BITSIZE_MODE_ANY_INT, which is\nused to control the size of a wide_int.\n\nThe patch also makes the generator files include machmode.h\nvia coretypes.h.  Previously they did it by more indirect means.\n\nFinally, the patch makes wide-int-print.h available via coretypes.h\ntoo.  There didn't seem to be any reason to force only the print\nroutines to be included directly, and it would be painful to extend\nthat approach to the SVE patches.\n\n\n[Based on the code ARM contributed in branches/ARM/sve-branch@242100]\n\n2017-07-02  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ncontrib/header-tools/\n\t* graph-header-logs (ignore): Update coretypes.h header list.\n\ngcc/\n\t* Makefile.in (MACHMODE_H): Remove insn-modes.h\n\t(CORETYPES_H): New define.\n\t(MOSTLYCLEANFILES): Add insn-modes-inline.h.\n\t(insn-modes-inline.h, s-modes-inline-h): New rules.\n\t(generated_files): Add insn-modes-inline.h.\n\t(RTL_BASE_H, TREE_CORE_H): Use CORETYPES_H instead of coretypes.h.\n\t(build/gensupport.o, build/ggc-none.o, build/print-rtl.o): Likewise.\n\t(build/read-md.o, build/read-rtl.o, build/rtl.o): Likewise.\n\t(build/vec.o, build/hash-table.o, build/inchash.o): Likewise.\n\t(build/gencondmd.o, build/genattr.o, build/genattr-common.o): Likewise.\n\t(build/genattrtab.o, build/genautomata.o, build/gencheck.o): Likewise.\n\t(build/gencodes.o, build/genconditions.o): Likewise.\n\t(build/genconfig.o, build/genconstants.o, build/genemit.o): Likewise.\n\t(build/genenums.o, build/genextract.o, build/genflags.o): Likewise.\n\t(build/gentarget-def.o, build/genmddeps.o, build/genopinit.o)\n\t(build/genoutput.o, build/genpeep.o, build/genpreds.o): Likewise.\n\t(build/genrecog.o, build/genmddump.o, build/genmatch.o): Likewise.\n\t(build/gencfn-macros.o, build/gcov-iov.o): Likewise.\n\t* coretypes.h: Include everything up to real.h for generators.\n\tInclude insn-modes.h first.  Include wide-int-print.h after\n\twide-int.h.  Include insn-modes-inline.h and then machmode.h.\n\t* machmode.h: Don't include insn-modes.h here.\n\t* function-tests.c: Remove includes of signop.h, machmode.h,\n\tdouble-int.h and wide-int.h.\n\t* rtl.h: Likewise.\n\t* gcc-rich-location.c: Remove includes of machmode.h, double-int.h\n\tand wide-int.h.\n\t* optc-save-gen.awk: Likewise.\n\t* gencheck.c (BITS_PER_UNIT): Delete dummy definition.\n\t* godump.c: Remove include of wide-int-print.h.\n\t* pretty-print.h: Likewise.\n\t* wide-int-print.cc: Likewise.\n\t* wide-int.cc: Likewise.\n\t* hash-map-tests.c: Remove include of signop.h.\n\t* hash-set-tests.c: Likewise.\n\t* rtl-tests.c: Likewise.\n\t* mkconfig.sh: Remove include of machmode.h.\n\t* genmodes.c (emit_insn_modes_h): Split emission of inline functions\n\tinto...\n\t(emit_insn_modes_inline_h): ...this new function.  Emit the code\n\tinto an insn-modes-inline.h header file, adding appropriate\n\tinclude guards and end comments.\n\t(emit_insn_modes_c_header): Remove include of machmode.h.\n\t(emit_min_insn_modes_c_header): Include coretypes.h rather than\n\tmachmode.h.\n\t(main): Handle -i flag and call emit_insn_modes_inline_h when\n\tit is passed.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r249881", "tree": {"sha": "981c01f4061456de7a523b4a8acfbaed099f0370", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/981c01f4061456de7a523b4a8acfbaed099f0370"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b0e84cf75a6732833bb52f6c2445ad59bf4aa9d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0e84cf75a6732833bb52f6c2445ad59bf4aa9d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0e84cf75a6732833bb52f6c2445ad59bf4aa9d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0e84cf75a6732833bb52f6c2445ad59bf4aa9d9/comments", "author": null, "committer": null, "parents": [{"sha": "e3f9a279f5694d662771553180f9fa8e85716e3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3f9a279f5694d662771553180f9fa8e85716e3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3f9a279f5694d662771553180f9fa8e85716e3a"}], "stats": {"total": 241, "additions": 155, "deletions": 86}, "files": [{"sha": "8977a000cd9801f7312d3e04b8ef14a0f80197fb", "filename": "contrib/header-tools/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0e84cf75a6732833bb52f6c2445ad59bf4aa9d9/contrib%2Fheader-tools%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0e84cf75a6732833bb52f6c2445ad59bf4aa9d9/contrib%2Fheader-tools%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fheader-tools%2FChangeLog?ref=b0e84cf75a6732833bb52f6c2445ad59bf4aa9d9", "patch": "@@ -1,3 +1,9 @@\n+2017-07-02  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* graph-header-logs (ignore): Update coretypes.h header list.\n+\n 2016-06-21  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n \n \t* README: Remove references to avr-rtems."}, {"sha": "e537aaeac0c52548474985179ede40e33150cf06", "filename": "contrib/header-tools/graph-header-logs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0e84cf75a6732833bb52f6c2445ad59bf4aa9d9/contrib%2Fheader-tools%2Fgraph-header-logs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0e84cf75a6732833bb52f6c2445ad59bf4aa9d9/contrib%2Fheader-tools%2Fgraph-header-logs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fheader-tools%2Fgraph-header-logs?ref=b0e84cf75a6732833bb52f6c2445ad59bf4aa9d9", "patch": "@@ -25,9 +25,12 @@ depstring = (\"In file included from\", \"                 from\")\n \n # indentation indicates nesting levels of included files\n ignore = [ \"coretypes_h\",\n-             \"machmode_h\",\n+             \"insn_modes_h\",\n              \"signop_h\",\n              \"wide_int_h\",\n+             \"wide_int_print_h\",\n+             \"insn_modes_inline_h\",\n+             \"machmode_h\",\n              \"double_int_h\",\n              \"real_h\",\n              \"fixed_value_h\","}, {"sha": "f90ed507a47623c6c065be31d3e33f691bc3af79", "filename": "gcc/ChangeLog", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0e84cf75a6732833bb52f6c2445ad59bf4aa9d9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0e84cf75a6732833bb52f6c2445ad59bf4aa9d9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b0e84cf75a6732833bb52f6c2445ad59bf4aa9d9", "patch": "@@ -1,3 +1,55 @@\n+2017-07-02  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* Makefile.in (MACHMODE_H): Remove insn-modes.h\n+\t(CORETYPES_H): New define.\n+\t(MOSTLYCLEANFILES): Add insn-modes-inline.h.\n+\t(insn-modes-inline.h, s-modes-inline-h): New rules.\n+\t(generated_files): Add insn-modes-inline.h.\n+\t(RTL_BASE_H, TREE_CORE_H): Use CORETYPES_H instead of coretypes.h.\n+\t(build/gensupport.o, build/ggc-none.o, build/print-rtl.o): Likewise.\n+\t(build/read-md.o, build/read-rtl.o, build/rtl.o): Likewise.\n+\t(build/vec.o, build/hash-table.o, build/inchash.o): Likewise.\n+\t(build/gencondmd.o, build/genattr.o, build/genattr-common.o): Likewise.\n+\t(build/genattrtab.o, build/genautomata.o, build/gencheck.o): Likewise.\n+\t(build/gencodes.o, build/genconditions.o): Likewise.\n+\t(build/genconfig.o, build/genconstants.o, build/genemit.o): Likewise.\n+\t(build/genenums.o, build/genextract.o, build/genflags.o): Likewise.\n+\t(build/gentarget-def.o, build/genmddeps.o, build/genopinit.o)\n+\t(build/genoutput.o, build/genpeep.o, build/genpreds.o): Likewise.\n+\t(build/genrecog.o, build/genmddump.o, build/genmatch.o): Likewise.\n+\t(build/gencfn-macros.o, build/gcov-iov.o): Likewise.\n+\t* coretypes.h: Include everything up to real.h for generators.\n+\tInclude insn-modes.h first.  Include wide-int-print.h after\n+\twide-int.h.  Include insn-modes-inline.h and then machmode.h.\n+\t* machmode.h: Don't include insn-modes.h here.\n+\t* function-tests.c: Remove includes of signop.h, machmode.h,\n+\tdouble-int.h and wide-int.h.\n+\t* rtl.h: Likewise.\n+\t* gcc-rich-location.c: Remove includes of machmode.h, double-int.h\n+\tand wide-int.h.\n+\t* optc-save-gen.awk: Likewise.\n+\t* gencheck.c (BITS_PER_UNIT): Delete dummy definition.\n+\t* godump.c: Remove include of wide-int-print.h.\n+\t* pretty-print.h: Likewise.\n+\t* wide-int-print.cc: Likewise.\n+\t* wide-int.cc: Likewise.\n+\t* hash-map-tests.c: Remove include of signop.h.\n+\t* hash-set-tests.c: Likewise.\n+\t* rtl-tests.c: Likewise.\n+\t* mkconfig.sh: Remove include of machmode.h.\n+\t* genmodes.c (emit_insn_modes_h): Split emission of inline functions\n+\tinto...\n+\t(emit_insn_modes_inline_h): ...this new function.  Emit the code\n+\tinto an insn-modes-inline.h header file, adding appropriate\n+\tinclude guards and end comments.\n+\t(emit_insn_modes_c_header): Remove include of machmode.h.\n+\t(emit_min_insn_modes_c_header): Include coretypes.h rather than\n+\tmachmode.h.\n+\t(main): Handle -i flag and call emit_insn_modes_inline_h when\n+\tit is passed.\n+\n 2017-07-02  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* tree-ssa-strlen.c (strinfo): Rename the length field to"}, {"sha": "a3beaad614e3c212e0f2368095bd1e3560e9e31a", "filename": "gcc/Makefile.in", "status": "modified", "additions": 58, "deletions": 47, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0e84cf75a6732833bb52f6c2445ad59bf4aa9d9/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0e84cf75a6732833bb52f6c2445ad59bf4aa9d9/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=b0e84cf75a6732833bb52f6c2445ad59bf4aa9d9", "patch": "@@ -900,14 +900,15 @@ COMMON_TARGET_DEF = common/common-target.def target-hooks-macros.h\n TARGET_H = $(TM_H) target.h $(TARGET_DEF) insn-modes.h insn-codes.h\n C_TARGET_H = c-family/c-target.h $(C_TARGET_DEF)\n COMMON_TARGET_H = common/common-target.h $(INPUT_H) $(COMMON_TARGET_DEF)\n-MACHMODE_H = machmode.h mode-classes.def insn-modes.h\n+MACHMODE_H = machmode.h mode-classes.def\n HOOKS_H = hooks.h $(MACHMODE_H)\n HOSTHOOKS_DEF_H = hosthooks-def.h $(HOOKS_H)\n LANGHOOKS_DEF_H = langhooks-def.h $(HOOKS_H)\n TARGET_DEF_H = target-def.h target-hooks-def.h $(HOOKS_H) targhooks.h\n C_TARGET_DEF_H = c-family/c-target-def.h c-family/c-target-hooks-def.h \\\n   $(TREE_H) $(C_COMMON_H) $(HOOKS_H) common/common-targhooks.h\n-RTL_BASE_H = coretypes.h rtl.h rtl.def $(MACHMODE_H) reg-notes.def \\\n+CORETYPES_H = coretypes.h insn-modes.h insn-modes-inline.h\n+RTL_BASE_H = $(CORETYPES_H) rtl.h rtl.def $(MACHMODE_H) reg-notes.def \\\n   insn-notes.def $(INPUT_H) $(REAL_H) statistics.h $(VEC_H) \\\n   $(FIXED_VALUE_H) alias.h $(HASHTAB_H)\n FIXED_VALUE_H = fixed-value.h $(MACHMODE_H) double-int.h\n@@ -919,7 +920,7 @@ BUILTINS_DEF = builtins.def sync-builtins.def omp-builtins.def \\\n \thsa-builtins.def\n INTERNAL_FN_DEF = internal-fn.def\n INTERNAL_FN_H = internal-fn.h $(INTERNAL_FN_DEF)\n-TREE_CORE_H = tree-core.h coretypes.h all-tree.def tree.def \\\n+TREE_CORE_H = tree-core.h $(CORETYPES_H) all-tree.def tree.def \\\n \tc-family/c-common.def $(lang_tree_files) $(MACHMODE_H) \\\n \t$(BUILTINS_DEF) $(INPUT_H) statistics.h \\\n \t$(VEC_H) treestruct.def $(HASHTAB_H) \\\n@@ -1632,7 +1633,7 @@ MOSTLYCLEANFILES = insn-flags.h insn-config.h insn-codes.h \\\n  insn-attr.h insn-attr-common.h insn-attrtab.c insn-dfatab.c \\\n  insn-latencytab.c insn-opinit.c insn-opinit.h insn-preds.c insn-constants.h \\\n  tm-preds.h tm-constrs.h checksum-options gimple-match.c generic-match.c \\\n- tree-check.h min-insn-modes.c insn-modes.c insn-modes.h \\\n+ tree-check.h min-insn-modes.c insn-modes.c insn-modes.h insn-modes-inline.h \\\n  genrtl.h gt-*.h gtype-*.h gtype-desc.c gtyp-input.list \\\n  case-cfn-macros.h cfn-operators.pd \\\n  xgcc$(exeext) cpp$(exeext) $(FULL_DRIVER_NAME) \\\n@@ -2318,6 +2319,7 @@ s-genrtl-h: build/gengenrtl$(build_exeext)\n \n insn-modes.c: s-modes; @true\n insn-modes.h: s-modes-h; @true\n+insn-modes-inline.h: s-modes-inline-h; @true\n min-insn-modes.c: s-modes-m; @true\n \n s-modes: build/genmodes$(build_exeext)\n@@ -2330,6 +2332,12 @@ s-modes-h: build/genmodes$(build_exeext)\n \t$(SHELL) $(srcdir)/../move-if-change tmp-modes.h insn-modes.h\n \t$(STAMP) s-modes-h\n \n+s-modes-inline-h: build/genmodes$(build_exeext)\n+\t$(RUN_GEN) build/genmodes$(build_exeext) -i > tmp-modes-inline.h\n+\t$(SHELL) $(srcdir)/../move-if-change tmp-modes-inline.h \\\n+\t  insn-modes-inline.h\n+\t$(STAMP) s-modes-inline-h\n+\n s-modes-m: build/genmodes$(build_exeext)\n \t$(RUN_GEN) build/genmodes$(build_exeext) -m > tmp-min-modes.c\n \t$(SHELL) $(srcdir)/../move-if-change tmp-min-modes.c min-insn-modes.c\n@@ -2566,7 +2574,8 @@ s-gtype: build/gengtype$(build_exeext) $(filter-out [%], $(GTFILES)) \\\n \n generated_files = config.h tm.h $(TM_P_H) $(TM_H) multilib.h \\\n        $(simple_generated_h) specs.h \\\n-       tree-check.h genrtl.h insn-modes.h tm-preds.h tm-constrs.h \\\n+       tree-check.h genrtl.h insn-modes.h insn-modes-inline.h \\\n+       tm-preds.h tm-constrs.h \\\n        $(ALL_GTFILES_H) gtype-desc.c gtype-desc.h gcov-iov.h \\\n        options.h target-hooks-def.h insn-opinit.h \\\n        common/common-target-hooks-def.h pass-instances.def \\\n@@ -2593,30 +2602,30 @@ build/version.o:  version.c version.h \\\n # Header dependencies for the programs that generate source code.\n # These are library modules...\n build/errors.o : errors.c $(BCONFIG_H) $(SYSTEM_H) errors.h\n-build/gensupport.o: gensupport.c $(BCONFIG_H) $(SYSTEM_H) coretypes.h\t\\\n-  $(GTM_H) $(RTL_BASE_H) $(OBSTACK_H) errors.h $(HASHTAB_H)\t\t\\\n-  $(READ_MD_H) $(GENSUPPORT_H)\n-build/ggc-none.o : ggc-none.c $(BCONFIG_H) $(SYSTEM_H) coretypes.h \t\\\n+build/gensupport.o: gensupport.c $(BCONFIG_H) $(SYSTEM_H) \t\t\\\n+  $(CORETYPES_H) $(GTM_H) $(RTL_BASE_H) $(OBSTACK_H) errors.h\t\t\\\n+  $(HASHTAB_H) $(READ_MD_H) $(GENSUPPORT_H)\n+build/ggc-none.o : ggc-none.c $(BCONFIG_H) $(SYSTEM_H) $(CORETYPES_H) \t\\\n   $(GGC_H)\n build/min-insn-modes.o : min-insn-modes.c $(BCONFIG_H) $(SYSTEM_H)\t\\\n   $(MACHMODE_H)\n-build/print-rtl.o: print-rtl.c $(BCONFIG_H) $(SYSTEM_H) coretypes.h\t\\\n+build/print-rtl.o: print-rtl.c $(BCONFIG_H) $(SYSTEM_H) $(CORETYPES_H)\t\\\n   $(GTM_H) $(RTL_BASE_H)\n-build/read-md.o: read-md.c $(BCONFIG_H) $(SYSTEM_H) coretypes.h\t\t\\\n+build/read-md.o: read-md.c $(BCONFIG_H) $(SYSTEM_H) $(CORETYPES_H)\t\\\n   $(HASHTAB_H) errors.h $(READ_MD_H)\n-build/read-rtl.o: read-rtl.c $(BCONFIG_H) $(SYSTEM_H) coretypes.h\t\\\n+build/read-rtl.o: read-rtl.c $(BCONFIG_H) $(SYSTEM_H) $(CORETYPES_H)\t\\\n   $(GTM_H) $(RTL_BASE_H) $(OBSTACK_H) $(HASHTAB_H) $(READ_MD_H)\t\t\\\n   $(GENSUPPORT_H)\n-build/rtl.o: rtl.c $(BCONFIG_H) coretypes.h $(GTM_H) $(SYSTEM_H)\t\\\n+build/rtl.o: rtl.c $(BCONFIG_H) $(CORETYPES_H) $(GTM_H) $(SYSTEM_H)\t\\\n   $(RTL_H) $(GGC_H) errors.h\n-build/vec.o : vec.c $(BCONFIG_H) $(SYSTEM_H) coretypes.h $(VEC_H)\t\\\n-   $(GGC_H) toplev.h $(DIAGNOSTIC_CORE_H)\n-build/hash-table.o : hash-table.c $(BCONFIG_H) $(SYSTEM_H) coretypes.h  \\\n-   $(HASH_TABLE_H) $(GGC_H) toplev.h $(DIAGNOSTIC_CORE_H)\n-build/inchash.o : inchash.c $(BCONFIG_H) $(SYSTEM_H) coretypes.h  \\\n-   $(HASHTAB_H) inchash.h\n+build/vec.o : vec.c $(BCONFIG_H) $(SYSTEM_H) $(CORETYPES_H) $(VEC_H)\t\\\n+  $(GGC_H) toplev.h $(DIAGNOSTIC_CORE_H)\n+build/hash-table.o : hash-table.c $(BCONFIG_H) $(SYSTEM_H)\t\t\\\n+  $(CORETYPES_H) $(HASH_TABLE_H) $(GGC_H) toplev.h $(DIAGNOSTIC_CORE_H)\n+build/inchash.o : inchash.c $(BCONFIG_H) $(SYSTEM_H) $(CORETYPES_H)\t\\\n+  $(HASHTAB_H) inchash.h\n build/gencondmd.o : build/gencondmd.c $(BCONFIG_H) $(SYSTEM_H)\t\t\\\n-  coretypes.h $(GTM_H) insn-constants.h\t\t\t\t\t\\\n+  $(CORETYPES_H) $(GTM_H) insn-constants.h\t\t\t\t\\\n   $(filter-out insn-flags.h, $(RTL_H) $(TM_P_H) $(FUNCTION_H) $(REGS_H) \\\n   $(RECOG_H) output.h $(FLAGS_H) $(RESOURCE_H) toplev.h $(DIAGNOSTIC_CORE_H) reload.h \t\\\n   $(EXCEPT_H) tm-constrs.h)\n@@ -2628,39 +2637,39 @@ build/gencondmd.o : \\\n \n # ...these are the programs themselves.\n build/genattr.o : genattr.c $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H)\t\\\n-  coretypes.h $(GTM_H) errors.h $(READ_MD_H) $(GENSUPPORT_H)\n+  $(CORETYPES_H) $(GTM_H) errors.h $(READ_MD_H) $(GENSUPPORT_H)\n build/genattr-common.o : genattr-common.c $(RTL_BASE_H) $(BCONFIG_H)\t\\\n-  $(SYSTEM_H) coretypes.h $(GTM_H) errors.h $(READ_MD_H) $(GENSUPPORT_H)\n+  $(SYSTEM_H) $(CORETYPES_H) $(GTM_H) errors.h $(READ_MD_H) $(GENSUPPORT_H)\n build/genattrtab.o : genattrtab.c $(RTL_BASE_H) $(OBSTACK_H)\t\t\\\n-  $(BCONFIG_H) $(SYSTEM_H) coretypes.h $(GTM_H) errors.h $(GGC_H)\t\\\n+  $(BCONFIG_H) $(SYSTEM_H) $(CORETYPES_H) $(GTM_H) errors.h $(GGC_H)\t\\\n   $(READ_MD_H) $(GENSUPPORT_H) $(FNMATCH_H)\n build/genautomata.o : genautomata.c $(RTL_BASE_H) $(OBSTACK_H)\t\t\\\n-  $(BCONFIG_H) $(SYSTEM_H) coretypes.h $(GTM_H) errors.h $(VEC_H)\t\\\n+  $(BCONFIG_H) $(SYSTEM_H) $(CORETYPES_H) $(GTM_H) errors.h $(VEC_H)\t\\\n   $(HASHTAB_H) $(GENSUPPORT_H) $(FNMATCH_H)\n build/gencheck.o : gencheck.c all-tree.def $(BCONFIG_H) $(GTM_H)\t\\\n-\t$(SYSTEM_H) coretypes.h tree.def c-family/c-common.def\t\t\\\n+\t$(SYSTEM_H) $(CORETYPES_H) tree.def c-family/c-common.def\t\\\n \t$(lang_tree_files) gimple.def\n build/genchecksum.o : genchecksum.c $(BCONFIG_H) $(SYSTEM_H) $(MD5_H)\n build/gencodes.o : gencodes.c $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H)\t\\\n-  coretypes.h $(GTM_H) errors.h $(GENSUPPORT_H)\n+  $(CORETYPES_H) $(GTM_H) errors.h $(GENSUPPORT_H)\n build/genconditions.o : genconditions.c $(RTL_BASE_H) $(BCONFIG_H)\t\\\n-  $(SYSTEM_H) coretypes.h $(GTM_H) errors.h $(HASHTAB_H) $(READ_MD_H)\t\\\n-  $(GENSUPPORT_H)\n+  $(SYSTEM_H) $(CORETYPES_H) $(GTM_H) errors.h $(HASHTAB_H)\t\t\\\n+  $(READ_MD_H) $(GENSUPPORT_H)\n build/genconfig.o : genconfig.c $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H)\t\\\n-  coretypes.h $(GTM_H) errors.h $(GENSUPPORT_H)\n+  $(CORETYPES_H) $(GTM_H) errors.h $(GENSUPPORT_H)\n build/genconstants.o : genconstants.c $(BCONFIG_H) $(SYSTEM_H)\t\t\\\n-  coretypes.h errors.h $(READ_MD_H)\n+  $(CORETYPES_H) errors.h $(READ_MD_H)\n build/genemit.o : genemit.c $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H)\t\\\n-  coretypes.h $(GTM_H) errors.h $(READ_MD_H) $(GENSUPPORT_H) internal-fn.def\n+  $(CORETYPES_H) $(GTM_H) errors.h $(READ_MD_H) $(GENSUPPORT_H) internal-fn.def\n build/genenums.o : genenums.c $(BCONFIG_H) $(SYSTEM_H)\t\t\t\\\n-  coretypes.h errors.h $(READ_MD_H)\n+  $(CORETYPES_H) errors.h $(READ_MD_H)\n build/genextract.o : genextract.c $(RTL_BASE_H) $(BCONFIG_H)\t\t\\\n-  $(SYSTEM_H) coretypes.h $(GTM_H) errors.h $(READ_MD_H) $(GENSUPPORT_H)\n+  $(SYSTEM_H) $(CORETYPES_H) $(GTM_H) errors.h $(READ_MD_H) $(GENSUPPORT_H)\n build/genflags.o : genflags.c $(RTL_BASE_H) $(OBSTACK_H) $(BCONFIG_H)\t\\\n-  $(SYSTEM_H) coretypes.h $(GTM_H) errors.h $(READ_MD_H) $(GENSUPPORT_H)\n+  $(SYSTEM_H) $(CORETYPES_H) $(GTM_H) errors.h $(READ_MD_H) $(GENSUPPORT_H)\n build/gentarget-def.o : gentarget-def.c $(BCONFIG_H) $(SYSTEM_H)\t\\\n-  coretypes.h $(GTM_H) $(RTL_BASE_H) errors.h $(READ_MD_H) $(GENSUPPORT_H)\t\\\n-  $(HASH_TABLE_H) target-insns.def\n+  $(CORETYPES_H) $(GTM_H) $(RTL_BASE_H) errors.h $(READ_MD_H)\t\t\\\n+  $(GENSUPPORT_H) $(HASH_TABLE_H) target-insns.def\n build/gengenrtl.o : gengenrtl.c $(BCONFIG_H) $(SYSTEM_H) rtl.def\n \n # The gengtype generator program is special: Two versions are built.\n@@ -2696,30 +2705,32 @@ build/gengtype.o: $(BCONFIG_H)\n \n CFLAGS-errors.o += -DHOST_GENERATOR_FILE\n \n-build/genmddeps.o: genmddeps.c $(BCONFIG_H) $(SYSTEM_H) coretypes.h\t\\\n+build/genmddeps.o: genmddeps.c $(BCONFIG_H) $(SYSTEM_H) $(CORETYPES_H)\t\\\n   errors.h $(READ_MD_H)\n build/genmodes.o : genmodes.c $(BCONFIG_H) $(SYSTEM_H) errors.h\t\t\\\n   $(HASHTAB_H) machmode.def $(extra_modes_file)\n build/genopinit.o : genopinit.c $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H)\t\\\n-  coretypes.h $(GTM_H) errors.h $(GENSUPPORT_H) optabs.def\n+  $(CORETYPES_H) $(GTM_H) errors.h $(GENSUPPORT_H) optabs.def\n build/genoutput.o : genoutput.c $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H)\t\\\n-  coretypes.h $(GTM_H) errors.h $(READ_MD_H) $(GENSUPPORT_H)\n+  $(CORETYPES_H) $(GTM_H) errors.h $(READ_MD_H) $(GENSUPPORT_H)\n build/genpeep.o : genpeep.c $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H)\t\\\n-  coretypes.h $(GTM_H) errors.h $(GENSUPPORT_H) toplev.h $(DIAGNOSTIC_CORE_H)\n+  $(CORETYPES_H) $(GTM_H) errors.h $(GENSUPPORT_H) toplev.h\t\t\\\n+  $(DIAGNOSTIC_CORE_H)\n build/genpreds.o : genpreds.c $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H)\t\\\n-  coretypes.h $(GTM_H) errors.h $(READ_MD_H) $(GENSUPPORT_H) $(OBSTACK_H)\n+  $(CORETYPES_H) $(GTM_H) errors.h $(READ_MD_H) $(GENSUPPORT_H) $(OBSTACK_H)\n build/genrecog.o : genrecog.c $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H)\t\\\n-  coretypes.h $(GTM_H) errors.h $(READ_MD_H) $(GENSUPPORT_H)\t\t\\\n+  $(CORETYPES_H) $(GTM_H) errors.h $(READ_MD_H) $(GENSUPPORT_H)\t\t\\\n   $(HASH_TABLE_H) inchash.h\n build/genhooks.o : genhooks.c $(TARGET_DEF) $(C_TARGET_DEF)\t\t\\\n   $(COMMON_TARGET_DEF) $(BCONFIG_H) $(SYSTEM_H) errors.h\n build/genmddump.o : genmddump.c $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H)\t\\\n-  coretypes.h $(GTM_H) errors.h $(READ_MD_H) $(GENSUPPORT_H)\n+  $(CORETYPES_H) $(GTM_H) errors.h $(READ_MD_H) $(GENSUPPORT_H)\n build/genmatch.o : genmatch.c $(BCONFIG_H) $(SYSTEM_H) \\\n-  coretypes.h errors.h $(HASH_TABLE_H) hash-map.h $(GGC_H) is-a.h \\\n+  $(CORETYPES_H) errors.h $(HASH_TABLE_H) hash-map.h $(GGC_H) is-a.h \\\n   tree.def builtins.def internal-fn.def\n build/gencfn-macros.o : gencfn-macros.c $(BCONFIG_H) $(SYSTEM_H)\t\\\n-  coretypes.h errors.h $(HASH_TABLE_H) hash-set.h builtins.def internal-fn.def\n+  $(CORETYPES_H) errors.h $(HASH_TABLE_H) hash-set.h builtins.def\t\\\n+  internal-fn.def\n \n # Compile the programs that generate insn-* from the machine description.\n # They are compiled with $(COMPILER_FOR_BUILD), and associated libraries,\n@@ -2817,8 +2828,8 @@ CFLAGS-cppdefault.o += $(PREPROCESSOR_DEFINES)\n # having an empty command (nothing following the semicolon).\n \n # gcov-iov.c is run on the build machine to generate gcov-iov.h from version.c\n-build/gcov-iov.o: gcov-iov.c $(BCONFIG_H) coretypes.h $(GTM_H) \\\n-  $(SYSTEM_H) coretypes.h $(TM_H)\n+build/gcov-iov.o: gcov-iov.c $(BCONFIG_H) $(CORETYPES_H) $(GTM_H) \\\n+  $(SYSTEM_H) $(CORETYPES_H) $(TM_H)\n \n build/gcov-iov$(build_exeext): build/gcov-iov.o\n \t+$(LINKER_FOR_BUILD) $(BUILD_LINKERFLAGS) $(BUILD_LDFLAGS) \\"}, {"sha": "9ceb5391b3ce936e5df7c79102ccdf21f8700ccc", "filename": "gcc/coretypes.h", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0e84cf75a6732833bb52f6c2445ad59bf4aa9d9/gcc%2Fcoretypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0e84cf75a6732833bb52f6c2445ad59bf4aa9d9/gcc%2Fcoretypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoretypes.h?ref=b0e84cf75a6732833bb52f6c2445ad59bf4aa9d9", "patch": "@@ -358,12 +358,17 @@ typedef void (*gt_pointer_operator) (void *, void *);\n typedef unsigned char uchar;\n #endif\n \n-/* Most host source files will require the following headers.  */\n-#if !defined (GENERATOR_FILE) && !defined (USED_FOR_TARGET)\n-#include \"machmode.h\"\n+/* Most source files will require the following headers.  */\n+#if !defined (USED_FOR_TARGET)\n+#include \"insn-modes.h\"\n #include \"signop.h\"\n #include \"wide-int.h\" \n+#include \"wide-int-print.h\"\n+#include \"insn-modes-inline.h\"\n+#include \"machmode.h\"\n #include \"double-int.h\"\n+/* Most host source files will require the following headers.  */\n+#if !defined (GENERATOR_FILE)\n #include \"real.h\"\n #include \"fixed-value.h\"\n #include \"hash-table.h\"\n@@ -372,6 +377,7 @@ typedef unsigned char uchar;\n #include \"is-a.h\"\n #include \"memory-block.h\"\n #include \"dumpfile.h\"\n+#endif\n #endif /* GENERATOR_FILE && !USED_FOR_TARGET */\n \n #endif /* coretypes.h */"}, {"sha": "9e6e0116077366350e5cde12e7f340488ac926a1", "filename": "gcc/function-tests.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0e84cf75a6732833bb52f6c2445ad59bf4aa9d9/gcc%2Ffunction-tests.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0e84cf75a6732833bb52f6c2445ad59bf4aa9d9/gcc%2Ffunction-tests.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction-tests.c?ref=b0e84cf75a6732833bb52f6c2445ad59bf4aa9d9", "patch": "@@ -22,7 +22,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"coretypes.h\"\n #include \"tm.h\"\n #include \"opts.h\"\n-#include \"signop.h\"\n #include \"hash-set.h\"\n #include \"fixed-value.h\"\n #include \"alias.h\"\n@@ -38,7 +37,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"vec.h\"\n #include \"hashtab.h\"\n #include \"hash-set.h\"\n-#include \"machmode.h\"\n #include \"hard-reg-set.h\"\n #include \"input.h\"\n #include \"function.h\"\n@@ -56,10 +54,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimplify.h\"\n #include \"tree-cfg.h\"\n #include \"basic-block.h\"\n-#include \"double-int.h\"\n #include \"alias.h\"\n #include \"symtab.h\"\n-#include \"wide-int.h\"\n #include \"inchash.h\"\n #include \"tree.h\"\n #include \"fold-const.h\""}, {"sha": "09f3081dd1501986957b345631191eb585bce8d1", "filename": "gcc/gcc-rich-location.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0e84cf75a6732833bb52f6c2445ad59bf4aa9d9/gcc%2Fgcc-rich-location.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0e84cf75a6732833bb52f6c2445ad59bf4aa9d9/gcc%2Fgcc-rich-location.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc-rich-location.c?ref=b0e84cf75a6732833bb52f6c2445ad59bf4aa9d9", "patch": "@@ -23,13 +23,10 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm.h\"\n #include \"rtl.h\"\n #include \"hash-set.h\"\n-#include \"machmode.h\"\n #include \"vec.h\"\n-#include \"double-int.h\"\n #include \"input.h\"\n #include \"alias.h\"\n #include \"symtab.h\"\n-#include \"wide-int.h\"\n #include \"inchash.h\"\n #include \"tree-core.h\"\n #include \"tree.h\""}, {"sha": "7d71a62db2cb7b0c12eed7117bc480e45eb6cd77", "filename": "gcc/gencheck.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0e84cf75a6732833bb52f6c2445ad59bf4aa9d9/gcc%2Fgencheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0e84cf75a6732833bb52f6c2445ad59bf4aa9d9/gcc%2Fgencheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgencheck.c?ref=b0e84cf75a6732833bb52f6c2445ad59bf4aa9d9", "patch": "@@ -17,9 +17,6 @@ You should have received a copy of the GNU General Public License\n along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n-/* We don't have insn-modes.h, but we include tm.h.  */\n-#define BITS_PER_UNIT 8\n-\n #include \"bconfig.h\"\n #include \"system.h\"\n #include \"coretypes.h\""}, {"sha": "f7eaeef2fe609d97502fa89626430250a7ea0835", "filename": "gcc/genmodes.c", "status": "modified", "additions": 26, "deletions": 5, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0e84cf75a6732833bb52f6c2445ad59bf4aa9d9/gcc%2Fgenmodes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0e84cf75a6732833bb52f6c2445ad59bf4aa9d9/gcc%2Fgenmodes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmodes.c?ref=b0e84cf75a6732833bb52f6c2445ad59bf4aa9d9", "patch": "@@ -1204,6 +1204,24 @@ enum machine_mode\\n{\");\n \n   printf (\"#define NUM_INT_N_ENTS %d\\n\", n_int_n_ents);\n \n+  puts (\"\\\n+\\n\\\n+#endif /* insn-modes.h */\");\n+}\n+\n+static void\n+emit_insn_modes_inline_h (void)\n+{\n+  printf (\"/* Generated automatically from machmode.def%s%s\\n\",\n+\t   HAVE_EXTRA_MODES ? \" and \" : \"\",\n+\t   EXTRA_MODES_FILE);\n+\n+  puts (\"\\\n+   by genmodes.  */\\n\\\n+\\n\\\n+#ifndef GCC_INSN_MODES_INLINE_H\\n\\\n+#define GCC_INSN_MODES_INLINE_H\");\n+\n   puts (\"\\n#if !defined (USED_FOR_TARGET) && GCC_VERSION >= 4001\\n\");\n   emit_mode_size_inline ();\n   emit_mode_nunits_inline ();\n@@ -1214,7 +1232,7 @@ enum machine_mode\\n{\");\n \n   puts (\"\\\n \\n\\\n-#endif /* insn-modes.h */\");\n+#endif /* insn-modes-inline.h */\");\n }\n \n static void\n@@ -1231,7 +1249,6 @@ emit_insn_modes_c_header (void)\n #include \\\"system.h\\\"\\n\\\n #include \\\"coretypes.h\\\"\\n\\\n #include \\\"tm.h\\\"\\n\\\n-#include \\\"machmode.h\\\"\\n\\\n #include \\\"real.h\\\"\");\n }\n \n@@ -1247,7 +1264,7 @@ emit_min_insn_modes_c_header (void)\n \\n\\\n #include \\\"bconfig.h\\\"\\n\\\n #include \\\"system.h\\\"\\n\\\n-#include \\\"machmode.h\\\"\");\n+#include \\\"coretypes.h\\\"\");\n }\n \n static void\n@@ -1799,18 +1816,20 @@ emit_min_insn_modes_c (void)\n int\n main (int argc, char **argv)\n {\n-  bool gen_header = false, gen_min = false;\n+  bool gen_header = false, gen_inlines = false, gen_min = false;\n   progname = argv[0];\n \n   if (argc == 1)\n     ;\n   else if (argc == 2 && !strcmp (argv[1], \"-h\"))\n     gen_header = true;\n+  else if (argc == 2 && !strcmp (argv[1], \"-i\"))\n+    gen_inlines = true;\n   else if (argc == 2 && !strcmp (argv[1], \"-m\"))\n     gen_min = true;\n   else\n     {\n-      error (\"usage: %s [-h|-m] > file\", progname);\n+      error (\"usage: %s [-h|-i|-m] > file\", progname);\n       return FATAL_EXIT_CODE;\n     }\n \n@@ -1826,6 +1845,8 @@ main (int argc, char **argv)\n \n   if (gen_header)\n     emit_insn_modes_h ();\n+  else if (gen_inlines)\n+    emit_insn_modes_inline_h ();\n   else if (gen_min)\n     emit_min_insn_modes_c ();\n   else"}, {"sha": "28d81a1e260059806f5776bc19942d9fb133de5b", "filename": "gcc/godump.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0e84cf75a6732833bb52f6c2445ad59bf4aa9d9/gcc%2Fgodump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0e84cf75a6732833bb52f6c2445ad59bf4aa9d9/gcc%2Fgodump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgodump.c?ref=b0e84cf75a6732833bb52f6c2445ad59bf4aa9d9", "patch": "@@ -31,7 +31,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"tree.h\"\n-#include \"wide-int-print.h\"\n #include \"diagnostic-core.h\"\n #include \"debug.h\"\n #include \"stor-layout.h\""}, {"sha": "fb5b365c1296e0b0f6cfaf2511cf36dbc5f3b8a1", "filename": "gcc/hash-map-tests.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0e84cf75a6732833bb52f6c2445ad59bf4aa9d9/gcc%2Fhash-map-tests.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0e84cf75a6732833bb52f6c2445ad59bf4aa9d9/gcc%2Fhash-map-tests.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhash-map-tests.c?ref=b0e84cf75a6732833bb52f6c2445ad59bf4aa9d9", "patch": "@@ -22,7 +22,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"coretypes.h\"\n #include \"tm.h\"\n #include \"opts.h\"\n-#include \"signop.h\"\n #include \"hash-set.h\"\n #include \"fixed-value.h\"\n #include \"alias.h\""}, {"sha": "9c48da2515989838b1586dd5e8013b299ab71f1b", "filename": "gcc/hash-set-tests.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0e84cf75a6732833bb52f6c2445ad59bf4aa9d9/gcc%2Fhash-set-tests.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0e84cf75a6732833bb52f6c2445ad59bf4aa9d9/gcc%2Fhash-set-tests.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhash-set-tests.c?ref=b0e84cf75a6732833bb52f6c2445ad59bf4aa9d9", "patch": "@@ -22,7 +22,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"coretypes.h\"\n #include \"tm.h\"\n #include \"opts.h\"\n-#include \"signop.h\"\n #include \"hash-set.h\"\n #include \"selftest.h\"\n "}, {"sha": "4b861ac41dd3f9b92b50bd73ec372aa2b571914e", "filename": "gcc/machmode.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0e84cf75a6732833bb52f6c2445ad59bf4aa9d9/gcc%2Fmachmode.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0e84cf75a6732833bb52f6c2445ad59bf4aa9d9/gcc%2Fmachmode.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmachmode.h?ref=b0e84cf75a6732833bb52f6c2445ad59bf4aa9d9", "patch": "@@ -20,9 +20,6 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef HAVE_MACHINE_MODES\n #define HAVE_MACHINE_MODES\n \n-/* Make an enum class that gives all the machine modes.  */\n-#include \"insn-modes.h\"\n-\n /* Get the name of mode MODE as a string.  */\n \n extern const char * const mode_name[NUM_MACHINE_MODES];"}, {"sha": "3ee7fd32218b6ddbe4e6a1b1fbd2cba6bd932626", "filename": "gcc/mkconfig.sh", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0e84cf75a6732833bb52f6c2445ad59bf4aa9d9/gcc%2Fmkconfig.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0e84cf75a6732833bb52f6c2445ad59bf4aa9d9/gcc%2Fmkconfig.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmkconfig.sh?ref=b0e84cf75a6732833bb52f6c2445ad59bf4aa9d9", "patch": "@@ -100,9 +100,6 @@ case $output in\n #if defined IN_GCC && !defined GENERATOR_FILE\n # include \"insn-modes.h\"\n #endif\n-#if defined IN_GCC && defined GENERATOR_FILE && !defined BITS_PER_UNIT\n-#include \"machmode.h\"\n-#endif\n EOF\n     ;;\n esac"}, {"sha": "fc582103f6f4840f1568c4dc610608d81224d558", "filename": "gcc/optc-save-gen.awk", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0e84cf75a6732833bb52f6c2445ad59bf4aa9d9/gcc%2Foptc-save-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0e84cf75a6732833bb52f6c2445ad59bf4aa9d9/gcc%2Foptc-save-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptc-save-gen.awk?ref=b0e84cf75a6732833bb52f6c2445ad59bf4aa9d9", "patch": "@@ -41,13 +41,10 @@ print \"#include \" quote \"flags.h\" quote\n print \"#include \" quote \"target.h\" quote\n print \"#include \" quote \"inchash.h\" quote\n print \"#include \" quote \"hash-set.h\" quote\n-print \"#include \" quote \"machmode.h\" quote\n print \"#include \" quote \"vec.h\" quote\n-print \"#include \" quote \"double-int.h\" quote\n print \"#include \" quote \"input.h\" quote\n print \"#include \" quote \"alias.h\" quote\n print \"#include \" quote \"symtab.h\" quote\n-print \"#include \" quote \"wide-int.h\" quote\n print \"#include \" quote \"inchash.h\" quote\n print \"#include \" quote \"tree.h\" quote\n print \"#include \" quote \"fold-const.h\" quote"}, {"sha": "98296b1c20f40674cd0ae63dff12cc43eab9f3cf", "filename": "gcc/pretty-print.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0e84cf75a6732833bb52f6c2445ad59bf4aa9d9/gcc%2Fpretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0e84cf75a6732833bb52f6c2445ad59bf4aa9d9/gcc%2Fpretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpretty-print.h?ref=b0e84cf75a6732833bb52f6c2445ad59bf4aa9d9", "patch": "@@ -22,7 +22,6 @@ along with GCC; see the file COPYING3.  If not see\n #define GCC_PRETTY_PRINT_H\n \n #include \"obstack.h\"\n-#include \"wide-int-print.h\"\n \n /* Maximum number of format string arguments.  */\n #define PP_NL_ARGMAX   30"}, {"sha": "54bd6a37e7f4dfb347f96dd2ff7e2a4e7b0704a0", "filename": "gcc/rtl-tests.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0e84cf75a6732833bb52f6c2445ad59bf4aa9d9/gcc%2Frtl-tests.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0e84cf75a6732833bb52f6c2445ad59bf4aa9d9/gcc%2Frtl-tests.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl-tests.c?ref=b0e84cf75a6732833bb52f6c2445ad59bf4aa9d9", "patch": "@@ -22,7 +22,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"coretypes.h\"\n #include \"tm.h\"\n #include \"opts.h\"\n-#include \"signop.h\"\n #include \"hash-set.h\"\n #include \"fixed-value.h\"\n #include \"alias.h\""}, {"sha": "59da995c21aec9dbe99fd49891fb53f182cfb42b", "filename": "gcc/rtl.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0e84cf75a6732833bb52f6c2445ad59bf4aa9d9/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0e84cf75a6732833bb52f6c2445ad59bf4aa9d9/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=b0e84cf75a6732833bb52f6c2445ad59bf4aa9d9", "patch": "@@ -24,10 +24,6 @@ along with GCC; see the file COPYING3.  If not see\n    machmode.h and other files to exist and would not normally have been\n    included by coretypes.h.  */\n #ifdef GENERATOR_FILE\n-#include \"machmode.h\"     \n-#include \"signop.h\"\n-#include \"wide-int.h\"\n-#include \"double-int.h\"\n #include \"real.h\"\n #include \"fixed-value.h\"\n #include \"statistics.h\""}, {"sha": "36d8ad863f5192767c68700fe03609647bf281fb", "filename": "gcc/wide-int-print.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0e84cf75a6732833bb52f6c2445ad59bf4aa9d9/gcc%2Fwide-int-print.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0e84cf75a6732833bb52f6c2445ad59bf4aa9d9/gcc%2Fwide-int-print.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fwide-int-print.cc?ref=b0e84cf75a6732833bb52f6c2445ad59bf4aa9d9", "patch": "@@ -21,7 +21,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"config.h\"\n #include \"system.h\"\n #include \"coretypes.h\"\n-#include \"wide-int-print.h\"\n \n /*\n  * public printing routines."}, {"sha": "71e24ec22afe2714df5561d4a4d7c26d3d846ba3", "filename": "gcc/wide-int.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0e84cf75a6732833bb52f6c2445ad59bf4aa9d9/gcc%2Fwide-int.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0e84cf75a6732833bb52f6c2445ad59bf4aa9d9/gcc%2Fwide-int.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fwide-int.cc?ref=b0e84cf75a6732833bb52f6c2445ad59bf4aa9d9", "patch": "@@ -24,7 +24,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm.h\"\n #include \"tree.h\"\n #include \"selftest.h\"\n-#include \"wide-int-print.h\"\n \n \n #define HOST_BITS_PER_HALF_WIDE_INT 32"}]}