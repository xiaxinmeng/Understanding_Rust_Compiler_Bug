{"sha": "64326bb428ac750ec3b0f56c06dfb98277cd41b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQzMjZiYjQyOGFjNzUwZWMzYjBmNTZjMDZkZmI5ODI3N2NkNDFiNQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-11-12T08:10:51Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-11-12T10:00:47Z"}, "message": "tree-optimization/97806 - fix PRE expression post order\n\nThis fixes the postorder compute for the case of multiple\nexpression leaders for a value.\n\n2020-11-12  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/97806\n\t* tree-ssa-pre.c (pre_expr_DFS): New overload for visiting\n\tvalues, visiting all leaders for a value.  Use a bitmap\n\tfor visited values.\n\t(sorted_array_from_bitmap_set): Walk over values and adjust.\n\n\t* gcc.dg/pr97806.c: New testcase.", "tree": {"sha": "867d7df31bd9996baae428b7807299c238bfadde", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/867d7df31bd9996baae428b7807299c238bfadde"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/64326bb428ac750ec3b0f56c06dfb98277cd41b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64326bb428ac750ec3b0f56c06dfb98277cd41b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64326bb428ac750ec3b0f56c06dfb98277cd41b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64326bb428ac750ec3b0f56c06dfb98277cd41b5/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc531c2ed3ce456efca946e995544b216b3c16df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc531c2ed3ce456efca946e995544b216b3c16df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc531c2ed3ce456efca946e995544b216b3c16df"}], "stats": {"total": 86, "additions": 56, "deletions": 30}, "files": [{"sha": "9ec3299c0b13120345afa886f14130f6d6141429", "filename": "gcc/testsuite/gcc.dg/pr97806.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64326bb428ac750ec3b0f56c06dfb98277cd41b5/gcc%2Ftestsuite%2Fgcc.dg%2Fpr97806.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64326bb428ac750ec3b0f56c06dfb98277cd41b5/gcc%2Ftestsuite%2Fgcc.dg%2Fpr97806.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr97806.c?ref=64326bb428ac750ec3b0f56c06dfb98277cd41b5", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+int b;\n+long c;\n+int g();\n+void h(long *);\n+void i(long *);\n+void d() {\n+  int e, f = b - e;\n+  if (g())\n+    h(&c + f);\n+  else\n+    i(&c + f);\n+  __builtin_memset(0, 0, f * 8);\n+}"}, {"sha": "eb181735e7f1c7f9064f137037837d7356328c3a", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 40, "deletions": 30, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64326bb428ac750ec3b0f56c06dfb98277cd41b5/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64326bb428ac750ec3b0f56c06dfb98277cd41b5/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=64326bb428ac750ec3b0f56c06dfb98277cd41b5", "patch": "@@ -805,16 +805,36 @@ bitmap_set_free (bitmap_set_t set)\n   bitmap_clear (&set->values);\n }\n \n+static void\n+pre_expr_DFS (pre_expr expr, bitmap_set_t set, bitmap expr_visited,\n+\t      bitmap val_visited, vec<pre_expr> &post);\n+\n+/* DFS walk leaders of VAL to their operands with leaders in SET, collecting\n+   expressions in SET in postorder into POST.  */\n+\n+static void\n+pre_expr_DFS (unsigned val, bitmap_set_t set, bitmap expr_visited,\n+\t      bitmap val_visited, vec<pre_expr> &post)\n+{\n+  unsigned int i;\n+  bitmap_iterator bi;\n+\n+  /* Iterate over all leaders and DFS recurse.  Borrowed from\n+     bitmap_find_leader.  */\n+  bitmap exprset = value_expressions[val];\n+  EXECUTE_IF_AND_IN_BITMAP (exprset, &set->expressions, 0, i, bi)\n+    pre_expr_DFS (expression_for_id (i),\n+\t\t  set, expr_visited, val_visited, post);\n+}\n \n /* DFS walk EXPR to its operands with leaders in SET, collecting\n    expressions in SET in postorder into POST.  */\n \n static void\n-pre_expr_DFS (pre_expr expr, bitmap_set_t set, bitmap visited,\n-\t      hash_set<int_hash<unsigned int, 0> > &leader_set,\n-\t      vec<pre_expr> &post)\n+pre_expr_DFS (pre_expr expr, bitmap_set_t set, bitmap expr_visited,\n+\t      bitmap val_visited, vec<pre_expr> &post)\n {\n-  if (!bitmap_set_bit (visited, get_expression_id (expr)))\n+  if (!bitmap_set_bit (expr_visited, get_expression_id (expr)))\n     return;\n \n   switch (expr->kind)\n@@ -829,12 +849,9 @@ pre_expr_DFS (pre_expr expr, bitmap_set_t set, bitmap visited,\n \t    unsigned int op_val_id = VN_INFO (nary->op[i])->value_id;\n \t    /* If we already found a leader for the value we've\n \t       recursed already.  Avoid the costly bitmap_find_leader.  */\n-\t    if (!leader_set.add (op_val_id))\n-\t      {\n-\t\tpre_expr leader = bitmap_find_leader (set, op_val_id);\n-\t\tif (leader)\n-\t\t  pre_expr_DFS (leader, set, visited, leader_set, post);\n-\t      }\n+\t    if (bitmap_bit_p (&set->values, op_val_id)\n+\t\t&& bitmap_set_bit (val_visited, op_val_id))\n+\t      pre_expr_DFS (op_val_id, set, expr_visited, val_visited, post);\n \t  }\n \tbreak;\n       }\n@@ -854,12 +871,10 @@ pre_expr_DFS (pre_expr expr, bitmap_set_t set, bitmap visited,\n \t\tif (!op[n] || TREE_CODE (op[n]) != SSA_NAME)\n \t\t  continue;\n \t\tunsigned op_val_id = VN_INFO (op[n])->value_id;\n-\t\tif (!leader_set.add (op_val_id))\n-\t\t  {\n-\t\t    pre_expr leader = bitmap_find_leader (set, op_val_id);\n-\t\t    if (leader)\n-\t\t      pre_expr_DFS (leader, set, visited, leader_set, post);\n-\t\t  }\n+\t\tif (bitmap_bit_p (&set->values, op_val_id)\n+\t\t    && bitmap_set_bit (val_visited, op_val_id))\n+\t\t  pre_expr_DFS (op_val_id,\n+\t\t\t\tset, expr_visited, val_visited, post);\n \t      }\n \t  }\n \tbreak;\n@@ -879,20 +894,15 @@ sorted_array_from_bitmap_set (bitmap_set_t set)\n   vec<pre_expr> result;\n \n   /* Pre-allocate enough space for the array.  */\n-  size_t len = bitmap_count_bits (&set->expressions);\n-  result.create (len);\n-  hash_set<int_hash<unsigned int, 0> > leader_set (2*len);\n-\n-  auto_bitmap visited (&grand_bitmap_obstack);\n-  bitmap_tree_view (visited);\n-  FOR_EACH_EXPR_ID_IN_SET (set, i, bi)\n-    {\n-      pre_expr expr = expression_for_id (i);\n-      /* Hoist insertion calls us with a value-set we have to and with,\n-\t do so.  */\n-      if (bitmap_set_contains_value (set, get_expr_value_id (expr)))\n-\tpre_expr_DFS (expr, set, visited, leader_set, result);\n-    }\n+  result.create (bitmap_count_bits (&set->expressions));\n+\n+  auto_bitmap expr_visited (&grand_bitmap_obstack);\n+  auto_bitmap val_visited (&grand_bitmap_obstack);\n+  bitmap_tree_view (expr_visited);\n+  bitmap_tree_view (val_visited);\n+  FOR_EACH_VALUE_ID_IN_SET (set, i, bi)\n+    if (bitmap_set_bit (val_visited, i))\n+      pre_expr_DFS (i, set, expr_visited, val_visited, result);\n \n   return result;\n }"}]}