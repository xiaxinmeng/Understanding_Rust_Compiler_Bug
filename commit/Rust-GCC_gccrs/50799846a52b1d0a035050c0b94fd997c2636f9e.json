{"sha": "50799846a52b1d0a035050c0b94fd997c2636f9e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTA3OTk4NDZhNTJiMWQwYTAzNTA1MGMwYjk0ZmQ5OTdjMjYzNmY5ZQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2012-11-02T01:29:00Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2012-11-02T01:29:00Z"}, "message": "forward_list.h (forward_list(size_type)): Add missing allocator parameter.\n\n\t* include/bits/forward_list.h (forward_list(size_type)): Add missing\n\tallocator parameter.\n\t(_Fwd_list_node_base): Use NSDMI and define constructor as defaulted.\n\t(_Fwd_list_node::_M_value): Replace with uninitialized storage.\n\t(_Fwd_list_node::_M_valptr()): Define functions to access storage.\n\t(_Fwd_list_iterator, _Fwd_list_const_iterator): Use _M_valptr.\n\t(_Fwd_list_base::_M_create_node): Only use allocator to construct the\n\telement not the node.\n\t* include/bits/forward_list.tcc (_Fwd_list_base::_M_erase_after): Only\n\tuse allocator to destroy the element not the node.\n\t* testsuite/23_containers/forward_list/cons/11.cc: Remove unused\n\theaders.\n\t* testsuite/23_containers/forward_list/cons/12.cc: Likewise.\n\t* testsuite/23_containers/forward_list/cons/13.cc: New.\n\t* testsuite/23_containers/forward_list/cons/14.cc: New.\n\nFrom-SVN: r193086", "tree": {"sha": "f52432c95745f3297044e537bcb9a42ef9e8e44a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f52432c95745f3297044e537bcb9a42ef9e8e44a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/50799846a52b1d0a035050c0b94fd997c2636f9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50799846a52b1d0a035050c0b94fd997c2636f9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50799846a52b1d0a035050c0b94fd997c2636f9e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50799846a52b1d0a035050c0b94fd997c2636f9e/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ce3b11540311a561d331c34923cb01d7638ba56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ce3b11540311a561d331c34923cb01d7638ba56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ce3b11540311a561d331c34923cb01d7638ba56"}], "stats": {"total": 192, "additions": 155, "deletions": 37}, "files": [{"sha": "9b3187d0e021aa576b64cffbf817b5ab51a51a3e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50799846a52b1d0a035050c0b94fd997c2636f9e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50799846a52b1d0a035050c0b94fd997c2636f9e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=50799846a52b1d0a035050c0b94fd997c2636f9e", "patch": "@@ -1,3 +1,21 @@\n+2012-11-02  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\t* include/bits/forward_list.h (forward_list(size_type)): Add missing\n+\tallocator parameter.\n+\t(_Fwd_list_node_base): Use NSDMI and define constructor as defaulted.\n+\t(_Fwd_list_node::_M_value): Replace with uninitialized storage.\n+\t(_Fwd_list_node::_M_valptr()): Define functions to access storage.\n+\t(_Fwd_list_iterator, _Fwd_list_const_iterator): Use _M_valptr.\n+\t(_Fwd_list_base::_M_create_node): Only use allocator to construct the\n+\telement not the node.\n+\t* include/bits/forward_list.tcc (_Fwd_list_base::_M_erase_after): Only\n+\tuse allocator to destroy the element not the node.\n+\t* testsuite/23_containers/forward_list/cons/11.cc: Remove unused\n+\theaders.\n+\t* testsuite/23_containers/forward_list/cons/12.cc: Likewise.\n+\t* testsuite/23_containers/forward_list/cons/13.cc: New.\n+\t* testsuite/23_containers/forward_list/cons/14.cc: New.\n+\n 2012-11-02  Gerald Pfeifer  <gerald@pfeifer.com>\n \n \t* doc/xml/manual/codecvt.xml: Fix reference to Austin Common"}, {"sha": "9efabcf953a576c89bcb2c1ff0e861f8c25a32c2", "filename": "libstdc++-v3/include/bits/forward_list.h", "status": "modified", "additions": 32, "deletions": 21, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50799846a52b1d0a035050c0b94fd997c2636f9e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50799846a52b1d0a035050c0b94fd997c2636f9e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h?ref=50799846a52b1d0a035050c0b94fd997c2636f9e", "patch": "@@ -48,9 +48,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n    */\n   struct _Fwd_list_node_base\n   {\n-    _Fwd_list_node_base() : _M_next(0) { }\n+    _Fwd_list_node_base() = default;\n \n-    _Fwd_list_node_base* _M_next;\n+    _Fwd_list_node_base* _M_next = nullptr;\n \n     _Fwd_list_node_base*\n     _M_transfer_after(_Fwd_list_node_base* __begin,\n@@ -86,19 +86,30 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n   /**\n    *  @brief  A helper node class for %forward_list.\n-   *          This is just a linked list with a data value in each node.\n+   *          This is just a linked list with uninitialized storage for a\n+   *          data value in each node.\n    *          There is a sorting utility method.\n    */\n   template<typename _Tp>\n     struct _Fwd_list_node\n     : public _Fwd_list_node_base\n     {\n-      template<typename... _Args>\n-        _Fwd_list_node(_Args&&... __args)\n-        : _Fwd_list_node_base(), \n-          _M_value(std::forward<_Args>(__args)...) { }\n+      _Fwd_list_node() = default;\n+\n+      typename aligned_storage<sizeof(_Tp), alignment_of<_Tp>::value>::type\n+\t_M_storage;\n+\n+      _Tp*\n+      _M_valptr() noexcept\n+      {\n+\treturn static_cast<_Tp*>(static_cast<void*>(&_M_storage));\n+      }\n \n-      _Tp _M_value;\n+      const _Tp*\n+      _M_valptr() const noexcept\n+      {\n+\treturn static_cast<const _Tp*>(static_cast<const void*>(&_M_storage));\n+      }\n     };\n \n   /**\n@@ -127,12 +138,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n       reference\n       operator*() const\n-      { return static_cast<_Node*>(this->_M_node)->_M_value; }\n+      { return *static_cast<_Node*>(this->_M_node)->_M_valptr(); }\n \n       pointer\n       operator->() const\n-      { return std::__addressof(static_cast<_Node*>\n-\t\t\t\t(this->_M_node)->_M_value); }\n+      { return static_cast<_Node*>(this->_M_node)->_M_valptr(); }\n \n       _Self&\n       operator++()\n@@ -199,12 +209,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n       reference\n       operator*() const\n-      { return static_cast<_Node*>(this->_M_node)->_M_value; }\n+      { return *static_cast<_Node*>(this->_M_node)->_M_valptr(); }\n \n       pointer\n       operator->() const\n-      { return std::__addressof(static_cast<_Node*>\n-\t\t\t\t(this->_M_node)->_M_value); }\n+      { return static_cast<_Node*>(this->_M_node)->_M_valptr(); }\n \n       _Self&\n       operator++()\n@@ -339,9 +348,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n           _Node* __node = this->_M_get_node();\n           __try\n             {\n-              _Node_alloc_traits::construct(_M_get_Node_allocator(), __node,\n-                                            std::forward<_Args>(__args)...);\n-              __node->_M_next = 0;\n+\t      _Tp_alloc_type __a(_M_get_Node_allocator());\n+\t      typedef allocator_traits<_Tp_alloc_type> _Alloc_traits;\n+\t      ::new ((void*)__node) _Node();\n+\t      _Alloc_traits::construct(__a, __node->_M_valptr(),\n+\t\t\t\t       std::forward<_Args>(__args)...);\n             }\n           __catch(...)\n             {\n@@ -457,8 +468,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  constructed elements.\n        */\n       explicit\n-      forward_list(size_type __n)\n-      : _Base()\n+      forward_list(size_type __n, const _Alloc& __al = _Alloc())\n+      : _Base(_Node_alloc_type(__al))\n       { _M_default_initialize(__n); }\n \n       /**\n@@ -738,7 +749,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       front()\n       {\n         _Node* __front = static_cast<_Node*>(this->_M_impl._M_head._M_next);\n-        return __front->_M_value;\n+        return *__front->_M_valptr();\n       }\n \n       /**\n@@ -749,7 +760,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       front() const\n       {\n         _Node* __front = static_cast<_Node*>(this->_M_impl._M_head._M_next);\n-        return __front->_M_value;\n+        return *__front->_M_valptr();\n       }\n \n       // 23.3.4.5 modi\ufb01ers:"}, {"sha": "757f319d84a30e5e8f41302aac486c140ae3b9ef", "filename": "libstdc++-v3/include/bits/forward_list.tcc", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50799846a52b1d0a035050c0b94fd997c2636f9e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50799846a52b1d0a035050c0b94fd997c2636f9e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.tcc?ref=50799846a52b1d0a035050c0b94fd997c2636f9e", "patch": "@@ -53,7 +53,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n           while (__curr)\n             {\n               __to->_M_next =\n-                _M_create_node(std::move_if_noexcept(__curr->_M_value));\n+                _M_create_node(std::move_if_noexcept(*__curr->_M_valptr()));\n               __to = __to->_M_next;\n               __curr = static_cast<_Node*>(__curr->_M_next);\n             }\n@@ -81,7 +81,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     {\n       _Node* __curr = static_cast<_Node*>(__pos->_M_next);\n       __pos->_M_next = __curr->_M_next;\n-      _Node_alloc_traits::destroy(_M_get_Node_allocator(), __curr);\n+      _Tp_alloc_type __a(_M_get_Node_allocator());\n+      allocator_traits<_Tp_alloc_type>::destroy(__a, __curr->_M_valptr());\n+      __curr->~_Node();\n       _M_put_node(__curr);\n       return __pos->_M_next;\n     }\n@@ -97,7 +99,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n         {\n           _Node* __temp = __curr;\n           __curr = static_cast<_Node*>(__curr->_M_next);\n-          _Node_alloc_traits::destroy(_M_get_Node_allocator(), __temp);\n+\t  _Tp_alloc_type __a(_M_get_Node_allocator());\n+\t  allocator_traits<_Tp_alloc_type>::destroy(__a, __temp->_M_valptr());\n+\t  __temp->~_Node();\n           _M_put_node(__temp);\n         }\n       __pos->_M_next = __last;\n@@ -300,10 +304,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n       while (_Node* __tmp = static_cast<_Node*>(__curr->_M_next))\n         {\n-          if (__tmp->_M_value == __val)\n+          if (*__tmp->_M_valptr() == __val)\n \t    {\n-\t      if (std::__addressof(__tmp->_M_value)\n-\t\t  != std::__addressof(__val))\n+\t      if (__tmp->_M_valptr() != std::__addressof(__val))\n \t\t{\n \t\t  this->_M_erase_after(__curr);\n \t\t  continue;\n@@ -327,7 +330,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t_Node* __curr = static_cast<_Node*>(&this->_M_impl._M_head);\n         while (_Node* __tmp = static_cast<_Node*>(__curr->_M_next))\n           {\n-            if (__pred(__tmp->_M_value))\n+            if (__pred(*__tmp->_M_valptr()))\n               this->_M_erase_after(__curr);\n             else\n               __curr = static_cast<_Node*>(__curr->_M_next);\n@@ -364,10 +367,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n         _Node_base* __node = &this->_M_impl._M_head;\n         while (__node->_M_next && __list._M_impl._M_head._M_next)\n           {\n-            if (__comp(static_cast<_Node*>\n-                       (__list._M_impl._M_head._M_next)->_M_value,\n-                       static_cast<_Node*>\n-                       (__node->_M_next)->_M_value))\n+            if (__comp(*static_cast<_Node*>\n+                       (__list._M_impl._M_head._M_next)->_M_valptr(),\n+                       *static_cast<_Node*>\n+                       (__node->_M_next)->_M_valptr()))\n               __node->_M_transfer_after(&__list._M_impl._M_head,\n                                         __list._M_impl._M_head._M_next);\n             __node = __node->_M_next;\n@@ -460,7 +463,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n                         __p = static_cast<_Node*>(__p->_M_next);\n                         --__psize;\n                       }\n-                    else if (__comp(__p->_M_value, __q->_M_value))\n+                    else if (__comp(*__p->_M_valptr(), *__q->_M_valptr()))\n                       {\n                         // First node of p is lower; e must come from p.\n                         __e = __p;"}, {"sha": "fa8c8db80666b901bb22602ac03933ad29a2bbea", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/cons/11.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50799846a52b1d0a035050c0b94fd997c2636f9e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fcons%2F11.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50799846a52b1d0a035050c0b94fd997c2636f9e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fcons%2F11.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fcons%2F11.cc?ref=50799846a52b1d0a035050c0b94fd997c2636f9e", "patch": "@@ -20,8 +20,6 @@\n // 23.3.4.2 forward_list construction [forwardlist.cons]\n \n #include <forward_list>\n-#include <testsuite_hooks.h>\n-#include <testsuite_allocator.h>\n \n bool fail = false;\n "}, {"sha": "3e287358dc61cb5f5e582711ba173435dabe38eb", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/cons/12.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50799846a52b1d0a035050c0b94fd997c2636f9e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fcons%2F12.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50799846a52b1d0a035050c0b94fd997c2636f9e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fcons%2F12.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fcons%2F12.cc?ref=50799846a52b1d0a035050c0b94fd997c2636f9e", "patch": "@@ -21,8 +21,6 @@\n // 23.3.4.2 forward_list construction [forwardlist.cons]\n \n #include <forward_list>\n-#include <testsuite_hooks.h>\n-#include <testsuite_allocator.h>\n \n bool fail = false;\n "}, {"sha": "e21e02e75336b9ceb52ca1313006e548bd7ff417", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/cons/13.cc", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50799846a52b1d0a035050c0b94fd997c2636f9e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fcons%2F13.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50799846a52b1d0a035050c0b94fd997c2636f9e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fcons%2F13.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fcons%2F13.cc?ref=50799846a52b1d0a035050c0b94fd997c2636f9e", "patch": "@@ -0,0 +1,55 @@\n+// { dg-options \"-std=gnu++11\" }\n+\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 23.3.4.2 forward_list construction [forwardlist.cons]\n+\n+#include <forward_list>\n+#include <memory>\n+#include <scoped_allocator>\n+#include <testsuite_hooks.h>\n+\n+struct A\n+{\n+  typedef std::allocator<A> allocator_type;\n+\n+  A() : ok(false) { }\n+  A(const A&) : ok(false) { }\n+  A(const allocator_type&) : ok(true) { }\n+  A(const A&, const allocator_type&) : ok(true) { }\n+\n+  bool ok;\n+};\n+\n+void test01()\n+{\n+  typedef std::scoped_allocator_adaptor<A::allocator_type> alloc_type;\n+  typedef std::forward_list<A, alloc_type> list;\n+\n+  list l1(1);\n+  VERIFY( l1.begin()->ok );\n+\n+  A a;\n+  list l2(1, a);\n+  VERIFY( l2.begin()->ok );\n+}\n+\n+int main()\n+{\n+  test01();\n+}"}, {"sha": "8bb17eec65004ee856432a29415c6989bf3c60be", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/cons/14.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50799846a52b1d0a035050c0b94fd997c2636f9e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fcons%2F14.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50799846a52b1d0a035050c0b94fd997c2636f9e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fcons%2F14.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fcons%2F14.cc?ref=50799846a52b1d0a035050c0b94fd997c2636f9e", "patch": "@@ -0,0 +1,35 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++11\" }\n+\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 23.3.4.2 forward_list construction [forwardlist.cons]\n+\n+#include <forward_list>\n+#include <scoped_allocator>\n+\n+void test01()\n+{\n+  using namespace std;\n+  using list = forward_list<int>;\n+  forward_list<list, scoped_allocator_adaptor<list::allocator_type>> l;\n+\n+  // Check for forward_list(size_type, const allocator_type&)\n+  l.emplace_front(1u);\n+}\n+"}]}