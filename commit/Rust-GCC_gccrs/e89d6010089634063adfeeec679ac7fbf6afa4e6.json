{"sha": "e89d6010089634063adfeeec679ac7fbf6afa4e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTg5ZDYwMTAwODk2MzQwNjNhZGZlZWVjNjc5YWM3ZmJmNmFmYTRlNg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2007-09-11T10:39:53Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2007-09-11T10:39:53Z"}, "message": "decl.c (java_expand_body): Kill.\n\n\n\t* decl.c (java_expand_body): Kill.\n\t(LANG_HOOKS_CALLGRAPH_EXPAND_FUNCTION): Kill.\n\n\t* toplev.c (process_options): all frontends now do unit-at-a-time.\n\t* cgraphunit.c: update comments.\n\t(cgraph_expand_function): call passmanager dirrectly; emit thunks.\n\t* c-decl.c (finish_function): use cgraph_add_new_function.\n\n\t* method.c (use_thunk): Use tree_rest_of_compilation\n\t* cp-objecp-common.h (LANG_HOOKS_CALLGRAPH_EXPAND_FUNCTION): Kill.\n\t(LANG_HOOKS_CALLGRAPH_EMIT_ASSOCIATED_THUNKS): Define.\n\t* cp-tree.h (expand_body): Kill.\n\t(emit_associated_thunks): Declare.\n\t* semantics.c (emit_associated_thunks): Export.\n\t(expand_body): Kill.\n\n\t* misc.c (gnat_expand_body): Kill.\n\t(LANG_HOOKS_CALLGRAPH_EXPAND_FUNCTION): Kill.\n\n\t* f95-lang.c (gfc_expand_function): Kill.\n\t(LANG_HOOKS_CALLGRAPH_EXPAND_FUNCTION): Kill.\n\n\t* function.c (expand_function_end): We are always unit-at-a-time.\n\nFrom-SVN: r128367", "tree": {"sha": "a9c246259502c55141f2c727f2747541fd04e58b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9c246259502c55141f2c727f2747541fd04e58b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e89d6010089634063adfeeec679ac7fbf6afa4e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e89d6010089634063adfeeec679ac7fbf6afa4e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e89d6010089634063adfeeec679ac7fbf6afa4e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e89d6010089634063adfeeec679ac7fbf6afa4e6/comments", "author": null, "committer": null, "parents": [{"sha": "8ce4afa36d051920c2a67e54340e2a72fa33cbdd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ce4afa36d051920c2a67e54340e2a72fa33cbdd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ce4afa36d051920c2a67e54340e2a72fa33cbdd"}], "stats": {"total": 170, "additions": 47, "deletions": 123}, "files": [{"sha": "1706076df997f81c96586c9fe27203271fc2dc7a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e89d6010089634063adfeeec679ac7fbf6afa4e6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e89d6010089634063adfeeec679ac7fbf6afa4e6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e89d6010089634063adfeeec679ac7fbf6afa4e6", "patch": "@@ -1,3 +1,11 @@\n+2007-09-11  Jan Hubicka <jh@suse.cz>\n+\n+\t* toplev.c (process_options): all frontends now do unit-at-a-time.\n+\t* cgraphunit.c: update comments.\n+\t(cgraph_expand_function): call passmanager dirrectly; emit thunks.\n+\t* c-decl.c (finish_function): use cgraph_add_new_function.\n+\t* function.c (expand_function_end): We are always unit-at-a-time.\n+\n 2007-09-11  Richard Sandiford  <richard@codesourcery.com>\n \n \t* config/mips/mips.c (mips_set_mips16_mode): Use separate anchor"}, {"sha": "05182f88f973e59c327274f859adc676f5a0acba", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e89d6010089634063adfeeec679ac7fbf6afa4e6/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e89d6010089634063adfeeec679ac7fbf6afa4e6/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e89d6010089634063adfeeec679ac7fbf6afa4e6", "patch": "@@ -1,3 +1,8 @@\n+2007-09-11  Jan Hubicka <jh@suse.cz>\n+\n+\t* misc.c (gnat_expand_body): Kill.\n+\t(LANG_HOOKS_CALLGRAPH_EXPAND_FUNCTION): Kill.\n+\n 2007-09-10  Robert Dewar  <dewar@adacore.com>\n \n \t* exp_atag.ads, exp_atag.adb, mlib-tgt-tru64.adb, mlib-tgt-aix.adb,"}, {"sha": "473beb059fd542995dd861ecfa16e5b456b8caf1", "filename": "gcc/ada/misc.c", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e89d6010089634063adfeeec679ac7fbf6afa4e6/gcc%2Fada%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e89d6010089634063adfeeec679ac7fbf6afa4e6/gcc%2Fada%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmisc.c?ref=e89d6010089634063adfeeec679ac7fbf6afa4e6", "patch": "@@ -100,7 +100,6 @@ static int gnat_eh_type_covers\t\t(tree, tree);\n static void gnat_parse_file\t\t(int);\n static rtx gnat_expand_expr\t\t(tree, rtx, enum machine_mode, int,\n \t\t\t\t\t rtx *);\n-static void gnat_expand_body\t\t(tree);\n static void internal_error_function\t(const char *, va_list *);\n static void gnat_adjust_rli\t\t(record_layout_info);\n static tree gnat_type_max_size\t\t(const_tree);\n@@ -149,8 +148,6 @@ static tree gnat_type_max_size\t\t(const_tree);\n #define LANG_HOOKS_DECL_PRINTABLE_NAME\tgnat_printable_name\n #undef  LANG_HOOKS_DWARF_NAME\n #define LANG_HOOKS_DWARF_NAME\t\tgnat_dwarf_name\n-#undef  LANG_HOOKS_CALLGRAPH_EXPAND_FUNCTION\n-#define LANG_HOOKS_CALLGRAPH_EXPAND_FUNCTION gnat_expand_body\n #undef  LANG_HOOKS_GIMPLIFY_EXPR\n #define LANG_HOOKS_GIMPLIFY_EXPR\tgnat_gimplify_expr\n #undef  LANG_HOOKS_TYPE_FOR_MODE\n@@ -678,14 +675,6 @@ gnat_expand_expr (tree exp, rtx target, enum machine_mode tmode,\n   return expand_expr_real (new, target, tmode, modifier, alt_rtl);\n }\n \n-/* Generate the RTL for the body of GNU_DECL.  */\n-\n-static void\n-gnat_expand_body (tree gnu_decl)\n-{\n-  tree_rest_of_compilation (gnu_decl);\n-}\n-\n /* Adjusts the RLI used to layout a record after all the fields have been\n    added.  We only handle the packed case and cause it to use the alignment\n    that will pad the record at the end.  */"}, {"sha": "f6af0525337780e8b09fdc61718ba1f16c0ecd6e", "filename": "gcc/c-common.c", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e89d6010089634063adfeeec679ac7fbf6afa4e6/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e89d6010089634063adfeeec679ac7fbf6afa4e6/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=e89d6010089634063adfeeec679ac7fbf6afa4e6", "patch": "@@ -4577,15 +4577,6 @@ c_expand_expr (tree exp, rtx target, enum machine_mode tmode,\n     }\n }\n \n-\n-/* Generate the RTL for the body of FNDECL.  */\n-\n-void\n-c_expand_body (tree fndecl)\n-{\n-  tree_rest_of_compilation (fndecl);\n-}\n-\n /* Hook used by staticp to handle language-specific tree codes.  */\n \n tree"}, {"sha": "83fc7b9e1611cc8b59d6d426c5c908819ac3252f", "filename": "gcc/c-decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e89d6010089634063adfeeec679ac7fbf6afa4e6/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e89d6010089634063adfeeec679ac7fbf6afa4e6/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=e89d6010089634063adfeeec679ac7fbf6afa4e6", "patch": "@@ -6799,7 +6799,7 @@ finish_function (void)\n \t     This should be cleaned up later and this conditional removed.  */\n \t  if (cgraph_global_info_ready)\n \t    {\n-\t      c_expand_body (fndecl);\n+\t      cgraph_add_new_function (fndecl, false);\n \t      return;\n \t    }\n "}, {"sha": "0218d260066863574f4a94bb8364a8afe0309997", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e89d6010089634063adfeeec679ac7fbf6afa4e6/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e89d6010089634063adfeeec679ac7fbf6afa4e6/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=e89d6010089634063adfeeec679ac7fbf6afa4e6", "patch": "@@ -76,15 +76,6 @@ along with GCC; see the file COPYING3.  If not see\n       ??? On the tree-ssa genericizing should take place here and we will avoid\n       need for these hooks (replacing them by genericizing hook)\n \n-    - expand_function callback\n-\n-      This function is used to expand function and pass it into RTL back-end.\n-      Front-end should not make any assumptions about when this function can be\n-      called.  In particular cgraph_assemble_pending_functions,\n-      varpool_assemble_pending_variables, cgraph_finalize_function,\n-      varpool_finalize_function, cgraph_optimize can cause arbitrarily\n-      previously finalized functions to be expanded.\n-\n     We implement two compilation modes.\n \n       - unit-at-a-time:  In this mode analyzing of all functions is deferred\n@@ -1074,7 +1065,9 @@ cgraph_expand_function (struct cgraph_node *node)\n     }\n \n   /* Generate RTL for the body of DECL.  */\n-  lang_hooks.callgraph.expand_function (decl);\n+  if (lang_hooks.callgraph.emit_associated_thunks)\n+    lang_hooks.callgraph.emit_associated_thunks (decl);\n+  tree_rest_of_compilation (decl);\n \n   /* Make sure that BE didn't give up on compiling.  */\n   /* ??? Can happen with nested function of extern inline.  */"}, {"sha": "a73da49014f5c6b9f76baf95a7eeb1db2fb3c88e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e89d6010089634063adfeeec679ac7fbf6afa4e6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e89d6010089634063adfeeec679ac7fbf6afa4e6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e89d6010089634063adfeeec679ac7fbf6afa4e6", "patch": "@@ -1,3 +1,13 @@\n+2007-09-11  Jan Hubicka <jh@suse.cz>\n+\n+\t* method.c (use_thunk): Use tree_rest_of_compilation\n+\t* cp-objecp-common.h (LANG_HOOKS_CALLGRAPH_EXPAND_FUNCTION): Kill.\n+\t(LANG_HOOKS_CALLGRAPH_EMIT_ASSOCIATED_THUNKS): Define.\n+\t* cp-tree.h (expand_body): Kill.\n+\t(emit_associated_thunks): Declare.\n+\t* semantics.c (emit_associated_thunks): Export.\n+\t(expand_body): Kill.\n+\n 2007-09-09  David Daney  <ddaney@avtrex.com>\n \n \tPR c++/33324"}, {"sha": "dd236131f0a3386138db29f1914c7048a54b8a7a", "filename": "gcc/cp/cp-objcp-common.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e89d6010089634063adfeeec679ac7fbf6afa4e6/gcc%2Fcp%2Fcp-objcp-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e89d6010089634063adfeeec679ac7fbf6afa4e6/gcc%2Fcp%2Fcp-objcp-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.h?ref=e89d6010089634063adfeeec679ac7fbf6afa4e6", "patch": "@@ -115,8 +115,8 @@ extern tree objcp_tsubst_copy_and_build (tree, tree, tsubst_flags_t,\n \n #undef LANG_HOOKS_CALLGRAPH_ANALYZE_EXPR\n #define LANG_HOOKS_CALLGRAPH_ANALYZE_EXPR cxx_callgraph_analyze_expr\n-#undef LANG_HOOKS_CALLGRAPH_EXPAND_FUNCTION\n-#define LANG_HOOKS_CALLGRAPH_EXPAND_FUNCTION expand_body\n+#undef LANG_HOOKS_CALLGRAPH_EMIT_ASSOCIATED_THUNKS\n+#define LANG_HOOKS_CALLGRAPH_EMIT_ASSOCIATED_THUNKS emit_associated_thunks\n \n #undef LANG_HOOKS_MAKE_TYPE\n #define LANG_HOOKS_MAKE_TYPE cxx_make_type"}, {"sha": "5efbdb7a4ac8113a393a253b1209b93e5085df94", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e89d6010089634063adfeeec679ac7fbf6afa4e6/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e89d6010089634063adfeeec679ac7fbf6afa4e6/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=e89d6010089634063adfeeec679ac7fbf6afa4e6", "patch": "@@ -4639,7 +4639,7 @@ extern tree finish_typeof\t\t\t(tree);\n extern tree finish_offsetof\t\t\t(tree);\n extern void finish_decl_cleanup\t\t\t(tree, tree);\n extern void finish_eh_cleanup\t\t\t(tree);\n-extern void expand_body\t\t\t\t(tree);\n+extern void emit_associated_thunks\t\t(tree);\n extern void finish_mem_initializers\t\t(tree);\n extern tree check_template_template_default_arg (tree);\n extern void expand_or_defer_fn\t\t\t(tree);"}, {"sha": "05e21ba97e7b048e32228b38f175ae6b867170c3", "filename": "gcc/cp/method.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e89d6010089634063adfeeec679ac7fbf6afa4e6/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e89d6010089634063adfeeec679ac7fbf6afa4e6/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=e89d6010089634063adfeeec679ac7fbf6afa4e6", "patch": "@@ -523,7 +523,7 @@ use_thunk (tree thunk_fndecl, bool emit_p)\n \n       thunk_fndecl = finish_function (0);\n       tree_lowering_passes (thunk_fndecl);\n-      expand_body (thunk_fndecl);\n+      tree_rest_of_compilation (thunk_fndecl);\n     }\n \n   pop_from_top_level ();"}, {"sha": "b1641023bd798eae3ce7bf0bb282b86c66689601", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e89d6010089634063adfeeec679ac7fbf6afa4e6/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e89d6010089634063adfeeec679ac7fbf6afa4e6/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=e89d6010089634063adfeeec679ac7fbf6afa4e6", "patch": "@@ -54,7 +54,6 @@ along with GCC; see the file COPYING3.  If not see\n \n static tree maybe_convert_cond (tree);\n static tree simplify_aggr_init_exprs_r (tree *, int *, void *);\n-static void emit_associated_thunks (tree);\n static tree finalize_nrv_r (tree *, int *, void *);\n \n \n@@ -3094,7 +3093,7 @@ simplify_aggr_init_expr (tree *tp)\n \n /* Emit all thunks to FN that should be emitted when FN is emitted.  */\n \n-static void\n+void\n emit_associated_thunks (tree fn)\n {\n   /* When we use vcall offsets, we emit thunks with the virtual\n@@ -3128,22 +3127,6 @@ emit_associated_thunks (tree fn)\n \n /* Generate RTL for FN.  */\n \n-void\n-expand_body (tree fn)\n-{\n-  /* Emit any thunks that should be emitted at the same time as FN.  */\n-  emit_associated_thunks (fn);\n-\n-  /* This function is only called from cgraph, or recursively from\n-     emit_associated_thunks.  In neither case should we be currently\n-     generating trees for a function.  */\n-  gcc_assert (function_depth == 0);\n-\n-  c_expand_body (fn);\n-}\n-\n-/* Generate RTL for FN.  */\n-\n void\n expand_or_defer_fn (tree fn)\n {"}, {"sha": "348d2b064bf0696d0e70e222f9baddb4b60b27bf", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e89d6010089634063adfeeec679ac7fbf6afa4e6/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e89d6010089634063adfeeec679ac7fbf6afa4e6/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=e89d6010089634063adfeeec679ac7fbf6afa4e6", "patch": "@@ -1,3 +1,8 @@\n+2007-09-11  Jan Hubicka <jh@suse.cz>\n+\n+\t* f95-lang.c (gfc_expand_function): Kill.\n+\t(LANG_HOOKS_CALLGRAPH_EXPAND_FUNCTION): Kill.\n+\n 2007-09-08  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/31547"}, {"sha": "c5c602bcc81dfdef117392dc8e5c72203f67bcb8", "filename": "gcc/fortran/f95-lang.c", "status": "modified", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e89d6010089634063adfeeec679ac7fbf6afa4e6/gcc%2Ffortran%2Ff95-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e89d6010089634063adfeeec679ac7fbf6afa4e6/gcc%2Ffortran%2Ff95-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ff95-lang.c?ref=e89d6010089634063adfeeec679ac7fbf6afa4e6", "patch": "@@ -98,7 +98,6 @@ int global_bindings_p (void);\n void insert_block (tree);\n static void gfc_clear_binding_stack (void);\n static void gfc_be_parse_file (int);\n-static void gfc_expand_function (tree);\n static alias_set_type gfc_get_alias_set (tree);\n \n #undef LANG_HOOKS_NAME\n@@ -135,7 +134,6 @@ static alias_set_type gfc_get_alias_set (tree);\n #define LANG_HOOKS_MARK_ADDRESSABLE        gfc_mark_addressable\n #define LANG_HOOKS_TYPE_FOR_MODE           gfc_type_for_mode\n #define LANG_HOOKS_TYPE_FOR_SIZE           gfc_type_for_size\n-#define LANG_HOOKS_CALLGRAPH_EXPAND_FUNCTION gfc_expand_function\n #define LANG_HOOKS_CLEAR_BINDING_STACK     gfc_clear_binding_stack\n #define LANG_HOOKS_GET_ALIAS_SET\t   gfc_get_alias_set\n #define LANG_HOOKS_OMP_PRIVATIZE_BY_REFERENCE\tgfc_omp_privatize_by_reference\n@@ -194,45 +192,6 @@ static GTY(()) struct binding_level *free_binding_level;\n    It is indexed by a RID_... value.  */\n tree *ridpointers = NULL;\n \n-/* language-specific flags.  */\n-\n-static void\n-gfc_expand_function (tree fndecl)\n-{\n-  tree t;\n-\n-  if (DECL_INITIAL (fndecl)\n-      && BLOCK_SUBBLOCKS (DECL_INITIAL (fndecl)))\n-    {\n-      /* Local static equivalenced variables are never seen by\n-\t check_global_declarations, so we need to output debug\n-\t info by hand.  */\n-\n-      t = BLOCK_SUBBLOCKS (DECL_INITIAL (fndecl));\n-      for (t = BLOCK_VARS (t); t; t = TREE_CHAIN (t))\n-\tif (TREE_CODE (t) == VAR_DECL && DECL_HAS_VALUE_EXPR_P (t)\n-\t    && TREE_STATIC (t))\n-\t  {\n-\t    tree expr = DECL_VALUE_EXPR (t);\n-\n-\t    if (TREE_CODE (expr) == COMPONENT_REF\n-\t\t&& TREE_CODE (TREE_OPERAND (expr, 0)) == VAR_DECL\n-\t\t&& TREE_CODE (TREE_TYPE (TREE_OPERAND (expr, 0)))\n-\t\t   == UNION_TYPE\n-\t\t&& varpool_node (TREE_OPERAND (expr, 0))->needed\n-\t\t&& errorcount == 0 && sorrycount == 0)\n-\t      {\n-\t\ttimevar_push (TV_SYMOUT);\n-\t\t(*debug_hooks->global_decl) (t);\n-\t\ttimevar_pop (TV_SYMOUT);\n-\t      }\n-\t  }\n-    }\n-\n-  tree_rest_of_compilation (fndecl);\n-}\n-\n-\n /* Prepare expr to be an argument of a TRUTH_NOT_EXPR,\n    or validate its data type for an `if' or `while' statement or ?..: exp.\n "}, {"sha": "ffee5982071202d99f4af8aa1b96b48d441f0a25", "filename": "gcc/function.c", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e89d6010089634063adfeeec679ac7fbf6afa4e6/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e89d6010089634063adfeeec679ac7fbf6afa4e6/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=e89d6010089634063adfeeec679ac7fbf6afa4e6", "patch": "@@ -4404,13 +4404,6 @@ expand_function_end (void)\n \t  }\n     }\n \n-  /* Possibly warn about unused parameters.\n-     When frontend does unit-at-a-time, the warning is already\n-     issued at finalization time.  */\n-  if (warn_unused_parameter\n-      && !lang_hooks.callgraph.expand_function)\n-    do_warn_unused_parameter (current_function_decl);\n-\n   /* End any sequences that failed to be closed due to syntax errors.  */\n   while (in_sequence_p ())\n     end_sequence ();"}, {"sha": "6cc295f33c71ff7e48f84a96dec8ba4165a862da", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e89d6010089634063adfeeec679ac7fbf6afa4e6/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e89d6010089634063adfeeec679ac7fbf6afa4e6/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=e89d6010089634063adfeeec679ac7fbf6afa4e6", "patch": "@@ -1,3 +1,8 @@\n+2007-09-11  Jan Hubicka <jh@suse.cz>\n+\n+\t* decl.c (java_expand_body): Kill.\n+\t(LANG_HOOKS_CALLGRAPH_EXPAND_FUNCTION): Kill.\n+\n 2007-09-06  Tom Tromey  <tromey@redhat.com>\n \n \t* jcf-parse.c (parse_class_file): Re-enter the current file."}, {"sha": "2cf87c2aa3610a06112f0f1afdb85fe7fadb79ba", "filename": "gcc/java/decl.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e89d6010089634063adfeeec679ac7fbf6afa4e6/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e89d6010089634063adfeeec679ac7fbf6afa4e6/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=e89d6010089634063adfeeec679ac7fbf6afa4e6", "patch": "@@ -1862,14 +1862,6 @@ finish_method (tree fndecl)\n   cgraph_finalize_function (fndecl, false);\n }\n \n-/* Optimize and expand a function's entire body.  */\n-\n-void\n-java_expand_body (tree fndecl)\n-{\n-  tree_rest_of_compilation (fndecl);\n-}\n-\n /* We pessimistically marked all methods and fields external until we\n    knew what set of classes we were planning to compile.  Now mark those\n    associated with CLASS to be generated locally as not external.  */"}, {"sha": "64b168c650c3cc8ff787a6b2745dd684f2aaf32c", "filename": "gcc/java/lang.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e89d6010089634063adfeeec679ac7fbf6afa4e6/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e89d6010089634063adfeeec679ac7fbf6afa4e6/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=e89d6010089634063adfeeec679ac7fbf6afa4e6", "patch": "@@ -192,9 +192,6 @@ struct language_function GTY(())\n #undef LANG_HOOKS_GET_CALLEE_FNDECL\n #define LANG_HOOKS_GET_CALLEE_FNDECL java_get_callee_fndecl\n \n-#undef LANG_HOOKS_CALLGRAPH_EXPAND_FUNCTION\n-#define LANG_HOOKS_CALLGRAPH_EXPAND_FUNCTION java_expand_body\n-\n #undef LANG_HOOKS_CLEAR_BINDING_STACK\n #define LANG_HOOKS_CLEAR_BINDING_STACK java_clear_binding_stack\n "}, {"sha": "523fc0b4766c8613e3bdf5e81cb557cf3bbae6fa", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e89d6010089634063adfeeec679ac7fbf6afa4e6/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e89d6010089634063adfeeec679ac7fbf6afa4e6/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=e89d6010089634063adfeeec679ac7fbf6afa4e6", "patch": "@@ -138,11 +138,11 @@ extern void lhd_omp_firstprivatize_type_sizes (struct gimplify_omp_ctx *,\n }\n \n #define LANG_HOOKS_CALLGRAPH_ANALYZE_EXPR lhd_callgraph_analyze_expr\n-#define LANG_HOOKS_CALLGRAPH_EXPAND_FUNCTION NULL\n+#define LANG_HOOKS_CALLGRAPH_EMIT_ASSOCIATED_THUNKS NULL\n \n #define LANG_HOOKS_CALLGRAPH_INITIALIZER { \\\n   LANG_HOOKS_CALLGRAPH_ANALYZE_EXPR, \\\n-  LANG_HOOKS_CALLGRAPH_EXPAND_FUNCTION, \\\n+  LANG_HOOKS_CALLGRAPH_EMIT_ASSOCIATED_THUNKS, \\\n }\n \n #define LANG_HOOKS_FUNCTION_INITIALIZER {\t\\"}, {"sha": "ad925a84c3b15ea219dabff3829a9e9dfd75ac94", "filename": "gcc/langhooks.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e89d6010089634063adfeeec679ac7fbf6afa4e6/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e89d6010089634063adfeeec679ac7fbf6afa4e6/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=e89d6010089634063adfeeec679ac7fbf6afa4e6", "patch": "@@ -44,8 +44,8 @@ struct lang_hooks_for_callgraph\n      are relevant to use of other declarations, mark them.  */\n   tree (*analyze_expr) (tree *, int *, tree);\n \n-  /* Produce RTL for function passed as argument.  */\n-  void (*expand_function) (tree);\n+  /* Emmit thunks associated to function.  */\n+  void (*emit_associated_thunks) (tree);\n };\n \n /* Lang hooks for management of language-specific data or status"}, {"sha": "0bcb7c7b302537703ab3a19c122917b04977cbeb", "filename": "gcc/passes.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e89d6010089634063adfeeec679ac7fbf6afa4e6/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e89d6010089634063adfeeec679ac7fbf6afa4e6/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=e89d6010089634063adfeeec679ac7fbf6afa4e6", "patch": "@@ -461,8 +461,7 @@ next_pass_1 (struct tree_opt_pass **list, struct tree_opt_pass *pass)\n        cgraph_expand_all_functions ()\n            for each node N in the cgraph\n \t       cgraph_expand_function (N)\n-\t\t   lang_hooks.callgraph.expand_function (DECL (N))\n-\t\t   \ttree_rest_of_compilation (DECL (N))  -> all_passes\n+\t\t  tree_rest_of_compilation (DECL (N))  -> all_passes\n */\n \n void"}, {"sha": "0c4b63840baea8a04b613fcb2969a5ff13dc0c60", "filename": "gcc/toplev.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e89d6010089634063adfeeec679ac7fbf6afa4e6/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e89d6010089634063adfeeec679ac7fbf6afa4e6/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=e89d6010089634063adfeeec679ac7fbf6afa4e6", "patch": "@@ -1785,11 +1785,6 @@ process_options (void)\n   if (flag_asynchronous_unwind_tables)\n     flag_unwind_tables = 1;\n \n-  /* Disable unit-at-a-time mode for frontends not supporting callgraph\n-     interface.  */\n-  if (flag_unit_at_a_time && ! lang_hooks.callgraph.expand_function)\n-    flag_unit_at_a_time = 0;\n-\n   if (!flag_unit_at_a_time)\n     flag_section_anchors = 0;\n "}]}