{"sha": "e812d4dd5df9befff0bc077349453e6126a8807d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTgxMmQ0ZGQ1ZGY5YmVmZmYwYmMwNzczNDk0NTNlNjEyNmE4ODA3ZA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2018-06-02T11:11:40Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2018-06-02T11:11:40Z"}, "message": "decl.c (gnat_to_gnu_entity): If this is not a definition...\n\n\t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Constant>: If this is\n\tnot a definition, retrieve the expression only if it's a compile-time\n\tknown value if we are just annotating types.\n\n\t* gcc-interface/utils.c (convert): Do not try to upcast properly for a\n\tconversion between tagged types in type_annotate_only mode.\n\nFrom-SVN: r261113", "tree": {"sha": "5c09157db8861d050ecc205a2deefa265593408f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c09157db8861d050ecc205a2deefa265593408f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e812d4dd5df9befff0bc077349453e6126a8807d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e812d4dd5df9befff0bc077349453e6126a8807d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e812d4dd5df9befff0bc077349453e6126a8807d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e812d4dd5df9befff0bc077349453e6126a8807d/comments", "author": null, "committer": null, "parents": [{"sha": "fcf7081cf9b5f2ccbc5167806fb8e377f100efec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcf7081cf9b5f2ccbc5167806fb8e377f100efec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fcf7081cf9b5f2ccbc5167806fb8e377f100efec"}], "stats": {"total": 32, "additions": 22, "deletions": 10}, "files": [{"sha": "6b883b9dd3a944ce04ec0c845dc12337925d828e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e812d4dd5df9befff0bc077349453e6126a8807d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e812d4dd5df9befff0bc077349453e6126a8807d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e812d4dd5df9befff0bc077349453e6126a8807d", "patch": "@@ -1,3 +1,12 @@\n+2018-06-02  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Constant>: If this is\n+\tnot a definition, retrieve the expression only if it's a compile-time\n+\tknown value if we are just annotating types.\n+\n+\t* gcc-interface/utils.c (convert): Do not try to upcast properly for a\n+\tconversion between tagged types in type_annotate_only mode.\n+\n 2018-06-02  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/ada-tree.h (TYPE_PADDING_FOR_COMPONENT): New macro."}, {"sha": "c4828848703dd88471fd1836ff02a41b5c2612cf", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e812d4dd5df9befff0bc077349453e6126a8807d/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e812d4dd5df9befff0bc077349453e6126a8807d/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=e812d4dd5df9befff0bc077349453e6126a8807d", "patch": "@@ -601,16 +601,16 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \t was defined to represent.  This is necessary to avoid generating dumb\n \t elaboration code in simple cases, but we may throw it away later if it\n \t is not a constant.  But do not retrieve it if it is an allocator since\n-\t the designated type might still be dummy at this point.  */\n+\t the designated type might still be dummy at this point.  Note that we\n+\t invoke gnat_to_gnu_external and not gnat_to_gnu because the expression\n+\t may contain N_Expression_With_Actions nodes and thus declarations of\n+\t objects from other units that we need to discard.  */\n       if (!definition\n \t  && !No_Initialization (Declaration_Node (gnat_entity))\n-\t  && Present (Expression (Declaration_Node (gnat_entity)))\n-\t  && Nkind (Expression (Declaration_Node (gnat_entity)))\n-\t     != N_Allocator)\n-\t  /* The expression may contain N_Expression_With_Actions nodes and\n-\t     thus object declarations from other units.  Discard them.  */\n-\tgnu_expr\n-\t  = gnat_to_gnu_external (Expression (Declaration_Node (gnat_entity)));\n+\t  && Present (gnat_temp = Expression (Declaration_Node (gnat_entity)))\n+\t  && Nkind (gnat_temp) != N_Allocator\n+\t  && (!type_annotate_only || Compile_Time_Known_Value (gnat_temp)))\n+\tgnu_expr = gnat_to_gnu_external (gnat_temp);\n \n       /* ... fall through ... */\n "}, {"sha": "d415f492cb94b0b91950ec79eeba8be2a9eec91b", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e812d4dd5df9befff0bc077349453e6126a8807d/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e812d4dd5df9befff0bc077349453e6126a8807d/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=e812d4dd5df9befff0bc077349453e6126a8807d", "patch": "@@ -4631,9 +4631,12 @@ convert (tree type, tree expr)\n \t\t\t\t\t   etype)))\n     return build1 (VIEW_CONVERT_EXPR, type, expr);\n \n-  /* If we are converting between tagged types, try to upcast properly.  */\n+  /* If we are converting between tagged types, try to upcast properly.\n+     But don't do it if we are just annotating types since tagged types\n+     aren't fully laid out in this mode.  */\n   else if (ecode == RECORD_TYPE && code == RECORD_TYPE\n-\t   && TYPE_ALIGN_OK (etype) && TYPE_ALIGN_OK (type))\n+\t   && TYPE_ALIGN_OK (etype) && TYPE_ALIGN_OK (type)\n+\t   && !type_annotate_only)\n     {\n       tree child_etype = etype;\n       do {"}]}