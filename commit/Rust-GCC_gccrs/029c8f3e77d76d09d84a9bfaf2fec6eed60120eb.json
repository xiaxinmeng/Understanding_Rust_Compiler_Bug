{"sha": "029c8f3e77d76d09d84a9bfaf2fec6eed60120eb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDI5YzhmM2U3N2Q3NmQwOWQ4NGE5YmZhZjJmZWM2ZWVkNjAxMjBlYg==", "commit": {"author": {"name": "Ralf Wildenhues", "email": "Ralf.Wildenhues@gmx.de", "date": "2011-02-13T11:45:53Z"}, "committer": {"name": "Ralf Wildenhues", "email": "rwild@gcc.gnu.org", "date": "2011-02-13T11:45:53Z"}, "message": "Remove freebsd1 from libtool.m4 macros and config.rpath.\n\n/:\n\tImport from Libtool and gnulib:\n\n\t2011-01-27  Gerald Pfeifer  <gerald@pfeifer.com>\n\n\tPrepare for supporting FreeBSD 10.\n\t* config.rpath: Remove handling of freebsd1* which soon would\n\tmatch FreeBSD 10.0.\n\n\t2011-01-20  Gerald Pfeifer  <gerald@pfeifer.com>  (tiny change)\n\n\tRemove support for FreeBSD 1.x.\n\t* libtool.m4 (_LT_LINKER_SHLIBS)\n\t(_LT_SYS_DYNAMIC_LINKER): Remove handling of freebsd1* which\n\tsoon would incorrectly match FreeBSD 10.0.\n\nboehm-gc/:\n\t* configure: Regenerate.\n\ngcc/:\n\t* configure: Regenerate.\n\nlibffi/:\n\t* configure: Regenerate.\n\nlibgfortran/:\n\t* Makefile.in: Regenerate.\n\t* aclocal.m4: Likewise.\n\t* configure: Likewise.\n\nlibgo/:\n\t* config/libtool.m4: (_LT_LINKER_SHLIBS)\n\t(_LT_SYS_DYNAMIC_LINKER): Remove handling of freebsd1* which\n\tsoon would incorrectly match FreeBSD 10.0.\n\t* configure: Regenerate.\n\nlibgomp/:\n\t* configure: Regenerate.\n\nlibjava/:\n\t* configure: Regenerate.\n\t* shlibpath.m4 (AC_LIBTOOL_SYS_DYNAMIC_LINKER): Remove handling\n\tof freebsd1* which soon would incorrectly match FreeBSD 10.0.\n\nlibjava/classpath/:\n\t* config.rpath, ltcf-c.sh, ltcf-gcj.sh, ltconfig: Remove\n\thandling of freebsd1* which soon would match FreeBSD 10.0.\n\t* configure: Regenerate.\n\nlibjava/libltdl/:\n\t* acinclude.m4 (AC_LIBTOOL_PROG_LD_SHLIBS)\n\t(AC_LIBTOOL_SYS_DYNAMIC_LINKER): Remove handling\n\tof freebsd1* which soon would incorrectly match FreeBSD 10.0.\n\t* configure: Regenerate.\n\nlibmudflap/:\n\t* configure: Regenerate.\n\nlibobjc/:\n\t* configure: Regenerate.\n\nlibquadmath/:\n\t* Makefile.in: Regenerate.\n\t* aclocal.m4: Likewise.\n\t* configure: Likewise.\n\nlibssp/:\n\t* Makefile.in: Regenerate.\n\t* aclocal.m4: Likewise.\n\t* configure: Likewise.\n\nlibstdc++-v3/:\n\t* configure: Regenerate.\n\nlto-plugin/:\n\t* Makefile.in: Regenerate.\n\t* aclocal.m4: Regenerate.\n\t* configure: Regenerate.\n\nzlib/:\n\t* configure: Regenerate.\n\nFrom-SVN: r170106", "tree": {"sha": "b1a72daa25241b2ce7c926a5ae6d58b8343992b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b1a72daa25241b2ce7c926a5ae6d58b8343992b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/comments", "author": null, "committer": null, "parents": [{"sha": "a4404ff533a012bcec898aa14ac7ab14257edb97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4404ff533a012bcec898aa14ac7ab14257edb97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4404ff533a012bcec898aa14ac7ab14257edb97"}], "stats": {"total": 490, "additions": 178, "deletions": 312}, "files": [{"sha": "87589018f9c3ba0e6d53b4f23f6a78ce2df0ac58", "filename": "ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=029c8f3e77d76d09d84a9bfaf2fec6eed60120eb", "patch": "@@ -1,3 +1,20 @@\n+2011-02-13  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n+\n+\tImport from Libtool and gnulib:\n+\n+\t2011-01-27  Gerald Pfeifer  <gerald@pfeifer.com>\n+\n+\tPrepare for supporting FreeBSD 10.\n+\t* config.rpath: Remove handling of freebsd1* which soon would\n+\tmatch FreeBSD 10.0.\n+\n+\t2011-01-20  Gerald Pfeifer  <gerald@pfeifer.com>  (tiny change)\n+\n+\tRemove support for FreeBSD 1.x.\n+\t* libtool.m4 (_LT_LINKER_SHLIBS)\n+\t(_LT_SYS_DYNAMIC_LINKER): Remove handling of freebsd1* which\n+\tsoon would incorrectly match FreeBSD 10.0.\n+\n 2011-02-12  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n \n \tPR binutils/12283"}, {"sha": "3e4a6fa38dde25d30d1533f7df902f40f3ac692b", "filename": "boehm-gc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/boehm-gc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/boehm-gc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2FChangeLog?ref=029c8f3e77d76d09d84a9bfaf2fec6eed60120eb", "patch": "@@ -1,3 +1,7 @@\n+2011-02-13  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n+\n+\t* configure: Regenerate.\n+\n 2011-02-02  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* configure.ac: Don't use libdl on mips-sgi-irix6*."}, {"sha": "9e9cd279b949e880edeca49615fbc47ce9fe7572", "filename": "boehm-gc/configure", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/boehm-gc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/boehm-gc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fconfigure?ref=029c8f3e77d76d09d84a9bfaf2fec6eed60120eb", "patch": "@@ -9592,10 +9592,6 @@ if test -z \"$aix_libpath\"; then aix_libpath=\"/usr/lib:/lib\"; fi\n       hardcode_shlibpath_var=no\n       ;;\n \n-    freebsd1*)\n-      ld_shlibs=no\n-      ;;\n-\n     # FreeBSD 2.2.[012] allows us to include c++rt0.o to get C++ constructor\n     # support.  Future versions do this automatically, but an explicit c++rt0.o\n     # does not break anything, and helps significantly (at the cost of a little\n@@ -10517,10 +10513,6 @@ dgux*)\n   shlibpath_var=LD_LIBRARY_PATH\n   ;;\n \n-freebsd1*)\n-  dynamic_linker=no\n-  ;;\n-\n freebsd* | dragonfly*)\n   # DragonFly does not have aout.  When/if they implement a new\n   # versioning mechanism, adjust this.\n@@ -11398,7 +11390,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11401 \"configure\"\n+#line 11393 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11504,7 +11496,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11507 \"configure\"\n+#line 11499 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -14204,10 +14196,6 @@ dgux*)\n   shlibpath_var=LD_LIBRARY_PATH\n   ;;\n \n-freebsd1*)\n-  dynamic_linker=no\n-  ;;\n-\n freebsd* | dragonfly*)\n   # DragonFly does not have aout.  When/if they implement a new\n   # versioning mechanism, adjust this."}, {"sha": "4dea75957c2b81f963186d84aad76dfe1ce5195c", "filename": "config.rpath", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/config.rpath", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/config.rpath", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config.rpath?ref=029c8f3e77d76d09d84a9bfaf2fec6eed60120eb", "patch": "@@ -284,9 +284,6 @@ else\n     dgux*)\n       hardcode_libdir_flag_spec='-L$libdir'\n       ;;\n-    freebsd1*)\n-      ld_shlibs=no\n-      ;;\n     freebsd2.2*)\n       hardcode_libdir_flag_spec='-R$libdir'\n       hardcode_direct=yes\n@@ -448,8 +445,6 @@ case \"$host_os\" in\n     ;;\n   dgux*)\n     ;;\n-  freebsd1*)\n-    ;;\n   freebsd*)\n     ;;\n   gnu*)"}, {"sha": "c301cdfb52be93b65b30704d5a96baefe8ed982e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=029c8f3e77d76d09d84a9bfaf2fec6eed60120eb", "patch": "@@ -1,3 +1,7 @@\n+2011-02-13  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n+\n+\t* configure: Regenerate.\n+\n 2011-02-12  Mike Stump  <mikestump@comcast.net>\n \n \t* config/t-darwin (build/slashify): Allow others to reuse easier."}, {"sha": "91fad3330afb55637ca85538a4cdd0c7d465189b", "filename": "gcc/configure", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=029c8f3e77d76d09d84a9bfaf2fec6eed60120eb", "patch": "@@ -15728,10 +15728,6 @@ if test -z \"$aix_libpath\"; then aix_libpath=\"/usr/lib:/lib\"; fi\n       hardcode_shlibpath_var=no\n       ;;\n \n-    freebsd1*)\n-      ld_shlibs=no\n-      ;;\n-\n     # FreeBSD 2.2.[012] allows us to include c++rt0.o to get C++ constructor\n     # support.  Future versions do this automatically, but an explicit c++rt0.o\n     # does not break anything, and helps significantly (at the cost of a little\n@@ -16650,10 +16646,6 @@ dgux*)\n   shlibpath_var=LD_LIBRARY_PATH\n   ;;\n \n-freebsd1*)\n-  dynamic_linker=no\n-  ;;\n-\n freebsd* | dragonfly*)\n   # DragonFly does not have aout.  When/if they implement a new\n   # versioning mechanism, adjust this.\n@@ -17513,7 +17505,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 17516 \"configure\"\n+#line 17508 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -17619,7 +17611,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 17622 \"configure\"\n+#line 17614 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -20313,10 +20305,6 @@ dgux*)\n   shlibpath_var=LD_LIBRARY_PATH\n   ;;\n \n-freebsd1*)\n-  dynamic_linker=no\n-  ;;\n-\n freebsd* | dragonfly*)\n   # DragonFly does not have aout.  When/if they implement a new\n   # versioning mechanism, adjust this."}, {"sha": "7834697d6437e8d2195392f96da1cf2f60941d5f", "filename": "libffi/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/libffi%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/libffi%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2FChangeLog?ref=029c8f3e77d76d09d84a9bfaf2fec6eed60120eb", "patch": "@@ -1,3 +1,7 @@\n+2011-02-13  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n+\n+\t* configure: Regenerate.\n+\n 2011-02-09  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \tPR libffi/46661"}, {"sha": "64787470333ba55428d4cfce6c608c8f92976cdd", "filename": "libffi/configure", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/libffi%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/libffi%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fconfigure?ref=029c8f3e77d76d09d84a9bfaf2fec6eed60120eb", "patch": "@@ -8989,10 +8989,6 @@ if test -z \"$aix_libpath\"; then aix_libpath=\"/usr/lib:/lib\"; fi\n       hardcode_shlibpath_var=no\n       ;;\n \n-    freebsd1*)\n-      ld_shlibs=no\n-      ;;\n-\n     # FreeBSD 2.2.[012] allows us to include c++rt0.o to get C++ constructor\n     # support.  Future versions do this automatically, but an explicit c++rt0.o\n     # does not break anything, and helps significantly (at the cost of a little\n@@ -9911,10 +9907,6 @@ dgux*)\n   shlibpath_var=LD_LIBRARY_PATH\n   ;;\n \n-freebsd1*)\n-  dynamic_linker=no\n-  ;;\n-\n freebsd* | dragonfly*)\n   # DragonFly does not have aout.  When/if they implement a new\n   # versioning mechanism, adjust this.\n@@ -10774,7 +10766,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 10777 \"configure\"\n+#line 10769 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -10880,7 +10872,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 10883 \"configure\"\n+#line 10875 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H"}, {"sha": "b85a6bfcbaf0c5e19567901aff2afe4278928715", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=029c8f3e77d76d09d84a9bfaf2fec6eed60120eb", "patch": "@@ -1,3 +1,9 @@\n+2011-02-13  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n+\n+\t* Makefile.in: Regenerate.\n+\t* aclocal.m4: Likewise.\n+\t* configure: Likewise.\n+\n 2011-02-05  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libgfortran/47567"}, {"sha": "dac8bb84cc9d9313e1e4930b6fbd5390a79f4c22", "filename": "libgfortran/Makefile.in", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/libgfortran%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/libgfortran%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.in?ref=029c8f3e77d76d09d84a9bfaf2fec6eed60120eb", "patch": "@@ -45,16 +45,15 @@ DIST_COMMON = ChangeLog $(srcdir)/Makefile.in $(srcdir)/Makefile.am \\\n \t$(srcdir)/config.h.in $(srcdir)/../mkinstalldirs \\\n \t$(srcdir)/libgfortran.spec.in $(srcdir)/../depcomp\n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n-am__aclocal_m4_deps = $(top_srcdir)/../ltoptions.m4 \\\n-\t$(top_srcdir)/../ltsugar.m4 $(top_srcdir)/../ltversion.m4 \\\n-\t$(top_srcdir)/../lt~obsolete.m4 \\\n-\t$(top_srcdir)/../config/depstand.m4 \\\n+am__aclocal_m4_deps = $(top_srcdir)/../config/depstand.m4 \\\n \t$(top_srcdir)/../config/lead-dot.m4 \\\n \t$(top_srcdir)/../config/lthostflags.m4 \\\n \t$(top_srcdir)/../config/multi.m4 \\\n \t$(top_srcdir)/../config/override.m4 \\\n-\t$(top_srcdir)/../config/stdint.m4 $(top_srcdir)/acinclude.m4 \\\n-\t$(top_srcdir)/../config/acx.m4 \\\n+\t$(top_srcdir)/../config/stdint.m4 \\\n+\t$(top_srcdir)/../ltoptions.m4 $(top_srcdir)/../ltsugar.m4 \\\n+\t$(top_srcdir)/../ltversion.m4 $(top_srcdir)/../lt~obsolete.m4 \\\n+\t$(top_srcdir)/acinclude.m4 $(top_srcdir)/../config/acx.m4 \\\n \t$(top_srcdir)/../config/no-executables.m4 \\\n \t$(top_srcdir)/../libtool.m4 $(top_srcdir)/configure.ac\n am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\"}, {"sha": "cbac4af8f19dae891ca979e2e0d205faa1b86714", "filename": "libgfortran/aclocal.m4", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/libgfortran%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/libgfortran%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Faclocal.m4?ref=029c8f3e77d76d09d84a9bfaf2fec6eed60120eb", "patch": "@@ -968,14 +968,14 @@ AC_SUBST([am__tar])\n AC_SUBST([am__untar])\n ]) # _AM_PROG_TAR\n \n-m4_include([../ltoptions.m4])\n-m4_include([../ltsugar.m4])\n-m4_include([../ltversion.m4])\n-m4_include([../lt~obsolete.m4])\n m4_include([../config/depstand.m4])\n m4_include([../config/lead-dot.m4])\n m4_include([../config/lthostflags.m4])\n m4_include([../config/multi.m4])\n m4_include([../config/override.m4])\n m4_include([../config/stdint.m4])\n+m4_include([../ltoptions.m4])\n+m4_include([../ltsugar.m4])\n+m4_include([../ltversion.m4])\n+m4_include([../lt~obsolete.m4])\n m4_include([acinclude.m4])"}, {"sha": "42f72b5019bfc4e806dc55ed328553cbb9bf48dd", "filename": "libgfortran/configure", "status": "modified", "additions": 2, "deletions": 18, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/libgfortran%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/libgfortran%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure?ref=029c8f3e77d76d09d84a9bfaf2fec6eed60120eb", "patch": "@@ -10303,10 +10303,6 @@ if test -z \"$aix_libpath\"; then aix_libpath=\"/usr/lib:/lib\"; fi\n       hardcode_shlibpath_var=no\n       ;;\n \n-    freebsd1*)\n-      ld_shlibs=no\n-      ;;\n-\n     # FreeBSD 2.2.[012] allows us to include c++rt0.o to get C++ constructor\n     # support.  Future versions do this automatically, but an explicit c++rt0.o\n     # does not break anything, and helps significantly (at the cost of a little\n@@ -11228,10 +11224,6 @@ dgux*)\n   shlibpath_var=LD_LIBRARY_PATH\n   ;;\n \n-freebsd1*)\n-  dynamic_linker=no\n-  ;;\n-\n freebsd* | dragonfly*)\n   # DragonFly does not have aout.  When/if they implement a new\n   # versioning mechanism, adjust this.\n@@ -12109,7 +12101,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 12112 \"configure\"\n+#line 12104 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -12215,7 +12207,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 12218 \"configure\"\n+#line 12210 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -14147,10 +14139,6 @@ if test -z \"$aix_libpath\"; then aix_libpath=\"/usr/lib:/lib\"; fi\n       hardcode_shlibpath_var_FC=no\n       ;;\n \n-    freebsd1*)\n-      ld_shlibs_FC=no\n-      ;;\n-\n     # FreeBSD 2.2.[012] allows us to include c++rt0.o to get C++ constructor\n     # support.  Future versions do this automatically, but an explicit c++rt0.o\n     # does not break anything, and helps significantly (at the cost of a little\n@@ -14864,10 +14852,6 @@ dgux*)\n   shlibpath_var=LD_LIBRARY_PATH\n   ;;\n \n-freebsd1*)\n-  dynamic_linker=no\n-  ;;\n-\n freebsd* | dragonfly*)\n   # DragonFly does not have aout.  When/if they implement a new\n   # versioning mechanism, adjust this."}, {"sha": "a546739eb4edf7b2cf5939a6fa2f824acc932aeb", "filename": "libgo/config/libtool.m4", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/libgo%2Fconfig%2Flibtool.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/libgo%2Fconfig%2Flibtool.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfig%2Flibtool.m4?ref=029c8f3e77d76d09d84a9bfaf2fec6eed60120eb", "patch": "@@ -2284,10 +2284,6 @@ dgux*)\n   shlibpath_var=LD_LIBRARY_PATH\n   ;;\n \n-freebsd1*)\n-  dynamic_linker=no\n-  ;;\n-\n freebsd* | dragonfly*)\n   # DragonFly does not have aout.  When/if they implement a new\n   # versioning mechanism, adjust this.\n@@ -4814,10 +4810,6 @@ _LT_EOF\n       _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n       ;;\n \n-    freebsd1*)\n-      _LT_TAGVAR(ld_shlibs, $1)=no\n-      ;;\n-\n     # FreeBSD 2.2.[012] allows us to include c++rt0.o to get C++ constructor\n     # support.  Future versions do this automatically, but an explicit c++rt0.o\n     # does not break anything, and helps significantly (at the cost of a little"}, {"sha": "d524adf17ea5de3e47c0dd7d6ac9805d763611ac", "filename": "libgo/configure", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/libgo%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/libgo%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfigure?ref=029c8f3e77d76d09d84a9bfaf2fec6eed60120eb", "patch": "@@ -9121,10 +9121,6 @@ if test -z \"$aix_libpath\"; then aix_libpath=\"/usr/lib:/lib\"; fi\n       hardcode_shlibpath_var=no\n       ;;\n \n-    freebsd1*)\n-      ld_shlibs=no\n-      ;;\n-\n     # FreeBSD 2.2.[012] allows us to include c++rt0.o to get C++ constructor\n     # support.  Future versions do this automatically, but an explicit c++rt0.o\n     # does not break anything, and helps significantly (at the cost of a little\n@@ -10043,10 +10039,6 @@ dgux*)\n   shlibpath_var=LD_LIBRARY_PATH\n   ;;\n \n-freebsd1*)\n-  dynamic_linker=no\n-  ;;\n-\n freebsd* | dragonfly*)\n   # DragonFly does not have aout.  When/if they implement a new\n   # versioning mechanism, adjust this.\n@@ -10906,7 +10898,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 10909 \"configure\"\n+#line 10901 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11012,7 +11004,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11015 \"configure\"\n+#line 11007 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -12545,10 +12537,6 @@ if test -z \"$aix_libpath\"; then aix_libpath=\"/usr/lib:/lib\"; fi\n       hardcode_shlibpath_var_GO=no\n       ;;\n \n-    freebsd1*)\n-      ld_shlibs_GO=no\n-      ;;\n-\n     # FreeBSD 2.2.[012] allows us to include c++rt0.o to get C++ constructor\n     # support.  Future versions do this automatically, but an explicit c++rt0.o\n     # does not break anything, and helps significantly (at the cost of a little"}, {"sha": "69627d3b151398b72125ad3cb4c7baea7aed2684", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=029c8f3e77d76d09d84a9bfaf2fec6eed60120eb", "patch": "@@ -1,3 +1,7 @@\n+2011-02-13  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n+\n+\t* configure: Regenerate.\n+\n 2011-01-20  Benjamin Kosnik  <bkoz@redhat.com>\n \n \tPR libstdc++/36104"}, {"sha": "3368c0ec615b63016708b7bc1458453249d085e1", "filename": "libgomp/configure", "status": "modified", "additions": 2, "deletions": 18, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/libgomp%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/libgomp%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfigure?ref=029c8f3e77d76d09d84a9bfaf2fec6eed60120eb", "patch": "@@ -9305,10 +9305,6 @@ if test -z \"$aix_libpath\"; then aix_libpath=\"/usr/lib:/lib\"; fi\n       hardcode_shlibpath_var=no\n       ;;\n \n-    freebsd1*)\n-      ld_shlibs=no\n-      ;;\n-\n     # FreeBSD 2.2.[012] allows us to include c++rt0.o to get C++ constructor\n     # support.  Future versions do this automatically, but an explicit c++rt0.o\n     # does not break anything, and helps significantly (at the cost of a little\n@@ -10227,10 +10223,6 @@ dgux*)\n   shlibpath_var=LD_LIBRARY_PATH\n   ;;\n \n-freebsd1*)\n-  dynamic_linker=no\n-  ;;\n-\n freebsd* | dragonfly*)\n   # DragonFly does not have aout.  When/if they implement a new\n   # versioning mechanism, adjust this.\n@@ -11090,7 +11082,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11093 \"configure\"\n+#line 11085 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11196,7 +11188,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11199 \"configure\"\n+#line 11191 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -13160,10 +13152,6 @@ if test -z \"$aix_libpath\"; then aix_libpath=\"/usr/lib:/lib\"; fi\n       hardcode_shlibpath_var_FC=no\n       ;;\n \n-    freebsd1*)\n-      ld_shlibs_FC=no\n-      ;;\n-\n     # FreeBSD 2.2.[012] allows us to include c++rt0.o to get C++ constructor\n     # support.  Future versions do this automatically, but an explicit c++rt0.o\n     # does not break anything, and helps significantly (at the cost of a little\n@@ -13874,10 +13862,6 @@ dgux*)\n   shlibpath_var=LD_LIBRARY_PATH\n   ;;\n \n-freebsd1*)\n-  dynamic_linker=no\n-  ;;\n-\n freebsd* | dragonfly*)\n   # DragonFly does not have aout.  When/if they implement a new\n   # versioning mechanism, adjust this."}, {"sha": "84ff74d886ff18f9bb7f4222350002a2a59e15b9", "filename": "libjava/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=029c8f3e77d76d09d84a9bfaf2fec6eed60120eb", "patch": "@@ -1,3 +1,9 @@\n+2011-02-13  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n+\n+\t* configure: Regenerate.\n+\t* shlibpath.m4 (AC_LIBTOOL_SYS_DYNAMIC_LINKER): Remove handling\n+\tof freebsd1* which soon would incorrectly match FreeBSD 10.0.\n+\n 2011-02-04  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n \n \tPR java/21206"}, {"sha": "9eb70ac14e58b4ef934c7e9f9db6c9d2791e4623", "filename": "libjava/classpath/ChangeLog.gcj", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/libjava%2Fclasspath%2FChangeLog.gcj", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/libjava%2Fclasspath%2FChangeLog.gcj", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2FChangeLog.gcj?ref=029c8f3e77d76d09d84a9bfaf2fec6eed60120eb", "patch": "@@ -1,3 +1,9 @@\n+2011-02-13  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n+\n+\t* config.rpath, ltcf-c.sh, ltcf-gcj.sh, ltconfig: Remove\n+\thandling of freebsd1* which soon would match FreeBSD 10.0.\n+\t* configure: Regenerate.\n+\n 2011-01-31  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* configure.ac (GCJ_JAVAC): Run false rather than no."}, {"sha": "def43dcc5e71c6304f219e56ffb3bae9c6a5803e", "filename": "libjava/classpath/config.rpath", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/libjava%2Fclasspath%2Fconfig.rpath", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/libjava%2Fclasspath%2Fconfig.rpath", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fconfig.rpath?ref=029c8f3e77d76d09d84a9bfaf2fec6eed60120eb", "patch": "@@ -357,9 +357,6 @@ else\n     dgux*)\n       hardcode_libdir_flag_spec='-L$libdir'\n       ;;\n-    freebsd1*)\n-      ld_shlibs=no\n-      ;;\n     freebsd2.2*)\n       hardcode_libdir_flag_spec='-R$libdir'\n       hardcode_direct=yes\n@@ -534,8 +531,6 @@ case \"$host_os\" in\n   dgux*)\n     library_names_spec='$libname$shrext'\n     ;;\n-  freebsd1*)\n-    ;;\n   freebsd* | dragonfly*)\n     case \"$host_os\" in\n       freebsd[123]*)"}, {"sha": "2274f648cf980cdacff3c5dcf64f8aca1a350841", "filename": "libjava/classpath/configure", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/libjava%2Fclasspath%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/libjava%2Fclasspath%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fconfigure?ref=029c8f3e77d76d09d84a9bfaf2fec6eed60120eb", "patch": "@@ -10013,10 +10013,6 @@ if test -z \"$aix_libpath\"; then aix_libpath=\"/usr/lib:/lib\"; fi\n       hardcode_shlibpath_var=no\n       ;;\n \n-    freebsd1*)\n-      ld_shlibs=no\n-      ;;\n-\n     # FreeBSD 2.2.[012] allows us to include c++rt0.o to get C++ constructor\n     # support.  Future versions do this automatically, but an explicit c++rt0.o\n     # does not break anything, and helps significantly (at the cost of a little\n@@ -10938,10 +10934,6 @@ dgux*)\n   shlibpath_var=LD_LIBRARY_PATH\n   ;;\n \n-freebsd1*)\n-  dynamic_linker=no\n-  ;;\n-\n freebsd* | dragonfly*)\n   # DragonFly does not have aout.  When/if they implement a new\n   # versioning mechanism, adjust this.\n@@ -11819,7 +11811,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11822 \"configure\"\n+#line 11814 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11925,7 +11917,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11928 \"configure\"\n+#line 11920 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -16001,10 +15993,6 @@ dgux*)\n   shlibpath_var=LD_LIBRARY_PATH\n   ;;\n \n-freebsd1*)\n-  dynamic_linker=no\n-  ;;\n-\n freebsd* | dragonfly*)\n   # DragonFly does not have aout.  When/if they implement a new\n   # versioning mechanism, adjust this.\n@@ -23826,7 +23814,7 @@ else\n JAVA_TEST=Object.java\n CLASS_TEST=Object.class\n cat << \\EOF > $JAVA_TEST\n-/* #line 23829 \"configure\" */\n+/* #line 23817 \"configure\" */\n package java.lang;\n \n public class Object\n@@ -23919,7 +23907,7 @@ EOF\n if uudecode$EXEEXT Test.uue; then\n         ac_cv_prog_uudecode_base64=yes\n else\n-        echo \"configure: 23922: uudecode had trouble decoding base 64 file 'Test.uue'\" >&5\n+        echo \"configure: 23910: uudecode had trouble decoding base 64 file 'Test.uue'\" >&5\n         echo \"configure: failed file was:\" >&5\n         cat Test.uue >&5\n         ac_cv_prog_uudecode_base64=no\n@@ -23947,7 +23935,7 @@ JAVA_TEST=Test.java\n CLASS_TEST=Test.class\n TEST=Test\n cat << \\EOF > $JAVA_TEST\n-/* [#]line 23950 \"configure\" */\n+/* [#]line 23938 \"configure\" */\n public class Test {\n public static void main (String args[]) {\n         System.exit (0);\n@@ -24155,7 +24143,7 @@ if test \"x${use_glibj_zip}\" = xfalse || \\\n   JAVA_TEST=Test.java\n   CLASS_TEST=Test.class\n   cat << \\EOF > $JAVA_TEST\n-  /* #line 24158 \"configure\" */\n+  /* #line 24146 \"configure\" */\n   public class Test\n   {\n     public static void main(String args)"}, {"sha": "565e033254df69db22865584025db947c4b2caa1", "filename": "libjava/classpath/ltcf-c.sh", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/libjava%2Fclasspath%2Fltcf-c.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/libjava%2Fclasspath%2Fltcf-c.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fltcf-c.sh?ref=029c8f3e77d76d09d84a9bfaf2fec6eed60120eb", "patch": "@@ -423,10 +423,6 @@ else\n     link_all_deplibs=yes\n     ;;\n \n-  freebsd1*)\n-  ld_shlibs=no\n-  ;;\n-\n   # FreeBSD 2.2.[012] allows us to include c++rt0.o to get C++ constructor\n   # support.  Future versions do this automatically, but an explicit c++rt0.o\n   # does not break anything, and helps significantly (at the cost of a little"}, {"sha": "b1a42d6d550a27135403ef801ab8bd74ce6293f0", "filename": "libjava/classpath/ltcf-gcj.sh", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/libjava%2Fclasspath%2Fltcf-gcj.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/libjava%2Fclasspath%2Fltcf-gcj.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fltcf-gcj.sh?ref=029c8f3e77d76d09d84a9bfaf2fec6eed60120eb", "patch": "@@ -422,10 +422,6 @@ else\n     ;;\n \n \n-  freebsd1*)\n-    ld_shlibs=no\n-    ;;\n-\n   # FreeBSD 2.2.[012] allows us to include c++rt0.o to get C++ constructor\n   # support.  Future versions do this automatically, but an explicit c++rt0.o\n   # does not break anything, and helps significantly (at the cost of a little"}, {"sha": "743d95135fb840ca9c49bb5c52228172c678d653", "filename": "libjava/classpath/ltconfig", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/libjava%2Fclasspath%2Fltconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/libjava%2Fclasspath%2Fltconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fltconfig?ref=029c8f3e77d76d09d84a9bfaf2fec6eed60120eb", "patch": "@@ -1128,10 +1128,6 @@ darwin* | rhapsody*)\n   sys_lib_dlsearch_path_spec='/usr/local/lib /lib /usr/lib'\n   ;;\n \n-freebsd1*)\n-  dynamic_linker=no\n-  ;;\n-\n freebsd*)\n   objformat=`test -x /usr/bin/objformat && /usr/bin/objformat || echo elf`\n   version_type=freebsd-$objformat"}, {"sha": "d4a97ba22ba1631631324398015516491270afbd", "filename": "libjava/configure", "status": "modified", "additions": 3, "deletions": 23, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/libjava%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/libjava%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure?ref=029c8f3e77d76d09d84a9bfaf2fec6eed60120eb", "patch": "@@ -6175,10 +6175,6 @@ dgux*)\n   shlibpath_var=LD_LIBRARY_PATH\n   ;;\n \n-freebsd1*)\n-  dynamic_linker=no\n-  ;;\n-\n freebsd*)\n   objformat=`test -x /usr/bin/objformat && /usr/bin/objformat || echo aout`\n   version_type=freebsd-$objformat\n@@ -11550,10 +11546,6 @@ if test -z \"$aix_libpath\"; then aix_libpath=\"/usr/lib:/lib\"; fi\n       hardcode_shlibpath_var=no\n       ;;\n \n-    freebsd1*)\n-      ld_shlibs=no\n-      ;;\n-\n     # FreeBSD 2.2.[012] allows us to include c++rt0.o to get C++ constructor\n     # support.  Future versions do this automatically, but an explicit c++rt0.o\n     # does not break anything, and helps significantly (at the cost of a little\n@@ -12475,10 +12467,6 @@ dgux*)\n   shlibpath_var=LD_LIBRARY_PATH\n   ;;\n \n-freebsd1*)\n-  dynamic_linker=no\n-  ;;\n-\n freebsd* | dragonfly*)\n   # DragonFly does not have aout.  When/if they implement a new\n   # versioning mechanism, adjust this.\n@@ -13356,7 +13344,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 13359 \"configure\"\n+#line 13347 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -13462,7 +13450,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 13465 \"configure\"\n+#line 13453 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -16162,10 +16150,6 @@ dgux*)\n   shlibpath_var=LD_LIBRARY_PATH\n   ;;\n \n-freebsd1*)\n-  dynamic_linker=no\n-  ;;\n-\n freebsd* | dragonfly*)\n   # DragonFly does not have aout.  When/if they implement a new\n   # versioning mechanism, adjust this.\n@@ -18522,10 +18506,6 @@ if test -z \"$aix_libpath\"; then aix_libpath=\"/usr/lib:/lib\"; fi\n       hardcode_shlibpath_var_GCJ=no\n       ;;\n \n-    freebsd1*)\n-      ld_shlibs_GCJ=no\n-      ;;\n-\n     # FreeBSD 2.2.[012] allows us to include c++rt0.o to get C++ constructor\n     # support.  Future versions do this automatically, but an explicit c++rt0.o\n     # does not break anything, and helps significantly (at the cost of a little\n@@ -19463,7 +19443,7 @@ if test \"${enable_sjlj_exceptions+set}\" = set; then :\n   enableval=$enable_sjlj_exceptions; :\n else\n   cat > conftest.$ac_ext << EOF\n-#line 19466 \"configure\"\n+#line 19446 \"configure\"\n struct S { ~S(); };\n void bar();\n void foo()"}, {"sha": "708cb383578407c36ce492e829adef67be9e40f7", "filename": "libjava/libltdl/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/libjava%2Flibltdl%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/libjava%2Flibltdl%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Flibltdl%2FChangeLog?ref=029c8f3e77d76d09d84a9bfaf2fec6eed60120eb", "patch": "@@ -1,3 +1,10 @@\n+2011-02-13  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n+\n+\t* acinclude.m4 (AC_LIBTOOL_PROG_LD_SHLIBS)\n+\t(AC_LIBTOOL_SYS_DYNAMIC_LINKER): Remove handling\n+\tof freebsd1* which soon would incorrectly match FreeBSD 10.0.\n+\t* configure: Regenerate.\n+\n 2010-05-04  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n \n \tPR other/43620"}, {"sha": "55beab162e76b04302b3baa7268be85092d9cc8a", "filename": "libjava/libltdl/acinclude.m4", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/libjava%2Flibltdl%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/libjava%2Flibltdl%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Flibltdl%2Facinclude.m4?ref=029c8f3e77d76d09d84a9bfaf2fec6eed60120eb", "patch": "@@ -1347,10 +1347,6 @@ dgux*)\n   shlibpath_var=LD_LIBRARY_PATH\n   ;;\n \n-freebsd1*)\n-  dynamic_linker=no\n-  ;;\n-\n kfreebsd*-gnu)\n   version_type=linux\n   need_lib_prefix=no\n@@ -5661,10 +5657,6 @@ EOF\n       _LT_AC_TAGVAR(hardcode_shlibpath_var, $1)=no\n       ;;\n \n-    freebsd1*)\n-      _LT_AC_TAGVAR(ld_shlibs, $1)=no\n-      ;;\n-\n     # FreeBSD 2.2.[012] allows us to include c++rt0.o to get C++ constructor\n     # support.  Future versions do this automatically, but an explicit c++rt0.o\n     # does not break anything, and helps significantly (at the cost of a little"}, {"sha": "f47d95f73695ce1edad54b493bc16a081d07bda0", "filename": "libjava/libltdl/configure", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/libjava%2Flibltdl%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/libjava%2Flibltdl%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Flibltdl%2Fconfigure?ref=029c8f3e77d76d09d84a9bfaf2fec6eed60120eb", "patch": "@@ -7343,10 +7343,6 @@ if test -z \"$aix_libpath\"; then aix_libpath=\"/usr/lib:/lib\"; fi\n       hardcode_shlibpath_var=no\n       ;;\n \n-    freebsd1*)\n-      ld_shlibs=no\n-      ;;\n-\n     # FreeBSD 2.2.[012] allows us to include c++rt0.o to get C++ constructor\n     # support.  Future versions do this automatically, but an explicit c++rt0.o\n     # does not break anything, and helps significantly (at the cost of a little\n@@ -7942,10 +7938,6 @@ dgux*)\n   shlibpath_var=LD_LIBRARY_PATH\n   ;;\n \n-freebsd1*)\n-  dynamic_linker=no\n-  ;;\n-\n kfreebsd*-gnu)\n   version_type=linux\n   need_lib_prefix=no\n@@ -8107,7 +8099,7 @@ linux*)\n   libsuff=\n   case \"$host_cpu\" in\n   x86_64*|s390x*|powerpc64*)\n-    echo '#line 8110 \"configure\"' > conftest.$ac_ext\n+    echo '#line 8102 \"configure\"' > conftest.$ac_ext\n     if { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_compile\\\"\"; } >&5\n   (eval $ac_compile) 2>&5\n   ac_status=$?\n@@ -8660,7 +8652,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<EOF\n-#line 8663 \"configure\"\n+#line 8655 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -8758,7 +8750,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<EOF\n-#line 8761 \"configure\"\n+#line 8753 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -10599,7 +10591,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<EOF\n-#line 10602 \"configure\"\n+#line 10594 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H"}, {"sha": "363affa8712069d9140335a5f1ccaa37254b13a6", "filename": "libjava/shlibpath.m4", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/libjava%2Fshlibpath.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/libjava%2Fshlibpath.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fshlibpath.m4?ref=029c8f3e77d76d09d84a9bfaf2fec6eed60120eb", "patch": "@@ -228,10 +228,6 @@ dgux*)\n   shlibpath_var=LD_LIBRARY_PATH\n   ;;\n \n-freebsd1*)\n-  dynamic_linker=no\n-  ;;\n-\n freebsd*)\n   objformat=`test -x /usr/bin/objformat && /usr/bin/objformat || echo aout`\n   version_type=freebsd-$objformat"}, {"sha": "920c73ec3618b8cd804e26c022b6e225428ef8c3", "filename": "libmudflap/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/libmudflap%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/libmudflap%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmudflap%2FChangeLog?ref=029c8f3e77d76d09d84a9bfaf2fec6eed60120eb", "patch": "@@ -1,3 +1,7 @@\n+2011-02-13  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n+\n+\t* configure: Regenerate.\n+\n 2011-01-03  Jakub Jelinek  <jakub@redhat.com>\n \n \t* mf-runtime.c (__mf_usage): Update copyright notice dates."}, {"sha": "11bcca18439c3d2bc37d5eb934c7150819f3c09d", "filename": "libmudflap/configure", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/libmudflap%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/libmudflap%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmudflap%2Fconfigure?ref=029c8f3e77d76d09d84a9bfaf2fec6eed60120eb", "patch": "@@ -8806,10 +8806,6 @@ if test -z \"$aix_libpath\"; then aix_libpath=\"/usr/lib:/lib\"; fi\n       hardcode_shlibpath_var=no\n       ;;\n \n-    freebsd1*)\n-      ld_shlibs=no\n-      ;;\n-\n     # FreeBSD 2.2.[012] allows us to include c++rt0.o to get C++ constructor\n     # support.  Future versions do this automatically, but an explicit c++rt0.o\n     # does not break anything, and helps significantly (at the cost of a little\n@@ -9728,10 +9724,6 @@ dgux*)\n   shlibpath_var=LD_LIBRARY_PATH\n   ;;\n \n-freebsd1*)\n-  dynamic_linker=no\n-  ;;\n-\n freebsd* | dragonfly*)\n   # DragonFly does not have aout.  When/if they implement a new\n   # versioning mechanism, adjust this.\n@@ -10591,7 +10583,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 10594 \"configure\"\n+#line 10586 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -10697,7 +10689,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 10700 \"configure\"\n+#line 10692 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11469,7 +11461,7 @@ rm -f core conftest.err conftest.$ac_objext \\\n \tCFLAGS=\"$chktls_save_CFLAGS\"\n \tif test \"X$thread_CFLAGS\" != Xfailed; then\n \t  CFLAGS=\"$thread_CFLAGS $chktls_save_CFLAGS\"\n-\t  if test \"$cross_compiling\" = yes; then :\n+ \t  \t  \t  \t  \t  \t  if test \"$cross_compiling\" = yes; then :\n   { { $as_echo \"$as_me:${as_lineno-$LINENO}: error: in \\`$ac_pwd':\" >&5\n $as_echo \"$as_me: error: in \\`$ac_pwd':\" >&2;}\n as_fn_error \"cannot run test program while cross compiling"}, {"sha": "3d85c98204161bd6f25bf17c4d9432fd97513bf9", "filename": "libobjc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/libobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/libobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FChangeLog?ref=029c8f3e77d76d09d84a9bfaf2fec6eed60120eb", "patch": "@@ -1,3 +1,7 @@\n+2011-02-13  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n+\n+\t* configure: Regenerate.\n+\n 2010-12-26  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* init.c (create_tree_of_subclasses_inherited_from): Use"}, {"sha": "8f670e132e5d52bb663f5e39206a9114ae2b44a9", "filename": "libobjc/configure", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/libobjc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/libobjc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fconfigure?ref=029c8f3e77d76d09d84a9bfaf2fec6eed60120eb", "patch": "@@ -8785,10 +8785,6 @@ if test -z \"$aix_libpath\"; then aix_libpath=\"/usr/lib:/lib\"; fi\n       hardcode_shlibpath_var=no\n       ;;\n \n-    freebsd1*)\n-      ld_shlibs=no\n-      ;;\n-\n     # FreeBSD 2.2.[012] allows us to include c++rt0.o to get C++ constructor\n     # support.  Future versions do this automatically, but an explicit c++rt0.o\n     # does not break anything, and helps significantly (at the cost of a little\n@@ -9710,10 +9706,6 @@ dgux*)\n   shlibpath_var=LD_LIBRARY_PATH\n   ;;\n \n-freebsd1*)\n-  dynamic_linker=no\n-  ;;\n-\n freebsd* | dragonfly*)\n   # DragonFly does not have aout.  When/if they implement a new\n   # versioning mechanism, adjust this.\n@@ -10591,7 +10583,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 10594 \"configure\"\n+#line 10586 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -10697,7 +10689,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 10700 \"configure\"\n+#line 10692 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11480,7 +11472,7 @@ if test \"${enable_sjlj_exceptions+set}\" = set; then :\n   enableval=$enable_sjlj_exceptions; :\n else\n   cat > conftest.$ac_ext << EOF\n-#line 11483 \"configure\"\n+#line 11475 \"configure\"\n @interface Frob\n @end\n @implementation Frob"}, {"sha": "0db9cbc86d6947c8a4f38e3da3711fd2c5ebfa05", "filename": "libquadmath/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/libquadmath%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/libquadmath%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2FChangeLog?ref=029c8f3e77d76d09d84a9bfaf2fec6eed60120eb", "patch": "@@ -1,3 +1,9 @@\n+2011-02-13  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n+\n+\t* Makefile.in: Regenerate.\n+\t* aclocal.m4: Likewise.\n+\t* configure: Likewise.\n+\n 2011-01-31  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libquadmath/47293"}, {"sha": "ac4d68710a48e7853b109e1ac6bb40a05b38795e", "filename": "libquadmath/Makefile.in", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/libquadmath%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/libquadmath%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2FMakefile.in?ref=029c8f3e77d76d09d84a9bfaf2fec6eed60120eb", "patch": "@@ -43,16 +43,17 @@ DIST_COMMON = ChangeLog $(srcdir)/Makefile.in $(srcdir)/Makefile.am \\\n \t$(srcdir)/config.h.in $(srcdir)/../mkinstalldirs \\\n \t$(srcdir)/../depcomp $(libquadmath_TEXINFOS)\n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n-am__aclocal_m4_deps = $(top_srcdir)/../ltoptions.m4 \\\n-\t$(top_srcdir)/../ltsugar.m4 $(top_srcdir)/../ltversion.m4 \\\n-\t$(top_srcdir)/../lt~obsolete.m4 $(top_srcdir)/../config/acx.m4 \\\n+am__aclocal_m4_deps = $(top_srcdir)/../config/acx.m4 \\\n \t$(top_srcdir)/../config/depstand.m4 \\\n \t$(top_srcdir)/../config/lead-dot.m4 \\\n \t$(top_srcdir)/../config/lthostflags.m4 \\\n \t$(top_srcdir)/../config/multi.m4 \\\n \t$(top_srcdir)/../config/no-executables.m4 \\\n-\t$(top_srcdir)/../config/override.m4 $(top_srcdir)/acinclude.m4 \\\n-\t$(top_srcdir)/../libtool.m4 $(top_srcdir)/configure.ac\n+\t$(top_srcdir)/../config/override.m4 \\\n+\t$(top_srcdir)/../ltoptions.m4 $(top_srcdir)/../ltsugar.m4 \\\n+\t$(top_srcdir)/../ltversion.m4 $(top_srcdir)/../lt~obsolete.m4 \\\n+\t$(top_srcdir)/acinclude.m4 $(top_srcdir)/../libtool.m4 \\\n+\t$(top_srcdir)/configure.ac\n am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\\n \t$(ACLOCAL_M4)\n am__CONFIG_DISTCLEAN_FILES = config.status config.cache config.log \\"}, {"sha": "6116764e681de3707994c91043a0d9965f84dfd0", "filename": "libquadmath/aclocal.m4", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/libquadmath%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/libquadmath%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Faclocal.m4?ref=029c8f3e77d76d09d84a9bfaf2fec6eed60120eb", "patch": "@@ -1003,15 +1003,15 @@ AC_SUBST([am__tar])\n AC_SUBST([am__untar])\n ]) # _AM_PROG_TAR\n \n-m4_include([../ltoptions.m4])\n-m4_include([../ltsugar.m4])\n-m4_include([../ltversion.m4])\n-m4_include([../lt~obsolete.m4])\n m4_include([../config/acx.m4])\n m4_include([../config/depstand.m4])\n m4_include([../config/lead-dot.m4])\n m4_include([../config/lthostflags.m4])\n m4_include([../config/multi.m4])\n m4_include([../config/no-executables.m4])\n m4_include([../config/override.m4])\n+m4_include([../ltoptions.m4])\n+m4_include([../ltsugar.m4])\n+m4_include([../ltversion.m4])\n+m4_include([../lt~obsolete.m4])\n m4_include([acinclude.m4])"}, {"sha": "0225d6c6885eb9b6817b56e6a3f17773f496ff6d", "filename": "libquadmath/configure", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/libquadmath%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/libquadmath%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fconfigure?ref=029c8f3e77d76d09d84a9bfaf2fec6eed60120eb", "patch": "@@ -8651,10 +8651,6 @@ if test -z \"$aix_libpath\"; then aix_libpath=\"/usr/lib:/lib\"; fi\n       hardcode_shlibpath_var=no\n       ;;\n \n-    freebsd1*)\n-      ld_shlibs=no\n-      ;;\n-\n     # FreeBSD 2.2.[012] allows us to include c++rt0.o to get C++ constructor\n     # support.  Future versions do this automatically, but an explicit c++rt0.o\n     # does not break anything, and helps significantly (at the cost of a little\n@@ -9576,10 +9572,6 @@ dgux*)\n   shlibpath_var=LD_LIBRARY_PATH\n   ;;\n \n-freebsd1*)\n-  dynamic_linker=no\n-  ;;\n-\n freebsd* | dragonfly*)\n   # DragonFly does not have aout.  When/if they implement a new\n   # versioning mechanism, adjust this.\n@@ -10457,7 +10449,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 10460 \"configure\"\n+#line 10452 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -10563,7 +10555,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 10566 \"configure\"\n+#line 10558 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H"}, {"sha": "1e7b9acecd8caffee33366326ad8fe87ba719c08", "filename": "libssp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/libssp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/libssp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libssp%2FChangeLog?ref=029c8f3e77d76d09d84a9bfaf2fec6eed60120eb", "patch": "@@ -1,3 +1,9 @@\n+2011-02-13  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n+\n+\t* Makefile.in: Regenerate.\n+\t* aclocal.m4: Likewise.\n+\t* configure: Likewise.\n+\n 2010-12-06  Dave Korn  <dave.korn.cygwin@gmail.com>\n \n \tPR target/40125"}, {"sha": "a7db7a9c0912b404e4ecaf49567deb35e34a6071", "filename": "libssp/Makefile.in", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/libssp%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/libssp%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libssp%2FMakefile.in?ref=029c8f3e77d76d09d84a9bfaf2fec6eed60120eb", "patch": "@@ -43,16 +43,16 @@ DIST_COMMON = ChangeLog $(srcdir)/Makefile.in $(srcdir)/Makefile.am \\\n \t$(top_srcdir)/ssp/ssp.h.in $(srcdir)/../depcomp \\\n \t$(nobase_libsubinclude_HEADERS)\n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n-am__aclocal_m4_deps = $(top_srcdir)/../libtool.m4 \\\n-\t$(top_srcdir)/../ltoptions.m4 $(top_srcdir)/../ltsugar.m4 \\\n-\t$(top_srcdir)/../ltversion.m4 $(top_srcdir)/../lt~obsolete.m4 \\\n-\t$(top_srcdir)/../config/acx.m4 \\\n+am__aclocal_m4_deps = $(top_srcdir)/../config/acx.m4 \\\n \t$(top_srcdir)/../config/depstand.m4 \\\n \t$(top_srcdir)/../config/lead-dot.m4 \\\n \t$(top_srcdir)/../config/lthostflags.m4 \\\n \t$(top_srcdir)/../config/multi.m4 \\\n \t$(top_srcdir)/../config/no-executables.m4 \\\n-\t$(top_srcdir)/../config/override.m4 $(top_srcdir)/configure.ac\n+\t$(top_srcdir)/../config/override.m4 \\\n+\t$(top_srcdir)/../libtool.m4 $(top_srcdir)/../ltoptions.m4 \\\n+\t$(top_srcdir)/../ltsugar.m4 $(top_srcdir)/../ltversion.m4 \\\n+\t$(top_srcdir)/../lt~obsolete.m4 $(top_srcdir)/configure.ac\n am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\\n \t$(ACLOCAL_M4)\n am__CONFIG_DISTCLEAN_FILES = config.status config.cache config.log \\"}, {"sha": "0c2e5ea36606337f2fe68bf1375f84f5a6f2b7f4", "filename": "libssp/aclocal.m4", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/libssp%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/libssp%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libssp%2Faclocal.m4?ref=029c8f3e77d76d09d84a9bfaf2fec6eed60120eb", "patch": "@@ -968,15 +968,15 @@ AC_SUBST([am__tar])\n AC_SUBST([am__untar])\n ]) # _AM_PROG_TAR\n \n-m4_include([../libtool.m4])\n-m4_include([../ltoptions.m4])\n-m4_include([../ltsugar.m4])\n-m4_include([../ltversion.m4])\n-m4_include([../lt~obsolete.m4])\n m4_include([../config/acx.m4])\n m4_include([../config/depstand.m4])\n m4_include([../config/lead-dot.m4])\n m4_include([../config/lthostflags.m4])\n m4_include([../config/multi.m4])\n m4_include([../config/no-executables.m4])\n m4_include([../config/override.m4])\n+m4_include([../libtool.m4])\n+m4_include([../ltoptions.m4])\n+m4_include([../ltsugar.m4])\n+m4_include([../ltversion.m4])\n+m4_include([../lt~obsolete.m4])"}, {"sha": "85a6a0a941a8170993ac4713659a32176e0c1c92", "filename": "libssp/configure", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/libssp%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/libssp%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libssp%2Fconfigure?ref=029c8f3e77d76d09d84a9bfaf2fec6eed60120eb", "patch": "@@ -8841,10 +8841,6 @@ if test -z \"$aix_libpath\"; then aix_libpath=\"/usr/lib:/lib\"; fi\n       hardcode_shlibpath_var=no\n       ;;\n \n-    freebsd1*)\n-      ld_shlibs=no\n-      ;;\n-\n     # FreeBSD 2.2.[012] allows us to include c++rt0.o to get C++ constructor\n     # support.  Future versions do this automatically, but an explicit c++rt0.o\n     # does not break anything, and helps significantly (at the cost of a little\n@@ -9766,10 +9762,6 @@ dgux*)\n   shlibpath_var=LD_LIBRARY_PATH\n   ;;\n \n-freebsd1*)\n-  dynamic_linker=no\n-  ;;\n-\n freebsd* | dragonfly*)\n   # DragonFly does not have aout.  When/if they implement a new\n   # versioning mechanism, adjust this.\n@@ -10647,7 +10639,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 10650 \"configure\"\n+#line 10642 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -10753,7 +10745,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 10756 \"configure\"\n+#line 10748 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H"}, {"sha": "ddd507f1f37eb090f381d32174fd3f574d775de6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=029c8f3e77d76d09d84a9bfaf2fec6eed60120eb", "patch": "@@ -1,3 +1,7 @@\n+2011-02-13  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n+\n+\t* configure: Regenerate.\n+\n 2011-02-12  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR libstdc++/47709"}, {"sha": "53129c673327803a21a3277c8e9d238a2f95cb56", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 8, "deletions": 20, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=029c8f3e77d76d09d84a9bfaf2fec6eed60120eb", "patch": "@@ -9684,10 +9684,6 @@ if test -z \"$aix_libpath\"; then aix_libpath=\"/usr/lib:/lib\"; fi\n       hardcode_shlibpath_var=no\n       ;;\n \n-    freebsd1*)\n-      ld_shlibs=no\n-      ;;\n-\n     # FreeBSD 2.2.[012] allows us to include c++rt0.o to get C++ constructor\n     # support.  Future versions do this automatically, but an explicit c++rt0.o\n     # does not break anything, and helps significantly (at the cost of a little\n@@ -10609,10 +10605,6 @@ dgux*)\n   shlibpath_var=LD_LIBRARY_PATH\n   ;;\n \n-freebsd1*)\n-  dynamic_linker=no\n-  ;;\n-\n freebsd* | dragonfly*)\n   # DragonFly does not have aout.  When/if they implement a new\n   # versioning mechanism, adjust this.\n@@ -11490,7 +11482,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11493 \"configure\"\n+#line 11485 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11596,7 +11588,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11599 \"configure\"\n+#line 11591 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -14296,10 +14288,6 @@ dgux*)\n   shlibpath_var=LD_LIBRARY_PATH\n   ;;\n \n-freebsd1*)\n-  dynamic_linker=no\n-  ;;\n-\n freebsd* | dragonfly*)\n   # DragonFly does not have aout.  When/if they implement a new\n   # versioning mechanism, adjust this.\n@@ -14958,7 +14946,7 @@ fi\n     #\n     # Fake what AC_TRY_COMPILE does.  XXX Look at redoing this new-style.\n     cat > conftest.$ac_ext << EOF\n-#line 14961 \"configure\"\n+#line 14949 \"configure\"\n struct S { ~S(); };\n void bar();\n void foo()\n@@ -15326,7 +15314,7 @@ $as_echo \"$glibcxx_cv_atomic_long_long\" >&6; }\n   # Fake what AC_TRY_COMPILE does.\n \n     cat > conftest.$ac_ext << EOF\n-#line 15329 \"configure\"\n+#line 15317 \"configure\"\n int main()\n {\n   typedef bool atomic_type;\n@@ -15363,7 +15351,7 @@ $as_echo \"$glibcxx_cv_atomic_bool\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15366 \"configure\"\n+#line 15354 \"configure\"\n int main()\n {\n   typedef short atomic_type;\n@@ -15400,7 +15388,7 @@ $as_echo \"$glibcxx_cv_atomic_short\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15403 \"configure\"\n+#line 15391 \"configure\"\n int main()\n {\n   // NB: _Atomic_word not necessarily int.\n@@ -15438,7 +15426,7 @@ $as_echo \"$glibcxx_cv_atomic_int\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15441 \"configure\"\n+#line 15429 \"configure\"\n int main()\n {\n   typedef long long atomic_type;\n@@ -15514,7 +15502,7 @@ $as_echo \"$as_me: WARNING: Performance of certain classes will degrade as a resu\n   # unnecessary for this test.\n \n     cat > conftest.$ac_ext << EOF\n-#line 15517 \"configure\"\n+#line 15505 \"configure\"\n int main()\n {\n   _Decimal32 d1;"}, {"sha": "71bcee83c872d0f108dc32d887c629ea5b3274cf", "filename": "libtool.m4", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/libtool.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/libtool.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libtool.m4?ref=029c8f3e77d76d09d84a9bfaf2fec6eed60120eb", "patch": "@@ -2266,10 +2266,6 @@ dgux*)\n   shlibpath_var=LD_LIBRARY_PATH\n   ;;\n \n-freebsd1*)\n-  dynamic_linker=no\n-  ;;\n-\n freebsd* | dragonfly*)\n   # DragonFly does not have aout.  When/if they implement a new\n   # versioning mechanism, adjust this.\n@@ -4796,10 +4792,6 @@ _LT_EOF\n       _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n       ;;\n \n-    freebsd1*)\n-      _LT_TAGVAR(ld_shlibs, $1)=no\n-      ;;\n-\n     # FreeBSD 2.2.[012] allows us to include c++rt0.o to get C++ constructor\n     # support.  Future versions do this automatically, but an explicit c++rt0.o\n     # does not break anything, and helps significantly (at the cost of a little"}, {"sha": "e4a19cd812439850419b8cfad8dfe9e780e03f7f", "filename": "lto-plugin/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/lto-plugin%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/lto-plugin%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/lto-plugin%2FChangeLog?ref=029c8f3e77d76d09d84a9bfaf2fec6eed60120eb", "patch": "@@ -1,3 +1,9 @@\n+2011-02-13  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n+\n+\t* Makefile.in: Regenerate.\n+\t* aclocal.m4: Regenerate.\n+\t* configure: Regenerate.\n+\n 2011-02-12  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n \n \t* Makefile.am (all-local): Rename from 'all'."}, {"sha": "86edb99bfa72a6462d1a581f57036fe716fe85ec", "filename": "lto-plugin/Makefile.in", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/lto-plugin%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/lto-plugin%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/lto-plugin%2FMakefile.in?ref=029c8f3e77d76d09d84a9bfaf2fec6eed60120eb", "patch": "@@ -42,14 +42,14 @@ DIST_COMMON = ChangeLog $(srcdir)/Makefile.in $(srcdir)/Makefile.am \\\n \t$(top_srcdir)/configure $(am__configure_deps) \\\n \t$(srcdir)/config.h.in $(srcdir)/../mkinstalldirs\n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n-am__aclocal_m4_deps = $(top_srcdir)/../libtool.m4 \\\n-\t$(top_srcdir)/../ltoptions.m4 $(top_srcdir)/../ltsugar.m4 \\\n-\t$(top_srcdir)/../ltversion.m4 $(top_srcdir)/../lt~obsolete.m4 \\\n-\t$(top_srcdir)/../config/acx.m4 \\\n+am__aclocal_m4_deps = $(top_srcdir)/../config/acx.m4 \\\n \t$(top_srcdir)/../config/depstand.m4 \\\n \t$(top_srcdir)/../config/lead-dot.m4 \\\n \t$(top_srcdir)/../config/lthostflags.m4 \\\n-\t$(top_srcdir)/../config/override.m4 $(top_srcdir)/configure.ac\n+\t$(top_srcdir)/../config/override.m4 \\\n+\t$(top_srcdir)/../libtool.m4 $(top_srcdir)/../ltoptions.m4 \\\n+\t$(top_srcdir)/../ltsugar.m4 $(top_srcdir)/../ltversion.m4 \\\n+\t$(top_srcdir)/../lt~obsolete.m4 $(top_srcdir)/configure.ac\n am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\\n \t$(ACLOCAL_M4)\n am__CONFIG_DISTCLEAN_FILES = config.status config.cache config.log \\"}, {"sha": "7c370a7d01bb3463079a8a443ab82aed9a743f77", "filename": "lto-plugin/aclocal.m4", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/lto-plugin%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/lto-plugin%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/lto-plugin%2Faclocal.m4?ref=029c8f3e77d76d09d84a9bfaf2fec6eed60120eb", "patch": "@@ -968,13 +968,13 @@ AC_SUBST([am__tar])\n AC_SUBST([am__untar])\n ]) # _AM_PROG_TAR\n \n-m4_include([../libtool.m4])\n-m4_include([../ltoptions.m4])\n-m4_include([../ltsugar.m4])\n-m4_include([../ltversion.m4])\n-m4_include([../lt~obsolete.m4])\n m4_include([../config/acx.m4])\n m4_include([../config/depstand.m4])\n m4_include([../config/lead-dot.m4])\n m4_include([../config/lthostflags.m4])\n m4_include([../config/override.m4])\n+m4_include([../libtool.m4])\n+m4_include([../ltoptions.m4])\n+m4_include([../ltsugar.m4])\n+m4_include([../ltversion.m4])\n+m4_include([../lt~obsolete.m4])"}, {"sha": "c9c84a10511161912acad97838baa7e7f78a33f2", "filename": "lto-plugin/configure", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/lto-plugin%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/lto-plugin%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/lto-plugin%2Fconfigure?ref=029c8f3e77d76d09d84a9bfaf2fec6eed60120eb", "patch": "@@ -8721,10 +8721,6 @@ if test -z \"$aix_libpath\"; then aix_libpath=\"/usr/lib:/lib\"; fi\n       hardcode_shlibpath_var=no\n       ;;\n \n-    freebsd1*)\n-      ld_shlibs=no\n-      ;;\n-\n     # FreeBSD 2.2.[012] allows us to include c++rt0.o to get C++ constructor\n     # support.  Future versions do this automatically, but an explicit c++rt0.o\n     # does not break anything, and helps significantly (at the cost of a little\n@@ -9643,10 +9639,6 @@ dgux*)\n   shlibpath_var=LD_LIBRARY_PATH\n   ;;\n \n-freebsd1*)\n-  dynamic_linker=no\n-  ;;\n-\n freebsd* | dragonfly*)\n   # DragonFly does not have aout.  When/if they implement a new\n   # versioning mechanism, adjust this.\n@@ -10506,7 +10498,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 10509 \"configure\"\n+#line 10501 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -10612,7 +10604,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 10615 \"configure\"\n+#line 10607 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H"}, {"sha": "d3b34b5fb52ff37b47ad08ad888f1e6f11073da7", "filename": "zlib/ChangeLog.gcj", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/zlib%2FChangeLog.gcj", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/zlib%2FChangeLog.gcj", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/zlib%2FChangeLog.gcj?ref=029c8f3e77d76d09d84a9bfaf2fec6eed60120eb", "patch": "@@ -1,3 +1,7 @@\n+2011-02-13  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n+\n+\t* configure: Regenerate.\n+\n 2010-04-02  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n \n \t* Makefile.in: Regenerate."}, {"sha": "8be4e40c82c703a43cbd7fff1aaa08a88668cb81", "filename": "zlib/configure", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/zlib%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/029c8f3e77d76d09d84a9bfaf2fec6eed60120eb/zlib%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/zlib%2Fconfigure?ref=029c8f3e77d76d09d84a9bfaf2fec6eed60120eb", "patch": "@@ -8588,10 +8588,6 @@ if test -z \"$aix_libpath\"; then aix_libpath=\"/usr/lib:/lib\"; fi\n       hardcode_shlibpath_var=no\n       ;;\n \n-    freebsd1*)\n-      ld_shlibs=no\n-      ;;\n-\n     # FreeBSD 2.2.[012] allows us to include c++rt0.o to get C++ constructor\n     # support.  Future versions do this automatically, but an explicit c++rt0.o\n     # does not break anything, and helps significantly (at the cost of a little\n@@ -9513,10 +9509,6 @@ dgux*)\n   shlibpath_var=LD_LIBRARY_PATH\n   ;;\n \n-freebsd1*)\n-  dynamic_linker=no\n-  ;;\n-\n freebsd* | dragonfly*)\n   # DragonFly does not have aout.  When/if they implement a new\n   # versioning mechanism, adjust this.\n@@ -10394,7 +10386,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 10397 \"configure\"\n+#line 10389 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -10500,7 +10492,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 10503 \"configure\"\n+#line 10495 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H"}]}