{"sha": "2ca2d9ee0f4845d32453142ed3466dd7116906c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmNhMmQ5ZWUwZjQ4NDVkMzI0NTMxNDJlZDM0NjZkZDcxMTY5MDZjNw==", "commit": {"author": {"name": "Eric Christopher", "email": "echristo@redhat.com", "date": "2001-12-04T06:30:02Z"}, "committer": {"name": "Eric Christopher", "email": "echristo@gcc.gnu.org", "date": "2001-12-04T06:30:02Z"}, "message": "mips.h (CALL_REALLY_USED_REGISTERS): New macro.\n\n2001-12-03  Eric Christopher  <echristo@redhat.com>\n\n\t* config/mips/mips.h (CALL_REALLY_USED_REGISTERS): New macro.\n\t* config/mips/mips.md: Check TARGET_DEBUG_D_MODE before split\n\tpatterns.\n\nFrom-SVN: r47590", "tree": {"sha": "16f9e5e0208fcab47107f215e512cd55cc8915a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/16f9e5e0208fcab47107f215e512cd55cc8915a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ca2d9ee0f4845d32453142ed3466dd7116906c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ca2d9ee0f4845d32453142ed3466dd7116906c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ca2d9ee0f4845d32453142ed3466dd7116906c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ca2d9ee0f4845d32453142ed3466dd7116906c7/comments", "author": {"login": "echristo", "id": 327308, "node_id": "MDQ6VXNlcjMyNzMwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/327308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/echristo", "html_url": "https://github.com/echristo", "followers_url": "https://api.github.com/users/echristo/followers", "following_url": "https://api.github.com/users/echristo/following{/other_user}", "gists_url": "https://api.github.com/users/echristo/gists{/gist_id}", "starred_url": "https://api.github.com/users/echristo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/echristo/subscriptions", "organizations_url": "https://api.github.com/users/echristo/orgs", "repos_url": "https://api.github.com/users/echristo/repos", "events_url": "https://api.github.com/users/echristo/events{/privacy}", "received_events_url": "https://api.github.com/users/echristo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0d204c2d411ecc7d1cf829e5491d0b38e61b0cb5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d204c2d411ecc7d1cf829e5491d0b38e61b0cb5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d204c2d411ecc7d1cf829e5491d0b38e61b0cb5"}], "stats": {"total": 117, "additions": 78, "deletions": 39}, "files": [{"sha": "b078b6612e90777383cefba74387ab8feac15b89", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ca2d9ee0f4845d32453142ed3466dd7116906c7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ca2d9ee0f4845d32453142ed3466dd7116906c7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2ca2d9ee0f4845d32453142ed3466dd7116906c7", "patch": "@@ -1,3 +1,9 @@\n+2001-12-03  Eric Christopher  <echristo@redhat.com>\n+\n+\t* config/mips/mips.h (CALL_REALLY_USED_REGISTERS): New macro.\n+\t* config/mips/mips.md: Check TARGET_DEBUG_D_MODE before split\n+\tpatterns.\n+\n 2001-12-03  Janis Johnson  <janis187@us.ibm.com>\n \n \t* rtl.def (PREFETCH): New rtx code."}, {"sha": "b0415087fafc614de7095149040b0a21bfde748c", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ca2d9ee0f4845d32453142ed3466dd7116906c7/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ca2d9ee0f4845d32453142ed3466dd7116906c7/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=2ca2d9ee0f4845d32453142ed3466dd7116906c7", "patch": "@@ -1716,6 +1716,25 @@ do {\t\t\t\t\t\t\t\\\n   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1\t\t\t\t\t\\\n }\n \n+/* Like `CALL_USED_REGISTERS' but used to overcome a historical\n+   problem which makes CALL_USED_REGISTERS *always* include\n+   all the FIXED_REGISTERS.  Until this problem has been\n+   resolved this macro can be used to overcome this situation.\n+   In particular, block_propagate() requires this list\n+   be acurate, or we can remove registers which should be live.\n+   This macro is used in regs_invalidated_by_call.  */\n+\n+\n+#define CALL_REALLY_USED_REGISTERS                                      \\\n+{ /* General registers.  */                                             \\\n+  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,                       \\\n+  0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1,                       \\\n+  /* Floating-point registers.  */                                      \\\n+  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\t\t\t\\\n+  1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\t\t\t\\\n+  /* Others.  */                                                        \\\n+  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1\t\t\t\t\t\\\n+}\n \n /* Internal macros to classify a register number as to whether it's a\n    general purpose register, a floating point register, a"}, {"sha": "0a0fae45cd9cf9533c24ad7579434d624a2cbcdb", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 53, "deletions": 39, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ca2d9ee0f4845d32453142ed3466dd7116906c7/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ca2d9ee0f4845d32453142ed3466dd7116906c7/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=2ca2d9ee0f4845d32453142ed3466dd7116906c7", "patch": "@@ -688,7 +688,7 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(plus:SI (match_dup 0)\n \t\t (match_operand:SI 1 \"const_int_operand\" \"\")))]\n-  \"TARGET_MIPS16 && reload_completed\n+  \"TARGET_MIPS16 && reload_completed && !TARGET_DEBUG_D_MODE\n    && GET_CODE (operands[0]) == REG\n    && M16_REG_P (REGNO (operands[0]))\n    && GET_CODE (operands[1]) == CONST_INT\n@@ -718,7 +718,7 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(plus:SI (match_operand:SI 1 \"register_operand\" \"\")\n \t\t (match_operand:SI 2 \"const_int_operand\" \"\")))]\n-  \"TARGET_MIPS16 && reload_completed\n+  \"TARGET_MIPS16 && reload_completed && !TARGET_DEBUG_D_MODE\n    && GET_CODE (operands[0]) == REG\n    && M16_REG_P (REGNO (operands[0]))\n    && GET_CODE (operands[1]) == REG\n@@ -1007,7 +1007,7 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n \t(plus:DI (match_dup 0)\n \t\t (match_operand:DI 1 \"const_int_operand\" \"\")))]\n-  \"TARGET_MIPS16 && TARGET_64BIT && reload_completed\n+  \"TARGET_MIPS16 && TARGET_64BIT && reload_completed && !TARGET_DEBUG_D_MODE\n    && GET_CODE (operands[0]) == REG\n    && M16_REG_P (REGNO (operands[0]))\n    && GET_CODE (operands[1]) == CONST_INT\n@@ -1037,7 +1037,7 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n \t(plus:DI (match_operand:DI 1 \"register_operand\" \"\")\n \t\t (match_operand:DI 2 \"const_int_operand\" \"\")))]\n-  \"TARGET_MIPS16 && TARGET_64BIT && reload_completed\n+  \"TARGET_MIPS16 && TARGET_64BIT && reload_completed && !TARGET_DEBUG_D_MODE\n    && GET_CODE (operands[0]) == REG\n    && M16_REG_P (REGNO (operands[0]))\n    && GET_CODE (operands[1]) == REG\n@@ -1222,7 +1222,7 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(minus:SI (match_dup 0)\n \t\t  (match_operand:SI 1 \"const_int_operand\" \"\")))]\n-  \"TARGET_MIPS16 && reload_completed\n+  \"TARGET_MIPS16 && reload_completed && !TARGET_DEBUG_D_MODE\n    && GET_CODE (operands[0]) == REG\n    && M16_REG_P (REGNO (operands[0]))\n    && GET_CODE (operands[1]) == CONST_INT\n@@ -1252,7 +1252,7 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(minus:SI (match_operand:SI 1 \"register_operand\" \"\")\n \t\t  (match_operand:SI 2 \"const_int_operand\" \"\")))]\n-  \"TARGET_MIPS16 && reload_completed\n+  \"TARGET_MIPS16 && reload_completed && !TARGET_DEBUG_D_MODE\n    && GET_CODE (operands[0]) == REG\n    && M16_REG_P (REGNO (operands[0]))\n    && GET_CODE (operands[1]) == REG\n@@ -1508,7 +1508,7 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n \t(minus:DI (match_dup 0)\n \t\t  (match_operand:DI 1 \"const_int_operand\" \"\")))]\n-  \"TARGET_MIPS16 && TARGET_64BIT && reload_completed\n+  \"TARGET_MIPS16 && TARGET_64BIT && reload_completed && !TARGET_DEBUG_D_MODE\n    && GET_CODE (operands[0]) == REG\n    && M16_REG_P (REGNO (operands[0]))\n    && GET_CODE (operands[1]) == CONST_INT\n@@ -1538,7 +1538,7 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n \t(minus:DI (match_operand:DI 1 \"register_operand\" \"\")\n \t\t  (match_operand:DI 2 \"const_int_operand\" \"\")))]\n-  \"TARGET_MIPS16 && TARGET_64BIT && reload_completed\n+  \"TARGET_MIPS16 && TARGET_64BIT && reload_completed && !TARGET_DEBUG_D_MODE\n    && GET_CODE (operands[0]) == REG\n    && M16_REG_P (REGNO (operands[0]))\n    && GET_CODE (operands[1]) == REG\n@@ -1824,7 +1824,9 @@\n    (clobber (match_scratch:SI 5 \"\"))\n    (clobber (match_scratch:SI 6 \"\"))\n    (clobber (match_scratch:SI 7 \"\"))]\n-  \"reload_completed && GP_REG_P (true_regnum (operands[0])) && GP_REG_P (true_regnum (operands[3]))\"\n+  \"reload_completed && !TARGET_DEBUG_D_MODE\n+   && GP_REG_P (true_regnum (operands[0]))\n+   && GP_REG_P (true_regnum (operands[3]))\"\n   [(parallel [(set (match_dup 7)\n \t\t   (mult:SI (match_dup 1) (match_dup 2)))\n \t      (clobber (match_dup 4))\n@@ -1843,7 +1845,8 @@\n    (clobber (match_scratch:SI               5 \"\"))\n    (clobber (match_scratch:SI               6 \"\"))\n    (clobber (match_scratch:SI               7 \"\"))]\n-  \"reload_completed && GP_REG_P (true_regnum (operands[0]))\n+  \"reload_completed && !TARGET_DEBUG_D_MODE\n+   && GP_REG_P (true_regnum (operands[0]))\n    && true_regnum (operands[3]) == LO_REGNUM\"\n   [(parallel [(set (match_dup 3)\n                    (plus:SI (mult:SI (match_dup 1) (match_dup 2))\n@@ -1885,7 +1888,9 @@\n    (clobber (match_scratch:SI 5 \"\"))\n    (clobber (match_scratch:SI 6 \"\"))\n    (clobber (match_scratch:SI 7 \"\"))]\n-  \"reload_completed && GP_REG_P (true_regnum (operands[0])) && GP_REG_P (true_regnum (operands[1]))\"\n+  \"reload_completed && !TARGET_DEBUG_D_MODE\n+   && GP_REG_P (true_regnum (operands[0]))\n+   && GP_REG_P (true_regnum (operands[1]))\"\n   [(parallel [(set (match_dup 7)\n                    (mult:SI (match_dup 2) (match_dup 3)))\n               (clobber (match_dup 4))\n@@ -1904,7 +1909,8 @@\n    (clobber (match_scratch:SI 5 \"\"))\n    (clobber (match_scratch:SI 6 \"\"))\n    (clobber (match_scratch:SI 7 \"\"))]\n-  \"reload_completed && GP_REG_P (true_regnum (operands[0]))\n+  \"reload_completed && !TARGET_DEBUG_D_MODE\n+   && GP_REG_P (true_regnum (operands[0]))\n    && true_regnum (operands[1]) == LO_REGNUM\"\n   [(parallel [(set (match_dup 1)\n                    (minus:SI (match_dup 1)\n@@ -1926,7 +1932,9 @@\n    (clobber (match_scratch:SI 5 \"\"))\n    (clobber (match_scratch:SI 6 \"\"))\n    (clobber (match_scratch:SI 7 \"\"))]\n-  \"reload_completed && GP_REG_P (true_regnum (operands[0])) && GP_REG_P (true_regnum (operands[1]))\"\n+  \"reload_completed && !TARGET_DEBUG_D_MODE\n+   && GP_REG_P (true_regnum (operands[0]))\n+   && GP_REG_P (true_regnum (operands[1]))\"\n   [(parallel [(set (match_dup 7)\n \t\t   (mult:SI (match_dup 2) (match_dup 3)))\n \t      (clobber (match_dup 4))\n@@ -3239,7 +3247,8 @@ move\\\\t%0,%z4\\\\n\\\\\n (define_split\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n \t(not:DI (match_operand:DI 1 \"register_operand\" \"\")))]\n-  \"reload_completed && !TARGET_64BIT && !TARGET_DEBUG_D_MODE && !TARGET_DEBUG_G_MODE\n+  \"reload_completed && !TARGET_64BIT\n+   && !TARGET_DEBUG_D_MODE && !TARGET_DEBUG_G_MODE\n    && GET_CODE (operands[0]) == REG && GP_REG_P (REGNO (operands[0]))\n    && GET_CODE (operands[1]) == REG && GP_REG_P (REGNO (operands[1]))\"\n \n@@ -3341,7 +3350,8 @@ move\\\\t%0,%z4\\\\n\\\\\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n \t(and:DI (match_operand:DI 1 \"register_operand\" \"\")\n \t\t(match_operand:DI 2 \"register_operand\" \"\")))]\n-  \"reload_completed && !TARGET_64BIT && !TARGET_DEBUG_D_MODE && !TARGET_DEBUG_G_MODE\n+  \"reload_completed && !TARGET_64BIT\n+   && !TARGET_DEBUG_D_MODE && !TARGET_DEBUG_G_MODE\n    && GET_CODE (operands[0]) == REG && GP_REG_P (REGNO (operands[0]))\n    && GET_CODE (operands[1]) == REG && GP_REG_P (REGNO (operands[1]))\n    && GET_CODE (operands[2]) == REG && GP_REG_P (REGNO (operands[2]))\"\n@@ -3442,7 +3452,8 @@ move\\\\t%0,%z4\\\\n\\\\\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n \t(ior:DI (match_operand:DI 1 \"register_operand\" \"\")\n \t\t(match_operand:DI 2 \"register_operand\" \"\")))]\n-  \"reload_completed && !TARGET_64BIT && !TARGET_DEBUG_D_MODE && !TARGET_DEBUG_G_MODE\n+  \"reload_completed && !TARGET_64BIT\n+   && !TARGET_DEBUG_D_MODE && !TARGET_DEBUG_G_MODE\n    && GET_CODE (operands[0]) == REG && GP_REG_P (REGNO (operands[0]))\n    && GET_CODE (operands[1]) == REG && GP_REG_P (REGNO (operands[1]))\n    && GET_CODE (operands[2]) == REG && GP_REG_P (REGNO (operands[2]))\"\n@@ -3546,7 +3557,8 @@ move\\\\t%0,%z4\\\\n\\\\\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n \t(xor:DI (match_operand:DI 1 \"register_operand\" \"\")\n \t\t(match_operand:DI 2 \"register_operand\" \"\")))]\n-  \"reload_completed && !TARGET_64BIT && !TARGET_DEBUG_D_MODE && !TARGET_DEBUG_G_MODE\n+  \"reload_completed && !TARGET_64BIT\n+   && !TARGET_DEBUG_D_MODE && !TARGET_DEBUG_G_MODE\n    && GET_CODE (operands[0]) == REG && GP_REG_P (REGNO (operands[0]))\n    && GET_CODE (operands[1]) == REG && GP_REG_P (REGNO (operands[1]))\n    && GET_CODE (operands[2]) == REG && GP_REG_P (REGNO (operands[2]))\"\n@@ -3595,7 +3607,8 @@ move\\\\t%0,%z4\\\\n\\\\\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n \t(and:DI (not:DI (match_operand:DI 1 \"register_operand\" \"\"))\n \t\t(not:DI (match_operand:DI 2 \"register_operand\" \"\"))))]\n-  \"reload_completed && !TARGET_MIPS16 && !TARGET_64BIT && !TARGET_DEBUG_D_MODE && !TARGET_DEBUG_G_MODE\n+  \"reload_completed && !TARGET_MIPS16 && !TARGET_64BIT\n+   && !TARGET_DEBUG_D_MODE && !TARGET_DEBUG_G_MODE\n    && GET_CODE (operands[0]) == REG && GP_REG_P (REGNO (operands[0]))\n    && GET_CODE (operands[1]) == REG && GP_REG_P (REGNO (operands[1]))\n    && GET_CODE (operands[2]) == REG && GP_REG_P (REGNO (operands[2]))\"\n@@ -5037,7 +5050,8 @@ move\\\\t%0,%z4\\\\n\\\\\n (define_split\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n \t(match_operand:DI 1 \"register_operand\" \"\"))]\n-  \"reload_completed && !TARGET_64BIT && !TARGET_DEBUG_D_MODE && !TARGET_DEBUG_G_MODE\n+  \"reload_completed && !TARGET_64BIT\n+   && !TARGET_DEBUG_D_MODE && !TARGET_DEBUG_G_MODE\n    && GET_CODE (operands[0]) == REG && GP_REG_P (REGNO (operands[0]))\n    && GET_CODE (operands[1]) == REG && GP_REG_P (REGNO (operands[1]))\"\n \n@@ -5095,6 +5109,7 @@ move\\\\t%0,%z4\\\\n\\\\\n \t(mem:DI (plus:DI (match_dup 0)\n \t\t\t (match_operand:DI 1 \"const_int_operand\" \"\"))))]\n   \"TARGET_64BIT && TARGET_MIPS16 && reload_completed\n+   && !TARGET_DEBUG_D_MODE\n    && GET_CODE (operands[0]) == REG\n    && M16_REG_P (REGNO (operands[0]))\n    && GET_CODE (operands[1]) == CONST_INT\n@@ -5514,7 +5529,7 @@ move\\\\t%0,%z4\\\\n\\\\\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(mem:SI (plus:SI (match_dup 0)\n \t\t\t (match_operand:SI 1 \"const_int_operand\" \"\"))))]\n-  \"TARGET_MIPS16 && reload_completed\n+  \"TARGET_MIPS16 && reload_completed && !TARGET_DEBUG_D_MODE\n    && GET_CODE (operands[0]) == REG\n    && M16_REG_P (REGNO (operands[0]))\n    && GET_CODE (operands[1]) == CONST_INT\n@@ -5556,7 +5571,7 @@ move\\\\t%0,%z4\\\\n\\\\\n (define_split\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(match_operand:SI 1 \"const_int_operand\" \"\"))]\n-  \"TARGET_MIPS16 && reload_completed\n+  \"TARGET_MIPS16 && reload_completed && !TARGET_DEBUG_D_MODE\n    && GET_CODE (operands[0]) == REG\n    && M16_REG_P (REGNO (operands[0]))\n    && GET_CODE (operands[1]) == CONST_INT\n@@ -5578,7 +5593,7 @@ move\\\\t%0,%z4\\\\n\\\\\n (define_split\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(match_operand:SI 1 \"const_int_operand\" \"\"))]\n-  \"TARGET_MIPS16 && reload_completed\n+  \"TARGET_MIPS16 && reload_completed && !TARGET_DEBUG_D_MODE\n    && GET_CODE (operands[0]) == REG\n    && M16_REG_P (REGNO (operands[0]))\n    && GET_CODE (operands[1]) == CONST_INT\n@@ -6001,7 +6016,7 @@ move\\\\t%0,%z4\\\\n\\\\\n   [(set (match_operand:HI 0 \"register_operand\" \"\")\n \t(mem:HI (plus:SI (match_dup 0)\n \t\t\t (match_operand:SI 1 \"const_int_operand\" \"\"))))]\n-  \"TARGET_MIPS16 && reload_completed\n+  \"TARGET_MIPS16 && reload_completed && !TARGET_DEBUG_D_MODE\n    && GET_CODE (operands[0]) == REG\n    && M16_REG_P (REGNO (operands[0]))\n    && GET_CODE (operands[1]) == CONST_INT\n@@ -6123,7 +6138,7 @@ move\\\\t%0,%z4\\\\n\\\\\n   [(set (match_operand:QI 0 \"register_operand\" \"\")\n \t(mem:QI (plus:SI (match_dup 0)\n \t\t\t (match_operand:SI 1 \"const_int_operand\" \"\"))))]\n-  \"TARGET_MIPS16 && reload_completed\n+  \"TARGET_MIPS16 && reload_completed && !TARGET_DEBUG_D_MODE\n    && GET_CODE (operands[0]) == REG\n    && M16_REG_P (REGNO (operands[0]))\n    && GET_CODE (operands[1]) == CONST_INT\n@@ -6284,7 +6299,8 @@ move\\\\t%0,%z4\\\\n\\\\\n (define_split\n   [(set (match_operand:DF 0 \"register_operand\" \"\")\n \t(match_operand:DF 1 \"register_operand\" \"\"))]\n-  \"reload_completed && !TARGET_64BIT && !TARGET_DEBUG_D_MODE && !TARGET_DEBUG_G_MODE\n+  \"reload_completed && !TARGET_64BIT\n+   && !TARGET_DEBUG_D_MODE && !TARGET_DEBUG_G_MODE\n    && GET_CODE (operands[0]) == REG && GP_REG_P (REGNO (operands[0]))\n    && GET_CODE (operands[1]) == REG && GP_REG_P (REGNO (operands[1]))\"\n   [(set (subreg:SI (match_dup 0) 0) (subreg:SI (match_dup 1) 0))\n@@ -6540,8 +6556,7 @@ move\\\\t%0,%z4\\\\n\\\\\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(ashift:SI (match_operand:SI 1 \"register_operand\" \"\")\n \t\t   (match_operand:SI 2 \"const_int_operand\" \"\")))]\n-  \"TARGET_MIPS16\n-   && reload_completed\n+  \"TARGET_MIPS16 && reload_completed && !TARGET_DEBUG_D_MODE\n    && GET_CODE (operands[2]) == CONST_INT\n    && INTVAL (operands[2]) > 8\n    && INTVAL (operands[2]) <= 16\"\n@@ -6818,7 +6833,7 @@ move\\\\t%0,%z4\\\\n\\\\\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n \t(ashift:DI (match_operand:DI 1 \"register_operand\" \"\")\n \t\t   (match_operand:SI 2 \"const_int_operand\" \"\")))]\n-  \"TARGET_MIPS16 && TARGET_64BIT\n+  \"TARGET_MIPS16 && TARGET_64BIT && !TARGET_DEBUG_D_MODE\n    && reload_completed\n    && GET_CODE (operands[2]) == CONST_INT\n    && INTVAL (operands[2]) > 8\n@@ -6902,8 +6917,7 @@ move\\\\t%0,%z4\\\\n\\\\\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(ashiftrt:SI (match_operand:SI 1 \"register_operand\" \"\")\n \t\t     (match_operand:SI 2 \"const_int_operand\" \"\")))]\n-  \"TARGET_MIPS16\n-   && reload_completed\n+  \"TARGET_MIPS16 && reload_completed && !TARGET_DEBUG_D_MODE\n    && GET_CODE (operands[2]) == CONST_INT\n    && INTVAL (operands[2]) > 8\n    && INTVAL (operands[2]) <= 16\"\n@@ -7007,7 +7021,8 @@ move\\\\t%0,%z4\\\\n\\\\\n \t(ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"\")\n \t\t     (match_operand:SI 2 \"small_int\" \"\")))\n    (clobber (match_operand:SI 3 \"register_operand\" \"\"))]\n-  \"reload_completed && !WORDS_BIG_ENDIAN && !TARGET_64BIT && !TARGET_DEBUG_D_MODE && !TARGET_DEBUG_G_MODE\n+  \"reload_completed && !WORDS_BIG_ENDIAN && !TARGET_64BIT\n+   && !TARGET_DEBUG_D_MODE && !TARGET_DEBUG_G_MODE\n    && GET_CODE (operands[0]) == REG && REGNO (operands[0]) < FIRST_PSEUDO_REGISTER\n    && GET_CODE (operands[1]) == REG && REGNO (operands[1]) < FIRST_PSEUDO_REGISTER\n    && (INTVAL (operands[2]) & 32) != 0\"\n@@ -7023,7 +7038,8 @@ move\\\\t%0,%z4\\\\n\\\\\n \t(ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"\")\n \t\t     (match_operand:SI 2 \"small_int\" \"\")))\n    (clobber (match_operand:SI 3 \"register_operand\" \"\"))]\n-  \"reload_completed && WORDS_BIG_ENDIAN && !TARGET_64BIT && !TARGET_DEBUG_D_MODE && !TARGET_DEBUG_G_MODE\n+  \"reload_completed && WORDS_BIG_ENDIAN && !TARGET_64BIT\n+   && !TARGET_DEBUG_D_MODE && !TARGET_DEBUG_G_MODE\n    && GET_CODE (operands[0]) == REG && REGNO (operands[0]) < FIRST_PSEUDO_REGISTER\n    && GET_CODE (operands[1]) == REG && REGNO (operands[1]) < FIRST_PSEUDO_REGISTER\n    && (INTVAL (operands[2]) & 32) != 0\"\n@@ -7167,7 +7183,7 @@ move\\\\t%0,%z4\\\\n\\\\\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n \t(ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"\")\n \t\t     (match_operand:SI 2 \"const_int_operand\" \"\")))]\n-  \"TARGET_MIPS16 && TARGET_64BIT\n+  \"TARGET_MIPS16 && TARGET_64BIT && !TARGET_DEBUG_D_MODE\n    && reload_completed\n    && GET_CODE (operands[2]) == CONST_INT\n    && INTVAL (operands[2]) > 8\n@@ -7251,8 +7267,7 @@ move\\\\t%0,%z4\\\\n\\\\\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"\")\n \t\t     (match_operand:SI 2 \"const_int_operand\" \"\")))]\n-  \"TARGET_MIPS16\n-   && reload_completed\n+  \"TARGET_MIPS16 && reload_completed && !TARGET_DEBUG_D_MODE\n    && GET_CODE (operands[2]) == CONST_INT\n    && INTVAL (operands[2]) > 8\n    && INTVAL (operands[2]) <= 16\"\n@@ -7290,7 +7305,7 @@ move\\\\t%0,%z4\\\\n\\\\\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(lshiftrt:SI (match_operand:SI 1 \"memory_operand\" \"\")\n \t\t     (match_operand:SI 2 \"immediate_operand\" \"\")))]\n-  \"TARGET_MIPS16\"\n+  \"TARGET_MIPS16 && !TARGET_DEBUG_D_MODE\"\n   [(set (match_dup 0) (match_dup 1))\n    (set (match_dup 0) (lshiftrt:SI (match_dup 0) (match_dup 2)))]\n   \"\")\n@@ -7552,8 +7567,7 @@ move\\\\t%0,%z4\\\\n\\\\\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n \t(lshiftrt:DI (match_operand:DI 1 \"register_operand\" \"\")\n \t\t     (match_operand:SI 2 \"const_int_operand\" \"\")))]\n-  \"TARGET_MIPS16\n-   && reload_completed\n+  \"TARGET_MIPS16 && reload_completed && !TARGET_DEBUG_D_MODE\n    && GET_CODE (operands[2]) == CONST_INT\n    && INTVAL (operands[2]) > 8\n    && INTVAL (operands[2]) <= 16\"\n@@ -9647,7 +9661,7 @@ ld\\\\t%2,%1-%S1(%2)\\;daddu\\\\t%2,%2,$31\\;j\\\\t%2\"\n (define_split\n   [(unspec [(match_operand 0 \"register_operand\" \"\")] 3)\n    (clobber (match_scratch 1 \"\"))]\n-  \"reload_completed\"\n+  \"reload_completed && !TARGET_DEBUG_D_MODE\"\n   [(const_int 0)]\n   \"\n {"}]}