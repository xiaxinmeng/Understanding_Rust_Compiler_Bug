{"sha": "562a5c27c266280971055d4066ce9cba9403158b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTYyYTVjMjdjMjY2MjgwOTcxMDU1ZDQwNjZjZTljYmE5NDAzMTU4Yg==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2002-04-21T18:46:42Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2002-04-21T18:46:42Z"}, "message": "cppexp.c (struct op, [...]): Replace U_CHAR with uchar.\n\n\t* cppexp.c (struct op, parse_number): Replace U_CHAR with uchar.\n\t* cppfiles.c (read_include_file): Similarly.\n\t* cpphash.h (DSC, U_CHAR, ustrcmp, ustrncmp, ustrlen,\n\tuxstrdup ustrchr, ufputs): Similarly.\n\t* cppinit.c (TRIGRAPH_MAP, cpp_destroy): Similarly.\n\t* cpplex.c (parse_slow, unescaped_terminator_p, save_comment,\n\tcpp_ideq, parse_identifier, parse_number): Similarly.\n\t* cpplib.c (struct directive, dequote_string, D, run_directive,\n\tcpp_push_buffer): Similarly.\n\t* cppmacro.c (new_string_token, builtin_macro, cpp_quote_string,\n\t_cpp_create_definition, check_trad_stringification,\n\tcpp_macro_definition): Similarly.\n\nFrom-SVN: r52587", "tree": {"sha": "3ea24655d8eabfdaf624b6cb32ed7b761c98617f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ea24655d8eabfdaf624b6cb32ed7b761c98617f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/562a5c27c266280971055d4066ce9cba9403158b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/562a5c27c266280971055d4066ce9cba9403158b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/562a5c27c266280971055d4066ce9cba9403158b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/562a5c27c266280971055d4066ce9cba9403158b/comments", "author": null, "committer": null, "parents": [{"sha": "9ac3b1bec7b58c6ad4a76782b1116dfb5f4cd0c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ac3b1bec7b58c6ad4a76782b1116dfb5f4cd0c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ac3b1bec7b58c6ad4a76782b1116dfb5f4cd0c6"}], "stats": {"total": 151, "additions": 83, "deletions": 68}, "files": [{"sha": "2b09952dac8d94fd648b9fdca1253ab16d8435ea", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/562a5c27c266280971055d4066ce9cba9403158b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/562a5c27c266280971055d4066ce9cba9403158b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=562a5c27c266280971055d4066ce9cba9403158b", "patch": "@@ -1,3 +1,18 @@\n+2002-04-21  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* cppexp.c (struct op, parse_number): Replace U_CHAR with uchar.\n+\t* cppfiles.c (read_include_file): Similarly.\n+\t* cpphash.h (DSC, U_CHAR, ustrcmp, ustrncmp, ustrlen,\n+\tuxstrdup ustrchr, ufputs): Similarly.\n+\t* cppinit.c (TRIGRAPH_MAP, cpp_destroy): Similarly.\n+\t* cpplex.c (parse_slow, unescaped_terminator_p, save_comment,\n+\tcpp_ideq, parse_identifier, parse_number): Similarly.\n+\t* cpplib.c (struct directive, dequote_string, D, run_directive,\n+\tcpp_push_buffer): Similarly.\n+\t* cppmacro.c (new_string_token, builtin_macro, cpp_quote_string,\n+\t_cpp_create_definition, check_trad_stringification,\n+\tcpp_macro_definition): Similarly.\n+\n 2002-04-21  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* cppmacro.c (funlike_invocation_p): Don't step back"}, {"sha": "b62741b30daf7a1a3910dcd64c1fc8a5e107af62", "filename": "gcc/cppexp.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/562a5c27c266280971055d4066ce9cba9403158b/gcc%2Fcppexp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/562a5c27c266280971055d4066ce9cba9403158b/gcc%2Fcppexp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppexp.c?ref=562a5c27c266280971055d4066ce9cba9403158b", "patch": "@@ -42,9 +42,9 @@ static const unsigned char *op_as_text PARAMS ((cpp_reader *, enum cpp_ttype));\n struct op\n {\n   enum cpp_ttype op;\n-  U_CHAR prio;         /* Priority of op.  */\n-  U_CHAR flags;\n-  U_CHAR unsignedp;    /* True if value should be treated as unsigned.  */\n+  uchar prio;         /* Priority of op.  */\n+  uchar flags;\n+  uchar unsignedp;    /* True if value should be treated as unsigned.  */\n   HOST_WIDEST_INT value; /* The value logically \"right\" of op.  */\n };\n \n@@ -91,9 +91,9 @@ parse_number (pfile, tok)\n      const cpp_token *tok;\n {\n   struct op op;\n-  const U_CHAR *start = tok->val.str.text;\n-  const U_CHAR *end = start + tok->val.str.len;\n-  const U_CHAR *p = start;\n+  const uchar *start = tok->val.str.text;\n+  const uchar *end = start + tok->val.str.len;\n+  const uchar *p = start;\n   int c = 0, i, nsuff;\n   unsigned HOST_WIDEST_INT n = 0, nd, MAX_over_base;\n   int base = 10;"}, {"sha": "38780ad24a13c1fee0e2853f51937e1b5e702d1d", "filename": "gcc/cppfiles.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/562a5c27c266280971055d4066ce9cba9403158b/gcc%2Fcppfiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/562a5c27c266280971055d4066ce9cba9403158b/gcc%2Fcppfiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppfiles.c?ref=562a5c27c266280971055d4066ce9cba9403158b", "patch": "@@ -375,7 +375,7 @@ read_include_file (pfile, inc)\n      struct include_file *inc;\n {\n   ssize_t size, offset, count;\n-  U_CHAR *buf;\n+  uchar *buf;\n #if MMAP_THRESHOLD\n   static int pagesize = -1;\n #endif\n@@ -404,15 +404,15 @@ read_include_file (pfile, inc)\n \n       if (SHOULD_MMAP (size, pagesize))\n \t{\n-\t  buf = (U_CHAR *) mmap (0, size, PROT_READ, MAP_PRIVATE, inc->fd, 0);\n-\t  if (buf == (U_CHAR *)-1)\n+\t  buf = (uchar *) mmap (0, size, PROT_READ, MAP_PRIVATE, inc->fd, 0);\n+\t  if (buf == (uchar *)-1)\n \t    goto perror_fail;\n \t  inc->mapped = 1;\n \t}\n       else\n #endif\n \t{\n-\t  buf = (U_CHAR *) xmalloc (size + 1);\n+\t  buf = (uchar *) xmalloc (size + 1);\n \t  offset = 0;\n \t  while (offset < size)\n \t    {\n@@ -447,7 +447,7 @@ read_include_file (pfile, inc)\n \t bigger than the majority of C source files.  */\n       size = 8 * 1024;\n \n-      buf = (U_CHAR *) xmalloc (size + 1);\n+      buf = (uchar *) xmalloc (size + 1);\n       offset = 0;\n       while ((count = read (inc->fd, buf + offset, size - offset)) > 0)\n \t{"}, {"sha": "e101bb3ef904f0e5de2b45d2b3f1adb9654755c7", "filename": "gcc/cpphash.h", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/562a5c27c266280971055d4066ce9cba9403158b/gcc%2Fcpphash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/562a5c27c266280971055d4066ce9cba9403158b/gcc%2Fcpphash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.h?ref=562a5c27c266280971055d4066ce9cba9403158b", "patch": "@@ -411,7 +411,7 @@ extern void _cpp_do_file_change PARAMS ((cpp_reader *, enum lc_reason,\n extern void _cpp_pop_buffer PARAMS ((cpp_reader *));\n \n /* Utility routines and macros.  */\n-#define DSC(str) (const U_CHAR *)str, sizeof str - 1\n+#define DSC(str) (const uchar *)str, sizeof str - 1\n #define xnew(T)\t\t(T *) xmalloc (sizeof(T))\n #define xcnew(T)\t(T *) xcalloc (1, sizeof(T))\n #define xnewvec(T, N)\t(T *) xmalloc (sizeof(T) * (N))\n@@ -420,57 +420,57 @@ extern void _cpp_pop_buffer PARAMS ((cpp_reader *));\n \n /* These are inline functions instead of macros so we can get type\n    checking.  */\n-typedef unsigned char U_CHAR;\n-#define U (const U_CHAR *)  /* Intended use: U\"string\" */\n+typedef unsigned char uchar;\n+#define U (const uchar *)  /* Intended use: U\"string\" */\n \n-static inline int ustrcmp\tPARAMS ((const U_CHAR *, const U_CHAR *));\n-static inline int ustrncmp\tPARAMS ((const U_CHAR *, const U_CHAR *,\n+static inline int ustrcmp\tPARAMS ((const uchar *, const uchar *));\n+static inline int ustrncmp\tPARAMS ((const uchar *, const uchar *,\n \t\t\t\t\t size_t));\n-static inline size_t ustrlen\tPARAMS ((const U_CHAR *));\n-static inline U_CHAR *uxstrdup\tPARAMS ((const U_CHAR *));\n-static inline U_CHAR *ustrchr\tPARAMS ((const U_CHAR *, int));\n-static inline int ufputs\tPARAMS ((const U_CHAR *, FILE *));\n+static inline size_t ustrlen\tPARAMS ((const uchar *));\n+static inline uchar *uxstrdup\tPARAMS ((const uchar *));\n+static inline uchar *ustrchr\tPARAMS ((const uchar *, int));\n+static inline int ufputs\tPARAMS ((const uchar *, FILE *));\n \n static inline int\n ustrcmp (s1, s2)\n-     const U_CHAR *s1, *s2;\n+     const uchar *s1, *s2;\n {\n   return strcmp ((const char *)s1, (const char *)s2);\n }\n \n static inline int\n ustrncmp (s1, s2, n)\n-     const U_CHAR *s1, *s2;\n+     const uchar *s1, *s2;\n      size_t n;\n {\n   return strncmp ((const char *)s1, (const char *)s2, n);\n }\n \n static inline size_t\n ustrlen (s1)\n-     const U_CHAR *s1;\n+     const uchar *s1;\n {\n   return strlen ((const char *)s1);\n }\n \n-static inline U_CHAR *\n+static inline uchar *\n uxstrdup (s1)\n-     const U_CHAR *s1;\n+     const uchar *s1;\n {\n-  return (U_CHAR *) xstrdup ((const char *)s1);\n+  return (uchar *) xstrdup ((const char *)s1);\n }\n \n-static inline U_CHAR *\n+static inline uchar *\n ustrchr (s1, c)\n-     const U_CHAR *s1;\n+     const uchar *s1;\n      int c;\n {\n-  return (U_CHAR *) strchr ((const char *)s1, c);\n+  return (uchar *) strchr ((const char *)s1, c);\n }\n \n static inline int\n ufputs (s, f)\n-     const U_CHAR *s;\n+     const uchar *s;\n      FILE *f;\n {\n   return fputs ((const char *)s, f);"}, {"sha": "8caf2ed11e8f6111d994479a86f6d969ec9b8f08", "filename": "gcc/cppinit.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/562a5c27c266280971055d4066ce9cba9403158b/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/562a5c27c266280971055d4066ce9cba9403158b/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=562a5c27c266280971055d4066ce9cba9403158b", "patch": "@@ -130,14 +130,14 @@ enum { BRACKET = 0, SYSTEM, AFTER };\n \n #define init_trigraph_map()  /* Nothing.  */\n #define TRIGRAPH_MAP \\\n-__extension__ const U_CHAR _cpp_trigraph_map[UCHAR_MAX + 1] = {\n+__extension__ const uchar _cpp_trigraph_map[UCHAR_MAX + 1] = {\n \n #define END };\n #define s(p, v) [p] = v,\n \n #else\n \n-#define TRIGRAPH_MAP U_CHAR _cpp_trigraph_map[UCHAR_MAX + 1] = { 0 }; \\\n+#define TRIGRAPH_MAP uchar _cpp_trigraph_map[UCHAR_MAX + 1] = { 0 }; \\\n  static void init_trigraph_map PARAMS ((void)) { \\\n  unsigned char *x = _cpp_trigraph_map;\n \n@@ -619,7 +619,7 @@ cpp_destroy (pfile)\n    Also, macros with CPLUS set in the flags field are entered only for C++.  */\n struct builtin\n {\n-  const U_CHAR *name;\n+  const uchar *name;\n   const char *value;\n   unsigned char builtin;\n   unsigned char operator;"}, {"sha": "eed9ffda2115f59b982f38c90bf62b2b0d554432", "filename": "gcc/cpplex.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/562a5c27c266280971055d4066ce9cba9403158b/gcc%2Fcpplex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/562a5c27c266280971055d4066ce9cba9403158b/gcc%2Fcpplex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplex.c?ref=562a5c27c266280971055d4066ce9cba9403158b", "patch": "@@ -77,13 +77,13 @@ static int skip_line_comment PARAMS ((cpp_reader *));\n static void adjust_column PARAMS ((cpp_reader *));\n static int skip_whitespace PARAMS ((cpp_reader *, cppchar_t));\n static cpp_hashnode *parse_identifier PARAMS ((cpp_reader *));\n-static U_CHAR *parse_slow PARAMS ((cpp_reader *, const U_CHAR *, int,\n+static uchar *parse_slow PARAMS ((cpp_reader *, const uchar *, int,\n \t\t\t\t   unsigned int *));\n static void parse_number PARAMS ((cpp_reader *, cpp_string *, int));\n-static int unescaped_terminator_p PARAMS ((cpp_reader *, const U_CHAR *));\n+static int unescaped_terminator_p PARAMS ((cpp_reader *, const uchar *));\n static void parse_string PARAMS ((cpp_reader *, cpp_token *, cppchar_t));\n static bool trigraph_p PARAMS ((cpp_reader *));\n-static void save_comment PARAMS ((cpp_reader *, cpp_token *, const U_CHAR *,\n+static void save_comment PARAMS ((cpp_reader *, cpp_token *, const uchar *,\n \t\t\t\t  cppchar_t));\n static int name_p PARAMS ((cpp_reader *, const cpp_string *));\n static int maybe_read_ucs PARAMS ((cpp_reader *, const unsigned char **,\n@@ -105,7 +105,7 @@ cpp_ideq (token, string)\n   if (token->type != CPP_NAME)\n     return 0;\n \n-  return !ustrcmp (NODE_NAME (token->val.node), (const U_CHAR *) string);\n+  return !ustrcmp (NODE_NAME (token->val.node), (const uchar *) string);\n }\n \n /* Call when meeting a newline, assumed to be in buffer->cur[-1].\n@@ -421,7 +421,7 @@ parse_identifier (pfile)\n      cpp_reader *pfile;\n {\n   cpp_hashnode *result;\n-  const U_CHAR *cur, *base;\n+  const uchar *cur, *base;\n \n   /* Fast-path loop.  Skim over a normal identifier.\n      N.B. ISIDNUM does not include $.  */\n@@ -473,15 +473,15 @@ parse_identifier (pfile)\n    1 if it's a number, and 2 if it has a leading period.  Returns a\n    pointer to the token's NUL-terminated spelling in permanent\n    storage, and sets PLEN to its length.  */\n-static U_CHAR *\n+static uchar *\n parse_slow (pfile, cur, number_p, plen)\n      cpp_reader *pfile;\n-     const U_CHAR *cur;\n+     const uchar *cur;\n      int number_p;\n      unsigned int *plen;\n {\n   cpp_buffer *buffer = pfile->buffer;\n-  const U_CHAR *base = buffer->cur - 1;\n+  const uchar *base = buffer->cur - 1;\n   struct obstack *stack = &pfile->hash_table->stack;\n   unsigned int c, prevc, saw_dollar = 0;\n \n@@ -550,7 +550,7 @@ parse_number (pfile, number, leading_period)\n      cpp_string *number;\n      int leading_period;\n {\n-  const U_CHAR *cur;\n+  const uchar *cur;\n \n   /* Fast-path loop.  Skim over a normal number.\n      N.B. ISIDNUM does not include $.  */\n@@ -563,8 +563,8 @@ parse_number (pfile, number, leading_period)\n     number->text = parse_slow (pfile, cur, 1 + leading_period, &number->len);\n   else\n     {\n-      const U_CHAR *base = pfile->buffer->cur - 1;\n-      U_CHAR *dest;\n+      const uchar *base = pfile->buffer->cur - 1;\n+      uchar *dest;\n \n       number->len = cur - base + leading_period;\n       dest = _cpp_unaligned_alloc (pfile, number->len + 1);"}, {"sha": "dddf86a86af0440f9dd3d17cf0693cdc2acecc67", "filename": "gcc/cpplib.c", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/562a5c27c266280971055d4066ce9cba9403158b/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/562a5c27c266280971055d4066ce9cba9403158b/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=562a5c27c266280971055d4066ce9cba9403158b", "patch": "@@ -82,7 +82,7 @@ typedef struct directive directive;\n struct directive\n {\n   directive_handler handler;\t/* Function to handle directive.  */\n-  const U_CHAR *name;\t\t/* Name of directive.  */\n+  const uchar *name;\t\t/* Name of directive.  */\n   unsigned short length;\t/* Length of name.  */\n   unsigned char origin;\t\t/* Origin of directive.  */\n   unsigned char flags;\t        /* Flags describing this directive.  */\n@@ -103,9 +103,9 @@ static const cpp_token *parse_include PARAMS ((cpp_reader *));\n static void push_conditional\tPARAMS ((cpp_reader *, int, int,\n \t\t\t\t\t const cpp_hashnode *));\n static unsigned int read_flag\tPARAMS ((cpp_reader *, unsigned int));\n-static U_CHAR *dequote_string\tPARAMS ((cpp_reader *, const U_CHAR *,\n+static uchar *dequote_string\tPARAMS ((cpp_reader *, const uchar *,\n \t\t\t\t\t unsigned int));\n-static int  strtoul_for_line\tPARAMS ((const U_CHAR *, unsigned int,\n+static int  strtoul_for_line\tPARAMS ((const uchar *, unsigned int,\n \t\t\t\t\t unsigned long *));\n static void do_diagnostic\tPARAMS ((cpp_reader *, int, int));\n static cpp_hashnode *lex_macro_node\tPARAMS ((cpp_reader *));\n@@ -185,7 +185,7 @@ enum\n \n /* Don't invoke CONCAT2 with any whitespace or K&R cc will fail.  */\n #define D(name, t, origin, flags) \\\n-{ CONCAT2(do_,name), (const U_CHAR *) STRINGX(name), \\\n+{ CONCAT2(do_,name), (const uchar *) STRINGX(name), \\\n   sizeof STRINGX(name) - 1, origin, flags },\n static const directive dtable[] =\n {\n@@ -429,7 +429,7 @@ run_directive (pfile, dir_no, buf, count)\n      const char *buf;\n      size_t count;\n {\n-  cpp_push_buffer (pfile, (const U_CHAR *) buf, count,\n+  cpp_push_buffer (pfile, (const uchar *) buf, count,\n \t\t   /* from_stage3 */ true, 1);\n   start_directive (pfile);\n   /* We don't want a leading # to be interpreted as a directive.  */\n@@ -717,15 +717,15 @@ read_flag (pfile, last)\n /* Subroutine of do_line and do_linemarker.  Returns a version of STR\n    which has a NUL terminator and all escape sequences converted to\n    their equivalents.  Temporary, hopefully.  */\n-static U_CHAR *\n+static uchar *\n dequote_string (pfile, str, len)\n      cpp_reader *pfile;\n-     const U_CHAR *str;\n+     const uchar *str;\n      unsigned int len;\n {\n-  U_CHAR *result = _cpp_unaligned_alloc (pfile, len + 1);\n-  U_CHAR *dst = result;\n-  const U_CHAR *limit = str + len;\n+  uchar *result = _cpp_unaligned_alloc (pfile, len + 1);\n+  uchar *dst = result;\n+  const uchar *limit = str + len;\n   unsigned int c;\n   unsigned HOST_WIDE_INT mask;\n \n@@ -742,7 +742,7 @@ dequote_string (pfile, str, len)\n       if (c != '\\\\')\n \t*dst++ = c;\n       else\n-\t*dst++ = cpp_parse_escape (pfile, (const U_CHAR **)&str, limit, mask);\n+\t*dst++ = cpp_parse_escape (pfile, (const uchar **)&str, limit, mask);\n     }\n   *dst++ = '\\0';\n   return result;\n@@ -753,12 +753,12 @@ dequote_string (pfile, str, len)\n    number was well-formed, 1 if not.  Temporary, hopefully.  */\n static int\n strtoul_for_line (str, len, nump)\n-     const U_CHAR *str;\n+     const uchar *str;\n      unsigned int len;\n      unsigned long *nump;\n {\n   unsigned long reg = 0;\n-  U_CHAR c;\n+  uchar c;\n   while (len--)\n     {\n       c = *str++;\n@@ -1878,7 +1878,7 @@ cpp_set_callbacks (pfile, cb)\n cpp_buffer *\n cpp_push_buffer (pfile, buffer, len, from_stage3, return_at_eof)\n      cpp_reader *pfile;\n-     const U_CHAR *buffer;\n+     const uchar *buffer;\n      size_t len;\n      int from_stage3;\n      int return_at_eof;"}, {"sha": "aa2e58bf02d686a19b8215169eb1e97ab0833945", "filename": "gcc/cppmacro.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/562a5c27c266280971055d4066ce9cba9403158b/gcc%2Fcppmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/562a5c27c266280971055d4066ce9cba9403158b/gcc%2Fcppmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppmacro.c?ref=562a5c27c266280971055d4066ce9cba9403158b", "patch": "@@ -64,7 +64,7 @@ static cpp_context *next_context PARAMS ((cpp_reader *));\n static const cpp_token *padding_token\n   PARAMS ((cpp_reader *, const cpp_token *));\n static void expand_arg PARAMS ((cpp_reader *, macro_arg *));\n-static const cpp_token *new_string_token PARAMS ((cpp_reader *, U_CHAR *,\n+static const cpp_token *new_string_token PARAMS ((cpp_reader *, uchar *,\n \t\t\t\t\t\t  unsigned int));\n static const cpp_token *new_number_token PARAMS ((cpp_reader *, unsigned int));\n static const cpp_token *stringify_arg PARAMS ((cpp_reader *, macro_arg *));\n@@ -152,7 +152,7 @@ builtin_macro (pfile, node)\n       {\n \tunsigned int len;\n \tconst char *name;\n-\tU_CHAR *buf;\n+\tuchar *buf;\n \tconst struct line_map *map = pfile->map;\n \n \tif (node->value.builtin == BT_BASE_FILE)\n@@ -244,15 +244,15 @@ builtin_macro (pfile, node)\n    backslashes and double quotes.  Non-printable characters are\n    converted to octal.  DEST must be of sufficient size.  Returns\n    a pointer to the end of the string.  */\n-U_CHAR *\n+uchar *\n cpp_quote_string (dest, src, len)\n-     U_CHAR *dest;\n-     const U_CHAR *src;\n+     uchar *dest;\n+     const uchar *src;\n      unsigned int len;\n {\n   while (len--)\n     {\n-      U_CHAR c = *src++;\n+      uchar c = *src++;\n \n       if (c == '\\\\' || c == '\"')\n \t{\n@@ -1340,7 +1340,7 @@ _cpp_create_definition (pfile, node)\n \tgoto cleanup2;\n \n       /* Success.  Commit the parameter array.  */\n-      BUFF_FRONT (pfile->a_buff) = (U_CHAR *) &macro->params[macro->paramc];\n+      BUFF_FRONT (pfile->a_buff) = (uchar *) &macro->params[macro->paramc];\n       macro->fun_like = 1;\n     }\n   else if (ctoken->type != CPP_EOF && !(ctoken->flags & PREV_WHITE))\n@@ -1416,7 +1416,7 @@ _cpp_create_definition (pfile, node)\n     macro->expansion[0].flags &= ~PREV_WHITE;\n \n   /* Commit the memory.  */\n-  BUFF_FRONT (pfile->a_buff) = (U_CHAR *) &macro->expansion[macro->count];\n+  BUFF_FRONT (pfile->a_buff) = (uchar *) &macro->expansion[macro->count];\n \n   /* Implement the macro-defined-to-itself optimisation.  */\n   if (macro->count == 1 && !macro->fun_like\n@@ -1474,7 +1474,7 @@ check_trad_stringification (pfile, macro, string)\n      const cpp_string *string;\n {\n   unsigned int i, len;\n-  const U_CHAR *p, *q, *limit = string->text + string->len;\n+  const uchar *p, *q, *limit = string->text + string->len;\n   \n   /* Loop over the string.  */\n   for (p = string->text; p < limit; p = q)\n@@ -1555,7 +1555,7 @@ cpp_macro_definition (pfile, node)\n \n   if (len > pfile->macro_buffer_len)\n     {\n-      pfile->macro_buffer = (U_CHAR *) xrealloc (pfile->macro_buffer, len);\n+      pfile->macro_buffer = (uchar *) xrealloc (pfile->macro_buffer, len);\n       pfile->macro_buffer_len = len;\n     }\n "}]}