{"sha": "30094344891c53015020616b80e51c6e11fd5a8c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzAwOTQzNDQ4OTFjNTMwMTUwMjA2MTZiODBlNTFjNmUxMWZkNWE4Yw==", "commit": {"author": {"name": "Ilya Verbin", "email": "ilya.verbin@intel.com", "date": "2015-03-10T12:23:27Z"}, "committer": {"name": "Ilya Verbin", "email": "iverbin@gcc.gnu.org", "date": "2015-03-10T12:23:27Z"}, "message": "Fix search path in intelmic-mkoffload for empty COLLECT_GCC.\n\ngcc/\n\t* config/i386/intelmic-mkoffload.c: Include intelmic-offload.h instead\n\tof libgomp-plugin.h.\n\t(find_target_compiler): Support a case when the path to gcc is specified\n\tin the PATH env var, so COLLECT_GCC doesn't contain a path.\n\t(generate_host_descr_file): Use GOMP_DEVICE_INTEL_MIC from\n\tintelmic-offload.h instead of OFFLOAD_TARGET_TYPE_INTEL_MIC from\n\tlibgomp-plugin.h.\n\t(main): Use GCC_INSTALL_NAME as target_driver_name.\n\t* config/i386/t-intelmic (CFLAGS-mkoffload.o): Add GCC_INSTALL_NAME\n\tdefine.\n\t(mkoffload.o): Remove obsolete include path and defines.\n\t(mkoffload$(exeext)): Use $(LINKER) instead of $(COMPILER).\n\nFrom-SVN: r221319", "tree": {"sha": "9ac428c696db4cd51be45197094b028df916a715", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ac428c696db4cd51be45197094b028df916a715"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30094344891c53015020616b80e51c6e11fd5a8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30094344891c53015020616b80e51c6e11fd5a8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30094344891c53015020616b80e51c6e11fd5a8c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30094344891c53015020616b80e51c6e11fd5a8c/comments", "author": null, "committer": null, "parents": [{"sha": "a563c2869215ff2581159dc8fa429d8b969477e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a563c2869215ff2581159dc8fa429d8b969477e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a563c2869215ff2581159dc8fa429d8b969477e6"}], "stats": {"total": 55, "additions": 40, "deletions": 15}, "files": [{"sha": "dbef42ad3b113a83cc8ff88978d0363e5b39ae46", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30094344891c53015020616b80e51c6e11fd5a8c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30094344891c53015020616b80e51c6e11fd5a8c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=30094344891c53015020616b80e51c6e11fd5a8c", "patch": "@@ -1,3 +1,18 @@\n+2015-03-10  Ilya Verbin  <ilya.verbin@intel.com>\n+\n+\t* config/i386/intelmic-mkoffload.c: Include intelmic-offload.h instead\n+\tof libgomp-plugin.h.\n+\t(find_target_compiler): Support a case when the path to gcc is specified\n+\tin the PATH env var, so COLLECT_GCC doesn't contain a path.\n+\t(generate_host_descr_file): Use GOMP_DEVICE_INTEL_MIC from\n+\tintelmic-offload.h instead of OFFLOAD_TARGET_TYPE_INTEL_MIC from\n+\tlibgomp-plugin.h.\n+\t(main): Use GCC_INSTALL_NAME as target_driver_name.\n+\t* config/i386/t-intelmic (CFLAGS-mkoffload.o): Add GCC_INSTALL_NAME\n+\tdefine.\n+\t(mkoffload.o): Remove obsolete include path and defines.\n+\t(mkoffload$(exeext)): Use $(LINKER) instead of $(COMPILER).\n+\n 2015-03-10  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/63155"}, {"sha": "f93007c51f0bc23499f9d152a619792905f4ba3b", "filename": "gcc/config/i386/intelmic-mkoffload.c", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30094344891c53015020616b80e51c6e11fd5a8c/gcc%2Fconfig%2Fi386%2Fintelmic-mkoffload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30094344891c53015020616b80e51c6e11fd5a8c/gcc%2Fconfig%2Fi386%2Fintelmic-mkoffload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fintelmic-mkoffload.c?ref=30094344891c53015020616b80e51c6e11fd5a8c", "patch": "@@ -22,13 +22,13 @@\n \n #include \"config.h\"\n #include <libgen.h>\n-#include \"libgomp-plugin.h\"\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"obstack.h\"\n #include \"intl.h\"\n #include \"diagnostic.h\"\n #include \"collect-utils.h\"\n+#include \"intelmic-offload.h\"\n \n const char tool_name[] = \"intelmic mkoffload\";\n \n@@ -158,10 +158,21 @@ find_target_compiler (const char *name)\n   bool found = false;\n   char **paths = NULL;\n   unsigned n_paths, i;\n-  const char *collect_path = dirname (ASTRDUP (getenv (\"COLLECT_GCC\")));\n-  size_t len = strlen (collect_path) + 1 + strlen (name) + 1;\n-  char *target_compiler = XNEWVEC (char, len);\n-  sprintf (target_compiler, \"%s/%s\", collect_path, name);\n+  char *target_compiler;\n+  const char *collect_gcc = getenv (\"COLLECT_GCC\");\n+  const char *gcc_path = dirname (ASTRDUP (collect_gcc));\n+  const char *gcc_exec = basename (ASTRDUP (collect_gcc));\n+\n+  if (strcmp (gcc_exec, collect_gcc) == 0)\n+    {\n+      /* collect_gcc has no path, so it was found in PATH.  Make sure we also\n+\t find accel-gcc in PATH.  */\n+      target_compiler = XDUPVEC (char, name, strlen (name) + 1);\n+      found = true;\n+      goto out;\n+    }\n+\n+  target_compiler = concat (gcc_path, \"/\", name, NULL);\n   if (access_check (target_compiler, X_OK) == 0)\n     {\n       found = true;\n@@ -171,7 +182,7 @@ find_target_compiler (const char *name)\n   n_paths = parse_env_var (getenv (\"COMPILER_PATH\"), &paths);\n   for (i = 0; i < n_paths; i++)\n     {\n-      len = strlen (paths[i]) + 1 + strlen (name) + 1;\n+      size_t len = strlen (paths[i]) + 1 + strlen (name) + 1;\n       target_compiler = XRESIZEVEC (char, target_compiler, len);\n       sprintf (target_compiler, \"%s/%s\", paths[i], name);\n       if (access_check (target_compiler, X_OK) == 0)\n@@ -346,7 +357,7 @@ generate_host_descr_file (const char *host_compiler)\n \t   \"init (void)\\n\"\n \t   \"{\\n\"\n \t   \"  GOMP_offload_register (&__OFFLOAD_TABLE__, %d, __offload_target_data);\\n\"\n-\t   \"}\\n\", OFFLOAD_TARGET_TYPE_INTEL_MIC);\n+\t   \"}\\n\", GOMP_DEVICE_INTEL_MIC);\n   fclose (src_file);\n \n   unsigned new_argc = 0;\n@@ -483,8 +494,7 @@ main (int argc, char **argv)\n   if (!host_compiler)\n     fatal_error (input_location, \"COLLECT_GCC must be set\");\n \n-  const char *target_driver_name\n-    = DEFAULT_REAL_TARGET_MACHINE \"-accel-\" DEFAULT_TARGET_MACHINE \"-gcc\";\n+  const char *target_driver_name = GCC_INSTALL_NAME;\n   char *target_compiler = find_target_compiler (target_driver_name);\n   if (target_compiler == NULL)\n     fatal_error (input_location, \"offload compiler %s not found\","}, {"sha": "9de4b76e3109ff3ad4e638a3da11780097d20785", "filename": "gcc/config/i386/t-intelmic", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30094344891c53015020616b80e51c6e11fd5a8c/gcc%2Fconfig%2Fi386%2Ft-intelmic", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30094344891c53015020616b80e51c6e11fd5a8c/gcc%2Fconfig%2Fi386%2Ft-intelmic", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-intelmic?ref=30094344891c53015020616b80e51c6e11fd5a8c", "patch": "@@ -1,10 +1,10 @@\n+CFLAGS-mkoffload.o += $(DRIVER_DEFINES) -DGCC_INSTALL_NAME=\\\"$(GCC_INSTALL_NAME)\\\"\n+\n mkoffload.o: $(srcdir)/config/i386/intelmic-mkoffload.c\n-\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n-\t  -I$(srcdir)/../libgomp \\\n-\t  -DDEFAULT_REAL_TARGET_MACHINE=\\\"$(real_target_noncanonical)\\\" \\\n-\t  -DDEFAULT_TARGET_MACHINE=\\\"$(target_noncanonical)\\\" \\\n-\t  $< $(OUTPUT_OPTION)\n+\t$(COMPILE) $<\n+\t$(POSTCOMPILE)\n ALL_HOST_OBJS += mkoffload.o\n \n mkoffload$(exeext): mkoffload.o collect-utils.o libcommon-target.a $(LIBIBERTY) $(LIBDEPS)\n-\t$(COMPILER) -o $@ mkoffload.o collect-utils.o libcommon-target.a $(LIBIBERTY) $(LIBS)\n+\t$(LINKER) $(ALL_LINKERFLAGS) $(LDFLAGS) -o $@ \\\n+\t  mkoffload.o collect-utils.o libcommon-target.a $(LIBIBERTY) $(LIBS)"}]}