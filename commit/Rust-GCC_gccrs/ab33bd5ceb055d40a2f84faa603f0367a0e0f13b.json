{"sha": "ab33bd5ceb055d40a2f84faa603f0367a0e0f13b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWIzM2JkNWNlYjA1NWQ0MGEyZjg0ZmFhNjAzZjAzNjdhMGUwZjEzYg==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2010-07-07T13:36:31Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2010-07-07T13:36:31Z"}, "message": "Revert revision 161876.\n\n2010-07-07  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR target/44850\n\t* config/i386/i386.c (ix86_function_ms_hook_prologue): Revert\n\trevision 161876.\n\t(ix86_expand_prologue): Likewise.\n\t(ix86_handle_fndecl_attribute): Likewise.\n\t(ix86_asm_declare_function_name): Likewise.\n\t* config/i386/i386.h (ASM_DECLARE_FUNCTION_NAME): Likewise.\n\t* config/i386/cygming.h (ASM_DECLARE_FUNCTION_NAME): Likewise.\n\t(SUBTARGET_ASM_DECLARE_FUNCTION_NAME): Likewise.\n\t* config/i386/i386-protos.h (ix86_asm_declare_function_name):\n\tLikewise.\n\t* doc/extend.texi: Likewise.\n\nFrom-SVN: r161911", "tree": {"sha": "68f0cd7a4c8448fe1b2bdf11e3700569bbde8898", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68f0cd7a4c8448fe1b2bdf11e3700569bbde8898"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab33bd5ceb055d40a2f84faa603f0367a0e0f13b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab33bd5ceb055d40a2f84faa603f0367a0e0f13b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab33bd5ceb055d40a2f84faa603f0367a0e0f13b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab33bd5ceb055d40a2f84faa603f0367a0e0f13b/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5e86e5405761d9accc2780c524946e29e00b6608", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e86e5405761d9accc2780c524946e29e00b6608", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e86e5405761d9accc2780c524946e29e00b6608"}], "stats": {"total": 116, "additions": 45, "deletions": 71}, "files": [{"sha": "bd9cf806918e68c87b33d0851e72aac8ae19a308", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab33bd5ceb055d40a2f84faa603f0367a0e0f13b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab33bd5ceb055d40a2f84faa603f0367a0e0f13b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ab33bd5ceb055d40a2f84faa603f0367a0e0f13b", "patch": "@@ -1,3 +1,18 @@\n+2010-07-07  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/44850\n+\t* config/i386/i386.c (ix86_function_ms_hook_prologue): Revert\n+\trevision 161876.\n+\t(ix86_expand_prologue): Likewise.\n+\t(ix86_handle_fndecl_attribute): Likewise.\n+\t(ix86_asm_declare_function_name): Likewise.\n+\t* config/i386/i386.h (ASM_DECLARE_FUNCTION_NAME): Likewise.\n+\t* config/i386/cygming.h (ASM_DECLARE_FUNCTION_NAME): Likewise.\n+\t(SUBTARGET_ASM_DECLARE_FUNCTION_NAME): Likewise.\n+\t* config/i386/i386-protos.h (ix86_asm_declare_function_name):\n+\tLikewise.\n+\t* doc/extend.texi: Likewise.\n+\n 2010-07-07  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/44844"}, {"sha": "f2b70afa447fe3261394ec75b6cc5b6ccd5a051f", "filename": "gcc/config/i386/cygming.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab33bd5ceb055d40a2f84faa603f0367a0e0f13b/gcc%2Fconfig%2Fi386%2Fcygming.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab33bd5ceb055d40a2f84faa603f0367a0e0f13b/gcc%2Fconfig%2Fi386%2Fcygming.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygming.h?ref=ab33bd5ceb055d40a2f84faa603f0367a0e0f13b", "patch": "@@ -269,13 +269,14 @@ do {\t\t\t\t\t\t\\\n /* Write the extra assembler code needed to declare a function\n    properly.  If we are generating SDB debugging information, this\n    will happen automatically, so we only need to handle other cases.  */\n-#undef SUBTARGET_ASM_DECLARE_FUNCTION_NAME\n-#define SUBTARGET_ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL)\t\t\\\n+#undef ASM_DECLARE_FUNCTION_NAME\n+#define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL)\t\t\t\\\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       i386_pe_maybe_record_exported_symbol (DECL, NAME, 0);\t\t\\\n       if (write_symbols != SDB_DEBUG)\t\t\t\t\t\\\n \ti386_pe_declare_function_type (FILE, NAME, TREE_PUBLIC (DECL));\t\\\n+      ASM_OUTPUT_LABEL (FILE, NAME);\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n "}, {"sha": "4a0e3062212183820b236c56a79fca4f52403c6b", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab33bd5ceb055d40a2f84faa603f0367a0e0f13b/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab33bd5ceb055d40a2f84faa603f0367a0e0f13b/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=ab33bd5ceb055d40a2f84faa603f0367a0e0f13b", "patch": "@@ -136,7 +136,6 @@ extern enum machine_mode ix86_fp_compare_mode (enum rtx_code);\n \n extern rtx ix86_libcall_value (enum machine_mode);\n extern bool ix86_function_arg_regno_p (int);\n-extern void ix86_asm_declare_function_name (FILE *, const char *, tree);\n extern int ix86_function_arg_boundary (enum machine_mode, tree);\n extern bool ix86_sol10_return_in_memory (const_tree,const_tree);\n extern rtx ix86_force_to_memory (enum machine_mode, rtx);"}, {"sha": "7dfd7bbdcbe65ab80094e8a897f043ec1d17cbe6", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 23, "deletions": 56, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab33bd5ceb055d40a2f84faa603f0367a0e0f13b/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab33bd5ceb055d40a2f84faa603f0367a0e0f13b/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=ab33bd5ceb055d40a2f84faa603f0367a0e0f13b", "patch": "@@ -5078,15 +5078,18 @@ ix86_function_type_abi (const_tree fntype)\n static bool\n ix86_function_ms_hook_prologue (const_tree fntype)\n {\n-  if (lookup_attribute (\"ms_hook_prologue\", DECL_ATTRIBUTES (fntype)))\n+  if (!TARGET_64BIT)\n     {\n-      if (decl_function_context (fntype) != NULL_TREE)\n-      {\n-\terror_at (DECL_SOURCE_LOCATION (fntype),\n-\t    \"ms_hook_prologue is not compatible with nested function\");\n-      }\n+      if (lookup_attribute (\"ms_hook_prologue\", DECL_ATTRIBUTES (fntype)))\n+        {\n+          if (decl_function_context (fntype) != NULL_TREE)\n+          {\n+            error_at (DECL_SOURCE_LOCATION (fntype),\n+                \"ms_hook_prologue is not compatible with nested function\");\n+          }\n \n-      return true;\n+          return true;\n+        }\n     }\n   return false;\n }\n@@ -5109,45 +5112,6 @@ ix86_cfun_abi (void)\n   return cfun->machine->call_abi;\n }\n \n-/* Write the extra assembler code needed to declare a function properly.  */\n-\n-void\n-ix86_asm_declare_function_name (FILE *asm_out_file, const char *fname,\n-\t\t\t\ttree decl)\n-{\n-  bool is_ms_hook = ((decl && ix86_function_ms_hook_prologue (decl)) ? true\n-  \t\t\t\t\t\t\t\t     : false);\n-#ifdef SUBTARGET_ASM_DECLARE_FUNCTION_NAME\n-  SUBTARGET_ASM_DECLARE_FUNCTION_NAME (asm_out_file, fname, decl);\n-#endif\n-\n-  if (is_ms_hook)\n-    {\n-      int i, filler_count = (TARGET_64BIT ? 32 : 16);\n-      unsigned int filler_cc = 0xcccccccc;\n-\n-      for (i = 0; i < filler_count; i += 4)\n-\tfprintf (asm_out_file, ASM_LONG \" %#x\\n\", filler_cc);\n-    }\n-\n-  ASM_OUTPUT_LABEL (asm_out_file, fname);\n-\n-  /* Output magic byte marker, if hot-patch attribute is set.\n-     For x86 case frame-pointer prologue will be emitted in\n-     expand_prologue.  */\n-  if (is_ms_hook)\n-    {\n-      if (TARGET_64BIT)\n-\t/* leaq [%rsp + 0], %rsp  */\n-\tasm_fprintf (asm_out_file, ASM_BYTE\n-\t\t     \"0x48, 0x8d, 0xa4, 0x24, \"\n-\t\t     \"0x00, 0x00, 0x00, 0x00\\n\");\n-      else\n-        /* movl.s %edi, %edi.  */\n-\tasm_fprintf (asm_out_file, ASM_BYTE \"0x8b, 0xff\\n\");\n-    }\n-}\n-\n /* regclass.c  */\n extern void init_regs (void);\n \n@@ -8793,24 +8757,21 @@ ix86_expand_prologue (void)\n \n   ix86_compute_frame_layout (&frame);\n \n-  if (!TARGET_64BIT && ix86_function_ms_hook_prologue (current_function_decl))\n+  if (ix86_function_ms_hook_prologue (current_function_decl))\n     {\n       rtx push, mov;\n \n       /* Make sure the function starts with\n-\t 8b ff     movl.s %edi,%edi (see below in text)\n+\t 8b ff     movl.s %edi,%edi\n \t 55        push   %ebp\n \t 8b ec     movl.s %esp,%ebp\n \n \t This matches the hookable function prologue in Win32 API\n \t functions in Microsoft Windows XP Service Pack 2 and newer.\n \t Wine uses this to enable Windows apps to hook the Win32 API\n-\t functions provided by Wine.\n-\t Remark: Initial nop-move gets emitted by the function\n-\t ix86_asm_declare_function_name and isn't part of this\n-\t function.  The following instruction don't get hard-coded\n-\t in ix86_asm_declare_function_name too, as here notes\n-\t for those instructions are necessary for unwinder/debug.  */\n+\t functions provided by Wine.  */\n+      insn = emit_insn (gen_vswapmov (gen_rtx_REG (SImode, DI_REG),\n+\t\t\t\t      gen_rtx_REG (SImode, DI_REG)));\n       push = emit_insn (gen_push (hard_frame_pointer_rtx));\n       mov = emit_insn (gen_vswapmov (hard_frame_pointer_rtx,\n \t\t\t\t     stack_pointer_rtx));\n@@ -26592,9 +26553,15 @@ ix86_handle_fndecl_attribute (tree *node, tree name,\n       return NULL_TREE;\n     }\n \n+  if (TARGET_64BIT)\n+    {\n+      warning (OPT_Wattributes, \"%qE attribute only available for 32-bit\",\n+               name);\n+      return NULL_TREE;\n+    }\n+\n #ifndef HAVE_AS_IX86_SWAP\n-  if (!TARGET_64BIT)\n-    sorry (\"ms_hook_prologue attribute needs assembler swap suffix support\");\n+  sorry (\"ms_hook_prologue attribute needs assembler swap suffix support\");\n #endif\n \n     return NULL_TREE;"}, {"sha": "d036bf03fec3d52d844f018a23e198dbbcf82711", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab33bd5ceb055d40a2f84faa603f0367a0e0f13b/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab33bd5ceb055d40a2f84faa603f0367a0e0f13b/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=ab33bd5ceb055d40a2f84faa603f0367a0e0f13b", "patch": "@@ -2082,14 +2082,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n     }\n #endif\n \n-/* Write the extra assembler code needed to declare a function\n-   properly.  Target can add additional code by the sub-target\n-   macro SUBTARGET_ASM_DECLARE_FUNCTION_NAME.  */\n-\n-#undef ASM_DECLARE_FUNCTION_NAME\n-#define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL) \\\n-  ix86_asm_declare_function_name (FILE, NAME, DECL)\n-\n /* Under some conditions we need jump tables in the text section,\n    because the assembler cannot handle label differences between\n    sections.  This is the case for x86_64 on Mach-O for example.  */"}, {"sha": "967be9176efc8a8df4baa0601d1d125f9c749bda", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab33bd5ceb055d40a2f84faa603f0367a0e0f13b/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab33bd5ceb055d40a2f84faa603f0367a0e0f13b/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=ab33bd5ceb055d40a2f84faa603f0367a0e0f13b", "patch": "@@ -2736,10 +2736,10 @@ the @option{-maccumulate-outgoing-args} option.\n @item ms_hook_prologue\n @cindex @code{ms_hook_prologue} attribute\n \n-On 32 bit i[34567]86-*-* targets and 64 bit x86_64-*-* targets, you can use\n-this function attribute to make gcc generate the \"hot-patching\" function\n-prologue used in Win32 API functions in Microsoft Windows XP Service Pack 2\n-and newer.\n+On 32 bit i[34567]86-*-* targets, you can use this function attribute to make\n+gcc generate the \"hot-patching\" function prologue used in Win32 API\n+functions in Microsoft Windows XP Service Pack 2 and newer. This requires\n+support for the swap suffix in the assembler. (GNU Binutils 2.19.51 or later)\n \n @item naked\n @cindex function without a prologue/epilogue code"}]}