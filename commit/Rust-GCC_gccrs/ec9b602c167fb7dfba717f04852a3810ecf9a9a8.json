{"sha": "ec9b602c167fb7dfba717f04852a3810ecf9a9a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWM5YjYwMmMxNjdmYjdkZmJhNzE3ZjA0ODUyYTM4MTBlY2Y5YTlhOA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-01-09T08:18:51Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2020-01-09T08:18:51Z"}, "message": "re PR target/93141 (Missed optimization : Use of adc when checking overflow)\n\n\tPR target/93141\n\t* config/i386/i386.md (subv<mode>4): Use SWIDWI iterator instead of\n\tSWI.  Use <general_hilo_operand> instead of <general_operand>.  Use\n\tCONST_SCALAR_INT_P instead of CONST_INT_P.\n\t(*subv<mode>4_1): Rename to ...\n\t(subv<mode>4_1): ... this.\n\t(*subv<dwi>4_doubleword, *addv<dwi>4_doubleword_1): New\n\tdefine_insn_and_split patterns.\n\t(*subv<mode>4_overflow_1, *addv<mode>4_overflow_2): New define_insn\n\tpatterns.\n\n\t* gcc.target/i386/pr93141-1.c: Add tests with constants that have MSB\n\tof the low half of the constant set.\n\t* gcc.target/i386/pr93141-2.c: New test.\n\nFrom-SVN: r280029", "tree": {"sha": "d50925ac91112f5e6a577e4bacb8aa67dd7e27b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d50925ac91112f5e6a577e4bacb8aa67dd7e27b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec9b602c167fb7dfba717f04852a3810ecf9a9a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec9b602c167fb7dfba717f04852a3810ecf9a9a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec9b602c167fb7dfba717f04852a3810ecf9a9a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec9b602c167fb7dfba717f04852a3810ecf9a9a8/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b9c84e95030d375a275f4e518dbc60a397dd5151", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9c84e95030d375a275f4e518dbc60a397dd5151", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9c84e95030d375a275f4e518dbc60a397dd5151"}], "stats": {"total": 323, "additions": 308, "deletions": 15}, "files": [{"sha": "2756a97c47611500429db0d8112398b7fbb31675", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec9b602c167fb7dfba717f04852a3810ecf9a9a8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec9b602c167fb7dfba717f04852a3810ecf9a9a8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ec9b602c167fb7dfba717f04852a3810ecf9a9a8", "patch": "@@ -1,3 +1,16 @@\n+2020-01-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/93141\n+\t* config/i386/i386.md (subv<mode>4): Use SWIDWI iterator instead of\n+\tSWI.  Use <general_hilo_operand> instead of <general_operand>.  Use\n+\tCONST_SCALAR_INT_P instead of CONST_INT_P.\n+\t(*subv<mode>4_1): Rename to ...\n+\t(subv<mode>4_1): ... this.\n+\t(*subv<dwi>4_doubleword, *addv<dwi>4_doubleword_1): New\n+\tdefine_insn_and_split patterns.\n+\t(*subv<mode>4_overflow_1, *addv<mode>4_overflow_2): New define_insn\n+\tpatterns.\n+\n 2020-01-08  David Malcolm  <dmalcolm@redhat.com>\n \n \t* vec.c (class selftest::count_dtor): New class."}, {"sha": "03441109f487c9817a8834067d39d22a5fe1d598", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 169, "deletions": 12, "changes": 181, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec9b602c167fb7dfba717f04852a3810ecf9a9a8/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec9b602c167fb7dfba717f04852a3810ecf9a9a8/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=ec9b602c167fb7dfba717f04852a3810ecf9a9a8", "patch": "@@ -6569,24 +6569,25 @@\n ;; Subtract with jump on overflow.\n (define_expand \"subv<mode>4\"\n   [(parallel [(set (reg:CCO FLAGS_REG)\n-\t\t   (eq:CCO (minus:<DWI>\n-\t\t\t      (sign_extend:<DWI>\n-\t\t\t\t (match_operand:SWI 1 \"nonimmediate_operand\"))\n-\t\t\t      (match_dup 4))\n-\t\t\t   (sign_extend:<DWI>\n-\t\t\t      (minus:SWI (match_dup 1)\n-\t\t\t\t\t (match_operand:SWI 2\n-\t\t\t\t\t    \"<general_operand>\")))))\n-\t      (set (match_operand:SWI 0 \"register_operand\")\n-\t\t   (minus:SWI (match_dup 1) (match_dup 2)))])\n+\t\t   (eq:CCO\n+\t\t     (minus:<DWI>\n+\t\t       (sign_extend:<DWI>\n+\t\t\t (match_operand:SWIDWI 1 \"nonimmediate_operand\"))\n+\t\t       (match_dup 4))\n+\t\t     (sign_extend:<DWI>\n+\t\t       (minus:SWIDWI (match_dup 1)\n+\t\t\t\t     (match_operand:SWIDWI 2\n+\t\t\t\t\t\t\"<general_hilo_operand>\")))))\n+\t      (set (match_operand:SWIDWI 0 \"register_operand\")\n+\t\t   (minus:SWIDWI (match_dup 1) (match_dup 2)))])\n    (set (pc) (if_then_else\n \t       (eq (reg:CCO FLAGS_REG) (const_int 0))\n \t       (label_ref (match_operand 3))\n \t       (pc)))]\n   \"\"\n {\n   ix86_fixup_binary_operands_no_copy (MINUS, <MODE>mode, operands);\n-  if (CONST_INT_P (operands[2]))\n+  if (CONST_SCALAR_INT_P (operands[2]))\n     operands[4] = operands[2];\n   else\n     operands[4] = gen_rtx_SIGN_EXTEND (<DWI>mode, operands[2]);\n@@ -6608,7 +6609,7 @@\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"*subv<mode>4_1\"\n+(define_insn \"subv<mode>4_1\"\n   [(set (reg:CCO FLAGS_REG)\n \t(eq:CCO (minus:<DWI>\n \t\t   (sign_extend:<DWI>\n@@ -6633,6 +6634,162 @@\n \t\t  (const_string \"4\")]\n \t      (const_string \"<MODE_SIZE>\")))])\n \n+(define_insn_and_split \"*subv<dwi>4_doubleword\"\n+  [(set (reg:CCO FLAGS_REG)\n+\t(eq:CCO\n+\t  (minus:<QWI>\n+\t    (sign_extend:<QWI>\n+\t      (match_operand:<DWI> 1 \"nonimmediate_operand\" \"0,0\"))\n+\t    (sign_extend:<QWI>\n+\t      (match_operand:<DWI> 2 \"x86_64_hilo_general_operand\" \"r<di>,o\")))\n+\t  (sign_extend:<QWI>\n+\t    (minus:<DWI> (match_dup 1) (match_dup 2)))))\n+   (set (match_operand:<DWI> 0 \"nonimmediate_operand\" \"=ro,r\")\n+\t(minus:<DWI> (match_dup 1) (match_dup 2)))]\n+  \"ix86_binary_operator_ok (MINUS, <MODE>mode, operands)\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (reg:CC FLAGS_REG)\n+\t\t   (compare:CC (match_dup 1) (match_dup 2)))\n+\t      (set (match_dup 0)\n+\t\t   (minus:DWIH (match_dup 1) (match_dup 2)))])\n+   (parallel [(set (reg:CCO FLAGS_REG)\n+\t\t   (eq:CCO\n+\t\t     (minus:<DWI>\n+\t\t       (minus:<DWI>\n+\t\t\t (sign_extend:<DWI> (match_dup 4))\n+\t\t\t (ltu:<DWI> (reg:CC FLAGS_REG) (const_int 0)))\n+\t\t       (sign_extend:<DWI> (match_dup 5)))\n+\t\t     (sign_extend:<DWI>\n+\t\t       (minus:DWIH\n+\t\t\t (minus:DWIH\n+\t\t\t   (match_dup 4)\n+\t\t\t   (ltu:DWIH (reg:CC FLAGS_REG) (const_int 0)))\n+\t\t\t (match_dup 5)))))\n+\t      (set (match_dup 3)\n+\t\t   (minus:DWIH\n+\t\t     (minus:DWIH\n+\t\t       (match_dup 4)\n+\t\t       (ltu:DWIH (reg:CC FLAGS_REG) (const_int 0)))\n+\t\t     (match_dup 5)))])]\n+{\n+  split_double_mode (<DWI>mode, &operands[0], 3, &operands[0], &operands[3]);\n+})\n+\n+(define_insn_and_split \"*subv<dwi>4_doubleword_1\"\n+  [(set (reg:CCO FLAGS_REG)\n+\t(eq:CCO\n+\t  (minus:<QWI>\n+\t    (sign_extend:<QWI>\n+\t      (match_operand:<DWI> 1 \"nonimmediate_operand\" \"0\"))\n+\t    (match_operand:<QWI> 3 \"const_scalar_int_operand\" \"\"))\n+\t  (sign_extend:<QWI>\n+\t    (minus:<DWI>\n+\t      (match_dup 1)\n+\t      (match_operand:<DWI> 2 \"x86_64_hilo_general_operand\" \"<di>\")))))\n+   (set (match_operand:<DWI> 0 \"nonimmediate_operand\" \"=ro\")\n+\t(minus:<DWI> (match_dup 1) (match_dup 2)))]\n+  \"ix86_binary_operator_ok (MINUS, <MODE>mode, operands)\n+   && CONST_SCALAR_INT_P (operands[2])\n+   && rtx_equal_p (operands[2], operands[3])\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (reg:CC FLAGS_REG)\n+\t\t   (compare:CC (match_dup 1) (match_dup 2)))\n+\t      (set (match_dup 0)\n+\t\t   (minus:DWIH (match_dup 1) (match_dup 2)))])\n+   (parallel [(set (reg:CCO FLAGS_REG)\n+\t\t   (eq:CCO\n+\t\t     (minus:<DWI>\n+\t\t       (minus:<DWI>\n+\t\t\t (sign_extend:<DWI> (match_dup 4))\n+\t\t\t (ltu:<DWI> (reg:CC FLAGS_REG) (const_int 0)))\n+\t\t       (match_dup 5))\n+\t\t     (sign_extend:<DWI>\n+\t\t       (minus:DWIH\n+\t\t\t (minus:DWIH\n+\t\t\t   (match_dup 4)\n+\t\t\t   (ltu:DWIH (reg:CC FLAGS_REG) (const_int 0)))\n+\t\t\t (match_dup 5)))))\n+\t      (set (match_dup 3)\n+\t\t   (minus:DWIH\n+\t\t     (minus:DWIH\n+\t\t       (match_dup 4)\n+\t\t       (ltu:DWIH (reg:CC FLAGS_REG) (const_int 0)))\n+\t\t     (match_dup 5)))])]\n+{\n+  split_double_mode (<DWI>mode, &operands[0], 3, &operands[0], &operands[3]);\n+  if (operands[2] == const0_rtx)\n+    {\n+      emit_insn (gen_subv<mode>4_1 (operands[3], operands[4], operands[5],\n+\t\t\t\t    operands[5]));\n+      DONE;\n+    }\n+})\n+\n+(define_insn \"*subv<mode>4_overflow_1\"\n+  [(set (reg:CCO FLAGS_REG)\n+\t(eq:CCO\n+\t  (minus:<DWI>\n+\t    (minus:<DWI>\n+\t      (sign_extend:<DWI>\n+\t\t(match_operand:SWI 1 \"nonimmediate_operand\" \"%0,0\"))\n+\t      (match_operator:<DWI> 4 \"ix86_carry_flag_operator\"\n+\t\t[(match_operand 3 \"flags_reg_operand\") (const_int 0)]))\n+\t    (sign_extend:<DWI>\n+\t      (match_operand:SWI 2 \"<general_sext_operand>\" \"rWe,m\")))\n+\t  (sign_extend:<DWI>\n+\t    (minus:SWI\n+\t      (minus:SWI\n+\t\t(match_dup 1)\n+\t\t(match_operator:SWI 5 \"ix86_carry_flag_operator\"\n+\t\t  [(match_dup 3) (const_int 0)]))\n+\t      (match_dup 2)))))\n+   (set (match_operand:SWI 0 \"nonimmediate_operand\" \"=rm,r\")\n+\t(minus:SWI\n+\t  (minus:SWI\n+\t    (match_dup 1)\n+\t    (match_op_dup 5 [(match_dup 3) (const_int 0)]))\n+\t  (match_dup 2)))]\n+  \"ix86_binary_operator_ok (MINUS, <MODE>mode, operands)\"\n+  \"sbb{<imodesuffix>}\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"alu\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"*subv<mode>4_overflow_2\"\n+  [(set (reg:CCO FLAGS_REG)\n+\t(eq:CCO\n+\t  (minus:<DWI>\n+\t    (minus:<DWI>\n+\t      (sign_extend:<DWI>\n+\t\t(match_operand:SWI 1 \"nonimmediate_operand\" \"%0\"))\n+\t      (match_operator:<DWI> 4 \"ix86_carry_flag_operator\"\n+\t\t[(match_operand 3 \"flags_reg_operand\") (const_int 0)]))\n+\t    (match_operand:<DWI> 6 \"const_int_operand\" \"\"))\n+\t  (sign_extend:<DWI>\n+\t    (minus:SWI\n+\t      (minus:SWI\n+\t\t(match_dup 1)\n+\t\t(match_operator:SWI 5 \"ix86_carry_flag_operator\"\n+\t\t  [(match_dup 3) (const_int 0)]))\n+\t      (match_operand:SWI 2 \"x86_64_immediate_operand\" \"e\")))))\n+   (set (match_operand:SWI 0 \"nonimmediate_operand\" \"=rm\")\n+\t(minus:SWI\n+\t  (minus:SWI\n+\t    (match_dup 1)\n+\t    (match_op_dup 5 [(match_dup 3) (const_int 0)]))\n+\t  (match_dup 2)))]\n+  \"ix86_binary_operator_ok (MINUS, <MODE>mode, operands)\n+   && CONST_INT_P (operands[2])\n+   && INTVAL (operands[2]) == INTVAL (operands[6])\"\n+  \"sbb{<imodesuffix>}\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"alu\")\n+   (set_attr \"mode\" \"<MODE>\")\n+   (set (attr \"length_immediate\")\n+     (if_then_else (match_test \"IN_RANGE (INTVAL (operands[2]), -128, 127)\")\n+       (const_string \"1\")\n+       (const_string \"4\")))])\n+\n (define_expand \"usubv<mode>4\"\n   [(parallel [(set (reg:CC FLAGS_REG)\n \t\t   (compare:CC"}, {"sha": "53766afc0c6566417caee9c41893a17620fc81e8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec9b602c167fb7dfba717f04852a3810ecf9a9a8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec9b602c167fb7dfba717f04852a3810ecf9a9a8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ec9b602c167fb7dfba717f04852a3810ecf9a9a8", "patch": "@@ -1,3 +1,10 @@\n+2020-01-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/93141\n+\t* gcc.target/i386/pr93141-1.c: Add tests with constants that have MSB\n+\tof the low half of the constant set.\n+\t* gcc.target/i386/pr93141-2.c: New test.\n+\n 2020-01-08  Jeff Law  <law@redhat.com>\n \n \t* gcc.dg/Wstringop-overflow-27.c: Make testnames unique."}, {"sha": "3a2adf347d26fe86f2795e015dad9f5d2c0e82bc", "filename": "gcc/testsuite/gcc.target/i386/pr93141-1.c", "status": "modified", "additions": 41, "deletions": 3, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec9b602c167fb7dfba717f04852a3810ecf9a9a8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr93141-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec9b602c167fb7dfba717f04852a3810ecf9a9a8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr93141-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr93141-1.c?ref=ec9b602c167fb7dfba717f04852a3810ecf9a9a8", "patch": "@@ -2,15 +2,17 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -masm=att\" } */\n /* { dg-final { scan-assembler-not \"cmp\\[lq]\\t\" } } */\n-/* { dg-final { scan-assembler-times \"setc\\t%\" 3 } } */\n-/* { dg-final { scan-assembler-times \"seto\\t%\" 5 } } */\n-/* { dg-final { scan-assembler-times \"adc\\[lq]\\t\" 5 } } */\n+/* { dg-final { scan-assembler-times \"setc\\t%\" 5 } } */\n+/* { dg-final { scan-assembler-times \"seto\\t%\" 7 } } */\n+/* { dg-final { scan-assembler-times \"adc\\[lq]\\t\" 9 } } */\n \n #ifdef __x86_64__\n typedef unsigned __int128 U;\n+typedef unsigned long long HU;\n typedef signed __int128 S;\n #else\n typedef unsigned long long U;\n+typedef unsigned int HU;\n typedef signed long long S;\n #endif\n int o;\n@@ -81,3 +83,39 @@ garply (S x)\n \t\t\t\t | (S) 0xbeedead, &z);\n   return z;\n }\n+\n+S\n+waldo (S x)\n+{\n+  S z;\n+  o = __builtin_add_overflow (x, (S) ((((S) 0xdeadbee) << (sizeof (S) * __CHAR_BIT__ / 2))\n+\t\t\t\t      | -(HU) 0xbeedead), &z);\n+  return z;\n+}\n+\n+S\n+fred (S x)\n+{\n+  S z;\n+  o = __builtin_add_overflow (x, (S) ((-(((S) 0xdeadbee) << (sizeof (S) * __CHAR_BIT__ / 2)))\n+\t\t\t\t      | -(HU) 0xbeedead), &z);\n+  return z;\n+}\n+\n+U\n+plugh (U x)\n+{\n+  U z;\n+  o = __builtin_add_overflow (x, (U) ((((U) 0xdeadbee) << (sizeof (U) * __CHAR_BIT__ / 2))\n+\t\t\t\t      | -(HU) 0xbeedead), &z);\n+  return z;\n+}\n+\n+U\n+xyzzy (U x)\n+{\n+  U z;\n+  o = __builtin_add_overflow (x, (U) ((-(((U) 0xdeadbee) << (sizeof (U) * __CHAR_BIT__ / 2)))\n+\t\t\t\t      | -(HU) 0xbeedead), &z);\n+  return z;\n+}"}, {"sha": "83ae7edb9639284a5aac27f6b7ece7cd31f2b899", "filename": "gcc/testsuite/gcc.target/i386/pr93141-2.c", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec9b602c167fb7dfba717f04852a3810ecf9a9a8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr93141-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec9b602c167fb7dfba717f04852a3810ecf9a9a8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr93141-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr93141-2.c?ref=ec9b602c167fb7dfba717f04852a3810ecf9a9a8", "patch": "@@ -0,0 +1,78 @@\n+/* PR target/93141 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -masm=att\" } */\n+/* { dg-final { scan-assembler-not \"cmp\\[lq]\\t\" } } */\n+/* { dg-final { scan-assembler-not \"adc\\[lq]\\t\" } } */\n+/* { dg-final { scan-assembler-times \"seto\\t%\" 7 } } */\n+/* { dg-final { scan-assembler-times \"sbb\\[lq]\\t\" 5 } } */\n+\n+#ifdef __x86_64__\n+typedef unsigned __int128 U;\n+typedef unsigned long long HU;\n+typedef signed __int128 S;\n+#else\n+typedef unsigned long long U;\n+typedef signed int HU;\n+typedef signed long long S;\n+#endif\n+int o;\n+\n+S\n+qux (S x, S y)\n+{\n+  S z;\n+  o = __builtin_sub_overflow (x, y, &z);\n+  return z;\n+}\n+\n+S\n+quux (S x)\n+{\n+  S z;\n+  o = __builtin_sub_overflow (x, ((S) 0xdeadbee) << (sizeof (S) * __CHAR_BIT__ / 2), &z);\n+  return z;\n+}\n+\n+S\n+corge (S x)\n+{\n+  S z;\n+  o = __builtin_sub_overflow (x, (((S) 0xdeadbee) << (sizeof (S) * __CHAR_BIT__ / 2))\n+\t\t\t\t | (S) 0xbeedead, &z);\n+  return z;\n+}\n+\n+S\n+grault (S x)\n+{\n+  S z;\n+  o = __builtin_sub_overflow (x, -((S) 0xdeadbee) << (sizeof (S) * __CHAR_BIT__ / 2), &z);\n+  return z;\n+}\n+\n+S\n+garply (S x)\n+{\n+  S z;\n+  o = __builtin_sub_overflow (x, (-(((S) 0xdeadbee) << (sizeof (S) * __CHAR_BIT__ / 2)))\n+\t\t\t\t | (S) 0xbeedead, &z);\n+  return z;\n+}\n+\n+S\n+waldo (S x)\n+{\n+  S z;\n+  o = __builtin_sub_overflow (x, (S) ((((S) 0xdeadbee) << (sizeof (S) * __CHAR_BIT__ / 2))\n+\t\t\t\t      | -(HU) 0xbeedead), &z);\n+  return z;\n+}\n+\n+S\n+fred (S x)\n+{\n+  S z;\n+  o = __builtin_sub_overflow (x, (S) ((-(((S) 0xdeadbee) << (sizeof (S) * __CHAR_BIT__ / 2)))\n+\t\t\t\t      | -(HU) 0xbeedead), &z);\n+  return z;\n+}"}]}