{"sha": "c3c2cb3741352a3794593654440ec0ea92e83825", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzNjMmNiMzc0MTM1MmEzNzk0NTkzNjU0NDQwZWMwZWE5MmU4MzgyNQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-09-23T23:23:19Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-09-23T23:23:19Z"}, "message": "(significant_bits, num_sign_bit_copies): Handle SUBREGs made for promoted\nvariables.\n\nFrom-SVN: r2215", "tree": {"sha": "9b2dc4229b47684cdc99b37b5eceb1bee034edb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b2dc4229b47684cdc99b37b5eceb1bee034edb6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c3c2cb3741352a3794593654440ec0ea92e83825", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3c2cb3741352a3794593654440ec0ea92e83825", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3c2cb3741352a3794593654440ec0ea92e83825", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3c2cb3741352a3794593654440ec0ea92e83825/comments", "author": null, "committer": null, "parents": [{"sha": "d6749decf62e2f4bdca0f2586c05614cdb081c6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6749decf62e2f4bdca0f2586c05614cdb081c6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6749decf62e2f4bdca0f2586c05614cdb081c6a"}], "stats": {"total": 16, "additions": 16, "deletions": 0}, "files": [{"sha": "044286000ad11005e176547cd246c1c2fc6ebb69", "filename": "gcc/combine.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3c2cb3741352a3794593654440ec0ea92e83825/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3c2cb3741352a3794593654440ec0ea92e83825/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=c3c2cb3741352a3794593654440ec0ea92e83825", "patch": "@@ -6083,6 +6083,14 @@ significant_bits (x, mode)\n       break;\n \n     case SUBREG:\n+      /* If this is a SUBREG formed for a promoted variable that has\n+\t been zero-extended, we know that at least the high-order bits\n+\t are zero, though others might be too.  */\n+\n+      if (SUBREG_PROMOTED_VAR_P (x) && SUBREG_PROMOTED_UNSIGNED_P (x))\n+\tsignificant = (GET_MODE_MASK (GET_MODE (x))\n+\t\t       & significant_bits (SUBREG_REG (x), GET_MODE (x)));\n+\n       /* If the inner mode is a single word for both the host and target\n \t machines, we can compute this from which bits of the inner\n \t object are known significant.  */\n@@ -6220,6 +6228,14 @@ num_sign_bit_copies (x, mode)\n       return (sig == 0 ? bitwidth : bitwidth - floor_log2 (sig) - 1);\n \n     case SUBREG:\n+      /* If this is a SUBREG for a promoted object that is sign-extended\n+\t and we are looking at it in a wider mode, we know that at least the\n+\t high-order bits are known to be sign bit copies.  */\n+\n+      if (SUBREG_PROMOTED_VAR_P (x) && ! SUBREG_PROMOTED_UNSIGNED_P (x))\n+\treturn (GET_MODE_BITSIZE (mode) - GET_MODE_BITSIZE (GET_MODE (x))\n+\t\t+ num_sign_bit_copies (SUBREG_REG (x), GET_MODE (x)));\n+\n       /* For a smaller object, just ignore the high bits. */\n       if (bitwidth <= GET_MODE_BITSIZE (GET_MODE (SUBREG_REG (x))))\n \t{"}]}