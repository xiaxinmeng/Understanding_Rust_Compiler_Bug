{"sha": "9370b3c0f9f6d4e3ad3864ae77eac0a353aa41ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTM3MGIzYzBmOWY2ZDRlM2FkMzg2NGFlNzdlYWMwYTM1M2FhNDFmZg==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2008-01-03T19:49:38Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2008-01-03T19:49:38Z"}, "message": "re PR fortran/34565 (internal write to string array fails)\n\n2008-01-03  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR libfortran/34565\n\t* io/io.h:  Adjust protoypes for open_internal(),\n\tnext_array_record() and init_loop_spec().\n\t* io/list_read.c (next_char):  Use argument \"finished\"\n\tof next_array_record to check for end on internal file.\n\t* io/unit.c:  Calculate the offset for an array\n\tinternal file and supply this informatin to open_internal().\n\t* io/unix.c (open_internal):  Set the offset for the internal\n\tfile on open.\n\t* io/transfer.c (init_loop_spec):  Calculate the starting\n\trecord in case of negative strides.  Return size of 0 for\n\tan empty array.\n\t(next_array_record):  Use an extra flag to signal that the\n\tarray is finished.\n\t(next_record_r):  Use the new flag to next_array_record().\n\t(next_record_w):  Likewise.\n\n2008-01-03  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR libfortran/34565\n\t* gfortran.dg/internal_readwrite_1.f90:  New test.\n\t* gfortran.dg/internal_readwrite_2.f90:  New test.\n\nFrom-SVN: r131305", "tree": {"sha": "407a1075cdef9fa8b447f85bf9e754483cb358c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/407a1075cdef9fa8b447f85bf9e754483cb358c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9370b3c0f9f6d4e3ad3864ae77eac0a353aa41ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9370b3c0f9f6d4e3ad3864ae77eac0a353aa41ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9370b3c0f9f6d4e3ad3864ae77eac0a353aa41ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9370b3c0f9f6d4e3ad3864ae77eac0a353aa41ff/comments", "author": null, "committer": null, "parents": [{"sha": "33ae48375f1ceba18d2fe42d10acdf7a6b8acaba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33ae48375f1ceba18d2fe42d10acdf7a6b8acaba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33ae48375f1ceba18d2fe42d10acdf7a6b8acaba"}], "stats": {"total": 135, "additions": 113, "deletions": 22}, "files": [{"sha": "b2891dcdeeaa782780507c0535b77040e304af6f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9370b3c0f9f6d4e3ad3864ae77eac0a353aa41ff/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9370b3c0f9f6d4e3ad3864ae77eac0a353aa41ff/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9370b3c0f9f6d4e3ad3864ae77eac0a353aa41ff", "patch": "@@ -1,3 +1,9 @@\n+2008-01-03  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR libfortran/34565\n+\t* gfortran.dg/internal_readwrite_1.f90:  New test.\n+\t* gfortran.dg/internal_readwrite_2.f90:  New test.\n+\n 2008-01-03  Tom Tromey  <tromey@redhat.com>\n \n \tPR preprocessor/34602:"}, {"sha": "405f581546026d9e3a57ea0c5498b1f434d1c36f", "filename": "gcc/testsuite/gfortran.dg/internal_readwrite_1.f90", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9370b3c0f9f6d4e3ad3864ae77eac0a353aa41ff/gcc%2Ftestsuite%2Fgfortran.dg%2Finternal_readwrite_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9370b3c0f9f6d4e3ad3864ae77eac0a353aa41ff/gcc%2Ftestsuite%2Fgfortran.dg%2Finternal_readwrite_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finternal_readwrite_1.f90?ref=9370b3c0f9f6d4e3ad3864ae77eac0a353aa41ff", "patch": "@@ -0,0 +1,15 @@\n+! { dg-do run }\n+! PR 34565 - internal writes with negative strides\n+! didn't work.\n+program main\n+  implicit none\n+  integer :: i\n+  integer :: lo, up, st\n+  character(len=2) :: c (5)\n+  integer, dimension(5) :: n\n+  c = (/ 'a', 'b', 'c', 'd', 'e' /)\n+  write (unit=c(5:1:-2),fmt=\"(A)\") '5','3', '1'\n+  write (unit=c(2:4:2),fmt=\"(A)\") '2', '4'\n+  read  (c(5:1:-1),fmt=\"(I2)\") (n(i), i=5,1,-1)\n+  if (any(n /= (/ (i,i=1,5) /))) call abort\n+end program main"}, {"sha": "48b65865200aef43b0769338bd7918d921d7fabd", "filename": "gcc/testsuite/gfortran.dg/internal_readwrite_2.f90", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9370b3c0f9f6d4e3ad3864ae77eac0a353aa41ff/gcc%2Ftestsuite%2Fgfortran.dg%2Finternal_readwrite_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9370b3c0f9f6d4e3ad3864ae77eac0a353aa41ff/gcc%2Ftestsuite%2Fgfortran.dg%2Finternal_readwrite_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finternal_readwrite_2.f90?ref=9370b3c0f9f6d4e3ad3864ae77eac0a353aa41ff", "patch": "@@ -0,0 +1,14 @@\n+! { dg-do run }\n+! PR 34565 - intenal writes with negative strides.  This\n+! test case tries out a negative stride in a higher\n+! dimension.\n+program main\n+  implicit none\n+  integer :: i\n+  integer, parameter :: n1=2, n2=3, n3=5\n+  character(len=n1*n2*n3*2) :: line\n+  character(len=2), dimension(n1,n2,n3):: c\n+  write (unit=c(:,n2:1:-1,:),fmt=\"(I2)\") (i,i=1,n1*n2*n3)\n+  line = transfer(c,mold=line)\n+  if (line /=\" 5 6 3 4 1 21112 910 7 8171815161314232421221920293027282526\") call abort\n+end program main"}, {"sha": "c15f5d5505071d5806f6ea8545a4bd85bd6522ff", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9370b3c0f9f6d4e3ad3864ae77eac0a353aa41ff/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9370b3c0f9f6d4e3ad3864ae77eac0a353aa41ff/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=9370b3c0f9f6d4e3ad3864ae77eac0a353aa41ff", "patch": "@@ -0,0 +1,18 @@\n+2008-01-03  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR libfortran/34565\n+\t* io/io.h:  Adjust protoypes for open_internal(),\n+\tnext_array_record() and init_loop_spec().\n+\t* io/list_read.c (next_char):  Use argument \"finished\"\n+\tof next_array_record to check for end on internal file.\n+\t* io/unit.c:  Calculate the offset for an array\n+\tinternal file and supply this informatin to open_internal().\n+\t* io/unix.c (open_internal):  Set the offset for the internal\n+\tfile on open.\n+\t* io/transfer.c (init_loop_spec):  Calculate the starting\n+\trecord in case of negative strides.  Return size of 0 for\n+\tan empty array.\n+\t(next_array_record):  Use an extra flag to signal that the\n+\tarray is finished.\n+\t(next_record_r):  Use the new flag to next_array_record().\n+\t(next_record_w):  Likewise."}, {"sha": "3e020ec90de921f04f932ddabb9926af9521986e", "filename": "libgfortran/io/io.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9370b3c0f9f6d4e3ad3864ae77eac0a353aa41ff/libgfortran%2Fio%2Fio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9370b3c0f9f6d4e3ad3864ae77eac0a353aa41ff/libgfortran%2Fio%2Fio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fio.h?ref=9370b3c0f9f6d4e3ad3864ae77eac0a353aa41ff", "patch": "@@ -569,7 +569,7 @@ internal_proto(compare_files);\n extern stream *open_external (st_parameter_open *, unit_flags *);\n internal_proto(open_external);\n \n-extern stream *open_internal (char *, int);\n+extern stream *open_internal (char *, int, gfc_offset);\n internal_proto(open_internal);\n \n extern stream *input_stream (void);\n@@ -734,10 +734,12 @@ internal_proto(read_sf);\n extern void *write_block (st_parameter_dt *, int);\n internal_proto(write_block);\n \n-extern gfc_offset next_array_record (st_parameter_dt *, array_loop_spec *);\n+extern gfc_offset next_array_record (st_parameter_dt *, array_loop_spec *,\n+\t\t\t\t     int*);\n internal_proto(next_array_record);\n \n-extern gfc_offset init_loop_spec (gfc_array_char *, array_loop_spec *);\n+extern gfc_offset init_loop_spec (gfc_array_char *, array_loop_spec *,\n+\t\t\t\t  gfc_offset *);\n internal_proto(init_loop_spec);\n \n extern void next_record (st_parameter_dt *, int);"}, {"sha": "f00fb77394b7e323d62188b0d6eee56086436bee", "filename": "libgfortran/io/list_read.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9370b3c0f9f6d4e3ad3864ae77eac0a353aa41ff/libgfortran%2Fio%2Flist_read.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9370b3c0f9f6d4e3ad3864ae77eac0a353aa41ff/libgfortran%2Fio%2Flist_read.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Flist_read.c?ref=9370b3c0f9f6d4e3ad3864ae77eac0a353aa41ff", "patch": "@@ -171,11 +171,14 @@ next_char (st_parameter_dt *dtp)\n       /* Check for \"end-of-record\" condition.  */\n       if (dtp->u.p.current_unit->bytes_left == 0)\n \t{\n+\t  int finished;\n+\n \t  c = '\\n';\n-\t  record = next_array_record (dtp, dtp->u.p.current_unit->ls);\n+\t  record = next_array_record (dtp, dtp->u.p.current_unit->ls,\n+\t\t\t\t      &finished);\n \n \t  /* Check for \"end-of-file\" condition.  */      \n-\t  if (record == 0)\n+\t  if (finished)\n \t    {\n \t      dtp->u.p.at_eof = 1;\n \t      goto done;"}, {"sha": "9b9e28ef3b7aafbba059c4757b91f3dfe5753f12", "filename": "libgfortran/io/transfer.c", "status": "modified", "additions": 42, "deletions": 13, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9370b3c0f9f6d4e3ad3864ae77eac0a353aa41ff/libgfortran%2Fio%2Ftransfer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9370b3c0f9f6d4e3ad3864ae77eac0a353aa41ff/libgfortran%2Fio%2Ftransfer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Ftransfer.c?ref=9370b3c0f9f6d4e3ad3864ae77eac0a353aa41ff", "patch": "@@ -2068,42 +2068,63 @@ data_transfer_init (st_parameter_dt *dtp, int read_flag)\n }\n \n /* Initialize an array_loop_spec given the array descriptor.  The function\n-   returns the index of the last element of the array.  */\n+   returns the index of the last element of the array, and also returns\n+   starting record, where the first I/O goes to (necessary in case of\n+   negative strides).  */\n    \n gfc_offset\n-init_loop_spec (gfc_array_char *desc, array_loop_spec *ls)\n+init_loop_spec (gfc_array_char *desc, array_loop_spec *ls,\n+\t\tgfc_offset *start_record)\n {\n   int rank = GFC_DESCRIPTOR_RANK(desc);\n   int i;\n   gfc_offset index; \n+  int empty;\n \n+  empty = 0;\n   index = 1;\n+  *start_record = 0;\n+\n   for (i=0; i<rank; i++)\n     {\n       ls[i].idx = desc->dim[i].lbound;\n       ls[i].start = desc->dim[i].lbound;\n       ls[i].end = desc->dim[i].ubound;\n       ls[i].step = desc->dim[i].stride;\n-      \n-      index += (desc->dim[i].ubound - desc->dim[i].lbound)\n-                      * desc->dim[i].stride;\n+      empty = empty || (desc->dim[i].ubound < desc->dim[i].lbound);\n+\n+      if (desc->dim[i].stride > 0)\n+\t{\n+\t  index += (desc->dim[i].ubound - desc->dim[i].lbound)\n+\t    * desc->dim[i].stride;\n+\t}\n+      else\n+\t{\n+\t  index -= (desc->dim[i].ubound - desc->dim[i].lbound)\n+\t    * desc->dim[i].stride;\n+\t  *start_record -= (desc->dim[i].ubound - desc->dim[i].lbound)\n+\t    * desc->dim[i].stride;\n+\t}\n     }\n-  return index;\n+\n+  if (empty)\n+    return 0;\n+  else\n+    return index;\n }\n \n /* Determine the index to the next record in an internal unit array by\n-   by incrementing through the array_loop_spec.  TODO:  Implement handling\n-   negative strides. */\n+   by incrementing through the array_loop_spec.  */\n    \n gfc_offset\n-next_array_record (st_parameter_dt *dtp, array_loop_spec *ls)\n+next_array_record (st_parameter_dt *dtp, array_loop_spec *ls, int *finished)\n {\n   int i, carry;\n   gfc_offset index;\n   \n   carry = 1;\n   index = 0;\n-  \n+\n   for (i = 0; i < dtp->u.p.current_unit->rank; i++)\n     {\n       if (carry)\n@@ -2120,6 +2141,8 @@ next_array_record (st_parameter_dt *dtp, array_loop_spec *ls)\n       index = index + (ls[i].idx - ls[i].start) * ls[i].step;\n     }\n \n+  *finished = carry;\n+\n   return index;\n }\n \n@@ -2241,7 +2264,10 @@ next_record_r (st_parameter_dt *dtp)\n \t{\n \t  if (is_array_io (dtp))\n \t    {\n-\t      record = next_array_record (dtp, dtp->u.p.current_unit->ls);\n+\t      int finished;\n+\n+\t      record = next_array_record (dtp, dtp->u.p.current_unit->ls,\n+\t\t\t\t\t  &finished);\n \n \t      /* Now seek to this record.  */\n \t      record = record * dtp->u.p.current_unit->recl;\n@@ -2460,6 +2486,8 @@ next_record_w (st_parameter_dt *dtp, int done)\n \t{\n \t  if (is_array_io (dtp))\n \t    {\n+\t      int finished;\n+\n \t      length = (int) dtp->u.p.current_unit->bytes_left;\n \t      \n \t      /* If the farthest position reached is greater than current\n@@ -2483,8 +2511,9 @@ next_record_w (st_parameter_dt *dtp, int done)\n \n \t      /* Now that the current record has been padded out,\n \t\t determine where the next record in the array is. */\n-\t      record = next_array_record (dtp, dtp->u.p.current_unit->ls);\n-\t      if (record == 0)\n+\t      record = next_array_record (dtp, dtp->u.p.current_unit->ls,\n+\t\t\t\t\t  &finished);\n+\t      if (finished)\n \t\tdtp->u.p.current_unit->endfile = AT_ENDFILE;\n \t      \n \t      /* Now seek to this record */"}, {"sha": "48efb9bb2d79fe668b55be44cac57e63337d97a3", "filename": "libgfortran/io/unit.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9370b3c0f9f6d4e3ad3864ae77eac0a353aa41ff/libgfortran%2Fio%2Funit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9370b3c0f9f6d4e3ad3864ae77eac0a353aa41ff/libgfortran%2Fio%2Funit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Funit.c?ref=9370b3c0f9f6d4e3ad3864ae77eac0a353aa41ff", "patch": "@@ -369,6 +369,7 @@ gfc_unit *\n get_internal_unit (st_parameter_dt *dtp)\n {\n   gfc_unit * iunit;\n+  gfc_offset start_record = 0;\n \n   /* Allocate memory for a unit structure.  */\n \n@@ -405,12 +406,15 @@ get_internal_unit (st_parameter_dt *dtp)\n       iunit->ls = (array_loop_spec *)\n \tget_mem (iunit->rank * sizeof (array_loop_spec));\n       dtp->internal_unit_len *=\n-\tinit_loop_spec (dtp->internal_unit_desc, iunit->ls);\n+\tinit_loop_spec (dtp->internal_unit_desc, iunit->ls, &start_record);\n+\n+      start_record *= iunit->recl;\n     }\n \n   /* Set initial values for unit parameters.  */\n \n-  iunit->s = open_internal (dtp->internal_unit, dtp->internal_unit_len);\n+  iunit->s = open_internal (dtp->internal_unit - start_record,\n+\t\t\t    dtp->internal_unit_len, -start_record);\n   iunit->bytes_left = iunit->recl;\n   iunit->last_record=0;\n   iunit->maxrec=0;"}, {"sha": "91d5adbb476f0306e50c30f4832c07d4ba60f2e6", "filename": "libgfortran/io/unix.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9370b3c0f9f6d4e3ad3864ae77eac0a353aa41ff/libgfortran%2Fio%2Funix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9370b3c0f9f6d4e3ad3864ae77eac0a353aa41ff/libgfortran%2Fio%2Funix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Funix.c?ref=9370b3c0f9f6d4e3ad3864ae77eac0a353aa41ff", "patch": "@@ -1078,15 +1078,15 @@ empty_internal_buffer(stream *strm)\n /* open_internal()-- Returns a stream structure from an internal file */\n \n stream *\n-open_internal (char *base, int length)\n+open_internal (char *base, int length, gfc_offset offset)\n {\n   int_stream *s;\n \n   s = get_mem (sizeof (int_stream));\n   memset (s, '\\0', sizeof (int_stream));\n \n   s->buffer = base;\n-  s->buffer_offset = 0;\n+  s->buffer_offset = offset;\n \n   s->logical_offset = 0;\n   s->active = s->file_length = length;"}]}