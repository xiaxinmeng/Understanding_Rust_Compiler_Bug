{"sha": "6e5084b44016113f2c6950be8782d8c84397ef4b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmU1MDg0YjQ0MDE2MTEzZjJjNjk1MGJlODc4MmQ4Yzg0Mzk3ZWY0Yg==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-03-14T18:30:24Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-03-14T18:30:54Z"}, "message": "libphobos: Merge upstream druntime 7915b6a3\n\nIncludes port fixes for Musl on ARM, AArch64, and SystemZ targets.\n\nReviewed-on: https://github.com/dlang/druntime/pull/2751\n             https://github.com/dlang/druntime/pull/2843\n             https://github.com/dlang/druntime/pull/2844\n             https://github.com/dlang/druntime/pull/2898", "tree": {"sha": "70728ad30792380bb66ade4272919a2fd5dbb076", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/70728ad30792380bb66ade4272919a2fd5dbb076"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e5084b44016113f2c6950be8782d8c84397ef4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e5084b44016113f2c6950be8782d8c84397ef4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e5084b44016113f2c6950be8782d8c84397ef4b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e5084b44016113f2c6950be8782d8c84397ef4b/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a6408bd18fe893a59297d80010fbd3660300347", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a6408bd18fe893a59297d80010fbd3660300347", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a6408bd18fe893a59297d80010fbd3660300347"}], "stats": {"total": 776, "additions": 723, "deletions": 53}, "files": [{"sha": "0e2c5d1c1391872b63a5cad04880efb468f8044c", "filename": "libphobos/libdruntime/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e5084b44016113f2c6950be8782d8c84397ef4b/libphobos%2Flibdruntime%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e5084b44016113f2c6950be8782d8c84397ef4b/libphobos%2Flibdruntime%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2FMERGE?ref=6e5084b44016113f2c6950be8782d8c84397ef4b", "patch": "@@ -1,4 +1,4 @@\n-5bb8ce19fa495e5f794b3c513ae1bf7aabae93ff\n+7915b6a399fbb6d9c0db351eb5a8fda7e43fe8c5\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/druntime repository."}, {"sha": "80105d70de7436b654a330d3d81a4cd0dd17d8bb", "filename": "libphobos/libdruntime/core/stdc/errno.d", "status": "modified", "additions": 328, "deletions": 0, "changes": 328, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e5084b44016113f2c6950be8782d8c84397ef4b/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Ferrno.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e5084b44016113f2c6950be8782d8c84397ef4b/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Ferrno.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Ferrno.d?ref=6e5084b44016113f2c6950be8782d8c84397ef4b", "patch": "@@ -144,6 +144,15 @@ else version (Solaris)\n         alias errno = ___errno;\n     }\n }\n+else version (Haiku)\n+{\n+    // https://github.com/haiku/haiku/blob/master/headers/posix/errno.h\n+    extern (C)\n+    {\n+        ref int _errnop();\n+        alias errno = _errnop;\n+    }\n+}\n else\n {\n     ///\n@@ -1709,6 +1718,325 @@ else version (Solaris)\n     enum EINPROGRESS =    150     /** operation now in progress */;\n     enum ESTALE =         151     /** Stale NFS file handle */;\n }\n+else version (Haiku)\n+{\n+    // https://github.com/haiku/haiku/blob/master/headers/os/support/Errors.h\n+    // https://github.com/haiku/haiku/blob/master/headers/build/os/support/Errors.h\n+    import core.stdc.limits : INT_MIN;\n+    enum B_GENERAL_ERROR_BASE        = INT_MIN;\n+    enum B_OS_ERROR_BASE             = (B_GENERAL_ERROR_BASE + 0x1000);\n+    enum B_APP_ERROR_BASE            = (B_GENERAL_ERROR_BASE + 0x2000);\n+    enum B_INTERFACE_ERROR_BASE      = (B_GENERAL_ERROR_BASE + 0x3000);\n+    enum B_MEDIA_ERROR_BASE          = (B_GENERAL_ERROR_BASE + 0x4000);\n+                                            /* - 0x41ff */\n+    enum B_TRANSLATION_ERROR_BASE    = (B_GENERAL_ERROR_BASE + 0x4800);\n+                                            /* - 0x48ff */\n+    enum B_MIDI_ERROR_BASE           = (B_GENERAL_ERROR_BASE + 0x5000);\n+    enum B_STORAGE_ERROR_BASE        = (B_GENERAL_ERROR_BASE + 0x6000);\n+    enum B_POSIX_ERROR_BASE          = (B_GENERAL_ERROR_BASE + 0x7000);\n+    enum B_MAIL_ERROR_BASE           = (B_GENERAL_ERROR_BASE + 0x8000);\n+    enum B_PRINT_ERROR_BASE          = (B_GENERAL_ERROR_BASE + 0x9000);\n+    enum B_DEVICE_ERROR_BASE         = (B_GENERAL_ERROR_BASE + 0xa000);\n+\n+    /* General Errors */\n+    enum B_NO_MEMORY                 = (B_GENERAL_ERROR_BASE + 0);\n+    enum B_IO_ERROR                  = (B_GENERAL_ERROR_BASE + 1);\n+    enum B_PERMISSION_DENIED         = (B_GENERAL_ERROR_BASE + 2);\n+    enum B_BAD_INDEX                 = (B_GENERAL_ERROR_BASE + 3);\n+    enum B_BAD_TYPE                  = (B_GENERAL_ERROR_BASE + 4);\n+    enum B_BAD_VALUE                 = (B_GENERAL_ERROR_BASE + 5);\n+    enum B_MISMATCHED_VALUES         = (B_GENERAL_ERROR_BASE + 6);\n+    enum B_NAME_NOT_FOUND            = (B_GENERAL_ERROR_BASE + 7);\n+    enum B_NAME_IN_USE               = (B_GENERAL_ERROR_BASE + 8);\n+    enum B_TIMED_OUT                 = (B_GENERAL_ERROR_BASE + 9);\n+    enum B_INTERRUPTED               = (B_GENERAL_ERROR_BASE + 10);\n+    enum B_WOULD_BLOCK               = (B_GENERAL_ERROR_BASE + 11);\n+    enum B_CANCELED                  = (B_GENERAL_ERROR_BASE + 12);\n+    enum B_NO_INIT                   = (B_GENERAL_ERROR_BASE + 13);\n+    enum B_NOT_INITIALIZED           = (B_GENERAL_ERROR_BASE + 13);\n+    enum B_BUSY                      = (B_GENERAL_ERROR_BASE + 14);\n+    enum B_NOT_ALLOWED               = (B_GENERAL_ERROR_BASE + 15);\n+    enum B_BAD_DATA                  = (B_GENERAL_ERROR_BASE + 16);\n+    enum B_DONT_DO_THAT              = (B_GENERAL_ERROR_BASE + 17);\n+\n+    enum B_ERROR                     = (-1);\n+    enum B_OK                        = (int(0));\n+    enum B_NO_ERROR                  = (int(0));\n+\n+    /* Kernel Kit Errors */\n+    enum B_BAD_SEM_ID                = (B_OS_ERROR_BASE + 0);\n+    enum B_NO_MORE_SEMS              = (B_OS_ERROR_BASE + 1);\n+\n+    enum B_BAD_THREAD_ID             = (B_OS_ERROR_BASE + 0x100);\n+    enum B_NO_MORE_THREADS           = (B_OS_ERROR_BASE + 0x101);\n+    enum B_BAD_THREAD_STATE          = (B_OS_ERROR_BASE + 0x102);\n+    enum B_BAD_TEAM_ID               = (B_OS_ERROR_BASE + 0x103);\n+    enum B_NO_MORE_TEAMS             = (B_OS_ERROR_BASE + 0x104);\n+\n+    enum B_BAD_PORT_ID               = (B_OS_ERROR_BASE + 0x200);\n+    enum B_NO_MORE_PORTS             = (B_OS_ERROR_BASE + 0x201);\n+\n+    enum B_BAD_IMAGE_ID              = (B_OS_ERROR_BASE + 0x300);\n+    enum B_BAD_ADDRESS               = (B_OS_ERROR_BASE + 0x301);\n+    enum B_NOT_AN_EXECUTABLE         = (B_OS_ERROR_BASE + 0x302);\n+    enum B_MISSING_LIBRARY           = (B_OS_ERROR_BASE + 0x303);\n+    enum B_MISSING_SYMBOL            = (B_OS_ERROR_BASE + 0x304);\n+    enum B_UNKNOWN_EXECUTABLE        = (B_OS_ERROR_BASE + 0x305);\n+    enum B_LEGACY_EXECUTABLE         = (B_OS_ERROR_BASE + 0x306);\n+\n+    enum B_DEBUGGER_ALREADY_INSTALLED    = (B_OS_ERROR_BASE + 0x400);\n+\n+    /* Application Kit Errors */\n+    enum B_BAD_REPLY                         = (B_APP_ERROR_BASE + 0);\n+    enum B_DUPLICATE_REPLY                   = (B_APP_ERROR_BASE + 1);\n+    enum B_MESSAGE_TO_SELF                   = (B_APP_ERROR_BASE + 2);\n+    enum B_BAD_HANDLER                       = (B_APP_ERROR_BASE + 3);\n+    enum B_ALREADY_RUNNING                   = (B_APP_ERROR_BASE + 4);\n+    enum B_LAUNCH_FAILED                     = (B_APP_ERROR_BASE + 5);\n+    enum B_AMBIGUOUS_APP_LAUNCH              = (B_APP_ERROR_BASE + 6);\n+    enum B_UNKNOWN_MIME_TYPE                 = (B_APP_ERROR_BASE + 7);\n+    enum B_BAD_SCRIPT_SYNTAX                 = (B_APP_ERROR_BASE + 8);\n+    enum B_LAUNCH_FAILED_NO_RESOLVE_LINK     = (B_APP_ERROR_BASE + 9);\n+    enum B_LAUNCH_FAILED_EXECUTABLE          = (B_APP_ERROR_BASE + 10);\n+    enum B_LAUNCH_FAILED_APP_NOT_FOUND       = (B_APP_ERROR_BASE + 11);\n+    enum B_LAUNCH_FAILED_APP_IN_TRASH        = (B_APP_ERROR_BASE + 12);\n+    enum B_LAUNCH_FAILED_NO_PREFERRED_APP    = (B_APP_ERROR_BASE + 13);\n+    enum B_LAUNCH_FAILED_FILES_APP_NOT_FOUND = (B_APP_ERROR_BASE + 14);\n+    enum B_BAD_MIME_SNIFFER_RULE             = (B_APP_ERROR_BASE + 15);\n+    enum B_NOT_A_MESSAGE                     = (B_APP_ERROR_BASE + 16);\n+    enum B_SHUTDOWN_CANCELLED                = (B_APP_ERROR_BASE + 17);\n+    enum B_SHUTTING_DOWN                     = (B_APP_ERROR_BASE + 18);\n+\n+    /* Storage Kit/File System Errors */\n+    enum B_FILE_ERROR                        = (B_STORAGE_ERROR_BASE + 0);\n+    enum B_FILE_NOT_FOUND                    = (B_STORAGE_ERROR_BASE + 1);\n+                /* deprecated: use B_ENTRY_NOT_FOUND instead */\n+    enum B_FILE_EXISTS                       = (B_STORAGE_ERROR_BASE + 2);\n+    enum B_ENTRY_NOT_FOUND                   = (B_STORAGE_ERROR_BASE + 3);\n+    enum B_NAME_TOO_LONG                     = (B_STORAGE_ERROR_BASE + 4);\n+    enum B_NOT_A_DIRECTORY                   = (B_STORAGE_ERROR_BASE + 5);\n+    enum B_DIRECTORY_NOT_EMPTY               = (B_STORAGE_ERROR_BASE + 6);\n+    enum B_DEVICE_FULL                       = (B_STORAGE_ERROR_BASE + 7);\n+    enum B_READ_ONLY_DEVICE                  = (B_STORAGE_ERROR_BASE + 8);\n+    enum B_IS_A_DIRECTORY                    = (B_STORAGE_ERROR_BASE + 9);\n+    enum B_NO_MORE_FDS                       = (B_STORAGE_ERROR_BASE + 10);\n+    enum B_CROSS_DEVICE_LINK                 = (B_STORAGE_ERROR_BASE + 11);\n+    enum B_LINK_LIMIT                        = (B_STORAGE_ERROR_BASE + 12);\n+    enum B_BUSTED_PIPE                       = (B_STORAGE_ERROR_BASE + 13);\n+    enum B_UNSUPPORTED                       = (B_STORAGE_ERROR_BASE + 14);\n+    enum B_PARTITION_TOO_SMALL               = (B_STORAGE_ERROR_BASE + 15);\n+    enum B_PARTIAL_READ                      = (B_STORAGE_ERROR_BASE + 16);\n+    enum B_PARTIAL_WRITE                     = (B_STORAGE_ERROR_BASE + 17);\n+\n+    /* POSIX Errors */\n+    enum B_USE_POSITIVE_POSIX_ERRORS = false;\n+\n+    static if (B_USE_POSITIVE_POSIX_ERRORS)\n+    {\n+        enum B_TO_POSIX_ERROR(int code) = -code;\n+    }\n+    else\n+    {\n+        enum B_TO_POSIX_ERROR(int code) = code;\n+    }\n+    alias B_FROM_POSIX_ERROR = B_TO_POSIX_ERROR;\n+\n+    enum B_POSIX_ENOMEM  = B_TO_POSIX_ERROR!(B_POSIX_ERROR_BASE + 0);\n+    enum E2BIG           = B_TO_POSIX_ERROR!(B_POSIX_ERROR_BASE + 1);\n+    enum ECHILD          = B_TO_POSIX_ERROR!(B_POSIX_ERROR_BASE + 2);\n+    enum EDEADLK         = B_TO_POSIX_ERROR!(B_POSIX_ERROR_BASE + 3);\n+    enum EFBIG           = B_TO_POSIX_ERROR!(B_POSIX_ERROR_BASE + 4);\n+    enum EMLINK          = B_TO_POSIX_ERROR!(B_POSIX_ERROR_BASE + 5);\n+    enum ENFILE          = B_TO_POSIX_ERROR!(B_POSIX_ERROR_BASE + 6);\n+    enum ENODEV          = B_TO_POSIX_ERROR!(B_POSIX_ERROR_BASE + 7);\n+    enum ENOLCK          = B_TO_POSIX_ERROR!(B_POSIX_ERROR_BASE + 8);\n+    enum ENOSYS          = B_TO_POSIX_ERROR!(B_POSIX_ERROR_BASE + 9);\n+    enum ENOTTY          = B_TO_POSIX_ERROR!(B_POSIX_ERROR_BASE + 10);\n+    enum ENXIO           = B_TO_POSIX_ERROR!(B_POSIX_ERROR_BASE + 11);\n+    enum ESPIPE          = B_TO_POSIX_ERROR!(B_POSIX_ERROR_BASE + 12);\n+    enum ESRCH           = B_TO_POSIX_ERROR!(B_POSIX_ERROR_BASE + 13);\n+    enum EFPOS           = B_TO_POSIX_ERROR!(B_POSIX_ERROR_BASE + 14);\n+    enum ESIGPARM        = B_TO_POSIX_ERROR!(B_POSIX_ERROR_BASE + 15);\n+    enum EDOM            = B_TO_POSIX_ERROR!(B_POSIX_ERROR_BASE + 16);\n+    enum ERANGE          = B_TO_POSIX_ERROR!(B_POSIX_ERROR_BASE + 17);\n+    enum EPROTOTYPE      = B_TO_POSIX_ERROR!(B_POSIX_ERROR_BASE + 18);\n+    enum EPROTONOSUPPORT = B_TO_POSIX_ERROR!(B_POSIX_ERROR_BASE + 19);\n+    enum EPFNOSUPPORT    = B_TO_POSIX_ERROR!(B_POSIX_ERROR_BASE + 20);\n+    enum EAFNOSUPPORT    = B_TO_POSIX_ERROR!(B_POSIX_ERROR_BASE + 21);\n+    enum EADDRINUSE      = B_TO_POSIX_ERROR!(B_POSIX_ERROR_BASE + 22);\n+    enum EADDRNOTAVAIL   = B_TO_POSIX_ERROR!(B_POSIX_ERROR_BASE + 23);\n+    enum ENETDOWN        = B_TO_POSIX_ERROR!(B_POSIX_ERROR_BASE + 24);\n+    enum ENETUNREACH     = B_TO_POSIX_ERROR!(B_POSIX_ERROR_BASE + 25);\n+    enum ENETRESET       = B_TO_POSIX_ERROR!(B_POSIX_ERROR_BASE + 26);\n+    enum ECONNABORTED    = B_TO_POSIX_ERROR!(B_POSIX_ERROR_BASE + 27);\n+    enum ECONNRESET      = B_TO_POSIX_ERROR!(B_POSIX_ERROR_BASE + 28);\n+    enum EISCONN         = B_TO_POSIX_ERROR!(B_POSIX_ERROR_BASE + 29);\n+    enum ENOTCONN        = B_TO_POSIX_ERROR!(B_POSIX_ERROR_BASE + 30);\n+    enum ESHUTDOWN       = B_TO_POSIX_ERROR!(B_POSIX_ERROR_BASE + 31);\n+    enum ECONNREFUSED    = B_TO_POSIX_ERROR!(B_POSIX_ERROR_BASE + 32);\n+    enum EHOSTUNREACH    = B_TO_POSIX_ERROR!(B_POSIX_ERROR_BASE + 33);\n+    enum ENOPROTOOPT     = B_TO_POSIX_ERROR!(B_POSIX_ERROR_BASE + 34);\n+    enum ENOBUFS         = B_TO_POSIX_ERROR!(B_POSIX_ERROR_BASE + 35);\n+    enum EINPROGRESS     = B_TO_POSIX_ERROR!(B_POSIX_ERROR_BASE + 36);\n+    enum EALREADY        = B_TO_POSIX_ERROR!(B_POSIX_ERROR_BASE + 37);\n+    enum EILSEQ          = B_TO_POSIX_ERROR!(B_POSIX_ERROR_BASE + 38);\n+    enum ENOMSG          = B_TO_POSIX_ERROR!(B_POSIX_ERROR_BASE + 39);\n+    enum ESTALE          = B_TO_POSIX_ERROR!(B_POSIX_ERROR_BASE + 40);\n+    enum EOVERFLOW       = B_TO_POSIX_ERROR!(B_POSIX_ERROR_BASE + 41);\n+    enum EMSGSIZE        = B_TO_POSIX_ERROR!(B_POSIX_ERROR_BASE + 42);\n+    enum EOPNOTSUPP      = B_TO_POSIX_ERROR!(B_POSIX_ERROR_BASE + 43);\n+    enum ENOTSOCK        = B_TO_POSIX_ERROR!(B_POSIX_ERROR_BASE + 44);\n+    enum EHOSTDOWN       = B_TO_POSIX_ERROR!(B_POSIX_ERROR_BASE + 45);\n+    enum EBADMSG         = B_TO_POSIX_ERROR!(B_POSIX_ERROR_BASE + 46);\n+    enum ECANCELED       = B_TO_POSIX_ERROR!(B_POSIX_ERROR_BASE + 47);\n+    enum EDESTADDRREQ    = B_TO_POSIX_ERROR!(B_POSIX_ERROR_BASE + 48);\n+    enum EDQUOT          = B_TO_POSIX_ERROR!(B_POSIX_ERROR_BASE + 49);\n+    enum EIDRM           = B_TO_POSIX_ERROR!(B_POSIX_ERROR_BASE + 50);\n+    enum EMULTIHOP       = B_TO_POSIX_ERROR!(B_POSIX_ERROR_BASE + 51);\n+    enum ENODATA         = B_TO_POSIX_ERROR!(B_POSIX_ERROR_BASE + 52);\n+    enum ENOLINK         = B_TO_POSIX_ERROR!(B_POSIX_ERROR_BASE + 53);\n+    enum ENOSR           = B_TO_POSIX_ERROR!(B_POSIX_ERROR_BASE + 54);\n+    enum ENOSTR          = B_TO_POSIX_ERROR!(B_POSIX_ERROR_BASE + 55);\n+    enum ENOTSUP         = B_TO_POSIX_ERROR!(B_POSIX_ERROR_BASE + 56);\n+    enum EPROTO          = B_TO_POSIX_ERROR!(B_POSIX_ERROR_BASE + 57);\n+    enum ETIME           = B_TO_POSIX_ERROR!(B_POSIX_ERROR_BASE + 58);\n+    enum ETXTBSY         = B_TO_POSIX_ERROR!(B_POSIX_ERROR_BASE + 59);\n+    enum ENOATTR         = B_TO_POSIX_ERROR!(B_POSIX_ERROR_BASE + 60);\n+\n+    /* B_NO_MEMORY (0x80000000) can't be negated, so it needs special handling */\n+    static if (B_USE_POSITIVE_POSIX_ERRORS)\n+        enum ENOMEM = B_POSIX_ENOMEM;\n+    else\n+        enum ENOMEM = B_NO_MEMORY;\n+\n+    /* POSIX errors that can be mapped to BeOS error codes */\n+    enum EACCES          = B_TO_POSIX_ERROR!(B_PERMISSION_DENIED);\n+    enum EINTR           = B_TO_POSIX_ERROR!(B_INTERRUPTED);\n+    enum EIO             = B_TO_POSIX_ERROR!(B_IO_ERROR);\n+    enum EBUSY           = B_TO_POSIX_ERROR!(B_BUSY);\n+    enum EFAULT          = B_TO_POSIX_ERROR!(B_BAD_ADDRESS);\n+    enum ETIMEDOUT       = B_TO_POSIX_ERROR!(B_TIMED_OUT);\n+    enum EAGAIN          = B_TO_POSIX_ERROR!(B_WOULD_BLOCK) /* SysV compatibility */;\n+    enum EWOULDBLOCK     = B_TO_POSIX_ERROR!(B_WOULD_BLOCK) /* BSD compatibility */;\n+    enum EBADF           = B_TO_POSIX_ERROR!(B_FILE_ERROR);\n+    enum EEXIST          = B_TO_POSIX_ERROR!(B_FILE_EXISTS);\n+    enum EINVAL          = B_TO_POSIX_ERROR!(B_BAD_VALUE);\n+    enum ENAMETOOLONG    = B_TO_POSIX_ERROR!(B_NAME_TOO_LONG);\n+    enum ENOENT          = B_TO_POSIX_ERROR!(B_ENTRY_NOT_FOUND);\n+    enum EPERM           = B_TO_POSIX_ERROR!(B_NOT_ALLOWED);\n+    enum ENOTDIR         = B_TO_POSIX_ERROR!(B_NOT_A_DIRECTORY);\n+    enum EISDIR          = B_TO_POSIX_ERROR!(B_IS_A_DIRECTORY);\n+    enum ENOTEMPTY       = B_TO_POSIX_ERROR!(B_DIRECTORY_NOT_EMPTY);\n+    enum ENOSPC          = B_TO_POSIX_ERROR!(B_DEVICE_FULL);\n+    enum EROFS           = B_TO_POSIX_ERROR!(B_READ_ONLY_DEVICE);\n+    enum EMFILE          = B_TO_POSIX_ERROR!(B_NO_MORE_FDS);\n+    enum EXDEV           = B_TO_POSIX_ERROR!(B_CROSS_DEVICE_LINK);\n+    enum ELOOP           = B_TO_POSIX_ERROR!(B_LINK_LIMIT);\n+    enum ENOEXEC         = B_TO_POSIX_ERROR!(B_NOT_AN_EXECUTABLE);\n+    enum EPIPE           = B_TO_POSIX_ERROR!(B_BUSTED_PIPE);\n+\n+    /* new error codes that can be mapped to POSIX errors */\n+    enum B_BUFFER_OVERFLOW          =  B_FROM_POSIX_ERROR!(EOVERFLOW);\n+    enum B_TOO_MANY_ARGS            =  B_FROM_POSIX_ERROR!(E2BIG);\n+    enum B_FILE_TOO_LARGE           =  B_FROM_POSIX_ERROR!(EFBIG);\n+    enum B_RESULT_NOT_REPRESENTABLE =  B_FROM_POSIX_ERROR!(ERANGE);\n+    enum B_DEVICE_NOT_FOUND         =  B_FROM_POSIX_ERROR!(ENODEV);\n+    enum B_NOT_SUPPORTED            =  B_FROM_POSIX_ERROR!(EOPNOTSUPP);\n+\n+    /* Media Kit Errors */\n+    enum B_STREAM_NOT_FOUND              = (B_MEDIA_ERROR_BASE + 0);\n+    enum B_SERVER_NOT_FOUND              = (B_MEDIA_ERROR_BASE + 1);\n+    enum B_RESOURCE_NOT_FOUND            = (B_MEDIA_ERROR_BASE + 2);\n+    enum B_RESOURCE_UNAVAILABLE          = (B_MEDIA_ERROR_BASE + 3);\n+    enum B_BAD_SUBSCRIBER                = (B_MEDIA_ERROR_BASE + 4);\n+    enum B_SUBSCRIBER_NOT_ENTERED        = (B_MEDIA_ERROR_BASE + 5);\n+    enum B_BUFFER_NOT_AVAILABLE          = (B_MEDIA_ERROR_BASE + 6);\n+    enum B_LAST_BUFFER_ERROR             = (B_MEDIA_ERROR_BASE + 7);\n+\n+    enum B_MEDIA_SYSTEM_FAILURE          = (B_MEDIA_ERROR_BASE + 100);\n+    enum B_MEDIA_BAD_NODE                = (B_MEDIA_ERROR_BASE + 101);\n+    enum B_MEDIA_NODE_BUSY               = (B_MEDIA_ERROR_BASE + 102);\n+    enum B_MEDIA_BAD_FORMAT              = (B_MEDIA_ERROR_BASE + 103);\n+    enum B_MEDIA_BAD_BUFFER              = (B_MEDIA_ERROR_BASE + 104);\n+    enum B_MEDIA_TOO_MANY_NODES          = (B_MEDIA_ERROR_BASE + 105);\n+    enum B_MEDIA_TOO_MANY_BUFFERS        = (B_MEDIA_ERROR_BASE + 106);\n+    enum B_MEDIA_NODE_ALREADY_EXISTS     = (B_MEDIA_ERROR_BASE + 107);\n+    enum B_MEDIA_BUFFER_ALREADY_EXISTS   = (B_MEDIA_ERROR_BASE + 108);\n+    enum B_MEDIA_CANNOT_SEEK             = (B_MEDIA_ERROR_BASE + 109);\n+    enum B_MEDIA_CANNOT_CHANGE_RUN_MODE  = (B_MEDIA_ERROR_BASE + 110);\n+    enum B_MEDIA_APP_ALREADY_REGISTERED  = (B_MEDIA_ERROR_BASE + 111);\n+    enum B_MEDIA_APP_NOT_REGISTERED      = (B_MEDIA_ERROR_BASE + 112);\n+    enum B_MEDIA_CANNOT_RECLAIM_BUFFERS  = (B_MEDIA_ERROR_BASE + 113);\n+    enum B_MEDIA_BUFFERS_NOT_RECLAIMED   = (B_MEDIA_ERROR_BASE + 114);\n+    enum B_MEDIA_TIME_SOURCE_STOPPED     = (B_MEDIA_ERROR_BASE + 115);\n+    enum B_MEDIA_TIME_SOURCE_BUSY        = (B_MEDIA_ERROR_BASE + 116);\n+    enum B_MEDIA_BAD_SOURCE              = (B_MEDIA_ERROR_BASE + 117);\n+    enum B_MEDIA_BAD_DESTINATION         = (B_MEDIA_ERROR_BASE + 118);\n+    enum B_MEDIA_ALREADY_CONNECTED       = (B_MEDIA_ERROR_BASE + 119);\n+    enum B_MEDIA_NOT_CONNECTED           = (B_MEDIA_ERROR_BASE + 120);\n+    enum B_MEDIA_BAD_CLIP_FORMAT         = (B_MEDIA_ERROR_BASE + 121);\n+    enum B_MEDIA_ADDON_FAILED            = (B_MEDIA_ERROR_BASE + 122);\n+    enum B_MEDIA_ADDON_DISABLED          = (B_MEDIA_ERROR_BASE + 123);\n+    enum B_MEDIA_CHANGE_IN_PROGRESS      = (B_MEDIA_ERROR_BASE + 124);\n+    enum B_MEDIA_STALE_CHANGE_COUNT      = (B_MEDIA_ERROR_BASE + 125);\n+    enum B_MEDIA_ADDON_RESTRICTED        = (B_MEDIA_ERROR_BASE + 126);\n+    enum B_MEDIA_NO_HANDLER              = (B_MEDIA_ERROR_BASE + 127);\n+    enum B_MEDIA_DUPLICATE_FORMAT        = (B_MEDIA_ERROR_BASE + 128);\n+    enum B_MEDIA_REALTIME_DISABLED       = (B_MEDIA_ERROR_BASE + 129);\n+    enum B_MEDIA_REALTIME_UNAVAILABLE    = (B_MEDIA_ERROR_BASE + 130);\n+\n+    /* Mail Kit Errors */\n+    enum B_MAIL_NO_DAEMON                = (B_MAIL_ERROR_BASE + 0);\n+    enum B_MAIL_UNKNOWN_USER             = (B_MAIL_ERROR_BASE + 1);\n+    enum B_MAIL_WRONG_PASSWORD           = (B_MAIL_ERROR_BASE + 2);\n+    enum B_MAIL_UNKNOWN_HOST             = (B_MAIL_ERROR_BASE + 3);\n+    enum B_MAIL_ACCESS_ERROR             = (B_MAIL_ERROR_BASE + 4);\n+    enum B_MAIL_UNKNOWN_FIELD            = (B_MAIL_ERROR_BASE + 5);\n+    enum B_MAIL_NO_RECIPIENT             = (B_MAIL_ERROR_BASE + 6);\n+    enum B_MAIL_INVALID_MAIL             = (B_MAIL_ERROR_BASE + 7);\n+\n+    /* Printing Errors */\n+    enum B_NO_PRINT_SERVER               = (B_PRINT_ERROR_BASE + 0);\n+\n+    /* Device Kit Errors */\n+    enum B_DEV_INVALID_IOCTL             = (B_DEVICE_ERROR_BASE + 0);\n+    enum B_DEV_NO_MEMORY                 = (B_DEVICE_ERROR_BASE + 1);\n+    enum B_DEV_BAD_DRIVE_NUM             = (B_DEVICE_ERROR_BASE + 2);\n+    enum B_DEV_NO_MEDIA                  = (B_DEVICE_ERROR_BASE + 3);\n+    enum B_DEV_UNREADABLE                = (B_DEVICE_ERROR_BASE + 4);\n+    enum B_DEV_FORMAT_ERROR              = (B_DEVICE_ERROR_BASE + 5);\n+    enum B_DEV_TIMEOUT                   = (B_DEVICE_ERROR_BASE + 6);\n+    enum B_DEV_RECALIBRATE_ERROR         = (B_DEVICE_ERROR_BASE + 7);\n+    enum B_DEV_SEEK_ERROR                = (B_DEVICE_ERROR_BASE + 8);\n+    enum B_DEV_ID_ERROR                  = (B_DEVICE_ERROR_BASE + 9);\n+    enum B_DEV_READ_ERROR                = (B_DEVICE_ERROR_BASE + 10);\n+    enum B_DEV_WRITE_ERROR               = (B_DEVICE_ERROR_BASE + 11);\n+    enum B_DEV_NOT_READY                 = (B_DEVICE_ERROR_BASE + 12);\n+    enum B_DEV_MEDIA_CHANGED             = (B_DEVICE_ERROR_BASE + 13);\n+    enum B_DEV_MEDIA_CHANGE_REQUESTED    = (B_DEVICE_ERROR_BASE + 14);\n+    enum B_DEV_RESOURCE_CONFLICT         = (B_DEVICE_ERROR_BASE + 15);\n+    enum B_DEV_CONFIGURATION_ERROR       = (B_DEVICE_ERROR_BASE + 16);\n+    enum B_DEV_DISABLED_BY_USER          = (B_DEVICE_ERROR_BASE + 17);\n+    enum B_DEV_DOOR_OPEN                 = (B_DEVICE_ERROR_BASE + 18);\n+\n+    enum B_DEV_INVALID_PIPE              = (B_DEVICE_ERROR_BASE + 19);\n+    enum B_DEV_CRC_ERROR                 = (B_DEVICE_ERROR_BASE + 20);\n+    enum B_DEV_STALLED                   = (B_DEVICE_ERROR_BASE + 21);\n+    enum B_DEV_BAD_PID                   = (B_DEVICE_ERROR_BASE + 22);\n+    enum B_DEV_UNEXPECTED_PID            = (B_DEVICE_ERROR_BASE + 23);\n+    enum B_DEV_DATA_OVERRUN              = (B_DEVICE_ERROR_BASE + 24);\n+    enum B_DEV_DATA_UNDERRUN             = (B_DEVICE_ERROR_BASE + 25);\n+    enum B_DEV_FIFO_OVERRUN              = (B_DEVICE_ERROR_BASE + 26);\n+    enum B_DEV_FIFO_UNDERRUN             = (B_DEVICE_ERROR_BASE + 27);\n+    enum B_DEV_PENDING                   = (B_DEVICE_ERROR_BASE + 28);\n+    enum B_DEV_MULTIPLE_ERRORS           = (B_DEVICE_ERROR_BASE + 29);\n+    enum B_DEV_TOO_LATE                  = (B_DEVICE_ERROR_BASE + 30);\n+\n+    /* Translation Kit Errors */\n+    enum B_TRANSLATION_BASE_ERROR        = (B_TRANSLATION_ERROR_BASE + 0);\n+    enum B_NO_TRANSLATOR                 = (B_TRANSLATION_ERROR_BASE + 1);\n+    enum B_ILLEGAL_DATA                  = (B_TRANSLATION_ERROR_BASE + 2);\n+}\n else\n {\n     static assert(false, \"Unsupported platform\");"}, {"sha": "e5d2519a00d846260afcc528311e59da579d6f96", "filename": "libphobos/libdruntime/core/stdc/fenv.d", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e5084b44016113f2c6950be8782d8c84397ef4b/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Ffenv.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e5084b44016113f2c6950be8782d8c84397ef4b/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Ffenv.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Ffenv.d?ref=6e5084b44016113f2c6950be8782d8c84397ef4b", "patch": "@@ -386,6 +386,8 @@ else version (CRuntime_Musl)\n     }\n     else version (ARM)\n     {\n+        import core.stdc.config : c_ulong;\n+\n         struct fenv_t\n         {\n             c_ulong __cw;"}, {"sha": "9ac42a130a0cab25c7990a579fca937522daf7a9", "filename": "libphobos/libdruntime/core/sys/posix/config.d", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e5084b44016113f2c6950be8782d8c84397ef4b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fconfig.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e5084b44016113f2c6950be8782d8c84397ef4b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fconfig.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fconfig.d?ref=6e5084b44016113f2c6950be8782d8c84397ef4b", "patch": "@@ -67,15 +67,21 @@ version (CRuntime_Glibc)\n }\n else version (CRuntime_Musl)\n {\n+    // off_t is always 64 bits on Musl\n     enum _FILE_OFFSET_BITS   = 64;\n \n+    // Not present in Musl sources\n     enum __REDIRECT          = false;\n \n+    // Those three are irrelevant for Musl as it always uses 64 bits off_t\n     enum __USE_FILE_OFFSET64 = _FILE_OFFSET_BITS == 64;\n     enum __USE_LARGEFILE     = __USE_FILE_OFFSET64 && !__REDIRECT;\n     enum __USE_LARGEFILE64   = __USE_FILE_OFFSET64 && !__REDIRECT;\n \n-    enum __WORDSIZE=64;\n+    version (D_LP64)\n+        enum __WORDSIZE = 64;\n+    else\n+        enum __WORDSIZE = 32;\n }\n else version (CRuntime_UClibc)\n {"}, {"sha": "9febcff849b211bd301ccbd609b4bdce19e2f809", "filename": "libphobos/libdruntime/core/sys/posix/fcntl.d", "status": "modified", "additions": 101, "deletions": 11, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e5084b44016113f2c6950be8782d8c84397ef4b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Ffcntl.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e5084b44016113f2c6950be8782d8c84397ef4b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Ffcntl.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Ffcntl.d?ref=6e5084b44016113f2c6950be8782d8c84397ef4b", "patch": "@@ -779,7 +779,102 @@ else version (CRuntime_Bionic)\n }\n else version (CRuntime_Musl)\n {\n-    enum {\n+    version (X86_64)\n+    {\n+        enum\n+        {\n+            O_DIRECTORY     = 0x010000, // octal   0200000\n+            O_NOFOLLOW      = 0x020000, // octal   0400000\n+            O_DIRECT        = 0x004000, // octal    040000\n+            O_LARGEFILE     =        0,\n+            O_TMPFILE       = 0x410000, // octal 020200000\n+\n+            F_GETLK        = 5,\n+            F_SETLK        = 6,\n+            F_SETLKW       = 7,\n+        }\n+    }\n+    // Note: Definitions for i386 are in arch/generic/bits/fcntl.h\n+    else version (X86)\n+    {\n+        enum\n+        {\n+            O_DIRECTORY     = 0x010000, // octal   0200000\n+            O_NOFOLLOW      = 0x020000, // octal   0400000\n+            O_DIRECT        = 0x004000, // octal    040000\n+            O_LARGEFILE     = 0x008000, // octal   0100000\n+            O_TMPFILE       = 0x410000, // octal 020200000\n+\n+            F_GETLK        = 12,\n+            F_SETLK        = 13,\n+            F_SETLKW       = 14,\n+        }\n+    }\n+    else version (ARM)\n+    {\n+        enum\n+        {\n+            O_DIRECTORY     = 0x004000, // octal    040000\n+            O_NOFOLLOW      = 0x008000, // octal   0100000\n+            O_DIRECT        = 0x010000, // octal   0200000\n+            O_LARGEFILE     = 0x020000, // octal   0400000\n+            O_TMPFILE       = 0x404000, // octal 020040000\n+\n+            F_GETLK        = 12,\n+            F_SETLK        = 13,\n+            F_SETLKW       = 14,\n+        }\n+    }\n+    else version (AArch64)\n+    {\n+        enum\n+        {\n+            O_DIRECTORY     = 0x004000, // octal    040000\n+            O_NOFOLLOW      = 0x008000, // octal   0100000\n+            O_DIRECT        = 0x010000, // octal   0200000\n+            O_LARGEFILE     = 0x020000, // octal   0400000\n+            O_TMPFILE       = 0x404000, // octal 020040000\n+\n+            F_GETLK        = 5,\n+            F_SETLK        = 6,\n+            F_SETLKW       = 7,\n+        }\n+    }\n+    else version (SystemZ)\n+    {\n+        enum\n+        {\n+            O_DIRECTORY     = 0x010000, // octal   0200000\n+            O_NOFOLLOW      = 0x020000, // octal   0400000\n+            O_DIRECT        = 0x004000, // octal    040000\n+            O_LARGEFILE     = 0x008000, // octal   0100000\n+            O_TMPFILE       = 0x410000, // octal 020200000\n+\n+            F_GETLK        = 5,\n+            F_SETLK        = 6,\n+            F_SETLKW       = 7,\n+        }\n+    }\n+    else version (PPC64)\n+    {\n+        enum\n+        {\n+            O_DIRECTORY     = 0x004000, // octal    040000\n+            O_NOFOLLOW      = 0x008000, // octal   0100000\n+            O_DIRECT        = 0x020000, // octal   0400000\n+            O_LARGEFILE     = 0x010000, // octal   0200000\n+            O_TMPFILE       = 0x410000, // octal 020200000\n+\n+            F_GETLK        = 5,\n+            F_SETLK        = 6,\n+            F_SETLKW       = 7,\n+        }\n+    }\n+    else\n+        static assert(0, \"Platform not supported\");\n+\n+    enum\n+    {\n         O_CREAT         = 0x40,     // octal     0100\n         O_EXCL          = 0x80,     // octal     0200\n         O_NOCTTY        = 0x100,    // octal     0400\n@@ -790,16 +885,11 @@ else version (CRuntime_Musl)\n         O_DSYNC         = 0x1000,   // octal   010000\n         O_SYNC          = 0x101000, // octal 04010000\n         O_RSYNC         = O_SYNC,\n-        O_DIRECTORY     = 0x10000,\n-        O_NOFOLLOW      = 0x20000,\n         O_CLOEXEC       = 0x80000,\n \n         O_ASYNC         = 0x2000,\n-        O_DIRECT        = 0x4000,\n-        O_LARGEFILE     =      0,\n         O_NOATIME       = 0x40000,\n         O_PATH          = 0x200000,\n-        O_TMPFILE       = 0x410000,\n         O_NDELAY        = O_NONBLOCK,\n         O_SEARCH        = O_PATH,\n         O_EXEC          = O_PATH,\n@@ -809,19 +899,19 @@ else version (CRuntime_Musl)\n         O_WRONLY        = 01,\n         O_RDWR          = 02,\n     }\n-    enum {\n+    enum\n+    {\n         F_DUPFD        = 0,\n         F_GETFD        = 1,\n         F_SETFD        = 2,\n         F_GETFL        = 3,\n         F_SETFL        = 4,\n-        F_GETLK        = 5,\n-        F_SETLK        = 6,\n-        F_SETLKW       = 7,\n+        // F_GETLK, F_SETLK, F_SETLKW are arch-specific\n         F_SETOWN       = 8,\n         F_GETOWN       = 9,\n     }\n-    enum {\n+    enum\n+    {\n         F_RDLCK        = 0,\n         F_WRLCK        = 1,\n         F_UNLCK        = 2,"}, {"sha": "cae47773989de81f263261e086c7739baf83e3ea", "filename": "libphobos/libdruntime/core/sys/posix/semaphore.d", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e5084b44016113f2c6950be8782d8c84397ef4b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsemaphore.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e5084b44016113f2c6950be8782d8c84397ef4b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsemaphore.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsemaphore.d?ref=6e5084b44016113f2c6950be8782d8c84397ef4b", "patch": "@@ -143,8 +143,10 @@ else version (CRuntime_Bionic)\n else version (CRuntime_Musl)\n {\n     struct sem_t {\n-        int[4*long.sizeof/int.sizeof] __val;\n+        int[4*c_long.sizeof/int.sizeof] __val;\n     }\n+\n+    enum SEM_FAILED = (sem_t*).init;\n }\n else version (CRuntime_UClibc)\n {"}, {"sha": "0732a48ab88fda4b53106e9e7b3f5d94f73d3ad7", "filename": "libphobos/libdruntime/core/sys/posix/sys/socket.d", "status": "modified", "additions": 46, "deletions": 16, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e5084b44016113f2c6950be8782d8c84397ef4b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fsocket.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e5084b44016113f2c6950be8782d8c84397ef4b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fsocket.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fsocket.d?ref=6e5084b44016113f2c6950be8782d8c84397ef4b", "patch": "@@ -1895,22 +1895,52 @@ else version (CRuntime_Musl)\n \n     enum\n     {\n-        SO_DEBUG        = 1,\n-        SO_REUSEADDR    = 2,\n-        SO_TYPE         = 3,\n-        SO_ERROR        = 4,\n-        SO_DONTROUTE    = 5,\n-        SO_BROADCAST    = 6,\n-        SO_SNDBUF       = 7,\n-        SO_RCVBUF       = 8,\n-        SO_KEEPALIVE    = 9,\n-        SO_OOBINLINE    = 10,\n-        SO_LINGER       = 13,\n-        SO_RCVLOWAT     = 18,\n-        SO_SNDLOWAT     = 19,\n-        SO_RCVTIMEO     = 20,\n-        SO_SNDTIMEO     = 21,\n-        SO_ACCEPTCONN   = 30\n+        SO_DEBUG        = 1\n+    }\n+\n+    version (MIPS_Any)\n+    {\n+        enum\n+        {\n+            SO_REUSEADDR    = 0x0004,\n+            SO_TYPE         = 0x1008,\n+            SO_ERROR        = 0x1007,\n+            SO_DONTROUTE    = 0x0010,\n+            SO_BROADCAST    = 0x0020,\n+            SO_SNDBUF       = 0x1001,\n+            SO_RCVBUF       = 0x1002,\n+            SO_KEEPALIVE    = 0x0008,\n+            SO_OOBINLINE    = 0x0100,\n+            SO_LINGER       = 0x0080,\n+            SO_REUSEPORT    = 0x0200,\n+            SO_RCVLOWAT     = 0x1004,\n+            SO_SNDLOWAT     = 0x1003,\n+            SO_RCVTIMEO     = 0x1006,\n+            SO_SNDTIMEO     = 0x1005,\n+            SO_ACCEPTCONN   = 0x1009\n+        }\n+    }\n+    else\n+    {\n+        enum\n+        {\n+            SO_REUSEADDR    = 2,\n+            SO_TYPE         = 3,\n+            SO_ERROR        = 4,\n+            SO_DONTROUTE    = 5,\n+            SO_BROADCAST    = 6,\n+            SO_SNDBUF       = 7,\n+            SO_RCVBUF       = 8,\n+            SO_KEEPALIVE    = 9,\n+            SO_OOBINLINE    = 10,\n+            SO_LINGER       = 13,\n+            SO_REUSEPORT    = 15,\n+            SO_RCVLOWAT     = 18,\n+            SO_SNDLOWAT     = 19,\n+            SO_RCVTIMEO     = 20,\n+            SO_SNDTIMEO     = 21,\n+            SO_ACCEPTCONN   = 30\n+        }\n     }\n \n     enum : uint"}, {"sha": "52b51bd3c71e666d9f11bbd6b61f7f195527478f", "filename": "libphobos/libdruntime/core/sys/posix/sys/stat.d", "status": "modified", "additions": 215, "deletions": 21, "changes": 236, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e5084b44016113f2c6950be8782d8c84397ef4b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fstat.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e5084b44016113f2c6950be8782d8c84397ef4b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fstat.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fstat.d?ref=6e5084b44016113f2c6950be8782d8c84397ef4b", "patch": "@@ -1664,31 +1664,225 @@ else version (CRuntime_Musl)\n         S_ISGID    = 0x400, // octal 02000\n         S_ISVTX    = 0x200, // octal 01000\n     }\n-    struct stat_t {\n-        dev_t st_dev;\n-        ino_t st_ino;\n-        nlink_t st_nlink;\n-\n-        mode_t st_mode;\n-        uid_t st_uid;\n-        gid_t st_gid;\n-        uint    __pad0;\n-        dev_t st_rdev;\n-        off_t st_size;\n-        blksize_t st_blksize;\n-        blkcnt_t st_blocks;\n+    version (ARM)\n+    {\n+        struct stat_t\n+        {\n+            dev_t st_dev;\n+            int __st_dev_padding;\n+            c_long __st_ino_truncated;\n+            mode_t st_mode;\n+            nlink_t st_nlink;\n+\n+            uid_t st_uid;\n+            gid_t st_gid;\n+            dev_t st_rdev;\n+            int __st_rdev_padding;\n+            off_t st_size;\n+            blksize_t st_blksize;\n+            blkcnt_t st_blocks;\n+\n+            timespec st_atim;\n+            timespec st_mtim;\n+            timespec st_ctim;\n+            ino_t st_ino;\n+\n+            extern(D) @safe @property inout pure nothrow\n+            {\n+                ref inout(time_t) st_atime() return { return st_atim.tv_sec; }\n+                ref inout(time_t) st_mtime() return { return st_mtim.tv_sec; }\n+                ref inout(time_t) st_ctime() return { return st_ctim.tv_sec; }\n+            }\n+        }\n+    }\n+    else version (AArch64)\n+    {\n+        struct stat_t\n+        {\n+            dev_t st_dev;\n+            ino_t st_ino;\n+            mode_t st_mode;\n+            nlink_t st_nlink;\n+\n+            uid_t st_uid;\n+            gid_t st_gid;\n+            dev_t st_rdev;\n+            c_ulong __pad;\n+            off_t st_size;\n+            blksize_t st_blksize;\n+            int __pad2;\n+            blkcnt_t st_blocks;\n+\n+            timespec st_atim;\n+            timespec st_mtim;\n+            timespec st_ctim;\n+            uint[2] __unused;\n+\n+            extern(D) @safe @property inout pure nothrow\n+            {\n+                ref inout(time_t) st_atime() return { return st_atim.tv_sec; }\n+                ref inout(time_t) st_mtime() return { return st_mtim.tv_sec; }\n+                ref inout(time_t) st_ctime() return { return st_ctim.tv_sec; }\n+            }\n+        }\n+    }\n+    else version (X86_64)\n+    {\n+        struct stat_t\n+        {\n+            dev_t st_dev;\n+            ino_t st_ino;\n+            nlink_t st_nlink;\n+\n+            mode_t st_mode;\n+            uid_t st_uid;\n+            gid_t st_gid;\n+            uint   __pad0;\n+            dev_t st_rdev;\n+            off_t st_size;\n+            blksize_t st_blksize;\n+            blkcnt_t st_blocks;\n+\n+            timespec st_atim;\n+            timespec st_mtim;\n+            timespec st_ctim;\n+\n+            c_long[3] __unused;\n+\n+            extern(D) @safe @property inout pure nothrow\n+            {\n+                ref inout(time_t) st_atime() return { return st_atim.tv_sec; }\n+                ref inout(time_t) st_mtime() return { return st_mtim.tv_sec; }\n+                ref inout(time_t) st_ctime() return { return st_ctim.tv_sec; }\n+            }\n+        }\n+    }\n+    else version (X86)\n+    {\n+        struct stat_t\n+        {\n+            dev_t st_dev;\n+            int __st_dev_padding;\n+            c_long __st_ino_truncated;\n+            mode_t st_mode;\n+            nlink_t st_nlink;\n+\n+            uid_t st_uid;\n+            gid_t st_gid;\n+            dev_t st_rdev;\n+            int __st_rdev_padding;\n+            off_t st_size;\n+            blksize_t st_blksize;\n+            blkcnt_t st_blocks;\n+\n+            timespec st_atim;\n+            timespec st_mtim;\n+            timespec st_ctim;\n+            ino_t st_ino;\n+\n+            extern(D) @safe @property inout pure nothrow\n+            {\n+                ref inout(time_t) st_atime() return { return st_atim.tv_sec; }\n+                ref inout(time_t) st_mtime() return { return st_mtim.tv_sec; }\n+                ref inout(time_t) st_ctime() return { return st_ctim.tv_sec; }\n+            }\n+        }\n+    }\n+    else version (MIPS64)\n+    {\n+        struct stat_t\n+        {\n+            dev_t st_dev;\n+            int[3] __pad1;\n+            ino_t st_ino;\n+            mode_t st_mode;\n+            nlink_t st_nlink;\n+\n+            uid_t st_uid;\n+            gid_t st_gid;\n+            dev_t st_rdev;\n+            uint[2] __pad2;\n+            off_t st_size;\n+            int __pad3;\n+\n+            timespec st_atim;\n+            timespec st_mtim;\n+            timespec st_ctim;\n+            blksize_t st_blksize;\n+            uint __pad4;\n+            blkcnt_t st_blocks;\n+            int[14] __pad5;\n+\n+            extern(D) @safe @property inout pure nothrow\n+            {\n+                ref inout(time_t) st_atime() return { return st_atim.tv_sec; }\n+                ref inout(time_t) st_mtime() return { return st_mtim.tv_sec; }\n+                ref inout(time_t) st_ctime() return { return st_ctim.tv_sec; }\n+            }\n+        }\n+    }\n+    else version (PPC64)\n+    {\n+        struct stat_t\n+        {\n+            dev_t st_dev;\n+            ino_t st_ino;\n+            nlink_t st_nlink;\n+            mode_t st_mode;\n \n-        timespec st_atim;\n-        timespec st_mtim;\n-        timespec st_ctim;\n-        extern(D) @safe @property inout pure nothrow\n+            uid_t st_uid;\n+            gid_t st_gid;\n+            dev_t st_rdev;\n+            off_t st_size;\n+            blksize_t st_blksize;\n+            blkcnt_t st_blocks;\n+\n+            timespec st_atim;\n+            timespec st_mtim;\n+            timespec st_ctim;\n+            c_ulong[3] __unused;\n+\n+            extern(D) @safe @property inout pure nothrow\n+            {\n+                ref inout(time_t) st_atime() return { return st_atim.tv_sec; }\n+                ref inout(time_t) st_mtime() return { return st_mtim.tv_sec; }\n+                ref inout(time_t) st_ctime() return { return st_ctim.tv_sec; }\n+            }\n+        }\n+    }\n+    else version (SystemZ)\n+    {\n+        struct stat_t\n         {\n-            ref inout(time_t) st_atime() return { return st_atim.tv_sec; }\n-            ref inout(time_t) st_mtime() return { return st_mtim.tv_sec; }\n-            ref inout(time_t) st_ctime() return { return st_ctim.tv_sec; }\n+            dev_t st_dev;\n+            ino_t st_ino;\n+            nlink_t st_nlink;\n+            mode_t st_mode;\n+\n+            uid_t st_uid;\n+            gid_t st_gid;\n+            dev_t st_rdev;\n+            off_t st_size;\n+\n+            timespec st_atim;\n+            timespec st_mtim;\n+            timespec st_ctim;\n+\n+            blksize_t st_blksize;\n+            blkcnt_t st_blocks;\n+            c_ulong[3] __unused;\n+\n+            extern(D) @safe @property inout pure nothrow\n+            {\n+                ref inout(time_t) st_atime() return { return st_atim.tv_sec; }\n+                ref inout(time_t) st_mtime() return { return st_mtim.tv_sec; }\n+                ref inout(time_t) st_ctime() return { return st_ctim.tv_sec; }\n+            }\n         }\n-        long[3] __unused;\n     }\n+    else\n+        static assert(\"Unsupported platform\");\n+\n     private\n     {\n         extern (D) bool S_ISTYPE( mode_t mode, uint mask )"}, {"sha": "169287c3becfb8a37da589af29ee4e0f3d2b1986", "filename": "libphobos/libdruntime/core/sys/posix/sys/types.d", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e5084b44016113f2c6950be8782d8c84397ef4b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Ftypes.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e5084b44016113f2c6950be8782d8c84397ef4b/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Ftypes.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Ftypes.d?ref=6e5084b44016113f2c6950be8782d8c84397ef4b", "patch": "@@ -112,8 +112,26 @@ version (CRuntime_Glibc)\n }\n else version (CRuntime_Musl)\n {\n-    alias c_long     blksize_t;\n-    alias c_ulong    nlink_t;\n+    version (AArch64)\n+    {\n+        alias int    blksize_t;\n+        alias uint   nlink_t;\n+    }\n+    else version (MIPS64)\n+    {\n+        alias c_long blksize_t;\n+        alias uint   nlink_t;\n+    }\n+    else version (RISCV64)\n+    {\n+        alias int    blksize_t;\n+        alias uint   nlink_t;\n+    }\n+    else\n+    {\n+        alias c_long blksize_t;\n+        alias c_ulong nlink_t;\n+    }\n     alias long       dev_t;\n     alias long       blkcnt_t;\n     alias ulong      ino_t;"}]}