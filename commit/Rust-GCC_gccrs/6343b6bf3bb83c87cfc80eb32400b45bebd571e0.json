{"sha": "6343b6bf3bb83c87cfc80eb32400b45bebd571e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjM0M2I2YmYzYmI4M2M4N2NmYzgwZWIzMjQwMGI0NWJlYmQ1NzFlMA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2019-07-25T09:36:38Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2019-07-25T09:36:38Z"}, "message": "Extend DCE to remove unnecessary new/delete-pairs (PR c++/23383).\n\n2019-07-25  Martin Liska  <mliska@suse.cz>\n\t    Dominik Infuhr  <dominik.infuehr@theobroma-systems.com>\n\n\tPR c++/23383\n\t* common.opt: Add -fallocation-dce\n\t* gimple.c (gimple_call_operator_delete_p): New.\n\t* gimple.h (gimple_call_operator_delete_p): Likewise.\n\t* tree-core.h (enum function_decl_type): Add OPERATOR_DELETE.\n\t* tree-ssa-dce.c (mark_stmt_if_obviously_necessary): Handle\n\tDECL_IS_OPERATOR_DELETE_P.\n\t(mark_all_reaching_defs_necessary_1): Likewise.\n\t(propagate_necessity): Likewise.\n\t(eliminate_unnecessary_stmts): Handle\n\tgimple_call_operator_delete_p.\n\t* tree-streamer-in.c (unpack_ts_function_decl_value_fields):\n\tAdd packing of OPERATOR_DELETE.\n\t* tree-streamer-out.c (pack_ts_function_decl_value_fields):\n\tSimilarly here.\n\t* tree.h (DECL_IS_OPERATOR_DELETE_P): New.\n\t(DECL_SET_IS_OPERATOR_DELETE): New.\n\t(DECL_IS_REPLACEABLE_OPERATOR_NEW_P): Likewise.\n2019-07-25  Martin Liska  <mliska@suse.cz>\n\t    Dominik Infuhr  <dominik.infuehr@theobroma-systems.com>\n\n\tPR c++/23383\n\t* c-decl.c (merge_decls): Merge OPERATOR_DELETE flag.\n2019-07-25  Martin Liska  <mliska@suse.cz>\n\t    Dominik Infuhr  <dominik.infuehr@theobroma-systems.com>\n\n\tPR c++/23383\n\t* decl.c (cxx_init_decl_processing): Mark delete operators\n\twith DECL_SET_IS_OPERATOR_DELETE.\n2019-07-25  Martin Liska  <mliska@suse.cz\n\t    Dominik Infuhr  <dominik.infuehr@theobroma-systems.com>\n\n\tPR c++/23383\n\t* g++.dg/cpp1y/new1.C: New test.\n2019-07-25  Martin Liska  <mliska@suse.cz>\n\t    Dominik Infuhr  <dominik.infuehr@theobroma-systems.com>\n\n\tPR c++/23383\n\t* testsuite/ext/bitmap_allocator/check_delete.cc: Add\n\t-fno-allocation-dce.\n\t* testsuite/ext/bitmap_allocator/check_new.cc: Likewise.\n\t* testsuite/ext/new_allocator/check_delete.cc: Likewise.\n\t* testsuite/ext/new_allocator/check_new.cc: Likewise.\n\nCo-Authored-By: Dominik Infuehr <dominik.infuehr@theobroma-systems.com>\n\nFrom-SVN: r273791", "tree": {"sha": "6c52e67da842981920f45c39ce059391d48a4e97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c52e67da842981920f45c39ce059391d48a4e97"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6343b6bf3bb83c87cfc80eb32400b45bebd571e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6343b6bf3bb83c87cfc80eb32400b45bebd571e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6343b6bf3bb83c87cfc80eb32400b45bebd571e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6343b6bf3bb83c87cfc80eb32400b45bebd571e0/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cb50701ec2c7abdc48db278802022f7e94675d07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb50701ec2c7abdc48db278802022f7e94675d07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb50701ec2c7abdc48db278802022f7e94675d07"}], "stats": {"total": 215, "additions": 201, "deletions": 14}, "files": [{"sha": "2fae3238878ddce7596cc5399913c3261aee99aa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6343b6bf3bb83c87cfc80eb32400b45bebd571e0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6343b6bf3bb83c87cfc80eb32400b45bebd571e0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6343b6bf3bb83c87cfc80eb32400b45bebd571e0", "patch": "@@ -1,3 +1,25 @@\n+2019-07-25  Martin Liska  <mliska@suse.cz>\n+\t    Dominik Infuhr  <dominik.infuehr@theobroma-systems.com>\n+\n+\tPR c++/23383\n+\t* common.opt: Add -fallocation-dce\n+\t* gimple.c (gimple_call_operator_delete_p): New.\n+\t* gimple.h (gimple_call_operator_delete_p): Likewise.\n+\t* tree-core.h (enum function_decl_type): Add OPERATOR_DELETE.\n+\t* tree-ssa-dce.c (mark_stmt_if_obviously_necessary): Handle\n+\tDECL_IS_OPERATOR_DELETE_P.\n+\t(mark_all_reaching_defs_necessary_1): Likewise.\n+\t(propagate_necessity): Likewise.\n+\t(eliminate_unnecessary_stmts): Handle\n+\tgimple_call_operator_delete_p.\n+\t* tree-streamer-in.c (unpack_ts_function_decl_value_fields):\n+\tAdd packing of OPERATOR_DELETE.\n+\t* tree-streamer-out.c (pack_ts_function_decl_value_fields):\n+\tSimilarly here.\n+\t* tree.h (DECL_IS_OPERATOR_DELETE_P): New.\n+\t(DECL_SET_IS_OPERATOR_DELETE): New.\n+\t(DECL_IS_REPLACEABLE_OPERATOR_NEW_P): Likewise.\n+\n 2019-07-25  Martin Liska  <mliska@suse.cz>\n \n \t* calls.c (maybe_warn_alloc_args_overflow): Use new macros"}, {"sha": "d07051b15a360c8bd96fcefa17b36b9a6bb2166a", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6343b6bf3bb83c87cfc80eb32400b45bebd571e0/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6343b6bf3bb83c87cfc80eb32400b45bebd571e0/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=6343b6bf3bb83c87cfc80eb32400b45bebd571e0", "patch": "@@ -1,3 +1,9 @@\n+2019-07-25  Martin Liska  <mliska@suse.cz>\n+\t    Dominik Infuhr  <dominik.infuehr@theobroma-systems.com>\n+\n+\tPR c++/23383\n+\t* c-decl.c (merge_decls): Merge OPERATOR_DELETE flag.\n+\n 2019-07-25  Martin Liska  <mliska@suse.cz>\n \n \t* c-decl.c (merge_decls): Use new macros"}, {"sha": "f85f481eb51c4d63985eef9f14f919e833984c9f", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6343b6bf3bb83c87cfc80eb32400b45bebd571e0/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6343b6bf3bb83c87cfc80eb32400b45bebd571e0/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=6343b6bf3bb83c87cfc80eb32400b45bebd571e0", "patch": "@@ -2641,6 +2641,8 @@ merge_decls (tree newdecl, tree olddecl, tree newtype, tree oldtype)\n \t  DECL_IS_MALLOC (newdecl) |= DECL_IS_MALLOC (olddecl);\n \t  if (DECL_IS_OPERATOR_NEW_P (olddecl))\n \t    DECL_SET_IS_OPERATOR_NEW (newdecl, true);\n+\t  if (DECL_IS_OPERATOR_DELETE_P (olddecl))\n+\t    DECL_SET_IS_OPERATOR_DELETE (newdecl, true);\n \t  TREE_READONLY (newdecl) |= TREE_READONLY (olddecl);\n \t  DECL_PURE_P (newdecl) |= DECL_PURE_P (olddecl);\n \t  DECL_IS_NOVOPS (newdecl) |= DECL_IS_NOVOPS (olddecl);"}, {"sha": "11637c8cab0f02b35d91799b5414323f304765e2", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6343b6bf3bb83c87cfc80eb32400b45bebd571e0/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6343b6bf3bb83c87cfc80eb32400b45bebd571e0/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=6343b6bf3bb83c87cfc80eb32400b45bebd571e0", "patch": "@@ -2211,6 +2211,10 @@ Enum(live_patching_level) String(inline-only-static) Value(LIVE_PATCHING_INLINE_\n EnumValue\n Enum(live_patching_level) String(inline-clone) Value(LIVE_PATCHING_INLINE_CLONE)\n \n+fallocation-dce\n+Common Report Var(flag_allocation_dce) Init(1) Optimization\n+Tell DCE to remove unused C++ allocations.\n+\n flive-range-shrinkage\n Common Report Var(flag_live_range_shrinkage) Init(0) Optimization\n Relief of register pressure through live range shrinkage."}, {"sha": "eeed3dcef55d968db519730d3353ec92218145e9", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6343b6bf3bb83c87cfc80eb32400b45bebd571e0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6343b6bf3bb83c87cfc80eb32400b45bebd571e0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6343b6bf3bb83c87cfc80eb32400b45bebd571e0", "patch": "@@ -1,3 +1,10 @@\n+2019-07-25  Martin Liska  <mliska@suse.cz>\n+\t    Dominik Infuhr  <dominik.infuehr@theobroma-systems.com>\n+\n+\tPR c++/23383\n+\t* decl.c (cxx_init_decl_processing): Mark delete operators\n+\twith DECL_SET_IS_OPERATOR_DELETE.\n+\n 2019-07-25  Martin Liska  <mliska@suse.cz>\n \n \t* decl.c (duplicate_decls): Use new macros"}, {"sha": "9fa090c876750e6c5e1edc39f4e779c48b5dc973", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6343b6bf3bb83c87cfc80eb32400b45bebd571e0/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6343b6bf3bb83c87cfc80eb32400b45bebd571e0/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=6343b6bf3bb83c87cfc80eb32400b45bebd571e0", "patch": "@@ -4363,8 +4363,10 @@ cxx_init_decl_processing (void)\n     opnew = push_cp_library_fn (VEC_NEW_EXPR, newtype, 0);\n     DECL_IS_MALLOC (opnew) = 1;\n     DECL_SET_IS_OPERATOR_NEW (opnew, true);\n-    push_cp_library_fn (DELETE_EXPR, deltype, ECF_NOTHROW);\n-    push_cp_library_fn (VEC_DELETE_EXPR, deltype, ECF_NOTHROW);\n+    tree opdel = push_cp_library_fn (DELETE_EXPR, deltype, ECF_NOTHROW);\n+    DECL_SET_IS_OPERATOR_DELETE (opdel, true);\n+    opdel = push_cp_library_fn (VEC_DELETE_EXPR, deltype, ECF_NOTHROW);\n+    DECL_SET_IS_OPERATOR_DELETE (opdel, true);\n     if (flag_sized_deallocation)\n       {\n \t/* Also push the sized deallocation variants:\n@@ -4376,8 +4378,10 @@ cxx_init_decl_processing (void)\n \tdeltype = cp_build_type_attribute_variant (void_ftype_ptr_size,\n \t\t\t\t\t\t   extvisattr);\n \tdeltype = build_exception_variant (deltype, empty_except_spec);\n-\tpush_cp_library_fn (DELETE_EXPR, deltype, ECF_NOTHROW);\n-\tpush_cp_library_fn (VEC_DELETE_EXPR, deltype, ECF_NOTHROW);\n+\topdel = push_cp_library_fn (DELETE_EXPR, deltype, ECF_NOTHROW);\n+\tDECL_SET_IS_OPERATOR_DELETE (opdel, true);\n+\topdel = push_cp_library_fn (VEC_DELETE_EXPR, deltype, ECF_NOTHROW);\n+\tDECL_SET_IS_OPERATOR_DELETE (opdel, true);\n       }\n \n     if (aligned_new_threshold)\n@@ -4405,8 +4409,10 @@ cxx_init_decl_processing (void)\n \t\t\t\t\t    align_type_node, NULL_TREE);\n \tdeltype = cp_build_type_attribute_variant (deltype, extvisattr);\n \tdeltype = build_exception_variant (deltype, empty_except_spec);\n-\tpush_cp_library_fn (DELETE_EXPR, deltype, ECF_NOTHROW);\n-\tpush_cp_library_fn (VEC_DELETE_EXPR, deltype, ECF_NOTHROW);\n+\topdel = push_cp_library_fn (DELETE_EXPR, deltype, ECF_NOTHROW);\n+\tDECL_SET_IS_OPERATOR_DELETE (opdel, true);\n+\topdel = push_cp_library_fn (VEC_DELETE_EXPR, deltype, ECF_NOTHROW);\n+\tDECL_SET_IS_OPERATOR_DELETE (opdel, true);\n \n \tif (flag_sized_deallocation)\n \t  {\n@@ -4416,8 +4422,10 @@ cxx_init_decl_processing (void)\n \t\t\t\t\t\tNULL_TREE);\n \t    deltype = cp_build_type_attribute_variant (deltype, extvisattr);\n \t    deltype = build_exception_variant (deltype, empty_except_spec);\n-\t    push_cp_library_fn (DELETE_EXPR, deltype, ECF_NOTHROW);\n-\t    push_cp_library_fn (VEC_DELETE_EXPR, deltype, ECF_NOTHROW);\n+\t    opdel = push_cp_library_fn (DELETE_EXPR, deltype, ECF_NOTHROW);\n+\t    DECL_SET_IS_OPERATOR_DELETE (opdel, true);\n+\t    opdel = push_cp_library_fn (VEC_DELETE_EXPR, deltype, ECF_NOTHROW);\n+\t    DECL_SET_IS_OPERATOR_DELETE (opdel, true);\n \t  }\n       }\n "}, {"sha": "a0eac8703bd69134502dff0edb384d609a1efdb0", "filename": "gcc/gimple.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6343b6bf3bb83c87cfc80eb32400b45bebd571e0/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6343b6bf3bb83c87cfc80eb32400b45bebd571e0/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=6343b6bf3bb83c87cfc80eb32400b45bebd571e0", "patch": "@@ -2695,6 +2695,18 @@ gimple_builtin_call_types_compatible_p (const gimple *stmt, tree fndecl)\n   return true;\n }\n \n+/* Return true when STMT is operator delete call.  */\n+\n+bool\n+gimple_call_operator_delete_p (const gcall *stmt)\n+{\n+  tree fndecl;\n+\n+  if ((fndecl = gimple_call_fndecl (stmt)) != NULL_TREE)\n+    return DECL_IS_OPERATOR_DELETE_P (fndecl);\n+  return false;\n+}\n+\n /* Return true when STMT is builtins call.  */\n \n bool"}, {"sha": "c82fdf7131690b3af9693ff54e23462e3cd427b6", "filename": "gcc/gimple.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6343b6bf3bb83c87cfc80eb32400b45bebd571e0/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6343b6bf3bb83c87cfc80eb32400b45bebd571e0/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=6343b6bf3bb83c87cfc80eb32400b45bebd571e0", "patch": "@@ -1547,6 +1547,7 @@ extern alias_set_type gimple_get_alias_set (tree);\n extern bool gimple_ior_addresses_taken (bitmap, gimple *);\n extern bool gimple_builtin_call_types_compatible_p (const gimple *, tree);\n extern combined_fn gimple_call_combined_fn (const gimple *);\n+extern bool gimple_call_operator_delete_p (const gcall *);\n extern bool gimple_call_builtin_p (const gimple *);\n extern bool gimple_call_builtin_p (const gimple *, enum built_in_class);\n extern bool gimple_call_builtin_p (const gimple *, enum built_in_function);"}, {"sha": "4dad677d41d96e685de955e56a062356a8b215bb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6343b6bf3bb83c87cfc80eb32400b45bebd571e0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6343b6bf3bb83c87cfc80eb32400b45bebd571e0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6343b6bf3bb83c87cfc80eb32400b45bebd571e0", "patch": "@@ -1,3 +1,9 @@\n+2019-07-25  Martin Liska  <mliska@suse.cz\n+\t    Dominik Infuhr  <dominik.infuehr@theobroma-systems.com>\n+\n+\tPR c++/23383\n+\t* g++.dg/cpp1y/new1.C: New test.\n+\n 2019-07-25  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR testsuite/91245"}, {"sha": "a95dd4d1ee3173abc4de4cfbdc512d59d39fe0a2", "filename": "gcc/testsuite/g++.dg/cpp1y/new1.C", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6343b6bf3bb83c87cfc80eb32400b45bebd571e0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fnew1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6343b6bf3bb83c87cfc80eb32400b45bebd571e0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fnew1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fnew1.C?ref=6343b6bf3bb83c87cfc80eb32400b45bebd571e0", "patch": "@@ -0,0 +1,65 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-cddce-details\" } */\n+\n+#include <stdlib.h>\n+\n+void\n+new_without_use() {\n+  int *x = new int;\n+}\n+\n+void\n+new_array_without_use() {\n+  int *x = new int[5];\n+}\n+\n+void\n+new_primitive() {\n+  int *x = new int;\n+  delete x;\n+}\n+\n+void\n+new_array() {\n+  int *x = new int[10];\n+  delete [] x;\n+}\n+\n+void\n+new_primitive_store() {\n+  int *x = new int;\n+  *x = 10;\n+  delete x;\n+}\n+\n+void\n+new_primitive_load() {\n+  int *x = new int;\n+  int tmp = *x;\n+  delete x;\n+}\n+\n+int\n+new_primitive_load_with_use() {\n+  int *x = new int;\n+  int tmp = *x;\n+  delete x;\n+  return tmp;\n+}\n+\n+void\n+new_array_store() {\n+  int *x = new int[10];\n+  x[4] = 10;\n+  delete [] x;\n+}\n+\n+void\n+new_array_load() {\n+  int *x = new int[10];\n+  int tmp = x[4];\n+  delete [] x;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"Deleting : operator delete\" 5 \"cddce1\"} } */\n+/* { dg-final { scan-tree-dump-times \"Deleting : _\\\\d+ = operator new\" 7 \"cddce1\"} } */"}, {"sha": "60d8c68417135f4446936a23fb63d154634a8865", "filename": "gcc/tree-core.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6343b6bf3bb83c87cfc80eb32400b45bebd571e0/gcc%2Ftree-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6343b6bf3bb83c87cfc80eb32400b45bebd571e0/gcc%2Ftree-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-core.h?ref=6343b6bf3bb83c87cfc80eb32400b45bebd571e0", "patch": "@@ -1826,6 +1826,7 @@ enum function_decl_type\n {\n   NONE,\n   OPERATOR_NEW,\n+  OPERATOR_DELETE,\n   LAMBDA_FUNCTION\n \n   /* 0 values left */"}, {"sha": "90b3f4d7c45240fe1e8468923817142a4fef5add", "filename": "gcc/tree-ssa-dce.c", "status": "modified", "additions": 28, "deletions": 6, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6343b6bf3bb83c87cfc80eb32400b45bebd571e0/gcc%2Ftree-ssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6343b6bf3bb83c87cfc80eb32400b45bebd571e0/gcc%2Ftree-ssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.c?ref=6343b6bf3bb83c87cfc80eb32400b45bebd571e0", "patch": "@@ -237,6 +237,12 @@ mark_stmt_if_obviously_necessary (gimple *stmt, bool aggressive)\n \n \t    default:;\n \t    }\n+\n+\tif (callee != NULL_TREE\n+\t    && flag_allocation_dce\n+\t    && DECL_IS_REPLACEABLE_OPERATOR_NEW_P (callee))\n+\t  return;\n+\n \t/* Most, but not all function calls are required.  Function calls that\n \t   produce no result and have no side effects (i.e. const pure\n \t   functions) are unnecessary.  */\n@@ -588,6 +594,11 @@ mark_all_reaching_defs_necessary_1 (ao_ref *ref ATTRIBUTE_UNUSED,\n \n \t  default:;\n \t  }\n+\n+      if (callee != NULL_TREE\n+\t  && (DECL_IS_REPLACEABLE_OPERATOR_NEW_P (callee)\n+\t      || DECL_IS_OPERATOR_DELETE_P (callee)))\n+\treturn false;\n     }\n \n   if (! gimple_clobber_p (def_stmt))\n@@ -774,7 +785,10 @@ propagate_necessity (bool aggressive)\n \t  /* If this is a call to free which is directly fed by an\n \t     allocation function do not mark that necessary through\n \t     processing the argument.  */\n-\t  if (gimple_call_builtin_p (stmt, BUILT_IN_FREE))\n+\t  if (gimple_call_builtin_p (stmt, BUILT_IN_FREE)\n+\t      || (is_gimple_call (stmt)\n+\t\t  && gimple_call_operator_delete_p (as_a <gcall *> (stmt))))\n+\n \t    {\n \t      tree ptr = gimple_call_arg (stmt, 0);\n \t      gimple *def_stmt;\n@@ -784,10 +798,11 @@ propagate_necessity (bool aggressive)\n \t      if (TREE_CODE (ptr) == SSA_NAME\n \t\t  && is_gimple_call (def_stmt = SSA_NAME_DEF_STMT (ptr))\n \t\t  && (def_callee = gimple_call_fndecl (def_stmt))\n-\t\t  && DECL_BUILT_IN_CLASS (def_callee) == BUILT_IN_NORMAL\n-\t\t  && (DECL_FUNCTION_CODE (def_callee) == BUILT_IN_ALIGNED_ALLOC\n-\t\t      || DECL_FUNCTION_CODE (def_callee) == BUILT_IN_MALLOC\n-\t\t      || DECL_FUNCTION_CODE (def_callee) == BUILT_IN_CALLOC))\n+\t\t  && ((DECL_BUILT_IN_CLASS (def_callee) == BUILT_IN_NORMAL\n+\t\t       && (DECL_FUNCTION_CODE (def_callee) == BUILT_IN_ALIGNED_ALLOC\n+\t\t\t   || DECL_FUNCTION_CODE (def_callee) == BUILT_IN_MALLOC\n+\t\t\t   || DECL_FUNCTION_CODE (def_callee) == BUILT_IN_CALLOC))\n+\t\t      || DECL_IS_REPLACEABLE_OPERATOR_NEW_P (def_callee)))\n \t\tcontinue;\n \t    }\n \n@@ -842,6 +857,11 @@ propagate_necessity (bool aggressive)\n \t\t      || DECL_FUNCTION_CODE (callee) == BUILT_IN_ASSUME_ALIGNED))\n \t\tcontinue;\n \n+\t      if (callee != NULL_TREE\n+\t\t  && (DECL_IS_REPLACEABLE_OPERATOR_NEW_P (callee)\n+\t\t      || DECL_IS_OPERATOR_DELETE_P (callee)))\n+\t\tcontinue;\n+\n \t      /* Calls implicitly load from memory, their arguments\n \t         in addition may explicitly perform memory loads.  */\n \t      mark_all_reaching_defs_necessary (stmt);\n@@ -1262,7 +1282,9 @@ eliminate_unnecessary_stmts (void)\n \t     defining statement of its argument is not necessary\n \t     (and thus is getting removed).  */\n \t  if (gimple_plf (stmt, STMT_NECESSARY)\n-\t      && gimple_call_builtin_p (stmt, BUILT_IN_FREE))\n+\t      && (gimple_call_builtin_p (stmt, BUILT_IN_FREE)\n+\t\t  || (is_gimple_call (stmt)\n+\t\t      && gimple_call_operator_delete_p (as_a <gcall *> (stmt)))))\n \t    {\n \t      tree ptr = gimple_call_arg (stmt, 0);\n \t      if (TREE_CODE (ptr) == SSA_NAME)"}, {"sha": "7ab72a7e0d7689b5bfd3fede487e301b16a536ac", "filename": "gcc/tree-streamer-in.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6343b6bf3bb83c87cfc80eb32400b45bebd571e0/gcc%2Ftree-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6343b6bf3bb83c87cfc80eb32400b45bebd571e0/gcc%2Ftree-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-in.c?ref=6343b6bf3bb83c87cfc80eb32400b45bebd571e0", "patch": "@@ -334,6 +334,7 @@ unpack_ts_function_decl_value_fields (struct bitpack_d *bp, tree expr)\n   DECL_IS_RETURNS_TWICE (expr) = (unsigned) bp_unpack_value (bp, 1);\n   DECL_IS_MALLOC (expr) = (unsigned) bp_unpack_value (bp, 1);\n   DECL_SET_IS_OPERATOR_NEW (expr, (unsigned) bp_unpack_value (bp, 1));\n+  DECL_SET_IS_OPERATOR_DELETE (expr, (unsigned) bp_unpack_value (bp, 1));\n   DECL_DECLARED_INLINE_P (expr) = (unsigned) bp_unpack_value (bp, 1);\n   DECL_STATIC_CHAIN (expr) = (unsigned) bp_unpack_value (bp, 1);\n   DECL_NO_INLINE_WARNING_P (expr) = (unsigned) bp_unpack_value (bp, 1);"}, {"sha": "dbdc5d5e7365617c0a656fba8b7979db266a52f5", "filename": "gcc/tree-streamer-out.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6343b6bf3bb83c87cfc80eb32400b45bebd571e0/gcc%2Ftree-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6343b6bf3bb83c87cfc80eb32400b45bebd571e0/gcc%2Ftree-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-out.c?ref=6343b6bf3bb83c87cfc80eb32400b45bebd571e0", "patch": "@@ -296,6 +296,7 @@ pack_ts_function_decl_value_fields (struct bitpack_d *bp, tree expr)\n   bp_pack_value (bp, DECL_IS_RETURNS_TWICE (expr), 1);\n   bp_pack_value (bp, DECL_IS_MALLOC (expr), 1);\n   bp_pack_value (bp, DECL_IS_OPERATOR_NEW_P (expr), 1);\n+  bp_pack_value (bp, DECL_IS_OPERATOR_DELETE_P (expr), 1);\n   bp_pack_value (bp, DECL_DECLARED_INLINE_P (expr), 1);\n   bp_pack_value (bp, DECL_STATIC_CHAIN (expr), 1);\n   bp_pack_value (bp, DECL_NO_INLINE_WARNING_P (expr), 1);"}, {"sha": "4aa2c4a8739e8a4e34e0e4259b6a9a6a779040e5", "filename": "gcc/tree.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6343b6bf3bb83c87cfc80eb32400b45bebd571e0/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6343b6bf3bb83c87cfc80eb32400b45bebd571e0/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=6343b6bf3bb83c87cfc80eb32400b45bebd571e0", "patch": "@@ -3020,9 +3020,20 @@ set_function_decl_type (tree decl, function_decl_type t, bool set)\n #define DECL_IS_OPERATOR_NEW_P(NODE) \\\n   (FUNCTION_DECL_CHECK (NODE)->function_decl.decl_type == OPERATOR_NEW)\n \n+#define DECL_IS_REPLACEABLE_OPERATOR_NEW_P(NODE) \\\n+  (DECL_IS_OPERATOR_NEW_P (NODE) && DECL_IS_MALLOC (NODE))\n+\n #define DECL_SET_IS_OPERATOR_NEW(NODE, VAL) \\\n   set_function_decl_type (FUNCTION_DECL_CHECK (NODE), OPERATOR_NEW, VAL)\n \n+/* Nonzero in a FUNCTION_DECL means this function should be treated as\n+   C++ operator delete.  */\n+#define DECL_IS_OPERATOR_DELETE_P(NODE) \\\n+  (FUNCTION_DECL_CHECK (NODE)->function_decl.decl_type == OPERATOR_DELETE)\n+\n+#define DECL_SET_IS_OPERATOR_DELETE(NODE, VAL) \\\n+  set_function_decl_type (FUNCTION_DECL_CHECK (NODE), OPERATOR_DELETE, VAL)\n+\n /* Nonzero in a FUNCTION_DECL means this function may return more\n    than once.  */\n #define DECL_IS_RETURNS_TWICE(NODE) \\"}, {"sha": "a92e7a7783b17a91fd0a43c3afbef7d41e5adc71", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6343b6bf3bb83c87cfc80eb32400b45bebd571e0/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6343b6bf3bb83c87cfc80eb32400b45bebd571e0/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6343b6bf3bb83c87cfc80eb32400b45bebd571e0", "patch": "@@ -1,3 +1,13 @@\n+2019-07-25  Martin Liska  <mliska@suse.cz>\n+\t    Dominik Infuhr  <dominik.infuehr@theobroma-systems.com>\n+\n+\tPR c++/23383\n+\t* testsuite/ext/bitmap_allocator/check_delete.cc: Add\n+\t-fno-allocation-dce.\n+\t* testsuite/ext/bitmap_allocator/check_new.cc: Likewise.\n+\t* testsuite/ext/new_allocator/check_delete.cc: Likewise.\n+\t* testsuite/ext/new_allocator/check_new.cc: Likewise.\n+\n 2019-07-22  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* testsuite/26_numerics/bit/bitops.count/*: Rename to ..."}, {"sha": "1ad1f3c242cc0ef3a3616646ea1bf2bfcad3b5a5", "filename": "libstdc++-v3/testsuite/ext/bitmap_allocator/check_delete.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6343b6bf3bb83c87cfc80eb32400b45bebd571e0/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fbitmap_allocator%2Fcheck_delete.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6343b6bf3bb83c87cfc80eb32400b45bebd571e0/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fbitmap_allocator%2Fcheck_delete.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fbitmap_allocator%2Fcheck_delete.cc?ref=6343b6bf3bb83c87cfc80eb32400b45bebd571e0", "patch": "@@ -15,6 +15,8 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n+// { dg-options \"-fno-allocation-dce\" }\n+\n // 20.4.1.1 allocator members\n \n #include <cstdlib>"}, {"sha": "be16952c10dfdccfcd491d1f9b82dfe49d45a2cc", "filename": "libstdc++-v3/testsuite/ext/bitmap_allocator/check_new.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6343b6bf3bb83c87cfc80eb32400b45bebd571e0/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fbitmap_allocator%2Fcheck_new.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6343b6bf3bb83c87cfc80eb32400b45bebd571e0/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fbitmap_allocator%2Fcheck_new.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fbitmap_allocator%2Fcheck_new.cc?ref=6343b6bf3bb83c87cfc80eb32400b45bebd571e0", "patch": "@@ -15,6 +15,8 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n+// { dg-options \"-fno-allocation-dce\" }\n+\n // 20.4.1.1 allocator members\n \n #include <cstdlib>"}, {"sha": "dccee1d5293ba560af8373577168bb51056a64bf", "filename": "libstdc++-v3/testsuite/ext/new_allocator/check_delete.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6343b6bf3bb83c87cfc80eb32400b45bebd571e0/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fnew_allocator%2Fcheck_delete.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6343b6bf3bb83c87cfc80eb32400b45bebd571e0/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fnew_allocator%2Fcheck_delete.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fnew_allocator%2Fcheck_delete.cc?ref=6343b6bf3bb83c87cfc80eb32400b45bebd571e0", "patch": "@@ -17,6 +17,8 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n+// { dg-options \"-fno-allocation-dce\" }\n+\n // 20.4.1.1 allocator members\n \n #include <cstdlib>"}, {"sha": "a1d164a6d496bc35e2fb9535dc2304d5fe4a4b1a", "filename": "libstdc++-v3/testsuite/ext/new_allocator/check_new.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6343b6bf3bb83c87cfc80eb32400b45bebd571e0/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fnew_allocator%2Fcheck_new.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6343b6bf3bb83c87cfc80eb32400b45bebd571e0/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fnew_allocator%2Fcheck_new.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fnew_allocator%2Fcheck_new.cc?ref=6343b6bf3bb83c87cfc80eb32400b45bebd571e0", "patch": "@@ -17,6 +17,8 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n+// { dg-options \"-fno-allocation-dce\" }\n+\n // 20.4.1.1 allocator members\n \n #include <cstdlib>"}]}