{"sha": "13338552e20fc9327a4bf620715939db13c23ba6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTMzMzg1NTJlMjBmYzkzMjdhNGJmNjIwNzE1OTM5ZGIxM2MyM2JhNg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2007-03-11T16:08:35Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2007-03-11T16:08:35Z"}, "message": "re PR middle-end/31115 (libstdc++ 22_locale/num_get/get/char/2.cc 27_io/basic_ostream/inserters_arithmetic/char/6.cc)\n\n2007-03-11  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/31115\n\t* tree-vrp.c (extract_range_from_binary_expr): Make sure\n\tthe shift count is positive and non-anti-range for RSHIFT_EXPR.\n\tA shift count of zero is not special as with *_DIV_EXPR.\n\t(vrp_int_const_binop): Handle RSHIFT_EXPR for determining overflow\n\tdirection.\n\n\t* gcc.dg/torture/pr31115.c: New testcase.\n\nFrom-SVN: r122821", "tree": {"sha": "34d2d5d5c5a89386cd9edda2da8ff25f96630c53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/34d2d5d5c5a89386cd9edda2da8ff25f96630c53"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/13338552e20fc9327a4bf620715939db13c23ba6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13338552e20fc9327a4bf620715939db13c23ba6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13338552e20fc9327a4bf620715939db13c23ba6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13338552e20fc9327a4bf620715939db13c23ba6/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d7419dec458b277eb34ed15a3895c166fc47f93b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7419dec458b277eb34ed15a3895c166fc47f93b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7419dec458b277eb34ed15a3895c166fc47f93b"}], "stats": {"total": 56, "additions": 55, "deletions": 1}, "files": [{"sha": "c6659410339167deaefea1b73f40dae6adeb5c1e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13338552e20fc9327a4bf620715939db13c23ba6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13338552e20fc9327a4bf620715939db13c23ba6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=13338552e20fc9327a4bf620715939db13c23ba6", "patch": "@@ -1,3 +1,12 @@\n+2007-03-11  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/31115\n+\t* tree-vrp.c (extract_range_from_binary_expr): Make sure\n+\tthe shift count is positive and non-anti-range for RSHIFT_EXPR.\n+\tA shift count of zero is not special as with *_DIV_EXPR.\n+\t(vrp_int_const_binop): Handle RSHIFT_EXPR for determining overflow\n+\tdirection.\n+\n 2007-03-11  Ian Lance Taylor  <iant@google.com>\n \n \t* tree-vrp.c (vrp_int_const_binop): Handle PLUS_EXPR and"}, {"sha": "886bc4ea11e18302419e61af575e21060c633c7f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13338552e20fc9327a4bf620715939db13c23ba6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13338552e20fc9327a4bf620715939db13c23ba6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=13338552e20fc9327a4bf620715939db13c23ba6", "patch": "@@ -1,3 +1,8 @@\n+2007-03-11  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/31115\n+\t* gcc.dg/torture/pr31115.c: New testcase.\n+\n 2007-03-11  Ira Rosen  <irar@il.ibm.com>\n \n \tPR tree-optimization/29925"}, {"sha": "1395a34b3226264e8501bd9e3b359bd4bc6ecc47", "filename": "gcc/testsuite/gcc.dg/torture/pr31115.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13338552e20fc9327a4bf620715939db13c23ba6/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr31115.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13338552e20fc9327a4bf620715939db13c23ba6/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr31115.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr31115.c?ref=13338552e20fc9327a4bf620715939db13c23ba6", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do run } */\n+\n+extern void exit(int);\n+extern void abort();\n+void foo (int e1)\n+{\n+  if (e1 < 0)\n+    {\n+      e1 = -e1;\n+      if (e1 >>= 4)\n+        {\n+          if (e1 >= 1 << 5)\n+            exit(0);\n+        }\n+    }\n+}\n+\n+int main()\n+{\n+  foo(-(1<<9));\n+  abort();\n+}"}, {"sha": "b137628c975411209ef46cd393cc9122ca68ce40", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13338552e20fc9327a4bf620715939db13c23ba6/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13338552e20fc9327a4bf620715939db13c23ba6/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=13338552e20fc9327a4bf620715939db13c23ba6", "patch": "@@ -1569,6 +1569,12 @@ vrp_int_const_binop (enum tree_code code, tree val1, tree val2)\n \t      && (sgn1 >= 0\n \t\t  ? !is_positive_overflow_infinity (val2)\n \t\t  : is_negative_overflow_infinity (val2)))\n+\t  /* We only get in here with positive shift count, so the\n+\t     overflow direction is the same as the sign of val1.\n+\t     Actually rshift does not overflow at all, but we only\n+\t     handle the case of shifting overflowed -INF and +INF.  */\n+\t  || (code == RSHIFT_EXPR\n+\t      && sgn1 >= 0)\n \t  /* For division, the only case is -INF / -1 = +INF.  */\n \t  || code == TRUNC_DIV_EXPR\n \t  || code == FLOOR_DIV_EXPR\n@@ -1802,6 +1808,17 @@ extract_range_from_binary_expr (value_range_t *vr, tree expr)\n \t  return;\n \t}\n \n+      /* If we have a RSHIFT_EXPR with a possibly negative shift\n+\t count or an anti-range shift count drop to VR_VARYING.\n+\t We currently cannot handle the overflow cases correctly.  */\n+      if (code == RSHIFT_EXPR\n+\t  && (vr1.type == VR_ANTI_RANGE\n+\t      || !vrp_expr_computes_nonnegative (op1, &sop)))\n+\t{\n+\t  set_value_range_to_varying (vr);\n+\t  return;\n+\t}\n+\n       /* Multiplications and divisions are a bit tricky to handle,\n \t depending on the mix of signs we have in the two ranges, we\n \t need to operate on different values to get the minimum and\n@@ -1816,7 +1833,8 @@ extract_range_from_binary_expr (value_range_t *vr, tree expr)\n \t the new range.  */\n \n       /* Divisions by zero result in a VARYING value.  */\n-      if (code != MULT_EXPR\n+      if ((code != MULT_EXPR\n+\t   && code != RSHIFT_EXPR)\n \t  && (vr0.type == VR_ANTI_RANGE || range_includes_zero_p (&vr1)))\n \t{\n \t  set_value_range_to_varying (vr);"}]}