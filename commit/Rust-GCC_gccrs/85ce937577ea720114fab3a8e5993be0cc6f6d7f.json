{"sha": "85ce937577ea720114fab3a8e5993be0cc6f6d7f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODVjZTkzNzU3N2VhNzIwMTE0ZmFiM2E4ZTU5OTNiZTBjYzZmNmQ3Zg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2011-06-15T12:01:17Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2011-06-15T12:01:17Z"}, "message": "cgraphunit.c (handle_alias_pairs): New function.\n\n\t* cgraphunit.c (handle_alias_pairs): New function.\n\t(cgraph_finalize_compilation_unit): Use it.\n\t* ipa.c (cgraph_externally_visible_p): Remove hack marking asm names\n\tas externally visible.\n\nFrom-SVN: r175079", "tree": {"sha": "69ae811174a006e95d844f0fcb1b426efbb9c973", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/69ae811174a006e95d844f0fcb1b426efbb9c973"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/85ce937577ea720114fab3a8e5993be0cc6f6d7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85ce937577ea720114fab3a8e5993be0cc6f6d7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85ce937577ea720114fab3a8e5993be0cc6f6d7f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85ce937577ea720114fab3a8e5993be0cc6f6d7f/comments", "author": null, "committer": null, "parents": [{"sha": "a577c4054fc7aa9a5228feb6f0bdb37cf31997d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a577c4054fc7aa9a5228feb6f0bdb37cf31997d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a577c4054fc7aa9a5228feb6f0bdb37cf31997d5"}], "stats": {"total": 60, "additions": 52, "deletions": 8}, "files": [{"sha": "142856a5b478818fa6fcae0d0dbe20beffedcfe8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85ce937577ea720114fab3a8e5993be0cc6f6d7f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85ce937577ea720114fab3a8e5993be0cc6f6d7f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=85ce937577ea720114fab3a8e5993be0cc6f6d7f", "patch": "@@ -1,3 +1,10 @@\n+2011-06-13  Jan Hubicka  <jh@suse.cz>\n+\n+\t* cgraphunit.c (handle_alias_pairs): New function.\n+\t(cgraph_finalize_compilation_unit): Use it.\n+\t* ipa.c (cgraph_externally_visible_p): Remove hack marking asm names\n+\tas externally visible.\n+\n 2011-06-15  Richard Guenther  <rguenther@suse.de>\n \n \t* expr.c (expand_expr_real_2): Reduce all integral types to"}, {"sha": "88d0face01036a86e42dae49ea96ef7af56ebfae", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85ce937577ea720114fab3a8e5993be0cc6f6d7f/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85ce937577ea720114fab3a8e5993be0cc6f6d7f/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=85ce937577ea720114fab3a8e5993be0cc6f6d7f", "patch": "@@ -1175,6 +1175,49 @@ cgraph_analyze_functions (void)\n   ggc_collect ();\n }\n \n+/* Translate the ugly representation of aliases as alias pairs into nice\n+   representation in callgraph.  We don't handle all cases yet,\n+   unforutnately.  */\n+\n+static void\n+handle_alias_pairs (void)\n+{\n+  alias_pair *p;\n+  unsigned i;\n+  struct cgraph_node *target_node;\n+  struct cgraph_node *src_node;\n+  \n+  for (i = 0; VEC_iterate (alias_pair, alias_pairs, i, p);)\n+    {\n+      if (TREE_CODE (p->decl) == FUNCTION_DECL\n+\t   && !lookup_attribute (\"weakref\", DECL_ATTRIBUTES (p->decl))\n+\t  && (target_node = cgraph_node_for_asm (p->target)) != NULL)\n+\t{\n+\t  src_node = cgraph_get_node (p->decl);\n+\t  if (src_node && src_node->local.finalized)\n+            cgraph_reset_node (src_node);\n+\t  /* Normally EXTERNAL flag is used to mark external inlines,\n+\t     however for aliases it seems to be allowed to use it w/o\n+\t     any meaning. See gcc.dg/attr-alias-3.c  \n+\t     However for weakref we insist on EXTERNAL flag being set.\n+\t     See gcc.dg/attr-alias-5.c  */\n+\t  if (DECL_EXTERNAL (p->decl))\n+\t    DECL_EXTERNAL (p->decl) = 0;\n+\t  cgraph_create_function_alias (p->decl, target_node->decl);\n+\t  VEC_unordered_remove (alias_pair, alias_pairs, i);\n+\t}\n+      else\n+\t{\n+\t  if (dump_file)\n+\t    fprintf (dump_file, \"Unhandled alias %s->%s\\n\",\n+\t\t     IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (p->decl)),\n+\t\t     IDENTIFIER_POINTER (p->target));\n+\n+\t  i++;\n+\t}\n+    }\n+}\n+\n \n /* Analyze the whole compilation unit once it is parsed completely.  */\n \n@@ -1200,6 +1243,7 @@ cgraph_finalize_compilation_unit (void)\n \n   /* Mark alias targets necessary and emit diagnostics.  */\n   finish_aliases_1 ();\n+  handle_alias_pairs ();\n \n   if (!quiet_flag)\n     {\n@@ -1216,6 +1260,7 @@ cgraph_finalize_compilation_unit (void)\n \n   /* Mark alias targets necessary and emit diagnostics.  */\n   finish_aliases_1 ();\n+  handle_alias_pairs ();\n \n   /* Gimplify and lower thunks.  */\n   cgraph_analyze_functions ();"}, {"sha": "b9ae579cd4505ff4dcd69384e0e9abedda00f858", "filename": "gcc/ipa.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85ce937577ea720114fab3a8e5993be0cc6f6d7f/gcc%2Fipa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85ce937577ea720114fab3a8e5993be0cc6f6d7f/gcc%2Fipa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa.c?ref=85ce937577ea720114fab3a8e5993be0cc6f6d7f", "patch": "@@ -612,14 +612,6 @@ cgraph_externally_visible_p (struct cgraph_node *node,\n   if (DECL_BUILT_IN (node->decl))\n     return true;\n \n-  /* FIXME: We get wrong symbols with asm aliases in callgraph and LTO.\n-     This is because very little of code knows that assembler name needs to\n-     mangled.  Avoid touching declarations with user asm name set to mask\n-     some of the problems.  */\n-  if (DECL_ASSEMBLER_NAME_SET_P (node->decl)\n-      && IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (node->decl))[0]=='*')\n-    return true;\n-\n   /* If linker counts on us, we must preserve the function.  */\n   if (cgraph_used_from_object_file_p (node))\n     return true;"}]}