{"sha": "f75e6a516eee1546b54d4377d19fd6e0fca74432", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjc1ZTZhNTE2ZWVlMTU0NmI1NGQ0Mzc3ZDE5ZmQ2ZTBmY2E3NDQzMg==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2013-05-06T19:53:43Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-05-06T19:53:43Z"}, "message": "i386.md (isa): Add x64_sse4 member.\n\n\t* config/i386/i386.md (isa): Add x64_sse4 member.\n\t(enabled): Handle x64_sse4.\n\t(*movdi_internal): Add *x->?r alternative to emit pextrq $0,%xmm,%reg\n\tinstruction for 64bit SSE4_1 targets.  Update insn attributes.\n\t(*movsi_internal): Add *x->?r alternative to emit pextrd $0,%xmm,%reg\n\tinstruction for SSE4_1 targets.  Update insn attributes.\n\t* config/i386/sse.md (*vec_extract<ssevecmodelower>_0): Merge\n\twith *sse4_1_pextrd and *sse4_1_pextrq having const_0 selector.\n\t(*vec_extractv2di_1): Merge with *sse4_1_pextrq having\n\tconst_1 selector.\n\t(*vec_extractv4si): Rename from *sse4_1_pextrd.\n\t(*vec_extractv4si_zext): Rename from *sse4_1_pextrd_zext.\n\t(*vec_extract<ssevecmodelower>_0 splitters): Merge splitters together.\n\nFrom-SVN: r198643", "tree": {"sha": "e60833f48321b00e669f848b37c1f6d4ddeed3b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e60833f48321b00e669f848b37c1f6d4ddeed3b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f75e6a516eee1546b54d4377d19fd6e0fca74432", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f75e6a516eee1546b54d4377d19fd6e0fca74432", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f75e6a516eee1546b54d4377d19fd6e0fca74432", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f75e6a516eee1546b54d4377d19fd6e0fca74432/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a986d46838c658922d34b95f5878fbbca8b519c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a986d46838c658922d34b95f5878fbbca8b519c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a986d46838c658922d34b95f5878fbbca8b519c1"}], "stats": {"total": 203, "additions": 117, "deletions": 86}, "files": [{"sha": "f1c214f3c17e23c2ae68fab8f28a5784f0b3f554", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f75e6a516eee1546b54d4377d19fd6e0fca74432/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f75e6a516eee1546b54d4377d19fd6e0fca74432/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f75e6a516eee1546b54d4377d19fd6e0fca74432", "patch": "@@ -1,3 +1,19 @@\n+2013-05-06  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (isa): Add x64_sse4 member.\n+\t(enabled): Handle x64_sse4.\n+\t(*movdi_internal): Add *x->?r alternative to emit pextrq $0,%xmm,%reg\n+\tinstruction for 64bit SSE4_1 targets.  Update insn attributes.\n+\t(*movsi_internal): Add *x->?r alternative to emit pextrd $0,%xmm,%reg\n+\tinstruction for SSE4_1 targets.  Update insn attributes.\n+\t* config/i386/sse.md (*vec_extract<ssevecmodelower>_0): Merge\n+\twith *sse4_1_pextrd and *sse4_1_pextrq having const_0 selector.\n+\t(*vec_extractv2di_1): Merge with *sse4_1_pextrq having\n+\tconst_1 selector.\n+\t(*vec_extractv4si): Rename from *sse4_1_pextrd.\n+\t(*vec_extractv4si_zext): Rename from *sse4_1_pextrd_zext.\n+\t(*vec_extract<ssevecmodelower>_0 splitters): Merge splitters together.\n+\n 2013-05-06  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \tPR target/57108\n@@ -14,7 +30,6 @@\n \n 2013-05-06  Steven Bosscher  <steven@gcc.gnu.org>\n \n-\n \t* config/mips/mips.c: Include tree-pass.h.\n \t(mips_reorg): Split in pre- and post-dbr_schedule parts.\n \t(mips_machine_reorg2): Move mips_reorg post-dbr_schedule parts here."}, {"sha": "2f08198bd20fe8fc1b96913dec426d6282be0937", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 52, "deletions": 19, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f75e6a516eee1546b54d4377d19fd6e0fca74432/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f75e6a516eee1546b54d4377d19fd6e0fca74432/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=f75e6a516eee1546b54d4377d19fd6e0fca74432", "patch": "@@ -658,12 +658,15 @@\n (define_attr \"movu\" \"0,1\" (const_string \"0\"))\n \n ;; Used to control the \"enabled\" attribute on a per-instruction basis.\n-(define_attr \"isa\" \"base,x64,x64_sse4_noavx,x64_avx,nox64,sse2,sse2_noavx,\n-\t\t    sse3,sse4,sse4_noavx,avx,noavx,avx2,noavx2,bmi2,fma4,fma\"\n+(define_attr \"isa\" \"base,x64,x64_sse4,x64_sse4_noavx,x64_avx,nox64,\n+\t\t    sse2,sse2_noavx,sse3,sse4,sse4_noavx,avx,noavx,\n+\t\t    avx2,noavx2,bmi2,fma4,fma\"\n   (const_string \"base\"))\n \n (define_attr \"enabled\" \"\"\n   (cond [(eq_attr \"isa\" \"x64\") (symbol_ref \"TARGET_64BIT\")\n+\t (eq_attr \"isa\" \"x64_sse4\")\n+\t   (symbol_ref \"TARGET_64BIT && TARGET_SSE4_1\")\n \t (eq_attr \"isa\" \"x64_sse4_noavx\")\n \t   (symbol_ref \"TARGET_64BIT && TARGET_SSE4_1 && !TARGET_AVX\")\n \t (eq_attr \"isa\" \"x64_avx\")\n@@ -1850,9 +1853,9 @@\n \n (define_insn \"*movdi_internal\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\"\n-    \"=r  ,o  ,r,r  ,r,m ,*y,*y,?*y,?m,?r ,?*Ym,*x,*x,*x,m ,?r ,?*Yi,?*Ym,?*Yi\")\n+    \"=r  ,o  ,r,r  ,r,m ,*y,*y,?*y,?m,?r ,?*Ym,*x,*x,*x,m ,?r ,?r,?*Yi,?*Ym,?*Yi\")\n \t(match_operand:DI 1 \"general_operand\"\n-    \"riFo,riF,Z,rem,i,re,C ,*y,m  ,*y,*Yn,r   ,C ,*x,m ,*x,*Yj,r   ,*Yj ,*Yn\"))]\n+    \"riFo,riF,Z,rem,i,re,C ,*y,m  ,*y,*Yn,r   ,C ,*x,m ,*x,*Yj,*x,r   ,*Yj ,*Yn\"))]\n   \"!(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n {\n   switch (get_attr_type (insn))\n@@ -1872,6 +1875,9 @@\n       return \"movq\\t{%1, %0|%0, %1}\";\n \n     case TYPE_SSELOG1:\n+      if (GENERAL_REG_P (operands[0]))\n+\treturn \"%vpextrq\\t{$0, %1, %0|%0, %1, 0}\";\n+\n       return standard_sse_constant_opcode (insn, operands[1]);\n \n     case TYPE_SSEMOV:\n@@ -1924,8 +1930,10 @@\n   [(set (attr \"isa\")\n      (cond [(eq_attr \"alternative\" \"0,1\")\n \t      (const_string \"nox64\")\n-\t    (eq_attr \"alternative\" \"2,3,4,5,10,11,16,17\")\n+\t    (eq_attr \"alternative\" \"2,3,4,5,10,11,16,18\")\n \t      (const_string \"x64\")\n+\t    (eq_attr \"alternative\" \"17\")\n+\t      (const_string \"x64_sse4\")\n \t   ]\n \t   (const_string \"*\")))\n    (set (attr \"type\")\n@@ -1935,13 +1943,13 @@\n \t      (const_string \"mmx\")\n \t    (eq_attr \"alternative\" \"7,8,9,10,11\")\n \t      (const_string \"mmxmov\")\n-\t    (eq_attr \"alternative\" \"12\")\n+\t    (eq_attr \"alternative\" \"12,17\")\n \t      (const_string \"sselog1\")\n-\t    (eq_attr \"alternative\" \"13,14,15,16,17\")\n+\t    (eq_attr \"alternative\" \"13,14,15,16,18\")\n \t      (const_string \"ssemov\")\n-\t    (eq_attr \"alternative\" \"18,19\")\n+\t    (eq_attr \"alternative\" \"19,20\")\n \t      (const_string \"ssecvt\")\n- \t    (match_operand 1 \"pic_32bit_operand\")\n+\t    (match_operand 1 \"pic_32bit_operand\")\n \t      (const_string \"lea\")\n \t   ]\n \t   (const_string \"imov\")))\n@@ -1951,12 +1959,18 @@\n \t (const_string \"0\")\n \t (const_string \"*\")))\n    (set (attr \"length_immediate\")\n-     (if_then_else\n-       (and (eq_attr \"alternative\" \"4\") (eq_attr \"type\" \"imov\"))\n-\t (const_string \"8\")\n-\t (const_string \"*\")))\n+     (cond [(and (eq_attr \"alternative\" \"4\") (eq_attr \"type\" \"imov\"))\n+\t      (const_string \"8\")\n+\t    (eq_attr \"alternative\" \"17\")\n+\t      (const_string \"1\")\n+\t   ]\n+\t   (const_string \"*\")))\n    (set (attr \"prefix_rex\")\n-     (if_then_else (eq_attr \"alternative\" \"10,11,16,17\")\n+     (if_then_else (eq_attr \"alternative\" \"10,11,16,17,18\")\n+       (const_string \"1\")\n+       (const_string \"*\")))\n+   (set (attr \"prefix_extra\")\n+     (if_then_else (eq_attr \"alternative\" \"17\")\n        (const_string \"1\")\n        (const_string \"*\")))\n    (set (attr \"prefix\")\n@@ -1984,6 +1998,8 @@\n \t    (and (eq_attr \"alternative\" \"14,15\")\n \t\t (not (match_test \"TARGET_SSE2\")))\n \t      (const_string \"V2SF\")\n+\t    (eq_attr \"alternative\" \"17\")\n+\t      (const_string \"TI\")\n \t   ]\n \t   (const_string \"DI\")))])\n \n@@ -1998,14 +2014,17 @@\n \n (define_insn \"*movsi_internal\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\"\n-\t\t\t\"=r,m ,*y,*y,?rm,?*y,*x,*x,*x,m ,?r ,?*Yi\")\n+\t\t\t\"=r,m ,*y,*y,?rm,?*y,*x,*x,*x,m ,?r ,?r,?*Yi\")\n \t(match_operand:SI 1 \"general_operand\"\n-\t\t\t\"g ,re,C ,*y,*y ,rm ,C ,*x,m ,*x,*Yj,r\"))]\n+\t\t\t\"g ,re,C ,*y,*y ,rm ,C ,*x,m ,*x,*Yj,*x,r\"))]\n   \"!(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n {\n   switch (get_attr_type (insn))\n     {\n     case TYPE_SSELOG1:\n+      if (GENERAL_REG_P (operands[0]))\n+\treturn \"%vpextrd\\t{$0, %1, %0|%0, %1, 0}\";\n+\n       return standard_sse_constant_opcode (insn, operands[1]);\n \n     case TYPE_SSEMOV:\n@@ -2056,19 +2075,31 @@\n       gcc_unreachable ();\n     }\n }\n-  [(set (attr \"type\")\n+  [(set (attr \"isa\")\n+     (if_then_else (eq_attr \"alternative\" \"11\")\n+       (const_string \"sse4\")\n+       (const_string \"*\")))\n+   (set (attr \"type\")\n      (cond [(eq_attr \"alternative\" \"2\")\n \t      (const_string \"mmx\")\n \t    (eq_attr \"alternative\" \"3,4,5\")\n \t      (const_string \"mmxmov\")\n-\t    (eq_attr \"alternative\" \"6\")\n+\t    (eq_attr \"alternative\" \"6,11\")\n \t      (const_string \"sselog1\")\n-\t    (eq_attr \"alternative\" \"7,8,9,10,11\")\n+\t    (eq_attr \"alternative\" \"7,8,9,10,12\")\n \t      (const_string \"ssemov\")\n  \t    (match_operand 1 \"pic_32bit_operand\")\n \t      (const_string \"lea\")\n \t   ]\n \t   (const_string \"imov\")))\n+   (set (attr \"length_immediate\")\n+     (if_then_else (eq_attr \"alternative\" \"11\")\n+       (const_string \"1\")\n+       (const_string \"*\")))\n+   (set (attr \"prefix_extra\")\n+     (if_then_else (eq_attr \"alternative\" \"11\")\n+       (const_string \"1\")\n+       (const_string \"*\")))\n    (set (attr \"prefix\")\n      (if_then_else (eq_attr \"type\" \"sselog1,ssemov\")\n        (const_string \"maybe_vex\")\n@@ -2094,6 +2125,8 @@\n \t    (and (eq_attr \"alternative\" \"8,9\")\n \t         (not (match_test \"TARGET_SSE2\")))\n \t      (const_string \"SF\")\n+\t    (eq_attr \"alternative\" \"11\")\n+\t      (const_string \"TI\")\n \t   ]\n \t   (const_string \"SI\")))])\n "}, {"sha": "f0e7525a6beb29c0f943e43ea31b9e9c24e82129", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 49, "deletions": 66, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f75e6a516eee1546b54d4377d19fd6e0fca74432/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f75e6a516eee1546b54d4377d19fd6e0fca74432/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=f75e6a516eee1546b54d4377d19fd6e0fca74432", "patch": "@@ -6987,48 +6987,6 @@\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn \"*sse4_1_pextrd\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n-\t(vec_select:SI\n-\t  (match_operand:V4SI 1 \"register_operand\" \"x\")\n-\t  (parallel [(match_operand:SI 2 \"const_0_to_3_operand\" \"n\")])))]\n-  \"TARGET_SSE4_1\"\n-  \"%vpextrd\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"type\" \"sselog\")\n-   (set_attr \"prefix_extra\" \"1\")\n-   (set_attr \"length_immediate\" \"1\")\n-   (set_attr \"prefix\" \"maybe_vex\")\n-   (set_attr \"mode\" \"TI\")])\n-\n-(define_insn \"*sse4_1_pextrd_zext\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(zero_extend:DI\n-\t  (vec_select:SI\n-\t    (match_operand:V4SI 1 \"register_operand\" \"x\")\n-\t    (parallel [(match_operand:SI 2 \"const_0_to_3_operand\" \"n\")]))))]\n-  \"TARGET_64BIT && TARGET_SSE4_1\"\n-  \"%vpextrd\\t{%2, %1, %k0|%k0, %1, %2}\"\n-  [(set_attr \"type\" \"sselog\")\n-   (set_attr \"prefix_extra\" \"1\")\n-   (set_attr \"length_immediate\" \"1\")\n-   (set_attr \"prefix\" \"maybe_vex\")\n-   (set_attr \"mode\" \"TI\")])\n-\n-;; It must come before *vec_extractv2di_1 since it is preferred.\n-(define_insn \"*sse4_1_pextrq\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=rm\")\n-\t(vec_select:DI\n-\t  (match_operand:V2DI 1 \"register_operand\" \"x\")\n-\t  (parallel [(match_operand:SI 2 \"const_0_to_1_operand\" \"n\")])))]\n-  \"TARGET_SSE4_1 && TARGET_64BIT\"\n-  \"%vpextrq\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"type\" \"sselog\")\n-   (set_attr \"prefix_rex\" \"1\")\n-   (set_attr \"prefix_extra\" \"1\")\n-   (set_attr \"length_immediate\" \"1\")\n-   (set_attr \"prefix\" \"maybe_vex\")\n-   (set_attr \"mode\" \"TI\")])\n-\n (define_expand \"avx2_pshufdv3\"\n   [(match_operand:V8SI 0 \"register_operand\")\n    (match_operand:V8SI 1 \"nonimmediate_operand\")\n@@ -7358,12 +7316,13 @@\n    (set_attr \"mode\" \"TI,TI,V4SF,SF,SF\")])\n \n (define_insn \"*vec_extract<ssevecmodelower>_0\"\n-  [(set (match_operand:SWI48 0 \"nonimmediate_operand\"\t       \"=x,m,r ,r\")\n+  [(set (match_operand:SWI48 0 \"nonimmediate_operand\"\t       \"=r,r,x ,m,r\")\n \t(vec_select:SWI48\n-\t  (match_operand:<ssevecmode> 1 \"nonimmediate_operand\" \"xm,x,Yj,m\")\n+\t  (match_operand:<ssevecmode> 1 \"nonimmediate_operand\" \"Yj,x,xm,x,m\")\n \t  (parallel [(const_int 0)])))]\n   \"TARGET_SSE && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n-  \"#\")\n+  \"#\"\n+  [(set_attr \"isa\" \"*,sse4,*,*,*\")])\n \n (define_insn \"*vec_extractv2di_0_sse\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\"     \"=x,m\")\n@@ -7375,24 +7334,45 @@\n   \"#\")\n \n (define_split\n-  [(set (match_operand:SWI48x 0 \"register_operand\")\n+  [(set (match_operand:SWI48x 0 \"nonimmediate_operand\")\n \t(vec_select:SWI48x\n-\t  (match_operand:<ssevecmode> 1 \"memory_operand\")\n+\t  (match_operand:<ssevecmode> 1 \"nonimmediate_operand\")\n \t  (parallel [(const_int 0)])))]\n   \"TARGET_SSE && reload_completed\"\n   [(set (match_dup 0) (match_dup 1))]\n-  \"operands[1] = adjust_address (operands[1], <MODE>mode, 0);\")\n+{\n+  if (REG_P (operands[1]))\n+    operands[1] = gen_rtx_REG (<MODE>mode, REGNO (operands[1]));\n+  else\n+    operands[1] = adjust_address (operands[1], <MODE>mode, 0);\n+})\n \n-(define_split\n-  [(set (match_operand:SWI48x 0 \"nonimmediate_operand\")\n-\t(vec_select:SWI48x\n-\t  (match_operand:<ssevecmode> 1 \"register_operand\")\n-\t  (parallel [(const_int 0)])))]\n-  \"TARGET_SSE && reload_completed\n-   && (TARGET_INTER_UNIT_MOVES_FROM_VEC\n-       || !GENERAL_REG_P (operands [0]))\"\n-  [(set (match_dup 0) (match_dup 1))]\n-  \"operands[1] = gen_rtx_REG (<MODE>mode, REGNO (operands[1]));\")\n+(define_insn \"*vec_extractv4si\"\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n+\t(vec_select:SI\n+\t  (match_operand:V4SI 1 \"register_operand\" \"x\")\n+\t  (parallel [(match_operand:SI 2 \"const_0_to_3_operand\")])))]\n+  \"TARGET_SSE4_1\"\n+  \"%vpextrd\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"type\" \"sselog1\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"prefix\" \"maybe_vex\")\n+   (set_attr \"mode\" \"TI\")])\n+\n+(define_insn \"*vec_extractv4si_zext\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(zero_extend:DI\n+\t  (vec_select:SI\n+\t    (match_operand:V4SI 1 \"register_operand\" \"x\")\n+\t    (parallel [(match_operand:SI 2 \"const_0_to_3_operand\")]))))]\n+  \"TARGET_64BIT && TARGET_SSE4_1\"\n+  \"%vpextrd\\t{%2, %1, %k0|%k0, %1, %2}\"\n+  [(set_attr \"type\" \"sselog1\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"prefix\" \"maybe_vex\")\n+   (set_attr \"mode\" \"TI\")])\n \n (define_insn_and_split \"*vec_extractv4si_mem\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=x,r\")\n@@ -7408,24 +7388,27 @@\n })\n \n (define_insn \"*vec_extractv2di_1\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\"     \"=m,x,x,x,x,r\")\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\"     \"=rm,m,x,x,x,x,r\")\n \t(vec_select:DI\n-\t  (match_operand:V2DI 1 \"nonimmediate_operand\" \" x,0,x,x,o,o\")\n+\t  (match_operand:V2DI 1 \"nonimmediate_operand\"  \"x ,x,0,x,x,o,o\")\n \t  (parallel [(const_int 1)])))]\n   \"TARGET_SSE && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"@\n+   %vpextrq\\t{$1, %1, %0|%0, %1, 1}\n    %vmovhps\\t{%1, %0|%0, %1}\n    psrldq\\t{$8, %0|%0, 8}\n    vpsrldq\\t{$8, %1, %0|%0, %1, 8}\n    movhlps\\t{%1, %0|%0, %1}\n    #\n    #\"\n-  [(set_attr \"isa\" \"*,sse2_noavx,avx,noavx,*,x64\")\n-   (set_attr \"type\" \"ssemov,sseishft1,sseishft1,ssemov,ssemov,imov\")\n-   (set_attr \"length_immediate\" \"*,1,1,*,*,*\")\n-   (set_attr \"memory\" \"*,none,none,*,*,*\")\n-   (set_attr \"prefix\" \"maybe_vex,orig,vex,orig,*,*\")\n-   (set_attr \"mode\" \"V2SF,TI,TI,V4SF,DI,DI\")])\n+  [(set_attr \"isa\" \"x64_sse4,*,sse2_noavx,avx,noavx,*,x64\")\n+   (set_attr \"type\" \"sselog1,ssemov,sseishft1,sseishft1,ssemov,ssemov,imov\")\n+   (set_attr \"length_immediate\" \"1,*,1,1,*,*,*\")\n+   (set_attr \"memory\" \"*,*,none,none,*,*,*\")\n+   (set_attr \"prefix_rex\" \"1,*,*,*,*,*,*\")\n+   (set_attr \"prefix_extra\" \"1,*,*,*,*,*,*\")\n+   (set_attr \"prefix\" \"maybe_vex,maybe_vex,orig,vex,orig,*,*\")\n+   (set_attr \"mode\" \"TI,V2SF,TI,TI,V4SF,DI,DI\")])\n \n (define_split\n   [(set (match_operand:DI 0 \"register_operand\")"}]}