{"sha": "53e33d9533dd78d7be7366f39e29f860cc18675e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTNlMzNkOTUzM2RkNzhkN2JlNzM2NmYzOWUyOWY4NjBjYzE4Njc1ZQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-08-20T01:33:19Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-08-20T01:33:19Z"}, "message": "(subst, case AND): Only make IF_THEN_ELSE if conditional moves exist.\n\nFrom-SVN: r1903", "tree": {"sha": "7db36a66325e664245bba90b76f6ea7c297c641d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7db36a66325e664245bba90b76f6ea7c297c641d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53e33d9533dd78d7be7366f39e29f860cc18675e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53e33d9533dd78d7be7366f39e29f860cc18675e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53e33d9533dd78d7be7366f39e29f860cc18675e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53e33d9533dd78d7be7366f39e29f860cc18675e/comments", "author": null, "committer": null, "parents": [{"sha": "674ba2d6bfd0710a72b397571afab1378c8e347a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/674ba2d6bfd0710a72b397571afab1378c8e347a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/674ba2d6bfd0710a72b397571afab1378c8e347a"}], "stats": {"total": 5, "additions": 5, "deletions": 0}, "files": [{"sha": "6729a3f2f69734859c49e285dc0419f29677afd7", "filename": "gcc/combine.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53e33d9533dd78d7be7366f39e29f860cc18675e/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53e33d9533dd78d7be7366f39e29f860cc18675e/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=53e33d9533dd78d7be7366f39e29f860cc18675e", "patch": "@@ -3638,6 +3638,8 @@ subst (x, from, to, in_dest, unique_copy)\n \t  goto restart;\n \t}\n \n+#ifdef HAVE_conditional_move\n+\n       /* If we have (and A B) with A not an object but that is known to\n \t be -1 or 0, this is equivalent to the expression\n \t (if_then_else (ne A (const_int 0)) B (const_int 0))\n@@ -3660,6 +3662,7 @@ subst (x, from, to, in_dest, unique_copy)\n \t\t\t\tXEXP (x, 1), const0_rtx);\n \t  goto restart;\n \t}\n+#endif\n \n       /* In the following group of tests (and those in case IOR below),\n \t we start with some combination of logical operations and apply\n@@ -4799,6 +4802,8 @@ force_to_mode (x, mode, bits, reg)\n \t      && sub_optab->handlers[(int) mode].insn_code == CODE_FOR_nothing)\n \t  || (code == MULT && (smul_optab->handlers[(int) mode].insn_code\n \t\t\t       == CODE_FOR_nothing))\n+\t  || (code == AND\n+\t      && and_optab->handlers[(int) mode].insn_code == CODE_FOR_nothing)\n \t  || (code == IOR\n \t      && ior_optab->handlers[(int) mode].insn_code == CODE_FOR_nothing)\n \t  || (code == XOR && (xor_optab->handlers[(int) mode].insn_code"}]}