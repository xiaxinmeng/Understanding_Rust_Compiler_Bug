{"sha": "19472fc3fc0cabcee5b8a5073e8128d21a1ed6f2", "node_id": "C_kwDOANBUbNoAKDE5NDcyZmMzZmMwY2FiY2VlNWI4YTUwNzNlODEyOGQyMWExZWQ2ZjI", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-10-20T00:16:43Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-10-20T00:16:43Z"}, "message": "Daily bump.", "tree": {"sha": "07bd8a2bf1bfbf21984c89b066207c2574f6c91f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/07bd8a2bf1bfbf21984c89b066207c2574f6c91f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/19472fc3fc0cabcee5b8a5073e8128d21a1ed6f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19472fc3fc0cabcee5b8a5073e8128d21a1ed6f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19472fc3fc0cabcee5b8a5073e8128d21a1ed6f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19472fc3fc0cabcee5b8a5073e8128d21a1ed6f2/comments", "author": null, "committer": null, "parents": [{"sha": "5566f3c6b46cf053ae4b918513e318561b7af053", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5566f3c6b46cf053ae4b918513e318561b7af053", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5566f3c6b46cf053ae4b918513e318561b7af053"}], "stats": {"total": 343, "additions": 342, "deletions": 1}, "files": [{"sha": "f4683931f805544299f8b4ad43c45d7e88bdeeac", "filename": "ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19472fc3fc0cabcee5b8a5073e8128d21a1ed6f2/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19472fc3fc0cabcee5b8a5073e8128d21a1ed6f2/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=19472fc3fc0cabcee5b8a5073e8128d21a1ed6f2", "patch": "@@ -1,3 +1,7 @@\n+2021-10-19  Cl\u00e9ment Chigot  <clement.chigot@atos.net>\n+\n+\t* MAINTAINERS: Add myself for write after approval.\n+\n 2021-10-12  Eric Gallager  <egallager@gcc.gnu.org>\n \n \t* Makefile.def: Mark libcody, libdecnumber,"}, {"sha": "01d4a86e6c645b97bdddde3c525595d8b4019302", "filename": "gcc/ChangeLog", "status": "modified", "additions": 161, "deletions": 0, "changes": 161, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19472fc3fc0cabcee5b8a5073e8128d21a1ed6f2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19472fc3fc0cabcee5b8a5073e8128d21a1ed6f2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=19472fc3fc0cabcee5b8a5073e8128d21a1ed6f2", "patch": "@@ -1,3 +1,164 @@\n+2021-10-19  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* doc/extend.texi (Basic PowerPC Built-in Functions): Fix typo.\n+\n+2021-10-19  Paul A. Clarke  <pc@us.ibm.com>\n+\n+\tPR target/101893\n+\tPR target/102719\n+\t* config/rs6000/emmintrin.h: Guard POWER8 intrinsics.\n+\t* config/rs6000/pmmintrin.h: Same.\n+\t* config/rs6000/smmintrin.h: Same.\n+\t* config/rs6000/tmmintrin.h: Same.\n+\n+2021-10-19  Paul A. Clarke  <pc@us.ibm.com>\n+\n+\t* config.gcc (extra_headers): Add nmmintrin.h.\n+\n+2021-10-19  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vectorizer.h (vect_supportable_dr_alignment): Add\n+\tmisalignment parameter.\n+\t* tree-vect-data-refs.c (vect_get_peeling_costs_all_drs):\n+\tDo not change DR_MISALIGNMENT in place, instead pass the\n+\tadjusted misalignment to vect_supportable_dr_alignment.\n+\t(vect_peeling_supportable): Likewise.\n+\t(vect_peeling_hash_get_lowest_cost): Adjust.\n+\t(vect_enhance_data_refs_alignment): Likewise.\n+\t(vect_vfa_access_size): Likewise.\n+\t(vect_supportable_dr_alignment): Add misalignment\n+\tparameter and simplify.\n+\t* tree-vect-stmts.c (get_negative_load_store_type): Adjust.\n+\t(get_group_load_store_type): Likewise.\n+\t(get_load_store_type): Likewise.\n+\n+2021-10-19  Cl\u00e9ment Chigot  <clement.chigot@atos.net>\n+\n+\t* config/rs6000/rs6000.c (rs6000_xcoff_file_end): Move\n+\t__tls_get_addr reference to .text csect.\n+\n+2021-10-19  Martin Liska  <mliska@suse.cz>\n+\n+\tPR target/102375\n+\t* config/aarch64/aarch64.c (aarch64_process_one_target_attr):\n+\tStrip whitespaces.\n+\n+2021-10-19  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vectorizer.h (vect_get_store_cost): Adjust signature.\n+\t(vect_get_load_cost): Likewise.\n+\t* tree-vect-data-refs.c (vect_get_data_access_cost): Get\n+\talignment support scheme and misalignment as arguments\n+\tand pass them down.\n+\t(vect_get_peeling_costs_all_drs): Compute that info here\n+\tand note that we shouldn't need to.\n+\t* tree-vect-stmts.c (vect_model_store_cost): Get\n+\talignment support scheme and misalignment as arguments.\n+\t(vect_get_store_cost): Likewise.\n+\t(vect_model_load_cost): Likewise.\n+\t(vect_get_load_cost): Likewise.\n+\t(vectorizable_store): Pass down alignment support scheme\n+\tand misalignment to costing.\n+\t(vectorizable_load): Likewise.\n+\n+2021-10-19  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-stmts.c (get_negative_load_store_type): Add\n+\toffset output parameter and initialize it.\n+\t(get_group_load_store_type): Likewise.\n+\t(get_load_store_type): Likewise.\n+\t(vectorizable_store): Use offset as computed by\n+\tget_load_store_type.\n+\t(vectorizable_load): Likewise.\n+\n+2021-10-19  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/102827\n+\t* tree-if-conv.c (predicate_statements): Add pe parameter\n+\tand use that edge to insert invariant stmts on.\n+\t(combine_blocks): Pass through pe.\n+\t(tree_if_conversion): Compute the edge to insert invariant\n+\tstmts on and pass it along.\n+\n+2021-10-19  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\tPR target/102785\n+\t* config/bfin/bfin.md (addsubv2hi3, subaddv2hi3, ssaddsubv2hi3,\n+\tsssubaddv2hi3):  Swap the order of operators in vec_concat.\n+\n+2021-10-19  Xionghu Luo  <luoxhu@linux.ibm.com>\n+\n+\t* config/rs6000/altivec.md (*altivec_vmrghb_internal): Delete.\n+\t(altivec_vmrghb_direct): New.\n+\t(*altivec_vmrghh_internal): Delete.\n+\t(altivec_vmrghh_direct): New.\n+\t(*altivec_vmrghw_internal): Delete.\n+\t(altivec_vmrghw_direct_<mode>): New.\n+\t(altivec_vmrghw_direct): Delete.\n+\t(*altivec_vmrglb_internal): Delete.\n+\t(altivec_vmrglb_direct): New.\n+\t(*altivec_vmrglh_internal): Delete.\n+\t(altivec_vmrglh_direct): New.\n+\t(*altivec_vmrglw_internal): Delete.\n+\t(altivec_vmrglw_direct_<mode>): New.\n+\t(altivec_vmrglw_direct): Delete.\n+\t* config/rs6000/rs6000-p8swap.c (rtx_is_swappable_p): Adjust.\n+\t* config/rs6000/rs6000.c (altivec_expand_vec_perm_const):\n+\tAdjust.\n+\t* config/rs6000/vsx.md (vsx_xxmrghw_<mode>): Adjust.\n+\t(vsx_xxmrglw_<mode>): Adjust.\n+\n+2021-10-19  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* passes.def: Change threading comment before pass_ccp pass.\n+\n+2021-10-19  Haochen Gui  <guihaoc@gcc.gnu.org>\n+\n+\t* config/rs6000/rs6000-call.c (altivec_expand_lxvr_builtin):\n+\tModify the expansion for sign extension. All extensions are done\n+\twithin VSX registers.\n+\n+2021-10-19  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-stmts.c (get_group_load_store_type): Add\n+\tmisalignment output parameter and initialize it.\n+\t(get_group_load_store_type): Likewise.\n+\t(vectorizable_store): Remove now redundant queries.\n+\t(vectorizable_load): Likewise.\n+\n+2021-10-19  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vectorizer.h (vect_supportable_dr_alignment): Remove\n+\tcheck_aligned argument.\n+\t* tree-vect-data-refs.c (vect_supportable_dr_alignment):\n+\tLikewise.\n+\t(vect_peeling_hash_insert): Add supportable_if_not_aligned\n+\targument and do not call vect_supportable_dr_alignment here.\n+\t(vect_peeling_supportable): Adjust.\n+\t(vect_enhance_data_refs_alignment): Compute whether the\n+\taccess is supported with different alignment here and\n+\tpass that down to vect_peeling_hash_insert.\n+\t(vect_vfa_access_size): Adjust.\n+\t* tree-vect-stmts.c (vect_get_store_cost): Likewise.\n+\t(vect_get_load_cost): Likewise.\n+\t(get_negative_load_store_type): Likewise.\n+\t(get_group_load_store_type): Likewise.\n+\t(get_load_store_type): Likewise.\n+\n+2021-10-19  Martin Liska  <mliska@suse.cz>\n+\n+\tPR target/102374\n+\t* config/i386/i386-options.c (ix86_valid_target_attribute_inner_p): Strip whitespaces.\n+\t* system.h (strip_whilespaces): New function.\n+\n+2021-10-19  dianhong xu  <dianhong.xu@intel.com>\n+\n+\t* config/i386/avx512fp16intrin.h:\n+\t(_mm512_set1_pch): New intrinsic.\n+\t* config/i386/avx512fp16vlintrin.h:\n+\t(_mm256_set1_pch): New intrinsic.\n+\t(_mm_set1_pch): Ditto.\n+\n 2021-10-18  Andrew MacLeod  <amacleod@redhat.com>\n \n \tPR tree-optimization/102796"}, {"sha": "17461b159738cb135245ebf8a388e2acd89d5a0f", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19472fc3fc0cabcee5b8a5073e8128d21a1ed6f2/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19472fc3fc0cabcee5b8a5073e8128d21a1ed6f2/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=19472fc3fc0cabcee5b8a5073e8128d21a1ed6f2", "patch": "@@ -1 +1 @@\n-20211019\n+20211020"}, {"sha": "15419f55f2a2bcdfd103360a426f8093ec98052f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19472fc3fc0cabcee5b8a5073e8128d21a1ed6f2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19472fc3fc0cabcee5b8a5073e8128d21a1ed6f2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=19472fc3fc0cabcee5b8a5073e8128d21a1ed6f2", "patch": "@@ -1,3 +1,9 @@\n+2021-10-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/102786\n+\t* constexpr.c (cxx_eval_constant_expression): Don't reject\n+\tINTEGER_CSTs with type POINTER_TYPE to METHOD_TYPE.\n+\n 2021-10-15  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/51851"}, {"sha": "d80ac05ac860e68bcc026ca5c8bd1a49063eea13", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19472fc3fc0cabcee5b8a5073e8128d21a1ed6f2/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19472fc3fc0cabcee5b8a5073e8128d21a1ed6f2/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=19472fc3fc0cabcee5b8a5073e8128d21a1ed6f2", "patch": "@@ -1,3 +1,15 @@\n+2021-10-19  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* trans-types.c (create_fn_spec): For allocatable/pointer\n+\tcharacter(len=:), use 'w' not 'R' as fn spec for the length dummy\n+\targument.\n+\n+2021-10-19  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/92482\n+\t* trans-expr.c (gfc_conv_procedure_call): Use TREE_OPERAND not\n+\tbuild_fold_indirect_ref_loc to undo an ADDR_EXPR.\n+\n 2021-10-18  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR fortran/102086"}, {"sha": "dc42e4aac6245a3a3e863ea8d4d6c689f73c11ca", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19472fc3fc0cabcee5b8a5073e8128d21a1ed6f2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19472fc3fc0cabcee5b8a5073e8128d21a1ed6f2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=19472fc3fc0cabcee5b8a5073e8128d21a1ed6f2", "patch": "@@ -1,3 +1,53 @@\n+2021-10-19  Paul A. Clarke  <pc@us.ibm.com>\n+\n+\t* gcc.target/powerpc/sse4_2-pcmpgtq.c: Tighten dg constraints\n+\tto minimally Power8.\n+\n+2021-10-19  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/92482\n+\t* gfortran.dg/bind-c-char-descr.f90: Remove xfail; extend a bit.\n+\n+2021-10-19  Martin Liska  <mliska@suse.cz>\n+\n+\tPR target/102375\n+\t* gcc.target/aarch64/pr102375.c: New test.\n+\n+2021-10-19  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/102827\n+\t* gcc.dg/pr102827.c: New testcase.\n+\n+2021-10-19  Xionghu Luo  <luoxhu@linux.ibm.com>\n+\n+\t* gcc.target/powerpc/builtins-1.c: Update instruction counts.\n+\n+2021-10-19  Haochen Gui  <guihaoc@gcc.gnu.org>\n+\n+\t* gcc.target/powerpc/p10_vec_xl_sext.c: New test.\n+\n+2021-10-19  prathamesh.kulkarni  <prathamesh.kulkarni@linaro.org>\n+\n+\tPR target/93183\n+\t* gcc.target/aarch64/sve/pr93183.c: Remove -mcpu=generic+sve from dg-options.\n+\n+2021-10-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/102786\n+\t* g++.dg/cpp2a/constexpr-virtual19.C: New test.\n+\n+2021-10-19  Martin Liska  <mliska@suse.cz>\n+\n+\tPR target/102374\n+\t* gcc.target/i386/pr102374.c: New test.\n+\n+2021-10-19  dianhong xu  <dianhong.xu@intel.com>\n+\n+\t* gcc.target/i386/avx512fp16-set1-pch-1a.c: New test.\n+\t* gcc.target/i386/avx512fp16-set1-pch-1b.c: New test.\n+\t* gcc.target/i386/avx512fp16vl-set1-pch-1a.c: New test.\n+\t* gcc.target/i386/avx512fp16vl-set1-pch-1b.c: New test.\n+\n 2021-10-18  Andrew MacLeod  <amacleod@redhat.com>\n \n \tPR tree-optimization/102796"}, {"sha": "4dbc6bac6ee424d9206b0bdceef817b292604819", "filename": "liboffloadmic/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19472fc3fc0cabcee5b8a5073e8128d21a1ed6f2/liboffloadmic%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19472fc3fc0cabcee5b8a5073e8128d21a1ed6f2/liboffloadmic%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/liboffloadmic%2FChangeLog?ref=19472fc3fc0cabcee5b8a5073e8128d21a1ed6f2", "patch": "@@ -1,3 +1,8 @@\n+2021-10-19  Martin Liska  <mliska@suse.cz>\n+\n+\t* include/coi/source/COIBuffer_source.h: Convert 2 chars to\n+\tunicode.\n+\n 2021-05-25  Richard Biener  <rguenther@suse.de>\n \n \tPR libgomp/100747"}, {"sha": "92cb6d0c03cd4a47c75f2fc65d8b691135e2eebf", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19472fc3fc0cabcee5b8a5073e8128d21a1ed6f2/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19472fc3fc0cabcee5b8a5073e8128d21a1ed6f2/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=19472fc3fc0cabcee5b8a5073e8128d21a1ed6f2", "patch": "@@ -1,3 +1,106 @@\n+2021-10-19  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* include/std/ranges (iota_view::_Iterator::operator+): Adjust\n+\tdefinition as per LWG 3580.\n+\t(iota_view::_Iterator::operator-): Likewise.\n+\n+2021-10-19  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* include/std/ranges (basic_istream_view::_M_object): Value\n+\tinitialize as per LWG 3568.\n+\n+2021-10-19  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* include/bits/ranges_util.h\n+\t(__detail::__uses_nonqualification_pointer_conversion): Define\n+\tand use it ...\n+\t(__detail::__convertible_to_nonslicing): ... here, as per LWG 3470.\n+\t* testsuite/std/ranges/subrange/1.cc: New test.\n+\n+2021-10-19  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* include/std/ranges (iota_view::_Iterator): Befriend iota_view.\n+\t(iota_view::_Sentinel): Likewise.\n+\t(iota_view::iota_view): Add three overloads, each taking an\n+\titerator/sentinel pair as per LWG 3523.\n+\t* testsuite/std/ranges/iota/iota_view.cc (test06): New test.\n+\n+2021-10-19  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* include/bits/ranges_base.h (view_interface): Forward declare.\n+\t(__detail::__is_derived_from_view_interface_fn): Declare.\n+\t(__detail::__is_derived_from_view_interface): Define as per LWG 3549.\n+\t(enable_view): Adjust as per LWG 3549.\n+\t* include/bits/ranges_util.h (view_interface): Don't derive from\n+\tview_base.\n+\t* include/std/ranges (filter_view): Revert r11-3504 change.\n+\t(transform_view): Likewise.\n+\t(take_view): Likewise.\n+\t(take_while_view): Likewise.\n+\t(drop_view): Likewise.\n+\t(drop_while_view): Likewise.\n+\t(join_view): Likewise.\n+\t(lazy_split_view): Likewise.\n+\t(split_view): Likewise.\n+\t(reverse_view): Likewise.\n+\t* testsuite/std/ranges/adaptors/sizeof.cc: Update expected sizes.\n+\t* testsuite/std/ranges/view.cc (test_view::test_view): Remove\n+\tthis default ctor since views no longer need to be default initable.\n+\t(test01): New test.\n+\n+2021-10-19  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* src/c++11/random.cc (which_source): New helper function.\n+\t(random_device::_M_getentropy()): Use which_source and return\n+\tsuitable values for sources other than device files.\n+\t* testsuite/26_numerics/random/random_device/entropy.cc: New test.\n+\n+2021-10-19  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* doc/Makefile.am (stamp-html-doxygen, stamp-html-doxygen)\n+\t(stamp-latex-doxygen, stamp-man-doxygen): Fix recipes for\n+\trelative ${top_srcdir}.\n+\t* doc/Makefile.in: Regenerate.\n+\n+2021-10-19  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/variant (_Uninitialized): Use an empty struct\n+\tfor the unused union member, instead of char.\n+\n+2021-10-19  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/stl_stack.h (stack(Iterator, Iterator)): Remove\n+\tnon-deducible template parameter from deduction guide.\n+\t* testsuite/23_containers/stack/deduction.cc: Check new C++23\n+\tdeduction guides.\n+\n+2021-10-19  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/optional (_Optional_payload_base::_Storage): Add\n+\tconstructor taking a callable function to invoke.\n+\t(_Optional_payload_base::_M_apply): New function.\n+\t(__cpp_lib_monadic_optional): Define for C++23.\n+\t(optional::and_then, optional::transform, optional::or_else):\n+\tDefine for C++23.\n+\t* include/std/ranges (__detail::__cached): Remove.\n+\t(__detail::__non_propagating_cache): Remove use of __cached for\n+\tcontained value. Use _Optional_payload_base::_M_construct and\n+\t_Optional_payload_base::_M_apply to set the contained value.\n+\t* include/std/version (__cpp_lib_monadic_optional): Define.\n+\t* testsuite/20_util/optional/monadic/and_then.cc: New test.\n+\t* testsuite/20_util/optional/monadic/or_else.cc: New test.\n+\t* testsuite/20_util/optional/monadic/or_else_neg.cc: New test.\n+\t* testsuite/20_util/optional/monadic/transform.cc: New test.\n+\t* testsuite/20_util/optional/monadic/version.cc: New test.\n+\n+2021-10-19  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/102825\n+\t* include/bits/mofunc_impl.h (move_only_function): Remove\n+\tinvalid base initializer.\n+\t* testsuite/20_util/move_only_function/cons.cc: Instantiate\n+\tconstructors to check bodies.\n+\n 2021-10-15  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/fs_path.h (path::_S_convert(T)): Avoid recursive"}]}