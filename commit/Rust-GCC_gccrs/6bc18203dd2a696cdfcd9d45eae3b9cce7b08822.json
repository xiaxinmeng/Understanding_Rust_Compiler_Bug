{"sha": "6bc18203dd2a696cdfcd9d45eae3b9cce7b08822", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmJjMTgyMDNkZDJhNjk2Y2RmY2Q5ZDQ1ZWFlM2I5Y2NlN2IwODgyMg==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-06-30T00:16:52Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-06-30T00:16:52Z"}, "message": "Daily bump.", "tree": {"sha": "5ee9ebd1e9d25a30efdd0eb9b8fd2979a13241c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ee9ebd1e9d25a30efdd0eb9b8fd2979a13241c3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6bc18203dd2a696cdfcd9d45eae3b9cce7b08822", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bc18203dd2a696cdfcd9d45eae3b9cce7b08822", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bc18203dd2a696cdfcd9d45eae3b9cce7b08822", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bc18203dd2a696cdfcd9d45eae3b9cce7b08822/comments", "author": null, "committer": null, "parents": [{"sha": "1cb5e50f9845466f0aaeb35f620bf9e25d8246c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cb5e50f9845466f0aaeb35f620bf9e25d8246c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1cb5e50f9845466f0aaeb35f620bf9e25d8246c1"}], "stats": {"total": 457, "additions": 456, "deletions": 1}, "files": [{"sha": "52d23972cbfb3a89eeb35525aa3b6116eeca5506", "filename": "gcc/ChangeLog", "status": "modified", "additions": 139, "deletions": 0, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc18203dd2a696cdfcd9d45eae3b9cce7b08822/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc18203dd2a696cdfcd9d45eae3b9cce7b08822/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6bc18203dd2a696cdfcd9d45eae3b9cce7b08822", "patch": "@@ -1,3 +1,142 @@\n+2021-06-29  Sergei Trofimovich  <siarheit@google.com>\n+\n+\t* doc/generic.texi: Fix s/net yet/not yet/ typo.\n+\n+2021-06-29  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/101254\n+\t* range-op.cc (operator_minus::op1_op2_relation_effect): Check for\n+\twrapping/non-wrapping when setting the result range.\n+\n+2021-06-29  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* value-query.cc (gimple_range_global): Allow phis.\n+\n+2021-06-29  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* vr-values.c (vr_values::vrp_stmt_computes_nonzero): Use stmt.\n+\t(simplify_using_ranges::op_with_boolean_value_range_p): Add a\n+\tstatement for location context.\n+\t(check_for_binary_op_overflow): Ditto.\n+\t(simplify_using_ranges::get_vr_for_comparison): Ditto.\n+\t(simplify_using_ranges::compare_name_with_value): Ditto.\n+\t(simplify_using_ranges::compare_names): Ditto.\n+\t(vrp_evaluate_conditional_warnv_with_ops_using_ranges): Ditto.\n+\t(simplify_using_ranges::simplify_truth_ops_using_ranges): Ditto.\n+\t(simplify_using_ranges::simplify_min_or_max_using_ranges): Ditto.\n+\t(simplify_using_ranges::simplify_internal_call_using_ranges): Ditto.\n+\t(simplify_using_ranges::two_valued_val_range_p): Ditto.\n+\t(simplify_using_ranges::simplify): Ditto.\n+\t* vr-values.h: Adjust prototypes.\n+\n+2021-06-29  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/95046\n+\t* config/i386/mmx.md (vec_addsubv2sf3): New insn pattern.\n+\n+2021-06-29  Julian Brown  <julian@codesourcery.com>\n+\n+\t* config/gcn/gcn.c (gcn_init_libfuncs): New function.\n+\t(TARGET_INIT_LIBFUNCS): Define target hook using above function.\n+\t* config/gcn/gcn.h (UNITS_PER_WORD): Define to 8 for IN_LIBGCC2, 4\n+\totherwise.\n+\t(LIBGCC2_UNITS_PER_WORD, BITS_PER_WORD): Remove definitions.\n+\t(MAX_FIXED_MODE_SIZE): Change to 128.\n+\n+2021-06-29  Julian Brown  <julian@codesourcery.com>\n+\n+\t* config/gcn/gcn.md (UNSPEC_FLBIT_INT): New unspec constant.\n+\t(s_mnemonic): Add clrsb.\n+\t(gcn_flbit<mode>_int): Add insn pattern for SImode/DImode.\n+\t(clrsb<mode>2): Add expander for SImode/DImode.\n+\n+2021-06-29  Julian Brown  <julian@codesourcery.com>\n+\n+\t* config/gcn/gcn.md (<su>mulsidi3, <su>mulsidi3_reg, <su>mulsidi3_imm,\n+\tmuldi3): Add patterns.\n+\n+2021-06-29  Julian Brown  <julian@codesourcery.com>\n+\n+\t* config/gcn/gcn.md (<su>mulsi3_highpart): Change to expander.\n+\t(<su>mulsi3_highpart_reg, <su>mulsi3_highpart_imm): New patterns.\n+\n+2021-06-29  Julian Brown  <julian@codesourcery.com>\n+\n+\t* config/gcn/gcn.md (mulsi3): Make s_mulk_i32 variant clobber SCC.\n+\n+2021-06-29  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* btfout.c, ctfout.c: Include \"memmodel.h\".\n+\n+2021-06-29  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gcc.c (check_offload_target_name): Cast len argument to\n+\t%q.*s to 'int'; avoid -Wstringop-truncation warning.\n+\n+2021-06-29  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-slp.c (vect_optimize_slp): Forward propagate\n+\tto \"any\" permute nodes and relax \"any\" permute proapgation\n+\tduring iterative backward propagation.\n+\n+2021-06-29  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR other/67300\n+\t* common.opt (-foffload=): Update description.\n+\t(-foffload-options=): New.\n+\t* doc/invoke.texi (C Language Options): Document\n+\t-foffload and -foffload-options.\n+\t* gcc.c (check_offload_target_name): New, split off from\n+\thandle_foffload_option.\n+\t(check_foffload_target_names): New.\n+\t(handle_foffload_option): Handle -foffload=default.\n+\t(driver_handle_option): Update for -foffload-options.\n+\t* lto-opts.c (lto_write_options): Use -foffload-options\n+\tinstead of -foffload.\n+\t* lto-wrapper.c (merge_and_complain, append_offload_options):\n+\tLikewise.\n+\t* opts.c (common_handle_option): Likewise.\n+\n+2021-06-29  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* doc/invoke.texi (C Language Options): Sort options\n+\talphabetically in optlist and also the description itself.\n+\tRemove leftover -fallow-single-precision from and add missing\n+\t-fgnu-tm to the optlist.\n+\n+2021-06-29  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-slp.c (slpg_vertex::visited): Remove.\n+\t(vect_slp_perms_eq): Handle -1 permutes.\n+\t(vect_optimize_slp): Rewrite permute propagation.\n+\n+2021-06-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/101210\n+\t* match.pd ((intptr_t)x eq/ne CST to x eq/ne (typeof x) CST): Don't\n+\tperform the optimization in GENERIC when sanitizing and x has a\n+\treference type.\n+\n+2021-06-29  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/101242\n+\t* tree-vect-slp.c (vect_slp_build_vertices): Force-add\n+\tPHIs with not represented initial values as leafs.\n+\n+2021-06-29  Jan-Benedict Glaw  <jbglaw@getslash.de>\n+\n+\t* config/pdp11/pdp11.h (ASM_OUTPUT_SKIP): Fix signedness warning.\n+\t* config/pdp11/pdp11.c (pdp11_asm_print_operand_punct_valid_p): Remove\n+\t\"register\" keyword.\n+\t(pdp11_initial_elimination_offset) Remove unused variable.\n+\t(pdp11_cmp_length) Ditto.\n+\t(pdp11_insn_cost): Ditto, and fix signedness warning.\n+\n+2021-06-29  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* btfout.c: Include tm_p.h.\n+\t* ctfout.c: Same.\n+\n 2021-06-28  Indu Bhagat  <indu.bhagat@oracle.com>\n \n \t* config/bpf/bpf.c (bpf_expand_prologue): Do not mark insns as"}, {"sha": "80bc3a6ce249802eba6b3e99925b9cd425ff5bfe", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc18203dd2a696cdfcd9d45eae3b9cce7b08822/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc18203dd2a696cdfcd9d45eae3b9cce7b08822/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=6bc18203dd2a696cdfcd9d45eae3b9cce7b08822", "patch": "@@ -1 +1 @@\n-20210629\n+20210630"}, {"sha": "f07cc963d8eb26539cf03f6a7a9afea9b7a471c1", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 241, "deletions": 0, "changes": 241, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc18203dd2a696cdfcd9d45eae3b9cce7b08822/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc18203dd2a696cdfcd9d45eae3b9cce7b08822/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=6bc18203dd2a696cdfcd9d45eae3b9cce7b08822", "patch": "@@ -1,3 +1,244 @@\n+2021-06-29  Richard Kenner  <kenner@adacore.com>\n+\n+\t* sem_util.adb (Visit_Node): Add handling for N_Block_Statement\n+\twith declarations.\n+\n+2021-06-29  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* einfo-utils.adb\n+\t(Unknown_Alignment): Simply negate the Known_ counterpart.\n+\t(Unknown_Component_Bit_Offset): Likewise.\n+\t(Unknown_Esize): Likewise.\n+\t(Unknown_Normalized_First_Bit): Likewise.\n+\t(Unknown_Normalized_Position): Likewise.\n+\t(Unknown_Normalized_Position_Max): Likewise.\n+\t(Unknown_RM_Size): Likewise.\n+\n+2021-06-29  Boris Yakobowski  <yakobowski@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_N_Op_Mod): Remove special case for mod -1\n+\tin CodePeer_Mode.\n+\n+2021-06-29  Aleksandra Pasek  <pasek@adacore.com>\n+\n+\t* libgnat/s-objrea.adb (EM_AARCH64): New Constant.\n+\t(Initialize): Handle EM_AARCH64 case.\n+\t(Read_Address): Handle AARCH64 case.\n+\t* libgnat/s-objrea.ads (Object_Arch): Add AARCH64 record\n+\tcomponent.\n+\n+2021-06-29  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_ch13.adb (Analyze_Record_Representation_Clause): Call\n+\tSet_Entity_With_Checks instead of Set_Entity, so we perform the\n+\tcheck for correct casing.\n+\t* style.adb (Check_Identifier): Minor comment improvement.\n+\tCleanup overly complicated code.\n+\n+2021-06-29  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_aggr.adb (Convert_Aggr_In_Object_Decl): After expansion of\n+\tthe aggregate, the expression can be removed from the\n+\tdeclaration, except if the object is class-wide, in which case\n+\tthe aggregate provides the actual type. In other cases the\n+\tpresence of the expression may lead to spurious freezing issue.\n+\t* exp_ch3.adb (Expand_N_Object_Declaration): If the expression\n+\tin the declaration is an aggregate with delayed expansion (as is\n+\tthe case for objects of a limited type, or a subsequent address\n+\tspecification) the aggregate must be resolved at this point.\n+\tThis resolution must not include expansion, because the\n+\texpansion of the enclosing declaration will construct the\n+\tnecessary aggregate expansion.\n+\n+2021-06-29  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* errout.ads (Adjust_Name_Case): Remove obsolete and now unused\n+\tvariant.\n+\t* errout.adb (Adjust_Name_Case): Likewise; fix variant that uses\n+\ta custom buffer to also use it for names in Standard_Location.\n+\n+2021-06-29  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_ch12.adb (Freeze_Subprogram_Body): Add missing \"freeze\".\n+\t(Install_Body): Likewise.\n+\n+2021-06-29  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* adaint.c (__gnat_portable_spawn): Revert change that\n+\tintroduced setting of __gnat_in_child_after_fork.\n+\n+2021-06-29  Patrick Bernardi  <bernardi@adacore.com>\n+\n+\t* libgnarl/s-tasdeb.ads (Known_Tasks): Add Atomic_Components\n+\taspect.\n+\n+2021-06-29  Doug Rupp  <rupp@adacore.com>\n+\n+\t* Makefile.rtl (x86_64-vx7r2) [EXTRA_GNATRTL_TASKING_OBJS]: Move\n+\ti-vxinco.o out of RTP runtime.\n+\n+2021-06-29  Claire Dross  <dross@adacore.com>\n+\n+\t* libgnat/a-cfdlli.ads: Use pragma Assertion_Policy to disable\n+\tpre and postconditions.\n+\t* libgnat/a-cfhama.ads: Likewise.\n+\t* libgnat/a-cfhase.ads: Likewise.\n+\t* libgnat/a-cfinve.ads: Likewise.\n+\t* libgnat/a-cforma.ads: Likewise.\n+\t* libgnat/a-cforse.ads: Likewise.\n+\t* libgnat/a-cofove.ads: Likewise.\n+\n+2021-06-29  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_util.ads (Get_Fullest_View): Refill comment; remove extra\n+\textra after period.\n+\t* sem_util.adb (Get_Fullest_View): Fix style.\n+\n+2021-06-29  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch3.adb (Analyze_Declarations): Remove explicit check for\n+\tmissing, because a subsequent call to Is_Empty_List will detect\n+\tthem anyway.\n+\n+2021-06-29  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* freeze.adb (Freeze_All): Simplify by reusing\n+\tIs_Subprogram_Or_Entry.\n+\t* sem_ch11.adb (Analyze_Handled_Statement): Likewise.\n+\n+2021-06-29  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_warn.adb (Warn_On_Overlapping_Actuals): Prevent cascaded\n+\terrors once for the subprogram call, not for every pair of\n+\tactual parameters.\n+\n+2021-06-29  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch3.adb (Is_Local_Type): Simplify by reusing Scope_Within.\n+\n+2021-06-29  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_ch6.ads (Can_Override_Operator): Function declaration\n+\tmoved from package body to package spec.\n+\t* sem_ch6.adb (Check_Overriding_Indicator): Now use test of\n+\twhether the subprogram's Chars is an operator name, to handle\n+\tcases of function instances whose entity is\n+\tN_Defining_Identifier rather than N_Defining_Operator_Symbol.\n+\t(Can_Override_Operator): Function declaration moved to package\n+\tspec.  Now use test of whether the subprogram's Chars is an\n+\toperator name, to handle cases of function instances whose\n+\tentity is N_Defining_Identifier rather than\n+\tN_Defining_Operator_Symbol.\n+\t* sem_ch8.adb (Analyze_Renamed_Subprogram): Check for\n+\tpossibility of an overridden predefined operator, and suppress\n+\tthe \"not overriding\" message in that case.\n+\n+2021-06-29  Doug Rupp  <rupp@adacore.com>\n+\n+\t* Makefile.rtl: Add a new ifeq for vx7r2 shared gnatlib.\n+\n+2021-06-29  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_attr.adb (Build_Array_VS_Func): Restore uses of\n+\tValidated_View.\n+\t(Build_Record_VS_Func): Likewise.\n+\t(Expand_N_Attribute_Reference): Likewise.\n+\t* sem_util.adb (Validated_View): Behave as an identity function\n+\tfor arrays and scalars.\n+\n+2021-06-29  Bob Duff  <duff@adacore.com>\n+\n+\t* atree.adb, atree.ads (Parent, Set_Parent): Assert node is\n+\tPresent.\n+\t(Copy_Parent, Parent_Kind): New helper routines.\n+\t* gen_il-gen.adb: Add with clause.\n+\t* nlists.adb (Parent): Assert Parent of list is Present.\n+\t* aspects.adb, checks.adb, exp_aggr.adb, exp_ch6.adb,\n+\texp_util.adb, lib-xref-spark_specific.adb, osint.ads,\n+\tsem_ch12.adb, sem_ch13.adb, sem_ch3.adb, sem_ch6.adb,\n+\tsem_dim.adb, sem_prag.adb, sem_res.adb, sem_util.adb,\n+\ttreepr.adb: Do not call Parent and Set_Parent on the Empty node.\n+\t* libgnat/a-stwiun__shared.adb, libgnat/a-stzunb__shared.adb:\n+\tMinor: Fix typos in comments.\n+\t* einfo.ads: Minor comment update.\n+\t* sinfo-utils.ads, sinfo-utils.adb (Parent_Kind, Copy_Parent):\n+\tNew functions.\n+\n+2021-06-29  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* repinfo-input.adb (Read_JSON_Stream): Fix typo.\n+\n+2021-06-29  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* rtsfind.ads (RE_Id): Change RE_Valid_Enumeration_Value_NN into\n+\tRE_Valid_Value_Enumeration_NN.\n+\t(RE_Unit_Table): Adjust to above renaming.\n+\t* exp_imgv.adb (Expand_Valid_Value_Attribute): Likewise.\n+\t* libgnat/s-valuen.ads (Invalid): Remove.\n+\t(Value_Enumeration_Pos): Move to...\n+\t* libgnat/s-valuen.adb (Value_Enumeration_Pos): ...here.\n+\tReturn -1 instead of Invalid.\n+\t(Value_Enumeration): Compare against 0 instead of Invalid.\n+\t(Valid_Enumeration_Value): Likewise.  Rename to...\n+\t(Valid_Value_Enumeration): ...this.\n+\t* libgnat/s-vaenu8.ads (Valid_Enumeration_Value_8): Rename into...\n+\t(Valid_Value_Enumeration_8): ...this.\n+\t* libgnat/s-vaen16.ads (Valid_Enumeration_Value_16): Rename into...\n+\t(Valid_Value_Enumeration_16): ...this.\n+\t* libgnat/s-vaen32.ads (Valid_Enumeration_Value_32): Rename into...\n+\t(Valid_Value_Enumeration_32): ...this.\n+\n+2021-06-29  Bob Duff  <duff@adacore.com>\n+\n+\t* einfo.ads (Component_Bit_Offset, Component_Size): Update\n+\tdocumentation: Repinfo is the package where these negative\n+\tvalues are documented.\n+\t* einfo-utils.adb (Known_Component_Size,\n+\tKnown_Static_Component_Size, Unknown_Component_Size): Remove\n+\tcalls to Implementation_Base_Type, because Component_Size is an\n+\tImpl_Base_Type_Only field (see Gen_Entities).\n+\t* sem_ch13.ads, sem_ch13.adb (Check_Size): Do not set Esize and\n+\tRM_Size. This is unnecessary in the case of Size. For\n+\tComponent_Size, it is wrong, because we would be setting the\n+\tEsize and RM_Size of the component type.\n+\n+2021-06-29  Pascal Obry  <obry@adacore.com>\n+\n+\t* s-oscons-tmplt.c: Add some OS constants.\n+\n+2021-06-29  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_util.ads (Validated_View): Fix style in comment.\n+\t* sem_util.adb (Validated_View): Rewrite in recursive style.\n+\n+2021-06-29  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* Make-generated.in (ada/stamp-gen_il): Ignore errors from\n+\trunning gen_il-main.\n+\n+2021-06-29  Richard Kenner  <kenner@adacore.com>\n+\n+\t* gen_il-gen-gen_entities.adb (Record_Field_Kind,\n+\tAllocatable_Kind): Add new abstract kinds.\n+\t(Constant_Or_Variable_Kind): Likewise.\n+\t(E_Constant, E_Variable, E_Loop_Parameter): Use them.\n+\t(E_Discriminant, E_Component): Likewise.\n+\t* gen_il-types.ads (type Opt_Type_Enum): Add them.\n+\n+2021-06-29  Bob Duff  <duff@adacore.com>\n+\n+\t* gen_il-gen.adb (Put_C_Type_And_Subtypes): Put the correct\n+\tnumbers.\n+\t* gen_il-internals.ads, gen_il-internals.adb: (Pos): Remove this\n+\tfunction. It was assuming that the order of the enumeration\n+\tliterals in Type_Enum is the same as the order of the generated\n+\ttypes Node_Kind and Entity_Kind, which is not true.\n+\n+2021-06-29  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_attr.adb (Expand_N_Attribute_Reference): Explicitly use\n+\tValidated_View for record objects.\n+\n 2021-06-28  Martin Sebor  <msebor@redhat.com>\n \n \t* gcc-interface/trans.c (Handled_Sequence_Of_Statements_to_gnu):"}, {"sha": "01b29b1692c00aeec3c829a588edfbed19a6665a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc18203dd2a696cdfcd9d45eae3b9cce7b08822/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc18203dd2a696cdfcd9d45eae3b9cce7b08822/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6bc18203dd2a696cdfcd9d45eae3b9cce7b08822", "patch": "@@ -1,3 +1,8 @@\n+2021-06-29  Jason Merrill  <jason@redhat.com>\n+\n+\t* pt.c (instantiate_decl): Only consider partial specializations of\n+\tactual variable templates.\n+\n 2021-06-26  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/96204"}, {"sha": "60ebb892d92afcb409c3c4241b225b7fbd4f388c", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc18203dd2a696cdfcd9d45eae3b9cce7b08822/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc18203dd2a696cdfcd9d45eae3b9cce7b08822/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=6bc18203dd2a696cdfcd9d45eae3b9cce7b08822", "patch": "@@ -1,3 +1,10 @@\n+2021-06-29  Ian Lance Taylor  <iant@golang.org>\n+\n+\t* go-gcc.cc (Gcc_backend::static_chain_variable): Set\n+\tDECL_NAMELESS on the new decl.\n+\t(Gcc_backend::temporary_variable): Likewise.\n+\t(Gcc_backend::function): Set DECL_NAMELESS on the result decl.\n+\n 2021-05-27  Ian Lance Taylor  <iant@golang.org>\n \n \t* gccgo.texi (Function Names): Don't HTML quote ampersand."}, {"sha": "51fc7ad647b560e12d13dcda243b1de6607c86f1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc18203dd2a696cdfcd9d45eae3b9cce7b08822/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc18203dd2a696cdfcd9d45eae3b9cce7b08822/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6bc18203dd2a696cdfcd9d45eae3b9cce7b08822", "patch": "@@ -1,3 +1,28 @@\n+2021-06-29  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gcc.dg/pr101254.c: New.\n+\n+2021-06-29  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/95046\n+\t* gcc.target/i386/pr95046-9.c: New test.\n+\n+2021-06-29  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/vect/pr67790.c: Un-XFAIL.\n+\t* gcc.dg/vect/bb-slp-71.c: New testcase.\n+\n+2021-06-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/101210\n+\t* g++.dg/ubsan/pr101210.C: New test.\n+\n+2021-06-29  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/101242\n+\t* gcc.dg/vect/bb-slp-pr101242.c: New testcase.\n+\t* gcc.dg/vect/pr67790.c: XFAIL scan for zero VEC_PERM_EXPR.\n+\n 2021-06-28  Martin Sebor  <msebor@redhat.com>\n \n \t* g++.dg/uninit-pr74762.C: New test."}, {"sha": "274f12b24f6f682cd1673fc5564f4426a525152f", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc18203dd2a696cdfcd9d45eae3b9cce7b08822/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc18203dd2a696cdfcd9d45eae3b9cce7b08822/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=6bc18203dd2a696cdfcd9d45eae3b9cce7b08822", "patch": "@@ -1,3 +1,19 @@\n+2021-06-29  Julian Brown  <julian@codesourcery.com>\n+\n+\t* config/gcn/lib2-bswapti2.c: New file.\n+\t* config/gcn/lib2-divmod-di.c: New file.\n+\t* config/gcn/lib2-gcn.h (DItype, UDItype, TItype, UTItype): Add\n+\ttypedefs.\n+\t(__divdi3, __moddi3, __udivdi3, __umoddi3): Add prototypes.\n+\t* config/gcn/t-amdgcn (LIB2ADD): Add lib2-divmod-di.c and\n+\tlib2-bswapti2.c.\n+\n+2021-06-29  Julian Brown  <julian@codesourcery.com>\n+\n+\t* config/gcn/lib2-divmod.c (__udivsi3, __umodsi3): Change argument and\n+\treturn types to USItype.\n+\t* config/gcn/lib2-gcn.h (__udivsi3, __umodsi3): Update prototypes.\n+\n 2021-06-23  Kewen Lin  <linkw@linux.ibm.com>\n \n \t* configure: Regenerate."}, {"sha": "91a0c67baf6d53c52b778b4b83d13f0ea43bccd2", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc18203dd2a696cdfcd9d45eae3b9cce7b08822/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc18203dd2a696cdfcd9d45eae3b9cce7b08822/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=6bc18203dd2a696cdfcd9d45eae3b9cce7b08822", "patch": "@@ -1,3 +1,9 @@\n+2021-06-29  Julian Brown  <julian@codesourcery.com>\n+\n+\tPR target/96306\n+\t* configure.ac: Remove stanza that removes KIND=16 integers for AMD GCN.\n+\t* configure: Regenerate.\n+\n 2021-06-22  Sandra Loosemore  <sandra@codesourcery.com>\n \t    Tobias Burnus  <tobias@codesourcery.com>\n "}, {"sha": "827b84079d521ddd8a15c29b4346e2ecedc8916c", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc18203dd2a696cdfcd9d45eae3b9cce7b08822/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc18203dd2a696cdfcd9d45eae3b9cce7b08822/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=6bc18203dd2a696cdfcd9d45eae3b9cce7b08822", "patch": "@@ -1,3 +1,19 @@\n+2021-06-29  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR other/67300\n+\t* testsuite/libgomp.c-c++-common/reduction-16.c: Replace\n+\t-foffload=nvptx-none= by -foffload-options=nvptx-none= to\n+\tavoid disabling other offload targets.\n+\t* testsuite/libgomp.c-c++-common/reduction-5.c: Likewise.\n+\t* testsuite/libgomp.c-c++-common/reduction-6.c: Likewise.\n+\t* testsuite/libgomp.c/target-44.c: Likewise.\n+\n+2021-06-29  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* testsuite/libgomp.fortran/defaultmap-8.f90 (bar): Determine whether\n+\ttarget has shared memory and disable some scalar pointer/allocatable\n+\tchecks if not as firstprivate does not work.\n+\n 2021-06-25  Chung-Lin Tang  <cltang@codesourcery.com>\n \n \tPR testsuite/101114"}]}