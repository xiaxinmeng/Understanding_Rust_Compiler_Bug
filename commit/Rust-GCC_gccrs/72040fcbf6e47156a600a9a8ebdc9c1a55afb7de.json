{"sha": "72040fcbf6e47156a600a9a8ebdc9c1a55afb7de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzIwNDBmY2JmNmU0NzE1NmE2MDBhOWE4ZWJkYzljMWE1NWFmYjdkZQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2002-11-04T22:57:00Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2002-11-04T22:57:00Z"}, "message": "linker-map.gnu: Export string operator+.\n\n\n2002-11-04  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* config/linker-map.gnu: Export string operator+.\n\tExport __default_alloc_template::_S_force_new.\n\t* testsuite/abi_check.cc: Output tweaks.\n\nFrom-SVN: r58801", "tree": {"sha": "7f7456acf9625ebb226fb88d8a12eca00d8c861a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f7456acf9625ebb226fb88d8a12eca00d8c861a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/72040fcbf6e47156a600a9a8ebdc9c1a55afb7de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72040fcbf6e47156a600a9a8ebdc9c1a55afb7de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72040fcbf6e47156a600a9a8ebdc9c1a55afb7de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72040fcbf6e47156a600a9a8ebdc9c1a55afb7de/comments", "author": null, "committer": null, "parents": [{"sha": "2aff950822bee20e1398a2a528ad927740f799f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2aff950822bee20e1398a2a528ad927740f799f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2aff950822bee20e1398a2a528ad927740f799f8"}], "stats": {"total": 89, "additions": 81, "deletions": 8}, "files": [{"sha": "68dc94f7b1ab5dfb468aa799d8ec9a2904ce21fd", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72040fcbf6e47156a600a9a8ebdc9c1a55afb7de/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72040fcbf6e47156a600a9a8ebdc9c1a55afb7de/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=72040fcbf6e47156a600a9a8ebdc9c1a55afb7de", "patch": "@@ -1,3 +1,9 @@\n+2002-11-04  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* config/linker-map.gnu: Export string operator+.\n+\tExport __default_alloc_template::_S_force_new.\n+\t* testsuite/abi_check.cc: Output tweaks.\n+\t\n 2002-11-01  Benjamin Kosnik  <bkoz@redhat.com>\n \n \tPR libstdc++/8172"}, {"sha": "e2fa73d664e45a46ac7b17e775ff93d43fac624f", "filename": "libstdc++-v3/config/linker-map.gnu", "status": "modified", "additions": 60, "deletions": 4, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72040fcbf6e47156a600a9a8ebdc9c1a55afb7de/libstdc%2B%2B-v3%2Fconfig%2Flinker-map.gnu", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72040fcbf6e47156a600a9a8ebdc9c1a55afb7de/libstdc%2B%2B-v3%2Fconfig%2Flinker-map.gnu", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flinker-map.gnu?ref=72040fcbf6e47156a600a9a8ebdc9c1a55afb7de", "patch": "@@ -28,7 +28,15 @@ GLIBCPP_3.2 {\n     # All but the last are terminated with a semicolon.\n     extern \"C++\"\n     {\n-      std::[A-Za-b]*;\n+      std::[A-Za]*;\n+      std::ba[a-r]*;\n+      std::basic_[a-r]*;\n+      std::basic_streambuf*;\n+      std::basic_stringbuf*;\n+      std::basic_stringstream*;\n+      std::basic_[t-z]*;\n+      std::ba[t-z]*;\n+      std::b[b-z]*;\n       std::c[a-n]*;\n       std::co[a-c]*;\n       std::codecvt_byname*;\n@@ -56,13 +64,39 @@ GLIBCPP_3.2 {\n       std::__timepunct*;\n       std::__numeric_limits_base*;\n       std::_S_bit_count;\n-      std::_S_first_one;\n-      std::__default_alloc_template*;\n-      std::__malloc_alloc_template*\n+      std::_S_first_one\n     };\n \n     # Names not in an 'extern' block are mangled names.\n \n+    # std::string minus binary operator plus\n+    _ZNKSs*;\n+    _ZNKSb*;\n+    _ZNSs[A-Za-z]*;\n+    _ZNSs[0-9][A-Za-z]*;\n+    _ZNSs[0-9][0-9][A-Za-z]*;\n+    _ZNSs[0-9]_[A-Ra-z]*;\n+    _ZNSs[0-9][0-9]_[A-Ra-z]*;\n+    _ZNSs12_S_empty_repEv;\n+    _ZNSs20_S_empty_rep_storageE;\n+    _ZNSbIwSt11char_traitsIwESaIwEE20_S_empty_rep_storageE;\n+    _ZNSs12_S_constructEjcRKSaIcE;\n+    _ZNSs13_S_copy_chars*;\n+    _ZNSbIwSt11char_traitsIwESaIwEE[A-Ra-z]*;\n+    _ZNSbIwSt11char_traitsIwESaIwEE[0-9][A-Ra-z]*;\n+    _ZNSbIwSt11char_traitsIwESaIwEE[0-9][0-9][A-Ra-z]*;\n+    _ZNSbIwSt11char_traitsIwESaIwEE[0-9]_[A-Ra-z]*;\n+    _ZNSbIwSt11char_traitsIwESaIwEE[0-9][0-9]_[A-Ra-z]*;\n+    _ZNSbIwSt11char_traitsIwESaIwEE13_S_copy_chars*;\n+    _ZNSbIwSt11char_traitsIwESaIwEE12_S_constructEjwRKS1_;\n+    _ZNSbIwSt11char_traitsIwESaIwEE12_S_empty_repEv;\n+    _ZSt24__uninitialized_copy_auxIN9*;\n+    _ZSt26__uninitialized_fill_n_aux*;\n+    _ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_EPKS3_RKS6_;\n+    _ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ES3_RKS6_;\n+    _ZStplIwSt11char_traitsIwESaIwEESbIT_T0_T1_EPKS3_RKS6_;\n+    _ZStplIwSt11char_traitsIwESaIwEESbIT_T0_T1_ES3_RKS6_;\n+\n     # std::locale destructors\n     _ZNSt6localeD*;\n \t \n@@ -97,6 +131,23 @@ GLIBCPP_3.2 {\n     # std::has_facet*\n     _ZSt9has_facet*;\n \n+    # std::__default_alloc_template\n+    _ZNSt24__default_alloc_templateILb1ELi0EE10deallocate*;\n+    _ZNSt24__default_alloc_templateILb1ELi0EE8allocate*;\n+    _ZNSt24__default_alloc_templateILb1ELi0EE12_S_free_listE;\n+    _ZNSt24__default_alloc_templateILb1ELi0EE22_S_node_allocator_lockE;\n+    _ZNSt24__default_alloc_templateILb1ELi0EE9_S_refillE*;\n+\n+    # std::__default_alloc_template to be removed in the future\n+    _ZNSt24__default_alloc_templateILb1ELi0EE10reallocateEPv*;\n+    _ZNSt24__default_alloc_templateILb1ELi0EE11_S_round_upE*;\n+    _ZNSt24__default_alloc_templateILb1ELi0EE14_S_chunk_allocE*;\n+    _ZNSt24__default_alloc_templateILb1ELi0EE17_S_freelist_indexE*;\n+    _ZNSt24__default_alloc_templateILb1ELi0EE11_S_end_freeE;\n+    _ZNSt24__default_alloc_templateILb1ELi0EE12_S_heap_sizeE;\n+    _ZNSt24__default_alloc_templateILb1ELi0EE13_S_start_freeE;\n+    _ZNSt24__default_alloc_templateILb1ELi0EE5_Lock*;\n+\n     # operator new(unsigned)\n     _Znwj;\n     # operator new(unsigned, std::nothrow_t const&)\n@@ -156,6 +207,11 @@ GLIBCPP_3.2.1 {\n   _ZNSt7codecvtIwc11__mbstate_tEC1EP15__locale_structj;\n   _ZNSt7codecvtIwc11__mbstate_tEC2EP15__locale_structj;\n \n+  _ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ERKS6_S8_;\n+  _ZStplIwSt11char_traitsIwESaIwEESbIT_T0_T1_ERKS6_S8_;\n+\n+  _ZNSt24__default_alloc_templateILb1ELi0EE12_S_force_newE;\n+\n   # stub functions from libmath\n   sinf;\n   sinl;"}, {"sha": "c093cd507a6aa1f12cd50a1d8bff654c1c74e4fd", "filename": "libstdc++-v3/testsuite/abi_check.cc", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72040fcbf6e47156a600a9a8ebdc9c1a55afb7de/libstdc%2B%2B-v3%2Ftestsuite%2Fabi_check.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72040fcbf6e47156a600a9a8ebdc9c1a55afb7de/libstdc%2B%2B-v3%2Ftestsuite%2Fabi_check.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fabi_check.cc?ref=72040fcbf6e47156a600a9a8ebdc9c1a55afb7de", "patch": "@@ -108,6 +108,8 @@ check_compatible(const symbol_info& lhs, const symbol_info& rhs,\n       if (verbose)\n \t{\n \t  cout << tab << \"incompatible sizes\" << endl;\n+\t  cout << tab << lhs.size << endl;\n+\t  cout << tab << rhs.size << endl;\n \t}\n     }\n \n@@ -117,9 +119,14 @@ check_compatible(const symbol_info& lhs, const symbol_info& rhs,\n       if (verbose)\n \t{\n \t  cout << tab << \"incompatible versions\" << endl;\n+\t  cout << tab << lhs.version_name << endl;\n+\t  cout << tab << rhs.version_name << endl;\n \t}\n     }\n \n+  if (verbose)\n+    cout << endl;\n+\n   return ret;\n }\n \n@@ -247,7 +254,7 @@ create_symbol_data(const char* file, symbol_infos& symbols,\n }\n \n void\n-report_symbol_info(const symbol_info& symbol, std::size_t n)\n+report_symbol_info(const symbol_info& symbol, std::size_t n, bool ret = true)\n {\n   using namespace std;\n   const char tab = '\\t';\n@@ -259,7 +266,8 @@ report_symbol_info(const symbol_info& symbol, std::size_t n)\n   cout << tab << \"demangled symbol\"<< endl;\n   cout << tab << symbol.demangled_name << endl;\n \n-  cout << endl;\n+  if (ret)\n+    cout << endl;\n }\n \n \n@@ -370,7 +378,10 @@ main(int argc, char** argv)\n \t\t\t\t\t  test.name);\n \n       if (it1 == end && it2 == end)\n-\tincompatible.push_back(symbol_pair(test, test));\n+\t{\n+\t  incompatible.push_back(symbol_pair(test, test));\n+\t  cout << test.version_name << endl;\n+\t}\n     }\n \n   // Report results.\n@@ -388,7 +399,7 @@ main(int argc, char** argv)\n       // First, report name.\n       const symbol_info& base = incompatible[j].first;\n       const symbol_info& test = incompatible[j].second;\n-      report_symbol_info(test, j + 1);\n+      report_symbol_info(test, j + 1, false);\n \n       // Second, report reason or reasons incompatible.\n       check_compatible(base, test, true);"}]}