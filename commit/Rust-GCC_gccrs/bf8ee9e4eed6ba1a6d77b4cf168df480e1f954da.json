{"sha": "bf8ee9e4eed6ba1a6d77b4cf168df480e1f954da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmY4ZWU5ZTRlZWQ2YmExYTZkNzdiNGNmMTY4ZGY0ODBlMWY5NTRkYQ==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2021-01-22T17:11:06Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2021-01-22T17:11:32Z"}, "message": "Fortran: Fix for class functions as associated target [PR98565].\n\n2021-01-22  Paul Thomas  <pault@gcc.gnu.org>\n\ngcc/fortran\n\tPR fortran/98565\n\t* trans-intrinsic.c (gfc_conv_associated): Do not add a _data\n\tcomponent for scalar class function targets. Instead, fix the\n\tfunction result and access the _data from that.\n\ngcc/testsuite/\n\tPR fortran/98565\n\t* gfortran.dg/associated_target_7.f90 : New test.", "tree": {"sha": "d1bef3b7aff2f04cf215bcc55e8b7d19da8eff06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d1bef3b7aff2f04cf215bcc55e8b7d19da8eff06"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf8ee9e4eed6ba1a6d77b4cf168df480e1f954da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf8ee9e4eed6ba1a6d77b4cf168df480e1f954da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf8ee9e4eed6ba1a6d77b4cf168df480e1f954da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf8ee9e4eed6ba1a6d77b4cf168df480e1f954da/comments", "author": null, "committer": null, "parents": [{"sha": "d7e681fc3afff24a6279058cbb0b0dc4cd96be8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7e681fc3afff24a6279058cbb0b0dc4cd96be8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7e681fc3afff24a6279058cbb0b0dc4cd96be8c"}], "stats": {"total": 95, "additions": 94, "deletions": 1}, "files": [{"sha": "5c9258c65c38f985ac3864aa2097ea989ceb2c07", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf8ee9e4eed6ba1a6d77b4cf168df480e1f954da/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf8ee9e4eed6ba1a6d77b4cf168df480e1f954da/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=bf8ee9e4eed6ba1a6d77b4cf168df480e1f954da", "patch": "@@ -9002,7 +9002,8 @@ gfc_conv_associated (gfc_se *se, gfc_expr *expr)\n   else\n     {\n       /* An optional target.  */\n-      if (arg2->expr->ts.type == BT_CLASS)\n+      if (arg2->expr->ts.type == BT_CLASS\n+\t  && arg2->expr->expr_type != EXPR_FUNCTION)\n \tgfc_add_data_component (arg2->expr);\n \n       if (scalar)\n@@ -9023,6 +9024,11 @@ gfc_conv_associated (gfc_se *se, gfc_expr *expr)\n \t      && arg2->expr->symtree->n.sym->attr.dummy)\n \t    arg2se.expr = build_fold_indirect_ref_loc (input_location,\n \t\t\t\t\t\t       arg2se.expr);\n+\t  if (arg2->expr->ts.type == BT_CLASS)\n+\t    {\n+\t      arg2se.expr = gfc_evaluate_now (arg2se.expr, &arg2se.pre);\n+\t      arg2se.expr = gfc_class_data_get (arg2se.expr);\n+\t    }\n \t  gfc_add_block_to_block (&se->pre, &arg1se.pre);\n \t  gfc_add_block_to_block (&se->post, &arg1se.post);\n \t  gfc_add_block_to_block (&se->pre, &arg2se.pre);"}, {"sha": "97f93b3c742999d17d8598ae9cdb67ea9de7d09e", "filename": "gcc/testsuite/gfortran.dg/associated_target_7.f90", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf8ee9e4eed6ba1a6d77b4cf168df480e1f954da/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociated_target_7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf8ee9e4eed6ba1a6d77b4cf168df480e1f954da/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociated_target_7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociated_target_7.f90?ref=bf8ee9e4eed6ba1a6d77b4cf168df480e1f954da", "patch": "@@ -0,0 +1,87 @@\n+! { dg-do run }\n+!\n+! associated_target_7.f90: Test the fix for PR98565.\n+!\n+! Contributed by Yves Secretan  <yves.secretan@ete.inrs.ca>\n+!\n+MODULE PS_SN0N_M\n+\n+   IMPLICIT NONE\n+   PRIVATE\n+\n+   TYPE, PUBLIC :: DT_GRID_T\n+       INTEGER :: NNT\n+   CONTAINS\n+       ! PASS\n+   END TYPE DT_GRID_T\n+\n+   TYPE, PUBLIC :: LM_ELEM_T\n+       CLASS(DT_GRID_T), POINTER :: PGRID\n+   CONTAINS\n+       PROCEDURE, PUBLIC :: REQPGRID => LM_ELEM_REGPGRID\n+   END TYPE LM_ELEM_T\n+\n+   TYPE, PUBLIC :: PS_SN0N_T\n+      CLASS(DT_GRID_T), POINTER :: PGRID\n+\n+   CONTAINS\n+      PROCEDURE, PUBLIC :: ASGOELE  => PS_SN0N_ASGOELE\n+   END TYPE PS_SN0N_T\n+\n+\n+CONTAINS\n+   !------------------------------------------------------------------------\n+   !------------------------------------------------------------------------\n+   FUNCTION LM_ELEM_REGPGRID(SELF) RESULT(PGRID)\n+   CLASS(DT_GRID_T), POINTER :: PGRID\n+   CLASS(LM_ELEM_T), INTENT(IN) :: SELF\n+   PGRID => SELF%PGRID\n+   RETURN\n+   END FUNCTION LM_ELEM_REGPGRID\n+\n+   !------------------------------------------------------------------------\n+   !------------------------------------------------------------------------\n+   FUNCTION PS_SN0N_ASGOELE(SELF, OELE) RESULT(ERMSG)\n+\n+   INTEGER :: ERMSG\n+   CLASS(PS_SN0N_T), INTENT(IN) :: SELF\n+   CLASS(LM_ELEM_T), INTENT(IN) :: OELE\n+\n+   !CLASS(DT_GRID_T), POINTER :: PGRID\n+   LOGICAL :: ISOK\n+   !------------------------------------------------------------------------\n+\n+   ! ASSOCIATED with temp variable compiles\n+   !PGRID => OELE%REQPGRID()\n+   !ISOK = ASSOCIATED(SELF%PGRID, PGRID)\n+\n+   ! ASSOCIATE without temp variable crashes with ICE\n+   ISOK = ASSOCIATED(SELF%PGRID, OELE%REQPGRID())\n+   ERMSG = 0\n+   IF (ISOK) ERMSG = 1\n+\n+   RETURN\n+   END FUNCTION PS_SN0N_ASGOELE\n+\n+END MODULE PS_SN0N_M\n+\n+\n+   USE PS_SN0N_M\n+   CLASS(PS_SN0N_T), ALLOCATABLE :: SELF\n+   CLASS(LM_ELEM_T), ALLOCATABLE :: OELE\n+   TYPE (DT_GRID_T), TARGET :: GRID1 = DT_GRID_T (42)\n+   TYPE (DT_GRID_T), TARGET :: GRID2 = DT_GRID_T (84)\n+\n+   ALLOCATE (PS_SN0N_T :: SELF)\n+   ALLOCATE (LM_ELEM_T :: OELE)\n+   SELF%PGRID => GRID1\n+\n+   OELE%PGRID => NULL ()\n+   IF (SELF%ASGOELE (OELE) .NE. 0) STOP 1\n+\n+   OELE%PGRID => GRID2\n+   IF (SELF%ASGOELE (OELE) .NE. 0) STOP 2\n+\n+   OELE%PGRID => GRID1\n+   IF (SELF%ASGOELE (OELE) .NE. 1) STOP 3\n+END"}]}