{"sha": "714996e2c2e1fd788c87b3a87648977468ad4251", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzE0OTk2ZTJjMmUxZmQ3ODhjODdiM2E4NzY0ODk3NzQ2OGFkNDI1MQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-04-18T12:30:36Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-04-18T12:30:36Z"}, "message": "Fix UB in int_const_binop\n\nWhen testing PR 85164, the baseline bootstrap-ubsan results had\na lot of failures from int_const_binop.  This is because with the\nnew overflow handling we can sometimes do:\n\n      poly_res = res;\n\non an uninitialised res.\n\n2019-04-18  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* fold-const.c (int_const_binop): Return early on failure.\n\nFrom-SVN: r270443", "tree": {"sha": "be03f26d6f967997c007886d0080a9d364a3f1e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be03f26d6f967997c007886d0080a9d364a3f1e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/714996e2c2e1fd788c87b3a87648977468ad4251", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/714996e2c2e1fd788c87b3a87648977468ad4251", "html_url": "https://github.com/Rust-GCC/gccrs/commit/714996e2c2e1fd788c87b3a87648977468ad4251", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/714996e2c2e1fd788c87b3a87648977468ad4251/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cd7f7c54a43c435152b2ac76b6e74ae6a3430472", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd7f7c54a43c435152b2ac76b6e74ae6a3430472", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd7f7c54a43c435152b2ac76b6e74ae6a3430472"}], "stats": {"total": 24, "additions": 14, "deletions": 10}, "files": [{"sha": "5b8c5acb076af03ab7612d9083aabae666df4b11", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/714996e2c2e1fd788c87b3a87648977468ad4251/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/714996e2c2e1fd788c87b3a87648977468ad4251/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=714996e2c2e1fd788c87b3a87648977468ad4251", "patch": "@@ -1,3 +1,7 @@\n+2019-04-18  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* fold-const.c (int_const_binop): Return early on failure.\n+\n 2019-04-18  Richard Sandiford  <richard.sandiford@arm.com>\n \n \tPR middle-end/85164"}, {"sha": "c4257721cfee3e50cfb2d19d29c4f0dd721cdd9a", "filename": "gcc/fold-const.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/714996e2c2e1fd788c87b3a87648977468ad4251/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/714996e2c2e1fd788c87b3a87648977468ad4251/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=714996e2c2e1fd788c87b3a87648977468ad4251", "patch": "@@ -1173,7 +1173,6 @@ tree\n int_const_binop (enum tree_code code, const_tree arg1, const_tree arg2,\n \t\t int overflowable)\n {\n-  bool success = false;\n   poly_wide_int poly_res;\n   tree type = TREE_TYPE (arg1);\n   signop sign = TYPE_SIGN (type);\n@@ -1183,17 +1182,18 @@ int_const_binop (enum tree_code code, const_tree arg1, const_tree arg2,\n     {\n       wide_int warg1 = wi::to_wide (arg1), res;\n       wide_int warg2 = wi::to_wide (arg2, TYPE_PRECISION (type));\n-      success = wide_int_binop (res, code, warg1, warg2, sign, &overflow);\n+      if (!wide_int_binop (res, code, warg1, warg2, sign, &overflow))\n+\treturn NULL_TREE;\n       poly_res = res;\n     }\n-  else if (poly_int_tree_p (arg1) && poly_int_tree_p (arg2))\n-    success = poly_int_binop (poly_res, code, arg1, arg2, sign, &overflow);\n-  if (success)\n-    return force_fit_type (type, poly_res, overflowable,\n-\t\t\t   (((sign == SIGNED || overflowable == -1)\n-\t\t\t     && overflow)\n-\t\t\t    | TREE_OVERFLOW (arg1) | TREE_OVERFLOW (arg2)));\n-  return NULL_TREE;\n+  else if (!poly_int_tree_p (arg1)\n+\t   || !poly_int_tree_p (arg2)\n+\t   || !poly_int_binop (poly_res, code, arg1, arg2, sign, &overflow))\n+    return NULL_TREE;\n+  return force_fit_type (type, poly_res, overflowable,\n+\t\t\t (((sign == SIGNED || overflowable == -1)\n+\t\t\t   && overflow)\n+\t\t\t  | TREE_OVERFLOW (arg1) | TREE_OVERFLOW (arg2)));\n }\n \n /* Return true if binary operation OP distributes over addition in operand"}]}