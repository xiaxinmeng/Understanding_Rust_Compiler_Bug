{"sha": "4a9733f3dfbd016103a30151a9656ffb63dce6e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGE5NzMzZjNkZmJkMDE2MTAzYTMwMTUxYTk2NTZmZmI2M2RjZTZlNA==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.ibm.com", "date": "2019-04-02T10:51:53Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2019-04-02T10:51:53Z"}, "message": "S/390: arch13: Support new bit operations\n\nMake use of the new bit operation instructions when generating code\nfor the arch13 level.\n\ngcc/ChangeLog:\n\n2019-04-02  Andreas Krebbel  <krebbel@linux.ibm.com>\n\n\t* config/s390/s390.c (s390_canonicalize_comparison): Convert\n\tcertain compares for arch13 in order to make use of the condition\n\tcode result produced by the new instructions.\n\t(s390_rtx_costs): Adjust the costs for nnrk, nngrk, nork, nogrk,\n\tnxrk, and nxgrk instruction patterns.\n\t* config/s390/s390.md (ANDOR, bitops_name, inv_bitops_name)\n\t(inv_no): Add new code iterator together with some attributes.\n\t(\"*andc_split_<mode>\"): Disable splitter for arch13.\n\t(\"*<ANDOR:bitops_name>c<GPR:mode>_cc\")\n\t(\"*<ANDOR:bitops_name>c<GPR:mode>_cconly\")\n\t(\"*<ANDOR:bitops_name>c<GPR:mode>\")\n\t(\"*n<ANDOR:inv_bitops_name><GPR:mode>_cc\")\n\t(\"*n<ANDOR:inv_bitops_name><mode>_cconly\")\n\t(\"*n<ANDOR:inv_bitops_name><mode>\", \"*nxor<GPR:mode>_cc\")\n\t(\"*nxor<mode>_cconly\", \"*nxor<mode>\"): New insn definitions.\n\ngcc/testsuite/ChangeLog:\n\n2019-04-02  Andreas Krebbel  <krebbel@linux.ibm.com>\n\n\t* gcc.target/s390/arch13/bitops-1.c: New test.\n\t* gcc.target/s390/arch13/bitops-2.c: New test.\n\t* gcc.target/s390/md/andc-splitter-1.c: Add -march=z14 build\n\toption and adjust line numbers.\n\t* gcc.target/s390/md/andc-splitter-2.c: Likewise.\n\nFrom-SVN: r270078", "tree": {"sha": "3915594697fee71d7c670df57d74b87c2b375e97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3915594697fee71d7c670df57d74b87c2b375e97"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a9733f3dfbd016103a30151a9656ffb63dce6e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a9733f3dfbd016103a30151a9656ffb63dce6e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a9733f3dfbd016103a30151a9656ffb63dce6e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a9733f3dfbd016103a30151a9656ffb63dce6e4/comments", "author": {"login": "Andreas-Krebbel", "id": 38103320, "node_id": "MDQ6VXNlcjM4MTAzMzIw", "avatar_url": "https://avatars.githubusercontent.com/u/38103320?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Andreas-Krebbel", "html_url": "https://github.com/Andreas-Krebbel", "followers_url": "https://api.github.com/users/Andreas-Krebbel/followers", "following_url": "https://api.github.com/users/Andreas-Krebbel/following{/other_user}", "gists_url": "https://api.github.com/users/Andreas-Krebbel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Andreas-Krebbel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Andreas-Krebbel/subscriptions", "organizations_url": "https://api.github.com/users/Andreas-Krebbel/orgs", "repos_url": "https://api.github.com/users/Andreas-Krebbel/repos", "events_url": "https://api.github.com/users/Andreas-Krebbel/events{/privacy}", "received_events_url": "https://api.github.com/users/Andreas-Krebbel/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "511ea1538b58d7d44a53d0264fc041de5991270a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/511ea1538b58d7d44a53d0264fc041de5991270a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/511ea1538b58d7d44a53d0264fc041de5991270a"}], "stats": {"total": 480, "additions": 457, "deletions": 23}, "files": [{"sha": "f9ed2b0a38ca21ce9ef4b3a1277b22d4c7ca0bfa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a9733f3dfbd016103a30151a9656ffb63dce6e4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a9733f3dfbd016103a30151a9656ffb63dce6e4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4a9733f3dfbd016103a30151a9656ffb63dce6e4", "patch": "@@ -1,3 +1,21 @@\n+2019-04-02  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\t* config/s390/s390.c (s390_canonicalize_comparison): Convert\n+\tcertain compares for arch13 in order to make use of the condition\n+\tcode result produced by the new instructions.\n+\t(s390_rtx_costs): Adjust the costs for nnrk, nngrk, nork, nogrk,\n+\tnxrk, and nxgrk instruction patterns.\n+\t* config/s390/s390.md (ANDOR, bitops_name, inv_bitops_name)\n+\t(inv_no): Add new code iterator together with some attributes.\n+\t(\"*andc_split_<mode>\"): Disable splitter for arch13.\n+\t(\"*<ANDOR:bitops_name>c<GPR:mode>_cc\")\n+\t(\"*<ANDOR:bitops_name>c<GPR:mode>_cconly\")\n+\t(\"*<ANDOR:bitops_name>c<GPR:mode>\")\n+\t(\"*n<ANDOR:inv_bitops_name><GPR:mode>_cc\")\n+\t(\"*n<ANDOR:inv_bitops_name><mode>_cconly\")\n+\t(\"*n<ANDOR:inv_bitops_name><mode>\", \"*nxor<GPR:mode>_cc\")\n+\t(\"*nxor<mode>_cconly\", \"*nxor<mode>\"): New insn definitions.\n+\n 2019-04-02  Andreas Krebbel  <krebbel@linux.ibm.com>\n \n \t* common/config/s390/s390-common.c (processor_flags_table): New"}, {"sha": "7cf1d67e98532a78c5442944083ece65533ad119", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 97, "deletions": 4, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a9733f3dfbd016103a30151a9656ffb63dce6e4/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a9733f3dfbd016103a30151a9656ffb63dce6e4/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=4a9733f3dfbd016103a30151a9656ffb63dce6e4", "patch": "@@ -1793,6 +1793,38 @@ s390_canonicalize_comparison (int *code, rtx *op0, rtx *op1,\n \t  *op0 = XEXP (*op0, 0);\n \t}\n     }\n+\n+  /* ~a==b -> ~(a^b)==0   ~a!=b -> ~(a^b)!=0 */\n+  if (TARGET_ARCH13\n+      && (*code == EQ || *code == NE)\n+      && (GET_MODE (*op0) == DImode || GET_MODE (*op0) == SImode)\n+      && GET_CODE (*op0) == NOT)\n+    {\n+      machine_mode mode = GET_MODE (*op0);\n+      *op0 = gen_rtx_XOR (mode, XEXP (*op0, 0), *op1);\n+      *op0 = gen_rtx_NOT (mode, *op0);\n+      *op1 = const0_rtx;\n+    }\n+\n+  /* a&b == -1 -> ~a|~b == 0    a|b == -1 -> ~a&~b == 0  */\n+  if (TARGET_ARCH13\n+      && (*code == EQ || *code == NE)\n+      && (GET_CODE (*op0) == AND || GET_CODE (*op0) == IOR)\n+      && (GET_MODE (*op0) == DImode || GET_MODE (*op0) == SImode)\n+      && CONST_INT_P (*op1)\n+      && *op1 == constm1_rtx)\n+    {\n+      machine_mode mode = GET_MODE (*op0);\n+      rtx op00 = gen_rtx_NOT (mode, XEXP (*op0, 0));\n+      rtx op01 = gen_rtx_NOT (mode, XEXP (*op0, 1));\n+\n+      if (GET_CODE (*op0) == AND)\n+\t*op0 = gen_rtx_IOR (mode, op00, op01);\n+      else\n+\t*op0 = gen_rtx_AND (mode, op00, op01);\n+\n+      *op1 = const0_rtx;\n+    }\n }\n \n \n@@ -3516,6 +3548,21 @@ s390_rtx_costs (rtx x, machine_mode mode, int outer_code,\n \treturn true;\n       }\n     case IOR:\n+\n+      /* nnrk, nngrk */\n+      if (TARGET_ARCH13\n+\t  && (mode == SImode || mode == DImode)\n+\t  && GET_CODE (XEXP (x, 0)) == NOT\n+\t  && GET_CODE (XEXP (x, 1)) == NOT)\n+\t{\n+\t  *total = COSTS_N_INSNS (1);\n+\t  if (!REG_P (XEXP (XEXP (x, 0), 0)))\n+\t    *total += 1;\n+\t  if (!REG_P (XEXP (XEXP (x, 1), 0)))\n+\t    *total += 1;\n+\t  return true;\n+\t}\n+\n       /* risbg */\n       if (GET_CODE (XEXP (x, 0)) == AND\n \t  && GET_CODE (XEXP (x, 1)) == ASHIFT\n@@ -3544,19 +3591,33 @@ s390_rtx_costs (rtx x, machine_mode mode, int outer_code,\n \t  *total = COSTS_N_INSNS (1);\n \t  return true;\n \t}\n+\n+      *total = COSTS_N_INSNS (1);\n+      return false;\n+\n+    case AND:\n+      /* nork, nogrk */\n+      if (TARGET_ARCH13\n+\t  && (mode == SImode || mode == DImode)\n+\t  && GET_CODE (XEXP (x, 0)) == NOT\n+\t  && GET_CODE (XEXP (x, 1)) == NOT)\n+\t{\n+\t  *total = COSTS_N_INSNS (1);\n+\t  if (!REG_P (XEXP (XEXP (x, 0), 0)))\n+\t    *total += 1;\n+\t  if (!REG_P (XEXP (XEXP (x, 1), 0)))\n+\t    *total += 1;\n+\t  return true;\n+\t}\n       /* fallthrough */\n     case ASHIFT:\n     case ASHIFTRT:\n     case LSHIFTRT:\n     case ROTATE:\n     case ROTATERT:\n-    case AND:\n     case XOR:\n     case NEG:\n     case NOT:\n-      *total = COSTS_N_INSNS (1);\n-      return false;\n-\n     case PLUS:\n     case MINUS:\n       *total = COSTS_N_INSNS (1);\n@@ -3706,6 +3767,38 @@ s390_rtx_costs (rtx x, machine_mode mode, int outer_code,\n \n     case COMPARE:\n       *total = COSTS_N_INSNS (1);\n+\n+      /* nxrk, nxgrk ~(a^b)==0 */\n+      if (TARGET_ARCH13\n+\t  && GET_CODE (XEXP (x, 0)) == NOT\n+\t  && XEXP (x, 1) == const0_rtx\n+\t  && GET_CODE (XEXP (XEXP (x, 0), 0)) == XOR\n+\t  && (GET_MODE (XEXP (x, 0)) == SImode || GET_MODE (XEXP (x, 0)) == DImode)\n+\t  && mode == CCZmode)\n+\t{\n+\t  if (!REG_P (XEXP (XEXP (XEXP (x, 0), 0), 0)))\n+\t    *total += 1;\n+\t  if (!REG_P (XEXP (XEXP (XEXP (x, 0), 0), 1)))\n+\t    *total += 1;\n+\t  return true;\n+\t}\n+\n+      /* nnrk, nngrk, nork, nogrk */\n+      if (TARGET_ARCH13\n+\t  && (GET_CODE (XEXP (x, 0)) == AND || GET_CODE (XEXP (x, 0)) == IOR)\n+\t  && XEXP (x, 1) == const0_rtx\n+\t  && (GET_MODE (XEXP (x, 0)) == SImode || GET_MODE (XEXP (x, 0)) == DImode)\n+\t  && GET_CODE (XEXP (XEXP (x, 0), 0)) == NOT\n+\t  && GET_CODE (XEXP (XEXP (x, 0), 1)) == NOT\n+\t  && mode == CCZmode)\n+\t{\n+\t  if (!REG_P (XEXP (XEXP (XEXP (x, 0), 0), 0)))\n+\t    *total += 1;\n+\t  if (!REG_P (XEXP (XEXP (XEXP (x, 0), 1), 0)))\n+\t    *total += 1;\n+\t  return true;\n+\t}\n+\n       if (GET_CODE (XEXP (x, 0)) == AND\n \t  && GET_CODE (XEXP (x, 1)) == CONST_INT\n \t  && GET_CODE (XEXP (XEXP (x, 0), 1)) == CONST_INT)"}, {"sha": "d635f849f18517d108bfdb30e2c7435d6b25c30f", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 128, "deletions": 1, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a9733f3dfbd016103a30151a9656ffb63dce6e4/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a9733f3dfbd016103a30151a9656ffb63dce6e4/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=4a9733f3dfbd016103a30151a9656ffb63dce6e4", "patch": "@@ -669,6 +669,12 @@\n ;; This iterator allows r[ox]sbg to be defined with the same template\n (define_code_iterator IXOR [ior xor])\n \n+;; This is used for merging the nand/nor and and/or with complement patterns\n+(define_code_iterator ANDOR [and ior])\n+(define_code_attr bitops_name [(and \"and\") (ior \"or\")])\n+(define_code_attr inv_bitops_name [(and \"or\") (ior \"and\")])\n+(define_code_attr inv_no [(and \"o\") (ior \"n\")])\n+\n ;; This iterator is used to expand the patterns for the nearest\n ;; integer functions.\n (define_int_iterator FPINT [UNSPEC_FPINT_FLOOR UNSPEC_FPINT_BTRUNC\n@@ -7534,7 +7540,8 @@\n \t(and:GPR (not:GPR (match_operand:GPR 1 \"nonimmediate_operand\" \"\"))\n \t\t (match_operand:GPR 2 \"general_operand\" \"\")))\n    (clobber (reg:CC CC_REGNUM))]\n-  \"! reload_completed\n+  \"!TARGET_ARCH13\n+   && ! reload_completed\n    && (GET_CODE (operands[0]) != MEM\n       /* Ensure that s390_logical_operator_ok_p will succeed even\n \t on the split xor if (b & a) is stored into a pseudo.  */\n@@ -7876,6 +7883,87 @@\n   [(set_attr \"op_type\"  \"RR,SI,SS\")\n    (set_attr \"z10prop\" \"z10_super_E1,z10_super,*\")])\n \n+;\n+; And/Or with complement\n+;\n+\n+; ncrk, ncgrk, ocrk, ocgrk\n+(define_insn \"*<ANDOR:bitops_name>c<GPR:mode>_cc\"\n+  [(set (reg CC_REGNUM)\n+\t(compare\n+\t (ANDOR:GPR (not:GPR (match_operand:GPR 1 \"register_operand\" \"d\"))\n+\t\t    (match_operand:GPR 2 \"register_operand\" \"d\"))\n+\t (const_int 0)))\n+   (set (match_operand:GPR 0 \"register_operand\" \"=d\")\n+\t(ANDOR:GPR (not:GPR (match_dup 1))\n+\t\t   (match_dup 2)))]\n+  \"TARGET_ARCH13 && s390_match_ccmode(insn, CCTmode)\"\n+  \"<ANDOR:noxa>c<GPR:g>rk\\t%0,%2,%1\"\n+  [(set_attr \"op_type\" \"RRF\")])\n+\n+; ncrk, ncgrk, ocrk, ocgrk\n+(define_insn \"*<ANDOR:bitops_name>c<GPR:mode>_cconly\"\n+  [(set (reg CC_REGNUM)\n+\t(compare\n+\t (ANDOR:GPR (not:GPR (match_operand:GPR 1 \"register_operand\" \"d\"))\n+\t\t    (match_operand:GPR 2 \"register_operand\" \"d\"))\n+\t (const_int 0)))\n+   (clobber (match_scratch:GPR 0 \"=d\"))]\n+  \"TARGET_ARCH13 && s390_match_ccmode(insn, CCTmode)\"\n+  \"<ANDOR:noxa>c<GPR:g>rk\\t%0,%2,%1\"\n+  [(set_attr \"op_type\" \"RRF\")])\n+\n+; ncrk, ncgrk, ocrk, ocgrk\n+(define_insn \"*<ANDOR:bitops_name>c<GPR:mode>\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n+\t(ANDOR:GPR (not:GPR (match_operand:GPR 1 \"register_operand\" \"d\"))\n+\t\t   (match_operand:GPR 2 \"register_operand\" \"d\")))\n+   (clobber (reg:CC CC_REGNUM))]\n+  \"TARGET_ARCH13\"\n+  \"<ANDOR:noxa>c<GPR:g>rk\\t%0,%2,%1\"\n+  [(set_attr \"op_type\" \"RRF\")])\n+\n+;\n+;- Nand/Nor instructions.\n+;\n+\n+; nnrk, nngrk, nork, nogrk\n+(define_insn \"*n<ANDOR:inv_bitops_name><GPR:mode>_cc\"\n+  [(set (reg CC_REGNUM)\n+\t(compare\n+\t (ANDOR:GPR (not:GPR (match_operand:GPR 1 \"register_operand\" \"d\"))\n+\t\t    (not:GPR (match_operand:GPR 2 \"register_operand\" \"d\")))\n+\t (const_int 0)))\n+   (set (match_operand:GPR 0 \"register_operand\" \"=d\")\n+\t(ANDOR:GPR (not:GPR (match_dup 1))\n+\t\t   (not:GPR (match_dup 2))))]\n+  \"TARGET_ARCH13 && s390_match_ccmode(insn, CCTmode)\"\n+  \"n<ANDOR:inv_no><GPR:g>rk\\t%0,%1,%2\"\n+  [(set_attr \"op_type\" \"RRF\")])\n+\n+; nnrk, nngrk, nork, nogrk\n+(define_insn \"*n<ANDOR:inv_bitops_name><mode>_cconly\"\n+  [(set (reg CC_REGNUM)\n+\t(compare\n+\t (ANDOR:GPR (not:GPR (match_operand:GPR 1 \"register_operand\" \"d\"))\n+\t\t    (not:GPR (match_operand:GPR 2 \"register_operand\" \"d\")))\n+\t (const_int 0)))\n+   (clobber (match_scratch:GPR 0 \"=d\"))]\n+  \"TARGET_ARCH13 && s390_match_ccmode(insn, CCTmode)\"\n+  \"n<ANDOR:inv_no><GPR:g>rk\\t%0,%1,%2\"\n+  [(set_attr \"op_type\" \"RRF\")])\n+\n+; nnrk, nngrk, nork, nogrk\n+(define_insn \"*n<ANDOR:inv_bitops_name><mode>\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n+\t(ANDOR:GPR (not:GPR (match_operand:GPR 1 \"register_operand\" \"d\"))\n+\t\t   (not:GPR (match_operand:GPR 2 \"register_operand\" \"d\"))))\n+   (clobber (reg:CC CC_REGNUM))]\n+  \"TARGET_ARCH13\"\n+  \"n<ANDOR:inv_no><GPR:g>rk\\t%0,%1,%2\"\n+  [(set_attr \"op_type\" \"RRF\")])\n+\n+\n ;\n ; Block inclusive or (OC) patterns.\n ;\n@@ -8241,6 +8329,45 @@\n   \"operands[4] = gen_rtx_MEM (BLKmode, XEXP (operands[0], 0));\n    operands[5] = GEN_INT (INTVAL (operands[1]) + INTVAL (operands[3]));\")\n \n+;\n+;- Nxor instructions.\n+;\n+\n+; nxrk, nxgrk\n+(define_insn \"*nxor<GPR:mode>_cc\"\n+  [(set (reg CC_REGNUM)\n+\t(compare\n+\t (not:GPR (xor:GPR (match_operand:GPR 1 \"register_operand\" \"d\")\n+\t\t\t   (match_operand:GPR 2 \"register_operand\" \"d\")))\n+\t (const_int 0)))\n+   (set (match_operand:GPR 0 \"register_operand\" \"=d\")\n+\t(xor:GPR (not:GPR (match_dup 1))\n+\t\t    (match_dup 2)))]\n+  \"TARGET_ARCH13 && s390_match_ccmode(insn, CCTmode)\"\n+  \"nx<GPR:g>rk\\t%0,%1,%2\"\n+  [(set_attr \"op_type\" \"RRF\")])\n+\n+; nxrk, nxgrk\n+(define_insn \"*nxor<mode>_cconly\"\n+  [(set (reg CC_REGNUM)\n+\t(compare\n+\t (not:GPR (xor:GPR (match_operand:GPR 1 \"register_operand\" \"d\")\n+\t\t\t   (match_operand:GPR 2 \"register_operand\" \"d\")))\n+\t (const_int 0)))\n+   (clobber (match_scratch:GPR 0 \"=d\"))]\n+  \"TARGET_ARCH13 && s390_match_ccmode(insn, CCTmode)\"\n+  \"nx<GPR:g>rk\\t%0,%1,%2\"\n+  [(set_attr \"op_type\" \"RRF\")])\n+\n+; nxrk, nxgrk\n+(define_insn \"*nxor<mode>\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n+\t(not:GPR (xor:GPR (match_operand:GPR 1 \"register_operand\" \"d\")\n+\t\t\t  (match_operand:GPR 2 \"register_operand\" \"d\"))))\n+   (clobber (reg:CC CC_REGNUM))]\n+  \"TARGET_ARCH13\"\n+  \"nx<GPR:g>rk\\t%0,%1,%2\"\n+  [(set_attr \"op_type\" \"RRF\")])\n \n ;;\n ;;- Negate instructions."}, {"sha": "f7f1883c1fec64d56cb304bf689980837c5f48c0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a9733f3dfbd016103a30151a9656ffb63dce6e4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a9733f3dfbd016103a30151a9656ffb63dce6e4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4a9733f3dfbd016103a30151a9656ffb63dce6e4", "patch": "@@ -1,3 +1,11 @@\n+2019-04-02  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\t* gcc.target/s390/arch13/bitops-1.c: New test.\n+\t* gcc.target/s390/arch13/bitops-2.c: New test.\n+\t* gcc.target/s390/md/andc-splitter-1.c: Add -march=z14 build\n+\toption and adjust line numbers.\n+\t* gcc.target/s390/md/andc-splitter-2.c: Likewise.\n+\n 2019-04-02  Andreas Krebbel  <krebbel@linux.ibm.com>\n \n \t* gcc.target/s390/s390.exp: Run tests in arch13 subdir."}, {"sha": "fd49fb97630d914a5abfaa645871f3a14d8a6ec1", "filename": "gcc/testsuite/gcc.target/s390/arch13/bitops-1.c", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a9733f3dfbd016103a30151a9656ffb63dce6e4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Farch13%2Fbitops-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a9733f3dfbd016103a30151a9656ffb63dce6e4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Farch13%2Fbitops-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Farch13%2Fbitops-1.c?ref=4a9733f3dfbd016103a30151a9656ffb63dce6e4", "patch": "@@ -0,0 +1,91 @@\n+/* { dg-compile } */\n+\n+/* and with complement */\n+\n+int\n+ncrk (int a, int b)\n+{\n+  return a & ~b;\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\tncrk\\t\" 1 } } */\n+\n+long long\n+ncgrk (long long a, long long b)\n+{\n+  return a & ~b;\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\tncgrk\\t\" 1 } } */\n+\n+/* or with complement */\n+\n+int\n+ocrk (int a, int b)\n+{\n+  return a | ~b;\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\tocrk\\t\" 1 } } */\n+\n+long long\n+ocgrk (long long a, long long b)\n+{\n+  return a | ~b;\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\tocgrk\\t\" 1 } } */\n+\n+/* nand */\n+\n+int\n+nnrk (int a, int b)\n+{\n+  return ~(a & b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\tnnrk\\t\" 1 } } */\n+\n+long long\n+nngrk (long long a, long long b)\n+{\n+  return ~(a & b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\tnngrk\\t\" 1 } } */\n+\n+/* nor */\n+\n+int\n+nork (int a, int b)\n+{\n+  return ~(a | b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\tnork\\t\" 1 } } */\n+\n+long long\n+nogrk (long long a, long long b)\n+{\n+  return ~(a | b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\tnogrk\\t\" 1 } } */\n+\n+/* nxor */\n+\n+int\n+nxrk (int a, int b)\n+{\n+  return ~(a ^ b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\tnxrk\\t\" 1 } } */\n+\n+long long\n+nxgrk (long long a, long long b)\n+{\n+  return ~(a ^ b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\tnxgrk\\t\" 1 } } */"}, {"sha": "fde96034c55aa657d5cb7cfd7556360889f76547", "filename": "gcc/testsuite/gcc.target/s390/arch13/bitops-2.c", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a9733f3dfbd016103a30151a9656ffb63dce6e4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Farch13%2Fbitops-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a9733f3dfbd016103a30151a9656ffb63dce6e4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Farch13%2Fbitops-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Farch13%2Fbitops-2.c?ref=4a9733f3dfbd016103a30151a9656ffb63dce6e4", "patch": "@@ -0,0 +1,93 @@\n+/* { dg-compile } */\n+\n+/* Check if the instruction are being used also for compares.  */\n+\n+/* and with complement */\n+\n+int\n+ncrk (int a, int b)\n+{\n+  return (a & ~b) ? 23 : 42;\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\tncrk\\t\" 1 } } */\n+\n+int\n+ncgrk (long long a, long long b)\n+{\n+  return (a & ~b) ? 23 : 42;\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\tncgrk\\t\" 1 } } */\n+\n+/* or with complement */\n+\n+int\n+ocrk (int a, int b)\n+{\n+  return (a | ~b) ? 23 : 42;\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\tocrk\\t\" 1 } } */\n+\n+int\n+ocgrk (long long a, long long b)\n+{\n+  return (a | ~b) ? 23 : 42;\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\tocgrk\\t\" 1 } } */\n+\n+/* nand */\n+\n+int\n+nnrk (int a, int b)\n+{\n+  return ~(a & b) ? 23 : 42;\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\tnnrk\\t\" 1 } } */\n+\n+int\n+nngrk (long long a, long long b)\n+{\n+  return ~(a & b) ? 23 : 42;\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\tnngrk\\t\" 1 } } */\n+\n+/* nor */\n+\n+int\n+nork (int a, int b)\n+{\n+  return ~(a | b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\tnork\\t\" 1 } } */\n+\n+int\n+nogrk (long long a, long long b)\n+{\n+  return ~(a | b) ? 23 : 42;\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\tnogrk\\t\" 1 } } */\n+\n+/* nxor */\n+\n+int\n+nxrk (int a, int b)\n+{\n+  return ~(a ^ b) ? 23 : 42;\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\tnxrk\\t\" 1 } } */\n+\n+int\n+nxgrk (long long a, long long b)\n+{\n+  return ~(a ^ b) ? 23 : 42;\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\tnxgrk\\t\" 1 } } */"}, {"sha": "f4e28f6218733b062ae93adaffe436229828ecc9", "filename": "gcc/testsuite/gcc.target/s390/md/andc-splitter-1.c", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a9733f3dfbd016103a30151a9656ffb63dce6e4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fmd%2Fandc-splitter-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a9733f3dfbd016103a30151a9656ffb63dce6e4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fmd%2Fandc-splitter-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fmd%2Fandc-splitter-1.c?ref=4a9733f3dfbd016103a30151a9656ffb63dce6e4", "patch": "@@ -1,7 +1,9 @@\n /* Machine description pattern tests.  */\n \n /* { dg-do compile { target { lp64 } } } */\n-/* { dg-options \"-mzarch -save-temps -dP\" } */\n+/* Starting with arch13 the and with complement instruction is\n+   available and the splitter is disabled.  */\n+/* { dg-options \"-march=z14 -mzarch -save-temps -dP\" } */\n /* { dg-do run { target { lp64 && s390_useable_hw } } } */\n /* Skip test if -O0 is present on the command line:\n \n@@ -14,26 +16,26 @@\n __attribute__ ((noinline))\n unsigned long andc_vv(unsigned long a, unsigned long b)\n { return ~b & a; }\n-/* { dg-final { scan-assembler \":16:.\\* \\{\\\\*anddi3\\}\" } } */\n-/* { dg-final { scan-assembler \":16:.\\* \\{\\\\*xordi3\\}\" } } */\n+/* { dg-final { scan-assembler \":18:.\\* \\{\\\\*anddi3\\}\" } } */\n+/* { dg-final { scan-assembler \":18:.\\* \\{\\\\*xordi3\\}\" } } */\n \n __attribute__ ((noinline))\n unsigned long andc_pv(unsigned long *a, unsigned long b)\n { return ~b & *a; }\n-/* { dg-final { scan-assembler \":22:.\\* \\{\\\\*anddi3\\}\" } } */\n-/* { dg-final { scan-assembler \":22:.\\* \\{\\\\*xordi3\\}\" } } */\n+/* { dg-final { scan-assembler \":24:.\\* \\{\\\\*anddi3\\}\" } } */\n+/* { dg-final { scan-assembler \":24:.\\* \\{\\\\*xordi3\\}\" } } */\n \n __attribute__ ((noinline))\n unsigned long andc_vp(unsigned long a, unsigned long *b)\n { return ~*b & a; }\n-/* { dg-final { scan-assembler \":28:.\\* \\{\\\\*anddi3\\}\" } } */\n-/* { dg-final { scan-assembler \":28:.\\* \\{\\\\*xordi3\\}\" } } */\n+/* { dg-final { scan-assembler \":30:.\\* \\{\\\\*anddi3\\}\" } } */\n+/* { dg-final { scan-assembler \":30:.\\* \\{\\\\*xordi3\\}\" } } */\n \n __attribute__ ((noinline))\n unsigned long andc_pp(unsigned long *a, unsigned long *b)\n { return ~*b & *a; }\n-/* { dg-final { scan-assembler \":34:.\\* \\{\\\\*anddi3\\}\" } } */\n-/* { dg-final { scan-assembler \":34:.\\* \\{\\\\*xordi3\\}\" } } */\n+/* { dg-final { scan-assembler \":36:.\\* \\{\\\\*anddi3\\}\" } } */\n+/* { dg-final { scan-assembler \":36:.\\* \\{\\\\*xordi3\\}\" } } */\n \n /* { dg-final { scan-assembler-times \"\\tngr\\?k\\?\\t\" 4 } } */\n /* { dg-final { scan-assembler-times \"\\txgr\\?\\t\" 4 } } */"}, {"sha": "03df7b214db11e58d58f96078d041724fe1d8d58", "filename": "gcc/testsuite/gcc.target/s390/md/andc-splitter-2.c", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a9733f3dfbd016103a30151a9656ffb63dce6e4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fmd%2Fandc-splitter-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a9733f3dfbd016103a30151a9656ffb63dce6e4/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fmd%2Fandc-splitter-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fmd%2Fandc-splitter-2.c?ref=4a9733f3dfbd016103a30151a9656ffb63dce6e4", "patch": "@@ -1,7 +1,9 @@\n /* Machine description pattern tests.  */\n \n /* { dg-do compile } */\n-/* { dg-options \"-save-temps -dP\" } */\n+/* Starting with arch13 the and with complement instruction is\n+   available and the splitter is disabled.  */\n+/* { dg-options \"-march=z14 -save-temps -dP\" } */\n /* { dg-do run { target { s390_useable_hw } } } */\n /* Skip test if -O0 is present on the command line:\n \n@@ -14,26 +16,26 @@\n __attribute__ ((noinline))\n unsigned int andc_vv(unsigned int a, unsigned int b)\n { return ~b & a; }\n-/* { dg-final { scan-assembler \":16:.\\* \\{\\\\*andsi3_\\(esa\\|zarch\\)\\}\" } } */\n-/* { dg-final { scan-assembler \":16:.\\* \\{\\\\*xorsi3\\}\" } } */\n+/* { dg-final { scan-assembler \":18:.\\* \\{\\\\*andsi3_\\(esa\\|zarch\\)\\}\" } } */\n+/* { dg-final { scan-assembler \":18:.\\* \\{\\\\*xorsi3\\}\" } } */\n \n __attribute__ ((noinline))\n unsigned int andc_pv(unsigned int *a, unsigned int b)\n { return ~b & *a; }\n-/* { dg-final { scan-assembler \":22:.\\* \\{\\\\*andsi3_\\(esa\\|zarch\\)\\}\" } } */\n-/* { dg-final { scan-assembler \":22:.\\* \\{\\\\*xorsi3\\}\" } } */\n+/* { dg-final { scan-assembler \":24:.\\* \\{\\\\*andsi3_\\(esa\\|zarch\\)\\}\" } } */\n+/* { dg-final { scan-assembler \":24:.\\* \\{\\\\*xorsi3\\}\" } } */\n \n __attribute__ ((noinline))\n unsigned int andc_vp(unsigned int a, unsigned int *b)\n { return ~*b & a; }\n-/* { dg-final { scan-assembler \":28:.\\* \\{\\\\*andsi3_\\(esa\\|zarch\\)\\}\" } } */\n-/* { dg-final { scan-assembler \":28:.\\* \\{\\\\*xorsi3\\}\" } } */\n+/* { dg-final { scan-assembler \":30:.\\* \\{\\\\*andsi3_\\(esa\\|zarch\\)\\}\" } } */\n+/* { dg-final { scan-assembler \":30:.\\* \\{\\\\*xorsi3\\}\" } } */\n \n __attribute__ ((noinline))\n unsigned int andc_pp(unsigned int *a, unsigned int *b)\n { return ~*b & *a; }\n-/* { dg-final { scan-assembler \":34:.\\* \\{\\\\*andsi3_\\(esa\\|zarch\\)\\}\" } } */\n-/* { dg-final { scan-assembler \":34:.\\* \\{\\\\*xorsi3\\}\" } } */\n+/* { dg-final { scan-assembler \":36:.\\* \\{\\\\*andsi3_\\(esa\\|zarch\\)\\}\" } } */\n+/* { dg-final { scan-assembler \":36:.\\* \\{\\\\*xorsi3\\}\" } } */\n \n /* { dg-final { scan-assembler-times \"\\tnr\\?k\\?\\t\" 4 } } */\n /* { dg-final { scan-assembler-times \"\\txr\\?k\\?\\t\" 4 } } */"}]}