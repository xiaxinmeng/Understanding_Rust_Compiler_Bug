{"sha": "382a1351344a6e17e834104705fb56434d8f649a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzgyYTEzNTEzNDRhNmUxN2U4MzQxMDQ3MDVmYjU2NDM0ZDhmNjQ5YQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2006-10-03T14:26:14Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2006-10-03T14:26:14Z"}, "message": "native_pq_tag.hpp: Remove.\n\n2006-10-03  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* testsuite/util/native_type/priority_queue/native_pq_tag.hpp: Remove.\n\t* testsuite/util/statistic/sample_var.hpp: Rename to...\n\t* testsuite/util/statistic/sample_variance.hpp: ... this.\n\t* testsuite/util/statistic/res_recorder.hpp: Rename to...\n\t* testsuite/util/statistic/result_recorder.hpp: ... this.\n\t* testsuite/util/statistic/sample_mean.hpp: Format.\n\t* testsuite/util/statistic/sample_mean_confidence_checker.hpp: Same.\n\t* testsuite/util/regression/trait/priority_queue/trait.hpp: Same.\n\t* testsuite/util/regression/trait/erase_if_fn.hpp: Same.\n\t* testsuite/util/regression/trait/assoc/trait.hpp: Same.\n\t* testsuite/util/native_type/priority_queue/\n\tnative_priority_queue.hpp: Same.\n\t* testsuite/util/native_type/assoc/native_tree_tag.hpp: Same.\n\t* testsuite/util/native_type/assoc/native_hash_tag.hpp: Same.\n\t* testsuite/util/native_type/assoc/native_hash_map.hpp: Same.\n\t* testsuite/util/performance/priority_queue/timing/join_test.hpp: Same.\n\t* testsuite/util/performance/priority_queue/timing/\n\tmodify_test.hpp: Same.\n\t* testsuite/util/performance/assoc/timing/\n\tsubscript_insert_test.hpp: Same.\n\t* testsuite/util/performance/time/timing_test_base.hpp: Same.\n\nFrom-SVN: r117397", "tree": {"sha": "a68073ec26c09be20eb5bb3e4fe2c4d7f5e263fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a68073ec26c09be20eb5bb3e4fe2c4d7f5e263fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/382a1351344a6e17e834104705fb56434d8f649a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/382a1351344a6e17e834104705fb56434d8f649a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/382a1351344a6e17e834104705fb56434d8f649a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/382a1351344a6e17e834104705fb56434d8f649a/comments", "author": null, "committer": null, "parents": [{"sha": "c55cebdacd10021e43ba2b6ca8c6e65c105bb859", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c55cebdacd10021e43ba2b6ca8c6e65c105bb859", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c55cebdacd10021e43ba2b6ca8c6e65c105bb859"}], "stats": {"total": 597, "additions": 184, "deletions": 413}, "files": [{"sha": "52f6cbdd349a8f21f434af59e3c0dfb0ac048925", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/382a1351344a6e17e834104705fb56434d8f649a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/382a1351344a6e17e834104705fb56434d8f649a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=382a1351344a6e17e834104705fb56434d8f649a", "patch": "@@ -1,3 +1,27 @@\n+2006-10-03  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* testsuite/util/native_type/priority_queue/native_pq_tag.hpp: Remove.\n+\t* testsuite/util/statistic/sample_var.hpp: Rename to...\n+\t* testsuite/util/statistic/sample_variance.hpp: ... this.\n+\t* testsuite/util/statistic/res_recorder.hpp: Rename to...\n+\t* testsuite/util/statistic/result_recorder.hpp: ... this.\n+\t* testsuite/util/statistic/sample_mean.hpp: Format.\n+\t* testsuite/util/statistic/sample_mean_confidence_checker.hpp: Same.\n+\t* testsuite/util/regression/trait/priority_queue/trait.hpp: Same.\n+\t* testsuite/util/regression/trait/erase_if_fn.hpp: Same.\n+\t* testsuite/util/regression/trait/assoc/trait.hpp: Same.\n+\t* testsuite/util/native_type/priority_queue/\n+\tnative_priority_queue.hpp: Same.\n+\t* testsuite/util/native_type/assoc/native_tree_tag.hpp: Same.\n+\t* testsuite/util/native_type/assoc/native_hash_tag.hpp: Same.\n+\t* testsuite/util/native_type/assoc/native_hash_map.hpp: Same.\n+\t* testsuite/util/performance/priority_queue/timing/join_test.hpp: Same.\n+\t* testsuite/util/performance/priority_queue/timing/\n+\tmodify_test.hpp: Same.\n+\t* testsuite/util/performance/assoc/timing/\n+\tsubscript_insert_test.hpp: Same.\n+\t* testsuite/util/performance/time/timing_test_base.hpp: Same.\n+\n 2006-10-02  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/ext/rc_string_base.h (_M_compare<wchar_t>):"}, {"sha": "d6eb835c483b281b2de5449178d6a787ef4233a2", "filename": "libstdc++-v3/testsuite/util/native_type/assoc/native_hash_map.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/382a1351344a6e17e834104705fb56434d8f649a/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fnative_type%2Fassoc%2Fnative_hash_map.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/382a1351344a6e17e834104705fb56434d8f649a/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fnative_type%2Fassoc%2Fnative_hash_map.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fnative_type%2Fassoc%2Fnative_hash_map.hpp?ref=382a1351344a6e17e834104705fb56434d8f649a", "patch": "@@ -134,5 +134,5 @@ namespace pb_ds\n   } // namespace test\n } // namespace pb_ds\n \n-#endif // #ifndef PB_DS_NATIVE_HASH_MAP_HPP\n+#endif \n "}, {"sha": "d4a19c2bda165e9957fd6aa7b017ebb73e77f430", "filename": "libstdc++-v3/testsuite/util/native_type/assoc/native_hash_tag.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/382a1351344a6e17e834104705fb56434d8f649a/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fnative_type%2Fassoc%2Fnative_hash_tag.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/382a1351344a6e17e834104705fb56434d8f649a/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fnative_type%2Fassoc%2Fnative_hash_tag.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fnative_type%2Fassoc%2Fnative_hash_tag.hpp?ref=382a1351344a6e17e834104705fb56434d8f649a", "patch": "@@ -55,4 +55,4 @@ namespace pb_ds\n   } // namespace test\n } // namespace pb_ds\n \n-#endif // #ifndef PB_DS_NATIVE_HASH_DS_TAG_HPP\n+#endif "}, {"sha": "e8f8e705fb6beb78b5ffba4b7898bcf7c9c1bf7e", "filename": "libstdc++-v3/testsuite/util/native_type/assoc/native_tree_tag.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/382a1351344a6e17e834104705fb56434d8f649a/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fnative_type%2Fassoc%2Fnative_tree_tag.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/382a1351344a6e17e834104705fb56434d8f649a/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fnative_type%2Fassoc%2Fnative_tree_tag.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fnative_type%2Fassoc%2Fnative_tree_tag.hpp?ref=382a1351344a6e17e834104705fb56434d8f649a", "patch": "@@ -56,4 +56,4 @@ namespace pb_ds\n   } // namespace test\n } // namespace pb_ds\n \n-#endif // #ifndef PB_DS_NATIVE_TREE_DS_TAG_HPP\n+#endif "}, {"sha": "8b0357c99d5b5ec814eef611c4afaeb08f62b042", "filename": "libstdc++-v3/testsuite/util/native_type/priority_queue/native_pq_tag.hpp", "status": "removed", "additions": 0, "deletions": 63, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c55cebdacd10021e43ba2b6ca8c6e65c105bb859/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fnative_type%2Fpriority_queue%2Fnative_pq_tag.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c55cebdacd10021e43ba2b6ca8c6e65c105bb859/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fnative_type%2Fpriority_queue%2Fnative_pq_tag.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fnative_type%2Fpriority_queue%2Fnative_pq_tag.hpp?ref=c55cebdacd10021e43ba2b6ca8c6e65c105bb859", "patch": "@@ -1,63 +0,0 @@\n-// -*- C++ -*-\n-\n-// Copyright (C) 2005, 2006 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the terms\n-// of the GNU General Public License as published by the Free Software\n-// Foundation; either version 2, or (at your option) any later\n-// version.\n-\n-// This library is distributed in the hope that it will be useful, but\n-// WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-// General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License\n-// along with this library; see the file COPYING.  If not, write to\n-// the Free Software Foundation, 59 Temple Place - Suite 330, Boston,\n-// MA 02111-1307, USA.\n-\n-// As a special exception, you may use this file as part of a free\n-// software library without restriction.  Specifically, if other files\n-// instantiate templates or use macros or inline functions from this\n-// file, or you compile this file and link it with other files to\n-// produce an executable, this file does not by itself cause the\n-// resulting executable to be covered by the GNU General Public\n-// License.  This exception does not however invalidate any other\n-// reasons why the executable file might be covered by the GNU General\n-// Public License.\n-\n-// Copyright (C) 2004 Ami Tavory and Vladimir Dreizin, IBM-HRL.\n-\n-// Permission to use, copy, modify, sell, and distribute this software\n-// is hereby granted without fee, provided that the above copyright\n-// notice appears in all copies, and that both that copyright notice\n-// and this permission notice appear in supporting documentation. None\n-// of the above authors, nor IBM Haifa Research Laboratories, make any\n-// representation about the suitability of this software for any\n-// purpose. It is provided \"as is\" without express or implied\n-// warranty.\n-\n-/**\n- * @file native_tree_tag.hpp\n- * Contains a tag for native tree-based containers\n- */\n-\n-#ifndef PB_DS_NATIVE_PQ_DS_TAG_HPP\n-#define PB_DS_NATIVE_PQ_DS_TAG_HPP\n-\n-namespace pb_ds\n-{\n-\n-  namespace test\n-  {\n-\n-    struct native_pq_tag\n-    { };\n-\n-  } // namespace test\n-\n-} // namespace pb_ds\n-\n-#endif // #ifndef PB_DS_NATIVE_PQ_DS_TAG_HPP"}, {"sha": "88b2697c4bd19b9d77f704f9b9b22ae6438de017", "filename": "libstdc++-v3/testsuite/util/native_type/priority_queue/native_priority_queue.hpp", "status": "modified", "additions": 36, "deletions": 82, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/382a1351344a6e17e834104705fb56434d8f649a/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fnative_type%2Fpriority_queue%2Fnative_priority_queue.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/382a1351344a6e17e834104705fb56434d8f649a/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fnative_type%2Fpriority_queue%2Fnative_priority_queue.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fnative_type%2Fpriority_queue%2Fnative_priority_queue.hpp?ref=382a1351344a6e17e834104705fb56434d8f649a", "patch": "@@ -47,87 +47,66 @@\n #ifndef PB_DS_NATIVE_PRIORITY_QUEUE_HPP\n #define PB_DS_NATIVE_PRIORITY_QUEUE_HPP\n \n-#include <ext/pb_ds/detail/standard_policies.hpp>\n-#include <ext/pb_ds/detail/type_utils.hpp>\n-#include <native_type/priority_queue/native_pq_tag.hpp>\n-#include <io/xml.hpp>\n #include <string>\n #include <vector>\n #include <queue>\n #include <deque>\n+#include <ext/pb_ds/detail/standard_policies.hpp>\n+#include <ext/pb_ds/detail/type_utils.hpp>\n+#include <io/xml.hpp>\n \n namespace pb_ds\n {\n-\n   namespace test\n   {\n-\n     namespace detail\n     {\n-\n-      template<typename Value_Type, bool Vector, class Allocator>\n+      template<typename Value_Type, bool Vector, typename Allocator>\n       struct base_seq\n       {\n-\ttypedef\n-        std::vector<\n-\t  Value_Type,\n-\t  typename Allocator::template rebind<\n-\t  Value_Type>::other>\n-        type;\n+      private:\n+\ttypedef typename Allocator::template rebind<Value_Type> value_rebind;\n+\n+      public:\n+\ttypedef std::vector<Value_Type, typename value_rebind::other> type;\n       };\n \n-      template<typename Value_Type, class Allocator>\n-      struct base_seq<\n-\tValue_Type,\n-\tfalse,\n-\tAllocator>\n+      template<typename Value_Type, typename Allocator>\n+      struct base_seq<Value_Type, false, Allocator>\n       {\n-\ttypedef\n-        std::deque<\n-\t  Value_Type,\n-\t  typename Allocator::template rebind<\n-\t  Value_Type>::other>\n-        type;\n-      };\n+      private:\n+\ttypedef typename Allocator::template rebind<Value_Type> value_rebind;\n \n+      public:\n+\ttypedef std::deque<Value_Type, typename value_rebind::other> type;\n+      };\n     } // namespace detail\n \n-#define PB_DS_CLASS_C_DEC\t\t\t\t\t\\\n-    native_priority_queue<\t\t\t\t\t\\\n-\t\t\t\t\t\tValue_Type,\t\\\n-\t\t\t\t\t\tVector,\t\t\\\n-\t\t\t\t\t\tCmp_Fn,\t\t\\\n-\t\t\t\t\t\tAllocator>\n+    struct native_pq_tag\n+    { };\n+\n+#define PB_DS_CLASS_C_DEC \\\n+    native_priority_queue<Value_Type, Vector, Cmp_Fn, Allocator>\n \n-#define PB_DS_BASE_C_DEC\t\t\t\t\t\t\\\n-    std::priority_queue<\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\tValue_Type, \\\n-\t\t\t\t\t\t\t\t\ttypename detail::base_seq<Value_Type, Vector, Allocator>::type, \\\n-\t\t\t\t\t\t\t\t\tCmp_Fn>\n+#define PB_DS_BASE_C_DEC \\\n+    std::priority_queue<Value_Type, typename detail::base_seq<Value_Type, Vector, Allocator>::type, Cmp_Fn>\n \n     template<typename Value_Type,\n \t     bool Vector,\n-\t     class Cmp_Fn =\n-\t     std::less<Value_Type>,\n-\t     class Allocator = std::allocator<char> >\n+\t     typename Cmp_Fn = std::less<Value_Type>,\n+\t     typename Allocator = std::allocator<char> >\n     class native_priority_queue : public PB_DS_BASE_C_DEC\n     {\n     private:\n       typedef PB_DS_BASE_C_DEC base_type;\n+      typedef typename Allocator::template rebind<Value_Type> value_rebind;\n \n     public:\n       typedef Value_Type value_type;\n-\n-      typedef\n-      typename Allocator::template rebind<\n-\tvalue_type>::other::const_reference\n-      const_reference;\n-\n+      typedef typename value_rebind::other::const_reference const_reference;\n       typedef native_pq_tag container_category;\n-\n       typedef Cmp_Fn cmp_fn;\n \n-    public:\n       native_priority_queue() : base_type()\n       { }\n \n@@ -140,74 +119,61 @@ namespace pb_ds\n       {\n         if (Vector)\n \t  return (\"n_pq_vector\");\n-\n         return (\"n_pq_deque\");\n       }\n \n       static std::string\n       desc()\n       {\n         if (Vector)\n-\t  return (make_xml_tag(                \"type\",  \"value\",  \"std::priority_queue_vector\"));\n-\n-        return (make_xml_tag(            \"type\", \"value\", \"std::priority_queue_deque\"));\n+\t  return make_xml_tag(\"type\", \"value\", \"std::priority_queue_vector\");\n+        return make_xml_tag(\"type\", \"value\", \"std::priority_queue_deque\");\n       }\n \n       void\n       clear()\n-      {\n-\t* static_cast<base_type* >(this) = base_type();\n-      }\n+      { *static_cast<base_type*>(this) = base_type(); }\n \n       void\n       erase(const_reference r_val)\n       {\n         base_type tmp;\n-\n         Cmp_Fn cmp;\n \n         while (cmp(base_type::top(), r_val) || cmp(r_val, base_type::top()))\n \t  {\n             tmp.push(base_type::top());\n-\n             base_type::pop();\n \t  }\n \n         if (!base_type::empty())\n \t  {\n             base_type::pop();\n-\n             while (!base_type::empty())\n \t      {\n                 tmp.push(base_type::top());\n-\n                 base_type::pop();\n \t      }\n \t  }\n-\n-\t* static_cast<base_type* >(this) = tmp;\n+\t*static_cast<base_type* >(this) = tmp;\n       }\n \n       template<typename Pred>\n       size_t\n       erase_if(Pred pred)\n       {\n         base_type tmp;\n-\n         std::size_t ersd = 0;\n-\n         while (!base_type::empty())\n \t  {\n             if (!pred(base_type::top()))\n \t      tmp.push(base_type::top());\n             else\n \t      ++ersd;\n-\n             base_type::pop();\n \t  }\n \n-\t* static_cast<base_type* >(this) = tmp;\n-\n+\t*static_cast<base_type*>(this) = tmp;\n         return ersd;\n       }\n \n@@ -216,65 +182,53 @@ namespace pb_ds\n       split(Pred pred, PB_DS_CLASS_C_DEC& other)\n       {\n         base_type tmp;\n-\n         other.clear();\n-\n         while (!base_type::empty())\n \t  {\n             if (!pred(base_type::top()))\n \t      tmp.push(base_type::top());\n             else\n \t      other.push(base_type::top());\n-\n             base_type::pop();\n \t  }\n-\n-\t* static_cast<base_type* >(this) = tmp;\n+\t*static_cast<base_type*>(this) = tmp;\n       }\n \n       void\n       modify(const_reference r_old, const_reference r_new)\n       {\n         erase(r_old);\n-\n         push(r_new);\n       }\n \n       void\n       join(PB_DS_CLASS_C_DEC& other)\n       {\n         std::vector<value_type> a_tmp;\n-\n         while (!base_type::empty())\n \t  {\n             a_tmp.push_back(base_type::top());\n-\n             base_type::pop();\n \t  }\n \n         while (!other.empty())\n \t  {\n             a_tmp.push_back(other.top());\n-\n             other.pop();\n \t  }\n \n-\t* static_cast<base_type* >(this) = base_type(a_tmp.begin(), a_tmp.end());\n+\t*static_cast<base_type*>(this) = base_type(a_tmp.begin(), a_tmp.end());\n       }\n \n       Cmp_Fn\n       get_cmp_fn() const\n-      {\n-        return Cmp_Fn();\n-      }\n+      { return Cmp_Fn(); }\n     };\n \n #undef PB_DS_BASE_C_DEC\n-\n #undef PB_DS_CLASS_C_DEC\n \n   } // namespace test\n-\n } // namespace pb_ds\n \n-#endif // #ifndef PB_DS_NATIVE_PRIORITY_QUEUE_HPP\n+#endif "}, {"sha": "3b9efb02978a5a07df7f8b8f46c168ce154e701c", "filename": "libstdc++-v3/testsuite/util/performance/assoc/timing/subscript_insert_test.hpp", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/382a1351344a6e17e834104705fb56434d8f649a/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Ftiming%2Fsubscript_insert_test.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/382a1351344a6e17e834104705fb56434d8f649a/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Ftiming%2Fsubscript_insert_test.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Ftiming%2Fsubscript_insert_test.hpp?ref=382a1351344a6e17e834104705fb56434d8f649a", "patch": "@@ -50,7 +50,6 @@\n #include <performance/time/timing_test_base.hpp>\n #include <performance/io/xml_formatter.hpp>\n #include <common_type/assoc/string_form.hpp>\n-#include <statistic/res_recorder.hpp>\n #include <iterator>\n \n namespace pb_ds"}, {"sha": "d04f9041b3c110e15c732241c2d304879fe31a94", "filename": "libstdc++-v3/testsuite/util/performance/priority_queue/timing/join_test.hpp", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/382a1351344a6e17e834104705fb56434d8f649a/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fpriority_queue%2Ftiming%2Fjoin_test.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/382a1351344a6e17e834104705fb56434d8f649a/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fpriority_queue%2Ftiming%2Fjoin_test.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fpriority_queue%2Ftiming%2Fjoin_test.hpp?ref=382a1351344a6e17e834104705fb56434d8f649a", "patch": "@@ -128,6 +128,9 @@ namespace pb_ds\n \tusing pb_ds::test::detail::double_push_functor;\n \tusing pb_ds::test::detail::double_push_join_functor;\n \ttypedef pb_ds::test::detail::timing_test_base base_type;\n+\ttypedef double_push_functor<It, Cntnr> psh_fnct;\n+\ttypedef double_push_join_functor<It, Cntnr> psh_jn_fnct;\n+\n \ttypedef xml_result_set_performance_formatter formatter_type;\n \tformatter_type res(string_form<Cntnr>::name(), \n \t\t\t   string_form<Cntnr>::desc());\n@@ -139,12 +142,12 @@ namespace pb_ds\n \t    It e = m_ins_b;\n \t    std::advance(e, v);\n \n-\t    double_push_functor<It, Cntnr> double_push_fn(b, e);\n-\t    const double double_push_res = base_type::operator()(double_push_fn);\n-\t    double_push_join_functor<It, Cntnr> double_push_join_fn(b, e);\n-\t    const double double_push_join_res = base_type::operator()(double_push_join_fn);\n-\t      \n-\t    const double effective_delta = std::max(double_push_join_res - double_push_res, base_type::min_time_res());\n+\t    psh_fnct double_push_fn(b, e);\n+\t    const double dbl_psh_res = base_type::operator()(double_push_fn);\n+\t    psh_jn_fnct dbl_psh_jn_fn(b, e);\n+\t    const double dbl_psh_jn_res = base_type::operator()(dbl_psh_jn_fn);\n+\t    const double min_res = double(timing_test_base::min_time_res());\n+\t    const double effective_delta = std::max(dbl_psh_jn_res - dbl_psh_res, min_res);\n \t    res.add_res(v, effective_delta / v);\n \t  }\n       }"}, {"sha": "33c7e58bdd16c7dd8ddf0f3a00e2696c19a429ba", "filename": "libstdc++-v3/testsuite/util/performance/priority_queue/timing/modify_test.hpp", "status": "modified", "additions": 40, "deletions": 39, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/382a1351344a6e17e834104705fb56434d8f649a/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fpriority_queue%2Ftiming%2Fmodify_test.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/382a1351344a6e17e834104705fb56434d8f649a/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fpriority_queue%2Ftiming%2Fmodify_test.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fpriority_queue%2Ftiming%2Fmodify_test.hpp?ref=382a1351344a6e17e834104705fb56434d8f649a", "patch": "@@ -59,6 +59,7 @@ namespace pb_ds\n   {\n     namespace detail\n     {\n+      // Primary templates.\n       template<typename It, class Cntnr, class Tag>\n       class push_functor\n       {\n@@ -123,6 +124,7 @@ namespace pb_ds\n \tconst value_type m_mod_val;\n       };\n \n+      // Specializations.\n       template<typename It, class Cntnr>\n       class push_functor<It, Cntnr, pb_ds::binary_heap_tag>\n       {\n@@ -148,6 +150,33 @@ namespace pb_ds\n \tconst It m_ins_it_e;\n       };\n \n+      template<typename It, class Cntnr>\n+      class push_functor<It, Cntnr, pb_ds::test::native_pq_tag>\n+      {\n+      public:\n+        push_functor(It ins_it_b,  It ins_it_e) \n+\t: m_ins_it_b(ins_it_b), m_ins_it_e(ins_it_e)\n+\t{ }\n+\n+\tvoid\n+        operator()(std::size_t resolution)\n+\t{\n+\t  typedef typename Cntnr::const_reference const_reference;\n+\t  for (std::size_t i = 0; i < resolution; ++i)\n+\t    {\n+\t      Cntnr c;\n+\n+\t      for (It ins_it = m_ins_it_b; ins_it != m_ins_it_e; ++ins_it)\n+                c.push(const_reference(ins_it->first));\n+\t    }\n+\t}\n+\n+      private:\n+\tconst It m_ins_it_b;\n+\tconst It m_ins_it_e;\n+      };\n+\n+\n       template<typename It, class Cntnr>\n       class push_modify_functor<It, Cntnr, pb_ds::binary_heap_tag>\n       {\n@@ -190,32 +219,6 @@ namespace pb_ds\n \tconst value_type m_mod_val;\n       };\n \n-      template<typename It, class Cntnr>\n-      class push_functor<It, Cntnr, pb_ds::test::native_pq_tag>\n-      {\n-      public:\n-        push_functor(It ins_it_b,  It ins_it_e) \n-\t: m_ins_it_b(ins_it_b), m_ins_it_e(ins_it_e)\n-\t{ }\n-\n-\tvoid\n-        operator()(std::size_t resolution)\n-\t{\n-\t  typedef typename Cntnr::const_reference const_reference;\n-\t  for (std::size_t i = 0; i < resolution; ++i)\n-\t    {\n-\t      Cntnr c;\n-\n-\t      for (It ins_it = m_ins_it_b; ins_it != m_ins_it_e; ++ins_it)\n-                c.push(const_reference(ins_it->first));\n-\t    }\n-\t}\n-\n-      private:\n-\tconst It m_ins_it_b;\n-\tconst It m_ins_it_e;\n-      };\n-\n       template<typename It, class Cntnr>\n       class push_modify_functor<It, Cntnr, pb_ds::test::native_pq_tag>\n       {\n@@ -291,23 +294,22 @@ namespace pb_ds\n       typedef typename Cntnr::value_type value_type;\n       typedef typename Cntnr::container_category container_category;\n       typedef typename Cntnr::const_reference const_reference;\n-      typedef pb_ds::test::detail::timing_test_base timing_test_base;\n-\n+      typedef detail::timing_test_base timing_test_base;\n+      typedef detail::push_functor<It, Cntnr, container_category> psh_fnct;\n+      typedef detail::push_modify_functor<It, Cntnr, container_category> psh_mod_fnct;\n       typedef xml_result_set_performance_formatter formatter_type;\n       formatter_type res_set_fmt(string_form<Cntnr>::name(),\n \t\t\t\t string_form<Cntnr>::desc());\n \n       for (size_t i = 0; m_ins_vn + i * m_ins_vs < m_ins_vm; ++i)\n \t{\n \t  const size_t v = m_ins_vn + i * m_ins_vs;\n-\t  It  b = m_ins_b;\n+\t  It b = m_ins_b;\n \t  It e = m_ins_b;\n \t  std::advance(e, v);\n \n-\t  pb_ds::test::detail::push_functor<It, Cntnr, container_category>\n-            push_fn( b, e);\n-\n-\t  const double push_res = timing_test_base::operator()(push_fn);\n+\t  psh_fnct psh_fn(b, e);\n+\t  const double psh_res = timing_test_base::operator()(psh_fn);\n \n \t  value_type val = b->first;\n \t  {\n@@ -320,13 +322,12 @@ namespace pb_ds\n \t      }\n \t  }\n \n-\t  pb_ds::test::detail::push_modify_functor<It, Cntnr, container_category>\n-            push_modify_fn(b, e, val);\n-\n-\t  const double push_modify_res = timing_test_base::operator()(push_modify_fn);\n+\t  psh_mod_fnct psh_mod_fn(b, e, val);\n+\t  const double psh_mod_res = timing_test_base::operator()(psh_mod_fn);\n \n-\t  const double effective_delta = std::max(push_modify_res - push_res,\n-\t\t\t\t\t     timing_test_base::min_time_res());\n+\t  const double min_res = double(timing_test_base::min_time_res());\n+\t  const double effective_delta = std::max(psh_mod_res - psh_res,\n+\t\t\t\t\t\t  min_res);\n \n \t  res_set_fmt.add_res(v, effective_delta / v);\n \t}"}, {"sha": "a56d2c2131394342d1511327ee49e2ca4e9bcd93", "filename": "libstdc++-v3/testsuite/util/performance/time/timing_test_base.hpp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/382a1351344a6e17e834104705fb56434d8f649a/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Ftime%2Ftiming_test_base.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/382a1351344a6e17e834104705fb56434d8f649a/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Ftime%2Ftiming_test_base.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Ftime%2Ftiming_test_base.hpp?ref=382a1351344a6e17e834104705fb56434d8f649a", "patch": "@@ -48,7 +48,7 @@\n #define PB_DS_TIMING_TEST_BASE_HPP\n \n #include <performance/time/elapsed_timer.hpp>\n-#include <statistic/res_recorder.hpp>\n+#include <statistic/result_recorder.hpp>\n \n namespace pb_ds\n {\n@@ -81,12 +81,12 @@ namespace pb_ds\n       timing_test_base::operator()(Functor& fn)\n       {\n \tconst std::size_t resolution = get_min_resolution(fn);\n-\tpb_ds::test::detail::res_recorder<double> rec;\n+\tpb_ds::test::detail::result_recorder<double> rec;\n \tdouble res;\n \tdo\n \t  res = run_at_resolution(fn, resolution);\n-\twhile (rec.add_res(res) == false);\n-\tres = rec.sample_mean() / resolution;\n+\twhile (rec.add_result(res) == false);\n+\tres = rec.get_sample_mean() / resolution;\n \treturn res;\n       }\n "}, {"sha": "9f571107df038f883be8db5fca6290ae4d48129c", "filename": "libstdc++-v3/testsuite/util/regression/trait/assoc/trait.hpp", "status": "modified", "additions": 11, "deletions": 43, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/382a1351344a6e17e834104705fb56434d8f649a/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Ftrait%2Fassoc%2Ftrait.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/382a1351344a6e17e834104705fb56434d8f649a/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Ftrait%2Fassoc%2Ftrait.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Ftrait%2Fassoc%2Ftrait.hpp?ref=382a1351344a6e17e834104705fb56434d8f649a", "patch": "@@ -101,22 +101,15 @@ namespace detail\n   {\n   private:\n     typedef PB_DS_NATIVE_TYPE_TRAITS_C_DEC native_type_traits_base;\n-\n     typedef PB_DS_TYPE_TRAITS_C_DEC type_traits_base;\n \n   public:\n     typedef typename Cntnr::key_type key_type;\n-\n     typedef typename Cntnr::const_key_reference const_key_reference;\n-\n     typedef typename Cntnr::value_type value_type;\n-\n     typedef typename Cntnr::const_reference const_reference;\n-\n     typedef typename PB_DS_NATIVE_TYPE_TRAITS_C_DEC::type native_type;\n-\n     typedef typename native_type::key_type native_key_type;\n-\n     typedef typename native_type::value_type native_value_type;\n \n     enum\n@@ -153,73 +146,49 @@ namespace detail\n \n     static void\n     print_container(const Cntnr& r_c, std::ostream& r_os)\n-    {\n-      PB_DS_TYPE_TRAITS_C_DEC::print_container(r_c, r_os);\n-    }\n-\n-  public:\n+    { PB_DS_TYPE_TRAITS_C_DEC::print_container(r_c, r_os); }\n \n     template<typename Gen>\n     static key_type\n     generate_key(Gen& r_gen, size_t max)\n-    {\n-      return PB_DS_TYPE_TRAITS_C_DEC::generate_key(r_gen, max);\n-    }\n+    { return PB_DS_TYPE_TRAITS_C_DEC::generate_key(r_gen, max); }\n \n     template<typename Gen>\n     static value_type\n     generate_value(Gen& r_gen, size_t max)\n-    {\n-      return PB_DS_TYPE_TRAITS_C_DEC::generate_value(r_gen, max);\n-    }\n+    { return PB_DS_TYPE_TRAITS_C_DEC::generate_value(r_gen, max); }\n \n     static const_key_reference\n     extract_key(const_reference r_val)\n-    {\n-      return type_traits_base::extract_key(r_val);\n-    }\n+    { return type_traits_base::extract_key(r_val); }\n \n     static native_key_type\n     native_key(const_key_reference r_key)\n-    {\n-      return native_type_traits_base::native_key(r_key);\n-    }\n+    { return native_type_traits_base::native_key(r_key); }\n \n     static native_value_type\n     native_value(const_reference r_val)\n-    {\n-      return native_type_traits_base::native_value(r_val);\n-    }\n+    { return native_type_traits_base::native_value(r_val); }\n \n     static const native_key_type& \n     extract_native_key(const native_value_type& r_val)\n-    {\n-      return native_type_traits_base::extract_key(r_val);\n-    }\n+    { return native_type_traits_base::extract_key(r_val); }\n \n     static bool\n     cmp(const_reference r_val, const native_value_type& r_native_val)\n-    {\n-      return val_to_string(r_val) == native_val_to_string(r_native_val);\n-    }\n+    { return val_to_string(r_val) == native_val_to_string(r_native_val); }\n \n     static std::string\n     val_to_string(const_reference r_val)\n-    {\n-      return to_string(r_val);\n-    }\n+    { return to_string(r_val); }\n \n     static std::string\n     key_to_string(const_key_reference r_key)\n-    {\n-      return to_string(r_key);\n-    }\n+    { return to_string(r_key); }\n \n     static std::string\n     native_val_to_string(const native_value_type& r_native_val)\n-    {\n-      return to_string(r_native_val);\n-    }\n+    { return to_string(r_native_val); }\n \n     static bool\n     prefix_match(const_key_reference r_key, const std::string& r_native_key)\n@@ -232,7 +201,6 @@ namespace detail\n \n       return native_substr == (const std::string&) r_key;\n     }\n-\n   };\n \n #undef PB_DS_TYPE_TRAITS_C_DEC"}, {"sha": "c583848c630b3dec299a5f3536f975f5ab955837", "filename": "libstdc++-v3/testsuite/util/regression/trait/erase_if_fn.hpp", "status": "modified", "additions": 8, "deletions": 24, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/382a1351344a6e17e834104705fb56434d8f649a/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Ftrait%2Ferase_if_fn.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/382a1351344a6e17e834104705fb56434d8f649a/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Ftrait%2Ferase_if_fn.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Ftrait%2Ferase_if_fn.hpp?ref=382a1351344a6e17e834104705fb56434d8f649a", "patch": "@@ -52,17 +52,13 @@\n \n namespace pb_ds\n {\n-\n   namespace test\n   {\n-\n     namespace detail\n     {\n-\n       template<typename T>\n-      struct regression_test_erase_if_fn : public std::unary_function<\n-        T,\n-        bool>\n+      struct regression_test_erase_if_fn \n+      : public std::unary_function<T, bool>\n       {\n       private:\n \ttypedef const T&  const_reference;\n@@ -77,35 +73,23 @@ namespace pb_ds\n       };\n \n       template<typename Hd, class Tl>\n-      struct regression_test_erase_if_fn<\n-        std::pair<\n-\tHd,\n-\tTl> > : public std::unary_function<\n-        std::pair<\n-\tHd,\n-\tTl>,\n-        bool>\n+      struct regression_test_erase_if_fn<std::pair<Hd, Tl> > \n+      : public std::unary_function<std::pair<Hd, Tl>, bool>\n       {\n       private:\n \ttypedef const std::pair<Hd, Tl>&  const_reference;\n-\n-\ttypedef regression_test_erase_if_fn< Hd> hd_erase_if_fn;\n-\n-\ttypedef regression_test_erase_if_fn< Tl> tl_erase_if_fn;\n+\ttypedef regression_test_erase_if_fn<Hd> hd_erase_if_fn;\n+\ttypedef regression_test_erase_if_fn<Tl> tl_erase_if_fn;\n \n       public:\n \tbool\n         operator()(const_reference r_t) const\n \t{\n-\t  return (hd_erase_if_fn()(r_t.first)&& \n-\t\t  tl_erase_if_fn()(r_t.second));\n+\t  return (hd_erase_if_fn()(r_t.first) && tl_erase_if_fn()(r_t.second));\n \t}\n       };\n-\n     } // namespace detail\n-\n   } // namespace test\n-\n } // namespace pb_ds\n \n-#endif // #ifndef PB_DS_REGRESSION_TEST_ERASE_IF_FN_HPP\n+#endif "}, {"sha": "641d9295cfb495fa53a8102e2394fb93d363a02e", "filename": "libstdc++-v3/testsuite/util/regression/trait/priority_queue/trait.hpp", "status": "modified", "additions": 8, "deletions": 49, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/382a1351344a6e17e834104705fb56434d8f649a/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Ftrait%2Fpriority_queue%2Ftrait.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/382a1351344a6e17e834104705fb56434d8f649a/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Ftrait%2Fpriority_queue%2Ftrait.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fregression%2Ftrait%2Fpriority_queue%2Ftrait.hpp?ref=382a1351344a6e17e834104705fb56434d8f649a", "patch": "@@ -52,82 +52,41 @@\n \n namespace pb_ds\n {\n-\n   namespace test\n   {\n-\n     namespace detail\n     {\n-\n-#define PB_DS_CLASS_T_DEC\t\t\t\\\n-      template<typename Cntnr>\n-\n-#define PB_DS_CLASS_C_DEC\t\t\t\t\\\n-      regression_test_traits<\t\t\t\t\\\n-\t\t\t\t\t\tCntnr>\n-\n       template<typename Cntnr>\n       struct regression_test_traits\n       {\n-\n-      public:\n-\n \ttypedef typename Cntnr::value_type value_type;\n-\n \ttypedef typename Cntnr::const_reference const_reference;\n-\n-\ttypedef\n-        pb_ds::test::native_priority_queue<\n-\t  std::string,\n-\t  true>\n-        native_type;\n-\n+\ttypedef pb_ds::test::native_priority_queue<std::string, true> native_type;\n \ttypedef typename native_type::value_type native_value_type;\n \n \ttemplate<typename T>\n-\tstruct erase_if_fn : public regression_test_erase_if_fn<\n-\t  T>\n-\t{\n-\n-\t};\n-\n-      public:\n+\tstruct erase_if_fn : public regression_test_erase_if_fn<T>\n+\t{ };\n \n \ttemplate<typename Gen>\n \tstatic value_type\n         generate_value(Gen& r_gen, size_t max)\n-\t{\n-\t  return basic_type(r_gen, max);\n-\t}\n+\t{ return basic_type(r_gen, max); }\n \n \tstatic native_value_type\n         native_value(const_reference r_val)\n-\t{\n-\t  return (native_value_type(r_val));\n-\t}\n+\t{ return native_value_type(r_val); }\n \n \tstatic bool\n         cmp(const_reference r_val, const native_value_type& r_native_val)\n-\t{\n-\t  return (val_to_string(r_val) == r_native_val);\n-\t}\n+\t{ return val_to_string(r_val) == r_native_val; }\n \n \tstatic std::string\n         val_to_string(const_reference r_val)\n-\t{\n-\t  return (std::string(r_val));\n-\t}\n-\n+\t{ return std::string(r_val); }\n       };\n-\n-#undef PB_DS_CLASS_T_DEC\n-\n-#undef PB_DS_CLASS_C_DEC\n-\n     } // namespace detail\n-\n   } // namespace test\n-\n } // namespace pb_ds\n \n-#endif // #ifndef PB_DS_REGRESSION_TEST_TRAIT_HPP\n+#endif "}, {"sha": "2f8eaa5ccd24cfe2914e64635160366a811a5042", "filename": "libstdc++-v3/testsuite/util/statistic/result_recorder.hpp", "status": "renamed", "additions": 22, "deletions": 57, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/382a1351344a6e17e834104705fb56434d8f649a/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fstatistic%2Fresult_recorder.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/382a1351344a6e17e834104705fb56434d8f649a/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fstatistic%2Fresult_recorder.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fstatistic%2Fresult_recorder.hpp?ref=382a1351344a6e17e834104705fb56434d8f649a", "patch": "@@ -40,104 +40,69 @@\n // warranty.\n \n /**\n- * @file res_recorder.hpp\n+ * @file result_recorder.hpp\n  * Contains a class for recording results\n  */\n \n #ifndef PB_DS_RES_RECORDER_HPP\n #define PB_DS_RES_RECORDER_HPP\n \n #include <statistic/sample_mean.hpp>\n-#include <statistic/sample_var.hpp>\n+#include <statistic/sample_variance.hpp>\n #include <statistic/sample_mean_confidence_checker.hpp>\n \n namespace pb_ds\n {\n-\n   namespace test\n   {\n-\n     namespace detail\n     {\n-\n-#define PB_DS_CLASS_T_DEC\t\t\t\\\n-      template<typename Value_Type>\n-\n-#define PB_DS_CLASS_C_DEC\t\t\t\t\t\\\n-      res_recorder<\t\t\t\t\t\t\\\n-\t\t\t\t\t\tValue_Type>\n-\n       /*\n        * Records results until the probability that the sample mean is 10% away\n-       *     from the true mean is ~ 0.05.\n+       * from the true mean is ~ 0.05.\n        */\n-      template<typename Value_Type = double>\n-      class res_recorder\n+      template<typename Value_Type>\n+      class result_recorder\n       {\n       public:\n \ttypedef Value_Type value_type;\n \n-      public:\n-\tres_recorder();\n+\tresult_recorder()\n+        : m_sample_mean(value_type()), m_sample_var(value_type())\n+\t{ }\n \n \tbool\n-        add_res(value_type res);\n+        add_result(value_type res);\n \n \tinline value_type\n-        sample_mean() const;\n+        get_sample_mean() const\n+\t{ return m_sample_mean; }\n \n       private:\n-\ttypedef std::list< value_type> list_t;\n-\n-      private:\n-\tlist_t m_l;\n+\ttypedef std::list<value_type> list_type;\n \n+\tlist_type m_l;\n \tvalue_type m_sample_mean;\n-\n \tvalue_type m_sample_var;\n       };\n \n-      PB_DS_CLASS_T_DEC\n-      PB_DS_CLASS_C_DEC::\n-      res_recorder() :\n-        m_sample_mean(0)\n-      { }\n \n-      PB_DS_CLASS_T_DEC\n-      inline typename PB_DS_CLASS_C_DEC::value_type\n-      PB_DS_CLASS_C_DEC::\n-      sample_mean() const\n-      {\n-\treturn (m_sample_mean);\n-      }\n-\n-      PB_DS_CLASS_T_DEC\n+      template<typename Value_Type>\n       bool\n-      PB_DS_CLASS_C_DEC::\n-      add_res(value_type res)\n+      result_recorder<Value_Type>::\n+      add_result(value_type res)\n       {\n \tm_l.push_back(res);\n+\tm_sample_mean = sample_mean(m_l.begin(), m_l.end());\n+\tm_sample_var = sample_variance(m_l.begin(), m_l.end(), m_sample_mean);\n \n-\tm_sample_mean = pb_ds::test::detail::sample_mean(m_l.begin(), m_l.end());\n-\n-\tconst value_type sample_var =\n-\t  pb_ds::test::detail::sample_var(m_l.begin(), m_l.end(), m_sample_mean);\n-\n-\treturn (pb_ds::test::detail::sample_mean_confidence_checker(m_sample_mean,\n-\t\t\t\t\t\t\t\t    sample_var,\n-\t\t\t\t\t\t\t\t    std::distance(m_l.begin(), m_l.end()),\n-\t\t\t\t\t\t\t\t    0.1));\n+\tsize_t dist = std::distance(m_l.begin(), m_l.end());\n+\treturn sample_mean_confidence_checker(m_sample_mean, m_sample_var,\n+\t\t\t\t\t      dist, 0.1);\n       }\n-\n-#undef PB_DS_CLASS_T_DEC\n-\n-#undef PB_DS_CLASS_C_DEC\n-\n     } // namespace detail\n-\n   } // namespace test\n-\n } // namespace pb_ds\n \n-#endif // #ifndef PB_DS_RES_RECORDER_HPP\n+#endif \n ", "previous_filename": "libstdc++-v3/testsuite/util/statistic/res_recorder.hpp"}, {"sha": "4c6c5613540a989b66a634417b0678c5a7fcfb43", "filename": "libstdc++-v3/testsuite/util/statistic/sample_mean.hpp", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/382a1351344a6e17e834104705fb56434d8f649a/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fstatistic%2Fsample_mean.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/382a1351344a6e17e834104705fb56434d8f649a/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fstatistic%2Fsample_mean.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fstatistic%2Fsample_mean.hpp?ref=382a1351344a6e17e834104705fb56434d8f649a", "patch": "@@ -54,34 +54,26 @@\n \n namespace pb_ds\n {\n-\n   namespace test\n   {\n-\n     namespace detail\n     {\n-\n-#define PB_DS_VTYPE\t\t\t\t\t\t\t\\\n-      typename std::iterator_traits<\t\t\t\t\t\\\n-\t\t\t\t\t\t\tIt>::value_type\n+#define PB_DS_VTYPE typename std::iterator_traits<It>::value_type\n \n       template<typename It>\n       PB_DS_VTYPE\n       sample_mean(It b, It e)\n       {\n \tconst PB_DS_VTYPE total = std::accumulate(b, e, PB_DS_VTYPE(0));\n \tconst size_t num = std::distance(b, e);\n-\n-\treturn (total / num);\n+\treturn total / num;\n       }\n \n #undef PB_DS_VTYPE\n \n     } // namespace detail\n-\n   } // namespace test\n-\n } // namespace pb_ds\n \n-#endif // #ifndef PB_DS_SAMPLE_MEAN_HPP\n+#endif \n "}, {"sha": "074adc961e5fe041dd581437e1a43e4d678fac5f", "filename": "libstdc++-v3/testsuite/util/statistic/sample_mean_confidence_checker.hpp", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/382a1351344a6e17e834104705fb56434d8f649a/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fstatistic%2Fsample_mean_confidence_checker.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/382a1351344a6e17e834104705fb56434d8f649a/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fstatistic%2Fsample_mean_confidence_checker.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fstatistic%2Fsample_mean_confidence_checker.hpp?ref=382a1351344a6e17e834104705fb56434d8f649a", "patch": "@@ -53,25 +53,24 @@\n \n namespace pb_ds\n {\n-\n   namespace test\n   {\n-\n     namespace detail\n     {\n-\n       /*\n        * Checks that a sample mean sm is in the relative interval\n-       *     relative_interval of a true mean (assuming i.i.d. samples),\n-       *     given a sample variance sv taken over num_samples samples,\n-       *     with confidence ~ 0.95.\n+       * relative_interval of a true mean (assuming i.i.d. samples),\n+       * given a sample variance sv taken over num_samples samples,\n+       * with confidence ~ 0.95.\n        *\n-       * See \"Probability, Random Variables, and Stochastic Processes\" (Third edition)\n-       *     Athanasios Papoulis, Chapter 9.\n+       * See \"Probability, Random Variables, and Stochastic Processes\"\n+       * (Third edition) Athanasios Papoulis, Chapter 9.\n        */\n       template<typename Value_Type>\n       bool\n-      sample_mean_confidence_checker(Value_Type sm, Value_Type sv, std::size_t num_samples, double relative_interval)\n+      sample_mean_confidence_checker(Value_Type sm, Value_Type sv, \n+\t\t\t\t     std::size_t num_samples, \n+\t\t\t\t     double relative_interval)\n       {\n \tenum\n \t  {\n@@ -85,14 +84,11 @@ namespace pb_ds\n \t// This is z_u (normal-dist percentile) for u = 0.975.\n \tconst Value_Type z = 1.976;\n \n-\treturn (sv / ::sqrt(double(num_samples)) <= relative_interval*  sm / z);\n+\treturn (sv / ::sqrt(double(num_samples)) <= relative_interval * sm / z);\n       }\n-\n     } // namespace detail\n-\n   } // namespace test\n-\n } // namespace pb_ds\n \n-#endif // #ifndef PB_DS_SAMPLE_MEAN_CONFIDENCE_CHECKER_HPP\n+#endif \n "}, {"sha": "c2f87407c3891121d71893286c068860dbf65529", "filename": "libstdc++-v3/testsuite/util/statistic/sample_variance.hpp", "status": "renamed", "additions": 6, "deletions": 17, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/382a1351344a6e17e834104705fb56434d8f649a/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fstatistic%2Fsample_variance.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/382a1351344a6e17e834104705fb56434d8f649a/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fstatistic%2Fsample_variance.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fstatistic%2Fsample_variance.hpp?ref=382a1351344a6e17e834104705fb56434d8f649a", "patch": "@@ -40,7 +40,7 @@\n // warranty.\n \n /**\n- * @file sample_var.hpp\n+ * @file sample_variance.hpp\n  * Contains a function for calculating a sample variance\n  */\n \n@@ -54,49 +54,38 @@\n \n namespace pb_ds\n {\n-\n   namespace test\n   {\n-\n     namespace detail\n     {\n-\n-#define PB_DS_VTYPE\t\t\t\t\t\t\t\\\n-      typename std::iterator_traits<\t\t\t\t\t\\\n-\t\t\t\t\t\t\tIt>::value_type\n+#define PB_DS_VTYPE typename std::iterator_traits<It>::value_type\n \n       template<typename It>\n       PB_DS_VTYPE\n-      sample_var(It b, It e, PB_DS_VTYPE sm)\n+      sample_variance(It b, It e, PB_DS_VTYPE sm)\n       {\n \tPB_DS_VTYPE ss = 0;\n-\n \tsize_t num_res = 0;\n \n \twhile (b != e)\n \t  {\n \t    const PB_DS_VTYPE d =* b - sm;\n-\n \t    ss += d*  d;\n-\n \t    ++num_res;\n-\n \t    ++b;\n \t  }\n \n \tif (num_res == 1)\n-\t  return (0);\n+\t  return 0;\n \n-\treturn (::sqrt(ss / (num_res - 1)));\n+\treturn ::sqrt(ss / (num_res - 1));\n       }\n \n #undef PB_DS_VTYPE\n \n     } // namespace detail\n-\n   } // namespace test\n-\n } // namespace pb_ds\n \n-#endif // #ifndef PB_DS_SAMPLE_VAR_HPP\n+#endif \n ", "previous_filename": "libstdc++-v3/testsuite/util/statistic/sample_var.hpp"}]}