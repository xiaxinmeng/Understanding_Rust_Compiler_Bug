{"sha": "dea148c40c7586c2cf576cc97dabf96f88d500a0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGVhMTQ4YzQwYzc1ODZjMmNmNTc2Y2M5N2RhYmY5NmY4OGQ1MDBhMA==", "commit": {"author": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2012-03-03T23:16:08Z"}, "committer": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2012-03-03T23:16:08Z"}, "message": "sh.c (shiftcosts): Return MAX_COST when the first operand is CONST_INT.\n\n\t* config/sh/sh.c (shiftcosts): Return MAX_COST when the first\n\toperand is CONST_INT.  Take COSTS_N_INSNS into account.\n\t(sh_rtx_costs): Don't apply COSTS_N_INSNS to the return value\n\tof shiftcosts.\n\nFrom-SVN: r184865", "tree": {"sha": "e72e4539ebd41da24424edbf171aea6e821ac052", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e72e4539ebd41da24424edbf171aea6e821ac052"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dea148c40c7586c2cf576cc97dabf96f88d500a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dea148c40c7586c2cf576cc97dabf96f88d500a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dea148c40c7586c2cf576cc97dabf96f88d500a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dea148c40c7586c2cf576cc97dabf96f88d500a0/comments", "author": null, "committer": null, "parents": [{"sha": "d289d284abfc9069c06ffdd914b5b1b8aba3c457", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d289d284abfc9069c06ffdd914b5b1b8aba3c457", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d289d284abfc9069c06ffdd914b5b1b8aba3c457"}], "stats": {"total": 23, "additions": 17, "deletions": 6}, "files": [{"sha": "c29a3e737f9a67305d15d5b9bd068eec7ef9d0f0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dea148c40c7586c2cf576cc97dabf96f88d500a0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dea148c40c7586c2cf576cc97dabf96f88d500a0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dea148c40c7586c2cf576cc97dabf96f88d500a0", "patch": "@@ -1,3 +1,10 @@\n+2012-03-03  Kaz Kojima  <kkojima@gcc.gnu.org>\n+\n+\t* config/sh/sh.c (shiftcosts): Return MAX_COST when the first\n+\toperand is CONST_INT.  Take COSTS_N_INSNS into account.\n+\t(sh_rtx_costs): Don't apply COSTS_N_INSNS to the return value\n+\tof shiftcosts.\n+\n 2012-03-02  Richard Henderson  <rth@redhat.com>\n \n \t* optabs.c (expand_atomic_test_and_set): Honor"}, {"sha": "1b7eaae8fbe03d4481ff00362179b1b32fc85196", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dea148c40c7586c2cf576cc97dabf96f88d500a0/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dea148c40c7586c2cf576cc97dabf96f88d500a0/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=dea148c40c7586c2cf576cc97dabf96f88d500a0", "patch": "@@ -2828,22 +2828,26 @@ shiftcosts (rtx x)\n {\n   int value;\n \n+  /* There is no pattern for constant first operand.  */\n+  if (CONST_INT_P (XEXP (x, 0)))\n+    return MAX_COST;\n+\n   if (TARGET_SHMEDIA)\n-    return 1;\n+    return COSTS_N_INSNS (1);\n \n   if (GET_MODE_SIZE (GET_MODE (x)) > UNITS_PER_WORD)\n     {\n       if (GET_MODE (x) == DImode\n \t  && CONST_INT_P (XEXP (x, 1))\n \t  && INTVAL (XEXP (x, 1)) == 1)\n-\treturn 2;\n+\treturn COSTS_N_INSNS (2);\n \n       /* Everything else is invalid, because there is no pattern for it.  */\n       return MAX_COST;\n     }\n   /* If shift by a non constant, then this will be expensive.  */\n   if (!CONST_INT_P (XEXP (x, 1)))\n-    return SH_DYNAMIC_SHIFT_COST;\n+    return COSTS_N_INSNS (SH_DYNAMIC_SHIFT_COST);\n \n   /* Otherwise, return the true cost in instructions.  Cope with out of range\n      shift counts more or less arbitrarily.  */\n@@ -2855,10 +2859,10 @@ shiftcosts (rtx x)\n       /* If SH3, then we put the constant in a reg and use shad.  */\n       if (cost > 1 + SH_DYNAMIC_SHIFT_COST)\n \tcost = 1 + SH_DYNAMIC_SHIFT_COST;\n-      return cost;\n+      return COSTS_N_INSNS (cost);\n     }\n   else\n-    return shift_insns[value];\n+    return COSTS_N_INSNS (shift_insns[value]);\n }\n \n /* Return the cost of an AND/XOR/IOR operation.  */\n@@ -3091,7 +3095,7 @@ sh_rtx_costs (rtx x, int code, int outer_code, int opno ATTRIBUTE_UNUSED,\n     case ASHIFT:\n     case ASHIFTRT:\n     case LSHIFTRT:\n-      *total = COSTS_N_INSNS (shiftcosts (x));\n+      *total = shiftcosts (x);\n       return true;\n \n     case DIV:"}]}