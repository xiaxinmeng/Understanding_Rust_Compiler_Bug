{"sha": "cd47580517bf12a070ba8b5e76043d9df813acc6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Q0NzU4MDUxN2JmMTJhMDcwYmE4YjVlNzYwNDNkOWRmODEzYWNjNg==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@integrable-solutions.net", "date": "2003-07-25T10:27:43Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2003-07-25T10:27:43Z"}, "message": "objc-act.c (objc_check_decl): Don't use xxx_with_decl.\n\n        * objc/objc-act.c (objc_check_decl): Don't use xxx_with_decl.\n        (objc_declare_class): Likewise.\n        (error_with_ivar): Likewise.\n        (start_class): Likewise.\n        (warn_with_method): Likewise.\n\njava/\n        * expr.c (expand_java_field_op): Don't use xxx_with_decl\n        (expand_java_field_op): Likewise.\n        * class.c (layout_class_method): Likewise\n        (emit_register_classes): Likewise.\n        * decl.c (pushdecl): Likewise.\n        (poplevel): Likewise.\n        (force_poplevels): Likewise.\n        (give_name_to_locals): Likewise.\n        * check-init.c (check_for_initialization): Likewise.\n\nFrom-SVN: r69780", "tree": {"sha": "bd914c5fecb0645c91a2bb36077ad261dfaf5a60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd914c5fecb0645c91a2bb36077ad261dfaf5a60"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd47580517bf12a070ba8b5e76043d9df813acc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd47580517bf12a070ba8b5e76043d9df813acc6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd47580517bf12a070ba8b5e76043d9df813acc6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd47580517bf12a070ba8b5e76043d9df813acc6/comments", "author": {"login": "cxx-undef", "id": 5528103, "node_id": "MDQ6VXNlcjU1MjgxMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5528103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cxx-undef", "html_url": "https://github.com/cxx-undef", "followers_url": "https://api.github.com/users/cxx-undef/followers", "following_url": "https://api.github.com/users/cxx-undef/following{/other_user}", "gists_url": "https://api.github.com/users/cxx-undef/gists{/gist_id}", "starred_url": "https://api.github.com/users/cxx-undef/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cxx-undef/subscriptions", "organizations_url": "https://api.github.com/users/cxx-undef/orgs", "repos_url": "https://api.github.com/users/cxx-undef/repos", "events_url": "https://api.github.com/users/cxx-undef/events{/privacy}", "received_events_url": "https://api.github.com/users/cxx-undef/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e710066d27bdcc5165a1feef691e11b90e8f5a1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e710066d27bdcc5165a1feef691e11b90e8f5a1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e710066d27bdcc5165a1feef691e11b90e8f5a1f"}], "stats": {"total": 72, "additions": 51, "deletions": 21}, "files": [{"sha": "d9227f06045559104a02be0f14bd4c179ec11fe3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd47580517bf12a070ba8b5e76043d9df813acc6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd47580517bf12a070ba8b5e76043d9df813acc6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cd47580517bf12a070ba8b5e76043d9df813acc6", "patch": "@@ -1,3 +1,11 @@\n+2003-07-25  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\t* objc/objc-act.c (objc_check_decl): Don't use xxx_with_decl.\n+\t(objc_declare_class): Likewise.\n+\t(error_with_ivar): Likewise.\n+\t(start_class): Likewise.\n+\t(warn_with_method): Likewise.\n+\n 2003-07-25  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n \tRemove pedwarn_with_decl, warning_with_decl and error_with_decl"}, {"sha": "1de47fe43293af0d1931c454d3a0e3f477a6f7d2", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd47580517bf12a070ba8b5e76043d9df813acc6/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd47580517bf12a070ba8b5e76043d9df813acc6/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=cd47580517bf12a070ba8b5e76043d9df813acc6", "patch": "@@ -1,3 +1,15 @@\n+2003-07-25  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\t* expr.c (expand_java_field_op): Don't use xxx_with_decl\n+\t(expand_java_field_op): Likewise.\n+\t* class.c (layout_class_method): Likewise\n+\t(emit_register_classes): Likewise.\n+\t* decl.c (pushdecl): Likewise.\n+\t(poplevel): Likewise.\n+\t(force_poplevels): Likewise.\n+\t(give_name_to_locals): Likewise.\n+\t* check-init.c (check_for_initialization): Likewise.\n+\n 2003-07-24  Jason Merrill  <jason@redhat.com>\n \n \t* java-tree.h: Move boolean_type_node et al to the back end."}, {"sha": "c2272a80b8fc6bba0bc774ade8ce63a7744ed62d", "filename": "gcc/java/check-init.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd47580517bf12a070ba8b5e76043d9df813acc6/gcc%2Fjava%2Fcheck-init.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd47580517bf12a070ba8b5e76043d9df813acc6/gcc%2Fjava%2Fcheck-init.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fcheck-init.c?ref=cd47580517bf12a070ba8b5e76043d9df813acc6", "patch": "@@ -977,7 +977,8 @@ check_for_initialization (tree body, tree mdecl)\n \t      if (index >= 0 && ! ASSIGNED_P (before, index))\n \t\t{\n \t\t  if (! is_finit_method)\n-\t\t    error_with_decl (decl, \"final field '%s' may not have been initialized\");\n+\t\t    error (\"%Hfinal field '%D' may not have been initialized\",\n+                           &DECL_SOURCE_LOCATION (decl), decl);\n \t\t}\n \t      else if (is_finit_method)\n \t\tDECL_FIELD_FINAL_IUD (decl) = 1;"}, {"sha": "582183dcc4a44eb7839ee9a9fb3fccd5f4fefabe", "filename": "gcc/java/class.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd47580517bf12a070ba8b5e76043d9df813acc6/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd47580517bf12a070ba8b5e76043d9df813acc6/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=cd47580517bf12a070ba8b5e76043d9df813acc6", "patch": "@@ -1211,8 +1211,8 @@ get_dispatch_table (tree type, tree this_class_addr)\n       if (METHOD_ABSTRACT (method))\n \t{\n \t  if (! abstract_p)\n-\t    warning_with_decl (method,\n-\t\t\t       \"abstract method in non-abstract class\");\n+\t    warning (\"%Habstract method in non-abstract class\",\n+                     &DECL_SOURCE_FILE (method));\n \n \t  if (TARGET_VTABLE_USES_DESCRIPTORS)\n \t    for (j = 0; j < TARGET_VTABLE_USES_DESCRIPTORS; ++j)\n@@ -1927,8 +1927,8 @@ layout_class_method (tree this_class, tree super_class,\n \t  DECL_VINDEX (method_decl) = DECL_VINDEX (super_method);\n \t  if (DECL_VINDEX (method_decl) == NULL_TREE \n \t      && !CLASS_FROM_SOURCE_P (this_class))\n-\t    error_with_decl (method_decl,\n-\t\t\t     \"non-static method '%s' overrides static method\");\n+\t    error (\"%Hnon-static method '%D' overrides static method\",\n+                   &DECL_SOURCE_LOCATION (method_decl), method_decl);\n \t}\n       else if (! METHOD_FINAL (method_decl)\n \t       && ! METHOD_PRIVATE (method_decl)"}, {"sha": "d1c5b5cc657fa7dd897291cd9ad1118fb598aa96", "filename": "gcc/java/decl.c", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd47580517bf12a070ba8b5e76043d9df813acc6/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd47580517bf12a070ba8b5e76043d9df813acc6/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=cd47580517bf12a070ba8b5e76043d9df813acc6", "patch": "@@ -1022,7 +1022,8 @@ pushdecl (tree x)\n \t/* error_mark_node is 0 for a while during initialization!  */\n \t{\n \t  t = 0;\n-\t  error_with_decl (x, \"`%s' used prior to declaration\");\n+\t  error (\"%H'%D' used prior to declaration\",\n+                 &DECL_SOURCE_LOCATION (x), x);\n \t}\n \n       if (t != 0)\n@@ -1364,12 +1365,14 @@ poplevel (int keep, int reverse, int functionbody)\n \n \t  if (DECL_INITIAL (label) == 0)\n \t    {\n-\t      error_with_decl (label, \"label `%s' used but not defined\");\n+\t      error (\"%Hlabel '%D' used but not defined\",\n+                     &DECL_SOURCE_LOCATION (label), label);\n \t      /* Avoid crashing later.  */\n \t      define_label (input_location, DECL_NAME (label));\n \t    }\n \t  else if (warn_unused[UNUSED_LABEL] && !TREE_USED (label))\n-\t    warning_with_decl (label, \"label `%s' defined but not used\");\n+\t    warning (\"%Hlabel '%D' defined but not used\",\n+                     &DECL_SOURCE_LOCATION (label), label);\n \t  IDENTIFIER_LABEL_VALUE (DECL_NAME (label)) = 0;\n \n \t  /* Put the labels into the \"variables\" of the\n@@ -1497,9 +1500,10 @@ force_poplevels (int start_pc)\n   while (current_binding_level->start_pc > start_pc)\n     {\n       if (pedantic && current_binding_level->start_pc > start_pc)\n-\twarning_with_decl (current_function_decl, \n-\t\t\t   \"In %s: overlapped variable and exception ranges at %d\",\n-\t\t\t   current_binding_level->start_pc);\n+\twarning (current_function_decl, \n+                 \"%HIn %D: overlapped variable and exception ranges at %d\",\n+                 &DECL_SOURCE_LOCATION (current_function_decl),\n+                 current_function_decl, current_binding_level->start_pc);\n       expand_end_bindings (getdecls (), 1, 0);\n       poplevel (1, 0, 0);\n     }\n@@ -1584,8 +1588,8 @@ give_name_to_locals (JCF *jcf)\n \t  tree decl = build_decl (VAR_DECL, name, type);\n \t  if (end_pc > DECL_CODE_LENGTH (current_function_decl))\n \t    {\n-\t      warning_with_decl (decl,\n-\t\t\t \"bad PC range for debug info for local `%s'\");\n+\t      warning (\"%Hbad PC range for debug info for local '%D'\",\n+                       &DECL_SOURCE_LOCATION (decl), decl);\n \t      end_pc = DECL_CODE_LENGTH (current_function_decl);\n \t    }\n "}, {"sha": "7710008fc280bc2224289bf3eb4deed32bc79fab", "filename": "gcc/java/expr.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd47580517bf12a070ba8b5e76043d9df813acc6/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd47580517bf12a070ba8b5e76043d9df813acc6/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=cd47580517bf12a070ba8b5e76043d9df813acc6", "patch": "@@ -2334,20 +2334,22 @@ expand_java_field_op (int is_static, int is_putting, int field_ref_index)\n       if (FIELD_FINAL (field_decl))\n \t{\n \t  if (DECL_CONTEXT (field_decl) != current_class)\n-\t    error_with_decl (field_decl,\n-\t\t     \"assignment to final field `%s' not in field's class\");\n+            error (\"%Hassignment to final field '%D' not in field's class\",\n+                   &DECL_SOURCE_LOCATION (field_decl), field_decl);\n \t  else if (FIELD_STATIC (field_decl))\n \t    {\n \t      if (!DECL_CLINIT_P (current_function_decl))\n-\t\twarning_with_decl (field_decl, \n-             \"assignment to final static field `%s' not in class initializer\");\n+\t\twarning (\"assignment to final static field `%s' not in \"\n+                         \"class initializer\",\n+                         &DECL_SOURCE_LOCATION (field_decl), field_decl);\n \t    }\n \t  else\n \t    {\n \t      tree cfndecl_name = DECL_NAME (current_function_decl);\n \t      if (! DECL_CONSTRUCTOR_P (current_function_decl)\n \t\t  && !ID_FINIT_P (cfndecl_name))\n-\t\twarning_with_decl (field_decl, \"assignment to final field `%s' not in constructor\");\n+                warning (\"%Hassignment to final field '%D' not in constructor\",\n+                         &DECL_SOURCE_LOCATION (field_decl),  field_decl);\n \t    }\n \t}\n       expand_assignment (field_ref, new_value, 0);"}, {"sha": "e5d6e520f161db5e63a50a5d79d7af9de2abb547", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd47580517bf12a070ba8b5e76043d9df813acc6/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd47580517bf12a070ba8b5e76043d9df813acc6/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=cd47580517bf12a070ba8b5e76043d9df813acc6", "patch": "@@ -915,7 +915,8 @@ objc_check_decl (decl)\n   if (TREE_CODE (type) == RECORD_TYPE\n       && TREE_STATIC_TEMPLATE (type)\n       && type != constant_string_type)\n-    error_with_decl (decl, \"`%s' cannot be statically allocated\");\n+    error (\"%H'%D' cannot be statically allocated\",\n+           &DECL_SOURCE_LOCATION (decl), decl);\n }\n \n /* Implement static typing.  At this point, we know we have an interface.  */\n@@ -2370,7 +2371,8 @@ objc_declare_class (ident_list)\n \t{\n \t  error (\"`%s' redeclared as different kind of symbol\",\n \t\t  IDENTIFIER_POINTER (ident));\n-\t  error_with_decl (decl, \"previous declaration of `%s'\");\n+\t  error (\"%Hprevious declaration of '%D'\",\n+                 &DECL_SOURCE_LOCATION (decl), decl);\n \t}\n \n       if (! is_class_name (ident))\n@@ -6116,7 +6118,8 @@ start_class (code, class_name, super_name, protocol_list)\n     {\n       error (\"`%s' redeclared as different kind of symbol\",\n \t     IDENTIFIER_POINTER (class_name));\n-      error_with_decl (decl, \"previous declaration of `%s'\");\n+      error (\"%Hprevious declaration of '%D'\",\n+             &DECL_SOURCE_LOCATION (decl), decl);\n     }\n \n   if (code == CLASS_IMPLEMENTATION_TYPE)"}]}