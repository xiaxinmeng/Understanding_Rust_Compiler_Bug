{"sha": "1dbe26b949c6142b278ab7af2bac4545e8d524f2", "node_id": "C_kwDOANBUbNoAKDFkYmUyNmI5NDljNjE0MmIyNzhhYjdhZjJiYWM0NTQ1ZThkNTI0ZjI", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-12-30T13:25:19Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-12-30T13:25:19Z"}, "message": "c-family: Use BULTINS_LOCATION for predefined macros changed upon optimize or target pragmas [PR103012]\n\nThe following testcases ICE when an optimize or target pragma\nis followed by a long line (4096+ chars).\nThis is because on such long lines we can't use columns anymore,\nbut the cpp_define calls performed by c_cpp_builtins_optimize_pragma\nor from the backend hooks for target pragma are done on temporary\nbuffers and expect to get columns from whatever line they appear on\n(which happens to be the long line after optimize/target pragma),\nand we run into:\n #0  fancy_abort (file=0x3abec67 \"../../libcpp/line-map.c\", line=502, function=0x3abecfc \"linemap_add\") at ../../gcc/diagnostic.c:1986\n #1  0x0000000002e7c335 in linemap_add (set=0x7ffff7fca000, reason=LC_RENAME, sysp=0, to_file=0x41287a0 \"pr103012.i\", to_line=3) at ../../libcpp/line-map.c:502\n #2  0x0000000002e7cc24 in linemap_line_start (set=0x7ffff7fca000, to_line=3, max_column_hint=128) at ../../libcpp/line-map.c:827\n #3  0x0000000002e7ce2b in linemap_position_for_column (set=0x7ffff7fca000, to_column=1) at ../../libcpp/line-map.c:898\n #4  0x0000000002e771f9 in _cpp_lex_direct (pfile=0x40c3b60) at ../../libcpp/lex.c:3592\n #5  0x0000000002e76c3e in _cpp_lex_token (pfile=0x40c3b60) at ../../libcpp/lex.c:3394\n #6  0x0000000002e610ef in lex_macro_node (pfile=0x40c3b60, is_def_or_undef=true) at ../../libcpp/directives.c:601\n #7  0x0000000002e61226 in do_define (pfile=0x40c3b60) at ../../libcpp/directives.c:639\n #8  0x0000000002e610b2 in run_directive (pfile=0x40c3b60, dir_no=0, buf=0x7fffffffd430 \"__OPTIMIZE__ 1\\n\", count=14) at ../../libcpp/directives.c:589\n #9  0x0000000002e650c1 in cpp_define (pfile=0x40c3b60, str=0x2f784d1 \"__OPTIMIZE__\") at ../../libcpp/directives.c:2513\n #10 0x0000000002e65100 in cpp_define_unused (pfile=0x40c3b60, str=0x2f784d1 \"__OPTIMIZE__\") at ../../libcpp/directives.c:2522\n #11 0x0000000000f50685 in c_cpp_builtins_optimize_pragma (pfile=0x40c3b60, prev_tree=<optimization_node 0x7fffea042000>, cur_tree=<optimization_node 0x7fffea042020>)\n     at ../../gcc/c-family/c-cppbuiltin.c:600\nassertion that LC_RENAME doesn't happen first.\n\nI think the right fix is emit those predefined macros upon\noptimize/target pragmas with BUILTINS_LOCATION, like we already do\nfor those macros at the start of the TU, they don't appear in columns\nof the next line after it.  Another possibility would be to force them\nat the location of the pragma.\n\n2021-12-30  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/103012\ngcc/\n\t* config/i386/i386-c.c (ix86_pragma_target_parse): Perform\n\tcpp_define/cpp_undef calls with forced token locations\n\tBUILTINS_LOCATION.\n\t* config/arm/arm-c.c (arm_pragma_target_parse): Likewise.\n\t* config/aarch64/aarch64-c.c (aarch64_pragma_target_parse): Likewise.\n\t* config/s390/s390-c.c (s390_pragma_target_parse): Likewise.\ngcc/c-family/\n\t* c-cppbuiltin.c (c_cpp_builtins_optimize_pragma): Perform\n\tcpp_define_unused/cpp_undef calls with forced token locations\n\tBUILTINS_LOCATION.\ngcc/testsuite/\n\tPR c++/103012\n\t* g++.dg/cpp/pr103012.C: New test.\n\t* g++.target/i386/pr103012.C: New test.", "tree": {"sha": "b7e737288aa85571233fb38e0b02d392af890f15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b7e737288aa85571233fb38e0b02d392af890f15"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1dbe26b949c6142b278ab7af2bac4545e8d524f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dbe26b949c6142b278ab7af2bac4545e8d524f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1dbe26b949c6142b278ab7af2bac4545e8d524f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dbe26b949c6142b278ab7af2bac4545e8d524f2/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1820137ba624d7eb2004a10f9632498b6bc1696a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1820137ba624d7eb2004a10f9632498b6bc1696a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1820137ba624d7eb2004a10f9632498b6bc1696a"}], "stats": {"total": 53, "additions": 53, "deletions": 0}, "files": [{"sha": "339dd2b73c3545e7df9d53b966ea7d19196a25f7", "filename": "gcc/c-family/c-cppbuiltin.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dbe26b949c6142b278ab7af2bac4545e8d524f2/gcc%2Fc-family%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dbe26b949c6142b278ab7af2bac4545e8d524f2/gcc%2Fc-family%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-cppbuiltin.c?ref=1dbe26b949c6142b278ab7af2bac4545e8d524f2", "patch": "@@ -589,6 +589,10 @@ c_cpp_builtins_optimize_pragma (cpp_reader *pfile, tree prev_tree,\n   if (flag_undef)\n     return;\n \n+  /* Make sure all of the builtins about to be declared have\n+     BUILTINS_LOCATION has their location_t.  */\n+  cpp_force_token_locations (parse_in, BUILTINS_LOCATION);\n+\n   /* Other target-independent built-ins determined by command-line\n      options.  */\n   if (!prev->x_optimize_size && cur->x_optimize_size)\n@@ -653,6 +657,8 @@ c_cpp_builtins_optimize_pragma (cpp_reader *pfile, tree prev_tree,\n     cpp_define_unused (pfile, \"__ROUNDING_MATH__\");\n   else if (prev->x_flag_rounding_math && !cur->x_flag_rounding_math)\n     cpp_undef (pfile, \"__ROUNDING_MATH__\");\n+\n+  cpp_stop_forcing_token_locations (parse_in);\n }\n \n "}, {"sha": "a2fab4db1d1fa0e00a33d2ab9629fa96d2d3a857", "filename": "gcc/config/aarch64/aarch64-c.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dbe26b949c6142b278ab7af2bac4545e8d524f2/gcc%2Fconfig%2Faarch64%2Faarch64-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dbe26b949c6142b278ab7af2bac4545e8d524f2/gcc%2Fconfig%2Faarch64%2Faarch64-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-c.c?ref=1dbe26b949c6142b278ab7af2bac4545e8d524f2", "patch": "@@ -259,7 +259,9 @@ aarch64_pragma_target_parse (tree args, tree pop_target)\n   unsigned char saved_warn_unused_macros = cpp_opts->warn_unused_macros;\n   cpp_opts->warn_unused_macros = 0;\n \n+  cpp_force_token_locations (parse_in, BUILTINS_LOCATION);\n   aarch64_update_cpp_builtins (parse_in);\n+  cpp_stop_forcing_token_locations (parse_in);\n \n   cpp_opts->warn_unused_macros = saved_warn_unused_macros;\n "}, {"sha": "787eaf3e993328cba7d1fd4c8c562ac9fe7122b3", "filename": "gcc/config/arm/arm-c.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dbe26b949c6142b278ab7af2bac4545e8d524f2/gcc%2Fconfig%2Farm%2Farm-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dbe26b949c6142b278ab7af2bac4545e8d524f2/gcc%2Fconfig%2Farm%2Farm-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-c.c?ref=1dbe26b949c6142b278ab7af2bac4545e8d524f2", "patch": "@@ -464,7 +464,9 @@ arm_pragma_target_parse (tree args, tree pop_target)\n       acond_macro = get_identifier (\"__ARM_FEATURE_LDREX\");\n       C_CPP_HASHNODE (acond_macro)->flags |= NODE_CONDITIONAL;\n \n+      cpp_force_token_locations (parse_in, BUILTINS_LOCATION);\n       arm_cpu_builtins (parse_in);\n+      cpp_stop_forcing_token_locations (parse_in);\n \n       cpp_opts->warn_unused_macros = saved_warn_unused_macros;\n "}, {"sha": "144d4527526d0a66e0c0968a5a998dca64c1193e", "filename": "gcc/config/i386/i386-c.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dbe26b949c6142b278ab7af2bac4545e8d524f2/gcc%2Fconfig%2Fi386%2Fi386-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dbe26b949c6142b278ab7af2bac4545e8d524f2/gcc%2Fconfig%2Fi386%2Fi386-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.c?ref=1dbe26b949c6142b278ab7af2bac4545e8d524f2", "patch": "@@ -702,12 +702,14 @@ ix86_pragma_target_parse (tree args, tree pop_target)\n     cur_tune = prev_tune = PROCESSOR_max;\n \n   /* Undef all of the macros for that are no longer current.  */\n+  cpp_force_token_locations (parse_in, BUILTINS_LOCATION);\n   ix86_target_macros_internal (prev_isa & diff_isa,\n \t\t\t       prev_isa2 & diff_isa2,\n \t\t\t       prev_arch,\n \t\t\t       prev_tune,\n \t\t\t       (enum fpmath_unit) prev_opt->x_ix86_fpmath,\n \t\t\t       cpp_undef);\n+  cpp_stop_forcing_token_locations (parse_in);\n \n   /* For the definitions, ensure all newly defined macros are considered\n      as used for -Wunused-macros.  There is no point warning about the\n@@ -717,12 +719,14 @@ ix86_pragma_target_parse (tree args, tree pop_target)\n   cpp_opts->warn_unused_macros = 0;\n \n   /* Define all of the macros for new options that were just turned on.  */\n+  cpp_force_token_locations (parse_in, BUILTINS_LOCATION);\n   ix86_target_macros_internal (cur_isa & diff_isa,\n \t\t\t       cur_isa2 & diff_isa2,\n \t\t\t       cur_arch,\n \t\t\t       cur_tune,\n \t\t\t       (enum fpmath_unit) cur_opt->x_ix86_fpmath,\n \t\t\t       cpp_define);\n+  cpp_stop_forcing_token_locations (parse_in);\n \n   cpp_opts->warn_unused_macros = saved_warn_unused_macros;\n "}, {"sha": "74601a0905b8539dc4f1e080a33de3e949fd9176", "filename": "gcc/config/s390/s390-c.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dbe26b949c6142b278ab7af2bac4545e8d524f2/gcc%2Fconfig%2Fs390%2Fs390-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dbe26b949c6142b278ab7af2bac4545e8d524f2/gcc%2Fconfig%2Fs390%2Fs390-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-c.c?ref=1dbe26b949c6142b278ab7af2bac4545e8d524f2", "patch": "@@ -457,7 +457,9 @@ s390_pragma_target_parse (tree args, tree pop_target)\n     cpp_opts->warn_unused_macros = 0;\n \n     /* Define all of the macros for new options that were just turned on.  */\n+    cpp_force_token_locations (parse_in, BUILTINS_LOCATION);\n     s390_cpu_cpp_builtins_internal (parse_in, cur_opt, prev_opt);\n+    cpp_stop_forcing_token_locations (parse_in);\n \n     cpp_opts->warn_unused_macros = saved_warn_unused_macros;\n   }"}, {"sha": "a1724198d3db79495bb27e2300d0aee0553e943b", "filename": "gcc/testsuite/g++.dg/cpp/pr103012.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dbe26b949c6142b278ab7af2bac4545e8d524f2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fpr103012.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dbe26b949c6142b278ab7af2bac4545e8d524f2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fpr103012.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fpr103012.C?ref=1dbe26b949c6142b278ab7af2bac4545e8d524f2", "patch": "@@ -0,0 +1,18 @@\n+// PR c++/103012\n+// { dg-do compile }\n+\n+int a = 1;\n+#pragma GCC optimize \"Og\"\n+#define A(a) a +\n+#define B(a) A(a)A(a)\n+#define C(a) B(a)B(a)\n+#define D(a) C(a)C(a)\n+#define E(a) D(a)D(a)\n+#define F(a) E(a)E(a)\n+#define G(a) F(a)F(a)\n+#define H(a) G(a)G(a)\n+#define I(a) H(a)H(a)\n+#define J(a) I(a)I(a)\n+#define K(a) J(a)J(a)\n+#define L(a) K(a)K(a)\n+int b = L(a) 1;"}, {"sha": "2c9a8cd91d5c1f56a25a385fd8a3b1d8448d021f", "filename": "gcc/testsuite/g++.target/i386/pr103012.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dbe26b949c6142b278ab7af2bac4545e8d524f2/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr103012.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dbe26b949c6142b278ab7af2bac4545e8d524f2/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr103012.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr103012.C?ref=1dbe26b949c6142b278ab7af2bac4545e8d524f2", "patch": "@@ -0,0 +1,19 @@\n+// PR c++/103012\n+// { dg-do compile }\n+// { dg-options \"-mno-avx2\" }\n+\n+int a = 1;\n+#pragma GCC target \"avx2\"\n+#define A(a) a +\n+#define B(a) A(a)A(a)\n+#define C(a) B(a)B(a)\n+#define D(a) C(a)C(a)\n+#define E(a) D(a)D(a)\n+#define F(a) E(a)E(a)\n+#define G(a) F(a)F(a)\n+#define H(a) G(a)G(a)\n+#define I(a) H(a)H(a)\n+#define J(a) I(a)I(a)\n+#define K(a) J(a)J(a)\n+#define L(a) K(a)K(a)\n+int b = L(a) 1;"}]}