{"sha": "da15f931e57b8783d9fa6c4e5f18e62eadc16ff7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGExNWY5MzFlNTdiODc4M2Q5ZmE2YzRlNWYxOGU2MmVhZGMxNmZmNw==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-10-28T20:01:11Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-10-28T20:01:11Z"}, "message": "m68hc11-protos.h (m68hc11_function_arg): Delete.\n\n\t* config/m68hc11/m68hc11-protos.h (m68hc11_function_arg): Delete.\n\t(m68hc11_function_arg_advance): Delete.\n\t* config/m68hc11/m68hc11.h (FUNCTION_ARG): Delete.\n\t(FUNCTION_ARG_ADVANCE): Delete.\n\t* config/m68hc11/m68hc11.c (m68hc11_function_arg): Make static.\n\tTake a const_tree and a bool.\n\t(m68hc11_function_arg_advance): Likewise.\n\t(TARGET_FUNCTION_ARG, TARGET_FUNCTION_ARG_ADVANCE): Define.\n\nFrom-SVN: r166039", "tree": {"sha": "5015a0a70c79281747d304824c5f9467d349f7d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5015a0a70c79281747d304824c5f9467d349f7d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da15f931e57b8783d9fa6c4e5f18e62eadc16ff7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da15f931e57b8783d9fa6c4e5f18e62eadc16ff7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da15f931e57b8783d9fa6c4e5f18e62eadc16ff7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da15f931e57b8783d9fa6c4e5f18e62eadc16ff7/comments", "author": null, "committer": null, "parents": [{"sha": "bf425ddd466469e89f4d3d8ffdfb10f51fd6787a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf425ddd466469e89f4d3d8ffdfb10f51fd6787a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf425ddd466469e89f4d3d8ffdfb10f51fd6787a"}], "stats": {"total": 63, "additions": 27, "deletions": 36}, "files": [{"sha": "ba72067a9798b67d436dece51b81257842fb0b83", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da15f931e57b8783d9fa6c4e5f18e62eadc16ff7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da15f931e57b8783d9fa6c4e5f18e62eadc16ff7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=da15f931e57b8783d9fa6c4e5f18e62eadc16ff7", "patch": "@@ -1,3 +1,14 @@\n+2010-10-28  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* config/m68hc11/m68hc11-protos.h (m68hc11_function_arg): Delete.\n+\t(m68hc11_function_arg_advance): Delete.\n+\t* config/m68hc11/m68hc11.h (FUNCTION_ARG): Delete.\n+\t(FUNCTION_ARG_ADVANCE): Delete.\n+\t* config/m68hc11/m68hc11.c (m68hc11_function_arg): Make static.\n+\tTake a const_tree and a bool.\n+\t(m68hc11_function_arg_advance): Likewise.\n+\t(TARGET_FUNCTION_ARG, TARGET_FUNCTION_ARG_ADVANCE): Define.\n+\n 2010-10-28  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* config/stormy16/stormy16-protos.h (xstormy16_function_arg): Delete."}, {"sha": "08e0b4d9b13a9480ab481ca482a36a466352dbb9", "filename": "gcc/config/m68hc11/m68hc11-protos.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da15f931e57b8783d9fa6c4e5f18e62eadc16ff7/gcc%2Fconfig%2Fm68hc11%2Fm68hc11-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da15f931e57b8783d9fa6c4e5f18e62eadc16ff7/gcc%2Fconfig%2Fm68hc11%2Fm68hc11-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11-protos.h?ref=da15f931e57b8783d9fa6c4e5f18e62eadc16ff7", "patch": "@@ -31,13 +31,6 @@ extern int m68hc11_initial_elimination_offset (int, int);\n extern void expand_prologue (void);\n extern void expand_epilogue (void);\n \n-#ifdef TREE_CODE\n-extern void m68hc11_function_arg_advance (CUMULATIVE_ARGS*,\n-                                          enum machine_mode,\n-                                          tree,\n-                                          int);\n-#endif\n-\n #ifdef RTX_CODE\n extern int m68hc11_auto_inc_p (rtx);\n \n@@ -98,9 +91,6 @@ extern int soft_reg_operand (rtx, enum machine_mode);\n \n extern void m68hc11_init_cumulative_args (CUMULATIVE_ARGS*, tree, rtx);\n \n-extern rtx m68hc11_function_arg (const CUMULATIVE_ARGS* ,\n-                                 enum machine_mode,\n-                                 tree, int);\n #ifdef ARGS_SIZE_RTX\n extern enum direction m68hc11_function_arg_padding (enum machine_mode,\n \t\t\t\t\t\t    const_tree);"}, {"sha": "6e11a080bb23e44211fa79ca6c5d147f062b9fb0", "filename": "gcc/config/m68hc11/m68hc11.c", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da15f931e57b8783d9fa6c4e5f18e62eadc16ff7/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da15f931e57b8783d9fa6c4e5f18e62eadc16ff7/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c?ref=da15f931e57b8783d9fa6c4e5f18e62eadc16ff7", "patch": "@@ -98,6 +98,11 @@ static bool m68hc11_return_in_memory (const_tree, const_tree);\n static bool m68hc11_can_eliminate (const int, const int);\n static void m68hc11_trampoline_init (rtx, tree, rtx);\n \n+static rtx m68hc11_function_arg (CUMULATIVE_ARGS*, enum machine_mode,\n+\t\t\t\t const_tree, bool);\n+static void m68hc11_function_arg_advance (CUMULATIVE_ARGS*, enum machine_mode,\n+\t\t\t\t\t  const_tree, bool);\n+\n /* Must be set to 1 to produce debug messages.  */\n int debug_m6811 = 0;\n \n@@ -276,6 +281,11 @@ static const struct attribute_spec m68hc11_attribute_table[] =\n #undef TARGET_INIT_LIBFUNCS\n #define TARGET_INIT_LIBFUNCS m68hc11_init_libfuncs\n \n+#undef TARGET_FUNCTION_ARG\n+#define TARGET_FUNCTION_ARG m68hc11_function_arg\n+#undef TARGET_FUNCTION_ARG_ADVANCE\n+#define TARGET_FUNCTION_ARG_ADVANCE m68hc11_function_arg_advance\n+\n #undef TARGET_STRUCT_VALUE_RTX\n #define TARGET_STRUCT_VALUE_RTX m68hc11_struct_value_rtx\n #undef TARGET_RETURN_IN_MEMORY\n@@ -1477,9 +1487,9 @@ m68hc11_init_cumulative_args (CUMULATIVE_ARGS *cum, tree fntype, rtx libname)\n    of mode MODE and data type TYPE.\n    (TYPE is null for libcalls where that information may not be available.)  */\n \n-void\n+static void\n m68hc11_function_arg_advance (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n-                              tree type, int named ATTRIBUTE_UNUSED)\n+                              const_tree type, bool named ATTRIBUTE_UNUSED)\n {\n   if (mode != BLKmode)\n     {\n@@ -1515,9 +1525,10 @@ m68hc11_function_arg_advance (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n    NAMED is nonzero if this argument is a named parameter\n     (otherwise it is an extra parameter matching an ellipsis).  */\n \n-struct rtx_def *\n-m68hc11_function_arg (const CUMULATIVE_ARGS *cum, enum machine_mode mode,\n-                      tree type ATTRIBUTE_UNUSED, int named ATTRIBUTE_UNUSED)\n+static rtx\n+m68hc11_function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n+                      const_tree type ATTRIBUTE_UNUSED,\n+\t\t      bool named ATTRIBUTE_UNUSED)\n {\n   if (cum->words != 0)\n     {"}, {"sha": "8e817c824a0192941bf953b914a28266792c2e0c", "filename": "gcc/config/m68hc11/m68hc11.h", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da15f931e57b8783d9fa6c4e5f18e62eadc16ff7/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da15f931e57b8783d9fa6c4e5f18e62eadc16ff7/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h?ref=da15f931e57b8783d9fa6c4e5f18e62eadc16ff7", "patch": "@@ -890,27 +890,6 @@ typedef struct m68hc11_args\n #define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, INDIRECT, N_NAMED_ARGS) \\\n     (m68hc11_init_cumulative_args (&CUM, FNTYPE, LIBNAME))\n \n-/* Update the data in CUM to advance over an argument of mode MODE and data\n-   type TYPE. (TYPE is null for libcalls where that information may not be\n-   available.) */\n-#define FUNCTION_ARG_ADVANCE(CUM, MODE, TYPE, NAMED) \\\n-    (m68hc11_function_arg_advance (&CUM, MODE, TYPE, NAMED))\n-\n-/* Define where to put the arguments to a function.\n-   Value is zero to push the argument on the stack,\n-   or a hard register in which to store the argument.\n-\n-   MODE is the argument's machine mode.\n-   TYPE is the data type of the argument (as a tree).\n-    This is null for libcalls where that information may\n-    not be available.\n-   CUM is a variable of type CUMULATIVE_ARGS which gives info about\n-    the preceding args and about the function being called.\n-   NAMED is nonzero if this argument is a named parameter\n-    (otherwise it is an extra parameter matching an ellipsis).  */\n-#define FUNCTION_ARG(CUM, MODE, TYPE, NAMED) \\\n-  (m68hc11_function_arg (&CUM, MODE, TYPE, NAMED))\n-\n /* Define the profitability of saving registers around calls.\n \n    Disable this because the saving instructions generated by"}]}