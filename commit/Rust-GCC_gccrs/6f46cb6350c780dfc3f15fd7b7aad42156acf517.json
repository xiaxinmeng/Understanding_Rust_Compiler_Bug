{"sha": "6f46cb6350c780dfc3f15fd7b7aad42156acf517", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmY0NmNiNjM1MGM3ODBkZmMzZjE1ZmQ3YjdhYWQ0MjE1NmFjZjUxNw==", "commit": {"author": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2012-11-11T02:27:05Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@gcc.gnu.org", "date": "2012-11-11T02:27:05Z"}, "message": "extend.texi: Copy-edit to fix incorrect hyphenation phrases involving \"bit\"...\n\n2012-11-10  Sandra Loosemore  <sandra@codesourcery.com>\n\n\tgcc/\n\t* doc/extend.texi: Copy-edit to fix incorrect hyphenation phrases\n\tinvolving \"bit\", \"byte\", \"word\", \"precision\", and \"floating\"\n\tmodifiers.\n\nFrom-SVN: r193402", "tree": {"sha": "81d5189a1ed217903232344dee3c2de917925cf8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/81d5189a1ed217903232344dee3c2de917925cf8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f46cb6350c780dfc3f15fd7b7aad42156acf517", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f46cb6350c780dfc3f15fd7b7aad42156acf517", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f46cb6350c780dfc3f15fd7b7aad42156acf517", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f46cb6350c780dfc3f15fd7b7aad42156acf517/comments", "author": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c61e8502c1ea36112a24b80015e0b8a484c61946", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c61e8502c1ea36112a24b80015e0b8a484c61946", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c61e8502c1ea36112a24b80015e0b8a484c61946"}], "stats": {"total": 140, "additions": 73, "deletions": 67}, "files": [{"sha": "0bdca350b793e4436e5650a75c31158ad499a7c1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f46cb6350c780dfc3f15fd7b7aad42156acf517/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f46cb6350c780dfc3f15fd7b7aad42156acf517/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6f46cb6350c780dfc3f15fd7b7aad42156acf517", "patch": "@@ -1,3 +1,9 @@\n+2012-11-10  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* doc/extend.texi: Copy-edit to fix incorrect hyphenation phrases\n+\tinvolving \"bit\", \"byte\", \"word\", \"precision\", and \"floating\"\n+\tmodifiers.\n+\n 2012-11-10  Sandra Loosemore  <sandra@codesourcery.com>\n \n \t* doc/extend.texi: Copy-edit to fix incorrect uses of \"which\" "}, {"sha": "28269e47b085fb73fe90eab31873e4083b273c37", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 67, "deletions": 67, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f46cb6350c780dfc3f15fd7b7aad42156acf517/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f46cb6350c780dfc3f15fd7b7aad42156acf517/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=6f46cb6350c780dfc3f15fd7b7aad42156acf517", "patch": "@@ -812,11 +812,11 @@ effects of recomputing it.\n @cindex @code{__int128} data types\n \n As an extension the integer scalar type @code{__int128} is supported for\n-targets having an integer mode wide enough to hold 128-bit.\n+targets having an integer mode wide enough to hold 128 bits.\n Simply write @code{__int128} for a signed 128-bit integer, or\n @code{unsigned __int128} for an unsigned 128-bit integer.  There is no\n support in GCC to express an integer constant of type @code{__int128}\n-for targets having @code{long long} integer with less then 128 bit width.\n+for targets having @code{long long} integer less than 128 bits wide.\n \n @node Long Long\n @section Double-Word Integers\n@@ -917,8 +917,8 @@ examine and set these two fictitious variables with your debugger.\n @cindex @code{Q} floating point suffix\n \n As an extension, the GNU C compiler supports additional floating\n-types, @code{__float80} and @code{__float128} to support 80bit\n-(@code{XFmode}) and 128 bit (@code{TFmode}) floating types.\n+types, @code{__float80} and @code{__float128} to support 80-bit\n+(@code{XFmode}) and 128-bit (@code{TFmode}) floating types.\n Support for additional types includes the arithmetic operators:\n add, subtract, multiply, divide; unary arithmetic operators;\n relational operators; equality operators; and conversions to and from\n@@ -933,7 +933,7 @@ typedef _Complex float __attribute__((mode(TC))) _Complex128;\n typedef _Complex float __attribute__((mode(XC))) _Complex80;\n @end smallexample\n \n-Not all targets support additional floating point types.  @code{__float80}\n+Not all targets support additional floating-point types.  @code{__float80}\n and @code{__float128} types are supported on i386, x86_64 and ia64 targets.\n The @code{__float128} type is supported on hppa HP-UX targets.\n \n@@ -2475,11 +2475,11 @@ referenced.  On Microsoft Windows targets, the attribute can be disabled\n for functions by setting the @option{-mnop-fun-dllimport} flag.\n \n @item eightbit_data\n-@cindex eight bit data on the H8/300, H8/300H, and H8S\n+@cindex eight-bit data on the H8/300, H8/300H, and H8S\n Use this attribute on the H8/300, H8/300H, and H8S to indicate that the specified\n-variable should be placed into the eight bit data section.\n+variable should be placed into the eight-bit data section.\n The compiler generates more efficient code for certain operations\n-on data in the eight bit data area.  Note the eight bit data area is limited to\n+on data in the eight-bit data area.  Note the eight-bit data area is limited to\n 256 bytes of data.\n \n You must use GAS and GLD from GNU binutils version 2.7 or later for\n@@ -2710,8 +2710,8 @@ from the special page vector table which contains the 16 low-order\n bits of the subroutine's entry address. Each vector table has special\n page number (18 to 255) that is used in @code{jsrs} instructions.\n Jump addresses of the routines are generated by adding 0x0F0000 (in\n-case of M16C targets) or 0xFF0000 (in case of M32C targets), to the 2\n-byte addresses set in the vector table. Therefore you need to ensure\n+case of M16C targets) or 0xFF0000 (in case of M32C targets), to the\n+2-byte addresses set in the vector table. Therefore you need to ensure\n that all the special page vector routines should get mapped within the\n address range 0x0F0000 to 0x0FFFFF (for M16C) and 0xFF0000 to 0xFFFFFF\n (for M32C).\n@@ -2811,7 +2811,7 @@ void f () __attribute__ ((interrupt (\"IRQ\")));\n Permissible values for this parameter are: IRQ, FIQ, SWI, ABORT and UNDEF@.\n \n On ARMv7-M the interrupt type is ignored, and the attribute means the function\n-may be called with a word aligned stack pointer.\n+may be called with a word-aligned stack pointer.\n \n On Epiphany targets one or more optional parameters can be added like this:\n \n@@ -3085,7 +3085,7 @@ caller pops the stack for hidden pointer.\n @item ms_hook_prologue\n @cindex @code{ms_hook_prologue} attribute\n \n-On 32 bit i[34567]86-*-* targets and 64 bit x86_64-*-* targets, you can use\n+On 32-bit i[34567]86-*-* targets and 64-bit x86_64-*-* targets, you can use\n this function attribute to make gcc generate the \"hot-patching\" function\n prologue used in Win32 API functions in Microsoft Windows XP Service Pack 2\n and newer.\n@@ -3422,10 +3422,10 @@ problem.)\n @item sseregparm\n @cindex @code{sseregparm} attribute\n On the Intel 386 with SSE support, the @code{sseregparm} attribute\n-causes the compiler to pass up to 3 floating point arguments in\n+causes the compiler to pass up to 3 floating-point arguments in\n SSE registers instead of on the stack.  Functions that take a\n variable number of arguments continue to pass all of their\n-floating point arguments on the stack.\n+floating-point arguments on the stack.\n \n @item force_align_arg_pointer\n @cindex @code{force_align_arg_pointer} attribute\n@@ -3696,7 +3696,7 @@ Enable/disable the generation of the CLD before string moves.\n @itemx no-fancy-math-387\n @cindex @code{target(\"fancy-math-387\")} attribute\n Enable/disable the generation of the @code{sin}, @code{cos}, and\n-@code{sqrt} instructions on the 387 floating point unit.\n+@code{sqrt} instructions on the 387 floating-point unit.\n \n @item fused-madd\n @itemx no-fused-madd\n@@ -3729,7 +3729,7 @@ Do/do not align destination of inlined string operations.\n @cindex @code{target(\"recip\")} attribute\n Enable/disable the generation of RCPSS, RCPPS, RSQRTSS and RSQRTPS\n instructions followed an additional Newton-Raphson step instead of\n-doing a floating point division.\n+doing a floating-point division.\n \n @item arch=@var{ARCH}\n @cindex @code{target(\"arch=@var{ARCH}\")} attribute\n@@ -3741,7 +3741,7 @@ Specify the architecture to tune for in compiling the function.\n \n @item fpmath=@var{FPMATH}\n @cindex @code{target(\"fpmath=@var{FPMATH}\")} attribute\n-Specify which floating point unit to use.  The\n+Specify which floating-point unit to use.  The\n @code{target(\"fpmath=sse,387\")} option must be specified as\n @code{target(\"fpmath=sse+387\")} because the comma would separate\n different options.\n@@ -3781,7 +3781,7 @@ that support the PowerPC V2.03 architecture.\n @item hard-dfp\n @itemx no-hard-dfp\n @cindex @code{target(\"hard-dfp\")} attribute\n-Generate code that uses (does not use) the decimal floating point\n+Generate code that uses (does not use) the decimal floating-point\n instructions implemented on some POWER processors.\n \n @item isel\n@@ -3827,8 +3827,8 @@ location.\n @item popcntb\n @itemx no-popcntb\n @cindex @code{target(\"popcntb\")} attribute\n-Generate code that uses (does not use) the popcount and double\n-precision FP reciprocal estimate instruction implemented on the POWER5\n+Generate code that uses (does not use) the popcount and double-precision\n+FP reciprocal estimate instruction implemented on the POWER5\n processor and other processors that support the PowerPC V2.02\n architecture.\n \n@@ -3857,7 +3857,7 @@ floating-point square root.\n @itemx no-recip-precision\n @cindex @code{target(\"recip-precision\")} attribute\n Assume (do not assume) that the reciprocal estimate instructions\n-provide higher precision estimates than is mandated by the powerpc\n+provide higher-precision estimates than is mandated by the powerpc\n ABI.\n \n @item string\n@@ -3881,9 +3881,9 @@ cannot enable VSX or Altivec instructions unless\n @cindex @code{target(\"friz\")} attribute\n Generate (do not generate) the @code{friz} instruction when the\n @option{-funsafe-math-optimizations} option is used to optimize\n-rounding a floating point value to 64-bit integer and back to floating\n+rounding a floating-point value to 64-bit integer and back to floating\n point.  The @code{friz} instruction does not return the same value if\n-the floating point number is too large to fit in an integer.\n+the floating-point number is too large to fit in an integer.\n \n @item avoid-indexed-addresses\n @itemx no-avoid-indexed-addresses\n@@ -3939,7 +3939,7 @@ Use this attribute on the H8/300H and H8S to indicate that the specified\n variable should be placed into the tiny data section.\n The compiler generates more efficient code for loads and stores\n on data in the tiny data section.  Note the tiny data area is limited to\n-slightly under 32kbytes of data.\n+slightly under 32KB of data.\n \n @item trap_exit\n @cindex @code{trap_exit} attribute\n@@ -4587,8 +4587,8 @@ by inherent limitations in your linker.  On many systems, the linker is\n only able to arrange for variables to be aligned up to a certain maximum\n alignment.  (For some linkers, the maximum supported alignment may\n be very very small.)  If your linker is only able to align variables\n-up to a maximum of 8 byte alignment, then specifying @code{aligned(16)}\n-in an @code{__attribute__} still only provides you with 8 byte\n+up to a maximum of 8-byte alignment, then specifying @code{aligned(16)}\n+in an @code{__attribute__} still only provides you with 8-byte\n alignment.  See your linker documentation for further information.\n \n The @code{aligned} attribute can also be used for functions\n@@ -4652,7 +4652,7 @@ types (@pxref{Function Attributes}, @pxref{Type Attributes}.)\n @cindex @code{mode} attribute\n This attribute specifies the data type for the declaration---whichever\n type corresponds to the mode @var{mode}.  This in effect lets you\n-request an integer or floating point type according to its width.\n+request an integer or floating-point type according to its width.\n \n You may also specify a mode of @samp{byte} or @samp{__byte__} to\n indicate the mode corresponding to a one-byte integer, @samp{word} or\n@@ -4931,9 +4931,9 @@ addresses).\n The MeP target has a number of addressing modes and busses.  The\n @code{near} space spans the standard memory space's first 16 megabytes\n (24 bits).  The @code{far} space spans the entire 32-bit memory space.\n-The @code{based} space is a 128 byte region in the memory space that\n+The @code{based} space is a 128-byte region in the memory space that\n is addressed relative to the @code{$tp} register.  The @code{tiny}\n-space is a 65536 byte region relative to the @code{$gp} register.  In\n+space is a 65536-byte region relative to the @code{$gp} register.  In\n addition to these memory regions, the MeP target has a separate 16-bit\n control bus which is specified with @code{cb} attributes.\n \n@@ -5260,8 +5260,8 @@ by inherent limitations in your linker.  On many systems, the linker is\n only able to arrange for variables to be aligned up to a certain maximum\n alignment.  (For some linkers, the maximum supported alignment may\n be very very small.)  If your linker is only able to align variables\n-up to a maximum of 8 byte alignment, then specifying @code{aligned(16)}\n-in an @code{__attribute__} still only provides you with 8 byte\n+up to a maximum of 8-byte alignment, then specifying @code{aligned(16)}\n+in an @code{__attribute__} still only provides you with 8-byte\n alignment.  See your linker documentation for further information.\n \n @item packed\n@@ -5814,7 +5814,7 @@ asm (\"fsinx %1,%0\" : \"=f\" (result) : \"f\" (angle));\n @noindent\n Here @code{angle} is the C expression for the input operand while\n @code{result} is that of the output operand.  Each has @samp{\"f\"} as its\n-operand constraint, saying that a floating point register is required.\n+operand constraint, saying that a floating-point register is required.\n The @samp{=} in @samp{=f} indicates that the operand is an output; all\n output operands' constraints must use @samp{=}.  The constraints use the\n same language used in the machine description (@pxref{Constraints}).\n@@ -6116,7 +6116,7 @@ instruction.)  Note that even a volatile @code{asm} instruction\n can be moved relative to other code, including across jump\n instructions.  For example, on many targets there is a system\n register that can be set to control the rounding mode of\n-floating point operations.  You might try\n+floating-point operations.  You might try\n setting it with a volatile @code{asm}, like this PowerPC example:\n \n @smallexample\n@@ -6270,7 +6270,7 @@ space in the object file than is needed for a single instruction.\n If this happens then the assembler produces a diagnostic saying that\n a label is unreachable.\n \n-@subsection i386 floating point asm operands\n+@subsection i386 floating-point asm operands\n \n There are several rules on the usage of stack-like regs in\n asm_operands insns.  These rules apply only to the operands that are\n@@ -8054,7 +8054,7 @@ are all recognized as built-in functions unless\n is specified for an individual function).  All of these functions have\n corresponding versions prefixed with @code{__builtin_}.\n \n-GCC provides built-in versions of the ISO C99 floating point comparison\n+GCC provides built-in versions of the ISO C99 floating-point comparison\n macros that avoid raising exceptions for unordered operands.  They have\n the same names as the standard macros ( @code{isgreater},\n @code{isgreaterequal}, @code{isless}, @code{islessequal},\n@@ -8332,15 +8332,15 @@ if it is non-zero means misalignment offset.  For example:\n void *x = __builtin_assume_aligned (arg, 16);\n @end smallexample\n \n-means that the compiler can assume x, set to arg, is at least\n-16 byte aligned, while:\n+means that the compiler can assume @code{x}, set to @code{arg}, is at least\n+16-byte aligned, while:\n \n @smallexample\n void *x = __builtin_assume_aligned (arg, 32, 8);\n @end smallexample\n \n-means that the compiler can assume for x, set to arg, that\n-(char *) x - 8 is 32 byte aligned.\n+means that the compiler can assume for @code{x}, set to @code{arg}, that\n+@code{(char *) x - 8} is 32-byte aligned.\n @end deftypefn\n \n @deftypefn {Built-in Function} int __builtin_LINE ()\n@@ -8434,7 +8434,7 @@ five int arguments should be the target library's notion of the\n possible FP classes and are used for return values.  They must be\n constant values and they must appear in this order: @code{FP_NAN},\n @code{FP_INFINITE}, @code{FP_NORMAL}, @code{FP_SUBNORMAL} and\n-@code{FP_ZERO}.  The ellipsis is for exactly one floating point value\n+@code{FP_ZERO}.  The ellipsis is for exactly one floating-point value\n to classify.  GCC treats the last argument as type-generic, which\n means it does not do default promotion from float to double.\n @end deftypefn\n@@ -8469,7 +8469,7 @@ type is @code{long double}.\n @deftypefn {Built-in Function} int __builtin_isinf_sign (...)\n Similar to @code{isinf}, except the return value is negative for\n an argument of @code{-Inf}.  Note while the parameter list is an\n-ellipsis, this function only accepts exactly one floating point\n+ellipsis, this function only accepts exactly one floating-point\n argument.  GCC treats this parameter as type-generic, which means it\n does not do default promotion from float to double.\n @end deftypefn\n@@ -8638,12 +8638,12 @@ exactly 8 bits.\n \n @deftypefn {Built-in Function} uint32_t __builtin_bswap32 (uint32_t x)\n Similar to @code{__builtin_bswap16}, except the argument and return types\n-are 32-bit.\n+are 32 bit.\n @end deftypefn\n \n @deftypefn {Built-in Function} uint64_t __builtin_bswap64 (uint64_t x)\n Similar to @code{__builtin_bswap32}, except the argument and return types\n-are 64-bit.\n+are 64 bit.\n @end deftypefn\n \n @node Target Builtins\n@@ -9009,8 +9009,8 @@ __builtin_avr_insert_bits (0x32107654, bits, 0)\n @end smallexample\n \n @smallexample\n-// high-nibble of result is the high-nibble of val\n-// low-nibble of result is the low-nibble of bits\n+// high nibble of result is the high nibble of val\n+// low nibble of result is the low nibble of bits\n __builtin_avr_insert_bits (0xffff3210, bits, val)\n @end smallexample\n \n@@ -9480,19 +9480,19 @@ vector of eight 8-bit integers.  Some of the built-in functions operate on\n MMX registers as a whole 64-bit entity, these use @code{V1DI} as their mode.\n \n If 3DNow!@: extensions are enabled, @code{V2SF} is used as a mode for a vector\n-of two 32-bit floating point values.\n+of two 32-bit floating-point values.\n \n If SSE extensions are enabled, @code{V4SF} is used for a vector of four 32-bit\n-floating point values.  Some instructions use a vector of four 32-bit\n+floating-point values.  Some instructions use a vector of four 32-bit\n integers, these use @code{V4SI}.  Finally, some instructions operate on an\n entire vector register, interpreting it as a 128-bit integer, these use mode\n @code{TI}.\n \n In 64-bit mode, the x86-64 family of processors uses additional built-in\n functions for efficient use of @code{TF} (@code{__float128}) 128-bit\n-floating point and @code{TC} 128-bit complex floating point values.\n+floating point and @code{TC} 128-bit complex floating-point values.\n \n-The following floating point built-in functions are available in 64-bit\n+The following floating-point built-in functions are available in 64-bit\n mode.  All of them implement the function that is part of the name.\n \n @smallexample\n@@ -9508,7 +9508,7 @@ Generates the @code{pause} machine instruction with a compiler memory\n barrier.\n @end table\n \n-The following floating point built-in functions are made available in the\n+The following floating-point built-in functions are made available in the\n 64-bit mode.\n \n @table @code\n@@ -11370,7 +11370,7 @@ In each case, @var{cond} can be any of the 16 floating-point conditions:\n @table @code\n @item v2sf __builtin_mips_movt_c_@var{cond}_ps (v2sf @var{a}, v2sf @var{b}, v2sf @var{c}, v2sf @var{d})\n @itemx v2sf __builtin_mips_movf_c_@var{cond}_ps (v2sf @var{a}, v2sf @var{b}, v2sf @var{c}, v2sf @var{d})\n-Conditional move based on floating point comparison (@code{c.@var{cond}.ps},\n+Conditional move based on floating-point comparison (@code{c.@var{cond}.ps},\n @code{movt.ps}/@code{movf.ps}).\n \n The @code{movt} functions return the value @var{x} computed by:\n@@ -11434,23 +11434,23 @@ Convert paired word to paired single (@code{cvt.ps.pw}).\n @item float __builtin_mips_recip1_s (float)\n @itemx double __builtin_mips_recip1_d (double)\n @itemx v2sf __builtin_mips_recip1_ps (v2sf)\n-Reduced precision reciprocal (sequence step 1) (@code{recip1.@var{fmt}}).\n+Reduced-precision reciprocal (sequence step 1) (@code{recip1.@var{fmt}}).\n \n @item float __builtin_mips_recip2_s (float, float)\n @itemx double __builtin_mips_recip2_d (double, double)\n @itemx v2sf __builtin_mips_recip2_ps (v2sf, v2sf)\n-Reduced precision reciprocal (sequence step 2) (@code{recip2.@var{fmt}}).\n+Reduced-precision reciprocal (sequence step 2) (@code{recip2.@var{fmt}}).\n \n @item float __builtin_mips_rsqrt1_s (float)\n @itemx double __builtin_mips_rsqrt1_d (double)\n @itemx v2sf __builtin_mips_rsqrt1_ps (v2sf)\n-Reduced precision reciprocal square root (sequence step 1)\n+Reduced-precision reciprocal square root (sequence step 1)\n (@code{rsqrt1.@var{fmt}}).\n \n @item float __builtin_mips_rsqrt2_s (float, float)\n @itemx double __builtin_mips_rsqrt2_d (double, double)\n @itemx v2sf __builtin_mips_rsqrt2_ps (v2sf, v2sf)\n-Reduced precision reciprocal square root (sequence step 2)\n+Reduced-precision reciprocal square root (sequence step 2)\n (@code{rsqrt2.@var{fmt}}).\n @end table\n \n@@ -11578,7 +11578,7 @@ picoChip instruction set.\n @table @code\n @item int __builtin_sbc (int @var{value})\n Sign bit count.  Return the number of consecutive bits in @var{value}\n-that have the same value as the sign-bit.  The result is the number of\n+that have the same value as the sign bit.  The result is the number of\n leading sign bits minus one, giving the number of redundant sign bits in\n @var{value}.\n \n@@ -13763,36 +13763,36 @@ with the specified value.\n \n @deftypefn {Built-in Function}  void __builtin_rx_machi (int, int)\n Generates the @code{machi} machine instruction to add the result of\n-multiplying the top 16-bits of the two arguments into the\n+multiplying the top 16 bits of the two arguments into the\n accumulator.\n @end deftypefn\n \n @deftypefn {Built-in Function}  void __builtin_rx_maclo (int, int)\n Generates the @code{maclo} machine instruction to add the result of\n-multiplying the bottom 16-bits of the two arguments into the\n+multiplying the bottom 16 bits of the two arguments into the\n accumulator.\n @end deftypefn\n \n @deftypefn {Built-in Function}  void __builtin_rx_mulhi (int, int)\n Generates the @code{mulhi} machine instruction to place the result of\n-multiplying the top 16-bits of the two arguments into the\n+multiplying the top 16 bits of the two arguments into the\n accumulator.\n @end deftypefn\n \n @deftypefn {Built-in Function}  void __builtin_rx_mullo (int, int)\n Generates the @code{mullo} machine instruction to place the result of\n-multiplying the bottom 16-bits of the two arguments into the\n+multiplying the bottom 16 bits of the two arguments into the\n accumulator.\n @end deftypefn\n \n @deftypefn {Built-in Function}  int  __builtin_rx_mvfachi (void)\n Generates the @code{mvfachi} machine instruction to read the top\n-32-bits of the accumulator.\n+32 bits of the accumulator.\n @end deftypefn\n \n @deftypefn {Built-in Function}  int  __builtin_rx_mvfacmi (void)\n Generates the @code{mvfacmi} machine instruction to read the middle\n-32-bits of the accumulator.\n+32 bits of the accumulator.\n @end deftypefn\n \n @deftypefn {Built-in Function}  int __builtin_rx_mvfc (int)\n@@ -13802,12 +13802,12 @@ register specified in its argument and returns its value.\n \n @deftypefn {Built-in Function}  void __builtin_rx_mvtachi (int)\n Generates the @code{mvtachi} machine instruction to set the top\n-32-bits of the accumulator.\n+32 bits of the accumulator.\n @end deftypefn\n \n @deftypefn {Built-in Function}  void __builtin_rx_mvtaclo (int)\n Generates the @code{mvtaclo} machine instruction to set the bottom\n-32-bits of the accumulator.\n+32 bits of the accumulator.\n @end deftypefn\n \n @deftypefn {Built-in Function}  void __builtin_rx_mvtc (int reg, int val)\n@@ -13838,8 +13838,8 @@ repeated multiply and accumulate sequence.\n \n @deftypefn {Built-in Function}  void __builtin_rx_round (float)\n Generates the @code{round} machine instruction which returns the\n-floating point argument rounded according to the current rounding mode\n-set in the floating point status word register.\n+floating-point argument rounded according to the current rounding mode\n+set in the floating-point status word register.\n @end deftypefn\n \n @deftypefn {Built-in Function}  int __builtin_rx_sat (int)\n@@ -15089,7 +15089,7 @@ Non-@code{static} members shall not be @code{__thread}.\n Integer constants can be written as binary constants, consisting of a\n sequence of @samp{0} and @samp{1} digits, prefixed by @samp{0b} or\n @samp{0B}.  This is particularly useful in environments that operate a\n-lot on the bit-level (like microcontrollers).\n+lot on the bit level (like microcontrollers).\n \n The following statements are identical:\n "}]}