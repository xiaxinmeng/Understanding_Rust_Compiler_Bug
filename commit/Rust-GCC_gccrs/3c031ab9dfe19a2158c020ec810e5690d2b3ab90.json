{"sha": "3c031ab9dfe19a2158c020ec810e5690d2b3ab90", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2MwMzFhYjlkZmUxOWEyMTU4YzAyMGVjODEwZTU2OTBkMmIzYWI5MA==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2007-12-04T10:32:04Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2007-12-04T10:32:04Z"}, "message": "re PR fortran/34318 (Modules: Infinity/NaN parameters read as 0.0)\n\n2007-12-04  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/34318\n        * module.c (mio_gmp_real): Properly write NaN and Infinity.\n\n2007-12-04  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/34318\n        * gfortran.dg/module_nan.f90: New.\n\nFrom-SVN: r130600", "tree": {"sha": "5f2358bbfaf10b9c3d13b1e85b67b9c5db0f5d2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f2358bbfaf10b9c3d13b1e85b67b9c5db0f5d2c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c031ab9dfe19a2158c020ec810e5690d2b3ab90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c031ab9dfe19a2158c020ec810e5690d2b3ab90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c031ab9dfe19a2158c020ec810e5690d2b3ab90", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c031ab9dfe19a2158c020ec810e5690d2b3ab90/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0ffd38c81f2beb16d71d95a8cfa1b532d9d602ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ffd38c81f2beb16d71d95a8cfa1b532d9d602ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ffd38c81f2beb16d71d95a8cfa1b532d9d602ea"}], "stats": {"total": 46, "additions": 46, "deletions": 0}, "files": [{"sha": "a457fa273bc6eb9be0d427e832983086f18d7939", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c031ab9dfe19a2158c020ec810e5690d2b3ab90/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c031ab9dfe19a2158c020ec810e5690d2b3ab90/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=3c031ab9dfe19a2158c020ec810e5690d2b3ab90", "patch": "@@ -1,3 +1,8 @@\n+2007-12-04  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/34318\n+\t* module.c (mio_gmp_real): Properly write NaN and Infinity.\n+\n 2007-12-02  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/34186"}, {"sha": "af81c3aee7cfd7ad38366b33a4f727e5793f5341", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c031ab9dfe19a2158c020ec810e5690d2b3ab90/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c031ab9dfe19a2158c020ec810e5690d2b3ab90/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=3c031ab9dfe19a2158c020ec810e5690d2b3ab90", "patch": "@@ -2535,6 +2535,14 @@ mio_gmp_real (mpfr_t *real)\n   else\n     {\n       p = mpfr_get_str (NULL, &exponent, 16, 0, *real, GFC_RND_MODE);\n+\n+      if (mpfr_nan_p (*real) || mpfr_inf_p (*real))\n+\t{\n+\t  write_atom (ATOM_STRING, p);\n+\t  gfc_free (p);\n+\t  return;\n+\t}\n+\n       atom_string = gfc_getmem (strlen (p) + 20);\n \n       sprintf (atom_string, \"0.%s@%ld\", p, exponent);"}, {"sha": "6f7e2d929b6b9e1cadc489ecddf5ef9e76f7a0e2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c031ab9dfe19a2158c020ec810e5690d2b3ab90/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c031ab9dfe19a2158c020ec810e5690d2b3ab90/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3c031ab9dfe19a2158c020ec810e5690d2b3ab90", "patch": "@@ -1,3 +1,8 @@\n+2007-12-04  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/34318\n+\t* gfortran.dg/module_nan.f90: New.\n+\n 2007-12-04  Richard Sandiford  <rsandifo@nildram.co.uk>\n \n \t* lib/target-supports.exp (get_compiler_messages): Replace with..."}, {"sha": "055880e5d62a41c4589a498604fcf761e080f86a", "filename": "gcc/testsuite/gfortran.dg/module_nan.f90", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c031ab9dfe19a2158c020ec810e5690d2b3ab90/gcc%2Ftestsuite%2Fgfortran.dg%2Fmodule_nan.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c031ab9dfe19a2158c020ec810e5690d2b3ab90/gcc%2Ftestsuite%2Fgfortran.dg%2Fmodule_nan.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fmodule_nan.f90?ref=3c031ab9dfe19a2158c020ec810e5690d2b3ab90", "patch": "@@ -0,0 +1,28 @@\n+! { dg-do run }\n+! { dg-options \"-fno-range-check\" }\n+!\n+! PR fortran/34318\n+!\n+! Infinity and NaN were not properly written to the .mod file.\n+!\n+module nonordinal\n+  implicit none\n+  real, parameter :: inf = 1./0., nan = 0./0., minf = -1./0.0\n+end module nonordinal\n+\n+program a\n+  use nonordinal\n+  implicit none\n+  character(len=20) :: str\n+  if (log(abs(inf))  < huge(inf)) call abort()\n+  if (log(abs(minf)) < huge(inf)) call abort()\n+  if (.not. isnan(nan)) call abort()\n+  write(str,*) inf\n+  if (adjustl(str) /= \"+Infinity\") call abort()\n+  write(str,*) minf\n+  if (adjustl(str) /= \"-Infinity\") call abort()\n+  write(str,*) nan\n+  if (adjustl(str) /= \"NaN\") call abort()\n+end program a\n+\n+! { dg-final { cleanup-modules \"nonordinal\" } }"}]}