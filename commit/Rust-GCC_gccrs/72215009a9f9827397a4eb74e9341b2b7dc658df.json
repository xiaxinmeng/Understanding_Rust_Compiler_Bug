{"sha": "72215009a9f9827397a4eb74e9341b2b7dc658df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzIyMTUwMDlhOWY5ODI3Mzk3YTRlYjc0ZTkzNDFiMmI3ZGM2NThkZg==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2019-06-03T11:20:58Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2019-06-03T11:20:58Z"}, "message": "[AArch64] Emit TARGET_DOTPROD-specific sequence for <us>sadv16qi\n\nWilco pointed out that when the Dot Product instructions are available we can use them\nto generate an even more efficient expansion for the [us]sadv16qi optab.\nInstead of the current:\n        uabdl2  v0.8h, v1.16b, v2.16b\n        uabal   v0.8h, v1.8b, v2.8b\n        uadalp  v3.4s, v0.8h\n\nwe can generate:\n      (1)  mov    v4.16b, 1\n      (2)  uabd    v0.16b, v1.16b, v2.16b\n      (3)  udot    v3.4s, v0.16b, v4.16b\n\nInstruction (1) can be CSEd across multiple such expansions and even hoisted outside of loops,\nso when this sequence appears frequently back-to-back (like in x264_r) we essentially only have 2 instructions\nper sum. Also, the UDOT instruction does the byte-to-word accumulation in one step, which allows us to use\nthe much simpler UABD instruction before it.\n\nThis makes it a shorter and lower-latency sequence overall for targets that support it.\n\n\t* config/aarch64/iterators.md (MAX_OPP): New code attr.\n\t* config/aarch64/aarch64-simd.md (*aarch64_<su>abd<mode>_3): Rename to...\n\t(aarch64_<su>abd<mode>_3): ... This.\n\t(<sur>sadv16qi): Add TARGET_DOTPROD expansion.\n\n\t* gcc.target/aarch64/ssadv16qi.c: Add +nodotprod to pragma.\n\t* gcc.target/aarch64/usadv16qi.c: Likewise.\n\t* gcc.target/aarch64/ssadv16qi-dotprod.c: New test.\n\t* gcc.target/aarch64/usadv16qi-dotprod.c: Likewise.\n\nFrom-SVN: r271863", "tree": {"sha": "85c9597bd0985e8be2de5f8dfbbcce8493abad31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/85c9597bd0985e8be2de5f8dfbbcce8493abad31"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/72215009a9f9827397a4eb74e9341b2b7dc658df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72215009a9f9827397a4eb74e9341b2b7dc658df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72215009a9f9827397a4eb74e9341b2b7dc658df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72215009a9f9827397a4eb74e9341b2b7dc658df/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c89503d957f13f7f0a5eeeab1326048c455d9533", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c89503d957f13f7f0a5eeeab1326048c455d9533", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c89503d957f13f7f0a5eeeab1326048c455d9533"}], "stats": {"total": 101, "additions": 97, "deletions": 4}, "files": [{"sha": "06184edd27f20cbf86ec79f92b592964666ce688", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72215009a9f9827397a4eb74e9341b2b7dc658df/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72215009a9f9827397a4eb74e9341b2b7dc658df/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=72215009a9f9827397a4eb74e9341b2b7dc658df", "patch": "@@ -1,3 +1,10 @@\n+2019-06-03  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/iterators.md (MAX_OPP): New code attr.\n+\t* config/aarch64/aarch64-simd.md (*aarch64_<su>abd<mode>_3): Rename to...\n+\t(aarch64_<su>abd<mode>_3): ... This.\n+\t(<sur>sadv16qi): Add TARGET_DOTPROD expansion.\n+\n 2019-06-03  Richard Biener  <rguenther@suse.de>\n \n \t* tree-ssa-sccvn.c (ao_ref_init_from_vn_reference): Get original"}, {"sha": "b648e9e791658c45bd82c5a08c3d9f5809951b2c", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72215009a9f9827397a4eb74e9341b2b7dc658df/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72215009a9f9827397a4eb74e9341b2b7dc658df/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=72215009a9f9827397a4eb74e9341b2b7dc658df", "patch": "@@ -710,7 +710,7 @@\n ;; So (ABS:QI (minus:QI 64 -128)) == (ABS:QI (192 or -64 signed)) == 64.\n ;; Whereas SABD would return 192 (-64 signed) on the above example.\n ;; Use MINUS ([us]max (op1, op2), [us]min (op1, op2)) instead.\n-(define_insn \"*aarch64_<su>abd<mode>_3\"\n+(define_insn \"aarch64_<su>abd<mode>_3\"\n   [(set (match_operand:VDQ_BHSI 0 \"register_operand\" \"=w\")\n \t(minus:VDQ_BHSI\n \t  (USMAX:VDQ_BHSI\n@@ -764,7 +764,16 @@\n ;; UABAL\ttmp.8h, op1.16b, op2.16b\n ;; UADALP\top3.4s, tmp.8h\n ;; MOV\t\top0, op3 // should be eliminated in later passes.\n-;; The signed version just uses the signed variants of the above instructions.\n+;;\n+;; For TARGET_DOTPROD we do:\n+;; MOV\ttmp1.16b, #1 // Can be CSE'd and hoisted out of loops.\n+;; UABD\ttmp2.16b, op1.16b, op2.16b\n+;; UDOT\top3.4s, tmp2.16b, tmp1.16b\n+;; MOV\top0, op3 // RA will tie the operands of UDOT appropriately.\n+;;\n+;; The signed version just uses the signed variants of the above instructions\n+;; but for TARGET_DOTPROD still emits a UDOT as the absolute difference is\n+;; unsigned.\n \n (define_expand \"<sur>sadv16qi\"\n   [(use (match_operand:V4SI 0 \"register_operand\"))\n@@ -773,6 +782,15 @@\n    (use (match_operand:V4SI 3 \"register_operand\"))]\n   \"TARGET_SIMD\"\n   {\n+    if (TARGET_DOTPROD)\n+      {\n+\trtx ones = force_reg (V16QImode, CONST1_RTX (V16QImode));\n+\trtx abd = gen_reg_rtx (V16QImode);\n+\temit_insn (gen_aarch64_<sur>abdv16qi_3 (abd, operands[1], operands[2]));\n+\temit_insn (gen_aarch64_udotv16qi (operands[0], operands[3],\n+\t\t\t\t\t  abd, ones));\n+\tDONE;\n+      }\n     rtx reduc = gen_reg_rtx (V8HImode);\n     emit_insn (gen_aarch64_<sur>abdl2v16qi_3 (reduc, operands[1],\n \t\t\t\t\t       operands[2]));"}, {"sha": "112cf11f58ed48737696ec09836181462af4d848", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72215009a9f9827397a4eb74e9341b2b7dc658df/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72215009a9f9827397a4eb74e9341b2b7dc658df/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=72215009a9f9827397a4eb74e9341b2b7dc658df", "patch": "@@ -1,3 +1,10 @@\n+2019-06-03  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/aarch64/ssadv16qi.c: Add +nodotprod to pragma.\n+\t* gcc.target/aarch64/usadv16qi.c: Likewise.\n+\t* gcc.target/aarch64/ssadv16qi-dotprod.c: New test.\n+\t* gcc.target/aarch64/usadv16qi-dotprod.c: Likewise.\n+\n 2019-06-03  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n \n \t* lib/target-supports.exp (add_options_for_aarch64_sve): New procedure."}, {"sha": "08b6831cfbee2c44cf6a33f91986e2953c622148", "filename": "gcc/testsuite/gcc.target/aarch64/ssadv16qi-dotprod.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72215009a9f9827397a4eb74e9341b2b7dc658df/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fssadv16qi-dotprod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72215009a9f9827397a4eb74e9341b2b7dc658df/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fssadv16qi-dotprod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fssadv16qi-dotprod.c?ref=72215009a9f9827397a4eb74e9341b2b7dc658df", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_v8_2a_dotprod_neon_ok } */\n+/* { dg-add-options arm_v8_2a_dotprod_neon }  */\n+/* { dg-additional-options \"-O3\" } */\n+\n+#pragma GCC target \"+nosve\"\n+\n+#define N 1024\n+\n+signed char pix1[N], pix2[N];\n+\n+int foo (void)\n+{\n+  int i_sum = 0;\n+  int i;\n+\n+  for (i = 0; i < N; i++)\n+    i_sum += __builtin_abs (pix1[i] - pix2[i]);\n+\n+  return i_sum;\n+}\n+\n+/* { dg-final { scan-assembler-not {\\tsshll\\t} } } */\n+/* { dg-final { scan-assembler-not {\\tsshll2\\t} } } */\n+/* { dg-final { scan-assembler-not {\\tssubl\\t} } } */\n+/* { dg-final { scan-assembler-not {\\tssubl2\\t} } } */\n+/* { dg-final { scan-assembler-not {\\tabs\\t} } } */\n+\n+/* { dg-final { scan-assembler {\\tsabd\\t} } } */\n+/* { dg-final { scan-assembler {\\tudot\\t} } } */\n+"}, {"sha": "85a867a113013f560bfd0a3142805b9c95ad8c5a", "filename": "gcc/testsuite/gcc.target/aarch64/ssadv16qi.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72215009a9f9827397a4eb74e9341b2b7dc658df/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fssadv16qi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72215009a9f9827397a4eb74e9341b2b7dc658df/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fssadv16qi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fssadv16qi.c?ref=72215009a9f9827397a4eb74e9341b2b7dc658df", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-O3\" } */\n \n-#pragma GCC target \"+nosve\"\n+#pragma GCC target \"+nosve+nodotprod\"\n \n #define N 1024\n "}, {"sha": "ea8de4d69758bd6bc9af9e33e1498f838b706949", "filename": "gcc/testsuite/gcc.target/aarch64/usadv16qi-dotprod.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72215009a9f9827397a4eb74e9341b2b7dc658df/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fusadv16qi-dotprod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72215009a9f9827397a4eb74e9341b2b7dc658df/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fusadv16qi-dotprod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fusadv16qi-dotprod.c?ref=72215009a9f9827397a4eb74e9341b2b7dc658df", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_v8_2a_dotprod_neon_ok } */\n+/* { dg-add-options arm_v8_2a_dotprod_neon }  */\n+/* { dg-additional-options \"-O3\" } */\n+\n+#pragma GCC target \"+nosve\"\n+\n+#define N 1024\n+\n+unsigned char pix1[N], pix2[N];\n+\n+int foo (void)\n+{\n+  int i_sum = 0;\n+  int i;\n+\n+  for (i = 0; i < N; i++)\n+    i_sum += __builtin_abs (pix1[i] - pix2[i]);\n+\n+  return i_sum;\n+}\n+\n+/* { dg-final { scan-assembler-not {\\tushll\\t} } } */\n+/* { dg-final { scan-assembler-not {\\tushll2\\t} } } */\n+/* { dg-final { scan-assembler-not {\\tusubl\\t} } } */\n+/* { dg-final { scan-assembler-not {\\tusubl2\\t} } } */\n+/* { dg-final { scan-assembler-not {\\tabs\\t} } } */\n+\n+/* { dg-final { scan-assembler {\\tuabd\\t} } } */\n+/* { dg-final { scan-assembler {\\tudot\\t} } } */"}, {"sha": "a66e1209662cefaa95c90d8d2694f9c7c0de4152", "filename": "gcc/testsuite/gcc.target/aarch64/usadv16qi.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72215009a9f9827397a4eb74e9341b2b7dc658df/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fusadv16qi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72215009a9f9827397a4eb74e9341b2b7dc658df/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fusadv16qi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fusadv16qi.c?ref=72215009a9f9827397a4eb74e9341b2b7dc658df", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-O3\" } */\n \n-#pragma GCC target \"+nosve\"\n+#pragma GCC target \"+nosve+nodotprod\"\n \n #define N 1024\n "}]}