{"sha": "762cc1fb3595afdfc2c33dfd32b98a400d20ea5d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzYyY2MxZmIzNTk1YWZkZmMyYzMzZGZkMzJiOThhNDAwZDIwZWE1ZA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2017-09-27T17:46:33Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2017-09-27T17:46:33Z"}, "message": "compiler: fix crash on struct that embeds pointer type\n    \n    The type verification code that enforces rules about the types of\n    embedded struct fields was not properly handling the case where the\n    pointed-to type is a pointer type, e.g.\n    \n      type s *struct{ C int }\n      type t struct{ *s }\n    \n    which is illegal according to the spec. Tweak the verifier to catch\n    this case, and add a guard in the lowering pass to make sure that we\n    don't crash on invalid accesses to field \"C\" in type \"t\" above.\n    \n    Fixes golang/go#22050\n    \n    Reviewed-on: https://go-review.googlesource.com/66530\n\nFrom-SVN: r253236", "tree": {"sha": "c9d2a60d8775d143e4dd645a0f4d43ac10c46e7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c9d2a60d8775d143e4dd645a0f4d43ac10c46e7e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/762cc1fb3595afdfc2c33dfd32b98a400d20ea5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/762cc1fb3595afdfc2c33dfd32b98a400d20ea5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/762cc1fb3595afdfc2c33dfd32b98a400d20ea5d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/762cc1fb3595afdfc2c33dfd32b98a400d20ea5d/comments", "author": null, "committer": null, "parents": [{"sha": "ab90c27b6739a096d9afe9472b14057fbc24e392", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab90c27b6739a096d9afe9472b14057fbc24e392", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab90c27b6739a096d9afe9472b14057fbc24e392"}], "stats": {"total": 12, "additions": 10, "deletions": 2}, "files": [{"sha": "12cba43421a04cce61b5aefa3572c47e79824400", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/762cc1fb3595afdfc2c33dfd32b98a400d20ea5d/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/762cc1fb3595afdfc2c33dfd32b98a400d20ea5d/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=762cc1fb3595afdfc2c33dfd32b98a400d20ea5d", "patch": "@@ -1,4 +1,4 @@\n-cdf1f58c7578980e1d1949680c7e404961b7c153\n+11b7dae7de94215e92eb46e703cfecd76c0a3282\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "b6323f8135e88aa37682d9ab0f269f931bb7a153", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/762cc1fb3595afdfc2c33dfd32b98a400d20ea5d/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/762cc1fb3595afdfc2c33dfd32b98a400d20ea5d/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=762cc1fb3595afdfc2c33dfd32b98a400d20ea5d", "patch": "@@ -5842,7 +5842,9 @@ Struct_type::do_verify()\n       Type* t = p->type();\n       if (p->is_anonymous())\n \t{\n-\t  if (t->named_type() != NULL && t->points_to() != NULL)\n+\t  if ((t->named_type() != NULL && t->points_to() != NULL)\n+              || (t->named_type() == NULL && t->points_to() != NULL\n+                  && t->points_to()->points_to() != NULL))\n \t    {\n \t      go_error_at(p->location(), \"embedded type may not be a pointer\");\n \t      p->set_type(Type::make_error_type());\n@@ -11848,6 +11850,12 @@ Type::bind_field_or_method(Gogo* gogo, const Type* type, Expression* expr,\n \t      go_assert(expr->type()->struct_type() == st);\n \t    }\n \t  ret = st->field_reference(expr, name, location);\n+          if (ret == NULL)\n+            {\n+              go_error_at(location, \"type has no field %qs\",\n+                          Gogo::message_name(name).c_str());\n+              return Expression::make_error(location);\n+            }\n \t}\n       else if (it != NULL && it->find_method(name) != NULL)\n \tret = Expression::make_interface_field_reference(expr, name,"}]}