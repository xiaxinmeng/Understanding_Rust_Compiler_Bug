{"sha": "8d2318ffa323564735c39a4de251df2dfcceb346", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQyMzE4ZmZhMzIzNTY0NzM1YzM5YTRkZTI1MWRmMmRmY2NlYjM0Ng==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2019-04-08T08:13:50Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2019-04-08T08:13:50Z"}, "message": "re PR c++/89914 (ICE in nothrow_spec_p, at cp/except.c:1238)\n\n/cp\n2019-04-08  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/89914\n\t* semantics.c (trait_expr_value): Don't use TYPE_NOTHROW_P\n\twhen maybe_instantiate_noexcept fails.\n\t(classtype_has_nothrow_assign_or_copy_p): Likewise.\n\t* method.c (implicitly_declare_fn): Avoid passing error_mark_node\n\tto build_exception_variant.\n\n/testsuite\n2019-04-08  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/89914\n\t* g++.dg/ext/has_nothrow_constructor-3.C: New.\n\nFrom-SVN: r270201", "tree": {"sha": "ae97a7f0ad9ba0b6de268c934b2817fa5b9cf23c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae97a7f0ad9ba0b6de268c934b2817fa5b9cf23c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d2318ffa323564735c39a4de251df2dfcceb346", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d2318ffa323564735c39a4de251df2dfcceb346", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d2318ffa323564735c39a4de251df2dfcceb346", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d2318ffa323564735c39a4de251df2dfcceb346/comments", "author": null, "committer": null, "parents": [{"sha": "66d8ee9ce0245c8c60af96365b3072a9e25729e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66d8ee9ce0245c8c60af96365b3072a9e25729e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66d8ee9ce0245c8c60af96365b3072a9e25729e6"}], "stats": {"total": 40, "additions": 35, "deletions": 5}, "files": [{"sha": "74e2b7d95c63b36aa6c0bb2397eb3da5bfbc3b22", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d2318ffa323564735c39a4de251df2dfcceb346/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d2318ffa323564735c39a4de251df2dfcceb346/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8d2318ffa323564735c39a4de251df2dfcceb346", "patch": "@@ -1,3 +1,12 @@\n+2019-04-08  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/89914\n+\t* semantics.c (trait_expr_value): Don't use TYPE_NOTHROW_P\n+\twhen maybe_instantiate_noexcept fails.\n+\t(classtype_has_nothrow_assign_or_copy_p): Likewise.\n+\t* method.c (implicitly_declare_fn): Avoid passing error_mark_node\n+\tto build_exception_variant.\n+\n 2019-04-05  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/87145 - bogus error converting class type in template arg list."}, {"sha": "03eea408a8fe94a780e0a5fc91463644b744c00f", "filename": "gcc/cp/method.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d2318ffa323564735c39a4de251df2dfcceb346/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d2318ffa323564735c39a4de251df2dfcceb346/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=8d2318ffa323564735c39a4de251df2dfcceb346", "patch": "@@ -2061,7 +2061,14 @@ implicitly_declare_fn (special_function_kind kind, tree type,\n   /* Create the function.  */\n   fn_type = build_method_type_directly (type, return_type, parameter_types);\n   if (raises)\n-    fn_type = build_exception_variant (fn_type, raises);\n+    {\n+      if (raises != error_mark_node)\n+\tfn_type = build_exception_variant (fn_type, raises);\n+      else\n+\t/* Can happen, eg, in C++98 mode for an ill-formed non-static data\n+\t   member initializer (c++/89914).  */\n+\tgcc_assert (seen_error ());\n+    }\n   fn = build_lang_decl (FUNCTION_DECL, name, fn_type);\n   if (kind != sfk_inheriting_constructor)\n     DECL_SOURCE_LOCATION (fn) = DECL_SOURCE_LOCATION (TYPE_NAME (type));"}, {"sha": "3ae9cf050fb8155fa3fb7f60419c26cd7b93d353", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d2318ffa323564735c39a4de251df2dfcceb346/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d2318ffa323564735c39a4de251df2dfcceb346/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=8d2318ffa323564735c39a4de251df2dfcceb346", "patch": "@@ -9551,8 +9551,8 @@ classtype_has_nothrow_assign_or_copy_p (tree type, bool assign_p)\n       if (copy_fn_p (fn) > 0)\n \t{\n \t  saw_copy = true;\n-\t  maybe_instantiate_noexcept (fn);\n-\t  if (!TYPE_NOTHROW_P (TREE_TYPE (fn)))\n+\t  if (!maybe_instantiate_noexcept (fn)\n+\t      || !TYPE_NOTHROW_P (TREE_TYPE (fn)))\n \t    return false;\n \t}\n     }\n@@ -9594,8 +9594,8 @@ trait_expr_value (cp_trait_kind kind, tree type1, tree type2)\n       return (trait_expr_value (CPTK_HAS_TRIVIAL_CONSTRUCTOR, type1, type2) \n \t      || (CLASS_TYPE_P (type1)\n \t\t  && (t = locate_ctor (type1))\n-\t\t  && (maybe_instantiate_noexcept (t),\n-\t\t      TYPE_NOTHROW_P (TREE_TYPE (t)))));\n+\t\t  && maybe_instantiate_noexcept (t)\n+\t\t  && TYPE_NOTHROW_P (TREE_TYPE (t))));\n \n     case CPTK_HAS_TRIVIAL_CONSTRUCTOR:\n       type1 = strip_array_types (type1);"}, {"sha": "6bcc177ccf63ff90828f964656fc5f8fe50da783", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d2318ffa323564735c39a4de251df2dfcceb346/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d2318ffa323564735c39a4de251df2dfcceb346/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8d2318ffa323564735c39a4de251df2dfcceb346", "patch": "@@ -1,3 +1,8 @@\n+2019-04-08  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/89914\n+\t* g++.dg/ext/has_nothrow_constructor-3.C: New.\n+\n 2019-04-07  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \tPR target/89945"}, {"sha": "6306d72315b1fc79355f15bae9f874e77ae7682d", "filename": "gcc/testsuite/g++.dg/ext/has_nothrow_constructor-3.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d2318ffa323564735c39a4de251df2dfcceb346/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fhas_nothrow_constructor-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d2318ffa323564735c39a4de251df2dfcceb346/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fhas_nothrow_constructor-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fhas_nothrow_constructor-3.C?ref=8d2318ffa323564735c39a4de251df2dfcceb346", "patch": "@@ -0,0 +1,9 @@\n+// PR c++/89914\n+\n+struct A\n+{\n+  int i = ;  // { dg-error \"expected\" }\n+  // { dg-error \"non-static data member\" \"\" { target c++98_only } .-1 }\n+};\n+\n+bool b = __has_nothrow_constructor (A);"}]}