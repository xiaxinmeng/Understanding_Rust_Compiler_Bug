{"sha": "83fe399c27e269e48c54bf5d505973b5c03da072", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODNmZTM5OWMyN2UyNjllNDhjNTRiZjVkNTA1OTczYjVjMDNkYTA3Mg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2018-02-09T21:01:49Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2018-02-09T21:01:49Z"}, "message": "PR c++/81917 - ICE with void_t and partial specialization.\n\n\t* pt.c (instantiate_class_template_1): Set TYPE_BEING_DEFINED before\n\tcalling most_specialized_partial_spec.\n\nFrom-SVN: r257542", "tree": {"sha": "735b075cf6fd462d211da21ec9ca17eabb295b92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/735b075cf6fd462d211da21ec9ca17eabb295b92"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/83fe399c27e269e48c54bf5d505973b5c03da072", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83fe399c27e269e48c54bf5d505973b5c03da072", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83fe399c27e269e48c54bf5d505973b5c03da072", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83fe399c27e269e48c54bf5d505973b5c03da072/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c028d589e94a67795a25763bc95b778e1480f106", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c028d589e94a67795a25763bc95b778e1480f106", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c028d589e94a67795a25763bc95b778e1480f106"}], "stats": {"total": 72, "additions": 44, "deletions": 28}, "files": [{"sha": "9df4c2948af2f873f098ffa834d24ecd9258a71e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83fe399c27e269e48c54bf5d505973b5c03da072/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83fe399c27e269e48c54bf5d505973b5c03da072/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=83fe399c27e269e48c54bf5d505973b5c03da072", "patch": "@@ -1,3 +1,9 @@\n+2018-02-09  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/81917 - ICE with void_t and partial specialization.\n+\t* pt.c (instantiate_class_template_1): Set TYPE_BEING_DEFINED before\n+\tcalling most_specialized_partial_spec.\n+\n 2018-02-09  Nathan Sidwell  <nathan@acm.org>\n \n \tPR c/84293"}, {"sha": "281604594ada82d2bd6f18a0e3d2d7842e054df6", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83fe399c27e269e48c54bf5d505973b5c03da072/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83fe399c27e269e48c54bf5d505973b5c03da072/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=83fe399c27e269e48c54bf5d505973b5c03da072", "patch": "@@ -10347,14 +10347,14 @@ instantiate_class_template_1 (tree type)\n   templ = most_general_template (CLASSTYPE_TI_TEMPLATE (type));\n   gcc_assert (TREE_CODE (templ) == TEMPLATE_DECL);\n \n+  /* Mark the type as in the process of being defined.  */\n+  TYPE_BEING_DEFINED (type) = 1;\n+\n   /* Determine what specialization of the original template to\n      instantiate.  */\n   t = most_specialized_partial_spec (type, tf_warning_or_error);\n   if (t == error_mark_node)\n-    {\n-      TYPE_BEING_DEFINED (type) = 1;\n-      return error_mark_node;\n-    }\n+    return error_mark_node;\n   else if (t)\n     {\n       /* This TYPE is actually an instantiation of a partial\n@@ -10379,16 +10379,16 @@ instantiate_class_template_1 (tree type)\n   /* If the template we're instantiating is incomplete, then clearly\n      there's nothing we can do.  */\n   if (!COMPLETE_TYPE_P (pattern))\n-    return type;\n+    {\n+      /* We can try again later.  */\n+      TYPE_BEING_DEFINED (type) = 0;\n+      return type;\n+    }\n \n   /* If we've recursively instantiated too many templates, stop.  */\n   if (! push_tinst_level (type))\n     return type;\n \n-  /* Now we're really doing the instantiation.  Mark the type as in\n-     the process of being defined.  */\n-  TYPE_BEING_DEFINED (type) = 1;\n-\n   /* We may be in the middle of deferred access check.  Disable\n      it now.  */\n   push_deferring_access_checks (dk_no_deferred);"}, {"sha": "6f1fa4584ac5746f7dee511ca02fefc073a1e7d9", "filename": "gcc/testsuite/g++.dg/cpp0x/alias-decl-62.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83fe399c27e269e48c54bf5d505973b5c03da072/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-62.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83fe399c27e269e48c54bf5d505973b5c03da072/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-62.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-62.C?ref=83fe399c27e269e48c54bf5d505973b5c03da072", "patch": "@@ -0,0 +1,22 @@\n+// PR c++/81917\n+// { dg-do compile { target c++11 } }\n+\n+template <typename> using a = void;\n+template <typename, typename = void> struct b\n+{\n+  typedef int c;\n+};\n+template <typename d> class b<d, a<typename d::e>>;\n+template <typename d, typename = typename b<d>::c> class f;\n+template <typename> class g { };\n+template <typename, typename> class h\n+{\n+  class i;\n+  typedef g<f<i>> j;\n+  class i\n+  {\n+    j k;\t\t\t// { dg-error \"incomplete\" }\n+  };\n+};\n+h<int, int> H;\n+"}, {"sha": "0df0d4e89c3b1191ebc1e98c02e0b25bb669bec6", "filename": "gcc/testsuite/g++.dg/cpp0x/initlist-template2.C", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83fe399c27e269e48c54bf5d505973b5c03da072/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist-template2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83fe399c27e269e48c54bf5d505973b5c03da072/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist-template2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist-template2.C?ref=83fe399c27e269e48c54bf5d505973b5c03da072", "patch": "@@ -1,6 +1,5 @@\n // PR c++/71747\n // { dg-do compile { target c++11 } }\n-// { dg-options -ftemplate-depth=20 }\n \n template < bool > struct A\n {\n@@ -14,10 +13,8 @@ template < bool > struct A\n template < bool, typename = int > struct F; \n template < bool X > \n // should be: struct F < X, typename A < A < X > {} () >::type > \n-struct F < X, typename A < F < X > {} () >::type > // { dg-error \"\" }\n+struct F < X, typename A < F < X > {} () >::type >\n {\n };\n \n-F < true > f;\n-\n-// { dg-prune-output \"compilation terminated\" }\n+F < true > f;\t\t\t// { dg-error \"\" }"}, {"sha": "de41b99a9278b99f4a41fc9f83f61bc7b5ce8479", "filename": "gcc/testsuite/g++.dg/template/crash125.C", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83fe399c27e269e48c54bf5d505973b5c03da072/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash125.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83fe399c27e269e48c54bf5d505973b5c03da072/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash125.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash125.C?ref=83fe399c27e269e48c54bf5d505973b5c03da072", "patch": "@@ -13,6 +13,4 @@ struct TraitCheckImpl<Swappable<T> > {\n     typedef void Complete;\n };\n \n-Swappable<int> s;  // { dg-error \"depth\" }\n-\n-// { dg-prune-output \"compilation terminated\" }\n+Swappable<int> s;  // { dg-error \"\" }"}, {"sha": "794a6cfe067b33643305a6bb37a2124a05addb07", "filename": "gcc/testsuite/g++.dg/template/pr51488.C", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83fe399c27e269e48c54bf5d505973b5c03da072/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr51488.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83fe399c27e269e48c54bf5d505973b5c03da072/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr51488.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr51488.C?ref=83fe399c27e269e48c54bf5d505973b5c03da072", "patch": "@@ -2,6 +2,4 @@\n \n template<class T,class U=void> struct s;\n template<class T> struct s<T,typename s<T>::a> {};\n-s<int> ca;  // { dg-error \"depth\" }\n-\n-// { dg-prune-output \"compilation terminated\" }\n+s<int> ca;  // { dg-error \"\" }"}, {"sha": "04079ed11758735981cdf5066e169d8d9e8ca8f6", "filename": "gcc/testsuite/g++.dg/template/pr55843.C", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83fe399c27e269e48c54bf5d505973b5c03da072/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr55843.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83fe399c27e269e48c54bf5d505973b5c03da072/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr55843.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr55843.C?ref=83fe399c27e269e48c54bf5d505973b5c03da072", "patch": "@@ -1,17 +1,15 @@\n-// { dg-options \"-ftemplate-depth-8\" }\n-\n template< typename T > struct type_wrapper {\n };\n typedef char (&yes_tag)[2];\n template<bool b> struct if_c {\n };\n template< typename T > struct has_type {\n   struct gcc_3_2_wknd {\n-    template< typename U > static yes_tag test( type_wrapper<U> const volatile* // { dg-message \"required\" }\n+    template< typename U > static yes_tag test( type_wrapper<U> const volatile* // { dg-message \"\" }\n , type_wrapper<typename U::type>* = 0 );\n   };\n   typedef type_wrapper<T> t_;\n-  static const bool value = sizeof(gcc_3_2_wknd::test(static_cast<t_*>(0))) == // { dg-message \"required\" }\n+  static const bool value = sizeof(gcc_3_2_wknd::test(static_cast<t_*>(0))) == // { dg-message \"\" }\n sizeof(yes_tag);\n };\n template <class K, class T, class=void> struct Get_type {\n@@ -22,7 +20,4 @@ template <class K> struct Get_type<K, RT_tag, typename if_c<\n !has_type<Get_type<K, FT_tag> >::value >::type> { }; // { dg-message \"required\" }\n template <class K> struct Get_type<K, FT_tag, typename if_c<\n !has_type<Get_type<K, RT_tag> >::value >::type> { };  // { dg-message \"required\" }\n-typedef Get_type<int, FT_tag>::type P;\n-\n-// { dg-prune-output \"-ftemplate-depth\" }\n-// { dg-prune-output \"compilation terminated\" }\n+typedef Get_type<int, FT_tag>::type P;\t\t      // { dg-message \"\" }"}]}