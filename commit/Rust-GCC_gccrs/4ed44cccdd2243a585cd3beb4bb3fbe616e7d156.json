{"sha": "4ed44cccdd2243a585cd3beb4bb3fbe616e7d156", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGVkNDRjY2NkZDIyNDNhNTg1Y2QzYmViNGJiM2ZiZTYxNmU3ZDE1Ng==", "commit": {"author": {"name": "Daniel Franke", "email": "franke.daniel@gmail.com", "date": "2010-05-20T21:49:07Z"}, "committer": {"name": "Daniel Franke", "email": "dfranke@gcc.gnu.org", "date": "2010-05-20T21:49:07Z"}, "message": "re PR fortran/38407 (Wishlist: -Wunused-dummy-argument and -Wno-unused-dummy-argument)\n\ngcc/fortran/:\n2010-05-20  Daniel Franke  <franke.daniel@gmail.com>\n\n        PR fortran/38407\n        * lang.opt (Wunused-dummy-argument): New option.\n        * gfortran.h (gfc_option_t): Add warn_unused_dummy_argument.\n        * options.c (gfc_init_options): Disable warn_unused_dummy_argument.\n        (set_Wall): Enable warn_unused_dummy_argument.\n        (gfc_handle_option): Set warn_unused_dummy_argument according to\n        command line.\n        * trans-decl.c (generate_local_decl): Separate warnings about\n        unused variables and unused dummy arguments.\n        * invoke.texi: Documented new option.\n\ngcc/testsuite/:\n2010-05-20  Daniel Franke  <franke.daniel@gmail.com>\n\n        PR fortran/38407\n        * warn_unused_dummy_argument_1.f90: New.\n        * warn_unused_dummy_argument_2.f90: New.\n\nFrom-SVN: r159641", "tree": {"sha": "8ca421cfaf635a6d87ac1152b678e4fe099604b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ca421cfaf635a6d87ac1152b678e4fe099604b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ed44cccdd2243a585cd3beb4bb3fbe616e7d156", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ed44cccdd2243a585cd3beb4bb3fbe616e7d156", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ed44cccdd2243a585cd3beb4bb3fbe616e7d156", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ed44cccdd2243a585cd3beb4bb3fbe616e7d156/comments", "author": {"login": "dfranke76", "id": 15729164, "node_id": "MDQ6VXNlcjE1NzI5MTY0", "avatar_url": "https://avatars.githubusercontent.com/u/15729164?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dfranke76", "html_url": "https://github.com/dfranke76", "followers_url": "https://api.github.com/users/dfranke76/followers", "following_url": "https://api.github.com/users/dfranke76/following{/other_user}", "gists_url": "https://api.github.com/users/dfranke76/gists{/gist_id}", "starred_url": "https://api.github.com/users/dfranke76/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dfranke76/subscriptions", "organizations_url": "https://api.github.com/users/dfranke76/orgs", "repos_url": "https://api.github.com/users/dfranke76/repos", "events_url": "https://api.github.com/users/dfranke76/events{/privacy}", "received_events_url": "https://api.github.com/users/dfranke76/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a48ba7e10b954685dca91cf39163fa03d68d29b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a48ba7e10b954685dca91cf39163fa03d68d29b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a48ba7e10b954685dca91cf39163fa03d68d29b1"}], "stats": {"total": 103, "additions": 83, "deletions": 20}, "files": [{"sha": "6e139cc9a8ed3c729a06efd5cb1de41042dcc73a", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ed44cccdd2243a585cd3beb4bb3fbe616e7d156/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ed44cccdd2243a585cd3beb4bb3fbe616e7d156/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=4ed44cccdd2243a585cd3beb4bb3fbe616e7d156", "patch": "@@ -1,3 +1,16 @@\n+2010-05-20  Daniel Franke  <franke.daniel@gmail.com>\n+\n+        PR fortran/38407\n+        * lang.opt (Wunused-dummy-argument): New option.\n+        * gfortran.h (gfc_option_t): Add warn_unused_dummy_argument.\n+        * options.c (gfc_init_options): Disable warn_unused_dummy_argument.\n+        (set_Wall): Enable warn_unused_dummy_argument.\n+        (gfc_handle_option): Set warn_unused_dummy_argument according to\n+        command line.\n+        * trans-decl.c (generate_local_decl): Separate warnings about\n+        unused variables and unused dummy arguments.\n+        * invoke.texi: Documented new option.\n+\n 2010-05-20  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* trans-expr.c: Do not include convert.h, ggc.h, real.h, and gimple.h."}, {"sha": "ec334c5a13f07517745278015d9c22f9d9c57de9", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ed44cccdd2243a585cd3beb4bb3fbe616e7d156/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ed44cccdd2243a585cd3beb4bb3fbe616e7d156/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=4ed44cccdd2243a585cd3beb4bb3fbe616e7d156", "patch": "@@ -2117,6 +2117,7 @@ typedef struct\n   int warn_character_truncation;\n   int warn_array_temp;\n   int warn_align_commons;\n+  int warn_unused_dummy_argument;\n   int max_errors;\n \n   int flag_all_intrinsics;"}, {"sha": "78c1c436561574aa90407dca18567caf9c2055e5", "filename": "gcc/fortran/invoke.texi", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ed44cccdd2243a585cd3beb4bb3fbe616e7d156/gcc%2Ffortran%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ed44cccdd2243a585cd3beb4bb3fbe616e7d156/gcc%2Ffortran%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finvoke.texi?ref=4ed44cccdd2243a585cd3beb4bb3fbe616e7d156", "patch": "@@ -690,7 +690,8 @@ Enables commonly used warning options pertaining to usage that\n we recommend avoiding and that we believe are easy to avoid.\n This currently includes @option{-Waliasing}, @option{-Wampersand}, \n @option{-Wconversion}, @option{-Wsurprising}, @option{-Wintrinsics-std},\n-@option{-Wno-tabs}, @option{-Wintrinsic-shadow} and @option{-Wline-truncation}.\n+@option{-Wno-tabs}, @option{-Wintrinsic-shadow}, @option{-Wline-truncation},\n+and @option{-Wunused}.\n \n @item -Waliasing\n @opindex @code{Waliasing}\n@@ -832,15 +833,22 @@ intrinsic; in this case, an explicit interface or @code{EXTERNAL} or\n @code{INTRINSIC} declaration might be needed to get calls later resolved to\n the desired intrinsic/procedure.\n \n+@item -Wunused-dummy-argument\n+@opindex @code{Wunused-dummy-argument}\n+@cindex warnings, unused dummy argument\n+@cindex unused dummy argument\n+@cindex dummy argument, unused\n+Warn about unused dummy arguments. This option is implied by @option{-Wall}.\n+\n @item -Wunused-parameter\n @opindex @code{Wunused-parameter}\n @cindex warnings, unused parameter\n @cindex unused parameter\n Contrary to @command{gcc}'s meaning of @option{-Wunused-parameter},\n @command{gfortran}'s implementation of this option does not warn\n-about unused dummy arguments, but about unused @code{PARAMETER} values.\n-@option{-Wunused-parameter} is not included in @option{-Wall} but is\n-implied by @option{-Wall -Wextra}.\n+about unused dummy arguments (see @option{-Wunused-dummy-argument}),\n+but about unused @code{PARAMETER} values. @option{-Wunused-parameter}\n+is not included in @option{-Wall} but is implied by @option{-Wall -Wextra}.\n \n @item -Walign-commons\n @opindex @code{Walign-commons}"}, {"sha": "c1a86ddab08489a7f819302c591ffdd493c9c30f", "filename": "gcc/fortran/lang.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ed44cccdd2243a585cd3beb4bb3fbe616e7d156/gcc%2Ffortran%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ed44cccdd2243a585cd3beb4bb3fbe616e7d156/gcc%2Ffortran%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flang.opt?ref=4ed44cccdd2243a585cd3beb4bb3fbe616e7d156", "patch": "@@ -132,6 +132,10 @@ Wintrinsic-shadow\n Fortran Warning\n Warn if a user-procedure has the same name as an intrinsic\n \n+Wunused-dummy-argument\n+Fortran Warning\n+Warn about unused dummy arguments.\n+\n cpp\n Fortran Joined Separate Negative(nocpp)\n Enable preprocessing"}, {"sha": "a5c0b92109f3faa8444b04e8a94015419dd77a3c", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ed44cccdd2243a585cd3beb4bb3fbe616e7d156/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ed44cccdd2243a585cd3beb4bb3fbe616e7d156/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=4ed44cccdd2243a585cd3beb4bb3fbe616e7d156", "patch": "@@ -87,6 +87,7 @@ gfc_init_options (unsigned int argc, const char **argv)\n   gfc_option.warn_intrinsic_shadow = 0;\n   gfc_option.warn_intrinsics_std = 0;\n   gfc_option.warn_align_commons = 1;\n+  gfc_option.warn_unused_dummy_argument = 0;\n   gfc_option.max_errors = 25;\n \n   gfc_option.flag_all_intrinsics = 0;\n@@ -417,6 +418,7 @@ set_Wall (int setting)\n   gfc_option.warn_intrinsic_shadow = setting;\n   gfc_option.warn_intrinsics_std = setting;\n   gfc_option.warn_character_truncation = setting;\n+  gfc_option.warn_unused_dummy_argument = setting;\n \n   warn_unused = setting;\n   warn_return_type = setting;\n@@ -616,6 +618,10 @@ gfc_handle_option (size_t scode, const char *arg, int value,\n       gfc_option.warn_align_commons = value;\n       break;\n \n+    case OPT_Wunused_dummy_argument:\n+      gfc_option.warn_unused_dummy_argument = value;\n+      break;\n+\n     case OPT_fall_intrinsics:\n       gfc_option.flag_all_intrinsics = 1;\n       break;"}, {"sha": "5bafdcc32ccb53d66178ee752bcf7b0a00b59c74", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 21, "deletions": 16, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ed44cccdd2243a585cd3beb4bb3fbe616e7d156/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ed44cccdd2243a585cd3beb4bb3fbe616e7d156/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=4ed44cccdd2243a585cd3beb4bb3fbe616e7d156", "patch": "@@ -3878,24 +3878,29 @@ generate_local_decl (gfc_symbol * sym)\n \n       if (sym->attr.referenced)\n \tgfc_get_symbol_decl (sym);\n-      /* INTENT(out) dummy arguments are likely meant to be set.  */\n-      else if (warn_unused_variable\n-\t       && sym->attr.dummy\n-\t       && sym->attr.intent == INTENT_OUT)\n+\n+      /* Warnings for unused dummy arguments.  */\n+      else if (sym->attr.dummy)\n \t{\n-\t  if (sym->ts.type != BT_DERIVED)\n-\t    gfc_warning (\"Dummy argument '%s' at %L was declared INTENT(OUT) \"\n-\t\t         \"but was not set\",  sym->name, &sym->declared_at);\n-\t  else if (!gfc_has_default_initializer (sym->ts.u.derived))\n-\t    gfc_warning (\"Derived-type dummy argument '%s' at %L was \"\n-\t\t\t \"declared INTENT(OUT) but was not set and does \"\n-\t\t\t \"not have a default initializer\",\n-\t\t\t sym->name, &sym->declared_at);\n+\t  /* INTENT(out) dummy arguments are likely meant to be set.  */\n+\t  if (gfc_option.warn_unused_dummy_argument\n+\t      && sym->attr.intent == INTENT_OUT)\n+\t    {\n+\t      if (sym->ts.type != BT_DERIVED)\n+\t\tgfc_warning (\"Dummy argument '%s' at %L was declared \"\n+\t\t\t     \"INTENT(OUT) but was not set\",  sym->name,\n+\t\t\t     &sym->declared_at);\n+\t      else if (!gfc_has_default_initializer (sym->ts.u.derived))\n+\t\tgfc_warning (\"Derived-type dummy argument '%s' at %L was \"\n+\t\t\t     \"declared INTENT(OUT) but was not set and \"\n+\t\t\t     \"does not have a default initializer\",\n+\t\t\t     sym->name, &sym->declared_at);\n+\t    }\n+\t  else if (gfc_option.warn_unused_dummy_argument)\n+\t    gfc_warning (\"Unused dummy argument '%s' at %L\", sym->name,\n+\t\t\t &sym->declared_at);\n \t}\n-      /* Specific warning for unused dummy arguments. */\n-      else if (warn_unused_variable && sym->attr.dummy)\n-\tgfc_warning (\"Unused dummy argument '%s' at %L\", sym->name,\n-\t\t     &sym->declared_at);\n+\n       /* Warn for unused variables, but not if they're inside a common\n \t block or are use-associated.  */\n       else if (warn_unused_variable"}, {"sha": "77bc1350cc975b0372386d9b8673e0bc584dd45a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ed44cccdd2243a585cd3beb4bb3fbe616e7d156/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ed44cccdd2243a585cd3beb4bb3fbe616e7d156/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4ed44cccdd2243a585cd3beb4bb3fbe616e7d156", "patch": "@@ -1,3 +1,9 @@\n+2010-05-20  Daniel Franke  <franke.daniel@gmail.com>\n+\n+        PR fortran/38407\n+        * warn_unused_dummy_argument_1.f90: New.\n+        * warn_unused_dummy_argument_2.f90: New.\n+\n 2010-05-20  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/30298"}, {"sha": "94e74c9362872070cdc769a7e83ab40ee9680c8e", "filename": "gcc/testsuite/gfortran.dg/warn_unused_dummy_argument_1.f90", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ed44cccdd2243a585cd3beb4bb3fbe616e7d156/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarn_unused_dummy_argument_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ed44cccdd2243a585cd3beb4bb3fbe616e7d156/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarn_unused_dummy_argument_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarn_unused_dummy_argument_1.f90?ref=4ed44cccdd2243a585cd3beb4bb3fbe616e7d156", "patch": "@@ -0,0 +1,10 @@\n+! { dg-do \"compile\" }\n+! { dg-options \"-Wall\" }\n+!\n+! PR fortran/38407\n+!\n+\n+SUBROUTINE s(dummy)                ! { dg-warning \"Unused dummy\" }\n+  INTEGER, INTENT(in) :: dummy\n+  INTEGER :: variable              ! { dg-warning \"Unused variable\" }\n+END SUBROUTINE"}, {"sha": "85472dddda2f4f9a9385c3eed630aa0655fd27f2", "filename": "gcc/testsuite/gfortran.dg/warn_unused_dummy_argument_2.f90", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ed44cccdd2243a585cd3beb4bb3fbe616e7d156/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarn_unused_dummy_argument_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ed44cccdd2243a585cd3beb4bb3fbe616e7d156/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarn_unused_dummy_argument_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarn_unused_dummy_argument_2.f90?ref=4ed44cccdd2243a585cd3beb4bb3fbe616e7d156", "patch": "@@ -0,0 +1,10 @@\n+! { dg-do \"compile\" }\n+! { dg-options \"-Wall -Wno-unused-dummy-argument\" }\n+!\n+! PR fortran/38407\n+!\n+\n+SUBROUTINE s(dummy)\n+  INTEGER, INTENT(in) :: dummy\n+  INTEGER :: variable              ! { dg-warning \"Unused variable\" }\n+END SUBROUTINE"}]}