{"sha": "cf25c30945764f5b0cbdaccb53980bb7132e75bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2YyNWMzMDk0NTc2NGY1YjBjYmRhY2NiNTM5ODBiYjcxMzJlNzViYw==", "commit": {"author": {"name": "Alexander Ivchenko", "email": "alexander.ivchenko@intel.com", "date": "2014-10-14T08:42:02Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2014-10-14T08:42:02Z"}, "message": "AVX-512. 69/n. Add vpmulhrsw insn support.\n\ngcc/\n        * config/i386/sse.md\n        (define_insn \"avx512bw_umulhrswv32hi3<mask_name>\"): New.\n        (define_expand \"<ssse3_avx2>_pmulhrsw<mode>3_mask\"): Ditto.\n\nCo-Authored-By: Andrey Turetskiy <andrey.turetskiy@intel.com>\nCo-Authored-By: Anna Tikhonova <anna.tikhonova@intel.com>\nCo-Authored-By: Ilya Tocar <ilya.tocar@intel.com>\nCo-Authored-By: Ilya Verbin <ilya.verbin@intel.com>\nCo-Authored-By: Kirill Yukhin <kirill.yukhin@intel.com>\nCo-Authored-By: Maxim Kuznetsov <maxim.kuznetsov@intel.com>\nCo-Authored-By: Michael Zolotukhin <michael.v.zolotukhin@intel.com>\n\nFrom-SVN: r216186", "tree": {"sha": "d247bf83a7306a213fc399261ed59b40964edeeb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d247bf83a7306a213fc399261ed59b40964edeeb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf25c30945764f5b0cbdaccb53980bb7132e75bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf25c30945764f5b0cbdaccb53980bb7132e75bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf25c30945764f5b0cbdaccb53980bb7132e75bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf25c30945764f5b0cbdaccb53980bb7132e75bc/comments", "author": null, "committer": null, "parents": [{"sha": "ed3e611e05f5490cb986ce9a1398f6755717b937", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed3e611e05f5490cb986ce9a1398f6755717b937", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed3e611e05f5490cb986ce9a1398f6755717b937"}], "stats": {"total": 71, "additions": 71, "deletions": 0}, "files": [{"sha": "4416b51b219e292975d01edd278a5d0805cda202", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf25c30945764f5b0cbdaccb53980bb7132e75bc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf25c30945764f5b0cbdaccb53980bb7132e75bc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cf25c30945764f5b0cbdaccb53980bb7132e75bc", "patch": "@@ -1,3 +1,16 @@\n+2014-10-14  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n+\t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n+\t    Anna Tikhonova  <anna.tikhonova@intel.com>\n+\t    Ilya Tocar  <ilya.tocar@intel.com>\n+\t    Andrey Turetskiy  <andrey.turetskiy@intel.com>\n+\t    Ilya Verbin  <ilya.verbin@intel.com>\n+\t    Kirill Yukhin  <kirill.yukhin@intel.com>\n+\t    Michael Zolotukhin  <michael.v.zolotukhin@intel.com>\n+\n+        * config/i386/sse.md\n+        (define_insn \"avx512bw_umulhrswv32hi3<mask_name>\"): New.\n+        (define_expand \"<ssse3_avx2>_pmulhrsw<mode>3_mask\"): Ditto.\n+\n 2014-10-14  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n \t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n \t    Anna Tikhonova  <anna.tikhonova@intel.com>"}, {"sha": "30fc1dc5fa1f41c8eb5908a7095d8ec386e684a4", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf25c30945764f5b0cbdaccb53980bb7132e75bc/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf25c30945764f5b0cbdaccb53980bb7132e75bc/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=cf25c30945764f5b0cbdaccb53980bb7132e75bc", "patch": "@@ -13273,6 +13273,41 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"XI\")])\n \n+(define_insn \"avx512bw_umulhrswv32hi3<mask_name>\"\n+  [(set (match_operand:V32HI 0 \"register_operand\" \"=v\")\n+\t(truncate:V32HI\n+\t  (lshiftrt:V32SI\n+\t    (plus:V32SI\n+\t      (lshiftrt:V32SI\n+\t\t(mult:V32SI\n+\t\t  (sign_extend:V32SI\n+\t\t    (match_operand:V32HI 1 \"nonimmediate_operand\" \"%v\"))\n+\t\t  (sign_extend:V32SI\n+\t\t    (match_operand:V32HI 2 \"nonimmediate_operand\" \"vm\")))\n+\t\t(const_int 14))\n+\t      (const_vector:V32HI [(const_int 1) (const_int 1)\n+\t\t\t\t   (const_int 1) (const_int 1)\n+\t\t\t\t   (const_int 1) (const_int 1)\n+\t\t\t\t   (const_int 1) (const_int 1)\n+\t\t\t\t   (const_int 1) (const_int 1)\n+\t\t\t\t   (const_int 1) (const_int 1)\n+\t\t\t\t   (const_int 1) (const_int 1)\n+\t\t\t\t   (const_int 1) (const_int 1)\n+\t\t\t\t   (const_int 1) (const_int 1)\n+\t\t\t\t   (const_int 1) (const_int 1)\n+\t\t\t\t   (const_int 1) (const_int 1)\n+\t\t\t\t   (const_int 1) (const_int 1)\n+\t\t\t\t   (const_int 1) (const_int 1)\n+\t\t\t\t   (const_int 1) (const_int 1)\n+\t\t\t\t   (const_int 1) (const_int 1)\n+\t\t\t\t   (const_int 1) (const_int 1)]))\n+\t    (const_int 1))))]\n+  \"TARGET_AVX512BW\"\n+  \"vpmulhrsw\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n+  [(set_attr \"type\" \"sseimul\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"XI\")])\n+\n (define_insn \"ssse3_pmaddubsw128\"\n   [(set (match_operand:V8HI 0 \"register_operand\" \"=x,x\")\n \t(ss_plus:V8HI\n@@ -13350,6 +13385,29 @@\n (define_mode_iterator PMULHRSW\n   [V4HI V8HI (V16HI \"TARGET_AVX2\")])\n \n+(define_expand \"<ssse3_avx2>_pmulhrsw<mode>3_mask\"\n+  [(set (match_operand:PMULHRSW 0 \"register_operand\")\n+\t(vec_merge:PMULHRSW\n+\t  (truncate:PMULHRSW\n+\t    (lshiftrt:<ssedoublemode>\n+\t      (plus:<ssedoublemode>\n+\t        (lshiftrt:<ssedoublemode>\n+\t\t  (mult:<ssedoublemode>\n+\t\t    (sign_extend:<ssedoublemode>\n+\t\t      (match_operand:PMULHRSW 1 \"nonimmediate_operand\"))\n+\t\t    (sign_extend:<ssedoublemode>\n+\t\t      (match_operand:PMULHRSW 2 \"nonimmediate_operand\")))\n+\t\t  (const_int 14))\n+\t        (match_dup 5))\n+\t      (const_int 1)))\n+\t  (match_operand:PMULHRSW 3 \"register_operand\")\n+\t  (match_operand:<avx512fmaskmode> 4 \"register_operand\")))]\n+  \"TARGET_AVX512BW && TARGET_AVX512VL\"\n+{\n+  operands[5] = CONST1_RTX(<MODE>mode);\n+  ix86_fixup_binary_operands_no_copy (MULT, <MODE>mode, operands);\n+})\n+\n (define_expand \"<ssse3_avx2>_pmulhrsw<mode>3\"\n   [(set (match_operand:PMULHRSW 0 \"register_operand\")\n \t(truncate:PMULHRSW"}]}