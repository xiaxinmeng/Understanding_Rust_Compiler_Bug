{"sha": "574e7601829733d7cae20b5dc7034b876cc76b30", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTc0ZTc2MDE4Mjk3MzNkN2NhZTIwYjVkYzcwMzRiODc2Y2M3NmIzMA==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-03-06T05:07:43Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-03-06T05:07:43Z"}, "message": "c++: Fix tsubsting member variable template-id [PR96330]\n\nThis makes tsubst_copy appropriately handle a variable template-id, which\nin turn fixes tsubsting a COMPONENT_REF whose member operand is known at\nparse time to be a variable template-id, as in the initialization of 'x'\nin the first testcase.  Previously, we rejected this testcase with the\nerror \"foo_t::bar<T> is not a function template\", issued from\nlookup_template_fuction.\n\nWe were already properly handling the analagous case where the object\noperand of the COMPONENT_REF is dependent (and so the member operand is\na dependent template name), but there doesn't seems to be existing test\ncoverage for this, hence the second testcase below.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/96330\n\t* pt.c (tsubst_copy) <case TEMPLATE_ID_EXPR>: Rename local\n\tvariable 'fn' to 'tmpl'.  Handle a variable template-id by\n\tcalling lookup_template_variable.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/96330\n\t* g++.dg/cpp1y/var-templ68.C: New test.\n\t* g++.dg/cpp1y/var-templ68a.C: New test.\n\nCo-authored-by: Jakub Jelinek <jakub@redhat.com>", "tree": {"sha": "cd847fdecefd1d73301ec2d4edaffea8b592f698", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd847fdecefd1d73301ec2d4edaffea8b592f698"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/574e7601829733d7cae20b5dc7034b876cc76b30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/574e7601829733d7cae20b5dc7034b876cc76b30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/574e7601829733d7cae20b5dc7034b876cc76b30", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/574e7601829733d7cae20b5dc7034b876cc76b30/comments", "author": null, "committer": null, "parents": [{"sha": "b49d23f3e238c08bdbc5b892b2ed0a57b5f5caf9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b49d23f3e238c08bdbc5b892b2ed0a57b5f5caf9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b49d23f3e238c08bdbc5b892b2ed0a57b5f5caf9"}], "stats": {"total": 40, "additions": 37, "deletions": 3}, "files": [{"sha": "81df8c88ccd3bab1c3f68fd1bc80a0550d48dbbf", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/574e7601829733d7cae20b5dc7034b876cc76b30/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/574e7601829733d7cae20b5dc7034b876cc76b30/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=574e7601829733d7cae20b5dc7034b876cc76b30", "patch": "@@ -17110,14 +17110,17 @@ tsubst_copy (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n     case TEMPLATE_ID_EXPR:\n       {\n \t/* Substituted template arguments */\n-\ttree fn = TREE_OPERAND (t, 0);\n+\ttree tmpl = TREE_OPERAND (t, 0);\n \ttree targs = TREE_OPERAND (t, 1);\n \n-\tfn = tsubst_copy (fn, args, complain, in_decl);\n+\ttmpl = tsubst_copy (tmpl, args, complain, in_decl);\n \tif (targs)\n \t  targs = tsubst_template_args (targs, args, complain, in_decl);\n \n-\treturn lookup_template_function (fn, targs);\n+\tif (variable_template_p (tmpl))\n+\t  return lookup_template_variable (tmpl, targs);\n+\telse\n+\t  return lookup_template_function (tmpl, targs);\n       }\n \n     case TREE_LIST:"}, {"sha": "4c560d4bd3513e1df515c412dd5cc803beac8463", "filename": "gcc/testsuite/g++.dg/cpp1y/var-templ68.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/574e7601829733d7cae20b5dc7034b876cc76b30/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ68.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/574e7601829733d7cae20b5dc7034b876cc76b30/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ68.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ68.C?ref=574e7601829733d7cae20b5dc7034b876cc76b30", "patch": "@@ -0,0 +1,15 @@\n+// PR c++/96330\n+// { dg-do compile { target c++14 } }\n+\n+struct foo_t {\n+  template <class T> static constexpr bool bar = true;\n+};\n+constexpr foo_t foo{};\n+\n+template <class T>\n+void f() {\n+  int x = foo.bar<T>;\n+  int y = foo_t::bar<T>;\n+}\n+\n+template void f<int>();"}, {"sha": "6091a03a004fe7f666c80bd6ffd1c3c9a3beb6ae", "filename": "gcc/testsuite/g++.dg/cpp1y/var-templ68a.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/574e7601829733d7cae20b5dc7034b876cc76b30/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ68a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/574e7601829733d7cae20b5dc7034b876cc76b30/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ68a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ68a.C?ref=574e7601829733d7cae20b5dc7034b876cc76b30", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/96330\n+// { dg-do compile { target c++14 } }\n+\n+template <class>\n+struct foo_t {\n+  template <class T> static constexpr bool bar = true;\n+};\n+template <class T> constexpr foo_t<T> foo{};\n+\n+template <class T>\n+void f() {\n+  int x = foo<T>.template bar<T>;\n+  int y = foo_t<T>::template bar<T>;\n+}\n+\n+template void f<int>();"}]}