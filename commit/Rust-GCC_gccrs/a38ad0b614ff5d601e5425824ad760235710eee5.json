{"sha": "a38ad0b614ff5d601e5425824ad760235710eee5", "node_id": "C_kwDOANBUbNoAKGEzOGFkMGI2MTRmZjVkNjAxZTU0MjU4MjRhZDc2MDIzNTcxMGVlZTU", "commit": {"author": {"name": "Faisal Abbas", "email": "90.abbasfaisal@gmail.com", "date": "2022-08-06T20:32:41Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-08-25T11:40:27Z"}, "message": "rust-constexpr.cc: port over more cases to eval_constant_expression", "tree": {"sha": "b45a6c00458d63f25b90d782d1ddd0df7a2ea77b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b45a6c00458d63f25b90d782d1ddd0df7a2ea77b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a38ad0b614ff5d601e5425824ad760235710eee5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a38ad0b614ff5d601e5425824ad760235710eee5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a38ad0b614ff5d601e5425824ad760235710eee5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a38ad0b614ff5d601e5425824ad760235710eee5/comments", "author": {"login": "abbasfaisal", "id": 9428333, "node_id": "MDQ6VXNlcjk0MjgzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/9428333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abbasfaisal", "html_url": "https://github.com/abbasfaisal", "followers_url": "https://api.github.com/users/abbasfaisal/followers", "following_url": "https://api.github.com/users/abbasfaisal/following{/other_user}", "gists_url": "https://api.github.com/users/abbasfaisal/gists{/gist_id}", "starred_url": "https://api.github.com/users/abbasfaisal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abbasfaisal/subscriptions", "organizations_url": "https://api.github.com/users/abbasfaisal/orgs", "repos_url": "https://api.github.com/users/abbasfaisal/repos", "events_url": "https://api.github.com/users/abbasfaisal/events{/privacy}", "received_events_url": "https://api.github.com/users/abbasfaisal/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d780f02a54ff9cb0b5fd181eb21ae9afe2fd7d1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d780f02a54ff9cb0b5fd181eb21ae9afe2fd7d1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d780f02a54ff9cb0b5fd181eb21ae9afe2fd7d1c"}], "stats": {"total": 46, "additions": 46, "deletions": 0}, "files": [{"sha": "340960e0ab6e8b5144190238431694e2bdfa7c7b", "filename": "gcc/rust/backend/rust-constexpr.cc", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a38ad0b614ff5d601e5425824ad760235710eee5/gcc%2Frust%2Fbackend%2Frust-constexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a38ad0b614ff5d601e5425824ad760235710eee5/gcc%2Frust%2Fbackend%2Frust-constexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-constexpr.cc?ref=a38ad0b614ff5d601e5425824ad760235710eee5", "patch": "@@ -1398,6 +1398,32 @@ eval_bare_aggregate (const constexpr_ctx *ctx, tree t, bool lval,\n   return t;\n }\n \n+/* Subroutine of cxx_eval_constant_expression.\n+   Like cxx_eval_unary_expression, except for trinary expressions.  */\n+\n+static tree\n+cxx_eval_trinary_expression (const constexpr_ctx *ctx, tree t, bool lval,\n+\t\t\t     bool *non_constant_p, bool *overflow_p)\n+{\n+  int i;\n+  tree args[3];\n+  tree val;\n+\n+  for (i = 0; i < 3; i++)\n+    {\n+      args[i] = eval_constant_expression (ctx, TREE_OPERAND (t, i), lval,\n+\t\t\t\t\t  non_constant_p, overflow_p);\n+      VERIFY_CONSTANT (args[i]);\n+    }\n+\n+  val = fold_ternary_loc (EXPR_LOCATION (t), TREE_CODE (t), TREE_TYPE (t),\n+\t\t\t  args[0], args[1], args[2]);\n+  if (val == NULL_TREE)\n+    return t;\n+  VERIFY_CONSTANT (val);\n+  return val;\n+}\n+\n /* Return true if T is a valid constant initializer.  If a CONSTRUCTOR\n    initializes all the members, the CONSTRUCTOR_NO_CLEARING flag will be\n    cleared.\n@@ -1649,6 +1675,11 @@ eval_constant_expression (const constexpr_ctx *ctx, tree t, bool lval,\n       r = rs_eval_indirect_ref (ctx, t, lval, non_constant_p, overflow_p);\n       break;\n \n+    case VEC_PERM_EXPR:\n+      r = cxx_eval_trinary_expression (ctx, t, lval, non_constant_p,\n+\t\t\t\t       overflow_p);\n+      break;\n+\n     case PAREN_EXPR:\n       gcc_assert (!REF_PARENTHESIZED_P (t));\n       /* A PAREN_EXPR resulting from __builtin_assoc_barrier has no effect in\n@@ -1680,6 +1711,21 @@ eval_constant_expression (const constexpr_ctx *ctx, tree t, bool lval,\n       return eval_constant_expression (ctx, BIND_EXPR_BODY (t), lval,\n \t\t\t\t       non_constant_p, overflow_p, jump_target);\n \n+    case OBJ_TYPE_REF:\n+      /* Virtual function lookup.  We don't need to do anything fancy.  */\n+      return eval_constant_expression (ctx, OBJ_TYPE_REF_EXPR (t), lval,\n+\t\t\t\t       non_constant_p, overflow_p);\n+\n+      case EXIT_EXPR: {\n+\ttree cond = TREE_OPERAND (t, 0);\n+\tcond = eval_constant_expression (ctx, cond, /*lval*/ false,\n+\t\t\t\t\t non_constant_p, overflow_p);\n+\tVERIFY_CONSTANT (cond);\n+\tif (integer_nonzerop (cond))\n+\t  *jump_target = t;\n+      }\n+      break;\n+\n     case RESULT_DECL:\n       if (lval)\n \treturn t;"}]}