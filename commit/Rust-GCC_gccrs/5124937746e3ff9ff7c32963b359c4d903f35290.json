{"sha": "5124937746e3ff9ff7c32963b359c4d903f35290", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTEyNDkzNzc0NmUzZmY5ZmY3YzMyOTYzYjM1OWM0ZDkwM2YzNTI5MA==", "commit": {"author": {"name": "Gerald Pfeifer", "email": "gerald@pfeifer.com", "date": "2013-06-05T16:48:14Z"}, "committer": {"name": "Gerald Pfeifer", "email": "gerald@gcc.gnu.org", "date": "2013-06-05T16:48:14Z"}, "message": "re PR bootstrap/56714 (Bootstrap failure libitm/local_atomic:1580:3: error: always_inline function might not be inlinable)\n\n\tPR bootstrap/56714\n\t* local_atomic (__always_inline): Always define our version.\n\t(__calculate_memory_order): Mark inline.\n\t(atomic_thread_fence): Ditto.\n\t(atomic_signal_fence): Ditto.\n\t(atomic_bool::atomic_flag_test_and_set_explicit): Ditto.\n\t(atomic_bool::atomic_flag_clear_explicit): Ditto.\n\t(atomic_bool::atomic_flag_test_and_set): Ditto.\n\t(atomic_bool::atomic_flag_clear): Ditto.\n\nFrom-SVN: r199704", "tree": {"sha": "21fb7c11534bfdf4f1884a4aa1af6f79498f06bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/21fb7c11534bfdf4f1884a4aa1af6f79498f06bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5124937746e3ff9ff7c32963b359c4d903f35290", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5124937746e3ff9ff7c32963b359c4d903f35290", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5124937746e3ff9ff7c32963b359c4d903f35290", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5124937746e3ff9ff7c32963b359c4d903f35290/comments", "author": {"login": "GeraldPfeifer", "id": 4573532, "node_id": "MDQ6VXNlcjQ1NzM1MzI=", "avatar_url": "https://avatars.githubusercontent.com/u/4573532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GeraldPfeifer", "html_url": "https://github.com/GeraldPfeifer", "followers_url": "https://api.github.com/users/GeraldPfeifer/followers", "following_url": "https://api.github.com/users/GeraldPfeifer/following{/other_user}", "gists_url": "https://api.github.com/users/GeraldPfeifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/GeraldPfeifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GeraldPfeifer/subscriptions", "organizations_url": "https://api.github.com/users/GeraldPfeifer/orgs", "repos_url": "https://api.github.com/users/GeraldPfeifer/repos", "events_url": "https://api.github.com/users/GeraldPfeifer/events{/privacy}", "received_events_url": "https://api.github.com/users/GeraldPfeifer/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b57ca59bbd5843c4c55b23e25c588320c62aafef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b57ca59bbd5843c4c55b23e25c588320c62aafef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b57ca59bbd5843c4c55b23e25c588320c62aafef"}], "stats": {"total": 39, "additions": 25, "deletions": 14}, "files": [{"sha": "ed9114b91474a45fa4174ba700dff561e67788bb", "filename": "libitm/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5124937746e3ff9ff7c32963b359c4d903f35290/libitm%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5124937746e3ff9ff7c32963b359c4d903f35290/libitm%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2FChangeLog?ref=5124937746e3ff9ff7c32963b359c4d903f35290", "patch": "@@ -1,3 +1,15 @@\n+2013-03-31  Gerald Pfeifer  <gerald@pfeifer.com>\n+\n+\tPR bootstrap/56714\n+\t* local_atomic (__always_inline): Always define our version.\n+\t(__calculate_memory_order): Mark inline.\n+\t(atomic_thread_fence): Ditto.\n+\t(atomic_signal_fence): Ditto.\n+\t(atomic_bool::atomic_flag_test_and_set_explicit): Ditto.\n+\t(atomic_bool::atomic_flag_clear_explicit): Ditto.\n+\t(atomic_bool::atomic_flag_test_and_set): Ditto.\n+\t(atomic_bool::atomic_flag_clear): Ditto.\n+\n 2013-04-23  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n \n \t* config/s390/sjlj.S: New file."}, {"sha": "f6bbb11695c35f51e01e5edb27130267884761ec", "filename": "libitm/local_atomic", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5124937746e3ff9ff7c32963b359c4d903f35290/libitm%2Flocal_atomic", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5124937746e3ff9ff7c32963b359c4d903f35290/libitm%2Flocal_atomic", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Flocal_atomic?ref=5124937746e3ff9ff7c32963b359c4d903f35290", "patch": "@@ -41,9 +41,8 @@\n #ifndef _GLIBCXX_ATOMIC\n #define _GLIBCXX_ATOMIC 1\n \n-#ifndef __always_inline\n-#define __always_inline inline __attribute__((always_inline))\n-#endif\n+#undef  __always_inline\n+#define __always_inline __attribute__((always_inline))\n \n // #pragma GCC system_header\n \n@@ -75,7 +74,7 @@ namespace std // _GLIBCXX_VISIBILITY(default)\n       memory_order_seq_cst\n     } memory_order;\n \n-  __always_inline memory_order\n+  inline __always_inline memory_order\n   __calculate_memory_order(memory_order __m) noexcept\n   {\n     const bool __cond1 = __m == memory_order_release;\n@@ -85,13 +84,13 @@ namespace std // _GLIBCXX_VISIBILITY(default)\n     return __mo2;\n   }\n \n-  __always_inline void\n+  inline __always_inline void\n   atomic_thread_fence(memory_order __m) noexcept\n   {\n     __atomic_thread_fence (__m);\n   }\n \n-  __always_inline void\n+  inline __always_inline void\n   atomic_signal_fence(memory_order __m) noexcept\n   {\n     __atomic_thread_fence (__m);\n@@ -1545,38 +1544,38 @@ namespace std // _GLIBCXX_VISIBILITY(default)\n \n \n   // Function definitions, atomic_flag operations.\n-  __always_inline bool\n+  inline __always_inline bool\n   atomic_flag_test_and_set_explicit(atomic_flag* __a,\n \t\t\t\t    memory_order __m) noexcept\n   { return __a->test_and_set(__m); }\n \n-  __always_inline bool\n+  inline __always_inline bool\n   atomic_flag_test_and_set_explicit(volatile atomic_flag* __a,\n \t\t\t\t    memory_order __m) noexcept\n   { return __a->test_and_set(__m); }\n \n-  __always_inline void\n+  inline __always_inline void\n   atomic_flag_clear_explicit(atomic_flag* __a, memory_order __m) noexcept\n   { __a->clear(__m); }\n \n-  __always_inline void\n+  inline __always_inline void\n   atomic_flag_clear_explicit(volatile atomic_flag* __a,\n \t\t\t     memory_order __m) noexcept\n   { __a->clear(__m); }\n \n-  __always_inline bool\n+  inline __always_inline bool\n   atomic_flag_test_and_set(atomic_flag* __a) noexcept\n   { return atomic_flag_test_and_set_explicit(__a, memory_order_seq_cst); }\n \n-  __always_inline bool\n+  inline __always_inline bool\n   atomic_flag_test_and_set(volatile atomic_flag* __a) noexcept\n   { return atomic_flag_test_and_set_explicit(__a, memory_order_seq_cst); }\n \n-  __always_inline void\n+  inline __always_inline void\n   atomic_flag_clear(atomic_flag* __a) noexcept\n   { atomic_flag_clear_explicit(__a, memory_order_seq_cst); }\n \n-  __always_inline void\n+  inline __always_inline void\n   atomic_flag_clear(volatile atomic_flag* __a) noexcept\n   { atomic_flag_clear_explicit(__a, memory_order_seq_cst); }\n "}]}