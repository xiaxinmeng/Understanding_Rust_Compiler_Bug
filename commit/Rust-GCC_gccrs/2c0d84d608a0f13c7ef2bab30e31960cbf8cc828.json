{"sha": "2c0d84d608a0f13c7ef2bab30e31960cbf8cc828", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmMwZDg0ZDYwOGEwZjEzYzdlZjJiYWIzMGUzMTk2MGNiZjhjYzgyOA==", "commit": {"author": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1993-12-16T00:15:21Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1993-12-16T00:15:21Z"}, "message": "cp-decl.c (flag_conserve_space): New language specific flag to tell the compiler to use .common when possible.\n\n\t* cp-decl.c (flag_conserve_space): New language specific flag to\n\ttell the compiler to use .common when possible.  Reduces the size of\n\t.o files.\n\t* cp-decl.c (duplicate_decls): Copy DECL_COMMON from the olddecl.\n\t* cp-decl.c (start_decl): Set DECL_COMMON appropriately.\n\t* cp-decl.c (finish_decl): Use flag_conserve_space, instead of\n\tflag_no_common.\n\t* cp-decl2.c (flag_conserve_space, lang_f_options): New flag.\n\t* toplev.c (lang_options): New -fconserve-space flag.\n\t* tree.h (DECL_COMMON): New flag.\n\t* tree.h (tree_decl): New common_flag.\n\t* varasm.c (assemble_variable): Use DECL_COMMON to help determine if\n\tan object can be put in .common.\n\t* c-decl.c (start_decl): Set DECL_COMMON to 1..\n\nFrom-SVN: r6244", "tree": {"sha": "f01094003c85b950042ac6f04b34b7c4ce8cc80e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f01094003c85b950042ac6f04b34b7c4ce8cc80e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2c0d84d608a0f13c7ef2bab30e31960cbf8cc828", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c0d84d608a0f13c7ef2bab30e31960cbf8cc828", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c0d84d608a0f13c7ef2bab30e31960cbf8cc828", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c0d84d608a0f13c7ef2bab30e31960cbf8cc828/comments", "author": null, "committer": null, "parents": [{"sha": "3d5e2367e9ff1a9613471c621b16f89dd3b8cb67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d5e2367e9ff1a9613471c621b16f89dd3b8cb67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d5e2367e9ff1a9613471c621b16f89dd3b8cb67"}], "stats": {"total": 17, "additions": 16, "deletions": 1}, "files": [{"sha": "bdfb7b4e6b03eca03900dd0551a23cf51cbf8c0d", "filename": "gcc/c-decl.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c0d84d608a0f13c7ef2bab30e31960cbf8cc828/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c0d84d608a0f13c7ef2bab30e31960cbf8cc828/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=2c0d84d608a0f13c7ef2bab30e31960cbf8cc828", "patch": "@@ -3333,6 +3333,10 @@ start_decl (declarator, declspecs, initialized)\n      TEM may equal DECL or it may be a previous decl of the same name.  */\n   tem = pushdecl (decl);\n \n+  /* For C and Obective-C, we by default put things in .common when\n+     possible.  */\n+  DECL_COMMON (tem) = 1;\n+\n   /* For a local variable, define the RTL now.  */\n   if (current_binding_level != global_binding_level\n       /* But not if this is a duplicate decl"}, {"sha": "b60c6245a515f0fbb2b42595920cfe79c743f384", "filename": "gcc/toplev.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c0d84d608a0f13c7ef2bab30e31960cbf8cc828/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c0d84d608a0f13c7ef2bab30e31960cbf8cc828/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=2c0d84d608a0f13c7ef2bab30e31960cbf8cc828", "patch": "@@ -646,6 +646,10 @@ char *lang_options[] =\n   \"-fno-external-templates\",\n   \"-fansi-overloading\",\n   \"-fno-ansi-overloading\",\n+  \"-fhuge-objects\",\n+  \"-fno-huge-objects\",\n+  \"-fconserve-space\",\n+  \"-fno-conserve-space\",\n \n   \"-Wreturn-type\",\n   \"-Wno-return-type\","}, {"sha": "a697f96666b65c90469cc0932646eb066c261e9d", "filename": "gcc/tree.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c0d84d608a0f13c7ef2bab30e31960cbf8cc828/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c0d84d608a0f13c7ef2bab30e31960cbf8cc828/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=2c0d84d608a0f13c7ef2bab30e31960cbf8cc828", "patch": "@@ -832,6 +832,11 @@ struct tree_type\n    because this decl is unused.  */\n #define DECL_IN_SYSTEM_HEADER(NODE) ((NODE)->decl.in_system_header_flag)\n \n+/* Nonzero for a given ..._DECL node means that this node should be\n+   put in .common, if possible.  If a DECL_INITIAL is given, and it\n+   is not error_mark_node, then the decl cannot be put in .common.  */\n+#define DECL_COMMON(NODE) ((NODE)->decl.common_flag)\n+\n /* Language-specific decl information.  */\n #define DECL_LANG_SPECIFIC(NODE) ((NODE)->decl.lang_specific)\n \n@@ -914,7 +919,8 @@ struct tree_decl\n   unsigned abstract_flag : 1;\n \n   unsigned in_system_header_flag : 1;\n-  /* room for seven more */\n+  unsigned common_flag : 1;\n+  /* room for six more */\n \n   unsigned lang_flag_0 : 1;\n   unsigned lang_flag_1 : 1;"}, {"sha": "3dbc517d13d3cb378f49da51124a796b1bbe3ec5", "filename": "gcc/varasm.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c0d84d608a0f13c7ef2bab30e31960cbf8cc828/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c0d84d608a0f13c7ef2bab30e31960cbf8cc828/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=2c0d84d608a0f13c7ef2bab30e31960cbf8cc828", "patch": "@@ -979,6 +979,7 @@ assemble_variable (decl, top_level, at_end, dont_output_data)\n      -fno-common gives strict ANSI behavior.  Usually you don't want it.\n      This matters only for variables with external linkage.  */\n   if ((! flag_no_common || ! TREE_PUBLIC (decl))\n+      && DECL_COMMON (decl)\n       && ! dont_output_data\n       && (DECL_INITIAL (decl) == 0 || DECL_INITIAL (decl) == error_mark_node))\n     {"}]}