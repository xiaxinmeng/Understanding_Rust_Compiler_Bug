{"sha": "d7e16fc536d3e954adceb395e20c76258186330b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDdlMTZmYzUzNmQzZTk1NGFkY2ViMzk1ZTIwYzc2MjU4MTg2MzMwYg==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2016-06-15T20:09:56Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2016-06-15T20:09:56Z"}, "message": "2016-06-15  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\t* include/bits/stl_deque.h\n\t(std::deque<>::operator=): Call _M_assign_aux.\n\t(std::deque<>::assign(initializer_list<>)): Likewise.\n\t(std::deque<>::resize(size_t, const value_type&)): Call _M_fill_insert.\n\t(std::deque<>::insert(const_iterator, initializer_list<>)):\n\tCall _M_range_insert_aux.\n\t(std::deque<>::_M_assign_aux<It>(It, It, std::forward_iterator_tag):\n\tLikewise.\n\t(std::deque<>::_M_fill_assign): Call _M_fill_insert.\n\t(std::deque<>::_M_move_assign2): Call _M_assign_aux.\n\t* include/bits/deque.tcc\n\t(std::deque<>::operator=): Call _M_range_insert_aux.\n\t(std::deque<>::_M_assign_aux<It>(It, It, std::input_iterator_tag)):\n\tLikewise.\n\t* include/bits/stl_vector.h\n\t(std::vector<>::operator=): Call _M_assign_aux.\n\t(std::vector<>::assign(initializer_list<>)): Likewise.\n\t(std::vector<>::resize(size_t, const value_type&)): Call _M_fill_insert.\n\t(std::vector<>::insert(const_iterator, initializer_list<>)):\n\tCall _M_range_insert.\n\t* include/bits/vector.tcc (std::vector<>::_M_assign_aux): Likewise.\n\nFrom-SVN: r237495", "tree": {"sha": "1d90f775966354d662907a283e3be35330abdfac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d90f775966354d662907a283e3be35330abdfac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d7e16fc536d3e954adceb395e20c76258186330b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7e16fc536d3e954adceb395e20c76258186330b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7e16fc536d3e954adceb395e20c76258186330b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7e16fc536d3e954adceb395e20c76258186330b/comments", "author": null, "committer": null, "parents": [{"sha": "1a3c3ee9bc4639fc67e037b6837d2625327555fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a3c3ee9bc4639fc67e037b6837d2625327555fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a3c3ee9bc4639fc67e037b6837d2625327555fd"}], "stats": {"total": 272, "additions": 153, "deletions": 119}, "files": [{"sha": "c1848aa2a25b41b94d916f752a2cab82f13f6b88", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7e16fc536d3e954adceb395e20c76258186330b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7e16fc536d3e954adceb395e20c76258186330b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d7e16fc536d3e954adceb395e20c76258186330b", "patch": "@@ -1,3 +1,27 @@\n+2016-06-15  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/bits/stl_deque.h\n+\t(std::deque<>::operator=): Call _M_assign_aux.\n+\t(std::deque<>::assign(initializer_list<>)): Likewise.\n+\t(std::deque<>::resize(size_t, const value_type&)): Call _M_fill_insert.\n+\t(std::deque<>::insert(const_iterator, initializer_list<>)):\n+\tCall _M_range_insert_aux.\n+\t(std::deque<>::_M_assign_aux<It>(It, It, std::forward_iterator_tag):\n+\tLikewise.\n+\t(std::deque<>::_M_fill_assign): Call _M_fill_insert.\n+\t(std::deque<>::_M_move_assign2): Call _M_assign_aux.\n+\t* include/bits/deque.tcc\n+\t(std::deque<>::operator=): Call _M_range_insert_aux.\n+\t(std::deque<>::_M_assign_aux<It>(It, It, std::input_iterator_tag)):\n+\tLikewise.\n+\t* include/bits/stl_vector.h\n+\t(std::vector<>::operator=): Call _M_assign_aux.\n+\t(std::vector<>::assign(initializer_list<>)): Likewise.\n+\t(std::vector<>::resize(size_t, const value_type&)): Call _M_fill_insert.\n+\t(std::vector<>::insert(const_iterator, initializer_list<>)):\n+\tCall _M_range_insert.\n+\t* include/bits/vector.tcc (std::vector<>::_M_assign_aux): Likewise.\n+\n 2016-06-07  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n \t* include/std/tuple (_Head_base<>): Default specialization condition at"}, {"sha": "96ec9f82d8f0c7254aebe7d2fa209b3c06b09d03", "filename": "libstdc++-v3/include/bits/deque.tcc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7e16fc536d3e954adceb395e20c76258186330b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7e16fc536d3e954adceb395e20c76258186330b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc?ref=d7e16fc536d3e954adceb395e20c76258186330b", "patch": "@@ -119,7 +119,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t    {\n \t      const_iterator __mid = __x.begin() + difference_type(__len);\n \t      std::copy(__x.begin(), __mid, this->_M_impl._M_start);\n-\t      insert(this->_M_impl._M_finish, __mid, __x.end());\n+\t      _M_range_insert_aux(this->_M_impl._M_finish, __mid, __x.end(),\n+\t\t\t\t  std::random_access_iterator_tag());\n \t    }\n \t}\n       return *this;\n@@ -280,7 +281,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n         if (__first == __last)\n           _M_erase_at_end(__cur);\n         else\n-          insert(end(), __first, __last);\n+          _M_range_insert_aux(end(), __first, __last,\n+\t\t\t      std::__iterator_category(__first));\n       }\n \n   template <typename _Tp, typename _Alloc>"}, {"sha": "f63ae4c0ba5b845e23cfa30c440cce714e290968", "filename": "libstdc++-v3/include/bits/stl_deque.h", "status": "modified", "additions": 22, "deletions": 20, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7e16fc536d3e954adceb395e20c76258186330b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7e16fc536d3e954adceb395e20c76258186330b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h?ref=d7e16fc536d3e954adceb395e20c76258186330b", "patch": "@@ -1081,7 +1081,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       deque&\n       operator=(initializer_list<value_type> __l)\n       {\n-\tthis->assign(__l.begin(), __l.end());\n+\t_M_assign_aux(__l.begin(), __l.end(),\n+\t\t      random_access_iterator_tag());\n \treturn *this;\n       }\n #endif\n@@ -1142,7 +1143,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        */\n       void\n       assign(initializer_list<value_type> __l)\n-      { this->assign(__l.begin(), __l.end()); }\n+      { _M_assign_aux(__l.begin(), __l.end(), random_access_iterator_tag()); }\n #endif\n \n       /// Get a copy of the memory allocation object.\n@@ -1306,7 +1307,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       {\n \tconst size_type __len = size();\n \tif (__new_size > __len)\n-\t  insert(this->_M_impl._M_finish, __new_size - __len, __x);\n+\t  _M_fill_insert(this->_M_impl._M_finish, __new_size - __len, __x);\n \telse if (__new_size < __len)\n \t  _M_erase_at_end(this->_M_impl._M_start\n \t\t\t  + difference_type(__new_size));\n@@ -1328,7 +1329,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       {\n \tconst size_type __len = size();\n \tif (__new_size > __len)\n-\t  insert(this->_M_impl._M_finish, __new_size - __len, __x);\n+\t  _M_fill_insert(this->_M_impl._M_finish, __new_size - __len, __x);\n \telse if (__new_size < __len)\n \t  _M_erase_at_end(this->_M_impl._M_start\n \t\t\t  + difference_type(__new_size));\n@@ -1645,7 +1646,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        */\n       iterator\n       insert(const_iterator __p, initializer_list<value_type> __l)\n-      { return this->insert(__p, __l.begin(), __l.end()); }\n+      {\n+\tauto __offset = __p - cbegin();\n+\t_M_range_insert_aux(__p._M_const_cast(), __l.begin(), __l.end(),\n+\t\t\t    std::random_access_iterator_tag());\n+\treturn begin() + __offset;\n+      }\n #endif\n \n #if __cplusplus >= 201103L\n@@ -1819,9 +1825,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n         _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,\n \t\t\t       __false_type)\n         {\n-\t  typedef typename std::iterator_traits<_InputIterator>::\n-\t    iterator_category _IterCategory;\n-\t  _M_range_initialize(__first, __last, _IterCategory());\n+\t  _M_range_initialize(__first, __last,\n+\t\t\t      std::__iterator_category(__first));\n \t}\n \n       // called by the second initialize_dispatch above\n@@ -1884,11 +1889,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n         void\n         _M_assign_dispatch(_InputIterator __first, _InputIterator __last,\n \t\t\t   __false_type)\n-        {\n-\t  typedef typename std::iterator_traits<_InputIterator>::\n-\t    iterator_category _IterCategory;\n-\t  _M_assign_aux(__first, __last, _IterCategory());\n-\t}\n+\t{ _M_assign_aux(__first, __last, std::__iterator_category(__first)); }\n \n       // called by the second assign_dispatch above\n       template<typename _InputIterator>\n@@ -1908,7 +1909,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t      _ForwardIterator __mid = __first;\n \t      std::advance(__mid, size());\n \t      std::copy(__first, __mid, begin());\n-\t      insert(end(), __mid, __last);\n+\t      _M_range_insert_aux(end(), __mid, __last,\n+\t\t\t\t  std::__iterator_category(__first));\n \t    }\n \t  else\n \t    _M_erase_at_end(std::copy(__first, __last, begin()));\n@@ -1922,7 +1924,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \tif (__n > size())\n \t  {\n \t    std::fill(begin(), end(), __val);\n-\t    insert(end(), __n - size(), __val);\n+\t    _M_fill_insert(end(), __n - size(), __val);\n \t  }\n \telse\n \t  {\n@@ -1970,9 +1972,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t\t\t   _InputIterator __first, _InputIterator __last,\n \t\t\t   __false_type)\n         {\n-\t  typedef typename std::iterator_traits<_InputIterator>::\n-\t    iterator_category _IterCategory;\n-          _M_range_insert_aux(__pos, __first, __last, _IterCategory());\n+          _M_range_insert_aux(__pos, __first, __last,\n+\t\t\t      std::__iterator_category(__first));\n \t}\n \n       // called by the second insert_dispatch above\n@@ -2196,8 +2197,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t  {\n \t    // The rvalue's allocator cannot be moved and is not equal,\n \t    // so we need to individually move each element.\n-\t    this->assign(std::__make_move_if_noexcept_iterator(__x.begin()),\n-\t\t\t std::__make_move_if_noexcept_iterator(__x.end()));\n+\t    _M_assign_aux(std::__make_move_if_noexcept_iterator(__x.begin()),\n+\t\t\t  std::__make_move_if_noexcept_iterator(__x.end()),\n+\t\t\t  std::random_access_iterator_tag());\n \t    __x.clear();\n \t  }\n       }"}, {"sha": "8badea375cc3fe30ca7b8cd67db4459ad9799641", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 101, "deletions": 96, "changes": 197, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7e16fc536d3e954adceb395e20c76258186330b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7e16fc536d3e954adceb395e20c76258186330b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=d7e16fc536d3e954adceb395e20c76258186330b", "patch": "@@ -72,7 +72,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     struct _Vector_base\n     {\n       typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template\n-        rebind<_Tp>::other _Tp_alloc_type;\n+\trebind<_Tp>::other _Tp_alloc_type;\n       typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>::pointer\n        \tpointer;\n \n@@ -214,30 +214,30 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     class vector : protected _Vector_base<_Tp, _Alloc>\n     {\n       // Concept requirements.\n-      typedef typename _Alloc::value_type                _Alloc_value_type;\n+      typedef typename _Alloc::value_type\t\t_Alloc_value_type;\n #if __cplusplus < 201103L\n       __glibcxx_class_requires(_Tp, _SGIAssignableConcept)\n #endif\n       __glibcxx_class_requires2(_Tp, _Alloc_value_type, _SameTypeConcept)\n       \n-      typedef _Vector_base<_Tp, _Alloc>\t\t\t _Base;\n-      typedef typename _Base::_Tp_alloc_type\t\t _Tp_alloc_type;\n-      typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type>  _Alloc_traits;\n+      typedef _Vector_base<_Tp, _Alloc>\t\t\t_Base;\n+      typedef typename _Base::_Tp_alloc_type\t\t_Tp_alloc_type;\n+      typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type>\t_Alloc_traits;\n \n     public:\n-      typedef _Tp\t\t\t\t\t value_type;\n-      typedef typename _Base::pointer                    pointer;\n-      typedef typename _Alloc_traits::const_pointer      const_pointer;\n-      typedef typename _Alloc_traits::reference          reference;\n-      typedef typename _Alloc_traits::const_reference    const_reference;\n+      typedef _Tp\t\t\t\t\tvalue_type;\n+      typedef typename _Base::pointer\t\t\tpointer;\n+      typedef typename _Alloc_traits::const_pointer\tconst_pointer;\n+      typedef typename _Alloc_traits::reference\t\treference;\n+      typedef typename _Alloc_traits::const_reference\tconst_reference;\n       typedef __gnu_cxx::__normal_iterator<pointer, vector> iterator;\n       typedef __gnu_cxx::__normal_iterator<const_pointer, vector>\n       const_iterator;\n-      typedef std::reverse_iterator<const_iterator>  const_reverse_iterator;\n-      typedef std::reverse_iterator<iterator>\t\t reverse_iterator;\n-      typedef size_t\t\t\t\t\t size_type;\n-      typedef ptrdiff_t\t\t\t\t\t difference_type;\n-      typedef _Alloc                        \t\t allocator_type;\n+      typedef std::reverse_iterator<const_iterator>\tconst_reverse_iterator;\n+      typedef std::reverse_iterator<iterator>\t\treverse_iterator;\n+      typedef size_t\t\t\t\t\tsize_type;\n+      typedef ptrdiff_t\t\t\t\t\tdifference_type;\n+      typedef _Alloc\t\t\t\t\tallocator_type;\n \n     protected:\n       using _Base::_M_allocate;\n@@ -319,8 +319,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        */\n       vector(const vector& __x)\n       : _Base(__x.size(),\n-        _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))\n-      { this->_M_impl._M_finish =\n+\t_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))\n+      {\n+\tthis->_M_impl._M_finish =\n \t  std::__uninitialized_copy_a(__x.begin(), __x.end(),\n \t\t\t\t      this->_M_impl._M_start,\n \t\t\t\t      _M_get_Tp_allocator());\n@@ -340,7 +341,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       /// Copy constructor with alternative allocator\n       vector(const vector& __x, const allocator_type& __a)\n       : _Base(__x.size(), __a)\n-      { this->_M_impl._M_finish =\n+      {\n+\tthis->_M_impl._M_finish =\n \t  std::__uninitialized_copy_a(__x.begin(), __x.end(),\n \t\t\t\t      this->_M_impl._M_start,\n \t\t\t\t      _M_get_Tp_allocator());\n@@ -400,16 +402,16 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n #if __cplusplus >= 201103L\n       template<typename _InputIterator,\n \t       typename = std::_RequireInputIter<_InputIterator>>\n-        vector(_InputIterator __first, _InputIterator __last,\n+\tvector(_InputIterator __first, _InputIterator __last,\n \t       const allocator_type& __a = allocator_type())\n \t: _Base(__a)\n-        { _M_initialize_dispatch(__first, __last, __false_type()); }\n+\t{ _M_initialize_dispatch(__first, __last, __false_type()); }\n #else\n       template<typename _InputIterator>\n-        vector(_InputIterator __first, _InputIterator __last,\n+\tvector(_InputIterator __first, _InputIterator __last,\n \t       const allocator_type& __a = allocator_type())\n \t: _Base(__a)\n-        {\n+\t{\n \t  // Check whether it's an integral type.  If so, it's not an iterator.\n \t  typedef typename std::__is_integer<_InputIterator>::__type _Integral;\n \t  _M_initialize_dispatch(__first, __last, _Integral());\n@@ -449,10 +451,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       vector&\n       operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())\n       {\n-        constexpr bool __move_storage =\n-          _Alloc_traits::_S_propagate_on_move_assign()\n-          || _Alloc_traits::_S_always_equal();\n-        _M_move_assign(std::move(__x), __bool_constant<__move_storage>());\n+\tconstexpr bool __move_storage =\n+\t  _Alloc_traits::_S_propagate_on_move_assign()\n+\t  || _Alloc_traits::_S_always_equal();\n+\t_M_move_assign(std::move(__x), __bool_constant<__move_storage>());\n \treturn *this;\n       }\n \n@@ -470,7 +472,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       vector&\n       operator=(initializer_list<value_type> __l)\n       {\n-\tthis->assign(__l.begin(), __l.end());\n+\tthis->_M_assign_aux(__l.begin(), __l.end(),\n+\t\t\t    random_access_iterator_tag());\n \treturn *this;\n       }\n #endif\n@@ -504,14 +507,14 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n #if __cplusplus >= 201103L\n       template<typename _InputIterator,\n \t       typename = std::_RequireInputIter<_InputIterator>>\n-        void\n-        assign(_InputIterator __first, _InputIterator __last)\n-        { _M_assign_dispatch(__first, __last, __false_type()); }\n+\tvoid\n+\tassign(_InputIterator __first, _InputIterator __last)\n+\t{ _M_assign_dispatch(__first, __last, __false_type()); }\n #else\n       template<typename _InputIterator>\n-        void\n-        assign(_InputIterator __first, _InputIterator __last)\n-        {\n+\tvoid\n+\tassign(_InputIterator __first, _InputIterator __last)\n+\t{\n \t  // Check whether it's an integral type.  If so, it's not an iterator.\n \t  typedef typename std::__is_integer<_InputIterator>::__type _Integral;\n \t  _M_assign_dispatch(__first, __last, _Integral());\n@@ -532,7 +535,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        */\n       void\n       assign(initializer_list<value_type> __l)\n-      { this->assign(__l.begin(), __l.end()); }\n+      {\n+\tthis->_M_assign_aux(__l.begin(), __l.end(),\n+\t\t\t    random_access_iterator_tag());\n+      }\n #endif\n \n       /// Get a copy of the memory allocation object.\n@@ -694,7 +700,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       resize(size_type __new_size, const value_type& __x)\n       {\n \tif (__new_size > size())\n-\t  insert(end(), __new_size - size(), __x);\n+\t  _M_fill_insert(end(), __new_size - size(), __x);\n \telse if (__new_size < size())\n \t  _M_erase_at_end(this->_M_impl._M_start + __new_size);\n       }\n@@ -714,7 +720,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       resize(size_type __new_size, value_type __x = value_type())\n       {\n \tif (__new_size > size())\n-\t  insert(end(), __new_size - size(), __x);\n+\t  _M_fill_insert(end(), __new_size - size(), __x);\n \telse if (__new_size < size())\n \t  _M_erase_at_end(this->_M_impl._M_start + __new_size);\n       }\n@@ -916,7 +922,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \tif (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)\n \t  {\n \t    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,\n-\t                             __x);\n+\t\t\t\t     __x);\n \t    ++this->_M_impl._M_finish;\n \t  }\n \telse\n@@ -933,8 +939,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       { emplace_back(std::move(__x)); }\n \n       template<typename... _Args>\n-        void\n-        emplace_back(_Args&&... __args);\n+\tvoid\n+\templace_back(_Args&&... __args);\n #endif\n \n       /**\n@@ -967,8 +973,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  std::list.\n        */\n       template<typename... _Args>\n-        iterator\n-        emplace(const_iterator __position, _Args&&... __args);\n+\titerator\n+\templace(const_iterator __position, _Args&&... __args);\n \n       /**\n        *  @brief  Inserts given value into %vector before specified iterator.\n@@ -1030,7 +1036,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        */\n       iterator\n       insert(const_iterator __position, initializer_list<value_type> __l)\n-      { return this->insert(__position, __l.begin(), __l.end()); }\n+      {\n+\tauto __offset = __position - cbegin();\n+\t_M_range_insert(begin() + __offset, __l.begin(), __l.end(),\n+\t\t\tstd::random_access_iterator_tag());\n+\treturn begin() + __offset;\n+      }\n #endif\n \n #if __cplusplus >= 201103L\n@@ -1092,10 +1103,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        */\n       template<typename _InputIterator,\n \t       typename = std::_RequireInputIter<_InputIterator>>\n-        iterator\n-        insert(const_iterator __position, _InputIterator __first,\n+\titerator\n+\tinsert(const_iterator __position, _InputIterator __first,\n \t       _InputIterator __last)\n-        {\n+\t{\n \t  difference_type __offset = __position - cbegin();\n \t  _M_insert_dispatch(begin() + __offset,\n \t\t\t     __first, __last, __false_type());\n@@ -1117,10 +1128,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  consider using std::list.\n        */\n       template<typename _InputIterator>\n-        void\n-        insert(iterator __position, _InputIterator __first,\n+\tvoid\n+\tinsert(iterator __position, _InputIterator __first,\n \t       _InputIterator __last)\n-        {\n+\t{\n \t  // Check whether it's an integral type.  If so, it's not an iterator.\n \t  typedef typename std::__is_integer<_InputIterator>::__type _Integral;\n \t  _M_insert_dispatch(__position, __first, __last, _Integral());\n@@ -1196,7 +1207,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       {\n \tthis->_M_impl._M_swap_data(__x._M_impl);\n \t_Alloc_traits::_S_on_swap(_M_get_Tp_allocator(),\n-\t                          __x._M_get_Tp_allocator());\n+\t\t\t\t  __x._M_get_Tp_allocator());\n       }\n \n       /**\n@@ -1215,10 +1226,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  obtain @a n bytes of memory, and then copies [first,last) into it.\n        */\n       template<typename _ForwardIterator>\n-        pointer\n-        _M_allocate_and_copy(size_type __n,\n+\tpointer\n+\t_M_allocate_and_copy(size_type __n,\n \t\t\t     _ForwardIterator __first, _ForwardIterator __last)\n-        {\n+\t{\n \t  pointer __result = this->_M_allocate(__n);\n \t  __try\n \t    {\n@@ -1241,9 +1252,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 438. Ambiguity in the \"do the right thing\" clause\n       template<typename _Integer>\n-        void\n-        _M_initialize_dispatch(_Integer __n, _Integer __value, __true_type)\n-        {\n+\tvoid\n+\t_M_initialize_dispatch(_Integer __n, _Integer __value, __true_type)\n+\t{\n \t  this->_M_impl._M_start = _M_allocate(static_cast<size_type>(__n));\n \t  this->_M_impl._M_end_of_storage =\n \t    this->_M_impl._M_start + static_cast<size_type>(__n);\n@@ -1252,21 +1263,21 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n       // Called by the range constructor to implement [23.1.1]/9\n       template<typename _InputIterator>\n-        void\n-        _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,\n+\tvoid\n+\t_M_initialize_dispatch(_InputIterator __first, _InputIterator __last,\n \t\t\t       __false_type)\n-        {\n+\t{\n \t  typedef typename std::iterator_traits<_InputIterator>::\n \t    iterator_category _IterCategory;\n \t  _M_range_initialize(__first, __last, _IterCategory());\n \t}\n \n       // Called by the second initialize_dispatch above\n       template<typename _InputIterator>\n-        void\n-        _M_range_initialize(_InputIterator __first,\n+\tvoid\n+\t_M_range_initialize(_InputIterator __first,\n \t\t\t    _InputIterator __last, std::input_iterator_tag)\n-        {\n+\t{\n \t  for (; __first != __last; ++__first)\n #if __cplusplus >= 201103L\n \t    emplace_back(*__first);\n@@ -1277,10 +1288,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n       // Called by the second initialize_dispatch above\n       template<typename _ForwardIterator>\n-        void\n-        _M_range_initialize(_ForwardIterator __first,\n+\tvoid\n+\t_M_range_initialize(_ForwardIterator __first,\n \t\t\t    _ForwardIterator __last, std::forward_iterator_tag)\n-        {\n+\t{\n \t  const size_type __n = std::distance(__first, __last);\n \t  this->_M_impl._M_start = this->_M_allocate(__n);\n \t  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;\n@@ -1319,72 +1330,66 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 438. Ambiguity in the \"do the right thing\" clause\n       template<typename _Integer>\n-        void\n-        _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)\n-        { _M_fill_assign(__n, __val); }\n+\tvoid\n+\t_M_assign_dispatch(_Integer __n, _Integer __val, __true_type)\n+\t{ _M_fill_assign(__n, __val); }\n \n       // Called by the range assign to implement [23.1.1]/9\n       template<typename _InputIterator>\n-        void\n-        _M_assign_dispatch(_InputIterator __first, _InputIterator __last,\n+\tvoid\n+\t_M_assign_dispatch(_InputIterator __first, _InputIterator __last,\n \t\t\t   __false_type)\n-        {\n-\t  typedef typename std::iterator_traits<_InputIterator>::\n-\t    iterator_category _IterCategory;\n-\t  _M_assign_aux(__first, __last, _IterCategory());\n-\t}\n+\t{ _M_assign_aux(__first, __last, std::__iterator_category(__first)); }\n \n       // Called by the second assign_dispatch above\n       template<typename _InputIterator>\n-        void\n-        _M_assign_aux(_InputIterator __first, _InputIterator __last,\n+\tvoid\n+\t_M_assign_aux(_InputIterator __first, _InputIterator __last,\n \t\t      std::input_iterator_tag);\n \n       // Called by the second assign_dispatch above\n       template<typename _ForwardIterator>\n-        void\n-        _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,\n+\tvoid\n+\t_M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,\n \t\t      std::forward_iterator_tag);\n \n       // Called by assign(n,t), and the range assign when it turns out\n       // to be the same thing.\n       void\n       _M_fill_assign(size_type __n, const value_type& __val);\n \n-\n       // Internal insert functions follow.\n \n       // Called by the range insert to implement [23.1.1]/9\n \n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 438. Ambiguity in the \"do the right thing\" clause\n       template<typename _Integer>\n-        void\n-        _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __val,\n+\tvoid\n+\t_M_insert_dispatch(iterator __pos, _Integer __n, _Integer __val,\n \t\t\t   __true_type)\n-        { _M_fill_insert(__pos, __n, __val); }\n+\t{ _M_fill_insert(__pos, __n, __val); }\n \n       // Called by the range insert to implement [23.1.1]/9\n       template<typename _InputIterator>\n-        void\n-        _M_insert_dispatch(iterator __pos, _InputIterator __first,\n+\tvoid\n+\t_M_insert_dispatch(iterator __pos, _InputIterator __first,\n \t\t\t   _InputIterator __last, __false_type)\n-        {\n-\t  typedef typename std::iterator_traits<_InputIterator>::\n-\t    iterator_category _IterCategory;\n-\t  _M_range_insert(__pos, __first, __last, _IterCategory());\n+\t{\n+\t  _M_range_insert(__pos, __first, __last,\n+\t\t\t  std::__iterator_category(__first));\n \t}\n \n       // Called by the second insert_dispatch above\n       template<typename _InputIterator>\n-        void\n-        _M_range_insert(iterator __pos, _InputIterator __first,\n+\tvoid\n+\t_M_range_insert(iterator __pos, _InputIterator __first,\n \t\t\t_InputIterator __last, std::input_iterator_tag);\n \n       // Called by the second insert_dispatch above\n       template<typename _ForwardIterator>\n-        void\n-        _M_range_insert(iterator __pos, _ForwardIterator __first,\n+\tvoid\n+\t_M_range_insert(iterator __pos, _ForwardIterator __first,\n \t\t\t_ForwardIterator __last, std::forward_iterator_tag);\n \n       // Called by insert(p,n,x), and the range insert when it turns out to be\n@@ -1407,12 +1412,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       _M_insert_aux(iterator __position, const value_type& __x);\n #else\n       template<typename... _Args>\n-        void\n-        _M_insert_aux(iterator __position, _Args&&... __args);\n+\tvoid\n+\t_M_insert_aux(iterator __position, _Args&&... __args);\n \n       template<typename... _Args>\n-        void\n-        _M_emplace_back_aux(_Args&&... __args);\n+\tvoid\n+\t_M_emplace_back_aux(_Args&&... __args);\n #endif\n \n       // Called by the latter."}, {"sha": "93a8dc1002d5d8b6d3b2afccae9dc51004f82907", "filename": "libstdc++-v3/include/bits/vector.tcc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7e16fc536d3e954adceb395e20c76258186330b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7e16fc536d3e954adceb395e20c76258186330b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc?ref=d7e16fc536d3e954adceb395e20c76258186330b", "patch": "@@ -256,7 +256,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \tif (__first == __last)\n \t  _M_erase_at_end(__cur);\n \telse\n-\t  insert(end(), __first, __last);\n+\t  _M_range_insert(end(), __first, __last,\n+\t\t\t  std::__iterator_category(__first));\n       }\n \n   template<typename _Tp, typename _Alloc>"}]}