{"sha": "b5d9b9ab00c982b667c5df009b555464ca765765", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjVkOWI5YWIwMGM5ODJiNjY3YzVkZjAwOWI1NTU0NjRjYTc2NTc2NQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-04-05T01:34:46Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1999-04-05T01:34:46Z"}, "message": "pt.c (check_template_shadow): Don't treat OVERLOADs as _DECL nodes.\n\n\t* pt.c (check_template_shadow): Don't treat OVERLOADs as _DECL\n\tnodes.  Tidy.\n\nFrom-SVN: r26188", "tree": {"sha": "64ce3c34b845ac980442f297e1dc4089316a91ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64ce3c34b845ac980442f297e1dc4089316a91ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b5d9b9ab00c982b667c5df009b555464ca765765", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5d9b9ab00c982b667c5df009b555464ca765765", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5d9b9ab00c982b667c5df009b555464ca765765", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5d9b9ab00c982b667c5df009b555464ca765765/comments", "author": null, "committer": null, "parents": [{"sha": "2a97a8001815a314b7c3bc08e660c4dec1b8c847", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a97a8001815a314b7c3bc08e660c4dec1b8c847", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a97a8001815a314b7c3bc08e660c4dec1b8c847"}], "stats": {"total": 45, "additions": 33, "deletions": 12}, "files": [{"sha": "e341bc2766be76ff1679543f224c794e6f6cd455", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5d9b9ab00c982b667c5df009b555464ca765765/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5d9b9ab00c982b667c5df009b555464ca765765/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b5d9b9ab00c982b667c5df009b555464ca765765", "patch": "@@ -1,3 +1,8 @@\n+1999-04-04  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* pt.c (check_template_shadow): Don't treat OVERLOADs as _DECL\n+\tnodes.  Tidy.\n+\n 1999-04-03  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* class.c (maybe_fixup_vptrs, build_class_init_list): Lose."}, {"sha": "a4060c0c4b8685877a3b40c6369788373a4f6a50", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 28, "deletions": 12, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5d9b9ab00c982b667c5df009b555464ca765765/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5d9b9ab00c982b667c5df009b555464ca765765/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=b5d9b9ab00c982b667c5df009b555464ca765765", "patch": "@@ -1599,22 +1599,38 @@ check_template_shadow (decl)\n {\n   tree olddecl;\n \n+  /* If we're not in a template, we can't possibly shadow a template\n+     parameter.  */\n+  if (!current_template_parms)\n+    return;\n+\n+  /* Figure out what we're shadowing.  */\n   if (TREE_CODE (decl) == OVERLOAD)\n     decl = OVL_CURRENT (decl);\n   olddecl = IDENTIFIER_VALUE (DECL_NAME (decl));\n \n-  if (current_template_parms && olddecl)\n-    {\n-      /* We check for decl != olddecl to avoid bogus errors for using a\n-\t name inside a class.  We check TPFI to avoid duplicate errors for\n-\t inline member templates.  */\n-      if (decl != olddecl && DECL_TEMPLATE_PARM_P (olddecl)\n-\t  && ! TEMPLATE_PARMS_FOR_INLINE (current_template_parms))\n-\t{\n-\t  cp_error_at (\"declaration of `%#D'\", decl);\n-\t  cp_error_at (\" shadows template parm `%#D'\", olddecl);\n-\t}\n-    }\n+  /* If there's no previous binding for this name, we're not shadowing\n+     anything, let alone a template parameter.  */\n+  if (!olddecl)\n+    return;\n+\n+  /* If we're not shadowing a template parameter, we're done.  Note\n+     that OLDDECL might be an OVERLOAD (or perhaps even an\n+     ERROR_MARK), so we can't just blithely assume it to be a _DECL\n+     node.  */\n+  if (TREE_CODE_CLASS (TREE_CODE (olddecl)) != 'd'\n+      || !DECL_TEMPLATE_PARM_P (olddecl))\n+    return;\n+\n+  /* We check for decl != olddecl to avoid bogus errors for using a\n+     name inside a class.  We check TPFI to avoid duplicate errors for\n+     inline member templates.  */\n+  if (decl == olddecl \n+      || TEMPLATE_PARMS_FOR_INLINE (current_template_parms))\n+    return;\n+\n+  cp_error_at (\"declaration of `%#D'\", decl);\n+  cp_error_at (\" shadows template parm `%#D'\", olddecl);\n }\n \n /* Return a new TEMPLATE_PARM_INDEX with the indicated INDEX, LEVEL,"}]}