{"sha": "8685348075d91945066dea9b564bd42cbc1d22bd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODY4NTM0ODA3NWQ5MTk0NTA2NmRlYTliNTY0YmQ0MmNiYzFkMjJiZA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-04-06T05:21:05Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-04-06T18:30:02Z"}, "message": "c++: C++17 constexpr static data member linkage [PR99901]\n\nC++17 makes constexpr static data members implicitly inline variables.  In\nC++14, a subsequent out-of-class declaration is the definition.  We want to\ncontinue emitting a symbol for such a declaration in C++17 mode, for ABI\ncompatibility with C++14 code that wants to refer to it.\n\nNormally I'd distinguish in- and out-of-class declarations by looking at\nDECL_IN_AGGR_P, but we never set DECL_IN_AGGR_P on inline variables.  I\nthink that's wrong, but don't want to mess with it so close to release.\nConveniently, we already have a test for in-class declaration earlier in the\nfunction.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/99901\n\t* decl.c (cp_finish_decl): mark_needed an implicitly inline\n\tstatic data member with an out-of-class redeclaration.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/99901\n\t* g++.dg/cpp1z/inline-var9.C: New test.", "tree": {"sha": "56467e80370055dbe45e4b1f27a20924727617c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56467e80370055dbe45e4b1f27a20924727617c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8685348075d91945066dea9b564bd42cbc1d22bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8685348075d91945066dea9b564bd42cbc1d22bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8685348075d91945066dea9b564bd42cbc1d22bd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8685348075d91945066dea9b564bd42cbc1d22bd/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d48f87d5c1927b1bf2009af3251fe8757e823713", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d48f87d5c1927b1bf2009af3251fe8757e823713", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d48f87d5c1927b1bf2009af3251fe8757e823713"}], "stats": {"total": 58, "additions": 54, "deletions": 4}, "files": [{"sha": "edab147c78d8941d39b8849f9c571b51b190e872", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8685348075d91945066dea9b564bd42cbc1d22bd/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8685348075d91945066dea9b564bd42cbc1d22bd/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=8685348075d91945066dea9b564bd42cbc1d22bd", "patch": "@@ -7693,10 +7693,13 @@ cp_finish_decl (tree decl, tree init, bool init_const_expr_p,\n   if (asmspec_tree && asmspec_tree != error_mark_node)\n     asmspec = TREE_STRING_POINTER (asmspec_tree);\n \n-  if (current_class_type\n-      && CP_DECL_CONTEXT (decl) == current_class_type\n-      && TYPE_BEING_DEFINED (current_class_type)\n-      && !CLASSTYPE_TEMPLATE_INSTANTIATION (current_class_type)\n+  bool in_class_decl\n+    = (current_class_type\n+       && CP_DECL_CONTEXT (decl) == current_class_type\n+       && TYPE_BEING_DEFINED (current_class_type)\n+       && !CLASSTYPE_TEMPLATE_INSTANTIATION (current_class_type));\n+\n+  if (in_class_decl\n       && (DECL_INITIAL (decl) || init))\n     DECL_INITIALIZED_IN_CLASS_P (decl) = 1;\n \n@@ -8069,6 +8072,13 @@ cp_finish_decl (tree decl, tree init, bool init_const_expr_p,\n \t  if (!flag_weak)\n \t    /* Check again now that we have an initializer.  */\n \t    maybe_commonize_var (decl);\n+\t  /* A class-scope constexpr variable with an out-of-class declaration.\n+\t     C++17 makes them implicitly inline, but still force it out.  */\n+\t  if (DECL_INLINE_VAR_P (decl)\n+\t      && !DECL_VAR_DECLARED_INLINE_P (decl)\n+\t      && !DECL_TEMPLATE_INSTANTIATION (decl)\n+\t      && !in_class_decl)\n+\t    mark_needed (decl);\n \t}\n \n       if (var_definition_p"}, {"sha": "43c9748877be1b02992bbea5c3335e3166c05dc8", "filename": "gcc/testsuite/g++.dg/cpp1z/inline-var9.C", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8685348075d91945066dea9b564bd42cbc1d22bd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finline-var9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8685348075d91945066dea9b564bd42cbc1d22bd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finline-var9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finline-var9.C?ref=8685348075d91945066dea9b564bd42cbc1d22bd", "patch": "@@ -0,0 +1,40 @@\n+// PR c++/99901\n+// { dg-do compile { target c++11 } }\n+// { dg-final { scan-assembler-not \"_ZN1A1aE\" } }\n+// { dg-final { scan-assembler-not \"_ZN2A21aE\" } }\n+// { dg-final { scan-assembler-not \"_ZN1CIiE1cE\" } }\n+// { dg-final { scan-assembler \"_ZN1B1bE\" } }\n+// { dg-final { scan-assembler \"_ZN2B21bE\" } }\n+// { dg-final { scan-assembler \"_ZN2B31bE\" } }\n+\n+struct A {\n+  static const int a = 5;\n+};\n+\n+struct A2 {\n+  static constexpr int a = 5;\n+};\n+\n+struct B {\n+  static const int b;\n+};\n+constexpr int B::b = 5;\n+\n+struct B2 {\n+  static const int b = 5;\n+};\n+constexpr int B2::b;\n+\n+struct B3 {\n+  static constexpr int b = 5;\n+};\n+const int B3::b;\n+\n+template <class T>\n+struct C {\n+  static constexpr int c = 5;\n+};\n+template <class T>\n+constexpr int C<T>::c;\n+\n+int i = C<int>::c;"}]}