{"sha": "5b93b053495e46aaf29811f1ac23d7f484be6ea9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWI5M2IwNTM0OTVlNDZhYWYyOTgxMWYxYWMyM2Q3ZjQ4NGJlNmVhOQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2019-08-23T23:29:16Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2019-08-23T23:29:16Z"}, "message": "Fix handling of namespace-scope undeduced auto decls.\n\n\t* decl2.c (decl_dependent_p): New.\n\t(mark_used): Check it instead of just processing_template_decl.\n\nFrom-SVN: r274894", "tree": {"sha": "73f2917ced232884dd4de094b544aa95290e992c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73f2917ced232884dd4de094b544aa95290e992c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b93b053495e46aaf29811f1ac23d7f484be6ea9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b93b053495e46aaf29811f1ac23d7f484be6ea9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b93b053495e46aaf29811f1ac23d7f484be6ea9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b93b053495e46aaf29811f1ac23d7f484be6ea9/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "01c53a74cd594131d9b066eb3036c6245562dc41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01c53a74cd594131d9b066eb3036c6245562dc41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01c53a74cd594131d9b066eb3036c6245562dc41"}], "stats": {"total": 39, "additions": 38, "deletions": 1}, "files": [{"sha": "86d1849acc4b31bfd5e1a7c442c61c91b406de3a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b93b053495e46aaf29811f1ac23d7f484be6ea9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b93b053495e46aaf29811f1ac23d7f484be6ea9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5b93b053495e46aaf29811f1ac23d7f484be6ea9", "patch": "@@ -1,3 +1,8 @@\n+2019-08-22  Jason Merrill  <jason@redhat.com>\n+\n+\t* decl2.c (decl_dependent_p): New.\n+\t(mark_used): Check it instead of just processing_template_decl.\n+\n 2019-08-22  Jason Merrill  <jason@redhat.com>\n \n \t* parser.c (cp_parser_nested_name_specifier_opt): Avoid redundant"}, {"sha": "36c6f4ce06ab28169f3d84268c9db49b1bc7e94d", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b93b053495e46aaf29811f1ac23d7f484be6ea9/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b93b053495e46aaf29811f1ac23d7f484be6ea9/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=5b93b053495e46aaf29811f1ac23d7f484be6ea9", "patch": "@@ -5425,6 +5425,25 @@ cp_warn_deprecated_use_scopes (tree scope)\n     }\n }\n \n+/* True if DECL or its enclosing scope have unbound template parameters.  */\n+\n+bool\n+decl_dependent_p (tree decl)\n+{\n+  if (DECL_FUNCTION_SCOPE_P (decl)\n+      || TREE_CODE (decl) == CONST_DECL\n+      || TREE_CODE (decl) == USING_DECL\n+      || TREE_CODE (decl) == FIELD_DECL)\n+    decl = CP_DECL_CONTEXT (decl);\n+  if (tree tinfo = get_template_info (decl))\n+    if (any_dependent_template_arguments_p (TI_ARGS (tinfo)))\n+      return true;\n+  if (LAMBDA_FUNCTION_P (decl)\n+      && dependent_type_p (DECL_CONTEXT (decl)))\n+    return true;\n+  return false;\n+}\n+\n /* Mark DECL (either a _DECL or a BASELINK) as \"used\" in the program.\n    If DECL is a specialization or implicitly declared class member,\n    generate the actual definition.  Return false if something goes\n@@ -5451,6 +5470,9 @@ mark_used (tree decl, tsubst_flags_t complain)\n       decl = OVL_FIRST (decl);\n     }\n \n+  if (!DECL_P (decl))\n+    return true;\n+\n   /* Set TREE_USED for the benefit of -Wunused.  */\n   TREE_USED (decl) = 1;\n   /* And for structured bindings also the underlying decl.  */\n@@ -5498,7 +5520,7 @@ mark_used (tree decl, tsubst_flags_t complain)\n       || DECL_LANG_SPECIFIC (decl) == NULL\n       || DECL_THUNK_P (decl))\n     {\n-      if (!processing_template_decl\n+      if (!decl_dependent_p (decl)\n \t  && !require_deduced_type (decl, complain))\n \treturn false;\n       return true;"}, {"sha": "1e3d15dca1cb79c22944dfc8cc6980b23dd02d4d", "filename": "gcc/testsuite/g++.dg/cpp1z/constexpr-if30.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b93b053495e46aaf29811f1ac23d7f484be6ea9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if30.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b93b053495e46aaf29811f1ac23d7f484be6ea9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if30.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if30.C?ref=5b93b053495e46aaf29811f1ac23d7f484be6ea9", "patch": "@@ -0,0 +1,10 @@\n+// { dg-do compile { target c++17 } }\n+\n+auto fn = [](auto i) {\n+    if constexpr (sizeof(i) == 1)\n+        return fn(123);\t\t// { dg-error \"auto\" }\n+};\n+\n+int main() {\n+    fn('!');\n+}"}]}