{"sha": "2855325f50569ed1a0c06b1cd8d86fe580472924", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjg1NTMyNWY1MDU2OWVkMWEwYzA2YjFjZDhkODZmZTU4MDQ3MjkyNA==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2011-10-10T19:07:35Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2011-10-10T19:07:35Z"}, "message": "re PR fortran/50564 (Front-end optimization - ICE with FORALL)\n\n2011-10-10  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/50564\n\t* frontend-passes (forall_level):  New variable.\n\t(cfe_register_funcs):  Don't register functions if we\n\tare within a forall loop.\n\t(optimize_namespace):  Set forall_level to 0 before entry.\n\t(gfc_code_walker):  Increase/decrease forall_level.\n\n2011-10-10  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/50564\n\t* gfortran.dg/forall_15.f90:  New test case.\n\nFrom-SVN: r179770", "tree": {"sha": "a8e423b877426619210fa4f103847793aae46c08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8e423b877426619210fa4f103847793aae46c08"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2855325f50569ed1a0c06b1cd8d86fe580472924", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2855325f50569ed1a0c06b1cd8d86fe580472924", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2855325f50569ed1a0c06b1cd8d86fe580472924", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2855325f50569ed1a0c06b1cd8d86fe580472924/comments", "author": null, "committer": null, "parents": [{"sha": "50da34bb1b301f869253ca55bdb4833baa24ab4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50da34bb1b301f869253ca55bdb4833baa24ab4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50da34bb1b301f869253ca55bdb4833baa24ab4e"}], "stats": {"total": 57, "additions": 57, "deletions": 0}, "files": [{"sha": "64f58e85c2d5b2cd4f410e6acc01322b990a72b5", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2855325f50569ed1a0c06b1cd8d86fe580472924/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2855325f50569ed1a0c06b1cd8d86fe580472924/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=2855325f50569ed1a0c06b1cd8d86fe580472924", "patch": "@@ -1,3 +1,12 @@\n+2011-10-10  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/50564\n+\t* frontend-passes (forall_level):  New variable.\n+\t(cfe_register_funcs):  Don't register functions if we\n+\tare within a forall loop.\n+\t(optimize_namespace):  Set forall_level to 0 before entry.\n+\t(gfc_code_walker):  Increase/decrease forall_level.\n+\n 2011-10-09  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/45044"}, {"sha": "dcbaf06d17078cbeb0ac5f1b84e75893b0c75a31", "filename": "gcc/fortran/frontend-passes.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2855325f50569ed1a0c06b1cd8d86fe580472924/gcc%2Ffortran%2Ffrontend-passes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2855325f50569ed1a0c06b1cd8d86fe580472924/gcc%2Ffortran%2Ffrontend-passes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ffrontend-passes.c?ref=2855325f50569ed1a0c06b1cd8d86fe580472924", "patch": "@@ -62,6 +62,10 @@ static gfc_code *inserted_block, **changed_statement;\n \n gfc_namespace *current_ns;\n \n+/* If we are within any forall loop.  */\n+\n+static int forall_level;\n+\n /* Entry point - run all passes for a namespace.  So far, only an\n    optimization pass is run.  */\n \n@@ -165,6 +169,12 @@ cfe_register_funcs (gfc_expr **e, int *walk_subtrees ATTRIBUTE_UNUSED,\n \t  || (*e)->ts.u.cl->length->expr_type != EXPR_CONSTANT))\n     return 0;\n \n+  /* We don't do function elimination within FORALL statements, it can\n+     lead to wrong-code in certain circumstances.  */\n+\n+  if (forall_level > 0)\n+    return 0;\n+\n   /* If we don't know the shape at compile time, we create an allocatable\n      temporary variable to hold the intermediate result, but only if\n      allocation on assignment is active.  */\n@@ -493,6 +503,7 @@ optimize_namespace (gfc_namespace *ns)\n {\n \n   current_ns = ns;\n+  forall_level = 0;\n \n   gfc_code_walker (&ns->code, convert_do_while, dummy_expr_callback, NULL);\n   gfc_code_walker (&ns->code, cfe_code, cfe_expr_0, NULL);\n@@ -1193,6 +1204,8 @@ gfc_code_walker (gfc_code **c, walk_code_fn_t codefn, walk_expr_fn_t exprfn,\n \t\t    WALK_SUBEXPR (fa->end);\n \t\t    WALK_SUBEXPR (fa->stride);\n \t\t  }\n+\t\tif (co->op == EXEC_FORALL)\n+\t\t  forall_level ++;\n \t\tbreak;\n \t      }\n \n@@ -1335,6 +1348,10 @@ gfc_code_walker (gfc_code **c, walk_code_fn_t codefn, walk_expr_fn_t exprfn,\n \t      WALK_SUBEXPR (b->expr2);\n \t      WALK_SUBCODE (b->next);\n \t    }\n+\n+\t  if (co->op == EXEC_FORALL)\n+\t    forall_level --;\n+\n \t}\n     }\n   return 0;"}, {"sha": "1be870bbd3d38308d49b664784613362cf8185f4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2855325f50569ed1a0c06b1cd8d86fe580472924/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2855325f50569ed1a0c06b1cd8d86fe580472924/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2855325f50569ed1a0c06b1cd8d86fe580472924", "patch": "@@ -1,3 +1,8 @@\n+2011-10-10  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/50564\n+\t* gfortran.dg/forall_15.f90:  New test case.\n+\n 2011-10-10  Aldy Hernandez  <aldyh@redhat.com>\n \t    Andrew Macleod  <amacleod@redhat.com>\n "}, {"sha": "c875e033312c5eacd95efd26c4f0e6722ac19bd7", "filename": "gcc/testsuite/gfortran.dg/forall_15.f90", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2855325f50569ed1a0c06b1cd8d86fe580472924/gcc%2Ftestsuite%2Fgfortran.dg%2Fforall_15.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2855325f50569ed1a0c06b1cd8d86fe580472924/gcc%2Ftestsuite%2Fgfortran.dg%2Fforall_15.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fforall_15.f90?ref=2855325f50569ed1a0c06b1cd8d86fe580472924", "patch": "@@ -0,0 +1,26 @@\n+! { dg-do run }\n+! { dg-options \"-ffrontend-optimize -fdump-tree-original\" }\n+! PR 50564 - this used to ICE with front end optimization.\n+! Original test case by Andrew Benson.\n+program test\n+  implicit none\n+  double precision, dimension(2) :: timeSteps, control\n+  integer                        :: iTime\n+  double precision               :: ratio\n+  double precision               :: a\n+\n+  ratio = 0.7d0\n+  control(1) = ratio**(dble(1)-0.5d0)-ratio**(dble(1)-1.5d0)\n+  control(2) = ratio**(dble(2)-0.5d0)-ratio**(dble(2)-1.5d0)\n+  forall(iTime=1:2)\n+     timeSteps(iTime)=ratio**(dble(iTime)-0.5d0)-ratio**(dble(iTime)-1.5d0)\n+  end forall\n+  if (any(abs(timesteps - control) > 1d-10)) call abort\n+\n+  ! Make sure we still do the front-end optimization after a forall\n+  a = cos(ratio)*cos(ratio) + sin(ratio)*sin(ratio)\n+  if (abs(a-1.d0) > 1d-10) call abort\n+end program test\n+! { dg-final { scan-tree-dump-times \"__builtin_cos\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_sin\" 1 \"original\" } }\n+! { dg-final { cleanup-tree-dump \"original\" } }"}]}