{"sha": "cf5028e36d20e3fb646b4553de89b2a04ca0503a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Y1MDI4ZTM2ZDIwZTNmYjY0NmI0NTUzZGU4OWIyYTA0Y2EwNTAzYQ==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2008-08-20T12:07:14Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-08-20T12:07:14Z"}, "message": "g-comlin.adb: Minor reformatting\n\n2008-08-20  Robert Dewar  <dewar@adacore.com>\n\n\t* g-comlin.adb: Minor reformatting\n\nFrom-SVN: r139273", "tree": {"sha": "c7a7ab1ff2a156ff3cecb3f18d683129c9af7e74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7a7ab1ff2a156ff3cecb3f18d683129c9af7e74"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf5028e36d20e3fb646b4553de89b2a04ca0503a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf5028e36d20e3fb646b4553de89b2a04ca0503a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf5028e36d20e3fb646b4553de89b2a04ca0503a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf5028e36d20e3fb646b4553de89b2a04ca0503a/comments", "author": null, "committer": null, "parents": [{"sha": "bb1b6ec8abd9024ad5a312e4e60e974e170694e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb1b6ec8abd9024ad5a312e4e60e974e170694e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb1b6ec8abd9024ad5a312e4e60e974e170694e5"}], "stats": {"total": 131, "additions": 81, "deletions": 50}, "files": [{"sha": "7599b5e9fca0e02bab4e0f4da12fbf8b4f97147e", "filename": "gcc/ada/g-comlin.adb", "status": "modified", "additions": 81, "deletions": 50, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf5028e36d20e3fb646b4553de89b2a04ca0503a/gcc%2Fada%2Fg-comlin.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf5028e36d20e3fb646b4553de89b2a04ca0503a/gcc%2Fada%2Fg-comlin.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-comlin.adb?ref=cf5028e36d20e3fb646b4553de89b2a04ca0503a", "patch": "@@ -106,10 +106,12 @@ package body GNAT.Command_Line is\n    procedure Remove (Line : in out Argument_List_Access; Index : Integer);\n    --  Remove a specific element from Line\n \n-   procedure Append\n-     (Line : in out Argument_List_Access;\n-      Str  : String_Access);\n-   --  Append a new element to Line\n+   procedure Add\n+     (Line   : in out Argument_List_Access;\n+      Str    : String_Access;\n+      Before : Boolean := False);\n+   --  Add a new element to Line. If Before is True, the item is inserted at\n+   --  the beginning.\n \n    function Can_Have_Parameter (S : String) return Boolean;\n    --  Tell if S can have a parameter.\n@@ -125,7 +127,7 @@ package body GNAT.Command_Line is\n    procedure For_Each_Simple_Switch\n      (Cmd       : Command_Line;\n       Switch    : String;\n-      Parameter : String := \"\";\n+      Parameter : String  := \"\";\n       Unalias   : Boolean := True);\n    --  Breaks Switch into as simple switches as possible (expanding aliases and\n    --  ungrouping common prefixes when possible), and call Callback for each of\n@@ -143,14 +145,14 @@ package body GNAT.Command_Line is\n       Result   : Argument_List_Access;\n       Sections : Argument_List_Access;\n       Params   : Argument_List_Access);\n-   --  Group switches with common prefixes whenever possible.\n-   --  Once they have been grouped, we also check items for possible aliasing\n+   --  Group switches with common prefixes whenever possible. Once they have\n+   --  been grouped, we also check items for possible aliasing.\n \n    procedure Alias_Switches\n      (Cmd    : Command_Line;\n       Result : Argument_List_Access;\n       Params : Argument_List_Access);\n-   --  When possible, replace or more switches by an alias, i.e. a shorter\n+   --  When possible, replace one or more switches by an alias, i.e. a shorter\n    --  version.\n \n    function Looking_At\n@@ -1080,8 +1082,8 @@ package body GNAT.Command_Line is\n          Config := new Command_Line_Configuration_Record;\n       end if;\n \n-      Append (Config.Aliases,    new String'(Switch));\n-      Append (Config.Expansions, new String'(Expanded));\n+      Add (Config.Aliases,    new String'(Switch));\n+      Add (Config.Expansions, new String'(Expanded));\n    end Define_Alias;\n \n    -------------------\n@@ -1097,7 +1099,7 @@ package body GNAT.Command_Line is\n          Config := new Command_Line_Configuration_Record;\n       end if;\n \n-      Append (Config.Prefixes, new String'(Prefix));\n+      Add (Config.Prefixes, new String'(Prefix));\n    end Define_Prefix;\n \n    -------------------\n@@ -1113,7 +1115,7 @@ package body GNAT.Command_Line is\n          Config := new Command_Line_Configuration_Record;\n       end if;\n \n-      Append (Config.Switches, new String'(Switch));\n+      Add (Config.Switches, new String'(Switch));\n    end Define_Switch;\n \n    --------------------\n@@ -1129,7 +1131,7 @@ package body GNAT.Command_Line is\n          Config := new Command_Line_Configuration_Record;\n       end if;\n \n-      Append (Config.Sections, new String'(Section));\n+      Add (Config.Sections, new String'(Section));\n    end Define_Section;\n \n    ------------------\n@@ -1572,29 +1574,32 @@ package body GNAT.Command_Line is\n    ----------------\n \n    procedure Add_Switch\n-     (Cmd       : in out Command_Line;\n-      Switch    : String;\n-      Parameter : String := \"\";\n-      Separator : Character := ' ';\n-      Section   : String := \"\")\n+     (Cmd        : in out Command_Line;\n+      Switch     : String;\n+      Parameter  : String    := \"\";\n+      Separator  : Character := ' ';\n+      Section    : String    := \"\";\n+      Add_Before : Boolean   := False)\n    is\n       Success : Boolean;\n       pragma Unreferenced (Success);\n    begin\n-      Add_Switch (Cmd, Switch, Parameter, Separator, Section, Success);\n+      Add_Switch\n+        (Cmd, Switch, Parameter, Separator, Section, Add_Before, Success);\n    end Add_Switch;\n \n    ----------------\n    -- Add_Switch --\n    ----------------\n \n    procedure Add_Switch\n-     (Cmd       : in out Command_Line;\n-      Switch    : String;\n-      Parameter : String := \"\";\n-      Separator : Character := ' ';\n-      Section   : String := \"\";\n-      Success   : out Boolean)\n+     (Cmd        : in out Command_Line;\n+      Switch     : String;\n+      Parameter  : String := \"\";\n+      Separator  : Character := ' ';\n+      Section    : String := \"\";\n+      Add_Before : Boolean := False;\n+      Success    : out Boolean)\n    is\n       procedure Add_Simple_Switch (Simple : String; Param : String);\n       --  Add a new switch that has had all its aliases expanded, and switches\n@@ -1632,34 +1637,47 @@ package body GNAT.Command_Line is\n                if Cmd.Expanded (C).all = Simple\n                  and then\n                    ((Cmd.Params (C) = null and then Param = \"\")\n-                    or else\n-                      (Cmd.Params (C) /= null\n-                       and then Cmd.Params (C).all = Separator & Param))\n+                     or else\n+                       (Cmd.Params (C) /= null\n+                         and then Cmd.Params (C).all = Separator & Param))\n                  and then\n                    ((Cmd.Sections (C) = null and then Section = \"\")\n-                    or else\n-                      (Cmd.Sections (C) /= null\n-                       and then Cmd.Sections (C).all = Section))\n+                     or else\n+                       (Cmd.Sections (C) /= null\n+                         and then Cmd.Sections (C).all = Section))\n                then\n                   return;\n                end if;\n             end loop;\n \n             --  Inserting at least one switch\n+\n             Success := True;\n-            Append (Cmd.Expanded, new String'(Simple));\n+            Add (Cmd.Expanded, new String'(Simple), Add_Before);\n \n             if Param /= \"\" then\n-               Append (Cmd.Params, new String'(Separator & Param));\n+               Add\n+                 (Cmd.Params,\n+                  new String'(Separator & Param),\n+                  Add_Before);\n \n             else\n-               Append (Cmd.Params, null);\n+               Add\n+                 (Cmd.Params,\n+                  null,\n+                  Add_Before);\n             end if;\n \n             if Section = \"\" then\n-               Append (Cmd.Sections, null);\n+               Add\n+                 (Cmd.Sections,\n+                  null,\n+                  Add_Before);\n             else\n-               Append (Cmd.Sections, new String'(Section));\n+               Add\n+                 (Cmd.Sections,\n+                  new String'(Section),\n+                  Add_Before);\n             end if;\n          end if;\n       end Add_Simple_Switch;\n@@ -1702,22 +1720,35 @@ package body GNAT.Command_Line is\n    -- Append --\n    ------------\n \n-   procedure Append\n-     (Line : in out Argument_List_Access;\n-      Str  : String_Access)\n+   procedure Add\n+     (Line   : in out Argument_List_Access;\n+      Str    : String_Access;\n+      Before : Boolean := False)\n    is\n       Tmp : Argument_List_Access := Line;\n+\n    begin\n       if Tmp /= null then\n          Line := new Argument_List (Tmp'First .. Tmp'Last + 1);\n-         Line (Tmp'Range) := Tmp.all;\n+\n+         if Before then\n+            Line (Tmp'First + 1 .. Tmp'Last + 1) := Tmp.all;\n+         else\n+            Line (Tmp'Range) := Tmp.all;\n+         end if;\n+\n          Unchecked_Free (Tmp);\n+\n       else\n          Line := new Argument_List (1 .. 1);\n       end if;\n \n-      Line (Line'Last) := Str;\n-   end Append;\n+      if Before then\n+         Line (Line'First) := Str;\n+      else\n+         Line (Line'Last) := Str;\n+      end if;\n+   end Add;\n \n    -------------------\n    -- Remove_Switch --\n@@ -1766,10 +1797,10 @@ package body GNAT.Command_Line is\n                if Cmd.Expanded (C).all = Simple\n                  and then\n                    (Remove_All\n-                    or else (Cmd.Sections (C) = null\n-                             and then Section = \"\")\n-                    or else (Cmd.Sections (C) /= null\n-                             and then Section = Cmd.Sections (C).all))\n+                     or else (Cmd.Sections (C) = null\n+                               and then Section = \"\")\n+                     or else (Cmd.Sections (C) /= null\n+                               and then Section = Cmd.Sections (C).all))\n                  and then (not Has_Parameter or else Cmd.Params (C) /= null)\n                then\n                   Remove (Cmd.Expanded, C);\n@@ -1789,7 +1820,7 @@ package body GNAT.Command_Line is\n       end Remove_Simple_Switch;\n \n       procedure Remove_Simple_Switches is\n-         new For_Each_Simple_Switch (Remove_Simple_Switch);\n+        new For_Each_Simple_Switch (Remove_Simple_Switch);\n \n    --  Start of processing for Remove_Switch\n \n@@ -1826,10 +1857,10 @@ package body GNAT.Command_Line is\n                if Cmd.Expanded (C).all = Simple\n                  and then\n                    ((Cmd.Sections (C) = null\n-                     and then Section = \"\")\n+                      and then Section = \"\")\n                     or else\n                       (Cmd.Sections (C) /= null\n-                       and then Section = Cmd.Sections (C).all))\n+                        and then Section = Cmd.Sections (C).all))\n                  and then\n                    ((Cmd.Params (C) = null and then Param = \"\")\n                       or else\n@@ -2126,7 +2157,7 @@ package body GNAT.Command_Line is\n             end loop;\n \n             if not Found then\n-               Append (Sections_List, Sections (E));\n+               Add (Sections_List, Sections (E));\n             end if;\n          end if;\n       end loop;"}]}