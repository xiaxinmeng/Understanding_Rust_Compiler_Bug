{"sha": "e9a794351b31fd48b76e65c2dc29f534829e42cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTlhNzk0MzUxYjMxZmQ0OGI3NmU2NWMyZGMyOWY1MzQ4MjllNDJjYw==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2014-07-31T09:43:55Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-31T09:43:55Z"}, "message": "exp_ch5.adb, [...]: Minor comment correction.\n\n2014-07-31  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_ch5.adb, freeze.adb, exp_ch3.adb: Minor comment correction.\n\t* s-arit64.adb: Minor reformatting.\n\n2014-07-31  Robert Dewar  <dewar@adacore.com>\n\n\t* gnat1drv.adb (Adjust_Global_Switches): Default for overflow\n\tchecking is enabled except in GNAT_Mode.\n\t* switch-c.adb (Scan_Front_End_Switches): Implement -gnato0\n\t(suppress overflow checks).\n\nFrom-SVN: r213327", "tree": {"sha": "e113ac5a4b45830f2790a8af96c4e8eac9a4feb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e113ac5a4b45830f2790a8af96c4e8eac9a4feb8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e9a794351b31fd48b76e65c2dc29f534829e42cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9a794351b31fd48b76e65c2dc29f534829e42cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9a794351b31fd48b76e65c2dc29f534829e42cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9a794351b31fd48b76e65c2dc29f534829e42cc/comments", "author": null, "committer": null, "parents": [{"sha": "7c0c194ba4cd9a9bb779075cb977cb319882bc0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c0c194ba4cd9a9bb779075cb977cb319882bc0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c0c194ba4cd9a9bb779075cb977cb319882bc0b"}], "stats": {"total": 104, "additions": 73, "deletions": 31}, "files": [{"sha": "1bf5222de023031905ae36cd3e056a5238e36876", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9a794351b31fd48b76e65c2dc29f534829e42cc/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9a794351b31fd48b76e65c2dc29f534829e42cc/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e9a794351b31fd48b76e65c2dc29f534829e42cc", "patch": "@@ -1,3 +1,15 @@\n+2014-07-31  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_ch5.adb, freeze.adb, exp_ch3.adb: Minor comment correction.\n+\t* s-arit64.adb: Minor reformatting.\n+\n+2014-07-31  Robert Dewar  <dewar@adacore.com>\n+\n+\t* gnat1drv.adb (Adjust_Global_Switches): Default for overflow\n+\tchecking is enabled except in GNAT_Mode.\n+\t* switch-c.adb (Scan_Front_End_Switches): Implement -gnato0\n+\t(suppress overflow checks).\n+\n 2014-07-31  Ed Schonberg  <schonberg@adacore.com>\n \n \t* exp_ch3.adb (Expand_Freeze_Record_Type): Do not build an"}, {"sha": "60d4ba7244ddb61c4fc55b665fb2fd26d6dcc7e5", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9a794351b31fd48b76e65c2dc29f534829e42cc/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9a794351b31fd48b76e65c2dc29f534829e42cc/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=e9a794351b31fd48b76e65c2dc29f534829e42cc", "patch": "@@ -1752,7 +1752,7 @@ package body Exp_Ch3 is\n       --  objects on list Decls.\n \n       function Build_Init_Call_Thru (Parameters : List_Id) return List_Id;\n-      --  Given a untagged type-derivation that declares discriminants, e.g.\n+      --  Given an untagged type-derivation that declares discriminants, e.g.\n       --\n       --     type R (R1, R2 : Integer) is record ... end record;\n       --     type D (D1 : Integer) is new R (1, D1);\n@@ -5838,7 +5838,7 @@ package body Exp_Ch3 is\n \n             --  Handle C++ constructor calls. Note that we do not check that\n             --  Typ is a tagged type since the equivalent Ada type of a C++\n-            --  class that has no virtual methods is a untagged limited\n+            --  class that has no virtual methods is an untagged limited\n             --  record type.\n \n             elsif Is_CPP_Constructor_Call (Expr) then"}, {"sha": "94f6cd92a690f7d31fbdc0c6a0d1ced1b0257f15", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9a794351b31fd48b76e65c2dc29f534829e42cc/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9a794351b31fd48b76e65c2dc29f534829e42cc/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=e9a794351b31fd48b76e65c2dc29f534829e42cc", "patch": "@@ -106,7 +106,7 @@ package body Exp_Ch5 is\n    --  using the standard Insert_Actions mechanism.\n \n    procedure Expand_Assign_Record (N : Node_Id);\n-   --  N is an assignment of a untagged record value. This routine handles\n+   --  N is an assignment of an untagged record value. This routine handles\n    --  the case where the assignment must be made component by component,\n    --  either because the target is not byte aligned, or there is a change\n    --  of representation, or when we have a tagged type with a representation"}, {"sha": "99464b8ddf192249b91b87981df76936aa7a3b6e", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9a794351b31fd48b76e65c2dc29f534829e42cc/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9a794351b31fd48b76e65c2dc29f534829e42cc/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=e9a794351b31fd48b76e65c2dc29f534829e42cc", "patch": "@@ -4537,8 +4537,8 @@ package body Freeze is\n             return No_List;\n          end if;\n \n-         --  Check for error of Type_Invariant'Class applied to a untagged type\n-         --  (check delayed to freeze time when full type is available).\n+         --  Check for error of Type_Invariant'Class applied to an untagged\n+         --  type (check delayed to freeze time when full type is available).\n \n          declare\n             Prag : constant Node_Id := Get_Pragma (E, Pragma_Invariant);"}, {"sha": "353f6d07d1c77c8568815f686886d876b34584c4", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9a794351b31fd48b76e65c2dc29f534829e42cc/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9a794351b31fd48b76e65c2dc29f534829e42cc/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=e9a794351b31fd48b76e65c2dc29f534829e42cc", "patch": "@@ -511,9 +511,13 @@ procedure Gnat1drv is\n       --  Otherwise set overflow mode defaults\n \n       else\n-         --  Otherwise set overflow checks off by default\n+         --  Overflow checks are on by default (Suppress set False) except in\n+         --  GNAT_Mode, where we want them off by default (we are not ready to\n+         --  enable overflow checks in the compiler yet, for one thing the case\n+         --  of 64-bit checks needs System.Arith_64 which is not a compiler\n+         --  unit and it is a pain to try to include it in the compiler.\n \n-         Suppress_Options.Suppress (Overflow_Check) := True;\n+         Suppress_Options.Suppress (Overflow_Check) := GNAT_Mode;\n \n          --  Set appropriate default overflow handling mode. Note: at present\n          --  we set STRICT in all three of the following cases. They are\n@@ -531,8 +535,8 @@ procedure Gnat1drv is\n          --  flags set, so this was dead code anyway.\n \n          elsif Targparm.Backend_Divide_Checks_On_Target\n-           and\n-             Targparm.Backend_Overflow_Checks_On_Target\n+                 and\n+               Targparm.Backend_Overflow_Checks_On_Target\n          then\n             Suppress_Options.Overflow_Mode_General    := Strict;\n             Suppress_Options.Overflow_Mode_Assertions := Strict;"}, {"sha": "adcb66fb9f1ef0dfca4a89e9040e4f2ee3d650b2", "filename": "gcc/ada/s-arit64.adb", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9a794351b31fd48b76e65c2dc29f534829e42cc/gcc%2Fada%2Fs-arit64.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9a794351b31fd48b76e65c2dc29f534829e42cc/gcc%2Fada%2Fs-arit64.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-arit64.adb?ref=e9a794351b31fd48b76e65c2dc29f534829e42cc", "patch": "@@ -259,8 +259,8 @@ package body System.Arith_64 is\n          T2 := 0;\n       end if;\n \n-      --  Here we have T2 set to the contribution to the upper half\n-      --  of the result from the upper halves of the input values.\n+      --  Here we have T2 set to the contribution to the upper half of the\n+      --  result from the upper halves of the input values.\n \n       T1 := Xlo * Ylo;\n       T2 := T2 + Hi (T1);\n@@ -332,9 +332,9 @@ package body System.Arith_64 is\n \n       Scale : Natural;\n       --  Scaling factor used for multiple-precision divide. Dividend and\n-      --  Divisor are multiplied by 2 ** Scale, and the final remainder\n-      --  is divided by the scaling factor. The reason for this scaling\n-      --  is to allow more accurate estimation of quotient digits.\n+      --  Divisor are multiplied by 2 ** Scale, and the final remainder is\n+      --  divided by the scaling factor. The reason for this scaling is to\n+      --  allow more accurate estimation of quotient digits.\n \n       T1, T2, T3 : Uns64;\n       --  Temporary values\n@@ -383,8 +383,8 @@ package body System.Arith_64 is\n          D (1) := 0;\n       end if;\n \n-      --  Now it is time for the dreaded multiple precision division. First\n-      --  an easy case, check for the simple case of a one digit divisor.\n+      --  Now it is time for the dreaded multiple precision division. First an\n+      --  easy case, check for the simple case of a one digit divisor.\n \n       if Zhi = 0 then\n          if D (1) /= 0 or else D (2) >= Zlo then"}, {"sha": "5cdbd41415f231c93daba55bd56ac2ea96a85e14", "filename": "gcc/ada/switch-c.adb", "status": "modified", "additions": 41, "deletions": 15, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9a794351b31fd48b76e65c2dc29f534829e42cc/gcc%2Fada%2Fswitch-c.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9a794351b31fd48b76e65c2dc29f534829e42cc/gcc%2Fada%2Fswitch-c.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch-c.adb?ref=e9a794351b31fd48b76e65c2dc29f534829e42cc", "patch": "@@ -953,38 +953,57 @@ package body Switch.C is\n \n             when 'o' =>\n                Ptr := Ptr + 1;\n-               Suppress_Options.Suppress (Overflow_Check) := False;\n \n-               --  Case of no digits after the -gnato\n+               --  Case of -gnato0 (overflow checking turned off)\n+\n+               if Ptr <= Max and then Switch_Chars (Ptr) = '0' then\n+                  Ptr := Ptr + 1;\n+                  Suppress_Options.Suppress (Overflow_Check) := True;\n+\n+                  --  We set strict mode in case overflow checking is turned\n+                  --  on locally (also records that we had a -gnato switch).\n \n-               if Ptr > Max or else Switch_Chars (Ptr) not in '1' .. '3' then\n                   Suppress_Options.Overflow_Mode_General    := Strict;\n                   Suppress_Options.Overflow_Mode_Assertions := Strict;\n \n-               --  At least one digit after the -gnato\n+               --  All cases other than -gnato0 (overflow checking turned on)\n \n                else\n-                  --  Handle first digit after -gnato\n-\n-                  Suppress_Options.Overflow_Mode_General :=\n-                    Get_Overflow_Mode (Switch_Chars (Ptr));\n-                  Ptr := Ptr + 1;\n+                  Suppress_Options.Suppress (Overflow_Check) := False;\n \n-                  --  Only one digit after -gnato, set assertions mode to\n-                  --  be the same as general mode.\n+                  --  Case of no digits after the -gnato\n \n                   if Ptr > Max\n                     or else Switch_Chars (Ptr) not in '1' .. '3'\n                   then\n-                     Suppress_Options.Overflow_Mode_Assertions :=\n-                       Suppress_Options.Overflow_Mode_General;\n+                     Suppress_Options.Overflow_Mode_General    := Strict;\n+                     Suppress_Options.Overflow_Mode_Assertions := Strict;\n \n-                  --  Process second digit after -gnato\n+                  --  At least one digit after the -gnato\n \n                   else\n-                     Suppress_Options.Overflow_Mode_Assertions :=\n+                     --  Handle first digit after -gnato\n+\n+                     Suppress_Options.Overflow_Mode_General :=\n                        Get_Overflow_Mode (Switch_Chars (Ptr));\n                      Ptr := Ptr + 1;\n+\n+                     --  Only one digit after -gnato, set assertions mode to be\n+                     --  the same as general mode.\n+\n+                     if Ptr > Max\n+                       or else Switch_Chars (Ptr) not in '1' .. '3'\n+                     then\n+                        Suppress_Options.Overflow_Mode_Assertions :=\n+                          Suppress_Options.Overflow_Mode_General;\n+\n+                     --  Process second digit after -gnato\n+\n+                     else\n+                        Suppress_Options.Overflow_Mode_Assertions :=\n+                          Get_Overflow_Mode (Switch_Chars (Ptr));\n+                        Ptr := Ptr + 1;\n+                     end if;\n                   end if;\n                end if;\n \n@@ -1026,6 +1045,13 @@ package body Switch.C is\n \n                   Validity_Checks_On  := False;\n                   Opt.Suppress_Checks := True;\n+\n+                  --  Set overflow mode checking to strict in case it gets\n+                  --  turned on locally (also signals that overflow checking\n+                  --  has been specifically turned off).\n+\n+                  Suppress_Options.Overflow_Mode_General    := Strict;\n+                  Suppress_Options.Overflow_Mode_Assertions := Strict;\n                end if;\n \n             --  -gnatP (periodic poll)"}]}