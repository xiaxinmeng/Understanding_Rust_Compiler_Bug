{"sha": "a239aa95dc5271ebabed7a98e026b69bc16d9b85", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTIzOWFhOTVkYzUyNzFlYmFiZWQ3YTk4ZTAyNmI2OWJjMTZkOWI4NQ==", "commit": {"author": {"name": "DJ Delorie", "email": "dj@redhat.com", "date": "2006-04-13T23:14:25Z"}, "committer": {"name": "DJ Delorie", "email": "dj@gcc.gnu.org", "date": "2006-04-13T23:14:25Z"}, "message": "target-supports.exp (check_effective_target_int32plus): New.\n\n* lib/target-supports.exp (check_effective_target_int32plus): New.\n(check_effective_target_ptr32plus): New.\n(check_effective_target_size32plus): New.\n(check_effective_target_int16): New.\n(check_profiling_available): Add m32c to the list of unsupported targets.\n\n* gcc.c-torture/compile/20000804-1.c: Skip m32c also.\n* gcc.c-torture/compile/20001226-1.c: Skip m32c due to small\nmemory size.\n* gcc.c-torture/compile/20010327-1.c: Skip m32c due to non-SI\npointers.\n* gcc.c-torture/compile/20020604-1.c: Skip m32c due to small\nsize_t.\n* gcc.c-torture/compile/20050303-1.c: Require >=32 bit integers\nand size_t.\n* gcc.c-torture/compile/980506-1.c: Require >=32 bit size_t.\n* gcc.c-torture/execute/20020404-1.x: Check for any 16 bit target,\nnot just xstormy16.  Skip m32c due to weird pointer size.\n* gcc.c-torture/execute/20021024-1.x: Check for any 16 bit target,\nnot just xstormy16.\n* gcc.c-torture/execute/shiftdi.x: Check for any 16 bit target,\nnot just xstormy16.\n* gcc.dg/20020312-2.c: Add m32c support.\n* gcc.dg/20040622-2.c: Require >=32 bit pointers.\n* gcc.dg/20050321-1.c: XFail m32c due to incorrect malloc prototype\nin test.\n* gcc.dg/20050321-2.c: Require >=32 bit integers.\n* gcc.dg/asm-1.c: Skip if int and short are the same size.\n* gcc.dg/fold-mod-1.c: Require >=32 bit integers.\n* gcc.dg/fold-overflow-1.c: Skip m32c due to small const types in asm.\n* gcc.dg/format/bitfld-1.c: Require >=32 bit integers due to printf formats\n* gcc.dg/init-string-2.c: Require >=32 bit integers.\n* gcc.dg/max-1.c: Skip m32c in r8c or m16c mode due to small pointers.\n* gcc.dg/noncompile/920923-1.c: Skip small-int message for int16 hosts.\n* gcc.dg/pch/struct-1.c: Require >= 32 bit integers.\n* gcc.dg/pr14796-2.c: Require >=32 bit integers.\n* gcc.dg/pr17112-1.c: Require >=32 bit integers.\n* gcc.dg/pr18241-1.c: XFail m32c due to incorrect memset prototype\nin test.\n* gcc.dg/pr18241-2.c: XFail m32c due to incorrect memset prototype\nin test.\n* gcc.dg/pr19340.c: Skip m32c due to lack of scheduling.\n* gcc.dg/pr23049.c: Require >=32 bit integers.\n* gcc.dg/torture/pr26565.c: Skip m32c as everything is already packed.\n* gcc.dg/torture/pr26587.c: Require >=32 bit integers.\n* gcc.dg/torture/pr26630.c: Require >=32 bit integers.\n* gcc.dg/tree-ssa/loop-10.c: Require >=32 bit integers.\n* gcc.dg/tree-ssa/loop-2.c: Require >=32 bit size_t.\n* gcc.dg/tree-ssa/loop-4.c: Require >=32 bit size_t.\n* gcc.dg/tree-ssa/ltrans-1.c: Require >=32 bit size_t.\n* gcc.dg/tree-ssa/ltrans-2.c: Require >=32 bit size_t.\n* gcc.dg/tree-ssa/ltrans-3.c: Require >=32 bit size_t.\n* gcc.dg/tree-ssa/ltrans-4.c: Require >=32 bit size_t.\n* gcc.dg/tree-ssa/pr14341.c: Require >=32 bit integers.\n* gcc.dg/tree-ssa/pr23382.c: XFail m32c due to incorrect malloc\nprototype in test.\n* gcc.dg/tree-ssa/pr24627.c: Require >=32 bit integers.\n* gcc.dg/tree-ssa/pr26180.c: Require >=32 bit integers.\n* gcc.dg/tree-ssa/vrp14.c: Require >=32 bit integers.\n* gcc.dg/tree-ssa/vrp21.c: Require >=32 bit integers.\n* gcc.dg/tree-ssa/vrp22.c: Require >=32 bit integers.\n\n* gcc.c-torture/execute/20040629-1.x: New.  Require >16 bit integers.\n* gcc.c-torture/execute/20040703-1.x: Likewise.\n* gcc.c-torture/execute/20040705-1.x: Likewise.\n* gcc.c-torture/execute/20040705-2.x: Likewise.\n* gcc.c-torture/execute/20040709-1.x: Likewise.\n* gcc.c-torture/execute/20040709-2.x: Likewise.\n* gcc.c-torture/execute/20040811-1.x: Likewise.\n* gcc.c-torture/execute/20050316-1.x: Likewise.\n* gcc.c-torture/execute/bitfld-4.x: Likewise.\n* gcc.c-torture/execute/pr19689.x: Likewise.\n* gcc.c-torture/execute/pr7284-1.x: Likewise.\n* gcc.c-torture/execute/usmul.x: Likewise.\n* gcc.c-torture/execute/vrp-5.x: Likewise.\n* gcc.c-torture/execute/vrp-6.x: Likewise.\n* gcc.dg/debug/20041023-1.s: Likewise.\n\nFrom-SVN: r112934", "tree": {"sha": "4a48fb4c9348744e18dd2a7856cee814333b6cb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a48fb4c9348744e18dd2a7856cee814333b6cb6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a239aa95dc5271ebabed7a98e026b69bc16d9b85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a239aa95dc5271ebabed7a98e026b69bc16d9b85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a239aa95dc5271ebabed7a98e026b69bc16d9b85", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a239aa95dc5271ebabed7a98e026b69bc16d9b85/comments", "author": null, "committer": null, "parents": [{"sha": "15b1c12a01b2099bc5f997133dccce5e51673fe3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15b1c12a01b2099bc5f997133dccce5e51673fe3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15b1c12a01b2099bc5f997133dccce5e51673fe3"}], "stats": {"total": 301, "additions": 289, "deletions": 12}, "files": [{"sha": "6a5092d187d29eacdddfd01eb77e5a79ae248587", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a239aa95dc5271ebabed7a98e026b69bc16d9b85", "patch": "@@ -1,3 +1,83 @@\n+2006-04-13  DJ Delorie  <dj@redhat.com>\n+\n+\t* lib/target-supports.exp (check_effective_target_int32plus): New.\n+\t(check_effective_target_ptr32plus): New.\n+\t(check_effective_target_size32plus): New.\n+\t(check_effective_target_int16): New.\n+\t(check_profiling_available): Add m32c to the list of unsupported targets.\n+\n+\t* gcc.c-torture/compile/20000804-1.c: Skip m32c also.\n+\t* gcc.c-torture/compile/20001226-1.c: Skip m32c due to small\n+\tmemory size.\n+\t* gcc.c-torture/compile/20010327-1.c: Skip m32c due to non-SI\n+\tpointers.\n+\t* gcc.c-torture/compile/20020604-1.c: Skip m32c due to small\n+\tsize_t.\n+\t* gcc.c-torture/compile/20050303-1.c: Require >=32 bit integers\n+\tand size_t.\n+\t* gcc.c-torture/compile/980506-1.c: Require >=32 bit size_t.\n+\t* gcc.c-torture/execute/20020404-1.x: Check for any 16 bit target,\n+\tnot just xstormy16.  Skip m32c due to weird pointer size.\n+\t* gcc.c-torture/execute/20021024-1.x: Check for any 16 bit target,\n+\tnot just xstormy16.\n+\t* gcc.c-torture/execute/shiftdi.x: Check for any 16 bit target,\n+\tnot just xstormy16.\n+\t* gcc.dg/20020312-2.c: Add m32c support.\n+\t* gcc.dg/20040622-2.c: Require >=32 bit pointers.\n+\t* gcc.dg/20050321-1.c: XFail m32c due to incorrect malloc prototype\n+\tin test.\n+\t* gcc.dg/20050321-2.c: Require >=32 bit integers.\n+\t* gcc.dg/asm-1.c: Skip if int and short are the same size.\n+\t* gcc.dg/fold-mod-1.c: Require >=32 bit integers.\n+\t* gcc.dg/fold-overflow-1.c: Skip m32c due to small const types in asm.\n+\t* gcc.dg/format/bitfld-1.c: Require >=32 bit integers due to printf formats\n+\t* gcc.dg/init-string-2.c: Require >=32 bit integers.\n+\t* gcc.dg/max-1.c: Skip m32c in r8c or m16c mode due to small pointers.\n+\t* gcc.dg/noncompile/920923-1.c: Skip small-int message for int16 hosts.\n+\t* gcc.dg/pch/struct-1.c: Require >= 32 bit integers.\n+\t* gcc.dg/pr14796-2.c: Require >=32 bit integers.\n+\t* gcc.dg/pr17112-1.c: Require >=32 bit integers.\n+\t* gcc.dg/pr18241-1.c: XFail m32c due to incorrect memset prototype\n+\tin test.\n+\t* gcc.dg/pr18241-2.c: XFail m32c due to incorrect memset prototype\n+\tin test.\n+\t* gcc.dg/pr19340.c: Skip m32c due to lack of scheduling.\n+\t* gcc.dg/pr23049.c: Require >=32 bit integers.\n+\t* gcc.dg/torture/pr26565.c: Skip m32c as everything is already packed.\n+\t* gcc.dg/torture/pr26587.c: Require >=32 bit integers.\n+\t* gcc.dg/torture/pr26630.c: Require >=32 bit integers.\n+\t* gcc.dg/tree-ssa/loop-10.c: Require >=32 bit integers.\n+\t* gcc.dg/tree-ssa/loop-2.c: Require >=32 bit size_t.\n+\t* gcc.dg/tree-ssa/loop-4.c: Require >=32 bit size_t.\n+\t* gcc.dg/tree-ssa/ltrans-1.c: Require >=32 bit size_t.\n+\t* gcc.dg/tree-ssa/ltrans-2.c: Require >=32 bit size_t.\n+\t* gcc.dg/tree-ssa/ltrans-3.c: Require >=32 bit size_t.\n+\t* gcc.dg/tree-ssa/ltrans-4.c: Require >=32 bit size_t.\n+\t* gcc.dg/tree-ssa/pr14341.c: Require >=32 bit integers.\n+\t* gcc.dg/tree-ssa/pr23382.c: XFail m32c due to incorrect malloc\n+\tprototype in test.\n+\t* gcc.dg/tree-ssa/pr24627.c: Require >=32 bit integers.\n+\t* gcc.dg/tree-ssa/pr26180.c: Require >=32 bit integers.\n+\t* gcc.dg/tree-ssa/vrp14.c: Require >=32 bit integers.\n+\t* gcc.dg/tree-ssa/vrp21.c: Require >=32 bit integers.\n+\t* gcc.dg/tree-ssa/vrp22.c: Require >=32 bit integers.\n+\t\n+\t* gcc.c-torture/execute/20040629-1.x: New.  Require >16 bit integers.\n+\t* gcc.c-torture/execute/20040703-1.x: Likewise.\n+\t* gcc.c-torture/execute/20040705-1.x: Likewise.\n+\t* gcc.c-torture/execute/20040705-2.x: Likewise.\n+\t* gcc.c-torture/execute/20040709-1.x: Likewise.\n+\t* gcc.c-torture/execute/20040709-2.x: Likewise.\n+\t* gcc.c-torture/execute/20040811-1.x: Likewise.\n+\t* gcc.c-torture/execute/20050316-1.x: Likewise.\n+\t* gcc.c-torture/execute/bitfld-4.x: Likewise.\n+\t* gcc.c-torture/execute/pr19689.x: Likewise.\n+\t* gcc.c-torture/execute/pr7284-1.x: Likewise.\n+\t* gcc.c-torture/execute/usmul.x: Likewise.\n+\t* gcc.c-torture/execute/vrp-5.x: Likewise.\n+\t* gcc.c-torture/execute/vrp-6.x: Likewise.\n+\t* gcc.dg/debug/20041023-1.s: Likewise.\n+\n 2006-04-13  Roger Sayle  <roger@eyesopen.com>\n \n \t* gcc.target/i386/20050113-1.c: Tweak testcase to reflect that casts"}, {"sha": "0decbc9e0b9e7c6c7874f5939fe6f47d123c0fdf", "filename": "gcc/testsuite/gcc.c-torture/compile/20000804-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20000804-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20000804-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20000804-1.c?ref=a239aa95dc5271ebabed7a98e026b69bc16d9b85", "patch": "@@ -2,6 +2,7 @@\n    statement to force a 'long long' (64-bits) to go in a register.  */\n /* { dg-do assemble { xfail m6811-*-* m6812-*-* h8300-*-* } } */\n /* { dg-skip-if \"\" { { i?86-*-* x86_64-*-* } && ilp32 } { \"-fpic\" \"-fPIC\" } { \"\" } } */\n+/* { dg-skip-if \"No 64-bit registers\" { m32c-*-* } { \"*\" } { \"\" } } */\n \n /* Copyright (C) 2000, 2003 Free Software Foundation */\n __complex__ long long f ()"}, {"sha": "9f1645af09933dcadb08c1e431fd942eadfa2049", "filename": "gcc/testsuite/gcc.c-torture/compile/20001226-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20001226-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20001226-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20001226-1.c?ref=a239aa95dc5271ebabed7a98e026b69bc16d9b85", "patch": "@@ -2,6 +2,7 @@\n    than 64K.  */\n /* { dg-do assemble { xfail m6811-*-* m6812-*-* } } */\n /* { dg-xfail-if \"jump beyond 128K not supported\" \"xtensa-*-*\" \"-O0\" \"\" } */\n+/* { dg-skip-if \"\" { m32c-*-* } { \"*\" } { \"\" } } */\n \n /* This testcase exposed two branch shortening bugs on powerpc.  */\n "}, {"sha": "189990ade3f5f760b081a7c338a1493f55778ed1", "filename": "gcc/testsuite/gcc.c-torture/compile/20010327-1.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20010327-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20010327-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20010327-1.c?ref=a239aa95dc5271ebabed7a98e026b69bc16d9b85", "patch": "@@ -1,9 +1,12 @@\n+/* { dg-skip-if \"non-SI pointers\" { m32c-*-* } { \"*\" } { \"\" } } */\n+\n /* This testcase tests whether GCC can produce static initialized data\n    that references addresses of size 'unsigned long', even if that's not\n    the same as __SIZE_TYPE__.  (See 20011114-1.c for the same test of\n    size __SIZE_TYPE__.)  \n \n    Some rare environments might not have the required relocs to support\n    this; they should have this test disabled in the .x file.  */\n+\n extern void _text;\n static unsigned long x = (unsigned long) &_text - 0x10000000L - 1;"}, {"sha": "61632f725f4829d6b51aa818a81d19e680b81da9", "filename": "gcc/testsuite/gcc.c-torture/compile/20020604-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20020604-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20020604-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20020604-1.c?ref=a239aa95dc5271ebabed7a98e026b69bc16d9b85", "patch": "@@ -1,6 +1,7 @@\n /* The array is too big. */\n /* { dg-xfail-if \"The array too big\" { \"h8300-*-*\" } { \"-mno-h\" \"-mn\" } { \"\" } } */\n /* { dg-do assemble { xfail m6811-*-* m6812-*-* } } */\n+/* { dg-skip-if \"\" { m32c-*-* } { } { } } */\n \n /* PR c/6957\n    This testcase ICEd at -O2 on IA-32, because"}, {"sha": "22154b30af5b0ae5a0dd4ef407f90e07f0f78698", "filename": "gcc/testsuite/gcc.c-torture/compile/20050303-1.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20050303-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20050303-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20050303-1.c?ref=a239aa95dc5271ebabed7a98e026b69bc16d9b85", "patch": "@@ -1,3 +1,6 @@\n+/* { dg-require-effective-target int32plus } */\n+/* { dg-require-effective-target size32plus } */\n+\n void crc()\n {\n     int  toread;"}, {"sha": "6cccb1eae81beda6e945d0865d6c2742ad59e7f1", "filename": "gcc/testsuite/gcc.c-torture/compile/980506-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F980506-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F980506-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F980506-1.c?ref=a239aa95dc5271ebabed7a98e026b69bc16d9b85", "patch": "@@ -1,6 +1,7 @@\n /* The arrays are too large for the xstormy16 - won't fit in 16 bits. */\n /* { dg-xfail-if \"The array too big\" { \"h8300-*-*\" } { \"-mno-h\" \"-mn\" } { \"\" } } */\n /* { dg-do assemble { xfail xstormy16-*-* m6811-*-* m6812-*-* } } */\n+/* { dg-require-effective-target size32plus } */\n \n unsigned char\tTIFFFax2DMode[20][256];\n unsigned char\tTIFFFax2DNextState[20][256];"}, {"sha": "e4fd61a44a0ad03cdb7decd02d31a90d34e3dcaf", "filename": "gcc/testsuite/gcc.c-torture/execute/20020404-1.x", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20020404-1.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20020404-1.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20020404-1.x?ref=a239aa95dc5271ebabed7a98e026b69bc16d9b85", "patch": "@@ -1,7 +1,15 @@\n-# 16-bit \"int\"\n-if { [istarget \"xstormy16-*\"] } {\n+load_lib target-supports.exp\n+\n+if { [check_effective_target_int16] } {\n \treturn 1\n }\n \n+# m32c pointers can be 24 bits in a 32 bit variable, so the test\n+# patterns may get truncated.\n+if { [istarget \"m32c-*-*\"] } {\n+\treturn 1\n+}\n+\n+\n return 0\n "}, {"sha": "121fcfecc2c22fd274926e06105d20e909831f99", "filename": "gcc/testsuite/gcc.c-torture/execute/20021024-1.x", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20021024-1.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20021024-1.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20021024-1.x?ref=a239aa95dc5271ebabed7a98e026b69bc16d9b85", "patch": "@@ -1,7 +1,7 @@\n-# 16-bit \"int\"\n-if { [istarget \"xstormy16-*\"] } {\n+load_lib target-supports.exp\n+\n+if { [check_effective_target_int16] } {\n \treturn 1\n }\n \n-return 0\n-\n+return 0;"}, {"sha": "121fcfecc2c22fd274926e06105d20e909831f99", "filename": "gcc/testsuite/gcc.c-torture/execute/20040629-1.x", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20040629-1.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20040629-1.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20040629-1.x?ref=a239aa95dc5271ebabed7a98e026b69bc16d9b85", "patch": "@@ -0,0 +1,7 @@\n+load_lib target-supports.exp\n+\n+if { [check_effective_target_int16] } {\n+\treturn 1\n+}\n+\n+return 0;"}, {"sha": "121fcfecc2c22fd274926e06105d20e909831f99", "filename": "gcc/testsuite/gcc.c-torture/execute/20040703-1.x", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20040703-1.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20040703-1.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20040703-1.x?ref=a239aa95dc5271ebabed7a98e026b69bc16d9b85", "patch": "@@ -0,0 +1,7 @@\n+load_lib target-supports.exp\n+\n+if { [check_effective_target_int16] } {\n+\treturn 1\n+}\n+\n+return 0;"}, {"sha": "121fcfecc2c22fd274926e06105d20e909831f99", "filename": "gcc/testsuite/gcc.c-torture/execute/20040705-1.x", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20040705-1.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20040705-1.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20040705-1.x?ref=a239aa95dc5271ebabed7a98e026b69bc16d9b85", "patch": "@@ -0,0 +1,7 @@\n+load_lib target-supports.exp\n+\n+if { [check_effective_target_int16] } {\n+\treturn 1\n+}\n+\n+return 0;"}, {"sha": "121fcfecc2c22fd274926e06105d20e909831f99", "filename": "gcc/testsuite/gcc.c-torture/execute/20040705-2.x", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20040705-2.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20040705-2.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20040705-2.x?ref=a239aa95dc5271ebabed7a98e026b69bc16d9b85", "patch": "@@ -0,0 +1,7 @@\n+load_lib target-supports.exp\n+\n+if { [check_effective_target_int16] } {\n+\treturn 1\n+}\n+\n+return 0;"}, {"sha": "121fcfecc2c22fd274926e06105d20e909831f99", "filename": "gcc/testsuite/gcc.c-torture/execute/20040709-1.x", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20040709-1.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20040709-1.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20040709-1.x?ref=a239aa95dc5271ebabed7a98e026b69bc16d9b85", "patch": "@@ -0,0 +1,7 @@\n+load_lib target-supports.exp\n+\n+if { [check_effective_target_int16] } {\n+\treturn 1\n+}\n+\n+return 0;"}, {"sha": "121fcfecc2c22fd274926e06105d20e909831f99", "filename": "gcc/testsuite/gcc.c-torture/execute/20040709-2.x", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20040709-2.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20040709-2.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20040709-2.x?ref=a239aa95dc5271ebabed7a98e026b69bc16d9b85", "patch": "@@ -0,0 +1,7 @@\n+load_lib target-supports.exp\n+\n+if { [check_effective_target_int16] } {\n+\treturn 1\n+}\n+\n+return 0;"}, {"sha": "121fcfecc2c22fd274926e06105d20e909831f99", "filename": "gcc/testsuite/gcc.c-torture/execute/20040811-1.x", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20040811-1.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20040811-1.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20040811-1.x?ref=a239aa95dc5271ebabed7a98e026b69bc16d9b85", "patch": "@@ -0,0 +1,7 @@\n+load_lib target-supports.exp\n+\n+if { [check_effective_target_int16] } {\n+\treturn 1\n+}\n+\n+return 0;"}, {"sha": "121fcfecc2c22fd274926e06105d20e909831f99", "filename": "gcc/testsuite/gcc.c-torture/execute/20050316-1.x", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20050316-1.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20050316-1.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20050316-1.x?ref=a239aa95dc5271ebabed7a98e026b69bc16d9b85", "patch": "@@ -0,0 +1,7 @@\n+load_lib target-supports.exp\n+\n+if { [check_effective_target_int16] } {\n+\treturn 1\n+}\n+\n+return 0;"}, {"sha": "121fcfecc2c22fd274926e06105d20e909831f99", "filename": "gcc/testsuite/gcc.c-torture/execute/bitfld-4.x", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbitfld-4.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbitfld-4.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbitfld-4.x?ref=a239aa95dc5271ebabed7a98e026b69bc16d9b85", "patch": "@@ -0,0 +1,7 @@\n+load_lib target-supports.exp\n+\n+if { [check_effective_target_int16] } {\n+\treturn 1\n+}\n+\n+return 0;"}, {"sha": "121fcfecc2c22fd274926e06105d20e909831f99", "filename": "gcc/testsuite/gcc.c-torture/execute/pr19689.x", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr19689.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr19689.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr19689.x?ref=a239aa95dc5271ebabed7a98e026b69bc16d9b85", "patch": "@@ -0,0 +1,7 @@\n+load_lib target-supports.exp\n+\n+if { [check_effective_target_int16] } {\n+\treturn 1\n+}\n+\n+return 0;"}, {"sha": "121fcfecc2c22fd274926e06105d20e909831f99", "filename": "gcc/testsuite/gcc.c-torture/execute/pr7284-1.x", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr7284-1.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr7284-1.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr7284-1.x?ref=a239aa95dc5271ebabed7a98e026b69bc16d9b85", "patch": "@@ -0,0 +1,7 @@\n+load_lib target-supports.exp\n+\n+if { [check_effective_target_int16] } {\n+\treturn 1\n+}\n+\n+return 0;"}, {"sha": "121fcfecc2c22fd274926e06105d20e909831f99", "filename": "gcc/testsuite/gcc.c-torture/execute/shiftdi.x", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fshiftdi.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fshiftdi.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fshiftdi.x?ref=a239aa95dc5271ebabed7a98e026b69bc16d9b85", "patch": "@@ -1,7 +1,7 @@\n-# 16-bit \"int\"\n-if { [istarget \"xstormy16-*\"] } {\n+load_lib target-supports.exp\n+\n+if { [check_effective_target_int16] } {\n \treturn 1\n }\n \n-return 0\n-\n+return 0;"}, {"sha": "121fcfecc2c22fd274926e06105d20e909831f99", "filename": "gcc/testsuite/gcc.c-torture/execute/usmul.x", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fusmul.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fusmul.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fusmul.x?ref=a239aa95dc5271ebabed7a98e026b69bc16d9b85", "patch": "@@ -0,0 +1,7 @@\n+load_lib target-supports.exp\n+\n+if { [check_effective_target_int16] } {\n+\treturn 1\n+}\n+\n+return 0;"}, {"sha": "121fcfecc2c22fd274926e06105d20e909831f99", "filename": "gcc/testsuite/gcc.c-torture/execute/vrp-5.x", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvrp-5.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvrp-5.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvrp-5.x?ref=a239aa95dc5271ebabed7a98e026b69bc16d9b85", "patch": "@@ -0,0 +1,7 @@\n+load_lib target-supports.exp\n+\n+if { [check_effective_target_int16] } {\n+\treturn 1\n+}\n+\n+return 0;"}, {"sha": "121fcfecc2c22fd274926e06105d20e909831f99", "filename": "gcc/testsuite/gcc.c-torture/execute/vrp-6.x", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvrp-6.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvrp-6.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvrp-6.x?ref=a239aa95dc5271ebabed7a98e026b69bc16d9b85", "patch": "@@ -0,0 +1,7 @@\n+load_lib target-supports.exp\n+\n+if { [check_effective_target_int16] } {\n+\treturn 1\n+}\n+\n+return 0;"}, {"sha": "6acc1e6cbb51d21b31487528d411c4dd6c37178a", "filename": "gcc/testsuite/gcc.dg/20020312-2.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.dg%2F20020312-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.dg%2F20020312-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20020312-2.c?ref=a239aa95dc5271ebabed7a98e026b69bc16d9b85", "patch": "@@ -70,6 +70,8 @@ extern void abort (void);\n # define PIC_REG  \"r12\"\n #elif defined(__x86_64__)\n /* No pic register.  */\n+#elif defined(__m32c__)\n+/* No pic register.  */\n #else\n # error \"Modify the test for your target.\"\n #endif"}, {"sha": "0be320fa4e240b6b4743448b97a6d3e36a9343d2", "filename": "gcc/testsuite/gcc.dg/20040622-2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.dg%2F20040622-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.dg%2F20040622-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20040622-2.c?ref=a239aa95dc5271ebabed7a98e026b69bc16d9b85", "patch": "@@ -1,4 +1,5 @@\n /* { dg-do link } */\n+/* { dg-require-effective-target ptr32plus } */\n /* This validates codegen for [r1+32760] on Darwin. */\n void f(char x[32688], double *y, double *z) __attribute__((noinline));\n void f(char x[32688], double *y, double *z) {}"}, {"sha": "5455db443046153ccff564ecec174666e4d7427d", "filename": "gcc/testsuite/gcc.dg/20050321-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.dg%2F20050321-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.dg%2F20050321-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20050321-1.c?ref=a239aa95dc5271ebabed7a98e026b69bc16d9b85", "patch": "@@ -3,6 +3,8 @@\n \n /* { dg-do compile } */\n /* { dg-options \"-O2 -fmodulo-sched\" } */\n+/* malloc doesn't take a long. */\n+/* { dg-xfail-if \"\" { \"m32c-*-*\" } { \"*\" } { \"\" } } */\n extern void * malloc (long);\n \n struct s {"}, {"sha": "7f7e1c09dffc67a6cadf17bab979ce3844d22642", "filename": "gcc/testsuite/gcc.dg/20050321-2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.dg%2F20050321-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.dg%2F20050321-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20050321-2.c?ref=a239aa95dc5271ebabed7a98e026b69bc16d9b85", "patch": "@@ -6,6 +6,7 @@\n /* { dg-do link { target fpic } } */\n /* { dg-options \"-g1 -fpic\" } */\n /* { dg-bogus \"\\[Uu\\]nresolved symbol .(_GLOBAL_OFFSET_TABLE_|\\[_.A-Za-z\\]\\[_.0-9A-Za-z\\]*@(PLT|GOT|GOTOFF))\" \"PIC unsupported\" { xfail *-*-netware* } 0 } */\n+/* { dg-require-effective-target int32plus } */\n \n #define A(n) \\\n   case n##1: return n##1 * 131 + 63;\t\\"}, {"sha": "fecac780f6958955553f42046f63b5f9f64112e3", "filename": "gcc/testsuite/gcc.dg/asm-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.dg%2Fasm-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.dg%2Fasm-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fasm-1.c?ref=a239aa95dc5271ebabed7a98e026b69bc16d9b85", "patch": "@@ -1,4 +1,5 @@\n /* { dg-do compile } */\n+/* { dg-require-effective-target int32plus } */\n \n struct x {\n   int selector;"}, {"sha": "3f7696f17600a87895b3355fc11d6a8bc357c75d", "filename": "gcc/testsuite/gcc.dg/fold-mod-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-mod-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-mod-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-mod-1.c?ref=a239aa95dc5271ebabed7a98e026b69bc16d9b85", "patch": "@@ -1,4 +1,5 @@\n /* { dg-do compile } */\n+/* { dg-require-effective-target int32plus } */\n /* { dg-options \"-fdump-tree-gimple\" } */\n \n #define ABS(x) (x > 0 ? x : -x)"}, {"sha": "bed8aac9f9bf18bc6d82b5f8e3ef10db09f3686d", "filename": "gcc/testsuite/gcc.dg/fold-overflow-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-overflow-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-overflow-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-overflow-1.c?ref=a239aa95dc5271ebabed7a98e026b69bc16d9b85", "patch": "@@ -1,4 +1,5 @@\n /* { dg-compile } */\n+/* { dg-skip-if \"consts are shorts, not longs\" { \"m32c-*-*\" } { \"*\" } { \"\" } } */\n /* { dg-options \"-O -ftrapping-math\" } */\n \n /* There should be exactly 2 +Inf in the assembly file.  */"}, {"sha": "e828ad97cd5f31bbc5c9cc3b78605984db4b24b1", "filename": "gcc/testsuite/gcc.dg/format/bitfld-1.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fbitfld-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fbitfld-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fbitfld-1.c?ref=a239aa95dc5271ebabed7a98e026b69bc16d9b85", "patch": "@@ -2,6 +2,7 @@\n /* Origin: Joseph Myers <joseph@codesourcery.com> */\n /* { dg-do compile } */\n /* { dg-options \"-std=gnu99 -Wformat\" } */\n+/* { dg-require-effective-target int32plus } */\n \n #include \"format.h\"\n \n@@ -28,8 +29,12 @@ foo (void)\n   printf (\"%d%u\", x.s15, x.s15);\n   printf (\"%d%u\", x.u16, x.u16);\n   printf (\"%d%u\", x.s16, x.s16);\n+#if __INT_MAX__ > 32767\n+  /* If integers are 16 bits, there doesn't seem to be a way of\n+     printing these without getting an error.  */\n   printf (\"%d%u\", x.u31, x.u31);\n   printf (\"%d%u\", x.s31, x.s31);\n+#endif\n #if __LONG_MAX__ > 2147483647 && __INT_MAX__ >= 2147483647\n   /* If long is wider than 32 bits, the 32-bit bit-fields are int or\n      unsigned int or promote to those types.  Otherwise, long is 32"}, {"sha": "9efd44b3d2f9423775e82256e8ac1816a917ef45", "filename": "gcc/testsuite/gcc.dg/init-string-2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.dg%2Finit-string-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.dg%2Finit-string-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finit-string-2.c?ref=a239aa95dc5271ebabed7a98e026b69bc16d9b85", "patch": "@@ -5,6 +5,7 @@\n    relevant circumstances can be obtained portably; may still fail if\n    char, short and int do not all have distinct precisions.  */\n /* { dg-do compile } */\n+/* { dg-require-effective-target int32plus } */\n /* { dg-options \"-std=c99 -pedantic-errors -fshort-enums -fshort-wchar\" } */\n \n #include <limits.h>"}, {"sha": "02aaa46c3b52fc5b3f6dd51601bc40a928e84d67", "filename": "gcc/testsuite/gcc.dg/max-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.dg%2Fmax-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.dg%2Fmax-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fmax-1.c?ref=a239aa95dc5271ebabed7a98e026b69bc16d9b85", "patch": "@@ -2,6 +2,8 @@\n /* Test case reduced by Andrew Pinski <pinskia@physics.uc.edu> */\n /* { dg-do run } */\n /* { dg-options \"-O1 -fno-tree-lrs\" } */\n+/* m32c has varying sized pointers */\n+/* { dg-skip-if \"\" { \"m32c-*-*\" } { \"*\" } { \"-mcpu=m32c\" \"-mcpu=m32cm\" } } */\n \n extern void abort (void);\n "}, {"sha": "8011f28cbb4f01a843f6a1316de44b54da8be091", "filename": "gcc/testsuite/gcc.dg/noncompile/920923-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2F920923-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2F920923-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2F920923-1.c?ref=a239aa95dc5271ebabed7a98e026b69bc16d9b85", "patch": "@@ -115,7 +115,7 @@ init_mem()\n \t\t\t  \"mem_hash != (prec_t)0\", 370, \"b.c\"),\n \t\t0)));\n      flush_hash(mem_hash, 32);\n-     build_ptables(mem_base, 1024*(1<<13)); /* { dg-bogus \"integer overflow\" \"int smaller than 32 bits\" } */\n+     build_ptables(mem_base, 1024*(1<<13)); /* { dg-bogus \"integer overflow\" \"int smaller than 32 bits\" { xfail int16 } } */\n }\n \n struct tm {"}, {"sha": "698e88b285aab09cdbcc353ee83134deffa3292d", "filename": "gcc/testsuite/gcc.dg/pch/struct-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fstruct-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fstruct-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fstruct-1.c?ref=a239aa95dc5271ebabed7a98e026b69bc16d9b85", "patch": "@@ -1,3 +1,4 @@\n+/* { dg-require-effective-target int32plus } */\n #include \"struct-1.h\"\n \n struct ChainSearchRecord {"}, {"sha": "2de5411a4907a3af06ebf70082d3b69da9633189", "filename": "gcc/testsuite/gcc.dg/pr14796-2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.dg%2Fpr14796-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.dg%2Fpr14796-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr14796-2.c?ref=a239aa95dc5271ebabed7a98e026b69bc16d9b85", "patch": "@@ -1,4 +1,5 @@\n /* { dg-do compile } */\n+/* { dg-require-effective-target int32plus } */\n /* { dg-options \"-fdump-tree-gimple\" } */\n \n int f (int a) {"}, {"sha": "04d3a2e0e217f2d92a8024c7a334f4b5be7cef12", "filename": "gcc/testsuite/gcc.dg/pr17112-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.dg%2Fpr17112-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.dg%2Fpr17112-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr17112-1.c?ref=a239aa95dc5271ebabed7a98e026b69bc16d9b85", "patch": "@@ -1,5 +1,6 @@\n /* PR middle-end/17112 */\n /* { dg-do run } */\n+/* { dg-require-effective-target int32plus } */\n /* { dg-options \"-O2\" } */\n \n extern void abort(void);"}, {"sha": "f5134d317b2daa3af2600e15b490b53376043dde", "filename": "gcc/testsuite/gcc.dg/pr18241-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.dg%2Fpr18241-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.dg%2Fpr18241-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr18241-1.c?ref=a239aa95dc5271ebabed7a98e026b69bc16d9b85", "patch": "@@ -1,4 +1,6 @@\n /* { dg-do run } */\n+/* memset doesn't take unsigned long */\n+/* { dg-xfail-if \"\" { \"m32c-*-*\" } { \"*\" } { \"\" } } */\n /* { dg-options \"-std=gnu99 -Wall -Wextra -O1\" } */ \n \n extern void *memset (void*, int, unsigned long);"}, {"sha": "89221247ad07e1d59f0fb042f1c6b5aa692b3088", "filename": "gcc/testsuite/gcc.dg/pr18241-2.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.dg%2Fpr18241-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.dg%2Fpr18241-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr18241-2.c?ref=a239aa95dc5271ebabed7a98e026b69bc16d9b85", "patch": "@@ -1,4 +1,6 @@\n /* { dg-do run } */\n+/* memset doesn't take unsigned long */\n+/* { dg-xfail-if \"\" { \"m32c-*-*\" } { \"*\" } { \"\" } } */\n /* { dg-options \"-std=gnu99 -Wall -Wextra -O1\" } */ \n \n extern void *memset (void*, int, unsigned long);"}, {"sha": "27cd8c8cc27f898602efbe34324890ad6ea4ae0a", "filename": "gcc/testsuite/gcc.dg/pr19340.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.dg%2Fpr19340.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.dg%2Fpr19340.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr19340.c?ref=a239aa95dc5271ebabed7a98e026b69bc16d9b85", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-O1 -fschedule-insns2 -fsched2-use-traces\" } */\n-/* { dg-skip-if \"No scheduling\" { mmix-*-* cris-*-* m68k-*-* } { \"*\" } { \"\" } } */\n+/* { dg-skip-if \"No scheduling\" { mmix-*-* cris-*-* m68k-*-* m32c-*-* } { \"*\" } { \"\" } } */\n \n extern double f (double x);\n "}, {"sha": "e58cef8fe167ae062b692e08126b18e95252ac38", "filename": "gcc/testsuite/gcc.dg/pr23049.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.dg%2Fpr23049.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.dg%2Fpr23049.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr23049.c?ref=a239aa95dc5271ebabed7a98e026b69bc16d9b85", "patch": "@@ -7,6 +7,7 @@\n    the above expression.  */\n \n /* { dg-do compile } */\n+/* { dg-require-effective-target int32plus } */\n /* { dg-options \"-O3 -ftree-vectorize\" } */\n \n static unsigned short int crc_table[256];"}, {"sha": "d7620329fe422e8f7ff0c7e104fe6e415e453567", "filename": "gcc/testsuite/gcc.dg/torture/pr26565.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr26565.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr26565.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr26565.c?ref=a239aa95dc5271ebabed7a98e026b69bc16d9b85", "patch": "@@ -1,4 +1,6 @@\n /* { dg-do run } */\n+/* m32c is already packed.  */\n+/* { dg-skip-if \"\" { \"m32c-*-*\" } { \"*\" } { \"\" } } */\n \n void *memcpy(void *dest, const void *src, __SIZE_TYPE__ n);\n "}, {"sha": "ad5d60f3a8d883986bc0936cf3ad781bdabb80b6", "filename": "gcc/testsuite/gcc.dg/torture/pr26587.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr26587.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr26587.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr26587.c?ref=a239aa95dc5271ebabed7a98e026b69bc16d9b85", "patch": "@@ -1,4 +1,5 @@\n /* { dg-do run } */\n+/* { dg-require-effective-target int32plus } */\n \n extern void abort(void);\n typedef unsigned int BF_word;"}, {"sha": "96bab36a0f70aa411743f0a1279f0f31e2696607", "filename": "gcc/testsuite/gcc.dg/torture/pr26630.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr26630.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr26630.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr26630.c?ref=a239aa95dc5271ebabed7a98e026b69bc16d9b85", "patch": "@@ -1,4 +1,5 @@\n /* { dg-do run } */\n+/* { dg-require-effective-target int32plus } */\n \n extern void abort(void);\n int main()"}, {"sha": "03c2ddd515d183cb2156f7e725091412182e4d6a", "filename": "gcc/testsuite/gcc.dg/tree-ssa/loop-10.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-10.c?ref=a239aa95dc5271ebabed7a98e026b69bc16d9b85", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-O1 -fdump-tree-optimized\" } */\n+/* { dg-require-effective-target int32plus } */\n \n int bar (void);\n "}, {"sha": "8f319594f8405598f4806ceb045d0ccdad637469", "filename": "gcc/testsuite/gcc.dg/tree-ssa/loop-2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-2.c?ref=a239aa95dc5271ebabed7a98e026b69bc16d9b85", "patch": "@@ -2,6 +2,7 @@\n \n /* { dg-do compile } */\n /* { dg-options \"-O1 -fdump-tree-optimized\" } */\n+/* { dg-require-effective-target size32plus } */\n \n /* Size of this structure should be sufficiently weird so that no memory\n    addressing mode applies.  */"}, {"sha": "a6c8c8fd34a1ac4beaf1d931945311f7ace72d5d", "filename": "gcc/testsuite/gcc.dg/tree-ssa/loop-4.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-4.c?ref=a239aa95dc5271ebabed7a98e026b69bc16d9b85", "patch": "@@ -2,6 +2,7 @@\n \n /* { dg-do compile } */\n /* { dg-options \"-O1 -fdump-tree-optimized\" } */\n+/* { dg-require-effective-target size32plus } */\n \n /* Size of this structure should be sufficiently weird so that no memory\n    addressing mode applies.  */"}, {"sha": "a3a9975c51d8614edfedcd73bc4c90b2fb227409", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ltrans-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fltrans-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fltrans-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fltrans-1.c?ref=a239aa95dc5271ebabed7a98e026b69bc16d9b85", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */ \n /* { dg-options \"-O2 -ftree-loop-linear -fdump-tree-ltrans-all\" } */\n+/* { dg-require-effective-target size32plus } */\n \n double u[1782225];\n int foo(int N, int *res)"}, {"sha": "9548bf217067acb77f92097f5278bb1b3dae1c02", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ltrans-2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fltrans-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fltrans-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fltrans-2.c?ref=a239aa95dc5271ebabed7a98e026b69bc16d9b85", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */ \n /* { dg-options \"-O2 -ftree-loop-linear -fdump-tree-ltrans-all\" } */\n+/* { dg-require-effective-target size32plus } */\n \n double u[1782225];\n int foo(int N, int *res)"}, {"sha": "86424ab13691208d33926967d0573e41e84bfa57", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ltrans-3.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fltrans-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fltrans-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fltrans-3.c?ref=a239aa95dc5271ebabed7a98e026b69bc16d9b85", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */ \n /* { dg-options \"-O2 -ftree-loop-linear -fdump-tree-ltrans-all\" } */\n+/* { dg-require-effective-target size32plus } */\n \n double u[1782225];\n int foo(int N, int *res)"}, {"sha": "e2d6abced602d01d77e3895be4d00ca4fc1a372c", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ltrans-4.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fltrans-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fltrans-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fltrans-4.c?ref=a239aa95dc5271ebabed7a98e026b69bc16d9b85", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */ \n /* { dg-options \"-O2 -ftree-loop-linear -fdump-tree-ltrans-all\" } */\n+/* { dg-require-effective-target size32plus } */\n \n double u[1782225];\n int foo(int N, int *res)"}, {"sha": "0287a25cc3826ee3489e83b1c2b6f56ffccb8d85", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr14341.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr14341.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr14341.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr14341.c?ref=a239aa95dc5271ebabed7a98e026b69bc16d9b85", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -fdump-tree-vrp1\" } */\n+/* { dg-require-effective-target int32plus } */\n \n void fn_call (int);\n int h(int, int);"}, {"sha": "e515417076d09c8fa7b4509e3aca849a3886659f", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr23382.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr23382.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr23382.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr23382.c?ref=a239aa95dc5271ebabed7a98e026b69bc16d9b85", "patch": "@@ -1,5 +1,7 @@\n /* { dg-do compile } */ \n /* { dg-options \"-O2 -fdump-tree-alias-vops\" } */\n+/* malloc doesn't take a long */\n+/* { dg-xfail-if \"\" { \"m32c-*-*\" } { \"*\" } { \"\" } } */\n struct a\n {\n   int length;"}, {"sha": "c065eef84f44040e1ff299086fb580b2e4ab22f1", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr24627.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr24627.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr24627.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr24627.c?ref=a239aa95dc5271ebabed7a98e026b69bc16d9b85", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do run } */\n /* { dg-options \"-O\" } */\n+/* { dg-require-effective-target int32plus } */\n \n extern void abort (void);\n typedef unsigned int u_int32;"}, {"sha": "13c302dea3a3b9ac6d5c6b69d56e31e8269d7251", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr26180.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr26180.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr26180.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr26180.c?ref=a239aa95dc5271ebabed7a98e026b69bc16d9b85", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do run } */\n /* { dg-options \"-O2\" } */\n+/* { dg-require-effective-target int32plus } */\n \n void abort(void);\n int bar(int x, int y)"}, {"sha": "a65d8a16d705111adf3332aef6727f0d8ec38f7a", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp14.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp14.c?ref=a239aa95dc5271ebabed7a98e026b69bc16d9b85", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do run } */\n /* { dg-options \"-O2\" } */\n+/* { dg-require-effective-target int32plus } */\n \n struct tree_decl\n {"}, {"sha": "9a4e4e783c18fd9eb20dc816950017a34c9839e7", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp21.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp21.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp21.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp21.c?ref=a239aa95dc5271ebabed7a98e026b69bc16d9b85", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-O1 -ftree-vrp -fdump-tree-vrp1\" } */\n+/* { dg-require-effective-target int32plus } */\n \n extern void link_error ();\n "}, {"sha": "cbd4dc529dd955e404534279e871244f66fca3e0", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp22.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp22.c?ref=a239aa95dc5271ebabed7a98e026b69bc16d9b85", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-O1 -ftree-vrp -fdump-tree-vrp1\" } */\n+/* { dg-require-effective-target int32plus } */\n \n extern void link_error ();\n "}, {"sha": "abe4fb97687c4a06720f950f9e1f73ecd57fce23", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a239aa95dc5271ebabed7a98e026b69bc16d9b85/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=a239aa95dc5271ebabed7a98e026b69bc16d9b85", "patch": "@@ -300,6 +300,7 @@ proc check_profiling_available { test_what } {\n \t     || [istarget xscale*-*-elf]\n \t     || [istarget cris-*-*]\n \t     || [istarget h8300-*-*]\n+\t     || [istarget m32c-*-elf]\n \t     || [istarget m68k-*-elf]\n \t     || [istarget mips*-*-elf]\n \t     || [istarget xtensa-*-elf]\n@@ -926,6 +927,42 @@ proc check_effective_target_ilp32 { } {\n     }]\n }\n \n+# Return 1 if we're generating 32-bit or larger integers using default\n+# options, 0 otherwise.\n+\n+proc check_effective_target_int32plus { } {\n+    return [check_no_compiler_messages int32plus object {\n+\tint dummy[sizeof (int) >= 4 ? 1 : -1];\n+    }]\n+}\n+\n+# Return 1 if we're generating 32-bit or larger pointers using default\n+# options, 0 otherwise.\n+\n+proc check_effective_target_ptr32plus { } {\n+    return [check_no_compiler_messages ptr32plus object {\n+\tint dummy[sizeof (void *) >= 4 ? 1 : -1];\n+    }]\n+}\n+\n+# Return 1 if we support 32-bit or larger array and structure sizes\n+# using default options, 0 otherwise.\n+\n+proc check_effective_target_size32plus { } {\n+    return [check_no_compiler_messages size32plus object {\n+\tchar dummy[65537];\n+    }]\n+}\n+\n+# Returns 1 if we're generating 16-bit or smaller integers with the\n+# default options, 0 otherwise.\n+\n+proc check_effective_target_int16 { } {\n+    return [check_no_compiler_messages int16 object {\n+\tint dummy[sizeof (int) < 4 ? 1 : -1];\n+    }]\n+}\n+\n # Return 1 if we're generating 64-bit code using default options, 0\n # otherwise.\n "}]}