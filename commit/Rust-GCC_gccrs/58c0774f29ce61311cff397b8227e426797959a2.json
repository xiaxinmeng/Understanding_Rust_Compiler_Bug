{"sha": "58c0774f29ce61311cff397b8227e426797959a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NThjMDc3NGYyOWNlNjEzMTFjZmYzOTdiODIyN2U0MjY3OTc5NTlhMg==", "commit": {"author": {"name": "Erik Edelmann", "email": "eedelman@gcc.gnu.org", "date": "2005-12-08T16:56:10Z"}, "committer": {"name": "Erik Edelmann", "email": "eedelman@gcc.gnu.org", "date": "2005-12-08T16:56:10Z"}, "message": "re PR fortran/25292 (ASSOCIATED( func() ) rejected ?)\n\nfortran/\n2005-12-08  Erik Edelmann  <eedelman@gcc.gnu.org>\n\n        PR fortran/25292\n        * check.c (gfc_check_associated): Allow function results\n        as actual arguments to ASSOCIATED.  Moved a misplaced\n        comment.\n\n\ntestsuite/\n2005-12-08  Erik Edelmann  <eedelman@gcc.gnu.org>\n\n        PR fortran/25292\n        * gfortran.dg/associated_1.f90: New.\n\nFrom-SVN: r108238", "tree": {"sha": "48824d8ef6b556f54d14c933adf5e6cbd4e6c1d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/48824d8ef6b556f54d14c933adf5e6cbd4e6c1d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58c0774f29ce61311cff397b8227e426797959a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58c0774f29ce61311cff397b8227e426797959a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58c0774f29ce61311cff397b8227e426797959a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58c0774f29ce61311cff397b8227e426797959a2/comments", "author": null, "committer": null, "parents": [{"sha": "dd2c9f746201cd614e594d05ce52f832626c66ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd2c9f746201cd614e594d05ce52f832626c66ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd2c9f746201cd614e594d05ce52f832626c66ab"}], "stats": {"total": 54, "additions": 49, "deletions": 5}, "files": [{"sha": "d950f7386a6efe7e6c395f8cb596fdaadaa08bed", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58c0774f29ce61311cff397b8227e426797959a2/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58c0774f29ce61311cff397b8227e426797959a2/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=58c0774f29ce61311cff397b8227e426797959a2", "patch": "@@ -1,3 +1,10 @@\n+2005-12-08  Erik Edelmann  <eedelman@gcc.gnu.org>\n+\n+\tPR fortran/25292\n+\t* check.c (gfc_check_associated): Allow function results\n+\tas actual arguments to ASSOCIATED.  Moved a misplaced\n+\tcomment.\n+\n 2005-12-07  Rafael \ufffdvila de Esp\ufffdndola  <rafael.espindola@gmail.com>\n \n \t* Make-lang.in (fortran.all.build, fortran.install-normal): Remove."}, {"sha": "feb07f081f9e150456c3efd34c4a0335c99071e3", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58c0774f29ce61311cff397b8227e426797959a2/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58c0774f29ce61311cff397b8227e426797959a2/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=58c0774f29ce61311cff397b8227e426797959a2", "patch": "@@ -477,10 +477,13 @@ gfc_check_associated (gfc_expr * pointer, gfc_expr * target)\n   int i;\n   try t;\n \n-  if (variable_check (pointer, 0) == FAILURE)\n-    return FAILURE;\n+  if (pointer->expr_type == EXPR_VARIABLE)\n+    attr = gfc_variable_attr (pointer, NULL);\n+  else if (pointer->expr_type == EXPR_FUNCTION)\n+    attr = pointer->symtree->n.sym->attr;\n+  else\n+    gcc_assert (0); /* Pointer must be a variable or a function.  */\n \n-  attr = gfc_variable_attr (pointer, NULL);\n   if (!attr.pointer)\n     {\n       gfc_error (\"'%s' argument of '%s' intrinsic at %L must be a POINTER\",\n@@ -489,10 +492,10 @@ gfc_check_associated (gfc_expr * pointer, gfc_expr * target)\n       return FAILURE;\n     }\n \n+  /* Target argument is optional.  */\n   if (target == NULL)\n     return SUCCESS;\n \n-  /* Target argument is optional.  */\n   if (target->expr_type == EXPR_NULL)\n     {\n       gfc_error (\"NULL pointer at %L is not permitted as actual argument \"\n@@ -501,7 +504,13 @@ gfc_check_associated (gfc_expr * pointer, gfc_expr * target)\n       return FAILURE;\n     }\n \n-  attr = gfc_variable_attr (target, NULL);\n+  if (target->expr_type == EXPR_VARIABLE)\n+    attr = gfc_variable_attr (target, NULL);\n+  else if (target->expr_type == EXPR_FUNCTION)\n+    attr = target->symtree->n.sym->attr;\n+  else\n+    gcc_assert (0); /* Target must be a variable or a function.  */\n+\n   if (!attr.pointer && !attr.target)\n     {\n       gfc_error (\"'%s' argument of '%s' intrinsic at %L must be a POINTER \""}, {"sha": "4bc6e51edaa7abd8f957f7a279dc8ef433b3d27c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58c0774f29ce61311cff397b8227e426797959a2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58c0774f29ce61311cff397b8227e426797959a2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=58c0774f29ce61311cff397b8227e426797959a2", "patch": "@@ -1,3 +1,8 @@\n+2005-12-08  Erik Edelmann  <eedelman@gcc.gnu.org>\n+\n+\tPR fortran/25292\n+\t* gfortran.dg/associated_1.f90: New.\n+\n 2005-12-08  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \t* gfortran.dg/vect/vect-5.f90: Expect alignment forcing only on"}, {"sha": "64cf2b30ccb06519c2cd91d6e19efbfeb4929415", "filename": "gcc/testsuite/gfortran.dg/associated_1.f90", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58c0774f29ce61311cff397b8227e426797959a2/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociated_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58c0774f29ce61311cff397b8227e426797959a2/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociated_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociated_1.f90?ref=58c0774f29ce61311cff397b8227e426797959a2", "patch": "@@ -0,0 +1,23 @@\n+! { dg-do run }\n+! PR 25292: Check that the intrinsic associated works with functions returning\n+! pointers as arguments\n+program test\n+   real, pointer :: a, b\n+\n+   allocate(a)\n+   if (.not.associated(x(a))) call abort ()\n+   if (.not.associated(a, x(a))) call abort ()\n+\n+   nullify(b)\n+   if (associated(x(b))) call abort ()\n+   allocate(b)\n+   if (associated(x(b), x(a))) call abort ()\n+\n+contains\n+\n+  function x(a) RESULT(b)\n+    real, pointer :: a,b\n+    b => a\n+  end function x\n+\n+end program test"}]}