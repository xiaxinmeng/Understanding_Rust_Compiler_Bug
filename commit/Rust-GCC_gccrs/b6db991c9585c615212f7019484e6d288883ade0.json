{"sha": "b6db991c9585c615212f7019484e6d288883ade0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjZkYjk5MWM5NTg1YzYxNTIxMmY3MDE5NDg0ZTZkMjg4ODgzYWRlMA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-08-21T11:48:42Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-08-21T11:48:42Z"}, "message": "tree-ssa-loop-im.c (tree_ssa_lim_finalize): Properly free the affine expansion cache.\n\n2012-08-21  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-ssa-loop-im.c (tree_ssa_lim_finalize): Properly free\n\tthe affine expansion cache.\n\t* tree-ssa-dom.c (free_expr_hash_elt_contents): New function,\n\tsplit out from ...\n\t(free_expr_hash_elt): ... this one.\n\t(record_cond): Properly free a not needed hashtable element.\n\t(lookup_avail_expr): Likewise.\n\t* tree-into-ssa.c (init_ssa_renamer): Specify a free function\n\tfor the var_infos hashtable.\n\t(update_ssa): Likewise.\n\nFrom-SVN: r190560", "tree": {"sha": "1a86ea46dfeb996cb6319c790537e709944defa5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a86ea46dfeb996cb6319c790537e709944defa5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6db991c9585c615212f7019484e6d288883ade0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6db991c9585c615212f7019484e6d288883ade0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6db991c9585c615212f7019484e6d288883ade0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6db991c9585c615212f7019484e6d288883ade0/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "825c743c8705689b8c9541da47e201fd02f66cf6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/825c743c8705689b8c9541da47e201fd02f66cf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/825c743c8705689b8c9541da47e201fd02f66cf6"}], "stats": {"total": 48, "additions": 35, "deletions": 13}, "files": [{"sha": "5aa1ec81734f68014c8a0af728a4bd0aca500bc9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6db991c9585c615212f7019484e6d288883ade0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6db991c9585c615212f7019484e6d288883ade0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b6db991c9585c615212f7019484e6d288883ade0", "patch": "@@ -1,3 +1,16 @@\n+2012-08-21  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-ssa-loop-im.c (tree_ssa_lim_finalize): Properly free\n+\tthe affine expansion cache.\n+\t* tree-ssa-dom.c (free_expr_hash_elt_contents): New function,\n+\tsplit out from ...\n+\t(free_expr_hash_elt): ... this one.\n+\t(record_cond): Properly free a not needed hashtable element.\n+\t(lookup_avail_expr): Likewise.\n+\t* tree-into-ssa.c (init_ssa_renamer): Specify a free function\n+\tfor the var_infos hashtable.\n+\t(update_ssa): Likewise.\n+\n 2012-08-21  Richard Guenther  <rguenther@suse.de>\n \n \t* alloc-pool.c (pool_alloc): Fix valgrind annotation."}, {"sha": "d1fb192419229da0ce6672dd046ae08c90e8c52f", "filename": "gcc/tree-into-ssa.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6db991c9585c615212f7019484e6d288883ade0/gcc%2Ftree-into-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6db991c9585c615212f7019484e6d288883ade0/gcc%2Ftree-into-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-into-ssa.c?ref=b6db991c9585c615212f7019484e6d288883ade0", "patch": "@@ -2291,7 +2291,7 @@ init_ssa_renamer (void)\n   /* Allocate memory for the DEF_BLOCKS hash table.  */\n   gcc_assert (var_infos == NULL);\n   var_infos = htab_create (VEC_length (tree, cfun->local_decls),\n-\t\t\t   var_info_hash, var_info_eq, NULL);\n+\t\t\t   var_info_hash, var_info_eq, free);\n \n   bitmap_obstack_initialize (&update_ssa_obstack);\n }\n@@ -3170,7 +3170,7 @@ update_ssa (unsigned update_flags)\n     {\n       /* If we rename bare symbols initialize the mapping to\n          auxiliar info we need to keep track of.  */\n-      var_infos = htab_create (47, var_info_hash, var_info_eq, NULL);\n+      var_infos = htab_create (47, var_info_hash, var_info_eq, free);\n \n       /* If we have to rename some symbols from scratch, we need to\n \t start the process at the root of the CFG.  FIXME, it should"}, {"sha": "4a89df25fbbe0b97f91ef1955cfbecc3087e6ab1", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6db991c9585c615212f7019484e6d288883ade0/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6db991c9585c615212f7019484e6d288883ade0/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=b6db991c9585c615212f7019484e6d288883ade0", "patch": "@@ -649,19 +649,24 @@ print_expr_hash_elt (FILE * stream, const struct expr_hash_elt *element)\n     }\n }\n \n-/* Delete an expr_hash_elt and reclaim its storage.  */\n+/* Delete variable sized pieces of the expr_hash_elt ELEMENT.  */\n \n static void\n-free_expr_hash_elt (void *elt)\n+free_expr_hash_elt_contents (struct expr_hash_elt *element)\n {\n-  struct expr_hash_elt *element = ((struct expr_hash_elt *)elt);\n-\n   if (element->expr.kind == EXPR_CALL)\n     free (element->expr.ops.call.args);\n-\n-  if (element->expr.kind == EXPR_PHI)\n+  else if (element->expr.kind == EXPR_PHI)\n     free (element->expr.ops.phi.args);\n+}\n+\n+/* Delete an expr_hash_elt and reclaim its storage.  */\n \n+static void\n+free_expr_hash_elt (void *elt)\n+{\n+  struct expr_hash_elt *element = ((struct expr_hash_elt *)elt);\n+  free_expr_hash_elt_contents (element);\n   free (element);\n }\n \n@@ -1203,7 +1208,7 @@ record_cond (cond_equivalence *p)\n       VEC_safe_push (expr_hash_elt_t, heap, avail_exprs_stack, element);\n     }\n   else\n-    free (element);\n+    free_expr_hash_elt (element);\n }\n \n /* Build a cond_equivalence record indicating that the comparison\n@@ -2404,9 +2409,11 @@ lookup_avail_expr (gimple stmt, bool insert)\n   slot = htab_find_slot_with_hash (avail_exprs, &element, element.hash,\n \t\t\t\t   (insert ? INSERT : NO_INSERT));\n   if (slot == NULL)\n-    return NULL_TREE;\n-\n-  if (*slot == NULL)\n+    {\n+      free_expr_hash_elt_contents (&element);\n+      return NULL_TREE;\n+    }\n+  else if (*slot == NULL)\n     {\n       struct expr_hash_elt *element2 = XNEW (struct expr_hash_elt);\n       *element2 = element;\n@@ -2422,6 +2429,8 @@ lookup_avail_expr (gimple stmt, bool insert)\n       VEC_safe_push (expr_hash_elt_t, heap, avail_exprs_stack, element2);\n       return NULL_TREE;\n     }\n+  else\n+    free_expr_hash_elt_contents (&element);\n \n   /* Extract the LHS of the assignment so that it can be used as the current\n      definition of another variable.  */"}, {"sha": "0f61631cc793d10a23c551fff117f6233c4fbb8a", "filename": "gcc/tree-ssa-loop-im.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6db991c9585c615212f7019484e6d288883ade0/gcc%2Ftree-ssa-loop-im.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6db991c9585c615212f7019484e6d288883ade0/gcc%2Ftree-ssa-loop-im.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-im.c?ref=b6db991c9585c615212f7019484e6d288883ade0", "patch": "@@ -2634,7 +2634,7 @@ tree_ssa_lim_finalize (void)\n   VEC_free (bitmap, heap, memory_accesses.all_refs_stored_in_loop);\n \n   if (memory_accesses.ttae_cache)\n-    pointer_map_destroy (memory_accesses.ttae_cache);\n+    free_affine_expand_cache (&memory_accesses.ttae_cache);\n }\n \n /* Moves invariants from loops.  Only \"expensive\" invariants are moved out --"}]}