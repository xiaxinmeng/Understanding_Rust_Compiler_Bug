{"sha": "761e6bb9f7d2bd782d93e46baebade2eb1f7d16e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzYxZTZiYjlmN2QyYmQ3ODJkOTNlNDZiYWViYWRlMmViMWY3ZDE2ZQ==", "commit": {"author": {"name": "Shaokun Zhang", "email": "zhangshaokun@hisilicon.com", "date": "2019-09-25T12:38:59Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2019-09-25T12:38:59Z"}, "message": "[AARCH64] Add support for new control bits CTR_EL0.DIC and CTR_EL0.IDC\n\nThe DCache clean & ICache invalidation requirements for instructions\nto be data coherence are discoverable through new fields in CTR_EL0.\nLet's support the two bits if they are enabled, the CPU core will\nnot execute the unnecessary DCache clean or Icache Invalidation\ninstructions.\n\n2019-09-25  Shaokun Zhang  <zhangshaokun@hisilicon.com>\n\n\t* config/aarch64/sync-cache.c (__aarch64_sync_cache_range): Add support for\n\tCTR_EL0.IDC and CTR_EL0.DIC.\n\nFrom-SVN: r276122", "tree": {"sha": "c67de1fcd27ea5440bdfa1a5cdb272eacf721980", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c67de1fcd27ea5440bdfa1a5cdb272eacf721980"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/761e6bb9f7d2bd782d93e46baebade2eb1f7d16e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/761e6bb9f7d2bd782d93e46baebade2eb1f7d16e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/761e6bb9f7d2bd782d93e46baebade2eb1f7d16e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/761e6bb9f7d2bd782d93e46baebade2eb1f7d16e/comments", "author": {"login": "zhangshk", "id": 25894465, "node_id": "MDQ6VXNlcjI1ODk0NDY1", "avatar_url": "https://avatars.githubusercontent.com/u/25894465?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhangshk", "html_url": "https://github.com/zhangshk", "followers_url": "https://api.github.com/users/zhangshk/followers", "following_url": "https://api.github.com/users/zhangshk/following{/other_user}", "gists_url": "https://api.github.com/users/zhangshk/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhangshk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhangshk/subscriptions", "organizations_url": "https://api.github.com/users/zhangshk/orgs", "repos_url": "https://api.github.com/users/zhangshk/repos", "events_url": "https://api.github.com/users/zhangshk/events{/privacy}", "received_events_url": "https://api.github.com/users/zhangshk/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "21f7f9980c078080189ca78e4da56f0c26736946", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21f7f9980c078080189ca78e4da56f0c26736946", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21f7f9980c078080189ca78e4da56f0c26736946"}], "stats": {"total": 62, "additions": 41, "deletions": 21}, "files": [{"sha": "261ea7b9d912f9dfb525bce000299421705d1525", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/761e6bb9f7d2bd782d93e46baebade2eb1f7d16e/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/761e6bb9f7d2bd782d93e46baebade2eb1f7d16e/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=761e6bb9f7d2bd782d93e46baebade2eb1f7d16e", "patch": "@@ -1,3 +1,8 @@\n+2019-09-25  Shaokun Zhang  <zhangshaokun@hisilicon.com>\n+\n+\t* config/aarch64/sync-cache.c (__aarch64_sync_cache_range): Add support for\n+\tCTR_EL0.IDC and CTR_EL0.DIC.\n+\n 2019-09-20  Christophe Lyon  <christophe.lyon@st.com>\n \n \tRevert:"}, {"sha": "ea3da4be02b37bc60aaf6d22319ff84fa8e84fc5", "filename": "libgcc/config/aarch64/sync-cache.c", "status": "modified", "additions": 36, "deletions": 21, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/761e6bb9f7d2bd782d93e46baebade2eb1f7d16e/libgcc%2Fconfig%2Faarch64%2Fsync-cache.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/761e6bb9f7d2bd782d93e46baebade2eb1f7d16e/libgcc%2Fconfig%2Faarch64%2Fsync-cache.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Faarch64%2Fsync-cache.c?ref=761e6bb9f7d2bd782d93e46baebade2eb1f7d16e", "patch": "@@ -23,6 +23,9 @@ a copy of the GCC Runtime Library Exception along with this program;\n see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n <http://www.gnu.org/licenses/>.  */\n \n+#define CTR_IDC_SHIFT           28\n+#define CTR_DIC_SHIFT           29\n+\n void __aarch64_sync_cache_range (const void *, const void *);\n \n void\n@@ -41,32 +44,44 @@ __aarch64_sync_cache_range (const void *base, const void *end)\n   icache_lsize = 4 << (cache_info & 0xF);\n   dcache_lsize = 4 << ((cache_info >> 16) & 0xF);\n \n-  /* Loop over the address range, clearing one cache line at once.\n-     Data cache must be flushed to unification first to make sure the\n-     instruction cache fetches the updated data.  'end' is exclusive,\n-     as per the GNU definition of __clear_cache.  */\n+  /* If CTR_EL0.IDC is enabled, Data cache clean to the Point of Unification is\n+     not required for instruction to data coherence.  */\n+\n+  if (((cache_info >> CTR_IDC_SHIFT) & 0x1) == 0x0) {\n+    /* Loop over the address range, clearing one cache line at once.\n+       Data cache must be flushed to unification first to make sure the\n+       instruction cache fetches the updated data.  'end' is exclusive,\n+       as per the GNU definition of __clear_cache.  */\n \n-  /* Make the start address of the loop cache aligned.  */\n-  address = (const char*) ((__UINTPTR_TYPE__) base\n-\t\t\t   & ~ (__UINTPTR_TYPE__) (dcache_lsize - 1));\n+    /* Make the start address of the loop cache aligned.  */\n+    address = (const char*) ((__UINTPTR_TYPE__) base\n+\t\t\t     & ~ (__UINTPTR_TYPE__) (dcache_lsize - 1));\n \n-  for (; address < (const char *) end; address += dcache_lsize)\n-    asm volatile (\"dc\\tcvau, %0\"\n-\t\t  :\n-\t\t  : \"r\" (address)\n-\t\t  : \"memory\");\n+    for (; address < (const char *) end; address += dcache_lsize)\n+      asm volatile (\"dc\\tcvau, %0\"\n+\t\t    :\n+\t\t    : \"r\" (address)\n+\t\t    : \"memory\");\n+  }\n \n   asm volatile (\"dsb\\tish\" : : : \"memory\");\n \n-  /* Make the start address of the loop cache aligned.  */\n-  address = (const char*) ((__UINTPTR_TYPE__) base\n-\t\t\t   & ~ (__UINTPTR_TYPE__) (icache_lsize - 1));\n+  /* If CTR_EL0.DIC is enabled, Instruction cache cleaning to the Point of\n+     Unification is not required for instruction to data coherence.  */\n+\n+  if (((cache_info >> CTR_DIC_SHIFT) & 0x1) == 0x0) {\n+    /* Make the start address of the loop cache aligned.  */\n+    address = (const char*) ((__UINTPTR_TYPE__) base\n+\t\t\t     & ~ (__UINTPTR_TYPE__) (icache_lsize - 1));\n+\n+    for (; address < (const char *) end; address += icache_lsize)\n+      asm volatile (\"ic\\tivau, %0\"\n+\t\t    :\n+\t\t    : \"r\" (address)\n+\t\t    : \"memory\");\n \n-  for (; address < (const char *) end; address += icache_lsize)\n-    asm volatile (\"ic\\tivau, %0\"\n-\t\t  :\n-\t\t  : \"r\" (address)\n-\t\t  : \"memory\");\n+    asm volatile (\"dsb\\tish\" : : : \"memory\");\n+  }\n \n-  asm volatile (\"dsb\\tish; isb\" : : : \"memory\");\n+  asm volatile(\"isb\" : : : \"memory\");\n }"}]}