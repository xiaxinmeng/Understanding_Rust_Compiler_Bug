{"sha": "e6d6151387e551d716e5813107bd7e54bd0239e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTZkNjE1MTM4N2U1NTFkNzE2ZTU4MTMxMDdiZDdlNTRiZDAyMzllNQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2015-06-24T19:59:28Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2015-06-24T19:59:28Z"}, "message": "re PR c++/66647 (ICE: in instantiate_class_template_1, at cp/pt.c:9254)\n\n\tPR c++/66647\n\t* pt.c (dependent_type_p_r): Check for dependent alias template\n\tspecialization sooner.\n\nFrom-SVN: r224917", "tree": {"sha": "67aac9552e4bc47a5bf9c85db3df018f44127c60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/67aac9552e4bc47a5bf9c85db3df018f44127c60"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e6d6151387e551d716e5813107bd7e54bd0239e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6d6151387e551d716e5813107bd7e54bd0239e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6d6151387e551d716e5813107bd7e54bd0239e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6d6151387e551d716e5813107bd7e54bd0239e5/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "31ca7cbaa81e6a0f2425659797753e7c3e26b6ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31ca7cbaa81e6a0f2425659797753e7c3e26b6ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31ca7cbaa81e6a0f2425659797753e7c3e26b6ad"}], "stats": {"total": 68, "additions": 64, "deletions": 4}, "files": [{"sha": "9dc92669cedc99b4c4902454b3fc3aeba7ab6408", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6d6151387e551d716e5813107bd7e54bd0239e5/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6d6151387e551d716e5813107bd7e54bd0239e5/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e6d6151387e551d716e5813107bd7e54bd0239e5", "patch": "@@ -1,5 +1,9 @@\n 2015-06-24  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/66647\n+\t* pt.c (dependent_type_p_r): Check for dependent alias template\n+\tspecialization sooner.\n+\n \tPR c++/66501\n \t* class.c (type_has_nontrivial_assignment): Remove.\n \t* cp-tree.h: Remove declaration."}, {"sha": "b63c0d4b7dbb16b11d35b74b09556f1bbd339806", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6d6151387e551d716e5813107bd7e54bd0239e5/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6d6151387e551d716e5813107bd7e54bd0239e5/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=e6d6151387e551d716e5813107bd7e54bd0239e5", "patch": "@@ -20992,6 +20992,12 @@ dependent_type_p_r (tree type)\n \tnames a dependent type.  */\n   if (TREE_CODE (type) == TYPENAME_TYPE)\n     return true;\n+\n+  /* An alias template specialization can be dependent even if the\n+     resulting type is not.  */\n+  if (dependent_alias_template_spec_p (type))\n+    return true;\n+\n   /* -- a cv-qualified type where the cv-unqualified type is\n \tdependent.\n      No code is necessary for this bullet; the code below handles\n@@ -21043,10 +21049,6 @@ dependent_type_p_r (tree type)\n \t   && (any_dependent_template_arguments_p\n \t       (INNERMOST_TEMPLATE_ARGS (CLASSTYPE_TI_ARGS (type)))))\n     return true;\n-  /* For an alias template specialization, check the arguments both to the\n-     class template and the alias template.  */\n-  else if (dependent_alias_template_spec_p (type))\n-    return true;\n \n   /* All TYPEOF_TYPEs, DECLTYPE_TYPEs, and UNDERLYING_TYPEs are\n      dependent; if the argument of the `typeof' expression is not"}, {"sha": "5fd3b650386a1ca344f23b75783eb10b12080093", "filename": "gcc/testsuite/g++.dg/cpp0x/alias-decl-49.C", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6d6151387e551d716e5813107bd7e54bd0239e5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-49.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6d6151387e551d716e5813107bd7e54bd0239e5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-49.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-49.C?ref=e6d6151387e551d716e5813107bd7e54bd0239e5", "patch": "@@ -0,0 +1,54 @@\n+// PR c++/66647\n+// { dg-do compile { target c++11 } }\n+\n+template <typename _Tp> struct A\n+{\n+  static constexpr _Tp value = 1;\n+};\n+template <typename> class B\n+{\n+public:\n+  template <typename> struct rebind\n+  {\n+  };\n+};\n+\n+template <typename _Alloc, typename _Tp> class C\n+{\n+  template <typename _Alloc2, typename _Tp2>\n+  static A<int> _S_chk (typename _Alloc2::template rebind<_Tp2> *);\n+\n+public:\n+  using __type = decltype (_S_chk<_Alloc, _Tp> (0));\n+};\n+\n+template <typename _Alloc, typename _Tp, int = C<_Alloc, _Tp>::__type::value>\n+struct D;\n+template <typename _Alloc, typename _Tp> struct D<_Alloc, _Tp, 1>\n+{\n+  typedef typename _Alloc::template rebind<_Tp> __type;\n+};\n+template <typename _Alloc> struct F\n+{\n+  template <typename _Tp> using rebind_alloc = typename D<_Alloc, _Tp>::__type;\n+};\n+template <typename _Alloc> struct __alloc_traits\n+{\n+  template <typename> struct rebind\n+  {\n+    typedef typename F<_Alloc>::template rebind_alloc<int> other;\n+  };\n+};\n+template <typename _Alloc> struct G\n+{\n+  typename __alloc_traits<_Alloc>::template rebind<int>::other _Tp_alloc_type;\n+};\n+template <typename _Tp, typename _Alloc = B<_Tp> > class vector : G<_Alloc>\n+{\n+};\n+\n+template <int> using tfuncptr = void();\n+template <int d> struct H\n+{\n+  vector<tfuncptr<d> > funcs;\n+};"}]}