{"sha": "f09f1de5cf126e1f5f41fd5043121e162103460d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjA5ZjFkZTVjZjEyNmUxZjVmNDFmZDUwNDMxMjFlMTYyMTAzNDYwZA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2000-06-30T18:20:42Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2000-06-30T18:20:42Z"}, "message": "Makefile.in (c-common.o): Don't depend on c-tree.h or c-lex.h.\n\n\t* Makefile.in (c-common.o): Don't depend on c-tree.h or c-lex.h.\n\t* c-common.c (ridpointers): Declare.\n\t* c-common.h (enum rid): Declare.\n\t(NORID): Likewise.\n\t(ridpointers): Likewise.\n\t* c-lex.c (ridpointers): Don't declare.\n\t(init_lex): Initialize ridpointers.\n\t* c-lex.h (enum rid): Don't declare.\n\t(NORID): Likewise.\n\t(RID_FIRST_MODIFIER): Likewise.\n\t(ridpointers): Likewise.\n\n\t* cp-tree.h (ridpointers): Don't declare.\n\t* decl.c (record_builtin_type): Use CP_RID_MAX instead of RID_MAX.\n\t(record_builtin_java_type): Likewise.\n\t(init_decl_processing): Likewise.\n\t* lex.c: Move inclusion of lex.h.\n\t(ridpointers): Don't define.\n\t(init_parse): Initialize ripdointers.  Use CP_RID_MAX instead of\n\tRID_MAX.\n\t* lex.h (enum rid): Rename to ...\n\t(enum cp_rid): ... this.\n\t(ridpointers): Don't declare.\n\t* parse.y: Move inclusion of lex.h.\n\t* parse.c: Regenerated.\n\t* spew.c: Move inclusion of lex.h.\n\n\t* cp-tree.h (struct language_function): Remove temp_name_counter.\n\t(temp_name_counter): Remove.\n\t(get_temp_name): Change prototype.\n\t(get_guard): New function.\n\t(get_guard_cond): Likewise.\n\t(set_guard): Likewise.\n\t* cvt.c (build_up_reference): Adjust call to get_temp_name.\n\t* decl.c (expand_static_init): Use get_guard and friends to\n\timplement guard variables.\n\t* decl2.c (get_temp_name): Assume that the variables created are\n\talways static.\n\t(get_sentry): Rename to ...\n\t(get_guard): ... this.  Implement new ABI guard\tvariables.\n\t(get_guard_bits): New function.\n\t(get_guard_cond): Likewise.\n\t(set_guard): Likewise.\n\t(start_static_initialization_or_destruction): Use them.\n\t(do_static_initialization): Replace sentry with guard throughout.\n\t(do_static_destruction): Likewise.\n\t* init.c (create_temporary_var): Add comment.\n\nFrom-SVN: r34815", "tree": {"sha": "5783c365ca75835ffeb02421644de31663125abe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5783c365ca75835ffeb02421644de31663125abe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f09f1de5cf126e1f5f41fd5043121e162103460d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f09f1de5cf126e1f5f41fd5043121e162103460d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f09f1de5cf126e1f5f41fd5043121e162103460d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f09f1de5cf126e1f5f41fd5043121e162103460d/comments", "author": null, "committer": null, "parents": [{"sha": "add284e6eaeae270757d98d3d682cb764eeb5fa7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/add284e6eaeae270757d98d3d682cb764eeb5fa7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/add284e6eaeae270757d98d3d682cb764eeb5fa7"}], "stats": {"total": 285, "additions": 138, "deletions": 147}, "files": [{"sha": "35be3b20883111205a4b7cf388f175bd32a02ec1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f09f1de5cf126e1f5f41fd5043121e162103460d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f09f1de5cf126e1f5f41fd5043121e162103460d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f09f1de5cf126e1f5f41fd5043121e162103460d", "patch": "@@ -1,3 +1,17 @@\n+2000-06-30  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* Makefile.in (c-common.o): Don't depend on c-tree.h or c-lex.h.\n+\t* c-common.c (ridpointers): Declare.\n+\t* c-common.h (enum rid): Declare.\n+\t(NORID): Likewise.\n+\t(ridpointers): Likewise.\n+\t* c-lex.c (ridpointers): Don't declare.\n+\t(init_lex): Initialize ridpointers.\n+\t* c-lex.h (enum rid): Don't declare.\n+\t(NORID): Likewise.\n+\t(RID_FIRST_MODIFIER): Likewise.\n+\t(ridpointers): Likewise.\n+\t\n 2000-06-30  J. David Anglin  <dave@hiauly1.hia.nrc.ca>\n \n \t* pa/som.h (ASM_WEAKEN_LABEL): Export weak data symbols so that they"}, {"sha": "74b40f338667fd26d9ef5cc329276aa9924cd9e0", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f09f1de5cf126e1f5f41fd5043121e162103460d/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f09f1de5cf126e1f5f41fd5043121e162103460d/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=f09f1de5cf126e1f5f41fd5043121e162103460d", "patch": "@@ -1154,7 +1154,7 @@ s-under: $(GCC_PASSES)\n \n # A file used by all variants of C.\n \n-c-common.o : c-common.c $(CONFIG_H) system.h $(TREE_H) c-tree.h c-lex.h \\\n+c-common.o : c-common.c $(CONFIG_H) system.h $(TREE_H) \\\n \tc-common.h flags.h toplev.h output.h c-pragma.h $(RTL_H) $(GGC_H) \\\n \t$(EXPR_H)\n "}, {"sha": "b6cf58e466b36db75da610805d07769ac67d9d92", "filename": "gcc/c-common.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f09f1de5cf126e1f5f41fd5043121e162103460d/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f09f1de5cf126e1f5f41fd5043121e162103460d/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=f09f1de5cf126e1f5f41fd5043121e162103460d", "patch": "@@ -134,6 +134,10 @@ enum cpp_token cpp_token;\n \n tree c_global_trees[CTI_MAX];\n \n+/* The elements of `ridpointers' are identifier nodes for the reserved\n+   type names and storage classes.  It is indexed by a RID_... value.  */\n+tree *ridpointers;\n+\n tree (*make_fname_decl)                PARAMS ((tree, const char *, int));\n \n /* Nonzero means the expression being parsed will never be evaluated."}, {"sha": "9fd9bdd730dffeeab60faa593f854352eee03d78", "filename": "gcc/c-common.h", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f09f1de5cf126e1f5f41fd5043121e162103460d/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f09f1de5cf126e1f5f41fd5043121e162103460d/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=f09f1de5cf126e1f5f41fd5043121e162103460d", "patch": "@@ -19,6 +19,57 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n+/* Reserved identifiers.  */\n+\n+enum rid\n+{\n+  RID_UNUSED,\n+  RID_INT,\n+  RID_CHAR,\n+  RID_FLOAT,\n+  RID_DOUBLE,\n+  RID_VOID,\n+  RID_UNUSED1,\n+\n+  /* The first seven are in the order of most frequently used,\n+     as emiprically determined.  */\n+  RID_FIRST_MODIFIER,\n+  RID_EXTERN = RID_FIRST_MODIFIER,\n+  RID_CONST,\n+  RID_LONG,\n+  RID_TYPEDEF,\n+  RID_UNSIGNED,\n+  RID_SHORT,\n+  RID_INLINE,\n+  RID_AUTO,\n+  RID_STATIC,\n+  RID_REGISTER,\n+  RID_SIGNED,\n+  RID_RESTRICT,\n+  RID_VOLATILE,\n+  RID_BOUNDED,\n+  RID_UNBOUNDED,\n+  RID_NOALIAS,\n+  RID_ITERATOR,\n+  RID_COMPLEX,\n+\n+  RID_IN,\n+  RID_OUT,\n+  RID_INOUT,\n+  RID_BYCOPY,\n+  RID_BYREF,\n+  RID_ONEWAY,\n+  RID_ID,\n+\n+  RID_MAX\n+};\n+\n+#define NORID RID_UNUSED\n+\n+/* The elements of `ridpointers' are identifier nodes for the reserved\n+   type names and storage classes.  It is indexed by a RID_... value.  */\n+extern tree *ridpointers;\n+\n /* Standard named or nameless data types of the C compiler.  */\n \n enum c_tree_index"}, {"sha": "f720a3f9b4736b50889e1171a1fa140f7c1fb67a", "filename": "gcc/c-lex.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f09f1de5cf126e1f5f41fd5043121e162103460d/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f09f1de5cf126e1f5f41fd5043121e162103460d/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=f09f1de5cf126e1f5f41fd5043121e162103460d", "patch": "@@ -62,11 +62,6 @@ FILE *finput;\n \n extern void yyprint\t\t\tPARAMS ((FILE *, int, YYSTYPE));\n \n-/* The elements of `ridpointers' are identifier nodes\n-   for the reserved type names and storage classes.\n-   It is indexed by a RID_... value.  */\n-tree ridpointers[(int) RID_MAX];\n-\n /* Cause the `yydebug' variable to be defined.  */\n #define YYDEBUG 1\n \n@@ -284,6 +279,7 @@ init_lex ()\n   maxtoken = 40;\n   token_buffer = (char *) xmalloc (maxtoken + 2);\n \n+  ridpointers = (tree *) xcalloc ((int) RID_MAX, sizeof (tree));\n   ridpointers[(int) RID_INT] = get_identifier (\"int\");\n   ridpointers[(int) RID_CHAR] = get_identifier (\"char\");\n   ridpointers[(int) RID_VOID] = get_identifier (\"void\");"}, {"sha": "224aa03d1fcc46b6b20aec38ae69bd1ec8e13bb5", "filename": "gcc/c-lex.h", "status": "modified", "additions": 0, "deletions": 51, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f09f1de5cf126e1f5f41fd5043121e162103460d/gcc%2Fc-lex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f09f1de5cf126e1f5f41fd5043121e162103460d/gcc%2Fc-lex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.h?ref=f09f1de5cf126e1f5f41fd5043121e162103460d", "patch": "@@ -18,57 +18,6 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-\n-\n-enum rid\n-{\n-  RID_UNUSED,\n-  RID_INT,\n-  RID_CHAR,\n-  RID_FLOAT,\n-  RID_DOUBLE,\n-  RID_VOID,\n-  RID_UNUSED1,\n-\n-  RID_UNSIGNED,\n-  RID_SHORT,\n-  RID_LONG,\n-  RID_AUTO,\n-  RID_STATIC,\n-  RID_EXTERN,\n-  RID_REGISTER,\n-  RID_TYPEDEF,\n-  RID_SIGNED,\n-  RID_CONST,\n-  RID_RESTRICT,\n-  RID_VOLATILE,\n-  RID_BOUNDED,\n-  RID_UNBOUNDED,\n-  RID_INLINE,\n-  RID_NOALIAS,\n-  RID_ITERATOR,\n-  RID_COMPLEX,\n-\n-  RID_IN,\n-  RID_OUT,\n-  RID_INOUT,\n-  RID_BYCOPY,\n-  RID_BYREF,\n-  RID_ONEWAY,\n-  RID_ID,\n-\n-  RID_MAX\n-};\n-\n-#define NORID RID_UNUSED\n-\n-#define RID_FIRST_MODIFIER RID_UNSIGNED\n-\n-/* The elements of `ridpointers' are identifier nodes\n-   for the reserved type names and storage classes.\n-   It is indexed by a RID_... value.  */\n-extern tree ridpointers[(int) RID_MAX];\n-\n extern char *token_buffer;\t/* Pointer to token buffer.  */\n \n extern tree make_pointer_declarator PARAMS ((tree, tree));"}, {"sha": "8bdad5e04b196d4c38b74421e95dde64080f43e8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 29, "deletions": 14, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f09f1de5cf126e1f5f41fd5043121e162103460d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f09f1de5cf126e1f5f41fd5043121e162103460d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f09f1de5cf126e1f5f41fd5043121e162103460d", "patch": "@@ -1,19 +1,20 @@\n-2000-06-28  Alex Samuel  <samuel@codesourcery.com>\n-\n-\t* mangle.c (find_substitution): Use same_type_p.\n-\t(write_encoding): Don't check for substitutions.\n-\n-2000-06-30  Nathan Sidwell  <nathan@codesourcery.com>\n-\n-\t* parse.y (expr_no_comma_rangle): New non-terminal.\n-\t(template_parm): Use it for default parameter case.\n-\t(template_arg): Use it.\n-\t(expr_no_commas): Remove commented out undefined extensions.\n-\t* Makefile.in (CONFLICTS): Adjust to 33 s/r & 48 r/r.\n-\t* parse.h, parse.c: Rebuilt.\n-\n 2000-06-30  Mark Mitchell  <mark@codesourcery.com>\n \n+\t* cp-tree.h (ridpointers): Don't declare.\n+\t* decl.c (record_builtin_type): Use CP_RID_MAX instead of RID_MAX.\n+\t(record_builtin_java_type): Likewise.\n+\t(init_decl_processing): Likewise.\n+\t* lex.c: Move inclusion of lex.h.\n+\t(ridpointers): Don't define.\n+\t(init_parse): Initialize ripdointers.  Use CP_RID_MAX instead of\n+\tRID_MAX.\n+\t* lex.h (enum rid): Rename to ...\n+\t(enum cp_rid): ... this.\n+\t(ridpointers): Don't declare.\n+\t* parse.y: Move inclusion of lex.h.\n+\t* parse.c: Regenerated.\n+\t* spew.c: Move inclusion of lex.h.\n+\t\n \t* cp-tree.h (struct language_function): Remove temp_name_counter.\n \t(temp_name_counter): Remove.\n \t(get_temp_name): Change prototype.\n@@ -35,6 +36,20 @@\n \t(do_static_destruction): Likewise.\n \t* init.c (create_temporary_var): Add comment.\n \t\n+2000-06-28  Alex Samuel  <samuel@codesourcery.com>\n+\n+\t* mangle.c (find_substitution): Use same_type_p.\n+\t(write_encoding): Don't check for substitutions.\n+\n+2000-06-30  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* parse.y (expr_no_comma_rangle): New non-terminal.\n+\t(template_parm): Use it for default parameter case.\n+\t(template_arg): Use it.\n+\t(expr_no_commas): Remove commented out undefined extensions.\n+\t* Makefile.in (CONFLICTS): Adjust to 33 s/r & 48 r/r.\n+\t* parse.h, parse.c: Rebuilt.\n+\n 2000-06-29  Mark Mitchell  <mark@codesourcery.com>\n \n \t* cp-tree.h (flag_const_strings): Remove."}, {"sha": "0bcb24a2299ceb10e5f5ba013e31469f38a671fb", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f09f1de5cf126e1f5f41fd5043121e162103460d/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f09f1de5cf126e1f5f41fd5043121e162103460d/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=f09f1de5cf126e1f5f41fd5043121e162103460d", "patch": "@@ -1034,8 +1034,6 @@ struct language_function\n extern tree current_function_return_value;\n extern tree global_namespace;\n \n-extern tree ridpointers[];\n-\n #define ansi_opname(CODE) \\\n   (operator_name_info[(int) (CODE)].identifier)\n #define ansi_assopname(CODE) \\"}, {"sha": "3e952edcfecf4089d688ccb035cda8328c4a9532", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 22, "deletions": 18, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f09f1de5cf126e1f5f41fd5043121e162103460d/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f09f1de5cf126e1f5f41fd5043121e162103460d/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=f09f1de5cf126e1f5f41fd5043121e162103460d", "patch": "@@ -6123,7 +6123,7 @@ signal_catch (sig)\n }\n \n /* Push the declarations of builtin types into the namespace.\n-   RID_INDEX, if < RID_MAX is the index of the builtin type\n+   RID_INDEX, if < CP_RID_MAX is the index of the builtin type\n    in the array RID_POINTERS.  NAME is the name used when looking\n    up the builtin type.  TYPE is the _TYPE node for the builtin type.  */\n \n@@ -6136,7 +6136,7 @@ record_builtin_type (rid_index, name, type)\n   tree rname = NULL_TREE, tname = NULL_TREE;\n   tree tdecl = NULL_TREE;\n \n-  if ((int) rid_index < (int) RID_MAX)\n+  if ((int) rid_index < (int) CP_RID_MAX)\n     rname = ridpointers[(int) rid_index];\n   if (name)\n     tname = get_identifier (name);\n@@ -6147,7 +6147,7 @@ record_builtin_type (rid_index, name, type)\n     {\n       tdecl = pushdecl (build_decl (TYPE_DECL, tname, type));\n       set_identifier_type_value (tname, NULL_TREE);\n-      if ((int) rid_index < (int) RID_MAX)\n+      if ((int) rid_index < (int) CP_RID_MAX)\n \t/* Built-in types live in the global namespace. */\n \tSET_IDENTIFIER_GLOBAL_VALUE (tname, tdecl);\n     }\n@@ -6190,7 +6190,7 @@ record_builtin_java_type (name, size)\n       TYPE_PRECISION (type) = - size;\n       layout_type (type);\n     }\n-  record_builtin_type (RID_MAX, name, type);\n+  record_builtin_type (CP_RID_MAX, name, type);\n   decl = TYPE_NAME (type);\n \n   /* Suppress generate debug symbol entries for these types,\n@@ -6372,23 +6372,27 @@ init_decl_processing ()\n   record_builtin_type (RID_SIGNED, NULL_PTR, integer_type_node);\n   record_builtin_type (RID_LONG, \"long int\", long_integer_type_node);\n   record_builtin_type (RID_UNSIGNED, \"unsigned int\", unsigned_type_node);\n-  record_builtin_type (RID_MAX, \"long unsigned int\", long_unsigned_type_node);\n-  record_builtin_type (RID_MAX, \"unsigned long\", long_unsigned_type_node);\n-  record_builtin_type (RID_MAX, \"long long int\", long_long_integer_type_node);\n-  record_builtin_type (RID_MAX, \"long long unsigned int\",\n+  record_builtin_type (CP_RID_MAX, \"long unsigned int\",\n+\t\t       long_unsigned_type_node);\n+  record_builtin_type (CP_RID_MAX, \"unsigned long\", long_unsigned_type_node);\n+  record_builtin_type (CP_RID_MAX, \"long long int\",\n+\t\t       long_long_integer_type_node);\n+  record_builtin_type (CP_RID_MAX, \"long long unsigned int\",\n \t\t       long_long_unsigned_type_node);\n-  record_builtin_type (RID_MAX, \"long long unsigned\",\n+  record_builtin_type (CP_RID_MAX, \"long long unsigned\",\n \t\t       long_long_unsigned_type_node);\n   record_builtin_type (RID_SHORT, \"short int\", short_integer_type_node);\n-  record_builtin_type (RID_MAX, \"short unsigned int\", short_unsigned_type_node);\n-  record_builtin_type (RID_MAX, \"unsigned short\", short_unsigned_type_node);\n+  record_builtin_type (CP_RID_MAX, \"short unsigned int\",\n+\t\t       short_unsigned_type_node); \n+  record_builtin_type (CP_RID_MAX, \"unsigned short\",\n+\t\t       short_unsigned_type_node);\n \n   ptrdiff_type_node\n     = TREE_TYPE (IDENTIFIER_GLOBAL_VALUE (get_identifier (PTRDIFF_TYPE)));\n \n   /* Define both `signed char' and `unsigned char'.  */\n-  record_builtin_type (RID_MAX, \"signed char\", signed_char_type_node);\n-  record_builtin_type (RID_MAX, \"unsigned char\", unsigned_char_type_node);\n+  record_builtin_type (CP_RID_MAX, \"signed char\", signed_char_type_node);\n+  record_builtin_type (CP_RID_MAX, \"unsigned char\", unsigned_char_type_node);\n \n   /* `unsigned long' is the standard type for sizeof.\n      Note that stddef.h uses `unsigned long',\n@@ -6451,7 +6455,7 @@ init_decl_processing ()\n   signed_size_zero_node = build_int_2 (0, 0);\n   record_builtin_type (RID_FLOAT, NULL_PTR, float_type_node);\n   record_builtin_type (RID_DOUBLE, NULL_PTR, double_type_node);\n-  record_builtin_type (RID_MAX, \"long double\", long_double_type_node);\n+  record_builtin_type (CP_RID_MAX, \"long double\", long_double_type_node);\n \n   pushdecl (build_decl (TYPE_DECL, get_identifier (\"complex int\"),\n \t\t\tcomplex_integer_type_node));\n@@ -6478,7 +6482,7 @@ init_decl_processing ()\n \t\t\t\t\t\tTYPE_QUAL_CONST));\n   empty_except_spec = build_tree_list (NULL_TREE, NULL_TREE);\n #if 0\n-  record_builtin_type (RID_MAX, NULL_PTR, string_type_node);\n+  record_builtin_type (CP_RID_MAX, NULL_PTR, string_type_node);\n #endif\n \n   /* Make a type to be the domain of a few array types\n@@ -6595,16 +6599,16 @@ init_decl_processing ()\n       vtable_entry_type = build_qualified_type (vtable_entry_type,\n \t\t\t\t\t\tTYPE_QUAL_CONST);\n     }\n-  record_builtin_type (RID_MAX, VTBL_PTR_TYPE, vtable_entry_type);\n+  record_builtin_type (CP_RID_MAX, VTBL_PTR_TYPE, vtable_entry_type);\n \n   vtbl_type_node\n     = build_cplus_array_type (vtable_entry_type, NULL_TREE);\n   layout_type (vtbl_type_node);\n   vtbl_type_node = build_qualified_type (vtbl_type_node, TYPE_QUAL_CONST);\n-  record_builtin_type (RID_MAX, NULL_PTR, vtbl_type_node);\n+  record_builtin_type (CP_RID_MAX, NULL_PTR, vtbl_type_node);\n   vtbl_ptr_type_node = build_pointer_type (vtable_entry_type);\n   layout_type (vtbl_ptr_type_node);\n-  record_builtin_type (RID_MAX, NULL_PTR, vtbl_ptr_type_node);\n+  record_builtin_type (CP_RID_MAX, NULL_PTR, vtbl_ptr_type_node);\n \n   std_node = build_decl (NAMESPACE_DECL,\n \t\t\t flag_honor_std "}, {"sha": "1bf7953211161114f76bb5511e7a8d8fbdc98376", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f09f1de5cf126e1f5f41fd5043121e162103460d/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f09f1de5cf126e1f5f41fd5043121e162103460d/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=f09f1de5cf126e1f5f41fd5043121e162103460d", "patch": "@@ -30,8 +30,8 @@ Boston, MA 02111-1307, USA.  */\n #include \"system.h\"\n #include \"input.h\"\n #include \"tree.h\"\n-#include \"lex.h\"\n #include \"cp-tree.h\"\n+#include \"lex.h\"\n #include \"parse.h\"\n #include \"flags.h\"\n #include \"obstack.h\"\n@@ -162,11 +162,6 @@ YYLTYPE yylloc;\t\t\t/*  location data for the lookahead\t*/\n    used in a context which makes it a reference to a variable.  */\n tree lastiddecl;\n \n-/* The elements of `ridpointers' are identifier nodes\n-   for the reserved type names and storage classes.\n-   It is indexed by a RID_... value.  */\n-tree ridpointers[(int) RID_MAX];\n-\n /* We may keep statistics about how long which files took to compile.  */\n static int header_time, body_time;\n static tree filename_times;\n@@ -610,6 +605,8 @@ init_parse (filename)\n   maxtoken = 40;\n   token_buffer = (char *) xmalloc (maxtoken + 2);\n \n+  my_friendly_assert ((int) CP_RID_MAX < 64, 20000630);\n+  ridpointers = (tree *) xcalloc ((int) CP_RID_MAX, sizeof (tree));\n   ridpointers[(int) RID_INT] = get_identifier (\"int\");\n   ridpointers[(int) RID_BOOL] = get_identifier (\"bool\");\n   ridpointers[(int) RID_CHAR] = get_identifier (\"char\");\n@@ -708,7 +705,7 @@ init_parse (filename)\n   interface_unknown = 1;\n \n   ggc_add_string_root (&internal_filename, 1);\n-  ggc_add_tree_root (ridpointers, RID_MAX);\n+  ggc_add_tree_root (ridpointers, CP_RID_MAX);\n   ggc_add_tree_root (&defarg_fns, 1);\n   ggc_add_tree_root (&defarg_parm, 1);\n   ggc_add_tree_root (&this_filename_time, 1);"}, {"sha": "7d00129d8073eae8ff3b35c0e66782b709467391", "filename": "gcc/cp/lex.h", "status": "modified", "additions": 9, "deletions": 46, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f09f1de5cf126e1f5f41fd5043121e162103460d/gcc%2Fcp%2Flex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f09f1de5cf126e1f5f41fd5043121e162103460d/gcc%2Fcp%2Flex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.h?ref=f09f1de5cf126e1f5f41fd5043121e162103460d", "patch": "@@ -21,18 +21,17 @@ can know your rights and responsibilities.  It should be in a\n file named COPYING.  Among other things, the copyright notice\n and this notice must be preserved on all copies.  */\n \n-\n-\n-enum rid\n+enum cp_rid\n {\n-  RID_UNUSED,\n-  RID_INT,\n+  RID_FRIEND = RID_MAX,\n+  RID_VIRTUAL,\n+  RID_EXPLICIT,\n+  RID_EXPORT,\n+  RID_MUTABLE,\n+  RID_LAST_MODIFIER = RID_MUTABLE,\n+\n   RID_BOOL,\n-  RID_CHAR,\n   RID_WCHAR,\n-  RID_FLOAT,\n-  RID_DOUBLE,\n-  RID_VOID,\n \n   /* C++ extension */\n   RID_CLASS,\n@@ -41,37 +40,6 @@ enum rid\n   RID_ENUM,\n   RID_LONGLONG,\n \n-  /* This is where grokdeclarator starts its search when setting the specbits.\n-     The first seven are in the order of most frequently used, as found\n-     building libg++.  */\n-  RID_FIRST_MODIFIER,\n-\n-  RID_EXTERN = RID_FIRST_MODIFIER,\n-  RID_CONST,\n-  RID_LONG,\n-  RID_TYPEDEF,\n-  RID_UNSIGNED,\n-  RID_SHORT,\n-  RID_INLINE,\n-\n-  RID_STATIC,\n-\n-  RID_REGISTER,\n-  RID_VOLATILE,\n-  RID_FRIEND,\n-  RID_VIRTUAL,\n-  RID_EXPLICIT,\n-  RID_EXPORT,\n-  RID_SIGNED,\n-  RID_AUTO,\n-  RID_MUTABLE,\n-  RID_COMPLEX,\n-  RID_RESTRICT,\n-\n-  RID_LAST_MODIFIER = RID_RESTRICT,\n-  /* This is where grokdeclarator ends its search when setting the\n-     specbits.  */\n-\n   RID_PUBLIC,\n   RID_PRIVATE,\n   RID_PROTECTED,\n@@ -80,7 +48,7 @@ enum rid\n   RID_NULL,\n   /* Before adding enough to get up to 64, the RIDBIT_* macros\n      will have to be changed a little.  */\n-  RID_MAX\n+  CP_RID_MAX\n };\n \n /* The type that can represent all values of RIDBIT.  */\n@@ -106,11 +74,6 @@ typedef struct { unsigned long idata[2]; }\n \t\t\t\t } while (0)\n #define RIDBIT_ANY_SET(V) ((V).idata[0] || (V).idata[1])\n \n-/* The elements of `ridpointers' are identifier nodes\n-   for the reserved type names and storage classes.\n-   It is indexed by a RID_... value.  */\n-extern tree ridpointers[(int) RID_MAX];\n-\n /* the declaration found for the last IDENTIFIER token read in.\n    yylex must look this up to detect typedefs, which get token type TYPENAME,\n    so it is left around in case the identifier is not a typedef but is"}, {"sha": "59606e41fdc060278efbc6170d365e7cea00fe5e", "filename": "gcc/cp/parse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f09f1de5cf126e1f5f41fd5043121e162103460d/gcc%2Fcp%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f09f1de5cf126e1f5f41fd5043121e162103460d/gcc%2Fcp%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.c?ref=f09f1de5cf126e1f5f41fd5043121e162103460d", "patch": "@@ -102,8 +102,8 @@\n #include \"tree.h\"\n #include \"input.h\"\n #include \"flags.h\"\n-#include \"lex.h\"\n #include \"cp-tree.h\"\n+#include \"lex.h\"\n #include \"output.h\"\n #include \"except.h\"\n #include \"toplev.h\""}, {"sha": "9b0fab066e5155ed4a8a739080fbf9074bf81e1f", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f09f1de5cf126e1f5f41fd5043121e162103460d/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f09f1de5cf126e1f5f41fd5043121e162103460d/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=f09f1de5cf126e1f5f41fd5043121e162103460d", "patch": "@@ -38,8 +38,8 @@ Boston, MA 02111-1307, USA.  */\n #include \"tree.h\"\n #include \"input.h\"\n #include \"flags.h\"\n-#include \"lex.h\"\n #include \"cp-tree.h\"\n+#include \"lex.h\"\n #include \"output.h\"\n #include \"except.h\"\n #include \"toplev.h\""}, {"sha": "f15264294c066fe354b588edeba2d8ae5f938e1f", "filename": "gcc/cp/spew.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f09f1de5cf126e1f5f41fd5043121e162103460d/gcc%2Fcp%2Fspew.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f09f1de5cf126e1f5f41fd5043121e162103460d/gcc%2Fcp%2Fspew.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fspew.c?ref=f09f1de5cf126e1f5f41fd5043121e162103460d", "patch": "@@ -28,8 +28,8 @@ Boston, MA 02111-1307, USA.  */\n #include \"system.h\"\n #include \"input.h\"\n #include \"tree.h\"\n-#include \"lex.h\"\n #include \"cp-tree.h\"\n+#include \"lex.h\"\n #include \"parse.h\"\n #include \"flags.h\"\n #include \"obstack.h\""}]}