{"sha": "ed3e611e05f5490cb986ce9a1398f6755717b937", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQzZTYxMWUwNWY1NDkwY2I5ODZjZTlhMTM5OGY2NzU1NzE3YjkzNw==", "commit": {"author": {"name": "Alexander Ivchenko", "email": "alexander.ivchenko@intel.com", "date": "2014-10-14T08:40:34Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2014-10-14T08:40:34Z"}, "message": "AVX-512. 68/n.  Add vpmullw, vpacksdw, pmaddwd insn.\n\ngcc/\n\t* config/i386/sse.md\n\t(define_c_enum \"unspec\"): Add UNSPEC_PMADDWD512.\n\t(define_mode_iterator VI2_AVX2): Add V32HI mode.\n\t(define_expand \"mul<mode>3<mask_name>\"): Add masking.\n\t(define_insn \"*mul<mode>3<mask_name>\"): Ditto.\n\t(define_expand \"<s>mul<mode>3_highpart<mask_name>\"): Ditto.\n\t(define_insn \"*<s>mul<mode>3_highpart<mask_name>\"): Ditto.\n\t(define_insn \"avx512bw_pmaddwd512<mode><mask_name>\"): New.\n\t(define_mode_attr SDOT_PMADD_SUF): Ditto.\n\t(define_expand \"sdot_prod<mode>\"): Add <SDOT_PMADD_SUF>.\n\t(define_insn \"<sse2_avx2>_packssdw<mask_name>\"): Add masking.\n\t(define_insn \"*<ssse3_avx2>_pmulhrsw<mode>3<mask_name>\"): Ditto.\n\t(define_insn \"avx2_packusdw\"): Delete.\n\t(define_insn \"sse4_1_packusdw\"): Ditto.\n\t(define_insn \"<sse4_1_avx2>_packusdw<mask_name>\"): New.\n\nCo-Authored-By: Andrey Turetskiy <andrey.turetskiy@intel.com>\nCo-Authored-By: Anna Tikhonova <anna.tikhonova@intel.com>\nCo-Authored-By: Ilya Tocar <ilya.tocar@intel.com>\nCo-Authored-By: Ilya Verbin <ilya.verbin@intel.com>\nCo-Authored-By: Kirill Yukhin <kirill.yukhin@intel.com>\nCo-Authored-By: Maxim Kuznetsov <maxim.kuznetsov@intel.com>\nCo-Authored-By: Michael Zolotukhin <michael.v.zolotukhin@intel.com>\n\nFrom-SVN: r216185", "tree": {"sha": "7f2375867a265f53a8c1a71bca1bd4bca80fd073", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f2375867a265f53a8c1a71bca1bd4bca80fd073"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed3e611e05f5490cb986ce9a1398f6755717b937", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed3e611e05f5490cb986ce9a1398f6755717b937", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed3e611e05f5490cb986ce9a1398f6755717b937", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed3e611e05f5490cb986ce9a1398f6755717b937/comments", "author": null, "committer": null, "parents": [{"sha": "1aff6f9a2f22d5f330570e9872b648a751ad86b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1aff6f9a2f22d5f330570e9872b648a751ad86b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1aff6f9a2f22d5f330570e9872b648a751ad86b8"}], "stats": {"total": 145, "additions": 89, "deletions": 56}, "files": [{"sha": "79606b70fb503b753f057410126b78b33963f5db", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed3e611e05f5490cb986ce9a1398f6755717b937/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed3e611e05f5490cb986ce9a1398f6755717b937/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ed3e611e05f5490cb986ce9a1398f6755717b937", "patch": "@@ -1,3 +1,28 @@\n+2014-10-14  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n+\t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n+\t    Anna Tikhonova  <anna.tikhonova@intel.com>\n+\t    Ilya Tocar  <ilya.tocar@intel.com>\n+\t    Andrey Turetskiy  <andrey.turetskiy@intel.com>\n+\t    Ilya Verbin  <ilya.verbin@intel.com>\n+\t    Kirill Yukhin  <kirill.yukhin@intel.com>\n+\t    Michael Zolotukhin  <michael.v.zolotukhin@intel.com>\n+\n+\t* config/i386/sse.md\n+\t(define_c_enum \"unspec\"): Add UNSPEC_PMADDWD512.\n+\t(define_mode_iterator VI2_AVX2): Add V32HI mode.\n+\t(define_expand \"mul<mode>3<mask_name>\"): Add masking.\n+\t(define_insn \"*mul<mode>3<mask_name>\"): Ditto.\n+\t(define_expand \"<s>mul<mode>3_highpart<mask_name>\"): Ditto.\n+\t(define_insn \"*<s>mul<mode>3_highpart<mask_name>\"): Ditto.\n+\t(define_insn \"avx512bw_pmaddwd512<mode><mask_name>\"): New.\n+\t(define_mode_attr SDOT_PMADD_SUF): Ditto.\n+\t(define_expand \"sdot_prod<mode>\"): Add <SDOT_PMADD_SUF>.\n+\t(define_insn \"<sse2_avx2>_packssdw<mask_name>\"): Add masking.\n+\t(define_insn \"*<ssse3_avx2>_pmulhrsw<mode>3<mask_name>\"): Ditto.\n+\t(define_insn \"avx2_packusdw\"): Delete.\n+\t(define_insn \"sse4_1_packusdw\"): Ditto.\n+\t(define_insn \"<sse4_1_avx2>_packusdw<mask_name>\"): New.\n+\n 2014-10-14  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n \t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n \t    Anna Tikhonova  <anna.tikhonova@intel.com>"}, {"sha": "c917393458549e382c5eff28eabaa69a6cb8634d", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 64, "deletions": 56, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed3e611e05f5490cb986ce9a1398f6755717b937/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed3e611e05f5490cb986ce9a1398f6755717b937/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=ed3e611e05f5490cb986ce9a1398f6755717b937", "patch": "@@ -132,6 +132,7 @@\n   ;; For AVX512BW support\n   UNSPEC_DBPSADBW\n   UNSPEC_PMADDUBSW512\n+  UNSPEC_PMADDWD512\n   UNSPEC_PSHUFHW\n   UNSPEC_PSHUFLW\n \n@@ -300,7 +301,7 @@\n   [(V32QI \"TARGET_AVX2\") V16QI])\n \n (define_mode_iterator VI2_AVX2\n-  [(V16HI \"TARGET_AVX2\") V8HI])\n+  [(V32HI \"TARGET_AVX512BW\") (V16HI \"TARGET_AVX2\") V8HI])\n \n (define_mode_iterator VI2_AVX512F\n   [(V32HI \"TARGET_AVX512F\") (V16HI \"TARGET_AVX2\") V8HI])\n@@ -9135,28 +9136,30 @@\n   DONE;\n })\n \n-(define_expand \"mul<mode>3\"\n+(define_expand \"mul<mode>3<mask_name>\"\n   [(set (match_operand:VI2_AVX2 0 \"register_operand\")\n \t(mult:VI2_AVX2 (match_operand:VI2_AVX2 1 \"nonimmediate_operand\")\n \t\t       (match_operand:VI2_AVX2 2 \"nonimmediate_operand\")))]\n-  \"TARGET_SSE2\"\n+  \"TARGET_SSE2 && <mask_mode512bit_condition> && <mask_avx512bw_condition>\"\n   \"ix86_fixup_binary_operands_no_copy (MULT, <MODE>mode, operands);\")\n \n-(define_insn \"*mul<mode>3\"\n-  [(set (match_operand:VI2_AVX2 0 \"register_operand\" \"=x,x\")\n-        (mult:VI2_AVX2 (match_operand:VI2_AVX2 1 \"nonimmediate_operand\" \"%0,v\")\n-                       (match_operand:VI2_AVX2 2 \"nonimmediate_operand\" \"xm,vm\")))]\n-  \"TARGET_SSE2 && ix86_binary_operator_ok (MULT, <MODE>mode, operands)\"\n+(define_insn \"*mul<mode>3<mask_name>\"\n+  [(set (match_operand:VI2_AVX2 0 \"register_operand\" \"=x,v\")\n+\t(mult:VI2_AVX2 (match_operand:VI2_AVX2 1 \"nonimmediate_operand\" \"%0,v\")\n+\t\t       (match_operand:VI2_AVX2 2 \"nonimmediate_operand\" \"xm,vm\")))]\n+  \"TARGET_SSE2\n+   && ix86_binary_operator_ok (MULT, <MODE>mode, operands)\n+   && <mask_mode512bit_condition> && <mask_avx512bw_condition>\"\n   \"@\n    pmullw\\t{%2, %0|%0, %2}\n-   vpmullw\\t{%2, %1, %0|%0, %1, %2}\"\n+   vpmullw\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n   [(set_attr \"isa\" \"noavx,avx\")\n    (set_attr \"type\" \"sseimul\")\n    (set_attr \"prefix_data16\" \"1,*\")\n    (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_expand \"<s>mul<mode>3_highpart\"\n+(define_expand \"<s>mul<mode>3_highpart<mask_name>\"\n   [(set (match_operand:VI2_AVX2 0 \"register_operand\")\n \t(truncate:VI2_AVX2\n \t  (lshiftrt:<ssedoublemode>\n@@ -9166,23 +9169,26 @@\n \t      (any_extend:<ssedoublemode>\n \t\t(match_operand:VI2_AVX2 2 \"nonimmediate_operand\")))\n \t    (const_int 16))))]\n-  \"TARGET_SSE2\"\n+  \"TARGET_SSE2\n+   && <mask_mode512bit_condition> && <mask_avx512bw_condition>\"\n   \"ix86_fixup_binary_operands_no_copy (MULT, <MODE>mode, operands);\")\n \n-(define_insn \"*<s>mul<mode>3_highpart\"\n-  [(set (match_operand:VI2_AVX2 0 \"register_operand\" \"=x,x\")\n+(define_insn \"*<s>mul<mode>3_highpart<mask_name>\"\n+  [(set (match_operand:VI2_AVX2 0 \"register_operand\" \"=x,v\")\n \t(truncate:VI2_AVX2\n \t  (lshiftrt:<ssedoublemode>\n \t    (mult:<ssedoublemode>\n \t      (any_extend:<ssedoublemode>\n-\t\t(match_operand:VI2_AVX2 1 \"nonimmediate_operand\" \"%0,x\"))\n+\t\t(match_operand:VI2_AVX2 1 \"nonimmediate_operand\" \"%0,v\"))\n \t      (any_extend:<ssedoublemode>\n-\t\t(match_operand:VI2_AVX2 2 \"nonimmediate_operand\" \"xm,xm\")))\n+\t\t(match_operand:VI2_AVX2 2 \"nonimmediate_operand\" \"xm,vm\")))\n \t    (const_int 16))))]\n-  \"TARGET_SSE2 && ix86_binary_operator_ok (MULT, <MODE>mode, operands)\"\n+  \"TARGET_SSE2\n+   && ix86_binary_operator_ok (MULT, <MODE>mode, operands)\n+   && <mask_mode512bit_condition> && <mask_avx512bw_condition>\"\n   \"@\n    pmulh<u>w\\t{%2, %0|%0, %2}\n-   vpmulh<u>w\\t{%2, %1, %0|%0, %1, %2}\"\n+   vpmulh<u>w\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n   [(set_attr \"isa\" \"noavx,avx\")\n    (set_attr \"type\" \"sseimul\")\n    (set_attr \"prefix_data16\" \"1,*\")\n@@ -9425,6 +9431,18 @@\n    (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"TI\")])\n \n+(define_insn \"avx512bw_pmaddwd512<mode><mask_name>\"\n+  [(set (match_operand:<sseunpackmode> 0 \"register_operand\" \"=v\")\n+          (unspec:<sseunpackmode>\n+            [(match_operand:VI2_AVX2 1 \"register_operand\" \"v\")\n+             (match_operand:VI2_AVX2 2 \"nonimmediate_operand\" \"vm\")]\n+             UNSPEC_PMADDWD512))]\n+   \"TARGET_AVX512BW && <mask_mode512bit_condition>\"\n+   \"vpmaddwd\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\";\n+  [(set_attr \"type\" \"sseiadd\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"XI\")])\n+\n (define_expand \"avx2_pmaddwd\"\n   [(set (match_operand:V8SI 0 \"register_operand\")\n \t(plus:V8SI\n@@ -9665,6 +9683,9 @@\n   DONE;\n })\n \n+(define_mode_attr SDOT_PMADD_SUF\n+  [(V32HI \"512v32hi\") (V16HI \"\") (V8HI \"\")])\n+\n (define_expand \"sdot_prod<mode>\"\n   [(match_operand:<sseunpackmode> 0 \"register_operand\")\n    (match_operand:VI2_AVX2 1 \"register_operand\")\n@@ -9673,7 +9694,7 @@\n   \"TARGET_SSE2\"\n {\n   rtx t = gen_reg_rtx (<sseunpackmode>mode);\n-  emit_insn (gen_<sse2_avx2>_pmaddwd (t, operands[1], operands[2]));\n+  emit_insn (gen_<sse2_avx2>_pmaddwd<SDOT_PMADD_SUF> (t, operands[1], operands[2]));\n   emit_insn (gen_rtx_SET (VOIDmode, operands[0],\n \t\t\t  gen_rtx_PLUS (<sseunpackmode>mode,\n \t\t\t\t\toperands[3], t)));\n@@ -10857,17 +10878,17 @@\n    (set_attr \"prefix\" \"orig,maybe_evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_insn \"<sse2_avx2>_packssdw\"\n-  [(set (match_operand:VI2_AVX2 0 \"register_operand\" \"=x,x\")\n+(define_insn \"<sse2_avx2>_packssdw<mask_name>\"\n+  [(set (match_operand:VI2_AVX2 0 \"register_operand\" \"=x,v\")\n \t(vec_concat:VI2_AVX2\n \t  (ss_truncate:<ssehalfvecmode>\n-\t    (match_operand:<sseunpackmode> 1 \"register_operand\" \"0,x\"))\n+\t    (match_operand:<sseunpackmode> 1 \"register_operand\" \"0,v\"))\n \t  (ss_truncate:<ssehalfvecmode>\n-\t    (match_operand:<sseunpackmode> 2 \"nonimmediate_operand\" \"xm,xm\"))))]\n-  \"TARGET_SSE2\"\n+\t    (match_operand:<sseunpackmode> 2 \"nonimmediate_operand\" \"xm,vm\"))))]\n+  \"TARGET_SSE2 && <mask_mode512bit_condition> && <mask_avx512bw_condition>\"\n   \"@\n    packssdw\\t{%2, %0|%0, %2}\n-   vpackssdw\\t{%2, %1, %0|%0, %1, %2}\"\n+   vpackssdw\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n   [(set_attr \"isa\" \"noavx,avx\")\n    (set_attr \"type\" \"sselog\")\n    (set_attr \"prefix_data16\" \"1,*\")\n@@ -13349,29 +13370,30 @@\n   ix86_fixup_binary_operands_no_copy (MULT, <MODE>mode, operands);\n })\n \n-(define_insn \"*<ssse3_avx2>_pmulhrsw<mode>3\"\n-  [(set (match_operand:VI2_AVX2 0 \"register_operand\" \"=x,x\")\n+(define_insn \"*<ssse3_avx2>_pmulhrsw<mode>3<mask_name>\"\n+  [(set (match_operand:VI2_AVX2 0 \"register_operand\" \"=x,v\")\n \t(truncate:VI2_AVX2\n \t  (lshiftrt:<ssedoublemode>\n \t    (plus:<ssedoublemode>\n \t      (lshiftrt:<ssedoublemode>\n \t\t(mult:<ssedoublemode>\n \t\t  (sign_extend:<ssedoublemode>\n-\t\t    (match_operand:VI2_AVX2 1 \"nonimmediate_operand\" \"%0,x\"))\n+\t\t    (match_operand:VI2_AVX2 1 \"nonimmediate_operand\" \"%0,v\"))\n \t\t  (sign_extend:<ssedoublemode>\n-\t\t    (match_operand:VI2_AVX2 2 \"nonimmediate_operand\" \"xm,xm\")))\n+\t\t    (match_operand:VI2_AVX2 2 \"nonimmediate_operand\" \"xm,vm\")))\n \t\t(const_int 14))\n \t      (match_operand:VI2_AVX2 3 \"const1_operand\"))\n \t    (const_int 1))))]\n-  \"TARGET_SSSE3 && ix86_binary_operator_ok (MULT, <MODE>mode, operands)\"\n+  \"TARGET_SSSE3 && <mask_mode512bit_condition> && <mask_avx512bw_condition>\n+   && ix86_binary_operator_ok (MULT, <MODE>mode, operands)\"\n   \"@\n    pmulhrsw\\t{%2, %0|%0, %2}\n-   vpmulhrsw\\t{%2, %1, %0|%0, %1, %2}\"\n+   vpmulhrsw\\t{%2, %1, %0<mask_operand4>|%0<mask_operand4>, %1, %2}\"\n   [(set_attr \"isa\" \"noavx,avx\")\n    (set_attr \"type\" \"sseimul\")\n    (set_attr \"prefix_data16\" \"1,*\")\n    (set_attr \"prefix_extra\" \"1\")\n-   (set_attr \"prefix\" \"orig,vex\")\n+   (set_attr \"prefix\" \"orig,maybe_evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n (define_insn \"*ssse3_pmulhrswv4hi3\"\n@@ -13743,36 +13765,22 @@\n    (set_attr \"btver2_decode\" \"vector,vector\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_insn \"avx2_packusdw\"\n-  [(set (match_operand:V16HI 0 \"register_operand\" \"=x\")\n-\t(vec_concat:V16HI\n-\t  (us_truncate:V8HI\n-\t    (match_operand:V8SI 1 \"register_operand\" \"x\"))\n-\t  (us_truncate:V8HI\n-\t    (match_operand:V8SI 2 \"nonimmediate_operand\" \"xm\"))))]\n-  \"TARGET_AVX2\"\n-  \"vpackusdw\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"type\" \"sselog\")\n-   (set_attr \"prefix_extra\" \"1\")\n-   (set_attr \"prefix\" \"vex\")\n-   (set_attr \"mode\" \"OI\")])\n-\n-(define_insn \"sse4_1_packusdw\"\n-  [(set (match_operand:V8HI 0 \"register_operand\" \"=x,x\")\n-\t(vec_concat:V8HI\n-\t  (us_truncate:V4HI\n-\t    (match_operand:V4SI 1 \"register_operand\" \"0,x\"))\n-\t  (us_truncate:V4HI\n-\t    (match_operand:V4SI 2 \"nonimmediate_operand\" \"xm,xm\"))))]\n-  \"TARGET_SSE4_1\"\n+(define_insn \"<sse4_1_avx2>_packusdw<mask_name>\"\n+  [(set (match_operand:VI2_AVX2 0 \"register_operand\" \"=x,v\")\n+\t(vec_concat:VI2_AVX2\n+\t  (us_truncate:<ssehalfvecmode>\n+\t    (match_operand:<sseunpackmode> 1 \"register_operand\" \"0,v\"))\n+\t  (us_truncate:<ssehalfvecmode>\n+\t    (match_operand:<sseunpackmode> 2 \"nonimmediate_operand\" \"xm,vm\"))))]\n+  \"TARGET_SSE4_1 && <mask_mode512bit_condition> && <mask_avx512bw_condition>\"\n   \"@\n    packusdw\\t{%2, %0|%0, %2}\n-   vpackusdw\\t{%2, %1, %0|%0, %1, %2}\"\n+   vpackusdw\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n   [(set_attr \"isa\" \"noavx,avx\")\n    (set_attr \"type\" \"sselog\")\n    (set_attr \"prefix_extra\" \"1\")\n-   (set_attr \"prefix\" \"orig,vex\")\n-   (set_attr \"mode\" \"TI\")])\n+   (set_attr \"prefix\" \"orig,maybe_evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n \n (define_insn \"<sse4_1_avx2>_pblendvb\"\n   [(set (match_operand:VI1_AVX2 0 \"register_operand\" \"=x,x\")"}]}