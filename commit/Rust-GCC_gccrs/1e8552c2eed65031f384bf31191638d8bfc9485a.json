{"sha": "1e8552c2eed65031f384bf31191638d8bfc9485a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWU4NTUyYzJlZWQ2NTAzMWYzODRiZjMxMTkxNjM4ZDhiZmM5NDg1YQ==", "commit": {"author": {"name": "Trevor Saunders", "email": "tbsaunde+gcc@tbsaunde.org", "date": "2015-04-28T04:40:00Z"}, "committer": {"name": "Trevor Saunders", "email": "tbsaunde@gcc.gnu.org", "date": "2015-04-28T04:40:00Z"}, "message": "add default for NO_FUNCTION_CSE\n\ngcc/ChangeLog:\n\n2015-04-27  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n\n\t* calls.c (prepare_call_address): Remove ifdef NO_FUNCTION_CSE.\n\t* cse.c (fold_rtx): Likewise.\n\t* config/alpha/alpha.h (NO_FUNCTION_CSE): Define to 1.\n\t* config/arc/arc.h (NO_FUNCTION_CSE): Likewise.\n\t* config/avr/avr.h (NO_FUNCTION_CSE): Likewise.\n\t* config/cr16/cr16.h (NO_FUNCTION_CSE): Likewise.\n\t* config/epiphany/epiphany.h (NO_FUNCTION_CSE): Likewise.\n\t* config/frv/frv.h (NO_FUNCTION_CSE): Likewise.\n\t* config/h8300/h8300.h (NO_FUNCTION_CSE): Likewise.\n\t* config/i386/i386.h (NO_FUNCTION_CSE): Likewise.\n\t* config/ia64/ia64.h (NO_FUNCTION_CSE): Likewise.\n\t* config/lm32/lm32.h (enum reg_class) (NO_FUNCTION_CSE):\n\t* Likewise.\n\t* config/m32r/m32r.h (NO_FUNCTION_CSE): Likewise.\n\t* config/mep/mep.h (NO_FUNCTION_CSE): Likewise.\n\t* config/mn10300/mn10300.h (NO_FUNCTION_CSE): Likewise.\n\t* config/nds32/nds32.h (NO_FUNCTION_CSE): Likewise.\n\t* config/nios2/nios2.h (NO_FUNCTION_CSE): Likewise.\n\t* config/pa/pa.h (NO_FUNCTION_CSE): Likewise.\n\t* config/rs6000/rs6000.h (NO_FUNCTION_CSE): Likewise.\n\t* config/s390/s390.h (NO_FUNCTION_CSE): Likewise.\n\t* config/sparc/sparc.h (NO_FUNCTION_CSE): Likewise.\n\t* config/spu/spu.h (NO_FUNCTION_CSE): Likewise.\n\t* config/stormy16/stormy16.h (NO_FUNCTION_CSE): Likewise.\n\t* config/v850/v850.h (NO_FUNCTION_CSE): Likewise.\n\t* defaults.h (NO_FUNCTION_CSE): Provide default definition to 0.\n\t* doc/tm.texi: Regenerate.\n\t* doc/tm.texi.in: Document NO_FUNCTION_CSE is always defined to\n\teither true or false.\n\nFrom-SVN: r222501", "tree": {"sha": "33dfd27e216a0a6a2dfc72f106c39b63a84c984b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/33dfd27e216a0a6a2dfc72f106c39b63a84c984b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e8552c2eed65031f384bf31191638d8bfc9485a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e8552c2eed65031f384bf31191638d8bfc9485a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e8552c2eed65031f384bf31191638d8bfc9485a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e8552c2eed65031f384bf31191638d8bfc9485a/comments", "author": null, "committer": null, "parents": [{"sha": "e4846be7ddbd0a4e2c703df0d1073b67d872cd5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4846be7ddbd0a4e2c703df0d1073b67d872cd5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4846be7ddbd0a4e2c703df0d1073b67d872cd5f"}], "stats": {"total": 92, "additions": 62, "deletions": 30}, "files": [{"sha": "301a63b5c54cd4e5b547bd3f7367cb9c54a04fbe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e8552c2eed65031f384bf31191638d8bfc9485a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e8552c2eed65031f384bf31191638d8bfc9485a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1e8552c2eed65031f384bf31191638d8bfc9485a", "patch": "@@ -1,3 +1,35 @@\n+2015-04-27  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n+\n+\t* calls.c (prepare_call_address): Remove ifdef NO_FUNCTION_CSE.\n+\t* cse.c (fold_rtx): Likewise.\n+\t* config/alpha/alpha.h (NO_FUNCTION_CSE): Define to 1.\n+\t* config/arc/arc.h (NO_FUNCTION_CSE): Likewise.\n+\t* config/avr/avr.h (NO_FUNCTION_CSE): Likewise.\n+\t* config/cr16/cr16.h (NO_FUNCTION_CSE): Likewise.\n+\t* config/epiphany/epiphany.h (NO_FUNCTION_CSE): Likewise.\n+\t* config/frv/frv.h (NO_FUNCTION_CSE): Likewise.\n+\t* config/h8300/h8300.h (NO_FUNCTION_CSE): Likewise.\n+\t* config/i386/i386.h (NO_FUNCTION_CSE): Likewise.\n+\t* config/ia64/ia64.h (NO_FUNCTION_CSE): Likewise.\n+\t* config/lm32/lm32.h (enum reg_class) (NO_FUNCTION_CSE):\n+\t* Likewise.\n+\t* config/m32r/m32r.h (NO_FUNCTION_CSE): Likewise.\n+\t* config/mep/mep.h (NO_FUNCTION_CSE): Likewise.\n+\t* config/mn10300/mn10300.h (NO_FUNCTION_CSE): Likewise.\n+\t* config/nds32/nds32.h (NO_FUNCTION_CSE): Likewise.\n+\t* config/nios2/nios2.h (NO_FUNCTION_CSE): Likewise.\n+\t* config/pa/pa.h (NO_FUNCTION_CSE): Likewise.\n+\t* config/rs6000/rs6000.h (NO_FUNCTION_CSE): Likewise.\n+\t* config/s390/s390.h (NO_FUNCTION_CSE): Likewise.\n+\t* config/sparc/sparc.h (NO_FUNCTION_CSE): Likewise.\n+\t* config/spu/spu.h (NO_FUNCTION_CSE): Likewise.\n+\t* config/stormy16/stormy16.h (NO_FUNCTION_CSE): Likewise.\n+\t* config/v850/v850.h (NO_FUNCTION_CSE): Likewise.\n+\t* defaults.h (NO_FUNCTION_CSE): Provide default definition to 0.\n+\t* doc/tm.texi: Regenerate.\n+\t* doc/tm.texi.in: Document NO_FUNCTION_CSE is always defined to\n+\teither true or false.\n+\n 2015-04-27  Jeff Law  <law@redhat.com>\n \n \tPR tree-optimization/65217"}, {"sha": "a6cd33b32a96bd51a083a123b081e889b20dd6a9", "filename": "gcc/calls.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e8552c2eed65031f384bf31191638d8bfc9485a/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e8552c2eed65031f384bf31191638d8bfc9485a/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=1e8552c2eed65031f384bf31191638d8bfc9485a", "patch": "@@ -227,10 +227,8 @@ prepare_call_address (tree fndecl_or_type, rtx funexp, rtx static_chain_value,\n \t      : memory_address (FUNCTION_MODE, funexp));\n   else if (! sibcallp)\n     {\n-#ifndef NO_FUNCTION_CSE\n-      if (optimize && ! flag_no_function_cse)\n+      if (!NO_FUNCTION_CSE && optimize && ! flag_no_function_cse)\n \tfunexp = force_reg (Pmode, funexp);\n-#endif\n     }\n \n   if (static_chain_value != 0"}, {"sha": "fb3849a6b801f2da6581d7319fbe8ede83075fae", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e8552c2eed65031f384bf31191638d8bfc9485a/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e8552c2eed65031f384bf31191638d8bfc9485a/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=1e8552c2eed65031f384bf31191638d8bfc9485a", "patch": "@@ -933,7 +933,7 @@ do {\t\t\t\t\t\t\t\t\t     \\\n    then copy it into a register, thus actually letting the address be\n    cse'ed.  */\n \n-#define NO_FUNCTION_CSE\n+#define NO_FUNCTION_CSE 1\n \n /* Define this to be nonzero if shift instructions ignore all but the low-order\n    few bits.  */"}, {"sha": "66965b0f66c7928beca43d6e356d566d1b0a1c2b", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e8552c2eed65031f384bf31191638d8bfc9485a/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e8552c2eed65031f384bf31191638d8bfc9485a/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=1e8552c2eed65031f384bf31191638d8bfc9485a", "patch": "@@ -1108,7 +1108,7 @@ arc_select_cc_mode (OP, X, Y)\n /* Define this macro if it is as good or better to call a constant\n    function address than to call an address kept in a register.  */\n /* On the ARC, calling through registers is slow.  */\n-#define NO_FUNCTION_CSE\n+#define NO_FUNCTION_CSE 1\n \n /* Section selection.  */\n /* WARNING: These section names also appear in dwarfout.c.  */"}, {"sha": "d8bee773c6361591373e843a3ecee5004c370769", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e8552c2eed65031f384bf31191638d8bfc9485a/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e8552c2eed65031f384bf31191638d8bfc9485a/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=1e8552c2eed65031f384bf31191638d8bfc9485a", "patch": "@@ -362,7 +362,7 @@ typedef struct avr_args\n \n #define SLOW_BYTE_ACCESS 0\n \n-#define NO_FUNCTION_CSE\n+#define NO_FUNCTION_CSE 1\n \n #define REGISTER_TARGET_PRAGMAS()                                       \\\n   do {                                                                  \\"}, {"sha": "e5df6f95330121904af317acaaa8032fd5869221", "filename": "gcc/config/cr16/cr16.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e8552c2eed65031f384bf31191638d8bfc9485a/gcc%2Fconfig%2Fcr16%2Fcr16.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e8552c2eed65031f384bf31191638d8bfc9485a/gcc%2Fconfig%2Fcr16%2Fcr16.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcr16%2Fcr16.h?ref=1e8552c2eed65031f384bf31191638d8bfc9485a", "patch": "@@ -467,7 +467,7 @@ struct cumulative_args\n \n /* It is as good or better to call a constant function address than to\n    call an address kept in a register.  */\n-#define NO_FUNCTION_CSE\n+#define NO_FUNCTION_CSE 1\n \n /* Dividing the output into sections.  */\n "}, {"sha": "dab368c9cce070e08f4666d40e7a6a7e510a3363", "filename": "gcc/config/epiphany/epiphany.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e8552c2eed65031f384bf31191638d8bfc9485a/gcc%2Fconfig%2Fepiphany%2Fepiphany.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e8552c2eed65031f384bf31191638d8bfc9485a/gcc%2Fconfig%2Fepiphany%2Fepiphany.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fepiphany.h?ref=1e8552c2eed65031f384bf31191638d8bfc9485a", "patch": "@@ -692,7 +692,7 @@ typedef struct GTY (()) machine_function\n /* Define this macro if it is as good or better to call a constant\n    function address than to call an address kept in a register.  */\n /* On the EPIPHANY, calling through registers is slow.  */\n-#define NO_FUNCTION_CSE\n+#define NO_FUNCTION_CSE 1\n \f\n /* Section selection.  */\n /* WARNING: These section names also appear in dwarf2out.c.  */"}, {"sha": "394572c1423d5e44d832d9f0deaa316afb85ba00", "filename": "gcc/config/frv/frv.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e8552c2eed65031f384bf31191638d8bfc9485a/gcc%2Fconfig%2Ffrv%2Ffrv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e8552c2eed65031f384bf31191638d8bfc9485a/gcc%2Fconfig%2Ffrv%2Ffrv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.h?ref=1e8552c2eed65031f384bf31191638d8bfc9485a", "patch": "@@ -1539,7 +1539,7 @@ __asm__(\"\\n\"\t\t\t\t\t\t\t\t\\\n \n /* Define this macro if it is as good or better to call a constant function\n    address than to call an address kept in a register.  */\n-#define NO_FUNCTION_CSE\n+#define NO_FUNCTION_CSE 1\n \n \f\n /* Dividing the output into sections.  */"}, {"sha": "a17d7d56621865f6661947bde8440f4fb21f078a", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e8552c2eed65031f384bf31191638d8bfc9485a/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e8552c2eed65031f384bf31191638d8bfc9485a/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=1e8552c2eed65031f384bf31191638d8bfc9485a", "patch": "@@ -136,7 +136,7 @@ extern const char * const *h8_reg_names;\n    Calls through a register are cheaper than calls to named\n    functions; however, the register pressure this causes makes\n    CSEing of function addresses generally a lose.  */\n-#define NO_FUNCTION_CSE\n+#define NO_FUNCTION_CSE 1\n \f\n /* Target machine storage layout */\n "}, {"sha": "6901e2aae8fc740caa85f6efa7d3002953902a94", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e8552c2eed65031f384bf31191638d8bfc9485a/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e8552c2eed65031f384bf31191638d8bfc9485a/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=1e8552c2eed65031f384bf31191638d8bfc9485a", "patch": "@@ -2017,7 +2017,7 @@ do {\t\t\t\t\t\t\t\\\n    Desirable on the 386 because a CALL with a constant address is\n    faster than one with a register address.  */\n \n-#define NO_FUNCTION_CSE\n+#define NO_FUNCTION_CSE 1\n \f\n /* Given a comparison code (EQ, NE, etc.) and the first operand of a COMPARE,\n    return the mode to be used for the comparison."}, {"sha": "943faf9e0a966e9ab0b3494e3af85e685ad1f15e", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e8552c2eed65031f384bf31191638d8bfc9485a/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e8552c2eed65031f384bf31191638d8bfc9485a/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=1e8552c2eed65031f384bf31191638d8bfc9485a", "patch": "@@ -1178,7 +1178,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n    Indirect function calls are more expensive that direct function calls, so\n    don't cse function addresses.  */\n \n-#define NO_FUNCTION_CSE\n+#define NO_FUNCTION_CSE 1\n \n \f\n /* Dividing the output into sections.  */"}, {"sha": "04ff7c836a41238e55b9c04c4dfe4855671174f0", "filename": "gcc/config/lm32/lm32.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e8552c2eed65031f384bf31191638d8bfc9485a/gcc%2Fconfig%2Flm32%2Flm32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e8552c2eed65031f384bf31191638d8bfc9485a/gcc%2Fconfig%2Flm32%2Flm32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flm32%2Flm32.h?ref=1e8552c2eed65031f384bf31191638d8bfc9485a", "patch": "@@ -354,7 +354,7 @@ enum reg_class\n \n #define SLOW_BYTE_ACCESS 1\n \n-#define NO_FUNCTION_CSE\n+#define NO_FUNCTION_CSE 1\n \n #define BRANCH_COST(speed_p, predictable_p) 4\n "}, {"sha": "ee0c447187a5642a04206fe8cff60299af683cdf", "filename": "gcc/config/m32r/m32r.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e8552c2eed65031f384bf31191638d8bfc9485a/gcc%2Fconfig%2Fm32r%2Fm32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e8552c2eed65031f384bf31191638d8bfc9485a/gcc%2Fconfig%2Fm32r%2Fm32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.h?ref=1e8552c2eed65031f384bf31191638d8bfc9485a", "patch": "@@ -767,7 +767,7 @@ L2:     .word STATIC\n \n /* Define this macro if it is as good or better to call a constant\n    function address than to call an address kept in a register.  */\n-#define NO_FUNCTION_CSE\n+#define NO_FUNCTION_CSE 1\n \f\n /* Section selection.  */\n "}, {"sha": "861189d54200ca387114049e7e4fe446af145162", "filename": "gcc/config/mep/mep.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e8552c2eed65031f384bf31191638d8bfc9485a/gcc%2Fconfig%2Fmep%2Fmep.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e8552c2eed65031f384bf31191638d8bfc9485a/gcc%2Fconfig%2Fmep%2Fmep.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmep%2Fmep.h?ref=1e8552c2eed65031f384bf31191638d8bfc9485a", "patch": "@@ -554,7 +554,7 @@ typedef struct\n \n /* Define this macro if it is as good or better to call a constant function\n    address than to call an address kept in a register.  */\n-#define NO_FUNCTION_CSE \n+#define NO_FUNCTION_CSE 1\n \n \f\n #define TEXT_SECTION_ASM_OP \"\\t.text\\n\\t.core\""}, {"sha": "d41dc4e0aa553ffc67dac00830658faf37df0e98", "filename": "gcc/config/mn10300/mn10300.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e8552c2eed65031f384bf31191638d8bfc9485a/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e8552c2eed65031f384bf31191638d8bfc9485a/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.h?ref=1e8552c2eed65031f384bf31191638d8bfc9485a", "patch": "@@ -579,7 +579,7 @@ do {\t\t\t\t\t\t\t\t\t     \\\n    than accessing full words.  */\n #define SLOW_BYTE_ACCESS 1\n \n-#define NO_FUNCTION_CSE\n+#define NO_FUNCTION_CSE 1\n \n /* According expr.c, a value of around 6 should minimize code size, and\n    for the MN10300 series, that's our primary concern.  */"}, {"sha": "963b3a252a5ba6afacacbe00185e858b945bb99b", "filename": "gcc/config/nds32/nds32.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e8552c2eed65031f384bf31191638d8bfc9485a/gcc%2Fconfig%2Fnds32%2Fnds32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e8552c2eed65031f384bf31191638d8bfc9485a/gcc%2Fconfig%2Fnds32%2Fnds32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.h?ref=1e8552c2eed65031f384bf31191638d8bfc9485a", "patch": "@@ -831,7 +831,7 @@ enum reg_class\n \n #define SLOW_BYTE_ACCESS 1\n \n-#define NO_FUNCTION_CSE\n+#define NO_FUNCTION_CSE 1\n \n \f\n /* Adjusting the Instruction Scheduler.  */"}, {"sha": "193845be297307336459c4c28135819a379dc7bb", "filename": "gcc/config/nios2/nios2.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e8552c2eed65031f384bf31191638d8bfc9485a/gcc%2Fconfig%2Fnios2%2Fnios2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e8552c2eed65031f384bf31191638d8bfc9485a/gcc%2Fconfig%2Fnios2%2Fnios2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnios2%2Fnios2.h?ref=1e8552c2eed65031f384bf31191638d8bfc9485a", "patch": "@@ -306,7 +306,7 @@ typedef struct nios2_args\n \n /* It is as good to call a constant function address as to call an address\n    kept in a register.  */\n-#define NO_FUNCTION_CSE\n+#define NO_FUNCTION_CSE 1\n \n /* Position independent code.  */\n "}, {"sha": "6c48883d26d8b250cfd8bcb6d1e844132d0eaa7a", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e8552c2eed65031f384bf31191638d8bfc9485a/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e8552c2eed65031f384bf31191638d8bfc9485a/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=1e8552c2eed65031f384bf31191638d8bfc9485a", "patch": "@@ -1048,7 +1048,7 @@ do {\t\t\t\t\t\t\t\t\t     \\\n    shouldn't be put through pseudo regs where they can be cse'd.\n    Desirable on machines where ordinary constants are expensive\n    but a CALL with constant address is cheap.  */\n-#define NO_FUNCTION_CSE\n+#define NO_FUNCTION_CSE 1\n \n /* Define this to be nonzero if shift instructions ignore all but the low-order\n    few bits.  */"}, {"sha": "c93c3ce18847d2a2ebe8c3070da6d0e8c8b3ce25", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e8552c2eed65031f384bf31191638d8bfc9485a/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e8552c2eed65031f384bf31191638d8bfc9485a/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=1e8552c2eed65031f384bf31191638d8bfc9485a", "patch": "@@ -2080,7 +2080,7 @@ extern unsigned rs6000_pmode;\n    shouldn't be put through pseudo regs where they can be cse'd.\n    Desirable on machines where ordinary constants are expensive\n    but a CALL with constant address is cheap.  */\n-#define NO_FUNCTION_CSE\n+#define NO_FUNCTION_CSE 1\n \n /* Define this to be nonzero if shift instructions ignore all but the low-order\n    few bits."}, {"sha": "f8874098381d2b4763d54e9832745b3241e49ff2", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e8552c2eed65031f384bf31191638d8bfc9485a/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e8552c2eed65031f384bf31191638d8bfc9485a/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=1e8552c2eed65031f384bf31191638d8bfc9485a", "patch": "@@ -745,7 +745,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define MAX_MOVE_MAX 16\n \n /* Don't perform CSE on function addresses.  */\n-#define NO_FUNCTION_CSE\n+#define NO_FUNCTION_CSE 1\n \n /* This value is used in tree-sra to decide whether it might benefical\n    to split a struct move into several word-size moves.  For S/390"}, {"sha": "9b64ff4f9bb1ffd348771058632173a0e5525048", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e8552c2eed65031f384bf31191638d8bfc9485a/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e8552c2eed65031f384bf31191638d8bfc9485a/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=1e8552c2eed65031f384bf31191638d8bfc9485a", "patch": "@@ -1518,7 +1518,7 @@ do {\t\t\t\t\t\t\t\t\t   \\\n    shouldn't be put through pseudo regs where they can be cse'd.\n    Desirable on machines where ordinary constants are expensive\n    but a CALL with constant address is cheap.  */\n-#define NO_FUNCTION_CSE\n+#define NO_FUNCTION_CSE 1\n \n /* The _Q_* comparison libcalls return booleans.  */\n #define FLOAT_LIB_COMPARE_RETURNS_BOOL(MODE, COMPARISON) ((MODE) == TFmode)"}, {"sha": "24d8047f0e67b4a9b7a7e79c19c6b4ea3cc2732d", "filename": "gcc/config/spu/spu.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e8552c2eed65031f384bf31191638d8bfc9485a/gcc%2Fconfig%2Fspu%2Fspu.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e8552c2eed65031f384bf31191638d8bfc9485a/gcc%2Fconfig%2Fspu%2Fspu.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.h?ref=1e8552c2eed65031f384bf31191638d8bfc9485a", "patch": "@@ -407,7 +407,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n #define MOVE_RATIO(speed) ((speed)? 32 : 4)\n \n-#define NO_FUNCTION_CSE\n+#define NO_FUNCTION_CSE 1\n \n \f\n /* Sections */"}, {"sha": "38a2a0676a6a80997d00bd45253938f4e6a1c2af", "filename": "gcc/config/stormy16/stormy16.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e8552c2eed65031f384bf31191638d8bfc9485a/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e8552c2eed65031f384bf31191638d8bfc9485a/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.h?ref=1e8552c2eed65031f384bf31191638d8bfc9485a", "patch": "@@ -345,7 +345,7 @@ enum reg_class\n \n #define SLOW_BYTE_ACCESS 0\n \n-#define NO_FUNCTION_CSE\n+#define NO_FUNCTION_CSE 1\n \n \f\n /* Dividing the output into sections.  */"}, {"sha": "2f0118c4fcc3f2777fb812d939331cd692fe5bb6", "filename": "gcc/config/v850/v850.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e8552c2eed65031f384bf31191638d8bfc9485a/gcc%2Fconfig%2Fv850%2Fv850.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e8552c2eed65031f384bf31191638d8bfc9485a/gcc%2Fconfig%2Fv850%2Fv850.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.h?ref=1e8552c2eed65031f384bf31191638d8bfc9485a", "patch": "@@ -710,7 +710,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n /* Indirect calls are expensive, never turn a direct call\n    into an indirect call.  */\n-#define NO_FUNCTION_CSE\n+#define NO_FUNCTION_CSE 1\n \n /* The four different data regions on the v850.  */\n typedef enum "}, {"sha": "15eb33e0936d084c1e366d6c4ebfac8a4e91e3f3", "filename": "gcc/cse.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e8552c2eed65031f384bf31191638d8bfc9485a/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e8552c2eed65031f384bf31191638d8bfc9485a/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=1e8552c2eed65031f384bf31191638d8bfc9485a", "patch": "@@ -3183,12 +3183,10 @@ fold_rtx (rtx x, rtx_insn *insn)\n \t}\n       return x;\n \n-#ifdef NO_FUNCTION_CSE\n     case CALL:\n-      if (CONSTANT_P (XEXP (XEXP (x, 0), 0)))\n+      if (NO_FUNCTION_CSE && CONSTANT_P (XEXP (XEXP (x, 0), 0)))\n \treturn x;\n       break;\n-#endif\n \n     /* Anything else goes through the loop below.  */\n     default:"}, {"sha": "4ae5d98ebbcc823f12703b07536b24ecfc395568", "filename": "gcc/defaults.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e8552c2eed65031f384bf31191638d8bfc9485a/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e8552c2eed65031f384bf31191638d8bfc9485a/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=1e8552c2eed65031f384bf31191638d8bfc9485a", "patch": "@@ -1209,6 +1209,10 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define INSN_REFERENCES_ARE_DELAYED(INSN) false\n #endif\n \n+#ifndef NO_FUNCTION_CSE\n+#define NO_FUNCTION_CSE false\n+#endif\n+\n #ifdef GCC_INSN_FLAGS_H\n /* Dependent default target macro definitions\n "}, {"sha": "619d7e0f10d4cb7b574759f2fb3c1bbffd26331e", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e8552c2eed65031f384bf31191638d8bfc9485a/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e8552c2eed65031f384bf31191638d8bfc9485a/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=1e8552c2eed65031f384bf31191638d8bfc9485a", "patch": "@@ -6344,7 +6344,7 @@ thing to use for a given mode.  Defaults to the value of\n @end defmac\n \n @defmac NO_FUNCTION_CSE\n-Define this macro if it is as good or better to call a constant\n+Define this macro to be true if it is as good or better to call a constant\n function address than to call an address kept in a register.\n @end defmac\n "}, {"sha": "6ff7aed9293d6aa92060ed24f632bbcbbf6cf846", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e8552c2eed65031f384bf31191638d8bfc9485a/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e8552c2eed65031f384bf31191638d8bfc9485a/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=1e8552c2eed65031f384bf31191638d8bfc9485a", "patch": "@@ -4708,7 +4708,7 @@ thing to use for a given mode.  Defaults to the value of\n @end defmac\n \n @defmac NO_FUNCTION_CSE\n-Define this macro if it is as good or better to call a constant\n+Define this macro to be true if it is as good or better to call a constant\n function address than to call an address kept in a register.\n @end defmac\n "}]}