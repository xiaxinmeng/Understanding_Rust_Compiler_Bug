{"sha": "2cae56bd61a048b0fac5c2829283744abc44c545", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmNhZTU2YmQ2MWEwNDhiMGZhYzVjMjgyOTI4Mzc0NGFiYzQ0YzU0NQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-10-22T21:48:39Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-10-22T21:48:39Z"}, "message": "Remove redundant std::allocator members for C++20\n\nC++20 removes a number of std::allocator members that have correct\ndefaults provided by std::allocator_traits, so aren't needed.\n\nSeveral extensions including __gnu_cxx::hash_map and tr1 containers are\nno longer usable with std::allocator in C++20 mode. They need to be\nupdated to use __gnu_cxx::__alloc_traits in a follow-up patch.\n\n\t* include/bits/alloc_traits.h\n\t(allocator_traits<allocator<T>>::allocate): Ignore hint for C++20.\n\t(allocator_traits<allocator<T>>::construct): Perform placement new\n\tdirectly for C++20, instead of calling allocator<T>::construct.\n\t(allocator_traits<allocator<T>>::destroy): Call destructor directly\n\tfor C++20, instead of calling allocator<T>::destroy.\n\t(allocator_traits<allocator<T>>::max_size): Return value directly\n\tfor C++20, instead of calling std::allocator<T>::max_size().\n\t(__do_alloc_on_copy, __do_alloc_on_move, __do_alloc_on_swap): Do not\n\tdefine for C++17 and up.\n\t(__alloc_on_copy, __alloc_on_move, __alloc_on_swap): Use if-constexpr\n\tfor C++17 and up, instead of tag dispatching.\n\t* include/bits/allocator.h (allocator<void>): Remove for C++20.\n\t(allocator::pointer, allocator::const_pointer, allocator::reference)\n\t(allocator::const_reference, allocator::rebind): Remove for C++20.\n\t* include/bits/basic_string.h (basic_string): Use __alloc_traits to\n\trebind allocator.\n\t* include/bits/memoryfwd.h (allocator<void>): Remove for C++20.\n\t* include/ext/debug_allocator.h: Use __alloc_traits for rebinding.\n\t* include/ext/malloc_allocator.h (malloc_allocator::~malloc_allocator)\n\t(malloc_allocator::pointer, malloc_allocator::const_pointer)\n\t(malloc_allocator::reference, malloc_allocator::const_reference)\n\t(malloc_allocator::rebind, malloc_allocator::max_size)\n\t(malloc_allocator::construct, malloc_allocator::destroy): Do not\n\tdefine for C++20.\n\t(malloc_allocator::_M_max_size): Define new function.\n\t* include/ext/new_allocator.h (new_allocator::~new_allocator)\n\t(new_allocator::pointer, new_allocator::const_pointer)\n\t(new_allocator::reference, new_allocator::const_reference)\n\t(new_allocator::rebind, new_allocator::max_size)\n\t(new_allocator::construct, new_allocator::destroy): Do not\n\tdefine for C++20.\n\t(new_allocator::_M_max_size): Define new function.\n\t* include/ext/rc_string_base.h (__rc_string_base::_Rep): Use\n\t__alloc_traits to rebind allocator.\n\t* include/ext/rope (_Rope_rep_base, _Rope_base): Likewise.\n\t(rope::rope(CharT, const allocator_type&)): Use __alloc_traits\n\tto construct character.\n\t* include/ext/slist (_Slist_base): Use __alloc_traits to rebind\n\tallocator.\n\t* include/ext/sso_string_base.h (__sso_string_base::_M_max_size):\n\tUse __alloc_traits.\n\t* include/ext/throw_allocator.h (throw_allocator): Do not use optional\n\tmembers of std::allocator, use __alloc_traits members instead.\n\t* include/ext/vstring.h (__versa_string): Use __alloc_traits.\n\t* include/ext/vstring_util.h (__vstring_utility): Likewise.\n\t* include/std/memory: Include <bits/alloc_traits.h>.\n\t* testsuite/20_util/allocator/8230.cc: Use __gnu_test::max_size.\n\t* testsuite/20_util/allocator/rebind_c++20.cc: New test.\n\t* testsuite/20_util/allocator/requirements/typedefs.cc: Do not check\n\tfor pointer, const_pointer, reference, const_reference or rebind in\n\tC++20.\n\t* testsuite/20_util/allocator/requirements/typedefs_c++20.cc: New test.\n\t* testsuite/23_containers/deque/capacity/29134.cc: Use\n\t__gnu_test::max_size.\n\t* testsuite/23_containers/forward_list/capacity/1.cc: Likewise.\n\t* testsuite/23_containers/list/capacity/29134.cc: Likewise.\n\t* testsuite/23_containers/map/capacity/29134.cc: Likewise.\n\t* testsuite/23_containers/multimap/capacity/29134.cc: Likewise.\n\t* testsuite/23_containers/multiset/capacity/29134.cc: Likewise.\n\t* testsuite/23_containers/set/capacity/29134.cc: Likewise.\n\t* testsuite/23_containers/vector/capacity/29134.cc: Likewise.\n\t* testsuite/ext/malloc_allocator/variadic_construct.cc: Do not run\n\ttest for C++20.\n\t* testsuite/ext/new_allocator/variadic_construct.cc: Likewise.\n\t* testsuite/ext/vstring/capacity/29134.cc: Use __gnu_test::max_size.\n\t* testsuite/util/replacement_memory_operators.h: Do not assume\n\tAlloc::pointer exists.\n\t* testsuite/util/testsuite_allocator.h (__gnu_test::max_size): Define\n\thelper to call max_size for any allocator.\n\nFrom-SVN: r277300", "tree": {"sha": "e00cedcecf5fb643b0da4dbfa293969aaee8815e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e00cedcecf5fb643b0da4dbfa293969aaee8815e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2cae56bd61a048b0fac5c2829283744abc44c545", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cae56bd61a048b0fac5c2829283744abc44c545", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2cae56bd61a048b0fac5c2829283744abc44c545", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cae56bd61a048b0fac5c2829283744abc44c545/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51940760d7158aeb8d6747c9ee0b784d6869c7ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51940760d7158aeb8d6747c9ee0b784d6869c7ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51940760d7158aeb8d6747c9ee0b784d6869c7ef"}], "stats": {"total": 448, "additions": 370, "deletions": 78}, "files": [{"sha": "f5d2a0189e4320e4f0dfd6b1346d85b2ba38d8ad", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cae56bd61a048b0fac5c2829283744abc44c545/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cae56bd61a048b0fac5c2829283744abc44c545/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2cae56bd61a048b0fac5c2829283744abc44c545", "patch": "@@ -1,3 +1,76 @@\n+2019-10-22  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/alloc_traits.h\n+\t(allocator_traits<allocator<T>>::allocate): Ignore hint for C++20.\n+\t(allocator_traits<allocator<T>>::construct): Perform placement new\n+\tdirectly for C++20, instead of calling allocator<T>::construct.\n+\t(allocator_traits<allocator<T>>::destroy): Call destructor directly\n+\tfor C++20, instead of calling allocator<T>::destroy.\n+\t(allocator_traits<allocator<T>>::max_size): Return value directly\n+\tfor C++20, instead of calling std::allocator<T>::max_size().\n+\t(__do_alloc_on_copy, __do_alloc_on_move, __do_alloc_on_swap): Do not\n+\tdefine for C++17 and up.\n+\t(__alloc_on_copy, __alloc_on_move, __alloc_on_swap): Use if-constexpr\n+\tfor C++17 and up, instead of tag dispatching.\n+\t* include/bits/allocator.h (allocator<void>): Remove for C++20.\n+\t(allocator::pointer, allocator::const_pointer, allocator::reference)\n+\t(allocator::const_reference, allocator::rebind): Remove for C++20.\n+\t* include/bits/basic_string.h (basic_string): Use __alloc_traits to\n+\trebind allocator.\n+\t* include/bits/memoryfwd.h (allocator<void>): Remove for C++20.\n+\t* include/ext/debug_allocator.h: Use __alloc_traits for rebinding.\n+\t* include/ext/malloc_allocator.h (malloc_allocator::~malloc_allocator)\n+\t(malloc_allocator::pointer, malloc_allocator::const_pointer)\n+\t(malloc_allocator::reference, malloc_allocator::const_reference)\n+\t(malloc_allocator::rebind, malloc_allocator::max_size)\n+\t(malloc_allocator::construct, malloc_allocator::destroy): Do not\n+\tdefine for C++20.\n+\t(malloc_allocator::_M_max_size): Define new function.\n+\t* include/ext/new_allocator.h (new_allocator::~new_allocator)\n+\t(new_allocator::pointer, new_allocator::const_pointer)\n+\t(new_allocator::reference, new_allocator::const_reference)\n+\t(new_allocator::rebind, new_allocator::max_size)\n+\t(new_allocator::construct, new_allocator::destroy): Do not\n+\tdefine for C++20.\n+\t(new_allocator::_M_max_size): Define new function.\n+\t* include/ext/rc_string_base.h (__rc_string_base::_Rep): Use\n+\t__alloc_traits to rebind allocator.\n+\t* include/ext/rope (_Rope_rep_base, _Rope_base): Likewise.\n+\t(rope::rope(CharT, const allocator_type&)): Use __alloc_traits\n+\tto construct character.\n+\t* include/ext/slist (_Slist_base): Use __alloc_traits to rebind\n+\tallocator.\n+\t* include/ext/sso_string_base.h (__sso_string_base::_M_max_size):\n+\tUse __alloc_traits.\n+\t* include/ext/throw_allocator.h (throw_allocator): Do not use optional\n+\tmembers of std::allocator, use __alloc_traits members instead.\n+\t* include/ext/vstring.h (__versa_string): Use __alloc_traits.\n+\t* include/ext/vstring_util.h (__vstring_utility): Likewise.\n+\t* include/std/memory: Include <bits/alloc_traits.h>.\n+\t* testsuite/20_util/allocator/8230.cc: Use __gnu_test::max_size.\n+\t* testsuite/20_util/allocator/rebind_c++20.cc: New test.\n+\t* testsuite/20_util/allocator/requirements/typedefs.cc: Do not check\n+\tfor pointer, const_pointer, reference, const_reference or rebind in\n+\tC++20.\n+\t* testsuite/20_util/allocator/requirements/typedefs_c++20.cc: New test.\n+\t* testsuite/23_containers/deque/capacity/29134.cc: Use\n+\t__gnu_test::max_size.\n+\t* testsuite/23_containers/forward_list/capacity/1.cc: Likewise.\n+\t* testsuite/23_containers/list/capacity/29134.cc: Likewise.\n+\t* testsuite/23_containers/map/capacity/29134.cc: Likewise.\n+\t* testsuite/23_containers/multimap/capacity/29134.cc: Likewise.\n+\t* testsuite/23_containers/multiset/capacity/29134.cc: Likewise.\n+\t* testsuite/23_containers/set/capacity/29134.cc: Likewise.\n+\t* testsuite/23_containers/vector/capacity/29134.cc: Likewise.\n+\t* testsuite/ext/malloc_allocator/variadic_construct.cc: Do not run\n+\ttest for C++20.\n+\t* testsuite/ext/new_allocator/variadic_construct.cc: Likewise.\n+\t* testsuite/ext/vstring/capacity/29134.cc: Use __gnu_test::max_size.\n+\t* testsuite/util/replacement_memory_operators.h: Do not assume\n+\tAlloc::pointer exists.\n+\t* testsuite/util/testsuite_allocator.h (__gnu_test::max_size): Define\n+\thelper to call max_size for any allocator.\n+\n 2019-10-22  Andreas Schwab  <schwab@suse.de>\n \n \t* config/abi/post/aarch64-linux-gnu/baseline_symbols.txt: Update."}, {"sha": "62bbf0b2e317bd5f8a899082b9e5b60735974e8f", "filename": "libstdc++-v3/include/bits/alloc_traits.h", "status": "modified", "additions": 55, "deletions": 7, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cae56bd61a048b0fac5c2829283744abc44c545/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falloc_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cae56bd61a048b0fac5c2829283744abc44c545/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falloc_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falloc_traits.h?ref=2cae56bd61a048b0fac5c2829283744abc44c545", "patch": "@@ -393,6 +393,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       /// The allocator type\n       using allocator_type = allocator<_Tp>;\n+\n       /// The allocated type\n       using value_type = _Tp;\n \n@@ -455,7 +456,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       */\n       _GLIBCXX_NODISCARD static pointer\n       allocate(allocator_type& __a, size_type __n, const_void_pointer __hint)\n-      { return __a.allocate(__n, __hint); }\n+      {\n+#if __cplusplus <= 201703L\n+\treturn __a.allocate(__n, __hint);\n+#else\n+\treturn __a.allocate(__n);\n+#endif\n+      }\n \n       /**\n        *  @brief  Deallocate memory.\n@@ -480,8 +487,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template<typename _Up, typename... _Args>\n \tstatic void\n \tconstruct(allocator_type& __a, _Up* __p, _Args&&... __args)\n-\tnoexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))\n-\t{ __a.construct(__p, std::forward<_Args>(__args)...); }\n+\tnoexcept(noexcept(::new((void*)__p) _Up(std::forward<_Args>(__args)...)))\n+\t{\n+#if __cplusplus <= 201703L\n+\t  __a.construct(__p, std::forward<_Args>(__args)...);\n+#else\n+\t  ::new((void*)__p) _Up(std::forward<_Args>(__args)...);\n+#endif\n+\t}\n \n       /**\n        *  @brief  Destroy an object of type @a _Up\n@@ -493,8 +506,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template<typename _Up>\n \tstatic void\n \tdestroy(allocator_type& __a, _Up* __p)\n-\tnoexcept(noexcept(__a.destroy(__p)))\n-\t{ __a.destroy(__p); }\n+\tnoexcept(is_nothrow_destructible<_Up>::value)\n+\t{\n+#if __cplusplus <= 201703L\n+\t  __a.destroy(__p);\n+#else\n+\t  __p->~_Up();\n+#endif\n+\t}\n \n       /**\n        *  @brief  The maximum supported allocation size\n@@ -503,7 +522,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       */\n       static size_type\n       max_size(const allocator_type& __a) noexcept\n-      { return __a.max_size(); }\n+      {\n+#if __cplusplus <= 201703L\n+\treturn __a.max_size();\n+#else\n+\treturn size_t(-1) / sizeof(value_type);\n+#endif\n+      }\n \n       /**\n        *  @brief  Obtain an allocator to use when copying a container.\n@@ -515,7 +540,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { return __rhs; }\n     };\n \n-\n+#if __cplusplus < 201703L\n   template<typename _Alloc>\n     inline void\n     __do_alloc_on_copy(_Alloc& __one, const _Alloc& __two, true_type)\n@@ -525,13 +550,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline void\n     __do_alloc_on_copy(_Alloc&, const _Alloc&, false_type)\n     { }\n+#endif\n \n   template<typename _Alloc>\n     inline void __alloc_on_copy(_Alloc& __one, const _Alloc& __two)\n     {\n       typedef allocator_traits<_Alloc> __traits;\n       typedef typename __traits::propagate_on_container_copy_assignment __pocca;\n+#if __cplusplus >= 201703L\n+      if constexpr (__pocca::value)\n+\t__one = __two;\n+#else\n       __do_alloc_on_copy(__one, __two, __pocca());\n+#endif\n     }\n \n   template<typename _Alloc>\n@@ -541,22 +572,30 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return __traits::select_on_container_copy_construction(__a);\n     }\n \n+#if __cplusplus < 201703L\n   template<typename _Alloc>\n     inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)\n     { __one = std::move(__two); }\n \n   template<typename _Alloc>\n     inline void __do_alloc_on_move(_Alloc&, _Alloc&, false_type)\n     { }\n+#endif\n \n   template<typename _Alloc>\n     inline void __alloc_on_move(_Alloc& __one, _Alloc& __two)\n     {\n       typedef allocator_traits<_Alloc> __traits;\n       typedef typename __traits::propagate_on_container_move_assignment __pocma;\n+#if __cplusplus >= 201703L\n+      if constexpr (__pocma::value)\n+\t__one = std::move(__two);\n+#else\n       __do_alloc_on_move(__one, __two, __pocma());\n+#endif\n     }\n \n+#if __cplusplus < 201703L\n   template<typename _Alloc>\n     inline void __do_alloc_on_swap(_Alloc& __one, _Alloc& __two, true_type)\n     {\n@@ -567,13 +606,22 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Alloc>\n     inline void __do_alloc_on_swap(_Alloc&, _Alloc&, false_type)\n     { }\n+#endif\n \n   template<typename _Alloc>\n     inline void __alloc_on_swap(_Alloc& __one, _Alloc& __two)\n     {\n       typedef allocator_traits<_Alloc> __traits;\n       typedef typename __traits::propagate_on_container_swap __pocs;\n+#if __cplusplus >= 201703L\n+      if constexpr (__pocs::value)\n+\t{\n+\t  using std::swap;\n+\t  swap(__one, __two);\n+\t}\n+#else\n       __do_alloc_on_swap(__one, __two, __pocs());\n+#endif\n     }\n \n   template<typename _Alloc, typename _Tp,"}, {"sha": "62a40a17e3c6879591731805d8ce06a2f32af736", "filename": "libstdc++-v3/include/bits/allocator.h", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cae56bd61a048b0fac5c2829283744abc44c545/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cae56bd61a048b0fac5c2829283744abc44c545/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h?ref=2cae56bd61a048b0fac5c2829283744abc44c545", "patch": "@@ -63,6 +63,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @{\n    */\n \n+#if __cplusplus <= 201703L\n   /// allocator<void> specialization.\n   template<>\n     class allocator<void>\n@@ -97,8 +98,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tdestroy(_Up* __p)\n \tnoexcept(noexcept(__p->~_Up()))\n \t{ __p->~_Up(); }\n-#endif\n+#endif // C++11\n     };\n+#endif // ! C++20\n \n   /**\n    * @brief  The @a standard allocator, as per [20.4].\n@@ -111,18 +113,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp>\n     class allocator : public __allocator_base<_Tp>\n     {\n-   public:\n+    public:\n+      typedef _Tp        value_type;\n       typedef size_t     size_type;\n       typedef ptrdiff_t  difference_type;\n+#if __cplusplus <= 201703L\n       typedef _Tp*       pointer;\n       typedef const _Tp* const_pointer;\n       typedef _Tp&       reference;\n       typedef const _Tp& const_reference;\n-      typedef _Tp        value_type;\n \n       template<typename _Tp1>\n \tstruct rebind\n \t{ typedef allocator<_Tp1> other; };\n+#endif\n \n #if __cplusplus >= 201103L\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS"}, {"sha": "37e75b455d33cfb5437cb49c039bbbe19418bd75", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cae56bd61a048b0fac5c2829283744abc44c545/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cae56bd61a048b0fac5c2829283744abc44c545/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=2cae56bd61a048b0fac5c2829283744abc44c545", "patch": "@@ -3138,7 +3138,9 @@ _GLIBCXX_END_NAMESPACE_CXX11\n   template<typename _CharT, typename _Traits, typename _Alloc>\n     class basic_string\n     {\n-      typedef typename _Alloc::template rebind<_CharT>::other _CharT_alloc_type;\n+      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template\n+\trebind<_CharT>::other _CharT_alloc_type;\n+      typedef __gnu_cxx::__alloc_traits<_CharT_alloc_type> _CharT_alloc_traits;\n \n       // Types:\n     public:\n@@ -3154,8 +3156,8 @@ _GLIBCXX_END_NAMESPACE_CXX11\n       typedef value_type&\t\t\t\t    reference;\n       typedef const value_type&\t\t\t\t    const_reference;\n #endif\n-      typedef typename _CharT_alloc_type::pointer\t    pointer;\n-      typedef typename _CharT_alloc_type::const_pointer\t    const_pointer;\n+      typedef typename _CharT_alloc_traits::pointer\t    pointer;\n+      typedef typename _CharT_alloc_traits::const_pointer   const_pointer;\n       typedef __gnu_cxx::__normal_iterator<pointer, basic_string>  iterator;\n       typedef __gnu_cxx::__normal_iterator<const_pointer, basic_string>\n                                                             const_iterator;\n@@ -3191,7 +3193,8 @@ _GLIBCXX_END_NAMESPACE_CXX11\n       struct _Rep : _Rep_base\n       {\n \t// Types:\n-\ttypedef typename _Alloc::template rebind<char>::other _Raw_bytes_alloc;\n+\ttypedef typename __gnu_cxx::__alloc_traits<_Alloc>::template\n+\t  rebind<char>::other _Raw_bytes_alloc;\n \n \t// (Public) Data members:\n "}, {"sha": "d42eabeceb898b0aacc3f452202bc2070de51477", "filename": "libstdc++-v3/include/bits/memoryfwd.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cae56bd61a048b0fac5c2829283744abc44c545/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmemoryfwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cae56bd61a048b0fac5c2829283744abc44c545/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmemoryfwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmemoryfwd.h?ref=2cae56bd61a048b0fac5c2829283744abc44c545", "patch": "@@ -63,8 +63,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename>\n     class allocator;\n \n+#if __cplusplus <= 201703L\n   template<>\n     class allocator<void>;\n+#endif\n \n   /// Declare uses_allocator so it can be specialized in \\<queue\\> etc.\n   template<typename, typename>"}, {"sha": "b8e0e64d7bda607c9091964ce5d7cc94ba82d444", "filename": "libstdc++-v3/include/ext/debug_allocator.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cae56bd61a048b0fac5c2829283744abc44c545/libstdc%2B%2B-v3%2Finclude%2Fext%2Fdebug_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cae56bd61a048b0fac5c2829283744abc44c545/libstdc%2B%2B-v3%2Finclude%2Fext%2Fdebug_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fdebug_allocator.h?ref=2cae56bd61a048b0fac5c2829283744abc44c545", "patch": "@@ -89,7 +89,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _Alloc\t\t\t_M_allocator;\n \n       template<typename _Alloc2,\n-\t       typename = typename _Alloc2::template rebind<value_type>::other>\n+\t       typename = typename __alloc_traits<_Alloc2>::template\n+\t\t\t   rebind<value_type>::other>\n \tstruct __convertible\n \t{ };\n "}, {"sha": "cf6284080e8df7d969d432cba26b5b85bf5e7189", "filename": "libstdc++-v3/include/ext/malloc_allocator.h", "status": "modified", "additions": 26, "deletions": 15, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cae56bd61a048b0fac5c2829283744abc44c545/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmalloc_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cae56bd61a048b0fac5c2829283744abc44c545/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmalloc_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmalloc_allocator.h?ref=2cae56bd61a048b0fac5c2829283744abc44c545", "patch": "@@ -54,17 +54,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     class malloc_allocator\n     {\n     public:\n+      typedef _Tp        value_type;\n       typedef std::size_t     size_type;\n       typedef std::ptrdiff_t  difference_type;\n+#if __cplusplus <= 201703L\n       typedef _Tp*       pointer;\n       typedef const _Tp* const_pointer;\n       typedef _Tp&       reference;\n       typedef const _Tp& const_reference;\n-      typedef _Tp        value_type;\n \n       template<typename _Tp1>\n         struct rebind\n         { typedef malloc_allocator<_Tp1> other; };\n+#endif\n \n #if __cplusplus >= 201103L\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n@@ -83,6 +85,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         malloc_allocator(const malloc_allocator<_Tp1>&)\n \t_GLIBCXX_USE_NOEXCEPT { }\n \n+#if __cplusplus <= 201703L\n       ~malloc_allocator() _GLIBCXX_USE_NOEXCEPT { }\n \n       pointer\n@@ -92,16 +95,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       const_pointer\n       address(const_reference __x) const _GLIBCXX_NOEXCEPT\n       { return std::__addressof(__x); }\n+#endif\n \n       // NB: __n is permitted to be 0.  The C++ standard says nothing\n       // about what the return value is when __n == 0.\n-      pointer\n+      _Tp*\n       allocate(size_type __n, const void* = 0)\n       {\n-\tif (__n > this->max_size())\n+\tif (__n > this->_M_max_size())\n \t  std::__throw_bad_alloc();\n \n-\tpointer __ret = 0;\n+\t_Tp* __ret = 0;\n #if __cpp_aligned_new\n #if __cplusplus > 201402L && _GLIBCXX_HAVE_ALIGNED_ALLOC\n \tif (alignof(_Tp) > alignof(std::max_align_t))\n@@ -131,18 +135,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       // __p is not permitted to be a null pointer.\n       void\n-      deallocate(pointer __p, size_type)\n+      deallocate(_Tp* __p, size_type)\n       { std::free(static_cast<void*>(__p)); }\n \n+#if __cplusplus <= 201703L\n       size_type\n       max_size() const _GLIBCXX_USE_NOEXCEPT \n-      {\n-#if __PTRDIFF_MAX__ < __SIZE_MAX__\n-\treturn std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);\n-#else\n-\treturn std::size_t(-1) / sizeof(_Tp);\n-#endif\n-      }\n+      { return _M_max_size(); }\n \n #if __cplusplus >= 201103L\n       template<typename _Up, typename... _Args>\n@@ -160,13 +159,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #else\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 402. wrong new expression in [some_] allocator::construct\n-      void \n-      construct(pointer __p, const _Tp& __val) \n+      void\n+      construct(pointer __p, const _Tp& __val)\n       { ::new((void *)__p) value_type(__val); }\n \n-      void \n+      void\n       destroy(pointer __p) { __p->~_Tp(); }\n #endif\n+#endif // ! C++20\n \n       template<typename _Up>\n \tfriend bool\n@@ -179,6 +179,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \toperator!=(const malloc_allocator&, const malloc_allocator<_Up>&)\n \t_GLIBCXX_NOTHROW\n \t{ return false; }\n+\n+    private:\n+      _GLIBCXX_CONSTEXPR size_type\n+      _M_max_size() const _GLIBCXX_USE_NOEXCEPT\n+      {\n+#if __PTRDIFF_MAX__ < __SIZE_MAX__\n+\treturn std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);\n+#else\n+\treturn std::size_t(-1) / sizeof(_Tp);\n+#endif\n+      }\n     };\n \n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "cff9f1dca9c507746d50409947591dc93f93e6e1", "filename": "libstdc++-v3/include/ext/new_allocator.h", "status": "modified", "additions": 22, "deletions": 11, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cae56bd61a048b0fac5c2829283744abc44c545/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnew_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cae56bd61a048b0fac5c2829283744abc44c545/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnew_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnew_allocator.h?ref=2cae56bd61a048b0fac5c2829283744abc44c545", "patch": "@@ -55,17 +55,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     class new_allocator\n     {\n     public:\n+      typedef _Tp        value_type;\n       typedef std::size_t     size_type;\n       typedef std::ptrdiff_t  difference_type;\n+#if __cplusplus <= 201703L\n       typedef _Tp*       pointer;\n       typedef const _Tp* const_pointer;\n       typedef _Tp&       reference;\n       typedef const _Tp& const_reference;\n-      typedef _Tp        value_type;\n \n       template<typename _Tp1>\n \tstruct rebind\n \t{ typedef new_allocator<_Tp1> other; };\n+#endif\n \n #if __cplusplus >= 201103L\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n@@ -83,6 +85,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_GLIBCXX20_CONSTEXPR\n \tnew_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }\n \n+#if __cplusplus <= 201703L\n       ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }\n \n       pointer\n@@ -92,13 +95,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       const_pointer\n       address(const_reference __x) const _GLIBCXX_NOEXCEPT\n       { return std::__addressof(__x); }\n+#endif\n \n       // NB: __n is permitted to be 0.  The C++ standard says nothing\n       // about what the return value is when __n == 0.\n-      _GLIBCXX_NODISCARD pointer\n+      _GLIBCXX_NODISCARD _Tp*\n       allocate(size_type __n, const void* = static_cast<const void*>(0))\n       {\n-\tif (__n > this->max_size())\n+\tif (__n > this->_M_max_size())\n \t  std::__throw_bad_alloc();\n \n #if __cpp_aligned_new\n@@ -113,7 +117,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       // __p is not permitted to be a null pointer.\n       void\n-      deallocate(pointer __p, size_type __t)\n+      deallocate(_Tp* __p, size_type __t)\n       {\n #if __cpp_aligned_new\n \tif (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)\n@@ -133,15 +137,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t );\n       }\n \n+#if __cplusplus <= 201703L\n       size_type\n       max_size() const _GLIBCXX_USE_NOEXCEPT\n-      {\n-#if __PTRDIFF_MAX__ < __SIZE_MAX__\n-\treturn std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);\n-#else\n-\treturn std::size_t(-1) / sizeof(_Tp);\n-#endif\n-      }\n+      { return _M_max_size(); }\n \n #if __cplusplus >= 201103L\n       template<typename _Up, typename... _Args>\n@@ -166,6 +165,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       void\n       destroy(pointer __p) { __p->~_Tp(); }\n #endif\n+#endif // ! C++20\n \n       template<typename _Up>\n \tfriend bool\n@@ -178,6 +178,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \toperator!=(const new_allocator&, const new_allocator<_Up>&)\n \t_GLIBCXX_NOTHROW\n \t{ return false; }\n+\n+    private:\n+      _GLIBCXX_CONSTEXPR size_type\n+      _M_max_size() const _GLIBCXX_USE_NOEXCEPT\n+      {\n+#if __PTRDIFF_MAX__ < __SIZE_MAX__\n+\treturn std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);\n+#else\n+\treturn std::size_t(-1) / sizeof(_Tp);\n+#endif\n+      }\n     };\n \n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "2cf5fb0c5e3d14d21b19e62c3027d0944feb21f0", "filename": "libstdc++-v3/include/ext/rc_string_base.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cae56bd61a048b0fac5c2829283744abc44c545/libstdc%2B%2B-v3%2Finclude%2Fext%2Frc_string_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cae56bd61a048b0fac5c2829283744abc44c545/libstdc%2B%2B-v3%2Finclude%2Fext%2Frc_string_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frc_string_base.h?ref=2cae56bd61a048b0fac5c2829283744abc44c545", "patch": "@@ -31,6 +31,7 @@\n #define _RC_STRING_BASE_H 1\n \n #include <ext/atomicity.h>\n+#include <ext/alloc_traits.h>\n #include <bits/stl_iterator_base_funcs.h>\n \n namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n@@ -120,7 +121,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  _CharT            _M_align;\n \t};\n \n-\ttypedef typename _Alloc::template rebind<_Rep>::other _Rep_alloc_type;\n+\ttypedef typename __alloc_traits<_Alloc>::template rebind<_Rep>::other\n+\t  _Rep_alloc_type;\n \n  \t_CharT*\n \t_M_refdata() throw()"}, {"sha": "bfb29e1852d1b8aa053501e296d276094f7907a1", "filename": "libstdc++-v3/include/ext/rope", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cae56bd61a048b0fac5c2829283744abc44c545/libstdc%2B%2B-v3%2Finclude%2Fext%2Frope", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cae56bd61a048b0fac5c2829283744abc44c545/libstdc%2B%2B-v3%2Finclude%2Fext%2Frope", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frope?ref=2cae56bd61a048b0fac5c2829283744abc44c545", "patch": "@@ -53,6 +53,7 @@\n #include <bits/stl_numeric.h>\n #include <bits/allocator.h>\n #include <bits/gthr.h>\n+#include <ext/alloc_traits.h>\n #include <tr1/functional>\n \n # ifdef __GC\n@@ -565,7 +566,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n # define __ROPE_DEFINE_ALLOC(_Tp, __name) \\\n         typedef typename \\\n-          _Alloc::template rebind<_Tp>::other __name##Alloc; \\\n+          __alloc_traits<_Alloc>::template rebind<_Tp>::other __name##Alloc; \\\n         static _Tp* __name##_allocate(size_type __n) \\\n           { return __name##Alloc().allocate(__n); } \\\n         static void __name##_deallocate(_Tp *__p, size_type __n) \\\n@@ -1499,7 +1500,7 @@ protected:\n \n #define __ROPE_DEFINE_ALLOC(_Tp, __name) \\\n         typedef typename \\\n-          _Alloc::template rebind<_Tp>::other __name##Alloc; \\\n+          __alloc_traits<_Alloc>::template rebind<_Tp>::other __name##Alloc; \\\n         static _Tp* __name##_allocate(std::size_t __n) \\\n           { return __name##Alloc().allocate(__n); } \\\n         static void __name##_deallocate(_Tp *__p, std::size_t __n) \\\n@@ -1855,7 +1856,8 @@ protected:\n       {\n \t_CharT* __buf = this->_Data_allocate(_S_rounded_up_size(1));\n \t\n-\t_M_get_allocator().construct(__buf, __c);\n+\t__alloc_traits<allocator_type>::construct(_M_get_allocator(),\n+\t\t\t\t\t\t  __buf, __c);\n \t__try\n \t  {\n \t    this->_M_tree_ptr = _S_new_RopeLeaf(__buf, 1,"}, {"sha": "93522caf1f6fe17793b2eb72ff60a5f9c04ab99c", "filename": "libstdc++-v3/include/ext/slist", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cae56bd61a048b0fac5c2829283744abc44c545/libstdc%2B%2B-v3%2Finclude%2Fext%2Fslist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cae56bd61a048b0fac5c2829283744abc44c545/libstdc%2B%2B-v3%2Finclude%2Fext%2Fslist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fslist?ref=2cae56bd61a048b0fac5c2829283744abc44c545", "patch": "@@ -217,10 +217,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template <class _Tp, class _Alloc>\n     struct _Slist_base\n-    : public _Alloc::template rebind<_Slist_node<_Tp> >::other\n+    : public __alloc_traits<_Alloc>::template rebind<_Slist_node<_Tp> >::other\n     {\n-      typedef typename _Alloc::template rebind<_Slist_node<_Tp> >::other\n-        _Node_alloc;\n+      typedef typename __alloc_traits<_Alloc>::template\n+\trebind<_Slist_node<_Tp> >::other _Node_alloc;\n       typedef _Alloc allocator_type;\n \n       allocator_type"}, {"sha": "e86d81011dd8094c2dd97eac30a4e2c5de9c1a7f", "filename": "libstdc++-v3/include/ext/sso_string_base.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cae56bd61a048b0fac5c2829283744abc44c545/libstdc%2B%2B-v3%2Finclude%2Fext%2Fsso_string_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cae56bd61a048b0fac5c2829283744abc44c545/libstdc%2B%2B-v3%2Finclude%2Fext%2Fsso_string_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fsso_string_base.h?ref=2cae56bd61a048b0fac5c2829283744abc44c545", "patch": "@@ -140,7 +140,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     public:\n       size_type\n       _M_max_size() const\n-      { return (_M_get_allocator().max_size() - 1) / 2; }\n+      {\n+\ttypedef __alloc_traits<_CharT_alloc_type> _ATraits;\n+\treturn (_ATraits::max_size(_M_get_allocator()) - 1) / 2;\n+      }\n \n       _CharT*\n       _M_data() const"}, {"sha": "f5da751eb69b129734595b72492e6318bace1020", "filename": "libstdc++-v3/include/ext/throw_allocator.h", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cae56bd61a048b0fac5c2829283744abc44c545/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cae56bd61a048b0fac5c2829283744abc44c545/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h?ref=2cae56bd61a048b0fac5c2829283744abc44c545", "patch": "@@ -62,6 +62,7 @@\n # include <tr1/functional>\n # include <tr1/random>\n #endif\n+#include <ext/alloc_traits.h>\n \n namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n {\n@@ -814,12 +815,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       std::allocator<value_type> \t\t_M_allocator;\n \n+      typedef __gnu_cxx::__alloc_traits<std::allocator<value_type> > traits;\n+\n       using condition_type::throw_conditionally;\n \n     public:\n       size_type\n       max_size() const _GLIBCXX_USE_NOEXCEPT\n-      { return _M_allocator.max_size(); }\n+      { return traits::max_size(_M_allocator); }\n \n       pointer\n       address(reference __x) const _GLIBCXX_NOEXCEPT\n@@ -830,13 +833,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { return std::__addressof(__x); }\n \n       _GLIBCXX_NODISCARD pointer\n-      allocate(size_type __n, std::allocator<void>::const_pointer hint = 0)\n+      allocate(size_type __n, const void* hint = 0)\n       {\n \tif (__n > this->max_size())\n \t  std::__throw_bad_alloc();\n \n \tthrow_conditionally();\n-\tpointer const a = _M_allocator.allocate(__n, hint);\n+\tpointer const a = traits::allocate(_M_allocator, __n, hint);\n \tinsert(a, sizeof(value_type) * __n);\n \treturn a;\n       }\n@@ -846,7 +849,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         void\n         construct(_Up* __p, _Args&&... __args)\n \t{\n-\t  _M_allocator.construct(__p, std::forward<_Args>(__args)...);\n+\t  traits::construct(_M_allocator, __p, std::forward<_Args>(__args)...);\n \t  insert_construct(__p);\n \t}\n \n@@ -855,7 +858,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         destroy(_Up* __p)\n         {\n \t  erase_construct(__p);\n-\t  _M_allocator.destroy(__p);\n+\t  traits::destroy(_M_allocator, __p);\n \t}\n #else\n       void"}, {"sha": "23ccf15de5b313ab4ffb6b8fa94f0712b976116c", "filename": "libstdc++-v3/include/ext/vstring.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cae56bd61a048b0fac5c2829283744abc44c545/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cae56bd61a048b0fac5c2829283744abc44c545/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h?ref=2cae56bd61a048b0fac5c2829283744abc44c545", "patch": "@@ -58,6 +58,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       typedef _Base<_CharT, _Traits, _Alloc>                __vstring_base;    \n       typedef typename __vstring_base::_CharT_alloc_type    _CharT_alloc_type;\n+      typedef __alloc_traits<_CharT_alloc_type> _CharT_alloc_traits;\n \n       // Types:\n     public:\n@@ -68,8 +69,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef typename _CharT_alloc_type::difference_type   difference_type;\n       typedef value_type&               \t            reference;\n       typedef const value_type&                             const_reference;\n-      typedef typename _CharT_alloc_type::pointer\t    pointer;\n-      typedef typename _CharT_alloc_type::const_pointer\t    const_pointer;\n+      typedef typename _CharT_alloc_traits::pointer\t    pointer;\n+      typedef typename _CharT_alloc_traits::const_pointer   const_pointer;\n       typedef __gnu_cxx::__normal_iterator<pointer, __versa_string>  iterator;\n       typedef __gnu_cxx::__normal_iterator<const_pointer, __versa_string>\n                                                             const_iterator;"}, {"sha": "f539a6b0f2ceff0e9895b6e556bb9f2413b78875", "filename": "libstdc++-v3/include/ext/vstring_util.h", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cae56bd61a048b0fac5c2829283744abc44c545/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring_util.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cae56bd61a048b0fac5c2829283744abc44c545/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring_util.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring_util.h?ref=2cae56bd61a048b0fac5c2829283744abc44c545", "patch": "@@ -40,6 +40,7 @@\n #include <bits/ostream_insert.h>\n #include <bits/stl_iterator.h>\n #include <ext/numeric_traits.h>\n+#include <ext/alloc_traits.h>\n #include <bits/move.h>\n #include <bits/range_access.h>\n \n@@ -50,14 +51,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _CharT, typename _Traits, typename _Alloc>\n     struct __vstring_utility\n     {\n-      typedef typename _Alloc::template rebind<_CharT>::other _CharT_alloc_type;\n+      typedef typename __alloc_traits<_Alloc>::template rebind<_CharT>::other\n+\t_CharT_alloc_type;\n+      typedef __alloc_traits<_CharT_alloc_type> _CharT_alloc_traits;\n \n       typedef _Traits\t\t\t\t\t    traits_type;\n       typedef typename _Traits::char_type\t\t    value_type;\n       typedef typename _CharT_alloc_type::size_type\t    size_type;\n       typedef typename _CharT_alloc_type::difference_type   difference_type;\n-      typedef typename _CharT_alloc_type::pointer\t    pointer;\n-      typedef typename _CharT_alloc_type::const_pointer\t    const_pointer;\n+      typedef typename _CharT_alloc_traits::pointer\t    pointer;\n+      typedef typename _CharT_alloc_traits::const_pointer   const_pointer;\n \n       // For __sso_string.\n       typedef __gnu_cxx::"}, {"sha": "4f09b8deb2c762d400c59f3dfdf96871973b9e0d", "filename": "libstdc++-v3/include/std/memory", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cae56bd61a048b0fac5c2829283744abc44c545/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cae56bd61a048b0fac5c2829283744abc44c545/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory?ref=2cae56bd61a048b0fac5c2829283744abc44c545", "patch": "@@ -76,6 +76,7 @@\n #  include <bits/functexcept.h>\n #  include <bits/stl_function.h>  // std::less\n #  include <bits/uses_allocator.h>\n+#  include <bits/alloc_traits.h>\n #  include <type_traits>\n #  include <debug/debug.h>\n #  include <bits/unique_ptr.h>"}, {"sha": "2559a5117fbdd5d06e6bd495e257de4bfd13b895", "filename": "libstdc++-v3/testsuite/20_util/allocator/8230.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cae56bd61a048b0fac5c2829283744abc44c545/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fallocator%2F8230.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cae56bd61a048b0fac5c2829283744abc44c545/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fallocator%2F8230.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fallocator%2F8230.cc?ref=2cae56bd61a048b0fac5c2829283744abc44c545", "patch": "@@ -22,6 +22,7 @@\n #include <memory>\n #include <stdexcept>\n #include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n \n // libstdc++/8230\n void test02()\n@@ -30,11 +31,11 @@ void test02()\n   try \n     {\n       std::allocator<int> alloc;\n-      const std::allocator<int>::size_type n = alloc.max_size();\n+      const std::allocator<int>::size_type n = __gnu_test::max_size(alloc);\n       int* p = alloc.allocate(n + 1);\n       p[n] = 2002;\n     } \n-  catch(const std::bad_alloc& e) \n+  catch(const std::bad_alloc& e)\n     {\n       // Allowed.\n       test = true;"}, {"sha": "968e1de931befd52b7a710af017b4bc81af409e0", "filename": "libstdc++-v3/testsuite/20_util/allocator/rebind_c++20.cc", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cae56bd61a048b0fac5c2829283744abc44c545/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fallocator%2Frebind_c%2B%2B20.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cae56bd61a048b0fac5c2829283744abc44c545/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fallocator%2Frebind_c%2B%2B20.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fallocator%2Frebind_c%2B%2B20.cc?ref=2cae56bd61a048b0fac5c2829283744abc44c545", "patch": "@@ -0,0 +1,28 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <memory>\n+\n+template<typename T> struct Alloc : std::allocator<T> { };\n+\n+using T = std::allocator_traits<Alloc<int>>;\n+\n+// Prior to C++20 this finds std::allocator<int>::rebind and so fails:\n+static_assert( std::is_same_v<T::rebind_alloc<long>, Alloc<long>> );"}, {"sha": "3275164f1441b31a34d2299c9821f2af49924b6d", "filename": "libstdc++-v3/testsuite/20_util/allocator/requirements/typedefs.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cae56bd61a048b0fac5c2829283744abc44c545/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fallocator%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cae56bd61a048b0fac5c2829283744abc44c545/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fallocator%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fallocator%2Frequirements%2Ftypedefs.cc?ref=2cae56bd61a048b0fac5c2829283744abc44c545", "patch": "@@ -30,6 +30,7 @@ static_assert( is_same<allocator<int>::size_type, std::size_t>::value,\n                \"size_type\" );\n static_assert( is_same<allocator<int>::difference_type, std::ptrdiff_t>::value,\n                \"difference_type\" );\n+#if __cplusplus <= 201703L\n static_assert( is_same<allocator<int>::pointer, int*>::value,\n                \"pointer\" );\n static_assert( is_same<allocator<int>::const_pointer, const int*>::value,\n@@ -38,12 +39,15 @@ static_assert( is_same<allocator<int>::reference, int&>::value,\n                \"reference\" );\n static_assert( is_same<allocator<int>::const_reference, const int&>::value,\n                \"const_reference\" );\n+#endif\n static_assert( is_same<allocator<int>::value_type, int>::value,\n                \"value_type\" );\n \n+#if __cplusplus <= 201703L\n static_assert( is_same<allocator<int>::rebind<char>::other,\n                        allocator<char>>::value,\n                \"rebind::other\" );\n+#endif\n \n static_assert( is_same<allocator<int>::propagate_on_container_move_assignment,\n                        std::true_type>::value,"}, {"sha": "e986cc9a809daa804621430abc8e00a6283d09f3", "filename": "libstdc++-v3/testsuite/20_util/allocator/requirements/typedefs_c++20.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cae56bd61a048b0fac5c2829283744abc44c545/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fallocator%2Frequirements%2Ftypedefs_c%2B%2B20.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cae56bd61a048b0fac5c2829283744abc44c545/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fallocator%2Frequirements%2Ftypedefs_c%2B%2B20.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fallocator%2Frequirements%2Ftypedefs_c%2B%2B20.cc?ref=2cae56bd61a048b0fac5c2829283744abc44c545", "patch": "@@ -0,0 +1,56 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <memory>\n+\n+template<typename Alloc>\n+  concept has_pointer = requires { typename Alloc::pointer; };\n+\n+template<typename Alloc>\n+  concept has_const_pointer = requires { typename Alloc::const_pointer; };\n+\n+template<typename Alloc>\n+  concept has_reference = requires { typename Alloc::reference; };\n+\n+template<typename Alloc>\n+  concept has_const_reference = requires { typename Alloc::const_reference; };\n+\n+template<typename Alloc>\n+  concept has_rebind = requires { typename Alloc::template rebind<long>; };\n+\n+template<typename Alloc>\n+  concept has_construct = requires(Alloc& a, int* p) { a.construct(p); };\n+\n+template<typename Alloc>\n+  concept has_destroy = requires(Alloc& a, int* p) { a.destroy(p); };\n+\n+template<typename Alloc>\n+  concept has_max_size = requires(Alloc& a) { a.max_size(); };\n+\n+using A = std::allocator<int>;\n+\n+static_assert( !has_pointer<A> );\n+static_assert( !has_const_pointer<A> );\n+static_assert( !has_reference<A> );\n+static_assert( !has_const_reference<A> );\n+static_assert( !has_rebind<A> );\n+static_assert( !has_construct<A> );\n+static_assert( !has_destroy<A> );\n+static_assert( !has_max_size<A> );"}, {"sha": "2d6e13d8944838aef7c9abd5eff8d713e4a144e9", "filename": "libstdc++-v3/testsuite/23_containers/deque/capacity/29134.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cae56bd61a048b0fac5c2829283744abc44c545/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fcapacity%2F29134.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cae56bd61a048b0fac5c2829283744abc44c545/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fcapacity%2F29134.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fcapacity%2F29134.cc?ref=2cae56bd61a048b0fac5c2829283744abc44c545", "patch": "@@ -19,13 +19,15 @@\n \n #include <deque>\n #include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n \n // libstdc++/29134\n void test01()\n {\n   std::deque<int> d;\n \n-  VERIFY( d.max_size() == d.get_allocator().max_size() );\n+  std::allocator<int> a = d.get_allocator();\n+  VERIFY( d.max_size() == __gnu_test::max_size(a) );\n }\n \n int main()"}, {"sha": "b36fdc81ad53ff06012a8050e120a5d8db155236", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/capacity/1.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cae56bd61a048b0fac5c2829283744abc44c545/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fcapacity%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cae56bd61a048b0fac5c2829283744abc44c545/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fcapacity%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fcapacity%2F1.cc?ref=2cae56bd61a048b0fac5c2829283744abc44c545", "patch": "@@ -21,6 +21,7 @@\n \n #include <forward_list>\n #include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n \n void\n test01()\n@@ -40,8 +41,8 @@ test01()\n   using std::_Fwd_list_node;\n #endif\n \n-  VERIFY( (fld.max_size()\n-\t   == std::allocator<_Fwd_list_node<double> >().max_size()) );\n+  std::allocator<_Fwd_list_node<double> > a;\n+  VERIFY( fld.max_size() == __gnu_test::max_size(a) );\n }\n \n int"}, {"sha": "810d964d28a72f8d35621927cf2e56a73e2114ba", "filename": "libstdc++-v3/testsuite/23_containers/list/capacity/29134.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cae56bd61a048b0fac5c2829283744abc44c545/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcapacity%2F29134.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cae56bd61a048b0fac5c2829283744abc44c545/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcapacity%2F29134.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcapacity%2F29134.cc?ref=2cae56bd61a048b0fac5c2829283744abc44c545", "patch": "@@ -19,6 +19,7 @@\n \n #include <list>\n #include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n \n // libstdc++/29134\n void test01()\n@@ -32,7 +33,8 @@ void test01()\n   using std::_List_node;\n #endif\n \n-  VERIFY( l.max_size() == std::allocator<_List_node<int> >().max_size() );\n+  std::allocator<_List_node<int> > a;\n+  VERIFY( l.max_size() == __gnu_test::max_size(a) );\n }\n \n int main()"}, {"sha": "eae36f7037bc323510444cf8e41bc721634259e8", "filename": "libstdc++-v3/testsuite/23_containers/map/capacity/29134.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cae56bd61a048b0fac5c2829283744abc44c545/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fcapacity%2F29134.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cae56bd61a048b0fac5c2829283744abc44c545/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fcapacity%2F29134.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fcapacity%2F29134.cc?ref=2cae56bd61a048b0fac5c2829283744abc44c545", "patch": "@@ -19,14 +19,15 @@\n \n #include <map>\n #include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n \n // libstdc++/29134\n void test01()\n {\n   std::map<int, int> m;\n \n-  VERIFY( (m.max_size() == std::allocator<std::_Rb_tree_node<\n-\t                   std::pair<const int, int> > >().max_size()) );\n+  std::allocator<std::_Rb_tree_node<std::pair<const int, int> > > a;\n+  VERIFY( m.max_size() == __gnu_test::max_size(a) );\n }\n \n int main()"}, {"sha": "ac588de73f7545d194db9c4ac0599f1b725de202", "filename": "libstdc++-v3/testsuite/23_containers/multimap/capacity/29134.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cae56bd61a048b0fac5c2829283744abc44c545/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fcapacity%2F29134.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cae56bd61a048b0fac5c2829283744abc44c545/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fcapacity%2F29134.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fcapacity%2F29134.cc?ref=2cae56bd61a048b0fac5c2829283744abc44c545", "patch": "@@ -19,14 +19,15 @@\n \n #include <map>\n #include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n \n // libstdc++/29134\n void test01()\n {\n   std::multimap<int, int> mm;\n \n-  VERIFY( (mm.max_size() == std::allocator<std::_Rb_tree_node<\n-\t                    std::pair<const int, int> > >().max_size()) );\n+  std::allocator<std::_Rb_tree_node<std::pair<const int, int> > > a;\n+  VERIFY( mm.max_size() == __gnu_test::max_size(a) );\n }\n \n int main()"}, {"sha": "ea856a55156ec7436887dcf0b27d140b69b027c9", "filename": "libstdc++-v3/testsuite/23_containers/multiset/capacity/29134.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cae56bd61a048b0fac5c2829283744abc44c545/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fcapacity%2F29134.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cae56bd61a048b0fac5c2829283744abc44c545/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fcapacity%2F29134.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fcapacity%2F29134.cc?ref=2cae56bd61a048b0fac5c2829283744abc44c545", "patch": "@@ -19,14 +19,15 @@\n \n #include <set>\n #include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n \n // libstdc++/29134\n void test01()\n {\n   std::multiset<int> ms;\n \n-  VERIFY( ms.max_size()\n-\t  == std::allocator<std::_Rb_tree_node<int> >().max_size() );\n+  std::allocator<std::_Rb_tree_node<int> > a;\n+  VERIFY( ms.max_size() == __gnu_test::max_size(a) );\n }\n \n int main()"}, {"sha": "7851ee6b7ff0ab1f7ab8125699a5cb98d4b8653f", "filename": "libstdc++-v3/testsuite/23_containers/set/capacity/29134.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cae56bd61a048b0fac5c2829283744abc44c545/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fcapacity%2F29134.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cae56bd61a048b0fac5c2829283744abc44c545/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fcapacity%2F29134.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fcapacity%2F29134.cc?ref=2cae56bd61a048b0fac5c2829283744abc44c545", "patch": "@@ -19,14 +19,15 @@\n \n #include <set>\n #include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n \n // libstdc++/29134\n void test01()\n {\n   std::set<int> s;\n \n-  VERIFY( s.max_size() ==\n-\t  std::allocator<std::_Rb_tree_node<int> >().max_size() );\n+  std::allocator<std::_Rb_tree_node<int> > a;\n+  VERIFY( s.max_size() == __gnu_test::max_size(a) );\n }\n \n int main()"}, {"sha": "3d3b60138d0ed2c8fd13fd2c9cc5faafc6e0f8c3", "filename": "libstdc++-v3/testsuite/23_containers/vector/capacity/29134.cc", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cae56bd61a048b0fac5c2829283744abc44c545/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcapacity%2F29134.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cae56bd61a048b0fac5c2829283744abc44c545/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcapacity%2F29134.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcapacity%2F29134.cc?ref=2cae56bd61a048b0fac5c2829283744abc44c545", "patch": "@@ -19,13 +19,22 @@\n \n #include <vector>\n #include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n \n // libstdc++/29134\n void test01()\n {\n   std::vector<int> v;\n \n-  VERIFY( v.max_size() == v.get_allocator().max_size() );\n+  std::allocator<int> a = v.get_allocator();\n+#if __cplusplus > 201703L\n+  // std::allocator_traits::max_size() is unrealistically large,\n+  // so std::vector::max_size() returns a smaller value.\n+  VERIFY( v.max_size() <= __gnu_test::max_size(a) );\n+#else\n+  VERIFY( v.max_size() == __gnu_test::max_size(a) );\n+#endif\n+\n }\n \n int main()"}, {"sha": "b786fae9f0acd27e4f1b4202a82de1fa1a3cb2cd", "filename": "libstdc++-v3/testsuite/ext/malloc_allocator/variadic_construct.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cae56bd61a048b0fac5c2829283744abc44c545/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmalloc_allocator%2Fvariadic_construct.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cae56bd61a048b0fac5c2829283744abc44c545/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmalloc_allocator%2Fvariadic_construct.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmalloc_allocator%2Fvariadic_construct.cc?ref=2cae56bd61a048b0fac5c2829283744abc44c545", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do run { target c++11 } }\n+// { dg-do run { target { { c++11_only || c++14_only } || c++17_only } } }\n \n // 2007-10-26  Paolo Carlini  <pcarlini@suse.de>\n "}, {"sha": "5b23e5b4a2c07abf4279021963ffd606515cdec6", "filename": "libstdc++-v3/testsuite/ext/new_allocator/variadic_construct.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cae56bd61a048b0fac5c2829283744abc44c545/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fnew_allocator%2Fvariadic_construct.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cae56bd61a048b0fac5c2829283744abc44c545/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fnew_allocator%2Fvariadic_construct.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fnew_allocator%2Fvariadic_construct.cc?ref=2cae56bd61a048b0fac5c2829283744abc44c545", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do run { target c++11 } }\n+// { dg-do run { target { { c++11_only || c++14_only } || c++17_only } } }\n \n // 2007-10-26  Paolo Carlini  <pcarlini@suse.de>\n "}, {"sha": "003d0406d0a7a9779bbb011d559f4ebd87251c13", "filename": "libstdc++-v3/testsuite/ext/vstring/capacity/29134.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cae56bd61a048b0fac5c2829283744abc44c545/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fcapacity%2F29134.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cae56bd61a048b0fac5c2829283744abc44c545/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fcapacity%2F29134.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fcapacity%2F29134.cc?ref=2cae56bd61a048b0fac5c2829283744abc44c545", "patch": "@@ -19,13 +19,14 @@\n \n #include <ext/vstring.h>\n #include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n \n // libstdc++/29134\n void test01()\n {\n   __gnu_cxx::__vstring vs;\n \n-  VERIFY( vs.max_size() <= vs.get_allocator().max_size() );\n+  VERIFY( vs.max_size() <= __gnu_test::max_size(vs.get_allocator()) );\n }\n \n int main()"}, {"sha": "cb7e7b9027bde6f5d5426101d18d94aa74f46657", "filename": "libstdc++-v3/testsuite/util/replacement_memory_operators.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cae56bd61a048b0fac5c2829283744abc44c545/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Freplacement_memory_operators.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cae56bd61a048b0fac5c2829283744abc44c545/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Freplacement_memory_operators.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Freplacement_memory_operators.h?ref=2cae56bd61a048b0fac5c2829283744abc44c545", "patch": "@@ -76,7 +76,11 @@ namespace __gnu_test\n     check_delete(Alloc a = Alloc())\n     {\n       __gnu_test::counter::exceptions(false);\n+#if __cplusplus >= 201103L\n+      auto p = a.allocate(10);\n+#else\n       typename Alloc::pointer p = a.allocate(10);\n+#endif\n       const std::size_t count1 = __gnu_test::counter::count();\n       a.deallocate(p, 10);\n       const std::size_t count2 = __gnu_test::counter::count();"}, {"sha": "f3eb199d85e97d3bc69cbead829e2fd3b177b01b", "filename": "libstdc++-v3/testsuite/util/testsuite_allocator.h", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cae56bd61a048b0fac5c2829283744abc44c545/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cae56bd61a048b0fac5c2829283744abc44c545/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_allocator.h?ref=2cae56bd61a048b0fac5c2829283744abc44c545", "patch": "@@ -45,6 +45,18 @@ namespace unord = std::tr1;\n \n namespace __gnu_test\n {\n+  // A common API for calling max_size() on an allocator in any -std mode.\n+  template<typename A>\n+    typename A::size_type\n+    max_size(const A& a)\n+    {\n+#if __cplusplus >= 201103L\n+      return std::allocator_traits<A>::max_size(a);\n+#else\n+      return a.max_size();\n+#endif\n+    }\n+\n   class tracker_allocator_counter\n   {\n   public:\n@@ -252,7 +264,7 @@ namespace __gnu_test\n       Alloc a;\n       try\n \t{\n-\t  (void) a.allocate(a.max_size() + 1);\n+\t  (void) a.allocate(__gnu_test::max_size(a) + 1);\n \t}\n       catch(std::bad_alloc&)\n \t{"}]}