{"sha": "c134cf2ab8e329fecda56f61cd977388a200a3d5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzEzNGNmMmFiOGUzMjlmZWNkYTU2ZjYxY2Q5NzczODhhMjAwYTNkNQ==", "commit": {"author": {"name": "Yuri Rumyantsev", "email": "ysrumyan@gmail.com", "date": "2015-06-01T17:15:31Z"}, "committer": {"name": "Ilya Enkovich", "email": "ienkovich@gcc.gnu.org", "date": "2015-06-01T17:15:31Z"}, "message": "tree-vect-data-refs.c (vect_analyze_data_ref_access): Allow consecutive accesses within outer-loop with force_vectorize for...\n\ngcc/\n\n\t* tree-vect-data-refs.c (vect_analyze_data_ref_access): Allow\n\tconsecutive accesses within outer-loop with force_vectorize\n\tfor references with zero step in inner-loop.\n\ngcc/testsuite/\n\n\t* gcc.dg/vect/vect-outer-simd-1.c: New test.\n\nFrom-SVN: r223993", "tree": {"sha": "66f49cb054797138841a20fc3f9b89519ca2f3af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/66f49cb054797138841a20fc3f9b89519ca2f3af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c134cf2ab8e329fecda56f61cd977388a200a3d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c134cf2ab8e329fecda56f61cd977388a200a3d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c134cf2ab8e329fecda56f61cd977388a200a3d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c134cf2ab8e329fecda56f61cd977388a200a3d5/comments", "author": {"login": "ysrumyan", "id": 44425612, "node_id": "MDQ6VXNlcjQ0NDI1NjEy", "avatar_url": "https://avatars.githubusercontent.com/u/44425612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ysrumyan", "html_url": "https://github.com/ysrumyan", "followers_url": "https://api.github.com/users/ysrumyan/followers", "following_url": "https://api.github.com/users/ysrumyan/following{/other_user}", "gists_url": "https://api.github.com/users/ysrumyan/gists{/gist_id}", "starred_url": "https://api.github.com/users/ysrumyan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ysrumyan/subscriptions", "organizations_url": "https://api.github.com/users/ysrumyan/orgs", "repos_url": "https://api.github.com/users/ysrumyan/repos", "events_url": "https://api.github.com/users/ysrumyan/events{/privacy}", "received_events_url": "https://api.github.com/users/ysrumyan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f17339ceb3b4a8a5327acf8b0c682f74d3b3d337", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f17339ceb3b4a8a5327acf8b0c682f74d3b3d337", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f17339ceb3b4a8a5327acf8b0c682f74d3b3d337"}], "stats": {"total": 95, "additions": 92, "deletions": 3}, "files": [{"sha": "40f0c1f4684dcc525b1e0f4364e8caaff387d0ee", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c134cf2ab8e329fecda56f61cd977388a200a3d5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c134cf2ab8e329fecda56f61cd977388a200a3d5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c134cf2ab8e329fecda56f61cd977388a200a3d5", "patch": "@@ -1,3 +1,9 @@\n+2015-06-01  Yuri Rumyantsev  <ysrumyan@gmail.com>\n+\n+\t* tree-vect-data-refs.c (vect_analyze_data_ref_access): Allow\n+\tconsecutive accesses within outer-loop with force_vectorize\n+\tfor references with zero step in inner-loop.\n+\n 2015-06-01  Vidya Praveen  <vidyapraveen@arm.com>\n \n \t* Makefile.in: Pick up gcov-dump dependencies from gcc/ directory"}, {"sha": "8168fabd76c6ab55a44e150796e6b6e4e1e1e4b2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c134cf2ab8e329fecda56f61cd977388a200a3d5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c134cf2ab8e329fecda56f61cd977388a200a3d5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c134cf2ab8e329fecda56f61cd977388a200a3d5", "patch": "@@ -1,3 +1,7 @@\n+2015-06-01  Yuri Rumyantsev  <ysrumyan@gmail.com>\n+\n+\t* gcc.dg/vect/vect-outer-simd-1.c: New test.\n+\n 2015-06-01  Matthew Wahab  <matthew.wahab@arm.com>\n \n \tPR target/65697"}, {"sha": "d9754a3576eb988a71cfe35913518ef86655a7fe", "filename": "gcc/testsuite/gcc.dg/vect/vect-outer-simd-1.c", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c134cf2ab8e329fecda56f61cd977388a200a3d5/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-simd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c134cf2ab8e329fecda56f61cd977388a200a3d5/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-simd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-simd-1.c?ref=c134cf2ab8e329fecda56f61cd977388a200a3d5", "patch": "@@ -0,0 +1,75 @@\n+/* { dg-require-effective-target vect_simd_clones } */\n+/* { dg-additional-options \"-fopenmp-simd -ffast-math\" } */\n+#include <stdlib.h>\n+#include \"tree-vect.h\"\n+#define N 64\n+\n+float *px, *py;\n+float *tx, *ty;\n+float *x1, *z1, *t1, *t2;\n+\n+static void inline bar(const float cx, float cy,\n+                         float *vx, float *vy)\n+{\n+  int j;\n+    for (j = 0; j < N; ++j)\n+    {\n+        const float dx  = cx - px[j];\n+        const float dy  = cy - py[j];\n+        *vx               -= dx * tx[j];\n+        *vy               -= dy * ty[j];\n+    }\n+}\n+\n+__attribute__((noinline, noclone)) void foo1 ()\n+{\n+  int i;\n+#pragma omp simd\n+  for (i=0; i<N; i++)\n+    bar(px[i], py[i], x1+i, z1+i);\n+}\n+\n+__attribute__((noinline, noclone)) void foo2 ()\n+{\n+  volatile int i;\n+  for (i=0; i<N; i++)\n+    bar(px[i], py[i], x1+i, z1+i);\n+}\n+\n+\n+int main()\n+{\n+  float *X = (float*)malloc(N * 8 * sizeof (float));\n+  int i;\n+  check_vect ();\n+  px = &X[0];\n+  py = &X[N * 1];\n+  tx = &X[N * 2];\n+  ty = &X[N * 3];\n+  x1 = &X[N * 4];\n+  z1 = &X[N * 5];\n+  t1 = &X[N * 6];\n+  t2 = &X[N * 7];\n+\n+  for (i=0; i<N; i++)\n+    {\n+      px[i] = (float) (i+2);\n+      tx[i] = (float) (i+1);\n+      py[i] = (float) (i+4);\n+      ty[i] = (float) (i+3);\n+      x1[i] = z1[i] = 1.0f;\n+    }\n+  foo1 ();  /* vector variant.  */\n+  for (i=0; i<N;i++)\n+    {\n+      t1[i] = x1[i]; x1[i] = 1.0f;\n+      t2[i] = z1[i]; z1[i] = 1.0f;\n+    }\n+  foo2 ();  /* scalar variant.  */\n+  for (i=0; i<N; i++)\n+    if (x1[i] != t1[i] || z1[i] != t2[i])\n+      abort ();\t\n+  return 0;\n+} \n+/* { dg-final { scan-tree-dump \"OUTER LOOP VECTORIZED\" \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "5c3fa3d56d9e3f381fe472113788f1cf57d4c5e3", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c134cf2ab8e329fecda56f61cd977388a200a3d5/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c134cf2ab8e329fecda56f61cd977388a200a3d5/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=c134cf2ab8e329fecda56f61cd977388a200a3d5", "patch": "@@ -2287,18 +2287,22 @@ vect_analyze_data_ref_access (struct data_reference *dr)\n       return false;\n     }\n \n-  /* Allow invariant loads in not nested loops.  */\n+  /* Allow loads with zero step in inner-loop vectorization.  */\n   if (loop_vinfo && integer_zerop (step))\n     {\n       GROUP_FIRST_ELEMENT (vinfo_for_stmt (stmt)) = NULL;\n-      if (nested_in_vect_loop_p (loop, stmt))\n+      if (!nested_in_vect_loop_p (loop, stmt))\n+\treturn DR_IS_READ (dr);\n+      /* Allow references with zero step for outer loops marked\n+\t with pragma omp simd only - it guarantees absence of\n+\t loop-carried dependencies between inner loop iterations.  */\n+      if (!loop->force_vectorize)\n \t{\n \t  if (dump_enabled_p ())\n \t    dump_printf_loc (MSG_NOTE, vect_location,\n \t\t\t     \"zero step in inner loop of nest\\n\");\n \t  return false;\n \t}\n-      return DR_IS_READ (dr);\n     }\n \n   if (loop && nested_in_vect_loop_p (loop, stmt))"}]}