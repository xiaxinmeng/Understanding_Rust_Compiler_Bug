{"sha": "b8dd0ef74dd799a0a6d35e912239f0819912890f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjhkZDBlZjc0ZGQ3OTlhMGE2ZDM1ZTkxMjIzOWYwODE5OTEyODkwZg==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-12-04T00:16:36Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-12-04T00:16:36Z"}, "message": "Daily bump.", "tree": {"sha": "dbb9526c80dfd096a4663f1a8c9d6d3dcb9487cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dbb9526c80dfd096a4663f1a8c9d6d3dcb9487cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b8dd0ef74dd799a0a6d35e912239f0819912890f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8dd0ef74dd799a0a6d35e912239f0819912890f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8dd0ef74dd799a0a6d35e912239f0819912890f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8dd0ef74dd799a0a6d35e912239f0819912890f/comments", "author": null, "committer": null, "parents": [{"sha": "61371884fb62e071179cb96ed04177115f173f23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61371884fb62e071179cb96ed04177115f173f23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61371884fb62e071179cb96ed04177115f173f23"}], "stats": {"total": 493, "additions": 492, "deletions": 1}, "files": [{"sha": "44dadd38b162e7be280dac4abdff7ccd70cb8c12", "filename": "gcc/ChangeLog", "status": "modified", "additions": 186, "deletions": 0, "changes": 186, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8dd0ef74dd799a0a6d35e912239f0819912890f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8dd0ef74dd799a0a6d35e912239f0819912890f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b8dd0ef74dd799a0a6d35e912239f0819912890f", "patch": "@@ -1,3 +1,189 @@\n+2020-12-03  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c++/90629\n+\tPR middle-end/94527\n+\t* builtins.c (access_ref::access_ref): Initialize new member.\n+\t(compute_objsize): Use access_ref::deref.  Handle simple pointer\n+\tassignment.\n+\t(expand_builtin): Remove handling of the free built-in.\n+\t(call_dealloc_argno): Same.\n+\t(find_assignment_location): New function.\n+\t(fndecl_alloc_p): Same.\n+\t(gimple_call_alloc_p): Same.\n+\t(call_dealloc_p): Same.\n+\t(matching_alloc_calls_p): Same.\n+\t(warn_dealloc_offset): Same.\n+\t(maybe_emit_free_warning): Same.\n+\t* builtins.h (struct access_ref): Declare new member.\n+\t(maybe_emit_free_warning): Make extern.  Make use of access_ref.\n+\tHandle -Wmismatched-new-delete.\n+\t* calls.c (initialize_argument_information): Call\n+\tmaybe_emit_free_warning.\n+\t* doc/extend.texi (attribute malloc): Update.\n+\t* doc/invoke.texi (-Wfree-nonheap-object): Expand documentation.\n+\t(-Wmismatched-new-delete): Document new option.\n+\t(-Wmismatched-dealloc): Document new option.\n+\n+2020-12-03  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* tree.c (build_common_builtin_nodes): Declare\n+\t__builtin___clear_cache for all languages.\n+\t* builtins.c (maybe_emit_call_builtin___clear_cache): Accept\n+\tPmode arguments.\n+\n+2020-12-03  Sebastian Huber  <sebastian.huber@embedded-brains.de>\n+\n+\t* config/arm/t-rtems: Add \"-mthumb -mcpu=cortex-r52\n+\t-mfloat-abi=hard\" multilib.\n+\n+2020-12-03  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/98086\n+\t* config/i386/i386.c (ix86_md_asm_adjustmd): Rewrite\n+\tzero-extension part to use convert_to_mode.\n+\n+2020-12-03  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\t* config/s390/s390.md (\"@probe_stack2<mode>\"): Change mode\n+\titerator to W.\n+\n+2020-12-03  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64-sve-builtins-base.cc (svundef_impl::fold):\n+\tDelete.\n+\n+2020-12-03  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR middle-end/98099\n+\t* expmed.c (flip_storage_order): In the case of a non-integer mode,\n+\tsorry out if the integer mode to be used instead is not supported.\n+\n+2020-12-03  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR middle-end/98082\n+\t* function.c (use_register_for_decl): Also return true for a result\n+\tif cfun->tail_call_marked is true.\n+\n+2020-12-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR libstdc++/93121\n+\t* fold-const.h (native_encode_initializer): Add mask argument\n+\tdefaulted to nullptr.\n+\t(find_bitfield_repr_type): Declare.\n+\t(native_interpret_aggregate): Declare.\n+\t* fold-const.c (find_bitfield_repr_type): New function.\n+\t(native_encode_initializer): Add mask argument and support for\n+\tfilling it.  Handle also some bitfields without integral\n+\tDECL_BIT_FIELD_REPRESENTATIVE.\n+\t(native_interpret_aggregate): New function.\n+\t* gimple-fold.h (clear_type_padding_in_mask): Declare.\n+\t* gimple-fold.c (struct clear_padding_struct): Add clear_in_mask\n+\tmember.\n+\t(clear_padding_flush): Handle buf->clear_in_mask.\n+\t(clear_padding_union): Copy clear_in_mask.  Don't error if\n+\tbuf->clear_in_mask is set.\n+\t(clear_padding_type): Don't error if buf->clear_in_mask is set.\n+\t(clear_type_padding_in_mask): New function.\n+\t(gimple_fold_builtin_clear_padding): Set buf.clear_in_mask to false.\n+\t* doc/extend.texi (__builtin_bit_cast): Document.\n+\n+2020-12-03  Ilya Leoshkevich  <iii@linux.ibm.com>\n+\n+\t* tree-ssa-threadedge.c (record_temporary_equivalences_from_stmts_at_dest):\n+\tDo not allow __builtin_constant_p on a threading path.\n+\n+2020-12-03  Ilya Leoshkevich  <iii@linux.ibm.com>\n+\n+\t* tree-ssa-strlen.c (printf_strlen_execute): Avoid division by\n+\t0.\n+\n+2020-12-03  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\t* config/riscv/multilib-generator (arch_canonicalize): Move\n+\tcode to arch-canonicalize, and call that script to canonicalize arch\n+\tstring.\n+\t(canonical_order): Move code to arch-canonicalize.\n+\t(LONG_EXT_PREFIXES): Ditto.\n+\t(IMPLIED_EXT): Ditto.\n+\t* config/riscv/arch-canonicalize: New.\n+\t* config.gcc (riscv*-*-*): Canonicalize --with-arch.\n+\n+2020-12-03  Przemyslaw Wirkus  <przemyslaw.wirkus@arm.com>\n+\n+\t* config/aarch64/aarch64-option-extensions.def\n+\t(AARCH64_OPT_EXTENSION): New +flagm option in -march for AArch64.\n+\t* config/aarch64/aarch64.h (AARCH64_FL_FLAGM): Add new flagm extension bit\n+\tmask.\n+\t(AARCH64_FL_FOR_ARCH8_4): Add flagm to Armv8.4-A.\n+\t* doc/invoke.texi: Update docs with +flagm.\n+\n+2020-12-03  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/96906\n+\t* config/i386/sse.md\n+\t(<avx512>_ucmp<mode>3<mask_scalar_merge_name>): Add a new\n+\tdefine_split after this insn.\n+\n+2020-12-03  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/97642\n+\t* config/i386/i386-expand.c\n+\t(ix86_expand_special_args_builtin): Don't move all-ones mask\n+\toperands into register.\n+\t* config/i386/sse.md (UNSPEC_MASKLOAD): New unspec.\n+\t(*<avx512>_load<mode>_mask): New define_insns for masked load\n+\tinstructions.\n+\t(<avx512>_load<mode>_mask): Changed to define_expands which\n+\tspecifically handle memory or all-ones mask operands.\n+\t(<avx512>_blendm<mode>): Changed to define_insns which are same\n+\tas original <avx512>_load<mode>_mask with adjustment of\n+\toperands order.\n+\t(*<avx512>_load<mode>): New define_insn_and_split which is\n+\tused to optimize for masked load with all one mask.\n+\n+2020-12-03  Hongyu Wang  <hongyu.wang@intel.com>\n+\n+\tPR target/97770\n+\t* config/i386/sse.md (popcount<mode>2): New expander\n+\tfor SI/DI vector modes.\n+\t(popcount<mode>2): Likewise for QI/HI vector modes.\n+\n+2020-12-03  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* builtins.c (default_emit_call_builtin___clear_cache): New.\n+\t(maybe_emit_call_builtin___clear_cache): New.\n+\t(expand_builtin___clear_cache): Split into the above.\n+\t(expand_builtin): Do not issue clear_cache call any more.\n+\t* builtins.h (maybe_emit_call_builtin___clear_cache): Declare.\n+\t* config/aarch64/aarch64.c (aarch64_trampoline_init): Use\n+\tmaybe_emit_call_builtin___clear_cache.\n+\t* config/arc/arc.c (arc_trampoline_init): Likewise.\n+\t* config/arm/arm.c (arm_trampoline_init): Likewise.\n+\t* config/c6x/c6x.c (c6x_initialize_trampoline): Likewise.\n+\t* config/csky/csky.c (csky_trampoline_init): Likewise.\n+\t* config/m68k/linux.h (FInALIZE_TRAMPOLINE): Likewise.\n+\t* config/tilegx/tilegx.c (tilegx_trampoline_init): Likewise.\n+\t* config/tilepro/tilepro.c (tilepro_trampoline_init): Ditto.\n+\t* config/vxworks.c: Include rtl.h, memmodel.h, and optabs.h.\n+\t(vxworks_emit_call_builtin___clear_cache): New.\n+\t* config/vxworks.h (CLEAR_INSN_CACHE): Drop.\n+\t(TARGET_EMIT_CALL_BUILTIN___CLEAR_CACHE): Define.\n+\t* target.def (trampoline_init): In the documentation, refer to\n+\tmaybe_emit_call_builtin___clear_cache.\n+\t(emit_call_builtin___clear_cache): New.\n+\t* doc/tm.texi.in: Add new hook point.\n+\t(CLEAR_CACHE_INSN): Remove duplicate 'both'.\n+\t* doc/tm.texi: Rebuilt.\n+\t* targhooks.h (default_meit_call_builtin___clear_cache):\n+\tDeclare.\n+\t* tree.h (BUILTIN_ASM_NAME_PTR): New.\n+\n+2020-12-03  Ilya Leoshkevich  <iii@linux.ibm.com>\n+\n+\t* tree-ssa-threadbackward.c (thread_jumps::profitable_jump_thread_path):\n+\tDo not allow __builtin_constant_p on a threading path.\n+\n 2020-12-02  Jakub Jelinek  <jakub@redhat.com>\n \n \t* dwarf2out.c (add_scalar_info): Only use add_AT_wide for 128-bit"}, {"sha": "3fac2aa9f6135386eef06ba3a697fb03b8c124cd", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8dd0ef74dd799a0a6d35e912239f0819912890f/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8dd0ef74dd799a0a6d35e912239f0819912890f/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=b8dd0ef74dd799a0a6d35e912239f0819912890f", "patch": "@@ -1 +1 @@\n-20201203\n+20201204"}, {"sha": "2e88f20e7c797a02ba734a52794d3bf3edfd0781", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8dd0ef74dd799a0a6d35e912239f0819912890f/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8dd0ef74dd799a0a6d35e912239f0819912890f/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=b8dd0ef74dd799a0a6d35e912239f0819912890f", "patch": "@@ -1,3 +1,18 @@\n+2020-12-03  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c++/90629\n+\tPR middle-end/94527\n+\t* c-attribs.c (handle_dealloc_attribute): New function.\n+\t(handle_malloc_attribute): Handle argument forms of attribute.\n+\t* c.opt (-Wmismatched-dealloc): New option.\n+\t(-Wmismatched-new-delete): New option.\n+\n+2020-12-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR libstdc++/93121\n+\t* c-common.h (enum rid): Add RID_BUILTIN_BIT_CAST.\n+\t* c-common.c (c_common_reswords): Add __builtin_bit_cast.\n+\n 2020-12-01  JeanHeyd Meneide  <phdofthehouse@gmail.com>\n \n \t* c-cppbuiltin.c (c_cpp_builtins): Add predefined"}, {"sha": "1bf50cd5f9eebe58e44e153f94309d64cb6dd46a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8dd0ef74dd799a0a6d35e912239f0819912890f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8dd0ef74dd799a0a6d35e912239f0819912890f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b8dd0ef74dd799a0a6d35e912239f0819912890f", "patch": "@@ -1,3 +1,70 @@\n+2020-12-03  Jason Merrill  <jason@redhat.com>\n+\n+\t* cp-tree.h (releasing_vec::operator[]): Change parameter type to\n+\tptrdiff_t.\n+\n+2020-12-03  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* cp-tree.h (OVL_EXPORT): New.\n+\t(class ovl_iterator): Add get_using, exporting_p.\n+\t* tree.c (ovl_insert): Extend using_or_hidden meaning to include\n+\tan exported using.\n+\n+2020-12-03  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* cp-tree.h (DECL_UNINSTANTIATED_TEMPLATE_FRIEND): New.\n+\t* pt.c (push_template_decl): Set it.\n+\t(tsubst_friend_function): Clear it.\n+\n+2020-12-03  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* cp-tree.h (make_unbound_class_template_raw): Declare.\n+\t(canonical_type_parameter): Declare.\n+\t* decl.c (make_unbound_class_template_raw): Break out of ...\n+\t(make_unboud_class_template): ... here.  Call it.\n+\t* pt.c (canonical_type_parameter): Externalize.  Refactor & set\n+\tstructural_equality for type parms.\n+\n+2020-12-03  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/98107\n+\t* tree.c (build_cplus_array_type): Mark dependency of new variant.\n+\t(cp_build_qualified_type_real, strip_typedefs): Assert\n+\tTYPE_DEPENDENT_P_VALID, or not a dependent type.\n+\n+2020-12-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR libstdc++/93121\n+\t* cp-tree.h (cp_build_bit_cast): Declare.\n+\t* cp-tree.def (BIT_CAST_EXPR): New tree code.\n+\t* cp-objcp-common.c (names_builtin_p): Handle RID_BUILTIN_BIT_CAST.\n+\t(cp_common_init_ts): Handle BIT_CAST_EXPR.\n+\t* cxx-pretty-print.c (cxx_pretty_printer::postfix_expression):\n+\tLikewise.\n+\t* parser.c (cp_parser_postfix_expression): Handle\n+\tRID_BUILTIN_BIT_CAST.\n+\t* semantics.c (cp_build_bit_cast): New function.\n+\t* tree.c (cp_tree_equal): Handle BIT_CAST_EXPR.\n+\t(cp_walk_subtrees): Likewise.\n+\t* pt.c (tsubst_copy): Likewise.\n+\t* constexpr.c (check_bit_cast_type, cxx_eval_bit_cast): New functions.\n+\t(cxx_eval_constant_expression): Handle BIT_CAST_EXPR.\n+\t(potential_constant_expression_1): Likewise.\n+\t* cp-gimplify.c (cp_genericize_r): Likewise.\n+\n+2020-12-03  Jason Merrill  <jason@redhat.com>\n+\n+\t* parser.c (cp_parser_primary_expression): Distinguish\n+\tparms from vars in error.\n+\t(cp_parser_late_parsing_default_args): Pushdecl parms\n+\tas we go.\n+\n+2020-12-03  Jason Merrill  <jason@redhat.com>\n+\n+\t* name-lookup.c (begin_scope): Set immediate_fn_ctx_p.\n+\t* parser.c (cp_parser_late_parsing_default_args): Push\n+\tsk_function_parms scope.\n+\n 2020-12-03  Peter Bergner  <bergner@linux.ibm.com>\n \n \tPR c++/97947"}, {"sha": "182664015ff83e8c2726b02a48843f6688c1bdfb", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8dd0ef74dd799a0a6d35e912239f0819912890f/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8dd0ef74dd799a0a6d35e912239f0819912890f/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=b8dd0ef74dd799a0a6d35e912239f0819912890f", "patch": "@@ -1,3 +1,9 @@\n+2020-12-03  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/95342\n+\t* decl.c (gfc_match_function_decl): Avoid NULL pointer dereference.\n+\t(gfc_match_subroutine): Likewise.\n+\n 2020-11-30  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR fortran/98011"}, {"sha": "0e91a066cd722e7b02829c25b67f413b6101c3e5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 145, "deletions": 0, "changes": 145, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8dd0ef74dd799a0a6d35e912239f0819912890f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8dd0ef74dd799a0a6d35e912239f0819912890f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b8dd0ef74dd799a0a6d35e912239f0819912890f", "patch": "@@ -1,3 +1,148 @@\n+2020-12-03  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/cpp2a/concepts-nodiscard1.C: XFAIL.\n+\n+2020-12-03  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c++/90629\n+\tPR middle-end/94527\n+\t* g++.dg/asan/asan_test.cc: Fix a bug.\n+\t* g++.dg/warn/delete-array-1.C: Add expected warning.\n+\t* g++.old-deja/g++.other/delete2.C: Add expected warning.\n+\t* g++.dg/warn/Wfree-nonheap-object-2.C: New test.\n+\t* g++.dg/warn/Wfree-nonheap-object.C: New test.\n+\t* g++.dg/warn/Wmismatched-new-delete.C: New test.\n+\t* g++.dg/warn/Wmismatched-dealloc-2.C: New test.\n+\t* g++.dg/warn/Wmismatched-dealloc.C: New test.\n+\t* gcc.dg/Wmismatched-dealloc.c: New test.\n+\t* gcc.dg/analyzer/malloc-1.c: Prune out expected warning.\n+\t* gcc.dg/attr-malloc.c: New test.\n+\t* gcc.dg/free-1.c: Adjust text of expected warning.\n+\t* gcc.dg/free-2.c: Same.\n+\t* gcc.dg/torture/pr71816.c: Prune out expected warning.\n+\t* gcc.dg/tree-ssa/pr19831-2.c: Add an expected warning.\n+\t* gcc.dg/Wfree-nonheap-object-2.c: New test.\n+\t* gcc.dg/Wfree-nonheap-object-3.c: New test.\n+\t* gcc.dg/Wfree-nonheap-object.c: New test.\n+\t* g++.dg/warn/Wfree-nonheap-object.s: New file.\n+\n+2020-12-03  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/95342\n+\t* gfortran.dg/pr95342.f90: New test.\n+\n+2020-12-03  Ian Lance Taylor  <iant@golang.org>\n+\n+\t* go.test/go-test.exp (go-gc-tests): Add -I. when building all\n+\tsources in a directory (errorcheckdir, compiledir, rundir,\n+\trundircmpout).\n+\n+2020-12-03  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/98019\n+\t* g++.dg/cpp2a/concepts-nodiscard1.C: New test.\n+\n+2020-12-03  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/98086\n+\t* gcc.target/i386/pr98086.c: New test.\n+\n+2020-12-03  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/98115\n+\tPR c++/98116\n+\t* g++.dg/template/pr98115.C: New.\n+\t* g++.dg/template/pr98116.C: New.\n+\n+2020-12-03  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\t* gcc.target/s390/stack-clash-4.c: New test.\n+\n+2020-12-03  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/sve/acle/general/undef_1.c: New test.\n+\n+2020-12-03  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc.dg/pr98099.c: New test.\n+\n+2020-12-03  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* g++.dg/cpp2a/pr98082.C: New test.\n+\n+2020-12-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR libstdc++/93121\n+\t* g++.dg/cpp2a/bit-cast1.C: New test.\n+\t* g++.dg/cpp2a/bit-cast2.C: New test.\n+\t* g++.dg/cpp2a/bit-cast3.C: New test.\n+\t* g++.dg/cpp2a/bit-cast4.C: New test.\n+\t* g++.dg/cpp2a/bit-cast5.C: New test.\n+\n+2020-12-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* g++.dg/cpp2a/consteval-defarg2.C: New test.\n+\n+2020-12-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/98104\n+\t* g++.dg/warn/pr98104.C: New test.\n+\n+2020-12-03  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/avx512bw-pr96906-1.c: New test.\n+\t* gcc.target/i386/pr96906-1.c: Add -mno-avx512f.\n+\n+2020-12-03  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/avx512bw-vmovdqu16-1.c: Adjust testcase to\n+\tmake sure only masked load instruction is generated.\n+\t* gcc.target/i386/avx512bw-vmovdqu8-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vmovapd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vmovaps-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vmovdqa32-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vmovdqa64-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vmovapd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vmovaps-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vmovdqa32-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vmovdqa64-1.c: Ditto.\n+\t* gcc.target/i386/pr97642-1.c: New test.\n+\t* gcc.target/i386/pr97642-2.c: New test.\n+\n+2020-12-03  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/parse/defarg17.C: New test.\n+\n+2020-12-03  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/cpp2a/consteval-defarg1.C: New test.\n+\n+2020-12-03  Hongyu Wang  <hongyu.wang@intel.com>\n+\n+\tPR target/97770\n+\t* gcc.target/i386/avx512bitalg-pr97770-1.c: New test.\n+\t* gcc.target/i386/avx512vpopcntdq-pr97770-1.c: Likewise.\n+\t* gcc.target/i386/avx512vpopcntdq-pr97770-2.c: Likewise.\n+\t* gcc.target/i386/avx512vpopcntdqvl-pr97770-1.c: Likewise.\n+\n+2020-12-03  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* lib/options.exp (check_for_options_with_filter): Detect\n+\tunavailable compiler for the selected language, and bail out\n+\tas unsupported.\n+\n+2020-12-03  Martin Sebor  <msebor@redhat.com>\n+\n+\t* gcc.dg/tree-ssa/builtin-sprintf-warn-1.c: Adjust expected warnings\n+\tto correctly reflect the maximum object size.\n+\t* gcc.dg/tree-ssa/builtin-sprintf-warn-11.c: Same.\n+\t* gcc.dg/tree-ssa/builtin-sprintf-warn-18.c: Same.\n+\n+2020-12-03  Ilya Leoshkevich  <iii@linux.ibm.com>\n+\n+\t* gcc.target/s390/builtin-constant-p-threading.c: New test.\n+\n 2020-12-03  Peter Bergner  <bergner@linux.ibm.com>\n \n \tPR c++/97947"}, {"sha": "9b95f553c9b6e29a5c70c8c7a14d7ff5f4d23446", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8dd0ef74dd799a0a6d35e912239f0819912890f/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8dd0ef74dd799a0a6d35e912239f0819912890f/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=b8dd0ef74dd799a0a6d35e912239f0819912890f", "patch": "@@ -1,3 +1,21 @@\n+2020-12-03  Michael Meissner  <meissner@linux.ibm.com>\n+\n+\tPR libgcc/97543\n+\tPR libgcc/97643\n+\t* config/rs6000/t-linux (IBM128_STATIC_OBJS): New make variable.\n+\t(IBM128_SHARED_OBJS): New make variable.\n+\t(IBM128_OBJS): New make variable.  Set all objects to use the\n+\texplicit IBM format, and disable gnu attributes.\n+\t(IBM128_CFLAGS): New make variable.\n+\t(gcc_s_compile): Add -mno-gnu-attribute to all shared library\n+\tmodules.\n+\n+2020-12-03  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* config/t-vxworks (LIB2ADD): Drop.\n+\t* config/t-vxworks7 (LIB2ADD): Likewise.\n+\t* config/vxcache.c: Remove.\n+\n 2020-11-30  Stefan Kanthak  <stefan.kanthak@nexgo.de>\n \n \t* libgcc2.c (bswapsi2): Make constants unsigned."}, {"sha": "ed9c82c34ad0fa4923e6d2820efdbbe7376f1de2", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8dd0ef74dd799a0a6d35e912239f0819912890f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8dd0ef74dd799a0a6d35e912239f0819912890f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b8dd0ef74dd799a0a6d35e912239f0819912890f", "patch": "@@ -1,3 +1,57 @@\n+2020-12-03  Martin Sebor  <msebor@redhat.com>\n+\n+\t* testsuite/ext/vstring/modifiers/clear/56166.cc: Suppress a false\n+\tpositive warning.\n+\n+2020-12-03  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/26_numerics/bit/bit.cast/bit_cast.cc: Remove stray\n+\tword from copy&paste.\n+\t* testsuite/26_numerics/bit/bit.cast/version.cc: Likewise.\n+\n+2020-12-03  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* doc/xml/manual/status_cxx2020.xml: Update C++20 status.\n+\t* doc/html/*: Regenerate.\n+\n+2020-12-03  JeanHeyd Meneide  <phdofthehouse@gmail.com>\n+\n+\t* doc/doxygen/user.cfg.in (INPUT): Add <source_location>.\n+\t* include/Makefile.am: Add <source_location>.\n+\t* include/Makefile.in: Regenerate.\n+\t* include/std/version (__cpp_lib_source_location): Define.\n+\t* include/std/source_location: New file.\n+\t* testsuite/18_support/source_location/1.cc: New test.\n+\t* testsuite/18_support/source_location/consteval.cc: New test.\n+\t* testsuite/18_support/source_location/srcloc.h: New test.\n+\t* testsuite/18_support/source_location/version.cc: New test.\n+\n+2020-12-03  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/93121\n+\t* include/std/bit (__cpp_lib_bit_cast, bit_cast): Define.\n+\t* include/std/version (__cpp_lib_bit_cast): Define.\n+\t* testsuite/26_numerics/bit/bit.cast/bit_cast.cc: New test.\n+\t* testsuite/26_numerics/bit/bit.cast/version.cc: New test.\n+\n+2020-12-03  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* config/abi/post/powerpc-linux-gnu/baseline_symbols.txt:\n+\tUpdate.\n+\t* config/abi/post/powerpc64-linux-gnu/32/baseline_symbols.txt:\n+\tUpdate.\n+\n+2020-12-03  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/array (array::operator[](size_t) const, array::front() const)\n+\t(array::back() const) [__cplusplus == 201103]: Disable\n+\tassertions.\n+\t* testsuite/23_containers/array/element_access/constexpr_element_access.cc:\n+\tCheck for correct values.\n+\t* testsuite/23_containers/array/tuple_interface/get_neg.cc:\n+\tAdjust dg-error line numbers.\n+\t* testsuite/23_containers/array/debug/constexpr_c++11.cc: New test.\n+\n 2020-12-02  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/65480"}]}