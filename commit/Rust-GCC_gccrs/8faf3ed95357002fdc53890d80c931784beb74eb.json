{"sha": "8faf3ed95357002fdc53890d80c931784beb74eb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGZhZjNlZDk1MzU3MDAyZmRjNTM4OTBkODBjOTMxNzg0YmViNzRlYg==", "commit": {"author": {"name": "Xiong Hu Luo", "email": "luoxhu@linux.ibm.com", "date": "2019-10-10T19:44:26Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@gcc.gnu.org", "date": "2019-10-10T19:44:26Z"}, "message": "re PR middle-end/26241 (None of the IPA passes are documented in passes.texi)\n\n2019-10-10  Xiong Hu Luo  <luoxhu@linux.ibm.com>\n\t    Sandra Loosemore  <sandra@codesourcery.com>\n\n\tgcc/\n\n\tPR middle-end/26241\n\t* doc/lto.texi (IPA): Reference to the IPA passes.\n\t* doc/passes.texi (Pass manager): Add node IPA passes and\n\t  description for each IPA pass.\n\nCo-Authored-By: Sandra Loosemore <sandra@codesourcery.com>\n\nFrom-SVN: r276851", "tree": {"sha": "dfb79ee96356a90a9e0c8168c5d3a1ce950bb348", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dfb79ee96356a90a9e0c8168c5d3a1ce950bb348"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8faf3ed95357002fdc53890d80c931784beb74eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8faf3ed95357002fdc53890d80c931784beb74eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8faf3ed95357002fdc53890d80c931784beb74eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8faf3ed95357002fdc53890d80c931784beb74eb/comments", "author": {"login": "xionghul", "id": 4607154, "node_id": "MDQ6VXNlcjQ2MDcxNTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4607154?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xionghul", "html_url": "https://github.com/xionghul", "followers_url": "https://api.github.com/users/xionghul/followers", "following_url": "https://api.github.com/users/xionghul/following{/other_user}", "gists_url": "https://api.github.com/users/xionghul/gists{/gist_id}", "starred_url": "https://api.github.com/users/xionghul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xionghul/subscriptions", "organizations_url": "https://api.github.com/users/xionghul/orgs", "repos_url": "https://api.github.com/users/xionghul/repos", "events_url": "https://api.github.com/users/xionghul/events{/privacy}", "received_events_url": "https://api.github.com/users/xionghul/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6488759f404f3aff6642b005242a9c82a1c2cee2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6488759f404f3aff6642b005242a9c82a1c2cee2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6488759f404f3aff6642b005242a9c82a1c2cee2"}], "stats": {"total": 289, "additions": 285, "deletions": 4}, "files": [{"sha": "b9bcabae38a9a9c5c850749316e63cd2584295b3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8faf3ed95357002fdc53890d80c931784beb74eb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8faf3ed95357002fdc53890d80c931784beb74eb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8faf3ed95357002fdc53890d80c931784beb74eb", "patch": "@@ -1,3 +1,11 @@\n+2019-10-10  Xiong Hu Luo  <luoxhu@linux.ibm.com>\n+\t    Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\tPR middle-end/26241\n+\t* doc/lto.texi (IPA): Reference to the IPA passes.\n+\t* doc/passes.texi (Pass manager): Add node IPA passes and\n+\t  description for each IPA pass.\n+\n 2019-10-10  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* ipa-reference.c: Do not include splay-tree.h"}, {"sha": "09f0184e6a80e2ef246bf3bf2e39344da2dd17cd", "filename": "gcc/doc/lto.texi", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8faf3ed95357002fdc53890d80c931784beb74eb/gcc%2Fdoc%2Flto.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8faf3ed95357002fdc53890d80c931784beb74eb/gcc%2Fdoc%2Flto.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Flto.texi?ref=8faf3ed95357002fdc53890d80c931784beb74eb", "patch": "@@ -350,10 +350,11 @@ while the @emph{Read summary}, @emph{Execute}, and\n @end itemize\n \n To simplify development, the GCC pass manager differentiates\n-between normal inter-procedural passes and small inter-procedural\n-passes.  A @emph{small inter-procedural pass}\n-(@code{SIMPLE_IPA_PASS}) is a pass that does\n-everything at once and thus it cannot be executed during WPA in\n+between normal inter-procedural passes (@pxref{Regular IPA passes}),\n+small inter-procedural passes (@pxref{Small IPA passes})\n+and late inter-procedural passes (@pxref{Late IPA passes}).\n+A small or late IPA pass (@code{SIMPLE_IPA_PASS}) does\n+everything at once and thus cannot be executed during WPA in\n WHOPR mode.  It defines only the @emph{Execute} stage and during\n this stage it accesses and modifies the function bodies.  Such\n passes are useful for optimization at LGEN or LTRANS time and are"}, {"sha": "889fa0f9004a9238e5edf31c319f333b82e9c1cf", "filename": "gcc/doc/passes.texi", "status": "modified", "additions": 272, "deletions": 0, "changes": 272, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8faf3ed95357002fdc53890d80c931784beb74eb/gcc%2Fdoc%2Fpasses.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8faf3ed95357002fdc53890d80c931784beb74eb/gcc%2Fdoc%2Fpasses.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fpasses.texi?ref=8faf3ed95357002fdc53890d80c931784beb74eb", "patch": "@@ -20,6 +20,7 @@ where near complete.\n * Parsing pass::         The language front end turns text into bits.\n * Gimplification pass::  The bits are turned into something we can optimize.\n * Pass manager::         Sequencing the optimization passes.\n+* IPA passes::           Inter-procedural optimizations.\n * Tree SSA passes::      Optimizations on a high-level representation.\n * RTL passes::           Optimizations on a low-level representation.\n * Optimization info::    Dumping optimization information from passes.\n@@ -178,6 +179,277 @@ TODO: describe the global variables set up by the pass manager,\n and a brief description of how a new pass should use it.\n I need to look at what info RTL passes use first@enddots{}\n \n+@node IPA passes\n+@section Inter-procedural optimization passes\n+@cindex IPA passes\n+@cindex inter-procedural optimization passes\n+\n+The inter-procedural optimization (IPA) passes use call graph\n+information to perform transformations across function boundaries.\n+IPA is a critical part of link-time optimization (LTO) and\n+whole-program (WHOPR) optimization, and these passes are structured\n+with the needs of LTO and WHOPR in mind by dividing their operations\n+into stages.  For detailed discussion of the LTO/WHOPR IPA pass stages\n+and interfaces, see @ref{IPA}.\n+\n+The following briefly describes the inter-procedural optimization (IPA)\n+passes, which are split into small IPA passes, regular IPA passes,\n+and late IPA passes, according to the LTO/WHOPR processing model.\n+\n+@menu\n+* Small IPA passes::\n+* Regular IPA passes::\n+* Late IPA passes::\n+@end menu\n+\n+@node Small IPA passes\n+@subsection Small IPA passes\n+@cindex small IPA passes\n+A small IPA pass is a pass derived from @code{simple_ipa_opt_pass}.\n+As described in @ref{IPA}, it does everything at once and \n+defines only the @emph{Execute} stage.  During this\n+stage it accesses and modifies the function bodies.\n+No @code{generate_summary}, @code{read_summary}, or @code{write_summary}\n+hooks are defined.\n+\n+@itemize @bullet\n+@item IPA free lang data\n+\n+This pass frees resources that are used by the front end but are\n+not needed once it is done.  It is located in @file{tree.c} and is described by\n+@code{pass_ipa_free_lang_data}.\n+\n+@item IPA function and variable visibility\n+\n+This is a local function pass handling visibilities of all symbols.  This\n+happens before LTO streaming, so @option{-fwhole-program} should be ignored\n+at this level.  It is located in @file{ipa-visibility.c} and is described by\n+@code{pass_ipa_function_and_variable_visibility}.\n+\n+@item IPA remove symbols\n+\n+This pass performs reachability analysis and reclaims all unreachable nodes.\n+It is located in @file{passes.c} and is described by\n+@code{pass_ipa_remove_symbols}.\n+\n+@item IPA OpenACC\n+\n+This is a pass group for OpenACC processing.  It is located in\n+@file{tree-ssa-loop.c} and is described by @code{pass_ipa_oacc}.\n+\n+@item IPA points-to analysis\n+\n+This is a tree-based points-to analysis pass. The idea behind this analyzer\n+is to generate set constraints from the program, then solve the resulting\n+constraints in order to generate the points-to sets.  It is located in \n+@file{tree-ssa-structalias.c} and is described by @code{pass_ipa_pta}.\n+\n+@item IPA OpenACC kernels\n+\n+This is a pass group for processing OpenACC kernels regions.  It is a\n+subpass of the IPA OpenACC pass group that runs on offloaded functions\n+containing OpenACC kernels loops.  It is located in\n+@file{tree-ssa-loop.c} and is described by\n+@code{pass_ipa_oacc_kernels}.\n+\n+@item Target clone\n+\n+This is a pass for parsing functions with multiple target attributes.\n+It is located in @file{multiple_target.c} and is described by\n+@code{pass_target_clone}.\n+\n+@item IPA auto profile\n+\n+This pass uses AutoFDO profiling data to annotate the control flow graph.\n+It is located in @file{auto-profile.c} and is described by\n+@code{pass_ipa_auto_profile}.\n+\n+@item IPA tree profile\n+\n+This pass does profiling for all functions in the call graph. \n+It calculates branch\n+probabilities and basic block execution counts. It is located\n+in @file{tree-profile.c} and is described by @code{pass_ipa_tree_profile}.\n+\n+@item IPA free function summary\n+\n+This pass is a small IPA pass when argument @code{small_p} is true.\n+It releases inline function summaries and call summaries.\n+It is located in @file{ipa-fnsummary.c} and is described by\n+@code{pass_ipa_free_free_fn_summary}.\n+\n+@item IPA increase alignment\n+\n+This pass increases the alignment of global arrays to improve\n+vectorization. It is located in @file{tree-vectorizer.c}\n+and is described by @code{pass_ipa_increase_alignment}.\n+\n+@item IPA transactional memory\n+\n+This pass is for transactional memory support.\n+It is located in @file{trans-mem.c} and is described by\n+@code{pass_ipa_tm}.\n+\n+@item IPA lower emulated TLS\n+\n+This pass lowers thread-local storage (TLS) operations\n+to emulation functions provided by libgcc.\n+It is located in @file{tree-emutls.c} and is described by\n+@code{pass_ipa_lower_emutls}.\n+\n+@end itemize\n+\n+@node Regular IPA passes\n+@subsection Regular IPA passes\n+@cindex regular IPA passes\n+\n+A regular IPA pass is a pass derived from @code{ipa_opt_pass_d} that\n+is executed in WHOPR compilation. Regular IPA passes may have summary\n+hooks implemented in any of the LGEN, WPA or LTRANS stages (@pxref{IPA}).\n+\n+@itemize @bullet\n+@item IPA whole program visibility\n+\n+This pass performs various optimizations involving symbol visibility\n+with @option{-fwhole-program}, including symbol privatization,\n+discovering local functions, and dismantling comdat groups.  It is\n+located in @file{ipa-visibility.c} and is described by\n+@code{pass_ipa_whole_program_visibility}.\n+\n+@item IPA profile\n+\n+The IPA profile pass propagates profiling frequencies across the call\n+graph.  It is located in @file{ipa-profile.c} and is described by\n+@code{pass_ipa_profile}.\n+\n+@item IPA identical code folding\n+\n+This is the inter-procedural identical code folding pass.\n+The goal of this transformation is to discover functions\n+and read-only variables that have exactly the same semantics.  It is\n+located in @file{ipa-icf.c} and is described by @code{pass_ipa_icf}.\n+\n+@item IPA devirtualization\n+\n+This pass performs speculative devirtualization based on the type\n+inheritance graph.  When a polymorphic call has only one likely target\n+in the unit, it is turned into a speculative call. It is located in\n+@file{ipa-devirt.c} and is described by @code{pass_ipa_devirt}.\n+\n+@item IPA constant propagation\n+\n+The goal of this pass is to discover functions that are always invoked\n+with some arguments with the same known constant values and to modify\n+the functions accordingly.  It can also do partial specialization and\n+type-based devirtualization.  It is located in @file{ipa-cp.c} and is\n+described by @code{pass_ipa_cp}.\n+\n+@item IPA scalar replacement of aggregates\n+\n+This pass can replace an aggregate parameter with a set of other parameters\n+representing part of the original, turning those passed by reference\n+into new ones which pass the value directly.  It also removes unused\n+function return values and unused function parameters.  This pass is\n+located in @file{ipa-sra.c} and is described by @code{pass_ipa_sra}.\n+\n+@item IPA constructor/destructor merge\n+\n+This pass merges multiple constructors and destructors for static\n+objects into single functions.  It's only run at LTO time unless the\n+target doesn't support constructors and destructors natively.  The\n+pass is located in @file{ipa.c} and is described by\n+@code{pass_ipa_cdtor_merge}.\n+\n+@item IPA HSA\n+\n+This pass is part of the GCC support for HSA (Heterogeneous System\n+Architecture) accelerators.  It is responsible for creation of HSA\n+clones and emitting HSAIL instructions for them.  It is located in\n+@file{ipa-hsa.c} and is described by @code{pass_ipa_hsa}.\n+\n+@item IPA function summary\n+\n+This pass provides function analysis for inter-procedural passes.\n+It collects estimates of function body size, execution time, and frame\n+size for each function.  It also estimates information about function\n+calls: call statement size, time and how often the parameters change\n+for each call.  It is located in @file{ipa-fnsummary.c} and is\n+described by @code{pass_ipa_fn_summary}.\n+\n+@item IPA inline\n+\n+The IPA inline pass handles function inlining with whole-program\n+knowledge. Small functions that are candidates for inlining are\n+ordered in increasing badness, bounded by unit growth parameters.\n+Unreachable functions are removed from the call graph.  Functions called\n+once and not exported from the unit are inlined.  This pass is located in\n+@file{ipa-inline.c} and is described by @code{pass_ipa_inline}.\n+\n+@item IPA pure/const analysis\n+\n+This pass marks functions as being either const (@code{TREE_READONLY}) or\n+pure (@code{DECL_PURE_P}).  The per-function information is produced\n+by @code{pure_const_generate_summary}, then the global information is computed\n+by performing a transitive closure over the call graph.   It is located in\n+@file{ipa-pure-const.c} and is described by @code{pass_ipa_pure_const}.\n+\n+@item IPA free function summary\n+\n+This pass is a regular IPA pass when argument @code{small_p} is false.\n+It releases inline function summaries and call summaries.\n+It is located in @file{ipa-fnsummary.c} and is described by\n+@code{pass_ipa_free_fn_summary}.\n+\n+@item IPA reference\n+\n+This pass gathers information about how variables whose scope is\n+confined to the compilation unit are used.  It is located in\n+@file{ipa-reference.c} and is described by @code{pass_ipa_reference}.\n+\n+@item IPA single use\n+\n+This pass checks whether variables are used by a single function.\n+It is located in @file{ipa.c} and is described by\n+@code{pass_ipa_single_use}.\n+\n+@item IPA comdats\n+\n+This pass looks for static symbols that are used exclusively\n+within one comdat group, and moves them into that comdat group. It is\n+located in @file{ipa-comdats.c} and is described by\n+@code{pass_ipa_comdats}.\n+\n+@end itemize\n+\n+@node Late IPA passes\n+@subsection Late IPA passes\n+@cindex late IPA passes\n+\n+Late IPA passes are simple IPA passes executed after\n+the regular passes.  In WHOPR mode the passes are executed after\n+partitioning and thus see just parts of the compiled unit.\n+\n+@itemize @bullet\n+@item Materialize all clones\n+\n+Once all functions from compilation unit are in memory, produce all clones\n+and update all calls.  It is located in @file{ipa.c} and is described by\n+@code{pass_materialize_all_clones}.\n+\n+@item IPA points-to analysis\n+\n+Points-to analysis; this is the same as the points-to-analysis pass\n+run with the small IPA passes (@pxref{Small IPA passes}).\n+\n+@item OpenMP simd clone\n+\n+This is the OpenMP constructs' SIMD clone pass.  It creates the appropriate\n+SIMD clones for functions tagged as elemental SIMD functions.\n+It is located in @file{omp-simd-clone.c} and is described by\n+@code{pass_omp_simd_clone}.\n+\n+@end itemize\n+\n @node Tree SSA passes\n @section Tree SSA passes\n "}]}