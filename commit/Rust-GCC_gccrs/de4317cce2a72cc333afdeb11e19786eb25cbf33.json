{"sha": "de4317cce2a72cc333afdeb11e19786eb25cbf33", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGU0MzE3Y2NlMmE3MmNjMzMzYWZkZWIxMWUxOTc4NmViMjVjYmYzMw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2013-05-20T09:41:42Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2013-05-20T09:41:42Z"}, "message": "re PR c++/10207 (Empty structure initialization fails under C++ (but works under C))\n\n/cp\n2013-05-20  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/10207\n\t* parser.c (cp_parser_postfix_expression): Use cp_parser_braced_list\n\tinstead of cp_parser_initializer_list for compound-literals.\n\n/testsuite\n2013-05-20  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/10207\n\t* g++.dg/ext/complit13.C: New.\n\nFrom-SVN: r199096", "tree": {"sha": "03d5af74c833b41d567293dc88c5da738e5990a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03d5af74c833b41d567293dc88c5da738e5990a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de4317cce2a72cc333afdeb11e19786eb25cbf33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de4317cce2a72cc333afdeb11e19786eb25cbf33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de4317cce2a72cc333afdeb11e19786eb25cbf33", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de4317cce2a72cc333afdeb11e19786eb25cbf33/comments", "author": null, "committer": null, "parents": [{"sha": "5657d9661696f32b6bab45f511e67fa31b7aebc3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5657d9661696f32b6bab45f511e67fa31b7aebc3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5657d9661696f32b6bab45f511e67fa31b7aebc3"}], "stats": {"total": 53, "additions": 36, "deletions": 17}, "files": [{"sha": "dd53e69d93823ba76a29b42990e9fc5b797369db", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de4317cce2a72cc333afdeb11e19786eb25cbf33/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de4317cce2a72cc333afdeb11e19786eb25cbf33/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=de4317cce2a72cc333afdeb11e19786eb25cbf33", "patch": "@@ -1,3 +1,9 @@\n+2013-05-20  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/10207\n+\t* parser.c (cp_parser_postfix_expression): Use cp_parser_braced_list\n+\tinstead of cp_parser_initializer_list for compound-literals.\n+\n 2013-05-20  Marc Glisse  <marc.glisse@inria.fr>\n \n \tPR c++/57175"}, {"sha": "91e6615ae38769e2c3e78e4178a74c994d82a492", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de4317cce2a72cc333afdeb11e19786eb25cbf33/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de4317cce2a72cc333afdeb11e19786eb25cbf33/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=de4317cce2a72cc333afdeb11e19786eb25cbf33", "patch": "@@ -5719,7 +5719,7 @@ cp_parser_postfix_expression (cp_parser *parser, bool address_p, bool cast_p,\n \tif (cp_parser_allow_gnu_extensions_p (parser)\n \t    && cp_lexer_next_token_is (parser->lexer, CPP_OPEN_PAREN))\n \t  {\n-\t    vec<constructor_elt, va_gc> *initializer_list = NULL;\n+\t    tree initializer = NULL_TREE;\n \t    bool saved_in_type_id_in_expr_p;\n \n \t    cp_parser_parse_tentatively (parser);\n@@ -5732,29 +5732,28 @@ cp_parser_postfix_expression (cp_parser *parser, bool address_p, bool cast_p,\n \t    parser->in_type_id_in_expr_p = saved_in_type_id_in_expr_p;\n \t    /* Look for the `)'.  */\n \t    cp_parser_require (parser, CPP_CLOSE_PAREN, RT_CLOSE_PAREN);\n-\t    /* Look for the `{'.  */\n-\t    cp_parser_require (parser, CPP_OPEN_BRACE, RT_OPEN_BRACE);\n \t    /* If things aren't going well, there's no need to\n \t       keep going.  */\n \t    if (!cp_parser_error_occurred (parser))\n \t      {\n-\t\tbool non_constant_p;\n-\t\t/* Parse the initializer-list.  */\n-\t\tinitializer_list\n-\t\t  = cp_parser_initializer_list (parser, &non_constant_p);\n-\t\t/* Allow a trailing `,'.  */\n-\t\tif (cp_lexer_next_token_is (parser->lexer, CPP_COMMA))\n-\t\t  cp_lexer_consume_token (parser->lexer);\n-\t\t/* Look for the final `}'.  */\n-\t\tcp_parser_require (parser, CPP_CLOSE_BRACE, RT_CLOSE_BRACE);\n+\t\tif (cp_lexer_next_token_is (parser->lexer, CPP_OPEN_BRACE))\n+\t\t  {\n+\t\t    bool non_constant_p;\n+\t\t    /* Parse the brace-enclosed initializer list.  */\n+\t\t    initializer = cp_parser_braced_list (parser,\n+\t\t\t\t\t\t\t &non_constant_p);\n+\t\t  }\n+\t\telse\n+\t\t  cp_parser_simulate_error (parser);\n \t      }\n \t    /* If that worked, we're definitely looking at a\n \t       compound-literal expression.  */\n \t    if (cp_parser_parse_definitely (parser))\n \t      {\n \t\t/* Warn the user that a compound literal is not\n \t\t   allowed in standard C++.  */\n-\t\tpedwarn (input_location, OPT_Wpedantic, \"ISO C++ forbids compound-literals\");\n+\t\tpedwarn (input_location, OPT_Wpedantic,\n+\t\t\t \"ISO C++ forbids compound-literals\");\n \t\t/* For simplicity, we disallow compound literals in\n \t\t   constant-expressions.  We could\n \t\t   allow compound literals of integer type, whose\n@@ -5772,10 +5771,8 @@ cp_parser_postfix_expression (cp_parser *parser, bool address_p, bool cast_p,\n \t\t  }\n \t\t/* Form the representation of the compound-literal.  */\n \t\tpostfix_expression\n-\t\t  = (finish_compound_literal\n-\t\t     (type, build_constructor (init_list_type_node,\n-\t\t\t\t\t       initializer_list),\n-\t\t      tf_warning_or_error));\n+\t\t  = finish_compound_literal (type, initializer,\n+\t\t\t\t\t     tf_warning_or_error);\n \t\tbreak;\n \t      }\n \t  }"}, {"sha": "dfde009de2ac2559baf2a30aae35a2d68c9338d0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de4317cce2a72cc333afdeb11e19786eb25cbf33/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de4317cce2a72cc333afdeb11e19786eb25cbf33/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=de4317cce2a72cc333afdeb11e19786eb25cbf33", "patch": "@@ -1,3 +1,8 @@\n+2013-05-20  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/10207\n+\t* g++.dg/ext/complit13.C: New.\n+\n 2013-05-20  Marc Glisse  <marc.glisse@inria.fr>\n \n \tPR c++/57175"}, {"sha": "c12678ba864c4a32bb7002b046110d2c489974c4", "filename": "gcc/testsuite/g++.dg/ext/complit13.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de4317cce2a72cc333afdeb11e19786eb25cbf33/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fcomplit13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de4317cce2a72cc333afdeb11e19786eb25cbf33/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fcomplit13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fcomplit13.C?ref=de4317cce2a72cc333afdeb11e19786eb25cbf33", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/10207\n+// { dg-options \"\" }\n+\n+typedef struct { } EmptyStruct;\n+typedef struct { EmptyStruct Empty; } DemoStruct;\n+\n+void Func()\n+{\n+  DemoStruct Demo;\n+  Demo.Empty = (EmptyStruct) {};\n+}"}]}