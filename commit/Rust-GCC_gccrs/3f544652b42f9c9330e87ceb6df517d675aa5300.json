{"sha": "3f544652b42f9c9330e87ceb6df517d675aa5300", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Y1NDQ2NTJiNDJmOWM5MzMwZTg3Y2ViNmRmNTE3ZDY3NWFhNTMwMA==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-08-08T20:10:35Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-08-08T20:12:03Z"}, "message": "Fix memory issues with multiple type-bounds", "tree": {"sha": "64f90f21a34c02e58b9a25626603086c83306bb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64f90f21a34c02e58b9a25626603086c83306bb4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f544652b42f9c9330e87ceb6df517d675aa5300", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f544652b42f9c9330e87ceb6df517d675aa5300", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f544652b42f9c9330e87ceb6df517d675aa5300", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f544652b42f9c9330e87ceb6df517d675aa5300/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49a498f28be6cf5ced4a2a88aef86a5a75092334", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49a498f28be6cf5ced4a2a88aef86a5a75092334", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49a498f28be6cf5ced4a2a88aef86a5a75092334"}], "stats": {"total": 194, "additions": 112, "deletions": 82}, "files": [{"sha": "5f07a2ac8a2e01cfff91b90298f95aee8271bcc3", "filename": "gcc/rust/backend/rust-compile-resolve-path.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f544652b42f9c9330e87ceb6df517d675aa5300/gcc%2Frust%2Fbackend%2Frust-compile-resolve-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f544652b42f9c9330e87ceb6df517d675aa5300/gcc%2Frust%2Fbackend%2Frust-compile-resolve-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-resolve-path.cc?ref=3f544652b42f9c9330e87ceb6df517d675aa5300", "patch": "@@ -107,10 +107,10 @@ ResolvePathRef::visit (HIR::PathInExpression &expr)\n \t\t= ctx->get_mappings ()->lookup_trait_item_mapping (\n \t\t  trait_item->get_mappings ().get_hirid ());\n \n-\t      Resolver::TraitReference &trait_ref\n-\t\t= Resolver::TraitReference::error_node ();\n+\t      Resolver::TraitReference *trait_ref\n+\t\t= &Resolver::TraitReference::error_node ();\n \t      bool ok = ctx->get_tyctx ()->lookup_trait_reference (\n-\t\ttrait->get_mappings ().get_defid (), trait_ref);\n+\t\ttrait->get_mappings ().get_defid (), &trait_ref);\n \t      rust_assert (ok);\n \n \t      TyTy::BaseType *receiver = nullptr;"}, {"sha": "3c6a18818e5e444e76079d043c119c22b0f87771", "filename": "gcc/rust/backend/rust-compile.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f544652b42f9c9330e87ceb6df517d675aa5300/gcc%2Frust%2Fbackend%2Frust-compile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f544652b42f9c9330e87ceb6df517d675aa5300/gcc%2Frust%2Fbackend%2Frust-compile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile.cc?ref=3f544652b42f9c9330e87ceb6df517d675aa5300", "patch": "@@ -150,10 +150,10 @@ CompileExpr::visit (HIR::MethodCallExpr &expr)\n \t  HIR::Trait *trait = ctx->get_mappings ()->lookup_trait_item_mapping (\n \t    trait_item->get_mappings ().get_hirid ());\n \n-\t  Resolver::TraitReference &trait_ref\n-\t    = Resolver::TraitReference::error_node ();\n+\t  Resolver::TraitReference *trait_ref\n+\t    = &Resolver::TraitReference::error_node ();\n \t  bool ok = ctx->get_tyctx ()->lookup_trait_reference (\n-\t    trait->get_mappings ().get_defid (), trait_ref);\n+\t    trait->get_mappings ().get_defid (), &trait_ref);\n \t  rust_assert (ok);\n \n \t  TyTy::BaseType *receiver = nullptr;"}, {"sha": "87c966281182755d7ae8fa1fa3e5fd16591d066b", "filename": "gcc/rust/typecheck/rust-hir-path-probe.h", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f544652b42f9c9330e87ceb6df517d675aa5300/gcc%2Frust%2Ftypecheck%2Frust-hir-path-probe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f544652b42f9c9330e87ceb6df517d675aa5300/gcc%2Frust%2Ftypecheck%2Frust-hir-path-probe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-path-probe.h?ref=3f544652b42f9c9330e87ceb6df517d675aa5300", "patch": "@@ -49,8 +49,8 @@ struct PathProbeCandidate\n \n   struct TraitItemCandidate\n   {\n-    const TraitReference &trait_ref;\n-    const TraitItemReference &item_ref;\n+    const TraitReference *trait_ref;\n+    const TraitItemReference *item_ref;\n   };\n \n   CandidateType type;\n@@ -128,18 +128,18 @@ class PathProbeType : public TypeCheckBase\n     if (!probe_bounds)\n       return probe.candidates;\n \n-    std::vector<std::reference_wrapper<TraitReference>> probed_bounds\n+    std::vector<TraitReference *> probed_bounds\n       = TypeBoundsProbe::Probe (receiver);\n \n-    std::vector<std::reference_wrapper<const TraitReference>> specified_bounds;\n+    std::vector<const TraitReference *> specified_bounds;\n     for (const TyTy::TypeBoundPredicate &predicate :\n \t receiver->get_specified_bounds ())\n       {\n \tconst TraitReference *trait_item = predicate.get ();\n-\tspecified_bounds.push_back (*trait_item);\n+\tspecified_bounds.push_back (trait_item);\n       }\n \n-    std::vector<std::reference_wrapper<const TraitReference>> union_type_bounds\n+    std::vector<const TraitReference *> union_type_bounds\n       = probe.union_bounds (probed_bounds, specified_bounds);\n     probe.process_traits_for_candidates (union_type_bounds,\n \t\t\t\t\t ignore_mandatory_trait_items);\n@@ -230,22 +230,22 @@ class PathProbeType : public TypeCheckBase\n   }\n \n   void process_traits_for_candidates (\n-    const std::vector<std::reference_wrapper<const TraitReference>> traits,\n+    const std::vector<const TraitReference *> traits,\n     bool ignore_mandatory_trait_items)\n   {\n-    for (const TraitReference &trait_ref : traits)\n+    for (const TraitReference *trait_ref : traits)\n       {\n-\tconst TraitItemReference &trait_item_ref\n-\t  = trait_ref.lookup_trait_item (search.as_string ());\n-\tif (trait_item_ref.is_error ())\n+\tconst TraitItemReference *trait_item_ref = nullptr;\n+\tif (!trait_ref->lookup_trait_item (search.as_string (),\n+\t\t\t\t\t   &trait_item_ref))\n \t  continue;\n \n-\tbool trait_item_needs_implementation = !trait_item_ref.is_optional ();\n+\tbool trait_item_needs_implementation = !trait_item_ref->is_optional ();\n \tif (ignore_mandatory_trait_items && trait_item_needs_implementation)\n \t  continue;\n \n \tPathProbeCandidate::CandidateType candidate_type;\n-\tswitch (trait_item_ref.get_trait_item_type ())\n+\tswitch (trait_item_ref->get_trait_item_type ())\n \t  {\n \t  case TraitItemReference::TraitItemType::FN:\n \t    candidate_type = PathProbeCandidate::CandidateType::TRAIT_FUNC;\n@@ -264,7 +264,7 @@ class PathProbeType : public TypeCheckBase\n \t    break;\n \t  }\n \n-\tTyTy::BaseType *trait_item_tyty = trait_item_ref.get_tyty ();\n+\tTyTy::BaseType *trait_item_tyty = trait_item_ref->get_tyty ();\n \n \t// we can substitute the Self with the receiver here\n \tif (trait_item_tyty->get_kind () == TyTy::TypeKind::FNDEF)\n@@ -298,7 +298,7 @@ class PathProbeType : public TypeCheckBase\n \t  trait_ref, trait_item_ref};\n \tPathProbeCandidate candidate{candidate_type,\n \t\t\t\t     trait_item_tyty,\n-\t\t\t\t     trait_ref.get_locus (),\n+\t\t\t\t     trait_ref->get_locus (),\n \t\t\t\t     {trait_item_candidate}};\n \tcandidates.push_back (std::move (candidate));\n       }\n@@ -311,21 +311,21 @@ class PathProbeType : public TypeCheckBase\n       current_impl (nullptr)\n   {}\n \n-  std::vector<std::reference_wrapper<const TraitReference>> union_bounds (\n-    const std::vector<std::reference_wrapper</*const*/ TraitReference>> a,\n-    const std::vector<std::reference_wrapper<const TraitReference>> b) const\n+  std::vector<const TraitReference *>\n+  union_bounds (const std::vector</*const*/ TraitReference *> a,\n+\t\tconst std::vector<const TraitReference *> b) const\n   {\n-    std::map<DefId, std::reference_wrapper<const TraitReference>> mapper;\n-    for (const TraitReference &ref : a)\n+    std::map<DefId, const TraitReference *> mapper;\n+    for (const TraitReference *ref : a)\n       {\n-\tmapper.insert ({ref.get_mappings ().get_defid (), ref});\n+\tmapper.insert ({ref->get_mappings ().get_defid (), ref});\n       }\n-    for (const TraitReference &ref : b)\n+    for (const TraitReference *ref : b)\n       {\n-\tmapper.insert ({ref.get_mappings ().get_defid (), ref});\n+\tmapper.insert ({ref->get_mappings ().get_defid (), ref});\n       }\n \n-    std::vector<std::reference_wrapper<const TraitReference>> union_set;\n+    std::vector<const TraitReference *> union_set;\n     for (auto it = mapper.begin (); it != mapper.end (); it++)\n       {\n \tunion_set.push_back (it->second);\n@@ -362,7 +362,7 @@ class ReportMultipleCandidateError : private TypeCheckBase\n \t  case PathProbeCandidate::CandidateType::TRAIT_ITEM_CONST:\n \t  case PathProbeCandidate::CandidateType::TRAIT_TYPE_ALIAS:\n \t  case PathProbeCandidate::CandidateType::TRAIT_FUNC:\n-\t    r.add_range (c.item.trait.item_ref.get_locus ());\n+\t    r.add_range (c.item.trait.item_ref->get_locus ());\n \t    break;\n \t  }\n       }"}, {"sha": "21a8beb5a177e0965295b615dea4acda835d9ed1", "filename": "gcc/rust/typecheck/rust-hir-trait-ref.h", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f544652b42f9c9330e87ceb6df517d675aa5300/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-ref.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f544652b42f9c9330e87ceb6df517d675aa5300/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-ref.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-ref.h?ref=3f544652b42f9c9330e87ceb6df517d675aa5300", "patch": "@@ -233,14 +233,18 @@ class TraitReference\n     return hir_trait_ref->get_mappings ();\n   }\n \n-  const TraitItemReference &lookup_trait_item (const std::string &ident) const\n+  bool lookup_trait_item (const std::string &ident,\n+\t\t\t  const TraitItemReference **ref) const\n   {\n     for (auto &item : item_refs)\n       {\n \tif (ident.compare (item.get_identifier ()) == 0)\n-\t  return item;\n+\t  {\n+\t    *ref = &item;\n+\t    return true;\n+\t  }\n       }\n-    return TraitItemReference::error_node ();\n+    return false;\n   }\n \n   const TraitItemReference &"}, {"sha": "1669a370e2b0f6e4237a24f41a5f706888b10709", "filename": "gcc/rust/typecheck/rust-hir-trait-resolve.h", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f544652b42f9c9330e87ceb6df517d675aa5300/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f544652b42f9c9330e87ceb6df517d675aa5300/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.h?ref=3f544652b42f9c9330e87ceb6df517d675aa5300", "patch": "@@ -100,7 +100,7 @@ class TraitResolver : public TypeCheckBase\n   using Rust::Resolver::TypeCheckBase::visit;\n \n public:\n-  static TraitReference &Resolve (HIR::TypePath &path)\n+  static TraitReference *Resolve (HIR::TypePath &path)\n   {\n     TraitResolver resolver;\n     return resolver.go (path);\n@@ -109,22 +109,22 @@ class TraitResolver : public TypeCheckBase\n private:\n   TraitResolver () : TypeCheckBase () {}\n \n-  TraitReference &go (HIR::TypePath &path)\n+  TraitReference *go (HIR::TypePath &path)\n   {\n     NodeId ref;\n     if (!resolver->lookup_resolved_type (path.get_mappings ().get_nodeid (),\n \t\t\t\t\t &ref))\n       {\n \trust_error_at (path.get_locus (), \"Failed to resolve path to node-id\");\n-\treturn TraitReference::error_node ();\n+\treturn &TraitReference::error_node ();\n       }\n \n     HirId hir_node = UNKNOWN_HIRID;\n     if (!mappings->lookup_node_to_hir (mappings->get_current_crate (), ref,\n \t\t\t\t       &hir_node))\n       {\n \trust_error_at (path.get_locus (), \"Failed to resolve path to hir-id\");\n-\treturn TraitReference::error_node ();\n+\treturn &TraitReference::error_node ();\n       }\n \n     HIR::Item *resolved_item\n@@ -134,9 +134,9 @@ class TraitResolver : public TypeCheckBase\n     resolved_item->accept_vis (*this);\n     rust_assert (trait_reference != nullptr);\n \n-    TraitReference &tref = TraitReference::error_node ();\n+    TraitReference *tref = &TraitReference::error_node ();\n     if (context->lookup_trait_reference (\n-\t  trait_reference->get_mappings ().get_defid (), tref))\n+\t  trait_reference->get_mappings ().get_defid (), &tref))\n       {\n \treturn tref;\n       }\n@@ -179,13 +179,13 @@ class TraitResolver : public TypeCheckBase\n \titem_refs.push_back (std::move (trait_item_ref));\n       }\n \n-    tref = TraitReference (trait_reference, item_refs);\n+    TraitReference trait_object (trait_reference, item_refs);\n     context->insert_trait_reference (\n-      trait_reference->get_mappings ().get_defid (), std::move (tref));\n+      trait_reference->get_mappings ().get_defid (), std::move (trait_object));\n \n-    tref = TraitReference::error_node ();\n+    tref = &TraitReference::error_node ();\n     bool ok = context->lookup_trait_reference (\n-      trait_reference->get_mappings ().get_defid (), tref);\n+      trait_reference->get_mappings ().get_defid (), &tref);\n     rust_assert (ok);\n \n     return tref;"}, {"sha": "ce694da04e55feef91f117db7ba7aecf55415a9a", "filename": "gcc/rust/typecheck/rust-hir-type-bounds.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f544652b42f9c9330e87ceb6df517d675aa5300/gcc%2Frust%2Ftypecheck%2Frust-hir-type-bounds.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f544652b42f9c9330e87ceb6df517d675aa5300/gcc%2Frust%2Ftypecheck%2Frust-hir-type-bounds.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-bounds.h?ref=3f544652b42f9c9330e87ceb6df517d675aa5300", "patch": "@@ -31,8 +31,7 @@ class TypeBoundsProbe : public TypeCheckBase\n   using Rust::Resolver::TypeCheckBase::visit;\n \n public:\n-  static std::vector<std::reference_wrapper<TraitReference>>\n-  Probe (const TyTy::BaseType *receiver)\n+  static std::vector<TraitReference *> Probe (const TyTy::BaseType *receiver)\n   {\n     TypeBoundsProbe probe (receiver);\n     probe.scan ();\n@@ -48,7 +47,7 @@ class TypeBoundsProbe : public TypeCheckBase\n   {}\n \n   const TyTy::BaseType *receiver;\n-  std::vector<std::reference_wrapper<TraitReference>> trait_references;\n+  std::vector<TraitReference *> trait_references;\n };\n \n } // namespace Resolver"}, {"sha": "3dd0a1992575374222df7d474357b8456eb56071", "filename": "gcc/rust/typecheck/rust-hir-type-check-base.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f544652b42f9c9330e87ceb6df517d675aa5300/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f544652b42f9c9330e87ceb6df517d675aa5300/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.h?ref=3f544652b42f9c9330e87ceb6df517d675aa5300", "patch": "@@ -202,7 +202,7 @@ class TypeCheckBase : public HIR::HIRVisitor\n       context (TypeCheckContext::get ())\n   {}\n \n-  TraitReference &resolve_trait_path (HIR::TypePath &);\n+  TraitReference *resolve_trait_path (HIR::TypePath &);\n \n   Analysis::Mappings *mappings;\n   Resolver *resolver;"}, {"sha": "6743c8b9f2de3fcac79bde07b14a92c9b48041a1", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f544652b42f9c9330e87ceb6df517d675aa5300/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f544652b42f9c9330e87ceb6df517d675aa5300/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=3f544652b42f9c9330e87ceb6df517d675aa5300", "patch": "@@ -244,7 +244,7 @@ class TypeCheckExpr : public TypeCheckBase\n       = resolved_candidate.is_impl_candidate ()\n \t  ? resolved_candidate.item.impl.impl_item->get_impl_mappings ()\n \t      .get_nodeid ()\n-\t  : resolved_candidate.item.trait.item_ref.get_mappings ()\n+\t  : resolved_candidate.item.trait.item_ref->get_mappings ()\n \t      .get_nodeid ();\n \n     if (lookup_tyty->get_kind () != TyTy::TypeKind::FNDEF)\n@@ -994,7 +994,7 @@ class TypeCheckExpr : public TypeCheckBase\n \telse\n \t  {\n \t    resolved_node_id\n-\t      = candidate.item.trait.item_ref.get_mappings ().get_nodeid ();\n+\t      = candidate.item.trait.item_ref->get_mappings ().get_nodeid ();\n \t  }\n \n \tif (seg.has_generic_args ())"}, {"sha": "877550212a8690189700f26e700cbd3b1c8c9fca", "filename": "gcc/rust/typecheck/rust-hir-type-check-item.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f544652b42f9c9330e87ceb6df517d675aa5300/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f544652b42f9c9330e87ceb6df517d675aa5300/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h?ref=3f544652b42f9c9330e87ceb6df517d675aa5300", "patch": "@@ -43,12 +43,12 @@ class TypeCheckItem : public TypeCheckBase\n \n   void visit (HIR::ImplBlock &impl_block) override\n   {\n-    TraitReference &trait_reference = TraitReference::error_node ();\n+    TraitReference *trait_reference = &TraitReference::error_node ();\n     if (impl_block.has_trait_ref ())\n       {\n \tstd::unique_ptr<HIR::TypePath> &ref = impl_block.get_trait_ref ();\n \ttrait_reference = TraitResolver::Resolve (*ref.get ());\n-\trust_assert (!trait_reference.is_error ());\n+\trust_assert (!trait_reference->is_error ());\n       }\n \n     TyTy::BaseType *self = nullptr;\n@@ -60,7 +60,7 @@ class TypeCheckItem : public TypeCheckBase\n \treturn;\n       }\n \n-    bool is_trait_impl_block = !trait_reference.is_error ();\n+    bool is_trait_impl_block = !trait_reference->is_error ();\n \n     std::vector<std::reference_wrapper<const TraitItemReference>>\n       trait_item_refs;\n@@ -72,20 +72,20 @@ class TypeCheckItem : public TypeCheckBase\n \t  {\n \t    auto &trait_item_ref\n \t      = TypeCheckImplItemWithTrait::Resolve (impl_item.get (), self,\n-\t\t\t\t\t\t     trait_reference);\n+\t\t\t\t\t\t     *trait_reference);\n \t    trait_item_refs.push_back (trait_item_ref);\n \t  }\n       }\n \n     bool impl_block_missing_trait_items\n       = is_trait_impl_block\n-\t&& trait_reference.size () != trait_item_refs.size ();\n+\t&& trait_reference->size () != trait_item_refs.size ();\n     if (impl_block_missing_trait_items)\n       {\n \t// filter the missing impl_items\n \tstd::vector<std::reference_wrapper<const TraitItemReference>>\n \t  missing_trait_items;\n-\tfor (auto &trait_item_ref : trait_reference.get_trait_items ())\n+\tfor (auto &trait_item_ref : trait_reference->get_trait_items ())\n \t  {\n \t    bool found = false;\n \t    for (const TraitItemReference &implemented_trait_item :\n@@ -120,7 +120,7 @@ class TypeCheckItem : public TypeCheckBase\n \n \t    rust_error_at (r, \"missing %s in implementation of trait %<%s%>\",\n \t\t\t   missing_items_buf.c_str (),\n-\t\t\t   trait_reference.get_name ().c_str ());\n+\t\t\t   trait_reference->get_name ().c_str ());\n \t  }\n       }\n   }"}, {"sha": "ef1510e013983ab3dadb1ffd25fa3bccc7df0e43", "filename": "gcc/rust/typecheck/rust-hir-type-check-type.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f544652b42f9c9330e87ceb6df517d675aa5300/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f544652b42f9c9330e87ceb6df517d675aa5300/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h?ref=3f544652b42f9c9330e87ceb6df517d675aa5300", "patch": "@@ -280,8 +280,11 @@ class TypeResolveGenericParam : public TypeCheckBase\n \t\tcase HIR::TypeParamBound::BoundType::TRAITBOUND: {\n \t\t  HIR::TraitBound *b\n \t\t    = static_cast<HIR::TraitBound *> (bound.get ());\n+\n+\t\t  TraitReference *trait = resolve_trait_path (b->get_path ());\n \t\t  TyTy::TypeBoundPredicate predicate (\n-\t\t    &resolve_trait_path (b->get_path ()));\n+\t\t    trait->get_mappings ().get_defid ());\n+\n \t\t  specified_bounds.push_back (std::move (predicate));\n \t\t}\n \t\tbreak;"}, {"sha": "d834ad88c3681c7b20a9e3f292ad4ec5b3c87de1", "filename": "gcc/rust/typecheck/rust-hir-type-check.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f544652b42f9c9330e87ceb6df517d675aa5300/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f544652b42f9c9330e87ceb6df517d675aa5300/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.h?ref=3f544652b42f9c9330e87ceb6df517d675aa5300", "patch": "@@ -92,13 +92,13 @@ class TypeCheckContext\n     trait_context.emplace (id, std::move (ref));\n   }\n \n-  bool lookup_trait_reference (DefId id, TraitReference &ref)\n+  bool lookup_trait_reference (DefId id, TraitReference **ref)\n   {\n     auto it = trait_context.find (id);\n     if (it == trait_context.end ())\n       return false;\n \n-    ref = it->second;\n+    *ref = &it->second;\n     return true;\n   }\n "}, {"sha": "3562e85477a4143ebfa1d98cbd8289a25242275d", "filename": "gcc/rust/typecheck/rust-tyty-bounds.cc", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f544652b42f9c9330e87ceb6df517d675aa5300/gcc%2Frust%2Ftypecheck%2Frust-tyty-bounds.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f544652b42f9c9330e87ceb6df517d675aa5300/gcc%2Frust%2Ftypecheck%2Frust-tyty-bounds.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-bounds.cc?ref=3f544652b42f9c9330e87ceb6df517d675aa5300", "patch": "@@ -48,14 +48,14 @@ TypeBoundsProbe::scan ()\n \n   for (auto &trait_path : possible_trait_paths)\n     {\n-      TraitReference &trait_ref = TraitResolver::Resolve (*trait_path);\n+      TraitReference *trait_ref = TraitResolver::Resolve (*trait_path);\n \n-      if (!trait_ref.is_error ())\n+      if (!trait_ref->is_error ())\n \ttrait_references.push_back (trait_ref);\n     }\n }\n \n-TraitReference &\n+TraitReference *\n TypeCheckBase::resolve_trait_path (HIR::TypePath &path)\n {\n   return TraitResolver::Resolve (path);\n@@ -68,7 +68,19 @@ namespace TyTy {\n std::string\n TypeBoundPredicate::as_string () const\n {\n-  return reference->as_string ();\n+  return get ()->as_string ();\n+}\n+\n+const Resolver::TraitReference *\n+TypeBoundPredicate::get () const\n+{\n+  auto context = Resolver::TypeCheckContext::get ();\n+\n+  Resolver::TraitReference *ref = nullptr;\n+  bool ok = context->lookup_trait_reference (reference, &ref);\n+  rust_assert (ok);\n+\n+  return ref;\n }\n \n } // namespace TyTy"}, {"sha": "88b6c3555ad21d6980817954a44a8e8d4b2d65c0", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f544652b42f9c9330e87ceb6df517d675aa5300/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f544652b42f9c9330e87ceb6df517d675aa5300/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=3f544652b42f9c9330e87ceb6df517d675aa5300", "patch": "@@ -49,11 +49,11 @@ BaseType::satisfies_bound (const TypeBoundPredicate &predicate) const\n \treturn true;\n     }\n \n-  std::vector<std::reference_wrapper<Resolver::TraitReference>> probed\n+  std::vector<Resolver::TraitReference *> probed\n     = Resolver::TypeBoundsProbe::Probe (this);\n-  for (const Resolver::TraitReference &bound : probed)\n+  for (const Resolver::TraitReference *bound : probed)\n     {\n-      bool found = bound.get_mappings ().get_defid ()\n+      bool found = bound->get_mappings ().get_defid ()\n \t\t   == query->get_mappings ().get_defid ();\n       if (found)\n \treturn true;"}, {"sha": "f6f95792068cc991035d0fb59cad81b7330cefb3", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f544652b42f9c9330e87ceb6df517d675aa5300/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f544652b42f9c9330e87ceb6df517d675aa5300/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=3f544652b42f9c9330e87ceb6df517d675aa5300", "patch": "@@ -132,26 +132,14 @@ class TypeKindFormat\n class TypeBoundPredicate\n {\n public:\n-  TypeBoundPredicate (Resolver::TraitReference *reference)\n-    : reference (reference)\n-  {}\n-\n-  TypeBoundPredicate (const TypeBoundPredicate &other)\n-    : reference (other.reference)\n-  {}\n-\n-  TypeBoundPredicate &operator= (const TypeBoundPredicate &other)\n-  {\n-    reference = other.reference;\n-    return *this;\n-  }\n+  TypeBoundPredicate (DefId reference) : reference (reference) {}\n \n   std::string as_string () const;\n \n-  const Resolver::TraitReference *get () const { return reference; }\n+  const Resolver::TraitReference *get () const;\n \n private:\n-  Resolver::TraitReference *reference;\n+  DefId reference;\n };\n \n class TypeBoundsMappings"}, {"sha": "825553ce4966eca829ebc2e8869c94704e2228b1", "filename": "gcc/testsuite/rust/compile/traits7.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f544652b42f9c9330e87ceb6df517d675aa5300/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftraits7.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f544652b42f9c9330e87ceb6df517d675aa5300/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftraits7.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftraits7.rs?ref=3f544652b42f9c9330e87ceb6df517d675aa5300", "patch": "@@ -0,0 +1,24 @@\n+trait Foo {\n+    fn default() -> i32;\n+}\n+\n+trait Bar {\n+    fn not_default() -> i32;\n+}\n+\n+struct Test(i32);\n+\n+impl Foo for Test {\n+    fn default() -> i32 {\n+        1234\n+    }\n+}\n+\n+fn type_bound_test<T: Foo + Bar>() -> i32 {\n+    T::default()\n+}\n+\n+fn main() {\n+    let a = type_bound_test::<Test>();\n+    // { dg-error \"bounds not satisfied for Test\" \"\" { target *-*-* } .-1 }\n+}"}]}