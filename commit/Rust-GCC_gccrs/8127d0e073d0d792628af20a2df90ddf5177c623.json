{"sha": "8127d0e073d0d792628af20a2df90ddf5177c623", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODEyN2QwZTA3M2QwZDc5MjYyOGFmMjBhMmRmOTBkZGY1MTc3YzYyMw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2004-09-10T11:02:26Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2004-09-10T11:02:26Z"}, "message": "Revert 2004-09-09  Giovanni Bajo  <giovannibajo@gcc.gnu.org>\n\n\t* lambda-mat.c (lambda_matrix_inverse_hard): Use gcc_assert\n\tand gcc_unreachable instead of abort.\n\t* lambda.h (lambda_vector_min_nz): Likewise.\n\t* langhooks.c lhd_set_decl_assembler_name, lhd_can_use_bit_fields_p,\n\tlhd_incomplete_type_error, lhd_expand_expr, lhd_types_compatible_p,\n\tlhd_gimplify_expr): Likewise.\n\t* lcm.c (optimize_mode_switching): Likewise.\n\t* local-alloc.c (update_equiv_regs, block_alloc, find_free_reg):\n\tLikewise.\n\t* loop-doloop.c (doloop_modify): Likewise.\n\t* loop-invariant.c (record_use): Likewise.\n\t* loop-iv.c (get_biv_step_1, get_biv_step, iv_analyze, get_iv_value,\n\tcanon_condition, simplify_using_condition,\n\tsimplify_using_initial_values, shorten_into_mode,\n\tcanonicalize_iv_subregs, iv_number_of_iterations): Likewise.\n\t* loop-unroll.c (unroll_and_peel_loops, peel_loop_completely,\n\tunroll_loop_constant_iterations, unroll_loop_runtime_iterations,\n\tpeel_loop_simple, unroll_loop_stupid): Likewise.\n\t* loop-unswitch.c (compare_and_jump_seq, unswitch_single_loop,\n\tunswitch_loop): Likewise.\n\t* loop.c (gen_prefetch, loop_optimize, rtx_equal_for_loop_p,\n\tmove_movables, replace_call_address, find_and_verify_loops,\n\trtx_equal_for_prefetch_p, record_giv, general_induction_var,\n\tsimplify_giv_expr, check_ext_dependent_givs, try_copy_prop,\n\tloop_giv_dump): Likewise.\n\t* loop.h (INSN_LUID): Likewise.\n\t* modulo-sched.c (normalize_sched_times, generate_prolog_epilog,\n\tsms_schedule, check_nodes_order): Likewise.\n\t* optabs.c (gen_conditional, add_equal_note, expand_simple_binop,\n\texpand_twoval_unop, expand_twoval_binop, expand_twoval_binop_libfunc,\n\texpand_simple_unop, emit_no_conflict_block, prepare_cmp_insn,\n\temit_cmp_and_jump_insn_1, emit_cmp_and_jump_insns,\n\tprepare_float_lib_cmp, gen_add2_insn, have_add2_insn, gen_sub2_insn,\n\thave_sub2_insn, expand_float, expand_fix, debug_optab_libfuncs):\n\tLikewise.\n\t* opts.c (common_handle_option): Likewise.\n\t* params.c (set_param_value): Likewise.\n\t* passes.c (open_dump_file, rest_of_handle_final): Likewise.\n\t* postreload-gcse.c (expr_equiv_p, oprs_unchanged_p,hash_scan_set,\n\treg_set_between_after_reload_p, reg_used_between_after_reload_p,\n\tget_avail_load_store_reg, eliminate_partially_redundant_load):\n\tLikewise.\n\t* postreload.c (reload_cse_simplify_set, reload_combine_note_use):\n\tLikewise.\n\t* predict.c (tree_predicted_by_p, expected_value_to_br_prob,\n\tpropagate_freq, expensive_function_p): Likewise.\n\t* pretty-print.c (pp_base_format_text)\n\t* profile.c (instrument_edges, instrument_values,\n\tcompute_branch_probabilities, branch_prob, union_groups,\n\tend_branch_prob, tree_register_profile_hooks): Likewise.\n\nFrom-SVN: r87290", "tree": {"sha": "e64840975a1fb341da6f0ef0ef7e39e120efacf6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e64840975a1fb341da6f0ef0ef7e39e120efacf6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8127d0e073d0d792628af20a2df90ddf5177c623", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8127d0e073d0d792628af20a2df90ddf5177c623", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8127d0e073d0d792628af20a2df90ddf5177c623", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8127d0e073d0d792628af20a2df90ddf5177c623/comments", "author": null, "committer": null, "parents": [{"sha": "108ebf88b21935d2e28ffe205b2126b49acf9e12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/108ebf88b21935d2e28ffe205b2126b49acf9e12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/108ebf88b21935d2e28ffe205b2126b49acf9e12"}], "stats": {"total": 815, "additions": 405, "deletions": 410}, "files": [{"sha": "2e6dcd013e8543cd049e5957a187f6d32b81f928", "filename": "gcc/ChangeLog", "status": "modified", "additions": 0, "deletions": 79, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8127d0e073d0d792628af20a2df90ddf5177c623/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8127d0e073d0d792628af20a2df90ddf5177c623/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8127d0e073d0d792628af20a2df90ddf5177c623", "patch": "@@ -10,85 +10,6 @@\n \ttree-ssa-threadupdate.c, tree-vectorizer.c, tree-vectorizer.h,\n \tvalue-prof.c: Fix comment typos.  Follow spelling conventions.\n \n-2004-09-10  Giovanni Bajo  <giovannibajo@gcc.gnu.org>\n-\n-\t* unroll.c (unroll_loop, calculate_giv_inc, initial_reg_note_copy,\n-\tfinal_reg_note_copy, copy_loop_body, fold_rtx_mult_add,\n-\tfinal_giv_value, loop_iterations): Replace abort with gcc_assert and\n-\tgcc_unreachable.\n-\t* value-prof.c (rtl_find_values_to_profile,\n-\trtl_register_value_prof_hooks, tree_find_values_to_profile,\n-\ttree_value_profile_transformations, tree_register_value_prof_hooks):\n-\tLikewise.\n-\t* varasm.c (named_section_flags, named_section, make_decl_rtl,\n-\tasm_emit_uninitialised, assemble_external, assemble_integer,\n-\tdecode_addr_const, const_hash_1, compare_constant, copy_constant,\n-\tforce_const_mem, output_constant_pool_2, output_constant_pool_1,\n-\toutput_constant, output_constructor, supports_one_only,\n-\tmake_decl_one_only, decl_tls_model, default_no_named_section,\n-\tdefault_elf_select_section_1, default_unique_section_1): Likewise.\n-\t* varray.c (varray_copy): Likewise.\n-\t* var-tracking.c (stack_adjust_offset_pre_post, variable_htab_free,\n-\tvariable_union, dataflow_set_different_2, count_uses,\n-\tvariable_was_changed, set_frame_base_location, set_variable_part,\n-\temit_note_insn_var_location, vt_emit_notes,\n-\tvt_add_function_parameters): Likewise.\n-\t* vec.c (vec_gc_o_reserve): Likewise.\n-\t* vmsdbgout.c (addr_const_to_string): Likewise.\n-\n-2004-09-10  Giovanni Bajo  <giovannibajo@gcc.gnu.org>\n-\n-\t* lambda-mat.c (lambda_matrix_inverse_hard): Use gcc_assert\n-\tand gcc_unreachable instead of abort.\n-\t* lambda.h (lambda_vector_min_nz): Likewise.\n-\t* langhooks.c lhd_set_decl_assembler_name, lhd_can_use_bit_fields_p,\n-\tlhd_incomplete_type_error, lhd_expand_expr, lhd_types_compatible_p,\n-\tlhd_gimplify_expr): Likewise.\n-\t* lcm.c (optimize_mode_switching): Likewise.\n-\t* local-alloc.c (update_equiv_regs, block_alloc, find_free_reg):\n-\tLikewise.\n-\t* loop-doloop.c (doloop_modify): Likewise.\n-\t* loop-invariant.c (record_use): Likewise.\n-\t* loop-iv.c (get_biv_step_1, get_biv_step, iv_analyze, get_iv_value,\n-\tcanon_condition, simplify_using_condition,\n-\tsimplify_using_initial_values, shorten_into_mode,\n-\tcanonicalize_iv_subregs, iv_number_of_iterations): Likewise.\n-\t* loop-unroll.c (unroll_and_peel_loops, peel_loop_completely,\n-\tunroll_loop_constant_iterations, unroll_loop_runtime_iterations,\n-\tpeel_loop_simple, unroll_loop_stupid): Likewise.\n-\t* loop-unswitch.c (compare_and_jump_seq, unswitch_single_loop,\n-\tunswitch_loop): Likewise.\n-\t* loop.c (gen_prefetch, loop_optimize, rtx_equal_for_loop_p,\n-\tmove_movables, replace_call_address, find_and_verify_loops,\n-\trtx_equal_for_prefetch_p, record_giv, general_induction_var,\n-\tsimplify_giv_expr, check_ext_dependent_givs, try_copy_prop,\n-\tloop_giv_dump): Likewise.\n-\t* loop.h (INSN_LUID): Likewise.\n-\t* modulo-sched.c (normalize_sched_times, generate_prolog_epilog,\n-\tsms_schedule, check_nodes_order): Likewise.\n-\t* optabs.c (gen_conditional, add_equal_note, expand_simple_binop,\n-\texpand_twoval_unop, expand_twoval_binop, expand_twoval_binop_libfunc,\n-\texpand_simple_unop, emit_no_conflict_block, prepare_cmp_insn,\n-\temit_cmp_and_jump_insn_1, emit_cmp_and_jump_insns,\n-\tprepare_float_lib_cmp, gen_add2_insn, have_add2_insn, gen_sub2_insn,\n-\thave_sub2_insn, expand_float, expand_fix, debug_optab_libfuncs):\n-\tLikewise.\n-\t* opts.c (common_handle_option): Likewise.\n-\t* params.c (set_param_value): Likewise.\n-\t* passes.c (open_dump_file, rest_of_handle_final): Likewise.\n-\t* postreload-gcse.c (expr_equiv_p, oprs_unchanged_p,hash_scan_set,\n-\treg_set_between_after_reload_p, reg_used_between_after_reload_p,\n-\tget_avail_load_store_reg, eliminate_partially_redundant_load):\n-\tLikewise.\n-\t* postreload.c (reload_cse_simplify_set, reload_combine_note_use):\n-\tLikewise.\n-\t* predict.c (tree_predicted_by_p, expected_value_to_br_prob,\n-\tpropagate_freq, expensive_function_p): Likewise.\n-\t* pretty-print.c (pp_base_format_text)\n-\t* profile.c (instrument_edges, instrument_values,\n-\tcompute_branch_probabilities, branch_prob, union_groups,\n-\tend_branch_prob, tree_register_profile_hooks): Likewise.\n-\n 2004-09-10  Jan Hubicka  <jh@suse.cz>\n \n \t* tree-ssa-dce.c (remove_dead_stmt): Update profile."}, {"sha": "4734dc297b821b847443b45675c82953d762327d", "filename": "gcc/lambda-mat.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8127d0e073d0d792628af20a2df90ddf5177c623/gcc%2Flambda-mat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8127d0e073d0d792628af20a2df90ddf5177c623/gcc%2Flambda-mat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flambda-mat.c?ref=8127d0e073d0d792628af20a2df90ddf5177c623", "patch": "@@ -379,7 +379,8 @@ lambda_matrix_inverse_hard (lambda_matrix mat, lambda_matrix inv, int n)\n       diagonal = row[j];\n \n       /* If the matrix is singular, abort.  */\n-      gcc_assert (diagonal != 0);\n+      if (diagonal == 0)\n+\tabort ();\n \n       determinant = determinant * diagonal;\n "}, {"sha": "ec48ea44a7ddb5be35614196b931da18a9a49b70", "filename": "gcc/lambda.h", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8127d0e073d0d792628af20a2df90ddf5177c623/gcc%2Flambda.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8127d0e073d0d792628af20a2df90ddf5177c623/gcc%2Flambda.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flambda.h?ref=8127d0e073d0d792628af20a2df90ddf5177c623", "patch": "@@ -290,15 +290,19 @@ lambda_vector_min_nz (lambda_vector vec1, int n, int start)\n {\n   int j;\n   int min = -1;\n-  gcc_assert (start <= n);\n+#ifdef ENABLE_CHECKING \n+  if (start > n)\n+    abort ();\n+#endif\n   for (j = start; j < n; j++)\n     {\n       if (vec1[j])\n \tif (min < 0 || vec1[j] < vec1[min])\n \t  min = j;\n     }\n \n-  gcc_assert (min >= 0);\n+  if (min < 0)\n+    abort ();\n \n   return min;\n }"}, {"sha": "9f0a236e8d3d3cb5576542498edf632a67f46fdd", "filename": "gcc/langhooks.c", "status": "modified", "additions": 38, "deletions": 31, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8127d0e073d0d792628af20a2df90ddf5177c623/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8127d0e073d0d792628af20a2df90ddf5177c623/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=8127d0e073d0d792628af20a2df90ddf5177c623", "patch": "@@ -156,35 +156,38 @@ lhd_set_decl_assembler_name (tree decl)\n   /* The language-independent code should never use the\n      DECL_ASSEMBLER_NAME for lots of DECLs.  Only FUNCTION_DECLs and\n      VAR_DECLs for variables with static storage duration need a real\n-     DECL_ASSEMBLER_NAME.\n-     Nobody should ever be asking for the DECL_ASSEMBLER_NAME of\n-     these DECLs -- unless they're in language-dependent code, in\n-     which case set_decl_assembler_name hook should handle things.  */\n-  gcc_assert (TREE_CODE (decl) == FUNCTION_DECL\n-\t      || (TREE_CODE (decl) == VAR_DECL\n-\t\t  && (TREE_STATIC (decl)\n-\t\t      || DECL_EXTERNAL (decl)\n-\t\t      || TREE_PUBLIC (decl))));\n-\n-  /* By default, assume the name to use in assembly code is the\n-      same as that used in the source language.  (That's correct\n-      for C, and GCC used to set DECL_ASSEMBLER_NAME to the same\n-      value as DECL_NAME in build_decl, so this choice provides\n-      backwards compatibility with existing front-ends.\n-\n-      Can't use just the variable's own name for a variable whose\n-      scope is less than the whole compilation.  Concatenate a\n-      distinguishing number - we use the DECL_UID.  */\n-  if (TREE_PUBLIC (decl) || DECL_CONTEXT (decl) == NULL_TREE)\n-    SET_DECL_ASSEMBLER_NAME (decl, DECL_NAME (decl));\n-  else\n+     DECL_ASSEMBLER_NAME.  */\n+  if (TREE_CODE (decl) == FUNCTION_DECL\n+      || (TREE_CODE (decl) == VAR_DECL\n+\t  && (TREE_STATIC (decl)\n+\t      || DECL_EXTERNAL (decl)\n+\t      || TREE_PUBLIC (decl))))\n     {\n-      const char *name = IDENTIFIER_POINTER (DECL_NAME (decl));\n-      char *label;\n+      /* By default, assume the name to use in assembly code is the\n+\t same as that used in the source language.  (That's correct\n+\t for C, and GCC used to set DECL_ASSEMBLER_NAME to the same\n+\t value as DECL_NAME in build_decl, so this choice provides\n+\t backwards compatibility with existing front-ends.\n+\n+         Can't use just the variable's own name for a variable whose\n+\t scope is less than the whole compilation.  Concatenate a\n+\t distinguishing number - we use the DECL_UID.  */\n+      if (TREE_PUBLIC (decl) || DECL_CONTEXT (decl) == NULL_TREE)\n+\tSET_DECL_ASSEMBLER_NAME (decl, DECL_NAME (decl));\n+      else\n+\t{\n+\t  const char *name = IDENTIFIER_POINTER (DECL_NAME (decl));\n+\t  char *label;\n \n-      ASM_FORMAT_PRIVATE_NAME (label, name, DECL_UID (decl));\n-      SET_DECL_ASSEMBLER_NAME (decl, get_identifier (label));\n+\t  ASM_FORMAT_PRIVATE_NAME (label, name, DECL_UID (decl));\n+\t  SET_DECL_ASSEMBLER_NAME (decl, get_identifier (label));\n+\t}\n     }\n+  else\n+    /* Nobody should ever be asking for the DECL_ASSEMBLER_NAME of\n+       these DECLs -- unless they're in language-dependent code, in\n+       which case set_decl_assembler_name hook should handle things.  */\n+    abort ();\n }\n \n /* By default we always allow bit-field based optimizations.  */\n@@ -198,7 +201,7 @@ lhd_can_use_bit_fields_p (void)\n tree\n lhd_type_promotes_to (tree ARG_UNUSED (type))\n {\n-  gcc_unreachable ();\n+  abort ();\n }\n \n /* Registration of machine- or os-specific builtin types.  */\n@@ -212,7 +215,10 @@ lhd_register_builtin_type (tree ARG_UNUSED (type),\n void\n lhd_incomplete_type_error (tree ARG_UNUSED (value), tree type)\n {\n-  gcc_assert (TREE_CODE (type) == ERROR_MARK);\n+  if (TREE_CODE (type) == ERROR_MARK)\n+    return;\n+\n+  abort ();\n }\n \n /* Provide a default routine for alias sets that always returns -1.  This\n@@ -241,7 +247,7 @@ lhd_expand_expr (tree ARG_UNUSED (t), rtx ARG_UNUSED (r),\n \t\t int ARG_UNUSED (em),\n \t\t rtx * ARG_UNUSED (a))\n {\n-  gcc_unreachable ();\n+  abort ();\n }\n \n /* The default language-specific function for expanding a decl.  After\n@@ -281,7 +287,7 @@ lhd_types_compatible_p (tree x, tree y)\n    information associated to common tree codes.  If a tree node is\n    completely handled within this function, it should set *SUBTREES to\n    0, so that generic handling isn't attempted.  For language-specific\n-   tree codes, generic handling would assert out, so make sure it is set\n+   tree codes, generic handling would abort(), so make sure it is set\n    properly.  Both SUBTREES and *SUBTREES is guaranteed to be nonzero\n    when the function is called.  */\n \n@@ -436,7 +442,8 @@ lhd_gimplify_expr (tree *expr_p ATTRIBUTE_UNUSED, tree *pre_p ATTRIBUTE_UNUSED,\n size_t\n lhd_tree_size (enum tree_code c ATTRIBUTE_UNUSED)\n {\n-  gcc_unreachable ();\n+  abort ();\n+  return 0;\n }\n \n /* Return true if decl, which is a function decl, may be called by a"}, {"sha": "3432332a06a08db40a8311d9b131a3f7fe9050ad", "filename": "gcc/lcm.c", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8127d0e073d0d792628af20a2df90ddf5177c623/gcc%2Flcm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8127d0e073d0d792628af20a2df90ddf5177c623/gcc%2Flcm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flcm.c?ref=8127d0e073d0d792628af20a2df90ddf5177c623", "patch": "@@ -1029,7 +1029,8 @@ optimize_mode_switching (FILE *file)\n \t{\n \t  regset live_at_end = eg->src->global_live_at_end;\n \n-\t  gcc_assert (!pre_exit);\n+\t  if (pre_exit)\n+\t    abort ();\n \t  pre_exit = split_edge (eg);\n \t  COPY_REG_SET (pre_exit->global_live_at_start, live_at_end);\n \t  COPY_REG_SET (pre_exit->global_live_at_end, live_at_end);\n@@ -1207,22 +1208,21 @@ optimize_mode_switching (FILE *file)\n \t\t  emited = true;\n \t\t  if (JUMP_P (BB_END (src_bb)))\n \t\t    emit_insn_before (mode_set, BB_END (src_bb));\n+\t\t  /* It doesn't make sense to switch to normal mode\n+\t\t     after a CALL_INSN, so we're going to abort if we\n+\t\t     find one.  The cases in which a CALL_INSN may\n+\t\t     have an abnormal edge are sibcalls and EH edges.\n+\t\t     In the case of sibcalls, the dest basic-block is\n+\t\t     the EXIT_BLOCK, that runs in normal mode; it is\n+\t\t     assumed that a sibcall insn requires normal mode\n+\t\t     itself, so no mode switch would be required after\n+\t\t     the call (it wouldn't make sense, anyway).  In\n+\t\t     the case of EH edges, EH entry points also start\n+\t\t     in normal mode, so a similar reasoning applies.  */\n+\t\t  else if (NONJUMP_INSN_P (BB_END (src_bb)))\n+\t\t    emit_insn_after (mode_set, BB_END (src_bb));\n \t\t  else\n-\t\t    { \n-\t\t     /* It doesn't make sense to switch to normal mode\n-\t\t\tafter a CALL_INSN, so we're going to abort if we\n-\t\t\tfind one.  The cases in which a CALL_INSN may\n-\t\t\thave an abnormal edge are sibcalls and EH edges.\n-\t\t\tIn the case of sibcalls, the dest basic-block is\n-\t\t\tthe EXIT_BLOCK, that runs in normal mode; it is\n-\t\t\tassumed that a sibcall insn requires normal mode\n-\t\t\titself, so no mode switch would be required after\n-\t\t\tthe call (it wouldn't make sense, anyway).  In\n-\t\t\tthe case of EH edges, EH entry points also start\n-\t\t\tin normal mode, so a similar reasoning applies.  */\n-\t\t      gcc_assert (NONJUMP_INSN_P (BB_END (src_bb)));\n-\t\t      emit_insn_after (mode_set, BB_END (src_bb));\n-\t\t    }\n+\t\t    abort ();\n \t\t  bb_info[j][src_bb->index].computing = mode;\n \t\t  RESET_BIT (transp[src_bb->index], j);\n \t\t}"}, {"sha": "a01b99a04250d7740e4897d5f9e8b3dc3b2ca431", "filename": "gcc/local-alloc.c", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8127d0e073d0d792628af20a2df90ddf5177c623/gcc%2Flocal-alloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8127d0e073d0d792628af20a2df90ddf5177c623/gcc%2Flocal-alloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flocal-alloc.c?ref=8127d0e073d0d792628af20a2df90ddf5177c623", "patch": "@@ -1028,9 +1028,9 @@ update_equiv_regs (void)\n \t\t     once and used once.  (If it were only set, but not used,\n \t\t     flow would have deleted the setting insns.)  Hence\n \t\t     there can only be one insn in reg_equiv[REGNO].init_insns.  */\n-\t\t  gcc_assert (reg_equiv[regno].init_insns != NULL_RTX);\n-\t\t  gcc_assert (XEXP (reg_equiv[regno].init_insns, 1)\n-\t\t\t      == NULL_RTX);\n+\t\t  if (reg_equiv[regno].init_insns == NULL_RTX\n+\t\t      || XEXP (reg_equiv[regno].init_insns, 1) != NULL_RTX)\n+\t\t    abort ();\n \t\t  equiv_insn = XEXP (reg_equiv[regno].init_insns, 0);\n \n \t\t  /* We may not move instructions that can throw, since\n@@ -1188,10 +1188,8 @@ block_alloc (int b)\n   while (1)\n     {\n       if (!NOTE_P (insn))\n-\t{\r\n-\t  ++insn_count;\n-\t  gcc_assert (insn_count <= max_uid);\n-\t}\n+\tif (++insn_count > max_uid)\n+\t  abort ();\n       if (insn == BB_HEAD (BASIC_BLOCK (b)))\n \tbreak;\n       insn = PREV_INSN (insn);\n@@ -2112,8 +2110,8 @@ find_free_reg (enum reg_class class, enum machine_mode mode, int qtyno,\n #endif\n \n   /* Validate our parameters.  */\n-  gcc_assert (born_index >= 0);\n-  gcc_assert (born_index < dead_index);\n+  if (born_index < 0 || born_index > dead_index)\n+    abort ();\n \n   /* Don't let a pseudo live in a reg across a function call\n      if we might get a nonlocal goto.  */"}, {"sha": "e463eeab89963488dcade1c7276ef66150f5b9f9", "filename": "gcc/loop-doloop.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8127d0e073d0d792628af20a2df90ddf5177c623/gcc%2Floop-doloop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8127d0e073d0d792628af20a2df90ddf5177c623/gcc%2Floop-doloop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-doloop.c?ref=8127d0e073d0d792628af20a2df90ddf5177c623", "patch": "@@ -303,16 +303,16 @@ doloop_modify (struct loop *loop, struct niter_desc *desc,\n \t  increment_count = true;\n \t  noloop = const1_rtx;\n \t}\n+      else if (XEXP (condition, 1) == const0_rtx)\n+       \tnoloop = const0_rtx;\n       else\n-\t{\n-\t  gcc_assert (XEXP (condition, 1) == const0_rtx);\n-\t  noloop = const0_rtx;\n-\t}\n+\tabort ();\n       break;\n \n     case GE:\n       /* Currently only GE tests against zero are supported.  */\n-      gcc_assert (XEXP (condition, 1) == const0_rtx);\n+      if (XEXP (condition, 1) != const0_rtx)\n+\tabort ();\n \n       noloop = constm1_rtx;\n \n@@ -327,9 +327,9 @@ doloop_modify (struct loop *loop, struct niter_desc *desc,\n \tnonneg = 1;\n       break;\n \n-    default:\n       /* Abort if an invalid doloop pattern has been generated.  */\n-      gcc_unreachable ();\n+    default:\n+      abort ();\n     }\n \n   if (increment_count)"}, {"sha": "2004dbf1df3ce88675a6e49daff833202e2fb942", "filename": "gcc/loop-invariant.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8127d0e073d0d792628af20a2df90ddf5177c623/gcc%2Floop-invariant.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8127d0e073d0d792628af20a2df90ddf5177c623/gcc%2Floop-invariant.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-invariant.c?ref=8127d0e073d0d792628af20a2df90ddf5177c623", "patch": "@@ -353,7 +353,8 @@ record_use (struct def *def, rtx *use, rtx insn)\n \n   if (GET_CODE (*use) == SUBREG)\n     use = &SUBREG_REG (*use);\n-  gcc_assert (REG_P (*use));\n+  if (!REG_P (*use))\n+    abort ();\n \n   u->pos = use;\n   u->insn = insn;"}, {"sha": "a7c43e3150883b94351cdb9ce9a7a685d4d32b2d", "filename": "gcc/loop-iv.c", "status": "modified", "additions": 45, "deletions": 31, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8127d0e073d0d792628af20a2df90ddf5177c623/gcc%2Floop-iv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8127d0e073d0d792628af20a2df90ddf5177c623/gcc%2Floop-iv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-iv.c?ref=8127d0e073d0d792628af20a2df90ddf5177c623", "patch": "@@ -793,15 +793,16 @@ get_biv_step_1 (rtx insn, rtx reg,\n \n     case SIGN_EXTEND:\n     case ZERO_EXTEND:\n-      gcc_assert (GET_MODE (op0) == *inner_mode);\n-      gcc_assert (*extend == UNKNOWN);\n-      gcc_assert (*outer_step == const0_rtx);\n+      if (GET_MODE (op0) != *inner_mode\n+\t  || *extend != UNKNOWN\n+\t  || *outer_step != const0_rtx)\n+\tabort ();\n \n       *extend = code;\n       break;\n \n     default:\n-      gcc_unreachable ();\n+      abort ();\n     }\n \n   return true;\n@@ -825,9 +826,17 @@ get_biv_step (rtx reg, rtx *inner_step, enum machine_mode *inner_mode,\n \t\t       outer_step))\n     return false;\n \n-  gcc_assert (*inner_mode == *outer_mode || *extend != UNKNOWN);\n-  gcc_assert (*inner_mode != *outer_mode || *extend == UNKNOWN);\n-  gcc_assert (*inner_mode != *outer_mode || *outer_step == const0_rtx);\n+  if (*inner_mode != *outer_mode\n+      && *extend == UNKNOWN)\n+    abort ();\n+\n+  if (*inner_mode == *outer_mode\n+      && *extend != UNKNOWN)\n+    abort ();\n+\n+  if (*inner_mode == *outer_mode\n+      && *outer_step != const0_rtx)\n+    abort ();\n \n   return true;\n }\n@@ -1076,21 +1085,23 @@ iv_analyze (rtx insn, rtx def, struct rtx_iv *iv)\n \t  mby = XEXP (rhs, 1);\n \t  if (!CONSTANT_P (mby))\n \t    {\n-\t      gcc_assert (CONSTANT_P (op0));\n+\t      if (!CONSTANT_P (op0))\n+\t\tabort ();\n \t      tmp = op0;\n \t      op0 = mby;\n \t      mby = tmp;\n \t    }\n \t  break;\n \n \tcase ASHIFT:\n-\t  gcc_assert (!CONSTANT_P (XEXP (rhs, 0)));\n+\t  if (CONSTANT_P (XEXP (rhs, 0)))\n+\t    abort ();\n \t  op0 = XEXP (rhs, 0);\n \t  mby = XEXP (rhs, 1);\n \t  break;\n \n \tdefault:\n-\t  gcc_unreachable ();\n+\t  abort ();\n \t}\n \n       amode = GET_MODE (rhs);\n@@ -1181,7 +1192,8 @@ get_iv_value (struct rtx_iv *iv, rtx iteration)\n \n   /* We would need to generate some if_then_else patterns, and so far\n      it is not needed anywhere.  */\n-  gcc_assert (!iv->first_special);\n+  if (iv->first_special)\n+    abort ();\n \n   if (iv->step != const0_rtx && iteration != const0_rtx)\n     val = simplify_gen_binary (PLUS, iv->extend_mode, iv->base,\n@@ -1517,7 +1529,8 @@ canon_condition (rtx cond)\n   mode = GET_MODE (op0);\n   if (mode == VOIDmode)\n     mode = GET_MODE (op1);\n-  gcc_assert (mode != VOIDmode);\n+  if (mode == VOIDmode)\n+    abort ();\n \n   if (GET_CODE (op1) == CONST_INT\n       && GET_MODE_CLASS (mode) != MODE_CC\n@@ -1646,21 +1659,20 @@ simplify_using_condition (rtx cond, rtx *expr, regset altered)\n static void\n eliminate_implied_condition (enum rtx_code op, rtx a, rtx *b)\n {\n-  switch (op)\n+  if (op == AND)\n     {\n-    case AND:\n       /* If A implies *B, we may replace *B by true.  */\n       if (implies_p (a, *b))\n \t*b = const_true_rtx;\n-      break;\n-    case IOR:\n+    }\n+  else if (op == IOR)\n+    {\n       /* If *B implies A, we may replace *B by false.  */\n       if (implies_p (*b, a))\n \t*b = const0_rtx;\n-      break;\n-    default:\n-      gcc_unreachable ();\n     }\n+  else\n+    abort ();\n }\n \n /* Eliminates the conditions in TAIL that are implied by HEAD.  OP is the\n@@ -1702,19 +1714,18 @@ simplify_using_initial_values (struct loop *loop, enum rtx_code op, rtx *expr)\n \n       eliminate_implied_conditions (op, &head, tail);\n \n-      switch (op)\n+      if (op == AND)\n \t{\n-\tcase AND:\n \t  neutral = const_true_rtx;\n \t  aggr = const0_rtx;\n-\t  break;\n-\tcase IOR:\n+\t}\n+      else if (op == IOR)\n+\t{\n \t  neutral = const0_rtx;\n \t  aggr = const_true_rtx;\n-\t  break;\n-\tdefault:\n-\t  gcc_unreachable ();\n \t}\n+      else\n+\tabort ();\n \n       simplify_using_initial_values (loop, UNKNOWN, &head);\n       if (head == aggr)\n@@ -1742,7 +1753,8 @@ simplify_using_initial_values (struct loop *loop, enum rtx_code op, rtx *expr)\n       return;\n     }\n \n-  gcc_assert (op == UNKNOWN);\n+  if (op != UNKNOWN)\n+    abort ();\n \n   e = loop_preheader_edge (loop);\n   if (e->src == ENTRY_BLOCK_PTR)\n@@ -1844,7 +1856,7 @@ shorten_into_mode (struct rtx_iv *iv, enum machine_mode mode,\n \tbreak;\n \n       default:\n-\tgcc_unreachable ();\n+\tabort ();\n     }\n \n   iv->mode = mode;\n@@ -1902,7 +1914,7 @@ canonicalize_iv_subregs (struct rtx_iv *iv0, struct rtx_iv *iv1,\n \tbreak;\n \n       default:\n-\tgcc_unreachable ();\n+\tabort ();\n     }\n \n   /* Values of both variables should be computed in the same mode.  These\n@@ -2001,13 +2013,15 @@ iv_number_of_iterations (struct loop *loop, rtx insn, rtx condition,\n   desc->niter_max = 0;\n \n   cond = GET_CODE (condition);\n-  gcc_assert (COMPARISON_P (condition));\n+  if (!COMPARISON_P (condition))\n+    abort ();\n \n   mode = GET_MODE (XEXP (condition, 0));\n   if (mode == VOIDmode)\n     mode = GET_MODE (XEXP (condition, 1));\n   /* The constant comparisons should be folded.  */\n-  gcc_assert (mode != VOIDmode);\n+  if (mode == VOIDmode)\n+    abort ();\n \n   /* We only handle integers or pointers.  */\n   if (GET_MODE_CLASS (mode) != MODE_INT"}, {"sha": "74957a76ee4d6f10e3abbd58f96671fc668c291b", "filename": "gcc/loop-unroll.c", "status": "modified", "additions": 47, "deletions": 64, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8127d0e073d0d792628af20a2df90ddf5177c623/gcc%2Floop-unroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8127d0e073d0d792628af20a2df90ddf5177c623/gcc%2Floop-unroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-unroll.c?ref=8127d0e073d0d792628af20a2df90ddf5177c623", "patch": "@@ -116,7 +116,7 @@ unroll_and_peel_loops (struct loops *loops, int flags)\n \t{\n \tcase LPT_PEEL_COMPLETELY:\n \t  /* Already done.  */\n-\t  gcc_unreachable ();\n+\t  abort ();\n \tcase LPT_PEEL_SIMPLE:\n \t  peel_loop_simple (loops, loop);\n \t  break;\n@@ -133,7 +133,7 @@ unroll_and_peel_loops (struct loops *loops, int flags)\n \t  check = false;\n \t  break;\n \tdefault:\n-\t  gcc_unreachable ();\n+\t  abort ();\n \t}\n       if (check)\n \t{\n@@ -433,8 +433,6 @@ peel_loop_completely (struct loops *loops, struct loop *loop)\n \n   if (npeel)\n     {\n-      int ok;\n-\n       wont_exit = sbitmap_alloc (npeel + 1);\n       sbitmap_ones (wont_exit);\n       RESET_BIT (wont_exit, 0);\n@@ -444,12 +442,11 @@ peel_loop_completely (struct loops *loops, struct loop *loop)\n       remove_edges = xcalloc (npeel, sizeof (edge));\n       n_remove_edges = 0;\n \n-      ok = duplicate_loop_to_header_edge (loop, loop_preheader_edge (loop),\n-\t\t\t\t\t  loops, npeel,\n-\t\t\t\t\t  wont_exit, desc->out_edge,\n-\t\t\t\t\t  remove_edges, &n_remove_edges,\n-\t\t\t\t\t  DLTHE_FLAG_UPDATE_FREQ);\n-      gcc_assert (ok);\n+      if (!duplicate_loop_to_header_edge (loop, loop_preheader_edge (loop),\n+\t\tloops, npeel,\n+\t\twont_exit, desc->out_edge, remove_edges, &n_remove_edges,\n+\t\tDLTHE_FLAG_UPDATE_FREQ))\n+\tabort ();\n \n       free (wont_exit);\n \n@@ -600,12 +597,11 @@ unroll_loop_constant_iterations (struct loops *loops, struct loop *loop)\n   unsigned max_unroll = loop->lpt_decision.times;\n   struct niter_desc *desc = get_simple_loop_desc (loop);\n   bool exit_at_end = loop_exit_at_end_p (loop);\n-  int ok;\n \n   niter = desc->niter;\n \n-  /* Should not assert out here (such loop should be peeled instead).  */\n-  gcc_assert (niter > max_unroll + 1);\n+  if (niter <= max_unroll + 1)\n+    abort ();  /* Should not get here (such loop should be peeled instead).  */\n \n   exit_mod = niter % (max_unroll + 1);\n \n@@ -631,14 +627,12 @@ unroll_loop_constant_iterations (struct loops *loops, struct loop *loop)\n \n       if (exit_mod)\n \t{\n-\t  int ok;\n-\n-\t  ok = duplicate_loop_to_header_edge (loop, loop_preheader_edge (loop),\n+\t  if (!duplicate_loop_to_header_edge (loop, loop_preheader_edge (loop),\n \t\t\t\t\t      loops, exit_mod,\n \t\t\t\t\t      wont_exit, desc->out_edge,\n \t\t\t\t\t      remove_edges, &n_remove_edges,\n-\t\t\t\t\t      DLTHE_FLAG_UPDATE_FREQ);\n-\t  gcc_assert (ok);\n+\t\t\t\t\t      DLTHE_FLAG_UPDATE_FREQ))\n+\t    abort ();\n \n \t  desc->noloop_assumptions = NULL_RTX;\n \t  desc->niter -= exit_mod;\n@@ -661,18 +655,15 @@ unroll_loop_constant_iterations (struct loops *loops, struct loop *loop)\n       if (exit_mod != max_unroll\n \t  || desc->noloop_assumptions)\n \t{\n-\t  int ok;\n-\n \t  RESET_BIT (wont_exit, 0);\n \t  if (desc->noloop_assumptions)\n \t    RESET_BIT (wont_exit, 1);\n \n-\t  ok = duplicate_loop_to_header_edge (loop, loop_preheader_edge (loop),\n-\t\t\t\t\t      loops, exit_mod + 1,\n-\t\t\t\t\t      wont_exit, desc->out_edge,\n-\t\t\t\t\t      remove_edges, &n_remove_edges,\n-\t\t\t\t\t      DLTHE_FLAG_UPDATE_FREQ);\n-\t  gcc_assert (ok);\n+\t  if (!duplicate_loop_to_header_edge (loop, loop_preheader_edge (loop),\n+\t\tloops, exit_mod + 1,\n+\t\twont_exit, desc->out_edge, remove_edges, &n_remove_edges,\n+\t\tDLTHE_FLAG_UPDATE_FREQ))\n+\t    abort ();\n \n \t  desc->niter -= exit_mod + 1;\n \t  desc->niter_max -= exit_mod + 1;\n@@ -686,12 +677,11 @@ unroll_loop_constant_iterations (struct loops *loops, struct loop *loop)\n     }\n \n   /* Now unroll the loop.  */\n-  ok = duplicate_loop_to_header_edge (loop, loop_latch_edge (loop),\n-\t\t\t\t      loops, max_unroll,\n-\t\t\t\t      wont_exit, desc->out_edge,\n-\t\t\t\t      remove_edges, &n_remove_edges,\n-\t\t\t\t      DLTHE_FLAG_UPDATE_FREQ);\n-  gcc_assert (ok);\n+  if (!duplicate_loop_to_header_edge (loop, loop_latch_edge (loop),\n+\t\tloops, max_unroll,\n+\t\twont_exit, desc->out_edge, remove_edges, &n_remove_edges,\n+\t\tDLTHE_FLAG_UPDATE_FREQ))\n+    abort ();\n \n   free (wont_exit);\n \n@@ -852,7 +842,6 @@ unroll_loop_runtime_iterations (struct loops *loops, struct loop *loop)\n   unsigned max_unroll = loop->lpt_decision.times;\n   struct niter_desc *desc = get_simple_loop_desc (loop);\n   bool exit_at_end = loop_exit_at_end_p (loop);\n-  int ok;\n \n   /* Remember blocks whose dominators will have to be updated.  */\n   dom_bbs = xcalloc (n_basic_blocks, sizeof (basic_block));\n@@ -927,12 +916,11 @@ unroll_loop_runtime_iterations (struct loops *loops, struct loop *loop)\n       && !desc->noloop_assumptions)\n     SET_BIT (wont_exit, 1);\n   ezc_swtch = loop_preheader_edge (loop)->src;\n-  ok = duplicate_loop_to_header_edge (loop, loop_preheader_edge (loop),\n-\t\t\t\t      loops, 1,\n-\t\t\t\t      wont_exit, desc->out_edge,\n-\t\t\t\t      remove_edges, &n_remove_edges,\n-\t\t\t\t      DLTHE_FLAG_UPDATE_FREQ);\n-  gcc_assert (ok);\n+  if (!duplicate_loop_to_header_edge (loop, loop_preheader_edge (loop),\n+\t\tloops, 1,\n+\t\twont_exit, desc->out_edge, remove_edges, &n_remove_edges,\n+\t\tDLTHE_FLAG_UPDATE_FREQ))\n+    abort ();\n \n   /* Record the place where switch will be built for preconditioning.  */\n   swtch = loop_split_edge_with (loop_preheader_edge (loop),\n@@ -944,12 +932,11 @@ unroll_loop_runtime_iterations (struct loops *loops, struct loop *loop)\n       sbitmap_zero (wont_exit);\n       if (i != n_peel - 1 || !last_may_exit)\n \tSET_BIT (wont_exit, 1);\n-      ok = duplicate_loop_to_header_edge (loop, loop_preheader_edge (loop),\n-\t\t\t\t\t  loops, 1,\n-\t\t\t\t\t  wont_exit, desc->out_edge,\n-\t\t\t\t\t  remove_edges, &n_remove_edges,\n-\t\t\t\t\t  DLTHE_FLAG_UPDATE_FREQ);\n-      gcc_assert (ok);\n+      if (!duplicate_loop_to_header_edge (loop, loop_preheader_edge (loop),\n+\t\tloops, 1,\n+\t\twont_exit, desc->out_edge, remove_edges, &n_remove_edges,\n+\t\tDLTHE_FLAG_UPDATE_FREQ))\n+\tabort ();\n \n       /* Create item for switch.  */\n       j = n_peel - i - (extra_zero_check ? 0 : 1);\n@@ -992,12 +979,11 @@ unroll_loop_runtime_iterations (struct loops *loops, struct loop *loop)\n   sbitmap_ones (wont_exit);\n   RESET_BIT (wont_exit, may_exit_copy);\n \n-  ok = duplicate_loop_to_header_edge (loop, loop_latch_edge (loop),\n-\t\t\t\t      loops, max_unroll,\n-\t\t\t\t      wont_exit, desc->out_edge,\n-\t\t\t\t      remove_edges, &n_remove_edges,\n-\t\t\t\t      DLTHE_FLAG_UPDATE_FREQ);\n-  gcc_assert (ok);\n+  if (!duplicate_loop_to_header_edge (loop, loop_latch_edge (loop),\n+\t\tloops, max_unroll,\n+\t\twont_exit, desc->out_edge, remove_edges, &n_remove_edges,\n+\t\tDLTHE_FLAG_UPDATE_FREQ))\n+    abort ();\n \n   free (wont_exit);\n \n@@ -1027,7 +1013,8 @@ unroll_loop_runtime_iterations (struct loops *loops, struct loop *loop)\n      preconditioning and the fact that the value must be valid at entry\n      of the loop.  After passing through the above code, we see that\n      the correct new number of iterations is this:  */\n-  gcc_assert (!desc->const_iter);\n+  if (desc->const_iter)\n+    abort ();\n   desc->niter_expr =\n     simplify_gen_binary (UDIV, desc->mode, old_niter, GEN_INT (max_unroll + 1));\n   desc->niter_max /= max_unroll + 1;\n@@ -1151,16 +1138,14 @@ peel_loop_simple (struct loops *loops, struct loop *loop)\n   sbitmap wont_exit;\n   unsigned npeel = loop->lpt_decision.times;\n   struct niter_desc *desc = get_simple_loop_desc (loop);\n-  int ok;\n \n   wont_exit = sbitmap_alloc (npeel + 1);\n   sbitmap_zero (wont_exit);\n \n-  ok = duplicate_loop_to_header_edge (loop, loop_preheader_edge (loop),\n-\t\t\t\t      loops, npeel, wont_exit,\n-\t\t\t\t      NULL, NULL, NULL,\n-\t\t\t\t      DLTHE_FLAG_UPDATE_FREQ);\n-  gcc_assert (ok);\n+  if (!duplicate_loop_to_header_edge (loop, loop_preheader_edge (loop),\n+\t\tloops, npeel, wont_exit, NULL, NULL, NULL,\n+\t\tDLTHE_FLAG_UPDATE_FREQ))\n+    abort ();\n \n   free (wont_exit);\n \n@@ -1286,16 +1271,14 @@ unroll_loop_stupid (struct loops *loops, struct loop *loop)\n   sbitmap wont_exit;\n   unsigned nunroll = loop->lpt_decision.times;\n   struct niter_desc *desc = get_simple_loop_desc (loop);\n-  int ok;\n \n   wont_exit = sbitmap_alloc (nunroll + 1);\n   sbitmap_zero (wont_exit);\n \n-  ok = duplicate_loop_to_header_edge (loop, loop_latch_edge (loop),\n-\t\t\t\t      loops, nunroll, wont_exit,\n-\t\t\t\t      NULL, NULL, NULL,\n-\t\t\t\t      DLTHE_FLAG_UPDATE_FREQ);\n-  gcc_assert (ok);\n+  if (!duplicate_loop_to_header_edge (loop, loop_latch_edge (loop),\n+\t\tloops, nunroll, wont_exit, NULL, NULL, NULL,\n+\t\tDLTHE_FLAG_UPDATE_FREQ))\n+    abort ();\n \n   free (wont_exit);\n "}, {"sha": "08780f0d58f94075608b028b504c38dff799396e", "filename": "gcc/loop-unswitch.c", "status": "modified", "additions": 23, "deletions": 17, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8127d0e073d0d792628af20a2df90ddf5177c623/gcc%2Floop-unswitch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8127d0e073d0d792628af20a2df90ddf5177c623/gcc%2Floop-unswitch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-unswitch.c?ref=8127d0e073d0d792628af20a2df90ddf5177c623", "patch": "@@ -103,11 +103,13 @@ compare_and_jump_seq (rtx op0, rtx op1, enum rtx_code comp, rtx label, int prob,\n     {\n       /* A hack -- there seems to be no easy generic way how to make a\n \t conditional jump from a ccmode comparison.  */\n-      gcc_assert (cinsn);\n+      if (!cinsn)\n+\tabort ();\n       cond = XEXP (SET_SRC (pc_set (cinsn)), 0);\n-      gcc_assert (GET_CODE (cond) == comp);\n-      gcc_assert (rtx_equal_p (op0, XEXP (cond, 0)));\n-      gcc_assert (rtx_equal_p (op1, XEXP (cond, 1)));\n+      if (GET_CODE (cond) != comp\n+\t  || !rtx_equal_p (op0, XEXP (cond, 0))\n+\t  || !rtx_equal_p (op1, XEXP (cond, 1)))\n+\tabort ();\n       emit_jump_insn (copy_insn (PATTERN (cinsn)));\n       jump = get_last_insn ();\n       JUMP_LABEL (jump) = JUMP_LABEL (cinsn);\n@@ -116,7 +118,8 @@ compare_and_jump_seq (rtx op0, rtx op1, enum rtx_code comp, rtx label, int prob,\n     }\n   else\n     {\n-      gcc_assert (!cinsn);\n+      if (cinsn)\n+\tabort ();\n \n       op0 = force_operand (op0, NULL_RTX);\n       op1 = force_operand (op1, NULL_RTX);\n@@ -376,7 +379,8 @@ unswitch_single_loop (struct loops *loops, struct loop *loop,\n \n   /* Unswitch the loop on this condition.  */\n   nloop = unswitch_loop (loops, loop, bbs[i], cond, cinsn);\n-  gcc_assert (nloop);\n+  if (!nloop)\n+  abort ();\n \n   /* Invoke itself on modified loops.  */\n   unswitch_single_loop (loops, nloop, rconds, num + 1);\n@@ -408,17 +412,19 @@ unswitch_loop (struct loops *loops, struct loop *loop, basic_block unswitch_on,\n   rtx seq;\n \n   /* Some sanity checking.  */\n-  gcc_assert (flow_bb_inside_loop_p (loop, unswitch_on));\n-\n-  gcc_assert (unswitch_on->succ);\n-  gcc_assert (unswitch_on->succ->succ_next);\n-  gcc_assert (!unswitch_on->succ->succ_next->succ_next);\n-\n-  gcc_assert (just_once_each_iteration_p (loop, unswitch_on));\n-  gcc_assert (!loop->inner);\n-  gcc_assert (flow_bb_inside_loop_p (loop, unswitch_on->succ->dest));\n-  gcc_assert (flow_bb_inside_loop_p (loop,\n-\t\t\t\t     unswitch_on->succ->succ_next->dest));\n+  if (!flow_bb_inside_loop_p (loop, unswitch_on))\n+    abort ();\n+  if (!unswitch_on->succ || !unswitch_on->succ->succ_next ||\n+      unswitch_on->succ->succ_next->succ_next)\n+    abort ();\n+  if (!just_once_each_iteration_p (loop, unswitch_on))\n+    abort ();\n+  if (loop->inner)\n+    abort ();\n+  if (!flow_bb_inside_loop_p (loop, unswitch_on->succ->dest))\n+    abort ();\n+  if (!flow_bb_inside_loop_p (loop, unswitch_on->succ->succ_next->dest))\n+    abort ();\n \n   entry = loop_preheader_edge (loop);\n "}, {"sha": "8f1ace8f1c453d8ce80381ba25b81c7e41869dde", "filename": "gcc/loop.c", "status": "modified", "additions": 51, "deletions": 44, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8127d0e073d0d792628af20a2df90ddf5177c623/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8127d0e073d0d792628af20a2df90ddf5177c623/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=8127d0e073d0d792628af20a2df90ddf5177c623", "patch": "@@ -77,7 +77,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #ifndef HAVE_prefetch\n #define HAVE_prefetch 0\n #define CODE_FOR_prefetch 0\n-#define gen_prefetch(a,b,c) (gcc_unreachable(), NULL_RTX)\n+#define gen_prefetch(a,b,c) (abort(), NULL_RTX)\n #endif\n \n /* Give up the prefetch optimizations once we exceed a given threshold.\n@@ -501,8 +501,8 @@ loop_optimize (rtx f, FILE *dumpfile, int flags)\n \n   /* See if we went too far.  Note that get_max_uid already returns\n      one more that the maximum uid of all insn.  */\n-  gcc_assert (get_max_uid () <= max_uid_for_loop);\n-\n+  if (get_max_uid () > max_uid_for_loop)\n+    abort ();\n   /* Now reset it to the actual size we need.  See above.  */\n   max_uid_for_loop = get_max_uid ();\n \n@@ -1746,7 +1746,7 @@ rtx_equal_for_loop_p (rtx x, rtx y, struct loop_movables *movables,\n \t     contain anything but integers and other rtx's,\n \t     except for within LABEL_REFs and SYMBOL_REFs.  */\n \tdefault:\n-\t  gcc_unreachable ();\n+\t  abort ();\n \t}\n     }\n   return 1;\n@@ -1940,24 +1940,21 @@ move_movables (struct loop *loop, struct loop_movables *movables,\n \n \t\t  for (count = m->consec; count >= 0; count--)\n \t\t    {\n-\t\t      if (!NOTE_P (p))\n+\t\t      /* If this is the first insn of a library call sequence,\n+\t\t\t something is very wrong.  */\n+\t\t      if (!NOTE_P (p)\n+\t\t\t  && (temp = find_reg_note (p, REG_LIBCALL, NULL_RTX)))\n+\t\t\tabort ();\n+\n+\t\t      /* If this is the last insn of a libcall sequence, then\n+\t\t\t delete every insn in the sequence except the last.\n+\t\t\t The last insn is handled in the normal manner.  */\n+\t\t      if (!NOTE_P (p)\n+\t\t\t  && (temp = find_reg_note (p, REG_RETVAL, NULL_RTX)))\n \t\t\t{\n-\t\t\t  /* If this is the first insn of a library call\n-\t\t\t     sequence, something is very wrong.  */\n-\t\t\t  gcc_assert (!find_reg_note (p, REG_LIBCALL,\n-\t\t\t\t\t\t      NULL_RTX));\n-\n-\t\t\t  /* If this is the last insn of a libcall sequence,\n-\t\t\t     then delete every insn in the sequence except\n-\t\t\t     the last. The last insn is handled in the\n-\t\t\t     normal manner.  */\n-\t\t\t  temp = find_reg_note (p, REG_RETVAL, NULL_RTX);\n-\t\t\t  if (temp)\n-\t\t\t    {\n-\t\t\t      temp = XEXP (temp, 0);\n-\t\t\t      while (temp != p)\n-\t\t\t\ttemp = delete_insn (temp);\n-\t\t\t    }\n+\t\t\t  temp = XEXP (temp, 0);\n+\t\t\t  while (temp != p)\n+\t\t\t    temp = delete_insn (temp);\n \t\t\t}\n \n \t\t      temp = p;\n@@ -2121,7 +2118,8 @@ move_movables (struct loop *loop, struct loop_movables *movables,\n \t\t\t\t\t<< GET_MODE_BITSIZE (m->savemode)))\n \t\t\t\t      - 1),\n \t\t\t     reg, 1, OPTAB_LIB_WIDEN);\n-\t\t\t  gcc_assert (tem != 0);\n+\t\t\t  if (tem == 0)\n+\t\t\t    abort ();\n \t\t\t  if (tem != reg)\n \t\t\t    emit_move_insn (reg, tem);\n \t\t\t  sequence = get_insns ();\n@@ -2409,7 +2407,8 @@ replace_call_address (rtx x, rtx reg, rtx addr)\n     case MEM:\n       /* If this MEM uses a reg other than the one we expected,\n \t something is wrong.  */\n-      gcc_assert (XEXP (x, 0) == reg);\n+      if (XEXP (x, 0) != reg)\n+\tabort ();\n       XEXP (x, 0) = addr;\n       return;\n \n@@ -2724,7 +2723,8 @@ find_and_verify_loops (rtx f, struct loops *loops)\n \t    break;\n \n \t  case NOTE_INSN_LOOP_END:\n-\t    gcc_assert (current_loop);\n+\t    if (! current_loop)\n+\t      abort ();\n \n \t    current_loop->end = insn;\n \t    current_loop = current_loop->outer;\n@@ -2912,7 +2912,6 @@ find_and_verify_loops (rtx f, struct loops *loops)\n \t\t    if (invert_jump (p, new_label, 1))\n \t\t      {\n \t\t\trtx q, r;\n-\t\t\tbool fail;\n \n \t\t\t/* If no suitable BARRIER was found, create a suitable\n \t\t\t   one before TARGET.  Since TARGET is a fall through\n@@ -2937,8 +2936,8 @@ find_and_verify_loops (rtx f, struct loops *loops)\n \n \t\t\t/* Include the BARRIER after INSN and copy the\n \t\t\t   block after LOC.  */\n-\t\t\tfail = squeeze_notes (&new_label, &last_insn_to_move);\n-\t\t\tgcc_assert (!fail);\n+\t\t\tif (squeeze_notes (&new_label, &last_insn_to_move))\n+\t\t\t  abort ();\n \t\t\treorder_insns (new_label, last_insn_to_move, loc);\n \n \t\t\t/* All those insns are now in TARGET_LOOP.  */\n@@ -2973,7 +2972,8 @@ find_and_verify_loops (rtx f, struct loops *loops)\n \n \t\t\t    /* If we didn't find it, then something is\n \t\t\t       wrong.  */\n-\t\t\t    gcc_assert (r);\n+\t\t\t    if (! r)\n+\t\t\t      abort ();\n \t\t\t  }\n \n \t\t\t/* P is now a jump outside the loop, so it must be put\n@@ -3683,7 +3683,7 @@ rtx_equal_for_prefetch_p (rtx x, rtx y)\n \t     contain anything but integers and other rtx's,\n \t     except for within LABEL_REFs and SYMBOL_REFs.  */\n \tdefault:\n-\t  gcc_unreachable ();\n+\t  abort ();\n \t}\n     }\n   return 1;\n@@ -5721,14 +5721,19 @@ record_giv (const struct loop *loop, struct induction *v, rtx insn,\n   /* Add the giv to the class of givs computed from one biv.  */\n \n   bl = REG_IV_CLASS (ivs, REGNO (src_reg));\n-  gcc_assert (bl);  /* Fatal error, biv missing for this giv?  */\n-  v->next_iv = bl->giv;\n-  bl->giv = v;\n-  /* Don't count DEST_ADDR.  This is supposed to count the number of\n-      insns that calculate givs.  */\n-  if (type == DEST_REG)\n-    bl->giv_count++;\n-  bl->total_benefit += benefit;\n+  if (bl)\n+    {\n+      v->next_iv = bl->giv;\n+      bl->giv = v;\n+      /* Don't count DEST_ADDR.  This is supposed to count the number of\n+\t insns that calculate givs.  */\n+      if (type == DEST_REG)\n+\tbl->giv_count++;\n+      bl->total_benefit += benefit;\n+    }\n+  else\n+    /* Fatal error, biv missing for this giv?  */\n+    abort ();\n \n   if (type == DEST_ADDR)\n     {\n@@ -6383,7 +6388,7 @@ general_induction_var (const struct loop *loop, rtx x, rtx *src_reg,\n       break;\n \n     default:\n-      gcc_unreachable ();\n+      abort ();\n     }\n \n   /* Remove any enclosing USE from ADD_VAL and MULT_VAL (there will be\n@@ -6502,7 +6507,7 @@ simplify_giv_expr (const struct loop *loop, rtx x, rtx *ext_val, int *benefit)\n \t\t\t\t ext_val, benefit);\n \n \t  default:\n-\t    gcc_unreachable ();\n+\t    abort ();\n \t  }\n \n       /* Each argument must be either REG, PLUS, or MULT.  Convert REG to\n@@ -6643,7 +6648,7 @@ simplify_giv_expr (const struct loop *loop, rtx x, rtx *ext_val, int *benefit)\n \t\t\t\t    ext_val, benefit);\n \n \tdefault:\n-\t  gcc_unreachable ();\n+\t  abort ();\n \t}\n \n     case ASHIFT:\n@@ -7395,7 +7400,7 @@ check_ext_dependent_givs (const struct loop *loop, struct iv_class *bl)\n \t    break;\n \n \t  default:\n-\t    gcc_unreachable ();\n+\t    abort ();\n \t  }\n \n \tif (ok)\n@@ -10035,7 +10040,8 @@ try_copy_prop (const struct loop *loop, rtx replacement, unsigned int regno)\n \t  && REG_P (SET_DEST (set))\n \t  && REGNO (SET_DEST (set)) == regno)\n \t{\n-\t  gcc_assert (!init_insn);\n+\t  if (init_insn)\n+\t    abort ();\n \n \t  init_insn = insn;\n \t  if (REGNO_FIRST_UID (regno) == INSN_UID (insn))\n@@ -10068,7 +10074,8 @@ try_copy_prop (const struct loop *loop, rtx replacement, unsigned int regno)\n \t    }\n \t}\n     }\n-  gcc_assert (init_insn);\n+  if (! init_insn)\n+    abort ();\n   if (apply_change_group ())\n     {\n       if (loop_dump_stream)\n@@ -10569,7 +10576,7 @@ loop_giv_dump (const struct induction *v, FILE *file, int verbose)\n \t  fprintf (file, \" ext tr\");\n \t  break;\n \tdefault:\n-\t  gcc_unreachable ();\n+\t  abort ();\n \t}\n     }\n "}, {"sha": "13b0398e83c651e0d0e72b477d03a2087074136e", "filename": "gcc/loop.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8127d0e073d0d792628af20a2df90ddf5177c623/gcc%2Floop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8127d0e073d0d792628af20a2df90ddf5177c623/gcc%2Floop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.h?ref=8127d0e073d0d792628af20a2df90ddf5177c623", "patch": "@@ -45,7 +45,8 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n    of an insn added during loop, since these don't have LUIDs.  */\n \n #define INSN_LUID(INSN)\t\t\t\\\n-  (gcc_assert (INSN_UID (INSN) < max_uid_for_loop), uid_luid[INSN_UID (INSN)])\n+  (INSN_UID (INSN) < max_uid_for_loop ? uid_luid[INSN_UID (INSN)] \\\n+   : (abort (), -1))\n \n #define REGNO_FIRST_LUID(REGNO)\t\t\t\\\n   (REGNO_FIRST_UID (REGNO) < max_uid_for_loop\t\\"}, {"sha": "1207c31aa4fccdf66b79fc44723b7fb1b9c40f7c", "filename": "gcc/modulo-sched.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8127d0e073d0d792628af20a2df90ddf5177c623/gcc%2Fmodulo-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8127d0e073d0d792628af20a2df90ddf5177c623/gcc%2Fmodulo-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmodulo-sched.c?ref=8127d0e073d0d792628af20a2df90ddf5177c623", "patch": "@@ -546,7 +546,8 @@ normalize_sched_times (partial_schedule_ptr ps)\n       ddg_node_ptr u = &g->nodes[i];\n       int normalized_time = SCHED_TIME (u) - amount;\n \n-      gcc_assert (normalized_time >= 0);\n+      if (normalized_time < 0)\n+\tabort ();\n \n       SCHED_TIME (u) = normalized_time;\n       SCHED_ROW (u) = normalized_time % ii;\n@@ -713,8 +714,8 @@ generate_prolog_epilog (partial_schedule_ptr ps, rtx orig_loop_beg,\n       label = XEXP (SET_SRC (cmp), 1);\n       cond = XEXP (SET_SRC (cmp), 0);\n \n-      gcc_assert (c_reg);\n-      gcc_assert (GET_CODE (cond) == NE);\n+      if (! c_reg || GET_CODE (cond) != NE)\n+        abort ();\n \n       XEXP (label, 0) = precond_exit_label;\n       JUMP_LABEL (orig_loop_bct) = precond_exit_label_insn;\n@@ -1024,8 +1025,8 @@ sms_schedule (FILE *dump_file)\n \t}\n \n       /* Make sure this is a doloop.  */\n-      count_reg = doloop_register_get (tail, &comp);\n-      gcc_assert (count_reg);\n+      if ( !(count_reg = doloop_register_get (tail, &comp)))\n+\tabort ();\n \n       /* This should be NULL_RTX if the count is unknown at compile time.  */\n       count_init = const_iteration_count (count_reg, pre_header, &loop_count);\n@@ -1456,9 +1457,8 @@ check_nodes_order (int *node_order, int num_nodes)\n     {\n       int u = node_order[i];\n \n-      gcc_assert (u < num_nodes);\n-      gcc_assert (u >= 0);\n-      gcc_assert (!TEST_BIT (tmp, u));\n+      if (u >= num_nodes || u < 0 || TEST_BIT (tmp, u))\n+\tabort ();\n \n       SET_BIT (tmp, u);\n     }"}, {"sha": "cc48ab539490e4ee0a7e47ba6e9ae648edaa5ad4", "filename": "gcc/optabs.c", "status": "modified", "additions": 70, "deletions": 44, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8127d0e073d0d792628af20a2df90ddf5177c623/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8127d0e073d0d792628af20a2df90ddf5177c623/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=8127d0e073d0d792628af20a2df90ddf5177c623", "patch": "@@ -119,7 +119,7 @@ static rtx expand_parity (enum machine_mode, rtx, rtx);\n \n #ifndef HAVE_conditional_trap\n #define HAVE_conditional_trap 0\n-#define gen_conditional_trap(a,b) (gcc_unreachable (), NULL_RTX)\n+#define gen_conditional_trap(a,b) (abort (), NULL_RTX)\n #endif\n \f\n /* Add a REG_EQUAL note to the last insn in INSNS.  TARGET is being set to\n@@ -138,9 +138,10 @@ add_equal_note (rtx insns, rtx target, enum rtx_code code, rtx op0, rtx op1)\n   rtx last_insn, insn, set;\n   rtx note;\n \n-  gcc_assert (insns);\n-  gcc_assert (INSN_P (insns));\n-  gcc_assert (NEXT_INSN (insns) != NULL_RTX);\n+  if (! insns\n+      || ! INSN_P (insns)\n+      || NEXT_INSN (insns) == NULL_RTX)\n+    abort ();\n \n   if (GET_RTX_CLASS (code) != RTX_COMM_ARITH\n       && GET_RTX_CLASS (code) != RTX_BIN_ARITH\n@@ -671,7 +672,8 @@ expand_simple_binop (enum machine_mode mode, enum rtx_code code, rtx op0,\n \t\t     enum optab_methods methods)\n {\n   optab binop = code_to_optab[(int) code];\n-  gcc_assert (binop != 0);\n+  if (binop == 0)\n+    abort ();\n \n   return expand_binop (mode, binop, op0, op1, target, unsignedp, methods);\n }\n@@ -1710,8 +1712,9 @@ expand_twoval_unop (optab unoptab, rtx op0, rtx targ0, rtx targ1,\n \n       /* We could handle this, but we should always be called with a pseudo\n \t for our targets and all insns should take them as outputs.  */\n-      gcc_assert ((*insn_data[icode].operand[0].predicate) (targ0, mode));\n-      gcc_assert ((*insn_data[icode].operand[1].predicate) (targ1, mode));\n+      if (! (*insn_data[icode].operand[0].predicate) (targ0, mode)\n+\t  || ! (*insn_data[icode].operand[1].predicate) (targ1, mode))\n+\tabort ();\n \n       pat = GEN_FCN (icode) (targ0, targ1, xop0);\n       if (pat)\n@@ -1838,8 +1841,9 @@ expand_twoval_binop (optab binoptab, rtx op0, rtx op1, rtx targ0, rtx targ1,\n \n       /* We could handle this, but we should always be called with a pseudo\n \t for our targets and all insns should take them as outputs.  */\n-      gcc_assert ((*insn_data[icode].operand[0].predicate) (targ0, mode));\n-      gcc_assert ((*insn_data[icode].operand[3].predicate) (targ1, mode));\n+      if (! (*insn_data[icode].operand[0].predicate) (targ0, mode)\n+\t  || ! (*insn_data[icode].operand[3].predicate) (targ1, mode))\n+\tabort ();\n \n       pat = GEN_FCN (icode) (targ0, xop0, xop1, targ1);\n       if (pat)\n@@ -1902,7 +1906,8 @@ expand_twoval_binop_libfunc (optab binoptab, rtx op0, rtx op1,\n   rtx insns;\n \n   /* Exactly one of TARG0 or TARG1 should be non-NULL.  */\n-  gcc_assert ((targ0 != NULL_RTX) ^ (targ1 != NULL_RTX));\n+  if (!((targ0 != NULL_RTX) ^ (targ1 != NULL_RTX)))\n+    abort ();\n \n   mode = GET_MODE (op0);\n   if (!binoptab->handlers[(int) mode].libfunc)\n@@ -1939,7 +1944,8 @@ expand_simple_unop (enum machine_mode mode, enum rtx_code code, rtx op0,\n \t\t    rtx target, int unsignedp)\n {\n   optab unop = code_to_optab[(int) code];\n-  gcc_assert (unop != 0);\n+  if (unop == 0)\n+    abort ();\n \n   return expand_unop (mode, unop, op0, target, unsignedp);\n }\n@@ -2614,7 +2620,8 @@ emit_no_conflict_block (rtx insns, rtx target, rtx op0, rtx op1, rtx equiv)\n \t      }\n \t}\n \n-      gcc_assert (set != 0);\n+      if (set == 0)\n+\tabort ();\n \n       if (! reg_overlap_mentioned_p (target, SET_DEST (set)))\n \t{\n@@ -2925,7 +2932,7 @@ prepare_cmp_insn (rtx *px, rtx *py, enum rtx_code *pcomparison, rtx size,\n \n   /* They could both be VOIDmode if both args are immediate constants,\n      but we should fold that at an earlier stage.\n-     With no special code here, this will assert out,\n+     With no special code here, this will call abort,\n      reminding the programmer to implement such folding.  */\n \n   if (mode != BLKmode && flag_force_mem)\n@@ -2954,10 +2961,11 @@ prepare_cmp_insn (rtx *px, rtx *py, enum rtx_code *pcomparison, rtx size,\n     y = force_reg (mode, y);\n \n #ifdef HAVE_cc0\n-  /* Assert out if we have a non-canonical comparison.  The RTL documentation\n+  /* Abort if we have a non-canonical comparison.  The RTL documentation\n      states that canonical comparisons are required only for targets which\n      have cc0.  */\n-  gcc_assert (!CONSTANT_P (x) || CONSTANT_P (y));\n+  if (CONSTANT_P (x) && ! CONSTANT_P (y))\n+    abort ();\n #endif\n \n   /* Don't let both operands fail to indicate the mode.  */\n@@ -2976,7 +2984,8 @@ prepare_cmp_insn (rtx *px, rtx *py, enum rtx_code *pcomparison, rtx size,\n       rtx opalign\n \t= GEN_INT (MIN (MEM_ALIGN (x), MEM_ALIGN (y)) / BITS_PER_UNIT);\n \n-      gcc_assert (size != 0);\n+      if (size == 0)\n+\tabort ();\n \n       /* Try to use a memory block compare insn - either cmpstr\n \t or cmpmem will do.  */\n@@ -3073,8 +3082,11 @@ prepare_cmp_insn (rtx *px, rtx *py, enum rtx_code *pcomparison, rtx size,\n       return;\n     }\n \n-  gcc_assert (class == MODE_FLOAT);\n-  prepare_float_lib_cmp (px, py, pcomparison, pmode, punsignedp);\n+  if (class == MODE_FLOAT)\n+    prepare_float_lib_cmp (px, py, pcomparison, pmode, punsignedp);\n+\n+  else\n+    abort ();\n }\n \n /* Before emitting an insn with code ICODE, make sure that X, which is going\n@@ -3114,7 +3126,7 @@ emit_cmp_and_jump_insn_1 (rtx x, rtx y, enum machine_mode mode,\n   enum machine_mode wider_mode = mode;\n \n   /* Try combined insns first.  */\n-  for (;;)\n+  do\n     {\n       enum insn_code icode;\n       PUT_MODE (test, wider_mode);\n@@ -3157,12 +3169,15 @@ emit_cmp_and_jump_insn_1 (rtx x, rtx y, enum machine_mode mode,\n \t  return;\n \t}\n \n-      gcc_assert (class == MODE_INT || class == MODE_FLOAT\n-\t\t  || class == MODE_COMPLEX_FLOAT);\n+      if (class != MODE_INT && class != MODE_FLOAT\n+\t  && class != MODE_COMPLEX_FLOAT)\n+\tbreak;\n \n       wider_mode = GET_MODE_WIDER_MODE (wider_mode);\n-      gcc_assert (wider_mode != VOIDmode);\n     }\n+  while (wider_mode != VOIDmode);\n+\n+  abort ();\n }\n \n /* Generate code to compare X with Y so that the condition codes are\n@@ -3193,7 +3208,8 @@ emit_cmp_and_jump_insns (rtx x, rtx y, enum rtx_code comparison, rtx size,\n     {\n       /* If we're not emitting a branch, this means some caller\n          is out of sync.  */\n-      gcc_assert (label);\n+      if (! label)\n+\tabort ();\n \n       op0 = y, op1 = x;\n       comparison = swap_condition (comparison);\n@@ -3264,7 +3280,8 @@ prepare_float_lib_cmp (rtx *px, rtx *py, enum rtx_code *pcomparison,\n \t}\n     }\n \n-  gcc_assert (mode != VOIDmode);\n+  if (mode == VOIDmode)\n+    abort ();\n \n   if (mode != orig_mode)\n     {\n@@ -3322,7 +3339,7 @@ prepare_float_lib_cmp (rtx *px, rtx *py, enum rtx_code *pcomparison,\n \t      break;\n \n \t    default:\n-\t      gcc_unreachable ();\n+\t      abort ();\n \t    }\n \t  equiv = simplify_gen_ternary (IF_THEN_ELSE, word_mode, word_mode,\n \t\t\t\t\tequiv, true_rtx, false_rtx);\n@@ -3624,12 +3641,13 @@ gen_add2_insn (rtx x, rtx y)\n {\n   int icode = (int) add_optab->handlers[(int) GET_MODE (x)].insn_code;\n \n-  gcc_assert ((*insn_data[icode].operand[0].predicate)\n-\t       (x, insn_data[icode].operand[0].mode));\n-  gcc_assert ((*insn_data[icode].operand[1].predicate)\n-\t       (x, insn_data[icode].operand[1].mode));\n-  gcc_assert ((*insn_data[icode].operand[2].predicate)\n-\t       (y, insn_data[icode].operand[2].mode));\n+  if (! ((*insn_data[icode].operand[0].predicate)\n+\t (x, insn_data[icode].operand[0].mode))\n+      || ! ((*insn_data[icode].operand[1].predicate)\n+\t    (x, insn_data[icode].operand[1].mode))\n+      || ! ((*insn_data[icode].operand[2].predicate)\n+\t    (y, insn_data[icode].operand[2].mode)))\n+    abort ();\n \n   return (GEN_FCN (icode) (x, x, y));\n }\n@@ -3658,7 +3676,8 @@ have_add2_insn (rtx x, rtx y)\n {\n   int icode;\n \n-  gcc_assert (GET_MODE (x) != VOIDmode);\n+  if (GET_MODE (x) == VOIDmode)\n+    abort ();\n \n   icode = (int) add_optab->handlers[(int) GET_MODE (x)].insn_code;\n \n@@ -3683,12 +3702,13 @@ gen_sub2_insn (rtx x, rtx y)\n {\n   int icode = (int) sub_optab->handlers[(int) GET_MODE (x)].insn_code;\n \n-  gcc_assert ((*insn_data[icode].operand[0].predicate)\n-\t       (x, insn_data[icode].operand[0].mode));\n-  gcc_assert ((*insn_data[icode].operand[1].predicate)\n-\t       (x, insn_data[icode].operand[1].mode));\n-  gcc_assert ((*insn_data[icode].operand[2].predicate)\n-\t       (y, insn_data[icode].operand[2].mode));\n+  if (! ((*insn_data[icode].operand[0].predicate)\n+\t (x, insn_data[icode].operand[0].mode))\n+      || ! ((*insn_data[icode].operand[1].predicate)\n+\t    (x, insn_data[icode].operand[1].mode))\n+      || ! ((*insn_data[icode].operand[2].predicate)\n+\t    (y, insn_data[icode].operand[2].mode)))\n+    abort ();\n \n   return (GEN_FCN (icode) (x, x, y));\n }\n@@ -3717,7 +3737,8 @@ have_sub2_insn (rtx x, rtx y)\n {\n   int icode;\n \n-  gcc_assert (GET_MODE (x) != VOIDmode);\n+  if (GET_MODE (x) == VOIDmode)\n+    abort ();\n \n   icode = (int) sub_optab->handlers[(int) GET_MODE (x)].insn_code;\n \n@@ -3843,7 +3864,8 @@ expand_float (rtx to, rtx from, int unsignedp)\n   enum machine_mode fmode, imode;\n \n   /* Crash now, because we won't be able to decide which mode to use.  */\n-  gcc_assert (GET_MODE (from) != VOIDmode);\n+  if (GET_MODE (from) == VOIDmode)\n+    abort ();\n \n   /* Look for an insn to do the conversion.  Do it in the specified\n      modes if possible; otherwise convert either input, output or both to\n@@ -4004,7 +4026,8 @@ expand_float (rtx to, rtx from, int unsignedp)\n \tfrom = force_not_mem (from);\n \n       libfunc = tab->handlers[GET_MODE (to)][GET_MODE (from)].libfunc;\n-      gcc_assert (libfunc);\n+      if (!libfunc)\n+\tabort ();\n \n       start_sequence ();\n \n@@ -4187,7 +4210,8 @@ expand_fix (rtx to, rtx from, int unsignedp)\n \n       convert_optab tab = unsignedp ? ufix_optab : sfix_optab;\n       libfunc = tab->handlers[GET_MODE (to)][GET_MODE (from)].libfunc;\n-      gcc_assert (libfunc);\n+      if (!libfunc)\n+\tabort ();\n \n       if (flag_force_mem)\n \tfrom = force_not_mem (from);\n@@ -4800,7 +4824,8 @@ debug_optab_libfuncs (void)\n \th = &o->handlers[j];\n \tif (h->libfunc)\n \t  {\n-\t    gcc_assert (GET_CODE (h->libfunc) == SYMBOL_REF);\n+\t    if (GET_CODE (h->libfunc) != SYMBOL_REF)\n+\t      abort ();\n \t    fprintf (stderr, \"%s\\t%s:\\t%s\\n\",\n \t\t     GET_RTX_NAME (o->code),\n \t\t     GET_MODE_NAME (j),\n@@ -4820,7 +4845,8 @@ debug_optab_libfuncs (void)\n \t  h = &o->handlers[j][k];\n \t  if (h->libfunc)\n \t    {\n-\t      gcc_assert (GET_CODE (h->libfunc) == SYMBOL_REF);\n+\t      if (GET_CODE (h->libfunc) != SYMBOL_REF)\n+\t\tabort ();\n \t      fprintf (stderr, \"%s\\t%s\\t%s:\\t%s\\n\",\n \t\t       GET_RTX_NAME (o->code),\n \t\t       GET_MODE_NAME (j),"}, {"sha": "d570b8fe7f0f8f788e042928d22371e0e1de3e52", "filename": "gcc/opts.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8127d0e073d0d792628af20a2df90ddf5177c623/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8127d0e073d0d792628af20a2df90ddf5177c623/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=8127d0e073d0d792628af20a2df90ddf5177c623", "patch": "@@ -1003,8 +1003,10 @@ common_handle_option (size_t scode, const char *arg, int value)\n     default:\n       /* If the flag was handled in a standard way, assume the lack of\n \t processing here is intentional.  */\n-      gcc_assert (cl_options[scode].flag_var);\n-      break;\n+      if (cl_options[scode].flag_var)\n+\tbreak;\n+\n+      abort ();\n     }\n \n   return 1;"}, {"sha": "e109d3adb3fe863517346b35af1798325f42bbea", "filename": "gcc/params.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8127d0e073d0d792628af20a2df90ddf5177c623/gcc%2Fparams.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8127d0e073d0d792628af20a2df90ddf5177c623/gcc%2Fparams.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.c?ref=8127d0e073d0d792628af20a2df90ddf5177c623", "patch": "@@ -61,7 +61,8 @@ set_param_value (const char *name, int value)\n   size_t i;\n \n   /* Make sure nobody tries to set a parameter to an invalid value.  */\n-  gcc_assert (value != INVALID_PARAM_VAL);\n+  if (value == INVALID_PARAM_VAL)\n+    abort ();\n \n   /* Scan the parameter table to find a matching entry.  */\n   for (i = 0; i < num_compiler_params; ++i)"}, {"sha": "23a65faf277a00d91b80a4f6290757425dd6a11c", "filename": "gcc/passes.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8127d0e073d0d792628af20a2df90ddf5177c623/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8127d0e073d0d792628af20a2df90ddf5177c623/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=8127d0e073d0d792628af20a2df90ddf5177c623", "patch": "@@ -121,8 +121,8 @@ open_dump_file (enum tree_dump_index index, tree decl)\n \n   timevar_push (TV_DUMP);\n \n-  gcc_assert (!dump_file);\n-  gcc_assert (!dump_file_name);\n+  if (dump_file != NULL || dump_file_name != NULL)\n+    abort ();\n \n   dump_file_name = get_dump_file_name (index);\n   initializing_dump = !dump_initialized_p (index);\n@@ -289,9 +289,11 @@ rest_of_handle_final (void)\n        different from the DECL_NAME name used in the source file.  */\n \n     x = DECL_RTL (current_function_decl);\n-    gcc_assert (MEM_P (x));\n+    if (!MEM_P (x))\n+      abort ();\n     x = XEXP (x, 0);\n-    gcc_assert (GET_CODE (x) == SYMBOL_REF);\n+    if (GET_CODE (x) != SYMBOL_REF)\n+      abort ();\n     fnname = XSTR (x, 0);\n \n     assemble_start_function (current_function_decl, fnname);"}, {"sha": "93d81c48241bf480146035e6d55a5ddf371e3bb7", "filename": "gcc/postreload-gcse.c", "status": "modified", "additions": 22, "deletions": 11, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8127d0e073d0d792628af20a2df90ddf5177c623/gcc%2Fpostreload-gcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8127d0e073d0d792628af20a2df90ddf5177c623/gcc%2Fpostreload-gcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpostreload-gcse.c?ref=8127d0e073d0d792628af20a2df90ddf5177c623", "patch": "@@ -305,7 +305,9 @@ expr_equiv_p (const void *exp1p, const void *exp2p)\n   struct expr *exp1 = (struct expr *) exp1p;\n   struct expr *exp2 = (struct expr *) exp2p;\n   int equiv_p = exp_equiv_p (exp1->expr, exp2->expr, 0, true);\n-  gcc_assert (!equiv_p || exp1->hash == exp2->hash);\n+  if (equiv_p\n+      && exp1->hash != exp2->hash)\n+    abort ();\n   return equiv_p;\n }\n \f\n@@ -483,8 +485,11 @@ oprs_unchanged_p (rtx x, rtx insn, bool after_insn)\n   switch (code)\n     {\n     case REG:\n+#ifdef ENABLE_CHECKING\n       /* We are called after register allocation.  */\n-      gcc_assert (REGNO (x) < FIRST_PSEUDO_REGISTER);\n+      if (REGNO (x) >= FIRST_PSEUDO_REGISTER)\n+\tabort ();\n+#endif\n       if (after_insn)\n \t/* If the last CUID setting the insn is less than the CUID of\n \t   INSN, then reg X is not changed in or after INSN.  */\n@@ -780,7 +785,8 @@ hash_scan_set (rtx insn)\n \n #ifdef ENABLE_CHEKCING\n   /* We shouldn't have any EH_REGION notes post reload.  */\n-  gcc_assert (!find_reg_note (insn, REG_EH_REGION, NULL_RTX));\n+  if (find_reg_note (insn, REG_EH_REGION, NULL_RTX))\n+    abort ();\n #endif\n \n   if (REG_P (dest))\n@@ -928,9 +934,11 @@ reg_set_between_after_reload_p (rtx reg, rtx from_insn, rtx to_insn)\n   rtx insn;\n   int regno;\n \n+#ifdef ENABLE_CHECKING\n   /* We are called after register allocation.  */\n-  gcc_assert (REG_P (reg));\n-  gcc_assert (REGNO (reg) < FIRST_PSEUDO_REGISTER);\n+  if (!REG_P (reg) || REGNO (reg) >= FIRST_PSEUDO_REGISTER)\n+    abort ();\n+#endif\n \n   if (from_insn == to_insn)\n     return NULL_RTX;\n@@ -965,9 +973,11 @@ reg_used_between_after_reload_p (rtx reg, rtx from_insn, rtx to_insn)\n   rtx insn;\n   int regno;\n \n+#ifdef ENABLE_CHECKING\n   /* We are called after register allocation.  */\n-  gcc_assert (REG_P (reg));\n-  gcc_assert (REGNO (reg) < FIRST_PSEUDO_REGISTER);\n+  if (!REG_P (reg) || REGNO (reg) >= FIRST_PSEUDO_REGISTER)\n+    abort ();\n+#endif\n \n   if (from_insn == to_insn)\n     return NULL_RTX;\n@@ -1017,7 +1027,7 @@ get_avail_load_store_reg (rtx insn)\n     return SET_DEST(PATTERN(insn));\n   if (REG_P (SET_SRC (PATTERN (insn))))  /* A store.  */\n     return SET_SRC (PATTERN (insn));\n-  gcc_unreachable ();\n+  abort ();\n }\n \n /* Return nonzero if the predecessors of BB are \"well behaved\".  */\n@@ -1099,8 +1109,8 @@ eliminate_partially_redundant_load (basic_block bb, rtx insn,\n \t{\n \t  /* Check if the loaded register is not used.  */\n \t  avail_insn = a_occr->insn;\n-\t  avail_reg = get_avail_load_store_reg (avail_insn);\n-\t  gcc_assert (avail_reg);\n+\t  if (! (avail_reg = get_avail_load_store_reg (avail_insn)))\n+\t    abort ();\n \t  /* Make sure we can generate a move from register avail_reg to\n \t     dest.  */\n \t  extract_insn (gen_move_insn (copy_rtx (dest),\n@@ -1171,7 +1181,8 @@ eliminate_partially_redundant_load (basic_block bb, rtx insn,\n       /* Set avail_reg to be the register having the value of the\n \t memory.  */\n       avail_reg = get_avail_load_store_reg (avail_insn);\n-      gcc_assert (avail_reg);\n+      if (! avail_reg)\n+\tabort ();\n \n       insert_insn_on_edge (gen_move_insn (copy_rtx (dest),\n \t\t\t\t\t  copy_rtx (avail_reg)),"}, {"sha": "20d4a4f543e2b320b354b5af83209fd40ab05eb4", "filename": "gcc/postreload.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8127d0e073d0d792628af20a2df90ddf5177c623/gcc%2Fpostreload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8127d0e073d0d792628af20a2df90ddf5177c623/gcc%2Fpostreload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpostreload.c?ref=8127d0e073d0d792628af20a2df90ddf5177c623", "patch": "@@ -280,7 +280,7 @@ reload_cse_simplify_set (rtx set, rtx insn)\n \t\t  if (this_val == trunc_int_for_mode (this_val, GET_MODE (src)))\n \t\t    break;\n \t\tdefault:\n-\t\t  gcc_unreachable ();\n+\t\t  abort ();\n \t\t}\n \t      this_rtx = GEN_INT (this_val);\n \t    }\n@@ -1057,7 +1057,8 @@ reload_combine_note_use (rtx *xp, rtx insn)\n       if (REG_P (SET_DEST (x)))\n \t{\n \t  /* No spurious CLOBBERs of pseudo registers may remain.  */\n-\t  gcc_assert (REGNO (SET_DEST (x)) < FIRST_PSEUDO_REGISTER);\n+\t  if (REGNO (SET_DEST (x)) >= FIRST_PSEUDO_REGISTER)\n+\t    abort ();\n \t  return;\n \t}\n       break;\n@@ -1077,7 +1078,8 @@ reload_combine_note_use (rtx *xp, rtx insn)\n \tint nregs;\n \n \t/* No spurious USEs of pseudo registers may remain.  */\n-\tgcc_assert (regno < FIRST_PSEUDO_REGISTER);\n+\tif (regno >= FIRST_PSEUDO_REGISTER)\n+\t  abort ();\n \n \tnregs = hard_regno_nregs[regno][GET_MODE (x)];\n "}, {"sha": "fbbc1579b39349fe6ee06f33fa9c61423eb3b068", "filename": "gcc/predict.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8127d0e073d0d792628af20a2df90ddf5177c623/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8127d0e073d0d792628af20a2df90ddf5177c623/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=8127d0e073d0d792628af20a2df90ddf5177c623", "patch": "@@ -179,7 +179,8 @@ tree_predicted_by_p (basic_block bb, enum br_predictor predictor)\n void\n predict_insn (rtx insn, enum br_predictor predictor, int probability)\n {\n-  gcc_assert (any_condjump_p (insn));\n+  if (!any_condjump_p (insn))\n+    abort ();\n   if (!flag_guess_branch_prob)\n     return;\n \n@@ -1105,7 +1106,8 @@ expected_value_to_br_prob (void)\n       cond = simplify_rtx (cond);\n \n       /* Turn the condition into a scaled branch probability.  */\n-      gcc_assert (cond == const_true_rtx || cond == const0_rtx);\n+      if (cond != const_true_rtx && cond != const0_rtx)\n+\tabort ();\n       predict_insn_def (insn, PRED_BUILTIN_EXPECT,\n \t\t        cond == const_true_rtx ? TAKEN : NOT_TAKEN);\n     }\n@@ -1206,8 +1208,8 @@ propagate_freq (struct loop *loop)\n \t{\n #ifdef ENABLE_CHECKING\n \t  for (e = bb->pred; e; e = e->pred_next)\n-\t    gcc_assert (!BLOCK_INFO (e->src)->tovisit\n-\t\t\t|| (e->flags & EDGE_DFS_BACK));\n+\t    if (BLOCK_INFO (e->src)->tovisit && !(e->flags & EDGE_DFS_BACK))\n+\t      abort ();\n #endif\n \n \t  for (e = bb->pred; e; e = e->pred_next)\n@@ -1351,7 +1353,8 @@ expensive_function_p (int threshold)\n \n   /* We can not compute accurately for large thresholds due to scaled\n      frequencies.  */\n-  gcc_assert (threshold < BB_FREQ_MAX);\n+  if (threshold > BB_FREQ_MAX)\n+    abort ();\n \n   /* Frequencies are out of range.  This either means that function contains\n      internal loop executing more than BB_FREQ_MAX times or profile feedback"}, {"sha": "d6098a7474513422de22f970fd58f67fa91e5627", "filename": "gcc/pretty-print.c", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8127d0e073d0d792628af20a2df90ddf5177c623/gcc%2Fpretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8127d0e073d0d792628af20a2df90ddf5177c623/gcc%2Fpretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpretty-print.c?ref=8127d0e073d0d792628af20a2df90ddf5177c623", "patch": "@@ -231,7 +231,8 @@ pp_base_format_text (pretty_printer *pp, text_info *text)\n           break;\n         }\n       /* We don't support precision beyond that of \"long long\".  */\n-      gcc_assert (precision <= 2);\n+      if (precision > 2)\n+        abort();\n \n       if (quoted)\n \tpp_string (pp, open_quote);\n@@ -318,27 +319,25 @@ pp_base_format_text (pretty_printer *pp, text_info *text)\n \t    int n;\n \t    const char *s;\n \t    /* We handle no precision specifier but '%.*s'.  */\n-\t    ++text->format_spec;\n-\t    gcc_assert (*text->format_spec == '*');\n-\t    ++text->format_spec;\n-\t    gcc_assert (*text->format_spec == 's');\n+\t    if (*++text->format_spec != '*')\n+\t      abort ();\n+\t    else if (*++text->format_spec != 's')\n+\t      abort ();\n \t    n = va_arg (*text->args_ptr, int);\n \t    s = va_arg (*text->args_ptr, const char *);\n \t    pp_append_text (pp, s, s + n);\n \t  }\n \t  break;\n \n \tdefault:\n-\t  {\n-\t    bool ok;\n-\n-\t    /* Make sure there's a format translator. */\n-\t    gcc_assert (pp_format_decoder (pp));\n-\t    ok = pp_format_decoder (pp) (pp, text);\n-\t    /* and make sure it recognized the format.  */\n-\t    gcc_assert (ok);\n-\t    break;\n-\t  }\n+          if (!pp_format_decoder (pp) || !(*pp_format_decoder (pp)) (pp, text))\n+\t    {\n+\t      /* Hmmm.  The client failed to install a format translator\n+                 but called us with an unrecognized format.  Or, maybe, the\n+                 translated string just contains an invalid format, or\n+                 has formats in the wrong order.  Sorry.  */\n+\t      abort ();\n+\t    }\n \t}\n       if (quoted)\n \tpp_string (pp, close_quote);"}, {"sha": "2200e76399ddf242e1cc2f8169c4adf86ac01449", "filename": "gcc/profile.c", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8127d0e073d0d792628af20a2df90ddf5177c623/gcc%2Fprofile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8127d0e073d0d792628af20a2df90ddf5177c623/gcc%2Fprofile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile.c?ref=8127d0e073d0d792628af20a2df90ddf5177c623", "patch": "@@ -149,7 +149,8 @@ instrument_edges (struct edge_list *el)\n \n \t  if (!inf->ignore && !inf->on_tree)\n \t    {\n-\t      gcc_assert (!(e->flags & EDGE_ABNORMAL));\n+\t      if (e->flags & EDGE_ABNORMAL)\n+\t\tabort ();\n \t      if (dump_file)\n \t\tfprintf (dump_file, \"Edge %d to %d instrumented%s\\n\",\n \t\t\t e->src->index, e->dest->index,\n@@ -195,7 +196,7 @@ instrument_values (histogram_values values)\n \t  break;\n \n \tdefault:\n-\t  gcc_unreachable ();\n+\t  abort ();\n \t}\n       if (!coverage_counter_alloc (t, hist->n_counters))\n \tcontinue;\n@@ -219,7 +220,7 @@ instrument_values (histogram_values values)\n \t  break;\n \n \tdefault:\n-\t  gcc_unreachable ();\n+\t  abort ();\n \t}\n     }\n }\n@@ -419,7 +420,8 @@ compute_branch_probabilities (void)\n \t\t  /* Calculate count for remaining edge by conservation.  */\n \t\t  total = bb->count - total;\n \n-\t\t  gcc_assert (e);\n+\t\t  if (! e)\n+\t\t    abort ();\n \t\t  EDGE_INFO (e)->count_valid = 1;\n \t\t  e->count = total;\n \t\t  bi->succ_count--;\n@@ -445,7 +447,8 @@ compute_branch_probabilities (void)\n \t\t  /* Calculate count for remaining edge by conservation.  */\n \t\t  total = bb->count - total + e->count;\n \n-\t\t  gcc_assert (e);\n+\t\t  if (! e)\n+\t\t    abort ();\n \t\t  EDGE_INFO (e)->count_valid = 1;\n \t\t  e->count = total;\n \t\t  bi->pred_count--;\n@@ -463,18 +466,17 @@ compute_branch_probabilities (void)\n   if (dump_file)\n     fprintf (dump_file, \"Graph solving took %d passes.\\n\\n\", passes);\n \n-#ifdef ENABLE_CHECKING\n   /* If the graph has been correctly solved, every block will have a\n      succ and pred count of zero.  */\n   FOR_EACH_BB (bb)\n     {\n-      gcc_assert (!BB_INFO (bb)->succ_count);\n-      gcc_assert (!BB_INFO (bb)->pred_count);\n+      if (BB_INFO (bb)->succ_count || BB_INFO (bb)->pred_count)\n+\tabort ();\n     }\n-#endif\n-  \n+\n   /* For every edge, calculate its branch probability and add a reg_note\n      to the branch insn to indicate this.  */\n+\n   for (i = 0; i < 20; i++)\n     hist_br_prob[i] = 0;\n   num_never_executed = 0;\n@@ -982,7 +984,8 @@ branch_prob (void)\n     {\n       unsigned n_instrumented = instrument_edges (el);\n \n-      gcc_assert (n_instrumented == num_instrumented);\n+      if (n_instrumented != num_instrumented)\n+\tabort ();\n \n       if (flag_profile_values)\n \tinstrument_values (values);\n@@ -1041,7 +1044,8 @@ union_groups (basic_block bb1, basic_block bb2)\n \n   /* ??? I don't have a place for the rank field.  OK.  Lets go w/o it,\n      this code is unlikely going to be performance problem anyway.  */\n-  gcc_assert (bb1g != bb2g);\n+  if (bb1g == bb2g)\n+    abort ();\n \n   bb1g->aux = bb2g;\n }\n@@ -1186,7 +1190,8 @@ void\n tree_register_profile_hooks (void)\n {\n   profile_hooks = &tree_profile_hooks;\n-  gcc_assert (ir_type ());\n+  if (!ir_type ())\n+    abort ();\n }\n \n /* Set up hooks to enable RTL-based profiling.  */\n@@ -1195,5 +1200,6 @@ void\n rtl_register_profile_hooks (void)\n {\n   profile_hooks = &rtl_profile_hooks;\n-  gcc_assert (!ir_type ());\n+  if (ir_type ())\n+    abort ();\n }"}]}