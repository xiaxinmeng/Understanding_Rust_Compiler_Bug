{"sha": "66030d68a7edfc9504a50469598e0707b8f787ce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjYwMzBkNjhhN2VkZmM5NTA0YTUwNDY5NTk4ZTA3MDdiOGY3ODdjZQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-07-22T10:26:16Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-07-27T08:46:22Z"}, "message": "tree-optimization/101573 - improve uninit warning at -O0\n\nWe can improve uninit warnings from the early pass by looking\nat PHI arguments on fallthru edges that are uninitialized and\nhave uses that are before a possible loop exit.  This catches\nsome cases earlier that we'd only warn in a more confusing\nway after early inlining as seen by testcase adjustments.\n\nIt introduces\n\nFAIL: gcc.dg/uninit-23.c (test for excess errors)\n\nwhere we additionally warn\n\ngcc.dg/uninit-23.c:21:13: warning: 't4' is used uninitialized [-Wuninitialized]\n\nwhich I think is OK even if it's not obvious that the new\nwarning is an improvement when you look at the obvious source.\n\nSomehow for all cases I never get the `'foo' was declared here`\nnotes, I didn't dig why that happens but it's odd.\n\n2021-07-22  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/101573\n\t* tree-ssa-uninit.c (warn_uninit_phi_uses): New function\n\tlooking at uninitialized PHI arg defs in some constrained cases.\n\t(warn_uninitialized_vars): Call it.\n\t(execute_early_warn_uninitialized): Calculate dominators.\n\n\t* gcc.dg/uninit-pr101573.c: New testcase.\n\t* gcc.dg/uninit-15-O0.c: Adjust.\n\t* gcc.dg/uninit-15.c: Likewise.\n\t* gcc.dg/uninit-23.c: Likewise.\n\t* c-c++-common/uninit-17.c: Likewise.", "tree": {"sha": "a005e80a5eacf12378a75971b856ed6c0d9771a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a005e80a5eacf12378a75971b856ed6c0d9771a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/66030d68a7edfc9504a50469598e0707b8f787ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66030d68a7edfc9504a50469598e0707b8f787ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66030d68a7edfc9504a50469598e0707b8f787ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66030d68a7edfc9504a50469598e0707b8f787ce/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8ce54c6e67295b70052d1b9f9a2f7ce9e2f8f0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8ce54c6e67295b70052d1b9f9a2f7ce9e2f8f0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8ce54c6e67295b70052d1b9f9a2f7ce9e2f8f0d"}], "stats": {"total": 105, "additions": 95, "deletions": 10}, "files": [{"sha": "b5495366c5bc20aefdea8e6251fd30f48abf4a98", "filename": "gcc/testsuite/c-c++-common/uninit-17.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66030d68a7edfc9504a50469598e0707b8f787ce/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Funinit-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66030d68a7edfc9504a50469598e0707b8f787ce/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Funinit-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Funinit-17.c?ref=66030d68a7edfc9504a50469598e0707b8f787ce", "patch": "@@ -9,11 +9,11 @@ static void bar(int a, int *ptr)\n {\n   do\n   {\n-    int b;   /* { dg-message \"declared\" } */\n+    int b;\n     if (b < 40) {\n-      ptr[0] = b; /* { dg-warning \"may be used uninitialized\" } */\n+      ptr[0] = b;\n     }\n-    b += 1;\n+    b += 1; /* { dg-warning \"is used uninitialized\" } */\n     ptr++;\n   }\n   while (--a != 0);"}, {"sha": "36d963486175ba7353e7f9bb85cea6ccf9bdb935", "filename": "gcc/testsuite/gcc.dg/uninit-15-O0.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66030d68a7edfc9504a50469598e0707b8f787ce/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-15-O0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66030d68a7edfc9504a50469598e0707b8f787ce/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-15-O0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-15-O0.c?ref=66030d68a7edfc9504a50469598e0707b8f787ce", "patch": "@@ -15,6 +15,6 @@ void baz();\n void bar()\n {\n     int j;           /* { dg-message \"was declared here\" {} { xfail *-*-* } } */\n-    for (; foo(j); ++j)\n+    for (; foo(j); ++j) /* { dg-warning \"is used uninitialized\" } */\n         baz();\n }"}, {"sha": "85cb116f349458466d8a09f3565f95f01cf13a3e", "filename": "gcc/testsuite/gcc.dg/uninit-15.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66030d68a7edfc9504a50469598e0707b8f787ce/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66030d68a7edfc9504a50469598e0707b8f787ce/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-15.c?ref=66030d68a7edfc9504a50469598e0707b8f787ce", "patch": "@@ -1,7 +1,7 @@\n /* PR tree-optimization/17506\n-   We issue an uninitialized variable warning at a wrong location at\n+   We used to issue an uninitialized variable warning at a wrong location at\n    line 11, which is very confusing.  Make sure we print out a note to\n-   make it less confusing.  (not xfailed alternative)\n+   make it less confusing.  (xfailed alternative)\n    But it is of course ok if we warn in bar about uninitialized use\n    of j.  (not xfailed alternative)  */\n /* { dg-do compile } */\n@@ -10,7 +10,7 @@\n inline int\n foo (int i)\n {\n-  if (i) /* { dg-warning \"used uninitialized\" } */\n+  if (i) /* { dg-warning \"used uninitialized\" \"\" { xfail *-*-* } } */\n     return 1;\n   return 0;\n }\n@@ -20,7 +20,7 @@ void baz (void);\n void\n bar (void)\n {\n-  int j; /* { dg-message \"note: 'j' was declared here\" \"\" } */\n-  for (; foo (j); ++j)  /* { dg-warning \"'j' is used uninitialized\" \"\" { xfail *-*-* } } */\n+  int j; /* { dg-message \"note: 'j' was declared here\" \"\" { xfail *-*-* } } */\n+  for (; foo (j); ++j)  /* { dg-warning \"'j' is used uninitialized\" } */\n     baz ();\n }"}, {"sha": "87b4e989b5370a9fc3c4e4690e93dac7a85a682a", "filename": "gcc/testsuite/gcc.dg/uninit-23.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66030d68a7edfc9504a50469598e0707b8f787ce/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66030d68a7edfc9504a50469598e0707b8f787ce/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-23.c?ref=66030d68a7edfc9504a50469598e0707b8f787ce", "patch": "@@ -18,7 +18,7 @@ ql (void)\n         int *t4 = go; /* { dg-warning \"is used uninitialized\" } */\n \n  l1:\n-        *t4 = (*t4 != 0) ? 0 : 2;\n+        *t4 = (*t4 != 0) ? 0 : 2; /* { dg-warning \"is used uninitialized\" } */\n       }\n \n     if (ij != 0)"}, {"sha": "a574844b7914c3db55c9d2593b3079d2299c54fa", "filename": "gcc/testsuite/gcc.dg/uninit-pr101573.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66030d68a7edfc9504a50469598e0707b8f787ce/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr101573.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66030d68a7edfc9504a50469598e0707b8f787ce/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr101573.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr101573.c?ref=66030d68a7edfc9504a50469598e0707b8f787ce", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O0 -Wuninitialized\" } */\n+\n+int main(int argc, char **argv)\n+{\n+  int a;\n+  for(; a < 5; ++a) /* { dg-warning \"is used uninitialized\" } */\n+    ;\n+  return  0;\n+}"}, {"sha": "718b32691c1ac2614cc4cf96a20e4e897209166d", "filename": "gcc/tree-ssa-uninit.c", "status": "modified", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66030d68a7edfc9504a50469598e0707b8f787ce/gcc%2Ftree-ssa-uninit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66030d68a7edfc9504a50469598e0707b8f787ce/gcc%2Ftree-ssa-uninit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-uninit.c?ref=66030d68a7edfc9504a50469598e0707b8f787ce", "patch": "@@ -638,6 +638,76 @@ maybe_warn_pass_by_reference (gcall *stmt, wlimits &wlims)\n   wlims.always_executed = save_always_executed;\n }\n \n+/* Warn about an uninitialized PHI argument on the fallthru path to\n+   an always executed block BB.  */\n+\n+static void\n+warn_uninit_phi_uses (basic_block bb)\n+{\n+  edge_iterator ei;\n+  edge e, found = NULL, found_back = NULL;\n+  /* Look for a fallthru and possibly a single backedge.  */\n+  FOR_EACH_EDGE (e, ei, bb->preds)\n+    {\n+      /* Ignore backedges.  */\n+      if (dominated_by_p (CDI_DOMINATORS, e->src, bb))\n+\t{\n+\t  if (found_back)\n+\t    {\n+\t      found = NULL;\n+\t      break;\n+\t    }\n+\t  found_back = e;\n+\t  continue;\n+\t}\n+      if (found)\n+\t{\n+\t  found = NULL;\n+\t  break;\n+\t}\n+      found = e;\n+    }\n+  if (!found)\n+    return;\n+\n+  basic_block succ = single_succ (ENTRY_BLOCK_PTR_FOR_FN (cfun));\n+  for (gphi_iterator si = gsi_start_phis (bb); !gsi_end_p (si);\n+       gsi_next (&si))\n+    {\n+      gphi *phi = si.phi ();\n+      tree def = PHI_ARG_DEF_FROM_EDGE (phi, found);\n+      if (TREE_CODE (def) != SSA_NAME\n+\t  || !SSA_NAME_IS_DEFAULT_DEF (def)\n+\t  || virtual_operand_p (def))\n+\tcontinue;\n+      /* If there's a default def on the fallthru edge PHI\n+\t value and there's a use that post-dominates entry\n+\t then that use is uninitialized and we can warn.  */\n+      imm_use_iterator iter;\n+      use_operand_p use_p;\n+      gimple *use_stmt = NULL;\n+      FOR_EACH_IMM_USE_FAST (use_p, iter, gimple_phi_result (phi))\n+\t{\n+\t  use_stmt = USE_STMT (use_p);\n+\t  if (gimple_location (use_stmt) != UNKNOWN_LOCATION\n+\t      && dominated_by_p (CDI_POST_DOMINATORS, succ,\n+\t\t\t\t gimple_bb (use_stmt))\n+\t      /* If we found a non-fallthru edge make sure the\n+\t\t use is inside the loop, otherwise the backedge\n+\t\t can serve as initialization.  */\n+\t      && (!found_back\n+\t\t  || dominated_by_p (CDI_DOMINATORS, found_back->src,\n+\t\t\t\t     gimple_bb (use_stmt))))\n+\t    break;\n+\t  use_stmt = NULL;\n+\t}\n+      if (use_stmt)\n+\twarn_uninit (OPT_Wuninitialized, def, SSA_NAME_VAR (def),\n+\t\t     SSA_NAME_VAR (def),\n+\t\t     \"%qD is used uninitialized\", use_stmt,\n+\t\t     UNKNOWN_LOCATION);\n+    }\n+}\n \n static unsigned int\n warn_uninitialized_vars (bool wmaybe_uninit)\n@@ -652,6 +722,10 @@ warn_uninitialized_vars (bool wmaybe_uninit)\n     {\n       basic_block succ = single_succ (ENTRY_BLOCK_PTR_FOR_FN (cfun));\n       wlims.always_executed = dominated_by_p (CDI_POST_DOMINATORS, succ, bb);\n+\n+      if (wlims.always_executed)\n+\twarn_uninit_phi_uses (bb);\n+\n       for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n \t{\n \t  gimple *stmt = gsi_stmt (gsi);\n@@ -3135,6 +3209,7 @@ execute_early_warn_uninitialized (void)\n      optimization we want to warn about possible uninitialized as late\n      as possible, thus don't do it here.  However, without\n      optimization we need to warn here about \"may be uninitialized\".  */\n+  calculate_dominance_info (CDI_DOMINATORS);\n   calculate_dominance_info (CDI_POST_DOMINATORS);\n \n   warn_uninitialized_vars (/*warn_maybe_uninitialized=*/!optimize);"}]}