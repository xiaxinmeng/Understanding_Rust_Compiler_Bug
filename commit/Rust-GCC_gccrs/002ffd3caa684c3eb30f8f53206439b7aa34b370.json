{"sha": "002ffd3caa684c3eb30f8f53206439b7aa34b370", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDAyZmZkM2NhYTY4NGMzZWIzMGY4ZjUzMjA2NDM5YjdhYTM0YjM3MA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-09-30T16:19:43Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-09-30T16:19:43Z"}, "message": "Add a target hook for getting an ABI from a function type\n\nThis patch adds a target hook that allows targets to return\nthe ABI associated with a particular function type.  Generally,\nwhen multiple ABIs are in use, it must be possible to tell from\na function type and its attributes which ABI it is using.\n\n2019-09-30  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* target.def (fntype_abi): New target hook.\n\t* doc/tm.texi.in (TARGET_FNTYPE_ABI): Likewise.\n\t* doc/tm.texi: Regenerate.\n\t* target.h (predefined_function_abi): Declare.\n\t* function-abi.cc (fntype_abi): Call targetm.calls.fntype_abi,\n\tif defined.\n\t* config/aarch64/aarch64.h (ARM_PCS_SIMD): New arm_pcs value.\n\t* config/aarch64/aarch64.c: Include function-abi.h.\n\t(aarch64_simd_abi, aarch64_fntype_abi): New functions.\n\t(TARGET_FNTYPE_ABI): Define.\n\nFrom-SVN: r276308", "tree": {"sha": "bc1fb384d8c3f5469131ebbe8416b7880c2fc784", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc1fb384d8c3f5469131ebbe8416b7880c2fc784"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/002ffd3caa684c3eb30f8f53206439b7aa34b370", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/002ffd3caa684c3eb30f8f53206439b7aa34b370", "html_url": "https://github.com/Rust-GCC/gccrs/commit/002ffd3caa684c3eb30f8f53206439b7aa34b370", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/002ffd3caa684c3eb30f8f53206439b7aa34b370/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bd785b44932274f7067105de417938597289962c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd785b44932274f7067105de417938597289962c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd785b44932274f7067105de417938597289962c"}], "stats": {"total": 75, "additions": 75, "deletions": 0}, "files": [{"sha": "812dadbc8e948ddc455a4b976bf7a8748c98702e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/002ffd3caa684c3eb30f8f53206439b7aa34b370/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/002ffd3caa684c3eb30f8f53206439b7aa34b370/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=002ffd3caa684c3eb30f8f53206439b7aa34b370", "patch": "@@ -1,3 +1,16 @@\n+2019-09-30  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* target.def (fntype_abi): New target hook.\n+\t* doc/tm.texi.in (TARGET_FNTYPE_ABI): Likewise.\n+\t* doc/tm.texi: Regenerate.\n+\t* target.h (predefined_function_abi): Declare.\n+\t* function-abi.cc (fntype_abi): Call targetm.calls.fntype_abi,\n+\tif defined.\n+\t* config/aarch64/aarch64.h (ARM_PCS_SIMD): New arm_pcs value.\n+\t* config/aarch64/aarch64.c: Include function-abi.h.\n+\t(aarch64_simd_abi, aarch64_fntype_abi): New functions.\n+\t(TARGET_FNTYPE_ABI): Define.\n+\n 2019-09-30  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* Makefile.in (OBJS): Add function-abi.o."}, {"sha": "211459c29c477870d4877639a2f89618e833e127", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/002ffd3caa684c3eb30f8f53206439b7aa34b370/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/002ffd3caa684c3eb30f8f53206439b7aa34b370/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=002ffd3caa684c3eb30f8f53206439b7aa34b370", "patch": "@@ -74,6 +74,7 @@\n #include \"rtx-vector-builder.h\"\n #include \"intl.h\"\n #include \"expmed.h\"\n+#include \"function-abi.h\"\n \n /* This file should be included last.  */\n #include \"target-def.h\"\n@@ -1365,6 +1366,24 @@ svpattern_token (enum aarch64_svpattern pattern)\n   gcc_unreachable ();\n }\n \n+/* Return the descriptor of the SIMD ABI.  */\n+\n+static const predefined_function_abi &\n+aarch64_simd_abi (void)\n+{\n+  predefined_function_abi &simd_abi = function_abis[ARM_PCS_SIMD];\n+  if (!simd_abi.initialized_p ())\n+    {\n+      HARD_REG_SET full_reg_clobbers\n+\t= default_function_abi.full_reg_clobbers ();\n+      for (int regno = 0; regno < FIRST_PSEUDO_REGISTER; regno++)\n+\tif (FP_SIMD_SAVED_REGNUM_P (regno))\n+\t  CLEAR_HARD_REG_BIT (full_reg_clobbers, regno);\n+      simd_abi.initialize (ARM_PCS_SIMD, full_reg_clobbers);\n+    }\n+  return simd_abi;\n+}\n+\n /* Generate code to enable conditional branches in functions over 1 MiB.  */\n const char *\n aarch64_gen_far_branch (rtx * operands, int pos_label, const char * dest,\n@@ -1810,6 +1829,16 @@ aarch64_hard_regno_mode_ok (unsigned regno, machine_mode mode)\n   return false;\n }\n \n+/* Implement TARGET_FNTYPE_ABI.  */\n+\n+static const predefined_function_abi &\n+aarch64_fntype_abi (const_tree fntype)\n+{\n+  if (lookup_attribute (\"aarch64_vector_pcs\", TYPE_ATTRIBUTES (fntype)))\n+    return aarch64_simd_abi ();\n+  return default_function_abi;\n+}\n+\n /* Return true if this is a definition of a vectorized simd function.  */\n \n static bool\n@@ -21024,6 +21053,9 @@ aarch64_libgcc_floating_mode_supported_p\n #undef TARGET_GET_MULTILIB_ABI_NAME\n #define TARGET_GET_MULTILIB_ABI_NAME aarch64_get_multilib_abi_name\n \n+#undef TARGET_FNTYPE_ABI\n+#define TARGET_FNTYPE_ABI aarch64_fntype_abi\n+\n #if CHECKING_P\n #undef TARGET_RUN_TARGET_SELFTESTS\n #define TARGET_RUN_TARGET_SELFTESTS selftest::aarch64_run_selftests"}, {"sha": "5aff106694f4117d6b608a21359f6dff42fc30c6", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/002ffd3caa684c3eb30f8f53206439b7aa34b370/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/002ffd3caa684c3eb30f8f53206439b7aa34b370/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=002ffd3caa684c3eb30f8f53206439b7aa34b370", "patch": "@@ -783,6 +783,7 @@ enum aarch64_abi_type\n enum arm_pcs\n {\n   ARM_PCS_AAPCS64,\t\t/* Base standard AAPCS for 64 bit.  */\n+  ARM_PCS_SIMD,\t\t\t/* For aarch64_vector_pcs functions.  */\n   ARM_PCS_UNKNOWN\n };\n "}, {"sha": "0f79d382379f0f10fbe17198d34bb16628cbedea", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/002ffd3caa684c3eb30f8f53206439b7aa34b370/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/002ffd3caa684c3eb30f8f53206439b7aa34b370/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=002ffd3caa684c3eb30f8f53206439b7aa34b370", "patch": "@@ -1895,6 +1895,16 @@ Exactly one of @code{CALL_USED_REGISTERS} and @code{CALL_REALLY_USED_REGISTERS}\n must be defined.  Modern ports should define @code{CALL_REALLY_USED_REGISTERS}.\n @end defmac\n \n+@cindex call-used register\n+@cindex call-clobbered register\n+@cindex call-saved register\n+@deftypefn {Target Hook} {const predefined_function_abi &} TARGET_FNTYPE_ABI (const_tree @var{type})\n+Return the ABI used by a function with type @var{type}; see the\n+definition of @code{predefined_function_abi} for details of the ABI\n+descriptor.  Targets only need to define this hook if they support\n+interoperability between several ABIs in the same translation unit.\n+@end deftypefn\n+\n @cindex call-used register\n @cindex call-clobbered register\n @cindex call-saved register"}, {"sha": "ed605c05f4be64f096d1b88c2def1313ff99ab45", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/002ffd3caa684c3eb30f8f53206439b7aa34b370/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/002ffd3caa684c3eb30f8f53206439b7aa34b370/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=002ffd3caa684c3eb30f8f53206439b7aa34b370", "patch": "@@ -1706,6 +1706,11 @@ Exactly one of @code{CALL_USED_REGISTERS} and @code{CALL_REALLY_USED_REGISTERS}\n must be defined.  Modern ports should define @code{CALL_REALLY_USED_REGISTERS}.\n @end defmac\n \n+@cindex call-used register\n+@cindex call-clobbered register\n+@cindex call-saved register\n+@hook TARGET_FNTYPE_ABI\n+\n @cindex call-used register\n @cindex call-clobbered register\n @cindex call-saved register"}, {"sha": "c77989a1b08d6ab4ed2193f6d460722e6e0d8fee", "filename": "gcc/function-abi.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/002ffd3caa684c3eb30f8f53206439b7aa34b370/gcc%2Ffunction-abi.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/002ffd3caa684c3eb30f8f53206439b7aa34b370/gcc%2Ffunction-abi.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction-abi.cc?ref=002ffd3caa684c3eb30f8f53206439b7aa34b370", "patch": "@@ -132,6 +132,8 @@ const predefined_function_abi &\n fntype_abi (const_tree type)\n {\n   gcc_assert (FUNC_OR_METHOD_TYPE_P (type));\n+  if (targetm.calls.fntype_abi)\n+    return targetm.calls.fntype_abi (type);\n   return default_function_abi;\n }\n "}, {"sha": "803c7a358251859634e791d851ca64186b1b90ec", "filename": "gcc/target.def", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/002ffd3caa684c3eb30f8f53206439b7aa34b370/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/002ffd3caa684c3eb30f8f53206439b7aa34b370/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=002ffd3caa684c3eb30f8f53206439b7aa34b370", "patch": "@@ -4943,6 +4943,15 @@ If this hook is not defined, then FUNCTION_VALUE_REGNO_P will be used.\",\n  bool, (const unsigned int regno),\n  default_function_value_regno_p)\n \n+DEFHOOK\n+(fntype_abi,\n+ \"Return the ABI used by a function with type @var{type}; see the\\n\\\n+definition of @code{predefined_function_abi} for details of the ABI\\n\\\n+descriptor.  Targets only need to define this hook if they support\\n\\\n+interoperability between several ABIs in the same translation unit.\",\n+ const predefined_function_abi &, (const_tree type),\n+ NULL)\n+\n /* ??? Documenting this hook requires a GFDL license grant.  */\n DEFHOOK_UNDOC\n (internal_arg_pointer,"}, {"sha": "9f80658d8c8e8a1fbcfe279c7a28f2c43afa175d", "filename": "gcc/target.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/002ffd3caa684c3eb30f8f53206439b7aa34b370/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/002ffd3caa684c3eb30f8f53206439b7aa34b370/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=002ffd3caa684c3eb30f8f53206439b7aa34b370", "patch": "@@ -152,6 +152,9 @@ class _stmt_vec_info;\n /* This is defined in calls.h.  */\n class function_arg_info;\n \n+/* This is defined in function-abi.h.  */\n+class predefined_function_abi;\n+\n /* These are defined in tree-vect-stmts.c.  */\n extern tree stmt_vectype (class _stmt_vec_info *);\n extern bool stmt_in_inner_loop_p (class _stmt_vec_info *);"}]}