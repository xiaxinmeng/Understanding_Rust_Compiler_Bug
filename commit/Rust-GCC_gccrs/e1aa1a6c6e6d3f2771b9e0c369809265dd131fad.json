{"sha": "e1aa1a6c6e6d3f2771b9e0c369809265dd131fad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTFhYTFhNmM2ZTZkM2YyNzcxYjllMGMzNjk4MDkyNjVkZDEzMWZhZA==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1996-05-01T05:49:58Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1996-05-01T05:49:58Z"}, "message": "h8300.md (bcs type): Remove \"bcs\" type attribute and all references.\n\n        * h8300/h8300.md (bcs type): Remove \"bcs\" type attribute and\n        all references.\n        (bcs insns): Delete.  No longer needed.\n        (setcc from bitfield): Rewrite to use zero_extract.  Provide\n        QImode, HImode and SImode variants.\n\nFrom-SVN: r11910", "tree": {"sha": "beafe1473adea3226ae92c40292211ba35030872", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/beafe1473adea3226ae92c40292211ba35030872"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e1aa1a6c6e6d3f2771b9e0c369809265dd131fad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1aa1a6c6e6d3f2771b9e0c369809265dd131fad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1aa1a6c6e6d3f2771b9e0c369809265dd131fad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1aa1a6c6e6d3f2771b9e0c369809265dd131fad/comments", "author": null, "committer": null, "parents": [{"sha": "df37d0faf5643ad2f563c12d3a5c4a853a4cfb62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df37d0faf5643ad2f563c12d3a5c4a853a4cfb62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df37d0faf5643ad2f563c12d3a5c4a853a4cfb62"}], "stats": {"total": 193, "additions": 24, "deletions": 169}, "files": [{"sha": "b4fba572d05f062c585263e4353677ad117ea0bc", "filename": "gcc/config/h8300/h8300.md", "status": "modified", "additions": 24, "deletions": 169, "changes": 193, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1aa1a6c6e6d3f2771b9e0c369809265dd131fad/gcc%2Fconfig%2Fh8300%2Fh8300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1aa1a6c6e6d3f2771b9e0c369809265dd131fad/gcc%2Fconfig%2Fh8300%2Fh8300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.md?ref=e1aa1a6c6e6d3f2771b9e0c369809265dd131fad", "patch": "@@ -45,7 +45,7 @@\n \n ;; ??? Implement remaining bit ops available on the h8300\n \n-(define_attr \"type\" \"branch,bcs,arith\"\n+(define_attr \"type\" \"branch,arith\"\n   (const_string \"arith\"))\n \n ;; The size of instructions in bytes.\n@@ -63,29 +63,7 @@\n \t\t\t\t\t       (le (minus (pc) (match_dup 0))\n \t\t\t\t\t\t   (const_int 32000))))\n \t\t\t\t     (const_int 4)\n-\t\t\t\t     (const_int 6)))\n-         (eq_attr \"type\" \"bcs\")\n-\t (if_then_else (and (ge (minus (pc) (match_dup 0))\n-\t\t\t\t(const_int -120))\n-\t\t\t    (le (minus (pc) (match_dup 0))\n-\t\t\t\t(const_int 120)))\n-\t\t       (if_then_else\n-\t\t\t (match_operand 2 \"register_operand\" \"\")\n-\t\t\t (const_int 4)\n-\t\t\t (const_int 6))\n-\t\t       (if_then_else (and (eq_attr \"cpu\" \"h8300h\")\n-\t\t\t\t\t  (and (ge (minus (pc) (match_dup 0))\n-\t\t\t\t\t\t   (const_int -32000))\n-\t\t\t\t\t       (le (minus (pc) (match_dup 0))\n-\t\t\t\t\t\t   (const_int 32000))))\n-\t\t\t\t     (if_then_else\n-\t\t\t\t       (match_operand 2 \"register_operand\" \"\")\n-\t\t\t\t       (const_int 6)\n-\t\t\t\t       (const_int 8))\n-\t\t\t\t     (if_then_else\n-\t\t\t\t       (match_operand 2 \"register_operand\" \"\")\n-\t\t\t\t       (const_int 8)\n-\t\t\t\t       (const_int 10))))]\n+\t\t\t\t     (const_int 6)))]\n \t(const_int 200)))\n \n ;; Condition code settings.\n@@ -460,13 +438,32 @@\n ;; ----------------------------------------------------------------------\n \n (define_insn \"\"\n-  [(set (cc0) (and:QI (match_operand:QI 0 \"bit_operand\" \"Ur\")\n-\t\t      (match_operand:QI 1 \"o_operand\" \"O\")))]\n+  [(set (cc0) (zero_extract:QI (match_operand:HI 0 \"register_operand\" \"r\")\n+\t\t\t       (const_int 1)\n+\t\t\t       (match_operand:HI 1 \"const_int_operand\" \"n\")))]\n   \"\"\n-  \"btst %W1,%R0\"\n+  \"btst\t%Z1,%R0\"\n   [(set_attr \"length\" \"2\")\n    (set_attr \"cc\" \"set_zn_c0\")])\n   \n+(define_insn \"\"\n+  [(set (cc0) (zero_extract:HI (match_operand:HI 0 \"register_operand\" \"r\")\n+\t\t\t       (const_int 1)\n+\t\t\t       (match_operand:HI 1 \"const_int_operand\" \"n\")))]\n+  \"\"\n+  \"btst\t%Z1,%Y0\"\n+  [(set_attr \"length\" \"2\")\n+   (set_attr \"cc\" \"set_zn_c0\")])\n+\n+(define_insn \"\"\n+  [(set (cc0) (zero_extract:SI (match_operand:HI 0 \"register_operand\" \"r\")\n+\t\t\t       (const_int 1)\n+\t\t\t       (match_operand:HI 1 \"const_int_operand\" \"n\")))]\n+  \"\"\n+  \"btst\t%Z1,%Y0\"\n+  [(set_attr \"length\" \"2\")\n+   (set_attr \"cc\" \"set_zn_c0\")])\n+\n (define_insn \"tstqi\"\n   [(set (cc0) (match_operand:QI 0 \"register_operand\" \"r\"))]\n   \"\"\n@@ -1825,148 +1822,6 @@\n ;; The H8/300 has given 1/8th of its opcode space to bitfield\n ;; instructions so let's use them as well as we can.\n \n-;; BCC and BCS patterns.\n-\n-(define_insn \"\"\n-  [(set (pc)\n-\t(if_then_else \n-\t (match_operator 1 \"eq_operator\"\n-\t\t\t [(zero_extract:QI \n-\t\t\t    (match_operand:HI 2 \"register_operand\" \"r\")\n-\t\t\t    (const_int 1)\n-\t\t\t    (match_operand:HI 3 \"immediate_operand\" \"i\"))\n-\t\t\t  (const_int 0)])\n-\t (label_ref (match_operand 0 \"\" \"\"))\n-\t (pc)))]\n-  \"\"\n-  \"*\n-{\n-  /* The length of this insn includes the bld insn below.  We\n-     compute the length of the branch without the bld so we\n-     can easily choose the right branch length.  */\n-  int branch_length = get_attr_length (insn);\n-\n-  if (! register_operand (operands[2], HImode))\n-    branch_length -= 4;\n-  else\n-    branch_length -= 2;\n-\n-  output_asm_insn(\\\"bld\t%Z3,%Y2\\\", operands);\n-  if (branch_length == 2) \n-    return \\\"%d1\t%l0\\\";\n-  else if (branch_length == 4) \n-    return \\\"%d1\t%l0:16\\\";\n-  else\n-    return \\\"%g1\t%L0\\;jmp\t@%l0\\;%L0:\\\";\n-}\" \n-  [(set_attr \"type\" \"bcs\")\n-   (set_attr \"cc\" \"clobber\")])\n-\n-(define_insn \"\"\n-  [(set (pc)\n-\t(if_then_else \n-\t (match_operator 1 \"eq_operator\"\n-\t\t\t [(zero_extract:HI\n-\t\t\t    (match_operand:HI 2 \"register_operand\" \"r\")\n-\t\t\t    (const_int 1)\n-\t\t\t    (match_operand:HI 3 \"immediate_operand\" \"i\"))\n-\t\t\t  (const_int 0)])\n-\t (label_ref (match_operand 0 \"\" \"\"))\n-\t (pc)))]\n-  \"\"\n-  \"*\n-{\n-  /* The length of this insn includes the bld insn below.  We\n-     compute the length of the branch without the bld so we\n-     can easily choose the right branch length.  */\n-  int branch_length = get_attr_length (insn);\n-\n-  if (! register_operand (operands[2], HImode))\n-    branch_length -= 4;\n-  else\n-    branch_length -= 2;\n-\n-  output_asm_insn(\\\"bld\t%Z3,%Y2\\\", operands);\n-  if (branch_length == 2) \n-    return \\\"%d1\t%l0\\\";\n-  else if (branch_length == 4) \n-    return \\\"%d1\t%l0:16\\\";\n-  else\n-    return \\\"%g1\t%L0\\;jmp\t@%l0\\;%L0:\\\";\n-}\" \n-  [(set_attr \"type\" \"bcs\")\n-   (set_attr \"cc\" \"clobber\")])\n-\n-(define_insn \"\"\n-  [(set (pc)\n-\t(if_then_else \n-\t (match_operator 1 \"eq_operator\"\n-\t\t\t [(zero_extract:HI\n-\t\t\t    (match_operand:HI 2 \"register_operand\" \"U\")\n-\t\t\t    (const_int 1)\n-\t\t\t    (match_operand:HI 3 \"immediate_operand\" \"i\"))\n-\t\t\t  (const_int 0)])\n-\t (pc)\n-\t (label_ref (match_operand 0 \"\" \"\"))))]\n-  \"\"\n-  \"*\n-{\n-  /* The length of this insn includes the bld insn below.  We\n-     compute the length of the branch without the bld so we\n-     can easily choose the right branch length.  */\n-  int branch_length = get_attr_length (insn);\n-\n-  if (! register_operand (operands[2], HImode))\n-    branch_length -= 4;\n-  else\n-    branch_length -= 2;\n-\n-  output_asm_insn(\\\"bld\t%Z3,%Y2\\\", operands);\n-  if (branch_length == 2) \n-    return \\\"%d1\t%l0\\\";\n-  else if (branch_length == 4) \n-    return \\\"%d1\t%l0:16\\\";\n-  else\n-    return \\\"%g1\t%L0\\;jmp\t@%l0\\;%L0:\\\";\n-}\" \n-  [(set_attr \"type\" \"bcs\")\n-   (set_attr \"cc\" \"clobber\")])\n-\n-(define_insn \"\"\n-  [(set (pc)\n-\t(if_then_else \n-\t (match_operator 1 \"eq_operator\"\n-\t\t\t [(zero_extract:QI \n-\t\t\t    (match_operand:HI 2 \"register_operand\" \"r\")\n-\t\t\t    (const_int 1)\n-\t\t\t    (match_operand:HI 3 \"immediate_operand\" \"i\"))\n-\t\t\t  (const_int 0)])\n-\t (pc)\n-\t (label_ref (match_operand 0 \"\" \"\"))))]\n-  \"\"\n-  \"*\n-{\n-  /* The length of this insn includes the bld insn below.  We\n-     compute the length of the branch without the bld so we\n-     can easily choose the right branch length.  */\n-  int branch_length = get_attr_length (insn);\n-\n-  if (! register_operand (operands[2], HImode))\n-    branch_length -= 4;\n-  else\n-    branch_length -= 2;\n-\n-  output_asm_insn(\\\"bld\t%Z3,%Y2\\\", operands);\n-  if (branch_length == 2) \n-    return \\\"%d1\t%l0\\\";\n-  else if (branch_length == 4) \n-    return \\\"%d1\t%l0:16\\\";\n-  else\n-    return \\\"%g1\t%L0\\;jmp\t@%l0\\;%L0:\\\";\n-}\" \n-  [(set_attr \"type\" \"bcs\")\n-   (set_attr \"cc\" \"clobber\")])\n-\n ;; You'll never believe all these patterns perform one basic action --\n ;; load a bit from the source, optionally invert the bit, then store it\n ;; in the destination (which is known to be zero)..  "}]}