{"sha": "e1c7971b81abab836f2fc4f0b8d0f7964f8a6e13", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTFjNzk3MWI4MWFiYWI4MzZmMmZjNGYwYjhkMGY3OTY0ZjhhNmUxMw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2018-04-06T17:36:33Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2018-04-06T17:36:33Z"}, "message": "C++: more std header hints; filter on C++ dialect (PR c++/84269)\n\nThis patch adds more suggestions as per:\n  https://gcc.gnu.org/bugzilla/show_bug.cgi?id=84269#c10\nsome of which need C++14 and C++17, and some of which use headers that\nexist in earlier standards.\n\nFor example, <memory> exists in C++98, but if the user attempts to\nuse std::make_shared with -std=c++98, they are suggested to include\n<memory>, even if they've already included it.\n\nThis patch adds the missing names, and fixes the nonsensical suggestions\nby detecting if the name isn't available yet, based on the user's\ndialect, and reporting things more intelligently:\n\nt.cc: In function 'void test_make_shared()':\nt.cc:5:8: error: 'make_shared' is not a member of 'std'\n   std::make_shared<int>();\n        ^~~~~~~~~~~\nt.cc:5:8: note: 'std::make_shared' is only available from C++11 onwards\n\ngcc/cp/ChangeLog:\n\tPR c++/84269\n\t* name-lookup.c (struct std_name_hint): Move out of\n\tget_std_name_hint; add field \"min_dialect\".\n\t(get_std_name_hint): Add min_dialect values to all initializers.\n\tAdd <any>, <atomic>, <bitset>, <condition_variable>, <functional>,\n\t<future>, <istream>, <iterator>, <ostream>, <mutex>, <optional>,\n\t<shared_mutex>, <string_view>, <thread>, and <variant>.\n\tAdd fstream, ifstream, and ofstream to <fstream>.\n\tAdd istringstream, ostringstream, and stringstream to <sstream>.\n\tAdd basic_string to <string>.\n\tAdd tuple_element and tuple_size to <tuple>.\n\tAdd declval to <utility>.\n\tFix ordering of <queue> and <tuple>.\n\tReturn a std_name_hint, rather than a const char *.\n\t(get_cxx_dialect_name): New function.\n\t(maybe_suggest_missing_std_header): Detect names that aren't yet\n\tavailable in the current dialect, and instead of suggesting a\n\tmissing #include, warn about the dialect.\n\ngcc/testsuite/ChangeLog:\n\tPR c++/84269\n\t* g++.dg/lookup/missing-std-include-6.C: Move std::array and\n\tstd::tuple here since they need C++11.\n\t* g++.dg/lookup/missing-std-include-8.C: New test.\n\t* g++.dg/lookup/missing-std-include.C: Move std::array and\n\tstd::tuple test to missing-std-include-6.C to avoid failures\n\twith C++98.\n\nFrom-SVN: r259184", "tree": {"sha": "2c62c552dbbc7b2b5a90121f7a8243e43fa9d57e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c62c552dbbc7b2b5a90121f7a8243e43fa9d57e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e1c7971b81abab836f2fc4f0b8d0f7964f8a6e13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1c7971b81abab836f2fc4f0b8d0f7964f8a6e13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1c7971b81abab836f2fc4f0b8d0f7964f8a6e13", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1c7971b81abab836f2fc4f0b8d0f7964f8a6e13/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c617fb562d510101b5445464753858a557020acb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c617fb562d510101b5445464753858a557020acb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c617fb562d510101b5445464753858a557020acb"}], "stats": {"total": 357, "additions": 279, "deletions": 78}, "files": [{"sha": "e71b4fbe9d82bc1d30e628bf185eab50287c85f5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1c7971b81abab836f2fc4f0b8d0f7964f8a6e13/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1c7971b81abab836f2fc4f0b8d0f7964f8a6e13/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e1c7971b81abab836f2fc4f0b8d0f7964f8a6e13", "patch": "@@ -1,3 +1,24 @@\n+2018-04-06  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c++/84269\n+\t* name-lookup.c (struct std_name_hint): Move out of\n+\tget_std_name_hint; add field \"min_dialect\".\n+\t(get_std_name_hint): Add min_dialect values to all initializers.\n+\tAdd <any>, <atomic>, <bitset>, <condition_variable>, <functional>,\n+\t<future>, <istream>, <iterator>, <ostream>, <mutex>, <optional>,\n+\t<shared_mutex>, <string_view>, <thread>, and <variant>.\n+\tAdd fstream, ifstream, and ofstream to <fstream>.\n+\tAdd istringstream, ostringstream, and stringstream to <sstream>.\n+\tAdd basic_string to <string>.\n+\tAdd tuple_element and tuple_size to <tuple>.\n+\tAdd declval to <utility>.\n+\tFix ordering of <queue> and <tuple>.\n+\tReturn a std_name_hint, rather than a const char *.\n+\t(get_cxx_dialect_name): New function.\n+\t(maybe_suggest_missing_std_header): Detect names that aren't yet\n+\tavailable in the current dialect, and instead of suggesting a\n+\tmissing #include, warn about the dialect.\n+\n 2018-04-06  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/85210"}, {"sha": "ca776844c9ce302a9e89644a62725b4124f8cf08", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 191, "deletions": 71, "changes": 262, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1c7971b81abab836f2fc4f0b8d0f7964f8a6e13/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1c7971b81abab836f2fc4f0b8d0f7964f8a6e13/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=e1c7971b81abab836f2fc4f0b8d0f7964f8a6e13", "patch": "@@ -5469,104 +5469,214 @@ suggest_alternatives_for (location_t location, tree name,\n     }\n }\n \n+/* A well-known name within the C++ standard library, returned by\n+   get_std_name_hint.  */\n+\n+struct std_name_hint\n+{\n+  /* A name within \"std::\".  */\n+  const char *name;\n+\n+  /* The header name defining it within the C++ Standard Library\n+     (with '<' and '>').  */\n+  const char *header;\n+\n+  /* The dialect of C++ in which this was added.  */\n+  enum cxx_dialect min_dialect;\n+};\n+\n /* Subroutine of maybe_suggest_missing_header for handling unrecognized names\n    for some of the most common names within \"std::\".\n-   Given non-NULL NAME, a name for lookup within \"std::\", return the header\n-   name defining it within the C++ Standard Library (with '<' and '>'),\n-   or NULL.  */\n+   Given non-NULL NAME, return the std_name_hint for it, or NULL.  */\n \n-static const char *\n+static const std_name_hint *\n get_std_name_hint (const char *name)\n {\n-  struct std_name_hint\n-  {\n-    const char *name;\n-    const char *header;\n-  };\n   static const std_name_hint hints[] = {\n+    /* <any>.  */\n+    {\"any\", \"<any>\", cxx17},\n+    {\"any_cast\", \"<any>\", cxx17},\n+    {\"make_any\", \"<any>\", cxx17},\n     /* <array>.  */\n-    {\"array\", \"<array>\"}, // C++11\n+    {\"array\", \"<array>\", cxx11},\n+    /* <atomic>.  */\n+    {\"atomic\", \"<atomic>\", cxx11},\n+    {\"atomic_flag\", \"<atomic>\", cxx11},\n+    /* <bitset>.  */\n+    {\"bitset\", \"<bitset>\", cxx11},\n     /* <complex>.  */\n-    {\"complex\", \"<complex>\"},\n-    {\"complex_literals\", \"<complex>\"},\n+    {\"complex\", \"<complex>\", cxx98},\n+    {\"complex_literals\", \"<complex>\", cxx98},\n+    /* <condition_variable>. */\n+    {\"condition_variable\", \"<condition_variable>\", cxx11},\n+    {\"condition_variable_any\", \"<condition_variable>\", cxx11},\n     /* <deque>.  */\n-    {\"deque\", \"<deque>\"},\n+    {\"deque\", \"<deque>\", cxx98},\n     /* <forward_list>.  */\n-    {\"forward_list\", \"<forward_list>\"},  // C++11\n+    {\"forward_list\", \"<forward_list>\", cxx11},\n     /* <fstream>.  */\n-    {\"basic_filebuf\", \"<fstream>\"},\n-    {\"basic_ifstream\", \"<fstream>\"},\n-    {\"basic_ofstream\", \"<fstream>\"},\n-    {\"basic_fstream\", \"<fstream>\"},\n+    {\"basic_filebuf\", \"<fstream>\", cxx98},\n+    {\"basic_ifstream\", \"<fstream>\", cxx98},\n+    {\"basic_ofstream\", \"<fstream>\", cxx98},\n+    {\"basic_fstream\", \"<fstream>\", cxx98},\n+    {\"fstream\", \"<fstream>\", cxx98},\n+    {\"ifstream\", \"<fstream>\", cxx98},\n+    {\"ofstream\", \"<fstream>\", cxx98},\n+    /* <functional>.  */\n+    {\"bind\", \"<functional>\", cxx11},\n+    {\"function\", \"<functional>\", cxx11},\n+    {\"hash\", \"<functional>\", cxx11},\n+    {\"mem_fn\", \"<functional>\", cxx11},\n+    /* <future>. */\n+    {\"async\", \"<future>\", cxx11},\n+    {\"future\", \"<future>\", cxx11},\n+    {\"packaged_task\", \"<future>\", cxx11},\n+    {\"promise\", \"<future>\", cxx11},\n     /* <iostream>.  */\n-    {\"cin\", \"<iostream>\"},\n-    {\"cout\", \"<iostream>\"},\n-    {\"cerr\", \"<iostream>\"},\n-    {\"clog\", \"<iostream>\"},\n-    {\"wcin\", \"<iostream>\"},\n-    {\"wcout\", \"<iostream>\"},\n-    {\"wclog\", \"<iostream>\"},\n+    {\"cin\", \"<iostream>\", cxx98},\n+    {\"cout\", \"<iostream>\", cxx98},\n+    {\"cerr\", \"<iostream>\", cxx98},\n+    {\"clog\", \"<iostream>\", cxx98},\n+    {\"wcin\", \"<iostream>\", cxx98},\n+    {\"wcout\", \"<iostream>\", cxx98},\n+    {\"wclog\", \"<iostream>\", cxx98},\n+    /* <istream>.  */\n+    {\"istream\", \"<istream>\", cxx98},\n+    /* <iterator>.  */\n+    {\"advance\", \"<iterator>\", cxx98},\n+    {\"back_inserter\", \"<iterator>\", cxx98},\n+    {\"begin\", \"<iterator>\", cxx11},\n+    {\"distance\", \"<iterator>\", cxx98},\n+    {\"end\", \"<iterator>\", cxx11},\n+    {\"front_inserter\", \"<iterator>\", cxx98},\n+    {\"inserter\", \"<iterator>\", cxx98},\n+    {\"istream_iterator\", \"<iterator>\", cxx98},\n+    {\"istreambuf_iterator\", \"<iterator>\", cxx98},\n+    {\"iterator_traits\", \"<iterator>\", cxx98},\n+    {\"move_iterator\", \"<iterator>\", cxx11},\n+    {\"next\", \"<iterator>\", cxx11},\n+    {\"ostream_iterator\", \"<iterator>\", cxx98},\n+    {\"ostreambuf_iterator\", \"<iterator>\", cxx98},\n+    {\"prev\", \"<iterator>\", cxx11},\n+    {\"reverse_iterator\", \"<iterator>\", cxx98},\n+    /* <ostream>.  */\n+    {\"ostream\", \"<ostream>\", cxx98},\n     /* <list>.  */\n-    {\"list\", \"<list>\"},\n+    {\"list\", \"<list>\", cxx98},\n     /* <map>.  */\n-    {\"map\", \"<map>\"},\n-    {\"multimap\", \"<map>\"},\n+    {\"map\", \"<map>\", cxx98},\n+    {\"multimap\", \"<map>\", cxx98},\n     /* <memory>.  */\n-    {\"make_shared\", \"<memory>\"},\n-    {\"make_unique\", \"<memory>\"},\n-    {\"shared_ptr\", \"<memory>\"},\n-    {\"unique_ptr\", \"<memory>\"},\n-    {\"weak_ptr\", \"<memory>\"},\n-    /* <queue>.  */\n-    {\"queue\", \"<queue>\"},\n-    {\"priority_queue\", \"<queue>\"},\n+    {\"make_shared\", \"<memory>\", cxx11},\n+    {\"make_unique\", \"<memory>\", cxx11},\n+    {\"shared_ptr\", \"<memory>\", cxx11},\n+    {\"unique_ptr\", \"<memory>\", cxx11},\n+    {\"weak_ptr\", \"<memory>\", cxx11},\n+    /* <mutex>.  */\n+    {\"mutex\", \"<mutex>\", cxx11},\n+    {\"timed_mutex\", \"<mutex>\", cxx11},\n+    {\"recursive_mutex\", \"<mutex>\", cxx11},\n+    {\"recursive_timed_mutex\", \"<mutex>\", cxx11},\n+    {\"once_flag\", \"<mutex>\", cxx11},\n+    {\"call_once,\", \"<mutex>\", cxx11},\n+    {\"lock\", \"<mutex>\", cxx11},\n+    {\"scoped_lock\", \"<mutex>\", cxx17},\n+    {\"try_lock\", \"<mutex>\", cxx11},\n+    {\"lock_guard\", \"<mutex>\", cxx11},\n+    {\"unique_lock\", \"<mutex>\", cxx11},\n+    /* <optional>. */\n+    {\"optional\", \"<optional>\", cxx17},\n+    {\"make_optional\", \"<optional>\", cxx17},\n     /* <ostream>.  */\n-    {\"ostream\", \"<ostream>\"},\n-    {\"wostream\", \"<ostream>\"},\n-    {\"ends\", \"<ostream>\"},\n-    {\"flush\", \"<ostream>\"},\n-    {\"endl\", \"<ostream>\"},\n+    {\"ostream\", \"<ostream>\", cxx98},\n+    {\"wostream\", \"<ostream>\", cxx98},\n+    {\"ends\", \"<ostream>\", cxx98},\n+    {\"flush\", \"<ostream>\", cxx98},\n+    {\"endl\", \"<ostream>\", cxx98},\n+    /* <queue>.  */\n+    {\"queue\", \"<queue>\", cxx98},\n+    {\"priority_queue\", \"<queue>\", cxx98},\n     /* <set>.  */\n-    {\"set\", \"<set>\"},\n-    {\"multiset\", \"<set>\"},\n+    {\"set\", \"<set>\", cxx98},\n+    {\"multiset\", \"<set>\", cxx98},\n+    /* <shared_mutex>.  */\n+    {\"shared_lock\", \"<shared_mutex>\", cxx14},\n+    {\"shared_mutex\", \"<shared_mutex>\", cxx17},\n+    {\"shared_timed_mutex\", \"<shared_mutex>\", cxx14},\n     /* <sstream>.  */\n-    {\"basic_stringbuf\", \"<sstream>\"},\n-    {\"basic_istringstream\", \"<sstream>\"},\n-    {\"basic_ostringstream\", \"<sstream>\"},\n-    {\"basic_stringstream\", \"<sstream>\"},\n+    {\"basic_stringbuf\", \"<sstream>\", cxx98},\n+    {\"basic_istringstream\", \"<sstream>\", cxx98},\n+    {\"basic_ostringstream\", \"<sstream>\", cxx98},\n+    {\"basic_stringstream\", \"<sstream>\", cxx98},\n+    {\"istringstream\", \"<sstream>\", cxx98},\n+    {\"ostringstream\", \"<sstream>\", cxx98},\n+    {\"stringstream\", \"<sstream>\", cxx98},\n     /* <stack>.  */\n-    {\"stack\", \"<stack>\"},\n-    /* <tuple>.  */\n-    {\"make_tuple\", \"<tuple>\"},\n-    {\"tuple\", \"<tuple>\"},\n+    {\"stack\", \"<stack>\", cxx98},\n     /* <string>.  */\n-    {\"string\", \"<string>\"},\n-    {\"wstring\", \"<string>\"},\n-    {\"u16string\", \"<string>\"},\n-    {\"u32string\", \"<string>\"},\n+    {\"basic_string\", \"<string>\", cxx98},\n+    {\"string\", \"<string>\", cxx98},\n+    {\"wstring\", \"<string>\", cxx98},\n+    {\"u16string\", \"<string>\", cxx11},\n+    {\"u32string\", \"<string>\", cxx11},\n+    /* <string_view>.  */\n+    {\"string_view\", \"<string_view>\", cxx17},\n+    /* <thread>.  */\n+    {\"thread\", \"<thread>\", cxx11},\n+    /* <tuple>.  */\n+    {\"make_tuple\", \"<tuple>\", cxx11},\n+    {\"tuple\", \"<tuple>\", cxx11},\n+    {\"tuple_element\", \"<tuple>\", cxx11},\n+    {\"tuple_size\", \"<tuple>\", cxx11},\n     /* <unordered_map>.  */\n-    {\"unordered_map\", \"<unordered_map>\"}, // C++11\n-    {\"unordered_multimap\", \"<unordered_map>\"}, // C++11\n+    {\"unordered_map\", \"<unordered_map>\", cxx11},\n+    {\"unordered_multimap\", \"<unordered_map>\", cxx11},\n     /* <unordered_set>.  */\n-    {\"unordered_set\", \"<unordered_set>\"}, // C++11\n-    {\"unordered_multiset\", \"<unordered_set>\"}, // C++11\n+    {\"unordered_set\", \"<unordered_set>\", cxx11},\n+    {\"unordered_multiset\", \"<unordered_set>\", cxx11},\n     /* <utility>.  */\n-    {\"forward\", \"<utility>\"},\n-    {\"make_pair\", \"<utility>\"},\n-    {\"move\", \"<utility>\"},\n-    {\"pair\", \"<utility>\"},\n+    {\"declval\", \"<utility>\", cxx11},\n+    {\"forward\", \"<utility>\", cxx11},\n+    {\"make_pair\", \"<utility>\", cxx98},\n+    {\"move\", \"<utility>\", cxx11},\n+    {\"pair\", \"<utility>\", cxx98},\n+    /* <variant>.  */\n+    {\"variant\", \"<variant>\", cxx17},\n+    {\"visit\", \"<variant>\", cxx17},\n     /* <vector>.  */\n-    {\"vector\", \"<vector>\"},\n+    {\"vector\", \"<vector>\", cxx98},\n   };\n   const size_t num_hints = sizeof (hints) / sizeof (hints[0]);\n   for (size_t i = 0; i < num_hints; i++)\n     {\n       if (strcmp (name, hints[i].name) == 0)\n-\treturn hints[i].header;\n+\treturn &hints[i];\n     }\n   return NULL;\n }\n \n+/* Describe DIALECT.  */\n+\n+static const char *\n+get_cxx_dialect_name (enum cxx_dialect dialect)\n+{\n+  switch (dialect)\n+    {\n+    default:\n+      gcc_unreachable ();\n+    case cxx98:\n+      return \"C++98\";\n+    case cxx11:\n+      return \"C++11\";\n+    case cxx14:\n+      return \"C++14\";\n+    case cxx17:\n+      return \"C++17\";\n+    case cxx2a:\n+      return \"C++2a\";\n+    }\n+}\n+\n /* Suggest pertinent header files for NAME at LOCATION, for common\n    names within the \"std\" namespace.\n    Return true iff a suggestion was offered.  */\n@@ -5577,16 +5687,26 @@ maybe_suggest_missing_std_header (location_t location, tree name)\n   gcc_assert (TREE_CODE (name) == IDENTIFIER_NODE);\n \n   const char *name_str = IDENTIFIER_POINTER (name);\n-  const char *header_hint = get_std_name_hint (name_str);\n+  const std_name_hint *header_hint = get_std_name_hint (name_str);\n   if (!header_hint)\n     return false;\n \n   gcc_rich_location richloc (location);\n-  maybe_add_include_fixit (&richloc, header_hint);\n-  inform (&richloc,\n-\t  \"%<std::%s%> is defined in header %qs;\"\n-\t  \" did you forget to %<#include %s%>?\",\n-\t  name_str, header_hint, header_hint);\n+  if (cxx_dialect >= header_hint->min_dialect)\n+    {\n+      const char *header = header_hint->header;\n+      maybe_add_include_fixit (&richloc, header);\n+      inform (&richloc,\n+\t      \"%<std::%s%> is defined in header %qs;\"\n+\t      \" did you forget to %<#include %s%>?\",\n+\t      name_str, header, header);\n+    }\n+  else\n+    {\n+      inform (&richloc,\n+\t      \"%<std::%s%> is only available from %s onwards\",\n+\t      name_str, get_cxx_dialect_name (header_hint->min_dialect));\n+    }\n   return true;\n }\n "}, {"sha": "e92ad3c241a679478c80a5eb6ba70b4427dfe817", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1c7971b81abab836f2fc4f0b8d0f7964f8a6e13/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1c7971b81abab836f2fc4f0b8d0f7964f8a6e13/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e1c7971b81abab836f2fc4f0b8d0f7964f8a6e13", "patch": "@@ -1,3 +1,13 @@\n+2018-04-06  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c++/84269\n+\t* g++.dg/lookup/missing-std-include-6.C: Move std::array and\n+\tstd::tuple here since they need C++11.\n+\t* g++.dg/lookup/missing-std-include-8.C: New test.\n+\t* g++.dg/lookup/missing-std-include.C: Move std::array and\n+\tstd::tuple test to missing-std-include-6.C to avoid failures\n+\twith C++98.\n+\n 2018-04-06  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/85252"}, {"sha": "d9eeb4284e8835244ca89303d82ab26c10ad2af4", "filename": "gcc/testsuite/g++.dg/lookup/missing-std-include-6.C", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1c7971b81abab836f2fc4f0b8d0f7964f8a6e13/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fmissing-std-include-6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1c7971b81abab836f2fc4f0b8d0f7964f8a6e13/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fmissing-std-include-6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fmissing-std-include-6.C?ref=e1c7971b81abab836f2fc4f0b8d0f7964f8a6e13", "patch": "@@ -60,3 +60,16 @@ void test_move(T&& arg)\n   // { dg-message \"'#include <utility>'\" \"\" { target *-*-* } .-1 }\n   // { dg-error \"expected primary-expression before '>' token\" \"\" { target *-*-* } .-2 }\n }\n+\n+void test_array ()\n+{\n+  std::array a; // { dg-error \".array. is not a member of .std.\" }\n+  // { dg-message \".std::array. is defined in header .<array>.; did you forget to .#include <array>.?\" \"\" { target *-*-* } .-1 }\n+}\n+\n+void test_tuple ()\n+{\n+  std::tuple<int,float> p; // { dg-error \".tuple. is not a member of .std.\" }\n+  // { dg-message \".std::tuple. is defined in header .<tuple>.; did you forget to .#include <tuple>.?\" \"\" { target *-*-* } .-1 }\n+  // { dg-error \"expected primary-expression before .int.\" \"\" { target *-*-* } .-2 }\n+}"}, {"sha": "68b208299f2e2482a4bf1e228f35fd57f009465e", "filename": "gcc/testsuite/g++.dg/lookup/missing-std-include-8.C", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1c7971b81abab836f2fc4f0b8d0f7964f8a6e13/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fmissing-std-include-8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1c7971b81abab836f2fc4f0b8d0f7964f8a6e13/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fmissing-std-include-8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fmissing-std-include-8.C?ref=e1c7971b81abab836f2fc4f0b8d0f7964f8a6e13", "patch": "@@ -0,0 +1,44 @@\n+/* Verify that we don't offer #include suggestions for things that\n+   aren't yet available due to the C++ dialect in use.  */\n+// { dg-do compile { target c++98_only } }\n+\n+#include <memory>\n+\n+template<class T>\n+void test_make_shared ()\n+{\n+  std::make_shared<T>(); // { dg-error \"'make_shared' is not a member of 'std'\" }\n+  // { dg-message \"'std::make_shared' is only available from C\\\\+\\\\+11 onwards\" \"\" { target *-*-* } .-1 }\n+  // { dg-error \"expected primary-expression before '>' token\" \"\" { target *-*-* } .-2 }\n+  // { dg-error \"expected primary-expression before '\\\\)' token\" \"\" { target *-*-* } .-3 }\n+}\n+\n+void test_array ()\n+{\n+  std::array a; // { dg-error \"'array' is not a member of 'std'\" }\n+  // { dg-message \"'std::array' is only available from C\\\\+\\\\+11 onwards\" \"\" { target *-*-* } .-1 }\n+}\n+\n+void test_tuple ()\n+{\n+  std::tuple<int,float> p; // { dg-error \"'tuple' is not a member of 'std'\" }\n+  // { dg-message \"'std::tuple' is only available from C\\\\+\\\\+11 onwards\" \"\" { target *-*-* } .-1 }\n+  // { dg-error \"expected primary-expression before 'int'\" \"\" { target *-*-* } .-2 }\n+}\n+\n+/* Since C++14.  */\n+std::shared_timed_mutex m; // { dg-error \"'shared_timed_mutex' in namespace 'std' does not name a type\" }\n+// { dg-message \"'std::shared_timed_mutex' is only available from C\\\\+\\\\+14 onwards\" \"\" { target *-*-* } .-1 }\n+\n+/* Since C++17: */\n+std::string_view sv; // { dg-error \"'string_view' in namespace 'std' does not name a type\" }\n+// { dg-message \"'std::string_view' is only available from C\\\\+\\\\+17 onwards\" \"\" { target *-*-* } .-1 }\n+\n+/* Verify interaction with \"using namespace std;\".  */\n+using namespace std;\n+void test_via_using_directive ()\n+{\n+  shared_ptr<int> p; // { dg-error \"'shared_ptr' was not declared in this scope\" }\n+  // { dg-message \"'std::shared_ptr' is only available from C\\\\+\\\\+11 onwards\" \"\" { target *-*-* } .-1 }\n+  // { dg-error \"expected primary-expression before 'int'\" \"\" { target *-*-* } .-2 }\n+}"}, {"sha": "0fcc72b7d30e2e1efc875927a85710d50fe5144a", "filename": "gcc/testsuite/g++.dg/lookup/missing-std-include.C", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1c7971b81abab836f2fc4f0b8d0f7964f8a6e13/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fmissing-std-include.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1c7971b81abab836f2fc4f0b8d0f7964f8a6e13/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fmissing-std-include.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fmissing-std-include.C?ref=e1c7971b81abab836f2fc4f0b8d0f7964f8a6e13", "patch": "@@ -13,9 +13,6 @@ void test (void)\n   std::cin >> i; // { dg-error \".cin. is not a member of .std.\" }\n   // { dg-message \".std::cin. is defined in header .<iostream>.; did you forget to .#include <iostream>.?\" \"\" { target *-*-* } .-1 }\n \n-  std::array a; // { dg-error \".array. is not a member of .std.\" }\n-  // { dg-message \".std::array. is defined in header .<array>.; did you forget to .#include <array>.?\" \"\" { target *-*-* } .-1 }\n-\n   std::deque a; // { dg-error \".deque. is not a member of .std.\" }\n   // { dg-message \".std::deque. is defined in header .<deque>.; did you forget to .#include <deque>.?\" \"\" { target *-*-* } .-1 }\n \n@@ -30,8 +27,4 @@ void test (void)\n   std::pair<int,float> p; // { dg-error \".pair. is not a member of .std.\" }\n   // { dg-message \".std::pair. is defined in header .<utility>.; did you forget to .#include <utility>.?\" \"\" { target *-*-* } .-1 }\n   // { dg-error \"expected primary-expression before .int.\" \"\" { target *-*-* } .-2 }\n-\n-  std::tuple<int,float> p; // { dg-error \".tuple. is not a member of .std.\" }\n-  // { dg-message \".std::tuple. is defined in header .<tuple>.; did you forget to .#include <tuple>.?\" \"\" { target *-*-* } .-1 }\n-  // { dg-error \"expected primary-expression before .int.\" \"\" { target *-*-* } .-2 }\n }"}]}