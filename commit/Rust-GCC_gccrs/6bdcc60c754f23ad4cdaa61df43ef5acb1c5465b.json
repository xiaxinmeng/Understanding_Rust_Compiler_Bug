{"sha": "6bdcc60c754f23ad4cdaa61df43ef5acb1c5465b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmJkY2M2MGM3NTRmMjNhZDRjZGFhNjFkZjQzZWY1YWNiMWM1NDY1Yg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-02-20T09:39:25Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-02-20T09:39:25Z"}, "message": "i386.md (expm1xf2): Reorder insn sequence for better code generation.\n\n\t* config/i386/i386.md (expm1xf2): Reorder insn sequence for\n\tbetter code generation.\n\nFrom-SVN: r122158", "tree": {"sha": "34fe7eb033ec375c634fcf66dc7c41d8c0fbf918", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/34fe7eb033ec375c634fcf66dc7c41d8c0fbf918"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6bdcc60c754f23ad4cdaa61df43ef5acb1c5465b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bdcc60c754f23ad4cdaa61df43ef5acb1c5465b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bdcc60c754f23ad4cdaa61df43ef5acb1c5465b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bdcc60c754f23ad4cdaa61df43ef5acb1c5465b/comments", "author": null, "committer": null, "parents": [{"sha": "77bb16aaddaf66bb78104f920ca779966101fb2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77bb16aaddaf66bb78104f920ca779966101fb2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77bb16aaddaf66bb78104f920ca779966101fb2a"}], "stats": {"total": 29, "additions": 19, "deletions": 10}, "files": [{"sha": "d57787877550ec4fb051c14d31f826e106d9426f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bdcc60c754f23ad4cdaa61df43ef5acb1c5465b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bdcc60c754f23ad4cdaa61df43ef5acb1c5465b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6bdcc60c754f23ad4cdaa61df43ef5acb1c5465b", "patch": "@@ -1,3 +1,8 @@\n+2007-02-20  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (expm1xf2): Reorder insn sequence for\n+\tbetter code generation.\n+\n 2007-02-20  Ben Elliston  <bje@au.ibm.com>\n \n \t* config/m68hc11/m68hc11.h (OVERRIDE_OPTIONS): Remove extra ;.\n@@ -74,9 +79,9 @@\n \n 2007-02-19  Richard Henderson  <rth@redhat.com>\n \n-        PR debug/29558\n-        * var-tracking.c (track_expr_p): Disallow AGGREGATE_TYPE_P\n-        in memory.\n+\tPR debug/29558\n+\t* var-tracking.c (track_expr_p): Disallow AGGREGATE_TYPE_P\n+\tin memory.\n \n 2007-02-19  Andreas Krebbel  <krebbel1@de.ibm.com>\n \n@@ -826,7 +831,7 @@\n \n \t* except.c (expand_builtin_eh_return_data_regno): Pass entire\n \tCALL_EXPR as parameter instead of arglist.  Use new CALL_EXPR\n-        accessors.\n+\taccessors.\n \n \t* coverage.c (create_coverage): Use build_call_expr.\n \n@@ -2333,8 +2338,8 @@\n \n 2007-02-03  Douglas Gregor  <doug.gregor@gmail.com>\n \n-       * c-opts.c (c_common_post_options): If C++0x mode is enabled, don't\n-       warn about C++0x compatibility.\n+\t* c-opts.c (c_common_post_options): If C++0x mode is enabled, don't\n+\twarn about C++0x compatibility.\n \n 2007-02-04  Kazu Hirata  <kazu@codesourcery.com>\n "}, {"sha": "7dae8e1e0b75d7acf6ebd9aa97011a727b39613e", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bdcc60c754f23ad4cdaa61df43ef5acb1c5465b/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bdcc60c754f23ad4cdaa61df43ef5acb1c5465b/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=6bdcc60c754f23ad4cdaa61df43ef5acb1c5465b", "patch": "@@ -17145,11 +17145,12 @@\n \t\t\t       (match_dup 2)))\n    (set (match_dup 4) (unspec:XF [(match_dup 3)] UNSPEC_FRNDINT))\n    (set (match_dup 5) (minus:XF (match_dup 3) (match_dup 4)))\n+   (set (match_dup 9) (float_extend:XF (match_dup 13)))\n    (set (match_dup 6) (unspec:XF [(match_dup 5)] UNSPEC_F2XM1))\n    (parallel [(set (match_dup 7)\n \t\t   (unspec:XF [(match_dup 6) (match_dup 4)]\n \t\t\t      UNSPEC_FSCALE_FRACT))\n-\t\t   (set (match_dup 8)\n+\t      (set (match_dup 8)\n \t\t   (unspec:XF [(match_dup 6) (match_dup 4)]\n \t\t\t      UNSPEC_FSCALE_EXP))])\n    (parallel [(set (match_dup 10)\n@@ -17158,7 +17159,8 @@\n \t      (set (match_dup 11)\n \t\t   (unspec:XF [(match_dup 9) (match_dup 8)]\n \t\t\t      UNSPEC_FSCALE_EXP))])\n-   (set (match_dup 12) (minus:XF (match_dup 10) (match_dup 9)))\n+   (set (match_dup 12) (minus:XF (match_dup 10)\n+\t\t\t\t (float_extend:XF (match_dup 13))))\n    (set (match_operand:XF 0 \"register_operand\" \"\")\n \t(plus:XF (match_dup 12) (match_dup 7)))]\n   \"TARGET_USE_FANCY_MATH_387\n@@ -17168,9 +17170,11 @@\n \n   for (i = 2; i < 13; i++)\n     operands[i] = gen_reg_rtx (XFmode);\n- \n+\n+  operands[13]\n+    = validize_mem (force_const_mem (SFmode, CONST1_RTX (SFmode))); /* fld1 */\n+\n   emit_move_insn (operands[2], standard_80387_constant_rtx (5)); /* fldl2e */\n-  emit_move_insn (operands[9], CONST1_RTX (XFmode));  /* fld1 */\n })\n \n (define_expand \"expm1<mode>2\""}]}