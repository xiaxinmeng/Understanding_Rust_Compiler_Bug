{"sha": "d32350e7a5eb5d31aaa1643dbc9db569fbc59b49", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDMyMzUwZTdhNWViNWQzMWFhYTE2NDNkYmM5ZGI1NjlmYmM1OWI0OQ==", "commit": {"author": {"name": "Dodji Seketeli", "email": "dodji@redhat.com", "date": "2012-10-10T10:24:35Z"}, "committer": {"name": "Dodji Seketeli", "email": "dodji@gcc.gnu.org", "date": "2012-10-10T10:24:35Z"}, "message": "Disambiguate nested objc-message-expressions and c++11 attributes\n\nA couple of obj-c++ tests were failing[1] because the tokens '[[' can\neither be the beginning of a c++11 attribute (that is itself at the\nbeginning of a statement), or the beginning of a nested\nobjc-message-expression.  This patch resolves the ambiguity by\ntentatively parsing the c++11 attribute and if it fails, then consider\nthe objc-message-expression.\n\nI missed this initially because it didn't occur to me that\n--enable-languages=all,ada does not include obj-c++.  Shame on me.  I\nhave now updated my compile farm scripts to use\n--enable-language=all,ada,obj-c++,go and I\n\n[1]:\n\nFAIL: obj-c++.dg/syntax-error-6.mm -fgnu-runtime  (test for errors, line 11)\nFAIL: obj-c++.dg/syntax-error-6.mm -fgnu-runtime (test for excess errors)\nFAIL: obj-c++.dg/template-8.mm -fgnu-runtime (test for excess errors)\n\nTested on x86_64-unknown-linux-gnu against trunk.\n\ngcc/cp/\n\n\t* parser (cp_parser_statement):  Parse c++11 attributes tentatively.\n\t(cp_parser_std_attribute_spec_seq): Do not warn too early about\n\tusing c++11 attributes in non c++11 mode.\n\nFrom-SVN: r192299", "tree": {"sha": "808a7094d3bc267b2c5af74bca6f47c4072d6400", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/808a7094d3bc267b2c5af74bca6f47c4072d6400"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d32350e7a5eb5d31aaa1643dbc9db569fbc59b49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d32350e7a5eb5d31aaa1643dbc9db569fbc59b49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d32350e7a5eb5d31aaa1643dbc9db569fbc59b49", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d32350e7a5eb5d31aaa1643dbc9db569fbc59b49/comments", "author": null, "committer": null, "parents": [{"sha": "137456439a3e92879acdda2a7e8fdff7c0c23142", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/137456439a3e92879acdda2a7e8fdff7c0c23142", "html_url": "https://github.com/Rust-GCC/gccrs/commit/137456439a3e92879acdda2a7e8fdff7c0c23142"}], "stats": {"total": 22, "additions": 21, "deletions": 1}, "files": [{"sha": "208d305e60470207e3925c4c6896214cf2ed9afc", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d32350e7a5eb5d31aaa1643dbc9db569fbc59b49/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d32350e7a5eb5d31aaa1643dbc9db569fbc59b49/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d32350e7a5eb5d31aaa1643dbc9db569fbc59b49", "patch": "@@ -1,3 +1,10 @@\n+2012-10-10  Dodji Seketeli  <dodji@redhat.com>\n+\n+\t* parser (cp_parser_statement): Parse c++11 attributes\n+\ttentatively.\n+\t(cp_parser_std_attribute_spec_seq): Do not warn too early about\n+\tusing c++11 attributes in non c++11 mode.\n+\n 2012-10-10  Dehao Chen  <dehao@google.com>\n \n \t* cp-gimplify.c (cp_genericize_r): Set location for TRY expr."}, {"sha": "a7939c87647dbfde8ae761205e7c3b9d60aaafeb", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d32350e7a5eb5d31aaa1643dbc9db569fbc59b49/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d32350e7a5eb5d31aaa1643dbc9db569fbc59b49/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=d32350e7a5eb5d31aaa1643dbc9db569fbc59b49", "patch": "@@ -8718,7 +8718,17 @@ cp_parser_statement (cp_parser* parser, tree in_statement_expr,\n \n   cp_lexer_save_tokens (parser->lexer);\n   attrs_location = cp_lexer_peek_token (parser->lexer)->location;\n+  if (c_dialect_objc ())\n+    /* In obj-c++, seing '[[' might be the either the beginning of\n+       c++11 attributes, or a nested objc-message-expression.  So\n+       let's parse the c++11 attributes tentatively.  */\n+    cp_parser_parse_tentatively (parser);\n   std_attrs = cp_parser_std_attribute_spec_seq (parser);\n+  if (c_dialect_objc ())\n+    {\n+      if (!cp_parser_parse_definitely (parser))\n+\tstd_attrs = NULL_TREE;\n+    }\n \n   /* Peek at the next token.  */\n   token = cp_lexer_peek_token (parser->lexer);\n@@ -20703,14 +20713,17 @@ cp_parser_std_attribute_spec (cp_parser *parser)\n       && cp_lexer_peek_nth_token (parser->lexer, 2)->type == CPP_OPEN_SQUARE)\n     {\n       cp_lexer_consume_token (parser->lexer);\n-      maybe_warn_cpp0x (CPP0X_ATTRIBUTES);\n       cp_lexer_consume_token (parser->lexer);\n \n       attributes = cp_parser_std_attribute_list (parser);\n \n       if (!cp_parser_require (parser, CPP_CLOSE_SQUARE, RT_CLOSE_SQUARE)\n \t  || !cp_parser_require (parser, CPP_CLOSE_SQUARE, RT_CLOSE_SQUARE))\n \tcp_parser_skip_to_end_of_statement (parser);\n+      else\n+\t/* Warn about parsing c++11 attribute in non-c++1 mode, only\n+\t   when we are sure that we have actually parsed them.  */\n+\tmaybe_warn_cpp0x (CPP0X_ATTRIBUTES);\n     }\n   else\n     {"}]}