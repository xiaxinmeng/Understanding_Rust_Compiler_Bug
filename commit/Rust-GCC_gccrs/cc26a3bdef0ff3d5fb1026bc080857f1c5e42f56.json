{"sha": "cc26a3bdef0ff3d5fb1026bc080857f1c5e42f56", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2MyNmEzYmRlZjBmZjNkNWZiMTAyNmJjMDgwODU3ZjFjNWU0MmY1Ng==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-02-08T11:20:23Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2019-02-08T11:20:23Z"}, "message": "utils.c (max_size): Be prepared for an operand with VOID_TYPE.\n\n\t* gcc-interface/utils.c (max_size) <tcc_unary>: Be prepared for an\n\toperand with VOID_TYPE.\n\nFrom-SVN: r268675", "tree": {"sha": "542eb040aafda23fa59f3480b44177fec52c1556", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/542eb040aafda23fa59f3480b44177fec52c1556"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc26a3bdef0ff3d5fb1026bc080857f1c5e42f56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc26a3bdef0ff3d5fb1026bc080857f1c5e42f56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc26a3bdef0ff3d5fb1026bc080857f1c5e42f56", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc26a3bdef0ff3d5fb1026bc080857f1c5e42f56/comments", "author": null, "committer": null, "parents": [{"sha": "0850f23b69439560c36b0be88ff8e1e3ef4a9ef6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0850f23b69439560c36b0be88ff8e1e3ef4a9ef6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0850f23b69439560c36b0be88ff8e1e3ef4a9ef6"}], "stats": {"total": 20, "additions": 16, "deletions": 4}, "files": [{"sha": "b120650cda8c7eab1f3c2ee8dacad57330899817", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc26a3bdef0ff3d5fb1026bc080857f1c5e42f56/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc26a3bdef0ff3d5fb1026bc080857f1c5e42f56/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=cc26a3bdef0ff3d5fb1026bc080857f1c5e42f56", "patch": "@@ -1,3 +1,8 @@\n+2019-02-08  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/utils.c (max_size) <tcc_unary>: Be prepared for an\n+\toperand with VOID_TYPE.\n+\n 2019-02-08  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/trans.c (elaborate_all_entities): Do not elaborate the"}, {"sha": "65b7e0f3cac9307da0ab10fcf39ed09d995944fa", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc26a3bdef0ff3d5fb1026bc080857f1c5e42f56/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc26a3bdef0ff3d5fb1026bc080857f1c5e42f56/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=cc26a3bdef0ff3d5fb1026bc080857f1c5e42f56", "patch": "@@ -3642,7 +3642,10 @@ fntype_same_flags_p (const_tree t, tree cico_list, bool return_unconstrained_p,\n \f\n /* EXP is an expression for the size of an object.  If this size contains\n    discriminant references, replace them with the maximum (if MAX_P) or\n-   minimum (if !MAX_P) possible value of the discriminant.  */\n+   minimum (if !MAX_P) possible value of the discriminant.\n+\n+   Note that the expression may have already been gimplified,in which case\n+   COND_EXPRs have VOID_TYPE and no operands, and this must be handled.  */\n \n tree\n max_size (tree exp, bool max_p)\n@@ -3714,11 +3717,15 @@ max_size (tree exp, bool max_p)\n       return build_int_cst (type, max_p ? 1 : 0);\n \n     case tcc_unary:\n+      op0 = TREE_OPERAND (exp, 0);\n+\n       if (code == NON_LVALUE_EXPR)\n-\treturn max_size (TREE_OPERAND (exp, 0), max_p);\n+\treturn max_size (op0, max_p);\n+\n+      if (VOID_TYPE_P (TREE_TYPE (op0)))\n+\treturn max_p ? TYPE_MAX_VALUE (type) : TYPE_MIN_VALUE (type);\n \n-      op0 = max_size (TREE_OPERAND (exp, 0),\n-\t\t      code == NEGATE_EXPR ? !max_p : max_p);\n+      op0 = max_size (op0, code == NEGATE_EXPR ? !max_p : max_p);\n \n       if (op0 == TREE_OPERAND (exp, 0))\n \treturn exp;"}]}