{"sha": "f8d4be5756bdb8b65f6efb03ea4988deca9270b9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjhkNGJlNTc1NmJkYjhiNjVmNmVmYjAzZWE0OTg4ZGVjYTkyNzBiOQ==", "commit": {"author": {"name": "Christian Ehrhardt", "email": "ehrhardt@mathematik.uni-ulm.de", "date": "2003-04-08T00:23:17Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-04-08T00:23:17Z"}, "message": "re PR c/9516 (Internal error when using a big array)\n\n        PR c/9516\n        * expr.c (safe_from_p): Rearrange to avoid deep recursion in\n        favour of looping and tail recursion for TREE_LIST and binops.\n\nCo-Authored-By: Richard Henderson <rth@redhat.com>\n\nFrom-SVN: r65363", "tree": {"sha": "3ef1d1fe5119557d99bb8f5e136d6c7e4c99d847", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ef1d1fe5119557d99bb8f5e136d6c7e4c99d847"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f8d4be5756bdb8b65f6efb03ea4988deca9270b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8d4be5756bdb8b65f6efb03ea4988deca9270b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8d4be5756bdb8b65f6efb03ea4988deca9270b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8d4be5756bdb8b65f6efb03ea4988deca9270b9/comments", "author": null, "committer": null, "parents": [{"sha": "12031a6266adb08e438317f56b538cc1230de1e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12031a6266adb08e438317f56b538cc1230de1e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12031a6266adb08e438317f56b538cc1230de1e9"}], "stats": {"total": 34, "additions": 25, "deletions": 9}, "files": [{"sha": "5f294afc926d12648fdd303b31691b3ce47372d4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8d4be5756bdb8b65f6efb03ea4988deca9270b9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8d4be5756bdb8b65f6efb03ea4988deca9270b9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f8d4be5756bdb8b65f6efb03ea4988deca9270b9", "patch": "@@ -1,3 +1,10 @@\n+2003-04-07  Christian Ehrhardt  <ehrhardt@mathematik.uni-ulm.de>\n+            Richard Henderson  <rth@redhat.com>\n+\n+        PR c/9516\n+        * expr.c (safe_from_p): Rearrange to avoid deep recursion in\n+        favour of looping and tail recursion for TREE_LIST and binops.\n+\n 2003-04-08  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>\n \n \t* loop.h (REGNO_FIRST_LUID, REGNO_LAST_LUID): Provide defaults"}, {"sha": "075de49f8198b932d8f2b85b92701d66f4ec2119", "filename": "gcc/expr.c", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8d4be5756bdb8b65f6efb03ea4988deca9270b9/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8d4be5756bdb8b65f6efb03ea4988deca9270b9/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=f8d4be5756bdb8b65f6efb03ea4988deca9270b9", "patch": "@@ -6093,22 +6093,31 @@ safe_from_p (x, exp, top_p)\n \n     case 'x':\n       if (TREE_CODE (exp) == TREE_LIST)\n-\treturn ((TREE_VALUE (exp) == 0\n-\t\t || safe_from_p (x, TREE_VALUE (exp), 0))\n-\t\t&& (TREE_CHAIN (exp) == 0\n-\t\t    || safe_from_p (x, TREE_CHAIN (exp), 0)));\n+\t{\n+\t  while (1)\n+\t    {\n+\t      if (TREE_VALUE (exp) && !safe_from_p (x, TREE_VALUE (exp), 0))\n+\t\treturn 0;\n+\t      exp = TREE_CHAIN (exp);\n+\t      if (!exp)\n+\t\treturn 1;\n+\t      if (TREE_CODE (exp) != TREE_LIST)\n+\t\treturn safe_from_p (x, exp, 0);\n+\t    }\n+\t}\n       else if (TREE_CODE (exp) == ERROR_MARK)\n \treturn 1;\t/* An already-visited SAVE_EXPR? */\n       else\n \treturn 0;\n \n-    case '1':\n-      return safe_from_p (x, TREE_OPERAND (exp, 0), 0);\n-\n     case '2':\n     case '<':\n-      return (safe_from_p (x, TREE_OPERAND (exp, 0), 0)\n-\t      && safe_from_p (x, TREE_OPERAND (exp, 1), 0));\n+      if (!safe_from_p (x, TREE_OPERAND (exp, 1), 0))\n+\treturn 0;\n+      /* FALLTHRU */\n+\n+    case '1':\n+      return safe_from_p (x, TREE_OPERAND (exp, 0), 0);\n \n     case 'e':\n     case 'r':"}]}