{"sha": "2899d49e3701a4df18a336a680a7095cc99a2229", "node_id": "C_kwDOANBUbNoAKDI4OTlkNDllMzcwMWE0ZGYxOGEzMzZhNjgwYTcwOTVjYzk5YTIyMjk", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2021-11-28T18:42:45Z"}, "committer": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2021-11-28T18:42:45Z"}, "message": "Compare guessed and feedback frequencies during profile feedback stream-in\n\nThis patch adds simple code to dump and compare frequencies of basic blocks\nread from the profile feedback and frequencies guessed statically.\nIt dumps basic blocks in the order of decreasing frequencies from feedback\nalong with guessed frequencies and histograms.\n\nIt makes it to possible spot basic blocks in hot regions that are considered\ncold by guessed profile or vice versa.\n\nI am trying to figure out how realistic our profile estimate is compared to\nread one on exchange2 (looking again into PR98782.  There IRA now places spills\ninto hot regions of code while with older (and worse) profile it did not.\nCatch is that the function is very large and has 9 nested loops, so it is hard\nto figure out how to improve the profile estimate and/or IRA.\n\ngcc/ChangeLog:\n\n2021-11-28  Jan Hubicka  <hubicka@ucw.cz>\n\n\t* profile.c: Include sreal.h\n\t(struct bb_stats): New.\n\t(cmp_stats): New function.\n\t(compute_branch_probabilities): Output bb stats.", "tree": {"sha": "3ffd9e2659002bf30d8c9f7179aa31b3b78f4bf7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ffd9e2659002bf30d8c9f7179aa31b3b78f4bf7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2899d49e3701a4df18a336a680a7095cc99a2229", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2899d49e3701a4df18a336a680a7095cc99a2229", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2899d49e3701a4df18a336a680a7095cc99a2229", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2899d49e3701a4df18a336a680a7095cc99a2229/comments", "author": null, "committer": null, "parents": [{"sha": "d1471457fcda26cd24e0053b82f8eed35ddb8727", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1471457fcda26cd24e0053b82f8eed35ddb8727", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1471457fcda26cd24e0053b82f8eed35ddb8727"}], "stats": {"total": 78, "additions": 73, "deletions": 5}, "files": [{"sha": "dbf42ff7b2bd665a2733341f74e5ee964866f369", "filename": "gcc/profile.c", "status": "modified", "additions": 73, "deletions": 5, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2899d49e3701a4df18a336a680a7095cc99a2229/gcc%2Fprofile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2899d49e3701a4df18a336a680a7095cc99a2229/gcc%2Fprofile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile.c?ref=2899d49e3701a4df18a336a680a7095cc99a2229", "patch": "@@ -64,6 +64,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-cfg.h\"\n #include \"dumpfile.h\"\n #include \"cfgloop.h\"\n+#include \"sreal.h\"\n \n #include \"profile.h\"\n \n@@ -385,6 +386,30 @@ read_profile_edge_counts (gcov_type *exec_counts)\n     return num_edges;\n }\n \n+/* BB statistics comparing guessed frequency of BB with feedback.  */\n+\n+struct bb_stats\n+{\n+  basic_block bb;\n+  double guessed, feedback;\n+  int64_t count;\n+};\n+\n+/* Compare limit_tuple intervals by first item in descending order.  */\n+\n+static int\n+cmp_stats (const void *ptr1, const void *ptr2)\n+{\n+  const bb_stats *p1 = (const bb_stats *)ptr1;\n+  const bb_stats *p2 = (const bb_stats *)ptr2;\n+\n+  if (p1->feedback < p2->feedback)\n+    return 1;\n+  else if (p1->feedback > p2->feedback)\n+    return -1;\n+  return 0;\n+}\n+\n \n /* Compute the branch probabilities for the various branches.\n    Annotate them accordingly.  \n@@ -716,11 +741,52 @@ compute_branch_probabilities (unsigned cfg_checksum, unsigned lineno_checksum)\n   /* If we have real data, use them!  */\n   if (bb_gcov_count (ENTRY_BLOCK_PTR_FOR_FN (cfun))\n       || !flag_guess_branch_prob)\n-    FOR_ALL_BB_FN (bb, cfun)\n-      if (bb_gcov_count (bb) || !flag_profile_partial_training)\n-        bb->count = profile_count::from_gcov_type (bb_gcov_count (bb));\n-      else\n-\tbb->count = profile_count::guessed_zero ();\n+    {\n+      profile_count old_entry_cnt = ENTRY_BLOCK_PTR_FOR_FN (cfun)->count;\n+      auto_vec <bb_stats> stats;\n+      double sum1 = 0, sum2 = 0;\n+\n+      FOR_ALL_BB_FN (bb, cfun)\n+\t{\n+\t  profile_count cnt = bb->count;\n+\t  if (bb_gcov_count (bb) || !flag_profile_partial_training)\n+\t    bb->count = profile_count::from_gcov_type (bb_gcov_count (bb));\n+\t  else\n+\t    bb->count = profile_count::guessed_zero ();\n+\t  if (dump_file && bb->index >= 0)\n+\t    {\n+\t      double freq1 = cnt.to_sreal_scale (old_entry_cnt).to_double ();\n+\t      double freq2 = bb->count.to_sreal_scale\n+\t\t\t\t\t(ENTRY_BLOCK_PTR_FOR_FN (cfun)->count).\n+\t\t\t\t  to_double ();\n+\t      bb_stats stat = {bb, freq1, freq2,\n+\t\t\t       (int64_t) bb_gcov_count (bb)};\n+\t      stats.safe_push (stat);\n+\t      sum1 += freq1;\n+\t      sum2 += freq2;\n+\t    }\n+\t}\n+      if (dump_file)\n+\t{\n+\t  double nsum1 = 0, nsum2 = 0;\n+\t  stats.qsort (cmp_stats);\n+\t  for (auto stat : stats)\n+\t    {\n+\t      nsum1 += stat.guessed;\n+\t      nsum2 += stat.feedback;\n+\t      fprintf (dump_file,\n+\t\t       \" Basic block %4i guessed freq: %12.3f\"\n+\t\t       \" cummulative:%6.2f%% \"\n+\t\t       \" feedback freq: %12.3f cummulative:%7.2f%%\"\n+\t\t       \" cnt: 10%\" PRId64 \"\\n\", stat.bb->index,\n+\t\t       stat.guessed,\n+\t\t       nsum1 * 100 / sum1,\n+\t\t       stat.feedback,\n+\t\t       nsum2 * 100 / sum2,\n+\t\t       stat.count);\n+\t    }\n+\t}\n+    }\n   /* If function was not trained, preserve local estimates including statically\n      determined zero counts.  */\n   else if (profile_status_for_fn (cfun) == PROFILE_READ\n@@ -755,6 +821,8 @@ compute_branch_probabilities (unsigned cfg_checksum, unsigned lineno_checksum)\n \n       fputc ('\\n', dump_file);\n       fputc ('\\n', dump_file);\n+\n+      gimple_dump_cfg (dump_file, TDF_BLOCKS);\n     }\n \n   free_aux_for_blocks ();"}]}