{"sha": "594bdd53d8f24ad406af1aa192d98d23bc841ae9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTk0YmRkNTNkOGYyNGFkNDA2YWYxYWExOTJkOThkMjNiYzg0MWFlOQ==", "commit": {"author": {"name": "Felix Yang", "email": "felix.yang@huawei.com", "date": "2014-11-18T14:45:09Z"}, "committer": {"name": "Fei Yang", "email": "fyang@gcc.gnu.org", "date": "2014-11-18T14:45:09Z"}, "message": "aarch64.c (doloop_end): New pattern.\n\n       * config/aarch64/aarch64.c (doloop_end): New pattern.\n       * config/aarch64/aarch64.md (TARGET_CAN_USE_DOLOOP_P): Implement.\n\nFrom-SVN: r217717", "tree": {"sha": "2cfeccc460234f0fbe5b3157201045bf61d38971", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2cfeccc460234f0fbe5b3157201045bf61d38971"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/594bdd53d8f24ad406af1aa192d98d23bc841ae9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/594bdd53d8f24ad406af1aa192d98d23bc841ae9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/594bdd53d8f24ad406af1aa192d98d23bc841ae9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/594bdd53d8f24ad406af1aa192d98d23bc841ae9/comments", "author": null, "committer": null, "parents": [{"sha": "ef768ba35319435af3fcf4171253dd32a6ecc322", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef768ba35319435af3fcf4171253dd32a6ecc322", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef768ba35319435af3fcf4171253dd32a6ecc322"}], "stats": {"total": 45, "additions": 45, "deletions": 0}, "files": [{"sha": "b8f9bd4ce3d41d25f59473c007a8b94819fc37c4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/594bdd53d8f24ad406af1aa192d98d23bc841ae9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/594bdd53d8f24ad406af1aa192d98d23bc841ae9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=594bdd53d8f24ad406af1aa192d98d23bc841ae9", "patch": "@@ -1,3 +1,8 @@\n+2014-11-18  Felix Yang  <felix.yang@huawei.com>\n+\n+\t* config/aarch64/aarch64.c (doloop_end): New pattern.\n+\t* config/aarch64/aarch64.md (TARGET_CAN_USE_DOLOOP_P): Implement.\n+\n 2014-11-18  Jason Merrill  <jason@redhat.com>\n \n \t* tree.c (warn_deprecated_use): Show declaration with inform."}, {"sha": "4fec21ec88ceb6664f8a5596db2a547b538fdecc", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/594bdd53d8f24ad406af1aa192d98d23bc841ae9/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/594bdd53d8f24ad406af1aa192d98d23bc841ae9/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=594bdd53d8f24ad406af1aa192d98d23bc841ae9", "patch": "@@ -10605,6 +10605,9 @@ aarch64_gen_ccmp_next (rtx prev, int cmp_code, rtx op0, rtx op1, int bit_code)\n #define TARGET_USE_BY_PIECES_INFRASTRUCTURE_P \\\n   aarch64_use_by_pieces_infrastructure_p\n \n+#undef TARGET_CAN_USE_DOLOOP_P\n+#define TARGET_CAN_USE_DOLOOP_P can_use_doloop_if_innermost\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n #include \"gt-aarch64.h\""}, {"sha": "597ff8c2e1ef39668db339c7ee2a9ea8edbecb6d", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/594bdd53d8f24ad406af1aa192d98d23bc841ae9/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/594bdd53d8f24ad406af1aa192d98d23bc841ae9/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=594bdd53d8f24ad406af1aa192d98d23bc841ae9", "patch": "@@ -4169,6 +4169,43 @@\n   [(set_attr \"type\" \"mrs\")])\n \n \n+;; Define the subtract-one-and-jump insns so loop.c\n+;; knows what to generate.\n+(define_expand \"doloop_end\"\n+  [(use (match_operand 0 \"\" \"\"))      ; loop pseudo\n+   (use (match_operand 1 \"\" \"\"))]     ; label\n+  \"optimize > 0 && flag_modulo_sched\"\n+{\n+  rtx s0;\n+  rtx bcomp;\n+  rtx loc_ref;\n+  rtx cc_reg;\n+  rtx insn;\n+  rtx cmp;\n+\n+  /* Currently SMS relies on the do-loop pattern to recognize loops\n+     where (1) the control part consists of all insns defining and/or\n+     using a certain 'count' register and (2) the loop count can be\n+     adjusted by modifying this register prior to the loop.\n+     ??? The possible introduction of a new block to initialize the\n+     new IV can potentially affect branch optimizations.  */\n+\n+  if (GET_MODE (operands[0]) != DImode)\n+    FAIL;\n+\n+  s0 = operands [0];\n+  insn = emit_insn (gen_adddi3_compare0 (s0, s0, GEN_INT (-1)));\n+\n+  cmp = XVECEXP (PATTERN (insn), 0, 0);\n+  cc_reg = SET_DEST (cmp);\n+  bcomp = gen_rtx_NE (VOIDmode, cc_reg, const0_rtx);\n+  loc_ref = gen_rtx_LABEL_REF (VOIDmode, operands [1]);\n+  emit_jump_insn (gen_rtx_SET (VOIDmode, pc_rtx,\n+\t\t\t       gen_rtx_IF_THEN_ELSE (VOIDmode, bcomp,\n+\t\t\t\t\t\t     loc_ref, pc_rtx)));\n+  DONE;\n+})\n+\n ;; AdvSIMD Stuff\n (include \"aarch64-simd.md\")\n "}]}