{"sha": "ba7ff9f9fe73f5f570489e88d753fb220ef44fa3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmE3ZmY5ZjlmZTczZjVmNTcwNDg5ZTg4ZDc1M2ZiMjIwZWY0NGZhMw==", "commit": {"author": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1993-10-12T23:01:18Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1993-10-12T23:01:18Z"}, "message": "Re-write to be a subroutines of patch-header.\n\nFrom-SVN: r5765", "tree": {"sha": "1c53e7992e0db0d640050e92f3c351b4deed71ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c53e7992e0db0d640050e92f3c351b4deed71ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba7ff9f9fe73f5f570489e88d753fb220ef44fa3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba7ff9f9fe73f5f570489e88d753fb220ef44fa3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba7ff9f9fe73f5f570489e88d753fb220ef44fa3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba7ff9f9fe73f5f570489e88d753fb220ef44fa3/comments", "author": null, "committer": null, "parents": [{"sha": "63675378d9d9cd31fb2c973aee3cd506689f448b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63675378d9d9cd31fb2c973aee3cd506689f448b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63675378d9d9cd31fb2c973aee3cd506689f448b"}], "stats": {"total": 62, "additions": 28, "deletions": 34}, "files": [{"sha": "860e68d48a4e90e6933fb9ef1aa104ff708dedc5", "filename": "gcc/scan-decls.c", "status": "modified", "additions": 28, "deletions": 34, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba7ff9f9fe73f5f570489e88d753fb220ef44fa3/gcc%2Fscan-decls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba7ff9f9fe73f5f570489e88d753fb220ef44fa3/gcc%2Fscan-decls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fscan-decls.c?ref=ba7ff9f9fe73f5f570489e88d753fb220ef44fa3", "patch": "@@ -13,37 +13,20 @@ GNU General Public License for more details.\n \n You should have received a copy of the GNU General Public License\n along with this program; if not, write to the Free Software\n-Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.\n \n-/* This filter scans a C source file (actually, the output of cpp).\n-   It looks for function declaration.  For each declaration, it prints:\n+   Written by Per Bothner <bothner@cygnus.com>, July 1993.  */\n \n-   \tNAME;C;RTYPE;ARGS;FILENAME;LINENO;\n-\n-   NAME is the function's name.\n-   C is \"I\" if the function is declared as inline;  \"F\" if the\n-   declaration is nested inside 'extern \"C\"' braces;  otherwise \"f\".\n-   RTYPE is the function's return type.\n-   ARGS is the function's argument list.\n-   FILENAME and LINENO is where the declarations was seen\n-   (taking #-directives into account).\n-\n-   Also:\n-\n-\tNAME;M;\n-   indicates that the macro NAME was seen (when invoked from fixproto).\n-\tNAME;X;TYPE;\n-   indicates that 'extern TYPE NAME;' was seen.\n-\n-   Written by Per Bothner <bothner@cygnus.com>, July 1993.\n-   */\n+#ifdef OLD\n+#endif\n \n #include <stdio.h>\n #include <ctype.h>\n #include \"scan.h\"\n \n sstring buf;\n sstring rtype;\n+sstring arg_list;\n \n int brace_nesting = 0;\n \n@@ -75,10 +58,14 @@ skip_to_closing_brace (fp)\n     }\n }\n \n+/* This function scans a C source file (actually, the output of cpp),\n+   reading from FP.  It looks for function declarations, and certain\n+   other interesting sequences (external variables and macros).  */\n+\n int\n-main ()\n+scan_decls (fp)\n+     FILE *fp;\n {\n-  FILE *fp = stdin;\n   int c;\n   int saw_extern, saw_inline;\n \n@@ -112,7 +99,13 @@ main ()\n   if (SSTRING_LENGTH (&buf) > 16\n       && strncmp (buf.base, \"__DEFINED_MACRO_\", 16) == 0)\n     {\n-      fprintf (stdout, \"%s;M;\\n\", buf.base+16);\n+      /* For certain interesting macro names, fixproto puts\n+\t   #ifdef FOO\n+\t   __DEFINED_MACRO_FOO\n+\t   #endif\n+\t into the file to be pre-processed.  So if we see __DEFINED_MACRO_FOO,\n+\t it means FOO was defined, which we may want to make a note of. */\n+      recognized_macro (buf.base+16);\n       goto new_statement;\n     }\n   if (strcmp (buf.base, \"inline\") == 0)\n@@ -151,11 +144,7 @@ main ()\n \t    {\n \t      int nesting = 1;\n \n- \t      fprintf (stdout, \"%s;%s;%s;\",\n-\t\t       buf.base,\n-\t\t       saw_inline ? \"I\"\n-\t\t       : in_extern_C_brace || current_extern_C ? \"F\" : \"f\",\n-\t\t       rtype.base);\n+\t      arg_list.ptr = arg_list.base;\n \t      c = skip_spaces (fp, ' ');\n \t      for (;;)\n \t\t{\n@@ -168,11 +157,16 @@ main ()\n \t\t    break;\n \t\t  if (c == '\\n')\n \t\t    c = ' ';\n-\t\t  putc (c, stdout);\t\n+\t\t  SSTRING_PUT(&arg_list, c);\n \t\t  c = getc (fp);\n \t\t}\n-\t      fprintf (stdout, \";%s;%d;\\n\",\n-\t\t       source_filename.base, source_lineno);\n+\t      SSTRING_PUT(&arg_list, '\\0');\n+\t      recognized_function (buf.base,\n+\t\t\t\t  saw_inline ? 'I'\n+\t\t\t\t  : in_extern_C_brace || current_extern_C\n+\t\t\t\t  ? 'F' : 'f',\n+\t\t\t\t  rtype.base, arg_list.base,\n+\t\t\t\t  source_filename.base, source_lineno);\n \t      c = get_token (fp, &buf);\n \t      if (c == '{')\n \t\t{\n@@ -184,7 +178,7 @@ main ()\n \t    }\n \t  else if (nextc == ';' && saw_extern)\n \t    {\n- \t      fprintf (stdout, \"%s;X;%s;\\n\", buf.base, rtype.base);\n+\t      recognized_extern (buf.base, rtype.base);\n \t      goto handle_statement;\n \t    }\n \t  else"}]}