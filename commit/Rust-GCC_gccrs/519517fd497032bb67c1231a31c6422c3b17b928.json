{"sha": "519517fd497032bb67c1231a31c6422c3b17b928", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTE5NTE3ZmQ0OTcwMzJiYjY3YzEyMzFhMzFjNjQyMmMzYjE3YjkyOA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2009-12-14T16:45:11Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2009-12-14T16:45:11Z"}, "message": "Fix LWP.\n\n2009-12-14  Jakub Jelinek  <jakub@redhat.com>\n\t    Sebastian Pop  <sebastian.pop@amd.com>\n\n\t* config/i386/i386-builtin-types.def (PVOID): Declared.\n\t(VOID_FTYPE_PVOID): Declared.\n\t(PVOID_FTYPE_VOID): Declared.\n\t(UCHAR_FTYPE_USHORT_UINT_USHORT): Removed.\n\t(VOID_FTYPE_USHORT_UINT_USHORT): Removed.\n\t* config/i386/i386.c (IX86_BUILTIN_LLWPCB16, IX86_BUILTIN_LLWPCB32,\n\tIX86_BUILTIN_LLWPCB64, IX86_BUILTIN_SLWPCB16, IX86_BUILTIN_SLWPCB32,\n\tIX86_BUILTIN_SLWPCB64, IX86_BUILTIN_LWPVAL16, IX86_BUILTIN_LWPINS16):\n\tRemoved.\n\t(IX86_BUILTIN_LLWPCB, IX86_BUILTIN_SLWPCB): New.\n\t(bdesc_special_args): Adjust declaration of __builtin_ia32_llwpcb,\n\t__builtin_ia32_slwpcb, __builtin_ia32_lwpval32,\n\t__builtin_ia32_lwpval64, __builtin_ia32_lwpins32, and\n\t__builtin_ia32_lwpins64.\n\t(ix86_expand_special_args_builtin): Handle VOID_FTYPE_PVOID.\n\tDo not handle VOID_FTYPE_USHORT_UINT_USHORT and\n\tUCHAR_FTYPE_USHORT_UINT_USHORT.  Warn when the third operand is\n\tnot an immediate.  Also handle builtin functions with 3 arguments.\n\t(ix86_expand_builtin): Handle IX86_BUILTIN_LLWPCB and\n\tIX86_BUILTIN_SLWPCB.\n\t* config/i386/i386.md (UNSPEC_LLWP_INTRINSIC, UNSPEC_SLWP_INTRINSIC):\n\tRenamed UNSPECV_LLWP_INTRINSIC and UNSPECV_SLWP_INTRINSIC.\n\t(memory attribute): Handle lwp.\n\t(lwp*): Rewrite all the insn patterns for LWP.\n\t* config/i386/lwpintrin.h (__llwpcb16, __llwpcb32, __llwpcb64,\n\t__slwpcb16, __slwpcb32, __slwpcb64, __lwpval16, __lwpins16): Removed.\n\t(__llwpcb, __slwpcb): New.\n\n\ttestsuite/\n\t* gcc.target/i386/sse-12.c: Add -mpopcnt and -mlwp.\n\t* gcc.target/i386/sse-13.c: Same.\n\t(__builtin_ia32_lwpval32, __builtin_ia32_lwpval64,\n\t__builtin_ia32_lwpins32, __builtin_ia32_lwpins64): Added testcases.\n\t* gcc.target/i386/sse-14.c: Add -mpopcnt -mabm -mlwp.\n\tAdded tests for __lwpval32, __lwpins32, __lwpval64, and __lwpins64.\n\t* gcc.target/i386/sse-22.c: Added tests for popcnt, abm, and lwp.\n\t* gcc.target/i386/sse-23.c: Same.\n\nCo-Authored-By: Sebastian Pop <sebastian.pop@amd.com>\n\nFrom-SVN: r155217", "tree": {"sha": "61d0e6114c05f06f2f2405ea6968aec76e33d5ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/61d0e6114c05f06f2f2405ea6968aec76e33d5ae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/519517fd497032bb67c1231a31c6422c3b17b928", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/519517fd497032bb67c1231a31c6422c3b17b928", "html_url": "https://github.com/Rust-GCC/gccrs/commit/519517fd497032bb67c1231a31c6422c3b17b928", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/519517fd497032bb67c1231a31c6422c3b17b928/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e49fd61b531da9ab5e8b9ad35e134769473c533f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e49fd61b531da9ab5e8b9ad35e134769473c533f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e49fd61b531da9ab5e8b9ad35e134769473c533f"}], "stats": {"total": 459, "additions": 272, "deletions": 187}, "files": [{"sha": "f8535bad1082997bbaa447ed42297e206bee34a1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/519517fd497032bb67c1231a31c6422c3b17b928/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/519517fd497032bb67c1231a31c6422c3b17b928/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=519517fd497032bb67c1231a31c6422c3b17b928", "patch": "@@ -1,3 +1,44 @@\n+2009-12-14  Jakub Jelinek  <jakub@redhat.com>\n+\t    Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\t* config/i386/i386-builtin-types.def (PVOID): Declared.\n+\t(VOID_FTYPE_PVOID): Declared.\n+\t(PVOID_FTYPE_VOID): Declared.\n+\t(UCHAR_FTYPE_USHORT_UINT_USHORT): Removed.\n+\t(VOID_FTYPE_USHORT_UINT_USHORT): Removed.\n+\t* config/i386/i386.c (IX86_BUILTIN_LLWPCB16, IX86_BUILTIN_LLWPCB32,\n+\tIX86_BUILTIN_LLWPCB64, IX86_BUILTIN_SLWPCB16, IX86_BUILTIN_SLWPCB32,\n+\tIX86_BUILTIN_SLWPCB64, IX86_BUILTIN_LWPVAL16, IX86_BUILTIN_LWPINS16):\n+\tRemoved.\n+\t(IX86_BUILTIN_LLWPCB, IX86_BUILTIN_SLWPCB): New.\n+\t(bdesc_special_args): Adjust declaration of __builtin_ia32_llwpcb,\n+\t__builtin_ia32_slwpcb, __builtin_ia32_lwpval32,\n+\t__builtin_ia32_lwpval64, __builtin_ia32_lwpins32, and\n+\t__builtin_ia32_lwpins64.\n+\t(ix86_expand_special_args_builtin): Handle VOID_FTYPE_PVOID.\n+\tDo not handle VOID_FTYPE_USHORT_UINT_USHORT and\n+\tUCHAR_FTYPE_USHORT_UINT_USHORT.  Warn when the third operand is\n+\tnot an immediate.  Also handle builtin functions with 3 arguments.\n+\t(ix86_expand_builtin): Handle IX86_BUILTIN_LLWPCB and\n+\tIX86_BUILTIN_SLWPCB.\n+\t* config/i386/i386.md (UNSPEC_LLWP_INTRINSIC, UNSPEC_SLWP_INTRINSIC):\n+\tRenamed UNSPECV_LLWP_INTRINSIC and UNSPECV_SLWP_INTRINSIC.\n+\t(memory attribute): Handle lwp.\n+\t(lwp*): Rewrite all the insn patterns for LWP.\n+\t* config/i386/lwpintrin.h (__llwpcb16, __llwpcb32, __llwpcb64,\n+\t__slwpcb16, __slwpcb32, __slwpcb64, __lwpval16, __lwpins16): Removed.\n+\t(__llwpcb, __slwpcb): New.\n+\n+\ttestsuite/\n+\t* gcc.target/i386/sse-12.c: Add -mpopcnt and -mlwp.\n+\t* gcc.target/i386/sse-13.c: Same.\n+\t(__builtin_ia32_lwpval32, __builtin_ia32_lwpval64,\n+\t__builtin_ia32_lwpins32, __builtin_ia32_lwpins64): Added testcases.\n+\t* gcc.target/i386/sse-14.c: Add -mpopcnt -mabm -mlwp.\n+\tAdded tests for __lwpval32, __lwpins32, __lwpval64, and __lwpins64.\n+\t* gcc.target/i386/sse-22.c: Added tests for popcnt, abm, and lwp.\n+\t* gcc.target/i386/sse-23.c: Same.\n+\n 2009-12-14  Dmitry Gorbachev  <d.g.gorbachev@gmail.com>\n \n \t* dominance.c (set_immediate_dominator): Don't mark as inline."}, {"sha": "1fad60f7019887b9c649cc943ece8d49f4e4fe82", "filename": "gcc/config/i386/i386-builtin-types.def", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/519517fd497032bb67c1231a31c6422c3b17b928/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/519517fd497032bb67c1231a31c6422c3b17b928/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def?ref=519517fd497032bb67c1231a31c6422c3b17b928", "patch": "@@ -104,6 +104,7 @@ DEF_POINTER_TYPE (PCDOUBLE, DOUBLE, CONST)\n DEF_POINTER_TYPE (PCFLOAT, FLOAT, CONST)\n DEF_POINTER_TYPE (PCHAR, CHAR)\n DEF_POINTER_TYPE (PCVOID, VOID, CONST)\n+DEF_POINTER_TYPE (PVOID, VOID)\n DEF_POINTER_TYPE (PDOUBLE, DOUBLE)\n DEF_POINTER_TYPE (PFLOAT, FLOAT)\n DEF_POINTER_TYPE (PINT, INT)\n@@ -195,6 +196,8 @@ DEF_FUNCTION_TYPE (V8SF, V8SI)\n DEF_FUNCTION_TYPE (V8SI, V4SI)\n DEF_FUNCTION_TYPE (V8SI, V8SF)\n DEF_FUNCTION_TYPE (VOID, PCVOID)\n+DEF_FUNCTION_TYPE (VOID, PVOID)\n+DEF_FUNCTION_TYPE (PVOID, VOID)\n DEF_FUNCTION_TYPE (VOID, UNSIGNED)\n \n DEF_FUNCTION_TYPE (DI, V2DI, INT)\n@@ -301,7 +304,6 @@ DEF_FUNCTION_TYPE (VOID, UNSIGNED, UNSIGNED)\n DEF_FUNCTION_TYPE (INT, V16QI, V16QI, INT)\n DEF_FUNCTION_TYPE (UCHAR, UINT, UINT, UINT)\n DEF_FUNCTION_TYPE (UCHAR, UINT64, UINT, UINT)\n-DEF_FUNCTION_TYPE (UCHAR, USHORT, UINT, USHORT)\n DEF_FUNCTION_TYPE (V16HI, V16HI, V16HI, V16HI)\n DEF_FUNCTION_TYPE (V16QI, V16QI, QI, INT)\n DEF_FUNCTION_TYPE (V16QI, V16QI, V16QI, INT)\n@@ -343,7 +345,6 @@ DEF_FUNCTION_TYPE (VOID, PV4SF, V4SF, V4SF)\n DEF_FUNCTION_TYPE (VOID, PV8SF, V8SF, V8SF)\n DEF_FUNCTION_TYPE (VOID, UINT, UINT, UINT)\n DEF_FUNCTION_TYPE (VOID, UINT64, UINT, UINT)\n-DEF_FUNCTION_TYPE (VOID, USHORT, UINT, USHORT)\n DEF_FUNCTION_TYPE (VOID, V16QI, V16QI, PCHAR)\n DEF_FUNCTION_TYPE (VOID, V8QI, V8QI, PCHAR)\n DEF_FUNCTION_TYPE (V2DF, V2DF, V2DF, V2DI)"}, {"sha": "9b739a6c95bf4fcb07205e35de201f4a2b7bb80b", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 41, "deletions": 28, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/519517fd497032bb67c1231a31c6422c3b17b928/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/519517fd497032bb67c1231a31c6422c3b17b928/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=519517fd497032bb67c1231a31c6422c3b17b928", "patch": "@@ -21251,16 +21251,10 @@ enum ix86_builtins\n   IX86_BUILTIN_VPCOMTRUEQ,\n \n   /* LWP instructions.  */\n-  IX86_BUILTIN_LLWPCB16,\n-  IX86_BUILTIN_LLWPCB32,\n-  IX86_BUILTIN_LLWPCB64,\n-  IX86_BUILTIN_SLWPCB16,\n-  IX86_BUILTIN_SLWPCB32,\n-  IX86_BUILTIN_SLWPCB64,\n-  IX86_BUILTIN_LWPVAL16,\n+  IX86_BUILTIN_LLWPCB,\n+  IX86_BUILTIN_SLWPCB,\n   IX86_BUILTIN_LWPVAL32,\n   IX86_BUILTIN_LWPVAL64,\n-  IX86_BUILTIN_LWPINS16,\n   IX86_BUILTIN_LWPINS32,\n   IX86_BUILTIN_LWPINS64,\n \n@@ -21532,20 +21526,12 @@ static const struct builtin_description bdesc_special_args[] =\n   { OPTION_MASK_ISA_AVX, CODE_FOR_avx_maskstorepd256, \"__builtin_ia32_maskstorepd256\", IX86_BUILTIN_MASKSTOREPD256, UNKNOWN, (int) VOID_FTYPE_PV4DF_V4DF_V4DF },\n   { OPTION_MASK_ISA_AVX, CODE_FOR_avx_maskstoreps256, \"__builtin_ia32_maskstoreps256\", IX86_BUILTIN_MASKSTOREPS256, UNKNOWN, (int) VOID_FTYPE_PV8SF_V8SF_V8SF },\n \n-  { OPTION_MASK_ISA_LWP, CODE_FOR_lwp_llwpcbhi1,   \"__builtin_ia32_llwpcb16\",   IX86_BUILTIN_LLWPCB16,    UNKNOWN,     (int) VOID_FTYPE_VOID },\n-  { OPTION_MASK_ISA_LWP, CODE_FOR_lwp_llwpcbsi1,   \"__builtin_ia32_llwpcb32\",   IX86_BUILTIN_LLWPCB32,    UNKNOWN,     (int) VOID_FTYPE_VOID },\n-  { OPTION_MASK_ISA_LWP, CODE_FOR_lwp_llwpcbdi1,   \"__builtin_ia32_llwpcb64\",   IX86_BUILTIN_LLWPCB64,    UNKNOWN,     (int) VOID_FTYPE_VOID },\n-\n-  { OPTION_MASK_ISA_LWP, CODE_FOR_lwp_slwpcbhi1,   \"__builtin_ia32_slwpcb16\",   IX86_BUILTIN_SLWPCB16,    UNKNOWN,     (int) VOID_FTYPE_VOID },\n-  { OPTION_MASK_ISA_LWP, CODE_FOR_lwp_slwpcbsi1,   \"__builtin_ia32_slwpcb32\",   IX86_BUILTIN_SLWPCB32,    UNKNOWN,     (int) VOID_FTYPE_VOID },\n-  { OPTION_MASK_ISA_LWP, CODE_FOR_lwp_slwpcbdi1,   \"__builtin_ia32_slwpcb64\",   IX86_BUILTIN_SLWPCB64,    UNKNOWN,     (int) VOID_FTYPE_VOID },\n-\n-  { OPTION_MASK_ISA_LWP, CODE_FOR_lwp_lwpvalhi3,   \"__builtin_ia32_lwpval16\", IX86_BUILTIN_LWPVAL16,  UNKNOWN,     (int) VOID_FTYPE_USHORT_UINT_USHORT },\n-  { OPTION_MASK_ISA_LWP, CODE_FOR_lwp_lwpvalsi3,   \"__builtin_ia32_lwpval32\", IX86_BUILTIN_LWPVAL64,  UNKNOWN,     (int) VOID_FTYPE_UINT_UINT_UINT },\n-  { OPTION_MASK_ISA_LWP, CODE_FOR_lwp_lwpvaldi3,   \"__builtin_ia32_lwpval64\", IX86_BUILTIN_LWPVAL64,  UNKNOWN,     (int) VOID_FTYPE_UINT64_UINT_UINT },\n-  { OPTION_MASK_ISA_LWP, CODE_FOR_lwp_lwpinshi3,   \"__builtin_ia32_lwpins16\", IX86_BUILTIN_LWPINS16,  UNKNOWN,     (int) UCHAR_FTYPE_USHORT_UINT_USHORT },\n-  { OPTION_MASK_ISA_LWP, CODE_FOR_lwp_lwpinssi3,   \"__builtin_ia32_lwpins32\", IX86_BUILTIN_LWPINS64,  UNKNOWN,     (int) UCHAR_FTYPE_UINT_UINT_UINT },\n-  { OPTION_MASK_ISA_LWP, CODE_FOR_lwp_lwpinsdi3,   \"__builtin_ia32_lwpins64\", IX86_BUILTIN_LWPINS64,  UNKNOWN,     (int) UCHAR_FTYPE_UINT64_UINT_UINT },\n+  { OPTION_MASK_ISA_LWP, CODE_FOR_lwp_llwpcb, \"__builtin_ia32_llwpcb\", IX86_BUILTIN_LLWPCB, UNKNOWN, (int) VOID_FTYPE_PVOID },\n+  { OPTION_MASK_ISA_LWP, CODE_FOR_lwp_slwpcb, \"__builtin_ia32_slwpcb\", IX86_BUILTIN_SLWPCB, UNKNOWN, (int) PVOID_FTYPE_VOID },\n+  { OPTION_MASK_ISA_LWP, CODE_FOR_lwp_lwpvalsi3, \"__builtin_ia32_lwpval32\", IX86_BUILTIN_LWPVAL32, UNKNOWN, (int) VOID_FTYPE_UINT_UINT_UINT },\n+  { OPTION_MASK_ISA_LWP, CODE_FOR_lwp_lwpvaldi3, \"__builtin_ia32_lwpval64\", IX86_BUILTIN_LWPVAL64, UNKNOWN, (int) VOID_FTYPE_UINT64_UINT_UINT },\n+  { OPTION_MASK_ISA_LWP, CODE_FOR_lwp_lwpinssi3, \"__builtin_ia32_lwpins32\", IX86_BUILTIN_LWPINS32, UNKNOWN, (int) UCHAR_FTYPE_UINT_UINT_UINT },\n+  { OPTION_MASK_ISA_LWP, CODE_FOR_lwp_lwpinsdi3, \"__builtin_ia32_lwpins64\", IX86_BUILTIN_LWPINS64, UNKNOWN, (int) UCHAR_FTYPE_UINT64_UINT_UINT },\n \n };\n \n@@ -23734,7 +23720,7 @@ ix86_expand_special_args_builtin (const struct builtin_description *d,\n     {\n       rtx op;\n       enum machine_mode mode;\n-    } args[2];\n+    } args[3];\n   enum insn_code icode = d->icode;\n   bool last_arg_constant = false;\n   const struct insn_data *insn_p = &insn_data[icode];\n@@ -23761,6 +23747,7 @@ ix86_expand_special_args_builtin (const struct builtin_description *d,\n     case V4DF_FTYPE_PCV2DF:\n     case V4DF_FTYPE_PCDOUBLE:\n     case V2DF_FTYPE_PCDOUBLE:\n+    case VOID_FTYPE_PVOID:\n       nargs = 1;\n       klass = load;\n       memory = 0;\n@@ -23804,15 +23791,14 @@ ix86_expand_special_args_builtin (const struct builtin_description *d,\n       /* Reserve memory operand for target.  */\n       memory = ARRAY_SIZE (args);\n       break;\n-    case VOID_FTYPE_USHORT_UINT_USHORT:\n     case VOID_FTYPE_UINT_UINT_UINT:\n     case VOID_FTYPE_UINT64_UINT_UINT:\n-    case UCHAR_FTYPE_USHORT_UINT_USHORT:\n     case UCHAR_FTYPE_UINT_UINT_UINT:\n     case UCHAR_FTYPE_UINT64_UINT_UINT:\n       nargs = 3;\n-      klass = store;\n-      memory = 0;\n+      klass = load;\n+      memory = ARRAY_SIZE (args);\n+      last_arg_constant = true;\n       break;\n     default:\n       gcc_unreachable ();\n@@ -23852,7 +23838,14 @@ ix86_expand_special_args_builtin (const struct builtin_description *d,\n \t  if (!match)\n \t    switch (icode)\n \t      {\n-\t     default:\n+\t      case CODE_FOR_lwp_lwpvalsi3:\n+\t      case CODE_FOR_lwp_lwpvaldi3:\n+\t      case CODE_FOR_lwp_lwpinssi3:\n+\t      case CODE_FOR_lwp_lwpinsdi3:\n+\t\terror (\"the last argument must be a 32-bit immediate\");\n+\t\treturn const0_rtx;\n+\n+\t      default:\n \t\terror (\"the last argument must be an 8-bit immediate\");\n \t\treturn const0_rtx;\n \t      }\n@@ -23893,6 +23886,9 @@ ix86_expand_special_args_builtin (const struct builtin_description *d,\n     case 2:\n       pat = GEN_FCN (icode) (target, args[0].op, args[1].op);\n       break;\n+    case 3:\n+      pat = GEN_FCN (icode) (target, args[0].op, args[1].op, args[2].op);\n+      break;\n     default:\n       gcc_unreachable ();\n     }\n@@ -24205,6 +24201,23 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n \treturn target;\n       }\n \n+    case IX86_BUILTIN_LLWPCB:\n+      arg0 = CALL_EXPR_ARG (exp, 0);\n+      op0 = expand_normal (arg0);\n+      icode = CODE_FOR_lwp_llwpcb;\n+      if (! (*insn_data[icode].operand[0].predicate) (op0, Pmode))\n+\top0 = copy_to_mode_reg (Pmode, op0);\n+      emit_insn (gen_lwp_llwpcb (op0));\n+      return 0;\n+\n+    case IX86_BUILTIN_SLWPCB:\n+      icode = CODE_FOR_lwp_slwpcb;\n+      if (!target\n+\t  || ! (*insn_data[icode].operand[0].predicate) (target, Pmode))\n+\ttarget = gen_reg_rtx (Pmode);\n+      emit_insn (gen_lwp_slwpcb (target));\n+      return target;\n+\n     default:\n       break;\n     }"}, {"sha": "22e6049cd0e6ee99b5a8c6a8b3f9fe6acf6cf1b6", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 62, "deletions": 89, "changes": 151, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/519517fd497032bb67c1231a31c6422c3b17b928/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/519517fd497032bb67c1231a31c6422c3b17b928/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=519517fd497032bb67c1231a31c6422c3b17b928", "patch": "@@ -204,10 +204,6 @@\n    (UNSPEC_XOP_TRUEFALSE\t152)\n    (UNSPEC_XOP_PERMUTE\t\t153)\n    (UNSPEC_FRCZ\t\t\t154)\n-   (UNSPEC_LLWP_INTRINSIC\t155)\n-   (UNSPEC_SLWP_INTRINSIC\t156)\n-   (UNSPECV_LWPVAL_INTRINSIC\t157)\n-   (UNSPECV_LWPINS_INTRINSIC\t158)\n \n    ; For AES support\n    (UNSPEC_AESENC\t\t159)\n@@ -251,7 +247,11 @@\n    (UNSPECV_RDTSC\t\t18)\n    (UNSPECV_RDTSCP\t\t19)\n    (UNSPECV_RDPMC\t\t20)\n-   (UNSPECV_VSWAPMOV\t21)\n+   (UNSPECV_VSWAPMOV\t\t21)\n+   (UNSPECV_LLWP_INTRINSIC\t22)\n+   (UNSPECV_SLWP_INTRINSIC\t23)\n+   (UNSPECV_LWPVAL_INTRINSIC\t24)\n+   (UNSPECV_LWPINS_INTRINSIC\t25)\n   ])\n \n ;; Constants to represent pcomtrue/pcomfalse variants\n@@ -578,7 +578,7 @@\n ;; if the instruction is complex.\n \n (define_attr \"memory\" \"none,load,store,both,unknown\"\n-  (cond [(eq_attr \"type\" \"other,multi,str\")\n+  (cond [(eq_attr \"type\" \"other,multi,str,lwp\")\n \t   (const_string \"unknown\")\n \t (eq_attr \"type\" \"lea,fcmov,fpspc\")\n \t   (const_string \"none\")\n@@ -20835,113 +20835,86 @@\n ;;\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n \n-(define_insn \"lwp_llwpcbhi1\"\n-  [(unspec [(match_operand:HI 0 \"register_operand\" \"r\")]\n-  \t   UNSPEC_LLWP_INTRINSIC)]\n+(define_expand \"lwp_llwpcb\"\n+  [(unspec_volatile [(match_operand 0 \"register_operand\" \"r\")]\n+\t\t    UNSPECV_LLWP_INTRINSIC)]\n   \"TARGET_LWP\"\n-  \"llwpcb\\t%0\"\n-  [(set_attr \"type\" \"lwp\")\n-   (set_attr \"mode\" \"HI\")])\n-\n-(define_insn \"lwp_llwpcbsi1\"\n-  [(unspec [(match_operand:SI 0 \"register_operand\" \"r\")]\n-  \t   UNSPEC_LLWP_INTRINSIC)]\n-  \"TARGET_LWP\"\n-  \"llwpcb\\t%0\"\n-  [(set_attr \"type\" \"lwp\")\n-   (set_attr \"mode\" \"SI\")])\n+  \"\")\n \n-(define_insn \"lwp_llwpcbdi1\"\n-  [(unspec [(match_operand:DI 0 \"register_operand\" \"r\")]\n-  \t   UNSPEC_LLWP_INTRINSIC)]\n+(define_insn \"*lwp_llwpcb<mode>1\"\n+  [(unspec_volatile [(match_operand:P 0 \"register_operand\" \"r\")]\n+\t\t    UNSPECV_LLWP_INTRINSIC)]\n   \"TARGET_LWP\"\n   \"llwpcb\\t%0\"\n   [(set_attr \"type\" \"lwp\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_insn \"lwp_slwpcbhi1\"\n-  [(unspec [(match_operand:HI 0 \"register_operand\" \"r\")]\n-  \t   UNSPEC_SLWP_INTRINSIC)]\n-  \"TARGET_LWP\"\n-  \"slwpcb\\t%0\"\n-  [(set_attr \"type\" \"lwp\")\n-   (set_attr \"mode\" \"HI\")])\n+   (set_attr \"mode\" \"<MODE>\")\n+   (set_attr \"length\" \"5\")])\n \n-(define_insn \"lwp_slwpcbsi1\"\n-  [(unspec [(match_operand:SI 0 \"register_operand\" \"r\")]\n-  \t   UNSPEC_SLWP_INTRINSIC)]\n+(define_expand \"lwp_slwpcb\"\n+  [(set (match_operand 0 \"register_operand\" \"=r\")\n+\t(unspec_volatile [(const_int 0)] UNSPECV_SLWP_INTRINSIC))]\n   \"TARGET_LWP\"\n-  \"slwpcb\\t%0\"\n-  [(set_attr \"type\" \"lwp\")\n-   (set_attr \"mode\" \"SI\")])\n-\n-(define_insn \"lwp_slwpcbdi1\"\n-  [(unspec [(match_operand:DI 0 \"register_operand\" \"r\")]\n-  \t   UNSPEC_SLWP_INTRINSIC)]\n+  {\n+    if (TARGET_64BIT)\n+      emit_insn (gen_lwp_slwpcbdi (operands[0]));\n+    else\n+      emit_insn (gen_lwp_slwpcbsi (operands[0]));\n+    DONE;\n+  })\n+\n+(define_insn \"lwp_slwpcb<mode>\"\n+  [(set (match_operand:P 0 \"register_operand\" \"=r\")\n+\t(unspec_volatile:P [(const_int 0)] UNSPECV_SLWP_INTRINSIC))]\n   \"TARGET_LWP\"\n   \"slwpcb\\t%0\"\n   [(set_attr \"type\" \"lwp\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_insn \"lwp_lwpvalhi3\"\n-  [(unspec_volatile [(match_operand:HI 0 \"register_operand\" \"r\")\n-  \t   \t     (match_operand:SI 1 \"nonimmediate_operand\" \"rm\")\n-\t   \t     (match_operand:HI 2 \"const_int_operand\" \"\")]\n-  \t   \t    UNSPECV_LWPVAL_INTRINSIC)]\n-  \"TARGET_LWP\"\n-  \"lwpval\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"type\" \"lwp\")\n-   (set_attr \"mode\" \"HI\")])\n+   (set_attr \"mode\" \"<MODE>\")\n+   (set_attr \"length\" \"5\")])\n \n-(define_insn \"lwp_lwpvalsi3\"\n-  [(unspec_volatile [(match_operand:SI 0 \"register_operand\" \"r\")\n-    \t    \t     (match_operand:SI 1 \"nonimmediate_operand\" \"rm\")\n-\t    \t     (match_operand:SI 2 \"const_int_operand\" \"\")]\n+(define_expand \"lwp_lwpval<mode>3\"\n+  [(unspec_volatile [(match_operand:SWI48 1 \"register_operand\" \"r\")\n+    \t    \t     (match_operand:SI 2 \"nonimmediate_operand\" \"rm\")\n+\t\t     (match_operand:SI 3 \"const_int_operand\" \"i\")]\n \t\t    UNSPECV_LWPVAL_INTRINSIC)]\n   \"TARGET_LWP\"\n-  \"lwpval\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"type\" \"lwp\")\n-   (set_attr \"mode\" \"SI\")])\n+  \"/* Avoid unused variable warning.  */\n+   (void) operand0;\")\n \n-(define_insn \"lwp_lwpvaldi3\"\n-  [(unspec_volatile [(match_operand:DI 0 \"register_operand\" \"r\")\n-  \t\t     (match_operand:SI 1 \"nonimmediate_operand\" \"rm\")\n-\t\t     (match_operand:SI 2 \"const_int_operand\" \"\")]\n+(define_insn \"*lwp_lwpval<mode>3_1\"\n+  [(unspec_volatile [(match_operand:SWI48 0 \"register_operand\" \"r\")\n+    \t    \t     (match_operand:SI 1 \"nonimmediate_operand\" \"rm\")\n+\t\t     (match_operand:SI 2 \"const_int_operand\" \"i\")]\n \t\t    UNSPECV_LWPVAL_INTRINSIC)]\n   \"TARGET_LWP\"\n   \"lwpval\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"lwp\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_insn \"lwp_lwpinshi3\"\n-  [(unspec_volatile [(match_operand:HI 0 \"register_operand\" \"r\")\n-  \t\t     (match_operand:SI 1 \"nonimmediate_operand\" \"rm\")\n-\t\t     (match_operand:HI 2 \"const_int_operand\" \"\")]\n-\t\t    UNSPECV_LWPINS_INTRINSIC)]\n-  \"TARGET_LWP\"\n-  \"lwpins\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"type\" \"lwp\")\n-   (set_attr \"mode\" \"HI\")])\n+   (set_attr \"mode\" \"<MODE>\")\n+   (set (attr \"length\")\n+        (symbol_ref \"ix86_attr_length_address_default (insn) + 9\"))])\n \n-(define_insn \"lwp_lwpinssi3\"\n-  [(unspec_volatile [(match_operand:SI 0 \"register_operand\" \"r\")\n-  \t\t     (match_operand:SI 1 \"nonimmediate_operand\" \"rm\")\n-\t\t     (match_operand:SI 2 \"const_int_operand\" \"\")]\n-\t\t    UNSPECV_LWPINS_INTRINSIC)]\n+(define_expand \"lwp_lwpins<mode>3\"\n+  [(set (reg:CCC FLAGS_REG)\n+\t(unspec_volatile:CCC [(match_operand:SWI48 1 \"register_operand\" \"r\")\n+\t\t\t      (match_operand:SI 2 \"nonimmediate_operand\" \"rm\")\n+\t\t\t      (match_operand:SI 3 \"const_int_operand\" \"i\")]\n+\t\t\t     UNSPECV_LWPINS_INTRINSIC))\n+   (set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm\")\n+\t(eq:QI (reg:CCC FLAGS_REG) (const_int 0)))]\n   \"TARGET_LWP\"\n-  \"lwpins\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"type\" \"lwp\")\n-   (set_attr \"mode\" \"SI\")])\n+  \"\")\n \n-(define_insn \"lwp_lwpinsdi3\"\n-  [(unspec_volatile [(match_operand:DI 0 \"register_operand\" \"r\")\n-  \t\t     (match_operand:SI 1 \"nonimmediate_operand\" \"rm\")\n-\t\t     (match_operand:SI 2 \"const_int_operand\" \"\")]\n-\t\t    UNSPECV_LWPINS_INTRINSIC)]\n+(define_insn \"*lwp_lwpins<mode>3_1\"\n+  [(set (reg:CCC FLAGS_REG)\n+\t(unspec_volatile:CCC [(match_operand:SWI48 0 \"register_operand\" \"r\")\n+\t\t\t      (match_operand:SI 1 \"nonimmediate_operand\" \"rm\")\n+\t\t\t      (match_operand:SI 2 \"const_int_operand\" \"i\")]\n+\t\t\t     UNSPECV_LWPINS_INTRINSIC))]\n   \"TARGET_LWP\"\n   \"lwpins\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"lwp\")\n-   (set_attr \"mode\" \"DI\")])\n+   (set_attr \"mode\" \"<MODE>\")\n+   (set (attr \"length\")\n+        (symbol_ref \"ix86_attr_length_address_default (insn) + 9\"))])\n \n (include \"mmx.md\")\n (include \"sse.md\")"}, {"sha": "954b039e542a4491af40708bbd1a3ce640b49f74", "filename": "gcc/config/i386/lwpintrin.h", "status": "modified", "additions": 33, "deletions": 42, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/519517fd497032bb67c1231a31c6422c3b17b928/gcc%2Fconfig%2Fi386%2Flwpintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/519517fd497032bb67c1231a31c6422c3b17b928/gcc%2Fconfig%2Fi386%2Flwpintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Flwpintrin.h?ref=519517fd497032bb67c1231a31c6422c3b17b928", "patch": "@@ -33,77 +33,68 @@\n #else\n \n extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-__llwpcb16 (void *pcbAddress)\n+__llwpcb (void *pcbAddress)\n {\n-  __builtin_ia32_llwpcb16 (pcbAddress);\n-}\n-\n-extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-__llwpcb32 (void *pcbAddress)\n-{\n-  __builtin_ia32_llwpcb32 (pcbAddress);\n-}\n-\n-extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-__llwpcb64 (void *pcbAddress)\n-{\n-  __builtin_ia32_llwpcb64 (pcbAddress);\n-}\n-\n-extern __inline void * __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-__slwpcb16 (void)\n-{\n-  return __builtin_ia32_slwpcb16 ();\n-}\n-\n-extern __inline void * __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-__slwpcb32 (void)\n-{\n-  return __builtin_ia32_slwpcb32 ();\n+  __builtin_ia32_llwpcb (pcbAddress);\n }\n \n extern __inline void * __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-__slwpcb64 (void)\n+__slwpcb (void)\n {\n-  return __builtin_ia32_slwpcb64 ();\n+  return __builtin_ia32_slwpcb ();\n }\n \n-extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-__lwpval16 (unsigned short data2, unsigned int data1, unsigned short flags)\n-{\n-  __builtin_ia32_lwpval16 (data2, data1, flags);\n-}\n-/*\n+#ifdef __OPTIMIZE__\n extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n __lwpval32 (unsigned int data2, unsigned int data1, unsigned int flags)\n {\n   __builtin_ia32_lwpval32 (data2, data1, flags);\n }\n \n+#ifdef __x86_64__\n extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-__lwpval64 (unsigned __int64 data2, unsigned int data1, unsigned int flags)\n+__lwpval64 (unsigned long long data2, unsigned int data1, unsigned int flags)\n {\n   __builtin_ia32_lwpval64 (data2, data1, flags);\n }\n+#endif\n+#else\n+#define __lwpval32(D2, D1, F) \\\n+  (__builtin_ia32_lwpval32 ((unsigned int) (D2), (unsigned int) (D1), \\\n+\t\t\t    (unsigned int) (F)))\n+#ifdef __x86_64__\n+#define __lwpval64(D2, D1, F) \\\n+  (__builtin_ia32_lwpval64 ((unsigned long long) (D2), (unsigned int) (D1), \\\n+\t\t\t    (unsigned int) (F)))\n+#endif\n+#endif\n \n-extern __inline unsigned char __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-__lwpins16 (unsigned short data2, unsigned int data1, unsigned short flags)\n-{\n-  return __builtin_ia32_lwpins16 (data2, data1, flags);\n-}\n \n+#ifdef __OPTIMIZE__\n extern __inline unsigned char __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n __lwpins32 (unsigned int data2, unsigned int data1, unsigned int flags)\n {\n   return __builtin_ia32_lwpins32 (data2, data1, flags);\n }\n \n+#ifdef __x86_64__\n extern __inline unsigned char __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-__lwpins64 (unsigned __int64 data2, unsigned int data1, unsigned int flags)\n+__lwpins64 (unsigned long long data2, unsigned int data1, unsigned int flags)\n {\n   return __builtin_ia32_lwpins64 (data2, data1, flags);\n }\n-*/\n+#endif\n+#else\n+#define __lwpins32(D2, D1, F) \\\n+  (__builtin_ia32_lwpins32 ((unsigned int) (D2), (unsigned int) (D1), \\\n+\t\t\t    (unsigned int) (F)))\n+#ifdef __x86_64__\n+#define __lwpins64(D2, D1, F) \\\n+  (__builtin_ia32_lwpins64 ((unsigned long long) (D2), (unsigned int) (D1), \\\n+\t\t\t    (unsigned int) (F)))\n+#endif\n+#endif\n+\n #endif /* __LWP__ */\n \n #endif /* _LWPINTRIN_H_INCLUDED */"}, {"sha": "77baff0f4b9e463c587ffd56d6f2fb599087dcf3", "filename": "gcc/testsuite/gcc.target/i386/sse-12.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/519517fd497032bb67c1231a31c6422c3b17b928/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/519517fd497032bb67c1231a31c6422c3b17b928/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c?ref=519517fd497032bb67c1231a31c6422c3b17b928", "patch": "@@ -1,8 +1,8 @@\n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, xopintrin.h, mm3dnow.h,\n-   abmintrin.h and mm_malloc.h are usable with -O -std=c89\n-   -pedantic-errors.  */\n+   abmintrin.h, lwpintrin.h, popcntintrin.h and mm_malloc.h are usable\n+   with -O -std=c89 -pedantic-errors.  */\n /* { dg-do compile } */\n-/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -m3dnow -mavx -mfma4 -mxop -maes -mpclmul -mabm\" } */\n+/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -m3dnow -mavx -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlwp\" } */\n \n #include <x86intrin.h>\n "}, {"sha": "96214e02280dcaf6cdde76237549559afd0be35e", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/519517fd497032bb67c1231a31c6422c3b17b928/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/519517fd497032bb67c1231a31c6422c3b17b928/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=519517fd497032bb67c1231a31c6422c3b17b928", "patch": "@@ -1,13 +1,14 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -m3dnow -mavx -mxop -maes -mpclmul -mabm\" } */\n+/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -m3dnow -mavx -mxop -maes -mpclmul -mpopcnt -mabm -mlwp\" } */\n \n #include <mm_malloc.h>\n \n /* Test that the intrinsics compile with optimization.  All of them\n    are defined as inline functions in {,x,e,p,t,s,w,a,b,i}mmintrin.h,\n-   xopintrin.h, abmintrin.h and mm3dnow.h that reference the proper\n-   builtin functions.  Defining away \"extern\" and \"__inline\" results\n-   in all of them being compiled as proper functions.  */\n+   xopintrin.h, abmintrin.h, lwpintrin.h, popcntintrin.h and mm3dnow.h\n+   that reference the proper builtin functions.  Defining away\n+   \"extern\" and \"__inline\" results in all of them being compiled as\n+   proper functions.  */\n \n #define extern\n #define __inline\n@@ -127,9 +128,15 @@\n #define __builtin_ia32_shufps(A, B, N) __builtin_ia32_shufps(A, B, 0)\n \n /* xopintrin.h */\n-#define  __builtin_ia32_vprotbi(A, N) __builtin_ia32_vprotbi (A,1)\n-#define  __builtin_ia32_vprotwi(A, N) __builtin_ia32_vprotwi (A,1)\n-#define  __builtin_ia32_vprotdi(A, N) __builtin_ia32_vprotdi (A,1)\n-#define  __builtin_ia32_vprotqi(A, N) __builtin_ia32_vprotqi (A,1)\n+#define __builtin_ia32_vprotbi(A, N) __builtin_ia32_vprotbi (A,1)\n+#define __builtin_ia32_vprotwi(A, N) __builtin_ia32_vprotwi (A,1)\n+#define __builtin_ia32_vprotdi(A, N) __builtin_ia32_vprotdi (A,1)\n+#define __builtin_ia32_vprotqi(A, N) __builtin_ia32_vprotqi (A,1)\n+\n+/* lwpintrin.h */\n+#define __builtin_ia32_lwpval32(D2, D1, F) __builtin_ia32_lwpval32 (D2, D1, 1)\n+#define __builtin_ia32_lwpval64(D2, D1, F) __builtin_ia32_lwpval64 (D2, D1, 1)\n+#define __builtin_ia32_lwpins32(D2, D1, F) __builtin_ia32_lwpins32 (D2, D1, 1)\n+#define __builtin_ia32_lwpins64(D2, D1, F) __builtin_ia32_lwpins64 (D2, D1, 1)\n \n #include <x86intrin.h>"}, {"sha": "c3f72e419c786b767707d94f514dba34b1777dd3", "filename": "gcc/testsuite/gcc.target/i386/sse-14.c", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/519517fd497032bb67c1231a31c6422c3b17b928/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/519517fd497032bb67c1231a31c6422c3b17b928/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c?ref=519517fd497032bb67c1231a31c6422c3b17b928", "patch": "@@ -1,12 +1,13 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -m3dnow -mavx -mxop -msse4a -maes -mpclmul\" } */\n+/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -m3dnow -mavx -mxop -msse4a -maes -mpclmul -mpopcnt -mabm -mlwp\" } */\n \n #include <mm_malloc.h>\n \n /* Test that the intrinsics compile without optimization.  All of them are\n-   defined as inline functions in {,x,e,p,t,s,w,a}mmintrin.h, xopintrin.h  and mm3dnow.h\n-   that reference the proper builtin functions.  Defining away \"extern\" and\n-   \"__inline\" results in all of them being compiled as proper functions.  */\n+   defined as inline functions in {,x,e,p,t,s,w,a}mmintrin.h, xopintrin.h,\n+   lwpintrin.h and mm3dnow.h that reference the proper builtin functions.\n+   Defining away \"extern\" and \"__inline\" results in all of them being compiled\n+   as proper functions.  */\n \n #define extern\n #define __inline\n@@ -162,3 +163,10 @@ test_1 ( _mm_roti_epi16, __m128i, __m128i, 1)\n test_1 ( _mm_roti_epi32, __m128i, __m128i, 1)\n test_1 ( _mm_roti_epi64, __m128i, __m128i, 1)\n \n+/* lwpintrin.h */\n+test_2 ( __lwpval32, void, unsigned int, unsigned int, 1)\n+test_2 ( __lwpins32, unsigned char, unsigned int, unsigned int, 1)\n+#ifdef __x86_64__\n+test_2 ( __lwpval64, void, unsigned long long, unsigned int, 1)\n+test_2 ( __lwpins64, unsigned char, unsigned long long, unsigned int, 1)\n+#endif"}, {"sha": "6d976972d281a33f6552aac151fd57029cf577be", "filename": "gcc/testsuite/gcc.target/i386/sse-22.c", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/519517fd497032bb67c1231a31c6422c3b17b928/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/519517fd497032bb67c1231a31c6422c3b17b928/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c?ref=519517fd497032bb67c1231a31c6422c3b17b928", "patch": "@@ -4,10 +4,12 @@\n \n #include <mm_malloc.h>\n \n-/* Test that the intrinsics compile without optimization.  All of them are\n-   defined as inline functions in {,x,e,p,t,s,w,a}mmintrin.h, xopintrin.h and mm3dnow.h\n-   that reference the proper builtin functions.  Defining away \"extern\" and\n-   \"__inline\" results in all of them being compiled as proper functions.  */\n+/* Test that the intrinsics compile without optimization.  All of them\n+   are defined as inline functions in {,x,e,p,t,s,w,a}mmintrin.h,\n+   xopintrin.h, lwpintrin.h, popcntintrin.h and mm3dnow.h that\n+   reference the proper builtin functions.  Defining away \"extern\" and\n+   \"__inline\" results in all of them being compiled as proper\n+   functions.  */\n \n #define extern\n #define __inline\n@@ -37,7 +39,7 @@\n \n \n #ifndef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"mmx,3dnow,sse,sse2,sse3,ssse3,sse4.1,sse4.2,sse4a,aes,pclmul,xop\")\n+#pragma GCC target (\"mmx,3dnow,sse,sse2,sse3,ssse3,sse4.1,sse4.2,sse4a,aes,pclmul,xop,popcnt,abm,lwp\")\n #endif\n \n /* Following intrinsics require immediate arguments.  They\n@@ -162,10 +164,18 @@ test_2 (_mm_round_ss, __m128, __m128, __m128, 1)\n \n /* xopintrin.h (XOP). */\n #ifdef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"xop\")\n+#pragma GCC target (\"xop,lwp\")\n #endif\n #include <x86intrin.h>\n test_1 ( _mm_roti_epi8, __m128i, __m128i, 1)\n test_1 ( _mm_roti_epi16, __m128i, __m128i, 1)\n test_1 ( _mm_roti_epi32, __m128i, __m128i, 1)\n test_1 ( _mm_roti_epi64, __m128i, __m128i, 1)\n+\n+/* lwpintrin.h (LWP). */\n+test_2 ( __lwpval32, void, unsigned int, unsigned int, 1)\n+test_2 ( __lwpins32, unsigned char, unsigned int, unsigned int, 1)\n+#ifdef __x86_64__\n+test_2 ( __lwpval64, void, unsigned long long, unsigned int, 1)\n+test_2 ( __lwpins64, unsigned char, unsigned long long, unsigned int, 1)\n+#endif"}, {"sha": "f74d3a71f6eb6c7ae9c4dba27ddcd8dec2d4e1e7", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 46, "deletions": 5, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/519517fd497032bb67c1231a31c6422c3b17b928/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/519517fd497032bb67c1231a31c6422c3b17b928/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=519517fd497032bb67c1231a31c6422c3b17b928", "patch": "@@ -3,10 +3,12 @@\n \n #include <mm_malloc.h>\n \n-/* Test that the intrinsics compile with optimization.  All of them are\n-   defined as inline functions in {,x,e,p,t,s,w,a}mmintrin.h, xopintrin.h and mm3dnow.h\n-   that reference the proper builtin functions.  Defining away \"extern\" and\n-   \"__inline\" results in all of them being compiled as proper functions.  */\n+/* Test that the intrinsics compile with optimization.  All of them\n+   are defined as inline functions in {,x,e,p,t,s,w,a}mmintrin.h,\n+   xopintrin.h, lwpintrin.h, popcntintrin.h and mm3dnow.h that\n+   reference the proper builtin functions.  Defining away \"extern\" and\n+   \"__inline\" results in all of them being compiled as proper\n+   functions.  */\n \n #define extern\n #define __inline\n@@ -93,13 +95,52 @@\n #define __builtin_ia32_vec_ext_v4hi(A, N) __builtin_ia32_vec_ext_v4hi(A, 0)\n #define __builtin_ia32_shufps(A, B, N) __builtin_ia32_shufps(A, B, 0)\n \n+/* immintrin.h */\n+#define __builtin_ia32_blendpd256(X, Y, M) __builtin_ia32_blendpd256(X, Y, 1)\n+#define __builtin_ia32_blendps256(X, Y, M) __builtin_ia32_blendps256(X, Y, 1)\n+#define __builtin_ia32_dpps256(X, Y, M) __builtin_ia32_dpps256(X, Y, 1)\n+#define __builtin_ia32_shufpd256(X, Y, M) __builtin_ia32_shufpd256(X, Y, 1)\n+#define __builtin_ia32_shufps256(X, Y, M) __builtin_ia32_shufps256(X, Y, 1)\n+#define __builtin_ia32_cmpsd(X, Y, O) __builtin_ia32_cmpsd(X, Y, 1)\n+#define __builtin_ia32_cmpss(X, Y, O) __builtin_ia32_cmpss(X, Y, 1)\n+#define __builtin_ia32_cmppd(X, Y, O) __builtin_ia32_cmppd(X, Y, 1)\n+#define __builtin_ia32_cmpps(X, Y, O) __builtin_ia32_cmpps(X, Y, 1)\n+#define __builtin_ia32_cmppd256(X, Y, O) __builtin_ia32_cmppd256(X, Y, 1)\n+#define __builtin_ia32_cmpps256(X, Y, O) __builtin_ia32_cmpps256(X, Y, 1)\n+#define __builtin_ia32_vextractf128_pd256(X, N) __builtin_ia32_vextractf128_pd256(X, 1)\n+#define __builtin_ia32_vextractf128_ps256(X, N) __builtin_ia32_vextractf128_ps256(X, 1)\n+#define __builtin_ia32_vextractf128_si256(X, N) __builtin_ia32_vextractf128_si256(X, 1)\n+#define __builtin_ia32_vpermilpd(X, N) __builtin_ia32_vpermilpd(X, 1)\n+#define __builtin_ia32_vpermilpd256(X, N) __builtin_ia32_vpermilpd256(X, 1)\n+#define __builtin_ia32_vpermilps(X, N) __builtin_ia32_vpermilps(X, 1)\n+#define __builtin_ia32_vpermilps256(X, N) __builtin_ia32_vpermilps256(X, 1)\n+#define __builtin_ia32_vpermil2pd(X, Y, C, I) __builtin_ia32_vpermil2pd(X, Y, C, 1)\n+#define __builtin_ia32_vpermil2pd256(X, Y, C, I) __builtin_ia32_vpermil2pd256(X, Y, C, 1)\n+#define __builtin_ia32_vpermil2ps(X, Y, C, I) __builtin_ia32_vpermil2ps(X, Y, C, 1)\n+#define __builtin_ia32_vpermil2ps256(X, Y, C, I) __builtin_ia32_vpermil2ps256(X, Y, C, 1)\n+#define __builtin_ia32_vperm2f128_pd256(X, Y, C) __builtin_ia32_vperm2f128_pd256(X, Y, 1)\n+#define __builtin_ia32_vperm2f128_ps256(X, Y, C) __builtin_ia32_vperm2f128_ps256(X, Y, 1)\n+#define __builtin_ia32_vperm2f128_si256(X, Y, C) __builtin_ia32_vperm2f128_si256(X, Y, 1)\n+#define __builtin_ia32_vinsertf128_pd256(X, Y, C) __builtin_ia32_vinsertf128_pd256(X, Y, 1)\n+#define __builtin_ia32_vinsertf128_ps256(X, Y, C) __builtin_ia32_vinsertf128_ps256(X, Y, 1)\n+#define __builtin_ia32_vinsertf128_si256(X, Y, C) __builtin_ia32_vinsertf128_si256(X, Y, 1)\n+#define __builtin_ia32_roundpd256(V, M) __builtin_ia32_roundpd256(V, 1)\n+#define __builtin_ia32_roundps256(V, M) __builtin_ia32_roundps256(V, 1)\n+\n /* xopintrin.h */\n #define __builtin_ia32_vprotbi(A, B) __builtin_ia32_vprotbi(A,1)\n #define __builtin_ia32_vprotwi(A, B) __builtin_ia32_vprotwi(A,1)\n #define __builtin_ia32_vprotdi(A, B) __builtin_ia32_vprotdi(A,1)\n #define __builtin_ia32_vprotqi(A, B) __builtin_ia32_vprotqi(A,1)\n \n-#pragma GCC target (\"3dnow,sse4,sse4a,aes,pclmul,xop\")\n+/* lwpintrin.h */\n+#define __builtin_ia32_lwpval32(D2, D1, F) __builtin_ia32_lwpval32 (D2, D1, 1)\n+#define __builtin_ia32_lwpval64(D2, D1, F) __builtin_ia32_lwpval64 (D2, D1, 1)\n+#define __builtin_ia32_lwpins32(D2, D1, F) __builtin_ia32_lwpins32 (D2, D1, 1)\n+#define __builtin_ia32_lwpins64(D2, D1, F) __builtin_ia32_lwpins64 (D2, D1, 1)\n+\n+#pragma GCC target (\"3dnow,sse4,sse4a,aes,pclmul,xop,abm,popcnt,lwp\")\n #include <wmmintrin.h>\n #include <smmintrin.h>\n #include <mm3dnow.h>\n+#include <x86intrin.h>"}]}