{"sha": "a65c591c7daf3ea593223fe52c36eeb638ef6261", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTY1YzU5MWM3ZGFmM2VhNTkzMjIzZmU1MmMzNmVlYjYzOGVmNjI2MQ==", "commit": {"author": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2002-03-12T18:01:19Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2002-03-12T18:01:19Z"}, "message": "rs6000.h (PREDICATE_CODES): Add any_operand and zero_constant.\n\n\t* config/rs6000/rs6000.h (PREDICATE_CODES): Add any_operand and\n\tzero_constant.\n\t* config/rs6000/rs6000.md (addsi3): Optimize sign extension.\n\t(adddi3): Likewise.\n\t(movdf): Likewise.\n\t(movdi): Likewise.\n\t(cmpsi splitter): Likewise.\n\t(modsi3): Fail if <= 0.\n\t* config/rs6000/rs6000.c (reg_or_add_cint64_operand): Remove\n\tredundant test when HOST_BITS_PER_WIDE_INT != 32.\n\t(reg_or_sub_cint64_operand): Likewise.\n\t(num_insns_constant_wide): Optimize sign extension.\n\t(rs6000_legitimize_address):: Likewise.\n\t(easy_fp_constant): Fix formatting.\n\nFrom-SVN: r50658", "tree": {"sha": "5e7e005cf6d55d4ea1cbc341f0cff346c239fcde", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e7e005cf6d55d4ea1cbc341f0cff346c239fcde"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a65c591c7daf3ea593223fe52c36eeb638ef6261", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a65c591c7daf3ea593223fe52c36eeb638ef6261", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a65c591c7daf3ea593223fe52c36eeb638ef6261", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a65c591c7daf3ea593223fe52c36eeb638ef6261/comments", "author": null, "committer": null, "parents": [{"sha": "17720332ab756669b36541bd00b730ae11de7bc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17720332ab756669b36541bd00b730ae11de7bc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17720332ab756669b36541bd00b730ae11de7bc8"}], "stats": {"total": 74, "additions": 48, "deletions": 26}, "files": [{"sha": "4f92e1c885280b30529a8c5005efd138f0f81055", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a65c591c7daf3ea593223fe52c36eeb638ef6261/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a65c591c7daf3ea593223fe52c36eeb638ef6261/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a65c591c7daf3ea593223fe52c36eeb638ef6261", "patch": "@@ -1,3 +1,23 @@\n+2002-03-12  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* config/rs6000/rs6000.h (PREDICATE_CODES): Add any_operand and\n+\tzero_constant.\n+\t* config/rs6000/rs6000.c (easy_fp_constant): Fix formatting.\n+\n+2002-03-12  Alan Modra  <amodra@bigpond.net.au>\n+\n+\t* config/rs6000/rs6000.md (addsi3): Optimize sign extension.\n+\t(adddi3): Likewise.\n+\t(movdf): Likewise.\n+\t(movdi): Likewise.\n+\t(cmpsi splitter): Likewise.\n+\t(modsi3): Fail if <= 0.\n+\t* config/rs6000/rs6000.c (reg_or_add_cint64_operand): Remove\n+\tredundant test when HOST_BITS_PER_WIDE_INT != 32.\n+\t(reg_or_sub_cint64_operand): Likewise.\n+\t(num_insns_constant_wide): Optimize sign extension.\n+\t(rs6000_legitimize_address): Likewise.\n+\n 2002-03-12  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* config/sparc/linux.h (HANDLE_PRAGMA_PACK_PUSH_POP): Define.\n@@ -93,6 +113,8 @@\n \t* alias.c (record_component_aliases): Record aliases for base \n \tclasses too.\n \n+2002-03-11  Ulrich Weigand  <uweigand@de.ibm.com>\n+\n \t* config/s390/s390.h (REG_ALLOC_ORDER): Add missing register.\n \n 2002-03-11  Douglas B Rupp  <rupp@gnat.com>"}, {"sha": "d2046a16845012613360de18b0ec40c671612505", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 13, "deletions": 17, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a65c591c7daf3ea593223fe52c36eeb638ef6261/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a65c591c7daf3ea593223fe52c36eeb638ef6261/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=a65c591c7daf3ea593223fe52c36eeb638ef6261", "patch": "@@ -934,8 +934,9 @@ reg_or_add_cint64_operand (op, mode)\n {\n   return (gpc_reg_operand (op, mode)\n \t  || (GET_CODE (op) == CONST_INT\n+#if HOST_BITS_PER_WIDE_INT == 32\n \t      && INTVAL (op) < 0x7fff8000\n-#if HOST_BITS_PER_WIDE_INT != 32\n+#else\n \t      && ((unsigned HOST_WIDE_INT) (INTVAL (op) + 0x80008000)\n \t\t  < 0x100000000ll)\n #endif\n@@ -952,8 +953,9 @@ reg_or_sub_cint64_operand (op, mode)\n {\n   return (gpc_reg_operand (op, mode)\n \t  || (GET_CODE (op) == CONST_INT\n+#if HOST_BITS_PER_WIDE_INT == 32\n \t      && (- INTVAL (op)) < 0x7fff8000\n-#if HOST_BITS_PER_WIDE_INT != 32\n+#else\n \t      && ((unsigned HOST_WIDE_INT) ((- INTVAL (op)) + 0x80008000)\n \t\t  < 0x100000000ll)\n #endif\n@@ -1035,20 +1037,16 @@ num_insns_constant_wide (value)\n #if HOST_BITS_PER_WIDE_INT == 64\n   else if (TARGET_POWERPC64)\n     {\n-      HOST_WIDE_INT low  = value & 0xffffffff;\n-      HOST_WIDE_INT high = value >> 32;\n-\n-      low = (low ^ 0x80000000) - 0x80000000;  /* sign extend */\n+      HOST_WIDE_INT low  = ((value & 0xffffffff) ^ 0x80000000) - 0x80000000;\n+      HOST_WIDE_INT high = value >> 31;\n \n-      if (high == 0 && (low & 0x80000000) == 0)\n+      if (high == 0 || high == -1)\n \treturn 2;\n \n-      else if (high == -1 && (low & 0x80000000) != 0)\n-\treturn 2;\n+      high >>= 1;\n \n-      else if (! low)\n+      if (low == 0)\n \treturn num_insns_constant_wide (high) + 1;\n-\n       else\n \treturn (num_insns_constant_wide (high)\n \t\t+ num_insns_constant_wide (low) + 1);\n@@ -1171,8 +1169,8 @@ easy_fp_constant (op, mode)\n       REAL_VALUE_FROM_CONST_DOUBLE (rv, op);\n       REAL_VALUE_TO_TARGET_DOUBLE (rv, k);\n \n-      return (num_insns_constant_wide ((HOST_WIDE_INT)k[0]) == 1\n-\t      && num_insns_constant_wide ((HOST_WIDE_INT)k[1]) == 1);\n+      return (num_insns_constant_wide ((HOST_WIDE_INT) k[0]) == 1\n+\t      && num_insns_constant_wide ((HOST_WIDE_INT) k[1]) == 1);\n     }\n \n   else if (mode == SFmode)\n@@ -1782,10 +1780,8 @@ rs6000_legitimize_address (x, oldx, mode)\n     { \n       HOST_WIDE_INT high_int, low_int;\n       rtx sum;\n-      high_int = INTVAL (XEXP (x, 1)) & (~ (HOST_WIDE_INT) 0xffff);\n-      low_int = INTVAL (XEXP (x, 1)) & 0xffff;\n-      if (low_int & 0x8000)\n-\thigh_int += 0x10000, low_int |= ((HOST_WIDE_INT) -1) << 16;\n+      low_int = ((INTVAL (XEXP (x, 1)) & 0xffff) ^ 0x8000) - 0x8000;\n+      high_int = INTVAL (XEXP (x, 1)) - low_int;\n       sum = force_operand (gen_rtx_PLUS (Pmode, XEXP (x, 0),\n \t\t\t\t\t GEN_INT (high_int)), 0);\n       return gen_rtx_PLUS (Pmode, sum, GEN_INT (low_int));"}, {"sha": "a103102d006d0e16454a641d2273c7c0ab6340fd", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a65c591c7daf3ea593223fe52c36eeb638ef6261/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a65c591c7daf3ea593223fe52c36eeb638ef6261/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=a65c591c7daf3ea593223fe52c36eeb638ef6261", "patch": "@@ -2721,6 +2721,10 @@ extern char rs6000_reg_names[][8];\t/* register names (0 vs. %r0).  */\n /* Define the codes that are matched by predicates in rs6000.c.  */\n \n #define PREDICATE_CODES\t\t\t\t\t\t\t   \\\n+  {\"any_operand\", {CONST_INT, CONST_DOUBLE, CONST, SYMBOL_REF,\t\t   \\\n+\t\t   LABEL_REF, SUBREG, REG, MEM}},\t\t\t   \\\n+  {\"zero_constant\", {CONST_INT, CONST_DOUBLE, CONST, SYMBOL_REF,\t   \\\n+\t\t    LABEL_REF, SUBREG, REG, MEM}},\t\t\t   \\\n   {\"short_cint_operand\", {CONST_INT}},\t\t\t\t\t   \\\n   {\"u_short_cint_operand\", {CONST_INT}},\t\t\t\t   \\\n   {\"non_short_cint_operand\", {CONST_INT}},\t\t\t\t   \\"}, {"sha": "f5e27ee68a38cdc2d143b11c1cc7489edc123b7e", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a65c591c7daf3ea593223fe52c36eeb638ef6261/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a65c591c7daf3ea593223fe52c36eeb638ef6261/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=a65c591c7daf3ea593223fe52c36eeb638ef6261", "patch": "@@ -1631,7 +1631,7 @@\n \t\t ? operands[0] : gen_reg_rtx (SImode));\n \n       HOST_WIDE_INT val = INTVAL (operands[2]);\n-      HOST_WIDE_INT low = (val & 0xffff) - 2 * (val & 0x8000);\n+      HOST_WIDE_INT low = ((val & 0xffff) ^ 0x8000) - 0x8000;\n       HOST_WIDE_INT rest = trunc_int_for_mode (val - low, SImode);\n \n       /* The ordering here is important for the prolog expander.\n@@ -1740,7 +1740,7 @@\n \"\n {\n   HOST_WIDE_INT val = INTVAL (operands[2]);\n-  HOST_WIDE_INT low = (val & 0xffff) - 2 * (val & 0x8000);\n+  HOST_WIDE_INT low = ((val & 0xffff) ^ 0x8000) - 0x8000;\n   HOST_WIDE_INT rest = trunc_int_for_mode (val - low, SImode);\n \n   operands[3] = GEN_INT (rest);\n@@ -2538,7 +2538,7 @@\n   rtx temp2;\n \n   if (GET_CODE (operands[2]) != CONST_INT\n-      || INTVAL (operands[2]) < 0\n+      || INTVAL (operands[2]) <= 0\n       || (i = exact_log2 (INTVAL (operands[2]))) < 0)\n     FAIL;\n \n@@ -5812,7 +5812,7 @@\n \t\t   ? operands[0] : gen_reg_rtx (DImode));\n \n \tHOST_WIDE_INT val = INTVAL (operands[2]);\n-\tHOST_WIDE_INT low = (val & 0xffff) - 2 * (val & 0x8000);\n+\tHOST_WIDE_INT low = ((val & 0xffff) ^ 0x8000) - 0x8000;\n \tHOST_WIDE_INT rest = trunc_int_for_mode (val - low, DImode);\n \n \tif (!CONST_OK_FOR_LETTER_P (rest, 'L'))\n@@ -5915,7 +5915,7 @@\n \"\n {\n   HOST_WIDE_INT val = INTVAL (operands[2]);\n-  HOST_WIDE_INT low = (val & 0xffff) - 2 * (val & 0x8000);\n+  HOST_WIDE_INT low = ((val & 0xffff) ^ 0x8000) - 0x8000;\n   HOST_WIDE_INT rest = trunc_int_for_mode (val - low, DImode);\n \n   operands[4] = GEN_INT (low);\n@@ -7769,7 +7769,7 @@\n   \"\"\n   \"\")\n \n-(define_insn \"\"\n+(define_insn \"*movcc_internal1\"\n   [(set (match_operand:CC 0 \"nonimmediate_operand\" \"=y,x,y,r,r,r,r,m\")\n \t(match_operand:CC 1 \"nonimmediate_operand\" \"y,r,r,x,y,r,m,r\"))]\n   \"register_operand (operands[0], CCmode)\n@@ -7884,7 +7884,7 @@\n   operands[4] = (value & 0x80000000) ? constm1_rtx : const0_rtx;\n #else\n   operands[4] = GEN_INT (value >> 32);\n-  operands[1] = GEN_INT ((value & 0x7fffffff) - (value & 0x80000000));\n+  operands[1] = GEN_INT (((value & 0xffffffff) ^ 0x80000000) - 0x80000000);\n #endif\n }\")\n \n@@ -8370,7 +8370,7 @@\n   operands[4] = (value & 0x80000000) ? constm1_rtx : const0_rtx;\n #else\n   operands[4] = GEN_INT (value >> 32);\n-  operands[1] = GEN_INT ((value & 0x7fffffff) - (value & 0x80000000));\n+  operands[1] = GEN_INT (((value & 0xffffffff) ^ 0x80000000) - 0x80000000);\n #endif\n }\")\n \n@@ -10445,7 +10445,7 @@\n      with C to get the sign-extended value.  */\n \n   HOST_WIDE_INT c = INTVAL (operands[2]);\n-  HOST_WIDE_INT sextc = (c & 0x7fff) - (c & 0x8000);\n+  HOST_WIDE_INT sextc = ((c & 0xffff) ^ 0x8000) - 0x8000;\n   HOST_WIDE_INT xorv = c ^ sextc;\n \n   operands[4] = GEN_INT (xorv);"}]}