{"sha": "8a5b85388f5c0ae491e80f52c9aee4816499a7f6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGE1Yjg1Mzg4ZjVjMGFlNDkxZTgwZjUyYzlhZWU0ODE2NDk5YTdmNg==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2010-08-24T18:52:08Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2010-08-24T18:52:08Z"}, "message": "pa.c (hppa_register_move_cost, [...]): New.\n\n\t* config/pa/pa.c (hppa_register_move_cost, pa_libcall_value,\n\tpa_function_value_regno_p, pa_print_operand_punct_valid_p): New.\n\t(pa_function_value): Make static.\n\t(override_options): Rename to...\n\t(pa_option_override): ...this. Make static.\n\t(TARGET_PRINT_OPERAND_PUNCT_VALID_P, TARGET_REGISTER_MOVE_COST,\n\tTARGET_LIBCALL_VALUE, TARGET_FUNCTION_VALUE_REGNO_P,\n\tTARGET_OPTION_OVERRIDE): Define.\n\t* config/pa/pa.h (OVERRIDE_OPTIONS, FUNCTION_VALUE_REGNO_P,\n\tLIBCALL_VALUE, REGISTER_MOVE_COST, PRINT_OPERAND_PUNCT_VALID_P):\n\tRemove.\n\t* config/pa/pa-protos.h (override_options): Remove.\n\nFrom-SVN: r163525", "tree": {"sha": "d306e964a6e12e29ae5a4db9fb7bf319c70c398c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d306e964a6e12e29ae5a4db9fb7bf319c70c398c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a5b85388f5c0ae491e80f52c9aee4816499a7f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a5b85388f5c0ae491e80f52c9aee4816499a7f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a5b85388f5c0ae491e80f52c9aee4816499a7f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a5b85388f5c0ae491e80f52c9aee4816499a7f6/comments", "author": null, "committer": null, "parents": [{"sha": "789d73cb17fce09bfdf7380b67d75fb960f6a517", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/789d73cb17fce09bfdf7380b67d75fb960f6a517", "html_url": "https://github.com/Rust-GCC/gccrs/commit/789d73cb17fce09bfdf7380b67d75fb960f6a517"}], "stats": {"total": 145, "additions": 105, "deletions": 40}, "files": [{"sha": "ca4fe27e7ac1b07fb3bda74678e5efc333881db0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a5b85388f5c0ae491e80f52c9aee4816499a7f6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a5b85388f5c0ae491e80f52c9aee4816499a7f6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8a5b85388f5c0ae491e80f52c9aee4816499a7f6", "patch": "@@ -1,3 +1,18 @@\n+2010-08-24  Anatoly Sokolov  <aesok@post.ru>\n+\n+\t* config/pa/pa.c (hppa_register_move_cost, pa_libcall_value,\n+\tpa_function_value_regno_p, pa_print_operand_punct_valid_p): New.\n+\t(pa_function_value): Make static.\n+\t(override_options): Rename to...\n+\t(pa_option_override): ...this. Make static.\n+\t(TARGET_PRINT_OPERAND_PUNCT_VALID_P, TARGET_REGISTER_MOVE_COST,\n+\tTARGET_LIBCALL_VALUE, TARGET_FUNCTION_VALUE_REGNO_P,\n+\tTARGET_OPTION_OVERRIDE): Define.\n+\t* config/pa/pa.h (OVERRIDE_OPTIONS, FUNCTION_VALUE_REGNO_P,\n+\tLIBCALL_VALUE, REGISTER_MOVE_COST, PRINT_OPERAND_PUNCT_VALID_P):\n+\tRemove.\n+\t* config/pa/pa-protos.h (override_options): Remove.\n+\n 2010-08-24  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/45379"}, {"sha": "68d7591f84cd31836b0084d045529a0534e03b8d", "filename": "gcc/config/pa/pa-protos.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a5b85388f5c0ae491e80f52c9aee4816499a7f6/gcc%2Fconfig%2Fpa%2Fpa-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a5b85388f5c0ae491e80f52c9aee4816499a7f6/gcc%2Fconfig%2Fpa%2Fpa-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-protos.h?ref=8a5b85388f5c0ae491e80f52c9aee4816499a7f6", "patch": "@@ -1,5 +1,6 @@\n /* Prototypes for pa.c functions used in the md file & elsewhere.\n-   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2007 Free Software Foundation,\n+   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2010\n+   Free Software Foundation,\n    Inc.\n \n This file is part of GCC.\n@@ -131,7 +132,6 @@ extern int integer_store_memory_operand (rtx, enum machine_mode);\n extern int ldil_cint_p (HOST_WIDE_INT);\n extern int zdepi_cint_p (unsigned HOST_WIDE_INT);\n \n-extern void override_options (void);\n extern void output_ascii (FILE *, const char *, int);\n extern HOST_WIDE_INT compute_frame_size (HOST_WIDE_INT, int *);\n extern int and_mask_p (unsigned HOST_WIDE_INT);"}, {"sha": "920e117154224f051a44609a9e55bb6d53056eab", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 88, "deletions": 3, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a5b85388f5c0ae491e80f52c9aee4816499a7f6/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a5b85388f5c0ae491e80f52c9aee4816499a7f6/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=8a5b85388f5c0ae491e80f52c9aee4816499a7f6", "patch": "@@ -84,9 +84,12 @@ hppa_fpstore_bypass_p (rtx out_insn, rtx in_insn)\n #endif\n #endif\n \n+static void pa_option_override (void);\n static void copy_reg_pointer (rtx, rtx);\n static void fix_range (const char *);\n static bool pa_handle_option (size_t, const char *, int);\n+static int hppa_register_move_cost (enum machine_mode mode, reg_class_t,\n+\t\t\t\t    reg_class_t);\n static int hppa_address_cost (rtx, bool);\n static bool hppa_rtx_costs (rtx, int, int, int *, bool);\n static inline rtx force_mode (enum machine_mode, rtx);\n@@ -104,6 +107,8 @@ static void store_reg_modify (int, int, HOST_WIDE_INT);\n static void load_reg (int, HOST_WIDE_INT, int);\n static void set_reg_plus_d (int, int, HOST_WIDE_INT, int);\n static rtx pa_function_value (const_tree, const_tree, bool);\n+static rtx pa_libcall_value (enum machine_mode, const_rtx);\n+static bool pa_function_value_regno_p (const unsigned int);\n static void pa_output_function_prologue (FILE *, HOST_WIDE_INT);\n static void update_total_code_bytes (unsigned int);\n static void pa_output_function_epilogue (FILE *, HOST_WIDE_INT);\n@@ -168,6 +173,7 @@ static void pa_asm_trampoline_template (FILE *);\n static void pa_trampoline_init (rtx, tree, rtx);\n static rtx pa_trampoline_adjust_address (rtx);\n static rtx pa_delegitimize_address (rtx);\n+static bool pa_print_operand_punct_valid_p (unsigned char);\n \n /* The following extra sections are only used for SOM.  */\n static GTY(()) section *som_readonly_data_section;\n@@ -213,6 +219,9 @@ static size_t n_deferred_plabels = 0;\n \f\n /* Initialize the GCC target structure.  */\n \n+#undef TARGET_OPTION_OVERRIDE\n+#define TARGET_OPTION_OVERRIDE pa_option_override\n+\n #undef TARGET_ASM_ALIGNED_HI_OP\n #define TARGET_ASM_ALIGNED_HI_OP \"\\t.half\\t\"\n #undef TARGET_ASM_ALIGNED_SI_OP\n@@ -235,6 +244,10 @@ static size_t n_deferred_plabels = 0;\n \n #undef TARGET_FUNCTION_VALUE\n #define TARGET_FUNCTION_VALUE pa_function_value\n+#undef TARGET_LIBCALL_VALUE\n+#define TARGET_LIBCALL_VALUE pa_libcall_value\n+#undef TARGET_FUNCTION_VALUE_REGNO_P\n+#define TARGET_FUNCTION_VALUE_REGNO_P pa_function_value_regno_p\n \n #undef TARGET_LEGITIMIZE_ADDRESS\n #define TARGET_LEGITIMIZE_ADDRESS hppa_legitimize_address\n@@ -269,6 +282,9 @@ static size_t n_deferred_plabels = 0;\n #define TARGET_ASM_FILE_END output_deferred_plabels\n #endif\n \n+#undef TARGET_PRINT_OPERAND_PUNCT_VALID_P\n+#define TARGET_PRINT_OPERAND_PUNCT_VALID_P pa_print_operand_punct_valid_p\n+\n #if !defined(USE_COLLECT2)\n #undef TARGET_ASM_CONSTRUCTOR\n #define TARGET_ASM_CONSTRUCTOR pa_asm_out_constructor\n@@ -284,6 +300,8 @@ static size_t n_deferred_plabels = 0;\n #undef TARGET_INIT_BUILTINS\n #define TARGET_INIT_BUILTINS pa_init_builtins\n \n+#undef TARGET_REGISTER_MOVE_COST\n+#define TARGET_REGISTER_MOVE_COST hppa_register_move_cost\n #undef TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS hppa_rtx_costs\n #undef TARGET_ADDRESS_COST\n@@ -487,8 +505,10 @@ pa_handle_option (size_t code, const char *arg, int value ATTRIBUTE_UNUSED)\n     }\n }\n \n-void\n-override_options (void)\n+/* Implement the TARGET_OPTION_OVERRIDE hook.  */\n+\n+static void\n+pa_option_override (void)\n {\n   /* Unconditional branches in the delay slot are not compatible with dwarf2\n      call frame information.  There is no benefit in using this optimization\n@@ -1297,6 +1317,32 @@ hppa_legitimize_address (rtx x, rtx oldx ATTRIBUTE_UNUSED,\n   return orig;\n }\n \n+/* Implement the TARGET_REGISTER_MOVE_COST hook.\n+\n+   Compute extra cost of moving data between one register class\n+   and another.\n+\n+   Make moves from SAR so expensive they should never happen.  We used to\n+   have 0xffff here, but that generates overflow in rare cases.\n+\n+   Copies involving a FP register and a non-FP register are relatively\n+   expensive because they must go through memory.\n+\n+   Other copies are reasonably cheap.  */\n+\n+static int\n+hppa_register_move_cost (enum machine_mode mode ATTRIBUTE_UNUSED,\n+\t\t\t reg_class_t from, reg_class_t to)\n+{\n+  if (from == SHIFT_REGS)\n+    return 0x100;\n+  else if ((FP_REG_CLASS_P (from) && ! FP_REG_CLASS_P (to))\n+           || (FP_REG_CLASS_P (to) && ! FP_REG_CLASS_P (from)))\n+    return 16;\n+  else\n+    return 2;\n+}\n+\n /* For the HPPA, REG and REG+CONST is cost 0\n    and addresses involving symbolic constants are cost 2.\n \n@@ -4801,6 +4847,20 @@ pa_adjust_insn_length (rtx insn, int length)\n   return 0;\n }\n \n+/* Implement the TARGET_PRINT_OPERAND_PUNCT_VALID_P hook.  */\n+\n+static bool\n+pa_print_operand_punct_valid_p (unsigned char code)\n+{\n+  if (code == '@'\n+      || code == '#'\n+      || code == '*'\n+      || code == '^')\n+    return true;\n+\n+  return false;\n+}\n+\n /* Print operand X (an rtx) in assembler syntax to file FILE.\n    CODE is a letter or dot (`z' in `%z0') or 0 if no letter was specified.\n    For `%' followed by punctuation, CODE is the punctuation and X is null.  */\n@@ -9235,7 +9295,7 @@ pa_promote_function_mode (const_tree type ATTRIBUTE_UNUSED,\n    Small structures must be returned in a PARALLEL on PA64 in order\n    to match the HP Compiler ABI.  */\n \n-rtx\n+static rtx\n pa_function_value (const_tree valtype, \n                    const_tree func ATTRIBUTE_UNUSED, \n                    bool outgoing ATTRIBUTE_UNUSED)\n@@ -9296,6 +9356,31 @@ pa_function_value (const_tree valtype,\n   return gen_rtx_REG (valmode, 28);\n }\n \n+/* Implement the TARGET_LIBCALL_VALUE hook.  */\n+\n+static rtx\n+pa_libcall_value (enum machine_mode mode,\n+\t\t  const_rtx fun ATTRIBUTE_UNUSED)\n+{\n+  if (! TARGET_SOFT_FLOAT\n+      && (mode == SFmode || mode == DFmode))\n+    return  gen_rtx_REG (mode, 32);\n+  else\n+    return  gen_rtx_REG (mode, 28);\n+}\n+\n+/* Implement the TARGET_FUNCTION_VALUE_REGNO_P hook.  */\n+\n+static bool\n+pa_function_value_regno_p (const unsigned int regno)\n+{\n+  if (regno == 28\n+      || (! TARGET_SOFT_FLOAT &&  regno == 32))\n+    return true;\n+\n+  return false;\n+}\n+\n /* Return the location of a parameter that is passed in a register or NULL\n    if the parameter has any component that is passed in memory.\n "}, {"sha": "f8c535726c1d3536979f4d01a8f632bbbc8e36de", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a5b85388f5c0ae491e80f52c9aee4816499a7f6/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a5b85388f5c0ae491e80f52c9aee4816499a7f6/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=8a5b85388f5c0ae491e80f52c9aee4816499a7f6", "patch": "@@ -145,8 +145,6 @@ extern int flag_pa_unix;\n    and the old mnemonics are dialect zero.  */\n #define ASSEMBLER_DIALECT (TARGET_PA_20 ? 1 : 0)\n \n-#define OVERRIDE_OPTIONS override_options ()\n-\n /* Override some settings from dbxelf.h.  */\n \n /* We do not have to be compatible with dbx, so we enable gdb extensions\n@@ -554,20 +552,6 @@ extern struct rtx_def *hppa_pic_save_rtx (void);\n    ? (STACK_POINTER_OFFSET)\t\t\\\n    : ((STACK_POINTER_OFFSET) - crtl->outgoing_args_size))\n \n-/* Define how to find the value returned by a library function\n-   assuming the value has mode MODE.  */\n-\n-#define LIBCALL_VALUE(MODE)\t\\\n-  gen_rtx_REG (MODE,\t\t\t\t\t\t\t\\\n-\t       (! TARGET_SOFT_FLOAT\t\t\t\t\t\\\n-\t\t&& ((MODE) == SFmode || (MODE) == DFmode) ? 32 : 28))\n-\n-/* 1 if N is a possible register number for a function value\n-   as seen by the caller.  */\n-\n-#define FUNCTION_VALUE_REGNO_P(N) \\\n-  ((N) == 28 || (! TARGET_SOFT_FLOAT && (N) == 32))\n-\n \f\n /* Define a data type for recording info about an argument list\n    during the scan of that argument list.  This data type should\n@@ -1331,22 +1315,6 @@ do { \t\t\t\t\t\t\t\t\t\\\n    few bits.  */\n #define SHIFT_COUNT_TRUNCATED 1\n \n-/* Compute extra cost of moving data between one register class\n-   and another.\n-\n-   Make moves from SAR so expensive they should never happen.  We used to\n-   have 0xffff here, but that generates overflow in rare cases.\n-\n-   Copies involving a FP register and a non-FP register are relatively\n-   expensive because they must go through memory.\n-\n-   Other copies are reasonably cheap.  */\n-#define REGISTER_MOVE_COST(MODE, CLASS1, CLASS2) \\\n- (CLASS1 == SHIFT_REGS ? 0x100\t\t\t\t\t\\\n-  : FP_REG_CLASS_P (CLASS1) && ! FP_REG_CLASS_P (CLASS2) ? 16\t\\\n-  : FP_REG_CLASS_P (CLASS2) && ! FP_REG_CLASS_P (CLASS1) ? 16\t\\\n-  : 2)\n-\n /* Adjust the cost of branches.  */\n #define BRANCH_COST(speed_p, predictable_p) (pa_cpu == PROCESSOR_8000 ? 2 : 1)\n \n@@ -1524,9 +1492,6 @@ do { \t\t\t\t\t\t\t\t\t\\\n /* All HP assemblers use \"!\" to separate logical lines.  */\n #define IS_ASM_LOGICAL_LINE_SEPARATOR(C, STR) ((C) == '!')\n \n-#define PRINT_OPERAND_PUNCT_VALID_P(CHAR) \\\n-  ((CHAR) == '@' || (CHAR) == '#' || (CHAR) == '*' || (CHAR) == '^')\n-\n /* Print operand X (an rtx) in assembler syntax to file FILE.\n    CODE is a letter or dot (`z' in `%z0') or 0 if no letter was specified.\n    For `%' followed by punctuation, CODE is the punctuation and X is null."}]}