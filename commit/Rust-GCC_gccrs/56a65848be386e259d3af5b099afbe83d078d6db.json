{"sha": "56a65848be386e259d3af5b099afbe83d078d6db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTZhNjU4NDhiZTM4NmUyNTlkM2FmNWIwOTlhZmJlODNkMDc4ZDZkYg==", "commit": {"author": {"name": "Dave Brolley", "email": "brolley@cygnus.com", "date": "1998-08-25T11:02:51Z"}, "committer": {"name": "Dave Brolley", "email": "brolley@gcc.gnu.org", "date": "1998-08-25T11:02:51Z"}, "message": "re PR target/16300 (Bug in vendor /usr/include/net/if.h needs fixincluding)\n\nPR gcc/16300\nTue Aug 25 13:19:46 1998  Dave Brolley  <brolley@cygnus.com>\n\t* regclass.c (regclass): Use xmalloc/free instead of alloca.\n\t* stupid.c (stupid_life_analysis): Ditto.\n\t* reload1.c (reload): Ditto.\n\nFrom-SVN: r21964", "tree": {"sha": "be9b4cfb8c41132f388bc870d0c9b533cdb592ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be9b4cfb8c41132f388bc870d0c9b533cdb592ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56a65848be386e259d3af5b099afbe83d078d6db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56a65848be386e259d3af5b099afbe83d078d6db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56a65848be386e259d3af5b099afbe83d078d6db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56a65848be386e259d3af5b099afbe83d078d6db/comments", "author": null, "committer": null, "parents": [{"sha": "5d6d333901aacf4485d6dc5f3b4a24d358c4edde", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d6d333901aacf4485d6dc5f3b4a24d358c4edde", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d6d333901aacf4485d6dc5f3b4a24d358c4edde"}], "stats": {"total": 62, "additions": 46, "deletions": 16}, "files": [{"sha": "0a129024f06d7595b055000c95c388ea4d8216ef", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56a65848be386e259d3af5b099afbe83d078d6db/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56a65848be386e259d3af5b099afbe83d078d6db/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=56a65848be386e259d3af5b099afbe83d078d6db", "patch": "@@ -1,3 +1,9 @@\n+Tue Aug 25 13:19:46 1998  Dave Brolley  <brolley@cygnus.com>\n+\n+\t* regclass.c (regclass): Use xmalloc/free instead of alloca.\n+\t* stupid.c (stupid_life_analysis): Ditto.\n+\t* reload1.c (reload): Ditto.\n+\n Tue Aug 25 05:48:18 1998  Jakub Jelinek  <jj@sunsite.ms.mff.cuni.cz>\n \n \t* config/sparc/sparc.c (arith_4096_operand, arith_add_operand,"}, {"sha": "ac17dfe3ef10050cab0f4c5e5ca0df5a765ae7ac", "filename": "gcc/regclass.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56a65848be386e259d3af5b099afbe83d078d6db/gcc%2Fregclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56a65848be386e259d3af5b099afbe83d078d6db/gcc%2Fregclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregclass.c?ref=56a65848be386e259d3af5b099afbe83d078d6db", "patch": "@@ -726,7 +726,7 @@ regclass (f, nregs)\n \n   init_recog ();\n \n-  costs = (struct costs *) alloca (nregs * sizeof (struct costs));\n+  costs = (struct costs *) xmalloc (nregs * sizeof (struct costs));\n \n #ifdef FORBIDDEN_INC_DEC_CLASSES\n \n@@ -1067,6 +1067,8 @@ regclass (f, nregs)\n \t}\n     }\n #endif /* REGISTER_CONSTRAINTS */\n+\n+  free (costs);\n }\n \f\n #ifdef REGISTER_CONSTRAINTS"}, {"sha": "ae829f72d46a0dc6715beac94dc2c77c91f1de32", "filename": "gcc/reload1.c", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56a65848be386e259d3af5b099afbe83d078d6db/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56a65848be386e259d3af5b099afbe83d078d6db/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=56a65848be386e259d3af5b099afbe83d078d6db", "patch": "@@ -619,17 +619,17 @@ reload (first, global, dumpfile)\n      Record memory equivalents in reg_mem_equiv so they can\n      be substituted eventually by altering the REG-rtx's.  */\n \n-  reg_equiv_constant = (rtx *) alloca (max_regno * sizeof (rtx));\n+  reg_equiv_constant = (rtx *) xmalloc (max_regno * sizeof (rtx));\n   bzero ((char *) reg_equiv_constant, max_regno * sizeof (rtx));\n-  reg_equiv_memory_loc = (rtx *) alloca (max_regno * sizeof (rtx));\n+  reg_equiv_memory_loc = (rtx *) xmalloc (max_regno * sizeof (rtx));\n   bzero ((char *) reg_equiv_memory_loc, max_regno * sizeof (rtx));\n-  reg_equiv_mem = (rtx *) alloca (max_regno * sizeof (rtx));\n+  reg_equiv_mem = (rtx *) xmalloc (max_regno * sizeof (rtx));\n   bzero ((char *) reg_equiv_mem, max_regno * sizeof (rtx));\n-  reg_equiv_init = (rtx *) alloca (max_regno * sizeof (rtx));\n+  reg_equiv_init = (rtx *) xmalloc (max_regno * sizeof (rtx));\n   bzero ((char *) reg_equiv_init, max_regno * sizeof (rtx));\n-  reg_equiv_address = (rtx *) alloca (max_regno * sizeof (rtx));\n+  reg_equiv_address = (rtx *) xmalloc (max_regno * sizeof (rtx));\n   bzero ((char *) reg_equiv_address, max_regno * sizeof (rtx));\n-  reg_max_ref_width = (int *) alloca (max_regno * sizeof (int));\n+  reg_max_ref_width = (int *) xmalloc (max_regno * sizeof (int));\n   bzero ((char *) reg_max_ref_width, max_regno * sizeof (int));\n \n   if (SMALL_REGISTER_CLASSES)\n@@ -799,7 +799,13 @@ reload (first, global, dumpfile)\n     {\n       free (real_known_ptr);\n       free (real_at_ptr);\n-      return;\n+      free (reg_equiv_constant);\n+      free (reg_equiv_memory_loc);\n+      free (reg_equiv_mem);\n+      free (reg_equiv_init);\n+      free (reg_equiv_address);\n+      free (reg_max_ref_width);\n+      return 0;\n     }\n #endif\n \n@@ -2176,6 +2182,13 @@ reload (first, global, dumpfile)\n     free (scratch_block);\n   scratch_block = 0;\n \n+  free (reg_equiv_constant);\n+  free (reg_equiv_memory_loc);\n+  free (reg_equiv_mem);\n+  free (reg_equiv_init);\n+  free (reg_equiv_address);\n+  free (reg_max_ref_width);\n+\n   CLEAR_HARD_REG_SET (used_spill_regs);\n   for (i = 0; i < n_spills; i++)\n     SET_HARD_REG_BIT (used_spill_regs, spill_regs[i]);"}, {"sha": "dbb0ffeccc97e46f74119bae138ddfb7b734a945", "filename": "gcc/stupid.c", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56a65848be386e259d3af5b099afbe83d078d6db/gcc%2Fstupid.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56a65848be386e259d3af5b099afbe83d078d6db/gcc%2Fstupid.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstupid.c?ref=56a65848be386e259d3af5b099afbe83d078d6db", "patch": "@@ -135,7 +135,7 @@ stupid_life_analysis (f, nregs, file)\n \n   bzero (regs_ever_live, sizeof regs_ever_live);\n \n-  regs_live = (char *) alloca (nregs);\n+  regs_live = (char *) xmalloc (nregs);\n \n   /* First find the last real insn, and count the number of insns,\n      and assign insns their suids.  */\n@@ -145,7 +145,7 @@ stupid_life_analysis (f, nregs, file)\n       i = INSN_UID (insn);\n \n   max_uid = i + 1;\n-  uid_suid = (int *) alloca ((i + 1) * sizeof (int));\n+  uid_suid = (int *) xmalloc ((i + 1) * sizeof (int));\n \n   /* Compute the mapping from uids to suids.\n      Suids are numbers assigned to insns, like uids,\n@@ -168,19 +168,19 @@ stupid_life_analysis (f, nregs, file)\n \n   /* Allocate tables to record info about regs.  */\n \n-  reg_where_dead = (int *) alloca (nregs * sizeof (int));\n+  reg_where_dead = (int *) xmalloc (nregs * sizeof (int));\n   bzero ((char *) reg_where_dead, nregs * sizeof (int));\n \n-  reg_where_born = (int *) alloca (nregs * sizeof (int));\n+  reg_where_born = (int *) xmalloc (nregs * sizeof (int));\n   bzero ((char *) reg_where_born, nregs * sizeof (int));\n \n-  reg_order = (int *) alloca (nregs * sizeof (int));\n+  reg_order = (int *) xmalloc (nregs * sizeof (int));\n   bzero ((char *) reg_order, nregs * sizeof (int));\n \n-  regs_change_size = (char *) alloca (nregs * sizeof (char));\n+  regs_change_size = (char *) xmalloc (nregs * sizeof (char));\n   bzero ((char *) regs_change_size, nregs * sizeof (char));\n \n-  regs_crosses_setjmp = (char *) alloca (nregs * sizeof (char));\n+  regs_crosses_setjmp = (char *) xmalloc (nregs * sizeof (char));\n   bzero ((char *) regs_crosses_setjmp, nregs * sizeof (char));\n \n   /* Allocate the reg_renumber array */\n@@ -189,7 +189,7 @@ stupid_life_analysis (f, nregs, file)\n     reg_renumber[i] = i;\n \n   after_insn_hard_regs\n-    = (HARD_REG_SET *) alloca (max_suid * sizeof (HARD_REG_SET));\n+    = (HARD_REG_SET *) xmalloc (max_suid * sizeof (HARD_REG_SET));\n \n   bzero ((char *) after_insn_hard_regs, max_suid * sizeof (HARD_REG_SET));\n \n@@ -316,6 +316,15 @@ stupid_life_analysis (f, nregs, file)\n \n   if (file)\n     dump_flow_info (file);\n+\n+  free (regs_live);\n+  free (uid_suid);\n+  free (reg_where_dead);\n+  free (reg_where_born);\n+  free (reg_order);\n+  free (regs_change_size);\n+  free (regs_crosses_setjmp);\n+  free (after_insn_hard_regs);\n }\n \n /* Comparison function for qsort."}]}