{"sha": "dc557046cf483336163ef64cec26db7a767e56a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGM1NTcwNDZjZjQ4MzMzNjE2M2VmNjRjZWMyNmRiN2E3NjdlNTZhMw==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "joern.rennecke@st.com", "date": "2006-11-29T14:35:38Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2006-11-29T14:35:38Z"}, "message": "sh.opt (minline-ic_invalidate): New option.\n\n\t* sh.opt (minline-ic_invalidate): New option.\n\t(musermode): Adjust comment.\n\t* sh.c (sh_initialize_trampoline): Emit library call unless\n\tis set; if it is set, don't emit library call if we can use icbi\n\tinstead.\n\t* sh.md (ic_invalidate_line, ic_invalidate_line_sh4a): Also use\n\ticbi for TARGET_SH4_300.\n\t* t-sh (LIB1ASMFUNCS_CACHE): Set.\n\t* doc/invoke.texi: Document -minline-ic_invalidate; Update\n\t-musermode documentation.\n\nFrom-SVN: r119314", "tree": {"sha": "9d3229cf46e48931958d6855a1294bbe34707735", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d3229cf46e48931958d6855a1294bbe34707735"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc557046cf483336163ef64cec26db7a767e56a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc557046cf483336163ef64cec26db7a767e56a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc557046cf483336163ef64cec26db7a767e56a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc557046cf483336163ef64cec26db7a767e56a3/comments", "author": null, "committer": null, "parents": [{"sha": "6db288928624b2fb7bf0a4bfd9f6222dc42ba2b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6db288928624b2fb7bf0a4bfd9f6222dc42ba2b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6db288928624b2fb7bf0a4bfd9f6222dc42ba2b7"}], "stats": {"total": 49, "additions": 40, "deletions": 9}, "files": [{"sha": "d4e291ce407b59159c479bc16b903097bf0b3552", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc557046cf483336163ef64cec26db7a767e56a3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc557046cf483336163ef64cec26db7a767e56a3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dc557046cf483336163ef64cec26db7a767e56a3", "patch": "@@ -1,3 +1,16 @@\n+2006-11-29  J\"orn Rennecke  <joern.rennecke@st.com>\n+\n+\t* sh.opt (minline-ic_invalidate): New option.\n+\t(musermode): Adjust comment.\n+\t* sh.c (sh_initialize_trampoline): Emit library call unless\n+\tis set; if it is set, don't emit library call if we can use icbi\n+\tinstead.\n+\t* sh.md (ic_invalidate_line, ic_invalidate_line_sh4a): Also use\n+\ticbi for TARGET_SH4_300.\n+\t* t-sh (LIB1ASMFUNCS_CACHE): Set.\n+\t* doc/invoke.texi: Document -minline-ic_invalidate; Update\n+\t-musermode documentation.\n+\n 2006-11-29  Jim Tison  <jtison@us.ibm.com>\n \n \t* gthr-tpf.h (__GTHREAD_RECURSIVE_MUTEX_INIT_FUNCTION,"}, {"sha": "aead612187d5195717dad2beac71cf0ca6199ea9", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc557046cf483336163ef64cec26db7a767e56a3/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc557046cf483336163ef64cec26db7a767e56a3/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=dc557046cf483336163ef64cec26db7a767e56a3", "patch": "@@ -9597,7 +9597,8 @@ sh_initialize_trampoline (rtx tramp, rtx fnaddr, rtx cxt)\n   emit_move_insn (adjust_address (tramp_mem, SImode, 12), fnaddr);\n   if (TARGET_HARVARD)\n     {\n-      if (TARGET_USERMODE)\n+      if (!TARGET_INLINE_IC_INVALIDATE\n+\t  || !(TARGET_SH4A_ARCH || TARGET_SH4_300) && TARGET_USERMODE)\n \temit_library_call (function_symbol (NULL, \"__ic_invalidate\",\n \t\t\t\t\t    FUNCTION_ORDINARY),\n \t\t\t   0, VOIDmode, 1, tramp, SImode);"}, {"sha": "e6d80300cddf7e9aa34b3d5780265ebd55ff21be", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc557046cf483336163ef64cec26db7a767e56a3/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc557046cf483336163ef64cec26db7a767e56a3/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=dc557046cf483336163ef64cec26db7a767e56a3", "patch": "@@ -5153,7 +5153,7 @@ label:\n       emit_insn (gen_ic_invalidate_line_compact (operands[0], operands[1]));\n       DONE;\n     }\n-  else if (TARGET_SH4A_ARCH)\n+  else if (TARGET_SH4A_ARCH || TARGET_SH4_300)\n     {\n       emit_insn (gen_ic_invalidate_line_sh4a (operands[0]));\n       DONE;\n@@ -5181,7 +5181,7 @@ label:\n (define_insn \"ic_invalidate_line_sh4a\"\n   [(unspec_volatile [(match_operand:SI 0 \"register_operand\" \"r\")]\n \t\t    UNSPEC_ICACHE)]\n-  \"TARGET_SH4A_ARCH\"\n+  \"TARGET_SH4A_ARCH || TARGET_SH4_300\"\n   \"ocbwb\\\\t@%0\\;synco\\;icbi\\\\t@%0\"\n   [(set_attr \"length\" \"16\")\n    (set_attr \"type\" \"cwb\")])"}, {"sha": "d03dcf2f82807336cf1ccb3bfd0f8b3767e9c08b", "filename": "gcc/config/sh/sh.opt", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc557046cf483336163ef64cec26db7a767e56a3/gcc%2Fconfig%2Fsh%2Fsh.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc557046cf483336163ef64cec26db7a767e56a3/gcc%2Fconfig%2Fsh%2Fsh.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.opt?ref=dc557046cf483336163ef64cec26db7a767e56a3", "patch": "@@ -268,6 +268,10 @@ mindexed-addressing\n Target Report Mask(ALLOW_INDEXED_ADDRESS) Condition(SUPPORT_ANY_SH5_32MEDIA)\n Enable the use of the indexed addressing mode for SHmedia32/SHcompact\n \n+minline-ic_invalidate\n+Target Report Var(TARGET_INLINE_IC_INVALIDATE)\n+inline code to invalidate instruction cache entries after setting up nested function trampolines\n+\n minvalid-symbols\n Target Report Mask(INVALID_SYMBOLS) Condition(SUPPORT_ANY_SH5)\n Assume symbols might be invalid\n@@ -316,7 +320,7 @@ Cost to assume for a multiply insn\n \n musermode\n Target Report RejectNegative Mask(USERMODE)\n-Generate library function call to invalidate instruction cache entries after fixing trampoline\n+Don't generate privileged-mode only code; implies -mno-inline-ic_invalidate if the inline code would not work in user mode.\n \n ;; We might want to enable this by default for TARGET_HARD_SH4, because\n ;; zero-offset branches have zero latency.  Needs some benchmarking."}, {"sha": "4f9934b27cce2e94bdc238580beafbed44150e70", "filename": "gcc/config/sh/t-sh", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc557046cf483336163ef64cec26db7a767e56a3/gcc%2Fconfig%2Fsh%2Ft-sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc557046cf483336163ef64cec26db7a767e56a3/gcc%2Fconfig%2Fsh%2Ft-sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Ft-sh?ref=dc557046cf483336163ef64cec26db7a767e56a3", "patch": "@@ -7,6 +7,7 @@ LIB1ASMFUNCS = _ashiftrt _ashiftrt_n _ashiftlt _lshiftrt _movmem \\\n   _movmem_i4 _mulsi3 _sdivsi3 _sdivsi3_i4 _udivsi3 _udivsi3_i4 _set_fpscr \\\n   _div_table _udiv_qrnnd_16 \\\n   $(LIB1ASMFUNCS_CACHE)\n+LIB1ASMFUNCS_CACHE = _ic_invalidate _ic_invalidate_array\n \n # We want fine grained libraries, so use the new code to build the\n # floating point emulation libraries."}, {"sha": "36da6d571f02cebb1d1e6c4aeafd1de7260873a7", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc557046cf483336163ef64cec26db7a767e56a3/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc557046cf483336163ef64cec26db7a767e56a3/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=dc557046cf483336163ef64cec26db7a767e56a3", "patch": "@@ -709,7 +709,7 @@ See RS/6000 and PowerPC Options.\n -m5-compact  -m5-compact-nofpu @gol\n -mb  -ml  -mdalign  -mrelax @gol\n -mbigtable  -mfmovd  -mhitachi -mrenesas -mno-renesas -mnomacsave @gol\n--mieee  -misize  -mpadstruct  -mspace @gol\n+-mieee  -misize  -minline-ic_invalidate -mpadstruct  -mspace @gol\n -mprefergot  -musermode -multcost=@var{number} -mdiv=@var{strategy} @gol\n -mdivsi3_libfunc=@var{name}  @gol\n -madjust-unroll -mindexed-addressing -mgettrcost=@var{number} -mpt-fixed @gol\n@@ -12458,6 +12458,19 @@ comparisons of NANs / infinities incurs extra overhead in every\n floating point comparison, therefore the default is set to\n @option{-ffinite-math-only}.\n \n+@item -minline-ic_invalidate\n+@opindex minline-ic_invalidate\n+Inline code to invalidate instruction cache entries after setting up\n+nested function trampolines.\n+This option has no effect if -musermode is in effect and the selected\n+code generation option (e.g. -m4) does not allow the use of the icbi\n+instruction.\n+If the selected code generation option does not allow the use of the icbi\n+instruction, and -musermode is not in effect, the inlined code will\n+manipulate the instruction cache address array directly with an associative\n+write.  This not only requires privileged mode, but it will also\n+fail if the cache line had been mapped via the TLB and has become unmapped.\n+\n @item -misize\n @opindex misize\n Dump instruction size and location in the assembly code.\n@@ -12478,10 +12491,9 @@ the Global Offset Table instead of the Procedure Linkage Table.\n \n @item -musermode\n @opindex musermode\n-Generate a library function call to invalidate instruction cache\n-entries, after fixing up a trampoline.  This library function call\n-doesn't assume it can write to the whole memory address space.  This\n-is the default when the target is @code{sh-*-linux*}.\n+Don't generate privileged mode only code; implies -mno-inline-ic_invalidate\n+if the inlined code would not work in user mode.\n+This is the default when the target is @code{sh-*-linux*}.\n \n @item -multcost=@var{number}\n @opindex multcost=@var{number}"}]}