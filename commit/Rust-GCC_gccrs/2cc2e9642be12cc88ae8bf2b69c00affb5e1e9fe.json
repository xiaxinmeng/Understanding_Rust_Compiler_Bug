{"sha": "2cc2e9642be12cc88ae8bf2b69c00affb5e1e9fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmNjMmU5NjQyYmUxMmNjODhhZThiZjJiNjljMDBhZmZiNWUxZTlmZQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-05-02T10:10:01Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-05-02T10:10:01Z"}, "message": "[multiple changes]\n\n2016-05-02  Gary Dismukes  <dismukes@adacore.com>\n\n\t* exp_ch5.adb, exp_ch7.adb, exp_ch7.ads, checks.adb, sem_attr.adb,\n\tgnat1drv.adb, sem_ch4.adb, sem_ch13.adb: Minor reformatting and typo\n\tfixes.\n\t* sem_prag.adb, sem_ch12.adb: Minor typo fixes.\n\n2016-05-02  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch6.adb (Make_Build_In_Place_Call_In_Allocator): The\n\tfunction call may be wrapped in an explicit type conversion.\n\n2016-05-02  Jerome Lambourg  <lambourg@adacore.com>\n\n\t* interfac.ads: use pragma No_Elaboration_Code_All.\n\t* s-unstyp.ads: s-unstyp.ads: use pragma No_Elaboration_Code_All.\n\n2016-05-02  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem.adb (Analyze: If node is an error node previously created\n\tby the parser, disable expansion to prevent subsequent glitches\n\tin error recovery.\n\nFrom-SVN: r235736", "tree": {"sha": "7202b177596c943e3df1aa040bb132d8e4085915", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7202b177596c943e3df1aa040bb132d8e4085915"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2cc2e9642be12cc88ae8bf2b69c00affb5e1e9fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cc2e9642be12cc88ae8bf2b69c00affb5e1e9fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2cc2e9642be12cc88ae8bf2b69c00affb5e1e9fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cc2e9642be12cc88ae8bf2b69c00affb5e1e9fe/comments", "author": null, "committer": null, "parents": [{"sha": "08e5cf22522a870f0de5be947f1494b4b63f33ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08e5cf22522a870f0de5be947f1494b4b63f33ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08e5cf22522a870f0de5be947f1494b4b63f33ad"}], "stats": {"total": 117, "additions": 73, "deletions": 44}, "files": [{"sha": "7116d1d0a81bb8305cdf3d410ccf2fb52301ef41", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc2e9642be12cc88ae8bf2b69c00affb5e1e9fe/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc2e9642be12cc88ae8bf2b69c00affb5e1e9fe/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=2cc2e9642be12cc88ae8bf2b69c00affb5e1e9fe", "patch": "@@ -1,3 +1,26 @@\n+2016-05-02  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* exp_ch5.adb, exp_ch7.adb, exp_ch7.ads, checks.adb, sem_attr.adb,\n+\tgnat1drv.adb, sem_ch4.adb, sem_ch13.adb: Minor reformatting and typo\n+\tfixes.\n+\t* sem_prag.adb, sem_ch12.adb: Minor typo fixes.\n+\n+2016-05-02  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch6.adb (Make_Build_In_Place_Call_In_Allocator): The\n+\tfunction call may be wrapped in an explicit type conversion.\n+\n+2016-05-02  Jerome Lambourg  <lambourg@adacore.com>\n+\n+\t* interfac.ads: use pragma No_Elaboration_Code_All.\n+\t* s-unstyp.ads: s-unstyp.ads: use pragma No_Elaboration_Code_All.\n+\n+2016-05-02  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem.adb (Analyze: If node is an error node previously created\n+\tby the parser, disable expansion to prevent subsequent glitches\n+\tin error recovery.\n+\n 2016-05-02  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* sem_ch13.adb (Alignment_Error): Removed."}, {"sha": "ed0a0adb10f90ddd165a0b8032045164b1bc456c", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc2e9642be12cc88ae8bf2b69c00affb5e1e9fe/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc2e9642be12cc88ae8bf2b69c00affb5e1e9fe/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=2cc2e9642be12cc88ae8bf2b69c00affb5e1e9fe", "patch": "@@ -2713,7 +2713,7 @@ package body Checks is\n                  Make_Predicate_Check\n                    (Typ, New_Occurrence_Of (Entity (N), Sloc (N))));\n \n-            --  If the expression is not an entity it may have side-effects,\n+            --  If the expression is not an entity it may have side effects,\n             --  and the following call will create an object declaration for\n             --  it. We disable checks during its analysis, to prevent an\n             --  infinite recursion.\n@@ -6195,8 +6195,8 @@ package body Checks is\n       --  twice (once for the check, once for the actual reference). Such a\n       --  double evaluation is always a potential source of inefficiency, and\n       --  is functionally incorrect in the volatile case, or when the prefix\n-      --  may have side-effects. A non-volatile entity or a component of a\n-      --  non-volatile entity requires no evaluation.\n+      --  may have side effects. A nonvolatile entity or a component of a\n+      --  nonvolatile entity requires no evaluation.\n \n       if Is_Entity_Name (Pref) then\n          if Treat_As_Volatile (Entity (Pref)) then\n@@ -6418,7 +6418,7 @@ package body Checks is\n                   Set_Do_Range_Check (Sub, False);\n \n                   --  Force evaluation except for the case of a simple name of\n-                  --  a non-volatile entity.\n+                  --  a nonvolatile entity.\n \n                   if not Is_Entity_Name (Sub)\n                     or else Treat_As_Volatile (Entity (Sub))"}, {"sha": "2a3ecbfe39bc5a0fa949089ee14a5c369b38a60f", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc2e9642be12cc88ae8bf2b69c00affb5e1e9fe/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc2e9642be12cc88ae8bf2b69c00affb5e1e9fe/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=2cc2e9642be12cc88ae8bf2b69c00affb5e1e9fe", "patch": "@@ -2017,7 +2017,7 @@ package body Exp_Ch5 is\n       --  Ada 2012 (AI05-148): Update current accessibility level if Rhs is a\n       --  stand-alone obj of an anonymous access type. Do not install the check\n       --  when the Lhs denotes a container cursor and the Next function employs\n-      --  an access type because this may never result in a dangling pointer.\n+      --  an access type, because this can never result in a dangling pointer.\n \n       if Is_Access_Type (Typ)\n         and then Is_Entity_Name (Lhs)"}, {"sha": "8d0b96309fe98b02cf0be3e789e28f7f1bf4ec38", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc2e9642be12cc88ae8bf2b69c00affb5e1e9fe/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc2e9642be12cc88ae8bf2b69c00affb5e1e9fe/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=2cc2e9642be12cc88ae8bf2b69c00affb5e1e9fe", "patch": "@@ -7241,6 +7241,7 @@ package body Exp_Ch6 is\n \n       if Nkind_In (Func_Call,\n                    N_Qualified_Expression,\n+                   N_Type_Conversion,\n                    N_Unchecked_Type_Conversion)\n       then\n          Func_Call := Expression (Func_Call);"}, {"sha": "a166b80b12a85992e5eb31c7a3a8fe6d271f5773", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc2e9642be12cc88ae8bf2b69c00affb5e1e9fe/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc2e9642be12cc88ae8bf2b69c00affb5e1e9fe/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=2cc2e9642be12cc88ae8bf2b69c00affb5e1e9fe", "patch": "@@ -625,7 +625,7 @@ package body Exp_Ch7 is\n \n          --  Associate the anonymous master with the designated type. This\n          --  ensures that any additional anonymous access types with the same\n-         --  designated type will share the same anonymous paster within the\n+         --  designated type will share the same anonymous master within the\n          --  same unit.\n \n          Set_Anonymous_Master (Desig_Typ, FM_Id);\n@@ -2409,7 +2409,7 @@ package body Exp_Ch7 is\n \n          Init_Typ : Entity_Id;\n          --  The initialization type of the related object declaration. Note\n-         --  that this is not necessarely the same type as Obj_Typ because of\n+         --  that this is not necessarily the same type as Obj_Typ because of\n          --  possible type derivations.\n \n          Obj_Typ : Entity_Id;"}, {"sha": "b12af836f63f2ff28d3dc4ccf90ab0547ebcf200", "filename": "gcc/ada/exp_ch7.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc2e9642be12cc88ae8bf2b69c00affb5e1e9fe/gcc%2Fada%2Fexp_ch7.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc2e9642be12cc88ae8bf2b69c00affb5e1e9fe/gcc%2Fada%2Fexp_ch7.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.ads?ref=2cc2e9642be12cc88ae8bf2b69c00affb5e1e9fe", "patch": "@@ -109,7 +109,7 @@ package Exp_Ch7 is\n       Context_Scope  : Entity_Id := Empty;\n       Insertion_Node : Node_Id   := Empty);\n    --  Build a finalization master for an access type. The designated type may\n-   --  not necessarely be controlled or need finalization actions depending on\n+   --  not necessarily be controlled or need finalization actions depending on\n    --  the context. Flag For_Lib_Level must be set when creating a master for a\n    --  build-in-place function call access result type. Flag For_Private must\n    --  be set when the designated type contains a private component. Parameters"}, {"sha": "02950a5992655940372a2bc493d23f707271ad62", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc2e9642be12cc88ae8bf2b69c00affb5e1e9fe/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc2e9642be12cc88ae8bf2b69c00affb5e1e9fe/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=2cc2e9642be12cc88ae8bf2b69c00affb5e1e9fe", "patch": "@@ -96,10 +96,10 @@ procedure Gnat1drv is\n    --  Kind of main compilation unit node\n \n    Back_End_Mode : Back_End.Back_End_Mode_Type;\n-   --  Record back end mode\n+   --  Record back-end mode\n \n    procedure Adjust_Global_Switches;\n-   --  There are various interactions between front end switch settings,\n+   --  There are various interactions between front-end switch settings,\n    --  including debug switch settings and target dependent parameters.\n    --  This procedure takes care of properly handling these interactions.\n    --  We do it after scanning out all the switches, so that we are not\n@@ -350,7 +350,7 @@ procedure Gnat1drv is\n          Force_ALI_Tree_File := True;\n          Try_Semantics := True;\n \n-         --  Make the Ada front-end more liberal so that the compiler will\n+         --  Make the Ada front end more liberal so that the compiler will\n          --  allow illegal code that is allowed by other compilers. CodePeer\n          --  is in the business of finding problems, not enforcing rules.\n          --  This is useful when using CodePeer mode with other compilers.\n@@ -527,7 +527,7 @@ procedure Gnat1drv is\n          Ttypes.Bytes_Big_Endian := not Ttypes.Bytes_Big_Endian;\n       end if;\n \n-      --  Activate front end layout if debug flag -gnatdF is set\n+      --  Activate front-end layout if debug flag -gnatdF is set\n \n       if Debug_Flag_FF then\n          Targparm.Frontend_Layout_On_Target := True;\n@@ -668,31 +668,31 @@ procedure Gnat1drv is\n          Front_End_Inlining := AAMP_On_Target or Generate_C_Code;\n       end if;\n \n-      --  Set back end inlining indication\n+      --  Set back-end inlining indication\n \n       Back_End_Inlining :=\n \n-        --  No back end inlining available on AAMP\n+        --  No back-end inlining available on AAMP\n \n         not AAMP_On_Target\n \n-        --  No back end inlining available on C generation\n+        --  No back-end inlining available on C generation\n \n         and then not Generate_C_Code\n \n-        --  No back end inlining in GNATprove mode, since it just confuses\n+        --  No back-end inlining in GNATprove mode, since it just confuses\n         --  the formal verification process.\n \n         and then not GNATprove_Mode\n \n-        --  No back end inlining if front end inlining explicitly enabled.\n+        --  No back-end inlining if front-end inlining explicitly enabled.\n         --  Done to minimize the output differences to customers still using\n         --  this deprecated switch; in addition, this behavior reduces the\n         --  output differences in old tests.\n \n         and then not Front_End_Inlining\n \n-        --  Back end inlining is disabled if debug flag .z is set\n+        --  Back-end inlining is disabled if debug flag .z is set\n \n         and then not Debug_Flag_Dot_Z;\n \n@@ -1318,13 +1318,13 @@ begin\n       --  as indicated by Back_Annotate_Rep_Info being set to True.\n \n       --  We don't call for annotations on a subunit, because to process those\n-      --  the back-end requires that the parent(s) be properly compiled.\n+      --  the back end requires that the parent(s) be properly compiled.\n \n       --  Annotation is suppressed for targets where front-end layout is\n       --  enabled, because the front end determines representations.\n \n-      --  The back-end is not invoked in ASIS mode with GNSA because all type\n-      --  representation information will be provided by the GNSA back-end, not\n+      --  The back end is not invoked in ASIS mode with GNSA because all type\n+      --  representation information will be provided by the GNSA back end, not\n       --  gigi.\n \n       if Back_End_Mode = Declarations_Only"}, {"sha": "3bda2f4665185354dabca9bae09b9f2d677f9c78", "filename": "gcc/ada/interfac.ads", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc2e9642be12cc88ae8bf2b69c00affb5e1e9fe/gcc%2Fada%2Finterfac.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc2e9642be12cc88ae8bf2b69c00affb5e1e9fe/gcc%2Fada%2Finterfac.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finterfac.ads?ref=2cc2e9642be12cc88ae8bf2b69c00affb5e1e9fe", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2002-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2002-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -36,6 +36,7 @@\n pragma Compiler_Unit_Warning;\n \n package Interfaces is\n+   pragma No_Elaboration_Code_All;\n    pragma Pure;\n \n    --  All identifiers in this unit are implementation defined"}, {"sha": "9a02704485ded24c2163efdf77d92d7416b1b959", "filename": "gcc/ada/s-unstyp.ads", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc2e9642be12cc88ae8bf2b69c00affb5e1e9fe/gcc%2Fada%2Fs-unstyp.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc2e9642be12cc88ae8bf2b69c00affb5e1e9fe/gcc%2Fada%2Fs-unstyp.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-unstyp.ads?ref=2cc2e9642be12cc88ae8bf2b69c00affb5e1e9fe", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -39,6 +39,7 @@ pragma Compiler_Unit_Warning;\n \n package System.Unsigned_Types is\n    pragma Pure;\n+   pragma No_Elaboration_Code_All;\n \n    type Short_Short_Unsigned is mod 2 ** Short_Short_Integer'Size;\n    type Short_Unsigned       is mod 2 ** Short_Integer'Size;"}, {"sha": "3cd073082a9023fb27eb049d79fc2b38ac15d9d5", "filename": "gcc/ada/sem.adb", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc2e9642be12cc88ae8bf2b69c00affb5e1e9fe/gcc%2Fada%2Fsem.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc2e9642be12cc88ae8bf2b69c00affb5e1e9fe/gcc%2Fada%2Fsem.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem.adb?ref=2cc2e9642be12cc88ae8bf2b69c00affb5e1e9fe", "patch": "@@ -618,8 +618,11 @@ package body Sem is\n \n          --  A call to analyze the error node is simply ignored, to avoid\n          --  causing cascaded errors (happens of course only in error cases)\n+         --  Disable expansion in case it is still enabled, to prevent other\n+         --  subsequent compiler glitches.\n \n          when N_Error =>\n+            Expander_Mode_Save_And_Set (False);\n             null;\n \n          --  Push/Pop nodes normally don't come through an analyze call. An"}, {"sha": "30d33d213e2a85e51aa59e72efbc180860588519", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc2e9642be12cc88ae8bf2b69c00affb5e1e9fe/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc2e9642be12cc88ae8bf2b69c00affb5e1e9fe/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=2cc2e9642be12cc88ae8bf2b69c00affb5e1e9fe", "patch": "@@ -4975,9 +4975,9 @@ package body Sem_Attr is\n             --  and does not suffer from the out-of-order issue described\n             --  above. Thus, this expansion is skipped in SPARK mode.\n \n-            --  THe expansion is not relevant for discrete types, that will\n-            --  not generate extra declarations, and where use of the base\n-            --  type may lead to spurious errors if context is a case.\n+            --  The expansion is not relevant for discrete types, which will\n+            --  not generate extra declarations, and where use of the base type\n+            --  may lead to spurious errors if context is a case.\n \n             if not GNATprove_Mode then\n                if not Is_Discrete_Type (Pref_Typ) then"}, {"sha": "04b7fb4d3928db87143728ed9a954efe7b8cdd2f", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc2e9642be12cc88ae8bf2b69c00affb5e1e9fe/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc2e9642be12cc88ae8bf2b69c00affb5e1e9fe/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=2cc2e9642be12cc88ae8bf2b69c00affb5e1e9fe", "patch": "@@ -7908,7 +7908,7 @@ package body Sem_Ch12 is\n       end loop;\n \n       --  Expanded code usually shares the source location of the original\n-      --  construct it was generated for. This however may not necessarely\n+      --  construct it was generated for. This however may not necessarily\n       --  reflect the true location of the code within the tree.\n \n       --  Before comparing the slocs of the two nodes, make sure that we are"}, {"sha": "2354cde9e01d8aacc2f04f91fbc9c5fd6b84acd9", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc2e9642be12cc88ae8bf2b69c00affb5e1e9fe/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc2e9642be12cc88ae8bf2b69c00affb5e1e9fe/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=2cc2e9642be12cc88ae8bf2b69c00affb5e1e9fe", "patch": "@@ -5023,7 +5023,7 @@ package body Sem_Ch13 is\n                --  Tagged type case, check for attempt to set alignment to a\n                --  value greater than Max_Align, and reset if so. This error\n                --  is suppressed in ASIS mode to allow for different ASIS\n-               --  back-ends or ASIS-based tools to query the illegal clause.\n+               --  back ends or ASIS-based tools to query the illegal clause.\n \n                if Is_Tagged_Type (U_Ent)\n                  and then Align > Max_Align\n@@ -5465,7 +5465,7 @@ package body Sem_Ch13 is\n                   Set_Machine_Radix_10 (U_Ent);\n \n                --  The following error is suppressed in ASIS mode to allow for\n-               --  different ASIS back-ends or ASIS-based tools to query the\n+               --  different ASIS back ends or ASIS-based tools to query the\n                --  illegal clause.\n \n                elsif not ASIS_Mode then\n@@ -5497,7 +5497,7 @@ package body Sem_Ch13 is\n                Check_Size (Expr, U_Ent, Size, Biased);\n \n                --  The following errors are suppressed in ASIS mode to allow\n-               --  for different ASIS back-ends or ASIS-based tools to query\n+               --  for different ASIS back ends or ASIS-based tools to query\n                --  the illegal clause.\n \n                if ASIS_Mode then\n@@ -5714,7 +5714,7 @@ package body Sem_Ch13 is\n \n                else\n                   --  The following error is suppressed in ASIS mode to allow\n-                  --  for different ASIS back-ends or ASIS-based tools to query\n+                  --  for different ASIS back ends or ASIS-based tools to query\n                   --  the illegal clause.\n \n                   if Is_Elementary_Type (Etyp)\n@@ -6044,7 +6044,7 @@ package body Sem_Ch13 is\n             elsif Is_Elementary_Type (U_Ent) then\n \n                --  The following errors are suppressed in ASIS mode to allow\n-               --  for different ASIS back-ends or ASIS-based tools to query\n+               --  for different ASIS back ends or ASIS-based tools to query\n                --  the illegal clause.\n \n                if ASIS_Mode then\n@@ -10902,7 +10902,7 @@ package body Sem_Ch13 is\n       procedure Size_Too_Small_Error (Min_Siz : Uint) is\n       begin\n          --  This error is suppressed in ASIS mode to allow for different ASIS\n-         --  back-ends or ASIS-based tools to query the illegal clause.\n+         --  back ends or ASIS-based tools to query the illegal clause.\n \n          if not ASIS_Mode then\n             Error_Msg_Uint_1 := Min_Siz;\n@@ -11560,7 +11560,7 @@ package body Sem_Ch13 is\n       elsif Align <= 0 then\n \n          --  This error is suppressed in ASIS mode to allow for different ASIS\n-         --  back-ends or ASIS-based tools to query the illegal clause.\n+         --  back ends or ASIS-based tools to query the illegal clause.\n \n          if not ASIS_Mode then\n             Error_Msg_N (\"alignment value must be positive\", Expr);\n@@ -11579,7 +11579,7 @@ package body Sem_Ch13 is\n                if M > Align then\n \n                   --  This error is suppressed in ASIS mode to allow for\n-                  --  different ASIS back-ends or ASIS-based tools to query the\n+                  --  different ASIS back ends or ASIS-based tools to query the\n                   --  illegal clause.\n \n                   if not ASIS_Mode then\n@@ -14206,7 +14206,7 @@ package body Sem_Ch13 is\n                                  Target   => Target,\n                                  Act_Unit => Act_Unit));\n \n-         --  If both sizes are known statically now, then back end annotation\n+         --  If both sizes are known statically now, then back-end annotation\n          --  is not required to do a proper check but if either size is not\n          --  known statically, then we need the annotation.\n "}, {"sha": "c867cf64b8710640522a0293a2460a3aaf5c7d4c", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc2e9642be12cc88ae8bf2b69c00affb5e1e9fe/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc2e9642be12cc88ae8bf2b69c00affb5e1e9fe/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=2cc2e9642be12cc88ae8bf2b69c00affb5e1e9fe", "patch": "@@ -7469,7 +7469,7 @@ package body Sem_Ch4 is\n             Subp_Id  : Entity_Id;\n \n          begin\n-            --  Ensure that the routine is not called with itypes which lack a\n+            --  Ensure that the routine is not called with itypes, which lack a\n             --  declarative node.\n \n             pragma Assert (Present (Typ_Decl));\n@@ -7526,7 +7526,7 @@ package body Sem_Ch4 is\n             Param_Typ  : Node_Id;\n \n          begin\n-            --  The classify as a suitable candidate, the subprogram must be a\n+            --  To classify as a suitable candidate, the subprogram must be a\n             --  function whose name matches the argument of aspect Constant or\n             --  Variable_Indexing.\n \n@@ -7667,12 +7667,12 @@ package body Sem_Ch4 is\n          C_Type := Etype (Base_Type (C_Type));\n       end if;\n \n-      --  Check whether type the has a specified indexing aspect\n+      --  Check whether the type has a specified indexing aspect\n \n       Func_Name := Empty;\n \n-      --  The context is suitable for constant indexing, obtain the name of the\n-      --  indexing function from aspect Constant_Indexing.\n+      --  The context is suitable for constant indexing, so obtain the name of\n+      --  the indexing function from aspect Constant_Indexing.\n \n       if Constant_Indexing_OK then\n          Func_Name :="}, {"sha": "e22d7987c423469e16de5bf89581c346128c897e", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc2e9642be12cc88ae8bf2b69c00affb5e1e9fe/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc2e9642be12cc88ae8bf2b69c00affb5e1e9fe/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=2cc2e9642be12cc88ae8bf2b69c00affb5e1e9fe", "patch": "@@ -466,7 +466,7 @@ package body Sem_Prag is\n \n       --  Set the Ghost mode in effect from the pragma. Due to the delayed\n       --  analysis of the pragma, the Ghost mode at point of declaration and\n-      --  point of analysis may not necessarely be the same. Use the mode in\n+      --  point of analysis may not necessarily be the same. Use the mode in\n       --  effect at the point of declaration.\n \n       Set_Ghost_Mode (N);\n@@ -2658,7 +2658,7 @@ package body Sem_Prag is\n \n       --  Set the Ghost mode in effect from the pragma. Due to the delayed\n       --  analysis of the pragma, the Ghost mode at point of declaration and\n-      --  point of analysis may not necessarely be the same. Use the mode in\n+      --  point of analysis may not necessarily be the same. Use the mode in\n       --  effect at the point of declaration.\n \n       Set_Ghost_Mode (N);\n@@ -23297,7 +23297,7 @@ package body Sem_Prag is\n \n       --  Set the Ghost mode in effect from the pragma. Due to the delayed\n       --  analysis of the pragma, the Ghost mode at point of declaration and\n-      --  point of analysis may not necessarely be the same. Use the mode in\n+      --  point of analysis may not necessarily be the same. Use the mode in\n       --  effect at the point of declaration.\n \n       Set_Ghost_Mode (N);"}]}