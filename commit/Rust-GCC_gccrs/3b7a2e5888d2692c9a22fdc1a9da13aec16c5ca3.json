{"sha": "3b7a2e5888d2692c9a22fdc1a9da13aec16c5ca3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2I3YTJlNTg4OGQyNjkyYzlhMjJmZGMxYTlkYTEzYWVjMTZjNWNhMw==", "commit": {"author": {"name": "Jan van Male", "email": "jan.vanmale@fenk.wau.nl", "date": "2000-11-10T05:56:47Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2000-11-10T05:56:47Z"}, "message": "c-tree.texi: Fix typos.\n\n2000-11-08  Jan van Male  <jan.vanmale@fenk.wau.nl>\n\n        * c-tree.texi: Fix typos.\n        * extend.texi: Likewise\n        * gcov.texi: Likewise\n        * rtl.texi: Likewise\n        * tm.texi: Likewise\n\nFrom-SVN: r37362", "tree": {"sha": "ce2b19e057159534f26cc78cbd1292e3689e3d22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce2b19e057159534f26cc78cbd1292e3689e3d22"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b7a2e5888d2692c9a22fdc1a9da13aec16c5ca3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b7a2e5888d2692c9a22fdc1a9da13aec16c5ca3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b7a2e5888d2692c9a22fdc1a9da13aec16c5ca3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b7a2e5888d2692c9a22fdc1a9da13aec16c5ca3/comments", "author": null, "committer": null, "parents": [{"sha": "59257980609435f68235bfb911ace85fa40215fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59257980609435f68235bfb911ace85fa40215fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59257980609435f68235bfb911ace85fa40215fa"}], "stats": {"total": 50, "additions": 29, "deletions": 21}, "files": [{"sha": "b8625b7691a3fcff5ff0bb234ddc4f09eaa35714", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b7a2e5888d2692c9a22fdc1a9da13aec16c5ca3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b7a2e5888d2692c9a22fdc1a9da13aec16c5ca3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3b7a2e5888d2692c9a22fdc1a9da13aec16c5ca3", "patch": "@@ -1,3 +1,11 @@\n+2000-11-09  Jan van Male  <jan.vanmale@fenk.wau.nl>\n+\n+        * c-tree.texi: Fix typos.\n+        * extend.texi: Likewise\n+        * gcov.texi: Likewise\n+        * rtl.texi: Likewise\n+        * tm.texi: Likewise\n+\n 2000-11-09  Hans-Peter Nilsson  <hp@axis.com>\n \n \t* c-lex.c [! NO_IMPLICIT_EXTERN_C] (cb_enter_file): Check"}, {"sha": "8f00e8c79f1a5c3f356c9bc13bbdf020aced1405", "filename": "gcc/c-tree.texi", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b7a2e5888d2692c9a22fdc1a9da13aec16c5ca3/gcc%2Fc-tree.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b7a2e5888d2692c9a22fdc1a9da13aec16c5ca3/gcc%2Fc-tree.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.texi?ref=3b7a2e5888d2692c9a22fdc1a9da13aec16c5ca3", "patch": "@@ -578,7 +578,7 @@ more information, see @pxref{Classes}.\n \n @item UNKNOWN_TYPE\n This node is used to represent a type the knowledge of which is\n-unsufficiant for a sound processing.\n+insufficient for a sound processing.\n \n @item OFFSET_TYPE\n This node is used to represent a data member; for example a\n@@ -1066,7 +1066,7 @@ An @code{OVERLOAD} node is not a declaration, so none of the\n @code{OVERLOAD} node in the list of overloaded functions.  The macros\n @code{OVL_CURRENT} and @code{OVL_NEXT} are actually polymorphic; you can\n use them to work with @code{FUNCTION_DECL} nodes as well as with\n-overlods.  In the case of a @code{FUNCTION_DECL}, @code{OVL_CURRENT}\n+overloads.  In the case of a @code{FUNCTION_DECL}, @code{OVL_CURRENT}\n will always return the function itself, and @code{OVL_NEXT} will always\n be @code{NULL_TREE}.\n \n@@ -1087,13 +1087,13 @@ the @code{DECL_REAL_CONTEXT} for @code{f} will be the\n @code{RECORD_TYPE} for @code{C}.\n \n The @code{DECL_REAL_CONTEXT} and @code{DECL_CLASS_CONTEXT} are not\n-availble in C; instead you should simply use @code{DECL_CONTEXT}.  In C,\n+available in C; instead you should simply use @code{DECL_CONTEXT}.  In C,\n the @code{DECL_CONTEXT} for a function maybe another function.  This\n representation indicates that the GNU nested function extension is in\n use.  For details on the semantics of nested functions, see the GCC\n Manual.  The nested function can refer to local variables in its\n containing function.  Such references are not explicitly marked in the\n-tree sturcture; back-ends must look at the @code{DECL_CONTEXT} for the\n+tree structure; back-ends must look at the @code{DECL_CONTEXT} for the\n referenced @code{VAR_DECL}.  If the @code{DECL_CONTEXT} for the\n referenced @code{VAR_DECL} is not the same as the function currently\n being processed, and neither @code{DECL_EXTERNAL} nor @code{DECL_STATIC}\n@@ -1125,7 +1125,7 @@ function, and the back-end must take appropriate action.\n @findex DECL_DESTRUCTOR_P\n @findex DECL_OVERLOADED_OPERATOR_P\n @findex DECL_CONV_FN_P\n-@findex DECL_ARTIFIICIAL\n+@findex DECL_ARTIFICIAL\n @findex DECL_GLOBAL_CTOR_P\n @findex DECL_GLOBAL_DTOR_P\n @findex GLOBAL_INIT_PRIORITY\n@@ -1222,7 +1222,7 @@ This macro holds if the function is a destructor.\n \n @item DECL_COMPLETE_DESTRUCTOR_P\n This predicate holds if the function is the destructor for an object a\n-complet type.\n+complete type.\n \n @item DECL_OVERLOADED_OPERATOR_P\n This macro holds if the function is an overloaded operator.\n@@ -1652,7 +1652,7 @@ as if the @code{SCOPE_STMT} were not present at all.\n These statements represent the location to which control is transferred\n when an exception is thrown.  The @code{START_CATCH_TYPE} is the type of\n exception that will be caught by this handler; it is equal (by pointer\n-equalit) to @code{CATCH_ALL_TYPE} if this handler is for all types.\n+equality) to @code{CATCH_ALL_TYPE} if this handler is for all types.\n \n @item SUBOBJECT\n \n@@ -2120,7 +2120,7 @@ always be present in the internal representation.\n @item CALL_EXPR\n These nodes are used to represent calls to functions, including\n non-static member functions.  The first operand is a pointer to the\n-function to call; it is always an expresion whose type is a\n+function to call; it is always an expression whose type is a\n @code{POINTER_TYPE}.  The second argument is a @code{TREE_LIST}.  The\n arguments to the call appear left-to-right in the list.  The\n @code{TREE_VALUE} of each list node contains the expression\n@@ -2176,7 +2176,7 @@ non-zero, then the loop should be exited.  An @code{EXIT_EXPR} will only\n appear within a @code{LOOP_EXPR}.\n \n @item CLEANUP_POINT_EXPR\n-These nodes represent full-expressions.  The single oeprand is an\n+These nodes represent full-expressions.  The single operand is an\n expression to evaluate.  Any destructor calls engendered by the creation\n of temporaries during the evaluation of that expression should be\n performed immediately after the expression is evaluated.\n@@ -2209,7 +2209,7 @@ storage is initialized to zero.\n A @code{SAVE_EXPR} represents an expression (possibly involving\n side-effects) that is used more than once.  The side-effects should\n occur only the first time the expression is evaluated.  Subsequent uses\n-should juse reuse the computed value.  The first operand to the\n+should just reuse the computed value.  The first operand to the\n @code{SAVE_EXPR} is the expression to evaluate.  The side-effects should\n be executed where the @code{SAVE_EXPR} is first encountered in a\n depth-first preorder traversal of the expression tree."}, {"sha": "351954c3582bff7939e2076d67c224e1f4505c0e", "filename": "gcc/extend.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b7a2e5888d2692c9a22fdc1a9da13aec16c5ca3/gcc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b7a2e5888d2692c9a22fdc1a9da13aec16c5ca3/gcc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fextend.texi?ref=3b7a2e5888d2692c9a22fdc1a9da13aec16c5ca3", "patch": "@@ -853,7 +853,7 @@ decimal notation, such as @code{1.55e1}, but also numbers such as\n @code{0x1.fp3} written in hexadecimal format.  In that format the\n @code{0x} hex introducer and the @code{p} or @code{P} exponent field are\n mandatory.  The exponent is a decimal number that indicates the power of\n-2 by which the significand part will be multiplied.  Thus @code{0x1.f} is\n+2 by which the significant part will be multiplied.  Thus @code{0x1.f} is\n 1 15/16, @code{p3} multiplies it by 8, and the value of @code{0x1.fp3}\n is the same as @code{1.55e1}.\n \n@@ -2702,7 +2702,7 @@ region.\n \n An @code{asm} instruction without any operands or clobbers (and ``old\n style'' @code{asm}) will not be deleted or moved significantly,\n-regardless, unless it is unreachable, the same wasy as if you had\n+regardless, unless it is unreachable, the same way as if you had\n written a @code{volatile} keyword.\n \n Note that even a volatile @code{asm} instruction can be moved in ways"}, {"sha": "e5131ce4a85d7301bf263558b871317048f700b5", "filename": "gcc/gcov.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b7a2e5888d2692c9a22fdc1a9da13aec16c5ca3/gcc%2Fgcov.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b7a2e5888d2692c9a22fdc1a9da13aec16c5ca3/gcc%2Fgcov.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov.texi?ref=3b7a2e5888d2692c9a22fdc1a9da13aec16c5ca3", "patch": "@@ -217,7 +217,7 @@ For a call, if it was executed at least once, then a percentage\n indicating the number of times the call returned divided by the number\n of times the call was executed will be printed.  This will usually be\n 100%, but may be less for functions call @code{exit} or @code{longjmp},\n-and thus may not return everytime they are called.\n+and thus may not return every time they are called.\n \n The execution counts are cumulative.  If the example program were\n executed again without removing the @code{.da} file, the count for the\n@@ -336,7 +336,7 @@ The format of the @code{.da} file is fairly simple.  The first 8-byte\n number is the number of counts in the file, followed by the counts\n (stored as 8-byte numbers).  Each count corresponds to the number of\n times each arc in the program is executed.  The counts are cumulative;\n-each time the program is executed, it attemps to combine the existing\n+each time the program is executed, it attempts to combine the existing\n @code{.da} files with the new counts for this invocation of the\n program.  It ignores the contents of any @code{.da} files whose number of\n arcs doesn't correspond to the current program, and merely overwrites"}, {"sha": "958ff73ceb378973cbcfc4ec6d0e69cddf263748", "filename": "gcc/rtl.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b7a2e5888d2692c9a22fdc1a9da13aec16c5ca3/gcc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b7a2e5888d2692c9a22fdc1a9da13aec16c5ca3/gcc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.texi?ref=3b7a2e5888d2692c9a22fdc1a9da13aec16c5ca3", "patch": "@@ -2210,7 +2210,7 @@ expressions and so is @var{base}.  The mode @var{m} specifies how much\n space is given to each address-difference.  @var{min} and @var{max}\n are set up by branch shortening and hold a label with a minimum and a\n maximum address, respectively.  @var{flags} indicates the relative\n-position of @var{base}, @var{min} and @var{max} to the cointaining insn\n+position of @var{base}, @var{min} and @var{max} to the containing insn\n and of @var{min} and @var{max} to @var{base}.  See rtl.def for details.@refill\n @end table\n \n@@ -2915,7 +2915,7 @@ probability that the branch will be taken.\n @findex REG_BR_PRED\n @item REG_BR_PRED\n These notes are found in JUMP insns after delayed branch scheduling\n-has taken place.  They indicate both the direction and the likelyhood\n+has taken place.  They indicate both the direction and the likelihood\n of the JUMP.  The format is a bitmask of ATTR_FLAG_* values.\n \n @findex REG_FRAME_RELATED_EXPR"}, {"sha": "9f443b6d5880747b461f2f4a52ddc71f905579db", "filename": "gcc/tm.texi", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b7a2e5888d2692c9a22fdc1a9da13aec16c5ca3/gcc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b7a2e5888d2692c9a22fdc1a9da13aec16c5ca3/gcc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftm.texi?ref=3b7a2e5888d2692c9a22fdc1a9da13aec16c5ca3", "patch": "@@ -6017,7 +6017,7 @@ correct for most systems.\n @findex ASM_OUTPUT_DEF_FROM_DECLS\n @item ASM_OUTPUT_DEF_FROM_DECLS (@var{stream}, @var{decl_of_name}, @var{decl_of_value})\n A C statement to output to the stdio stream @var{stream} assembler code\n-which defines (equates) the symbol whoes tree node is @var{decl_of_name}\n+which defines (equates) the symbol whose tree node is @var{decl_of_name}\n to have the value of the tree node @var{decl_of_value}.  This macro will\n be used in preference to @samp{ASM_OUTPUT_DEF} if it is defined and if\n the tree nodes are available.\n@@ -6276,7 +6276,7 @@ This is like @code{ASM_OUTPUT_CONSTRUCTOR} but used for termination\n functions rather than initialization functions.\n \n When @code{ASM_OUTPUT_CONSTRUCTOR} and @code{ASM_OUTPUT_DESTRUCTOR} are\n-defined, the initializaiton routine generated for the generated object\n+defined, the initialization routine generated for the generated object\n file will have static linkage.\n @end table\n \n@@ -6490,11 +6490,11 @@ files can define these macros differently.\n \n @item ASM_FPRINTF_EXTENSIONS(@var{file}, @var{argptr}, @var{format})\n @findex ASM_FPRINTF_EXTENSIONS\n-If defiend this macro should expand to a series of @code{case}\n+If defined this macro should expand to a series of @code{case}\n statements which will be parsed inside the @code{switch} statement of\n the @code{asm_fprintf} function.  This allows targets to define extra\n printf formats which may useful when generating their assembler\n-statements.  Noet that upper case letters are reserved for future\n+statements.  Note that upper case letters are reserved for future\n generic extensions to asm_fprintf, and so are not available to target\n specific code.  The output file is given by the parameter @var{file}.\n The varargs input pointer is @var{argptr} and the rest of the format\n@@ -7865,7 +7865,7 @@ The primary reason to define this macro is to provide compatibility with\n other compilers for the same target.  In general, we discourage\n definition of target-specific pragmas for GCC.\n \n-If the pragma can be implemented by atttributes then the macro\n+If the pragma can be implemented by attributes then the macro\n @samp{INSERT_ATTRIBUTES} might be a useful one to define as well.\n \n Preprocessor macros that appear on pragma lines are not expanded.  All"}]}