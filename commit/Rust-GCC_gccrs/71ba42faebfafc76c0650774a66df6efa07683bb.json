{"sha": "71ba42faebfafc76c0650774a66df6efa07683bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzFiYTQyZmFlYmZhZmM3NmMwNjUwNzc0YTY2ZGY2ZWZhMDc2ODNiYg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2008-09-13T21:39:44Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2008-09-13T21:39:44Z"}, "message": "re PR middle-end/32581 (make profiledbootstrap - stageprofile - gcc/ada/a-except.adb:1301: error: control flow in the middle of basic block 20)\n\n\tPR middle-end/32581\n\t* tree-profile.c (add_abnormal_goto_call_edges): New function.\n\t(tree_gen_interval_profiler, tree_gen_pow2_profiler,\n\ttree_gen_one_value_profiler, tree_gen_average_profiler,\n\ttree_gen_ic_func_profiler, tree_gen_ior_profiler): Use it.\n\nFrom-SVN: r140349", "tree": {"sha": "97a3cbb787754f48e7868c06c9bac3e7fb3b3fa6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97a3cbb787754f48e7868c06c9bac3e7fb3b3fa6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/71ba42faebfafc76c0650774a66df6efa07683bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71ba42faebfafc76c0650774a66df6efa07683bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71ba42faebfafc76c0650774a66df6efa07683bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71ba42faebfafc76c0650774a66df6efa07683bb/comments", "author": null, "committer": null, "parents": [{"sha": "80cab2f00f15d8e04e946f5c536825be2865ba89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80cab2f00f15d8e04e946f5c536825be2865ba89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80cab2f00f15d8e04e946f5c536825be2865ba89"}], "stats": {"total": 40, "additions": 34, "deletions": 6}, "files": [{"sha": "3020ade01867585d6e986422e054c4a2b10e8c66", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71ba42faebfafc76c0650774a66df6efa07683bb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71ba42faebfafc76c0650774a66df6efa07683bb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=71ba42faebfafc76c0650774a66df6efa07683bb", "patch": "@@ -1,3 +1,11 @@\n+2008-09-13  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR middle-end/32581\n+\t* tree-profile.c (add_abnormal_goto_call_edges): New function.\n+\t(tree_gen_interval_profiler, tree_gen_pow2_profiler,\n+\ttree_gen_one_value_profiler, tree_gen_average_profiler,\n+\ttree_gen_ic_func_profiler, tree_gen_ior_profiler): Use it.\n+\n 2008-09-13  Jan Hubicka  <jh@suse.cz>\n \n \t* i386.c (ix86_expand_movmem, ix86_expand_movstr): Avoid processing too"}, {"sha": "4467668a8858632e7af13b0f5081987d1d38bfb9", "filename": "gcc/tree-profile.c", "status": "modified", "additions": 26, "deletions": 6, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71ba42faebfafc76c0650774a66df6efa07683bb/gcc%2Ftree-profile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71ba42faebfafc76c0650774a66df6efa07683bb/gcc%2Ftree-profile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-profile.c?ref=71ba42faebfafc76c0650774a66df6efa07683bb", "patch": "@@ -162,6 +162,20 @@ tree_init_edge_profiler (void)\n     }\n }\n \n+/* New call was added, make goto call edges if neccesary.  */\n+\n+static void\n+add_abnormal_goto_call_edges (gimple_stmt_iterator gsi)\n+{\n+  gimple stmt = gsi_stmt (gsi);\n+\n+  if (!stmt_can_make_abnormal_goto (stmt))\n+    return;\n+  if (!gsi_end_p (gsi))\n+    split_block (gimple_bb (stmt), stmt);\n+  make_abnormal_goto_edges (gimple_bb (stmt), true);\n+}\n+\n /* Output instructions as GIMPLE trees to increment the edge \n    execution count, and insert them on E.  We rely on \n    gsi_insert_on_edge to preserve the order.  */\n@@ -221,7 +235,8 @@ tree_gen_interval_profiler (histogram_value value, unsigned tag, unsigned base)\n   val = prepare_instrumented_value (&gsi, value);\n   call = gimple_build_call (tree_interval_profiler_fn, 4,\n \t\t\t    ref_ptr, val, start, steps);\n-  gsi_insert_before (&gsi, call, GSI_SAME_STMT);\n+  gsi_insert_before (&gsi, call, GSI_NEW_STMT);\n+  add_abnormal_goto_call_edges (gsi);\n }\n \n /* Output instructions as GIMPLE trees to increment the power of two histogram \n@@ -241,7 +256,8 @@ tree_gen_pow2_profiler (histogram_value value, unsigned tag, unsigned base)\n \t\t\t\t      true, NULL_TREE, true, GSI_SAME_STMT);\n   val = prepare_instrumented_value (&gsi, value);\n   call = gimple_build_call (tree_pow2_profiler_fn, 2, ref_ptr, val);\n-  gsi_insert_before (&gsi, call, GSI_SAME_STMT);\n+  gsi_insert_before (&gsi, call, GSI_NEW_STMT);\n+  add_abnormal_goto_call_edges (gsi);\n }\n \n /* Output instructions as GIMPLE trees for code to find the most common value.\n@@ -261,7 +277,8 @@ tree_gen_one_value_profiler (histogram_value value, unsigned tag, unsigned base)\n \t\t\t\t      true, NULL_TREE, true, GSI_SAME_STMT);\n   val = prepare_instrumented_value (&gsi, value);\n   call = gimple_build_call (tree_one_value_profiler_fn, 2, ref_ptr, val);\n-  gsi_insert_before (&gsi, call, GSI_SAME_STMT);\n+  gsi_insert_before (&gsi, call, GSI_NEW_STMT);\n+  add_abnormal_goto_call_edges (gsi);\n }\n \n \n@@ -340,9 +357,10 @@ tree_gen_ic_func_profiler (void)\n \t\t\t\t cur_func,\n \t\t\t\t ic_void_ptr_var);\n       gsi_insert_after (&gsi, stmt1, GSI_NEW_STMT);\n-\n       gcc_assert (EDGE_COUNT (bb->succs) == 1);\n       bb = split_edge (EDGE_I (bb->succs, 0));\n+      add_abnormal_goto_call_edges (gsi);\n+\n       gsi = gsi_start_bb (bb);\n       /* Set __gcov_indirect_call_callee to 0,\n          so that calls from other modules won't get misattributed\n@@ -388,7 +406,8 @@ tree_gen_average_profiler (histogram_value value, unsigned tag, unsigned base)\n \t\t\t\t      true, GSI_SAME_STMT);\n   val = prepare_instrumented_value (&gsi, value);\n   call = gimple_build_call (tree_average_profiler_fn, 2, ref_ptr, val);\n-  gsi_insert_before (&gsi, call, GSI_SAME_STMT);\n+  gsi_insert_before (&gsi, call, GSI_NEW_STMT);\n+  add_abnormal_goto_call_edges (gsi);\n }\n \n /* Output instructions as GIMPLE trees to increment the ior histogram \n@@ -408,7 +427,8 @@ tree_gen_ior_profiler (histogram_value value, unsigned tag, unsigned base)\n \t\t\t\t      true, NULL_TREE, true, GSI_SAME_STMT);\n   val = prepare_instrumented_value (&gsi, value);\n   call = gimple_build_call (tree_ior_profiler_fn, 2, ref_ptr, val);\n-  gsi_insert_before (&gsi, call, GSI_SAME_STMT);\n+  gsi_insert_before (&gsi, call, GSI_NEW_STMT);\n+  add_abnormal_goto_call_edges (gsi);\n }\n \n /* Return 1 if tree-based profiling is in effect, else 0."}]}