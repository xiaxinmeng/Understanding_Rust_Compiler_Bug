{"sha": "b7d36ea3cc8cc960b98f307bcdb04f66085b9c2b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjdkMzZlYTNjYzhjYzk2MGI5OGYzMDdiY2RiMDRmNjYwODViOWMyYg==", "commit": {"author": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2008-05-12T15:51:27Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2008-05-12T15:51:27Z"}, "message": "re PR fortran/36176 (TRANSFER of constant substrings)\n\n\tPR fortran/36176\n\n\t* target-memory.c (gfc_target_expr_size): Correctly treat\n\tsubstrings.\n\t(gfc_target_encode_expr): Likewise.\n\t(gfc_interpret_complex): Whitespace change.\n\n\t* gfortran.dg/transfer_simplify_9.f90: New test.\n\nFrom-SVN: r135219", "tree": {"sha": "5cc5b357fbf51b4b18e5cd513be7ec28038ff595", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5cc5b357fbf51b4b18e5cd513be7ec28038ff595"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b7d36ea3cc8cc960b98f307bcdb04f66085b9c2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7d36ea3cc8cc960b98f307bcdb04f66085b9c2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7d36ea3cc8cc960b98f307bcdb04f66085b9c2b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7d36ea3cc8cc960b98f307bcdb04f66085b9c2b/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d2f0ecd61495161034a7c24de59af5025b298e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d2f0ecd61495161034a7c24de59af5025b298e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d2f0ecd61495161034a7c24de59af5025b298e2"}], "stats": {"total": 78, "additions": 70, "deletions": 8}, "files": [{"sha": "05563105cde45d93890efe9d99bef38c53c699b4", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7d36ea3cc8cc960b98f307bcdb04f66085b9c2b/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7d36ea3cc8cc960b98f307bcdb04f66085b9c2b/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=b7d36ea3cc8cc960b98f307bcdb04f66085b9c2b", "patch": "@@ -1,3 +1,11 @@\n+2008-05-12  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/36176\n+\t* target-memory.c (gfc_target_expr_size): Correctly treat\n+\tsubstrings.\n+\t(gfc_target_encode_expr): Likewise.\n+\t(gfc_interpret_complex): Whitespace change.\n+\n 2008-05-11  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/35719"}, {"sha": "389e2a539178b416fb90da617d33eb4fb29e19e8", "filename": "gcc/fortran/target-memory.c", "status": "modified", "additions": 32, "deletions": 6, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7d36ea3cc8cc960b98f307bcdb04f66085b9c2b/gcc%2Ffortran%2Ftarget-memory.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7d36ea3cc8cc960b98f307bcdb04f66085b9c2b/gcc%2Ffortran%2Ftarget-memory.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftarget-memory.c?ref=b7d36ea3cc8cc960b98f307bcdb04f66085b9c2b", "patch": "@@ -100,7 +100,16 @@ gfc_target_expr_size (gfc_expr *e)\n     case BT_LOGICAL:\n       return size_logical (e->ts.kind);\n     case BT_CHARACTER:\n-      return size_character (e->value.character.length, e->ts.kind);\n+      if (e->expr_type == EXPR_SUBSTRING && e->ref)\n+        {\n+          int start, end;\n+\n+          gfc_extract_int (e->ref->u.ss.start, &start);\n+          gfc_extract_int (e->ref->u.ss.end, &end);\n+          return size_character (MAX(end - start + 1, 0), e->ts.kind);\n+        }\n+      else\n+        return size_character (e->value.character.length, e->ts.kind);\n     case BT_HOLLERITH:\n       return e->representation.length;\n     case BT_DERIVED:\n@@ -231,7 +240,8 @@ gfc_target_encode_expr (gfc_expr *source, unsigned char *buffer,\n     return encode_array (source, buffer, buffer_size);\n \n   gcc_assert (source->expr_type == EXPR_CONSTANT\n-\t      || source->expr_type == EXPR_STRUCTURE);\n+\t      || source->expr_type == EXPR_STRUCTURE\n+\t      || source->expr_type == EXPR_SUBSTRING);\n \n   /* If we already have a target-memory representation, we use that rather \n      than recreating one.  */\n@@ -257,9 +267,24 @@ gfc_target_encode_expr (gfc_expr *source, unsigned char *buffer,\n       return encode_logical (source->ts.kind, source->value.logical, buffer,\n \t\t\t     buffer_size);\n     case BT_CHARACTER:\n-      return encode_character (source->ts.kind, source->value.character.length,\n-\t\t\t       source->value.character.string, buffer,\n-\t\t\t       buffer_size);\n+      if (source->expr_type == EXPR_CONSTANT || source->ref == NULL)\n+\treturn encode_character (source->ts.kind,\n+\t\t\t\t source->value.character.length,\n+\t\t\t         source->value.character.string, buffer,\n+\t\t\t         buffer_size);\n+      else\n+\t{\n+\t  int start, end;\n+\n+\t  gcc_assert (source->expr_type == EXPR_SUBSTRING);\n+\t  gfc_extract_int (source->ref->u.ss.start, &start);\n+\t  gfc_extract_int (source->ref->u.ss.end, &end);\n+\t  return encode_character (source->ts.kind,\n+\t\t\t\t   MAX(end - start + 1, 0),\n+\t\t\t\t   &source->value.character.string[start-1],\n+\t\t\t\t   buffer, buffer_size);\n+\t}\n+\n     case BT_DERIVED:\n       return encode_derived (source, buffer, buffer_size);\n     default:\n@@ -342,7 +367,8 @@ gfc_interpret_complex (int kind, unsigned char *buffer, size_t buffer_size,\n {\n   int size;\n   size = gfc_interpret_float (kind, &buffer[0], buffer_size, real);\n-  size += gfc_interpret_float (kind, &buffer[size], buffer_size - size, imaginary);\n+  size += gfc_interpret_float (kind, &buffer[size], buffer_size - size,\n+\t\t\t       imaginary);\n   return size;\n }\n "}, {"sha": "182f0494d752b58c0e19202621cf97d8e7e9e031", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7d36ea3cc8cc960b98f307bcdb04f66085b9c2b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7d36ea3cc8cc960b98f307bcdb04f66085b9c2b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b7d36ea3cc8cc960b98f307bcdb04f66085b9c2b", "patch": "@@ -1,7 +1,12 @@\n+2008-05-12  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/36176\n+\t* gfortran.dg/transfer_simplify_9.f90: New test.\n+\n 2008-05-12  Paolo Carlini  <paolo.carlini@oracle.com>\n \n-        PR c++/35331\n-        * g++.dg/cpp0x/vt-35331.C: New.\t\n+\tPR c++/35331\n+\t* g++.dg/cpp0x/vt-35331.C: New.\t\n \t* g++.dg/cpp0x/pr32125.C: Adjust.\n \t* g++.dg/cpp0x/pr32126.C: Likewise.\n \t* g++.dg/cpp0x/pr31438.C: Likewise."}, {"sha": "02b86111b2b09b41fc3958b5e4b8bfb96007f234", "filename": "gcc/testsuite/gfortran.dg/transfer_simplify_9.f90", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7d36ea3cc8cc960b98f307bcdb04f66085b9c2b/gcc%2Ftestsuite%2Fgfortran.dg%2Ftransfer_simplify_9.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7d36ea3cc8cc960b98f307bcdb04f66085b9c2b/gcc%2Ftestsuite%2Fgfortran.dg%2Ftransfer_simplify_9.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftransfer_simplify_9.f90?ref=b7d36ea3cc8cc960b98f307bcdb04f66085b9c2b", "patch": "@@ -0,0 +1,23 @@\n+! { dg-do run }\n+!\n+! Various checks on simplification of TRANSFER of substrings\n+  character(len=4), parameter :: t = \"xyzt\"\n+  integer, parameter :: w = transfer(t,0)\n+  integer :: i = 1\n+  if (transfer(t,0) /= w) call abort\n+  if (transfer(t(:),0) /= w) call abort\n+  if (transfer(t(1:4),0) /= w) call abort\n+  if (transfer(t(i:i+3),0) /= w) call abort\n+\n+  if (transfer(t(1:1), 0_1) /= transfer(\"x\", 0_1)) call abort\n+  if (transfer(t(2:2), 0_1) /= transfer(\"y\", 0_1)) call abort\n+  if (transfer(t(i:i), 0_1) /= transfer(\"x\", 0_1)) call abort\n+  if (transfer(t(i+1:i+1), 0_1) /= transfer(\"y\", 0_1)) call abort\n+  if (transfer(t(1:2), 0_2) /= transfer(\"xy\", 0_2)) call abort\n+  if (transfer(t(3:4), 0_2) /= transfer(\"zt\", 0_2)) call abort\n+\n+  if (transfer(transfer(-1, t), 0) /= -1) call abort\n+  if (transfer(transfer(-1, t(:)), 0) /= -1) call abort\n+  if (any (transfer(transfer(-1, (/t(1:1)/)), (/0_1/)) /= -1)) call abort\n+  if (transfer(transfer(-1, t(1:1)), 0_1) /= -1) call abort\n+  end"}]}