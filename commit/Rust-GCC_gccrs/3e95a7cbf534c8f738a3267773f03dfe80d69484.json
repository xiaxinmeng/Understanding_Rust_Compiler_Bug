{"sha": "3e95a7cbf534c8f738a3267773f03dfe80d69484", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2U5NWE3Y2JmNTM0YzhmNzM4YTMyNjc3NzNmMDNkZmU4MGQ2OTQ4NA==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-07-20T23:02:36Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-07-20T23:02:36Z"}, "message": "rtl.h (plus_constant): Delete.\n\n\t* rtl.h (plus_constant): Delete.\n\t(plus_constant_wide): Rename to plus_constant.\n\t(plus_constant_for_output_wide): Delete vestigial prototype.\n\t(GEN_INT): Remove unnecessary cast.\n\t* tree.h (build_int_2, size_int_type): Delete.\n\t(build_int_2_wide): Rename to build_int_2.\n\t(size_int_wide): Rename to size_int_kind.\n\t(size_int_type_wide): Rename to size_int_type.\n\t(size_int, ssize_int, bitsize_int, sbitsize_int): Use size_int_kind.\n\tRemove unnecessary cast.\n\t* tree.c (build_int_2_wide): Rename build_int_2; update comment.\n\t* explow.c (plus_constant_wide): Rename plus_constant; update comment.\n\t* fold-const.c (size_int_wide): Rename size_int_kind. Use size_int_type.\n\t(size_int_type_wide): Rename size_int_type.\n\t(int_const_binop): Use size_int_type.\n\t* c-lex.c (interpret_integer): Use build_int_2.\n\t* final.c (split_double): Remove unnecessary casts.\n\t* tree-ssa-ccp.c (maybe_fold_offset_to_array_ref): Use build_int_2.\n\nFrom-SVN: r84976", "tree": {"sha": "6d50b755c8622194a6e194950e1a5674f3ccffd4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d50b755c8622194a6e194950e1a5674f3ccffd4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e95a7cbf534c8f738a3267773f03dfe80d69484", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e95a7cbf534c8f738a3267773f03dfe80d69484", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e95a7cbf534c8f738a3267773f03dfe80d69484", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e95a7cbf534c8f738a3267773f03dfe80d69484/comments", "author": null, "committer": null, "parents": [{"sha": "14797075918d654f5af84c932568b9e18613ba39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14797075918d654f5af84c932568b9e18613ba39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14797075918d654f5af84c932568b9e18613ba39"}], "stats": {"total": 86, "additions": 47, "deletions": 39}, "files": [{"sha": "8d590738379daa27d6ac174b5ead8fb094a75a2b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e95a7cbf534c8f738a3267773f03dfe80d69484/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e95a7cbf534c8f738a3267773f03dfe80d69484/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3e95a7cbf534c8f738a3267773f03dfe80d69484", "patch": "@@ -1,3 +1,24 @@\n+2004-07-20  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* rtl.h (plus_constant): Delete.\n+\t(plus_constant_wide): Rename to plus_constant.\n+\t(plus_constant_for_output_wide): Delete vestigial prototype.\n+\t(GEN_INT): Remove unnecessary cast.\n+\t* tree.h (build_int_2, size_int_type): Delete.\n+\t(build_int_2_wide): Rename to build_int_2.\n+\t(size_int_wide): Rename to size_int_kind.\n+\t(size_int_type_wide): Rename to size_int_type.\n+\t(size_int, ssize_int, bitsize_int, sbitsize_int): Use size_int_kind.\n+\tRemove unnecessary cast.\n+\t* tree.c (build_int_2_wide): Rename build_int_2; update comment.\n+\t* explow.c (plus_constant_wide): Rename plus_constant; update comment.\n+\t* fold-const.c (size_int_wide): Rename size_int_kind. Use size_int_type.\n+\t(size_int_type_wide): Rename size_int_type.\n+\t(int_const_binop): Use size_int_type.\n+\t* c-lex.c (interpret_integer): Use build_int_2.\n+\t* final.c (split_double): Remove unnecessary casts.\n+\t* tree-ssa-ccp.c (maybe_fold_offset_to_array_ref): Use build_int_2.\n+\n 2004-07-20  Richard Henderson  <rth@redhat.com>\n \n \t* gimplify.c (is_gimple_tmp_var): Move to tree-gimple.c.\n@@ -185,7 +206,7 @@\n \n \t* tree-ssa-dom.c (single_incoming_edge_ignoring_loop_edges): New.\n \t(get_eq_expr_value): Use it.  Simplify slightly.\n- \n+\n 2004-07-19  Maciej W. Rozycki  <macro@linux-mips.org>\n \n \t* config/mips/mips.md (mulsidi3_32bit_r4000): Fix the clobber list.\n@@ -238,7 +259,7 @@\n \t* config/s390/s390.c (regclass_map initializer): Register 35 added to\n \tADDR_REGS.\n \t(load_multiple_operation, store_multiple_operation): Removed\n-\tpointless sanity check. \n+\tpointless sanity check.\n \t(s390_decompose_address): Added check for return_address_pointer_rtx.\n \t(s390_return_addr_rtx): Use return_address_pointer_rtx for count == 0.\n \t(s390_return_address_offset): New function.\n@@ -269,7 +290,7 @@\n 2004-07-19  Gabriel Dos Reis  <gdr@integrable-solution.net>\n \n \t* doc/sourcebuild.texi: Add libcpp, now that CPP has its own\n-\tdirectory. \n+\tdirectory.\n \n 2004-07-19  Joseph S. Myers  <jsm@polyomino.org.uk>\n "}, {"sha": "843162a5ff92c1c458b60a3ba90b6fe12dec55df", "filename": "gcc/c-lex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e95a7cbf534c8f738a3267773f03dfe80d69484/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e95a7cbf534c8f738a3267773f03dfe80d69484/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=3e95a7cbf534c8f738a3267773f03dfe80d69484", "patch": "@@ -521,7 +521,7 @@ interpret_integer (const cpp_token *token, unsigned int flags)\n \n   integer = cpp_interpret_integer (parse_in, token, flags);\n   integer = cpp_num_sign_extend (integer, options->precision);\n-  value = build_int_2_wide (integer.low, integer.high);\n+  value = build_int_2 (integer.low, integer.high);\n \n   /* The type of a constant with a U suffix is straightforward.  */\n   if (flags & CPP_N_UNSIGNED)"}, {"sha": "208d7093b2595668be28542da2618b10c87815cc", "filename": "gcc/explow.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e95a7cbf534c8f738a3267773f03dfe80d69484/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e95a7cbf534c8f738a3267773f03dfe80d69484/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=3e95a7cbf534c8f738a3267773f03dfe80d69484", "patch": "@@ -71,12 +71,10 @@ trunc_int_for_mode (HOST_WIDE_INT c, enum machine_mode mode)\n   return c;\n }\n \n-/* Return an rtx for the sum of X and the integer C.\n-\n-   This function should be used via the `plus_constant' macro.  */\n+/* Return an rtx for the sum of X and the integer C.  */\n \n rtx\n-plus_constant_wide (rtx x, HOST_WIDE_INT c)\n+plus_constant (rtx x, HOST_WIDE_INT c)\n {\n   RTX_CODE code;\n   rtx y;"}, {"sha": "abc07c50c8e81e7e9136030468d3dd719ae6bcff", "filename": "gcc/final.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e95a7cbf534c8f738a3267773f03dfe80d69484/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e95a7cbf534c8f738a3267773f03dfe80d69484/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=3e95a7cbf534c8f738a3267773f03dfe80d69484", "patch": "@@ -3665,8 +3665,8 @@ split_double (rtx value, rtx *first, rtx *second)\n \t}\n #endif\n \n-      *first = GEN_INT ((HOST_WIDE_INT) l[0]);\n-      *second = GEN_INT ((HOST_WIDE_INT) l[1]);\n+      *first = GEN_INT (l[0]);\n+      *second = GEN_INT (l[1]);\n     }\n }\n \f"}, {"sha": "df397f79b4e4d2a1f6298050ed315ce995293db2", "filename": "gcc/fold-const.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e95a7cbf534c8f738a3267773f03dfe80d69484/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e95a7cbf534c8f738a3267773f03dfe80d69484/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=3e95a7cbf534c8f738a3267773f03dfe80d69484", "patch": "@@ -1398,7 +1398,7 @@ int_const_binop (enum tree_code code, tree arg1, tree arg2, int notrunc)\n       && ((hi == 0 && (HOST_WIDE_INT) low >= 0)\n \t  || (hi == -1 && (HOST_WIDE_INT) low < 0))\n       && overflow == 0 && ! TREE_OVERFLOW (arg1) && ! TREE_OVERFLOW (arg2))\n-    return size_int_type_wide (low, type);\n+    return size_int_type (low, type);\n   else\n     {\n       t = build_int_2 (low, hi);\n@@ -1602,9 +1602,9 @@ size_htab_eq (const void *x, const void *y)\n    bits are given by NUMBER and of the sizetype represented by KIND.  */\n \n tree\n-size_int_wide (HOST_WIDE_INT number, enum size_type_kind kind)\n+size_int_kind (HOST_WIDE_INT number, enum size_type_kind kind)\n {\n-  return size_int_type_wide (number, sizetype_tab[(int) kind]);\n+  return size_int_type (number, sizetype_tab[(int) kind]);\n }\n \n /* Likewise, but the desired type is specified explicitly.  */\n@@ -1614,7 +1614,7 @@ static GTY ((if_marked (\"ggc_marked_p\"), param_is (union tree_node)))\n      htab_t size_htab;\n \n tree\n-size_int_type_wide (HOST_WIDE_INT number, tree type)\n+size_int_type (HOST_WIDE_INT number, tree type)\n {\n   void **slot;\n \n@@ -1751,7 +1751,7 @@ fold_convert_const (enum tree_code code, tree type, tree arg1)\n \t  if (TREE_CODE (type) == INTEGER_TYPE && TYPE_IS_SIZETYPE (type)\n \t      && !TREE_CONSTANT_OVERFLOW (arg1)\n \t      && compare_tree_int (arg1, 10000) < 0)\n-\t    return size_int_type_wide (TREE_INT_CST_LOW (arg1), type);\n+\t    return size_int_type (TREE_INT_CST_LOW (arg1), type);\n \n \t  /* Given an integer constant, make new constant with new type,\n \t     appropriately sign-extended or truncated.  */"}, {"sha": "2a8da5b4971888bfdb31ec909f46c3a8a1c7f812", "filename": "gcc/rtl.h", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e95a7cbf534c8f738a3267773f03dfe80d69484/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e95a7cbf534c8f738a3267773f03dfe80d69484/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=3e95a7cbf534c8f738a3267773f03dfe80d69484", "patch": "@@ -1564,17 +1564,14 @@ extern int generating_concat_p;\n /* In expmed.c */\n extern int ceil_log2 (unsigned HOST_WIDE_INT);\n \n-#define plus_constant(X, C) plus_constant_wide ((X), (HOST_WIDE_INT) (C))\n-\n /* In builtins.c */\n extern rtx expand_builtin_expect_jump (tree, rtx, rtx);\n extern void purge_builtin_constant_p (void);\n \n /* In explow.c */\n extern void set_stack_check_libfunc (rtx);\n extern HOST_WIDE_INT trunc_int_for_mode\t(HOST_WIDE_INT, enum machine_mode);\n-extern rtx plus_constant_wide (rtx, HOST_WIDE_INT);\n-extern rtx plus_constant_for_output_wide (rtx, HOST_WIDE_INT);\n+extern rtx plus_constant (rtx, HOST_WIDE_INT);\n extern void optimize_save_area_alloca (void);\n \n /* In emit-rtl.c */\n@@ -2019,9 +2016,7 @@ extern rtx gen_rtx_REG (enum machine_mode, unsigned);\n extern rtx gen_rtx_SUBREG (enum machine_mode, rtx, int);\n extern rtx gen_rtx_MEM (enum machine_mode, rtx);\n \n-/* We need the cast here to ensure that we get the same result both with\n-   and without prototypes.  */\n-#define GEN_INT(N)  gen_rtx_CONST_INT (VOIDmode, (HOST_WIDE_INT) (N))\n+#define GEN_INT(N)  gen_rtx_CONST_INT (VOIDmode, (N))\n \n /* Virtual registers are used during RTL generation to refer to locations into\n    the stack frame when the actual location isn't known until RTL generation"}, {"sha": "377f18b29043ddeb5f9d5e7da53e7a6420c77b5a", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e95a7cbf534c8f738a3267773f03dfe80d69484/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e95a7cbf534c8f738a3267773f03dfe80d69484/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=3e95a7cbf534c8f738a3267773f03dfe80d69484", "patch": "@@ -1551,7 +1551,7 @@ maybe_fold_offset_to_array_ref (tree base, tree offset, tree orig_type)\n \t  || lrem || hrem)\n \treturn NULL_TREE;\n \n-      idx = build_int_2_wide (lquo, hquo);\n+      idx = build_int_2 (lquo, hquo);\n     }\n \n   /* Assume the low bound is zero.  If there is a domain type, get the"}, {"sha": "9122df5437f83384525b8df0199668e72e39f732", "filename": "gcc/tree.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e95a7cbf534c8f738a3267773f03dfe80d69484/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e95a7cbf534c8f738a3267773f03dfe80d69484/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=3e95a7cbf534c8f738a3267773f03dfe80d69484", "patch": "@@ -422,12 +422,10 @@ copy_list (tree list)\n \f\n /* Return a newly constructed INTEGER_CST node whose constant value\n    is specified by the two ints LOW and HI.\n-   The TREE_TYPE is set to `int'.\n-\n-   This function should be used via the `build_int_2' macro.  */\n+   The TREE_TYPE is set to `int'.  */\n \n tree\n-build_int_2_wide (unsigned HOST_WIDE_INT low, HOST_WIDE_INT hi)\n+build_int_2 (unsigned HOST_WIDE_INT low, HOST_WIDE_INT hi)\n {\n   tree t = make_node (INTEGER_CST);\n "}, {"sha": "9a1caf793241179efaeb6bad479c2e17ef15dc81", "filename": "gcc/tree.h", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e95a7cbf534c8f738a3267773f03dfe80d69484/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e95a7cbf534c8f738a3267773f03dfe80d69484/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=3e95a7cbf534c8f738a3267773f03dfe80d69484", "patch": "@@ -2677,9 +2677,6 @@ extern tree maybe_get_identifier (const char *);\n \n /* Construct various types of nodes.  */\n \n-#define build_int_2(LO, HI)  \\\n-  build_int_2_wide ((unsigned HOST_WIDE_INT) (LO), (HOST_WIDE_INT) (HI))\n-\n extern tree build (enum tree_code, tree, ...);\n extern tree build_nt (enum tree_code, ...);\n \n@@ -2707,7 +2704,7 @@ extern tree build4_stat (enum tree_code, tree, tree, tree, tree,\n \t\t\t tree MEM_STAT_DECL);\n #define build4(c,t1,t2,t3,t4,t5) build4_stat (c,t1,t2,t3,t4,t5 MEM_STAT_INFO)\n \n-extern tree build_int_2_wide (unsigned HOST_WIDE_INT, HOST_WIDE_INT);\n+extern tree build_int_2 (unsigned HOST_WIDE_INT, HOST_WIDE_INT);\n extern tree build_vector (tree, tree);\n extern tree build_constructor (tree, tree);\n extern tree build_real_from_int_cst (tree, tree);\n@@ -3049,14 +3046,13 @@ extern GTY(()) tree sizetype_tab[(int) TYPE_KIND_LAST];\n \n extern tree size_binop (enum tree_code, tree, tree);\n extern tree size_diffop (tree, tree);\n-extern tree size_int_wide (HOST_WIDE_INT, enum size_type_kind);\n-extern tree size_int_type_wide (HOST_WIDE_INT, tree);\n-\n-#define size_int_type(L, T) size_int_type_wide ((HOST_WIDE_INT) (L), T)\n-#define size_int(L) size_int_wide ((HOST_WIDE_INT) (L), SIZETYPE)\n-#define ssize_int(L) size_int_wide ((HOST_WIDE_INT) (L), SSIZETYPE)\n-#define bitsize_int(L) size_int_wide ((HOST_WIDE_INT) (L), BITSIZETYPE)\n-#define sbitsize_int(L) size_int_wide ((HOST_WIDE_INT) (L), SBITSIZETYPE)\n+extern tree size_int_kind (HOST_WIDE_INT, enum size_type_kind);\n+extern tree size_int_type (HOST_WIDE_INT, tree);\n+\n+#define size_int(L) size_int_kind (L, SIZETYPE)\n+#define ssize_int(L) size_int_kind (L, SSIZETYPE)\n+#define bitsize_int(L) size_int_kind (L, BITSIZETYPE)\n+#define sbitsize_int(L) size_int_kind (L, SBITSIZETYPE)\n \n extern tree round_up (tree, int);\n extern tree round_down (tree, int);"}]}