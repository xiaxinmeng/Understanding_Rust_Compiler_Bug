{"sha": "6ed7eee30f4c5e7a4ae0119bbc93a1487751cbc7", "node_id": "C_kwDOANBUbNoAKDZlZDdlZWUzMGY0YzVlN2E0YWUwMTE5YmJjOTNhMTQ4Nzc1MWNiYzc", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2022-03-10T11:02:11Z"}, "committer": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2022-10-02T09:12:34Z"}, "message": "Refine guard for vxworks crtstuff spec\n\nWorking on the reintroduction of shared libraries support\n(and of modules depending on shared libraries) exposed a few\ntest failures of simple c++ constructor tests on arm-vxworks7r2.\n\nInvestigation revealed that we were not linking the\ncrtstuff objects as needed from a compiler configured not to\nhave shared libs support, because of the ENABLE_SHARED_LIBGCC\nguard in this piece of vxworks.h:\n\n  /* Setup the crtstuff begin/end we might need for dwarf EH registration\n     and/or INITFINI_ARRAY support for shared libs.  */\n\n  #if (HAVE_INITFINI_ARRAY_SUPPORT && defined(ENABLE_SHARED_LIBGCC)) \\\n      || (DWARF2_UNWIND_INFO && !defined(CONFIG_SJLJ_EXCEPTIONS))\n  #define VX_CRTBEGIN_SPEC \"%{!shared:vx_crtbegin.o%s;:vx_crtbeginS.o%s}\"\n\ncrtstuff initfini array support is meant to be leveraged for\nconstructors regardless of whether the compiler also happens to be\nconfigured with shared library support, so the guard on ENABLE_SHARED_LIBGCC\nhere is inappropriate.\n\nThis change just removes it,\n\n2022-09-30  Olivier Hainque <hainque@adacore.com>\n\ngcc/\n\t* config/vxworks.h (VX_CRTBEGIN_SPEC, VX_CRTEND_SPEC): If\n\tHAVE_INITFINI_ARRAY_SUPPORT, pick crtstuff objects regardless\n\tof ENABLE_SHARED_LIBGCC.", "tree": {"sha": "1f543f951e0223216440a37cc7fe831b763326a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f543f951e0223216440a37cc7fe831b763326a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ed7eee30f4c5e7a4ae0119bbc93a1487751cbc7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ed7eee30f4c5e7a4ae0119bbc93a1487751cbc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ed7eee30f4c5e7a4ae0119bbc93a1487751cbc7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ed7eee30f4c5e7a4ae0119bbc93a1487751cbc7/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3290dcf14994cee3f86abd8cc7d38ddedaaec062", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3290dcf14994cee3f86abd8cc7d38ddedaaec062", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3290dcf14994cee3f86abd8cc7d38ddedaaec062"}], "stats": {"total": 9, "additions": 4, "deletions": 5}, "files": [{"sha": "f2103def448e9ca5ff950dab6330bb9a7be7d3fa", "filename": "gcc/config/vxworks.h", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ed7eee30f4c5e7a4ae0119bbc93a1487751cbc7/gcc%2Fconfig%2Fvxworks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ed7eee30f4c5e7a4ae0119bbc93a1487751cbc7/gcc%2Fconfig%2Fvxworks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvxworks.h?ref=6ed7eee30f4c5e7a4ae0119bbc93a1487751cbc7", "patch": "@@ -120,7 +120,7 @@ along with GCC; see the file COPYING3.  If not see\n      -lc_internal after -lc -lgcc.\n \n    - libc_internal also contains __init/__fini functions for\n-     USE_INITFINI_ARRAY support. However, the system expects these in\n+     INITFINI_ARRAY support. However, the system expects these in\n      every shared lib as well, with slightly different names, and it is\n      simpler for us to provide our own versions through vxcrtstuff.\n \n@@ -225,10 +225,9 @@ along with GCC; see the file COPYING3.  If not see\n #endif\n \n /* Setup the crtstuff begin/end we might need for dwarf EH registration\n-   and/or INITFINI_ARRAY support for shared libs.  */\n-\n-#if (HAVE_INITFINI_ARRAY_SUPPORT && defined(ENABLE_SHARED_LIBGCC)) \\\n-    || (DWARF2_UNWIND_INFO && !defined(CONFIG_SJLJ_EXCEPTIONS))\n+   and/or INITFINI_ARRAY support.  */\n+#if (HAVE_INITFINI_ARRAY_SUPPORT\t\t\t\t\t\\\n+     || (DWARF2_UNWIND_INFO && !defined(CONFIG_SJLJ_EXCEPTIONS)))\n #define VX_CRTBEGIN_SPEC \"%{!shared:vx_crtbegin.o%s;:vx_crtbeginS.o%s}\"\n #define VX_CRTEND_SPEC   \"%{!shared:vx_crtend.o%s;:vx_crtendS.o%s}\"\n #else"}]}