{"sha": "c541d5217e6571a0a5d8bf56db831c1ad63756ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzU0MWQ1MjE3ZTY1NzFhMGE1ZDhiZjU2ZGI4MzFjMWFkNjM3NTZmZg==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2015-08-16T16:37:18Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2015-08-16T16:37:18Z"}, "message": "trans-intrinsic.c (conv_intrinsic_ieee_is_negative): Use type generic BUILT_IN_SIGNBIT.\n\n\t* trans-intrinsic.c (conv_intrinsic_ieee_is_negative): Use type\n\tgeneric BUILT_IN_SIGNBIT.\n\t(conv_intrinsic_ieee_copy_sign): Likewise.\n\t* f95-lang.c (gfc_init_builtin_functions): Add BUILT_IN_ISINF,\n\tBUILT_IN_ISINF_SIGN, BUILT_IN_SIGNBIT, BUILT_IN_ISLESS,\n\tBUILT_IN_ISLESSGREATER, BUILT_IN_ISGREATER. Remove non-type generic\n\tvariants of BUILT_IN_SIGNBIT.\n\t* mathbuiltins.def: Remove SIGNBIT.\n\nFrom-SVN: r226924", "tree": {"sha": "e7f1fbe7cd34b2aaa62a306bea0cee890892570a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e7f1fbe7cd34b2aaa62a306bea0cee890892570a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c541d5217e6571a0a5d8bf56db831c1ad63756ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c541d5217e6571a0a5d8bf56db831c1ad63756ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c541d5217e6571a0a5d8bf56db831c1ad63756ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c541d5217e6571a0a5d8bf56db831c1ad63756ff/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f801fd79aca0090598da27d04506ddc65103443", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f801fd79aca0090598da27d04506ddc65103443", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f801fd79aca0090598da27d04506ddc65103443"}], "stats": {"total": 62, "additions": 36, "deletions": 26}, "files": [{"sha": "4a58499de54a2198a27ca5ed69b261029c760bb9", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c541d5217e6571a0a5d8bf56db831c1ad63756ff/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c541d5217e6571a0a5d8bf56db831c1ad63756ff/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=c541d5217e6571a0a5d8bf56db831c1ad63756ff", "patch": "@@ -1,3 +1,14 @@\n+2015-08-16  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\t* trans-intrinsic.c (conv_intrinsic_ieee_is_negative): Use type\n+\tgeneric BUILT_IN_SIGNBIT.\n+\t(conv_intrinsic_ieee_copy_sign): Likewise.\n+\t* f95-lang.c (gfc_init_builtin_functions): Add BUILT_IN_ISINF,\n+\tBUILT_IN_ISINF_SIGN, BUILT_IN_SIGNBIT, BUILT_IN_ISLESS,\n+\tBUILT_IN_ISLESSGREATER, BUILT_IN_ISGREATER. Remove non-type generic\n+\tvariants of BUILT_IN_SIGNBIT.\n+\t* mathbuiltins.def: Remove SIGNBIT.\n+\n 2015-08-16  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR fortran/41387"}, {"sha": "c42d0ddeba7296ea4f78d62300ad1896f4773f46", "filename": "gcc/fortran/f95-lang.c", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c541d5217e6571a0a5d8bf56db831c1ad63756ff/gcc%2Ffortran%2Ff95-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c541d5217e6571a0a5d8bf56db831c1ad63756ff/gcc%2Ffortran%2Ff95-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ff95-lang.c?ref=c541d5217e6571a0a5d8bf56db831c1ad63756ff", "patch": "@@ -975,37 +975,38 @@ gfc_init_builtin_functions (void)\n   gfc_define_builtin (\"__builtin_realloc\", ftype, BUILT_IN_REALLOC,\n \t\t      \"realloc\", ATTR_NOTHROW_LEAF_LIST);\n \n+  /* Type-generic floating-point classification built-ins.  */\n+\n   ftype = build_function_type_list (integer_type_node,\n                                     void_type_node, NULL_TREE);\n-  gfc_define_builtin (\"__builtin_isnan\", ftype, BUILT_IN_ISNAN,\n-\t\t      \"__builtin_isnan\", ATTR_CONST_NOTHROW_LEAF_LIST);\n   gfc_define_builtin (\"__builtin_isfinite\", ftype, BUILT_IN_ISFINITE,\n \t\t      \"__builtin_isfinite\", ATTR_CONST_NOTHROW_LEAF_LIST);\n+  gfc_define_builtin (\"__builtin_isinf\", ftype, BUILT_IN_ISINF,\n+\t\t      \"__builtin_isinf\", ATTR_CONST_NOTHROW_LEAF_LIST);\n+  gfc_define_builtin (\"__builtin_isinf_sign\", ftype, BUILT_IN_ISINF_SIGN,\n+\t\t      \"__builtin_isinf_sign\", ATTR_CONST_NOTHROW_LEAF_LIST);\n+  gfc_define_builtin (\"__builtin_isnan\", ftype, BUILT_IN_ISNAN,\n+\t\t      \"__builtin_isnan\", ATTR_CONST_NOTHROW_LEAF_LIST);\n   gfc_define_builtin (\"__builtin_isnormal\", ftype, BUILT_IN_ISNORMAL,\n \t\t      \"__builtin_isnormal\", ATTR_CONST_NOTHROW_LEAF_LIST);\n+  gfc_define_builtin (\"__builtin_signbit\", ftype, BUILT_IN_SIGNBIT,\n+\t\t      \"__builtin_signbit\", ATTR_CONST_NOTHROW_LEAF_LIST);\n \n   ftype = build_function_type_list (integer_type_node, void_type_node,\n \t\t\t\t    void_type_node, NULL_TREE);\n-  gfc_define_builtin (\"__builtin_isunordered\", ftype, BUILT_IN_ISUNORDERED,\n-\t\t      \"__builtin_isunordered\", ATTR_CONST_NOTHROW_LEAF_LIST);\n+  gfc_define_builtin (\"__builtin_isless\", ftype, BUILT_IN_ISLESS,\n+\t\t      \"__builtin_isless\", ATTR_CONST_NOTHROW_LEAF_LIST);\n   gfc_define_builtin (\"__builtin_islessequal\", ftype, BUILT_IN_ISLESSEQUAL,\n \t\t      \"__builtin_islessequal\", ATTR_CONST_NOTHROW_LEAF_LIST);\n+  gfc_define_builtin (\"__builtin_islessgreater\", ftype, BUILT_IN_ISLESSGREATER,\n+\t\t      \"__builtin_islessgreater\", ATTR_CONST_NOTHROW_LEAF_LIST);\n+  gfc_define_builtin (\"__builtin_isgreater\", ftype, BUILT_IN_ISGREATER,\n+\t\t      \"__builtin_isgreater\", ATTR_CONST_NOTHROW_LEAF_LIST);\n   gfc_define_builtin (\"__builtin_isgreaterequal\", ftype,\n \t\t      BUILT_IN_ISGREATEREQUAL, \"__builtin_isgreaterequal\",\n \t\t      ATTR_CONST_NOTHROW_LEAF_LIST);\n-\n-  ftype = build_function_type_list (integer_type_node,\n-                                    float_type_node, NULL_TREE); \n-  gfc_define_builtin(\"__builtin_signbitf\", ftype, BUILT_IN_SIGNBITF,\n-\t\t     \"signbitf\", ATTR_CONST_NOTHROW_LEAF_LIST);\n-  ftype = build_function_type_list (integer_type_node,\n-                                    double_type_node, NULL_TREE); \n-  gfc_define_builtin(\"__builtin_signbit\", ftype, BUILT_IN_SIGNBIT,\n-\t\t     \"signbit\", ATTR_CONST_NOTHROW_LEAF_LIST);\n-  ftype = build_function_type_list (integer_type_node,\n-                                    long_double_type_node, NULL_TREE); \n-  gfc_define_builtin(\"__builtin_signbitl\", ftype, BUILT_IN_SIGNBITL,\n-\t\t     \"signbitl\", ATTR_CONST_NOTHROW_LEAF_LIST);\n+  gfc_define_builtin (\"__builtin_isunordered\", ftype, BUILT_IN_ISUNORDERED,\n+\t\t      \"__builtin_isunordered\", ATTR_CONST_NOTHROW_LEAF_LIST);\n \n \n #define DEF_PRIMITIVE_TYPE(ENUM, VALUE) \\"}, {"sha": "5c86f60ee7f91a1fb240df3957d8500d8aab0324", "filename": "gcc/fortran/mathbuiltins.def", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c541d5217e6571a0a5d8bf56db831c1ad63756ff/gcc%2Ffortran%2Fmathbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c541d5217e6571a0a5d8bf56db831c1ad63756ff/gcc%2Ffortran%2Fmathbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmathbuiltins.def?ref=c541d5217e6571a0a5d8bf56db831c1ad63756ff", "patch": "@@ -72,5 +72,4 @@ OTHER_BUILTIN (REMAINDER, \"remainder\", 2,       true)\n OTHER_BUILTIN (RINT,      \"rint\",      1,       true)\n OTHER_BUILTIN (ROUND,     \"round\",     1,       true)\n OTHER_BUILTIN (SCALBN,    \"scalbn\",    scalbn,  true)\n-OTHER_BUILTIN (SIGNBIT,   \"signbit\",   iround,  true)\n OTHER_BUILTIN (TRUNC,     \"trunc\",     1,       true)"}, {"sha": "60e18b8eaf56e55d910fa72f80efe3be00926187", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c541d5217e6571a0a5d8bf56db831c1ad63756ff/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c541d5217e6571a0a5d8bf56db831c1ad63756ff/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=c541d5217e6571a0a5d8bf56db831c1ad63756ff", "patch": "@@ -7417,8 +7417,7 @@ conv_intrinsic_ieee_is_normal (gfc_se * se, gfc_expr * expr)\n static void\n conv_intrinsic_ieee_is_negative (gfc_se * se, gfc_expr * expr)\n {\n-  tree arg, signbit, isnan, decl;\n-  int argprec;\n+  tree arg, signbit, isnan;\n \n   /* Convert arg, evaluate it only once.  */\n   conv_ieee_function_args (se, expr, &arg, 1);\n@@ -7429,9 +7428,9 @@ conv_intrinsic_ieee_is_negative (gfc_se * se, gfc_expr * expr)\n \t\t\t       1, arg);\n   STRIP_TYPE_NOPS (isnan);\n \n-  argprec = TYPE_PRECISION (TREE_TYPE (arg));\n-  decl = builtin_decl_for_precision (BUILT_IN_SIGNBIT, argprec);\n-  signbit = build_call_expr_loc (input_location, decl, 1, arg);\n+  signbit = build_call_expr_loc (input_location,\n+\t\t\t\t builtin_decl_explicit (BUILT_IN_SIGNBIT),\n+\t\t\t\t 1, arg);\n   signbit = fold_build2_loc (input_location, NE_EXPR, boolean_type_node,\n \t\t\t     signbit, integer_zero_node);\n \n@@ -7579,9 +7578,9 @@ conv_intrinsic_ieee_copy_sign (gfc_se * se, gfc_expr * expr)\n   conv_ieee_function_args (se, expr, args, 2);\n \n   /* Get the sign of the second argument.  */\n-  argprec = TYPE_PRECISION (TREE_TYPE (args[1]));\n-  decl = builtin_decl_for_precision (BUILT_IN_SIGNBIT, argprec);\n-  sign = build_call_expr_loc (input_location, decl, 1, args[1]);\n+  sign = build_call_expr_loc (input_location,\n+\t\t\t      builtin_decl_explicit (BUILT_IN_SIGNBIT),\n+\t\t\t      1, args[1]);\n   sign = fold_build2_loc (input_location, NE_EXPR, boolean_type_node,\n \t\t\t  sign, integer_zero_node);\n "}]}