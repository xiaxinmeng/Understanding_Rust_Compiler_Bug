{"sha": "e976a775e259c5a85907a4b4e9a2b707c7ce9cca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTk3NmE3NzVlMjU5YzVhODU5MDdhNGI0ZTlhMmI3MDdjN2NlOWNjYQ==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola.pero@meta-innovation.com", "date": "2010-09-10T09:56:40Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2010-09-10T09:56:40Z"}, "message": "deprecated: New directory.\n\n        * libobjc/objc/deprecated: New directory.\n        * libobjc/objc/deprecated/README: New file.\n        * libobjc/objc/README: New file.\n        * libobjc/objc/typedstream.h: Moved into objc/deprecated/typedstream.h;\n        objc/typedstream.h replaced with a placeholder including the file\n        from the deprecated/ directory.\n        * libobjc/objc/deprecated/objc-unexpected-exception.h: New file with the\n        definition of _objc_unexpected_exception.       \n        * libobjc/objc/objc-api.h: Include deprecated/objc-unexcepted-exception.h\n        instead of defining _objc_unexpected_exception.\n        * libobjc/objc/deprecated/Object.h: New file with the deprecated Object\n        methods in a 'Deprecated' category.\n        * libobjc/objc/Object.h Include deprecated/Object.h instead of defining\n        the deprecated methods.\n        * libobjc/Object.m: Moved deprecated methods into 'Deprecated' category.\n        * libobjc/objc-private: New directory.\n        * libobjc/objc-private/README: New file.\n        * libobjc/Makefile.in (OBJC_DEPRECATED_H): New variable.\n        (install-headers): Create installation directory for\n        OBJC_DEPRECATED_H headers, and install them.\n\nFrom-SVN: r164153", "tree": {"sha": "aecc8134138b797706917530127f1a76bf0da100", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aecc8134138b797706917530127f1a76bf0da100"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e976a775e259c5a85907a4b4e9a2b707c7ce9cca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e976a775e259c5a85907a4b4e9a2b707c7ce9cca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e976a775e259c5a85907a4b4e9a2b707c7ce9cca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e976a775e259c5a85907a4b4e9a2b707c7ce9cca/comments", "author": {"login": "Nico-31415", "id": 94470564, "node_id": "U_kgDOBaGBpA", "avatar_url": "https://avatars.githubusercontent.com/u/94470564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nico-31415", "html_url": "https://github.com/Nico-31415", "followers_url": "https://api.github.com/users/Nico-31415/followers", "following_url": "https://api.github.com/users/Nico-31415/following{/other_user}", "gists_url": "https://api.github.com/users/Nico-31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nico-31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nico-31415/subscriptions", "organizations_url": "https://api.github.com/users/Nico-31415/orgs", "repos_url": "https://api.github.com/users/Nico-31415/repos", "events_url": "https://api.github.com/users/Nico-31415/events{/privacy}", "received_events_url": "https://api.github.com/users/Nico-31415/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1c732eb7229d03addf86b550c8e8c0123d98d729", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c732eb7229d03addf86b550c8e8c0123d98d729", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c732eb7229d03addf86b550c8e8c0123d98d729"}], "stats": {"total": 409, "additions": 244, "deletions": 165}, "files": [{"sha": "9ab7b51c46378807c7afd316e758f4c249dd4049", "filename": "libobjc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e976a775e259c5a85907a4b4e9a2b707c7ce9cca/libobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e976a775e259c5a85907a4b4e9a2b707c7ce9cca/libobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FChangeLog?ref=e976a775e259c5a85907a4b4e9a2b707c7ce9cca", "patch": "@@ -1,3 +1,30 @@\n+2010-09-10  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* objc/deprecated: New directory.\n+\t* objc/deprecated/README: New file.\n+\t* objc/README: New file.\n+\t* objc/typedstream.h: Moved into objc/deprecated/typedstream.h;\n+\tobjc/typedstream.h replaced with a placeholder including the file\n+\tfrom the deprecated/ directory.\n+\t* objc/deprecated/objc-unexpected-exception.h: New file with the\n+\tdefinition of _objc_unexpected_exception.\t\n+\t* objc/objc-api.h: Include deprecated/objc-unexcepted-exception.h\n+\tinstead of defining _objc_unexpected_exception.\n+\t* objc/deprecated/Object.h: New file with the deprecated Object\n+\tmethods in a 'Deprecated' category.\n+\t* objc/Object.h Include deprecated/Object.h instead of defining\n+\tthe deprecated methods.\n+\t* Object.m: Moved deprecated methods into 'Deprecated' category.\n+\t* objc-private: New directory.\n+\t* objc-private/README: New file.\n+\t* Makefile.in (OBJC_DEPRECATED_H): New variable.\n+\t(install-headers): Create installation directory for\n+\tOBJC_DEPRECATED_H headers, and install them.\n+\n+2010-09-10  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* objc/objc-exception.h: Fixed include of objc.h.\n+\t\n 2010-09-08  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* objc/objc-exception.h: New file."}, {"sha": "a47f7ea344b17c9f7f058ad9249aa57ff73d273b", "filename": "libobjc/Makefile.in", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e976a775e259c5a85907a4b4e9a2b707c7ce9cca/libobjc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e976a775e259c5a85907a4b4e9a2b707c7ce9cca/libobjc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FMakefile.in?ref=e976a775e259c5a85907a4b4e9a2b707c7ce9cca", "patch": "@@ -141,12 +141,18 @@ FLAGS_TO_PASS = \\\n all: libobjc$(libsuffix).la $(OBJC_BOEHM_GC)\n \t: $(MAKE) ; exec $(MULTIDO) $(FLAGS_TO_PASS) multi-do DO=all\n \n-# User-visible header files.\n+# User-visible header files, from the objc/ directory\n \n OBJC_H = hash.h objc-list.h sarray.h objc.h objc-api.h objc-exception.h \\\n \t NXConstStr.h Object.h Protocol.h encoding.h typedstream.h \\\n \t thr.h objc-decls.h\n \n+# User-visible header files containing deprecated APIs, from the\n+# objc/deprecated directory\n+\n+OBJC_DEPRECATED_H = Object.h objc-unexpected-exception.h \\\n+                    typedstream.h \n+\n # Modules that comprise the runtime library.\n \n OBJS =    archive.lo class.lo encoding.lo gc.lo hash.lo init.lo linking.lo \\\n@@ -346,6 +352,11 @@ install-headers:\n \t  realfile=$(srcdir)/objc/$${file}; \\\n \t  $(INSTALL_DATA) $${realfile} $(DESTDIR)$(libsubdir)/$(includedirname)/objc; \\\n \tdone\n+\t$(multi_basedir)/mkinstalldirs $(DESTDIR)$(libsubdir)/$(includedirname)/objc/deprecated\n+\tfor file in $(OBJC_DEPRECATED_H); do \\\n+\t  realfile=$(srcdir)/objc/deprecated/$${file}; \\\n+\t  $(INSTALL_DATA) $${realfile} $(DESTDIR)$(libsubdir)/$(includedirname)/objc/deprecated; \\\n+\tdone\n \n check uninstall install-strip dist installcheck installdirs:\n "}, {"sha": "377f0594d1bf8cf92fd58a839b56152f4869d4a1", "filename": "libobjc/Object.m", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e976a775e259c5a85907a4b4e9a2b707c7ce9cca/libobjc%2FObject.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e976a775e259c5a85907a4b4e9a2b707c7ce9cca/libobjc%2FObject.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FObject.m?ref=e976a775e259c5a85907a4b4e9a2b707c7ce9cca", "patch": "@@ -343,6 +343,13 @@ + (int)version\n   class_set_version(self, aVersion);\n   return self;\n }\n+@end\n+\n+/* The following methods were deprecated in GCC 4.6.0 and will be\n+   removed in the next GCC release.\n+*/\n+\n+@implementation Object (Deprecated)\n \n + (int)streamVersion: (TypedStream*)aStream\n {"}, {"sha": "cce1d041675cfa681d9c837556fe721d12243212", "filename": "libobjc/objc-private/README", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e976a775e259c5a85907a4b4e9a2b707c7ce9cca/libobjc%2Fobjc-private%2FREADME", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e976a775e259c5a85907a4b4e9a2b707c7ce9cca/libobjc%2Fobjc-private%2FREADME", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc-private%2FREADME?ref=e976a775e259c5a85907a4b4e9a2b707c7ce9cca", "patch": "@@ -0,0 +1,4 @@\n+This directory contains headers that are private to the runtime and\n+that are only included while the runtime is being compiled.  They are\n+not installed, so developers using the library can't actually even see\n+them."}, {"sha": "e5c32f1447f4f83bfe5552fb07c3e9fafc8a208b", "filename": "libobjc/objc/Object.h", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e976a775e259c5a85907a4b4e9a2b707c7ce9cca/libobjc%2Fobjc%2FObject.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e976a775e259c5a85907a4b4e9a2b707c7ce9cca/libobjc%2Fobjc%2FObject.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2FObject.h?ref=e976a775e259c5a85907a4b4e9a2b707c7ce9cca", "patch": "@@ -40,7 +40,7 @@ extern \"C\" {\n    tests, and when writing language/runtime testcases.\n \n    Because Objective-C allows multiple root classes, a Foundation\n-   library (such as GNUstep-base) is expected to provide its own root\n+   library (such as GNUstep Base) is expected to provide its own root\n    class (typically called NSObject), fully integrated with the\n    library's own high-level features.  If you are using such a\n    Foundation library, you should most likely use its root class for\n@@ -130,18 +130,10 @@ extern \"C\" {\n         /* Archiving */\n + (int)version;\n + setVersion:(int)aVersion;\n-\n-/* The following methods were deprecated in GCC 4.6.0 and will be\n-   removed in the next GCC release.\n-*/\n-+ (int)streamVersion: (TypedStream*)aStream; /* __attribute__ ((deprecated)) */\n-\n-- read: (TypedStream*)aStream; /* __attribute__ ((deprecated)) */\n-- write: (TypedStream*)aStream; /* __attribute__ ((deprecated)) */\n-- awake; /* __attribute__ ((deprecated)) */\n-\n @end\n \n+#include \"deprecated/Object.h\"\n+\n #ifdef __cplusplus\n }\n #endif"}, {"sha": "4a8be6e563e0bc2f4c7741a4f38dc62255c39c07", "filename": "libobjc/objc/README", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e976a775e259c5a85907a4b4e9a2b707c7ce9cca/libobjc%2Fobjc%2FREADME", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e976a775e259c5a85907a4b4e9a2b707c7ce9cca/libobjc%2Fobjc%2FREADME", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2FREADME?ref=e976a775e259c5a85907a4b4e9a2b707c7ce9cca", "patch": "@@ -0,0 +1,13 @@\n+This directory contains the public headers that are installed when\n+libobjc is installed.\n+\n+Deprecated parts of the API should be moved into objc/deprecated and\n+then included by public headers until they are finally removed.  For\n+example, if objc-api.h contains an _objc_unexpected_exception variable\n+which is then deprecated, it should be moved into a header in\n+objc/deprecated.  This header is then included into objc-api.h.\n+\n+The result is that all the deprecated parts of the API are clearly\n+separated in objc/deprecated, while objc/ retains only the current public\n+API.\n+"}, {"sha": "0241f0fd8505c130d79d26063acac8c2ba049f87", "filename": "libobjc/objc/deprecated/Object.h", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e976a775e259c5a85907a4b4e9a2b707c7ce9cca/libobjc%2Fobjc%2Fdeprecated%2FObject.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e976a775e259c5a85907a4b4e9a2b707c7ce9cca/libobjc%2Fobjc%2Fdeprecated%2FObject.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fdeprecated%2FObject.h?ref=e976a775e259c5a85907a4b4e9a2b707c7ce9cca", "patch": "@@ -0,0 +1,13 @@\n+@interface Object (Deprecated)\n+\n+/* The following methods were deprecated in GCC 4.6.0 and will be\n+   removed in the next GCC release.\n+*/\n++ (int)streamVersion: (TypedStream*)aStream; /* __attribute__ ((deprecated)) */\n+\n+- read: (TypedStream*)aStream; /* __attribute__ ((deprecated)) */\n+- write: (TypedStream*)aStream; /* __attribute__ ((deprecated)) */\n+- awake; /* __attribute__ ((deprecated)) */\n+\n+@end\n+"}, {"sha": "3f105196e631fb22498b0a3c48cb1d1bcc98783f", "filename": "libobjc/objc/deprecated/README", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e976a775e259c5a85907a4b4e9a2b707c7ce9cca/libobjc%2Fobjc%2Fdeprecated%2FREADME", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e976a775e259c5a85907a4b4e9a2b707c7ce9cca/libobjc%2Fobjc%2Fdeprecated%2FREADME", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fdeprecated%2FREADME?ref=e976a775e259c5a85907a4b4e9a2b707c7ce9cca", "patch": "@@ -0,0 +1,11 @@\n+This directory contains declarations and features that are deprecated\n+and that will be removed in future versions of the compiler.\n+\n+Note that files in this directory are not really usable headers on\n+their own - they shouldn't be included directly by end users.  They\n+are header fragments containing deprecated APIs that are still\n+included (until removed) from the real headers in objc/.\n+\n+Files in this directory should not #include any other objc header.\n+Any include that they need should be done in the real objc/ headers\n+before including these fragments."}, {"sha": "69ffd4e87da1854a75ad47dd639c9fa79c3035eb", "filename": "libobjc/objc/deprecated/objc-unexpected-exception.h", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e976a775e259c5a85907a4b4e9a2b707c7ce9cca/libobjc%2Fobjc%2Fdeprecated%2Fobjc-unexpected-exception.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e976a775e259c5a85907a4b4e9a2b707c7ce9cca/libobjc%2Fobjc%2Fdeprecated%2Fobjc-unexpected-exception.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fdeprecated%2Fobjc-unexpected-exception.h?ref=e976a775e259c5a85907a4b4e9a2b707c7ce9cca", "patch": "@@ -0,0 +1,9 @@\n+/*\n+** Hook for uncaught exceptions.  This hook is called when an\n+** exception is thrown and no valid exception handler is in place.\n+** The function is expected never to return.  If the function returns\n+** the result is currently undefined.  This is deprecated.  Please use\n+** objc_set_uncaught_exception_handler() from objc/objc-exception.h\n+** instead.\n+*/\n+objc_EXPORT void (*_objc_unexpected_exception)(id) __attribute__ ((deprecated));"}, {"sha": "4d948d5fb27971478b1423068f171b834cebc81e", "filename": "libobjc/objc/deprecated/typedstream.h", "status": "added", "additions": 141, "deletions": 0, "changes": 141, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e976a775e259c5a85907a4b4e9a2b707c7ce9cca/libobjc%2Fobjc%2Fdeprecated%2Ftypedstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e976a775e259c5a85907a4b4e9a2b707c7ce9cca/libobjc%2Fobjc%2Fdeprecated%2Ftypedstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fdeprecated%2Ftypedstream.h?ref=e976a775e259c5a85907a4b4e9a2b707c7ce9cca", "patch": "@@ -0,0 +1,141 @@\n+/* GNU Objective-C Typed Streams interface.\n+   Copyright (C) 1993, 1995, 2004, 2009 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it\n+under the terms of the GNU General Public License as published by the\n+Free Software Foundation; either version 3, or (at your option) any\n+later version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT\n+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+License for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+\n+#ifndef __typedstream_INCLUDE_GNU\n+#define __typedstream_INCLUDE_GNU\n+\n+/* The API in this file was entirely deprecated in GCC 4.6.0 and will\n+   be removed in the following GCC release.\n+*/\n+\n+#include <stdio.h>\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif /* __cplusplus */\n+\n+typedef int (*objc_typed_read_func)(void*, char*, int);\n+typedef int (*objc_typed_write_func)(void*, const char*, int);\n+typedef int (*objc_typed_flush_func)(void*);\n+typedef int (*objc_typed_eof_func)(void*);\n+\n+#define OBJC_READONLY   0x01\n+#define OBJC_WRITEONLY  0x02\n+\n+#define OBJC_MANAGED_STREAM  0x01\n+#define OBJC_FILE_STREAM     0x02\n+#define OBJC_MEMORY_STREAM   0x04\n+\n+#define OBJC_TYPED_STREAM_VERSION 0x01\n+\n+typedef struct objc_typed_stream {\n+  void* physical;\n+  cache_ptr object_table;\t/* read/written objects */\n+  cache_ptr stream_table;\t/* other read/written but shared things.. */\n+  cache_ptr class_table;\t/* class version mapping */\n+  cache_ptr object_refs;\t/* forward references */\n+  int mode;\t\t\t/* OBJC_READONLY or OBJC_WRITEONLY */\n+  int type;\t\t\t/* MANAGED, FILE, MEMORY etc bit string */\n+  int version;\t\t\t/* version used when writing */\n+  int writing_root_p;\n+  objc_typed_read_func read;\n+  objc_typed_write_func write;\n+  objc_typed_eof_func eof;\n+  objc_typed_flush_func flush;\n+} TypedStream;\n+\n+/* opcode masks */\n+#define _B_VALUE   0x1fU\n+#define _B_CODE    0xe0U\n+#define _B_SIGN    0x10U\n+#define _B_NUMBER  0x0fU\n+\n+/* standard opcodes */\n+#define _B_INVALID 0x00U\n+#define _B_SINT    0x20U\n+#define _B_NINT    0x40U\n+#define _B_SSTR    0x60U\n+#define _B_NSTR    0x80U\n+#define _B_RCOMM   0xa0U\n+#define _B_UCOMM   0xc0U\n+#define _B_EXT     0xe0U\n+\n+/* eXtension opcodes */\n+#define _BX_OBJECT  0x00U\n+#define _BX_CLASS   0x01U\n+#define _BX_SEL     0x02U\n+#define _BX_OBJREF  0x03U\n+#define _BX_OBJROOT 0x04U\n+#define _BX_EXT     0x1fU\n+\n+/*\n+** Read and write objects as specified by TYPE.  All the `last'\n+** arguments are pointers to the objects to read/write.  \n+*/\n+\n+int objc_write_type (TypedStream* stream, const char* type, const void* data) __attribute__ ((deprecated));\n+int objc_read_type (TypedStream* stream, const char* type, void* data) __attribute__ ((deprecated));\n+\n+int objc_write_types (TypedStream* stream, const char* type, ...) __attribute__ ((deprecated));\n+int objc_read_types (TypedStream* stream, const char* type, ...) __attribute__ ((deprecated));\n+\n+int objc_write_object_reference (TypedStream* stream, id object) __attribute__ ((deprecated));\n+int objc_write_root_object (TypedStream* stream, id object) __attribute__ ((deprecated));\n+\n+long objc_get_stream_class_version (TypedStream* stream, Class class_type) __attribute__ ((deprecated));\n+\n+\n+/*\n+** Convenience functions\n+*/\n+\n+int objc_write_array (TypedStream* stream, const char* type,\n+\t\t      int count, const void* data) __attribute__ ((deprecated));\n+int objc_read_array (TypedStream* stream, const char* type,\n+\t\t     int count, void* data) __attribute__ ((deprecated));\n+\n+int objc_write_object (TypedStream* stream, id object) __attribute__ ((deprecated));\n+int objc_read_object (TypedStream* stream, id* object) __attribute__ ((deprecated));\n+\n+\n+\n+/*\n+** Open a typed stream for reading or writing.  MODE may be either of\n+** OBJC_READONLY or OBJC_WRITEONLY.  \n+*/\n+\n+TypedStream* objc_open_typed_stream (FILE* physical, int mode) __attribute__ ((deprecated));\n+TypedStream* objc_open_typed_stream_for_file (const char* file_name, int mode) __attribute__ ((deprecated));\n+\n+void objc_close_typed_stream (TypedStream* stream) __attribute__ ((deprecated));\n+\n+BOOL objc_end_of_typed_stream (TypedStream* stream) __attribute__ ((deprecated));\n+void objc_flush_typed_stream (TypedStream* stream) __attribute__ ((deprecated));\n+\n+#ifdef __cplusplus\n+}\n+#endif /* __cplusplus */\n+\n+#endif /* not __typedstream_INCLUDE_GNU */"}, {"sha": "f58448456d6d9a1cba32d5537719afdc746f47de", "filename": "libobjc/objc/objc-api.h", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e976a775e259c5a85907a4b4e9a2b707c7ce9cca/libobjc%2Fobjc%2Fobjc-api.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e976a775e259c5a85907a4b4e9a2b707c7ce9cca/libobjc%2Fobjc%2Fobjc-api.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fobjc-api.h?ref=e976a775e259c5a85907a4b4e9a2b707c7ce9cca", "patch": "@@ -430,16 +430,7 @@ objc_EXPORT void (*_objc_free)(void *);\n objc_EXPORT IMP (*__objc_msg_forward)(SEL);\n objc_EXPORT IMP (*__objc_msg_forward2)(id, SEL);\n \n-/*\n-** Hook for uncaught exceptions.  This hook is called when an\n-** exception is thrown and no valid exception handler is in place.\n-** The function is expected never to return.  If the function returns\n-** the result is currently undefined.  This is deprecated.  Please use\n-** objc_set_uncaught_exception_handler() from objc/objc-exception.h\n-** instead.\n-*/\n-objc_EXPORT void (*_objc_unexpected_exception)(id) __attribute__ ((deprecated));\n-\n+#include \"deprecated/objc-unexpected-exception.h\"\n \n Method_t class_get_class_method(MetaClass _class, SEL aSel);\n "}, {"sha": "715152d02e9bb978a0bef7da50b609ce59787cdc", "filename": "libobjc/objc/objc-exception.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e976a775e259c5a85907a4b4e9a2b707c7ce9cca/libobjc%2Fobjc%2Fobjc-exception.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e976a775e259c5a85907a4b4e9a2b707c7ce9cca/libobjc%2Fobjc%2Fobjc-exception.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fobjc-exception.h?ref=e976a775e259c5a85907a4b4e9a2b707c7ce9cca", "patch": "@@ -26,7 +26,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #ifndef __objc_exception_INCLUDE_GNU\n #define __objc_exception_INCLUDE_GNU\n \n-#include <objc/objc.h>\n+#include \"objc.h\"\n \n #ifdef __cplusplus\n extern \"C\" {\n@@ -68,7 +68,7 @@ void objc_exception_throw (id exception);\n    exception handling.  They are not thread safe and should be called\n    during the program initialization before threads are started.  They\n    are mostly reserved for \"Foundation\" libraries; in the case of\n-   GNUstep, gnustep-base may be using these functions to improve the\n+   GNUstep, GNUstep Base may be using these functions to improve the\n    standard exception handling.  You probably shouldn't use these\n    functions unless you are writing your own Foundation library.\n */"}, {"sha": "2d4f72d5965c4b07cca088dc16b1520c4c011d7e", "filename": "libobjc/objc/typedstream.h", "status": "modified", "additions": 1, "deletions": 141, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e976a775e259c5a85907a4b4e9a2b707c7ce9cca/libobjc%2Fobjc%2Ftypedstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e976a775e259c5a85907a4b4e9a2b707c7ce9cca/libobjc%2Fobjc%2Ftypedstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Ftypedstream.h?ref=e976a775e259c5a85907a4b4e9a2b707c7ce9cca", "patch": "@@ -1,144 +1,4 @@\n-/* GNU Objective-C Typed Streams interface.\n-   Copyright (C) 1993, 1995, 2004, 2009 Free Software Foundation, Inc.\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify it\n-under the terms of the GNU General Public License as published by the\n-Free Software Foundation; either version 3, or (at your option) any\n-later version.\n-\n-GCC is distributed in the hope that it will be useful, but WITHOUT\n-ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n-License for more details.\n-\n-Under Section 7 of GPL version 3, you are granted additional\n-permissions described in the GCC Runtime Library Exception, version\n-3.1, as published by the Free Software Foundation.\n-\n-You should have received a copy of the GNU General Public License and\n-a copy of the GCC Runtime Library Exception along with this program;\n-see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-<http://www.gnu.org/licenses/>.  */\n-\n-\n-#ifndef __typedstream_INCLUDE_GNU\n-#define __typedstream_INCLUDE_GNU\n-\n-/* The API in this file was entirely deprecated in GCC 4.6.0 and will\n-   be removed in the following GCC release.\n-*/\n-\n #include \"objc.h\"\n #include \"hash.h\"\n+#include \"deprecated/typedstream.h\"\n \n-#include <stdio.h>\n-\n-#ifdef __cplusplus\n-extern \"C\" {\n-#endif /* __cplusplus */\n-\n-typedef int (*objc_typed_read_func)(void*, char*, int);\n-typedef int (*objc_typed_write_func)(void*, const char*, int);\n-typedef int (*objc_typed_flush_func)(void*);\n-typedef int (*objc_typed_eof_func)(void*);\n-\n-#define OBJC_READONLY   0x01\n-#define OBJC_WRITEONLY  0x02\n-\n-#define OBJC_MANAGED_STREAM  0x01\n-#define OBJC_FILE_STREAM     0x02\n-#define OBJC_MEMORY_STREAM   0x04\n-\n-#define OBJC_TYPED_STREAM_VERSION 0x01\n-\n-typedef struct objc_typed_stream {\n-  void* physical;\n-  cache_ptr object_table;\t/* read/written objects */\n-  cache_ptr stream_table;\t/* other read/written but shared things.. */\n-  cache_ptr class_table;\t/* class version mapping */\n-  cache_ptr object_refs;\t/* forward references */\n-  int mode;\t\t\t/* OBJC_READONLY or OBJC_WRITEONLY */\n-  int type;\t\t\t/* MANAGED, FILE, MEMORY etc bit string */\n-  int version;\t\t\t/* version used when writing */\n-  int writing_root_p;\n-  objc_typed_read_func read;\n-  objc_typed_write_func write;\n-  objc_typed_eof_func eof;\n-  objc_typed_flush_func flush;\n-} TypedStream;\n-\n-/* opcode masks */\n-#define _B_VALUE   0x1fU\n-#define _B_CODE    0xe0U\n-#define _B_SIGN    0x10U\n-#define _B_NUMBER  0x0fU\n-\n-/* standard opcodes */\n-#define _B_INVALID 0x00U\n-#define _B_SINT    0x20U\n-#define _B_NINT    0x40U\n-#define _B_SSTR    0x60U\n-#define _B_NSTR    0x80U\n-#define _B_RCOMM   0xa0U\n-#define _B_UCOMM   0xc0U\n-#define _B_EXT     0xe0U\n-\n-/* eXtension opcodes */\n-#define _BX_OBJECT  0x00U\n-#define _BX_CLASS   0x01U\n-#define _BX_SEL     0x02U\n-#define _BX_OBJREF  0x03U\n-#define _BX_OBJROOT 0x04U\n-#define _BX_EXT     0x1fU\n-\n-/*\n-** Read and write objects as specified by TYPE.  All the `last'\n-** arguments are pointers to the objects to read/write.  \n-*/\n-\n-int objc_write_type (TypedStream* stream, const char* type, const void* data) __attribute__ ((deprecated));\n-int objc_read_type (TypedStream* stream, const char* type, void* data) __attribute__ ((deprecated));\n-\n-int objc_write_types (TypedStream* stream, const char* type, ...) __attribute__ ((deprecated));\n-int objc_read_types (TypedStream* stream, const char* type, ...) __attribute__ ((deprecated));\n-\n-int objc_write_object_reference (TypedStream* stream, id object) __attribute__ ((deprecated));\n-int objc_write_root_object (TypedStream* stream, id object) __attribute__ ((deprecated));\n-\n-long objc_get_stream_class_version (TypedStream* stream, Class class_type) __attribute__ ((deprecated));\n-\n-\n-/*\n-** Convenience functions\n-*/\n-\n-int objc_write_array (TypedStream* stream, const char* type,\n-\t\t      int count, const void* data) __attribute__ ((deprecated));\n-int objc_read_array (TypedStream* stream, const char* type,\n-\t\t     int count, void* data) __attribute__ ((deprecated));\n-\n-int objc_write_object (TypedStream* stream, id object) __attribute__ ((deprecated));\n-int objc_read_object (TypedStream* stream, id* object) __attribute__ ((deprecated));\n-\n-\n-\n-/*\n-** Open a typed stream for reading or writing.  MODE may be either of\n-** OBJC_READONLY or OBJC_WRITEONLY.  \n-*/\n-\n-TypedStream* objc_open_typed_stream (FILE* physical, int mode) __attribute__ ((deprecated));\n-TypedStream* objc_open_typed_stream_for_file (const char* file_name, int mode) __attribute__ ((deprecated));\n-\n-void objc_close_typed_stream (TypedStream* stream) __attribute__ ((deprecated));\n-\n-BOOL objc_end_of_typed_stream (TypedStream* stream) __attribute__ ((deprecated));\n-void objc_flush_typed_stream (TypedStream* stream) __attribute__ ((deprecated));\n-\n-#ifdef __cplusplus\n-}\n-#endif /* __cplusplus */\n-\n-#endif /* not __typedstream_INCLUDE_GNU */"}]}