{"sha": "acd47d2a69f7aa1c63562f260e4c5ec3438546a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWNkNDdkMmE2OWY3YWExYzYzNTYyZjI2MGU0YzVlYzM0Mzg1NDZhOQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2004-01-15T17:24:17Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2004-01-15T17:24:17Z"}, "message": "[multiple changes]\n\n2004-01-15  Olivier Hainque  <hainque@act-europe.fr>\n\n\t* decl.c (gnat_to_gnu_entity, E_Variable): Retrieve the object size\n\talso when not defining if a Size clause applies. That information is\n\tnot to be ignored.\n\n2004-01-15  Arnaud Charlet  <charlet@act-europe.fr>\n\n\t* Makefile.in (install-gnatlib, gnatlib-shared-default): Set up\n\tsymbolic links for the shared gnat run time when needed.\n\n2004-01-15  Vasiliy Fofanov  <fofanov@act-europe.fr>\n\n\t* memtrack.adb (Gmem_Initialize): check that gmem.out could be opened\n\tfor writing, and terminate with an error message if not.\n\n2004-01-15  Ed Schonberg  <schonberg@gnat.com>\n\n\t* sem_attr.adb (Resolve_Attribute, case 'Access): Remove spurious\n\twarning on an access to subprogram in an instance, when the target\n\ttype is declared in the same generic unit.\n\t(Eval_Attribute): If 'access is known to fail accessibility check,\n\trewrite as a raise statement.\n\n2004-01-15  GNAT Script  <nobody@gnat.com>\n\n\t* Make-lang.in: Makefile automatically updated\n\nFrom-SVN: r75931", "tree": {"sha": "62222cc22dd847637e9f283dc7d0abbbcb358533", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/62222cc22dd847637e9f283dc7d0abbbcb358533"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/acd47d2a69f7aa1c63562f260e4c5ec3438546a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acd47d2a69f7aa1c63562f260e4c5ec3438546a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acd47d2a69f7aa1c63562f260e4c5ec3438546a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acd47d2a69f7aa1c63562f260e4c5ec3438546a9/comments", "author": null, "committer": null, "parents": [{"sha": "46049cff4f689532250bec7a53c8c1d5486bf640", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46049cff4f689532250bec7a53c8c1d5486bf640", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46049cff4f689532250bec7a53c8c1d5486bf640"}], "stats": {"total": 100, "additions": 81, "deletions": 19}, "files": [{"sha": "5775b6bf3d2adb21578b07ee165a1f034de9199b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acd47d2a69f7aa1c63562f260e4c5ec3438546a9/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acd47d2a69f7aa1c63562f260e4c5ec3438546a9/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=acd47d2a69f7aa1c63562f260e4c5ec3438546a9", "patch": "@@ -1,3 +1,31 @@\n+2004-01-15  Olivier Hainque  <hainque@act-europe.fr>\n+\n+\t* decl.c (gnat_to_gnu_entity, E_Variable): Retrieve the object size\n+\talso when not defining if a Size clause applies. That information is\n+\tnot to be ignored.\n+\n+2004-01-15  Arnaud Charlet  <charlet@act-europe.fr>\n+\n+\t* Makefile.in (install-gnatlib, gnatlib-shared-default): Set up\n+\tsymbolic links for the shared gnat run time when needed.\n+\n+2004-01-15  Vasiliy Fofanov  <fofanov@act-europe.fr>\n+\n+\t* memtrack.adb (Gmem_Initialize): check that gmem.out could be opened\n+\tfor writing, and terminate with an error message if not.\n+\n+2004-01-15  Ed Schonberg  <schonberg@gnat.com>\n+\n+\t* sem_attr.adb (Resolve_Attribute, case 'Access): Remove spurious\n+\twarning on an access to subprogram in an instance, when the target\n+\ttype is declared in the same generic unit.\n+\t(Eval_Attribute): If 'access is known to fail accessibility check,\n+\trewrite as a raise statement.\n+\n+2004-01-15  GNAT Script  <nobody@gnat.com>\n+\n+\t* Make-lang.in: Makefile automatically updated\n+\n 2004-01-15  Kelley Cook  <kcook@gcc.gnu.org>\n \n \t* Make-lang.in (ada.srcextra): Dummy entry."}, {"sha": "99d211495902e3366c412b2d373b44c3b3333c3c", "filename": "gcc/ada/Make-lang.in", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acd47d2a69f7aa1c63562f260e4c5ec3438546a9/gcc%2Fada%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acd47d2a69f7aa1c63562f260e4c5ec3438546a9/gcc%2Fada%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMake-lang.in?ref=acd47d2a69f7aa1c63562f260e4c5ec3438546a9", "patch": "@@ -2516,10 +2516,10 @@ ada/live.o : ada/ada.ads ada/a-except.ads ada/alloc.ads ada/atree.ads \\\n    ada/table.adb ada/tree_io.ads ada/types.ads ada/uintp.ads ada/uintp.adb \\\n    ada/uname.ads ada/unchconv.ads ada/unchdeal.ads ada/urealp.ads \n \n-ada/memtrack.o : ada/ada.ads ada/a-except.ads ada/system.ads \\\n-   ada/s-memory.ads ada/memtrack.adb ada/s-soflin.ads ada/s-stache.ads \\\n-   ada/s-stalib.ads ada/s-stoele.ads ada/s-stoele.adb ada/s-traceb.ads \\\n-   ada/s-traent.ads ada/s-traent.adb ada/unchconv.ads \n+ada/memtrack.o : ada/ada.ads ada/a-except.ads ada/gnat.ads ada/g-io.ads \\\n+   ada/system.ads ada/s-memory.ads ada/memtrack.adb ada/s-soflin.ads \\\n+   ada/s-stache.ads ada/s-stalib.ads ada/s-stoele.ads ada/s-stoele.adb \\\n+   ada/s-traceb.ads ada/s-traent.ads ada/s-traent.adb ada/unchconv.ads \n \n ada/namet.o : ada/ada.ads ada/a-except.ads ada/alloc.ads ada/debug.ads \\\n    ada/gnat.ads ada/g-os_lib.ads ada/g-string.ads ada/gnatvsn.ads \\"}, {"sha": "2ffc5e767808bf4b505034972e861fe70ee74513", "filename": "gcc/ada/Makefile.in", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acd47d2a69f7aa1c63562f260e4c5ec3438546a9/gcc%2Fada%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acd47d2a69f7aa1c63562f260e4c5ec3438546a9/gcc%2Fada%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMakefile.in?ref=acd47d2a69f7aa1c63562f260e4c5ec3438546a9", "patch": "@@ -1703,15 +1703,16 @@ install-gnatlib: ../stamp-gnatlib\n #     of $(INSTALL_DATA). The latter may force a mode inappropriate\n #     for shared libraries on some targets, e.g. on HP-UX where the x\n #     permission is required.\n-ifeq ($(strip $(filter-out alpha% dec vms% openvms% alphavms%,$(targ))),)\n-\t-for file in rts/lib*$(soext);do \\\n-\t    $(INSTALL) $$file $(DESTDIR)$(ADA_RTL_OBJ_DIR); \\\n+\tfor file in gnat gnarl; do \\\n+\t   if [ -f rts/lib$$file-$(LIBRARY_VERSION)$(soext) ]; then \\\n+\t      $(INSTALL) rts/lib$$file-$(LIBRARY_VERSION)$(soext) \\\n+\t\t\t $(ADA_RTL_OBJ_DIR); \\\n+\t   fi; \\\n+\t   if [ -f rts/lib$$file$(soext) ]; then \\\n+\t      $(LN_S) lib$$file-$(LIBRARY_VERSION)$(soext) \\\n+\t      $(ADA_RTL_OBJ_DIR)/lib$$file$(soext); \\\n+\t   fi; \\\n \tdone\n-else\n-\t-for file in rts/lib*-*$(soext);do \\\n-\t    $(INSTALL) $$file $(DESTDIR)$(ADA_RTL_OBJ_DIR); \\\n-\tdone\n-endif\n # This copy must be done preserving the date on the original file.\n \tfor file in rts/*.adb rts/*.ads; do \\\n \t    $(INSTALL_DATA_DATE) $$file $(DESTDIR)$(ADA_INCLUDE_DIR); \\\n@@ -1898,6 +1899,8 @@ gnatlib-shared-default:\n \t\t-o libgnarl-$(LIBRARY_VERSION)$(soext) \\\n \t\t$(GNATRTL_TASKING_OBJS) \\\n \t\t$(SO_OPTS)libgnarl-$(LIBRARY_VERSION)$(soext) $(THREADSLIB)\n+\tcd rts; $(LN_S) libgnat-$(LIBRARY_VERSION)$(soext) libgnat$(soext)\n+\tcd rts; $(LN_S) libgnarl-$(LIBRARY_VERSION)$(soext) libgnarl$(soext)\n \n gnatlib-shared-dual:\n \t$(MAKE) $(FLAGS_TO_PASS) \\"}, {"sha": "1b0200e2c78528144963c8c6ebc10641dcbd58c6", "filename": "gcc/ada/decl.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acd47d2a69f7aa1c63562f260e4c5ec3438546a9/gcc%2Fada%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acd47d2a69f7aa1c63562f260e4c5ec3438546a9/gcc%2Fada%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdecl.c?ref=acd47d2a69f7aa1c63562f260e4c5ec3438546a9", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *          Copyright (C) 1992-2003, Free Software Foundation, Inc.         *\n+ *          Copyright (C) 1992-2004, Free Software Foundation, Inc.         *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -548,11 +548,16 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t  }\n \n \t/* If we are defining the object, see if it has a Size value and\n-\t   validate it if so.  Then get the new type, if any.  */\n+\t   validate it if so. If we are not defining the object and a Size\n+\t   clause applies, simply retrieve the value. We don't want to ignore\n+\t   the clause and it is expected to have been validated already.  Then\n+\t   get the new type, if any.  */\n \tif (definition)\n \t  gnu_size = validate_size (Esize (gnat_entity), gnu_type,\n \t\t\t\t    gnat_entity, VAR_DECL, 0,\n \t\t\t\t    Has_Size_Clause (gnat_entity));\n+\telse if (Has_Size_Clause (gnat_entity))\n+\t  gnu_size = UI_To_gnu (Esize (gnat_entity), bitsizetype);\n \n \tif (gnu_size != 0)\n \t  {"}, {"sha": "75000b0421e100b9975e9ae5ade36eca2bd1788c", "filename": "gcc/ada/memtrack.adb", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acd47d2a69f7aa1c63562f260e4c5ec3438546a9/gcc%2Fada%2Fmemtrack.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acd47d2a69f7aa1c63562f260e4c5ec3438546a9/gcc%2Fada%2Fmemtrack.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmemtrack.adb?ref=acd47d2a69f7aa1c63562f260e4c5ec3438546a9", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2001-2003 Free Software Foundation, Inc.          --\n+--          Copyright (C) 2001-2004 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -71,13 +71,15 @@ with Ada.Exceptions;\n with System.Soft_Links;\n with System.Traceback;\n with System.Traceback_Entries;\n+with GNAT.IO;\n \n package body System.Memory is\n \n    use Ada.Exceptions;\n    use System.Soft_Links;\n    use System.Traceback;\n    use System.Traceback_Entries;\n+   use GNAT.IO;\n \n    function c_malloc (Size : size_t) return System.Address;\n    pragma Import (C, c_malloc, \"malloc\");\n@@ -89,11 +91,15 @@ package body System.Memory is\n      (Ptr : System.Address; Size : size_t) return System.Address;\n    pragma Import (C, c_realloc, \"realloc\");\n \n-   type File_Ptr is new System.Address;\n+   subtype File_Ptr is System.Address;\n \n    function fopen (Path : String; Mode : String) return File_Ptr;\n    pragma Import (C, fopen);\n \n+   procedure OS_Exit (Status : Integer);\n+   pragma Import (C, OS_Exit, \"__gnat_os_exit\");\n+   pragma No_Return (OS_Exit);\n+\n    procedure fwrite\n      (Ptr    : System.Address;\n       Size   : size_t;\n@@ -274,6 +280,10 @@ package body System.Memory is\n       if Needs_Init then\n          Needs_Init := False;\n          Gmemfile := fopen (Gmemfname, \"wb\" & ASCII.NUL);\n+         if Gmemfile = System.Null_Address then\n+            Put_Line (\"Couldn't open gnatmem log file for writing\");\n+            OS_Exit (255);\n+         end if;\n          fwrite (\"GMEM DUMP\" & ASCII.LF, 10, 1, Gmemfile);\n       end if;\n    end Gmem_Initialize;"}, {"sha": "51fd7c9c9c1101d094369c7c77ffbe335491d4a8", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acd47d2a69f7aa1c63562f260e4c5ec3438546a9/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acd47d2a69f7aa1c63562f260e4c5ec3438546a9/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=acd47d2a69f7aa1c63562f260e4c5ec3438546a9", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2003, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2004, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -4457,6 +4457,18 @@ package body Sem_Attr is\n          Compile_Time_Known_Attribute (N, Alignment (P_Entity));\n          return;\n \n+      --  If this is an access attribute that is known to fail accessibility\n+      --  check, rewrite accordingly.\n+\n+      elsif Attribute_Name (N) = Name_Access\n+        and then Raises_Constraint_Error (N)\n+      then\n+         Rewrite (N,\n+            Make_Raise_Program_Error (Loc,\n+              Reason => PE_Accessibility_Check_Failed));\n+         Set_Etype (N, C_Type);\n+         return;\n+\n       --  No other cases are foldable (they certainly aren't static, and at\n       --  the moment we don't try to fold any cases other than these three).\n \n@@ -6501,6 +6513,9 @@ package body Sem_Attr is\n                      null;  --  Nothing to check\n \n                   --  Check the static accessibility rule of 3.10.2(32)\n+                  --  In an instance body, if subprogram and type are both\n+                  --  local, other rules prevent dangling references, and no\n+                  --  warning  is needed.\n \n                   elsif Attr_Id = Attribute_Access\n                     and then Subprogram_Access_Level (Entity (P))\n@@ -6510,7 +6525,8 @@ package body Sem_Attr is\n                         Error_Msg_N\n                           (\"subprogram must not be deeper than access type\",\n                             P);\n-                     else\n+\n+                     elsif Scope (Entity (P)) /= Scope (Btyp) then\n                         Error_Msg_N\n                           (\"subprogram must not be deeper than access type?\",\n                              P);\n@@ -6521,7 +6537,7 @@ package body Sem_Attr is\n \n                   --  Check the restriction of 3.10.2(32) that disallows\n                   --  the type of the access attribute to be declared\n-                  --  outside a generic body when the attribute occurs\n+                  --  outside a generic body when the subprogram is declared\n                   --  within that generic body.\n \n                   elsif Enclosing_Generic_Body (Entity (P))"}]}