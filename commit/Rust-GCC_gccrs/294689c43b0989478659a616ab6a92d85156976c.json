{"sha": "294689c43b0989478659a616ab6a92d85156976c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjk0Njg5YzQzYjA5ODk0Nzg2NTlhNjE2YWI2YTkyZDg1MTU2OTc2Yw==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@codesourcery.com", "date": "2011-07-15T09:43:05Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2011-07-15T09:43:05Z"}, "message": "weak-call.c: New test.\n\n\t* gcc.target/tic6x/weak-call.c: New test.\n\t* gcc.target/tic6x/fpcmp.c: New test.\n\t* gcc.target/tic6x/fpdiv.c: New test.\n\t* gcc.target/tic6x/rotdi16-scan.c: New test.\n\t* gcc.target/tic6x/ffssi.c: New test.\n\t* gcc.target/tic6x/fpdiv-lib.c: New test.\n\t* gcc.target/tic6x/cold-lc.c: New test.\n\t* gcc.target/tic6x/longcalls.c: New test.\n\t* gcc.target/tic6x/abi-align-1.c: New test.\n\t* gcc.target/tic6x/fpcmp-finite.c: New test.\n\t* gcc.target/tic6x/rotdi16.c: New test.\n\t* gcc.target/tic6x/bswapl.c: New test.\n\t* gcc.target/tic6x/ffsdi.c: New test.\n\t* gcc.target/tic6x/tic6x.exp: New file.\n\t* gcc/testsuite/gcc.target/tic6x/builtins/arith24.c: New test.\n\t* gcc/testsuite/gcc.target/tic6x/builtins/smpy.c: New test.\n\t* gcc/testsuite/gcc.target/tic6x/builtins/smpylh.c: New test.\n\t* gcc/testsuite/gcc.target/tic6x/builtins/smpyh.c: New test.\n\t* gcc/testsuite/gcc.target/tic6x/builtins/sarith1.c: New test.\n\t* gcc/testsuite/gcc.target/tic6x/builtins/extclr.c: New test\n\t* gcc/testsuite/gcc.target/tic6x/builtins/c6x-builtins.exp: New file.\n\t* gcc.target/tic6x/builtin-math-7.c: New test, adapted from gcc.dg.\n\t* lib/target-supports.exp (chck_profiling_available): Not on tic6x.\n\t(check_effective_target_ti_c67x, check_effective_target_ti_c64xp):\n\tNew functions.\n\t* gcc.c-torture/execute/20101011-1.c: Add a condition for\n\t__TMS320C6X__.\n\t* gcc.dg/20020312-2.c: Likewise.\n\t* gcc.dg/pr27095.c: Handle tic6x like hppa.\n\t* gcc.dg/torture/pr37868.c: Skip on tic6x.\n\t* gcc.dg/torture/builtin-math-7.c: Likewise.\n\nFrom-SVN: r176310", "tree": {"sha": "97fb6f735008c554bfc518793b20047ce2a63d97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97fb6f735008c554bfc518793b20047ce2a63d97"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/294689c43b0989478659a616ab6a92d85156976c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/294689c43b0989478659a616ab6a92d85156976c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/294689c43b0989478659a616ab6a92d85156976c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/294689c43b0989478659a616ab6a92d85156976c/comments", "author": null, "committer": null, "parents": [{"sha": "bcead286bfebf2312981135b9c7d72eadc6d396c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcead286bfebf2312981135b9c7d72eadc6d396c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcead286bfebf2312981135b9c7d72eadc6d396c"}], "stats": {"total": 721, "additions": 718, "deletions": 3}, "files": [{"sha": "10d7e56d7845375b799c60690b722126c6bfb82e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/294689c43b0989478659a616ab6a92d85156976c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/294689c43b0989478659a616ab6a92d85156976c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=294689c43b0989478659a616ab6a92d85156976c", "patch": "@@ -1,3 +1,37 @@\n+2011-07-15  Bernd Schmidt  <bernds@codesourcery.com>\n+\n+\t* gcc.target/tic6x/weak-call.c: New test.\n+\t* gcc.target/tic6x/fpcmp.c: New test.\n+\t* gcc.target/tic6x/fpdiv.c: New test.\n+\t* gcc.target/tic6x/rotdi16-scan.c: New test.\n+\t* gcc.target/tic6x/ffssi.c: New test.\n+\t* gcc.target/tic6x/fpdiv-lib.c: New test.\n+\t* gcc.target/tic6x/cold-lc.c: New test.\n+\t* gcc.target/tic6x/longcalls.c: New test.\n+\t* gcc.target/tic6x/abi-align-1.c: New test.\n+\t* gcc.target/tic6x/fpcmp-finite.c: New test.\n+\t* gcc.target/tic6x/rotdi16.c: New test.\n+\t* gcc.target/tic6x/bswapl.c: New test.\n+\t* gcc.target/tic6x/ffsdi.c: New test.\n+\t* gcc.target/tic6x/tic6x.exp: New file.\n+\t* gcc/testsuite/gcc.target/tic6x/builtins/arith24.c: New test.\n+\t* gcc/testsuite/gcc.target/tic6x/builtins/smpy.c: New test.\n+\t* gcc/testsuite/gcc.target/tic6x/builtins/smpylh.c: New test.\n+\t* gcc/testsuite/gcc.target/tic6x/builtins/smpyh.c: New test.\n+\t* gcc/testsuite/gcc.target/tic6x/builtins/sarith1.c: New test.\n+\t* gcc/testsuite/gcc.target/tic6x/builtins/extclr.c: New test\n+\t* gcc/testsuite/gcc.target/tic6x/builtins/c6x-builtins.exp: New file.\n+\t* gcc.target/tic6x/builtin-math-7.c: New test, adapted from gcc.dg.\n+\t* lib/target-supports.exp (chck_profiling_available): Not on tic6x.\n+\t(check_effective_target_ti_c67x, check_effective_target_ti_c64xp):\n+\tNew functions.\n+\t* gcc.c-torture/execute/20101011-1.c: Add a condition for\n+\t__TMS320C6X__.\n+\t* gcc.dg/20020312-2.c: Likewise.\n+\t* gcc.dg/pr27095.c: Handle tic6x like hppa.\n+\t* gcc.dg/torture/pr37868.c: Skip on tic6x.\n+\t* gcc.dg/torture/builtin-math-7.c: Likewise.\n+\n 2011-07-14  Andrew Pinski  <pinskia@gmail.com>\n \n \tPR tree-opt/49309"}, {"sha": "f3247c25fb65163e03673073b257c1482b05180c", "filename": "gcc/testsuite/gcc.c-torture/execute/20101011-1.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/294689c43b0989478659a616ab6a92d85156976c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20101011-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/294689c43b0989478659a616ab6a92d85156976c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20101011-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20101011-1.c?ref=294689c43b0989478659a616ab6a92d85156976c", "patch": "@@ -12,6 +12,9 @@\n #elif defined (__sh__)\n   /* On SH division by zero does not trap.  */\n # define DO_TEST 0\n+#elif defined (__TMS320C6X__)\n+  /* On TI C6X division by zero does not trap.  */\n+# define DO_TEST 0\n #elif defined (__mips__) && !defined(__linux__)\n   /* MIPS divisions do trap by default, but libgloss targets do not\n      intercept the trap and raise a SIGFPE.  The same is probably"}, {"sha": "0b3178f28d7afca49d5df57f69d857ed364afacc", "filename": "gcc/testsuite/gcc.dg/20020312-2.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/294689c43b0989478659a616ab6a92d85156976c/gcc%2Ftestsuite%2Fgcc.dg%2F20020312-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/294689c43b0989478659a616ab6a92d85156976c/gcc%2Ftestsuite%2Fgcc.dg%2F20020312-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20020312-2.c?ref=294689c43b0989478659a616ab6a92d85156976c", "patch": "@@ -64,6 +64,8 @@ extern void abort (void);\n # define PIC_REG  \"12\"\n #elif defined(__sparc__)\n # define PIC_REG  \"l7\"\n+#elif defined(__TMS320C6X__)\n+# define PIC_REG \"B14\"\n #elif defined(__v850)\n /* No pic register.  */\n #elif defined(__vax__)"}, {"sha": "b88d390731e9236d2c4b38982470e0db38f91417", "filename": "gcc/testsuite/gcc.dg/pr27095.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/294689c43b0989478659a616ab6a92d85156976c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr27095.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/294689c43b0989478659a616ab6a92d85156976c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr27095.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr27095.c?ref=294689c43b0989478659a616ab6a92d85156976c", "patch": "@@ -16,10 +16,11 @@ main (int argc, char **argv)\n   memset (x, argc, strlen (x));\n   return 0;\n }\n-/* { dg-final { scan-assembler-not \"(?n)strlen\\(.*\\n\\)+.*strlen\" { target { ! { powerpc*-*-darwin* hppa*-*-hpux* ia64-*-hpux* alpha*-*-* spu-*-* } } } } } */\n+/* { dg-final { scan-assembler-not \"(?n)strlen\\(.*\\n\\)+.*strlen\" { target { ! { powerpc*-*-darwin* hppa*-*-hpux* ia64-*-hpux* alpha*-*-* spu-*-* tic6x-*-* } } } } } */\n /* hppa*-*-hpux* has an IMPORT statement for strlen (plus the branch). */\n /* *-*-darwin* has something similar. */\n-/* { dg-final { scan-assembler-not \"(?n)strlen\\(.*\\n\\)+.*strlen\\(.*\\n\\)+.*strlen\" { target hppa*-*-hpux* } } } */\n+/* tic6x emits a comment at the point where the delayed branch happens.  */\n+/* { dg-final { scan-assembler-not \"(?n)strlen\\(.*\\n\\)+.*strlen\\(.*\\n\\)+.*strlen\" { target hppa*-*-hpux* tic6x-*-* } } } */\n /* { dg-final { scan-assembler-not \"(?n)bl L_strlen\\(.*\\n\\)+.*bl L_strlen\" { target powerpc*-*-darwin* } } } */\n /* ia64-*-hpux* has a global statement, a type statement, and the branch. */\n /* { dg-final { scan-assembler-not \"(?n)strlen\\(.*\\n\\)+.*strlen\\(.*\\n\\)+.*strlen\\(.*\\n\\)+.*strlen\" { target ia64-*-hpux* } } } */"}, {"sha": "754d3f0b44286f493a432bc8f1ed16f45711ac22", "filename": "gcc/testsuite/gcc.dg/torture/builtin-math-7.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/294689c43b0989478659a616ab6a92d85156976c/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-math-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/294689c43b0989478659a616ab6a92d85156976c/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-math-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-math-7.c?ref=294689c43b0989478659a616ab6a92d85156976c", "patch": "@@ -5,6 +5,7 @@\n    Origin: Kaveh R. Ghazi,  August 13, 2009.  */\n \n /* { dg-do run } */\n+/* { dg-skip-if \"\" { tic6x-*-* } \"*\" \"\" } */\n /* { dg-add-options ieee } */\n /* { dg-require-effective-target large_double } */\n "}, {"sha": "c1b7a2b239e63936adb8f7605dbaed167e355d8f", "filename": "gcc/testsuite/gcc.dg/torture/pr37868.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/294689c43b0989478659a616ab6a92d85156976c/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr37868.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/294689c43b0989478659a616ab6a92d85156976c/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr37868.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr37868.c?ref=294689c43b0989478659a616ab6a92d85156976c", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do run } */\n /* { dg-options \"-fno-strict-aliasing\" } */\n-/* { dg-skip-if \"unaligned access\" { sparc*-*-* sh*-*-* } \"*\" \"\" } */\n+/* { dg-skip-if \"unaligned access\" { sparc*-*-* sh*-*-* tic6x-*-* } \"*\" \"\" } */\n \n extern void abort (void);\n #if (__SIZEOF_INT__ <= 2)"}, {"sha": "963c2f6825f7d15e652aa1ef7ce310551a767d6c", "filename": "gcc/testsuite/gcc.target/tic6x/abi-align-1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/294689c43b0989478659a616ab6a92d85156976c/gcc%2Ftestsuite%2Fgcc.target%2Ftic6x%2Fabi-align-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/294689c43b0989478659a616ab6a92d85156976c/gcc%2Ftestsuite%2Fgcc.target%2Ftic6x%2Fabi-align-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Ftic6x%2Fabi-align-1.c?ref=294689c43b0989478659a616ab6a92d85156976c", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do run } */\n+\n+/* common */\n+char c;\n+/* arrays must be 8 byte aligned, regardless of size */\n+char c_ary[1];\n+\n+/* data */\n+char d = 1;\n+char d_ary[1] = {1};\n+\n+int main ()\n+{\n+  if (((unsigned long)&c_ary[0] & 7) != 0)\n+    return 1;\n+  if (((unsigned long)&d_ary[0] & 7) != 0)\n+    return 1;\n+  return 0;\n+}"}, {"sha": "18d6bce7f21c4d0296b656cb330c74a8fe19a5a7", "filename": "gcc/testsuite/gcc.target/tic6x/bswapl.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/294689c43b0989478659a616ab6a92d85156976c/gcc%2Ftestsuite%2Fgcc.target%2Ftic6x%2Fbswapl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/294689c43b0989478659a616ab6a92d85156976c/gcc%2Ftestsuite%2Fgcc.target%2Ftic6x%2Fbswapl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Ftic6x%2Fbswapl.c?ref=294689c43b0989478659a616ab6a92d85156976c", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=c64x+\" } */\n+/* { dg-final { scan-assembler-not \"call\" } } */\n+\n+int foo (int x)\n+{\n+  return __builtin_bswap32 (x);\n+}\n+\n+long long bar (long long x)\n+{\n+  return __builtin_bswap64 (x);\n+}"}, {"sha": "a7deea3e22b76d762198f878838737a2f278d35a", "filename": "gcc/testsuite/gcc.target/tic6x/builtin-math-7.c", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/294689c43b0989478659a616ab6a92d85156976c/gcc%2Ftestsuite%2Fgcc.target%2Ftic6x%2Fbuiltin-math-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/294689c43b0989478659a616ab6a92d85156976c/gcc%2Ftestsuite%2Fgcc.target%2Ftic6x%2Fbuiltin-math-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Ftic6x%2Fbuiltin-math-7.c?ref=294689c43b0989478659a616ab6a92d85156976c", "patch": "@@ -0,0 +1,94 @@\n+/* Copyright (C) 2009  Free Software Foundation.\n+\n+   Verify that folding of complex mul and div work correctly.\n+   TI C6X specific version, reduced by two tests that fails due to the\n+   use of implicit -freciprocal-math.\n+\n+   Origin: Kaveh R. Ghazi,  August 13, 2009.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-add-options ieee } */\n+\n+extern void link_error(int);\n+\n+/* Evaluate this expression at compile-time.  */\n+#define COMPILETIME_TESTIT(TYPE,X,OP,Y,RES) do { \\\n+  if ((_Complex TYPE)(X) OP (_Complex TYPE)(Y) != (_Complex TYPE)(RES)) \\\n+    link_error(__LINE__); \\\n+} while (0)\n+\n+/* Use this error function for cases which only evaluate at\n+   compile-time when optimizing.  */\n+#ifdef __OPTIMIZE__\n+# define ERROR_FUNC(X) link_error(X)\n+#else\n+# define ERROR_FUNC(X) __builtin_abort()\n+#endif\n+\n+/* Evaluate this expression at compile-time using static initializers.  */\n+#define STATICINIT_TESTIT(TYPE,X,OP,Y,RES) do { \\\n+  static const _Complex TYPE foo = (_Complex TYPE)(X) OP (_Complex TYPE)(Y); \\\n+  if (foo != (_Complex TYPE)(RES)) \\\n+    ERROR_FUNC (__LINE__); \\\n+} while (0)\n+\n+/* Evaluate this expression at runtime.  */\n+#define RUNTIME_TESTIT(TYPE,X,OP,Y,RES) do { \\\n+  volatile _Complex TYPE foo; \\\n+  foo = (_Complex TYPE)(X); \\\n+  foo OP##= (_Complex TYPE)(Y); \\\n+  if (foo != (_Complex TYPE)(RES)) \\\n+    __builtin_abort(); \\\n+} while (0)\n+\n+/* Evaluate this expression at compile-time and runtime.  */\n+#define TESTIT(TYPE,X,OP,Y,RES) do { \\\n+  STATICINIT_TESTIT(TYPE,X,OP,Y,RES); \\\n+  COMPILETIME_TESTIT(TYPE,X,OP,Y,RES); \\\n+  RUNTIME_TESTIT(TYPE,X,OP,Y,RES); \\\n+} while (0)\n+\n+/* Either the real or imaginary parts should be infinity.  */\n+#define TEST_ONE_PART_INF(VAL) do { \\\n+  static const _Complex double foo = (VAL); \\\n+  if (! __builtin_isinf(__real foo) && ! __builtin_isinf(__imag foo)) \\\n+    ERROR_FUNC (__LINE__); \\\n+  if (! __builtin_isinf(__real (VAL)) && ! __builtin_isinf(__imag (VAL))) \\\n+    __builtin_abort(); \\\n+} while (0)\n+\n+int main()\n+{\n+  /* Test some regular finite values.  */\n+  TESTIT (double, 3.+4.i, *, 2, 6+8i);\n+  TESTIT (double, 3.+4.i, /, 2, 1.5+2i);\n+  TESTIT (int, 3+4i, *, 2, 6+8i);\n+  TESTIT (int, 3+4i, /, 2, 1+2i);\n+\n+  TESTIT (double, 3.+4.i, *, 2+5i, -14+23i);\n+  TESTIT (int, 3+4i, *, 2+5i, -14+23i);\n+  TESTIT (int, 30+40i, /, 5i, 8-6i);\n+  TESTIT (int, 14+6i, /, 7+3i, 2);\n+  TESTIT (int, 8+24i, /, 4+12i, 2);\n+\n+  /* Test for accuracy.  */\n+  COMPILETIME_TESTIT (double,\n+\t\t      (1 + __DBL_EPSILON__ + 1i),\n+\t\t      *,\n+\t\t      (1 - __DBL_EPSILON__ + 1i),\n+\t\t      -4.93038065763132378382330353301741393545754021943139377981e-32+2i);\n+\n+  /* This becomes (NaN + iInf).  */\n+#define VAL1 ((_Complex double)__builtin_inf() * 1i)\n+\n+  /* Test some C99 Annex G special cases.  */\n+  TEST_ONE_PART_INF ((VAL1) * (VAL1));\n+  TEST_ONE_PART_INF ((_Complex double)1 / (_Complex double)0);\n+  TEST_ONE_PART_INF ((VAL1) / (_Complex double)1);\n+\n+  RUNTIME_TESTIT (double, 1, /, VAL1, 0);\n+  STATICINIT_TESTIT (double, 1, /, VAL1, 0);\n+\n+  return 0;\n+}"}, {"sha": "5e52284463ccf3a03f570d0db768ea7d20b2cc08", "filename": "gcc/testsuite/gcc.target/tic6x/builtins/arith24.c", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/294689c43b0989478659a616ab6a92d85156976c/gcc%2Ftestsuite%2Fgcc.target%2Ftic6x%2Fbuiltins%2Farith24.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/294689c43b0989478659a616ab6a92d85156976c/gcc%2Ftestsuite%2Fgcc.target%2Ftic6x%2Fbuiltins%2Farith24.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Ftic6x%2Fbuiltins%2Farith24.c?ref=294689c43b0989478659a616ab6a92d85156976c", "patch": "@@ -0,0 +1,83 @@\n+/* { dg-require-effective-target ti_c64xp } */\n+\n+#include <c6x_intrinsics.h>\n+\n+extern void abort (void);\n+\n+typedef short  __v2hi __attribute ((vector_size(4)));\n+\n+int a = 0x5000d000;\n+int b = 0xc0002000;\n+int c = 0x40009000;\n+int d = 0x80000001;\n+int e = 0x50002001;\n+int f = 0xc0008000;\n+\n+int a4 = 0x50d03080;\n+int b4 = 0xc020f080;\n+int c4 = 0xc0202080;\n+int d4 = 0x50003080;\n+int e4 = 0xc0202180;\n+\n+int main ()\n+{\n+  int v;\n+  long long vll;\n+\n+  v = _add2 (a, b);\n+  if (v != 0x1000f000)\n+    abort ();\n+  v = _sub2 (a, b);\n+  if (v != 0x9000b000)\n+    abort ();\n+  v = _sub2 (b, a);\n+  if (v != 0x70005000)\n+    abort ();\n+\n+  v = _add4 (a4, b4);\n+  if (v != 0x10f02000)\n+    abort ();\n+  v = _sub4 (a4, b4);\n+  if (v != 0x90b04000)\n+    abort ();\n+  v = _saddu4 (a4, c4);\n+  if (v != 0xfff050ff)\n+    abort ();\n+\n+  v = _sadd2 (a, b);\n+  if (v != 0x1000f000)\n+    abort ();\n+  v = _sadd2 (a, c);\n+  if (v != 0x7fff8000)\n+    abort ();\n+\n+  v = _ssub2 (a, b);\n+  if (v != 0x7fffb000)\n+    abort ();\n+  v = _ssub2 (b, a);\n+  if (v != 0x80005000)\n+    abort ();\n+\n+  vll = _smpy2ll (a, b);\n+  if (vll != 0xd8000000f4000000ll)\n+    abort ();\n+  vll = _smpy2ll (d, d);\n+  if (vll != 0x7fffffff00000002ll)\n+    abort ();\n+\n+  v = _avg2 (b, e);\n+  if (v != 0x08002001)\n+    abort ();\n+  v = _avgu4 (d4, e4);\n+  if (v != 0x88102980)\n+    abort ();\n+\n+  v = _abs2 (a);\n+  if (v != 0x50003000)\n+    abort ();\n+  v = _abs2 (f);\n+  if (v != 0x40007fff)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "123dfdeaef8cb0e2d31f66d0ae77cdb25d5106d7", "filename": "gcc/testsuite/gcc.target/tic6x/builtins/c6x-builtins.exp", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/294689c43b0989478659a616ab6a92d85156976c/gcc%2Ftestsuite%2Fgcc.target%2Ftic6x%2Fbuiltins%2Fc6x-builtins.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/294689c43b0989478659a616ab6a92d85156976c/gcc%2Ftestsuite%2Fgcc.target%2Ftic6x%2Fbuiltins%2Fc6x-builtins.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Ftic6x%2Fbuiltins%2Fc6x-builtins.exp?ref=294689c43b0989478659a616ab6a92d85156976c", "patch": "@@ -0,0 +1,25 @@\n+# Copyright (C) 2009 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# GCC testsuite that uses the `c-torture.exp' driver, looping over\n+# optimization options.\n+\n+load_lib gcc-dg.exp\n+\n+dg-init\n+gcc-dg-runtest [lsort [glob $srcdir/$subdir/*.c]] \"\"\n+dg-finish\n+"}, {"sha": "e8e2139dddd94efbd837f9d65b1d8c0b1c5a167e", "filename": "gcc/testsuite/gcc.target/tic6x/builtins/extclr.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/294689c43b0989478659a616ab6a92d85156976c/gcc%2Ftestsuite%2Fgcc.target%2Ftic6x%2Fbuiltins%2Fextclr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/294689c43b0989478659a616ab6a92d85156976c/gcc%2Ftestsuite%2Fgcc.target%2Ftic6x%2Fbuiltins%2Fextclr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Ftic6x%2Fbuiltins%2Fextclr.c?ref=294689c43b0989478659a616ab6a92d85156976c", "patch": "@@ -0,0 +1,36 @@\n+#include <c6x_intrinsics.h>\n+\n+extern void abort (void);\n+\n+#define N 4\n+\n+int vals[N] = { 0, 0xffffffff, 0x89abcdef, 0xdeadbeef };\n+\n+int main ()\n+{\n+  int i;\n+  for (i = 0; i < N; i++)\n+    {\n+      int shf1, shf2;\n+      int v = vals[i];\n+      unsigned int uv = v;\n+\n+      for (shf1 = 0; shf1 < 32; shf1++)\n+\tfor (shf2 = 0; shf2 < 32; shf2++)\n+\t  {\n+\t    int r = (shf1 << 5) | shf2;\n+\t    if (shf2 > shf1)\n+\t      {\n+\t\tunsigned int mask = (1u << (shf2 - shf1) << 1) - 1;\n+\t\tmask <<= shf1;\n+\t\tif (_clrr (v, r) != (v & ~mask))\n+\t\t  abort ();\n+\t      }\n+\t    if (_extr (v, r) != v << shf1 >> shf2)\n+\t      abort ();\n+\t    if (_extru (v, r) != uv << shf1 >> shf2)\n+\t      abort ();\n+\t  }\n+    }\n+  return 0;\n+}"}, {"sha": "4ea35700377f0dd155888dc27553426413a04f0b", "filename": "gcc/testsuite/gcc.target/tic6x/builtins/sarith1.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/294689c43b0989478659a616ab6a92d85156976c/gcc%2Ftestsuite%2Fgcc.target%2Ftic6x%2Fbuiltins%2Fsarith1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/294689c43b0989478659a616ab6a92d85156976c/gcc%2Ftestsuite%2Fgcc.target%2Ftic6x%2Fbuiltins%2Fsarith1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Ftic6x%2Fbuiltins%2Fsarith1.c?ref=294689c43b0989478659a616ab6a92d85156976c", "patch": "@@ -0,0 +1,47 @@\n+#include <c6x_intrinsics.h>\n+\n+extern void abort (void);\n+\n+int a1 = 0x50000000;\n+int b1 = 0xc0000000;\n+int c1 = 0x40000000;\n+int a2 = 0xd0000000;\n+int b2 = 0x20000000;\n+int c2 = 0x90000000;\n+int d = 0x80000000;\n+\n+int main ()\n+{\n+  if (_sadd (a1, b1) != 0x10000000)\n+    abort ();\n+  if (_sadd (a2, b2) != 0xf0000000)\n+    abort ();\n+  if (_sadd (a1, c1) != 0x7fffffff)\n+    abort ();\n+  if (_sadd (a2, c2) != 0x80000000)\n+    abort ();\n+\n+  if (_ssub (a1, b1) != 0x7fffffff)\n+    abort ();\n+  if (_ssub (a2, b2) != 0xb0000000)\n+    abort ();\n+  if (_ssub (b1, a1) != 0x80000000)\n+    abort ();\n+  if (_ssub (b2, a2) != 0x50000000)\n+    abort ();\n+\n+  if (_abs (a1) != 0x50000000)\n+    abort ();\n+  if (_abs (b1) != 0x40000000)\n+    abort ();\n+  if (_abs (d) != 0x7fffffff)\n+    abort ();\n+\n+  if (_sshl (a1, 1) != 0x7fffffff\n+      || _sshl (b2, 1) != 0x40000000\n+      || _sshl (a2, 1) != 0xa0000000\n+      || _sshl (a2, 4) != 0x80000000)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "15a993045ca9dc5eb4270e65065fb74a4e6cdf42", "filename": "gcc/testsuite/gcc.target/tic6x/builtins/smpy.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/294689c43b0989478659a616ab6a92d85156976c/gcc%2Ftestsuite%2Fgcc.target%2Ftic6x%2Fbuiltins%2Fsmpy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/294689c43b0989478659a616ab6a92d85156976c/gcc%2Ftestsuite%2Fgcc.target%2Ftic6x%2Fbuiltins%2Fsmpy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Ftic6x%2Fbuiltins%2Fsmpy.c?ref=294689c43b0989478659a616ab6a92d85156976c", "patch": "@@ -0,0 +1,20 @@\n+#include <c6x_intrinsics.h>\n+\n+extern void abort (void);\n+\n+int a1 = 0x5000;\n+int b1 = 0xc000;\n+int a2 = 0xd000;\n+int b2 = 0x2000;\n+int c = 0x8000;\n+int main ()\n+{\n+  if (_smpy (a1, b1) != 0xd8000000)\n+    abort ();\n+  if (_smpy (a2, b2) != 0xf4000000)\n+    abort ();\n+  if (_smpy (c, c) != 0x7fffffff)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "c8864da6252f4612c209f0b5f03b84230d8742d1", "filename": "gcc/testsuite/gcc.target/tic6x/builtins/smpyh.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/294689c43b0989478659a616ab6a92d85156976c/gcc%2Ftestsuite%2Fgcc.target%2Ftic6x%2Fbuiltins%2Fsmpyh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/294689c43b0989478659a616ab6a92d85156976c/gcc%2Ftestsuite%2Fgcc.target%2Ftic6x%2Fbuiltins%2Fsmpyh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Ftic6x%2Fbuiltins%2Fsmpyh.c?ref=294689c43b0989478659a616ab6a92d85156976c", "patch": "@@ -0,0 +1,19 @@\n+#include <c6x_intrinsics.h>\n+extern void abort (void);\n+\n+int a1 = 0x50000000;\n+int b1 = 0xc0000000;\n+int a2 = 0xd0000000;\n+int b2 = 0x20000000;\n+int c = 0x80000000;\n+int main ()\n+{\n+  if (_smpyh (a1, b1) != 0xd8000000)\n+    abort ();\n+  if (_smpyh (a2, b2) != 0xf4000000)\n+    abort ();\n+  if (_smpyh (c, c) != 0x7fffffff)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "92a50433e222b2693b9dbe954f8dbcd11d2ca06a", "filename": "gcc/testsuite/gcc.target/tic6x/builtins/smpylh.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/294689c43b0989478659a616ab6a92d85156976c/gcc%2Ftestsuite%2Fgcc.target%2Ftic6x%2Fbuiltins%2Fsmpylh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/294689c43b0989478659a616ab6a92d85156976c/gcc%2Ftestsuite%2Fgcc.target%2Ftic6x%2Fbuiltins%2Fsmpylh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Ftic6x%2Fbuiltins%2Fsmpylh.c?ref=294689c43b0989478659a616ab6a92d85156976c", "patch": "@@ -0,0 +1,26 @@\n+#include <c6x_intrinsics.h>\n+\n+extern void abort (void);\n+\n+int a1 = 0x5000;\n+int b1 = 0xc0000000;\n+int a2 = 0xd000;\n+int b2 = 0x20000000;\n+int c = 0x8000;\n+int main ()\n+{\n+  if (_smpylh (a1, b1) != 0xd8000000)\n+    abort ();\n+  if (_smpylh (a2, b2) != 0xf4000000)\n+    abort ();\n+  if (_smpylh (c, 0x80000000) != 0x7fffffff)\n+    abort ();\n+  if (_smpyhl (b1, a1) != 0xd8000000)\n+    abort ();\n+  if (_smpyhl (b2, a2) != 0xf4000000)\n+    abort ();\n+  if (_smpyhl (0x80000000, c) != 0x7fffffff)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "6793f360de549d940e55383b2b095ad524abf2fe", "filename": "gcc/testsuite/gcc.target/tic6x/cold-lc.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/294689c43b0989478659a616ab6a92d85156976c/gcc%2Ftestsuite%2Fgcc.target%2Ftic6x%2Fcold-lc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/294689c43b0989478659a616ab6a92d85156976c/gcc%2Ftestsuite%2Fgcc.target%2Ftic6x%2Fcold-lc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Ftic6x%2Fcold-lc.c?ref=294689c43b0989478659a616ab6a92d85156976c", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mlong-calls\" } */\n+\n+extern void dump_stack (void) __attribute__ ((__cold__));\n+struct thread_info {\n+    struct task_struct *task;\n+};\n+extern struct thread_info *current_thread_info (void);\n+\n+void dump_stack (void)\n+{\n+    unsigned long stack;\n+    show_stack ((current_thread_info ()->task), &stack);\n+}\n+\n+void die (char *str, void *fp, int nr)\n+{\n+    dump_stack ();\n+    while (1);\n+}\n+"}, {"sha": "6f61be5ae8ae157007ed4e32e7962b78d5fca04e", "filename": "gcc/testsuite/gcc.target/tic6x/ffsdi.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/294689c43b0989478659a616ab6a92d85156976c/gcc%2Ftestsuite%2Fgcc.target%2Ftic6x%2Fffsdi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/294689c43b0989478659a616ab6a92d85156976c/gcc%2Ftestsuite%2Fgcc.target%2Ftic6x%2Fffsdi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Ftic6x%2Fffsdi.c?ref=294689c43b0989478659a616ab6a92d85156976c", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ti_c64xp } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler-not \"call\" } } */\n+\n+long long foo (long long x)\n+{\n+  return __builtin_ffsll (x);\n+}\n+\n+long long bar (long long x)\n+{\n+  return __builtin_clzll (x);\n+}\n+\n+long long baz (long long x)\n+{\n+  return __builtin_ctzll (x);\n+}"}, {"sha": "bb8351293793ad41e938120e45f2d20ef6ebad18", "filename": "gcc/testsuite/gcc.target/tic6x/ffssi.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/294689c43b0989478659a616ab6a92d85156976c/gcc%2Ftestsuite%2Fgcc.target%2Ftic6x%2Fffssi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/294689c43b0989478659a616ab6a92d85156976c/gcc%2Ftestsuite%2Fgcc.target%2Ftic6x%2Fffssi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Ftic6x%2Fffssi.c?ref=294689c43b0989478659a616ab6a92d85156976c", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=c64x+\" } */\n+/* { dg-final { scan-assembler-not \"call\" } } */\n+\n+int foo (int x)\n+{\n+  return __builtin_ffsl (x);\n+}\n+\n+int bar (int x)\n+{\n+  return __builtin_clzl (x);\n+}\n+\n+int baz (int x)\n+{\n+  return __builtin_ctzl (x);\n+}"}, {"sha": "d7f30165cc28370f8baeed1d6088c052b77e50a0", "filename": "gcc/testsuite/gcc.target/tic6x/fpcmp-finite.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/294689c43b0989478659a616ab6a92d85156976c/gcc%2Ftestsuite%2Fgcc.target%2Ftic6x%2Ffpcmp-finite.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/294689c43b0989478659a616ab6a92d85156976c/gcc%2Ftestsuite%2Fgcc.target%2Ftic6x%2Ffpcmp-finite.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Ftic6x%2Ffpcmp-finite.c?ref=294689c43b0989478659a616ab6a92d85156976c", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ti_c67x } */\n+/* { dg-options \"-O2 -ffinite-math-only\" } */\n+/* { dg-final { scan-assembler-not \"cmpeq\" } } */\n+\n+double gedf (double x, double y)\n+{\n+  return x >= y;\n+}\n+\n+double ledf (double x, double y)\n+{\n+  return x <= y;\n+}\n+\n+float gesf (float x, float y)\n+{\n+  return x >= y;\n+}\n+\n+float lesf (float x, float y)\n+{\n+  return x <= y;\n+}"}, {"sha": "25eaff4109dc43164ed33ee372cab2aa5eeedb9e", "filename": "gcc/testsuite/gcc.target/tic6x/fpcmp.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/294689c43b0989478659a616ab6a92d85156976c/gcc%2Ftestsuite%2Fgcc.target%2Ftic6x%2Ffpcmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/294689c43b0989478659a616ab6a92d85156976c/gcc%2Ftestsuite%2Fgcc.target%2Ftic6x%2Ffpcmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Ftic6x%2Ffpcmp.c?ref=294689c43b0989478659a616ab6a92d85156976c", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ti_c67x } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler-times \"cmpeq.p\" 4 } } */\n+\n+double gedf (double x, double y)\n+{\n+  return x >= y;\n+}\n+\n+double ledf (double x, double y)\n+{\n+  return x <= y;\n+}\n+\n+float gesf (float x, float y)\n+{\n+  return x >= y;\n+}\n+\n+float lesf (float x, float y)\n+{\n+  return x <= y;\n+}"}, {"sha": "b138865a2ac62349cdfa74cfa8c819080816e1f8", "filename": "gcc/testsuite/gcc.target/tic6x/fpdiv-lib.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/294689c43b0989478659a616ab6a92d85156976c/gcc%2Ftestsuite%2Fgcc.target%2Ftic6x%2Ffpdiv-lib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/294689c43b0989478659a616ab6a92d85156976c/gcc%2Ftestsuite%2Fgcc.target%2Ftic6x%2Ffpdiv-lib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Ftic6x%2Ffpdiv-lib.c?ref=294689c43b0989478659a616ab6a92d85156976c", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ti_c67x } */\n+/* { dg-options \"-O2 -fno-reciprocal-math\" } */\n+/* { dg-final { scan-assembler-not \"rcpdp\" } } */\n+/* { dg-final { scan-assembler-not \"rcpsp\" } } */\n+\n+double f (double x, double y)\n+{\n+  return x / y;\n+}\n+\n+float g (float x, float y)\n+{\n+  return x / y;\n+}"}, {"sha": "e547fb457171e86fef099306707251885697f723", "filename": "gcc/testsuite/gcc.target/tic6x/fpdiv.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/294689c43b0989478659a616ab6a92d85156976c/gcc%2Ftestsuite%2Fgcc.target%2Ftic6x%2Ffpdiv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/294689c43b0989478659a616ab6a92d85156976c/gcc%2Ftestsuite%2Fgcc.target%2Ftic6x%2Ffpdiv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Ftic6x%2Ffpdiv.c?ref=294689c43b0989478659a616ab6a92d85156976c", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ti_c67x } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler \"rcpdp\" } } */\n+/* { dg-final { scan-assembler \"rcpsp\" } } */\n+\n+double f (double x, double y)\n+{\n+  return x / y;\n+}\n+\n+float g (float x, float y)\n+{\n+  return x / y;\n+}"}, {"sha": "273433ceed5e60113cbbac36279b3b3ad6e10848", "filename": "gcc/testsuite/gcc.target/tic6x/longcalls.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/294689c43b0989478659a616ab6a92d85156976c/gcc%2Ftestsuite%2Fgcc.target%2Ftic6x%2Flongcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/294689c43b0989478659a616ab6a92d85156976c/gcc%2Ftestsuite%2Fgcc.target%2Ftic6x%2Flongcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Ftic6x%2Flongcalls.c?ref=294689c43b0989478659a616ab6a92d85156976c", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mlong-calls\" } */\n+/* { dg-final { scan-assembler-times \"\\\\tcall\\[p\\]*\\[\\\\t ]*.s\" 3 } } */\n+/* { dg-final { scan-assembler \"call\\[p\\]*\\[\\\\t ]*.s.\\[\\\\t ]*.f\" } } */\n+/* { dg-final { scan-assembler-not \"call\\[p\\]*\\[\\\\t ]*.s.\\[\\\\t ]*.g\" } } */\n+/* { dg-final { scan-assembler-not \"call\\[p\\]*\\[\\\\t ]*.s.\\[\\\\t ]*.h\" } } */\n+\n+int x;\n+\n+static __attribute__ ((noinline)) void f ()\n+{\n+  x = 5;\n+}\n+\n+extern void g ();\n+\n+static __attribute__ ((noinline)) __attribute__((section(\".init.text\"))) void h ()\n+{\n+  x = 5;\n+}\n+\n+int bar ()\n+{\n+  f ();\n+  g ();\n+  h ();\n+}"}, {"sha": "4d7816c15373152b057993091550c8f485b46a59", "filename": "gcc/testsuite/gcc.target/tic6x/rotdi16-scan.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/294689c43b0989478659a616ab6a92d85156976c/gcc%2Ftestsuite%2Fgcc.target%2Ftic6x%2Frotdi16-scan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/294689c43b0989478659a616ab6a92d85156976c/gcc%2Ftestsuite%2Fgcc.target%2Ftic6x%2Frotdi16-scan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Ftic6x%2Frotdi16-scan.c?ref=294689c43b0989478659a616ab6a92d85156976c", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ti_c64xp } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler \"dpackx\" } } */\n+\n+#include <stdlib.h>\n+\n+unsigned long long z = 0x012389ab4567cdefull;\n+\n+int main ()\n+{\n+  unsigned long long z2 = (z << 48) | (z >> 16);\n+  if (z2 != 0xcdef012389ab4567ull)\n+    abort ();\n+  exit (0);\n+}"}, {"sha": "33b052ad4326c55f52918176b07395cf74ffa142", "filename": "gcc/testsuite/gcc.target/tic6x/rotdi16.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/294689c43b0989478659a616ab6a92d85156976c/gcc%2Ftestsuite%2Fgcc.target%2Ftic6x%2Frotdi16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/294689c43b0989478659a616ab6a92d85156976c/gcc%2Ftestsuite%2Fgcc.target%2Ftic6x%2Frotdi16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Ftic6x%2Frotdi16.c?ref=294689c43b0989478659a616ab6a92d85156976c", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+#include <stdlib.h>\n+\n+unsigned long long z = 0x012389ab4567cdefull;\n+\n+int main ()\n+{\n+  unsigned long long z2 = (z << 48) | (z >> 16);\n+  if (z2 != 0xcdef012389ab4567ull)\n+    abort ();\n+  exit (0);\n+}"}, {"sha": "f9d1c7a1620ed7e0a243146422bce1d1492bc444", "filename": "gcc/testsuite/gcc.target/tic6x/tic6x.exp", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/294689c43b0989478659a616ab6a92d85156976c/gcc%2Ftestsuite%2Fgcc.target%2Ftic6x%2Ftic6x.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/294689c43b0989478659a616ab6a92d85156976c/gcc%2Ftestsuite%2Fgcc.target%2Ftic6x%2Ftic6x.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Ftic6x%2Ftic6x.exp?ref=294689c43b0989478659a616ab6a92d85156976c", "patch": "@@ -0,0 +1,62 @@\n+# Copyright (C) 2010 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# GCC testsuite that uses the `dg.exp' driver.\n+\n+if ![istarget tic6x-*-*] then {\n+  return\n+}\n+\n+# Load support procs.\n+load_lib gcc-dg.exp\n+\n+# Like dg-options, but treats certain C6X-specific options specially:\n+#\n+#    -march=*\n+#\tSelect the target architecture. Skip the test if the multilib\n+#\tflags force a different arch.\n+proc dg-c6x-options {args} {\n+    upvar dg-extra-tool-flags extra_tool_flags\n+    upvar dg-do-what do_what\n+\n+    set multilib_arch \"\"\n+    set arch \"\"\n+\n+    foreach flag [target_info multilib_flags] {\n+\tregexp \"^-march=(.*)\" $flag dummy multilib_arch\n+    }\n+\n+    set flags [lindex $args 1]\n+\n+    foreach flag $flags {\n+\tregexp \"^-march=(.*)\" $flag dummy arch\n+    }\n+\n+    if {$multilib_arch == \"\" || $multilib_cpu == $arch} {\n+\tset extra_tool_flags $flags\n+    } else {\n+\tset do_what [list [lindex $do_what 0] \"N\" \"P\"]\n+    }\n+}\n+\n+# Initialize `dg'.\n+dg-init\n+\n+# Main loop.\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.\\[cCS\\]]]\t\"\" \"\"\n+\n+# All done.\n+dg-finish"}, {"sha": "9be9304800f925a41d9504adc1ee3b3fdeec1f11", "filename": "gcc/testsuite/gcc.target/tic6x/weak-call.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/294689c43b0989478659a616ab6a92d85156976c/gcc%2Ftestsuite%2Fgcc.target%2Ftic6x%2Fweak-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/294689c43b0989478659a616ab6a92d85156976c/gcc%2Ftestsuite%2Fgcc.target%2Ftic6x%2Fweak-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Ftic6x%2Fweak-call.c?ref=294689c43b0989478659a616ab6a92d85156976c", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler-not \"call\\[\\\\t ]*.s.\\[\\\\t ]*.f\" } } */\n+/* { dg-final { scan-assembler-not \"call\\[\\\\t ]*.s.\\[\\\\t ]*.g\" } } */\n+\n+extern void f () __attribute__ ((weak));\n+extern void g () __attribute__ ((weak)) __attribute__ ((noinline));\n+\n+void g ()\n+{\n+}\n+\n+int main ()\n+{\n+  f ();\n+  g ();\n+}"}, {"sha": "213118503c5048d53fa8340f91cf9f69edb04bca", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/294689c43b0989478659a616ab6a92d85156976c/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/294689c43b0989478659a616ab6a92d85156976c/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=294689c43b0989478659a616ab6a92d85156976c", "patch": "@@ -568,6 +568,7 @@ proc check_profiling_available { test_what } {\n \t     || [istarget powerpc-*-eabi*]\n \t     || [istarget powerpc-*-elf]\n \t     || [istarget rx-*-*]\t\n+\t     || [istarget tic6x-*-elf]\n \t     || [istarget xstormy16-*]\n \t     || [istarget xtensa*-*-elf]\n \t     || [istarget *-*-netware*]\n@@ -1398,6 +1399,25 @@ proc check_effective_target_broken_cplxf_arg { } {\n     }]\n }\n \n+# Return 1 is this is a TI C6X target supporting C67X instructions\n+proc check_effective_target_ti_c67x { } {\n+    return [check_no_compiler_messages ti_c67x assembly {\n+\t#if !defined(_TMS320C6700)\n+\t#error FOO\n+\t#endif\n+    }]\n+}\n+\n+# Return 1 is this is a TI C6X target supporting C64X+ instructions\n+proc check_effective_target_ti_c64xp { } {\n+    return [check_no_compiler_messages ti_c64xp assembly {\n+\t#if !defined(_TMS320C6400_PLUS)\n+\t#error FOO\n+\t#endif\n+    }]\n+}\n+\n+\n proc check_alpha_max_hw_available { } {\n     return [check_runtime alpha_max_hw_available {\n \tint main() { return __builtin_alpha_amask(1<<8) != 0; }"}]}