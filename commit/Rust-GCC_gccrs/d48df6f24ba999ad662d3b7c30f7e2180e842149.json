{"sha": "d48df6f24ba999ad662d3b7c30f7e2180e842149", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQ4ZGY2ZjI0YmE5OTlhZDY2MmQzYjdjMzBmN2UyMTgwZTg0MjE0OQ==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-11-27T00:16:31Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-11-27T00:16:31Z"}, "message": "Daily bump.", "tree": {"sha": "7b747bf96eaeab5d6271dde0405ad801f5ef139c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b747bf96eaeab5d6271dde0405ad801f5ef139c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d48df6f24ba999ad662d3b7c30f7e2180e842149", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d48df6f24ba999ad662d3b7c30f7e2180e842149", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d48df6f24ba999ad662d3b7c30f7e2180e842149", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d48df6f24ba999ad662d3b7c30f7e2180e842149/comments", "author": null, "committer": null, "parents": [{"sha": "61c71a62453e4f2def5d94bdb2b293fcec463c14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61c71a62453e4f2def5d94bdb2b293fcec463c14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61c71a62453e4f2def5d94bdb2b293fcec463c14"}], "stats": {"total": 708, "additions": 707, "deletions": 1}, "files": [{"sha": "672353c3f1c416f4408ed77ad9b390ad4697192a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48df6f24ba999ad662d3b7c30f7e2180e842149/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48df6f24ba999ad662d3b7c30f7e2180e842149/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d48df6f24ba999ad662d3b7c30f7e2180e842149", "patch": "@@ -1,3 +1,115 @@\n+2020-11-26  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR target/96607\n+\t* config/sparc/sparc-protos.h (eligible_for_call_delay): Delete.\n+\t* config/sparc/sparc.c (eligible_for_call_delay): Likewise.\n+\t* config/sparc/sparc.md (in_call_delay): Likewise.\n+\t(tls_delay_slot): New attribute.\n+\t(define_delay [call]): Use in_branch_delay.\n+\t(tgd_call<P:mode>): Set type to call_no_delay_slot when\n+\ttls_delay_slot is false.\n+\t(tldm_call<P:mode>): Likewise.\n+\n+2020-11-26  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/97997\n+\t* match.pd ((t * 2) / 2) -> t): Optimize even for defined\n+\toverflow if ranges prove there is no overflow.\n+\n+2020-11-26  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97953\n+\t* gimple-ssa-evrp-analyze.c\n+\t(evrp_range_analyzer::record_ranges_from_incoming_edge): Make\n+\tsure the condition post-dominates the SSA definition before\n+\trecording into SSA_NAME_RANGE_INFO.\n+\n+2020-11-26  Richard Biener  <rguenther@suse.de>\n+\n+\t* gimple-isel.cc (gimple_expand_vec_cond_expr): Only\n+\tlower VECTOR_BOOLEAN_TYPE_P VEC_COND_EXPRs.\n+\n+2020-11-26  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* config/gcn/mkoffload.c (copy_early_debug_info): Don't wipe\n+\trelocation symbols.\n+\n+2020-11-26  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386-expand.c (ix86_expand_multi_arg_builtin):\n+\tRemove args array of structs, declare rtx xops array instead.\n+\tUpdate all uses.\n+\t(ix86_expand_args_builtin): Ditto.\n+\t(ix86_expand_round_builtin): Ditto.\n+\t(ix86_expand_special_args_builtin): Ditto.\n+\n+2020-11-26  Martin Liska  <mliska@suse.cz>\n+\n+\t* dwarf2out.c (gen_compile_unit_die): Fix missing == 0 in a\n+\tstrcmp.\n+\n+2020-11-26  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* config/sol2.h (TIME_LIBRARY): Remove.\n+\n+2020-11-26  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_option_override_internal):\n+\tSet param_vect_partial_vector_usage as 1 for Power10 and up\n+\tby default.\n+\n+2020-11-26  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gimple-fold.c (clear_padding_union): Ignore DECL_PADDING_P\n+\tfields.\n+\t(clear_padding_type): Ignore DECL_PADDING_P fields, rather than\n+\tDECL_BIT_FIELD with NULL DECL_NAME.\n+\n+2020-11-26  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/97979\n+\t* match.pd ((X {&,^,|} C2) << C1 into (X << C1) {&,^,|} (C2 << C1)):\n+\tOnly optimize if int_const_binop returned non-NULL.\n+\n+2020-11-26  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* config/i386/i386-expand.c\n+\t(ix86_expand_special_args_builtin): Delete last_arg_constant\n+\tand match.\n+\n+2020-11-26  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/97873\n+\t* config/i386/i386.md (abs<mode>2): Use SDWIM mode iterator.\n+\t(*abs<mode>2_1): Use SWI mode iterator.\n+\t(<maxmin:code><mode>3): Use SDWIM mode iterator.\n+\t(*<maxmin:code><mode>3_1): Use SWI mode iterator.\n+\n+2020-11-26  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/96906\n+\t* config/i386/sse.md (VI12_AVX2): Remove V64QI/V32HI modes.\n+\t(VI12_AVX2_AVX512BW): New mode iterator.\n+\t(<sse2_avx2>_<plusminus_insn><mode>3<mask_name>,\n+\tuavg<mode>3_ceil, <sse2_avx2>_uavg<mode>3<mask_name>): Use\n+\tVI12_AVX2_AVX512BW iterator instead of VI12_AVX2.\n+\t(*<sse2_avx2>_<plusminus_insn><mode>3<mask_name>): Likewise.\n+\t(*<sse2_avx2>_uavg<mode>3<mask_name>): Likewise.\n+\t(*<sse2_avx2>_<plusminus_insn><mode>3<mask_name>): Add a new\n+\tdefine_split after this insn.\n+\n+2020-11-26  Martin Uecker  <muecker@gwdg.de>\n+\n+\tPR c/65455\n+\tPR c/92935\n+\t* ginclude/stdatomic.h: Use comma operator to drop qualifiers.\n+\n+2020-11-26  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR bootstrap/97983\n+\t* lra.c (lra_process_new_insns): Use emit_insn_before_noloc or\n+\temit_insn_after_noloc with the destination BB.\n+\n 2020-11-25  Martin Sebor  <msebor@redhat.com>\n \n \tPR bootstrap/97622"}, {"sha": "5476fe043d67b7f1ee6fa675706cea012531e4ad", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48df6f24ba999ad662d3b7c30f7e2180e842149/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48df6f24ba999ad662d3b7c30f7e2180e842149/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=d48df6f24ba999ad662d3b7c30f7e2180e842149", "patch": "@@ -1 +1 @@\n-20201126\n+20201127"}, {"sha": "4ebac34f8113e1b6b872cf69849f19d48aebb552", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 396, "deletions": 0, "changes": 396, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48df6f24ba999ad662d3b7c30f7e2180e842149/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48df6f24ba999ad662d3b7c30f7e2180e842149/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d48df6f24ba999ad662d3b7c30f7e2180e842149", "patch": "@@ -1,3 +1,399 @@\n+2020-11-26  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* Makefile.rtl <sparc*-sun-solaris*> (THREADSLIB): Remove.\n+\t(MISCLIB): Remove -lposix4.\n+\t<*86-*-solaris2*>: Likewise.\n+\t* libgnarl/s-osinte__solaris.ads (System.OS_Interface): Remove\n+\t-lposix4 -lthread.\n+\n+2020-11-26  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* libgnat/a-nbnbre.adb (To_Big_Real): Do not loose precision.\n+\n+2020-11-26  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_ch8.adb (Analyze_Object_Renaming): Check for AI12-0401.\n+\n+2020-11-26  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* Makefile.rtl (GNATRTL_NONTASKING_OBJS): Likewise.\n+\t(GNATRTL_128BIT_OBJS): Likewise.\n+\t(GNATRTL_128BIT_PAIRS): Add new 128-bit variants.\n+\t* cstand.adb (Create_Standard): Create Standard_Integer_128.\n+\t* doc/gnat_rm/implementation_defined_characteristics.rst: Document\n+\tnew limits on 64-bit platforms in entry for 3.5.9(10).\n+\t* gnat_rm.texi: Regenerate.\n+\t* exp_attr.adb: Add with and use clauses for Urealp.\n+\t(Expand_N_Attribute_Reference) <Attribute_Fore>: Call new routines\n+\tfor decimal fixed-point types and common ordinary fixed-point types.\n+\t* exp_ch4.adb (Real_Range_Check): Extend conversion trick to all\n+\tordinary fixed-point types and use Small_Integer_Type_For.\n+\t* exp_fixd.adb: Add with and use clauses for Ttypes.\n+\t(Build_Divide): Add special case for 32-bit values and deal with\n+\t128-bit types.\n+\t(Build_Double_Divide): Deal with 128-bit types.\n+\t(Build_Double_Divide_Code): Likewise.  Do not apply conversions\n+\tbefore calling Build_Multiply.\n+\t(Build_Multiply): Likewise.  Add special case for 32-bit values.\n+\t(Build_Scaled_Divide): Deal with 128-bit types.\n+\t(Build_Scaled_Divide_Code): Likewise.  Fix size computation.  Do not\n+\tapply conversions before calling Build_Multiply.\n+\t(Do_Multiply_Fixed_Fixed): Minor tweak.\n+\t(Integer_Literal): Deal with 128-bit values.\n+\t* exp_imgv.adb (Has_Decimal_Small): Delete.\n+\t(Expand_Image_Attribute): Call new routines for common ordinary\n+\tfixed-point types.\n+\t(Expand_Value_Attribute): Likewise.\n+\t(Expand_Width_Attribute): Add new expansion for fixed-point types.\n+\t* freeze.adb (Freeze_Entity): Move error checks for ordinary\n+\tfixed-point types to...\n+\t(Freeze_Fixed_Point_Type): ...here.  Deal with 128-bit types and\n+\tadjust limitations for 32-bnt and 64-bit types.\n+\t* rtsfind.ads (RTU_Id): Add entries for new System_Fore, System_Img,\n+\tand System_Val units and remove them for obsolete units.\n+\t(RE_Id): Add entries for Double_Divide128, Scaled_Divide128, the new\n+\tFore, Image, Value routines and remove them for obsolete units.\n+\t(RE_Unit_Table): Likewise.\n+\t* sem_ch3.adb (Decimal_Fixed_Point_Type_Declaration): Deal with\n+\t128-bit types.\n+\t* stand.ads (Standard_Entity_Type): Add Standard_Integer_128.\n+\t* uintp.ads (Uint_31): New deferred constant.\n+\t(Uint_Minus_18): Likewise.\n+\t(Uint_Minus_31): Likewise.\n+\t(Uint_Minus_76): Likewise.\n+\t(Uint_Minus_127): Likewise.\n+\t* urealp.ads (Ureal_2_31): New function.\n+\t(Ureal_2_63): Likewise.\n+\t(Ureal_2_127): Likewise.\n+\t(Ureal_2_M_127): Likewise.\n+\t(Ureal_2_10_18): Likewise.\n+\t(Ureal_M_2_10_18): Likewise.\n+\t(Ureal_9_10_36): Likewise.\n+\t(Ureal_M_9_10_36): Likewise.\n+\t(Ureal_10_76): Likewise.\n+\t(Ureal_M_10_76): Likewise.\n+\t(Ureal_10_36): Delete.\n+\t(Ureal_M_10_36): Likewise.\n+\t* urealp.adb (UR_2_10_18): New variable.\n+\t(UR_9_10_36): Likewise.\n+\t(UR_10_76): Likewise.\n+\t(UR_M_2_10_18): Likewise.\n+\t(UR_M_9_10_36): Likewise.\n+\t(UR_M_10_76): Likewise.\n+\t(UR_2_31): Likewise.\n+\t(UR_2_63): Likewise.\n+\t(UR_2_127): Likewise.\n+\t(UR_2_M_127): Likewise.\n+\t(UR_10_36): Delete.\n+\t(UR_M_10_36): Likewise.\n+\t(Initialize): Initialize them.\n+\t(UR_Write): Do not use awkward Ada literal style.\n+\t(Ureal_2_10_18): New function.\n+\t(Ureal_9_10_36): Likewise.\n+\t(Ureal_10_76): Likewise.\n+\t(Ureal_2_31): Likewise.\n+\t(Ureal_2_63): Likewise.\n+\t(Ureal_2_127): Likewise.\n+\t(Ureal_2_M_127): Likewise.\n+\t(Ureal_M_2_10_18): Likewise.\n+\t(Ureal_M_9_10_36): Likewise.\n+\t(Ureal_10_76): Likewise.\n+\t(Ureal_M_10_76): Likewise.\n+\t(Ureal_10_36): Delete.\n+\t(Ureal_M_10_36): Likewise.\n+\t* libgnat/a-decima__128.ads: New file.\n+\t* libgnat/a-tideau.ads, libgnat/a-tideau.adb: Reimplement as\n+\tgeneric unit.\n+\t* libgnat/a-tideio.adb: Reimplement.\n+\t* libgnat/a-tideio__128.adb: New file.\n+\t* libgnat/a-tifiau.ads, libgnat/a-tifiau.adb: New generic unit.\n+\t* libgnat/a-tifiio.adb: Move bulk of implementation to s-imagef\n+\tand reimplement.\n+\t* libgnat/a-tifiio__128.adb: New file.\n+\t* libgnat/a-tiflau.adb (Get): Minor consistency fix.\n+\t(Gets): Likewise.\n+\t* libgnat/a-wtdeau.ads, libgnat/a-wtdeau.adb: Reimplement as\n+\tgeneric unit.\n+\t* libgnat/a-wtdeio.adb: Reimplement.\n+\t* libgnat/a-wtdeio__128.adb: New file.\n+\t* libgnat/a-wtfiau.ads, libgnat/a-wtfiau.adb: New generic unit.\n+\t* libgnat/a-wtfiio.adb: Reimplement.\n+\t* libgnat/a-wtfiio__128.adb: New file.\n+\t* libgnat/a-ztdeau.ads, libgnat/a-ztdeau.adb: Reimplement as\n+\tgeneric unit.\n+\t* libgnat/a-ztdeio.adb: Reimplement.\n+\t* libgnat/a-ztdeio__128.adb: New file.\n+\t* libgnat/a-ztfiau.ads, libgnat/a-ztfiau.adb: New generic unit.\n+\t* libgnat/a-ztfiio.adb: Reimplement.\n+\t* libgnat/a-ztfiio__128.adb: New file.\n+\t* libgnat/g-rannum.adb (Random_Decimal_Fixed): Use a subtype of the\n+\tappropiate size for the instantiation.\n+\t(Random_Ordinary_Fixed): Likewise.\n+\t* libgnat/s-arit32.ads, libgnat/s-arit32.adb: New support unit.\n+\t* libgnat/s-fode128.ads: New instantiation.\n+\t* libgnat/s-fode32.ads: Likewise.\n+\t* libgnat/s-fode64.ads: Likewise.\n+\t* libgnat/s-fofi128.ads: Likewise.\n+\t* libgnat/s-fofi32.ads: Likewise.\n+\t* libgnat/s-fofi64.ads: Likewise.\n+\t* libgnat/s-fore_d.ads, libgnat/s-fore_d.adb: New generic unit.\n+\t* libgnat/s-fore_f.ads, libgnat/s-fore_f.adb: Likewise.\n+\t* libgnat/s-fore.ads, libgnat/s-fore.adb: Rename into...\n+\t* libgnat/s-forrea.ads, libgnat/s-forrea.adb: ...this.\n+\t* libgnat/s-imaged.ads, libgnat/s-imaged.adb: New generic unit.\n+\t* libgnat/s-imagef.ads, libgnat/s-imagef.adb: Likewise, taken\n+\tfrom a-tifiio.adb.\n+\t* libgnat/s-imde128.ads: New instantiation.\n+\t* libgnat/s-imde32.ads: Likewise.\n+\t* libgnat/s-imde64.ads: Likewise.\n+\t* libgnat/s-imfi128.ads: Likewise.\n+\t* libgnat/s-imfi32.ads: Likewise.\n+\t* libgnat/s-imfi64.ads: Likewise.\n+\t* libgnat/s-imgdec.ads, libgnat/s-imgdec.adb: Delete.\n+\t* libgnat/s-imglld.ads, libgnat/s-imglld.adb: Likewise.\n+\t* libgnat/s-imgrea.adb (Set_Image_Real): Replace Sign local variable\n+\twith Minus local variable for the sake of consistency.\n+\t* libgnat/s-imguti.ads, libgnat/s-imguti.adb: New support unit.\n+\t* libgnat/s-vade128.ads: New instantiation.\n+\t* libgnat/s-vade32.ads: Likewise.\n+\t* libgnat/s-vade64.ads: Likewise.\n+\t* libgnat/s-vafi128.ads: Likewise.\n+\t* libgnat/s-vafi32.ads: Likewise.\n+\t* libgnat/s-vafi64.ads: Likewise.\n+\t* libgnat/s-valdec.ads, libgnat/s-valdec.adb: Delete.\n+\t* libgnat/s-vallld.ads, libgnat/s-vallld.adb: Likewise.\n+\t* libgnat/s-valued.ads, libgnat/s-valued.adb: New generic unit.\n+\t* libgnat/s-valuef.ads, libgnat/s-valuef.adb: Likewise.\n+\t* libgnat/s-valuei.adb: Minor rewording.\n+\t* libgnat/s-valrea.adb: Move bulk of implementation to...\n+\t* libgnat/s-valuer.ads, libgnat/s-valuer.adb: ...here.  New\n+\tgeneric unit.\n+\t* libgnat/system-aix.ads (Max_Mantissa): Adjust.\n+\t* libgnat/system-darwin-arm.ads (Max_Mantissa): Likewise.\n+\t* libgnat/system-darwin-ppc.ads (Max_Mantissa): Likewise.\n+\t* libgnat/system-darwin-x86.ads (Max_Mantissa): Likewise.\n+\t* libgnat/system-djgpp.ads (Max_Mantissa): Likewise.\n+\t* libgnat/system-dragonfly-x86_64.ads (Max_Mantissa): Likewise.\n+\t* libgnat/system-freebsd.ads (Max_Mantissa): Likewise.\n+\t* libgnat/system-hpux-ia64.ads (Max_Mantissa): Likewise.\n+\t* libgnat/system-hpux.ads (Max_Mantissa): Likewise.\n+\t* libgnat/system-linux-alpha.ads (Max_Mantissa): Likewise.\n+\t* libgnat/system-linux-arm.ads (Max_Mantissa): Likewise.\n+\t* libgnat/system-linux-hppa.ads (Max_Mantissa): Likewise.\n+\t* libgnat/system-linux-ia64.ads (Max_Mantissa): Likewise.\n+\t* libgnat/system-linux-m68k.ads (Max_Mantissa): Likewise.\n+\t* libgnat/system-linux-mips.ads (Max_Mantissa): Likewise.\n+\t* libgnat/system-linux-ppc.ads (Max_Mantissa): Likewise.\n+\t* libgnat/system-linux-riscv.ads (Max_Mantissa): Likewise.\n+\t* libgnat/system-linux-s390.ads (Max_Mantissa): Likewise.\n+\t* libgnat/system-linux-sh4.ads (Max_Mantissa): Likewise.\n+\t* libgnat/system-linux-sparc.ads (Max_Mantissa): Likewise.\n+\t* libgnat/system-linux-x86.ads (Max_Mantissa): Likewise.\n+\t* libgnat/system-lynxos178-ppc.ads (Max_Mantissa): Likewise.\n+\t* libgnat/system-lynxos178-x86.ads (Max_Mantissa): Likewise.\n+\t* libgnat/system-mingw.ads (Max_Mantissa): Likewise.\n+\t* libgnat/system-qnx-aarch64.ads (Max_Mantissa): Likewise.\n+\t* libgnat/system-rtems.ads (Max_Mantissa): Likewise.\n+\t* libgnat/system-solaris-sparc.ads (Max_Mantissa): Likewise.\n+\t* libgnat/system-solaris-x86.ads (Max_Mantissa): Likewise.\n+\t* libgnat/system-vxworks-arm-rtp-smp.ads (Max_Mantissa): Likewise.\n+\t* libgnat/system-vxworks-arm-rtp.ads (Max_Mantissa): Likewise.\n+\t* libgnat/system-vxworks-arm.ads (Max_Mantissa): Likewise.\n+\t* libgnat/system-vxworks-e500-kernel.ads (Max_Mantissa): Likewise.\n+\t* libgnat/system-vxworks-e500-rtp-smp.ads (Max_Mantissa): Likewise.\n+\t* libgnat/system-vxworks-e500-rtp.ads (Max_Mantissa): Likewise.\n+\t* libgnat/system-vxworks-e500-vthread.ads (Max_Mantissa): Likewise.\n+\t* libgnat/system-vxworks-ppc-kernel.ads (Max_Mantissa): Likewise.\n+\t* libgnat/system-vxworks-ppc-ravenscar.ads (Max_Mantissa): Likewise.\n+\t* libgnat/system-vxworks-ppc-rtp-smp.ads (Max_Mantissa): Likewise.\n+\t* libgnat/system-vxworks-ppc-rtp.ads (Max_Mantissa): Likewise.\n+\t* libgnat/system-vxworks-ppc-vthread.ads (Max_Mantissa): Likewise.\n+\t* libgnat/system-vxworks-ppc.ads (Max_Mantissa): Likewise.\n+\t* libgnat/system-vxworks-x86-kernel.ads (Max_Mantissa): Likewise.\n+\t* libgnat/system-vxworks-x86-rtp-smp.ads (Max_Mantissa): Likewise.\n+\t* libgnat/system-vxworks-x86-rtp.ads (Max_Mantissa): Likewise.\n+\t* libgnat/system-vxworks-x86-vthread.ads (Max_Mantissa): Likewise.\n+\t* libgnat/system-vxworks-x86.ads (Max_Mantissa): Likewise.\n+\t* libgnat/system-vxworks7-aarch64-rtp-smp.ads (Max_Mantissa):\n+\tLikewise.\n+\t* libgnat/system-vxworks7-aarch64.ads (Max_Mantissa): Likewise.\n+\t* libgnat/system-vxworks7-arm-rtp-smp.ads (Max_Mantissa): Likewise.\n+\t* libgnat/system-vxworks7-arm.ads (Max_Mantissa): Likewise.\n+\t* libgnat/system-vxworks7-e500-kernel.ads (Max_Mantissa): Likewise.\n+\t* libgnat/system-vxworks7-e500-rtp-smp.ads (Max_Mantissa): Likewise.\n+\t* libgnat/system-vxworks7-e500-rtp.ads (Max_Mantissa): Likewise.\n+\t* libgnat/system-vxworks7-ppc-kernel.ads (Max_Mantissa): Likewise.\n+\t* libgnat/system-vxworks7-ppc-rtp-smp.ads (Max_Mantissa): Likewise.\n+\t* libgnat/system-vxworks7-ppc-rtp.ads (Max_Mantissa): Likewise.\n+\t* libgnat/system-vxworks7-ppc64-kernel.ads (Max_Mantissa): Likewise.\n+\t* libgnat/system-vxworks7-ppc64-rtp-smp.ads (Max_Mantissa): Likewise.\n+\t* libgnat/system-vxworks7-x86-kernel.ads (Max_Mantissa): Likewise.\n+\t* libgnat/system-vxworks7-x86-rtp-smp.ads (Max_Mantissa): Likewise.\n+\t* libgnat/system-vxworks7-x86-rtp.ads (Max_Mantissa): Likewise.\n+\t* libgnat/system-vxworks7-x86_64-kernel.ads (Max_Mantissa): Likewise.\n+\t* libgnat/system-vxworks7-x86_64-rtp-smp.ads (Max_Mantissa): Likewise.\n+\n+2020-11-26  Liaiss Merzougue  <merzougue@adacore.com>\n+\n+\t* libgnat/s-imgrea.ads (Image_Ordinary_Fixed_Point): Add a\n+\tremark concerning the irrelevant use of Inf and -0.0\n+\n+2020-11-26  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* osint-c.adb (Set_Output_Object_File_Name): Add support for\n+\t.c output file.\n+\n+2020-11-26  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* lib-writ.adb, sem_ch8.adb, sem_prag.adb: Use\n+\tIs_Generic_Subprogram instead of low-level membership tests.\n+\n+2020-11-26  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_ch6.adb (Analyze_Call_And_Resolve): Reformatted a comment.\n+\t* sem_prag.adb (Process_Restrictions_Or_Restriction_Warnings):\n+\tFixed a typo.\n+\n+2020-11-26  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Membership_Op): Replace pragma Warnings\n+\twith pragma Assert.\n+\n+2020-11-26  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch6.adb (Analyze_Call_And_Resolve): Add information to the\n+\terror message on an illegal procedure call, when the illegality\n+\tis due to the presence of a component of the full view of the\n+\ttarget object, as well as a procedure with the same name (See RM\n+\t4.1.3 (9.2/3)).\n+\n+2020-11-26  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_prag.adb (Process_Restrictions_Or_Restriction_Warnings):\n+\twhen the restriction is a configuration pragma and specifies\n+\tNo_Tasking, a global flag is set to reject task declarations,\n+\tand to prevent the construction of Master entities. The flag\n+\tmust not be set if the pragma is a Restriction_Warning, in which\n+\tcase task declarationns are allowed.\n+\n+2020-11-26  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* libgnat/a-stzhas.adb (Wide_Wide_Hash): Instantiate inside a\n+\twrapper function.\n+\t* libgnat/a-stzhas.ads (Wide_Wide_Hash): Likewise; remove wrong\n+\tcomment, because this is indeed a RM unit, as described in Ada\n+\tRM A.4.8 (1/3).\n+\n+2020-11-26  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_eval.adb (Eval_Slice): Refactor repeated calls to Prefix\n+\twith a local constant (named just like in Resolve_Slice).\n+\n+2020-11-26  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_eval.adb (Eval_Slice): Emit warning not just for\n+\tconstants, but for any objects.\n+\n+2020-11-26  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch4.adb (Indicate_Name_And_Type): Fix whitespace in\n+\tcomment.\n+\t* sem_res.adb (Resolve_Call): Remove redundant parens.\n+\t* sem_util.adb (Set_Entity_With_Checks): Remove extra call to\n+\tSet_Entity.\n+\n+2020-11-26  Bob Duff  <duff@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_Concatenate): Call Set_No_Initialization\n+\ton the N_Allocator node that is supposed to allocate on the\n+\tsecondary stack.\n+\n+2020-11-26  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_ch13.adb, exp_ch9.adb, sem_ch8.adb, sem_util.adb: Replace\n+\ta combination of Is_Protected_Type and Is_Task_Type by\n+\tIs_Concurrent_Type.\n+\n+2020-11-26  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* libgnarl/s-tassta.adb (Task_Wrapper): Fix computation of\n+\tPattern_Size.\n+\n+2020-11-26  Bob Duff  <duff@adacore.com>\n+\n+\t* freeze.adb (Freeze_Array_Type): Remove propagation of\n+\tHas_Own_Invariants to the first subtype. This is a no-op,\n+\tbecause the current (incorrect) version of Has_Own_Invariants\n+\tcalls Base_Type.\n+\t* sem_prag.adb, sem_util.adb: Pass the base type to\n+\tSet_Has_Own_Invariants.\n+\n+2020-11-26  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* einfo.ads (Aft_Value): Adjust documentation.\n+\t(Scale_Value): Likewise.\n+\n+2020-11-26  Justin Squirek  <squirek@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_N_Type_Conversion): Use the unexpanded\n+\toperand when generating accessibility checks.\n+\n+2020-11-26  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* libgnat/a-cbhase.adb (Read): Remove extra whitespace.\n+\t* libgnat/a-cbmutr.ads (Read): Likewise.\n+\t* libgnat/a-cborse.adb (Read): Likewise.\n+\n+2020-11-26  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_ch7.adb, exp_util.adb, freeze.adb: Rewrite with\n+\tIs_Access_Object_Type.\n+\n+2020-11-26  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_prag.adb (Check_Valid_Library_Unit_Pragma): Raise\n+\texception.\n+\t(Analyze_Pragma): Remove detection of rewritten pragmas.\n+\n+2020-11-26  Joffrey Huguet  <huguet@adacore.com>\n+\n+\t* libgnat/a-strmap.ads: Add preconditions and postconditions to\n+\tall subprograms.\n+\n+2020-11-26  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Equality_Op): Warn when -gnatwq is used\n+\t(the default) and the problematic case is encountered.\n+\n+2020-11-26  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_attr.adb (Analyze_Attribute): Issue a continuation message\n+\tto give proper recommendation here.\n+\n+2020-11-26  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* exp_util.adb (Expand_Subtype_From_Expr): A typo correction,\n+\tplus other minor reformatting.\n+\n+2020-11-26  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch12.adb (Instantiate_Formal_Package): If previous matched\n+\tentity is overloadable, advance in the list of actuals of the\n+\tactual package, to prevent an erroneous match of two adjacent\n+\toverloadable homonyms with the same entity.\n+\n+2020-11-26  Justin Squirek  <squirek@adacore.com>\n+\n+\t* sem_ch6.adb (First_Selector): Utility routine to return the\n+\tfirst selector or choice in an association.\n+\t(Check_Return_Construct_Accessibility): Modify loop to handle\n+\tnamed associations when iterating through discriminants.\n+\n+2020-11-26  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch12.adb: Fix casing from \"Instantiation\" to\n+\t\"instantiation\".\n+\n 2020-11-25  Ed Schonberg  <schonberg@adacore.com>\n \n \t* freeze.adb (Is_Uninitialized_Aggregate): Move..."}, {"sha": "b97fb740f9c4c1be71018f9f13b10e770960d32e", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48df6f24ba999ad662d3b7c30f7e2180e842149/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48df6f24ba999ad662d3b7c30f7e2180e842149/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=d48df6f24ba999ad662d3b7c30f7e2180e842149", "patch": "@@ -1,3 +1,12 @@\n+2020-11-26  Martin Uecker  <muecker@gwdg.de>\n+\n+\tPR c/65455\n+\tPR c/92935\n+\t* c-parser.c (c_parser_declaration_or_fndef): Remove\n+\tredundant code to drop qualifiers of _Atomic types for __auto_type.\n+\t(c_parser_typeof_specifier): Do not drop qualifiers of _Atomic\n+\ttypes for __typeof__.\n+\n 2020-11-24  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/97958"}, {"sha": "cf8e58bfbd58f4599d39b1bde9dd5ed380ea9344", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48df6f24ba999ad662d3b7c30f7e2180e842149/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48df6f24ba999ad662d3b7c30f7e2180e842149/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d48df6f24ba999ad662d3b7c30f7e2180e842149", "patch": "@@ -1,3 +1,15 @@\n+2020-11-26  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* g++spec.c (TIMELIB, TIME_LIBRARY): Remove.\n+\t(lang_specific_driver): Remove TIME_LIBRARY handling.\n+\n+2020-11-26  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* parser.c (cp_parser_omp_var_list_no_open): Assert that array\n+\tsection's 'low_bound', 'length' are not location wrapper nodes.\n+\t(cp_parser_oacc_all_clauses, cp_parser_oacc_cache): Instantiate\n+\t'auto_suppress_location_wrappers'.\n+\n 2020-11-25  Martin Sebor  <msebor@redhat.com>\n \n \tPR bootstrap/94982"}, {"sha": "cee6cc87e571dffbb742318098b2ea769408102a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48df6f24ba999ad662d3b7c30f7e2180e842149/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48df6f24ba999ad662d3b7c30f7e2180e842149/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d48df6f24ba999ad662d3b7c30f7e2180e842149", "patch": "@@ -1,3 +1,66 @@\n+2020-11-26  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/97997\n+\t* gcc.dg/tree-ssa/pr97997-1.c: New test.\n+\t* gcc.dg/tree-ssa/pr97997-2.c: New test.\n+\n+2020-11-26  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97953\n+\t* gcc.dg/pr97953.c: New testcase.\n+\n+2020-11-26  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/97979\n+\t* gcc.dg/pr97979.c: New test.\n+\t* gcc.c-torture/compile/pr97979.c: New test.\n+\n+2020-11-26  Richard Biener  <rguenther@suse.de>\n+\n+\tPR testsuite/98002\n+\t* gcc.dg/strncmp-2.c: Call mprotect again before free.\n+\n+2020-11-26  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* c-c++-common/goacc/cache-3-1.c: New.\n+\t* c-c++-common/goacc/cache-3-2.c: Likewise.\n+\t* c-c++-common/goacc/data-clause-1.c: Likewise.\n+\t* c-c++-common/goacc/data-clause-2.c: Likewise.\n+\t* c-c++-common/gomp/map-1.c: Adjust.\n+\t* c-c++-common/gomp/map-2.c: Likewise.\n+\t* g++.dg/goacc/cache-3-1.C: New.\n+\t* g++.dg/goacc/cache-3-2.C: Likewise.\n+\t* g++.dg/goacc/data-clause-1.C: Likewise.\n+\t* g++.dg/goacc/data-clause-2.C: Likewise.\n+\t* g++.dg/gomp/map-1.C: Adjust.\n+\t* g++.dg/gomp/map-2.C: Likewise.\n+\n+2020-11-26  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/97873\n+\t* gcc.target/i386/pr97873-3.c: New test.\n+\n+2020-11-26  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/multfixed.adb: Robustify.\n+\n+2020-11-26  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/96906\n+\t* gcc.target/i386/pr96906-1.c: New test.\n+\n+2020-11-26  Martin Uecker  <muecker@gwdg.de>\n+\n+\tPR c/65455\n+\tPR c/92935\n+\t* gcc.dg/typeof-2.c: Adapt test.\n+\n+2020-11-26  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* gcc.dg/nextafter-1.c: Omit prototypes if _NEXT_AFTER_2 defined.\n+\t* gcc.dg/nextafter-2.c: Define _NEXT_AFTER_2.\n+\t* gcc.dg/profile-info-section.c: Skip on AIX.\n+\n 2020-11-25  Martin Sebor  <msebor@redhat.com>\n \n \tPR bootstrap/94982"}, {"sha": "ae50f915e7bbb404109293db8cecb0bb141db6ae", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48df6f24ba999ad662d3b7c30f7e2180e842149/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48df6f24ba999ad662d3b7c30f7e2180e842149/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=d48df6f24ba999ad662d3b7c30f7e2180e842149", "patch": "@@ -1,3 +1,25 @@\n+2020-11-26  Maciej W. Rozycki  <macro@linux-mips.org>\n+\n+\t* io/io.h [HAVE_NEWLOCALE]: Also check for HAVE_FREELOCALE and\n+\tHAVE_USELOCALE.\n+\t[HAVE_FREELOCALE && HAVE_NEWLOCALE && HAVE_USELOCALE]\n+\t(HAVE_POSIX_2008_LOCALE): New macro.\n+\t(st_parameter_dt) [HAVE_NEWLOCALE]: Check for\n+\tHAVE_POSIX_2008_LOCALE instead.\n+\t* io/transfer.c (data_transfer_init_worker, finalize_transfer)\n+\t[HAVE_USELOCALE]: Check for HAVE_POSIX_2008_LOCALE instead.\n+\t* io/unit.c [HAVE_NEWLOCALE]: Likewise.\n+\t(init_units) [HAVE_NEWLOCALE]: Likewise.\n+\t(close_units) [HAVE_FREELOCALE]: Likewise.\n+\t* runtime/error.c (gf_strerror) [HAVE_USELOCALE]: Likewise.\n+\n+2020-11-26  Maciej W. Rozycki  <macro@linux-mips.org>\n+\n+\t* libgfortran.h: Use #if rather than #ifdef with\n+\t__FLT_HAS_INFINITY__, __DBL_HAS_INFINITY__,\n+\t__LDBL_HAS_INFINITY__, __FLT_HAS_QUIET_NAN__,\n+\t__DBL_HAS_QUIET_NAN__, and __LDBL_HAS_QUIET_NAN__.\n+\n 2020-11-21  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* intrinsics/execute_command_line.c (environ): Use"}, {"sha": "2e5b87a33e9420adaf74b73bd4f9802ca2ae8e17", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48df6f24ba999ad662d3b7c30f7e2180e842149/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48df6f24ba999ad662d3b7c30f7e2180e842149/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d48df6f24ba999ad662d3b7c30f7e2180e842149", "patch": "@@ -1,3 +1,95 @@\n+2020-11-26  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/atomic_wait.h (_GLIBCXX_HAVE_ATOMIC_WAIT):\n+\tDefine.\n+\t* include/bits/atomic_base.h: Check _GLIBCXX_HAVE_ATOMIC_WAIT.\n+\t* include/bits/atomic_timed_wait.h: Likewise.\n+\t* include/bits/semaphore_base.h: Likewise.\n+\t* include/std/atomic: Likewise.\n+\t* include/std/latch: Likewise.\n+\t* include/std/semaphore: Likewise.\n+\n+2020-11-26  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/latch: Depend on _GLIBCXX_HAS_GTHREADS and\n+\t_GLIBCXX_HAVE_LINUX_FUTEX.\n+\t* include/std/version (__cpp_lib_latch): Define conditionally.\n+\n+2020-11-26  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/lib/libstdc++.exp (check_effective_target_gthreads):\n+\tCall check_v3_target_gthreads not check_v3_target_gthreads_timed.\n+\n+2020-11-26  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/28_regex/algorithms/regex_match/basic/string_range_01_03.cc:\n+\tAdd dg-timeout-factor directive.\n+\t* testsuite/28_regex/algorithms/regex_match/cstring_bracket_01.cc:\n+\tLikewise.\n+\t* testsuite/28_regex/algorithms/regex_match/ecma/char/backref.cc:\n+\tLikewise.\n+\t* testsuite/28_regex/algorithms/regex_match/ecma/wchar_t/63199.cc:\n+\tLikewise.\n+\t* testsuite/28_regex/algorithms/regex_match/ecma/wchar_t/anymatcher.cc:\n+\tLikewise.\n+\t* testsuite/28_regex/algorithms/regex_match/ecma/wchar_t/cjk_match.cc:\n+\tLikewise.\n+\t* testsuite/28_regex/algorithms/regex_match/ecma/wchar_t/hex.cc:\n+\tLikewise.\n+\t* testsuite/28_regex/algorithms/regex_match/extended/wstring_locale.cc:\n+\tLikewise.\n+\t* testsuite/28_regex/algorithms/regex_search/61720.cc: Likewise.\n+\t* testsuite/28_regex/algorithms/regex_search/ecma/assertion.cc:\n+\tLikewise.\n+\t* testsuite/28_regex/algorithms/regex_search/ecma/string_01.cc:\n+\tLikewise.\n+\t* testsuite/28_regex/basic_regex/ctors/deduction.cc: Likewise.\n+\n+2020-11-26  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/lib/libstdc++.exp (libstdc++_init): Only set\n+\ttool_timeout if it hasn't been set by the user already.\n+\n+2020-11-26  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/97936\n+\t* testsuite/29_atomics/atomic/wait_notify/bool.cc: Fix missed\n+\tnotifications by making the new thread wait until the parent\n+\tthread is waiting on the condition variable.\n+\t* testsuite/29_atomics/atomic/wait_notify/pointers.cc: Likewise.\n+\t* testsuite/29_atomics/atomic_flag/wait_notify/1.cc: Likewise.\n+\t* testsuite/29_atomics/atomic_ref/wait_notify.cc: Likewise.\n+\n+2020-11-26  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/18_support/96817.cc: Use new effective-target\n+\tkeywords to select supported targets more effectively.\n+\t* testsuite/30_threads/call_once/66146.cc: Likewise.\n+\t* testsuite/lib/libstdc++.exp (check_effective_target_futex):\n+\tDefine new proc.\n+\t(check_effective_target_gthreads): Define new proc to replace\n+\tdg-require-gthreads.\n+\n+2020-11-26  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* acinclude.m4 (GLIBCXX_ENABLE_LIBSTDCXX_TIME): Remove libposix4\n+\treferences.\n+\t<solaris*>: Don't use -lrt any longer.\n+\t* configure: Regenerate.\n+\t* doc/xml/manual/configure.xml (--enable-libstdcxx-time=OPTION):\n+\tRemove libposix4 reference.\n+\n+2020-11-26  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/98001\n+\t* testsuite/ext/stdio_filebuf/char/79820.cc: Do not pass invalid\n+\tFILE* to constructor.\n+\n+2020-11-26  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/precompiled/stdc++.h: Add new headers.\n+\t* include/std/stop_token: Include <semaphore> unconditionally.\n+\n 2020-11-25  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/atomic_timed_wait.h (__cond_wait_until): Do not"}]}