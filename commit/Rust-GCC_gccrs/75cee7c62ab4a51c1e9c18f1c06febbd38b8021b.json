{"sha": "75cee7c62ab4a51c1e9c18f1c06febbd38b8021b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzVjZWU3YzYyYWI0YTUxYzFlOWMxOGYxYzA2ZmViYmQzOGI4MDIxYg==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2012-02-10T18:20:43Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2012-02-10T18:20:43Z"}, "message": "PR libstdc++/51798 continued.\n\n2012-02-10  Benjamin Kosnik  <bkoz@redhat.com>\n            Jonathan Wakely  <jwakely.gcc@gmail.com>\n\n\tPR libstdc++/51798 continued.\n\t* acinclude.m4 (GLIBCXX_ENABLE_ATOMIC_BUILTINS): Use __atomic_*\n\tbuiltins instead of __sync_* builtins for atomic functionality.\n\t* include/bits/shared_ptr_base.h: Same.\n\t* include/parallel/compatibility.h: Same.\n\t* include/profile/impl/profiler_state.h: Same.\n\t* include/tr1/shared_ptr.h: Same.\n\t* libsupc++/eh_ptr.cc: Same.\n\t* libsupc++/eh_throw.cc: Same.\n\t* libsupc++/eh_tm.cc: Same.\n\t* libsupc++/guard.cc: Same.\n\t* configure: Regenerated.\n\t* testsuite/20_util/shared_ptr/cons/43820_neg.cc: Adjust line numbers.\n\nCo-Authored-By: Jonathan Wakely <jwakely.gcc@gmail.com>\n\nFrom-SVN: r184110", "tree": {"sha": "0dbe6745de2f1b55e6c7f809f4157e564668753a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0dbe6745de2f1b55e6c7f809f4157e564668753a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75cee7c62ab4a51c1e9c18f1c06febbd38b8021b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75cee7c62ab4a51c1e9c18f1c06febbd38b8021b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75cee7c62ab4a51c1e9c18f1c06febbd38b8021b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75cee7c62ab4a51c1e9c18f1c06febbd38b8021b/comments", "author": null, "committer": null, "parents": [{"sha": "6c9b75b06175c0859a7c340600069c58e083d7c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c9b75b06175c0859a7c340600069c58e083d7c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c9b75b06175c0859a7c340600069c58e083d7c3"}], "stats": {"total": 382, "additions": 220, "deletions": 162}, "files": [{"sha": "af3f50af0eb331139bdb975c818e2908af81a379", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75cee7c62ab4a51c1e9c18f1c06febbd38b8021b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75cee7c62ab4a51c1e9c18f1c06febbd38b8021b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=75cee7c62ab4a51c1e9c18f1c06febbd38b8021b", "patch": "@@ -1,3 +1,21 @@\n+2012-02-10  Benjamin Kosnik  <bkoz@redhat.com>\n+            Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\tPR libstdc++/51798 continued.\n+\t* acinclude.m4 (GLIBCXX_ENABLE_ATOMIC_BUILTINS): Use __atomic_*\n+\tbuiltins instead of __sync_* builtins for atomic functionality.\n+\t* include/bits/shared_ptr_base.h: Same.\n+\t* include/parallel/compatibility.h: Same.\n+\t* include/profile/impl/profiler_state.h: Same.\n+\t* include/tr1/shared_ptr.h: Same.\n+\t* libsupc++/eh_ptr.cc: Same.\n+\t* libsupc++/eh_throw.cc: Same.\n+\t* libsupc++/eh_tm.cc: Same.\n+\t* libsupc++/guard.cc: Same.\n+\t* configure: Regenerated.\n+\t* testsuite/20_util/shared_ptr/cons/43820_neg.cc: Adjust line numbers.\n+\t* testsuite/tr1/2_general_utilities/shared_ptr/cons/43820_neg.cc: Same.\n+\n 2012-02-10  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \tPR libstdc++/51296"}, {"sha": "e089b20dd4f6d153c84a111d878883f501b07ab9", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 62, "deletions": 51, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75cee7c62ab4a51c1e9c18f1c06febbd38b8021b/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75cee7c62ab4a51c1e9c18f1c06febbd38b8021b/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=75cee7c62ab4a51c1e9c18f1c06febbd38b8021b", "patch": "@@ -2685,7 +2685,7 @@ AC_DEFUN([GLIBCXX_ENABLE_PCH], [\n dnl\n dnl Check for atomic builtins.\n dnl See:\n-dnl http://gcc.gnu.org/onlinedocs/gcc/Atomic-Builtins.html#Atomic-Builtins\n+dnl http://gcc.gnu.org/onlinedocs/gcc/_005f_005fatomic-Builtins.html\n dnl\n dnl This checks to see if the host supports the compiler-generated\n dnl builtins for atomic operations for various integral sizes. Note, this\n@@ -2726,12 +2726,13 @@ AC_DEFUN([GLIBCXX_ENABLE_ATOMIC_BUILTINS], [\n       [typedef bool atomic_type;\n        atomic_type c1;\n        atomic_type c2;\n-       const atomic_type c3(0);\n-       __sync_fetch_and_add(&c1, c2);\n-       __sync_val_compare_and_swap(&c1, c3, c2);\n-       __sync_lock_test_and_set(&c1, c3);\n-       __sync_lock_release(&c1);\n-       __sync_synchronize();],\n+       atomic_type c3(0);\n+       __atomic_fetch_add(&c1, c2, __ATOMIC_RELAXED);\n+       __atomic_compare_exchange_n(&c1, &c2, c3, true, __ATOMIC_ACQ_REL,\n+                                   __ATOMIC_RELAXED);\n+       __atomic_test_and_set(&c1, __ATOMIC_RELAXED);\n+       __atomic_load_n(&c1, __ATOMIC_RELAXED);\n+      ],\n       [glibcxx_cv_atomic_bool=yes],\n       [glibcxx_cv_atomic_bool=no])\n   ])\n@@ -2744,12 +2745,13 @@ AC_DEFUN([GLIBCXX_ENABLE_ATOMIC_BUILTINS], [\n       [typedef short atomic_type;\n        atomic_type c1;\n        atomic_type c2;\n-       const atomic_type c3(0);\n-       __sync_fetch_and_add(&c1, c2);\n-       __sync_val_compare_and_swap(&c1, c3, c2);\n-       __sync_lock_test_and_set(&c1, c3);\n-       __sync_lock_release(&c1);\n-       __sync_synchronize();],\n+       atomic_type c3(0);\n+       __atomic_fetch_add(&c1, c2, __ATOMIC_RELAXED);\n+       __atomic_compare_exchange_n(&c1, &c2, c3, true, __ATOMIC_ACQ_REL,\n+                                   __ATOMIC_RELAXED);\n+       __atomic_test_and_set(&c1, __ATOMIC_RELAXED);\n+       __atomic_load_n(&c1, __ATOMIC_RELAXED);\n+      ],\n       [glibcxx_cv_atomic_short=yes],\n       [glibcxx_cv_atomic_short=no])\n   ])\n@@ -2762,12 +2764,13 @@ AC_DEFUN([GLIBCXX_ENABLE_ATOMIC_BUILTINS], [\n       [typedef int atomic_type;\n        atomic_type c1;\n        atomic_type c2;\n-       const atomic_type c3(0);\n-       __sync_fetch_and_add(&c1, c2);\n-       __sync_val_compare_and_swap(&c1, c3, c2);\n-       __sync_lock_test_and_set(&c1, c3);\n-       __sync_lock_release(&c1);\n-       __sync_synchronize();],\n+       atomic_type c3(0);\n+       __atomic_fetch_add(&c1, c2, __ATOMIC_RELAXED);\n+       __atomic_compare_exchange_n(&c1, &c2, c3, true, __ATOMIC_ACQ_REL,\n+                                   __ATOMIC_RELAXED);\n+       __atomic_test_and_set(&c1, __ATOMIC_RELAXED);\n+       __atomic_load_n(&c1, __ATOMIC_RELAXED);\n+      ],\n       [glibcxx_cv_atomic_int=yes],\n       [glibcxx_cv_atomic_int=no])\n   ])\n@@ -2780,12 +2783,13 @@ AC_DEFUN([GLIBCXX_ENABLE_ATOMIC_BUILTINS], [\n       [typedef long long atomic_type;\n        atomic_type c1;\n        atomic_type c2;\n-       const atomic_type c3(0);\n-       __sync_fetch_and_add(&c1, c2);\n-       __sync_val_compare_and_swap(&c1, c3, c2);\n-       __sync_lock_test_and_set(&c1, c3);\n-       __sync_lock_release(&c1);\n-       __sync_synchronize();],\n+       atomic_type c3(0);\n+       __atomic_fetch_add(&c1, c2, __ATOMIC_RELAXED);\n+       __atomic_compare_exchange_n(&c1, &c2, c3, true, __ATOMIC_ACQ_REL,\n+                                   __ATOMIC_RELAXED);\n+       __atomic_test_and_set(&c1, __ATOMIC_RELAXED);\n+       __atomic_load_n(&c1, __ATOMIC_RELAXED);\n+      ],\n       [glibcxx_cv_atomic_long_long=yes],\n       [glibcxx_cv_atomic_long_long=no])\n   ])\n@@ -2807,12 +2811,13 @@ int main()\n   typedef bool atomic_type;\n   atomic_type c1;\n   atomic_type c2;\n-  const atomic_type c3(0);\n-  __sync_fetch_and_add(&c1, c2);\n-  __sync_val_compare_and_swap(&c1, c3, c2);\n-  __sync_lock_test_and_set(&c1, c3);\n-  __sync_lock_release(&c1);\n-  __sync_synchronize();\n+  atomic_type c3(0);\n+  __atomic_fetch_add(&c1, c2, __ATOMIC_RELAXED);\n+  __atomic_compare_exchange_n(&c1, &c2, c3, true, __ATOMIC_ACQ_REL,\n+                              __ATOMIC_RELAXED);\n+  __atomic_test_and_set(&c1, __ATOMIC_RELAXED);\n+  __atomic_load_n(&c1, __ATOMIC_RELAXED);\n+ \n   return 0;\n }\n EOF\n@@ -2835,12 +2840,13 @@ int main()\n   typedef short atomic_type;\n   atomic_type c1;\n   atomic_type c2;\n-  const atomic_type c3(0);\n-  __sync_fetch_and_add(&c1, c2);\n-  __sync_val_compare_and_swap(&c1, c3, c2);\n-  __sync_lock_test_and_set(&c1, c3);\n-  __sync_lock_release(&c1);\n-  __sync_synchronize();\n+  atomic_type c3(0);\n+  __atomic_fetch_add(&c1, c2, __ATOMIC_RELAXED);\n+  __atomic_compare_exchange_n(&c1, &c2, c3, true, __ATOMIC_ACQ_REL,\n+                              __ATOMIC_RELAXED);\n+  __atomic_test_and_set(&c1, __ATOMIC_RELAXED);\n+  __atomic_load_n(&c1, __ATOMIC_RELAXED);\n+\n   return 0;\n }\n EOF\n@@ -2864,12 +2870,13 @@ int main()\n   typedef int atomic_type;\n   atomic_type c1;\n   atomic_type c2;\n-  const atomic_type c3(0);\n-  __sync_fetch_and_add(&c1, c2);\n-  __sync_val_compare_and_swap(&c1, c3, c2);\n-  __sync_lock_test_and_set(&c1, c3);\n-  __sync_lock_release(&c1);\n-  __sync_synchronize();\n+  atomic_type c3(0);\n+  __atomic_fetch_add(&c1, c2, __ATOMIC_RELAXED);\n+  __atomic_compare_exchange_n(&c1, &c2, c3, true, __ATOMIC_ACQ_REL,\n+                              __ATOMIC_RELAXED);\n+  __atomic_test_and_set(&c1, __ATOMIC_RELAXED);\n+  __atomic_load_n(&c1, __ATOMIC_RELAXED);\n+\n   return 0;\n }\n EOF\n@@ -2892,12 +2899,13 @@ int main()\n   typedef long long atomic_type;\n   atomic_type c1;\n   atomic_type c2;\n-  const atomic_type c3(0);\n-  __sync_fetch_and_add(&c1, c2);\n-  __sync_val_compare_and_swap(&c1, c3, c2);\n-  __sync_lock_test_and_set(&c1, c3);\n-  __sync_lock_release(&c1);\n-  __sync_synchronize();\n+  atomic_type c3(0);\n+  __atomic_fetch_add(&c1, c2, __ATOMIC_RELAXED);\n+  __atomic_compare_exchange_n(&c1, &c2, c3, true, __ATOMIC_ACQ_REL,\n+                              __ATOMIC_RELAXED);\n+  __atomic_test_and_set(&c1, __ATOMIC_RELAXED);\n+  __atomic_load_n(&c1, __ATOMIC_RELAXED);\n+\n   return 0;\n }\n EOF\n@@ -2918,8 +2926,11 @@ EOF\n   CXXFLAGS=\"$old_CXXFLAGS\"\n   AC_LANG_RESTORE\n \n-  # Set atomicity_dir to builtins if either of above tests pass.\n-  if test $glibcxx_cv_atomic_int = yes || test $glibcxx_cv_atomic_bool = yes ; then\n+  # Set atomicity_dir to builtins if all of above tests pass.\n+  if test $glibcxx_cv_atomic_bool = yes \\\n+     && test $glibcxx_cv_atomic_short = yes \\\n+     && test $glibcxx_cv_atomic_int = yes \\\n+     && test $glibcxx_cv_atomic_long_long = yes ; then\n     AC_DEFINE(_GLIBCXX_ATOMIC_BUILTINS, 1,\n     [Define if the compiler supports C++11 atomics.])\n     atomicity_dir=cpu/generic/atomicity_builtins"}, {"sha": "de4a630e25ac0cbd146860aa7e07819f2675049e", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 68, "deletions": 57, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75cee7c62ab4a51c1e9c18f1c06febbd38b8021b/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75cee7c62ab4a51c1e9c18f1c06febbd38b8021b/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=75cee7c62ab4a51c1e9c18f1c06febbd38b8021b", "patch": "@@ -15125,12 +15125,13 @@ main ()\n typedef bool atomic_type;\n        atomic_type c1;\n        atomic_type c2;\n-       const atomic_type c3(0);\n-       __sync_fetch_and_add(&c1, c2);\n-       __sync_val_compare_and_swap(&c1, c3, c2);\n-       __sync_lock_test_and_set(&c1, c3);\n-       __sync_lock_release(&c1);\n-       __sync_synchronize();\n+       atomic_type c3(0);\n+       __atomic_fetch_add(&c1, c2, __ATOMIC_RELAXED);\n+       __atomic_compare_exchange_n(&c1, &c2, c3, true, __ATOMIC_ACQ_REL,\n+                                   __ATOMIC_RELAXED);\n+       __atomic_test_and_set(&c1, __ATOMIC_RELAXED);\n+       __atomic_load_n(&c1, __ATOMIC_RELAXED);\n+\n   ;\n   return 0;\n }\n@@ -15166,12 +15167,13 @@ main ()\n typedef short atomic_type;\n        atomic_type c1;\n        atomic_type c2;\n-       const atomic_type c3(0);\n-       __sync_fetch_and_add(&c1, c2);\n-       __sync_val_compare_and_swap(&c1, c3, c2);\n-       __sync_lock_test_and_set(&c1, c3);\n-       __sync_lock_release(&c1);\n-       __sync_synchronize();\n+       atomic_type c3(0);\n+       __atomic_fetch_add(&c1, c2, __ATOMIC_RELAXED);\n+       __atomic_compare_exchange_n(&c1, &c2, c3, true, __ATOMIC_ACQ_REL,\n+                                   __ATOMIC_RELAXED);\n+       __atomic_test_and_set(&c1, __ATOMIC_RELAXED);\n+       __atomic_load_n(&c1, __ATOMIC_RELAXED);\n+\n   ;\n   return 0;\n }\n@@ -15207,12 +15209,13 @@ main ()\n typedef int atomic_type;\n        atomic_type c1;\n        atomic_type c2;\n-       const atomic_type c3(0);\n-       __sync_fetch_and_add(&c1, c2);\n-       __sync_val_compare_and_swap(&c1, c3, c2);\n-       __sync_lock_test_and_set(&c1, c3);\n-       __sync_lock_release(&c1);\n-       __sync_synchronize();\n+       atomic_type c3(0);\n+       __atomic_fetch_add(&c1, c2, __ATOMIC_RELAXED);\n+       __atomic_compare_exchange_n(&c1, &c2, c3, true, __ATOMIC_ACQ_REL,\n+                                   __ATOMIC_RELAXED);\n+       __atomic_test_and_set(&c1, __ATOMIC_RELAXED);\n+       __atomic_load_n(&c1, __ATOMIC_RELAXED);\n+\n   ;\n   return 0;\n }\n@@ -15248,12 +15251,13 @@ main ()\n typedef long long atomic_type;\n        atomic_type c1;\n        atomic_type c2;\n-       const atomic_type c3(0);\n-       __sync_fetch_and_add(&c1, c2);\n-       __sync_val_compare_and_swap(&c1, c3, c2);\n-       __sync_lock_test_and_set(&c1, c3);\n-       __sync_lock_release(&c1);\n-       __sync_synchronize();\n+       atomic_type c3(0);\n+       __atomic_fetch_add(&c1, c2, __ATOMIC_RELAXED);\n+       __atomic_compare_exchange_n(&c1, &c2, c3, true, __ATOMIC_ACQ_REL,\n+                                   __ATOMIC_RELAXED);\n+       __atomic_test_and_set(&c1, __ATOMIC_RELAXED);\n+       __atomic_load_n(&c1, __ATOMIC_RELAXED);\n+\n   ;\n   return 0;\n }\n@@ -15281,18 +15285,19 @@ $as_echo \"$glibcxx_cv_atomic_long_long\" >&6; }\n   # Fake what AC_TRY_COMPILE does.\n \n     cat > conftest.$ac_ext << EOF\n-#line 15284 \"configure\"\n+#line 15288 \"configure\"\n int main()\n {\n   typedef bool atomic_type;\n   atomic_type c1;\n   atomic_type c2;\n-  const atomic_type c3(0);\n-  __sync_fetch_and_add(&c1, c2);\n-  __sync_val_compare_and_swap(&c1, c3, c2);\n-  __sync_lock_test_and_set(&c1, c3);\n-  __sync_lock_release(&c1);\n-  __sync_synchronize();\n+  atomic_type c3(0);\n+  __atomic_fetch_add(&c1, c2, __ATOMIC_RELAXED);\n+  __atomic_compare_exchange_n(&c1, &c2, c3, true, __ATOMIC_ACQ_REL,\n+                              __ATOMIC_RELAXED);\n+  __atomic_test_and_set(&c1, __ATOMIC_RELAXED);\n+  __atomic_load_n(&c1, __ATOMIC_RELAXED);\n+\n   return 0;\n }\n EOF\n@@ -15315,18 +15320,19 @@ $as_echo \"$glibcxx_cv_atomic_bool\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15318 \"configure\"\n+#line 15323 \"configure\"\n int main()\n {\n   typedef short atomic_type;\n   atomic_type c1;\n   atomic_type c2;\n-  const atomic_type c3(0);\n-  __sync_fetch_and_add(&c1, c2);\n-  __sync_val_compare_and_swap(&c1, c3, c2);\n-  __sync_lock_test_and_set(&c1, c3);\n-  __sync_lock_release(&c1);\n-  __sync_synchronize();\n+  atomic_type c3(0);\n+  __atomic_fetch_add(&c1, c2, __ATOMIC_RELAXED);\n+  __atomic_compare_exchange_n(&c1, &c2, c3, true, __ATOMIC_ACQ_REL,\n+                              __ATOMIC_RELAXED);\n+  __atomic_test_and_set(&c1, __ATOMIC_RELAXED);\n+  __atomic_load_n(&c1, __ATOMIC_RELAXED);\n+\n   return 0;\n }\n EOF\n@@ -15349,19 +15355,20 @@ $as_echo \"$glibcxx_cv_atomic_short\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15352 \"configure\"\n+#line 15358 \"configure\"\n int main()\n {\n   // NB: _Atomic_word not necessarily int.\n   typedef int atomic_type;\n   atomic_type c1;\n   atomic_type c2;\n-  const atomic_type c3(0);\n-  __sync_fetch_and_add(&c1, c2);\n-  __sync_val_compare_and_swap(&c1, c3, c2);\n-  __sync_lock_test_and_set(&c1, c3);\n-  __sync_lock_release(&c1);\n-  __sync_synchronize();\n+  atomic_type c3(0);\n+  __atomic_fetch_add(&c1, c2, __ATOMIC_RELAXED);\n+  __atomic_compare_exchange_n(&c1, &c2, c3, true, __ATOMIC_ACQ_REL,\n+                              __ATOMIC_RELAXED);\n+  __atomic_test_and_set(&c1, __ATOMIC_RELAXED);\n+  __atomic_load_n(&c1, __ATOMIC_RELAXED);\n+\n   return 0;\n }\n EOF\n@@ -15384,18 +15391,19 @@ $as_echo \"$glibcxx_cv_atomic_int\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15387 \"configure\"\n+#line 15394 \"configure\"\n int main()\n {\n   typedef long long atomic_type;\n   atomic_type c1;\n   atomic_type c2;\n-  const atomic_type c3(0);\n-  __sync_fetch_and_add(&c1, c2);\n-  __sync_val_compare_and_swap(&c1, c3, c2);\n-  __sync_lock_test_and_set(&c1, c3);\n-  __sync_lock_release(&c1);\n-  __sync_synchronize();\n+  atomic_type c3(0);\n+  __atomic_fetch_add(&c1, c2, __ATOMIC_RELAXED);\n+  __atomic_compare_exchange_n(&c1, &c2, c3, true, __ATOMIC_ACQ_REL,\n+                              __ATOMIC_RELAXED);\n+  __atomic_test_and_set(&c1, __ATOMIC_RELAXED);\n+  __atomic_load_n(&c1, __ATOMIC_RELAXED);\n+\n   return 0;\n }\n EOF\n@@ -15427,8 +15435,11 @@ ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $\n ac_compiler_gnu=$ac_cv_c_compiler_gnu\n \n \n-  # Set atomicity_dir to builtins if either of above tests pass.\n-  if test $glibcxx_cv_atomic_int = yes || test $glibcxx_cv_atomic_bool = yes ; then\n+  # Set atomicity_dir to builtins if all of above tests pass.\n+  if test $glibcxx_cv_atomic_bool = yes \\\n+     && test $glibcxx_cv_atomic_short = yes \\\n+     && test $glibcxx_cv_atomic_int = yes \\\n+     && test $glibcxx_cv_atomic_long_long = yes ; then\n \n $as_echo \"#define _GLIBCXX_ATOMIC_BUILTINS 1\" >>confdefs.h\n \n@@ -15460,7 +15471,7 @@ $as_echo \"$as_me: WARNING: Performance of certain classes will degrade as a resu\n   # unnecessary for this test.\n \n     cat > conftest.$ac_ext << EOF\n-#line 15463 \"configure\"\n+#line 15474 \"configure\"\n int main()\n {\n   _Decimal32 d1;\n@@ -15502,7 +15513,7 @@ ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n   # unnecessary for this test.\n \n     cat > conftest.$ac_ext << EOF\n-#line 15505 \"configure\"\n+#line 15516 \"configure\"\n template<typename T1, typename T2>\n   struct same\n   { typedef T2 type; };\n@@ -15536,7 +15547,7 @@ $as_echo \"$enable_int128\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15539 \"configure\"\n+#line 15550 \"configure\"\n template<typename T1, typename T2>\n   struct same\n   { typedef T2 type; };"}, {"sha": "ebdc7ed945258a838e30337e8f57a9eab02c3a70", "filename": "libstdc++-v3/include/bits/shared_ptr_base.h", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75cee7c62ab4a51c1e9c18f1c06febbd38b8021b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75cee7c62ab4a51c1e9c18f1c06febbd38b8021b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h?ref=75cee7c62ab4a51c1e9c18f1c06febbd38b8021b", "patch": "@@ -1,6 +1,7 @@\n // shared_ptr and weak_ptr implementation details -*- C++ -*-\n \n-// Copyright (C) 2007, 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008, 2009, 2010, 2011, 2012\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -193,7 +194,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       {\n         // No memory barrier is used here so there is no synchronization\n         // with other threads.\n-        return const_cast<const volatile _Atomic_word&>(_M_use_count);\n+        return __atomic_load_n(&_M_use_count, __ATOMIC_RELAXED);\n       }\n \n     private:  \n@@ -245,8 +246,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  // Replace the current counter value with the old value + 1, as\n \t  // long as it's not changed meanwhile. \n \t}\n-      while (!__sync_bool_compare_and_swap(&_M_use_count, __count,\n-\t\t\t\t\t   __count + 1));\n+      while (!__atomic_compare_exchange_n(&_M_use_count, &__count, __count + 1,\n+\t\t\t\t\t  true, __ATOMIC_ACQ_REL, \n+\t\t\t\t\t  __ATOMIC_RELAXED));\n     }\n \n "}, {"sha": "460345ef3994551df029b10ed7b1d80d0062a744", "filename": "libstdc++-v3/include/parallel/compatibility.h", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75cee7c62ab4a51c1e9c18f1c06febbd38b8021b/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fcompatibility.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75cee7c62ab4a51c1e9c18f1c06febbd38b8021b/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fcompatibility.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fcompatibility.h?ref=75cee7c62ab4a51c1e9c18f1c06febbd38b8021b", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008, 2009, 2010, 2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -102,7 +102,7 @@ namespace __gnu_parallel\n     return _InterlockedExchangeAdd(reinterpret_cast<volatile long*>(__ptr),\n                                    __addend);\n #elif defined(__GNUC__)\n-    return __sync_fetch_and_add(__ptr, __addend);\n+    return __atomic_fetch_add(__ptr, __addend, __ATOMIC_ACQ_REL);\n #elif defined(__SUNPRO_CC) && defined(__sparc)\n     volatile int32_t __before, __after;\n     do\n@@ -145,11 +145,11 @@ namespace __gnu_parallel\n     return _InterlockedExchangeAdd64(__ptr, __addend);\n #endif\n #elif defined(__GNUC__) && defined(__x86_64)\n-    return __sync_fetch_and_add(__ptr, __addend);\n+    return __atomic_fetch_add(__ptr, __addend, __ATOMIC_ACQ_REL);\n #elif defined(__GNUC__) && defined(__i386) &&                   \\\n   (defined(__i686) || defined(__pentium4) || defined(__athlon)  \\\n    || defined(__k8) || defined(__core2))\n-    return __sync_fetch_and_add(__ptr, __addend);\n+    return __atomic_fetch_add(__ptr, __addend, __ATOMIC_ACQ_REL);\n #elif defined(__SUNPRO_CC) && defined(__sparc)\n     volatile int64_t __before, __after;\n     do\n@@ -252,7 +252,8 @@ namespace __gnu_parallel\n                __replacement, __comparand)\n              == __comparand;\n #elif defined(__GNUC__)\n-    return __sync_bool_compare_and_swap(__ptr, __comparand, __replacement);\n+    return __atomic_compare_exchange_n(__ptr, &__comparand, __replacement, true,\n+\t\t\t\t       __ATOMIC_ACQ_REL, __ATOMIC_RELAXED);\n #elif defined(__SUNPRO_CC) && defined(__sparc)\n     return atomic_cas_32((volatile unsigned int*)__ptr, __comparand,\n                          __replacement) == __comparand;\n@@ -298,11 +299,13 @@ namespace __gnu_parallel\n #endif\n \n #elif defined(__GNUC__) && defined(__x86_64)\n-    return __sync_bool_compare_and_swap(__ptr, __comparand, __replacement);\n+    return __atomic_compare_exchange_n(__ptr, &__comparand, __replacement, true,\n+\t\t\t\t       __ATOMIC_ACQ_REL, __ATOMIC_RELAXED);\n #elif defined(__GNUC__) && defined(__i386) &&                   \\\n   (defined(__i686) || defined(__pentium4) || defined(__athlon)  \\\n    || defined(__k8) || defined(__core2))\n-    return __sync_bool_compare_and_swap(__ptr, __comparand, __replacement);\n+    return __atomic_compare_exchange_n(__ptr, &__comparand, __replacement, true,\n+\t\t\t\t       __ATOMIC_ACQ_REL, __ATOMIC_RELAXED);\n #elif defined(__SUNPRO_CC) && defined(__sparc)\n     return atomic_cas_64((volatile unsigned long long*)__ptr,\n                          __comparand, __replacement) == __comparand;"}, {"sha": "573aa0eeb403c0c781ec2d589447d38dca1d39f5", "filename": "libstdc++-v3/include/profile/impl/profiler_state.h", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75cee7c62ab4a51c1e9c18f1c06febbd38b8021b/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_state.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75cee7c62ab4a51c1e9c18f1c06febbd38b8021b/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_state.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_state.h?ref=75cee7c62ab4a51c1e9c18f1c06febbd38b8021b", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n //\n-// Copyright (C) 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2009, 2010, 2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -45,9 +45,12 @@ namespace __gnu_profile\n \n   inline bool\n   __turn(__state_type __s)\n-  { return (_GLIBCXX_PROFILE_DATA(__state)\n-\t    == __sync_val_compare_and_swap(&_GLIBCXX_PROFILE_DATA(__state),\n-\t\t\t\t\t   __INVALID, __s)); }\n+  { \n+    __state_type inv(__INVALID);\n+    return __atomic_compare_exchange_n(&_GLIBCXX_PROFILE_DATA(__state),\n+\t\t\t\t       &inv, __s, true, __ATOMIC_ACQ_REL, \n+\t\t\t\t       __ATOMIC_RELAXED);\n+  }\n \n   inline bool\n   __turn_on()"}, {"sha": "723e317646de6f112dad28bca122c03470fde3ea", "filename": "libstdc++-v3/include/tr1/shared_ptr.h", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75cee7c62ab4a51c1e9c18f1c06febbd38b8021b/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fshared_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75cee7c62ab4a51c1e9c18f1c06febbd38b8021b/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fshared_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fshared_ptr.h?ref=75cee7c62ab4a51c1e9c18f1c06febbd38b8021b", "patch": "@@ -1,6 +1,7 @@\n // <tr1/shared_ptr.h> -*- C++ -*-\n \n-// Copyright (C) 2007, 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008, 2009, 2010, 2011, 2012\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -246,9 +247,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  // Replace the current counter value with the old value + 1, as\n \t  // long as it's not changed meanwhile. \n \t}\n-      while (!__sync_bool_compare_and_swap(&_M_use_count, __count,\n-\t\t\t\t\t   __count + 1));\n-    }\n+      while (!__atomic_compare_exchange_n(&_M_use_count, &__count, __count + 1,\n+\t\t\t\t\t  true, __ATOMIC_ACQ_REL, \n+\t\t\t\t\t  __ATOMIC_RELAXED));\n+     }\n \n   template<typename _Ptr, typename _Deleter, _Lock_policy _Lp>\n     class _Sp_counted_base_impl"}, {"sha": "82ebb0b173baee8424e3cc898c52840cc171252e", "filename": "libstdc++-v3/libsupc++/eh_ptr.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75cee7c62ab4a51c1e9c18f1c06febbd38b8021b/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_ptr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75cee7c62ab4a51c1e9c18f1c06febbd38b8021b/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_ptr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_ptr.cc?ref=75cee7c62ab4a51c1e9c18f1c06febbd38b8021b", "patch": "@@ -1,5 +1,5 @@\n // -*- C++ -*- Implement the members of exception_ptr.\n-// Copyright (C) 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n+// Copyright (C) 2008, 2009, 2010, 2011, 2012 Free Software Foundation, Inc.\n //\n // This file is part of GCC.\n //\n@@ -75,7 +75,7 @@ std::__exception_ptr::exception_ptr::_M_addref() _GLIBCXX_USE_NOEXCEPT\n     {\n       __cxa_refcounted_exception *eh =\n \t__get_refcounted_exception_header_from_obj (_M_exception_object);\n-      __sync_add_and_fetch (&eh->referenceCount, 1);\n+      __atomic_add_fetch (&eh->referenceCount, 1, __ATOMIC_ACQ_REL);\n     }\n }\n \n@@ -87,7 +87,7 @@ std::__exception_ptr::exception_ptr::_M_release() _GLIBCXX_USE_NOEXCEPT\n     {\n       __cxa_refcounted_exception *eh =\n \t__get_refcounted_exception_header_from_obj (_M_exception_object);\n-      if (__sync_sub_and_fetch (&eh->referenceCount, 1) == 0)\n+      if (__atomic_sub_fetch (&eh->referenceCount, 1, __ATOMIC_ACQ_REL) == 0)\n         {\n \t  if (eh->exc.exceptionDestructor)\n \t    eh->exc.exceptionDestructor (_M_exception_object);\n@@ -191,7 +191,7 @@ __gxx_dependent_exception_cleanup(_Unwind_Reason_Code code,\n \n   __cxa_free_dependent_exception (dep);\n \n-  if (__sync_sub_and_fetch (&header->referenceCount, 1) == 0)\n+  if (__atomic_sub_fetch (&header->referenceCount, 1, __ATOMIC_ACQ_REL) == 0)\n     {\n       if (header->exc.exceptionDestructor)\n \theader->exc.exceptionDestructor (header + 1);\n@@ -210,7 +210,7 @@ std::rethrow_exception(std::exception_ptr ep)\n \n   __cxa_dependent_exception *dep = __cxa_allocate_dependent_exception ();\n   dep->primaryException = obj;\n-  __sync_add_and_fetch (&eh->referenceCount, 1);\n+  __atomic_add_fetch (&eh->referenceCount, 1,  __ATOMIC_ACQ_REL);\n \n   dep->unexpectedHandler = __unexpected_handler;\n   dep->terminateHandler = __terminate_handler;"}, {"sha": "de00602cdea3c3f263c0de17af4ef57ce0e62822", "filename": "libstdc++-v3/libsupc++/eh_throw.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75cee7c62ab4a51c1e9c18f1c06febbd38b8021b/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_throw.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75cee7c62ab4a51c1e9c18f1c06febbd38b8021b/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_throw.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_throw.cc?ref=75cee7c62ab4a51c1e9c18f1c06febbd38b8021b", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- Exception handling routines for throwing.\n // Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,\n-// 2011  Free Software Foundation, Inc.\n+// 2011, 2012  Free Software Foundation, Inc.\n //\n // This file is part of GCC.\n //\n@@ -44,7 +44,7 @@ __gxx_exception_cleanup (_Unwind_Reason_Code code, _Unwind_Exception *exc)\n     __terminate (header->exc.terminateHandler);\n \n #if ATOMIC_INT_LOCK_FREE > 1\n-  if (__sync_sub_and_fetch (&header->referenceCount, 1) == 0)\n+  if (__atomic_sub_fetch (&header->referenceCount, 1, __ATOMIC_ACQ_REL) == 0)\n     {\n #endif\n       if (header->exc.exceptionDestructor)"}, {"sha": "bd9de6c60e4982676355c445cb1566c5903a2532", "filename": "libstdc++-v3/libsupc++/eh_tm.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75cee7c62ab4a51c1e9c18f1c06febbd38b8021b/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_tm.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75cee7c62ab4a51c1e9c18f1c06febbd38b8021b/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_tm.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_tm.cc?ref=75cee7c62ab4a51c1e9c18f1c06febbd38b8021b", "patch": "@@ -1,5 +1,5 @@\n // -*- C++ -*- Exception handling routines for Transactional Memory.\n-// Copyright (C) 2009, 2011 Free Software Foundation, Inc.\n+// Copyright (C) 2009, 2011, 2012 Free Software Foundation, Inc.\n //\n // This file is part of GCC.\n //\n@@ -46,7 +46,7 @@ free_any_cxa_exception (_Unwind_Exception *eo)\n     }\n \n #if __GCC_ATOMIC_INT_LOCK_FREE > 1\n-  if (__sync_sub_and_fetch (&h->referenceCount, 1) == 0)\n+  if (__atomic_sub_fetch (&h->referenceCount, 1, __ATOMIC_ACQ_REL) == 0)\n #endif\n     __cxa_free_exception (h + 1);\n }"}, {"sha": "b7b8d3f855b80cbbfab5056365048c6c9c25e4aa", "filename": "libstdc++-v3/libsupc++/guard.cc", "status": "modified", "additions": 29, "deletions": 21, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75cee7c62ab4a51c1e9c18f1c06febbd38b8021b/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fguard.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75cee7c62ab4a51c1e9c18f1c06febbd38b8021b/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fguard.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fguard.cc?ref=75cee7c62ab4a51c1e9c18f1c06febbd38b8021b", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2002, 2004, 2006, 2008, 2009, 2010, 2011\n+// Copyright (C) 2002, 2004, 2006, 2008, 2009, 2010, 2011, 2012\n // Free Software Foundation, Inc.\n //  \n // This file is part of GCC.\n@@ -239,34 +239,42 @@ namespace __cxxabiv1\n       return 0;\n \n # ifdef _GLIBCXX_USE_FUTEX\n-    // If __sync_* and futex syscall are supported, don't use any global\n+    // If __atomic_* and futex syscall are supported, don't use any global\n     // mutex.\n     if (__gthread_active_p ())\n       {\n \tint *gi = (int *) (void *) g;\n+\tint expected(0);\n \tconst int guard_bit = _GLIBCXX_GUARD_BIT;\n \tconst int pending_bit = _GLIBCXX_GUARD_PENDING_BIT;\n \tconst int waiting_bit = _GLIBCXX_GUARD_WAITING_BIT;\n \n \twhile (1)\n \t  {\n-\t    int old = __sync_val_compare_and_swap (gi, 0, pending_bit);\n-\t    if (old == 0)\n-\t      return 1;\t// This thread should do the initialization.\n-\n-\t    if (old == guard_bit)\n-\t      return 0;\t// Already initialized.\n-\n-\t    if (old == pending_bit)\n+\t    if (__atomic_compare_exchange_n(gi, &expected, pending_bit, true,\n+\t\t\t\t\t    __ATOMIC_ACQ_REL, __ATOMIC_RELAXED))\n \t      {\n-\t\tint newv = old | waiting_bit;\n-\t\tif (__sync_val_compare_and_swap (gi, old, newv) != old)\n-\t\t  continue;\n-\n-\t\told = newv;\n+\t\t// This thread should do the initialization.\n+\t\treturn 1;\n \t      }\n-\n-\t    syscall (SYS_futex, gi, _GLIBCXX_FUTEX_WAIT, old, 0);\n+\t      \n+\t    if (expected == guard_bit)\n+\t      {\n+\t\t// Already initialized.\n+\t\treturn 0;\t\n+\t      }\n+\t     if (expected == pending_bit)\n+\t       {\n+\t\t int newv = expected | waiting_bit;\n+\t\t if (!__atomic_compare_exchange_n(gi, &expected, newv, true,\n+\t\t\t\t\t\t  __ATOMIC_ACQ_REL, \n+\t\t\t\t\t\t  __ATOMIC_RELAXED))\n+\t\t   continue;\n+\t\t \n+\t\t expected = newv;\n+\t       }\n+\n+\t    syscall (SYS_futex, gi, _GLIBCXX_FUTEX_WAIT, expected, 0);\n \t  }\n       }\n # else\n@@ -316,13 +324,13 @@ namespace __cxxabiv1\n   void __cxa_guard_abort (__guard *g) throw ()\n   {\n #ifdef _GLIBCXX_USE_FUTEX\n-    // If __sync_* and futex syscall are supported, don't use any global\n+    // If __atomic_* and futex syscall are supported, don't use any global\n     // mutex.\n     if (__gthread_active_p ())\n       {\n \tint *gi = (int *) (void *) g;\n \tconst int waiting_bit = _GLIBCXX_GUARD_WAITING_BIT;\n-\tint old = __sync_lock_test_and_set (gi, 0);\n+\tint old = __atomic_exchange_n (gi, 0, __ATOMIC_ACQ_REL);\n \n \tif ((old & waiting_bit) != 0)\n \t  syscall (SYS_futex, gi, _GLIBCXX_FUTEX_WAKE, INT_MAX);\n@@ -355,14 +363,14 @@ namespace __cxxabiv1\n   void __cxa_guard_release (__guard *g) throw ()\n   {\n #ifdef _GLIBCXX_USE_FUTEX\n-    // If __sync_* and futex syscall are supported, don't use any global\n+    // If __atomic_* and futex syscall are supported, don't use any global\n     // mutex.\n     if (__gthread_active_p ())\n       {\n \tint *gi = (int *) (void *) g;\n \tconst int guard_bit = _GLIBCXX_GUARD_BIT;\n \tconst int waiting_bit = _GLIBCXX_GUARD_WAITING_BIT;\n-\tint old = __sync_lock_test_and_set (gi, guard_bit);\n+\tint old = __atomic_exchange_n (gi, guard_bit, __ATOMIC_ACQ_REL);\n \n \tif ((old & waiting_bit) != 0)\n \t  syscall (SYS_futex, gi, _GLIBCXX_FUTEX_WAKE, INT_MAX);"}, {"sha": "0d51663fb75c1e9d35f07015beec10c4b253f5c5", "filename": "libstdc++-v3/testsuite/20_util/shared_ptr/cons/43820_neg.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75cee7c62ab4a51c1e9c18f1c06febbd38b8021b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2F43820_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75cee7c62ab4a51c1e9c18f1c06febbd38b8021b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2F43820_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2F43820_neg.cc?ref=75cee7c62ab4a51c1e9c18f1c06febbd38b8021b", "patch": "@@ -1,7 +1,7 @@\n // { dg-options \"-std=gnu++0x\" }\n // { dg-do compile }\n \n-// Copyright (C) 2010, 2011 Free Software Foundation\n+// Copyright (C) 2010, 2011, 2012 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -32,9 +32,9 @@ void test01()\n {\n   X* px = 0;\n   std::shared_ptr<X> p1(px);   // { dg-error \"here\" }\n-  // { dg-error \"incomplete\" \"\" { target *-*-* } 771 }\n+  // { dg-error \"incomplete\" \"\" { target *-*-* } 773 }\n \n   std::shared_ptr<X> p9(ap());  // { dg-error \"here\" }\n-  // { dg-error \"incomplete\" \"\" { target *-*-* } 865 }\n+  // { dg-error \"incomplete\" \"\" { target *-*-* } 867 }\n \n }"}, {"sha": "ae902dc775167c5c66fc0fa16a6a096cf12fa7a7", "filename": "libstdc++-v3/testsuite/tr1/2_general_utilities/shared_ptr/cons/43820_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75cee7c62ab4a51c1e9c18f1c06febbd38b8021b/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fcons%2F43820_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75cee7c62ab4a51c1e9c18f1c06febbd38b8021b/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fcons%2F43820_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fcons%2F43820_neg.cc?ref=75cee7c62ab4a51c1e9c18f1c06febbd38b8021b", "patch": "@@ -30,9 +30,9 @@ void test01()\n {\n   X* px = 0;\n   std::tr1::shared_ptr<X> p1(px);   // { dg-error \"here\" }\n-  // { dg-error \"incomplete\" \"\" { target *-*-* } 563 }\n+  // { dg-error \"incomplete\" \"\" { target *-*-* } 565 }\n \n   std::tr1::shared_ptr<X> p9(ap());  // { dg-error \"here\" }\n-  // { dg-error \"incomplete\" \"\" { target *-*-* } 602 }\n+  // { dg-error \"incomplete\" \"\" { target *-*-* } 604 }\n \n }"}]}