{"sha": "213f974a3aefc61c3370525fc379eb54a386167d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjEzZjk3NGEzYWVmYzYxYzMzNzA1MjVmYzM3OWViNTRhMzg2MTY3ZA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-08-19T03:53:34Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-08-19T03:53:34Z"}, "message": "crtstuff.c: Move list heads before code that uses them.\n\n        * crtstuff.c: Move list heads before code that uses them.\n        (__JCR_LIST__): Remove initial null.\n        (frame_dummy, __frame_dummy): Do java registration here ...\n        (__do_global_ctors_aux): ... not here.\n\nFrom-SVN: r45022", "tree": {"sha": "f36a185f7a3259d89344344fff6fe70faf2491b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f36a185f7a3259d89344344fff6fe70faf2491b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/213f974a3aefc61c3370525fc379eb54a386167d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/213f974a3aefc61c3370525fc379eb54a386167d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/213f974a3aefc61c3370525fc379eb54a386167d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/213f974a3aefc61c3370525fc379eb54a386167d/comments", "author": null, "committer": null, "parents": [{"sha": "6ca3c22fd16679c55c3d44e19b646a5dec513244", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ca3c22fd16679c55c3d44e19b646a5dec513244", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ca3c22fd16679c55c3d44e19b646a5dec513244"}], "stats": {"total": 186, "additions": 92, "deletions": 94}, "files": [{"sha": "103a182d7cf0fe9742a8221ac08a612caad302f3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/213f974a3aefc61c3370525fc379eb54a386167d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/213f974a3aefc61c3370525fc379eb54a386167d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=213f974a3aefc61c3370525fc379eb54a386167d", "patch": "@@ -1,3 +1,10 @@\n+2001-08-18  Richard Henderson  <rth@redhat.com>\n+\n+\t* crtstuff.c: Move list heads before code that uses them.\n+\t(__JCR_LIST__): Remove initial null.\n+\t(frame_dummy, __frame_dummy): Do java registration here ...\n+\t(__do_global_ctors_aux): ... not here.\n+\n 2001-08-18  Richard Henderson  <rth@redhat.com>\n \n \t* flow.c (mark_regs_live_at_end): Use regs_invalidated_by_call."}, {"sha": "3c25db475ef64afa38ab7efdd1164bc85a29fa3e", "filename": "gcc/crtstuff.c", "status": "modified", "additions": 85, "deletions": 94, "changes": 179, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/213f974a3aefc61c3370525fc379eb54a386167d/gcc%2Fcrtstuff.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/213f974a3aefc61c3370525fc379eb54a386167d/gcc%2Fcrtstuff.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcrtstuff.c?ref=213f974a3aefc61c3370525fc379eb54a386167d", "patch": "@@ -98,6 +98,9 @@ extern void *__deregister_frame_info (void *)\n extern void *__deregister_frame_info_bases (void *)\n \t\t\t\t     TARGET_ATTRIBUTE_WEAK;\n \n+/* Likewise for _Jv_RegisterClasses.  */\n+extern void _Jv_RegisterClasses (void *) TARGET_ATTRIBUTE_WEAK;\n+\n #ifndef OBJECT_FORMAT_MACHO\n \n #ifdef OBJECT_FORMAT_ELF\n@@ -118,6 +121,69 @@ typedef void (*func_ptr) (void);\n \n #ifdef INIT_SECTION_ASM_OP\n \n+/* NOTE:  In order to be able to support SVR4 shared libraries, we arrange\n+   to have one set of symbols { __CTOR_LIST__, __DTOR_LIST__, __CTOR_END__,\n+   __DTOR_END__ } per root executable and also one set of these symbols\n+   per shared library.  So in any given whole process image, we may have\n+   multiple definitions of each of these symbols.  In order to prevent\n+   these definitions from conflicting with one another, and in order to\n+   ensure that the proper lists are used for the initialization/finalization\n+   of each individual shared library (respectively), we give these symbols\n+   only internal (i.e. `static') linkage, and we also make it a point to\n+   refer to only the __CTOR_END__ symbol in crtend.o and the __DTOR_LIST__\n+   symbol in crtbegin.o, where they are defined.  */\n+\n+/* The -1 is a flag to __do_global_[cd]tors indicating that this table\n+   does not start with a count of elements.  */\n+#ifdef CTOR_LIST_BEGIN\n+CTOR_LIST_BEGIN;\n+#elif defined(CTORS_SECTION_ASM_OP)\n+/* Hack: force cc1 to switch to .data section early, so that assembling\n+   __CTOR_LIST__ does not undo our behind-the-back change to .ctors.  */\n+static func_ptr force_to_data[1] __attribute__ ((__unused__)) = { };\n+asm (CTORS_SECTION_ASM_OP);\n+STATIC func_ptr __CTOR_LIST__[1]\n+  __attribute__ ((__unused__, aligned(sizeof(func_ptr))))\n+  = { (func_ptr) (-1) };\n+#else\n+STATIC func_ptr __CTOR_LIST__[1]\n+  __attribute__ ((__unused__, section(\".ctors\"), aligned(sizeof(func_ptr))))\n+  = { (func_ptr) (-1) };\n+#endif /* __CTOR_LIST__ alternatives */\n+\n+#ifdef DTOR_LIST_BEGIN\n+DTOR_LIST_BEGIN;\n+#elif defined(DTORS_SECTION_ASM_OP)\n+asm (DTORS_SECTION_ASM_OP);\n+STATIC func_ptr __DTOR_LIST__[1]\n+  __attribute__ ((aligned(sizeof(func_ptr))))\n+  = { (func_ptr) (-1) };\n+#else\n+STATIC func_ptr __DTOR_LIST__[1]\n+  __attribute__((section(\".dtors\"), aligned(sizeof(func_ptr))))\n+  = { (func_ptr) (-1) };\n+#endif /* __DTOR_LIST__ alternatives */\n+\n+#ifdef EH_FRAME_SECTION_NAME\n+/* Stick a label at the beginning of the frame unwind info so we can register\n+   and deregister it with the exception handling library code.  */\n+#ifdef INIT_SECTION_ASM_OP\n+STATIC\n+#endif\n+char __EH_FRAME_BEGIN__[]\n+     __attribute__((section(EH_FRAME_SECTION_NAME), aligned(4)))\n+     = { };\n+#endif /* EH_FRAME_SECTION_NAME */\n+\n+#ifdef JCR_SECTION_NAME\n+/* Stick a label at the beginning of the java class registration info\n+   so we can register them properly.  */\n+\n+STATIC void *__JCR_LIST__[]\n+  __attribute__ ((unused, section(JCR_SECTION_NAME), aligned(sizeof(void*))))\n+  = { };\n+#endif /* JCR_SECTION_NAME */\n+\n #ifdef OBJECT_FORMAT_ELF\n \n /* Declare the __dso_handle variable.  It should have a unique value\n@@ -162,8 +228,6 @@ extern void __cxa_finalize (void *) TARGET_ATTRIBUTE_WEAK;\n    the list we left off processing, and we resume at that point,\n    should we be re-invoked.  */\n \n-static char __EH_FRAME_BEGIN__[];\n-static func_ptr __DTOR_LIST__[];\n static void\n __do_global_dtors_aux (void)\n {\n@@ -214,14 +278,15 @@ fini_dummy (void)\n   asm (TEXT_SECTION_ASM_OP);\n }\n \n-#ifdef EH_FRAME_SECTION_NAME\n+#if defined(EH_FRAME_SECTION_NAME) || defined(JCR_SECTION_NAME)\n /* Stick a call to __register_frame_info into the .init section.  For some\n    reason calls with no arguments work more reliably in .init, so stick the\n    call in another function.  */\n \n static void\n frame_dummy (void)\n {\n+#ifdef EH_FRAME_SECTION_NAME\n   static struct object object;\n #if defined(CRT_GET_RFIB_TEXT) || defined(CRT_GET_RFIB_DATA)\n   void *tbase, *dbase;\n@@ -241,6 +306,11 @@ frame_dummy (void)\n   if (__register_frame_info)\n     __register_frame_info (__EH_FRAME_BEGIN__, &object);\n #endif\n+#endif /* EH_FRAME_SECTION_NAME */\n+#ifdef JCR_SECTION_NAME\n+  if (__JCR_LIST__[0] && _Jv_RegisterClasses)\n+    _Jv_RegisterClasses (__JCR_LIST__);\n+#endif /* JCR_SECTION_NAME */\n }\n \n static void __attribute__ ((__unused__))\n@@ -253,7 +323,7 @@ init_dummy (void)\n #endif\n   asm (TEXT_SECTION_ASM_OP);\n }\n-#endif /* EH_FRAME_SECTION_NAME */\n+#endif /* EH_FRAME_SECTION_NAME || JCR_SECTION_NAME */\n \n #else  /* OBJECT_FORMAT_ELF */\n \n@@ -308,15 +378,13 @@ __do_global_ctors_aux (void)\t/* prologue goes in .init section */\n \n #endif /* OBJECT_FORMAT_ELF */\n \n-#else /* defined(INIT_SECTION_ASM_OP) */\n+#else /* INIT_SECTION_ASM_OP */\n \n #ifdef HAS_INIT_SECTION\n /* This case is used by the Irix 6 port, which supports named sections but\n    not an SVR4-style .fini section.  __do_global_dtors can be non-static\n    in this case because we protect it with -hidden_symbol.  */\n \n-static char __EH_FRAME_BEGIN__[];\n-static func_ptr __DTOR_LIST__[];\n void\n __do_global_dtors (void)\n {\n@@ -330,88 +398,27 @@ __do_global_dtors (void)\n #endif\n }\n \n-#ifdef EH_FRAME_SECTION_NAME\n+#if defined(EH_FRAME_SECTION_NAME) || defined(JCR_SECTION_NAME)\n /* Define a function here to call __register_frame.  crtend.o is linked in\n    after libgcc.a, and hence can't call libgcc.a functions directly.  That\n    can lead to unresolved function references.  */\n void\n __frame_dummy (void)\n {\n+#ifdef EH_FRAME_SECTION_NAME\n   static struct object object;\n   if (__register_frame_info)\n     __register_frame_info (__EH_FRAME_BEGIN__, &object);\n-}\n-#endif\n-#endif\n-\n-#endif /* defined(INIT_SECTION_ASM_OP) */\n-\n-/* NOTE:  In order to be able to support SVR4 shared libraries, we arrange\n-   to have one set of symbols { __CTOR_LIST__, __DTOR_LIST__, __CTOR_END__,\n-   __DTOR_END__ } per root executable and also one set of these symbols\n-   per shared library.  So in any given whole process image, we may have\n-   multiple definitions of each of these symbols.  In order to prevent\n-   these definitions from conflicting with one another, and in order to\n-   ensure that the proper lists are used for the initialization/finalization\n-   of each individual shared library (respectively), we give these symbols\n-   only internal (i.e. `static') linkage, and we also make it a point to\n-   refer to only the __CTOR_END__ symbol in crtend.o and the __DTOR_LIST__\n-   symbol in crtbegin.o, where they are defined.  */\n-\n-/* The -1 is a flag to __do_global_[cd]tors indicating that this table\n-   does not start with a count of elements.  */\n-#ifdef CTOR_LIST_BEGIN\n-CTOR_LIST_BEGIN;\n-\n-#elif defined(CTORS_SECTION_ASM_OP)\n-/* Hack: force cc1 to switch to .data section early, so that assembling\n-   __CTOR_LIST__ does not undo our behind-the-back change to .ctors.  */\n-static func_ptr force_to_data[1] __attribute__ ((__unused__)) = { };\n-asm (CTORS_SECTION_ASM_OP);\n-STATIC func_ptr __CTOR_LIST__[1]\n-  __attribute__ ((__unused__, aligned(sizeof(func_ptr))))\n-  = { (func_ptr) (-1) };\n-\n-#else\n-STATIC func_ptr __CTOR_LIST__[1]\n-  __attribute__ ((__unused__, section(\".ctors\"), aligned(sizeof(func_ptr))))\n-  = { (func_ptr) (-1) };\n-\n-#endif\n-\n-#ifdef DTOR_LIST_BEGIN\n-DTOR_LIST_BEGIN;\n-#elif defined(DTORS_SECTION_ASM_OP)\n-asm (DTORS_SECTION_ASM_OP);\n-STATIC func_ptr __DTOR_LIST__[1]\n-  __attribute__ ((aligned(sizeof(func_ptr))))\n-  = { (func_ptr) (-1) };\n-#else\n-STATIC func_ptr __DTOR_LIST__[1]\n-  __attribute__((section(\".dtors\"), aligned(sizeof(func_ptr))))\n-  = { (func_ptr) (-1) };\n #endif\n-\n-#ifdef EH_FRAME_SECTION_NAME\n-/* Stick a label at the beginning of the frame unwind info so we can register\n-   and deregister it with the exception handling library code.  */\n-#ifdef INIT_SECTION_ASM_OP\n-STATIC\n-#endif\n-char __EH_FRAME_BEGIN__[]\n-     __attribute__((section(EH_FRAME_SECTION_NAME), aligned(4)))\n-     = { };\n-#endif /* EH_FRAME_SECTION_NAME */\n-\n #ifdef JCR_SECTION_NAME\n-/* Stick a label at the beginning of the java class registration info\n-   so we can register them properly.  */\n-\n-STATIC void *__JCR_LIST__[]\n-  __attribute__ ((unused, section(JCR_SECTION_NAME), aligned(sizeof(func_ptr))))\n-  = { 0 };\n-#endif /* JCR_SECTION_NAME */\n+  if (__JCR_LIST__[0] && _Jv_RegisterClasses)\n+    _Jv_RegisterClasses (__JCR_LIST__);\n+#endif\n+}\n+#endif /* EH_FRAME_SECTION_NAME || JCR_SECTION_NAME */\n \n+#endif /* HAS_INIT_SECTION */\n+#endif /* INIT_SECTION_ASM_OP */\n #endif /* defined(CRT_BEGIN) */\n \n #ifdef CRT_END\n@@ -420,25 +427,11 @@ STATIC void *__JCR_LIST__[]\n \n #ifdef OBJECT_FORMAT_ELF\n \n-#ifdef JCR_SECTION_NAME\n-extern void _Jv_RegisterClasses (void *) __attribute__((weak));\n-static void *__JCR_END__[];\n-#endif\n-\n static func_ptr __CTOR_END__[];\n static void\n __do_global_ctors_aux (void)\n {\n   func_ptr *p;\n-#ifdef JCR_SECTION_NAME\n-  void **jcr;\n-  if (_Jv_RegisterClasses)\n-    {\n-      for (jcr = __JCR_END__ - 1; *jcr != NULL; jcr--);\n-      if (*(jcr + 1))\n-\t_Jv_RegisterClasses (jcr + 1);\n-    }\n-#endif\n   for (p = __CTOR_END__ - 1; *p != (func_ptr) -1; p--)\n     (*p) ();\n }\n@@ -505,14 +498,12 @@ asm (TEXT_SECTION_ASM_OP);\n    not an SVR4-style .init section.  __do_global_ctors can be non-static\n    in this case because we protect it with -hidden_symbol.  */\n static func_ptr __CTOR_END__[];\n-#ifdef EH_FRAME_SECTION_NAME\n extern void __frame_dummy (void);\n-#endif\n void\n __do_global_ctors (void)\n {\n   func_ptr *p;\n-#ifdef EH_FRAME_SECTION_NAME\n+#if defind(EH_FRAME_SECTION_NAME) || defined(JCR_SECTION_NAME)\n   __frame_dummy ();\n #endif\n   for (p = __CTOR_END__ - 1; *p != (func_ptr) -1; p--)"}]}