{"sha": "b31a2c5a3a32245bb7035fc20a5421b0ee059a4f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjMxYTJjNWEzYTMyMjQ1YmI3MDM1ZmMyMGE1NDIxYjBlZTA1OWE0Zg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-03-22T16:11:28Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-03-22T16:11:28Z"}, "message": "alpha.h (ASM_OUTPUT_ALIGN): Move to config/alpha/elf.h\n\n\t* config/alpha/alpha.h (ASM_OUTPUT_ALIGN): Move to config/alpha/elf.h\n\t(ASM_OUTPUT_SKIP): Move to config/alpha/vms.h\n\t(ASM_OUTPUT_LOCAL): Ditto.\n\t(ASM_OUTPUT_COMMON): Remove.\n\t* config/alpha/elf.h (ASM_OUTPUT_DEF_FROM_DECLS): Use ASM_OUTPUT_DEF.\n\t* config/alpha/vms.h (ASM_OUTPUT_ALIGN): Do not undefine before define.\n\nFrom-SVN: r185700", "tree": {"sha": "1dacf489a04bd9a4513d5e9e36be9a8774b5b65e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1dacf489a04bd9a4513d5e9e36be9a8774b5b65e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b31a2c5a3a32245bb7035fc20a5421b0ee059a4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b31a2c5a3a32245bb7035fc20a5421b0ee059a4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b31a2c5a3a32245bb7035fc20a5421b0ee059a4f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b31a2c5a3a32245bb7035fc20a5421b0ee059a4f/comments", "author": null, "committer": null, "parents": [{"sha": "159bde98210acec60cfd91e01ef36661059c0f0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/159bde98210acec60cfd91e01ef36661059c0f0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/159bde98210acec60cfd91e01ef36661059c0f0a"}], "stats": {"total": 77, "additions": 36, "deletions": 41}, "files": [{"sha": "3dde73b693591f2f3f1a8068648dcf1b41e39283", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b31a2c5a3a32245bb7035fc20a5421b0ee059a4f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b31a2c5a3a32245bb7035fc20a5421b0ee059a4f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b31a2c5a3a32245bb7035fc20a5421b0ee059a4f", "patch": "@@ -1,11 +1,20 @@\n+2012-03-22  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/alpha/alpha.h (ASM_OUTPUT_ALIGN): Move to config/alpha/elf.h\n+\t(ASM_OUTPUT_SKIP): Move to config/alpha/vms.h\n+\t(ASM_OUTPUT_LOCAL): Ditto.\n+\t(ASM_OUTPUT_COMMON): Remove.\n+\t* config/alpha/elf.h (ASM_OUTPUT_DEF_FROM_DECLS): Use ASM_OUTPUT_DEF.\n+\t* config/alpha/vms.h (ASM_OUTPUT_ALIGN): Do not undefine before define.\n+\n 2012-03-22  Jan Hubicka  <jh@suse.cz>\n \n \tPR middle-end/51737\n \t* cgraph.c (cgraph_remove_node_and_inline_clones): Add FORBIDDEN_NODE\n \tparameter.\n \t* cgraph.h (cgraph_remove_node_and_inline_clones): Update prototype.\n-\t* ipa-inline-transform.c (save_inline_function_body): Remove copied clone\n-\tif needed.\n+\t* ipa-inline-transform.c (save_inline_function_body): Remove\n+\tcopied clone if needed.\n \t* tree-inline.c (delete_unreachable_blocks_update_callgraph): Update.\n \n 2012-03-22  Richard Guenther  <rguenther@suse.de>\n@@ -33,9 +42,8 @@\n \t(prune_clobbered_mems): New function.\n \t(compute_antic_aux): Use it to prune ANTIC_OUT.\n \t(compute_partial_antic_aux): Use it to prune PA_IN.\n-\t(compute_avail): Only insert expressions into EXP_GEN that\n-\tare not invalidated when translated up to the beginning of\n-\tthe block.\n+\t(compute_avail): Only insert expressions into EXP_GEN that are not\n+\tinvalidated when translated up to the beginning of the block.\n \n 2012-03-22  Richard Guenther  <rguenther@suse.de>\n "}, {"sha": "194e9a257e5dbf8541012c38d6723c837db0651a", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b31a2c5a3a32245bb7035fc20a5421b0ee059a4f/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b31a2c5a3a32245bb7035fc20a5421b0ee059a4f/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=b31a2c5a3a32245bb7035fc20a5421b0ee059a4f", "patch": "@@ -1036,36 +1036,6 @@ do {\t\t\t\t\t\t\\\n \n #define ASM_OUTPUT_ADDR_DIFF_ELT(FILE, BODY, VALUE, REL) \\\n   fprintf (FILE, \"\\t.gprel32 $L%d\\n\", (VALUE))\n-\n-/* This is how to output an assembler line\n-   that says to advance the location counter\n-   to a multiple of 2**LOG bytes.  */\n-\n-#define ASM_OUTPUT_ALIGN(FILE,LOG)\t\\\n-  if ((LOG) != 0)\t\t\t\\\n-    fprintf (FILE, \"\\t.align %d\\n\", LOG);\n-\n-/* This is how to advance the location counter by SIZE bytes.  */\n-\n-#undef ASM_OUTPUT_SKIP\n-#define ASM_OUTPUT_SKIP(FILE,SIZE)  \\\n-  fprintf (FILE, \"\\t.space \"HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\", (SIZE))\n-\n-/* This says how to output an assembler line\n-   to define a global common symbol.  */\n-\n-#define ASM_OUTPUT_COMMON(FILE, NAME, SIZE, ROUNDED)  \\\n-( fputs (\"\\t.comm \", (FILE)),\t\t\t\\\n-  assemble_name ((FILE), (NAME)),\t\t\\\n-  fprintf ((FILE), \",\"HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\", (SIZE)))\n-\n-/* This says how to output an assembler line\n-   to define a local common symbol.  */\n-\n-#define ASM_OUTPUT_LOCAL(FILE, NAME, SIZE,ROUNDED)\t\\\n-( fputs (\"\\t.lcomm \", (FILE)),\t\t\t\t\\\n-  assemble_name ((FILE), (NAME)),\t\t\t\\\n-  fprintf ((FILE), \",\"HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\", (SIZE)))\n \f\n \n /* Print operand X (an rtx) in assembler syntax to file FILE."}, {"sha": "70be527f79a71eb0ad816d1f097148d9d27b8004", "filename": "gcc/config/alpha/elf.h", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b31a2c5a3a32245bb7035fc20a5421b0ee059a4f/gcc%2Fconfig%2Falpha%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b31a2c5a3a32245bb7035fc20a5421b0ee059a4f/gcc%2Fconfig%2Falpha%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Felf.h?ref=b31a2c5a3a32245bb7035fc20a5421b0ee059a4f", "patch": "@@ -27,9 +27,17 @@ along with GCC; see the file COPYING3.  If not see\n \n /* Do not output a .file directive at the beginning of the input file.  */\n  \n-#undef TARGET_ASM_FILE_START_FILE_DIRECTIVE\n+#undef  TARGET_ASM_FILE_START_FILE_DIRECTIVE\n #define TARGET_ASM_FILE_START_FILE_DIRECTIVE false\n \n+/* This is how to output an assembler line\n+   that says to advance the location counter\n+   to a multiple of 2**LOG bytes.  */\n+\n+#define ASM_OUTPUT_ALIGN(FILE,LOG)\t\t\\\n+  if ((LOG) != 0)\t\t\t\t\\\n+    fprintf (FILE, \"\\t.align %d\\n\", LOG);\n+\n /* This says how to output assembler code to declare an\n    uninitialized internal linkage data object.  Under SVR4,\n    the linker seems to want the alignment of data objects\n@@ -105,10 +113,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n \tassemble_name (FILE, name);\t\t\t\t\\\n \tfputs (\"..ng\\n\", FILE);\t\t\t\t\t\\\n       }\t\t\t\t\t\t\t\t\\\n-    assemble_name(FILE, alias);\t\t\t\t\t\\\n-    fputs(\" = \", FILE);\t\t\t\t\t\t\\\n-    assemble_name(FILE, name);\t\t\t\t\t\\\n-    fputc('\\n', FILE);\t\t\t\t\t\t\\\n+    ASM_OUTPUT_DEF (FILE, alias, name);\t\t\t\t\\\n   } while (0)\n \n /* Provide a STARTFILE_SPEC appropriate for ELF.  Here we add the"}, {"sha": "b1d46b5e979f2259fb82c58ebe5ac8000a4b1796", "filename": "gcc/config/alpha/vms.h", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b31a2c5a3a32245bb7035fc20a5421b0ee059a4f/gcc%2Fconfig%2Falpha%2Fvms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b31a2c5a3a32245bb7035fc20a5421b0ee059a4f/gcc%2Fconfig%2Falpha%2Fvms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fvms.h?ref=b31a2c5a3a32245bb7035fc20a5421b0ee059a4f", "patch": "@@ -217,10 +217,22 @@ typedef struct {int num_args; enum avms_arg_type atypes[6];} avms_arg_info;\n    that says to advance the location counter\n    to a multiple of 2**LOG bytes.  */\n \n-#undef ASM_OUTPUT_ALIGN\n #define ASM_OUTPUT_ALIGN(FILE,LOG)\t\\\n     fprintf (FILE, \"\\t.align %d\\n\", LOG);\n \n+/* This is how to advance the location counter by SIZE bytes.  */\n+\n+#define ASM_OUTPUT_SKIP(FILE,SIZE)  \\\n+  fprintf (FILE, \"\\t.space \"HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\", (SIZE))\n+\n+/* This says how to output an assembler line\n+   to define a global common symbol.  */\n+\n+#define ASM_OUTPUT_LOCAL(FILE, NAME, SIZE,ROUNDED)\t\\\n+( fputs (\"\\t.lcomm \", (FILE)),\t\t\t\t\\\n+  assemble_name ((FILE), (NAME)),\t\t\t\\\n+  fprintf ((FILE), \",\"HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\", (SIZE)))\n+\n /* Switch into a generic section.  */\n #define TARGET_ASM_NAMED_SECTION vms_asm_named_section\n "}]}