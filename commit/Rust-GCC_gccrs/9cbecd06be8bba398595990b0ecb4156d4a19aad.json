{"sha": "9cbecd06be8bba398595990b0ecb4156d4a19aad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWNiZWNkMDZiZThiYmEzOTg1OTU5OTBiMGVjYjQxNTZkNGExOWFhZA==", "commit": {"author": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2014-11-10T00:17:16Z"}, "committer": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2014-11-10T00:17:16Z"}, "message": "PR 47007 and 61847 Locale failures in libgfortran.\n\n2014-11-10  Janne Blomqvist  <jb@gcc.gnu.org>\n\n\tPR libfortran/47007\n\tPR libfortran/61847\n\t* config.h.in: Regenerated.\n\t* configure: Regenerated.\n\t* configure.ac (AC_CHECK_HEADERS_ONCE): Check for xlocale.h.\n\t(AC_CHECK_FUNCS_ONCE): Check for newlocale, freelocale, uselocale,\n\tstrerror_l.\n\t* io/io.h (locale.h): Include.\n\t(xlocale.h): Include if present.\n\t(c_locale): New variable.\n\t(old_locale): New variable.\n\t(old_locale_ctr): New variable.\n\t(old_locale_lock): New variable.\n\t(st_parameter_dt): Add old_locale member.\n\t* io/transfer.c (data_transfer_init): Set locale to \"C\" if doing\n\tformatted transfer.\n\t(finalize_transfer): Reset locale to previous.\n\t* io/unit.c (c_locale): New variable.\n\t(old_locale): New variable.\n\t(old_locale_ctr): New variable.\n\t(old_locale_lock): New variable.\n\t(init_units): Init c_locale, init old_locale_lock.\n\t(close_units): Free c_locale.\n\t* runtime/error.c (locale.h): Include.\n\t(xlocale.h): Include if present.\n\t(gf_strerror): Use strerror_l if available. Reset locale to\n\tLC_GLOBAL_LOCALE for strerror_r branch.\n\n2014-11-10  Janne Blomqvist  <jb@gcc.gnu.org>\n\n\tPR libfortran/47007\n\tPR libfortran/61847\n\t* gfortran.texi: Add note about locale issues to thread-safety\n\tsection.\n\nFrom-SVN: r217273", "tree": {"sha": "632705719333408c765e7eddf68dc9b1418b8854", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/632705719333408c765e7eddf68dc9b1418b8854"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9cbecd06be8bba398595990b0ecb4156d4a19aad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cbecd06be8bba398595990b0ecb4156d4a19aad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9cbecd06be8bba398595990b0ecb4156d4a19aad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cbecd06be8bba398595990b0ecb4156d4a19aad/comments", "author": null, "committer": null, "parents": [{"sha": "f8df4b4e2b524b2f35fe93dd935c175c495a7fd0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8df4b4e2b524b2f35fe93dd935c175c495a7fd0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8df4b4e2b524b2f35fe93dd935c175c495a7fd0"}], "stats": {"total": 237, "additions": 215, "deletions": 22}, "files": [{"sha": "576e69407f13c7c66dc0c8a1a3cb8f32e809f069", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cbecd06be8bba398595990b0ecb4156d4a19aad/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cbecd06be8bba398595990b0ecb4156d4a19aad/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=9cbecd06be8bba398595990b0ecb4156d4a19aad", "patch": "@@ -1,3 +1,10 @@\n+2014-11-10  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\tPR libfortran/47007\n+\tPR libfortran/61847\n+\t* gfortran.texi: Add note about locale issues to thread-safety\n+\tsection.\n+\n 2014-11-04  Bernd Schmidt  <bernds@codesourcery.com>\n \n \t* f95-lang.c (gfc_init_builtin_functions): Use type index 2 for"}, {"sha": "0d19e7a2b3a0cf1785b4a39f3c80dc354d001408", "filename": "gcc/fortran/gfortran.texi", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cbecd06be8bba398595990b0ecb4156d4a19aad/gcc%2Ffortran%2Fgfortran.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cbecd06be8bba398595990b0ecb4156d4a19aad/gcc%2Ffortran%2Fgfortran.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.texi?ref=9cbecd06be8bba398595990b0ecb4156d4a19aad", "patch": "@@ -1223,10 +1223,26 @@ implemented with the @code{system} function, which need not be\n thread-safe.  It is the responsibility of the user to ensure that\n @code{system} is not called concurrently.\n \n-Finally, for platforms not supporting thread-safe POSIX functions,\n-further functionality might not be thread-safe.  For details, please\n-consult the documentation for your operating system.\n-\n+For platforms not supporting thread-safe POSIX functions, further\n+functionality might not be thread-safe.  For details, please consult\n+the documentation for your operating system.\n+\n+The GNU Fortran runtime library uses various C library functions that\n+depend on the locale, such as @code{strtod} and @code{snprintf}.  In\n+order to work correctly in locale-aware programs that set the locale\n+using @code{setlocale}, the locale is reset to the default ``C''\n+locale while executing a formatted @code{READ} or @code{WRITE}\n+statement.  On targets supporting the POSIX 2008 per-thread locale\n+functions (e.g. @code{newlocale}, @code{uselocale},\n+@code{freelocale}), these are used and thus the global locale set\n+using @code{setlocale} or the per-thread locales in other threads are\n+not affected.  However, on targets lacking this functionality, the\n+global LC_NUMERIC locale is set to ``C'' during the formatted I/O.\n+Thus, on such targets it's not safe to call @code{setlocale}\n+concurrently from another thread while a Fortran formatted I/O\n+operation is in progress.  Also, other threads doing something\n+dependent on the LC_NUMERIC locale might not work correctly if a\n+formatted I/O operation is in progress in another thread.\n \n @node Data consistency and durability\n @section Data consistency and durability"}, {"sha": "fc433b1c14c9aa70ec1f8acaff190a530608f0dc", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cbecd06be8bba398595990b0ecb4156d4a19aad/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cbecd06be8bba398595990b0ecb4156d4a19aad/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=9cbecd06be8bba398595990b0ecb4156d4a19aad", "patch": "@@ -1,3 +1,33 @@\n+2014-11-10  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\tPR libfortran/47007\n+\tPR libfortran/61847\n+\t* config.h.in: Regenerated.\n+\t* configure: Regenerated.\n+\t* configure.ac (AC_CHECK_HEADERS_ONCE): Check for xlocale.h.\n+\t(AC_CHECK_FUNCS_ONCE): Check for newlocale, freelocale, uselocale,\n+\tstrerror_l.\n+\t* io/io.h (locale.h): Include.\n+\t(xlocale.h): Include if present.\n+\t(c_locale): New variable.\n+\t(old_locale): New variable.\n+\t(old_locale_ctr): New variable.\n+\t(old_locale_lock): New variable.\n+\t(st_parameter_dt): Add old_locale member.\n+\t* io/transfer.c (data_transfer_init): Set locale to \"C\" if doing\n+\tformatted transfer.\n+\t(finalize_transfer): Reset locale to previous.\n+\t* io/unit.c (c_locale): New variable.\n+\t(old_locale): New variable.\n+\t(old_locale_ctr): New variable.\n+\t(old_locale_lock): New variable.\n+\t(init_units): Init c_locale, init old_locale_lock.\n+\t(close_units): Free c_locale.\n+\t* runtime/error.c (locale.h): Include.\n+\t(xlocale.h): Include if present.\n+\t(gf_strerror): Use strerror_l if available. Reset locale to\n+\tLC_GLOBAL_LOCALE for strerror_r branch.\n+\n 2014-10-20  Janne Blomqvist  <jb@gcc.gnu.org>\n \n \tPR libfortran/63589"}, {"sha": "833d8b42aad5aa8855ff07461b1ad824d506db79", "filename": "libgfortran/config.h.in", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cbecd06be8bba398595990b0ecb4156d4a19aad/libgfortran%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cbecd06be8bba398595990b0ecb4156d4a19aad/libgfortran%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfig.h.in?ref=9cbecd06be8bba398595990b0ecb4156d4a19aad", "patch": "@@ -429,6 +429,9 @@\n /* fp_trap is present */\n #undef HAVE_FP_TRAP\n \n+/* Define to 1 if you have the `freelocale' function. */\n+#undef HAVE_FREELOCALE\n+\n /* Define to 1 if you have the `frexp' function. */\n #undef HAVE_FREXP\n \n@@ -621,6 +624,9 @@\n /* Define to 1 if you have the `mkstemp' function. */\n #undef HAVE_MKSTEMP\n \n+/* Define to 1 if you have the `newlocale' function. */\n+#undef HAVE_NEWLOCALE\n+\n /* Define to 1 if you have the `nextafter' function. */\n #undef HAVE_NEXTAFTER\n \n@@ -723,6 +729,9 @@\n /* Define to 1 if you have the `strcasestr' function. */\n #undef HAVE_STRCASESTR\n \n+/* Define to 1 if you have the `strerror_l' function. */\n+#undef HAVE_STRERROR_L\n+\n /* Define if strerror_r is available in <string.h>. */\n #undef HAVE_STRERROR_R\n \n@@ -840,6 +849,9 @@\n /* Define if target can unlink open files. */\n #undef HAVE_UNLINK_OPEN_FILE\n \n+/* Define to 1 if you have the `uselocale' function. */\n+#undef HAVE_USELOCALE\n+\n /* Define to 1 if you have the `vsnprintf' function. */\n #undef HAVE_VSNPRINTF\n \n@@ -849,6 +861,9 @@\n /* Define if target has a reliable stat. */\n #undef HAVE_WORKING_STAT\n \n+/* Define to 1 if you have the <xlocale.h> header file. */\n+#undef HAVE_XLOCALE_H\n+\n /* Define to 1 if you have the `y0' function. */\n #undef HAVE_Y0\n "}, {"sha": "e75fbffcb968e87ad5815402e106002e87274bb1", "filename": "libgfortran/configure", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cbecd06be8bba398595990b0ecb4156d4a19aad/libgfortran%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cbecd06be8bba398595990b0ecb4156d4a19aad/libgfortran%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure?ref=9cbecd06be8bba398595990b0ecb4156d4a19aad", "patch": "@@ -2549,6 +2549,7 @@ as_fn_append ac_header_list \" fptrap.h\"\n as_fn_append ac_header_list \" fpxcp.h\"\n as_fn_append ac_header_list \" pwd.h\"\n as_fn_append ac_header_list \" complex.h\"\n+as_fn_append ac_header_list \" xlocale.h\"\n as_fn_append ac_func_list \" getrusage\"\n as_fn_append ac_func_list \" times\"\n as_fn_append ac_func_list \" mkstemp\"\n@@ -2605,6 +2606,10 @@ as_fn_append ac_func_list \" mkostemp\"\n as_fn_append ac_func_list \" strnlen\"\n as_fn_append ac_func_list \" strndup\"\n as_fn_append ac_func_list \" strtok_r\"\n+as_fn_append ac_func_list \" newlocale\"\n+as_fn_append ac_func_list \" freelocale\"\n+as_fn_append ac_func_list \" uselocale\"\n+as_fn_append ac_func_list \" strerror_l\"\n as_fn_append ac_header_list \" math.h\"\n # Check that the precious variables saved in the cache have kept the same\n # value.\n@@ -12350,7 +12355,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 12353 \"configure\"\n+#line 12358 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -12456,7 +12461,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 12459 \"configure\"\n+#line 12464 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -16016,6 +16021,8 @@ done\n \n \n \n+\n+\n \n \n \n@@ -16618,6 +16625,14 @@ done\n \n \n \n+\n+\n+\n+\n+\n+\n+\n+\n \n \n "}, {"sha": "f54104bb4602fcb4a2a09863b6d4d98b27daf69f", "filename": "libgfortran/configure.ac", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cbecd06be8bba398595990b0ecb4156d4a19aad/libgfortran%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cbecd06be8bba398595990b0ecb4156d4a19aad/libgfortran%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure.ac?ref=9cbecd06be8bba398595990b0ecb4156d4a19aad", "patch": "@@ -255,7 +255,7 @@ AC_CHECK_TYPES([ptrdiff_t])\n # check header files (we assume C89 is available, so don't check for that)\n AC_CHECK_HEADERS_ONCE(unistd.h sys/time.h sys/times.h sys/resource.h \\\n sys/types.h sys/stat.h sys/wait.h floatingpoint.h ieeefp.h fenv.h fptrap.h \\\n-fpxcp.h pwd.h complex.h) \n+fpxcp.h pwd.h complex.h xlocale.h)\n \n GCC_HEADER_STDINT(gstdint.h)\n \n@@ -290,7 +290,8 @@ else\n    strcasestr getrlimit gettimeofday stat fstat lstat getpwuid vsnprintf dup \\\n    getcwd localtime_r gmtime_r getpwuid_r ttyname_r clock_gettime \\\n    readlink getgid getpid getppid getuid geteuid umask getegid \\\n-   secure_getenv __secure_getenv mkostemp strnlen strndup strtok_r)\n+   secure_getenv __secure_getenv mkostemp strnlen strndup strtok_r newlocale \\\n+   freelocale uselocale strerror_l)\n fi\n \n # Check strerror_r, cannot be above as versions with two and three arguments exist"}, {"sha": "a75177f894ff726b88ebad174d31f0d4354cfec9", "filename": "libgfortran/io/io.h", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cbecd06be8bba398595990b0ecb4156d4a19aad/libgfortran%2Fio%2Fio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cbecd06be8bba398595990b0ecb4156d4a19aad/libgfortran%2Fio%2Fio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fio.h?ref=9cbecd06be8bba398595990b0ecb4156d4a19aad", "patch": "@@ -32,6 +32,17 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n #include <gthr.h>\n \n+\n+/* POSIX 2008 specifies that the extended locale stuff is found in\n+   locale.h, but some systems have them in xlocale.h.  */\n+\n+#include <locale.h>\n+\n+#ifdef HAVE_XLOCALE_H\n+#include <xlocale.h>\n+#endif\n+\n+\n /* Forward declarations.  */\n struct st_parameter_dt;\n typedef struct stream stream;\n@@ -40,6 +51,19 @@ struct format_data;\n typedef struct fnode fnode;\n struct gfc_unit;\n \n+#ifdef HAVE_NEWLOCALE\n+/* We have POSIX 2008 extended locale stuff.  */\n+extern locale_t c_locale;\n+internal_proto(c_locale);\n+#else\n+extern char* old_locale;\n+internal_proto(old_locale);\n+extern int old_locale_ctr;\n+internal_proto(old_locale_ctr);\n+extern __gthread_mutex_t old_locale_lock;\n+internal_proto(old_locale_lock);\n+#endif\n+\n \n /* Macros for testing what kinds of I/O we are doing.  */\n \n@@ -450,6 +474,9 @@ typedef struct st_parameter_dt\n \t  char *line_buffer;\n \t  struct format_data *fmt;\n \t  namelist_info *ionml;\n+#ifdef HAVE_NEWLOCALE\n+\t  locale_t old_locale;\n+#endif\n \t  /* Current position within the look-ahead line buffer.  */\n \t  int line_buffer_pos;\n \t  /* Storage area for values except for strings.  Must be"}, {"sha": "87b8c05c1a4a2992db24daa151a393da81f2b7bc", "filename": "libgfortran/io/transfer.c", "status": "modified", "additions": 43, "deletions": 12, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cbecd06be8bba398595990b0ecb4156d4a19aad/libgfortran%2Fio%2Ftransfer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cbecd06be8bba398595990b0ecb4156d4a19aad/libgfortran%2Fio%2Ftransfer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Ftransfer.c?ref=9cbecd06be8bba398595990b0ecb4156d4a19aad", "patch": "@@ -2870,13 +2870,27 @@ data_transfer_init (st_parameter_dt *dtp, int read_flag)\n \tdtp->u.p.current_unit->read_bad = 1;\n     }\n \n-  /* Start the data transfer if we are doing a formatted transfer.  */\n-  if (dtp->u.p.current_unit->flags.form == FORM_FORMATTED\n-      && ((cf & (IOPARM_DT_LIST_FORMAT | IOPARM_DT_HAS_NAMELIST_NAME)) == 0)\n-      && dtp->u.p.ionml == NULL)\n-    formatted_transfer (dtp, 0, NULL, 0, 0, 1);\n+  if (dtp->u.p.current_unit->flags.form == FORM_FORMATTED)\n+    {\n+#ifdef HAVE_USELOCALE\n+      dtp->u.p.old_locale = uselocale (c_locale);\n+#else\n+      __gthread_mutex_lock (&old_locale_lock);\n+      if (!old_locale_ctr++)\n+\t{\n+\t  old_locale = setlocale (LC_NUMERIC, NULL);\n+\t  setlocale (LC_NUMERIC, \"C\");\n+\t}\n+      __gthread_mutex_unlock (&old_locale_lock);\n+#endif\n+      /* Start the data transfer if we are doing a formatted transfer.  */\n+      if ((cf & (IOPARM_DT_LIST_FORMAT | IOPARM_DT_HAS_NAMELIST_NAME)) == 0\n+\t&& dtp->u.p.ionml == NULL)\n+\tformatted_transfer (dtp, 0, NULL, 0, 0, 1);\n+    }\n }\n \n+\n /* Initialize an array_loop_spec given the array descriptor.  The function\n    returns the index of the last element of the array, and also returns\n    starting record, where the first I/O goes to (necessary in case of\n@@ -3531,14 +3545,14 @@ finalize_transfer (st_parameter_dt *dtp)\n   if (dtp->u.p.eor_condition)\n     {\n       generate_error (&dtp->common, LIBERROR_EOR, NULL);\n-      return;\n+      goto done;\n     }\n \n   if ((dtp->common.flags & IOPARM_LIBRETURN_MASK) != IOPARM_LIBRETURN_OK)\n     {\n       if (dtp->u.p.current_unit && current_mode (dtp) == UNFORMATTED_SEQUENTIAL)\n \tdtp->u.p.current_unit->current_record = 0;\n-      return;\n+      goto done;\n     }\n \n   if ((dtp->u.p.ionml != NULL)\n@@ -3552,12 +3566,12 @@ finalize_transfer (st_parameter_dt *dtp)\n \n   dtp->u.p.transfer = NULL;\n   if (dtp->u.p.current_unit == NULL)\n-    return;\n+    goto done;\n \n   if ((cf & IOPARM_DT_LIST_FORMAT) != 0 && dtp->u.p.mode == READING)\n     {\n       finish_list_read (dtp);\n-      return;\n+      goto done;\n     }\n \n   if (dtp->u.p.mode == WRITING)\n@@ -3570,7 +3584,7 @@ finalize_transfer (st_parameter_dt *dtp)\n \t  && dtp->u.p.advance_status != ADVANCE_NO)\n \tnext_record (dtp, 1);\n \n-      return;\n+      goto done;\n     }\n \n   dtp->u.p.current_unit->current_record = 0;\n@@ -3579,7 +3593,7 @@ finalize_transfer (st_parameter_dt *dtp)\n     {\n       fbuf_flush (dtp->u.p.current_unit, dtp->u.p.mode);\n       dtp->u.p.seen_dollar = 0;\n-      return;\n+      goto done;\n     }\n \n   /* For non-advancing I/O, save the current maximum position for use in the\n@@ -3591,7 +3605,7 @@ finalize_transfer (st_parameter_dt *dtp)\n       dtp->u.p.current_unit->saved_pos =\n \tdtp->u.p.max_pos > 0 ? dtp->u.p.max_pos - bytes_written : 0;\n       fbuf_flush (dtp->u.p.current_unit, dtp->u.p.mode);\n-      return;\n+      goto done;\n     }\n   else if (dtp->u.p.current_unit->flags.form == FORM_FORMATTED \n            && dtp->u.p.mode == WRITING && !is_internal_unit (dtp))\n@@ -3600,6 +3614,23 @@ finalize_transfer (st_parameter_dt *dtp)\n   dtp->u.p.current_unit->saved_pos = 0;\n \n   next_record (dtp, 1);\n+\n+ done:\n+#ifdef HAVE_USELOCALE\n+  if (dtp->u.p.old_locale != (locale_t) 0)\n+    {\n+      uselocale (dtp->u.p.old_locale);\n+      dtp->u.p.old_locale = (locale_t) 0;\n+    }\n+#else\n+  __gthread_mutex_lock (&old_locale_lock);\n+  if (!--old_locale_ctr)\n+    {\n+      setlocale (LC_NUMERIC, old_locale);\n+      old_locale = NULL;\n+    }\n+  __gthread_mutex_unlock (&old_locale_lock);\n+#endif\n }\n \n /* Transfer function for IOLENGTH. It doesn't actually do any"}, {"sha": "277c7a1a15f451f46d2c8d3b003ebaae899096d2", "filename": "libgfortran/io/unit.c", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cbecd06be8bba398595990b0ecb4156d4a19aad/libgfortran%2Fio%2Funit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cbecd06be8bba398595990b0ecb4156d4a19aad/libgfortran%2Fio%2Funit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Funit.c?ref=9cbecd06be8bba398595990b0ecb4156d4a19aad", "patch": "@@ -90,6 +90,26 @@ static char stdin_name[] = \"stdin\";\n static char stdout_name[] = \"stdout\";\n static char stderr_name[] = \"stderr\";\n \n+\n+#ifdef HAVE_NEWLOCALE\n+locale_t c_locale;\n+#else\n+/* If we don't have POSIX 2008 per-thread locales, we need to use the\n+   traditional setlocale().  To prevent multiple concurrent threads\n+   doing formatted I/O from messing up the locale, we need to store a\n+   global old_locale, and a counter keeping track of how many threads\n+   are currently doing formatted I/O.  The first thread saves the old\n+   locale, and the last one restores it.  */\n+char *old_locale;\n+int old_locale_ctr;\n+#ifdef __GTHREAD_MUTEX_INIT\n+__gthread_mutex_t old_locale_lock = __GTHREAD_MUTEX_INIT;\n+#else\n+__gthread_mutex_t old_locale_lock;\n+#endif\n+#endif\n+\n+\n /* This implementation is based on Stefan Nilsson's article in the\n  * July 1997 Doctor Dobb's Journal, \"Treaps in Java\". */\n \n@@ -561,6 +581,14 @@ init_units (void)\n   gfc_unit *u;\n   unsigned int i;\n \n+#ifdef HAVE_NEWLOCALE\n+  c_locale = newlocale (0, \"C\", 0);\n+#else\n+#ifndef __GTHREAD_MUTEX_INIT\n+  __GTHREAD_MUTEX_INIT_FUNCTION (&old_locale_lock);\n+#endif\n+#endif\n+\n #ifndef __GTHREAD_MUTEX_INIT\n   __GTHREAD_MUTEX_INIT_FUNCTION (&unit_lock);\n #endif\n@@ -736,6 +764,10 @@ close_units (void)\n   while (unit_root != NULL)\n     close_unit_1 (unit_root, 1);\n   __gthread_mutex_unlock (&unit_lock);\n+\n+#ifdef HAVE_FREELOCALE\n+  freelocale (c_locale);\n+#endif\n }\n \n "}, {"sha": "7a3a1b744ed20a6b674b826bb669d77c2ff6352e", "filename": "libgfortran/runtime/error.c", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cbecd06be8bba398595990b0ecb4156d4a19aad/libgfortran%2Fruntime%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cbecd06be8bba398595990b0ecb4156d4a19aad/libgfortran%2Fruntime%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Ferror.c?ref=9cbecd06be8bba398595990b0ecb4156d4a19aad", "patch": "@@ -46,6 +46,13 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #endif\n \n \n+#include <locale.h>\n+\n+#ifdef HAVE_XLOCALE_H\n+#include <xlocale.h>\n+#endif\n+\n+\n #ifdef __MINGW32__\n #define HAVE_GETPID 1\n #include <process.h>\n@@ -204,14 +211,26 @@ gfc_xtoa (GFC_UINTEGER_LARGEST n, char *buffer, size_t len)\n }\n \n \n-/* Hopefully thread-safe wrapper for a strerror_r() style function.  */\n+/* Hopefully thread-safe wrapper for a strerror() style function.  */\n \n char *\n gf_strerror (int errnum, \n              char * buf __attribute__((unused)), \n \t     size_t buflen __attribute__((unused)))\n {\n-#ifdef HAVE_STRERROR_R\n+#ifdef HAVE_STRERROR_L\n+  locale_t myloc = newlocale (LC_CTYPE_MASK | LC_MESSAGES_MASK, \"\",\n+\t\t\t      (locale_t) 0);\n+  char *p = strerror_l (errnum, myloc);\n+  freelocale (myloc);\n+  return p;\n+#elif defined(HAVE_STRERROR_R)\n+#ifdef HAVE_USELOCALE\n+  /* Some targets (Darwin at least) have the POSIX 2008 extended\n+     locale functions, but not strerror_l.  So reset the per-thread\n+     locale here.  */\n+  uselocale (LC_GLOBAL_LOCALE);\n+#endif\n   /* POSIX returns an \"int\", GNU a \"char*\".  */\n   return\n     __builtin_choose_expr (__builtin_classify_type (strerror_r (0, buf, 0))"}]}