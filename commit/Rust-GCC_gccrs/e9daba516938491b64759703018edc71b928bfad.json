{"sha": "e9daba516938491b64759703018edc71b928bfad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTlkYWJhNTE2OTM4NDkxYjY0NzU5NzAzMDE4ZWRjNzFiOTI4YmZhZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-06-11T12:37:07Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-06-11T12:37:07Z"}, "message": "[multiple changes]\n\n2014-06-11  Robert Dewar  <dewar@adacore.com>\n\n\t* gnat_rm.texi, switch-c.adb, sem_prag.adb, a-tgdico.ads, par-prag.adb,\n\topt.ads, a-finali.ads, snames.ads-tmpl: Remove all traces of\n\tpragma/aspects Pure_05 Pure_12 Preelaborate_05.\n\t* errout.adb (Output_Messages): Avoid duplicate output for\n\tlibrary level instance.\n\t* sem_elab.adb (Is_Call_Of_Generic_Formal): Moved to outer level\n\t(Check_Elab_Call): Add call to Is_Call_Of_Generic_Formal\n\t* exp_ch4.adb (Expand_N_Op_Expon): New interface for Exp_Modular.\n\t* s-expmod.ads, s-expmod.adb (Exp_Modular): Change interface to\n\taccomodate largest modulus value.\n\t* gnat_ugn.texi: Minor updates.\n\n2014-06-11  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch12.adb (Instantiate_Package_Body): Do not attempt to\n\tload body of generic package or its parent, if body is optional\n\tand the unit does not require a body.\n\nFrom-SVN: r211459", "tree": {"sha": "87a8b227d47c0d341a4fb98206bd08b7e94fb625", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/87a8b227d47c0d341a4fb98206bd08b7e94fb625"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e9daba516938491b64759703018edc71b928bfad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9daba516938491b64759703018edc71b928bfad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9daba516938491b64759703018edc71b928bfad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9daba516938491b64759703018edc71b928bfad/comments", "author": null, "committer": null, "parents": [{"sha": "f852ffee9a67e7a12fd8222de726df01e743b3f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f852ffee9a67e7a12fd8222de726df01e743b3f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f852ffee9a67e7a12fd8222de726df01e743b3f5"}], "stats": {"total": 488, "additions": 122, "deletions": 366}, "files": [{"sha": "0bfe92ddb242699ccb5039b2327dee04a27e4477", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9daba516938491b64759703018edc71b928bfad/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9daba516938491b64759703018edc71b928bfad/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e9daba516938491b64759703018edc71b928bfad", "patch": "@@ -1,3 +1,23 @@\n+2014-06-11  Robert Dewar  <dewar@adacore.com>\n+\n+\t* gnat_rm.texi, switch-c.adb, sem_prag.adb, a-tgdico.ads, par-prag.adb,\n+\topt.ads, a-finali.ads, snames.ads-tmpl: Remove all traces of\n+\tpragma/aspects Pure_05 Pure_12 Preelaborate_05.\n+\t* errout.adb (Output_Messages): Avoid duplicate output for\n+\tlibrary level instance.\n+\t* sem_elab.adb (Is_Call_Of_Generic_Formal): Moved to outer level\n+\t(Check_Elab_Call): Add call to Is_Call_Of_Generic_Formal\n+\t* exp_ch4.adb (Expand_N_Op_Expon): New interface for Exp_Modular.\n+\t* s-expmod.ads, s-expmod.adb (Exp_Modular): Change interface to\n+\taccomodate largest modulus value.\n+\t* gnat_ugn.texi: Minor updates.\n+\n+2014-06-11  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch12.adb (Instantiate_Package_Body): Do not attempt to\n+\tload body of generic package or its parent, if body is optional\n+\tand the unit does not require a body.\n+\n 2014-06-11  Robert Dewar  <dewar@adacore.com>\n \n \t* gnat_rm.texi: Document System.Unsigned_Types."}, {"sha": "b65f6eabac7f32913978f32446af7d1124df8a42", "filename": "gcc/ada/a-finali.ads", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9daba516938491b64759703018edc71b928bfad/gcc%2Fada%2Fa-finali.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9daba516938491b64759703018edc71b928bfad/gcc%2Fada%2Fa-finali.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-finali.ads?ref=e9daba516938491b64759703018edc71b928bfad", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -38,12 +38,7 @@ with System.Finalization_Root;\n pragma Warnings (On);\n \n package Ada.Finalization is\n-   pragma Pure_12;\n-   --  Ada.Finalization is declared pure in Ada 2012 (AI05-0212)\n-\n-   pragma Preelaborate;\n-   pragma Remote_Types;\n-   --  The above apply in versions of Ada before Ada 2012\n+   pragma Pure;\n \n    type Controlled is abstract tagged private;\n    pragma Preelaborable_Initialization (Controlled);"}, {"sha": "6da900183dca761ff367c34a7ccfc6a3c5bd29e8", "filename": "gcc/ada/a-tgdico.ads", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9daba516938491b64759703018edc71b928bfad/gcc%2Fada%2Fa-tgdico.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9daba516938491b64759703018edc71b928bfad/gcc%2Fada%2Fa-tgdico.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-tgdico.ads?ref=e9daba516938491b64759703018edc71b928bfad", "patch": "@@ -27,7 +27,3 @@ function Ada.Tags.Generic_Dispatching_Constructor\n    Params  : not null access Parameters) return T'Class;\n pragma Preelaborate (Generic_Dispatching_Constructor);\n pragma Import (Intrinsic, Generic_Dispatching_Constructor);\n---  Note: the reason that we use Preelaborate_05 here is so that this will\n---  compile fine during the normal build procedures. In Ada 2005 mode (which\n---  is required for this package anyway), this will be treated as Preelaborate\n---  so everything will be fine."}, {"sha": "0eb997a4fba28883399a31850638b1a7dbe6253d", "filename": "gcc/ada/errout.adb", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9daba516938491b64759703018edc71b928bfad/gcc%2Fada%2Ferrout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9daba516938491b64759703018edc71b928bfad/gcc%2Fada%2Ferrout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.adb?ref=e9daba516938491b64759703018edc71b928bfad", "patch": "@@ -1851,8 +1851,14 @@ package body Errout is\n \n               and then\n                 (No (Cunit_Entity (U))\n-                   or else Comes_From_Source (Cunit_Entity (U))\n-                   or else not Is_Subprogram (Cunit_Entity (U)))\n+                  or else Comes_From_Source (Cunit_Entity (U))\n+                  or else not Is_Subprogram (Cunit_Entity (U)))\n+\n+              --  If the compilation unit associated with this unit does not\n+              --  come from source, it means it is an instantiation that should\n+              --  not be included in the source listing.\n+\n+              and then Comes_From_Source (Cunit (U))\n             then\n                declare\n                   Sfile : constant Source_File_Index := Source_Index (U);"}, {"sha": "7c847639a6fd2fbc10d422c40d608de26e903d2e", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9daba516938491b64759703018edc71b928bfad/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9daba516938491b64759703018edc71b928bfad/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=e9daba516938491b64759703018edc71b928bfad", "patch": "@@ -7593,7 +7593,7 @@ package body Exp_Ch4 is\n                 Make_Function_Call (Loc,\n                   Name => New_Occurrence_Of (RTE (RE_Exp_Modular), Loc),\n                   Parameter_Associations => New_List (\n-                    Convert_To (Standard_Integer, Base),\n+                    Convert_To (RTE (RE_Unsigned), Base),\n                     Make_Integer_Literal (Loc, Modulus (Rtyp)),\n                     Exp))));\n "}, {"sha": "c62579be45c76b3d20e8ccb60d586166175bbb80", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 0, "deletions": 84, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9daba516938491b64759703018edc71b928bfad/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9daba516938491b64759703018edc71b928bfad/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=e9daba516938491b64759703018edc71b928bfad", "patch": "@@ -218,16 +218,13 @@ Implementation Defined Pragmas\n * Pragma Precondition::\n * Pragma Predicate::\n * Pragma Preelaborable_Initialization::\n-* Pragma Preelaborate_05::\n * Pragma Pre_Class::\n * Pragma Priority_Specific_Dispatching::\n * Pragma Profile::\n * Pragma Profile_Warnings::\n * Pragma Propagate_Exceptions::\n * Pragma Provide_Shift_Operators::\n * Pragma Psect_Object::\n-* Pragma Pure_05::\n-* Pragma Pure_12::\n * Pragma Pure_Function::\n * Pragma Ravenscar::\n * Pragma Refined_State::\n@@ -297,9 +294,6 @@ Implementation Defined Aspects\n * Aspect Object_Size::\n * Aspect Persistent_BSS::\n * Aspect Predicate::\n-* Aspect Preelaborate_05::\n-* Aspect Pure_05::\n-* Aspect Pure_12::\n * Aspect Pure_Function::\n * Aspect Refined_State::\n * Aspect Remote_Access_Type::\n@@ -1054,16 +1048,13 @@ consideration, the use of these pragmas should be minimized.\n * Pragma Precondition::\n * Pragma Predicate::\n * Pragma Preelaborable_Initialization::\n-* Pragma Preelaborate_05::\n * Pragma Pre_Class::\n * Pragma Priority_Specific_Dispatching::\n * Pragma Profile::\n * Pragma Profile_Warnings::\n * Pragma Propagate_Exceptions::\n * Pragma Provide_Shift_Operators::\n * Pragma Psect_Object::\n-* Pragma Pure_05::\n-* Pragma Pure_12::\n * Pragma Pure_Function::\n * Pragma Ravenscar::\n * Pragma Refined_State::\n@@ -5598,24 +5589,6 @@ This pragma is standard in Ada 2005, but is available in all earlier\n versions of Ada as an implementation-defined pragma.\n See Ada 2012 Reference Manual for details.\n \n-@node Pragma Preelaborate_05\n-@unnumberedsec Pragma Preelaborate_05\n-@findex Preelaborate_05\n-@noindent\n-Syntax:\n-\n-@smallexample @c ada\n-pragma Preelaborate_05 [(library_unit_NAME)];\n-@end smallexample\n-\n-@noindent\n-This pragma is only available in GNAT mode (@option{-gnatg} switch set)\n-and is intended for use in the standard run-time library only. It has\n-no effect in Ada 83 or Ada 95 mode, but is\n-equivalent to @code{pragma Prelaborate} when operating in later\n-Ada versions. This is used to handle some cases where packages\n-not previously preelaborable became so in Ada 2005.\n-\n @node Pragma Pre_Class\n @unnumberedsec Pragma Pre_Class\n @cindex Pre_Class\n@@ -5903,42 +5876,6 @@ EXTERNAL_SYMBOL ::=\n @noindent\n This pragma is identical in effect to pragma @code{Common_Object}.\n \n-@node Pragma Pure_05\n-@unnumberedsec Pragma Pure_05\n-@findex Pure_05\n-@noindent\n-Syntax:\n-\n-@smallexample @c ada\n-pragma Pure_05 [(library_unit_NAME)];\n-@end smallexample\n-\n-@noindent\n-This pragma is only available in GNAT mode (@option{-gnatg} switch set)\n-and is intended for use in the standard run-time library only. It has\n-no effect in Ada 83 or Ada 95 mode, but is\n-equivalent to @code{pragma Pure} when operating in later\n-Ada versions. This is used to handle some cases where packages\n-not previously pure became so in Ada 2005.\n-\n-@node Pragma Pure_12\n-@unnumberedsec Pragma Pure_12\n-@findex Pure_12\n-@noindent\n-Syntax:\n-\n-@smallexample @c ada\n-pragma Pure_12 [(library_unit_NAME)];\n-@end smallexample\n-\n-@noindent\n-This pragma is only available in GNAT mode (@option{-gnatg} switch set)\n-and is intended for use in the standard run-time library only. It has\n-no effect in Ada 83, Ada 95, or Ada 2005 modes, but is\n-equivalent to @code{pragma Pure} when operating in later\n-Ada versions. This is used to handle some cases where packages\n-not previously pure became so in Ada 2012.\n-\n @node Pragma Pure_Function\n @unnumberedsec Pragma Pure_Function\n @findex Pure_Function\n@@ -7920,9 +7857,6 @@ clause.\n * Aspect Object_Size::\n * Aspect Persistent_BSS::\n * Aspect Predicate::\n-* Aspect Preelaborate_05::\n-* Aspect Pure_05::\n-* Aspect Pure_12::\n * Aspect Pure_Function::\n * Aspect Refined_State::\n * Aspect Remote_Access_Type::\n@@ -8126,24 +8060,6 @@ predicate is static or dynamic is controlled by the form of the\n expression. It is also separately controllable using pragma\n @code{Assertion_Policy}.\n \n-@node Aspect Preelaborate_05\n-@unnumberedsec Aspect Preelaborate_05\n-@findex Preelaborate_05\n-@noindent\n-This aspect is equivalent to pragma @code{Preelaborate_05}.\n-\n-@node Aspect Pure_05\n-@unnumberedsec Aspect Pure_05\n-@findex Pure_05\n-@noindent\n-This aspect is equivalent to pragma @code{Pure_05}.\n-\n-@node Aspect Pure_12\n-@unnumberedsec Aspect Pure_12\n-@findex Pure_12\n-@noindent\n-This aspect is equivalent to pragma @code{Pure_12}.\n-\n @node Aspect Pure_Function\n @unnumberedsec Aspect Pure_Function\n @findex Pure_Function"}, {"sha": "9a295cb9ccd188258b9597cb1184f348952f2a1c", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 14, "deletions": 65, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9daba516938491b64759703018edc71b928bfad/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9daba516938491b64759703018edc71b928bfad/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=e9daba516938491b64759703018edc71b928bfad", "patch": "@@ -15098,7 +15098,7 @@ Ada source code into XML.\n \n @menu\n * Switches for gnat2xml::\n-* Driving gnat2xml with gnatmake or gprbuild::\n+* Driving gnat2xml with gnatmake::\n * Other Programs::\n * Structure of the XML::\n @end menu\n@@ -15157,8 +15157,6 @@ Options:\n -v -- verbose (print out the command line options, and the names of\n       output files as they are generated).\n \n--t -- do not delete tree files when done (they are deleted by default).\n-\n -cargs ... -- options to pass to gcc\n @end smallexample\n \n@@ -15167,21 +15165,9 @@ If a project file is specified and no argument source is explicitly\n specified, and no @option{-U} is specified, then the set of processed\n sources is all the immediate units of the argument project.\n \n-\n-You can generate the ``tree files'' ahead of time using the -gnatct switch:\n-\n-@smallexample\n-gnatmake -gnat2012 -gnatct *.ad[sb]\n-@end smallexample\n-\n-@noindent\n-If tree files do not exist, @command{gnat2xml} will create them by running gcc.\n-See the ASIS documentation for more information on tree files.\n-\n Example:\n \n @smallexample\n-mkdir xml-files\n gnat2xml -v -mxml-files *.ad[sb] -cargs -gnat2012\n @end smallexample\n \n@@ -15192,75 +15178,38 @@ body source code lives in mumble-dumble.ads and mumble-dumble.adb,\n the above will produce xml-files/mumble-dumble.ads.xml and\n xml-files/mumble-dumble.adb.xml.\n \n-@node Driving gnat2xml with gnatmake or gprbuild\n-@section Driving @command{gnat2xml} with @command{gnatmake} or @command{gprbuild}\n+@node Driving gnat2xml with gnatmake\n+@section Driving @command{gnat2xml} with @command{gnatmake}\n \n @noindent\n-You can use gnatmake or gprbuild to drive @command{gnat2xml} to get\n-incremental updates of the XML files on a per-source-file basis. For\n-example, if you already have a bunch of XML files, and then you change\n-one source file, it will regenerate XML files only for that source\n-file, and other source files that depend on it. Gnatmake and gprbuild\n-take care of tracking inter-file dependencies. For example, if\n-this.adb says @code{with That;}, then this.adb depends on that.ads.\n+You can use gnatmake to drive @command{gnat2xml} to get incremental\n+updates of the XML files on a per-source-file basis. For example, if\n+you already have a bunch of XML files, and then you change one source\n+file, it will regenerate XML files only for that source file, and\n+other related source files. Gnatmake takes care of tracking inter-file\n+dependencies.\n \n-To do this, you tell gnatmake/gprbuild to pretend that\n-@command{gnat2xml} is the Ada compiler (instead of using gcc as the\n-Ada compiler, as is normal).\n+To do this, you tell gnatmake to pretend that @command{gnat2xml} is\n+the Ada compiler (instead of using gcc as the Ada compiler, as is\n+normal).\n \n To tell gnatmake to use @command{gnat2xml} instead of gcc as the\n ``compiler'', for example:\n \n @smallexample\n-gnatmake -gnatc *.adb --GCC=\"gnat2xml -t -mxml\"\n+gnatmake -gnatc main.adb --GCC=\"gnat2xml -mxml\"\n @end smallexample\n \n @noindent\n The @option{--GCC=} switch tells gnatmake that the ``compiler'' to run\n-is @command{gnat2xml -t -mxml}. The @option{-t} switch means to keep the tree\n-files, so they can be reused on the next run. (@command{gnat2xml}\n-deletes them by default.) As usual, @option{-mxml} means to put the\n+is @command{gnat2xml -mxml}. As usual, @option{-mxml} means to put the\n XML files in the @file{xml} subdirectory.\n \n You must give the @option{-gnatc} switch to gnatmake, which means\n ``compile only; do not generate object code''. Otherwise, gnatmake will\n complain about missing object (*.o) files; @command{gnat2xml} of\n course does not generate *.o files.\n \n-Using gprbuild is similar: you tell it to use @command{gnat2xml}\n-instead of gcc. First write a project file, such as my_project.gpr:\n-\n-@smallexample @c projectfile\n-project My_Project is\n-\n-   package Compiler is\n-      for Driver (\"ada\") use \"gnat2xml\";\n-      --  Use gnat2xml instead of the usual gcc.\n-\n-      for Default_Switches (\"ada\") use (\"-t\", \"-mxml\");\n-      --  Same switches as in the gnatmake case.\n-   end Compiler;\n-\n-end My_Project;\n-@end smallexample\n-\n-@noindent\n-Then:\n-\n-@smallexample @c projectfile\n-gprbuild --no-object-check -P my_project.gpr\n-@end smallexample\n-\n-@noindent\n-The @option{--no-object-check} switch serves the same purpose as\n-@option{-gnatc} in the gnatmake case --- it tells gprbuild not to\n-expect that the ``compiler'' (really @command{gnat2xml}) will produce\n-*.o files.\n-\n-See the gprbuild documentation for information on many other things\n-you can put in the project file, such as telling it where to find\n-the source files.\n-\n @node Other Programs\n @section Other Programs\n "}, {"sha": "a082389ae6f9f25de7ea0ee5c6c5eeabd6e7cd00", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9daba516938491b64759703018edc71b928bfad/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9daba516938491b64759703018edc71b928bfad/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=e9daba516938491b64759703018edc71b928bfad", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -137,12 +137,11 @@ package Opt is\n \n    Ada_Version_Explicit : Ada_Version_Type := Ada_Version_Default;\n    --  GNAT\n-   --  Like Ada_Version, but does not get set implicitly for predefined\n-   --  or internal units, so it reflects the Ada version explicitly set\n-   --  using configuration pragmas or compiler switches (or if neither\n-   --  appears, it remains set to Ada_Version_Default). This is used in\n-   --  the rare cases (notably for pragmas Preelaborate_05 and Pure_05/12)\n-   --  where in the run-time we want the explicit version set.\n+   --  Like Ada_Version, but does not get set implicitly for predefined or\n+   --  internal units, so it reflects the Ada version explicitly set using\n+   --  configuration pragmas or compiler switches (or if neither appears, it\n+   --  remains set to Ada_Version_Default). This is used in the rare cases\n+   --  (notably pragma Obsolescent) where we want the explicit version set.\n \n    Ada_Version_Runtime : Ada_Version_Type := Ada_2012;\n    --  GNAT"}, {"sha": "f120963b677ddd119566774a7e799964db306110", "filename": "gcc/ada/par-prag.adb", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9daba516938491b64759703018edc71b928bfad/gcc%2Fada%2Fpar-prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9daba516938491b64759703018edc71b928bfad/gcc%2Fada%2Fpar-prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-prag.adb?ref=e9daba516938491b64759703018edc71b928bfad", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1271,7 +1271,6 @@ begin\n            Pragma_Precondition                   |\n            Pragma_Predicate                      |\n            Pragma_Preelaborate                   |\n-           Pragma_Preelaborate_05                |\n            Pragma_Pre_Class                      |\n            Pragma_Priority                       |\n            Pragma_Priority_Specific_Dispatching  |\n@@ -1281,8 +1280,6 @@ begin\n            Pragma_Provide_Shift_Operators        |\n            Pragma_Psect_Object                   |\n            Pragma_Pure                           |\n-           Pragma_Pure_05                        |\n-           Pragma_Pure_12                        |\n            Pragma_Pure_Function                  |\n            Pragma_Queuing_Policy                 |\n            Pragma_Refined_Depends                |"}, {"sha": "aa1aa11c62f582377570cf826e081a7413519b4b", "filename": "gcc/ada/s-expmod.adb", "status": "modified", "additions": 10, "deletions": 18, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9daba516938491b64759703018edc71b928bfad/gcc%2Fada%2Fs-expmod.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9daba516938491b64759703018edc71b928bfad/gcc%2Fada%2Fs-expmod.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-expmod.adb?ref=e9daba516938491b64759703018edc71b928bfad", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -30,35 +30,27 @@\n ------------------------------------------------------------------------------\n \n package body System.Exp_Mod is\n+   use System.Unsigned_Types;\n \n    -----------------\n    -- Exp_Modular --\n    -----------------\n \n    function Exp_Modular\n-     (Left    : Integer;\n-      Modulus : Integer;\n-      Right   : Natural)\n-      return    Integer\n+     (Left    : Unsigned;\n+      Modulus : Unsigned;\n+      Right   : Natural) return Unsigned\n    is\n-      Result : Integer := 1;\n-      Factor : Integer := Left;\n+      Result : Unsigned := 1;\n+      Factor : Unsigned := Left;\n       Exp    : Natural := Right;\n \n-      function Mult (X, Y : Integer) return Integer;\n-      pragma Inline (Mult);\n+      function Mult (X, Y : Unsigned) return Unsigned is\n+        (Unsigned (Long_Long_Unsigned (X) * Long_Long_Unsigned (Y)\n+                    mod Long_Long_Unsigned (Modulus)));\n       --  Modular multiplication. Note that we can't take advantage of the\n       --  compiler's circuit, because the modulus is not known statically.\n \n-      function Mult (X, Y : Integer) return Integer is\n-      begin\n-         return Integer\n-           (Long_Long_Integer (X) * Long_Long_Integer (Y)\n-             mod Long_Long_Integer (Modulus));\n-      end Mult;\n-\n-   --  Start of processing for Exp_Modular\n-\n    begin\n       --  We use the standard logarithmic approach, Exp gets shifted right\n       --  testing successive low order bits and Factor is the value of the"}, {"sha": "3dd118d5e9fe6c32785122a9b636c6fb345da105", "filename": "gcc/ada/s-expmod.ads", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9daba516938491b64759703018edc71b928bfad/gcc%2Fada%2Fs-expmod.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9daba516938491b64759703018edc71b928bfad/gcc%2Fada%2Fs-expmod.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-expmod.ads?ref=e9daba516938491b64759703018edc71b928bfad", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---           Copyright (C) 1992-2013, Free Software Foundation, Inc.        --\n+--           Copyright (C) 1992-2014, Free Software Foundation, Inc.        --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,13 +33,14 @@\n --  modulus values. Arithmetic is done in Long_Long_Unsigned, with explicit\n --  accounting for the modulus value which is passed as the second argument.\n \n+with System.Unsigned_Types;\n+\n package System.Exp_Mod is\n    pragma Pure;\n \n    function Exp_Modular\n-     (Left    : Integer;\n-      Modulus : Integer;\n-      Right   : Natural)\n-      return    Integer;\n+     (Left    : System.Unsigned_Types.Unsigned;\n+      Modulus : System.Unsigned_Types.Unsigned;\n+      Right   : Natural) return System.Unsigned_Types.Unsigned;\n \n end System.Exp_Mod;"}, {"sha": "f1446faec0983cc73e963cd000e5ccdaac8449ae", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9daba516938491b64759703018edc71b928bfad/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9daba516938491b64759703018edc71b928bfad/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=e9daba516938491b64759703018edc71b928bfad", "patch": "@@ -10037,9 +10037,21 @@ package body Sem_Ch12 is\n       Opt.SPARK_Mode_Pragma    := Body_Info.SPARK_Mode_Pragma;\n \n       if No (Gen_Body_Id) then\n-         Load_Parent_Of_Generic\n-           (Inst_Node, Specification (Gen_Decl), Body_Optional);\n-         Gen_Body_Id := Corresponding_Body (Gen_Decl);\n+\n+         --  Do not look for parent of generic body if none is required.\n+         --  This may happen when the routine is called as part of the\n+         --  Pending_Instantiations processing, when nested instances\n+         --  may precede the one generated from the main unit.\n+\n+         if not Unit_Requires_Body (Defining_Entity (Gen_Decl))\n+           and then Body_Optional\n+         then\n+            return;\n+         else\n+            Load_Parent_Of_Generic\n+              (Inst_Node, Specification (Gen_Decl), Body_Optional);\n+            Gen_Body_Id := Corresponding_Body (Gen_Decl);\n+         end if;\n       end if;\n \n       --  Establish global variable for sloc adjustment and for error recovery"}, {"sha": "e8f68e5ab3007fc1755c0f6bfd5c0aabf0285626", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 38, "deletions": 31, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9daba516938491b64759703018edc71b928bfad/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9daba516938491b64759703018edc71b928bfad/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=e9daba516938491b64759703018edc71b928bfad", "patch": "@@ -257,6 +257,9 @@ package body Sem_Elab is\n    --  or instantiation node for which the check code is required. C is the\n    --  test whose failure triggers the raise.\n \n+   function Is_Call_Of_Generic_Formal (N : Node_Id) return Boolean;\n+   --  Returns True if node N is a call to a generic formal subprogram\n+\n    function Is_Finalization_Procedure (Id : Entity_Id) return Boolean;\n    --  Determine whether entity Id denotes a [Deep_]Finalize procedure\n \n@@ -312,9 +315,9 @@ package body Sem_Elab is\n    procedure Supply_Bodies (N : Node_Id);\n    --  Given a node, N, that is either a subprogram declaration or a package\n    --  declaration, this procedure supplies dummy bodies for the subprogram\n-   --  or for all subprograms in the package. If the given node is not one\n-   --  of these two possibilities, then Supply_Bodies does nothing. The\n-   --  dummy body contains a single Raise statement.\n+   --  or for all subprograms in the package. If the given node is not one of\n+   --  these two possibilities, then Supply_Bodies does nothing. The dummy body\n+   --  contains a single Raise statement.\n \n    procedure Supply_Bodies (L : List_Id);\n    --  Calls Supply_Bodies for all elements of the given list L\n@@ -541,39 +544,14 @@ package body Sem_Elab is\n       --  warnings on the scope are also suppressed. For the internal case,\n       --  we ignore this flag.\n \n-      function Is_Call_Of_Generic_Formal return Boolean;\n-      --  Returns True if node N is a call to a generic formal subprogram\n-\n-      -------------------------------\n-      -- Is_Call_Of_Generic_Formal --\n-      -------------------------------\n-\n-      function Is_Call_Of_Generic_Formal return Boolean is\n-      begin\n-         return Nkind_In (N, N_Function_Call, N_Procedure_Call_Statement)\n-\n-           --  Always return False if debug flag -gnatd.G is set\n-\n-           and then not Debug_Flag_Dot_GG\n-\n-           --  For now, we detect this by looking for the strange identifier\n-           --  node, whose Chars reflect the name of the generic formal, but\n-           --  the Chars of the Entity references the generic actual.\n-\n-           and then Nkind (Name (N)) = N_Identifier\n-           and then Chars (Name (N)) /= Chars (Entity (Name (N)));\n-      end Is_Call_Of_Generic_Formal;\n-\n-   --  Start of processing for Check_A_Call\n-\n    begin\n       --  If the call is known to be within a local Suppress Elaboration\n       --  pragma, nothing to check. This can happen in task bodies. But\n       --  we ignore this for a call to a generic formal.\n \n       if Nkind (N) in N_Subprogram_Call\n         and then No_Elaboration_Check (N)\n-        and then not Is_Call_Of_Generic_Formal\n+        and then not Is_Call_Of_Generic_Formal (N)\n       then\n          return;\n       end if;\n@@ -801,7 +779,7 @@ package body Sem_Elab is\n          if Unit_Caller /= No_Unit\n            and then Unit_Callee /= Unit_Caller\n            and then not Dynamic_Elaboration_Checks\n-           and then not Is_Call_Of_Generic_Formal\n+           and then not Is_Call_Of_Generic_Formal (N)\n          then\n             E_Scope := Spec_Entity (Cunit_Entity (Unit_Caller));\n \n@@ -1302,6 +1280,7 @@ package body Sem_Elab is\n          --  First case, we are in elaboration code\n \n          From_Elab_Code := not In_Subprogram_Or_Concurrent_Unit;\n+\n          if From_Elab_Code then\n \n             --  Complain if call that comes from source in preelaborated unit\n@@ -1482,7 +1461,15 @@ package body Sem_Elab is\n             Inter_Unit_Only => False,\n             In_Init_Proc    => In_Init_Proc);\n \n-      elsif Elaboration_Checks_Suppressed (Current_Scope) then\n+      --  Nothing to do if elaboration checks suppressed for this scope.\n+      --  However, an interesting exception, the fact that elaboration checks\n+      --  are suppressed within an instance (because we can trace the body when\n+      --  we process the template) does not extend to calls to generic formal\n+      --  subprograms.\n+\n+      elsif Elaboration_Checks_Suppressed (Current_Scope)\n+        and then not Is_Call_Of_Generic_Formal (N)\n+      then\n          null;\n \n       elsif From_Elab_Code then\n@@ -2594,6 +2581,26 @@ package body Sem_Elab is\n       In_Task_Activation := False;\n    end Check_Task_Activation;\n \n+   -------------------------------\n+   -- Is_Call_Of_Generic_Formal --\n+   -------------------------------\n+\n+   function Is_Call_Of_Generic_Formal (N : Node_Id) return Boolean is\n+   begin\n+      return Nkind_In (N, N_Function_Call, N_Procedure_Call_Statement)\n+\n+        --  Always return False if debug flag -gnatd.G is set\n+\n+        and then not Debug_Flag_Dot_GG\n+\n+      --  For now, we detect this by looking for the strange identifier\n+      --  node, whose Chars reflect the name of the generic formal, but\n+      --  the Chars of the Entity references the generic actual.\n+\n+        and then Nkind (Name (N)) = N_Identifier\n+        and then Chars (Name (N)) /= Chars (Entity (Name (N)));\n+   end Is_Call_Of_Generic_Formal;\n+\n    --------------------------------\n    -- Set_Elaboration_Constraint --\n    --------------------------------"}, {"sha": "07468c7ea73c3cbd1f786b8fe54b271a231c7f39", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 0, "deletions": 123, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9daba516938491b64759703018edc71b928bfad/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9daba516938491b64759703018edc71b928bfad/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=e9daba516938491b64759703018edc71b928bfad", "patch": "@@ -18185,44 +18185,6 @@ package body Sem_Prag is\n             end if;\n          end Preelaborate;\n \n-         ---------------------\n-         -- Preelaborate_05 --\n-         ---------------------\n-\n-         --  pragma Preelaborate_05 [(library_unit_NAME)];\n-\n-         --  This pragma is useable only in GNAT_Mode, where it is used like\n-         --  pragma Preelaborate but it is only effective in Ada 2005 mode\n-         --  (otherwise it is ignored). This is used to implement AI-362 which\n-         --  recategorizes some run-time packages in Ada 2005 mode.\n-\n-         when Pragma_Preelaborate_05 => Preelaborate_05 : declare\n-            Ent : Entity_Id;\n-\n-         begin\n-            GNAT_Pragma;\n-            Check_Valid_Library_Unit_Pragma;\n-\n-            if not GNAT_Mode then\n-               Error_Pragma (\"pragma% only available in GNAT mode\");\n-            end if;\n-\n-            if Nkind (N) = N_Null_Statement then\n-               return;\n-            end if;\n-\n-            --  This is one of the few cases where we need to test the value of\n-            --  Ada_Version_Explicit rather than Ada_Version (which is always\n-            --  set to Ada_2012 in a predefined unit), we need to know the\n-            --  explicit version set to know if this pragma is active.\n-\n-            if Ada_Version_Explicit >= Ada_2005 then\n-               Ent := Find_Lib_Unit_Name;\n-               Set_Is_Preelaborated (Ent);\n-               Set_Suppress_Elaboration_Warnings (Ent);\n-            end if;\n-         end Preelaborate_05;\n-\n          --------------\n          -- Priority --\n          --------------\n@@ -18834,88 +18796,6 @@ package body Sem_Prag is\n             Set_Suppress_Elaboration_Warnings (Ent);\n          end Pure;\n \n-         -------------\n-         -- Pure_05 --\n-         -------------\n-\n-         --  pragma Pure_05 [(library_unit_NAME)];\n-\n-         --  This pragma is useable only in GNAT_Mode, where it is used like\n-         --  pragma Pure but it is only effective in Ada 2005 mode (otherwise\n-         --  it is ignored). It may be used after a pragma Preelaborate, in\n-         --  which case it overrides the effect of the pragma Preelaborate.\n-         --  This is used to implement AI-362 which recategorizes some run-time\n-         --  packages in Ada 2005 mode.\n-\n-         when Pragma_Pure_05 => Pure_05 : declare\n-            Ent : Entity_Id;\n-\n-         begin\n-            GNAT_Pragma;\n-            Check_Valid_Library_Unit_Pragma;\n-\n-            if not GNAT_Mode then\n-               Error_Pragma (\"pragma% only available in GNAT mode\");\n-            end if;\n-\n-            if Nkind (N) = N_Null_Statement then\n-               return;\n-            end if;\n-\n-            --  This is one of the few cases where we need to test the value of\n-            --  Ada_Version_Explicit rather than Ada_Version (which is always\n-            --  set to Ada_2012 in a predefined unit), we need to know the\n-            --  explicit version set to know if this pragma is active.\n-\n-            if Ada_Version_Explicit >= Ada_2005 then\n-               Ent := Find_Lib_Unit_Name;\n-               Set_Is_Preelaborated (Ent, False);\n-               Set_Is_Pure (Ent);\n-               Set_Suppress_Elaboration_Warnings (Ent);\n-            end if;\n-         end Pure_05;\n-\n-         -------------\n-         -- Pure_12 --\n-         -------------\n-\n-         --  pragma Pure_12 [(library_unit_NAME)];\n-\n-         --  This pragma is useable only in GNAT_Mode, where it is used like\n-         --  pragma Pure but it is only effective in Ada 2012 mode (otherwise\n-         --  it is ignored). It may be used after a pragma Preelaborate, in\n-         --  which case it overrides the effect of the pragma Preelaborate.\n-         --  This is used to implement AI05-0212 which recategorizes some\n-         --  run-time packages in Ada 2012 mode.\n-\n-         when Pragma_Pure_12 => Pure_12 : declare\n-            Ent : Entity_Id;\n-\n-         begin\n-            GNAT_Pragma;\n-            Check_Valid_Library_Unit_Pragma;\n-\n-            if not GNAT_Mode then\n-               Error_Pragma (\"pragma% only available in GNAT mode\");\n-            end if;\n-\n-            if Nkind (N) = N_Null_Statement then\n-               return;\n-            end if;\n-\n-            --  This is one of the few cases where we need to test the value of\n-            --  Ada_Version_Explicit rather than Ada_Version (which is always\n-            --  set to Ada_2012 in a predefined unit), we need to know the\n-            --  explicit version set to know if this pragma is active.\n-\n-            if Ada_Version_Explicit >= Ada_2012 then\n-               Ent := Find_Lib_Unit_Name;\n-               Set_Is_Preelaborated (Ent, False);\n-               Set_Is_Pure (Ent);\n-               Set_Suppress_Elaboration_Warnings (Ent);\n-            end if;\n-         end Pure_12;\n-\n          -------------------\n          -- Pure_Function --\n          -------------------\n@@ -25917,7 +25797,6 @@ package body Sem_Prag is\n       Pragma_Predicate                      => -1,\n       Pragma_Preelaborable_Initialization   => -1,\n       Pragma_Preelaborate                   => -1,\n-      Pragma_Preelaborate_05                => -1,\n       Pragma_Pre_Class                      => -1,\n       Pragma_Priority                       => -1,\n       Pragma_Priority_Specific_Dispatching  => -1,\n@@ -25927,8 +25806,6 @@ package body Sem_Prag is\n       Pragma_Provide_Shift_Operators        => -1,\n       Pragma_Psect_Object                   => -1,\n       Pragma_Pure                           => -1,\n-      Pragma_Pure_05                        => -1,\n-      Pragma_Pure_12                        => -1,\n       Pragma_Pure_Function                  => -1,\n       Pragma_Queuing_Policy                 => -1,\n       Pragma_Rational                       => -1,"}, {"sha": "40202f2a3a0771d67bf55a97f62fecc77de4338d", "filename": "gcc/ada/snames.ads-tmpl", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9daba516938491b64759703018edc71b928bfad/gcc%2Fada%2Fsnames.ads-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9daba516938491b64759703018edc71b928bfad/gcc%2Fada%2Fsnames.ads-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads-tmpl?ref=e9daba516938491b64759703018edc71b928bfad", "patch": "@@ -578,7 +578,6 @@ package Snames is\n    Name_Predicate                      : constant Name_Id := N + $; -- GNAT\n    Name_Preelaborable_Initialization   : constant Name_Id := N + $; -- Ada 05\n    Name_Preelaborate                   : constant Name_Id := N + $;\n-   Name_Preelaborate_05                : constant Name_Id := N + $; -- GNAT\n    Name_Pre_Class                      : constant Name_Id := N + $; -- GNAT\n \n    --  Note: Priority is not in this list because its name matches the name of\n@@ -590,8 +589,6 @@ package Snames is\n    Name_Provide_Shift_Operators        : constant Name_Id := N + $; -- GNAT\n    Name_Psect_Object                   : constant Name_Id := N + $; -- VMS\n    Name_Pure                           : constant Name_Id := N + $;\n-   Name_Pure_05                        : constant Name_Id := N + $; -- GNAT\n-   Name_Pure_12                        : constant Name_Id := N + $; -- GNAT\n    Name_Pure_Function                  : constant Name_Id := N + $; -- GNAT\n    Name_Refined_Depends                : constant Name_Id := N + $; -- GNAT\n    Name_Refined_Global                 : constant Name_Id := N + $; -- GNAT\n@@ -1893,13 +1890,10 @@ package Snames is\n       Pragma_Predicate,\n       Pragma_Preelaborable_Initialization,\n       Pragma_Preelaborate,\n-      Pragma_Preelaborate_05,\n       Pragma_Pre_Class,\n       Pragma_Provide_Shift_Operators,\n       Pragma_Psect_Object,\n       Pragma_Pure,\n-      Pragma_Pure_05,\n-      Pragma_Pure_12,\n       Pragma_Pure_Function,\n       Pragma_Refined_Depends,\n       Pragma_Refined_Global,"}, {"sha": "e2f7c2ec494e6669292865f938ae2a48cc836c19", "filename": "gcc/ada/switch-c.adb", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9daba516938491b64759703018edc71b928bfad/gcc%2Fada%2Fswitch-c.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9daba516938491b64759703018edc71b928bfad/gcc%2Fada%2Fswitch-c.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch-c.adb?ref=e9daba516938491b64759703018edc71b928bfad", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2001-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2001-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -815,11 +815,6 @@ package body Switch.C is\n                System_Extend_Unit := Empty;\n                Warning_Mode := Treat_As_Error;\n                Style_Check_Main := True;\n-\n-               --  Set Ada 2012 mode explicitly. We don't want to rely on the\n-               --  implicit setting here, since for example, we want\n-               --  Preelaborate_05 treated as Preelaborate\n-\n                Ada_Version          := Ada_2012;\n                Ada_Version_Explicit := Ada_2012;\n                Ada_Version_Pragma   := Empty;"}]}