{"sha": "00a49047b504b27a8dd19d819c7bc48d54078767", "node_id": "C_kwDOANBUbNoAKDAwYTQ5MDQ3YjUwNGIyN2E4ZGQxOWQ4MTljN2JjNDhkNTQwNzg3Njc", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-02-11T14:57:54Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-02-11T14:57:54Z"}, "message": "ipa-cp: Punt for too large offsets [PR108605]\n\nSeems most of IPA uses unsigned type for byte offsets\nipa-param-manipulation.h:  unsigned unit_offset;\nipa-param-manipulation.h:  unsigned unit_offset;\nipa-param-manipulation.h:  void register_replacement (tree base, unsigned unit_offset, tree replacement);\nipa-param-manipulation.h:  tree lookup_replacement (tree base, unsigned unit_offset);\nipa-param-manipulation.h:                                                   unsigned unit_offset);\nipa-prop.h:  unsigned unit_offset;\nipa-prop.h:  tree get_value (int index, unsigned unit_offset, bool by_ref) const;\nipa-prop.h:  tree get_value (int index, unsigned unit_offset) const;\nipa-prop.h:  const ipa_argagg_value *get_elt (int index, unsigned unit_offset) const;\nipa-cp.cc:ipa_argagg_value_list::get_elt (int index, unsigned unit_offset) const\nipa-cp.cc:  unsigned prev_unit_offset = 0;\nipa-cp.cc:ipa_argagg_value_list::get_value (int index, unsigned unit_offset) const\nipa-cp.cc:ipa_argagg_value_list::get_value (int index, unsigned unit_offset,\nipa-cp.cc:      unsigned other_offset = other.m_elts[i].unit_offset;\nipa-cp.cc:  unsigned prev_unit_offset = 0;\nipa-cp.cc:  unsigned prev_unit_offset = 0;\nipa-cp.cc:      unsigned this_offset = elts[i].unit_offset;\nipa-cp.cc:  unsigned prev_unit_offset = 0;\nipa-cp.cc:        unsigned unit_offset = aglat->offset / BITS_PER_UNIT;\nipa-cp.cc:  unsigned prev_unit_offset = 0;\nipa-param-manipulation.cc:  unsigned unit_offset;\nipa-param-manipulation.cc:isra_get_ref_base_and_offset (tree expr, tree *base_p, unsigned *unit_offset_p)\nipa-param-manipulation.cc:                                                unsigned unit_offset,\nipa-param-manipulation.cc:                                                unsigned unit_offset)\nipa-param-manipulation.cc:ipa_param_body_adjustments::lookup_replacement (tree base, unsigned unit_offset)\nipa-param-manipulation.cc:  unsigned unit_offset;\nipa-prop.cc:      unsigned unit_offset = bit_offset / BITS_PER_UNIT;\nipa-sra.cc:  unsigned unit_offset;\nipa-sra.cc:  unsigned unit_offset;\nipa-sra.cc:                          unsigned unit_offset, unsigned unit_size)\nipa-sra.cc:      unsigned offset = argacc->unit_offset + delta_offset;\nso before converting a HOST_WIDE_INT bit offset to unsigned byte offset\nwe need to punt for too large offsets.  Some places do that, e.g.\nisra_get_ref_base_and_offset has\n  if (offset < 0 || (offset / BITS_PER_UNIT) > UINT_MAX)\n    return false;\nbut ipa_agg_value_from_jfunc doesn't.\n\nThe following patch fixes that.\n\n2023-02-11  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR ipa/108605\n\t* ipa-cp.cc (ipa_agg_value_from_jfunc): Return NULL_TREE also if\n\titem->offset bit position is too large to be representable as\n\tunsigned int byte position.\n\n\t* c-c++-common/pr108605.c: New test.", "tree": {"sha": "5cdb32b02e61986b79e0f82adf513611cf09742d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5cdb32b02e61986b79e0f82adf513611cf09742d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00a49047b504b27a8dd19d819c7bc48d54078767", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00a49047b504b27a8dd19d819c7bc48d54078767", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00a49047b504b27a8dd19d819c7bc48d54078767", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00a49047b504b27a8dd19d819c7bc48d54078767/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1bf1c9771de8bb7039352510c758569063638fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1bf1c9771de8bb7039352510c758569063638fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1bf1c9771de8bb7039352510c758569063638fd"}], "stats": {"total": 28, "additions": 27, "deletions": 1}, "files": [{"sha": "4b8dedc0c518c084155bb7ad983ee1eca1a91917", "filename": "gcc/ipa-cp.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00a49047b504b27a8dd19d819c7bc48d54078767/gcc%2Fipa-cp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00a49047b504b27a8dd19d819c7bc48d54078767/gcc%2Fipa-cp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.cc?ref=00a49047b504b27a8dd19d819c7bc48d54078767", "patch": "@@ -1982,7 +1982,9 @@ ipa_agg_value_from_jfunc (ipa_node_params *info, cgraph_node *node,\n   tree value = NULL_TREE;\n   int src_idx;\n \n-  if (item->offset < 0 || item->jftype == IPA_JF_UNKNOWN)\n+  if (item->offset < 0\n+      || item->jftype == IPA_JF_UNKNOWN\n+      || item->offset >= (HOST_WIDE_INT) UINT_MAX * BITS_PER_UNIT)\n     return NULL_TREE;\n \n   if (item->jftype == IPA_JF_CONST)"}, {"sha": "418b37d70192e07eabbdb89ca84bf19b76271db5", "filename": "gcc/testsuite/c-c++-common/pr108605.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00a49047b504b27a8dd19d819c7bc48d54078767/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr108605.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00a49047b504b27a8dd19d819c7bc48d54078767/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr108605.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr108605.c?ref=00a49047b504b27a8dd19d819c7bc48d54078767", "patch": "@@ -0,0 +1,24 @@\n+/* PR ipa/108605 */\n+/* { dg-do compile { target { lp64 || llp64 } } } */\n+/* { dg-options \"-O2\" } */\n+\n+struct S {\n+  char a, b, c;\n+  int d[__INT_MAX__], e;\n+};\n+\n+void\n+foo (struct S *s)\n+{\n+  if (s->b && s->c != 0)\n+    __builtin_abort ();\n+}\n+\n+void\n+bar (void)\n+{\n+  struct S s[2];\n+  s[0].a = 0;\n+  s[0].e = 0;\n+  foo (s);\n+}"}]}