{"sha": "2755037e40aa3549b38f6d080108e26fb5cb677b", "node_id": "C_kwDOANBUbNoAKDI3NTUwMzdlNDBhYTM1NDliMzhmNmQwODAxMDhlMjZmYjVjYjY3N2I", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-01-24T10:40:52Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-01-24T11:07:02Z"}, "message": "acinclude.m4: Remove duplicite AC_DEFUN.\n\nlibatomic/ChangeLog:\n\n\t* acinclude.m4: Remove duplicate\n\tLIBAT_CHECK_LINKER_FEATURES.\n\t* configure: Regenerate.", "tree": {"sha": "21c8b28399a62a80c113a7b4ecfc964f0ff9f05c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/21c8b28399a62a80c113a7b4ecfc964f0ff9f05c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2755037e40aa3549b38f6d080108e26fb5cb677b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2755037e40aa3549b38f6d080108e26fb5cb677b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2755037e40aa3549b38f6d080108e26fb5cb677b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2755037e40aa3549b38f6d080108e26fb5cb677b/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ebb09f5e49c8ca06728bb791415d985df01f6d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ebb09f5e49c8ca06728bb791415d985df01f6d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ebb09f5e49c8ca06728bb791415d985df01f6d8"}], "stats": {"total": 108, "additions": 3, "deletions": 105}, "files": [{"sha": "3703a4350038722d51cc632181d226d3342dcf5d", "filename": "libatomic/acinclude.m4", "status": "modified", "additions": 0, "deletions": 102, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2755037e40aa3549b38f6d080108e26fb5cb677b/libatomic%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2755037e40aa3549b38f6d080108e26fb5cb677b/libatomic%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2Facinclude.m4?ref=2755037e40aa3549b38f6d080108e26fb5cb677b", "patch": "@@ -389,108 +389,6 @@ AC_DEFUN([LIBAT_CHECK_LINKER_FEATURES], [\n ])\n \n \n-dnl\n-dnl If GNU ld is in use, check to see if tricky linker opts can be used.  If\n-dnl the native linker is in use, all variables will be defined to something\n-dnl safe (like an empty string).\n-dnl\n-dnl Defines:\n-dnl  SECTION_LDFLAGS='-Wl,--gc-sections' if possible\n-dnl  OPT_LDFLAGS='-Wl,-O1' if possible\n-dnl  LD (as a side effect of testing)\n-dnl Sets:\n-dnl  with_gnu_ld\n-dnl  libat_ld_is_gold (possibly)\n-dnl  libat_gnu_ld_version (possibly)\n-dnl\n-dnl The last will be a single integer, e.g., version 1.23.45.0.67.89 will\n-dnl set libat_gnu_ld_version to 12345.  Zeros cause problems.\n-dnl\n-AC_DEFUN([LIBAT_CHECK_LINKER_FEATURES], [\n-  # If we're not using GNU ld, then there's no point in even trying these\n-  # tests.  Check for that first.  We should have already tested for gld\n-  # by now (in libtool), but require it now just to be safe...\n-  test -z \"$SECTION_LDFLAGS\" && SECTION_LDFLAGS=''\n-  test -z \"$OPT_LDFLAGS\" && OPT_LDFLAGS=''\n-  AC_REQUIRE([AC_PROG_LD])\n-  AC_REQUIRE([AC_PROG_AWK])\n-\n-  # The name set by libtool depends on the version of libtool.  Shame on us\n-  # for depending on an impl detail, but c'est la vie.  Older versions used\n-  # ac_cv_prog_gnu_ld, but now it's lt_cv_prog_gnu_ld, and is copied back on\n-  # top of with_gnu_ld (which is also set by --with-gnu-ld, so that actually\n-  # makes sense).  We'll test with_gnu_ld everywhere else, so if that isn't\n-  # set (hence we're using an older libtool), then set it.\n-  if test x${with_gnu_ld+set} != xset; then\n-    if test x${ac_cv_prog_gnu_ld+set} != xset; then\n-      # We got through \"ac_require(ac_prog_ld)\" and still not set?  Huh?\n-      with_gnu_ld=no\n-    else\n-      with_gnu_ld=$ac_cv_prog_gnu_ld\n-    fi\n-  fi\n-\n-  # Start by getting the version number.  I think the libtool test already\n-  # does some of this, but throws away the result.\n-  libat_ld_is_gold=no\n-  if $LD --version 2>/dev/null | grep 'GNU gold'> /dev/null 2>&1; then\n-    libat_ld_is_gold=yes\n-  fi\n-  changequote(,)\n-  ldver=`$LD --version 2>/dev/null |\n-         sed -e 's/[. ][0-9]\\{8\\}$//;s/.* \\([^ ]\\{1,\\}\\)$/\\1/; q'`\n-  changequote([,])\n-  libat_gnu_ld_version=`echo $ldver | \\\n-         $AWK -F. '{ if (NF<3) [$]3=0; print ([$]1*100+[$]2)*100+[$]3 }'`\n-\n-  # Set --gc-sections.\n-  if test \"$with_gnu_ld\" = \"notbroken\"; then\n-    # GNU ld it is!  Joy and bunny rabbits!\n-\n-    # All these tests are for C++; save the language and the compiler flags.\n-    # Need to do this so that g++ won't try to link in libstdc++\n-    ac_test_CFLAGS=\"${CFLAGS+set}\"\n-    ac_save_CFLAGS=\"$CFLAGS\"\n-    CFLAGS='-x c++  -Wl,--gc-sections'\n-\n-    # Check for -Wl,--gc-sections\n-    # XXX This test is broken at the moment, as symbols required for linking\n-    # are now in libsupc++ (not built yet).  In addition, this test has\n-    # cored on solaris in the past.  In addition, --gc-sections doesn't\n-    # really work at the moment (keeps on discarding used sections, first\n-    # .eh_frame and now some of the glibc sections for iconv).\n-    # Bzzzzt.  Thanks for playing, maybe next time.\n-    AC_MSG_CHECKING([for ld that supports -Wl,--gc-sections])\n-    AC_TRY_RUN([\n-     int main(void)\n-     {\n-       try { throw 1; }\n-       catch (...) { };\n-       return 0;\n-     }\n-    ], [ac_sectionLDflags=yes],[ac_sectionLDflags=no], [ac_sectionLDflags=yes])\n-    if test \"$ac_test_CFLAGS\" = set; then\n-      CFLAGS=\"$ac_save_CFLAGS\"\n-    else\n-      # this is the suspicious part\n-      CFLAGS=''\n-    fi\n-    if test \"$ac_sectionLDflags\" = \"yes\"; then\n-      SECTION_LDFLAGS=\"-Wl,--gc-sections $SECTION_LDFLAGS\"\n-    fi\n-    AC_MSG_RESULT($ac_sectionLDflags)\n-  fi\n-\n-  # Set linker optimization flags.\n-  if test x\"$with_gnu_ld\" = x\"yes\"; then\n-    OPT_LDFLAGS=\"-Wl,-O1 $OPT_LDFLAGS\"\n-  fi\n-\n-  AC_SUBST(SECTION_LDFLAGS)\n-  AC_SUBST(OPT_LDFLAGS)\n-])\n-\n-\n dnl\n dnl Add version tags to symbols in shared library (or not), additionally\n dnl marking other symbols as private/local (or not)."}, {"sha": "fb920c9a687c9092501a53f7f7fc6bf710a7c013", "filename": "libatomic/configure", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2755037e40aa3549b38f6d080108e26fb5cb677b/libatomic%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2755037e40aa3549b38f6d080108e26fb5cb677b/libatomic%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2Fconfigure?ref=2755037e40aa3549b38f6d080108e26fb5cb677b", "patch": "@@ -11380,7 +11380,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11393 \"configure\"\n+#line 11383 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11486,7 +11486,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11499 \"configure\"\n+#line 11489 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -15588,7 +15588,7 @@ case \"$host\" in\n     case \"$enable_cet\" in\n       auto)\n \t# Check if target supports multi-byte NOPs\n-\t# and if assembler supports CET insn.\n+\t# and if compiler and assembler support CET insn.\n \tcet_save_CFLAGS=\"$CFLAGS\"\n \tCFLAGS=\"$CFLAGS -fcf-protection\"\n \tcat confdefs.h - <<_ACEOF >conftest.$ac_ext"}]}