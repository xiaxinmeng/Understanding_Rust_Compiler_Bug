{"sha": "bb6131dbd15c8aca4e87f8197377b62331ecbe4a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmI2MTMxZGJkMTVjOGFjYTRlODdmODE5NzM3N2I2MjMzMWVjYmU0YQ==", "commit": {"author": {"name": "Jiong Wang", "email": "jiong.wang@arm.com", "date": "2016-07-25T16:15:34Z"}, "committer": {"name": "Jiong Wang", "email": "jiwang@gcc.gnu.org", "date": "2016-07-25T16:15:34Z"}, "message": "[AArch64][10/10] ARMv8.2-A FP16 lane scalar intrinsics\n\ngcc/\n\t* config/aarch64/arm_neon.h (vfmah_lane_f16, vfmah_laneq_f16,\n\tvfmsh_lane_f16, vfmsh_laneq_f16, vmulh_lane_f16, vmulh_laneq_f16,\n\tvmulxh_lane_f16, vmulxh_laneq_f16): New.\n\nFrom-SVN: r238725", "tree": {"sha": "2a6b74d2d10853fe40e5f8ffd54e73e747c7139d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a6b74d2d10853fe40e5f8ffd54e73e747c7139d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb6131dbd15c8aca4e87f8197377b62331ecbe4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb6131dbd15c8aca4e87f8197377b62331ecbe4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb6131dbd15c8aca4e87f8197377b62331ecbe4a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb6131dbd15c8aca4e87f8197377b62331ecbe4a/comments", "author": null, "committer": null, "parents": [{"sha": "9a594ad6ef76d46da25ef7820451fff7907d50bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a594ad6ef76d46da25ef7820451fff7907d50bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a594ad6ef76d46da25ef7820451fff7907d50bf"}], "stats": {"total": 58, "additions": 58, "deletions": 0}, "files": [{"sha": "303e4f5b9e39c0f87b2a0507bef31e0b22fe9842", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb6131dbd15c8aca4e87f8197377b62331ecbe4a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb6131dbd15c8aca4e87f8197377b62331ecbe4a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bb6131dbd15c8aca4e87f8197377b62331ecbe4a", "patch": "@@ -1,3 +1,9 @@\n+2016-07-25  Jiong Wang  <jiong.wang@arm.com>\n+\n+\t* config/aarch64/arm_neon.h (vfmah_lane_f16, vfmah_laneq_f16,\n+\tvfmsh_lane_f16, vfmsh_laneq_f16, vmulh_lane_f16, vmulh_laneq_f16,\n+\tvmulxh_lane_f16, vmulxh_laneq_f16): New.\n+\n 2016-07-25  Jiong Wang  <jiong.wang@arm.com>\n \n \t* config/aarch64/aarch64-simd-builtins.def: Register new builtins."}, {"sha": "ab3a00c9ec712d5d9ab98ba624b6942883eadd79", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb6131dbd15c8aca4e87f8197377b62331ecbe4a/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb6131dbd15c8aca4e87f8197377b62331ecbe4a/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=bb6131dbd15c8aca4e87f8197377b62331ecbe4a", "patch": "@@ -26777,6 +26777,20 @@ vfmsq_f16 (float16x8_t __a, float16x8_t __b, float16x8_t __c)\n \n /* ARMv8.2-A FP16 lane vector intrinsics.  */\n \n+__extension__ static __inline float16_t __attribute__ ((__always_inline__))\n+vfmah_lane_f16 (float16_t __a, float16_t __b,\n+\t\tfloat16x4_t __c, const int __lane)\n+{\n+  return vfmah_f16 (__a, __b, __aarch64_vget_lane_any (__c, __lane));\n+}\n+\n+__extension__ static __inline float16_t __attribute__ ((__always_inline__))\n+vfmah_laneq_f16 (float16_t __a, float16_t __b,\n+\t\t float16x8_t __c, const int __lane)\n+{\n+  return vfmah_f16 (__a, __b, __aarch64_vget_lane_any (__c, __lane));\n+}\n+\n __extension__ static __inline float16x4_t __attribute__ ((__always_inline__))\n vfma_lane_f16 (float16x4_t __a, float16x4_t __b,\n \t       float16x4_t __c, const int __lane)\n@@ -26817,6 +26831,20 @@ vfmaq_n_f16 (float16x8_t __a, float16x8_t __b, float16_t __c)\n   return vfmaq_f16 (__a, __b, vdupq_n_f16 (__c));\n }\n \n+__extension__ static __inline float16_t __attribute__ ((__always_inline__))\n+vfmsh_lane_f16 (float16_t __a, float16_t __b,\n+\t\tfloat16x4_t __c, const int __lane)\n+{\n+  return vfmsh_f16 (__a, __b, __aarch64_vget_lane_any (__c, __lane));\n+}\n+\n+__extension__ static __inline float16_t __attribute__ ((__always_inline__))\n+vfmsh_laneq_f16 (float16_t __a, float16_t __b,\n+\t\t float16x8_t __c, const int __lane)\n+{\n+  return vfmsh_f16 (__a, __b, __aarch64_vget_lane_any (__c, __lane));\n+}\n+\n __extension__ static __inline float16x4_t __attribute__ ((__always_inline__))\n vfms_lane_f16 (float16x4_t __a, float16x4_t __b,\n \t       float16x4_t __c, const int __lane)\n@@ -26857,6 +26885,12 @@ vfmsq_n_f16 (float16x8_t __a, float16x8_t __b, float16_t __c)\n   return vfmsq_f16 (__a, __b, vdupq_n_f16 (__c));\n }\n \n+__extension__ static __inline float16_t __attribute__ ((__always_inline__))\n+vmulh_lane_f16 (float16_t __a, float16x4_t __b, const int __lane)\n+{\n+  return __a * __aarch64_vget_lane_any (__b, __lane);\n+}\n+\n __extension__ static __inline float16x4_t __attribute__ ((__always_inline__))\n vmul_lane_f16 (float16x4_t __a, float16x4_t __b, const int __lane)\n {\n@@ -26869,6 +26903,12 @@ vmulq_lane_f16 (float16x8_t __a, float16x4_t __b, const int __lane)\n   return vmulq_f16 (__a, vdupq_n_f16 (__aarch64_vget_lane_any (__b, __lane)));\n }\n \n+__extension__ static __inline float16_t __attribute__ ((__always_inline__))\n+vmulh_laneq_f16 (float16_t __a, float16x8_t __b, const int __lane)\n+{\n+  return __a * __aarch64_vget_lane_any (__b, __lane);\n+}\n+\n __extension__ static __inline float16x4_t __attribute__ ((__always_inline__))\n vmul_laneq_f16 (float16x4_t __a, float16x8_t __b, const int __lane)\n {\n@@ -26893,6 +26933,12 @@ vmulq_n_f16 (float16x8_t __a, float16_t __b)\n   return vmulq_laneq_f16 (__a, vdupq_n_f16 (__b), 0);\n }\n \n+__extension__ static __inline float16_t __attribute__ ((__always_inline__))\n+vmulxh_lane_f16 (float16_t __a, float16x4_t __b, const int __lane)\n+{\n+  return vmulxh_f16 (__a, __aarch64_vget_lane_any (__b, __lane));\n+}\n+\n __extension__ static __inline float16x4_t __attribute__ ((__always_inline__))\n vmulx_lane_f16 (float16x4_t __a, float16x4_t __b, const int __lane)\n {\n@@ -26905,6 +26951,12 @@ vmulxq_lane_f16 (float16x8_t __a, float16x4_t __b, const int __lane)\n   return vmulxq_f16 (__a, __aarch64_vdupq_lane_f16 (__b, __lane));\n }\n \n+__extension__ static __inline float16_t __attribute__ ((__always_inline__))\n+vmulxh_laneq_f16 (float16_t __a, float16x8_t __b, const int __lane)\n+{\n+  return vmulxh_f16 (__a, __aarch64_vget_lane_any (__b, __lane));\n+}\n+\n __extension__ static __inline float16x4_t __attribute__ ((__always_inline__))\n vmulx_laneq_f16 (float16x4_t __a, float16x8_t __b, const int __lane)\n {"}]}