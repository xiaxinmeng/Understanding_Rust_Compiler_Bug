{"sha": "417ac4e6c704d8a7477e4c04dc7887314fd593d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDE3YWM0ZTZjNzA0ZDhhNzQ3N2U0YzA0ZGM3ODg3MzE0ZmQ1OTNkNA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2005-04-15T01:29:44Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-04-15T01:29:44Z"}, "message": "re PR tree-optimization/21021 (ICE in tree-vrp building glibc)\n\ngcc/\n\tPR tree-optimization/21021\n\t* tree-vrp.c (compare_values): Work around a bug in the front\n\tend that produces a comparison of mismatched types.\n\ntestsuite/\n\tPR tree-optimization/21021\n\t* gcc.c-torture/compile/pr21021.c: New.\n\nFrom-SVN: r98161", "tree": {"sha": "105fac8a18c342aa79c155e087c4d213b2c5e7dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/105fac8a18c342aa79c155e087c4d213b2c5e7dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/417ac4e6c704d8a7477e4c04dc7887314fd593d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/417ac4e6c704d8a7477e4c04dc7887314fd593d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/417ac4e6c704d8a7477e4c04dc7887314fd593d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/417ac4e6c704d8a7477e4c04dc7887314fd593d4/comments", "author": null, "committer": null, "parents": [{"sha": "6f4dfa2bdfb9db6f3cbcb99aaa73402f81771abe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f4dfa2bdfb9db6f3cbcb99aaa73402f81771abe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f4dfa2bdfb9db6f3cbcb99aaa73402f81771abe"}], "stats": {"total": 46, "additions": 44, "deletions": 2}, "files": [{"sha": "df59529802112a018ff22e78aa07c541249edfbd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/417ac4e6c704d8a7477e4c04dc7887314fd593d4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/417ac4e6c704d8a7477e4c04dc7887314fd593d4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=417ac4e6c704d8a7477e4c04dc7887314fd593d4", "patch": "@@ -1,3 +1,9 @@\n+2005-04-14  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\tPR tree-optimization/21021\n+\t* tree-vrp.c (compare_values): Work around a bug in the front\n+\tend that produces a comparison of mismatched types.\n+\n 2004-04-14  Richard Henderson  <rth@redhat.com>\n \n \t* config/ia64/ia64.h (enum fetchop_code): Remove."}, {"sha": "eed557ebda182297727e41ea92456597a07092e8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/417ac4e6c704d8a7477e4c04dc7887314fd593d4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/417ac4e6c704d8a7477e4c04dc7887314fd593d4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=417ac4e6c704d8a7477e4c04dc7887314fd593d4", "patch": "@@ -1,3 +1,8 @@\n+2005-04-14  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\tPR tree-optimization/21021\n+\t* gcc.c-torture/compile/pr21021.c: New.\n+\n 2005-04-14  Janis Johnson  <janis187@us.ibm.com\n \n \tPR testsuite/21010"}, {"sha": "b748216307adc15be7edd520fac89609b02b8e78", "filename": "gcc/testsuite/gcc.c-torture/compile/pr21021.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/417ac4e6c704d8a7477e4c04dc7887314fd593d4/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr21021.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/417ac4e6c704d8a7477e4c04dc7887314fd593d4/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr21021.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr21021.c?ref=417ac4e6c704d8a7477e4c04dc7887314fd593d4", "patch": "@@ -0,0 +1,19 @@\n+/* PR tree-optimization/21021\n+\n+   The front end produces a comparison of mismatched types, namely an\n+   integer and a pointer, causing VRP to compute TYPE_MAX_VALUE for a\n+   pointer, which we cannot.  */\n+\n+extern void *bar (void);\n+\n+int\n+foo (unsigned int *p, unsigned int *q)\n+{\n+  const void *r = bar ();\n+\n+  if (r >= (const void *) *p\n+      && r < (const void *) *q)\n+    return 1;\n+\n+  return 0;\n+}"}, {"sha": "41cf6e1806b226b86430aad2bf6f73048a86d2ec", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/417ac4e6c704d8a7477e4c04dc7887314fd593d4/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/417ac4e6c704d8a7477e4c04dc7887314fd593d4/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=417ac4e6c704d8a7477e4c04dc7887314fd593d4", "patch": "@@ -287,7 +287,13 @@ compare_values (tree val1, tree val2)\n     return 0;\n \n   /* Do some limited symbolic comparisons.  */\n-  if (!POINTER_TYPE_P (TREE_TYPE (val1)))\n+  /* FIXME: The second check of POINTER_TYPE_P should not be necessary\n+     because we should be comparing values of the same type here, but\n+     for whatever reason, the front end throws us a type mismatched\n+     comparison.  For now, work around the problem by checking both\n+     types.  See PR 21021 and PR 21024.  */\n+  if (!POINTER_TYPE_P (TREE_TYPE (val1))\n+      && !POINTER_TYPE_P (TREE_TYPE (val2)))\n     {\n       /* We can determine some comparisons against +INF and -INF even\n \t if the other value is an expression.  */\n@@ -400,7 +406,13 @@ compare_values (tree val1, tree val2)\n   if (!is_gimple_min_invariant (val1) || !is_gimple_min_invariant (val2))\n     return -2;\n \n-  if (!POINTER_TYPE_P (TREE_TYPE (val1)))\n+  /* FIXME: The second check of POINTER_TYPE_P should not be necessary\n+     because we should be comparing values of the same type here, but\n+     for whatever reason, the front end throws us a type mismatched\n+     comparison.  For now, work around the problem by checking both\n+     types.  See PR 21021 and PR 21024.  */\n+  if (!POINTER_TYPE_P (TREE_TYPE (val1))\n+      && !POINTER_TYPE_P (TREE_TYPE (val2)))\n     return tree_int_cst_compare (val1, val2);\n   else\n     {"}]}