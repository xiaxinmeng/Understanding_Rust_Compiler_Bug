{"sha": "808d6eaa019dd81d95656e2e05bdf34e17c63484", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODA4ZDZlYWEwMTlkZDgxZDk1NjU2ZTJlMDViZGYzNGUxN2M2MzQ4NA==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2007-09-25T15:04:58Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2007-09-25T15:04:58Z"}, "message": "re PR c/32295 (An invalid c code causes an ICE in create_tmp_var, at gimplify.c:489)\n\n\tPR c/32295\n\t* c-typeck.c (default_conversion): Call require_complete_type\n\tbefore perform_integral_promotions.\n\t(build_unary_op): Call require_complete_type except for ADDR_EXPR.\n\t(build_c_cast): Call require_complete_type except for casts to\n\tvoid types.\n\t(convert_for_assignment): Call require_complete_type.\n\ntestsuite:\n\t* gcc.dg/enum-incomplete-1.c: New test.\n\nFrom-SVN: r128765", "tree": {"sha": "947c56917c496f2901fcbbdbefb24cd69ce13569", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/947c56917c496f2901fcbbdbefb24cd69ce13569"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/808d6eaa019dd81d95656e2e05bdf34e17c63484", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/808d6eaa019dd81d95656e2e05bdf34e17c63484", "html_url": "https://github.com/Rust-GCC/gccrs/commit/808d6eaa019dd81d95656e2e05bdf34e17c63484", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/808d6eaa019dd81d95656e2e05bdf34e17c63484/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea6e01682b96722026e0bef67318de425db24131", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea6e01682b96722026e0bef67318de425db24131", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea6e01682b96722026e0bef67318de425db24131"}], "stats": {"total": 128, "additions": 124, "deletions": 4}, "files": [{"sha": "b01a75ae917a71a3929912f804c19d50e584c7e2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/808d6eaa019dd81d95656e2e05bdf34e17c63484/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/808d6eaa019dd81d95656e2e05bdf34e17c63484/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=808d6eaa019dd81d95656e2e05bdf34e17c63484", "patch": "@@ -1,3 +1,13 @@\n+2007-09-25  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR c/32295\n+\t* c-typeck.c (default_conversion): Call require_complete_type\n+\tbefore perform_integral_promotions.\n+\t(build_unary_op): Call require_complete_type except for ADDR_EXPR.\n+\t(build_c_cast): Call require_complete_type except for casts to\n+\tvoid types.\n+\t(convert_for_assignment): Call require_complete_type.\n+\n 2007-09-25  Revital Eres  <eres@il.ibm.com>\n \n \t* config/spu/spu.md: Fix doloop pattern."}, {"sha": "0bad8e5a45c751cbb488050a31460d7bf375527d", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/808d6eaa019dd81d95656e2e05bdf34e17c63484/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/808d6eaa019dd81d95656e2e05bdf34e17c63484/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=808d6eaa019dd81d95656e2e05bdf34e17c63484", "patch": "@@ -1770,14 +1770,19 @@ default_conversion (tree exp)\n   if (TREE_NO_WARNING (orig_exp))\n     TREE_NO_WARNING (exp) = 1;\n \n-  if (INTEGRAL_TYPE_P (type))\n-    return perform_integral_promotions (exp);\n-\n   if (code == VOID_TYPE)\n     {\n       error (\"void value not ignored as it ought to be\");\n       return error_mark_node;\n     }\n+\n+  exp = require_complete_type (exp);\n+  if (exp == error_mark_node)\n+    return error_mark_node;\n+\n+  if (INTEGRAL_TYPE_P (type))\n+    return perform_integral_promotions (exp);\n+\n   return exp;\n }\n \f\n@@ -2871,11 +2876,15 @@ build_unary_op (enum tree_code code, tree xarg, int flag)\n   /* No default_conversion here.  It causes trouble for ADDR_EXPR.  */\n   tree arg = xarg;\n   tree argtype = 0;\n-  enum tree_code typecode = TREE_CODE (TREE_TYPE (arg));\n+  enum tree_code typecode;\n   tree val;\n   int noconvert = flag;\n   const char *invalid_op_diag;\n \n+  if (code != ADDR_EXPR)\n+    arg = require_complete_type (arg);\n+\n+  typecode = TREE_CODE (TREE_TYPE (arg));\n   if (typecode == ERROR_MARK)\n     return error_mark_node;\n   if (typecode == ENUMERAL_TYPE || typecode == BOOLEAN_TYPE)\n@@ -3589,6 +3598,13 @@ build_c_cast (tree type, tree expr)\n       return error_mark_node;\n     }\n \n+  if (!VOID_TYPE_P (type))\n+    {\n+      value = require_complete_type (value);\n+      if (value == error_mark_node)\n+\treturn error_mark_node;\n+    }\n+\n   if (type == TYPE_MAIN_VARIANT (TREE_TYPE (value)))\n     {\n       if (pedantic)\n@@ -3998,6 +4014,9 @@ convert_for_assignment (tree type, tree rhs, enum impl_conv errtype,\n       error (\"void value not ignored as it ought to be\");\n       return error_mark_node;\n     }\n+  rhs = require_complete_type (rhs);\n+  if (rhs == error_mark_node)\n+    return error_mark_node;\n   /* A type converts to a reference to it.\n      This code doesn't fully support references, it's just for the\n      special case of va_start and va_copy.  */"}, {"sha": "4f8d576c4d11d39be264a1b1c43245f3d5ab3427", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/808d6eaa019dd81d95656e2e05bdf34e17c63484/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/808d6eaa019dd81d95656e2e05bdf34e17c63484/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=808d6eaa019dd81d95656e2e05bdf34e17c63484", "patch": "@@ -1,3 +1,8 @@\n+2007-09-25  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR c/32295\n+\t* gcc.dg/enum-incomplete-1.c: New test.\n+\n 2007-09-25  Bernd Schmidt  <bernd.schmidt@analog.com>\n \n \t* gcc.c-torture/compile/20070919-1.c: New test."}, {"sha": "06c247c2e5120e5c96e3a8bf7d6399d8edd0fabd", "filename": "gcc/testsuite/gcc.dg/enum-incomplete-1.c", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/808d6eaa019dd81d95656e2e05bdf34e17c63484/gcc%2Ftestsuite%2Fgcc.dg%2Fenum-incomplete-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/808d6eaa019dd81d95656e2e05bdf34e17c63484/gcc%2Ftestsuite%2Fgcc.dg%2Fenum-incomplete-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fenum-incomplete-1.c?ref=808d6eaa019dd81d95656e2e05bdf34e17c63484", "patch": "@@ -0,0 +1,86 @@\n+/* Test for uses of incomplete enum variables: should be allowed just\n+   when incomplete structs are allowed.  PR 32295.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+extern enum e ve;\n+extern struct s vs;\n+void *p;\n+\n+int\n+f0 (int i)\n+{\n+  ve; /* { dg-error \"incomplete\" } */\n+  vs; /* { dg-error \"incomplete\" } */\n+  (void) ve;\n+  (void) vs;\n+  (void) (i ? ve : ve); /* { dg-error \"incomplete\" } */\n+  (void) (i ? vs : vs); /* { dg-error \"incomplete\" } */\n+  (void) (ve = ve); /* { dg-error \"incomplete\" } */\n+  (void) (vs = vs); /* { dg-error \"incomplete\" } */\n+  (void) ve, (void) ve;\n+  (void) vs, (void) vs;\n+  p = &ve;\n+  p = &vs;\n+  (void) sizeof (ve); /* { dg-error \"incomplete\" } */\n+  (void) sizeof (vs); /* { dg-error \"incomplete\" } */\n+  typeof (ve) *pe;\n+  typeof (vs) *ps;\n+  /* ??? alignof should probably not be accepted here.  */\n+  (void) __alignof (ve);\n+  (void) __alignof (vs);\n+  (void) (ve + i); /* { dg-error \"incomplete\" } */\n+  (void) (i * ve); /* { dg-error \"incomplete\" } */\n+  (void) (i / ve); /* { dg-error \"incomplete\" } */\n+  (void) (ve - i); /* { dg-error \"incomplete\" } */\n+  (void) (ve << i); /* { dg-error \"incomplete\" } */\n+  (void) (i >> ve); /* { dg-error \"incomplete\" } */\n+  (void) (ve < i); /* { dg-error \"incomplete\" } */\n+  (void) (ve <= i); /* { dg-error \"incomplete\" } */\n+  (void) (i > ve); /* { dg-error \"incomplete\" } */\n+  (void) (i >= ve); /* { dg-error \"incomplete\" } */\n+  (void) (ve == i); /* { dg-error \"incomplete\" } */\n+  (void) (i != ve); /* { dg-error \"incomplete\" } */\n+  (void) (ve & i); /* { dg-error \"incomplete\" } */\n+  (void) (ve ^ i); /* { dg-error \"incomplete\" } */\n+  (void) (i | ve); /* { dg-error \"incomplete\" } */\n+  (void) (i && ve); /* { dg-error \"incomplete\" } */\n+  (void) (ve || i); /* { dg-error \"incomplete\" } */\n+  (void) -ve; /* { dg-error \"incomplete\" } */\n+  (void) +ve; /* { dg-error \"incomplete\" } */\n+  (void) ~ve; /* { dg-error \"incomplete\" } */\n+  (void) !ve; /* { dg-error \"incomplete\" } */\n+  (void) --ve; /* { dg-error \"incomplete\" } */\n+  (void) ++ve; /* { dg-error \"incomplete\" } */\n+  (void) ve--; /* { dg-error \"incomplete\" } */\n+  (void) ve++; /* { dg-error \"incomplete\" } */\n+  i = ve; /* { dg-error \"incomplete\" } */\n+  i *= ve; /* { dg-error \"incomplete\" } */\n+  i /= ve; /* { dg-error \"incomplete\" } */\n+  i %= ve; /* { dg-error \"incomplete\" } */\n+  i += ve; /* { dg-error \"incomplete\" } */\n+  i -= ve; /* { dg-error \"incomplete\" } */\n+  i <<= ve; /* { dg-error \"incomplete\" } */\n+  i >>= ve; /* { dg-error \"incomplete\" } */\n+  i &= ve; /* { dg-error \"incomplete\" } */\n+  i ^= ve; /* { dg-error \"incomplete\" } */\n+  i |= ve; /* { dg-error \"incomplete\" } */\n+  (void) (ve ? 1 : 1); /* { dg-error \"incomplete\" } */\n+  (void) (int) ve; /* { dg-error \"incomplete\" } */\n+  f0 (ve); /* { dg-error \"incomplete\" } */\n+  if (ve) /* { dg-error \"incomplete\" } */\n+    ;\n+  do\n+    ;\n+  while (ve); /* { dg-error \"incomplete\" } */\n+  while (ve) /* { dg-error \"incomplete\" } */\n+    ;\n+  _Bool b = ve; /* { dg-error \"incomplete\" } */\n+  float f = ve; /* { dg-error \"incomplete\" } */\n+  switch (ve) /* { dg-error \"incomplete\" } */\n+    ;\n+  for (; ve;) /* { dg-error \"incomplete\" } */\n+    ;\n+  return ve; /* { dg-error \"incomplete\" } */\n+}"}]}