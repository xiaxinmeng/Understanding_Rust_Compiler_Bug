{"sha": "a8654147f153786a4339127228ac05ed550d0a2b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTg2NTQxNDdmMTUzNzg2YTQzMzkxMjcyMjhhYzA1ZWQ1NTBkMGEyYg==", "commit": {"author": {"name": "Hongtao Liu", "email": "hongtao.liu@intel.com", "date": "2019-12-11T08:06:06Z"}, "committer": {"name": "Hongtao Liu", "email": "liuhongt@gcc.gnu.org", "date": "2019-12-11T08:06:06Z"}, "message": "Fix unrecognizable insn of pr92865.\n\ngcc/\n    PR target/92865\n    * config/i386/i386-expand.c (ix86_valid_mask_cmp_mode): Enable\n    integer mask cmov when available even with TARGET_XOP.\n\ngcc/testsuite\n    * gcc.target/i386/pr92865-1.c: New test.\n\nFrom-SVN: r279214", "tree": {"sha": "dd62ae76ea28d42f261cac0821e6f2ac8f1a02a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dd62ae76ea28d42f261cac0821e6f2ac8f1a02a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a8654147f153786a4339127228ac05ed550d0a2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8654147f153786a4339127228ac05ed550d0a2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8654147f153786a4339127228ac05ed550d0a2b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8654147f153786a4339127228ac05ed550d0a2b/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2aae713bb4275512b40837d0ce81d894a5bd9368", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2aae713bb4275512b40837d0ce81d894a5bd9368", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2aae713bb4275512b40837d0ce81d894a5bd9368"}], "stats": {"total": 79, "additions": 78, "deletions": 1}, "files": [{"sha": "6ea6db926e9083a49b84076fb8d553cb89abbe74", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8654147f153786a4339127228ac05ed550d0a2b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8654147f153786a4339127228ac05ed550d0a2b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a8654147f153786a4339127228ac05ed550d0a2b", "patch": "@@ -1,3 +1,9 @@\n+2019-12-11  Hongtao Liu  <hongtao.liu@intel.com>\n+\n+\tPR target/92865\n+\t* config/i386/i386-expand.c (ix86_valid_mask_cmp_mode): Enable\n+\tinteger mask cmov when available even with TARGET_XOP.\n+\n 2019-12-10  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/92891"}, {"sha": "cbf4eb7b487fa3a072163f7367007fe0b78f3b89", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8654147f153786a4339127228ac05ed550d0a2b/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8654147f153786a4339127228ac05ed550d0a2b/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=a8654147f153786a4339127228ac05ed550d0a2b", "patch": "@@ -3428,7 +3428,7 @@ static bool\n ix86_valid_mask_cmp_mode (machine_mode mode)\n {\n   /* XOP has its own vector conditional movement.  */\n-  if (TARGET_XOP)\n+  if (TARGET_XOP && !TARGET_AVX512F)\n     return false;\n \n   /* AVX512F is needed for mask operation.  */"}, {"sha": "92eea2da375297e43d79cc0e559fc587f9c4a69d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8654147f153786a4339127228ac05ed550d0a2b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8654147f153786a4339127228ac05ed550d0a2b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a8654147f153786a4339127228ac05ed550d0a2b", "patch": "@@ -1,3 +1,7 @@\n+2019-12-11  Hongtao Liu  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/pr92865-1.c: New test.\n+\n 2019-12-10  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/92891"}, {"sha": "49b5778a067fb93db939876a75a1c7e81ea67e96", "filename": "gcc/testsuite/gcc.target/i386/pr92865-1.c", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8654147f153786a4339127228ac05ed550d0a2b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92865-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8654147f153786a4339127228ac05ed550d0a2b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92865-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92865-1.c?ref=a8654147f153786a4339127228ac05ed550d0a2b", "patch": "@@ -0,0 +1,67 @@\n+/* PR target/92865 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Ofast -mavx512f -mavx512bw -mxop\" } */\n+/* { dg-final { scan-assembler-times \"vpcmp\\[bwdq\\]\\[\\t ]\" 4 } } */\n+/* { dg-final { scan-assembler-times \"vpcmpu\\[bwdq\\]\\[\\t ]\" 4 } } */\n+/* { dg-final { scan-assembler-times \"vmovdq\\[au\\]8\\[\\t ]\" 4 } } */\n+/* { dg-final { scan-assembler-times \"vmovdq\\[au\\]16\\[\\t ]\" 4 } } *\n+/* { dg-final { scan-assembler-times \"vmovdq\\[au\\]32\\[\\t ]\" 4 } } */\n+/* { dg-final { scan-assembler-times \"vmovdq\\[au\\]64\\[\\t ]\" 4 } } */\n+\n+extern char arraysb[64];\n+extern short arraysw[32];\n+extern int arraysd[16];\n+extern long long arraysq[8];\n+\n+extern unsigned char arrayub[64];\n+extern unsigned short arrayuw[32];\n+extern unsigned int arrayud[16];\n+extern unsigned long long arrayuq[8];\n+\n+int f1(char a)\n+{\n+  for (int i = 0; i < 64; i++)\n+    arraysb[i] = arraysb[i] >= a;\n+}\n+\n+int f2(short a)\n+{\n+  for (int i = 0; i < 32; i++)\n+    arraysw[i] = arraysw[i] >= a;\n+}\n+\n+int f3(int a)\n+{\n+  for (int i = 0; i < 16; i++)\n+    arraysd[i] = arraysd[i] >= a;\n+}\n+\n+int f4(long long a)\n+{\n+  for (int i = 0; i < 8; i++)\n+    arraysq[i] = arraysq[i] >= a;\n+}\n+\n+int f5(unsigned char a)\n+{\n+  for (int i = 0; i < 64; i++)\n+    arrayub[i] = arrayub[i] >= a;\n+}\n+\n+int f6(unsigned short a)\n+{\n+  for (int i = 0; i < 32; i++)\n+    arrayuw[i] = arrayuw[i] >= a;\n+}\n+\n+int f7(unsigned int a)\n+{\n+  for (int i = 0; i < 16; i++)\n+    arrayud[i] = arrayud[i] >= a;\n+}\n+\n+int f8(unsigned long long a)\n+{\n+  for (int i = 0; i < 8; i++)\n+    arrayuq[i] = arrayuq[i] >= a;\n+}"}]}