{"sha": "f38ce9361fbd9b01e21d4a2c938c3d4034d34bc1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjM4Y2U5MzYxZmJkOWIwMWUyMWQ0YTJjOTM4YzNkNDAzNGQzNGJjMQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2014-11-07T22:55:00Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2014-11-07T22:55:00Z"}, "message": "re PR tree-optimization/61515 (Extremely long compile time for generated code)\n\n\tPR tree-optimization/61515\n\t* tree-ssa-threadedge.c (invalidate_equivalences): Walk the unwinding stack\n\trather than looking at ever SSA_NAME's value.\n\nFrom-SVN: r217239", "tree": {"sha": "0bf3a9292069e8ab838749093ae007dd805f75b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0bf3a9292069e8ab838749093ae007dd805f75b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f38ce9361fbd9b01e21d4a2c938c3d4034d34bc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f38ce9361fbd9b01e21d4a2c938c3d4034d34bc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f38ce9361fbd9b01e21d4a2c938c3d4034d34bc1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f38ce9361fbd9b01e21d4a2c938c3d4034d34bc1/comments", "author": null, "committer": null, "parents": [{"sha": "382ad5ce1bb6ce92c276adc9a35c619c0a070aca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/382ad5ce1bb6ce92c276adc9a35c619c0a070aca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/382ad5ce1bb6ce92c276adc9a35c619c0a070aca"}], "stats": {"total": 39, "additions": 35, "deletions": 4}, "files": [{"sha": "0c8eb793752c19577d05c3cfd8ee448619a4027e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f38ce9361fbd9b01e21d4a2c938c3d4034d34bc1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f38ce9361fbd9b01e21d4a2c938c3d4034d34bc1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f38ce9361fbd9b01e21d4a2c938c3d4034d34bc1", "patch": "@@ -1,3 +1,9 @@\n+2014-11-07  Jeff Law  <law@redhat.com>\n+\n+\tPR tree-optimization/61515\n+\t* tree-ssa-threadedge.c (invalidate_equivalences): Walk the unwinding stack\n+\trather than looking at ever SSA_NAME's value.\n+\n 2014-11-07  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/63605"}, {"sha": "d5b9696aadb95090a13d441c236700c027531e22", "filename": "gcc/tree-ssa-threadedge.c", "status": "modified", "additions": 29, "deletions": 4, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f38ce9361fbd9b01e21d4a2c938c3d4034d34bc1/gcc%2Ftree-ssa-threadedge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f38ce9361fbd9b01e21d4a2c938c3d4034d34bc1/gcc%2Ftree-ssa-threadedge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadedge.c?ref=f38ce9361fbd9b01e21d4a2c938c3d4034d34bc1", "patch": "@@ -290,15 +290,40 @@ fold_assignment_stmt (gimple stmt)\n }\n \n /* A new value has been assigned to LHS.  If necessary, invalidate any\n-   equivalences that are no longer valid.  */\n+   equivalences that are no longer valid.   This includes invaliding\n+   LHS and any objects that are currently equivalent to LHS.\n+\n+   Finding the objects that are currently marked as equivalent to LHS\n+   is a bit tricky.  We could walk the ssa names and see if any have\n+   SSA_NAME_VALUE that is the same as LHS.  That's expensive.\n+\n+   However, it's far more efficient to look at the unwinding stack as\n+   that will have all context sensitive equivalences which are the only\n+   ones that we really have to worry about here.   */\n static void\n invalidate_equivalences (tree lhs, vec<tree> *stack)\n {\n \n-  for (unsigned int i = 1; i < num_ssa_names; i++)\n-    if (ssa_name (i) && SSA_NAME_VALUE (ssa_name (i)) == lhs)\n-      record_temporary_equivalence (ssa_name (i), NULL_TREE, stack);\n+  /* The stack is an unwinding stack.  If the current element is NULL\n+     then it's a \"stop unwinding\" marker.  Else the current marker is\n+     the SSA_NAME with an equivalence and the prior entry in the stack\n+     is what the current element is equivalent to.  */\n+  for (int i = stack->length() - 1; i >= 0; i--)\n+    {\n+      /* Ignore the stop unwinding markers.  */\n+      if ((*stack)[i] == NULL)\n+\tcontinue;\n+\n+      /* We want to check the current value of stack[i] to see if\n+\t it matches LHS.  If so, then invalidate.  */\n+      if (SSA_NAME_VALUE ((*stack)[i]) == lhs)\n+\trecord_temporary_equivalence ((*stack)[i], NULL_TREE, stack);\n+\n+      /* Remember, we're dealing with two elements in this case.  */\n+      i--;\n+    }\n \n+  /* And invalidate any known value for LHS itself.  */\n   if (SSA_NAME_VALUE (lhs))\n     record_temporary_equivalence (lhs, NULL_TREE, stack);\n }"}]}