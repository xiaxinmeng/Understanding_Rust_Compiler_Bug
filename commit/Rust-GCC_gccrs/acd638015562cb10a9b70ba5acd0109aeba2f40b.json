{"sha": "acd638015562cb10a9b70ba5acd0109aeba2f40b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWNkNjM4MDE1NTYyY2IxMGE5YjcwYmE1YWNkMDEwOWFlYmEyZjQwYg==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2010-04-19T17:58:54Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2010-04-19T17:58:54Z"}, "message": "gimple.h (create_tmp_reg): Declare.\n\n2010-04-19  Martin Jambor  <mjambor@suse.cz>\n\n\t* gimple.h (create_tmp_reg): Declare.\n\t* gimplify.c (create_tmp_reg): New function.\n\t(gimplify_return_expr): Use create_tmp_reg.\n\t(gimplify_omp_atomic): Likewise.\n\t(gimple_regimplify_operands): Likewise.\n\t* tree-dfa.c (make_rename_temp): Likewise.\n\t* tree-predcom.c (predcom_tmp_var): Likewise.\n\t(reassociate_to_the_same_stmt): Likewise.\n\t* tree-sra.c (replace_uses_with_default_def_ssa_name): Likewise.\n\t(get_replaced_param_substitute): Likewise.\n\t* tree-ssa-phiprop.c (phiprop_insert_phi): Likewise.\n\t* tree-ssa-phiopt.c (cond_store_replacement): Likewise.\n\t* tree-ssa-pre.c (get_representative_for): Likewise.\n\t(create_expression_by_pieces): Likewise.\n\t* tree-tailcall.c (adjust_return_value_with_ops): Likewise.\n\t(create_tailcall_accumulator): Likewise.\n\nFrom-SVN: r158523", "tree": {"sha": "a7cf57666657ce42c8a78e8d5215cec965e97085", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7cf57666657ce42c8a78e8d5215cec965e97085"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/acd638015562cb10a9b70ba5acd0109aeba2f40b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acd638015562cb10a9b70ba5acd0109aeba2f40b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acd638015562cb10a9b70ba5acd0109aeba2f40b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acd638015562cb10a9b70ba5acd0109aeba2f40b/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0b6e2868bd587540b38e2122876cbe32f1a2a35e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b6e2868bd587540b38e2122876cbe32f1a2a35e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b6e2868bd587540b38e2122876cbe32f1a2a35e"}], "stats": {"total": 111, "additions": 52, "deletions": 59}, "files": [{"sha": "b21d8c56509e916f0c786ad62cb8f56450d62b38", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acd638015562cb10a9b70ba5acd0109aeba2f40b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acd638015562cb10a9b70ba5acd0109aeba2f40b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=acd638015562cb10a9b70ba5acd0109aeba2f40b", "patch": "@@ -1,3 +1,22 @@\n+2010-04-19  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* gimple.h (create_tmp_reg): Declare.\n+\t* gimplify.c (create_tmp_reg): New function.\n+\t(gimplify_return_expr): Use create_tmp_reg.\n+\t(gimplify_omp_atomic): Likewise.\n+\t(gimple_regimplify_operands): Likewise.\n+\t* tree-dfa.c (make_rename_temp): Likewise.\n+\t* tree-predcom.c (predcom_tmp_var): Likewise.\n+\t(reassociate_to_the_same_stmt): Likewise.\n+\t* tree-sra.c (replace_uses_with_default_def_ssa_name): Likewise.\n+\t(get_replaced_param_substitute): Likewise.\n+\t* tree-ssa-phiprop.c (phiprop_insert_phi): Likewise.\n+\t* tree-ssa-phiopt.c (cond_store_replacement): Likewise.\n+\t* tree-ssa-pre.c (get_representative_for): Likewise.\n+\t(create_expression_by_pieces): Likewise.\n+\t* tree-tailcall.c (adjust_return_value_with_ops): Likewise.\n+\t(create_tailcall_accumulator): Likewise.\n+\n 2010-04-19  Martin Jambor  <mjambor@suse.cz>\n \n \t* cgraphunit.c (cgraph_redirect_edge_call_stmt_to_callee): Update"}, {"sha": "3daaa9e3c401871efcb236db11ccfe80bd9355d9", "filename": "gcc/gimple.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acd638015562cb10a9b70ba5acd0109aeba2f40b/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acd638015562cb10a9b70ba5acd0109aeba2f40b/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=acd638015562cb10a9b70ba5acd0109aeba2f40b", "patch": "@@ -964,6 +964,7 @@ extern bool gimple_ior_addresses_taken (bitmap, gimple);\n extern tree create_tmp_var_raw (tree, const char *);\n extern tree create_tmp_var_name (const char *);\n extern tree create_tmp_var (tree, const char *);\n+extern tree create_tmp_reg (tree, const char *);\n extern tree get_initialized_tmp_var (tree, gimple_seq *, gimple_seq *);\n extern tree get_formal_tmp_var (tree, gimple_seq *);\n extern void declare_vars (tree, gimple, bool);"}, {"sha": "287d62168f00b42d9dc7e963c1bca5ebb56adcec", "filename": "gcc/gimplify.c", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acd638015562cb10a9b70ba5acd0109aeba2f40b/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acd638015562cb10a9b70ba5acd0109aeba2f40b/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=acd638015562cb10a9b70ba5acd0109aeba2f40b", "patch": "@@ -508,6 +508,23 @@ create_tmp_var (tree type, const char *prefix)\n   return tmp_var;\n }\n \n+/* Create a new temporary variable declaration of type TYPE by calling\n+   create_tmp_var and if TYPE is a vector or a complex number, mark the new\n+   temporary as gimple register.  */\n+\n+tree\n+create_tmp_reg (tree type, const char *prefix)\n+{\n+  tree tmp;\n+\n+  tmp = create_tmp_var (type, prefix);\n+  if (TREE_CODE (type) == COMPLEX_TYPE\n+      || TREE_CODE (type) == VECTOR_TYPE)\n+    DECL_GIMPLE_REG_P (tmp) = 1;\n+\n+  return tmp;\n+}\n+\n /* Create a temporary with a name derived from VAL.  Subroutine of\n    lookup_tmp_var; nobody else should call this function.  */\n \n@@ -1219,10 +1236,7 @@ gimplify_return_expr (tree stmt, gimple_seq *pre_p)\n     result = gimplify_ctxp->return_temp;\n   else\n     {\n-      result = create_tmp_var (TREE_TYPE (result_decl), NULL);\n-      if (TREE_CODE (TREE_TYPE (result)) == COMPLEX_TYPE\n-          || TREE_CODE (TREE_TYPE (result)) == VECTOR_TYPE)\n-        DECL_GIMPLE_REG_P (result) = 1;\n+      result = create_tmp_reg (TREE_TYPE (result_decl), NULL);\n \n       /* ??? With complex control flow (usually involving abnormal edges),\n \t we can wind up warning about an uninitialized value for this.  Due\n@@ -6351,9 +6365,7 @@ gimplify_omp_atomic (tree *expr_p, gimple_seq *pre_p)\n   tree type = TYPE_MAIN_VARIANT (TREE_TYPE (TREE_TYPE (addr)));\n   tree tmp_load;\n \n-   tmp_load = create_tmp_var (type, NULL);\n-   if (TREE_CODE (type) == COMPLEX_TYPE || TREE_CODE (type) == VECTOR_TYPE)\n-     DECL_GIMPLE_REG_P (tmp_load) = 1;\n+   tmp_load = create_tmp_reg (type, NULL);\n    if (goa_stabilize_expr (&rhs, pre_p, addr, tmp_load) < 0)\n      return GS_ERROR;\n \n@@ -7828,11 +7840,8 @@ gimple_regimplify_operands (gimple stmt, gimple_stmt_iterator *gsi_p)\n \t    }\n \t  if (need_temp)\n \t    {\n-\t      tree temp = create_tmp_var (TREE_TYPE (lhs), NULL);\n+\t      tree temp = create_tmp_reg (TREE_TYPE (lhs), NULL);\n \n-\t      if (TREE_CODE (TREE_TYPE (lhs)) == COMPLEX_TYPE\n-\t\t  || TREE_CODE (TREE_TYPE (lhs)) == VECTOR_TYPE)\n-\t\tDECL_GIMPLE_REG_P (temp) = 1;\n \t      if (TREE_CODE (orig_lhs) == SSA_NAME)\n \t\torig_lhs = SSA_NAME_VAR (orig_lhs);\n "}, {"sha": "d5a56e5e29918ce84c3b9139042360fc4cf5ece6", "filename": "gcc/tree-dfa.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acd638015562cb10a9b70ba5acd0109aeba2f40b/gcc%2Ftree-dfa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acd638015562cb10a9b70ba5acd0109aeba2f40b/gcc%2Ftree-dfa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.c?ref=acd638015562cb10a9b70ba5acd0109aeba2f40b", "patch": "@@ -193,11 +193,7 @@ renumber_gimple_stmt_uids_in_blocks (basic_block *blocks, int n_blocks)\n tree\n make_rename_temp (tree type, const char *prefix)\n {\n-  tree t = create_tmp_var (type, prefix);\n-\n-  if (TREE_CODE (TREE_TYPE (t)) == COMPLEX_TYPE\n-      || TREE_CODE (TREE_TYPE (t)) == VECTOR_TYPE)\n-    DECL_GIMPLE_REG_P (t) = 1;\n+  tree t = create_tmp_reg (type, prefix);\n \n   if (gimple_referenced_vars (cfun))\n     {"}, {"sha": "41873cefb8c0d425a3fa83253f8c1b36dd9910a1", "filename": "gcc/tree-predcom.c", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acd638015562cb10a9b70ba5acd0109aeba2f40b/gcc%2Ftree-predcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acd638015562cb10a9b70ba5acd0109aeba2f40b/gcc%2Ftree-predcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-predcom.c?ref=acd638015562cb10a9b70ba5acd0109aeba2f40b", "patch": "@@ -1460,13 +1460,9 @@ static tree\n predcom_tmp_var (tree ref, unsigned i, bitmap tmp_vars)\n {\n   tree type = TREE_TYPE (ref);\n-  tree var = create_tmp_var (type, get_lsm_tmp_name (ref, i));\n-\n   /* We never access the components of the temporary variable in predictive\n      commoning.  */\n-  if (TREE_CODE (type) == COMPLEX_TYPE\n-      || TREE_CODE (type) == VECTOR_TYPE)\n-    DECL_GIMPLE_REG_P (var) = 1;\n+  tree var = create_tmp_reg (type, get_lsm_tmp_name (ref, i));\n \n   add_referenced_var (var);\n   bitmap_set_bit (tmp_vars, DECL_UID (var));\n@@ -2209,18 +2205,12 @@ reassociate_to_the_same_stmt (tree name1, tree name2)\n \n   /* Insert the new statement combining NAME1 and NAME2 before S1, and\n      combine it with the rhs of S1.  */\n-  var = create_tmp_var (type, \"predreastmp\");\n-  if (TREE_CODE (type) == COMPLEX_TYPE\n-      || TREE_CODE (type) == VECTOR_TYPE)\n-    DECL_GIMPLE_REG_P (var) = 1;\n+  var = create_tmp_reg (type, \"predreastmp\");\n   add_referenced_var (var);\n   new_name = make_ssa_name (var, NULL);\n   new_stmt = gimple_build_assign_with_ops (code, new_name, name1, name2);\n \n-  var = create_tmp_var (type, \"predreastmp\");\n-  if (TREE_CODE (type) == COMPLEX_TYPE\n-      || TREE_CODE (type) == VECTOR_TYPE)\n-    DECL_GIMPLE_REG_P (var) = 1;\n+  var = create_tmp_reg (type, \"predreastmp\");\n   add_referenced_var (var);\n   tmp_name = make_ssa_name (var, NULL);\n "}, {"sha": "0635aa7f4a813c7a288042a329479b0a274673ab", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acd638015562cb10a9b70ba5acd0109aeba2f40b/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acd638015562cb10a9b70ba5acd0109aeba2f40b/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=acd638015562cb10a9b70ba5acd0109aeba2f40b", "patch": "@@ -2537,10 +2537,7 @@ replace_uses_with_default_def_ssa_name (tree ssa)\n   tree repl, decl = SSA_NAME_VAR (ssa);\n   if (TREE_CODE (decl) == PARM_DECL)\n     {\n-      tree tmp = create_tmp_var (TREE_TYPE (decl), \"SR\");\n-      if (TREE_CODE (TREE_TYPE (tmp)) == COMPLEX_TYPE\n-\t  || TREE_CODE (TREE_TYPE (tmp)) == VECTOR_TYPE)\n-\tDECL_GIMPLE_REG_P (tmp) = 1;\n+      tree tmp = create_tmp_reg (TREE_TYPE (decl), \"SR\");\n \n       get_var_ann (tmp);\n       add_referenced_var (tmp);\n@@ -3733,10 +3730,7 @@ get_replaced_param_substitute (struct ipa_parm_adjustment *adj)\n     {\n       char *pretty_name = make_fancy_name (adj->base);\n \n-      repl = create_tmp_var (TREE_TYPE (adj->base), \"ISR\");\n-      if (TREE_CODE (TREE_TYPE (repl)) == COMPLEX_TYPE\n-\t  || TREE_CODE (TREE_TYPE (repl)) == VECTOR_TYPE)\n-\tDECL_GIMPLE_REG_P (repl) = 1;\n+      repl = create_tmp_reg (TREE_TYPE (adj->base), \"ISR\");\n       DECL_NAME (repl) = get_identifier (pretty_name);\n       obstack_free (&name_obstack, pretty_name);\n "}, {"sha": "33e058c22753bac88fd852d9c44de49dbb9e5c52", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acd638015562cb10a9b70ba5acd0109aeba2f40b/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acd638015562cb10a9b70ba5acd0109aeba2f40b/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=acd638015562cb10a9b70ba5acd0109aeba2f40b", "patch": "@@ -1226,11 +1226,8 @@ cond_store_replacement (basic_block middle_bb, basic_block join_bb,\n         of the memory touched by the store, if we need to.  */\n   if (!condstoretemp || TREE_TYPE (lhs) != TREE_TYPE (condstoretemp))\n     {\n-      condstoretemp = create_tmp_var (TREE_TYPE (lhs), \"cstore\");\n+      condstoretemp = create_tmp_reg (TREE_TYPE (lhs), \"cstore\");\n       get_var_ann (condstoretemp);\n-      if (TREE_CODE (TREE_TYPE (lhs)) == COMPLEX_TYPE\n-          || TREE_CODE (TREE_TYPE (lhs)) == VECTOR_TYPE)\n-\tDECL_GIMPLE_REG_P (condstoretemp) = 1;\n     }\n   add_referenced_var (condstoretemp);\n "}, {"sha": "799bb5a1e0bcf01867bf3e504fc97bbecd344076", "filename": "gcc/tree-ssa-phiprop.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acd638015562cb10a9b70ba5acd0109aeba2f40b/gcc%2Ftree-ssa-phiprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acd638015562cb10a9b70ba5acd0109aeba2f40b/gcc%2Ftree-ssa-phiprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiprop.c?ref=acd638015562cb10a9b70ba5acd0109aeba2f40b", "patch": "@@ -190,11 +190,8 @@ phiprop_insert_phi (basic_block bb, gimple phi, gimple use_stmt,\n \t{\n \t  gcc_assert (TREE_CODE (old_arg) == ADDR_EXPR);\n \t  old_arg = TREE_OPERAND (old_arg, 0);\n-\t  new_var = create_tmp_var (TREE_TYPE (old_arg), NULL);\n+\t  new_var = create_tmp_reg (TREE_TYPE (old_arg), NULL);\n \t  tmp = gimple_build_assign (new_var, unshare_expr (old_arg));\n-\t  if (TREE_CODE (TREE_TYPE (old_arg)) == COMPLEX_TYPE\n-\t      || TREE_CODE (TREE_TYPE (old_arg)) == VECTOR_TYPE)\n-\t    DECL_GIMPLE_REG_P (new_var) = 1;\n \t  gcc_assert (is_gimple_reg (new_var));\n \t  add_referenced_var (new_var);\n \t  new_var = make_ssa_name (new_var, tmp);"}, {"sha": "584f6061531281b99c4f391419c06bb1b7fcd7a8", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acd638015562cb10a9b70ba5acd0109aeba2f40b/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acd638015562cb10a9b70ba5acd0109aeba2f40b/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=acd638015562cb10a9b70ba5acd0109aeba2f40b", "patch": "@@ -1407,7 +1407,7 @@ get_representative_for (const pre_expr e)\n      that we will return.  */\n   if (!pretemp || exprtype != TREE_TYPE (pretemp))\n     {\n-      pretemp = create_tmp_var (exprtype, \"pretmp\");\n+      pretemp = create_tmp_reg (exprtype, \"pretmp\");\n       get_var_ann (pretemp);\n     }\n \n@@ -3088,17 +3088,13 @@ create_expression_by_pieces (basic_block block, pre_expr expr,\n      that we will return.  */\n   if (!pretemp || exprtype != TREE_TYPE (pretemp))\n     {\n-      pretemp = create_tmp_var (exprtype, \"pretmp\");\n+      pretemp = create_tmp_reg (exprtype, \"pretmp\");\n       get_var_ann (pretemp);\n     }\n \n   temp = pretemp;\n   add_referenced_var (temp);\n \n-  if (TREE_CODE (exprtype) == COMPLEX_TYPE\n-      || TREE_CODE (exprtype) == VECTOR_TYPE)\n-    DECL_GIMPLE_REG_P (temp) = 1;\n-\n   newstmt = gimple_build_assign (temp, folded);\n   name = make_ssa_name (temp, newstmt);\n   gimple_assign_set_lhs (newstmt, name);"}, {"sha": "4d2422aa623777b05d2bb12a954a4e2503d644d4", "filename": "gcc/tree-tailcall.c", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acd638015562cb10a9b70ba5acd0109aeba2f40b/gcc%2Ftree-tailcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acd638015562cb10a9b70ba5acd0109aeba2f40b/gcc%2Ftree-tailcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-tailcall.c?ref=acd638015562cb10a9b70ba5acd0109aeba2f40b", "patch": "@@ -575,13 +575,10 @@ adjust_return_value_with_ops (enum tree_code code, const char *label,\n {\n \n   tree ret_type = TREE_TYPE (DECL_RESULT (current_function_decl));\n-  tree tmp = create_tmp_var (ret_type, label);\n+  tree tmp = create_tmp_reg (ret_type, label);\n   gimple stmt;\n   tree result;\n \n-  if (TREE_CODE (ret_type) == COMPLEX_TYPE\n-      || TREE_CODE (ret_type) == VECTOR_TYPE)\n-    DECL_GIMPLE_REG_P (tmp) = 1;\n   add_referenced_var (tmp);\n \n   if (types_compatible_p (TREE_TYPE (acc), TREE_TYPE (op1)))\n@@ -908,12 +905,9 @@ static tree\n create_tailcall_accumulator (const char *label, basic_block bb, tree init)\n {\n   tree ret_type = TREE_TYPE (DECL_RESULT (current_function_decl));\n-  tree tmp = create_tmp_var (ret_type, label);\n+  tree tmp = create_tmp_reg (ret_type, label);\n   gimple phi;\n \n-  if (TREE_CODE (ret_type) == COMPLEX_TYPE\n-      || TREE_CODE (ret_type) == VECTOR_TYPE)\n-    DECL_GIMPLE_REG_P (tmp) = 1;\n   add_referenced_var (tmp);\n   phi = create_phi_node (tmp, bb);\n   /* RET_TYPE can be a float when -ffast-maths is enabled.  */"}]}