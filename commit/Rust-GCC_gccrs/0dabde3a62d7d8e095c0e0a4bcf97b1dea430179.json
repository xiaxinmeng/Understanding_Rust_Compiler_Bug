{"sha": "0dabde3a62d7d8e095c0e0a4bcf97b1dea430179", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGRhYmRlM2E2MmQ3ZDhlMDk1YzBlMGE0YmNmOTdiMWRlYTQzMDE3OQ==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2008-07-31T09:42:51Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-07-31T09:42:51Z"}, "message": "sem_ch6.adb (Analyze_Generic_Subprogram_Body): After analysis...\n\n2008-07-31  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch6.adb (Analyze_Generic_Subprogram_Body): After analysis,\n\ttransfer pre/postconditions from generic copy to original tree, so that\n\tthey will appear in each instance.\n\t(Process_PPCs): Do not transform postconditions into a procedure in a\n\tgeneric context, to prevent double expansion of check pragmas.\n\t\n\t* sem_attr.adb: In an instance, the prefix of the 'result attribute\n\tcan be the renaming of the\n\tcurrent instance, so check validity of the name accordingly.\n\nFrom-SVN: r138372", "tree": {"sha": "1ff9dac3356245eceba1f6077404889d95d51574", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ff9dac3356245eceba1f6077404889d95d51574"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0dabde3a62d7d8e095c0e0a4bcf97b1dea430179", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dabde3a62d7d8e095c0e0a4bcf97b1dea430179", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0dabde3a62d7d8e095c0e0a4bcf97b1dea430179", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dabde3a62d7d8e095c0e0a4bcf97b1dea430179/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "44527de3a6aa07d7fe48363cc9eb8dd91988a9bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44527de3a6aa07d7fe48363cc9eb8dd91988a9bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44527de3a6aa07d7fe48363cc9eb8dd91988a9bb"}], "stats": {"total": 96, "additions": 80, "deletions": 16}, "files": [{"sha": "4b599151f8e98e14558758b3fc2eaadce5fbbb09", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dabde3a62d7d8e095c0e0a4bcf97b1dea430179/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dabde3a62d7d8e095c0e0a4bcf97b1dea430179/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=0dabde3a62d7d8e095c0e0a4bcf97b1dea430179", "patch": "@@ -3739,21 +3739,17 @@ package body Sem_Attr is\n \n       when Attribute_Result => Result : declare\n          CS : constant Entity_Id := Current_Scope;\n-         PS : Entity_Id;\n+         PS : constant Entity_Id := Scope (CS);\n \n       begin\n-         PS := Scope (CS);\n+         --  If the enclosing subprogram is always inlined, the enclosing\n+         --  postcondition will not be propagated to the expanded call.\n \n-         --  If we are analyzing a body to be inlined, there is an additional\n-         --  scope present, used to gather global references. Retrieve the\n-         --  source scope.\n-\n-         if Chars (PS) = Name_uParent then\n-            PS := Scope (PS);\n-            if Warn_On_Redundant_Constructs then\n-               Error_Msg_N\n-                 (\"postconditions on inlined functions not enforced\", N);\n-            end if;\n+         if Has_Pragma_Inline_Always (PS)\n+           and then Warn_On_Redundant_Constructs\n+         then\n+            Error_Msg_N\n+              (\"postconditions on inlined functions not enforced?\", N);\n          end if;\n \n          --  If we are in the scope of a function and in Spec_Expression mode,\n@@ -3796,6 +3792,16 @@ package body Sem_Attr is\n             then\n                null;\n \n+            --  Within an instance, the prefix designates the local renaming\n+            --  of the original generic.\n+\n+            elsif Is_Entity_Name (P)\n+              and then Ekind (Entity (P)) = E_Function\n+              and then Present (Alias (Entity (P)))\n+              and then Chars (Alias (Entity (P))) = Chars (PS)\n+            then\n+               null;\n+\n             else\n                Error_Msg_NE\n                  (\"incorrect prefix for % attribute, expected &\", P, PS);"}, {"sha": "b378be43fff38d7d421fbccf8f770153e9621e8d", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 62, "deletions": 4, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dabde3a62d7d8e095c0e0a4bcf97b1dea430179/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dabde3a62d7d8e095c0e0a4bcf97b1dea430179/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=0dabde3a62d7d8e095c0e0a4bcf97b1dea430179", "patch": "@@ -891,6 +891,37 @@ package body Sem_Ch6 is\n          end if;\n \n          Set_Actual_Subtypes (N, Current_Scope);\n+         Process_PPCs (N, Gen_Id, Body_Id);\n+\n+         --  If the generic unit carries pre- or post-conditions, copy them\n+         --  to the original generic tree, so that they are properly added\n+         --  to any instantiation.\n+\n+         declare\n+            Orig : constant Node_Id := Original_Node (N);\n+            Cond : Node_Id;\n+\n+         begin\n+            Cond := First (Declarations (N));\n+            while Present (Cond) loop\n+               if Nkind (Cond) = N_Pragma\n+                 and then Pragma_Name (Cond) = Name_Check\n+               then\n+                  Prepend (New_Copy_Tree (Cond), Declarations (Orig));\n+\n+               elsif Nkind (Cond) = N_Pragma\n+                 and then Pragma_Name (Cond) = Name_Postcondition\n+               then\n+                  Set_Ekind (Defining_Entity (Orig), Ekind (Gen_Id));\n+                  Prepend (New_Copy_Tree (Cond), Declarations (Orig));\n+               else\n+                  exit;\n+               end if;\n+\n+               Next (Cond);\n+            end loop;\n+         end;\n+\n          Analyze_Declarations (Declarations (N));\n          Check_Completion;\n          Analyze (Handled_Statement_Sequence (N));\n@@ -1874,6 +1905,10 @@ package body Sem_Ch6 is\n          end if;\n       end if;\n \n+      if Chars (Body_Id) = Name_uPostconditions then\n+         Set_Has_Postconditions (Current_Scope);\n+      end if;\n+\n       --  Place subprogram on scope stack, and make formals visible. If there\n       --  is a spec, the visible entity remains that of the spec.\n \n@@ -7752,9 +7787,17 @@ package body Sem_Ch6 is\n          --  procedure. Note that it is only at the outer level that we\n          --  do this fiddling, for the spec cases, the already preanalyzed\n          --  parameters are not affected.\n+         --  For a postcondition pragma within a generic, preserve the pragma\n+         --  for later expansion.\n \n          Set_Analyzed (CP, False);\n \n+         if Nam = Name_Postcondition\n+           and then not Expander_Active\n+         then\n+            return CP;\n+         end if;\n+\n          --  Change pragma into corresponding pragma Check\n \n          Prepend_To (Pragma_Argument_Associations (CP),\n@@ -7827,7 +7870,15 @@ package body Sem_Ch6 is\n                   end if;\n \n                   Analyze (Prag);\n-                  Append (Grab_PPC (Name_Postcondition), Plist);\n+\n+                  --  If expansion is disabled, as in a generic unit,\n+                  --  save pragma for later expansion.\n+\n+                  if not Expander_Active then\n+                     Prepend (Grab_PPC (Name_Postcondition), Declarations (N));\n+                  else\n+                     Append (Grab_PPC (Name_Postcondition), Plist);\n+                  end if;\n                end if;\n \n                Next (Prag);\n@@ -7860,16 +7911,23 @@ package body Sem_Ch6 is\n                   Plist := Empty_List;\n                end if;\n \n-               Append (Grab_PPC (Name_Postcondition), Plist);\n+               if not Expander_Active then\n+                  Prepend (Grab_PPC (Name_Postcondition), Declarations (N));\n+               else\n+                  Append (Grab_PPC (Name_Postcondition), Plist);\n+               end if;\n             end if;\n \n             Prag := Next_Pragma (Prag);\n          end loop;\n       end if;\n \n-      --  If we had any postconditions, build the procedure\n+      --  If we had any postconditions and expansion is enabled,, build\n+      --  the Postconditions procedure.\n \n-      if Present (Plist) then\n+      if Present (Plist)\n+        and then Expander_Active\n+      then\n          Subp := Defining_Entity (N);\n \n          if Etype (Subp) /= Standard_Void_Type then"}]}