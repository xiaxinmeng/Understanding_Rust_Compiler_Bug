{"sha": "cb4af25a807a42bcc9ddb200dc65b51fb74986e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2I0YWYyNWE4MDdhNDJiY2M5ZGRiMjAwZGM2NWI1MWZiNzQ5ODZlMw==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2006-12-23T17:45:33Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2006-12-23T17:45:33Z"}, "message": "re PR middle-end/7651 (Define -Wextra strictly in terms of other warning flags)\n\n2006-12-23  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n\n\tPR middle-end/7651\n\t* c.opt (Wmissing-parameter-type): New.\n\t* doc/invoke.texi (Wmissing-parameter-type): Document it.\n\t(Wextra): Enabled by -Wextra.\n\t* c-opts.c (c_common_post_options): Enabled by -Wextra.\n\t* c-decl.c (store_parm_decls_oldstyle): Replace Wextra with\n\tWmissing-parameter-type.\n\t\ntestsuite/\n\n\t* gcc.dg/Wmissing-parameter-type.c: New.\n\t* gcc.dg/Wmissing-parameter-type-Wextra.c: New.\n\t* gcc.dg/Wmissing-parameter-type-no.c: New.\n\nFrom-SVN: r120173", "tree": {"sha": "4354a6aa46114e214eb3cb70143984a28edef5aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4354a6aa46114e214eb3cb70143984a28edef5aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb4af25a807a42bcc9ddb200dc65b51fb74986e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb4af25a807a42bcc9ddb200dc65b51fb74986e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb4af25a807a42bcc9ddb200dc65b51fb74986e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb4af25a807a42bcc9ddb200dc65b51fb74986e3/comments", "author": null, "committer": null, "parents": [{"sha": "ea049a41992eb3d97ab7da175f0a98fbbdf68f35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea049a41992eb3d97ab7da175f0a98fbbdf68f35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea049a41992eb3d97ab7da175f0a98fbbdf68f35"}], "stats": {"total": 72, "additions": 62, "deletions": 10}, "files": [{"sha": "09056a4a7d4cb817c43107bb804a4a7c6565e256", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb4af25a807a42bcc9ddb200dc65b51fb74986e3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb4af25a807a42bcc9ddb200dc65b51fb74986e3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cb4af25a807a42bcc9ddb200dc65b51fb74986e3", "patch": "@@ -1,3 +1,13 @@\n+2006-12-23  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\tPR middle-end/7651\n+\t* c.opt (Wmissing-parameter-type): New.\n+\t* doc/invoke.texi (Wmissing-parameter-type): Document it.\n+\t(Wextra): Enabled by -Wextra.\n+\t* c-opts.c (c_common_post_options): Enabled by -Wextra.\n+\t* c-decl.c (store_parm_decls_oldstyle): Replace Wextra with\n+\tWmissing-parameter-type.\n+\t\n 2006-12-23  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* dwarf2out.c (dbx_reg_number): Do leaf register remapping"}, {"sha": "a9506e122b3c3adf1ff3e416129ca310ef1bfda2", "filename": "gcc/c-decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb4af25a807a42bcc9ddb200dc65b51fb74986e3/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb4af25a807a42bcc9ddb200dc65b51fb74986e3/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=cb4af25a807a42bcc9ddb200dc65b51fb74986e3", "patch": "@@ -6414,8 +6414,8 @@ store_parm_decls_oldstyle (tree fndecl, const struct c_arg_info *arg_info)\n \n \t  if (flag_isoc99)\n \t    pedwarn (\"type of %q+D defaults to %<int%>\", decl);\n-\t  else if (extra_warnings)\n-\t    warning (OPT_Wextra, \"type of %q+D defaults to %<int%>\", decl);\n+\t  else \n+\t    warning (OPT_Wmissing_parameter_type, \"type of %q+D defaults to %<int%>\", decl);\n \t}\n \n       TREE_PURPOSE (parm) = decl;"}, {"sha": "5390a05d73944b9136d39134c166cd1a64026ec0", "filename": "gcc/c-opts.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb4af25a807a42bcc9ddb200dc65b51fb74986e3/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb4af25a807a42bcc9ddb200dc65b51fb74986e3/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=cb4af25a807a42bcc9ddb200dc65b51fb74986e3", "patch": "@@ -1026,7 +1026,7 @@ c_common_post_options (const char **pfilename)\n     flag_exceptions = 1;\n \n   /* -Wextra implies -Wclobbered, -Wempty-body, -Wsign-compare, \n-     -Wmissing-field-initializers and -Woverride-init, \n+     -Wmissing-field-initializers, -Wmissing-parameter-type and -Woverride-init, \n      but not if explicitly overridden.  */\n   if (warn_clobbered == -1)\n     warn_clobbered = extra_warnings;\n@@ -1036,6 +1036,8 @@ c_common_post_options (const char **pfilename)\n     warn_sign_compare = extra_warnings;\n   if (warn_missing_field_initializers == -1)\n     warn_missing_field_initializers = extra_warnings;\n+  if (warn_missing_parameter_type == -1)\n+    warn_missing_parameter_type = extra_warnings;\n   if (warn_override_init == -1)\n     warn_override_init = extra_warnings;\n "}, {"sha": "e4d45e468abceddbbaebb8880b8581cba6619d91", "filename": "gcc/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb4af25a807a42bcc9ddb200dc65b51fb74986e3/gcc%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb4af25a807a42bcc9ddb200dc65b51fb74986e3/gcc%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc.opt?ref=cb4af25a807a42bcc9ddb200dc65b51fb74986e3", "patch": "@@ -283,6 +283,10 @@ Wmissing-include-dirs\n C ObjC C++ ObjC++\n Warn about user-specified include directories that do not exist\n \n+Wmissing-parameter-type\n+C ObjC Var(warn_missing_parameter_type) Init(-1)\n+Warn about function parameters declared without a type specifier in K&R-style functions\n+\n Wmissing-prototypes\n C ObjC Var(warn_missing_prototypes)\n Warn about global functions without prototypes"}, {"sha": "4fc0966a1dd96e34c010cd3e66e1de9ff8ecd733", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb4af25a807a42bcc9ddb200dc65b51fb74986e3/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb4af25a807a42bcc9ddb200dc65b51fb74986e3/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=cb4af25a807a42bcc9ddb200dc65b51fb74986e3", "patch": "@@ -256,7 +256,8 @@ Objective-C and Objective-C++ Dialects}.\n \n @item C-only Warning Options\n @gccoptlist{-Wbad-function-cast  -Wmissing-declarations @gol\n--Wmissing-prototypes  -Wnested-externs  -Wold-style-definition @gol\n+-Wmissing-parameter-type  -Wmissing-prototypes @gol\n+-Wnested-externs  -Wold-style-definition @gol\n -Wstrict-prototypes  -Wtraditional  -Wtraditional-conversion @gol\n -Wdeclaration-after-statement -Wpointer-sign}\n \n@@ -2908,13 +2909,10 @@ designated initializers (@pxref{Designated Inits, , Designated\n Initializers}).  This warning can be independently controlled by\n @option{-Woverride-init}.\n \n-@item\n+@item @r{(C only)}\n A function parameter is declared without a type specifier in K&R-style\n-functions:\n-\n-@smallexample\n-void foo(bar) @{ @}\n-@end smallexample\n+functions.  This warning can be independently controlled by\n+@option{-Wmissing-parameter-type}.\n \n @item\n An empty body occurs in an @samp{if} or @samp{else} statement. This\n@@ -3221,6 +3219,17 @@ types.)\n Warn if an old-style function definition is used.  A warning is given\n even if there is a previous prototype.\n \n+@item -Wmissing-parameter-type @r{(C only)}\n+@opindex Wmissing-parameter-type\n+A function parameter is declared without a type specifier in K&R-style\n+functions:\n+\n+@smallexample\n+void foo(bar) @{ @}\n+@end smallexample\n+\n+This warning is also enabled by @option{-Wextra}.\n+\n @item -Wmissing-prototypes @r{(C only)}\n @opindex Wmissing-prototypes\n Warn if a global function is defined without a previous prototype"}, {"sha": "614ece93ee8da21d0a6c1e8a5bc98d33a06cfc06", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb4af25a807a42bcc9ddb200dc65b51fb74986e3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb4af25a807a42bcc9ddb200dc65b51fb74986e3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cb4af25a807a42bcc9ddb200dc65b51fb74986e3", "patch": "@@ -1,3 +1,10 @@\n+2006-12-23  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\tPR middle-end/7651\n+\t* gcc.dg/Wmissing-parameter-type.c: New.\n+\t* gcc.dg/Wmissing-parameter-type-Wextra.c: New.\n+\t* gcc.dg/Wmissing-parameter-type-no.c: New.\n+\t\n 2006-12-22  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/25818"}, {"sha": "37e1a571bda78bc644a0cec8bea20740d13b58c8", "filename": "gcc/testsuite/gcc.dg/Wmissing-parameter-type-Wextra.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb4af25a807a42bcc9ddb200dc65b51fb74986e3/gcc%2Ftestsuite%2Fgcc.dg%2FWmissing-parameter-type-Wextra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb4af25a807a42bcc9ddb200dc65b51fb74986e3/gcc%2Ftestsuite%2Fgcc.dg%2FWmissing-parameter-type-Wextra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWmissing-parameter-type-Wextra.c?ref=cb4af25a807a42bcc9ddb200dc65b51fb74986e3", "patch": "@@ -0,0 +1,7 @@\n+/* Test -Wmissing-parameter-type is enabled by -Wextra */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wextra\" } */\n+\n+int foo(bar) { return bar;} /* { dg-warning \"type of 'bar' defaults to 'int'\" } */\n+\n+"}, {"sha": "1031e57a0c835554c4159410042739570c447f0f", "filename": "gcc/testsuite/gcc.dg/Wmissing-parameter-type-no.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb4af25a807a42bcc9ddb200dc65b51fb74986e3/gcc%2Ftestsuite%2Fgcc.dg%2FWmissing-parameter-type-no.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb4af25a807a42bcc9ddb200dc65b51fb74986e3/gcc%2Ftestsuite%2Fgcc.dg%2FWmissing-parameter-type-no.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWmissing-parameter-type-no.c?ref=cb4af25a807a42bcc9ddb200dc65b51fb74986e3", "patch": "@@ -0,0 +1,7 @@\n+/* Test that we can disable -Wmissing-parameter-type */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wall -Wextra -Wno-missing-parameter-type\" } */\n+\n+int foo(bar) { return bar;} /* { dg-bogus \"type of 'bar' defaults to 'int'\" } */\n+\n+"}, {"sha": "8ec94e2caf785986473a83cc936f36992ba44d1f", "filename": "gcc/testsuite/gcc.dg/Wmissing-parameter-type.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb4af25a807a42bcc9ddb200dc65b51fb74986e3/gcc%2Ftestsuite%2Fgcc.dg%2FWmissing-parameter-type.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb4af25a807a42bcc9ddb200dc65b51fb74986e3/gcc%2Ftestsuite%2Fgcc.dg%2FWmissing-parameter-type.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWmissing-parameter-type.c?ref=cb4af25a807a42bcc9ddb200dc65b51fb74986e3", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wmissing-parameter-type\" } */\n+\n+int foo(bar) { return bar; } /* { dg-warning \"type of 'bar' defaults to 'int'\" } */\n+\n+"}]}