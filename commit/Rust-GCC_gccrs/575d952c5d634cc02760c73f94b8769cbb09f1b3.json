{"sha": "575d952c5d634cc02760c73f94b8769cbb09f1b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTc1ZDk1MmM1ZDYzNGNjMDI3NjBjNzNmOTRiODc2OWNiYjA5ZjFiMw==", "commit": {"author": {"name": "Alexander Ivchenko", "email": "alexander.ivchenko@intel.com", "date": "2014-09-12T07:36:59Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2014-09-12T07:36:59Z"}, "message": "AVX-512.  Extend max/min insn patterns.\n\ngcc/\n\t* config/i386/sse.md (VI128_256): Delete.\n\t(define_mode_iterator VI124_256): New.\n\t(define_mode_iterator VI124_256_AVX512F_AVX512BW): Ditto.\n\t(define_expand \"<code><mode>3<mask_name><round_name>\"): Delete.\n\t(define_expand \"<code><VI124_256_AVX512F_AVX512BW:mode>3\"): New.\n\t(define_insn \"*avx2_<code><VI124_256:mode>3\"): Rename from\n\t\"*avx2_<code><mode>3<mask_name><round_name>\" and update mode iterator.\n\t(define_expand \"<code><VI48_AVX512VL:mode>3_mask\"): New.\n\t(define_insn \"*avx512bw_<code><VI48_AVX512VL:mode>3<mask_name>\"): Ditto.\n\t(define_insn \"<mask_codefor><code><mode>3<mask_name>\"): Update mode\n\titerator.\n\t(define_expand \"<code><VI8_AVX2:mode>3\"): Update pettern generation\n\tin presence of AVX-512.\n\n\nCo-Authored-By: Andrey Turetskiy <andrey.turetskiy@intel.com>\nCo-Authored-By: Anna Tikhonova <anna.tikhonova@intel.com>\nCo-Authored-By: Ilya Tocar <ilya.tocar@intel.com>\nCo-Authored-By: Ilya Verbin <ilya.verbin@intel.com>\nCo-Authored-By: Kirill Yukhin <kirill.yukhin@intel.com>\nCo-Authored-By: Maxim Kuznetsov <maxim.kuznetsov@intel.com>\nCo-Authored-By: Michael Zolotukhin <michael.v.zolotukhin@intel.com>\n\nFrom-SVN: r215202", "tree": {"sha": "3f70c4b1b9fad1e7ba77ea2ac637cee5710166e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f70c4b1b9fad1e7ba77ea2ac637cee5710166e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/575d952c5d634cc02760c73f94b8769cbb09f1b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/575d952c5d634cc02760c73f94b8769cbb09f1b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/575d952c5d634cc02760c73f94b8769cbb09f1b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/575d952c5d634cc02760c73f94b8769cbb09f1b3/comments", "author": null, "committer": null, "parents": [{"sha": "be746da138049580dbb3cf7b11ddf0cc77b46aff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be746da138049580dbb3cf7b11ddf0cc77b46aff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be746da138049580dbb3cf7b11ddf0cc77b46aff"}], "stats": {"total": 153, "additions": 103, "deletions": 50}, "files": [{"sha": "d6cdc269b10767ed62227bda2f5788b300122182", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/575d952c5d634cc02760c73f94b8769cbb09f1b3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/575d952c5d634cc02760c73f94b8769cbb09f1b3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=575d952c5d634cc02760c73f94b8769cbb09f1b3", "patch": "@@ -1,3 +1,26 @@\n+2014-09-12  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n+\t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n+\t    Anna Tikhonova  <anna.tikhonova@intel.com>\n+\t    Ilya Tocar  <ilya.tocar@intel.com>\n+\t    Andrey Turetskiy  <andrey.turetskiy@intel.com>\n+\t    Ilya Verbin  <ilya.verbin@intel.com>\n+\t    Kirill Yukhin  <kirill.yukhin@intel.com>\n+\t    Michael Zolotukhin  <michael.v.zolotukhin@intel.com>\n+\n+\t* config/i386/sse.md (VI128_256): Delete.\n+\t(define_mode_iterator VI124_256): New.\n+\t(define_mode_iterator VI124_256_AVX512F_AVX512BW): Ditto.\n+\t(define_expand \"<code><mode>3<mask_name><round_name>\"): Delete.\n+\t(define_expand \"<code><VI124_256_AVX512F_AVX512BW:mode>3\"): New.\n+\t(define_insn \"*avx2_<code><VI124_256:mode>3\"): Rename from\n+\t\"*avx2_<code><mode>3<mask_name><round_name>\" and update mode iterator.\n+\t(define_expand \"<code><VI48_AVX512VL:mode>3_mask\"): New.\n+\t(define_insn \"*avx512bw_<code><VI48_AVX512VL:mode>3<mask_name>\"): Ditto.\n+\t(define_insn \"<mask_codefor><code><mode>3<mask_name>\"): Update mode\n+\titerator.\n+\t(define_expand \"<code><VI8_AVX2:mode>3\"): Update pettern generation\n+\tin presence of AVX-512.\n+\n 2014-09-12  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n \t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n \t    Anna Tikhonova  <anna.tikhonova@intel.com>"}, {"sha": "92f94b98cb5c21b7b62f47bc03ac942890353239", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 80, "deletions": 50, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/575d952c5d634cc02760c73f94b8769cbb09f1b3/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/575d952c5d634cc02760c73f94b8769cbb09f1b3/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=575d952c5d634cc02760c73f94b8769cbb09f1b3", "patch": "@@ -290,9 +290,6 @@\n (define_mode_iterator VI8_256_512\n   [V8DI (V4DI \"TARGET_AVX512VL\")])\n \n-(define_mode_iterator VI128_256\n-  [V4DI V2DI V4SI (V16QI \"TARGET_AVX512BW\") (V8HI \"TARGET_AVX512BW\")])\n-\n (define_mode_iterator VI1_AVX2\n   [(V32QI \"TARGET_AVX2\") V16QI])\n \n@@ -499,8 +496,12 @@\n (define_mode_iterator VI48_128 [V4SI V2DI])\n \n ;; Various 256bit and 512 vector integer mode combinations\n-(define_mode_iterator VI124_256_48_512\n-  [V32QI V16HI V8SI (V8DI \"TARGET_AVX512F\") (V16SI \"TARGET_AVX512F\")])\n+(define_mode_iterator VI124_256 [V32QI V16HI V8SI])\n+(define_mode_iterator VI124_256_AVX512F_AVX512BW\n+  [V32QI V16HI V8SI\n+   (V64QI \"TARGET_AVX512BW\")\n+   (V32HI \"TARGET_AVX512BW\")\n+   (V16SI \"TARGET_AVX512F\")])\n (define_mode_iterator VI48_256 [V8SI V4DI])\n (define_mode_iterator VI48_512 [V16SI V8DI])\n (define_mode_iterator VI4_256_8_512 [V8SI V8DI])\n@@ -9449,71 +9450,100 @@\n   [(set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_expand \"<code><mode>3<mask_name><round_name>\"\n-  [(set (match_operand:VI124_256_48_512 0 \"register_operand\")\n-\t(maxmin:VI124_256_48_512\n-\t  (match_operand:VI124_256_48_512 1 \"<round_nimm_predicate>\")\n-\t  (match_operand:VI124_256_48_512 2 \"<round_nimm_predicate>\")))]\n-  \"TARGET_AVX2 && <mask_mode512bit_condition> && <round_mode512bit_condition>\"\n+(define_expand \"<code><mode>3\"\n+  [(set (match_operand:VI124_256_AVX512F_AVX512BW 0 \"register_operand\")\n+\t(maxmin:VI124_256_AVX512F_AVX512BW\n+\t  (match_operand:VI124_256_AVX512F_AVX512BW 1 \"nonimmediate_operand\")\n+\t  (match_operand:VI124_256_AVX512F_AVX512BW 2 \"nonimmediate_operand\")))]\n+  \"TARGET_AVX2\"\n   \"ix86_fixup_binary_operands_no_copy (<CODE>, <MODE>mode, operands);\")\n \n-(define_insn \"*avx2_<code><mode>3<mask_name><round_name>\"\n-  [(set (match_operand:VI124_256_48_512 0 \"register_operand\" \"=v\")\n-\t(maxmin:VI124_256_48_512\n-\t  (match_operand:VI124_256_48_512 1 \"<round_nimm_predicate>\" \"%v\")\n-\t  (match_operand:VI124_256_48_512 2 \"<round_nimm_predicate>\" \"<round_constraint>\")))]\n-  \"TARGET_AVX2 && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\n-   && <mask_mode512bit_condition> && <round_mode512bit_condition>\"\n-  \"vp<maxmin_int><ssemodesuffix>\\t{<round_mask_op3>%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2<round_mask_op3>}\"\n+(define_insn \"*avx2_<code><mode>3\"\n+  [(set (match_operand:VI124_256 0 \"register_operand\" \"=v\")\n+\t(maxmin:VI124_256\n+\t  (match_operand:VI124_256 1 \"nonimmediate_operand\" \"%v\")\n+\t  (match_operand:VI124_256 2 \"nonimmediate_operand\" \"vm\")))]\n+  \"TARGET_AVX2 && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n+  \"vp<maxmin_int><ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"sseiadd\")\n    (set_attr \"prefix_extra\" \"1\")\n-   (set_attr \"prefix\" \"maybe_evex\")\n+   (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"OI\")])\n \n+(define_expand \"<code><mode>3_mask\"\n+  [(set (match_operand:VI48_AVX512VL 0 \"register_operand\")\n+\t(vec_merge:VI48_AVX512VL\n+\t  (maxmin:VI48_AVX512VL\n+\t    (match_operand:VI48_AVX512VL 1 \"nonimmediate_operand\")\n+\t    (match_operand:VI48_AVX512VL 2 \"nonimmediate_operand\"))\n+\t  (match_operand:VI48_AVX512VL 3 \"vector_move_operand\")\n+\t  (match_operand:<avx512fmaskmode> 4 \"register_operand\")))]\n+  \"TARGET_AVX512F\"\n+  \"ix86_fixup_binary_operands_no_copy (<CODE>, <MODE>mode, operands);\")\n+\n+(define_insn \"*avx512bw_<code><mode>3<mask_name>\"\n+  [(set (match_operand:VI48_AVX512VL 0 \"register_operand\" \"=v\")\n+\t(maxmin:VI48_AVX512VL\n+\t  (match_operand:VI48_AVX512VL 1 \"nonimmediate_operand\" \"%v\")\n+\t  (match_operand:VI48_AVX512VL 2 \"nonimmediate_operand\" \"vm\")))]\n+  \"TARGET_AVX512F && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n+  \"vp<maxmin_int><ssemodesuffix>\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n+  [(set_attr \"type\" \"sseiadd\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"prefix\" \"maybe_evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n (define_insn \"<mask_codefor><code><mode>3<mask_name>\"\n-  [(set (match_operand:VI128_256 0 \"register_operand\" \"=v\")\n-        (maxmin:VI128_256\n-          (match_operand:VI128_256 1 \"register_operand\" \"v\")\n-          (match_operand:VI128_256 2 \"nonimmediate_operand\" \"vm\")))]\n-  \"TARGET_AVX512VL\"\n+  [(set (match_operand:VI12_AVX512VL 0 \"register_operand\" \"=v\")\n+        (maxmin:VI12_AVX512VL\n+          (match_operand:VI12_AVX512VL 1 \"register_operand\" \"v\")\n+          (match_operand:VI12_AVX512VL 2 \"nonimmediate_operand\" \"vm\")))]\n+  \"TARGET_AVX512BW\"\n   \"vp<maxmin_int><ssemodesuffix>\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n   [(set_attr \"type\" \"sseiadd\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n (define_expand \"<code><mode>3\"\n-  [(set (match_operand:VI8_AVX2 0 \"register_operand\")\n-\t(maxmin:VI8_AVX2\n-\t  (match_operand:VI8_AVX2 1 \"register_operand\")\n-\t  (match_operand:VI8_AVX2 2 \"register_operand\")))]\n+  [(set (match_operand:VI8_AVX2_AVX512BW 0 \"register_operand\")\n+\t(maxmin:VI8_AVX2_AVX512BW\n+\t  (match_operand:VI8_AVX2_AVX512BW 1 \"register_operand\")\n+\t  (match_operand:VI8_AVX2_AVX512BW 2 \"register_operand\")))]\n   \"TARGET_SSE4_2\"\n {\n-  enum rtx_code code;\n-  rtx xops[6];\n-  bool ok;\n+  if (TARGET_AVX512F\n+      && (<MODE>mode == V8DImode || TARGET_AVX512VL))\n+    ix86_fixup_binary_operands_no_copy (<CODE>, <MODE>mode, operands);\n+  else \n+    {\n+      enum rtx_code code;\n+      rtx xops[6];\n+      bool ok;\n \n-  xops[0] = operands[0];\n \n-  if (<CODE> == SMAX || <CODE> == UMAX)\n-    {\n-      xops[1] = operands[1];\n-      xops[2] = operands[2];\n-    }\n-  else\n-    {\n-      xops[1] = operands[2];\n-      xops[2] = operands[1];\n-    }\n+      xops[0] = operands[0];\n+\n+      if (<CODE> == SMAX || <CODE> == UMAX)\n+\t{\n+\t  xops[1] = operands[1];\n+\t  xops[2] = operands[2];\n+\t}\n+      else\n+\t{\n+\t  xops[1] = operands[2];\n+\t  xops[2] = operands[1];\n+\t}\n \n-  code = (<CODE> == UMAX || <CODE> == UMIN) ? GTU : GT;\n+      code = (<CODE> == UMAX || <CODE> == UMIN) ? GTU : GT;\n \n-  xops[3] = gen_rtx_fmt_ee (code, VOIDmode, operands[1], operands[2]);\n-  xops[4] = operands[1];\n-  xops[5] = operands[2];\n+      xops[3] = gen_rtx_fmt_ee (code, VOIDmode, operands[1], operands[2]);\n+      xops[4] = operands[1];\n+      xops[5] = operands[2];\n \n-  ok = ix86_expand_int_vcond (xops);\n-  gcc_assert (ok);\n-  DONE;\n+      ok = ix86_expand_int_vcond (xops);\n+      gcc_assert (ok);\n+      DONE;\n+    }\n })\n \n (define_expand \"<code><mode>3\""}]}