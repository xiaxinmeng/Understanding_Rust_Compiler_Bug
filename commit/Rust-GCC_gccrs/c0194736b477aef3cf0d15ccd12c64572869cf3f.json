{"sha": "c0194736b477aef3cf0d15ccd12c64572869cf3f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzAxOTQ3MzZiNDc3YWVmM2NmMGQxNWNjZDEyYzY0NTcyODY5Y2YzZg==", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@adacore.com", "date": "2021-01-15T18:36:22Z"}, "committer": {"name": "Alexandre Oliva", "email": "oliva@gnu.org", "date": "2021-01-15T18:36:22Z"}, "message": "gcc.dg/analyzer tests: use __builtin_alloca, not alloca.h\n\nUse __builtin_alloca.  Some systems don't have alloca.h or alloca.\n\n\nCo-Authored-By: Olivier Hainque <hainque@adacore.com>\n\nfor  gcc/testsuite/ChangeLog\n\n\t* gcc.dg/analyzer/alloca-leak.c: Drop alloca.h, use builtin.\n\t* gcc.dg/analyzer/data-model-1.c: Likewise.\n\t* gcc.dg/analyzer/malloc-1.c: Likewise.\n\t* gcc.dg/analyzer/malloc-paths-8.c: Likewise.", "tree": {"sha": "d0ef4928a92d406f051d72111ab32745deea192c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d0ef4928a92d406f051d72111ab32745deea192c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c0194736b477aef3cf0d15ccd12c64572869cf3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0194736b477aef3cf0d15ccd12c64572869cf3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0194736b477aef3cf0d15ccd12c64572869cf3f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0194736b477aef3cf0d15ccd12c64572869cf3f/comments", "author": null, "committer": null, "parents": [{"sha": "aaec739250b1b148f7db5aa86719fe76645efc06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aaec739250b1b148f7db5aa86719fe76645efc06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aaec739250b1b148f7db5aa86719fe76645efc06"}], "stats": {"total": 19, "additions": 7, "deletions": 12}, "files": [{"sha": "073f97e1ade32f03ad7ede23b72c4ce208ddc2c7", "filename": "gcc/testsuite/gcc.dg/analyzer/alloca-leak.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0194736b477aef3cf0d15ccd12c64572869cf3f/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Falloca-leak.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0194736b477aef3cf0d15ccd12c64572869cf3f/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Falloca-leak.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Falloca-leak.c?ref=c0194736b477aef3cf0d15ccd12c64572869cf3f", "patch": "@@ -1,10 +1,8 @@\n /* { dg-require-effective-target alloca } */\n \n-#include <alloca.h>\n-\n void *test (void)\n {\n-  void *ptr = alloca (64);\n+  void *ptr = __builtin_alloca (64);\n   return ptr;\n }\n /* TODO: warn about escaping alloca.  */"}, {"sha": "f6681b678af6181319481af33d31796ba158865e", "filename": "gcc/testsuite/gcc.dg/analyzer/data-model-1.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0194736b477aef3cf0d15ccd12c64572869cf3f/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fdata-model-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0194736b477aef3cf0d15ccd12c64572869cf3f/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fdata-model-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fdata-model-1.c?ref=c0194736b477aef3cf0d15ccd12c64572869cf3f", "patch": "@@ -3,7 +3,6 @@\n #include <stdlib.h>\n #include <string.h>\n #include <stdio.h>\n-#include <alloca.h>\n #include \"analyzer-decls.h\"\n \n struct foo\n@@ -140,8 +139,8 @@ void test_11 (void)\n \n void test_12 (void)\n {\n-  void *p = alloca (256);\n-  void *q = alloca (256);\n+  void *p = __builtin_alloca (256);\n+  void *q = __builtin_alloca (256);\n \n   /* alloca results should be unique.  */\n   __analyzer_eval (p == q); /* { dg-warning \"FALSE\" } */"}, {"sha": "448b8558ffe11fead57eb3d01ca82da881a289a4", "filename": "gcc/testsuite/gcc.dg/analyzer/malloc-1.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0194736b477aef3cf0d15ccd12c64572869cf3f/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmalloc-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0194736b477aef3cf0d15ccd12c64572869cf3f/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmalloc-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmalloc-1.c?ref=c0194736b477aef3cf0d15ccd12c64572869cf3f", "patch": "@@ -1,6 +1,5 @@\n /* { dg-require-effective-target alloca } */\n \n-#include <alloca.h>\n #include <stdlib.h>\n \n extern int foo (void);\n@@ -273,7 +272,7 @@ int *test_23a (int n)\n \n int test_24 (void)\n {\n-  void *ptr = alloca (sizeof (int)); /* { dg-message \"memory is allocated on the stack here\" } */\n+  void *ptr = __builtin_alloca (sizeof (int)); /* { dg-message \"memory is allocated on the stack here\" } */\n   free (ptr); /* { dg-warning \"'free' of memory allocated on the stack by 'alloca' \\\\('ptr'\\\\) will corrupt the heap \\\\\\[CWE-590\\\\\\]\" } */\n }\n "}, {"sha": "9a7c414920ce235eaa463681d0a11d495917df4c", "filename": "gcc/testsuite/gcc.dg/analyzer/malloc-paths-8.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0194736b477aef3cf0d15ccd12c64572869cf3f/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmalloc-paths-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0194736b477aef3cf0d15ccd12c64572869cf3f/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmalloc-paths-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmalloc-paths-8.c?ref=c0194736b477aef3cf0d15ccd12c64572869cf3f", "patch": "@@ -2,7 +2,6 @@\n /* { dg-require-effective-target alloca } */\n \n #include <stddef.h>\n-#include <alloca.h>\n #include <stdlib.h>\n \n extern void do_stuff (const void *);\n@@ -15,7 +14,7 @@ void test_1 (size_t sz)\n   if (sz >= LIMIT)\n     ptr = malloc (sz);\n   else\n-    ptr = alloca (sz);\n+    ptr = __builtin_alloca (sz);\n \n   do_stuff (ptr);\n \n@@ -27,7 +26,7 @@ void test_2 (size_t sz)\n {\n   void *ptr;\n   if (sz < LIMIT)\n-    ptr = alloca (sz);\n+    ptr = __builtin_alloca (sz);\n   else\n     ptr = malloc (sz);\n \n@@ -41,7 +40,7 @@ void test_3 (size_t sz)\n {\n   void *ptr;\n   if (sz <= LIMIT)\n-    ptr = alloca (sz); /* { dg-message \"memory is allocated on the stack here\" } */\n+    ptr = __builtin_alloca (sz); /* { dg-message \"memory is allocated on the stack here\" } */\n   else\n     ptr = malloc (sz);\n "}]}