{"sha": "f6bf436d9ab907d090823895abb7a2d5ba7ff50c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjZiZjQzNmQ5YWI5MDdkMDkwODIzODk1YWJiN2EyZDViYTdmZjUwYw==", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2021-06-01T10:46:37Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2021-06-01T10:47:57Z"}, "message": "Fortran/OpenMP: Support (parallel) master taskloop (simd) [PR99928]\n\n\tPR middle-end/99928\n\ngcc/fortran/ChangeLog:\n\n\t* dump-parse-tree.c (show_omp_node, show_code_node): Handle\n\t(parallel) master taskloop (simd).\n\t* frontend-passes.c (gfc_code_walker): Set in_omp_workshare\n\tto false for parallel master taskloop (simd).\n\t* gfortran.h (enum gfc_statement):\n\tAdd ST_OMP_(END_)(PARALLEL_)MASTER_TASKLOOP(_SIMD).\n\t(enum gfc_exec_op): EXEC_OMP_(PARALLEL_)MASTER_TASKLOOP(_SIMD).\n\t* match.h (gfc_match_omp_master_taskloop,\n\tgfc_match_omp_master_taskloop_simd,\n\tgfc_match_omp_parallel_master_taskloop,\n\tgfc_match_omp_parallel_master_taskloop_simd): New prototype.\n\t* openmp.c (gfc_match_omp_parallel_master_taskloop,\n\tgfc_match_omp_parallel_master_taskloop_simd,\n\tgfc_match_omp_master_taskloop,\n\tgfc_match_omp_master_taskloop_simd): New.\n\t(gfc_match_omp_taskloop_simd): Permit 'reduction' clause.\n\t(resolve_omp_clauses): Handle new combined directives; remove\n\tinscan-reduction check to reduce multiple errors; add\n\ttask-reduction error for 'taskloop simd'.\n\t(gfc_resolve_omp_parallel_blocks,\n\tresolve_omp_do, omp_code_to_statement,\n\tgfc_resolve_omp_directive): Handle new combined constructs.\n\t* parse.c (decode_omp_directive, next_statement,\n\tgfc_ascii_statement, parse_omp_do, parse_omp_structured_block,\n\tparse_executable): Likewise.\n\t* resolve.c (gfc_resolve_blocks, gfc_resolve_code): Likewise.\n\t* st.c (gfc_free_statement): Likewise.\n\t* trans.c (trans_code): Likewise.\n\t* trans-openmp.c (gfc_split_omp_clauses,\n\tgfc_trans_omp_directive): Likewise.\n\t(gfc_trans_omp_parallel_master): Move after gfc_trans_omp_master_taskloop;\n\thandle parallel master taskloop (simd) as well.\n\t(gfc_trans_omp_taskloop): Take gfc_exec_op as arg.\n\t(gfc_trans_omp_master_taskloop): New.\n\ngcc/testsuite/ChangeLog:\n\n\t* gfortran.dg/gomp/reduction5.f90: Remove dg-error; the issue is\n\tnow diagnosed with less error output.\n\t* gfortran.dg/gomp/scan-1.f90: Likewise.\n\t* gfortran.dg/gomp/pr99928-3.f90: New test.\n\t* gfortran.dg/gomp/taskloop-1.f90: New test.", "tree": {"sha": "3a378e9201640f8b0a3a961d22fb5763459fdc64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a378e9201640f8b0a3a961d22fb5763459fdc64"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6bf436d9ab907d090823895abb7a2d5ba7ff50c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6bf436d9ab907d090823895abb7a2d5ba7ff50c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6bf436d9ab907d090823895abb7a2d5ba7ff50c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6bf436d9ab907d090823895abb7a2d5ba7ff50c/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28daadc98094501175c9dfe4a985871fa6aa4f94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28daadc98094501175c9dfe4a985871fa6aa4f94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28daadc98094501175c9dfe4a985871fa6aa4f94"}], "stats": {"total": 589, "additions": 550, "deletions": 39}, "files": [{"sha": "0e7fe1cc3f30f7373e79573ccbb876e669f7f1e1", "filename": "gcc/fortran/dump-parse-tree.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6bf436d9ab907d090823895abb7a2d5ba7ff50c/gcc%2Ffortran%2Fdump-parse-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6bf436d9ab907d090823895abb7a2d5ba7ff50c/gcc%2Ffortran%2Fdump-parse-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdump-parse-tree.c?ref=f6bf436d9ab907d090823895abb7a2d5ba7ff50c", "patch": "@@ -1898,12 +1898,18 @@ show_omp_node (int level, gfc_code *c)\n     case EXEC_OMP_DO_SIMD: name = \"DO SIMD\"; break;\n     case EXEC_OMP_FLUSH: name = \"FLUSH\"; break;\n     case EXEC_OMP_MASTER: name = \"MASTER\"; break;\n+    case EXEC_OMP_MASTER_TASKLOOP: name = \"MASTER TASKLOOP\"; break;\n+    case EXEC_OMP_MASTER_TASKLOOP_SIMD: name = \"MASTER TASKLOOP SIMD\"; break;\n     case EXEC_OMP_ORDERED: name = \"ORDERED\"; break;\n     case EXEC_OMP_DEPOBJ: name = \"DEPOBJ\"; break;\n     case EXEC_OMP_PARALLEL: name = \"PARALLEL\"; break;\n     case EXEC_OMP_PARALLEL_DO: name = \"PARALLEL DO\"; break;\n     case EXEC_OMP_PARALLEL_DO_SIMD: name = \"PARALLEL DO SIMD\"; break;\n     case EXEC_OMP_PARALLEL_MASTER: name = \"PARALLEL MASTER\"; break;\n+    case EXEC_OMP_PARALLEL_MASTER_TASKLOOP:\n+      name = \"PARALLEL MASTER TASKLOOP\"; break;\n+    case EXEC_OMP_PARALLEL_MASTER_TASKLOOP_SIMD:\n+      name = \"PARALLEL MASTER TASKLOOP SIMD\"; break;\n     case EXEC_OMP_PARALLEL_SECTIONS: name = \"PARALLEL SECTIONS\"; break;\n     case EXEC_OMP_PARALLEL_WORKSHARE: name = \"PARALLEL WORKSHARE\"; break;\n     case EXEC_OMP_SCAN: name = \"SCAN\"; break;\n@@ -1976,6 +1982,8 @@ show_omp_node (int level, gfc_code *c)\n     case EXEC_OMP_PARALLEL_DO:\n     case EXEC_OMP_PARALLEL_DO_SIMD:\n     case EXEC_OMP_PARALLEL_MASTER:\n+    case EXEC_OMP_PARALLEL_MASTER_TASKLOOP:\n+    case EXEC_OMP_PARALLEL_MASTER_TASKLOOP_SIMD:\n     case EXEC_OMP_PARALLEL_SECTIONS:\n     case EXEC_OMP_PARALLEL_WORKSHARE:\n     case EXEC_OMP_SCAN:\n@@ -3184,11 +3192,15 @@ show_code_node (int level, gfc_code *c)\n     case EXEC_OMP_DO_SIMD:\n     case EXEC_OMP_FLUSH:\n     case EXEC_OMP_MASTER:\n+    case EXEC_OMP_MASTER_TASKLOOP:\n+    case EXEC_OMP_MASTER_TASKLOOP_SIMD:\n     case EXEC_OMP_ORDERED:\n     case EXEC_OMP_PARALLEL:\n     case EXEC_OMP_PARALLEL_DO:\n     case EXEC_OMP_PARALLEL_DO_SIMD:\n     case EXEC_OMP_PARALLEL_MASTER:\n+    case EXEC_OMP_PARALLEL_MASTER_TASKLOOP:\n+    case EXEC_OMP_PARALLEL_MASTER_TASKLOOP_SIMD:\n     case EXEC_OMP_PARALLEL_SECTIONS:\n     case EXEC_OMP_PARALLEL_WORKSHARE:\n     case EXEC_OMP_SCAN:"}, {"sha": "e3b1d1544aa20692830b5d45891a020f01865862", "filename": "gcc/fortran/frontend-passes.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6bf436d9ab907d090823895abb7a2d5ba7ff50c/gcc%2Ffortran%2Ffrontend-passes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6bf436d9ab907d090823895abb7a2d5ba7ff50c/gcc%2Ffortran%2Ffrontend-passes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ffrontend-passes.c?ref=f6bf436d9ab907d090823895abb7a2d5ba7ff50c", "patch": "@@ -5543,6 +5543,8 @@ gfc_code_walker (gfc_code **c, walk_code_fn_t codefn, walk_expr_fn_t exprfn,\n \t    case EXEC_OMP_PARALLEL_DO:\n \t    case EXEC_OMP_PARALLEL_DO_SIMD:\n \t    case EXEC_OMP_PARALLEL_MASTER:\n+\t    case EXEC_OMP_PARALLEL_MASTER_TASKLOOP:\n+\t    case EXEC_OMP_PARALLEL_MASTER_TASKLOOP_SIMD:\n \t    case EXEC_OMP_PARALLEL_SECTIONS:\n \n \t      in_omp_workshare = false;"}, {"sha": "2020ab4a503bddfde8e0f3504363d8bd34f8cb72", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6bf436d9ab907d090823895abb7a2d5ba7ff50c/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6bf436d9ab907d090823895abb7a2d5ba7ff50c/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=f6bf436d9ab907d090823895abb7a2d5ba7ff50c", "patch": "@@ -267,7 +267,11 @@ enum gfc_statement\n   ST_GET_FCN_CHARACTERISTICS, ST_LOCK, ST_UNLOCK, ST_EVENT_POST,\n   ST_EVENT_WAIT, ST_FAIL_IMAGE, ST_FORM_TEAM, ST_CHANGE_TEAM,\n   ST_END_TEAM, ST_SYNC_TEAM,  ST_OMP_PARALLEL_MASTER,\n-  ST_OMP_END_PARALLEL_MASTER, ST_NONE\n+  ST_OMP_END_PARALLEL_MASTER, ST_OMP_PARALLEL_MASTER_TASKLOOP,\n+  ST_OMP_END_PARALLEL_MASTER_TASKLOOP, ST_OMP_PARALLEL_MASTER_TASKLOOP_SIMD,\n+  ST_OMP_END_PARALLEL_MASTER_TASKLOOP_SIMD, ST_OMP_MASTER_TASKLOOP,\n+  ST_OMP_END_MASTER_TASKLOOP, ST_OMP_MASTER_TASKLOOP_SIMD,\n+  ST_OMP_END_MASTER_TASKLOOP_SIMD, ST_NONE\n };\n \n /* Types of interfaces that we can have.  Assignment interfaces are\n@@ -2711,7 +2715,9 @@ enum gfc_exec_op\n   EXEC_OMP_TARGET_PARALLEL, EXEC_OMP_TARGET_PARALLEL_DO,\n   EXEC_OMP_TARGET_PARALLEL_DO_SIMD, EXEC_OMP_TARGET_SIMD,\n   EXEC_OMP_TASKLOOP, EXEC_OMP_TASKLOOP_SIMD, EXEC_OMP_SCAN, EXEC_OMP_DEPOBJ,\n-  EXEC_OMP_PARALLEL_MASTER\n+  EXEC_OMP_PARALLEL_MASTER, EXEC_OMP_PARALLEL_MASTER_TASKLOOP,\n+  EXEC_OMP_PARALLEL_MASTER_TASKLOOP_SIMD, EXEC_OMP_MASTER_TASKLOOP,\n+  EXEC_OMP_MASTER_TASKLOOP_SIMD\n };\n \n typedef struct gfc_code"}, {"sha": "bcedf8ef8069d89b7cebe490c0729c9f31ed89d1", "filename": "gcc/fortran/match.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6bf436d9ab907d090823895abb7a2d5ba7ff50c/gcc%2Ffortran%2Fmatch.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6bf436d9ab907d090823895abb7a2d5ba7ff50c/gcc%2Ffortran%2Fmatch.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.h?ref=f6bf436d9ab907d090823895abb7a2d5ba7ff50c", "patch": "@@ -169,12 +169,16 @@ match gfc_match_omp_do (void);\n match gfc_match_omp_do_simd (void);\n match gfc_match_omp_flush (void);\n match gfc_match_omp_master (void);\n+match gfc_match_omp_master_taskloop (void);\n+match gfc_match_omp_master_taskloop_simd (void);\n match gfc_match_omp_ordered (void);\n match gfc_match_omp_ordered_depend (void);\n match gfc_match_omp_parallel (void);\n match gfc_match_omp_parallel_do (void);\n match gfc_match_omp_parallel_do_simd (void);\n match gfc_match_omp_parallel_master (void);\n+match gfc_match_omp_parallel_master_taskloop (void);\n+match gfc_match_omp_parallel_master_taskloop_simd (void);\n match gfc_match_omp_parallel_sections (void);\n match gfc_match_omp_parallel_workshare (void);\n match gfc_match_omp_requires (void);"}, {"sha": "9dba165f990f5d3c6a4b5b0cbe28ef41df6550e9", "filename": "gcc/fortran/openmp.c", "status": "modified", "additions": 79, "deletions": 6, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6bf436d9ab907d090823895abb7a2d5ba7ff50c/gcc%2Ffortran%2Fopenmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6bf436d9ab907d090823895abb7a2d5ba7ff50c/gcc%2Ffortran%2Fopenmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fopenmp.c?ref=f6bf436d9ab907d090823895abb7a2d5ba7ff50c", "patch": "@@ -3995,6 +3995,22 @@ gfc_match_omp_parallel_master (void)\n   return match_omp (EXEC_OMP_PARALLEL_MASTER, OMP_PARALLEL_CLAUSES);\n }\n \n+match\n+gfc_match_omp_parallel_master_taskloop (void)\n+{\n+  return match_omp (EXEC_OMP_PARALLEL_MASTER_TASKLOOP,\n+\t\t    (OMP_PARALLEL_CLAUSES | OMP_TASKLOOP_CLAUSES)\n+\t\t    & ~(omp_mask (OMP_CLAUSE_IN_REDUCTION)));\n+}\n+\n+match\n+gfc_match_omp_parallel_master_taskloop_simd (void)\n+{\n+  return match_omp (EXEC_OMP_PARALLEL_MASTER_TASKLOOP_SIMD,\n+\t\t    (OMP_PARALLEL_CLAUSES | OMP_TASKLOOP_CLAUSES\n+\t\t     | OMP_SIMD_CLAUSES)\n+\t\t    & ~(omp_mask (OMP_CLAUSE_IN_REDUCTION)));\n+}\n \n match\n gfc_match_omp_parallel_sections (void)\n@@ -4429,8 +4445,7 @@ match\n gfc_match_omp_taskloop_simd (void)\n {\n   return match_omp (EXEC_OMP_TASKLOOP_SIMD,\n-\t\t    (OMP_TASKLOOP_CLAUSES | OMP_SIMD_CLAUSES)\n-\t\t    & ~(omp_mask (OMP_CLAUSE_REDUCTION)));\n+\t\t    OMP_TASKLOOP_CLAUSES | OMP_SIMD_CLAUSES);\n }\n \n \n@@ -4533,6 +4548,18 @@ gfc_match_omp_master (void)\n   return MATCH_YES;\n }\n \n+match\n+gfc_match_omp_master_taskloop (void)\n+{\n+  return match_omp (EXEC_OMP_MASTER_TASKLOOP, OMP_TASKLOOP_CLAUSES);\n+}\n+\n+match\n+gfc_match_omp_master_taskloop_simd (void)\n+{\n+  return match_omp (EXEC_OMP_MASTER_TASKLOOP_SIMD,\n+\t\t    OMP_TASKLOOP_CLAUSES | OMP_SIMD_CLAUSES);\n+}\n \n match\n gfc_match_omp_ordered (void)\n@@ -5073,6 +5100,16 @@ resolve_omp_clauses (gfc_code *code, gfc_omp_clauses *omp_clauses,\n \t      ok = ifc == OMP_IF_PARALLEL || ifc == OMP_IF_SIMD;\n \t      break;\n \n+\t    case EXEC_OMP_PARALLEL_MASTER_TASKLOOP:\n+\t      ok = ifc == OMP_IF_PARALLEL || ifc == OMP_IF_TASKLOOP;\n+\t      break;\n+\n+\t    case EXEC_OMP_PARALLEL_MASTER_TASKLOOP_SIMD:\n+\t      ok = (ifc == OMP_IF_PARALLEL\n+\t\t    || ifc == OMP_IF_TASKLOOP\n+\t\t    || ifc == OMP_IF_SIMD);\n+\t      break;\n+\n \t    case EXEC_OMP_SIMD:\n \t    case EXEC_OMP_DO_SIMD:\n \t    case EXEC_OMP_DISTRIBUTE_SIMD:\n@@ -5085,10 +5122,12 @@ resolve_omp_clauses (gfc_code *code, gfc_omp_clauses *omp_clauses,\n \t      break;\n \n \t    case EXEC_OMP_TASKLOOP:\n+\t    case EXEC_OMP_MASTER_TASKLOOP:\n \t      ok = ifc == OMP_IF_TASKLOOP;\n \t      break;\n \n \t    case EXEC_OMP_TASKLOOP_SIMD:\n+\t    case EXEC_OMP_MASTER_TASKLOOP_SIMD:\n \t      ok = ifc == OMP_IF_TASKLOOP || ifc == OMP_IF_SIMD;\n \t      break;\n \n@@ -5848,11 +5887,16 @@ resolve_omp_clauses (gfc_code *code, gfc_omp_clauses *omp_clauses,\n \t\t\t     n->sym->name, name, &n->where);\n \t\tswitch (list)\n \t\t  {\n-\t\t  case OMP_LIST_REDUCTION_INSCAN:\n \t\t  case OMP_LIST_REDUCTION_TASK:\n-\t\t    if (code && (code->op == EXEC_OMP_TASKLOOP\n-\t\t\t\t || code->op == EXEC_OMP_TEAMS\n-\t\t\t\t || code->op == EXEC_OMP_TEAMS_DISTRIBUTE))\n+\t\t    if (code\n+\t\t\t&& (code->op == EXEC_OMP_TASKLOOP\n+\t\t\t    || code->op == EXEC_OMP_TASKLOOP_SIMD\n+\t\t\t    || code->op == EXEC_OMP_MASTER_TASKLOOP\n+\t\t\t    || code->op == EXEC_OMP_MASTER_TASKLOOP_SIMD\n+\t\t\t    || code->op == EXEC_OMP_PARALLEL_MASTER_TASKLOOP\n+\t\t\t    || code->op == EXEC_OMP_PARALLEL_MASTER_TASKLOOP_SIMD\n+\t\t\t    || code->op == EXEC_OMP_TEAMS\n+\t\t\t    || code->op == EXEC_OMP_TEAMS_DISTRIBUTE))\n \t\t      {\n \t\t\tgfc_error (\"Only DEFAULT permitted as reduction-\"\n \t\t\t\t   \"modifier in REDUCTION clause at %L\",\n@@ -5863,6 +5907,7 @@ resolve_omp_clauses (gfc_code *code, gfc_omp_clauses *omp_clauses,\n \t\t  case OMP_LIST_REDUCTION:\n \t\t  case OMP_LIST_IN_REDUCTION:\n \t\t  case OMP_LIST_TASK_REDUCTION:\n+\t\t  case OMP_LIST_REDUCTION_INSCAN:\n \t\t    switch (n->u.reduction_op)\n \t\t      {\n \t\t      case OMP_REDUCTION_PLUS:\n@@ -6766,6 +6811,10 @@ gfc_resolve_omp_parallel_blocks (gfc_code *code, gfc_namespace *ns)\n     case EXEC_OMP_DISTRIBUTE_PARALLEL_DO_SIMD:\n     case EXEC_OMP_PARALLEL_DO:\n     case EXEC_OMP_PARALLEL_DO_SIMD:\n+    case EXEC_OMP_PARALLEL_MASTER_TASKLOOP:\n+    case EXEC_OMP_PARALLEL_MASTER_TASKLOOP_SIMD:\n+    case EXEC_OMP_MASTER_TASKLOOP:\n+    case EXEC_OMP_MASTER_TASKLOOP_SIMD:\n     case EXEC_OMP_TARGET_PARALLEL_DO:\n     case EXEC_OMP_TARGET_PARALLEL_DO_SIMD:\n     case EXEC_OMP_TARGET_TEAMS_DISTRIBUTE:\n@@ -6909,6 +6958,18 @@ resolve_omp_do (gfc_code *code)\n       name = \"!$OMP PARALLEL DO SIMD\";\n       is_simd = true;\n       break;\n+    case EXEC_OMP_PARALLEL_MASTER_TASKLOOP:\n+      name = \"!$OMP PARALLEL MASTER TASKLOOP\";\n+      break;\n+    case EXEC_OMP_PARALLEL_MASTER_TASKLOOP_SIMD:\n+      name = \"!$OMP PARALLEL MASTER TASKLOOP SIMD\";\n+      is_simd = true;\n+      break;\n+    case EXEC_OMP_MASTER_TASKLOOP: name = \"!$OMP MASTER TASKLOOP\"; break;\n+    case EXEC_OMP_MASTER_TASKLOOP_SIMD:\n+      name = \"!$OMP MASTER TASKLOOP SIMD\";\n+      is_simd = true;\n+      break;\n     case EXEC_OMP_SIMD: name = \"!$OMP SIMD\"; is_simd = true; break;\n     case EXEC_OMP_TARGET_PARALLEL_DO: name = \"!$OMP TARGET PARALLEL DO\"; break;\n     case EXEC_OMP_TARGET_PARALLEL_DO_SIMD:\n@@ -7063,6 +7124,10 @@ omp_code_to_statement (gfc_code *code)\n       return ST_OMP_PARALLEL;\n     case EXEC_OMP_PARALLEL_MASTER:\n       return ST_OMP_PARALLEL_MASTER;\n+    case EXEC_OMP_PARALLEL_MASTER_TASKLOOP:\n+      return ST_OMP_PARALLEL_MASTER_TASKLOOP;\n+    case EXEC_OMP_PARALLEL_MASTER_TASKLOOP_SIMD:\n+      return ST_OMP_PARALLEL_MASTER_TASKLOOP_SIMD;\n     case EXEC_OMP_PARALLEL_SECTIONS:\n       return ST_OMP_PARALLEL_SECTIONS;\n     case EXEC_OMP_SECTIONS:\n@@ -7073,6 +7138,10 @@ omp_code_to_statement (gfc_code *code)\n       return ST_OMP_CRITICAL;\n     case EXEC_OMP_MASTER:\n       return ST_OMP_MASTER;\n+    case EXEC_OMP_MASTER_TASKLOOP:\n+      return ST_OMP_MASTER_TASKLOOP;\n+    case EXEC_OMP_MASTER_TASKLOOP_SIMD:\n+      return ST_OMP_MASTER_TASKLOOP_SIMD;\n     case EXEC_OMP_SINGLE:\n       return ST_OMP_SINGLE;\n     case EXEC_OMP_TASK:\n@@ -7561,6 +7630,10 @@ gfc_resolve_omp_directive (gfc_code *code, gfc_namespace *ns)\n     case EXEC_OMP_DO_SIMD:\n     case EXEC_OMP_PARALLEL_DO:\n     case EXEC_OMP_PARALLEL_DO_SIMD:\n+    case EXEC_OMP_PARALLEL_MASTER_TASKLOOP:\n+    case EXEC_OMP_PARALLEL_MASTER_TASKLOOP_SIMD:\n+    case EXEC_OMP_MASTER_TASKLOOP:\n+    case EXEC_OMP_MASTER_TASKLOOP_SIMD:\n     case EXEC_OMP_SIMD:\n     case EXEC_OMP_TARGET_PARALLEL_DO:\n     case EXEC_OMP_TARGET_PARALLEL_DO_SIMD:"}, {"sha": "c44e23ccb626ad0cc23c10ca6826d8b383b893f9", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 72, "deletions": 1, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6bf436d9ab907d090823895abb7a2d5ba7ff50c/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6bf436d9ab907d090823895abb7a2d5ba7ff50c/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=f6bf436d9ab907d090823895abb7a2d5ba7ff50c", "patch": "@@ -920,11 +920,19 @@ decode_omp_directive (void)\n       matchs (\"end do simd\", gfc_match_omp_end_nowait, ST_OMP_END_DO_SIMD);\n       matcho (\"end do\", gfc_match_omp_end_nowait, ST_OMP_END_DO);\n       matchs (\"end simd\", gfc_match_omp_eos_error, ST_OMP_END_SIMD);\n+      matcho (\"end master taskloop simd\", gfc_match_omp_eos_error,\n+\t      ST_OMP_END_MASTER_TASKLOOP_SIMD);\n+      matcho (\"end master taskloop\", gfc_match_omp_eos_error,\n+\t      ST_OMP_END_MASTER_TASKLOOP);\n       matcho (\"end master\", gfc_match_omp_eos_error, ST_OMP_END_MASTER);\n       matchs (\"end ordered\", gfc_match_omp_eos_error, ST_OMP_END_ORDERED);\n       matchs (\"end parallel do simd\", gfc_match_omp_eos_error,\n \t      ST_OMP_END_PARALLEL_DO_SIMD);\n       matcho (\"end parallel do\", gfc_match_omp_eos_error, ST_OMP_END_PARALLEL_DO);\n+      matcho (\"end parallel master taskloop simd\", gfc_match_omp_eos_error,\n+\t      ST_OMP_END_PARALLEL_MASTER_TASKLOOP_SIMD);\n+      matcho (\"end parallel master taskloop\", gfc_match_omp_eos_error,\n+\t      ST_OMP_END_PARALLEL_MASTER_TASKLOOP);\n       matcho (\"end parallel master\", gfc_match_omp_eos_error,\n \t      ST_OMP_END_PARALLEL_MASTER);\n       matcho (\"end parallel sections\", gfc_match_omp_eos_error,\n@@ -974,6 +982,10 @@ decode_omp_directive (void)\n       matcho (\"flush\", gfc_match_omp_flush, ST_OMP_FLUSH);\n       break;\n     case 'm':\n+      matcho (\"master taskloop simd\", gfc_match_omp_master_taskloop_simd,\n+\t      ST_OMP_MASTER_TASKLOOP_SIMD);\n+      matcho (\"master taskloop\", gfc_match_omp_master_taskloop,\n+\t      ST_OMP_MASTER_TASKLOOP);\n       matcho (\"master\", gfc_match_omp_master, ST_OMP_MASTER);\n       break;\n     case 'o':\n@@ -992,6 +1004,12 @@ decode_omp_directive (void)\n       matchs (\"parallel do simd\", gfc_match_omp_parallel_do_simd,\n \t      ST_OMP_PARALLEL_DO_SIMD);\n       matcho (\"parallel do\", gfc_match_omp_parallel_do, ST_OMP_PARALLEL_DO);\n+      matcho (\"parallel master taskloop simd\",\n+\t      gfc_match_omp_parallel_master_taskloop_simd,\n+\t      ST_OMP_PARALLEL_MASTER_TASKLOOP_SIMD);\n+      matcho (\"parallel master taskloop\",\n+\t      gfc_match_omp_parallel_master_taskloop,\n+\t      ST_OMP_PARALLEL_MASTER_TASKLOOP);\n       matcho (\"parallel master\", gfc_match_omp_parallel_master,\n \t      ST_OMP_PARALLEL_MASTER);\n       matcho (\"parallel sections\", gfc_match_omp_parallel_sections,\n@@ -1610,8 +1628,11 @@ next_statement (void)\n   case ST_IF_BLOCK: case ST_BLOCK: case ST_ASSOCIATE: \\\n   case ST_WHERE_BLOCK: case ST_SELECT_CASE: case ST_SELECT_TYPE: \\\n   case ST_SELECT_RANK: case ST_OMP_PARALLEL: case ST_OMP_PARALLEL_MASTER: \\\n+  case ST_OMP_PARALLEL_MASTER_TASKLOOP: \\\n+  case ST_OMP_PARALLEL_MASTER_TASKLOOP_SIMD: \\\n   case ST_OMP_PARALLEL_SECTIONS: case ST_OMP_SECTIONS: case ST_OMP_ORDERED: \\\n-  case ST_OMP_CRITICAL: case ST_OMP_MASTER: case ST_OMP_SINGLE: \\\n+  case ST_OMP_CRITICAL: case ST_OMP_MASTER: case ST_OMP_MASTER_TASKLOOP: \\\n+  case ST_OMP_MASTER_TASKLOOP_SIMD: case ST_OMP_SINGLE: \\\n   case ST_OMP_DO: case ST_OMP_PARALLEL_DO: case ST_OMP_ATOMIC: \\\n   case ST_OMP_WORKSHARE: case ST_OMP_PARALLEL_WORKSHARE: \\\n   case ST_OMP_TASK: case ST_OMP_TASKGROUP: case ST_OMP_SIMD: \\\n@@ -2341,6 +2362,12 @@ gfc_ascii_statement (gfc_statement st)\n     case ST_OMP_END_MASTER:\n       p = \"!$OMP END MASTER\";\n       break;\n+    case ST_OMP_END_MASTER_TASKLOOP:\n+      p = \"!$OMP END MASTER TASKLOOP\";\n+      break;\n+    case ST_OMP_END_MASTER_TASKLOOP_SIMD:\n+      p = \"!$OMP END MASTER TASKLOOP SIMD\";\n+      break;\n     case ST_OMP_END_ORDERED:\n       p = \"!$OMP END ORDERED\";\n       break;\n@@ -2356,6 +2383,12 @@ gfc_ascii_statement (gfc_statement st)\n     case ST_OMP_END_PARALLEL_MASTER:\n       p = \"!$OMP END PARALLEL MASTER\";\n       break;\n+    case ST_OMP_END_PARALLEL_MASTER_TASKLOOP:\n+      p = \"!$OMP END PARALLEL MASTER TASKLOOP\";\n+      break;\n+    case ST_OMP_END_PARALLEL_MASTER_TASKLOOP_SIMD:\n+      p = \"!$OMP END PARALLEL MASTER TASKLOOP SIMD\";\n+      break;\n     case ST_OMP_END_PARALLEL_SECTIONS:\n       p = \"!$OMP END PARALLEL SECTIONS\";\n       break;\n@@ -2437,6 +2470,12 @@ gfc_ascii_statement (gfc_statement st)\n     case ST_OMP_MASTER:\n       p = \"!$OMP MASTER\";\n       break;\n+    case ST_OMP_MASTER_TASKLOOP:\n+      p = \"!$OMP MASTER TASKLOOP\";\n+      break;\n+    case ST_OMP_MASTER_TASKLOOP_SIMD:\n+      p = \"!$OMP MASTER TASKLOOP SIMD\";\n+      break;\n     case ST_OMP_ORDERED:\n     case ST_OMP_ORDERED_DEPEND:\n       p = \"!$OMP ORDERED\";\n@@ -2453,6 +2492,12 @@ gfc_ascii_statement (gfc_statement st)\n     case ST_OMP_PARALLEL_MASTER:\n       p = \"!$OMP PARALLEL MASTER\";\n       break;\n+    case ST_OMP_PARALLEL_MASTER_TASKLOOP:\n+      p = \"!$OMP PARALLEL MASTER TASKLOOP\";\n+      break;\n+    case ST_OMP_PARALLEL_MASTER_TASKLOOP_SIMD:\n+      p = \"!$OMP PARALLEL MASTER TASKLOOP SIMD\";\n+      break;\n     case ST_OMP_PARALLEL_SECTIONS:\n       p = \"!$OMP PARALLEL SECTIONS\";\n       break;\n@@ -5025,6 +5070,16 @@ parse_omp_do (gfc_statement omp_st)\n       break;\n     case ST_OMP_TASKLOOP: omp_end_st = ST_OMP_END_TASKLOOP; break;\n     case ST_OMP_TASKLOOP_SIMD: omp_end_st = ST_OMP_END_TASKLOOP_SIMD; break;\n+    case ST_OMP_MASTER_TASKLOOP: omp_end_st = ST_OMP_END_MASTER_TASKLOOP; break;\n+    case ST_OMP_MASTER_TASKLOOP_SIMD:\n+      omp_end_st = ST_OMP_END_MASTER_TASKLOOP_SIMD;\n+      break;\n+    case ST_OMP_PARALLEL_MASTER_TASKLOOP:\n+      omp_end_st = ST_OMP_END_PARALLEL_MASTER_TASKLOOP;\n+      break;\n+    case ST_OMP_PARALLEL_MASTER_TASKLOOP_SIMD:\n+      omp_end_st = ST_OMP_END_PARALLEL_MASTER_TASKLOOP_SIMD;\n+      break;\n     case ST_OMP_TEAMS_DISTRIBUTE:\n       omp_end_st = ST_OMP_END_TEAMS_DISTRIBUTE;\n       break;\n@@ -5268,6 +5323,12 @@ parse_omp_structured_block (gfc_statement omp_st, bool workshare_stmts_only)\n     case ST_OMP_PARALLEL_MASTER:\n       omp_end_st = ST_OMP_END_PARALLEL_MASTER;\n       break;\n+    case ST_OMP_PARALLEL_MASTER_TASKLOOP:\n+      omp_end_st = ST_OMP_END_PARALLEL_MASTER_TASKLOOP;\n+      break;\n+    case ST_OMP_PARALLEL_MASTER_TASKLOOP_SIMD:\n+      omp_end_st = ST_OMP_END_PARALLEL_MASTER_TASKLOOP_SIMD;\n+      break;\n     case ST_OMP_PARALLEL_SECTIONS:\n       omp_end_st = ST_OMP_END_PARALLEL_SECTIONS;\n       break;\n@@ -5283,6 +5344,12 @@ parse_omp_structured_block (gfc_statement omp_st, bool workshare_stmts_only)\n     case ST_OMP_MASTER:\n       omp_end_st = ST_OMP_END_MASTER;\n       break;\n+    case ST_OMP_MASTER_TASKLOOP:\n+      omp_end_st = ST_OMP_END_MASTER_TASKLOOP;\n+      break;\n+    case ST_OMP_MASTER_TASKLOOP_SIMD:\n+      omp_end_st = ST_OMP_END_MASTER_TASKLOOP_SIMD;\n+      break;\n     case ST_OMP_SINGLE:\n       omp_end_st = ST_OMP_END_SINGLE;\n       break;\n@@ -5624,6 +5691,10 @@ parse_executable (gfc_statement st)\n \tcase ST_OMP_DO_SIMD:\n \tcase ST_OMP_PARALLEL_DO:\n \tcase ST_OMP_PARALLEL_DO_SIMD:\n+\tcase ST_OMP_PARALLEL_MASTER_TASKLOOP:\n+\tcase ST_OMP_PARALLEL_MASTER_TASKLOOP_SIMD:\n+\tcase ST_OMP_MASTER_TASKLOOP:\n+\tcase ST_OMP_MASTER_TASKLOOP_SIMD:\n \tcase ST_OMP_SIMD:\n \tcase ST_OMP_TARGET_PARALLEL_DO:\n \tcase ST_OMP_TARGET_PARALLEL_DO_SIMD:"}, {"sha": "fed6dce3d988aa9ac927967c9e4913fb934c0518", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6bf436d9ab907d090823895abb7a2d5ba7ff50c/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6bf436d9ab907d090823895abb7a2d5ba7ff50c/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=f6bf436d9ab907d090823895abb7a2d5ba7ff50c", "patch": "@@ -10798,11 +10798,15 @@ gfc_resolve_blocks (gfc_code *b, gfc_namespace *ns)\n \tcase EXEC_OMP_DO:\n \tcase EXEC_OMP_DO_SIMD:\n \tcase EXEC_OMP_MASTER:\n+\tcase EXEC_OMP_MASTER_TASKLOOP:\n+\tcase EXEC_OMP_MASTER_TASKLOOP_SIMD:\n \tcase EXEC_OMP_ORDERED:\n \tcase EXEC_OMP_PARALLEL:\n \tcase EXEC_OMP_PARALLEL_DO:\n \tcase EXEC_OMP_PARALLEL_DO_SIMD:\n \tcase EXEC_OMP_PARALLEL_MASTER:\n+\tcase EXEC_OMP_PARALLEL_MASTER_TASKLOOP:\n+\tcase EXEC_OMP_PARALLEL_MASTER_TASKLOOP_SIMD:\n \tcase EXEC_OMP_PARALLEL_SECTIONS:\n \tcase EXEC_OMP_PARALLEL_WORKSHARE:\n \tcase EXEC_OMP_SECTIONS:\n@@ -11765,6 +11769,8 @@ gfc_resolve_code (gfc_code *code, gfc_namespace *ns)\n \t    case EXEC_OMP_PARALLEL_DO:\n \t    case EXEC_OMP_PARALLEL_DO_SIMD:\n \t    case EXEC_OMP_PARALLEL_MASTER:\n+\t    case EXEC_OMP_PARALLEL_MASTER_TASKLOOP:\n+\t    case EXEC_OMP_PARALLEL_MASTER_TASKLOOP_SIMD:\n \t    case EXEC_OMP_PARALLEL_SECTIONS:\n \t    case EXEC_OMP_TARGET_PARALLEL:\n \t    case EXEC_OMP_TARGET_PARALLEL_DO:\n@@ -12214,6 +12220,8 @@ gfc_resolve_code (gfc_code *code, gfc_namespace *ns)\n \tcase EXEC_OMP_DO:\n \tcase EXEC_OMP_DO_SIMD:\n \tcase EXEC_OMP_MASTER:\n+\tcase EXEC_OMP_MASTER_TASKLOOP:\n+\tcase EXEC_OMP_MASTER_TASKLOOP_SIMD:\n \tcase EXEC_OMP_ORDERED:\n \tcase EXEC_OMP_SCAN:\n \tcase EXEC_OMP_SECTIONS:\n@@ -12252,6 +12260,8 @@ gfc_resolve_code (gfc_code *code, gfc_namespace *ns)\n \tcase EXEC_OMP_PARALLEL_DO:\n \tcase EXEC_OMP_PARALLEL_DO_SIMD:\n \tcase EXEC_OMP_PARALLEL_MASTER:\n+\tcase EXEC_OMP_PARALLEL_MASTER_TASKLOOP:\n+\tcase EXEC_OMP_PARALLEL_MASTER_TASKLOOP_SIMD:\n \tcase EXEC_OMP_PARALLEL_SECTIONS:\n \tcase EXEC_OMP_PARALLEL_WORKSHARE:\n \t  omp_workshare_save = omp_workshare_flag;"}, {"sha": "9f6fe49db026fe4bddb15f833a2decdaeba8ac93", "filename": "gcc/fortran/st.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6bf436d9ab907d090823895abb7a2d5ba7ff50c/gcc%2Ffortran%2Fst.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6bf436d9ab907d090823895abb7a2d5ba7ff50c/gcc%2Ffortran%2Fst.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fst.c?ref=f6bf436d9ab907d090823895abb7a2d5ba7ff50c", "patch": "@@ -226,11 +226,15 @@ gfc_free_statement (gfc_code *p)\n     case EXEC_OMP_DO:\n     case EXEC_OMP_DO_SIMD:\n     case EXEC_OMP_END_SINGLE:\n+    case EXEC_OMP_MASTER_TASKLOOP:\n+    case EXEC_OMP_MASTER_TASKLOOP_SIMD:\n     case EXEC_OMP_ORDERED:\n     case EXEC_OMP_PARALLEL:\n     case EXEC_OMP_PARALLEL_DO:\n     case EXEC_OMP_PARALLEL_DO_SIMD:\n     case EXEC_OMP_PARALLEL_MASTER:\n+    case EXEC_OMP_PARALLEL_MASTER_TASKLOOP:\n+    case EXEC_OMP_PARALLEL_MASTER_TASKLOOP_SIMD:\n     case EXEC_OMP_PARALLEL_SECTIONS:\n     case EXEC_OMP_PARALLEL_WORKSHARE:\n     case EXEC_OMP_SCAN:"}, {"sha": "2917d3d058bcbb7ff639df612932cadc290ede32", "filename": "gcc/fortran/trans-openmp.c", "status": "modified", "additions": 87, "deletions": 25, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6bf436d9ab907d090823895abb7a2d5ba7ff50c/gcc%2Ffortran%2Ftrans-openmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6bf436d9ab907d090823895abb7a2d5ba7ff50c/gcc%2Ffortran%2Ftrans-openmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-openmp.c?ref=f6bf436d9ab907d090823895abb7a2d5ba7ff50c", "patch": "@@ -5380,6 +5380,14 @@ gfc_split_omp_clauses (gfc_code *code,\n       mask = GFC_OMP_MASK_PARALLEL | GFC_OMP_MASK_DO | GFC_OMP_MASK_SIMD;\n       innermost = GFC_OMP_SPLIT_SIMD;\n       break;\n+    case EXEC_OMP_PARALLEL_MASTER_TASKLOOP:\n+      mask = GFC_OMP_MASK_PARALLEL | GFC_OMP_MASK_TASKLOOP | GFC_OMP_MASK_SIMD;\n+      innermost = GFC_OMP_SPLIT_TASKLOOP;\n+      break;\n+    case EXEC_OMP_PARALLEL_MASTER_TASKLOOP_SIMD:\n+      mask = GFC_OMP_MASK_PARALLEL | GFC_OMP_MASK_TASKLOOP | GFC_OMP_MASK_SIMD;\n+      innermost = GFC_OMP_SPLIT_SIMD;\n+      break;\n     case EXEC_OMP_SIMD:\n       innermost = GFC_OMP_SPLIT_SIMD;\n       break;\n@@ -5427,9 +5435,11 @@ gfc_split_omp_clauses (gfc_code *code,\n \t     | GFC_OMP_MASK_DISTRIBUTE | GFC_OMP_MASK_SIMD;\n       innermost = GFC_OMP_SPLIT_SIMD;\n       break;\n+    case EXEC_OMP_MASTER_TASKLOOP:\n     case EXEC_OMP_TASKLOOP:\n       innermost = GFC_OMP_SPLIT_TASKLOOP;\n       break;\n+    case EXEC_OMP_MASTER_TASKLOOP_SIMD:\n     case EXEC_OMP_TASKLOOP_SIMD:\n       mask = GFC_OMP_MASK_TASKLOOP | GFC_OMP_MASK_SIMD;\n       innermost = GFC_OMP_SPLIT_SIMD;\n@@ -5820,28 +5830,6 @@ gfc_trans_omp_parallel_do_simd (gfc_code *code, stmtblock_t *pblock,\n   return gfc_finish_block (&block);\n }\n \n-static tree\n-gfc_trans_omp_parallel_master (gfc_code *code)\n-{\n-  stmtblock_t block;\n-  tree stmt, omp_clauses;\n-\n-  gfc_start_block (&block);\n-  omp_clauses = gfc_trans_omp_clauses (&block, code->ext.omp_clauses,\n-\t\t\t\t       code->loc);\n-  pushlevel ();\n-  stmt = gfc_trans_omp_master (code);\n-  if (TREE_CODE (stmt) != BIND_EXPR)\n-    stmt = build3_v (BIND_EXPR, NULL, stmt, poplevel (1, 0));\n-  else\n-    poplevel (0, 0);\n-  stmt = build2_loc (gfc_get_location (&code->loc), OMP_PARALLEL,\n-\t\t     void_type_node, stmt, omp_clauses);\n-  OMP_PARALLEL_COMBINED (stmt) = 1;\n-  gfc_add_expr_to_block (&block, stmt);\n-  return gfc_finish_block (&block);\n-}\n-\n static tree\n gfc_trans_omp_parallel_sections (gfc_code *code)\n {\n@@ -6217,7 +6205,7 @@ gfc_trans_omp_target (gfc_code *code)\n }\n \n static tree\n-gfc_trans_omp_taskloop (gfc_code *code)\n+gfc_trans_omp_taskloop (gfc_code *code, gfc_exec_op op)\n {\n   stmtblock_t block;\n   gfc_omp_clauses clausesa[GFC_OMP_SPLIT_NUM];\n@@ -6229,7 +6217,7 @@ gfc_trans_omp_taskloop (gfc_code *code)\n     omp_clauses\n       = gfc_trans_omp_clauses (&block, &clausesa[GFC_OMP_SPLIT_TASKLOOP],\n \t\t\t       code->loc);\n-  switch (code->op)\n+  switch (op)\n     {\n     case EXEC_OMP_TASKLOOP:\n       /* This is handled in gfc_trans_omp_do.  */\n@@ -6258,6 +6246,75 @@ gfc_trans_omp_taskloop (gfc_code *code)\n   return gfc_finish_block (&block);\n }\n \n+static tree\n+gfc_trans_omp_master_taskloop (gfc_code *code, gfc_exec_op op)\n+{\n+  stmtblock_t block;\n+  tree stmt;\n+\n+  gfc_start_block (&block);\n+  pushlevel ();\n+  if (op == EXEC_OMP_MASTER_TASKLOOP_SIMD)\n+    stmt = gfc_trans_omp_taskloop (code, EXEC_OMP_TASKLOOP_SIMD);\n+  else\n+    {\n+      gfc_omp_clauses clausesa[GFC_OMP_SPLIT_NUM];\n+      gcc_assert (op == EXEC_OMP_MASTER_TASKLOOP);\n+      if (op != code->op)\n+\tgfc_split_omp_clauses (code, clausesa);\n+      stmt = gfc_trans_omp_do (code, EXEC_OMP_TASKLOOP, NULL,\n+\t\t\t       op != code->op\n+\t\t\t       ? &clausesa[GFC_OMP_SPLIT_TASKLOOP]\n+\t\t\t       : code->ext.omp_clauses, NULL);\n+    }\n+  if (TREE_CODE (stmt) != BIND_EXPR)\n+    stmt = build3_v (BIND_EXPR, NULL, stmt, poplevel (1, 0));\n+  else\n+    poplevel (0, 0);\n+  stmt = build1_v (OMP_MASTER, stmt);\n+  gfc_add_expr_to_block (&block, stmt);\n+  return gfc_finish_block (&block);\n+}\n+\n+static tree\n+gfc_trans_omp_parallel_master (gfc_code *code)\n+{\n+  stmtblock_t block;\n+  tree stmt, omp_clauses;\n+  gfc_omp_clauses clausesa[GFC_OMP_SPLIT_NUM];\n+\n+  if (code->op != EXEC_OMP_PARALLEL_MASTER)\n+    gfc_split_omp_clauses (code, clausesa);\n+\n+  gfc_start_block (&block);\n+  omp_clauses = gfc_trans_omp_clauses (&block,\n+\t\t\t\t       code->op == EXEC_OMP_PARALLEL_MASTER\n+\t\t\t\t       ? code->ext.omp_clauses\n+\t\t\t\t       : &clausesa[GFC_OMP_SPLIT_PARALLEL],\n+\t\t\t\t       code->loc);\n+  pushlevel ();\n+  if (code->op == EXEC_OMP_PARALLEL_MASTER)\n+    stmt = gfc_trans_omp_master (code);\n+  else\n+    {\n+      gcc_assert (code->op == EXEC_OMP_PARALLEL_MASTER_TASKLOOP\n+\t\t  || code->op == EXEC_OMP_PARALLEL_MASTER_TASKLOOP_SIMD);\n+      gfc_exec_op op = (code->op == EXEC_OMP_PARALLEL_MASTER_TASKLOOP\n+\t\t\t? EXEC_OMP_MASTER_TASKLOOP\n+\t\t\t: EXEC_OMP_MASTER_TASKLOOP_SIMD);\n+      stmt = gfc_trans_omp_master_taskloop (code, op);\n+    }\n+  if (TREE_CODE (stmt) != BIND_EXPR)\n+    stmt = build3_v (BIND_EXPR, NULL, stmt, poplevel (1, 0));\n+  else\n+    poplevel (0, 0);\n+  stmt = build2_loc (gfc_get_location (&code->loc), OMP_PARALLEL,\n+\t\t     void_type_node, stmt, omp_clauses);\n+  OMP_PARALLEL_COMBINED (stmt) = 1;\n+  gfc_add_expr_to_block (&block, stmt);\n+  return gfc_finish_block (&block);\n+}\n+\n static tree\n gfc_trans_omp_target_data (gfc_code *code)\n {\n@@ -6568,6 +6625,9 @@ gfc_trans_omp_directive (gfc_code *code)\n       return gfc_trans_omp_flush (code);\n     case EXEC_OMP_MASTER:\n       return gfc_trans_omp_master (code);\n+    case EXEC_OMP_MASTER_TASKLOOP:\n+    case EXEC_OMP_MASTER_TASKLOOP_SIMD:\n+      return gfc_trans_omp_master_taskloop (code, code->op);\n     case EXEC_OMP_ORDERED:\n       return gfc_trans_omp_ordered (code);\n     case EXEC_OMP_PARALLEL:\n@@ -6577,6 +6637,8 @@ gfc_trans_omp_directive (gfc_code *code)\n     case EXEC_OMP_PARALLEL_DO_SIMD:\n       return gfc_trans_omp_parallel_do_simd (code, NULL, NULL);\n     case EXEC_OMP_PARALLEL_MASTER:\n+    case EXEC_OMP_PARALLEL_MASTER_TASKLOOP:\n+    case EXEC_OMP_PARALLEL_MASTER_TASKLOOP_SIMD:\n       return gfc_trans_omp_parallel_master (code);\n     case EXEC_OMP_PARALLEL_SECTIONS:\n       return gfc_trans_omp_parallel_sections (code);\n@@ -6610,7 +6672,7 @@ gfc_trans_omp_directive (gfc_code *code)\n     case EXEC_OMP_TASKGROUP:\n       return gfc_trans_omp_taskgroup (code);\n     case EXEC_OMP_TASKLOOP_SIMD:\n-      return gfc_trans_omp_taskloop (code);\n+      return gfc_trans_omp_taskloop (code, code->op);\n     case EXEC_OMP_TASKWAIT:\n       return gfc_trans_omp_taskwait (code);\n     case EXEC_OMP_TASKYIELD:"}, {"sha": "cbbfcd9d1bc944af318808db39c7d86fcc726e3f", "filename": "gcc/fortran/trans.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6bf436d9ab907d090823895abb7a2d5ba7ff50c/gcc%2Ffortran%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6bf436d9ab907d090823895abb7a2d5ba7ff50c/gcc%2Ffortran%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.c?ref=f6bf436d9ab907d090823895abb7a2d5ba7ff50c", "patch": "@@ -2170,11 +2170,15 @@ trans_code (gfc_code * code, tree cond)\n \tcase EXEC_OMP_DO_SIMD:\n \tcase EXEC_OMP_FLUSH:\n \tcase EXEC_OMP_MASTER:\n+\tcase EXEC_OMP_MASTER_TASKLOOP:\n+\tcase EXEC_OMP_MASTER_TASKLOOP_SIMD:\n \tcase EXEC_OMP_ORDERED:\n \tcase EXEC_OMP_PARALLEL:\n \tcase EXEC_OMP_PARALLEL_DO:\n \tcase EXEC_OMP_PARALLEL_DO_SIMD:\n \tcase EXEC_OMP_PARALLEL_MASTER:\n+\tcase EXEC_OMP_PARALLEL_MASTER_TASKLOOP:\n+\tcase EXEC_OMP_PARALLEL_MASTER_TASKLOOP_SIMD:\n \tcase EXEC_OMP_PARALLEL_SECTIONS:\n \tcase EXEC_OMP_PARALLEL_WORKSHARE:\n \tcase EXEC_OMP_SECTIONS:"}, {"sha": "ce43dfb8ccdb1ac26c20214bbb11f1b7fb5c3037", "filename": "gcc/testsuite/gfortran.dg/gomp/pr99928-3.f90", "status": "added", "additions": 139, "deletions": 0, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6bf436d9ab907d090823895abb7a2d5ba7ff50c/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr99928-3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6bf436d9ab907d090823895abb7a2d5ba7ff50c/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr99928-3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr99928-3.f90?ref=f6bf436d9ab907d090823895abb7a2d5ba7ff50c", "patch": "@@ -0,0 +1,139 @@\n+! PR middle-end/99928\n+! { dg-do compile }\n+! { dg-options \"-fopenmp -fdump-tree-gimple\" }\n+\n+module m\n+  implicit none\n+  integer :: l00, l01, l02, l03, l04, l07, l08, l09\n+  integer :: l10, l11\n+\n+contains\n+\n+subroutine bar ()\n+  integer :: l05, l06\n+  integer :: i\n+  l05 = 0; l06 = 0\n+  ! { dg-final { scan-tree-dump \"omp for\\[^\\n\\r]*firstprivate\\\\(l00\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp for\\[^\\n\\r]*lastprivate\\\\(l00\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump-not \"omp simd\\[^\\n\\r]*firstprivate\\\\(l00\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(l00\\\\)\" \"gimple\" } }\n+  !$omp do simd firstprivate (l00) lastprivate (l00)\n+  do i = 1, 64\n+    l00 = i\n+  end do\n+  ! { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*firstprivate\\\\(l01\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*lastprivate\\\\(l01\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*firstprivate\\\\(l01\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*lastprivate\\\\(l01\\\\)\" \"gimple\" } }\n+  !$omp master taskloop firstprivate (l01) lastprivate (l01)\n+  do i = 1, 64\n+    l01 = i\n+  end do\n+  ! { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*firstprivate\\\\(l02\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*lastprivate\\\\(l02\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*firstprivate\\\\(l02\\\\)\" \"gimple\" { xfail *-*-* } } }\n+  ! { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*lastprivate\\\\(l02\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump-not \"omp simd\\[^\\n\\r]*firstprivate\\\\(l02\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(l02\\\\)\" \"gimple\" } }\n+  !$omp master taskloop simd firstprivate (l02) lastprivate (l02)\n+  do i = 1, 64\n+    l02 = i\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*firstprivate\\\\(l03\\\\)\" \"gimple\" } } ! FIXME: This should be on for instead. \n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*lastprivate\\\\(l03\\\\)\" \"gimple\" } } ! FIXME: This should be on for instead. \n+  ! { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*firstprivate\\\\(l03\\\\)\" \"gimple\" } } ! FIXME. \n+  ! { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*lastprivate\\\\(l03\\\\)\" \"gimple\" } } ! FIXME. \n+  !$omp parallel do firstprivate (l03) lastprivate (l03)\n+  do i = 1, 64\n+    l03 = i\n+  end do\n+  !$omp end parallel do\n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*firstprivate\\\\(l04\\\\)\" \"gimple\" } } ! FIXME: This should be on for instead. \n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*lastprivate\\\\(l04\\\\)\" \"gimple\" } } ! FIXME: This should be on for instead. \n+  ! { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*firstprivate\\\\(l04\\\\)\" \"gimple\" } } ! FIXME. \n+  ! { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*lastprivate\\\\(l04\\\\)\" \"gimple\" } } ! FIXME. \n+  ! { dg-final { scan-tree-dump-not \"omp simd\\[^\\n\\r]*firstprivate\\\\(l04\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(l04\\\\)\" \"gimple\" } }\n+  !$omp parallel do simd firstprivate (l04) lastprivate (l04)\n+  do i = 1, 64\n+    l04 = i\n+  end do\n+  !$omp end parallel do simd\n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(l05\\\\)\" \"gimple\" { xfail *-*-* } } }\n+  ! { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*firstprivate\\\\(l05\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*lastprivate\\\\(l05\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*firstprivate\\\\(l05\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*lastprivate\\\\(l05\\\\)\" \"gimple\" { xfail *-*-* } } }\n+  !$omp parallel master taskloop firstprivate (l05) lastprivate (l05)\n+  do i = 1, 64\n+    l05 = i\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(l06\\\\)\" \"gimple\" { xfail *-*-* } } }\n+  ! { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*firstprivate\\\\(l06\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump-not \"omp master\\[^\\n\\r]*lastprivate\\\\(l06\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*firstprivate\\\\(l06\\\\)\" \"gimple\" { xfail *-*-* } } }\n+  ! { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*lastprivate\\\\(l06\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump-not \"omp simd\\[^\\n\\r]*firstprivate\\\\(l06\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(l06\\\\)\" \"gimple\" } }\n+  !$omp parallel master taskloop simd firstprivate (l06) lastprivate (l06)\n+  do i = 1, 64\n+    l06 = i\n+  end do\n+  !$omp end parallel master taskloop simd\n+  ! FIXME: OpenMP 5.0/5.1 broken here, conceptually it should be shared on parallel and\n+  ! firstprivate+lastprivate on sections, in GCC implementation we put firstprivate+lastprivate\n+  ! on parallel for historic reasons, but OpenMP 5.0/5.1 mistakenly say firstprivate\n+  ! should be on parallel and lastprivate on sections. \n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*firstprivate\\\\(l07\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*lastprivate\\\\(l07\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump-not \"omp sections\\[^\\n\\r]*firstprivate\\\\(l07\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump-not \"omp sections\\[^\\n\\r]*lastprivate\\\\(l07\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump-not \"omp section \\[^\\n\\r]*firstprivate\\\\(l07\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump-not \"omp section \\[^\\n\\r]*lastprivate\\\\(l07\\\\)\" \"gimple\" } }\n+  !$omp parallel sections firstprivate (l07) lastprivate (l07)\n+    l07 = 1\n+    !$omp section\n+    l07 = 2\n+  !$omp end parallel sections\n+  ! { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:l08\" \"gimple\" { xfail *-*-* } } }\n+  ! { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(l08\\\\)\" \"gimple\" { xfail *-*-* } } }\n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*firstprivate\\\\(l08\\\\)\" \"gimple\" } } ! FIXME: This should be on for instead. \n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*lastprivate\\\\(l08\\\\)\" \"gimple\" } } ! FIXME: This should be on for instead. \n+  ! { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*firstprivate\\\\(l08\\\\)\" \"gimple\" } } ! FIXME. \n+  ! { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*lastprivate\\\\(l08\\\\)\" \"gimple\" } } ! FIXME. \n+  !$omp target parallel do firstprivate (l08) lastprivate (l08)\n+  do i = 1, 64\n+    l08 = i\n+  end do\n+  !$omp end target parallel do\n+  ! { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:l09\" \"gimple\" { xfail *-*-* } } }\n+  ! { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(l09\\\\)\" \"gimple\" { xfail *-*-* } } }\n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*firstprivate\\\\(l09\\\\)\" \"gimple\" } } ! FIXME: This should be on for instead. \n+  ! { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*lastprivate\\\\(l09\\\\)\" \"gimple\" } } ! FIXME: This should be on for instead. \n+  ! { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*firstprivate\\\\(l09\\\\)\" \"gimple\" } } ! FIXME. \n+  ! { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*lastprivate\\\\(l09\\\\)\" \"gimple\" } } ! FIXME. \n+  ! { dg-final { scan-tree-dump-not \"omp simd\\[^\\n\\r]*firstprivate\\\\(l09\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(l09\\\\)\" \"gimple\" } }\n+  !$omp target parallel do simd firstprivate (l09) lastprivate (l09)\n+  do i = 1, 64\n+    l09 = i\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:l10\" \"gimple\" { xfail *-*-* } } }\n+  ! { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(l10\\\\)\" \"gimple\" { xfail *-*-* } } }\n+  ! { dg-final { scan-tree-dump-not \"omp simd\\[^\\n\\r]*firstprivate\\\\(l10\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(l10\\\\)\" \"gimple\" } }\n+  !$omp target simd firstprivate (l10) lastprivate (l10)\n+  do i = 1, 64\n+    l10 = i\n+  end do\n+  ! { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*firstprivate\\\\(l11\\\\)\" \"gimple\" { xfail *-*-* } } }\n+  ! { dg-final { scan-tree-dump \"omp taskloop\\[^\\n\\r]*lastprivate\\\\(l11\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump-not \"omp simd\\[^\\n\\r]*firstprivate\\\\(l11\\\\)\" \"gimple\" } }\n+  ! { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*lastprivate\\\\(l11\\\\)\" \"gimple\" } }\n+ !$omp taskloop simd firstprivate (l11) lastprivate (l11)\n+  do i = 1, 64\n+    l11 = i\n+  end do\n+  !$omp end taskloop simd\n+end\n+end module m"}, {"sha": "44f89d84c786e5c3a8b7c5b6c5f18bb42f54f09e", "filename": "gcc/testsuite/gfortran.dg/gomp/reduction5.f90", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6bf436d9ab907d090823895abb7a2d5ba7ff50c/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Freduction5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6bf436d9ab907d090823895abb7a2d5ba7ff50c/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Freduction5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Freduction5.f90?ref=f6bf436d9ab907d090823895abb7a2d5ba7ff50c", "patch": "@@ -22,8 +22,7 @@\n \n !$omp taskloop reduction(inscan,+:a) in_reduction(+:b) ! { dg-error \"'inscan' REDUCTION clause on construct other than DO, SIMD, DO SIMD, PARALLEL DO, PARALLEL DO SIMD\" }\n   ! { dg-error \"34: With INSCAN at .1., expected loop body with ..OMP SCAN between two structured-block-sequences\" \"\" { target *-*-* } .-1 }\n-  ! { dg-error \"Only DEFAULT permitted as reduction-modifier in REDUCTION clause\" \"\" { target *-*-* } .-2 }\n-  ! { dg-error \"'inscan' and non-'inscan' 'reduction' clauses on the same construct\" \"\" { target *-*-* } .-3 }\n+  ! { dg-error \"'inscan' and non-'inscan' 'reduction' clauses on the same construct\" \"\" { target *-*-* } .-2 }\n do i=1,10\n   a = a + 1\n end do\n@@ -34,7 +33,6 @@\n end do\n \n !$omp teams reduction(inscan,+:b) ! { dg-error \"'inscan' REDUCTION clause on construct other than DO, SIMD, DO SIMD, PARALLEL DO, PARALLEL DO SIMD\" }\n-  ! { dg-error \"Only DEFAULT permitted as reduction-modifier in REDUCTION clause\" \"\" { target *-*-* } .-1 }\n   a = a + 1\n !$omp end teams\n "}, {"sha": "61d89259c489003059dbf433388b75a8a1f0d8bf", "filename": "gcc/testsuite/gfortran.dg/gomp/scan-1.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6bf436d9ab907d090823895abb7a2d5ba7ff50c/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fscan-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6bf436d9ab907d090823895abb7a2d5ba7ff50c/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fscan-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fscan-1.f90?ref=f6bf436d9ab907d090823895abb7a2d5ba7ff50c", "patch": "@@ -100,7 +100,7 @@ subroutine f3 (c, d)\n   use m\n   implicit none\n   integer i, c(64), d(64)\n-  !$omp teams reduction (inscan, +: a)  ! { dg-error \"Only DEFAULT permitted as reduction-modifier in REDUCTION clause at\" }\n+  !$omp teams reduction (inscan, +: a)\n     ! { dg-error \"'inscan' REDUCTION clause on construct other than DO, SIMD, DO SIMD, PARALLEL DO, PARALLEL DO SIMD\" \"\" { target *-*-* } .-1 }\n     ! ...\n   !$omp end teams\n@@ -135,7 +135,7 @@ subroutine f4 (c, d)\n   use m\n   implicit none\n   integer i, c(64), d(64)\n-  !$omp taskloop reduction (inscan, +: a)  ! { dg-error \"Only DEFAULT permitted as reduction-modifier in REDUCTION clause\" }\n+  !$omp taskloop reduction (inscan, +: a)\n   ! { dg-error \"'inscan' REDUCTION clause on construct other than DO, SIMD, DO SIMD, PARALLEL DO, PARALLEL DO SIMD\" \"\" { target *-*-* } .-1 }\n   do i = 1, 64\n     d(i) = a"}, {"sha": "7060a7a5c9674b30b4932b1423aa392a421dcded", "filename": "gcc/testsuite/gfortran.dg/gomp/taskloop-1.f90", "status": "added", "additions": 126, "deletions": 0, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6bf436d9ab907d090823895abb7a2d5ba7ff50c/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Ftaskloop-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6bf436d9ab907d090823895abb7a2d5ba7ff50c/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Ftaskloop-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Ftaskloop-1.f90?ref=f6bf436d9ab907d090823895abb7a2d5ba7ff50c", "patch": "@@ -0,0 +1,126 @@\n+module m\n+  implicit none\n+  integer :: t\n+  !$omp threadprivate (t)\n+  integer :: f, l, ll, r, r2\n+  !$omp declare target to(f, l, ll, r, r2)\n+end module m\n+\n+subroutine foo(fi, p, pp, g, s, nta, nth, ntm, i1, i2, i3, q)\n+  use m\n+  implicit none\n+  integer, value :: p, pp, g, s, nta, nth, ntm\n+  logical, value :: fi, i1, i2, i3\n+  integer, pointer :: q(:)\n+  integer :: i\n+\n+  !$omp taskgroup task_reduction(+:r2) !allocate (r2)\n+  !$omp taskloop simd &\n+  !$omp& private (p) firstprivate (f) lastprivate (l) shared (s) default(shared) grainsize (g) collapse(1) untied if(taskloop: i1) &\n+  !$omp& if(simd: i2) final(fi) mergeable priority (pp) &\n+  !$omp& safelen(8) simdlen(4) linear(ll: 1) aligned(q: 32) reduction(default, +:r) in_reduction(+:r2) nontemporal(ntm) &\n+  !$omp& order(concurrent) !allocate (f)\n+  do i = 1, 64\n+    ll = ll + 1\n+  end do\n+  !$omp end taskgroup\n+\n+  !$omp taskgroup task_reduction(+:r) !allocate (r)\n+  !$omp taskloop simd &\n+  !$omp& private (p) firstprivate (f) lastprivate (l) shared (s) default(shared) grainsize (g) &\n+  !$omp& collapse(1) untied if(i1) final(fi) mergeable nogroup priority (pp) &\n+  !$omp& safelen(8) simdlen(4) linear(ll: 1) aligned(q: 32) in_reduction(+:r) nontemporal(ntm) &\n+  !$omp& order(concurrent) !allocate (f)\n+  do i = 1, 64\n+    ll = ll + 1\n+  end do\n+  !$omp taskwait\n+\n+  !$omp taskloop simd &\n+  !$omp& private (p) firstprivate (f) lastprivate (l) shared (s) default(shared) num_tasks (nta) &\n+  !$omp& collapse(1) if(taskloop: i1) final(fi) priority (pp) &\n+  !$omp& safelen(8) simdlen(4) linear(ll: 1) aligned(q: 32) reduction(+:r) if (simd: i3) nontemporal(ntm) &\n+  !$omp& order(concurrent) !allocate (f)\n+  do i = 1, 64\n+    ll = ll + 1\n+  end do\n+  !$omp end taskgroup\n+\n+  !$omp taskgroup task_reduction (+:r2) !allocate (r2)\n+  !$omp master taskloop &\n+  !$omp& private (p) firstprivate (f) lastprivate (l) shared (s) default(shared) grainsize (g) &\n+  !$omp& collapse(1) untied if(taskloop: i1) final(fi) mergeable priority (pp) &\n+  !$omp& reduction(default, +:r) in_reduction(+:r2) !allocate (f)\n+  do i = 1, 64\n+    ll = ll + 1\n+  end do\n+  !$omp end taskgroup\n+\n+  !$omp taskgroup task_reduction (+:r2) !allocate (r2)\n+  !$omp master taskloop simd &\n+  !$omp& private (p) firstprivate (f) lastprivate (l) shared (s) default(shared) grainsize (g) &\n+  !$omp& collapse(1) untied if(taskloop: i1) if(simd: i2) final(fi) mergeable priority (pp) &\n+  !$omp& safelen(8) simdlen(4) linear(ll: 1) aligned(q: 32) reduction(default, +:r) in_reduction(+:r2) nontemporal(ntm) &\n+  !$omp& order(concurrent) !allocate (f)\n+  do i = 1, 64\n+    ll = ll + 1\n+  end do\n+  !$omp end taskgroup\n+\n+  !$omp parallel master taskloop &\n+  !$omp& private (p) firstprivate (f) lastprivate (l) shared (s) default(shared) grainsize (g) &\n+  !$omp& collapse(1) untied if(taskloop: i1) final(fi) mergeable priority (pp) &\n+  !$omp& reduction(default, +:r) if (parallel: i2) num_threads (nth) proc_bind(spread) copyin(t) !allocate (f)\n+  do i = 1, 64\n+    ll = ll + 1\n+  end do\n+\n+  !$omp parallel master taskloop simd &\n+  !$omp& private (p) firstprivate (f) lastprivate (l) shared (s) default(shared) grainsize (g) collapse(1) &\n+  !$omp& untied if(taskloop: i1) if(simd: i2) final(fi) mergeable priority (pp) &\n+  !$omp& safelen(8) simdlen(4) linear(ll: 1) aligned(q: 32) reduction(default, +:r) nontemporal(ntm) &\n+  !$omp& if (parallel: i2) num_threads (nth) proc_bind(spread) copyin(t) &\n+  !$omp& order(concurrent) !allocate (f)\n+  do i = 1, 64\n+    ll = ll + 1\n+  end do\n+\n+  !$omp taskgroup task_reduction (+:r2) !allocate (r2)\n+  !$omp master taskloop &\n+  !$omp& private (p) firstprivate (f) lastprivate (l) shared (s) default(shared) num_tasks (nta) &\n+  !$omp& collapse(1) untied if(i1) final(fi) mergeable priority (pp) &\n+  !$omp& reduction(default, +:r) in_reduction(+:r2)\n+  do i = 1, 64\n+    ll = ll + 1\n+  end do\n+  !$omp end taskgroup\n+\n+  !$omp taskgroup task_reduction (+:r2) !allocate (r2)\n+  !$omp master taskloop simd &\n+  !$omp& private (p) firstprivate (f) lastprivate (l) shared (s) default(shared) num_tasks (nta) &\n+  !$omp& collapse(1) untied if(i1) final(fi) mergeable priority (pp) &\n+  !$omp& safelen(8) simdlen(4) linear(ll: 1) aligned(q: 32) reduction(default, +:r) in_reduction(+:r2) nontemporal(ntm) &\n+  !$omp& order(concurrent) !allocate (f)\n+  do i = 1, 64\n+    ll = ll + 1\n+  end do\n+  !$omp end taskgroup\n+\n+  !$omp parallel master taskloop &\n+  !$omp& private (p) firstprivate (f) lastprivate (l) shared (s) default(shared) num_tasks (nta) &\n+  !$omp& collapse(1) untied if(i1) final(fi) mergeable priority (pp) &\n+  !$omp& reduction(default, +:r) num_threads (nth) proc_bind(spread) copyin(t) !allocate (f)\n+  do i = 1, 64\n+    ll = ll + 1\n+  end do\n+\n+  !$omp parallel master taskloop simd &\n+  !$omp& private (p) firstprivate (f) lastprivate (l) shared (s) default(shared) num_tasks (nta) &\n+  !$omp& collapse(1) untied if(i1) final(fi) mergeable priority (pp) &\n+  !$omp& safelen(8) simdlen(4) linear(ll: 1) aligned(q: 32) reduction(default, +:r) &\n+  !$omp& nontemporal(ntm) num_threads (nth) proc_bind(spread) copyin(t) &\n+  !$omp& order(concurrent) !allocate (f)\n+  do i = 1, 64\n+    ll = ll + 1\n+  end do\n+end"}]}