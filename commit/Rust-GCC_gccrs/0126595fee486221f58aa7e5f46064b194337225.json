{"sha": "0126595fee486221f58aa7e5f46064b194337225", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDEyNjU5NWZlZTQ4NjIyMWY1OGFhN2U1ZjQ2MDY0YjE5NDMzNzIyNQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2011-05-11T20:08:54Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2011-05-11T20:08:54Z"}, "message": "re PR fortran/48889 (f951: internal compiler error: in gfc_is_constant_expr, at fortran/expr.c:906)\n\n2011-05-11  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/48889\n        * expr.c (gfc_is_constant_expr): Use e->value.function.esym\n        instead of e->symtree->n.sym, if available.\n\n2011-05-11  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/48889\n        * gfortran.dg/generic_24.f90: New.\n\nFrom-SVN: r173674", "tree": {"sha": "99daf63eb676eda68861023c76d9a9abd2e68471", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/99daf63eb676eda68861023c76d9a9abd2e68471"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0126595fee486221f58aa7e5f46064b194337225", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0126595fee486221f58aa7e5f46064b194337225", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0126595fee486221f58aa7e5f46064b194337225", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0126595fee486221f58aa7e5f46064b194337225/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8da1c70b570bc423fd2ea011398a69714ecd8b7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8da1c70b570bc423fd2ea011398a69714ecd8b7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8da1c70b570bc423fd2ea011398a69714ecd8b7a"}], "stats": {"total": 125, "additions": 120, "deletions": 5}, "files": [{"sha": "f2dfe3f43ad470c53bba6b7288a3bf394235d5b9", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0126595fee486221f58aa7e5f46064b194337225/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0126595fee486221f58aa7e5f46064b194337225/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=0126595fee486221f58aa7e5f46064b194337225", "patch": "@@ -1,3 +1,9 @@\n+2011-05-11  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/48889\n+\t* expr.c (gfc_is_constant_expr): Use e->value.function.esym\n+\tinstead of e->symtree->n.sym, if available.\n+\n 2011-05-07  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* f95-lang.c (global_bindings_p): Return bool and simplify."}, {"sha": "f881bb1dbff98eb9ca012c1ce27575adc3936af1", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0126595fee486221f58aa7e5f46064b194337225/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0126595fee486221f58aa7e5f46064b194337225/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=0126595fee486221f58aa7e5f46064b194337225", "patch": "@@ -893,6 +893,9 @@ gfc_is_constant_expr (gfc_expr *e)\n     case EXPR_FUNCTION:\n     case EXPR_PPC:\n     case EXPR_COMPCALL:\n+      gcc_assert (e->symtree || e->value.function.esym\n+\t\t  || e->value.function.isym);\n+\n       /* Call to intrinsic with at least one argument.  */\n       if (e->value.function.isym && e->value.function.actual)\n \t{\n@@ -901,13 +904,14 @@ gfc_is_constant_expr (gfc_expr *e)\n \t      return 0;\n \t}\n \n-      /* Make sure we have a symbol.  */\n-      gcc_assert (e->symtree);\n-\n-      sym = e->symtree->n.sym;\n-    \n       /* Specification functions are constant.  */\n       /* F95, 7.1.6.2; F2003, 7.1.7  */\n+      sym = NULL;\n+      if (e->symtree)\n+\tsym = e->symtree->n.sym;\n+      if (e->value.function.esym)\n+\tsym = e->value.function.esym;\n+\n       if (sym\n \t  && sym->attr.function\n \t  && sym->attr.pure"}, {"sha": "79919a2c5ce0d7cce615465d0fcbf5b3ad3283c8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0126595fee486221f58aa7e5f46064b194337225/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0126595fee486221f58aa7e5f46064b194337225/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0126595fee486221f58aa7e5f46064b194337225", "patch": "@@ -1,3 +1,8 @@\n+2011-05-11  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/48889\n+\t* gfortran.dg/generic_24.f90: New.\n+\n 2011-05-11  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/15256"}, {"sha": "2388722b55b43d918700443708cb58e26f2e12d8", "filename": "gcc/testsuite/gfortran.dg/generic_24.f90", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0126595fee486221f58aa7e5f46064b194337225/gcc%2Ftestsuite%2Fgfortran.dg%2Fgeneric_24.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0126595fee486221f58aa7e5f46064b194337225/gcc%2Ftestsuite%2Fgfortran.dg%2Fgeneric_24.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgeneric_24.f90?ref=0126595fee486221f58aa7e5f46064b194337225", "patch": "@@ -0,0 +1,100 @@\n+! { dg-do compile }\n+!\n+! PR fortran/48889\n+!\n+! Thanks for\n+! reporting to Lawrence Mitchell\n+! for the test case to David Ham\n+!\n+module sparse_tools\n+  implicit none\n+  private\n+  \n+  type csr_foo\n+     integer, dimension(:), pointer :: colm=>null()\n+  end type csr_foo\n+  \n+  type block_csr_matrix\n+     type(csr_foo) :: sparsity\n+  end type block_csr_matrix\n+\n+  interface attach_block\n+     module procedure block_csr_attach_block\n+  end interface\n+\n+  interface size\n+     module procedure  sparsity_size \n+  end interface\n+  \n+  public :: size, attach_block\n+contains\n+  subroutine block_csr_attach_block(matrix, val)\n+    type(block_csr_matrix), intent(inout) :: matrix\n+    real, dimension(size(matrix%sparsity%colm)), intent(in), target :: val\n+  end subroutine block_csr_attach_block\n+\n+  pure function sparsity_size(sparsity, dim)\n+    integer :: sparsity_size\n+    type(csr_foo), intent(in) :: sparsity\n+    integer, optional, intent(in) :: dim\n+  end function sparsity_size\n+end module sparse_tools\n+\n+module global_numbering\n+  use sparse_tools\n+  implicit none\n+  \n+  type ele_numbering_type\n+     integer :: boundaries\n+  end type ele_numbering_type\n+\n+  type element_type\n+     integer :: loc \n+     type(ele_numbering_type), pointer :: numbering=>null()\n+  end type element_type\n+\n+  type csr_sparsity\n+  end type csr_sparsity\n+  \n+  interface size\n+     module procedure sparsity_size\n+  end interface size\n+contains\n+  pure function sparsity_size(sparsity, dim)\n+    integer :: sparsity_size\n+    type(csr_sparsity), intent(in) :: sparsity\n+    integer, optional, intent(in) :: dim\n+  end function sparsity_size\n+\n+  subroutine make_boundary_numbering(EEList, xndglno, ele_n)\n+    type(csr_sparsity), intent(in) :: EEList\n+    type(element_type), intent(in) :: ele_n\n+    integer, dimension(size(EEList,1)*ele_n%loc), intent(in), target ::&\n+         & xndglno \n+    integer, dimension(ele_n%numbering%boundaries) :: neigh\n+    integer :: j\n+    j=size(neigh)\n+  end subroutine make_boundary_numbering\n+end module global_numbering\n+\n+module sparse_matrices_fields\n+  use sparse_tools\n+implicit none\n+   type scalar_field\n+      real, dimension(:), pointer :: val\n+   end type scalar_field\n+contains  \n+  subroutine csr_mult_T_scalar(x)\n+    type(scalar_field), intent(inout) :: x\n+    real, dimension(:), allocatable :: tmp\n+    integer :: i\n+    i=size(x%val)\n+  end subroutine csr_mult_T_scalar\n+end module sparse_matrices_fields\n+\n+program test\n+  use sparse_matrices_fields\n+  use global_numbering\n+end program test\n+\n+! { dg-final { cleanup-modules \"sparse_tools sparse_matrices_fields global_numbering\" } }"}]}