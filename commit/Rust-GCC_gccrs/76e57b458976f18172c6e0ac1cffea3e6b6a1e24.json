{"sha": "76e57b458976f18172c6e0ac1cffea3e6b6a1e24", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzZlNTdiNDU4OTc2ZjE4MTcyYzZlMGFjMWNmZmVhM2U2YjZhMWUyNA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2000-11-27T12:53:38Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2000-11-27T12:53:38Z"}, "message": "decl.c (grokfndecl): Undo COMPONENT_REF damage caused by bison parser ickiness.\n\ncp:\n\t* decl.c (grokfndecl): Undo COMPONENT_REF damage caused by\n\tbison parser ickiness.\n\t* pt.c (tsubst_friend_function): Enter namespace scope when\n\ttsubsting the function name.\n\t* cp-tree.h (DECL_TI_TEMPLATE): Update comment to reflect reality.\ntestsuite:\n\t* g++.old-deja/g++.other/friend46.C: New test.\n\nFrom-SVN: r37793", "tree": {"sha": "3be1b6f05983fb68984fe76dd579c0853828c39d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3be1b6f05983fb68984fe76dd579c0853828c39d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76e57b458976f18172c6e0ac1cffea3e6b6a1e24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76e57b458976f18172c6e0ac1cffea3e6b6a1e24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76e57b458976f18172c6e0ac1cffea3e6b6a1e24", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76e57b458976f18172c6e0ac1cffea3e6b6a1e24/comments", "author": null, "committer": null, "parents": [{"sha": "70bbeb8b66198585061972bd24aca9218d0f1d87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70bbeb8b66198585061972bd24aca9218d0f1d87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70bbeb8b66198585061972bd24aca9218d0f1d87"}], "stats": {"total": 92, "additions": 77, "deletions": 15}, "files": [{"sha": "438f29a13dc5523d54998c0c599efd605930593a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76e57b458976f18172c6e0ac1cffea3e6b6a1e24/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76e57b458976f18172c6e0ac1cffea3e6b6a1e24/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=76e57b458976f18172c6e0ac1cffea3e6b6a1e24", "patch": "@@ -1,3 +1,11 @@\n+2000-11-27  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* decl.c (grokfndecl): Undo COMPONENT_REF damage caused by\n+\tbison parser ickiness.\n+\t* pt.c (tsubst_friend_function): Enter namespace scope when\n+\ttsubsting the function name.\n+\t* cp-tree.h (DECL_TI_TEMPLATE): Update comment to reflect reality.\n+\n 2000-11-27  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* cp-tree.h (binfo_from_vbase): Return the virtual base's binfo."}, {"sha": "c8cfa2556535155fa9b0772617bf5fb22908b982", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76e57b458976f18172c6e0ac1cffea3e6b6a1e24/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76e57b458976f18172c6e0ac1cffea3e6b6a1e24/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=76e57b458976f18172c6e0ac1cffea3e6b6a1e24", "patch": "@@ -2362,8 +2362,9 @@ struct lang_decl\n \n    As a special case, for a member friend template of a template\n    class, this value will not be a TEMPLATE_DECL, but rather a\n-   LOOKUP_EXPR or IDENTIFIER_NODE indicating the name of the template\n-   and any explicit template arguments provided.  For example, in:\n+   LOOKUP_EXPR, IDENTIFIER_NODE or OVERLOAD indicating the name of\n+   the template and any explicit template arguments provided.  For\n+   example, in:\n \n      template <class T> struct S { friend void f<int>(int, double); }\n "}, {"sha": "3ca4ff6308487c4c5bdcb6d804dfa31ed5a544e9", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76e57b458976f18172c6e0ac1cffea3e6b6a1e24/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76e57b458976f18172c6e0ac1cffea3e6b6a1e24/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=76e57b458976f18172c6e0ac1cffea3e6b6a1e24", "patch": "@@ -8944,6 +8944,9 @@ grokfndecl (ctype, type, declarator, orig_declarator, virtualp, flags, quals,\n \t   orig_declarator);\n       else\n \t{\n+\t  tree fns = TREE_OPERAND (orig_declarator, 0);\n+\t  tree args = TREE_OPERAND (orig_declarator, 1);\n+\t  \n \t  if (PROCESSING_REAL_TEMPLATE_DECL_P ())\n \t    {\n \t      /* Something like `template <class T> friend void f<T>()'.  */\n@@ -8956,10 +8959,22 @@ grokfndecl (ctype, type, declarator, orig_declarator, virtualp, flags, quals,\n \t  /* A friend declaration of the form friend void f<>().  Record\n \t     the information in the TEMPLATE_ID_EXPR.  */\n \t  SET_DECL_IMPLICIT_INSTANTIATION (decl);\n-\t  DECL_TEMPLATE_INFO (decl)\n-\t    = tree_cons (TREE_OPERAND (orig_declarator, 0),\n-\t\t\t TREE_OPERAND (orig_declarator, 1),\n-\t\t\t NULL_TREE);\n+\n+          if (TREE_CODE (fns) == COMPONENT_REF)\n+            {\n+              /* Due to bison parser ickiness, we will have already looked\n+                 up an operator_name or PFUNCNAME within the current class\n+                 (see template_id in parse.y). If the current class contains\n+                 such a name, we'll get a COMPONENT_REF here. Undo that. */\n+              \n+              my_friendly_assert (TREE_TYPE (TREE_OPERAND (fns, 0))\n+                                  == current_class_type, 20001120);\n+              fns = TREE_OPERAND (fns, 1);\n+            }\n+\t  my_friendly_assert (TREE_CODE (fns) == IDENTIFIER_NODE\n+\t                      || TREE_CODE (fns) == LOOKUP_EXPR\n+\t                      || TREE_CODE (fns) == OVERLOAD, 20001120);\n+\t  DECL_TEMPLATE_INFO (decl) = tree_cons (fns, args, NULL_TREE);\n \n \t  if (has_default_arg)\n \t    {"}, {"sha": "5827c28ae7d55381db2ce65cf93a397404816f52", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76e57b458976f18172c6e0ac1cffea3e6b6a1e24/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76e57b458976f18172c6e0ac1cffea3e6b6a1e24/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=76e57b458976f18172c6e0ac1cffea3e6b6a1e24", "patch": "@@ -4422,17 +4422,22 @@ tsubst_friend_function (decl, args)\n        function declaration.  Now, we have to figure out what\n        instantiation of what template.  */\n     {\n-      tree template_id;\n+      tree template_id, arglist, fns;\n       tree new_args;\n       tree tmpl;\n-\n-      template_id\n-\t= lookup_template_function (tsubst_expr (DECL_TI_TEMPLATE (decl),\n-\t\t\t\t\t\t args, /*complain=*/1, \n-\t\t\t\t\t\t NULL_TREE),\n-\t\t\t\t    tsubst (DECL_TI_ARGS (decl),\n-\t\t\t\t\t    args, /*complain=*/1, \n-\t\t\t\t\t    NULL_TREE));\n+      tree ns = CP_DECL_CONTEXT (TYPE_MAIN_DECL (current_class_type));\n+      \n+      /* Friend functions are looked up in the containing namespace scope.\n+         We must enter that scope, to avoid finding member functions of the\n+         current cless with same name.  */\n+      push_nested_namespace (ns);\n+      fns = tsubst_expr (DECL_TI_TEMPLATE (decl), args,\n+                         /*complain=*/1, NULL_TREE);\n+      pop_nested_namespace (ns);\n+      arglist = tsubst (DECL_TI_ARGS (decl), args,\n+                        /*complain=*/1, NULL_TREE);\n+      template_id = lookup_template_function (fns, arglist);\n+      \n       new_friend = tsubst (decl, args, /*complain=*/1, NULL_TREE);\n       tmpl = determine_specialization (template_id, new_friend,\n \t\t\t\t       &new_args, "}, {"sha": "0fce517ce3bdc3071428d35924d39e0b3dd43593", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76e57b458976f18172c6e0ac1cffea3e6b6a1e24/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76e57b458976f18172c6e0ac1cffea3e6b6a1e24/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=76e57b458976f18172c6e0ac1cffea3e6b6a1e24", "patch": "@@ -1,3 +1,7 @@\n+2000-11-27  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* g++.old-deja/g++.other/friend46.C: New test.\n+\n 2000-11-27  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* g++.old-deja/g++.other/ptrmem8.C: New test."}, {"sha": "58c87c496443a59479e83ee89d99c5fff4933b4e", "filename": "gcc/testsuite/g++.old-deja/g++.pt/friend46.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76e57b458976f18172c6e0ac1cffea3e6b6a1e24/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ffriend46.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76e57b458976f18172c6e0ac1cffea3e6b6a1e24/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ffriend46.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ffriend46.C?ref=76e57b458976f18172c6e0ac1cffea3e6b6a1e24", "patch": "@@ -0,0 +1,29 @@\n+// Build don't link:\n+// Copyright (C) 2000 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 17 Nov 2000 <nathan@codesourcery.com>\n+\n+// bug 43. Two failings, bison parser ickiness caused us to find the member\n+// named the same as a friend, and then when instantiating, we'd lookup in\n+// the wrong scope.\n+\n+namespace X {\n+  template <class T> class P;\n+  \n+  template <class T> void operator- (const P<T>&);\n+  \n+  template <class T>\n+  struct V\n+  {\n+    V (const T&);\n+  \n+    void operator- ();\n+    friend void operator-<> (const P<T>& a);\n+  };\n+}\n+\n+int main()\n+{\n+  X::V<double> b(1.0);\n+\n+  return 0;\n+}"}]}