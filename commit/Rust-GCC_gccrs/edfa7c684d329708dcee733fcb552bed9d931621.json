{"sha": "edfa7c684d329708dcee733fcb552bed9d931621", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWRmYTdjNjg0ZDMyOTcwOGRjZWU3MzNmY2I1NTJiZWQ5ZDkzMTYyMQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-04-21T22:11:33Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-04-22T19:53:34Z"}, "message": "c++: Add test for c++/93807\n\nThis PR was initially accepts-invalid, but I think it's actually valid\nC++20 code.  My reasoning is that in C++20 we no longer require the\ndeclaration of operator== (#if-defed in the test), because C++20's\n[temp.names]/2 says \"A name is also considered to refer to a template\nif it is an unqualified-id followed by a < and name lookup either finds\none or more functions or finds nothing.\" so when we're parsing\n\n  constexpr friend bool operator==<T>(T lhs, const Foo& rhs);\n\nwe treat \"operator==\" as a template name, because name lookup of\n\"operator==\" found nothing and we have an operator-function-id, which is\nan unqualified-id, and it's followed by a <.  So the declaration isn't\nneeded to treat \"operator==<T>\" as a template-id.\n\n\tPR c++/93807\n\t* g++.dg/cpp2a/fn-template20.C: New test.", "tree": {"sha": "2854d060d6d0256b9538a72749ab7cd2c9789b24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2854d060d6d0256b9538a72749ab7cd2c9789b24"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/edfa7c684d329708dcee733fcb552bed9d931621", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edfa7c684d329708dcee733fcb552bed9d931621", "html_url": "https://github.com/Rust-GCC/gccrs/commit/edfa7c684d329708dcee733fcb552bed9d931621", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edfa7c684d329708dcee733fcb552bed9d931621/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1868599f8daf7798018ce8a8f314015f5a2ac520", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1868599f8daf7798018ce8a8f314015f5a2ac520", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1868599f8daf7798018ce8a8f314015f5a2ac520"}], "stats": {"total": 39, "additions": 39, "deletions": 0}, "files": [{"sha": "955418f669a7d85f9ba434ef4c83edec41c36bc9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edfa7c684d329708dcee733fcb552bed9d931621/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edfa7c684d329708dcee733fcb552bed9d931621/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=edfa7c684d329708dcee733fcb552bed9d931621", "patch": "@@ -1,3 +1,8 @@\n+2020-04-22  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/93807\n+\t* g++.dg/cpp2a/fn-template20.C: New test.\n+\n 2020-04-22  Duan bo  <duanbo3@huawei.com>\n \n \tPR testsuite/94712"}, {"sha": "c558ad1f2b6c1a3aa324e942b5a6f61ec32c0b07", "filename": "gcc/testsuite/g++.dg/cpp2a/fn-template20.C", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edfa7c684d329708dcee733fcb552bed9d931621/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ffn-template20.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edfa7c684d329708dcee733fcb552bed9d931621/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ffn-template20.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ffn-template20.C?ref=edfa7c684d329708dcee733fcb552bed9d931621", "patch": "@@ -0,0 +1,34 @@\n+// PR c++/93807\n+// { dg-do compile { target c++11 } }\n+\n+// In C++17, we need the following declaration to treat operator== as\n+// a template name.  In C++20, this is handled by [temp.names]/2.\n+#if __cplusplus <= 201703L\n+template <typename T>\n+class Foo;\n+template <typename T>\n+constexpr bool operator==(T lhs, const Foo<T>& rhs);\n+#endif\n+\n+template <typename T>\n+class Foo {\n+public:\n+  constexpr Foo(T k) : mK(k) {}\n+\n+  constexpr friend bool operator==<T>(T lhs, const Foo& rhs);\n+private:\n+  T mK;\n+};\n+\n+template <typename T>\n+constexpr bool\n+operator==(T lhs, const Foo<T>& rhs)\n+{\n+  return lhs == rhs.mK;\n+}\n+\n+int\n+main ()\n+{\n+  return 1 == Foo<int>(1) ? 0 : 1;\n+}"}]}