{"sha": "d07605f5703529578edb1c65369fba38ddbff327", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDA3NjA1ZjU3MDM1Mjk1NzhlZGIxYzY1MzY5ZmJhMzhkZGJmZjMyNw==", "commit": {"author": {"name": "Andrew Pinski", "email": "pinskia@physics.uc.edu", "date": "2003-07-16T18:45:56Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2003-07-16T18:45:56Z"}, "message": "re PR c/10962 (lookup_field is a linear search on a linked list (can be slow if large struct))\n\n2003-07-16  Andrew Pinski  <pinskia@physics.uc.edu>\nChangeLog:\n        PR c/10962\n        * ggc.h: Add header guards.\n        * c-decl.c (finish_struct): Sort fields if\n        number greater than 15 and there are no\n        anonymous structs/unions.\n        * c-common.h: Include ggc.h.\n        (sorted_fields_type): New struct.\n        (field_decl_cmp): New prototype.\n        (resort_sorted_fields): New prototype.\n        (DECL_DECLARES_TYPE_NON_TEMPLATE_P): New macro.\n        * c-tree.h: (lang_type): Use pointer to sorted_fields_type\n        as s, removing other fields.\n        * c-typeck.c (lookup_field): Use s in lang_type.\n        These were mostly moved from cp/class.c:\n        * c-common.c (field_decl_cmp): New static function.\n        (field_decl_cmp): New function.\n        (resort_sorted_fields): New function.\ncp/ChangeLog:\n        * class.c (field_decl_cmp): Remove.\n        (resort_field_decl_cmp): Remove.\n        (resort_sorted_fields): Remove.\n        (add_fields_to_vec): Rename to ...\n        (add_fields_to_record_type): this.\n        (finish_struct_1): Change to be using\n        sorted_fields_type's fields.\n        * cp-tree.h (lang_decl): In lang_decl_u3\n        change sorted_fields to be a pointer to\n        sorted_fields_type.\n        (resort_sorted_fields): Remove prototype.\n        * search.c (lookup_field_1): Change to be using\n        sorted_fields_type's fields.\n\nFrom-SVN: r69470", "tree": {"sha": "39a0963ec716fc0d03212b9d1c71114101da5421", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39a0963ec716fc0d03212b9d1c71114101da5421"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d07605f5703529578edb1c65369fba38ddbff327", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d07605f5703529578edb1c65369fba38ddbff327", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d07605f5703529578edb1c65369fba38ddbff327", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d07605f5703529578edb1c65369fba38ddbff327/comments", "author": null, "committer": null, "parents": [{"sha": "48addf69eb048d3fc0135244e6dc9ea90ecb1254", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48addf69eb048d3fc0135244e6dc9ea90ecb1254", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48addf69eb048d3fc0135244e6dc9ea90ecb1254"}], "stats": {"total": 266, "additions": 186, "deletions": 80}, "files": [{"sha": "f8b4875def0c32e13f05487826783be619ddf44b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d07605f5703529578edb1c65369fba38ddbff327/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d07605f5703529578edb1c65369fba38ddbff327/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d07605f5703529578edb1c65369fba38ddbff327", "patch": "@@ -1,3 +1,23 @@\n+2003-07-16  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\tPR c/10962\n+\t* ggc.h: Add header guards.\n+\t* c-decl.c (finish_struct): Sort fields if\n+\tnumber greater than 15 and there are no\n+\tanonymous structs/unions.\n+\t* c-common.h: Include ggc.h.\n+\t(sorted_fields_type): New struct.\n+\t(field_decl_cmp): New prototype.\n+\t(resort_sorted_fields): New prototype.\n+\t(DECL_DECLARES_TYPE_NON_TEMPLATE_P): New macro.\n+\t* c-tree.h: (lang_type): Use pointer to sorted_fields_type\n+\tas s, removing other fields.\n+\t* c-typeck.c (lookup_field): Use s in lang_type.\n+\tThese were mostly moved from cp/class.c:\n+\t* c-common.c (field_decl_cmp): New static function.\n+\t(field_decl_cmp): New function.\n+\t(resort_sorted_fields): New function.\n+\n 2003-07-16  Geoffrey Keating  <geoffk@apple.com>\n \n \t* config/darwin.c (machopic_select_section): Use decl_readonly_section"}, {"sha": "ba0138db0bb9a3c9c38bb25f3561a36d69b24314", "filename": "gcc/c-common.c", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d07605f5703529578edb1c65369fba38ddbff327/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d07605f5703529578edb1c65369fba38ddbff327/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=d07605f5703529578edb1c65369fba38ddbff327", "patch": "@@ -776,6 +776,7 @@ static void check_function_nonnull (tree, tree);\n static void check_nonnull_arg (void *, tree, unsigned HOST_WIDE_INT);\n static bool nonnull_check_p (tree, unsigned HOST_WIDE_INT);\n static bool get_nonnull_operand (tree, unsigned HOST_WIDE_INT *);\n+static int resort_field_decl_cmp (const void *, const void *);\n \n /* Table of machine-independent attributes common to all C-like languages.  */\n const struct attribute_spec c_common_attribute_table[] =\n@@ -5882,6 +5883,72 @@ check_function_arguments_recurse (void (*callback)\n   (*callback) (ctx, param, param_num);\n }\n \n+/* Function to help qsort sort FIELD_DECLs by name order.  */\n+\n+int\n+field_decl_cmp (const void *x_p, const void *y_p)\n+{\n+  const tree *const x = x_p;\n+  const tree *const y = y_p;\n+  if (DECL_NAME (*x) == DECL_NAME (*y))\n+    /* A nontype is \"greater\" than a type.  */\n+    return (TREE_CODE (*y) == TYPE_DECL) - (TREE_CODE (*x) == TYPE_DECL);\n+  if (DECL_NAME (*x) == NULL_TREE)\n+    return -1;\n+  if (DECL_NAME (*y) == NULL_TREE)\n+    return 1;\n+  if (DECL_NAME (*x) < DECL_NAME (*y))\n+    return -1;\n+  return 1;\n+}\n+\n+static struct {\n+  gt_pointer_operator new_value;\n+  void *cookie;\n+} resort_data;\n+\n+/* This routine compares two fields like field_decl_cmp but using the\n+pointer operator in resort_data.  */\n+\n+static int\n+resort_field_decl_cmp (const void *x_p, const void *y_p)\n+{\n+  const tree *const x = x_p;\n+  const tree *const y = y_p;\n+\n+  if (DECL_NAME (*x) == DECL_NAME (*y))\n+    /* A nontype is \"greater\" than a type.  */\n+    return (TREE_CODE (*y) == TYPE_DECL) - (TREE_CODE (*x) == TYPE_DECL);\n+  if (DECL_NAME (*x) == NULL_TREE)\n+    return -1;\n+  if (DECL_NAME (*y) == NULL_TREE)\n+    return 1;\n+  {\n+    tree d1 = DECL_NAME (*x);\n+    tree d2 = DECL_NAME (*y);\n+    resort_data.new_value (&d1, resort_data.cookie);\n+    resort_data.new_value (&d2, resort_data.cookie);\n+    if (d1 < d2)\n+      return -1;\n+  }\n+  return 1;\n+}\n+\n+/* Resort DECL_SORTED_FIELDS because pointers have been reordered.  */\n+\n+void\n+resort_sorted_fields (void *obj,\n+                      void *orig_obj ATTRIBUTE_UNUSED ,\n+                      gt_pointer_operator new_value,\n+                      void *cookie)\n+{\n+  struct sorted_fields_type *sf = obj;\n+  resort_data.new_value = new_value;\n+  resort_data.cookie = cookie;\n+  qsort (&sf->elts[0], sf->len, sizeof (tree),\n+         resort_field_decl_cmp);\n+}\n+\n /* Used by estimate_num_insns.  Estimate number of instructions seen\n    by given statement.  */\n static tree"}, {"sha": "fd7ce4aef758c0012ad2c2a1757d1d2c89cc05ce", "filename": "gcc/c-common.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d07605f5703529578edb1c65369fba38ddbff327/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d07605f5703529578edb1c65369fba38ddbff327/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=d07605f5703529578edb1c65369fba38ddbff327", "patch": "@@ -24,6 +24,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \n #include \"splay-tree.h\"\n #include \"cpplib.h\"\n+#include \"ggc.h\"\n \n /* Usage of TREE_LANG_FLAG_?:\n    0: COMPOUND_STMT_NO_SCOPE (in COMPOUND_STMT).\n@@ -223,6 +224,13 @@ struct c_common_identifier GTY(())\n \n extern GTY(()) tree c_global_trees[CTI_MAX];\n \n+/* In a RECORD_TYPE, a sorted array of the fields of the type, not a tree for size reasons.  */\n+struct sorted_fields_type GTY(())\n+{\n+  int len;\n+  tree GTY((length (\"%h.len\"))) elts[1];\n+};\n+\n /* Mark which labels are explicitly declared.\n    These may be shadowed, and may be referenced from nested functions.  */\n #define C_DECLARED_LABEL_FLAG(label) TREE_LANG_FLAG_1 (label)\n@@ -343,6 +351,9 @@ extern void c_finish_while_stmt_cond (tree, tree);\n \n enum sw_kind { SW_PARAM = 0, SW_LOCAL, SW_GLOBAL };\n extern void shadow_warning (enum sw_kind, const char *, tree);\n+extern int field_decl_cmp (const void *, const void *);\n+extern void resort_sorted_fields (void *, void *, gt_pointer_operator, \n+                                  void *);\n \n /* Extra information associated with a DECL.  Other C dialects extend\n    this structure in various ways.  The C front-end only uses this"}, {"sha": "c643d97193d6daab9ecc9660c487d48f8a9dc150", "filename": "gcc/c-decl.c", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d07605f5703529578edb1c65369fba38ddbff327/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d07605f5703529578edb1c65369fba38ddbff327/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=d07605f5703529578edb1c65369fba38ddbff327", "patch": "@@ -5155,6 +5155,56 @@ finish_struct (tree t, tree fieldlist, tree attributes)\n \n   TYPE_FIELDS (t) = fieldlist;\n \n+  /* If there are lots of fields, sort so we can look through them fast.\n+    We arbitrarily consider 16 or more elts to be \"a lot\".  */\n+\n+  {\n+    int len = 0;\n+\n+    for (x = fieldlist; x; x = TREE_CHAIN (x))\n+      {\n+        if (len > 15 || DECL_NAME (x) == NULL)\n+          break;\n+        len += 1;\n+      }\n+\n+    if (len > 15)\n+      {\n+        tree *field_array;\n+        struct lang_type *space;\n+        struct sorted_fields_type *space2;\n+        \n+        len += list_length (x);\n+  \n+        /* Use the same allocation policy here that make_node uses, to\n+          ensure that this lives as long as the rest of the struct decl.\n+          All decls in an inline function need to be saved.  */\n+  \n+        space = ggc_alloc (sizeof (struct lang_type));\n+        space2 = ggc_alloc (sizeof (struct sorted_fields_type) + len * sizeof (tree));\n+        \n+        len = 0;\n+\tspace->s = space2;\n+\tfield_array = &space2->elts[0];\n+        for (x = fieldlist; x; x = TREE_CHAIN (x))\n+          {\n+            field_array[len++] = x;\n+          \n+            /* if there is anonymous struct or union break out of the loop */\n+            if (DECL_NAME (x) == NULL)\n+              break;\n+          }\n+        /* found no anonymous struct/union add the TYPE_LANG_SPECIFIC. */\n+        if (x == NULL)\n+          {\n+            TYPE_LANG_SPECIFIC (t) = space;\n+            TYPE_LANG_SPECIFIC (t)->s->len = len;\n+            field_array = TYPE_LANG_SPECIFIC (t)->s->elts;\n+            qsort (field_array, len, sizeof (tree), field_decl_cmp);\n+          }\n+      }\n+  }\n+  \n   for (x = TYPE_MAIN_VARIANT (t); x; x = TYPE_NEXT_VARIANT (x))\n     {\n       TYPE_FIELDS (x) = TYPE_FIELDS (t);"}, {"sha": "50e161e5e46d608374974729fd1c0f3b346381ee", "filename": "gcc/c-tree.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d07605f5703529578edb1c65369fba38ddbff327/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d07605f5703529578edb1c65369fba38ddbff327/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=d07605f5703529578edb1c65369fba38ddbff327", "patch": "@@ -109,8 +109,7 @@ struct lang_decl GTY(())\n /* In a RECORD_TYPE, a sorted array of the fields of the type.  */\n struct lang_type GTY(())\n {\n-  int len;\n-  tree GTY((length (\"%h.len\"))) elts[1];\n+  struct sorted_fields_type * GTY ((reorder (\"resort_sorted_fields\"))) s; \n };\n \n /* Record whether a type or decl was written with nonconstant size."}, {"sha": "6f2b6f4204cc606a995cb9d3e98837f78ecf5bf0", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d07605f5703529578edb1c65369fba38ddbff327/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d07605f5703529578edb1c65369fba38ddbff327/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=d07605f5703529578edb1c65369fba38ddbff327", "patch": "@@ -1183,11 +1183,11 @@ lookup_field (tree decl, tree component)\n   if (TYPE_LANG_SPECIFIC (type))\n     {\n       int bot, top, half;\n-      tree *field_array = &TYPE_LANG_SPECIFIC (type)->elts[0];\n+      tree *field_array = &TYPE_LANG_SPECIFIC (type)->s->elts[0];\n \n       field = TYPE_FIELDS (type);\n       bot = 0;\n-      top = TYPE_LANG_SPECIFIC (type)->len;\n+      top = TYPE_LANG_SPECIFIC (type)->s->len;\n       while (top - bot > 1)\n \t{\n \t  half = (top - bot + 1) >> 1;"}, {"sha": "e231e8bfbf49674c564d999d8e51e16590adbdf7", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d07605f5703529578edb1c65369fba38ddbff327/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d07605f5703529578edb1c65369fba38ddbff327/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d07605f5703529578edb1c65369fba38ddbff327", "patch": "@@ -1,3 +1,20 @@\n+2003-07-16  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\tPR c/10962\n+\t* class.c (field_decl_cmp): Remove.\n+\t(resort_field_decl_cmp): Remove.\n+\t(resort_sorted_fields): Remove.\n+\t(add_fields_to_vec): Rename to ...\n+\t(add_fields_to_record_type): this.\n+\t(finish_struct_1): Change to be using\n+\tsorted_fields_type's fields.\n+\t* cp-tree.h (lang_decl): In lang_decl_u3\n+\tchange sorted_fields to be a pointer to\n+\tsorted_fields_type.\n+\t(resort_sorted_fields): Remove prototype.\n+\t* search.c (lookup_field_1): Change to be using\n+\tsorted_fields_type's fields.\n+\n 2003-07-16  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n \n \tPR c++/5421"}, {"sha": "ca22d82d7aabe69169d7487e687c20cc092df25d", "filename": "gcc/cp/class.c", "status": "modified", "additions": 10, "deletions": 71, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d07605f5703529578edb1c65369fba38ddbff327/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d07605f5703529578edb1c65369fba38ddbff327/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=d07605f5703529578edb1c65369fba38ddbff327", "patch": "@@ -124,8 +124,6 @@ static tree modify_all_vtables (tree, tree);\n static void determine_primary_base (tree);\n static void finish_struct_methods (tree);\n static void maybe_warn_about_overly_private_class (tree);\n-static int field_decl_cmp (const void *, const void *);\n-static int resort_field_decl_cmp (const void *, const void *);\n static int method_name_cmp (const void *, const void *);\n static int resort_method_name_cmp (const void *, const void *);\n static void add_implicitly_declared_members (tree, int, int, int);\n@@ -136,7 +134,7 @@ static tree build_vtable_entry_ref (tree, tree, tree);\n static tree build_vtbl_ref_1 (tree, tree);\n static tree build_vtbl_initializer (tree, tree, tree, tree, int *);\n static int count_fields (tree);\n-static int add_fields_to_vec (tree, tree, int);\n+static int add_fields_to_record_type (tree, struct sorted_fields_type*, int);\n static void check_bitfield_decl (tree);\n static void check_field_decl (tree, tree, int *, int *, int *, int *);\n static void check_field_decls (tree, tree *, int *, int *, int *);\n@@ -1711,72 +1709,11 @@ maybe_warn_about_overly_private_class (tree t)\n     }\n }\n \n-/* Function to help qsort sort FIELD_DECLs by name order.  */\n-\n-static int\n-field_decl_cmp (const void* x_p, const void* y_p)\n-{\n-  const tree *const x = x_p;\n-  const tree *const y = y_p;\n-  if (DECL_NAME (*x) == DECL_NAME (*y))\n-    /* A nontype is \"greater\" than a type.  */\n-    return DECL_DECLARES_TYPE_P (*y) - DECL_DECLARES_TYPE_P (*x);\n-  if (DECL_NAME (*x) == NULL_TREE)\n-    return -1;\n-  if (DECL_NAME (*y) == NULL_TREE)\n-    return 1;\n-  if (DECL_NAME (*x) < DECL_NAME (*y))\n-    return -1;\n-  return 1;\n-}\n-\n static struct {\n   gt_pointer_operator new_value;\n   void *cookie;\n } resort_data;\n \n-/* This routine compares two fields like field_decl_cmp but using the\n-   pointer operator in resort_data.  */\n-\n-static int\n-resort_field_decl_cmp (const void* x_p, const void* y_p)\n-{\n-  const tree *const x = x_p;\n-  const tree *const y = y_p;\n-\n-  if (DECL_NAME (*x) == DECL_NAME (*y))\n-    /* A nontype is \"greater\" than a type.  */\n-    return DECL_DECLARES_TYPE_P (*y) - DECL_DECLARES_TYPE_P (*x);\n-  if (DECL_NAME (*x) == NULL_TREE)\n-    return -1;\n-  if (DECL_NAME (*y) == NULL_TREE)\n-    return 1;\n-  {\n-    tree d1 = DECL_NAME (*x);\n-    tree d2 = DECL_NAME (*y);\n-    resort_data.new_value (&d1, resort_data.cookie);\n-    resort_data.new_value (&d2, resort_data.cookie);\n-    if (d1 < d2)\n-      return -1;\n-  }\n-  return 1;\n-}\n-\n-/* Resort DECL_SORTED_FIELDS because pointers have been reordered.  */\n-\n-void \n-resort_sorted_fields (void* obj, \n-                      void* orig_obj ATTRIBUTE_UNUSED , \n-                      gt_pointer_operator new_value, \n-                      void* cookie)\n-{\n-  tree sf = obj;\n-  resort_data.new_value = new_value;\n-  resort_data.cookie = cookie;\n-  qsort (&TREE_VEC_ELT (sf, 0), TREE_VEC_LENGTH (sf), sizeof (tree),\n-\t resort_field_decl_cmp);\n-}\n-\n /* Comparison function to compare two TYPE_METHOD_VEC entries by name.  */\n \n static int\n@@ -2786,18 +2723,18 @@ count_fields (tree fields)\n }\n \n /* Subroutine of finish_struct_1.  Recursively add all the fields in the\n-   TREE_LIST FIELDS to the TREE_VEC FIELD_VEC, starting at offset IDX.  */\n+   TREE_LIST FIELDS to the SORTED_FIELDS_TYPE elts, starting at offset IDX.  */\n \n static int\n-add_fields_to_vec (tree fields, tree field_vec, int idx)\n+add_fields_to_record_type (tree fields, struct sorted_fields_type *field_vec, int idx)\n {\n   tree x;\n   for (x = fields; x; x = TREE_CHAIN (x))\n     {\n       if (TREE_CODE (x) == FIELD_DECL && ANON_AGGR_TYPE_P (TREE_TYPE (x)))\n-\tidx = add_fields_to_vec (TYPE_FIELDS (TREE_TYPE (x)), field_vec, idx);\n+\tidx = add_fields_to_record_type (TYPE_FIELDS (TREE_TYPE (x)), field_vec, idx);\n       else\n-\tTREE_VEC_ELT (field_vec, idx++) = x;\n+\tfield_vec->elts[idx++] = x;\n     }\n   return idx;\n }\n@@ -5160,9 +5097,11 @@ finish_struct_1 (tree t)\n   n_fields = count_fields (TYPE_FIELDS (t));\n   if (n_fields > 7)\n     {\n-      tree field_vec = make_tree_vec (n_fields);\n-      add_fields_to_vec (TYPE_FIELDS (t), field_vec, 0);\n-      qsort (&TREE_VEC_ELT (field_vec, 0), n_fields, sizeof (tree),\n+      struct sorted_fields_type *field_vec = ggc_alloc (sizeof (struct sorted_fields_type) \n+\t+ n_fields * sizeof (tree));\n+      field_vec->len = n_fields;\n+      add_fields_to_record_type (TYPE_FIELDS (t), field_vec, 0);\n+      qsort (field_vec->elts, n_fields, sizeof (tree),\n \t     field_decl_cmp);\n       if (! DECL_LANG_SPECIFIC (TYPE_MAIN_DECL (t)))\n \tretrofit_lang_decl (TYPE_MAIN_DECL (t));"}, {"sha": "40f3784fc9b3623b9b67cbed8630d86b048e6fda", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d07605f5703529578edb1c65369fba38ddbff327/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d07605f5703529578edb1c65369fba38ddbff327/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=d07605f5703529578edb1c65369fba38ddbff327", "patch": "@@ -1727,7 +1727,7 @@ struct lang_decl GTY(())\n \t\n \tunion lang_decl_u3\n \t{\n-\t  tree GTY ((tag (\"0\"), reorder (\"resort_sorted_fields\"))) \n+\t  struct sorted_fields_type * GTY ((tag (\"0\"), reorder (\"resort_sorted_fields\"))) \n \t       sorted_fields;\n  \t  struct cp_token_cache * GTY ((tag (\"2\"))) pending_inline_info;\n \t  struct language_function * GTY ((tag (\"1\"))) \n@@ -3553,8 +3553,6 @@ extern tree convert_to_base                     (tree, tree, bool);\n extern tree build_vtbl_ref\t\t\t(tree, tree);\n extern tree build_vfn_ref\t\t\t(tree, tree);\n extern tree get_vtable_decl                     (tree, int);\n-extern void resort_sorted_fields \n-  (void *, void *, gt_pointer_operator, void *);\n extern void resort_type_method_vec\n   (void *, void *, gt_pointer_operator, void *);\n extern void add_method\t\t\t\t(tree, tree, int);"}, {"sha": "10b52164cd0e748105c4c3d41a9cef89f972f95f", "filename": "gcc/cp/search.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d07605f5703529578edb1c65369fba38ddbff327/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d07605f5703529578edb1c65369fba38ddbff327/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=d07605f5703529578edb1c65369fba38ddbff327", "patch": "@@ -432,8 +432,8 @@ lookup_field_1 (tree type, tree name, bool want_type)\n       && DECL_LANG_SPECIFIC (TYPE_NAME (type))\n       && DECL_SORTED_FIELDS (TYPE_NAME (type)))\n     {\n-      tree *fields = &TREE_VEC_ELT (DECL_SORTED_FIELDS (TYPE_NAME (type)), 0);\n-      int lo = 0, hi = TREE_VEC_LENGTH (DECL_SORTED_FIELDS (TYPE_NAME (type)));\n+      tree *fields = &DECL_SORTED_FIELDS (TYPE_NAME (type))->elts[0];\n+      int lo = 0, hi = DECL_SORTED_FIELDS (TYPE_NAME (type))->len;\n       int i;\n \n       while (lo < hi)"}, {"sha": "3a88e1654790afef0584da6f52e0fb5d550d3437", "filename": "gcc/ggc.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d07605f5703529578edb1c65369fba38ddbff327/gcc%2Fggc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d07605f5703529578edb1c65369fba38ddbff327/gcc%2Fggc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc.h?ref=d07605f5703529578edb1c65369fba38ddbff327", "patch": "@@ -19,6 +19,9 @@ along with GCC; see the file COPYING.  If not, write to the Free\n Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n 02111-1307, USA.  */\n \n+#ifndef GCC_GGC_H\n+#define GCC_GGC_H\n+\n /* Symbols are marked with `ggc' for `gcc gc' so as not to interfere with\n    an external gc library that might be linked in.  */\n \n@@ -259,3 +262,5 @@ extern void stringpool_statistics (void);\n extern int ggc_min_expand_heuristic (void);\n extern int ggc_min_heapsize_heuristic (void);\n extern void init_ggc_heuristics (void);\n+\n+#endif"}]}