{"sha": "06f9b387e517d6f54b6c9b35d4f972bc1542855c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDZmOWIzODdlNTE3ZDZmNTRiNmM5YjM1ZDRmOTcyYmMxNTQyODU1Yw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2013-04-12T08:18:59Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2013-04-12T08:18:59Z"}, "message": "re PR tree-optimization/56918 (incorrect auto-vectorization of array initialization)\n\n\tPR tree-optimization/56918\n\tPR tree-optimization/56920\n\t* fold-const.c (int_const_binop_1): Use op1.mul_with_sign (op2, ...)\n\tinstead of op1 - op2.  Pass 2 * TYPE_PRECISION (type) as second\n\targument to rshift method.  For 2 * HOST_BITS_PER_WIDE_INT precision\n\tuse wide_mul_with_sign method.\n\n\t* gcc.dg/vect/pr56918.c: New test.\n\t* gcc.dg/vect/pr56920.c: New test.\n\nFrom-SVN: r197846", "tree": {"sha": "a5b70e4d1a91908233d26fcca4ff9a8cf10fcd82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5b70e4d1a91908233d26fcca4ff9a8cf10fcd82"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/06f9b387e517d6f54b6c9b35d4f972bc1542855c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06f9b387e517d6f54b6c9b35d4f972bc1542855c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06f9b387e517d6f54b6c9b35d4f972bc1542855c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06f9b387e517d6f54b6c9b35d4f972bc1542855c/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "953094d2f8d7963f52c26d177c62db7220efb1b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/953094d2f8d7963f52c26d177c62db7220efb1b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/953094d2f8d7963f52c26d177c62db7220efb1b3"}], "stats": {"total": 88, "additions": 83, "deletions": 5}, "files": [{"sha": "aa332721946e5438ef4a2c6641a805897dbb8e2f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06f9b387e517d6f54b6c9b35d4f972bc1542855c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06f9b387e517d6f54b6c9b35d4f972bc1542855c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=06f9b387e517d6f54b6c9b35d4f972bc1542855c", "patch": "@@ -1,3 +1,12 @@\n+2013-04-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/56918\n+\tPR tree-optimization/56920\n+\t* fold-const.c (int_const_binop_1): Use op1.mul_with_sign (op2, ...)\n+\tinstead of op1 - op2.  Pass 2 * TYPE_PRECISION (type) as second\n+\targument to rshift method.  For 2 * HOST_BITS_PER_WIDE_INT precision\n+\tuse wide_mul_with_sign method.\n+\n 2013-04-12  Richard Biener  <rguenther@suse.de>\n \n \t* gimple.c (is_gimple_constant): Vector CONSTRUCTORs should"}, {"sha": "59dbc034c4f3c53aa0411597e49fac67f9635437", "filename": "gcc/fold-const.c", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06f9b387e517d6f54b6c9b35d4f972bc1542855c/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06f9b387e517d6f54b6c9b35d4f972bc1542855c/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=06f9b387e517d6f54b6c9b35d4f972bc1542855c", "patch": "@@ -984,12 +984,22 @@ int_const_binop_1 (enum tree_code code, const_tree arg1, const_tree arg2,\n       break;\n \n     case MULT_HIGHPART_EXPR:\n-      /* ??? Need quad precision, or an additional shift operand\n-\t to the multiply primitive, to handle very large highparts.  */\n       if (TYPE_PRECISION (type) > HOST_BITS_PER_WIDE_INT)\n-\treturn NULL_TREE;\n-      tmp = op1 - op2;\n-      res = tmp.rshift (TYPE_PRECISION (type), TYPE_PRECISION (type), !uns);\n+\t{\n+\t  bool dummy_overflow;\n+\t  if (TYPE_PRECISION (type) != 2 * HOST_BITS_PER_WIDE_INT)\n+\t    return NULL_TREE;\n+\t  op1.wide_mul_with_sign (op2, uns, &res, &dummy_overflow);\n+\t}\n+      else\n+\t{\n+\t  bool dummy_overflow;\n+\t  /* MULT_HIGHPART_EXPR can't ever oveflow, as the multiplication\n+\t     is performed in twice the precision of arguments.  */\n+\t  tmp = op1.mul_with_sign (op2, false, &dummy_overflow);\n+\t  res = tmp.rshift (TYPE_PRECISION (type),\n+\t\t\t    2 * TYPE_PRECISION (type), !uns);\n+\t}\n       break;\n \n     case TRUNC_DIV_EXPR:"}, {"sha": "2c8c87872aa0af52b9a3d89e6610631bd0e943d9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06f9b387e517d6f54b6c9b35d4f972bc1542855c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06f9b387e517d6f54b6c9b35d4f972bc1542855c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=06f9b387e517d6f54b6c9b35d4f972bc1542855c", "patch": "@@ -1,3 +1,10 @@\n+2013-04-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/56918\n+\tPR tree-optimization/56920\n+\t* gcc.dg/vect/pr56918.c: New test.\n+\t* gcc.dg/vect/pr56920.c: New test.\n+\n 2013-04-12  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/56845"}, {"sha": "581faa0e226123c6e396026f3353e6b12066ae47", "filename": "gcc/testsuite/gcc.dg/vect/pr56918.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06f9b387e517d6f54b6c9b35d4f972bc1542855c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr56918.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06f9b387e517d6f54b6c9b35d4f972bc1542855c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr56918.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr56918.c?ref=06f9b387e517d6f54b6c9b35d4f972bc1542855c", "patch": "@@ -0,0 +1,31 @@\n+/* PR tree-optimization/56918 */\n+/* { dg-additional-options \"-O3\" } */\n+\n+#include \"tree-vect.h\"\n+\n+extern void abort (void);\n+double data[8];\n+\n+__attribute__((noinline, noclone)) void\n+foo ()\n+{\n+  int i;\n+  for (i = 0; i < 8; ++i)\n+    data[i] = ((i + 2) % 3) + 1;\n+}\n+\n+int\n+main ()\n+{\n+  int i;\n+  check_vect ();\n+  foo ();\n+  if (data[0] != 3 || data[7] != 1)\n+    abort ();\n+  for (i = 1; i < 4; ++i)\n+    if (data[i] != i || data[i + 3] != i)\n+      abort ();\n+  return 0;\n+}\n+\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "c6c7cca0f4104f59a44ef7d8e5e77e97185141c2", "filename": "gcc/testsuite/gcc.dg/vect/pr56920.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06f9b387e517d6f54b6c9b35d4f972bc1542855c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr56920.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06f9b387e517d6f54b6c9b35d4f972bc1542855c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr56920.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr56920.c?ref=06f9b387e517d6f54b6c9b35d4f972bc1542855c", "patch": "@@ -0,0 +1,21 @@\n+/* PR tree-optimization/56920 */\n+/* { dg-additional-options \"-O3\" } */\n+\n+#include \"tree-vect.h\"\n+\n+extern void abort (void);\n+\n+int\n+main ()\n+{\n+  unsigned int a[15], i;\n+  check_vect ();\n+  for (i = 0; i < 15; ++i)\n+    a[i] = (i * 2) % 15;\n+  for (i = 0; i < 15; ++i)\n+    if (a[i] != (i * 2) % 15)\n+      abort ();\n+  return 0;\n+}\n+\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}]}