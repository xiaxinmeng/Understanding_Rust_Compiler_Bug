{"sha": "5e5f880d0452ef2cffb94f4a686d56833c9f4215", "node_id": "C_kwDOANBUbNoAKDVlNWY4ODBkMDQ1MmVmMmNmZmI5NGY0YTY4NmQ1NjgzM2M5ZjQyMTU", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-11-26T07:50:24Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-11-29T08:20:09Z"}, "message": "Restore can_be_invalidated_p semantics to before refactoring\n\nThis restores the semantics of can_be_invalidated_p to the original\nsemantics of the function this was split out from tree-ssa-uninit.c.\nThe current semantics only ever look at the first predicate which\ncannot be correct.\n\n2021-11-26  Richard Biener  <rguenther@suse.de>\n\n\t* gimple-predicate-analysis.cc (can_be_invalidated_p):\n\tRestore semantics to the one before the split from\n\ttree-ssa-uninit.c.", "tree": {"sha": "e854699843d73ae990e574fef77f2ad33d459d70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e854699843d73ae990e574fef77f2ad33d459d70"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e5f880d0452ef2cffb94f4a686d56833c9f4215", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e5f880d0452ef2cffb94f4a686d56833c9f4215", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e5f880d0452ef2cffb94f4a686d56833c9f4215", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e5f880d0452ef2cffb94f4a686d56833c9f4215/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e15df63ca4ca793b2418640b715b8195d2a5474", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e15df63ca4ca793b2418640b715b8195d2a5474", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e15df63ca4ca793b2418640b715b8195d2a5474"}], "stats": {"total": 8, "additions": 5, "deletions": 3}, "files": [{"sha": "da6adc9a3e2d64308828dd53881926eaa3724c42", "filename": "gcc/gimple-predicate-analysis.cc", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e5f880d0452ef2cffb94f4a686d56833c9f4215/gcc%2Fgimple-predicate-analysis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e5f880d0452ef2cffb94f4a686d56833c9f4215/gcc%2Fgimple-predicate-analysis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-predicate-analysis.cc?ref=5e5f880d0452ef2cffb94f4a686d56833c9f4215", "patch": "@@ -1199,14 +1199,16 @@ can_be_invalidated_p (const pred_chain_union &preds, const pred_chain &guard)\n   for (unsigned i = 0; i < preds.length (); ++i)\n     {\n       const pred_chain &chain = preds[i];\n-      for (unsigned j = 0; j < chain.length (); ++j)\n+      unsigned j;\n+      for (j = 0; j < chain.length (); ++j)\n \tif (can_be_invalidated_p (chain[j], guard))\n-\t  return true;\n+\t  break;\n \n       /* If we were unable to invalidate any predicate in C, then there\n \t is a viable path from entry to the PHI where the PHI takes\n \t an interesting value and continues to a use of the PHI.  */\n-      return false;\n+      if (j == chain.length ())\n+\treturn false;\n     }\n   return true;\n }"}]}