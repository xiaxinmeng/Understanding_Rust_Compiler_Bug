{"sha": "bd7885755405bc9947ebe805a53d6100c78c8e82", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQ3ODg1NzU1NDA1YmM5OTQ3ZWJlODA1YTUzZDYxMDBjNzhjOGU4Mg==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2020-10-13T12:56:59Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2020-11-13T21:58:57Z"}, "message": "More explicit checking of which OMP constructs we're expecting\n\nIn particular, more precisely highlight what applies generally vs. the special\nhandling for the current 'parloops'-based OpenACC 'kernels' implementation.\n\n\tgcc/\n\t* omp-low.c (scan_sharing_clauses, scan_omp_for)\n\t(lower_oacc_reductions, lower_omp_target): More explicit checking\n\tof which OMP constructs we're expecting.", "tree": {"sha": "693d70f776de933eee007e77bd0d1a8ce84b3a47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/693d70f776de933eee007e77bd0d1a8ce84b3a47"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd7885755405bc9947ebe805a53d6100c78c8e82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd7885755405bc9947ebe805a53d6100c78c8e82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd7885755405bc9947ebe805a53d6100c78c8e82", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd7885755405bc9947ebe805a53d6100c78c8e82/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "703e4f86496214e4915db898397fcd0ae1d955e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/703e4f86496214e4915db898397fcd0ae1d955e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/703e4f86496214e4915db898397fcd0ae1d955e0"}], "stats": {"total": 59, "additions": 45, "deletions": 14}, "files": [{"sha": "2602189d68718c5899160ccd76a993e3b1440e7b", "filename": "gcc/omp-low.c", "status": "modified", "additions": 45, "deletions": 14, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd7885755405bc9947ebe805a53d6100c78c8e82/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd7885755405bc9947ebe805a53d6100c78c8e82/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=bd7885755405bc9947ebe805a53d6100c78c8e82", "patch": "@@ -1194,9 +1194,16 @@ scan_sharing_clauses (tree clauses, omp_context *ctx)\n \t  goto do_private;\n \n \tcase OMP_CLAUSE_REDUCTION:\n-\t  if (is_oacc_parallel_or_serial (ctx) || is_oacc_kernels (ctx))\n-\t    ctx->local_reduction_clauses\n-\t      = tree_cons (NULL, c, ctx->local_reduction_clauses);\n+\t  /* Collect 'reduction' clauses on OpenACC compute construct.  */\n+\t  if (is_gimple_omp_oacc (ctx->stmt)\n+\t      && is_gimple_omp_offloaded (ctx->stmt))\n+\t    {\n+\t      /* No 'reduction' clauses on OpenACC 'kernels'.  */\n+\t      gcc_checking_assert (!is_oacc_kernels (ctx));\n+\n+\t      ctx->local_reduction_clauses\n+\t\t= tree_cons (NULL, c, ctx->local_reduction_clauses);\n+\t    }\n \t  if ((OMP_CLAUSE_REDUCTION_INSCAN (c)\n \t       || OMP_CLAUSE_REDUCTION_TASK (c)) && ctx->allocate_map)\n \t    {\n@@ -2502,7 +2509,7 @@ scan_omp_for (gomp_for *stmt, omp_context *outer_ctx)\n     {\n       omp_context *tgt = enclosing_target_ctx (outer_ctx);\n \n-      if (!tgt || is_oacc_parallel_or_serial (tgt))\n+      if (!(tgt && is_oacc_kernels (tgt)))\n \tfor (tree c = clauses; c; c = OMP_CLAUSE_CHAIN (c))\n \t  {\n \t    tree c_op0;\n@@ -6921,6 +6928,9 @@ lower_oacc_reductions (location_t loc, tree clauses, tree level, bool inner,\n   for (tree c = clauses; c; c = OMP_CLAUSE_CHAIN (c))\n     if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_REDUCTION)\n       {\n+\t/* No 'reduction' clauses on OpenACC 'kernels'.  */\n+\tgcc_checking_assert (!is_oacc_kernels (ctx));\n+\n \ttree orig = OMP_CLAUSE_DECL (c);\n \ttree var = maybe_lookup_decl (orig, ctx);\n \ttree ref_to_res = NULL_TREE;\n@@ -6958,10 +6968,11 @@ lower_oacc_reductions (location_t loc, tree clauses, tree level, bool inner,\n \t\t    break;\n \n \t\t  case GIMPLE_OMP_TARGET:\n-\t\t    if ((gimple_omp_target_kind (probe->stmt)\n-\t\t\t != GF_OMP_TARGET_KIND_OACC_PARALLEL)\n-\t\t\t&& (gimple_omp_target_kind (probe->stmt)\n-\t\t\t    != GF_OMP_TARGET_KIND_OACC_SERIAL))\n+\t\t    /* No 'reduction' clauses inside OpenACC 'kernels'\n+\t\t       regions.  */\n+\t\t    gcc_checking_assert (!is_oacc_kernels (probe));\n+\n+\t\t    if (!is_gimple_omp_offloaded (probe->stmt))\n \t\t      goto do_lookup;\n \n \t\t    cls = gimple_omp_target_clauses (probe->stmt);\n@@ -7768,8 +7779,16 @@ lower_oacc_head_mark (location_t loc, tree ddvar, tree clauses,\n       tag |= OLF_GANG_STATIC;\n     }\n \n-  /* In a parallel region, loops are implicitly INDEPENDENT.  */\n   omp_context *tgt = enclosing_target_ctx (ctx);\n+  if (!tgt || is_oacc_parallel_or_serial (tgt))\n+    ;\n+  else if (is_oacc_kernels (tgt))\n+    /* Not using this loops handling inside OpenACC 'kernels' regions.  */\n+    gcc_unreachable ();\n+  else\n+    gcc_unreachable ();\n+\n+  /* In a parallel region, loops are implicitly INDEPENDENT.  */\n   if (!tgt || is_oacc_parallel_or_serial (tgt))\n     tag |= OLF_INDEPENDENT;\n \n@@ -11805,8 +11824,14 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \tbreak;\n \n       case OMP_CLAUSE_FIRSTPRIVATE:\n-\tif (is_oacc_parallel_or_serial (ctx))\n-\t  goto oacc_firstprivate;\n+\tgcc_checking_assert (offloaded);\n+\tif (is_gimple_omp_oacc (ctx->stmt))\n+\t  {\n+\t    /* No 'firstprivate' clauses on OpenACC 'kernels'.  */\n+\t    gcc_checking_assert (!is_oacc_kernels (ctx));\n+\n+\t    goto oacc_firstprivate;\n+\t  }\n \tmap_cnt++;\n \tvar = OMP_CLAUSE_DECL (c);\n \tif (!omp_is_reference (var)\n@@ -11831,8 +11856,14 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \tbreak;\n \n       case OMP_CLAUSE_PRIVATE:\n+\tgcc_checking_assert (offloaded);\n \tif (is_gimple_omp_oacc (ctx->stmt))\n-\t  break;\n+\t  {\n+\t    /* No 'private' clauses on OpenACC 'kernels'.  */\n+\t    gcc_checking_assert (!is_oacc_kernels (ctx));\n+\n+\t    break;\n+\t  }\n \tvar = OMP_CLAUSE_DECL (c);\n \tif (is_variable_sized (var))\n \t  {\n@@ -12195,7 +12226,7 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \t    break;\n \n \t  case OMP_CLAUSE_FIRSTPRIVATE:\n-\t    if (is_oacc_parallel_or_serial (ctx))\n+\t    if (is_gimple_omp_oacc (ctx->stmt))\n \t      goto oacc_firstprivate_map;\n \t    ovar = OMP_CLAUSE_DECL (c);\n \t    if (omp_is_reference (ovar))\n@@ -12799,7 +12830,7 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n       gimple_seq fork_seq = NULL;\n       gimple_seq join_seq = NULL;\n \n-      if (is_oacc_parallel_or_serial (ctx))\n+      if (offloaded && is_gimple_omp_oacc (ctx->stmt))\n \t{\n \t  /* If there are reductions on the offloaded region itself, treat\n \t     them as a dummy GANG loop.  */"}]}