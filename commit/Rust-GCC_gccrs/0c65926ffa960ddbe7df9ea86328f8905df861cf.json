{"sha": "0c65926ffa960ddbe7df9ea86328f8905df861cf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGM2NTkyNmZmYTk2MGRkYmU3ZGY5ZWE4NjMyOGY4OTA1ZGY4NjFjZg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-06-18T11:39:43Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-06-18T11:39:43Z"}, "message": "Avoid undefined behaviour in std::byte operators (LWG 2950)\n\n\t* include/c_global/cstddef (std::byte): Perform arithmetic operations\n\tin unsigned int to avoid promotion (LWG 2950).\n\nFrom-SVN: r272415", "tree": {"sha": "597b8d18820d74dc4f718ec184bdf2ab2798d236", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/597b8d18820d74dc4f718ec184bdf2ab2798d236"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c65926ffa960ddbe7df9ea86328f8905df861cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c65926ffa960ddbe7df9ea86328f8905df861cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c65926ffa960ddbe7df9ea86328f8905df861cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c65926ffa960ddbe7df9ea86328f8905df861cf/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ed12b58ef022b5186edc6c31eb05addc828fd8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ed12b58ef022b5186edc6c31eb05addc828fd8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ed12b58ef022b5186edc6c31eb05addc828fd8b"}], "stats": {"total": 79, "additions": 33, "deletions": 46}, "files": [{"sha": "4570ab147d5104cb9b14cdc724695f6259161dfe", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c65926ffa960ddbe7df9ea86328f8905df861cf/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c65926ffa960ddbe7df9ea86328f8905df861cf/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0c65926ffa960ddbe7df9ea86328f8905df861cf", "patch": "@@ -1,3 +1,8 @@\n+2019-06-18  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/c_global/cstddef (std::byte): Perform arithmetic operations\n+\tin unsigned int to avoid promotion (LWG 2950).\n+\n 2019-06-17  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* testsuite/20_util/allocator/1.cc: Add sized delete, which fixes a"}, {"sha": "c94c938f6f3c3232e8008eac74be450edf6e1244", "filename": "libstdc++-v3/include/c_global/cstddef", "status": "modified", "additions": 28, "deletions": 46, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c65926ffa960ddbe7df9ea86328f8905df861cf/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstddef", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c65926ffa960ddbe7df9ea86328f8905df861cf/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstddef", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstddef?ref=0c65926ffa960ddbe7df9ea86328f8905df861cf", "patch": "@@ -120,71 +120,53 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _IntegerType>\n     using __byte_op_t = typename __byte_operand<_IntegerType>::__type;\n \n-  template<typename _IntegerType>\n-    constexpr __byte_op_t<_IntegerType>&\n-    operator<<=(byte& __b, _IntegerType __shift) noexcept\n-    { return __b = byte(static_cast<unsigned char>(__b) << __shift); }\n-\n   template<typename _IntegerType>\n     constexpr __byte_op_t<_IntegerType>\n     operator<<(byte __b, _IntegerType __shift) noexcept\n-    { return byte(static_cast<unsigned char>(__b) << __shift); }\n-\n-  template<typename _IntegerType>\n-    constexpr __byte_op_t<_IntegerType>&\n-    operator>>=(byte& __b, _IntegerType __shift) noexcept\n-    { return __b = byte(static_cast<unsigned char>(__b) >> __shift); }\n+    { return (byte)(unsigned char)((unsigned)__b << __shift); }\n \n   template<typename _IntegerType>\n     constexpr __byte_op_t<_IntegerType>\n     operator>>(byte __b, _IntegerType __shift) noexcept\n-    { return byte(static_cast<unsigned char>(__b) >> __shift); }\n-\n-  constexpr byte&\n-  operator|=(byte& __l, byte __r) noexcept\n-  {\n-    return __l =\n-      byte(static_cast<unsigned char>(__l) | static_cast<unsigned char>(__r));\n-  }\n+    { return (byte)(unsigned char)((unsigned)__b >> __shift); }\n \n   constexpr byte\n   operator|(byte __l, byte __r) noexcept\n-  {\n-    return\n-      byte(static_cast<unsigned char>(__l) | static_cast<unsigned char>(__r));\n-  }\n-\n-  constexpr byte&\n-  operator&=(byte& __l, byte __r) noexcept\n-  {\n-   return __l =\n-     byte(static_cast<unsigned char>(__l) & static_cast<unsigned char>(__r));\n-  }\n+  { return (byte)(unsigned char)((unsigned)__l | (unsigned)__r); }\n \n   constexpr byte\n   operator&(byte __l, byte __r) noexcept\n-  {\n-    return\n-      byte(static_cast<unsigned char>(__l) & static_cast<unsigned char>(__r));\n-  }\n-\n-  constexpr byte&\n-  operator^=(byte& __l, byte __r) noexcept\n-  {\n-    return __l =\n-      byte(static_cast<unsigned char>(__l) ^ static_cast<unsigned char>(__r));\n-  }\n+  { return (byte)(unsigned char)((unsigned)__l & (unsigned)__r); }\n \n   constexpr byte\n   operator^(byte __l, byte __r) noexcept\n-  {\n-    return\n-      byte(static_cast<unsigned char>(__l) ^ static_cast<unsigned char>(__r));\n-  }\n+  { return (byte)(unsigned char)((unsigned)__l ^ (unsigned)__r); }\n \n   constexpr byte\n   operator~(byte __b) noexcept\n-  { return byte(~static_cast<unsigned char>(__b)); }\n+  { return (byte)(unsigned char)~(unsigned)__b; }\n+\n+  template<typename _IntegerType>\n+    constexpr __byte_op_t<_IntegerType>&\n+    operator<<=(byte& __b, _IntegerType __shift) noexcept\n+    { return __b = __b << __shift; }\n+\n+  template<typename _IntegerType>\n+    constexpr __byte_op_t<_IntegerType>&\n+    operator>>=(byte& __b, _IntegerType __shift) noexcept\n+    { return __b = __b >> __shift; }\n+\n+  constexpr byte&\n+  operator|=(byte& __l, byte __r) noexcept\n+  { return __l = __l | __r; }\n+\n+  constexpr byte&\n+  operator&=(byte& __l, byte __r) noexcept\n+  { return __l = __l & __r; }\n+\n+  constexpr byte&\n+  operator^=(byte& __l, byte __r) noexcept\n+  { return __l = __l ^ __r; }\n \n   template<typename _IntegerType>\n     constexpr _IntegerType"}]}