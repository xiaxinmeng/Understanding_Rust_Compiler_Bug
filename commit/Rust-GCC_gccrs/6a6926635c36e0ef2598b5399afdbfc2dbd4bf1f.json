{"sha": "6a6926635c36e0ef2598b5399afdbfc2dbd4bf1f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmE2OTI2NjM1YzM2ZTBlZjI1OThiNTM5OWFmZGJmYzJkYmQ0YmYxZg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2020-11-19T10:42:03Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-12-17T10:49:25Z"}, "message": "[Ada] Performance of CW_Membership\n\ngcc/ada/\n\n\t* libgnat/a-tags.ads, libgnat/a-tags.adb (CW_Membership): Move\n\tto spec to allow inlining.\n\ngcc/testsuite/\n\n\t* gnat.dg/debug15.adb: Remove fragile testcase.", "tree": {"sha": "337fd3f5c298bf6422dc32f4a0e5fb8d6fbe35b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/337fd3f5c298bf6422dc32f4a0e5fb8d6fbe35b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a6926635c36e0ef2598b5399afdbfc2dbd4bf1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a6926635c36e0ef2598b5399afdbfc2dbd4bf1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a6926635c36e0ef2598b5399afdbfc2dbd4bf1f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a6926635c36e0ef2598b5399afdbfc2dbd4bf1f/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68dd664912916c3bce87e95b2ddf12184e0c1b43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68dd664912916c3bce87e95b2ddf12184e0c1b43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68dd664912916c3bce87e95b2ddf12184e0c1b43"}], "stats": {"total": 117, "additions": 46, "deletions": 71}, "files": [{"sha": "7138f762239b0bf339180646c145b7341b2e3116", "filename": "gcc/ada/libgnat/a-tags.adb", "status": "modified", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a6926635c36e0ef2598b5399afdbfc2dbd4bf1f/gcc%2Fada%2Flibgnat%2Fa-tags.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a6926635c36e0ef2598b5399afdbfc2dbd4bf1f/gcc%2Fada%2Flibgnat%2Fa-tags.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-tags.adb?ref=6a6926635c36e0ef2598b5399afdbfc2dbd4bf1f", "patch": "@@ -30,7 +30,6 @@\n ------------------------------------------------------------------------------\n \n with Ada.Exceptions;\n-with Ada.Unchecked_Conversion;\n \n with System.HTable;\n with System.Storage_Elements; use System.Storage_Elements;\n@@ -96,12 +95,6 @@ package body Ada.Tags is\n    function To_Tag is\n      new Unchecked_Conversion (Integer_Address, Tag);\n \n-   function To_Addr_Ptr is\n-      new Ada.Unchecked_Conversion (System.Address, Addr_Ptr);\n-\n-   function To_Address is\n-     new Ada.Unchecked_Conversion (Tag, System.Address);\n-\n    function To_Dispatch_Table_Ptr is\n       new Ada.Unchecked_Conversion (Tag, Dispatch_Table_Ptr);\n \n@@ -114,9 +107,6 @@ package body Ada.Tags is\n    function To_Tag_Ptr is\n      new Ada.Unchecked_Conversion (System.Address, Tag_Ptr);\n \n-   function To_Type_Specific_Data_Ptr is\n-     new Ada.Unchecked_Conversion (System.Address, Type_Specific_Data_Ptr);\n-\n    -------------------------------\n    -- Inline_Always Subprograms --\n    -------------------------------\n@@ -125,40 +115,6 @@ package body Ada.Tags is\n    --  avoid defeating the frontend inlining mechanism and thus ensure the\n    --  generation of their correct debug info.\n \n-   -------------------\n-   -- CW_Membership --\n-   -------------------\n-\n-   --  Canonical implementation of Classwide Membership corresponding to:\n-\n-   --     Obj in Typ'Class\n-\n-   --  Each dispatch table contains a reference to a table of ancestors (stored\n-   --  in the first part of the Tags_Table) and a count of the level of\n-   --  inheritance \"Idepth\".\n-\n-   --  Obj is in Typ'Class if Typ'Tag is in the table of ancestors that are\n-   --  contained in the dispatch table referenced by Obj'Tag . Knowing the\n-   --  level of inheritance of both types, this can be computed in constant\n-   --  time by the formula:\n-\n-   --   TSD (Obj'tag).Tags_Table (TSD (Obj'tag).Idepth - TSD (Typ'tag).Idepth)\n-   --     = Typ'tag\n-\n-   function CW_Membership (Obj_Tag : Tag; Typ_Tag : Tag) return Boolean is\n-      Obj_TSD_Ptr : constant Addr_Ptr :=\n-        To_Addr_Ptr (To_Address (Obj_Tag) - DT_Typeinfo_Ptr_Size);\n-      Typ_TSD_Ptr : constant Addr_Ptr :=\n-        To_Addr_Ptr (To_Address (Typ_Tag) - DT_Typeinfo_Ptr_Size);\n-      Obj_TSD     : constant Type_Specific_Data_Ptr :=\n-        To_Type_Specific_Data_Ptr (Obj_TSD_Ptr.all);\n-      Typ_TSD     : constant Type_Specific_Data_Ptr :=\n-        To_Type_Specific_Data_Ptr (Typ_TSD_Ptr.all);\n-      Pos         : constant Integer := Obj_TSD.Idepth - Typ_TSD.Idepth;\n-   begin\n-      return Pos >= 0 and then Obj_TSD.Tags_Table (Pos) = Typ_Tag;\n-   end CW_Membership;\n-\n    ----------------------\n    -- Get_External_Tag --\n    ----------------------"}, {"sha": "203f7ca95d4c4b19e3860fa6b3659a560aafbaae", "filename": "gcc/ada/libgnat/a-tags.ads", "status": "modified", "additions": 46, "deletions": 4, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a6926635c36e0ef2598b5399afdbfc2dbd4bf1f/gcc%2Fada%2Flibgnat%2Fa-tags.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a6926635c36e0ef2598b5399afdbfc2dbd4bf1f/gcc%2Fada%2Flibgnat%2Fa-tags.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-tags.ads?ref=6a6926635c36e0ef2598b5399afdbfc2dbd4bf1f", "patch": "@@ -65,6 +65,7 @@\n --    length depends on the number of interfaces covered by a tagged type.\n \n with System.Storage_Elements;\n+with Ada.Unchecked_Conversion;\n \n package Ada.Tags is\n    pragma Preelaborate;\n@@ -501,10 +502,6 @@ private\n    --  dispatch table, return the tagged kind of a type in the context of\n    --  concurrency and limitedness.\n \n-   function CW_Membership (Obj_Tag : Tag; Typ_Tag : Tag) return Boolean;\n-   --  Given the tag of an object and the tag associated to a type, return\n-   --  true if Obj is in Typ'Class.\n-\n    function IW_Membership (This : System.Address; T : Tag) return Boolean;\n    --  Ada 2005 (AI-251): General routine that checks if a given object\n    --  implements a tagged type. Its common usage is to check if Obj is in\n@@ -623,4 +620,49 @@ private\n    --  This type is used by the frontend to generate the code that handles\n    --  dispatch table slots of types declared at the local level.\n \n+   -------------------\n+   -- CW_Membership --\n+   -------------------\n+\n+   function To_Address is\n+     new Ada.Unchecked_Conversion (Tag, System.Address);\n+\n+   function To_Addr_Ptr is\n+      new Ada.Unchecked_Conversion (System.Address, Addr_Ptr);\n+\n+   function To_Type_Specific_Data_Ptr is\n+     new Ada.Unchecked_Conversion (System.Address, Type_Specific_Data_Ptr);\n+\n+   --  Canonical implementation of Classwide Membership corresponding to:\n+\n+   --     Obj in Typ'Class\n+\n+   --  Each dispatch table contains a reference to a table of ancestors (stored\n+   --  in the first part of the Tags_Table) and a count of the level of\n+   --  inheritance \"Idepth\".\n+\n+   --  Obj is in Typ'Class if Typ'Tag is in the table of ancestors that are\n+   --  contained in the dispatch table referenced by Obj'Tag . Knowing the\n+   --  level of inheritance of both types, this can be computed in constant\n+   --  time by the formula:\n+\n+   --   TSD (Obj'tag).Tags_Table (TSD (Obj'tag).Idepth - TSD (Typ'tag).Idepth)\n+   --     = Typ'tag\n+\n+   function CW_Membership (Obj_Tag : Tag; Typ_Tag : Tag) return Boolean is\n+     (declare\n+         Obj_TSD_Ptr : constant Addr_Ptr :=\n+           To_Addr_Ptr (To_Address (Obj_Tag) - DT_Typeinfo_Ptr_Size);\n+         Typ_TSD_Ptr : constant Addr_Ptr :=\n+           To_Addr_Ptr (To_Address (Typ_Tag) - DT_Typeinfo_Ptr_Size);\n+         Obj_TSD     : constant Type_Specific_Data_Ptr :=\n+           To_Type_Specific_Data_Ptr (Obj_TSD_Ptr.all);\n+         Typ_TSD     : constant Type_Specific_Data_Ptr :=\n+           To_Type_Specific_Data_Ptr (Typ_TSD_Ptr.all);\n+         Pos         : constant Integer := Obj_TSD.Idepth - Typ_TSD.Idepth;\n+      begin\n+         Pos >= 0 and then Obj_TSD.Tags_Table (Pos) = Typ_Tag);\n+   --  Given the tag of an object and the tag associated to a type, return\n+   --  true if Obj is in Typ'Class.\n+\n end Ada.Tags;"}, {"sha": "75470e3c319751e0f7924367532217d788cdcf2d", "filename": "gcc/testsuite/gnat.dg/debug15.adb", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68dd664912916c3bce87e95b2ddf12184e0c1b43/gcc%2Ftestsuite%2Fgnat.dg%2Fdebug15.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68dd664912916c3bce87e95b2ddf12184e0c1b43/gcc%2Ftestsuite%2Fgnat.dg%2Fdebug15.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fdebug15.adb?ref=68dd664912916c3bce87e95b2ddf12184e0c1b43", "patch": "@@ -1,23 +0,0 @@\n--- { dg-do compile }\n--- { dg-options \"-g1\" }\n-\n-procedure Debug15 is\n-\n-   type Shape is abstract tagged record\n-      S : Integer;\n-   end record;\n-\n-   type Rectangle is new Shape with record\n-      R : Integer;\n-   end record;\n-\n-   X : Integer;\n-\n-   R: Rectangle := (1, 2);\n-   S: Shape'Class := R;\n-\n-begin\n-   X := 12;\n-end;\n-\n--- { dg-final { scan-assembler-not \"loc 2\" } }"}]}