{"sha": "52564551d3b21bc1cf08d87de8a0682764753c8a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTI1NjQ1NTFkM2IyMWJjMWNmMDhkODdkZThhMDY4Mjc2NDc1M2M4YQ==", "commit": {"author": {"name": "Julia Koval", "email": "julia.koval@intel.com", "date": "2017-03-06T16:08:59Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2017-03-06T16:08:59Z"}, "message": "Set incoming stack boundary to 128 for 64-bit targets\n\nFor 64-bit targets, the incoming stack of interrupt handler is aligned\nto 16 bytes.  Update ix86_minimum_incoming_stack_boundary to set the\nincoming stack boundary of interrupt handler to 128 for 64-bit targets.\n\ngcc/\n\n2017-03-06  Julia Koval  <julia.koval@intel.com>\n\n\tPR target/79793\n\t* config/i386/i386.c (ix86_minimum_incoming_stack_boundary): Set\n\tincoming stack boundary to 128 for 64-bit targets.\n\ngcc/testsuite/\n\n2017-03-06  Julia Koval  <julia.koval@intel.com>\n\n\tPR target/79793\n\t * gcc.target/i386/interrupt-12.c: Update scan-assembler-times\n\t directives.\n\t * gcc.target/i386/interrupt-13.c: Ditto.\n\t * gcc.target/i386/interrupt-14.c: Ditto.\n\t * gcc.target/i386/interrupt-15.c: Ditto.\n\nFrom-SVN: r245926", "tree": {"sha": "28504bd8ca4ac1f363d16631f8ba605e92ed0b9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/28504bd8ca4ac1f363d16631f8ba605e92ed0b9f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/52564551d3b21bc1cf08d87de8a0682764753c8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52564551d3b21bc1cf08d87de8a0682764753c8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52564551d3b21bc1cf08d87de8a0682764753c8a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52564551d3b21bc1cf08d87de8a0682764753c8a/comments", "author": {"login": "vaalfreja", "id": 5216345, "node_id": "MDQ6VXNlcjUyMTYzNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5216345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vaalfreja", "html_url": "https://github.com/vaalfreja", "followers_url": "https://api.github.com/users/vaalfreja/followers", "following_url": "https://api.github.com/users/vaalfreja/following{/other_user}", "gists_url": "https://api.github.com/users/vaalfreja/gists{/gist_id}", "starred_url": "https://api.github.com/users/vaalfreja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vaalfreja/subscriptions", "organizations_url": "https://api.github.com/users/vaalfreja/orgs", "repos_url": "https://api.github.com/users/vaalfreja/repos", "events_url": "https://api.github.com/users/vaalfreja/events{/privacy}", "received_events_url": "https://api.github.com/users/vaalfreja/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "345edb3701a0e99d10a532736f27675846ca5dec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/345edb3701a0e99d10a532736f27675846ca5dec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/345edb3701a0e99d10a532736f27675846ca5dec"}], "stats": {"total": 43, "additions": 29, "deletions": 14}, "files": [{"sha": "05001aa26e820218ac398a0fbeed55541570e4e8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52564551d3b21bc1cf08d87de8a0682764753c8a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52564551d3b21bc1cf08d87de8a0682764753c8a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=52564551d3b21bc1cf08d87de8a0682764753c8a", "patch": "@@ -1,3 +1,9 @@\n+2017-03-06  Julia Koval  <julia.koval@intel.com>\n+\n+\tPR target/79793\n+\t* config/i386/i386.c (ix86_minimum_incoming_stack_boundary): Set\n+\tincoming stack boundary to 128 for 64-bit targets.\n+\n 2017-03-06  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/79894"}, {"sha": "e705a3eb92363680841a2d153856147253a7e6c3", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52564551d3b21bc1cf08d87de8a0682764753c8a/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52564551d3b21bc1cf08d87de8a0682764753c8a/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=52564551d3b21bc1cf08d87de8a0682764753c8a", "patch": "@@ -13054,10 +13054,10 @@ ix86_minimum_incoming_stack_boundary (bool sibcall)\n {\n   unsigned int incoming_stack_boundary;\n \n-  /* Stack of interrupt handler is always aligned to MIN_STACK_BOUNDARY.\n-   */\n+  /* Stack of interrupt handler is aligned to 128 bits in 64bit\n+     mode.  */\n   if (cfun->machine->func_type != TYPE_NORMAL)\n-    incoming_stack_boundary = MIN_STACK_BOUNDARY;\n+    incoming_stack_boundary = TARGET_64BIT ? 128 : MIN_STACK_BOUNDARY;\n   /* Prefer the one specified at command line. */\n   else if (ix86_user_incoming_stack_boundary)\n     incoming_stack_boundary = ix86_user_incoming_stack_boundary;"}, {"sha": "798d89b2571cfbb468048fa4336ff1f0fa103781", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52564551d3b21bc1cf08d87de8a0682764753c8a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52564551d3b21bc1cf08d87de8a0682764753c8a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=52564551d3b21bc1cf08d87de8a0682764753c8a", "patch": "@@ -1,3 +1,12 @@\n+2017-03-06  Julia Koval  <julia.koval@intel.com>\n+\n+\tPR target/79793\n+\t * gcc.target/i386/interrupt-12.c: Update scan-assembler-times\n+\t directives.\n+\t * gcc.target/i386/interrupt-13.c: Ditto.\n+\t * gcc.target/i386/interrupt-14.c: Ditto.\n+\t * gcc.target/i386/interrupt-15.c: Ditto.\n+\n 2017-03-06  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/79822"}, {"sha": "078bbcf779862f109da00e41c463c585a8e513b3", "filename": "gcc/testsuite/gcc.target/i386/interrupt-12.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52564551d3b21bc1cf08d87de8a0682764753c8a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Finterrupt-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52564551d3b21bc1cf08d87de8a0682764753c8a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Finterrupt-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Finterrupt-12.c?ref=52564551d3b21bc1cf08d87de8a0682764753c8a", "patch": "@@ -17,12 +17,12 @@ fn1 (void *frame, uword_t error)\n /* { dg-final { scan-assembler-not \"(push|pop)l\\[\\\\t \\]*%edi\" { target ia32 } } } */\n /* { dg-final { scan-assembler-not \"(push|pop)q\\[\\\\t \\]*%rax\" { target { { ! ia32 } &&  nonpic } } } } */\n /* { dg-final { scan-assembler-not \"(push|pop)q\\[\\\\t \\]*%r\\[0-9\\]+\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler-times \"push(?:l|q)\\[\\\\t \\]*%(?:r|e)bp\" 1 } } */\n-/* { dg-final { scan-assembler-times \"leave\" 1 { target nonpic } } } */\n+/* { dg-final { scan-assembler-times \"pushl\\[\\\\t \\]*%ebp\" 1 { target ia32 } } } */\n+/* { dg-final { scan-assembler-times \"leave\" 1 { target { ia32 && nonpic } } } } */\n /* { dg-final { scan-assembler-times \"pushl\\[\\\\t \\]*%eax\" 1 { target ia32 } } } */\n /* { dg-final { scan-assembler-times \"movl\\[\\\\t \\]*-4\\\\(%ebp\\\\),\\[\\\\t \\]*%eax\" 1 { target ia32 } } } */\n /* { dg-final { scan-assembler-times \"pushq\\[\\\\t \\]*%rdi\" 1 { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler-times \"movq\\[\\\\t \\]*-8\\\\(%(?:r|e)bp\\\\),\\[\\\\t \\]*%rdi\" 1 { target { { ! ia32 } && nonpic } } } } */\n+/* { dg-final { scan-assembler-times \"popq\\[\\\\t \\]*%rdi\" 1 { target { ! ia32 } } } } */\n /* { dg-final { scan-assembler \"(addl|leal).*4.*%esp\" { target ia32 } } } */\n /* { dg-final { scan-assembler \"(add|lea)(?:l|q)\\[\\\\t \\]*\\\\\\$?8.*,\\[\\\\t \\]*%\\[re\\]?sp\" { target { ! ia32 } } } } */\n /* { dg-final { scan-assembler-times \"iret\" 1 { target ia32 } } } */"}, {"sha": "77ee3a510701adc0bc4fd71dc8ecd5257a83c112", "filename": "gcc/testsuite/gcc.target/i386/interrupt-13.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52564551d3b21bc1cf08d87de8a0682764753c8a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Finterrupt-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52564551d3b21bc1cf08d87de8a0682764753c8a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Finterrupt-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Finterrupt-13.c?ref=52564551d3b21bc1cf08d87de8a0682764753c8a", "patch": "@@ -17,12 +17,12 @@ fn1 (void *frame, uword_t error)\n /* { dg-final { scan-assembler-not \"(push|pop)l\\[\\\\t \\]*%edi\" { target ia32 } } } */\n /* { dg-final { scan-assembler-not \"(push|pop)q\\[\\\\t \\]*%rax\" { target { { ! ia32 } && nonpic } } } } */\n /* { dg-final { scan-assembler-not \"(push|pop)q\\[\\\\t \\]*%r\\[0-9\\]+\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler-times \"push(?:l|q)\\[\\\\t \\]*%(?:r|e)bp\" 1 } } */\n-/* { dg-final { scan-assembler-times \"leave\" 1 { target nonpic } } } */\n+/* { dg-final { scan-assembler-times \"pushl\\[\\\\t \\]*%ebp\" 1 { target ia32 } } } */\n+/* { dg-final { scan-assembler-times \"leave\" 1 { target { ia32 && nonpic } } } } */\n /* { dg-final { scan-assembler-times \"pushl\\[\\\\t \\]*%eax\" 1 { target ia32 } } } */\n /* { dg-final { scan-assembler-times \"movl\\[\\\\t \\]*-4\\\\(%ebp\\\\),\\[\\\\t \\]*%eax\" 1 { target ia32 } } } */\n /* { dg-final { scan-assembler-times \"pushq\\[\\\\t \\]*%rdi\" 1 { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler-times \"movq\\[\\\\t \\]*-8\\\\(%(?:r|e)bp\\\\),\\[\\\\t \\]*%rdi\" 1 { target { { ! ia32 } && nonpic } } } } */\n+/* { dg-final { scan-assembler-times \"popq\\[\\\\t \\]*%rdi\" 1 { target { ! ia32 } } } } */\n /* { dg-final { scan-assembler \"(addl|leal).*4.*%esp\" { target ia32 } } } */\n /* { dg-final { scan-assembler \"(add|lea)(?:l|q)\\[\\\\t \\]*\\\\\\$?8.*,\\[\\\\t \\]*%\\[re\\]?sp\" { target { ! ia32 } } } } */\n /* { dg-final { scan-assembler-times \"iret\" 1 { target ia32 } } } */"}, {"sha": "92b3cb014df317925ec06a685083062aaab18bca", "filename": "gcc/testsuite/gcc.target/i386/interrupt-14.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52564551d3b21bc1cf08d87de8a0682764753c8a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Finterrupt-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52564551d3b21bc1cf08d87de8a0682764753c8a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Finterrupt-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Finterrupt-14.c?ref=52564551d3b21bc1cf08d87de8a0682764753c8a", "patch": "@@ -23,10 +23,10 @@ fn2 (void *frame)\n /* { dg-final { scan-assembler-not \"(push|pop)(l|q)\\[\\\\t \\]*%(r|e)si\" } } */\n /* { dg-final { scan-assembler-not \"(push|pop)q\\[\\\\t \\]*%r\\[8-9\\]+\" { target { ! ia32 } } } } */\n /* { dg-final { scan-assembler-not \"(push|pop)q\\[\\\\t \\]*%r1\\[0-5\\]+\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler-times \"push(?:l|q)\\[\\\\t \\]*%(?:r|e)bp\" 2 } } */\n+/* { dg-final { scan-assembler-times \"pushl\\[\\\\t \\]*%ebp\" 2 { target ia32 } } } */\n /* { dg-final { scan-assembler-times \"leave\" 2 { target ia32 } } } */\n /* { dg-final { scan-assembler-times \"pushq\\[\\\\t \\]*%rdi\" 2 { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler-times \"movq\\[\\\\t \\]*-8\\\\(%(?:r|e)bp\\\\),\\[\\\\t \\]*%rdi\" 2 { target { { ! ia32 } && nonpic } } } } */\n+/* { dg-final { scan-assembler-times \"popq\\[\\\\t \\]*%rdi\" 2 { target { ! ia32 } } } } */\n /* { dg-final { scan-assembler-times \"iret\" 2 { target ia32 } } } */\n /* { dg-final { scan-assembler-times \"iretq\" 2 { target { ! ia32 } } } } */\n /* { dg-final { scan-assembler-times \"\\tcld\" 2 } } */"}, {"sha": "2a0d260cfe6ae9c10997b7bb65f1daa184a6c011", "filename": "gcc/testsuite/gcc.target/i386/interrupt-15.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52564551d3b21bc1cf08d87de8a0682764753c8a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Finterrupt-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52564551d3b21bc1cf08d87de8a0682764753c8a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Finterrupt-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Finterrupt-15.c?ref=52564551d3b21bc1cf08d87de8a0682764753c8a", "patch": "@@ -24,12 +24,12 @@ fn2 (void *frame, uword_t error)\n /* { dg-final { scan-assembler-not \"(push|pop)l\\[\\\\t \\]*%edi\" { target ia32 } } } */\n /* { dg-final { scan-assembler-not \"(push|pop)q\\[\\\\t \\]*%rax\" { target { { ! ia32 } && nonpic } } } } */\n /* { dg-final { scan-assembler-not \"(push|pop)q\\[\\\\t \\]*%r\\[0-9\\]+\" { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler-times \"push(?:l|q)\\[\\\\t \\]*%(?:r|e)bp\" 2 } } */\n-/* { dg-final { scan-assembler-times \"leave\" 2 { target nonpic } } } */\n+/* { dg-final { scan-assembler-times \"pushl\\[\\\\t \\]*%ebp\" 2 { target ia32 } } } */\n+/* { dg-final { scan-assembler-times \"leave\" 2 { target { ia32 && nonpic } } } } */\n /* { dg-final { scan-assembler-times \"pushl\\[\\\\t \\]*%eax\" 2 { target ia32 } } } */\n /* { dg-final { scan-assembler-times \"movl\\[\\\\t \\]*-4\\\\(%ebp\\\\),\\[\\\\t \\]*%eax\" 2 { target ia32 } } } */\n /* { dg-final { scan-assembler-times \"pushq\\[\\\\t \\]*%rdi\" 2 { target { ! ia32 } } } } */\n-/* { dg-final { scan-assembler-times \"movq\\[\\\\t \\]*-8\\\\(%(?:r|e)bp\\\\),\\[\\\\t \\]*%rdi\" 2 { target { { ! ia32 } && nonpic } } } } */\n+/* { dg-final { scan-assembler-times \"popq\\[\\\\t \\]*%rdi\" 2 { target { ! ia32 } } } } */\n /* { dg-final { scan-assembler \"(addl|leal).*4.*%esp\" { target ia32 } } } */\n /* { dg-final { scan-assembler \"(add|lea)(?:l|q)\\[\\\\t \\]*\\\\\\$?8.*,\\[\\\\t \\]*%\\[re\\]?sp\" { target { ! ia32 } } } } */\n /* { dg-final { scan-assembler-times \"iret\" 2 { target ia32 } } } */"}]}