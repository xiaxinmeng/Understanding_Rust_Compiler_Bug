{"sha": "1834f167eee01275fe4e80508f792065e1d12f80", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTgzNGYxNjdlZWUwMTI3NWZlNGU4MDUwOGY3OTIwNjVlMWQxMmY4MA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2008-09-10T17:37:30Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2008-09-10T17:37:30Z"}, "message": "ctype_members.cc (ctype<char>::_M_narrow_init, [...]): Don't define here.\n\n2008-09-10  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* config/locale/darwin/ctype_members.cc (ctype<char>::_M_narrow_init,\n\tctype<char>::_M_widen_init): Don't define here.\n\t* config/locale/gnu/ctype_members.cc: Likewise.\n\t* config/locale/generic/ctype_members.cc: Likewise.\n\t* src/ctype.cc: Define here.\n\nFrom-SVN: r140240", "tree": {"sha": "a4315e53b08c6efaaa2a6c4127328ef6cada495d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a4315e53b08c6efaaa2a6c4127328ef6cada495d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1834f167eee01275fe4e80508f792065e1d12f80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1834f167eee01275fe4e80508f792065e1d12f80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1834f167eee01275fe4e80508f792065e1d12f80", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1834f167eee01275fe4e80508f792065e1d12f80/comments", "author": null, "committer": null, "parents": [{"sha": "7666351c39bab60c8c5721d03816df8f947a385b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7666351c39bab60c8c5721d03816df8f947a385b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7666351c39bab60c8c5721d03816df8f947a385b"}], "stats": {"total": 174, "additions": 50, "deletions": 124}, "files": [{"sha": "03371b4c421f3c2bb6865867190baa9b88077796", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1834f167eee01275fe4e80508f792065e1d12f80/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1834f167eee01275fe4e80508f792065e1d12f80/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=1834f167eee01275fe4e80508f792065e1d12f80", "patch": "@@ -1,3 +1,11 @@\n+2008-09-10  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* config/locale/darwin/ctype_members.cc (ctype<char>::_M_narrow_init,\n+\tctype<char>::_M_widen_init): Don't define here.\n+\t* config/locale/gnu/ctype_members.cc: Likewise.\n+\t* config/locale/generic/ctype_members.cc: Likewise.\n+\t* src/ctype.cc: Define here.\n+\n 2008-09-10  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR libstdc++/37455"}, {"sha": "63a422c396ae5942a70ce3409b39cb614acd8af3", "filename": "libstdc++-v3/config/locale/darwin/ctype_members.cc", "status": "modified", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1834f167eee01275fe4e80508f792065e1d12f80/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fdarwin%2Fctype_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1834f167eee01275fe4e80508f792065e1d12f80/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fdarwin%2Fctype_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fdarwin%2Fctype_members.cc?ref=1834f167eee01275fe4e80508f792065e1d12f80", "patch": "@@ -42,47 +42,6 @@\n \n namespace std\n {\n-  // Fill in the narrowing cache and flag whether all values are\n-  // valid or not.  _M_narrow_ok is set to 2 if memcpy can't\n-  // be used.\n-  void\n-  ctype<char>::\n-  _M_narrow_init() const\n-  {\n-    char __tmp[sizeof(_M_narrow)];\n-    for (size_t __i = 0; __i < sizeof(_M_narrow); ++__i)\n-      __tmp[__i] = __i;\n-    do_narrow(__tmp, __tmp + sizeof(__tmp), 0, _M_narrow);\n-    \n-    _M_narrow_ok = 1;\n-    if (__builtin_memcmp(__tmp, _M_narrow, sizeof(_M_narrow)))\n-      _M_narrow_ok = 2;\n-    else\n-      {\n-\t// Deal with the special case of zero: renarrow with a\n-\t// different default and compare.\n-\tchar __c;\n-\tdo_narrow(__tmp, __tmp + 1, 1, &__c);\n-\tif (__c == 1)\n-\t  _M_narrow_ok = 2;\n-      }\n-  }\n-\n-  void\n-  ctype<char>::\n-  _M_widen_init() const\n-  {\n-    char __tmp[sizeof(_M_widen)];\n-    for (size_t __i = 0; __i < sizeof(_M_widen); ++__i)\n-      __tmp[__i] = __i;\n-    do_widen(__tmp, __tmp + sizeof(__tmp), _M_widen);\n-    \n-    _M_widen_ok = 1;\n-    // Set _M_widen_ok to 2 if memcpy can't be used.\n-    if (__builtin_memcmp(__tmp, _M_widen, sizeof(_M_widen)))\n-      _M_widen_ok = 2;\n-  }\n-\n   // NB: The other ctype<char> specializations are in src/locale.cc and\n   // various /config/os/* files.\n "}, {"sha": "6b4fbd7ea7d9edffcefc62d55cd400cc45e4a3ea", "filename": "libstdc++-v3/config/locale/generic/ctype_members.cc", "status": "modified", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1834f167eee01275fe4e80508f792065e1d12f80/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fctype_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1834f167eee01275fe4e80508f792065e1d12f80/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fctype_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fctype_members.cc?ref=1834f167eee01275fe4e80508f792065e1d12f80", "patch": "@@ -41,47 +41,6 @@\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n-  // Fill in the narrowing cache and flag whether all values are\n-  // valid or not.  _M_narrow_ok is set to 2 if memcpy can't\n-  // be used.\n-  void\n-  ctype<char>::\n-  _M_narrow_init() const\n-  {\n-    char __tmp[sizeof(_M_narrow)];\n-    for (size_t __i = 0; __i < sizeof(_M_narrow); ++__i)\n-      __tmp[__i] = __i;\n-    do_narrow(__tmp, __tmp + sizeof(__tmp), 0, _M_narrow);\n-    \n-    _M_narrow_ok = 1;\n-    if (__builtin_memcmp(__tmp, _M_narrow, sizeof(_M_narrow)))\n-      _M_narrow_ok = 2;\n-    else\n-      {\n-\t// Deal with the special case of zero: renarrow with a\n-\t// different default and compare.\n-\tchar __c;\n-\tdo_narrow(__tmp, __tmp + 1, 1, &__c);\n-\tif (__c == 1)\n-\t  _M_narrow_ok = 2;\n-      }\n-  }\n-\n-  void\n-  ctype<char>::\n-  _M_widen_init() const\n-  {\n-    char __tmp[sizeof(_M_widen)];\n-    for (size_t __i = 0; __i < sizeof(_M_widen); ++__i)\n-      __tmp[__i] = __i;\n-    do_widen(__tmp, __tmp + sizeof(__tmp), _M_widen);\n-    \n-    _M_widen_ok = 1;\n-    // Set _M_widen_ok to 2 if memcpy can't be used.\n-    if (__builtin_memcmp(__tmp, _M_widen, sizeof(_M_widen)))\n-      _M_widen_ok = 2;\n-  }\n-\n   // NB: The other ctype<char> specializations are in src/locale.cc and\n   // various /config/os/* files.\n   ctype_byname<char>::ctype_byname(const char* __s, size_t __refs)"}, {"sha": "9e517605914266551f62a9c3a1d323d0bcbddcbd", "filename": "libstdc++-v3/config/locale/gnu/ctype_members.cc", "status": "modified", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1834f167eee01275fe4e80508f792065e1d12f80/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fctype_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1834f167eee01275fe4e80508f792065e1d12f80/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fctype_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fctype_members.cc?ref=1834f167eee01275fe4e80508f792065e1d12f80", "patch": "@@ -40,47 +40,6 @@\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n-  // Fill in the narrowing cache and flag whether all values are\n-  // valid or not.  _M_narrow_ok is set to 2 if memcpy can't\n-  // be used.\n-  void\n-  ctype<char>::\n-  _M_narrow_init() const\n-  {\n-    char __tmp[sizeof(_M_narrow)];\n-    for (size_t __i = 0; __i < sizeof(_M_narrow); ++__i)\n-      __tmp[__i] = __i;\n-    do_narrow(__tmp, __tmp + sizeof(__tmp), 0, _M_narrow);\n-    \n-    _M_narrow_ok = 1;\n-    if (__builtin_memcmp(__tmp, _M_narrow, sizeof(_M_narrow)))\n-      _M_narrow_ok = 2;\n-    else\n-      {\n-\t// Deal with the special case of zero: renarrow with a\n-\t// different default and compare.\n-\tchar __c;\n-\tdo_narrow(__tmp, __tmp + 1, 1, &__c);\n-\tif (__c == 1)\n-\t  _M_narrow_ok = 2;\n-      }\n-  }\n-\n-  void\n-  ctype<char>::\n-  _M_widen_init() const\n-  {\n-    char __tmp[sizeof(_M_widen)];\n-    for (size_t __i = 0; __i < sizeof(_M_widen); ++__i)\n-      __tmp[__i] = __i;\n-    do_widen(__tmp, __tmp + sizeof(__tmp), _M_widen);\n-    \n-    _M_widen_ok = 1;\n-    // Set _M_widen_ok to 2 if memcpy can't be used.\n-    if (__builtin_memcmp(__tmp, _M_widen, sizeof(_M_widen)))\n-      _M_widen_ok = 2;\n-  }\n-\n   // NB: The other ctype<char> specializations are in src/locale.cc and\n   // various /config/os/* files.\n   ctype_byname<char>::ctype_byname(const char* __s, size_t __refs)"}, {"sha": "cb9c853906e8c3bb57bd56b0d7e717bf4f92e507", "filename": "libstdc++-v3/src/ctype.cc", "status": "modified", "additions": 42, "deletions": 1, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1834f167eee01275fe4e80508f792065e1d12f80/libstdc%2B%2B-v3%2Fsrc%2Fctype.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1834f167eee01275fe4e80508f792065e1d12f80/libstdc%2B%2B-v3%2Fsrc%2Fctype.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fctype.cc?ref=1834f167eee01275fe4e80508f792065e1d12f80", "patch": "@@ -1,5 +1,5 @@\n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2004, 2005,\n-// 2006, 2007\n+// 2006, 2007, 2008\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -87,6 +87,47 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       delete[] this->table(); \n   }\n \n+  // Fill in the narrowing cache and flag whether all values are\n+  // valid or not.  _M_narrow_ok is set to 2 if memcpy can't\n+  // be used.\n+  void\n+  ctype<char>::\n+  _M_narrow_init() const\n+  {\n+    char __tmp[sizeof(_M_narrow)];\n+    for (size_t __i = 0; __i < sizeof(_M_narrow); ++__i)\n+      __tmp[__i] = __i;\n+    do_narrow(__tmp, __tmp + sizeof(__tmp), 0, _M_narrow);\n+    \n+    _M_narrow_ok = 1;\n+    if (__builtin_memcmp(__tmp, _M_narrow, sizeof(_M_narrow)))\n+      _M_narrow_ok = 2;\n+    else\n+      {\n+\t// Deal with the special case of zero: renarrow with a\n+\t// different default and compare.\n+\tchar __c;\n+\tdo_narrow(__tmp, __tmp + 1, 1, &__c);\n+\tif (__c == 1)\n+\t  _M_narrow_ok = 2;\n+      }\n+  }\n+\n+  void\n+  ctype<char>::\n+  _M_widen_init() const\n+  {\n+    char __tmp[sizeof(_M_widen)];\n+    for (size_t __i = 0; __i < sizeof(_M_widen); ++__i)\n+      __tmp[__i] = __i;\n+    do_widen(__tmp, __tmp + sizeof(__tmp), _M_widen);\n+    \n+    _M_widen_ok = 1;\n+    // Set _M_widen_ok to 2 if memcpy can't be used.\n+    if (__builtin_memcmp(__tmp, _M_widen, sizeof(_M_widen)))\n+      _M_widen_ok = 2;\n+  }\n+\n #ifdef _GLIBCXX_USE_WCHAR_T\n   ctype<wchar_t>::ctype(size_t __refs) \n   : __ctype_abstract_base<wchar_t>(__refs), "}]}