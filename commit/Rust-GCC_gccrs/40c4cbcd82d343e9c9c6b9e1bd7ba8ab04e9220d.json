{"sha": "40c4cbcd82d343e9c9c6b9e1bd7ba8ab04e9220d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDBjNGNiY2Q4MmQzNDNlOWM5YzZiOWUxYmQ3YmE4YWIwNGU5MjIwZA==", "commit": {"author": {"name": "DJ Delorie", "email": "dj@gcc.gnu.org", "date": "2011-10-22T01:35:29Z"}, "committer": {"name": "DJ Delorie", "email": "dj@gcc.gnu.org", "date": "2011-10-22T01:35:29Z"}, "message": "obstack.h [!GNUC] (obstack_free): Avoid cast to int.\n\n* obstack.h [!GNUC] (obstack_free): Avoid cast to int.\n* ansidecl.h (ENUM_BITFIELD): Always use enum in C++\n\nFrom-SVN: r180321", "tree": {"sha": "9a220a1521636f19743599c3ac312bb94cc39c8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a220a1521636f19743599c3ac312bb94cc39c8d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40c4cbcd82d343e9c9c6b9e1bd7ba8ab04e9220d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40c4cbcd82d343e9c9c6b9e1bd7ba8ab04e9220d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40c4cbcd82d343e9c9c6b9e1bd7ba8ab04e9220d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40c4cbcd82d343e9c9c6b9e1bd7ba8ab04e9220d/comments", "author": null, "committer": null, "parents": [{"sha": "799ae3ed416181efd294605916715628f62766ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/799ae3ed416181efd294605916715628f62766ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/799ae3ed416181efd294605916715628f62766ad"}], "stats": {"total": 20, "additions": 15, "deletions": 5}, "files": [{"sha": "d5701f407722367e611de8ea6529d53eb450d644", "filename": "include/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40c4cbcd82d343e9c9c6b9e1bd7ba8ab04e9220d/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40c4cbcd82d343e9c9c6b9e1bd7ba8ab04e9220d/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=40c4cbcd82d343e9c9c6b9e1bd7ba8ab04e9220d", "patch": "@@ -1,3 +1,11 @@\n+2011-10-21  Ulrich Drepper  <drepper@gmail.com>\n+\n+\t* obstack.h [!GNUC] (obstack_free): Avoid cast to int.\n+\n+2011-10-21  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* ansidecl.h (ENUM_BITFIELD): Always use enum in C++\n+\n 2011-09-28  Doug Evans  <dje@google.com>\n \n \t* timeval-utils.h: New file."}, {"sha": "23d85bf0e1617bebd508e0dbd3e0bd3748d5614b", "filename": "include/ansidecl.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40c4cbcd82d343e9c9c6b9e1bd7ba8ab04e9220d/include%2Fansidecl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40c4cbcd82d343e9c9c6b9e1bd7ba8ab04e9220d/include%2Fansidecl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fansidecl.h?ref=40c4cbcd82d343e9c9c6b9e1bd7ba8ab04e9220d", "patch": "@@ -416,10 +416,12 @@ So instead we use the macro below and test it against specific values.  */\n #define EXPORTED_CONST const\n #endif\n \n-/* Be conservative and only use enum bitfields with GCC.\n+/* Be conservative and only use enum bitfields with C++ or GCC.\n    FIXME: provide a complete autoconf test for buggy enum bitfields.  */\n \n-#if (GCC_VERSION > 2000)\n+#ifdef __cplusplus\n+#define ENUM_BITFIELD(TYPE) enum TYPE\n+#elif (GCC_VERSION > 2000)\n #define ENUM_BITFIELD(TYPE) __extension__ enum TYPE\n #else\n #define ENUM_BITFIELD(TYPE) unsigned int"}, {"sha": "23487ba4f4ae912f3d94608d852f561e2b183153", "filename": "include/obstack.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40c4cbcd82d343e9c9c6b9e1bd7ba8ab04e9220d/include%2Fobstack.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40c4cbcd82d343e9c9c6b9e1bd7ba8ab04e9220d/include%2Fobstack.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fobstack.h?ref=40c4cbcd82d343e9c9c6b9e1bd7ba8ab04e9220d", "patch": "@@ -532,9 +532,9 @@ __extension__\t\t\t\t\t\t\t\t\\\n # define obstack_free(h,obj)\t\t\t\t\t\t\\\n ( (h)->temp = (char *) (obj) - (char *) (h)->chunk,\t\t\t\\\n   (((h)->temp > 0 && (h)->temp < (h)->chunk_limit - (char *) (h)->chunk)\\\n-   ? (int) ((h)->next_free = (h)->object_base\t\t\t\t\\\n-\t    = (h)->temp + (char *) (h)->chunk)\t\t\t\t\\\n-   : (((obstack_free) ((h), (h)->temp + (char *) (h)->chunk), 0), 0)))\n+   ? (((h)->next_free = (h)->object_base\t\t\t\t\\\n+\t    = (h)->temp + (char *) (h)->chunk), 0)\t\t\t\\\n+   : ((obstack_free) ((h), (h)->temp + (char *) (h)->chunk), 0)))\n \n #endif /* not __GNUC__ or not __STDC__ */\n "}]}