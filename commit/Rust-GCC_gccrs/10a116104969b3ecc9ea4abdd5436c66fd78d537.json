{"sha": "10a116104969b3ecc9ea4abdd5436c66fd78d537", "node_id": "C_kwDOANBUbNoAKDEwYTExNjEwNDk2OWIzZWNjOWVhNGFiZGQ1NDM2YzY2ZmQ3OGQ1Mzc", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2022-09-30T11:27:32Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2022-09-30T11:37:18Z"}, "message": "Fortran: Update use_device_ptr for OpenMP 5.1 [PR105318]\n\nOpenMP 5.1 added has_device_addr and relaxed the restrictions for\nuse_device_ptr, including processing non-type(c_ptr) arguments as\nif has_device_addr was used. (There is a semantic difference.)\n\nFor completeness, the likewise change was done for 'use_device_ptr',\nwhere non-type(c_ptr) arguments now use use_device_addr.\n\nFinally, a warning for 'device(omp_{initial,invalid}_device)' was\nsilenced on the way as affecting the new testcase.\n\n\tPR fortran/105318\n\ngcc/fortran/ChangeLog:\n\t* openmp.cc (resolve_omp_clauses): Update is_device_ptr restrictions\n\tfor OpenMP 5.1 and map to has_device_addr where applicable; map\n\tuse_device_ptr to use_device_addr where applicable.\n\tSilence integer-range warning for device(omp_{initial,invalid}_device).\n\nlibgomp/ChangeLog:\n\t* testsuite/libgomp.fortran/is_device_ptr-2.f90: New test.\n\ngcc/testsuite/ChangeLog:\n\t* gfortran.dg/gomp/is_device_ptr-1.f90: Remove dg-error.\n\t* gfortran.dg/gomp/is_device_ptr-2.f90: Likewise.\n\t* gfortran.dg/gomp/is_device_ptr-3.f90: Update tree-scan-dump.", "tree": {"sha": "76f910b475ce550a88ea27ec3b95dd1770adbdfb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/76f910b475ce550a88ea27ec3b95dd1770adbdfb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/10a116104969b3ecc9ea4abdd5436c66fd78d537", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10a116104969b3ecc9ea4abdd5436c66fd78d537", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10a116104969b3ecc9ea4abdd5436c66fd78d537", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10a116104969b3ecc9ea4abdd5436c66fd78d537/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b8ffbb8a0cadd68bf7887c5655a29ec04060111", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b8ffbb8a0cadd68bf7887c5655a29ec04060111", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b8ffbb8a0cadd68bf7887c5655a29ec04060111"}], "stats": {"total": 242, "additions": 215, "deletions": 27}, "files": [{"sha": "ce719bd5d92dc40185a4d0215d5db13b7956acba", "filename": "gcc/fortran/openmp.cc", "status": "modified", "additions": 49, "deletions": 21, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a116104969b3ecc9ea4abdd5436c66fd78d537/gcc%2Ffortran%2Fopenmp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a116104969b3ecc9ea4abdd5436c66fd78d537/gcc%2Ffortran%2Fopenmp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fopenmp.cc?ref=10a116104969b3ecc9ea4abdd5436c66fd78d537", "patch": "@@ -6511,7 +6511,7 @@ static void\n resolve_omp_clauses (gfc_code *code, gfc_omp_clauses *omp_clauses,\n \t\t     gfc_namespace *ns, bool openacc = false)\n {\n-  gfc_omp_namelist *n;\n+  gfc_omp_namelist *n, *last;\n   gfc_expr_list *el;\n   int list;\n   int ifc;\n@@ -7369,30 +7369,58 @@ resolve_omp_clauses (gfc_code *code, gfc_omp_clauses *omp_clauses,\n \t\t}\n \t    break;\n \t  case OMP_LIST_IS_DEVICE_PTR:\n-\t    for (n = omp_clauses->lists[list]; n != NULL; n = n->next)\n+\t    last = NULL;\n+\t    for (n = omp_clauses->lists[list]; n != NULL; )\n \t      {\n-\t\tif (!n->sym->attr.dummy)\n-\t\t  gfc_error (\"Non-dummy object %qs in %s clause at %L\",\n-\t\t\t     n->sym->name, name, &n->where);\n-\t\tif (n->sym->attr.allocatable\n-\t\t    || (n->sym->ts.type == BT_CLASS\n-\t\t\t&& CLASS_DATA (n->sym)->attr.allocatable))\n-\t\t  gfc_error (\"ALLOCATABLE object %qs in %s clause at %L\",\n-\t\t\t     n->sym->name, name, &n->where);\n-\t\tif (n->sym->attr.pointer\n-\t\t    || (n->sym->ts.type == BT_CLASS\n-\t\t\t&& CLASS_DATA (n->sym)->attr.pointer))\n-\t\t  gfc_error (\"POINTER object %qs in %s clause at %L\",\n-\t\t\t     n->sym->name, name, &n->where);\n-\t\tif (n->sym->attr.value)\n-\t\t  gfc_error (\"VALUE object %qs in %s clause at %L\",\n-\t\t\t     n->sym->name, name, &n->where);\n+\t\tif (n->sym->ts.type == BT_DERIVED\n+\t\t    && n->sym->ts.u.derived->ts.is_iso_c\n+\t\t    && code->op != EXEC_OMP_TARGET)\n+\t\t  /* Non-TARGET (i.e. DISPATCH) requires a C_PTR.  */\n+\t\t  gfc_error (\"List item %qs in %s clause at %L must be of \"\n+\t\t\t     \"TYPE(C_PTR)\", n->sym->name, name, &n->where);\n+\t\telse if (n->sym->ts.type != BT_DERIVED\n+\t\t\t || !n->sym->ts.u.derived->ts.is_iso_c)\n+\t\t  {\n+\t\t    /* For TARGET, non-C_PTR are deprecated and handled as\n+\t\t       has_device_addr.  */\n+\t\t    gfc_omp_namelist *n2 = n;\n+\t\t    n = n->next;\n+\t\t    if (last)\n+\t\t      last->next = n;\n+\t\t    else\n+\t\t      omp_clauses->lists[list] = n;\n+\t\t    n2->next = omp_clauses->lists[OMP_LIST_HAS_DEVICE_ADDR];\n+\t\t    omp_clauses->lists[OMP_LIST_HAS_DEVICE_ADDR] = n2;\n+\t\t    continue;\n+\t\t  }\n+\t\tlast = n;\n+\t\tn = n->next;\n \t      }\n \t    break;\n \t  case OMP_LIST_HAS_DEVICE_ADDR:\n-\t  case OMP_LIST_USE_DEVICE_PTR:\n \t  case OMP_LIST_USE_DEVICE_ADDR:\n-\t    /* FIXME: Handle OMP_LIST_USE_DEVICE_PTR.  */\n+\t    break;\n+\t  case OMP_LIST_USE_DEVICE_PTR:\n+\t    /* Non-C_PTR are deprecated and handled as use_device_ADDR.  */\n+\t    last = NULL;\n+\t    for (n = omp_clauses->lists[list]; n != NULL; )\n+\t      {\n+\t\tgfc_omp_namelist *n2 = n;\n+\t\tif (n->sym->ts.type != BT_DERIVED\n+\t\t    || !n->sym->ts.u.derived->ts.is_iso_c)\n+\t\t  {\n+\t\t    n = n->next;\n+\t\t    if (last)\n+\t\t      last->next = n;\n+\t\t    else\n+\t\t      omp_clauses->lists[list] = n;\n+\t\t    n2->next = omp_clauses->lists[OMP_LIST_USE_DEVICE_ADDR];\n+\t\t    omp_clauses->lists[OMP_LIST_USE_DEVICE_ADDR] = n2;\n+\t\t    continue;\n+\t\t  }\n+\t\tlast = n;\n+\t\tn = n->next;\n+\t      }\n \t    break;\n \t  default:\n \t    for (; n != NULL; n = n->next)\n@@ -7758,7 +7786,7 @@ resolve_omp_clauses (gfc_code *code, gfc_omp_clauses *omp_clauses,\n \t\t &omp_clauses->num_teams_lower->where,\n \t\t &omp_clauses->num_teams_upper->where);\n   if (omp_clauses->device)\n-    resolve_nonnegative_int_expr (omp_clauses->device, \"DEVICE\");\n+    resolve_scalar_int_expr (omp_clauses->device, \"DEVICE\");\n   if (omp_clauses->filter)\n     resolve_nonnegative_int_expr (omp_clauses->filter, \"FILTER\");\n   if (omp_clauses->hint)"}, {"sha": "1d3a0d8cd33409c2f23a3ec044db3d14267b53e9", "filename": "gcc/testsuite/gfortran.dg/gomp/is_device_ptr-1.f90", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a116104969b3ecc9ea4abdd5436c66fd78d537/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fis_device_ptr-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a116104969b3ecc9ea4abdd5436c66fd78d537/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fis_device_ptr-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fis_device_ptr-1.f90?ref=10a116104969b3ecc9ea4abdd5436c66fd78d537", "patch": "@@ -7,16 +7,16 @@ subroutine test(b,c,d)\n \n   integer, target :: a(5)\n \n-  !$omp target is_device_ptr(a) ! { dg-error \"Non-dummy object .a. in IS_DEVICE_PTR clause\" }\n+  !$omp target is_device_ptr(a) ! Valid since OpenMP 5.1\n   !$omp end target\n \n-  !$omp target is_device_ptr(b) ! { dg-error \"VALUE object .b. in IS_DEVICE_PTR clause\" }\n+  !$omp target is_device_ptr(b) ! Valid since OpenMP 5.1\n   !$omp end target\n \n-  !$omp target is_device_ptr(c) ! { dg-error \"POINTER object .c. in IS_DEVICE_PTR clause\" }\n+  !$omp target is_device_ptr(c) ! Valid since OpenMP 5.1\n   !$omp end target\n \n-  !$omp target is_device_ptr(d) ! { dg-error \"ALLOCATABLE object .d. in IS_DEVICE_PTR clause\" }\n+  !$omp target is_device_ptr(d) ! Valid since OpenMP 5.1\n   !$omp end target\n \n   !$omp target data map(a) use_device_addr(a)  ! Should be okay"}, {"sha": "0762e5755e1d2725c0fc9e50a42938a2bcb9c4eb", "filename": "gcc/testsuite/gfortran.dg/gomp/is_device_ptr-2.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a116104969b3ecc9ea4abdd5436c66fd78d537/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fis_device_ptr-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a116104969b3ecc9ea4abdd5436c66fd78d537/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fis_device_ptr-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fis_device_ptr-2.f90?ref=10a116104969b3ecc9ea4abdd5436c66fd78d537", "patch": "@@ -8,7 +8,7 @@ subroutine abc(cc)\n     !$omp target enter data map(to: cc, dd)\n \n     !$omp target data use_device_addr(cc) use_device_ptr(dd)\n-      !$omp target is_device_ptr(cc, dd)  ! { dg-error \"Non-dummy object 'dd' in IS_DEVICE_PTR clause at\" }\n+      !$omp target is_device_ptr(cc, dd)  ! Valid since OpenMP 5.1\n         if (cc /= 131 .or. dd /= 484) stop 1\n         cc = 44\n         dd = 45"}, {"sha": "7b5b27baa728a13fd4adccf4e054084bd2713b1d", "filename": "gcc/testsuite/gfortran.dg/gomp/is_device_ptr-3.f90", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a116104969b3ecc9ea4abdd5436c66fd78d537/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fis_device_ptr-3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a116104969b3ecc9ea4abdd5436c66fd78d537/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fis_device_ptr-3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fis_device_ptr-3.f90?ref=10a116104969b3ecc9ea4abdd5436c66fd78d537", "patch": "@@ -23,5 +23,6 @@ end subroutine foo\n \n end program main\n \n-! { dg-final { scan-tree-dump \"is_device_ptr\\\\(a\\\\)\"  \"gimple\" } }\n+! { dg-final { scan-tree-dump \"has_device_addr\\\\(a\\\\)\"  \"gimple\" } }\n+! { dg-final { scan-tree-dump-not \"has_device_addr\\\\(b\\\\)\"  \"gimple\" } }\n ! { dg-final { scan-tree-dump-not \"is_device_ptr\\\\(b\\\\)\"  \"gimple\" } }"}, {"sha": "5b7fab075aee9cf70efeff0f46a66bd75d31ddf9", "filename": "libgomp/testsuite/libgomp.fortran/is_device_ptr-2.f90", "status": "added", "additions": 159, "deletions": 0, "changes": 159, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a116104969b3ecc9ea4abdd5436c66fd78d537/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fis_device_ptr-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a116104969b3ecc9ea4abdd5436c66fd78d537/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fis_device_ptr-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fis_device_ptr-2.f90?ref=10a116104969b3ecc9ea4abdd5436c66fd78d537", "patch": "@@ -0,0 +1,159 @@\n+! { dg-additional-options \"-fdump-tree-original\" }\n+!\n+! Since OpenMP 5.1, non-TYPE(c_ptr) arguments to is_device_ptr\n+! map to has_device_ptr - check this!\n+!\n+! PR fortran/105318\n+!\n+module m\n+  use iso_c_binding, only: c_ptr, c_loc, c_f_pointer, c_associated\n+  implicit none (type, external)\n+contains\n+  subroutine one (as, ar, asp, arp, asa, ara, cptr_a)\n+    integer, target :: AS, AR(5)\n+    integer, pointer :: ASP, ARP(:)\n+    integer, allocatable :: ASA, ARA(:)\n+\n+    type(c_ptr) :: cptr_a\n+\n+    !$omp target is_device_ptr(as, ar, asp, arp, asa, ara, cptr_a)\n+      if (.not. c_associated (cptr_a, c_loc(as))) stop 18\n+      if (as /= 5) stop 19\n+      if (any (ar /= [1,2,3,4,5])) stop 20\n+      if (asp /= 9) stop 21\n+      if (any (arp /= [2,4,6])) stop 22\n+    !$omp end target\n+  end\n+\n+  subroutine two (cptr_v)\n+    type(c_ptr), value :: cptr_v\n+    integer, pointer :: xx\n+\n+    xx => null()\n+    !$omp target is_device_ptr(cptr_v)\n+      if (.not. c_associated (cptr_v)) stop 23\n+      call c_f_pointer (cptr_v, xx)\n+      if (xx /= 5) stop 24\n+      xx => null()\n+    !$omp end target\n+  end\n+\n+  subroutine three (os, or, osp, orp, osa, ora, cptr_o)\n+    integer, optional, target :: OS, OR(5)\n+    integer, optional, pointer :: OSP, ORP(:)\n+    integer, optional, allocatable :: OSA, ORA(:)\n+\n+    type(c_ptr) :: cptr_o\n+\n+    !$omp target is_device_ptr(os, or, osp, orp, osa, ora, cptr_o)\n+      if (.not. c_associated (cptr_o, c_loc(os))) stop 25\n+      if (os /= 5) stop 26\n+      if (any (or /= [1,2,3,4,5])) stop 27\n+      if (osp /= 9) stop 28\n+      if (any (orp /= [2,4,6])) stop 29\n+    !$omp end target\n+  end\n+\n+  subroutine four(NVS, NVSO)\n+    use omp_lib, only: omp_initial_device, omp_invalid_device\n+    integer, value :: NVS\n+    integer, optional, value :: NVSO\n+    integer :: NS, NR(5)\n+    logical, volatile :: false_\n+\n+    false_ = .false.\n+\n+    !$omp target is_device_ptr (NS, NR, NVS, NVSO) device(omp_initial_device)\n+      NVS = 5\n+      NVSO = 5\n+      NS = 5\n+      NR(1) = 7\n+    !$omp end target\n+\n+    if (false_) then\n+      !$omp target device(omp_invalid_device)\n+      !$omp end target\n+    end if \n+  end subroutine\n+\n+end module m\n+\n+program main\n+  use iso_c_binding, only: c_ptr, c_loc, c_f_pointer, c_associated\n+  use m\n+  implicit none (type, external)\n+\n+  integer, target :: IS, IR(5)\n+  integer, pointer :: ISP, IRP(:)\n+  integer, allocatable :: ISA, IRA(:)\n+  integer :: xxx, xxxx\n+\n+  type(c_ptr) :: cptr_i\n+\n+  is = 5\n+  ir = [1,2,3,4,5]\n+  allocate(ISP, source=9)\n+  allocate(IRP, source=[2,4,6])\n+\n+  !$omp target data    map(is, ir, isp, irp, isa, ira) &\n+  !$omp&   use_device_ptr(is, ir, isp, irp, isa, ira)\n+\n+  cptr_i = c_loc(is)\n+  !$omp target is_device_ptr(is, ir, isp, irp, isa, ira, cptr_i)\n+    if (.not. c_associated (cptr_i, c_loc(is))) stop 30\n+    if (is /= 5) stop 31\n+    if (any (ir /= [1,2,3,4,5])) stop 32\n+    if (isp /= 9) stop 33\n+    if (any (irp /= [2,4,6])) stop 34\n+  !$omp end target\n+\n+  call one (is, ir, isp, irp, isa, ira, cptr_i)\n+  call two (cptr_i)\n+  call three (is, ir, isp, irp, isa, ira, cptr_i)\n+\n+  !$omp end target data\n+\n+  call four(xxx, xxxx)\n+end\n+\n+! { dg-final { scan-tree-dump-not \"use_device_ptr\" \"original\" } }\n+! { dg-final { scan-tree-dump \"use_device_addr\\\\(ira\\\\)\" \"original\" } }\n+! { dg-final { scan-tree-dump \"use_device_addr\\\\(isa\\\\)\" \"original\" } }\n+! { dg-final { scan-tree-dump \"use_device_addr\\\\(irp\\\\)\" \"original\" } }\n+! { dg-final { scan-tree-dump \"use_device_addr\\\\(isp\\\\)\" \"original\" } }\n+! { dg-final { scan-tree-dump \"use_device_addr\\\\(ir\\\\)\" \"original\" } }\n+! { dg-final { scan-tree-dump \"use_device_addr\\\\(is\\\\)\" \"original\" } }\n+\n+! { dg-final { scan-tree-dump-not \"use_device_addr\\\\(cptr\" \"original\" } }\n+! { dg-final { scan-tree-dump-not \"use_device_ptr\\\\(o\" \"original\" } }\n+! { dg-final { scan-tree-dump-not \"use_device_ptr\\\\(a\" \"original\" } }\n+! { dg-final { scan-tree-dump-not \"use_device_ptr\\\\(i\" \"original\" } }\n+\n+! { dg-final { scan-tree-dump \"is_device_ptr\\\\(cptr_o\\\\)\" \"original\" } }\n+! { dg-final { scan-tree-dump \"has_device_addr\\\\(ora\\\\)\" \"original\" } }\n+! { dg-final { scan-tree-dump \"has_device_addr\\\\(osa\\\\)\" \"original\" } }\n+! { dg-final { scan-tree-dump \"has_device_addr\\\\(orp\\\\)\" \"original\" } }\n+! { dg-final { scan-tree-dump \"has_device_addr\\\\(osp\\\\)\" \"original\" } }\n+! { dg-final { scan-tree-dump \"has_device_addr\\\\(or\\\\)\" \"original\" } }\n+! { dg-final { scan-tree-dump \"has_device_addr\\\\(os\\\\)\" \"original\" } }\n+! { dg-final { scan-tree-dump \"is_device_ptr\\\\(cptr_v\\\\)\" \"original\" } }\n+! { dg-final { scan-tree-dump \"is_device_ptr\\\\(cptr_a\\\\)\" \"original\" } }\n+! { dg-final { scan-tree-dump \"has_device_addr\\\\(ara\\\\)\" \"original\" } }\n+! { dg-final { scan-tree-dump \"has_device_addr\\\\(asa\\\\)\" \"original\" } }\n+! { dg-final { scan-tree-dump \"has_device_addr\\\\(arp\\\\)\" \"original\" } }\n+! { dg-final { scan-tree-dump \"has_device_addr\\\\(asp\\\\)\" \"original\" } }\n+! { dg-final { scan-tree-dump \"has_device_addr\\\\(ar\\\\)\" \"original\" } }\n+! { dg-final { scan-tree-dump \"has_device_addr\\\\(as\\\\)\" \"original\" } }\n+! { dg-final { scan-tree-dump \"use_device_addr\\\\(is\\\\)\" \"original\" } }\n+! { dg-final { scan-tree-dump \"use_device_addr\\\\(ir\\\\)\" \"original\" } }\n+! { dg-final { scan-tree-dump \"use_device_addr\\\\(isp\\\\)\" \"original\" } }\n+! { dg-final { scan-tree-dump \"use_device_addr\\\\(irp\\\\)\" \"original\" } }\n+! { dg-final { scan-tree-dump \"use_device_addr\\\\(isa\\\\)\" \"original\" } }\n+! { dg-final { scan-tree-dump \"use_device_addr\\\\(ira\\\\)\" \"original\" } }\n+! { dg-final { scan-tree-dump \"is_device_ptr\\\\(cptr_i\\\\)\" \"original\" } }\n+! { dg-final { scan-tree-dump \"has_device_addr\\\\(ira\\\\)\" \"original\" } }\n+! { dg-final { scan-tree-dump \"has_device_addr\\\\(isa\\\\)\" \"original\" } }\n+! { dg-final { scan-tree-dump \"has_device_addr\\\\(irp\\\\)\" \"original\" } }\n+! { dg-final { scan-tree-dump \"has_device_addr\\\\(isp\\\\)\" \"original\" } }\n+! { dg-final { scan-tree-dump \"has_device_addr\\\\(ir\\\\)\" \"original\" } }\n+! { dg-final { scan-tree-dump \"has_device_addr\\\\(is\\\\)\" \"original\" } }"}]}