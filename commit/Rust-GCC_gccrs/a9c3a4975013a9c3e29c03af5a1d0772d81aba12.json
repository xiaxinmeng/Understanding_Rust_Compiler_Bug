{"sha": "a9c3a4975013a9c3e29c03af5a1d0772d81aba12", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTljM2E0OTc1MDEzYTljM2UyOWMwM2FmNWExZDA3NzJkODFhYmExMg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-05-31T14:32:14Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-07-08T13:34:21Z"}, "message": "[Ada] Fix violation of No_Implicit_Loops restriction for enumeration type\n\ngcc/ada/\n\n\t* exp_imgv.adb: Add with and use clause for Restrict and Rident.\n\t(Build_Enumeration_Image_Tables): Do not generate the hash function\n\tif the No_Implicit_Loops restriction is active.", "tree": {"sha": "0359614370dfbc93fe4e687c7788b328fb5a4706", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0359614370dfbc93fe4e687c7788b328fb5a4706"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a9c3a4975013a9c3e29c03af5a1d0772d81aba12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9c3a4975013a9c3e29c03af5a1d0772d81aba12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9c3a4975013a9c3e29c03af5a1d0772d81aba12", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9c3a4975013a9c3e29c03af5a1d0772d81aba12/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73f841cfca82827a60b9a4da8400f6686c85d3ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73f841cfca82827a60b9a4da8400f6686c85d3ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73f841cfca82827a60b9a4da8400f6686c85d3ec"}], "stats": {"total": 11, "additions": 8, "deletions": 3}, "files": [{"sha": "d2605fbe0490c45fa7a921edef78d5c650b4fe47", "filename": "gcc/ada/exp_imgv.adb", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c3a4975013a9c3e29c03af5a1d0772d81aba12/gcc%2Fada%2Fexp_imgv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c3a4975013a9c3e29c03af5a1d0772d81aba12/gcc%2Fada%2Fexp_imgv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_imgv.adb?ref=a9c3a4975013a9c3e29c03af5a1d0772d81aba12", "patch": "@@ -37,6 +37,8 @@ with Namet;          use Namet;\n with Nmake;          use Nmake;\n with Nlists;         use Nlists;\n with Opt;            use Opt;\n+with Restrict;       use Restrict;\n+with Rident;         use Rident;\n with Rtsfind;        use Rtsfind;\n with Sem_Aux;        use Sem_Aux;\n with Sem_Res;        use Sem_Res;\n@@ -160,6 +162,8 @@ package body Exp_Imgv is\n              Expression          => Make_Aggregate (Loc, Expressions => V)));\n       end Append_Table_To;\n \n+   --  Start of Build_Enumeration_Image_Tables\n+\n    begin\n       --  Nothing to do for types other than a root enumeration type\n \n@@ -247,7 +251,7 @@ package body Exp_Imgv is\n       Append_Table_To (Act, Eind, Nlit, Ityp, Ind);\n \n       --  If the number of literals is not greater than Threshold, then we are\n-      --  done. Otherwise we compute a (perfect) hash function for use by the\n+      --  done. Otherwise we generate a (perfect) hash function for use by the\n       --  Value attribute.\n \n       if Nlit > Threshold then\n@@ -283,11 +287,12 @@ package body Exp_Imgv is\n \n          --  If the unit where the type is declared is the main unit, and the\n          --  number of literals is greater than Threshold_For_Size when we are\n-         --  optimizing for size, and -gnatd_h is not specified, try to compute\n-         --  the hash function.\n+         --  optimizing for size, and the restriction No_Implicit_Loops is not\n+         --  active, and -gnatd_h is not specified, generate the hash function.\n \n          if In_Main_Unit\n            and then (Optimize_Size = 0 or else Nlit > Threshold_For_Size)\n+           and then not Restriction_Active (No_Implicit_Loops)\n            and then not Debug_Flag_Underscore_H\n          then\n             declare"}]}