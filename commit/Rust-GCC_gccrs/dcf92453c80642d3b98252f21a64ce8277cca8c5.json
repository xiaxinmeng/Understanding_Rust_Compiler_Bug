{"sha": "dcf92453c80642d3b98252f21a64ce8277cca8c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGNmOTI0NTNjODA2NDJkM2I5ODI1MmYyMWE2NGNlODI3N2NjYThjNQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2003-04-13T01:45:35Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2003-04-13T01:45:35Z"}, "message": "tree.c (build_constructor): New function.\n\n\t* tree.c (build_constructor): New function.\n\t* tree.h: Prototype it.\n\n\t* c-typeck.c (build_c_cast, pop_init_level)\n\t* profile.c (build_function_info_value, build_gcov_info_value)\n\t(create_profiler):\n\tUse build_constructor.\n\n\t* builtins.c (expand_builtin_args_info): Remove #if 0 blocks.\n\n\t* objc/objc-act.c (build_constructor):\n\tRename objc_build_constructor. Use build_constructor.\n\t(build_objc_string_object, objc_add_static_instance)\n\t(init_def_list, init_objc_symtab, init_module_descriptor)\n\t(generate_static_references, build_selector_translation_table)\n\t(build_descriptor_table_initializer, generate_descriptor_table)\n\t(build_protocol_initializer, build_ivar_list_initializer)\n\t(generate_ivars_list, build_dispatch_table_initializer)\n\t(generate_dispatch_table, generate_protocol_list)\n\t(build_category_initializer, build_shared_structure_initializer):\n\tUpdate to match.\n\nada:\n\t* gigi.h, utils2.c (build_constructor):\n\tRename gnat_build_constructor. Use build_constructor.\n\t* decl.c (gnat_to_gnu_entity)\n\t* trans.c (tree_transform, pos_to_constructor, extract_values)\n\t* ada/utils.c (build_template, convert_to_fat_pointer, convert)\n\t(unchecked_convert)\n\t* ada/utils2.c (build_binary_op, build_call_raise, build_allocator)\n\t(fill_vms_descriptor):\n\tUpdate to match.\n\ncp:\n\t* class.c (initialize_array)\n\t* decl.c (reshape_init)\n\t* decl2.c (build_expr_from_tree)\n\t* init.c (build_zero_init)\n\t* pt.c (tsubst_copy, tsubst_copy_and_build)\n\t* rtti.c (tinfo_base_init, generic_initializer, ptr_initializer)\n\t(ptm_initializer, class_initializer, get_pseudo_ti_init)\n\t* semantics.c (finish_compound_literal)\n\t* typeck.c (build_ptrmemfunc1)\n\t* typeck2.c (store_init_value, process_init_constructor)\n\t(build_functional_cast): Use build_constructor.\n\nf:\n\t* com.c (ffecom_build_complex_constant_, ffecom_expr_)\n\t(ffecom_init_zero_, ffecom_transform_namelist_, ffecom_vardesc_)\n\t(ffecom_vardesc_array_, ffecom_vardesc_dims_, ffecom_2)\n\t* ste.c (ffeste_io_ialist_, ffeste_io_cilist_, ffeste_io_cllist_)\n\t(ffeste_io_icilist_, ffeste_io_inlist_, ffeste_io_olist_):\n\tUse build_constructor.\n\njava:\n\t* class.c (make_field_value, make_method_value, get_dispatch_table)\n\t(make_class_data, emit_offset_symbol_table)\n\t* constants.c (build_constants_constructor)\n\t* java-tree.h (START_RECORD_CONSTRUCTOR)\n\t* parse.y (maybe_build_array_element_wfl):\n\tUse build_constructor.\n\nFrom-SVN: r65539", "tree": {"sha": "d3a49132e8246b9fe0b8818a628270a745927d80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d3a49132e8246b9fe0b8818a628270a745927d80"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dcf92453c80642d3b98252f21a64ce8277cca8c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcf92453c80642d3b98252f21a64ce8277cca8c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcf92453c80642d3b98252f21a64ce8277cca8c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcf92453c80642d3b98252f21a64ce8277cca8c5/comments", "author": null, "committer": null, "parents": [{"sha": "71707889ed275ce5ab2cc6e085b91f5a9324fbe4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71707889ed275ce5ab2cc6e085b91f5a9324fbe4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71707889ed275ce5ab2cc6e085b91f5a9324fbe4"}], "stats": {"total": 394, "additions": 228, "deletions": 166}, "files": [{"sha": "9ae6cf1ec14c47b926f2c05de68f9d5502ca0903", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcf92453c80642d3b98252f21a64ce8277cca8c5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcf92453c80642d3b98252f21a64ce8277cca8c5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dcf92453c80642d3b98252f21a64ce8277cca8c5", "patch": "@@ -1,10 +1,34 @@\n+2003-04-12  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* tree.c (build_constructor): New function.\n+\t* tree.h: Prototype it.\n+\n+\t* c-typeck.c (build_c_cast, pop_init_level)\n+\t* profile.c (build_function_info_value, build_gcov_info_value)\n+\t(create_profiler):\n+\tUse build_constructor.\n+\n+\t* builtins.c (expand_builtin_args_info): Remove #if 0 blocks.\n+\n+\t* objc/objc-act.c (build_constructor):\n+\tRename objc_build_constructor. Use build_constructor.\n+\t(build_objc_string_object, objc_add_static_instance)\n+\t(init_def_list, init_objc_symtab, init_module_descriptor)\n+\t(generate_static_references, build_selector_translation_table)\n+\t(build_descriptor_table_initializer, generate_descriptor_table)\n+\t(build_protocol_initializer, build_ivar_list_initializer)\n+\t(generate_ivars_list, build_dispatch_table_initializer)\n+\t(generate_dispatch_table, generate_protocol_list)\n+\t(build_category_initializer, build_shared_structure_initializer):\n+\tUpdate to match.\n+\n 2003-04-12  Zack Weinberg  <zack@codesourcery.com>\n \n \t* intl.h: #define gcc_gettext_width to strlen when !ENABLE_NLS.\n \n 2003-04-12  Stephane Carrez  <stcarrez@nerim.fr>\n \n-\t* config/m68hc11/m68hc11-protos.h \n+\t* config/m68hc11/m68hc11-protos.h\n \t(m68hc11_eq_compare_operator): Declare\n \t* config/m68hc11/m68hc11.h (PREDICATE_CODES): Register new predicate.\n \t* config/m68hc11/m68hc11.c (m68hc11_eq_compare_operator): New predicate"}, {"sha": "038b18f6971fd491cef68d3828e82351e2bce45a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcf92453c80642d3b98252f21a64ce8277cca8c5/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcf92453c80642d3b98252f21a64ce8277cca8c5/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=dcf92453c80642d3b98252f21a64ce8277cca8c5", "patch": "@@ -1,3 +1,15 @@\n+2003-04-12  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* gigi.h, utils2.c (build_constructor):\n+\tRename gnat_build_constructor. Use build_constructor.\n+\t* decl.c (gnat_to_gnu_entity)\n+\t* trans.c (tree_transform, pos_to_constructor, extract_values)\n+\t* ada/utils.c (build_template, convert_to_fat_pointer, convert)\n+\t(unchecked_convert)\n+\t* ada/utils2.c (build_binary_op, build_call_raise, build_allocator)\n+\t(fill_vms_descriptor):\n+\tUpdate to match.\n+\n 2003-04-06  Zack Weinberg  <zack@codesourcery.com>\n \n \t* ada-tree.def: Make fourth element for GNAT_LOOP_ID zero."}, {"sha": "1225ba169a5da39e617341ceec54aac0f5adce72", "filename": "gcc/ada/decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcf92453c80642d3b98252f21a64ce8277cca8c5/gcc%2Fada%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcf92453c80642d3b98252f21a64ce8277cca8c5/gcc%2Fada%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdecl.c?ref=dcf92453c80642d3b98252f21a64ce8277cca8c5", "patch": "@@ -812,7 +812,7 @@ gnat_to_gnu_entity (gnat_entity, gnu_expr, definition)\n \t\t && TYPE_CONTAINS_TEMPLATE_P (gnu_type)\n \t\t && gnu_expr == 0)\n \t  gnu_expr\n-\t    = build_constructor\n+\t    = gnat_build_constructor\n \t      (gnu_type,\n \t       tree_cons\n \t       (TYPE_FIELDS (gnu_type),\n@@ -957,7 +957,7 @@ gnat_to_gnu_entity (gnat_entity, gnu_expr, definition)\n \n \t    if (gnu_expr != 0)\n \t      gnu_expr\n-\t\t= build_constructor (gnu_new_type,\n+\t\t= gnat_build_constructor (gnu_new_type,\n \t\t\t\t     tree_cons (TYPE_FIELDS (gnu_new_type),\n \t\t\t\t\t\tgnu_expr, NULL_TREE));\n \t    set_lineno (gnat_entity, 1);"}, {"sha": "4094f4902f86cfafb79819c7a79f088047b31ed5", "filename": "gcc/ada/gigi.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcf92453c80642d3b98252f21a64ce8277cca8c5/gcc%2Fada%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcf92453c80642d3b98252f21a64ce8277cca8c5/gcc%2Fada%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgigi.h?ref=dcf92453c80642d3b98252f21a64ce8277cca8c5", "patch": "@@ -691,8 +691,9 @@ extern tree build_call_0_expr\tPARAMS((tree));\n    name, if requested.  MSG says which exception function to call.  */\n extern tree build_call_raise\tPARAMS((int));\n \n-/* Return a CONSTRUCTOR of TYPE whose list is LIST.  */\n-extern tree build_constructor\tPARAMS((tree, tree));\n+/* Return a CONSTRUCTOR of TYPE whose list is LIST.  This is not the\n+   same as build_constructor in the language-independent tree.c.  */\n+extern tree gnat_build_constructor\tPARAMS((tree, tree));\n \n /* Return a COMPONENT_REF to access a field that is given by COMPONENT,\n    an IDENTIFIER_NODE giving the name of the field, FIELD, a FIELD_DECL,"}, {"sha": "4155eecfd6e793cd7ff8c3fc2df8bd476cb9be16", "filename": "gcc/ada/trans.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcf92453c80642d3b98252f21a64ce8277cca8c5/gcc%2Fada%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcf92453c80642d3b98252f21a64ce8277cca8c5/gcc%2Fada%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftrans.c?ref=dcf92453c80642d3b98252f21a64ce8277cca8c5", "patch": "@@ -647,7 +647,7 @@ tree_transform (gnat_node)\n \t\t\t   gnu_list);\n \n \t  gnu_result\n-\t    = build_constructor (gnu_result_type, nreverse (gnu_list));\n+\t    = gnat_build_constructor (gnu_result_type, nreverse (gnu_list));\n \t}\n       break;\n \n@@ -1620,7 +1620,7 @@ tree_transform (gnat_node)\n \t    = TREE_TYPE (TREE_CHAIN (TYPE_FIELDS (gnu_result_type)));\n \n \tif (Null_Record_Present (gnat_node))\n-\t  gnu_result = build_constructor (gnu_aggr_type, NULL_TREE);\n+\t  gnu_result = gnat_build_constructor (gnu_aggr_type, NULL_TREE);\n \n \telse if (TREE_CODE (gnu_aggr_type) == RECORD_TYPE)\n \t  gnu_result\n@@ -2454,7 +2454,7 @@ tree_transform (gnat_node)\n \t      gnu_ret_val = TREE_VALUE (TYPE_CI_CO_LIST (gnu_subprog_type));\n \t    else\n \t      gnu_ret_val\n-\t\t= build_constructor (TREE_TYPE (gnu_subprog_type),\n+\t\t= gnat_build_constructor (TREE_TYPE (gnu_subprog_type),\n \t\t\t\t     TYPE_CI_CO_LIST (gnu_subprog_type));\n \t  }\n \n@@ -2696,7 +2696,7 @@ tree_transform (gnat_node)\n \t    if (list_length (gnu_cico_list) == 1)\n \t      gnu_retval = TREE_VALUE (gnu_cico_list);\n \t    else\n-\t       gnu_retval = build_constructor (TREE_TYPE (gnu_subprog_type),\n+\t       gnu_retval = gnat_build_constructor (TREE_TYPE (gnu_subprog_type),\n \t\t\t\t\t       gnu_cico_list);\n \n \t    if (DECL_P (gnu_retval) && DECL_BY_REF_P (gnu_retval))\n@@ -5011,7 +5011,7 @@ pos_to_constructor (gnat_expr, gnu_array_type, gnat_component_type)\n \t\t     gnu_expr_list);\n     }\n \n-  return build_constructor (gnu_array_type, nreverse (gnu_expr_list));\n+  return gnat_build_constructor (gnu_array_type, nreverse (gnu_expr_list));\n }\n \f\n /* Subroutine of assoc_to_constructor: VALUES is a list of field associations,\n@@ -5062,7 +5062,7 @@ extract_values (values, record_type)\n       result = tree_cons (field, value, result);\n     }\n \n-  return build_constructor (record_type, nreverse (result));\n+  return gnat_build_constructor (record_type, nreverse (result));\n }\n \f\n /* EXP is to be treated as an array or record.  Handle the cases when it is"}, {"sha": "fa58936a53eb79f169de976a6c88492f14e7c61d", "filename": "gcc/ada/utils.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcf92453c80642d3b98252f21a64ce8277cca8c5/gcc%2Fada%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcf92453c80642d3b98252f21a64ce8277cca8c5/gcc%2Fada%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Futils.c?ref=dcf92453c80642d3b98252f21a64ce8277cca8c5", "patch": "@@ -2206,7 +2206,7 @@ build_template (template_type, array_type, expr)\n \t\t\t\t tree_cons (field, min, template_elts));\n     }\n \n-  return build_constructor (template_type, nreverse (template_elts));\n+  return gnat_build_constructor (template_type, nreverse (template_elts));\n }\n \f\n /* Build a VMS descriptor from a Mechanism_Type, which must specify\n@@ -2681,7 +2681,7 @@ convert_to_fat_pointer (type, expr)\n      pointer to the template and array.  */\n   if (integer_zerop (expr))\n     return\n-      build_constructor\n+      gnat_build_constructor\n \t(type,\n \t tree_cons (TYPE_FIELDS (type),\n \t\t    convert (TREE_TYPE (TYPE_FIELDS (type)), expr),\n@@ -2715,7 +2715,7 @@ convert_to_fat_pointer (type, expr)\n \n   /* The result is a CONSTRUCTOR for the fat pointer.  */\n   return\n-    build_constructor (type,\n+    gnat_build_constructor (type,\n \t\t       tree_cons (TYPE_FIELDS (type), expr,\n \t\t\t\t  tree_cons (TREE_CHAIN (TYPE_FIELDS (type)),\n \t\t\t\t\t     template_addr, NULL_TREE)));\n@@ -2818,7 +2818,7 @@ convert (type, expr)\n \n       else\n \treturn\n-\t  build_constructor (type,\n+\t  gnat_build_constructor (type,\n \t\t\t     tree_cons (TYPE_FIELDS (type),\n \t\t\t\t\tconvert (TREE_TYPE\n \t\t\t\t\t\t (TYPE_FIELDS (type)),\n@@ -2849,7 +2849,7 @@ convert (type, expr)\n       tree obj_type = TREE_TYPE (TREE_CHAIN (TYPE_FIELDS (type)));\n \n       return\n-\tbuild_constructor\n+\tgnat_build_constructor\n \t  (type,\n \t   tree_cons (TYPE_FIELDS (type),\n \t\t      build_template (TREE_TYPE (TYPE_FIELDS (type)),\n@@ -3017,7 +3017,7 @@ convert (type, expr)\n     case RECORD_TYPE:\n       if (TYPE_LEFT_JUSTIFIED_MODULAR_P (type) && ! AGGREGATE_TYPE_P (etype))\n \treturn\n-\t  build_constructor\n+\t  gnat_build_constructor\n \t    (type, tree_cons (TYPE_FIELDS (type),\n \t\t\t      convert (TREE_TYPE (TYPE_FIELDS (type)), expr),\n \t\t\t      NULL_TREE));\n@@ -3263,7 +3263,7 @@ unchecked_convert (type, expr)\n       TYPE_FIELDS (rec_type) = field;\n       layout_type (rec_type);\n \n-      expr = build_constructor (rec_type, build_tree_list (field, expr));\n+      expr = gnat_build_constructor (rec_type, build_tree_list (field, expr));\n       expr = unchecked_convert (type, expr);\n     }\n "}, {"sha": "21d32f9cc6e4728d3428f24ac62f9487fe46144d", "filename": "gcc/ada/utils2.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcf92453c80642d3b98252f21a64ce8277cca8c5/gcc%2Fada%2Futils2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcf92453c80642d3b98252f21a64ce8277cca8c5/gcc%2Fada%2Futils2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Futils2.c?ref=dcf92453c80642d3b98252f21a64ce8277cca8c5", "patch": "@@ -929,7 +929,7 @@ build_binary_op (op_code, result_type, left_operand, right_operand)\n \t just compare the data pointer.  */\n       else if (TYPE_FAT_POINTER_P (left_base_type)\n \t       && TREE_CODE (right_operand) == CONSTRUCTOR\n-\t       && integer_zerop (TREE_VALUE (TREE_OPERAND (right_operand, 1))))\n+\t       && integer_zerop (TREE_VALUE (CONSTRUCTOR_ELTS (right_operand))))\n \t{\n \t  right_operand = build_component_ref (left_operand, NULL_TREE,\n \t\t\t\t\t       TYPE_FIELDS (left_base_type));\n@@ -1514,7 +1514,7 @@ build_call_raise (msg)\n /* Return a CONSTRUCTOR of TYPE whose list is LIST.  */\n \n tree\n-build_constructor (type, list)\n+gnat_build_constructor (type, list)\n      tree type;\n      tree list;\n {\n@@ -1566,7 +1566,7 @@ build_constructor (type, list)\n \t}\n     }\n \n-  result = build (CONSTRUCTOR, type, NULL_TREE, list);\n+  result = build_constructor (type, list);\n   TREE_CONSTANT (result) = allconstant;\n   TREE_STATIC (result) = allconstant;\n   TREE_SIDE_EFFECTS (result) = side_effects;\n@@ -1896,7 +1896,7 @@ build_allocator (type, init, result_type, gnat_proc, gnat_pool)\n \t\t    (MODIFY_EXPR, storage_type,\n \t\t     build_unary_op (INDIRECT_REF, NULL_TREE,\n \t\t\t\t     convert (storage_ptr_type, storage)),\n-\t\t     build_constructor (storage_type, template_cons)),\n+\t\t     gnat_build_constructor (storage_type, template_cons)),\n \t\t    convert (storage_ptr_type, storage)));\n \t}\n       else\n@@ -2008,7 +2008,7 @@ fill_vms_descriptor (expr, gnat_formal)\n \t\t\t      const_list);\n     }\n \n-  return build_constructor (record_type, nreverse (const_list));\n+  return gnat_build_constructor (record_type, nreverse (const_list));\n }\n \n /* Indicate that we need to make the address of EXPR_NODE and it therefore"}, {"sha": "667de5f3b39aa13f37e6906abb29c8f881507f35", "filename": "gcc/builtins.c", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcf92453c80642d3b98252f21a64ce8277cca8c5/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcf92453c80642d3b98252f21a64ce8277cca8c5/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=dcf92453c80642d3b98252f21a64ce8277cca8c5", "patch": "@@ -3212,11 +3212,6 @@ expand_builtin_args_info (exp)\n   tree arglist = TREE_OPERAND (exp, 1);\n   int nwords = sizeof (CUMULATIVE_ARGS) / sizeof (int);\n   int *word_ptr = (int *) &current_function_args_info;\n-#if 0\n-  /* These are used by the code below that is if 0'ed away */\n-  int i;\n-  tree type, elts, result;\n-#endif\n \n   if (sizeof (CUMULATIVE_ARGS) % sizeof (int) != 0)\n     abort ();\n@@ -3239,20 +3234,6 @@ expand_builtin_args_info (exp)\n     error (\"missing argument in `__builtin_args_info'\");\n \n   return const0_rtx;\n-\n-#if 0\n-  for (i = 0; i < nwords; i++)\n-    elts = tree_cons (NULL_TREE, build_int_2 (word_ptr[i], 0));\n-\n-  type = build_array_type (integer_type_node,\n-\t\t\t   build_index_type (build_int_2 (nwords, 0)));\n-  result = build (CONSTRUCTOR, type, NULL_TREE, nreverse (elts));\n-  TREE_CONSTANT (result) = 1;\n-  TREE_STATIC (result) = 1;\n-  result = build1 (INDIRECT_REF, build_pointer_type (type), result);\n-  TREE_CONSTANT (result) = 1;\n-  return expand_expr (result, NULL_RTX, VOIDmode, 0);\n-#endif\n }\n \n /* Expand ARGLIST, from a call to __builtin_next_arg.  */"}, {"sha": "aa58bea77505728af2ddb1896864a3324cd46cdc", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcf92453c80642d3b98252f21a64ce8277cca8c5/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcf92453c80642d3b98252f21a64ce8277cca8c5/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=dcf92453c80642d3b98252f21a64ce8277cca8c5", "patch": "@@ -3660,8 +3660,10 @@ build_c_cast (type, expr)\n \n \t  if (pedantic)\n \t    pedwarn (\"ISO C forbids casts to union type\");\n-\t  t = digest_init (type, build (CONSTRUCTOR, type, NULL_TREE,\n-\t\t\t\t\tbuild_tree_list (field, value)), 0);\n+\t  t = digest_init (type,\n+\t\t\t   build_constructor (type,\n+\t\t\t\t\t      build_tree_list (field, value)),\n+\t\t\t   0);\n \t  TREE_CONSTANT (t) = TREE_CONSTANT (value);\n \t  return t;\n \t}\n@@ -5569,8 +5571,8 @@ pop_init_level (implicit)\n \tconstructor = error_mark_node;\n       else\n \t{\n-\t  constructor = build (CONSTRUCTOR, constructor_type, NULL_TREE,\n-\t\t\t       nreverse (constructor_elements));\n+\t  constructor = build_constructor (constructor_type,\n+\t\t\t\t\t   nreverse (constructor_elements));\n \t  if (constructor_constant)\n \t    TREE_CONSTANT (constructor) = 1;\n \t  if (constructor_constant && constructor_simple)"}, {"sha": "40a2810f1520fe3509b18647ac78141ab3c0d8e0", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcf92453c80642d3b98252f21a64ce8277cca8c5/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcf92453c80642d3b98252f21a64ce8277cca8c5/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=dcf92453c80642d3b98252f21a64ce8277cca8c5", "patch": "@@ -1,3 +1,17 @@\n+2003-04-12  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* class.c (initialize_array)\n+\t* decl.c (reshape_init)\n+\t* decl2.c (build_expr_from_tree)\n+\t* init.c (build_zero_init)\n+\t* pt.c (tsubst_copy, tsubst_copy_and_build)\n+\t* rtti.c (tinfo_base_init, generic_initializer, ptr_initializer)\n+\t(ptm_initializer, class_initializer, get_pseudo_ti_init)\n+\t* semantics.c (finish_compound_literal)\n+\t* typeck.c (build_ptrmemfunc1)\n+\t* typeck2.c (store_init_value, process_init_constructor)\n+\t(build_functional_cast): Use build_constructor.\n+\n 2003-04-12  Zack Weinberg  <zack@codesourcery.com>\n \n \t* call.c (print_z_candidates): Use gcc_gettext_width, not"}, {"sha": "382519e75286797d9906ddae822d1c3b979d24ce", "filename": "gcc/cp/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcf92453c80642d3b98252f21a64ce8277cca8c5/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcf92453c80642d3b98252f21a64ce8277cca8c5/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=dcf92453c80642d3b98252f21a64ce8277cca8c5", "patch": "@@ -6843,7 +6843,7 @@ initialize_array (tree decl, tree inits)\n \n   context = DECL_CONTEXT (decl);\n   DECL_CONTEXT (decl) = NULL_TREE;\n-  DECL_INITIAL (decl) = build_nt (CONSTRUCTOR, NULL_TREE, inits);\n+  DECL_INITIAL (decl) = build_constructor (NULL_TREE, inits);\n   TREE_HAS_CONSTRUCTOR (DECL_INITIAL (decl)) = 1;\n   cp_finish_decl (decl, DECL_INITIAL (decl), NULL_TREE, 0);\n   DECL_CONTEXT (decl) = context;"}, {"sha": "f5ee1a36c29801ea639798ff0234df410f44973d", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcf92453c80642d3b98252f21a64ce8277cca8c5/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcf92453c80642d3b98252f21a64ce8277cca8c5/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=dcf92453c80642d3b98252f21a64ce8277cca8c5", "patch": "@@ -7520,7 +7520,7 @@ reshape_init (tree type, tree *initp)\n   else\n     {\n       /* Build a CONSTRUCTOR to hold the contents of the aggregate.  */  \n-      new_init = build (CONSTRUCTOR, type, NULL_TREE, NULL_TREE);\n+      new_init = build_constructor (type, NULL_TREE);\n       TREE_HAS_CONSTRUCTOR (new_init) = 1;\n \n       if (CLASS_TYPE_P (type))"}, {"sha": "57050d782af2f4b096c09e6e01df31e37234887b", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcf92453c80642d3b98252f21a64ce8277cca8c5/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcf92453c80642d3b98252f21a64ce8277cca8c5/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=dcf92453c80642d3b98252f21a64ce8277cca8c5", "patch": "@@ -3272,7 +3272,7 @@ build_expr_from_tree (t)\n \t    r = tree_cons (purpose, value, r);\n \t  }\n \t\n-\tr = build_nt (CONSTRUCTOR, NULL_TREE, nreverse (r));\n+\tr = build_constructor (NULL_TREE, nreverse (r));\n \tTREE_HAS_CONSTRUCTOR (r) = TREE_HAS_CONSTRUCTOR (t);\n \n \tif (type)"}, {"sha": "3083412786e2c870a2cd07371bdaf818ff6819cf", "filename": "gcc/cp/init.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcf92453c80642d3b98252f21a64ce8277cca8c5/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcf92453c80642d3b98252f21a64ce8277cca8c5/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=dcf92453c80642d3b98252f21a64ce8277cca8c5", "patch": "@@ -204,7 +204,7 @@ build_zero_init (tree type, tree nelts, bool static_storage_p)\n       tree inits;\n \n       /* Build a constructor to contain the initializations.  */\n-      init = build (CONSTRUCTOR, type, NULL_TREE, NULL_TREE);\n+      init = build_constructor (type, NULL_TREE);\n       /* Iterate over the fields, building initializations.  */\n       inits = NULL_TREE;\n       for (field = TYPE_FIELDS (type); field; field = TREE_CHAIN (field))\n@@ -236,7 +236,7 @@ build_zero_init (tree type, tree nelts, bool static_storage_p)\n       tree inits;\n \n       /* Build a constructor to contain the initializations.  */\n-      init = build (CONSTRUCTOR, type, NULL_TREE, NULL_TREE);\n+      init = build_constructor (type, NULL_TREE);\n       /* Iterate over the array elements, building initializations.  */\n       inits = NULL_TREE;\n       max_index = nelts ? nelts : array_type_nelts (type);"}, {"sha": "c8e7c4089e2af76a0bb4284e9c2f14a75a58d11a", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcf92453c80642d3b98252f21a64ce8277cca8c5/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcf92453c80642d3b98252f21a64ce8277cca8c5/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=dcf92453c80642d3b98252f21a64ce8277cca8c5", "patch": "@@ -7534,10 +7534,9 @@ tsubst_copy (t, args, complain, in_decl)\n \n     case CONSTRUCTOR:\n       {\n-\tr = build\n-\t  (CONSTRUCTOR, tsubst (TREE_TYPE (t), args, complain, in_decl), \n-\t   NULL_TREE, tsubst_copy (CONSTRUCTOR_ELTS (t), args,\n-\t\t\t\t   complain, in_decl));\n+\tr = build_constructor\n+\t  (tsubst (TREE_TYPE (t), args, complain, in_decl), \n+\t   tsubst_copy (CONSTRUCTOR_ELTS (t), args, complain, in_decl));\n \tTREE_HAS_CONSTRUCTOR (r) = TREE_HAS_CONSTRUCTOR (t);\n \treturn r;\n       }\n@@ -8348,7 +8347,7 @@ tsubst_copy_and_build (t, args, complain, in_decl)\n \t    r = tree_cons (purpose, value, r);\n \t  }\n \t\n-\tr = build_nt (CONSTRUCTOR, NULL_TREE, nreverse (r));\n+\tr = build_constructor (NULL_TREE, nreverse (r));\n \tTREE_HAS_CONSTRUCTOR (r) = TREE_HAS_CONSTRUCTOR (t);\n \n \tif (type)"}, {"sha": "8283acb7f4601a00f3607c6c103a30bd740ab91d", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcf92453c80642d3b98252f21a64ce8277cca8c5/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcf92453c80642d3b98252f21a64ce8277cca8c5/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=dcf92453c80642d3b98252f21a64ce8277cca8c5", "patch": "@@ -811,7 +811,7 @@ tinfo_base_init (tree desc, tree target)\n   \n   init = tree_cons (NULL_TREE, decay_conversion (name_decl), init);\n   \n-  init = build (CONSTRUCTOR, NULL_TREE, NULL_TREE, nreverse (init));\n+  init = build_constructor (NULL_TREE, nreverse (init));\n   TREE_HAS_CONSTRUCTOR (init) = TREE_CONSTANT (init) = TREE_STATIC (init) = 1;\n   init = tree_cons (NULL_TREE, init, NULL_TREE);\n   \n@@ -827,7 +827,7 @@ generic_initializer (tree desc, tree target)\n {\n   tree init = tinfo_base_init (desc, target);\n   \n-  init = build (CONSTRUCTOR, NULL_TREE, NULL_TREE, init);\n+  init = build_constructor (NULL_TREE, init);\n   TREE_HAS_CONSTRUCTOR (init) = TREE_CONSTANT (init) = TREE_STATIC (init) = 1;\n   return init;\n }\n@@ -854,7 +854,7 @@ ptr_initializer (tree desc, tree target, bool *non_public_ptr)\n                     get_tinfo_ptr (TYPE_MAIN_VARIANT (to)),\n                     init);\n   \n-  init = build (CONSTRUCTOR, NULL_TREE, NULL_TREE, nreverse (init));\n+  init = build_constructor (NULL_TREE, nreverse (init));\n   TREE_HAS_CONSTRUCTOR (init) = TREE_CONSTANT (init) = TREE_STATIC (init) = 1;\n   return init;\n }\n@@ -891,7 +891,7 @@ ptm_initializer (tree desc, tree target, bool *non_public_ptr)\n \t\t    get_tinfo_ptr (klass),\n \t\t    init);  \n   \n-  init = build (CONSTRUCTOR, NULL_TREE, NULL_TREE, nreverse (init));\n+  init = build_constructor (NULL_TREE, nreverse (init));\n   TREE_HAS_CONSTRUCTOR (init) = TREE_CONSTANT (init) = TREE_STATIC (init) = 1;\n   return init;  \n }\n@@ -959,7 +959,7 @@ class_initializer (tree desc, tree target, tree trail)\n   tree init = tinfo_base_init (desc, target);\n   \n   TREE_CHAIN (init) = trail;\n-  init = build (CONSTRUCTOR, NULL_TREE, NULL_TREE, init);\n+  init = build_constructor (NULL_TREE, init);\n   TREE_HAS_CONSTRUCTOR (init) = TREE_CONSTANT (init) = TREE_STATIC (init) = 1;\n   return init;  \n }\n@@ -1078,12 +1078,11 @@ get_pseudo_ti_init (tree type, tree var_desc, bool *non_public_p)\n \t\t\t\t\t   build_int_2 (flags, 0));\n               base_init = tree_cons (NULL_TREE, offset, base_init);\n               base_init = tree_cons (NULL_TREE, tinfo, base_init);\n-              base_init = build (CONSTRUCTOR, NULL_TREE, NULL_TREE, base_init);\n+              base_init = build_constructor (NULL_TREE, base_init);\n \t      TREE_HAS_CONSTRUCTOR (base_init) = 1;\n               base_inits = tree_cons (NULL_TREE, base_init, base_inits);\n             }\n-\t  base_inits = build (CONSTRUCTOR,\n-\t\t\t      NULL_TREE, NULL_TREE, base_inits);\n+\t  base_inits = build_constructor (NULL_TREE, base_inits);\n \t  TREE_HAS_CONSTRUCTOR (base_inits) = 1;\n \t  base_inits = tree_cons (NULL_TREE, base_inits, NULL_TREE);\n \t  /* Prepend the number of bases.  */"}, {"sha": "7c7af3e839913b44e56fa43de13091db8786dc45", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcf92453c80642d3b98252f21a64ce8277cca8c5/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcf92453c80642d3b98252f21a64ce8277cca8c5/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=dcf92453c80642d3b98252f21a64ce8277cca8c5", "patch": "@@ -1600,8 +1600,7 @@ finish_compound_literal (type, initializer_list)\n   tree compound_literal;\n \n   /* Build a CONSTRUCTOR for the INITIALIZER_LIST.  */\n-  compound_literal = build_nt (CONSTRUCTOR, NULL_TREE,\n-\t\t\t       initializer_list);\n+  compound_literal = build_constructor (NULL_TREE, initializer_list);\n   /* Mark it as a compound-literal.  */\n   TREE_HAS_CONSTRUCTOR (compound_literal) = 1;\n   if (processing_template_decl)"}, {"sha": "8e2682f7f93fe91f09152c38819f55f4d0c60906", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcf92453c80642d3b98252f21a64ce8277cca8c5/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcf92453c80642d3b98252f21a64ce8277cca8c5/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=dcf92453c80642d3b98252f21a64ce8277cca8c5", "patch": "@@ -5781,7 +5781,7 @@ build_ptrmemfunc1 (type, delta, pfn)\n   /* Finish creating the initializer.  */\n   u = tree_cons (pfn_field, pfn,\n \t\t build_tree_list (delta_field, delta));\n-  u = build (CONSTRUCTOR, type, NULL_TREE, u);\n+  u = build_constructor (type, u);\n   TREE_CONSTANT (u) = TREE_CONSTANT (pfn) && TREE_CONSTANT (delta);\n   TREE_STATIC (u) = (TREE_CONSTANT (u)\n \t\t     && (initializer_constant_valid_p (pfn, TREE_TYPE (pfn))"}, {"sha": "2df882a1db38a4cb49d8b0278b7a445ad64d3bfa", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcf92453c80642d3b98252f21a64ce8277cca8c5/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcf92453c80642d3b98252f21a64ce8277cca8c5/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=dcf92453c80642d3b98252f21a64ce8277cca8c5", "patch": "@@ -336,7 +336,7 @@ store_init_value (decl, init)\n       if (TREE_CODE (init) == TREE_LIST)\n \t{\n \t  error (\"constructor syntax used, but no constructor declared for type `%T'\", type);\n-\t  init = build_nt (CONSTRUCTOR, NULL_TREE, nreverse (init));\n+\t  init = build_constructor (NULL_TREE, nreverse (init));\n \t}\n     }\n   else if (TREE_CODE (init) == TREE_LIST\n@@ -704,7 +704,7 @@ process_init_constructor (type, init, elts)\n \t      if (IS_AGGR_TYPE (TREE_TYPE (type)))\n \t\tnext1 = build_functional_cast (TREE_TYPE (type), NULL_TREE);\n \t      else\n-\t\tnext1 = build (CONSTRUCTOR, NULL_TREE, NULL_TREE, NULL_TREE);\n+\t\tnext1 = build_constructor (NULL_TREE, NULL_TREE);\n \t      next1 = digest_init (TREE_TYPE (type), next1, 0);\n \t    }\n \t  else if (! zero_init_p (TREE_TYPE (type)))\n@@ -797,8 +797,7 @@ process_init_constructor (type, init, elts)\n \t\t\t\t\t       NULL_TREE);\n \t      else\n \t        {\n-\t\t  next1 = build (CONSTRUCTOR, NULL_TREE, NULL_TREE,\n-\t\t\t         NULL_TREE);\n+\t\t  next1 = build_constructor (NULL_TREE, NULL_TREE);\n                   if (init)\n                     TREE_HAS_CONSTRUCTOR (next1)\n                        = TREE_HAS_CONSTRUCTOR (init);\n@@ -926,7 +925,7 @@ process_init_constructor (type, init, elts)\n   if (erroneous)\n     return error_mark_node;\n \n-  result = build (CONSTRUCTOR, type, NULL_TREE, nreverse (members));\n+  result = build_constructor (type, nreverse (members));\n   if (TREE_CODE (type) == ARRAY_TYPE && TYPE_DOMAIN (type) == NULL_TREE)\n     complete_array_type (type, result, /*do_default=*/0);\n   if (init)\n@@ -1232,7 +1231,7 @@ build_functional_cast (exp, parms)\n   if (parms == NULL_TREE && !TYPE_NEEDS_CONSTRUCTING (type)\n       && TYPE_HAS_DEFAULT_CONSTRUCTOR (type))\n     {\n-      exp = build (CONSTRUCTOR, type, NULL_TREE, NULL_TREE);\n+      exp = build_constructor (type, NULL_TREE);\n       return get_target_expr (exp);\n     }\n "}, {"sha": "fc712ff07013b078eef37a934d550ab178499952", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcf92453c80642d3b98252f21a64ce8277cca8c5/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcf92453c80642d3b98252f21a64ce8277cca8c5/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=dcf92453c80642d3b98252f21a64ce8277cca8c5", "patch": "@@ -1,3 +1,12 @@\n+2003-04-12  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* com.c (ffecom_build_complex_constant_, ffecom_expr_)\n+\t(ffecom_init_zero_, ffecom_transform_namelist_, ffecom_vardesc_)\n+\t(ffecom_vardesc_array_, ffecom_vardesc_dims_, ffecom_2)\n+\t* ste.c (ffeste_io_ialist_, ffeste_io_cilist_, ffeste_io_cllist_)\n+\t(ffeste_io_icilist_, ffeste_io_inlist_, ffeste_io_olist_):\n+\tUse build_constructor.\n+\n 2003-04-11  Bud Davis <bdavis9659@comcast.net>\n \n \tPR Fortran/9263"}, {"sha": "1ccaeb20dcee1caefca1ccb6023e257ff4a9bf33", "filename": "gcc/f/com.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcf92453c80642d3b98252f21a64ce8277cca8c5/gcc%2Ff%2Fcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcf92453c80642d3b98252f21a64ce8277cca8c5/gcc%2Ff%2Fcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.c?ref=dcf92453c80642d3b98252f21a64ce8277cca8c5", "patch": "@@ -1287,7 +1287,7 @@ ffecom_build_complex_constant_ (tree type, tree realpart, tree imagpart)\n     {\n       bothparts = build_tree_list (TYPE_FIELDS (type), realpart);\n       TREE_CHAIN (bothparts) = build_tree_list (TREE_CHAIN (TYPE_FIELDS (type)), imagpart);\n-      bothparts = build (CONSTRUCTOR, type, NULL_TREE, bothparts);\n+      bothparts = build_constructor (type, bothparts);\n     }\n   else\n     {\n@@ -3027,7 +3027,7 @@ ffecom_expr_ (ffebld expr, tree dest_tree, ffebld dest,\n \t   build_range_type (ffecom_integer_type_node,\n \t\t\t     ffecom_integer_zero_node,\n \t\t\t     item));\n-      list = build (CONSTRUCTOR, item, NULL_TREE, list);\n+      list = build_constructor (item, list);\n       TREE_CONSTANT (list) = 1;\n       TREE_STATIC (list) = 1;\n       return list;\n@@ -3075,7 +3075,7 @@ ffecom_expr_ (ffebld expr, tree dest_tree, ffebld dest,\n \t   build_range_type (ffecom_integer_type_node,\n \t\t\t     ffecom_integer_zero_node,\n \t\t\t     item));\n-      list = build (CONSTRUCTOR, item, NULL_TREE, list);\n+      list = build_constructor (item, list);\n       TREE_CONSTANT (list) = 1;\n       TREE_STATIC (list) = 1;\n       return list;\n@@ -6302,7 +6302,7 @@ ffecom_init_zero_ (tree decl)\n     init = convert (type, integer_zero_node);\n   else if (!incremental)\n     {\n-      init = build (CONSTRUCTOR, type, NULL_TREE, NULL_TREE);\n+      init = build_constructor (type, NULL_TREE);\n       TREE_CONSTANT (init) = 1;\n       TREE_STATIC (init) = 1;\n     }\n@@ -8761,7 +8761,7 @@ ffecom_transform_namelist_ (ffesymbol s)\n   TREE_CHAIN (TREE_CHAIN (nmlinits))\n     = build_tree_list ((field = TREE_CHAIN (field)), nvarsinit);\n \n-  nmlinits = build (CONSTRUCTOR, nmltype, NULL_TREE, nmlinits);\n+  nmlinits = build_constructor (nmltype, nmlinits);\n   TREE_CONSTANT (nmlinits) = 1;\n   TREE_STATIC (nmlinits) = 1;\n \n@@ -9296,7 +9296,7 @@ ffecom_vardesc_ (ffebld expr)\n       TREE_CHAIN (TREE_CHAIN (TREE_CHAIN (varinits)))\n \t= build_tree_list ((field = TREE_CHAIN (field)), typeinit);\n \n-      varinits = build (CONSTRUCTOR, vardesctype, NULL_TREE, varinits);\n+      varinits = build_constructor (vardesctype, varinits);\n       TREE_CONSTANT (varinits) = 1;\n       TREE_STATIC (varinits) = 1;\n \n@@ -9341,7 +9341,7 @@ ffecom_vardesc_array_ (ffesymbol s)\n \t\t\t   build_range_type (integer_type_node,\n \t\t\t\t\t     integer_one_node,\n \t\t\t\t\t     build_int_2 (i, 0)));\n-  list = build (CONSTRUCTOR, item, NULL_TREE, list);\n+  list = build_constructor (item, list);\n   TREE_CONSTANT (list) = 1;\n   TREE_STATIC (list) = 1;\n \n@@ -9447,7 +9447,7 @@ ffecom_vardesc_dims_ (ffesymbol s)\n \t\t\t\t\t       build_int_2\n \t\t\t\t\t       ((int) ffesymbol_rank (s)\n \t\t\t\t\t\t+ 2, 0)));\n-    list = build (CONSTRUCTOR, item, NULL_TREE, numdim);\n+    list = build_constructor (item, numdim);\n     TREE_CONSTANT (list) = 1;\n     TREE_STATIC (list) = 1;\n \n@@ -9582,7 +9582,7 @@ ffecom_2 (enum tree_code code, tree type, tree node1,\n     case COMPLEX_EXPR:\n       item = build_tree_list (TYPE_FIELDS (type), node1);\n       TREE_CHAIN (item) = build_tree_list (TREE_CHAIN (TYPE_FIELDS (type)), node2);\n-      item = build (CONSTRUCTOR, type, NULL_TREE, item);\n+      item = build_constructor (type, item);\n       break;\n \n     case PLUS_EXPR:"}, {"sha": "a1f355b7b17ea7c20690322928c6d9edf1888a1e", "filename": "gcc/f/ste.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcf92453c80642d3b98252f21a64ce8277cca8c5/gcc%2Ff%2Fste.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcf92453c80642d3b98252f21a64ce8277cca8c5/gcc%2Ff%2Fste.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fste.c?ref=dcf92453c80642d3b98252f21a64ce8277cca8c5", "patch": "@@ -1231,7 +1231,7 @@ ffeste_io_ialist_ (bool have_err,\n   initn = inits;\n   ffeste_f2c_init_next_ (unitinit);\n \n-  inits = build (CONSTRUCTOR, f2c_alist_struct, NULL_TREE, inits);\n+  inits = build_constructor (f2c_alist_struct, inits);\n   TREE_CONSTANT (inits) = constantp ? 1 : 0;\n   TREE_STATIC (inits) = 1;\n \n@@ -1434,7 +1434,7 @@ ffeste_io_cilist_ (bool have_err,\n   ffeste_f2c_init_next_ (formatinit);\n   ffeste_f2c_init_next_ (recinit);\n \n-  inits = build (CONSTRUCTOR, f2c_cilist_struct, NULL_TREE, inits);\n+  inits = build_constructor (f2c_cilist_struct, inits);\n   TREE_CONSTANT (inits) = constantp ? 1 : 0;\n   TREE_STATIC (inits) = 1;\n \n@@ -1561,7 +1561,7 @@ ffeste_io_cllist_ (bool have_err,\n   ffeste_f2c_init_next_ (unitinit);\n   ffeste_f2c_init_next_ (statinit);\n \n-  inits = build (CONSTRUCTOR, f2c_close_struct, NULL_TREE, inits);\n+  inits = build_constructor (f2c_close_struct, inits);\n   TREE_CONSTANT (inits) = constantp ? 1 : 0;\n   TREE_STATIC (inits) = 1;\n \n@@ -1766,7 +1766,7 @@ ffeste_io_icilist_ (bool have_err,\n   ffeste_f2c_init_next_ (unitleninit);\n   ffeste_f2c_init_next_ (unitnuminit);\n \n-  inits = build (CONSTRUCTOR, f2c_icilist_struct, NULL_TREE, inits);\n+  inits = build_constructor (f2c_icilist_struct, inits);\n   TREE_CONSTANT (inits) = constantp ? 1 : 0;\n   TREE_STATIC (inits) = 1;\n \n@@ -2013,7 +2013,7 @@ ffeste_io_inlist_ (bool have_err,\n   ffeste_f2c_init_next_ (blankinit);\n   ffeste_f2c_init_next_ (blankleninit);\n \n-  inits = build (CONSTRUCTOR, f2c_inquire_struct, NULL_TREE, inits);\n+  inits = build_constructor (f2c_inquire_struct, inits);\n   TREE_CONSTANT (inits) = constantp ? 1 : 0;\n   TREE_STATIC (inits) = 1;\n \n@@ -2189,7 +2189,7 @@ ffeste_io_olist_ (bool have_err,\n   ffeste_f2c_init_next_ (reclinit);\n   ffeste_f2c_init_next_ (blankinit);\n \n-  inits = build (CONSTRUCTOR, f2c_open_struct, NULL_TREE, inits);\n+  inits = build_constructor (f2c_open_struct, inits);\n   TREE_CONSTANT (inits) = constantp ? 1 : 0;\n   TREE_STATIC (inits) = 1;\n "}, {"sha": "4ee59ee672669c796f9c021ad7d92fd66187c7a5", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcf92453c80642d3b98252f21a64ce8277cca8c5/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcf92453c80642d3b98252f21a64ce8277cca8c5/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=dcf92453c80642d3b98252f21a64ce8277cca8c5", "patch": "@@ -1,3 +1,12 @@\n+2003-04-12  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* class.c (make_field_value, make_method_value, get_dispatch_table)\n+\t(make_class_data, emit_offset_symbol_table)\n+\t* constants.c (build_constants_constructor)\n+\t* java-tree.h (START_RECORD_CONSTRUCTOR)\n+\t* parse.y (maybe_build_array_element_wfl):\n+\tUse build_constructor.\n+\n 2003-04-10  Eric Blake  <ebb9@email.byu.edu>\n \n \tPR java/10253:"}, {"sha": "fff42473cd06dce1c10d1f858488eb048083f9f1", "filename": "gcc/java/class.c", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcf92453c80642d3b98252f21a64ce8277cca8c5/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcf92453c80642d3b98252f21a64ce8277cca8c5/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=dcf92453c80642d3b98252f21a64ce8277cca8c5", "patch": "@@ -1076,7 +1076,7 @@ make_field_value (tree fdecl)\n \n   PUSH_FIELD_VALUE\n     (finit, \"info\",\n-     build (CONSTRUCTOR, field_info_union_node, NULL_TREE,\n+     build_constructor (field_info_union_node,\n \t    build_tree_list\n \t    ((FIELD_STATIC (fdecl)\n \t      ? TREE_CHAIN (TYPE_FIELDS (field_info_union_node))\n@@ -1145,7 +1145,7 @@ make_method_value (tree mdecl)\n \t    table = tree_cons (NULL_TREE, utf8, table);\n \t  }\n \ttype = build_prim_array_type (ptr_type_node, length);\n-\ttable = build (CONSTRUCTOR, type, NULL_TREE, table);\n+\ttable = build_constructor (type, table);\n \t/* Compute something unique enough.  */\n \tsprintf (buf, \"_methods%d\", method_name_count++);\n \tarray = build_decl (VAR_DECL, get_identifier (buf), type);\n@@ -1267,9 +1267,8 @@ get_dispatch_table (tree type, tree this_class_addr)\n   if (TARGET_VTABLE_USES_DESCRIPTORS)\n     arraysize *= TARGET_VTABLE_USES_DESCRIPTORS;\n   arraysize += 2;\n-  return build (CONSTRUCTOR,\n-\t\tbuild_prim_array_type (nativecode_ptr_type_node, arraysize),\n-\t\tNULL_TREE, list);\n+  return build_constructor (build_prim_array_type (nativecode_ptr_type_node,\n+\t\t\t\t\t\t   arraysize), list);\n }\n \n static int\n@@ -1352,8 +1351,8 @@ make_class_data (tree type)\n       field_array_type = build_prim_array_type (field_type_node, field_count);\n       fields_decl = build_decl (VAR_DECL, mangled_classname (\"_FL_\", type),\n \t\t\t\tfield_array_type);\n-      DECL_INITIAL (fields_decl) = build (CONSTRUCTOR, field_array_type,\n-\t\t\t\t\t  NULL_TREE, static_fields);\n+      DECL_INITIAL (fields_decl) = build_constructor (field_array_type,\n+\t\t\t\t\t\t      static_fields);\n       TREE_STATIC (fields_decl) = 1;\n       DECL_ARTIFICIAL (fields_decl) = 1;\n       DECL_IGNORED_P (fields_decl) = 1;\n@@ -1378,8 +1377,8 @@ make_class_data (tree type)\n   method_array_type = build_prim_array_type (method_type_node, method_count);\n   methods_decl = build_decl (VAR_DECL, mangled_classname (\"_MT_\", type),\n \t\t\t     method_array_type);\n-  DECL_INITIAL (methods_decl) = build (CONSTRUCTOR, method_array_type,\n-\t\t\t\t       NULL_TREE, nreverse (methods));\n+  DECL_INITIAL (methods_decl) = build_constructor (method_array_type,\n+\t\t\t\t\t\t   nreverse (methods));\n   TREE_STATIC (methods_decl) = 1;\n   DECL_ARTIFICIAL (methods_decl) = 1;\n   DECL_IGNORED_P (methods_decl) = 1;\n@@ -1451,8 +1450,7 @@ make_class_data (tree type)\n \t    }\n \t  init = tree_cons (NULL_TREE, index, init); \n \t}\n-      DECL_INITIAL (idecl) = build (CONSTRUCTOR, interface_array_type,\n-\t\t\t\t    NULL_TREE, init);\n+      DECL_INITIAL (idecl) = build_constructor (interface_array_type, init);\n       TREE_STATIC (idecl) = 1;\n       DECL_ARTIFICIAL (idecl) = 1;\n       DECL_IGNORED_P (idecl) = 1;\n@@ -2099,7 +2097,7 @@ emit_offset_symbol_table (void)\n \n   /* Put the list in the right order and make it a constructor. */\n   list = nreverse (list);\n-  table = build (CONSTRUCTOR, method_symbols_array_type, NULL_TREE, list);  \n+  table = build_constructor (method_symbols_array_type, list);  \n \n   /* Make it the initial value for otable_syms and emit the decl. */\n   DECL_INITIAL (otable_syms_decl) = table;"}, {"sha": "274a8bfd91ba302319123271a34e30b84e69628c", "filename": "gcc/java/constants.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcf92453c80642d3b98252f21a64ce8277cca8c5/gcc%2Fjava%2Fconstants.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcf92453c80642d3b98252f21a64ce8277cca8c5/gcc%2Fjava%2Fconstants.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fconstants.c?ref=dcf92453c80642d3b98252f21a64ce8277cca8c5", "patch": "@@ -442,8 +442,8 @@ build_constants_constructor (void)\n   \n       data_decl = TREE_OPERAND (build_constant_data_ref (), 0);\n       TREE_TYPE (data_decl) = build_array_type (ptr_type_node, index_type), \n-      DECL_INITIAL (data_decl) = build (CONSTRUCTOR, TREE_TYPE (data_decl),\n-\t\t\t\t\tNULL_TREE, data_list);\n+      DECL_INITIAL (data_decl) = build_constructor (TREE_TYPE (data_decl),\n+\t\t\t\t\t\t    data_list);\n       DECL_SIZE (data_decl) = TYPE_SIZE (TREE_TYPE (data_decl));\n       DECL_SIZE_UNIT (data_decl) = TYPE_SIZE_UNIT (TREE_TYPE (data_decl));\n       rest_of_decl_compilation (data_decl, (char *) 0, 1, 0);\n@@ -454,8 +454,7 @@ build_constants_constructor (void)\n \t\t\t\t\t\t\t   current_class),\n \t\t\t      tags_type);\n       TREE_STATIC (tags_decl) = 1;\n-      DECL_INITIAL (tags_decl) = build (CONSTRUCTOR, tags_type,\n-\t\t\t\t\tNULL_TREE, tags_list);\n+      DECL_INITIAL (tags_decl) = build_constructor (tags_type, tags_list);\n       rest_of_decl_compilation (tags_decl, (char*) 0, 1, 0);\n       tags_value = build_address_of (tags_decl);\n     }"}, {"sha": "62d2452861e65940312436f986559a3af8b7d90e", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcf92453c80642d3b98252f21a64ce8277cca8c5/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcf92453c80642d3b98252f21a64ce8277cca8c5/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=dcf92453c80642d3b98252f21a64ce8277cca8c5", "patch": "@@ -1650,7 +1650,7 @@ extern tree *type_map;\n \n /* Start building a RECORD_TYPE constructor with a given TYPE in CONS. */\n #define START_RECORD_CONSTRUCTOR(CONS, CTYPE) { \\\n-  CONS = build (CONSTRUCTOR, CTYPE, NULL_TREE, NULL_TREE);\\\n+  CONS = build_constructor (CTYPE, NULL_TREE);\\\n   TREE_CHAIN(CONS) = TYPE_FIELDS (CTYPE); }\n \n /* Append a field initializer to CONS for the dummy field for the inherited"}, {"sha": "df60f9e221065270a698a069c4b6cd5fde4e3885", "filename": "gcc/java/parse.y", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcf92453c80642d3b98252f21a64ce8277cca8c5/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcf92453c80642d3b98252f21a64ce8277cca8c5/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=dcf92453c80642d3b98252f21a64ce8277cca8c5", "patch": "@@ -14499,7 +14499,7 @@ maybe_build_array_element_wfl (tree node)\n static tree\n build_new_array_init (int location, tree values)\n {\n-  tree constructor = build (CONSTRUCTOR, NULL_TREE, NULL_TREE, values);\n+  tree constructor = build_constructor (NULL_TREE, values);\n   tree to_return = build1 (NEW_ARRAY_INIT, NULL_TREE, constructor);\n   EXPR_WFL_LINECOL (to_return) = location;\n   return to_return;"}, {"sha": "36badee5884d9c34a4c2d90370b7fe8acf886932", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 32, "deletions": 27, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcf92453c80642d3b98252f21a64ce8277cca8c5/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcf92453c80642d3b98252f21a64ce8277cca8c5/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=dcf92453c80642d3b98252f21a64ce8277cca8c5", "patch": "@@ -124,7 +124,7 @@ static void finish_objc\t\t\t\tPARAMS ((void));\n /* Code generation.  */\n \n static void synth_module_prologue\t\tPARAMS ((void));\n-static tree build_constructor\t\t\tPARAMS ((tree, tree));\n+static tree objc_build_constructor\t\tPARAMS ((tree, tree));\n static rtx build_module_descriptor\t\tPARAMS ((void));\n static tree init_module_descriptor\t\tPARAMS ((tree));\n static tree build_objc_method_call\t\tPARAMS ((int, tree, tree,\n@@ -1346,7 +1346,8 @@ build_objc_string_object (strings)\n     = tree_cons (NULL_TREE, copy_node (build_unary_op (ADDR_EXPR, string, 1)),\n \t\t initlist);\n   initlist = tree_cons (NULL_TREE, build_int_2 (length, 0), initlist);\n-  constructor = build_constructor (constant_string_type, nreverse (initlist));\n+  constructor = objc_build_constructor (constant_string_type,\n+\t\t\t\t\tnreverse (initlist));\n \n   if (!flag_next_runtime)\n     {\n@@ -1401,7 +1402,7 @@ objc_add_static_instance (constructor, class_decl)\n    with type TYPE and elements ELTS.  */\n \n static tree\n-build_constructor (type, elts)\n+objc_build_constructor (type, elts)\n      tree type, elts;\n {\n   tree constructor, f, e;\n@@ -1424,7 +1425,7 @@ build_constructor (type, elts)\n \t  TREE_VALUE (e) = convert (TREE_TYPE (f), TREE_VALUE (e));\n     }\n \n-  constructor = build (CONSTRUCTOR, type, NULL_TREE, elts);\n+  constructor = build_constructor (type, elts);\n   TREE_CONSTANT (constructor) = 1;\n   TREE_STATIC (constructor) = 1;\n   TREE_READONLY (constructor) = 1;\n@@ -1540,7 +1541,7 @@ init_def_list (type)\n       initlist = tree_cons (NULL_TREE, expr, initlist);\n     }\n \n-  return build_constructor (type, nreverse (initlist));\n+  return objc_build_constructor (type, nreverse (initlist));\n }\n \n /* Construct the initial value for all of _objc_symtab.  */\n@@ -1585,7 +1586,7 @@ init_objc_symtab (type)\n \t\t\t    initlist);\n     }\n \n-  return build_constructor (type, nreverse (initlist));\n+  return objc_build_constructor (type, nreverse (initlist));\n }\n \n /* Push forward-declarations of all the categories so that\n@@ -1674,7 +1675,7 @@ init_module_descriptor (type)\n     expr = build_int_2 (0, 0);\n   initlist = tree_cons (NULL_TREE, expr, initlist);\n \n-  return build_constructor (type, nreverse (initlist));\n+  return objc_build_constructor (type, nreverse (initlist));\n }\n \n /* Write out the data structures to describe Objective C classes defined.\n@@ -1898,7 +1899,7 @@ generate_static_references ()\n       /* Output {..., NULL}.  */\n       initlist = tree_cons (NULL_TREE, build_int_2 (0, 0), initlist);\n \n-      expr = build_constructor (TREE_TYPE (decl), nreverse (initlist));\n+      expr = objc_build_constructor (TREE_TYPE (decl), nreverse (initlist));\n       finish_decl (decl, expr, NULL_TREE);\n       TREE_USED (decl) = 1;\n \n@@ -1921,7 +1922,7 @@ generate_static_references ()\n   TREE_USED (static_instances_decl) = 1;\n   DECL_CONTEXT (static_instances_decl) = 0;\n   DECL_ARTIFICIAL (static_instances_decl) = 1;\n-  expr = build_constructor (TREE_TYPE (static_instances_decl),\n+  expr = objc_build_constructor (TREE_TYPE (static_instances_decl),\n \t\t\t    nreverse (decls));\n   finish_decl (static_instances_decl, expr, NULL_TREE);\n }\n@@ -2088,8 +2089,8 @@ build_selector_translation_table ()\n \t      tree encoding = get_proto_encoding (TREE_PURPOSE (chain));\n \t      eltlist = tree_cons (NULL_TREE, expr, NULL_TREE);\n \t      eltlist = tree_cons (NULL_TREE, encoding, eltlist);\n-\t      expr = build_constructor (objc_selector_template,\n-\t\t\t\t\tnreverse (eltlist));\n+\t      expr = objc_build_constructor (objc_selector_template,\n+\t\t\t\t\t     nreverse (eltlist));\n \t    }\n \t  initlist = tree_cons (NULL_TREE, expr, initlist);\n \t  \n@@ -2104,8 +2105,8 @@ build_selector_translation_table ()\n       /* NULL terminate the list and fix the decl for output.  */\n       initlist = tree_cons (NULL_TREE, build_int_2 (0, 0), initlist);\n       DECL_INITIAL (UOBJC_SELECTOR_TABLE_decl) = objc_ellipsis_node;\n-      initlist = build_constructor (TREE_TYPE (UOBJC_SELECTOR_TABLE_decl),\n-\t\t\t\t    nreverse (initlist));\n+      initlist = objc_build_constructor (TREE_TYPE (UOBJC_SELECTOR_TABLE_decl),\n+\t\t\t\t\t nreverse (initlist));\n       finish_decl (UOBJC_SELECTOR_TABLE_decl, initlist, NULL_TREE);\n       current_function_decl = NULL_TREE;\n     }\n@@ -2636,13 +2637,15 @@ build_descriptor_table_initializer (type, entries)\n \n       initlist\n \t= tree_cons (NULL_TREE,\n-\t\t     build_constructor (type, nreverse (eltlist)), initlist);\n+\t\t     objc_build_constructor (type, nreverse (eltlist)),\n+\t\t     initlist);\n \n       entries = TREE_CHAIN (entries);\n     }\n   while (entries);\n \n-  return build_constructor (build_array_type (type, 0), nreverse (initlist));\n+  return objc_build_constructor (build_array_type (type, 0),\n+\t\t\t\t nreverse (initlist));\n }\n \n /* struct objc_method_prototype_list {\n@@ -2857,7 +2860,7 @@ generate_descriptor_table (type, name, size, list, proto)\n   initlist = build_tree_list (NULL_TREE, build_int_2 (size, 0));\n   initlist = tree_cons (NULL_TREE, list, initlist);\n \n-  finish_decl (decl, build_constructor (type, nreverse (initlist)),\n+  finish_decl (decl, objc_build_constructor (type, nreverse (initlist)),\n \t       NULL_TREE);\n \n   return decl;\n@@ -3223,7 +3226,7 @@ build_protocol_initializer (type, protocol_name, protocol_list,\n       initlist = tree_cons (NULL_TREE, expr, initlist);\n     }\n \n-  return build_constructor (type, nreverse (initlist));\n+  return objc_build_constructor (type, nreverse (initlist));\n }\n \f\n /* struct objc_category {\n@@ -3823,14 +3826,15 @@ build_ivar_list_initializer (type, field_decl)\n       /* Set offset.  */\n       ivar = tree_cons (NULL_TREE, byte_position (field_decl), ivar);\n       initlist = tree_cons (NULL_TREE, \n-\t\t\t    build_constructor (type, nreverse (ivar)),\n+\t\t\t    objc_build_constructor (type, nreverse (ivar)),\n \t\t\t    initlist);\n \n       field_decl = TREE_CHAIN (field_decl);\n     }\n   while (field_decl);\n \n-  return build_constructor (build_array_type (type, 0), nreverse (initlist));\n+  return objc_build_constructor (build_array_type (type, 0),\n+\t\t\t\t nreverse (initlist));\n }\n \n static tree\n@@ -3852,7 +3856,7 @@ generate_ivars_list (type, name, size, list)\n   initlist = tree_cons (NULL_TREE, list, initlist);\n \n   finish_decl (decl,\n-\t       build_constructor (TREE_TYPE (decl), nreverse (initlist)),\n+\t       objc_build_constructor (TREE_TYPE (decl), nreverse (initlist)),\n \t       NULL_TREE);\n \n   return decl;\n@@ -3945,14 +3949,15 @@ build_dispatch_table_initializer (type, entries)\n \t\t\t    elemlist);\n \n       initlist = tree_cons (NULL_TREE, \n-\t\t\t    build_constructor (type, nreverse (elemlist)),\n+\t\t\t    objc_build_constructor (type, nreverse (elemlist)),\n \t\t\t    initlist);\n \n       entries = TREE_CHAIN (entries);\n     }\n   while (entries);\n \n-  return build_constructor (build_array_type (type, 0), nreverse (initlist));\n+  return objc_build_constructor (build_array_type (type, 0),\n+\t\t\t\t nreverse (initlist));\n }\n \n /* To accomplish method prototyping without generating all kinds of\n@@ -4023,7 +4028,7 @@ generate_dispatch_table (type, name, size, list)\n   initlist = tree_cons (NULL_TREE, list, initlist);\n \n   finish_decl (decl,\n-\t       build_constructor (TREE_TYPE (decl), nreverse (initlist)),\n+\t       objc_build_constructor (TREE_TYPE (decl), nreverse (initlist)),\n \t       NULL_TREE);\n \n   return decl;\n@@ -4200,8 +4205,8 @@ generate_protocol_list (i_or_p)\n   refs_decl = start_decl (expr_decl, decl_specs, 1, NULL_TREE);\n   DECL_CONTEXT (refs_decl) = NULL_TREE;\n \n-  finish_decl (refs_decl, build_constructor (TREE_TYPE (refs_decl),\n-\t\t\t\t\t     nreverse (initlist)),\n+  finish_decl (refs_decl, objc_build_constructor (TREE_TYPE (refs_decl),\n+\t\t\t\t\t\t  nreverse (initlist)),\n \t       NULL_TREE);\n \n   return refs_decl;\n@@ -4255,7 +4260,7 @@ build_category_initializer (type, cat_name, class_name,\n \tinitlist = tree_cons (NULL_TREE, expr, initlist);\n      }\n \n-  return build_constructor (type, nreverse (initlist));\n+  return objc_build_constructor (type, nreverse (initlist));\n }\n \n /* struct objc_class {\n@@ -4366,7 +4371,7 @@ build_shared_structure_initializer (type, isa, super, name, size, status,\n   /* gc_object_type = NULL */\n   initlist = tree_cons (NULL_TREE, build_int_2 (0, 0), initlist);\n \n-  return build_constructor (type, nreverse (initlist));\n+  return objc_build_constructor (type, nreverse (initlist));\n }\n \n /* static struct objc_category _OBJC_CATEGORY_<name> = { ... };  */"}, {"sha": "99ddd3bc7d49e25c99fee028ac74be90d08737f5", "filename": "gcc/profile.c", "status": "modified", "additions": 21, "deletions": 33, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcf92453c80642d3b98252f21a64ce8277cca8c5/gcc%2Fprofile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcf92453c80642d3b98252f21a64ce8277cca8c5/gcc%2Fprofile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile.c?ref=dcf92453c80642d3b98252f21a64ce8277cca8c5", "patch": "@@ -1649,23 +1649,20 @@ build_function_info_value (function)\n \t      build_counter_section_value (function->counter_sections[i].tag,\n \t\t\t\t\t   function->counter_sections[i].n_counters);\n       set_purpose (counter_section_value, counter_section_fields);\n-      counter_sections_value = tree_cons (NULL_TREE,\n-\t\t\t\t\t  build (CONSTRUCTOR,\n-\t\t\t\t\t\t counter_section_type,\n-\t\t\t\t\t\t NULL_TREE,\n-\t\t\t\t\t\t nreverse (counter_section_value)),\n-\t\t\t\t\t  counter_sections_value);\n+      counter_sections_value =\n+\ttree_cons (NULL_TREE,\n+\t\t   build_constructor (counter_section_type,\n+\t\t\t\t      nreverse (counter_section_value)),\n+\t\t   counter_sections_value);\n     }\n   finish_builtin_struct (counter_section_type, \"__counter_section\",\n \t\t\t counter_section_fields, NULL_TREE);\n \n   if (function->n_counter_sections)\n     {\n       counter_sections_value = \n-\t      build (CONSTRUCTOR,\n- \t\t     counter_sections_array_type,\n-\t\t     NULL_TREE,\n-\t\t     nreverse (counter_sections_value)),\n+\t      build_constructor (counter_sections_array_type,\n+\t\t\t\t nreverse (counter_sections_value)),\n       counter_sections_value = build1 (ADDR_EXPR,\n \t\t\t\t       counter_sections_ptr_type,\n \t\t\t\t       counter_sections_value);\n@@ -1832,10 +1829,8 @@ build_gcov_info_value ()\n       tree function_info_value = build_function_info_value (item);\n       set_purpose (function_info_value, function_info_fields);\n       functions = tree_cons (NULL_TREE,\n-    \t\t\t     build (CONSTRUCTOR,\n-\t\t\t    \t    function_info_type,\n-\t\t\t\t    NULL_TREE,\n-\t\t\t\t    nreverse (function_info_value)),\n+    \t\t\t     build_constructor (function_info_type,\n+\t\t\t\t\t\tnreverse (function_info_value)),\n \t\t\t     functions);\n     }\n   finish_builtin_struct (function_info_type, \"__function_info\",\n@@ -1849,10 +1844,7 @@ build_gcov_info_value ()\n       array_type = build_array_type (\n \t\t\tfunction_info_type,\n    \t\t\tbuild_index_type (build_int_2 (n_functions - 1, 0)));\n-      functions = build (CONSTRUCTOR,\n-      \t\t\t array_type,\n-\t\t\t NULL_TREE,\n-\t\t\t nreverse (functions));\n+      functions = build_constructor (array_type, nreverse (functions));\n       functions = build1 (ADDR_EXPR,\n \t\t\t  function_info_ptr_type,\n \t\t\t  functions);\n@@ -1879,12 +1871,11 @@ build_gcov_info_value ()\n \t\tprofile_info.section_info[i].tag,\n \t\tprofile_info.section_info[i].n_counters);\n       set_purpose (counter_sections_value, counter_section_data_fields);\n-      counter_sections = tree_cons (NULL_TREE,\n-\t\t       \t\t    build (CONSTRUCTOR,\n-\t\t       \t\t\t   counter_section_data_type,\n-\t\t       \t\t\t   NULL_TREE,\n-\t\t       \t\t\t   nreverse (counter_sections_value)),\n-\t\t       \t\t    counter_sections);\n+      counter_sections =\n+\ttree_cons (NULL_TREE,\n+\t\t   build_constructor (counter_section_data_type,\n+\t\t\t\t      nreverse (counter_sections_value)),\n+\t\t   counter_sections);\n     }\n   finish_builtin_struct (counter_section_data_type, \"__counter_section_data\",\n \t\t\t counter_section_data_fields, NULL_TREE);\n@@ -1895,13 +1886,11 @@ build_gcov_info_value ()\n \n   if (profile_info.n_sections)\n     {\n-      counter_sections =\n-    \t      build (CONSTRUCTOR,\n-    \t\t     build_array_type (\n-\t       \t\t\t       counter_section_data_type,\n-\t\t       \t\t       build_index_type (build_int_2 (profile_info.n_sections - 1, 0))),\n-\t\t     NULL_TREE,\n-\t\t     nreverse (counter_sections));\n+      tree cst_type = build_index_type (build_int_2 (profile_info.n_sections-1,\n+\t\t\t\t\t\t     0));\n+      cst_type = build_array_type (counter_section_data_type, cst_type);\n+      counter_sections = build_constructor (cst_type,\n+\t\t\t\t\t    nreverse (counter_sections));\n       counter_sections = build1 (ADDR_EXPR,\n \t\t\t\t counter_section_data_ptr_type,\n \t\t\t\t counter_sections);\n@@ -1943,8 +1932,7 @@ create_profiler ()\n \n   gcov_info = build (VAR_DECL, gcov_info_type, NULL_TREE, NULL_TREE);\n   DECL_INITIAL (gcov_info) =\n-\t  build (CONSTRUCTOR, gcov_info_type, NULL_TREE,\n-\t\t nreverse (gcov_info_value));\n+    build_constructor (gcov_info_type, nreverse (gcov_info_value));\n \n   TREE_STATIC (gcov_info) = 1;\n   ASM_GENERATE_INTERNAL_LABEL (name, \"LPBX\", 0);"}, {"sha": "0570261d60d1045dee1fa158d4478df244c921b4", "filename": "gcc/tree.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcf92453c80642d3b98252f21a64ce8277cca8c5/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcf92453c80642d3b98252f21a64ce8277cca8c5/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=dcf92453c80642d3b98252f21a64ce8277cca8c5", "patch": "@@ -468,6 +468,29 @@ build_vector (type, vals)\n   return v;\n }\n \n+/* Return a new CONSTRUCTOR node whose type is TYPE and whose values\n+   are in a list pointed to by VALS.  */\n+tree\n+build_constructor (type, vals)\n+     tree type, vals;\n+{\n+  tree c = make_node (CONSTRUCTOR);\n+  TREE_TYPE (c) = type;\n+  CONSTRUCTOR_ELTS (c) = vals;\n+\n+  /* ??? May not be necessary.  Mirrors what build does.  */\n+  if (vals)\n+    {\n+      TREE_SIDE_EFFECTS (c) = TREE_SIDE_EFFECTS (vals);\n+      TREE_READONLY (c) = TREE_READONLY (vals);\n+      TREE_CONSTANT (c) = TREE_CONSTANT (vals);\n+    }\n+  else\n+    TREE_CONSTANT (c) = 0;  /* safe side */\n+\n+  return c;\n+}\n+\n /* Return a new REAL_CST node whose type is TYPE and value is D.  */\n \n tree"}, {"sha": "70d746394d79afdce0a90875b839851da565b09e", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcf92453c80642d3b98252f21a64ce8277cca8c5/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcf92453c80642d3b98252f21a64ce8277cca8c5/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=dcf92453c80642d3b98252f21a64ce8277cca8c5", "patch": "@@ -2266,6 +2266,7 @@ extern tree build_nt\t\t\tPARAMS ((enum tree_code, ...));\n \n extern tree build_int_2_wide\t\tPARAMS ((unsigned HOST_WIDE_INT, HOST_WIDE_INT));\n extern tree build_vector                PARAMS ((tree, tree));\n+extern tree build_constructor\t\tPARAMS ((tree, tree));\n extern tree build_real_from_int_cst \tPARAMS ((tree, tree));\n extern tree build_complex\t\tPARAMS ((tree, tree, tree));\n extern tree build_string\t\tPARAMS ((int, const char *));"}]}