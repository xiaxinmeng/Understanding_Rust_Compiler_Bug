{"sha": "91ea4f8ddfb30a1274e951d43ac4d79eb5c63e9e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTFlYTRmOGRkZmIzMGExMjc0ZTk1MWQ0M2FjNGQ3OWViNWM2M2U5ZQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2001-10-19T19:42:46Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2001-10-19T19:42:46Z"}, "message": "Makefile.in (rtlanal.o): Depend on $(TM_P_H).\n\n\t* Makefile.in (rtlanal.o): Depend on $(TM_P_H).\n\t* arm-protos.h (rdata_section, zero_init_section, common_section):\n\tPrototype.\n\t* arm.h (ASM_OUTPUT_DEF_FROM_DECLS): Const-ify.\n\t* avr.h (ASM_OUTPUT_SKIP): Rename macro parameter to avoid\n\ttraditional mode stringification.\n\t* function.c (thread_prologue_and_epilogue_insns): Wrap variable\n\tin macros controling its use.\n\t* rtlanal.c: Include tm_p.h.\n\t* varasm.c (asm_output_aligned_bss): Mark parameter with\n\tATTRIBUTE_UNUSED.\n\t(assemble_constant_align, assemble_start_function, assemble_align,\n\tassemble_variable, assemble_trampoline_template,\n\toutput_constant_def_contents): Wrap potentially empty if-stmt body\n\tin brackets.\n\nFrom-SVN: r46360", "tree": {"sha": "35d74451a570e71f324c150e308f21b0bbc64373", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35d74451a570e71f324c150e308f21b0bbc64373"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/91ea4f8ddfb30a1274e951d43ac4d79eb5c63e9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91ea4f8ddfb30a1274e951d43ac4d79eb5c63e9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91ea4f8ddfb30a1274e951d43ac4d79eb5c63e9e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91ea4f8ddfb30a1274e951d43ac4d79eb5c63e9e/comments", "author": null, "committer": null, "parents": [{"sha": "acf9cc0f52e816e6dc29095098cdef6d77ddb7de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acf9cc0f52e816e6dc29095098cdef6d77ddb7de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acf9cc0f52e816e6dc29095098cdef6d77ddb7de"}], "stats": {"total": 62, "additions": 49, "deletions": 13}, "files": [{"sha": "69bc79dcd827b13aacb31f584edd69589fe2a305", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91ea4f8ddfb30a1274e951d43ac4d79eb5c63e9e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91ea4f8ddfb30a1274e951d43ac4d79eb5c63e9e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=91ea4f8ddfb30a1274e951d43ac4d79eb5c63e9e", "patch": "@@ -1,3 +1,21 @@\n+2001-10-19  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* Makefile.in (rtlanal.o): Depend on $(TM_P_H).\n+\t* arm-protos.h (rdata_section, zero_init_section, common_section):\n+\tPrototype.\n+\t* arm.h (ASM_OUTPUT_DEF_FROM_DECLS): Const-ify.\n+\t* avr.h (ASM_OUTPUT_SKIP): Rename macro parameter to avoid\n+\ttraditional mode stringification.\n+\t* function.c (thread_prologue_and_epilogue_insns): Wrap variable\n+\tin macros controling its use.\n+\t* rtlanal.c: Include tm_p.h.\n+\t* varasm.c (asm_output_aligned_bss): Mark parameter with\n+\tATTRIBUTE_UNUSED.\n+\t(assemble_constant_align, assemble_start_function, assemble_align,\n+\tassemble_variable, assemble_trampoline_template,\n+\toutput_constant_def_contents): Wrap potentially empty if-stmt body\n+\tin brackets.\n+\n 2001-10-19  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* a29k-protos.h (literal_section): Prototype."}, {"sha": "c9309727512f610df83ff6f3554e55776bf26a80", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91ea4f8ddfb30a1274e951d43ac4d79eb5c63e9e/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91ea4f8ddfb30a1274e951d43ac4d79eb5c63e9e/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=91ea4f8ddfb30a1274e951d43ac4d79eb5c63e9e", "patch": "@@ -1385,7 +1385,7 @@ print-rtl.o : print-rtl.c $(GCONFIG_H) $(SYSTEM_H) $(RTL_H) $(TREE_H) \\\n     hard-reg-set.h $(BASIC_BLOCK_H)\n \t$(CC) -c $(ALL_CFLAGS) -DGENERATOR_FILE $(ALL_CPPFLAGS) $(INCLUDES) $< $(OUTPUT_OPTION)\n \n-rtlanal.o : rtlanal.c $(CONFIG_H) $(SYSTEM_H) toplev.h $(RTL_H) hard-reg-set.h\n+rtlanal.o : rtlanal.c $(CONFIG_H) $(SYSTEM_H) toplev.h $(RTL_H) hard-reg-set.h $(TM_P_H)\n errors.o : errors.c $(GCONFIG_H) $(SYSTEM_H) errors.h\n \t$(CC) -c $(ALL_CFLAGS) -DGENERATOR_FILE $(ALL_CPPFLAGS) $(INCLUDES) $< $(OUTPUT_OPTION)\n "}, {"sha": "77a33e5cd0a1cf66a0c0ade3bf4d5ff61e199cd9", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91ea4f8ddfb30a1274e951d43ac4d79eb5c63e9e/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91ea4f8ddfb30a1274e951d43ac4d79eb5c63e9e/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=91ea4f8ddfb30a1274e951d43ac4d79eb5c63e9e", "patch": "@@ -23,6 +23,7 @@ Boston, MA 02111-1307, USA.  */\n #ifndef GCC_ARM_PROTOS_H\n #define GCC_ARM_PROTOS_H\n \n+extern void   rdata_section\t\tPARAMS ((void));\n extern void   arm_override_options\tPARAMS ((void));\n extern int    use_return_insn\t\tPARAMS ((int));\n extern int    arm_regno_class \t\tPARAMS ((int));\n@@ -144,6 +145,8 @@ extern char * aof_data_section\t\tPARAMS ((void));\n extern void   aof_add_import\t\tPARAMS ((char *));\n extern void   aof_delete_import\t\tPARAMS ((char *));\n extern void   aof_dump_imports\t\tPARAMS ((FILE *));\n+extern void   zero_init_section\t\tPARAMS ((void));\n+extern void   common_section\t\tPARAMS ((void));\n #endif /* AOF_ASSEMBLER */\n \n #endif /* RTX_CODE */"}, {"sha": "fcd3d42ce3478618c18679fb59e510b4daad2fe7", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91ea4f8ddfb30a1274e951d43ac4d79eb5c63e9e/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91ea4f8ddfb30a1274e951d43ac4d79eb5c63e9e/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=91ea4f8ddfb30a1274e951d43ac4d79eb5c63e9e", "patch": "@@ -2614,8 +2614,8 @@ extern int making_const_table;\n #define ASM_OUTPUT_DEF_FROM_DECLS(FILE, DECL1, DECL2)\t\t\\\n   do\t\t\t\t\t\t   \t\t\\\n     {\t\t\t\t\t\t\t\t\\\n-      char * LABEL1 = XSTR (XEXP (DECL_RTL (decl), 0), 0);\t\\\n-      char * LABEL2 = IDENTIFIER_POINTER (DECL2);\t\t\\\n+      const char *const LABEL1 = XSTR (XEXP (DECL_RTL (decl), 0), 0); \\\n+      const char *const LABEL2 = IDENTIFIER_POINTER (DECL2);\t\\\n \t\t\t\t\t\t\t\t\\\n       if (TARGET_THUMB && TREE_CODE (DECL1) == FUNCTION_DECL)\t\\\n \t{\t\t\t\t\t\t\t\\"}, {"sha": "7a89ad5027fabe4bd5f3514525d08e559203ea77", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91ea4f8ddfb30a1274e951d43ac4d79eb5c63e9e/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91ea4f8ddfb30a1274e951d43ac4d79eb5c63e9e/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=91ea4f8ddfb30a1274e951d43ac4d79eb5c63e9e", "patch": "@@ -2587,8 +2587,8 @@ sprintf (STRING, \"*.%s%d\", PREFIX, NUM)\n    If this macro is not defined, nothing special is output at the end\n    of the jump-table.  */\n \n-#define ASM_OUTPUT_SKIP(STREAM, n)\t\t\\\n-fprintf (STREAM, \"\\t.skip %d,0\\n\", n)\n+#define ASM_OUTPUT_SKIP(STREAM, N)\t\t\\\n+fprintf (STREAM, \"\\t.skip %d,0\\n\", N)\n /* A C statement to output to the stdio stream STREAM an assembler\n    instruction to advance the location counter by NBYTES bytes.\n    Those bytes should be zero when loaded.  NBYTES will be a C"}, {"sha": "553ab91768f99669cab81dfd50757a4a026f2ff2", "filename": "gcc/function.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91ea4f8ddfb30a1274e951d43ac4d79eb5c63e9e/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91ea4f8ddfb30a1274e951d43ac4d79eb5c63e9e/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=91ea4f8ddfb30a1274e951d43ac4d79eb5c63e9e", "patch": "@@ -7189,7 +7189,9 @@ thread_prologue_and_epilogue_insns (f)\n {\n   int inserted = 0;\n   edge e;\n+#if defined (HAVE_sibcall_epilogue) || defined (HAVE_epilogue) || defined (HAVE_return) || defined (HAVE_prologue)\n   rtx seq;\n+#endif\n #ifdef HAVE_prologue\n   rtx prologue_end = NULL_RTX;\n #endif"}, {"sha": "4aa90304bd6be7aabb4789f1ef803b9cd7e2916b", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91ea4f8ddfb30a1274e951d43ac4d79eb5c63e9e/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91ea4f8ddfb30a1274e951d43ac4d79eb5c63e9e/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=91ea4f8ddfb30a1274e951d43ac4d79eb5c63e9e", "patch": "@@ -25,6 +25,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"toplev.h\"\n #include \"rtl.h\"\n #include \"hard-reg-set.h\"\n+#include \"tm_p.h\"\n \n /* Forward declarations */\n static void set_of_1\t\tPARAMS ((rtx, rtx, void *));"}, {"sha": "24c96cf213f1c135f256ca0c37faa73bc865453b", "filename": "gcc/varasm.c", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91ea4f8ddfb30a1274e951d43ac4d79eb5c63e9e/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91ea4f8ddfb30a1274e951d43ac4d79eb5c63e9e/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=91ea4f8ddfb30a1274e951d43ac4d79eb5c63e9e", "patch": "@@ -524,7 +524,7 @@ asm_output_bss (file, decl, name, size, rounded)\n static void\n asm_output_aligned_bss (file, decl, name, size, align)\n      FILE *file;\n-     tree decl;\n+     tree decl ATTRIBUTE_UNUSED;\n      const char *name;\n      int size, align;\n {\n@@ -1029,7 +1029,9 @@ assemble_constant_align (exp)\n #endif\n \n   if (align > BITS_PER_UNIT)\n-    ASM_OUTPUT_ALIGN (asm_out_file, floor_log2 (align / BITS_PER_UNIT));\n+    {\n+      ASM_OUTPUT_ALIGN (asm_out_file, floor_log2 (align / BITS_PER_UNIT));\n+    }\n }\n \n /* Output a string of literal assembler code\n@@ -1208,7 +1210,9 @@ assemble_start_function (decl, fnname)\n   /* Tell assembler to move to target machine's alignment for functions.  */\n   align = floor_log2 (FUNCTION_BOUNDARY / BITS_PER_UNIT);\n   if (align > 0)\n-    ASM_OUTPUT_ALIGN (asm_out_file, align);\n+    {\n+      ASM_OUTPUT_ALIGN (asm_out_file, align);\n+    }\n \n   /* Handle a user-specified function alignment.\n      Note that we still need to align to FUNCTION_BOUNDARY, as above,\n@@ -1324,7 +1328,9 @@ assemble_align (align)\n      int align;\n {\n   if (align > BITS_PER_UNIT)\n-    ASM_OUTPUT_ALIGN (asm_out_file, floor_log2 (align / BITS_PER_UNIT));\n+    {\n+      ASM_OUTPUT_ALIGN (asm_out_file, floor_log2 (align / BITS_PER_UNIT));\n+    }\n }\n \n /* Assemble a string constant with the specified C string as contents.  */\n@@ -1682,8 +1688,10 @@ assemble_variable (decl, top_level, at_end, dont_output_data)\n \n   /* Output the alignment of this data.  */\n   if (align > BITS_PER_UNIT)\n-    ASM_OUTPUT_ALIGN (asm_out_file,\n-\t\t      floor_log2 (DECL_ALIGN (decl) / BITS_PER_UNIT));\n+    {\n+      ASM_OUTPUT_ALIGN (asm_out_file,\n+\t\t\tfloor_log2 (DECL_ALIGN (decl) / BITS_PER_UNIT));\n+    }\n \n   /* Do any machine/system dependent processing of the object.  */\n #ifdef ASM_DECLARE_OBJECT_NAME\n@@ -1905,7 +1913,9 @@ assemble_trampoline_template ()\n   /* Write the assembler code to define one.  */\n   align = floor_log2 (TRAMPOLINE_ALIGNMENT / BITS_PER_UNIT);\n   if (align > 0)\n-    ASM_OUTPUT_ALIGN (asm_out_file, align);\n+    {\n+      ASM_OUTPUT_ALIGN (asm_out_file, align);\n+    }\n \n   ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \"LTRAMP\", 0);\n   TRAMPOLINE_TEMPLATE (asm_out_file);\n@@ -3462,7 +3472,9 @@ output_constant_def_contents (exp, reloc, labelno)\n     }\n \n   if (align > BITS_PER_UNIT)\n-    ASM_OUTPUT_ALIGN (asm_out_file, floor_log2 (align / BITS_PER_UNIT));\n+    {\n+      ASM_OUTPUT_ALIGN (asm_out_file, floor_log2 (align / BITS_PER_UNIT));\n+    }\n \n   /* Output the label itself.  */\n   ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \"LC\", labelno);"}]}