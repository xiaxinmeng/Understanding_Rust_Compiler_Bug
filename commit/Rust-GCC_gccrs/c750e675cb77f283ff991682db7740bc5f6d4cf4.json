{"sha": "c750e675cb77f283ff991682db7740bc5f6d4cf4", "node_id": "C_kwDOANBUbNoAKGM3NTBlNjc1Y2I3N2YyODNmZjk5MTY4MmRiNzc0MGJjNWY2ZDRjZjQ", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2022-09-20T23:05:03Z"}, "committer": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2022-09-22T18:48:29Z"}, "message": "Convert CFN_BUILT_IN_STRLEN to range-ops.\n\n\t* gimple-range-fold.cc (range_of_builtin_int_call): Remove case\n\tfor CFN_BUILT_IN_STRLEN.\n\t* gimple-range-op.cc (class cfn_strlen): New.\n\t(gimple_range_op_handler::maybe_builtin_call): Set arguments.", "tree": {"sha": "25d10307ecd5d59e20e94168a5ca8b2bb601d71b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25d10307ecd5d59e20e94168a5ca8b2bb601d71b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c750e675cb77f283ff991682db7740bc5f6d4cf4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c750e675cb77f283ff991682db7740bc5f6d4cf4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c750e675cb77f283ff991682db7740bc5f6d4cf4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c750e675cb77f283ff991682db7740bc5f6d4cf4/comments", "author": null, "committer": null, "parents": [{"sha": "b6f670ff706e35dc51a62db4206cb241dcac4963", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6f670ff706e35dc51a62db4206cb241dcac4963", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6f670ff706e35dc51a62db4206cb241dcac4963"}], "stats": {"total": 58, "additions": 37, "deletions": 21}, "files": [{"sha": "d22fb0e93522a37a0aac17df42d3ff680e453908", "filename": "gcc/gimple-range-fold.cc", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c750e675cb77f283ff991682db7740bc5f6d4cf4/gcc%2Fgimple-range-fold.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c750e675cb77f283ff991682db7740bc5f6d4cf4/gcc%2Fgimple-range-fold.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-fold.cc?ref=c750e675cb77f283ff991682db7740bc5f6d4cf4", "patch": "@@ -908,27 +908,6 @@ fold_using_range::range_of_builtin_int_call (irange &r, gcall *call,\n \treturn true;\n       }\n \n-    case CFN_BUILT_IN_STRLEN:\n-      if (tree lhs = gimple_call_lhs (call))\n-\tif (ptrdiff_type_node\n-\t    && (TYPE_PRECISION (ptrdiff_type_node)\n-\t\t== TYPE_PRECISION (TREE_TYPE (lhs))))\n-\t  {\n-\t    tree type = TREE_TYPE (lhs);\n-\t    tree max = vrp_val_max (ptrdiff_type_node);\n-\t    wide_int wmax\n-\t      = wi::to_wide (max, TYPE_PRECISION (TREE_TYPE (max)));\n-\t    tree range_min = build_zero_cst (type);\n-\t    // To account for the terminating NULL, the maximum length\n-\t    // is one less than the maximum array size, which in turn\n-\t    // is one less than PTRDIFF_MAX (or SIZE_MAX where it's\n-\t    // smaller than the former type).\n-\t    // FIXME: Use max_object_size() - 1 here.\n-\t    tree range_max = wide_int_to_tree (type, wmax - 2);\n-\t    r.set (range_min, range_max);\n-\t    return true;\n-\t  }\n-      break;\n     default:\n       break;\n     }"}, {"sha": "f9161b5820fdd1613aa785054b2f94a16a416a49", "filename": "gcc/gimple-range-op.cc", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c750e675cb77f283ff991682db7740bc5f6d4cf4/gcc%2Fgimple-range-op.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c750e675cb77f283ff991682db7740bc5f6d4cf4/gcc%2Fgimple-range-op.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-op.cc?ref=c750e675cb77f283ff991682db7740bc5f6d4cf4", "patch": "@@ -611,6 +611,30 @@ cfn_ubsan op_cfn_ubsan_add (PLUS_EXPR);\n cfn_ubsan op_cfn_ubsan_sub (MINUS_EXPR);\n cfn_ubsan op_cfn_ubsan_mul (MULT_EXPR);\n \n+\n+// Implement range operator for CFN_BUILT_IN_STRLEN\n+class cfn_strlen : public range_operator\n+{\n+public:\n+  using range_operator::fold_range;\n+  virtual bool fold_range (irange &r, tree type, const irange &,\n+\t\t\t   const irange &, relation_kind) const\n+  {\n+    tree max = vrp_val_max (ptrdiff_type_node);\n+    wide_int wmax\n+      = wi::to_wide (max, TYPE_PRECISION (TREE_TYPE (max)));\n+    tree range_min = build_zero_cst (type);\n+    // To account for the terminating NULL, the maximum length\n+    // is one less than the maximum array size, which in turn\n+    // is one less than PTRDIFF_MAX (or SIZE_MAX where it's\n+    // smaller than the former type).\n+    // FIXME: Use max_object_size() - 1 here.\n+    tree range_max = wide_int_to_tree (type, wmax - 2);\n+    r.set (range_min, range_max);\n+    return true;\n+  }\n+} op_cfn_strlen;\n+\n // Set up a gimple_range_op_handler for any built in function which can be\n // supported via range-ops.\n \n@@ -711,6 +735,19 @@ gimple_range_op_handler::maybe_builtin_call ()\n       m_int = &op_cfn_ubsan_mul;\n       break;\n \n+    case CFN_BUILT_IN_STRLEN:\n+      {\n+\ttree lhs = gimple_call_lhs (call);\n+\tif (lhs && ptrdiff_type_node && (TYPE_PRECISION (ptrdiff_type_node)\n+\t\t\t\t\t == TYPE_PRECISION (TREE_TYPE (lhs))))\n+\t  {\n+\t    m_op1 = gimple_call_arg (call, 0);\n+\t    m_valid = true;\n+\t    m_int = &op_cfn_strlen;\n+\t  }\n+\tbreak;\n+      }\n+\n     default:\n       break;\n     }"}]}