{"sha": "4d6a988ac5c6d79f131575cc3ed431a4229bde0e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQ2YTk4OGFjNWM2ZDc5ZjEzMTU3NWNjM2VkNDMxYTQyMjliZGUwZQ==", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@redhat.com", "date": "2003-08-20T19:37:21Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@gcc.gnu.org", "date": "2003-08-20T19:37:21Z"}, "message": "jni.cc: Replace \"cheating\" pointer-casting code with extract_from_jvalue<> template.\n\n2003-08-20  Graydon Hoare  <graydon@redhat.com>\n\n\t* jni.cc: Replace \"cheating\" pointer-casting code with\n\textract_from_jvalue<> template.\n\nFrom-SVN: r70613", "tree": {"sha": "334a8c10542371fe374eecea1486866cffe5bc21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/334a8c10542371fe374eecea1486866cffe5bc21"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d6a988ac5c6d79f131575cc3ed431a4229bde0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d6a988ac5c6d79f131575cc3ed431a4229bde0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d6a988ac5c6d79f131575cc3ed431a4229bde0e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d6a988ac5c6d79f131575cc3ed431a4229bde0e/comments", "author": null, "committer": null, "parents": [{"sha": "13bef471ea25553d663543a3d9534a8f1ef10a1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13bef471ea25553d663543a3d9534a8f1ef10a1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13bef471ea25553d663543a3d9534a8f1ef10a1b"}], "stats": {"total": 25, "additions": 20, "deletions": 5}, "files": [{"sha": "2ce212138bcf2fc1ff3a2810186615a58688157d", "filename": "libjava/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d6a988ac5c6d79f131575cc3ed431a4229bde0e/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d6a988ac5c6d79f131575cc3ed431a4229bde0e/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=4d6a988ac5c6d79f131575cc3ed431a4229bde0e", "patch": "@@ -1,3 +1,8 @@\n+2003-08-20  Graydon Hoare  <graydon@redhat.com>\n+\n+\t* jni.cc: Replace \"cheating\" pointer-casting code with\n+\textract_from_jvalue<> template.\n+\n 2003-08-20  Andrew Haley  <aph@redhat.com>\n \n \t* gnu/gcj/runtime/StackTrace.java (getClass): New method."}, {"sha": "49779078639253edf6d2381df737e097cf852fab", "filename": "libjava/jni.cc", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d6a988ac5c6d79f131575cc3ed431a4229bde0e/libjava%2Fjni.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d6a988ac5c6d79f131575cc3ed431a4229bde0e/libjava%2Fjni.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni.cc?ref=4d6a988ac5c6d79f131575cc3ed431a4229bde0e", "patch": "@@ -418,6 +418,18 @@ _Jv_JNI_PopSystemFrame (JNIEnv *env)\n     }\n }\n \n+template<typename T> T extract_from_jvalue(jvalue const & t);\n+template<> jboolean extract_from_jvalue(jvalue const & jv) { return jv.z; }\n+template<> jbyte    extract_from_jvalue(jvalue const & jv) { return jv.b; }\n+template<> jchar    extract_from_jvalue(jvalue const & jv) { return jv.c; }\n+template<> jshort   extract_from_jvalue(jvalue const & jv) { return jv.s; }\n+template<> jint     extract_from_jvalue(jvalue const & jv) { return jv.i; }\n+template<> jlong    extract_from_jvalue(jvalue const & jv) { return jv.j; }\n+template<> jfloat   extract_from_jvalue(jvalue const & jv) { return jv.f; }\n+template<> jdouble  extract_from_jvalue(jvalue const & jv) { return jv.d; }\n+template<> jobject  extract_from_jvalue(jvalue const & jv) { return jv.l; }\n+\n+\n // This function is used from other template functions.  It wraps the\n // return value appropriately; we specialize it so that object returns\n // are turned into local references.\n@@ -430,7 +442,7 @@ wrap_value (JNIEnv *, T value)\n \n // This specialization is used for jobject, jclass, jstring, jarray,\n // etc.\n-template<typename T>\n+template<typename R, typename T>\n static T *\n wrap_value (JNIEnv *env, T *value)\n {\n@@ -781,8 +793,7 @@ static T\n \t\t\t  style == constructor,\n \t\t\t  arg_types, args, &result);\n \n-      // We cheat a little here.  FIXME.\n-      return wrap_value (env, * (T *) &result);\n+      return wrap_value (env, extract_from_jvalue<T>(result));\n     }\n   catch (jthrowable t)\n     {\n@@ -848,8 +859,7 @@ static T\n \t\t\t  style == constructor,\n \t\t\t  arg_types, arg_copy, &result);\n \n-      // We cheat a little here.  FIXME.\n-      return wrap_value (env, * (T *) &result);\n+      return wrap_value (env, extract_from_jvalue<T>(result));\n     }\n   catch (jthrowable t)\n     {"}]}