{"sha": "73a712e9c6620f8b7aede3eb1c2984fb91646201", "node_id": "C_kwDOANBUbNoAKDczYTcxMmU5YzY2MjBmOGI3YWVkZTNlYjFjMjk4NGZiOTE2NDYyMDE", "commit": {"author": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2022-11-28T16:47:54Z"}, "committer": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2023-01-25T13:36:27Z"}, "message": "arm: improve tests for vqrdmulhq*\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vqrdmulhq_m_n_s16.c: Use\n\tcheck-function-bodies instead of scan-assembler checks.  Use\n\textern \"C\" for C++ testing.\n\t* gcc.target/arm/mve/intrinsics/vqrdmulhq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmulhq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmulhq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmulhq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmulhq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmulhq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmulhq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmulhq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmulhq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmulhq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrdmulhq_s8.c: Likewise.", "tree": {"sha": "eae02373c5e6c6d0701f11dabbfb3d216cd3f8dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eae02373c5e6c6d0701f11dabbfb3d216cd3f8dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73a712e9c6620f8b7aede3eb1c2984fb91646201", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73a712e9c6620f8b7aede3eb1c2984fb91646201", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73a712e9c6620f8b7aede3eb1c2984fb91646201", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73a712e9c6620f8b7aede3eb1c2984fb91646201/comments", "author": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef0bec9036cef36b26006d9a3d22b879d705e75c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef0bec9036cef36b26006d9a3d22b879d705e75c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef0bec9036cef36b26006d9a3d22b879d705e75c"}], "stats": {"total": 348, "additions": 312, "deletions": 36}, "files": [{"sha": "fc3a33073aa2bbfcf65f56771ba0ad6546c95d9d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrdmulhq_m_n_s16.c", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73a712e9c6620f8b7aede3eb1c2984fb91646201/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmulhq_m_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73a712e9c6620f8b7aede3eb1c2984fb91646201/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmulhq_m_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmulhq_m_n_s16.c?ref=73a712e9c6620f8b7aede3eb1c2984fb91646201", "patch": "@@ -1,23 +1,49 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvqrdmulht.s16\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo (int16x8_t inactive, int16x8_t a, int16_t b, mve_pred16_t p)\n {\n   return vqrdmulhq_m_n_s16 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vqrdmulht.s16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvqrdmulht.s16\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo1 (int16x8_t inactive, int16x8_t a, int16_t b, mve_pred16_t p)\n {\n   return vqrdmulhq_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vqrdmulht.s16\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "897ad5bd28c2c6203757f993b036b5764f359315", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrdmulhq_m_n_s32.c", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73a712e9c6620f8b7aede3eb1c2984fb91646201/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmulhq_m_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73a712e9c6620f8b7aede3eb1c2984fb91646201/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmulhq_m_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmulhq_m_n_s32.c?ref=73a712e9c6620f8b7aede3eb1c2984fb91646201", "patch": "@@ -1,23 +1,49 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvqrdmulht.s32\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo (int32x4_t inactive, int32x4_t a, int32_t b, mve_pred16_t p)\n {\n   return vqrdmulhq_m_n_s32 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vqrdmulht.s32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvqrdmulht.s32\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo1 (int32x4_t inactive, int32x4_t a, int32_t b, mve_pred16_t p)\n {\n   return vqrdmulhq_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vqrdmulht.s32\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "05ab0609af4fb3cc6394d366e1d846a32da51013", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrdmulhq_m_n_s8.c", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73a712e9c6620f8b7aede3eb1c2984fb91646201/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmulhq_m_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73a712e9c6620f8b7aede3eb1c2984fb91646201/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmulhq_m_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmulhq_m_n_s8.c?ref=73a712e9c6620f8b7aede3eb1c2984fb91646201", "patch": "@@ -1,23 +1,49 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvqrdmulht.s8\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo (int8x16_t inactive, int8x16_t a, int8_t b, mve_pred16_t p)\n {\n   return vqrdmulhq_m_n_s8 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vqrdmulht.s8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvqrdmulht.s8\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo1 (int8x16_t inactive, int8x16_t a, int8_t b, mve_pred16_t p)\n {\n   return vqrdmulhq_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vqrdmulht.s8\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "1d9dc07787c94d8f3b42d7d268ea7bf4023efba5", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrdmulhq_m_s16.c", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73a712e9c6620f8b7aede3eb1c2984fb91646201/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmulhq_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73a712e9c6620f8b7aede3eb1c2984fb91646201/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmulhq_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmulhq_m_s16.c?ref=73a712e9c6620f8b7aede3eb1c2984fb91646201", "patch": "@@ -1,23 +1,49 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvqrdmulht.s16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n {\n   return vqrdmulhq_m_s16 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vqrdmulht.s16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvqrdmulht.s16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo1 (int16x8_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n {\n   return vqrdmulhq_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vqrdmulht.s16\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "76d7507e35a3831db47ac82dcf0e8038fe2fab4b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrdmulhq_m_s32.c", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73a712e9c6620f8b7aede3eb1c2984fb91646201/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmulhq_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73a712e9c6620f8b7aede3eb1c2984fb91646201/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmulhq_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmulhq_m_s32.c?ref=73a712e9c6620f8b7aede3eb1c2984fb91646201", "patch": "@@ -1,23 +1,49 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvqrdmulht.s32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n {\n   return vqrdmulhq_m_s32 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vqrdmulht.s32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvqrdmulht.s32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo1 (int32x4_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n {\n   return vqrdmulhq_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vqrdmulht.s32\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "7fd2119ea631aa976b55a9183edf86c062b54b21", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrdmulhq_m_s8.c", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73a712e9c6620f8b7aede3eb1c2984fb91646201/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmulhq_m_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73a712e9c6620f8b7aede3eb1c2984fb91646201/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmulhq_m_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmulhq_m_s8.c?ref=73a712e9c6620f8b7aede3eb1c2984fb91646201", "patch": "@@ -1,23 +1,49 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvqrdmulht.s8\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n {\n   return vqrdmulhq_m_s8 (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vqrdmulht.s8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvqrdmulht.s8\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo1 (int8x16_t inactive, int8x16_t a, int8x16_t b, mve_pred16_t p)\n {\n   return vqrdmulhq_m (inactive, a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vqrdmulht.s8\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "8a90a3998589e152eb24b8e2aa9abc3ac12cf9c5", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrdmulhq_n_s16.c", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73a712e9c6620f8b7aede3eb1c2984fb91646201/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmulhq_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73a712e9c6620f8b7aede3eb1c2984fb91646201/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmulhq_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmulhq_n_s16.c?ref=73a712e9c6620f8b7aede3eb1c2984fb91646201", "patch": "@@ -1,21 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvqrdmulh.s16\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo (int16x8_t a, int16_t b)\n {\n   return vqrdmulhq_n_s16 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vqrdmulh.s16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvqrdmulh.s16\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo1 (int16x8_t a, int16_t b)\n {\n   return vqrdmulhq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vqrdmulh.s16\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "973464b3297496845906d075da39d2a7fdaf121b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrdmulhq_n_s32.c", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73a712e9c6620f8b7aede3eb1c2984fb91646201/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmulhq_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73a712e9c6620f8b7aede3eb1c2984fb91646201/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmulhq_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmulhq_n_s32.c?ref=73a712e9c6620f8b7aede3eb1c2984fb91646201", "patch": "@@ -1,21 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvqrdmulh.s32\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo (int32x4_t a, int32_t b)\n {\n   return vqrdmulhq_n_s32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vqrdmulh.s32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvqrdmulh.s32\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo1 (int32x4_t a, int32_t b)\n {\n   return vqrdmulhq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vqrdmulh.s32\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "65aab964f4e12429b726e8708e151adff2fc9063", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrdmulhq_n_s8.c", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73a712e9c6620f8b7aede3eb1c2984fb91646201/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmulhq_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73a712e9c6620f8b7aede3eb1c2984fb91646201/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmulhq_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmulhq_n_s8.c?ref=73a712e9c6620f8b7aede3eb1c2984fb91646201", "patch": "@@ -1,21 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvqrdmulh.s8\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo (int8x16_t a, int8_t b)\n {\n   return vqrdmulhq_n_s8 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vqrdmulh.s8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvqrdmulh.s8\tq[0-9]+, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo1 (int8x16_t a, int8_t b)\n {\n   return vqrdmulhq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vqrdmulh.s8\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "f3153c86b4cf0110bdf2785a129b78bde3cc2076", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrdmulhq_s16.c", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73a712e9c6620f8b7aede3eb1c2984fb91646201/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmulhq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73a712e9c6620f8b7aede3eb1c2984fb91646201/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmulhq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmulhq_s16.c?ref=73a712e9c6620f8b7aede3eb1c2984fb91646201", "patch": "@@ -1,21 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvqrdmulh.s16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo (int16x8_t a, int16x8_t b)\n {\n   return vqrdmulhq_s16 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vqrdmulh.s16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvqrdmulh.s16\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo1 (int16x8_t a, int16x8_t b)\n {\n   return vqrdmulhq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vqrdmulh.s16\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "48b10dbd0255075d942fe79705a0075d096ea278", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrdmulhq_s32.c", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73a712e9c6620f8b7aede3eb1c2984fb91646201/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmulhq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73a712e9c6620f8b7aede3eb1c2984fb91646201/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmulhq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmulhq_s32.c?ref=73a712e9c6620f8b7aede3eb1c2984fb91646201", "patch": "@@ -1,21 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvqrdmulh.s32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo (int32x4_t a, int32x4_t b)\n {\n   return vqrdmulhq_s32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vqrdmulh.s32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvqrdmulh.s32\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo1 (int32x4_t a, int32x4_t b)\n {\n   return vqrdmulhq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vqrdmulh.s32\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "9f0346fc841881c01ce35f9f5fdaf0e345b4bad3", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrdmulhq_s8.c", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73a712e9c6620f8b7aede3eb1c2984fb91646201/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmulhq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73a712e9c6620f8b7aede3eb1c2984fb91646201/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmulhq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrdmulhq_s8.c?ref=73a712e9c6620f8b7aede3eb1c2984fb91646201", "patch": "@@ -1,21 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvqrdmulh.s8\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo (int8x16_t a, int8x16_t b)\n {\n   return vqrdmulhq_s8 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vqrdmulh.s8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvqrdmulh.s8\tq[0-9]+, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo1 (int8x16_t a, int8x16_t b)\n {\n   return vqrdmulhq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vqrdmulh.s8\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}]}