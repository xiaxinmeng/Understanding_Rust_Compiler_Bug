{"sha": "ca37373a97985aed8cdba95af4c4e27484c19444", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2EzNzM3M2E5Nzk4NWFlZDhjZGJhOTVhZjRjNGUyNzQ4NGMxOTQ0NA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2009-11-25T21:28:00Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2009-11-25T21:28:00Z"}, "message": "decl.c (gnat_to_gnu_entity): Translate regular boolean types into BOOLEAN_TYPEs.\n\n\t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Enumeration_Type>:\n\tTranslate regular boolean types into BOOLEAN_TYPEs.\n\nFrom-SVN: r154658", "tree": {"sha": "e336476fa49714cee3ff0c7325c05d48edb95b3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e336476fa49714cee3ff0c7325c05d48edb95b3b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca37373a97985aed8cdba95af4c4e27484c19444", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca37373a97985aed8cdba95af4c4e27484c19444", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca37373a97985aed8cdba95af4c4e27484c19444", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca37373a97985aed8cdba95af4c4e27484c19444/comments", "author": null, "committer": null, "parents": [{"sha": "281e33e1bb62f77b7f999213da93db0088d08e1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/281e33e1bb62f77b7f999213da93db0088d08e1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/281e33e1bb62f77b7f999213da93db0088d08e1d"}], "stats": {"total": 40, "additions": 24, "deletions": 16}, "files": [{"sha": "2098cfd326b919af83bb09432be5d0c216099d1d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca37373a97985aed8cdba95af4c4e27484c19444/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca37373a97985aed8cdba95af4c4e27484c19444/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ca37373a97985aed8cdba95af4c4e27484c19444", "patch": "@@ -1,3 +1,8 @@\n+2009-11-25  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Enumeration_Type>:\n+\tTranslate regular boolean types into BOOLEAN_TYPEs.\n+\n 2009-11-24  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* sem_util.adb (Set_Debug_Info_Needed): For an E_Class_Wide_Subtype,\n@@ -8,16 +13,17 @@\n \t(build_vms_descriptor32): Adjust call to finish_record_type.\n \t(build_vms_descriptor): Likewise.\n \t(build_unc_object_type): Likewise.\n-\t* decl.c (gnat_to_gnu_entity): Adjust calls to finish_record_type and\n-\tcomponents_to_record.\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity): Adjust calls to\n+\tfinish_record_type and components_to_record.\n \t(make_packable_type): Adjust call to finish_record_type.\n \t(maybe_pad_type): Likewise.  Tweak condition.\n \t(components_to_record): Likewise.  Replace DO_NOT_FINALIZE parameter\n \twith MAYBE_UNUSED.  Adjust recursive call.\n \t(create_variant_part_from): Adjust call to finish_record_type.  Do not\n \tcall rest_of_record_type_compilation on the new record types.\n-\t* trans.c (gigi): Adjust call to finish_record_type.\n-\t* gigi.h (finish_record_type): Adjust prototype and comment.\n+\t* gcc-interface/trans.c (gigi): Adjust call to finish_record_type.\n+\t* gcc-interface/gigi.h (finish_record_type): Adjust prototype and\n+\tcomment.\n \t(rest_of_record_type_compilation): Adjust comment.\n \n 2009-11-24  Eric Botcazou  <ebotcazou@adacore.com>"}, {"sha": "0effe88cd9fa167b8851405b3f4ed901b8442269", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca37373a97985aed8cdba95af4c4e27484c19444/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca37373a97985aed8cdba95af4c4e27484c19444/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=ca37373a97985aed8cdba95af4c4e27484c19444", "patch": "@@ -1416,30 +1416,31 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t  break;\n \t}\n \n-      /* Normal case of non-character type or non-Standard character type.  */\n       {\n-\t/* Here we have a list of enumeral constants in First_Literal.\n-\t   We make a CONST_DECL for each and build into GNU_LITERAL_LIST\n-\t   the list to be placed into TYPE_FIELDS.  Each node in the list\n-\t   is a TREE_LIST whose TREE_VALUE is the literal name and whose\n-\t   TREE_PURPOSE is the value of the literal.  */\n-\n-\tEntity_Id gnat_literal;\n+\t/* We have a list of enumeral constants in First_Literal.  We make a\n+\t   CONST_DECL for each one and build into GNU_LITERAL_LIST the list to\n+\t   be placed into TYPE_FIELDS.  Each node in the list is a TREE_LIST\n+\t   whose TREE_VALUE is the literal name and whose TREE_PURPOSE is the\n+\t   value of the literal.  But when we have a regular boolean type, we\n+\t   simplify this a little by using a BOOLEAN_TYPE.  */\n+\tbool is_boolean = Is_Boolean_Type (gnat_entity)\n+\t\t\t  && !Has_Non_Standard_Rep (gnat_entity);\n \ttree gnu_literal_list = NULL_TREE;\n+\tEntity_Id gnat_literal;\n \n \tif (Is_Unsigned_Type (gnat_entity))\n \t  gnu_type = make_unsigned_type (esize);\n \telse\n \t  gnu_type = make_signed_type (esize);\n \n-\tTREE_SET_CODE (gnu_type, ENUMERAL_TYPE);\n+\tTREE_SET_CODE (gnu_type, is_boolean ? BOOLEAN_TYPE : ENUMERAL_TYPE);\n \n \tfor (gnat_literal = First_Literal (gnat_entity);\n \t     Present (gnat_literal);\n \t     gnat_literal = Next_Literal (gnat_literal))\n \t  {\n-\t    tree gnu_value = UI_To_gnu (Enumeration_Rep (gnat_literal),\n-\t\t\t\t\tgnu_type);\n+\t    tree gnu_value\n+\t      = UI_To_gnu (Enumeration_Rep (gnat_literal), gnu_type);\n \t    tree gnu_literal\n \t      = create_var_decl (get_entity_name (gnat_literal), NULL_TREE,\n \t\t\t\t gnu_type, gnu_value, true, false, false,\n@@ -1450,7 +1451,8 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t\t\t\t\t  gnu_value, gnu_literal_list);\n \t  }\n \n-\tTYPE_VALUES (gnu_type) = nreverse (gnu_literal_list);\n+\tif (!is_boolean)\n+\t  TYPE_VALUES (gnu_type) = nreverse (gnu_literal_list);\n \n \t/* Note that the bounds are updated at the end of this function\n \t   to avoid an infinite recursion since they refer to the type.  */"}]}