{"sha": "5fd80fbc3ba36fba8c0ec6c0f8509ff44e0a9fdd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWZkODBmYmMzYmEzNmZiYThjMGVjNmMwZjg1MDlmZjQ0ZTBhOWZkZA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2003-12-15T11:57:30Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2003-12-15T11:57:30Z"}, "message": "re PR c++/13241 ([ABI] Incorrect mangling of template arguments)\n\ncp:\n\tPR c++/13241\n\tC++ ABI change. Mangling of symbols in expressions.\n\t* mangle.c (write_mangled_name): Add top_level flag. Rework for\n\tnested and unnested mangling. Deal with abi version 1 and version\n\t2 differences.\n\t(write_expression): Adjust write_mangled_name call.\n\t(mangle_decl_string): Use write_mangled_name for all non-type decls.\ntestsuite:\n\tPR c++/13241\n\t* g++.dg/abi/mangle18-1.C: New test.\n\t* g++.dg/abi/mangle18-2.C: New test.\n\nFrom-SVN: r74628", "tree": {"sha": "1052eda794a2870ee8942d5cf1a622bd1affe197", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1052eda794a2870ee8942d5cf1a622bd1affe197"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5fd80fbc3ba36fba8c0ec6c0f8509ff44e0a9fdd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fd80fbc3ba36fba8c0ec6c0f8509ff44e0a9fdd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fd80fbc3ba36fba8c0ec6c0f8509ff44e0a9fdd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fd80fbc3ba36fba8c0ec6c0f8509ff44e0a9fdd/comments", "author": null, "committer": null, "parents": [{"sha": "209db2bf05a5830792bc1a2f06c8fedf21285304", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/209db2bf05a5830792bc1a2f06c8fedf21285304", "html_url": "https://github.com/Rust-GCC/gccrs/commit/209db2bf05a5830792bc1a2f06c8fedf21285304"}], "stats": {"total": 153, "additions": 117, "deletions": 36}, "files": [{"sha": "5d70a54f5a6aa58d0bca508fea0107d262cd0ba0", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fd80fbc3ba36fba8c0ec6c0f8509ff44e0a9fdd/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fd80fbc3ba36fba8c0ec6c0f8509ff44e0a9fdd/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5fd80fbc3ba36fba8c0ec6c0f8509ff44e0a9fdd", "patch": "@@ -1,3 +1,13 @@\n+2003-12-15  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+ \tPR c++/13241\n+\tC++ ABI change. Mangling of symbols in expressions.\n+\t* mangle.c (write_mangled_name): Add top_level flag. Rework for\n+\tnested and unnested mangling. Deal with abi version 1 and version\n+\t2 differences.\n+\t(write_expression): Adjust write_mangled_name call.\n+\t(mangle_decl_string): Use write_mangled_name for all non-type decls.\n+\n 2003-12-14  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/10779"}, {"sha": "a20757e0c7eda3db576f1e56ad73cb9084d6464c", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 55, "deletions": 36, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fd80fbc3ba36fba8c0ec6c0f8509ff44e0a9fdd/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fd80fbc3ba36fba8c0ec6c0f8509ff44e0a9fdd/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=5fd80fbc3ba36fba8c0ec6c0f8509ff44e0a9fdd", "patch": "@@ -158,7 +158,7 @@ static void mangle_call_offset (const tree, const tree);\n \n /* Functions for emitting mangled representations of things.  */\n \n-static void write_mangled_name (const tree);\n+static void write_mangled_name (const tree, bool);\n static void write_encoding (const tree);\n static void write_name (tree, const int);\n static void write_unscoped_name (const tree);\n@@ -602,27 +602,66 @@ find_substitution (tree node)\n }\n \n \n-/*  <mangled-name>      ::= _Z <encoding>  */\n+/* TOP_LEVEL is true, if this is being called at outermost level of\n+  mangling. It should be false when mangling a decl appearing in an\n+  expression within some other mangling.\n+  \n+  <mangled-name>      ::= _Z <encoding>  */\n \n static inline void\n-write_mangled_name (const tree decl)\n+write_mangled_name (const tree decl, bool top_level)\n {\n   MANGLE_TRACE_TREE (\"mangled-name\", decl);\n \n-  if (DECL_LANG_SPECIFIC (decl)\n-      && DECL_EXTERN_C_FUNCTION_P (decl)\n-      && ! DECL_OVERLOADED_OPERATOR_P (decl))\n-    /* The standard notes:\n-         \"The <encoding> of an extern \"C\" function is treated like\n-\t global-scope data, i.e. as its <source-name> without a type.\"\n-       We cannot write overloaded operators that way though,\n-       because it contains characters invalid in assembler.  */\n-    write_source_name (DECL_NAME (decl));\n+  if (/* The names of `extern \"C\"' functions are not mangled.  */\n+      DECL_EXTERN_C_FUNCTION_P (decl)\n+      /* But overloaded operator names *are* mangled.  */\n+      && !DECL_OVERLOADED_OPERATOR_P (decl))\n+    {\n+    unmangled_name:;\n+      \n+      if (top_level)\n+\twrite_string (IDENTIFIER_POINTER (DECL_NAME (decl)));\n+      else\n+\t{\n+\t  /* The standard notes: \"The <encoding> of an extern \"C\"\n+             function is treated like global-scope data, i.e. as its\n+             <source-name> without a type.\"  We cannot write\n+             overloaded operators that way though, because it contains\n+             characters invalid in assembler.  */\n+\t  if (abi_version_at_least (2))\n+\t    write_string (\"_Z\");\n+\t  else\n+\t    G.need_abi_warning = true;\n+\t  write_source_name (DECL_NAME (decl));\n+\t}\n+    }\n+  else if (TREE_CODE (decl) == VAR_DECL\n+\t   /* The names of global variables aren't mangled.  */\n+\t   && (CP_DECL_CONTEXT (decl) == global_namespace\n+\t       /* And neither are `extern \"C\"' variables.  */\n+\t       || DECL_EXTERN_C_P (decl)))\n+    {\n+      if (top_level || abi_version_at_least (2))\n+\tgoto unmangled_name;\n+      else\n+\t{\n+\t  G.need_abi_warning = true;\n+\t  goto mangled_name;\n+\t}\n+    }\n   else\n-    /* C++ name; needs to be mangled.  */\n     {\n+    mangled_name:;\n       write_string (\"_Z\");\n       write_encoding (decl);\n+      if (DECL_LANG_SPECIFIC (decl)\n+\t  && (DECL_MAYBE_IN_CHARGE_DESTRUCTOR_P (decl)\n+\t      || DECL_MAYBE_IN_CHARGE_CONSTRUCTOR_P (decl)))\n+\t/* We need a distinct mangled name for these entities, but\n+\t   we should never actually output it.  So, we append some\n+\t   characters the assembler won't like.  */\n+\twrite_string (\" *INTERNAL* \");\n     }\n }\n \n@@ -1895,7 +1934,7 @@ write_expression (tree expr)\n       if (code == CONST_DECL)\n \tG.need_abi_warning = 1;\n       write_char ('L');\n-      write_mangled_name (expr);\n+      write_mangled_name (expr, false);\n       write_char ('E');\n     }\n   else if (TREE_CODE (expr) == SIZEOF_EXPR \n@@ -2365,29 +2404,9 @@ mangle_decl_string (const tree decl)\n \n   if (TREE_CODE (decl) == TYPE_DECL)\n     write_type (TREE_TYPE (decl));\n-  else if (/* The names of `extern \"C\"' functions are not mangled.  */\n-\t   (DECL_EXTERN_C_FUNCTION_P (decl)\n-\t    /* But overloaded operator names *are* mangled.  */\n-\t    && !DECL_OVERLOADED_OPERATOR_P (decl))\n-\t   /* The names of global variables aren't mangled either.  */\n-\t   || (TREE_CODE (decl) == VAR_DECL\n-\t       && CP_DECL_CONTEXT (decl) == global_namespace)\n-\t   /* And neither are `extern \"C\"' variables.  */\n-\t   || (TREE_CODE (decl) == VAR_DECL\n-\t       && DECL_EXTERN_C_P (decl)))\n-    write_string (IDENTIFIER_POINTER (DECL_NAME (decl)));\n   else\n-    {\n-      write_mangled_name (decl);\n-      if (DECL_LANG_SPECIFIC (decl)\n-\t  && (DECL_MAYBE_IN_CHARGE_DESTRUCTOR_P (decl)\n-\t      || DECL_MAYBE_IN_CHARGE_CONSTRUCTOR_P (decl)))\n-\t/* We need a distinct mangled name for these entities, but\n-\t   we should never actually output it.  So, we append some\n-\t   characters the assembler won't like.  */\n-\twrite_string (\" *INTERNAL* \");\n-    }\n-\n+    write_mangled_name (decl, true);\n+  \n   result = finish_mangling (/*warn=*/true);\n   if (DEBUG_MANGLE)\n     fprintf (stderr, \"mangle_decl_string = '%s'\\n\\n\", result);"}, {"sha": "2d2d7cccf3a70179e39d7d7c0539c5bf7366507c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fd80fbc3ba36fba8c0ec6c0f8509ff44e0a9fdd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fd80fbc3ba36fba8c0ec6c0f8509ff44e0a9fdd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5fd80fbc3ba36fba8c0ec6c0f8509ff44e0a9fdd", "patch": "@@ -1,3 +1,9 @@\n+2003-12-15  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR c++/13241\n+\t* g++.dg/abi/mangle18-1.C: New test.\n+\t* g++.dg/abi/mangle18-2.C: New test.\n+\n 2003-12-15  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>\n \n \tPR optimization/10312"}, {"sha": "2e7b3a8382ed446f80078fd0174662e43da0410f", "filename": "gcc/testsuite/g++.dg/abi/mangle18-1.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fd80fbc3ba36fba8c0ec6c0f8509ff44e0a9fdd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle18-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fd80fbc3ba36fba8c0ec6c0f8509ff44e0a9fdd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle18-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle18-1.C?ref=5fd80fbc3ba36fba8c0ec6c0f8509ff44e0a9fdd", "patch": "@@ -0,0 +1,23 @@\n+// { dg-do compile }\n+// { dg-options \"-fabi-version=2\" }\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 30 Nov 2003 <nathan@codesourcery.com>\n+\n+// PR 13241\n+// mangled template arguments that are external objects incorrectly\n+\n+extern \"C\" void Foo ();\n+namespace NMS \n+{\n+  extern \"C\" int V;\n+}\n+\n+template <void (*)()> struct S {};\n+template <int *> struct T {};\n+\n+void f (S<Foo>){}\n+// { dg-final { scan-assembler \"\\n_Z1f1SIXadL_Z3FooEEE:\" } }\n+\n+void g (T<&NMS::V>){}\n+// { dg-final { scan-assembler \"\\n_Z1g1TIXadL_Z1VEEE:\" } }"}, {"sha": "be2b6b5e434d822ed7cc8e17a3ffba2d0737fe5e", "filename": "gcc/testsuite/g++.dg/abi/mangle18-2.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fd80fbc3ba36fba8c0ec6c0f8509ff44e0a9fdd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle18-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fd80fbc3ba36fba8c0ec6c0f8509ff44e0a9fdd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle18-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle18-2.C?ref=5fd80fbc3ba36fba8c0ec6c0f8509ff44e0a9fdd", "patch": "@@ -0,0 +1,23 @@\n+// { dg-do compile }\n+// { dg-options \"-fabi-version=1 -Wabi\" }\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 30 Nov 2003 <nathan@codesourcery.com>\n+\n+// PR 13241\n+// mangled template arguments that are external objects incorrectly\n+\n+extern \"C\" void Foo ();\n+namespace NMS \n+{\n+  extern \"C\" int V;\n+}\n+\n+template <void (*)()> struct S {};\n+template <int *> struct T {};\n+\n+void f (S<Foo>){} // { dg-warning \"mangled name\" }\n+// { dg-final { scan-assembler \"\\n_Z1f1SIXadL3FooEEE:\" } }\n+\n+void g (T<&NMS::V>){}  // { dg-warning \"mangled name\" }\n+// { dg-final { scan-assembler \"\\n_Z1g1TIXadL_ZN3NMS1VEEEE:\" } }"}]}