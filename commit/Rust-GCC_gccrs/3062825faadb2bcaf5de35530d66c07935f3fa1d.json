{"sha": "3062825faadb2bcaf5de35530d66c07935f3fa1d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzA2MjgyNWZhYWRiMmJjYWY1ZGUzNTUzMGQ2NmMwNzkzNWYzZmExZA==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2002-10-21T15:27:27Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2002-10-21T15:27:27Z"}, "message": "s390.c (s390_output_mi_vcall_thunk): New function.\n\n\t* config/s390/s390.c (s390_output_mi_vcall_thunk): New function.\n\t(TARGET_ASM_OUTPUT_MI_VCALL_THUNK): Define target hook.\n\t(s390_output_mi_thunk): Remove.\n\t(TARGET_ASM_OUTPUT_MI_THUNK): Remove.\n\nFrom-SVN: r58360", "tree": {"sha": "1f24d11a862c918b41a39b80b0127c25d26a4c55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f24d11a862c918b41a39b80b0127c25d26a4c55"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3062825faadb2bcaf5de35530d66c07935f3fa1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3062825faadb2bcaf5de35530d66c07935f3fa1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3062825faadb2bcaf5de35530d66c07935f3fa1d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3062825faadb2bcaf5de35530d66c07935f3fa1d/comments", "author": null, "committer": null, "parents": [{"sha": "2918c993e61b13aec77cdacfb82c411bc7ea697a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2918c993e61b13aec77cdacfb82c411bc7ea697a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2918c993e61b13aec77cdacfb82c411bc7ea697a"}], "stats": {"total": 271, "additions": 201, "deletions": 70}, "files": [{"sha": "61bf5aad99a5fd4f5140cefadf775c830adc32ef", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3062825faadb2bcaf5de35530d66c07935f3fa1d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3062825faadb2bcaf5de35530d66c07935f3fa1d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3062825faadb2bcaf5de35530d66c07935f3fa1d", "patch": "@@ -1,3 +1,10 @@\n+2002-10-21  Ulrich Weigand  <uweigand@de.ibm.com>\n+\n+\t* config/s390/s390.c (s390_output_mi_vcall_thunk): New function.\n+\t(TARGET_ASM_OUTPUT_MI_VCALL_THUNK): Define target hook.\n+\t(s390_output_mi_thunk): Remove.\n+\t(TARGET_ASM_OUTPUT_MI_THUNK): Remove.\n+\n 2002-10-21  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/h8300/h8300.h (N_REG_CLASSES): Parenthesize."}, {"sha": "f5009f20727c126ae8d1cd5cd88470c9b2518aa5", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 194, "deletions": 70, "changes": 264, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3062825faadb2bcaf5de35530d66c07935f3fa1d/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3062825faadb2bcaf5de35530d66c07935f3fa1d/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=3062825faadb2bcaf5de35530d66c07935f3fa1d", "patch": "@@ -54,7 +54,8 @@ static int s390_adjust_priority PARAMS ((rtx, int));\n static void s390_select_rtx_section PARAMS ((enum machine_mode, rtx, \n \t\t\t\t\t     unsigned HOST_WIDE_INT));\n static void s390_encode_section_info PARAMS ((tree, int));\n-static void s390_output_mi_thunk PARAMS ((FILE *, tree, HOST_WIDE_INT, tree));\n+static void s390_output_mi_vcall_thunk PARAMS ((FILE *, tree, HOST_WIDE_INT, \n+\t\t\t\t\t\tHOST_WIDE_INT, tree));\n \n #undef  TARGET_ASM_ALIGNED_HI_OP\n #define TARGET_ASM_ALIGNED_HI_OP \"\\t.word\\t\"\n@@ -81,8 +82,8 @@ static void s390_output_mi_thunk PARAMS ((FILE *, tree, HOST_WIDE_INT, tree));\n #undef\tTARGET_ENCODE_SECTION_INFO\n #define TARGET_ENCODE_SECTION_INFO s390_encode_section_info\n \n-#undef TARGET_ASM_OUTPUT_MI_THUNK\n-#define TARGET_ASM_OUTPUT_MI_THUNK s390_output_mi_thunk\n+#undef TARGET_ASM_OUTPUT_MI_VCALL_THUNK\n+#define TARGET_ASM_OUTPUT_MI_VCALL_THUNK s390_output_mi_vcall_thunk\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \n@@ -5587,77 +5588,200 @@ s390_encode_section_info (decl, first)\n     }\n }\n \n+/* Output thunk to FILE that implements a C++ virtual function call (with\n+   multiple inheritance) to FUNCTION.  The thunk adjusts the this pointer \n+   by DELTA, and unless VCALL_OFFSET is zero, applies an additional adjustment\n+   stored at VCALL_OFFSET in the vtable whose address is located at offset 0\n+   relative to the resulting this pointer.  */\n+\n static void\n-s390_output_mi_thunk (file, thunk, delta, function)\n+s390_output_mi_vcall_thunk (file, thunk, delta, vcall_offset, function)\n      FILE *file;\n      tree thunk ATTRIBUTE_UNUSED;\n      HOST_WIDE_INT delta;\n+     HOST_WIDE_INT vcall_offset;\n      tree function;\n {\n-  if (TARGET_64BIT)                                                           \n-    {                                                                         \n-      if (flag_pic)                                                           \n-        {                                                                     \n-          fprintf (file, \"\\tlarl  1,0f\\n\");                                   \n-          fprintf (file, \"\\tagf   %d,0(1)\\n\",                                 \n-                   aggregate_value_p (TREE_TYPE                               \n-                                      (TREE_TYPE (function))) ? 3 :2 );       \n-          fprintf (file, \"\\tlarl  1,\");                                       \n-          assemble_name (file, XSTR (XEXP (DECL_RTL (function), 0), 0));      \n-          fprintf (file, \"@GOTENT\\n\");                                        \n-          fprintf (file, \"\\tlg    1,0(1)\\n\");                                 \n-          fprintf (file, \"\\tbr    1\\n\");                                      \n-          fprintf (file, \"0:\\t.long  \");\t                              \n-          fprintf (file, HOST_WIDE_INT_PRINT_DEC, (delta));                   \n-          fprintf (file, \"\\n\");\t\t\t                              \n-        }                                                                     \n-      else                                                                    \n-        {                                                                     \n-          fprintf (file, \"\\tlarl  1,0f\\n\");                                   \n-          fprintf (file, \"\\tagf   %d,0(1)\\n\",                                 \n-          aggregate_value_p (TREE_TYPE                                        \n-                             (TREE_TYPE (function))) ? 3 :2 );                \n-          fprintf (file, \"\\tjg  \");                                           \n-          assemble_name (file, XSTR (XEXP (DECL_RTL (function), 0), 0));      \n-          fprintf (file, \"\\n\");                                               \n-          fprintf (file, \"0:\\t.long  \");\t\t                      \n-          fprintf (file, HOST_WIDE_INT_PRINT_DEC, (delta));                   \n-          fprintf (file, \"\\n\");\t\t\t                              \n-        }                                                                     \n-    }                                                                         \n-  else                                                                        \n-    {                                                                         \n-      if (flag_pic)                                                           \n-        {                                                                     \n-          fprintf (file, \"\\tbras  1,0f\\n\");                                   \n-          fprintf (file, \"\\t.long _GLOBAL_OFFSET_TABLE_-.\\n\");                \n-          fprintf (file, \"\\t.long  \");                                        \n-          assemble_name (file, XSTR (XEXP (DECL_RTL (function), 0), 0));      \n-          fprintf (file, \"@GOT\\n\");                                           \n-          fprintf (file, \"\\t.long  \");\t\t                              \n-          fprintf (file, HOST_WIDE_INT_PRINT_DEC, (delta));                   \n-          fprintf (file, \"\\n\");\t\t\t                              \n-          fprintf (file, \"0:\\tal  %d,8(1)\\n\",                                 \n-                   aggregate_value_p (TREE_TYPE                               \n-                                      (TREE_TYPE (function))) ? 3 : 2 );      \n-          fprintf (file, \"\\tl     0,4(1)\\n\");                                 \n-          fprintf (file, \"\\tal    1,0(1)\\n\");                                 \n-          fprintf (file, \"\\talr   1,0\\n\");                                    \n-          fprintf (file, \"\\tl     1,0(1)\\n\");                                 \n-          fprintf (file, \"\\tbr    1\\n\");                                      \n-        } else {                                                              \n-          fprintf (file, \"\\tbras  1,0f\\n\");                                   \n-          fprintf (file, \"\\t.long  \");                                        \n-          assemble_name (file, XSTR (XEXP (DECL_RTL (function), 0), 0));      \n-          fprintf (file, \"-.\\n\");                                             \n-          fprintf (file, \"\\t.long  \");\t\t                              \n-          fprintf (file, HOST_WIDE_INT_PRINT_DEC, (delta));                   \n-          fprintf (file, \"\\n\");\t\t\t                              \n-          fprintf (file, \"0:\\tal  %d,4(1)\\n\",                                 \n-                   aggregate_value_p (TREE_TYPE                               \n-                                      (TREE_TYPE (function))) ? 3 : 2 );      \n-          fprintf (file, \"\\tal    1,0(1)\\n\");                                 \n-          fprintf (file, \"\\tbr    1\\n\");                                      \n-       }                                                                      \n-    }                                                                         \n+  rtx op[9];\n+\n+  /* Operand 0 is the target function.  */\n+  op[0] = XEXP (DECL_RTL (function), 0);\n+  if (flag_pic && !SYMBOL_REF_FLAG (op[0]))\n+    {\n+      op[0] = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, op[0]), 113);\n+      op[0] = gen_rtx_CONST (Pmode, op[0]);\n+    }\n+\n+  /* Operand 1 is the 'this' pointer.  */\n+  if (aggregate_value_p (TREE_TYPE (TREE_TYPE (function))))\n+    op[1] = gen_rtx_REG (Pmode, 3);\n+  else\n+    op[1] = gen_rtx_REG (Pmode, 2);\n+\n+  /* Operand 2 is the delta.  */\n+  op[2] = GEN_INT (delta);\n+\n+  /* Operand 3 is the vcall_offset.  */\n+  op[3] = GEN_INT (vcall_offset);\n+\n+  /* Operand 4 is the temporary register.  */\n+  op[4] = gen_rtx_REG (Pmode, 1);\n+\n+  /* Operands 5 to 8 can be used as labels.  */\n+  op[5] = NULL_RTX;\n+  op[6] = NULL_RTX;\n+  op[7] = NULL_RTX;\n+  op[8] = NULL_RTX;\n+\n+  /* Generate code.  */\n+  if (TARGET_64BIT)\n+    {\n+      /* Setup literal pool pointer if required.  */\n+      if (!CONST_OK_FOR_LETTER_P (delta, 'K')\n+\t  || !CONST_OK_FOR_LETTER_P (vcall_offset, 'K'))\n+\t{\n+\t  op[5] = gen_label_rtx ();\n+\t  output_asm_insn (\"larl\\t%4,%5\", op);\n+\t}\n+\n+      /* Add DELTA to this pointer.  */\n+      if (delta)\n+\t{\n+\t  if (CONST_OK_FOR_LETTER_P (delta, 'J'))\n+\t    output_asm_insn (\"la\\t%1,%2(%1)\", op);\n+\t  else if (CONST_OK_FOR_LETTER_P (delta, 'K'))\n+\t    output_asm_insn (\"aghi\\t%1,%2\", op);\n+\t  else\n+\t    {\n+\t      op[6] = gen_label_rtx ();\n+\t      output_asm_insn (\"agf\\t%1,%6-%5(%4)\", op);\n+\t    }\n+\t}\n+\n+      /* Perform vcall adjustment.  */\n+      if (vcall_offset)\n+\t{\n+\t  if (CONST_OK_FOR_LETTER_P (vcall_offset, 'J'))\n+\t    {\n+\t      output_asm_insn (\"lg\\t%4,0(%1)\", op);\n+\t      output_asm_insn (\"ag\\t%1,%3(%4)\", op);\n+\t    }\n+\t  else if (CONST_OK_FOR_LETTER_P (vcall_offset, 'K'))\n+\t    {\n+\t      output_asm_insn (\"lghi\\t%4,%3\", op);\n+\t      output_asm_insn (\"ag\\t%4,0(%1)\", op);\n+\t      output_asm_insn (\"ag\\t%1,0(%4)\", op);\n+\t    }\n+\t  else\n+\t    {\n+\t      op[7] = gen_label_rtx ();\n+\t      output_asm_insn (\"llgf\\t%4,%7-%5(%4)\", op);\n+\t      output_asm_insn (\"ag\\t%4,0(%1)\", op);\n+\t      output_asm_insn (\"ag\\t%1,0(%4)\", op);\n+\t    }\n+\t}\n+        \n+      /* Jump to target.  */\n+      output_asm_insn (\"jg\\t%0\", op);\n+\n+      /* Output literal pool if required.  */\n+      if (op[5])\n+\t{\n+\t  output_asm_insn (\".align\\t4\", op);\n+\t  ASM_OUTPUT_INTERNAL_LABEL (file, \"L\", CODE_LABEL_NUMBER (op[5]));\n+\t}\n+      if (op[6])\n+\t{\n+\t  ASM_OUTPUT_INTERNAL_LABEL (file, \"L\", CODE_LABEL_NUMBER (op[6]));\n+\t  output_asm_insn (\".long\\t%2\", op);\n+\t}\n+      if (op[7])\n+\t{\n+\t  ASM_OUTPUT_INTERNAL_LABEL (file, \"L\", CODE_LABEL_NUMBER (op[7]));\n+\t  output_asm_insn (\".long\\t%3\", op);\n+\t}\n+    }\n+  else\n+    {\n+      /* Setup base pointer if required.  */\n+      if (!vcall_offset\n+\t  || !CONST_OK_FOR_LETTER_P (delta, 'K')\n+\t  || !CONST_OK_FOR_LETTER_P (vcall_offset, 'K'))\n+\t{\n+\t  op[5] = gen_label_rtx ();\n+\t  output_asm_insn (\"basr\\t%4,0\", op);\n+\t  ASM_OUTPUT_INTERNAL_LABEL (file, \"L\", CODE_LABEL_NUMBER (op[5]));\n+\t}\n+\n+      /* Add DELTA to this pointer.  */\n+      if (delta)\n+\t{\n+\t  if (CONST_OK_FOR_LETTER_P (delta, 'J'))\n+\t    output_asm_insn (\"la\\t%1,%2(%1)\", op);\n+\t  else if (CONST_OK_FOR_LETTER_P (delta, 'K'))\n+\t    output_asm_insn (\"ahi\\t%1,%2\", op);\n+\t  else\n+\t    {\n+\t      op[6] = gen_label_rtx ();\n+\t      output_asm_insn (\"a\\t%1,%6-%5(%4)\", op);\n+\t    }\n+\t}\n+\n+      /* Perform vcall adjustment.  */\n+      if (vcall_offset)\n+        {\n+\t  if (CONST_OK_FOR_LETTER_P (vcall_offset, 'J'))\n+\t    {\n+\t      output_asm_insn (\"lg\\t%4,0(%1)\", op);\n+\t      output_asm_insn (\"a\\t%1,%3(%4)\", op);\n+\t    }\n+\t  else if (CONST_OK_FOR_LETTER_P (vcall_offset, 'K'))\n+\t    {\n+\t      output_asm_insn (\"lhi\\t%4,%3\", op);\n+\t      output_asm_insn (\"a\\t%4,0(%1)\", op);\n+\t      output_asm_insn (\"a\\t%1,0(%4)\", op);\n+\t    }\n+\t  else\n+\t    {\n+\t      op[7] = gen_label_rtx ();\n+\t      output_asm_insn (\"l\\t%4,%7-%5(%4)\", op);\n+\t      output_asm_insn (\"a\\t%4,0(%1)\", op);\n+\t      output_asm_insn (\"a\\t%1,0(%4)\", op);\n+\t    }\n+\n+\t  /* We had to clobber the base pointer register.\n+\t     Re-setup the base pointer (with a different base).  */\n+\t  op[5] = gen_label_rtx ();\n+\t  output_asm_insn (\"basr\\t%4,0\", op);\n+\t  ASM_OUTPUT_INTERNAL_LABEL (file, \"L\", CODE_LABEL_NUMBER (op[5]));\n+\t}\n+\n+      /* Jump to target.  */\n+      op[8] = gen_label_rtx ();\n+      if (!flag_pic)\n+\toutput_asm_insn (\"l\\t%4,%8-%5(%4)\", op);\n+      else\n+\toutput_asm_insn (\"a\\t%4,%8-%5(%4)\", op);\n+      output_asm_insn (\"br\\t%4\", op);\n+\n+      /* Output literal pool.  */\n+      output_asm_insn (\".align\\t4\", op);\n+      ASM_OUTPUT_INTERNAL_LABEL (file, \"L\", CODE_LABEL_NUMBER (op[8]));\n+      if (!flag_pic)\n+\toutput_asm_insn (\".long\\t%0\", op);\n+      else\n+\toutput_asm_insn (\".long\\t%0-%5\", op);\n+\n+      if (op[6])\n+\t{\n+\t  ASM_OUTPUT_INTERNAL_LABEL (file, \"L\", CODE_LABEL_NUMBER (op[6]));\n+\t  output_asm_insn (\".long\\t%2\", op);\n+\t}\n+      if (op[7])\n+\t{\n+\t  ASM_OUTPUT_INTERNAL_LABEL (file, \"L\", CODE_LABEL_NUMBER (op[7]));\n+\t  output_asm_insn (\".long\\t%3\", op);\n+\t}\n+    }\n }\n+"}]}