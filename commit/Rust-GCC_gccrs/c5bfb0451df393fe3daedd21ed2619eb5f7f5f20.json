{"sha": "c5bfb0451df393fe3daedd21ed2619eb5f7f5f20", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzViZmIwNDUxZGYzOTNmZTNkYWVkZDIxZWQyNjE5ZWI1ZjdmNWYyMA==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2006-12-28T18:41:25Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2006-12-28T18:41:25Z"}, "message": "re PR fortran/30034 ([4.1 only] pure subroutine requires intent for procedure argument)\n\n2006-12-28  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/30034\n\t* resolve.c (resolve_formal_arglist): Exclude the test for\n\tpointers and procedures for subroutine arguments as well as\n\tfunctions.\n\n\tPR fortran/30237\n\t* intrinsic.c (remove_nullargs): Do not pass up arguments with\n\ta label. If the actual has a label and the formal has a type\n\tthen emit an error.\n\n2006-12-28  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/30034\n\t* gfortran.dg/pure_formal_proc_1.f90: New test.\n\n\tPR fortran/30237\n\t* gfortran.dg/intrinsic_actual_3.f90: New test.\n\nFrom-SVN: r120244", "tree": {"sha": "a28afc0cc08c6dc17b6c44c8ed834075cf7263b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a28afc0cc08c6dc17b6c44c8ed834075cf7263b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c5bfb0451df393fe3daedd21ed2619eb5f7f5f20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5bfb0451df393fe3daedd21ed2619eb5f7f5f20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5bfb0451df393fe3daedd21ed2619eb5f7f5f20", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5bfb0451df393fe3daedd21ed2619eb5f7f5f20/comments", "author": null, "committer": null, "parents": [{"sha": "975a4fc1a3818c84aafa85aa49915426305f7ae5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/975a4fc1a3818c84aafa85aa49915426305f7ae5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/975a4fc1a3818c84aafa85aa49915426305f7ae5"}], "stats": {"total": 88, "additions": 74, "deletions": 14}, "files": [{"sha": "f1042bcc8e945085ec27460b4c8bba2d7c79d292", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5bfb0451df393fe3daedd21ed2619eb5f7f5f20/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5bfb0451df393fe3daedd21ed2619eb5f7f5f20/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=c5bfb0451df393fe3daedd21ed2619eb5f7f5f20", "patch": "@@ -1,3 +1,15 @@\n+2006-12-28  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/30034\n+\t* resolve.c (resolve_formal_arglist): Exclude the test for\n+\tpointers and procedures for subroutine arguments as well as\n+\tfunctions.\n+\n+\tPR fortran/30237\n+\t* intrinsic.c (remove_nullargs): Do not pass up arguments with\n+\ta label. If the actual has a label and the formal has a type\n+\tthen emit an error.\n+\n 2006-12-27  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/30014"}, {"sha": "2ed42915b9d3185d3b54fc1463c1e3a3c0cbd677", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5bfb0451df393fe3daedd21ed2619eb5f7f5f20/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5bfb0451df393fe3daedd21ed2619eb5f7f5f20/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=c5bfb0451df393fe3daedd21ed2619eb5f7f5f20", "patch": "@@ -2782,7 +2782,7 @@ remove_nullargs (gfc_actual_arglist ** ap)\n     {\n       next = head->next;\n \n-      if (head->expr == NULL)\n+      if (head->expr == NULL && !head->label)\n \t{\n \t  head->next = NULL;\n \t  gfc_free_actual_arglist (head);\n@@ -2898,6 +2898,12 @@ sort_actual (const char *name, gfc_actual_arglist ** ap,\n \n   for (f = formal; f; f = f->next)\n     {\n+      if (f->actual && f->actual->label != NULL && f->ts.type)\n+\t{\n+\t  gfc_error (\"ALTERNATE RETURN not permitted at %L\", where);\n+\t  return FAILURE;\n+\t}\n+\n       if (f->actual == NULL)\n \t{\n \t  a = gfc_get_actual_arglist ();"}, {"sha": "2c71ae4c2d1996907a509adaeea8030b5f363101", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5bfb0451df393fe3daedd21ed2619eb5f7f5f20/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5bfb0451df393fe3daedd21ed2619eb5f7f5f20/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=c5bfb0451df393fe3daedd21ed2619eb5f7f5f20", "patch": "@@ -173,26 +173,20 @@ resolve_formal_arglist (gfc_symbol * proc)\n       if (sym->attr.flavor == FL_UNKNOWN)\n \tgfc_add_flavor (&sym->attr, FL_VARIABLE, sym->name, &sym->declared_at);\n \n-      if (gfc_pure (proc))\n+      if (gfc_pure (proc) && !sym->attr.pointer\n+            && sym->attr.flavor != FL_PROCEDURE)\n \t{\n-\t  if (proc->attr.function && !sym->attr.pointer\n-              && sym->attr.flavor != FL_PROCEDURE\n-\t      && sym->attr.intent != INTENT_IN)\n-\n+\t  if (proc->attr.function && sym->attr.intent != INTENT_IN)\n \t    gfc_error (\"Argument '%s' of pure function '%s' at %L must be \"\n \t\t       \"INTENT(IN)\", sym->name, proc->name,\n \t\t       &sym->declared_at);\n \n-\t  if (proc->attr.subroutine && !sym->attr.pointer\n-\t      && sym->attr.intent == INTENT_UNKNOWN)\n-\n-\t    gfc_error\n-\t      (\"Argument '%s' of pure subroutine '%s' at %L must have \"\n-\t       \"its INTENT specified\", sym->name, proc->name,\n-\t       &sym->declared_at);\n+\t  if (proc->attr.subroutine && sym->attr.intent == INTENT_UNKNOWN)\n+\t    gfc_error (\"Argument '%s' of pure subroutine '%s' at %L must \"\n+\t\t       \"have its INTENT specified\", sym->name, proc->name,\n+\t\t       &sym->declared_at);\n \t}\n \n-\n       if (gfc_elemental (proc))\n \t{\n \t  if (sym->as != NULL)"}, {"sha": "7a5a719acda3aae982796fb2d28ea082d1468179", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5bfb0451df393fe3daedd21ed2619eb5f7f5f20/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5bfb0451df393fe3daedd21ed2619eb5f7f5f20/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c5bfb0451df393fe3daedd21ed2619eb5f7f5f20", "patch": "@@ -1,3 +1,11 @@\n+2006-12-28  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/30034\n+\t* gfortran.dg/pure_formal_proc_1.f90: New test.\n+\n+\tPR fortran/30237\n+\t* gfortran.dg/intrinsic_actual_3.f90: New test.\n+\n 2006-12-27  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/30014"}, {"sha": "c2dd07cda5aede7fd078a9c689f7ef8c4ac89f16", "filename": "gcc/testsuite/gfortran.dg/intrinsic_actual_3.f90", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5bfb0451df393fe3daedd21ed2619eb5f7f5f20/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_actual_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5bfb0451df393fe3daedd21ed2619eb5f7f5f20/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_actual_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_actual_3.f90?ref=c5bfb0451df393fe3daedd21ed2619eb5f7f5f20", "patch": "@@ -0,0 +1,24 @@\n+! { dg-do compile }\n+! Tests the fix for PR30237 in which alternate returns in intrinsic\n+! actual arglists were quietly ignored.\n+!\n+! Contributed by Brooks Moses <brooks@gcc.gnu.org>\n+!\n+program ar1\n+    interface random_seed\n+      subroutine x (a, *)\n+        integer a\n+      end subroutine x\n+    end interface random_seed\n+\n+    real t1(2)\n+    call cpu_time(*20)        ! { dg-error \"not permitted\" }\n+    call cpu_time(*20, t1(1)) ! { dg-error \"Too many arguments\" }\n+! This specific version is permitted by the generic interface.\n+    call random_seed(i, *20)\n+! The new error gets overwritten but the diagnostic is clear enough.\n+    call random_seed(i, *20, *30) ! { dg-error \"not consistent\" }\n+    stop\n+20  write(*,*) t1\n+30 stop\n+end"}, {"sha": "4a55563c878e52238f85832ebad359de39a25eab", "filename": "gcc/testsuite/gfortran.dg/pure_formal_proc_1.f90", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5bfb0451df393fe3daedd21ed2619eb5f7f5f20/gcc%2Ftestsuite%2Fgfortran.dg%2Fpure_formal_proc_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5bfb0451df393fe3daedd21ed2619eb5f7f5f20/gcc%2Ftestsuite%2Fgfortran.dg%2Fpure_formal_proc_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpure_formal_proc_1.f90?ref=c5bfb0451df393fe3daedd21ed2619eb5f7f5f20", "patch": "@@ -0,0 +1,16 @@\n+! { dg-do compile }\n+! Test fix for PR30034 in which the legal, pure procedure formal\n+! argument was rejected as an error.\n+!\n+! Contgributed by Troban Trumsko <trumsko@yahoo.com>\n+!\n+ pure subroutine s_one ( anum, afun )\n+    integer, intent(in) :: anum\n+    interface\n+      pure function afun (k) result (l)\n+        implicit none\n+        integer, intent(in) :: k\n+        integer :: l\n+      end function afun\n+    end interface\n+end subroutine s_one"}]}