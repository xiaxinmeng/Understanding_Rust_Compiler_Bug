{"sha": "6e52332ec743ed97352e296c95cf86395a88f1ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmU1MjMzMmVjNzQzZWQ5NzM1MmUyOTZjOTVjZjg2Mzk1YTg4ZjFhZQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2002-08-15T22:25:39Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2002-08-15T22:25:39Z"}, "message": "re PR libstdc++/7445 (poor performance of std::locale::classic() in multi-threaded applications)\n\n\n2002-08-15  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/ext/stdio_filebuf.h (stdio_filebuf): Explicitly set\n\t_M_buf_size_opt to zero when unbuffering.\n\t* include/bits/fstream.tcc (filebuf::showmanyc): Simplify.\n\tConsistency checks for _M_buf_size_opt.\n\n\tRevert PR libstdc++/7445\n\t* src/locale.cc (locale::classic): Revert.\n\n\t* docs/html/17_intro/TODO: Add.\n\nFrom-SVN: r56365", "tree": {"sha": "d869577f3f25537a62302060b582053cc98e25a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d869577f3f25537a62302060b582053cc98e25a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e52332ec743ed97352e296c95cf86395a88f1ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e52332ec743ed97352e296c95cf86395a88f1ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e52332ec743ed97352e296c95cf86395a88f1ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e52332ec743ed97352e296c95cf86395a88f1ae/comments", "author": null, "committer": null, "parents": [{"sha": "204250d2fcd0840a6ded28044dc76ab25906445a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/204250d2fcd0840a6ded28044dc76ab25906445a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/204250d2fcd0840a6ded28044dc76ab25906445a"}], "stats": {"total": 61, "additions": 40, "deletions": 21}, "files": [{"sha": "206d7729b18d515732452df4cb804bcd4b09e7aa", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e52332ec743ed97352e296c95cf86395a88f1ae/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e52332ec743ed97352e296c95cf86395a88f1ae/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6e52332ec743ed97352e296c95cf86395a88f1ae", "patch": "@@ -1,3 +1,15 @@\n+2002-08-15  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/ext/stdio_filebuf.h (stdio_filebuf): Explicitly set\n+\t_M_buf_size_opt to zero when unbuffering.\n+\t* include/bits/fstream.tcc (filebuf::showmanyc): Simplify.\n+\tConsistency checks for _M_buf_size_opt.\n+\n+\tRevert PR libstdc++/7445\n+\t* src/locale.cc (locale::classic): Revert.\n+\t\n+\t* docs/html/17_intro/TODO: Add.\n+\t\n 2002-08-15  Phil Edwards  <pme@gcc.gnu.org>\n \n \t* docs/html/documentation.html:  Update doxygen links for 3.2."}, {"sha": "2ba36ad10a3b6956c3ba69f6f88b5b9f138c2bcc", "filename": "libstdc++-v3/docs/html/17_intro/TODO", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e52332ec743ed97352e296c95cf86395a88f1ae/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2FTODO", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e52332ec743ed97352e296c95cf86395a88f1ae/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2FTODO", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2FTODO?ref=6e52332ec743ed97352e296c95cf86395a88f1ae", "patch": "@@ -17,7 +17,16 @@ executable speed.\n \n - benchmarking addition to the testsuite that does the above.\n \n-- implement symbol versioning for ELF targets.\n+- implement testing for symbol versioning for ELF targets.\n+\n+- review streambuf, filebuf, stringbuf to optimize data member\n+placement.  Do pback bits need to be in streambuf? How about\n+_M_set_indeterminate, etc?\n+\n+- Think about naming all member data and member functions consistently\n+as per\n+funtions: _M_verb_adverb\n+data: _M_noun_adjective\n \n - exception specifications need to be reviewed for all parts of the\n library support and utility areas, particularly <new>. "}, {"sha": "18dbaf1caae8b6915e88feebfce289f4e0ed6c7a", "filename": "libstdc++-v3/include/bits/fstream.tcc", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e52332ec743ed97352e296c95cf86395a88f1ae/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e52332ec743ed97352e296c95cf86395a88f1ae/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc?ref=6e52332ec743ed97352e296c95cf86395a88f1ae", "patch": "@@ -90,9 +90,8 @@ namespace std\n \t    {\n \t      _M_allocate_internal_buffer();\n \t      _M_mode = __mode;\n-\t      \n-\t      // For time being, set both (in/out) sets  of pointers.\n \t      _M_set_indeterminate();\n+\n \t      if ((__mode & ios_base::ate)\n \t\t  && this->seekoff(0, ios_base::end, __mode) < 0)\n \t\tthis->close();\n@@ -147,12 +146,7 @@ namespace std\n       bool __testin = _M_mode & ios_base::in;\n \n       if (__testin && this->is_open())\n-\t{\n-\t  if (_M_in_cur < _M_in_end)\n-\t    __ret = _M_in_end - _M_in_cur;\n-\t  else\n-\t    __ret = 0;\n-\t}\n+\t__ret = _M_in_end - _M_in_cur;\n       _M_last_overflowed = false;\t\n       return __ret;\n     }\n@@ -316,7 +310,7 @@ namespace std\n     {\n       int_type __ret = traits_type::eof();\n       bool __testput = _M_out_cur && _M_out_beg < _M_out_end;\n-      bool __testunbuffered = _M_file.is_open() && !_M_buf_size;\n+      bool __testunbuffered = _M_file.is_open() && !_M_buf_size_opt;\n \n       if (__testput || __testunbuffered)\n \t{"}, {"sha": "59ab41a03e559136ca10ebb42dc110e4e51f0ff4", "filename": "libstdc++-v3/include/ext/stdio_filebuf.h", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e52332ec743ed97352e296c95cf86395a88f1ae/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstdio_filebuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e52332ec743ed97352e296c95cf86395a88f1ae/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstdio_filebuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstdio_filebuf.h?ref=6e52332ec743ed97352e296c95cf86395a88f1ae", "patch": "@@ -123,16 +123,18 @@ namespace __gnu_cxx\n       if (this->is_open())\n \t{\n \t  _M_mode = __mode;\n-\t  _M_buf_size_opt = __size;\n-\t  \n \t  if (__size > 0 && __size < 4)\n \t    {\n+\t      // Specify unbuffered.\n \t      _M_buf = _M_unbuf;\n \t      _M_buf_size = __size;\n+\t      _M_buf_size_opt = 0;\n \t    }\n \t  else\n-\t    _M_allocate_internal_buffer();\n-\t  \n+\t    {\n+\t      _M_buf_size_opt = __size;\n+\t      _M_allocate_internal_buffer();\n+\t    }\n \t  _M_set_indeterminate();\n \t}\n     }\n@@ -146,16 +148,18 @@ namespace __gnu_cxx\n       if (this->is_open())\n \t{\n \t  _M_mode = __mode;\n-\t  _M_buf_size_opt = __size;\n-\t  \n \t  if (__size > 0 && __size < 4)\n \t    {\n+\t      // Specify unbuffered.\n \t      _M_buf = _M_unbuf;\n \t      _M_buf_size = __size;\n+\t      _M_buf_size_opt = 0;\n \t    }\n \t  else\n-\t    _M_allocate_internal_buffer();\n-\t  \n+\t    {\n+\t      _M_buf_size_opt = __size;\n+\t      _M_allocate_internal_buffer();\n+\t    }\n \t  _M_set_indeterminate();\n \t}\n     }"}, {"sha": "3cb9d1b4cbfd1f569b700add610f38263c66b364", "filename": "libstdc++-v3/src/locale.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e52332ec743ed97352e296c95cf86395a88f1ae/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e52332ec743ed97352e296c95cf86395a88f1ae/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc?ref=6e52332ec743ed97352e296c95cf86395a88f1ae", "patch": "@@ -284,11 +284,11 @@ namespace std\n   const locale&\n   locale::classic()\n   {\n+    static _STL_mutex_lock __lock __STL_MUTEX_INITIALIZER;\n+    _STL_auto_lock __auto(__lock);\n+\n     if (!_S_classic)\n       {\n-\tstatic _STL_mutex_lock __lock __STL_MUTEX_INITIALIZER;\n-\t_STL_auto_lock __auto(__lock);\n-\n \ttry \n \t  {\n \t    // 26 Standard facets, 2 references."}]}