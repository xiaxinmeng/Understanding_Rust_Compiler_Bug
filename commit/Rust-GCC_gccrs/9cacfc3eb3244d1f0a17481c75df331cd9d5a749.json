{"sha": "9cacfc3eb3244d1f0a17481c75df331cd9d5a749", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWNhY2ZjM2ViMzI0NGQxZjBhMTc0ODFjNzVkZjMzMWNkOWQ1YTc0OQ==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola.pero@meta-innovation.com", "date": "2010-12-24T20:10:46Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2010-12-24T20:10:46Z"}, "message": "In libobjc/: 2010-12-24 Nicola Pero <nicola.pero@meta-innovation.com>\n\nIn libobjc/:\n2010-12-24  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n\t* selector.c (sel_getTypedSelector): Return NULL if given a NULL\n\targument.\n\t(sel_registerTypedName): Same.\n\t(sel_registerName): Same.\n\t* objc/runtime.h: Updated documentation.\n\t\nIn gcc/testsuite/:\n2010-12-24  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n\t* objc.dg/gnu-api-2-sel.m: Test calling sel_getUid,\n\tsel_registerName and sel_registerTypedName with NULL arguments.\n\tUpdated the test to work with the Apple runtime as well.\n\t* obj-c++.dg/gnu-api-2-sel.mm: Same change.\n\nFrom-SVN: r168231", "tree": {"sha": "82ccf00b97041686d44ec777ecbed412ef03db12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/82ccf00b97041686d44ec777ecbed412ef03db12"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9cacfc3eb3244d1f0a17481c75df331cd9d5a749", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cacfc3eb3244d1f0a17481c75df331cd9d5a749", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9cacfc3eb3244d1f0a17481c75df331cd9d5a749", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cacfc3eb3244d1f0a17481c75df331cd9d5a749/comments", "author": {"login": "Nico-31415", "id": 94470564, "node_id": "U_kgDOBaGBpA", "avatar_url": "https://avatars.githubusercontent.com/u/94470564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nico-31415", "html_url": "https://github.com/Nico-31415", "followers_url": "https://api.github.com/users/Nico-31415/followers", "following_url": "https://api.github.com/users/Nico-31415/following{/other_user}", "gists_url": "https://api.github.com/users/Nico-31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nico-31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nico-31415/subscriptions", "organizations_url": "https://api.github.com/users/Nico-31415/orgs", "repos_url": "https://api.github.com/users/Nico-31415/repos", "events_url": "https://api.github.com/users/Nico-31415/events{/privacy}", "received_events_url": "https://api.github.com/users/Nico-31415/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "410644c41a1b10798a0fe442c66f9bf582ecf067", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/410644c41a1b10798a0fe442c66f9bf582ecf067", "html_url": "https://github.com/Rust-GCC/gccrs/commit/410644c41a1b10798a0fe442c66f9bf582ecf067"}], "stats": {"total": 79, "additions": 73, "deletions": 6}, "files": [{"sha": "2f07ea6c7ff95293f84244a4a48649b52ef566f3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cacfc3eb3244d1f0a17481c75df331cd9d5a749/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cacfc3eb3244d1f0a17481c75df331cd9d5a749/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9cacfc3eb3244d1f0a17481c75df331cd9d5a749", "patch": "@@ -1,3 +1,10 @@\n+2010-12-24  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* objc.dg/gnu-api-2-sel.m: Test calling sel_getUid,\n+\tsel_registerName and sel_registerTypedName with NULL arguments.\n+\tUpdated the test to work with the Apple runtime as well.\n+\t* obj-c++.dg/gnu-api-2-sel.mm: Same change.\n+\t\n 2010-12-24  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* objc.dg/gnu-api-2-class.m: Updated test to pass log_2 of the"}, {"sha": "6d1d0fcf203777c3d80e1d6bb3c2dc245830623b", "filename": "gcc/testsuite/obj-c++.dg/gnu-api-2-sel.mm", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cacfc3eb3244d1f0a17481c75df331cd9d5a749/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fgnu-api-2-sel.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cacfc3eb3244d1f0a17481c75df331cd9d5a749/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fgnu-api-2-sel.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fgnu-api-2-sel.mm?ref=9cacfc3eb3244d1f0a17481c75df331cd9d5a749", "patch": "@@ -3,7 +3,6 @@\n   This is test 'sel', covering all functions starting with 'sel'.  */\n \n /* { dg-do run } */\n-/* { dg-skip-if \"\" { *-*-* } { \"-fnext-runtime\" } { \"\" } } */\n \n /* To get the modern GNU Objective-C Runtime API, you include\n    objc/runtime.h.  */\n@@ -16,11 +15,13 @@ @interface MyRootClass\n { Class isa; }\n + alloc;\n - init;\n++ initialize;\n @end\n \n @implementation MyRootClass\n + alloc { return class_createInstance (self, 0); }\n - init  { return self; }\n++ initialize { return self; }\n @end\n \n @protocol MyProtocol\n@@ -49,6 +50,7 @@ int main ()\n {\n   /* Functions are tested in alphabetical order.  */\n \n+#ifdef __GNU_LIBOBJC__\n   std::cout << \"Testing sel_copyTypedSelectorList ()...\\n\";\n   {\n     unsigned int count;\n@@ -72,6 +74,7 @@ once with types and once without (in this very test).  */\n     if (list[2] != NULL)\n       abort ();\n   }\n+#endif\n \n   std::cout << \"Testing sel_getName () ...\\n\";\n   {\n@@ -82,6 +85,7 @@ once with types and once without (in this very test).  */\n       abort ();\n   }\n \n+#ifdef __GNU_LIBOBJC__\n   std::cout << \"Testing sel_getTypeEncoding () ...\\n\";\n   {\n     /* Get a selector from a real class, so it has interesting\n@@ -96,7 +100,9 @@ once with types and once without (in this very test).  */\n     if (sel_getTypeEncoding (NULL) != NULL)\n       abort ();\n   }\n+#endif\n \n+#ifdef __GNU_LIBOBJC__\n   std::cout << \"Testing sel_getTypedSelector () ...\\n\";\n   {\n     /* First try with a selector where we know that a typed one has\n@@ -128,11 +134,15 @@ once with types and once without (in this very test).  */\n     if (selector != NULL)\n       abort ();\n   }\n+#endif\n \n   std::cout << \"Testing sel_getUid () ...\\n\";\n   {\n     if (std::strcmp (sel_getName (sel_getUid (\"myMethod\")), \"myMethod\") != 0)\n       abort ();\n+\n+    if (sel_getUid (NULL) != NULL)\n+      abort ();\n   }\n \n   std::cout << \"Testing sel_isEqual () ...\\n\";\n@@ -145,8 +155,12 @@ once with types and once without (in this very test).  */\n   {\n     if (std::strcmp (sel_getName (sel_registerName (\"myMethod\")), \"myMethod\") != 0)\n       abort ();\n+\n+    if (sel_registerName (NULL) != NULL)\n+      abort ();\n   }\n \n+#ifdef __GNU_LIBOBJC__\n   std::cout << \"Testing set_registerTypedName () ...\\n\";\n   {\n     const char *types = method_getTypeEncoding (class_getInstanceMethod \n@@ -159,7 +173,14 @@ once with types and once without (in this very test).  */\n \n     if (std::strcmp (sel_getTypeEncoding (selector), types) != 0)\n       abort ();\n+\n+    if (sel_registerTypedName (NULL, NULL) != NULL)\n+      abort ();\n+\n+    if (sel_registerTypedName (NULL, types) != NULL)\n+      abort ();\n   }\n+#endif\n \n   return (0);\n }"}, {"sha": "70368cae1852b845246658bccb90079dc76b102b", "filename": "gcc/testsuite/objc.dg/gnu-api-2-sel.m", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cacfc3eb3244d1f0a17481c75df331cd9d5a749/gcc%2Ftestsuite%2Fobjc.dg%2Fgnu-api-2-sel.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cacfc3eb3244d1f0a17481c75df331cd9d5a749/gcc%2Ftestsuite%2Fobjc.dg%2Fgnu-api-2-sel.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fgnu-api-2-sel.m?ref=9cacfc3eb3244d1f0a17481c75df331cd9d5a749", "patch": "@@ -3,7 +3,6 @@\n   This is test 'sel', covering all functions starting with 'sel'.  */\n \n /* { dg-do run } */\n-/* { dg-skip-if \"\" { *-*-* } { \"-fnext-runtime\" } { \"\" } } */\n \n /* To get the modern GNU Objective-C Runtime API, you include\n    objc/runtime.h.  */\n@@ -16,11 +15,13 @@ @interface MyRootClass\n { Class isa; }\n + alloc;\n - init;\n++ initialize;\n @end\n \n @implementation MyRootClass\n + alloc { return class_createInstance (self, 0); }\n - init  { return self; }\n++ initialize { return self; }\n @end\n \n @protocol MyProtocol\n@@ -49,6 +50,7 @@ int main(int argc, void **args)\n {\n   /* Functions are tested in alphabetical order.  */\n \n+#ifdef __GNU_LIBOBJC__\n   printf (\"Testing sel_copyTypedSelectorList ()...\\n\");\n   {\n     unsigned int count;\n@@ -72,6 +74,7 @@ once with types and once without (in this very test).  */\n     if (list[2] != NULL)\n       abort ();\n   }\n+#endif\n \n   printf (\"Testing sel_getName () ...\\n\");\n   {\n@@ -82,6 +85,7 @@ once with types and once without (in this very test).  */\n       abort ();\n   }\n \n+#ifdef __GNU_LIBOBJC__\n   printf (\"Testing sel_getTypeEncoding () ...\\n\");\n   {\n     /* Get a selector from a real class, so it has interesting\n@@ -96,7 +100,9 @@ once with types and once without (in this very test).  */\n     if (sel_getTypeEncoding (NULL) != NULL)\n       abort ();\n   }\n+#endif\n \n+#ifdef __GNU_LIBOBJC__\n   printf (\"Testing sel_getTypedSelector () ...\\n\");\n   {\n     /* First try with a selector where we know that a typed one has\n@@ -128,11 +134,15 @@ once with types and once without (in this very test).  */\n     if (selector != NULL)\n       abort ();\n   }\n+#endif\n \n   printf (\"Testing sel_getUid () ...\\n\");\n   {\n     if (strcmp (sel_getName (sel_getUid (\"myMethod\")), \"myMethod\") != 0)\n       abort ();\n+\n+    if (sel_getUid (NULL) != NULL)\n+      abort ();\n   }\n \n   printf (\"Testing sel_isEqual () ...\\n\");\n@@ -145,8 +155,12 @@ once with types and once without (in this very test).  */\n   {\n     if (strcmp (sel_getName (sel_registerName (\"myMethod\")), \"myMethod\") != 0)\n       abort ();\n+\n+    if (sel_registerName (NULL) != NULL)\n+      abort ();\n   }\n \n+#ifdef __GNU_LIBOBJC__\n   printf (\"Testing set_registerTypedName () ...\\n\");\n   {\n     const char *types = method_getTypeEncoding (class_getInstanceMethod \n@@ -159,7 +173,14 @@ once with types and once without (in this very test).  */\n \n     if (strcmp (sel_getTypeEncoding (selector), types) != 0)\n       abort ();\n+\n+    if (sel_registerTypedName (NULL, NULL) != NULL)\n+      abort ();\n+\n+    if (sel_registerTypedName (NULL, types) != NULL)\n+      abort ();\n   }\n+#endif\n \n   return 0;\n }"}, {"sha": "f234a2654d153865efc4ce394cc130d965bf3818", "filename": "libobjc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cacfc3eb3244d1f0a17481c75df331cd9d5a749/libobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cacfc3eb3244d1f0a17481c75df331cd9d5a749/libobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FChangeLog?ref=9cacfc3eb3244d1f0a17481c75df331cd9d5a749", "patch": "@@ -1,3 +1,11 @@\n+2010-12-24  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* selector.c (sel_getTypedSelector): Return NULL if given a NULL\n+\targument.\n+\t(sel_registerTypedName): Same.\n+\t(sel_registerName): Same.\n+\t* objc/runtime.h: Updated documentation.\n+\t\n 2010-12-24  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* objc/runtime.h (class_addIvar): Updated documentation.  The"}, {"sha": "551c348d3074cb58100f4eea734d054eaec1edeb", "filename": "libobjc/objc/runtime.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cacfc3eb3244d1f0a17481c75df331cd9d5a749/libobjc%2Fobjc%2Fruntime.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cacfc3eb3244d1f0a17481c75df331cd9d5a749/libobjc%2Fobjc%2Fruntime.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fruntime.h?ref=9cacfc3eb3244d1f0a17481c75df331cd9d5a749", "patch": "@@ -191,14 +191,14 @@ objc_EXPORT SEL sel_getUid (const char *name);\n    you know the types, it is better to call sel_registerTypedName().\n    If a selector with this name and no types already exists, it is\n    returned.  Note that this function should really be called\n-   'objc_registerSelector'.  */\n+   'objc_registerSelector'.  Return NULL if 'name' is NULL.  */\n objc_EXPORT SEL sel_registerName (const char *name);\n \n /* Register a selector with a given name and types.  If a selector\n    with this name and types already exists, it is returned.  Note that\n    this function should really be called 'objc_registerTypedSelector',\n    and it's called 'sel_registerTypedName' only for consistency with\n-   'sel_registerName'.\n+   'sel_registerName'.  Return NULL if 'name' is NULL.\n \n    Compatibility Note: the Apple/NeXT runtime has untyped selectors,\n    so it does not have this function, which is specific to the GNU\n@@ -227,7 +227,7 @@ objc_EXPORT SEL * sel_copyTypedSelectorList (const char *name,\n \n /* Return a selector with name 'name' and a non-zero type encoding, if\n    any such selector is registered with the runtime.  If there is no\n-   such selector, NULL is returned.\n+   such selector, NULL is returned.  Return NULL if 'name' is NULL.\n \n    This is useful if you have the name of the selector, and would\n    really like to get a selector for it that includes the type"}, {"sha": "4110df2662bb3f04ee092efdf1b7bc6ad4509a95", "filename": "libobjc/selector.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cacfc3eb3244d1f0a17481c75df331cd9d5a749/libobjc%2Fselector.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cacfc3eb3244d1f0a17481c75df331cd9d5a749/libobjc%2Fselector.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fselector.c?ref=9cacfc3eb3244d1f0a17481c75df331cd9d5a749", "patch": "@@ -357,8 +357,12 @@ SEL\n sel_getTypedSelector (const char *name)\n {\n   sidx i;\n-  objc_mutex_lock (__objc_runtime_mutex);\n \n+  if (name == NULL)\n+    return NULL;\n+  \n+  objc_mutex_lock (__objc_runtime_mutex);\n+  \n   /* Look for a typed selector.  */\n   i = (sidx) objc_hash_value_for_key (__objc_selector_hash, name);\n   if (i != 0)\n@@ -658,6 +662,9 @@ SEL\n sel_registerName (const char *name)\n {\n   SEL ret;\n+\n+  if (name == NULL)\n+    return NULL;\n     \n   objc_mutex_lock (__objc_runtime_mutex);\n   /* Assume that name is not constant static memory and needs to be\n@@ -680,6 +687,9 @@ sel_registerTypedName (const char *name, const char *type)\n {\n   SEL ret;\n \n+  if (name == NULL)\n+    return NULL;\n+\n   objc_mutex_lock (__objc_runtime_mutex);\n   /* Assume that name and type are not constant static memory and need\n      to be copied before put into a runtime structure.  is_const =="}]}