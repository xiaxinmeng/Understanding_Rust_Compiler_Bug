{"sha": "051d0e2f45082269e127c6e048c69faee664b129", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDUxZDBlMmY0NTA4MjI2OWUxMjdjNmUwNDhjNjlmYWVlNjY0YjEyOQ==", "commit": {"author": {"name": "Sofiane Naci", "email": "sofiane.naci@arm.com", "date": "2013-04-02T09:02:17Z"}, "committer": {"name": "Sofiane Naci", "email": "sofiane@gcc.gnu.org", "date": "2013-04-02T09:02:17Z"}, "message": "aarch64.md (*mov<mode>_aarch64): Add alternatives for scalar move.\n\n\t* config/aarch64/aarch64.md (*mov<mode>_aarch64): Add alternatives for\n\tscalar move.\n\t* config/aarch64/aarch64.c\n\t(aarch64_simd_scalar_immediate_valid_for_move): New.\n\t* config/aarch64/aarch64-protos.h\n\t(aarch64_simd_scalar_immediate_valid_for_move): New.\n\t* config/aarch64/constraints.md (Dh, Dq): New.\n\t* config/aarch64/iterators.md (hq): New.\n\nFrom-SVN: r197341", "tree": {"sha": "c4e3ff162f89a1e7fcfb2d19aec27e6fdf10021a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4e3ff162f89a1e7fcfb2d19aec27e6fdf10021a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/051d0e2f45082269e127c6e048c69faee664b129", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/051d0e2f45082269e127c6e048c69faee664b129", "html_url": "https://github.com/Rust-GCC/gccrs/commit/051d0e2f45082269e127c6e048c69faee664b129", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/051d0e2f45082269e127c6e048c69faee664b129/comments", "author": null, "committer": null, "parents": [{"sha": "0ee1e3d98397c166a0bc74d1fbb7032cc3e99421", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ee1e3d98397c166a0bc74d1fbb7032cc3e99421", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ee1e3d98397c166a0bc74d1fbb7032cc3e99421"}], "stats": {"total": 58, "additions": 53, "deletions": 5}, "files": [{"sha": "1bf033d2aa445a2d7fe2beb368126785b6fa1489", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/051d0e2f45082269e127c6e048c69faee664b129/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/051d0e2f45082269e127c6e048c69faee664b129/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=051d0e2f45082269e127c6e048c69faee664b129", "patch": "@@ -1,3 +1,14 @@\n+2013-04-02  Sofiane Naci  <sofiane.naci@arm.com>\n+\n+\t* config/aarch64/aarch64.md (*mov<mode>_aarch64): Add alternatives for\n+\tscalar move.\n+\t* config/aarch64/aarch64.c\n+\t(aarch64_simd_scalar_immediate_valid_for_move): New.\n+\t* config/aarch64/aarch64-protos.h\n+\t(aarch64_simd_scalar_immediate_valid_for_move): New.\n+\t* config/aarch64/constraints.md (Dh, Dq): New.\n+\t* config/aarch64/iterators.md (hq): New.\n+\n 2013-04-02  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* reorg.c (get_branch_condition): Deal with conditional returns."}, {"sha": "7ebbf51a201b21a263aa44600d148a81d81e2d79", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/051d0e2f45082269e127c6e048c69faee664b129/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/051d0e2f45082269e127c6e048c69faee664b129/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=051d0e2f45082269e127c6e048c69faee664b129", "patch": "@@ -151,6 +151,7 @@ bool aarch64_regno_ok_for_base_p (int, bool);\n bool aarch64_regno_ok_for_index_p (int, bool);\n bool aarch64_simd_imm_scalar_p (rtx x, enum machine_mode mode);\n bool aarch64_simd_imm_zero_p (rtx, enum machine_mode);\n+bool aarch64_simd_scalar_immediate_valid_for_move (rtx, enum machine_mode);\n bool aarch64_simd_shift_imm_p (rtx, enum machine_mode, bool);\n bool aarch64_symbolic_address_p (rtx);\n bool aarch64_symbolic_constant_p (rtx, enum aarch64_symbol_context,"}, {"sha": "bd33cd66b8dd59cc84bdc34ddc840e6b0103888f", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/051d0e2f45082269e127c6e048c69faee664b129/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/051d0e2f45082269e127c6e048c69faee664b129/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=051d0e2f45082269e127c6e048c69faee664b129", "patch": "@@ -6407,6 +6407,21 @@ aarch64_simd_gen_const_vector_dup (enum machine_mode mode, int val)\n   return gen_rtx_CONST_VECTOR (mode, v);\n }\n \n+/* Check OP is a legal scalar immediate for the MOVI instruction.  */\n+\n+bool\n+aarch64_simd_scalar_immediate_valid_for_move (rtx op, enum machine_mode mode)\n+{\n+  enum machine_mode vmode;\n+\n+  gcc_assert (!VECTOR_MODE_P (mode));\n+  vmode = aarch64_preferred_simd_mode (mode);\n+  rtx op_v = aarch64_simd_gen_const_vector_dup (vmode, INTVAL (op));\n+  int retval = aarch64_simd_immediate_valid_for_move (op_v, vmode, 0,\n+\t\t\t\t\t\t      NULL, NULL, NULL, NULL);\n+  return retval;\n+}\n+\n /* Construct and return a PARALLEL RTX vector.  */\n rtx\n aarch64_simd_vect_par_cnst_half (enum machine_mode mode, bool high)"}, {"sha": "01f04aade439a4bf51ed6e4c70b8ce414c1c8eab", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/051d0e2f45082269e127c6e048c69faee664b129/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/051d0e2f45082269e127c6e048c69faee664b129/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=051d0e2f45082269e127c6e048c69faee664b129", "patch": "@@ -763,19 +763,21 @@\n )\n \n (define_insn \"*mov<mode>_aarch64\"\n-  [(set (match_operand:SHORT 0 \"nonimmediate_operand\" \"=r,r,r,m,  r,*w\")\n-        (match_operand:SHORT 1 \"general_operand\"      \" r,M,m,rZ,*w,r\"))]\n+  [(set (match_operand:SHORT 0 \"nonimmediate_operand\" \"=r,r,   *w,r, m, r,*w,*w\")\n+        (match_operand:SHORT 1 \"general_operand\"      \" r,M,D<hq>,m,rZ,*w, r,*w\"))]\n   \"(register_operand (operands[0], <MODE>mode)\n     || aarch64_reg_or_zero (operands[1], <MODE>mode))\"\n   \"@\n    mov\\\\t%w0, %w1\n    mov\\\\t%w0, %1\n+   movi\\\\t%0.<Vallxd>, %1\n    ldr<size>\\\\t%w0, %1\n    str<size>\\\\t%w1, %0\n    umov\\\\t%w0, %1.<v>[0]\n-   dup\\\\t%0.<Vallxd>, %w1\"\n-  [(set_attr \"v8type\" \"move,alu,load1,store1,*,*\")\n-   (set_attr \"simd_type\" \"*,*,*,*,simd_movgp,simd_dupgp\")\n+   dup\\\\t%0.<Vallxd>, %w1\n+   dup\\\\t%0, %1.<v>[0]\"\n+  [(set_attr \"v8type\" \"move,alu,alu,load1,store1,*,*,*\")\n+   (set_attr \"simd_type\" \"*,*,simd_move_imm,*,*,simd_movgp,simd_dupgp,simd_dup\")\n    (set_attr \"mode\" \"<MODE>\")\n    (set_attr \"simd_mode\" \"<MODE>\")]\n )"}, {"sha": "18ac16a3160280247241f25d0d88195bb864aece", "filename": "gcc/config/aarch64/constraints.md", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/051d0e2f45082269e127c6e048c69faee664b129/gcc%2Fconfig%2Faarch64%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/051d0e2f45082269e127c6e048c69faee664b129/gcc%2Fconfig%2Faarch64%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fconstraints.md?ref=051d0e2f45082269e127c6e048c69faee664b129", "patch": "@@ -152,6 +152,22 @@\n \t\t\t\t\t\t\t  NULL, NULL, NULL,\n \t\t\t\t\t\t\t  NULL, NULL) != 0\")))\n \n+(define_constraint \"Dh\"\n+  \"@internal\n+ A constraint that matches an immediate operand valid for\\\n+ AdvSIMD scalar move in HImode.\"\n+ (and (match_code \"const_int\")\n+      (match_test \"aarch64_simd_scalar_immediate_valid_for_move (op,\n+\t\t\t\t\t\t HImode)\")))\n+\n+(define_constraint \"Dq\"\n+  \"@internal\n+ A constraint that matches an immediate operand valid for\\\n+ AdvSIMD scalar move in QImode.\"\n+ (and (match_code \"const_int\")\n+      (match_test \"aarch64_simd_scalar_immediate_valid_for_move (op,\n+\t\t\t\t\t\t QImode)\")))\n+\n (define_constraint \"Dl\"\n   \"@internal\n  A constraint that matches vector of immediates for left shifts.\""}, {"sha": "863a4af034635e627f7c7a8114974c570801663e", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/051d0e2f45082269e127c6e048c69faee664b129/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/051d0e2f45082269e127c6e048c69faee664b129/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=051d0e2f45082269e127c6e048c69faee664b129", "patch": "@@ -249,6 +249,9 @@\n ;; 32-bit version and \"%x0\" in the 64-bit version.\n (define_mode_attr w [(QI \"w\") (HI \"w\") (SI \"w\") (DI \"x\") (SF \"s\") (DF \"d\")])\n \n+;; For constraints used in scalar immediate vector moves\n+(define_mode_attr hq [(HI \"h\") (QI \"q\")])\n+\n ;; For scalar usage of vector/FP registers\n (define_mode_attr v [(QI \"b\") (HI \"h\") (SI \"s\") (DI \"d\")\n \t\t    (V8QI \"\") (V16QI \"\")"}]}