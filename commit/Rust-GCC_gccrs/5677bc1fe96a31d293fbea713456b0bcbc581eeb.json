{"sha": "5677bc1fe96a31d293fbea713456b0bcbc581eeb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTY3N2JjMWZlOTZhMzFkMjkzZmJlYTcxMzQ1NmIwYmNiYzU4MWVlYg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2012-09-25T14:44:52Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2012-09-25T14:44:52Z"}, "message": "re PR c++/54526 ([C++11] <:: is incorrectly treated as digraph <: followed by colon)\n\n/cp\n2012-09-25  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/54526\n\t* parser.c (cp_parser_template_id): In C++11 mode simply accept\n\tX<::A>.\n\n/testsuite\n2012-09-25  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/54526\n\t* g++.dg/cpp0x/parse2.C: New.\n\t* g++.dg/parse/error11.C: Adjust.\n\t* g++.dg/parse/error12.C: Likewise.\n\nFrom-SVN: r191712", "tree": {"sha": "f40e9d1cf7d28aa731ef197576c07fff191960d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f40e9d1cf7d28aa731ef197576c07fff191960d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5677bc1fe96a31d293fbea713456b0bcbc581eeb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5677bc1fe96a31d293fbea713456b0bcbc581eeb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5677bc1fe96a31d293fbea713456b0bcbc581eeb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5677bc1fe96a31d293fbea713456b0bcbc581eeb/comments", "author": null, "committer": null, "parents": [{"sha": "c985a8e929684dcbd781778c8fbf7e1edcbecec4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c985a8e929684dcbd781778c8fbf7e1edcbecec4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c985a8e929684dcbd781778c8fbf7e1edcbecec4"}], "stats": {"total": 78, "additions": 53, "deletions": 25}, "files": [{"sha": "ef89bae85e99b5415d05210a5be31451905a924a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5677bc1fe96a31d293fbea713456b0bcbc581eeb/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5677bc1fe96a31d293fbea713456b0bcbc581eeb/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5677bc1fe96a31d293fbea713456b0bcbc581eeb", "patch": "@@ -1,3 +1,9 @@\n+2012-09-25  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/54526\n+\t* parser.c (cp_parser_template_id): In C++11 mode simply accept\n+\tX<::A>.\n+\n 2012-09-25  Zhenqiang Chen <zhenqiang.chen@linaro.org>\n \n \tPR c++/50970"}, {"sha": "40aa3061c0152eb21ca7006848bd1e8426d6af16", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5677bc1fe96a31d293fbea713456b0bcbc581eeb/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5677bc1fe96a31d293fbea713456b0bcbc581eeb/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=5677bc1fe96a31d293fbea713456b0bcbc581eeb", "patch": "@@ -12479,18 +12479,21 @@ cp_parser_template_id (cp_parser *parser,\n \t  return error_mark_node;\n \t}\n       /* Otherwise, emit an error about the invalid digraph, but continue\n-\t parsing because we got our argument list.  */\n-      if (permerror (next_token->location,\n-\t\t     \"%<<::%> cannot begin a template-argument list\"))\n+\t parsing because we got our argument list.  In C++11 do not emit\n+\t any error, per 2.5/3.  */\n+      if (cxx_dialect < cxx0x\n+\t  && permerror (next_token->location,\n+\t\t\t\"%<<::%> cannot begin a template-argument list\"))\n \t{\n \t  static bool hint = false;\n \t  inform (next_token->location,\n \t\t  \"%<<:%> is an alternate spelling for %<[%>.\"\n \t\t  \" Insert whitespace between %<<%> and %<::%>\");\n \t  if (!hint && !flag_permissive)\n \t    {\n-\t      inform (next_token->location, \"(if you use %<-fpermissive%>\"\n-\t\t      \" G++ will accept your code)\");\n+\t      inform (next_token->location, \"(if you use %<-fpermissive%> \"\n+\t\t      \"or %<-std=c++11%>, or %<-std=gnu++11%> G++ will \"\n+\t\t      \"accept your code)\");\n \t      hint = true;\n \t    }\n \t}"}, {"sha": "41d75a68b45a6df4fd25f16fea51b269216d8e8d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5677bc1fe96a31d293fbea713456b0bcbc581eeb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5677bc1fe96a31d293fbea713456b0bcbc581eeb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5677bc1fe96a31d293fbea713456b0bcbc581eeb", "patch": "@@ -1,3 +1,10 @@\n+2012-09-25  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/54526\n+\t* g++.dg/cpp0x/parse2.C: New.\n+\t* g++.dg/parse/error11.C: Adjust.\n+\t* g++.dg/parse/error12.C: Likewise.\n+\n 2012-09-25  Igor Zamyatin  <igor.zamyatin@intel.com>\n \n \t* gcc.target/i386/20030217-1.c: Added check for"}, {"sha": "eea6b41aa1706d3854bbb5c50894ddcdee701bca", "filename": "gcc/testsuite/g++.dg/cpp0x/parse2.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5677bc1fe96a31d293fbea713456b0bcbc581eeb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fparse2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5677bc1fe96a31d293fbea713456b0bcbc581eeb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fparse2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fparse2.C?ref=5677bc1fe96a31d293fbea713456b0bcbc581eeb", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/54526\n+// { dg-do compile { target c++11 } }\n+\n+template <class T>\n+struct X { };\n+\n+struct A { };\n+\n+int main()\n+{\n+  X<::A> x;\n+}"}, {"sha": "ec0058ee767886b36a56ed1243ca268f6e69f981", "filename": "gcc/testsuite/g++.dg/parse/error11.C", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5677bc1fe96a31d293fbea713456b0bcbc581eeb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5677bc1fe96a31d293fbea713456b0bcbc581eeb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror11.C?ref=5677bc1fe96a31d293fbea713456b0bcbc581eeb", "patch": "@@ -16,34 +16,34 @@ struct Foo\n   };\n \n   void method(void) {\n-    typename Foo<::B>::template Nested<::B> n; // { dg-error \"17:'<::' cannot begin\" \"17-begin\" }\n-// { dg-message \"17:'<:' is an alternate spelling\" \"17-alt\" { target *-*-* } 19 }\n-// { dg-error \"39:'<::' cannot begin\" \"39-begin\" { target *-*-* } 19 }\n-// { dg-message \"39:'<:' is an alternate spelling\" \"39-alt\" { target *-*-* } 19 }\n+    typename Foo<::B>::template Nested<::B> n; // { dg-error \"17:'<::' cannot begin\" \"17-begin\" { target c++98 } }\n+// { dg-message \"17:'<:' is an alternate spelling\" \"17-alt\" { target c++98 } 19 }\n+// { dg-error \"39:'<::' cannot begin\" \"39-begin\" { target c++98 } 19 }\n+// { dg-message \"39:'<:' is an alternate spelling\" \"39-alt\" { target c++98 } 19 }\n     n.template Nested<B>::method();\n-    n.template Nested<::B>::method();  // { dg-error \"22:'<::' cannot begin\" \"error\" }\n-// { dg-message \"22:'<:' is an alternate\" \"note\" { target *-*-* } 24 }\n+    n.template Nested<::B>::method();  // { dg-error \"22:'<::' cannot begin\" \"error\" { target c++98 } }\n+// { dg-message \"22:'<:' is an alternate\" \"note\" { target c++98 } 24 }\n     Nested<B>::method();\n-    Nested<::B>::method(); // { dg-error \"11:'<::' cannot begin\" \"error\" }\n-// { dg-message \"11:'<:' is an alternate\" \"note\" { target *-*-* } 27 }\n+    Nested<::B>::method(); // { dg-error \"11:'<::' cannot begin\" \"error\" { target c++98 } }\n+// { dg-message \"11:'<:' is an alternate\" \"note\" { target c++98 } 27 }\n   }\n };\n \n template <int N> struct Foo2 {};\n-template struct Foo2<::B>;  // { dg-error \"21:'<::' cannot begin\" \"begin\" }\n-// { dg-message \"21:'<:' is an alternate\" \"alt\" { target *-*-* } 33 }\n+template struct Foo2<::B>;  // { dg-error \"21:'<::' cannot begin\" \"begin\" { target c++98 } }\n+// { dg-message \"21:'<:' is an alternate\" \"alt\" { target c++98 } 33 }\n // { dg-message \"25:type/value mismatch\" \"mismatch\" { target *-*-* } 33 }\n // { dg-error \"25:expected a constant\" \"const\" { target *-*-* } 33 }\n \n int value = 0;\n \n void func(void)\n {\n-  Foo<::B> f; // { dg-error \"cannot begin\" \"begin\" }\n-// { dg-message \"alternate spelling\" \"alt\" { target *-*-* } 42 }\n+  Foo<::B> f; // { dg-error \"cannot begin\" \"begin\" { target c++98 } }\n+// { dg-message \"alternate spelling\" \"alt\" { target c++98 } 42 }\n   f.Foo<B>::method();\n-  f.Foo<::B>::method(); // { dg-error \"8:cannot begin\" \"begin\" }\n-// { dg-message \"8:alternate spelling\" \"alt\" { target *-*-* } 45 }\n+  f.Foo<::B>::method(); // { dg-error \"8:cannot begin\" \"begin\" { target c++98 } }\n+// { dg-message \"8:alternate spelling\" \"alt\" { target c++98 } 45 }\n \n   // Check cases where we the token sequence is the correct one, but there\n   //  was no digraph or whitespaces in the middle, so we should not emit\n@@ -63,9 +63,9 @@ void func(void)\n   Foo[::value] = 0;\n }\n \n-template struct Foo<::B>; // { dg-error \"20:'<::' cannot begin\" \"begin\" }\n-// { dg-message \"20:is an alternate\" \"alt\" { target *-*-* } 66 }\n+template struct Foo<::B>; // { dg-error \"20:'<::' cannot begin\" \"begin\" { target c++98 } }\n+// { dg-message \"20:is an alternate\" \"alt\" { target c++98 } 66 }\n \n // On the first error message, an additional note about the use of \n //  -fpermissive should be present\n-// { dg-message \"17:\\\\(if you use '-fpermissive' G\\\\+\\\\+ will accept your code\\\\)\" \"-fpermissive\" { target *-*-* } 19 }\n+// { dg-message \"17:\\\\(if you use '-fpermissive' or '-std=c\\\\+\\\\+11', or '-std=gnu\\\\+\\\\+11' G\\\\+\\\\+ will accept your code\\\\)\" \"-fpermissive\" { target c++98 } 19 }"}, {"sha": "203ca3febb29447505cec029ddbc2b96220102b6", "filename": "gcc/testsuite/g++.dg/parse/error12.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5677bc1fe96a31d293fbea713456b0bcbc581eeb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5677bc1fe96a31d293fbea713456b0bcbc581eeb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror12.C?ref=5677bc1fe96a31d293fbea713456b0bcbc581eeb", "patch": "@@ -8,6 +8,6 @@ struct B;\n template <class A>\n struct Foo {};\n \n-Foo<::B> foo;   // { dg-bogus \"error\" \"error in place of warning\" }\n-// { dg-warning \"4: '<::' cannot begin a template-argument list\" \"warning <::\" { target *-*-* } 11 }\n-// { dg-message \"4:'<:' is an alternate spelling for '.'. Insert whitespace between '<' and '::'\" \"note <:\" { target *-*-* } 11 }\n+Foo<::B> foo;   // { dg-bogus \"error\" \"error in place of warning\" { target c++98 } }\n+// { dg-warning \"4: '<::' cannot begin a template-argument list\" \"warning <::\" { target c++98 } 11 }\n+// { dg-message \"4:'<:' is an alternate spelling for '.'. Insert whitespace between '<' and '::'\" \"note <:\" { target c++98 } 11 }"}]}