{"sha": "668046d17599f7596f01cfbb8ebd0f00c4531e5b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjY4MDQ2ZDE3NTk5Zjc1OTZmMDFjZmJiOGViZDBmMDBjNDUzMWU1Yg==", "commit": {"author": {"name": "David Sherwood", "email": "david.sherwood@arm.com", "date": "2015-01-21T17:53:44Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-01-21T17:53:44Z"}, "message": "gcc/\n2015-01-21  David Sherwood  <david.sherwood@arm.com>\n\t    Tejas Belagod <Tejas.Belagod@arm.com>\n\n\t* config/aarch64/aarch64-protos.h (aarch64_simd_attr_length_rglist)\n\t(aarch64_reverse_mask): New decls.\n\t* config/aarch64/iterators.md (UNSPEC_REV_REGLIST): New enum.\n\t(insn_count): New mode_attr.\n\t* config/aarch64/aarch64-simd.md (vec_store_lanesoi, vec_store_lanesci)\n\t(vec_store_lanesxi, vec_load_lanesoi, vec_load_lanesci)\n\t(vec_load_lanesxi): Made ABI compliant for Big Endian targets.\n\t(aarch64_rev_reglist, aarch64_simd_ld2, aarch64_simd_ld3)\n\t(aarch64_simd_ld4, aarch64_simd_st2, aarch64_simd_st3)\n\t(aarch64_simd_st4): New patterns.\n\t* config/aarch64/aarch64.c (aarch64_simd_attr_length_rglist)\n\t(aarch64_reverse_mask): New functions.\n\nCo-Authored-By: Tejas Belagod <tejas.belagod@arm.com>\n\nFrom-SVN: r219959", "tree": {"sha": "4a2a095360f2807417c5e140eae9952749da9633", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a2a095360f2807417c5e140eae9952749da9633"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/668046d17599f7596f01cfbb8ebd0f00c4531e5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/668046d17599f7596f01cfbb8ebd0f00c4531e5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/668046d17599f7596f01cfbb8ebd0f00c4531e5b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/668046d17599f7596f01cfbb8ebd0f00c4531e5b/comments", "author": {"login": "david-arm", "id": 57997763, "node_id": "MDQ6VXNlcjU3OTk3NzYz", "avatar_url": "https://avatars.githubusercontent.com/u/57997763?v=4", "gravatar_id": "", "url": "https://api.github.com/users/david-arm", "html_url": "https://github.com/david-arm", "followers_url": "https://api.github.com/users/david-arm/followers", "following_url": "https://api.github.com/users/david-arm/following{/other_user}", "gists_url": "https://api.github.com/users/david-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/david-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/david-arm/subscriptions", "organizations_url": "https://api.github.com/users/david-arm/orgs", "repos_url": "https://api.github.com/users/david-arm/repos", "events_url": "https://api.github.com/users/david-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/david-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2d8c6dc1d9cc67b535e70c6ace871d1a8f15805a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d8c6dc1d9cc67b535e70c6ace871d1a8f15805a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d8c6dc1d9cc67b535e70c6ace871d1a8f15805a"}], "stats": {"total": 201, "additions": 195, "deletions": 6}, "files": [{"sha": "2921413e661760feb840d465f8ab9a62f26d7401", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/668046d17599f7596f01cfbb8ebd0f00c4531e5b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/668046d17599f7596f01cfbb8ebd0f00c4531e5b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=668046d17599f7596f01cfbb8ebd0f00c4531e5b", "patch": "@@ -1,3 +1,19 @@\n+2015-01-21  David Sherwood  <david.sherwood@arm.com>\n+\t    Tejas Belagod <Tejas.Belagod@arm.com>\n+\n+\t* config/aarch64/aarch64-protos.h (aarch64_simd_attr_length_rglist)\n+\t(aarch64_reverse_mask): New decls.\n+\t* config/aarch64/iterators.md (UNSPEC_REV_REGLIST): New enum.\n+\t(insn_count): New mode_attr.\n+\t* config/aarch64/aarch64-simd.md (vec_store_lanesoi, vec_store_lanesci)\n+\t(vec_store_lanesxi, vec_load_lanesoi, vec_load_lanesci)\n+\t(vec_load_lanesxi): Made ABI compliant for Big Endian targets.\n+\t(aarch64_rev_reglist, aarch64_simd_ld2, aarch64_simd_ld3)\n+\t(aarch64_simd_ld4, aarch64_simd_st2, aarch64_simd_st3)\n+\t(aarch64_simd_st4): New patterns.\n+\t* config/aarch64/aarch64.c (aarch64_simd_attr_length_rglist)\n+\t(aarch64_reverse_mask): New functions.\n+\n 2015-01-21  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/aarch64/aarch64-protos.h (aarch64_simd_disambiguate_copy):"}, {"sha": "0b3d03525e79a9747dbd1a3350abb4e60db6592b", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/668046d17599f7596f01cfbb8ebd0f00c4531e5b/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/668046d17599f7596f01cfbb8ebd0f00c4531e5b/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=668046d17599f7596f01cfbb8ebd0f00c4531e5b", "patch": "@@ -203,6 +203,8 @@ bool aarch64_modes_tieable_p (machine_mode mode1,\n bool aarch64_move_imm (HOST_WIDE_INT, machine_mode);\n bool aarch64_mov_operand_p (rtx, enum aarch64_symbol_context,\n \t\t\t    machine_mode);\n+int aarch64_simd_attr_length_rglist (enum machine_mode);\n+rtx aarch64_reverse_mask (enum machine_mode);\n bool aarch64_offset_7bit_signed_scaled_p (machine_mode, HOST_WIDE_INT);\n char *aarch64_output_scalar_simd_mov_immediate (rtx, machine_mode);\n char *aarch64_output_simd_mov_immediate (rtx, machine_mode, unsigned);"}, {"sha": "17ac56c010f74f6d87b57dbbb93e6f7175ec7ce6", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 145, "deletions": 6, "changes": 151, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/668046d17599f7596f01cfbb8ebd0f00c4531e5b/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/668046d17599f7596f01cfbb8ebd0f00c4531e5b/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=668046d17599f7596f01cfbb8ebd0f00c4531e5b", "patch": "@@ -3880,7 +3880,7 @@\n \n ;; Patterns for vector struct loads and stores.\n \n-(define_insn \"vec_load_lanesoi<mode>\"\n+(define_insn \"aarch64_simd_ld2<mode>\"\n   [(set (match_operand:OI 0 \"register_operand\" \"=w\")\n \t(unspec:OI [(match_operand:OI 1 \"aarch64_simd_struct_operand\" \"Utv\")\n \t\t    (unspec:VQ [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n@@ -3912,7 +3912,26 @@\n   [(set_attr \"type\" \"neon_load2_one_lane\")]\n )\n \n-(define_insn \"vec_store_lanesoi<mode>\"\n+(define_expand \"vec_load_lanesoi<mode>\"\n+  [(set (match_operand:OI 0 \"register_operand\" \"=w\")\n+\t(unspec:OI [(match_operand:OI 1 \"aarch64_simd_struct_operand\" \"Utv\")\n+\t\t    (unspec:VQ [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+\t\t   UNSPEC_LD2))]\n+  \"TARGET_SIMD\"\n+{\n+  if (BYTES_BIG_ENDIAN)\n+    {\n+      rtx tmp = gen_reg_rtx (OImode);\n+      rtx mask = aarch64_reverse_mask (<MODE>mode);\n+      emit_insn (gen_aarch64_simd_ld2<mode> (tmp, operands[1]));\n+      emit_insn (gen_aarch64_rev_reglistoi (operands[0], tmp, mask));\n+    }\n+  else\n+    emit_insn (gen_aarch64_simd_ld2<mode> (operands[0], operands[1]));\n+  DONE;\n+})\n+\n+(define_insn \"aarch64_simd_st2<mode>\"\n   [(set (match_operand:OI 0 \"aarch64_simd_struct_operand\" \"=Utv\")\n \t(unspec:OI [(match_operand:OI 1 \"register_operand\" \"w\")\n                     (unspec:VQ [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n@@ -3933,7 +3952,26 @@\n   [(set_attr \"type\" \"neon_store3_one_lane<q>\")]\n )\n \n-(define_insn \"vec_load_lanesci<mode>\"\n+(define_expand \"vec_store_lanesoi<mode>\"\n+  [(set (match_operand:OI 0 \"aarch64_simd_struct_operand\" \"=Utv\")\n+\t(unspec:OI [(match_operand:OI 1 \"register_operand\" \"w\")\n+                    (unspec:VQ [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+                   UNSPEC_ST2))]\n+  \"TARGET_SIMD\"\n+{\n+  if (BYTES_BIG_ENDIAN)\n+    {\n+      rtx tmp = gen_reg_rtx (OImode);\n+      rtx mask = aarch64_reverse_mask (<MODE>mode);\n+      emit_insn (gen_aarch64_rev_reglistoi (tmp, operands[1], mask));\n+      emit_insn (gen_aarch64_simd_st2<mode> (operands[0], tmp));\n+    }\n+  else\n+    emit_insn (gen_aarch64_simd_st2<mode> (operands[0], operands[1]));\n+  DONE;\n+})\n+\n+(define_insn \"aarch64_simd_ld3<mode>\"\n   [(set (match_operand:CI 0 \"register_operand\" \"=w\")\n \t(unspec:CI [(match_operand:CI 1 \"aarch64_simd_struct_operand\" \"Utv\")\n \t\t    (unspec:VQ [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n@@ -3965,7 +4003,26 @@\n   [(set_attr \"type\" \"neon_load3_one_lane\")]\n )\n \n-(define_insn \"vec_store_lanesci<mode>\"\n+(define_expand \"vec_load_lanesci<mode>\"\n+  [(set (match_operand:CI 0 \"register_operand\" \"=w\")\n+\t(unspec:CI [(match_operand:CI 1 \"aarch64_simd_struct_operand\" \"Utv\")\n+\t\t    (unspec:VQ [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+\t\t   UNSPEC_LD3))]\n+  \"TARGET_SIMD\"\n+{\n+  if (BYTES_BIG_ENDIAN)\n+    {\n+      rtx tmp = gen_reg_rtx (CImode);\n+      rtx mask = aarch64_reverse_mask (<MODE>mode);\n+      emit_insn (gen_aarch64_simd_ld3<mode> (tmp, operands[1]));\n+      emit_insn (gen_aarch64_rev_reglistci (operands[0], tmp, mask));\n+    }\n+  else\n+    emit_insn (gen_aarch64_simd_ld3<mode> (operands[0], operands[1]));\n+  DONE;\n+})\n+\n+(define_insn \"aarch64_simd_st3<mode>\"\n   [(set (match_operand:CI 0 \"aarch64_simd_struct_operand\" \"=Utv\")\n \t(unspec:CI [(match_operand:CI 1 \"register_operand\" \"w\")\n                     (unspec:VQ [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n@@ -3986,7 +4043,26 @@\n   [(set_attr \"type\" \"neon_store3_one_lane<q>\")]\n )\n \n-(define_insn \"vec_load_lanesxi<mode>\"\n+(define_expand \"vec_store_lanesci<mode>\"\n+  [(set (match_operand:CI 0 \"aarch64_simd_struct_operand\" \"=Utv\")\n+\t(unspec:CI [(match_operand:CI 1 \"register_operand\" \"w\")\n+                    (unspec:VQ [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+                   UNSPEC_ST3))]\n+  \"TARGET_SIMD\"\n+{\n+  if (BYTES_BIG_ENDIAN)\n+    {\n+      rtx tmp = gen_reg_rtx (CImode);\n+      rtx mask = aarch64_reverse_mask (<MODE>mode);\n+      emit_insn (gen_aarch64_rev_reglistci (tmp, operands[1], mask));\n+      emit_insn (gen_aarch64_simd_st3<mode> (operands[0], tmp));\n+    }\n+  else\n+    emit_insn (gen_aarch64_simd_st3<mode> (operands[0], operands[1]));\n+  DONE;\n+})\n+\n+(define_insn \"aarch64_simd_ld4<mode>\"\n   [(set (match_operand:XI 0 \"register_operand\" \"=w\")\n \t(unspec:XI [(match_operand:XI 1 \"aarch64_simd_struct_operand\" \"Utv\")\n \t\t    (unspec:VQ [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n@@ -4018,7 +4094,26 @@\n   [(set_attr \"type\" \"neon_load4_one_lane\")]\n )\n \n-(define_insn \"vec_store_lanesxi<mode>\"\n+(define_expand \"vec_load_lanesxi<mode>\"\n+  [(set (match_operand:XI 0 \"register_operand\" \"=w\")\n+\t(unspec:XI [(match_operand:XI 1 \"aarch64_simd_struct_operand\" \"Utv\")\n+\t\t    (unspec:VQ [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+\t\t   UNSPEC_LD4))]\n+  \"TARGET_SIMD\"\n+{\n+  if (BYTES_BIG_ENDIAN)\n+    {\n+      rtx tmp = gen_reg_rtx (XImode);\n+      rtx mask = aarch64_reverse_mask (<MODE>mode);\n+      emit_insn (gen_aarch64_simd_ld4<mode> (tmp, operands[1]));\n+      emit_insn (gen_aarch64_rev_reglistxi (operands[0], tmp, mask));\n+    }\n+  else\n+    emit_insn (gen_aarch64_simd_ld4<mode> (operands[0], operands[1]));\n+  DONE;\n+})\n+\n+(define_insn \"aarch64_simd_st4<mode>\"\n   [(set (match_operand:XI 0 \"aarch64_simd_struct_operand\" \"=Utv\")\n \t(unspec:XI [(match_operand:XI 1 \"register_operand\" \"w\")\n                     (unspec:VQ [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n@@ -4039,6 +4134,50 @@\n   [(set_attr \"type\" \"neon_store4_one_lane<q>\")]\n )\n \n+(define_expand \"vec_store_lanesxi<mode>\"\n+  [(set (match_operand:XI 0 \"aarch64_simd_struct_operand\" \"=Utv\")\n+\t(unspec:XI [(match_operand:XI 1 \"register_operand\" \"w\")\n+                    (unspec:VQ [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+                   UNSPEC_ST4))]\n+  \"TARGET_SIMD\"\n+{\n+  if (BYTES_BIG_ENDIAN)\n+    {\n+      rtx tmp = gen_reg_rtx (XImode);\n+      rtx mask = aarch64_reverse_mask (<MODE>mode);\n+      emit_insn (gen_aarch64_rev_reglistxi (tmp, operands[1], mask));\n+      emit_insn (gen_aarch64_simd_st4<mode> (operands[0], tmp));\n+    }\n+  else\n+    emit_insn (gen_aarch64_simd_st4<mode> (operands[0], operands[1]));\n+  DONE;\n+})\n+\n+(define_insn_and_split \"aarch64_rev_reglist<mode>\"\n+[(set (match_operand:VSTRUCT 0 \"register_operand\" \"=&w\")\n+\t(unspec:VSTRUCT\n+\t           [(match_operand:VSTRUCT 1 \"register_operand\" \"w\")\n+\t\t    (match_operand:V16QI 2 \"register_operand\" \"w\")]\n+                   UNSPEC_REV_REGLIST))]\n+  \"TARGET_SIMD\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(const_int 0)]\n+{\n+  int i;\n+  int nregs = GET_MODE_SIZE (<MODE>mode) / UNITS_PER_VREG;\n+  for (i = 0; i < nregs; i++)\n+    {\n+      rtx op0 = gen_rtx_REG (V16QImode, REGNO (operands[0]) + i);\n+      rtx op1 = gen_rtx_REG (V16QImode, REGNO (operands[1]) + i);\n+      emit_insn (gen_aarch64_tbl1v16qi (op0, op1, operands[2]));\n+    }\n+  DONE;\n+}\n+  [(set_attr \"type\" \"neon_tbl1_q\")\n+   (set_attr \"length\" \"<insn_count>\")]\n+)\n+\n ;; Reload patterns for AdvSIMD register list operands.\n \n (define_expand \"mov<mode>\""}, {"sha": "e057c590c205874b7022aec0cbeb8f29b173b918", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/668046d17599f7596f01cfbb8ebd0f00c4531e5b/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/668046d17599f7596f01cfbb8ebd0f00c4531e5b/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=668046d17599f7596f01cfbb8ebd0f00c4531e5b", "patch": "@@ -8687,6 +8687,14 @@ aarch64_simd_attr_length_move (rtx_insn *insn)\n   return 4;\n }\n \n+/* Compute and return the length of aarch64_simd_reglist<mode>, where <mode> is\n+   one of VSTRUCT modes: OI, CI, EI, or XI.  */\n+int\n+aarch64_simd_attr_length_rglist (enum machine_mode mode)\n+{\n+  return (GET_MODE_SIZE (mode) / UNITS_PER_VREG) * 4;\n+}\n+\n /* Implement target hook TARGET_VECTOR_ALIGNMENT.  The AAPCS64 sets the maximum\n    alignment of a vector to 128 bits.  */\n static HOST_WIDE_INT\n@@ -10215,6 +10223,27 @@ aarch64_cannot_change_mode_class (machine_mode from,\n   return true;\n }\n \n+rtx\n+aarch64_reverse_mask (enum machine_mode mode)\n+{\n+  /* We have to reverse each vector because we dont have\n+     a permuted load that can reverse-load according to ABI rules.  */\n+  rtx mask;\n+  rtvec v = rtvec_alloc (16);\n+  int i, j;\n+  int nunits = GET_MODE_NUNITS (mode);\n+  int usize = GET_MODE_UNIT_SIZE (mode);\n+\n+  gcc_assert (BYTES_BIG_ENDIAN);\n+  gcc_assert (AARCH64_VALID_SIMD_QREG_MODE (mode));\n+\n+  for (i = 0; i < nunits; i++)\n+    for (j = 0; j < usize; j++)\n+      RTVEC_ELT (v, i * usize + j) = GEN_INT ((i + 1) * usize - 1 - j);\n+  mask = gen_rtx_CONST_VECTOR (V16QImode, v);\n+  return force_reg (V16QImode, mask);\n+}\n+\n /* Implement MODES_TIEABLE_P.  */\n \n bool"}, {"sha": "606ccc33eec3941715f0ed6f365d2e60551c7251", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/668046d17599f7596f01cfbb8ebd0f00c4531e5b/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/668046d17599f7596f01cfbb8ebd0f00c4531e5b/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=668046d17599f7596f01cfbb8ebd0f00c4531e5b", "patch": "@@ -276,6 +276,7 @@\n     UNSPEC_SHA256SU1    ; Used in aarch64-simd.md.\n     UNSPEC_PMULL        ; Used in aarch64-simd.md.\n     UNSPEC_PMULL2       ; Used in aarch64-simd.md.\n+    UNSPEC_REV_REGLIST  ; Used in aarch64-simd.md.\n ])\n \n ;; -------------------------------------------------------------------\n@@ -652,6 +653,8 @@\n (define_mode_attr vsi2qi [(V2SI \"v8qi\") (V4SI \"v16qi\")])\n (define_mode_attr VSI2QI [(V2SI \"V8QI\") (V4SI \"V16QI\")])\n \n+(define_mode_attr insn_count [(OI \"8\") (CI \"12\") (XI \"16\")])\n+\n ;; -------------------------------------------------------------------\n ;; Code Iterators\n ;; -------------------------------------------------------------------"}]}