{"sha": "5efd84c50326ffd904e376abc150fec01cdb06fb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWVmZDg0YzUwMzI2ZmZkOTA0ZTM3NmFiYzE1MGZlYzAxY2RiMDZmYg==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-11-22T01:57:50Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-11-22T01:57:50Z"}, "message": "target.def (conditional_register_usage): Define.\n\n\t* target.def (conditional_register_usage): Define.\n\t* reginfo.c (init_reg_sets_1): Call\n\ttargetm.conditional_register_usage.\n\t* system.h (CONDITIONAL_REGISTER_USAGE): Poison.\n\t* doc/tm.texi.in (CONDITIONAL_REGISTER_USAGE): Adjust language\n\tfor making it a hook.\n\t* doc/tm.texi: Regenerate.\n\t* config/alpha/alpha.h (CONDITIONAL_REGISTER_USAGE): Move logic...\n\t* config/alpha/alpha.c (alpha_conditional_register_usage): ...here.\n\tNew function.\n\t(TARGET_CONDITIONAL_REGISTER_USAGE): Define.\n\t* config/arc/arc.h (CONDITIONAL_REGISTER_USAGE): Move logic...\n\t* config/arc/arc.c (arc_conditional_register_usage): ...here.\n\tNew function.\n\t(TARGET_CONDITIONAL_REGISTER_USAGE): Define.\n\t* config/arm/arm.h (CONDITIONAL_REGISTER_USAGE): Move logic...\n\t* config/arm/arm.c (arm_conditional_register_usage): ...here.\n\tNew function.\n\t(TARGET_CONDITIONAL_REGISTER_USAGE): Define.\n\t* config/bfin/bfin.h (CONDITIONAL_REGISTER_USAGE): Delete.\n\t* config/bfin/bfin-protos.h (conditional_register_usage): Delete.\n\t* config/bfin/bfin.c (conditional_register_usage): Move code into...\n\t(bfin_conditional_register_usage): ...here.  New function.\n\t(TARGET_CONDITIONAL_REGISTER_USAGE): Define.\n\t* config/cris/cris.h (CONDITIONAL_REGISTER_USAGE): Delete.\n\t* config/cris/cris-protos.h (cris_conditional_register_usage): Delete.\n\t* config/cris/cris.c (cris_conditional_register_usage): Make static.\n\t(TARGET_CONDITIONAL_REGISTER_USAGE): Define.\n\t* config/fr30/fr30.h (FIXED_REGISTERS): Adjust comment.\n\t* config/frv/frv.h (CONDITIONAL_REGISTER_USAGE): Delete.\n\t* config/frv/frv-protos.h (frv_conditional_register_usage): Delete.\n\t* config/frv/frv.c (frv_conditional_register_usage): Make static.\n\t(TARGET_CONDITIONAL_REGISTER_USAGE): Define.\n\t* config/h8300/h8300.h (CONDITIONAL_REGISTER_USAGE): Move logic...\n\t* config/h8300/h8300.c (h8300_conditional_register_usage): ...here.\n\tNew function.\n\t(TARGET_CONDITIONAL_REGISTER_USAGE): Define.\n\t* config/i386/i386.h (CONDITIONAL_REGISTER_USAGE): Delete.\n\t* config/i386/i386-protos.h (ix86_conditional_register_usage): Delete.\n\t* config/i386/i386.c (ix86_conditional_register_usage): Make static.\n\t(TARGET_CONDITIONAL_REGISTER_USAGE): Define.\n\t* config/m32c/m32c.h (CONDITIONAL_REGISTER_USAGE): Delete.\n\t* config/m32c/m32c-protos.h (m32c_conditional_register_usage): Delete.\n\t* config/m32c/m32c.c (m32c_conditional_register_usage): Make static.\n\t(TARGET_CONDITIONAL_REGISTER_USAGE): Define.\n\t* config/m32r/m32r.h (CONDITIONAL_REGISTER_USAGE): Move logic...\n\t* config/m32r/m32r.c (m32r_conditional_register_usage): ...here.\n\tNew function.\n\t(TARGET_CONDITIONAL_REGISTER_USAGE): Define.\n\t* config/m68hc11/m68hc11.h (CONDITIONAL_REGISTER_USAGE): Delete.\n\t* config/m68hc11/m68hc11-protos.h (m68hc11_conditional_register_usage):\n\tDelete.\n\t* config/m68hc11/m68hc11.c (m68hc11_conditional_register_usage): Make\n\tstatic.\n\t(TARGET_CONDITIONAL_REGISTER_USAGE): Define.\n\t* config/mep/mep.h (CONDITIONAL_REGISTER_USAGE): Delete.\n\t* config/mep/mep-protos.h (mep_conditional_register_usage): Delete.\n\t* config/mep/mep.c (mep_conditional_register_usage): Make static.\n\t(TARGET_CONDITIONAL_REGISTER_USAGE): Define.\n\t* config/mips/mips.h (CONDITIONAL_REGISTER_USAGE): Delete.\n\t* config/mips/mips-protos.h (mips_conditional_register_usage): Delete.\n\t* config/mips/mips.c (mips_conditional_register_usage): Make static.\n\t(TARGET_CONDITIONAL_REGISTER_USAGE): Define.\n\t* config/mmix/mmix.h (CONDITIONAL_REGISTER_USAGE): Delete.\n\t* config/mmix/mmix-protos.h (mmix_conditional_register_usage): Delete.\n\t* config/mmix/mmix.c (mmix_conditional_register_usage): Make static.\n\t(TARGET_CONDITIONAL_REGISTER_USAGE): Define.\n\t* config/mn10300/mn10300.h (CONDITIONAL_REGISTER_USAGE): Move logic...\n\t* config/mn10300/mn10300.c (mn10300_conditional_register_usage):\n\t...here.  New function.\n\t(TARGET_CONDITIONAL_REGISTER_USAGE): Define.\n\t* config/pa/pa32-regs.h (CONDITIONAL_REGISTER_USAGE): Move logic...\n\t* config/pa/pa64-regs.h (CONDITIONAL_REGISTER_USAGE): ...with this...\n\t* config/pa/pa.c (pa_conditional_register_usage): ...here.\n\tNew function.\n\t(TARGET_CONDITIONAL_REGISTER_USAGE): Define.\n\t* config/pdp11/pdp11.h (CONDITIONAL_REGISTER_USAGE): Move logic...\n\t* config/pdp11/pdp11.c (pdp11_conditional_register_usage): ...here.\n\tNew function.\n\t(TARGET_CONDITIONAL_REGISTER_USAGE): Define.\n\t* config/rs6000/rs6000.h (CONDITIONAL_REGISTER_USAGE): Delete.\n\t* config/rs6000/rs6000-protos.h (rs6000_conditional_register_usage):\n\tDelete.\n\t* config/rs6000/rs6000.c (rs6000_conditional_register_usage): Make\n\tstatic.\n\t(TARGET_CONDITIONAL_REGISTER_USAGE): Define.\n\t* config/rx/rx.h (CONDITIONAL_REGISTER_USAGE): Delete.\n\t* config/rx/rx-protos.h (rx_conditional_register_usage): Delete.\n\t* config/rx/rx.c (rx_conditional_register_usage): Make static.\n\t(TARGET_CONDITIONAL_REGISTER_USAGE): Define.\n\t* config/s390/s390.h (CONDITIONAL_REGISTER_USAGE): Delete.\n\t* config/s390/s390-protos.h (s390_conditional_register_usage): Delete.\n\t* config/s390/s390.c (s390_conditional_register_usage): Make static.\n\t(TARGET_CONDITIONAL_REGISTER_USAGE): Define.\n\t* config/score/score.h (CONDITIONAL_REGISTER_USAGE): Move logic...\n\t* config/score/score.c (score_conditional_register_usage): ...here.\n\tNew function.\n\t(TARGET_CONDITIONAL_REGISTER_USAGE): Define.\n\t* config/sh/sh.h (CONDITIONAL_REGISTER_USAGE): Move logic...\n\t* config/sh/sh.c (sh_conditional_register_usage): ...here.\n\tNew function.\n\t(TARGET_CONDITIONAL_REGISTER_USAGE): Define.\n\t* config/sparc/sparc.h (CONDITIONAL_REGISTER_USAGE): Move logic...\n\t* config/sparc/sparc.c (sparc_conditional_register_usage): ...here.\n\tNew function.\n\t(TARGET_CONDITIONAL_REGISTER_USAGE): Define.\n\t* config/spu/spu.h (CONDITIONAL_REGISTER_USAGE): Delete.\n\t* config/spu/spu-protos.h (spu_conditional_register_usage): Delete.\n\t* config/spu/spu.c (spu_conditional_register_usage): Make static.\n\t(TARGET_CONDITIONAL_REGISTER_USAGE): Define.\n\t* config/v850/v850.h (CONDITIONAL_REGISTER_USAGE): Move logic...\n\t* config/v850/v850.c (v850_conditional_register_usage): ...here.\n\tNew function.\n\t(TARGET_CONDITIONAL_REGISTER_USAGE): Define.\n\nFrom-SVN: r167020", "tree": {"sha": "3a7c690a1660fef1696c27945d762dcb5b0ee8b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a7c690a1660fef1696c27945d762dcb5b0ee8b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5efd84c50326ffd904e376abc150fec01cdb06fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5efd84c50326ffd904e376abc150fec01cdb06fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5efd84c50326ffd904e376abc150fec01cdb06fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5efd84c50326ffd904e376abc150fec01cdb06fb/comments", "author": null, "committer": null, "parents": [{"sha": "87921b81c0b080370a1f3a9151fef5029852e374", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87921b81c0b080370a1f3a9151fef5029852e374", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87921b81c0b080370a1f3a9151fef5029852e374"}], "stats": {"total": 1168, "additions": 647, "deletions": 521}, "files": [{"sha": "aff4dba15bfa947b5fa925634050e28a5a5b24ab", "filename": "gcc/ChangeLog", "status": "modified", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5efd84c50326ffd904e376abc150fec01cdb06fb", "patch": "@@ -1,3 +1,120 @@\n+2010-11-21  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* target.def (conditional_register_usage): Define.\n+\t* reginfo.c (init_reg_sets_1): Call\n+\ttargetm.conditional_register_usage.\n+\t* system.h (CONDITIONAL_REGISTER_USAGE): Poison.\n+\t* doc/tm.texi.in (CONDITIONAL_REGISTER_USAGE): Adjust language\n+\tfor making it a hook.\n+\t* doc/tm.texi: Regenerate.\n+\t* config/alpha/alpha.h (CONDITIONAL_REGISTER_USAGE): Move logic...\n+\t* config/alpha/alpha.c (alpha_conditional_register_usage): ...here.\n+\tNew function.\n+\t(TARGET_CONDITIONAL_REGISTER_USAGE): Define.\n+\t* config/arc/arc.h (CONDITIONAL_REGISTER_USAGE): Move logic...\n+\t* config/arc/arc.c (arc_conditional_register_usage): ...here.\n+\tNew function.\n+\t(TARGET_CONDITIONAL_REGISTER_USAGE): Define.\n+\t* config/arm/arm.h (CONDITIONAL_REGISTER_USAGE): Move logic...\n+\t* config/arm/arm.c (arm_conditional_register_usage): ...here.\n+\tNew function.\n+\t(TARGET_CONDITIONAL_REGISTER_USAGE): Define.\n+\t* config/bfin/bfin.h (CONDITIONAL_REGISTER_USAGE): Delete.\n+\t* config/bfin/bfin-protos.h (conditional_register_usage): Delete.\n+\t* config/bfin/bfin.c (conditional_register_usage): Move code into...\n+\t(bfin_conditional_register_usage): ...here.  New function.\n+\t(TARGET_CONDITIONAL_REGISTER_USAGE): Define.\n+\t* config/cris/cris.h (CONDITIONAL_REGISTER_USAGE): Delete.\n+\t* config/cris/cris-protos.h (cris_conditional_register_usage): Delete.\n+\t* config/cris/cris.c (cris_conditional_register_usage): Make static.\n+\t(TARGET_CONDITIONAL_REGISTER_USAGE): Define.\n+\t* config/fr30/fr30.h (FIXED_REGISTERS): Adjust comment.\n+\t* config/frv/frv.h (CONDITIONAL_REGISTER_USAGE): Delete.\n+\t* config/frv/frv-protos.h (frv_conditional_register_usage): Delete.\n+\t* config/frv/frv.c (frv_conditional_register_usage): Make static.\n+\t(TARGET_CONDITIONAL_REGISTER_USAGE): Define.\n+\t* config/h8300/h8300.h (CONDITIONAL_REGISTER_USAGE): Move logic...\n+\t* config/h8300/h8300.c (h8300_conditional_register_usage): ...here.\n+\tNew function.\n+\t(TARGET_CONDITIONAL_REGISTER_USAGE): Define.\n+\t* config/i386/i386.h (CONDITIONAL_REGISTER_USAGE): Delete.\n+\t* config/i386/i386-protos.h (ix86_conditional_register_usage): Delete.\n+\t* config/i386/i386.c (ix86_conditional_register_usage): Make static.\n+\t(TARGET_CONDITIONAL_REGISTER_USAGE): Define.\n+\t* config/m32c/m32c.h (CONDITIONAL_REGISTER_USAGE): Delete.\n+\t* config/m32c/m32c-protos.h (m32c_conditional_register_usage): Delete.\n+\t* config/m32c/m32c.c (m32c_conditional_register_usage): Make static.\n+\t(TARGET_CONDITIONAL_REGISTER_USAGE): Define.\n+\t* config/m32r/m32r.h (CONDITIONAL_REGISTER_USAGE): Move logic...\n+\t* config/m32r/m32r.c (m32r_conditional_register_usage): ...here.\n+\tNew function.\n+\t(TARGET_CONDITIONAL_REGISTER_USAGE): Define.\n+\t* config/m68hc11/m68hc11.h (CONDITIONAL_REGISTER_USAGE): Delete.\n+\t* config/m68hc11/m68hc11-protos.h (m68hc11_conditional_register_usage):\n+\tDelete.\n+\t* config/m68hc11/m68hc11.c (m68hc11_conditional_register_usage): Make\n+\tstatic.\n+\t(TARGET_CONDITIONAL_REGISTER_USAGE): Define.\n+\t* config/mep/mep.h (CONDITIONAL_REGISTER_USAGE): Delete.\n+\t* config/mep/mep-protos.h (mep_conditional_register_usage): Delete.\n+\t* config/mep/mep.c (mep_conditional_register_usage): Make static.\n+\t(TARGET_CONDITIONAL_REGISTER_USAGE): Define.\n+\t* config/mips/mips.h (CONDITIONAL_REGISTER_USAGE): Delete.\n+\t* config/mips/mips-protos.h (mips_conditional_register_usage): Delete.\n+\t* config/mips/mips.c (mips_conditional_register_usage): Make static.\n+\t(TARGET_CONDITIONAL_REGISTER_USAGE): Define.\n+\t* config/mmix/mmix.h (CONDITIONAL_REGISTER_USAGE): Delete.\n+\t* config/mmix/mmix-protos.h (mmix_conditional_register_usage): Delete.\n+\t* config/mmix/mmix.c (mmix_conditional_register_usage): Make static.\n+\t(TARGET_CONDITIONAL_REGISTER_USAGE): Define.\n+\t* config/mn10300/mn10300.h (CONDITIONAL_REGISTER_USAGE): Move logic...\n+\t* config/mn10300/mn10300.c (mn10300_conditional_register_usage):\n+\t...here.  New function.\n+\t(TARGET_CONDITIONAL_REGISTER_USAGE): Define.\n+\t* config/pa/pa32-regs.h (CONDITIONAL_REGISTER_USAGE): Move logic...\n+\t* config/pa/pa64-regs.h (CONDITIONAL_REGISTER_USAGE): ...with this...\n+\t* config/pa/pa.c (pa_conditional_register_usage): ...here.\n+\tNew function.\n+\t(TARGET_CONDITIONAL_REGISTER_USAGE): Define.\n+\t* config/pdp11/pdp11.h (CONDITIONAL_REGISTER_USAGE): Move logic...\n+\t* config/pdp11/pdp11.c (pdp11_conditional_register_usage): ...here.\n+\tNew function.\n+\t(TARGET_CONDITIONAL_REGISTER_USAGE): Define.\n+\t* config/rs6000/rs6000.h (CONDITIONAL_REGISTER_USAGE): Delete.\n+\t* config/rs6000/rs6000-protos.h (rs6000_conditional_register_usage):\n+\tDelete.\n+\t* config/rs6000/rs6000.c (rs6000_conditional_register_usage): Make\n+\tstatic.\n+\t(TARGET_CONDITIONAL_REGISTER_USAGE): Define.\n+\t* config/rx/rx.h (CONDITIONAL_REGISTER_USAGE): Delete.\n+\t* config/rx/rx-protos.h (rx_conditional_register_usage): Delete.\n+\t* config/rx/rx.c (rx_conditional_register_usage): Make static.\n+\t(TARGET_CONDITIONAL_REGISTER_USAGE): Define.\n+\t* config/s390/s390.h (CONDITIONAL_REGISTER_USAGE): Delete.\n+\t* config/s390/s390-protos.h (s390_conditional_register_usage): Delete.\n+\t* config/s390/s390.c (s390_conditional_register_usage): Make static.\n+\t(TARGET_CONDITIONAL_REGISTER_USAGE): Define.\n+\t* config/score/score.h (CONDITIONAL_REGISTER_USAGE): Move logic...\n+\t* config/score/score.c (score_conditional_register_usage): ...here.\n+\tNew function.\n+\t(TARGET_CONDITIONAL_REGISTER_USAGE): Define.\n+\t* config/sh/sh.h (CONDITIONAL_REGISTER_USAGE): Move logic...\n+\t* config/sh/sh.c (sh_conditional_register_usage): ...here.\n+\tNew function.\n+\t(TARGET_CONDITIONAL_REGISTER_USAGE): Define.\n+\t* config/sparc/sparc.h (CONDITIONAL_REGISTER_USAGE): Move logic...\n+\t* config/sparc/sparc.c (sparc_conditional_register_usage): ...here.\n+\tNew function.\n+\t(TARGET_CONDITIONAL_REGISTER_USAGE): Define.\n+\t* config/spu/spu.h (CONDITIONAL_REGISTER_USAGE): Delete.\n+\t* config/spu/spu-protos.h (spu_conditional_register_usage): Delete.\n+\t* config/spu/spu.c (spu_conditional_register_usage): Make static.\n+\t(TARGET_CONDITIONAL_REGISTER_USAGE): Define.\n+\t* config/v850/v850.h (CONDITIONAL_REGISTER_USAGE): Move logic...\n+\t* config/v850/v850.c (v850_conditional_register_usage): ...here.\n+\tNew function.\n+\t(TARGET_CONDITIONAL_REGISTER_USAGE): Define.\n+\n 2010-11-21  Jan Hubicka  <jh@suse.cz>\n \t    Dominique d'Humieres <dominiq@lps.ens.ft>\n "}, {"sha": "eb35367f9f63b8bffda0fcd339c8eed844f73421", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=5efd84c50326ffd904e376abc150fec01cdb06fb", "patch": "@@ -10974,6 +10974,17 @@ alpha_init_libfuncs (void)\n     }\n }\n \n+/* On the Alpha, we use this to disable the floating-point registers\n+   when they don't exist.  */\n+\n+static void\n+alpha_conditional_register_usage (void)\n+{\n+  int i;\n+  if (! TARGET_FPREGS)\n+    for (i = 32; i < 63; i++)\n+      fixed_regs[i] = call_used_regs[i] = 1;\n+}\n \f\n /* Initialize the GCC target structure.  */\n #if TARGET_ABI_OPEN_VMS\n@@ -11158,6 +11169,9 @@ alpha_init_libfuncs (void)\n #undef TARGET_LEGITIMATE_ADDRESS_P\n #define TARGET_LEGITIMATE_ADDRESS_P alpha_legitimate_address_p\n \n+#undef TARGET_CONDITIONAL_REGISTER_USAGE\n+#define TARGET_CONDITIONAL_REGISTER_USAGE alpha_conditional_register_usage\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n \f"}, {"sha": "409915abc719dd62540ef728c38c8048ce3563da", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=5efd84c50326ffd904e376abc150fec01cdb06fb", "patch": "@@ -204,19 +204,6 @@ extern enum alpha_fp_trap_mode alpha_fptm;\n   {\"cpu\", \"%{!mcpu=*:-mcpu=%(VALUE)}\" }, \\\n   {\"tune\", \"%{!mtune=*:-mtune=%(VALUE)}\" }\n \n-\n-/* Define this macro to change register usage conditional on target flags.\n-\n-   On the Alpha, we use this to disable the floating-point registers when\n-   they don't exist.  */\n-\n-#define CONDITIONAL_REGISTER_USAGE\t\t\\\n-{\t\t\t\t\t\t\\\n-  int i;\t\t\t\t\t\\\n-  if (! TARGET_FPREGS)\t\t\t\t\\\n-    for (i = 32; i < 63; i++)\t\t\t\\\n-      fixed_regs[i] = call_used_regs[i] = 1;\t\\\n-}\n \f\n /* target machine storage layout */\n "}, {"sha": "c13eb717170e8a83be04e4a3b3fd5ace5d10bf14", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=5efd84c50326ffd904e376abc150fec01cdb06fb", "patch": "@@ -101,6 +101,7 @@ static void arc_function_arg_advance (CUMULATIVE_ARGS *, enum machine_mode,\n static unsigned int arc_function_arg_boundary (enum machine_mode, const_tree);\n static void arc_trampoline_init (rtx, tree, rtx);\n static void arc_option_override (void);\n+static void arc_conditional_register_usage (void);\n \n \f\n /* ARC specific attributs.  */\n@@ -171,6 +172,9 @@ static const struct attribute_spec arc_attribute_table[] =\n #undef TARGET_TRAMPOLINE_INIT\n #define TARGET_TRAMPOLINE_INIT arc_trampoline_init\n \n+#undef TARGET_CONDITIONAL_REGISTER_USAGE\n+#define TARGET_CONDITIONAL_REGISTER_USAGE arc_conditional_register_usage\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Implement TARGET_HANDLE_OPTION.  */\n@@ -2473,3 +2477,16 @@ arc_trampoline_init (rtx m_tramp, tree fndecl, rtx chain_value)\n \n   emit_insn (gen_flush_icache (m_tramp));\n }\n+\n+/* Worker function for TARGET_CONDITIONAL_REGISTER_USAGE.  */\n+\n+static void\n+arc_conditional_register_usage (void)\n+{\n+  if (PIC_OFFSET_TABLE_REGNUM != INVALID_REGNUM)\n+    {\n+      fixed_regs[PIC_OFFSET_TABLE_REGNUM] = 1;\n+      call_used_regs[PIC_OFFSET_TABLE_REGNUM] = 1;\n+    }\n+}\n+"}, {"sha": "9771678e689b10d601d02624d6587b76cd82c51b", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=5efd84c50326ffd904e376abc150fec01cdb06fb", "patch": "@@ -260,16 +260,6 @@ if (GET_MODE_CLASS (MODE) == MODE_INT\t\t\\\n   48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61,\t\t\\\n   27, 28, 29, 30 }\n \n-/* Macro to conditionally modify fixed_regs/call_used_regs.  */\n-#define CONDITIONAL_REGISTER_USAGE\t\t\t\\\n-do {\t\t\t\t\t\t\t\\\n-  if (PIC_OFFSET_TABLE_REGNUM != INVALID_REGNUM)\t\\\n-    {\t\t\t\t\t\t\t\\\n-      fixed_regs[PIC_OFFSET_TABLE_REGNUM] = 1;\t\t\\\n-      call_used_regs[PIC_OFFSET_TABLE_REGNUM] = 1;\t\\\n-    }\t\t\t\t\t\t\t\\\n-} while (0)\n-\n /* Return number of consecutive hard regs needed starting at reg REGNO\n    to hold something of mode MODE.\n    This is ordinarily the length in words of a value of mode MODE"}, {"sha": "b195dbdfa5e52a07f3a20385c56f2ea8ba052bd5", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=5efd84c50326ffd904e376abc150fec01cdb06fb", "patch": "@@ -248,6 +248,7 @@ static bool arm_builtin_support_vector_misalignment (enum machine_mode mode,\n \t\t\t\t\t\t     const_tree type,\n \t\t\t\t\t\t     int misalignment,\n \t\t\t\t\t\t     bool is_packed);\n+static void arm_conditional_register_usage (void);\n \n \f\n /* Table of machine attributes.  */\n@@ -571,6 +572,9 @@ static const struct default_options arm_option_optimization_table[] =\n #undef TARGET_CAN_ELIMINATE\n #define TARGET_CAN_ELIMINATE arm_can_eliminate\n \n+#undef TARGET_CONDITIONAL_REGISTER_USAGE\n+#define TARGET_CONDITIONAL_REGISTER_USAGE arm_conditional_register_usage\n+\n #undef TARGET_CLASS_LIKELY_SPILLED_P\n #define TARGET_CLASS_LIKELY_SPILLED_P arm_class_likely_spilled_p\n \n@@ -23276,4 +23280,106 @@ arm_builtin_support_vector_misalignment (enum machine_mode mode,\n \t\t\t\t\t\t      is_packed);\n }\n \n+static void\n+arm_conditional_register_usage (void)\n+{\n+  int regno;\n+\n+  if (TARGET_SOFT_FLOAT || TARGET_THUMB1 || !TARGET_FPA)\n+    {\n+      for (regno = FIRST_FPA_REGNUM;\n+\t   regno <= LAST_FPA_REGNUM; ++regno)\n+\tfixed_regs[regno] = call_used_regs[regno] = 1;\n+    }\n+\n+  if (TARGET_THUMB1 && optimize_size)\n+    {\n+      /* When optimizing for size on Thumb-1, it's better not\n+        to use the HI regs, because of the overhead of\n+        stacking them.  */\n+      for (regno = FIRST_HI_REGNUM;\n+\t   regno <= LAST_HI_REGNUM; ++regno)\n+\tfixed_regs[regno] = call_used_regs[regno] = 1;\n+    }\n+\n+  /* The link register can be clobbered by any branch insn,\n+     but we have no way to track that at present, so mark\n+     it as unavailable.  */\n+  if (TARGET_THUMB1)\n+    fixed_regs[LR_REGNUM] = call_used_regs[LR_REGNUM] = 1;\n+\n+  if (TARGET_32BIT && TARGET_HARD_FLOAT)\n+    {\n+      if (TARGET_MAVERICK)\n+\t{\n+\t  for (regno = FIRST_FPA_REGNUM;\n+\t       regno <= LAST_FPA_REGNUM; ++ regno)\n+\t    fixed_regs[regno] = call_used_regs[regno] = 1;\n+\t  for (regno = FIRST_CIRRUS_FP_REGNUM;\n+\t       regno <= LAST_CIRRUS_FP_REGNUM; ++ regno)\n+\t    {\n+\t      fixed_regs[regno] = 0;\n+\t      call_used_regs[regno] = regno < FIRST_CIRRUS_FP_REGNUM + 4;\n+\t    }\n+\t}\n+      if (TARGET_VFP)\n+\t{\n+\t  /* VFPv3 registers are disabled when earlier VFP\n+\t     versions are selected due to the definition of\n+\t     LAST_VFP_REGNUM.  */\n+\t  for (regno = FIRST_VFP_REGNUM;\n+\t       regno <= LAST_VFP_REGNUM; ++ regno)\n+\t    {\n+\t      fixed_regs[regno] = 0;\n+\t      call_used_regs[regno] = regno < FIRST_VFP_REGNUM + 16\n+\t      \t|| regno >= FIRST_VFP_REGNUM + 32;\n+\t    }\n+\t}\n+    }\n+\n+  if (TARGET_REALLY_IWMMXT)\n+    {\n+      regno = FIRST_IWMMXT_GR_REGNUM;\n+      /* The 2002/10/09 revision of the XScale ABI has wCG0\n+         and wCG1 as call-preserved registers.  The 2002/11/21\n+         revision changed this so that all wCG registers are\n+         scratch registers.  */\n+      for (regno = FIRST_IWMMXT_GR_REGNUM;\n+\t   regno <= LAST_IWMMXT_GR_REGNUM; ++ regno)\n+\tfixed_regs[regno] = 0;\n+      /* The XScale ABI has wR0 - wR9 as scratch registers,\n+\t the rest as call-preserved registers.  */\n+      for (regno = FIRST_IWMMXT_REGNUM;\n+\t   regno <= LAST_IWMMXT_REGNUM; ++ regno)\n+\t{\n+\t  fixed_regs[regno] = 0;\n+\t  call_used_regs[regno] = regno < FIRST_IWMMXT_REGNUM + 10;\n+\t}\n+    }\n+\n+  if ((unsigned) PIC_OFFSET_TABLE_REGNUM != INVALID_REGNUM)\n+    {\n+      fixed_regs[PIC_OFFSET_TABLE_REGNUM] = 1;\n+      call_used_regs[PIC_OFFSET_TABLE_REGNUM] = 1;\n+    }\n+  else if (TARGET_APCS_STACK)\n+    {\n+      fixed_regs[10]     = 1;\n+      call_used_regs[10] = 1;\n+    }\n+  /* -mcaller-super-interworking reserves r11 for calls to\n+     _interwork_r11_call_via_rN().  Making the register global\n+     is an easy way of ensuring that it remains valid for all\n+     calls.  */\n+  if (TARGET_APCS_FRAME || TARGET_CALLER_INTERWORKING\n+      || TARGET_TPCS_FRAME || TARGET_TPCS_LEAF_FRAME)\n+    {\n+      fixed_regs[ARM_HARD_FRAME_POINTER_REGNUM] = 1;\n+      call_used_regs[ARM_HARD_FRAME_POINTER_REGNUM] = 1;\n+      if (TARGET_CALLER_INTERWORKING)\n+\tglobal_regs[ARM_HARD_FRAME_POINTER_REGNUM] = 1;\n+    }\n+  SUBTARGET_CONDITIONAL_REGISTER_USAGE\n+}\n+\n #include \"gt-arm.h\""}, {"sha": "9951553e419d071ca56f585481987f5a497e127b", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 1, "deletions": 102, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=5efd84c50326ffd904e376abc150fec01cdb06fb", "patch": "@@ -698,7 +698,7 @@ extern int arm_structure_size_boundary;\n \t\t\telimination code won't get rid of sfp.  It tracks\n \t\t\tfp exactly at all times.\n \n-   *: See CONDITIONAL_REGISTER_USAGE  */\n+   *: See TARGET_CONDITIONAL_REGISTER_USAGE  */\n \n /*\n   \tmvf0\t\tCirrus floating point result\n@@ -790,107 +790,6 @@ extern int arm_structure_size_boundary;\n #define SUBTARGET_CONDITIONAL_REGISTER_USAGE\n #endif\n \n-#define CONDITIONAL_REGISTER_USAGE\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\\\n-  int regno;\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\\\n-  if (TARGET_SOFT_FLOAT || TARGET_THUMB1 || !TARGET_FPA)\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      for (regno = FIRST_FPA_REGNUM;\t\t\t\t\\\n-\t   regno <= LAST_FPA_REGNUM; ++regno)\t\t\t\\\n-\tfixed_regs[regno] = call_used_regs[regno] = 1;\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\\\n-  if (TARGET_THUMB1 && optimize_size)\t\t\t\t\\\n-    {                                                           \\\n-      /* When optimizing for size on Thumb-1, it's better not\t\\\n-        to use the HI regs, because of the overhead of\t\t\\\n-        stacking them.  */                                      \\\n-      for (regno = FIRST_HI_REGNUM;\t\t\t\t\\\n-\t   regno <= LAST_HI_REGNUM; ++regno)\t\t\t\\\n-\tfixed_regs[regno] = call_used_regs[regno] = 1;\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\\\n-  /* The link register can be clobbered by any branch insn,\t\\\n-     but we have no way to track that at present, so mark\t\\\n-     it as unavailable.  */\t\t\t\t\t\\\n-  if (TARGET_THUMB1)\t\t\t\t\t\t\\\n-    fixed_regs[LR_REGNUM] = call_used_regs[LR_REGNUM] = 1;\t\\\n-\t\t\t\t\t\t\t\t\\\n-  if (TARGET_32BIT && TARGET_HARD_FLOAT)\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      if (TARGET_MAVERICK)\t\t\t\t\t\\\n-\t{\t\t\t\t\t\t\t\\\n-\t  for (regno = FIRST_FPA_REGNUM;\t\t\t\\\n-\t       regno <= LAST_FPA_REGNUM; ++ regno)\t\t\\\n-\t    fixed_regs[regno] = call_used_regs[regno] = 1;\t\\\n-\t  for (regno = FIRST_CIRRUS_FP_REGNUM;\t\t\t\\\n-\t       regno <= LAST_CIRRUS_FP_REGNUM; ++ regno)\t\\\n-\t    {\t\t\t\t\t\t\t\\\n-\t      fixed_regs[regno] = 0;\t\t\t\t\\\n-\t      call_used_regs[regno] = regno < FIRST_CIRRUS_FP_REGNUM + 4; \\\n-\t    }\t\t\t\t\t\t\t\\\n-\t}\t\t\t\t\t\t\t\\\n-      if (TARGET_VFP)\t\t\t\t\t\t\\\n-\t{\t\t\t\t\t\t\t\\\n-\t  /* VFPv3 registers are disabled when earlier VFP\t\\\n-\t     versions are selected due to the definition of\t\\\n-\t     LAST_VFP_REGNUM.  */\t\t\t\t\\\n-\t  for (regno = FIRST_VFP_REGNUM;\t\t\t\\\n-\t       regno <= LAST_VFP_REGNUM; ++ regno)\t\t\\\n-\t    {\t\t\t\t\t\t\t\\\n-\t      fixed_regs[regno] = 0;\t\t\t\t\\\n-\t      call_used_regs[regno] = regno < FIRST_VFP_REGNUM + 16 \\\n-\t      \t|| regno >= FIRST_VFP_REGNUM + 32;\t\t\\\n-\t    }\t\t\t\t\t\t\t\\\n-\t}\t\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\\\n-  if (TARGET_REALLY_IWMMXT)\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      regno = FIRST_IWMMXT_GR_REGNUM;\t\t\t\t\\\n-      /* The 2002/10/09 revision of the XScale ABI has wCG0     \\\n-         and wCG1 as call-preserved registers.  The 2002/11/21  \\\n-         revision changed this so that all wCG registers are    \\\n-         scratch registers.  */\t\t\t\t\t\\\n-      for (regno = FIRST_IWMMXT_GR_REGNUM;\t\t\t\\\n-\t   regno <= LAST_IWMMXT_GR_REGNUM; ++ regno)\t\t\\\n-\tfixed_regs[regno] = 0;\t\t\t\t\t\\\n-      /* The XScale ABI has wR0 - wR9 as scratch registers,     \\\n-\t the rest as call-preserved registers.  */\t\t\\\n-      for (regno = FIRST_IWMMXT_REGNUM;\t\t\t\t\\\n-\t   regno <= LAST_IWMMXT_REGNUM; ++ regno)\t\t\\\n-\t{\t\t\t\t\t\t\t\\\n-\t  fixed_regs[regno] = 0;\t\t\t\t\\\n-\t  call_used_regs[regno] = regno < FIRST_IWMMXT_REGNUM + 10; \\\n-\t}\t\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\\\n-  if ((unsigned) PIC_OFFSET_TABLE_REGNUM != INVALID_REGNUM)\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      fixed_regs[PIC_OFFSET_TABLE_REGNUM] = 1;\t\t\t\\\n-      call_used_regs[PIC_OFFSET_TABLE_REGNUM] = 1;\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-  else if (TARGET_APCS_STACK)\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      fixed_regs[10]     = 1;\t\t\t\t\t\\\n-      call_used_regs[10] = 1;\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-  /* -mcaller-super-interworking reserves r11 for calls to\t\\\n-     _interwork_r11_call_via_rN().  Making the register global\t\\\n-     is an easy way of ensuring that it remains valid for all\t\\\n-     calls.  */\t\t\t\t\t\t\t\\\n-  if (TARGET_APCS_FRAME || TARGET_CALLER_INTERWORKING\t\t\\\n-      || TARGET_TPCS_FRAME || TARGET_TPCS_LEAF_FRAME)\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      fixed_regs[ARM_HARD_FRAME_POINTER_REGNUM] = 1;\t\t\\\n-      call_used_regs[ARM_HARD_FRAME_POINTER_REGNUM] = 1;\t\\\n-      if (TARGET_CALLER_INTERWORKING)\t\t\t\t\\\n-\tglobal_regs[ARM_HARD_FRAME_POINTER_REGNUM] = 1;\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-  SUBTARGET_CONDITIONAL_REGISTER_USAGE\t\t\t\t\\\n-}\n-\n /* These are a couple of extensions to the formats accepted\n    by asm_fprintf:\n      %@ prints out ASM_COMMENT_START"}, {"sha": "1e85e16ffea75bf48ddf3ecc9532a3b19166860f", "filename": "gcc/config/bfin/bfin-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fbfin%2Fbfin-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fbfin%2Fbfin-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin-protos.h?ref=5efd84c50326ffd904e376abc150fec01cdb06fb", "patch": "@@ -87,7 +87,6 @@ extern bool bfin_longcall_p (rtx, int);\n extern bool bfin_dsp_memref_p (rtx);\n extern bool bfin_expand_movmem (rtx, rtx, rtx, rtx);\n \n-extern void conditional_register_usage (void);\n extern int bfin_register_move_cost (enum machine_mode, enum reg_class,\n \t\t\t\t    enum reg_class);\n extern int bfin_memory_move_cost (enum machine_mode, enum reg_class, int in);"}, {"sha": "0abb4ebdd0493f71762c37d4ff56a7b60ab04505", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=5efd84c50326ffd904e376abc150fec01cdb06fb", "patch": "@@ -371,17 +371,6 @@ output_file_start (void)\n   max_arg_registers = i;\t/* how many arg reg used  */\n }\n \n-/* Called early in the compilation to conditionally modify\n-   fixed_regs/call_used_regs.  */\n-\n-void \n-conditional_register_usage (void)\n-{\n-  /* initialize condition code flag register rtx */\n-  bfin_cc_rtx = gen_rtx_REG (BImode, REG_CC);\n-  bfin_rets_rtx = gen_rtx_REG (Pmode, REG_RETS);\n-}\n-\n /* Examine machine-dependent attributes of function type FUNTYPE and return its\n    type.  See the definition of E_FUNKIND.  */\n \n@@ -6589,6 +6578,21 @@ bfin_expand_builtin (tree exp, rtx target ATTRIBUTE_UNUSED,\n \n   gcc_unreachable ();\n }\n+\n+static void\n+bfin_conditional_register_usage (void)\n+{\n+  /* initialize condition code flag register rtx */\n+  bfin_cc_rtx = gen_rtx_REG (BImode, REG_CC);\n+  bfin_rets_rtx = gen_rtx_REG (Pmode, REG_RETS);\n+  if (TARGET_FDPIC)\n+    call_used_regs[FDPIC_REGNO] = 1;\n+  if (!TARGET_FDPIC && flag_pic)\n+    {\n+      fixed_regs[PIC_OFFSET_TABLE_REGNUM] = 1;\n+      call_used_regs[PIC_OFFSET_TABLE_REGNUM] = 1;\n+    }\n+}\n \f\n #undef TARGET_INIT_BUILTINS\n #define TARGET_INIT_BUILTINS bfin_init_builtins\n@@ -6691,6 +6695,9 @@ bfin_expand_builtin (tree exp, rtx target ATTRIBUTE_UNUSED,\n #undef TARGET_CAN_ELIMINATE\n #define TARGET_CAN_ELIMINATE bfin_can_eliminate\n \n+#undef TARGET_CONDITIONAL_REGISTER_USAGE\n+#define TARGET_CONDITIONAL_REGISTER_USAGE bfin_conditional_register_usage\n+\n #undef TARGET_ASM_TRAMPOLINE_TEMPLATE\n #define TARGET_ASM_TRAMPOLINE_TEMPLATE bfin_asm_trampoline_template\n #undef TARGET_TRAMPOLINE_INIT"}, {"sha": "88d15fea63f8c694468f01648c854b5d413da24c", "filename": "gcc/config/bfin/bfin.h", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fbfin%2Fbfin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fbfin%2Fbfin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.h?ref=5efd84c50326ffd904e376abc150fec01cdb06fb", "patch": "@@ -498,19 +498,6 @@ extern const char *bfin_library_id_string;\n   REG_LT0, REG_LT1, REG_LC0, REG_LC1, REG_LB0, REG_LB1\t\t  \\\n }\n \n-/* Macro to conditionally modify fixed_regs/call_used_regs.  */\n-#define CONDITIONAL_REGISTER_USAGE\t\t\t\\\n-  {\t\t\t\t\t\t\t\\\n-    conditional_register_usage();                       \\\n-    if (TARGET_FDPIC)\t\t\t\t\t\\\n-      call_used_regs[FDPIC_REGNO] = 1;\t\t\t\\\n-    if (!TARGET_FDPIC && flag_pic)\t\t\t\\\n-      {\t\t\t\t\t\t\t\\\n-\tfixed_regs[PIC_OFFSET_TABLE_REGNUM] = 1;\t\\\n-\tcall_used_regs[PIC_OFFSET_TABLE_REGNUM] = 1;\t\\\n-      }\t\t\t\t\t\t\t\\\n-  }\n-\n /* Define the classes of registers for register constraints in the\n    machine description.  Also define ranges of constants.\n "}, {"sha": "9718cf9a9bd421b2992312f91c51fcbb33960d54", "filename": "gcc/config/cris/cris-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fcris%2Fcris-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fcris%2Fcris-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris-protos.h?ref=5efd84c50326ffd904e376abc150fec01cdb06fb", "patch": "@@ -25,7 +25,6 @@ along with GCC; see the file COPYING3.  If not see\n #define STDIO_INCLUDED\n #endif\n \n-extern void cris_conditional_register_usage (void);\n extern bool cris_simple_epilogue (void);\n #ifdef RTX_CODE\n extern const char *cris_op_str (rtx);"}, {"sha": "49213b6334c99832f266eb970cdb05de52fa109e", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=5efd84c50326ffd904e376abc150fec01cdb06fb", "patch": "@@ -113,6 +113,8 @@ static void cris_print_operand_address (FILE *, rtx);\n \n static bool cris_print_operand_punct_valid_p (unsigned char code);\n \n+static void cris_conditional_register_usage (void);\n+\n static void cris_asm_output_mi_thunk\n   (FILE *, tree, HOST_WIDE_INT, HOST_WIDE_INT, tree);\n \n@@ -187,6 +189,9 @@ static const struct default_options cris_option_optimization_table[] =\n #undef TARGET_PRINT_OPERAND_PUNCT_VALID_P\n #define TARGET_PRINT_OPERAND_PUNCT_VALID_P cris_print_operand_punct_valid_p\n \n+#undef TARGET_CONDITIONAL_REGISTER_USAGE\n+#define TARGET_CONDITIONAL_REGISTER_USAGE cris_conditional_register_usage\n+\n #undef TARGET_ASM_OUTPUT_MI_THUNK\n #define TARGET_ASM_OUTPUT_MI_THUNK cris_asm_output_mi_thunk\n #undef TARGET_ASM_CAN_OUTPUT_MI_THUNK\n@@ -445,9 +450,9 @@ cris_store_multiple_op_p (rtx op)\n   return true;\n }\n \n-/* The CONDITIONAL_REGISTER_USAGE worker.  */\n+/* The TARGET_CONDITIONAL_REGISTER_USAGE worker.  */\n \n-void\n+static void\n cris_conditional_register_usage (void)\n {\n   /* FIXME: This isn't nice.  We should be able to use that register for"}, {"sha": "51c1a7a06b3e9f47a0d8c227d2d39c9539e4239c", "filename": "gcc/config/cris/cris.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fcris%2Fcris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fcris%2Fcris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.h?ref=5efd84c50326ffd904e376abc150fec01cdb06fb", "patch": "@@ -431,9 +431,6 @@ extern int cris_cpu_version;\n #define CALL_USED_REGISTERS \\\n  {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1}\n \n-#define CONDITIONAL_REGISTER_USAGE cris_conditional_register_usage ()\n-\n-\n /* Node: Allocation Order */\n \n /* We need this on CRIS, because call-used regs should be used first,"}, {"sha": "cb8bf9e95ac276e633766c13e9836893c1cb2051", "filename": "gcc/config/fr30/fr30.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Ffr30%2Ffr30.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Ffr30%2Ffr30.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.h?ref=5efd84c50326ffd904e376abc150fec01cdb06fb", "patch": "@@ -180,8 +180,9 @@ along with GCC; see the file COPYING3.  If not see\n \n    The table initialized from this macro, and the table initialized by the\n    following one, may be overridden at run time either automatically, by the\n-   actions of the macro `CONDITIONAL_REGISTER_USAGE', or by the user with the\n-   command options `-ffixed-REG', `-fcall-used-REG' and `-fcall-saved-REG'.  */\n+   actions of the macro `TARGET_CONDITIONAL_REGISTER_USAGE', or by the user\n+   with the command options `-ffixed-REG', `-fcall-used-REG' and\n+   `-fcall-saved-REG'.  */\n #define FIXED_REGISTERS \t\t\t\\\n   { 1, 0, 0, 0, 0, 0, 0, 0, \t/*  0 -  7 */ \t\\\n     0, 0, 0, 0, 0, 0, 0, 1,\t/*  8 - 15 */ \t\\"}, {"sha": "04a3f9242493e0fc45c19de6b2c8f2790aee2300", "filename": "gcc/config/frv/frv-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h?ref=5efd84c50326ffd904e376abc150fec01cdb06fb", "patch": "@@ -38,7 +38,6 @@ extern frv_cpu_t frv_cpu_type;\t\t\t/* value of -mcpu= */\n /* Define functions defined in frv.c */\n extern void frv_expand_prologue\t\t\t(void);\n extern void frv_expand_epilogue\t\t\t(bool);\n-extern void frv_conditional_register_usage\t(void);\n extern frv_stack_t *frv_stack_info\t\t(void);\n extern void frv_debug_stack\t\t\t(frv_stack_t *);\n extern int frv_initial_elimination_offset\t(int, int);"}, {"sha": "5003bb7d6eb10921b3ff242dad4afb7f24e5f150", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=5efd84c50326ffd904e376abc150fec01cdb06fb", "patch": "@@ -405,6 +405,7 @@ static reg_class_t frv_secondary_reload\t\t(bool, rtx, reg_class_t,\n \t\t\t\t\t\t secondary_reload_info *);\n static bool frv_frame_pointer_required\t\t(void);\n static bool frv_can_eliminate\t\t\t(const int, const int);\n+static void frv_conditional_register_usage\t(void);\n static void frv_trampoline_init\t\t\t(rtx, tree, rtx);\n static bool frv_class_likely_spilled_p \t\t(reg_class_t);\n \n@@ -535,6 +536,9 @@ static const struct default_options frv_option_optimization_table[] =\n #undef TARGET_CAN_ELIMINATE\n #define TARGET_CAN_ELIMINATE frv_can_eliminate\n \n+#undef TARGET_CONDITIONAL_REGISTER_USAGE\n+#define TARGET_CONDITIONAL_REGISTER_USAGE frv_conditional_register_usage\n+\n #undef TARGET_TRAMPOLINE_INIT\n #define TARGET_TRAMPOLINE_INIT frv_trampoline_init\n \n@@ -903,7 +907,7 @@ frv_string_begins_with (const_tree name, const char *prefix)\n    switches, then GCC will automatically avoid using these registers when the\n    target switches are opposed to them.)  */\n \n-void\n+static void\n frv_conditional_register_usage (void)\n {\n   int i;"}, {"sha": "f3fe567be3ec9dc1218629fd82a94d6701faa59f", "filename": "gcc/config/frv/frv.h", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Ffrv%2Ffrv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Ffrv%2Ffrv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.h?ref=5efd84c50326ffd904e376abc150fec01cdb06fb", "patch": "@@ -784,28 +784,6 @@\n \t1, 1\t\t\t\t/* 171-172, iacc0 */\t\t\\\n }\n \n-/* Zero or more C statements that may conditionally modify two variables\n-   `fixed_regs' and `call_used_regs' (both of type `char []') after they have\n-   been initialized from the two preceding macros.\n-\n-   This is necessary in case the fixed or call-clobbered registers depend on\n-   target flags.\n-\n-   You need not define this macro if it has no work to do.\n-\n-   If the usage of an entire class of registers depends on the target flags,\n-   you may indicate this to GCC by using this macro to modify `fixed_regs' and\n-   `call_used_regs' to 1 for each of the registers in the classes which should\n-   not be used by GCC.  Also define the macro `REG_CLASS_FROM_LETTER' to return\n-   `NO_REGS' if it is called with a letter for a class that shouldn't be used.\n-\n-   (However, if this class is not included in `GENERAL_REGS' and all of the\n-   insn patterns whose constraints permit this class are controlled by target\n-   switches, then GCC will automatically avoid using these registers when the\n-   target switches are opposed to them.)  */\n-\n-#define CONDITIONAL_REGISTER_USAGE frv_conditional_register_usage ()\n-\n \f\n /* Order of allocation of registers.  */\n "}, {"sha": "1c7c27b5f30a718e40dd55b0ec9612948880c5ac", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=5efd84c50326ffd904e376abc150fec01cdb06fb", "patch": "@@ -1919,6 +1919,15 @@ h8300_can_eliminate (const int from ATTRIBUTE_UNUSED, const int to)\n   return (to == STACK_POINTER_REGNUM ? ! frame_pointer_needed : true);\n }\n \n+/* Conditionally modify register usage based on target flags.  */\n+\n+static void\n+h8300_conditional_register_usage (void)\n+{\n+  if (!TARGET_MAC)\n+    fixed_regs[MAC_REG] = call_used_regs[MAC_REG] = 1;\n+}\n+\n /* Function for INITIAL_ELIMINATION_OFFSET(FROM, TO, OFFSET).\n    Define the offset between two registers, one to be eliminated, and\n    the other its replacement, at the start of a routine.  */\n@@ -5954,6 +5963,9 @@ h8300_trampoline_init (rtx m_tramp, tree fndecl, rtx cxt)\n #undef TARGET_CAN_ELIMINATE\n #define TARGET_CAN_ELIMINATE h8300_can_eliminate\n \n+#undef TARGET_CONDITIONAL_REGISTER_USAGE\n+#define TARGET_CONDITIONAL_REGISTER_USAGE h8300_conditional_register_usage\n+\n #undef TARGET_TRAMPOLINE_INIT\n #define TARGET_TRAMPOLINE_INIT h8300_trampoline_init\n "}, {"sha": "35094de7651af7667c6652218eee16ccae010a94", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=5efd84c50326ffd904e376abc150fec01cdb06fb", "patch": "@@ -244,12 +244,6 @@ extern const char * const *h8_reg_names;\n /* r0 r1 r2 r3 r4 r5 r6 r7 mac ap rap  fp */\t\\\n   { 2, 3, 0, 1, 4, 5, 6, 8,  7, 9, 10, 11 }\n \n-#define CONDITIONAL_REGISTER_USAGE\t\t\t\\\n-{\t\t\t\t\t\t\t\\\n-  if (!TARGET_MAC)\t\t\t\t\t\\\n-    fixed_regs[MAC_REG] = call_used_regs[MAC_REG] = 1;\t\\\n-}\n-\n #define HARD_REGNO_NREGS(REGNO, MODE)\t\t\\\n   h8300_hard_regno_nregs ((REGNO), (MODE))\n "}, {"sha": "3936099e4436234570577325484ce0b88c842f92", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=5efd84c50326ffd904e376abc150fec01cdb06fb", "patch": "@@ -20,8 +20,6 @@ along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n /* Functions in i386.c */\n-extern void ix86_conditional_register_usage (void);\n-\n extern bool ix86_target_stack_probe (void);\n extern bool ix86_can_use_return_insn_p (void);\n extern void ix86_setup_frame_addresses (void);"}, {"sha": "967d42207ead41b9eeda714e7b4f9eef4ecf1531", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=5efd84c50326ffd904e376abc150fec01cdb06fb", "patch": "@@ -4114,7 +4114,7 @@ ix86_option_override (void)\n \n /* Update register usage after having seen the compiler flags.  */\n \n-void\n+static void\n ix86_conditional_register_usage (void)\n {\n   int i;\n@@ -5619,8 +5619,8 @@ ix86_asm_output_function_label (FILE *asm_out_file, const char *fname,\n extern void init_regs (void);\n \n /* Implementation of call abi switching target hook. Specific to FNDECL\n-   the specific call register sets are set. See also CONDITIONAL_REGISTER_USAGE\n-   for more details.  */\n+   the specific call register sets are set.  See also\n+   ix86_conditional_register_usage for more details.  */\n void\n ix86_call_abi_override (const_tree fndecl)\n {\n@@ -34706,6 +34706,9 @@ ix86_autovectorize_vector_sizes (void)\n #undef TARGET_ASM_CODE_END\n #define TARGET_ASM_CODE_END ix86_code_end\n \n+#undef TARGET_CONDITIONAL_REGISTER_USAGE\n+#define TARGET_CONDITIONAL_REGISTER_USAGE ix86_conditional_register_usage\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n #include \"gt-i386.h\""}, {"sha": "df7c5e33428c3cda09087644419d87e37c33a388", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=5efd84c50326ffd904e376abc150fec01cdb06fb", "patch": "@@ -899,7 +899,7 @@ enum target_cpu_default\n    64 bit targets, one if the register if fixed on both 32 and 64\n    bit targets, two if it is only fixed on 32bit targets and three\n    if its only fixed on 64bit targets.\n-   Proper values are computed in the CONDITIONAL_REGISTER_USAGE.\n+   Proper values are computed in TARGET_CONDITIONAL_REGISTER_USAGE.\n  */\n #define FIXED_REGISTERS\t\t\t\t\t\t\\\n /*ax,dx,cx,bx,si,di,bp,sp,st,st1,st2,st3,st4,st5,st6,st7*/\t\\\n@@ -927,7 +927,7 @@ enum target_cpu_default\n    64 bit targets, one if the register if call used on both 32 and 64\n    bit targets, two if it is only call used on 32bit targets and three\n    if its only call used on 64bit targets.\n-   Proper values are computed in the CONDITIONAL_REGISTER_USAGE.\n+   Proper values are computed in TARGET_CONDITIONAL_REGISTER_USAGE.\n */\n #define CALL_USED_REGISTERS\t\t\t\t\t\\\n /*ax,dx,cx,bx,si,di,bp,sp,st,st1,st2,st3,st4,st5,st6,st7*/\t\\\n@@ -967,9 +967,6 @@ enum target_cpu_default\n \n #define OVERRIDE_ABI_FORMAT(FNDECL) ix86_call_abi_override (FNDECL)\n \n-/* Macro to conditionally modify fixed_regs/call_used_regs.  */\n-#define CONDITIONAL_REGISTER_USAGE  ix86_conditional_register_usage ()\n-\n /* Return number of consecutive hard regs needed starting at reg REGNO\n    to hold something of mode MODE.\n    This is ordinarily the length in words of a value of mode MODE\n@@ -1251,7 +1248,8 @@ enum reg_class\n    for a vector of HARD_REG_SET of length N_REG_CLASSES.\n \n    Note that the default setting of CLOBBERED_REGS is for 32-bit; this\n-   is adjusted by CONDITIONAL_REGISTER_USAGE for the 64-bit ABI in effect.  */\n+   is adjusted by TARGET_CONDITIONAL_REGISTER_USAGE for the 64-bit ABI\n+   in effect.  */\n \n #define REG_CLASS_CONTENTS\t\t\t\t\t\t\\\n {     { 0x00,     0x0 },\t\t\t\t\t\t\\"}, {"sha": "2e7422b5de97157ebb6f0b214bf029c36cbc6e69", "filename": "gcc/config/m32c/m32c-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fm32c%2Fm32c-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fm32c%2Fm32c-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c-protos.h?ref=5efd84c50326ffd904e376abc150fec01cdb06fb", "patch": "@@ -22,7 +22,6 @@\n #define MM enum machine_mode\n #define UINT unsigned int\n \n-void m32c_conditional_register_usage (void);\n int  m32c_const_ok_for_constraint_p (HOST_WIDE_INT, char, const char *);\n UINT m32c_dwarf_frame_regnum (int);\n int  m32c_eh_return_data_regno (int);"}, {"sha": "42b4517f1d9f863cf2ec15a880e1b05d318e8ee6", "filename": "gcc/config/m32c/m32c.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fm32c%2Fm32c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fm32c%2Fm32c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c.c?ref=5efd84c50326ffd904e376abc150fec01cdb06fb", "patch": "@@ -88,6 +88,7 @@ static rtx m32c_subreg (enum machine_mode, rtx, enum machine_mode, int);\n static int need_to_save (int);\n static rtx m32c_function_value (const_tree, const_tree, bool);\n static rtx m32c_libcall_value (enum machine_mode, const_rtx);\n+static void m32c_conditional_register_usage (void);\n \n /* Returns true if an address is specified, else false.  */\n static bool m32c_get_pragma_address (const char *varname, unsigned *addr);\n@@ -523,11 +524,13 @@ static struct\n   { 1, 1, 0, 0, 0 },\t\t/* mem7 */\n };\n \n-/* Implements CONDITIONAL_REGISTER_USAGE.  We adjust the number of\n-   available memregs, and select which registers need to be preserved\n+/* Implements TARGET_CONDITIONAL_REGISTER_USAGE.  We adjust the number\n+   of available memregs, and select which registers need to be preserved\n    across calls based on the chip family.  */\n \n-void\n+#undef TARGET_CONDITIONAL_REGISTER_USAGE\n+#define TARGET_CONDITIONAL_REGISTER_USAGE m32c_conditional_register_usage\n+static void\n m32c_conditional_register_usage (void)\n {\n   int i;"}, {"sha": "f72260d668d9da2e9d62d682504851c116f9c851", "filename": "gcc/config/m32c/m32c.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fm32c%2Fm32c.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fm32c%2Fm32c.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c.h?ref=5efd84c50326ffd904e376abc150fec01cdb06fb", "patch": "@@ -228,8 +228,6 @@ machine_function;\n \t\t\t      1, 1, 1, 1, \\\n \t\t\t      1, 1, 1, 1, 1, 1, 1, 1 }\n \n-#define CONDITIONAL_REGISTER_USAGE m32c_conditional_register_usage ();\n-\n /* The *_REGNO theme matches m32c.md and most register number\n    arguments; the PC_REGNUM is the odd one out.  */\n #ifndef PC_REGNO"}, {"sha": "18ac2608dabf4206884b6a13a3a59ffc7e0da703", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=5efd84c50326ffd904e376abc150fec01cdb06fb", "patch": "@@ -101,6 +101,7 @@ static rtx m32r_function_arg (CUMULATIVE_ARGS *, enum machine_mode,\n static void m32r_function_arg_advance (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t       const_tree, bool);\n static bool m32r_can_eliminate (const int, const int);\n+static void m32r_conditional_register_usage (void);\n static void m32r_trampoline_init (rtx, tree, rtx);\n \f\n /* M32R specific attributes.  */\n@@ -204,6 +205,9 @@ static const struct default_options m32r_option_optimization_table[] =\n #undef TARGET_CAN_ELIMINATE\n #define TARGET_CAN_ELIMINATE m32r_can_eliminate\n \n+#undef TARGET_CONDITIONAL_REGISTER_USAGE\n+#define TARGET_CONDITIONAL_REGISTER_USAGE m32r_conditional_register_usage\n+\n #undef TARGET_TRAMPOLINE_INIT\n #define TARGET_TRAMPOLINE_INIT m32r_trampoline_init\n \n@@ -2837,3 +2841,13 @@ m32r_trampoline_init (rtx m_tramp, tree fndecl, rtx chain_value)\n \t\t       gen_int_mode (TRAMPOLINE_SIZE, SImode), SImode,\n \t\t       GEN_INT (3), SImode);\n }\n+\n+static void\n+m32r_conditional_register_usage (void)\n+{\n+  if (flag_pic)\n+    {\n+      fixed_regs[PIC_OFFSET_TABLE_REGNUM] = 1;\n+      call_used_regs[PIC_OFFSET_TABLE_REGNUM] = 1;\n+    }\n+}"}, {"sha": "d7c7feaf631af66145690e8ed7b2fdcca2d0418b", "filename": "gcc/config/m32r/m32r.h", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fm32r%2Fm32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fm32r%2Fm32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.h?ref=5efd84c50326ffd904e376abc150fec01cdb06fb", "patch": "@@ -456,30 +456,6 @@ extern enum m32r_sdata m32r_sdata;\n \n #define CALL_REALLY_USED_REGISTERS CALL_USED_REGISTERS\n \n-/* Zero or more C statements that may conditionally modify two variables\n-   `fixed_regs' and `call_used_regs' (both of type `char []') after they\n-   have been initialized from the two preceding macros.\n-\n-   This is necessary in case the fixed or call-clobbered registers depend\n-   on target flags.\n-\n-   You need not define this macro if it has no work to do.  */\n-\n-#ifdef SUBTARGET_CONDITIONAL_REGISTER_USAGE\n-#define CONDITIONAL_REGISTER_USAGE SUBTARGET_CONDITIONAL_REGISTER_USAGE\n-#else\n-#define CONDITIONAL_REGISTER_USAGE\t\t\t \\\n-  do\t\t\t\t\t\t\t \\\n-    {\t\t\t\t\t\t\t \\\n-      if (flag_pic)\t\t\t\t\t \\\n-       {\t\t\t\t\t\t \\\n-         fixed_regs[PIC_OFFSET_TABLE_REGNUM] = 1;\t \\\n-         call_used_regs[PIC_OFFSET_TABLE_REGNUM] = 1;\t \\\n-       }\t\t\t\t\t\t \\\n-    }\t\t\t\t\t\t\t \\\n-  while (0)\n-#endif\n-\n /* If defined, an initializer for a vector of integers, containing the\n    numbers of hard registers in the order in which GCC should\n    prefer to use them (from most preferred to least).  */"}, {"sha": "76b6659379e094c5265d17c965cc0d67737555eb", "filename": "gcc/config/m68hc11/m68hc11-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fm68hc11%2Fm68hc11-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fm68hc11%2Fm68hc11-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11-protos.h?ref=5efd84c50326ffd904e376abc150fec01cdb06fb", "patch": "@@ -20,7 +20,6 @@ along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n \n-extern void m68hc11_conditional_register_usage (void);\n extern int hard_regno_mode_ok (int, enum machine_mode);\n extern int m68hc11_hard_regno_rename_ok (int, int);\n "}, {"sha": "f8a67ba779e6fd3ff1746400cb196622ac9dd114", "filename": "gcc/config/m68hc11/m68hc11.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c?ref=5efd84c50326ffd904e376abc150fec01cdb06fb", "patch": "@@ -96,6 +96,7 @@ static void m68hc11_init_libfuncs (void);\n static rtx m68hc11_struct_value_rtx (tree, int);\n static bool m68hc11_return_in_memory (const_tree, const_tree);\n static bool m68hc11_can_eliminate (const int, const int);\n+static void m68hc11_conditional_register_usage (void);\n static void m68hc11_trampoline_init (rtx, tree, rtx);\n \n static rtx m68hc11_function_arg (CUMULATIVE_ARGS*, enum machine_mode,\n@@ -302,6 +303,9 @@ static const struct attribute_spec m68hc11_attribute_table[] =\n #undef TARGET_CAN_ELIMINATE\n #define TARGET_CAN_ELIMINATE m68hc11_can_eliminate\n \n+#undef TARGET_CONDITIONAL_REGISTER_USAGE\n+#define TARGET_CONDITIONAL_REGISTER_USAGE m68hc11_conditional_register_usage\n+\n #undef TARGET_CLASS_LIKELY_SPILLED_P\n #define TARGET_CLASS_LIKELY_SPILLED_P m68hc11_class_likely_spilled_p\n \n@@ -382,7 +386,10 @@ m68hc11_option_override (void)\n }\n \n \n-void\n+/* The soft-registers are disabled or enabled according to the\n+  -msoft-reg-count=<n> option.  */\n+\n+static void\n m68hc11_conditional_register_usage (void)\n {\n   int i;"}, {"sha": "8f6d06867ee2c7ff98da113c375856f92dca82cd", "filename": "gcc/config/m68hc11/m68hc11.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h?ref=5efd84c50326ffd904e376abc150fec01cdb06fb", "patch": "@@ -372,14 +372,6 @@ SOFT_REG_FIRST+28, SOFT_REG_FIRST+29,SOFT_REG_FIRST+30,SOFT_REG_FIRST+31\n /* X, D, Y, SP,PC,A, B, CCR, Z, FP, ZTMP,ZR,XYR, D1 - 32,     SOFT-FP, AP */\n \n \n-/* Define this macro to change register usage conditional on target flags.\n-\n-   The soft-registers are disabled or enabled according to the\n-  -msoft-reg-count=<n> option.  */\n-\n-\n-#define CONDITIONAL_REGISTER_USAGE (m68hc11_conditional_register_usage ())\n-\n /* List the order in which to allocate registers.  Each register must be\n    listed once, even those in FIXED_REGISTERS.  */\n #define REG_ALLOC_ORDER\t\t\t\t\t\t\t\\"}, {"sha": "619cf5c33d6d5f12b2d70a0f91be0df71dc7c254", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=5efd84c50326ffd904e376abc150fec01cdb06fb", "patch": "@@ -133,6 +133,7 @@ static void m68k_sched_dfa_post_advance_cycle (void);\n static int m68k_sched_first_cycle_multipass_dfa_lookahead (void);\n \n static bool m68k_can_eliminate (const int, const int);\n+static void m68k_conditional_register_usage (void);\n static bool m68k_legitimate_address_p (enum machine_mode, rtx, bool);\n static bool m68k_handle_option (size_t, const char *, int);\n static void m68k_option_override (void);\n@@ -278,6 +279,9 @@ const char *m68k_library_id_string = \"_current_shared_library_a5_offset_\";\n #undef TARGET_CAN_ELIMINATE\n #define TARGET_CAN_ELIMINATE m68k_can_eliminate\n \n+#undef TARGET_CONDITIONAL_REGISTER_USAGE\n+#define TARGET_CONDITIONAL_REGISTER_USAGE m68k_conditional_register_usage\n+\n #undef TARGET_TRAMPOLINE_INIT\n #define TARGET_TRAMPOLINE_INIT m68k_trampoline_init\n \n@@ -6568,4 +6572,25 @@ m68k_return_pops_args (tree fundecl, tree funtype, int size)\n \t  ? size : 0);\n }\n \n+/* Make sure everything's fine if we *don't* have a given processor.\n+   This assumes that putting a register in fixed_regs will keep the\n+   compiler's mitts completely off it.  We don't bother to zero it out\n+   of register classes.  */\n+\n+static void\n+m68k_conditional_register_usage (void)\n+{\n+  int i;\n+  HARD_REG_SET x;\n+  if (!TARGET_HARD_FLOAT)\n+    {\n+      COPY_HARD_REG_SET (x, reg_class_contents[(int)FP_REGS]);\n+      for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n+        if (TEST_HARD_REG_BIT (x, i))\n+\t  fixed_regs[i] = call_used_regs[i] = 1;\n+    }\n+  if (flag_pic)\n+    fixed_regs[PIC_REG] = call_used_regs[PIC_REG] = 1;\n+}\n+\n #include \"gt-m68k.h\""}, {"sha": "71b7c4f273f3ed4304eb0d89f7d3ca0bb063dfc1", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=5efd84c50326ffd904e376abc150fec01cdb06fb", "patch": "@@ -398,25 +398,6 @@ along with GCC; see the file COPYING3.  If not see\n }\n \n \n-/* Make sure everything's fine if we *don't* have a given processor.\n-   This assumes that putting a register in fixed_regs will keep the\n-   compiler's mitts completely off it.  We don't bother to zero it out\n-   of register classes.  */\n-#define CONDITIONAL_REGISTER_USAGE\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\\\n-  int i;\t\t\t\t\t\t\t\\\n-  HARD_REG_SET x;\t\t\t\t\t\t\\\n-  if (!TARGET_HARD_FLOAT)\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      COPY_HARD_REG_SET (x, reg_class_contents[(int)FP_REGS]);\t\\\n-      for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\t\t\\\n-        if (TEST_HARD_REG_BIT (x, i))\t\t\t\t\\\n-\t  fixed_regs[i] = call_used_regs[i] = 1;\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-  if (flag_pic)\t\t\t\t\t\t\t\\\n-    fixed_regs[PIC_REG] = call_used_regs[PIC_REG] = 1;\t\t\\\n-}\n-\n /* On the m68k, ordinary registers hold 32 bits worth;\n    for the 68881 registers, a single register is always enough for\n    anything that can be stored in them at all.  */"}, {"sha": "12cef58a882dfc4fe6316317a3e6ccb978bdd9cb", "filename": "gcc/config/mep/mep-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fmep%2Fmep-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fmep%2Fmep-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmep%2Fmep-protos.h?ref=5efd84c50326ffd904e376abc150fec01cdb06fb", "patch": "@@ -19,7 +19,6 @@ You should have received a copy of the GNU General Public License\n along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n-extern void mep_conditional_register_usage (void);\n extern int mep_regno_reg_class (int);\n extern int mep_reg_class_from_constraint (int, const char *);\n extern bool mep_const_ok_for_letter_p (HOST_WIDE_INT, int);"}, {"sha": "96b9eb2a0d09a3adce74bae1537329f88fa32eee", "filename": "gcc/config/mep/mep.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fmep%2Fmep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fmep%2Fmep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmep%2Fmep.c?ref=5efd84c50326ffd904e376abc150fec01cdb06fb", "patch": "@@ -231,6 +231,7 @@ static tree mep_build_builtin_va_list (void);\n static void mep_expand_va_start (tree, rtx);\n static tree mep_gimplify_va_arg_expr (tree, tree, gimple_seq *, gimple_seq *);\n static bool mep_can_eliminate (const int, const int);\n+static void mep_conditional_register_usage (void);\n static void mep_trampoline_init (rtx, tree, rtx);\n \f\n #define WANT_GCC_DEFINITIONS\n@@ -278,7 +279,7 @@ mep_set_leaf_registers (int enable)\n       mep_leaf_registers[i] = enable;\n }\n \n-void\n+static void\n mep_conditional_register_usage (void)\n {\n   int i;\n@@ -7454,6 +7455,8 @@ mep_asm_init_sections (void)\n #define\tTARGET_GIMPLIFY_VA_ARG_EXPR\tmep_gimplify_va_arg_expr\n #undef  TARGET_CAN_ELIMINATE\n #define TARGET_CAN_ELIMINATE            mep_can_eliminate\n+#undef  TARGET_CONDITIONAL_REGISTER_USAGE\n+#define TARGET_CONDITIONAL_REGISTER_USAGE\tmep_conditional_register_usage\n #undef  TARGET_TRAMPOLINE_INIT\n #define TARGET_TRAMPOLINE_INIT\t\tmep_trampoline_init\n "}, {"sha": "73675a3e1106940897d0a78138a594c9f07cef6c", "filename": "gcc/config/mep/mep.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fmep%2Fmep.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fmep%2Fmep.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmep%2Fmep.h?ref=5efd84c50326ffd904e376abc150fec01cdb06fb", "patch": "@@ -256,9 +256,6 @@ crtbegin.o%s\"\n   1, CALL_USED_SHADOW_REGISTERS\t\t\t\t\\\n   }\n \n-#define CONDITIONAL_REGISTER_USAGE \\\n-\tmep_conditional_register_usage ();\n-\n #define REG_ALLOC_ORDER {\t\t\t\t\t\t\\\n   /* core registers */\t\t\t\t\t\t\t\\\n   3, 2, 1, 0, 9, 10, 11, 12, 4, 5, 6, 7, 8, 13, 14, 15, \t\t\\"}, {"sha": "4473b05a3b50c1a88b522af1a5628f0475a88327", "filename": "gcc/config/mips/mips-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-protos.h?ref=5efd84c50326ffd904e376abc150fec01cdb06fb", "patch": "@@ -248,7 +248,6 @@ extern bool mips_expand_ext_as_unaligned_load (rtx, rtx, HOST_WIDE_INT,\n extern bool mips_expand_ins_as_unaligned_store (rtx, rtx, HOST_WIDE_INT,\n \t\t\t\t\t\tHOST_WIDE_INT);\n extern bool mips_mem_fits_mode_p (enum machine_mode mode, rtx x);\n-extern void mips_conditional_register_usage (void);\n extern void mips_order_regs_for_local_alloc (void);\n extern HOST_WIDE_INT mips_debugger_offset (rtx, HOST_WIDE_INT);\n "}, {"sha": "23907b68b93c41c1b63032b550a35eccc9f956d4", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=5efd84c50326ffd904e376abc150fec01cdb06fb", "patch": "@@ -15926,9 +15926,9 @@ mips_swap_registers (unsigned int i)\n #undef SWAP_INT\n }\n \n-/* Implement CONDITIONAL_REGISTER_USAGE.  */\n+/* Implement TARGET_CONDITIONAL_REGISTER_USAGE.  */\n \n-void\n+static void\n mips_conditional_register_usage (void)\n {\n \n@@ -16615,6 +16615,9 @@ mips_shift_truncation_mask (enum machine_mode mode)\n #undef TARGET_CAN_ELIMINATE\n #define TARGET_CAN_ELIMINATE mips_can_eliminate\n \n+#undef TARGET_CONDITIONAL_REGISTER_USAGE\n+#define TARGET_CONDITIONAL_REGISTER_USAGE mips_conditional_register_usage\n+\n #undef TARGET_TRAMPOLINE_INIT\n #define TARGET_TRAMPOLINE_INIT mips_trampoline_init\n "}, {"sha": "b478d88dae044a6a54d93c6eeeda888a01b5150b", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=5efd84c50326ffd904e376abc150fec01cdb06fb", "patch": "@@ -1085,8 +1085,6 @@ enum mips_code_readable_setting {\n /* The CACHE instruction is available.  */\n #define ISA_HAS_CACHE (TARGET_CACHE_BUILTIN && !TARGET_MIPS16)\n \f\n-#define CONDITIONAL_REGISTER_USAGE mips_conditional_register_usage ()\n-\f\n /* Tell collect what flags to pass to nm.  */\n #ifndef NM_FLAGS\n #define NM_FLAGS \"-Bn\"\n@@ -1518,8 +1516,8 @@ enum mips_code_readable_setting {\n    Regarding coprocessor registers: without evidence to the contrary,\n    it's best to assume that each coprocessor register has a unique\n    use.  This can be overridden, in, e.g., mips_option_override or\n-   CONDITIONAL_REGISTER_USAGE should the assumption be inappropriate\n-   for a particular target.  */\n+   TARGET_CONDITIONAL_REGISTER_USAGE should the assumption be\n+   inappropriate for a particular target.  */\n \n #define FIXED_REGISTERS\t\t\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\"}, {"sha": "2e6abd85aaf5055a75e79d59aad57119b4b5afdc", "filename": "gcc/config/mmix/mmix-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h?ref=5efd84c50326ffd904e376abc150fec01cdb06fb", "patch": "@@ -45,7 +45,6 @@ extern void mmix_asm_output_skip (FILE *, int);\n extern void mmix_asm_output_align (FILE *, int);\n extern int mmix_shiftable_wyde_value (unsigned HOST_WIDEST_INT);\n extern void mmix_output_register_setting (FILE *, int, HOST_WIDEST_INT, int);\n-extern void mmix_conditional_register_usage (void);\n extern int mmix_opposite_regno (int, int);\n extern int mmix_local_regno (int);\n extern unsigned mmix_dbx_register_number (unsigned);"}, {"sha": "906bff9804bc527d1bf089d1fd2f64e8a5cfaf39", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=5efd84c50326ffd904e376abc150fec01cdb06fb", "patch": "@@ -159,6 +159,7 @@ static bool mmix_pass_by_reference (CUMULATIVE_ARGS *,\n static bool mmix_frame_pointer_required (void);\n static void mmix_asm_trampoline_template (FILE *);\n static void mmix_trampoline_init (rtx, tree, rtx);\n+static void mmix_conditional_register_usage (void);\n \n /* TARGET_OPTION_OPTIMIZATION_TABLE.  */\n \n@@ -212,6 +213,9 @@ static const struct default_options mmix_option_optimization_table[] =\n #undef TARGET_ASM_OUTPUT_SOURCE_FILENAME\n #define TARGET_ASM_OUTPUT_SOURCE_FILENAME mmix_asm_output_source_filename\n \n+#undef TARGET_CONDITIONAL_REGISTER_USAGE\n+#define TARGET_CONDITIONAL_REGISTER_USAGE mmix_conditional_register_usage\n+\n #undef TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS mmix_rtx_costs\n #undef TARGET_ADDRESS_COST\n@@ -337,9 +341,9 @@ mmix_local_alignment (tree type ATTRIBUTE_UNUSED, unsigned basic_align)\n   return basic_align;\n }\n \n-/* CONDITIONAL_REGISTER_USAGE.  */\n+/* TARGET_CONDITIONAL_REGISTER_USAGE.  */\n \n-void\n+static void\n mmix_conditional_register_usage (void)\n {\n   int i;"}, {"sha": "06632f6e05fc84fcb7520e33f6f1d3673f911a13", "filename": "gcc/config/mmix/mmix.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fmmix%2Fmmix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fmmix%2Fmmix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.h?ref=5efd84c50326ffd904e376abc150fec01cdb06fb", "patch": "@@ -275,8 +275,6 @@ struct GTY(()) machine_function\n    1, 1, 1, 1, 1, 1, 1 \\\n  }\n \n-#define CONDITIONAL_REGISTER_USAGE mmix_conditional_register_usage ()\n-\n #define INCOMING_REGNO(OUT) mmix_opposite_regno (OUT, 0)\n \n #define OUTGOING_REGNO(IN) mmix_opposite_regno (IN, 1)"}, {"sha": "709407e57f63e412ee1c33b715299858f25f2d85", "filename": "gcc/config/mn10300/mn10300.c", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.c?ref=5efd84c50326ffd904e376abc150fec01cdb06fb", "patch": "@@ -2475,6 +2475,28 @@ mn10300_adjust_sched_cost (rtx insn, rtx link, rtx dep, int cost)\n   /* Extract the latency value from the timings attribute.  */\n   return timings < 100 ? (timings % 10) : (timings % 100);\n }\n+\n+static void\n+mn10300_conditional_register_usage (void)\n+{\n+  unsigned int i;\n+\n+  if (!TARGET_AM33)\n+    {\n+      for (i = FIRST_EXTENDED_REGNUM;\n+\t   i <= LAST_EXTENDED_REGNUM; i++)\n+\tfixed_regs[i] = call_used_regs[i] = 1;\n+    }\n+  if (!TARGET_AM33_2)\n+    {\n+      for (i = FIRST_FP_REGNUM;\n+\t   i <= LAST_FP_REGNUM; i++)\n+\tfixed_regs[i] = call_used_regs[i] = 1;\n+    }\n+  if (flag_pic)\n+    fixed_regs[PIC_OFFSET_TABLE_REGNUM] =\n+    call_used_regs[PIC_OFFSET_TABLE_REGNUM] = 1;\n+}\n \f\n /* Initialize the GCC target structure.  */\n \n@@ -2561,4 +2583,7 @@ mn10300_adjust_sched_cost (rtx insn, rtx link, rtx dep, int cost)\n #undef  TARGET_SCHED_ADJUST_COST\n #define TARGET_SCHED_ADJUST_COST mn10300_adjust_sched_cost\n \n+#undef  TARGET_CONDITIONAL_REGISTER_USAGE\n+#define TARGET_CONDITIONAL_REGISTER_USAGE mn10300_conditional_register_usage\n+\n struct gcc_target targetm = TARGET_INITIALIZER;"}, {"sha": "6db0ed0c70101187811ac6471e38e598a0fb1cee", "filename": "gcc/config/mn10300/mn10300.h", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.h?ref=5efd84c50326ffd904e376abc150fec01cdb06fb", "patch": "@@ -202,27 +202,6 @@ extern enum processor_type mn10300_tune_cpu;\n   , 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 51 \\\n   }\n \n-#define CONDITIONAL_REGISTER_USAGE \\\n-{\t\t\t\t\t\t\\\n-  unsigned int i;\t\t\t\t\\\n-\t\t\t\t\t\t\\\n-  if (!TARGET_AM33)\t\t\t\t\\\n-    {\t\t\t\t\t\t\\\n-      for (i = FIRST_EXTENDED_REGNUM; \t\t\\\n-\t   i <= LAST_EXTENDED_REGNUM; i++) \t\\\n-\tfixed_regs[i] = call_used_regs[i] = 1; \t\\\n-    }\t\t\t\t\t\t\\\n-  if (!TARGET_AM33_2)\t\t\t\t\\\n-    {\t\t\t\t\t\t\\\n-      for (i = FIRST_FP_REGNUM;\t\t\t\\\n-\t   i <= LAST_FP_REGNUM; i++) \t\t\\\n-\tfixed_regs[i] = call_used_regs[i] = 1;\t\\\n-    }\t\t\t\t\t\t\\\n-  if (flag_pic)\t\t\t\t\t\\\n-    fixed_regs[PIC_OFFSET_TABLE_REGNUM] =       \\\n-    call_used_regs[PIC_OFFSET_TABLE_REGNUM] = 1;\\\n-}\n-\n /* Return number of consecutive hard regs needed starting at reg REGNO\n    to hold something of mode MODE.\n "}, {"sha": "8b6f5d85418c8c266ea5dfd973517279310ba55e", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=5efd84c50326ffd904e376abc150fec01cdb06fb", "patch": "@@ -181,6 +181,7 @@ static rtx pa_delegitimize_address (rtx);\n static bool pa_print_operand_punct_valid_p (unsigned char);\n static rtx pa_internal_arg_pointer (void);\n static bool pa_can_eliminate (const int, const int);\n+static void pa_conditional_register_usage (void);\n \n /* The following extra sections are only used for SOM.  */\n static GTY(()) section *som_readonly_data_section;\n@@ -386,6 +387,8 @@ static const struct default_options pa_option_optimization_table[] =\n #define TARGET_INTERNAL_ARG_POINTER pa_internal_arg_pointer\n #undef TARGET_CAN_ELIMINATE\n #define TARGET_CAN_ELIMINATE pa_can_eliminate\n+#undef TARGET_CONDITIONAL_REGISTER_USAGE\n+#define TARGET_CONDITIONAL_REGISTER_USAGE pa_conditional_register_usage\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n@@ -10176,4 +10179,25 @@ pa_initial_elimination_offset (int from, int to)\n   return offset;\n }\n \n+static void\n+pa_conditional_register_usage (void)\n+{\n+  int i;\n+\n+  if (!TARGET_64BIT && !TARGET_PA_11)\n+    {\n+      for (i = 56; i <= FP_REG_LAST; i++)\n+\tfixed_regs[i] = call_used_regs[i] = 1;\n+      for (i = 33; i < 56; i += 2)\n+\tfixed_regs[i] = call_used_regs[i] = 1;\n+    }\n+  if (TARGET_DISABLE_FPREGS || TARGET_SOFT_FLOAT)\n+    {\n+      for (i = FP_REG_FIRST; i <= FP_REG_LAST; i++)\n+\tfixed_regs[i] = call_used_regs[i] = 1;\n+    }\n+  if (flag_pic)\n+    fixed_regs[PIC_OFFSET_TABLE_REGNUM] = 1;\n+}\n+\n #include \"gt-pa.h\""}, {"sha": "7e8e05df981ed342a5798590eef378e386bdbe99", "filename": "gcc/config/pa/pa32-regs.h", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fpa%2Fpa32-regs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fpa%2Fpa32-regs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa32-regs.h?ref=5efd84c50326ffd904e376abc150fec01cdb06fb", "patch": "@@ -121,25 +121,6 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n   /* shift register and soft frame pointer */ \\\n   1, 1}\n \n-#define CONDITIONAL_REGISTER_USAGE \\\n-{\t\t\t\t\t\t\\\n-  int i;\t\t\t\t\t\\\n-  if (!TARGET_PA_11)\t\t\t\t\\\n-    {\t\t\t\t\t\t\\\n-      for (i = 56; i < 88; i++) \t\t\\\n-\tfixed_regs[i] = call_used_regs[i] = 1; \t\\\n-      for (i = 33; i < 88; i += 2) \t\t\\\n-\tfixed_regs[i] = call_used_regs[i] = 1; \t\\\n-    }\t\t\t\t\t\t\\\n-  if (TARGET_DISABLE_FPREGS || TARGET_SOFT_FLOAT)\\\n-    {\t\t\t\t\t\t\\\n-      for (i = 32; i < 88; i++) \t\t\\\n-\tfixed_regs[i] = call_used_regs[i] = 1; \t\\\n-    }\t\t\t\t\t\t\\\n-  if (flag_pic)\t\t\t\t\t\\\n-    fixed_regs[PIC_OFFSET_TABLE_REGNUM] = 1;\t\\\n-}\n-\n /* Allocate the call used registers first.  This should minimize\n    the number of registers that need to be saved (as call used\n    registers will generally not be allocated across a call)."}, {"sha": "23dc7780e4e3b33fadea4415a399902cbd73d495", "filename": "gcc/config/pa/pa64-regs.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fpa%2Fpa64-regs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fpa%2Fpa64-regs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa64-regs.h?ref=5efd84c50326ffd904e376abc150fec01cdb06fb", "patch": "@@ -101,18 +101,6 @@ along with GCC; see the file COPYING3.  If not see\n   /* shift register and soft frame pointer */    \\\n   1, 1}\n \n-#define CONDITIONAL_REGISTER_USAGE \\\n-{\t\t\t\t\t\t\\\n-  int i;\t\t\t\t\t\\\n-  if (TARGET_DISABLE_FPREGS || TARGET_SOFT_FLOAT)\\\n-    {\t\t\t\t\t\t\\\n-      for (i = FP_REG_FIRST; i <= FP_REG_LAST; i++)\\\n-\tfixed_regs[i] = call_used_regs[i] = 1; \t\\\n-    }\t\t\t\t\t\t\\\n-  if (flag_pic)\t\t\t\t\t\\\n-    fixed_regs[PIC_OFFSET_TABLE_REGNUM] = 1;\t\\\n-}\n-\n /* Allocate the call used registers first.  This should minimize\n    the number of registers that need to be saved (as call used\n    registers will generally not be allocated across a call)."}, {"sha": "b63d79fea9fb35b6f56ce40c9708e812cf0a78f0", "filename": "gcc/config/pdp11/pdp11.c", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.c?ref=5efd84c50326ffd904e376abc150fec01cdb06fb", "patch": "@@ -156,6 +156,7 @@ static rtx pdp11_function_arg (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t       const_tree, bool);\n static void pdp11_function_arg_advance (CUMULATIVE_ARGS *,\n \t\t\t\t\tenum machine_mode, const_tree, bool);\n+static void pdp11_conditional_register_usage (void);\n \n /* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n \n@@ -230,6 +231,9 @@ static const struct default_options pdp11_option_optimization_table[] =\n \n #undef  TARGET_LEGITIMATE_ADDRESS_P\n #define TARGET_LEGITIMATE_ADDRESS_P pdp11_legitimate_address_p\n+\n+#undef  TARGET_CONDITIONAL_REGISTER_USAGE\n+#define TARGET_CONDITIONAL_REGISTER_USAGE pdp11_conditional_register_usage\n \f\n /* Implement TARGET_HANDLE_OPTION.  */\n \n@@ -2101,4 +2105,37 @@ pdp11_function_arg_advance (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n \t   : int_size_in_bytes (type));\n }\n \n+/* Make sure everything's fine if we *don't* have an FPU.\n+   This assumes that putting a register in fixed_regs will keep the\n+   compiler's mitts completely off it.  We don't bother to zero it out\n+   of register classes.  Also fix incompatible register naming with\n+   the UNIX assembler.  */\n+\n+static void\n+pdp11_conditional_register_usage (void)\n+{\n+  int i;\n+  HARD_REG_SET x;\n+  if (!TARGET_FPU)\n+    {\n+      COPY_HARD_REG_SET (x, reg_class_contents[(int)FPU_REGS]);\n+      for (i = 0; i < FIRST_PSEUDO_REGISTER; i++ )\n+       if (TEST_HARD_REG_BIT (x, i))\n+\tfixed_regs[i] = call_used_regs[i] = 1;\n+    }\n+\n+  if (TARGET_AC0)\n+      call_used_regs[AC0_REGNUM] = 1;\n+  if (TARGET_UNIX_ASM)\n+    {\n+      /* Change names of FPU registers for the UNIX assembler.  */\n+      reg_names[8] = \"fr0\";\n+      reg_names[9] = \"fr1\";\n+      reg_names[10] = \"fr2\";\n+      reg_names[11] = \"fr3\";\n+      reg_names[12] = \"fr4\";\n+      reg_names[13] = \"fr5\";\n+    }\n+}\n+\n struct gcc_target targetm = TARGET_INITIALIZER;"}, {"sha": "6ee9bd8599f6c1d48e84c7087d95e7c005a6060b", "filename": "gcc/config/pdp11/pdp11.h", "status": "modified", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.h?ref=5efd84c50326ffd904e376abc150fec01cdb06fb", "patch": "@@ -168,38 +168,6 @@ extern const struct real_format pdp11_d_format;\n  0, 0, 0, 0, 0, 0, 1, 1 }\n \n \n-/* Make sure everything's fine if we *don't* have an FPU.\n-   This assumes that putting a register in fixed_regs will keep the\n-   compiler's mitts completely off it.  We don't bother to zero it out\n-   of register classes.  Also fix incompatible register naming with\n-   the UNIX assembler.\n-*/\n-#define CONDITIONAL_REGISTER_USAGE \\\n-{ \t\t\t\t\t\t\\\n-  int i; \t\t\t\t\t\\\n-  HARD_REG_SET x; \t\t\t\t\\\n-  if (!TARGET_FPU)\t\t\t\t\\\n-    { \t\t\t\t\t\t\\\n-      COPY_HARD_REG_SET (x, reg_class_contents[(int)FPU_REGS]); \\\n-      for (i = R0_REGNUM; i < FIRST_PSEUDO_REGISTER; i++ ) \\\n-       if (TEST_HARD_REG_BIT (x, i)) \t\t\\\n-\tfixed_regs[i] = call_used_regs[i] = 1; \t\\\n-    } \t\t\t\t\t\t\\\n-\t\t\t\t\t\t\\\n-  if (TARGET_AC0)\t\t\t\t\\\n-      call_used_regs[AC0_REGNUM] = 1;\t\t\\\n-  if (TARGET_UNIX_ASM)\t\t\t\t\\\n-    {\t\t\t\t\t\t\\\n-      /* Change names of FPU registers for the UNIX assembler.  */ \\\n-      reg_names[8] = \"fr0\";\t\t\t\\\n-      reg_names[9] = \"fr1\";\t\t\t\\\n-      reg_names[10] = \"fr2\";\t\t\t\\\n-      reg_names[11] = \"fr3\";\t\t\t\\\n-      reg_names[12] = \"fr4\";\t\t\t\\\n-      reg_names[13] = \"fr5\";\t\t\t\\\n-    }\t\t\t\t\t\t\\\n-}\n-\n /* Return number of consecutive hard regs needed starting at reg REGNO\n    to hold something of mode MODE.\n    This is ordinarily the length in words of a value of mode MODE"}, {"sha": "3eafc166cb884b3355f95964f55a118fecfb2932", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=5efd84c50326ffd904e376abc150fec01cdb06fb", "patch": "@@ -167,7 +167,6 @@ extern void rs6000_emit_epilogue (int);\n extern void rs6000_emit_eh_reg_restore (rtx, rtx);\n extern const char * output_isel (rtx *);\n extern bool rs6000_tls_referenced_p (rtx);\n-extern void rs6000_conditional_register_usage (void);\n \n extern void rs6000_aix_asm_output_dwarf_table_ref (char *);\n "}, {"sha": "9ac9d9915ddd163c9f1d915c77da2b310fdc8185", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=5efd84c50326ffd904e376abc150fec01cdb06fb", "patch": "@@ -1202,6 +1202,7 @@ static const reg_class_t *rs6000_ira_cover_classes (void);\n const int INSN_NOT_AVAILABLE = -1;\n static enum machine_mode rs6000_eh_return_filter_mode (void);\n static bool rs6000_can_eliminate (const int, const int);\n+static void rs6000_conditional_register_usage (void);\n static void rs6000_trampoline_init (rtx, tree, rtx);\n \n /* Hash table stuff for keeping track of TOC entries.  */\n@@ -1630,6 +1631,9 @@ static const struct default_options rs6000_option_optimization_table[] =\n #undef TARGET_CAN_ELIMINATE\n #define TARGET_CAN_ELIMINATE rs6000_can_eliminate\n \n+#undef TARGET_CONDITIONAL_REGISTER_USAGE\n+#define TARGET_CONDITIONAL_REGISTER_USAGE rs6000_conditional_register_usage\n+\n #undef TARGET_TRAMPOLINE_INIT\n #define TARGET_TRAMPOLINE_INIT rs6000_trampoline_init\n \n@@ -6989,7 +6993,7 @@ rs6000_offsettable_memref_p (rtx op)\n }\n \n /* Change register usage conditional on target flags.  */\n-void\n+static void\n rs6000_conditional_register_usage (void)\n {\n   int i;"}, {"sha": "fb6130ffcdb4b8630a99fb9bfee1780e1407f7b4", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=5efd84c50326ffd904e376abc150fec01cdb06fb", "patch": "@@ -1102,11 +1102,6 @@ extern unsigned rs6000_pointer_size;\n \n #define FIXED_SCRATCH 0\n \n-/* Define this macro to change register usage conditional on target\n-   flags.  */\n-\n-#define CONDITIONAL_REGISTER_USAGE rs6000_conditional_register_usage ()\n-\n /* Specify the registers used for certain standard purposes.\n    The values of these macros are register numbers.  */\n "}, {"sha": "528ccb33e1b0142c089168c7bc095d2ddb7a8f8f", "filename": "gcc/config/rx/rx-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Frx%2Frx-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Frx%2Frx-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx-protos.h?ref=5efd84c50326ffd904e376abc150fec01cdb06fb", "patch": "@@ -25,7 +25,6 @@\n #define Mmode \tenum machine_mode\n #define Fargs\tCUMULATIVE_ARGS\n \f\n-extern void\t\trx_conditional_register_usage (void);\n extern void\t\trx_expand_prologue (void);\n extern int\t\trx_initial_elimination_offset (int, int);\n "}, {"sha": "8f6f384c4c24e9b83d24b26ffb68528c73adef9d", "filename": "gcc/config/rx/rx.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Frx%2Frx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Frx%2Frx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.c?ref=5efd84c50326ffd904e376abc150fec01cdb06fb", "patch": "@@ -933,7 +933,7 @@ is_naked_func (const_tree decl)\n \f\n static bool use_fixed_regs = false;\n \n-void\n+static void\n rx_conditional_register_usage (void)\n {\n   static bool using_fixed_regs = false;\n@@ -2847,6 +2847,9 @@ rx_memory_move_cost (enum machine_mode mode, reg_class_t regclass, bool in)\n #undef  TARGET_CAN_ELIMINATE\n #define TARGET_CAN_ELIMINATE\t\t\trx_can_eliminate\n \n+#undef  TARGET_CONDITIONAL_REGISTER_USAGE\n+#define TARGET_CONDITIONAL_REGISTER_USAGE\trx_conditional_register_usage\n+\n #undef  TARGET_ASM_TRAMPOLINE_TEMPLATE\n #define TARGET_ASM_TRAMPOLINE_TEMPLATE\t\trx_trampoline_template\n "}, {"sha": "8f8b29b7012a1d48516bf57551ae10ff6f35e0b3", "filename": "gcc/config/rx/rx.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Frx%2Frx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Frx%2Frx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.h?ref=5efd84c50326ffd904e376abc150fec01cdb06fb", "patch": "@@ -245,9 +245,6 @@ enum reg_class\n   1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1\t\\\n }\n \n-#define CONDITIONAL_REGISTER_USAGE\t\t\t\\\n-  rx_conditional_register_usage ()\n-\n #define LIBCALL_VALUE(MODE)\t\t\t\t\\\n   gen_rtx_REG (((GET_MODE_CLASS (MODE) != MODE_INT\t\\\n \t\t || GET_MODE_SIZE (MODE) >= 4)\t\t\\"}, {"sha": "bce2a6f73fbb49bed83ac8001761208f23e2f351", "filename": "gcc/config/s390/s390-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-protos.h?ref=5efd84c50326ffd904e376abc150fec01cdb06fb", "patch": "@@ -38,7 +38,6 @@ extern HOST_WIDE_INT s390_initial_elimination_offset (int, int);\n extern void s390_emit_prologue (void);\n extern void s390_emit_epilogue (bool);\n extern void s390_function_profiler (FILE *, int);\n-extern void s390_conditional_register_usage (void);\n extern void s390_set_has_landing_pad_p (bool);\n extern bool s390_hard_regno_mode_ok (unsigned int, enum machine_mode);\n extern bool s390_hard_regno_rename_ok (unsigned int, unsigned int);"}, {"sha": "cdf8c21a48bf1aa6525773edcecedcf6a65bdc5d", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=5efd84c50326ffd904e376abc150fec01cdb06fb", "patch": "@@ -9742,9 +9742,9 @@ s390_emit_call (rtx addr_location, rtx tls_call, rtx result_reg,\n   return insn;\n }\n \n-/* Implement CONDITIONAL_REGISTER_USAGE.  */\n+/* Implement TARGET_CONDITIONAL_REGISTER_USAGE.  */\n \n-void\n+static void\n s390_conditional_register_usage (void)\n {\n   int i;\n@@ -10648,6 +10648,9 @@ s390_loop_unroll_adjust (unsigned nunroll, struct loop *loop)\n #undef TARGET_CAN_ELIMINATE\n #define TARGET_CAN_ELIMINATE s390_can_eliminate\n \n+#undef TARGET_CONDITIONAL_REGISTER_USAGE\n+#define TARGET_CONDITIONAL_REGISTER_USAGE s390_conditional_register_usage\n+\n #undef TARGET_LOOP_UNROLL_ADJUST\n #define TARGET_LOOP_UNROLL_ADJUST s390_loop_unroll_adjust\n "}, {"sha": "8d4080458d4adf943187d94fb53a43fea174b1ad", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=5efd84c50326ffd904e376abc150fec01cdb06fb", "patch": "@@ -373,8 +373,6 @@ extern int s390_arch_flags;\n   1, 1, 1, 1,\t\t\t\t\t\\\n   0, 0 }\n \n-#define CONDITIONAL_REGISTER_USAGE s390_conditional_register_usage ()\n-\n /* Preferred register allocation order.  */\n #define REG_ALLOC_ORDER                                         \\\n {  1, 2, 3, 4, 5, 0, 12, 11, 10, 9, 8, 7, 6, 14, 13,            \\"}, {"sha": "f64f3d8195e4f20375846166856372c0c103005a", "filename": "gcc/config/score/score.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fscore%2Fscore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fscore%2Fscore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fscore%2Fscore.c?ref=5efd84c50326ffd904e376abc150fec01cdb06fb", "patch": "@@ -138,6 +138,9 @@ static const struct default_options score_option_optimization_table[] =\n #undef TARGET_CAN_ELIMINATE\n #define TARGET_CAN_ELIMINATE            score_can_eliminate\n \n+#undef TARGET_CONDITIONAL_REGISTER_USAGE\n+#define TARGET_CONDITIONAL_REGISTER_USAGE score_conditional_register_usage\n+\n #undef TARGET_ASM_TRAMPOLINE_TEMPLATE\n #define TARGET_ASM_TRAMPOLINE_TEMPLATE\tscore_asm_trampoline_template\n #undef TARGET_TRAMPOLINE_INIT\n@@ -1232,4 +1235,12 @@ score_block_move (rtx *ops)\n   return false;\n }\n \n+static void\n+score_conditional_register_usage (void)\n+{\n+   if (!flag_pic)\n+     fixed_regs[PIC_OFFSET_TABLE_REGNUM] =\n+     call_used_regs[PIC_OFFSET_TABLE_REGNUM] = 0;\n+}\n+\n struct gcc_target targetm = TARGET_INITIALIZER;"}, {"sha": "0f1024cfdb81c5894e858f27c5bc68ecc979f97a", "filename": "gcc/config/score/score.h", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fscore%2Fscore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fscore%2Fscore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fscore%2Fscore.h?ref=5efd84c50326ffd904e376abc150fec01cdb06fb", "patch": "@@ -218,7 +218,7 @@\n    Regarding coprocessor registers: without evidence to the contrary,\n    it's best to assume that each coprocessor register has a unique\n    use.  This can be overridden, in, e.g., TARGET_OPTION_OVERRIDE or\n-   CONDITIONAL_REGISTER_USAGE should the assumption be inappropriate\n+   TARGET_CONDITIONAL_REGISTER_USAGE should the assumption be inappropriate\n    for a particular target.  */\n \n /* Control Registers, use mfcr/mtcr insn\n@@ -305,13 +305,6 @@\n /* Macro to conditionally modify fixed_regs/call_used_regs.  */\n #define PIC_OFFSET_TABLE_REGNUM          29\n \n-#define CONDITIONAL_REGISTER_USAGE                     \\\n-{                                                      \\\n-   if (!flag_pic)                                      \\\n-     fixed_regs[PIC_OFFSET_TABLE_REGNUM] =             \\\n-     call_used_regs[PIC_OFFSET_TABLE_REGNUM] = 0;      \\\n-}\n-\n #define HARD_REGNO_NREGS(REGNO, MODE) \\\n   ((GET_MODE_SIZE (MODE) + UNITS_PER_WORD - 1) / UNITS_PER_WORD)\n "}, {"sha": "7b87c962140de27690e5cb7189995864a36d2639", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=5efd84c50326ffd904e376abc150fec01cdb06fb", "patch": "@@ -298,6 +298,7 @@ static void sh_encode_section_info (tree, rtx, int);\n static int sh2a_function_vector_p (tree);\n static void sh_trampoline_init (rtx, tree, rtx);\n static rtx sh_trampoline_adjust_address (rtx);\n+static void sh_conditional_register_usage (void);\n \f\n static const struct attribute_spec sh_attribute_table[] =\n {\n@@ -588,6 +589,9 @@ static const struct default_options sh_option_optimization_table[] =\n #undef TARGET_SECONDARY_RELOAD\n #define TARGET_SECONDARY_RELOAD sh_secondary_reload\n \n+#undef TARGET_CONDITIONAL_REGISTER_USAGE\n+#define TARGET_CONDITIONAL_REGISTER_USAGE sh_conditional_register_usage\n+\n #undef TARGET_LEGITIMATE_ADDRESS_P\n #define TARGET_LEGITIMATE_ADDRESS_P\tsh_legitimate_address_p\n \n@@ -12415,6 +12419,54 @@ sh_secondary_reload (bool in_p, rtx x, reg_class_t rclass_i,\n   return NO_REGS;\n }\n \n+static void\n+sh_conditional_register_usage (void)\n+{\n+  int regno;\n+  for (regno = 0; regno < FIRST_PSEUDO_REGISTER; regno ++)\n+    if (! VALID_REGISTER_P (regno))\n+      fixed_regs[regno] = call_used_regs[regno] = 1;\n+  /* R8 and R9 are call-clobbered on SH5, but not on earlier SH ABIs.  */\n+  if (TARGET_SH5)\n+    {\n+      call_used_regs[FIRST_GENERAL_REG + 8]\n+\t= call_used_regs[FIRST_GENERAL_REG + 9] = 1;\n+      call_really_used_regs[FIRST_GENERAL_REG + 8]\n+\t= call_really_used_regs[FIRST_GENERAL_REG + 9] = 1;\n+    }\n+  if (TARGET_SHMEDIA)\n+    {\n+      regno_reg_class[FIRST_GENERAL_REG] = GENERAL_REGS;\n+      CLEAR_HARD_REG_SET (reg_class_contents[FP0_REGS]);\n+      regno_reg_class[FIRST_FP_REG] = FP_REGS;\n+    }\n+  if (flag_pic)\n+    {\n+      fixed_regs[PIC_OFFSET_TABLE_REGNUM] = 1;\n+      call_used_regs[PIC_OFFSET_TABLE_REGNUM] = 1;\n+    }\n+  /* Renesas saves and restores mac registers on call.  */\n+  if (TARGET_HITACHI && ! TARGET_NOMACSAVE)\n+    {\n+      call_really_used_regs[MACH_REG] = 0;\n+      call_really_used_regs[MACL_REG] = 0;\n+    }\n+  for (regno = FIRST_FP_REG + (TARGET_LITTLE_ENDIAN != 0);\n+       regno <= LAST_FP_REG; regno += 2)\n+    SET_HARD_REG_BIT (reg_class_contents[DF_HI_REGS], regno);\n+  if (TARGET_SHMEDIA)\n+    {\n+      for (regno = FIRST_TARGET_REG; regno <= LAST_TARGET_REG; regno ++)\n+\tif (! fixed_regs[regno] && call_really_used_regs[regno])\n+\t  SET_HARD_REG_BIT (reg_class_contents[SIBCALL_REGS], regno);\n+    }\n+  else\n+    for (regno = FIRST_GENERAL_REG; regno <= LAST_GENERAL_REG; regno++)\n+      if (! fixed_regs[regno] && call_really_used_regs[regno])\n+\tSET_HARD_REG_BIT (reg_class_contents[SIBCALL_REGS], regno);\n+}\n+\n+\n enum sh_divide_strategy_e sh_div_strategy = SH_DIV_STRATEGY_DEFAULT;\n \n #include \"gt-sh.h\""}, {"sha": "9960ae12bc1fca3505610b3106ad5f9a2f3a6d47", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 6, "deletions": 51, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=5efd84c50326ffd904e376abc150fec01cdb06fb", "patch": "@@ -106,51 +106,6 @@ do { \\\n #define SUBTARGET_FRAME_POINTER_REQUIRED 0\n #endif\n \n-#define CONDITIONAL_REGISTER_USAGE do\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  int regno;\t\t\t\t\t\t\t\t\\\n-  for (regno = 0; regno < FIRST_PSEUDO_REGISTER; regno ++)\t\t\\\n-    if (! VALID_REGISTER_P (regno))\t\t\t\t\t\\\n-      fixed_regs[regno] = call_used_regs[regno] = 1;\t\t\t\\\n-  /* R8 and R9 are call-clobbered on SH5, but not on earlier SH ABIs.  */ \\\n-  if (TARGET_SH5)\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      call_used_regs[FIRST_GENERAL_REG + 8]\t\t\t\t\\\n-\t= call_used_regs[FIRST_GENERAL_REG + 9] = 1;\t\t\t\\\n-      call_really_used_regs[FIRST_GENERAL_REG + 8]\t\t\t\\\n-\t= call_really_used_regs[FIRST_GENERAL_REG + 9] = 1;\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  if (TARGET_SHMEDIA)\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      regno_reg_class[FIRST_GENERAL_REG] = GENERAL_REGS;\t\t\\\n-      CLEAR_HARD_REG_SET (reg_class_contents[FP0_REGS]);\t\t\\\n-      regno_reg_class[FIRST_FP_REG] = FP_REGS;\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  if (flag_pic)\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fixed_regs[PIC_OFFSET_TABLE_REGNUM] = 1;\t\t\t\t\\\n-      call_used_regs[PIC_OFFSET_TABLE_REGNUM] = 1;\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  /* Renesas saves and restores mac registers on call.  */\t\t\\\n-  if (TARGET_HITACHI && ! TARGET_NOMACSAVE)\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      call_really_used_regs[MACH_REG] = 0;\t\t\t\t\\\n-      call_really_used_regs[MACL_REG] = 0;\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  for (regno = FIRST_FP_REG + (TARGET_LITTLE_ENDIAN != 0);\t\t\\\n-       regno <= LAST_FP_REG; regno += 2)\t\t\t\t\\\n-    SET_HARD_REG_BIT (reg_class_contents[DF_HI_REGS], regno);\t\t\\\n-  if (TARGET_SHMEDIA)\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      for (regno = FIRST_TARGET_REG; regno <= LAST_TARGET_REG; regno ++)\\\n-\tif (! fixed_regs[regno] && call_really_used_regs[regno])\t\\\n-\t  SET_HARD_REG_BIT (reg_class_contents[SIBCALL_REGS], regno);\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  else\t\t\t\t\t\t\t\t\t\\\n-    for (regno = FIRST_GENERAL_REG; regno <= LAST_GENERAL_REG; regno++)\t\\\n-      if (! fixed_regs[regno] && call_really_used_regs[regno])\t\t\\\n-\tSET_HARD_REG_BIT (reg_class_contents[SIBCALL_REGS], regno);\t\\\n-} while (0)\n \f\n /* Nonzero if this is an ELF target - compile time only */\n #define TARGET_ELF 0\n@@ -806,8 +761,8 @@ extern char sh_additional_register_names[ADDREGNAMES_SIZE] \\\n   (GENERAL_REGISTER_P (REGNO) || FP_REGISTER_P (REGNO) \\\n    || TARGET_REGISTER_P (REGNO))\n \n-/* This is to be used in CONDITIONAL_REGISTER_USAGE, to mark registers\n-   that should be fixed.  */\n+/* This is to be used in TARGET_CONDITIONAL_REGISTER_USAGE, to mark\n+   registers that should be fixed.  */\n #define VALID_REGISTER_P(REGNO) \\\n   (SHMEDIA_REGISTER_P (REGNO) || XD_REGISTER_P (REGNO) \\\n    || (REGNO) == AP_REG || (REGNO) == RAP_REG \\\n@@ -908,8 +863,8 @@ extern char sh_additional_register_names[ADDREGNAMES_SIZE] \\\n   1,\t  1,\t\t\t\t\t\t\t\t\\\n }\n \n-/* CONDITIONAL_REGISTER_USAGE might want to make a register call-used, yet\n-   fixed, like PIC_OFFSET_TABLE_REGNUM.  */\n+/* TARGET_CONDITIONAL_REGISTER_USAGE might want to make a register\n+   call-used, yet fixed, like PIC_OFFSET_TABLE_REGNUM.  */\n #define CALL_REALLY_USED_REGISTERS CALL_USED_REGISTERS\n \n /* Only the lower 32-bits of R10-R14 are guaranteed to be preserved\n@@ -1147,15 +1102,15 @@ enum reg_class\n   { 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00300000 },\t\\\n /* FPUL_REGS:  */\t\t\t\t\t\t\t\\\n   { 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00400000 },\t\\\n-/* SIBCALL_REGS: Initialized in CONDITIONAL_REGISTER_USAGE.  */\t\\\n+/* SIBCALL_REGS: Initialized in TARGET_CONDITIONAL_REGISTER_USAGE.  */\t\\\n   { 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000 },\t\\\n /* GENERAL_REGS:  */\t\t\t\t\t\t\t\\\n   { 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x03020000 },\t\\\n /* FP0_REGS:  */\t\t\t\t\t\t\t\\\n   { 0x00000000, 0x00000000, 0x00000001, 0x00000000, 0x00000000 },\t\\\n /* FP_REGS:  */\t\t\t\t\t\t\t\t\\\n   { 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000 },\t\\\n-/* DF_HI_REGS:  Initialized in CONDITIONAL_REGISTER_USAGE.  */\t\t\\\n+/* DF_HI_REGS:  Initialized in TARGET_CONDITIONAL_REGISTER_USAGE.  */\t\t\\\n   { 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x0000ff00 },\t\\\n /* DF_REGS:  */\t\t\t\t\t\t\t\t\\\n   { 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x0000ff00 },\t\\"}, {"sha": "bdb44af48fd15e2b91f966dd2bf89f4337ae063a", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=5efd84c50326ffd904e376abc150fec01cdb06fb", "patch": "@@ -441,6 +441,7 @@ static void sparc_output_dwarf_dtprel (FILE *, int, rtx) ATTRIBUTE_UNUSED;\n static void sparc_file_end (void);\n static bool sparc_frame_pointer_required (void);\n static bool sparc_can_eliminate (const int, const int);\n+static void sparc_conditional_register_usage (void);\n #ifdef TARGET_ALTERNATE_LONG_DOUBLE_MANGLING\n static const char *sparc_mangle_type (const_tree);\n #endif\n@@ -639,6 +640,9 @@ static const struct default_options sparc_option_optimization_table[] =\n #undef TARGET_CAN_ELIMINATE\n #define TARGET_CAN_ELIMINATE sparc_can_eliminate\n \n+#undef TARGET_CONDITIONAL_REGISTER_USAGE\n+#define TARGET_CONDITIONAL_REGISTER_USAGE sparc_conditional_register_usage\n+\n #ifdef TARGET_ALTERNATE_LONG_DOUBLE_MANGLING\n #undef TARGET_MANGLE_TYPE\n #define TARGET_MANGLE_TYPE sparc_mangle_type\n@@ -9621,4 +9625,54 @@ sparc_can_eliminate (const int from ATTRIBUTE_UNUSED, const int to)\n           || !targetm.frame_pointer_required ());\n }\n \n+/* If !TARGET_FPU, then make the fp registers and fp cc regs fixed so that\n+   they won't be allocated.  */\n+\n+static void\n+sparc_conditional_register_usage (void)\n+{\n+  if (PIC_OFFSET_TABLE_REGNUM != INVALID_REGNUM)\n+    {\n+      fixed_regs[PIC_OFFSET_TABLE_REGNUM] = 1;\n+      call_used_regs[PIC_OFFSET_TABLE_REGNUM] = 1;\n+    }\n+  /* If the user has passed -f{fixed,call-{used,saved}}-g5 */\n+  /* then honor it.  */\n+  if (TARGET_ARCH32 && fixed_regs[5])\n+    fixed_regs[5] = 1;\n+  else if (TARGET_ARCH64 && fixed_regs[5] == 2)\n+    fixed_regs[5] = 0;\n+  if (! TARGET_V9)\n+    {\n+      int regno;\n+      for (regno = SPARC_FIRST_V9_FP_REG;\n+\t   regno <= SPARC_LAST_V9_FP_REG;\n+\t   regno++)\n+\tfixed_regs[regno] = 1;\n+      /* %fcc0 is used by v8 and v9.  */\n+      for (regno = SPARC_FIRST_V9_FCC_REG + 1;\n+\t   regno <= SPARC_LAST_V9_FCC_REG;\n+\t   regno++)\n+\tfixed_regs[regno] = 1;\n+    }\n+  if (! TARGET_FPU)\n+    {\n+      int regno;\n+      for (regno = 32; regno < SPARC_LAST_V9_FCC_REG; regno++)\n+\tfixed_regs[regno] = 1;\n+    }\n+  /* If the user has passed -f{fixed,call-{used,saved}}-g2 */\n+  /* then honor it.  Likewise with g3 and g4.  */\n+  if (fixed_regs[2] == 2)\n+    fixed_regs[2] = ! TARGET_APP_REGS;\n+  if (fixed_regs[3] == 2)\n+    fixed_regs[3] = ! TARGET_APP_REGS;\n+  if (TARGET_ARCH32 && fixed_regs[4] == 2)\n+    fixed_regs[4] = ! TARGET_APP_REGS;\n+  else if (TARGET_CM_EMBMEDANY)\n+    fixed_regs[4] = 1;\n+  else if (fixed_regs[4] == 2)\n+    fixed_regs[4] = 0;\n+}\n+\n #include \"gt-sparc.h\""}, {"sha": "9927333cc13a6930f0b2a157ad5a4822dd862365", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 3, "deletions": 53, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=5efd84c50326ffd904e376abc150fec01cdb06fb", "patch": "@@ -517,7 +517,8 @@ extern enum cmodel sparc_cmodel;\n \n /* MASK_APP_REGS must always be the default because that's what\n    FIXED_REGISTERS is set to and -ffixed- is processed before\n-   CONDITIONAL_REGISTER_USAGE is called (where we process -mno-app-regs).  */\n+   TARGET_CONDITIONAL_REGISTER_USAGE is called (where we process\n+   -mno-app-regs).  */\n #define TARGET_DEFAULT (MASK_APP_REGS + MASK_FPU)\n \n /* Processor type.\n@@ -756,7 +757,7 @@ extern struct sparc_cpu_select sparc_select[];\n    stack frames.\n \n    Registers fixed in arch32 and not arch64 (or vice-versa) are marked in\n-   CONDITIONAL_REGISTER_USAGE in order to properly handle -ffixed-.\n+   TARGET_CONDITIONAL_REGISTER_USAGE in order to properly handle -ffixed-.\n */\n \n #define FIXED_REGISTERS  \\\n@@ -802,57 +803,6 @@ extern struct sparc_cpu_select sparc_select[];\n \t\t\t\t\\\n   1, 1, 1, 1, 1, 1}\n \n-/* If !TARGET_FPU, then make the fp registers and fp cc regs fixed so that\n-   they won't be allocated.  */\n-\n-#define CONDITIONAL_REGISTER_USAGE\t\t\t\t\\\n-do\t\t\t\t\t\t\t\t\\\n-  {\t\t\t\t\t\t\t\t\\\n-    if (PIC_OFFSET_TABLE_REGNUM != INVALID_REGNUM)\t\t\\\n-      {\t\t\t\t\t\t\t\t\\\n-\tfixed_regs[PIC_OFFSET_TABLE_REGNUM] = 1;\t\t\\\n-\tcall_used_regs[PIC_OFFSET_TABLE_REGNUM] = 1;\t\t\\\n-      }\t\t\t\t\t\t\t\t\\\n-    /* If the user has passed -f{fixed,call-{used,saved}}-g5 */\t\\\n-    /* then honor it.  */\t\t\t\t\t\\\n-    if (TARGET_ARCH32 && fixed_regs[5])\t\t\t\t\\\n-      fixed_regs[5] = 1;\t\t\t\t\t\\\n-    else if (TARGET_ARCH64 && fixed_regs[5] == 2)\t\t\\\n-      fixed_regs[5] = 0;\t\t\t\t\t\\\n-    if (! TARGET_V9)\t\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\\\n-\tint regno;\t\t\t\t\t\t\\\n-\tfor (regno = SPARC_FIRST_V9_FP_REG;\t\t\t\\\n-\t     regno <= SPARC_LAST_V9_FP_REG;\t\t\t\\\n-\t     regno++)\t\t\t\t\t\t\\\n-\t  fixed_regs[regno] = 1;\t\t\t\t\\\n-\t/* %fcc0 is used by v8 and v9.  */\t\t\t\\\n-\tfor (regno = SPARC_FIRST_V9_FCC_REG + 1;\t\t\\\n-\t     regno <= SPARC_LAST_V9_FCC_REG;\t\t\t\\\n-\t     regno++)\t\t\t\t\t\t\\\n-\t  fixed_regs[regno] = 1;\t\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\\\n-    if (! TARGET_FPU)\t\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\\\n-\tint regno;\t\t\t\t\t\t\\\n-\tfor (regno = 32; regno < SPARC_LAST_V9_FCC_REG; regno++) \\\n-\t  fixed_regs[regno] = 1;\t\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\\\n-    /* If the user has passed -f{fixed,call-{used,saved}}-g2 */\t\\\n-    /* then honor it.  Likewise with g3 and g4.  */\t\t\\\n-    if (fixed_regs[2] == 2)\t\t\t\t\t\\\n-      fixed_regs[2] = ! TARGET_APP_REGS;\t\t\t\\\n-    if (fixed_regs[3] == 2)\t\t\t\t\t\\\n-      fixed_regs[3] = ! TARGET_APP_REGS;\t\t\t\\\n-    if (TARGET_ARCH32 && fixed_regs[4] == 2)\t\t\t\\\n-      fixed_regs[4] = ! TARGET_APP_REGS;\t\t\t\\\n-    else if (TARGET_CM_EMBMEDANY)\t\t\t\t\\\n-      fixed_regs[4] = 1;\t\t\t\t\t\\\n-    else if (fixed_regs[4] == 2)\t\t\t\t\\\n-      fixed_regs[4] = 0;\t\t\t\t\t\\\n-  }\t\t\t\t\t\t\t\t\\\n-while (0)\n-\n /* Return number of consecutive hard regs needed starting at reg REGNO\n    to hold something of mode MODE.\n    This is ordinarily the length in words of a value of mode MODE"}, {"sha": "fa945352731d513d575de4b4a6e3a89ef1b83f28", "filename": "gcc/config/spu/spu-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fspu%2Fspu-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fspu%2Fspu-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu-protos.h?ref=5efd84c50326ffd904e376abc150fec01cdb06fb", "patch": "@@ -58,7 +58,6 @@ extern rtx spu_function_value (const_tree type, const_tree func);\n extern void spu_setup_incoming_varargs (int *cum, enum machine_mode mode,\n \t\t\t\t\ttree type, int *pretend_size,\n \t\t\t\t\tint no_rtl);\n-extern void spu_conditional_register_usage (void);\n extern int spu_expand_mov (rtx * ops, enum machine_mode mode);\n extern int spu_split_load (rtx * ops);\n extern int spu_split_store (rtx * ops);"}, {"sha": "92845d7129cb62eb5483212561cd4358d1f09e3d", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=5efd84c50326ffd904e376abc150fec01cdb06fb", "patch": "@@ -231,6 +231,7 @@ static section *spu_select_section (tree, int, unsigned HOST_WIDE_INT);\n static void spu_unique_section (tree, int);\n static rtx spu_expand_load (rtx, rtx, rtx, int);\n static void spu_trampoline_init (rtx, tree, rtx);\n+static void spu_conditional_register_usage (void);\n \n /* Which instruction set architecture to use.  */\n int spu_arch;\n@@ -489,6 +490,9 @@ static const struct attribute_spec spu_attribute_table[] =\n #undef TARGET_EXCEPT_UNWIND_INFO\n #define TARGET_EXCEPT_UNWIND_INFO  sjlj_except_unwind_info\n \n+#undef TARGET_CONDITIONAL_REGISTER_USAGE\n+#define TARGET_CONDITIONAL_REGISTER_USAGE spu_conditional_register_usage\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n static void\n@@ -4285,7 +4289,7 @@ spu_setup_incoming_varargs (CUMULATIVE_ARGS * cum, enum machine_mode mode,\n     }\n }\n \f\n-void\n+static void\n spu_conditional_register_usage (void)\n {\n   if (flag_pic)"}, {"sha": "234ff49f1148169f427fe50364c93b4fc57e2bdc", "filename": "gcc/config/spu/spu.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fspu%2Fspu.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fspu%2Fspu.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.h?ref=5efd84c50326ffd904e376abc150fec01cdb06fb", "patch": "@@ -167,9 +167,6 @@ extern GTY(()) int spu_tune;\n     1, 1, 1 \\\n }\n \n-#define CONDITIONAL_REGISTER_USAGE \\\n-\tspu_conditional_register_usage()\n-\n \f\n /* Values in Registers */\n "}, {"sha": "1b3f3e483050efe0b3659cc490aa46a4d394f92e", "filename": "gcc/config/v850/v850.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fv850%2Fv850.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fv850%2Fv850.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.c?ref=5efd84c50326ffd904e376abc150fec01cdb06fb", "patch": "@@ -3064,6 +3064,20 @@ v850_can_eliminate (const int from ATTRIBUTE_UNUSED, const int to)\n   return (to == STACK_POINTER_REGNUM ? ! frame_pointer_needed : true);\n }\n \n+/* Worker function for TARGET_CONDITIONAL_REGISTER_USAGE.\n+\n+   If TARGET_APP_REGS is not defined then add r2 and r5 to\n+   the pool of fixed registers. See PR 14505.  */\n+\n+static void\n+v850_conditional_register_usage (void)\n+{\n+  if (TARGET_APP_REGS)\n+    {\n+     fixed_regs[2] = 0;  call_used_regs[2] = 0;\n+     fixed_regs[5] = 0;  call_used_regs[5] = 1;\n+    }\n+}\n \f\n /* Worker function for TARGET_ASM_TRAMPOLINE_TEMPLATE.  */\n \n@@ -3194,6 +3208,9 @@ static const struct attribute_spec v850_attribute_table[] =\n #undef  TARGET_CAN_ELIMINATE\n #define TARGET_CAN_ELIMINATE v850_can_eliminate\n \n+#undef  TARGET_CONDITIONAL_REGISTER_USAGE\n+#define TARGET_CONDITIONAL_REGISTER_USAGE v850_conditional_register_usage\n+\n #undef  TARGET_ASM_TRAMPOLINE_TEMPLATE\n #define TARGET_ASM_TRAMPOLINE_TEMPLATE v850_asm_trampoline_template\n #undef  TARGET_TRAMPOLINE_INIT"}, {"sha": "c9bd7b2632a97e9d99435d1c966850653ccf42bd", "filename": "gcc/config/v850/v850.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fv850%2Fv850.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fconfig%2Fv850%2Fv850.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.h?ref=5efd84c50326ffd904e376abc150fec01cdb06fb", "patch": "@@ -256,18 +256,6 @@ extern struct small_memory_info small_memory[(int)SMALL_MEMORY_max];\n   34, 35\t\t\t\t\t\t\t\t\\\n }\n \n-/* If TARGET_APP_REGS is not defined then add r2 and r5 to\n-   the pool of fixed registers. See PR 14505.  */\n-#define CONDITIONAL_REGISTER_USAGE             \\\n-{                                              \\\n-  if (TARGET_APP_REGS)                         \\\n-    {                                          \\\n-     fixed_regs[2] = 0;  call_used_regs[2] = 0;        \\\n-     fixed_regs[5] = 0;  call_used_regs[5] = 1;        \\\n-    }                                          \\\n- }\n-\n-\n /* Return number of consecutive hard regs needed starting at reg REGNO\n    to hold something of mode MODE.\n "}, {"sha": "fd3f426e1069c86d3074f0f3a22d01b04a78e053", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=5efd84c50326ffd904e376abc150fec01cdb06fb", "patch": "@@ -1916,8 +1916,8 @@ preserve the entire contents of a register across a call.\n @findex global_regs\n @findex reg_names\n @findex reg_class_contents\n-@defmac CONDITIONAL_REGISTER_USAGE\n-Zero or more C statements that may conditionally modify five variables\n+@deftypefn {Target Hook} void TARGET_CONDITIONAL_REGISTER_USAGE (void)\n+This hook may conditionally modify five variables\n @code{fixed_regs}, @code{call_used_regs}, @code{global_regs},\n @code{reg_names}, and @code{reg_class_contents}, to take into account\n any dependence of these register sets on target flags.  The first three\n@@ -1932,8 +1932,6 @@ from @code{FIXED_REGISTERS}, @code{CALL_USED_REGISTERS},\n @option{-fcall-used-@var{reg}} and @option{-fcall-saved-@var{reg}}\n command options have been applied.\n \n-You need not define this macro if it has no work to do.\n-\n @cindex disabling certain registers\n @cindex controlling register usage\n If the usage of an entire class of registers depends on the target\n@@ -1948,7 +1946,7 @@ is called with a letter for a class that shouldn't be used.\n of the insn patterns whose constraints permit this class are\n controlled by target switches, then GCC will automatically avoid using\n these registers when the target switches are opposed to them.)\n-@end defmac\n+@end deftypefn\n \n @defmac INCOMING_REGNO (@var{out})\n Define this macro if the target machine has register windows.  This C"}, {"sha": "ea4c8430a19d86250a7b01957d285154b36f6159", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=5efd84c50326ffd904e376abc150fec01cdb06fb", "patch": "@@ -1906,8 +1906,8 @@ preserve the entire contents of a register across a call.\n @findex global_regs\n @findex reg_names\n @findex reg_class_contents\n-@defmac CONDITIONAL_REGISTER_USAGE\n-Zero or more C statements that may conditionally modify five variables\n+@hook TARGET_CONDITIONAL_REGISTER_USAGE\n+This hook may conditionally modify five variables\n @code{fixed_regs}, @code{call_used_regs}, @code{global_regs},\n @code{reg_names}, and @code{reg_class_contents}, to take into account\n any dependence of these register sets on target flags.  The first three\n@@ -1922,8 +1922,6 @@ from @code{FIXED_REGISTERS}, @code{CALL_USED_REGISTERS},\n @option{-fcall-used-@var{reg}} and @option{-fcall-saved-@var{reg}}\n command options have been applied.\n \n-You need not define this macro if it has no work to do.\n-\n @cindex disabling certain registers\n @cindex controlling register usage\n If the usage of an entire class of registers depends on the target\n@@ -1938,7 +1936,7 @@ is called with a letter for a class that shouldn't be used.\n of the insn patterns whose constraints permit this class are\n controlled by target switches, then GCC will automatically avoid using\n these registers when the target switches are opposed to them.)\n-@end defmac\n+@end deftypefn\n \n @defmac INCOMING_REGNO (@var{out})\n Define this macro if the target machine has register windows.  This C"}, {"sha": "1543340d6914b563d53fc58d608789402b4788c6", "filename": "gcc/reginfo.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Freginfo.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Freginfo.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freginfo.c?ref=5efd84c50326ffd904e376abc150fec01cdb06fb", "patch": "@@ -342,12 +342,9 @@ init_reg_sets_1 (void)\n     inv_reg_alloc_order[reg_alloc_order[i]] = i;\n #endif\n \n-  /* This macro allows the fixed or call-used registers\n-     and the register classes to depend on target flags.  */\n+  /* Let the target tweak things if necessary.  */\n \n-#ifdef CONDITIONAL_REGISTER_USAGE\n-  CONDITIONAL_REGISTER_USAGE;\n-#endif\n+  targetm.conditional_register_usage ();\n \n   /* Compute number of hard regs in each class.  */\n "}, {"sha": "cace4f56aaf1b5ecbaa84986eebc3e8811c6d84e", "filename": "gcc/system.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=5efd84c50326ffd904e376abc150fec01cdb06fb", "patch": "@@ -784,7 +784,7 @@ extern void fancy_abort (const char *, int, const char *) ATTRIBUTE_NORETURN;\n \tASM_DECLARE_CONSTANT_NAME MODIFY_TARGET_NAME SWITCHES_NEED_SPACES  \\\n \tSWITCH_CURTAILS_COMPILATION SWITCH_TAKES_ARG WORD_SWITCH_TAKES_ARG \\\n \tTARGET_OPTION_TRANSLATE_TABLE HANDLE_PRAGMA_PACK_PUSH_POP\t   \\\n-\tHANDLE_SYSV_PRAGMA HANDLE_PRAGMA_WEAK\n+\tHANDLE_SYSV_PRAGMA HANDLE_PRAGMA_WEAK CONDITIONAL_REGISTER_USAGE\n \n /* Hooks that are no longer used.  */\n  #pragma GCC poison LANG_HOOKS_FUNCTION_MARK LANG_HOOKS_FUNCTION_FREE\t\\"}, {"sha": "199b58cfc131200e3e519e6b4544dff6c4754a03", "filename": "gcc/target.def", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efd84c50326ffd904e376abc150fec01cdb06fb/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=5efd84c50326ffd904e376abc150fec01cdb06fb", "patch": "@@ -2258,6 +2258,15 @@ DEFHOOK\n  bool, (const int from_reg, const int to_reg),\n  hook_bool_const_int_const_int_true)\n \n+/* Modify any or all of fixed_regs, call_used_regs, global_regs,\n+   reg_names, and reg_class_contents to account of the vagaries of the\n+   target.  */\n+DEFHOOK\n+(conditional_register_usage,\n+ \"\",\n+ void, (void),\n+ hook_void_void)\n+\n /* Functions specific to the C family of frontends.  */\n #undef HOOK_PREFIX\n #define HOOK_PREFIX \"TARGET_C_\""}]}