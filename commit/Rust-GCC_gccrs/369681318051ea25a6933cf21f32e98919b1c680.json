{"sha": "369681318051ea25a6933cf21f32e98919b1c680", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzY5NjgxMzE4MDUxZWEyNWE2OTMzY2YyMWYzMmU5ODkxOWIxYzY4MA==", "commit": {"author": {"name": "Pete Steinmetz", "email": "steinmtz@us.ibm.com", "date": "2006-02-07T08:07:00Z"}, "committer": {"name": "Maxim Kuvyrkov", "email": "mkuvyrkov@gcc.gnu.org", "date": "2006-02-07T08:07:00Z"}, "message": "sched-rgn.c (compute_dom_prob_ps, [...]): Eradicate use of float in probability computations.\n\n2006-02-07  Pete Steinmetz  <steinmtz@us.ibm.com>\n\n        * sched-rgn.c (compute_dom_prob_ps, compute_trg_info): Eradicate\n\tuse of float in probability computations.  Use edge probabilities\n\tin place of statically computed probabilities.\n\t(min_spec_prob): New static variable.\n\t(schedule_insns): Initialize it.\n\t(GET_SRC_PROB): Removed.\n\t* doc/invoke.texi (min-sched-prob): Renamed to min-spec-prob.\n\nFrom-SVN: r110690", "tree": {"sha": "60685cd31e24d54842717f66aef62e7b261ea539", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/60685cd31e24d54842717f66aef62e7b261ea539"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/369681318051ea25a6933cf21f32e98919b1c680", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/369681318051ea25a6933cf21f32e98919b1c680", "html_url": "https://github.com/Rust-GCC/gccrs/commit/369681318051ea25a6933cf21f32e98919b1c680", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/369681318051ea25a6933cf21f32e98919b1c680/comments", "author": {"login": "steinmtz", "id": 51826110, "node_id": "MDQ6VXNlcjUxODI2MTEw", "avatar_url": "https://avatars.githubusercontent.com/u/51826110?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steinmtz", "html_url": "https://github.com/steinmtz", "followers_url": "https://api.github.com/users/steinmtz/followers", "following_url": "https://api.github.com/users/steinmtz/following{/other_user}", "gists_url": "https://api.github.com/users/steinmtz/gists{/gist_id}", "starred_url": "https://api.github.com/users/steinmtz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steinmtz/subscriptions", "organizations_url": "https://api.github.com/users/steinmtz/orgs", "repos_url": "https://api.github.com/users/steinmtz/repos", "events_url": "https://api.github.com/users/steinmtz/events{/privacy}", "received_events_url": "https://api.github.com/users/steinmtz/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a58b03427c79a8c3da19a06cd0c59df06b0b3e7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a58b03427c79a8c3da19a06cd0c59df06b0b3e7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a58b03427c79a8c3da19a06cd0c59df06b0b3e7f"}], "stats": {"total": 87, "additions": 42, "deletions": 45}, "files": [{"sha": "b9b17288851e5131470d7ca1040dde4541e49649", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/369681318051ea25a6933cf21f32e98919b1c680/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/369681318051ea25a6933cf21f32e98919b1c680/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=369681318051ea25a6933cf21f32e98919b1c680", "patch": "@@ -1,3 +1,13 @@\n+2006-02-07  Pete Steinmetz  <steinmtz@us.ibm.com>\n+\n+        * sched-rgn.c (compute_dom_prob_ps, compute_trg_info): Eradicate\n+\tuse of float in probability computations.  Use edge probabilities\n+\tin place of statically computed probabilities.\n+\t(min_spec_prob): New static variable.\n+\t(schedule_insns): Initialize it.\n+\t(GET_SRC_PROB): Removed.\n+\t* doc/invoke.texi (min-sched-prob): Renamed to min-spec-prob.\n+\n 2006-02-07  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR debug/24444"}, {"sha": "08426754218f12d97866dd81ffa8b296216dd98a", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/369681318051ea25a6933cf21f32e98919b1c680/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/369681318051ea25a6933cf21f32e98919b1c680/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=369681318051ea25a6933cf21f32e98919b1c680", "patch": "@@ -6176,9 +6176,9 @@ interblock scheduling.  The default value is 10.\n The maximum number of insns in a region to be considered for\n interblock scheduling.  The default value is 100.\n \n-@item min-sched-prob\n-The minimum probability of reaching a source block for interblock\n-speculative scheduling.  The default value is 40.\n+@item min-spec-prob\n+The minimum probability (in percents) of reaching a source block\n+for interblock speculative scheduling.  The default value is 40.\n \n @item max-last-value-rtl\n "}, {"sha": "3109786576f03298612861e8f9cca0e8dd26dfa7", "filename": "gcc/sched-rgn.c", "status": "modified", "additions": 29, "deletions": 42, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/369681318051ea25a6933cf21f32e98919b1c680/gcc%2Fsched-rgn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/369681318051ea25a6933cf21f32e98919b1c680/gcc%2Fsched-rgn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-rgn.c?ref=369681318051ea25a6933cf21f32e98919b1c680", "patch": "@@ -119,6 +119,10 @@ static int *block_to_bb;\n /* The number of the region containing a block.  */\n static int *containing_rgn;\n \n+/* The minimum probability of reaching a source block so that it will be\n+   considered for speculative scheduling.  */\n+static int min_spec_prob;\n+\n #define RGN_NR_BLOCKS(rgn) (rgn_table[rgn].rgn_nr_blocks)\n #define RGN_BLOCKS(rgn) (rgn_table[rgn].rgn_blocks)\n #define BLOCK_TO_BB(block) (block_to_bb[block])\n@@ -211,15 +215,9 @@ static sbitmap *dom;\n #define IS_DOMINATED(bb_src, bb_trg)                                 \\\n ( TEST_BIT (dom[bb_src], bb_trg) )\n \n-/* Probability: Prob[i] is a float in [0, 1] which is the probability\n-   of bb i relative to the region entry.  */\n-static float *prob;\n-\n-/* The probability of bb_src, relative to bb_trg.  Note, that while the\n-   'prob[bb]' is a float in [0, 1], this macro returns an integer\n-   in [0, 100].  */\n-#define GET_SRC_PROB(bb_src, bb_trg) ((int) (100.0 * (prob[bb_src] / \\\n-\t\t\t\t\t\t      prob[bb_trg])))\n+/* Probability: Prob[i] is an int in [0, REG_BR_PROB_BASE] which is\n+   the probability of bb i relative to the region entry.  */\n+static int *prob;\n \n /* Bit-set of edges, where bit i stands for edge i.  */\n typedef sbitmap edgeset;\n@@ -898,24 +896,27 @@ find_rgns (void)\n static void\n compute_dom_prob_ps (int bb)\n {\n-  int pred_bb;\n-  int nr_out_edges, nr_rgn_out_edges;\n-  edge_iterator in_ei, out_ei;\n-  edge in_edge, out_edge;\n+  edge_iterator in_ei;\n+  edge in_edge;\n \n-  prob[bb] = 0.0;\n   if (IS_RGN_ENTRY (bb))\n     {\n       SET_BIT (dom[bb], 0);\n-      prob[bb] = 1.0;\n+      prob[bb] = REG_BR_PROB_BASE;\n       return;\n     }\n \n+  prob[bb] = 0;\n+\n   /* Initialize dom[bb] to '111..1'.  */\n   sbitmap_ones (dom[bb]);\n \n   FOR_EACH_EDGE (in_edge, in_ei, BASIC_BLOCK (BB_TO_BLOCK (bb))->preds)\n     {\n+      int pred_bb;\n+      edge out_edge;\n+      edge_iterator out_ei;\n+\n       if (in_edge->src == ENTRY_BLOCK_PTR)\n \tcontinue;\n \n@@ -928,38 +929,18 @@ compute_dom_prob_ps (int bb)\n \n       sbitmap_a_or_b (pot_split[bb], pot_split[bb], pot_split[pred_bb]);\n \n-      nr_out_edges = 0;\n-      nr_rgn_out_edges = 0;\n-\n       FOR_EACH_EDGE (out_edge, out_ei, in_edge->src->succs)\n-\t{\n-\t  ++nr_out_edges;\n+\tSET_BIT (pot_split[bb], EDGE_TO_BIT (out_edge));\n \n-\t  /* The successor doesn't belong in the region?  */\n-\t  if (out_edge->dest != EXIT_BLOCK_PTR\n-\t      && CONTAINING_RGN (out_edge->dest->index)\n-\t\t != CONTAINING_RGN (BB_TO_BLOCK (bb)))\n-\t    ++nr_rgn_out_edges;\n-\n-\t  SET_BIT (pot_split[bb], EDGE_TO_BIT (out_edge));\n-\t}\n-\n-      /* Now nr_rgn_out_edges is the number of region-exit edges from\n-         pred, and nr_out_edges will be the number of pred out edges\n-         not leaving the region.  */\n-      nr_out_edges -= nr_rgn_out_edges;\n-      if (nr_rgn_out_edges > 0)\n-\tprob[bb] += 0.9 * prob[pred_bb] / nr_out_edges;\n-      else\n-\tprob[bb] += prob[pred_bb] / nr_out_edges;\n+      prob[bb] += ((prob[pred_bb] * in_edge->probability) / REG_BR_PROB_BASE);\n     }\n \n   SET_BIT (dom[bb], bb);\n   sbitmap_difference (pot_split[bb], pot_split[bb], ancestor_edges[bb]);\n \n   if (sched_verbose >= 2)\n     fprintf (sched_dump, \";;  bb_prob(%d, %d) = %3d\\n\", bb, BB_TO_BLOCK (bb),\n-\t     (int) (100.0 * prob[bb]));\n+\t     (100 * prob[bb]) / REG_BR_PROB_BASE);\n }\n \n /* Functions for target info.  */\n@@ -997,7 +978,7 @@ compute_trg_info (int trg)\n   sp = candidate_table + trg;\n   sp->is_valid = 1;\n   sp->is_speculative = 0;\n-  sp->src_prob = 100;\n+  sp->src_prob = REG_BR_PROB_BASE;\n \n   visited = sbitmap_alloc (last_basic_block);\n \n@@ -1008,8 +989,11 @@ compute_trg_info (int trg)\n       sp->is_valid = IS_DOMINATED (i, trg);\n       if (sp->is_valid)\n \t{\n-\t  sp->src_prob = GET_SRC_PROB (i, trg);\n-\t  sp->is_valid = (sp->src_prob >= PARAM_VALUE (PARAM_MIN_SPEC_PROB));\n+\t  int tf = prob[trg], cf = prob[i];\n+\n+\t  /* In CFGs with low probability edges TF can possibly be zero.  */\n+\t  sp->src_prob = (tf ? ((cf * REG_BR_PROB_BASE) / tf) : 0);\n+\t  sp->is_valid = (sp->src_prob >= min_spec_prob);\n \t}\n \n       if (sp->is_valid)\n@@ -2308,7 +2292,7 @@ schedule_region (int rgn)\n   /* Compute interblock info: probabilities, split-edges, dominators, etc.  */\n   if (current_nr_blocks > 1)\n     {\n-      prob = XNEWVEC (float, current_nr_blocks);\n+      prob = XNEWVEC (int, current_nr_blocks);\n \n       dom = sbitmap_vector_alloc (current_nr_blocks, current_nr_blocks);\n       sbitmap_vector_zero (dom, current_nr_blocks);\n@@ -2530,6 +2514,9 @@ schedule_insns (void)\n   nr_spec = 0;\n   sched_init ();\n \n+  min_spec_prob = ((PARAM_VALUE (PARAM_MIN_SPEC_PROB) * REG_BR_PROB_BASE)\n+\t\t    / 100);\n+\n   init_regions ();\n \n   current_sched_info = &region_sched_info;"}]}