{"sha": "e877898911574037af5aaa68ff6451ec5ced20e9", "node_id": "C_kwDOANBUbNoAKGU4Nzc4OTg5MTE1NzQwMzdhZjVhYWE2OGZmNjQ1MWVjNWNlZDIwZTk", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-05-11T00:16:40Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-05-11T00:16:40Z"}, "message": "Daily bump.", "tree": {"sha": "3ef127b3f1c73dfc1a9cae1d24430638f49cce7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ef127b3f1c73dfc1a9cae1d24430638f49cce7e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e877898911574037af5aaa68ff6451ec5ced20e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e877898911574037af5aaa68ff6451ec5ced20e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e877898911574037af5aaa68ff6451ec5ced20e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e877898911574037af5aaa68ff6451ec5ced20e9/comments", "author": null, "committer": null, "parents": [{"sha": "a4ad92fc4d0d0cdb003f4355a99132f556a06b0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4ad92fc4d0d0cdb003f4355a99132f556a06b0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4ad92fc4d0d0cdb003f4355a99132f556a06b0d"}], "stats": {"total": 587, "additions": 586, "deletions": 1}, "files": [{"sha": "c774186ea9d9f44c61b43682c635d35d8cc7a175", "filename": "gcc/ChangeLog", "status": "modified", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e877898911574037af5aaa68ff6451ec5ced20e9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e877898911574037af5aaa68ff6451ec5ced20e9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e877898911574037af5aaa68ff6451ec5ced20e9", "patch": "@@ -1,3 +1,98 @@\n+2022-05-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/105528\n+\t* gimple-isel.cc (gimple_expand_vec_set_expr): After gsi_remove\n+\tset *gsi to gsi_for_stmt (ass_stmt).  Fix up function comment.\n+\n+2022-05-10  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* doc/md.texi (Defining Mode Iterators): Correct example replacement\n+\ttext.\n+\n+2022-05-10  Maciej W. Rozycki  <macro@embecosm.com>\n+\n+\t* config/riscv/riscv.md (UNSPEC_FMIN, UNSPEC_FMAX): New\n+\tconstants.\n+\t(fmin<mode>3, fmax<mode>3): New insns.\n+\n+2022-05-10  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-if-conv.cc (fold_build_cond_expr): Use\n+\tmatch-and-simplify to simplify the condition.\n+\t(ifcvt_follow_ssa_use_edges): Remove.\n+\t(predicate_scalar_phi): Use follow_all_ssa_edges.\n+\n+2022-05-10  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\tPR middle-end/100400\n+\t* omp-oacc-kernels-decompose.cc\n+\t(visit_loops_in_gang_single_region) <GIMPLE_OMP_FOR>: Explicitly\n+\tcall 'internal_error'.\n+\n+2022-05-10  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/105537\n+\t* toplev.cc (process_options): Move flag_var_tracking\n+\thandling ...\n+\t* opts.cc (finish_options): ... here.\n+\n+2022-05-10  Martin Liska  <mliska@suse.cz>\n+\n+\t* basic-block.h (struct basic_block_d): Use void *\n+\tinstead PTR.\n+\t* cfgloop.h: Likewise.\n+\t* cgraph.h: Likewise.\n+\t* gengtype-state.cc (state_ident_by_name): Likewise.\n+\t(record_type): Likewise.\n+\t(read_state_already_seen_type): Likewise.\n+\t* gengtype.cc (dump_type): Likewise.\n+\t(input_file_by_name): Likewise.\n+\t(main): Likewise.\n+\t* ggc-common.cc (ggc_cleared_alloc_ptr_array_two_args): Likewise.\n+\t* ipa-utils.h (struct ipa_dfs_info): Likewise.\n+\t* plugin.cc (htab_hash_plugin): Likewise.\n+\n+2022-05-10  Richard Biener  <rguenther@suse.de>\n+\n+\t* flags.h (dwarf_debuginfo_p): Add opts argument, guard\n+\tAPI with !GENERATOR_FILE.\n+\t* opts.cc (global_options): Poison.\n+\t(global_options_set): Likewise.\n+\t(finish_options): Refer to options via opts.\n+\n+2022-05-10  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\t    Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* config/i386/i386.md (*testqi_1_maybe_si): Prefer shorter SImode\n+\talternative when optimizing for size and the immediate operand is\n+\tconst_0_to_127_operand.\n+\t(*andqi_2_maybe_si): Likewise.\n+\t* config/i386/predicates.md (const_0_to_127_operand): New predicate.\n+\n+2022-05-10  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* tree-chrec.cc (chrec_apply): Attempt to fold the linear chrec\n+\t\"{a, +, a} (x-1)\" as \"a*x\", as the number of loop iterations, x-1,\n+\tcan't be negative.\n+\n+2022-05-10  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR target/105292\n+\t* config/sparc/sparc.cc (sparc_vectorize_vec_perm_const): Return\n+\ttrue only for 8-byte vector modes.\n+\n+2022-05-10  Siddhesh Poyarekar  <siddhesh@gotplt.org>\n+\n+\tPR middle-end/70090\n+\t* ubsan.cc (ubsan_expand_objsize_ifn): Allow non-constant SIZE.\n+\t(instrument_object_size): Get dynamic object size expression.\n+\n+2022-05-10  Jiufu Guo  <guojiufu@linux.ibm.com>\n+\n+\tPR preprocessor/101168\n+\t* config/rs6000/rs6000-c.cc (rs6000_macro_to_expand):\n+\tAvoid empty identifier.\n+\n 2022-05-09  Qing Zhao  <qing.zhao@oracle.com>\n \n \tPR target/101891"}, {"sha": "3e06743d939b99a40bfac35e4d20150b0fefaebc", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e877898911574037af5aaa68ff6451ec5ced20e9/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e877898911574037af5aaa68ff6451ec5ced20e9/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=e877898911574037af5aaa68ff6451ec5ced20e9", "patch": "@@ -1 +1 @@\n-20220510\n+20220511"}, {"sha": "7e5c660ce83cf8994af2c7ba54bb661a983ef506", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 203, "deletions": 0, "changes": 203, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e877898911574037af5aaa68ff6451ec5ced20e9/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e877898911574037af5aaa68ff6451ec5ced20e9/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e877898911574037af5aaa68ff6451ec5ced20e9", "patch": "@@ -1,3 +1,206 @@\n+2022-05-10  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc-interface/decl.cc (compare_field_bitpos): Use void *\n+\tinstead PTR.\n+\t* gcc-interface/utils2.cc (compare_elmt_bitpos): Likewise.\n+\n+2022-05-10  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* fe.h (Is_Expression_Function): Declare.\n+\t* sem_util.ads (Is_Expression_Function): Add warning line.\n+\n+2022-05-10  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* exp_attr.adb (Expand_N_Attribute_Reference) <Attribute_Valid>:\n+\tDrop redundant range check for nonstandard booleans.\n+\n+2022-05-10  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* exp_util.adb (Adjust_Result_Type): Leave result in\n+\tStandard.Boolean if it's going to be converted to another\n+\tboolean type.\n+\t* exp_ch4.adb (Expand_N_Type_Conversion): When optimizing,\n+\tconvert to nonstandard booleans with an if_expression with\n+\tboolean literals.\n+\n+2022-05-10  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_N_If_Expression): Call Adjust_Condition to\n+\thandle non-standard booleans.\n+\n+2022-05-10  Justin Squirek  <squirek@adacore.com>\n+\n+\t* sem_ch8.adb (Use_One_Type): Remove code in charge of setting\n+\tCurrent_Use_Clause when Id is known to be redundant, and modify\n+\tthe printing of errors associated with redundant use type\n+\tclauses so that line number gets included in more cases.\n+\n+2022-05-10  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_warn.adb (Check_Unset_Reference): Use variant of\n+\tEarlier_In_Extended_Unit that calls Sloc internally.\n+\n+2022-05-10  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* par-ch10.adb, scng.adb, sem_res.adb, sinfo-utils.adb,\n+\ttreepr.adb: Simplify calculations with Source_Ptr and Loc\n+\tvalues.\n+\n+2022-05-10  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Expression_With_Actions): Fix style in\n+\tnested routines.\n+\n+2022-05-10  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* atree.adb, exp_ch6.adb, exp_ch9.adb, ghost.adb, sem_ch3.adb,\n+\tsem_ch4.adb, sem_res.adb, sem_util.adb: Use\n+\tIs_Rewrite_Substitution where possible.\n+\n+2022-05-10  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_ch11.adb, exp_ch5.adb, exp_prag.adb, gnat_cuda.adb,\n+\tsem_ch12.adb, sem_ch3.adb, sem_ch6.adb, sem_util.adb,\n+\ttreepr.adb: Replace /= and = operators with No and Present,\n+\trespectively.\n+\n+2022-05-10  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_warn.adb (Within_Postcondition): Guard against search\n+\tgoing too far.\n+\n+2022-05-10  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_warn.adb (Check_Unset_Reference): The early test was only\n+\tsaving time of calls to Original_Node, Comes_From_Source and\n+\tNkind, which are all quick and cheap.\n+\n+2022-05-10  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch5.adb (Check_Unreachable_Code): Remove inner declare\n+\tblock; refill code and comments.\n+\n+2022-05-10  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper): Replace\n+\tFirst_Entity/Next_Entity with First_Formal/Next_Formal; rename\n+\tE1/E2 to F1/F2.\n+\n+2022-05-10  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Declare_Expression): Check expression for\n+\treferences to unset objects.\n+\t(Resolve_Qualified_Expression): Likewise.\n+\t* sem_warn.adb (Check_Unset_Reference): Remove handling of\n+\tdeclare and qualified expressions; clarify comment for type\n+\tconversions.\n+\n+2022-05-10  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Case_Expression): Check alternative\n+\texpressions for references to unset objects.\n+\t(Resolve_If_Expression): Check condition, then and else\n+\texpressions for references to unset objects.\n+\n+2022-05-10  K\u00e9vin Le Gouguec  <legouguec@adacore.com>\n+\n+\t* doc/gnat_rm/implementation_defined_attributes.rst,\n+\tdoc/gnat_ugn/the_gnat_compilation_model.rst: Fix typos.\n+\t* gnat_rm.texi, gnat_ugn.texi: Regenerate.\n+\n+2022-05-10  Etienne Servais  <servais@adacore.com>\n+\n+\t* sem_ch13.adb (Is_Predicate_Static): Fix typo in comment.\n+\n+2022-05-10  Yannick Moy  <moy@adacore.com>\n+\n+\t* libgnat/s-valuei.adb: Fix indentation.\n+\t* libgnat/s-valuei.ads: Same.\n+\n+2022-05-10  Claire Dross  <dross@adacore.com>\n+\n+\t* snames.ads-tmpl: Add \"Structural\" as a name.\n+\t* sem_prag.adb: (Analyze_Pragma): Accept modifier \"Structural\"\n+\tin pragmas Loop_Variant and Subprogram_Variant. Check that items\n+\tassociated to Structural occur alone in the pragma associations.\n+\t(Analyze_Subprogram_Variant_In_Decl_Part): Idem.\n+\t* exp_prag.adb (Expand_Pragma_Loop_Variant): Discard structural\n+\tvariants.\n+\t(Expand_Pragma_Subprogram_Variant): Idem.\n+\n+2022-05-10  Claire Dross  <dross@adacore.com>\n+\n+\t* libgnat/s-valint.ads: Add SPARK_Mode and pragma to ignore\n+\tassertions in instance and add additional ghost parameters to\n+\tthe instance of Value_I.\n+\t* libgnat/s-vallli.ads: Idem.\n+\t* libgnat/s-valllli.ads: Idem.\n+\t* libgnat/s-valuei.ads, libgnat/s-valuei.adb: New generic\n+\tparameters for ghost functions from System.Valueu. Add\n+\tfunctional contracts.\n+\n+2022-05-10  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Eqyality_Op): Remove obsolete code.\n+\t(Resolve_Op_Not): Likewise.\n+\t* sem_type.adb (Disambiguate): Add missing test for RM 8.4(10).\n+\t* libgnat/s-dwalin.adb (Enable_Cache): Fix ambiguity.\n+\t(Symbolic_Address): Likewise.\n+\n+2022-05-10  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_eval.adb (Eval_Integer_Literal): Fix oversight in entry test.\n+\n+2022-05-10  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_aggr.adb (Expand_N_Aggregate): Replace UI_To_Int with\n+\tUI_To_CC; replace magic literals with high-level routines that\n+\trecognise wide and wide wide characters; reorder if-then-elsif\n+\tcondition, because we don't have a routine to detect wide wide\n+\tcharacters.\n+\n+2022-05-10  Etienne Servais  <servais@adacore.com>\n+\n+\t* scng.adb (Nlit): Error on big UI_Scale.\n+\n+2022-05-10  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_util.adb (Build_Task_Array_Image): Declare expanded\n+\tobjects as constants.\n+\t(Build_Task_Image_Prefix): Likewise.\n+\t(Build_Task_Record_Image): Likewise.\n+\n+2022-05-10  Marc Poulhi\u00e8s  <poulhies@adacore.com>\n+\n+\t* checks.adb (Determine_Range): Fix range refining.\n+\n+2022-05-10  Steve Baird  <baird@adacore.com>\n+\n+\t* sem_util.adb (Get_Actual_Subtype): If a new subtype is built,\n+\tdo not freeze it if Expander_Active is False. The idea here is\n+\tto avoid generating an unwanted Freeze_Node for a subtype that\n+\thas been conjured up solely for purposes of preanalysis.\n+\n+2022-05-10  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_util.adb (Build_Task_Array_Image): Fix style in the\n+\tstructure of generated code; add Pref'Length as the component of\n+\tthe Sum initialization expression.\n+\n+2022-05-10  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_prag.adb (Expand_Pragma_Import_Or_Interface): Use\n+\tGet_Char_Code.\n+\t* exp_util.adb (Build_Task_Array_Image): Simplify conversion to\n+\tChar_Code.\n+\t(Build_Task_Image_Prefix): Likewise.\n+\t(Build_Task_Record_Image): Likewise.\n+\t* cstand.adb (Create_Standard): Use UI_From_Int instead of\n+\tUI_From_CC.\n+\t* exp_ch11.adb (Expand_N_Exception_Declaration): Likewise.\n+\t* sem_res.adb (Patch_Up_Value): Likewise.\n+\t* stringt.adb (Write_String_Table_Entry): Use Get_Char_Code.\n+\n 2022-05-09  Yannick Moy  <moy@adacore.com>\n \n \t* sem_util.adb (Bad_Predicated_Subtype_Use): Add continuation"}, {"sha": "af341efa4e01ab2d489513e8b132d795207292e5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e877898911574037af5aaa68ff6451ec5ced20e9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e877898911574037af5aaa68ff6451ec5ced20e9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e877898911574037af5aaa68ff6451ec5ced20e9", "patch": "@@ -1,3 +1,65 @@\n+2022-05-10  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* coroutines.cc (instantiate_coro_traits): Adjust accordingly.\n+\t* cp-tree.def: Remove mention of SET_PACK_EXPANSION_PATTERN.\n+\t* cp-tree.h (SET_PACK_EXPANSION_PATTERN): Remove.\n+\t(SET_ARGUMENT_PACK_ARGS): Remove.\n+\t* module.cc (trees_in::tree_node): Adjust accordingly.\n+\t* parser.cc (make_char_string_pack): Likewise.\n+\t(make_string_pack): Likewise.\n+\t* pt.cc (make_pack_expansion): Likewise.\n+\t(template_parm_to_arg): Likewise.\n+\t(coerce_template_parameter_pack): Likewise.\n+\t(extract_fnparm_pack): Likewise.\n+\t(extract_locals_r): Likewise.\n+\t(make_argument_pack): Likewise.\n+\t(tsubst_argument_pack): Likewise.\n+\t(lookup_init_capture_pack): Likewise.\n+\t(type_unification_real): Likewise.\n+\t(unify_pack_expansion): Likewise.\n+\t(tsubst_initializer_list): Likewise.\n+\n+2022-05-10  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* cp-tree.h (PACK_EXPANSION_CHECK): Define.\n+\t(PACK_EXPANSION_PATTERN): Use PACK_EXPANSION_CHECK.\n+\t(SET_PACK_EXPANSION_PATTERN): Likewise.\n+\t(PACK_EXPANSION_PARAMETER_PACKS): Likewise.\n+\t(PACK_EXPANSION_EXTRA_ARGS): Likewise.\n+\t(PACK_EXPANSION_LOCAL_P): Likewise.\n+\t(PACK_EXPANSION_SIZEOF_P): Likewise.\n+\t(PACK_EXPANSION_AUTO_P): Likewise.\n+\t(PACK_EXPANSION_FORCE_EXTRA_ARGS_P): Likewise.\n+\t(ARGUMENT_PACK_CHECK): Define.\n+\t(ARGUMENT_PACK_ARGS): Use ARGUMENT_PACK_CHECK.\n+\t(SET_ARGUMENT_PACK_ARGS): Likewise.\n+\t* parser.cc (cp_parser_sizeof_pack): Check for error_mark_node\n+\tbefore setting PACK_EXPANSION_SIZEOF_P.\n+\n+2022-05-10  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* cp-tree.h (enum module_kind_bits): Disambiguate purview,\n+\tattach, named module vs header-unit.\n+\t(global_purview_p, not_module_p): Delete.\n+\t(named_module_p): New.\n+\t(header_module_p, module_purview_p): Adjust.\n+\t(module_attach_p, named_module_purview_p): New.\n+\t* decl.cc (duplicate_decls): Adjust.\n+\t* module.cc (declare_module, preprocessed_module): Adjust.\n+\t* name-lookup.cc (init_global_partition): Adjust.\n+\t(get_fixed_binding_slot, pushdecl): Adjust.\n+\t* parser.cc (cp_parser_module_declaration): Adjust.\n+\t(cp_parser_import_declaration, cp_parser_declaration): Adjust.\n+\n+2022-05-10  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/105529\n+\t* decl.cc (maybe_return_this): Replace...\n+\t(finish_constructor_body, finish_destructor_body): ...these.\n+\t(finish_function_body): Call it.\n+\t* optimize.cc (build_delete_destructor_body): Call it.\n+\t* cp-tree.h (maybe_return_this): Declare.\n+\n 2022-05-09  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/103539"}, {"sha": "828f74dd79f0cea135137f4b5eda7ab59391f492", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e877898911574037af5aaa68ff6451ec5ced20e9/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e877898911574037af5aaa68ff6451ec5ced20e9/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=e877898911574037af5aaa68ff6451ec5ced20e9", "patch": "@@ -1,3 +1,10 @@\n+2022-05-10  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/105526\n+\t* resolve.cc (check_team): New.\n+\t(gfc_resolve_code): Add checks for arguments to coarray intrinsics\n+\tFORM TEAM, CHANGE TEAM, and SYNC TEAM.\n+\n 2022-05-09  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/105501"}, {"sha": "d1fad8f0c6425ea7012322860c2fa60c88fa910d", "filename": "gcc/po/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e877898911574037af5aaa68ff6451ec5ced20e9/gcc%2Fpo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e877898911574037af5aaa68ff6451ec5ced20e9/gcc%2Fpo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2FChangeLog?ref=e877898911574037af5aaa68ff6451ec5ced20e9", "patch": "@@ -1,3 +1,7 @@\n+2022-05-10  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* hr.po: Update.\n+\n 2022-05-09  Joseph Myers  <joseph@codesourcery.com>\n \n \t* be.po, da.po, de.po, el.po, es.po, fi.po, fr.po, hr.po, id.po,"}, {"sha": "23733435319dccc93deb4ade6e5d3b092efb5a8a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e877898911574037af5aaa68ff6451ec5ced20e9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e877898911574037af5aaa68ff6451ec5ced20e9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e877898911574037af5aaa68ff6451ec5ced20e9", "patch": "@@ -1,3 +1,94 @@\n+2022-05-10  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/105526\n+\t* gfortran.dg/coarray_50.f90: New test.\n+\n+2022-05-10  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/105472\n+\t* gcc.target/i386/iamcu/asm-support.S: Add .note.GNU-stack section\n+\tonly for Linux.\n+\t* gcc.target/x86_64/abi/asm-support.S: Likewise.\n+\t* gcc.target/x86_64/abi/avx/asm-support.S: Likewise.\n+\t* gcc.target/x86_64/abi/avx512f/asm-support.S: Likewise.\n+\t* gcc.target/x86_64/abi/avx512fp16/asm-support.S: Likewise.\n+\t* gcc.target/x86_64/abi/avx512fp16/m256h/asm-support.S: Likewise.\n+\t* gcc.target/x86_64/abi/avx512fp16/m512h/asm-support.S: Likewise.\n+\t* gcc.target/x86_64/abi/ms-sysv/do-test.S: Likewise.\n+\n+2022-05-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/105528\n+\t* gcc.dg/pr105528.c: New test.\n+\n+2022-05-10  Maciej W. Rozycki  <macro@embecosm.com>\n+\n+\t* gcc.target/riscv/fmax-snan.c: New test.\n+\t* gcc.target/riscv/fmax.c: New test.\n+\t* gcc.target/riscv/fmaxf-snan.c: New test.\n+\t* gcc.target/riscv/fmaxf.c: New test.\n+\t* gcc.target/riscv/fmin-snan.c: New test.\n+\t* gcc.target/riscv/fmin.c: New test.\n+\t* gcc.target/riscv/fminf-snan.c: New test.\n+\t* gcc.target/riscv/fminf.c: New test.\n+\t* gcc.target/riscv/smax-ieee.c: New test.\n+\t* gcc.target/riscv/smax.c: New test.\n+\t* gcc.target/riscv/smaxf-ieee.c: New test.\n+\t* gcc.target/riscv/smaxf.c: New test.\n+\t* gcc.target/riscv/smin-ieee.c: New test.\n+\t* gcc.target/riscv/smin.c: New test.\n+\t* gcc.target/riscv/sminf-ieee.c: New test.\n+\t* gcc.target/riscv/sminf.c: New test.\n+\n+2022-05-10  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\tPR middle-end/100400\n+\t* c-c++-common/goacc/kernels-decompose-pr100400-1-2.c: Specify\n+\t'-Wfatal-errors'.\n+\n+2022-05-10  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/105537\n+\t* gcc.dg/torture/pr105537.c: New testcase.\n+\n+2022-05-10  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\t    Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* gcc.target/i386/and-1.c: New test case.\n+\n+2022-05-10  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* gcc.dg/tree-ssa/pr65855-2.c: New test case.\n+\n+2022-05-10  Claire Dross  <dross@adacore.com>\n+\n+\t* gnat.dg/loopvar.adb: Update expected error message.\n+\n+2022-05-10  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/equal7.adb: Add expected error messages (code is now\n+\tillegal).\n+\n+2022-05-10  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc.target/sparc/20220510-1.c: New test.\n+\n+2022-05-10  Siddhesh Poyarekar  <siddhesh@gotplt.org>\n+\n+\tPR middle-end/70090\n+\t* gcc.dg/ubsan/object-size-dyn.c: New test.\n+\n+2022-05-10  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/105529\n+\t* g++.dg/cpp2a/constexpr-dtor13.C: New test.\n+\t* g++.dg/cpp2a/constexpr-dtor14.C: New test.\n+\n+2022-05-10  Jiufu Guo  <guojiufu@linux.ibm.com>\n+\n+\tPR preprocessor/101168\n+\t* g++.target/powerpc/pr101168.C: New test.\n+\n 2022-05-09  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/103539"}, {"sha": "57e93465e375c498aa199c405da1b0790b5ae256", "filename": "include/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e877898911574037af5aaa68ff6451ec5ced20e9/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e877898911574037af5aaa68ff6451ec5ced20e9/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=e877898911574037af5aaa68ff6451ec5ced20e9", "patch": "@@ -1,3 +1,15 @@\n+2022-05-10  Martin Liska  <mliska@suse.cz>\n+\n+\t* ansidecl.h (PTR): Remove.\n+\t(const): Likewise.\n+\t(volatile): Likewise.\n+\t(signed): Likewise.\n+\n+2022-05-10  Martin Liska  <mliska@suse.cz>\n+\n+\t* hashtab.h (HTAB_EMPTY_ENTRY): Use void * instead PTR.\n+\t(HTAB_DELETED_ENTRY): Likewise.\n+\n 2022-05-09  Martin Liska  <mliska@suse.cz>\n \n \t* ansidecl.h (PTR): Remove Not ANCI C part."}, {"sha": "25f5c192a682ea80d99a7c23abbf8306b6fc1f79", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e877898911574037af5aaa68ff6451ec5ced20e9/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e877898911574037af5aaa68ff6451ec5ced20e9/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=e877898911574037af5aaa68ff6451ec5ced20e9", "patch": "@@ -1,3 +1,10 @@\n+2022-05-10  Martin Liska  <mliska@suse.cz>\n+\t    Hans-Peter Helfert  <peter-helfert@t-online.de>\n+\n+\tPR gcov-profile/105535\n+\t* libgcov.h (struct gcov_info): Use gcov_unsigned_t for\n+\tn_functions.\n+\n 2022-05-02  Martin Liska  <mliska@suse.cz>\n \n \t* libgcov-driver.c: Add ATTRIBUTE_UNUSED."}, {"sha": "56656b5699499e958333bcc5aba3582633ee8eb2", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e877898911574037af5aaa68ff6451ec5ced20e9/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e877898911574037af5aaa68ff6451ec5ced20e9/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=e877898911574037af5aaa68ff6451ec5ced20e9", "patch": "@@ -1,3 +1,8 @@\n+2022-05-10  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* testsuite/libgomp.fortran/use_device_addr-5.f90: Fix up\n+\tmulti-device testing.\n+\n 2022-05-06  Marcel Vollweiler  <marcel@codesourcery.com>\n \n \t* libgomp.map: Added omp_target_is_accessible."}, {"sha": "159fd8c8851141e50812b876cada87fc006092c7", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e877898911574037af5aaa68ff6451ec5ced20e9/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e877898911574037af5aaa68ff6451ec5ced20e9/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=e877898911574037af5aaa68ff6451ec5ced20e9", "patch": "@@ -1,3 +1,79 @@\n+2022-05-10  Martin Liska  <mliska@suse.cz>\n+\n+\t* regex.c: Restore comments.\n+\n+2022-05-10  Martin Liska  <mliska@suse.cz>\n+\t    Alan Modra  <amodra@gmail.com>\n+\n+\t* hashtab.c (htab_empty): Use void * type instead of void **.\n+\t(htab_expand): Likewise.\n+\n+2022-05-10  Martin Liska  <mliska@suse.cz>\n+\n+\t* random.c: Remove 'define PTR'.\n+\n+2022-05-10  Martin Liska  <mliska@suse.cz>\n+\n+\t* alloca.c (C_alloca): Use void * instead PTR.\n+\t* calloc.c (malloc): Likewise.\n+\t(bzero): Likewise.\n+\t(calloc): Likewise.\n+\t* hashtab.c (find_empty_slot_for_expand): Likewise.\n+\t(eq_pointer): Likewise.\n+\t(htab_create_alloc_ex): Likewise.\n+\t(htab_create_typed_alloc): Likewise.\n+\t(htab_set_functions_ex): Likewise.\n+\t(htab_delete): Likewise.\n+\t(htab_empty): Likewise.\n+\t(htab_expand): Likewise.\n+\t(htab_find_with_hash): Likewise.\n+\t(htab_find): Likewise.\n+\t(htab_find_slot_with_hash): Likewise.\n+\t(htab_find_slot): Likewise.\n+\t(htab_remove_elt): Likewise.\n+\t(htab_remove_elt_with_hash): Likewise.\n+\t(htab_clear_slot): Likewise.\n+\t(htab_traverse_noresize): Likewise.\n+\t(htab_traverse): Likewise.\n+\t(htab_hash_string): Likewise.\n+\t(iterative_hash): Likewise.\n+\t(hash_pointer): Likewise.\n+\t* memchr.c (memchr): Likewise.\n+\t* memcmp.c (memcmp): Likewise.\n+\t* memcpy.c (memcpy): Likewise.\n+\t* memmove.c (memmove): Likewise.\n+\t* mempcpy.c (memcpy): Likewise.\n+\t(mempcpy): Likewise.\n+\t* memset.c (memset): Likewise.\n+\t* objalloc.c (malloc): Likewise.\n+\t(free): Likewise.\n+\t(objalloc_create): Likewise.\n+\t(_objalloc_alloc): Likewise.\n+\t(objalloc_free_block): Likewise.\n+\t* random.c (PTR): Likewise.\n+\t(void): Likewise.\n+\t(initstate): Likewise.\n+\t(setstate): Likewise.\n+\t* regex.c: Likewise.\n+\t* spaces.c (malloc): Likewise.\n+\t(free): Likewise.\n+\t* stpcpy.c (memcpy): Likewise.\n+\t* strdup.c (malloc): Likewise.\n+\t(memcpy): Likewise.\n+\t* strerror.c (malloc): Likewise.\n+\t(memset): Likewise.\n+\t* strndup.c (malloc): Likewise.\n+\t(memcpy): Likewise.\n+\t* strsignal.c (malloc): Likewise.\n+\t(memset): Likewise.\n+\t* vasprintf.c (malloc): Likewise.\n+\t* vprintf-support.c: Likewise.\n+\t* xatexit.c (malloc): Likewise.\n+\t* xmalloc.c (xmalloc): Likewise.\n+\t(xcalloc): Likewise.\n+\t(xrealloc): Likewise.\n+\t* xmemdup.c (xmemdup): Likewise.\n+\n 2022-03-19  Tiezhu Yang  <yangtiezhu@loongson.cn>\n \n \t* floatformat.c (floatformat_ieee_quad_big): Renamed from"}, {"sha": "a24f3d59150a80afc665a50df042d08544a21b9e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e877898911574037af5aaa68ff6451ec5ced20e9/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e877898911574037af5aaa68ff6451ec5ced20e9/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e877898911574037af5aaa68ff6451ec5ced20e9", "patch": "@@ -1,3 +1,26 @@\n+2022-05-10  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/105284\n+\t* include/std/iosfwd: Add declarations for <spanstream> class\n+\ttemplates and typedefs.\n+\t* include/std/spanstream (basic_spanbuf, basic_ispanstream)\n+\t(basic_ospanstream, basic_spanstream): Remove default template\n+\targuments.\n+\t* testsuite/27_io/headers/iosfwd/synopsis.cc: Add <spanstream>\n+\tdeclarations.\n+\t* testsuite/27_io/headers/iosfwd/types.cc: Check <spanstream>\n+\tdefault arguments.\n+\n+2022-05-10  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/105284\n+\t* include/std/iosfwd: Add declarations for <synstream> class\n+\ttemplates and typedefs.\n+\t* include/std/syncstream (basic_syncbuf, basic_osyncstream):\n+\tRemove default template arguments.\n+\t* testsuite/27_io/headers/iosfwd/synopsis.cc: New test.\n+\t* testsuite/27_io/headers/iosfwd/types.cc: New test.\n+\n 2022-05-06  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/random.tcc (operator==): Only check"}]}