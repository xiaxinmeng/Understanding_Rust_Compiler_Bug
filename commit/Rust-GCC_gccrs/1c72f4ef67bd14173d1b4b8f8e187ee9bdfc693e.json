{"sha": "1c72f4ef67bd14173d1b4b8f8e187ee9bdfc693e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWM3MmY0ZWY2N2JkMTQxNzNkMWI0YjhmOGUxODdlZTliZGZjNjkzZQ==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "rakdver@gcc.gnu.org", "date": "2003-06-26T09:38:34Z"}, "committer": {"name": "Zdenek Dvorak", "email": "rakdver@gcc.gnu.org", "date": "2003-06-26T09:38:34Z"}, "message": "value-prof.c: New.\n\n\t* value-prof.c: New.\n\t* value-prof.h: New.\n\nFrom-SVN: r68521", "tree": {"sha": "abbc5dc1430427bc019442085e99307b6cf8b7de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/abbc5dc1430427bc019442085e99307b6cf8b7de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c72f4ef67bd14173d1b4b8f8e187ee9bdfc693e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c72f4ef67bd14173d1b4b8f8e187ee9bdfc693e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c72f4ef67bd14173d1b4b8f8e187ee9bdfc693e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c72f4ef67bd14173d1b4b8f8e187ee9bdfc693e/comments", "author": null, "committer": null, "parents": [{"sha": "603ff6b50a8ea981dae3295c025b24accd94833d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/603ff6b50a8ea981dae3295c025b24accd94833d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/603ff6b50a8ea981dae3295c025b24accd94833d"}], "stats": {"total": 165, "additions": 165, "deletions": 0}, "files": [{"sha": "1c8ff4ed917354118e0a48ab9dac04dfebf55d27", "filename": "gcc/value-prof.c", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c72f4ef67bd14173d1b4b8f8e187ee9bdfc693e/gcc%2Fvalue-prof.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c72f4ef67bd14173d1b4b8f8e187ee9bdfc693e/gcc%2Fvalue-prof.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-prof.c?ref=1c72f4ef67bd14173d1b4b8f8e187ee9bdfc693e", "patch": "@@ -0,0 +1,106 @@\n+/* Transformations based on profile information for values.\n+   Copyright (C) 2003 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 2, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to the Free\n+Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n+02111-1307, USA.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"rtl.h\"\n+#include \"expr.h\"\n+#include \"hard-reg-set.h\"\n+#include \"basic-block.h\"\n+#include \"value-prof.h\"\n+#include \"output.h\"\n+#include \"flags.h\"\n+#include \"insn-config.h\"\n+#include \"recog.h\"\n+#include \"optabs.h\"\n+\n+/* In this file value profile based optimizations will be placed (none are\n+   here just now, but they are hopefully coming soon).\n+\n+   Every such optimization should add its requirements for profiled values to\n+   insn_values_to_profile function.  This function is called from branch_prob\n+   in profile.c and the requested values are instrumented by it in the first\n+   compilation with -fprofile-arcs.  The optimization may then read the\n+   gathered data in the second compilation with -fbranch-probablities (the\n+   description of an exact way how to do it will be added here once the\n+   code responsible for reading of the data is merged).  */\n+\n+static void insn_values_to_profile (rtx, unsigned *, struct histogram_value **);\n+\f\n+/* Release the list of VALUES of length N_VALUES for that we want to measure\n+   histograms.  */\n+void\n+free_profiled_values (unsigned n_values ATTRIBUTE_UNUSED,\n+\t\t      struct histogram_value *values)\n+{\n+  free (values);\n+}\n+\n+/* Find values inside INSN for that we want to measure histograms and adds\n+   them to list VALUES (increasing the record of its length in N_VALUES).  */\n+static void\n+insn_values_to_profile (rtx insn ATTRIBUTE_UNUSED,\n+\t\t\tunsigned *n_values ATTRIBUTE_UNUSED,\n+\t\t\tstruct histogram_value **values ATTRIBUTE_UNUSED)\n+{\n+}\n+\n+/* Find list of values for that we want to measure histograms.  */\n+void\n+find_values_to_profile (unsigned *n_values, struct histogram_value **values)\n+{\n+  rtx insn;\n+  unsigned i;\n+\n+  *n_values = 0;\n+  *values = NULL;\n+  for (insn = get_insns (); insn; insn = NEXT_INSN (insn))\n+    insn_values_to_profile (insn, n_values, values);\n+\n+  for (i = 0; i < *n_values; i++)\n+    {\n+      switch ((*values)[i].type)\n+\t{\n+\tcase HIST_TYPE_INTERVAL:\n+\t  (*values)[i].n_counters = (*values)[i].hdata.intvl.steps +\n+\t\t  ((*values)[i].hdata.intvl.may_be_less ? 1 : 0) +\n+\t\t  ((*values)[i].hdata.intvl.may_be_more ? 1 : 0);\n+\t  break;\n+\n+\tcase HIST_TYPE_POW2:\n+\t  (*values)[i].n_counters = GET_MODE_BITSIZE ((*values)[i].mode) +\n+\t\t  ((*values)[i].hdata.pow2.may_be_other ? 1 : 0);\n+\t  break;\n+\n+\tcase HIST_TYPE_SINGLE_VALUE:\n+\t  (*values)[i].n_counters = 3;\n+\t  break;\n+\n+\tcase HIST_TYPE_CONST_DELTA:\n+\t  (*values)[i].n_counters = 4;\n+\t  break;\n+\n+\tdefault:\n+\t  abort ();\n+\t}\n+    }\n+}"}, {"sha": "ddb20288687a2ca67bc2b70d4989b9daa857c20d", "filename": "gcc/value-prof.h", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c72f4ef67bd14173d1b4b8f8e187ee9bdfc693e/gcc%2Fvalue-prof.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c72f4ef67bd14173d1b4b8f8e187ee9bdfc693e/gcc%2Fvalue-prof.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-prof.h?ref=1c72f4ef67bd14173d1b4b8f8e187ee9bdfc693e", "patch": "@@ -0,0 +1,59 @@\n+/* Definitions for transformations based on profile information for values.\n+   Copyright (C) 2003 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 2, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to the Free\n+Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n+02111-1307, USA.  */\n+\n+/* Supported histogram types.  */\n+enum hist_type\n+{\n+  HIST_TYPE_INTERVAL,\t/* Measures histogram of values inside a specified\n+\t\t\t   interval.  */\n+  HIST_TYPE_POW2,\t/* Histogram of power of 2 values.  */\n+  HIST_TYPE_SINGLE_VALUE, /* Tries to identify the value that is (almost)\n+\t\t\t   always constant.  */\n+  HIST_TYPE_CONST_DELTA\t/* Tries to identify the (almost) always constant\n+\t\t\t   difference between two evaluations of a value.  */\n+};\n+\n+/* The value to measure.  */\n+struct histogram_value\n+{\n+  rtx value;\t\t/* The value to profile.  */\n+  enum machine_mode mode; /* And its mode.  */\n+  rtx seq;\t\t/* Insns requiered to count the profiled value.  */\n+  rtx insn;\t\t/* Insn before that to measure.  */\n+  enum hist_type type;\t/* Type of information to measure.  */\n+  unsigned n_counters;\t/* Number of requiered counters.  */\n+  union\n+    {\n+      struct\n+\t{\n+\t  int int_start;\t/* First value in interval.  */\n+\t  int steps;\t\t/* Number of values in it.  */\n+\t  int may_be_less;\t/* May the value be below?  */\n+\t  int may_be_more;\t/* Or above.  */\n+\t} intvl;\t/* Interval histogram data.  */\n+      struct\n+\t{\n+\t  int may_be_other;\t/* If the value may be non-positive or not 2^k.  */\n+\t} pow2;\t\t/* Power of 2 histogram data.  */\n+    } hdata;\t\t/* Profiled information specific data.  */\n+};\n+\n+extern void find_values_to_profile (unsigned *, struct histogram_value **);\n+extern void free_profiled_values (unsigned, struct histogram_value *);"}]}