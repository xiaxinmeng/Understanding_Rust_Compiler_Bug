{"sha": "8b59556e1c72c7c3654a7d7c675832d9fd38b7a0", "node_id": "C_kwDOANBUbNoAKDhiNTk1NTZlMWM3MmM3YzM2NTRhN2Q3YzY3NTgzMmQ5ZmQzOGI3YTA", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2022-03-28T07:31:53Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2022-05-09T10:59:14Z"}, "message": "Optimize vec_setv8{hi,hf}_0 + pmovzxbq to pmovzxbq.\n\ngcc/ChangeLog:\n\n\tPR target/105072\n\t* config/i386/sse.md (*sse4_1_<code>v2qiv2di2<mask_name>_1):\n\tNew define_insn.\n\t(*sse4_1_zero_extendv2qiv2di2_2): New pre_reload\n\tdefine_insn_and_split.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/pr105072.c: New test.", "tree": {"sha": "f1b964d34cf082c4640e72aa3b696e089567ab5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f1b964d34cf082c4640e72aa3b696e089567ab5d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b59556e1c72c7c3654a7d7c675832d9fd38b7a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b59556e1c72c7c3654a7d7c675832d9fd38b7a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b59556e1c72c7c3654a7d7c675832d9fd38b7a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b59556e1c72c7c3654a7d7c675832d9fd38b7a0/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "655ca5aaa970bb5e6727a72be6c3ba9d9f9d5f09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/655ca5aaa970bb5e6727a72be6c3ba9d9f9d5f09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/655ca5aaa970bb5e6727a72be6c3ba9d9f9d5f09"}], "stats": {"total": 69, "additions": 65, "deletions": 4}, "files": [{"sha": "47f8b18b82e6750a3d8e483db860eb76d9b9ef58", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 41, "deletions": 4, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b59556e1c72c7c3654a7d7c675832d9fd38b7a0/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b59556e1c72c7c3654a7d7c675832d9fd38b7a0/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=8b59556e1c72c7c3654a7d7c675832d9fd38b7a0", "patch": "@@ -22297,15 +22297,52 @@\n    (set_attr \"prefix\" \"orig,orig,maybe_evex\")\n    (set_attr \"mode\" \"TI\")])\n \n+(define_insn \"*sse4_1_<code>v2qiv2di2<mask_name>_1\"\n+  [(set (match_operand:V2DI 0 \"register_operand\" \"=v\")\n+\t(any_extend:V2DI\n+\t (match_operand:V2QI 1 \"memory_operand\" \"m\")))]\n+  \"TARGET_SSE4_1 && <mask_avx512vl_condition>\"\n+  \"%vpmov<extsuffix>bq\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\"\n+  [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"prefix\" \"maybe_evex\")\n+   (set_attr \"mode\" \"TI\")])\n+\n (define_expand \"<insn>v2qiv2di2\"\n   [(set (match_operand:V2DI 0 \"register_operand\")\n \t(any_extend:V2DI\n-\t  (match_operand:V2QI 1 \"register_operand\")))]\n+\t (match_operand:V2QI 1 \"nonimmediate_operand\")))]\n   \"TARGET_SSE4_1\"\n {\n-  rtx op1 = force_reg (V2QImode, operands[1]);\n-  op1 = lowpart_subreg (V16QImode, op1, V2QImode);\n-  emit_insn (gen_sse4_1_<code>v2qiv2di2 (operands[0], op1));\n+  if (!MEM_P (operands[1]))\n+    {\n+      rtx op1 = force_reg (V2QImode, operands[1]);\n+      op1 = lowpart_subreg (V16QImode, op1, V2QImode);\n+      emit_insn (gen_sse4_1_<code>v2qiv2di2 (operands[0], op1));\n+      DONE;\n+    }\n+})\n+\n+(define_insn_and_split \"*sse4_1_zero_extendv2qiv2di2_2\"\n+  [(set (match_operand:V2DI 0 \"register_operand\")\n+\t(zero_extend:V2DI\n+\t (vec_select:V2QI\n+\t  (subreg:V16QI\n+\t   (vec_merge:V8_128\n+\t    (vec_duplicate:V8_128\n+\t     (match_operand:<ssescalarmode> 1 \"nonimmediate_operand\"))\n+\t    (match_operand:V8_128 2 \"const0_operand\")\n+\t    (const_int 1)) 0)\n+\t  (parallel [(const_int 0) (const_int 1)]))))]\n+  \"TARGET_SSE4_1 && ix86_pre_reload_split ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(const_int 0)]\n+{\n+  if (!MEM_P (operands[1]))\n+    operands[1] = force_reg (<ssescalarmode>mode, operands[1]);\n+  operands[1] = lowpart_subreg (V2QImode, operands[1], <ssescalarmode>mode);\n+  emit_insn (gen_zero_extendv2qiv2di2 (operands[0], operands[1]));\n   DONE;\n })\n "}, {"sha": "54e229731b8881a53c700730537d41709526b14e", "filename": "gcc/testsuite/gcc.target/i386/pr105072.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b59556e1c72c7c3654a7d7c675832d9fd38b7a0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr105072.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b59556e1c72c7c3654a7d7c675832d9fd38b7a0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr105072.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr105072.c?ref=8b59556e1c72c7c3654a7d7c675832d9fd38b7a0", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-msse4.1 -O2\" } */\n+/* { dg-final { scan-assembler-times {(?n)pmovzxbq[ \\t]+} \"4\" } } */\n+/* { dg-final { scan-assembler-not {(?n)pinsrw[ \\t]+} } } */\n+\n+#include<immintrin.h>\n+\n+__m128i foo (void *p){\n+  return _mm_cvtepu8_epi64(_mm_loadu_si16(p));\n+}\n+\n+__m128i foo2 (short a){\n+  return _mm_cvtepu8_epi64(_mm_set_epi16(0, 0, 0, 0, 0, 0, 0, a));\n+}\n+\n+__m128i\n+foo3 (void *p){\n+  return _mm_cvtepu8_epi64((__m128i)__extension__(__m128h) {*(_Float16 const*)p, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f});\n+}\n+\n+__m128i\n+foo4 (_Float16 a){\n+  return _mm_cvtepu8_epi64((__m128i)__extension__(__m128h) {a, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f});\n+}"}]}