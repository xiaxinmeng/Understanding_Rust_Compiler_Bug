{"sha": "3e759edad2bd521b72e9923956662741374214f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2U3NTllZGFkMmJkNTIxYjcyZTk5MjM5NTY2NjI3NDEzNzQyMTRmNA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-03-07T20:23:32Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-03-07T20:23:32Z"}, "message": "defaults.h (LEGITIMIZE_ADDRESS): Provide a default definition.\n\n\t* defaults.h (LEGITIMIZE_ADDRESS): Provide a default\n\tdefinition.\n\t* config/arc/arc.h, config/fr30/fr30.h, config/frv/frv.h,\n\tconfig/h8300/h8300.h, config/ia64/ia64.h,\n\tconfig/mcore/mcore.h, config/mmix/mmix.h,\n\tconfig/ns32k/ns32k.h, config/pdp11/pdp11.h,\n\tconfig/stormy16/stormy16.h, config/v850/v850.h,\n\tconfig/vax/vax.h (LEGITIMIZE_ADDRESS): Remove.\n\t* doc/tm.texi (LEGITIMIZE_ADDRESS): Mention the default\n\tdefinition.\n\nFrom-SVN: r79066", "tree": {"sha": "a9b99f8d591ff81ce50313ec2d8ae91c9b853062", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9b99f8d591ff81ce50313ec2d8ae91c9b853062"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e759edad2bd521b72e9923956662741374214f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e759edad2bd521b72e9923956662741374214f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e759edad2bd521b72e9923956662741374214f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e759edad2bd521b72e9923956662741374214f4/comments", "author": null, "committer": null, "parents": [{"sha": "cd2f1c7a623809b0b7e2b224e1240fb74f5f0767", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd2f1c7a623809b0b7e2b224e1240fb74f5f0767", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd2f1c7a623809b0b7e2b224e1240fb74f5f0767"}], "stats": {"total": 151, "additions": 18, "deletions": 133}, "files": [{"sha": "62502e6e92f14d26406733617935e3639295fcf0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e759edad2bd521b72e9923956662741374214f4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e759edad2bd521b72e9923956662741374214f4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3e759edad2bd521b72e9923956662741374214f4", "patch": "@@ -1,3 +1,16 @@\n+2004-03-07  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* defaults.h (LEGITIMIZE_ADDRESS): Provide a default\n+\tdefinition.\n+\t* config/arc/arc.h, config/fr30/fr30.h, config/frv/frv.h,\n+\tconfig/h8300/h8300.h, config/ia64/ia64.h,\n+\tconfig/mcore/mcore.h, config/mmix/mmix.h,\n+\tconfig/ns32k/ns32k.h, config/pdp11/pdp11.h,\n+\tconfig/stormy16/stormy16.h, config/v850/v850.h,\n+\tconfig/vax/vax.h (LEGITIMIZE_ADDRESS): Remove.\n+\t* doc/tm.texi (LEGITIMIZE_ADDRESS): Mention the default\n+\tdefinition.\n+\n 2004-03-07  Roger Sayle  <roger@eyesopen.com>\n \n \t* fold-const.c (fold) <IOR_EXPR>: Fold x | x as x."}, {"sha": "18b8f6f9c292ec332b8e59939d3dab758e1ea74f", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e759edad2bd521b72e9923956662741374214f4/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e759edad2bd521b72e9923956662741374214f4/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=3e759edad2bd521b72e9923956662741374214f4", "patch": "@@ -906,21 +906,6 @@ do { \\\n     goto ADDR;\t\t\t\t\t\t\\\n }\n \n-/* Try machine-dependent ways of modifying an illegitimate address\n-   to be legitimate.  If we find one, return the new, valid address.\n-   This macro is used in only one place: `memory_address' in explow.c.\n-\n-   OLDX is the address as it was before break_out_memory_refs was called.\n-   In some cases it is useful to look at this to decide what needs to be done.\n-\n-   MODE and WIN are passed so that this macro can use\n-   GO_IF_LEGITIMATE_ADDRESS.\n-\n-   It is always safe for this macro to do nothing.  It exists to recognize\n-   opportunities to optimize the output.  */\n-\n-#define LEGITIMIZE_ADDRESS(X, OLDX, MODE, WIN)\n-\n /* Go to LABEL if ADDR (a legitimate address expression)\n    has an effect that depends on the machine mode it is used for.  */\n #define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR, LABEL) \\"}, {"sha": "c7459f8320521bc1680f5861add0878bbaf2d5af", "filename": "gcc/config/fr30/fr30.h", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e759edad2bd521b72e9923956662741374214f4/gcc%2Fconfig%2Ffr30%2Ffr30.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e759edad2bd521b72e9923956662741374214f4/gcc%2Fconfig%2Ffr30%2Ffr30.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.h?ref=3e759edad2bd521b72e9923956662741374214f4", "patch": "@@ -988,27 +988,6 @@ do\t\t\t\t\t\t\t\t\t\t\\\n    will reload one or both registers only if neither labeling works.  */\n #define REG_OK_FOR_INDEX_P(X) REG_OK_FOR_BASE_P (X)\n \n-/* A C compound statement that attempts to replace X with a valid memory\n-   address for an operand of mode MODE.  WIN will be a C statement label\n-   elsewhere in the code; the macro definition may use\n-\n-        GO_IF_LEGITIMATE_ADDRESS (MODE, X, WIN);\n-\n-   to avoid further processing if the address has become legitimate.\n-\n-   X will always be the result of a call to `break_out_memory_refs', and OLDX\n-   will be the operand that was given to that function to produce X.\n-\n-   The code generated by this macro should not alter the substructure of X.  If\n-   it transforms X into a more legitimate form, it should assign X (which will\n-   always be a C variable) a new value.\n-\n-   It is not necessary for this macro to come up with a legitimate address.\n-   The compiler has standard ways of doing so in all cases.  In fact, it is\n-   safe for this macro to do nothing.  But often a machine-dependent strategy\n-   can generate better code.  */\n-#define LEGITIMIZE_ADDRESS(X, OLDX, MODE, WIN)\n-\n /* A C statement or compound statement with a conditional `goto LABEL;'\n    executed if memory address X (an RTX) can have different meanings depending\n    on the machine mode of the memory reference it is used for or if the address"}, {"sha": "d1f308282fa770e73f59b58d3d2c5a6d30b0b723", "filename": "gcc/config/frv/frv.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e759edad2bd521b72e9923956662741374214f4/gcc%2Fconfig%2Ffrv%2Ffrv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e759edad2bd521b72e9923956662741374214f4/gcc%2Fconfig%2Ffrv%2Ffrv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.h?ref=3e759edad2bd521b72e9923956662741374214f4", "patch": "@@ -2410,8 +2410,6 @@ __asm__(\"\\n\"\t\t\t\t\t\t\t\t\\\n    will reload one or both registers only if neither labeling works.  */\n #define REG_OK_FOR_INDEX_P(X) REG_OK_FOR_BASE_P (X)\n \n-#define LEGITIMIZE_ADDRESS(X, OLDX, MODE, WIN)\n-\n #define FIND_BASE_TERM frv_find_base_term\n \n /* A C statement or compound statement with a conditional `goto LABEL;'"}, {"sha": "67fe01f7becdd88ecbe0ddc869e9816fa03a671b", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e759edad2bd521b72e9923956662741374214f4/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e759edad2bd521b72e9923956662741374214f4/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=3e759edad2bd521b72e9923956662741374214f4", "patch": "@@ -886,23 +886,6 @@ struct cum_arg\n   while (0)\n #endif\n \f\n-/* Try machine-dependent ways of modifying an illegitimate address\n-   to be legitimate.  If we find one, return the new, valid address.\n-   This macro is used in only one place: `memory_address' in explow.c.\n-\n-   OLDX is the address as it was before break_out_memory_refs was called.\n-   In some cases it is useful to look at this to decide what needs to be done.\n-\n-   MODE and WIN are passed so that this macro can use\n-   GO_IF_LEGITIMATE_ADDRESS.\n-\n-   It is always safe for this macro to do nothing.  It exists to recognize\n-   opportunities to optimize the output.\n-\n-   For the H8/300, don't do anything.  */\n-\n-#define LEGITIMIZE_ADDRESS(X, OLDX, MODE, WIN)  {}\n-\n /* Go to LABEL if ADDR (a legitimate address expression)\n    has an effect that depends on the machine mode it is used for.\n "}, {"sha": "69a2954fa561cc9b0e60aaa79514318c5d5a9821", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e759edad2bd521b72e9923956662741374214f4/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e759edad2bd521b72e9923956662741374214f4/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=3e759edad2bd521b72e9923956662741374214f4", "patch": "@@ -1630,13 +1630,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n #define REG_OK_FOR_INDEX_P(X) REG_OK_FOR_BASE_P (X)\n \n-/* A C compound statement that attempts to replace X with a valid memory\n-   address for an operand of mode MODE.\n-\n-   This must be present, but there is nothing useful to be done here.  */\n-\n-#define LEGITIMIZE_ADDRESS(X, OLDX, MODE, WIN)\n-\n /* A C statement or compound statement with a conditional `goto LABEL;'\n    executed if memory address X (an RTX) can have different meanings depending\n    on the machine mode of the memory reference it is used for or if the address"}, {"sha": "95805d17f4e2df8d8fc65a0eafd33363cb26d0bf", "filename": "gcc/config/mcore/mcore.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e759edad2bd521b72e9923956662741374214f4/gcc%2Fconfig%2Fmcore%2Fmcore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e759edad2bd521b72e9923956662741374214f4/gcc%2Fconfig%2Fmcore%2Fmcore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.h?ref=3e759edad2bd521b72e9923956662741374214f4", "patch": "@@ -806,7 +806,6 @@ extern const enum reg_class reg_class_from_letter[];\n    On the MCore, allow anything but a double.  */\n #define LEGITIMATE_CONSTANT_P(X) (GET_CODE(X) != CONST_DOUBLE)\n \n-#define LEGITIMIZE_ADDRESS(X, OLDX, MODE, WIN)\n /* The macros REG_OK_FOR..._P assume that the arg is a REG rtx\n    and check its validity for a certain class.\n    We have two alternate definitions for each of them."}, {"sha": "b4df95d8d46ab7eaaf14d435fd887ad380613481", "filename": "gcc/config/mmix/mmix.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e759edad2bd521b72e9923956662741374214f4/gcc%2Fconfig%2Fmmix%2Fmmix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e759edad2bd521b72e9923956662741374214f4/gcc%2Fconfig%2Fmmix%2Fmmix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.h?ref=3e759edad2bd521b72e9923956662741374214f4", "patch": "@@ -835,8 +835,6 @@ typedef struct { int regs; int lib; } CUMULATIVE_ARGS;\n \n #define REG_OK_FOR_INDEX_P(X) REG_OK_FOR_BASE_P (X)\n \n-#define LEGITIMIZE_ADDRESS(X, OLDX, MODE, WIN)\n-\n #define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR, LABEL)\n \n #define LEGITIMATE_CONSTANT_P(X) \\"}, {"sha": "f42fde02c3997563e5eabf181cd4ca92b167da5b", "filename": "gcc/config/ns32k/ns32k.h", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e759edad2bd521b72e9923956662741374214f4/gcc%2Fconfig%2Fns32k%2Fns32k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e759edad2bd521b72e9923956662741374214f4/gcc%2Fconfig%2Fns32k%2Fns32k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.h?ref=3e759edad2bd521b72e9923956662741374214f4", "patch": "@@ -1057,23 +1057,6 @@ __transfer_from_trampoline ()\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n }\n \n-/* Try machine-dependent ways of modifying an illegitimate address\n-   to be legitimate.  If we find one, return the new, valid address.\n-   This macro is used in only one place: `memory_address' in explow.c.\n-\n-   OLDX is the address as it was before break_out_memory_refs was called.\n-   In some cases it is useful to look at this to decide what needs to be done.\n-\n-   MODE and WIN are passed so that this macro can use\n-   GO_IF_LEGITIMATE_ADDRESS.\n-\n-   It is always safe for this macro to do nothing.  It exists to recognize\n-   opportunities to optimize the output.\n-\n-   For the ns32k, we do nothing */\n-\n-#define LEGITIMIZE_ADDRESS(X,OLDX,MODE,WIN)   {}\n-\n /* Nonzero if the constant value X is a legitimate general operand\n    when generating PIC code.  It is given that flag_pic is on and\n    that X satisfies CONSTANT_P or is a CONST_DOUBLE.  */"}, {"sha": "568a0adacb92e132a5b680864addb1bc313fcc05", "filename": "gcc/config/pdp11/pdp11.h", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e759edad2bd521b72e9923956662741374214f4/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e759edad2bd521b72e9923956662741374214f4/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.h?ref=3e759edad2bd521b72e9923956662741374214f4", "patch": "@@ -846,22 +846,6 @@ extern int may_call_alloca;\n }\n \n \f\n-/* Try machine-dependent ways of modifying an illegitimate address\n-   to be legitimate.  If we find one, return the new, valid address.\n-   This macro is used in only one place: `memory_address' in explow.c.\n-\n-   OLDX is the address as it was before break_out_memory_refs was called.\n-   In some cases it is useful to look at this to decide what needs to be done.\n-\n-   MODE and WIN are passed so that this macro can use\n-   GO_IF_LEGITIMATE_ADDRESS.\n-\n-   It is always safe for this macro to do nothing.  It exists to recognize\n-   opportunities to optimize the output.  */\n-\n-#define LEGITIMIZE_ADDRESS(X,OLDX,MODE,WIN)\t{}\n-\n-\n /* Go to LABEL if ADDR (a legitimate address expression)\n    has an effect that depends on the machine mode it is used for.\n    On the pdp this is for predec/postinc */"}, {"sha": "be69dcb3304ae413c08bc73688980a66055ed8d9", "filename": "gcc/config/stormy16/stormy16.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e759edad2bd521b72e9923956662741374214f4/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e759edad2bd521b72e9923956662741374214f4/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.h?ref=3e759edad2bd521b72e9923956662741374214f4", "patch": "@@ -594,8 +594,6 @@ do {\t\t\t\t\t\t\t\\\n \n #define REG_OK_FOR_INDEX_P(X) REG_OK_FOR_BASE_P (X)\n \n-#define LEGITIMIZE_ADDRESS(X, OLDX, MODE, WIN)\n-\n /* On this chip, this is true if the address is valid with an offset\n    of 0 but not of 6, because in that case it cannot be used as an\n    address for DImode or DFmode, or if the address is a post-increment"}, {"sha": "6f3282184d7aee6c3d4ad6674179a663f7e25c1c", "filename": "gcc/config/v850/v850.h", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e759edad2bd521b72e9923956662741374214f4/gcc%2Fconfig%2Fv850%2Fv850.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e759edad2bd521b72e9923956662741374214f4/gcc%2Fconfig%2Fv850%2Fv850.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.h?ref=3e759edad2bd521b72e9923956662741374214f4", "patch": "@@ -976,21 +976,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n } while (0)\n \n \f\n-/* Try machine-dependent ways of modifying an illegitimate address\n-   to be legitimate.  If we find one, return the new, valid address.\n-   This macro is used in only one place: `memory_address' in explow.c.\n-\n-   OLDX is the address as it was before break_out_memory_refs was called.\n-   In some cases it is useful to look at this to decide what needs to be done.\n-\n-   MODE and WIN are passed so that this macro can use\n-   GO_IF_LEGITIMATE_ADDRESS.\n-\n-   It is always safe for this macro to do nothing.  It exists to recognize\n-   opportunities to optimize the output.  */\n-\n-#define LEGITIMIZE_ADDRESS(X,OLDX,MODE,WIN)  {}\n-\n /* Go to LABEL if ADDR (a legitimate address expression)\n    has an effect that depends on the machine mode it is used for.  */\n "}, {"sha": "1cfcd51f8718e3cdad0d45b4cf5dc2fc9c4d4fec", "filename": "gcc/config/vax/vax.h", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e759edad2bd521b72e9923956662741374214f4/gcc%2Fconfig%2Fvax%2Fvax.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e759edad2bd521b72e9923956662741374214f4/gcc%2Fconfig%2Fvax%2Fvax.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.h?ref=3e759edad2bd521b72e9923956662741374214f4", "patch": "@@ -758,23 +758,6 @@ enum reg_class { NO_REGS, ALL_REGS, LIM_REG_CLASSES };\n \t    goto ADDR;\t\t\t\t\t\t\t\\\n \t  GO_IF_REG_PLUS_INDEX (XEXP (X, 0), MODE, ADDR); } } }\n \f\n-/* Try machine-dependent ways of modifying an illegitimate address\n-   to be legitimate.  If we find one, return the new, valid address.\n-   This macro is used in only one place: `memory_address' in explow.c.\n-\n-   OLDX is the address as it was before break_out_memory_refs was called.\n-   In some cases it is useful to look at this to decide what needs to be done.\n-\n-   MODE and WIN are passed so that this macro can use\n-   GO_IF_LEGITIMATE_ADDRESS.\n-\n-   It is always safe for this macro to do nothing.  It exists to recognize\n-   opportunities to optimize the output.\n-\n-   For the VAX, nothing needs to be done.  */\n-\n-#define LEGITIMIZE_ADDRESS(X,OLDX,MODE,WIN)  {}\n-\n /* Go to LABEL if ADDR (a legitimate address expression)\n    has an effect that depends on the machine mode it is used for.\n    On the VAX, the predecrement and postincrement address depend thus"}, {"sha": "7d34e3cd30b4c70b9a265102980abf7b75584abf", "filename": "gcc/defaults.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e759edad2bd521b72e9923956662741374214f4/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e759edad2bd521b72e9923956662741374214f4/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=3e759edad2bd521b72e9923956662741374214f4", "patch": "@@ -703,4 +703,8 @@ You Lose!  You must define PREFERRED_DEBUGGING_TYPE!\n #define SHIFT_COUNT_TRUNCATED 0\n #endif\n \n+#ifndef LEGITIMIZE_ADDRESS\n+#define LEGITIMIZE_ADDRESS(X, OLDX, MODE, WIN)\n+#endif\n+\n #endif  /* ! GCC_DEFAULTS_H */"}, {"sha": "f464bea2eaec30634464b53003079eee68dfd335", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e759edad2bd521b72e9923956662741374214f4/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e759edad2bd521b72e9923956662741374214f4/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=3e759edad2bd521b72e9923956662741374214f4", "patch": "@@ -4914,7 +4914,7 @@ should assign @var{x} (which will always be a C variable) a new value.\n \n It is not necessary for this macro to come up with a legitimate\n address.  The compiler has standard ways of doing so in all cases.  In\n-fact, it is safe for this macro to do nothing.  But often a\n+fact, it is safe to omit this macro.  But often a\n machine-dependent strategy can generate better code.\n @end defmac\n "}]}