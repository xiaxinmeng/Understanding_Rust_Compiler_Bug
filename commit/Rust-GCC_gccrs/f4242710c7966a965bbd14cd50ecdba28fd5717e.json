{"sha": "f4242710c7966a965bbd14cd50ecdba28fd5717e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjQyNDI3MTBjNzk2NmE5NjViYmQxNGNkNTBlY2RiYTI4ZmQ1NzE3ZQ==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2021-06-03T12:06:38Z"}, "committer": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2021-06-03T12:06:38Z"}, "message": "arm: Auto-vectorization for MVE: vabs\n\nThis patch adds support for auto-vectorization of absolute value\ncomputation using vabs.\n\nWe use a similar pattern to what is used in neon.md and extend the\nexisting neg<mode>2 expander to match both 'neg' and 'abs'.  This\nimplies renaming the existing abs<mode>2 define_insn in neon.md to\navoid a clash with the new expander with the same name.\n\n2021-06-03  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\tgcc/\n\t* config/arm/mve.md (mve_vabsq_f<mode>): Use 'abs' instead of unspec.\n\t(mve_vabsq_s<mode>): Likewise.\n\t* config/arm/neon.md (abs<mode>2): Rename to neon_abs<mode>2.\n\t* config/arm/unspecs.md (VABSQ_F, VABSQ_S): Delete.\n\t* config/arm/vec-common.md (neg<mode>2): Rename to\n\t<absneg_str><mode>2.\n\n\tgcc/testsuite/\n\t* gcc.target/arm/simd/mve-vabs.c: New test.", "tree": {"sha": "6680644bbeaba68bfc680b6a61e00a702c81c79c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6680644bbeaba68bfc680b6a61e00a702c81c79c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f4242710c7966a965bbd14cd50ecdba28fd5717e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4242710c7966a965bbd14cd50ecdba28fd5717e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4242710c7966a965bbd14cd50ecdba28fd5717e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4242710c7966a965bbd14cd50ecdba28fd5717e/comments", "author": null, "committer": null, "parents": [{"sha": "1eff5289b273041c9d71a4829c2600d283186ab6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1eff5289b273041c9d71a4829c2600d283186ab6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1eff5289b273041c9d71a4829c2600d283186ab6"}], "stats": {"total": 58, "additions": 49, "deletions": 9}, "files": [{"sha": "0bfa6a91d55c9bb0bbfe111c69d5f068ce22d0c0", "filename": "gcc/config/arm/mve.md", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4242710c7966a965bbd14cd50ecdba28fd5717e/gcc%2Fconfig%2Farm%2Fmve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4242710c7966a965bbd14cd50ecdba28fd5717e/gcc%2Fconfig%2Farm%2Fmve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmve.md?ref=f4242710c7966a965bbd14cd50ecdba28fd5717e", "patch": "@@ -269,8 +269,7 @@\n (define_insn \"mve_vabsq_f<mode>\"\n   [\n    (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n-\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"w\")]\n-\t VABSQ_F))\n+\t(abs:MVE_0 (match_operand:MVE_0 1 \"s_register_operand\" \"w\")))\n   ]\n   \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n   \"vabs.f%#<V_sz_elem>  %q0, %q1\"\n@@ -481,8 +480,7 @@\n (define_insn \"mve_vabsq_s<mode>\"\n   [\n    (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n-\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")]\n-\t VABSQ_S))\n+\t(abs:MVE_2 (match_operand:MVE_2 1 \"s_register_operand\" \"w\")))\n   ]\n   \"TARGET_HAVE_MVE\"\n   \"vabs.s%#<V_sz_elem>\\t%q0, %q1\""}, {"sha": "077c62ffd20ada5edf9f6ada437565b0efa63c0c", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4242710c7966a965bbd14cd50ecdba28fd5717e/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4242710c7966a965bbd14cd50ecdba28fd5717e/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=f4242710c7966a965bbd14cd50ecdba28fd5717e", "patch": "@@ -739,7 +739,7 @@\n   [(set_attr \"type\" \"neon_move<q>\")]\n )\n \n-(define_insn \"abs<mode>2\"\n+(define_insn \"neon_abs<mode>2\"\n   [(set (match_operand:VDQW 0 \"s_register_operand\" \"=w\")\n \t(abs:VDQW (match_operand:VDQW 1 \"s_register_operand\" \"w\")))]\n   \"TARGET_NEON\""}, {"sha": "ed1bc293b7843b4f7a06769ae37cc44fd041b8c4", "filename": "gcc/config/arm/unspecs.md", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4242710c7966a965bbd14cd50ecdba28fd5717e/gcc%2Fconfig%2Farm%2Funspecs.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4242710c7966a965bbd14cd50ecdba28fd5717e/gcc%2Fconfig%2Farm%2Funspecs.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Funspecs.md?ref=f4242710c7966a965bbd14cd50ecdba28fd5717e", "patch": "@@ -538,7 +538,6 @@\n   VRNDAQ_F\n   VREV64Q_F\n   VDUPQ_N_F\n-  VABSQ_F\n   VREV32Q_F\n   VCVTTQ_F32_F16\n   VCVTBQ_F32_F16\n@@ -562,7 +561,6 @@\n   VCLSQ_S\n   VADDVQ_S\n   VADDVQ_U\n-  VABSQ_S\n   VREV32Q_U\n   VREV32Q_S\n   VMOVLTQ_U"}, {"sha": "80b273229f5d8b59ba5da14a22c62a74db684261", "filename": "gcc/config/arm/vec-common.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4242710c7966a965bbd14cd50ecdba28fd5717e/gcc%2Fconfig%2Farm%2Fvec-common.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4242710c7966a965bbd14cd50ecdba28fd5717e/gcc%2Fconfig%2Farm%2Fvec-common.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fvec-common.md?ref=f4242710c7966a965bbd14cd50ecdba28fd5717e", "patch": "@@ -208,9 +208,9 @@\n   \"ARM_HAVE_<MODE>_ARITH && !TARGET_REALLY_IWMMXT\"\n )\n \n-(define_expand \"neg<mode>2\"\n+(define_expand \"<absneg_str><mode>2\"\n   [(set (match_operand:VDQWH 0 \"s_register_operand\" \"\")\n-\t(neg:VDQWH (match_operand:VDQWH 1 \"s_register_operand\" \"\")))]\n+\t(ABSNEG:VDQWH (match_operand:VDQWH 1 \"s_register_operand\" \"\")))]\n   \"ARM_HAVE_<MODE>_ARITH && !TARGET_REALLY_IWMMXT\"\n )\n "}, {"sha": "64cd1c2eb4a838acbf2449b86be21f980a6753d3", "filename": "gcc/testsuite/gcc.target/arm/simd/mve-vabs.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4242710c7966a965bbd14cd50ecdba28fd5717e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fmve-vabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4242710c7966a965bbd14cd50ecdba28fd5717e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fmve-vabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fmve-vabs.c?ref=f4242710c7966a965bbd14cd50ecdba28fd5717e", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O3 -funsafe-math-optimizations\" } */\n+\n+#include <stdint.h>\n+#include <arm_mve.h>\n+\n+#define ABS(a) ((a < 0) ? -a : a)\n+\n+#define FUNC(SIGN, TYPE, BITS, NB, NAME)\t\t\t\t\\\n+  void test_ ## NAME ##_ ## SIGN ## BITS ## x ## NB (TYPE##BITS##_t * __restrict__ dest, TYPE##BITS##_t *a) { \\\n+    int i;\t\t\t\t\t\t\t\t\\\n+    for (i=0; i<NB; i++) {\t\t\t\t\t\t\\\n+      dest[i] = ABS(a[i]);\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+}\n+\n+#define FUNC_FLOAT(SIGN, TYPE, BITS, NB, NAME)\t\t\t\t\\\n+  void test_ ## NAME ##_ ## SIGN ## BITS ## x ## NB (TYPE * __restrict__ dest, TYPE *a) { \\\n+    int i;\t\t\t\t\t\t\t\t\\\n+    for (i=0; i<NB; i++) {\t\t\t\t\t\t\\\n+      dest[i] = ABS(a[i]);\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+}\n+\n+/* 128-bit vectors.  */\n+FUNC(s, int, 32, 4, vabs)\n+FUNC(u, uint, 32, 4, vabs)\n+FUNC(s, int, 16, 8, vabs)\n+FUNC(u, uint, 16, 8, vabs)\n+FUNC(s, int, 8, 16, vabs)\n+FUNC(u, uint, 8, 16, vabs)\n+FUNC_FLOAT(f, float, 32, 4, vabs)\n+FUNC(f, float, 16, 8, vabs)\n+\n+/* Taking the absolute value of an unsigned value is a no-op, so half of the\n+   integer optimizations actually generate a call to memmove, the other ones a\n+   'vabs'.  */\n+/* { dg-final { scan-assembler-times {vabs.s[0-9]+\\tq[0-9]+, q[0-9]+} 3 } } */\n+/* { dg-final { scan-assembler-times {vabs.f[0-9]+  q[0-9]+, q[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vldr[bhw].[0-9]+\\tq[0-9]+} 5 } } */\n+/* { dg-final { scan-assembler-times {vstr[bhw].[0-9]+\\tq[0-9]+} 5 } } */\n+/* { dg-final { scan-assembler-times {memmove} 3 } } */"}]}