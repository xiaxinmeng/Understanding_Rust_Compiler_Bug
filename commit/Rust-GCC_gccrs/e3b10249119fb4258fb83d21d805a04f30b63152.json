{"sha": "e3b10249119fb4258fb83d21d805a04f30b63152", "node_id": "C_kwDOANBUbNoAKGUzYjEwMjQ5MTE5ZmI0MjU4ZmI4M2QyMWQ4MDVhMDRmMzBiNjMxNTI", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-11-06T16:30:47Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-11-06T16:30:47Z"}, "message": "libstdc++: Declare const global variables inline\n\nThe changes inside the regex_constants and execution namespaces seem to\nbe (the only) unimplemented parts of P0607R0 \"Inline Variable for the\nStandard Library\"; the rest of the changes are to implementation details.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/atomic_wait.h (_detail::__platform_wait_alignment):\n\tDeclare inline.  Remove redundant static specifier.\n\t(__detail::__atomic_spin_count_relax): Declare inline.\n\t(__detail::__atomic_spin_count): Likewise.\n\t* include/bits/regex_automaton.h (__detail::_S_invalid_state_id):\n\tDeclare inline for C++17.  Declare constexpr.  Remove\n\tredundant const and static specifiers.\n\t* include/bits/regex_error.h (regex_constants::error_collate):\n\tDeclare inline for C++17 as per P0607R0.\n\t(regex_constants::error_ctype): Likewise.\n\t(regex_constants::error_escape): Likewise.\n\t(regex_constants::error_backref): Likewise.\n\t(regex_constants::error_brack): Likewise.\n\t(regex_constants::error_paren): Likewise.\n\t(regex_constants::error_brace): Likewise.\n\t(regex_constants::error_badbrace): Likewise.\n\t(regex_constants::error_range): Likewise.\n\t(regex_constants::error_space): Likewise.\n\t(regex_constants::error_badrepeat): Likewise.\n\t(regex_constants::error_complexity): Likewise.\n\t(regex_constants::error_stack): Likewise.\n\t* include/ext/concurrence.h (__gnu_cxx::__default_lock_policy):\n\tLikewise.  Remove redundant static specifier.\n\t* include/pstl/execution_defs.h (execution::seq): Declare inline\n\tfor C++17 as per P0607R0.\n\t(execution::par): Likewise.\n\t(execution::par_unseq): Likewise.\n\t(execution::unseq): Likewise.", "tree": {"sha": "e240d056b96f08273a9ffb841c47303f75f70954", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e240d056b96f08273a9ffb841c47303f75f70954"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3b10249119fb4258fb83d21d805a04f30b63152", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3b10249119fb4258fb83d21d805a04f30b63152", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3b10249119fb4258fb83d21d805a04f30b63152", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3b10249119fb4258fb83d21d805a04f30b63152/comments", "author": null, "committer": null, "parents": [{"sha": "4e4e3ffd10f53ef71696bc728ab40258751a2df4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e4e3ffd10f53ef71696bc728ab40258751a2df4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e4e3ffd10f53ef71696bc728ab40258751a2df4"}], "stats": {"total": 46, "additions": 23, "deletions": 23}, "files": [{"sha": "bd1ed56d15765bb1d15f32a1adeb3677b57d5a3f", "filename": "libstdc++-v3/include/bits/atomic_wait.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3b10249119fb4258fb83d21d805a04f30b63152/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_wait.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3b10249119fb4258fb83d21d805a04f30b63152/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_wait.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_wait.h?ref=e3b10249119fb4258fb83d21d805a04f30b63152", "patch": "@@ -58,14 +58,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #ifdef _GLIBCXX_HAVE_LINUX_FUTEX\n #define _GLIBCXX_HAVE_PLATFORM_WAIT 1\n     using __platform_wait_t = int;\n-    static constexpr size_t __platform_wait_alignment = 4;\n+    inline constexpr size_t __platform_wait_alignment = 4;\n #else\n // define _GLIBCX_HAVE_PLATFORM_WAIT and implement __platform_wait()\n // and __platform_notify() if there is a more efficient primitive supported\n // by the platform (e.g. __ulock_wait()/__ulock_wake()) which is better than\n // a mutex/condvar based wait.\n     using __platform_wait_t = uint64_t;\n-    static constexpr size_t __platform_wait_alignment\n+    inline constexpr size_t __platform_wait_alignment\n       = __alignof__(__platform_wait_t);\n #endif\n   } // namespace __detail\n@@ -142,8 +142,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n     }\n \n-    constexpr auto __atomic_spin_count_relax = 12;\n-    constexpr auto __atomic_spin_count = 16;\n+    inline constexpr auto __atomic_spin_count_relax = 12;\n+    inline constexpr auto __atomic_spin_count = 16;\n \n     struct __default_spin_policy\n     {"}, {"sha": "44bde42e2126575135ddffd5bf7a02b747dc5e15", "filename": "libstdc++-v3/include/bits/regex_automaton.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3b10249119fb4258fb83d21d805a04f30b63152/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_automaton.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3b10249119fb4258fb83d21d805a04f30b63152/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_automaton.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_automaton.h?ref=e3b10249119fb4258fb83d21d805a04f30b63152", "patch": "@@ -46,7 +46,7 @@ namespace __detail\n    */\n \n   typedef long _StateIdT;\n-  static const _StateIdT _S_invalid_state_id  = -1;\n+  _GLIBCXX17_INLINE constexpr _StateIdT _S_invalid_state_id  = -1;\n \n   template<typename _CharT>\n     using _Matcher = std::function<bool (_CharT)>;"}, {"sha": "ab207650d445a4c3cb4aaca68b91a576014bfb51", "filename": "libstdc++-v3/include/bits/regex_error.h", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3b10249119fb4258fb83d21d805a04f30b63152/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_error.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3b10249119fb4258fb83d21d805a04f30b63152/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_error.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_error.h?ref=e3b10249119fb4258fb83d21d805a04f30b63152", "patch": "@@ -66,60 +66,60 @@ namespace regex_constants\n     };\n \n   /** The expression contained an invalid collating element name. */\n-  constexpr error_type error_collate(_S_error_collate);\n+  _GLIBCXX17_INLINE constexpr error_type error_collate(_S_error_collate);\n \n   /** The expression contained an invalid character class name. */\n-  constexpr error_type error_ctype(_S_error_ctype);\n+  _GLIBCXX17_INLINE constexpr error_type error_ctype(_S_error_ctype);\n \n   /**\n    * The expression contained an invalid escaped character, or a trailing\n    * escape.\n    */\n-  constexpr error_type error_escape(_S_error_escape);\n+  _GLIBCXX17_INLINE constexpr error_type error_escape(_S_error_escape);\n \n   /** The expression contained an invalid back reference. */\n-  constexpr error_type error_backref(_S_error_backref);\n+  _GLIBCXX17_INLINE constexpr error_type error_backref(_S_error_backref);\n \n   /** The expression contained mismatched [ and ]. */\n-  constexpr error_type error_brack(_S_error_brack);\n+  _GLIBCXX17_INLINE constexpr error_type error_brack(_S_error_brack);\n \n   /** The expression contained mismatched ( and ). */\n-  constexpr error_type error_paren(_S_error_paren);\n+  _GLIBCXX17_INLINE constexpr error_type error_paren(_S_error_paren);\n \n   /** The expression contained mismatched { and } */\n-  constexpr error_type error_brace(_S_error_brace);\n+  _GLIBCXX17_INLINE constexpr error_type error_brace(_S_error_brace);\n \n   /** The expression contained an invalid range in a {} expression. */\n-  constexpr error_type error_badbrace(_S_error_badbrace);\n+  _GLIBCXX17_INLINE constexpr error_type error_badbrace(_S_error_badbrace);\n \n   /**\n    * The expression contained an invalid character range,\n    * such as [b-a] in most encodings.\n    */\n-  constexpr error_type error_range(_S_error_range);\n+  _GLIBCXX17_INLINE constexpr error_type error_range(_S_error_range);\n \n   /**\n    * There was insufficient memory to convert the expression into a\n    * finite state machine.\n    */\n-  constexpr error_type error_space(_S_error_space);\n+  _GLIBCXX17_INLINE constexpr error_type error_space(_S_error_space);\n \n   /**\n    * One of <em>*?+{</em> was not preceded by a valid regular expression.\n    */\n-  constexpr error_type error_badrepeat(_S_error_badrepeat);\n+  _GLIBCXX17_INLINE constexpr error_type error_badrepeat(_S_error_badrepeat);\n \n   /**\n    * The complexity of an attempted match against a regular expression\n    * exceeded a pre-set level.\n    */\n-  constexpr error_type error_complexity(_S_error_complexity);\n+  _GLIBCXX17_INLINE constexpr error_type error_complexity(_S_error_complexity);\n \n   /**\n    * There was insufficient memory to determine whether the\n    * regular expression could match the specified character sequence.\n    */\n-  constexpr error_type error_stack(_S_error_stack);\n+  _GLIBCXX17_INLINE constexpr error_type error_stack(_S_error_stack);\n \n   ///@}\n } // namespace regex_constants"}, {"sha": "7fd81490eff5d091ad007d56f7d8eed1f6069b39", "filename": "libstdc++-v3/include/ext/concurrence.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3b10249119fb4258fb83d21d805a04f30b63152/libstdc%2B%2B-v3%2Finclude%2Fext%2Fconcurrence.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3b10249119fb4258fb83d21d805a04f30b63152/libstdc%2B%2B-v3%2Finclude%2Fext%2Fconcurrence.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fconcurrence.h?ref=e3b10249119fb4258fb83d21d805a04f30b63152", "patch": "@@ -50,7 +50,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // Compile time constant that indicates prefered locking policy in\n   // the current configuration.\n-  static const _Lock_policy __default_lock_policy = \n+  _GLIBCXX17_INLINE const _Lock_policy __default_lock_policy =\n #ifndef __GTHREADS\n   _S_single;\n #elif defined _GLIBCXX_HAVE_ATOMIC_LOCK_POLICY"}, {"sha": "3eca558dac2254fda5ac770b508a89d2f80f2347", "filename": "libstdc++-v3/include/pstl/execution_defs.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3b10249119fb4258fb83d21d805a04f30b63152/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fexecution_defs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3b10249119fb4258fb83d21d805a04f30b63152/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fexecution_defs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fexecution_defs.h?ref=e3b10249119fb4258fb83d21d805a04f30b63152", "patch": "@@ -107,10 +107,10 @@ class unsequenced_policy\n };\n \n // 2.8, Execution policy objects\n-constexpr sequenced_policy seq{};\n-constexpr parallel_policy par{};\n-constexpr parallel_unsequenced_policy par_unseq{};\n-constexpr unsequenced_policy unseq{};\n+_GLIBCXX17_INLINE constexpr sequenced_policy seq{};\n+_GLIBCXX17_INLINE constexpr parallel_policy par{};\n+_GLIBCXX17_INLINE constexpr parallel_unsequenced_policy par_unseq{};\n+_GLIBCXX17_INLINE constexpr unsequenced_policy unseq{};\n \n // 2.3, Execution policy type trait\n template <class _Tp>"}]}