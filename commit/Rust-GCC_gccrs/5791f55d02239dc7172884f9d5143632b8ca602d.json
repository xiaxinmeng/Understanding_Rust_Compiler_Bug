{"sha": "5791f55d02239dc7172884f9d5143632b8ca602d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTc5MWY1NWQwMjIzOWRjNzE3Mjg4NGY5ZDUxNDM2MzJiOGNhNjAyZA==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2016-08-26T10:22:08Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2016-08-26T10:22:08Z"}, "message": "[ARM] Refactor MOVW/MOVT fusion logic to allow extension\n\n\t* config/arm/arm.c (arm_sets_movw_movt_fusible_p): New function.\n\t(aarch_macro_fusion_pair_p): Use above to avoid early return.\n\nFrom-SVN: r239771", "tree": {"sha": "7a517b2ff4d5f706203ba4354eb725581b88fe53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a517b2ff4d5f706203ba4354eb725581b88fe53"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5791f55d02239dc7172884f9d5143632b8ca602d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5791f55d02239dc7172884f9d5143632b8ca602d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5791f55d02239dc7172884f9d5143632b8ca602d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5791f55d02239dc7172884f9d5143632b8ca602d/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "209ca542cadd7ae7dc174bc74e066ed1de246672", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/209ca542cadd7ae7dc174bc74e066ed1de246672", "html_url": "https://github.com/Rust-GCC/gccrs/commit/209ca542cadd7ae7dc174bc74e066ed1de246672"}], "stats": {"total": 94, "additions": 55, "deletions": 39}, "files": [{"sha": "9c82debc2f452ef9cab27849f4c4453073088aab", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5791f55d02239dc7172884f9d5143632b8ca602d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5791f55d02239dc7172884f9d5143632b8ca602d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5791f55d02239dc7172884f9d5143632b8ca602d", "patch": "@@ -1,3 +1,8 @@\n+2016-08-26  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/arm/arm.c (arm_sets_movw_movt_fusible_p): New function.\n+\t(aarch_macro_fusion_pair_p): Use above to avoid early return.\n+\n 2016-08-26  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n \t    Martin Jambhor  <mjambor@suse.cz>\n "}, {"sha": "43a832eeb5cb4ba4642e9388c022c196130af04d", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 50, "deletions": 39, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5791f55d02239dc7172884f9d5143632b8ca602d/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5791f55d02239dc7172884f9d5143632b8ca602d/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=5791f55d02239dc7172884f9d5143632b8ca602d", "patch": "@@ -29914,11 +29914,57 @@ arm_macro_fusion_p (void)\n   return current_tune->fusible_ops != tune_params::FUSE_NOTHING;\n }\n \n+/* Return true if the two back-to-back sets PREV_SET, CURR_SET are suitable\n+   for MOVW / MOVT macro fusion.  */\n+\n+static bool\n+arm_sets_movw_movt_fusible_p (rtx prev_set, rtx curr_set)\n+{\n+  /* We are trying to fuse\n+     movw imm / movt imm\n+    instructions as a group that gets scheduled together.  */\n+\n+  rtx set_dest = SET_DEST (curr_set);\n+\n+  if (GET_MODE (set_dest) != SImode)\n+    return false;\n+\n+  /* We are trying to match:\n+     prev (movw)  == (set (reg r0) (const_int imm16))\n+     curr (movt) == (set (zero_extract (reg r0)\n+\t\t\t\t\t(const_int 16)\n+\t\t\t\t\t(const_int 16))\n+\t\t\t  (const_int imm16_1))\n+     or\n+     prev (movw) == (set (reg r1)\n+\t\t\t  (high (symbol_ref (\"SYM\"))))\n+    curr (movt) == (set (reg r0)\n+\t\t\t(lo_sum (reg r1)\n+\t\t\t\t(symbol_ref (\"SYM\"))))  */\n+\n+    if (GET_CODE (set_dest) == ZERO_EXTRACT)\n+      {\n+\tif (CONST_INT_P (SET_SRC (curr_set))\n+\t    && CONST_INT_P (SET_SRC (prev_set))\n+\t    && REG_P (XEXP (set_dest, 0))\n+\t    && REG_P (SET_DEST (prev_set))\n+\t    && REGNO (XEXP (set_dest, 0)) == REGNO (SET_DEST (prev_set)))\n+\t  return true;\n+\n+      }\n+    else if (GET_CODE (SET_SRC (curr_set)) == LO_SUM\n+\t     && REG_P (SET_DEST (curr_set))\n+\t     && REG_P (SET_DEST (prev_set))\n+\t     && GET_CODE (SET_SRC (prev_set)) == HIGH\n+\t     && REGNO (SET_DEST (curr_set)) == REGNO (SET_DEST (prev_set)))\n+      return true;\n+\n+  return false;\n+}\n \n static bool\n aarch_macro_fusion_pair_p (rtx_insn* prev, rtx_insn* curr)\n {\n-  rtx set_dest;\n   rtx prev_set = single_set (prev);\n   rtx curr_set = single_set (curr);\n \n@@ -29936,45 +29982,10 @@ aarch_macro_fusion_pair_p (rtx_insn* prev, rtx_insn* curr)\n       && aarch_crypto_can_dual_issue (prev, curr))\n     return true;\n \n-  if (current_tune->fusible_ops & tune_params::FUSE_MOVW_MOVT)\n-    {\n-      /* We are trying to fuse\n-\t movw imm / movt imm\n-\t instructions as a group that gets scheduled together.  */\n-\n-      set_dest = SET_DEST (curr_set);\n-\n-      if (GET_MODE (set_dest) != SImode)\n-\treturn false;\n+  if (current_tune->fusible_ops & tune_params::FUSE_MOVW_MOVT\n+      && arm_sets_movw_movt_fusible_p (prev_set, curr_set))\n+    return true;\n \n-      /* We are trying to match:\n-\t prev (movw)  == (set (reg r0) (const_int imm16))\n-\t curr (movt) == (set (zero_extract (reg r0)\n-\t\t\t\t\t  (const_int 16)\n-\t\t\t\t\t   (const_int 16))\n-\t\t\t     (const_int imm16_1))\n-\t or\n-\t prev (movw) == (set (reg r1)\n-\t\t\t      (high (symbol_ref (\"SYM\"))))\n-\t curr (movt) == (set (reg r0)\n-\t\t\t     (lo_sum (reg r1)\n-\t\t\t\t     (symbol_ref (\"SYM\"))))  */\n-      if (GET_CODE (set_dest) == ZERO_EXTRACT)\n-\t{\n-\t  if (CONST_INT_P (SET_SRC (curr_set))\n-\t      && CONST_INT_P (SET_SRC (prev_set))\n-\t      && REG_P (XEXP (set_dest, 0))\n-\t      && REG_P (SET_DEST (prev_set))\n-\t      && REGNO (XEXP (set_dest, 0)) == REGNO (SET_DEST (prev_set)))\n-\t    return true;\n-\t}\n-      else if (GET_CODE (SET_SRC (curr_set)) == LO_SUM\n-\t       && REG_P (SET_DEST (curr_set))\n-\t       && REG_P (SET_DEST (prev_set))\n-\t       && GET_CODE (SET_SRC (prev_set)) == HIGH\n-\t       && REGNO (SET_DEST (curr_set)) == REGNO (SET_DEST (prev_set)))\n-\t     return true;\n-    }\n   return false;\n }\n "}]}