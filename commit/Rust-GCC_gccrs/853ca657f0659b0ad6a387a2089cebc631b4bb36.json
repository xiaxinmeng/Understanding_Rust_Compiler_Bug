{"sha": "853ca657f0659b0ad6a387a2089cebc631b4bb36", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODUzY2E2NTdmMDY1OWIwYWQ2YTM4N2EyMDg5Y2ViYzYzMWI0YmIzNg==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-09-26T16:22:09Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-09-26T16:22:09Z"}, "message": "ByteBufferHelper.java: Totally reworked with help from Eric Blake.\n\n2003-09-26  Michael Koch  <konqueror@gmx.de>\n\n\t* java/nio/ByteBufferHelper.java:\n\tTotally reworked with help from Eric Blake.\n\nFrom-SVN: r71823", "tree": {"sha": "7e4838b6be9223bb2b14c5b3d424287858d95407", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e4838b6be9223bb2b14c5b3d424287858d95407"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/853ca657f0659b0ad6a387a2089cebc631b4bb36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/853ca657f0659b0ad6a387a2089cebc631b4bb36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/853ca657f0659b0ad6a387a2089cebc631b4bb36", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/853ca657f0659b0ad6a387a2089cebc631b4bb36/comments", "author": null, "committer": null, "parents": [{"sha": "e72ed0004210cdaa7f3a6ea49a6a11ed687f84d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e72ed0004210cdaa7f3a6ea49a6a11ed687f84d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e72ed0004210cdaa7f3a6ea49a6a11ed687f84d1"}], "stats": {"total": 311, "additions": 82, "deletions": 229}, "files": [{"sha": "2d4e17db1722446403d398be1b6045134153cf8a", "filename": "libjava/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/853ca657f0659b0ad6a387a2089cebc631b4bb36/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/853ca657f0659b0ad6a387a2089cebc631b4bb36/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=853ca657f0659b0ad6a387a2089cebc631b4bb36", "patch": "@@ -1,3 +1,8 @@\n+2003-09-26  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/nio/ByteBufferHelper.java:\n+\tTotally reworked with help from Eric Blake.\n+\n 2003-09-26  Tom Tromey  <tromey@redhat.com>\n \n \t* java/awt/geom/RoundRectangle2D.java (getPathIterator): Wrote."}, {"sha": "2f85186de94ac65298eeb37357ad715c9d6db57a", "filename": "libjava/java/nio/ByteBufferHelper.java", "status": "modified", "additions": 77, "deletions": 229, "changes": 306, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/853ca657f0659b0ad6a387a2089cebc631b4bb36/libjava%2Fjava%2Fnio%2FByteBufferHelper.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/853ca657f0659b0ad6a387a2089cebc631b4bb36/libjava%2Fjava%2Fnio%2FByteBufferHelper.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2FByteBufferHelper.java?ref=853ca657f0659b0ad6a387a2089cebc631b4bb36", "patch": "@@ -88,13 +88,13 @@ public static final ByteBuffer putChar (ByteBuffer buffer, char value)\n \n     if (buffer.order() == ByteOrder.LITTLE_ENDIAN)\n       {\n-        buffer.put ((byte) (((int) value) & 0x00ff));\n-        buffer.put ((byte) ((((int) value) & 0xff00) >> 8));\n+        buffer.put ((byte) (value & 0x00ff));\n+        buffer.put ((byte) ((value & 0xff00) >> 8));\n       }\n     else\n       {\n-        buffer.put ((byte) ((((int) value) & 0xff00) >> 8));\n-        buffer.put ((byte) (((int) value) & 0x00ff));\n+        buffer.put ((byte) ((value & 0xff00) >> 8));\n+        buffer.put ((byte) (value & 0x00ff));\n       }\n \n     return buffer;\n@@ -106,8 +106,8 @@ public static final char getChar (ByteBuffer buffer, int index)\n     \n     if (buffer.order() == ByteOrder.LITTLE_ENDIAN)\n       {\n-        return (char) (((buffer.get (index + 1) & 0xff) << 8)\n-                       + (buffer.get (index) & 0xff));\n+        return (char) ((buffer.get (index) & 0xff)\n+                       + ((buffer.get (index + 1) & 0xff) << 8));\n       }\n \n     return (char) (((buffer.get (index) & 0xff) << 8)\n@@ -121,13 +121,13 @@ public static final ByteBuffer putChar (ByteBuffer buffer, int index,\n \n     if (buffer.order() == ByteOrder.LITTLE_ENDIAN)\n       {\n-        buffer.put (index + 1, (byte) ((((int) value) & 0x00ff) >> 8));\n-        buffer.put (index, (byte) (((int) value) & 0xff00));\n+        buffer.put (index, (byte) (value & 0xff00));\n+        buffer.put (index + 1, (byte) ((value & 0x00ff) >> 8));\n       }\n     else\n       {\n-        buffer.put (index, (byte) ((((int) value) & 0xff00) >> 8));\n-        buffer.put (index + 1, (byte) (((int) value) & 0x00ff));\n+        buffer.put (index, (byte) ((value & 0xff00) >> 8));\n+        buffer.put (index + 1, (byte) (value & 0x00ff));\n       }\n     \n     return buffer;\n@@ -153,13 +153,13 @@ public static final ByteBuffer putShort (ByteBuffer buffer, short value)\n \n     if (buffer.order() == ByteOrder.LITTLE_ENDIAN)\n       {\n-        buffer.put ((byte) (((int) value) & 0x00ff));\n-        buffer.put ((byte) ((((int) value) & 0xff00) >> 8));\n+        buffer.put ((byte) (value & 0x00ff));\n+        buffer.put ((byte) ((value & 0xff00) >> 8));\n       }\n     else\n       {\n-        buffer.put ((byte) ((((int) value) & 0xff00) >> 8));\n-        buffer.put ((byte) (((int) value) & 0x00ff));\n+        buffer.put ((byte) ((value & 0xff00) >> 8));\n+        buffer.put ((byte) (value & 0x00ff));\n       }\n \n     return buffer;\n@@ -186,13 +186,13 @@ public static final ByteBuffer putShort (ByteBuffer buffer, int index,\n \n     if (buffer.order() == ByteOrder.LITTLE_ENDIAN)\n       {\n-        buffer.put (index + 1, (byte) ((((int) value) & 0xff00) >> 8));\n-        buffer.put (index, (byte) (((int) value) & 0x00ff));\n+        buffer.put (index, (byte) (value & 0x00ff));\n+        buffer.put (index + 1, (byte) ((value & 0xff00) >> 8));\n       }\n     else\n       {\n-        buffer.put (index, (byte) ((((int) value) & 0xff00) >> 8));\n-        buffer.put (index + 1, (byte) (((int) value) & 0x00ff));\n+        buffer.put (index, (byte) ((value & 0xff00) >> 8));\n+        buffer.put (index + 1, (byte) (value & 0x00ff));\n       }\n     \n     return buffer;\n@@ -263,10 +263,10 @@ public static final ByteBuffer putInt (ByteBuffer buffer, int index,\n \n     if (buffer.order() == ByteOrder.LITTLE_ENDIAN)\n       {\n-        buffer.put (index + 3, (byte) ((value & 0xff000000) >> 24));\n-        buffer.put (index + 2, (byte) ((value & 0x00ff0000) >> 16));\n-        buffer.put (index + 1, (byte) ((value & 0x0000ff00) >> 8));\n         buffer.put (index, (byte) (value & 0x000000ff));\n+        buffer.put (index + 1, (byte) ((value & 0x0000ff00) >> 8));\n+        buffer.put (index + 2, (byte) ((value & 0x00ff0000) >> 16));\n+        buffer.put (index + 3, (byte) ((value & 0xff000000) >> 24));\n       }\n     else\n       {\n@@ -289,16 +289,16 @@ public static final long getLong (ByteBuffer buffer)\n                        + ((buffer.get() & 0xff) << 8)\n                        + ((buffer.get() & 0xff) << 16)\n                        + ((buffer.get() & 0xff) << 24)\n-                       + ((buffer.get() & 0xff) << 32)\n-                       + ((buffer.get() & 0xff) << 40)\n-                       + ((buffer.get() & 0xff) << 48)\n-                       + ((buffer.get() & 0xff) << 56));\n+                       + ((buffer.get() & 0xffL) << 32)\n+                       + ((buffer.get() & 0xffL) << 40)\n+                       + ((buffer.get() & 0xffL) << 48)\n+                       + ((buffer.get() & 0xffL) << 56));\n       }\n \n-    return (long) (((buffer.get() & 0xff) << 56)\n-                   + ((buffer.get() & 0xff) << 48)\n-                   + ((buffer.get() & 0xff) << 40)\n-                   + ((buffer.get() & 0xff) << 32)\n+    return (long) (((buffer.get() & 0xffL) << 56)\n+                   + ((buffer.get() & 0xffL) << 48)\n+                   + ((buffer.get() & 0xffL) << 40)\n+                   + ((buffer.get() & 0xffL) << 32)\n                    + ((buffer.get() & 0xff) << 24)\n                    + ((buffer.get() & 0xff) << 16)\n                    + ((buffer.get() & 0xff) << 8)\n@@ -311,25 +311,25 @@ public static final ByteBuffer putLong (ByteBuffer buffer, long value)\n \n     if (buffer.order() == ByteOrder.LITTLE_ENDIAN)\n       {\n-        buffer.put ((byte) (value & 0xff00000000000000L));\n-        buffer.put ((byte) ((value & 0x00ff000000000000L) >> 8));\n-        buffer.put ((byte) ((value & 0x0000ff0000000000L) >> 16));\n-        buffer.put ((byte) ((value & 0x000000ff00000000L) >> 24));\n-        buffer.put ((byte) ((value & 0x00000000ff000000L) >> 32));\n-        buffer.put ((byte) ((value & 0x0000000000ff0000L) >> 40));\n-        buffer.put ((byte) ((value & 0x000000000000ff00L) >> 48));\n-        buffer.put ((byte) ((value & 0x00000000000000ffL) >> 56));\n+        buffer.put ((byte) (((int) value) & 0xff));\n+        buffer.put ((byte) (((int) (value >> 8)) & 0xff));\n+        buffer.put ((byte) (((int) (value >> 16)) & 0xff));\n+        buffer.put ((byte) (((int) (value >> 24)) & 0xff));\n+        buffer.put ((byte) (((int) (value >> 32)) & 0xff));\n+        buffer.put ((byte) (((int) (value >> 40)) & 0xff));\n+        buffer.put ((byte) (((int) (value >> 48)) & 0xff));\n+        buffer.put ((byte) (((int) (value >> 56)) & 0xff));\n       }\n     else\n       {\n-        buffer.put ((byte) ((value & 0xff00000000000000L) >> 56));\n-        buffer.put ((byte) ((value & 0x00ff000000000000L) >> 48));\n-        buffer.put ((byte) ((value & 0x0000ff0000000000L) >> 40));\n-        buffer.put ((byte) ((value & 0x000000ff00000000L) >> 32));\n-        buffer.put ((byte) ((value & 0x00000000ff000000L) >> 24));\n-        buffer.put ((byte) ((value & 0x0000000000ff0000L) >> 16));\n-        buffer.put ((byte) ((value & 0x000000000000ff00L) >> 8));\n-        buffer.put ((byte) (value & 0x00000000000000ffL));\n+        buffer.put ((byte) (((int) (value >> 56)) & 0xff));\n+        buffer.put ((byte) (((int) (value >> 48)) & 0xff));\n+        buffer.put ((byte) (((int) (value >> 40)) & 0xff));\n+        buffer.put ((byte) (((int) (value >> 32)) & 0xff));\n+        buffer.put ((byte) (((int) (value >> 24)) & 0xff));\n+        buffer.put ((byte) (((int) (value >> 16)) & 0xff));\n+        buffer.put ((byte) (((int) (value >> 8)) & 0xff));\n+        buffer.put ((byte) (((int) value) & 0xff));\n       }\n     \n     return buffer;\n@@ -345,16 +345,16 @@ public static final long getLong (ByteBuffer buffer, int index)\n                        + ((buffer.get (index + 1) & 0xff) << 8)\n                        + ((buffer.get (index + 2) & 0xff) << 16)\n                        + ((buffer.get (index + 3) & 0xff) << 24)\n-                       + ((buffer.get (index + 4) & 0xff) << 32)\n-                       + ((buffer.get (index + 5) & 0xff) << 40)\n-                       + ((buffer.get (index + 6) & 0xff) << 48)\n-                       + ((buffer.get (index + 7) & 0xff) << 56));\n+                       + ((buffer.get (index + 4) & 0xffL) << 32)\n+                       + ((buffer.get (index + 5) & 0xffL) << 40)\n+                       + ((buffer.get (index + 6) & 0xffL) << 48)\n+                       + ((buffer.get (index + 7) & 0xffL) << 56));\n       }\n \n-    return (long) (((buffer.get (index) & 0xff) << 56)\n-                   + ((buffer.get (index + 1) & 0xff) << 48)\n-                   + ((buffer.get (index + 2) & 0xff) << 40)\n-                   + ((buffer.get (index + 3) & 0xff) << 32)\n+    return (long) (((buffer.get (index) & 0xffL) << 56)\n+                   + ((buffer.get (index + 1) & 0xffL) << 48)\n+                   + ((buffer.get (index + 2) & 0xffL) << 40)\n+                   + ((buffer.get (index + 3) & 0xffL) << 32)\n                    + ((buffer.get (index + 4) & 0xff) << 24)\n                    + ((buffer.get (index + 5) & 0xff) << 16)\n                    + ((buffer.get (index + 6) & 0xff) << 8)\n@@ -368,222 +368,70 @@ public static final ByteBuffer putLong (ByteBuffer buffer, int index,\n \n     if (buffer.order() == ByteOrder.LITTLE_ENDIAN)\n       {\n-        buffer.put (index + 7, (byte) ((value & 0xff00000000000000L) >> 56));\n-        buffer.put (index + 6, (byte) ((value & 0x00ff000000000000L) >> 48));\n-        buffer.put (index + 5, (byte) ((value & 0x0000ff0000000000L) >> 40));\n-        buffer.put (index + 4, (byte) ((value & 0x000000ff00000000L) >> 32));\n-        buffer.put (index + 3, (byte) ((value & 0x00000000ff000000L) >> 24));\n-        buffer.put (index + 2, (byte) ((value & 0x0000000000ff0000L) >> 16));\n-        buffer.put (index + 1, (byte) ((value & 0x000000000000ff00L) >> 8));\n-        buffer.put (index, (byte) (value & 0x00000000000000ffL));\n+        buffer.put (index, (byte) (((int) value) & 0xff));\n+        buffer.put (index + 1, (byte) (((int) (value >> 8)) & 0xff));\n+        buffer.put (index + 2, (byte) (((int) (value >> 16)) & 0xff));\n+        buffer.put (index + 3, (byte) (((int) (value >> 24)) & 0xff));\n+        buffer.put (index + 4, (byte) (((int) (value >> 32)) & 0xff));\n+        buffer.put (index + 5, (byte) (((int) (value >> 40)) & 0xff));\n+        buffer.put (index + 6, (byte) (((int) (value >> 48)) & 0xff));\n+        buffer.put (index + 7, (byte) (((int) (value >> 56)) & 0xff));\n       }\n     else\n       {\n-        buffer.put (index, (byte) ((value & 0xff00000000000000L) >> 56));\n-        buffer.put (index + 1, (byte) ((value & 0x00ff000000000000L) >> 48));\n-        buffer.put (index + 2, (byte) ((value & 0x0000ff0000000000L) >> 40));\n-        buffer.put (index + 3, (byte) ((value & 0x000000ff00000000L) >> 32));\n-        buffer.put (index + 4, (byte) ((value & 0x00000000ff000000L) >> 24));\n-        buffer.put (index + 5, (byte) ((value & 0x0000000000ff0000L) >> 16));\n-        buffer.put (index + 6, (byte) ((value & 0x000000000000ff00L) >> 8));\n-        buffer.put (index + 7, (byte) (value & 0x00000000000000ffL));\n+        buffer.put (index, (byte) (((int) (value >> 56)) & 0xff));\n+        buffer.put (index + 1, (byte) (((int) (value >> 48)) & 0xff));\n+        buffer.put (index + 2, (byte) (((int) (value >> 40)) & 0xff));\n+        buffer.put (index + 3, (byte) (((int) (value >> 32)) & 0xff));\n+        buffer.put (index + 4, (byte) (((int) (value >> 24)) & 0xff));\n+        buffer.put (index + 5, (byte) (((int) (value >> 16)) & 0xff));\n+        buffer.put (index + 6, (byte) (((int) (value >> 8)) & 0xff));\n+        buffer.put (index + 7, (byte) (((int) value) & 0xff));\n       }\n     \n     return buffer;\n   }\n \n   public static final float getFloat (ByteBuffer buffer)\n   {\n-    checkRemainingForRead (buffer, 4);\n-\n-    if (buffer.order() == ByteOrder.LITTLE_ENDIAN)\n-      {\n-        return (float) ((buffer.get() & 0xff)\n-                        + ((buffer.get() & 0xff) << 8)\n-                        + ((buffer.get() & 0xff) << 16)\n-                        + ((buffer.get() & 0xff) << 24));\n-      }\n-\n-    return (float) (((buffer.get() & 0xff) << 24)\n-                    + ((buffer.get() & 0xff) << 16)\n-                    + ((buffer.get() & 0xff) << 8)\n-                    + (buffer.get() & 0xff));\n+    return Float.intBitsToFloat (getInt (buffer));\n   }\n   \n   public static final ByteBuffer putFloat (ByteBuffer buffer, float value)\n   {\n-    checkRemainingForWrite (buffer, 4);\n-\n-    if (buffer.order() == ByteOrder.LITTLE_ENDIAN)\n-      {\n-        buffer.put ((byte) (((int) value) & 0xff000000));\n-        buffer.put ((byte) ((((int) value) & 0x00ff0000) >> 8));\n-        buffer.put ((byte) ((((int) value) & 0x0000ff00) >> 16));\n-        buffer.put ((byte) ((((int) value) & 0x000000ff) >> 24));\n-      }\n-    else\n-      {\n-        buffer.put ((byte) ((((int) value) & 0xff000000) >> 24));\n-        buffer.put ((byte) ((((int) value) & 0x00ff0000) >> 16));\n-        buffer.put ((byte) ((((int) value) & 0x0000ff00) >> 8));\n-        buffer.put ((byte) (((int) value) & 0x000000ff));\n-      }\n-\n-    return buffer;\n+    return putInt (buffer, Float.floatToIntBits (value));\n   }\n   \n   public static final float getFloat (ByteBuffer buffer, int index)\n   {\n-    checkAvailableForRead (buffer, index, 4);\n-\n-    if (buffer.order() == ByteOrder.LITTLE_ENDIAN)\n-      {\n-        return (float) ((buffer.get (index) & 0xff)\n-                        + ((buffer.get (index + 1) & 0xff) << 8)\n-                        + ((buffer.get (index + 2) & 0xff) << 16)\n-                        + ((buffer.get (index + 3) & 0xff) << 24));\n-      }\n-\n-    return (float) (((buffer.get (index) & 0xff) << 24)\n-                    + ((buffer.get (index + 1) & 0xff) << 16)\n-                    + ((buffer.get (index + 2) & 0xff) << 8)\n-                    + (buffer.get (index + 3) & 0xff));\n+    return Float.intBitsToFloat (getInt (buffer, index));\n   }\n \n   public static final ByteBuffer putFloat (ByteBuffer buffer, int index,\n                                            float value)\n   {\n-    checkAvailableForWrite (buffer, index, 4);\n-\n-    if (buffer.order() == ByteOrder.LITTLE_ENDIAN)\n-      {\n-        buffer.put (index + 3, (byte) ((((int) value) & 0xff000000) >> 24));\n-        buffer.put (index + 2, (byte) ((((int) value) & 0x00ff0000) >> 16));\n-        buffer.put (index + 1, (byte) ((((int) value) & 0x0000ff00) >> 8));\n-        buffer.put (index, (byte) (((int) value) & 0x000000ff));\n-      }\n-    else\n-      {\n-        buffer.put (index, (byte) ((((int) value) & 0xff000000) >> 24));\n-        buffer.put (index + 1, (byte) ((((int) value) & 0x00ff0000) >> 16));\n-        buffer.put (index + 2, (byte) ((((int) value) & 0x0000ff00) >> 8));\n-        buffer.put (index + 3, (byte) (((int) value) & 0x000000ff));\n-      }\n-\n-    return buffer;\n+    return putInt (buffer, index, Float.floatToIntBits (value));\n   }\n \n   public static final double getDouble (ByteBuffer buffer)\n   {\n-    checkRemainingForRead (buffer, 8);\n-\n-    if (buffer.order() == ByteOrder.LITTLE_ENDIAN)\n-      {\n-        return (double) ((buffer.get() & 0xff)\n-                         + ((buffer.get() & 0xff) << 8)\n-                         + ((buffer.get() & 0xff) << 16)\n-                         + ((buffer.get() & 0xff) << 24)\n-                         + ((buffer.get() & 0xff) << 32)\n-                         + ((buffer.get() & 0xff) << 40)\n-                         + ((buffer.get() & 0xff) << 48)\n-                         + ((buffer.get() & 0xff) << 56));\n-      }\n-\n-    return (double) (((buffer.get() & 0xff) << 56)\n-                     + ((buffer.get() & 0xff) << 48)\n-                     + ((buffer.get() & 0xff) << 40)\n-                     + ((buffer.get() & 0xff) << 32)\n-                     + ((buffer.get() & 0xff) << 24)\n-                     + ((buffer.get() & 0xff) << 16)\n-                     + ((buffer.get() & 0xff) << 8)\n-                     + (buffer.get() & 0xff));\n+    return Double.longBitsToDouble (getLong (buffer));\n   }\n \n   public static final ByteBuffer putDouble (ByteBuffer buffer, double value)\n   {\n-    checkRemainingForWrite (buffer, 8);\n-\n-    if (buffer.order() == ByteOrder.LITTLE_ENDIAN)\n-      {\n-        buffer.put ((byte) (((long) value) & 0xff00000000000000L));\n-        buffer.put ((byte) ((((long) value) & 0x00ff000000000000L) >> 8));\n-        buffer.put ((byte) ((((long) value) & 0x0000ff0000000000L) >> 16));\n-        buffer.put ((byte) ((((long) value) & 0x000000ff00000000L) >> 24));\n-        buffer.put ((byte) ((((long) value) & 0x00000000ff000000L) >> 32));\n-        buffer.put ((byte) ((((long) value) & 0x0000000000ff0000L) >> 40));\n-        buffer.put ((byte) ((((long) value) & 0x000000000000ff00L) >> 48));\n-        buffer.put ((byte) ((((long) value) & 0x00000000000000ffL) >> 56));\n-      }\n-    else\n-      {\n-        buffer.put ((byte) ((((long) value) & 0xff00000000000000L) >> 56));\n-        buffer.put ((byte) ((((long) value) & 0x00ff000000000000L) >> 48));\n-        buffer.put ((byte) ((((long) value) & 0x0000ff0000000000L) >> 40));\n-        buffer.put ((byte) ((((long) value) & 0x000000ff00000000L) >> 32));\n-        buffer.put ((byte) ((((long) value) & 0x00000000ff000000L) >> 24));\n-        buffer.put ((byte) ((((long) value) & 0x0000000000ff0000L) >> 16));\n-        buffer.put ((byte) ((((long) value) & 0x000000000000ff00L) >> 8));\n-        buffer.put ((byte) (((long) value) & 0x00000000000000ffL));\n-      }\n-    \n-    return buffer;\n+    return putLong (buffer, Double.doubleToLongBits (value));\n   }\n   \n   public static final double getDouble (ByteBuffer buffer, int index)\n   {\n-    checkAvailableForRead (buffer, index, 8);\n-\n-    if (buffer.order() == ByteOrder.LITTLE_ENDIAN)\n-      {\n-        return (double) ((buffer.get (index) & 0xff)\n-                         + ((buffer.get (index + 1) & 0xff) << 8)\n-                         + ((buffer.get (index + 2) & 0xff) << 16)\n-                         + ((buffer.get (index + 3) & 0xff) << 24)\n-                         + ((buffer.get (index + 4) & 0xff) << 32)\n-                         + ((buffer.get (index + 5) & 0xff) << 40)\n-                         + ((buffer.get (index + 6) & 0xff) << 48)\n-                         + ((buffer.get (index + 7) & 0xff) << 56));\n-      }\n-\n-    return (double) (((buffer.get (index) & 0xff) << 56)\n-                     + ((buffer.get (index + 1) & 0xff) << 48)\n-                     + ((buffer.get (index + 2) & 0xff) << 40)\n-                     + ((buffer.get (index + 3) & 0xff) << 32)\n-                     + ((buffer.get (index + 4) & 0xff) << 24)\n-                     + ((buffer.get (index + 5) & 0xff) << 16)\n-                     + ((buffer.get (index + 6) & 0xff) << 8)\n-                     + (buffer.get (index + 7) & 0xff));\n+    return Double.longBitsToDouble (getLong (buffer, index));\n   }\n   \n   public static final ByteBuffer putDouble (ByteBuffer buffer, int index,\n                                             double value)\n   {\n-    checkAvailableForWrite (buffer, index, 8);\n-\n-    if (buffer.order() == ByteOrder.LITTLE_ENDIAN)\n-      {\n-        buffer.put (index + 7, (byte) ((((long) value) & 0xff00000000000000L) >> 56));\n-        buffer.put (index + 6, (byte) ((((long) value) & 0x00ff000000000000L) >> 48));\n-        buffer.put (index + 5, (byte) ((((long) value) & 0x0000ff0000000000L) >> 40));\n-        buffer.put (index + 4, (byte) ((((long) value) & 0x000000ff00000000L) >> 32));\n-        buffer.put (index + 3, (byte) ((((long) value) & 0x00000000ff000000L) >> 24));\n-        buffer.put (index + 2, (byte) ((((long) value) & 0x0000000000ff0000L) >> 16));\n-        buffer.put (index + 1, (byte) ((((long) value) & 0x000000000000ff00L) >> 8));\n-        buffer.put (index, (byte) (((long) value) & 0x00000000000000ffL));\n-      }\n-    else\n-      {\n-        buffer.put (index, (byte) ((((long) value) & 0xff00000000000000L) >> 56));\n-        buffer.put (index + 1, (byte) ((((long) value) & 0x00ff000000000000L) >> 48));\n-        buffer.put (index + 2, (byte) ((((long) value) & 0x0000ff0000000000L) >> 40));\n-        buffer.put (index + 3, (byte) ((((long) value) & 0x000000ff00000000L) >> 32));\n-        buffer.put (index + 4, (byte) ((((long) value) & 0x00000000ff000000L) >> 24));\n-        buffer.put (index + 5, (byte) ((((long) value) & 0x0000000000ff0000L) >> 16));\n-        buffer.put (index + 6, (byte) ((((long) value) & 0x000000000000ff00L) >> 8));\n-        buffer.put (index + 7, (byte) (((long) value) & 0x00000000000000ffL));\n-      }\n-    \n-    return buffer;\n+    return putLong (buffer, index, Double.doubleToLongBits (value));\n   }\n \n } // ByteBufferHelper"}]}