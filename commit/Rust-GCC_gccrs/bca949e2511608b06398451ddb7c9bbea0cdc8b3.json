{"sha": "bca949e2511608b06398451ddb7c9bbea0cdc8b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmNhOTQ5ZTI1MTE2MDhiMDYzOTg0NTFkZGI3YzliYmVhMGNkYzhiMw==", "commit": {"author": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1994-09-08T18:59:33Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1994-09-08T18:59:33Z"}, "message": "(get_set_constructor_bits, get_set_constructor_words):  New functions.\n\nFrom-SVN: r8044", "tree": {"sha": "243e838b856d8fa2146acdf673081d3d2ca6b995", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/243e838b856d8fa2146acdf673081d3d2ca6b995"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bca949e2511608b06398451ddb7c9bbea0cdc8b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bca949e2511608b06398451ddb7c9bbea0cdc8b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bca949e2511608b06398451ddb7c9bbea0cdc8b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bca949e2511608b06398451ddb7c9bbea0cdc8b3/comments", "author": null, "committer": null, "parents": [{"sha": "babfe4370ee988230f9c4911e98975f5954542b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/babfe4370ee988230f9c4911e98975f5954542b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/babfe4370ee988230f9c4911e98975f5954542b1"}], "stats": {"total": 102, "additions": 102, "deletions": 0}, "files": [{"sha": "85ea6c0106f6bbfb4c0f661490993e9ca24828c3", "filename": "gcc/tree.c", "status": "modified", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bca949e2511608b06398451ddb7c9bbea0cdc8b3/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bca949e2511608b06398451ddb7c9bbea0cdc8b3/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=bca949e2511608b06398451ddb7c9bbea0cdc8b3", "patch": "@@ -4001,3 +4001,102 @@ get_file_function_name (kind)\n \n   return get_identifier (buf);\n }\n+\f\n+/* Expand (the constant part of) a SET_TYPE CONTRUCTOR node.\n+   The result is placed in BUFFER (which has length BIT_SIZE),\n+   with one bit in each char ('\\000' or '\\001').\n+\n+   If the constructor is constant, NULL_TREE is returned.\n+   Otherwise, a TREE_LIST of the non-constant elements is emitted. */\n+\n+tree\n+get_set_constructor_bits (init, buffer, bit_size)\n+     tree init;\n+     char *buffer;\n+     int bit_size;\n+{\n+  int i;\n+  tree vals;\n+  HOST_WIDE_INT domain_min\n+    = TREE_INT_CST_LOW (TYPE_MIN_VALUE (TYPE_DOMAIN (TREE_TYPE (init))));\n+  tree non_const_bits = NULL_TREE;\n+  for (i = 0; i < bit_size; i++)\n+    buffer[i] = 0;\n+\n+  for (vals = TREE_OPERAND (init, 1); \n+       vals != NULL_TREE; vals = TREE_CHAIN (vals))\n+    {\n+      if (TREE_CODE (TREE_VALUE (vals)) != INTEGER_CST\n+\t  || (TREE_PURPOSE (vals) != NULL_TREE\n+\t      && TREE_CODE (TREE_PURPOSE (vals)) != INTEGER_CST))\n+\tnon_const_bits =\n+\t  tree_cons (TREE_PURPOSE (vals), TREE_VALUE (vals), non_const_bits);\n+      else if (TREE_PURPOSE (vals) != NULL_TREE)\n+\t{\n+\t  /* Set a range of bits to ones. */\n+\t  HOST_WIDE_INT lo_index\n+\t    = TREE_INT_CST_LOW (TREE_PURPOSE (vals)) - domain_min;\n+\t  HOST_WIDE_INT hi_index\n+\t    = TREE_INT_CST_LOW (TREE_VALUE (vals)) - domain_min;\n+\t  if (lo_index < 0 || lo_index >= bit_size\n+\t    || hi_index < 0 || hi_index >= bit_size)\n+\t    abort ();\n+\t  for ( ; lo_index <= hi_index; lo_index++)\n+\t    buffer[lo_index] = 1;\n+\t}\n+      else\n+\t{\n+\t  /* Set a single bit to one. */\n+\t  HOST_WIDE_INT index\n+\t    = TREE_INT_CST_LOW (TREE_VALUE (vals)) - domain_min;\n+\t  if (index < 0 || index >= bit_size)\n+\t    {\n+\t      error (\"invalid initializer for bit string\");\n+\t      return NULL_TREE;\n+\t    }\n+\t  buffer[index] = 1;\n+\t}\n+    }\n+  return non_const_bits;\n+}\n+\n+/* Expand (the constant part of) a SET_TYPE CONTRUCTOR node.\n+   The result is placed in BUFFER (which is an array of WD_SIZE\n+   words).  TYPE_ALIGN bits are stored in each element of BUFFER.\n+   If the constructor is constant, NULL_TREE is returned.\n+   Otherwise, a TREE_LIST of the non-constant elements is emitted. */\n+\n+tree\n+get_set_constructor_words (init, buffer, wd_size)\n+     tree init;\n+     HOST_WIDE_INT *buffer;\n+     int wd_size;\n+{\n+  int i;\n+  tree vals = TREE_OPERAND (init, 1);\n+  int set_word_size = TYPE_ALIGN (TREE_TYPE (init));\n+  int bit_size = wd_size * set_word_size;\n+  int bit_pos = 0;\n+  HOST_WIDE_INT *wordp = buffer;\n+  char *bit_buffer = (char*)alloca(bit_size);\n+  tree non_const_bits = get_set_constructor_bits (init, bit_buffer, bit_size);\n+\n+  for (i = 0; i < wd_size; i++)\n+    buffer[i] = 0;\n+\n+  for (i = 0; i < bit_size; i++)\n+    {\n+      if (bit_buffer[i])\n+\t{\n+#if BITS_BIG_ENDIAN\n+\t  *wordp |= (1 << (set_word_size - 1 - bit_pos));\n+#else\n+\t  *wordp |= 1 << bit_pos;\n+#endif\n+\t}\n+      bit_pos++;\n+      if (bit_pos >= set_word_size)\n+\tbit_pos = 0, wordp++;\n+    }\n+  return non_const_bits;\n+}"}, {"sha": "5976437bacd9f374d86f1849960975e94e90d86b", "filename": "gcc/tree.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bca949e2511608b06398451ddb7c9bbea0cdc8b3/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bca949e2511608b06398451ddb7c9bbea0cdc8b3/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=bca949e2511608b06398451ddb7c9bbea0cdc8b3", "patch": "@@ -1498,6 +1498,9 @@ extern void (*incomplete_decl_finalize_hook) ();\n \f\n /* In tree.c */\n extern char *perm_calloc\t\t\tPROTO((int, long));\n+extern tree get_set_constructor_bits\t\tPROTO((tree, char*, int));\n+extern tree get_set_constructor_words\t\tPROTO((tree,\n+\t\t\t\t\t\t       HOST_WIDE_INT*, int));\n \f\n /* In stmt.c */\n "}]}