{"sha": "201556f0e005802b8ebb206a193a6feb55a555af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjAxNTU2ZjBlMDA1ODAyYjhlYmIyMDZhMTkzYTZmZWI1NWE1NTVhZg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2001-09-11T16:50:05Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2001-09-11T16:50:05Z"}, "message": "configure.in: Check whether assembler supports section merging.\n\n\t* configure.in: Check whether assembler supports section merging.\n\t* config.in: Rebuilt.\n\t* configure: Rebuilt.\n\t* varasm.c (variable_section, output_constant_pool): Pass alignment\n\tto SELECT_SECTION and SELECT_RTX_SECTION.\n\t(mergeable_string_section): New.\n\t(mergeable_constant_section): New.\n\t(default_elf_asm_named_section): Output SECTION_MERGE and\n\tSECTION_STRINGS flags plus SECTION_ENTSIZE entity size.\n\t* output.h (mergeable_string_section): New.\n\t(mergeable_constant_section): New.\n\t(SECTION_MERGE, SECTION_STRINGS, SECTION_ENTSIZE): Define.\n\t* toplev.c (flag_merge_constants): New.\n\t(f_options): Add -fmerge-constants and -fmerge-all-constants\n\toptions.\n\t(toplev_main): Default to -fno-merge-constants if not optimizing.\n\t* flags.h (flag_merge_constants): Add extern.\n\t* invoke.texi (-fmerge-constants, -fmerge-all-constants): Document.\n\t* tm.texi (SELECT_SECTION, SELECT_RTX_SECTION): Document added third\n\targument.\n\t* config/elfos.h (ASM_SECTION_START_OP, ASM_OUTPUT_SECTION_START):\n\tDefine if assembler has working .subsection -1 support.\n\t(SELECT_RTX_SECTION, SELECT_SECTION): Add third macro argument.\n\tPut constant into special SHF_MERGE sections if the linker should\n\tattempt to merge duplicates.\n\t* config/ia64/sysv4.h (SELECT_RTX_SECTION, SELECT_SECTION): Add third\n\tmacro argument.\n\tPut constant into special SHF_MERGE sections if the linker should\n\tattempt to merge duplicates.\n\t* config/alpha/elf.h: Likewise.\n\t(ASM_SECTION_START_OP, ASM_OUTPUT_SECTION_START): Define if assembler\n\thas working .subsection -1 support.\n\t* config/nextstep.h: Add third argument to SELECT_RTX_SECTION and\n\tSELECT_SECTION.\n\t* config/svr3.h: Likewise.\n\t* config/darwin.h: Likewise.\n\t* config/arm/aof.h: Likewise.\n\t* config/arm/linux-elf.h: Likewise.\n\t* config/avr/avr.h: Likewise.\n\t* config/c4x/c4x.h: Likewise.\n\t* config/d30v/d30v.h: Likewise.\n\t* config/i386/dgux.h: Likewise.\n\t* config/i386/osfrose.h: Likewise.\n\t* config/i386/sco5.h: Likewise.\n\t* config/i386/svr3gas.h: Likewise.\n\t* config/ia64/aix.h: Likewise.\n\t* config/m32r/m32r.h: Likewise.\n\t* config/m68k/m68k.h: Likewise.\n\t* config/m88k/dgux.h: Likewise.\n\t* config/m88k/m88k.h: Likewise.\n\t* config/mcore/mcore-pe.h: Likewise.\n\t* config/mips/mips.h: Likewise.\n\t* config/pa/pa.h: Likewise.\n\t* config/pa/pa-linux.h: Likewise.\n\t* config/romp/romp.h: Likewise.\n\t* config/rs6000/sysv4.h: Likewise.\n\t* config/rs6000/xcoff.h: Likewise.\n\t* config/s390/linux.h: Likewise.\n\t* config/sparc/sparc.h: Likewise.\n\t* config/sparc/sysv4.h: Likewise.\n\t* config/stormy16/stormy16.h: Likewise.\n\t* config/v850/v850.h: Likewise.\n\t* config/vax/vms.h: Likewise.\n\t* config/arm/arm.c (arm_elf_asm_named_section): Output SECTION_MERGE\n\tand SECTION_STRINGS flags plus SECTION_ENTSIZE entity size.\n\t* config/sparc/sparc.c (sparc_elf_asm_named_section): Use\n\tdefault_elf_asm_named_section for SHF_MERGE sections.\n\n\t* com.c (ffe_init_options): Default to -fmerge-all-constants\n\tif optimizing.\n\nFrom-SVN: r45548", "tree": {"sha": "1e64917dd6eadf802b7c67e6f7384cc9fc03f1ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e64917dd6eadf802b7c67e6f7384cc9fc03f1ae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/201556f0e005802b8ebb206a193a6feb55a555af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/201556f0e005802b8ebb206a193a6feb55a555af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/201556f0e005802b8ebb206a193a6feb55a555af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/201556f0e005802b8ebb206a193a6feb55a555af/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d21b1cb8741f7dfbeab6a456d67b322312933a8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d21b1cb8741f7dfbeab6a456d67b322312933a8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d21b1cb8741f7dfbeab6a456d67b322312933a8c"}], "stats": {"total": 607, "additions": 489, "deletions": 118}, "files": [{"sha": "4fa939c9d96953fb0fb225785658f9480d8a8ea3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=201556f0e005802b8ebb206a193a6feb55a555af", "patch": "@@ -1,3 +1,73 @@\n+2001-09-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* configure.in: Check whether assembler supports section merging.\n+\t* config.in: Rebuilt.\n+\t* configure: Rebuilt.\n+\t* varasm.c (variable_section, output_constant_pool): Pass alignment\n+\tto SELECT_SECTION and SELECT_RTX_SECTION.\n+\t(mergeable_string_section): New.\n+\t(mergeable_constant_section): New.\n+\t(default_elf_asm_named_section): Output SECTION_MERGE and\n+\tSECTION_STRINGS flags plus SECTION_ENTSIZE entity size.\n+\t* output.h (mergeable_string_section): New.\n+\t(mergeable_constant_section): New.\n+\t(SECTION_MERGE, SECTION_STRINGS, SECTION_ENTSIZE): Define.\n+\t* toplev.c (flag_merge_constants): New.\n+\t(f_options): Add -fmerge-constants and -fmerge-all-constants\n+\toptions.\n+\t(toplev_main): Default to -fno-merge-constants if not optimizing.\n+\t* flags.h (flag_merge_constants): Add extern.\n+\t* invoke.texi (-fmerge-constants, -fmerge-all-constants): Document.\n+\t* tm.texi (SELECT_SECTION, SELECT_RTX_SECTION): Document added third\n+\targument.\n+\t* config/elfos.h (ASM_SECTION_START_OP, ASM_OUTPUT_SECTION_START):\n+\tDefine if assembler has working .subsection -1 support.\n+\t(SELECT_RTX_SECTION, SELECT_SECTION): Add third macro argument.\n+\tPut constant into special SHF_MERGE sections if the linker should\n+\tattempt to merge duplicates.\n+\t* config/ia64/sysv4.h (SELECT_RTX_SECTION, SELECT_SECTION): Add third\n+\tmacro argument.\n+\tPut constant into special SHF_MERGE sections if the linker should\n+\tattempt to merge duplicates.\n+\t* config/alpha/elf.h: Likewise.\n+\t(ASM_SECTION_START_OP, ASM_OUTPUT_SECTION_START): Define if assembler\n+\thas working .subsection -1 support.\n+\t* config/nextstep.h: Add third argument to SELECT_RTX_SECTION and\n+\tSELECT_SECTION.\n+\t* config/svr3.h: Likewise.\n+\t* config/darwin.h: Likewise.\n+\t* config/arm/aof.h: Likewise.\n+\t* config/arm/linux-elf.h: Likewise.\n+\t* config/avr/avr.h: Likewise.\n+\t* config/c4x/c4x.h: Likewise.\n+\t* config/d30v/d30v.h: Likewise.\n+\t* config/i386/dgux.h: Likewise.\n+\t* config/i386/osfrose.h: Likewise.\n+\t* config/i386/sco5.h: Likewise.\n+\t* config/i386/svr3gas.h: Likewise.\n+\t* config/ia64/aix.h: Likewise.\n+\t* config/m32r/m32r.h: Likewise.\n+\t* config/m68k/m68k.h: Likewise.\n+\t* config/m88k/dgux.h: Likewise.\n+\t* config/m88k/m88k.h: Likewise.\n+\t* config/mcore/mcore-pe.h: Likewise.\n+\t* config/mips/mips.h: Likewise.\n+\t* config/pa/pa.h: Likewise.\n+\t* config/pa/pa-linux.h: Likewise.\n+\t* config/romp/romp.h: Likewise.\n+\t* config/rs6000/sysv4.h: Likewise.\n+\t* config/rs6000/xcoff.h: Likewise.\n+\t* config/s390/linux.h: Likewise.\n+\t* config/sparc/sparc.h: Likewise.\n+\t* config/sparc/sysv4.h: Likewise.\n+\t* config/stormy16/stormy16.h: Likewise.\n+\t* config/v850/v850.h: Likewise.\n+\t* config/vax/vms.h: Likewise.\n+\t* config/arm/arm.c (arm_elf_asm_named_section): Output SECTION_MERGE\n+\tand SECTION_STRINGS flags plus SECTION_ENTSIZE entity size.\n+\t* config/sparc/sparc.c (sparc_elf_asm_named_section): Use\n+\tdefault_elf_asm_named_section for SHF_MERGE sections.\n+\n Tue Sep 11 17:55:54 CEST 2001  Jan Hubicka  <jh@suse.cz>\n \n \t* bb-reorder.c (fixup_reorder_chain): Fallthru edge to exit block"}, {"sha": "b9156619b5c64ba9f649e09ea0deb4fc8c265984", "filename": "gcc/config.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=201556f0e005802b8ebb206a193a6feb55a555af", "patch": "@@ -475,6 +475,9 @@\n /* Define if your assembler mis-optimizes .eh_frame data. */\n #undef USE_AS_TRADITIONAL_FORMAT\n \n+/* Define if your assembler supports marking sections with SHF_MERGE flag. */\n+#undef HAVE_GAS_SHF_MERGE\n+\n /* Define if your assembler supports .register. */\n #undef HAVE_AS_REGISTER_PSEUDO_OP\n "}, {"sha": "7c2ad236b44bfde9cf2d3530c6f50facfe118641", "filename": "gcc/config/alpha/elf.h", "status": "modified", "additions": 65, "deletions": 27, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fconfig%2Falpha%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fconfig%2Falpha%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Felf.h?ref=201556f0e005802b8ebb206a193a6feb55a555af", "patch": "@@ -1,5 +1,6 @@\n /* Definitions of target machine for GNU compiler, for DEC Alpha w/ELF.\n-   Copyright (C) 1996, 1997, 1998, 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001\n+   Free Software Foundation, Inc.\n    Contributed by Richard Henderson (rth@tamu.edu).\n \n This file is part of GNU CC.\n@@ -222,6 +223,16 @@ do {\t\t\t\t\t\t\t\t\t\\\n #undef  FINI_SECTION_ASM_OP\n #define FINI_SECTION_ASM_OP\t\"\\t.section\\t.fini\"\n \n+#ifdef HAVE_GAS_SUBSECTION_ORDERING\n+\n+#define ASM_SECTION_START_OP\t\"\\t.subsection\\t-1\"\n+\n+/* Output assembly directive to move to the beginning of current section.  */\n+#define ASM_OUTPUT_SECTION_START(FILE)\t\\\n+  fprintf ((FILE), \"%s\\n\", ASM_SECTION_START_OP)\n+\n+#endif\n+\n /* A default list of other sections which we might be \"in\" at any given\n    time.  For targets that use additional sections (e.g. .tdesc) you\n    should override this definition in the target-specific file which\n@@ -240,8 +251,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n   SECTION_FUNCTION_TEMPLATE(sbss_section, in_sbss, SBSS_SECTION_ASM_OP)\t\\\n   SECTION_FUNCTION_TEMPLATE(sdata_section, in_sdata, SDATA_SECTION_ASM_OP)\n \n-extern void ctors_section\t\tPARAMS ((void));\n-extern void dtors_section\t\tPARAMS ((void));\n extern void sbss_section\t\tPARAMS ((void));\n extern void sdata_section\t\tPARAMS ((void));\n \n@@ -300,6 +309,8 @@ void FN ()\t\t\t\t\t\\\n \t {\t\t\t\t\t\t\t\\\n \t   if (flag_writable_strings)\t\t\t\t\\\n \t     SECNUM = 2;\t\t\t\t\t\\\n+\t   else\t\t\t\t\t\t\t\\\n+\t     SECNUM = 0x101;\t\t\t\t\t\\\n \t }\t\t\t\t\t\t\t\\\n        else if (TREE_CODE (DECL) == VAR_DECL)\t\t\t\\\n \t {\t\t\t\t\t\t\t\\\n@@ -311,6 +322,17 @@ void FN ()\t\t\t\t\t\\\n \t\t    || TREE_SIDE_EFFECTS (DECL)\t\t\t\\\n \t\t    || ! TREE_CONSTANT (DECL_INITIAL (DECL)))\t\\\n \t     SECNUM = 2;\t\t\t\t\t\\\n+\t  else if (flag_merge_constants >= 2)\t\t\t\\\n+\t    {\t\t\t\t\t\t\t\\\n+\t      /* C and C++ don't allow different variables to\t\\\n+\t\t share the same location.  -fmerge-all-constants\\\n+\t\t allows even that (at the expense of not\t\\\n+\t\t conforming).  */\t\t\t\t\\\n+\t      if (TREE_CODE (DECL_INITIAL (DECL)) == STRING_CST)\\\n+\t\tSECNUM = 0x201;\t\t\t\t\t\\\n+\t      else\t\t\t\t\t\t\\\n+\t\tSECNUM = 0x301;\t\t\t\t\t\\\n+\t    }\t\t\t\t\t\t\t\\\n \t }\t\t\t\t\t\t\t\\\n        else if (TREE_CODE (DECL) == CONSTRUCTOR)\t\t\\\n \t {\t\t\t\t\t\t\t\\\n@@ -322,7 +344,7 @@ void FN ()\t\t\t\t\t\\\n \t }\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\\\n        /* Select small data sections based on size.  */\t\t\\\n-       if (SECNUM >= 2)\t\t\t\t\t\t\\\n+       if ((SECNUM & 0xff) >= 2)\t\t\t\t\\\n \t {\t\t\t\t\t\t\t\\\n \t   int size = int_size_in_bytes (TREE_TYPE (DECL));\t\\\n \t   if (size >= 0 && size <= g_switch_value)\t\t\\\n@@ -332,26 +354,42 @@ void FN ()\t\t\t\t\t\\\n    while (0)\n \n #undef  SELECT_SECTION\n-#define SELECT_SECTION(DECL, RELOC)\t\t\\\n-  do\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\\\n-      typedef void (*sec_fn) PARAMS ((void));\t\\\n-      static sec_fn const sec_functions[6] =\t\\\n-      {\t\t\t\t\t\t\\\n-\ttext_section,\t\t\t\t\\\n-\tconst_section,\t\t\t\t\\\n-\tdata_section,\t\t\t\t\\\n-\tsdata_section,\t\t\t\t\\\n-\tbss_section,\t\t\t\t\\\n-\tsbss_section\t\t\t\t\\\n-      };\t\t\t\t\t\\\n-\t\t\t\t\t\t\\\n-      int sec;\t\t\t\t\t\\\n-\t\t\t\t\t\t\\\n-      DO_SELECT_SECTION (sec, DECL, RELOC);\t\\\n-\t\t\t\t\t\t\\\n-      (*sec_functions[sec]) ();\t\t\t\\\n-    }\t\t\t\t\t\t\\\n+#define SELECT_SECTION(DECL, RELOC, ALIGN)\t\t\\\n+  do\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      typedef void (*sec_fn) PARAMS ((void));\t\t\\\n+      static sec_fn const sec_functions[6] =\t\t\\\n+      {\t\t\t\t\t\t\t\\\n+\ttext_section,\t\t\t\t\t\\\n+\tconst_section,\t\t\t\t\t\\\n+\tdata_section,\t\t\t\t\t\\\n+\tsdata_section,\t\t\t\t\t\\\n+\tbss_section,\t\t\t\t\t\\\n+\tsbss_section\t\t\t\t\t\\\n+      };\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\\\n+      int sec;\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\\\n+      DO_SELECT_SECTION (sec, DECL, RELOC);\t\t\\\n+\t\t\t\t\t\t\t\\\n+      switch (sec)\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\\\n+\tcase 0x101:\t\t\t\t\t\\\n+\t  mergeable_string_section (DECL, ALIGN, 0);\t\\\n+\t  break;\t\t\t\t\t\\\n+\tcase 0x201:\t\t\t\t\t\\\n+\t  mergeable_string_section (DECL_INITIAL (DECL),\\\n+\t\t\t\t    ALIGN, 0);\t\t\\\n+\t  break;\t\t\t\t\t\\\n+\tcase 0x301:\t\t\t\t\t\\\n+\t  mergeable_constant_section (DECL_MODE (DECL),\t\\\n+\t\t\t\t      ALIGN, 0);\t\\\n+\t  break;\t\t\t\t\t\\\n+\tdefault:\t\t\t\t\t\\\n+\t  (*sec_functions[sec]) ();\t\t\t\\\n+\t  break;\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\\\n   while (0)\n \n #define MAKE_DECL_ONE_ONLY(DECL) (DECL_WEAK (DECL) = 1)\n@@ -380,7 +418,7 @@ void FN ()\t\t\t\t\t\\\n       STRIP_NAME_ENCODING (name, name);\t\t\t\t\t\\\n       nlen = strlen (name);\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-      prefix = prefixes[sec][DECL_ONE_ONLY(DECL)];\t\t\t\\\n+      prefix = prefixes[sec & 0xff][DECL_ONE_ONLY(DECL)];\t\t\\\n       plen = strlen (prefix);\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n       string = alloca (nlen + plen + 1);\t\t\t\t\\\n@@ -399,8 +437,8 @@ void FN ()\t\t\t\t\t\\\n    go into the const section.  */\n \n #undef  SELECT_RTX_SECTION\n-#define SELECT_RTX_SECTION(MODE, RTX) \\\n-   const_section()\n+#define SELECT_RTX_SECTION(MODE, RTX, ALIGN) \\\n+   mergeable_constant_section((MODE), (ALIGN), 0)\n \n /* Define the strings used for the special svr4 .type and .size directives.\n    These strings generally do not vary from one system running svr4 to"}, {"sha": "55b8eefda2d7f9104715e894af6bb9329035b06d", "filename": "gcc/config/arm/aof.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fconfig%2Farm%2Faof.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fconfig%2Farm%2Faof.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Faof.h?ref=201556f0e005802b8ebb206a193a6feb55a555af", "patch": "@@ -55,7 +55,7 @@ Boston, MA 02111-1307, USA.  */\n char *aof_text_section ();\n #define TEXT_SECTION_ASM_OP aof_text_section ()\n \n-#define SELECT_RTX_SECTION(MODE,RTX) text_section ();\n+#define SELECT_RTX_SECTION(MODE,RTX,ALIGN) text_section ();\n \n char *aof_data_section ();\n #define DATA_SECTION_ASM_OP aof_data_section ()"}, {"sha": "725864c54a011e9aa8d3faa0702df070b7491185", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=201556f0e005802b8ebb206a193a6feb55a555af", "patch": "@@ -10860,13 +10860,21 @@ arm_elf_asm_named_section (name, flags)\n     *f++ = 'x';\n   if (flags & SECTION_SMALL)\n     *f++ = 's';\n+  if (flags & SECTION_MERGE)\n+    *f++ = 'M';\n+  if (flags & SECTION_STRINGS)\n+    *f++ = 'S';\n   *f = '\\0';\n \n   if (flags & SECTION_BSS)\n     type = \"nobits\";\n   else\n     type = \"progbits\";\n \n-  fprintf (asm_out_file, \"\\t.section\\t%s,\\\"%s\\\",%%%s\\n\",\n-\t   name, flagchars, type);\n+  if (flags & SECTION_ENTSIZE)\n+    fprintf (asm_out_file, \"\\t.section\\t%s,\\\"%s\\\",%%%s,%d\\n\",\n+\t     name, flagchars, type, flags & SECTION_ENTSIZE);\n+  else\n+    fprintf (asm_out_file, \"\\t.section\\t%s,\\\"%s\\\",%%%s\\n\",\n+\t     name, flagchars, type);\n }"}, {"sha": "cb9014ce7411aac8bbb28545bbc10f847f86fd8e", "filename": "gcc/config/arm/linux-elf.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fconfig%2Farm%2Flinux-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fconfig%2Farm%2Flinux-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Flinux-elf.h?ref=201556f0e005802b8ebb206a193a6feb55a555af", "patch": "@@ -139,7 +139,7 @@ const_section ()\t\t\t\t\t\t\t\\\n    section for output of DECL.  DECL is either a `VAR_DECL' node\n    or a constant of some sort.  RELOC indicates whether forming\n    the initial value of DECL requires link-time relocations.  */\n-#define SELECT_SECTION(DECL,RELOC)\t\t\t\t\t\\\n+#define SELECT_SECTION(DECL,RELOC,ALIGN)\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n   if (TREE_CODE (DECL) == STRING_CST)\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n@@ -204,7 +204,7 @@ const_section ()\t\t\t\t\t\t\t\\\n    of constant in RTL.  The argument MODE is redundant except\n    in the case of a `const_int' rtx.  Currently, these always\n    go into the const section.  */\n-#define SELECT_RTX_SECTION(MODE,RTX) const_section ()\n+#define SELECT_RTX_SECTION(MODE,RTX,ALIGN) const_section ()\n \n /* On svr4, we *do* have support for the .init and .fini sections, and we\n    can put stuff in there to be executed before and after `main'.  We let"}, {"sha": "8ae9302f5e1d26901db1ac89ac8415034b0ee0ee", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=201556f0e005802b8ebb206a193a6feb55a555af", "patch": "@@ -1890,7 +1890,7 @@ progmem_section (void)\t\t\t\t\t\t\t      \\\n    If these items should be placed in the text section, this macro\n    should not be defined.  */\n \n-/* `SELECT_SECTION (EXP, RELOC)'\n+/* `SELECT_SECTION (EXP, RELOC, ALIGN)'\n    A C statement or statements to switch to the appropriate section\n    for output of EXP.  You can assume that EXP is either a `VAR_DECL'\n    node or a constant of some sort.  RELOC indicates whether the\n@@ -1901,7 +1901,7 @@ progmem_section (void)\t\t\t\t\t\t\t      \\\n    Do not define this macro if you put all read-only variables and\n    constants in the read-only data section (usually the text section).  */\n \n-/* `SELECT_RTX_SECTION (MODE, RTX)'\n+/* `SELECT_RTX_SECTION (MODE, RTX, ALIGN)'\n    A C statement or statements to switch to the appropriate section\n    for output of RTX in mode MODE.  You can assume that RTX is some\n    kind of constant in RTL.  The argument MODE is redundant except in"}, {"sha": "e8052c6b68c1af4a6ca44ed3f25bd3262c4e1ef1", "filename": "gcc/config/c4x/c4x.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fconfig%2Fc4x%2Fc4x.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fconfig%2Fc4x%2Fc4x.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.h?ref=201556f0e005802b8ebb206a193a6feb55a555af", "patch": "@@ -2030,7 +2030,7 @@ const_section ()\t\t\t\t\t\t\t\\\n    or a constant of some sort.  RELOC indicates whether forming\n    the initial value of DECL requires link-time relocations.  */\n \n-#define SELECT_SECTION(DECL, RELOC)\t\t\t\t\t\\\n+#define SELECT_SECTION(DECL, RELOC, ALIGN)\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n   if (TREE_CODE (DECL) == STRING_CST)\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n@@ -2075,7 +2075,7 @@ const_section ()\t\t\t\t\t\t\t\\\n    in the case of a `const_int' rtx.  Currently, these always\n    go into the const section.  */\n \n-#define SELECT_RTX_SECTION(MODE, RTX) const_section()\n+#define SELECT_RTX_SECTION(MODE, RTX, ALIGN) const_section()\n \n \n /* Overall Framework of an Assembler File.  */"}, {"sha": "abf2d4736f0101c1331ea8d99afaf9dc1253cc81", "filename": "gcc/config/d30v/d30v.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fconfig%2Fd30v%2Fd30v.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fconfig%2Fd30v%2Fd30v.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fd30v%2Fd30v.h?ref=201556f0e005802b8ebb206a193a6feb55a555af", "patch": "@@ -3698,7 +3698,7 @@ extern const char *d30v_branch_cost_string;\n    the read-only data section (usually the text section).\n \n    Defined in svr4.h.  */\n-/* #define SELECT_SECTION(EXP, RELOC) */\n+/* #define SELECT_SECTION(EXP, RELOC, ALIGN) */\n \n /* A C statement or statements to switch to the appropriate section for output\n    of RTX in mode MODE.  You can assume that RTX is some kind of constant in\n@@ -3710,7 +3710,7 @@ extern const char *d30v_branch_cost_string;\n    section.\n \n    Defined in svr4.h.  */\n-/* #define SELECT_RTX_SECTION(MODE, RTX) */\n+/* #define SELECT_RTX_SECTION(MODE, RTX, ALIGN) */\n \n /* Define this macro if jump tables (for `tablejump' insns) should be output in\n    the text section, along with the assembler instructions.  Otherwise, the"}, {"sha": "5c49d1131932e3e1f027ae8d5c78bd62ae2f1365", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=201556f0e005802b8ebb206a193a6feb55a555af", "patch": "@@ -509,7 +509,7 @@ void alias_section (name, alias)\t\t\t\\\n #define READONLY_DATA_SECTION const_section\n \n #undef\tSELECT_SECTION\n-#define SELECT_SECTION(exp,reloc)\t\t\t\t\\\n+#define SELECT_SECTION(exp,reloc,align)\t\t\t\t\\\n   do\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n       if (TREE_CODE (exp) == STRING_CST)\t\t\t\\\n@@ -633,7 +633,7 @@ void alias_section (name, alias)\t\t\t\\\n   while (0)\n \n #undef\tSELECT_RTX_SECTION\n-#define SELECT_RTX_SECTION(mode, rtx)\t\t\t\t\t\\\n+#define SELECT_RTX_SECTION(mode, rtx, align)\t\t\t\t\\\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       if (GET_MODE_SIZE (mode) == 8)\t\t\t\t\t\\"}, {"sha": "d2ae669a83ff714e9de81937072fc0cececcf66d", "filename": "gcc/config/elfos.h", "status": "modified", "additions": 28, "deletions": 6, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fconfig%2Felfos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fconfig%2Felfos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Felfos.h?ref=201556f0e005802b8ebb206a193a6feb55a555af", "patch": "@@ -262,6 +262,16 @@ Boston, MA 02111-1307, USA.  */\n #define INIT_SECTION_ASM_OP\t\"\\t.section\\t.init\"\n #define FINI_SECTION_ASM_OP\t\"\\t.section\\t.fini\"\n \n+#ifdef HAVE_GAS_SUBSECTION_ORDERING\n+\n+#define ASM_SECTION_START_OP\t\"\\t.subsection\\t-1\"\n+\n+/* Output assembly directive to move to the beginning of current section.  */\n+#define ASM_OUTPUT_SECTION_START(FILE)\t\\\n+  fprintf ((FILE), \"%s\\n\", ASM_SECTION_START_OP)\n+\n+#endif\n+\n /* A default list of other sections which we might be \"in\" at any given\n    time.  For targets that use additional sections (e.g. .tdesc) you\n    should override this definition in the target-specific file which\n@@ -340,24 +350,27 @@ const_section ()\t\t\t\t\t\t\\\n /* A C statement or statements to switch to the appropriate\n    section for output of RTX in mode MODE.  RTX is some kind\n    of constant in RTL.  The argument MODE is redundant except\n-   in the case of a `const_int' rtx.  Currently, these always\n-   go into the const section.  */\n+   in the case of a `const_int' rtx.\n+   If assembler supports SHF_MERGE sections, put it into\n+   a .rodata.cstN section where N is size of the constant,\n+   otherwise into const section.  */\n \n #undef  SELECT_RTX_SECTION\n-#define SELECT_RTX_SECTION(MODE, RTX) const_section ()\n+#define SELECT_RTX_SECTION(MODE, RTX, ALIGN)\t\\\n+  mergeable_constant_section ((MODE), (ALIGN), 0)\n \n /* A C statement or statements to switch to the appropriate\n    section for output of DECL.  DECL is either a `VAR_DECL' node\n    or a constant of some sort.  RELOC indicates whether forming\n    the initial value of DECL requires link-time relocations.  */\n \n #undef SELECT_SECTION\n-#define SELECT_SECTION(DECL, RELOC)\t\t\t\t\\\n+#define SELECT_SECTION(DECL, RELOC, ALIGN)\t\t\t\\\n {\t\t\t\t\t\t\t\t\\\n   if (TREE_CODE (DECL) == STRING_CST)\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n       if (! flag_writable_strings)\t\t\t\t\\\n-\tconst_section ();\t\t\t\t\t\\\n+\tmergeable_string_section ((DECL), (ALIGN), 0);\t\t\\\n       else\t\t\t\t\t\t\t\\\n \tdata_section ();\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n@@ -369,8 +382,17 @@ const_section ()\t\t\t\t\t\t\\\n \t  || (DECL_INITIAL (DECL) != error_mark_node\t\t\\\n \t      && !TREE_CONSTANT (DECL_INITIAL (DECL))))\t\t\\\n \tdata_section ();\t\t\t\t\t\\\n-      else\t\t\t\t\t\t\t\\\n+      else if (flag_merge_constants < 2)\t\t\t\\\n+\t/* C and C++ don't allow different variables to share\t\\\n+\t   the same location.  -fmerge-all-constants allows\t\\\n+\t   even that (at the expense of not conforming).  */\t\\\n \tconst_section ();\t\t\t\t\t\\\n+      else if (TREE_CODE (DECL_INITIAL (DECL)) == STRING_CST)\t\\\n+\tmergeable_string_section (DECL_INITIAL (DECL), (ALIGN),\t\\\n+\t\t\t\t  0);\t\t\t\t\\\n+      else\t\t\t\t\t\t\t\\\n+\tmergeable_constant_section (DECL_MODE (DECL), (ALIGN),\t\\\n+\t\t\t\t    0);\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n   else if (TREE_CODE (DECL) == CONSTRUCTOR)\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\"}, {"sha": "5d7a6aa0d4fe1c326a012921ea45ae8141aa4b5b", "filename": "gcc/config/i386/dgux.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fconfig%2Fi386%2Fdgux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fconfig%2Fi386%2Fdgux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdgux.h?ref=201556f0e005802b8ebb206a193a6feb55a555af", "patch": "@@ -27,7 +27,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"i386/sysv4.h\"\n \n #ifndef VERSION_INFO2\n-#define VERSION_INFO2   \"$Revision: 1.12 $\"\n+#define VERSION_INFO2   \"$Revision: 1.13 $\"\n #endif\n \n #ifndef VERSION_STRING\n@@ -232,7 +232,7 @@ Boston, MA 02111-1307, USA.  */\n \n /* Must use data section for relocatable constants when pic.  */\n #undef SELECT_RTX_SECTION\n-#define SELECT_RTX_SECTION(MODE,RTX)            \\\n+#define SELECT_RTX_SECTION(MODE,RTX,ALIGN)      \\\n {                                               \\\n   if (flag_pic && symbolic_operand (RTX, VOIDmode)) \\\n     data_section ();                            \\"}, {"sha": "785aa4fe7a6990288e163e4ab334c321de16c538", "filename": "gcc/config/i386/osfrose.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fconfig%2Fi386%2Fosfrose.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fconfig%2Fi386%2Fosfrose.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fosfrose.h?ref=201556f0e005802b8ebb206a193a6feb55a555af", "patch": "@@ -506,7 +506,7 @@ while (0)\n    and select that section.  */\n \n #undef\tSELECT_RTX_SECTION\n-#define SELECT_RTX_SECTION(MODE, RTX)\t\t\t\t\t\\\n+#define SELECT_RTX_SECTION(MODE, RTX, ALIGN)\t\t\t\t\\\n do\t\t\t\t\t\t\t\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n     if (MODE == Pmode && HALF_PIC_P () && HALF_PIC_ADDRESS_P (RTX))\t\\\n@@ -517,7 +517,7 @@ do\t\t\t\t\t\t\t\t\t\\\n while (0)\n \n #undef\tSELECT_SECTION\n-#define SELECT_SECTION(DECL, RELOC)\t\t\t\t\t\\\n+#define SELECT_SECTION(DECL, RELOC, ALIGN)\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n   if (RELOC && HALF_PIC_P ())\t\t\t\t\t\t\\\n     data_section ();\t\t\t\t\t\t\t\\"}, {"sha": "56bc2879e6c753931f3b1d89fcc22827ee2fbd94", "filename": "gcc/config/i386/sco5.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fconfig%2Fi386%2Fsco5.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fconfig%2Fi386%2Fsco5.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsco5.h?ref=201556f0e005802b8ebb206a193a6feb55a555af", "patch": "@@ -371,7 +371,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n /* Must use data section for relocatable constants when pic.  */\n #undef SELECT_RTX_SECTION\n-#define SELECT_RTX_SECTION(MODE,RTX)\t\t\t\t\t\\\n+#define SELECT_RTX_SECTION(MODE,RTX,ALIGN)\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_ELF) {\t\t\t\t\t\t\t\\\n     if (flag_pic && symbolic_operand (RTX, VOIDmode))\t\t\t\\\n@@ -565,7 +565,7 @@ init_section ()\t\t\t\t\t\t\t\t\\\n    : 0))\n \n #undef SELECT_SECTION\n-#define SELECT_SECTION(DECL,RELOC)\t\t\t\t\t\\\n+#define SELECT_SECTION(DECL,RELOC,ALIGN)\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_ELF && flag_pic && RELOC)\t\t\t\t\t\\\n      data_section ();\t\t\t\t\t\t\t\\"}, {"sha": "08ada117284cc413b49abcc3e26945a32b81355e", "filename": "gcc/config/i386/svr3gas.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fconfig%2Fi386%2Fsvr3gas.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fconfig%2Fi386%2Fsvr3gas.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsvr3gas.h?ref=201556f0e005802b8ebb206a193a6feb55a555af", "patch": "@@ -177,7 +177,7 @@ const_section ()\t\t\t\t\t\t\t\\\n    or a constant of some sort.  RELOC indicates whether forming\n    the initial value of DECL requires link-time relocations.  */\n \n-#define SELECT_SECTION(DECL,RELOC)\t\t\t\t\t\\\n+#define SELECT_SECTION(DECL,RELOC,ALIGN)\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n   if (TREE_CODE (DECL) == STRING_CST)\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n@@ -207,4 +207,4 @@ const_section ()\t\t\t\t\t\t\t\\\n    in the case of a `const_int' rtx.  Currently, these always\n    go into the const section.  */\n \n-#define SELECT_RTX_SECTION(MODE,RTX) const_section()\n+#define SELECT_RTX_SECTION(MODE,RTX,ALIGN) const_section()"}, {"sha": "0c632111b5ad521abe8fe8e9f0f5a481eea8868d", "filename": "gcc/config/ia64/aix.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fconfig%2Fia64%2Faix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fconfig%2Fia64%2Faix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Faix.h?ref=201556f0e005802b8ebb206a193a6feb55a555af", "patch": "@@ -150,7 +150,7 @@ do {\t\t\t\t\t\t\t\\\n    the initial value of DECL requires link-time relocations.  */\n \n #undef SELECT_SECTION\n-#define SELECT_SECTION(DECL,RELOC)\t\t\t\t\t\\\n+#define SELECT_SECTION(DECL,RELOC,ALIGN)\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n   if (TREE_CODE (DECL) == STRING_CST)\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n@@ -184,7 +184,7 @@ do {\t\t\t\t\t\t\t\\\n \n extern unsigned int ia64_section_threshold;\n #undef SELECT_RTX_SECTION\n-#define SELECT_RTX_SECTION(MODE, RTX)\t\t\t\t\t\\\n+#define SELECT_RTX_SECTION(MODE, RTX, ALIGN)\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n   if (GET_MODE_SIZE (MODE) > 0\t\t\t\t\t\t\\\n       && GET_MODE_SIZE (MODE) <= ia64_section_threshold)\t\t\\"}, {"sha": "54b5167363e57137dc9081a62fadab6e93ebbb24", "filename": "gcc/config/ia64/sysv4.h", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fconfig%2Fia64%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fconfig%2Fia64%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fsysv4.h?ref=201556f0e005802b8ebb206a193a6feb55a555af", "patch": "@@ -138,12 +138,12 @@ do {\t\t\t\t\t\t\t\t\t\\\n /* We override svr4.h so that we can support the sdata section.  */\n \n #undef SELECT_SECTION\n-#define SELECT_SECTION(DECL,RELOC)\t\t\t\t\t\\\n+#define SELECT_SECTION(DECL,RELOC,ALIGN)\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n   if (TREE_CODE (DECL) == STRING_CST)\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       if (! flag_writable_strings)\t\t\t\t\t\\\n-\tconst_section ();\t\t\t\t\t\t\\\n+\tmergeable_string_section ((DECL), (ALIGN), 0);\t\t\t\\\n       else\t\t\t\t\t\t\t\t\\\n \tdata_section ();\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n@@ -152,13 +152,20 @@ do {\t\t\t\t\t\t\t\t\t\\\n       if (XSTR (XEXP (DECL_RTL (DECL), 0), 0)[0]\t\t\t\\\n \t  == SDATA_NAME_FLAG_CHAR)\t\t\t\t\t\\\n         sdata_section ();\t\t\t\t\t\t\\\n-      /* ??? We need the extra ! RELOC check, because the default is to \\\n+      /* ??? We need the extra RELOC check, because the default is to\t\\\n \t only check RELOC if flag_pic is set, and we don't set flag_pic \\\n \t (yet?).  */\t\t\t\t\t\t\t\\\n-      else if (DECL_READONLY_SECTION (DECL, RELOC) && ! (RELOC))\t\\\n+      else if (!DECL_READONLY_SECTION (DECL, RELOC) || (RELOC))\t\t\\\n+\tdata_section ();\t\t\t\t\t\t\\\n+      else if (flag_merge_constants < 2)\t\t\t\t\\\n+\t/* C and C++ don't allow different variables to share\t\t\\\n+\t   the same location.  -fmerge-all-constants allows\t\t\\\n+\t   even that (at the expense of not conforming).  */\t\t\\\n \tconst_section ();\t\t\t\t\t\t\\\n+      else if (TREE_CODE (DECL_INITIAL (DECL)) == STRING_CST)\t\t\\\n+\tmergeable_string_section (DECL_INITIAL (DECL), (ALIGN), 0);\t\\\n       else\t\t\t\t\t\t\t\t\\\n-\tdata_section ();\t\t\t\t\t\t\\\n+\tmergeable_constant_section (DECL_MODE (DECL), (ALIGN), 0);\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   /* This could be a CONSTRUCTOR containing ADDR_EXPR of a VAR_DECL,\t\\\n      in which case we can't put it in a shared library rodata.  */\t\\\n@@ -172,15 +179,15 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n extern unsigned int ia64_section_threshold;\n #undef SELECT_RTX_SECTION\n-#define SELECT_RTX_SECTION(MODE, RTX)\t\t\t\t\t\\\n+#define SELECT_RTX_SECTION(MODE, RTX, ALIGN)\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n   if (GET_MODE_SIZE (MODE) > 0\t\t\t\t\t\t\\\n       && GET_MODE_SIZE (MODE) <= ia64_section_threshold)\t\t\\\n     sdata_section ();\t\t\t\t\t\t\t\\\n   else if (flag_pic && symbolic_operand ((RTX), (MODE)))\t\t\\\n     data_section ();\t\t\t\t\t\t\t\\\n   else\t\t\t\t\t\t\t\t\t\\\n-    const_section ();\t\t\t\t\t\t\t\\\n+    mergeable_constant_section ((MODE), (ALIGN), 0);\t\t\t\\\n }\n \n #undef EXTRA_SECTIONS"}, {"sha": "4cb379e34be432fa9fa5496878e759a121305eb2", "filename": "gcc/config/m32r/m32r.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fconfig%2Fm32r%2Fm32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fconfig%2Fm32r%2Fm32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.h?ref=201556f0e005802b8ebb206a193a6feb55a555af", "patch": "@@ -1534,7 +1534,8 @@ sbss_section ()\t\t\t\t\t\t\t\t\\\n    or a constant of some sort.  RELOC indicates whether the initial value\n    of EXP requires link-time relocations.  */\n #undef  SELECT_SECTION\n-#define SELECT_SECTION(EXP, RELOC) m32r_select_section ((EXP), (RELOC))\n+#define SELECT_SECTION(EXP, RELOC, ALIGN) \\\n+  m32r_select_section ((EXP), (RELOC))\n \n /* A C statement or statements to switch to the appropriate section for\n    output of RTX in mode MODE.  You can assume that RTX"}, {"sha": "9607a920c59e233e40f0363b1f5bcf37a4119eb0", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=201556f0e005802b8ebb206a193a6feb55a555af", "patch": "@@ -359,7 +359,7 @@ extern int target_flags;\n /* This is how to align an instruction for optimal branching. */\n #define LABEL_ALIGN_AFTER_BARRIER(LABEL) (m68k_align_jumps)\n \n-#define SELECT_RTX_SECTION(MODE, X)\t\t\t\t\t\\\n+#define SELECT_RTX_SECTION(MODE, X, ALIGN)\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n   if (!flag_pic)\t\t\t\t\t\t\t\\\n     readonly_data_section();\t\t\t\t\t\t\\"}, {"sha": "1d91168a5a406c412c39d5ae756c4b6ac692ee36", "filename": "gcc/config/m88k/dgux.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fconfig%2Fm88k%2Fdgux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fconfig%2Fm88k%2Fdgux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fdgux.h?ref=201556f0e005802b8ebb206a193a6feb55a555af", "patch": "@@ -294,7 +294,7 @@ func_ptr __DTOR_END__[1] = { (func_ptr) (-1) }\n \n /* Must use data section for relocatable constants when pic.  */\n #undef SELECT_RTX_SECTION\n-#define SELECT_RTX_SECTION(MODE,RTX)            \\\n+#define SELECT_RTX_SECTION(MODE,RTX,ALIGN)      \\\n {                                               \\\n   if (flag_pic && symbolic_operand (RTX))       \\\n     data_section ();                            \\"}, {"sha": "881acd88be0d815cd845b707f3f20c13ea935b99", "filename": "gcc/config/m88k/m88k.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fconfig%2Fm88k%2Fm88k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fconfig%2Fm88k%2Fm88k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.h?ref=201556f0e005802b8ebb206a193a6feb55a555af", "patch": "@@ -2480,7 +2480,7 @@ sdata_section ()\t\t\t\t\t\t\t\\\n \n    For strings, the section is selected before the segment info is encoded.  */\n #undef\tSELECT_SECTION\n-#define SELECT_SECTION(DECL,RELOC)\t\t\t\t\t\\\n+#define SELECT_SECTION(DECL,RELOC,ALIGN)\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n   if (TREE_CODE (DECL) == STRING_CST)\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\"}, {"sha": "e08b337c1948090444cdeef0fe04d55e28c287b7", "filename": "gcc/config/mcore/mcore-pe.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fconfig%2Fmcore%2Fmcore-pe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fconfig%2Fmcore%2Fmcore-pe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore-pe.h?ref=201556f0e005802b8ebb206a193a6feb55a555af", "patch": "@@ -81,7 +81,7 @@ rdata_section ()\t\t\t\t\t\t\\\n    or a constant of some sort.  RELOC indicates whether forming\n    the initial value of DECL requires link-time relocations.  */\n #undef  SELECT_SECTION\n-#define SELECT_SECTION(DECL, RELOC)\t\t\t\t\t\\\n+#define SELECT_SECTION(DECL, RELOC, ALIGN)\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n   if (TREE_CODE (DECL) == STRING_CST)\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n@@ -111,7 +111,7 @@ rdata_section ()\t\t\t\t\t\t\\\n    in the case of a `const_int' rtx.  Currently, these always\n    go into the const section.  */\n #undef  SELECT_RTX_SECTION\n-#define SELECT_RTX_SECTION(MODE, RTX) rdata_section ()\n+#define SELECT_RTX_SECTION(MODE, RTX, ALIGN) rdata_section ()\n \n #define MCORE_EXPORT_NAME(STREAM, NAME)\t\t\t\\\n   do\t\t\t\t\t\t\t\\"}, {"sha": "fb54bcd605da77bd8ec831ef44bc9a9a0808abff", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=201556f0e005802b8ebb206a193a6feb55a555af", "patch": "@@ -4477,10 +4477,12 @@ rdata_section ()\t\t\t\t\t\t\t\\\n    and select that section.  */\n \n #undef SELECT_RTX_SECTION\n-#define SELECT_RTX_SECTION(MODE,RTX)\tmips_select_rtx_section (MODE, RTX)\n+#define SELECT_RTX_SECTION(MODE, RTX, ALIGN) \\\n+  mips_select_rtx_section (MODE, RTX)\n \n #undef SELECT_SECTION\n-#define SELECT_SECTION(DECL, RELOC)\tmips_select_section (DECL, RELOC)\n+#define SELECT_SECTION(DECL, RELOC, ALIGN) \\\n+  mips_select_section (DECL, RELOC)\n \n \f\n /* Store in OUTPUT a string (made with alloca) containing"}, {"sha": "956b9e27d42b56d87950d5401e88061cde3a35c9", "filename": "gcc/config/nextstep.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fconfig%2Fnextstep.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fconfig%2Fnextstep.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnextstep.h?ref=201556f0e005802b8ebb206a193a6feb55a555af", "patch": "@@ -445,7 +445,7 @@ objc_section_init ()\t\t\t\t\\\n #define READONLY_DATA_SECTION const_section\n \n #undef\tSELECT_SECTION\n-#define SELECT_SECTION(exp,reloc)\t\t\t\t\\\n+#define SELECT_SECTION(exp,reloc,align)\t\t\t\t\\\n   do\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n       if (TREE_CODE (exp) == STRING_CST)\t\t\t\\\n@@ -563,7 +563,7 @@ objc_section_init ()\t\t\t\t\\\n   while (0)\n \n #undef\tSELECT_RTX_SECTION\n-#define SELECT_RTX_SECTION(mode, rtx)\t\t\t\t\t\\\n+#define SELECT_RTX_SECTION(mode, rtx, align)\t\t\t\t\\\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       if (GET_MODE_SIZE(mode) == 8)\t\t\t\t\t\\"}, {"sha": "f290802bf3460711333e24c9ea39cbbcd9b49c2c", "filename": "gcc/config/pa/pa-linux.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fconfig%2Fpa%2Fpa-linux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fconfig%2Fpa%2Fpa-linux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-linux.h?ref=201556f0e005802b8ebb206a193a6feb55a555af", "patch": "@@ -55,7 +55,7 @@ Boston, MA 02111-1307, USA.  */\n \n /* Put plabels into the data section so we can relocate them.  */\n #undef SELECT_RTX_SECTION\n-#define SELECT_RTX_SECTION(MODE,RTX)\t\\\n+#define SELECT_RTX_SECTION(MODE,RTX,ALIGN)\t\\\n   if (flag_pic && function_label_operand (RTX, MODE))\t\\\n     data_section ();\t\t\t\t\t\\\n   else\t\t\t\t\t\t\t\\"}, {"sha": "fa892f1421b9e3440353ca1f7012825fd1ad3b1b", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=201556f0e005802b8ebb206a193a6feb55a555af", "patch": "@@ -1403,7 +1403,7 @@ do { \t\t\t\t\t\t\t\t\t\\\n    library.  Since we can't know at compile time if a symbol will be\n    satisfied by a shared library or main program we put any symbolic\n    constant into the normal data section.  */\n-#define SELECT_RTX_SECTION(MODE,RTX)\t\\\n+#define SELECT_RTX_SECTION(MODE,RTX,ALIGN)\t\\\n   if (symbolic_operand (RTX, MODE))\t\\\n     data_section ();\t\t\t\\\n   else\t\t\t\t\t\\\n@@ -1413,7 +1413,7 @@ do { \t\t\t\t\t\t\t\t\t\\\n    in the read-only data section to a symbol defined in a shared\n    library.  Therefore, expressions that might require a reloc can\n    not be placed in the read-only data section.  */\n-#define SELECT_SECTION(EXP,RELOC) \\\n+#define SELECT_SECTION(EXP,RELOC,ALIGN) \\\n   if (TREE_CODE (EXP) == VAR_DECL \\\n       && TREE_READONLY (EXP) \\\n       && !TREE_THIS_VOLATILE (EXP) \\"}, {"sha": "2e517a19cb54bfdd08ec1c50901f547cc8d18419", "filename": "gcc/config/romp/romp.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fconfig%2Fromp%2Fromp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fconfig%2Fromp%2Fromp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fromp%2Fromp.h?ref=201556f0e005802b8ebb206a193a6feb55a555af", "patch": "@@ -717,7 +717,7 @@ struct rt_cargs {int gregs, fregs; };\n \n    On ROMP, all constants are in the data area.  */\n \n-#define SELECT_RTX_SECTION(MODE, X)\tdata_section ()\n+#define SELECT_RTX_SECTION(MODE, X, ALIGN)\tdata_section ()\n \n /* Output assembler code to FILE to increment profiler label # LABELNO\n    for profiling a function entry.  */"}, {"sha": "1b2051d82c4f3bce41e9de54416efa9639f5bc55", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=201556f0e005802b8ebb206a193a6feb55a555af", "patch": "@@ -566,7 +566,7 @@ fini_section ()\t\t\t\t\t\t\t\t\\\n \n /* Override elfos.h definition.  */\n #undef\tSELECT_RTX_SECTION\n-#define\tSELECT_RTX_SECTION(MODE, X) rs6000_select_rtx_section (MODE, X)\n+#define\tSELECT_RTX_SECTION(MODE, X, ALIGN) rs6000_select_rtx_section (MODE, X)\n \n /* A C statement or statements to switch to the appropriate\n    section for output of DECL.  DECL is either a `VAR_DECL' node\n@@ -575,7 +575,7 @@ fini_section ()\t\t\t\t\t\t\t\t\\\n \n /* Override elfos.h definition.  */\n #undef\tSELECT_SECTION\n-#define\tSELECT_SECTION(DECL, RELOC) rs6000_select_section (DECL, RELOC)\n+#define\tSELECT_SECTION(DECL, RELOC, ALIGN) rs6000_select_section (DECL, RELOC)\n \n /* A C statement to build up a unique section name, expressed as a\n    STRING_CST node, and assign it to DECL_SECTION_NAME (decl)."}, {"sha": "fbb74360bad7f7eccee569d5df10328fd9054d13", "filename": "gcc/config/rs6000/xcoff.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fconfig%2Frs6000%2Fxcoff.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fconfig%2Frs6000%2Fxcoff.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fxcoff.h?ref=201556f0e005802b8ebb206a193a6feb55a555af", "patch": "@@ -144,7 +144,7 @@ toc_section ()\t\t\t\t\t\t\\\n    On the RS/6000, we have a special section for all variables except those\n    that are static.  */\n \n-#define SELECT_SECTION(EXP,RELOC)\t\t\t\\\n+#define SELECT_SECTION(EXP,RELOC,ALIGN)\t\t\t\\\n {\t\t\t\t\t\t\t\\\n   if ((TREE_CODE (EXP) == STRING_CST\t\t\t\\\n        && ! flag_writable_strings)\t\t\t\\\n@@ -199,7 +199,7 @@ toc_section ()\t\t\t\t\t\t\\\n    However, if this is being placed in the TOC it must be output as a\n    toc entry.  */\n \n-#define SELECT_RTX_SECTION(MODE, X)\t\t\t\\\n+#define SELECT_RTX_SECTION(MODE, X, ALIGN)\t\t\\\n { if (ASM_OUTPUT_SPECIAL_POOL_ENTRY_P (X, MODE))\t\\\n     toc_section ();\t\t\t\t\t\\\n   else\t\t\t\t\t\t\t\\"}, {"sha": "efe13777623aa1796534d06f537795a8d1994c17", "filename": "gcc/config/s390/linux.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fconfig%2Fs390%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fconfig%2Fs390%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Flinux.h?ref=201556f0e005802b8ebb206a193a6feb55a555af", "patch": "@@ -295,7 +295,7 @@ do {                                                                    \\\n  */\n \n #undef SELECT_RTX_SECTION\n-#define SELECT_RTX_SECTION(MODE, X)\n+#define SELECT_RTX_SECTION(MODE, X, ALIGN)\n \n \f\n /* Output code to add DELTA to the first argument, and then jump to FUNCTION."}, {"sha": "91deb4903d28ad8b36f3054d4acd811ea4ab1337", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=201556f0e005802b8ebb206a193a6feb55a555af", "patch": "@@ -8765,6 +8765,14 @@ sparc_elf_asm_named_section (name, flags)\n      const char *name;\n      unsigned int flags;\n {\n+  if (flags & SECTION_MERGE)\n+    {\n+      /* entsize cannot be expressed in this section attributes\n+\t encoding style.  */\n+      default_elf_asm_named_section (name, flags);\n+      return;\n+    }\n+\n   fprintf (asm_out_file, \"\\t.section\\t\\\"%s\\\"\", name);\n \n   if (!(flags & SECTION_DEBUG))"}, {"sha": "629286ed912694ad5bcdec5e48845f2489b7d52e", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=201556f0e005802b8ebb206a193a6feb55a555af", "patch": "@@ -912,7 +912,7 @@ if (TARGET_ARCH64\t\t\t\t\\\n #endif\n \n /* This is defined differently for v9 in a cover file.  */\n-#define SELECT_SECTION(T,RELOC)\t\t\t\t\t\t\\\n+#define SELECT_SECTION(T,RELOC,ALIGN)\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n   if (TREE_CODE (T) == VAR_DECL)\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n@@ -945,7 +945,7 @@ if (TARGET_ARCH64\t\t\t\t\\\n /* Use text section for a constant\n    unless we need more alignment than that offers.  */\n /* This is defined differently for v9 in a cover file.  */\n-#define SELECT_RTX_SECTION(MODE, X)\t\t\\\n+#define SELECT_RTX_SECTION(MODE, X, ALIGN)\t\\\n {\t\t\t\t\t\t\\\n   if (GET_MODE_BITSIZE (MODE) <= MAX_TEXT_ALIGN \\\n       && ! (flag_pic && (symbolic_operand ((X), (MODE)) || SUNOS4_SHARED_LIBRARIES)))  \\"}, {"sha": "d9c0be7e2081d1ba43a206963487c59bee9b0a7c", "filename": "gcc/config/sparc/sysv4.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fconfig%2Fsparc%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fconfig%2Fsparc%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsysv4.h?ref=201556f0e005802b8ebb206a193a6feb55a555af", "patch": "@@ -79,7 +79,7 @@ Boston, MA 02111-1307, USA.  */\n \n /* Must use data section for relocatable constants when pic.  */\n #undef SELECT_RTX_SECTION\n-#define SELECT_RTX_SECTION(MODE,RTX)\t\t\\\n+#define SELECT_RTX_SECTION(MODE,RTX,ALIGN)\t\\\n {\t\t\t\t\t\t\\\n   if (flag_pic && symbolic_operand ((RTX), (MODE))) \\\n     data_section ();\t\t\t\t\\"}, {"sha": "2258819306cfe59a8c2bfd2e98895b6b89700a31", "filename": "gcc/config/stormy16/stormy16.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.h?ref=201556f0e005802b8ebb206a193a6feb55a555af", "patch": "@@ -3470,7 +3470,7 @@ do {\t\t\t\t\t\t\t\\\n    the read-only data section (usually the text section).\n \n    Defined in svr4.h.  */\n-/* #define SELECT_SECTION(EXP, RELOC) */\n+/* #define SELECT_SECTION(EXP, RELOC, ALIGN) */\n \n /* A C statement or statements to switch to the appropriate section for output\n    of RTX in mode MODE.  You can assume that RTX is some kind of constant in\n@@ -3482,7 +3482,7 @@ do {\t\t\t\t\t\t\t\\\n    section.\n \n    Defined in svr4.h.  */\n-/* #define SELECT_RTX_SECTION(MODE, RTX) */\n+/* #define SELECT_RTX_SECTION(MODE, RTX, ALIGN) */\n \n /* Define this macro if jump tables (for `tablejump' insns) should be output in\n    the text section, along with the assembler instructions.  Otherwise, the"}, {"sha": "57f3ee333edcabcf0064cb0e699552ba6dfa63b5", "filename": "gcc/config/svr3.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fconfig%2Fsvr3.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fconfig%2Fsvr3.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsvr3.h?ref=201556f0e005802b8ebb206a193a6feb55a555af", "patch": "@@ -301,7 +301,7 @@ const_section ()\t\t\t\t\t\t\t\\\n    or a constant of some sort.  RELOC indicates whether forming\n    the initial value of DECL requires link-time relocations.  */\n \n-#define SELECT_SECTION(DECL,RELOC)\t\t\t\t\t\\\n+#define SELECT_SECTION(DECL,RELOC,ALIGN)\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n   if (TREE_CODE (DECL) == STRING_CST)\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n@@ -331,4 +331,4 @@ const_section ()\t\t\t\t\t\t\t\\\n    in the case of a `const_int' rtx.  Currently, these always\n    go into the const section.  */\n \n-#define SELECT_RTX_SECTION(MODE,RTX) const_section()\n+#define SELECT_RTX_SECTION(MODE,RTX,ALIGN) const_section()"}, {"sha": "b077f6d72d9e8047a02d7df6c775e16d6aa35fe6", "filename": "gcc/config/v850/v850.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fconfig%2Fv850%2Fv850.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fconfig%2Fv850%2Fv850.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.h?ref=201556f0e005802b8ebb206a193a6feb55a555af", "patch": "@@ -1164,7 +1164,7 @@ zbss_section ()\t\t\t\t\t\t\t\t\\\n    Do not define this macro if you put all read-only variables and\n    constants in the read-only data section (usually the text section).  */\n #undef  SELECT_SECTION\n-#define SELECT_SECTION(EXP, RELOC)\t\t\t\t\t\\\n+#define SELECT_SECTION(EXP, RELOC, ALIGN)\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n   if (TREE_CODE (EXP) == VAR_DECL)\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n@@ -1227,7 +1227,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n    Do not define this macro if you put all constants in the read-only\n    data section.  */\n-/* #define SELECT_RTX_SECTION(MODE, RTX) */\n+/* #define SELECT_RTX_SECTION(MODE, RTX, ALIGN) */\n \n /* Output at beginning/end of assembler file.  */\n #undef ASM_FILE_START"}, {"sha": "133d1c3ba1ab8db60195352f40fb2e3dff149af9", "filename": "gcc/config/vax/vms.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fconfig%2Fvax%2Fvms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fconfig%2Fvax%2Fvms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvms.h?ref=201556f0e005802b8ebb206a193a6feb55a555af", "patch": "@@ -218,7 +218,7 @@ const_section ()\t\t\t\t\t\\\n    Since this macro is used in a number of places, we must also be able\n    to decide where to place string constants.  */\n \n-#define SELECT_SECTION(T,RELOC)\t\t\t\t\t\t\\\n+#define SELECT_SECTION(T,RELOC,ALIGN)\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n   if (TREE_CODE (T) == VAR_DECL)\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\"}, {"sha": "169ba2cbb28ee50c7fbe2cb3867d7c84b470c70f", "filename": "gcc/configure", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=201556f0e005802b8ebb206a193a6feb55a555af", "patch": "@@ -7164,6 +7164,29 @@ EOF\n fi\n echo \"$ac_t\"\"$gcc_cv_as_eh_frame\" 1>&6\n \n+echo $ac_n \"checking assembler section merging support\"\"... $ac_c\" 1>&6\n+echo \"configure:6569: checking assembler section merging support\" >&5\n+gcc_cv_as_shf_merge=no\n+if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x; then\n+  if test \"$gcc_cv_gas_major_version\" -eq 2 -a \"$gcc_cv_gas_minor_version\" -ge 12 -o \"$gcc_cv_gas_major_version\" -gt 2 && grep 'obj_format = elf' ../gas/Makefile > /dev/null; then\n+    gcc_cv_as_subsections=\"working SHF_MERGE support\"\n+  fi\n+elif test x$gcc_cv_as != x; then\n+\t# Check if we support SHF_MERGE sections\n+\techo '.section .rodata.str, \"aMS\", @progbits, 1' > conftest.s\n+\tif $gcc_cv_as -o conftest.o conftest.s > /dev/null 2>&1; then\n+\t\tgcc_cv_as_shf_merge=yes\n+\tfi\n+\trm -f conftest.s conftest.o\n+fi\n+if test x\"$gcc_cv_as_shf_merge\" = xyes; then\n+\tcat >> confdefs.h <<\\EOF\n+#define HAVE_GAS_SHF_MERGE 1\n+EOF\n+\n+fi\n+echo \"$ac_t\"\"$gcc_cv_as_shf_merge\" 1>&6\n+\n case \"$target\" in \n   sparc*-*-*)\n     echo $ac_n \"checking assembler .register pseudo-op support\"\"... $ac_c\" 1>&6"}, {"sha": "01a927e76a0f13bdcf9d7ae4dff764122a32b0d4", "filename": "gcc/configure.in", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.in?ref=201556f0e005802b8ebb206a193a6feb55a555af", "patch": "@@ -1484,6 +1484,26 @@ EOF\n fi\n AC_MSG_RESULT($gcc_cv_as_eh_frame)\n \n+AC_MSG_CHECKING(assembler section merging support)\n+gcc_cv_as_shf_merge=no\n+if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x; then\n+  if test \"$gcc_cv_gas_major_version\" -eq 2 -a \"$gcc_cv_gas_minor_version\" -ge 12 -o \"$gcc_cv_gas_major_version\" -gt 2 && grep 'obj_format = elf' ../gas/Makefile > /dev/null; then\n+    gcc_cv_as_subsections=\"working SHF_MERGE support\"\n+  fi\n+elif test x$gcc_cv_as != x; then\n+\t# Check if we support SHF_MERGE sections\n+\techo '.section .rodata.str, \"aMS\", @progbits, 1' > conftest.s\n+\tif $gcc_cv_as -o conftest.o conftest.s > /dev/null 2>&1; then\n+\t\tgcc_cv_as_shf_merge=yes\n+\tfi\n+\trm -f conftest.s conftest.o\n+fi\n+if test x\"$gcc_cv_as_shf_merge\" = xyes; then\n+\tAC_DEFINE(HAVE_GAS_SHF_MERGE, 1,\n+[Define if your assembler supports marking sections with SHF_MERGE flag.])\n+fi\n+AC_MSG_RESULT($gcc_cv_as_shf_merge)\n+\n case \"$target\" in \n   sparc*-*-*)\n     AC_CACHE_CHECK([assembler .register pseudo-op support],"}, {"sha": "d2b2afc8a8065b81042ffe3fb467c053c75fc501", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=201556f0e005802b8ebb206a193a6feb55a555af", "patch": "@@ -262,8 +262,8 @@ in the following sections.\n -fforce-addr  -fforce-mem  -ffunction-sections @gol\n -fgcse  -fgcse-lm  -fgcse-sm @gol\n -finline-functions  -finline-limit=@var{n}  -fkeep-inline-functions @gol\n--fkeep-static-consts  -fmove-all-movables @gol\n--fno-default-inline  -fno-defer-pop @gol\n+-fkeep-static-consts  -fmerge-constants  -fmerge-all-constants @gol\n+-fmove-all-movables  -fno-default-inline  -fno-defer-pop @gol\n -fno-function-cse  -fno-guess-branch-probability @gol\n -fno-inline  -fno-math-errno  -fno-peephole  -fno-peephole2 @gol\n -funsafe-math-optimizations -fno-trapping-math @gol\n@@ -3321,6 +3321,23 @@ GCC enables this option by default.  If you want to force the compiler to\n check if the variable was referenced, regardless of whether or not\n optimization is turned on, use the @option{-fno-keep-static-consts} option.\n \n+@item -fmerge-constants\n+Attempt to merge identical constants (string constants and floating point\n+constants) accross compilation units.\n+\n+This option is default for optimized compilation if assembler and linker\n+support it.  Use @option{-fno-merge-constants} to inhibit this behaviour.\n+\n+@item -fmerge-all-constants\n+Attempt to merge identical constants and identical variables.\n+\n+This option implies @option{-fmerge-constants}.  In addition to\n+@option{-fmerge-constants} this considers e.g. even constant initialized\n+arrays or initialized constant variables with integral or floating point\n+types.  Languages like C or C++ require each non-automatic variable to\n+have distinct location, so using this option will result in non-conforming\n+behaviour.\n+\n @item -fno-function-cse\n @opindex fno-function-cse\n Do not put function addresses in registers; make each instruction that"}, {"sha": "edc2f3c342d1b4df5d5450de84e86a73686ad816", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=201556f0e005802b8ebb206a193a6feb55a555af", "patch": "@@ -5650,25 +5650,26 @@ If these items should be placed in the text section, this macro should\n not be defined.\n \n @findex SELECT_SECTION\n-@item SELECT_SECTION (@var{exp}, @var{reloc})\n+@item SELECT_SECTION (@var{exp}, @var{reloc}, @var{align})\n A C statement or statements to switch to the appropriate section for\n output of @var{exp}.  You can assume that @var{exp} is either a\n @code{VAR_DECL} node or a constant of some sort.  @var{reloc}\n indicates whether the initial value of @var{exp} requires link-time\n relocations.  Select the section by calling @code{text_section} or one\n-of the alternatives for other sections.\n+of the alternatives for other sections.  @var{align} is the constant\n+alignment in bits.\n \n Do not define this macro if you put all read-only variables and\n constants in the read-only data section (usually the text section).\n \n @findex SELECT_RTX_SECTION\n-@item SELECT_RTX_SECTION (@var{mode}, @var{rtx})\n+@item SELECT_RTX_SECTION (@var{mode}, @var{rtx}, @var{align})\n A C statement or statements to switch to the appropriate section for\n output of @var{rtx} in mode @var{mode}.  You can assume that @var{rtx}\n is some kind of constant in RTL@.  The argument @var{mode} is redundant\n except in the case of a @code{const_int} rtx.  Select the section by\n calling @code{text_section} or one of the alternatives for other\n-sections.\n+sections.  @var{align} is the constant alignment in bits.\n \n Do not define this macro if you put all constants in the read-only\n data section."}, {"sha": "04046af693b20cba8e2c4a5016e2c385af24a709", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=201556f0e005802b8ebb206a193a6feb55a555af", "patch": "@@ -1,3 +1,8 @@\n+2001-09-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* com.c (ffe_init_options): Default to -fmerge-all-constants\n+\tif optimizing.\n+\n 2000-08-14  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \t* target.h (FFETARGET_32bit_longs): Don't define"}, {"sha": "137b72fa9acc4e20712079783733d54c005d47ef", "filename": "gcc/f/com.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Ff%2Fcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Ff%2Fcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.c?ref=201556f0e005802b8ebb206a193a6feb55a555af", "patch": "@@ -14657,6 +14657,7 @@ ffe_init_options ()\n   flag_move_all_movables = 1;\n   flag_reduce_all_givs = 1;\n   flag_argument_noalias = 2;\n+  flag_merge_constants = 2;\n   flag_errno_math = 0;\n   flag_complex_divide_method = 1;\n }"}, {"sha": "bd29cea1cde7e6d478bc0b4b6154b1ad23bbc9c2", "filename": "gcc/flags.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=201556f0e005802b8ebb206a193a6feb55a555af", "patch": "@@ -544,6 +544,11 @@ extern int flag_bounded_pointers;\n    For CHILL: defaults to off.  */\n extern int flag_bounds_check;\n \n+/* This will attempt to merge constant section constants, if 1 only\n+   string constants and constants from constant pool, if 2 also constant\n+   variables.  */\n+extern int flag_merge_constants;\n+\n /* If one, renumber instruction UIDs to reduce the number of\n    unused UIDs if there are a lot of instructions.  If greater than\n    one, unconditionally renumber instruction UIDs.  */"}, {"sha": "f1722f146b6d9c97c9c015331b174dd911eed6ec", "filename": "gcc/output.h", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=201556f0e005802b8ebb206a193a6feb55a555af", "patch": "@@ -207,6 +207,15 @@ extern void function_section\t\tPARAMS ((tree));\n /* Tell assembler to switch to the section for the exception table.  */\n extern void exception_section\t\tPARAMS ((void));\n \n+/* Tell assembler to switch to the section for string merging.  */\n+extern void mergeable_string_section\tPARAMS ((tree, unsigned HOST_WIDE_INT,\n+\t\t\t\t\t\t unsigned int));\n+\n+/* Tell assembler to switch to the section for constant merging.  */\n+extern void mergeable_constant_section\tPARAMS ((enum machine_mode,\n+\t\t\t\t\t\t unsigned HOST_WIDE_INT,\n+\t\t\t\t\t\t unsigned int));\n+\n /* Declare DECL to be a weak symbol.  */\n extern void declare_weak\t\tPARAMS ((tree));\n #endif /* TREE_CODE */\n@@ -450,14 +459,18 @@ extern void default_function_pro_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n extern void no_asm_to_stream PARAMS ((FILE *));\n \n /* Flags controling properties of a section.  */\n-#define SECTION_CODE\t    1\t/* contains code */\n-#define SECTION_WRITE\t    2\t/* data is writable */\n-#define SECTION_DEBUG\t    4\t/* contains debug data */\n-#define SECTION_LINKONCE    8\t/* is linkonce */\n-#define SECTION_SMALL\t   16\t/* contains \"small data\" */\n-#define SECTION_BSS\t   32\t/* contains zeros only */\n-#define SECTION_FORGET\t   64\t/* forget that we've entered the section */\n-#define SECTION_MACH_DEP  128\t/* subsequent bits reserved for target */\n+#define SECTION_ENTSIZE\t 0x000ff\t/* entity size in section */\n+#define SECTION_CODE\t 0x00100\t/* contains code */\n+#define SECTION_WRITE\t 0x00200\t/* data is writable */\n+#define SECTION_DEBUG\t 0x00400\t/* contains debug data */\n+#define SECTION_LINKONCE 0x00800\t/* is linkonce */\n+#define SECTION_SMALL\t 0x01000\t/* contains \"small data\" */\n+#define SECTION_BSS\t 0x02000\t/* contains zeros only */\n+#define SECTION_FORGET\t 0x04000\t/* forget that we've entered the section */\n+#define SECTION_MERGE\t 0x08000\t/* contains mergeable data */\n+#define SECTION_STRINGS  0x10000\t/* contains zero terminated strings without\n+\t\t\t\t\t   embedded zeros */\n+#define SECTION_MACH_DEP 0x20000\t/* subsequent bits reserved for target */\n \n extern unsigned int get_named_section_flags PARAMS ((const char *));\n extern bool set_named_section_flags\tPARAMS ((const char *, unsigned int));"}, {"sha": "925f06b3cde721f4ee3c48b9f16f173cc97e4937", "filename": "gcc/toplev.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=201556f0e005802b8ebb206a193a6feb55a555af", "patch": "@@ -898,6 +898,11 @@ int flag_bounded_pointers = 0;\n    For CHILL: defaults to off.  */\n int flag_bounds_check = 0;\n \n+/* This will attempt to merge constant section constants, if 1 only\n+   string constants and constants from constant pool, if 2 also constant\n+   variables.  */\n+int flag_merge_constants = 1;\n+\n /* If one, renumber instruction UIDs to reduce the number of\n    unused UIDs if there are a lot of instructions.  If greater than\n    one, unconditionally renumber instruction UIDs.  */\n@@ -1139,6 +1144,10 @@ lang_independent_options f_options[] =\n    N_(\"Align all labels\") },\n   {\"align-functions\", &align_functions, 0,\n    N_(\"Align the start of functions\") },\n+  {\"merge-constants\", &flag_merge_constants, 1,\n+   N_(\"Attempt to merge identical constants accross compilation units\") },\n+  {\"merge-all-constants\", &flag_merge_constants, 2,\n+   N_(\"Attempt to merge identical constants and constant variables\") },\n   {\"check-memory-usage\", &flag_check_memory_usage, 1,\n    N_(\"Generate code to check every memory access\") },\n   {\"prefix-function-name\", &flag_prefix_function_name, 1,\n@@ -4680,6 +4689,11 @@ toplev_main (argc, argv)\n \t}\n     }\n \n+  if (!optimize)\n+    {\n+      flag_merge_constants = 0;\n+    }\n+\n   if (optimize >= 1)\n     {\n       flag_defer_pop = 1;"}, {"sha": "defa0c6a4d8d375aeb60ba0b7f9987c5ae3b9148", "filename": "gcc/varasm.c", "status": "modified", "additions": 125, "deletions": 12, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201556f0e005802b8ebb206a193a6feb55a555af/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=201556f0e005802b8ebb206a193a6feb55a555af", "patch": "@@ -560,7 +560,7 @@ variable_section (decl, reloc)\n \t for them.  */\n \n #ifdef SELECT_SECTION\n-      SELECT_SECTION (decl, reloc);\n+      SELECT_SECTION (decl, reloc, DECL_ALIGN (decl));\n #else\n       if (DECL_READONLY_SECTION (decl, reloc))\n \treadonly_data_section ();\n@@ -587,6 +587,111 @@ exception_section ()\n     readonly_data_section ();\n #endif\n }\n+\n+/* Tell assembler to switch to the section for string merging.  */\n+\n+void\n+mergeable_string_section (decl, align, flags)\n+  tree decl ATTRIBUTE_UNUSED;\n+  unsigned HOST_WIDE_INT align ATTRIBUTE_UNUSED;\n+  unsigned int flags ATTRIBUTE_UNUSED;\n+{\n+#ifdef HAVE_GAS_SHF_MERGE\n+  if (flag_merge_constants\n+      && TREE_CODE (decl) == STRING_CST\n+      && TREE_CODE (TREE_TYPE (decl)) == ARRAY_TYPE\n+      && align <= 256\n+      && TREE_STRING_LENGTH (decl) >= int_size_in_bytes (TREE_TYPE (decl)))\n+    {\n+      enum machine_mode mode;\n+      unsigned int modesize;\n+      const char *str;\n+      int i, j, len, unit;\n+      char name[30];\n+\n+      mode = TYPE_MODE (TREE_TYPE (TREE_TYPE (decl)));\n+      modesize = GET_MODE_BITSIZE (mode);\n+      if (modesize >= 8 && modesize <= 256\n+\t  && (modesize & (modesize - 1)) == 0)\n+\t{\n+\t  if (align < modesize)\n+\t    align = modesize;\n+\n+\t  str = TREE_STRING_POINTER (decl);\n+\t  len = TREE_STRING_LENGTH (decl);\n+\t  unit = GET_MODE_SIZE (mode);\n+\n+\t  /* Check for embedded NUL characters.  */\n+\t  for (i = 0; i < len; i += unit)\n+\t    {\n+\t      for (j = 0; j < unit; j++)\n+\t\tif (str [i + j] != '\\0')\n+\t\t  break;\n+\t      if (j == unit)\n+\t\tbreak;\n+\t    }\n+\t  if (i == len - unit)\n+\t    {\n+\t      sprintf (name, \".rodata.str%d.%d\", modesize / 8,\n+\t\t       (int) (align / 8));\n+\t      flags |= (modesize / 8) | SECTION_MERGE | SECTION_STRINGS;\n+\t      if (!i && modesize < align)\n+\t\t{\n+\t\t  /* A \"\" string with requested alignment greater than\n+\t\t     character size might cause a problem:\n+\t\t     if some other string required even bigger\n+\t\t     alignment than \"\", then linker might think the\n+\t\t     \"\" is just part of padding after some other string\n+\t\t     and not put it into the hash table initially.\n+\t\t     But this means \"\" could have smaller alignment\n+\t\t     than requested.  */\n+#ifdef ASM_OUTPUT_SECTION_START\n+\t\t  named_section_flags (name, flags);\n+\t\t  ASM_OUTPUT_SECTION_START (asm_out_file);\n+#else\n+\t\t  readonly_data_section ();\n+#endif\n+\t\t  return;\n+\t\t}\n+\n+\t      named_section_flags (name, flags);\n+\t      return;\n+\t    }\n+\t}\n+    }\n+#endif\n+  readonly_data_section ();\n+}  \n+\n+/* Tell assembler to switch to the section for constant merging.  */\n+\n+void\n+mergeable_constant_section (mode, align, flags)\n+  enum machine_mode mode ATTRIBUTE_UNUSED;\n+  unsigned HOST_WIDE_INT align ATTRIBUTE_UNUSED;\n+  unsigned int flags ATTRIBUTE_UNUSED;\n+{\n+#ifdef HAVE_GAS_SHF_MERGE\n+  unsigned int modesize = GET_MODE_BITSIZE (mode);\n+\n+  if (flag_merge_constants\n+      && mode != VOIDmode\n+      && mode != BLKmode\n+      && modesize <= align\n+      && align >= 8\n+      && align <= 256\n+      && (align & (align - 1)) == 0)\n+    {\n+      char name[24];\n+\n+      sprintf (name, \".rodata.cst%d\", (int) (align / 8));\n+      flags |= (align / 8) | SECTION_MERGE;\n+      named_section_flags (name, flags);\n+      return;\n+    }            \n+#endif\n+  readonly_data_section ();\n+}\n \f\n /* Given NAME, a putative register name, discard any customary prefixes.  */\n \n@@ -3305,13 +3410,19 @@ output_constant_def_contents (exp, reloc, labelno)\n {\n   int align;\n \n+  /* Align the location counter as required by EXP's data type.  */\n+  align = TYPE_ALIGN (TREE_TYPE (exp));\n+#ifdef CONSTANT_ALIGNMENT\n+  align = CONSTANT_ALIGNMENT (exp, align);\n+#endif\n+\n   if (IN_NAMED_SECTION (exp))\n     named_section (exp, NULL, reloc);\n   else\n     {\n       /* First switch to text section, except for writable strings.  */\n #ifdef SELECT_SECTION\n-      SELECT_SECTION (exp, reloc);\n+      SELECT_SECTION (exp, reloc, align);\n #else\n       if (((TREE_CODE (exp) == STRING_CST) && flag_writable_strings)\n \t  || (flag_pic && reloc))\n@@ -3321,12 +3432,6 @@ output_constant_def_contents (exp, reloc, labelno)\n #endif\n     }\n \n-  /* Align the location counter as required by EXP's data type.  */\n-  align = TYPE_ALIGN (TREE_TYPE (exp));\n-#ifdef CONSTANT_ALIGNMENT\n-  align = CONSTANT_ALIGNMENT (exp, align);\n-#endif\n-\n   if (align > BITS_PER_UNIT)\n     ASM_OUTPUT_ALIGN (asm_out_file, floor_log2 (align / BITS_PER_UNIT));\n \n@@ -3877,7 +3982,7 @@ output_constant_pool (fnname, fndecl)\n \n       /* First switch to correct section.  */\n #ifdef SELECT_RTX_SECTION\n-      SELECT_RTX_SECTION (pool->mode, x);\n+      SELECT_RTX_SECTION (pool->mode, x, pool->align);\n #else\n       readonly_data_section ();\n #endif\n@@ -5060,7 +5165,7 @@ default_elf_asm_named_section (name, flags)\n      const char *name;\n      unsigned int flags;\n {\n-  char flagchars[8], *f = flagchars;\n+  char flagchars[10], *f = flagchars;\n   const char *type;\n \n   if (!(flags & SECTION_DEBUG))\n@@ -5071,15 +5176,23 @@ default_elf_asm_named_section (name, flags)\n     *f++ = 'x';\n   if (flags & SECTION_SMALL)\n     *f++ = 's';\n+  if (flags & SECTION_MERGE)\n+    *f++ = 'M';\n+  if (flags & SECTION_STRINGS)\n+    *f++ = 'S';\n   *f = '\\0';\n \n   if (flags & SECTION_BSS)\n     type = \"nobits\";\n   else\n     type = \"progbits\";\n \n-  fprintf (asm_out_file, \"\\t.section\\t%s,\\\"%s\\\",@%s\\n\",\n-\t   name, flagchars, type);\n+  if (flags & SECTION_ENTSIZE)\n+    fprintf (asm_out_file, \"\\t.section\\t%s,\\\"%s\\\",@%s,%d\\n\",\n+\t     name, flagchars, type, flags & SECTION_ENTSIZE);\n+  else\n+    fprintf (asm_out_file, \"\\t.section\\t%s,\\\"%s\\\",@%s\\n\",\n+\t     name, flagchars, type);\n }\n \n void"}]}