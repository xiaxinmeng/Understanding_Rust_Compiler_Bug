{"sha": "a03e944e92ee51ae583382079d4739b64bd93b35", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTAzZTk0NGU5MmVlNTFhZTU4MzM4MjA3OWQ0NzM5YjY0YmQ5M2IzNQ==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-06-22T21:46:05Z"}, "committer": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-06-23T14:26:16Z"}, "message": "Do not continue propagating values which cannot be set properly.\n\nIf the on-entry cache cannot properly represent a range, do not continue\ntrying to propagate it.\n\n\tPR tree-optimization/101148\n\tPR tree-optimization/101014\n\t* gimple-range-cache.cc (ranger_cache::ranger_cache): Adjust.\n\t(ranger_cache::~ranger_cache): Adjust.\n\t(ranger_cache::block_range): Check if propagation disallowed.\n\t(ranger_cache::propagate_cache): Disallow propagation if new value\n\tcan't be stored properly.\n\t* gimple-range-cache.h (ranger_cache::m_propfail): New member.", "tree": {"sha": "d7417f185d91fb313a96f544561e4036822077c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d7417f185d91fb313a96f544561e4036822077c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a03e944e92ee51ae583382079d4739b64bd93b35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a03e944e92ee51ae583382079d4739b64bd93b35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a03e944e92ee51ae583382079d4739b64bd93b35", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a03e944e92ee51ae583382079d4739b64bd93b35/comments", "author": null, "committer": null, "parents": [{"sha": "ca4d381662c37733b2a1d49d6c8f5fcfc1348f3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca4d381662c37733b2a1d49d6c8f5fcfc1348f3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca4d381662c37733b2a1d49d6c8f5fcfc1348f3d"}], "stats": {"total": 12, "additions": 11, "deletions": 1}, "files": [{"sha": "a377261c5c78931b5c2ffc763c188d324a9f351e", "filename": "gcc/gimple-range-cache.cc", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a03e944e92ee51ae583382079d4739b64bd93b35/gcc%2Fgimple-range-cache.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a03e944e92ee51ae583382079d4739b64bd93b35/gcc%2Fgimple-range-cache.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-cache.cc?ref=a03e944e92ee51ae583382079d4739b64bd93b35", "patch": "@@ -731,10 +731,12 @@ ranger_cache::ranger_cache ()\n       if (bb)\n \tm_gori.exports (bb);\n     }\n+  m_propfail = BITMAP_ALLOC (NULL);\n }\n \n ranger_cache::~ranger_cache ()\n {\n+  BITMAP_FREE (m_propfail);\n   if (m_oracle)\n     delete m_oracle;\n   delete m_temporal;\n@@ -990,7 +992,9 @@ ranger_cache::block_range (irange &r, basic_block bb, tree name, bool calc)\n void\n ranger_cache::add_to_update (basic_block bb)\n {\n-  if (!m_update_list.contains (bb))\n+  // If propagation has failed for BB, or its already in the list, don't\n+  // add it again.\n+  if (!bitmap_bit_p (m_propfail, bb->index) &&  !m_update_list.contains (bb))\n     m_update_list.quick_push (bb);\n }\n \n@@ -1007,6 +1011,7 @@ ranger_cache::propagate_cache (tree name)\n   int_range_max current_range;\n   int_range_max e_range;\n \n+  gcc_checking_assert (bitmap_empty_p (m_propfail));\n   // Process each block by seeing if its calculated range on entry is\n   // the same as its cached value. If there is a difference, update\n   // the cache to reflect the new value, and check to see if any\n@@ -1063,6 +1068,9 @@ ranger_cache::propagate_cache (tree name)\n       if (new_range != current_range)\n \t{\n \t  bool ok_p = m_on_entry.set_bb_range (name, bb, new_range);\n+\t  // If the cache couldn't set the value, mark it as failed.\n+\t  if (!ok_p)\n+\t    bitmap_set_bit (m_propfail, bb->index);\n \t  if (DEBUG_RANGE_CACHE) \n \t    {\n \t      if (!ok_p)\n@@ -1092,6 +1100,7 @@ ranger_cache::propagate_cache (tree name)\n       print_generic_expr (dump_file, name, TDF_SLIM);\n       fprintf (dump_file, \"\\n\");\n     }\n+  bitmap_clear (m_propfail);\n }\n \n // Check to see if an update to the value for NAME in BB has any effect"}, {"sha": "ecf63dc01b304e0a66811bd22d047a5ce8c23394", "filename": "gcc/gimple-range-cache.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a03e944e92ee51ae583382079d4739b64bd93b35/gcc%2Fgimple-range-cache.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a03e944e92ee51ae583382079d4739b64bd93b35/gcc%2Fgimple-range-cache.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-cache.h?ref=a03e944e92ee51ae583382079d4739b64bd93b35", "patch": "@@ -121,6 +121,7 @@ class ranger_cache : public range_query\n \n   void propagate_updated_value (tree name, basic_block bb);\n \n+  bitmap m_propfail;\n   vec<basic_block> m_workback;\n   vec<basic_block> m_update_list;\n };"}]}