{"sha": "a05076ba9dc1601cd22fb0c3364339d8ee6fc10b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTA1MDc2YmE5ZGMxNjAxY2QyMmZiMGMzMzY0MzM5ZDhlZTZmYzEwYg==", "commit": {"author": {"name": "Emmanuel Briot", "email": "briot@adacore.com", "date": "2005-11-15T14:01:37Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-11-15T14:01:37Z"}, "message": "prj-pp.adb (Print): Do not output the with statement if the associated name is empty...\n\n2005-11-14  Emmanuel Briot  <briot@adacore.com>\n\n\t* prj-pp.adb (Print): Do not output the with statement if the\n\tassociated name is empty, which happens for virtual extending projects.\n\t(Print): Preserve the \"extends all\" attribute when printing the project.\n\n\t* prj-tree.ads (String_Value_Of): Add comment about returned value for\n\ta virtual extending project.\n\nFrom-SVN: r106996", "tree": {"sha": "21d7fcdad36036902fa96812f5c24acc12a8be2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/21d7fcdad36036902fa96812f5c24acc12a8be2b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a05076ba9dc1601cd22fb0c3364339d8ee6fc10b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a05076ba9dc1601cd22fb0c3364339d8ee6fc10b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a05076ba9dc1601cd22fb0c3364339d8ee6fc10b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a05076ba9dc1601cd22fb0c3364339d8ee6fc10b/comments", "author": {"login": "briot", "id": 42402, "node_id": "MDQ6VXNlcjQyNDAy", "avatar_url": "https://avatars.githubusercontent.com/u/42402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/briot", "html_url": "https://github.com/briot", "followers_url": "https://api.github.com/users/briot/followers", "following_url": "https://api.github.com/users/briot/following{/other_user}", "gists_url": "https://api.github.com/users/briot/gists{/gist_id}", "starred_url": "https://api.github.com/users/briot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/briot/subscriptions", "organizations_url": "https://api.github.com/users/briot/orgs", "repos_url": "https://api.github.com/users/briot/repos", "events_url": "https://api.github.com/users/briot/events{/privacy}", "received_events_url": "https://api.github.com/users/briot/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9cd6ae612ea034f251c37dd6fa77d06fcb88fa09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cd6ae612ea034f251c37dd6fa77d06fcb88fa09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9cd6ae612ea034f251c37dd6fa77d06fcb88fa09"}], "stats": {"total": 54, "additions": 36, "deletions": 18}, "files": [{"sha": "bf9305966d9e86bbf79056fa1aef634d12c1e817", "filename": "gcc/ada/prj-pp.adb", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a05076ba9dc1601cd22fb0c3364339d8ee6fc10b/gcc%2Fada%2Fprj-pp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a05076ba9dc1601cd22fb0c3364339d8ee6fc10b/gcc%2Fada%2Fprj-pp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-pp.adb?ref=a05076ba9dc1601cd22fb0c3364339d8ee6fc10b", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---             Copyright (C) 2001-2005 Free Software Foundation, Inc.       --\n+--          Copyright (C) 2001-2005, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -38,7 +38,7 @@ package body Prj.PP is\n    Not_Tested : array (Project_Node_Kind) of Boolean := (others => True);\n \n    Max_Line_Length : constant := Hostparm.Max_Line_Length - 5;\n-   --  Maximum length of a line.\n+   --  Maximum length of a line\n \n    Column : Natural := 0;\n    --  Column number of the last character in the line. Used to avoid\n@@ -91,7 +91,7 @@ package body Prj.PP is\n       --  Outputs a name\n \n       procedure Start_Line (Indent : Natural);\n-      --  Outputs the indentation at the beginning of the line.\n+      --  Outputs the indentation at the beginning of the line\n \n       procedure Output_String (S : Name_Id);\n       --  Outputs a string using the default output procedures\n@@ -114,10 +114,10 @@ package body Prj.PP is\n       Write_Char : Write_Char_Ap := Output.Write_Char'Access;\n       Write_Eol  : Write_Eol_Ap  := Output.Write_Eol'Access;\n       Write_Str  : Write_Str_Ap  := Output.Write_Str'Access;\n-      --  These three access to procedure values are used for the output.\n+      --  These three access to procedure values are used for the output\n \n       Last_Line_Is_Empty : Boolean := False;\n-      --  Used to avoid two consecutive empty lines.\n+      --  Used to avoid two consecutive empty lines\n \n       ---------------------------\n       -- Output_Attribute_Name --\n@@ -337,6 +337,11 @@ package body Prj.PP is\n \n                   if Extended_Project_Path_Of (Node, In_Tree) /= No_Name then\n                      Write_String (\" extends \");\n+\n+                     if Is_Extending_All (Node, In_Tree) then\n+                        Write_String (\"all \");\n+                     end if;\n+\n                      Output_String (Extended_Project_Path_Of (Node, In_Tree));\n                   end if;\n \n@@ -361,7 +366,14 @@ package body Prj.PP is\n                when N_With_Clause =>\n                   pragma Debug (Indicate_Tested (N_With_Clause));\n \n-                  if Name_Of (Node, In_Tree) /= No_Name then\n+                  --  The with clause will sometimes contain an invalid name\n+                  --  when we are importing a virtual project from an\n+                  --  extending all project. Do not output anything in this\n+                  --  case\n+\n+                  if Name_Of (Node, In_Tree) /= No_Name\n+                    and then String_Value_Of (Node, In_Tree) /= No_Name\n+                  then\n                      if First_With_In_List then\n                         Print (First_Comment_Before (Node, In_Tree), Indent);\n                         Start_Line (Indent);"}, {"sha": "d5784c09e2bd686aff6a183111815724473def64", "filename": "gcc/ada/prj-tree.ads", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a05076ba9dc1601cd22fb0c3364339d8ee6fc10b/gcc%2Fada%2Fprj-tree.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a05076ba9dc1601cd22fb0c3364339d8ee6fc10b/gcc%2Fada%2Fprj-tree.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-tree.ads?ref=a05076ba9dc1601cd22fb0c3364339d8ee6fc10b", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---             Copyright (C) 2001-2005 Free Software Foundation, Inc.       --\n+--          Copyright (C) 2001-2005, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -85,9 +85,9 @@ package Prj.Tree is\n       N_Case_Item,\n       N_Comment_Zones,\n       N_Comment);\n-   --  Each node in the tree is of a Project_Node_Kind\n-   --  For the signification of the fields in each node of a\n-   --  Project_Node_Kind, look at package Tree_Private_Part.\n+   --  Each node in the tree is of a Project_Node_Kind. For the signification\n+   --  of the fields in each node of Project_Node_Kind, look at package\n+   --  Tree_Private_Part.\n \n    procedure Initialize (Tree : Project_Node_Tree_Ref);\n    --  Initialize the Project File tree: empty the Project_Nodes table\n@@ -97,8 +97,8 @@ package Prj.Tree is\n      (In_Tree       : Project_Node_Tree_Ref;\n       Of_Kind       : Project_Node_Kind;\n       And_Expr_Kind : Variable_Kind := Undefined) return Project_Node_Id;\n-   --  Returns a Project_Node_Record with the specified Kind and\n-   --  Expr_Kind; all the other components have default nil values.\n+   --  Returns a Project_Node_Record with the specified Kind and Expr_Kind. All\n+   --  the other components have default nil values.\n \n    function Hash (N : Project_Node_Id) return Header_Num;\n    --  Used for hash tables where the key is a Project_Node_Id\n@@ -149,10 +149,9 @@ package Prj.Tree is\n    --  comment, then it should be associated with this node.\n \n    procedure Set_Next_End_Node (To : Project_Node_Id);\n-   --  Put node To on the top of the end node stack. When an \"end\" line\n-   --  is found with this node on the top of the end node stack, the comments,\n-   --  if any, immediately preceding this \"end\" line will be associated with\n-   --  this node.\n+   --  Put node To on the top of the end node stack. When an END line is found\n+   --  with this node on the top of the end node stack, the comments, if any,\n+   --  immediately preceding this \"end\" line will be associated with this node.\n \n    procedure Remove_Next_End_Node;\n    --  Remove the top of the end node stack\n@@ -166,6 +165,7 @@ package Prj.Tree is\n       Follows_Empty_Line        : Boolean := False;\n       Is_Followed_By_Empty_Line : Boolean := False;\n    end record;\n+   --  Component type for Comments Table below\n \n    package Comments is new Table.Table\n      (Table_Component_Type => Comment_Data,\n@@ -181,6 +181,7 @@ package Prj.Tree is\n \n    type Comment_Location is\n      (Before, After, Before_End, After_End, End_Of_Line);\n+   --  Used in call to Add_Comments below\n \n    procedure Add_Comments\n      (To      : Project_Node_Id;\n@@ -193,7 +194,10 @@ package Prj.Tree is\n    ----------------------\n \n    --  The following query functions are part of the abstract interface\n-   --  of the Project File tree\n+   --  of the Project File tree. They provide access to fields of a project.\n+\n+   --  In the following, there are \"valid if\" comments, but no indication\n+   --  of what happens if they are called with invalid arguments ???\n \n    function Name_Of\n      (Node    : Project_Node_Id;\n@@ -314,7 +318,9 @@ package Prj.Tree is\n      (Node    : Project_Node_Id;\n       In_Tree : Project_Node_Tree_Ref) return Name_Id;\n    pragma Inline (String_Value_Of);\n-   --  Only valid for N_With_Clause, N_Literal_String nodes or N_Comment\n+   --  Only valid for N_With_Clause, N_Literal_String nodes or N_Comment.\n+   --  For a N_With_Clause created automatically for a virtual extending\n+   --  project, No_Name is returned.\n \n    function Source_Index_Of\n      (Node    : Project_Node_Id;"}]}