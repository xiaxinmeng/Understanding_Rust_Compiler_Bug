{"sha": "78da4d2e8476b54273d1d50a4d739d4f7d31732c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzhkYTRkMmU4NDc2YjU0MjczZDFkNTBhNGQ3MzlkNGY3ZDMxNzMyYw==", "commit": {"author": {"name": "Thomas Fitzsimmons", "email": "fitzsim@redhat.com", "date": "2005-05-04T03:18:49Z"}, "committer": {"name": "Thomas Fitzsimmons", "email": "fitzsim@gcc.gnu.org", "date": "2005-05-04T03:18:49Z"}, "message": "VolatileImage.java: Document.\n\n2005-05-03  Thomas Fitzsimmons  <fitzsim@redhat.com>\n\n\t* java/awt/image/VolatileImage.java: Document.\n\nFrom-SVN: r99208", "tree": {"sha": "3c0df9bdef7832789663fce5425b98bb32ad084e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c0df9bdef7832789663fce5425b98bb32ad084e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/78da4d2e8476b54273d1d50a4d739d4f7d31732c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78da4d2e8476b54273d1d50a4d739d4f7d31732c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78da4d2e8476b54273d1d50a4d739d4f7d31732c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78da4d2e8476b54273d1d50a4d739d4f7d31732c/comments", "author": null, "committer": null, "parents": [{"sha": "a7e1c9287c7fadf9e58521833f846fdb680bd81c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7e1c9287c7fadf9e58521833f846fdb680bd81c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7e1c9287c7fadf9e58521833f846fdb680bd81c"}], "stats": {"total": 260, "additions": 222, "deletions": 38}, "files": [{"sha": "5433712241973709dc27b38bbeacf2c9a78d9f60", "filename": "libjava/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78da4d2e8476b54273d1d50a4d739d4f7d31732c/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78da4d2e8476b54273d1d50a4d739d4f7d31732c/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=78da4d2e8476b54273d1d50a4d739d4f7d31732c", "patch": "@@ -1,3 +1,7 @@\n+2005-05-03  Thomas Fitzsimmons  <fitzsim@redhat.com>\n+\n+\t* java/awt/image/VolatileImage.java: Document.\n+\n 2005-05-03  Thomas Fitzsimmons  <fitzsim@redhat.com>\n \n \t* jni/gtk-peer/gnu_java_awt_peer_gtk_GtkToolkit.c"}, {"sha": "63d19526d98363166b3aa58abe387ddbc3fb81d7", "filename": "libjava/java/awt/image/VolatileImage.java", "status": "modified", "additions": 218, "deletions": 38, "changes": 256, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78da4d2e8476b54273d1d50a4d739d4f7d31732c/libjava%2Fjava%2Fawt%2Fimage%2FVolatileImage.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78da4d2e8476b54273d1d50a4d739d4f7d31732c/libjava%2Fjava%2Fawt%2Fimage%2FVolatileImage.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fimage%2FVolatileImage.java?ref=78da4d2e8476b54273d1d50a4d739d4f7d31732c", "patch": "@@ -1,39 +1,39 @@\n-/* VolatileImage.java -- \n-   Copyright (C) 2002 Free Software Foundation, Inc.\n-\n-This file is part of GNU Classpath.\n-\n-GNU Classpath is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 2, or (at your option)\n-any later version.\n-\n-GNU Classpath is distributed in the hope that it will be useful, but\n-WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GNU Classpath; see the file COPYING.  If not, write to the\n-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n-02111-1307 USA.\n-\n-Linking this library statically or dynamically with other modules is\n-making a combined work based on this library.  Thus, the terms and\n-conditions of the GNU General Public License cover the whole\n-combination.\n-\n-As a special exception, the copyright holders of this library give you\n-permission to link this library with independent modules to produce an\n-executable, regardless of the license terms of these independent\n-modules, and to copy and distribute the resulting executable under\n-terms of your choice, provided that you also meet, for each linked\n-independent module, the terms and conditions of the license of that\n-module.  An independent module is a module which is not derived from\n-or based on this library.  If you modify this library, you may extend\n-this exception to your version of the library, but you are not\n-obligated to do so.  If you do not wish to do so, delete this\n-exception statement from your version. */\n+/* VolatileImage.java -- a hardware-accelerated image buffer\n+   Copyright (C) 2002, 2005 Free Software Foundation, Inc.\n+\n+   This file is part of GNU Classpath.\n+\n+   GNU Classpath is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 2, or (at your option)\n+   any later version.\n+\n+   GNU Classpath is distributed in the hope that it will be useful, but\n+   WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GNU Classpath; see the file COPYING.  If not, write to the\n+   Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+   02111-1307 USA.\n+\n+   Linking this library statically or dynamically with other modules is\n+   making a combined work based on this library.  Thus, the terms and\n+   conditions of the GNU General Public License cover the whole\n+   combination.\n+\n+   As a special exception, the copyright holders of this library give you\n+   permission to link this library with independent modules to produce an\n+   executable, regardless of the license terms of these independent\n+   modules, and to copy and distribute the resulting executable under\n+   terms of your choice, provided that you also meet, for each linked\n+   independent module, the terms and conditions of the license of that\n+   module.  An independent module is a module which is not derived from\n+   or based on this library.  If you modify this library, you may extend\n+   this exception to your version of the library, but you are not\n+   obligated to do so.  If you do not wish to do so, delete this\n+   exception statement from your version. */\n \n \n package java.awt.image;\n@@ -42,33 +42,213 @@\n import java.awt.Graphics2D;\n import java.awt.GraphicsConfiguration;\n import java.awt.Image;\n+import java.awt.Transparency;\n import java.awt.ImageCapabilities;\n \n-/** STUBS ONLY */\n+/**\n+ * VolatileImage represents a hardware-accelerated graphics buffer.\n+ * The native graphics system may free or damage the resources\n+ * occupied by a VolatileImage at any time.  As such, one must\n+ * frequently check the \"validity\" of the image buffer's resources.\n+ *\n+ * A volatile image's \"validity\" depends on multiple factors.  Its\n+ * resources may have become unavailble in which case you must\n+ * reallocate them.  If you move the image from one output device to\n+ * another, you may need to recreate the image's resources if the new\n+ * output device's capabilities don't match the old one's.  Finally,\n+ * if the contents of the image's buffer have been damaged you must\n+ * re-render the image.\n+ *\n+ * VolatileImages should always be created using either\n+ * Component.createVolatileImage or\n+ * GraphicsConfiguration.createCompatibleVolatileImage.\n+ */\n public abstract class VolatileImage extends Image\n+  implements Transparency\n {\n+  /**\n+   * One of validate's possible return values.  Indicates that the\n+   * image buffer matches its graphics configuration's capabilities\n+   * and that its resources are initialized and ready to be drawn\n+   * into.  Also implies that any existing image rendered to the\n+   * buffer is intact and need not be re-rendered.\n+   */\n   public static final int IMAGE_OK = 0;\n+\n+  /**\n+   * One of validate's possible return values.  Indicates that the\n+   * image buffer has been restored, meaning that it is valid and\n+   * ready-to-use but that its previous contents have been lost.  This\n+   * return value implies IMAGE_OK but that the image needs to be\n+   * re-rendered.\n+   */\n   public static final int IMAGE_RESTORED = 1;\n+\n+  /**\n+   * One of validate's possible return values.  Indicates that the\n+   * image buffer type is unsupported by the current graphics\n+   * configuration.  The graphics configuration may have changed, for\n+   * example if the image moved from one output device to another.\n+   * This return value implies that the image buffer's resources\n+   * should be re-acquired.\n+   */\n   public static final int IMAGE_INCOMPATIBLE = 2;\n+\n+  /**\n+   * This image's transparency type.  One of Transparency.BITMASK,\n+   * Transparency.OPAQUE or Transparency.TRANSLUCENT.\n+   *\n+   * @since 1.5\n+   */\n+  protected int transparency;\n+\n+  /**\n+   * Default constructor.  VolatileImages should not be created\n+   * directly.  Rather, you should use Component.createVolatileImage\n+   * or GraphicsConfiguration.createCompatibleVolatileImage.\n+   */\n   public VolatileImage()\n   {\n   }\n+\n+  /**\n+   * Returns an image representing the current state of the volatile\n+   * image buffer.  The returned image is static meaning that it is\n+   * not updated after being created.  It is a snapshot of the\n+   * volatile image buffer at the time getSnapshot is called.\n+   *\n+   * This method, which reads pixels from the volatile image buffer,\n+   * may be less-performant than methods that write pixels since\n+   * VolatileImages are typically optimized for writing.\n+   *\n+   * @return a BufferedImage representing this VolatileImage\n+   */\n   public abstract BufferedImage getSnapshot();\n+\n+  /**\n+   * Returns the width of this image buffer.\n+   *\n+   * @return the width of this VolatileImage\n+   */\n   public abstract int getWidth();\n+\n+  /**\n+   * Returns the height of this image buffer.\n+   *\n+   * @return the height of this VolatileImage\n+   */\n   public abstract int getHeight();\n+\n+  /**\n+   * Calling this method is equivalent to calling\n+   * getSnapshot().getSource().  The ImageProducer produces pixels\n+   * from the BufferedImage snapshot and not from the VolatileImage\n+   * itself.  Thus, changes to the VolatileImage that occur after this\n+   * ImageProducer has been retrieved will not be reflected in the\n+   * produced pixels.\n+   *\n+   * This method, which reads pixels from the volatile image buffer,\n+   * may be less-performant than methods that write pixels since\n+   * VolatileImages are typically optimized for writing.\n+   *\n+   * @return an ImageProducer for a static BufferedImage snapshot of\n+   * this image buffer.\n+   */\n   public ImageProducer getSource()\n   {\n     return getSnapshot().getSource();\n   }\n+\n+  /**\n+   * Releases the system resources taken by this image.\n+   */\n   public void flush()\n   {\n   }\n+\n+  /**\n+   * Returns a Graphics2D object that can be used to draw onto this\n+   * image.  This method is present for backwards-compatibility.  It\n+   * simply returns the result of createGraphics.\n+   *\n+   * @return a Graphics2D object that can be used to draw onto this\n+   * image\n+   */\n   public Graphics getGraphics()\n   {\n     return createGraphics();\n   }\n+\n+  /**\n+   * Returns a Graphics2D object that can be used to draw onto this\n+   * image.\n+   *\n+   * @return a Graphics2D object that can be used to draw onto this\n+   * image\n+   */\n   public abstract Graphics2D createGraphics();\n+\n+  /**\n+   * Validates and restores this image.  If the image buffer has\n+   * become unavailable for further use since the last call to\n+   * validate, validate will allocate a new image buffer.  The image\n+   * is also \"validated\" against the GraphicsConfiguration parameter.\n+   *\n+   * \"Validating\" the image means checking that the capabilities it\n+   * requires of the output device are indeed supported by the given\n+   * output device.  If the image's characteristics, which can be\n+   * highly output device-specific, are not supported by the graphics\n+   * configuration, then IMAGE_INCOMPATIBLE will be returned.  This\n+   * can happen, for example, if this image was created on one output\n+   * device, then validated against a different output device with\n+   * different capabilities.  Calling validate with a NULL gc argument\n+   * causes validate to skip the validation test.\n+   *\n+   * @param gc graphics configuration against which to validate or\n+   * NULL\n+   *\n+   * @return a code indicating the result of validation. One of:\n+   * <ul>\n+   *   <li><code>IMAGE_OK</code> if the image did not need to be\n+   *   validated and didn't need to be restored</li>\n+   *   <li><code>IMAGE_RESTORED</code> if the image may need to be\n+   *   re-rendered.  This return value implies IMAGE_OK.</li>\n+   *   <li><code>IMAGE_INCOMPATIBLE</code> if this image's\n+   *   requirements are not fulfilled by the graphics configuration\n+   *   parameter.  This implies that you need to create a new\n+   *   VolatileImage for the different GraphicsConfiguration or\n+   *   Component. This return value implies nothing about whether the\n+   *   image is valid or needs to be re-rendered.</li>\n+   * </ul>\n+   */\n   public abstract int validate(GraphicsConfiguration gc);\n+\n+  /**\n+   * Returns true if the contents of the image buffer have been\n+   * damaged or if the image buffer's resources have been reclaimed by\n+   * the graphics system.  You should call this method after a series\n+   * of rendering operations to or from the image, to see if the image\n+   * buffer needs to be revalidated or the image re-rendered.\n+   *\n+   * @return true if the validate should be called, false otherwise\n+   */\n   public abstract boolean contentsLost();\n+\n+  /**\n+   * Returns the capabilities of this image buffer.\n+   *\n+   * @return the capabilities of this image buffer\n+   */\n   public abstract ImageCapabilities getCapabilities();\n-} // class VolatileImage\n+\n+  /**\n+   * Returns the transparency type of this image.\n+   *\n+   * @return Transparency.OPAQUE, Transparency.BITMASK or\n+   * Transparency.TRANSLUCENT.\n+   */\n+  public int getTransparency()\n+  {\n+    return transparency;\n+  }\n+}"}]}