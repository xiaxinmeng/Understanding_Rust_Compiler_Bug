{"sha": "09fed44cabd50f3d8e050f91cc2db02364ce9176", "node_id": "C_kwDOANBUbNoAKDA5ZmVkNDRjYWJkNTBmM2Q4ZTA1MGY5MWNjMmRiMDIzNjRjZTkxNzY", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-10-19T13:23:59Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-10-19T13:24:53Z"}, "message": "avr: remove useless @tie{} directives\n\ngcc/ChangeLog:\n\n\t* doc/extend.texi: Remove useless @tie{} directives.", "tree": {"sha": "1ccaef0f0fa920247b2ed9406a0d6d11d758ff09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ccaef0f0fa920247b2ed9406a0d6d11d758ff09"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/09fed44cabd50f3d8e050f91cc2db02364ce9176", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09fed44cabd50f3d8e050f91cc2db02364ce9176", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09fed44cabd50f3d8e050f91cc2db02364ce9176", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09fed44cabd50f3d8e050f91cc2db02364ce9176/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6c168f8c06047bfaa3005e570126831b8855dcc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6c168f8c06047bfaa3005e570126831b8855dcc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6c168f8c06047bfaa3005e570126831b8855dcc"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "04af0584d82cc51b2197c203def5ac7ac40b90f4", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09fed44cabd50f3d8e050f91cc2db02364ce9176/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09fed44cabd50f3d8e050f91cc2db02364ce9176/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=09fed44cabd50f3d8e050f91cc2db02364ce9176", "patch": "@@ -7900,7 +7900,7 @@ This attribute works similar to the @code{section} attribute\n but adds additional checking.\n \n @table @asis\n-@item @bullet{}@tie{} Ordinary AVR cores with 32 general purpose registers:\n+@item @bullet{} Ordinary AVR cores with 32 general purpose registers:\n @code{progmem} affects the location\n of the data but not how this data is accessed.\n In order to read data located with the @code{progmem} attribute\n@@ -7925,7 +7925,7 @@ normally resides in the data memory (RAM).\n See also the @ref{AVR Named Address Spaces} section for\n an alternate way to locate and access data in flash memory.\n \n-@item @bullet{}@tie{} AVR cores with flash memory visible in the RAM address range:\n+@item @bullet{} AVR cores with flash memory visible in the RAM address range:\n On such devices, there is no need for attribute @code{progmem} or\n @ref{AVR Named Address Spaces,,@code{__flash}} qualifier at all.\n Just use standard C / C++.  The compiler will generate @code{LD*}\n@@ -7938,7 +7938,7 @@ avoiding @code{progmem} and @code{__flash}.  This applies to devices from\n families @code{avrtiny} and @code{avrxmega3}, see @ref{AVR Options} for\n an overview.\n \n-@item @bullet{}@tie{}Reduced AVR Tiny cores like ATtiny40:\n+@item @bullet{} Reduced AVR Tiny cores like ATtiny40:\n The compiler adds @code{0x4000}\n to the addresses of objects and declarations in @code{progmem} and locates\n the objects in flash memory, namely in section @code{.progmem.data}."}]}