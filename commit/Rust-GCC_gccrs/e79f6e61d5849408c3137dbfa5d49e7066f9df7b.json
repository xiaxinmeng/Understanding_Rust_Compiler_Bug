{"sha": "e79f6e61d5849408c3137dbfa5d49e7066f9df7b", "node_id": "C_kwDOANBUbNoAKGU3OWY2ZTYxZDU4NDk0MDhjMzEzN2RiZmE1ZDQ5ZTcwNjZmOWRmN2I", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-01-07T22:24:41Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-01-11T22:49:52Z"}, "message": "libgfortran: Make sure glibc < 2.32 built powerpc64le-linux libgfortran doesn't use __*ieee128 APIs\n\nI've just tried to build libgfortran on an old glibc system\n(gcc112.fsffrance.org) and unfortunately we still have work to do:\n\n[jakub@gcc2-power8 obj38]$ LD_PRELOAD=/home/jakub/gcc/obj38/powerpc64le-unknown-linux-gnu/libgfortran/.libs/libgfortran.so.5.0.0 /bin/true\n[jakub@gcc2-power8 obj38]$ LD_BIND_NOW=1 LD_PRELOAD=/home/jakub/gcc/obj38/powerpc64le-unknown-linux-gnu/libgfortran/.libs/libgfortran.so.5.0.0 /bin/true\n/bin/true: symbol lookup error: /home/jakub/gcc/obj38/powerpc64le-unknown-linux-gnu/libgfortran/.libs/libgfortran.so.5.0.0: undefined symbol: __atan2ieee128\n\nWhile we do use some libquadmath APIs:\nreadelf -Wr /home/jakub/gcc/obj38/powerpc64le-unknown-linux-gnu/libgfortran/.libs/libgfortran.so.5.0.0 | grep QUADMATH\n0000000000251268  000005e400000026 R_PPC64_ADDR64         0000000000000000 quadmath_snprintf@QUADMATH_1.0 + 0\n0000000000251270  0000030600000026 R_PPC64_ADDR64         0000000000000000 strtoflt128@QUADMATH_1.0 + 0\n00000000002502e0  0000011600000015 R_PPC64_JMP_SLOT       0000000000000000 ynq@QUADMATH_1.0 + 0\n0000000000250390  0000016000000015 R_PPC64_JMP_SLOT       0000000000000000 sqrtq@QUADMATH_1.0 + 0\n0000000000250508  000001fa00000015 R_PPC64_JMP_SLOT       0000000000000000 fmaq@QUADMATH_1.0 + 0\n0000000000250530  0000021200000015 R_PPC64_JMP_SLOT       0000000000000000 fabsq@QUADMATH_1.0 + 0\n0000000000250760  0000030600000015 R_PPC64_JMP_SLOT       0000000000000000 strtoflt128@QUADMATH_1.0 + 0\n0000000000250990  000003df00000015 R_PPC64_JMP_SLOT       0000000000000000 cosq@QUADMATH_1.0 + 0\n00000000002509f0  0000040a00000015 R_PPC64_JMP_SLOT       0000000000000000 expq@QUADMATH_1.0 + 0\n0000000000250a88  0000045100000015 R_PPC64_JMP_SLOT       0000000000000000 erfcq@QUADMATH_1.0 + 0\n0000000000250a98  0000045e00000015 R_PPC64_JMP_SLOT       0000000000000000 jnq@QUADMATH_1.0 + 0\n0000000000250ac8  0000047e00000015 R_PPC64_JMP_SLOT       0000000000000000 sinq@QUADMATH_1.0 + 0\n0000000000250e38  000005db00000015 R_PPC64_JMP_SLOT       0000000000000000 fmodq@QUADMATH_1.0 + 0\n0000000000250e48  000005e000000015 R_PPC64_JMP_SLOT       0000000000000000 tanq@QUADMATH_1.0 + 0\n0000000000250e58  000005e400000015 R_PPC64_JMP_SLOT       0000000000000000 quadmath_snprintf@QUADMATH_1.0 + 0\n0000000000250f20  0000062900000015 R_PPC64_JMP_SLOT       0000000000000000 copysignq@QUADMATH_1.0 + 0\nwe don't do it consistently:\nreadelf -Wr /home/jakub/gcc/obj38/powerpc64le-unknown-linux-gnu/libgfortran/.libs/libgfortran.so.5.0.0 | grep ieee128\n0000000000250310  0000012800000015 R_PPC64_JMP_SLOT       0000000000000000 __atan2ieee128 + 0\n0000000000250340  0000014200000015 R_PPC64_JMP_SLOT       0000000000000000 __clogieee128 + 0\n0000000000250438  000001a300000015 R_PPC64_JMP_SLOT       0000000000000000 __acoshieee128 + 0\n00000000002504b8  000001cc00000015 R_PPC64_JMP_SLOT       0000000000000000 __csinieee128 + 0\n0000000000250500  000001f300000015 R_PPC64_JMP_SLOT       0000000000000000 __sinhieee128 + 0\n0000000000250570  0000022a00000015 R_PPC64_JMP_SLOT       0000000000000000 __asinieee128 + 0\n0000000000250580  0000022d00000015 R_PPC64_JMP_SLOT       0000000000000000 __roundieee128 + 0\n00000000002505a0  0000023e00000015 R_PPC64_JMP_SLOT       0000000000000000 __logieee128 + 0\n00000000002505c8  0000024900000015 R_PPC64_JMP_SLOT       0000000000000000 __tanieee128 + 0\n0000000000250630  0000027500000015 R_PPC64_JMP_SLOT       0000000000000000 __ccosieee128 + 0\n0000000000250670  0000028a00000015 R_PPC64_JMP_SLOT       0000000000000000 __log10ieee128 + 0\n00000000002506c8  000002bd00000015 R_PPC64_JMP_SLOT       0000000000000000 __cexpieee128 + 0\n00000000002506d8  000002c800000015 R_PPC64_JMP_SLOT       0000000000000000 __coshieee128 + 0\n00000000002509b0  000003ef00000015 R_PPC64_JMP_SLOT       0000000000000000 __truncieee128 + 0\n0000000000250af8  000004a600000015 R_PPC64_JMP_SLOT       0000000000000000 __expieee128 + 0\n0000000000250b50  000004c600000015 R_PPC64_JMP_SLOT       0000000000000000 __fmodieee128 + 0\n0000000000250bb0  000004e700000015 R_PPC64_JMP_SLOT       0000000000000000 __tanhieee128 + 0\n0000000000250c38  0000051300000015 R_PPC64_JMP_SLOT       0000000000000000 __acosieee128 + 0\n0000000000250ce0  0000055400000015 R_PPC64_JMP_SLOT       0000000000000000 __sinieee128 + 0\n0000000000250d60  0000057e00000015 R_PPC64_JMP_SLOT       0000000000000000 __atanieee128 + 0\n0000000000250dd8  000005b100000015 R_PPC64_JMP_SLOT       0000000000000000 __sqrtieee128 + 0\n0000000000250e98  0000060200000015 R_PPC64_JMP_SLOT       0000000000000000 __cosieee128 + 0\n0000000000250eb0  0000060a00000015 R_PPC64_JMP_SLOT       0000000000000000 __atanhieee128 + 0\n0000000000250ef0  0000062000000015 R_PPC64_JMP_SLOT       0000000000000000 __asinhieee128 + 0\n0000000000250fd8  0000067f00000015 R_PPC64_JMP_SLOT       0000000000000000 __csqrtieee128 + 0\n0000000000251038  000006ad00000015 R_PPC64_JMP_SLOT       0000000000000000 __cabsieee128 + 0\nAll these should for POWER_IEEE128 use atan2q@QUADMATH_1.0 etc.\n\nIt seems all these come from f951 compiled sources.\nFor user code, I think the agreement was if you want to use successfully\n-mabi=ieeelongdouble, you need glibc 2.32 or later, which is why the Fortran\nFE doesn't conditionalize on whether glibc 2.32 is available or not and just\nemits __WHATEVERieee128 entrypoints.\nBut for Fortran compiled sources in libgfortran, we need to use\n__WHATEVERieee128 only if glibc 2.32 or later and WHATEVERq (from\nlibquadmath) otherwise.\n\nThe following patch implements that, adds -fbuilding-libgfortran option\nsimilar to e.g. -fbuilding-libgcc used when building libgcc and if\nthat option is set and the TARGET_GLIBC_{MAJOR,MINOR} macros indicate\nno glibc or glibc older than 2.32, it will use the libquadmath APIs\nrather than glibc 2.32 APIs.\n\n2022-01-07  Jakub Jelinek  <jakub@redhat.com>\n\ngcc/fortran/\n\t* trans-types.c (gfc_init_kinds): When setting abi_kind to 17, if not\n\ttargetting glibc 2.32 or later and -fbuilding-libgfortran, set\n\tgfc_real16_is_float128 and c_float128 in gfc_real_kinds.\n\t(gfc_build_real_type): Don't set c_long_double if c_float128 is\n\talready set.\n\t* trans-intrinsic.c (builtin_decl_for_precision): Don't use\n\tlong_double_built_in if gfc_real16_is_float128 and\n\tlong_double_type_node == gfc_float128_type_node.\n\t* lang.opt (fbuilding-libgfortran): New undocumented option.\nlibgfortran/\n\t* Makefile.am (AM_FCFLAGS): Add -fbuilding-libgfortran after\n\t-fallow-leading-underscore.\n\t* Makefile.in: Regenerated.", "tree": {"sha": "0e98d1435441fa73b7c2e727d3f34cf06785879b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0e98d1435441fa73b7c2e727d3f34cf06785879b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e79f6e61d5849408c3137dbfa5d49e7066f9df7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e79f6e61d5849408c3137dbfa5d49e7066f9df7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e79f6e61d5849408c3137dbfa5d49e7066f9df7b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e79f6e61d5849408c3137dbfa5d49e7066f9df7b/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d0e778fe3d064e3896b7f5f7de78a479f27dc55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d0e778fe3d064e3896b7f5f7de78a479f27dc55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d0e778fe3d064e3896b7f5f7de78a479f27dc55"}], "stats": {"total": 32, "additions": 23, "deletions": 9}, "files": [{"sha": "ab92e0e36861e6453ca8803a093cbe92e88bd3e3", "filename": "gcc/fortran/lang.opt", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e79f6e61d5849408c3137dbfa5d49e7066f9df7b/gcc%2Ffortran%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e79f6e61d5849408c3137dbfa5d49e7066f9df7b/gcc%2Ffortran%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flang.opt?ref=e79f6e61d5849408c3137dbfa5d49e7066f9df7b", "patch": "@@ -413,6 +413,9 @@ fblas-matmul-limit=\n Fortran RejectNegative Joined UInteger Var(flag_blas_matmul_limit) Init(30)\n -fblas-matmul-limit=<n>\tSize of the smallest matrix for which matmul will use BLAS.\n \n+fbuilding-libgfortran\n+Fortran Undocumented Var(flag_building_libgfortran)\n+\n fcheck-array-temporaries\n Fortran\n Produce a warning at runtime if a array temporary has been created for a procedure argument."}, {"sha": "dc72d994781b712bf3397c49d3ce4f33b4eb9cf2", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e79f6e61d5849408c3137dbfa5d49e7066f9df7b/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e79f6e61d5849408c3137dbfa5d49e7066f9df7b/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=e79f6e61d5849408c3137dbfa5d49e7066f9df7b", "patch": "@@ -154,7 +154,9 @@ builtin_decl_for_precision (enum built_in_function base_built_in,\n     i = m->float_built_in;\n   else if (precision == TYPE_PRECISION (double_type_node))\n     i = m->double_built_in;\n-  else if (precision == TYPE_PRECISION (long_double_type_node))\n+  else if (precision == TYPE_PRECISION (long_double_type_node)\n+\t   && (!gfc_real16_is_float128\n+\t       || long_double_type_node != gfc_float128_type_node))\n     i = m->long_double_built_in;\n   else if (precision == TYPE_PRECISION (gfc_float128_type_node))\n     {"}, {"sha": "5de43bb27843cb355bf58e40b64f9547df5c20e1", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e79f6e61d5849408c3137dbfa5d49e7066f9df7b/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e79f6e61d5849408c3137dbfa5d49e7066f9df7b/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=e79f6e61d5849408c3137dbfa5d49e7066f9df7b", "patch": "@@ -516,7 +516,16 @@ gfc_init_kinds (void)\n     {\n       for (int i = 0; i < r_index; ++i)\n \tif (gfc_real_kinds[i].kind == 16)\n-\t  gfc_real_kinds[i].abi_kind = 17;\n+\t  {\n+\t    gfc_real_kinds[i].abi_kind = 17;\n+\t    if (flag_building_libgfortran\n+\t\t&& (TARGET_GLIBC_MAJOR < 2\n+\t\t    || (TARGET_GLIBC_MAJOR == 2 && TARGET_GLIBC_MINOR < 32)))\n+\t      {\n+\t\tgfc_real16_is_float128 = true;\n+\t\tgfc_real_kinds[i].c_float128 = 1;\n+\t      }\n+\t  }\n     }\n \n   /* Choose the default integer kind.  We choose 4 unless the user directs us\n@@ -859,7 +868,7 @@ gfc_build_real_type (gfc_real_info *info)\n     info->c_float = 1;\n   if (mode_precision == DOUBLE_TYPE_SIZE)\n     info->c_double = 1;\n-  if (mode_precision == LONG_DOUBLE_TYPE_SIZE)\n+  if (mode_precision == LONG_DOUBLE_TYPE_SIZE && !info->c_float128)\n     info->c_long_double = 1;\n   if (mode_precision != LONG_DOUBLE_TYPE_SIZE && mode_precision == 128)\n     {"}, {"sha": "00745403bbbf5b843588b60194b27b4b1dc391c5", "filename": "libgfortran/Makefile.am", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e79f6e61d5849408c3137dbfa5d49e7066f9df7b/libgfortran%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e79f6e61d5849408c3137dbfa5d49e7066f9df7b/libgfortran%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.am?ref=e79f6e61d5849408c3137dbfa5d49e7066f9df7b", "patch": "@@ -1081,8 +1081,8 @@ endif\n $(patsubst %.c,%.lo,$(notdir $(i_matmull_c))): AM_CFLAGS += -funroll-loops\n \n # Add the -fallow-leading-underscore option when needed\n-$(patsubst %.F90,%.lo,$(patsubst %.f90,%.lo,$(notdir $(gfor_specific_src)))): AM_FCFLAGS += -fallow-leading-underscore\n-selected_real_kind.lo selected_int_kind.lo: AM_FCFLAGS += -fallow-leading-underscore\n+$(patsubst %.F90,%.lo,$(patsubst %.f90,%.lo,$(notdir $(gfor_specific_src)))): AM_FCFLAGS += -fallow-leading-underscore -fbuilding-libgfortran\n+selected_real_kind.lo selected_int_kind.lo: AM_FCFLAGS += -fallow-leading-underscore -fbuilding-libgfortran\n \n # Build *_r17.F90 and *_c17.F90 with additional -mabi=ieeelongdouble on powerpc64le-linux.\n \n@@ -1099,7 +1099,7 @@ endif\n \n if IEEE_SUPPORT\n # Add flags for IEEE modules\n-$(patsubst %.F90,%.lo,$(notdir $(gfor_ieee_src))): AM_FCFLAGS += -Wno-unused-dummy-argument -Wno-c-binding-type -ffree-line-length-0 -fallow-leading-underscore -fsignaling-nans\n+$(patsubst %.F90,%.lo,$(notdir $(gfor_ieee_src))): AM_FCFLAGS += -Wno-unused-dummy-argument -Wno-c-binding-type -ffree-line-length-0 -fallow-leading-underscore -fsignaling-nans -fbuilding-libgfortran\n \n # Add flags for IEEE helper code\n $(patsubst %.c,%.lo,$(notdir $(gfor_ieee_helper_src))): AM_CFLAGS += -fsignaling-nans"}, {"sha": "fa5e21578c80d44f047898dba88e4c1217298746", "filename": "libgfortran/Makefile.in", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e79f6e61d5849408c3137dbfa5d49e7066f9df7b/libgfortran%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e79f6e61d5849408c3137dbfa5d49e7066f9df7b/libgfortran%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.in?ref=e79f6e61d5849408c3137dbfa5d49e7066f9df7b", "patch": "@@ -7634,8 +7634,8 @@ $(patsubst %.c,%.lo,$(notdir $(i_matmul_c))): AM_CFLAGS += -ffast-math -ftree-ve\n $(patsubst %.c,%.lo,$(notdir $(i_matmull_c))): AM_CFLAGS += -funroll-loops\n \n # Add the -fallow-leading-underscore option when needed\n-$(patsubst %.F90,%.lo,$(patsubst %.f90,%.lo,$(notdir $(gfor_specific_src)))): AM_FCFLAGS += -fallow-leading-underscore\n-selected_real_kind.lo selected_int_kind.lo: AM_FCFLAGS += -fallow-leading-underscore\n+$(patsubst %.F90,%.lo,$(patsubst %.f90,%.lo,$(notdir $(gfor_specific_src)))): AM_FCFLAGS += -fallow-leading-underscore -fbuilding-libgfortran\n+selected_real_kind.lo selected_int_kind.lo: AM_FCFLAGS += -fallow-leading-underscore -fbuilding-libgfortran\n \n # Build *_r17.F90 and *_c17.F90 with additional -mabi=ieeelongdouble on powerpc64le-linux.\n \n@@ -7649,7 +7649,7 @@ selected_real_kind.lo selected_int_kind.lo: AM_FCFLAGS += -fallow-leading-unders\n @HAVE_REAL_17_TRUE@$(patsubst %_c17.c,%_c17.lo,$(notdir $(gfor_built_src))): AM_CFLAGS += -mabi=ieeelongdouble\n \n # Add flags for IEEE modules\n-@IEEE_SUPPORT_TRUE@$(patsubst %.F90,%.lo,$(notdir $(gfor_ieee_src))): AM_FCFLAGS += -Wno-unused-dummy-argument -Wno-c-binding-type -ffree-line-length-0 -fallow-leading-underscore -fsignaling-nans\n+@IEEE_SUPPORT_TRUE@$(patsubst %.F90,%.lo,$(notdir $(gfor_ieee_src))): AM_FCFLAGS += -Wno-unused-dummy-argument -Wno-c-binding-type -ffree-line-length-0 -fallow-leading-underscore -fsignaling-nans -fbuilding-libgfortran\n \n # Add flags for IEEE helper code\n @IEEE_SUPPORT_TRUE@$(patsubst %.c,%.lo,$(notdir $(gfor_ieee_helper_src))): AM_CFLAGS += -fsignaling-nans"}]}