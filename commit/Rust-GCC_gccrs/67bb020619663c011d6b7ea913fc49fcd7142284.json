{"sha": "67bb020619663c011d6b7ea913fc49fcd7142284", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjdiYjAyMDYxOTY2M2MwMTFkNmI3ZWE5MTNmYzQ5ZmNkNzE0MjI4NA==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@codesourcery.com", "date": "2010-07-15T17:07:17Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2010-07-15T17:07:17Z"}, "message": "postreload.c (last_label_ruid, [...]): New static variables.\n\n\t* postreload.c (last_label_ruid, first_index_reg, last_index_reg):\n\tNew static variables.\n\t(reload_combine_recognize_pattern): New static function, broken out\n\tof reload_combine.\n\t(reload_combine): Use it.  Only initialize first_index_reg and\n\tlast_index_reg once.\n\nFrom-SVN: r162228", "tree": {"sha": "404c5c4dcf909ff65750d3a36e899a03900f604d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/404c5c4dcf909ff65750d3a36e899a03900f604d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/67bb020619663c011d6b7ea913fc49fcd7142284", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67bb020619663c011d6b7ea913fc49fcd7142284", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67bb020619663c011d6b7ea913fc49fcd7142284", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67bb020619663c011d6b7ea913fc49fcd7142284/comments", "author": null, "committer": null, "parents": [{"sha": "c5f77dcb78e529d086d204b6a23968eeb2d32994", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5f77dcb78e529d086d204b6a23968eeb2d32994", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5f77dcb78e529d086d204b6a23968eeb2d32994"}], "stats": {"total": 338, "additions": 189, "deletions": 149}, "files": [{"sha": "8105229dba9147a9a5a053e0099a0e750facdd94", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67bb020619663c011d6b7ea913fc49fcd7142284/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67bb020619663c011d6b7ea913fc49fcd7142284/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=67bb020619663c011d6b7ea913fc49fcd7142284", "patch": "@@ -1,3 +1,12 @@\n+2010-07-15  Bernd Schmidt  <bernds@codesourcery.com>\n+\n+\t* postreload.c (last_label_ruid, first_index_reg, last_index_reg):\n+\tNew static variables.\n+\t(reload_combine_recognize_pattern): New static function, broken out\n+\tof reload_combine.\n+\t(reload_combine): Use it.  Only initialize first_index_reg and\n+\tlast_index_reg once.\n+\n 2010-07-15  Richard Henderson  <rth@redhat.com>\n \n \t* cgraphunit.c (cgraph_build_static_cdtor): Clear current_function_decl"}, {"sha": "12397e6109521fbd15eebec39ce722b7a8263301", "filename": "gcc/postreload.c", "status": "modified", "additions": 180, "deletions": 149, "changes": 329, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67bb020619663c011d6b7ea913fc49fcd7142284/gcc%2Fpostreload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67bb020619663c011d6b7ea913fc49fcd7142284/gcc%2Fpostreload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpostreload.c?ref=67bb020619663c011d6b7ea913fc49fcd7142284", "patch": "@@ -691,41 +691,200 @@ static struct\n    and the store_ruid / use_ruid fields in reg_state.  */\n static int reload_combine_ruid;\n \n+/* The RUID of the last label we encountered in reload_combine.  */\n+static int last_label_ruid;\n+\n+/* The register numbers of the first and last index register.  A value of\n+   -1 in LAST_INDEX_REG indicates that we've previously computed these\n+   values and found no suitable index registers.  */\n+static int first_index_reg = -1;\n+static int last_index_reg;\n+\n #define LABEL_LIVE(LABEL) \\\n   (label_live[CODE_LABEL_NUMBER (LABEL) - min_labelno])\n \n+/* Called by reload_combine when scanning INSN.  Try to detect a pattern we\n+   can handle and improve.  Return true if no further processing is needed on\n+   INSN; false if it wasn't recognized and should be handled normally.  */\n+\n+static bool\n+reload_combine_recognize_pattern (rtx insn)\n+{\n+  rtx set, reg, src;\n+  unsigned int regno;\n+\n+  /* Look for (set (REGX) (CONST_INT))\n+     (set (REGX) (PLUS (REGX) (REGY)))\n+     ...\n+     ... (MEM (REGX)) ...\n+     and convert it to\n+     (set (REGZ) (CONST_INT))\n+     ...\n+     ... (MEM (PLUS (REGZ) (REGY)))... .\n+\n+     First, check that we have (set (REGX) (PLUS (REGX) (REGY)))\n+     and that we know all uses of REGX before it dies.\n+     Also, explicitly check that REGX != REGY; our life information\n+     does not yet show whether REGY changes in this insn.  */\n+  set = single_set (insn);\n+  if (set == NULL_RTX)\n+    return false;\n+\n+  reg = SET_DEST (set);\n+  src = SET_SRC (set);\n+  if (!REG_P (reg)\n+      || hard_regno_nregs[REGNO (reg)][GET_MODE (reg)] != 1)\n+    return false;\n+\n+  regno = REGNO (reg);\n+\n+  if (GET_CODE (src) == PLUS\n+      && REG_P (XEXP (src, 1))\n+      && rtx_equal_p (XEXP (src, 0), reg)\n+      && !rtx_equal_p (XEXP (src, 1), reg)\n+      && last_label_ruid < reg_state[regno].use_ruid)\n+    {\n+      rtx base = XEXP (src, 1);\n+      rtx prev = prev_nonnote_insn (insn);\n+      rtx prev_set = prev ? single_set (prev) : NULL_RTX;\n+      rtx index_reg = NULL_RTX;\n+      rtx reg_sum = NULL_RTX;\n+      int i;\n+\n+      /* Now we need to set INDEX_REG to an index register (denoted as\n+\t REGZ in the illustration above) and REG_SUM to the expression\n+\t register+register that we want to use to substitute uses of REG\n+\t (typically in MEMs) with.  First check REG and BASE for being\n+\t index registers; we can use them even if they are not dead.  */\n+      if (TEST_HARD_REG_BIT (reg_class_contents[INDEX_REG_CLASS], regno)\n+\t  || TEST_HARD_REG_BIT (reg_class_contents[INDEX_REG_CLASS],\n+\t\t\t\tREGNO (base)))\n+\t{\n+\t  index_reg = reg;\n+\t  reg_sum = src;\n+\t}\n+      else\n+\t{\n+\t  /* Otherwise, look for a free index register.  Since we have\n+\t     checked above that neither REG nor BASE are index registers,\n+\t     if we find anything at all, it will be different from these\n+\t     two registers.  */\n+\t  for (i = first_index_reg; i <= last_index_reg; i++)\n+\t    {\n+\t      if (TEST_HARD_REG_BIT (reg_class_contents[INDEX_REG_CLASS], i)\n+\t\t  && reg_state[i].use_index == RELOAD_COMBINE_MAX_USES\n+\t\t  && reg_state[i].store_ruid <= reg_state[regno].use_ruid\n+\t\t  && hard_regno_nregs[i][GET_MODE (reg)] == 1)\n+\t\t{\n+\t\t  index_reg = gen_rtx_REG (GET_MODE (reg), i);\n+\t\t  reg_sum = gen_rtx_PLUS (GET_MODE (reg), index_reg, base);\n+\t\t  break;\n+\t\t}\n+\t    }\n+\t}\n+\n+      /* Check that PREV_SET is indeed (set (REGX) (CONST_INT)) and that\n+\t (REGY), i.e. BASE, is not clobbered before the last use we'll\n+\t create.  */\n+      if (reg_sum\n+\t  && prev_set\n+\t  && CONST_INT_P (SET_SRC (prev_set))\n+\t  && rtx_equal_p (SET_DEST (prev_set), reg)\n+\t  && reg_state[regno].use_index >= 0\n+\t  && (reg_state[REGNO (base)].store_ruid\n+\t      <= reg_state[regno].use_ruid))\n+\t{\n+\t  /* Change destination register and, if necessary, the constant\n+\t     value in PREV, the constant loading instruction.  */\n+\t  validate_change (prev, &SET_DEST (prev_set), index_reg, 1);\n+\t  if (reg_state[regno].offset != const0_rtx)\n+\t    validate_change (prev,\n+\t\t\t     &SET_SRC (prev_set),\n+\t\t\t     GEN_INT (INTVAL (SET_SRC (prev_set))\n+\t\t\t\t      + INTVAL (reg_state[regno].offset)),\n+\t\t\t     1);\n+\n+\t  /* Now for every use of REG that we have recorded, replace REG\n+\t     with REG_SUM.  */\n+\t  for (i = reg_state[regno].use_index;\n+\t       i < RELOAD_COMBINE_MAX_USES; i++)\n+\t    validate_unshare_change (reg_state[regno].reg_use[i].insn,\n+\t\t\t\t     reg_state[regno].reg_use[i].usep,\n+\t\t\t\t     /* Each change must have its own\n+\t\t\t\t\treplacement.  */\n+\t\t\t\t     reg_sum, 1);\n+\n+\t  if (apply_change_group ())\n+\t    {\n+\t      /* For every new use of REG_SUM, we have to record the use\n+\t\t of BASE therein, i.e. operand 1.  */\n+\t      for (i = reg_state[regno].use_index;\n+\t\t   i < RELOAD_COMBINE_MAX_USES; i++)\n+\t\treload_combine_note_use\n+\t\t  (&XEXP (*reg_state[regno].reg_use[i].usep, 1),\n+\t\t   reg_state[regno].reg_use[i].insn);\n+\n+\t      if (reg_state[REGNO (base)].use_ruid\n+\t\t  > reg_state[regno].use_ruid)\n+\t\treg_state[REGNO (base)].use_ruid\n+\t\t  = reg_state[regno].use_ruid;\n+\n+\t      /* Delete the reg-reg addition.  */\n+\t      delete_insn (insn);\n+\n+\t      if (reg_state[regno].offset != const0_rtx)\n+\t\t/* Previous REG_EQUIV / REG_EQUAL notes for PREV\n+\t\t   are now invalid.  */\n+\t\tremove_reg_equal_equiv_notes (prev);\n+\n+\t      reg_state[regno].use_index = RELOAD_COMBINE_MAX_USES;\n+\t      reg_state[REGNO (index_reg)].store_ruid\n+\t\t= reload_combine_ruid;\n+\t      return true;\n+\t    }\n+\t}\n+    }\n+  return false;\n+}\n+\n static void\n reload_combine (void)\n {\n-  rtx insn, set;\n-  int first_index_reg = -1;\n-  int last_index_reg = 0;\n+  rtx insn;\n   int i;\n   basic_block bb;\n   unsigned int r;\n-  int last_label_ruid;\n   int min_labelno, n_labels;\n   HARD_REG_SET ever_live_at_start, *label_live;\n \n-  /* If reg+reg can be used in offsetable memory addresses, the main chunk of\n-     reload has already used it where appropriate, so there is no use in\n-     trying to generate it now.  */\n-  if (double_reg_address_ok && INDEX_REG_CLASS != NO_REGS)\n-    return;\n-\n   /* To avoid wasting too much time later searching for an index register,\n      determine the minimum and maximum index register numbers.  */\n-  for (r = 0; r < FIRST_PSEUDO_REGISTER; r++)\n-    if (TEST_HARD_REG_BIT (reg_class_contents[INDEX_REG_CLASS], r))\n-      {\n-\tif (first_index_reg == -1)\n-\t  first_index_reg = r;\n+  if (INDEX_REG_CLASS == NO_REGS)\n+    last_index_reg = -1;\n+  else if (first_index_reg == -1 && last_index_reg == 0)\n+    {\n+      for (r = 0; r < FIRST_PSEUDO_REGISTER; r++)\n+\tif (TEST_HARD_REG_BIT (reg_class_contents[INDEX_REG_CLASS], r))\n+\t  {\n+\t    if (first_index_reg == -1)\n+\t      first_index_reg = r;\n \n-\tlast_index_reg = r;\n-      }\n+\t    last_index_reg = r;\n+\t  }\n+\n+      /* If no index register is available, we can quit now.  Set LAST_INDEX_REG\n+\t to -1 so we'll know to quit early the next time we get here.  */\n+      if (first_index_reg == -1)\n+\t{\n+\t  last_index_reg = -1;\n+\t  return;\n+\t}\n+    }\n \n-  /* If no index register is available, we can quit now.  */\n-  if (first_index_reg == -1)\n+  /* If reg+reg can be used in offsetable memory addresses, the main chunk of\n+     reload has already used it where appropriate, so there is no use in\n+     trying to generate it now.  */\n+  if (double_reg_address_ok || last_index_reg == -1)\n     return;\n \n   /* Set up LABEL_LIVE and EVER_LIVE_AT_START.  The register lifetime\n@@ -782,136 +941,8 @@ reload_combine (void)\n \n       reload_combine_ruid++;\n \n-      /* Look for (set (REGX) (CONST_INT))\n-\t (set (REGX) (PLUS (REGX) (REGY)))\n-\t ...\n-\t ... (MEM (REGX)) ...\n-\t and convert it to\n-\t (set (REGZ) (CONST_INT))\n-\t ...\n-\t ... (MEM (PLUS (REGZ) (REGY)))... .\n-\n-\t First, check that we have (set (REGX) (PLUS (REGX) (REGY)))\n-\t and that we know all uses of REGX before it dies.\n-\t Also, explicitly check that REGX != REGY; our life information\n-\t does not yet show whether REGY changes in this insn.  */\n-      set = single_set (insn);\n-      if (set != NULL_RTX\n-\t  && REG_P (SET_DEST (set))\n-\t  && (hard_regno_nregs[REGNO (SET_DEST (set))]\n-\t\t\t      [GET_MODE (SET_DEST (set))]\n-\t      == 1)\n-\t  && GET_CODE (SET_SRC (set)) == PLUS\n-\t  && REG_P (XEXP (SET_SRC (set), 1))\n-\t  && rtx_equal_p (XEXP (SET_SRC (set), 0), SET_DEST (set))\n-\t  && !rtx_equal_p (XEXP (SET_SRC (set), 1), SET_DEST (set))\n-\t  && last_label_ruid < reg_state[REGNO (SET_DEST (set))].use_ruid)\n-\t{\n-\t  rtx reg = SET_DEST (set);\n-\t  rtx plus = SET_SRC (set);\n-\t  rtx base = XEXP (plus, 1);\n-\t  rtx prev = prev_nonnote_insn (insn);\n-\t  rtx prev_set = prev ? single_set (prev) : NULL_RTX;\n-\t  unsigned int regno = REGNO (reg);\n-\t  rtx index_reg = NULL_RTX;\n-\t  rtx reg_sum = NULL_RTX;\n-\n-\t  /* Now we need to set INDEX_REG to an index register (denoted as\n-\t     REGZ in the illustration above) and REG_SUM to the expression\n-\t     register+register that we want to use to substitute uses of REG\n-\t     (typically in MEMs) with.  First check REG and BASE for being\n-\t     index registers; we can use them even if they are not dead.  */\n-\t  if (TEST_HARD_REG_BIT (reg_class_contents[INDEX_REG_CLASS], regno)\n-\t      || TEST_HARD_REG_BIT (reg_class_contents[INDEX_REG_CLASS],\n-\t\t\t\t    REGNO (base)))\n-\t    {\n-\t      index_reg = reg;\n-\t      reg_sum = plus;\n-\t    }\n-\t  else\n-\t    {\n-\t      /* Otherwise, look for a free index register.  Since we have\n-\t\t checked above that neither REG nor BASE are index registers,\n-\t\t if we find anything at all, it will be different from these\n-\t\t two registers.  */\n-\t      for (i = first_index_reg; i <= last_index_reg; i++)\n-\t\t{\n-\t\t  if (TEST_HARD_REG_BIT (reg_class_contents[INDEX_REG_CLASS],\n-\t\t\t\t\t i)\n-\t\t      && reg_state[i].use_index == RELOAD_COMBINE_MAX_USES\n-\t\t      && reg_state[i].store_ruid <= reg_state[regno].use_ruid\n-\t\t      && hard_regno_nregs[i][GET_MODE (reg)] == 1)\n-\t\t    {\n-\t\t      index_reg = gen_rtx_REG (GET_MODE (reg), i);\n-\t\t      reg_sum = gen_rtx_PLUS (GET_MODE (reg), index_reg, base);\n-\t\t      break;\n-\t\t    }\n-\t\t}\n-\t    }\n-\n-\t  /* Check that PREV_SET is indeed (set (REGX) (CONST_INT)) and that\n-\t     (REGY), i.e. BASE, is not clobbered before the last use we'll\n-\t     create.  */\n-\t  if (reg_sum\n-\t      && prev_set\n-\t      && CONST_INT_P (SET_SRC (prev_set))\n-\t      && rtx_equal_p (SET_DEST (prev_set), reg)\n-\t      && reg_state[regno].use_index >= 0\n-\t      && (reg_state[REGNO (base)].store_ruid\n-\t\t  <= reg_state[regno].use_ruid))\n-\t    {\n-\t      int i;\n-\n-\t      /* Change destination register and, if necessary, the constant\n-\t\t value in PREV, the constant loading instruction.  */\n-\t      validate_change (prev, &SET_DEST (prev_set), index_reg, 1);\n-\t      if (reg_state[regno].offset != const0_rtx)\n-\t\tvalidate_change (prev,\n-\t\t\t\t &SET_SRC (prev_set),\n-\t\t\t\t GEN_INT (INTVAL (SET_SRC (prev_set))\n-\t\t\t\t\t  + INTVAL (reg_state[regno].offset)),\n-\t\t\t\t 1);\n-\n-\t      /* Now for every use of REG that we have recorded, replace REG\n-\t\t with REG_SUM.  */\n-\t      for (i = reg_state[regno].use_index;\n-\t\t   i < RELOAD_COMBINE_MAX_USES; i++)\n-\t\tvalidate_unshare_change (reg_state[regno].reg_use[i].insn,\n-\t\t\t\t \t reg_state[regno].reg_use[i].usep,\n-\t\t\t\t \t /* Each change must have its own\n-\t\t\t\t    \t    replacement.  */\n-\t\t\t\t \t reg_sum, 1);\n-\n-\t      if (apply_change_group ())\n-\t\t{\n-\t\t  /* For every new use of REG_SUM, we have to record the use\n-\t\t     of BASE therein, i.e. operand 1.  */\n-\t\t  for (i = reg_state[regno].use_index;\n-\t\t       i < RELOAD_COMBINE_MAX_USES; i++)\n-\t\t    reload_combine_note_use\n-\t\t      (&XEXP (*reg_state[regno].reg_use[i].usep, 1),\n-\t\t       reg_state[regno].reg_use[i].insn);\n-\n-\t\t  if (reg_state[REGNO (base)].use_ruid\n-\t\t      > reg_state[regno].use_ruid)\n-\t\t    reg_state[REGNO (base)].use_ruid\n-\t\t      = reg_state[regno].use_ruid;\n-\n-\t\t  /* Delete the reg-reg addition.  */\n-\t\t  delete_insn (insn);\n-\n-\t\t  if (reg_state[regno].offset != const0_rtx)\n-\t\t    /* Previous REG_EQUIV / REG_EQUAL notes for PREV\n-\t\t       are now invalid.  */\n-\t\t    remove_reg_equal_equiv_notes (prev);\n-\n-\t\t  reg_state[regno].use_index = RELOAD_COMBINE_MAX_USES;\n-\t\t  reg_state[REGNO (index_reg)].store_ruid\n-\t\t    = reload_combine_ruid;\n-\t\t  continue;\n-\t\t}\n-\t    }\n-\t}\n+      if (reload_combine_recognize_pattern (insn))\n+\tcontinue;\n \n       note_stores (PATTERN (insn), reload_combine_note_store, NULL);\n "}]}