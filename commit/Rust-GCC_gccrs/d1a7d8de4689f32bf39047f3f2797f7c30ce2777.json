{"sha": "d1a7d8de4689f32bf39047f3f2797f7c30ce2777", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDFhN2Q4ZGU0Njg5ZjMyYmYzOTA0N2YzZjI3OTdmN2MzMGNlMjc3Nw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2019-06-20T14:18:02Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2019-06-20T14:18:02Z"}, "message": "tree-ssa-alias.c (aliasing_component_refs_p): Remove ref2_is_decl parameter; it has no use in gimple memory model.\n\n\t* tree-ssa-alias.c (aliasing_component_refs_p): Remove ref2_is_decl\n\tparameter; it has no use in gimple memory model.\n\t(indirect_ref_may_alias_decl_p): Update.\n\n\t* gcc.c-torture/execute/alias-access-path-1.c: New testcase.\n\nFrom-SVN: r272510", "tree": {"sha": "50c2d3b91c849342a2e2b7e812c60639b8533e90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/50c2d3b91c849342a2e2b7e812c60639b8533e90"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d1a7d8de4689f32bf39047f3f2797f7c30ce2777", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1a7d8de4689f32bf39047f3f2797f7c30ce2777", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1a7d8de4689f32bf39047f3f2797f7c30ce2777", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1a7d8de4689f32bf39047f3f2797f7c30ce2777/comments", "author": null, "committer": null, "parents": [{"sha": "86f73527aa3556b7d5ead9b03d8a5c91d351a409", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86f73527aa3556b7d5ead9b03d8a5c91d351a409", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86f73527aa3556b7d5ead9b03d8a5c91d351a409"}], "stats": {"total": 52, "additions": 36, "deletions": 16}, "files": [{"sha": "06e4ef45b66e4b5cfb2787964186561bb35148c2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1a7d8de4689f32bf39047f3f2797f7c30ce2777/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1a7d8de4689f32bf39047f3f2797f7c30ce2777/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d1a7d8de4689f32bf39047f3f2797f7c30ce2777", "patch": "@@ -1,3 +1,9 @@\n+2019-06-20  Jan Hubicka  <jh@suse.cz>\n+\n+\t* tree-ssa-alias.c (aliasing_component_refs_p): Remove ref2_is_decl\n+\tparameter; it has no use in gimple memory model.\n+\t(indirect_ref_may_alias_decl_p): Update.\n+\n 2019-06-20  Martin Liska  <mliska@suse.cz>\n \n \t* params.def (PARAM_HASH_TABLE_VERIFICATION_LIMIT): Decrease"}, {"sha": "c1e948d862c940d77b43a70e2e36fc4b9d61f2a8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1a7d8de4689f32bf39047f3f2797f7c30ce2777/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1a7d8de4689f32bf39047f3f2797f7c30ce2777/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d1a7d8de4689f32bf39047f3f2797f7c30ce2777", "patch": "@@ -1,3 +1,7 @@\n+2019-06-20  Jan Hubicka  <jh@suse.cz>\n+\n+\t* gcc.c-torture/execute/alias-access-path-1.c: New testcase.\n+\n 2019-06-20  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/89873"}, {"sha": "6693a2b176d61b4f2c962ea729de8cfce2de8eee", "filename": "gcc/testsuite/gcc.c-torture/execute/alias-access-path-1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1a7d8de4689f32bf39047f3f2797f7c30ce2777/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Falias-access-path-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1a7d8de4689f32bf39047f3f2797f7c30ce2777/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Falias-access-path-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Falias-access-path-1.c?ref=d1a7d8de4689f32bf39047f3f2797f7c30ce2777", "patch": "@@ -0,0 +1,19 @@\n+/* Test that variable\n+     int val;\n+   may hold value of tyope \"struct c\" which has same size.\n+   This is valid in GIMPLE memory model.  */\n+\n+struct a {int val;} a={1},a2;\n+struct b {struct a a;};\n+int val;\n+struct c {struct b b;} *cptr=(void *)&val;\n+\n+int\n+main(void)\n+{\n+  cptr->b.a=a;\n+  val = 2;\n+  a2=cptr->b.a;\n+  if (a2.val == a.val)\n+    __builtin_abort ();\n+}"}, {"sha": "111f375bb4a66bc46c11d36743cdcce351ad1485", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1a7d8de4689f32bf39047f3f2797f7c30ce2777/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1a7d8de4689f32bf39047f3f2797f7c30ce2777/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=d1a7d8de4689f32bf39047f3f2797f7c30ce2777", "patch": "@@ -850,8 +850,7 @@ type_has_components_p (tree type)\n \n /* Determine if the two component references REF1 and REF2 which are\n    based on access types TYPE1 and TYPE2 and of which at least one is based\n-   on an indirect reference may alias.  REF2 is the only one that can\n-   be a decl in which case REF2_IS_DECL is true.\n+   on an indirect reference may alias.  \n    REF1_ALIAS_SET, BASE1_ALIAS_SET, REF2_ALIAS_SET and BASE2_ALIAS_SET\n    are the respective alias sets.  */\n \n@@ -863,8 +862,7 @@ aliasing_component_refs_p (tree ref1,\n \t\t\t   tree ref2,\n \t\t\t   alias_set_type ref2_alias_set,\n \t\t\t   alias_set_type base2_alias_set,\n-\t\t\t   poly_int64 offset2, poly_int64 max_size2,\n-\t\t\t   bool ref2_is_decl)\n+\t\t\t   poly_int64 offset2, poly_int64 max_size2)\n {\n   /* If one reference is a component references through pointers try to find a\n      common base and apply offset based disambiguation.  This handles\n@@ -982,7 +980,7 @@ aliasing_component_refs_p (tree ref1,\n \t  if (TREE_CODE (TREE_TYPE (base1)) == ARRAY_TYPE\n \t      && (!TYPE_SIZE (TREE_TYPE (base1))\n \t\t  || TREE_CODE (TYPE_SIZE (TREE_TYPE (base1))) != INTEGER_CST\n-\t\t  || (ref == base2 && !ref2_is_decl)))\n+\t\t  || ref == base2))\n \t    {\n \t      ++alias_stats.aliasing_component_refs_p_may_alias;\n \t      return true;\n@@ -1041,7 +1039,7 @@ aliasing_component_refs_p (tree ref1,\n \t  if (TREE_CODE (TREE_TYPE (base2)) == ARRAY_TYPE\n \t      && (!TYPE_SIZE (TREE_TYPE (base2))\n \t\t  || TREE_CODE (TYPE_SIZE (TREE_TYPE (base2))) != INTEGER_CST\n-\t\t  || (ref == base1 && !ref2_is_decl)))\n+\t\t  || ref == base1))\n \t    {\n \t      ++alias_stats.aliasing_component_refs_p_may_alias;\n \t      return true;\n@@ -1089,8 +1087,7 @@ aliasing_component_refs_p (tree ref1,\n       return true;\n     }\n   /* If this is ptr vs. decl then we know there is no ptr ... decl path.  */\n-  if (!ref2_is_decl\n-      && compare_type_sizes (TREE_TYPE (ref1), type2) >= 0\n+  if (compare_type_sizes (TREE_TYPE (ref1), type2) >= 0\n       && (!end_struct_ref2\n \t  || compare_type_sizes (TREE_TYPE (ref1),\n \t\t \t\t TREE_TYPE (end_struct_ref2)) >= 0)\n@@ -1554,13 +1551,7 @@ indirect_ref_may_alias_decl_p (tree ref1 ATTRIBUTE_UNUSED, tree base1,\n \t\t\t\t      offset1, max_size1,\n \t\t\t\t      ref2,\n \t\t\t\t      ref2_alias_set, base2_alias_set,\n-\t\t\t\t      offset2, max_size2, \n-\t\t\t\t      /* Only if the other reference is actual\n-\t\t\t\t\t decl we can safely check only toplevel\n-\t\t\t\t\t part of access path 1.  */\n-\t\t\t\t      same_type_for_tbaa (TREE_TYPE (dbase2),\n-\t\t\t\t\t                  TREE_TYPE (base2))\n-\t\t\t\t      == 1);\n+\t\t\t\t      offset2, max_size2);\n \n   return true;\n }\n@@ -1675,7 +1666,7 @@ indirect_refs_may_alias_p (tree ref1 ATTRIBUTE_UNUSED, tree base1,\n \t\t\t\t      offset1, max_size1,\n \t\t\t\t      ref2,\n \t\t\t\t      ref2_alias_set, base2_alias_set,\n-\t\t\t\t      offset2, max_size2, false);\n+\t\t\t\t      offset2, max_size2);\n \n   return true;\n }"}]}