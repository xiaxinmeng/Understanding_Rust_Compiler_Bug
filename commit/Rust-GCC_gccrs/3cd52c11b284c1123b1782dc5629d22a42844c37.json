{"sha": "3cd52c11b284c1123b1782dc5629d22a42844c37", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2NkNTJjMTFiMjg0YzExMjNiMTc4MmRjNTYyOWQyMmE0Mjg0NGMzNw==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2015-02-05T08:02:58Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2015-02-05T08:02:58Z"}, "message": "2015-02-05  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/640757\n\t* resolve.c (resolve_structure_cons): Obtain the rank of class\n\tcomponents.\n\t* trans-expr.c (gfc_trans_alloc_subarray_assign): Do the\n\tassignment to allocatable class array components.\n\t(alloc_scalar_allocatable_for_subcomponent_assignment): If comp\n\tis a class component, allocate to the _data field.\n\t(gfc_trans_subcomponent_assign): If a class component with a\n\tderived type expression set the _vptr field and for array\n\tcomponents, call gfc_trans_alloc_subarray_assign. For scalars,\n\tthe assignment is performed here.\n\n2015-02-05  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/640757\n\t* gfortran.dg/type_to_class_2.f90: New test\n\t* gfortran.dg/type_to_class_3.f90: New test\n\nFrom-SVN: r220435", "tree": {"sha": "460ab48d46937485d07108170047c95303e18d38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/460ab48d46937485d07108170047c95303e18d38"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3cd52c11b284c1123b1782dc5629d22a42844c37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cd52c11b284c1123b1782dc5629d22a42844c37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cd52c11b284c1123b1782dc5629d22a42844c37", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cd52c11b284c1123b1782dc5629d22a42844c37/comments", "author": null, "committer": null, "parents": [{"sha": "a0cbab4acd8f7af1ece6d94e61d5c754246c5efa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0cbab4acd8f7af1ece6d94e61d5c754246c5efa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0cbab4acd8f7af1ece6d94e61d5c754246c5efa"}], "stats": {"total": 138, "additions": 135, "deletions": 3}, "files": [{"sha": "a60737f2fff9aa9d8ff2cf81003c28d9a98bf493", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd52c11b284c1123b1782dc5629d22a42844c37/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd52c11b284c1123b1782dc5629d22a42844c37/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=3cd52c11b284c1123b1782dc5629d22a42844c37", "patch": "@@ -1,3 +1,17 @@\n+2015-02-05  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/640757\n+\t* resolve.c (resolve_structure_cons): Obtain the rank of class\n+\tcomponents.\n+\t* trans-expr.c (gfc_trans_alloc_subarray_assign): Do the\n+\tassignment to allocatable class array components.\n+\t(alloc_scalar_allocatable_for_subcomponent_assignment): If comp\n+\tis a class component, allocate to the _data field.\n+\t(gfc_trans_subcomponent_assign): If a class component with a\n+\tderived type expression set the _vptr field and for array\n+\tcomponents, call gfc_trans_alloc_subarray_assign. For scalars,\n+\tthe assignment is performed here.\n+\n 2015-02-04  Jakub Jelinek  <jakub@redhat.com>\n \n \t* options.c: Include langhooks.h."}, {"sha": "3b0c12a0e6be31dd6c97dd4663995b32d6476e47", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd52c11b284c1123b1782dc5629d22a42844c37/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd52c11b284c1123b1782dc5629d22a42844c37/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=3cd52c11b284c1123b1782dc5629d22a42844c37", "patch": "@@ -1155,6 +1155,9 @@ resolve_structure_cons (gfc_expr *expr, int init)\n \t}\n \n       rank = comp->as ? comp->as->rank : 0;\n+      if (comp->ts.type == BT_CLASS && CLASS_DATA (comp)->as)\n+ \trank = CLASS_DATA (comp)->as->rank;\n+\n       if (cons->expr->expr_type != EXPR_NULL && rank != cons->expr->rank\n \t  && (comp->attr.allocatable || cons->expr->rank))\n \t{"}, {"sha": "1af3696a922f09725c6a55fd1b9bc43f3f0ffa2f", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 49, "deletions": 3, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd52c11b284c1123b1782dc5629d22a42844c37/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd52c11b284c1123b1782dc5629d22a42844c37/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=3cd52c11b284c1123b1782dc5629d22a42844c37", "patch": "@@ -6211,6 +6211,20 @@ gfc_trans_alloc_subarray_assign (tree dest, gfc_component * cm,\n     tmp = gfc_copy_alloc_comp (cm->ts.u.derived,\n \t\t\t       se.expr, dest,\n \t\t\t       cm->as->rank);\n+  else if (cm->ts.type == BT_CLASS && expr->ts.type == BT_DERIVED\n+\t   && CLASS_DATA(cm)->attr.allocatable)\n+    {\n+      if (cm->ts.u.derived->attr.alloc_comp)\n+\ttmp = gfc_copy_alloc_comp (expr->ts.u.derived,\n+\t\t\t\t   se.expr, dest,\n+\t\t\t\t   expr->rank);\n+      else\n+\t{\n+\t  tmp = TREE_TYPE (dest);\n+\t  tmp = gfc_duplicate_allocatable (dest, se.expr,\n+\t\t\t\t\t   tmp, expr->rank);\n+\t}\n+    }\n   else\n     tmp = gfc_duplicate_allocatable (dest, se.expr,\n \t\t\t\t     TREE_TYPE(cm->backend_decl),\n@@ -6335,6 +6349,7 @@ alloc_scalar_allocatable_for_subcomponent_assignment (stmtblock_t *block,\n \t\t\t\t\t\t      gfc_symbol *sym)\n {\n   tree tmp;\n+  tree ptr;\n   tree size;\n   tree size_in_bytes;\n   tree lhs_cl_size = NULL_TREE;\n@@ -6400,8 +6415,12 @@ alloc_scalar_allocatable_for_subcomponent_assignment (stmtblock_t *block,\n       tmp = build_call_expr_loc (input_location,\n \t\t\t\t builtin_decl_explicit (BUILT_IN_MALLOC),\n \t\t\t\t 1, size_in_bytes);\n-      tmp = fold_convert (TREE_TYPE (comp), tmp);\n-      gfc_add_modify (block, comp, tmp);\n+      if (GFC_CLASS_TYPE_P (TREE_TYPE (comp)))\n+\tptr = gfc_class_data_get (comp);\n+      else\n+\tptr = comp;\n+      tmp = fold_convert (TREE_TYPE (ptr), tmp);\n+      gfc_add_modify (block, ptr, tmp);\n     }\n \n   if (cm->ts.type == BT_CHARACTER && cm->ts.deferred)\n@@ -6420,6 +6439,7 @@ gfc_trans_subcomponent_assign (tree dest, gfc_component * cm, gfc_expr * expr,\n   gfc_se lse;\n   stmtblock_t block;\n   tree tmp;\n+  tree vtab;\n \n   gfc_start_block (&block);\n \n@@ -6483,6 +6503,20 @@ gfc_trans_subcomponent_assign (tree dest, gfc_component * cm, gfc_expr * expr,\n \t  gfc_add_expr_to_block (&block, tmp);\n \t}\n     }\n+  else if (cm->ts.type == BT_CLASS\n+\t   && CLASS_DATA (cm)->attr.dimension\n+\t   && CLASS_DATA (cm)->attr.allocatable\n+\t   && expr->ts.type == BT_DERIVED)\n+    {\n+      vtab = gfc_get_symbol_decl (gfc_find_vtab (&expr->ts));\n+      vtab = gfc_build_addr_expr (NULL_TREE, vtab);\n+      tmp = gfc_class_vptr_get (dest);\n+      gfc_add_modify (&block, tmp,\n+\t\t      fold_convert (TREE_TYPE (tmp), vtab));\n+      tmp = gfc_class_data_get (dest);\n+      tmp = gfc_trans_alloc_subarray_assign (tmp, cm, expr);\n+      gfc_add_expr_to_block (&block, tmp);\n+    }\n   else if (init && (cm->attr.allocatable\n \t   || (cm->ts.type == BT_CLASS && CLASS_DATA (cm)->attr.allocatable)))\n     {\n@@ -6504,7 +6538,19 @@ gfc_trans_subcomponent_assign (tree dest, gfc_component * cm, gfc_expr * expr,\n       if (expr->symtree && expr->symtree->n.sym->attr.proc_pointer\n \t  && expr->symtree->n.sym->attr.dummy)\n \tse.expr = build_fold_indirect_ref_loc (input_location, se.expr);\n-      tmp = build_fold_indirect_ref_loc (input_location, dest);\n+\n+      if (cm->ts.type == BT_CLASS && expr->ts.type == BT_DERIVED)\n+\t{\n+\t  tmp = gfc_class_data_get (dest);\n+\t  tmp = build_fold_indirect_ref_loc (input_location, tmp);\n+\t  vtab = gfc_get_symbol_decl (gfc_find_vtab (&expr->ts));\n+\t  vtab = gfc_build_addr_expr (NULL_TREE, vtab);\n+\t  gfc_add_modify (&block, gfc_class_vptr_get (dest),\n+\t\t fold_convert (TREE_TYPE (gfc_class_vptr_get (dest)), vtab));\n+\t}\n+      else\n+\ttmp = build_fold_indirect_ref_loc (input_location, dest);\n+\n       /* For deferred strings insert a memcpy.  */\n       if (cm->ts.type == BT_CHARACTER && cm->ts.deferred)\n \t{"}, {"sha": "1ca16b4873fdd177f2cac235b1739503f9723db3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd52c11b284c1123b1782dc5629d22a42844c37/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd52c11b284c1123b1782dc5629d22a42844c37/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3cd52c11b284c1123b1782dc5629d22a42844c37", "patch": "@@ -1,3 +1,9 @@\n+2015-02-05  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/640757\n+\t* gfortran.dg/type_to_class_2.f90: New test\n+\t* gfortran.dg/type_to_class_3.f90: New test\n+\n 2015-02-04  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR ipa/64686"}, {"sha": "82f98cc3f4a988824b1dda9eebef18b4dc772091", "filename": "gcc/testsuite/gfortran.dg/type_to_class_2.f03", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd52c11b284c1123b1782dc5629d22a42844c37/gcc%2Ftestsuite%2Fgfortran.dg%2Ftype_to_class_2.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd52c11b284c1123b1782dc5629d22a42844c37/gcc%2Ftestsuite%2Fgfortran.dg%2Ftype_to_class_2.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftype_to_class_2.f03?ref=3cd52c11b284c1123b1782dc5629d22a42844c37", "patch": "@@ -0,0 +1,30 @@\n+! { dg-do run }\n+!\n+! Test the fix for PR64757.\n+!\n+! Contributed by Michael Lee Rilee  <mike@rilee.net>\n+!\n+  type :: Test\n+    integer :: i\n+  end type\n+\n+  type :: TestReference\n+     class(Test), allocatable :: test\n+  end type\n+\n+  type(TestReference) :: testList\n+  type(test) :: x\n+\n+  testList = TestReference(Test(99))  ! ICE in fold_convert_loc was here\n+\n+  x = testList%test\n+\n+  select type (y => testList%test)    ! Check vptr set\n+    type is (Test)\n+      if (x%i .ne. y%i) call abort\n+    class default\n+      call abort\n+  end select\n+end\n+\n+"}, {"sha": "7611155a2609cb163618cd0667851b6a02a5cf8d", "filename": "gcc/testsuite/gfortran.dg/type_to_class_3.f03", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd52c11b284c1123b1782dc5629d22a42844c37/gcc%2Ftestsuite%2Fgfortran.dg%2Ftype_to_class_3.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd52c11b284c1123b1782dc5629d22a42844c37/gcc%2Ftestsuite%2Fgfortran.dg%2Ftype_to_class_3.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftype_to_class_3.f03?ref=3cd52c11b284c1123b1782dc5629d22a42844c37", "patch": "@@ -0,0 +1,33 @@\n+! { dg-do run }\n+!\n+! Test the fix for the array version of PR64757.\n+!\n+! Based on by Michael Lee Rilee  <mike@rilee.net>\n+!\n+  type :: Test\n+    integer :: i\n+  end type\n+\n+  type :: TestReference\n+     class(Test), allocatable :: test(:)\n+  end type\n+\n+  type(TestReference) :: testList\n+  type(test), allocatable :: x(:)\n+\n+  testList = TestReference([Test(99), Test(199)])  ! Gave: The rank of the element in the\n+                                                   ! structure constructor at (1) does not\n+                                                   ! match that of the component (1/0)\n+! allocate (testList%test(2), source = [Test(99), Test(199)]) ! Works, of course\n+\n+  x = testList%test\n+\n+  select type (y => testList%test)    ! Check vptr set\n+    type is (Test)\n+      if (any(x%i .ne. y%i)) call abort\n+    class default\n+      call abort\n+  end select\n+end\n+\n+"}]}