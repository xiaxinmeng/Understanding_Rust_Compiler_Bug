{"sha": "c50bca0894c554662fbd42728bd118d7b9f41b49", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzUwYmNhMDg5NGM1NTQ2NjJmYmQ0MjcyOGJkMTE4ZDdiOWY0MWI0OQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@rabi.phys.columbia.edu", "date": "1998-12-07T14:15:29Z"}, "committer": {"name": "Dave Brolley", "email": "brolley@gcc.gnu.org", "date": "1998-12-07T14:15:29Z"}, "message": "cpplib.c (initialize_char_syntax): Use ISALPHA and ISALNUM so it'll work on non-ASCII platforms.\n\n1998-12-07  Zack Weinberg  <zack@rabi.phys.columbia.edu>\n\t* cpplib.c (initialize_char_syntax): Use ISALPHA and ISALNUM\n          so it'll work on non-ASCII platforms.  Always consider $ an\n          identifier character.  Take no arguments.\n\t  (cpp_reader_init): Call initialize_char_syntax with no\n          arguments.\n\t  (cpp_start_read): Don't call initialize_char_syntax again.\n          Clear is_idchar['$'] and is_idstart['$'] if not\n          opts->dollars_in_ident.\n\t* cpplib.h (struct cpp_reader): Replace void *data element by\n          cpp_options *opts.  Rearrange elements to make gdb printout\n          less annoying (put buffer stack at end).\n\t  (CPP_OPTIONS): Get rid of now-unnecessary cast.\n\t* cppmain.c: s/data/opts/ when initializing cpp_reader\n          structure.\n\t* c-decl.c: Likewise.\n\t* objc/objc-act.c: Likewise.\n\t* fix-header.c: Likewise.\n\nFrom-SVN: r24154", "tree": {"sha": "88adc2af69a7da636a68ab4d8b14fa33e27d1ed3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/88adc2af69a7da636a68ab4d8b14fa33e27d1ed3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c50bca0894c554662fbd42728bd118d7b9f41b49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c50bca0894c554662fbd42728bd118d7b9f41b49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c50bca0894c554662fbd42728bd118d7b9f41b49", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c50bca0894c554662fbd42728bd118d7b9f41b49/comments", "author": null, "committer": null, "parents": [{"sha": "f1a86df6cbc181439d3c1b402275110c9debd76d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1a86df6cbc181439d3c1b402275110c9debd76d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1a86df6cbc181439d3c1b402275110c9debd76d"}], "stats": {"total": 91, "additions": 58, "deletions": 33}, "files": [{"sha": "098de32c649c59a77a7d78e8b32840c917dfe796", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c50bca0894c554662fbd42728bd118d7b9f41b49/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c50bca0894c554662fbd42728bd118d7b9f41b49/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c50bca0894c554662fbd42728bd118d7b9f41b49", "patch": "@@ -1,4 +1,26 @@\n-1998-11-26 01:17 -0500  Zack Weinberg  <zack@rabi.phys.columbia.edu>\n+1998-12-07  Zack Weinberg  <zack@rabi.phys.columbia.edu>\n+\n+\t* cpplib.c (initialize_char_syntax): Use ISALPHA and ISALNUM\n+          so it'll work on non-ASCII platforms.  Always consider $ an\n+          identifier character.  Take no arguments.\n+\t  (cpp_reader_init): Call initialize_char_syntax with no\n+          arguments.\n+\t  (cpp_start_read): Don't call initialize_char_syntax again.\n+          Clear is_idchar['$'] and is_idstart['$'] if not\n+          opts->dollars_in_ident.\n+\n+\t* cpplib.h (struct cpp_reader): Replace void *data element by\n+          cpp_options *opts.  Rearrange elements to make gdb printout\n+          less annoying (put buffer stack at end).\n+\t  (CPP_OPTIONS): Get rid of now-unnecessary cast.\n+\n+\t* cppmain.c: s/data/opts/ when initializing cpp_reader\n+          structure.\n+\t* c-decl.c: Likewise.\n+\t* objc/objc-act.c: Likewise.\n+\t* fix-header.c: Likewise.\n+\n+1998-12-07  Zack Weinberg  <zack@rabi.phys.columbia.edu>\n \n \t* cpplib.h (struct cpp_buffer): Replace dir and dlen members\n \twith a struct file_name_list pointer."}, {"sha": "f5e9573390247b62d55c230a5ad50c268a654c19", "filename": "gcc/c-decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c50bca0894c554662fbd42728bd118d7b9f41b49/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c50bca0894c554662fbd42728bd118d7b9f41b49/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=c50bca0894c554662fbd42728bd118d7b9f41b49", "patch": "@@ -618,7 +618,7 @@ c_decode_option (argc, argv)\n   if (! cpp_initialized)\n     {\n       cpp_reader_init (&parse_in);\n-      parse_in.data = &parse_options;\n+      parse_in.opts = &parse_options;\n       cpp_options_init (&parse_options);\n       cpp_initialized = 1;\n     }"}, {"sha": "8d408d0048c0bec743e26cdccd0aad7d815318a2", "filename": "gcc/cpplib.c", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c50bca0894c554662fbd42728bd118d7b9f41b49/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c50bca0894c554662fbd42728bd118d7b9f41b49/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=c50bca0894c554662fbd42728bd118d7b9f41b49", "patch": "@@ -169,7 +169,7 @@ static char *my_strerror\t\tPROTO ((int));\n static void make_assertion\t\tPROTO ((cpp_reader *, char *, U_CHAR *));\n static void path_include\t\tPROTO ((cpp_reader *, char *));\n static void initialize_builtins\t\tPROTO ((cpp_reader *));\n-static void initialize_char_syntax\tPROTO ((struct cpp_options *));\n+static void initialize_char_syntax\tPROTO ((void));\n #if 0\n static void trigraph_pcp ();\n #endif\n@@ -339,11 +339,9 @@ U_CHAR is_hor_space[256] = { 0 };\n /* table to tell if c is horizontal or vertical space.  */\n U_CHAR is_space[256] = { 0 };\n \n-/* Initialize syntactic classifications of characters.  */\n-\n+/* Initialize syntactic classifications of characters. */\n static void\n-initialize_char_syntax (opts)\n-     struct cpp_options *opts;\n+initialize_char_syntax ()\n {\n   register int i;\n \n@@ -352,19 +350,20 @@ initialize_char_syntax (opts)\n    * faster than saying (is_alpha (c) || c == '_'), etc.\n    * Set up these things before calling any routines tthat\n    * refer to them.\n+   * XXX We should setlocale(LC_CTYPE, \"C\") here for safety.\n    */\n-  for (i = 'a'; i <= 'z'; i++) {\n-    is_idchar[i - 'a' + 'A'] = 1;\n-    is_idchar[i] = 1;\n-    is_idstart[i - 'a' + 'A'] = 1;\n-    is_idstart[i] = 1;\n-  }\n-  for (i = '0'; i <= '9'; i++)\n-    is_idchar[i] = 1;\n-  is_idchar['_'] = 1;\n+  for (i = 0; i < 256; i++)\n+    {\n+      is_idchar[i]  = ISALNUM (i);\n+      is_idstart[i] = ISALPHA (i);\n+    }\n+\n+  is_idchar['_']  = 1;\n   is_idstart['_'] = 1;\n-  is_idchar['$'] = opts->dollars_in_ident;\n-  is_idstart['$'] = opts->dollars_in_ident;\n+\n+  /* These will be reset later if -$ is in effect. */\n+  is_idchar['$']  = 1;\n+  is_idstart['$'] = 1;\n \n   /* horizontal space table */\n   is_hor_space[' '] = 1;\n@@ -595,9 +594,8 @@ cpp_options_init (opts)\n   opts->in_fname = NULL;\n   opts->out_fname = NULL;\n \n-  /* Initialize is_idchar to allow $.  */\n   opts->dollars_in_ident = 1;\n-  initialize_char_syntax (opts);\n+  initialize_char_syntax ();\n \n   opts->no_line_commands = 0;\n   opts->no_trigraphs = 1;\n@@ -4837,6 +4835,11 @@ cpp_start_read (pfile, fname)\n      variable specifies other defaults.  */\n   struct default_include *include_defaults = include_defaults_array;\n \n+  /* Now that we know dollars_in_ident for real,\n+     reset is_idchar/is_idstart. */\n+  is_idchar['$'] = opts->dollars_in_ident;\n+  is_idstart['$'] = opts->dollars_in_ident;\n+  \n   /* Add dirs from CPATH after dirs from -I.  */\n   /* There seems to be confusion about what CPATH should do,\n      so for the moment it is not documented.  */\n@@ -4847,9 +4850,6 @@ cpp_start_read (pfile, fname)\n   if (p != 0 && ! opts->no_standard_includes)\n     path_include (pfile, p);\n \n-  /* Now that dollars_in_ident is known, initialize is_idchar.  */\n-  initialize_char_syntax (opts);\n-\n   /* Do partial setup of input buffer for the sake of generating\n      early #line directives (when -g is in effect).  */\n   fp = cpp_push_buffer (pfile, NULL, 0);"}, {"sha": "65c286b7e182d52ca9862bff250684bf15775c17", "filename": "gcc/cpplib.h", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c50bca0894c554662fbd42728bd118d7b9f41b49/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c50bca0894c554662fbd42728bd118d7b9f41b49/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=c50bca0894c554662fbd42728bd118d7b9f41b49", "patch": "@@ -156,13 +156,11 @@ typedef struct assertion_hashnode ASSERTION_HASHNODE;\n    Applying cpp_get_token repeatedly yields a stream of pre-processor\n    tokens.  Usually, there is only one cpp_reader object active. */\n \n-struct cpp_reader {\n+struct cpp_reader\n+{\n   parse_underflow_t get_token;\n   cpp_buffer *buffer;\n-  cpp_buffer buffer_stack[CPP_STACK_MAX];\n-\n-  int errors;\t\t\t/* Error counter for exit code */\n-  void *data;\n+  cpp_options *opts;\n \n   /* A buffer used for both for cpp_get_token's output, and also internally. */\n   unsigned char *token_buffer;\n@@ -171,6 +169,9 @@ struct cpp_reader {\n   /* End of the written part of token_buffer. */\n   unsigned char *limit;\n \n+  /* Error counter for exit code */\n+  int errors;\n+\n   /* Line where a newline was first seen in a string constant.  */\n   int multiline_string_line;\n \n@@ -247,6 +248,8 @@ struct cpp_reader {\n #ifdef __cplusplus\n   ~cpp_reader () { cpp_cleanup (this); }\n #endif\n+\n+  cpp_buffer buffer_stack[CPP_STACK_MAX];\n };\n \n #define CPP_FATAL_LIMIT 1000\n@@ -288,14 +291,14 @@ struct cpp_reader {\n #define CPP_ADJUST_WRITTEN(PFILE,DELTA) ((PFILE)->limit += (DELTA))\n #define CPP_SET_WRITTEN(PFILE,N) ((PFILE)->limit = (PFILE)->token_buffer + (N))\n \n-#define CPP_OPTIONS(PFILE) ((cpp_options *) (PFILE)->data)\n+#define CPP_OPTIONS(PFILE) ((PFILE)->opts)\n \n #define CPP_BUFFER(PFILE) ((PFILE)->buffer)\n #define CPP_PREV_BUFFER(BUFFER) ((BUFFER)+1)\n /* The bottom of the buffer stack. */\n #define CPP_NULL_BUFFER(PFILE) (&(PFILE)->buffer_stack[CPP_STACK_MAX])\n \n-/* Pointed to by cpp_reader::data. */\n+/* Pointed to by cpp_reader.opts. */\n struct cpp_options {\n   char *in_fname;\n "}, {"sha": "7d11ca09d0556c7ec896369b43ab24df5ef0bb9a", "filename": "gcc/cppmain.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c50bca0894c554662fbd42728bd118d7b9f41b49/gcc%2Fcppmain.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c50bca0894c554662fbd42728bd118d7b9f41b49/gcc%2Fcppmain.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppmain.c?ref=c50bca0894c554662fbd42728bd118d7b9f41b49", "patch": "@@ -69,7 +69,7 @@ main (argc, argv)\n   progname = p;\n \n   cpp_reader_init (&parse_in);\n-  parse_in.data = opts;\n+  parse_in.opts = opts;\n \n   cpp_options_init (opts);\n   "}, {"sha": "ba169fa430663a854b783edbb55d8587ef0edfa0", "filename": "gcc/fix-header.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c50bca0894c554662fbd42728bd118d7b9f41b49/gcc%2Ffix-header.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c50bca0894c554662fbd42728bd118d7b9f41b49/gcc%2Ffix-header.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffix-header.c?ref=c50bca0894c554662fbd42728bd118d7b9f41b49", "patch": "@@ -632,7 +632,7 @@ read_scan_file (in_fname, argc, argv)\n   obstack_init (&scan_file_obstack); \n \n   cpp_reader_init (&scan_in);\n-  scan_in.data = &scan_options;\n+  scan_in.opts = &scan_options;\n   cpp_options_init (&scan_options);\n   i = cpp_handle_options (&scan_in, argc, argv);\n   if (i < argc && ! CPP_FATAL_ERRORS (&scan_in))"}, {"sha": "d064da3f5e7a77d56104a964975f3ce4f616e5b6", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c50bca0894c554662fbd42728bd118d7b9f41b49/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c50bca0894c554662fbd42728bd118d7b9f41b49/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=c50bca0894c554662fbd42728bd118d7b9f41b49", "patch": "@@ -694,7 +694,7 @@ lang_decode_option (argc, argv)\n   if (! cpp_initialized)\n     {\n       cpp_reader_init (&parse_in);\n-      parse_in.data = &parse_options;\n+      parse_in.opts = &parse_options;\n       cpp_options_init (&parse_options);\n       cpp_initialized = 1;\n     }"}]}