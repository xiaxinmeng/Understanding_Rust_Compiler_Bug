{"sha": "8bf3cdff10beadb7072b0841be3fc7381d3218bd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGJmM2NkZmYxMGJlYWRiNzA3MmIwODQxYmUzZmM3MzgxZDMyMThiZA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2016-11-29T16:25:01Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2016-11-29T16:25:01Z"}, "message": "spellcheck bugfixes: don't offer the goal string as a suggestion\n\ngcc/cp/ChangeLog:\n\tPR c++/77922\n\t* name-lookup.c (lookup_name_fuzzy): Filter out reserved words\n\tthat were filtered out by init_reswords.\n\ngcc/ChangeLog:\n\tPR c++/72774\n\tPR c++/72786\n\tPR c++/77922\n\tPR c++/78313\n\t* spellcheck.c (selftest::test_find_closest_string): Verify that\n\twe don't offer the goal string as a suggestion.\n\t* spellcheck.h (best_match::get_best_meaningful_candidate): Don't\n\toffer the goal string as a suggestion.\n\ngcc/testsuite/ChangeLog:\n\tPR c++/72774\n\tPR c++/72786\n\tPR c++/77922\n\tPR c++/78313\n\t* g++.dg/spellcheck-c++-11-keyword.C: New test case.\n\t* g++.dg/spellcheck-macro-ordering.C: New test case.\n\t* g++.dg/spellcheck-pr78313.C: New test case.\n\nFrom-SVN: r242965", "tree": {"sha": "006b95a47c80c65017ae64cf4c8fceb7ae9e9f9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/006b95a47c80c65017ae64cf4c8fceb7ae9e9f9f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8bf3cdff10beadb7072b0841be3fc7381d3218bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bf3cdff10beadb7072b0841be3fc7381d3218bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bf3cdff10beadb7072b0841be3fc7381d3218bd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bf3cdff10beadb7072b0841be3fc7381d3218bd/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8684b292035b9463cdd12cc6f0a5114b775cfadb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8684b292035b9463cdd12cc6f0a5114b775cfadb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8684b292035b9463cdd12cc6f0a5114b775cfadb"}], "stats": {"total": 90, "additions": 90, "deletions": 0}, "files": [{"sha": "92033ba8b470426a2d85c9da2f50743d862431f4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bf3cdff10beadb7072b0841be3fc7381d3218bd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bf3cdff10beadb7072b0841be3fc7381d3218bd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8bf3cdff10beadb7072b0841be3fc7381d3218bd", "patch": "@@ -1,3 +1,15 @@\n+2016-11-29  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c++/72774\n+\tPR c++/72786\n+\tPR c++/77922\n+\tPR c++/78313\n+\t* spellcheck.c (selftest::test_find_closest_string): Verify that\n+\twe don't offer the goal string as a suggestion.\n+\t* spellcheck.h (best_match::get_best_meaningful_candidate): Don't\n+\toffer the goal string as a suggestion.\n+\n+\n 2016-11-29  Claudiu Zissulescu  <claziss@synopsys.com>\n \n \t* config/arc/arc.c (arc_override_options): Avoid selection of"}, {"sha": "35db0db017c48f3cb2a201e40679b9ea12a1b2ee", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bf3cdff10beadb7072b0841be3fc7381d3218bd/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bf3cdff10beadb7072b0841be3fc7381d3218bd/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8bf3cdff10beadb7072b0841be3fc7381d3218bd", "patch": "@@ -1,3 +1,9 @@\n+2016-11-29  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c++/77922\n+\t* name-lookup.c (lookup_name_fuzzy): Filter out reserved words\n+\tthat were filtered out by init_reswords.\n+\n 2016-11-28  Jakub Jelinek  <jakub@redhat.com>\n \t    Jason Merrill  <jason@redhat.com>\n "}, {"sha": "d80c0318330a0e67bb31f4c9d297d38c708f5de3", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bf3cdff10beadb7072b0841be3fc7381d3218bd/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bf3cdff10beadb7072b0841be3fc7381d3218bd/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=8bf3cdff10beadb7072b0841be3fc7381d3218bd", "patch": "@@ -4812,6 +4812,12 @@ lookup_name_fuzzy (tree name, enum lookup_name_fuzzy_kind kind)\n       if (!resword_identifier)\n \tcontinue;\n       gcc_assert (TREE_CODE (resword_identifier) == IDENTIFIER_NODE);\n+\n+      /* Only consider reserved words that survived the\n+\t filtering in init_reswords (e.g. for -std).  */\n+      if (!C_IS_RESERVED_WORD (resword_identifier))\n+\tcontinue;\n+\n       bm.consider (resword_identifier);\n     }\n "}, {"sha": "86cdee14d7961aaf3a2daa00a58da3a9ebcb4dd2", "filename": "gcc/spellcheck.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bf3cdff10beadb7072b0841be3fc7381d3218bd/gcc%2Fspellcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bf3cdff10beadb7072b0841be3fc7381d3218bd/gcc%2Fspellcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fspellcheck.c?ref=8bf3cdff10beadb7072b0841be3fc7381d3218bd", "patch": "@@ -210,6 +210,11 @@ test_find_closest_string ()\n   ASSERT_STREQ (\"banana\", find_closest_string (\"banyan\", &candidates));\n   ASSERT_STREQ (\"cherry\", find_closest_string (\"berry\", &candidates));\n   ASSERT_EQ (NULL, find_closest_string (\"not like the others\", &candidates));\n+\n+  /* If the goal string somehow makes it into the candidate list, offering\n+     it as a suggestion will be nonsensical.  Verify that we don't offer such\n+     suggestions.  */\n+  ASSERT_EQ (NULL, find_closest_string (\"banana\", &candidates));\n }\n \n /* Test data for test_metric_conditions.  */"}, {"sha": "41c9308c2a121558bf704ae02c63df3846b8a797", "filename": "gcc/spellcheck.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bf3cdff10beadb7072b0841be3fc7381d3218bd/gcc%2Fspellcheck.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bf3cdff10beadb7072b0841be3fc7381d3218bd/gcc%2Fspellcheck.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fspellcheck.h?ref=8bf3cdff10beadb7072b0841be3fc7381d3218bd", "patch": "@@ -165,6 +165,16 @@ class best_match\n \tif (m_best_distance > cutoff)\n \t  return NULL;\n     }\n+\n+    /* If the goal string somehow makes it into the candidate list, offering\n+       it as a suggestion will be nonsensical e.g.\n+         'constexpr' does not name a type; did you mean 'constexpr'?\n+       Ultimately such suggestions are due to bugs in constructing the\n+       candidate list, but as a band-aid, do not offer suggestions for\n+       distance == 0 (where candidate == goal).  */\n+    if (m_best_distance == 0)\n+      return NULL;\n+\n     return m_best_candidate;\n   }\n "}, {"sha": "2107f7eacc1c23380d1ab5cfde46037f9cb2fdc3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bf3cdff10beadb7072b0841be3fc7381d3218bd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bf3cdff10beadb7072b0841be3fc7381d3218bd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8bf3cdff10beadb7072b0841be3fc7381d3218bd", "patch": "@@ -1,3 +1,13 @@\n+2016-11-29  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c++/72774\n+\tPR c++/72786\n+\tPR c++/77922\n+\tPR c++/78313\n+\t* g++.dg/spellcheck-c++-11-keyword.C: New test case.\n+\t* g++.dg/spellcheck-macro-ordering.C: New test case.\n+\t* g++.dg/spellcheck-pr78313.C: New test case.\n+\n 2016-11-29  Tamar Christina  <tamar.christina@arm.com>\n \n \t* gcc.target/aarch64/advsimd-intrinsics/arm-neon-ref.h"}, {"sha": "0984af9d72e6d09375616613ecc24ad06d206196", "filename": "gcc/testsuite/g++.dg/spellcheck-c++-11-keyword.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bf3cdff10beadb7072b0841be3fc7381d3218bd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-c%2B%2B-11-keyword.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bf3cdff10beadb7072b0841be3fc7381d3218bd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-c%2B%2B-11-keyword.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-c%2B%2B-11-keyword.C?ref=8bf3cdff10beadb7072b0841be3fc7381d3218bd", "patch": "@@ -0,0 +1,15 @@\n+/* c++/77922: \"constexpr\" is only available from C++11 onwards.\n+   We shouldn't offer it as a spellcheck suggestion in C++98.  */\n+// { dg-options \"-std=c++98\" }\n+\n+constexpr int a = 1; // { dg-bogus \"did you mean\" }\n+// { dg-error \".constexpr. does not name a type\" \"\" { target *-*-* } .-1 }\n+// { dg-message \"C\\\\+\\\\+11 .constexpr. only available with -std=c\\\\+\\\\+11 or -std=gnu\\\\+\\\\+11\" \"\" { target *-*-* } .-2 }\n+\n+/* If the user typos \"constexpr\" (here as \"consexpr\"), don't offer it as a\n+   spelling suggestion in C++98 mode.  */\n+consexpr int a = 1; // { dg-bogus \"did you mean\" }\n+// { dg-error \".consexpr. does not name a type\" \"\" { target *-*-* } .-1 }\n+\n+decltype i = 0; // { dg-bogus \"did you mean\" }\n+// { dg-error \".decltype. does not name a type\" \"\" { target *-*-* } .-1 }"}, {"sha": "3b888c6dcb3b80ca2a2549fe48338915a2b6cd7d", "filename": "gcc/testsuite/g++.dg/spellcheck-macro-ordering.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bf3cdff10beadb7072b0841be3fc7381d3218bd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-macro-ordering.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bf3cdff10beadb7072b0841be3fc7381d3218bd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-macro-ordering.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-macro-ordering.C?ref=8bf3cdff10beadb7072b0841be3fc7381d3218bd", "patch": "@@ -0,0 +1,15 @@\n+// PR c++/72786\n+\n+/* Example of a macro-ordering issue, where the use is before the defn.  */\n+\n+class DocTargetDriver {\n+  virtual void clone() const OVERRIDE { }\n+  /* Offering \"OVERRIDE\" as a spelling suggestion for \"OVERRIDE\" would be\n+     nonsensical.  */\n+  // { dg-bogus \"did you mean\" \"\" { target *-*-* } .-3 }\n+  // { dg-error \"expected .;. at end of member declaration\" \"\" { target *-*-* } .-4 }\n+  // { dg-error \".OVERRIDE. does not name a type\" \"\" { target *-*-* } .-5 }\n+};\n+\n+#define OVERRIDE override\n+"}, {"sha": "e34176d5f7471c2df163f5e3fc1eb66da5c4404a", "filename": "gcc/testsuite/g++.dg/spellcheck-pr78313.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bf3cdff10beadb7072b0841be3fc7381d3218bd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-pr78313.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bf3cdff10beadb7072b0841be3fc7381d3218bd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-pr78313.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-pr78313.C?ref=8bf3cdff10beadb7072b0841be3fc7381d3218bd", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/78313 (see also PR c++/72774)\n+// { dg-do compile }\n+\n+void baz ();\n+namespace A { void foo (); }\n+void bar ()\n+{\n+  using A::foo;\n+  0 ? static_cast<foo> (0) : baz; // { dg-bogus \"did you mean\" }\n+  // { dg-error \"does not name a type\" \"\" { target *-*-* } .-1 }\n+}"}]}