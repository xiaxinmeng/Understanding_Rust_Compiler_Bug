{"sha": "d16b57dfef9dc93375b7606b6c36eece4ac877e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDE2YjU3ZGZlZjlkYzkzMzc1Yjc2MDZiNmMzNmVlY2U0YWM4NzdlNA==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "coudert@clipper.ens.fr", "date": "2006-07-06T20:37:36Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2006-07-06T20:37:36Z"}, "message": "re PR fortran/28129 (gfortran -fbounds-check: Shows invalid array out of bounds error)\n\n\tPR fortran/28129\n\n\t* trans-array.c (gfc_trans_array_bound_check): Add a locus\n\targument, and use it in the error messages.\n\t(gfc_conv_array_index_offset): Donc perform bounds checking on\n\tthe last dimension of assumed-size arrays.\n\n\t* gfortran.dg/bounds_check_4.f90: New test.\n\nFrom-SVN: r115231", "tree": {"sha": "c5099784f74aa94e9b972ca73a5b3802ca6c70fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5099784f74aa94e9b972ca73a5b3802ca6c70fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d16b57dfef9dc93375b7606b6c36eece4ac877e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d16b57dfef9dc93375b7606b6c36eece4ac877e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d16b57dfef9dc93375b7606b6c36eece4ac877e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d16b57dfef9dc93375b7606b6c36eece4ac877e4/comments", "author": null, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50148301270cc7879ab3bf4338bbb22a96705ed0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50148301270cc7879ab3bf4338bbb22a96705ed0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50148301270cc7879ab3bf4338bbb22a96705ed0"}], "stats": {"total": 52, "additions": 43, "deletions": 9}, "files": [{"sha": "cf92deaf7ca9aded915b557e3a0244c820bb2b12", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d16b57dfef9dc93375b7606b6c36eece4ac877e4/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d16b57dfef9dc93375b7606b6c36eece4ac877e4/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=d16b57dfef9dc93375b7606b6c36eece4ac877e4", "patch": "@@ -1,3 +1,11 @@\n+2006-07-06  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n+\n+\tPR fortran/28129\n+\t* trans-array.c (gfc_trans_array_bound_check): Add a locus\n+\targument, and use it in the error messages.\n+\t(gfc_conv_array_index_offset): Donc perform bounds checking on\n+\tthe last dimension of assumed-size arrays.\n+\n 2006-07-06  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n \n \tPR fortran/27874"}, {"sha": "274ccdbe53320a65b2e6f905e0e89029d513526c", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d16b57dfef9dc93375b7606b6c36eece4ac877e4/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d16b57dfef9dc93375b7606b6c36eece4ac877e4/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=d16b57dfef9dc93375b7606b6c36eece4ac877e4", "patch": "@@ -1826,7 +1826,8 @@ gfc_conv_array_ubound (tree descriptor, int dim)\n /* Generate code to perform an array index bound check.  */\n \n static tree\n-gfc_trans_array_bound_check (gfc_se * se, tree descriptor, tree index, int n)\n+gfc_trans_array_bound_check (gfc_se * se, tree descriptor, tree index, int n,\n+\t\t\t     locus * where)\n {\n   tree fault;\n   tree tmp;\n@@ -1846,8 +1847,7 @@ gfc_trans_array_bound_check (gfc_se * se, tree descriptor, tree index, int n)\n   else\n     asprintf (&msg, \"%s, lower bound of dimension %d exceeded\",\n \t      gfc_msg_fault, n+1);\n-  gfc_trans_runtime_check (fault, msg, &se->pre,\n-\t\t\t   (se->ss ? &se->ss->expr->where : NULL));\n+  gfc_trans_runtime_check (fault, msg, &se->pre, where);\n   gfc_free (msg);\n \n   /* Check upper bound.  */\n@@ -1859,8 +1859,7 @@ gfc_trans_array_bound_check (gfc_se * se, tree descriptor, tree index, int n)\n   else\n     asprintf (&msg, \"%s, upper bound of dimension %d exceeded\",\n \t      gfc_msg_fault, n+1);\n-  gfc_trans_runtime_check (fault, msg, &se->pre,\n-\t\t\t   (se->ss ? &se->ss->expr->where : NULL));\n+  gfc_trans_runtime_check (fault, msg, &se->pre, where);\n   gfc_free (msg);\n \n   return index;\n@@ -1892,8 +1891,10 @@ gfc_conv_array_index_offset (gfc_se * se, gfc_ss_info * info, int dim, int i,\n \t  /* We've already translated this value outside the loop.  */\n \t  index = info->subscript[dim]->data.scalar.expr;\n \n-\t  index =\n-\t    gfc_trans_array_bound_check (se, info->descriptor, index, dim);\n+\t  if ((ar->as->type != AS_ASSUMED_SIZE && !ar->as->cp_was_assumed)\n+\t      || dim < ar->dimen - 1)\n+\t    index = gfc_trans_array_bound_check (se, info->descriptor,\n+\t\t\t\t\t\t index, dim, &ar->where);\n \t  break;\n \n \tcase DIMEN_VECTOR:\n@@ -1916,8 +1917,10 @@ gfc_conv_array_index_offset (gfc_se * se, gfc_ss_info * info, int dim, int i,\n \t  index = gfc_evaluate_now (index, &se->pre);\n \n \t  /* Do any bounds checking on the final info->descriptor index.  */\n-\t  index = gfc_trans_array_bound_check (se, info->descriptor,\n-\t\t\t\t\t       index, dim);\n+\t  if ((ar->as->type != AS_ASSUMED_SIZE && !ar->as->cp_was_assumed)\n+\t      || dim < ar->dimen - 1)\n+\t    index = gfc_trans_array_bound_check (se, info->descriptor,\n+\t\t\t\t\t\t index, dim, &ar->where);\n \t  break;\n \n \tcase DIMEN_RANGE:"}, {"sha": "272acc98a1b9991cb7caf82b39d9a90ffbf8e844", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d16b57dfef9dc93375b7606b6c36eece4ac877e4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d16b57dfef9dc93375b7606b6c36eece4ac877e4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d16b57dfef9dc93375b7606b6c36eece4ac877e4", "patch": "@@ -1,3 +1,8 @@\n+2006-07-06  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n+\n+\tPR fortran/28129\n+\t* gfortran.dg/bounds_check_4.f90: New test.\n+\n 2006-07-05  Richard Guenther  <rguenther@suse.de>\n \n \tPR target/28158"}, {"sha": "9ce2298f2397e3953be7d137d7e4445f9e055d00", "filename": "gcc/testsuite/gfortran.dg/bounds_check_4.f90", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d16b57dfef9dc93375b7606b6c36eece4ac877e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d16b57dfef9dc93375b7606b6c36eece4ac877e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_4.f90?ref=d16b57dfef9dc93375b7606b6c36eece4ac877e4", "patch": "@@ -0,0 +1,18 @@\n+subroutine foo(n,x)\n+  implicit none\n+  integer, intent(in) :: n\n+  complex(8), intent(out) :: x(n,*)\n+  x(1,1) = 0.d0\n+  x(n,1) = 0.d0\n+  x(:,1) = 0.d0\n+  x(2:,1) = 0.d0\n+  x(:n-1,1) = 0.d0\n+  x((/1,n/),1) = 0.d0\n+end subroutine foo\n+\n+program test\n+  implicit none\n+  integer, parameter :: n = 17\n+  complex(8) :: x(n,n)\n+  call foo(n,x)\n+end program test"}]}