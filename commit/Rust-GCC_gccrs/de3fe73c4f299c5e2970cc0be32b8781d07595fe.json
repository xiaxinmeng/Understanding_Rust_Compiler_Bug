{"sha": "de3fe73c4f299c5e2970cc0be32b8781d07595fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGUzZmU3M2M0ZjI5OWM1ZTI5NzBjYzBiZTMyYjg3ODFkMDc1OTVmZQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2004-10-15T21:11:50Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2004-10-15T21:11:50Z"}, "message": "re PR c++/17042 (Duplicated symbol in assembly output)\n\n\tPR c++/17042\n\t* decl.c (declare_global_var): Use the return value from pushdecl.\n\n\tPR c++/14667\n\t* parser.c (cp_parser_simple_declaration): Do not diagnose invalid\n\ttype names if we have already found a valid type.\n\t(cp_parser_member_declaration): Likewise.\n\n\tPR c++/17852\n\t* parser.c (cp_parser_member_specification_opt): Handle\n\tCPP_PRAGMA.\n\n\tPR c++/17042\n\t* g++.dg/init/dso_handle1.C: New test.\n\n\tPR c++/17852\n\t* g++.dg/parse/pragma1.C: New test.\n\n\tPR c++/14667\n\t* g++.dg/parse/typedef6.C: New test.\n\nFrom-SVN: r89118", "tree": {"sha": "9c86b5ff24bd104be7e7755195240bab8d1da703", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c86b5ff24bd104be7e7755195240bab8d1da703"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de3fe73c4f299c5e2970cc0be32b8781d07595fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de3fe73c4f299c5e2970cc0be32b8781d07595fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de3fe73c4f299c5e2970cc0be32b8781d07595fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de3fe73c4f299c5e2970cc0be32b8781d07595fe/comments", "author": null, "committer": null, "parents": [{"sha": "7832e66155ab64fdfa685e27e0f21c65345c39a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7832e66155ab64fdfa685e27e0f21c65345c39a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7832e66155ab64fdfa685e27e0f21c65345c39a0"}], "stats": {"total": 68, "additions": 65, "deletions": 3}, "files": [{"sha": "92c9ca421d5d58fdb5f9ea7c55f5d53f8ae047ad", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de3fe73c4f299c5e2970cc0be32b8781d07595fe/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de3fe73c4f299c5e2970cc0be32b8781d07595fe/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=de3fe73c4f299c5e2970cc0be32b8781d07595fe", "patch": "@@ -1,3 +1,17 @@\n+2004-10-15  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/17042\n+\t* decl.c (declare_global_var): Use the return value from pushdecl.\n+\n+\tPR c++/14667\n+\t* parser.c (cp_parser_simple_declaration): Do not diagnose invalid\n+\ttype names if we have already found a valid type.\n+\t(cp_parser_member_declaration): Likewise.\n+\t\n+\tPR c++/17852\n+\t* parser.c (cp_parser_member_specification_opt): Handle\n+\tCPP_PRAGMA.\n+\n 2004-10-15  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* dump.c, g++spec.c, repo.c: Update copyright."}, {"sha": "00844fdbd0ba2c218056a2a7bda3234c45593770", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de3fe73c4f299c5e2970cc0be32b8781d07595fe/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de3fe73c4f299c5e2970cc0be32b8781d07595fe/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=de3fe73c4f299c5e2970cc0be32b8781d07595fe", "patch": "@@ -5029,7 +5029,11 @@ declare_global_var (tree name, tree type)\n   TREE_PUBLIC (decl) = 1;\n   DECL_EXTERNAL (decl) = 1;\n   DECL_ARTIFICIAL (decl) = 1;\n-  pushdecl (decl);\n+  /* If the user has explicitly declared this variable (perhaps\n+     because the code we are compiling is part of a low-level runtime\n+     library), then it is possible that our declaration will be merged\n+     with theirs by pushdecl.  */\n+  decl = pushdecl (decl);\n   cp_finish_decl (decl, NULL_TREE, NULL_TREE, 0);\n   pop_from_top_level ();\n "}, {"sha": "611a794d7665ada54df8c844329a1aaf0b3566f4", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de3fe73c4f299c5e2970cc0be32b8781d07595fe/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de3fe73c4f299c5e2970cc0be32b8781d07595fe/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=de3fe73c4f299c5e2970cc0be32b8781d07595fe", "patch": "@@ -6953,7 +6953,8 @@ cp_parser_simple_declaration (cp_parser* parser,\n        T t;\n \n      where \"T\" should name a type -- but does not.  */\n-  if (cp_parser_parse_and_diagnose_invalid_type_name (parser))\n+  if (!decl_specifiers.type\n+      && cp_parser_parse_and_diagnose_invalid_type_name (parser))\n     {\n       /* If parsing tentatively, we should commit; we really are\n \t looking at a declaration.  */\n@@ -12880,6 +12881,13 @@ cp_parser_member_specification_opt (cp_parser* parser)\n \t  break;\n \n \tdefault:\n+\t  /* Accept #pragmas at class scope.  */\n+\t  if (token->type == CPP_PRAGMA)\n+\t    {\n+\t      cp_lexer_handle_pragma (parser->lexer);\n+\t      break;\n+\t    }\n+\n \t  /* Otherwise, the next construction must be a\n \t     member-declaration.  */\n \t  cp_parser_member_declaration (parser);\n@@ -12963,7 +12971,8 @@ cp_parser_member_declaration (cp_parser* parser)\n   prefix_attributes = decl_specifiers.attributes;\n   decl_specifiers.attributes = NULL_TREE;\n   /* Check for an invalid type-name.  */\n-  if (cp_parser_parse_and_diagnose_invalid_type_name (parser))\n+  if (!decl_specifiers.type\n+      && cp_parser_parse_and_diagnose_invalid_type_name (parser))\n     return;\n   /* If there is no declarator, then the decl-specifier-seq should\n      specify a type.  */"}, {"sha": "4df9b8a0d23c86b35dfa145cfa31dfc12653e019", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de3fe73c4f299c5e2970cc0be32b8781d07595fe/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de3fe73c4f299c5e2970cc0be32b8781d07595fe/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=de3fe73c4f299c5e2970cc0be32b8781d07595fe", "patch": "@@ -1,3 +1,14 @@\n+2004-10-15  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/17042\n+\t* g++.dg/init/dso_handle1.C: New test.\n+\n+\tPR c++/17852\n+\t* g++.dg/parse/pragma1.C: New test.\n+\n+\tPR c++/14667\n+\t* g++.dg/parse/typedef6.C: New test.\n+\n 2004-10-15  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* gcc.c-torture/execute/ieee/ieee.exp: Disable on powerpc-*-*spe."}, {"sha": "6578f4fae7e9956f503c0ab03ba7921b37b4f18c", "filename": "gcc/testsuite/g++.dg/init/dso_handle1.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de3fe73c4f299c5e2970cc0be32b8781d07595fe/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fdso_handle1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de3fe73c4f299c5e2970cc0be32b8781d07595fe/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fdso_handle1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fdso_handle1.C?ref=de3fe73c4f299c5e2970cc0be32b8781d07595fe", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/17042\n+// { dg-do assemble }\n+// { dg-options \"-fuse-cxa-atexit\" }\n+\n+struct A\n+{  A();  ~A(); };\n+A a;\n+extern \"C\" { void* __dso_handle __attribute__ ((__weak__)); }\n+void f()\n+{  __dso_handle = 0; }"}, {"sha": "cdfd79caadb4bd7921bc5fa74841be9a594ea6db", "filename": "gcc/testsuite/g++.dg/parse/pragma1.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de3fe73c4f299c5e2970cc0be32b8781d07595fe/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fpragma1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de3fe73c4f299c5e2970cc0be32b8781d07595fe/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fpragma1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fpragma1.C?ref=de3fe73c4f299c5e2970cc0be32b8781d07595fe", "patch": "@@ -0,0 +1,8 @@\n+// PR c++/17852\n+\n+class T {\n+#pragma X\n+  struct S {\n+  };\n+#pragma Y\n+};"}, {"sha": "d3a39fc8586ce287c6c9e5eb11830dab1ea93a18", "filename": "gcc/testsuite/g++.dg/parse/typedef6.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de3fe73c4f299c5e2970cc0be32b8781d07595fe/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftypedef6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de3fe73c4f299c5e2970cc0be32b8781d07595fe/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftypedef6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftypedef6.C?ref=de3fe73c4f299c5e2970cc0be32b8781d07595fe", "patch": "@@ -0,0 +1,6 @@\n+// PR c++/14667\n+\n+template<class T>\n+class Class1;\n+\n+class Class2 {} typedef Class1<Class2> Type1; // { dg-error \"\" }"}]}