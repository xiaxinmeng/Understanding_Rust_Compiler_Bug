{"sha": "413ec1d12c50f8e2e6adb4de30482780bdfdeeb4", "node_id": "C_kwDOANBUbNoAKDQxM2VjMWQxMmM1MGY4ZTJlNmFkYjRkZTMwNDgyNzgwYmRmZGVlYjQ", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2023-03-10T13:15:14Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2023-03-10T14:08:12Z"}, "message": "Speedup PTA solving for call constraint sets\n\nWith calls we now often get contraints like\n\n  callarg = *callarg + UNKNOWN\n\nor similar cases.  The important thing to note is that this\ncomplex constraint changes the node solution itself, so when\nsolving the node is marked as changed immediately again.  When\nthat happens it's profitable to iterate that self-cycle immediately\nso we maximize cache reuse and build up the successor graph quickly\nto get better topological ordering and reduce the number of\niterations of the solving.\n\nFor a testcase derived from ceph this reduces the time spent in\nPTA solving from 453s to 92s which is quite significant.\n\n\t* tree-ssa-structalias.cc (solve_graph): Immediately\n\titerate self-cycles.", "tree": {"sha": "ba3903bf799f1192211ca0590f9f3bd8d4ddaa4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba3903bf799f1192211ca0590f9f3bd8d4ddaa4f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/413ec1d12c50f8e2e6adb4de30482780bdfdeeb4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/413ec1d12c50f8e2e6adb4de30482780bdfdeeb4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/413ec1d12c50f8e2e6adb4de30482780bdfdeeb4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/413ec1d12c50f8e2e6adb4de30482780bdfdeeb4/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "649f1939baf11f45fd3579b8b9601c7840a097b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/649f1939baf11f45fd3579b8b9601c7840a097b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/649f1939baf11f45fd3579b8b9601c7840a097b3"}], "stats": {"total": 15, "additions": 11, "deletions": 4}, "files": [{"sha": "c3c5bce42dfe7464f0854a57087bd4ca20253370", "filename": "gcc/tree-ssa-structalias.cc", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/413ec1d12c50f8e2e6adb4de30482780bdfdeeb4/gcc%2Ftree-ssa-structalias.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/413ec1d12c50f8e2e6adb4de30482780bdfdeeb4/gcc%2Ftree-ssa-structalias.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.cc?ref=413ec1d12c50f8e2e6adb4de30482780bdfdeeb4", "patch": "@@ -2775,8 +2775,15 @@ solve_graph (constraint_graph_t graph)\n \t    continue;\n \n \t  /* If the node has changed, we need to process the\n-\t     complex constraints and outgoing edges again.  */\n-\t  if (bitmap_clear_bit (changed, i))\n+\t     complex constraints and outgoing edges again.  For complex\n+\t     constraints that modify i itself, like the common group of\n+\t       callarg = callarg + UNKNOWN;\n+\t       callarg = *callarg + UNKNOWN;\n+\t       *callarg = callescape;\n+\t     make sure to iterate immediately because that maximizes\n+\t     cache reuse and expands the graph quickest, leading to\n+\t     better visitation order in the next iteration.  */\n+\t  while (bitmap_clear_bit (changed, i))\n \t    {\n \t      unsigned int j;\n \t      constraint_t c;\n@@ -2794,7 +2801,7 @@ solve_graph (constraint_graph_t graph)\n \t\t     ???  But we shouldn't ended up with \"changed\" set ...  */\n \t\t  if (vi->oldsolution\n \t\t      && bitmap_bit_p (vi->oldsolution, anything_id))\n-\t\t    continue;\n+\t\t    break;\n \t\t  bitmap_copy (pts, get_varinfo (find (anything_id))->solution);\n \t\t}\n \t      else if (vi->oldsolution)\n@@ -2803,7 +2810,7 @@ solve_graph (constraint_graph_t graph)\n \t\tbitmap_copy (pts, vi->solution);\n \n \t      if (bitmap_empty_p (pts))\n-\t\tcontinue;\n+\t\tbreak;\n \n \t      if (vi->oldsolution)\n \t\tbitmap_ior_into (vi->oldsolution, pts);"}]}