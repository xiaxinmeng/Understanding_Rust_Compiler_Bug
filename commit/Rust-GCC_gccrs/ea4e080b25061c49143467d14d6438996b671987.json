{"sha": "ea4e080b25061c49143467d14d6438996b671987", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWE0ZTA4MGIyNTA2MWM0OTE0MzQ2N2QxNGQ2NDM4OTk2YjY3MTk4Nw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@markmitchell.com", "date": "1998-05-26T23:17:56Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1998-05-26T23:17:56Z"}, "message": "friend.c (is_friend): Use comptypes, rather than == to compare types.\n\n\t* friend.c (is_friend): Use comptypes, rather than == to compare\n\ttypes.  Modify for new representation of template friends.\n\t(make_friend_class): Likewise.\n\t* pt.c (tsubst_friend_class): Undo 1998-05-21 change.  Tweak.\n\t(instantiate_class_template): Deal with template friends.\n\nFrom-SVN: r20080", "tree": {"sha": "9a97484e1c054bb01be5879ff02fcca55cf3f0f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a97484e1c054bb01be5879ff02fcca55cf3f0f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea4e080b25061c49143467d14d6438996b671987", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea4e080b25061c49143467d14d6438996b671987", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea4e080b25061c49143467d14d6438996b671987", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea4e080b25061c49143467d14d6438996b671987/comments", "author": null, "committer": null, "parents": [{"sha": "f5e23e0df78594ef4148ed4e8ea6068804f5eb15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5e23e0df78594ef4148ed4e8ea6068804f5eb15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5e23e0df78594ef4148ed4e8ea6068804f5eb15"}], "stats": {"total": 87, "additions": 73, "deletions": 14}, "files": [{"sha": "f1249c8c4bdb7cc0ef18e9ef7007d3b674ee284a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea4e080b25061c49143467d14d6438996b671987/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea4e080b25061c49143467d14d6438996b671987/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ea4e080b25061c49143467d14d6438996b671987", "patch": "@@ -1,5 +1,11 @@\n 1998-05-26  Mark Mitchell  <mark@markmitchell.com>\n \n+\t* friend.c (is_friend): Use comptypes, rather than == to compare\n+\ttypes.  Modify for new representation of template friends.\n+\t(make_friend_class): Likewise.\n+\t* pt.c (tsubst_friend_class): Undo 1998-05-21 change.  Tweak.\n+\t(instantiate_class_template): Deal with template friends.\n+\n \t* decl.c (store_parm_decls): Remove redundant call to\n \texpand_main_function.\n "}, {"sha": "129047a5d16aa7569d6a74686768b3b53882a967", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea4e080b25061c49143467d14d6438996b671987/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea4e080b25061c49143467d14d6438996b671987/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=ea4e080b25061c49143467d14d6438996b671987", "patch": "@@ -905,7 +905,9 @@ struct lang_type\n /* Same, but cache a list whose value is the binfo of this type.  */\n #define CLASSTYPE_BINFO_AS_LIST(NODE) (TYPE_LANG_SPECIFIC(NODE)->binfo_as_list)\n \n-/* A list of class types with which this type is a friend.  */\n+/* A list of class types with which this type is a friend.  The\n+   TREE_VALUE is normally a TYPE, but will be a TEMPLATE_DECL in the\n+   case of a template friend.  */\n #define CLASSTYPE_FRIEND_CLASSES(NODE) (TYPE_LANG_SPECIFIC(NODE)->friend_classes)\n \n #ifdef MI_MATRIX"}, {"sha": "8adeb600450efd54897f1f57ed46ef81f8adb02a", "filename": "gcc/cp/friend.c", "status": "modified", "additions": 24, "deletions": 13, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea4e080b25061c49143467d14d6438996b671987/gcc%2Fcp%2Ffriend.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea4e080b25061c49143467d14d6438996b671987/gcc%2Fcp%2Ffriend.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ffriend.c?ref=ea4e080b25061c49143467d14d6438996b671987", "patch": "@@ -64,7 +64,7 @@ is_friend (type, supplicant)\n \t      tree friends = TREE_VALUE (list);\n \t      for (; friends ; friends = TREE_CHAIN (friends))\n \t\t{\n-\t\t  if (ctype == TREE_PURPOSE (friends))\n+\t\t  if (comptypes (ctype, TREE_PURPOSE (friends), 1))\n \t\t    return 1;\n \n \t\t  if (TREE_VALUE (friends) == NULL_TREE)\n@@ -102,10 +102,9 @@ is_friend (type, supplicant)\n \t{\n \t  tree t = TREE_VALUE (list);\n \n-\t  if (supplicant == t\n-\t      || (CLASSTYPE_IS_TEMPLATE (t)\n-\t\t  && is_specialization_of (TYPE_MAIN_DECL (supplicant),\n-\t\t\t\t\t   CLASSTYPE_TI_TEMPLATE (t))))\n+\t  if (TREE_CODE (t) == TEMPLATE_DECL ? \n+\t      is_specialization_of (TYPE_MAIN_DECL (supplicant), t) :\n+\t      comptypes (supplicant, t, 1))\n \t    return 1;\n \t}\n     }      \n@@ -241,6 +240,7 @@ make_friend_class (type, friend_type)\n      tree type, friend_type;\n {\n   tree classes;\n+  int is_template_friend;\n \n   if (IS_SIGNATURE (type))\n     {\n@@ -253,25 +253,36 @@ make_friend_class (type, friend_type)\n \t     IDENTIFIER_POINTER (TYPE_IDENTIFIER (friend_type)));\n       return;\n     }\n-  /* If the TYPE is a template then it makes sense for it to be\n-     friends with itself; this means that each instantiation is\n-     friends with all other instantiations.  */\n-  if (type == friend_type && !CLASSTYPE_IS_TEMPLATE (type))\n+  if (processing_template_decl > template_class_depth (type))\n+    /* If the TYPE is a template then it makes sense for it to be\n+       friends with itself; this means that each instantiation is\n+       friends with all other instantiations.  */\n+    is_template_friend = 1;\n+  else if (comptypes (type, friend_type, 1))\n     {\n       pedwarn (\"class `%s' is implicitly friends with itself\",\n \t       TYPE_NAME_STRING (type));\n       return;\n     }\n+  else\n+    is_template_friend = 0;\n \n   GNU_xref_hier (TYPE_NAME_STRING (type),\n \t\t TYPE_NAME_STRING (friend_type), 0, 0, 1);\n \n+  if (is_template_friend)\n+    friend_type = CLASSTYPE_TI_TEMPLATE (friend_type);\n+\n   classes = CLASSTYPE_FRIEND_CLASSES (type);\n-  while (classes && TREE_VALUE (classes) != friend_type)\n+  while (classes \n+\t /* Stop if we find the same type on the list.  */\n+\t && !(TREE_CODE (TREE_VALUE (classes)) == TEMPLATE_DECL ?\n+\t      friend_type == TREE_VALUE (classes) :\n+\t      comptypes (TREE_VALUE (classes), friend_type, 1)))\n     classes = TREE_CHAIN (classes);\n-  if (classes)\n-    warning (\"class `%s' is already friends with class `%s'\",\n-\t     TYPE_NAME_STRING (TREE_VALUE (classes)), TYPE_NAME_STRING (type));\n+  if (classes) \n+    cp_warning (\"`%T' is already a friend of `%T'\",\n+\t\tTREE_VALUE (classes), type);\n   else\n     {\n       CLASSTYPE_FRIEND_CLASSES (type)"}, {"sha": "40d5370a81044a49f816adc4bc18e7c04a5b23a1", "filename": "gcc/testsuite/g++.old-deja/g++.pt/friend20.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea4e080b25061c49143467d14d6438996b671987/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ffriend20.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea4e080b25061c49143467d14d6438996b671987/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ffriend20.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ffriend20.C?ref=ea4e080b25061c49143467d14d6438996b671987", "patch": "@@ -0,0 +1,10 @@\n+// Build don't link:\n+\n+template <class T = int> struct A;\n+\n+template <class T> struct B\n+{\n+  friend class A<T>;\n+};\n+\n+template class B<int>;"}, {"sha": "c724f8c992f0e0f3e631ad8c5f2d070d6d5d4802", "filename": "gcc/testsuite/g++.old-deja/g++.pt/friend21.C", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea4e080b25061c49143467d14d6438996b671987/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ffriend21.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea4e080b25061c49143467d14d6438996b671987/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ffriend21.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ffriend21.C?ref=ea4e080b25061c49143467d14d6438996b671987", "patch": "@@ -0,0 +1,30 @@\n+// Build don't link:\n+\n+template <class T> struct A {\n+  static void f();\n+};\n+\n+template <class T> class B\n+{\n+  friend class A<T>;\n+  static int i;\n+};\n+\n+template <class T> class C\n+{\n+  template <class U>\n+  friend class A<U>;\n+\n+  static int i;\n+};\n+\n+template <class T>\n+void A<T>::f()\n+{\n+  B<T>::i = 3;\n+  C<T>::i = 3;\n+  C<double>::i = 3;\n+  B<double>::i = 3; // ERROR - member `i' is private\n+}\n+\n+template void A<int>::f(); // ERROR - instantiated from here"}]}