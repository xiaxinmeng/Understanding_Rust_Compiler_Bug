{"sha": "395552b520063d9a372ed5ed5122db15680b0616", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzk1NTUyYjUyMDA2M2Q5YTM3MmVkNWVkNTEyMmRiMTU2ODBiMDYxNg==", "commit": {"author": {"name": "Michael Matz", "email": "matz@suse.de", "date": "2018-09-01T17:22:05Z"}, "committer": {"name": "Michael Matz", "email": "matz@gcc.gnu.org", "date": "2018-09-01T17:22:05Z"}, "message": "re PR tree-optimization/87074 (Unroll and jam bug: O3 result differ from O2)\n\nFix PR87074\n\n\tPR tree-optimization/87074\n\t* gimple-loop-jam.c (unroll_jam_possible_p): Check loop exit\n\tPHIs for outer-loop uses.\n\ntestsuite/\n\t* gcc.dg/pr87074.c: New test.\n\nFrom-SVN: r264029", "tree": {"sha": "fb685a96978423effc2e4937c08ad0c534bb156b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb685a96978423effc2e4937c08ad0c534bb156b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/395552b520063d9a372ed5ed5122db15680b0616", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/395552b520063d9a372ed5ed5122db15680b0616", "html_url": "https://github.com/Rust-GCC/gccrs/commit/395552b520063d9a372ed5ed5122db15680b0616", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/395552b520063d9a372ed5ed5122db15680b0616/comments", "author": {"login": "susematz", "id": 4117296, "node_id": "MDQ6VXNlcjQxMTcyOTY=", "avatar_url": "https://avatars.githubusercontent.com/u/4117296?v=4", "gravatar_id": "", "url": "https://api.github.com/users/susematz", "html_url": "https://github.com/susematz", "followers_url": "https://api.github.com/users/susematz/followers", "following_url": "https://api.github.com/users/susematz/following{/other_user}", "gists_url": "https://api.github.com/users/susematz/gists{/gist_id}", "starred_url": "https://api.github.com/users/susematz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/susematz/subscriptions", "organizations_url": "https://api.github.com/users/susematz/orgs", "repos_url": "https://api.github.com/users/susematz/repos", "events_url": "https://api.github.com/users/susematz/events{/privacy}", "received_events_url": "https://api.github.com/users/susematz/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c8a4f039fc6333507025e5b07a388c504b3dfcb1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8a4f039fc6333507025e5b07a388c504b3dfcb1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8a4f039fc6333507025e5b07a388c504b3dfcb1"}], "stats": {"total": 66, "additions": 64, "deletions": 2}, "files": [{"sha": "4d432b8c2d0e7e8d1bbe5af274a0b80765d58844", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/395552b520063d9a372ed5ed5122db15680b0616/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/395552b520063d9a372ed5ed5122db15680b0616/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=395552b520063d9a372ed5ed5122db15680b0616", "patch": "@@ -1,3 +1,9 @@\n+2018-09-01  Michael Matz  <matz@suse.de>\n+\n+\tPR tree-optimization/87074\n+\t* gimple-loop-jam.c (unroll_jam_possible_p): Check loop exit\n+\tPHIs for outer-loop uses.\n+\n 2018-09-01  Gerald Pfeifer  <gerald@pfeifer.com>\n \n \t* doc/install.texi (Prerequisites): Adjust link mpfr.org."}, {"sha": "c6bd0428684795c89f33f9e8dde6d23164acecfa", "filename": "gcc/gimple-loop-jam.c", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/395552b520063d9a372ed5ed5122db15680b0616/gcc%2Fgimple-loop-jam.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/395552b520063d9a372ed5ed5122db15680b0616/gcc%2Fgimple-loop-jam.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-loop-jam.c?ref=395552b520063d9a372ed5ed5122db15680b0616", "patch": "@@ -161,7 +161,7 @@ bb_prevents_fusion_p (basic_block bb)\n   gimple_stmt_iterator gsi;\n   /* BB is duplicated by outer unrolling and then all N-1 first copies\n      move into the body of the fused inner loop.  If BB exits the outer loop\n-     the last copy still doess so, and the first N-1 copies are cancelled\n+     the last copy still does so, and the first N-1 copies are cancelled\n      by loop unrolling, so also after fusion it's the exit block.\n      But there might be other reasons that prevent fusion:\n        * stores or unknown side-effects prevent fusion\n@@ -227,6 +227,33 @@ unroll_jam_possible_p (struct loop *outer, struct loop *loop)\n       || !expr_invariant_in_loop_p (outer, niter.niter))\n     return false;\n \n+  /* If the inner loop produces any values that are used inside the\n+     outer loop (except the virtual op) then it can flow\n+     back (perhaps indirectly) into the inner loop.  This prevents\n+     fusion: without fusion the value at the last iteration is used,\n+     with fusion the value after the initial iteration is used.\n+\n+     If all uses are outside the outer loop this doesn't prevent fusion;\n+     the value of the last iteration is still used (and the values from\n+     all intermediate iterations are dead).  */\n+  gphi_iterator psi;\n+  for (psi = gsi_start_phis (single_exit (loop)->dest);\n+       !gsi_end_p (psi); gsi_next (&psi))\n+    {\n+      imm_use_iterator imm_iter;\n+      use_operand_p use_p;\n+      tree op = gimple_phi_result (psi.phi ());\n+      if (virtual_operand_p (op))\n+\tcontinue;\n+      FOR_EACH_IMM_USE_FAST (use_p, imm_iter, op)\n+\t{\n+\t  gimple *use_stmt = USE_STMT (use_p);\n+\t  if (!is_gimple_debug (use_stmt)\n+\t      && flow_bb_inside_loop_p (outer, gimple_bb (use_stmt)))\n+\t    return false;\n+\t}\n+    }\n+\n   /* And check blocks belonging to just outer loop.  */\n   bbs = XNEWVEC (basic_block, n_basic_blocks_for_fn (cfun));\n   n = get_loop_body_with_size (outer, bbs, n_basic_blocks_for_fn (cfun));\n@@ -245,7 +272,6 @@ unroll_jam_possible_p (struct loop *outer, struct loop *loop)\n      body would be the after-iter value of the first body) if it's over\n      an associative and commutative operation.  We wouldn't\n      be able to handle unknown cycles.  */\n-  gphi_iterator psi;\n   for (psi = gsi_start_phis (loop->header); !gsi_end_p (psi); gsi_next (&psi))\n     {\n       affine_iv iv;"}, {"sha": "83bab179d6835c8920316e548b7fe0076044b6c4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/395552b520063d9a372ed5ed5122db15680b0616/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/395552b520063d9a372ed5ed5122db15680b0616/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=395552b520063d9a372ed5ed5122db15680b0616", "patch": "@@ -1,3 +1,8 @@\n+2018-09-01  Michael Matz  <matz@suse.de>\n+\n+\tPR tree-optimization/87074\n+\t* gcc.dg/pr87074.c: New test.\n+\n 2018-08-31  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/87168"}, {"sha": "d838fcd8fc544a54cf666bad2db048e6324f3ca9", "filename": "gcc/testsuite/gcc.dg/pr87074.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/395552b520063d9a372ed5ed5122db15680b0616/gcc%2Ftestsuite%2Fgcc.dg%2Fpr87074.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/395552b520063d9a372ed5ed5122db15680b0616/gcc%2Ftestsuite%2Fgcc.dg%2Fpr87074.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr87074.c?ref=395552b520063d9a372ed5ed5122db15680b0616", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -floop-unroll-and-jam --param unroll-jam-min-percent=0\" } */\n+long b;\n+unsigned c[5];\n+unsigned long long d = 3;\n+int e, f, g;\n+\n+void h() {\n+  for (; f < 11; f++) {\n+    b = g;\n+    for (e = 0; e < 5; e++) {\n+      c[e] = e - b - (c[e] >> 5);\n+      g = c[e];\n+    }\n+  }\n+  if (c[0])\n+    d = 0;\n+}\n+\n+extern void abort(void);\n+int main() {\n+  h();\n+  if (d != 0)\n+    abort ();\n+}"}]}